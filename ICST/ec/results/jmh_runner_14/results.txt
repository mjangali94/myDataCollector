=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 754456.162 ops/s
# Warmup Iteration   2: 768696.856 ops/s
# Warmup Iteration   3: 989281.916 ops/s
# Warmup Iteration   4: 1020951.535 ops/s
# Warmup Iteration   5: 1002264.464 ops/s
# Warmup Iteration   6: 1019412.998 ops/s
# Warmup Iteration   7: 1019539.533 ops/s
# Warmup Iteration   8: 1023014.731 ops/s
# Warmup Iteration   9: 1021003.967 ops/s
# Warmup Iteration  10: 1024110.700 ops/s
# Warmup Iteration  11: 1006317.621 ops/s
# Warmup Iteration  12: 933514.814 ops/s
# Warmup Iteration  13: 925745.481 ops/s
# Warmup Iteration  14: 1020998.289 ops/s
# Warmup Iteration  15: 1019543.292 ops/s
# Warmup Iteration  16: 1021382.758 ops/s
# Warmup Iteration  17: 1079868.850 ops/s
# Warmup Iteration  18: 1082847.035 ops/s
# Warmup Iteration  19: 1081214.205 ops/s
# Warmup Iteration  20: 1081998.555 ops/s
# Warmup Iteration  21: 1082919.537 ops/s
# Warmup Iteration  22: 1081977.654 ops/s
# Warmup Iteration  23: 1075142.775 ops/s
# Warmup Iteration  24: 1080259.464 ops/s
# Warmup Iteration  25: 1083656.799 ops/s
# Warmup Iteration  26: 1081761.562 ops/s
# Warmup Iteration  27: 1076329.605 ops/s
# Warmup Iteration  28: 1077648.243 ops/s
# Warmup Iteration  29: 1080170.458 ops/s
# Warmup Iteration  30: 1073773.719 ops/s
Iteration   1: 1086467.177 ops/s
Iteration   2: 1081322.386 ops/s
Iteration   3: 1081144.462 ops/s
Iteration   4: 1087404.976 ops/s
Iteration   5: 1066729.663 ops/s
Iteration   6: 1081022.610 ops/s
Iteration   7: 1091245.152 ops/s
Iteration   8: 1081994.167 ops/s
Iteration   9: 1067508.541 ops/s
Iteration  10: 1077068.911 ops/s
Iteration  11: 1085082.183 ops/s
Iteration  12: 1084689.444 ops/s
Iteration  13: 1089956.336 ops/s
Iteration  14: 1078854.488 ops/s
Iteration  15: 1089344.633 ops/s
Iteration  16: 1082671.014 ops/s
Iteration  17: 1086396.111 ops/s
Iteration  18: 1086904.153 ops/s
Iteration  19: 1071191.660 ops/s
Iteration  20: 1065640.240 ops/s
Iteration  21: 1080334.914 ops/s
Iteration  22: 1081760.235 ops/s
Iteration  23: 1079512.870 ops/s
Iteration  24: 1085754.455 ops/s
Iteration  25: 1089468.151 ops/s
Iteration  26: 1051272.240 ops/s
Iteration  27: 1077789.347 ops/s
Iteration  28: 1084847.156 ops/s
Iteration  29: 1080631.477 ops/s
Iteration  30: 1088303.537 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_subList":
  1080743.756 ±(99.9%) 5845.092 ops/s [Average]
  (min, avg, max) = (1051272.240, 1080743.756, 1091245.152), stdev = 8748.659
  CI (99.9%): [1074898.665, 1086588.848] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_subList  thrpt   30  1080743.756 ± 5845.092  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6400791.323 ops/s
# Warmup Iteration   2: 12583730.404 ops/s
# Warmup Iteration   3: 10790998.849 ops/s
# Warmup Iteration   4: 12960472.420 ops/s
# Warmup Iteration   5: 12863365.895 ops/s
# Warmup Iteration   6: 13039522.314 ops/s
# Warmup Iteration   7: 12749988.850 ops/s
# Warmup Iteration   8: 12773260.106 ops/s
# Warmup Iteration   9: 12978247.668 ops/s
# Warmup Iteration  10: 13016981.059 ops/s
# Warmup Iteration  11: 12860471.376 ops/s
# Warmup Iteration  12: 12922493.099 ops/s
# Warmup Iteration  13: 13017595.362 ops/s
# Warmup Iteration  14: 13003428.354 ops/s
# Warmup Iteration  15: 12950909.945 ops/s
# Warmup Iteration  16: 12823267.768 ops/s
# Warmup Iteration  17: 13010618.123 ops/s
# Warmup Iteration  18: 12890764.231 ops/s
# Warmup Iteration  19: 12916669.411 ops/s
# Warmup Iteration  20: 12899668.869 ops/s
# Warmup Iteration  21: 12961162.571 ops/s
# Warmup Iteration  22: 12945260.263 ops/s
# Warmup Iteration  23: 12955919.763 ops/s
# Warmup Iteration  24: 12922873.667 ops/s
# Warmup Iteration  25: 13000558.216 ops/s
# Warmup Iteration  26: 13091117.021 ops/s
# Warmup Iteration  27: 12970788.972 ops/s
# Warmup Iteration  28: 12920456.427 ops/s
# Warmup Iteration  29: 12945926.746 ops/s
# Warmup Iteration  30: 13052804.775 ops/s
Iteration   1: 13100244.801 ops/s
Iteration   2: 13096285.549 ops/s
Iteration   3: 12962049.865 ops/s
Iteration   4: 13039859.077 ops/s
Iteration   5: 12770904.425 ops/s
Iteration   6: 13049511.625 ops/s
Iteration   7: 12923565.439 ops/s
Iteration   8: 13032547.949 ops/s
Iteration   9: 13013782.760 ops/s
Iteration  10: 12988452.852 ops/s
Iteration  11: 13035243.150 ops/s
Iteration  12: 13044793.688 ops/s
Iteration  13: 12976365.102 ops/s
Iteration  14: 13052254.467 ops/s
Iteration  15: 13090262.293 ops/s
Iteration  16: 13037619.678 ops/s
Iteration  17: 12888609.139 ops/s
Iteration  18: 13006606.199 ops/s
Iteration  19: 12952791.612 ops/s
Iteration  20: 13024035.841 ops/s
Iteration  21: 12978391.030 ops/s
Iteration  22: 12991880.910 ops/s
Iteration  23: 13022656.669 ops/s
Iteration  24: 12932091.752 ops/s
Iteration  25: 12989129.948 ops/s
Iteration  26: 12947898.812 ops/s
Iteration  27: 13043332.526 ops/s
Iteration  28: 13057167.016 ops/s
Iteration  29: 13064679.270 ops/s
Iteration  30: 12963885.153 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_tap":
  13002563.287 ±(99.9%) 45549.913 ops/s [Average]
  (min, avg, max) = (12770904.425, 13002563.287, 13100244.801), stdev = 68176.971
  CI (99.9%): [12957013.373, 13048113.200] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_tap  thrpt   30  13002563.287 ± 45549.913  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11510.534 ops/s
# Warmup Iteration   2: 14085.536 ops/s
# Warmup Iteration   3: 19568.214 ops/s
# Warmup Iteration   4: 19465.288 ops/s
# Warmup Iteration   5: 19610.227 ops/s
# Warmup Iteration   6: 19646.835 ops/s
# Warmup Iteration   7: 19525.584 ops/s
# Warmup Iteration   8: 19593.803 ops/s
# Warmup Iteration   9: 19727.094 ops/s
# Warmup Iteration  10: 16600.002 ops/s
# Warmup Iteration  11: 19635.791 ops/s
# Warmup Iteration  12: 19511.931 ops/s
# Warmup Iteration  13: 19404.922 ops/s
# Warmup Iteration  14: 19501.383 ops/s
# Warmup Iteration  15: 19673.368 ops/s
# Warmup Iteration  16: 19640.027 ops/s
# Warmup Iteration  17: 19597.326 ops/s
# Warmup Iteration  18: 19435.951 ops/s
# Warmup Iteration  19: 19406.989 ops/s
# Warmup Iteration  20: 19487.314 ops/s
# Warmup Iteration  21: 19600.083 ops/s
# Warmup Iteration  22: 19632.953 ops/s
# Warmup Iteration  23: 19507.110 ops/s
# Warmup Iteration  24: 19718.570 ops/s
# Warmup Iteration  25: 19511.597 ops/s
# Warmup Iteration  26: 19660.645 ops/s
# Warmup Iteration  27: 19635.144 ops/s
# Warmup Iteration  28: 19453.741 ops/s
# Warmup Iteration  29: 19520.758 ops/s
# Warmup Iteration  30: 19490.118 ops/s
Iteration   1: 19402.498 ops/s
Iteration   2: 19596.209 ops/s
Iteration   3: 19443.525 ops/s
Iteration   4: 19702.845 ops/s
Iteration   5: 19743.597 ops/s
Iteration   6: 19743.319 ops/s
Iteration   7: 19777.896 ops/s
Iteration   8: 19516.707 ops/s
Iteration   9: 19483.513 ops/s
Iteration  10: 19655.325 ops/s
Iteration  11: 19656.698 ops/s
Iteration  12: 19594.846 ops/s
Iteration  13: 19717.287 ops/s
Iteration  14: 19632.792 ops/s
Iteration  15: 19651.790 ops/s
Iteration  16: 19707.621 ops/s
Iteration  17: 19683.139 ops/s
Iteration  18: 19684.253 ops/s
Iteration  19: 19568.709 ops/s
Iteration  20: 19610.791 ops/s
Iteration  21: 19715.487 ops/s
Iteration  22: 19660.559 ops/s
Iteration  23: 19500.593 ops/s
Iteration  24: 19807.537 ops/s
Iteration  25: 19359.259 ops/s
Iteration  26: 19742.752 ops/s
Iteration  27: 19816.424 ops/s
Iteration  28: 19192.900 ops/s
Iteration  29: 19717.598 ops/s
Iteration  30: 19735.870 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_testEquals":
  19627.411 ±(99.9%) 95.176 ops/s [Average]
  (min, avg, max) = (19192.900, 19627.411, 19816.424), stdev = 142.455
  CI (99.9%): [19532.235, 19722.588] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt      Score    Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_testEquals  thrpt   30  19627.411 ± 95.176  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5568886.445 ops/s
# Warmup Iteration   2: 9572488.342 ops/s
# Warmup Iteration   3: 11371898.862 ops/s
# Warmup Iteration   4: 11451580.178 ops/s
# Warmup Iteration   5: 11455421.853 ops/s
# Warmup Iteration   6: 11363862.857 ops/s
# Warmup Iteration   7: 11329414.036 ops/s
# Warmup Iteration   8: 11382723.798 ops/s
# Warmup Iteration   9: 11359776.160 ops/s
# Warmup Iteration  10: 11266338.314 ops/s
# Warmup Iteration  11: 11437826.447 ops/s
# Warmup Iteration  12: 11424299.341 ops/s
# Warmup Iteration  13: 11304716.927 ops/s
# Warmup Iteration  14: 11438517.243 ops/s
# Warmup Iteration  15: 11438133.939 ops/s
# Warmup Iteration  16: 11372623.615 ops/s
# Warmup Iteration  17: 11418524.461 ops/s
# Warmup Iteration  18: 11537006.550 ops/s
# Warmup Iteration  19: 11383096.209 ops/s
# Warmup Iteration  20: 11327633.003 ops/s
# Warmup Iteration  21: 11474788.010 ops/s
# Warmup Iteration  22: 11439671.788 ops/s
# Warmup Iteration  23: 11328853.468 ops/s
# Warmup Iteration  24: 11384613.326 ops/s
# Warmup Iteration  25: 11173673.992 ops/s
# Warmup Iteration  26: 11448608.645 ops/s
# Warmup Iteration  27: 11231661.977 ops/s
# Warmup Iteration  28: 11424970.729 ops/s
# Warmup Iteration  29: 11343114.325 ops/s
# Warmup Iteration  30: 11485581.387 ops/s
Iteration   1: 11405620.750 ops/s
Iteration   2: 11458424.424 ops/s
Iteration   3: 11499859.846 ops/s
Iteration   4: 11473372.461 ops/s
Iteration   5: 11452831.114 ops/s
Iteration   6: 11521918.574 ops/s
Iteration   7: 11445207.485 ops/s
Iteration   8: 11391519.846 ops/s
Iteration   9: 11540028.616 ops/s
Iteration  10: 11509812.703 ops/s
Iteration  11: 11541071.635 ops/s
Iteration  12: 11432163.609 ops/s
Iteration  13: 11452827.353 ops/s
Iteration  14: 11310912.670 ops/s
Iteration  15: 11431839.469 ops/s
Iteration  16: 11365862.982 ops/s
Iteration  17: 11426350.954 ops/s
Iteration  18: 11360988.703 ops/s
Iteration  19: 11517657.485 ops/s
Iteration  20: 11318147.262 ops/s
Iteration  21: 11431164.529 ops/s
Iteration  22: 11437826.395 ops/s
Iteration  23: 11383153.894 ops/s
Iteration  24: 11401854.837 ops/s
Iteration  25: 11554029.191 ops/s
Iteration  26: 11466802.444 ops/s
Iteration  27: 11548156.054 ops/s
Iteration  28: 11455473.368 ops/s
Iteration  29: 11324982.201 ops/s
Iteration  30: 11483924.196 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_testHashCode":
  11444792.835 ±(99.9%) 45622.207 ops/s [Average]
  (min, avg, max) = (11310912.670, 11444792.835, 11554029.191), stdev = 68285.177
  CI (99.9%): [11399170.628, 11490415.042] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_testHashCode  thrpt   30  11444792.835 ± 45622.207  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1215737.518 ops/s
# Warmup Iteration   2: 2636849.446 ops/s
# Warmup Iteration   3: 2580956.902 ops/s
# Warmup Iteration   4: 2253498.126 ops/s
# Warmup Iteration   5: 2620821.387 ops/s
# Warmup Iteration   6: 2595426.170 ops/s
# Warmup Iteration   7: 2564986.332 ops/s
# Warmup Iteration   8: 2627329.952 ops/s
# Warmup Iteration   9: 2586527.004 ops/s
# Warmup Iteration  10: 2639796.786 ops/s
# Warmup Iteration  11: 2631826.065 ops/s
# Warmup Iteration  12: 2614419.728 ops/s
# Warmup Iteration  13: 2617112.684 ops/s
# Warmup Iteration  14: 2610121.511 ops/s
# Warmup Iteration  15: 2647860.193 ops/s
# Warmup Iteration  16: 2619061.479 ops/s
# Warmup Iteration  17: 2626039.090 ops/s
# Warmup Iteration  18: 2616898.050 ops/s
# Warmup Iteration  19: 2641096.353 ops/s
# Warmup Iteration  20: 2601747.474 ops/s
# Warmup Iteration  21: 2624085.906 ops/s
# Warmup Iteration  22: 2611153.037 ops/s
# Warmup Iteration  23: 2632651.144 ops/s
# Warmup Iteration  24: 2622851.112 ops/s
# Warmup Iteration  25: 2617498.775 ops/s
# Warmup Iteration  26: 2603903.943 ops/s
# Warmup Iteration  27: 2609191.882 ops/s
# Warmup Iteration  28: 2630816.506 ops/s
# Warmup Iteration  29: 2583904.240 ops/s
# Warmup Iteration  30: 2628957.939 ops/s
Iteration   1: 2621850.608 ops/s
Iteration   2: 2614566.200 ops/s
Iteration   3: 2594577.247 ops/s
Iteration   4: 2574103.486 ops/s
Iteration   5: 2608753.235 ops/s
Iteration   6: 2596417.261 ops/s
Iteration   7: 2637126.847 ops/s
Iteration   8: 2595234.900 ops/s
Iteration   9: 2537784.057 ops/s
Iteration  10: 2609901.728 ops/s
Iteration  11: 2615911.233 ops/s
Iteration  12: 2639212.192 ops/s
Iteration  13: 2625519.137 ops/s
Iteration  14: 2651019.441 ops/s
Iteration  15: 2617526.753 ops/s
Iteration  16: 2590402.929 ops/s
Iteration  17: 2608173.146 ops/s
Iteration  18: 2605812.890 ops/s
Iteration  19: 2579481.892 ops/s
Iteration  20: 2628738.642 ops/s
Iteration  21: 2624470.528 ops/s
Iteration  22: 2655082.877 ops/s
Iteration  23: 2592622.200 ops/s
Iteration  24: 2615065.394 ops/s
Iteration  25: 2604815.189 ops/s
Iteration  26: 2659242.620 ops/s
Iteration  27: 2508092.398 ops/s
Iteration  28: 2637987.271 ops/s
Iteration  29: 2580994.310 ops/s
Iteration  30: 2650106.181 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_testToString":
  2609353.093 ±(99.9%) 21923.290 ops/s [Average]
  (min, avg, max) = (2508092.398, 2609353.093, 2659242.620), stdev = 32813.750
  CI (99.9%): [2587429.803, 2631276.383] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_testToString  thrpt   30  2609353.093 ± 21923.290  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1553960.862 ops/s
# Warmup Iteration   2: 4036658.058 ops/s
# Warmup Iteration   3: 3880907.298 ops/s
# Warmup Iteration   4: 3413838.291 ops/s
# Warmup Iteration   5: 4045074.574 ops/s
# Warmup Iteration   6: 3955564.804 ops/s
# Warmup Iteration   7: 3977162.941 ops/s
# Warmup Iteration   8: 4048890.533 ops/s
# Warmup Iteration   9: 4069981.083 ops/s
# Warmup Iteration  10: 4040258.678 ops/s
# Warmup Iteration  11: 4035529.249 ops/s
# Warmup Iteration  12: 4056278.225 ops/s
# Warmup Iteration  13: 4016691.848 ops/s
# Warmup Iteration  14: 4049167.460 ops/s
# Warmup Iteration  15: 4049874.064 ops/s
# Warmup Iteration  16: 4012855.424 ops/s
# Warmup Iteration  17: 4030571.571 ops/s
# Warmup Iteration  18: 3996150.708 ops/s
# Warmup Iteration  19: 3991864.634 ops/s
# Warmup Iteration  20: 4039887.194 ops/s
# Warmup Iteration  21: 4034547.941 ops/s
# Warmup Iteration  22: 4024255.691 ops/s
# Warmup Iteration  23: 3997582.592 ops/s
# Warmup Iteration  24: 4051202.885 ops/s
# Warmup Iteration  25: 4018787.593 ops/s
# Warmup Iteration  26: 4028364.047 ops/s
# Warmup Iteration  27: 3965817.864 ops/s
# Warmup Iteration  28: 4035120.260 ops/s
# Warmup Iteration  29: 4004074.119 ops/s
# Warmup Iteration  30: 4025785.610 ops/s
Iteration   1: 3860380.214 ops/s
Iteration   2: 3987347.275 ops/s
Iteration   3: 4058170.752 ops/s
Iteration   4: 4050599.958 ops/s
Iteration   5: 4039486.665 ops/s
Iteration   6: 4022628.599 ops/s
Iteration   7: 4068353.240 ops/s
Iteration   8: 4037517.933 ops/s
Iteration   9: 4028113.810 ops/s
Iteration  10: 4038997.147 ops/s
Iteration  11: 4015315.319 ops/s
Iteration  12: 4042823.233 ops/s
Iteration  13: 4058067.948 ops/s
Iteration  14: 4030553.579 ops/s
Iteration  15: 4033281.305 ops/s
Iteration  16: 4011663.919 ops/s
Iteration  17: 4057042.310 ops/s
Iteration  18: 4053870.480 ops/s
Iteration  19: 4041874.210 ops/s
Iteration  20: 4037153.886 ops/s
Iteration  21: 4038162.863 ops/s
Iteration  22: 4040489.101 ops/s
Iteration  23: 4058028.283 ops/s
Iteration  24: 4021694.424 ops/s
Iteration  25: 4054524.158 ops/s
Iteration  26: 4050639.728 ops/s
Iteration  27: 4043460.859 ops/s
Iteration  28: 4051362.054 ops/s
Iteration  29: 4035047.737 ops/s
Iteration  30: 4045719.221 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_toArray":
  4033745.674 ±(99.9%) 24538.846 ops/s [Average]
  (min, avg, max) = (3860380.214, 4033745.674, 4068353.240), stdev = 36728.592
  CI (99.9%): [4009206.828, 4058284.520] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_toArray  thrpt   30  4033745.674 ± 24538.846  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1801264.861 ops/s
# Warmup Iteration   2: 4037754.528 ops/s
# Warmup Iteration   3: 4414326.624 ops/s
# Warmup Iteration   4: 3627269.365 ops/s
# Warmup Iteration   5: 4381738.685 ops/s
# Warmup Iteration   6: 4432553.479 ops/s
# Warmup Iteration   7: 4406565.498 ops/s
# Warmup Iteration   8: 4398629.601 ops/s
# Warmup Iteration   9: 4425659.621 ops/s
# Warmup Iteration  10: 4392299.946 ops/s
# Warmup Iteration  11: 4426170.745 ops/s
# Warmup Iteration  12: 4409291.603 ops/s
# Warmup Iteration  13: 4403009.376 ops/s
# Warmup Iteration  14: 4376606.197 ops/s
# Warmup Iteration  15: 4437339.504 ops/s
# Warmup Iteration  16: 4391046.650 ops/s
# Warmup Iteration  17: 4425143.591 ops/s
# Warmup Iteration  18: 4320857.472 ops/s
# Warmup Iteration  19: 4419095.509 ops/s
# Warmup Iteration  20: 4400721.322 ops/s
# Warmup Iteration  21: 4446031.156 ops/s
# Warmup Iteration  22: 4435951.710 ops/s
# Warmup Iteration  23: 4430944.578 ops/s
# Warmup Iteration  24: 4399690.726 ops/s
# Warmup Iteration  25: 4414404.042 ops/s
# Warmup Iteration  26: 4399660.897 ops/s
# Warmup Iteration  27: 4398913.618 ops/s
# Warmup Iteration  28: 4424127.472 ops/s
# Warmup Iteration  29: 4379941.316 ops/s
# Warmup Iteration  30: 4422742.736 ops/s
Iteration   1: 4411988.001 ops/s
Iteration   2: 4420358.747 ops/s
Iteration   3: 4428672.239 ops/s
Iteration   4: 4434638.418 ops/s
Iteration   5: 4396957.013 ops/s
Iteration   6: 4400918.337 ops/s
Iteration   7: 4426226.510 ops/s
Iteration   8: 4440403.392 ops/s
Iteration   9: 4406661.761 ops/s
Iteration  10: 4381719.742 ops/s
Iteration  11: 4423093.891 ops/s
Iteration  12: 4409116.811 ops/s
Iteration  13: 4425448.080 ops/s
Iteration  14: 4436562.894 ops/s
Iteration  15: 4412403.118 ops/s
Iteration  16: 4427690.803 ops/s
Iteration  17: 4445134.125 ops/s
Iteration  18: 4413187.918 ops/s
Iteration  19: 4363077.841 ops/s
Iteration  20: 4431696.183 ops/s
Iteration  21: 4398536.971 ops/s
Iteration  22: 4418936.206 ops/s
Iteration  23: 4383475.663 ops/s
Iteration  24: 4367492.746 ops/s
Iteration  25: 4436201.489 ops/s
Iteration  26: 4413417.190 ops/s
Iteration  27: 4438294.928 ops/s
Iteration  28: 4404764.957 ops/s
Iteration  29: 4409365.242 ops/s
Iteration  30: 4432944.171 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_toBag":
  4414646.180 ±(99.9%) 14034.987 ops/s [Average]
  (min, avg, max) = (4363077.841, 4414646.180, 4445134.125), stdev = 21006.910
  CI (99.9%): [4400611.192, 4428681.167] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_toBag  thrpt   30  4414646.180 ± 14034.987  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5419229.818 ops/s
# Warmup Iteration   2: 13259547.983 ops/s
# Warmup Iteration   3: 10410270.281 ops/s
# Warmup Iteration   4: 12810281.521 ops/s
# Warmup Iteration   5: 12697931.134 ops/s
# Warmup Iteration   6: 12800767.676 ops/s
# Warmup Iteration   7: 12811127.710 ops/s
# Warmup Iteration   8: 12664334.736 ops/s
# Warmup Iteration   9: 12799976.242 ops/s
# Warmup Iteration  10: 12785691.296 ops/s
# Warmup Iteration  11: 12841034.220 ops/s
# Warmup Iteration  12: 12758708.470 ops/s
# Warmup Iteration  13: 12715844.485 ops/s
# Warmup Iteration  14: 12650337.005 ops/s
# Warmup Iteration  15: 12761722.211 ops/s
# Warmup Iteration  16: 12847301.892 ops/s
# Warmup Iteration  17: 12847182.248 ops/s
# Warmup Iteration  18: 12793007.466 ops/s
# Warmup Iteration  19: 12813723.688 ops/s
# Warmup Iteration  20: 12733052.858 ops/s
# Warmup Iteration  21: 12780526.096 ops/s
# Warmup Iteration  22: 12793820.650 ops/s
# Warmup Iteration  23: 12778019.483 ops/s
# Warmup Iteration  24: 12809900.244 ops/s
# Warmup Iteration  25: 12688779.299 ops/s
# Warmup Iteration  26: 12729782.088 ops/s
# Warmup Iteration  27: 12775290.242 ops/s
# Warmup Iteration  28: 12792607.044 ops/s
# Warmup Iteration  29: 12842428.686 ops/s
# Warmup Iteration  30: 12741397.300 ops/s
Iteration   1: 12634610.250 ops/s
Iteration   2: 12840003.665 ops/s
Iteration   3: 12737586.783 ops/s
Iteration   4: 12884681.650 ops/s
Iteration   5: 12835493.751 ops/s
Iteration   6: 12752135.144 ops/s
Iteration   7: 12791781.343 ops/s
Iteration   8: 12728377.373 ops/s
Iteration   9: 12719337.649 ops/s
Iteration  10: 12824729.527 ops/s
Iteration  11: 12838798.562 ops/s
Iteration  12: 12729251.738 ops/s
Iteration  13: 12714626.395 ops/s
Iteration  14: 12782050.765 ops/s
Iteration  15: 12749292.326 ops/s
Iteration  16: 12827759.684 ops/s
Iteration  17: 12561465.204 ops/s
Iteration  18: 12842295.554 ops/s
Iteration  19: 12884008.016 ops/s
Iteration  20: 12746990.319 ops/s
Iteration  21: 12755973.714 ops/s
Iteration  22: 12898820.151 ops/s
Iteration  23: 12470702.881 ops/s
Iteration  24: 12590385.056 ops/s
Iteration  25: 12850434.590 ops/s
Iteration  26: 12816997.729 ops/s
Iteration  27: 12744358.033 ops/s
Iteration  28: 12885454.694 ops/s
Iteration  29: 12613035.503 ops/s
Iteration  30: 12762750.181 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_toImmutable":
  12760472.941 ±(99.9%) 68930.229 ops/s [Average]
  (min, avg, max) = (12470702.881, 12760472.941, 12898820.151), stdev = 103171.530
  CI (99.9%): [12691542.712, 12829403.170] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_toImmutable  thrpt   30  12760472.941 ± 68930.229  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1112111.455 ops/s
# Warmup Iteration   2: 2764054.363 ops/s
# Warmup Iteration   3: 2489866.574 ops/s
# Warmup Iteration   4: 2780293.775 ops/s
# Warmup Iteration   5: 2918082.637 ops/s
# Warmup Iteration   6: 2914537.467 ops/s
# Warmup Iteration   7: 2916080.108 ops/s
# Warmup Iteration   8: 2917661.752 ops/s
# Warmup Iteration   9: 2916262.378 ops/s
# Warmup Iteration  10: 2920209.996 ops/s
# Warmup Iteration  11: 2894673.063 ops/s
# Warmup Iteration  12: 2858102.387 ops/s
# Warmup Iteration  13: 2896851.020 ops/s
# Warmup Iteration  14: 2918759.008 ops/s
# Warmup Iteration  15: 2913979.758 ops/s
# Warmup Iteration  16: 2921230.590 ops/s
# Warmup Iteration  17: 2893702.426 ops/s
# Warmup Iteration  18: 2922259.915 ops/s
# Warmup Iteration  19: 2908035.711 ops/s
# Warmup Iteration  20: 2905090.290 ops/s
# Warmup Iteration  21: 2888287.242 ops/s
# Warmup Iteration  22: 2926007.972 ops/s
# Warmup Iteration  23: 2916621.971 ops/s
# Warmup Iteration  24: 2896102.115 ops/s
# Warmup Iteration  25: 2903954.236 ops/s
# Warmup Iteration  26: 2907817.484 ops/s
# Warmup Iteration  27: 2911499.404 ops/s
# Warmup Iteration  28: 2915707.208 ops/s
# Warmup Iteration  29: 2923227.032 ops/s
# Warmup Iteration  30: 2899875.803 ops/s
Iteration   1: 2915719.876 ops/s
Iteration   2: 2900382.965 ops/s
Iteration   3: 2922271.221 ops/s
Iteration   4: 2925670.569 ops/s
Iteration   5: 2920040.479 ops/s
Iteration   6: 2910302.899 ops/s
Iteration   7: 2932063.592 ops/s
Iteration   8: 2931226.659 ops/s
Iteration   9: 2927831.804 ops/s
Iteration  10: 2886599.712 ops/s
Iteration  11: 2917748.596 ops/s
Iteration  12: 2907922.787 ops/s
Iteration  13: 2860066.619 ops/s
Iteration  14: 2923206.727 ops/s
Iteration  15: 2907696.718 ops/s
Iteration  16: 2915317.057 ops/s
Iteration  17: 2851692.813 ops/s
Iteration  18: 2873492.420 ops/s
Iteration  19: 2872041.175 ops/s
Iteration  20: 2931752.509 ops/s
Iteration  21: 2907052.577 ops/s
Iteration  22: 2873297.381 ops/s
Iteration  23: 2907753.385 ops/s
Iteration  24: 2823305.177 ops/s
Iteration  25: 2908170.280 ops/s
Iteration  26: 2909610.488 ops/s
Iteration  27: 2937575.217 ops/s
Iteration  28: 2926491.121 ops/s
Iteration  29: 2933439.118 ops/s
Iteration  30: 2880837.919 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_toList":
  2904685.995 ±(99.9%) 18528.070 ops/s [Average]
  (min, avg, max) = (2823305.177, 2904685.995, 2937575.217), stdev = 27731.945
  CI (99.9%): [2886157.925, 2923214.065] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_toList  thrpt   30  2904685.995 ± 18528.070  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2278494.204 ops/s
# Warmup Iteration   2: 5788847.703 ops/s
# Warmup Iteration   3: 5497874.672 ops/s
# Warmup Iteration   4: 4836708.515 ops/s
# Warmup Iteration   5: 5743735.148 ops/s
# Warmup Iteration   6: 5764901.606 ops/s
# Warmup Iteration   7: 5690577.372 ops/s
# Warmup Iteration   8: 5716249.091 ops/s
# Warmup Iteration   9: 5741711.712 ops/s
# Warmup Iteration  10: 5753370.073 ops/s
# Warmup Iteration  11: 5744273.999 ops/s
# Warmup Iteration  12: 5685229.442 ops/s
# Warmup Iteration  13: 5697316.987 ops/s
# Warmup Iteration  14: 5727272.554 ops/s
# Warmup Iteration  15: 5729267.324 ops/s
# Warmup Iteration  16: 5684783.952 ops/s
# Warmup Iteration  17: 5697859.466 ops/s
# Warmup Iteration  18: 5745781.624 ops/s
# Warmup Iteration  19: 5730344.294 ops/s
# Warmup Iteration  20: 5707561.937 ops/s
# Warmup Iteration  21: 5739693.388 ops/s
# Warmup Iteration  22: 5720010.903 ops/s
# Warmup Iteration  23: 5696032.061 ops/s
# Warmup Iteration  24: 5739954.133 ops/s
# Warmup Iteration  25: 5771337.712 ops/s
# Warmup Iteration  26: 5709557.423 ops/s
# Warmup Iteration  27: 5736475.284 ops/s
# Warmup Iteration  28: 5766039.436 ops/s
# Warmup Iteration  29: 5695670.532 ops/s
# Warmup Iteration  30: 5721679.109 ops/s
Iteration   1: 5727946.116 ops/s
Iteration   2: 5778294.720 ops/s
Iteration   3: 5658770.635 ops/s
Iteration   4: 5738582.777 ops/s
Iteration   5: 5710650.284 ops/s
Iteration   6: 5718645.962 ops/s
Iteration   7: 5751598.591 ops/s
Iteration   8: 5709549.333 ops/s
Iteration   9: 5734296.814 ops/s
Iteration  10: 5733020.133 ops/s
Iteration  11: 5740003.557 ops/s
Iteration  12: 5725448.565 ops/s
Iteration  13: 5733197.237 ops/s
Iteration  14: 5734527.067 ops/s
Iteration  15: 5734159.157 ops/s
Iteration  16: 5724693.093 ops/s
Iteration  17: 5738741.945 ops/s
Iteration  18: 5707167.913 ops/s
Iteration  19: 5672675.140 ops/s
Iteration  20: 5690556.114 ops/s
Iteration  21: 5770794.206 ops/s
Iteration  22: 5739222.217 ops/s
Iteration  23: 5716728.441 ops/s
Iteration  24: 5673208.519 ops/s
Iteration  25: 5679636.347 ops/s
Iteration  26: 5738812.061 ops/s
Iteration  27: 5737168.376 ops/s
Iteration  28: 5723426.440 ops/s
Iteration  29: 5652949.719 ops/s
Iteration  30: 5763503.147 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_toReversed":
  5721932.487 ±(99.9%) 20574.753 ops/s [Average]
  (min, avg, max) = (5652949.719, 5721932.487, 5778294.720), stdev = 30795.324
  CI (99.9%): [5701357.734, 5742507.241] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_toReversed  thrpt   30  5721932.487 ± 20574.753  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2720536.831 ops/s
# Warmup Iteration   2: 6225354.872 ops/s
# Warmup Iteration   3: 6564599.092 ops/s
# Warmup Iteration   4: 5453763.888 ops/s
# Warmup Iteration   5: 6646954.551 ops/s
# Warmup Iteration   6: 6665298.448 ops/s
# Warmup Iteration   7: 6601986.937 ops/s
# Warmup Iteration   8: 6613576.096 ops/s
# Warmup Iteration   9: 6635959.525 ops/s
# Warmup Iteration  10: 6589412.137 ops/s
# Warmup Iteration  11: 6619243.833 ops/s
# Warmup Iteration  12: 6633104.313 ops/s
# Warmup Iteration  13: 6637082.505 ops/s
# Warmup Iteration  14: 6649556.205 ops/s
# Warmup Iteration  15: 6594588.750 ops/s
# Warmup Iteration  16: 6635129.487 ops/s
# Warmup Iteration  17: 6658372.908 ops/s
# Warmup Iteration  18: 6576844.277 ops/s
# Warmup Iteration  19: 6630130.992 ops/s
# Warmup Iteration  20: 6624939.173 ops/s
# Warmup Iteration  21: 6616906.750 ops/s
# Warmup Iteration  22: 6583953.416 ops/s
# Warmup Iteration  23: 6644427.731 ops/s
# Warmup Iteration  24: 6529161.159 ops/s
# Warmup Iteration  25: 6679895.812 ops/s
# Warmup Iteration  26: 6566553.457 ops/s
# Warmup Iteration  27: 6604896.733 ops/s
# Warmup Iteration  28: 6621390.542 ops/s
# Warmup Iteration  29: 6639906.853 ops/s
# Warmup Iteration  30: 6614105.372 ops/s
Iteration   1: 6619110.144 ops/s
Iteration   2: 6611738.715 ops/s
Iteration   3: 6673470.065 ops/s
Iteration   4: 6478333.175 ops/s
Iteration   5: 6607884.379 ops/s
Iteration   6: 6577679.286 ops/s
Iteration   7: 6656805.222 ops/s
Iteration   8: 6539269.808 ops/s
Iteration   9: 6625818.738 ops/s
Iteration  10: 6621057.420 ops/s
Iteration  11: 6533996.120 ops/s
Iteration  12: 6540934.909 ops/s
Iteration  13: 6623648.551 ops/s
Iteration  14: 6650176.802 ops/s
Iteration  15: 6655914.204 ops/s
Iteration  16: 6630850.228 ops/s
Iteration  17: 6480240.271 ops/s
Iteration  18: 6646130.114 ops/s
Iteration  19: 6521302.417 ops/s
Iteration  20: 6544296.562 ops/s
Iteration  21: 6653896.739 ops/s
Iteration  22: 6616736.229 ops/s
Iteration  23: 6573953.494 ops/s
Iteration  24: 6638149.873 ops/s
Iteration  25: 6610450.339 ops/s
Iteration  26: 6458637.562 ops/s
Iteration  27: 6602484.770 ops/s
Iteration  28: 6577961.437 ops/s
Iteration  29: 6485478.851 ops/s
Iteration  30: 6591307.959 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_toSet":
  6588257.146 ±(99.9%) 40204.276 ops/s [Average]
  (min, avg, max) = (6458637.562, 6588257.146, 6673470.065), stdev = 60175.872
  CI (99.9%): [6548052.870, 6628461.422] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_toSet  thrpt   30  6588257.146 ± 40204.276  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 590998.570 ops/s
# Warmup Iteration   2: 1022697.846 ops/s
# Warmup Iteration   3: 2933930.296 ops/s
# Warmup Iteration   4: 2411616.935 ops/s
# Warmup Iteration   5: 2889962.106 ops/s
# Warmup Iteration   6: 2946604.249 ops/s
# Warmup Iteration   7: 2949343.580 ops/s
# Warmup Iteration   8: 2935064.842 ops/s
# Warmup Iteration   9: 2890280.312 ops/s
# Warmup Iteration  10: 2946455.466 ops/s
# Warmup Iteration  11: 2943667.550 ops/s
# Warmup Iteration  12: 2955118.485 ops/s
# Warmup Iteration  13: 2924777.466 ops/s
# Warmup Iteration  14: 2954801.346 ops/s
# Warmup Iteration  15: 2928282.607 ops/s
# Warmup Iteration  16: 2955510.182 ops/s
# Warmup Iteration  17: 2910741.260 ops/s
# Warmup Iteration  18: 2949136.228 ops/s
# Warmup Iteration  19: 2946228.499 ops/s
# Warmup Iteration  20: 2935009.696 ops/s
# Warmup Iteration  21: 2921263.129 ops/s
# Warmup Iteration  22: 2925981.108 ops/s
# Warmup Iteration  23: 2955636.513 ops/s
# Warmup Iteration  24: 2946164.362 ops/s
# Warmup Iteration  25: 2934623.892 ops/s
# Warmup Iteration  26: 2928605.537 ops/s
# Warmup Iteration  27: 2913371.802 ops/s
# Warmup Iteration  28: 2945786.158 ops/s
# Warmup Iteration  29: 2937272.166 ops/s
# Warmup Iteration  30: 2906534.594 ops/s
Iteration   1: 2955394.015 ops/s
Iteration   2: 2965233.691 ops/s
Iteration   3: 2931234.087 ops/s
Iteration   4: 2948818.120 ops/s
Iteration   5: 2917036.615 ops/s
Iteration   6: 2944089.499 ops/s
Iteration   7: 2943686.613 ops/s
Iteration   8: 2959368.141 ops/s
Iteration   9: 2937999.378 ops/s
Iteration  10: 2948213.453 ops/s
Iteration  11: 2947356.755 ops/s
Iteration  12: 2968665.172 ops/s
Iteration  13: 2936558.496 ops/s
Iteration  14: 2930061.796 ops/s
Iteration  15: 2945575.594 ops/s
Iteration  16: 2932791.889 ops/s
Iteration  17: 2957207.735 ops/s
Iteration  18: 2893642.662 ops/s
Iteration  19: 2953128.519 ops/s
Iteration  20: 2937451.115 ops/s
Iteration  21: 2935339.213 ops/s
Iteration  22: 2963749.810 ops/s
Iteration  23: 2944031.219 ops/s
Iteration  24: 2911510.243 ops/s
Iteration  25: 2948201.460 ops/s
Iteration  26: 2883182.931 ops/s
Iteration  27: 2946897.104 ops/s
Iteration  28: 2926282.309 ops/s
Iteration  29: 2925600.313 ops/s
Iteration  30: 2967649.623 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_with":
  2940198.586 ±(99.9%) 13386.151 ops/s [Average]
  (min, avg, max) = (2883182.931, 2940198.586, 2968665.172), stdev = 20035.762
  CI (99.9%): [2926812.435, 2953584.736] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_with  thrpt   30  2940198.586 ± 13386.151  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 548513.497 ops/s
# Warmup Iteration   2: 1179557.413 ops/s
# Warmup Iteration   3: 2295456.595 ops/s
# Warmup Iteration   4: 1893001.274 ops/s
# Warmup Iteration   5: 2305790.774 ops/s
# Warmup Iteration   6: 2290965.259 ops/s
# Warmup Iteration   7: 2307500.225 ops/s
# Warmup Iteration   8: 2298960.969 ops/s
# Warmup Iteration   9: 2276569.385 ops/s
# Warmup Iteration  10: 2309822.515 ops/s
# Warmup Iteration  11: 2290846.270 ops/s
# Warmup Iteration  12: 2280735.961 ops/s
# Warmup Iteration  13: 2275183.345 ops/s
# Warmup Iteration  14: 2302563.469 ops/s
# Warmup Iteration  15: 2285136.389 ops/s
# Warmup Iteration  16: 2286219.511 ops/s
# Warmup Iteration  17: 2296620.196 ops/s
# Warmup Iteration  18: 2284460.648 ops/s
# Warmup Iteration  19: 2289895.535 ops/s
# Warmup Iteration  20: 2263335.650 ops/s
# Warmup Iteration  21: 2281851.281 ops/s
# Warmup Iteration  22: 2271462.354 ops/s
# Warmup Iteration  23: 2295796.411 ops/s
# Warmup Iteration  24: 2290420.063 ops/s
# Warmup Iteration  25: 2299327.759 ops/s
# Warmup Iteration  26: 2292477.198 ops/s
# Warmup Iteration  27: 2266563.350 ops/s
# Warmup Iteration  28: 2282916.305 ops/s
# Warmup Iteration  29: 2301722.323 ops/s
# Warmup Iteration  30: 2302900.397 ops/s
Iteration   1: 2257341.006 ops/s
Iteration   2: 2304261.003 ops/s
Iteration   3: 2310061.440 ops/s
Iteration   4: 2308051.421 ops/s
Iteration   5: 2298682.155 ops/s
Iteration   6: 2288504.042 ops/s
Iteration   7: 2310184.056 ops/s
Iteration   8: 2276353.562 ops/s
Iteration   9: 2295949.061 ops/s
Iteration  10: 2304993.143 ops/s
Iteration  11: 2313093.154 ops/s
Iteration  12: 2282876.354 ops/s
Iteration  13: 2297082.378 ops/s
Iteration  14: 2306171.855 ops/s
Iteration  15: 2277270.101 ops/s
Iteration  16: 2277846.051 ops/s
Iteration  17: 2292347.435 ops/s
Iteration  18: 2312221.620 ops/s
Iteration  19: 2303421.531 ops/s
Iteration  20: 2268230.282 ops/s
Iteration  21: 2305770.518 ops/s
Iteration  22: 2294606.216 ops/s
Iteration  23: 2276621.227 ops/s
Iteration  24: 2310508.840 ops/s
Iteration  25: 2299025.157 ops/s
Iteration  26: 2302076.771 ops/s
Iteration  27: 2293736.014 ops/s
Iteration  28: 2301178.557 ops/s
Iteration  29: 2303710.373 ops/s
Iteration  30: 2292656.718 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_withAll":
  2295494.401 ±(99.9%) 9459.714 ops/s [Average]
  (min, avg, max) = (2257341.006, 2295494.401, 2313093.154), stdev = 14158.855
  CI (99.9%): [2286034.688, 2304954.115] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_withAll  thrpt   30  2295494.401 ± 9459.714  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 691043.396 ops/s
# Warmup Iteration   2: 983949.232 ops/s
# Warmup Iteration   3: 2512798.109 ops/s
# Warmup Iteration   4: 2502752.608 ops/s
# Warmup Iteration   5: 2092162.204 ops/s
# Warmup Iteration   6: 2516144.737 ops/s
# Warmup Iteration   7: 2509154.368 ops/s
# Warmup Iteration   8: 2518135.520 ops/s
# Warmup Iteration   9: 2509268.913 ops/s
# Warmup Iteration  10: 2509482.533 ops/s
# Warmup Iteration  11: 2507319.580 ops/s
# Warmup Iteration  12: 2490788.096 ops/s
# Warmup Iteration  13: 2509582.906 ops/s
# Warmup Iteration  14: 2513470.165 ops/s
# Warmup Iteration  15: 2509952.371 ops/s
# Warmup Iteration  16: 2513809.020 ops/s
# Warmup Iteration  17: 2484434.964 ops/s
# Warmup Iteration  18: 2482136.992 ops/s
# Warmup Iteration  19: 2518060.925 ops/s
# Warmup Iteration  20: 2511616.711 ops/s
# Warmup Iteration  21: 2460836.888 ops/s
# Warmup Iteration  22: 2508875.342 ops/s
# Warmup Iteration  23: 2509560.609 ops/s
# Warmup Iteration  24: 2516357.402 ops/s
# Warmup Iteration  25: 2516533.207 ops/s
# Warmup Iteration  26: 2504863.585 ops/s
# Warmup Iteration  27: 2515787.352 ops/s
# Warmup Iteration  28: 2520016.563 ops/s
# Warmup Iteration  29: 2508584.548 ops/s
# Warmup Iteration  30: 2478780.401 ops/s
Iteration   1: 2521781.685 ops/s
Iteration   2: 2513135.544 ops/s
Iteration   3: 2515338.206 ops/s
Iteration   4: 2514561.654 ops/s
Iteration   5: 2503569.677 ops/s
Iteration   6: 2502045.400 ops/s
Iteration   7: 2502126.942 ops/s
Iteration   8: 2497982.636 ops/s
Iteration   9: 2505244.211 ops/s
Iteration  10: 2500346.599 ops/s
Iteration  11: 2474031.906 ops/s
Iteration  12: 2515216.100 ops/s
Iteration  13: 2503521.629 ops/s
Iteration  14: 2519839.202 ops/s
Iteration  15: 2515588.779 ops/s
Iteration  16: 2519017.514 ops/s
Iteration  17: 2506276.635 ops/s
Iteration  18: 2512457.986 ops/s
Iteration  19: 2498396.056 ops/s
Iteration  20: 2417977.827 ops/s
Iteration  21: 2529035.859 ops/s
Iteration  22: 2463228.777 ops/s
Iteration  23: 2462236.877 ops/s
Iteration  24: 2519338.822 ops/s
Iteration  25: 2509046.629 ops/s
Iteration  26: 2513570.259 ops/s
Iteration  27: 2509433.532 ops/s
Iteration  28: 2500187.883 ops/s
Iteration  29: 2452910.096 ops/s
Iteration  30: 2502598.392 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_without":
  2500668.110 ±(99.9%) 15960.559 ops/s [Average]
  (min, avg, max) = (2417977.827, 2500668.110, 2529035.859), stdev = 23889.015
  CI (99.9%): [2484707.552, 2516628.669] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_without  thrpt   30  2500668.110 ± 15960.559  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 852146.384 ops/s
# Warmup Iteration   2: 1789198.964 ops/s
# Warmup Iteration   3: 2270098.582 ops/s
# Warmup Iteration   4: 2074161.292 ops/s
# Warmup Iteration   5: 2142677.073 ops/s
# Warmup Iteration   6: 2296123.762 ops/s
# Warmup Iteration   7: 2311985.812 ops/s
# Warmup Iteration   8: 2303643.287 ops/s
# Warmup Iteration   9: 2299844.649 ops/s
# Warmup Iteration  10: 2291502.071 ops/s
# Warmup Iteration  11: 2289203.659 ops/s
# Warmup Iteration  12: 2322764.499 ops/s
# Warmup Iteration  13: 2279738.459 ops/s
# Warmup Iteration  14: 2297852.358 ops/s
# Warmup Iteration  15: 2289885.824 ops/s
# Warmup Iteration  16: 2289454.164 ops/s
# Warmup Iteration  17: 2288667.195 ops/s
# Warmup Iteration  18: 2297984.624 ops/s
# Warmup Iteration  19: 2323624.752 ops/s
# Warmup Iteration  20: 2310132.575 ops/s
# Warmup Iteration  21: 2315057.477 ops/s
# Warmup Iteration  22: 2309062.481 ops/s
# Warmup Iteration  23: 2307298.846 ops/s
# Warmup Iteration  24: 2314421.907 ops/s
# Warmup Iteration  25: 2305220.476 ops/s
# Warmup Iteration  26: 2310215.884 ops/s
# Warmup Iteration  27: 2309784.906 ops/s
# Warmup Iteration  28: 2309411.100 ops/s
# Warmup Iteration  29: 2317753.550 ops/s
# Warmup Iteration  30: 2286810.797 ops/s
Iteration   1: 2277497.130 ops/s
Iteration   2: 2272914.755 ops/s
Iteration   3: 2303058.613 ops/s
Iteration   4: 2309448.761 ops/s
Iteration   5: 2314315.770 ops/s
Iteration   6: 2310640.107 ops/s
Iteration   7: 2322928.482 ops/s
Iteration   8: 2296160.126 ops/s
Iteration   9: 2220389.429 ops/s
Iteration  10: 2287942.094 ops/s
Iteration  11: 2311746.825 ops/s
Iteration  12: 2323838.530 ops/s
Iteration  13: 2316246.669 ops/s
Iteration  14: 2309421.679 ops/s
Iteration  15: 2321072.975 ops/s
Iteration  16: 2317830.755 ops/s
Iteration  17: 2311741.870 ops/s
Iteration  18: 2254094.853 ops/s
Iteration  19: 2302608.609 ops/s
Iteration  20: 2303300.734 ops/s
Iteration  21: 2309961.022 ops/s
Iteration  22: 2301370.241 ops/s
Iteration  23: 2305357.956 ops/s
Iteration  24: 2301529.200 ops/s
Iteration  25: 2309343.492 ops/s
Iteration  26: 2319051.938 ops/s
Iteration  27: 2301629.404 ops/s
Iteration  28: 2313837.147 ops/s
Iteration  29: 2305482.048 ops/s
Iteration  30: 2296407.441 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.SynchronizedBooleanListTest._Benchmark.benchmark_withoutAll":
  2301705.622 ±(99.9%) 14413.259 ops/s [Average]
  (min, avg, max) = (2220389.429, 2301705.622, 2323838.530), stdev = 21573.090
  CI (99.9%): [2287292.363, 2316118.881] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBooleanListTest._Benchmark.benchmark_withoutAll  thrpt   30  2301705.622 ± 14413.259  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 698444.201 ops/s
# Warmup Iteration   2: 756995.344 ops/s
# Warmup Iteration   3: 989344.614 ops/s
# Warmup Iteration   4: 981050.330 ops/s
# Warmup Iteration   5: 972053.338 ops/s
# Warmup Iteration   6: 971682.813 ops/s
# Warmup Iteration   7: 986889.365 ops/s
# Warmup Iteration   8: 983717.420 ops/s
# Warmup Iteration   9: 987373.295 ops/s
# Warmup Iteration  10: 850212.488 ops/s
# Warmup Iteration  11: 951452.774 ops/s
# Warmup Iteration  12: 982778.600 ops/s
# Warmup Iteration  13: 982412.541 ops/s
# Warmup Iteration  14: 989070.777 ops/s
# Warmup Iteration  15: 968384.357 ops/s
# Warmup Iteration  16: 980055.103 ops/s
# Warmup Iteration  17: 1047731.744 ops/s
# Warmup Iteration  18: 1046601.580 ops/s
# Warmup Iteration  19: 1038569.625 ops/s
# Warmup Iteration  20: 1043728.179 ops/s
# Warmup Iteration  21: 1045118.329 ops/s
# Warmup Iteration  22: 1045885.019 ops/s
# Warmup Iteration  23: 1046298.807 ops/s
# Warmup Iteration  24: 1045873.329 ops/s
# Warmup Iteration  25: 1039249.428 ops/s
# Warmup Iteration  26: 1047129.913 ops/s
# Warmup Iteration  27: 1047173.650 ops/s
# Warmup Iteration  28: 1042431.576 ops/s
# Warmup Iteration  29: 1047920.080 ops/s
# Warmup Iteration  30: 1036681.062 ops/s
Iteration   1: 1041402.522 ops/s
Iteration   2: 1043177.972 ops/s
Iteration   3: 1046533.133 ops/s
Iteration   4: 1043840.538 ops/s
Iteration   5: 1046508.161 ops/s
Iteration   6: 1056048.004 ops/s
Iteration   7: 1041122.402 ops/s
Iteration   8: 1047303.807 ops/s
Iteration   9: 1038895.084 ops/s
Iteration  10: 1051367.927 ops/s
Iteration  11: 1045101.744 ops/s
Iteration  12: 1038831.032 ops/s
Iteration  13: 1043682.100 ops/s
Iteration  14: 1038938.359 ops/s
Iteration  15: 1041685.450 ops/s
Iteration  16: 1042524.229 ops/s
Iteration  17: 1044532.152 ops/s
Iteration  18: 1043655.748 ops/s
Iteration  19: 1032527.652 ops/s
Iteration  20: 1049285.306 ops/s
Iteration  21: 1026966.868 ops/s
Iteration  22: 1043699.383 ops/s
Iteration  23: 1040388.164 ops/s
Iteration  24: 1032312.003 ops/s
Iteration  25: 1049234.996 ops/s
Iteration  26: 1047096.520 ops/s
Iteration  27: 1029165.090 ops/s
Iteration  28: 1047674.789 ops/s
Iteration  29: 1031308.575 ops/s
Iteration  30: 1037853.066 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_add":
  1042088.759 ±(99.9%) 4448.587 ops/s [Average]
  (min, avg, max) = (1026966.868, 1042088.759, 1056048.004), stdev = 6658.436
  CI (99.9%): [1037640.172, 1046537.346] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_add  thrpt   30  1042088.759 ± 4448.587  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 688005.777 ops/s
# Warmup Iteration   2: 768823.195 ops/s
# Warmup Iteration   3: 981133.395 ops/s
# Warmup Iteration   4: 985165.711 ops/s
# Warmup Iteration   5: 975239.952 ops/s
# Warmup Iteration   6: 984518.625 ops/s
# Warmup Iteration   7: 987227.588 ops/s
# Warmup Iteration   8: 958620.642 ops/s
# Warmup Iteration   9: 973341.882 ops/s
# Warmup Iteration  10: 798990.171 ops/s
# Warmup Iteration  11: 971337.141 ops/s
# Warmup Iteration  12: 973229.253 ops/s
# Warmup Iteration  13: 980428.229 ops/s
# Warmup Iteration  14: 974789.377 ops/s
# Warmup Iteration  15: 978410.518 ops/s
# Warmup Iteration  16: 969098.330 ops/s
# Warmup Iteration  17: 1042056.315 ops/s
# Warmup Iteration  18: 1036468.282 ops/s
# Warmup Iteration  19: 1037018.316 ops/s
# Warmup Iteration  20: 1034292.304 ops/s
# Warmup Iteration  21: 1036340.204 ops/s
# Warmup Iteration  22: 1034240.146 ops/s
# Warmup Iteration  23: 1028383.639 ops/s
# Warmup Iteration  24: 1033840.931 ops/s
# Warmup Iteration  25: 1041145.281 ops/s
# Warmup Iteration  26: 1031847.098 ops/s
# Warmup Iteration  27: 1035573.992 ops/s
# Warmup Iteration  28: 1029554.609 ops/s
# Warmup Iteration  29: 1037922.484 ops/s
# Warmup Iteration  30: 1040616.868 ops/s
Iteration   1: 1024791.782 ops/s
Iteration   2: 1039750.179 ops/s
Iteration   3: 1038856.203 ops/s
Iteration   4: 1040031.768 ops/s
Iteration   5: 1042630.428 ops/s
Iteration   6: 1032107.195 ops/s
Iteration   7: 1045743.071 ops/s
Iteration   8: 1036982.296 ops/s
Iteration   9: 1047978.138 ops/s
Iteration  10: 1019838.268 ops/s
Iteration  11: 1034390.357 ops/s
Iteration  12: 1045342.936 ops/s
Iteration  13: 1037403.274 ops/s
Iteration  14: 1042665.765 ops/s
Iteration  15: 1040448.315 ops/s
Iteration  16: 1023663.434 ops/s
Iteration  17: 1038730.805 ops/s
Iteration  18: 1026360.147 ops/s
Iteration  19: 1039758.980 ops/s
Iteration  20: 1043531.293 ops/s
Iteration  21: 1007655.905 ops/s
Iteration  22: 1036605.227 ops/s
Iteration  23: 1042683.755 ops/s
Iteration  24: 1044588.338 ops/s
Iteration  25: 1040494.243 ops/s
Iteration  26: 1035225.624 ops/s
Iteration  27: 1039041.104 ops/s
Iteration  28: 1035925.957 ops/s
Iteration  29: 1044180.681 ops/s
Iteration  30: 1040183.349 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAllArray":
  1036919.627 ±(99.9%) 5838.427 ops/s [Average]
  (min, avg, max) = (1007655.905, 1036919.627, 1047978.138), stdev = 8738.684
  CI (99.9%): [1031081.200, 1042758.055] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_addAllArray  thrpt   30  1036919.627 ± 5838.427  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 685049.758 ops/s
# Warmup Iteration   2: 786037.491 ops/s
# Warmup Iteration   3: 981138.164 ops/s
# Warmup Iteration   4: 982028.384 ops/s
# Warmup Iteration   5: 999044.788 ops/s
# Warmup Iteration   6: 986374.859 ops/s
# Warmup Iteration   7: 988227.492 ops/s
# Warmup Iteration   8: 987548.253 ops/s
# Warmup Iteration   9: 894479.826 ops/s
# Warmup Iteration  10: 916445.681 ops/s
# Warmup Iteration  11: 990289.988 ops/s
# Warmup Iteration  12: 989120.038 ops/s
# Warmup Iteration  13: 990375.475 ops/s
# Warmup Iteration  14: 986736.325 ops/s
# Warmup Iteration  15: 996490.989 ops/s
# Warmup Iteration  16: 991476.914 ops/s
# Warmup Iteration  17: 1052635.714 ops/s
# Warmup Iteration  18: 1054911.742 ops/s
# Warmup Iteration  19: 1055078.469 ops/s
# Warmup Iteration  20: 1053762.605 ops/s
# Warmup Iteration  21: 1049022.309 ops/s
# Warmup Iteration  22: 1052063.315 ops/s
# Warmup Iteration  23: 1055185.261 ops/s
# Warmup Iteration  24: 1058820.548 ops/s
# Warmup Iteration  25: 1055997.218 ops/s
# Warmup Iteration  26: 1056738.553 ops/s
# Warmup Iteration  27: 1054733.537 ops/s
# Warmup Iteration  28: 1047488.520 ops/s
# Warmup Iteration  29: 1052457.443 ops/s
# Warmup Iteration  30: 1049332.494 ops/s
Iteration   1: 1055554.725 ops/s
Iteration   2: 1065628.864 ops/s
Iteration   3: 1047664.708 ops/s
Iteration   4: 1051804.697 ops/s
Iteration   5: 1057416.982 ops/s
Iteration   6: 1037685.511 ops/s
Iteration   7: 1058307.208 ops/s
Iteration   8: 1054755.550 ops/s
Iteration   9: 1053691.904 ops/s
Iteration  10: 1057270.177 ops/s
Iteration  11: 1059966.403 ops/s
Iteration  12: 1044374.985 ops/s
Iteration  13: 1050968.402 ops/s
Iteration  14: 1056343.526 ops/s
Iteration  15: 1063176.526 ops/s
Iteration  16: 1055004.228 ops/s
Iteration  17: 1053994.670 ops/s
Iteration  18: 1059315.780 ops/s
Iteration  19: 1049554.080 ops/s
Iteration  20: 1064622.110 ops/s
Iteration  21: 1055036.545 ops/s
Iteration  22: 1058914.403 ops/s
Iteration  23: 1056272.458 ops/s
Iteration  24: 1054781.188 ops/s
Iteration  25: 1058574.114 ops/s
Iteration  26: 1062648.623 ops/s
Iteration  27: 1039998.026 ops/s
Iteration  28: 1055205.177 ops/s
Iteration  29: 1040651.601 ops/s
Iteration  30: 1053181.395 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAllIterable":
  1054412.152 ±(99.9%) 4604.362 ops/s [Average]
  (min, avg, max) = (1037685.511, 1054412.152, 1065628.864), stdev = 6891.593
  CI (99.9%): [1049807.790, 1059016.514] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_addAllIterable  thrpt   30  1054412.152 ± 4604.362  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAllIterable_throws_index_greater_than_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAllIterable_throws_index_greater_than_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 699030.620 ops/s
# Warmup Iteration   2: 792733.394 ops/s
# Warmup Iteration   3: 1007098.990 ops/s
# Warmup Iteration   4: 1003306.322 ops/s
# Warmup Iteration   5: 1001670.481 ops/s
# Warmup Iteration   6: 1006610.787 ops/s
# Warmup Iteration   7: 1006718.261 ops/s
# Warmup Iteration   8: 1009109.154 ops/s
# Warmup Iteration   9: 991364.825 ops/s
# Warmup Iteration  10: 840823.267 ops/s
# Warmup Iteration  11: 1009588.643 ops/s
# Warmup Iteration  12: 1005596.724 ops/s
# Warmup Iteration  13: 1000697.037 ops/s
# Warmup Iteration  14: 996122.746 ops/s
# Warmup Iteration  15: 995994.241 ops/s
# Warmup Iteration  16: 1002956.915 ops/s
# Warmup Iteration  17: 1043573.036 ops/s
# Warmup Iteration  18: 1045959.156 ops/s
# Warmup Iteration  19: 1057573.349 ops/s
# Warmup Iteration  20: 1049746.603 ops/s
# Warmup Iteration  21: 1050220.475 ops/s
# Warmup Iteration  22: 1042154.628 ops/s
# Warmup Iteration  23: 1057388.757 ops/s
# Warmup Iteration  24: 1057112.383 ops/s
# Warmup Iteration  25: 1051893.313 ops/s
# Warmup Iteration  26: 1052921.284 ops/s
# Warmup Iteration  27: 1054840.482 ops/s
# Warmup Iteration  28: 1055459.796 ops/s
# Warmup Iteration  29: 1046294.449 ops/s
# Warmup Iteration  30: 1057950.844 ops/s
Iteration   1: 1047096.903 ops/s
Iteration   2: 1059678.878 ops/s
Iteration   3: 1055978.350 ops/s
Iteration   4: 1054561.502 ops/s
Iteration   5: 1054936.252 ops/s
Iteration   6: 1048422.245 ops/s
Iteration   7: 1055146.596 ops/s
Iteration   8: 1061581.396 ops/s
Iteration   9: 1059683.063 ops/s
Iteration  10: 1054468.073 ops/s
Iteration  11: 1057378.220 ops/s
Iteration  12: 1047751.110 ops/s
Iteration  13: 1056351.227 ops/s
Iteration  14: 1058123.165 ops/s
Iteration  15: 1029804.306 ops/s
Iteration  16: 1049431.003 ops/s
Iteration  17: 1056202.915 ops/s
Iteration  18: 1057641.941 ops/s
Iteration  19: 1060081.719 ops/s
Iteration  20: 1051845.401 ops/s
Iteration  21: 1054216.270 ops/s
Iteration  22: 1054938.826 ops/s
Iteration  23: 1056543.020 ops/s
Iteration  24: 1054041.358 ops/s
Iteration  25: 1056433.940 ops/s
Iteration  26: 1046054.436 ops/s
Iteration  27: 1054916.192 ops/s
Iteration  28: 1056668.915 ops/s
Iteration  29: 1051734.680 ops/s
Iteration  30: 1051147.651 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAllIterable_throws_index_greater_than_size":
  1053761.985 ±(99.9%) 4005.710 ops/s [Average]
  (min, avg, max) = (1029804.306, 1053761.985, 1061581.396), stdev = 5995.558
  CI (99.9%): [1049756.276, 1057767.695] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_addAllIterable_throws_index_greater_than_size  thrpt   30  1053761.985 ± 4005.710  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAllIterable_throws_index_negative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAllIterable_throws_index_negative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 702628.999 ops/s
# Warmup Iteration   2: 790012.033 ops/s
# Warmup Iteration   3: 998950.194 ops/s
# Warmup Iteration   4: 1004036.117 ops/s
# Warmup Iteration   5: 1000228.285 ops/s
# Warmup Iteration   6: 994594.104 ops/s
# Warmup Iteration   7: 998353.459 ops/s
# Warmup Iteration   8: 1006421.874 ops/s
# Warmup Iteration   9: 1011285.225 ops/s
# Warmup Iteration  10: 841298.016 ops/s
# Warmup Iteration  11: 1006027.568 ops/s
# Warmup Iteration  12: 1004785.173 ops/s
# Warmup Iteration  13: 989696.015 ops/s
# Warmup Iteration  14: 1001016.489 ops/s
# Warmup Iteration  15: 1002644.227 ops/s
# Warmup Iteration  16: 1005494.365 ops/s
# Warmup Iteration  17: 1066099.180 ops/s
# Warmup Iteration  18: 1063769.469 ops/s
# Warmup Iteration  19: 1055520.153 ops/s
# Warmup Iteration  20: 1065260.694 ops/s
# Warmup Iteration  21: 1064878.561 ops/s
# Warmup Iteration  22: 1060810.158 ops/s
# Warmup Iteration  23: 1045524.467 ops/s
# Warmup Iteration  24: 1063157.377 ops/s
# Warmup Iteration  25: 1063347.749 ops/s
# Warmup Iteration  26: 1061312.563 ops/s
# Warmup Iteration  27: 1047025.061 ops/s
# Warmup Iteration  28: 1057461.349 ops/s
# Warmup Iteration  29: 1064200.186 ops/s
# Warmup Iteration  30: 1060155.542 ops/s
Iteration   1: 1064142.919 ops/s
Iteration   2: 1059714.901 ops/s
Iteration   3: 1067911.980 ops/s
Iteration   4: 1061877.564 ops/s
Iteration   5: 1071022.693 ops/s
Iteration   6: 1065114.846 ops/s
Iteration   7: 1057858.313 ops/s
Iteration   8: 1068040.592 ops/s
Iteration   9: 1060560.314 ops/s
Iteration  10: 1067791.867 ops/s
Iteration  11: 1067520.456 ops/s
Iteration  12: 1061575.434 ops/s
Iteration  13: 1037072.176 ops/s
Iteration  14: 1063957.120 ops/s
Iteration  15: 1069896.272 ops/s
Iteration  16: 1067325.765 ops/s
Iteration  17: 1051970.792 ops/s
Iteration  18: 1034384.090 ops/s
Iteration  19: 1048893.282 ops/s
Iteration  20: 1062576.312 ops/s
Iteration  21: 1063865.063 ops/s
Iteration  22: 1061397.903 ops/s
Iteration  23: 1068897.313 ops/s
Iteration  24: 1069168.326 ops/s
Iteration  25: 1046691.814 ops/s
Iteration  26: 1047465.446 ops/s
Iteration  27: 1065457.166 ops/s
Iteration  28: 1064944.179 ops/s
Iteration  29: 1050363.543 ops/s
Iteration  30: 1055871.448 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAllIterable_throws_index_negative":
  1060110.996 ±(99.9%) 6377.037 ops/s [Average]
  (min, avg, max) = (1034384.090, 1060110.996, 1071022.693), stdev = 9544.849
  CI (99.9%): [1053733.959, 1066488.033] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_addAllIterable_throws_index_negative  thrpt   30  1060110.996 ± 6377.037  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 735703.843 ops/s
# Warmup Iteration   2: 800139.617 ops/s
# Warmup Iteration   3: 1019029.750 ops/s
# Warmup Iteration   4: 1022908.728 ops/s
# Warmup Iteration   5: 1018434.249 ops/s
# Warmup Iteration   6: 1025474.771 ops/s
# Warmup Iteration   7: 1009680.523 ops/s
# Warmup Iteration   8: 1008446.429 ops/s
# Warmup Iteration   9: 1023662.361 ops/s
# Warmup Iteration  10: 911793.664 ops/s
# Warmup Iteration  11: 963318.275 ops/s
# Warmup Iteration  12: 1016996.234 ops/s
# Warmup Iteration  13: 1020291.060 ops/s
# Warmup Iteration  14: 1019902.763 ops/s
# Warmup Iteration  15: 1021122.071 ops/s
# Warmup Iteration  16: 1011120.530 ops/s
# Warmup Iteration  17: 1081690.653 ops/s
# Warmup Iteration  18: 1073409.128 ops/s
# Warmup Iteration  19: 1069079.531 ops/s
# Warmup Iteration  20: 1059753.391 ops/s
# Warmup Iteration  21: 1056176.876 ops/s
# Warmup Iteration  22: 1065142.793 ops/s
# Warmup Iteration  23: 1062896.051 ops/s
# Warmup Iteration  24: 1067103.411 ops/s
# Warmup Iteration  25: 1070476.110 ops/s
# Warmup Iteration  26: 1076246.370 ops/s
# Warmup Iteration  27: 1076526.457 ops/s
# Warmup Iteration  28: 1067672.286 ops/s
# Warmup Iteration  29: 1067027.344 ops/s
# Warmup Iteration  30: 1074022.222 ops/s
Iteration   1: 1069772.324 ops/s
Iteration   2: 1057745.605 ops/s
Iteration   3: 1070635.211 ops/s
Iteration   4: 1076256.340 ops/s
Iteration   5: 1065295.492 ops/s
Iteration   6: 1078759.569 ops/s
Iteration   7: 1081250.135 ops/s
Iteration   8: 1053034.301 ops/s
Iteration   9: 1070413.636 ops/s
Iteration  10: 1078312.582 ops/s
Iteration  11: 1066829.303 ops/s
Iteration  12: 1071593.793 ops/s
Iteration  13: 1068174.245 ops/s
Iteration  14: 1078675.712 ops/s
Iteration  15: 1060246.771 ops/s
Iteration  16: 1055618.543 ops/s
Iteration  17: 1074199.613 ops/s
Iteration  18: 1069128.751 ops/s
Iteration  19: 1055986.794 ops/s
Iteration  20: 1075596.001 ops/s
Iteration  21: 1074559.147 ops/s
Iteration  22: 1073860.462 ops/s
Iteration  23: 1078268.634 ops/s
Iteration  24: 1068995.162 ops/s
Iteration  25: 1067030.494 ops/s
Iteration  26: 1068493.165 ops/s
Iteration  27: 1063471.582 ops/s
Iteration  28: 1057313.892 ops/s
Iteration  29: 1074754.519 ops/s
Iteration  30: 1074419.038 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size":
  1069289.694 ±(99.9%) 5202.235 ops/s [Average]
  (min, avg, max) = (1053034.301, 1069289.694, 1081250.135), stdev = 7786.461
  CI (99.9%): [1064087.459, 1074491.929] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size  thrpt   30  1069289.694 ± 5202.235  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size_empty_list$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size_empty_list

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 694062.157 ops/s
# Warmup Iteration   2: 764911.447 ops/s
# Warmup Iteration   3: 990839.893 ops/s
# Warmup Iteration   4: 985254.327 ops/s
# Warmup Iteration   5: 994321.798 ops/s
# Warmup Iteration   6: 994374.123 ops/s
# Warmup Iteration   7: 989437.629 ops/s
# Warmup Iteration   8: 988017.422 ops/s
# Warmup Iteration   9: 999438.991 ops/s
# Warmup Iteration  10: 821355.148 ops/s
# Warmup Iteration  11: 988560.017 ops/s
# Warmup Iteration  12: 986175.633 ops/s
# Warmup Iteration  13: 997475.962 ops/s
# Warmup Iteration  14: 995157.835 ops/s
# Warmup Iteration  15: 989942.129 ops/s
# Warmup Iteration  16: 1000188.329 ops/s
# Warmup Iteration  17: 1036931.352 ops/s
# Warmup Iteration  18: 1031653.908 ops/s
# Warmup Iteration  19: 1044489.478 ops/s
# Warmup Iteration  20: 1043652.604 ops/s
# Warmup Iteration  21: 1037857.138 ops/s
# Warmup Iteration  22: 1048149.184 ops/s
# Warmup Iteration  23: 1040415.352 ops/s
# Warmup Iteration  24: 1046402.262 ops/s
# Warmup Iteration  25: 1049880.199 ops/s
# Warmup Iteration  26: 1034186.379 ops/s
# Warmup Iteration  27: 1031109.581 ops/s
# Warmup Iteration  28: 1047032.656 ops/s
# Warmup Iteration  29: 1042357.857 ops/s
# Warmup Iteration  30: 1053503.670 ops/s
Iteration   1: 1044756.038 ops/s
Iteration   2: 1032361.018 ops/s
Iteration   3: 1041575.627 ops/s
Iteration   4: 1045928.188 ops/s
Iteration   5: 1050370.237 ops/s
Iteration   6: 1007991.773 ops/s
Iteration   7: 1043377.326 ops/s
Iteration   8: 1040856.843 ops/s
Iteration   9: 1038422.583 ops/s
Iteration  10: 1048109.606 ops/s
Iteration  11: 1044069.014 ops/s
Iteration  12: 1035709.874 ops/s
Iteration  13: 1047062.062 ops/s
Iteration  14: 1040963.265 ops/s
Iteration  15: 1045106.100 ops/s
Iteration  16: 1032158.525 ops/s
Iteration  17: 1033566.114 ops/s
Iteration  18: 1038517.349 ops/s
Iteration  19: 1042892.395 ops/s
Iteration  20: 1041779.508 ops/s
Iteration  21: 1046611.505 ops/s
Iteration  22: 1045836.524 ops/s
Iteration  23: 1043753.938 ops/s
Iteration  24: 1033194.339 ops/s
Iteration  25: 1043825.861 ops/s
Iteration  26: 1046631.142 ops/s
Iteration  27: 1047635.478 ops/s
Iteration  28: 1047365.279 ops/s
Iteration  29: 1041957.957 ops/s
Iteration  30: 1044669.465 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size_empty_list":
  1041235.164 ±(99.9%) 5334.416 ops/s [Average]
  (min, avg, max) = (1007991.773, 1041235.164, 1050370.237), stdev = 7984.304
  CI (99.9%): [1035900.748, 1046569.581] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                           Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_addAll_throws_index_greater_than_size_empty_list  thrpt   30  1041235.164 ± 5334.416  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAll_throws_index_negative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAll_throws_index_negative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 732909.373 ops/s
# Warmup Iteration   2: 805260.112 ops/s
# Warmup Iteration   3: 1009700.916 ops/s
# Warmup Iteration   4: 1014118.905 ops/s
# Warmup Iteration   5: 1013372.809 ops/s
# Warmup Iteration   6: 1013060.423 ops/s
# Warmup Iteration   7: 999864.433 ops/s
# Warmup Iteration   8: 1010172.932 ops/s
# Warmup Iteration   9: 1011832.488 ops/s
# Warmup Iteration  10: 920609.631 ops/s
# Warmup Iteration  11: 949059.398 ops/s
# Warmup Iteration  12: 1004260.858 ops/s
# Warmup Iteration  13: 1006980.560 ops/s
# Warmup Iteration  14: 1009759.226 ops/s
# Warmup Iteration  15: 1006585.534 ops/s
# Warmup Iteration  16: 1011655.137 ops/s
# Warmup Iteration  17: 1068468.073 ops/s
# Warmup Iteration  18: 1065128.555 ops/s
# Warmup Iteration  19: 1080354.501 ops/s
# Warmup Iteration  20: 1073008.445 ops/s
# Warmup Iteration  21: 1079016.102 ops/s
# Warmup Iteration  22: 1081239.601 ops/s
# Warmup Iteration  23: 1077077.870 ops/s
# Warmup Iteration  24: 1067405.683 ops/s
# Warmup Iteration  25: 1082129.464 ops/s
# Warmup Iteration  26: 1078738.863 ops/s
# Warmup Iteration  27: 1074971.036 ops/s
# Warmup Iteration  28: 1074268.923 ops/s
# Warmup Iteration  29: 1075078.279 ops/s
# Warmup Iteration  30: 1085653.591 ops/s
Iteration   1: 1077626.996 ops/s
Iteration   2: 1084905.072 ops/s
Iteration   3: 1056070.934 ops/s
Iteration   4: 1085155.722 ops/s
Iteration   5: 1070928.252 ops/s
Iteration   6: 1084042.607 ops/s
Iteration   7: 1063926.976 ops/s
Iteration   8: 1074854.258 ops/s
Iteration   9: 1081964.050 ops/s
Iteration  10: 1066400.868 ops/s
Iteration  11: 1080374.657 ops/s
Iteration  12: 1066792.258 ops/s
Iteration  13: 1083904.241 ops/s
Iteration  14: 1075545.922 ops/s
Iteration  15: 1070112.887 ops/s
Iteration  16: 1064994.807 ops/s
Iteration  17: 1083830.559 ops/s
Iteration  18: 1080653.663 ops/s
Iteration  19: 1077039.603 ops/s
Iteration  20: 1073743.688 ops/s
Iteration  21: 1077560.822 ops/s
Iteration  22: 1083888.994 ops/s
Iteration  23: 1082529.221 ops/s
Iteration  24: 1085520.421 ops/s
Iteration  25: 1065240.894 ops/s
Iteration  26: 1081022.184 ops/s
Iteration  27: 1084326.548 ops/s
Iteration  28: 1075131.952 ops/s
Iteration  29: 1085397.367 ops/s
Iteration  30: 1046213.408 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAll_throws_index_negative":
  1075656.661 ±(99.9%) 6471.267 ops/s [Average]
  (min, avg, max) = (1046213.408, 1075656.661, 1085520.421), stdev = 9685.888
  CI (99.9%): [1069185.394, 1082127.927] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_addAll_throws_index_negative  thrpt   30  1075656.661 ± 6471.267  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 724402.759 ops/s
# Warmup Iteration   2: 795637.130 ops/s
# Warmup Iteration   3: 1014694.887 ops/s
# Warmup Iteration   4: 1017908.345 ops/s
# Warmup Iteration   5: 1018614.056 ops/s
# Warmup Iteration   6: 1024594.447 ops/s
# Warmup Iteration   7: 1021763.180 ops/s
# Warmup Iteration   8: 1022580.724 ops/s
# Warmup Iteration   9: 1017864.908 ops/s
# Warmup Iteration  10: 856874.820 ops/s
# Warmup Iteration  11: 997941.539 ops/s
# Warmup Iteration  12: 1011831.389 ops/s
# Warmup Iteration  13: 1023675.360 ops/s
# Warmup Iteration  14: 1018555.006 ops/s
# Warmup Iteration  15: 1015815.704 ops/s
# Warmup Iteration  16: 1020310.562 ops/s
# Warmup Iteration  17: 1057127.172 ops/s
# Warmup Iteration  18: 1054304.749 ops/s
# Warmup Iteration  19: 1058195.916 ops/s
# Warmup Iteration  20: 1061442.090 ops/s
# Warmup Iteration  21: 1062661.927 ops/s
# Warmup Iteration  22: 1050580.577 ops/s
# Warmup Iteration  23: 1068084.675 ops/s
# Warmup Iteration  24: 1069608.649 ops/s
# Warmup Iteration  25: 1066585.645 ops/s
# Warmup Iteration  26: 1049385.474 ops/s
# Warmup Iteration  27: 1062031.456 ops/s
# Warmup Iteration  28: 1060439.486 ops/s
# Warmup Iteration  29: 1060645.494 ops/s
# Warmup Iteration  30: 1057540.503 ops/s
Iteration   1: 1044871.073 ops/s
Iteration   2: 1054039.728 ops/s
Iteration   3: 1064894.869 ops/s
Iteration   4: 1064540.551 ops/s
Iteration   5: 1060760.114 ops/s
Iteration   6: 1065628.044 ops/s
Iteration   7: 1064713.142 ops/s
Iteration   8: 1060381.613 ops/s
Iteration   9: 1049520.276 ops/s
Iteration  10: 1062716.820 ops/s
Iteration  11: 1056744.019 ops/s
Iteration  12: 1062007.156 ops/s
Iteration  13: 1063684.588 ops/s
Iteration  14: 1060606.857 ops/s
Iteration  15: 1063245.431 ops/s
Iteration  16: 1063778.870 ops/s
Iteration  17: 1060116.338 ops/s
Iteration  18: 1063149.373 ops/s
Iteration  19: 1068352.394 ops/s
Iteration  20: 1067044.614 ops/s
Iteration  21: 1054109.123 ops/s
Iteration  22: 1063827.167 ops/s
Iteration  23: 1050932.884 ops/s
Iteration  24: 1057805.257 ops/s
Iteration  25: 1062744.645 ops/s
Iteration  26: 1066014.488 ops/s
Iteration  27: 1066824.541 ops/s
Iteration  28: 1054273.847 ops/s
Iteration  29: 1063073.704 ops/s
Iteration  30: 1057442.932 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAtIndex":
  1060594.815 ±(99.9%) 3780.096 ops/s [Average]
  (min, avg, max) = (1044871.073, 1060594.815, 1068352.394), stdev = 5657.870
  CI (99.9%): [1056814.719, 1064374.911] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_addAtIndex  thrpt   30  1060594.815 ± 3780.096  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAtIndex_throws_index_greater_than_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAtIndex_throws_index_greater_than_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 730673.244 ops/s
# Warmup Iteration   2: 799591.908 ops/s
# Warmup Iteration   3: 1008416.475 ops/s
# Warmup Iteration   4: 1018793.939 ops/s
# Warmup Iteration   5: 1012273.991 ops/s
# Warmup Iteration   6: 1015707.643 ops/s
# Warmup Iteration   7: 1017191.182 ops/s
# Warmup Iteration   8: 1015562.272 ops/s
# Warmup Iteration   9: 1010030.264 ops/s
# Warmup Iteration  10: 862298.656 ops/s
# Warmup Iteration  11: 994784.477 ops/s
# Warmup Iteration  12: 1014062.296 ops/s
# Warmup Iteration  13: 1011366.180 ops/s
# Warmup Iteration  14: 1005608.919 ops/s
# Warmup Iteration  15: 1017016.544 ops/s
# Warmup Iteration  16: 1021904.882 ops/s
# Warmup Iteration  17: 1070419.238 ops/s
# Warmup Iteration  18: 1071596.585 ops/s
# Warmup Iteration  19: 1067891.710 ops/s
# Warmup Iteration  20: 1058987.972 ops/s
# Warmup Iteration  21: 1064162.292 ops/s
# Warmup Iteration  22: 1070356.506 ops/s
# Warmup Iteration  23: 1070180.220 ops/s
# Warmup Iteration  24: 1070572.173 ops/s
# Warmup Iteration  25: 1073949.617 ops/s
# Warmup Iteration  26: 1071923.526 ops/s
# Warmup Iteration  27: 1066661.467 ops/s
# Warmup Iteration  28: 1069821.843 ops/s
# Warmup Iteration  29: 1064775.244 ops/s
# Warmup Iteration  30: 1070478.363 ops/s
Iteration   1: 1043585.649 ops/s
Iteration   2: 1072634.817 ops/s
Iteration   3: 1074812.169 ops/s
Iteration   4: 1074695.822 ops/s
Iteration   5: 1072757.520 ops/s
Iteration   6: 1052185.691 ops/s
Iteration   7: 1070791.061 ops/s
Iteration   8: 1056861.759 ops/s
Iteration   9: 1044566.217 ops/s
Iteration  10: 1059504.073 ops/s
Iteration  11: 1073864.268 ops/s
Iteration  12: 1060760.661 ops/s
Iteration  13: 1070350.238 ops/s
Iteration  14: 1069593.374 ops/s
Iteration  15: 1064649.144 ops/s
Iteration  16: 1076211.262 ops/s
Iteration  17: 1069339.407 ops/s
Iteration  18: 1061966.391 ops/s
Iteration  19: 1054316.034 ops/s
Iteration  20: 1064100.256 ops/s
Iteration  21: 1067242.642 ops/s
Iteration  22: 1062322.360 ops/s
Iteration  23: 1069402.213 ops/s
Iteration  24: 1069505.922 ops/s
Iteration  25: 1073235.413 ops/s
Iteration  26: 1075381.665 ops/s
Iteration  27: 1067918.172 ops/s
Iteration  28: 1073811.206 ops/s
Iteration  29: 1066679.814 ops/s
Iteration  30: 1063860.272 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAtIndex_throws_index_greater_than_size":
  1065896.850 ±(99.9%) 5802.966 ops/s [Average]
  (min, avg, max) = (1043585.649, 1065896.850, 1076211.262), stdev = 8685.608
  CI (99.9%): [1060093.883, 1071699.816] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_addAtIndex_throws_index_greater_than_size  thrpt   30  1065896.850 ± 5802.966  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAtIndex_throws_index_negative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAtIndex_throws_index_negative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 737908.492 ops/s
# Warmup Iteration   2: 796605.728 ops/s
# Warmup Iteration   3: 1018456.792 ops/s
# Warmup Iteration   4: 1014863.746 ops/s
# Warmup Iteration   5: 1024015.264 ops/s
# Warmup Iteration   6: 1009521.907 ops/s
# Warmup Iteration   7: 1011283.505 ops/s
# Warmup Iteration   8: 1013889.041 ops/s
# Warmup Iteration   9: 1015752.877 ops/s
# Warmup Iteration  10: 945796.160 ops/s
# Warmup Iteration  11: 936750.892 ops/s
# Warmup Iteration  12: 1003402.314 ops/s
# Warmup Iteration  13: 1018153.713 ops/s
# Warmup Iteration  14: 1020235.809 ops/s
# Warmup Iteration  15: 1027401.502 ops/s
# Warmup Iteration  16: 1024875.429 ops/s
# Warmup Iteration  17: 1066381.083 ops/s
# Warmup Iteration  18: 1075384.475 ops/s
# Warmup Iteration  19: 1074046.118 ops/s
# Warmup Iteration  20: 1068879.800 ops/s
# Warmup Iteration  21: 1068126.194 ops/s
# Warmup Iteration  22: 1065876.769 ops/s
# Warmup Iteration  23: 1074241.335 ops/s
# Warmup Iteration  24: 1075175.987 ops/s
# Warmup Iteration  25: 1062244.032 ops/s
# Warmup Iteration  26: 1068365.931 ops/s
# Warmup Iteration  27: 1071364.690 ops/s
# Warmup Iteration  28: 1073744.932 ops/s
# Warmup Iteration  29: 1064541.114 ops/s
# Warmup Iteration  30: 1064393.903 ops/s
Iteration   1: 1082417.089 ops/s
Iteration   2: 1066076.250 ops/s
Iteration   3: 1073878.716 ops/s
Iteration   4: 1061340.327 ops/s
Iteration   5: 1074057.407 ops/s
Iteration   6: 1063077.560 ops/s
Iteration   7: 1053346.996 ops/s
Iteration   8: 1062625.427 ops/s
Iteration   9: 1064546.896 ops/s
Iteration  10: 1075228.994 ops/s
Iteration  11: 1073330.159 ops/s
Iteration  12: 1050423.825 ops/s
Iteration  13: 1072996.048 ops/s
Iteration  14: 1072140.096 ops/s
Iteration  15: 1076995.686 ops/s
Iteration  16: 1070157.224 ops/s
Iteration  17: 1074737.058 ops/s
Iteration  18: 1066321.174 ops/s
Iteration  19: 1078990.075 ops/s
Iteration  20: 1077072.286 ops/s
Iteration  21: 1074431.671 ops/s
Iteration  22: 1071052.671 ops/s
Iteration  23: 1068785.452 ops/s
Iteration  24: 1081341.082 ops/s
Iteration  25: 1077288.262 ops/s
Iteration  26: 1072630.757 ops/s
Iteration  27: 1070539.742 ops/s
Iteration  28: 1073291.665 ops/s
Iteration  29: 1064944.350 ops/s
Iteration  30: 1071329.436 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_addAtIndex_throws_index_negative":
  1070513.146 ±(99.9%) 4928.177 ops/s [Average]
  (min, avg, max) = (1050423.825, 1070513.146, 1082417.089), stdev = 7376.263
  CI (99.9%): [1065584.969, 1075441.323] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_addAtIndex_throws_index_negative  thrpt   30  1070513.146 ± 4928.177  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3816676.678 ops/s
# Warmup Iteration   2: 6979063.315 ops/s
# Warmup Iteration   3: 8164377.834 ops/s
# Warmup Iteration   4: 8145125.870 ops/s
# Warmup Iteration   5: 8185961.465 ops/s
# Warmup Iteration   6: 8230394.673 ops/s
# Warmup Iteration   7: 8194616.314 ops/s
# Warmup Iteration   8: 8237817.985 ops/s
# Warmup Iteration   9: 8199603.738 ops/s
# Warmup Iteration  10: 8190319.037 ops/s
# Warmup Iteration  11: 8199427.769 ops/s
# Warmup Iteration  12: 8131767.814 ops/s
# Warmup Iteration  13: 8222433.673 ops/s
# Warmup Iteration  14: 8187493.023 ops/s
# Warmup Iteration  15: 8192639.820 ops/s
# Warmup Iteration  16: 8154549.699 ops/s
# Warmup Iteration  17: 8173932.912 ops/s
# Warmup Iteration  18: 8223107.845 ops/s
# Warmup Iteration  19: 8219157.632 ops/s
# Warmup Iteration  20: 8136824.500 ops/s
# Warmup Iteration  21: 8198575.417 ops/s
# Warmup Iteration  22: 8194768.654 ops/s
# Warmup Iteration  23: 8239419.202 ops/s
# Warmup Iteration  24: 8205266.391 ops/s
# Warmup Iteration  25: 8196117.023 ops/s
# Warmup Iteration  26: 8246412.649 ops/s
# Warmup Iteration  27: 8204832.440 ops/s
# Warmup Iteration  28: 8208602.661 ops/s
# Warmup Iteration  29: 8127995.391 ops/s
# Warmup Iteration  30: 8212564.641 ops/s
Iteration   1: 8186299.768 ops/s
Iteration   2: 8111686.089 ops/s
Iteration   3: 8248986.129 ops/s
Iteration   4: 8146016.199 ops/s
Iteration   5: 8209091.861 ops/s
Iteration   6: 8227894.559 ops/s
Iteration   7: 8103162.225 ops/s
Iteration   8: 8104943.742 ops/s
Iteration   9: 8260495.979 ops/s
Iteration  10: 8210116.781 ops/s
Iteration  11: 8025999.362 ops/s
Iteration  12: 8222795.477 ops/s
Iteration  13: 8222609.184 ops/s
Iteration  14: 8176134.684 ops/s
Iteration  15: 8205615.212 ops/s
Iteration  16: 8211897.064 ops/s
Iteration  17: 8214333.301 ops/s
Iteration  18: 8132399.908 ops/s
Iteration  19: 8197174.676 ops/s
Iteration  20: 8171835.678 ops/s
Iteration  21: 8205256.234 ops/s
Iteration  22: 8086446.563 ops/s
Iteration  23: 8175151.124 ops/s
Iteration  24: 8230636.644 ops/s
Iteration  25: 8225539.588 ops/s
Iteration  26: 8217742.252 ops/s
Iteration  27: 8107780.021 ops/s
Iteration  28: 8251223.375 ops/s
Iteration  29: 8221939.704 ops/s
Iteration  30: 8142843.117 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_allSatisfy":
  8181801.550 ±(99.9%) 38108.374 ops/s [Average]
  (min, avg, max) = (8025999.362, 8181801.550, 8260495.979), stdev = 57038.824
  CI (99.9%): [8143693.176, 8219909.924] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_allSatisfy  thrpt   30  8181801.550 ± 38108.374  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4330311.201 ops/s
# Warmup Iteration   2: 7271275.625 ops/s
# Warmup Iteration   3: 8748947.413 ops/s
# Warmup Iteration   4: 8677662.319 ops/s
# Warmup Iteration   5: 8723089.615 ops/s
# Warmup Iteration   6: 8759388.605 ops/s
# Warmup Iteration   7: 8619664.507 ops/s
# Warmup Iteration   8: 8772387.430 ops/s
# Warmup Iteration   9: 8786380.076 ops/s
# Warmup Iteration  10: 8778390.248 ops/s
# Warmup Iteration  11: 8759779.908 ops/s
# Warmup Iteration  12: 8695522.260 ops/s
# Warmup Iteration  13: 8679280.712 ops/s
# Warmup Iteration  14: 8747701.967 ops/s
# Warmup Iteration  15: 8759784.998 ops/s
# Warmup Iteration  16: 8696637.927 ops/s
# Warmup Iteration  17: 8777750.355 ops/s
# Warmup Iteration  18: 8802837.032 ops/s
# Warmup Iteration  19: 8743515.500 ops/s
# Warmup Iteration  20: 8650386.930 ops/s
# Warmup Iteration  21: 8764501.033 ops/s
# Warmup Iteration  22: 8778845.358 ops/s
# Warmup Iteration  23: 8700073.314 ops/s
# Warmup Iteration  24: 8787835.213 ops/s
# Warmup Iteration  25: 8712961.666 ops/s
# Warmup Iteration  26: 8693506.157 ops/s
# Warmup Iteration  27: 8654611.290 ops/s
# Warmup Iteration  28: 8694986.609 ops/s
# Warmup Iteration  29: 8656866.053 ops/s
# Warmup Iteration  30: 8736777.184 ops/s
Iteration   1: 8629525.244 ops/s
Iteration   2: 8764252.566 ops/s
Iteration   3: 8664345.188 ops/s
Iteration   4: 8710497.337 ops/s
Iteration   5: 8742077.974 ops/s
Iteration   6: 8790545.247 ops/s
Iteration   7: 8799693.203 ops/s
Iteration   8: 8756531.408 ops/s
Iteration   9: 8743828.366 ops/s
Iteration  10: 8754740.164 ops/s
Iteration  11: 8449856.565 ops/s
Iteration  12: 8780236.726 ops/s
Iteration  13: 8612160.258 ops/s
Iteration  14: 8570373.625 ops/s
Iteration  15: 8803653.546 ops/s
Iteration  16: 8777827.822 ops/s
Iteration  17: 8755731.269 ops/s
Iteration  18: 8583920.829 ops/s
Iteration  19: 8787053.740 ops/s
Iteration  20: 8462130.793 ops/s
Iteration  21: 8800616.148 ops/s
Iteration  22: 8722508.173 ops/s
Iteration  23: 8745835.905 ops/s
Iteration  24: 8756224.210 ops/s
Iteration  25: 8607192.766 ops/s
Iteration  26: 8655207.878 ops/s
Iteration  27: 8788734.486 ops/s
Iteration  28: 8652477.109 ops/s
Iteration  29: 8794625.201 ops/s
Iteration  30: 8673988.364 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_anySatisfy":
  8704546.404 ±(99.9%) 65086.747 ops/s [Average]
  (min, avg, max) = (8449856.565, 8704546.404, 8803653.546), stdev = 97418.786
  CI (99.9%): [8639459.657, 8769633.150] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_anySatisfy  thrpt   30  8704546.404 ± 65086.747  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 450702.581 ops/s
# Warmup Iteration   2: 1019956.882 ops/s
# Warmup Iteration   3: 1017667.374 ops/s
# Warmup Iteration   4: 836587.741 ops/s
# Warmup Iteration   5: 1013251.616 ops/s
# Warmup Iteration   6: 1006222.926 ops/s
# Warmup Iteration   7: 1003988.028 ops/s
# Warmup Iteration   8: 1005190.480 ops/s
# Warmup Iteration   9: 1007918.015 ops/s
# Warmup Iteration  10: 1012869.113 ops/s
# Warmup Iteration  11: 1001956.620 ops/s
# Warmup Iteration  12: 1006913.536 ops/s
# Warmup Iteration  13: 988103.247 ops/s
# Warmup Iteration  14: 1004783.078 ops/s
# Warmup Iteration  15: 1009212.626 ops/s
# Warmup Iteration  16: 1000249.463 ops/s
# Warmup Iteration  17: 1012420.745 ops/s
# Warmup Iteration  18: 1010769.163 ops/s
# Warmup Iteration  19: 1016683.680 ops/s
# Warmup Iteration  20: 1001775.314 ops/s
# Warmup Iteration  21: 1002696.237 ops/s
# Warmup Iteration  22: 1005968.594 ops/s
# Warmup Iteration  23: 1009532.668 ops/s
# Warmup Iteration  24: 1010584.551 ops/s
# Warmup Iteration  25: 1006296.105 ops/s
# Warmup Iteration  26: 982520.986 ops/s
# Warmup Iteration  27: 990700.470 ops/s
# Warmup Iteration  28: 1010827.742 ops/s
# Warmup Iteration  29: 1005904.107 ops/s
# Warmup Iteration  30: 1007910.812 ops/s
Iteration   1: 1011675.117 ops/s
Iteration   2: 1014807.464 ops/s
Iteration   3: 986555.746 ops/s
Iteration   4: 1008701.235 ops/s
Iteration   5: 1010387.962 ops/s
Iteration   6: 1005960.098 ops/s
Iteration   7: 1011000.110 ops/s
Iteration   8: 1005828.294 ops/s
Iteration   9: 1004350.783 ops/s
Iteration  10: 1010726.599 ops/s
Iteration  11: 1016679.493 ops/s
Iteration  12: 1008359.240 ops/s
Iteration  13: 1004358.346 ops/s
Iteration  14: 1008430.955 ops/s
Iteration  15: 981291.404 ops/s
Iteration  16: 995923.959 ops/s
Iteration  17: 993554.007 ops/s
Iteration  18: 982905.554 ops/s
Iteration  19: 1006737.969 ops/s
Iteration  20: 1013785.391 ops/s
Iteration  21: 1016773.944 ops/s
Iteration  22: 1013708.540 ops/s
Iteration  23: 1002091.380 ops/s
Iteration  24: 1004194.765 ops/s
Iteration  25: 1000424.593 ops/s
Iteration  26: 1013875.191 ops/s
Iteration  27: 1004739.126 ops/s
Iteration  28: 997685.074 ops/s
Iteration  29: 985292.812 ops/s
Iteration  30: 1009394.156 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_appendString":
  1004339.977 ±(99.9%) 6646.114 ops/s [Average]
  (min, avg, max) = (981291.404, 1004339.977, 1016773.944), stdev = 9947.591
  CI (99.9%): [997693.863, 1010986.091] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_appendString  thrpt   30  1004339.977 ± 6646.114  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3652522.671 ops/s
# Warmup Iteration   2: 7485776.977 ops/s
# Warmup Iteration   3: 7802659.849 ops/s
# Warmup Iteration   4: 7743844.187 ops/s
# Warmup Iteration   5: 6416389.884 ops/s
# Warmup Iteration   6: 7807066.470 ops/s
# Warmup Iteration   7: 7729832.250 ops/s
# Warmup Iteration   8: 7801029.478 ops/s
# Warmup Iteration   9: 7777050.649 ops/s
# Warmup Iteration  10: 7776751.708 ops/s
# Warmup Iteration  11: 7748762.418 ops/s
# Warmup Iteration  12: 7729368.683 ops/s
# Warmup Iteration  13: 7797260.216 ops/s
# Warmup Iteration  14: 7761849.138 ops/s
# Warmup Iteration  15: 7742516.366 ops/s
# Warmup Iteration  16: 7766861.816 ops/s
# Warmup Iteration  17: 7796171.440 ops/s
# Warmup Iteration  18: 7687134.205 ops/s
# Warmup Iteration  19: 7824388.857 ops/s
# Warmup Iteration  20: 7804015.007 ops/s
# Warmup Iteration  21: 7837112.184 ops/s
# Warmup Iteration  22: 7732224.210 ops/s
# Warmup Iteration  23: 7771689.789 ops/s
# Warmup Iteration  24: 7819242.470 ops/s
# Warmup Iteration  25: 7743204.364 ops/s
# Warmup Iteration  26: 7807904.635 ops/s
# Warmup Iteration  27: 7754311.881 ops/s
# Warmup Iteration  28: 7805896.743 ops/s
# Warmup Iteration  29: 7755252.751 ops/s
# Warmup Iteration  30: 7784353.580 ops/s
Iteration   1: 7707812.961 ops/s
Iteration   2: 7821310.303 ops/s
Iteration   3: 7629830.946 ops/s
Iteration   4: 7774454.731 ops/s
Iteration   5: 7774304.756 ops/s
Iteration   6: 7822851.904 ops/s
Iteration   7: 7783021.919 ops/s
Iteration   8: 7815493.858 ops/s
Iteration   9: 7766500.447 ops/s
Iteration  10: 7810693.583 ops/s
Iteration  11: 7772870.708 ops/s
Iteration  12: 7804756.907 ops/s
Iteration  13: 7795685.236 ops/s
Iteration  14: 7812510.131 ops/s
Iteration  15: 7831609.655 ops/s
Iteration  16: 7750576.176 ops/s
Iteration  17: 7808785.941 ops/s
Iteration  18: 7806199.921 ops/s
Iteration  19: 7827661.189 ops/s
Iteration  20: 7681949.292 ops/s
Iteration  21: 7783906.523 ops/s
Iteration  22: 7804726.269 ops/s
Iteration  23: 7784445.804 ops/s
Iteration  24: 7784844.550 ops/s
Iteration  25: 7797990.494 ops/s
Iteration  26: 7824911.645 ops/s
Iteration  27: 7790720.995 ops/s
Iteration  28: 7757953.663 ops/s
Iteration  29: 7823729.892 ops/s
Iteration  30: 7509621.956 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_asLazy":
  7775391.078 ±(99.9%) 44843.867 ops/s [Average]
  (min, avg, max) = (7509621.956, 7775391.078, 7831609.655), stdev = 67120.193
  CI (99.9%): [7730547.212, 7820234.945] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_asLazy  thrpt   30  7775391.078 ± 44843.867  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1641313.553 ops/s
# Warmup Iteration   2: 3361051.391 ops/s
# Warmup Iteration   3: 6398230.695 ops/s
# Warmup Iteration   4: 5341901.034 ops/s
# Warmup Iteration   5: 6408711.817 ops/s
# Warmup Iteration   6: 6390740.395 ops/s
# Warmup Iteration   7: 6301132.986 ops/s
# Warmup Iteration   8: 6415351.202 ops/s
# Warmup Iteration   9: 6380648.393 ops/s
# Warmup Iteration  10: 6393189.555 ops/s
# Warmup Iteration  11: 6258417.447 ops/s
# Warmup Iteration  12: 6394776.673 ops/s
# Warmup Iteration  13: 6420921.468 ops/s
# Warmup Iteration  14: 6404469.083 ops/s
# Warmup Iteration  15: 6365697.907 ops/s
# Warmup Iteration  16: 6424750.758 ops/s
# Warmup Iteration  17: 6419361.336 ops/s
# Warmup Iteration  18: 6442138.972 ops/s
# Warmup Iteration  19: 6378222.955 ops/s
# Warmup Iteration  20: 6361694.405 ops/s
# Warmup Iteration  21: 6412875.324 ops/s
# Warmup Iteration  22: 6403848.829 ops/s
# Warmup Iteration  23: 6337804.289 ops/s
# Warmup Iteration  24: 6429776.183 ops/s
# Warmup Iteration  25: 6422647.852 ops/s
# Warmup Iteration  26: 6428076.161 ops/s
# Warmup Iteration  27: 6407210.017 ops/s
# Warmup Iteration  28: 6409589.108 ops/s
# Warmup Iteration  29: 6407641.501 ops/s
# Warmup Iteration  30: 6402165.817 ops/s
Iteration   1: 6341086.265 ops/s
Iteration   2: 6341296.513 ops/s
Iteration   3: 6393995.313 ops/s
Iteration   4: 6443202.713 ops/s
Iteration   5: 6266312.257 ops/s
Iteration   6: 6387524.731 ops/s
Iteration   7: 6322063.437 ops/s
Iteration   8: 6406366.907 ops/s
Iteration   9: 6419669.837 ops/s
Iteration  10: 6414205.520 ops/s
Iteration  11: 6414828.342 ops/s
Iteration  12: 6398085.823 ops/s
Iteration  13: 6382641.686 ops/s
Iteration  14: 6430282.527 ops/s
Iteration  15: 6331771.871 ops/s
Iteration  16: 6414287.955 ops/s
Iteration  17: 6375856.950 ops/s
Iteration  18: 6396440.370 ops/s
Iteration  19: 6401580.034 ops/s
Iteration  20: 6459144.559 ops/s
Iteration  21: 6386522.470 ops/s
Iteration  22: 6400720.413 ops/s
Iteration  23: 6352106.067 ops/s
Iteration  24: 6395717.158 ops/s
Iteration  25: 6390589.212 ops/s
Iteration  26: 6383004.692 ops/s
Iteration  27: 6420544.159 ops/s
Iteration  28: 6307158.193 ops/s
Iteration  29: 6430577.681 ops/s
Iteration  30: 6445811.900 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_asSynchronized":
  6388446.519 ±(99.9%) 29067.009 ops/s [Average]
  (min, avg, max) = (6266312.257, 6388446.519, 6459144.559), stdev = 43506.135
  CI (99.9%): [6359379.509, 6417513.528] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_asSynchronized  thrpt   30  6388446.519 ± 29067.009  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3099889.563 ops/s
# Warmup Iteration   2: 6617651.428 ops/s
# Warmup Iteration   3: 5384365.369 ops/s
# Warmup Iteration   4: 6623275.964 ops/s
# Warmup Iteration   5: 6611854.250 ops/s
# Warmup Iteration   6: 6597125.268 ops/s
# Warmup Iteration   7: 6629115.403 ops/s
# Warmup Iteration   8: 6529181.232 ops/s
# Warmup Iteration   9: 6611700.678 ops/s
# Warmup Iteration  10: 6577312.613 ops/s
# Warmup Iteration  11: 6599921.258 ops/s
# Warmup Iteration  12: 6638136.280 ops/s
# Warmup Iteration  13: 6610837.809 ops/s
# Warmup Iteration  14: 6615156.375 ops/s
# Warmup Iteration  15: 6626709.693 ops/s
# Warmup Iteration  16: 6570035.553 ops/s
# Warmup Iteration  17: 6547168.392 ops/s
# Warmup Iteration  18: 6579354.774 ops/s
# Warmup Iteration  19: 6599447.930 ops/s
# Warmup Iteration  20: 6552883.593 ops/s
# Warmup Iteration  21: 6616534.873 ops/s
# Warmup Iteration  22: 6589701.825 ops/s
# Warmup Iteration  23: 6567774.753 ops/s
# Warmup Iteration  24: 6623665.249 ops/s
# Warmup Iteration  25: 6583756.899 ops/s
# Warmup Iteration  26: 6567159.067 ops/s
# Warmup Iteration  27: 6615261.509 ops/s
# Warmup Iteration  28: 6635211.977 ops/s
# Warmup Iteration  29: 6640255.359 ops/s
# Warmup Iteration  30: 6623276.490 ops/s
Iteration   1: 6621946.608 ops/s
Iteration   2: 6488050.324 ops/s
Iteration   3: 6600218.090 ops/s
Iteration   4: 6637472.543 ops/s
Iteration   5: 6613517.299 ops/s
Iteration   6: 6617416.623 ops/s
Iteration   7: 6596963.375 ops/s
Iteration   8: 6620466.433 ops/s
Iteration   9: 6439527.493 ops/s
Iteration  10: 6614249.574 ops/s
Iteration  11: 6644064.988 ops/s
Iteration  12: 6603406.343 ops/s
Iteration  13: 6636667.653 ops/s
Iteration  14: 6612640.843 ops/s
Iteration  15: 6566723.857 ops/s
Iteration  16: 6642583.134 ops/s
Iteration  17: 6606851.602 ops/s
Iteration  18: 6424459.512 ops/s
Iteration  19: 6528925.048 ops/s
Iteration  20: 6612473.348 ops/s
Iteration  21: 6514827.932 ops/s
Iteration  22: 6648482.730 ops/s
Iteration  23: 6651530.900 ops/s
Iteration  24: 6573840.076 ops/s
Iteration  25: 6607275.226 ops/s
Iteration  26: 6594038.989 ops/s
Iteration  27: 6581039.830 ops/s
Iteration  28: 6516624.752 ops/s
Iteration  29: 6578193.961 ops/s
Iteration  30: 6540144.812 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_asUnmodifiable":
  6584487.463 ±(99.9%) 39412.441 ops/s [Average]
  (min, avg, max) = (6424459.512, 6584487.463, 6651530.900), stdev = 58990.691
  CI (99.9%): [6545075.022, 6623899.904] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  6584487.463 ± 39412.441  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10667922.152 ops/s
# Warmup Iteration   2: 19630231.470 ops/s
# Warmup Iteration   3: 18067357.669 ops/s
# Warmup Iteration   4: 20432981.354 ops/s
# Warmup Iteration   5: 20645191.835 ops/s
# Warmup Iteration   6: 20570678.640 ops/s
# Warmup Iteration   7: 20464041.706 ops/s
# Warmup Iteration   8: 20516344.621 ops/s
# Warmup Iteration   9: 20589745.972 ops/s
# Warmup Iteration  10: 20562534.424 ops/s
# Warmup Iteration  11: 20596384.999 ops/s
# Warmup Iteration  12: 20406693.181 ops/s
# Warmup Iteration  13: 20670197.299 ops/s
# Warmup Iteration  14: 20399902.757 ops/s
# Warmup Iteration  15: 20544207.833 ops/s
# Warmup Iteration  16: 20614620.634 ops/s
# Warmup Iteration  17: 20542487.415 ops/s
# Warmup Iteration  18: 20548726.426 ops/s
# Warmup Iteration  19: 20602656.256 ops/s
# Warmup Iteration  20: 20582442.291 ops/s
# Warmup Iteration  21: 20465334.299 ops/s
# Warmup Iteration  22: 20523662.490 ops/s
# Warmup Iteration  23: 20628202.865 ops/s
# Warmup Iteration  24: 20369823.436 ops/s
# Warmup Iteration  25: 20238310.270 ops/s
# Warmup Iteration  26: 20470698.780 ops/s
# Warmup Iteration  27: 20464554.411 ops/s
# Warmup Iteration  28: 20545970.367 ops/s
# Warmup Iteration  29: 20380685.737 ops/s
# Warmup Iteration  30: 20463526.971 ops/s
Iteration   1: 20551489.641 ops/s
Iteration   2: 20471100.630 ops/s
Iteration   3: 20547316.859 ops/s
Iteration   4: 20500773.497 ops/s
Iteration   5: 20707978.975 ops/s
Iteration   6: 20659120.516 ops/s
Iteration   7: 20520265.605 ops/s
Iteration   8: 20471494.274 ops/s
Iteration   9: 20438385.833 ops/s
Iteration  10: 20640454.779 ops/s
Iteration  11: 20597853.201 ops/s
Iteration  12: 20405746.925 ops/s
Iteration  13: 20718104.959 ops/s
Iteration  14: 20604656.293 ops/s
Iteration  15: 20522604.956 ops/s
Iteration  16: 20333140.052 ops/s
Iteration  17: 20412721.410 ops/s
Iteration  18: 20532800.194 ops/s
Iteration  19: 20420852.588 ops/s
Iteration  20: 20488408.177 ops/s
Iteration  21: 20624265.617 ops/s
Iteration  22: 20472900.312 ops/s
Iteration  23: 20481286.829 ops/s
Iteration  24: 20190045.058 ops/s
Iteration  25: 20648265.728 ops/s
Iteration  26: 20643512.538 ops/s
Iteration  27: 20165368.010 ops/s
Iteration  28: 20459971.619 ops/s
Iteration  29: 20554700.162 ops/s
Iteration  30: 20475996.543 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_booleanIterator":
  20508719.393 ±(99.9%) 86803.260 ops/s [Average]
  (min, avg, max) = (20165368.010, 20508719.393, 20718104.959), stdev = 129923.043
  CI (99.9%): [20421916.133, 20595522.652] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_booleanIterator  thrpt   30  20508719.393 ± 86803.260  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 664052.939 ops/s
# Warmup Iteration   2: 754891.517 ops/s
# Warmup Iteration   3: 947479.058 ops/s
# Warmup Iteration   4: 956491.826 ops/s
# Warmup Iteration   5: 959653.841 ops/s
# Warmup Iteration   6: 960966.398 ops/s
# Warmup Iteration   7: 941182.169 ops/s
# Warmup Iteration   8: 953092.754 ops/s
# Warmup Iteration   9: 930433.943 ops/s
# Warmup Iteration  10: 827477.178 ops/s
# Warmup Iteration  11: 959168.699 ops/s
# Warmup Iteration  12: 966628.024 ops/s
# Warmup Iteration  13: 952509.877 ops/s
# Warmup Iteration  14: 957325.395 ops/s
# Warmup Iteration  15: 958646.658 ops/s
# Warmup Iteration  16: 957477.308 ops/s
# Warmup Iteration  17: 1020311.292 ops/s
# Warmup Iteration  18: 1023503.312 ops/s
# Warmup Iteration  19: 1019167.761 ops/s
# Warmup Iteration  20: 1020788.975 ops/s
# Warmup Iteration  21: 1020023.948 ops/s
# Warmup Iteration  22: 1019970.671 ops/s
# Warmup Iteration  23: 1016758.053 ops/s
# Warmup Iteration  24: 1022239.291 ops/s
# Warmup Iteration  25: 1016135.367 ops/s
# Warmup Iteration  26: 1022375.085 ops/s
# Warmup Iteration  27: 1021889.765 ops/s
# Warmup Iteration  28: 1014449.722 ops/s
# Warmup Iteration  29: 1017920.919 ops/s
# Warmup Iteration  30: 1017516.645 ops/s
Iteration   1: 1009603.837 ops/s
Iteration   2: 1014832.151 ops/s
Iteration   3: 1015276.612 ops/s
Iteration   4: 1022145.996 ops/s
Iteration   5: 1019773.628 ops/s
Iteration   6: 1021023.999 ops/s
Iteration   7: 1021225.963 ops/s
Iteration   8: 1019981.058 ops/s
Iteration   9: 1021196.544 ops/s
Iteration  10: 1014081.417 ops/s
Iteration  11: 1015981.292 ops/s
Iteration  12: 1021512.705 ops/s
Iteration  13: 1019082.390 ops/s
Iteration  14: 998176.121 ops/s
Iteration  15: 1020191.767 ops/s
Iteration  16: 1025338.219 ops/s
Iteration  17: 1018644.661 ops/s
Iteration  18: 1017334.970 ops/s
Iteration  19: 1022009.310 ops/s
Iteration  20: 1021603.872 ops/s
Iteration  21: 1017465.146 ops/s
Iteration  22: 1020268.326 ops/s
Iteration  23: 1012511.606 ops/s
Iteration  24: 1018195.621 ops/s
Iteration  25: 1005886.917 ops/s
Iteration  26: 1019773.818 ops/s
Iteration  27: 1019664.379 ops/s
Iteration  28: 1020485.850 ops/s
Iteration  29: 1014378.910 ops/s
Iteration  30: 1014585.238 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_booleanIterator_with_remove":
  1017407.744 ±(99.9%) 3649.175 ops/s [Average]
  (min, avg, max) = (998176.121, 1017407.744, 1025338.219), stdev = 5461.913
  CI (99.9%): [1013758.570, 1021056.919] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  1017407.744 ± 3649.175  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 130957.470 ops/s
# Warmup Iteration   2: 217763.274 ops/s
# Warmup Iteration   3: 257210.690 ops/s
# Warmup Iteration   4: 257954.907 ops/s
# Warmup Iteration   5: 256634.957 ops/s
# Warmup Iteration   6: 220435.147 ops/s
# Warmup Iteration   7: 246393.279 ops/s
# Warmup Iteration   8: 255436.966 ops/s
# Warmup Iteration   9: 257399.936 ops/s
# Warmup Iteration  10: 255316.066 ops/s
# Warmup Iteration  11: 256639.548 ops/s
# Warmup Iteration  12: 257937.553 ops/s
# Warmup Iteration  13: 257432.874 ops/s
# Warmup Iteration  14: 257477.447 ops/s
# Warmup Iteration  15: 255620.493 ops/s
# Warmup Iteration  16: 257246.559 ops/s
# Warmup Iteration  17: 265491.669 ops/s
# Warmup Iteration  18: 266282.760 ops/s
# Warmup Iteration  19: 268078.869 ops/s
# Warmup Iteration  20: 264881.084 ops/s
# Warmup Iteration  21: 267628.003 ops/s
# Warmup Iteration  22: 267104.133 ops/s
# Warmup Iteration  23: 265872.457 ops/s
# Warmup Iteration  24: 267095.495 ops/s
# Warmup Iteration  25: 266593.679 ops/s
# Warmup Iteration  26: 265792.134 ops/s
# Warmup Iteration  27: 267081.836 ops/s
# Warmup Iteration  28: 265884.244 ops/s
# Warmup Iteration  29: 265715.068 ops/s
# Warmup Iteration  30: 267744.953 ops/s
Iteration   1: 266114.704 ops/s
Iteration   2: 263072.165 ops/s
Iteration   3: 266985.575 ops/s
Iteration   4: 265671.343 ops/s
Iteration   5: 269404.093 ops/s
Iteration   6: 266564.836 ops/s
Iteration   7: 265973.104 ops/s
Iteration   8: 265321.433 ops/s
Iteration   9: 268869.536 ops/s
Iteration  10: 265277.507 ops/s
Iteration  11: 266977.765 ops/s
Iteration  12: 266427.233 ops/s
Iteration  13: 267630.868 ops/s
Iteration  14: 267751.462 ops/s
Iteration  15: 263035.352 ops/s
Iteration  16: 265451.104 ops/s
Iteration  17: 262896.101 ops/s
Iteration  18: 266688.575 ops/s
Iteration  19: 263421.450 ops/s
Iteration  20: 263247.941 ops/s
Iteration  21: 264586.136 ops/s
Iteration  22: 266290.483 ops/s
Iteration  23: 266632.061 ops/s
Iteration  24: 266594.011 ops/s
Iteration  25: 265581.284 ops/s
Iteration  26: 265581.745 ops/s
Iteration  27: 267966.546 ops/s
Iteration  28: 268113.129 ops/s
Iteration  29: 265633.553 ops/s
Iteration  30: 265336.877 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_chunk":
  265969.932 ±(99.9%) 1131.256 ops/s [Average]
  (min, avg, max) = (262896.101, 265969.932, 269404.093), stdev = 1693.211
  CI (99.9%): [264838.676, 267101.189] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_chunk  thrpt   30  265969.932 ± 1131.256  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 676276.666 ops/s
# Warmup Iteration   2: 762770.559 ops/s
# Warmup Iteration   3: 979176.826 ops/s
# Warmup Iteration   4: 977341.830 ops/s
# Warmup Iteration   5: 985135.722 ops/s
# Warmup Iteration   6: 979537.412 ops/s
# Warmup Iteration   7: 977886.111 ops/s
# Warmup Iteration   8: 987200.464 ops/s
# Warmup Iteration   9: 983509.935 ops/s
# Warmup Iteration  10: 821417.476 ops/s
# Warmup Iteration  11: 987846.454 ops/s
# Warmup Iteration  12: 988169.343 ops/s
# Warmup Iteration  13: 986444.735 ops/s
# Warmup Iteration  14: 982468.634 ops/s
# Warmup Iteration  15: 986572.225 ops/s
# Warmup Iteration  16: 985570.298 ops/s
# Warmup Iteration  17: 1041052.253 ops/s
# Warmup Iteration  18: 1031811.477 ops/s
# Warmup Iteration  19: 1037113.582 ops/s
# Warmup Iteration  20: 1021962.114 ops/s
# Warmup Iteration  21: 1038857.545 ops/s
# Warmup Iteration  22: 1022159.653 ops/s
# Warmup Iteration  23: 1030220.600 ops/s
# Warmup Iteration  24: 1038851.341 ops/s
# Warmup Iteration  25: 1040628.667 ops/s
# Warmup Iteration  26: 1041642.031 ops/s
# Warmup Iteration  27: 1030497.826 ops/s
# Warmup Iteration  28: 1027770.478 ops/s
# Warmup Iteration  29: 1020934.970 ops/s
# Warmup Iteration  30: 1043495.951 ops/s
Iteration   1: 1034518.750 ops/s
Iteration   2: 1040405.248 ops/s
Iteration   3: 1039887.561 ops/s
Iteration   4: 1040644.986 ops/s
Iteration   5: 1040281.468 ops/s
Iteration   6: 1033735.649 ops/s
Iteration   7: 1042640.928 ops/s
Iteration   8: 1043271.972 ops/s
Iteration   9: 1036980.197 ops/s
Iteration  10: 1012586.525 ops/s
Iteration  11: 1041001.723 ops/s
Iteration  12: 1046951.955 ops/s
Iteration  13: 1041960.369 ops/s
Iteration  14: 1038325.154 ops/s
Iteration  15: 1039394.360 ops/s
Iteration  16: 1044383.466 ops/s
Iteration  17: 1036221.824 ops/s
Iteration  18: 1045451.410 ops/s
Iteration  19: 1043579.634 ops/s
Iteration  20: 1034716.525 ops/s
Iteration  21: 1048862.631 ops/s
Iteration  22: 1042319.580 ops/s
Iteration  23: 1020466.010 ops/s
Iteration  24: 1038921.924 ops/s
Iteration  25: 1040944.206 ops/s
Iteration  26: 1042307.089 ops/s
Iteration  27: 1041514.843 ops/s
Iteration  28: 1026955.823 ops/s
Iteration  29: 1039560.477 ops/s
Iteration  30: 1033678.046 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_clear":
  1038415.678 ±(99.9%) 4991.571 ops/s [Average]
  (min, avg, max) = (1012586.525, 1038415.678, 1048862.631), stdev = 7471.149
  CI (99.9%): [1033424.107, 1043407.248] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_clear  thrpt   30  1038415.678 ± 4991.571  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1234457.135 ops/s
# Warmup Iteration   2: 3402325.842 ops/s
# Warmup Iteration   3: 2616124.751 ops/s
# Warmup Iteration   4: 3206267.374 ops/s
# Warmup Iteration   5: 3208873.371 ops/s
# Warmup Iteration   6: 3203732.904 ops/s
# Warmup Iteration   7: 3211260.002 ops/s
# Warmup Iteration   8: 3202104.861 ops/s
# Warmup Iteration   9: 3191170.147 ops/s
# Warmup Iteration  10: 3208184.368 ops/s
# Warmup Iteration  11: 3194263.111 ops/s
# Warmup Iteration  12: 3211784.213 ops/s
# Warmup Iteration  13: 3174971.040 ops/s
# Warmup Iteration  14: 3205320.730 ops/s
# Warmup Iteration  15: 3153533.630 ops/s
# Warmup Iteration  16: 3198430.024 ops/s
# Warmup Iteration  17: 3196186.391 ops/s
# Warmup Iteration  18: 3203244.223 ops/s
# Warmup Iteration  19: 3185140.682 ops/s
# Warmup Iteration  20: 3203313.240 ops/s
# Warmup Iteration  21: 3213084.397 ops/s
# Warmup Iteration  22: 3226679.919 ops/s
# Warmup Iteration  23: 3214934.386 ops/s
# Warmup Iteration  24: 3222795.464 ops/s
# Warmup Iteration  25: 3205073.517 ops/s
# Warmup Iteration  26: 3216088.507 ops/s
# Warmup Iteration  27: 3184139.655 ops/s
# Warmup Iteration  28: 3203147.955 ops/s
# Warmup Iteration  29: 3216886.279 ops/s
# Warmup Iteration  30: 3214253.208 ops/s
Iteration   1: 3207069.226 ops/s
Iteration   2: 3223554.731 ops/s
Iteration   3: 3215124.726 ops/s
Iteration   4: 3147958.047 ops/s
Iteration   5: 3139601.156 ops/s
Iteration   6: 3219032.166 ops/s
Iteration   7: 3175545.269 ops/s
Iteration   8: 3230083.311 ops/s
Iteration   9: 3188709.071 ops/s
Iteration  10: 3164135.790 ops/s
Iteration  11: 3214269.046 ops/s
Iteration  12: 3211662.588 ops/s
Iteration  13: 3208164.277 ops/s
Iteration  14: 3198875.861 ops/s
Iteration  15: 3207878.510 ops/s
Iteration  16: 3211243.881 ops/s
Iteration  17: 3229733.854 ops/s
Iteration  18: 3197221.290 ops/s
Iteration  19: 3163894.494 ops/s
Iteration  20: 3201072.923 ops/s
Iteration  21: 3211736.693 ops/s
Iteration  22: 3242790.398 ops/s
Iteration  23: 3240226.028 ops/s
Iteration  24: 3226819.078 ops/s
Iteration  25: 3164114.820 ops/s
Iteration  26: 3168356.496 ops/s
Iteration  27: 3209315.950 ops/s
Iteration  28: 3218145.379 ops/s
Iteration  29: 3201464.455 ops/s
Iteration  30: 3156246.640 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_collect":
  3199801.538 ±(99.9%) 18480.394 ops/s [Average]
  (min, avg, max) = (3139601.156, 3199801.538, 3242790.398), stdev = 27660.586
  CI (99.9%): [3181321.144, 3218281.933] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_collect  thrpt   30  3199801.538 ± 18480.394  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2197243.871 ops/s
# Warmup Iteration   2: 5644758.139 ops/s
# Warmup Iteration   3: 4861658.477 ops/s
# Warmup Iteration   4: 5907904.296 ops/s
# Warmup Iteration   5: 5884442.845 ops/s
# Warmup Iteration   6: 5700721.319 ops/s
# Warmup Iteration   7: 5865149.331 ops/s
# Warmup Iteration   8: 5826887.776 ops/s
# Warmup Iteration   9: 5893977.645 ops/s
# Warmup Iteration  10: 5923381.181 ops/s
# Warmup Iteration  11: 5861221.717 ops/s
# Warmup Iteration  12: 5862258.266 ops/s
# Warmup Iteration  13: 5890903.268 ops/s
# Warmup Iteration  14: 5845720.454 ops/s
# Warmup Iteration  15: 5893183.069 ops/s
# Warmup Iteration  16: 5888712.441 ops/s
# Warmup Iteration  17: 5863043.290 ops/s
# Warmup Iteration  18: 5833825.945 ops/s
# Warmup Iteration  19: 5851814.015 ops/s
# Warmup Iteration  20: 5889220.408 ops/s
# Warmup Iteration  21: 5851399.305 ops/s
# Warmup Iteration  22: 5877975.971 ops/s
# Warmup Iteration  23: 5921998.300 ops/s
# Warmup Iteration  24: 5899459.329 ops/s
# Warmup Iteration  25: 5899051.247 ops/s
# Warmup Iteration  26: 5898848.227 ops/s
# Warmup Iteration  27: 5884019.549 ops/s
# Warmup Iteration  28: 5847322.351 ops/s
# Warmup Iteration  29: 5895609.983 ops/s
# Warmup Iteration  30: 5899628.075 ops/s
Iteration   1: 5861598.567 ops/s
Iteration   2: 5893091.250 ops/s
Iteration   3: 5882545.886 ops/s
Iteration   4: 5864875.734 ops/s
Iteration   5: 5897542.247 ops/s
Iteration   6: 5913296.302 ops/s
Iteration   7: 5883913.968 ops/s
Iteration   8: 5868997.967 ops/s
Iteration   9: 5856712.345 ops/s
Iteration  10: 5826028.724 ops/s
Iteration  11: 5873829.531 ops/s
Iteration  12: 5878327.514 ops/s
Iteration  13: 5885752.594 ops/s
Iteration  14: 5912725.578 ops/s
Iteration  15: 5844361.758 ops/s
Iteration  16: 5709527.466 ops/s
Iteration  17: 5930110.202 ops/s
Iteration  18: 5817063.945 ops/s
Iteration  19: 5900873.559 ops/s
Iteration  20: 5878200.446 ops/s
Iteration  21: 5904659.649 ops/s
Iteration  22: 5878975.283 ops/s
Iteration  23: 5892718.724 ops/s
Iteration  24: 5916896.243 ops/s
Iteration  25: 5911086.041 ops/s
Iteration  26: 5748938.284 ops/s
Iteration  27: 5898717.761 ops/s
Iteration  28: 5921968.812 ops/s
Iteration  29: 5872866.659 ops/s
Iteration  30: 5884518.834 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_collectWithIndex":
  5873690.729 ±(99.9%) 31728.895 ops/s [Average]
  (min, avg, max) = (5709527.466, 5873690.729, 5930110.202), stdev = 47490.320
  CI (99.9%): [5841961.834, 5905419.624] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_collectWithIndex  thrpt   30  5873690.729 ± 31728.895  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6020014.461 ops/s
# Warmup Iteration   2: 10039732.473 ops/s
# Warmup Iteration   3: 11172358.024 ops/s
# Warmup Iteration   4: 11496455.463 ops/s
# Warmup Iteration   5: 11627722.634 ops/s
# Warmup Iteration   6: 11601370.723 ops/s
# Warmup Iteration   7: 11539371.110 ops/s
# Warmup Iteration   8: 11595413.168 ops/s
# Warmup Iteration   9: 11484991.823 ops/s
# Warmup Iteration  10: 11668575.256 ops/s
# Warmup Iteration  11: 11573663.626 ops/s
# Warmup Iteration  12: 11604771.293 ops/s
# Warmup Iteration  13: 11621258.538 ops/s
# Warmup Iteration  14: 11508100.944 ops/s
# Warmup Iteration  15: 11450258.264 ops/s
# Warmup Iteration  16: 11496722.240 ops/s
# Warmup Iteration  17: 11662177.006 ops/s
# Warmup Iteration  18: 11546637.558 ops/s
# Warmup Iteration  19: 11616462.376 ops/s
# Warmup Iteration  20: 11535403.210 ops/s
# Warmup Iteration  21: 11597760.300 ops/s
# Warmup Iteration  22: 11474873.179 ops/s
# Warmup Iteration  23: 11576796.193 ops/s
# Warmup Iteration  24: 11599958.443 ops/s
# Warmup Iteration  25: 11602147.902 ops/s
# Warmup Iteration  26: 11613601.096 ops/s
# Warmup Iteration  27: 11575935.888 ops/s
# Warmup Iteration  28: 11574332.351 ops/s
# Warmup Iteration  29: 11617036.867 ops/s
# Warmup Iteration  30: 11568962.960 ops/s
Iteration   1: 11665961.465 ops/s
Iteration   2: 11491818.531 ops/s
Iteration   3: 11279091.234 ops/s
Iteration   4: 11525803.114 ops/s
Iteration   5: 11543114.847 ops/s
Iteration   6: 11654886.861 ops/s
Iteration   7: 11572739.656 ops/s
Iteration   8: 11676952.705 ops/s
Iteration   9: 11598077.537 ops/s
Iteration  10: 11697957.515 ops/s
Iteration  11: 11656582.410 ops/s
Iteration  12: 11650698.345 ops/s
Iteration  13: 11596451.011 ops/s
Iteration  14: 11657189.048 ops/s
Iteration  15: 11655663.002 ops/s
Iteration  16: 11574950.411 ops/s
Iteration  17: 11643019.424 ops/s
Iteration  18: 11286476.848 ops/s
Iteration  19: 11643788.120 ops/s
Iteration  20: 11582891.692 ops/s
Iteration  21: 11704653.564 ops/s
Iteration  22: 11680239.236 ops/s
Iteration  23: 11545972.752 ops/s
Iteration  24: 11493520.805 ops/s
Iteration  25: 11581428.435 ops/s
Iteration  26: 11520225.063 ops/s
Iteration  27: 11497668.078 ops/s
Iteration  28: 11489104.896 ops/s
Iteration  29: 11447602.246 ops/s
Iteration  30: 11448228.675 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_contains":
  11568758.584 ±(99.9%) 72373.631 ops/s [Average]
  (min, avg, max) = (11279091.234, 11568758.584, 11704653.564), stdev = 108325.452
  CI (99.9%): [11496384.953, 11641132.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_contains  thrpt   30  11568758.584 ± 72373.631  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3833448.108 ops/s
# Warmup Iteration   2: 6571197.940 ops/s
# Warmup Iteration   3: 7588929.459 ops/s
# Warmup Iteration   4: 7789146.450 ops/s
# Warmup Iteration   5: 7732885.840 ops/s
# Warmup Iteration   6: 7756022.757 ops/s
# Warmup Iteration   7: 7761483.764 ops/s
# Warmup Iteration   8: 7754843.275 ops/s
# Warmup Iteration   9: 7789579.238 ops/s
# Warmup Iteration  10: 7735627.202 ops/s
# Warmup Iteration  11: 7728601.091 ops/s
# Warmup Iteration  12: 7718411.571 ops/s
# Warmup Iteration  13: 7786184.704 ops/s
# Warmup Iteration  14: 7737660.921 ops/s
# Warmup Iteration  15: 7733909.253 ops/s
# Warmup Iteration  16: 7679129.074 ops/s
# Warmup Iteration  17: 7782830.847 ops/s
# Warmup Iteration  18: 7752589.200 ops/s
# Warmup Iteration  19: 7669832.183 ops/s
# Warmup Iteration  20: 7772073.879 ops/s
# Warmup Iteration  21: 7701669.537 ops/s
# Warmup Iteration  22: 7684021.479 ops/s
# Warmup Iteration  23: 7778669.566 ops/s
# Warmup Iteration  24: 7727792.800 ops/s
# Warmup Iteration  25: 7824884.455 ops/s
# Warmup Iteration  26: 7747689.355 ops/s
# Warmup Iteration  27: 7797340.272 ops/s
# Warmup Iteration  28: 7738502.361 ops/s
# Warmup Iteration  29: 7759715.404 ops/s
# Warmup Iteration  30: 7691411.437 ops/s
Iteration   1: 7715054.501 ops/s
Iteration   2: 7664231.495 ops/s
Iteration   3: 7748300.651 ops/s
Iteration   4: 7737726.976 ops/s
Iteration   5: 7727735.138 ops/s
Iteration   6: 7776814.131 ops/s
Iteration   7: 7720712.603 ops/s
Iteration   8: 7748043.689 ops/s
Iteration   9: 7812589.658 ops/s
Iteration  10: 7825259.551 ops/s
Iteration  11: 7657758.131 ops/s
Iteration  12: 7832449.825 ops/s
Iteration  13: 7822860.267 ops/s
Iteration  14: 7820090.980 ops/s
Iteration  15: 7650577.405 ops/s
Iteration  16: 7684005.120 ops/s
Iteration  17: 7648834.562 ops/s
Iteration  18: 7773451.600 ops/s
Iteration  19: 7780732.218 ops/s
Iteration  20: 7758994.461 ops/s
Iteration  21: 7603221.343 ops/s
Iteration  22: 7780259.509 ops/s
Iteration  23: 7804181.447 ops/s
Iteration  24: 7807211.207 ops/s
Iteration  25: 7786996.925 ops/s
Iteration  26: 7751975.358 ops/s
Iteration  27: 7646704.929 ops/s
Iteration  28: 7812899.514 ops/s
Iteration  29: 7782220.469 ops/s
Iteration  30: 7747778.284 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_containsAllArray":
  7747655.732 ±(99.9%) 42529.676 ops/s [Average]
  (min, avg, max) = (7603221.343, 7747655.732, 7832449.825), stdev = 63656.421
  CI (99.9%): [7705126.056, 7790185.407] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_containsAllArray  thrpt   30  7747655.732 ± 42529.676  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 933571.712 ops/s
# Warmup Iteration   2: 2124035.025 ops/s
# Warmup Iteration   3: 1705143.507 ops/s
# Warmup Iteration   4: 2094505.252 ops/s
# Warmup Iteration   5: 2073319.931 ops/s
# Warmup Iteration   6: 2081882.455 ops/s
# Warmup Iteration   7: 2086250.864 ops/s
# Warmup Iteration   8: 2097527.709 ops/s
# Warmup Iteration   9: 2092675.503 ops/s
# Warmup Iteration  10: 2092632.326 ops/s
# Warmup Iteration  11: 2084804.723 ops/s
# Warmup Iteration  12: 2081951.177 ops/s
# Warmup Iteration  13: 2093413.175 ops/s
# Warmup Iteration  14: 2068280.878 ops/s
# Warmup Iteration  15: 2088315.439 ops/s
# Warmup Iteration  16: 2073661.143 ops/s
# Warmup Iteration  17: 2092817.347 ops/s
# Warmup Iteration  18: 2086383.405 ops/s
# Warmup Iteration  19: 2086115.041 ops/s
# Warmup Iteration  20: 2076906.511 ops/s
# Warmup Iteration  21: 2063750.542 ops/s
# Warmup Iteration  22: 2056192.716 ops/s
# Warmup Iteration  23: 2092945.438 ops/s
# Warmup Iteration  24: 2098890.723 ops/s
# Warmup Iteration  25: 2079393.573 ops/s
# Warmup Iteration  26: 2092134.263 ops/s
# Warmup Iteration  27: 2098542.023 ops/s
# Warmup Iteration  28: 2095008.546 ops/s
# Warmup Iteration  29: 2090080.817 ops/s
# Warmup Iteration  30: 2091012.491 ops/s
Iteration   1: 2102194.807 ops/s
Iteration   2: 2093864.414 ops/s
Iteration   3: 2061299.214 ops/s
Iteration   4: 2091678.753 ops/s
Iteration   5: 2069400.200 ops/s
Iteration   6: 2057510.788 ops/s
Iteration   7: 2098763.712 ops/s
Iteration   8: 2090516.396 ops/s
Iteration   9: 2100955.907 ops/s
Iteration  10: 2084246.218 ops/s
Iteration  11: 2092618.405 ops/s
Iteration  12: 2069303.945 ops/s
Iteration  13: 2077205.344 ops/s
Iteration  14: 2095849.968 ops/s
Iteration  15: 2066733.077 ops/s
Iteration  16: 2086580.914 ops/s
Iteration  17: 2100946.619 ops/s
Iteration  18: 2094645.332 ops/s
Iteration  19: 2096374.625 ops/s
Iteration  20: 2088472.002 ops/s
Iteration  21: 2091619.502 ops/s
Iteration  22: 2090916.494 ops/s
Iteration  23: 2098489.840 ops/s
Iteration  24: 2084023.726 ops/s
Iteration  25: 2090415.398 ops/s
Iteration  26: 2088502.480 ops/s
Iteration  27: 2098895.983 ops/s
Iteration  28: 2060180.180 ops/s
Iteration  29: 2082851.905 ops/s
Iteration  30: 2091239.238 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_containsAllIterable":
  2086543.180 ±(99.9%) 8637.494 ops/s [Average]
  (min, avg, max) = (2057510.788, 2086543.180, 2102194.807), stdev = 12928.195
  CI (99.9%): [2077905.686, 2095180.673] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_containsAllIterable  thrpt   30  2086543.180 ± 8637.494  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6052969.163 ops/s
# Warmup Iteration   2: 9958076.989 ops/s
# Warmup Iteration   3: 11754562.692 ops/s
# Warmup Iteration   4: 11683026.368 ops/s
# Warmup Iteration   5: 11752072.312 ops/s
# Warmup Iteration   6: 11749191.449 ops/s
# Warmup Iteration   7: 11795406.383 ops/s
# Warmup Iteration   8: 11668105.676 ops/s
# Warmup Iteration   9: 11780481.324 ops/s
# Warmup Iteration  10: 11688611.810 ops/s
# Warmup Iteration  11: 11710561.902 ops/s
# Warmup Iteration  12: 11648656.804 ops/s
# Warmup Iteration  13: 11735463.649 ops/s
# Warmup Iteration  14: 11779104.716 ops/s
# Warmup Iteration  15: 11565602.356 ops/s
# Warmup Iteration  16: 11530105.539 ops/s
# Warmup Iteration  17: 11703786.199 ops/s
# Warmup Iteration  18: 11694206.115 ops/s
# Warmup Iteration  19: 11771348.491 ops/s
# Warmup Iteration  20: 11750750.749 ops/s
# Warmup Iteration  21: 11722377.292 ops/s
# Warmup Iteration  22: 11766907.446 ops/s
# Warmup Iteration  23: 11657933.750 ops/s
# Warmup Iteration  24: 11797971.136 ops/s
# Warmup Iteration  25: 11671131.477 ops/s
# Warmup Iteration  26: 11806743.384 ops/s
# Warmup Iteration  27: 11738580.862 ops/s
# Warmup Iteration  28: 11801767.986 ops/s
# Warmup Iteration  29: 11666488.134 ops/s
# Warmup Iteration  30: 11611636.692 ops/s
Iteration   1: 11739521.322 ops/s
Iteration   2: 11600632.401 ops/s
Iteration   3: 11797189.247 ops/s
Iteration   4: 11803527.238 ops/s
Iteration   5: 11734343.914 ops/s
Iteration   6: 11701717.584 ops/s
Iteration   7: 11795529.490 ops/s
Iteration   8: 11705307.308 ops/s
Iteration   9: 11864567.807 ops/s
Iteration  10: 11725531.801 ops/s
Iteration  11: 11787652.515 ops/s
Iteration  12: 11725416.273 ops/s
Iteration  13: 11653797.947 ops/s
Iteration  14: 11837182.126 ops/s
Iteration  15: 11723272.188 ops/s
Iteration  16: 11781718.743 ops/s
Iteration  17: 11773608.901 ops/s
Iteration  18: 11782982.045 ops/s
Iteration  19: 11802919.888 ops/s
Iteration  20: 11790952.924 ops/s
Iteration  21: 11871689.333 ops/s
Iteration  22: 11776412.539 ops/s
Iteration  23: 11724046.438 ops/s
Iteration  24: 11596140.085 ops/s
Iteration  25: 11780710.086 ops/s
Iteration  26: 11752986.184 ops/s
Iteration  27: 11578491.677 ops/s
Iteration  28: 11743585.921 ops/s
Iteration  29: 11798163.944 ops/s
Iteration  30: 11799174.343 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_containsAnyArray":
  11751625.740 ±(99.9%) 47974.009 ops/s [Average]
  (min, avg, max) = (11578491.677, 11751625.740, 11871689.333), stdev = 71805.244
  CI (99.9%): [11703651.731, 11799599.750] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_containsAnyArray  thrpt   30  11751625.740 ± 47974.009  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 740849.987 ops/s
# Warmup Iteration   2: 1067935.720 ops/s
# Warmup Iteration   3: 1253434.205 ops/s
# Warmup Iteration   4: 1259933.890 ops/s
# Warmup Iteration   5: 1254000.289 ops/s
# Warmup Iteration   6: 1262905.693 ops/s
# Warmup Iteration   7: 1051800.409 ops/s
# Warmup Iteration   8: 1264885.344 ops/s
# Warmup Iteration   9: 1256212.233 ops/s
# Warmup Iteration  10: 1263885.786 ops/s
# Warmup Iteration  11: 1264594.553 ops/s
# Warmup Iteration  12: 1259810.923 ops/s
# Warmup Iteration  13: 1263040.296 ops/s
# Warmup Iteration  14: 1264151.698 ops/s
# Warmup Iteration  15: 1248519.964 ops/s
# Warmup Iteration  16: 1264364.927 ops/s
# Warmup Iteration  17: 1268230.323 ops/s
# Warmup Iteration  18: 1253026.689 ops/s
# Warmup Iteration  19: 1261324.439 ops/s
# Warmup Iteration  20: 1264189.449 ops/s
# Warmup Iteration  21: 1259220.675 ops/s
# Warmup Iteration  22: 1265820.852 ops/s
# Warmup Iteration  23: 1272448.628 ops/s
# Warmup Iteration  24: 1258759.555 ops/s
# Warmup Iteration  25: 1266506.004 ops/s
# Warmup Iteration  26: 1257994.346 ops/s
# Warmup Iteration  27: 1267017.247 ops/s
# Warmup Iteration  28: 1255166.687 ops/s
# Warmup Iteration  29: 1242648.160 ops/s
# Warmup Iteration  30: 1268929.636 ops/s
Iteration   1: 1251871.342 ops/s
Iteration   2: 1265778.735 ops/s
Iteration   3: 1267292.919 ops/s
Iteration   4: 1270791.121 ops/s
Iteration   5: 1257970.772 ops/s
Iteration   6: 1267162.690 ops/s
Iteration   7: 1269320.816 ops/s
Iteration   8: 1270668.057 ops/s
Iteration   9: 1262604.927 ops/s
Iteration  10: 1241484.283 ops/s
Iteration  11: 1269252.222 ops/s
Iteration  12: 1265857.202 ops/s
Iteration  13: 1256662.180 ops/s
Iteration  14: 1268286.534 ops/s
Iteration  15: 1263506.504 ops/s
Iteration  16: 1264200.349 ops/s
Iteration  17: 1267299.749 ops/s
Iteration  18: 1261026.863 ops/s
Iteration  19: 1270436.486 ops/s
Iteration  20: 1251711.230 ops/s
Iteration  21: 1266901.038 ops/s
Iteration  22: 1254514.422 ops/s
Iteration  23: 1245268.847 ops/s
Iteration  24: 1248959.988 ops/s
Iteration  25: 1261255.935 ops/s
Iteration  26: 1270045.243 ops/s
Iteration  27: 1237689.145 ops/s
Iteration  28: 1269742.091 ops/s
Iteration  29: 1265874.921 ops/s
Iteration  30: 1266267.289 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_containsAnyIterable":
  1261656.797 ±(99.9%) 6127.961 ops/s [Average]
  (min, avg, max) = (1237689.145, 1261656.797, 1270791.121), stdev = 9172.044
  CI (99.9%): [1255528.836, 1267784.758] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1261656.797 ± 6127.961  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6011804.416 ops/s
# Warmup Iteration   2: 10113676.875 ops/s
# Warmup Iteration   3: 11737483.098 ops/s
# Warmup Iteration   4: 11916188.334 ops/s
# Warmup Iteration   5: 11828957.593 ops/s
# Warmup Iteration   6: 11867714.063 ops/s
# Warmup Iteration   7: 11858092.442 ops/s
# Warmup Iteration   8: 11785192.838 ops/s
# Warmup Iteration   9: 11855011.672 ops/s
# Warmup Iteration  10: 11866282.577 ops/s
# Warmup Iteration  11: 11917286.499 ops/s
# Warmup Iteration  12: 11813315.982 ops/s
# Warmup Iteration  13: 11786528.632 ops/s
# Warmup Iteration  14: 11679428.645 ops/s
# Warmup Iteration  15: 11906121.013 ops/s
# Warmup Iteration  16: 11801117.871 ops/s
# Warmup Iteration  17: 11781488.245 ops/s
# Warmup Iteration  18: 11907722.961 ops/s
# Warmup Iteration  19: 11754444.141 ops/s
# Warmup Iteration  20: 11746384.288 ops/s
# Warmup Iteration  21: 11939798.362 ops/s
# Warmup Iteration  22: 11815339.263 ops/s
# Warmup Iteration  23: 11768575.976 ops/s
# Warmup Iteration  24: 11833286.840 ops/s
# Warmup Iteration  25: 11897146.832 ops/s
# Warmup Iteration  26: 11831409.694 ops/s
# Warmup Iteration  27: 11724948.729 ops/s
# Warmup Iteration  28: 11777564.427 ops/s
# Warmup Iteration  29: 11878467.253 ops/s
# Warmup Iteration  30: 11762562.566 ops/s
Iteration   1: 11857198.739 ops/s
Iteration   2: 11896700.304 ops/s
Iteration   3: 11982366.151 ops/s
Iteration   4: 11808118.921 ops/s
Iteration   5: 11914755.787 ops/s
Iteration   6: 11878872.135 ops/s
Iteration   7: 11917186.105 ops/s
Iteration   8: 11885950.949 ops/s
Iteration   9: 11825725.969 ops/s
Iteration  10: 11863425.087 ops/s
Iteration  11: 11920783.795 ops/s
Iteration  12: 11765565.736 ops/s
Iteration  13: 11893143.910 ops/s
Iteration  14: 11781038.973 ops/s
Iteration  15: 11853762.804 ops/s
Iteration  16: 11685373.455 ops/s
Iteration  17: 11713444.432 ops/s
Iteration  18: 11897174.832 ops/s
Iteration  19: 11905293.767 ops/s
Iteration  20: 11678740.417 ops/s
Iteration  21: 11894081.872 ops/s
Iteration  22: 11702023.713 ops/s
Iteration  23: 11623358.287 ops/s
Iteration  24: 11790447.993 ops/s
Iteration  25: 11619544.408 ops/s
Iteration  26: 11690514.186 ops/s
Iteration  27: 11916722.221 ops/s
Iteration  28: 11932614.837 ops/s
Iteration  29: 11830893.413 ops/s
Iteration  30: 11788292.042 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_containsNoneArray":
  11823770.508 ±(99.9%) 66157.498 ops/s [Average]
  (min, avg, max) = (11619544.408, 11823770.508, 11982366.151), stdev = 99021.436
  CI (99.9%): [11757613.010, 11889928.006] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_containsNoneArray  thrpt   30  11823770.508 ± 66157.498  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 690494.809 ops/s
# Warmup Iteration   2: 969211.968 ops/s
# Warmup Iteration   3: 1150491.907 ops/s
# Warmup Iteration   4: 1148576.468 ops/s
# Warmup Iteration   5: 1163206.265 ops/s
# Warmup Iteration   6: 1149604.292 ops/s
# Warmup Iteration   7: 1003772.154 ops/s
# Warmup Iteration   8: 1104888.243 ops/s
# Warmup Iteration   9: 1171417.504 ops/s
# Warmup Iteration  10: 1162174.868 ops/s
# Warmup Iteration  11: 1161743.179 ops/s
# Warmup Iteration  12: 1159286.135 ops/s
# Warmup Iteration  13: 1157795.768 ops/s
# Warmup Iteration  14: 1163961.472 ops/s
# Warmup Iteration  15: 1164592.385 ops/s
# Warmup Iteration  16: 1157020.463 ops/s
# Warmup Iteration  17: 1160571.940 ops/s
# Warmup Iteration  18: 1163660.719 ops/s
# Warmup Iteration  19: 1157441.872 ops/s
# Warmup Iteration  20: 1167681.365 ops/s
# Warmup Iteration  21: 1150354.996 ops/s
# Warmup Iteration  22: 1162801.917 ops/s
# Warmup Iteration  23: 1164306.024 ops/s
# Warmup Iteration  24: 1156184.825 ops/s
# Warmup Iteration  25: 1158623.524 ops/s
# Warmup Iteration  26: 1164853.851 ops/s
# Warmup Iteration  27: 1167957.461 ops/s
# Warmup Iteration  28: 1156778.888 ops/s
# Warmup Iteration  29: 1166756.250 ops/s
# Warmup Iteration  30: 1164392.533 ops/s
Iteration   1: 1166397.859 ops/s
Iteration   2: 1166595.230 ops/s
Iteration   3: 1168621.527 ops/s
Iteration   4: 1168704.115 ops/s
Iteration   5: 1167109.723 ops/s
Iteration   6: 1143521.532 ops/s
Iteration   7: 1152646.810 ops/s
Iteration   8: 1161191.419 ops/s
Iteration   9: 1167568.165 ops/s
Iteration  10: 1168897.386 ops/s
Iteration  11: 1166843.486 ops/s
Iteration  12: 1149715.208 ops/s
Iteration  13: 1159155.329 ops/s
Iteration  14: 1171599.031 ops/s
Iteration  15: 1163918.824 ops/s
Iteration  16: 1167817.072 ops/s
Iteration  17: 1167051.710 ops/s
Iteration  18: 1162054.288 ops/s
Iteration  19: 1149410.460 ops/s
Iteration  20: 1164287.754 ops/s
Iteration  21: 1172368.204 ops/s
Iteration  22: 1164294.656 ops/s
Iteration  23: 1165561.143 ops/s
Iteration  24: 1166378.640 ops/s
Iteration  25: 1158399.071 ops/s
Iteration  26: 1163598.385 ops/s
Iteration  27: 1127331.564 ops/s
Iteration  28: 1147254.430 ops/s
Iteration  29: 1148355.658 ops/s
Iteration  30: 1166885.842 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_containsNoneIterable":
  1161117.817 ±(99.9%) 6716.826 ops/s [Average]
  (min, avg, max) = (1127331.564, 1161117.817, 1172368.204), stdev = 10053.430
  CI (99.9%): [1154400.991, 1167834.643] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  1161117.817 ± 6716.826  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2255089.986 ops/s
# Warmup Iteration   2: 4883158.540 ops/s
# Warmup Iteration   3: 4861763.932 ops/s
# Warmup Iteration   4: 4130810.890 ops/s
# Warmup Iteration   5: 4772380.962 ops/s
# Warmup Iteration   6: 4872860.569 ops/s
# Warmup Iteration   7: 4892199.705 ops/s
# Warmup Iteration   8: 4862534.030 ops/s
# Warmup Iteration   9: 4876237.217 ops/s
# Warmup Iteration  10: 4772389.221 ops/s
# Warmup Iteration  11: 4865088.616 ops/s
# Warmup Iteration  12: 4890776.755 ops/s
# Warmup Iteration  13: 4894689.823 ops/s
# Warmup Iteration  14: 4877741.131 ops/s
# Warmup Iteration  15: 4692306.793 ops/s
# Warmup Iteration  16: 4881841.918 ops/s
# Warmup Iteration  17: 4812876.130 ops/s
# Warmup Iteration  18: 4825811.083 ops/s
# Warmup Iteration  19: 4781620.780 ops/s
# Warmup Iteration  20: 4885000.923 ops/s
# Warmup Iteration  21: 4904465.195 ops/s
# Warmup Iteration  22: 4867582.850 ops/s
# Warmup Iteration  23: 4865277.782 ops/s
# Warmup Iteration  24: 4859424.825 ops/s
# Warmup Iteration  25: 4878158.305 ops/s
# Warmup Iteration  26: 4807653.933 ops/s
# Warmup Iteration  27: 4891029.724 ops/s
# Warmup Iteration  28: 4843653.403 ops/s
# Warmup Iteration  29: 4850161.828 ops/s
# Warmup Iteration  30: 4863068.612 ops/s
Iteration   1: 4895556.737 ops/s
Iteration   2: 4855970.740 ops/s
Iteration   3: 4857787.926 ops/s
Iteration   4: 4855595.771 ops/s
Iteration   5: 4898118.225 ops/s
Iteration   6: 4885289.917 ops/s
Iteration   7: 4904348.078 ops/s
Iteration   8: 4854988.957 ops/s
Iteration   9: 4843426.503 ops/s
Iteration  10: 4749903.901 ops/s
Iteration  11: 4805192.927 ops/s
Iteration  12: 4872943.570 ops/s
Iteration  13: 4886131.801 ops/s
Iteration  14: 4902480.818 ops/s
Iteration  15: 4796902.376 ops/s
Iteration  16: 4900542.856 ops/s
Iteration  17: 4885892.502 ops/s
Iteration  18: 4890134.435 ops/s
Iteration  19: 4892064.244 ops/s
Iteration  20: 4856094.147 ops/s
Iteration  21: 4868341.631 ops/s
Iteration  22: 4880157.683 ops/s
Iteration  23: 4893092.647 ops/s
Iteration  24: 4891793.708 ops/s
Iteration  25: 4876695.742 ops/s
Iteration  26: 4855199.064 ops/s
Iteration  27: 4861864.985 ops/s
Iteration  28: 4872068.250 ops/s
Iteration  29: 4886081.654 ops/s
Iteration  30: 4790091.683 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_count":
  4865491.782 ±(99.9%) 24621.995 ops/s [Average]
  (min, avg, max) = (4749903.901, 4865491.782, 4904348.078), stdev = 36853.046
  CI (99.9%): [4840869.787, 4890113.778] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_count  thrpt   30  4865491.782 ± 24621.995  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3432457.390 ops/s
# Warmup Iteration   2: 7546538.415 ops/s
# Warmup Iteration   3: 7177215.776 ops/s
# Warmup Iteration   4: 6745100.005 ops/s
# Warmup Iteration   5: 7677330.324 ops/s
# Warmup Iteration   6: 7618450.757 ops/s
# Warmup Iteration   7: 7641573.068 ops/s
# Warmup Iteration   8: 7667316.707 ops/s
# Warmup Iteration   9: 7640413.235 ops/s
# Warmup Iteration  10: 7570848.071 ops/s
# Warmup Iteration  11: 7654993.847 ops/s
# Warmup Iteration  12: 7664431.621 ops/s
# Warmup Iteration  13: 7620467.623 ops/s
# Warmup Iteration  14: 7567397.710 ops/s
# Warmup Iteration  15: 7552924.162 ops/s
# Warmup Iteration  16: 7653142.770 ops/s
# Warmup Iteration  17: 7670969.710 ops/s
# Warmup Iteration  18: 7632206.495 ops/s
# Warmup Iteration  19: 7670160.939 ops/s
# Warmup Iteration  20: 7635608.727 ops/s
# Warmup Iteration  21: 7660235.543 ops/s
# Warmup Iteration  22: 7672764.101 ops/s
# Warmup Iteration  23: 7682831.197 ops/s
# Warmup Iteration  24: 7565371.783 ops/s
# Warmup Iteration  25: 7642082.155 ops/s
# Warmup Iteration  26: 7664752.159 ops/s
# Warmup Iteration  27: 7638056.071 ops/s
# Warmup Iteration  28: 7683781.767 ops/s
# Warmup Iteration  29: 7612762.037 ops/s
# Warmup Iteration  30: 7552611.596 ops/s
Iteration   1: 7666957.648 ops/s
Iteration   2: 7683302.678 ops/s
Iteration   3: 7695930.925 ops/s
Iteration   4: 7524621.561 ops/s
Iteration   5: 7677232.309 ops/s
Iteration   6: 7675805.269 ops/s
Iteration   7: 7645378.163 ops/s
Iteration   8: 7624241.260 ops/s
Iteration   9: 7657874.344 ops/s
Iteration  10: 7676980.026 ops/s
Iteration  11: 7665795.111 ops/s
Iteration  12: 7617393.965 ops/s
Iteration  13: 7571757.496 ops/s
Iteration  14: 7634364.506 ops/s
Iteration  15: 7670572.238 ops/s
Iteration  16: 7548107.738 ops/s
Iteration  17: 7623078.455 ops/s
Iteration  18: 7683577.292 ops/s
Iteration  19: 7700589.807 ops/s
Iteration  20: 7685806.318 ops/s
Iteration  21: 7552187.989 ops/s
Iteration  22: 7647933.033 ops/s
Iteration  23: 7651664.184 ops/s
Iteration  24: 7655742.874 ops/s
Iteration  25: 7656082.139 ops/s
Iteration  26: 7517044.070 ops/s
Iteration  27: 7632961.559 ops/s
Iteration  28: 7638731.421 ops/s
Iteration  29: 7675360.003 ops/s
Iteration  30: 7696792.947 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_detectIfNone":
  7641795.578 ±(99.9%) 33940.081 ops/s [Average]
  (min, avg, max) = (7517044.070, 7641795.578, 7700589.807), stdev = 50799.920
  CI (99.9%): [7607855.496, 7675735.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_detectIfNone  thrpt   30  7641795.578 ± 33940.081  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2486281.186 ops/s
# Warmup Iteration   2: 5728529.593 ops/s
# Warmup Iteration   3: 4729240.303 ops/s
# Warmup Iteration   4: 5672676.455 ops/s
# Warmup Iteration   5: 5680933.764 ops/s
# Warmup Iteration   6: 5620320.997 ops/s
# Warmup Iteration   7: 5560417.181 ops/s
# Warmup Iteration   8: 5654776.336 ops/s
# Warmup Iteration   9: 5681405.983 ops/s
# Warmup Iteration  10: 5706745.876 ops/s
# Warmup Iteration  11: 5630849.195 ops/s
# Warmup Iteration  12: 5693947.789 ops/s
# Warmup Iteration  13: 5673122.714 ops/s
# Warmup Iteration  14: 5677153.168 ops/s
# Warmup Iteration  15: 5682350.274 ops/s
# Warmup Iteration  16: 5683398.137 ops/s
# Warmup Iteration  17: 5557926.361 ops/s
# Warmup Iteration  18: 5632924.488 ops/s
# Warmup Iteration  19: 5666620.080 ops/s
# Warmup Iteration  20: 5605812.075 ops/s
# Warmup Iteration  21: 5654010.075 ops/s
# Warmup Iteration  22: 5657216.037 ops/s
# Warmup Iteration  23: 5693738.984 ops/s
# Warmup Iteration  24: 5600259.965 ops/s
# Warmup Iteration  25: 5660388.269 ops/s
# Warmup Iteration  26: 5597892.387 ops/s
# Warmup Iteration  27: 5594991.307 ops/s
# Warmup Iteration  28: 5687891.615 ops/s
# Warmup Iteration  29: 5677558.368 ops/s
# Warmup Iteration  30: 5710401.968 ops/s
Iteration   1: 5568158.641 ops/s
Iteration   2: 5665795.971 ops/s
Iteration   3: 5683490.947 ops/s
Iteration   4: 5722754.889 ops/s
Iteration   5: 5700706.899 ops/s
Iteration   6: 5677573.770 ops/s
Iteration   7: 5697862.792 ops/s
Iteration   8: 5714053.268 ops/s
Iteration   9: 5654052.493 ops/s
Iteration  10: 5728687.675 ops/s
Iteration  11: 5712208.440 ops/s
Iteration  12: 5593325.317 ops/s
Iteration  13: 5690119.952 ops/s
Iteration  14: 5684632.858 ops/s
Iteration  15: 5691733.692 ops/s
Iteration  16: 5715084.374 ops/s
Iteration  17: 5686409.083 ops/s
Iteration  18: 5644752.039 ops/s
Iteration  19: 5705596.689 ops/s
Iteration  20: 5716572.180 ops/s
Iteration  21: 5585261.874 ops/s
Iteration  22: 5706619.102 ops/s
Iteration  23: 5676885.219 ops/s
Iteration  24: 5729624.874 ops/s
Iteration  25: 5715125.885 ops/s
Iteration  26: 5728248.507 ops/s
Iteration  27: 5653894.562 ops/s
Iteration  28: 5711911.246 ops/s
Iteration  29: 5674498.119 ops/s
Iteration  30: 5638870.397 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_distinct":
  5682483.725 ±(99.9%) 28231.567 ops/s [Average]
  (min, avg, max) = (5568158.641, 5682483.725, 5729624.874), stdev = 42255.683
  CI (99.9%): [5654252.159, 5710715.292] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_distinct  thrpt   30  5682483.725 ± 28231.567  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2342187.277 ops/s
# Warmup Iteration   2: 4797018.294 ops/s
# Warmup Iteration   3: 4084705.019 ops/s
# Warmup Iteration   4: 4855963.595 ops/s
# Warmup Iteration   5: 4854013.877 ops/s
# Warmup Iteration   6: 4814565.765 ops/s
# Warmup Iteration   7: 4845255.235 ops/s
# Warmup Iteration   8: 4820450.638 ops/s
# Warmup Iteration   9: 4862391.610 ops/s
# Warmup Iteration  10: 4818153.579 ops/s
# Warmup Iteration  11: 4795507.757 ops/s
# Warmup Iteration  12: 4702949.993 ops/s
# Warmup Iteration  13: 4854432.052 ops/s
# Warmup Iteration  14: 4851142.977 ops/s
# Warmup Iteration  15: 4826319.020 ops/s
# Warmup Iteration  16: 4798519.330 ops/s
# Warmup Iteration  17: 4811030.141 ops/s
# Warmup Iteration  18: 4867390.881 ops/s
# Warmup Iteration  19: 4850453.705 ops/s
# Warmup Iteration  20: 4820793.593 ops/s
# Warmup Iteration  21: 4793754.906 ops/s
# Warmup Iteration  22: 4811778.924 ops/s
# Warmup Iteration  23: 4837443.901 ops/s
# Warmup Iteration  24: 4732992.000 ops/s
# Warmup Iteration  25: 4805863.172 ops/s
# Warmup Iteration  26: 4844820.676 ops/s
# Warmup Iteration  27: 4783388.229 ops/s
# Warmup Iteration  28: 4815354.045 ops/s
# Warmup Iteration  29: 4790984.519 ops/s
# Warmup Iteration  30: 4837331.708 ops/s
Iteration   1: 4771060.413 ops/s
Iteration   2: 4851776.014 ops/s
Iteration   3: 4843532.233 ops/s
Iteration   4: 4722858.866 ops/s
Iteration   5: 4823467.040 ops/s
Iteration   6: 4752727.808 ops/s
Iteration   7: 4738892.889 ops/s
Iteration   8: 4838955.723 ops/s
Iteration   9: 4827979.700 ops/s
Iteration  10: 4781259.141 ops/s
Iteration  11: 4655709.899 ops/s
Iteration  12: 4827963.001 ops/s
Iteration  13: 4796801.708 ops/s
Iteration  14: 4824756.082 ops/s
Iteration  15: 4811925.848 ops/s
Iteration  16: 4804804.607 ops/s
Iteration  17: 4716495.562 ops/s
Iteration  18: 4843599.411 ops/s
Iteration  19: 4814993.224 ops/s
Iteration  20: 4825064.963 ops/s
Iteration  21: 4821778.032 ops/s
Iteration  22: 4800654.389 ops/s
Iteration  23: 4818048.063 ops/s
Iteration  24: 4825276.017 ops/s
Iteration  25: 4821116.491 ops/s
Iteration  26: 4828330.291 ops/s
Iteration  27: 4774161.650 ops/s
Iteration  28: 4679391.648 ops/s
Iteration  29: 4849074.850 ops/s
Iteration  30: 4846135.695 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_forEach":
  4797953.042 ±(99.9%) 33968.799 ops/s [Average]
  (min, avg, max) = (4655709.899, 4797953.042, 4851776.014), stdev = 50842.903
  CI (99.9%): [4763984.243, 4831921.841] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_forEach  thrpt   30  4797953.042 ± 33968.799  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2388041.307 ops/s
# Warmup Iteration   2: 4943126.134 ops/s
# Warmup Iteration   3: 4165342.013 ops/s
# Warmup Iteration   4: 4948586.992 ops/s
# Warmup Iteration   5: 4874044.499 ops/s
# Warmup Iteration   6: 4928896.483 ops/s
# Warmup Iteration   7: 4941066.453 ops/s
# Warmup Iteration   8: 4994980.731 ops/s
# Warmup Iteration   9: 4925442.637 ops/s
# Warmup Iteration  10: 5007247.267 ops/s
# Warmup Iteration  11: 4922528.915 ops/s
# Warmup Iteration  12: 4987503.435 ops/s
# Warmup Iteration  13: 4996777.766 ops/s
# Warmup Iteration  14: 5029482.357 ops/s
# Warmup Iteration  15: 4902184.304 ops/s
# Warmup Iteration  16: 4999099.045 ops/s
# Warmup Iteration  17: 4976935.046 ops/s
# Warmup Iteration  18: 4965102.448 ops/s
# Warmup Iteration  19: 4905161.359 ops/s
# Warmup Iteration  20: 4996524.735 ops/s
# Warmup Iteration  21: 4995202.272 ops/s
# Warmup Iteration  22: 5006818.730 ops/s
# Warmup Iteration  23: 4971346.316 ops/s
# Warmup Iteration  24: 4987638.967 ops/s
# Warmup Iteration  25: 4948619.407 ops/s
# Warmup Iteration  26: 4960438.388 ops/s
# Warmup Iteration  27: 4997227.336 ops/s
# Warmup Iteration  28: 4981962.447 ops/s
# Warmup Iteration  29: 5015288.008 ops/s
# Warmup Iteration  30: 4959662.978 ops/s
Iteration   1: 4997279.751 ops/s
Iteration   2: 4984284.178 ops/s
Iteration   3: 4924582.288 ops/s
Iteration   4: 4982850.467 ops/s
Iteration   5: 4978732.816 ops/s
Iteration   6: 5012046.258 ops/s
Iteration   7: 4967353.834 ops/s
Iteration   8: 4999259.283 ops/s
Iteration   9: 4986745.758 ops/s
Iteration  10: 4893998.350 ops/s
Iteration  11: 5014596.966 ops/s
Iteration  12: 4971989.134 ops/s
Iteration  13: 4943461.329 ops/s
Iteration  14: 4984746.197 ops/s
Iteration  15: 5010546.305 ops/s
Iteration  16: 4949639.785 ops/s
Iteration  17: 4970487.084 ops/s
Iteration  18: 5016060.410 ops/s
Iteration  19: 4961009.407 ops/s
Iteration  20: 4902870.823 ops/s
Iteration  21: 4991855.558 ops/s
Iteration  22: 4945442.452 ops/s
Iteration  23: 5015180.247 ops/s
Iteration  24: 5011585.127 ops/s
Iteration  25: 4986448.587 ops/s
Iteration  26: 5014860.636 ops/s
Iteration  27: 4925513.592 ops/s
Iteration  28: 4974858.153 ops/s
Iteration  29: 4968897.202 ops/s
Iteration  30: 4982357.318 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_forEachWithIndex":
  4975651.310 ±(99.9%) 22177.871 ops/s [Average]
  (min, avg, max) = (4893998.350, 4975651.310, 5016060.410), stdev = 33194.796
  CI (99.9%): [4953473.439, 4997829.181] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  4975651.310 ± 22177.871  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9028123.029 ops/s
# Warmup Iteration   2: 19339786.160 ops/s
# Warmup Iteration   3: 16100979.446 ops/s
# Warmup Iteration   4: 19414280.770 ops/s
# Warmup Iteration   5: 19189494.429 ops/s
# Warmup Iteration   6: 19494850.769 ops/s
# Warmup Iteration   7: 19312107.749 ops/s
# Warmup Iteration   8: 19384708.193 ops/s
# Warmup Iteration   9: 19488810.238 ops/s
# Warmup Iteration  10: 19233604.335 ops/s
# Warmup Iteration  11: 19542267.992 ops/s
# Warmup Iteration  12: 19430773.898 ops/s
# Warmup Iteration  13: 19303650.519 ops/s
# Warmup Iteration  14: 19356604.256 ops/s
# Warmup Iteration  15: 19501686.931 ops/s
# Warmup Iteration  16: 19306497.395 ops/s
# Warmup Iteration  17: 19222786.988 ops/s
# Warmup Iteration  18: 19489427.420 ops/s
# Warmup Iteration  19: 19388705.023 ops/s
# Warmup Iteration  20: 19392264.285 ops/s
# Warmup Iteration  21: 19508346.097 ops/s
# Warmup Iteration  22: 19475721.154 ops/s
# Warmup Iteration  23: 19264967.690 ops/s
# Warmup Iteration  24: 19571471.583 ops/s
# Warmup Iteration  25: 19387353.486 ops/s
# Warmup Iteration  26: 19547629.289 ops/s
# Warmup Iteration  27: 19352883.313 ops/s
# Warmup Iteration  28: 19462946.644 ops/s
# Warmup Iteration  29: 19392477.781 ops/s
# Warmup Iteration  30: 19322312.766 ops/s
Iteration   1: 19457851.551 ops/s
Iteration   2: 19406821.350 ops/s
Iteration   3: 19249354.832 ops/s
Iteration   4: 19522158.901 ops/s
Iteration   5: 19357957.576 ops/s
Iteration   6: 19400489.735 ops/s
Iteration   7: 19265894.991 ops/s
Iteration   8: 18933110.061 ops/s
Iteration   9: 19540980.741 ops/s
Iteration  10: 19359403.422 ops/s
Iteration  11: 19151391.520 ops/s
Iteration  12: 18385946.729 ops/s
Iteration  13: 18761075.429 ops/s
Iteration  14: 19582230.982 ops/s
Iteration  15: 19258132.870 ops/s
Iteration  16: 19147490.433 ops/s
Iteration  17: 19203413.755 ops/s
Iteration  18: 19466055.415 ops/s
Iteration  19: 19481384.372 ops/s
Iteration  20: 19396095.535 ops/s
Iteration  21: 19226962.683 ops/s
Iteration  22: 19048212.562 ops/s
Iteration  23: 19577377.219 ops/s
Iteration  24: 19401302.885 ops/s
Iteration  25: 19209882.093 ops/s
Iteration  26: 19511829.921 ops/s
Iteration  27: 19497550.287 ops/s
Iteration  28: 19528775.555 ops/s
Iteration  29: 19497853.548 ops/s
Iteration  30: 19077119.155 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_get":
  19296803.537 ±(99.9%) 176312.809 ops/s [Average]
  (min, avg, max) = (18385946.729, 19296803.537, 19582230.982), stdev = 263896.732
  CI (99.9%): [19120490.728, 19473116.346] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score        Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_get  thrpt   30  19296803.537 ± 176312.809  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6156907.172 ops/s
# Warmup Iteration   2: 13726812.131 ops/s
# Warmup Iteration   3: 11122262.262 ops/s
# Warmup Iteration   4: 13443449.207 ops/s
# Warmup Iteration   5: 13481847.392 ops/s
# Warmup Iteration   6: 13540643.170 ops/s
# Warmup Iteration   7: 13537376.715 ops/s
# Warmup Iteration   8: 13661092.236 ops/s
# Warmup Iteration   9: 13368437.122 ops/s
# Warmup Iteration  10: 13662061.881 ops/s
# Warmup Iteration  11: 13381158.873 ops/s
# Warmup Iteration  12: 13514932.863 ops/s
# Warmup Iteration  13: 13577980.165 ops/s
# Warmup Iteration  14: 13423419.133 ops/s
# Warmup Iteration  15: 13648588.663 ops/s
# Warmup Iteration  16: 13631081.240 ops/s
# Warmup Iteration  17: 13522923.378 ops/s
# Warmup Iteration  18: 13587512.111 ops/s
# Warmup Iteration  19: 13491401.208 ops/s
# Warmup Iteration  20: 13401771.805 ops/s
# Warmup Iteration  21: 13459258.167 ops/s
# Warmup Iteration  22: 13680098.184 ops/s
# Warmup Iteration  23: 13656927.922 ops/s
# Warmup Iteration  24: 13590889.092 ops/s
# Warmup Iteration  25: 13633446.774 ops/s
# Warmup Iteration  26: 13672635.716 ops/s
# Warmup Iteration  27: 13661258.334 ops/s
# Warmup Iteration  28: 13637888.986 ops/s
# Warmup Iteration  29: 13691244.720 ops/s
# Warmup Iteration  30: 13513027.034 ops/s
Iteration   1: 13595249.830 ops/s
Iteration   2: 13592870.628 ops/s
Iteration   3: 13625603.838 ops/s
Iteration   4: 13653170.135 ops/s
Iteration   5: 13645460.088 ops/s
Iteration   6: 13396159.826 ops/s
Iteration   7: 13453302.724 ops/s
Iteration   8: 13618761.528 ops/s
Iteration   9: 13688801.357 ops/s
Iteration  10: 13662528.498 ops/s
Iteration  11: 13588502.077 ops/s
Iteration  12: 13694518.547 ops/s
Iteration  13: 13560487.255 ops/s
Iteration  14: 13413793.219 ops/s
Iteration  15: 13564826.339 ops/s
Iteration  16: 13622585.110 ops/s
Iteration  17: 13640853.941 ops/s
Iteration  18: 13649652.110 ops/s
Iteration  19: 13658546.622 ops/s
Iteration  20: 13357513.251 ops/s
Iteration  21: 13287811.632 ops/s
Iteration  22: 13661196.733 ops/s
Iteration  23: 13666635.028 ops/s
Iteration  24: 13639072.705 ops/s
Iteration  25: 13617736.672 ops/s
Iteration  26: 13615010.697 ops/s
Iteration  27: 13621055.910 ops/s
Iteration  28: 13422303.396 ops/s
Iteration  29: 13619241.685 ops/s
Iteration  30: 13641996.072 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_getFirst":
  13582508.248 ±(99.9%) 70938.789 ops/s [Average]
  (min, avg, max) = (13287811.632, 13582508.248, 13694518.547), stdev = 106177.848
  CI (99.9%): [13511569.459, 13653447.037] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_getFirst  thrpt   30  13582508.248 ± 70938.789  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_getFirst_emptyList_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_getFirst_emptyList_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 677537.503 ops/s
# Warmup Iteration   2: 705045.392 ops/s
# Warmup Iteration   3: 936310.001 ops/s
# Warmup Iteration   4: 933432.127 ops/s
# Warmup Iteration   5: 939341.926 ops/s
# Warmup Iteration   6: 933720.055 ops/s
# Warmup Iteration   7: 934576.391 ops/s
# Warmup Iteration   8: 934305.807 ops/s
# Warmup Iteration   9: 942533.886 ops/s
# Warmup Iteration  10: 937546.242 ops/s
# Warmup Iteration  11: 848496.533 ops/s
# Warmup Iteration  12: 872560.519 ops/s
# Warmup Iteration  13: 933967.467 ops/s
# Warmup Iteration  14: 934101.161 ops/s
# Warmup Iteration  15: 925418.423 ops/s
# Warmup Iteration  16: 938659.328 ops/s
# Warmup Iteration  17: 987254.729 ops/s
# Warmup Iteration  18: 987871.347 ops/s
# Warmup Iteration  19: 990280.979 ops/s
# Warmup Iteration  20: 996038.071 ops/s
# Warmup Iteration  21: 991338.346 ops/s
# Warmup Iteration  22: 990447.097 ops/s
# Warmup Iteration  23: 980148.369 ops/s
# Warmup Iteration  24: 990918.615 ops/s
# Warmup Iteration  25: 992368.389 ops/s
# Warmup Iteration  26: 983168.066 ops/s
# Warmup Iteration  27: 993151.683 ops/s
# Warmup Iteration  28: 991240.382 ops/s
# Warmup Iteration  29: 980531.205 ops/s
# Warmup Iteration  30: 993893.020 ops/s
Iteration   1: 990584.022 ops/s
Iteration   2: 981703.232 ops/s
Iteration   3: 972077.463 ops/s
Iteration   4: 987817.781 ops/s
Iteration   5: 992948.918 ops/s
Iteration   6: 991834.997 ops/s
Iteration   7: 960610.378 ops/s
Iteration   8: 987459.138 ops/s
Iteration   9: 999774.858 ops/s
Iteration  10: 999391.179 ops/s
Iteration  11: 984686.990 ops/s
Iteration  12: 988611.867 ops/s
Iteration  13: 990910.654 ops/s
Iteration  14: 992978.957 ops/s
Iteration  15: 988598.671 ops/s
Iteration  16: 966439.209 ops/s
Iteration  17: 991865.096 ops/s
Iteration  18: 989266.825 ops/s
Iteration  19: 991608.886 ops/s
Iteration  20: 974544.058 ops/s
Iteration  21: 991149.907 ops/s
Iteration  22: 980600.583 ops/s
Iteration  23: 990067.673 ops/s
Iteration  24: 992473.677 ops/s
Iteration  25: 989500.626 ops/s
Iteration  26: 990071.081 ops/s
Iteration  27: 958149.212 ops/s
Iteration  28: 988085.428 ops/s
Iteration  29: 988416.635 ops/s
Iteration  30: 986781.636 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_getFirst_emptyList_throws":
  985966.988 ±(99.9%) 6730.124 ops/s [Average]
  (min, avg, max) = (958149.212, 985966.988, 999774.858), stdev = 10073.333
  CI (99.9%): [979236.864, 992697.112] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_getFirst_emptyList_throws  thrpt   30  985966.988 ± 6730.124  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7064968.447 ops/s
# Warmup Iteration   2: 12420461.790 ops/s
# Warmup Iteration   3: 12894224.253 ops/s
# Warmup Iteration   4: 13663870.876 ops/s
# Warmup Iteration   5: 13644016.292 ops/s
# Warmup Iteration   6: 13679621.579 ops/s
# Warmup Iteration   7: 13806494.807 ops/s
# Warmup Iteration   8: 13631737.108 ops/s
# Warmup Iteration   9: 13761696.814 ops/s
# Warmup Iteration  10: 13792739.682 ops/s
# Warmup Iteration  11: 13736725.065 ops/s
# Warmup Iteration  12: 13671718.872 ops/s
# Warmup Iteration  13: 13617871.390 ops/s
# Warmup Iteration  14: 13701089.604 ops/s
# Warmup Iteration  15: 13716214.546 ops/s
# Warmup Iteration  16: 13761610.207 ops/s
# Warmup Iteration  17: 13818191.843 ops/s
# Warmup Iteration  18: 13829294.334 ops/s
# Warmup Iteration  19: 13679969.744 ops/s
# Warmup Iteration  20: 13632813.672 ops/s
# Warmup Iteration  21: 13602144.231 ops/s
# Warmup Iteration  22: 13638480.634 ops/s
# Warmup Iteration  23: 13631010.570 ops/s
# Warmup Iteration  24: 13728622.958 ops/s
# Warmup Iteration  25: 13724695.697 ops/s
# Warmup Iteration  26: 13651018.803 ops/s
# Warmup Iteration  27: 13814445.683 ops/s
# Warmup Iteration  28: 13712332.081 ops/s
# Warmup Iteration  29: 13523810.863 ops/s
# Warmup Iteration  30: 13634221.250 ops/s
Iteration   1: 13690242.864 ops/s
Iteration   2: 13785203.972 ops/s
Iteration   3: 13671666.550 ops/s
Iteration   4: 13754524.482 ops/s
Iteration   5: 13553249.635 ops/s
Iteration   6: 13543621.149 ops/s
Iteration   7: 13560814.559 ops/s
Iteration   8: 13752346.964 ops/s
Iteration   9: 13770922.060 ops/s
Iteration  10: 13579459.047 ops/s
Iteration  11: 13348546.529 ops/s
Iteration  12: 13312244.711 ops/s
Iteration  13: 13616425.949 ops/s
Iteration  14: 13809967.460 ops/s
Iteration  15: 13749482.574 ops/s
Iteration  16: 13684569.458 ops/s
Iteration  17: 13808064.624 ops/s
Iteration  18: 13670554.726 ops/s
Iteration  19: 13803923.521 ops/s
Iteration  20: 13503458.927 ops/s
Iteration  21: 13739235.421 ops/s
Iteration  22: 13781558.592 ops/s
Iteration  23: 13784452.617 ops/s
Iteration  24: 13468557.705 ops/s
Iteration  25: 13715258.326 ops/s
Iteration  26: 13641946.952 ops/s
Iteration  27: 13750328.868 ops/s
Iteration  28: 13739679.349 ops/s
Iteration  29: 13797293.751 ops/s
Iteration  30: 13699281.533 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_getLast":
  13669562.762 ±(99.9%) 89005.872 ops/s [Average]
  (min, avg, max) = (13312244.711, 13669562.762, 13809967.460), stdev = 133219.810
  CI (99.9%): [13580556.890, 13758568.635] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_getLast  thrpt   30  13669562.762 ± 89005.872  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_getLast_emptyList_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_getLast_emptyList_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 686067.353 ops/s
# Warmup Iteration   2: 704759.945 ops/s
# Warmup Iteration   3: 942957.349 ops/s
# Warmup Iteration   4: 938975.275 ops/s
# Warmup Iteration   5: 930152.622 ops/s
# Warmup Iteration   6: 938956.255 ops/s
# Warmup Iteration   7: 930737.597 ops/s
# Warmup Iteration   8: 932470.993 ops/s
# Warmup Iteration   9: 926185.529 ops/s
# Warmup Iteration  10: 937505.925 ops/s
# Warmup Iteration  11: 854156.434 ops/s
# Warmup Iteration  12: 874051.631 ops/s
# Warmup Iteration  13: 927439.851 ops/s
# Warmup Iteration  14: 942259.078 ops/s
# Warmup Iteration  15: 932957.443 ops/s
# Warmup Iteration  16: 944087.832 ops/s
# Warmup Iteration  17: 991509.086 ops/s
# Warmup Iteration  18: 993560.919 ops/s
# Warmup Iteration  19: 997052.255 ops/s
# Warmup Iteration  20: 996146.177 ops/s
# Warmup Iteration  21: 1001024.958 ops/s
# Warmup Iteration  22: 988694.188 ops/s
# Warmup Iteration  23: 994435.806 ops/s
# Warmup Iteration  24: 998627.570 ops/s
# Warmup Iteration  25: 994621.865 ops/s
# Warmup Iteration  26: 988888.802 ops/s
# Warmup Iteration  27: 996290.813 ops/s
# Warmup Iteration  28: 991507.842 ops/s
# Warmup Iteration  29: 993048.374 ops/s
# Warmup Iteration  30: 983074.196 ops/s
Iteration   1: 1001076.944 ops/s
Iteration   2: 979595.507 ops/s
Iteration   3: 1000511.523 ops/s
Iteration   4: 1001391.761 ops/s
Iteration   5: 993077.605 ops/s
Iteration   6: 965573.165 ops/s
Iteration   7: 985019.493 ops/s
Iteration   8: 1002253.925 ops/s
Iteration   9: 994320.473 ops/s
Iteration  10: 999628.161 ops/s
Iteration  11: 993554.308 ops/s
Iteration  12: 963697.020 ops/s
Iteration  13: 992677.795 ops/s
Iteration  14: 993081.665 ops/s
Iteration  15: 975167.955 ops/s
Iteration  16: 1000393.092 ops/s
Iteration  17: 997314.731 ops/s
Iteration  18: 993054.291 ops/s
Iteration  19: 998236.607 ops/s
Iteration  20: 992638.208 ops/s
Iteration  21: 996569.491 ops/s
Iteration  22: 995433.571 ops/s
Iteration  23: 998822.135 ops/s
Iteration  24: 999214.428 ops/s
Iteration  25: 1003070.083 ops/s
Iteration  26: 999458.562 ops/s
Iteration  27: 996010.269 ops/s
Iteration  28: 995951.381 ops/s
Iteration  29: 1000388.615 ops/s
Iteration  30: 993223.872 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_getLast_emptyList_throws":
  993346.888 ±(99.9%) 6681.126 ops/s [Average]
  (min, avg, max) = (963697.020, 993346.888, 1003070.083), stdev = 9999.996
  CI (99.9%): [986665.762, 1000028.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_getLast_emptyList_throws  thrpt   30  993346.888 ± 6681.126  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_get_throws_empty_list$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_get_throws_empty_list

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 691326.682 ops/s
# Warmup Iteration   2: 707050.735 ops/s
# Warmup Iteration   3: 953189.990 ops/s
# Warmup Iteration   4: 954978.476 ops/s
# Warmup Iteration   5: 944975.288 ops/s
# Warmup Iteration   6: 954431.205 ops/s
# Warmup Iteration   7: 952070.344 ops/s
# Warmup Iteration   8: 954621.603 ops/s
# Warmup Iteration   9: 941961.993 ops/s
# Warmup Iteration  10: 942667.948 ops/s
# Warmup Iteration  11: 824410.632 ops/s
# Warmup Iteration  12: 904577.932 ops/s
# Warmup Iteration  13: 953033.998 ops/s
# Warmup Iteration  14: 944082.005 ops/s
# Warmup Iteration  15: 945446.734 ops/s
# Warmup Iteration  16: 952031.456 ops/s
# Warmup Iteration  17: 991800.412 ops/s
# Warmup Iteration  18: 993228.699 ops/s
# Warmup Iteration  19: 1003498.787 ops/s
# Warmup Iteration  20: 1007655.428 ops/s
# Warmup Iteration  21: 1008812.166 ops/s
# Warmup Iteration  22: 1012159.915 ops/s
# Warmup Iteration  23: 1012300.407 ops/s
# Warmup Iteration  24: 997123.764 ops/s
# Warmup Iteration  25: 1000558.319 ops/s
# Warmup Iteration  26: 1000519.183 ops/s
# Warmup Iteration  27: 999108.789 ops/s
# Warmup Iteration  28: 1009481.244 ops/s
# Warmup Iteration  29: 1012398.921 ops/s
# Warmup Iteration  30: 1001992.520 ops/s
Iteration   1: 1010146.605 ops/s
Iteration   2: 1011661.262 ops/s
Iteration   3: 1002388.336 ops/s
Iteration   4: 1010069.702 ops/s
Iteration   5: 986129.699 ops/s
Iteration   6: 1005563.140 ops/s
Iteration   7: 986415.118 ops/s
Iteration   8: 1009966.048 ops/s
Iteration   9: 1011402.460 ops/s
Iteration  10: 1004288.097 ops/s
Iteration  11: 1006063.582 ops/s
Iteration  12: 1016172.873 ops/s
Iteration  13: 1006207.250 ops/s
Iteration  14: 1004130.072 ops/s
Iteration  15: 984422.299 ops/s
Iteration  16: 1009692.036 ops/s
Iteration  17: 993846.483 ops/s
Iteration  18: 1008902.616 ops/s
Iteration  19: 1004797.676 ops/s
Iteration  20: 994993.823 ops/s
Iteration  21: 991676.133 ops/s
Iteration  22: 1008888.862 ops/s
Iteration  23: 1013777.792 ops/s
Iteration  24: 1007471.287 ops/s
Iteration  25: 1006204.107 ops/s
Iteration  26: 1008940.762 ops/s
Iteration  27: 996089.769 ops/s
Iteration  28: 1006480.204 ops/s
Iteration  29: 1013761.416 ops/s
Iteration  30: 1012586.271 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_get_throws_empty_list":
  1004437.859 ±(99.9%) 5797.959 ops/s [Average]
  (min, avg, max) = (984422.299, 1004437.859, 1016172.873), stdev = 8678.112
  CI (99.9%): [998639.901, 1010235.818] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_get_throws_empty_list  thrpt   30  1004437.859 ± 5797.959  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_get_throws_index_greater_than_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_get_throws_index_greater_than_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 696624.910 ops/s
# Warmup Iteration   2: 738207.879 ops/s
# Warmup Iteration   3: 977506.381 ops/s
# Warmup Iteration   4: 971581.269 ops/s
# Warmup Iteration   5: 965606.844 ops/s
# Warmup Iteration   6: 975502.778 ops/s
# Warmup Iteration   7: 974418.294 ops/s
# Warmup Iteration   8: 978509.122 ops/s
# Warmup Iteration   9: 945441.949 ops/s
# Warmup Iteration  10: 938289.662 ops/s
# Warmup Iteration  11: 838468.439 ops/s
# Warmup Iteration  12: 978853.829 ops/s
# Warmup Iteration  13: 974114.468 ops/s
# Warmup Iteration  14: 974990.098 ops/s
# Warmup Iteration  15: 971731.391 ops/s
# Warmup Iteration  16: 976134.172 ops/s
# Warmup Iteration  17: 1037598.637 ops/s
# Warmup Iteration  18: 1025166.847 ops/s
# Warmup Iteration  19: 1035332.318 ops/s
# Warmup Iteration  20: 1028136.727 ops/s
# Warmup Iteration  21: 1026107.606 ops/s
# Warmup Iteration  22: 1033674.844 ops/s
# Warmup Iteration  23: 1029765.843 ops/s
# Warmup Iteration  24: 1024988.945 ops/s
# Warmup Iteration  25: 1021248.138 ops/s
# Warmup Iteration  26: 1035126.791 ops/s
# Warmup Iteration  27: 1032240.970 ops/s
# Warmup Iteration  28: 1025521.310 ops/s
# Warmup Iteration  29: 1037580.102 ops/s
# Warmup Iteration  30: 1034857.557 ops/s
Iteration   1: 1024085.638 ops/s
Iteration   2: 1038777.288 ops/s
Iteration   3: 1038350.233 ops/s
Iteration   4: 1038610.435 ops/s
Iteration   5: 1028085.105 ops/s
Iteration   6: 991322.652 ops/s
Iteration   7: 1035444.975 ops/s
Iteration   8: 1039135.073 ops/s
Iteration   9: 1016766.066 ops/s
Iteration  10: 1026362.780 ops/s
Iteration  11: 1035461.042 ops/s
Iteration  12: 1039781.002 ops/s
Iteration  13: 1037396.704 ops/s
Iteration  14: 1035194.272 ops/s
Iteration  15: 1037734.736 ops/s
Iteration  16: 1030415.003 ops/s
Iteration  17: 1026255.972 ops/s
Iteration  18: 1036855.429 ops/s
Iteration  19: 1032355.002 ops/s
Iteration  20: 1035383.256 ops/s
Iteration  21: 1043722.827 ops/s
Iteration  22: 1037325.470 ops/s
Iteration  23: 1036158.180 ops/s
Iteration  24: 1034436.304 ops/s
Iteration  25: 1033844.740 ops/s
Iteration  26: 1015622.869 ops/s
Iteration  27: 1036860.395 ops/s
Iteration  28: 1035080.138 ops/s
Iteration  29: 1044763.544 ops/s
Iteration  30: 1036393.218 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_get_throws_index_greater_than_size":
  1032599.345 ±(99.9%) 6873.889 ops/s [Average]
  (min, avg, max) = (991322.652, 1032599.345, 1044763.544), stdev = 10288.514
  CI (99.9%): [1025725.456, 1039473.234] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_get_throws_index_greater_than_size  thrpt   30  1032599.345 ± 6873.889  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_get_throws_index_negative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_get_throws_index_negative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 682293.552 ops/s
# Warmup Iteration   2: 703502.246 ops/s
# Warmup Iteration   3: 921509.234 ops/s
# Warmup Iteration   4: 935204.648 ops/s
# Warmup Iteration   5: 932692.523 ops/s
# Warmup Iteration   6: 937125.710 ops/s
# Warmup Iteration   7: 931818.368 ops/s
# Warmup Iteration   8: 930632.053 ops/s
# Warmup Iteration   9: 936713.836 ops/s
# Warmup Iteration  10: 921272.536 ops/s
# Warmup Iteration  11: 778685.559 ops/s
# Warmup Iteration  12: 936770.794 ops/s
# Warmup Iteration  13: 934346.658 ops/s
# Warmup Iteration  14: 925881.909 ops/s
# Warmup Iteration  15: 935970.331 ops/s
# Warmup Iteration  16: 926783.928 ops/s
# Warmup Iteration  17: 983511.604 ops/s
# Warmup Iteration  18: 970097.640 ops/s
# Warmup Iteration  19: 983536.205 ops/s
# Warmup Iteration  20: 980957.405 ops/s
# Warmup Iteration  21: 969767.307 ops/s
# Warmup Iteration  22: 978863.419 ops/s
# Warmup Iteration  23: 970131.291 ops/s
# Warmup Iteration  24: 982524.944 ops/s
# Warmup Iteration  25: 970942.613 ops/s
# Warmup Iteration  26: 985662.931 ops/s
# Warmup Iteration  27: 974208.604 ops/s
# Warmup Iteration  28: 982096.943 ops/s
# Warmup Iteration  29: 985275.179 ops/s
# Warmup Iteration  30: 982831.952 ops/s
Iteration   1: 980628.162 ops/s
Iteration   2: 976165.846 ops/s
Iteration   3: 950921.409 ops/s
Iteration   4: 961781.510 ops/s
Iteration   5: 953925.021 ops/s
Iteration   6: 984899.488 ops/s
Iteration   7: 986337.578 ops/s
Iteration   8: 979036.917 ops/s
Iteration   9: 972082.263 ops/s
Iteration  10: 964692.266 ops/s
Iteration  11: 987242.708 ops/s
Iteration  12: 980970.538 ops/s
Iteration  13: 958641.994 ops/s
Iteration  14: 977278.275 ops/s
Iteration  15: 981529.264 ops/s
Iteration  16: 976838.204 ops/s
Iteration  17: 977481.797 ops/s
Iteration  18: 974478.504 ops/s
Iteration  19: 980154.731 ops/s
Iteration  20: 983151.642 ops/s
Iteration  21: 988542.024 ops/s
Iteration  22: 976125.088 ops/s
Iteration  23: 976981.550 ops/s
Iteration  24: 982449.751 ops/s
Iteration  25: 984540.177 ops/s
Iteration  26: 987203.626 ops/s
Iteration  27: 978385.099 ops/s
Iteration  28: 978816.401 ops/s
Iteration  29: 947624.774 ops/s
Iteration  30: 973670.722 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_get_throws_index_negative":
  975419.244 ±(99.9%) 7286.146 ops/s [Average]
  (min, avg, max) = (947624.774, 975419.244, 988542.024), stdev = 10905.562
  CI (99.9%): [968133.098, 982705.391] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_get_throws_index_negative  thrpt   30  975419.244 ± 7286.146  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7379449.048 ops/s
# Warmup Iteration   2: 12587666.201 ops/s
# Warmup Iteration   3: 13263109.449 ops/s
# Warmup Iteration   4: 14001632.565 ops/s
# Warmup Iteration   5: 14093927.454 ops/s
# Warmup Iteration   6: 14009997.696 ops/s
# Warmup Iteration   7: 13899054.975 ops/s
# Warmup Iteration   8: 14058031.309 ops/s
# Warmup Iteration   9: 14106792.591 ops/s
# Warmup Iteration  10: 14067385.837 ops/s
# Warmup Iteration  11: 13973239.035 ops/s
# Warmup Iteration  12: 14071373.577 ops/s
# Warmup Iteration  13: 14059964.015 ops/s
# Warmup Iteration  14: 13967126.027 ops/s
# Warmup Iteration  15: 13989970.346 ops/s
# Warmup Iteration  16: 14049872.166 ops/s
# Warmup Iteration  17: 14112621.663 ops/s
# Warmup Iteration  18: 14060031.742 ops/s
# Warmup Iteration  19: 14021526.938 ops/s
# Warmup Iteration  20: 13892191.399 ops/s
# Warmup Iteration  21: 14091398.828 ops/s
# Warmup Iteration  22: 13975204.542 ops/s
# Warmup Iteration  23: 14058283.386 ops/s
# Warmup Iteration  24: 14134125.243 ops/s
# Warmup Iteration  25: 13897457.906 ops/s
# Warmup Iteration  26: 14082528.089 ops/s
# Warmup Iteration  27: 13947159.684 ops/s
# Warmup Iteration  28: 14062685.381 ops/s
# Warmup Iteration  29: 14137028.707 ops/s
# Warmup Iteration  30: 14005280.010 ops/s
Iteration   1: 14088206.831 ops/s
Iteration   2: 14193238.647 ops/s
Iteration   3: 14113002.538 ops/s
Iteration   4: 14140676.152 ops/s
Iteration   5: 13915692.322 ops/s
Iteration   6: 14046402.622 ops/s
Iteration   7: 14066674.991 ops/s
Iteration   8: 14097721.012 ops/s
Iteration   9: 13933467.587 ops/s
Iteration  10: 13915424.410 ops/s
Iteration  11: 14093484.774 ops/s
Iteration  12: 14122072.583 ops/s
Iteration  13: 14138666.487 ops/s
Iteration  14: 14156477.878 ops/s
Iteration  15: 13924612.432 ops/s
Iteration  16: 14046344.653 ops/s
Iteration  17: 14101179.493 ops/s
Iteration  18: 13807666.140 ops/s
Iteration  19: 13788880.107 ops/s
Iteration  20: 13964401.685 ops/s
Iteration  21: 14071651.822 ops/s
Iteration  22: 14107242.393 ops/s
Iteration  23: 14021831.548 ops/s
Iteration  24: 13824437.682 ops/s
Iteration  25: 13961578.455 ops/s
Iteration  26: 14155251.644 ops/s
Iteration  27: 14100832.833 ops/s
Iteration  28: 13994851.049 ops/s
Iteration  29: 13889933.506 ops/s
Iteration  30: 14042399.498 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_indexOf":
  14027476.792 ±(99.9%) 73997.605 ops/s [Average]
  (min, avg, max) = (13788880.107, 14027476.792, 14193238.647), stdev = 110756.140
  CI (99.9%): [13953479.187, 14101474.397] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_indexOf  thrpt   30  14027476.792 ± 73997.605  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8994317.162 ops/s
# Warmup Iteration   2: 18759887.325 ops/s
# Warmup Iteration   3: 15559915.045 ops/s
# Warmup Iteration   4: 18872230.791 ops/s
# Warmup Iteration   5: 19208767.730 ops/s
# Warmup Iteration   6: 19135912.581 ops/s
# Warmup Iteration   7: 19161053.273 ops/s
# Warmup Iteration   8: 19117301.326 ops/s
# Warmup Iteration   9: 18993188.909 ops/s
# Warmup Iteration  10: 18910574.095 ops/s
# Warmup Iteration  11: 19026159.334 ops/s
# Warmup Iteration  12: 19065307.904 ops/s
# Warmup Iteration  13: 19175076.926 ops/s
# Warmup Iteration  14: 18991213.130 ops/s
# Warmup Iteration  15: 18979312.863 ops/s
# Warmup Iteration  16: 19132904.364 ops/s
# Warmup Iteration  17: 19011164.539 ops/s
# Warmup Iteration  18: 19149515.067 ops/s
# Warmup Iteration  19: 18817969.767 ops/s
# Warmup Iteration  20: 18985750.043 ops/s
# Warmup Iteration  21: 19122718.485 ops/s
# Warmup Iteration  22: 19059089.163 ops/s
# Warmup Iteration  23: 19141399.865 ops/s
# Warmup Iteration  24: 19101567.370 ops/s
# Warmup Iteration  25: 19090310.472 ops/s
# Warmup Iteration  26: 18874566.223 ops/s
# Warmup Iteration  27: 19001131.196 ops/s
# Warmup Iteration  28: 19025321.502 ops/s
# Warmup Iteration  29: 19132685.632 ops/s
# Warmup Iteration  30: 19030968.156 ops/s
Iteration   1: 19022985.421 ops/s
Iteration   2: 19158137.289 ops/s
Iteration   3: 18797334.931 ops/s
Iteration   4: 19271796.363 ops/s
Iteration   5: 19181794.521 ops/s
Iteration   6: 19097994.582 ops/s
Iteration   7: 18998505.313 ops/s
Iteration   8: 19078792.938 ops/s
Iteration   9: 19192059.550 ops/s
Iteration  10: 19137059.594 ops/s
Iteration  11: 19138818.254 ops/s
Iteration  12: 18773868.038 ops/s
Iteration  13: 19157046.802 ops/s
Iteration  14: 19173804.062 ops/s
Iteration  15: 19231487.035 ops/s
Iteration  16: 18892372.423 ops/s
Iteration  17: 19138694.036 ops/s
Iteration  18: 18826840.537 ops/s
Iteration  19: 18825419.485 ops/s
Iteration  20: 19156355.695 ops/s
Iteration  21: 19099893.709 ops/s
Iteration  22: 19020675.242 ops/s
Iteration  23: 19083388.323 ops/s
Iteration  24: 19042956.058 ops/s
Iteration  25: 19122032.960 ops/s
Iteration  26: 19117179.859 ops/s
Iteration  27: 19223184.678 ops/s
Iteration  28: 19112494.467 ops/s
Iteration  29: 18989467.293 ops/s
Iteration  30: 19169097.288 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_injectInto":
  19074384.558 ±(99.9%) 88827.571 ops/s [Average]
  (min, avg, max) = (18773868.038, 19074384.558, 19271796.363), stdev = 132952.936
  CI (99.9%): [18985556.988, 19163212.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_injectInto  thrpt   30  19074384.558 ± 88827.571  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_injectIntoWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_injectIntoWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8579449.138 ops/s
# Warmup Iteration   2: 18956946.878 ops/s
# Warmup Iteration   3: 15405196.466 ops/s
# Warmup Iteration   4: 18654226.450 ops/s
# Warmup Iteration   5: 18805585.473 ops/s
# Warmup Iteration   6: 18601523.293 ops/s
# Warmup Iteration   7: 18737341.873 ops/s
# Warmup Iteration   8: 18415121.313 ops/s
# Warmup Iteration   9: 18664116.760 ops/s
# Warmup Iteration  10: 18846495.819 ops/s
# Warmup Iteration  11: 18875244.970 ops/s
# Warmup Iteration  12: 18815266.713 ops/s
# Warmup Iteration  13: 18790731.742 ops/s
# Warmup Iteration  14: 18761454.891 ops/s
# Warmup Iteration  15: 18708991.034 ops/s
# Warmup Iteration  16: 18869417.545 ops/s
# Warmup Iteration  17: 18421773.327 ops/s
# Warmup Iteration  18: 18697591.067 ops/s
# Warmup Iteration  19: 18554613.885 ops/s
# Warmup Iteration  20: 18837138.822 ops/s
# Warmup Iteration  21: 18679092.298 ops/s
# Warmup Iteration  22: 18618639.986 ops/s
# Warmup Iteration  23: 18495775.336 ops/s
# Warmup Iteration  24: 18741227.643 ops/s
# Warmup Iteration  25: 18757769.690 ops/s
# Warmup Iteration  26: 18595576.691 ops/s
# Warmup Iteration  27: 18844486.768 ops/s
# Warmup Iteration  28: 18876448.865 ops/s
# Warmup Iteration  29: 18781917.670 ops/s
# Warmup Iteration  30: 18563571.530 ops/s
Iteration   1: 18387118.454 ops/s
Iteration   2: 18795336.371 ops/s
Iteration   3: 18770816.847 ops/s
Iteration   4: 18763162.096 ops/s
Iteration   5: 18872439.691 ops/s
Iteration   6: 18796916.462 ops/s
Iteration   7: 18747389.972 ops/s
Iteration   8: 18602303.250 ops/s
Iteration   9: 18930014.264 ops/s
Iteration  10: 18674329.643 ops/s
Iteration  11: 18761250.700 ops/s
Iteration  12: 18588161.845 ops/s
Iteration  13: 18432558.440 ops/s
Iteration  14: 18835185.411 ops/s
Iteration  15: 18873496.650 ops/s
Iteration  16: 18541727.702 ops/s
Iteration  17: 18819721.983 ops/s
Iteration  18: 18241179.680 ops/s
Iteration  19: 18774042.344 ops/s
Iteration  20: 18575536.680 ops/s
Iteration  21: 18777500.891 ops/s
Iteration  22: 18692476.088 ops/s
Iteration  23: 18786895.598 ops/s
Iteration  24: 18811270.678 ops/s
Iteration  25: 18744920.550 ops/s
Iteration  26: 18834969.886 ops/s
Iteration  27: 18773112.226 ops/s
Iteration  28: 18778979.216 ops/s
Iteration  29: 18817232.874 ops/s
Iteration  30: 18938032.798 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_injectIntoWithIndex":
  18724602.643 ±(99.9%) 106549.286 ops/s [Average]
  (min, avg, max) = (18241179.680, 18724602.643, 18938032.798), stdev = 159477.968
  CI (99.9%): [18618053.357, 18831151.929] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score        Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_injectIntoWithIndex  thrpt   30  18724602.643 ± 106549.286  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1815730.856 ops/s
# Warmup Iteration   2: 2963888.328 ops/s
# Warmup Iteration   3: 3461311.204 ops/s
# Warmup Iteration   4: 3444444.828 ops/s
# Warmup Iteration   5: 3433854.277 ops/s
# Warmup Iteration   6: 3484373.465 ops/s
# Warmup Iteration   7: 3454374.480 ops/s
# Warmup Iteration   8: 3470306.238 ops/s
# Warmup Iteration   9: 3475490.873 ops/s
# Warmup Iteration  10: 3465255.540 ops/s
# Warmup Iteration  11: 3481862.231 ops/s
# Warmup Iteration  12: 3480099.821 ops/s
# Warmup Iteration  13: 3483715.796 ops/s
# Warmup Iteration  14: 3474862.982 ops/s
# Warmup Iteration  15: 3467300.173 ops/s
# Warmup Iteration  16: 3466230.112 ops/s
# Warmup Iteration  17: 3425134.568 ops/s
# Warmup Iteration  18: 3444787.499 ops/s
# Warmup Iteration  19: 3466327.515 ops/s
# Warmup Iteration  20: 3405214.371 ops/s
# Warmup Iteration  21: 3478051.519 ops/s
# Warmup Iteration  22: 3478333.927 ops/s
# Warmup Iteration  23: 3441982.089 ops/s
# Warmup Iteration  24: 3485362.265 ops/s
# Warmup Iteration  25: 3385597.808 ops/s
# Warmup Iteration  26: 3472002.450 ops/s
# Warmup Iteration  27: 3500645.281 ops/s
# Warmup Iteration  28: 3411034.751 ops/s
# Warmup Iteration  29: 3471187.278 ops/s
# Warmup Iteration  30: 3442171.837 ops/s
Iteration   1: 3491759.894 ops/s
Iteration   2: 3440061.849 ops/s
Iteration   3: 3486671.613 ops/s
Iteration   4: 3412535.157 ops/s
Iteration   5: 3488514.839 ops/s
Iteration   6: 3418912.983 ops/s
Iteration   7: 3496909.648 ops/s
Iteration   8: 3501732.560 ops/s
Iteration   9: 3495671.926 ops/s
Iteration  10: 3497676.599 ops/s
Iteration  11: 3496494.678 ops/s
Iteration  12: 3463329.266 ops/s
Iteration  13: 3502733.637 ops/s
Iteration  14: 3468754.684 ops/s
Iteration  15: 3458991.212 ops/s
Iteration  16: 3400706.348 ops/s
Iteration  17: 3380307.373 ops/s
Iteration  18: 3474715.155 ops/s
Iteration  19: 3419146.932 ops/s
Iteration  20: 3450010.974 ops/s
Iteration  21: 3435967.988 ops/s
Iteration  22: 3495891.004 ops/s
Iteration  23: 3490160.350 ops/s
Iteration  24: 3495830.586 ops/s
Iteration  25: 3461655.730 ops/s
Iteration  26: 3470300.116 ops/s
Iteration  27: 3442812.861 ops/s
Iteration  28: 3471146.436 ops/s
Iteration  29: 3482302.790 ops/s
Iteration  30: 3492462.641 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_isEmpty":
  3466138.928 ±(99.9%) 22460.541 ops/s [Average]
  (min, avg, max) = (3380307.373, 3466138.928, 3502733.637), stdev = 33617.882
  CI (99.9%): [3443678.387, 3488599.468] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_isEmpty  thrpt   30  3466138.928 ± 22460.541  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 724673.183 ops/s
# Warmup Iteration   2: 749844.750 ops/s
# Warmup Iteration   3: 997832.570 ops/s
# Warmup Iteration   4: 998018.117 ops/s
# Warmup Iteration   5: 1002256.248 ops/s
# Warmup Iteration   6: 1010003.948 ops/s
# Warmup Iteration   7: 993211.332 ops/s
# Warmup Iteration   8: 1001840.919 ops/s
# Warmup Iteration   9: 998521.862 ops/s
# Warmup Iteration  10: 999348.478 ops/s
# Warmup Iteration  11: 817417.993 ops/s
# Warmup Iteration  12: 1005849.655 ops/s
# Warmup Iteration  13: 1002595.522 ops/s
# Warmup Iteration  14: 1013176.128 ops/s
# Warmup Iteration  15: 1008743.567 ops/s
# Warmup Iteration  16: 1005694.677 ops/s
# Warmup Iteration  17: 1074986.107 ops/s
# Warmup Iteration  18: 1068106.864 ops/s
# Warmup Iteration  19: 1062458.489 ops/s
# Warmup Iteration  20: 1071502.044 ops/s
# Warmup Iteration  21: 1065779.886 ops/s
# Warmup Iteration  22: 1074275.162 ops/s
# Warmup Iteration  23: 1063541.833 ops/s
# Warmup Iteration  24: 1069549.363 ops/s
# Warmup Iteration  25: 1070807.215 ops/s
# Warmup Iteration  26: 1072159.643 ops/s
# Warmup Iteration  27: 1062835.964 ops/s
# Warmup Iteration  28: 1057092.010 ops/s
# Warmup Iteration  29: 1058203.670 ops/s
# Warmup Iteration  30: 1067347.062 ops/s
Iteration   1: 1053893.455 ops/s
Iteration   2: 1067280.022 ops/s
Iteration   3: 1065970.181 ops/s
Iteration   4: 1053324.472 ops/s
Iteration   5: 1047358.082 ops/s
Iteration   6: 1064292.841 ops/s
Iteration   7: 1065580.955 ops/s
Iteration   8: 1068096.033 ops/s
Iteration   9: 1071923.591 ops/s
Iteration  10: 1027330.665 ops/s
Iteration  11: 1047338.681 ops/s
Iteration  12: 1067481.904 ops/s
Iteration  13: 1054658.307 ops/s
Iteration  14: 1060715.352 ops/s
Iteration  15: 1067599.326 ops/s
Iteration  16: 1065310.252 ops/s
Iteration  17: 1052078.152 ops/s
Iteration  18: 1058243.555 ops/s
Iteration  19: 1060670.438 ops/s
Iteration  20: 1053854.195 ops/s
Iteration  21: 1038091.477 ops/s
Iteration  22: 1028914.931 ops/s
Iteration  23: 1071078.175 ops/s
Iteration  24: 1072191.832 ops/s
Iteration  25: 1070109.834 ops/s
Iteration  26: 1050354.593 ops/s
Iteration  27: 1069884.379 ops/s
Iteration  28: 1075456.621 ops/s
Iteration  29: 1051286.799 ops/s
Iteration  30: 1045374.299 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_iterator_throws":
  1058191.447 ±(99.9%) 8351.569 ops/s [Average]
  (min, avg, max) = (1027330.665, 1058191.447, 1075456.621), stdev = 12500.237
  CI (99.9%): [1049839.877, 1066543.016] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_iterator_throws  thrpt   30  1058191.447 ± 8351.569  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 727540.867 ops/s
# Warmup Iteration   2: 726778.617 ops/s
# Warmup Iteration   3: 996421.970 ops/s
# Warmup Iteration   4: 988395.711 ops/s
# Warmup Iteration   5: 993854.016 ops/s
# Warmup Iteration   6: 980031.264 ops/s
# Warmup Iteration   7: 996590.327 ops/s
# Warmup Iteration   8: 979991.055 ops/s
# Warmup Iteration   9: 989777.300 ops/s
# Warmup Iteration  10: 989950.775 ops/s
# Warmup Iteration  11: 920565.226 ops/s
# Warmup Iteration  12: 877228.262 ops/s
# Warmup Iteration  13: 985839.258 ops/s
# Warmup Iteration  14: 980964.034 ops/s
# Warmup Iteration  15: 983028.718 ops/s
# Warmup Iteration  16: 982425.095 ops/s
# Warmup Iteration  17: 1047213.442 ops/s
# Warmup Iteration  18: 1053263.794 ops/s
# Warmup Iteration  19: 1032369.481 ops/s
# Warmup Iteration  20: 1046344.788 ops/s
# Warmup Iteration  21: 1055322.310 ops/s
# Warmup Iteration  22: 1056512.817 ops/s
# Warmup Iteration  23: 1050845.227 ops/s
# Warmup Iteration  24: 1044655.282 ops/s
# Warmup Iteration  25: 1050848.727 ops/s
# Warmup Iteration  26: 1046602.887 ops/s
# Warmup Iteration  27: 1051686.140 ops/s
# Warmup Iteration  28: 1049423.471 ops/s
# Warmup Iteration  29: 1054242.198 ops/s
# Warmup Iteration  30: 1036538.737 ops/s
Iteration   1: 1052038.368 ops/s
Iteration   2: 1045806.319 ops/s
Iteration   3: 1053472.296 ops/s
Iteration   4: 1052254.402 ops/s
Iteration   5: 1050478.403 ops/s
Iteration   6: 1059713.030 ops/s
Iteration   7: 1039997.825 ops/s
Iteration   8: 1053557.261 ops/s
Iteration   9: 1059903.231 ops/s
Iteration  10: 1040388.677 ops/s
Iteration  11: 1029200.250 ops/s
Iteration  12: 1049044.730 ops/s
Iteration  13: 1043475.585 ops/s
Iteration  14: 1054467.361 ops/s
Iteration  15: 1050404.594 ops/s
Iteration  16: 1029083.556 ops/s
Iteration  17: 1040157.892 ops/s
Iteration  18: 1051661.112 ops/s
Iteration  19: 1037306.743 ops/s
Iteration  20: 1044313.428 ops/s
Iteration  21: 1058421.043 ops/s
Iteration  22: 1052519.302 ops/s
Iteration  23: 1049390.378 ops/s
Iteration  24: 1059405.890 ops/s
Iteration  25: 1019200.181 ops/s
Iteration  26: 1052424.538 ops/s
Iteration  27: 1040814.027 ops/s
Iteration  28: 1050578.664 ops/s
Iteration  29: 1042511.478 ops/s
Iteration  30: 1048721.031 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_iterator_throws_emptyList":
  1047023.720 ±(99.9%) 6399.549 ops/s [Average]
  (min, avg, max) = (1019200.181, 1047023.720, 1059903.231), stdev = 9578.544
  CI (99.9%): [1040624.171, 1053423.269] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1047023.720 ± 6399.549  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 661189.619 ops/s
# Warmup Iteration   2: 669688.594 ops/s
# Warmup Iteration   3: 852522.346 ops/s
# Warmup Iteration   4: 881437.562 ops/s
# Warmup Iteration   5: 864288.107 ops/s
# Warmup Iteration   6: 876638.693 ops/s
# Warmup Iteration   7: 876642.345 ops/s
# Warmup Iteration   8: 866255.776 ops/s
# Warmup Iteration   9: 878627.524 ops/s
# Warmup Iteration  10: 874282.879 ops/s
# Warmup Iteration  11: 872865.948 ops/s
# Warmup Iteration  12: 781811.978 ops/s
# Warmup Iteration  13: 824651.995 ops/s
# Warmup Iteration  14: 875300.510 ops/s
# Warmup Iteration  15: 848947.370 ops/s
# Warmup Iteration  16: 876925.558 ops/s
# Warmup Iteration  17: 929090.517 ops/s
# Warmup Iteration  18: 915521.673 ops/s
# Warmup Iteration  19: 930233.259 ops/s
# Warmup Iteration  20: 927760.342 ops/s
# Warmup Iteration  21: 925609.551 ops/s
# Warmup Iteration  22: 928308.900 ops/s
# Warmup Iteration  23: 927775.338 ops/s
# Warmup Iteration  24: 916158.151 ops/s
# Warmup Iteration  25: 924847.903 ops/s
# Warmup Iteration  26: 924650.873 ops/s
# Warmup Iteration  27: 930670.474 ops/s
# Warmup Iteration  28: 927510.013 ops/s
# Warmup Iteration  29: 932782.705 ops/s
# Warmup Iteration  30: 935906.870 ops/s
Iteration   1: 927521.032 ops/s
Iteration   2: 921868.040 ops/s
Iteration   3: 923239.895 ops/s
Iteration   4: 932021.810 ops/s
Iteration   5: 932002.858 ops/s
Iteration   6: 919533.601 ops/s
Iteration   7: 928343.682 ops/s
Iteration   8: 922848.539 ops/s
Iteration   9: 932715.873 ops/s
Iteration  10: 929197.617 ops/s
Iteration  11: 925253.208 ops/s
Iteration  12: 926319.516 ops/s
Iteration  13: 931558.845 ops/s
Iteration  14: 906492.642 ops/s
Iteration  15: 937189.681 ops/s
Iteration  16: 933394.403 ops/s
Iteration  17: 933058.395 ops/s
Iteration  18: 917489.241 ops/s
Iteration  19: 932929.301 ops/s
Iteration  20: 913607.081 ops/s
Iteration  21: 918502.606 ops/s
Iteration  22: 916689.869 ops/s
Iteration  23: 927726.827 ops/s
Iteration  24: 928934.225 ops/s
Iteration  25: 933660.792 ops/s
Iteration  26: 929992.522 ops/s
Iteration  27: 921993.938 ops/s
Iteration  28: 930434.490 ops/s
Iteration  29: 925651.002 ops/s
Iteration  30: 931652.090 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  926394.121 ±(99.9%) 4675.038 ops/s [Average]
  (min, avg, max) = (906492.642, 926394.121, 937189.681), stdev = 6997.378
  CI (99.9%): [921719.083, 931069.159] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  926394.121 ± 4675.038  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20881277.364 ops/s
# Warmup Iteration   2: 37885111.276 ops/s
# Warmup Iteration   3: 35441585.378 ops/s
# Warmup Iteration   4: 39984668.802 ops/s
# Warmup Iteration   5: 40075724.612 ops/s
# Warmup Iteration   6: 39711776.823 ops/s
# Warmup Iteration   7: 39781838.138 ops/s
# Warmup Iteration   8: 39789781.012 ops/s
# Warmup Iteration   9: 39886560.678 ops/s
# Warmup Iteration  10: 39791152.256 ops/s
# Warmup Iteration  11: 39270379.567 ops/s
# Warmup Iteration  12: 39912100.498 ops/s
# Warmup Iteration  13: 39711704.862 ops/s
# Warmup Iteration  14: 40059117.105 ops/s
# Warmup Iteration  15: 40068859.673 ops/s
# Warmup Iteration  16: 39666952.211 ops/s
# Warmup Iteration  17: 39530586.189 ops/s
# Warmup Iteration  18: 39701158.438 ops/s
# Warmup Iteration  19: 39433384.017 ops/s
# Warmup Iteration  20: 39303664.470 ops/s
# Warmup Iteration  21: 39536469.999 ops/s
# Warmup Iteration  22: 39815655.341 ops/s
# Warmup Iteration  23: 39676485.642 ops/s
# Warmup Iteration  24: 39655906.224 ops/s
# Warmup Iteration  25: 39439634.694 ops/s
# Warmup Iteration  26: 39759802.300 ops/s
# Warmup Iteration  27: 40014185.927 ops/s
# Warmup Iteration  28: 39770422.341 ops/s
# Warmup Iteration  29: 40053517.159 ops/s
# Warmup Iteration  30: 39922990.967 ops/s
Iteration   1: 39275368.165 ops/s
Iteration   2: 39803346.537 ops/s
Iteration   3: 40068775.475 ops/s
Iteration   4: 39848994.581 ops/s
Iteration   5: 40128999.229 ops/s
Iteration   6: 40169312.436 ops/s
Iteration   7: 39730944.323 ops/s
Iteration   8: 39553802.894 ops/s
Iteration   9: 39855637.302 ops/s
Iteration  10: 39611739.853 ops/s
Iteration  11: 40196788.646 ops/s
Iteration  12: 40061539.184 ops/s
Iteration  13: 39450131.863 ops/s
Iteration  14: 39390194.352 ops/s
Iteration  15: 39966741.313 ops/s
Iteration  16: 39944845.549 ops/s
Iteration  17: 39463437.759 ops/s
Iteration  18: 40152846.193 ops/s
Iteration  19: 39312209.125 ops/s
Iteration  20: 39954083.952 ops/s
Iteration  21: 40071927.566 ops/s
Iteration  22: 40041401.719 ops/s
Iteration  23: 39731935.232 ops/s
Iteration  24: 40016839.533 ops/s
Iteration  25: 40110758.797 ops/s
Iteration  26: 39259503.999 ops/s
Iteration  27: 39707011.232 ops/s
Iteration  28: 39864043.068 ops/s
Iteration  29: 40070237.593 ops/s
Iteration  30: 39695001.480 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  39816946.632 ±(99.9%) 193145.550 ops/s [Average]
  (min, avg, max) = (39259503.999, 39816946.632, 40196788.646), stdev = 289091.189
  CI (99.9%): [39623801.081, 40010092.182] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                              Mode  Cnt         Score        Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  39816946.632 ± 193145.550  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 659250.720 ops/s
# Warmup Iteration   2: 761566.358 ops/s
# Warmup Iteration   3: 977772.150 ops/s
# Warmup Iteration   4: 975493.640 ops/s
# Warmup Iteration   5: 960162.520 ops/s
# Warmup Iteration   6: 976230.103 ops/s
# Warmup Iteration   7: 975316.717 ops/s
# Warmup Iteration   8: 969663.260 ops/s
# Warmup Iteration   9: 904839.144 ops/s
# Warmup Iteration  10: 879184.205 ops/s
# Warmup Iteration  11: 973021.843 ops/s
# Warmup Iteration  12: 965864.820 ops/s
# Warmup Iteration  13: 966798.791 ops/s
# Warmup Iteration  14: 978960.040 ops/s
# Warmup Iteration  15: 967111.051 ops/s
# Warmup Iteration  16: 973537.949 ops/s
# Warmup Iteration  17: 1039012.133 ops/s
# Warmup Iteration  18: 1032159.481 ops/s
# Warmup Iteration  19: 1027950.942 ops/s
# Warmup Iteration  20: 1022127.362 ops/s
# Warmup Iteration  21: 1025548.654 ops/s
# Warmup Iteration  22: 1017909.062 ops/s
# Warmup Iteration  23: 1026070.180 ops/s
# Warmup Iteration  24: 1019140.848 ops/s
# Warmup Iteration  25: 1032634.080 ops/s
# Warmup Iteration  26: 1036495.903 ops/s
# Warmup Iteration  27: 1032969.941 ops/s
# Warmup Iteration  28: 1024772.385 ops/s
# Warmup Iteration  29: 1031224.525 ops/s
# Warmup Iteration  30: 1022437.959 ops/s
Iteration   1: 1030107.295 ops/s
Iteration   2: 1030043.837 ops/s
Iteration   3: 1030335.848 ops/s
Iteration   4: 1033330.963 ops/s
Iteration   5: 1019018.344 ops/s
Iteration   6: 1030160.877 ops/s
Iteration   7: 1010414.597 ops/s
Iteration   8: 1034145.557 ops/s
Iteration   9: 1033532.867 ops/s
Iteration  10: 1027419.334 ops/s
Iteration  11: 1027243.330 ops/s
Iteration  12: 1024948.709 ops/s
Iteration  13: 1041193.290 ops/s
Iteration  14: 1020547.731 ops/s
Iteration  15: 1019945.550 ops/s
Iteration  16: 1030029.638 ops/s
Iteration  17: 1035839.367 ops/s
Iteration  18: 1032913.629 ops/s
Iteration  19: 1042015.786 ops/s
Iteration  20: 1036747.930 ops/s
Iteration  21: 1035094.412 ops/s
Iteration  22: 1029289.704 ops/s
Iteration  23: 1039101.886 ops/s
Iteration  24: 1032896.630 ops/s
Iteration  25: 1032798.128 ops/s
Iteration  26: 1014408.487 ops/s
Iteration  27: 1014731.026 ops/s
Iteration  28: 1039030.487 ops/s
Iteration  29: 1034648.106 ops/s
Iteration  30: 998282.048 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1028673.846 ±(99.9%) 6554.701 ops/s [Average]
  (min, avg, max) = (998282.048, 1028673.846, 1042015.786), stdev = 9810.768
  CI (99.9%): [1022119.146, 1035228.547] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                              Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1028673.846 ± 6554.701  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7293503.329 ops/s
# Warmup Iteration   2: 12514540.502 ops/s
# Warmup Iteration   3: 12935211.208 ops/s
# Warmup Iteration   4: 13776632.516 ops/s
# Warmup Iteration   5: 13890897.563 ops/s
# Warmup Iteration   6: 13852596.346 ops/s
# Warmup Iteration   7: 13974083.927 ops/s
# Warmup Iteration   8: 13957339.032 ops/s
# Warmup Iteration   9: 13765500.585 ops/s
# Warmup Iteration  10: 14025606.524 ops/s
# Warmup Iteration  11: 13997461.420 ops/s
# Warmup Iteration  12: 13973000.931 ops/s
# Warmup Iteration  13: 14017964.057 ops/s
# Warmup Iteration  14: 13893775.241 ops/s
# Warmup Iteration  15: 13793764.435 ops/s
# Warmup Iteration  16: 14021873.167 ops/s
# Warmup Iteration  17: 13978716.602 ops/s
# Warmup Iteration  18: 13947934.767 ops/s
# Warmup Iteration  19: 13927394.590 ops/s
# Warmup Iteration  20: 13852852.474 ops/s
# Warmup Iteration  21: 13902548.850 ops/s
# Warmup Iteration  22: 13923190.916 ops/s
# Warmup Iteration  23: 14006942.445 ops/s
# Warmup Iteration  24: 13933534.085 ops/s
# Warmup Iteration  25: 13879007.663 ops/s
# Warmup Iteration  26: 13876142.826 ops/s
# Warmup Iteration  27: 13962705.620 ops/s
# Warmup Iteration  28: 13849128.554 ops/s
# Warmup Iteration  29: 13921921.907 ops/s
# Warmup Iteration  30: 13691086.207 ops/s
Iteration   1: 14052123.022 ops/s
Iteration   2: 14077151.388 ops/s
Iteration   3: 13931158.410 ops/s
Iteration   4: 13889310.754 ops/s
Iteration   5: 14023181.721 ops/s
Iteration   6: 13928161.984 ops/s
Iteration   7: 13787502.831 ops/s
Iteration   8: 13939485.854 ops/s
Iteration   9: 13881937.023 ops/s
Iteration  10: 14023096.571 ops/s
Iteration  11: 13933657.404 ops/s
Iteration  12: 13969390.799 ops/s
Iteration  13: 13829503.770 ops/s
Iteration  14: 13843731.855 ops/s
Iteration  15: 13976767.181 ops/s
Iteration  16: 13978585.049 ops/s
Iteration  17: 14072712.204 ops/s
Iteration  18: 13953363.090 ops/s
Iteration  19: 13681264.316 ops/s
Iteration  20: 13997157.141 ops/s
Iteration  21: 14026826.125 ops/s
Iteration  22: 13972779.944 ops/s
Iteration  23: 13796446.721 ops/s
Iteration  24: 13905602.693 ops/s
Iteration  25: 13921350.346 ops/s
Iteration  26: 13752482.167 ops/s
Iteration  27: 13525389.909 ops/s
Iteration  28: 13994865.001 ops/s
Iteration  29: 13920507.550 ops/s
Iteration  30: 14024903.410 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_lastIndexOf":
  13920346.541 ±(99.9%) 80849.569 ops/s [Average]
  (min, avg, max) = (13525389.909, 13920346.541, 14077151.388), stdev = 121011.838
  CI (99.9%): [13839496.972, 14001196.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_lastIndexOf  thrpt   30  13920346.541 ± 80849.569  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 506257.198 ops/s
# Warmup Iteration   2: 1107804.975 ops/s
# Warmup Iteration   3: 1040335.120 ops/s
# Warmup Iteration   4: 988857.562 ops/s
# Warmup Iteration   5: 1107760.006 ops/s
# Warmup Iteration   6: 1100494.865 ops/s
# Warmup Iteration   7: 1111376.619 ops/s
# Warmup Iteration   8: 1113317.276 ops/s
# Warmup Iteration   9: 1123276.741 ops/s
# Warmup Iteration  10: 1115744.003 ops/s
# Warmup Iteration  11: 1117040.021 ops/s
# Warmup Iteration  12: 1126367.209 ops/s
# Warmup Iteration  13: 1116092.618 ops/s
# Warmup Iteration  14: 1107903.689 ops/s
# Warmup Iteration  15: 1123266.386 ops/s
# Warmup Iteration  16: 1115923.344 ops/s
# Warmup Iteration  17: 1126554.483 ops/s
# Warmup Iteration  18: 1113571.669 ops/s
# Warmup Iteration  19: 1112806.216 ops/s
# Warmup Iteration  20: 1109467.650 ops/s
# Warmup Iteration  21: 1109339.031 ops/s
# Warmup Iteration  22: 1108372.579 ops/s
# Warmup Iteration  23: 1106024.524 ops/s
# Warmup Iteration  24: 1110988.403 ops/s
# Warmup Iteration  25: 1119809.687 ops/s
# Warmup Iteration  26: 1102595.127 ops/s
# Warmup Iteration  27: 1118672.593 ops/s
# Warmup Iteration  28: 1112003.100 ops/s
# Warmup Iteration  29: 1113964.760 ops/s
# Warmup Iteration  30: 1113167.316 ops/s
Iteration   1: 1122669.820 ops/s
Iteration   2: 1101965.696 ops/s
Iteration   3: 1109881.977 ops/s
Iteration   4: 1119332.462 ops/s
Iteration   5: 1114417.317 ops/s
Iteration   6: 1109261.944 ops/s
Iteration   7: 1115294.360 ops/s
Iteration   8: 1086066.150 ops/s
Iteration   9: 1119793.200 ops/s
Iteration  10: 1109804.930 ops/s
Iteration  11: 1119074.407 ops/s
Iteration  12: 1116383.522 ops/s
Iteration  13: 1119145.675 ops/s
Iteration  14: 1115003.177 ops/s
Iteration  15: 1101644.837 ops/s
Iteration  16: 1114671.594 ops/s
Iteration  17: 1099326.126 ops/s
Iteration  18: 1116326.996 ops/s
Iteration  19: 1120557.656 ops/s
Iteration  20: 1105365.940 ops/s
Iteration  21: 1106243.798 ops/s
Iteration  22: 1112630.338 ops/s
Iteration  23: 1121357.350 ops/s
Iteration  24: 1126894.808 ops/s
Iteration  25: 1111510.127 ops/s
Iteration  26: 1119933.610 ops/s
Iteration  27: 1131823.693 ops/s
Iteration  28: 1122170.281 ops/s
Iteration  29: 1096237.717 ops/s
Iteration  30: 1115230.179 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_makeString":
  1113333.989 ±(99.9%) 6426.826 ops/s [Average]
  (min, avg, max) = (1086066.150, 1113333.989, 1131823.693), stdev = 9619.371
  CI (99.9%): [1106907.164, 1119760.815] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_makeString  thrpt   30  1113333.989 ± 6426.826  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7048127.346 ops/s
# Warmup Iteration   2: 12079015.313 ops/s
# Warmup Iteration   3: 12609385.830 ops/s
# Warmup Iteration   4: 13475286.525 ops/s
# Warmup Iteration   5: 13476889.093 ops/s
# Warmup Iteration   6: 13167543.988 ops/s
# Warmup Iteration   7: 13441810.823 ops/s
# Warmup Iteration   8: 13518723.241 ops/s
# Warmup Iteration   9: 13156378.428 ops/s
# Warmup Iteration  10: 13397542.708 ops/s
# Warmup Iteration  11: 13418298.781 ops/s
# Warmup Iteration  12: 13235496.780 ops/s
# Warmup Iteration  13: 13406616.678 ops/s
# Warmup Iteration  14: 13388510.097 ops/s
# Warmup Iteration  15: 13379385.618 ops/s
# Warmup Iteration  16: 13473132.551 ops/s
# Warmup Iteration  17: 13372225.089 ops/s
# Warmup Iteration  18: 13332072.100 ops/s
# Warmup Iteration  19: 13472735.197 ops/s
# Warmup Iteration  20: 13281225.057 ops/s
# Warmup Iteration  21: 13529952.298 ops/s
# Warmup Iteration  22: 13279498.872 ops/s
# Warmup Iteration  23: 13474717.441 ops/s
# Warmup Iteration  24: 13400635.699 ops/s
# Warmup Iteration  25: 13376132.668 ops/s
# Warmup Iteration  26: 13276963.646 ops/s
# Warmup Iteration  27: 13444220.966 ops/s
# Warmup Iteration  28: 13374467.679 ops/s
# Warmup Iteration  29: 13398474.884 ops/s
# Warmup Iteration  30: 13382591.302 ops/s
Iteration   1: 13241410.451 ops/s
Iteration   2: 13466499.998 ops/s
Iteration   3: 13293293.414 ops/s
Iteration   4: 13312683.074 ops/s
Iteration   5: 13384286.468 ops/s
Iteration   6: 13345972.323 ops/s
Iteration   7: 13176298.545 ops/s
Iteration   8: 13454879.217 ops/s
Iteration   9: 13389694.334 ops/s
Iteration  10: 13209648.287 ops/s
Iteration  11: 13351214.500 ops/s
Iteration  12: 13195906.275 ops/s
Iteration  13: 13507582.439 ops/s
Iteration  14: 13299431.491 ops/s
Iteration  15: 13359374.212 ops/s
Iteration  16: 13132952.384 ops/s
Iteration  17: 13336692.393 ops/s
Iteration  18: 13361929.816 ops/s
Iteration  19: 13335448.534 ops/s
Iteration  20: 13123558.063 ops/s
Iteration  21: 13524500.892 ops/s
Iteration  22: 13325434.008 ops/s
Iteration  23: 13484662.938 ops/s
Iteration  24: 13267884.206 ops/s
Iteration  25: 13383268.787 ops/s
Iteration  26: 13418306.196 ops/s
Iteration  27: 13498832.878 ops/s
Iteration  28: 13401251.365 ops/s
Iteration  29: 13438832.662 ops/s
Iteration  30: 13402596.598 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_newCollection":
  13347477.558 ±(99.9%) 72416.271 ops/s [Average]
  (min, avg, max) = (13123558.063, 13347477.558, 13524500.892), stdev = 108389.274
  CI (99.9%): [13275061.287, 13419893.829] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_newCollection  thrpt   30  13347477.558 ± 72416.271  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4205628.161 ops/s
# Warmup Iteration   2: 7050830.845 ops/s
# Warmup Iteration   3: 8565100.838 ops/s
# Warmup Iteration   4: 8546219.811 ops/s
# Warmup Iteration   5: 8548558.798 ops/s
# Warmup Iteration   6: 8556622.363 ops/s
# Warmup Iteration   7: 8516323.729 ops/s
# Warmup Iteration   8: 8451437.276 ops/s
# Warmup Iteration   9: 8523102.945 ops/s
# Warmup Iteration  10: 8493072.581 ops/s
# Warmup Iteration  11: 8526228.948 ops/s
# Warmup Iteration  12: 8525003.746 ops/s
# Warmup Iteration  13: 8410216.395 ops/s
# Warmup Iteration  14: 8536046.339 ops/s
# Warmup Iteration  15: 8546388.437 ops/s
# Warmup Iteration  16: 8427512.918 ops/s
# Warmup Iteration  17: 8509013.672 ops/s
# Warmup Iteration  18: 8562346.434 ops/s
# Warmup Iteration  19: 8467197.002 ops/s
# Warmup Iteration  20: 8591139.470 ops/s
# Warmup Iteration  21: 8541513.966 ops/s
# Warmup Iteration  22: 8543451.182 ops/s
# Warmup Iteration  23: 8466339.927 ops/s
# Warmup Iteration  24: 8470345.822 ops/s
# Warmup Iteration  25: 8497547.909 ops/s
# Warmup Iteration  26: 8468000.526 ops/s
# Warmup Iteration  27: 8559670.555 ops/s
# Warmup Iteration  28: 8487693.301 ops/s
# Warmup Iteration  29: 8537348.343 ops/s
# Warmup Iteration  30: 8375023.563 ops/s
Iteration   1: 8485397.513 ops/s
Iteration   2: 8453767.851 ops/s
Iteration   3: 8489715.274 ops/s
Iteration   4: 8475590.661 ops/s
Iteration   5: 8405181.279 ops/s
Iteration   6: 8477373.778 ops/s
Iteration   7: 8478451.873 ops/s
Iteration   8: 8525101.284 ops/s
Iteration   9: 8410860.814 ops/s
Iteration  10: 8366383.855 ops/s
Iteration  11: 8461797.445 ops/s
Iteration  12: 8481261.854 ops/s
Iteration  13: 8491515.195 ops/s
Iteration  14: 8539409.192 ops/s
Iteration  15: 8512043.195 ops/s
Iteration  16: 8476562.122 ops/s
Iteration  17: 8520565.912 ops/s
Iteration  18: 8376632.357 ops/s
Iteration  19: 8463045.944 ops/s
Iteration  20: 8457101.306 ops/s
Iteration  21: 8353664.556 ops/s
Iteration  22: 8510492.610 ops/s
Iteration  23: 8415236.519 ops/s
Iteration  24: 8488606.122 ops/s
Iteration  25: 8436685.683 ops/s
Iteration  26: 8393333.139 ops/s
Iteration  27: 8376882.635 ops/s
Iteration  28: 8497489.045 ops/s
Iteration  29: 8533818.297 ops/s
Iteration  30: 8456022.411 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_newCollectionWith":
  8460332.991 ±(99.9%) 34580.619 ops/s [Average]
  (min, avg, max) = (8353664.556, 8460332.991, 8539409.192), stdev = 51758.646
  CI (99.9%): [8425752.372, 8494913.609] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_newCollectionWith  thrpt   30  8460332.991 ± 34580.619  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_newWithNValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_newWithNValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5141619.745 ops/s
# Warmup Iteration   2: 9021167.929 ops/s
# Warmup Iteration   3: 9889632.549 ops/s
# Warmup Iteration   4: 10185683.073 ops/s
# Warmup Iteration   5: 10235168.569 ops/s
# Warmup Iteration   6: 10188696.001 ops/s
# Warmup Iteration   7: 10255796.787 ops/s
# Warmup Iteration   8: 10250326.172 ops/s
# Warmup Iteration   9: 10251523.860 ops/s
# Warmup Iteration  10: 10194417.248 ops/s
# Warmup Iteration  11: 10256763.812 ops/s
# Warmup Iteration  12: 10219466.202 ops/s
# Warmup Iteration  13: 10127157.546 ops/s
# Warmup Iteration  14: 10243072.108 ops/s
# Warmup Iteration  15: 10235865.075 ops/s
# Warmup Iteration  16: 10304046.358 ops/s
# Warmup Iteration  17: 10312443.956 ops/s
# Warmup Iteration  18: 10318372.964 ops/s
# Warmup Iteration  19: 10165622.820 ops/s
# Warmup Iteration  20: 10229695.037 ops/s
# Warmup Iteration  21: 10288588.448 ops/s
# Warmup Iteration  22: 10282224.274 ops/s
# Warmup Iteration  23: 10220012.251 ops/s
# Warmup Iteration  24: 10276745.571 ops/s
# Warmup Iteration  25: 10300586.947 ops/s
# Warmup Iteration  26: 10300599.696 ops/s
# Warmup Iteration  27: 10276625.508 ops/s
# Warmup Iteration  28: 10397483.253 ops/s
# Warmup Iteration  29: 10295515.956 ops/s
# Warmup Iteration  30: 10352476.858 ops/s
Iteration   1: 10322490.766 ops/s
Iteration   2: 10244563.420 ops/s
Iteration   3: 10286899.324 ops/s
Iteration   4: 10342219.056 ops/s
Iteration   5: 10334198.630 ops/s
Iteration   6: 10291225.576 ops/s
Iteration   7: 10077986.170 ops/s
Iteration   8: 10314041.103 ops/s
Iteration   9: 10199277.632 ops/s
Iteration  10: 10042757.985 ops/s
Iteration  11: 10137634.237 ops/s
Iteration  12: 10357992.020 ops/s
Iteration  13: 10270389.325 ops/s
Iteration  14: 10340083.479 ops/s
Iteration  15: 10273664.942 ops/s
Iteration  16: 10178858.247 ops/s
Iteration  17: 10294140.863 ops/s
Iteration  18: 10307716.932 ops/s
Iteration  19: 10143262.531 ops/s
Iteration  20: 10292384.374 ops/s
Iteration  21: 10283704.887 ops/s
Iteration  22: 10335081.287 ops/s
Iteration  23: 10324663.315 ops/s
Iteration  24: 10223823.638 ops/s
Iteration  25: 10213396.745 ops/s
Iteration  26: 10293131.354 ops/s
Iteration  27: 10303490.257 ops/s
Iteration  28: 10235991.450 ops/s
Iteration  29: 10293548.066 ops/s
Iteration  30: 10304955.124 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_newWithNValues":
  10262119.091 ±(99.9%) 52850.014 ops/s [Average]
  (min, avg, max) = (10042757.985, 10262119.091, 10357992.020), stdev = 79103.419
  CI (99.9%): [10209269.077, 10314969.105] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_newWithNValues  thrpt   30  10262119.091 ± 52850.014  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_newWithNValues_throws_negative_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_newWithNValues_throws_negative_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 738691.782 ops/s
# Warmup Iteration   2: 742388.184 ops/s
# Warmup Iteration   3: 979874.968 ops/s
# Warmup Iteration   4: 985846.170 ops/s
# Warmup Iteration   5: 981398.735 ops/s
# Warmup Iteration   6: 976253.801 ops/s
# Warmup Iteration   7: 971679.247 ops/s
# Warmup Iteration   8: 977097.578 ops/s
# Warmup Iteration   9: 981774.548 ops/s
# Warmup Iteration  10: 987171.560 ops/s
# Warmup Iteration  11: 988280.407 ops/s
# Warmup Iteration  12: 825843.505 ops/s
# Warmup Iteration  13: 984421.952 ops/s
# Warmup Iteration  14: 980876.175 ops/s
# Warmup Iteration  15: 987600.714 ops/s
# Warmup Iteration  16: 983929.349 ops/s
# Warmup Iteration  17: 1038953.219 ops/s
# Warmup Iteration  18: 1039130.304 ops/s
# Warmup Iteration  19: 1037720.751 ops/s
# Warmup Iteration  20: 1042158.343 ops/s
# Warmup Iteration  21: 1033031.835 ops/s
# Warmup Iteration  22: 1043626.007 ops/s
# Warmup Iteration  23: 1039991.960 ops/s
# Warmup Iteration  24: 1040087.928 ops/s
# Warmup Iteration  25: 1044068.108 ops/s
# Warmup Iteration  26: 1039809.522 ops/s
# Warmup Iteration  27: 1033079.319 ops/s
# Warmup Iteration  28: 1034765.180 ops/s
# Warmup Iteration  29: 1040764.112 ops/s
# Warmup Iteration  30: 1040807.328 ops/s
Iteration   1: 1042814.784 ops/s
Iteration   2: 1038690.358 ops/s
Iteration   3: 1025388.953 ops/s
Iteration   4: 1038135.316 ops/s
Iteration   5: 1039874.961 ops/s
Iteration   6: 1036718.158 ops/s
Iteration   7: 1040519.965 ops/s
Iteration   8: 1033990.621 ops/s
Iteration   9: 1032934.301 ops/s
Iteration  10: 1034554.526 ops/s
Iteration  11: 1046142.845 ops/s
Iteration  12: 1034514.211 ops/s
Iteration  13: 1032206.046 ops/s
Iteration  14: 1020194.862 ops/s
Iteration  15: 1036805.339 ops/s
Iteration  16: 1011731.549 ops/s
Iteration  17: 1030801.508 ops/s
Iteration  18: 1030866.515 ops/s
Iteration  19: 1040472.104 ops/s
Iteration  20: 1048524.342 ops/s
Iteration  21: 1046631.103 ops/s
Iteration  22: 1042031.294 ops/s
Iteration  23: 1040048.770 ops/s
Iteration  24: 1012513.526 ops/s
Iteration  25: 1036394.506 ops/s
Iteration  26: 1030517.550 ops/s
Iteration  27: 1033013.847 ops/s
Iteration  28: 1049663.782 ops/s
Iteration  29: 1040200.710 ops/s
Iteration  30: 1035989.558 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_newWithNValues_throws_negative_size":
  1035429.530 ±(99.9%) 6030.346 ops/s [Average]
  (min, avg, max) = (1011731.549, 1035429.530, 1049663.782), stdev = 9025.938
  CI (99.9%): [1029399.185, 1041459.876] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_newWithNValues_throws_negative_size  thrpt   30  1035429.530 ± 6030.346  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3977270.330 ops/s
# Warmup Iteration   2: 6979513.392 ops/s
# Warmup Iteration   3: 8259051.231 ops/s
# Warmup Iteration   4: 8201926.929 ops/s
# Warmup Iteration   5: 8165955.202 ops/s
# Warmup Iteration   6: 8266602.040 ops/s
# Warmup Iteration   7: 8286684.511 ops/s
# Warmup Iteration   8: 8190508.542 ops/s
# Warmup Iteration   9: 8235001.413 ops/s
# Warmup Iteration  10: 8248304.708 ops/s
# Warmup Iteration  11: 8213753.092 ops/s
# Warmup Iteration  12: 8190303.951 ops/s
# Warmup Iteration  13: 8114982.503 ops/s
# Warmup Iteration  14: 8186242.229 ops/s
# Warmup Iteration  15: 8203367.273 ops/s
# Warmup Iteration  16: 8172070.774 ops/s
# Warmup Iteration  17: 8254253.475 ops/s
# Warmup Iteration  18: 8244154.001 ops/s
# Warmup Iteration  19: 8271497.566 ops/s
# Warmup Iteration  20: 8273696.845 ops/s
# Warmup Iteration  21: 8240443.189 ops/s
# Warmup Iteration  22: 8229557.184 ops/s
# Warmup Iteration  23: 8326851.853 ops/s
# Warmup Iteration  24: 8300203.588 ops/s
# Warmup Iteration  25: 8275036.698 ops/s
# Warmup Iteration  26: 8293501.004 ops/s
# Warmup Iteration  27: 8301690.182 ops/s
# Warmup Iteration  28: 8326590.410 ops/s
# Warmup Iteration  29: 8220822.761 ops/s
# Warmup Iteration  30: 8301663.176 ops/s
Iteration   1: 8207353.574 ops/s
Iteration   2: 8182511.653 ops/s
Iteration   3: 8270508.928 ops/s
Iteration   4: 8176544.053 ops/s
Iteration   5: 8223772.650 ops/s
Iteration   6: 8331235.464 ops/s
Iteration   7: 8264518.007 ops/s
Iteration   8: 8261285.883 ops/s
Iteration   9: 8278521.312 ops/s
Iteration  10: 8283114.862 ops/s
Iteration  11: 8328298.206 ops/s
Iteration  12: 8287692.445 ops/s
Iteration  13: 8297445.275 ops/s
Iteration  14: 8027929.379 ops/s
Iteration  15: 8268621.884 ops/s
Iteration  16: 8282061.970 ops/s
Iteration  17: 8275802.352 ops/s
Iteration  18: 8160427.956 ops/s
Iteration  19: 8270092.040 ops/s
Iteration  20: 8226725.696 ops/s
Iteration  21: 8241711.205 ops/s
Iteration  22: 8267017.316 ops/s
Iteration  23: 8266041.402 ops/s
Iteration  24: 8330572.037 ops/s
Iteration  25: 8272490.063 ops/s
Iteration  26: 8310703.308 ops/s
Iteration  27: 8335832.493 ops/s
Iteration  28: 8285178.899 ops/s
Iteration  29: 8041456.693 ops/s
Iteration  30: 8291172.613 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_noneSatisfy":
  8251554.654 ±(99.9%) 49138.028 ops/s [Average]
  (min, avg, max) = (8027929.379, 8251554.654, 8335832.493), stdev = 73547.492
  CI (99.9%): [8202416.626, 8300692.682] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_noneSatisfy  thrpt   30  8251554.654 ± 49138.028  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6845892.957 ops/s
# Warmup Iteration   2: 11237386.962 ops/s
# Warmup Iteration   3: 12960550.013 ops/s
# Warmup Iteration   4: 13342167.918 ops/s
# Warmup Iteration   5: 13379638.811 ops/s
# Warmup Iteration   6: 13178401.296 ops/s
# Warmup Iteration   7: 13211871.290 ops/s
# Warmup Iteration   8: 13323624.125 ops/s
# Warmup Iteration   9: 13068880.455 ops/s
# Warmup Iteration  10: 13281917.538 ops/s
# Warmup Iteration  11: 13408429.777 ops/s
# Warmup Iteration  12: 13326471.708 ops/s
# Warmup Iteration  13: 13176005.145 ops/s
# Warmup Iteration  14: 13206965.419 ops/s
# Warmup Iteration  15: 13367500.633 ops/s
# Warmup Iteration  16: 13310967.287 ops/s
# Warmup Iteration  17: 13276529.263 ops/s
# Warmup Iteration  18: 13195314.400 ops/s
# Warmup Iteration  19: 13276977.672 ops/s
# Warmup Iteration  20: 13171020.225 ops/s
# Warmup Iteration  21: 13388160.305 ops/s
# Warmup Iteration  22: 13181642.835 ops/s
# Warmup Iteration  23: 13370017.890 ops/s
# Warmup Iteration  24: 13351566.011 ops/s
# Warmup Iteration  25: 13194844.995 ops/s
# Warmup Iteration  26: 13340569.578 ops/s
# Warmup Iteration  27: 13311025.799 ops/s
# Warmup Iteration  28: 13313214.342 ops/s
# Warmup Iteration  29: 13277334.791 ops/s
# Warmup Iteration  30: 13359283.210 ops/s
Iteration   1: 13138247.376 ops/s
Iteration   2: 13414255.847 ops/s
Iteration   3: 13340775.501 ops/s
Iteration   4: 13326430.773 ops/s
Iteration   5: 13359790.801 ops/s
Iteration   6: 13197915.958 ops/s
Iteration   7: 13386783.834 ops/s
Iteration   8: 13330373.909 ops/s
Iteration   9: 13373556.244 ops/s
Iteration  10: 13085394.132 ops/s
Iteration  11: 13200591.501 ops/s
Iteration  12: 13433816.166 ops/s
Iteration  13: 13438715.298 ops/s
Iteration  14: 13204736.542 ops/s
Iteration  15: 13350354.123 ops/s
Iteration  16: 13481883.060 ops/s
Iteration  17: 13368567.019 ops/s
Iteration  18: 13269917.077 ops/s
Iteration  19: 13404588.904 ops/s
Iteration  20: 13221760.882 ops/s
Iteration  21: 13419034.615 ops/s
Iteration  22: 13367175.228 ops/s
Iteration  23: 13363282.374 ops/s
Iteration  24: 13387359.604 ops/s
Iteration  25: 13254137.678 ops/s
Iteration  26: 13362549.043 ops/s
Iteration  27: 13371623.231 ops/s
Iteration  28: 13453947.329 ops/s
Iteration  29: 13403825.744 ops/s
Iteration  30: 13356284.203 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_notEmpty":
  13335589.133 ±(99.9%) 64585.443 ops/s [Average]
  (min, avg, max) = (13085394.132, 13335589.133, 13481883.060), stdev = 96668.458
  CI (99.9%): [13271003.690, 13400174.576] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_notEmpty  thrpt   30  13335589.133 ± 64585.443  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3339473.335 ops/s
# Warmup Iteration   2: 6725213.730 ops/s
# Warmup Iteration   3: 5531111.458 ops/s
# Warmup Iteration   4: 6689464.755 ops/s
# Warmup Iteration   5: 6745520.810 ops/s
# Warmup Iteration   6: 6688720.916 ops/s
# Warmup Iteration   7: 6698223.973 ops/s
# Warmup Iteration   8: 6741449.049 ops/s
# Warmup Iteration   9: 6665039.566 ops/s
# Warmup Iteration  10: 6727041.684 ops/s
# Warmup Iteration  11: 6614846.893 ops/s
# Warmup Iteration  12: 6658595.911 ops/s
# Warmup Iteration  13: 6737117.587 ops/s
# Warmup Iteration  14: 6655501.114 ops/s
# Warmup Iteration  15: 6722993.038 ops/s
# Warmup Iteration  16: 6686516.589 ops/s
# Warmup Iteration  17: 6754974.468 ops/s
# Warmup Iteration  18: 6726319.685 ops/s
# Warmup Iteration  19: 6707027.293 ops/s
# Warmup Iteration  20: 6729865.953 ops/s
# Warmup Iteration  21: 6624803.191 ops/s
# Warmup Iteration  22: 6761452.107 ops/s
# Warmup Iteration  23: 6734754.674 ops/s
# Warmup Iteration  24: 6561558.907 ops/s
# Warmup Iteration  25: 6669632.204 ops/s
# Warmup Iteration  26: 6723377.550 ops/s
# Warmup Iteration  27: 6691769.163 ops/s
# Warmup Iteration  28: 6730342.201 ops/s
# Warmup Iteration  29: 6715758.159 ops/s
# Warmup Iteration  30: 6733471.789 ops/s
Iteration   1: 6763153.073 ops/s
Iteration   2: 6760476.257 ops/s
Iteration   3: 6652657.320 ops/s
Iteration   4: 6712247.566 ops/s
Iteration   5: 6697822.155 ops/s
Iteration   6: 6744716.697 ops/s
Iteration   7: 6783281.334 ops/s
Iteration   8: 6740504.240 ops/s
Iteration   9: 6734634.315 ops/s
Iteration  10: 6735940.390 ops/s
Iteration  11: 6732668.453 ops/s
Iteration  12: 6734563.650 ops/s
Iteration  13: 6758822.485 ops/s
Iteration  14: 6661806.793 ops/s
Iteration  15: 6760978.064 ops/s
Iteration  16: 6689526.122 ops/s
Iteration  17: 6734515.135 ops/s
Iteration  18: 6714778.382 ops/s
Iteration  19: 6610379.850 ops/s
Iteration  20: 6715229.830 ops/s
Iteration  21: 6695793.045 ops/s
Iteration  22: 6667050.445 ops/s
Iteration  23: 6604831.182 ops/s
Iteration  24: 6714088.434 ops/s
Iteration  25: 6738567.207 ops/s
Iteration  26: 6738351.179 ops/s
Iteration  27: 6743721.023 ops/s
Iteration  28: 6730357.151 ops/s
Iteration  29: 6602267.675 ops/s
Iteration  30: 6738109.959 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_reduce":
  6713727.980 ±(99.9%) 31701.484 ops/s [Average]
  (min, avg, max) = (6602267.675, 6713727.980, 6783281.334), stdev = 47449.293
  CI (99.9%): [6682026.496, 6745429.465] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_reduce  thrpt   30  6713727.980 ± 31701.484  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2927349.912 ops/s
# Warmup Iteration   2: 5971205.035 ops/s
# Warmup Iteration   3: 5063938.765 ops/s
# Warmup Iteration   4: 5998028.721 ops/s
# Warmup Iteration   5: 5971942.860 ops/s
# Warmup Iteration   6: 6040148.305 ops/s
# Warmup Iteration   7: 6029189.813 ops/s
# Warmup Iteration   8: 5977307.806 ops/s
# Warmup Iteration   9: 5919028.455 ops/s
# Warmup Iteration  10: 6033398.422 ops/s
# Warmup Iteration  11: 6022121.770 ops/s
# Warmup Iteration  12: 6001521.239 ops/s
# Warmup Iteration  13: 5986717.792 ops/s
# Warmup Iteration  14: 6027099.383 ops/s
# Warmup Iteration  15: 5943557.664 ops/s
# Warmup Iteration  16: 5967906.324 ops/s
# Warmup Iteration  17: 6010656.580 ops/s
# Warmup Iteration  18: 5967041.152 ops/s
# Warmup Iteration  19: 5886394.385 ops/s
# Warmup Iteration  20: 5967290.141 ops/s
# Warmup Iteration  21: 5888276.339 ops/s
# Warmup Iteration  22: 5931245.841 ops/s
# Warmup Iteration  23: 5991598.827 ops/s
# Warmup Iteration  24: 5984946.417 ops/s
# Warmup Iteration  25: 5943249.119 ops/s
# Warmup Iteration  26: 6024724.349 ops/s
# Warmup Iteration  27: 6005715.235 ops/s
# Warmup Iteration  28: 6006130.833 ops/s
# Warmup Iteration  29: 5976281.882 ops/s
# Warmup Iteration  30: 6010336.149 ops/s
Iteration   1: 6009107.447 ops/s
Iteration   2: 6014111.877 ops/s
Iteration   3: 6006830.323 ops/s
Iteration   4: 5967951.812 ops/s
Iteration   5: 5965250.969 ops/s
Iteration   6: 5927877.040 ops/s
Iteration   7: 6039289.210 ops/s
Iteration   8: 6003282.758 ops/s
Iteration   9: 5992192.006 ops/s
Iteration  10: 5870588.847 ops/s
Iteration  11: 5968835.551 ops/s
Iteration  12: 6015382.493 ops/s
Iteration  13: 5908467.367 ops/s
Iteration  14: 6009969.987 ops/s
Iteration  15: 6026008.483 ops/s
Iteration  16: 6013055.804 ops/s
Iteration  17: 5952033.023 ops/s
Iteration  18: 5955830.720 ops/s
Iteration  19: 5993128.271 ops/s
Iteration  20: 6039584.473 ops/s
Iteration  21: 6003126.452 ops/s
Iteration  22: 6044948.716 ops/s
Iteration  23: 5898293.385 ops/s
Iteration  24: 5997311.620 ops/s
Iteration  25: 5962196.497 ops/s
Iteration  26: 5992877.279 ops/s
Iteration  27: 5932598.093 ops/s
Iteration  28: 5853391.870 ops/s
Iteration  29: 6007579.800 ops/s
Iteration  30: 6028230.868 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_reduceIfEmpty":
  5979977.768 ±(99.9%) 33116.904 ops/s [Average]
  (min, avg, max) = (5853391.870, 5979977.768, 6044948.716), stdev = 49567.826
  CI (99.9%): [5946860.864, 6013094.672] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  5979977.768 ± 33116.904  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 709657.538 ops/s
# Warmup Iteration   2: 745290.527 ops/s
# Warmup Iteration   3: 991420.803 ops/s
# Warmup Iteration   4: 998001.507 ops/s
# Warmup Iteration   5: 989175.901 ops/s
# Warmup Iteration   6: 994201.375 ops/s
# Warmup Iteration   7: 998225.290 ops/s
# Warmup Iteration   8: 995142.447 ops/s
# Warmup Iteration   9: 998244.512 ops/s
# Warmup Iteration  10: 994146.336 ops/s
# Warmup Iteration  11: 825082.396 ops/s
# Warmup Iteration  12: 999843.539 ops/s
# Warmup Iteration  13: 987175.289 ops/s
# Warmup Iteration  14: 994899.255 ops/s
# Warmup Iteration  15: 990676.292 ops/s
# Warmup Iteration  16: 991336.098 ops/s
# Warmup Iteration  17: 1057248.902 ops/s
# Warmup Iteration  18: 1047011.091 ops/s
# Warmup Iteration  19: 1049103.749 ops/s
# Warmup Iteration  20: 1048014.190 ops/s
# Warmup Iteration  21: 1050960.576 ops/s
# Warmup Iteration  22: 1053586.752 ops/s
# Warmup Iteration  23: 1040545.066 ops/s
# Warmup Iteration  24: 1054047.935 ops/s
# Warmup Iteration  25: 1049098.755 ops/s
# Warmup Iteration  26: 1047149.031 ops/s
# Warmup Iteration  27: 1046998.087 ops/s
# Warmup Iteration  28: 1054086.777 ops/s
# Warmup Iteration  29: 1053300.179 ops/s
# Warmup Iteration  30: 1045714.773 ops/s
Iteration   1: 1050068.997 ops/s
Iteration   2: 1032111.937 ops/s
Iteration   3: 1053227.061 ops/s
Iteration   4: 1054694.631 ops/s
Iteration   5: 1055803.963 ops/s
Iteration   6: 1056254.005 ops/s
Iteration   7: 1054450.423 ops/s
Iteration   8: 1045503.623 ops/s
Iteration   9: 1056277.811 ops/s
Iteration  10: 1051427.885 ops/s
Iteration  11: 1051230.658 ops/s
Iteration  12: 1051748.016 ops/s
Iteration  13: 1056759.950 ops/s
Iteration  14: 1050058.179 ops/s
Iteration  15: 1052351.207 ops/s
Iteration  16: 1061347.094 ops/s
Iteration  17: 1038846.954 ops/s
Iteration  18: 1054262.811 ops/s
Iteration  19: 1055369.120 ops/s
Iteration  20: 1055524.640 ops/s
Iteration  21: 1057207.643 ops/s
Iteration  22: 1051676.742 ops/s
Iteration  23: 1039537.164 ops/s
Iteration  24: 1038998.888 ops/s
Iteration  25: 1054899.581 ops/s
Iteration  26: 1049624.311 ops/s
Iteration  27: 1051951.853 ops/s
Iteration  28: 1050841.610 ops/s
Iteration  29: 1045531.567 ops/s
Iteration  30: 1051581.097 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1050972.314 ±(99.9%) 4299.913 ops/s [Average]
  (min, avg, max) = (1032111.937, 1050972.314, 1061347.094), stdev = 6435.907
  CI (99.9%): [1046672.401, 1055272.227] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1050972.314 ± 4299.913  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2156960.907 ops/s
# Warmup Iteration   2: 5095333.330 ops/s
# Warmup Iteration   3: 4270287.803 ops/s
# Warmup Iteration   4: 5102707.671 ops/s
# Warmup Iteration   5: 5074581.170 ops/s
# Warmup Iteration   6: 5122793.254 ops/s
# Warmup Iteration   7: 5039599.776 ops/s
# Warmup Iteration   8: 5098642.066 ops/s
# Warmup Iteration   9: 5119039.272 ops/s
# Warmup Iteration  10: 5102780.183 ops/s
# Warmup Iteration  11: 5074727.109 ops/s
# Warmup Iteration  12: 5089365.574 ops/s
# Warmup Iteration  13: 5136960.148 ops/s
# Warmup Iteration  14: 5113118.580 ops/s
# Warmup Iteration  15: 5119108.634 ops/s
# Warmup Iteration  16: 5119402.075 ops/s
# Warmup Iteration  17: 5123689.688 ops/s
# Warmup Iteration  18: 5149250.007 ops/s
# Warmup Iteration  19: 5132809.117 ops/s
# Warmup Iteration  20: 5128838.837 ops/s
# Warmup Iteration  21: 5067854.845 ops/s
# Warmup Iteration  22: 5132430.092 ops/s
# Warmup Iteration  23: 5121146.647 ops/s
# Warmup Iteration  24: 5074248.857 ops/s
# Warmup Iteration  25: 5088223.741 ops/s
# Warmup Iteration  26: 5142844.410 ops/s
# Warmup Iteration  27: 5035265.117 ops/s
# Warmup Iteration  28: 5125494.904 ops/s
# Warmup Iteration  29: 5139479.390 ops/s
# Warmup Iteration  30: 5069791.087 ops/s
Iteration   1: 5122979.873 ops/s
Iteration   2: 5141651.557 ops/s
Iteration   3: 5129780.666 ops/s
Iteration   4: 5141915.720 ops/s
Iteration   5: 5133060.485 ops/s
Iteration   6: 5088693.120 ops/s
Iteration   7: 5157529.086 ops/s
Iteration   8: 5145295.779 ops/s
Iteration   9: 5058835.590 ops/s
Iteration  10: 5131811.004 ops/s
Iteration  11: 5145948.005 ops/s
Iteration  12: 5124673.627 ops/s
Iteration  13: 5129144.390 ops/s
Iteration  14: 5157335.443 ops/s
Iteration  15: 5085752.492 ops/s
Iteration  16: 5144592.184 ops/s
Iteration  17: 5111484.882 ops/s
Iteration  18: 5105251.628 ops/s
Iteration  19: 5153156.426 ops/s
Iteration  20: 5070920.229 ops/s
Iteration  21: 5142127.619 ops/s
Iteration  22: 5138368.359 ops/s
Iteration  23: 5088138.934 ops/s
Iteration  24: 5059296.079 ops/s
Iteration  25: 5105567.652 ops/s
Iteration  26: 5117742.775 ops/s
Iteration  27: 5137451.066 ops/s
Iteration  28: 5109627.638 ops/s
Iteration  29: 5143259.801 ops/s
Iteration  30: 5056131.676 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_reject":
  5119250.793 ±(99.9%) 20248.818 ops/s [Average]
  (min, avg, max) = (5056131.676, 5119250.793, 5157529.086), stdev = 30307.479
  CI (99.9%): [5099001.975, 5139499.610] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_reject  thrpt   30  5119250.793 ± 20248.818  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 687594.535 ops/s
# Warmup Iteration   2: 772470.223 ops/s
# Warmup Iteration   3: 984848.308 ops/s
# Warmup Iteration   4: 984954.631 ops/s
# Warmup Iteration   5: 982783.375 ops/s
# Warmup Iteration   6: 987471.855 ops/s
# Warmup Iteration   7: 983980.114 ops/s
# Warmup Iteration   8: 978823.036 ops/s
# Warmup Iteration   9: 986865.651 ops/s
# Warmup Iteration  10: 821330.461 ops/s
# Warmup Iteration  11: 979807.800 ops/s
# Warmup Iteration  12: 975601.013 ops/s
# Warmup Iteration  13: 980563.722 ops/s
# Warmup Iteration  14: 988282.736 ops/s
# Warmup Iteration  15: 974588.117 ops/s
# Warmup Iteration  16: 986879.812 ops/s
# Warmup Iteration  17: 1028263.353 ops/s
# Warmup Iteration  18: 1025358.082 ops/s
# Warmup Iteration  19: 1033310.097 ops/s
# Warmup Iteration  20: 1029023.272 ops/s
# Warmup Iteration  21: 1030295.935 ops/s
# Warmup Iteration  22: 1027313.721 ops/s
# Warmup Iteration  23: 1019376.618 ops/s
# Warmup Iteration  24: 1027167.563 ops/s
# Warmup Iteration  25: 1029928.061 ops/s
# Warmup Iteration  26: 1034056.472 ops/s
# Warmup Iteration  27: 1034112.528 ops/s
# Warmup Iteration  28: 1026166.507 ops/s
# Warmup Iteration  29: 1017786.220 ops/s
# Warmup Iteration  30: 1010392.126 ops/s
Iteration   1: 1034014.374 ops/s
Iteration   2: 1032466.836 ops/s
Iteration   3: 999611.654 ops/s
Iteration   4: 1017620.128 ops/s
Iteration   5: 1026170.658 ops/s
Iteration   6: 1028415.303 ops/s
Iteration   7: 1014791.893 ops/s
Iteration   8: 1034865.216 ops/s
Iteration   9: 1034805.247 ops/s
Iteration  10: 1033188.183 ops/s
Iteration  11: 1018889.785 ops/s
Iteration  12: 1028489.242 ops/s
Iteration  13: 1026874.400 ops/s
Iteration  14: 1016401.962 ops/s
Iteration  15: 1017979.364 ops/s
Iteration  16: 1027052.825 ops/s
Iteration  17: 1027707.708 ops/s
Iteration  18: 1026182.484 ops/s
Iteration  19: 1027929.670 ops/s
Iteration  20: 1029447.390 ops/s
Iteration  21: 1020119.456 ops/s
Iteration  22: 1016988.836 ops/s
Iteration  23: 1034387.359 ops/s
Iteration  24: 1032053.204 ops/s
Iteration  25: 1017549.369 ops/s
Iteration  26: 1030504.136 ops/s
Iteration  27: 1018151.449 ops/s
Iteration  28: 1022052.620 ops/s
Iteration  29: 1028923.936 ops/s
Iteration  30: 1021545.826 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_remove":
  1024839.350 ±(99.9%) 5300.311 ops/s [Average]
  (min, avg, max) = (999611.654, 1024839.350, 1034865.216), stdev = 7933.256
  CI (99.9%): [1019539.040, 1030139.661] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_remove  thrpt   30  1024839.350 ± 5300.311  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 683885.243 ops/s
# Warmup Iteration   2: 751733.777 ops/s
# Warmup Iteration   3: 989003.240 ops/s
# Warmup Iteration   4: 981196.834 ops/s
# Warmup Iteration   5: 988906.954 ops/s
# Warmup Iteration   6: 984849.649 ops/s
# Warmup Iteration   7: 974535.035 ops/s
# Warmup Iteration   8: 985767.745 ops/s
# Warmup Iteration   9: 988499.704 ops/s
# Warmup Iteration  10: 820508.864 ops/s
# Warmup Iteration  11: 992590.843 ops/s
# Warmup Iteration  12: 987131.870 ops/s
# Warmup Iteration  13: 972796.955 ops/s
# Warmup Iteration  14: 989508.033 ops/s
# Warmup Iteration  15: 983699.191 ops/s
# Warmup Iteration  16: 992137.882 ops/s
# Warmup Iteration  17: 1042167.306 ops/s
# Warmup Iteration  18: 1038883.176 ops/s
# Warmup Iteration  19: 1044110.621 ops/s
# Warmup Iteration  20: 1032691.047 ops/s
# Warmup Iteration  21: 1032016.241 ops/s
# Warmup Iteration  22: 1045119.116 ops/s
# Warmup Iteration  23: 1029971.722 ops/s
# Warmup Iteration  24: 1019905.228 ops/s
# Warmup Iteration  25: 1033605.686 ops/s
# Warmup Iteration  26: 1009777.929 ops/s
# Warmup Iteration  27: 1031087.541 ops/s
# Warmup Iteration  28: 1038698.251 ops/s
# Warmup Iteration  29: 1039747.166 ops/s
# Warmup Iteration  30: 1041287.586 ops/s
Iteration   1: 1034159.117 ops/s
Iteration   2: 1044756.633 ops/s
Iteration   3: 1032045.080 ops/s
Iteration   4: 1034897.599 ops/s
Iteration   5: 1038619.480 ops/s
Iteration   6: 1040061.887 ops/s
Iteration   7: 1039009.658 ops/s
Iteration   8: 1042868.994 ops/s
Iteration   9: 1039969.181 ops/s
Iteration  10: 1039084.940 ops/s
Iteration  11: 1043738.517 ops/s
Iteration  12: 1041271.418 ops/s
Iteration  13: 1038324.429 ops/s
Iteration  14: 1036829.395 ops/s
Iteration  15: 1039483.174 ops/s
Iteration  16: 1022043.694 ops/s
Iteration  17: 1032643.646 ops/s
Iteration  18: 1045263.620 ops/s
Iteration  19: 1039988.359 ops/s
Iteration  20: 1042566.835 ops/s
Iteration  21: 1032545.130 ops/s
Iteration  22: 1042472.679 ops/s
Iteration  23: 1029126.542 ops/s
Iteration  24: 1044506.424 ops/s
Iteration  25: 1036822.403 ops/s
Iteration  26: 1036415.564 ops/s
Iteration  27: 1041394.714 ops/s
Iteration  28: 1036677.955 ops/s
Iteration  29: 1039655.133 ops/s
Iteration  30: 1038659.929 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_removeAll":
  1038196.738 ±(99.9%) 3370.596 ops/s [Average]
  (min, avg, max) = (1022043.694, 1038196.738, 1045263.620), stdev = 5044.950
  CI (99.9%): [1034826.141, 1041567.334] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_removeAll  thrpt   30  1038196.738 ± 3370.596  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 674484.121 ops/s
# Warmup Iteration   2: 792012.254 ops/s
# Warmup Iteration   3: 995211.758 ops/s
# Warmup Iteration   4: 992920.330 ops/s
# Warmup Iteration   5: 1005067.225 ops/s
# Warmup Iteration   6: 988995.110 ops/s
# Warmup Iteration   7: 1001175.130 ops/s
# Warmup Iteration   8: 999699.077 ops/s
# Warmup Iteration   9: 864300.024 ops/s
# Warmup Iteration  10: 953574.630 ops/s
# Warmup Iteration  11: 995949.159 ops/s
# Warmup Iteration  12: 1002573.425 ops/s
# Warmup Iteration  13: 998647.317 ops/s
# Warmup Iteration  14: 994849.265 ops/s
# Warmup Iteration  15: 1003197.813 ops/s
# Warmup Iteration  16: 993292.469 ops/s
# Warmup Iteration  17: 1057541.948 ops/s
# Warmup Iteration  18: 1048573.775 ops/s
# Warmup Iteration  19: 1053320.302 ops/s
# Warmup Iteration  20: 1057245.543 ops/s
# Warmup Iteration  21: 1046309.131 ops/s
# Warmup Iteration  22: 1060617.080 ops/s
# Warmup Iteration  23: 1052042.005 ops/s
# Warmup Iteration  24: 1057891.985 ops/s
# Warmup Iteration  25: 1062966.693 ops/s
# Warmup Iteration  26: 1050110.996 ops/s
# Warmup Iteration  27: 1056840.190 ops/s
# Warmup Iteration  28: 1053926.091 ops/s
# Warmup Iteration  29: 1052791.013 ops/s
# Warmup Iteration  30: 1051728.644 ops/s
Iteration   1: 1058182.125 ops/s
Iteration   2: 1046859.718 ops/s
Iteration   3: 1037910.922 ops/s
Iteration   4: 1062581.455 ops/s
Iteration   5: 1062963.426 ops/s
Iteration   6: 1055038.142 ops/s
Iteration   7: 1058390.286 ops/s
Iteration   8: 1060873.483 ops/s
Iteration   9: 1038089.120 ops/s
Iteration  10: 1052806.216 ops/s
Iteration  11: 1060176.989 ops/s
Iteration  12: 1060195.407 ops/s
Iteration  13: 1059438.902 ops/s
Iteration  14: 1054651.924 ops/s
Iteration  15: 1058707.310 ops/s
Iteration  16: 1060346.224 ops/s
Iteration  17: 1060028.030 ops/s
Iteration  18: 1044389.048 ops/s
Iteration  19: 1065653.275 ops/s
Iteration  20: 1057715.689 ops/s
Iteration  21: 1059112.640 ops/s
Iteration  22: 1056418.397 ops/s
Iteration  23: 1063004.073 ops/s
Iteration  24: 1053412.548 ops/s
Iteration  25: 1060008.262 ops/s
Iteration  26: 1060948.822 ops/s
Iteration  27: 1059972.359 ops/s
Iteration  28: 1059048.640 ops/s
Iteration  29: 1042410.559 ops/s
Iteration  30: 1052314.051 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_removeAll_iterable":
  1056054.935 ±(99.9%) 4837.296 ops/s [Average]
  (min, avg, max) = (1037910.922, 1056054.935, 1065653.275), stdev = 7240.237
  CI (99.9%): [1051217.639, 1060892.231] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  1056054.935 ± 4837.296  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_removeAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_removeAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 734278.391 ops/s
# Warmup Iteration   2: 776549.479 ops/s
# Warmup Iteration   3: 1027612.377 ops/s
# Warmup Iteration   4: 1021716.462 ops/s
# Warmup Iteration   5: 1017608.717 ops/s
# Warmup Iteration   6: 1014750.257 ops/s
# Warmup Iteration   7: 1027595.129 ops/s
# Warmup Iteration   8: 1027048.897 ops/s
# Warmup Iteration   9: 1024474.813 ops/s
# Warmup Iteration  10: 908427.491 ops/s
# Warmup Iteration  11: 967213.588 ops/s
# Warmup Iteration  12: 1029820.275 ops/s
# Warmup Iteration  13: 1024639.103 ops/s
# Warmup Iteration  14: 1020399.133 ops/s
# Warmup Iteration  15: 1027158.117 ops/s
# Warmup Iteration  16: 1015674.226 ops/s
# Warmup Iteration  17: 1080809.894 ops/s
# Warmup Iteration  18: 1076611.978 ops/s
# Warmup Iteration  19: 1081975.223 ops/s
# Warmup Iteration  20: 1085179.344 ops/s
# Warmup Iteration  21: 1080424.652 ops/s
# Warmup Iteration  22: 1079184.887 ops/s
# Warmup Iteration  23: 1075587.839 ops/s
# Warmup Iteration  24: 1070814.569 ops/s
# Warmup Iteration  25: 1078346.477 ops/s
# Warmup Iteration  26: 1072527.819 ops/s
# Warmup Iteration  27: 1077456.989 ops/s
# Warmup Iteration  28: 1067442.751 ops/s
# Warmup Iteration  29: 1076937.360 ops/s
# Warmup Iteration  30: 1077720.893 ops/s
Iteration   1: 1065543.097 ops/s
Iteration   2: 1081487.748 ops/s
Iteration   3: 1085104.221 ops/s
Iteration   4: 1088724.918 ops/s
Iteration   5: 1080350.877 ops/s
Iteration   6: 1060697.103 ops/s
Iteration   7: 1077063.166 ops/s
Iteration   8: 1086335.968 ops/s
Iteration   9: 1075584.925 ops/s
Iteration  10: 1074441.536 ops/s
Iteration  11: 1062105.249 ops/s
Iteration  12: 1086966.851 ops/s
Iteration  13: 1075056.412 ops/s
Iteration  14: 1078276.048 ops/s
Iteration  15: 1053541.006 ops/s
Iteration  16: 1081442.007 ops/s
Iteration  17: 1068314.450 ops/s
Iteration  18: 1072179.670 ops/s
Iteration  19: 1075813.221 ops/s
Iteration  20: 1077108.862 ops/s
Iteration  21: 1077476.369 ops/s
Iteration  22: 1083433.317 ops/s
Iteration  23: 1062376.388 ops/s
Iteration  24: 1071850.320 ops/s
Iteration  25: 1077730.682 ops/s
Iteration  26: 1079294.233 ops/s
Iteration  27: 1076796.679 ops/s
Iteration  28: 1085459.824 ops/s
Iteration  29: 1070279.222 ops/s
Iteration  30: 1077131.832 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_removeAtIndex":
  1075598.873 ±(99.9%) 5644.240 ops/s [Average]
  (min, avg, max) = (1053541.006, 1075598.873, 1088724.918), stdev = 8448.033
  CI (99.9%): [1069954.634, 1081243.113] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_removeAtIndex  thrpt   30  1075598.873 ± 5644.240  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_removeAtIndex_throws_index_greater_than_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_removeAtIndex_throws_index_greater_than_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 724477.669 ops/s
# Warmup Iteration   2: 798623.402 ops/s
# Warmup Iteration   3: 1005512.650 ops/s
# Warmup Iteration   4: 1010608.853 ops/s
# Warmup Iteration   5: 1001193.746 ops/s
# Warmup Iteration   6: 998969.265 ops/s
# Warmup Iteration   7: 1006162.958 ops/s
# Warmup Iteration   8: 995868.297 ops/s
# Warmup Iteration   9: 1005476.681 ops/s
# Warmup Iteration  10: 860042.995 ops/s
# Warmup Iteration  11: 990847.145 ops/s
# Warmup Iteration  12: 1004782.133 ops/s
# Warmup Iteration  13: 1005967.004 ops/s
# Warmup Iteration  14: 1004420.206 ops/s
# Warmup Iteration  15: 1011188.813 ops/s
# Warmup Iteration  16: 1005507.761 ops/s
# Warmup Iteration  17: 1069374.514 ops/s
# Warmup Iteration  18: 1057639.267 ops/s
# Warmup Iteration  19: 1062744.061 ops/s
# Warmup Iteration  20: 1048737.633 ops/s
# Warmup Iteration  21: 1061750.849 ops/s
# Warmup Iteration  22: 1064406.685 ops/s
# Warmup Iteration  23: 1066150.829 ops/s
# Warmup Iteration  24: 1063979.270 ops/s
# Warmup Iteration  25: 1066655.530 ops/s
# Warmup Iteration  26: 1058223.979 ops/s
# Warmup Iteration  27: 1057543.010 ops/s
# Warmup Iteration  28: 1062551.162 ops/s
# Warmup Iteration  29: 1069325.320 ops/s
# Warmup Iteration  30: 1063680.576 ops/s
Iteration   1: 1066360.889 ops/s
Iteration   2: 1069059.141 ops/s
Iteration   3: 1072356.755 ops/s
Iteration   4: 1058023.033 ops/s
Iteration   5: 1064059.861 ops/s
Iteration   6: 1067445.031 ops/s
Iteration   7: 1055281.275 ops/s
Iteration   8: 1061304.059 ops/s
Iteration   9: 1068235.778 ops/s
Iteration  10: 1061672.453 ops/s
Iteration  11: 1063930.086 ops/s
Iteration  12: 1059243.485 ops/s
Iteration  13: 1065691.226 ops/s
Iteration  14: 1068172.027 ops/s
Iteration  15: 1068402.909 ops/s
Iteration  16: 1048814.367 ops/s
Iteration  17: 1059503.537 ops/s
Iteration  18: 1064832.960 ops/s
Iteration  19: 1061131.462 ops/s
Iteration  20: 1065022.613 ops/s
Iteration  21: 1051025.169 ops/s
Iteration  22: 1066483.889 ops/s
Iteration  23: 1065238.227 ops/s
Iteration  24: 1056305.542 ops/s
Iteration  25: 1069838.632 ops/s
Iteration  26: 1064600.559 ops/s
Iteration  27: 1068031.245 ops/s
Iteration  28: 1069658.490 ops/s
Iteration  29: 1065897.229 ops/s
Iteration  30: 1063842.046 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_removeAtIndex_throws_index_greater_than_size":
  1063648.799 ±(99.9%) 3714.123 ops/s [Average]
  (min, avg, max) = (1048814.367, 1063648.799, 1072356.755), stdev = 5559.124
  CI (99.9%): [1059934.677, 1067362.922] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_removeAtIndex_throws_index_greater_than_size  thrpt   30  1063648.799 ± 3714.123  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_removeAtIndex_throws_index_negative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_removeAtIndex_throws_index_negative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 735735.678 ops/s
# Warmup Iteration   2: 791373.571 ops/s
# Warmup Iteration   3: 1015732.283 ops/s
# Warmup Iteration   4: 1008973.332 ops/s
# Warmup Iteration   5: 1010735.414 ops/s
# Warmup Iteration   6: 1001307.870 ops/s
# Warmup Iteration   7: 1022119.587 ops/s
# Warmup Iteration   8: 1017351.456 ops/s
# Warmup Iteration   9: 1021035.922 ops/s
# Warmup Iteration  10: 911401.853 ops/s
# Warmup Iteration  11: 949487.452 ops/s
# Warmup Iteration  12: 1016503.148 ops/s
# Warmup Iteration  13: 1008474.107 ops/s
# Warmup Iteration  14: 1009636.615 ops/s
# Warmup Iteration  15: 1017946.830 ops/s
# Warmup Iteration  16: 1012694.785 ops/s
# Warmup Iteration  17: 1071266.174 ops/s
# Warmup Iteration  18: 1065623.915 ops/s
# Warmup Iteration  19: 1072544.665 ops/s
# Warmup Iteration  20: 1064824.004 ops/s
# Warmup Iteration  21: 1068549.532 ops/s
# Warmup Iteration  22: 1066372.826 ops/s
# Warmup Iteration  23: 1055282.734 ops/s
# Warmup Iteration  24: 1074982.484 ops/s
# Warmup Iteration  25: 1071263.976 ops/s
# Warmup Iteration  26: 1071170.658 ops/s
# Warmup Iteration  27: 1078063.979 ops/s
# Warmup Iteration  28: 1072762.050 ops/s
# Warmup Iteration  29: 1072292.920 ops/s
# Warmup Iteration  30: 1056059.640 ops/s
Iteration   1: 1051441.745 ops/s
Iteration   2: 1065043.283 ops/s
Iteration   3: 1076606.502 ops/s
Iteration   4: 1070240.190 ops/s
Iteration   5: 1018554.105 ops/s
Iteration   6: 1058510.611 ops/s
Iteration   7: 1064110.505 ops/s
Iteration   8: 1049498.265 ops/s
Iteration   9: 1077504.882 ops/s
Iteration  10: 1077340.088 ops/s
Iteration  11: 1040992.957 ops/s
Iteration  12: 1060058.069 ops/s
Iteration  13: 1071153.443 ops/s
Iteration  14: 1066015.010 ops/s
Iteration  15: 1060538.652 ops/s
Iteration  16: 1062535.018 ops/s
Iteration  17: 1071321.352 ops/s
Iteration  18: 1075785.316 ops/s
Iteration  19: 1072641.951 ops/s
Iteration  20: 1055629.258 ops/s
Iteration  21: 1074168.049 ops/s
Iteration  22: 1055132.185 ops/s
Iteration  23: 1069181.554 ops/s
Iteration  24: 1075095.734 ops/s
Iteration  25: 1063277.492 ops/s
Iteration  26: 1067081.441 ops/s
Iteration  27: 1072611.695 ops/s
Iteration  28: 1038481.803 ops/s
Iteration  29: 1072869.894 ops/s
Iteration  30: 1059388.497 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_removeAtIndex_throws_index_negative":
  1063093.652 ±(99.9%) 8874.707 ops/s [Average]
  (min, avg, max) = (1018554.105, 1063093.652, 1077504.882), stdev = 13283.244
  CI (99.9%): [1054218.945, 1071968.358] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_removeAtIndex_throws_index_negative  thrpt   30  1063093.652 ± 8874.707  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 684619.524 ops/s
# Warmup Iteration   2: 758114.768 ops/s
# Warmup Iteration   3: 970276.994 ops/s
# Warmup Iteration   4: 983209.231 ops/s
# Warmup Iteration   5: 986428.474 ops/s
# Warmup Iteration   6: 973815.324 ops/s
# Warmup Iteration   7: 983162.215 ops/s
# Warmup Iteration   8: 971278.765 ops/s
# Warmup Iteration   9: 976139.793 ops/s
# Warmup Iteration  10: 798085.251 ops/s
# Warmup Iteration  11: 972525.248 ops/s
# Warmup Iteration  12: 987937.170 ops/s
# Warmup Iteration  13: 980670.307 ops/s
# Warmup Iteration  14: 976972.625 ops/s
# Warmup Iteration  15: 970910.333 ops/s
# Warmup Iteration  16: 980295.084 ops/s
# Warmup Iteration  17: 1030418.014 ops/s
# Warmup Iteration  18: 1029971.518 ops/s
# Warmup Iteration  19: 1034994.412 ops/s
# Warmup Iteration  20: 1034198.085 ops/s
# Warmup Iteration  21: 1031725.984 ops/s
# Warmup Iteration  22: 1027185.247 ops/s
# Warmup Iteration  23: 1019724.472 ops/s
# Warmup Iteration  24: 1026778.904 ops/s
# Warmup Iteration  25: 1027781.002 ops/s
# Warmup Iteration  26: 1015358.777 ops/s
# Warmup Iteration  27: 1022101.769 ops/s
# Warmup Iteration  28: 1021911.954 ops/s
# Warmup Iteration  29: 1035350.818 ops/s
# Warmup Iteration  30: 1021895.145 ops/s
Iteration   1: 1003668.290 ops/s
Iteration   2: 1030813.457 ops/s
Iteration   3: 1030977.043 ops/s
Iteration   4: 1031183.105 ops/s
Iteration   5: 1014949.047 ops/s
Iteration   6: 1034345.615 ops/s
Iteration   7: 1031318.943 ops/s
Iteration   8: 1023040.399 ops/s
Iteration   9: 1036590.149 ops/s
Iteration  10: 1033118.871 ops/s
Iteration  11: 1032273.310 ops/s
Iteration  12: 1025874.639 ops/s
Iteration  13: 1017336.825 ops/s
Iteration  14: 1008721.070 ops/s
Iteration  15: 1019497.914 ops/s
Iteration  16: 1031775.203 ops/s
Iteration  17: 1030073.468 ops/s
Iteration  18: 1032368.539 ops/s
Iteration  19: 1032679.862 ops/s
Iteration  20: 1030387.129 ops/s
Iteration  21: 1036399.221 ops/s
Iteration  22: 1018253.461 ops/s
Iteration  23: 1033663.293 ops/s
Iteration  24: 1031806.094 ops/s
Iteration  25: 1030647.017 ops/s
Iteration  26: 1036679.413 ops/s
Iteration  27: 1032802.649 ops/s
Iteration  28: 1038477.820 ops/s
Iteration  29: 1033506.138 ops/s
Iteration  30: 1034365.566 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_removeIf":
  1028586.452 ±(99.9%) 5683.542 ops/s [Average]
  (min, avg, max) = (1003668.290, 1028586.452, 1038477.820), stdev = 8506.859
  CI (99.9%): [1022902.909, 1034269.994] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_removeIf  thrpt   30  1028586.452 ± 5683.542  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 676140.044 ops/s
# Warmup Iteration   2: 754541.988 ops/s
# Warmup Iteration   3: 972874.801 ops/s
# Warmup Iteration   4: 971113.221 ops/s
# Warmup Iteration   5: 963288.215 ops/s
# Warmup Iteration   6: 970325.403 ops/s
# Warmup Iteration   7: 975950.187 ops/s
# Warmup Iteration   8: 979357.102 ops/s
# Warmup Iteration   9: 955158.944 ops/s
# Warmup Iteration  10: 802846.088 ops/s
# Warmup Iteration  11: 979716.074 ops/s
# Warmup Iteration  12: 974294.771 ops/s
# Warmup Iteration  13: 970045.691 ops/s
# Warmup Iteration  14: 975420.637 ops/s
# Warmup Iteration  15: 975682.015 ops/s
# Warmup Iteration  16: 964854.441 ops/s
# Warmup Iteration  17: 1025826.020 ops/s
# Warmup Iteration  18: 1027248.668 ops/s
# Warmup Iteration  19: 1022620.358 ops/s
# Warmup Iteration  20: 1013581.591 ops/s
# Warmup Iteration  21: 1032270.299 ops/s
# Warmup Iteration  22: 1023336.693 ops/s
# Warmup Iteration  23: 1014868.667 ops/s
# Warmup Iteration  24: 1025507.739 ops/s
# Warmup Iteration  25: 1023994.975 ops/s
# Warmup Iteration  26: 1024452.234 ops/s
# Warmup Iteration  27: 1029977.731 ops/s
# Warmup Iteration  28: 1026269.576 ops/s
# Warmup Iteration  29: 1022307.881 ops/s
# Warmup Iteration  30: 1018584.311 ops/s
Iteration   1: 1008917.407 ops/s
Iteration   2: 1030372.493 ops/s
Iteration   3: 1021057.798 ops/s
Iteration   4: 1020177.078 ops/s
Iteration   5: 1026640.716 ops/s
Iteration   6: 1030647.311 ops/s
Iteration   7: 1029798.964 ops/s
Iteration   8: 1027961.328 ops/s
Iteration   9: 1024211.352 ops/s
Iteration  10: 1022671.456 ops/s
Iteration  11: 1022896.091 ops/s
Iteration  12: 1017724.008 ops/s
Iteration  13: 1020167.709 ops/s
Iteration  14: 1030357.178 ops/s
Iteration  15: 1029121.417 ops/s
Iteration  16: 991274.055 ops/s
Iteration  17: 1023566.710 ops/s
Iteration  18: 1014752.456 ops/s
Iteration  19: 1024113.970 ops/s
Iteration  20: 1002214.038 ops/s
Iteration  21: 1025552.991 ops/s
Iteration  22: 1025303.364 ops/s
Iteration  23: 1015114.989 ops/s
Iteration  24: 1028303.153 ops/s
Iteration  25: 1027509.577 ops/s
Iteration  26: 1027072.593 ops/s
Iteration  27: 1025509.677 ops/s
Iteration  28: 1012582.996 ops/s
Iteration  29: 1026942.816 ops/s
Iteration  30: 1020265.744 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_retainAll":
  1021760.048 ±(99.9%) 5917.497 ops/s [Average]
  (min, avg, max) = (991274.055, 1021760.048, 1030647.311), stdev = 8857.031
  CI (99.9%): [1015842.551, 1027677.545] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_retainAll  thrpt   30  1021760.048 ± 5917.497  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 684047.440 ops/s
# Warmup Iteration   2: 772977.750 ops/s
# Warmup Iteration   3: 993644.037 ops/s
# Warmup Iteration   4: 990224.285 ops/s
# Warmup Iteration   5: 995862.897 ops/s
# Warmup Iteration   6: 992991.665 ops/s
# Warmup Iteration   7: 985216.809 ops/s
# Warmup Iteration   8: 987248.524 ops/s
# Warmup Iteration   9: 871489.429 ops/s
# Warmup Iteration  10: 952871.340 ops/s
# Warmup Iteration  11: 978838.427 ops/s
# Warmup Iteration  12: 983139.566 ops/s
# Warmup Iteration  13: 991837.175 ops/s
# Warmup Iteration  14: 995946.610 ops/s
# Warmup Iteration  15: 992712.824 ops/s
# Warmup Iteration  16: 994676.430 ops/s
# Warmup Iteration  17: 1044416.537 ops/s
# Warmup Iteration  18: 1050688.743 ops/s
# Warmup Iteration  19: 1056353.966 ops/s
# Warmup Iteration  20: 1051654.765 ops/s
# Warmup Iteration  21: 1057548.161 ops/s
# Warmup Iteration  22: 1048375.329 ops/s
# Warmup Iteration  23: 1052080.241 ops/s
# Warmup Iteration  24: 1059196.238 ops/s
# Warmup Iteration  25: 1043449.441 ops/s
# Warmup Iteration  26: 1052036.968 ops/s
# Warmup Iteration  27: 1056744.011 ops/s
# Warmup Iteration  28: 1053147.558 ops/s
# Warmup Iteration  29: 1053269.498 ops/s
# Warmup Iteration  30: 1050309.098 ops/s
Iteration   1: 1053085.365 ops/s
Iteration   2: 1040608.958 ops/s
Iteration   3: 1053223.312 ops/s
Iteration   4: 1052822.195 ops/s
Iteration   5: 1054412.214 ops/s
Iteration   6: 1031509.946 ops/s
Iteration   7: 1057931.807 ops/s
Iteration   8: 1058800.341 ops/s
Iteration   9: 1062468.041 ops/s
Iteration  10: 1061407.912 ops/s
Iteration  11: 1054612.379 ops/s
Iteration  12: 1054324.583 ops/s
Iteration  13: 1054107.735 ops/s
Iteration  14: 1061403.096 ops/s
Iteration  15: 1036374.571 ops/s
Iteration  16: 1042882.715 ops/s
Iteration  17: 1038940.963 ops/s
Iteration  18: 1056730.851 ops/s
Iteration  19: 1039030.890 ops/s
Iteration  20: 1056974.839 ops/s
Iteration  21: 1053944.851 ops/s
Iteration  22: 1050163.415 ops/s
Iteration  23: 1043741.611 ops/s
Iteration  24: 1055910.316 ops/s
Iteration  25: 1062902.165 ops/s
Iteration  26: 1056006.485 ops/s
Iteration  27: 1047962.063 ops/s
Iteration  28: 1061282.842 ops/s
Iteration  29: 1062229.803 ops/s
Iteration  30: 1038106.045 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_retainAll_iterable":
  1051796.744 ±(99.9%) 5925.349 ops/s [Average]
  (min, avg, max) = (1031509.946, 1051796.744, 1062902.165), stdev = 8868.785
  CI (99.9%): [1045871.394, 1057722.093] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  1051796.744 ± 5925.349  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_reverseThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_reverseThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 681845.621 ops/s
# Warmup Iteration   2: 760002.637 ops/s
# Warmup Iteration   3: 987268.293 ops/s
# Warmup Iteration   4: 990486.396 ops/s
# Warmup Iteration   5: 991782.612 ops/s
# Warmup Iteration   6: 984889.752 ops/s
# Warmup Iteration   7: 991804.785 ops/s
# Warmup Iteration   8: 976686.219 ops/s
# Warmup Iteration   9: 984103.886 ops/s
# Warmup Iteration  10: 825128.382 ops/s
# Warmup Iteration  11: 981639.729 ops/s
# Warmup Iteration  12: 988206.623 ops/s
# Warmup Iteration  13: 987953.872 ops/s
# Warmup Iteration  14: 986954.861 ops/s
# Warmup Iteration  15: 986962.064 ops/s
# Warmup Iteration  16: 986279.885 ops/s
# Warmup Iteration  17: 1028549.823 ops/s
# Warmup Iteration  18: 1043962.443 ops/s
# Warmup Iteration  19: 1046602.450 ops/s
# Warmup Iteration  20: 1044208.198 ops/s
# Warmup Iteration  21: 1045055.482 ops/s
# Warmup Iteration  22: 1038559.735 ops/s
# Warmup Iteration  23: 1035170.928 ops/s
# Warmup Iteration  24: 1044252.357 ops/s
# Warmup Iteration  25: 1050698.514 ops/s
# Warmup Iteration  26: 1044208.965 ops/s
# Warmup Iteration  27: 1044366.766 ops/s
# Warmup Iteration  28: 1037377.204 ops/s
# Warmup Iteration  29: 1044522.034 ops/s
# Warmup Iteration  30: 1036230.939 ops/s
Iteration   1: 1047712.011 ops/s
Iteration   2: 1029325.478 ops/s
Iteration   3: 1044011.667 ops/s
Iteration   4: 1048211.242 ops/s
Iteration   5: 1040571.805 ops/s
Iteration   6: 1050504.893 ops/s
Iteration   7: 1030108.483 ops/s
Iteration   8: 1047703.541 ops/s
Iteration   9: 1043576.770 ops/s
Iteration  10: 1045652.048 ops/s
Iteration  11: 1046071.917 ops/s
Iteration  12: 1044999.772 ops/s
Iteration  13: 1045954.693 ops/s
Iteration  14: 1047074.146 ops/s
Iteration  15: 1050972.231 ops/s
Iteration  16: 1047458.966 ops/s
Iteration  17: 1037936.243 ops/s
Iteration  18: 1034698.967 ops/s
Iteration  19: 1042512.200 ops/s
Iteration  20: 1046122.618 ops/s
Iteration  21: 1041573.817 ops/s
Iteration  22: 1013233.137 ops/s
Iteration  23: 1033946.971 ops/s
Iteration  24: 1045903.538 ops/s
Iteration  25: 1043807.195 ops/s
Iteration  26: 1024911.432 ops/s
Iteration  27: 1052619.182 ops/s
Iteration  28: 1047187.546 ops/s
Iteration  29: 1046955.924 ops/s
Iteration  30: 1044966.256 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_reverseThis":
  1042209.490 ±(99.9%) 5738.192 ops/s [Average]
  (min, avg, max) = (1013233.137, 1042209.490, 1052619.182), stdev = 8588.656
  CI (99.9%): [1036471.298, 1047947.682] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_reverseThis  thrpt   30  1042209.490 ± 5738.192  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2323878.752 ops/s
# Warmup Iteration   2: 5206645.055 ops/s
# Warmup Iteration   3: 4378745.805 ops/s
# Warmup Iteration   4: 5197091.098 ops/s
# Warmup Iteration   5: 5255581.756 ops/s
# Warmup Iteration   6: 5212611.257 ops/s
# Warmup Iteration   7: 5237356.056 ops/s
# Warmup Iteration   8: 5213001.492 ops/s
# Warmup Iteration   9: 5246004.499 ops/s
# Warmup Iteration  10: 5247634.528 ops/s
# Warmup Iteration  11: 5209855.656 ops/s
# Warmup Iteration  12: 5166346.439 ops/s
# Warmup Iteration  13: 5238463.492 ops/s
# Warmup Iteration  14: 5208423.047 ops/s
# Warmup Iteration  15: 5264796.947 ops/s
# Warmup Iteration  16: 5141110.412 ops/s
# Warmup Iteration  17: 5262776.246 ops/s
# Warmup Iteration  18: 5238411.320 ops/s
# Warmup Iteration  19: 5222786.432 ops/s
# Warmup Iteration  20: 5225244.182 ops/s
# Warmup Iteration  21: 5215538.954 ops/s
# Warmup Iteration  22: 5270326.129 ops/s
# Warmup Iteration  23: 5251595.217 ops/s
# Warmup Iteration  24: 5249587.219 ops/s
# Warmup Iteration  25: 5236448.529 ops/s
# Warmup Iteration  26: 5190595.014 ops/s
# Warmup Iteration  27: 5257046.642 ops/s
# Warmup Iteration  28: 5264431.628 ops/s
# Warmup Iteration  29: 5260464.436 ops/s
# Warmup Iteration  30: 5165790.361 ops/s
Iteration   1: 5262503.858 ops/s
Iteration   2: 5288376.404 ops/s
Iteration   3: 5184532.260 ops/s
Iteration   4: 5140886.339 ops/s
Iteration   5: 5120218.881 ops/s
Iteration   6: 5244186.057 ops/s
Iteration   7: 5225734.444 ops/s
Iteration   8: 5263134.120 ops/s
Iteration   9: 5271871.056 ops/s
Iteration  10: 5238343.412 ops/s
Iteration  11: 5264264.286 ops/s
Iteration  12: 5277500.026 ops/s
Iteration  13: 5237496.981 ops/s
Iteration  14: 5256562.424 ops/s
Iteration  15: 5235049.966 ops/s
Iteration  16: 5167661.165 ops/s
Iteration  17: 5240789.695 ops/s
Iteration  18: 5226414.052 ops/s
Iteration  19: 5212687.389 ops/s
Iteration  20: 5241549.894 ops/s
Iteration  21: 5241653.981 ops/s
Iteration  22: 5210605.937 ops/s
Iteration  23: 5193294.386 ops/s
Iteration  24: 5269165.765 ops/s
Iteration  25: 5263268.799 ops/s
Iteration  26: 5248766.366 ops/s
Iteration  27: 5228874.645 ops/s
Iteration  28: 5163311.878 ops/s
Iteration  29: 5173685.583 ops/s
Iteration  30: 5233130.597 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_select":
  5227517.355 ±(99.9%) 27915.536 ops/s [Average]
  (min, avg, max) = (5120218.881, 5227517.355, 5288376.404), stdev = 41782.663
  CI (99.9%): [5199601.819, 5255432.891] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_select  thrpt   30  5227517.355 ± 27915.536  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 747631.812 ops/s
# Warmup Iteration   2: 793081.289 ops/s
# Warmup Iteration   3: 1018843.358 ops/s
# Warmup Iteration   4: 1021973.023 ops/s
# Warmup Iteration   5: 1022696.855 ops/s
# Warmup Iteration   6: 1016507.677 ops/s
# Warmup Iteration   7: 1014746.722 ops/s
# Warmup Iteration   8: 1022849.310 ops/s
# Warmup Iteration   9: 1016722.962 ops/s
# Warmup Iteration  10: 979877.822 ops/s
# Warmup Iteration  11: 880117.441 ops/s
# Warmup Iteration  12: 1017341.527 ops/s
# Warmup Iteration  13: 1010307.315 ops/s
# Warmup Iteration  14: 1012296.889 ops/s
# Warmup Iteration  15: 1013218.287 ops/s
# Warmup Iteration  16: 1012139.962 ops/s
# Warmup Iteration  17: 1070463.328 ops/s
# Warmup Iteration  18: 1069539.140 ops/s
# Warmup Iteration  19: 1078052.924 ops/s
# Warmup Iteration  20: 1075586.122 ops/s
# Warmup Iteration  21: 1066870.987 ops/s
# Warmup Iteration  22: 1072332.214 ops/s
# Warmup Iteration  23: 1075458.511 ops/s
# Warmup Iteration  24: 1051255.611 ops/s
# Warmup Iteration  25: 1071184.266 ops/s
# Warmup Iteration  26: 1078526.377 ops/s
# Warmup Iteration  27: 1070558.221 ops/s
# Warmup Iteration  28: 1079506.702 ops/s
# Warmup Iteration  29: 1078954.495 ops/s
# Warmup Iteration  30: 1065070.184 ops/s
Iteration   1: 1047295.823 ops/s
Iteration   2: 1074140.240 ops/s
Iteration   3: 1068431.986 ops/s
Iteration   4: 1059965.065 ops/s
Iteration   5: 1079977.457 ops/s
Iteration   6: 1074497.280 ops/s
Iteration   7: 1060496.139 ops/s
Iteration   8: 1074942.006 ops/s
Iteration   9: 1073331.476 ops/s
Iteration  10: 1076912.257 ops/s
Iteration  11: 1076141.273 ops/s
Iteration  12: 1076102.217 ops/s
Iteration  13: 1070724.892 ops/s
Iteration  14: 1077836.490 ops/s
Iteration  15: 1062858.210 ops/s
Iteration  16: 1066583.041 ops/s
Iteration  17: 1076671.334 ops/s
Iteration  18: 1076793.966 ops/s
Iteration  19: 1066164.165 ops/s
Iteration  20: 1063696.370 ops/s
Iteration  21: 1063788.141 ops/s
Iteration  22: 1070243.502 ops/s
Iteration  23: 1077883.300 ops/s
Iteration  24: 1061743.884 ops/s
Iteration  25: 1060780.484 ops/s
Iteration  26: 1069706.877 ops/s
Iteration  27: 1078547.689 ops/s
Iteration  28: 1073724.156 ops/s
Iteration  29: 1078306.740 ops/s
Iteration  30: 1077110.432 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_set":
  1070513.230 ±(99.9%) 5155.058 ops/s [Average]
  (min, avg, max) = (1047295.823, 1070513.230, 1079977.457), stdev = 7715.848
  CI (99.9%): [1065358.172, 1075668.287] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_set  thrpt   30  1070513.230 ± 5155.058  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_set_throws_index_greater_than_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_set_throws_index_greater_than_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 698939.437 ops/s
# Warmup Iteration   2: 761077.956 ops/s
# Warmup Iteration   3: 972998.454 ops/s
# Warmup Iteration   4: 951449.016 ops/s
# Warmup Iteration   5: 971183.222 ops/s
# Warmup Iteration   6: 962211.245 ops/s
# Warmup Iteration   7: 961707.055 ops/s
# Warmup Iteration   8: 960109.217 ops/s
# Warmup Iteration   9: 964327.029 ops/s
# Warmup Iteration  10: 884566.105 ops/s
# Warmup Iteration  11: 901866.852 ops/s
# Warmup Iteration  12: 969256.682 ops/s
# Warmup Iteration  13: 969732.738 ops/s
# Warmup Iteration  14: 973665.556 ops/s
# Warmup Iteration  15: 974359.260 ops/s
# Warmup Iteration  16: 971098.237 ops/s
# Warmup Iteration  17: 1017349.342 ops/s
# Warmup Iteration  18: 1016865.578 ops/s
# Warmup Iteration  19: 1020620.395 ops/s
# Warmup Iteration  20: 1021772.530 ops/s
# Warmup Iteration  21: 1016040.493 ops/s
# Warmup Iteration  22: 1011503.111 ops/s
# Warmup Iteration  23: 1022688.675 ops/s
# Warmup Iteration  24: 1018222.483 ops/s
# Warmup Iteration  25: 1021806.045 ops/s
# Warmup Iteration  26: 999971.237 ops/s
# Warmup Iteration  27: 1014335.366 ops/s
# Warmup Iteration  28: 1020342.903 ops/s
# Warmup Iteration  29: 1024941.797 ops/s
# Warmup Iteration  30: 1017083.267 ops/s
Iteration   1: 1023297.430 ops/s
Iteration   2: 1008384.730 ops/s
Iteration   3: 1017445.896 ops/s
Iteration   4: 1006595.820 ops/s
Iteration   5: 1023180.262 ops/s
Iteration   6: 1029642.804 ops/s
Iteration   7: 1019896.422 ops/s
Iteration   8: 1021533.374 ops/s
Iteration   9: 1018544.718 ops/s
Iteration  10: 1030102.222 ops/s
Iteration  11: 1023218.383 ops/s
Iteration  12: 1015786.031 ops/s
Iteration  13: 1027701.055 ops/s
Iteration  14: 1024413.857 ops/s
Iteration  15: 1027029.435 ops/s
Iteration  16: 1003608.878 ops/s
Iteration  17: 1008096.012 ops/s
Iteration  18: 1020944.238 ops/s
Iteration  19: 1025546.017 ops/s
Iteration  20: 1026383.578 ops/s
Iteration  21: 1025008.041 ops/s
Iteration  22: 1026841.227 ops/s
Iteration  23: 1026625.931 ops/s
Iteration  24: 1008118.460 ops/s
Iteration  25: 1031018.688 ops/s
Iteration  26: 1025363.839 ops/s
Iteration  27: 1032713.621 ops/s
Iteration  28: 1028403.436 ops/s
Iteration  29: 1031510.507 ops/s
Iteration  30: 1030874.148 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_set_throws_index_greater_than_size":
  1022260.969 ±(99.9%) 5432.705 ops/s [Average]
  (min, avg, max) = (1003608.878, 1022260.969, 1032713.621), stdev = 8131.417
  CI (99.9%): [1016828.264, 1027693.673] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_set_throws_index_greater_than_size  thrpt   30  1022260.969 ± 5432.705  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3146514.978 ops/s
# Warmup Iteration   2: 5310913.864 ops/s
# Warmup Iteration   3: 6306442.981 ops/s
# Warmup Iteration   4: 6271384.593 ops/s
# Warmup Iteration   5: 6290329.477 ops/s
# Warmup Iteration   6: 6317548.470 ops/s
# Warmup Iteration   7: 6246414.649 ops/s
# Warmup Iteration   8: 6237416.900 ops/s
# Warmup Iteration   9: 6231388.675 ops/s
# Warmup Iteration  10: 6240751.041 ops/s
# Warmup Iteration  11: 6264881.637 ops/s
# Warmup Iteration  12: 6311210.265 ops/s
# Warmup Iteration  13: 6285858.233 ops/s
# Warmup Iteration  14: 6216498.202 ops/s
# Warmup Iteration  15: 6256705.156 ops/s
# Warmup Iteration  16: 6216397.269 ops/s
# Warmup Iteration  17: 6322189.441 ops/s
# Warmup Iteration  18: 6297817.946 ops/s
# Warmup Iteration  19: 6323993.127 ops/s
# Warmup Iteration  20: 6300306.544 ops/s
# Warmup Iteration  21: 6260055.817 ops/s
# Warmup Iteration  22: 6301221.975 ops/s
# Warmup Iteration  23: 6291622.886 ops/s
# Warmup Iteration  24: 6292038.584 ops/s
# Warmup Iteration  25: 6215372.389 ops/s
# Warmup Iteration  26: 6319018.580 ops/s
# Warmup Iteration  27: 6197284.234 ops/s
# Warmup Iteration  28: 6298524.522 ops/s
# Warmup Iteration  29: 6315410.238 ops/s
# Warmup Iteration  30: 6310066.125 ops/s
Iteration   1: 6325230.467 ops/s
Iteration   2: 6319837.454 ops/s
Iteration   3: 6344689.222 ops/s
Iteration   4: 6327417.496 ops/s
Iteration   5: 6320731.939 ops/s
Iteration   6: 6333509.722 ops/s
Iteration   7: 6308705.247 ops/s
Iteration   8: 6297082.318 ops/s
Iteration   9: 6312091.664 ops/s
Iteration  10: 6328939.610 ops/s
Iteration  11: 6329134.705 ops/s
Iteration  12: 6359786.565 ops/s
Iteration  13: 6233907.255 ops/s
Iteration  14: 6309068.317 ops/s
Iteration  15: 6225544.673 ops/s
Iteration  16: 6306678.248 ops/s
Iteration  17: 6280264.586 ops/s
Iteration  18: 6321762.387 ops/s
Iteration  19: 6299180.157 ops/s
Iteration  20: 6298941.021 ops/s
Iteration  21: 6313783.452 ops/s
Iteration  22: 6302290.817 ops/s
Iteration  23: 6346173.260 ops/s
Iteration  24: 6284702.757 ops/s
Iteration  25: 6291370.800 ops/s
Iteration  26: 6342855.101 ops/s
Iteration  27: 6201515.295 ops/s
Iteration  28: 6308516.938 ops/s
Iteration  29: 6313877.935 ops/s
Iteration  30: 6309850.050 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_size":
  6306581.315 ±(99.9%) 23197.487 ops/s [Average]
  (min, avg, max) = (6201515.295, 6306581.315, 6359786.565), stdev = 34720.910
  CI (99.9%): [6283383.828, 6329778.803] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_size  thrpt   30  6306581.315 ± 23197.487  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 723916.033 ops/s
# Warmup Iteration   2: 757340.176 ops/s
# Warmup Iteration   3: 1004703.117 ops/s
# Warmup Iteration   4: 1006107.327 ops/s
# Warmup Iteration   5: 1002897.462 ops/s
# Warmup Iteration   6: 985446.494 ops/s
# Warmup Iteration   7: 1003447.641 ops/s
# Warmup Iteration   8: 1001997.825 ops/s
# Warmup Iteration   9: 1002389.071 ops/s
# Warmup Iteration  10: 994613.704 ops/s
# Warmup Iteration  11: 869918.581 ops/s
# Warmup Iteration  12: 972627.568 ops/s
# Warmup Iteration  13: 998344.173 ops/s
# Warmup Iteration  14: 1007316.704 ops/s
# Warmup Iteration  15: 996522.352 ops/s
# Warmup Iteration  16: 993317.720 ops/s
# Warmup Iteration  17: 1064664.453 ops/s
# Warmup Iteration  18: 1067713.855 ops/s
# Warmup Iteration  19: 1062300.055 ops/s
# Warmup Iteration  20: 1057417.428 ops/s
# Warmup Iteration  21: 1055876.455 ops/s
# Warmup Iteration  22: 1067224.643 ops/s
# Warmup Iteration  23: 1060170.308 ops/s
# Warmup Iteration  24: 1063860.837 ops/s
# Warmup Iteration  25: 1061091.335 ops/s
# Warmup Iteration  26: 1065977.933 ops/s
# Warmup Iteration  27: 1067764.208 ops/s
# Warmup Iteration  28: 1065413.219 ops/s
# Warmup Iteration  29: 1056208.424 ops/s
# Warmup Iteration  30: 1067476.983 ops/s
Iteration   1: 1067573.936 ops/s
Iteration   2: 1074434.033 ops/s
Iteration   3: 1061084.367 ops/s
Iteration   4: 1072162.921 ops/s
Iteration   5: 1061970.185 ops/s
Iteration   6: 1064871.512 ops/s
Iteration   7: 1043144.747 ops/s
Iteration   8: 1065927.474 ops/s
Iteration   9: 1047541.154 ops/s
Iteration  10: 1051254.913 ops/s
Iteration  11: 1053935.152 ops/s
Iteration  12: 1045926.547 ops/s
Iteration  13: 1051617.623 ops/s
Iteration  14: 1065194.885 ops/s
Iteration  15: 1069335.768 ops/s
Iteration  16: 1057205.613 ops/s
Iteration  17: 1061856.943 ops/s
Iteration  18: 1040262.356 ops/s
Iteration  19: 1034393.222 ops/s
Iteration  20: 1066018.178 ops/s
Iteration  21: 1069053.438 ops/s
Iteration  22: 1066022.626 ops/s
Iteration  23: 1051483.247 ops/s
Iteration  24: 1068096.387 ops/s
Iteration  25: 1062901.283 ops/s
Iteration  26: 1068198.329 ops/s
Iteration  27: 1067177.676 ops/s
Iteration  28: 1058938.708 ops/s
Iteration  29: 1069143.069 ops/s
Iteration  30: 1060435.368 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_subList":
  1059905.389 ±(99.9%) 6765.254 ops/s [Average]
  (min, avg, max) = (1034393.222, 1059905.389, 1074434.033), stdev = 10125.914
  CI (99.9%): [1053140.135, 1066670.643] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_subList  thrpt   30  1059905.389 ± 6765.254  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5519771.632 ops/s
# Warmup Iteration   2: 11173139.987 ops/s
# Warmup Iteration   3: 9324855.365 ops/s
# Warmup Iteration   4: 11294525.004 ops/s
# Warmup Iteration   5: 11289930.323 ops/s
# Warmup Iteration   6: 11289491.606 ops/s
# Warmup Iteration   7: 11287417.546 ops/s
# Warmup Iteration   8: 11321547.324 ops/s
# Warmup Iteration   9: 11291647.974 ops/s
# Warmup Iteration  10: 11325437.106 ops/s
# Warmup Iteration  11: 11158423.594 ops/s
# Warmup Iteration  12: 11244221.445 ops/s
# Warmup Iteration  13: 11264708.885 ops/s
# Warmup Iteration  14: 11129484.417 ops/s
# Warmup Iteration  15: 11314639.633 ops/s
# Warmup Iteration  16: 11309380.154 ops/s
# Warmup Iteration  17: 11333492.153 ops/s
# Warmup Iteration  18: 11333636.390 ops/s
# Warmup Iteration  19: 11312277.164 ops/s
# Warmup Iteration  20: 11276966.557 ops/s
# Warmup Iteration  21: 11144284.096 ops/s
# Warmup Iteration  22: 11294464.845 ops/s
# Warmup Iteration  23: 11288502.031 ops/s
# Warmup Iteration  24: 11272448.721 ops/s
# Warmup Iteration  25: 11168468.406 ops/s
# Warmup Iteration  26: 11274267.830 ops/s
# Warmup Iteration  27: 11225086.091 ops/s
# Warmup Iteration  28: 11326146.959 ops/s
# Warmup Iteration  29: 11306230.240 ops/s
# Warmup Iteration  30: 11178368.576 ops/s
Iteration   1: 11282528.901 ops/s
Iteration   2: 11268665.948 ops/s
Iteration   3: 11278533.122 ops/s
Iteration   4: 11273249.761 ops/s
Iteration   5: 11391082.006 ops/s
Iteration   6: 11255074.378 ops/s
Iteration   7: 11241175.225 ops/s
Iteration   8: 11346309.207 ops/s
Iteration   9: 11340257.743 ops/s
Iteration  10: 11300612.129 ops/s
Iteration  11: 11361667.042 ops/s
Iteration  12: 11342180.477 ops/s
Iteration  13: 11293348.011 ops/s
Iteration  14: 11360526.166 ops/s
Iteration  15: 11104655.040 ops/s
Iteration  16: 11318809.679 ops/s
Iteration  17: 11355837.969 ops/s
Iteration  18: 11213281.238 ops/s
Iteration  19: 11255468.433 ops/s
Iteration  20: 11343367.937 ops/s
Iteration  21: 11178797.799 ops/s
Iteration  22: 11271668.008 ops/s
Iteration  23: 11245315.765 ops/s
Iteration  24: 11284379.897 ops/s
Iteration  25: 11383244.210 ops/s
Iteration  26: 11301749.138 ops/s
Iteration  27: 11254563.965 ops/s
Iteration  28: 11354001.965 ops/s
Iteration  29: 11121633.617 ops/s
Iteration  30: 11200571.920 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_tap":
  11284085.223 ±(99.9%) 47575.679 ops/s [Average]
  (min, avg, max) = (11104655.040, 11284085.223, 11391082.006), stdev = 71209.042
  CI (99.9%): [11236509.544, 11331660.903] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_tap  thrpt   30  11284085.223 ± 47575.679  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12760.472 ops/s
# Warmup Iteration   2: 16774.542 ops/s
# Warmup Iteration   3: 22818.848 ops/s
# Warmup Iteration   4: 22978.961 ops/s
# Warmup Iteration   5: 22792.002 ops/s
# Warmup Iteration   6: 22750.581 ops/s
# Warmup Iteration   7: 22967.478 ops/s
# Warmup Iteration   8: 22931.625 ops/s
# Warmup Iteration   9: 19429.437 ops/s
# Warmup Iteration  10: 22934.312 ops/s
# Warmup Iteration  11: 23077.085 ops/s
# Warmup Iteration  12: 23090.125 ops/s
# Warmup Iteration  13: 22785.170 ops/s
# Warmup Iteration  14: 22993.718 ops/s
# Warmup Iteration  15: 22791.144 ops/s
# Warmup Iteration  16: 22892.406 ops/s
# Warmup Iteration  17: 22942.329 ops/s
# Warmup Iteration  18: 23034.147 ops/s
# Warmup Iteration  19: 22881.647 ops/s
# Warmup Iteration  20: 22870.038 ops/s
# Warmup Iteration  21: 22858.269 ops/s
# Warmup Iteration  22: 22751.381 ops/s
# Warmup Iteration  23: 22963.704 ops/s
# Warmup Iteration  24: 22947.380 ops/s
# Warmup Iteration  25: 23033.121 ops/s
# Warmup Iteration  26: 22766.165 ops/s
# Warmup Iteration  27: 22840.237 ops/s
# Warmup Iteration  28: 22351.673 ops/s
# Warmup Iteration  29: 22875.501 ops/s
# Warmup Iteration  30: 22961.098 ops/s
Iteration   1: 22987.238 ops/s
Iteration   2: 23116.372 ops/s
Iteration   3: 22851.594 ops/s
Iteration   4: 22812.822 ops/s
Iteration   5: 22641.030 ops/s
Iteration   6: 22970.522 ops/s
Iteration   7: 22956.302 ops/s
Iteration   8: 22791.382 ops/s
Iteration   9: 23060.667 ops/s
Iteration  10: 22513.562 ops/s
Iteration  11: 22893.811 ops/s
Iteration  12: 22929.915 ops/s
Iteration  13: 22951.642 ops/s
Iteration  14: 22687.937 ops/s
Iteration  15: 22639.555 ops/s
Iteration  16: 22635.281 ops/s
Iteration  17: 23019.515 ops/s
Iteration  18: 23116.917 ops/s
Iteration  19: 23090.052 ops/s
Iteration  20: 22891.906 ops/s
Iteration  21: 22163.768 ops/s
Iteration  22: 22886.309 ops/s
Iteration  23: 22928.152 ops/s
Iteration  24: 23069.675 ops/s
Iteration  25: 23023.584 ops/s
Iteration  26: 22683.917 ops/s
Iteration  27: 23015.752 ops/s
Iteration  28: 22986.749 ops/s
Iteration  29: 22879.236 ops/s
Iteration  30: 22890.364 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_testEquals":
  22869.518 ±(99.9%) 138.035 ops/s [Average]
  (min, avg, max) = (22163.768, 22869.518, 23116.917), stdev = 206.604
  CI (99.9%): [22731.483, 23007.552] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt      Score     Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_testEquals  thrpt   30  22869.518 ± 138.035  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5214834.380 ops/s
# Warmup Iteration   2: 9375243.122 ops/s
# Warmup Iteration   3: 10561730.763 ops/s
# Warmup Iteration   4: 10815276.147 ops/s
# Warmup Iteration   5: 10926881.980 ops/s
# Warmup Iteration   6: 10930724.577 ops/s
# Warmup Iteration   7: 10784028.987 ops/s
# Warmup Iteration   8: 10719831.671 ops/s
# Warmup Iteration   9: 10913336.694 ops/s
# Warmup Iteration  10: 10915713.617 ops/s
# Warmup Iteration  11: 10838291.848 ops/s
# Warmup Iteration  12: 10742342.733 ops/s
# Warmup Iteration  13: 10752976.407 ops/s
# Warmup Iteration  14: 10758310.375 ops/s
# Warmup Iteration  15: 10744094.107 ops/s
# Warmup Iteration  16: 10898700.563 ops/s
# Warmup Iteration  17: 10901926.949 ops/s
# Warmup Iteration  18: 10923404.678 ops/s
# Warmup Iteration  19: 10733846.126 ops/s
# Warmup Iteration  20: 10804666.147 ops/s
# Warmup Iteration  21: 10846798.149 ops/s
# Warmup Iteration  22: 10866472.824 ops/s
# Warmup Iteration  23: 10876307.667 ops/s
# Warmup Iteration  24: 10900651.266 ops/s
# Warmup Iteration  25: 10936944.645 ops/s
# Warmup Iteration  26: 10829556.625 ops/s
# Warmup Iteration  27: 10922714.546 ops/s
# Warmup Iteration  28: 10876513.833 ops/s
# Warmup Iteration  29: 10828139.371 ops/s
# Warmup Iteration  30: 10871047.744 ops/s
Iteration   1: 10808749.133 ops/s
Iteration   2: 10914579.847 ops/s
Iteration   3: 10706980.869 ops/s
Iteration   4: 10902247.437 ops/s
Iteration   5: 10935307.454 ops/s
Iteration   6: 10848865.527 ops/s
Iteration   7: 10611266.679 ops/s
Iteration   8: 10838857.490 ops/s
Iteration   9: 10786618.083 ops/s
Iteration  10: 10884572.498 ops/s
Iteration  11: 10807981.123 ops/s
Iteration  12: 10943102.193 ops/s
Iteration  13: 10875867.999 ops/s
Iteration  14: 10764200.085 ops/s
Iteration  15: 10884028.459 ops/s
Iteration  16: 10829285.225 ops/s
Iteration  17: 10839866.489 ops/s
Iteration  18: 10901652.872 ops/s
Iteration  19: 10905931.765 ops/s
Iteration  20: 10794578.131 ops/s
Iteration  21: 10851299.623 ops/s
Iteration  22: 10906261.512 ops/s
Iteration  23: 10793705.035 ops/s
Iteration  24: 10919747.789 ops/s
Iteration  25: 10552050.134 ops/s
Iteration  26: 10942324.737 ops/s
Iteration  27: 10743542.642 ops/s
Iteration  28: 10779100.899 ops/s
Iteration  29: 10719110.954 ops/s
Iteration  30: 10856003.863 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_testHashCode":
  10828256.218 ±(99.9%) 62715.108 ops/s [Average]
  (min, avg, max) = (10552050.134, 10828256.218, 10943102.193), stdev = 93869.029
  CI (99.9%): [10765541.110, 10890971.326] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_testHashCode  thrpt   30  10828256.218 ± 62715.108  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1337391.440 ops/s
# Warmup Iteration   2: 2846815.303 ops/s
# Warmup Iteration   3: 2385197.218 ops/s
# Warmup Iteration   4: 2824460.273 ops/s
# Warmup Iteration   5: 2864581.830 ops/s
# Warmup Iteration   6: 2832726.863 ops/s
# Warmup Iteration   7: 2851925.108 ops/s
# Warmup Iteration   8: 2814187.580 ops/s
# Warmup Iteration   9: 2847949.174 ops/s
# Warmup Iteration  10: 2857546.032 ops/s
# Warmup Iteration  11: 2856826.269 ops/s
# Warmup Iteration  12: 2851512.332 ops/s
# Warmup Iteration  13: 2857019.090 ops/s
# Warmup Iteration  14: 2840380.380 ops/s
# Warmup Iteration  15: 2840177.452 ops/s
# Warmup Iteration  16: 2861681.446 ops/s
# Warmup Iteration  17: 2849732.901 ops/s
# Warmup Iteration  18: 2861422.618 ops/s
# Warmup Iteration  19: 2871474.389 ops/s
# Warmup Iteration  20: 2870049.026 ops/s
# Warmup Iteration  21: 2856350.422 ops/s
# Warmup Iteration  22: 2825574.441 ops/s
# Warmup Iteration  23: 2852764.229 ops/s
# Warmup Iteration  24: 2857133.205 ops/s
# Warmup Iteration  25: 2832831.497 ops/s
# Warmup Iteration  26: 2852954.642 ops/s
# Warmup Iteration  27: 2861821.534 ops/s
# Warmup Iteration  28: 2819473.663 ops/s
# Warmup Iteration  29: 2853868.235 ops/s
# Warmup Iteration  30: 2861250.115 ops/s
Iteration   1: 2829857.055 ops/s
Iteration   2: 2851947.888 ops/s
Iteration   3: 2879104.275 ops/s
Iteration   4: 2883319.518 ops/s
Iteration   5: 2871650.343 ops/s
Iteration   6: 2860005.645 ops/s
Iteration   7: 2883684.137 ops/s
Iteration   8: 2840367.129 ops/s
Iteration   9: 2853680.891 ops/s
Iteration  10: 2838444.298 ops/s
Iteration  11: 2871501.726 ops/s
Iteration  12: 2849522.248 ops/s
Iteration  13: 2861309.331 ops/s
Iteration  14: 2861563.749 ops/s
Iteration  15: 2874403.957 ops/s
Iteration  16: 2880639.660 ops/s
Iteration  17: 2867656.286 ops/s
Iteration  18: 2810044.421 ops/s
Iteration  19: 2838517.205 ops/s
Iteration  20: 2859644.617 ops/s
Iteration  21: 2849627.836 ops/s
Iteration  22: 2874560.944 ops/s
Iteration  23: 2860559.528 ops/s
Iteration  24: 2848945.306 ops/s
Iteration  25: 2876479.345 ops/s
Iteration  26: 2869688.443 ops/s
Iteration  27: 2853071.654 ops/s
Iteration  28: 2881478.972 ops/s
Iteration  29: 2847407.927 ops/s
Iteration  30: 2842776.087 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_testToString":
  2859048.681 ±(99.9%) 11841.201 ops/s [Average]
  (min, avg, max) = (2810044.421, 2859048.681, 2883684.137), stdev = 17723.354
  CI (99.9%): [2847207.480, 2870889.882] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_testToString  thrpt   30  2859048.681 ± 11841.201  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3998570.096 ops/s
# Warmup Iteration   2: 6802302.322 ops/s
# Warmup Iteration   3: 8129453.385 ops/s
# Warmup Iteration   4: 8013172.263 ops/s
# Warmup Iteration   5: 8055413.583 ops/s
# Warmup Iteration   6: 8062750.836 ops/s
# Warmup Iteration   7: 8079986.719 ops/s
# Warmup Iteration   8: 8094867.391 ops/s
# Warmup Iteration   9: 8018656.053 ops/s
# Warmup Iteration  10: 8133540.882 ops/s
# Warmup Iteration  11: 8094271.286 ops/s
# Warmup Iteration  12: 8144355.176 ops/s
# Warmup Iteration  13: 8063275.235 ops/s
# Warmup Iteration  14: 8132907.298 ops/s
# Warmup Iteration  15: 7993764.227 ops/s
# Warmup Iteration  16: 8095232.963 ops/s
# Warmup Iteration  17: 7981177.369 ops/s
# Warmup Iteration  18: 8083691.511 ops/s
# Warmup Iteration  19: 8078553.885 ops/s
# Warmup Iteration  20: 8112649.204 ops/s
# Warmup Iteration  21: 8125214.787 ops/s
# Warmup Iteration  22: 8104555.298 ops/s
# Warmup Iteration  23: 8138857.930 ops/s
# Warmup Iteration  24: 8027038.538 ops/s
# Warmup Iteration  25: 8066772.459 ops/s
# Warmup Iteration  26: 8083961.624 ops/s
# Warmup Iteration  27: 8075169.474 ops/s
# Warmup Iteration  28: 8044407.346 ops/s
# Warmup Iteration  29: 8089353.231 ops/s
# Warmup Iteration  30: 8139673.008 ops/s
Iteration   1: 8134475.356 ops/s
Iteration   2: 8116538.763 ops/s
Iteration   3: 8165739.340 ops/s
Iteration   4: 8105426.252 ops/s
Iteration   5: 8083358.197 ops/s
Iteration   6: 8068109.374 ops/s
Iteration   7: 8042552.730 ops/s
Iteration   8: 8112450.428 ops/s
Iteration   9: 8092883.787 ops/s
Iteration  10: 8118718.566 ops/s
Iteration  11: 8153654.146 ops/s
Iteration  12: 8098094.792 ops/s
Iteration  13: 8139843.817 ops/s
Iteration  14: 8064075.128 ops/s
Iteration  15: 8128152.604 ops/s
Iteration  16: 8011007.481 ops/s
Iteration  17: 8145012.985 ops/s
Iteration  18: 8116133.736 ops/s
Iteration  19: 7974004.978 ops/s
Iteration  20: 8069025.048 ops/s
Iteration  21: 8022010.454 ops/s
Iteration  22: 8063517.922 ops/s
Iteration  23: 8063083.931 ops/s
Iteration  24: 8113301.525 ops/s
Iteration  25: 8074802.875 ops/s
Iteration  26: 8077353.557 ops/s
Iteration  27: 8097822.890 ops/s
Iteration  28: 8046326.936 ops/s
Iteration  29: 8155826.178 ops/s
Iteration  30: 7932780.598 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_toArray":
  8086202.812 ±(99.9%) 35723.772 ops/s [Average]
  (min, avg, max) = (7932780.598, 8086202.812, 8165739.340), stdev = 53469.665
  CI (99.9%): [8050479.040, 8121926.585] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_toArray  thrpt   30  8086202.812 ± 35723.772  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2261730.265 ops/s
# Warmup Iteration   2: 5355697.226 ops/s
# Warmup Iteration   3: 5329815.905 ops/s
# Warmup Iteration   4: 4594116.120 ops/s
# Warmup Iteration   5: 5471819.093 ops/s
# Warmup Iteration   6: 5484930.454 ops/s
# Warmup Iteration   7: 5441712.748 ops/s
# Warmup Iteration   8: 5505546.003 ops/s
# Warmup Iteration   9: 5500179.315 ops/s
# Warmup Iteration  10: 5495835.131 ops/s
# Warmup Iteration  11: 5488967.804 ops/s
# Warmup Iteration  12: 5490998.635 ops/s
# Warmup Iteration  13: 5457014.575 ops/s
# Warmup Iteration  14: 5484502.369 ops/s
# Warmup Iteration  15: 5497207.879 ops/s
# Warmup Iteration  16: 5492667.079 ops/s
# Warmup Iteration  17: 5457245.892 ops/s
# Warmup Iteration  18: 5494870.599 ops/s
# Warmup Iteration  19: 5512169.809 ops/s
# Warmup Iteration  20: 5481792.682 ops/s
# Warmup Iteration  21: 5500397.748 ops/s
# Warmup Iteration  22: 5492313.902 ops/s
# Warmup Iteration  23: 5502740.055 ops/s
# Warmup Iteration  24: 5494545.243 ops/s
# Warmup Iteration  25: 5465285.630 ops/s
# Warmup Iteration  26: 5483880.368 ops/s
# Warmup Iteration  27: 5477553.359 ops/s
# Warmup Iteration  28: 5460176.871 ops/s
# Warmup Iteration  29: 5475406.197 ops/s
# Warmup Iteration  30: 5481986.248 ops/s
Iteration   1: 5505918.208 ops/s
Iteration   2: 5512712.833 ops/s
Iteration   3: 5492132.689 ops/s
Iteration   4: 5473662.301 ops/s
Iteration   5: 5507980.517 ops/s
Iteration   6: 5481730.365 ops/s
Iteration   7: 5442788.773 ops/s
Iteration   8: 5484364.089 ops/s
Iteration   9: 5492943.542 ops/s
Iteration  10: 5484535.883 ops/s
Iteration  11: 5486175.630 ops/s
Iteration  12: 5352742.165 ops/s
Iteration  13: 5518458.132 ops/s
Iteration  14: 5488679.686 ops/s
Iteration  15: 5517325.467 ops/s
Iteration  16: 5488726.517 ops/s
Iteration  17: 5512148.221 ops/s
Iteration  18: 5511428.762 ops/s
Iteration  19: 5483274.291 ops/s
Iteration  20: 5511335.510 ops/s
Iteration  21: 5480694.516 ops/s
Iteration  22: 5506867.498 ops/s
Iteration  23: 5480686.443 ops/s
Iteration  24: 5317029.984 ops/s
Iteration  25: 5461706.650 ops/s
Iteration  26: 5398103.251 ops/s
Iteration  27: 5491562.749 ops/s
Iteration  28: 5498185.959 ops/s
Iteration  29: 5475400.327 ops/s
Iteration  30: 5490279.462 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_toBag":
  5478319.347 ±(99.9%) 30744.104 ops/s [Average]
  (min, avg, max) = (5317029.984, 5478319.347, 5518458.132), stdev = 46016.330
  CI (99.9%): [5447575.244, 5509063.451] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_toBag  thrpt   30  5478319.347 ± 30744.104  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7258963.531 ops/s
# Warmup Iteration   2: 13330806.638 ops/s
# Warmup Iteration   3: 12089796.835 ops/s
# Warmup Iteration   4: 13382308.182 ops/s
# Warmup Iteration   5: 13481919.434 ops/s
# Warmup Iteration   6: 13496959.501 ops/s
# Warmup Iteration   7: 13276017.428 ops/s
# Warmup Iteration   8: 13506694.188 ops/s
# Warmup Iteration   9: 13435014.715 ops/s
# Warmup Iteration  10: 13435033.945 ops/s
# Warmup Iteration  11: 13467832.821 ops/s
# Warmup Iteration  12: 13415830.655 ops/s
# Warmup Iteration  13: 13477406.794 ops/s
# Warmup Iteration  14: 13462400.233 ops/s
# Warmup Iteration  15: 13491396.072 ops/s
# Warmup Iteration  16: 13412468.525 ops/s
# Warmup Iteration  17: 13361065.899 ops/s
# Warmup Iteration  18: 13507571.878 ops/s
# Warmup Iteration  19: 13353598.876 ops/s
# Warmup Iteration  20: 13105381.744 ops/s
# Warmup Iteration  21: 13301595.932 ops/s
# Warmup Iteration  22: 13234668.776 ops/s
# Warmup Iteration  23: 13191338.254 ops/s
# Warmup Iteration  24: 13358952.479 ops/s
# Warmup Iteration  25: 13333737.297 ops/s
# Warmup Iteration  26: 13370827.015 ops/s
# Warmup Iteration  27: 13360959.034 ops/s
# Warmup Iteration  28: 13351369.745 ops/s
# Warmup Iteration  29: 13370832.522 ops/s
# Warmup Iteration  30: 13266044.063 ops/s
Iteration   1: 13317954.831 ops/s
Iteration   2: 13367073.968 ops/s
Iteration   3: 13286381.652 ops/s
Iteration   4: 13146389.959 ops/s
Iteration   5: 13395570.298 ops/s
Iteration   6: 13305216.929 ops/s
Iteration   7: 13385831.443 ops/s
Iteration   8: 13332438.675 ops/s
Iteration   9: 13340712.667 ops/s
Iteration  10: 13384423.095 ops/s
Iteration  11: 13335822.325 ops/s
Iteration  12: 13323921.740 ops/s
Iteration  13: 13392611.107 ops/s
Iteration  14: 13500501.004 ops/s
Iteration  15: 13415229.845 ops/s
Iteration  16: 13401564.677 ops/s
Iteration  17: 13343981.315 ops/s
Iteration  18: 13375133.256 ops/s
Iteration  19: 13411922.708 ops/s
Iteration  20: 13103895.630 ops/s
Iteration  21: 13432550.684 ops/s
Iteration  22: 13433025.363 ops/s
Iteration  23: 13396747.788 ops/s
Iteration  24: 13373103.670 ops/s
Iteration  25: 13378968.001 ops/s
Iteration  26: 13381146.768 ops/s
Iteration  27: 13309685.506 ops/s
Iteration  28: 13438466.937 ops/s
Iteration  29: 13437975.635 ops/s
Iteration  30: 13202024.762 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_toImmutable":
  13355009.075 ±(99.9%) 56537.763 ops/s [Average]
  (min, avg, max) = (13103895.630, 13355009.075, 13500501.004), stdev = 84623.069
  CI (99.9%): [13298471.311, 13411546.838] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_toImmutable  thrpt   30  13355009.075 ± 56537.763  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2012278.927 ops/s
# Warmup Iteration   2: 4468016.460 ops/s
# Warmup Iteration   3: 3854318.304 ops/s
# Warmup Iteration   4: 4472281.963 ops/s
# Warmup Iteration   5: 4526303.222 ops/s
# Warmup Iteration   6: 4530138.910 ops/s
# Warmup Iteration   7: 4533169.227 ops/s
# Warmup Iteration   8: 4497906.929 ops/s
# Warmup Iteration   9: 4535806.472 ops/s
# Warmup Iteration  10: 4469424.473 ops/s
# Warmup Iteration  11: 4527912.829 ops/s
# Warmup Iteration  12: 4516969.504 ops/s
# Warmup Iteration  13: 4547463.233 ops/s
# Warmup Iteration  14: 4489774.142 ops/s
# Warmup Iteration  15: 4456844.516 ops/s
# Warmup Iteration  16: 4506296.729 ops/s
# Warmup Iteration  17: 4545809.580 ops/s
# Warmup Iteration  18: 4526642.436 ops/s
# Warmup Iteration  19: 4532067.838 ops/s
# Warmup Iteration  20: 4545693.358 ops/s
# Warmup Iteration  21: 4550395.724 ops/s
# Warmup Iteration  22: 4529775.777 ops/s
# Warmup Iteration  23: 4515286.020 ops/s
# Warmup Iteration  24: 4541866.375 ops/s
# Warmup Iteration  25: 4515467.985 ops/s
# Warmup Iteration  26: 4557307.163 ops/s
# Warmup Iteration  27: 4563157.442 ops/s
# Warmup Iteration  28: 4557305.024 ops/s
# Warmup Iteration  29: 4551228.714 ops/s
# Warmup Iteration  30: 4529364.957 ops/s
Iteration   1: 4509792.837 ops/s
Iteration   2: 4525066.163 ops/s
Iteration   3: 4524752.850 ops/s
Iteration   4: 4538262.686 ops/s
Iteration   5: 4536607.492 ops/s
Iteration   6: 4528117.923 ops/s
Iteration   7: 4501393.884 ops/s
Iteration   8: 4554755.150 ops/s
Iteration   9: 4511509.050 ops/s
Iteration  10: 4538308.324 ops/s
Iteration  11: 4488115.868 ops/s
Iteration  12: 4569368.184 ops/s
Iteration  13: 4536475.589 ops/s
Iteration  14: 4550515.415 ops/s
Iteration  15: 4500455.741 ops/s
Iteration  16: 4386010.155 ops/s
Iteration  17: 4515892.050 ops/s
Iteration  18: 4559141.765 ops/s
Iteration  19: 4532630.567 ops/s
Iteration  20: 4564588.135 ops/s
Iteration  21: 4554925.765 ops/s
Iteration  22: 4532733.239 ops/s
Iteration  23: 4422259.828 ops/s
Iteration  24: 4459436.813 ops/s
Iteration  25: 4530097.545 ops/s
Iteration  26: 4551661.896 ops/s
Iteration  27: 4539107.756 ops/s
Iteration  28: 4546125.688 ops/s
Iteration  29: 4554110.672 ops/s
Iteration  30: 4564216.307 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_toList":
  4524214.511 ±(99.9%) 27412.065 ops/s [Average]
  (min, avg, max) = (4386010.155, 4524214.511, 4569368.184), stdev = 41029.092
  CI (99.9%): [4496802.446, 4551626.577] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_toList  thrpt   30  4524214.511 ± 27412.065  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2084879.828 ops/s
# Warmup Iteration   2: 5283290.649 ops/s
# Warmup Iteration   3: 4328337.238 ops/s
# Warmup Iteration   4: 5282971.008 ops/s
# Warmup Iteration   5: 5293653.369 ops/s
# Warmup Iteration   6: 5320128.971 ops/s
# Warmup Iteration   7: 5321201.392 ops/s
# Warmup Iteration   8: 5360447.208 ops/s
# Warmup Iteration   9: 5353034.437 ops/s
# Warmup Iteration  10: 5296224.633 ops/s
# Warmup Iteration  11: 5338489.247 ops/s
# Warmup Iteration  12: 5303458.664 ops/s
# Warmup Iteration  13: 5337966.601 ops/s
# Warmup Iteration  14: 5307389.936 ops/s
# Warmup Iteration  15: 5347102.939 ops/s
# Warmup Iteration  16: 5231190.091 ops/s
# Warmup Iteration  17: 5333885.984 ops/s
# Warmup Iteration  18: 5314331.226 ops/s
# Warmup Iteration  19: 5328812.538 ops/s
# Warmup Iteration  20: 5247635.553 ops/s
# Warmup Iteration  21: 5285433.714 ops/s
# Warmup Iteration  22: 5337689.683 ops/s
# Warmup Iteration  23: 5355736.617 ops/s
# Warmup Iteration  24: 5282689.835 ops/s
# Warmup Iteration  25: 5285684.880 ops/s
# Warmup Iteration  26: 5307400.844 ops/s
# Warmup Iteration  27: 5283442.483 ops/s
# Warmup Iteration  28: 5354491.083 ops/s
# Warmup Iteration  29: 5279605.248 ops/s
# Warmup Iteration  30: 5323769.471 ops/s
Iteration   1: 5315820.159 ops/s
Iteration   2: 5340287.903 ops/s
Iteration   3: 5253571.968 ops/s
Iteration   4: 5313677.022 ops/s
Iteration   5: 5339159.639 ops/s
Iteration   6: 5308542.372 ops/s
Iteration   7: 5313871.284 ops/s
Iteration   8: 5344301.237 ops/s
Iteration   9: 5237385.518 ops/s
Iteration  10: 5336783.870 ops/s
Iteration  11: 5308506.855 ops/s
Iteration  12: 5314907.598 ops/s
Iteration  13: 5340281.884 ops/s
Iteration  14: 5236163.756 ops/s
Iteration  15: 5129553.919 ops/s
Iteration  16: 5272260.884 ops/s
Iteration  17: 5352867.028 ops/s
Iteration  18: 5335420.187 ops/s
Iteration  19: 5348545.524 ops/s
Iteration  20: 5307085.351 ops/s
Iteration  21: 5339184.552 ops/s
Iteration  22: 5334934.913 ops/s
Iteration  23: 5277292.542 ops/s
Iteration  24: 5306070.348 ops/s
Iteration  25: 5344913.410 ops/s
Iteration  26: 5364385.901 ops/s
Iteration  27: 5335554.814 ops/s
Iteration  28: 5239434.804 ops/s
Iteration  29: 5329094.966 ops/s
Iteration  30: 5326972.004 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_toReversed":
  5308227.740 ±(99.9%) 32699.578 ops/s [Average]
  (min, avg, max) = (5129553.919, 5308227.740, 5364385.901), stdev = 48943.192
  CI (99.9%): [5275528.163, 5340927.318] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_toReversed  thrpt   30  5308227.740 ± 32699.578  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5968619.281 ops/s
# Warmup Iteration   2: 10902257.114 ops/s
# Warmup Iteration   3: 10637625.315 ops/s
# Warmup Iteration   4: 11625284.138 ops/s
# Warmup Iteration   5: 11658288.481 ops/s
# Warmup Iteration   6: 11819425.528 ops/s
# Warmup Iteration   7: 11665595.672 ops/s
# Warmup Iteration   8: 11747044.257 ops/s
# Warmup Iteration   9: 11789769.473 ops/s
# Warmup Iteration  10: 11733724.181 ops/s
# Warmup Iteration  11: 11749085.569 ops/s
# Warmup Iteration  12: 11735690.841 ops/s
# Warmup Iteration  13: 11776596.306 ops/s
# Warmup Iteration  14: 11652546.169 ops/s
# Warmup Iteration  15: 11780996.336 ops/s
# Warmup Iteration  16: 11702896.469 ops/s
# Warmup Iteration  17: 11710643.307 ops/s
# Warmup Iteration  18: 11709602.229 ops/s
# Warmup Iteration  19: 11592106.410 ops/s
# Warmup Iteration  20: 11690166.276 ops/s
# Warmup Iteration  21: 11727517.852 ops/s
# Warmup Iteration  22: 11660475.186 ops/s
# Warmup Iteration  23: 11577325.695 ops/s
# Warmup Iteration  24: 11775700.088 ops/s
# Warmup Iteration  25: 11751237.209 ops/s
# Warmup Iteration  26: 11549388.760 ops/s
# Warmup Iteration  27: 11696525.410 ops/s
# Warmup Iteration  28: 11623848.076 ops/s
# Warmup Iteration  29: 11751502.453 ops/s
# Warmup Iteration  30: 11729368.657 ops/s
Iteration   1: 11704870.088 ops/s
Iteration   2: 11732915.094 ops/s
Iteration   3: 11646497.342 ops/s
Iteration   4: 11687654.929 ops/s
Iteration   5: 11724353.215 ops/s
Iteration   6: 11585249.759 ops/s
Iteration   7: 11681852.062 ops/s
Iteration   8: 11796188.981 ops/s
Iteration   9: 11419919.476 ops/s
Iteration  10: 11787816.274 ops/s
Iteration  11: 11806591.433 ops/s
Iteration  12: 11701288.408 ops/s
Iteration  13: 11779185.100 ops/s
Iteration  14: 11859375.334 ops/s
Iteration  15: 11722966.685 ops/s
Iteration  16: 11796939.015 ops/s
Iteration  17: 11760198.562 ops/s
Iteration  18: 11801166.870 ops/s
Iteration  19: 11659915.562 ops/s
Iteration  20: 11815361.556 ops/s
Iteration  21: 11739767.440 ops/s
Iteration  22: 11769464.529 ops/s
Iteration  23: 11727496.332 ops/s
Iteration  24: 11782610.189 ops/s
Iteration  25: 11680780.932 ops/s
Iteration  26: 11829175.631 ops/s
Iteration  27: 11688453.645 ops/s
Iteration  28: 11682106.247 ops/s
Iteration  29: 11777318.100 ops/s
Iteration  30: 11772109.739 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_toSet":
  11730652.951 ±(99.9%) 56832.264 ops/s [Average]
  (min, avg, max) = (11419919.476, 11730652.951, 11859375.334), stdev = 85063.864
  CI (99.9%): [11673820.687, 11787485.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_toSet  thrpt   30  11730652.951 ± 56832.264  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 697514.262 ops/s
# Warmup Iteration   2: 756749.759 ops/s
# Warmup Iteration   3: 984788.199 ops/s
# Warmup Iteration   4: 973705.453 ops/s
# Warmup Iteration   5: 967978.516 ops/s
# Warmup Iteration   6: 975988.703 ops/s
# Warmup Iteration   7: 979122.280 ops/s
# Warmup Iteration   8: 969931.132 ops/s
# Warmup Iteration   9: 978430.004 ops/s
# Warmup Iteration  10: 841831.398 ops/s
# Warmup Iteration  11: 956490.784 ops/s
# Warmup Iteration  12: 977263.462 ops/s
# Warmup Iteration  13: 973960.945 ops/s
# Warmup Iteration  14: 972973.681 ops/s
# Warmup Iteration  15: 982915.317 ops/s
# Warmup Iteration  16: 975170.224 ops/s
# Warmup Iteration  17: 1028667.491 ops/s
# Warmup Iteration  18: 1035866.364 ops/s
# Warmup Iteration  19: 1028014.841 ops/s
# Warmup Iteration  20: 1035539.859 ops/s
# Warmup Iteration  21: 1031710.482 ops/s
# Warmup Iteration  22: 1028290.297 ops/s
# Warmup Iteration  23: 1031419.479 ops/s
# Warmup Iteration  24: 1012590.851 ops/s
# Warmup Iteration  25: 1029463.087 ops/s
# Warmup Iteration  26: 1037047.327 ops/s
# Warmup Iteration  27: 1030696.528 ops/s
# Warmup Iteration  28: 1010744.360 ops/s
# Warmup Iteration  29: 1025852.397 ops/s
# Warmup Iteration  30: 1016395.458 ops/s
Iteration   1: 1029161.349 ops/s
Iteration   2: 1031023.209 ops/s
Iteration   3: 1034379.244 ops/s
Iteration   4: 1032766.150 ops/s
Iteration   5: 1034703.860 ops/s
Iteration   6: 1033711.268 ops/s
Iteration   7: 1040517.978 ops/s
Iteration   8: 1017948.434 ops/s
Iteration   9: 1033831.901 ops/s
Iteration  10: 1029776.556 ops/s
Iteration  11: 1040867.898 ops/s
Iteration  12: 1039676.018 ops/s
Iteration  13: 1035055.402 ops/s
Iteration  14: 1019614.110 ops/s
Iteration  15: 1032720.760 ops/s
Iteration  16: 1016548.507 ops/s
Iteration  17: 1039701.950 ops/s
Iteration  18: 1035747.096 ops/s
Iteration  19: 1033902.095 ops/s
Iteration  20: 1029440.236 ops/s
Iteration  21: 1025219.022 ops/s
Iteration  22: 1037313.451 ops/s
Iteration  23: 1031170.797 ops/s
Iteration  24: 1035779.621 ops/s
Iteration  25: 1039280.713 ops/s
Iteration  26: 1004083.717 ops/s
Iteration  27: 1031287.305 ops/s
Iteration  28: 1033884.488 ops/s
Iteration  29: 1032051.997 ops/s
Iteration  30: 1037461.192 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_with":
  1031620.877 ±(99.9%) 5376.483 ops/s [Average]
  (min, avg, max) = (1004083.717, 1031620.877, 1040867.898), stdev = 8047.267
  CI (99.9%): [1026244.394, 1036997.360] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_with  thrpt   30  1031620.877 ± 5376.483  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 675415.833 ops/s
# Warmup Iteration   2: 722796.868 ops/s
# Warmup Iteration   3: 955714.381 ops/s
# Warmup Iteration   4: 952467.845 ops/s
# Warmup Iteration   5: 951045.129 ops/s
# Warmup Iteration   6: 952719.810 ops/s
# Warmup Iteration   7: 961930.648 ops/s
# Warmup Iteration   8: 947350.777 ops/s
# Warmup Iteration   9: 955912.904 ops/s
# Warmup Iteration  10: 798529.852 ops/s
# Warmup Iteration  11: 943366.624 ops/s
# Warmup Iteration  12: 947952.734 ops/s
# Warmup Iteration  13: 958754.893 ops/s
# Warmup Iteration  14: 949922.526 ops/s
# Warmup Iteration  15: 943371.461 ops/s
# Warmup Iteration  16: 952658.628 ops/s
# Warmup Iteration  17: 1012521.847 ops/s
# Warmup Iteration  18: 1018815.893 ops/s
# Warmup Iteration  19: 1020014.370 ops/s
# Warmup Iteration  20: 1005399.825 ops/s
# Warmup Iteration  21: 1019726.042 ops/s
# Warmup Iteration  22: 1013958.177 ops/s
# Warmup Iteration  23: 1015019.264 ops/s
# Warmup Iteration  24: 1004948.396 ops/s
# Warmup Iteration  25: 1007253.358 ops/s
# Warmup Iteration  26: 1010866.171 ops/s
# Warmup Iteration  27: 1015723.054 ops/s
# Warmup Iteration  28: 1007970.041 ops/s
# Warmup Iteration  29: 1008420.380 ops/s
# Warmup Iteration  30: 1005623.694 ops/s
Iteration   1: 1022667.440 ops/s
Iteration   2: 1009796.424 ops/s
Iteration   3: 1023760.648 ops/s
Iteration   4: 1014218.358 ops/s
Iteration   5: 1019644.837 ops/s
Iteration   6: 1017104.218 ops/s
Iteration   7: 995736.316 ops/s
Iteration   8: 1020176.465 ops/s
Iteration   9: 1008114.651 ops/s
Iteration  10: 1022799.628 ops/s
Iteration  11: 1009310.222 ops/s
Iteration  12: 1002980.567 ops/s
Iteration  13: 1016233.172 ops/s
Iteration  14: 1023003.559 ops/s
Iteration  15: 1013305.341 ops/s
Iteration  16: 1013245.410 ops/s
Iteration  17: 1021685.794 ops/s
Iteration  18: 1010574.116 ops/s
Iteration  19: 1016467.696 ops/s
Iteration  20: 1017099.623 ops/s
Iteration  21: 1017438.590 ops/s
Iteration  22: 1013596.514 ops/s
Iteration  23: 1010814.037 ops/s
Iteration  24: 1019077.328 ops/s
Iteration  25: 1015432.821 ops/s
Iteration  26: 1018946.853 ops/s
Iteration  27: 1019804.896 ops/s
Iteration  28: 1015291.021 ops/s
Iteration  29: 1015148.460 ops/s
Iteration  30: 1010086.438 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_withAll":
  1015118.715 ±(99.9%) 4150.760 ops/s [Average]
  (min, avg, max) = (995736.316, 1015118.715, 1023760.648), stdev = 6212.663
  CI (99.9%): [1010967.955, 1019269.475] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_withAll  thrpt   30  1015118.715 ± 4150.760  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 673035.376 ops/s
# Warmup Iteration   2: 762025.622 ops/s
# Warmup Iteration   3: 955121.086 ops/s
# Warmup Iteration   4: 974697.814 ops/s
# Warmup Iteration   5: 974787.204 ops/s
# Warmup Iteration   6: 960878.132 ops/s
# Warmup Iteration   7: 972653.063 ops/s
# Warmup Iteration   8: 974535.414 ops/s
# Warmup Iteration   9: 974745.284 ops/s
# Warmup Iteration  10: 799394.298 ops/s
# Warmup Iteration  11: 969500.654 ops/s
# Warmup Iteration  12: 971996.211 ops/s
# Warmup Iteration  13: 972815.884 ops/s
# Warmup Iteration  14: 971035.860 ops/s
# Warmup Iteration  15: 953969.760 ops/s
# Warmup Iteration  16: 956064.386 ops/s
# Warmup Iteration  17: 1023725.068 ops/s
# Warmup Iteration  18: 1026604.316 ops/s
# Warmup Iteration  19: 1024865.779 ops/s
# Warmup Iteration  20: 1024315.838 ops/s
# Warmup Iteration  21: 1025498.837 ops/s
# Warmup Iteration  22: 1014674.759 ops/s
# Warmup Iteration  23: 1016622.864 ops/s
# Warmup Iteration  24: 1026604.546 ops/s
# Warmup Iteration  25: 1023250.809 ops/s
# Warmup Iteration  26: 1013858.405 ops/s
# Warmup Iteration  27: 1018308.087 ops/s
# Warmup Iteration  28: 1020380.889 ops/s
# Warmup Iteration  29: 1024111.486 ops/s
# Warmup Iteration  30: 1015061.390 ops/s
Iteration   1: 1027089.942 ops/s
Iteration   2: 1013042.655 ops/s
Iteration   3: 1022180.677 ops/s
Iteration   4: 1018977.226 ops/s
Iteration   5: 1009602.151 ops/s
Iteration   6: 1014252.523 ops/s
Iteration   7: 1019727.371 ops/s
Iteration   8: 1008305.553 ops/s
Iteration   9: 1025203.715 ops/s
Iteration  10: 1020712.160 ops/s
Iteration  11: 1014544.067 ops/s
Iteration  12: 1008851.616 ops/s
Iteration  13: 1002174.623 ops/s
Iteration  14: 1010585.564 ops/s
Iteration  15: 1022792.491 ops/s
Iteration  16: 1007733.394 ops/s
Iteration  17: 1028855.241 ops/s
Iteration  18: 1023356.890 ops/s
Iteration  19: 1016839.514 ops/s
Iteration  20: 1030950.960 ops/s
Iteration  21: 1021071.948 ops/s
Iteration  22: 1008805.281 ops/s
Iteration  23: 1026226.887 ops/s
Iteration  24: 1016969.012 ops/s
Iteration  25: 1025315.607 ops/s
Iteration  26: 1028102.308 ops/s
Iteration  27: 1014422.181 ops/s
Iteration  28: 1029454.439 ops/s
Iteration  29: 1029934.567 ops/s
Iteration  30: 1025613.579 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_without":
  1019056.471 ±(99.9%) 5322.783 ops/s [Average]
  (min, avg, max) = (1002174.623, 1019056.471, 1030950.960), stdev = 7966.891
  CI (99.9%): [1013733.689, 1024379.254] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_without  thrpt   30  1019056.471 ± 5322.783  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 669010.580 ops/s
# Warmup Iteration   2: 777349.837 ops/s
# Warmup Iteration   3: 986419.119 ops/s
# Warmup Iteration   4: 991983.132 ops/s
# Warmup Iteration   5: 982873.736 ops/s
# Warmup Iteration   6: 986230.198 ops/s
# Warmup Iteration   7: 980278.961 ops/s
# Warmup Iteration   8: 986873.718 ops/s
# Warmup Iteration   9: 819564.677 ops/s
# Warmup Iteration  10: 991116.185 ops/s
# Warmup Iteration  11: 996555.647 ops/s
# Warmup Iteration  12: 1000786.483 ops/s
# Warmup Iteration  13: 997872.286 ops/s
# Warmup Iteration  14: 991212.837 ops/s
# Warmup Iteration  15: 988409.050 ops/s
# Warmup Iteration  16: 986179.768 ops/s
# Warmup Iteration  17: 1044926.938 ops/s
# Warmup Iteration  18: 1042349.658 ops/s
# Warmup Iteration  19: 1053085.802 ops/s
# Warmup Iteration  20: 1046817.073 ops/s
# Warmup Iteration  21: 1054859.662 ops/s
# Warmup Iteration  22: 1053210.155 ops/s
# Warmup Iteration  23: 1051777.474 ops/s
# Warmup Iteration  24: 1048546.136 ops/s
# Warmup Iteration  25: 1049086.815 ops/s
# Warmup Iteration  26: 1044567.520 ops/s
# Warmup Iteration  27: 1050585.657 ops/s
# Warmup Iteration  28: 1042834.977 ops/s
# Warmup Iteration  29: 1038733.507 ops/s
# Warmup Iteration  30: 1036569.792 ops/s
Iteration   1: 1048541.412 ops/s
Iteration   2: 1037542.207 ops/s
Iteration   3: 1051538.896 ops/s
Iteration   4: 1056085.753 ops/s
Iteration   5: 1037011.727 ops/s
Iteration   6: 1059051.964 ops/s
Iteration   7: 1038740.769 ops/s
Iteration   8: 1058719.965 ops/s
Iteration   9: 1050837.095 ops/s
Iteration  10: 1050502.121 ops/s
Iteration  11: 1055676.154 ops/s
Iteration  12: 1055193.061 ops/s
Iteration  13: 1051305.196 ops/s
Iteration  14: 1055651.397 ops/s
Iteration  15: 1050604.234 ops/s
Iteration  16: 1044381.909 ops/s
Iteration  17: 1053151.531 ops/s
Iteration  18: 1045475.252 ops/s
Iteration  19: 1049462.078 ops/s
Iteration  20: 1030644.728 ops/s
Iteration  21: 1038438.647 ops/s
Iteration  22: 1048595.127 ops/s
Iteration  23: 1053803.709 ops/s
Iteration  24: 1055842.248 ops/s
Iteration  25: 1053882.432 ops/s
Iteration  26: 1052285.755 ops/s
Iteration  27: 1043796.448 ops/s
Iteration  28: 1049293.371 ops/s
Iteration  29: 1030426.587 ops/s
Iteration  30: 1045740.637 ops/s


Result "org.eclipse.collections.impl.list.mutable.primitive.UnmodifiableBooleanListTest._Benchmark.benchmark_withoutAll":
  1048407.414 ±(99.9%) 5189.869 ops/s [Average]
  (min, avg, max) = (1030426.587, 1048407.414, 1059051.964), stdev = 7767.952
  CI (99.9%): [1043217.545, 1053597.283] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
UnmodifiableBooleanListTest._Benchmark.benchmark_withoutAll  thrpt   30  1048407.414 ± 5189.869  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 718235.884 ops/s
# Warmup Iteration   2: 752787.943 ops/s
# Warmup Iteration   3: 1004921.311 ops/s
# Warmup Iteration   4: 998524.822 ops/s
# Warmup Iteration   5: 994847.300 ops/s
# Warmup Iteration   6: 1001014.198 ops/s
# Warmup Iteration   7: 999682.321 ops/s
# Warmup Iteration   8: 1004777.987 ops/s
# Warmup Iteration   9: 1006508.920 ops/s
# Warmup Iteration  10: 1001492.724 ops/s
# Warmup Iteration  11: 834659.993 ops/s
# Warmup Iteration  12: 999739.251 ops/s
# Warmup Iteration  13: 993995.159 ops/s
# Warmup Iteration  14: 1002344.421 ops/s
# Warmup Iteration  15: 992050.060 ops/s
# Warmup Iteration  16: 1002333.760 ops/s
# Warmup Iteration  17: 1058981.203 ops/s
# Warmup Iteration  18: 1059732.191 ops/s
# Warmup Iteration  19: 1063071.425 ops/s
# Warmup Iteration  20: 1064645.550 ops/s
# Warmup Iteration  21: 1052379.107 ops/s
# Warmup Iteration  22: 1053724.332 ops/s
# Warmup Iteration  23: 1057132.352 ops/s
# Warmup Iteration  24: 1065697.367 ops/s
# Warmup Iteration  25: 1052236.635 ops/s
# Warmup Iteration  26: 1053199.338 ops/s
# Warmup Iteration  27: 1060548.713 ops/s
# Warmup Iteration  28: 1061384.484 ops/s
# Warmup Iteration  29: 1061978.402 ops/s
# Warmup Iteration  30: 1063404.913 ops/s
Iteration   1: 1061731.526 ops/s
Iteration   2: 1037546.494 ops/s
Iteration   3: 1064796.055 ops/s
Iteration   4: 1056500.553 ops/s
Iteration   5: 1057538.649 ops/s
Iteration   6: 1062366.550 ops/s
Iteration   7: 1065788.757 ops/s
Iteration   8: 1060028.721 ops/s
Iteration   9: 1063387.739 ops/s
Iteration  10: 1070807.178 ops/s
Iteration  11: 1056327.513 ops/s
Iteration  12: 1061774.152 ops/s
Iteration  13: 1061624.524 ops/s
Iteration  14: 1065535.780 ops/s
Iteration  15: 1037034.394 ops/s
Iteration  16: 1058455.163 ops/s
Iteration  17: 1059781.314 ops/s
Iteration  18: 1066257.270 ops/s
Iteration  19: 1061186.590 ops/s
Iteration  20: 1055217.506 ops/s
Iteration  21: 1060824.379 ops/s
Iteration  22: 1063685.491 ops/s
Iteration  23: 1043757.005 ops/s
Iteration  24: 1065487.115 ops/s
Iteration  25: 1053050.968 ops/s
Iteration  26: 1062202.253 ops/s
Iteration  27: 1056830.476 ops/s
Iteration  28: 1061830.824 ops/s
Iteration  29: 1062439.776 ops/s
Iteration  30: 1062777.093 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_add":
  1059219.060 ±(99.9%) 5159.042 ops/s [Average]
  (min, avg, max) = (1037034.394, 1059219.060, 1070807.178), stdev = 7721.811
  CI (99.9%): [1054060.019, 1064378.102] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_add  thrpt   30  1059219.060 ± 5159.042  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 690771.282 ops/s
# Warmup Iteration   2: 736135.001 ops/s
# Warmup Iteration   3: 984824.511 ops/s
# Warmup Iteration   4: 985765.679 ops/s
# Warmup Iteration   5: 976454.665 ops/s
# Warmup Iteration   6: 978235.646 ops/s
# Warmup Iteration   7: 983755.839 ops/s
# Warmup Iteration   8: 978689.586 ops/s
# Warmup Iteration   9: 974695.600 ops/s
# Warmup Iteration  10: 933434.341 ops/s
# Warmup Iteration  11: 865912.080 ops/s
# Warmup Iteration  12: 977215.862 ops/s
# Warmup Iteration  13: 974936.750 ops/s
# Warmup Iteration  14: 986000.831 ops/s
# Warmup Iteration  15: 969012.128 ops/s
# Warmup Iteration  16: 975830.579 ops/s
# Warmup Iteration  17: 1048898.129 ops/s
# Warmup Iteration  18: 1049987.601 ops/s
# Warmup Iteration  19: 1052120.893 ops/s
# Warmup Iteration  20: 1034045.765 ops/s
# Warmup Iteration  21: 1055761.009 ops/s
# Warmup Iteration  22: 1051826.187 ops/s
# Warmup Iteration  23: 1053992.740 ops/s
# Warmup Iteration  24: 1052273.797 ops/s
# Warmup Iteration  25: 1054569.151 ops/s
# Warmup Iteration  26: 1049470.779 ops/s
# Warmup Iteration  27: 1053648.369 ops/s
# Warmup Iteration  28: 1054649.994 ops/s
# Warmup Iteration  29: 1051651.509 ops/s
# Warmup Iteration  30: 1056118.204 ops/s
Iteration   1: 1049603.256 ops/s
Iteration   2: 1032885.552 ops/s
Iteration   3: 1058286.307 ops/s
Iteration   4: 1036855.714 ops/s
Iteration   5: 1052959.706 ops/s
Iteration   6: 1023050.992 ops/s
Iteration   7: 1050333.556 ops/s
Iteration   8: 1054276.900 ops/s
Iteration   9: 1054327.716 ops/s
Iteration  10: 1040512.887 ops/s
Iteration  11: 1053573.732 ops/s
Iteration  12: 1050653.885 ops/s
Iteration  13: 1055912.139 ops/s
Iteration  14: 1038444.350 ops/s
Iteration  15: 1055765.570 ops/s
Iteration  16: 1055152.874 ops/s
Iteration  17: 1047158.123 ops/s
Iteration  18: 1053545.278 ops/s
Iteration  19: 1028615.677 ops/s
Iteration  20: 1049217.640 ops/s
Iteration  21: 1053498.871 ops/s
Iteration  22: 1049481.504 ops/s
Iteration  23: 1058705.303 ops/s
Iteration  24: 1045664.484 ops/s
Iteration  25: 1049038.786 ops/s
Iteration  26: 1046557.990 ops/s
Iteration  27: 1054704.119 ops/s
Iteration  28: 1045426.773 ops/s
Iteration  29: 1034648.833 ops/s
Iteration  30: 1024482.348 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray":
  1046778.029 ±(99.9%) 6629.032 ops/s [Average]
  (min, avg, max) = (1023050.992, 1046778.029, 1058705.303), stdev = 9922.023
  CI (99.9%): [1040148.997, 1053407.060] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray  thrpt   30  1046778.029 ± 6629.032  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 698806.618 ops/s
# Warmup Iteration   2: 770034.941 ops/s
# Warmup Iteration   3: 987105.227 ops/s
# Warmup Iteration   4: 1012024.867 ops/s
# Warmup Iteration   5: 1001719.979 ops/s
# Warmup Iteration   6: 1013203.213 ops/s
# Warmup Iteration   7: 1009763.702 ops/s
# Warmup Iteration   8: 998871.680 ops/s
# Warmup Iteration   9: 1012196.068 ops/s
# Warmup Iteration  10: 885246.292 ops/s
# Warmup Iteration  11: 957117.171 ops/s
# Warmup Iteration  12: 1011673.115 ops/s
# Warmup Iteration  13: 1010185.211 ops/s
# Warmup Iteration  14: 1008902.316 ops/s
# Warmup Iteration  15: 1017122.010 ops/s
# Warmup Iteration  16: 1002466.668 ops/s
# Warmup Iteration  17: 1069112.988 ops/s
# Warmup Iteration  18: 1072406.251 ops/s
# Warmup Iteration  19: 1072657.505 ops/s
# Warmup Iteration  20: 1063176.350 ops/s
# Warmup Iteration  21: 1072094.847 ops/s
# Warmup Iteration  22: 1073044.357 ops/s
# Warmup Iteration  23: 1070324.753 ops/s
# Warmup Iteration  24: 1069306.975 ops/s
# Warmup Iteration  25: 1065389.613 ops/s
# Warmup Iteration  26: 1066756.868 ops/s
# Warmup Iteration  27: 1066385.849 ops/s
# Warmup Iteration  28: 1069100.579 ops/s
# Warmup Iteration  29: 1073873.841 ops/s
# Warmup Iteration  30: 1073601.633 ops/s
Iteration   1: 1071633.737 ops/s
Iteration   2: 1075121.583 ops/s
Iteration   3: 1075631.496 ops/s
Iteration   4: 1065494.861 ops/s
Iteration   5: 1064769.948 ops/s
Iteration   6: 1068853.061 ops/s
Iteration   7: 1070728.102 ops/s
Iteration   8: 1076948.347 ops/s
Iteration   9: 1062707.653 ops/s
Iteration  10: 1076222.679 ops/s
Iteration  11: 1074650.559 ops/s
Iteration  12: 1056826.992 ops/s
Iteration  13: 1075633.106 ops/s
Iteration  14: 1057146.775 ops/s
Iteration  15: 1069915.703 ops/s
Iteration  16: 1056501.664 ops/s
Iteration  17: 1076739.192 ops/s
Iteration  18: 1071999.995 ops/s
Iteration  19: 1073583.679 ops/s
Iteration  20: 1065722.533 ops/s
Iteration  21: 1074510.968 ops/s
Iteration  22: 1070244.260 ops/s
Iteration  23: 1056983.144 ops/s
Iteration  24: 1032861.640 ops/s
Iteration  25: 1072605.428 ops/s
Iteration  26: 1071596.764 ops/s
Iteration  27: 1052279.584 ops/s
Iteration  28: 1069414.898 ops/s
Iteration  29: 1071640.585 ops/s
Iteration  30: 1066327.007 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable":
  1067509.865 ±(99.9%) 6360.224 ops/s [Average]
  (min, avg, max) = (1032861.640, 1067509.865, 1076948.347), stdev = 9519.684
  CI (99.9%): [1061149.641, 1073870.089] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable  thrpt   30  1067509.865 ± 6360.224  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2429791.790 ops/s
# Warmup Iteration   2: 4522123.852 ops/s
# Warmup Iteration   3: 5407588.579 ops/s
# Warmup Iteration   4: 5374656.475 ops/s
# Warmup Iteration   5: 5412300.887 ops/s
# Warmup Iteration   6: 5409838.966 ops/s
# Warmup Iteration   7: 5401968.672 ops/s
# Warmup Iteration   8: 5418458.602 ops/s
# Warmup Iteration   9: 5381791.793 ops/s
# Warmup Iteration  10: 5323731.208 ops/s
# Warmup Iteration  11: 5346635.357 ops/s
# Warmup Iteration  12: 5365770.360 ops/s
# Warmup Iteration  13: 5325676.874 ops/s
# Warmup Iteration  14: 5353278.589 ops/s
# Warmup Iteration  15: 5334271.542 ops/s
# Warmup Iteration  16: 5345774.136 ops/s
# Warmup Iteration  17: 5384401.780 ops/s
# Warmup Iteration  18: 5389559.270 ops/s
# Warmup Iteration  19: 5357838.451 ops/s
# Warmup Iteration  20: 5361675.066 ops/s
# Warmup Iteration  21: 5407647.124 ops/s
# Warmup Iteration  22: 5396223.338 ops/s
# Warmup Iteration  23: 5380221.060 ops/s
# Warmup Iteration  24: 5382334.771 ops/s
# Warmup Iteration  25: 5379419.767 ops/s
# Warmup Iteration  26: 5341193.058 ops/s
# Warmup Iteration  27: 5336036.853 ops/s
# Warmup Iteration  28: 5378757.071 ops/s
# Warmup Iteration  29: 5294962.924 ops/s
# Warmup Iteration  30: 5276956.019 ops/s
Iteration   1: 5326359.415 ops/s
Iteration   2: 5403010.542 ops/s
Iteration   3: 5414649.544 ops/s
Iteration   4: 5412475.212 ops/s
Iteration   5: 5437458.770 ops/s
Iteration   6: 5395885.312 ops/s
Iteration   7: 5415437.200 ops/s
Iteration   8: 5390370.457 ops/s
Iteration   9: 5405719.289 ops/s
Iteration  10: 5391963.453 ops/s
Iteration  11: 5416831.746 ops/s
Iteration  12: 5401340.554 ops/s
Iteration  13: 5449314.807 ops/s
Iteration  14: 5403580.525 ops/s
Iteration  15: 5399951.897 ops/s
Iteration  16: 5400788.351 ops/s
Iteration  17: 5434457.281 ops/s
Iteration  18: 5433376.942 ops/s
Iteration  19: 5425214.964 ops/s
Iteration  20: 5393680.468 ops/s
Iteration  21: 5384160.148 ops/s
Iteration  22: 5403508.743 ops/s
Iteration  23: 5324885.373 ops/s
Iteration  24: 5437412.163 ops/s
Iteration  25: 5375093.193 ops/s
Iteration  26: 5331354.473 ops/s
Iteration  27: 5361789.116 ops/s
Iteration  28: 5390812.747 ops/s
Iteration  29: 5385195.994 ops/s
Iteration  30: 5381773.747 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy":
  5397595.081 ±(99.9%) 20729.768 ops/s [Average]
  (min, avg, max) = (5324885.373, 5397595.081, 5449314.807), stdev = 31027.343
  CI (99.9%): [5376865.313, 5418324.849] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy  thrpt   30  5397595.081 ± 20729.768  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2896661.944 ops/s
# Warmup Iteration   2: 5180058.866 ops/s
# Warmup Iteration   3: 6125719.053 ops/s
# Warmup Iteration   4: 6191788.545 ops/s
# Warmup Iteration   5: 6129529.853 ops/s
# Warmup Iteration   6: 6131384.177 ops/s
# Warmup Iteration   7: 6155919.533 ops/s
# Warmup Iteration   8: 6101922.071 ops/s
# Warmup Iteration   9: 6193167.590 ops/s
# Warmup Iteration  10: 6108183.224 ops/s
# Warmup Iteration  11: 6188353.946 ops/s
# Warmup Iteration  12: 6079270.665 ops/s
# Warmup Iteration  13: 6061925.356 ops/s
# Warmup Iteration  14: 6149912.592 ops/s
# Warmup Iteration  15: 6148495.054 ops/s
# Warmup Iteration  16: 6147981.627 ops/s
# Warmup Iteration  17: 6055853.602 ops/s
# Warmup Iteration  18: 6158651.313 ops/s
# Warmup Iteration  19: 6100443.861 ops/s
# Warmup Iteration  20: 6172139.122 ops/s
# Warmup Iteration  21: 6085166.869 ops/s
# Warmup Iteration  22: 6182864.469 ops/s
# Warmup Iteration  23: 6113000.005 ops/s
# Warmup Iteration  24: 6090443.488 ops/s
# Warmup Iteration  25: 6128990.947 ops/s
# Warmup Iteration  26: 6148462.035 ops/s
# Warmup Iteration  27: 6128977.474 ops/s
# Warmup Iteration  28: 5985817.616 ops/s
# Warmup Iteration  29: 6114423.266 ops/s
# Warmup Iteration  30: 6075788.548 ops/s
Iteration   1: 6157802.377 ops/s
Iteration   2: 6161308.168 ops/s
Iteration   3: 6149537.459 ops/s
Iteration   4: 6083314.714 ops/s
Iteration   5: 6147611.850 ops/s
Iteration   6: 6102161.699 ops/s
Iteration   7: 6162134.539 ops/s
Iteration   8: 6132647.219 ops/s
Iteration   9: 6141175.209 ops/s
Iteration  10: 6149307.787 ops/s
Iteration  11: 5987809.263 ops/s
Iteration  12: 6123428.521 ops/s
Iteration  13: 6161277.185 ops/s
Iteration  14: 6152571.579 ops/s
Iteration  15: 6138482.163 ops/s
Iteration  16: 6156289.568 ops/s
Iteration  17: 6159498.772 ops/s
Iteration  18: 6072898.756 ops/s
Iteration  19: 6085352.219 ops/s
Iteration  20: 6165026.889 ops/s
Iteration  21: 6139018.324 ops/s
Iteration  22: 6088302.928 ops/s
Iteration  23: 6132883.539 ops/s
Iteration  24: 6167394.289 ops/s
Iteration  25: 6163137.814 ops/s
Iteration  26: 6155270.804 ops/s
Iteration  27: 6007321.256 ops/s
Iteration  28: 6127318.875 ops/s
Iteration  29: 6123465.874 ops/s
Iteration  30: 6118794.485 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy":
  6127084.804 ±(99.9%) 29551.035 ops/s [Average]
  (min, avg, max) = (5987809.263, 6127084.804, 6167394.289), stdev = 44230.602
  CI (99.9%): [6097533.769, 6156635.839] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy  thrpt   30  6127084.804 ± 29551.035  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 929867.917 ops/s
# Warmup Iteration   2: 2025215.980 ops/s
# Warmup Iteration   3: 2033673.571 ops/s
# Warmup Iteration   4: 1702127.011 ops/s
# Warmup Iteration   5: 2032000.104 ops/s
# Warmup Iteration   6: 2017245.892 ops/s
# Warmup Iteration   7: 2013051.196 ops/s
# Warmup Iteration   8: 2020371.362 ops/s
# Warmup Iteration   9: 2015845.553 ops/s
# Warmup Iteration  10: 2033745.976 ops/s
# Warmup Iteration  11: 2014398.933 ops/s
# Warmup Iteration  12: 2001849.986 ops/s
# Warmup Iteration  13: 2013659.587 ops/s
# Warmup Iteration  14: 1984894.142 ops/s
# Warmup Iteration  15: 1983254.362 ops/s
# Warmup Iteration  16: 2025789.306 ops/s
# Warmup Iteration  17: 2018379.798 ops/s
# Warmup Iteration  18: 2028035.559 ops/s
# Warmup Iteration  19: 2025819.257 ops/s
# Warmup Iteration  20: 2030287.107 ops/s
# Warmup Iteration  21: 2020629.315 ops/s
# Warmup Iteration  22: 2019101.961 ops/s
# Warmup Iteration  23: 1999305.267 ops/s
# Warmup Iteration  24: 2015574.271 ops/s
# Warmup Iteration  25: 2021488.738 ops/s
# Warmup Iteration  26: 2017160.283 ops/s
# Warmup Iteration  27: 2007236.651 ops/s
# Warmup Iteration  28: 2016592.576 ops/s
# Warmup Iteration  29: 2024154.416 ops/s
# Warmup Iteration  30: 2039711.559 ops/s
Iteration   1: 2014673.247 ops/s
Iteration   2: 1958236.698 ops/s
Iteration   3: 2012883.447 ops/s
Iteration   4: 2045546.461 ops/s
Iteration   5: 2039279.304 ops/s
Iteration   6: 1992872.949 ops/s
Iteration   7: 2016602.984 ops/s
Iteration   8: 2031887.578 ops/s
Iteration   9: 1984101.692 ops/s
Iteration  10: 1989675.574 ops/s
Iteration  11: 2014777.747 ops/s
Iteration  12: 2020006.791 ops/s
Iteration  13: 2007325.449 ops/s
Iteration  14: 2027079.709 ops/s
Iteration  15: 2009993.416 ops/s
Iteration  16: 1993929.488 ops/s
Iteration  17: 1994361.442 ops/s
Iteration  18: 2016169.097 ops/s
Iteration  19: 2019924.964 ops/s
Iteration  20: 2009218.746 ops/s
Iteration  21: 1981659.059 ops/s
Iteration  22: 2010059.486 ops/s
Iteration  23: 1987772.439 ops/s
Iteration  24: 1999549.881 ops/s
Iteration  25: 1990363.867 ops/s
Iteration  26: 2028821.553 ops/s
Iteration  27: 1957109.980 ops/s
Iteration  28: 2026936.964 ops/s
Iteration  29: 2017323.814 ops/s
Iteration  30: 2027569.657 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_appendString":
  2007523.783 ±(99.9%) 14254.556 ops/s [Average]
  (min, avg, max) = (1957109.980, 2007523.783, 2045546.461), stdev = 21335.551
  CI (99.9%): [1993269.226, 2021778.339] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_appendString  thrpt   30  2007523.783 ± 14254.556  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4014613.389 ops/s
# Warmup Iteration   2: 7303509.509 ops/s
# Warmup Iteration   3: 8016687.497 ops/s
# Warmup Iteration   4: 7985788.892 ops/s
# Warmup Iteration   5: 6958666.906 ops/s
# Warmup Iteration   6: 7665482.823 ops/s
# Warmup Iteration   7: 7987430.261 ops/s
# Warmup Iteration   8: 8045940.049 ops/s
# Warmup Iteration   9: 8021698.098 ops/s
# Warmup Iteration  10: 8000441.480 ops/s
# Warmup Iteration  11: 8051069.864 ops/s
# Warmup Iteration  12: 8035533.498 ops/s
# Warmup Iteration  13: 7986387.402 ops/s
# Warmup Iteration  14: 8042359.274 ops/s
# Warmup Iteration  15: 8026053.595 ops/s
# Warmup Iteration  16: 8039376.601 ops/s
# Warmup Iteration  17: 7926327.123 ops/s
# Warmup Iteration  18: 7895505.929 ops/s
# Warmup Iteration  19: 8051084.582 ops/s
# Warmup Iteration  20: 8043451.670 ops/s
# Warmup Iteration  21: 8033307.804 ops/s
# Warmup Iteration  22: 8040418.918 ops/s
# Warmup Iteration  23: 7893495.701 ops/s
# Warmup Iteration  24: 7915043.546 ops/s
# Warmup Iteration  25: 8026505.814 ops/s
# Warmup Iteration  26: 8030557.236 ops/s
# Warmup Iteration  27: 7993370.522 ops/s
# Warmup Iteration  28: 7963461.124 ops/s
# Warmup Iteration  29: 8022629.221 ops/s
# Warmup Iteration  30: 7928622.805 ops/s
Iteration   1: 8029974.021 ops/s
Iteration   2: 8018998.205 ops/s
Iteration   3: 8039142.101 ops/s
Iteration   4: 8046144.682 ops/s
Iteration   5: 7941455.823 ops/s
Iteration   6: 8047850.918 ops/s
Iteration   7: 8044356.985 ops/s
Iteration   8: 8027997.440 ops/s
Iteration   9: 7913422.922 ops/s
Iteration  10: 8074169.663 ops/s
Iteration  11: 7929262.790 ops/s
Iteration  12: 7925891.234 ops/s
Iteration  13: 8050842.046 ops/s
Iteration  14: 7915225.111 ops/s
Iteration  15: 8014778.932 ops/s
Iteration  16: 7989948.329 ops/s
Iteration  17: 8069949.078 ops/s
Iteration  18: 8024301.901 ops/s
Iteration  19: 7811786.403 ops/s
Iteration  20: 7894239.103 ops/s
Iteration  21: 8081307.832 ops/s
Iteration  22: 8070587.579 ops/s
Iteration  23: 8061479.967 ops/s
Iteration  24: 8069507.551 ops/s
Iteration  25: 8052322.817 ops/s
Iteration  26: 8056443.924 ops/s
Iteration  27: 8055526.116 ops/s
Iteration  28: 8065062.626 ops/s
Iteration  29: 7878577.233 ops/s
Iteration  30: 7951865.301 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_asLazy":
  8005080.621 ±(99.9%) 47857.250 ops/s [Average]
  (min, avg, max) = (7811786.403, 8005080.621, 8081307.832), stdev = 71630.484
  CI (99.9%): [7957223.371, 8052937.871] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_asLazy  thrpt   30  8005080.621 ± 47857.250  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6134030.824 ops/s
# Warmup Iteration   2: 12309842.583 ops/s
# Warmup Iteration   3: 10273134.562 ops/s
# Warmup Iteration   4: 12272778.994 ops/s
# Warmup Iteration   5: 12300413.881 ops/s
# Warmup Iteration   6: 12368614.193 ops/s
# Warmup Iteration   7: 12350335.321 ops/s
# Warmup Iteration   8: 12411224.659 ops/s
# Warmup Iteration   9: 12355034.723 ops/s
# Warmup Iteration  10: 12332527.272 ops/s
# Warmup Iteration  11: 12211658.393 ops/s
# Warmup Iteration  12: 12314138.587 ops/s
# Warmup Iteration  13: 12280769.787 ops/s
# Warmup Iteration  14: 12287225.498 ops/s
# Warmup Iteration  15: 12090622.183 ops/s
# Warmup Iteration  16: 12297207.348 ops/s
# Warmup Iteration  17: 12334825.286 ops/s
# Warmup Iteration  18: 12246476.171 ops/s
# Warmup Iteration  19: 12199526.581 ops/s
# Warmup Iteration  20: 12009072.377 ops/s
# Warmup Iteration  21: 12130313.795 ops/s
# Warmup Iteration  22: 12223159.474 ops/s
# Warmup Iteration  23: 12216763.791 ops/s
# Warmup Iteration  24: 12283359.455 ops/s
# Warmup Iteration  25: 12328536.339 ops/s
# Warmup Iteration  26: 12325544.557 ops/s
# Warmup Iteration  27: 12321169.560 ops/s
# Warmup Iteration  28: 12335375.241 ops/s
# Warmup Iteration  29: 12347641.258 ops/s
# Warmup Iteration  30: 12344507.781 ops/s
Iteration   1: 12345024.541 ops/s
Iteration   2: 12400578.216 ops/s
Iteration   3: 12386270.432 ops/s
Iteration   4: 12275353.999 ops/s
Iteration   5: 12367087.984 ops/s
Iteration   6: 12332383.707 ops/s
Iteration   7: 12415726.804 ops/s
Iteration   8: 12187581.362 ops/s
Iteration   9: 12268592.001 ops/s
Iteration  10: 12168343.653 ops/s
Iteration  11: 12276991.700 ops/s
Iteration  12: 12327904.054 ops/s
Iteration  13: 12412783.311 ops/s
Iteration  14: 12081973.681 ops/s
Iteration  15: 12401777.830 ops/s
Iteration  16: 12318718.594 ops/s
Iteration  17: 12279391.999 ops/s
Iteration  18: 12318230.818 ops/s
Iteration  19: 12373613.481 ops/s
Iteration  20: 12269067.602 ops/s
Iteration  21: 12382391.324 ops/s
Iteration  22: 12252343.163 ops/s
Iteration  23: 12013589.987 ops/s
Iteration  24: 12140722.918 ops/s
Iteration  25: 12357660.943 ops/s
Iteration  26: 12302209.464 ops/s
Iteration  27: 12243369.648 ops/s
Iteration  28: 12405984.286 ops/s
Iteration  29: 12366485.656 ops/s
Iteration  30: 12239174.306 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized":
  12297044.249 ±(99.9%) 66993.669 ops/s [Average]
  (min, avg, max) = (12013589.987, 12297044.249, 12415726.804), stdev = 100272.977
  CI (99.9%): [12230050.580, 12364037.918] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized  thrpt   30  12297044.249 ± 66993.669  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6932390.152 ops/s
# Warmup Iteration   2: 13895326.642 ops/s
# Warmup Iteration   3: 11874176.249 ops/s
# Warmup Iteration   4: 14121540.100 ops/s
# Warmup Iteration   5: 13895146.422 ops/s
# Warmup Iteration   6: 13987482.155 ops/s
# Warmup Iteration   7: 14067981.132 ops/s
# Warmup Iteration   8: 14119892.726 ops/s
# Warmup Iteration   9: 14062336.178 ops/s
# Warmup Iteration  10: 14075136.423 ops/s
# Warmup Iteration  11: 14068934.149 ops/s
# Warmup Iteration  12: 14082333.377 ops/s
# Warmup Iteration  13: 14083362.495 ops/s
# Warmup Iteration  14: 14121279.614 ops/s
# Warmup Iteration  15: 14027332.022 ops/s
# Warmup Iteration  16: 13995314.832 ops/s
# Warmup Iteration  17: 14093058.416 ops/s
# Warmup Iteration  18: 13995301.328 ops/s
# Warmup Iteration  19: 13978771.710 ops/s
# Warmup Iteration  20: 13916921.379 ops/s
# Warmup Iteration  21: 14072304.216 ops/s
# Warmup Iteration  22: 14064183.458 ops/s
# Warmup Iteration  23: 14005204.673 ops/s
# Warmup Iteration  24: 14136017.736 ops/s
# Warmup Iteration  25: 14064354.619 ops/s
# Warmup Iteration  26: 13899895.416 ops/s
# Warmup Iteration  27: 13742423.035 ops/s
# Warmup Iteration  28: 14114369.880 ops/s
# Warmup Iteration  29: 14054963.277 ops/s
# Warmup Iteration  30: 14123903.858 ops/s
Iteration   1: 14054257.419 ops/s
Iteration   2: 13916796.110 ops/s
Iteration   3: 13909851.366 ops/s
Iteration   4: 14138171.869 ops/s
Iteration   5: 13888528.206 ops/s
Iteration   6: 14143859.109 ops/s
Iteration   7: 13948348.560 ops/s
Iteration   8: 14098981.769 ops/s
Iteration   9: 14095904.617 ops/s
Iteration  10: 14091299.906 ops/s
Iteration  11: 13902472.554 ops/s
Iteration  12: 14119951.706 ops/s
Iteration  13: 14204449.691 ops/s
Iteration  14: 14164343.296 ops/s
Iteration  15: 14028052.955 ops/s
Iteration  16: 13792044.595 ops/s
Iteration  17: 13845742.696 ops/s
Iteration  18: 13907528.697 ops/s
Iteration  19: 14036726.000 ops/s
Iteration  20: 14015523.646 ops/s
Iteration  21: 14051836.095 ops/s
Iteration  22: 14062076.111 ops/s
Iteration  23: 13857589.665 ops/s
Iteration  24: 14093622.184 ops/s
Iteration  25: 13961777.829 ops/s
Iteration  26: 14134816.815 ops/s
Iteration  27: 13870174.600 ops/s
Iteration  28: 13953422.953 ops/s
Iteration  29: 14241956.436 ops/s
Iteration  30: 14067380.926 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable":
  14019916.279 ±(99.9%) 78103.321 ops/s [Average]
  (min, avg, max) = (13792044.595, 14019916.279, 14241956.436), stdev = 116901.383
  CI (99.9%): [13941812.958, 14098019.600] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  14019916.279 ± 78103.321  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 539966.281 ops/s
# Warmup Iteration   2: 566055.865 ops/s
# Warmup Iteration   3: 765652.143 ops/s
# Warmup Iteration   4: 772208.204 ops/s
# Warmup Iteration   5: 765024.243 ops/s
# Warmup Iteration   6: 769546.177 ops/s
# Warmup Iteration   7: 771160.480 ops/s
# Warmup Iteration   8: 757683.116 ops/s
# Warmup Iteration   9: 769885.261 ops/s
# Warmup Iteration  10: 770545.149 ops/s
# Warmup Iteration  11: 752400.027 ops/s
# Warmup Iteration  12: 637339.404 ops/s
# Warmup Iteration  13: 766249.038 ops/s
# Warmup Iteration  14: 763016.970 ops/s
# Warmup Iteration  15: 765407.721 ops/s
# Warmup Iteration  16: 767214.095 ops/s
# Warmup Iteration  17: 809722.270 ops/s
# Warmup Iteration  18: 805330.178 ops/s
# Warmup Iteration  19: 807737.157 ops/s
# Warmup Iteration  20: 806946.622 ops/s
# Warmup Iteration  21: 811881.197 ops/s
# Warmup Iteration  22: 803168.136 ops/s
# Warmup Iteration  23: 805733.364 ops/s
# Warmup Iteration  24: 805939.109 ops/s
# Warmup Iteration  25: 808527.378 ops/s
# Warmup Iteration  26: 806191.236 ops/s
# Warmup Iteration  27: 813599.281 ops/s
# Warmup Iteration  28: 814052.604 ops/s
# Warmup Iteration  29: 809773.087 ops/s
# Warmup Iteration  30: 802776.813 ops/s
Iteration   1: 792492.556 ops/s
Iteration   2: 806003.479 ops/s
Iteration   3: 797983.986 ops/s
Iteration   4: 799318.455 ops/s
Iteration   5: 809572.695 ops/s
Iteration   6: 813615.008 ops/s
Iteration   7: 810461.535 ops/s
Iteration   8: 804045.290 ops/s
Iteration   9: 800892.875 ops/s
Iteration  10: 798940.195 ops/s
Iteration  11: 805619.548 ops/s
Iteration  12: 799396.579 ops/s
Iteration  13: 815193.415 ops/s
Iteration  14: 804302.036 ops/s
Iteration  15: 808614.429 ops/s
Iteration  16: 811221.995 ops/s
Iteration  17: 811096.510 ops/s
Iteration  18: 796566.126 ops/s
Iteration  19: 807794.595 ops/s
Iteration  20: 807105.582 ops/s
Iteration  21: 809663.771 ops/s
Iteration  22: 811183.227 ops/s
Iteration  23: 815360.762 ops/s
Iteration  24: 806787.008 ops/s
Iteration  25: 810041.298 ops/s
Iteration  26: 807574.955 ops/s
Iteration  27: 805494.409 ops/s
Iteration  28: 799258.032 ops/s
Iteration  29: 805333.655 ops/s
Iteration  30: 811818.088 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator":
  806091.736 ±(99.9%) 3871.003 ops/s [Average]
  (min, avg, max) = (792492.556, 806091.736, 815360.762), stdev = 5793.935
  CI (99.9%): [802220.734, 809962.739] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator  thrpt   30  806091.736 ± 3871.003  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 531850.524 ops/s
# Warmup Iteration   2: 719035.391 ops/s
# Warmup Iteration   3: 867818.906 ops/s
# Warmup Iteration   4: 865757.659 ops/s
# Warmup Iteration   5: 862869.141 ops/s
# Warmup Iteration   6: 865750.992 ops/s
# Warmup Iteration   7: 836680.262 ops/s
# Warmup Iteration   8: 748061.362 ops/s
# Warmup Iteration   9: 861037.220 ops/s
# Warmup Iteration  10: 864368.466 ops/s
# Warmup Iteration  11: 865204.623 ops/s
# Warmup Iteration  12: 866339.365 ops/s
# Warmup Iteration  13: 868798.753 ops/s
# Warmup Iteration  14: 858841.403 ops/s
# Warmup Iteration  15: 869074.953 ops/s
# Warmup Iteration  16: 868053.071 ops/s
# Warmup Iteration  17: 913813.140 ops/s
# Warmup Iteration  18: 914820.513 ops/s
# Warmup Iteration  19: 916409.645 ops/s
# Warmup Iteration  20: 905574.125 ops/s
# Warmup Iteration  21: 912372.946 ops/s
# Warmup Iteration  22: 913389.426 ops/s
# Warmup Iteration  23: 915539.903 ops/s
# Warmup Iteration  24: 911920.607 ops/s
# Warmup Iteration  25: 916956.219 ops/s
# Warmup Iteration  26: 916598.611 ops/s
# Warmup Iteration  27: 916100.949 ops/s
# Warmup Iteration  28: 911471.699 ops/s
# Warmup Iteration  29: 916416.592 ops/s
# Warmup Iteration  30: 910643.752 ops/s
Iteration   1: 912838.507 ops/s
Iteration   2: 916970.044 ops/s
Iteration   3: 903008.221 ops/s
Iteration   4: 915521.031 ops/s
Iteration   5: 907910.455 ops/s
Iteration   6: 909020.430 ops/s
Iteration   7: 917221.309 ops/s
Iteration   8: 901597.302 ops/s
Iteration   9: 913785.655 ops/s
Iteration  10: 914521.636 ops/s
Iteration  11: 919171.763 ops/s
Iteration  12: 911173.097 ops/s
Iteration  13: 916987.443 ops/s
Iteration  14: 905188.536 ops/s
Iteration  15: 914046.916 ops/s
Iteration  16: 912560.325 ops/s
Iteration  17: 911845.641 ops/s
Iteration  18: 916732.258 ops/s
Iteration  19: 911520.701 ops/s
Iteration  20: 912740.809 ops/s
Iteration  21: 893438.439 ops/s
Iteration  22: 912961.799 ops/s
Iteration  23: 909210.484 ops/s
Iteration  24: 895361.841 ops/s
Iteration  25: 914524.370 ops/s
Iteration  26: 912183.755 ops/s
Iteration  27: 915912.398 ops/s
Iteration  28: 916108.756 ops/s
Iteration  29: 917717.829 ops/s
Iteration  30: 910507.278 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove":
  911409.634 ±(99.9%) 4176.969 ops/s [Average]
  (min, avg, max) = (893438.439, 911409.634, 919171.763), stdev = 6251.891
  CI (99.9%): [907232.666, 915586.603] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  911409.634 ± 4176.969  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 141232.528 ops/s
# Warmup Iteration   2: 234732.181 ops/s
# Warmup Iteration   3: 273778.115 ops/s
# Warmup Iteration   4: 274652.040 ops/s
# Warmup Iteration   5: 272008.516 ops/s
# Warmup Iteration   6: 231722.378 ops/s
# Warmup Iteration   7: 275306.192 ops/s
# Warmup Iteration   8: 275348.375 ops/s
# Warmup Iteration   9: 273223.662 ops/s
# Warmup Iteration  10: 276332.653 ops/s
# Warmup Iteration  11: 276817.078 ops/s
# Warmup Iteration  12: 276435.290 ops/s
# Warmup Iteration  13: 276507.684 ops/s
# Warmup Iteration  14: 274837.126 ops/s
# Warmup Iteration  15: 275954.978 ops/s
# Warmup Iteration  16: 275776.675 ops/s
# Warmup Iteration  17: 285565.315 ops/s
# Warmup Iteration  18: 284606.729 ops/s
# Warmup Iteration  19: 284839.946 ops/s
# Warmup Iteration  20: 285508.041 ops/s
# Warmup Iteration  21: 282539.439 ops/s
# Warmup Iteration  22: 284622.536 ops/s
# Warmup Iteration  23: 284898.340 ops/s
# Warmup Iteration  24: 285357.799 ops/s
# Warmup Iteration  25: 281683.207 ops/s
# Warmup Iteration  26: 285845.731 ops/s
# Warmup Iteration  27: 284955.784 ops/s
# Warmup Iteration  28: 285396.621 ops/s
# Warmup Iteration  29: 285726.777 ops/s
# Warmup Iteration  30: 283027.424 ops/s
Iteration   1: 285633.143 ops/s
Iteration   2: 286270.278 ops/s
Iteration   3: 286217.331 ops/s
Iteration   4: 284999.579 ops/s
Iteration   5: 284393.655 ops/s
Iteration   6: 280465.312 ops/s
Iteration   7: 284936.009 ops/s
Iteration   8: 285680.744 ops/s
Iteration   9: 284867.860 ops/s
Iteration  10: 284959.405 ops/s
Iteration  11: 284683.385 ops/s
Iteration  12: 283330.525 ops/s
Iteration  13: 285948.620 ops/s
Iteration  14: 283162.245 ops/s
Iteration  15: 283238.819 ops/s
Iteration  16: 284759.586 ops/s
Iteration  17: 283121.796 ops/s
Iteration  18: 283391.170 ops/s
Iteration  19: 284868.680 ops/s
Iteration  20: 285037.279 ops/s
Iteration  21: 280187.087 ops/s
Iteration  22: 285283.804 ops/s
Iteration  23: 282636.820 ops/s
Iteration  24: 282323.979 ops/s
Iteration  25: 284550.633 ops/s
Iteration  26: 285937.287 ops/s
Iteration  27: 284805.326 ops/s
Iteration  28: 286103.414 ops/s
Iteration  29: 284197.267 ops/s
Iteration  30: 284915.554 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_chunk":
  284363.553 ±(99.9%) 1024.563 ops/s [Average]
  (min, avg, max) = (280187.087, 284363.553, 286270.278), stdev = 1533.518
  CI (99.9%): [283338.990, 285388.116] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_chunk  thrpt   30  284363.553 ± 1024.563  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4414382.577 ops/s
# Warmup Iteration   2: 8316527.878 ops/s
# Warmup Iteration   3: 8913984.195 ops/s
# Warmup Iteration   4: 9279768.978 ops/s
# Warmup Iteration   5: 9344141.724 ops/s
# Warmup Iteration   6: 9361952.022 ops/s
# Warmup Iteration   7: 9247589.797 ops/s
# Warmup Iteration   8: 9315398.705 ops/s
# Warmup Iteration   9: 9295694.764 ops/s
# Warmup Iteration  10: 9327287.301 ops/s
# Warmup Iteration  11: 9313925.219 ops/s
# Warmup Iteration  12: 9392028.131 ops/s
# Warmup Iteration  13: 9327841.436 ops/s
# Warmup Iteration  14: 9350182.743 ops/s
# Warmup Iteration  15: 9304551.997 ops/s
# Warmup Iteration  16: 9169594.182 ops/s
# Warmup Iteration  17: 9220714.151 ops/s
# Warmup Iteration  18: 9289359.945 ops/s
# Warmup Iteration  19: 9401412.320 ops/s
# Warmup Iteration  20: 9361110.753 ops/s
# Warmup Iteration  21: 9349170.040 ops/s
# Warmup Iteration  22: 9349637.669 ops/s
# Warmup Iteration  23: 9324777.602 ops/s
# Warmup Iteration  24: 9346208.343 ops/s
# Warmup Iteration  25: 9396611.944 ops/s
# Warmup Iteration  26: 9371050.388 ops/s
# Warmup Iteration  27: 9348403.684 ops/s
# Warmup Iteration  28: 9372985.389 ops/s
# Warmup Iteration  29: 9297111.293 ops/s
# Warmup Iteration  30: 9275346.308 ops/s
Iteration   1: 9326522.131 ops/s
Iteration   2: 9367083.909 ops/s
Iteration   3: 9351661.946 ops/s
Iteration   4: 9205502.825 ops/s
Iteration   5: 9409512.330 ops/s
Iteration   6: 9302277.753 ops/s
Iteration   7: 9344233.026 ops/s
Iteration   8: 9413997.239 ops/s
Iteration   9: 9431356.483 ops/s
Iteration  10: 9442731.491 ops/s
Iteration  11: 9395196.860 ops/s
Iteration  12: 9430543.442 ops/s
Iteration  13: 9342393.059 ops/s
Iteration  14: 9340433.272 ops/s
Iteration  15: 9320618.655 ops/s
Iteration  16: 9389452.900 ops/s
Iteration  17: 9382658.477 ops/s
Iteration  18: 9243413.052 ops/s
Iteration  19: 9366424.859 ops/s
Iteration  20: 9359995.832 ops/s
Iteration  21: 9375796.223 ops/s
Iteration  22: 9415352.795 ops/s
Iteration  23: 9369893.232 ops/s
Iteration  24: 9337331.271 ops/s
Iteration  25: 9373528.399 ops/s
Iteration  26: 9388992.835 ops/s
Iteration  27: 9403439.679 ops/s
Iteration  28: 9168049.700 ops/s
Iteration  29: 9349639.652 ops/s
Iteration  30: 9377603.802 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_clear":
  9357521.238 ±(99.9%) 41775.432 ops/s [Average]
  (min, avg, max) = (9168049.700, 9357521.238, 9442731.491), stdev = 62527.505
  CI (99.9%): [9315745.806, 9399296.670] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_clear  thrpt   30  9357521.238 ± 41775.432  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 726553.179 ops/s
# Warmup Iteration   2: 1872712.288 ops/s
# Warmup Iteration   3: 1960159.750 ops/s
# Warmup Iteration   4: 1603142.382 ops/s
# Warmup Iteration   5: 1942177.147 ops/s
# Warmup Iteration   6: 1958891.270 ops/s
# Warmup Iteration   7: 1959302.008 ops/s
# Warmup Iteration   8: 1954459.305 ops/s
# Warmup Iteration   9: 1953237.102 ops/s
# Warmup Iteration  10: 1960556.349 ops/s
# Warmup Iteration  11: 1934547.509 ops/s
# Warmup Iteration  12: 1953813.679 ops/s
# Warmup Iteration  13: 1957515.901 ops/s
# Warmup Iteration  14: 1953977.469 ops/s
# Warmup Iteration  15: 1959565.676 ops/s
# Warmup Iteration  16: 1955502.225 ops/s
# Warmup Iteration  17: 1957719.318 ops/s
# Warmup Iteration  18: 1960889.318 ops/s
# Warmup Iteration  19: 1954550.135 ops/s
# Warmup Iteration  20: 1957585.470 ops/s
# Warmup Iteration  21: 1928623.081 ops/s
# Warmup Iteration  22: 1953297.813 ops/s
# Warmup Iteration  23: 1961338.053 ops/s
# Warmup Iteration  24: 1958844.701 ops/s
# Warmup Iteration  25: 1954337.169 ops/s
# Warmup Iteration  26: 1956622.542 ops/s
# Warmup Iteration  27: 1946248.304 ops/s
# Warmup Iteration  28: 1957924.511 ops/s
# Warmup Iteration  29: 1958404.369 ops/s
# Warmup Iteration  30: 1943239.057 ops/s
Iteration   1: 1956347.601 ops/s
Iteration   2: 1959309.359 ops/s
Iteration   3: 1962108.072 ops/s
Iteration   4: 1958492.987 ops/s
Iteration   5: 1945583.822 ops/s
Iteration   6: 1951116.466 ops/s
Iteration   7: 1959384.897 ops/s
Iteration   8: 1957984.095 ops/s
Iteration   9: 1956503.789 ops/s
Iteration  10: 1957845.785 ops/s
Iteration  11: 1951006.066 ops/s
Iteration  12: 1957677.452 ops/s
Iteration  13: 1957639.380 ops/s
Iteration  14: 1951766.481 ops/s
Iteration  15: 1950836.368 ops/s
Iteration  16: 1960059.837 ops/s
Iteration  17: 1952249.397 ops/s
Iteration  18: 1931945.922 ops/s
Iteration  19: 1955832.779 ops/s
Iteration  20: 1961709.789 ops/s
Iteration  21: 1959425.398 ops/s
Iteration  22: 1960547.979 ops/s
Iteration  23: 1959397.801 ops/s
Iteration  24: 1952135.072 ops/s
Iteration  25: 1954411.077 ops/s
Iteration  26: 1941250.077 ops/s
Iteration  27: 1964290.500 ops/s
Iteration  28: 1949488.575 ops/s
Iteration  29: 1961926.958 ops/s
Iteration  30: 1955945.952 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_collect":
  1955140.658 ±(99.9%) 4517.575 ops/s [Average]
  (min, avg, max) = (1931945.922, 1955140.658, 1964290.500), stdev = 6761.694
  CI (99.9%): [1950623.083, 1959658.233] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_collect  thrpt   30  1955140.658 ± 4517.575  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4638574.448 ops/s
# Warmup Iteration   2: 8294021.968 ops/s
# Warmup Iteration   3: 9814792.984 ops/s
# Warmup Iteration   4: 9905091.641 ops/s
# Warmup Iteration   5: 9869961.521 ops/s
# Warmup Iteration   6: 9745692.671 ops/s
# Warmup Iteration   7: 9939266.652 ops/s
# Warmup Iteration   8: 9872172.544 ops/s
# Warmup Iteration   9: 9894263.926 ops/s
# Warmup Iteration  10: 9783510.610 ops/s
# Warmup Iteration  11: 9911256.939 ops/s
# Warmup Iteration  12: 9932990.028 ops/s
# Warmup Iteration  13: 9927454.057 ops/s
# Warmup Iteration  14: 9919337.633 ops/s
# Warmup Iteration  15: 9865049.105 ops/s
# Warmup Iteration  16: 9884424.542 ops/s
# Warmup Iteration  17: 9793195.438 ops/s
# Warmup Iteration  18: 9831805.066 ops/s
# Warmup Iteration  19: 9883404.816 ops/s
# Warmup Iteration  20: 9870495.339 ops/s
# Warmup Iteration  21: 9843917.932 ops/s
# Warmup Iteration  22: 9852918.821 ops/s
# Warmup Iteration  23: 9880932.617 ops/s
# Warmup Iteration  24: 9858936.964 ops/s
# Warmup Iteration  25: 9932055.397 ops/s
# Warmup Iteration  26: 9863985.944 ops/s
# Warmup Iteration  27: 9904937.866 ops/s
# Warmup Iteration  28: 9921310.249 ops/s
# Warmup Iteration  29: 9763364.045 ops/s
# Warmup Iteration  30: 9844992.812 ops/s
Iteration   1: 9818009.439 ops/s
Iteration   2: 9917802.526 ops/s
Iteration   3: 9862985.396 ops/s
Iteration   4: 9851376.183 ops/s
Iteration   5: 9716347.781 ops/s
Iteration   6: 9538383.729 ops/s
Iteration   7: 9866381.051 ops/s
Iteration   8: 9863708.783 ops/s
Iteration   9: 9777313.518 ops/s
Iteration  10: 9842607.293 ops/s
Iteration  11: 9856981.783 ops/s
Iteration  12: 9786313.200 ops/s
Iteration  13: 9808811.258 ops/s
Iteration  14: 9854707.142 ops/s
Iteration  15: 9846890.029 ops/s
Iteration  16: 9815234.493 ops/s
Iteration  17: 9839002.513 ops/s
Iteration  18: 9889850.218 ops/s
Iteration  19: 9867606.516 ops/s
Iteration  20: 9872972.317 ops/s
Iteration  21: 9826002.596 ops/s
Iteration  22: 9838755.369 ops/s
Iteration  23: 9805052.489 ops/s
Iteration  24: 9677343.579 ops/s
Iteration  25: 9838964.635 ops/s
Iteration  26: 9780820.612 ops/s
Iteration  27: 9696063.606 ops/s
Iteration  28: 9795601.885 ops/s
Iteration  29: 9903965.496 ops/s
Iteration  30: 9848204.080 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_contains":
  9816801.984 ±(99.9%) 51166.976 ops/s [Average]
  (min, avg, max) = (9538383.729, 9816801.984, 9917802.526), stdev = 76584.327
  CI (99.9%): [9765635.008, 9867968.960] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_contains  thrpt   30  9816801.984 ± 51166.976  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6926670.834 ops/s
# Warmup Iteration   2: 13853019.415 ops/s
# Warmup Iteration   3: 11793147.130 ops/s
# Warmup Iteration   4: 13879472.356 ops/s
# Warmup Iteration   5: 13924024.785 ops/s
# Warmup Iteration   6: 14030327.622 ops/s
# Warmup Iteration   7: 13827997.701 ops/s
# Warmup Iteration   8: 13946368.744 ops/s
# Warmup Iteration   9: 13984784.898 ops/s
# Warmup Iteration  10: 13976417.743 ops/s
# Warmup Iteration  11: 13857016.299 ops/s
# Warmup Iteration  12: 13991998.201 ops/s
# Warmup Iteration  13: 14004170.515 ops/s
# Warmup Iteration  14: 13987182.527 ops/s
# Warmup Iteration  15: 13853072.993 ops/s
# Warmup Iteration  16: 13860927.436 ops/s
# Warmup Iteration  17: 14016365.761 ops/s
# Warmup Iteration  18: 14009960.850 ops/s
# Warmup Iteration  19: 13871043.409 ops/s
# Warmup Iteration  20: 14004793.997 ops/s
# Warmup Iteration  21: 13839443.291 ops/s
# Warmup Iteration  22: 13940187.473 ops/s
# Warmup Iteration  23: 13952656.927 ops/s
# Warmup Iteration  24: 14055142.098 ops/s
# Warmup Iteration  25: 13995015.767 ops/s
# Warmup Iteration  26: 14058945.256 ops/s
# Warmup Iteration  27: 14050778.513 ops/s
# Warmup Iteration  28: 13955503.925 ops/s
# Warmup Iteration  29: 14041434.552 ops/s
# Warmup Iteration  30: 14028609.301 ops/s
Iteration   1: 14037797.070 ops/s
Iteration   2: 14096970.453 ops/s
Iteration   3: 14079600.249 ops/s
Iteration   4: 14122642.757 ops/s
Iteration   5: 14008736.801 ops/s
Iteration   6: 14083369.362 ops/s
Iteration   7: 14075457.974 ops/s
Iteration   8: 14077003.076 ops/s
Iteration   9: 14051637.326 ops/s
Iteration  10: 14093060.621 ops/s
Iteration  11: 14045094.319 ops/s
Iteration  12: 14048078.221 ops/s
Iteration  13: 14015841.312 ops/s
Iteration  14: 14111771.215 ops/s
Iteration  15: 14082092.924 ops/s
Iteration  16: 13980100.401 ops/s
Iteration  17: 14100861.951 ops/s
Iteration  18: 14105995.394 ops/s
Iteration  19: 13867176.029 ops/s
Iteration  20: 14089281.859 ops/s
Iteration  21: 14098789.385 ops/s
Iteration  22: 13979097.344 ops/s
Iteration  23: 14055849.101 ops/s
Iteration  24: 14142316.831 ops/s
Iteration  25: 13943861.918 ops/s
Iteration  26: 14071142.465 ops/s
Iteration  27: 14084806.413 ops/s
Iteration  28: 14146150.631 ops/s
Iteration  29: 14007505.772 ops/s
Iteration  30: 14116089.704 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray":
  14060605.963 ±(99.9%) 40603.121 ops/s [Average]
  (min, avg, max) = (13867176.029, 14060605.963, 14146150.631), stdev = 60772.844
  CI (99.9%): [14020002.842, 14101209.083] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray  thrpt   30  14060605.963 ± 40603.121  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4628772.862 ops/s
# Warmup Iteration   2: 8383143.346 ops/s
# Warmup Iteration   3: 9547881.323 ops/s
# Warmup Iteration   4: 9833618.527 ops/s
# Warmup Iteration   5: 9879384.285 ops/s
# Warmup Iteration   6: 9832744.184 ops/s
# Warmup Iteration   7: 9776220.150 ops/s
# Warmup Iteration   8: 9803621.953 ops/s
# Warmup Iteration   9: 9750597.277 ops/s
# Warmup Iteration  10: 9878226.773 ops/s
# Warmup Iteration  11: 9753536.488 ops/s
# Warmup Iteration  12: 9818593.179 ops/s
# Warmup Iteration  13: 9812209.033 ops/s
# Warmup Iteration  14: 9876282.090 ops/s
# Warmup Iteration  15: 9785271.711 ops/s
# Warmup Iteration  16: 9825660.944 ops/s
# Warmup Iteration  17: 9861630.209 ops/s
# Warmup Iteration  18: 9884213.706 ops/s
# Warmup Iteration  19: 9885562.221 ops/s
# Warmup Iteration  20: 9816993.246 ops/s
# Warmup Iteration  21: 9760489.120 ops/s
# Warmup Iteration  22: 9773281.753 ops/s
# Warmup Iteration  23: 9819029.934 ops/s
# Warmup Iteration  24: 9822877.064 ops/s
# Warmup Iteration  25: 9769495.776 ops/s
# Warmup Iteration  26: 9813562.112 ops/s
# Warmup Iteration  27: 9815583.292 ops/s
# Warmup Iteration  28: 9807407.001 ops/s
# Warmup Iteration  29: 9800543.730 ops/s
# Warmup Iteration  30: 9852609.263 ops/s
Iteration   1: 9645153.447 ops/s
Iteration   2: 9854485.620 ops/s
Iteration   3: 9838525.748 ops/s
Iteration   4: 9896302.447 ops/s
Iteration   5: 9790192.595 ops/s
Iteration   6: 9760034.422 ops/s
Iteration   7: 9625290.792 ops/s
Iteration   8: 9841027.048 ops/s
Iteration   9: 9638614.648 ops/s
Iteration  10: 9760714.515 ops/s
Iteration  11: 9847472.610 ops/s
Iteration  12: 9850447.002 ops/s
Iteration  13: 9858784.956 ops/s
Iteration  14: 9851460.982 ops/s
Iteration  15: 9710305.938 ops/s
Iteration  16: 9805232.287 ops/s
Iteration  17: 9816663.907 ops/s
Iteration  18: 9739282.150 ops/s
Iteration  19: 9856690.717 ops/s
Iteration  20: 9632878.847 ops/s
Iteration  21: 9865168.826 ops/s
Iteration  22: 9814427.747 ops/s
Iteration  23: 9808161.034 ops/s
Iteration  24: 9797042.490 ops/s
Iteration  25: 9807728.838 ops/s
Iteration  26: 9883617.449 ops/s
Iteration  27: 9701606.294 ops/s
Iteration  28: 9747692.038 ops/s
Iteration  29: 9796443.855 ops/s
Iteration  30: 9664888.387 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable":
  9783544.588 ±(99.9%) 53710.383 ops/s [Average]
  (min, avg, max) = (9625290.792, 9783544.588, 9896302.447), stdev = 80391.178
  CI (99.9%): [9729834.205, 9837254.970] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable  thrpt   30  9783544.588 ± 53710.383  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3887204.015 ops/s
# Warmup Iteration   2: 8087077.680 ops/s
# Warmup Iteration   3: 7007011.959 ops/s
# Warmup Iteration   4: 8442014.908 ops/s
# Warmup Iteration   5: 8394089.009 ops/s
# Warmup Iteration   6: 8414993.252 ops/s
# Warmup Iteration   7: 8362114.874 ops/s
# Warmup Iteration   8: 8441244.627 ops/s
# Warmup Iteration   9: 8399948.970 ops/s
# Warmup Iteration  10: 8379032.213 ops/s
# Warmup Iteration  11: 8445814.021 ops/s
# Warmup Iteration  12: 8380997.483 ops/s
# Warmup Iteration  13: 8391868.513 ops/s
# Warmup Iteration  14: 8378887.625 ops/s
# Warmup Iteration  15: 8414303.207 ops/s
# Warmup Iteration  16: 8432396.810 ops/s
# Warmup Iteration  17: 8447438.495 ops/s
# Warmup Iteration  18: 8446867.706 ops/s
# Warmup Iteration  19: 8445295.378 ops/s
# Warmup Iteration  20: 8418615.579 ops/s
# Warmup Iteration  21: 8367066.487 ops/s
# Warmup Iteration  22: 8419317.665 ops/s
# Warmup Iteration  23: 8404637.499 ops/s
# Warmup Iteration  24: 8460081.622 ops/s
# Warmup Iteration  25: 8422750.419 ops/s
# Warmup Iteration  26: 8441251.163 ops/s
# Warmup Iteration  27: 8346665.918 ops/s
# Warmup Iteration  28: 8433766.830 ops/s
# Warmup Iteration  29: 8440613.866 ops/s
# Warmup Iteration  30: 8363897.243 ops/s
Iteration   1: 8320595.609 ops/s
Iteration   2: 8430752.982 ops/s
Iteration   3: 8434552.912 ops/s
Iteration   4: 8442234.151 ops/s
Iteration   5: 8285507.432 ops/s
Iteration   6: 8382237.684 ops/s
Iteration   7: 8384316.530 ops/s
Iteration   8: 8380297.248 ops/s
Iteration   9: 8402718.975 ops/s
Iteration  10: 8452713.497 ops/s
Iteration  11: 8467158.560 ops/s
Iteration  12: 8421602.329 ops/s
Iteration  13: 8396642.666 ops/s
Iteration  14: 8468726.590 ops/s
Iteration  15: 8419608.617 ops/s
Iteration  16: 8417573.729 ops/s
Iteration  17: 8444120.598 ops/s
Iteration  18: 8446559.147 ops/s
Iteration  19: 8424820.472 ops/s
Iteration  20: 8294740.267 ops/s
Iteration  21: 8380407.607 ops/s
Iteration  22: 8472523.412 ops/s
Iteration  23: 8402546.374 ops/s
Iteration  24: 8413859.425 ops/s
Iteration  25: 8434327.684 ops/s
Iteration  26: 8259871.888 ops/s
Iteration  27: 8394310.920 ops/s
Iteration  28: 8331117.313 ops/s
Iteration  29: 8389973.956 ops/s
Iteration  30: 8438031.925 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray":
  8401148.350 ±(99.9%) 36431.459 ops/s [Average]
  (min, avg, max) = (8259871.888, 8401148.350, 8472523.412), stdev = 54528.896
  CI (99.9%): [8364716.891, 8437579.809] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray  thrpt   30  8401148.350 ± 36431.459  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 637739.291 ops/s
# Warmup Iteration   2: 1058331.043 ops/s
# Warmup Iteration   3: 1194567.705 ops/s
# Warmup Iteration   4: 1188311.100 ops/s
# Warmup Iteration   5: 1186002.836 ops/s
# Warmup Iteration   6: 987928.024 ops/s
# Warmup Iteration   7: 1189830.038 ops/s
# Warmup Iteration   8: 1180051.700 ops/s
# Warmup Iteration   9: 1193164.261 ops/s
# Warmup Iteration  10: 1189789.947 ops/s
# Warmup Iteration  11: 1191603.418 ops/s
# Warmup Iteration  12: 1180087.551 ops/s
# Warmup Iteration  13: 1177280.824 ops/s
# Warmup Iteration  14: 1192226.114 ops/s
# Warmup Iteration  15: 1190999.032 ops/s
# Warmup Iteration  16: 1184503.988 ops/s
# Warmup Iteration  17: 1147141.278 ops/s
# Warmup Iteration  18: 1150044.754 ops/s
# Warmup Iteration  19: 1149145.239 ops/s
# Warmup Iteration  20: 1149982.662 ops/s
# Warmup Iteration  21: 1151009.387 ops/s
# Warmup Iteration  22: 1144113.847 ops/s
# Warmup Iteration  23: 1139203.001 ops/s
# Warmup Iteration  24: 1147253.834 ops/s
# Warmup Iteration  25: 1143089.631 ops/s
# Warmup Iteration  26: 1148194.251 ops/s
# Warmup Iteration  27: 1137577.205 ops/s
# Warmup Iteration  28: 1150536.864 ops/s
# Warmup Iteration  29: 1132961.082 ops/s
# Warmup Iteration  30: 1151855.344 ops/s
Iteration   1: 1150957.445 ops/s
Iteration   2: 1150339.268 ops/s
Iteration   3: 1154543.574 ops/s
Iteration   4: 1148093.442 ops/s
Iteration   5: 1152428.598 ops/s
Iteration   6: 1153476.320 ops/s
Iteration   7: 1144319.025 ops/s
Iteration   8: 1152011.348 ops/s
Iteration   9: 1134917.196 ops/s
Iteration  10: 1142221.482 ops/s
Iteration  11: 1143361.374 ops/s
Iteration  12: 1148050.797 ops/s
Iteration  13: 1144025.667 ops/s
Iteration  14: 1147744.928 ops/s
Iteration  15: 1154419.614 ops/s
Iteration  16: 1146180.722 ops/s
Iteration  17: 1148715.577 ops/s
Iteration  18: 1147770.693 ops/s
Iteration  19: 1151475.841 ops/s
Iteration  20: 1151853.823 ops/s
Iteration  21: 1152458.062 ops/s
Iteration  22: 1139822.696 ops/s
Iteration  23: 1155312.364 ops/s
Iteration  24: 1149406.310 ops/s
Iteration  25: 1153893.482 ops/s
Iteration  26: 1147170.554 ops/s
Iteration  27: 1150716.241 ops/s
Iteration  28: 1135613.262 ops/s
Iteration  29: 1150653.354 ops/s
Iteration  30: 1147548.371 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable":
  1148316.714 ±(99.9%) 3493.484 ops/s [Average]
  (min, avg, max) = (1134917.196, 1148316.714, 1155312.364), stdev = 5228.883
  CI (99.9%): [1144823.230, 1151810.198] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1148316.714 ± 3493.484  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3551610.574 ops/s
# Warmup Iteration   2: 8161163.430 ops/s
# Warmup Iteration   3: 6904423.265 ops/s
# Warmup Iteration   4: 8170364.593 ops/s
# Warmup Iteration   5: 8237978.899 ops/s
# Warmup Iteration   6: 8267008.558 ops/s
# Warmup Iteration   7: 8305605.140 ops/s
# Warmup Iteration   8: 8303365.334 ops/s
# Warmup Iteration   9: 8212483.072 ops/s
# Warmup Iteration  10: 8291896.043 ops/s
# Warmup Iteration  11: 8191728.707 ops/s
# Warmup Iteration  12: 8303705.478 ops/s
# Warmup Iteration  13: 8264124.525 ops/s
# Warmup Iteration  14: 8250732.251 ops/s
# Warmup Iteration  15: 8262628.206 ops/s
# Warmup Iteration  16: 8284163.068 ops/s
# Warmup Iteration  17: 8313827.738 ops/s
# Warmup Iteration  18: 8233959.642 ops/s
# Warmup Iteration  19: 8268571.712 ops/s
# Warmup Iteration  20: 8246766.912 ops/s
# Warmup Iteration  21: 8257889.275 ops/s
# Warmup Iteration  22: 8206153.490 ops/s
# Warmup Iteration  23: 8248543.886 ops/s
# Warmup Iteration  24: 8340495.130 ops/s
# Warmup Iteration  25: 8293608.620 ops/s
# Warmup Iteration  26: 8301185.573 ops/s
# Warmup Iteration  27: 8278685.736 ops/s
# Warmup Iteration  28: 8285671.642 ops/s
# Warmup Iteration  29: 8293924.530 ops/s
# Warmup Iteration  30: 8277726.832 ops/s
Iteration   1: 8298926.475 ops/s
Iteration   2: 8278872.077 ops/s
Iteration   3: 8292339.418 ops/s
Iteration   4: 8314241.702 ops/s
Iteration   5: 8215899.552 ops/s
Iteration   6: 8139127.786 ops/s
Iteration   7: 8277836.497 ops/s
Iteration   8: 8262732.487 ops/s
Iteration   9: 8314295.223 ops/s
Iteration  10: 8029614.571 ops/s
Iteration  11: 8162613.534 ops/s
Iteration  12: 8278782.381 ops/s
Iteration  13: 8330714.960 ops/s
Iteration  14: 8317884.874 ops/s
Iteration  15: 8309635.233 ops/s
Iteration  16: 8239230.686 ops/s
Iteration  17: 8303713.743 ops/s
Iteration  18: 8292014.872 ops/s
Iteration  19: 8325473.081 ops/s
Iteration  20: 8323380.254 ops/s
Iteration  21: 8248866.181 ops/s
Iteration  22: 8260324.788 ops/s
Iteration  23: 8160272.819 ops/s
Iteration  24: 8277336.287 ops/s
Iteration  25: 8250382.207 ops/s
Iteration  26: 8254061.267 ops/s
Iteration  27: 8237236.854 ops/s
Iteration  28: 8214627.070 ops/s
Iteration  29: 8337366.629 ops/s
Iteration  30: 8284919.029 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray":
  8261090.751 ±(99.9%) 44858.509 ops/s [Average]
  (min, avg, max) = (8029614.571, 8261090.751, 8337366.629), stdev = 67142.109
  CI (99.9%): [8216232.242, 8305949.260] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray  thrpt   30  8261090.751 ± 44858.509  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 573891.185 ops/s
# Warmup Iteration   2: 910769.364 ops/s
# Warmup Iteration   3: 1040023.307 ops/s
# Warmup Iteration   4: 1042469.555 ops/s
# Warmup Iteration   5: 1037246.863 ops/s
# Warmup Iteration   6: 915312.067 ops/s
# Warmup Iteration   7: 1001209.130 ops/s
# Warmup Iteration   8: 1042446.294 ops/s
# Warmup Iteration   9: 1040643.199 ops/s
# Warmup Iteration  10: 1047221.259 ops/s
# Warmup Iteration  11: 1047113.493 ops/s
# Warmup Iteration  12: 1044304.224 ops/s
# Warmup Iteration  13: 1040116.213 ops/s
# Warmup Iteration  14: 1045845.967 ops/s
# Warmup Iteration  15: 1045762.428 ops/s
# Warmup Iteration  16: 1042872.527 ops/s
# Warmup Iteration  17: 1018108.902 ops/s
# Warmup Iteration  18: 1019568.507 ops/s
# Warmup Iteration  19: 1015705.799 ops/s
# Warmup Iteration  20: 1019019.091 ops/s
# Warmup Iteration  21: 1019042.739 ops/s
# Warmup Iteration  22: 1018347.608 ops/s
# Warmup Iteration  23: 1019198.403 ops/s
# Warmup Iteration  24: 1019822.116 ops/s
# Warmup Iteration  25: 1019733.080 ops/s
# Warmup Iteration  26: 1020866.113 ops/s
# Warmup Iteration  27: 1017336.585 ops/s
# Warmup Iteration  28: 1017729.228 ops/s
# Warmup Iteration  29: 1018576.352 ops/s
# Warmup Iteration  30: 1018956.624 ops/s
Iteration   1: 1023121.401 ops/s
Iteration   2: 1021207.855 ops/s
Iteration   3: 1002529.434 ops/s
Iteration   4: 1016117.581 ops/s
Iteration   5: 1019314.197 ops/s
Iteration   6: 1015165.330 ops/s
Iteration   7: 1020188.701 ops/s
Iteration   8: 1016346.161 ops/s
Iteration   9: 1018392.165 ops/s
Iteration  10: 1004366.685 ops/s
Iteration  11: 1014353.620 ops/s
Iteration  12: 1007803.841 ops/s
Iteration  13: 1018007.192 ops/s
Iteration  14: 1019296.132 ops/s
Iteration  15: 1015342.701 ops/s
Iteration  16: 1020281.586 ops/s
Iteration  17: 1018681.680 ops/s
Iteration  18: 1018253.532 ops/s
Iteration  19: 1015207.882 ops/s
Iteration  20: 1021691.614 ops/s
Iteration  21: 1017986.480 ops/s
Iteration  22: 1012676.478 ops/s
Iteration  23: 1014102.630 ops/s
Iteration  24: 1001996.166 ops/s
Iteration  25: 998446.698 ops/s
Iteration  26: 1022094.064 ops/s
Iteration  27: 1019847.643 ops/s
Iteration  28: 1000163.296 ops/s
Iteration  29: 1023910.031 ops/s
Iteration  30: 1019542.791 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable":
  1015214.519 ±(99.9%) 4741.697 ops/s [Average]
  (min, avg, max) = (998446.698, 1015214.519, 1023910.031), stdev = 7097.149
  CI (99.9%): [1010472.822, 1019956.216] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  1015214.519 ± 4741.697  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1412550.258 ops/s
# Warmup Iteration   2: 3132119.403 ops/s
# Warmup Iteration   3: 3242692.817 ops/s
# Warmup Iteration   4: 2853946.514 ops/s
# Warmup Iteration   5: 3019785.550 ops/s
# Warmup Iteration   6: 3246935.416 ops/s
# Warmup Iteration   7: 3239336.578 ops/s
# Warmup Iteration   8: 3231785.817 ops/s
# Warmup Iteration   9: 3232368.320 ops/s
# Warmup Iteration  10: 3234766.198 ops/s
# Warmup Iteration  11: 3233884.304 ops/s
# Warmup Iteration  12: 3220172.671 ops/s
# Warmup Iteration  13: 3245305.015 ops/s
# Warmup Iteration  14: 3250361.096 ops/s
# Warmup Iteration  15: 3239681.275 ops/s
# Warmup Iteration  16: 3240983.972 ops/s
# Warmup Iteration  17: 3241600.021 ops/s
# Warmup Iteration  18: 3238795.794 ops/s
# Warmup Iteration  19: 3234849.562 ops/s
# Warmup Iteration  20: 3237807.810 ops/s
# Warmup Iteration  21: 3227831.426 ops/s
# Warmup Iteration  22: 3230043.736 ops/s
# Warmup Iteration  23: 3220586.132 ops/s
# Warmup Iteration  24: 3238818.968 ops/s
# Warmup Iteration  25: 3241820.895 ops/s
# Warmup Iteration  26: 3245249.043 ops/s
# Warmup Iteration  27: 3237822.631 ops/s
# Warmup Iteration  28: 3214679.763 ops/s
# Warmup Iteration  29: 3239669.659 ops/s
# Warmup Iteration  30: 3226541.075 ops/s
Iteration   1: 3216495.390 ops/s
Iteration   2: 3154542.770 ops/s
Iteration   3: 3248156.441 ops/s
Iteration   4: 3245113.526 ops/s
Iteration   5: 3248246.831 ops/s
Iteration   6: 3233781.449 ops/s
Iteration   7: 3245416.131 ops/s
Iteration   8: 3229473.307 ops/s
Iteration   9: 3243006.390 ops/s
Iteration  10: 3219466.088 ops/s
Iteration  11: 3233754.182 ops/s
Iteration  12: 3237454.403 ops/s
Iteration  13: 3241827.119 ops/s
Iteration  14: 3232349.481 ops/s
Iteration  15: 3240909.586 ops/s
Iteration  16: 3242447.743 ops/s
Iteration  17: 3194583.100 ops/s
Iteration  18: 3260358.904 ops/s
Iteration  19: 3239925.100 ops/s
Iteration  20: 3227883.969 ops/s
Iteration  21: 3215448.984 ops/s
Iteration  22: 3245708.511 ops/s
Iteration  23: 3241558.061 ops/s
Iteration  24: 3208992.180 ops/s
Iteration  25: 3226806.514 ops/s
Iteration  26: 3248061.165 ops/s
Iteration  27: 3249206.499 ops/s
Iteration  28: 3181523.960 ops/s
Iteration  29: 3243342.893 ops/s
Iteration  30: 3232268.232 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_count":
  3230936.964 ±(99.9%) 14842.840 ops/s [Average]
  (min, avg, max) = (3154542.770, 3230936.964, 3260358.904), stdev = 22216.066
  CI (99.9%): [3216094.124, 3245779.804] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_count  thrpt   30  3230936.964 ± 14842.840  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3152031.908 ops/s
# Warmup Iteration   2: 7194071.065 ops/s
# Warmup Iteration   3: 5867764.843 ops/s
# Warmup Iteration   4: 7121801.217 ops/s
# Warmup Iteration   5: 7144168.656 ops/s
# Warmup Iteration   6: 7122919.215 ops/s
# Warmup Iteration   7: 7105494.546 ops/s
# Warmup Iteration   8: 7152640.875 ops/s
# Warmup Iteration   9: 7089607.206 ops/s
# Warmup Iteration  10: 7099623.387 ops/s
# Warmup Iteration  11: 7146901.949 ops/s
# Warmup Iteration  12: 7114635.574 ops/s
# Warmup Iteration  13: 7183139.711 ops/s
# Warmup Iteration  14: 7135894.614 ops/s
# Warmup Iteration  15: 7157378.720 ops/s
# Warmup Iteration  16: 7125326.685 ops/s
# Warmup Iteration  17: 7168563.540 ops/s
# Warmup Iteration  18: 7140176.035 ops/s
# Warmup Iteration  19: 7161870.024 ops/s
# Warmup Iteration  20: 7059185.601 ops/s
# Warmup Iteration  21: 7168137.318 ops/s
# Warmup Iteration  22: 7101226.899 ops/s
# Warmup Iteration  23: 7162881.049 ops/s
# Warmup Iteration  24: 7118126.969 ops/s
# Warmup Iteration  25: 7166446.258 ops/s
# Warmup Iteration  26: 7118568.956 ops/s
# Warmup Iteration  27: 7140388.427 ops/s
# Warmup Iteration  28: 7153578.421 ops/s
# Warmup Iteration  29: 7183195.324 ops/s
# Warmup Iteration  30: 7158731.516 ops/s
Iteration   1: 7115966.157 ops/s
Iteration   2: 7195765.340 ops/s
Iteration   3: 7148090.602 ops/s
Iteration   4: 7145685.583 ops/s
Iteration   5: 7135849.081 ops/s
Iteration   6: 7176670.186 ops/s
Iteration   7: 7167139.601 ops/s
Iteration   8: 7165811.693 ops/s
Iteration   9: 7110616.380 ops/s
Iteration  10: 7147474.644 ops/s
Iteration  11: 7169578.331 ops/s
Iteration  12: 7175051.172 ops/s
Iteration  13: 7102957.175 ops/s
Iteration  14: 7095736.351 ops/s
Iteration  15: 7155836.801 ops/s
Iteration  16: 7149371.996 ops/s
Iteration  17: 7110588.129 ops/s
Iteration  18: 7106741.165 ops/s
Iteration  19: 7144711.899 ops/s
Iteration  20: 7117188.033 ops/s
Iteration  21: 7144954.842 ops/s
Iteration  22: 7003404.717 ops/s
Iteration  23: 7063962.096 ops/s
Iteration  24: 7118047.458 ops/s
Iteration  25: 7029826.657 ops/s
Iteration  26: 7118227.541 ops/s
Iteration  27: 7133910.429 ops/s
Iteration  28: 7021107.214 ops/s
Iteration  29: 7149342.835 ops/s
Iteration  30: 7131389.490 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone":
  7125033.453 ±(99.9%) 30624.145 ops/s [Average]
  (min, avg, max) = (7003404.717, 7125033.453, 7195765.340), stdev = 45836.782
  CI (99.9%): [7094409.308, 7155657.599] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone  thrpt   30  7125033.453 ± 30624.145  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4324940.892 ops/s
# Warmup Iteration   2: 8975787.634 ops/s
# Warmup Iteration   3: 7758965.137 ops/s
# Warmup Iteration   4: 9274001.512 ops/s
# Warmup Iteration   5: 9263560.454 ops/s
# Warmup Iteration   6: 9209471.588 ops/s
# Warmup Iteration   7: 9272524.999 ops/s
# Warmup Iteration   8: 9225321.863 ops/s
# Warmup Iteration   9: 9260177.055 ops/s
# Warmup Iteration  10: 9261932.931 ops/s
# Warmup Iteration  11: 9277175.613 ops/s
# Warmup Iteration  12: 9226169.344 ops/s
# Warmup Iteration  13: 9258662.566 ops/s
# Warmup Iteration  14: 9262264.723 ops/s
# Warmup Iteration  15: 9177884.691 ops/s
# Warmup Iteration  16: 9189436.445 ops/s
# Warmup Iteration  17: 9291025.883 ops/s
# Warmup Iteration  18: 9322533.870 ops/s
# Warmup Iteration  19: 9322176.179 ops/s
# Warmup Iteration  20: 9299290.284 ops/s
# Warmup Iteration  21: 9265589.367 ops/s
# Warmup Iteration  22: 9246907.008 ops/s
# Warmup Iteration  23: 9282975.036 ops/s
# Warmup Iteration  24: 9185808.454 ops/s
# Warmup Iteration  25: 9238569.211 ops/s
# Warmup Iteration  26: 9211324.529 ops/s
# Warmup Iteration  27: 9183767.030 ops/s
# Warmup Iteration  28: 9259265.083 ops/s
# Warmup Iteration  29: 9225532.462 ops/s
# Warmup Iteration  30: 9127515.815 ops/s
Iteration   1: 9257120.939 ops/s
Iteration   2: 9208282.041 ops/s
Iteration   3: 9224271.085 ops/s
Iteration   4: 9271382.306 ops/s
Iteration   5: 9258637.317 ops/s
Iteration   6: 9258484.438 ops/s
Iteration   7: 9269596.706 ops/s
Iteration   8: 9160981.158 ops/s
Iteration   9: 9291841.380 ops/s
Iteration  10: 9172782.689 ops/s
Iteration  11: 9217150.283 ops/s
Iteration  12: 9256999.486 ops/s
Iteration  13: 9217398.481 ops/s
Iteration  14: 9073688.318 ops/s
Iteration  15: 9273754.078 ops/s
Iteration  16: 9256795.069 ops/s
Iteration  17: 9139799.984 ops/s
Iteration  18: 9294572.279 ops/s
Iteration  19: 9094964.702 ops/s
Iteration  20: 9229260.612 ops/s
Iteration  21: 9326497.982 ops/s
Iteration  22: 9276839.696 ops/s
Iteration  23: 9241052.820 ops/s
Iteration  24: 9296950.894 ops/s
Iteration  25: 9181731.028 ops/s
Iteration  26: 9292823.294 ops/s
Iteration  27: 9252872.420 ops/s
Iteration  28: 9194862.358 ops/s
Iteration  29: 9296701.597 ops/s
Iteration  30: 9283884.375 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_forEach":
  9235732.660 ±(99.9%) 40617.858 ops/s [Average]
  (min, avg, max) = (9073688.318, 9235732.660, 9326497.982), stdev = 60794.902
  CI (99.9%): [9195114.803, 9276350.518] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_forEach  thrpt   30  9235732.660 ± 40617.858  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11708605.859 ops/s
# Warmup Iteration   2: 22831918.733 ops/s
# Warmup Iteration   3: 20623306.116 ops/s
# Warmup Iteration   4: 23965860.589 ops/s
# Warmup Iteration   5: 23990749.865 ops/s
# Warmup Iteration   6: 24080141.665 ops/s
# Warmup Iteration   7: 23924693.458 ops/s
# Warmup Iteration   8: 23700941.184 ops/s
# Warmup Iteration   9: 23842233.883 ops/s
# Warmup Iteration  10: 23993364.390 ops/s
# Warmup Iteration  11: 24033913.563 ops/s
# Warmup Iteration  12: 23974278.082 ops/s
# Warmup Iteration  13: 24047732.496 ops/s
# Warmup Iteration  14: 24082114.009 ops/s
# Warmup Iteration  15: 24092720.966 ops/s
# Warmup Iteration  16: 23853350.627 ops/s
# Warmup Iteration  17: 23764617.335 ops/s
# Warmup Iteration  18: 23947422.625 ops/s
# Warmup Iteration  19: 24068124.934 ops/s
# Warmup Iteration  20: 23971986.303 ops/s
# Warmup Iteration  21: 24057020.102 ops/s
# Warmup Iteration  22: 24094965.269 ops/s
# Warmup Iteration  23: 24201768.994 ops/s
# Warmup Iteration  24: 23851734.831 ops/s
# Warmup Iteration  25: 23717764.454 ops/s
# Warmup Iteration  26: 23878961.140 ops/s
# Warmup Iteration  27: 23916479.209 ops/s
# Warmup Iteration  28: 24103565.031 ops/s
# Warmup Iteration  29: 23760088.768 ops/s
# Warmup Iteration  30: 23691666.887 ops/s
Iteration   1: 24007190.155 ops/s
Iteration   2: 23812569.893 ops/s
Iteration   3: 23817770.353 ops/s
Iteration   4: 24071793.330 ops/s
Iteration   5: 23314103.229 ops/s
Iteration   6: 23716585.616 ops/s
Iteration   7: 24053209.927 ops/s
Iteration   8: 24056741.829 ops/s
Iteration   9: 24043139.392 ops/s
Iteration  10: 24042410.506 ops/s
Iteration  11: 24035361.220 ops/s
Iteration  12: 23932314.823 ops/s
Iteration  13: 23999037.188 ops/s
Iteration  14: 23705392.346 ops/s
Iteration  15: 24006864.150 ops/s
Iteration  16: 23772033.146 ops/s
Iteration  17: 23741863.501 ops/s
Iteration  18: 23905945.951 ops/s
Iteration  19: 24152027.674 ops/s
Iteration  20: 24065230.790 ops/s
Iteration  21: 23864213.470 ops/s
Iteration  22: 23676174.033 ops/s
Iteration  23: 24042965.769 ops/s
Iteration  24: 24173036.263 ops/s
Iteration  25: 23930041.757 ops/s
Iteration  26: 23913955.779 ops/s
Iteration  27: 23698689.889 ops/s
Iteration  28: 23739033.128 ops/s
Iteration  29: 23816170.087 ops/s
Iteration  30: 23816218.386 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_injectInto":
  23897402.786 ±(99.9%) 121532.497 ops/s [Average]
  (min, avg, max) = (23314103.229, 23897402.786, 24173036.263), stdev = 181904.134
  CI (99.9%): [23775870.289, 24018935.283] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_injectInto  thrpt   30  23897402.786 ± 121532.497  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1328305.374 ops/s
# Warmup Iteration   2: 2316236.311 ops/s
# Warmup Iteration   3: 2268888.644 ops/s
# Warmup Iteration   4: 2431015.999 ops/s
# Warmup Iteration   5: 2431973.925 ops/s
# Warmup Iteration   6: 2423842.047 ops/s
# Warmup Iteration   7: 2410143.392 ops/s
# Warmup Iteration   8: 2410780.557 ops/s
# Warmup Iteration   9: 2433287.522 ops/s
# Warmup Iteration  10: 2440452.136 ops/s
# Warmup Iteration  11: 2434217.844 ops/s
# Warmup Iteration  12: 2419908.859 ops/s
# Warmup Iteration  13: 2405674.357 ops/s
# Warmup Iteration  14: 2419345.871 ops/s
# Warmup Iteration  15: 2436133.477 ops/s
# Warmup Iteration  16: 2440021.063 ops/s
# Warmup Iteration  17: 2522462.511 ops/s
# Warmup Iteration  18: 2520519.619 ops/s
# Warmup Iteration  19: 2522154.560 ops/s
# Warmup Iteration  20: 2522619.638 ops/s
# Warmup Iteration  21: 2521446.442 ops/s
# Warmup Iteration  22: 2522267.610 ops/s
# Warmup Iteration  23: 2528013.451 ops/s
# Warmup Iteration  24: 2512842.998 ops/s
# Warmup Iteration  25: 2513812.659 ops/s
# Warmup Iteration  26: 2526113.007 ops/s
# Warmup Iteration  27: 2516320.904 ops/s
# Warmup Iteration  28: 2505970.766 ops/s
# Warmup Iteration  29: 2529509.451 ops/s
# Warmup Iteration  30: 2519258.465 ops/s
Iteration   1: 2517906.402 ops/s
Iteration   2: 2525467.095 ops/s
Iteration   3: 2525761.087 ops/s
Iteration   4: 2515194.709 ops/s
Iteration   5: 2516367.143 ops/s
Iteration   6: 2523358.575 ops/s
Iteration   7: 2492566.442 ops/s
Iteration   8: 2524717.047 ops/s
Iteration   9: 2516418.808 ops/s
Iteration  10: 2526142.791 ops/s
Iteration  11: 2531217.234 ops/s
Iteration  12: 2477095.479 ops/s
Iteration  13: 2478221.092 ops/s
Iteration  14: 2506706.020 ops/s
Iteration  15: 2524057.001 ops/s
Iteration  16: 2510333.072 ops/s
Iteration  17: 2512437.866 ops/s
Iteration  18: 2473453.996 ops/s
Iteration  19: 2521546.236 ops/s
Iteration  20: 2501722.587 ops/s
Iteration  21: 2508376.874 ops/s
Iteration  22: 2517930.231 ops/s
Iteration  23: 2520527.002 ops/s
Iteration  24: 2531217.487 ops/s
Iteration  25: 2520908.997 ops/s
Iteration  26: 2515950.696 ops/s
Iteration  27: 2525087.025 ops/s
Iteration  28: 2530886.118 ops/s
Iteration  29: 2526206.752 ops/s
Iteration  30: 2522645.205 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty":
  2514680.902 ±(99.9%) 10470.997 ops/s [Average]
  (min, avg, max) = (2473453.996, 2514680.902, 2531217.487), stdev = 15672.497
  CI (99.9%): [2504209.905, 2525151.900] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  2514680.902 ± 10470.997  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 665502.960 ops/s
# Warmup Iteration   2: 684000.799 ops/s
# Warmup Iteration   3: 855738.247 ops/s
# Warmup Iteration   4: 894315.888 ops/s
# Warmup Iteration   5: 893022.222 ops/s
# Warmup Iteration   6: 884309.712 ops/s
# Warmup Iteration   7: 882543.863 ops/s
# Warmup Iteration   8: 893123.535 ops/s
# Warmup Iteration   9: 894348.991 ops/s
# Warmup Iteration  10: 893010.755 ops/s
# Warmup Iteration  11: 892082.797 ops/s
# Warmup Iteration  12: 888766.656 ops/s
# Warmup Iteration  13: 750443.865 ops/s
# Warmup Iteration  14: 894798.613 ops/s
# Warmup Iteration  15: 891853.655 ops/s
# Warmup Iteration  16: 890088.339 ops/s
# Warmup Iteration  17: 936692.598 ops/s
# Warmup Iteration  18: 948215.383 ops/s
# Warmup Iteration  19: 949983.850 ops/s
# Warmup Iteration  20: 941837.224 ops/s
# Warmup Iteration  21: 944603.020 ops/s
# Warmup Iteration  22: 941952.833 ops/s
# Warmup Iteration  23: 944982.977 ops/s
# Warmup Iteration  24: 946385.323 ops/s
# Warmup Iteration  25: 947402.711 ops/s
# Warmup Iteration  26: 944998.577 ops/s
# Warmup Iteration  27: 944479.851 ops/s
# Warmup Iteration  28: 943170.795 ops/s
# Warmup Iteration  29: 943916.820 ops/s
# Warmup Iteration  30: 946835.692 ops/s
Iteration   1: 942293.165 ops/s
Iteration   2: 944961.611 ops/s
Iteration   3: 939419.343 ops/s
Iteration   4: 948510.340 ops/s
Iteration   5: 938409.401 ops/s
Iteration   6: 945379.757 ops/s
Iteration   7: 950594.168 ops/s
Iteration   8: 945220.749 ops/s
Iteration   9: 937845.325 ops/s
Iteration  10: 939426.398 ops/s
Iteration  11: 948813.160 ops/s
Iteration  12: 933809.629 ops/s
Iteration  13: 943909.476 ops/s
Iteration  14: 943831.907 ops/s
Iteration  15: 942587.085 ops/s
Iteration  16: 925646.993 ops/s
Iteration  17: 941850.109 ops/s
Iteration  18: 942811.617 ops/s
Iteration  19: 942580.985 ops/s
Iteration  20: 941883.969 ops/s
Iteration  21: 940273.827 ops/s
Iteration  22: 941224.026 ops/s
Iteration  23: 940794.079 ops/s
Iteration  24: 929856.289 ops/s
Iteration  25: 946936.249 ops/s
Iteration  26: 922992.033 ops/s
Iteration  27: 944490.072 ops/s
Iteration  28: 942689.077 ops/s
Iteration  29: 938370.858 ops/s
Iteration  30: 941651.039 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws":
  940968.758 ±(99.9%) 4125.758 ops/s [Average]
  (min, avg, max) = (922992.033, 940968.758, 950594.168), stdev = 6175.241
  CI (99.9%): [936843.000, 945094.516] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws  thrpt   30  940968.758 ± 4125.758  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 740634.248 ops/s
# Warmup Iteration   2: 746884.570 ops/s
# Warmup Iteration   3: 1013802.371 ops/s
# Warmup Iteration   4: 1007990.495 ops/s
# Warmup Iteration   5: 1008161.754 ops/s
# Warmup Iteration   6: 1007587.117 ops/s
# Warmup Iteration   7: 1003392.239 ops/s
# Warmup Iteration   8: 996481.334 ops/s
# Warmup Iteration   9: 1002978.051 ops/s
# Warmup Iteration  10: 1010347.045 ops/s
# Warmup Iteration  11: 942438.735 ops/s
# Warmup Iteration  12: 899272.603 ops/s
# Warmup Iteration  13: 1015510.375 ops/s
# Warmup Iteration  14: 1005496.783 ops/s
# Warmup Iteration  15: 1009854.107 ops/s
# Warmup Iteration  16: 1000949.934 ops/s
# Warmup Iteration  17: 1069070.031 ops/s
# Warmup Iteration  18: 1064508.051 ops/s
# Warmup Iteration  19: 1076792.460 ops/s
# Warmup Iteration  20: 1076693.844 ops/s
# Warmup Iteration  21: 1080147.109 ops/s
# Warmup Iteration  22: 1069044.424 ops/s
# Warmup Iteration  23: 1074230.967 ops/s
# Warmup Iteration  24: 1064681.508 ops/s
# Warmup Iteration  25: 1076350.605 ops/s
# Warmup Iteration  26: 1069577.404 ops/s
# Warmup Iteration  27: 1067477.316 ops/s
# Warmup Iteration  28: 1079617.836 ops/s
# Warmup Iteration  29: 1055150.426 ops/s
# Warmup Iteration  30: 1075910.452 ops/s
Iteration   1: 1074770.007 ops/s
Iteration   2: 1070143.413 ops/s
Iteration   3: 1079223.395 ops/s
Iteration   4: 1077275.121 ops/s
Iteration   5: 1070647.912 ops/s
Iteration   6: 1070507.435 ops/s
Iteration   7: 1057529.351 ops/s
Iteration   8: 1041910.932 ops/s
Iteration   9: 1083460.085 ops/s
Iteration  10: 1078262.996 ops/s
Iteration  11: 1083297.364 ops/s
Iteration  12: 1064957.109 ops/s
Iteration  13: 1067064.286 ops/s
Iteration  14: 1077234.092 ops/s
Iteration  15: 1079477.774 ops/s
Iteration  16: 1079284.579 ops/s
Iteration  17: 1075773.743 ops/s
Iteration  18: 1071149.760 ops/s
Iteration  19: 1054251.902 ops/s
Iteration  20: 1073881.967 ops/s
Iteration  21: 1070978.955 ops/s
Iteration  22: 1080908.617 ops/s
Iteration  23: 1071843.340 ops/s
Iteration  24: 1084672.244 ops/s
Iteration  25: 1078466.383 ops/s
Iteration  26: 1075595.939 ops/s
Iteration  27: 1075787.729 ops/s
Iteration  28: 1076169.564 ops/s
Iteration  29: 1073790.260 ops/s
Iteration  30: 1077297.765 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList":
  1073187.134 ±(99.9%) 6037.858 ops/s [Average]
  (min, avg, max) = (1041910.932, 1073187.134, 1084672.244), stdev = 9037.182
  CI (99.9%): [1067149.276, 1079224.992] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1073187.134 ± 6037.858  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 653068.016 ops/s
# Warmup Iteration   2: 669662.762 ops/s
# Warmup Iteration   3: 860005.320 ops/s
# Warmup Iteration   4: 867081.991 ops/s
# Warmup Iteration   5: 881218.874 ops/s
# Warmup Iteration   6: 886200.832 ops/s
# Warmup Iteration   7: 884821.384 ops/s
# Warmup Iteration   8: 878532.160 ops/s
# Warmup Iteration   9: 870997.447 ops/s
# Warmup Iteration  10: 881279.548 ops/s
# Warmup Iteration  11: 876394.912 ops/s
# Warmup Iteration  12: 775909.259 ops/s
# Warmup Iteration  13: 831239.495 ops/s
# Warmup Iteration  14: 878962.807 ops/s
# Warmup Iteration  15: 878975.067 ops/s
# Warmup Iteration  16: 877518.372 ops/s
# Warmup Iteration  17: 931519.873 ops/s
# Warmup Iteration  18: 937516.158 ops/s
# Warmup Iteration  19: 919657.956 ops/s
# Warmup Iteration  20: 935057.710 ops/s
# Warmup Iteration  21: 936722.740 ops/s
# Warmup Iteration  22: 933965.237 ops/s
# Warmup Iteration  23: 936391.522 ops/s
# Warmup Iteration  24: 935656.046 ops/s
# Warmup Iteration  25: 934737.135 ops/s
# Warmup Iteration  26: 918461.015 ops/s
# Warmup Iteration  27: 936472.582 ops/s
# Warmup Iteration  28: 933731.251 ops/s
# Warmup Iteration  29: 925316.957 ops/s
# Warmup Iteration  30: 925474.397 ops/s
Iteration   1: 925005.536 ops/s
Iteration   2: 935985.994 ops/s
Iteration   3: 932411.041 ops/s
Iteration   4: 936619.551 ops/s
Iteration   5: 931998.713 ops/s
Iteration   6: 933148.218 ops/s
Iteration   7: 930851.485 ops/s
Iteration   8: 933336.602 ops/s
Iteration   9: 930552.503 ops/s
Iteration  10: 926910.477 ops/s
Iteration  11: 932510.552 ops/s
Iteration  12: 934595.732 ops/s
Iteration  13: 930351.975 ops/s
Iteration  14: 932157.163 ops/s
Iteration  15: 921096.951 ops/s
Iteration  16: 928998.325 ops/s
Iteration  17: 932598.810 ops/s
Iteration  18: 936500.446 ops/s
Iteration  19: 936553.279 ops/s
Iteration  20: 937043.519 ops/s
Iteration  21: 927990.188 ops/s
Iteration  22: 937899.256 ops/s
Iteration  23: 934213.205 ops/s
Iteration  24: 931986.533 ops/s
Iteration  25: 928383.444 ops/s
Iteration  26: 932118.426 ops/s
Iteration  27: 922487.889 ops/s
Iteration  28: 936954.054 ops/s
Iteration  29: 920561.896 ops/s
Iteration  30: 917045.567 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  930962.244 ±(99.9%) 3572.572 ops/s [Average]
  (min, avg, max) = (917045.567, 930962.244, 937899.256), stdev = 5347.258
  CI (99.9%): [927389.672, 934534.816] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score      Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  930962.244 ± 3572.572  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 746886.640 ops/s
# Warmup Iteration   2: 793125.771 ops/s
# Warmup Iteration   3: 1020633.139 ops/s
# Warmup Iteration   4: 1011390.375 ops/s
# Warmup Iteration   5: 1024262.343 ops/s
# Warmup Iteration   6: 1005151.988 ops/s
# Warmup Iteration   7: 1015607.308 ops/s
# Warmup Iteration   8: 1023099.136 ops/s
# Warmup Iteration   9: 1020810.971 ops/s
# Warmup Iteration  10: 1023287.072 ops/s
# Warmup Iteration  11: 851260.498 ops/s
# Warmup Iteration  12: 1030227.185 ops/s
# Warmup Iteration  13: 1023237.458 ops/s
# Warmup Iteration  14: 1022680.014 ops/s
# Warmup Iteration  15: 1030639.091 ops/s
# Warmup Iteration  16: 1028699.261 ops/s
# Warmup Iteration  17: 1085957.724 ops/s
# Warmup Iteration  18: 1089011.868 ops/s
# Warmup Iteration  19: 1086895.557 ops/s
# Warmup Iteration  20: 1091855.126 ops/s
# Warmup Iteration  21: 1089012.008 ops/s
# Warmup Iteration  22: 1094528.256 ops/s
# Warmup Iteration  23: 1094887.288 ops/s
# Warmup Iteration  24: 1095514.407 ops/s
# Warmup Iteration  25: 1091829.906 ops/s
# Warmup Iteration  26: 1090256.805 ops/s
# Warmup Iteration  27: 1087579.376 ops/s
# Warmup Iteration  28: 1073661.599 ops/s
# Warmup Iteration  29: 1073324.954 ops/s
# Warmup Iteration  30: 1092986.056 ops/s
Iteration   1: 1096906.338 ops/s
Iteration   2: 1096932.384 ops/s
Iteration   3: 1096778.115 ops/s
Iteration   4: 1095531.903 ops/s
Iteration   5: 1100728.504 ops/s
Iteration   6: 1100897.780 ops/s
Iteration   7: 1097166.212 ops/s
Iteration   8: 1086161.575 ops/s
Iteration   9: 1096830.840 ops/s
Iteration  10: 1082625.172 ops/s
Iteration  11: 1098183.203 ops/s
Iteration  12: 1098836.233 ops/s
Iteration  13: 1073748.748 ops/s
Iteration  14: 1094971.686 ops/s
Iteration  15: 1090342.049 ops/s
Iteration  16: 1094864.846 ops/s
Iteration  17: 1078421.763 ops/s
Iteration  18: 1096096.870 ops/s
Iteration  19: 1095628.123 ops/s
Iteration  20: 1080276.810 ops/s
Iteration  21: 1094744.056 ops/s
Iteration  22: 1101714.741 ops/s
Iteration  23: 1100065.270 ops/s
Iteration  24: 1092219.294 ops/s
Iteration  25: 1096804.707 ops/s
Iteration  26: 1091894.646 ops/s
Iteration  27: 1099503.661 ops/s
Iteration  28: 1091268.970 ops/s
Iteration  29: 1097352.970 ops/s
Iteration  30: 1083926.641 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  1093380.804 ±(99.9%) 4779.738 ops/s [Average]
  (min, avg, max) = (1073748.748, 1093380.804, 1101714.741), stdev = 7154.087
  CI (99.9%): [1088601.066, 1098160.541] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                               Mode  Cnt        Score      Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  1093380.804 ± 4779.738  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 750862.614 ops/s
# Warmup Iteration   2: 798402.473 ops/s
# Warmup Iteration   3: 1018095.945 ops/s
# Warmup Iteration   4: 1016936.890 ops/s
# Warmup Iteration   5: 1012441.999 ops/s
# Warmup Iteration   6: 1019620.611 ops/s
# Warmup Iteration   7: 1005398.500 ops/s
# Warmup Iteration   8: 1018509.248 ops/s
# Warmup Iteration   9: 1016999.515 ops/s
# Warmup Iteration  10: 1000788.283 ops/s
# Warmup Iteration  11: 858125.797 ops/s
# Warmup Iteration  12: 1002812.736 ops/s
# Warmup Iteration  13: 1002786.595 ops/s
# Warmup Iteration  14: 1011595.355 ops/s
# Warmup Iteration  15: 1012395.463 ops/s
# Warmup Iteration  16: 1007977.538 ops/s
# Warmup Iteration  17: 1073008.225 ops/s
# Warmup Iteration  18: 1069776.041 ops/s
# Warmup Iteration  19: 1054254.602 ops/s
# Warmup Iteration  20: 1077515.753 ops/s
# Warmup Iteration  21: 1079767.175 ops/s
# Warmup Iteration  22: 1052183.372 ops/s
# Warmup Iteration  23: 1088112.914 ops/s
# Warmup Iteration  24: 1085674.353 ops/s
# Warmup Iteration  25: 1075383.049 ops/s
# Warmup Iteration  26: 1076336.189 ops/s
# Warmup Iteration  27: 1069612.931 ops/s
# Warmup Iteration  28: 1084969.628 ops/s
# Warmup Iteration  29: 1086369.423 ops/s
# Warmup Iteration  30: 1075117.146 ops/s
Iteration   1: 1082350.567 ops/s
Iteration   2: 1082984.182 ops/s
Iteration   3: 1088924.528 ops/s
Iteration   4: 1073704.140 ops/s
Iteration   5: 1082027.093 ops/s
Iteration   6: 1082248.996 ops/s
Iteration   7: 1081351.601 ops/s
Iteration   8: 1083129.791 ops/s
Iteration   9: 1085884.156 ops/s
Iteration  10: 1083322.950 ops/s
Iteration  11: 1085450.965 ops/s
Iteration  12: 1082246.544 ops/s
Iteration  13: 1060436.308 ops/s
Iteration  14: 1078339.244 ops/s
Iteration  15: 1091709.289 ops/s
Iteration  16: 1080479.106 ops/s
Iteration  17: 1092359.914 ops/s
Iteration  18: 1071027.224 ops/s
Iteration  19: 1083752.561 ops/s
Iteration  20: 1084771.543 ops/s
Iteration  21: 1079061.314 ops/s
Iteration  22: 1084683.939 ops/s
Iteration  23: 1074277.679 ops/s
Iteration  24: 1049081.326 ops/s
Iteration  25: 1080035.318 ops/s
Iteration  26: 1081695.422 ops/s
Iteration  27: 1079248.629 ops/s
Iteration  28: 1076137.748 ops/s
Iteration  29: 1079914.691 ops/s
Iteration  30: 1081396.450 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1080067.774 ±(99.9%) 5630.436 ops/s [Average]
  (min, avg, max) = (1049081.326, 1080067.774, 1092359.914), stdev = 8427.373
  CI (99.9%): [1074437.338, 1085698.210] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                               Mode  Cnt        Score      Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1080067.774 ± 5630.436  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 933689.703 ops/s
# Warmup Iteration   2: 1967414.144 ops/s
# Warmup Iteration   3: 1796760.537 ops/s
# Warmup Iteration   4: 1831866.197 ops/s
# Warmup Iteration   5: 1960775.717 ops/s
# Warmup Iteration   6: 1971195.049 ops/s
# Warmup Iteration   7: 1941768.974 ops/s
# Warmup Iteration   8: 1945565.294 ops/s
# Warmup Iteration   9: 1962042.655 ops/s
# Warmup Iteration  10: 1968195.010 ops/s
# Warmup Iteration  11: 1978049.565 ops/s
# Warmup Iteration  12: 1968300.417 ops/s
# Warmup Iteration  13: 1963607.193 ops/s
# Warmup Iteration  14: 1963913.140 ops/s
# Warmup Iteration  15: 1951597.356 ops/s
# Warmup Iteration  16: 1956799.392 ops/s
# Warmup Iteration  17: 1994289.044 ops/s
# Warmup Iteration  18: 1967684.278 ops/s
# Warmup Iteration  19: 1975072.000 ops/s
# Warmup Iteration  20: 1977319.429 ops/s
# Warmup Iteration  21: 1980454.939 ops/s
# Warmup Iteration  22: 1969991.894 ops/s
# Warmup Iteration  23: 1974786.374 ops/s
# Warmup Iteration  24: 1992714.353 ops/s
# Warmup Iteration  25: 1992002.340 ops/s
# Warmup Iteration  26: 1952785.434 ops/s
# Warmup Iteration  27: 1982477.659 ops/s
# Warmup Iteration  28: 1949515.962 ops/s
# Warmup Iteration  29: 1955548.802 ops/s
# Warmup Iteration  30: 1974297.743 ops/s
Iteration   1: 1985554.409 ops/s
Iteration   2: 1996203.873 ops/s
Iteration   3: 1984909.483 ops/s
Iteration   4: 1963998.721 ops/s
Iteration   5: 1961531.454 ops/s
Iteration   6: 1971356.191 ops/s
Iteration   7: 1994136.783 ops/s
Iteration   8: 1994415.410 ops/s
Iteration   9: 1960201.253 ops/s
Iteration  10: 1906051.146 ops/s
Iteration  11: 1962684.530 ops/s
Iteration  12: 1970560.225 ops/s
Iteration  13: 1963339.434 ops/s
Iteration  14: 1984318.680 ops/s
Iteration  15: 1993153.920 ops/s
Iteration  16: 1966747.251 ops/s
Iteration  17: 1974116.570 ops/s
Iteration  18: 1988442.025 ops/s
Iteration  19: 1979780.940 ops/s
Iteration  20: 1975370.087 ops/s
Iteration  21: 1979452.821 ops/s
Iteration  22: 1974009.943 ops/s
Iteration  23: 2011778.188 ops/s
Iteration  24: 1967112.587 ops/s
Iteration  25: 1971192.982 ops/s
Iteration  26: 1979392.571 ops/s
Iteration  27: 1995925.906 ops/s
Iteration  28: 1988964.807 ops/s
Iteration  29: 1915106.003 ops/s
Iteration  30: 1988683.221 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_makeString":
  1974949.714 ±(99.9%) 14449.310 ops/s [Average]
  (min, avg, max) = (1906051.146, 1974949.714, 2011778.188), stdev = 21627.049
  CI (99.9%): [1960500.403, 1989399.024] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_makeString  thrpt   30  1974949.714 ± 14449.310  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 161640319.975 ops/s
# Warmup Iteration   2: 297484148.475 ops/s
# Warmup Iteration   3: 260081854.221 ops/s
# Warmup Iteration   4: 305137406.552 ops/s
# Warmup Iteration   5: 304351389.834 ops/s
# Warmup Iteration   6: 304508420.229 ops/s
# Warmup Iteration   7: 301334216.250 ops/s
# Warmup Iteration   8: 305752290.464 ops/s
# Warmup Iteration   9: 300816054.151 ops/s
# Warmup Iteration  10: 305487482.315 ops/s
# Warmup Iteration  11: 304152722.460 ops/s
# Warmup Iteration  12: 305050234.363 ops/s
# Warmup Iteration  13: 300773306.314 ops/s
# Warmup Iteration  14: 304949163.823 ops/s
# Warmup Iteration  15: 303446787.011 ops/s
# Warmup Iteration  16: 305429537.758 ops/s
# Warmup Iteration  17: 304516896.195 ops/s
# Warmup Iteration  18: 301582778.110 ops/s
# Warmup Iteration  19: 303763235.976 ops/s
# Warmup Iteration  20: 300090472.314 ops/s
# Warmup Iteration  21: 302167862.604 ops/s
# Warmup Iteration  22: 305192791.207 ops/s
# Warmup Iteration  23: 305074849.083 ops/s
# Warmup Iteration  24: 300276411.454 ops/s
# Warmup Iteration  25: 304626589.188 ops/s
# Warmup Iteration  26: 303128854.656 ops/s
# Warmup Iteration  27: 302581740.072 ops/s
# Warmup Iteration  28: 303289451.187 ops/s
# Warmup Iteration  29: 305881591.324 ops/s
# Warmup Iteration  30: 302110116.347 ops/s
Iteration   1: 304852793.048 ops/s
Iteration   2: 305181551.459 ops/s
Iteration   3: 306164558.919 ops/s
Iteration   4: 301911491.536 ops/s
Iteration   5: 305132597.307 ops/s
Iteration   6: 306205350.418 ops/s
Iteration   7: 298923652.152 ops/s
Iteration   8: 304764866.939 ops/s
Iteration   9: 301618684.368 ops/s
Iteration  10: 304896124.535 ops/s
Iteration  11: 305331492.874 ops/s
Iteration  12: 302787367.376 ops/s
Iteration  13: 304706163.462 ops/s
Iteration  14: 304438031.437 ops/s
Iteration  15: 304969851.441 ops/s
Iteration  16: 304171312.069 ops/s
Iteration  17: 304999885.452 ops/s
Iteration  18: 307409270.062 ops/s
Iteration  19: 298263708.985 ops/s
Iteration  20: 300791839.567 ops/s
Iteration  21: 301249829.434 ops/s
Iteration  22: 304144489.290 ops/s
Iteration  23: 304591472.495 ops/s
Iteration  24: 299555284.769 ops/s
Iteration  25: 303329320.581 ops/s
Iteration  26: 298773182.869 ops/s
Iteration  27: 305520734.573 ops/s
Iteration  28: 304902523.562 ops/s
Iteration  29: 301741762.910 ops/s
Iteration  30: 303710934.281 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_newCollection":
  303501337.606 ±(99.9%) 1604135.460 ops/s [Average]
  (min, avg, max) = (298263708.985, 303501337.606, 307409270.062), stdev = 2400994.621
  CI (99.9%): [301897202.146, 305105473.065] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt          Score         Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_newCollection  thrpt   30  303501337.606 ± 1604135.460  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3923769.739 ops/s
# Warmup Iteration   2: 6712615.508 ops/s
# Warmup Iteration   3: 7918389.264 ops/s
# Warmup Iteration   4: 7893090.993 ops/s
# Warmup Iteration   5: 7838694.827 ops/s
# Warmup Iteration   6: 7954477.364 ops/s
# Warmup Iteration   7: 8011202.437 ops/s
# Warmup Iteration   8: 7976538.639 ops/s
# Warmup Iteration   9: 7926521.897 ops/s
# Warmup Iteration  10: 7949405.028 ops/s
# Warmup Iteration  11: 7895832.763 ops/s
# Warmup Iteration  12: 7803633.826 ops/s
# Warmup Iteration  13: 7787755.709 ops/s
# Warmup Iteration  14: 7909754.734 ops/s
# Warmup Iteration  15: 7852805.078 ops/s
# Warmup Iteration  16: 7935456.382 ops/s
# Warmup Iteration  17: 7985660.649 ops/s
# Warmup Iteration  18: 7863065.467 ops/s
# Warmup Iteration  19: 7926112.665 ops/s
# Warmup Iteration  20: 7924249.231 ops/s
# Warmup Iteration  21: 7907058.469 ops/s
# Warmup Iteration  22: 7993553.290 ops/s
# Warmup Iteration  23: 7985691.696 ops/s
# Warmup Iteration  24: 7920217.997 ops/s
# Warmup Iteration  25: 7899203.170 ops/s
# Warmup Iteration  26: 7943637.947 ops/s
# Warmup Iteration  27: 7972734.823 ops/s
# Warmup Iteration  28: 7940955.287 ops/s
# Warmup Iteration  29: 7679318.674 ops/s
# Warmup Iteration  30: 7884485.899 ops/s
Iteration   1: 7917101.935 ops/s
Iteration   2: 7987462.450 ops/s
Iteration   3: 7766981.755 ops/s
Iteration   4: 7953124.499 ops/s
Iteration   5: 7741703.514 ops/s
Iteration   6: 7832296.886 ops/s
Iteration   7: 7996307.513 ops/s
Iteration   8: 7975459.800 ops/s
Iteration   9: 7879380.416 ops/s
Iteration  10: 7962008.435 ops/s
Iteration  11: 7950781.843 ops/s
Iteration  12: 7995016.236 ops/s
Iteration  13: 7759853.923 ops/s
Iteration  14: 7833918.533 ops/s
Iteration  15: 7887221.754 ops/s
Iteration  16: 7999761.279 ops/s
Iteration  17: 7862607.415 ops/s
Iteration  18: 7849571.853 ops/s
Iteration  19: 7885768.085 ops/s
Iteration  20: 7985749.745 ops/s
Iteration  21: 7794130.678 ops/s
Iteration  22: 8000599.220 ops/s
Iteration  23: 7975024.941 ops/s
Iteration  24: 7734295.964 ops/s
Iteration  25: 7808289.891 ops/s
Iteration  26: 7892994.402 ops/s
Iteration  27: 7967958.215 ops/s
Iteration  28: 7718008.454 ops/s
Iteration  29: 7811724.280 ops/s
Iteration  30: 7985173.060 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith":
  7890342.566 ±(99.9%) 61712.977 ops/s [Average]
  (min, avg, max) = (7718008.454, 7890342.566, 8000599.220), stdev = 92369.086
  CI (99.9%): [7828629.589, 7952055.543] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith  thrpt   30  7890342.566 ± 61712.977  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2294591.335 ops/s
# Warmup Iteration   2: 4493548.926 ops/s
# Warmup Iteration   3: 4756526.552 ops/s
# Warmup Iteration   4: 5107695.019 ops/s
# Warmup Iteration   5: 5089420.605 ops/s
# Warmup Iteration   6: 5086111.949 ops/s
# Warmup Iteration   7: 5072352.195 ops/s
# Warmup Iteration   8: 5080506.366 ops/s
# Warmup Iteration   9: 5068693.567 ops/s
# Warmup Iteration  10: 5085340.517 ops/s
# Warmup Iteration  11: 5084930.791 ops/s
# Warmup Iteration  12: 5067917.962 ops/s
# Warmup Iteration  13: 5069560.970 ops/s
# Warmup Iteration  14: 5094957.363 ops/s
# Warmup Iteration  15: 5070007.764 ops/s
# Warmup Iteration  16: 5054787.910 ops/s
# Warmup Iteration  17: 5072018.163 ops/s
# Warmup Iteration  18: 5113094.756 ops/s
# Warmup Iteration  19: 5092371.779 ops/s
# Warmup Iteration  20: 5047123.735 ops/s
# Warmup Iteration  21: 5093241.951 ops/s
# Warmup Iteration  22: 5066912.295 ops/s
# Warmup Iteration  23: 5080969.217 ops/s
# Warmup Iteration  24: 5100485.843 ops/s
# Warmup Iteration  25: 5110595.607 ops/s
# Warmup Iteration  26: 5085060.509 ops/s
# Warmup Iteration  27: 5060850.167 ops/s
# Warmup Iteration  28: 5085250.709 ops/s
# Warmup Iteration  29: 5083408.804 ops/s
# Warmup Iteration  30: 5113283.079 ops/s
Iteration   1: 5029115.067 ops/s
Iteration   2: 4982441.424 ops/s
Iteration   3: 5067432.707 ops/s
Iteration   4: 5077960.318 ops/s
Iteration   5: 5106435.863 ops/s
Iteration   6: 5113191.001 ops/s
Iteration   7: 5056822.144 ops/s
Iteration   8: 5143505.562 ops/s
Iteration   9: 5041501.792 ops/s
Iteration  10: 5104976.156 ops/s
Iteration  11: 5034696.921 ops/s
Iteration  12: 5132331.834 ops/s
Iteration  13: 5021470.552 ops/s
Iteration  14: 5037315.327 ops/s
Iteration  15: 5115864.096 ops/s
Iteration  16: 5112151.950 ops/s
Iteration  17: 5096381.395 ops/s
Iteration  18: 5136816.057 ops/s
Iteration  19: 5125572.288 ops/s
Iteration  20: 5117466.469 ops/s
Iteration  21: 5090395.116 ops/s
Iteration  22: 5109916.000 ops/s
Iteration  23: 5012051.108 ops/s
Iteration  24: 5129191.848 ops/s
Iteration  25: 5136358.247 ops/s
Iteration  26: 5052796.525 ops/s
Iteration  27: 5035153.854 ops/s
Iteration  28: 5119733.698 ops/s
Iteration  29: 5040694.568 ops/s
Iteration  30: 5146079.173 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy":
  5084193.969 ±(99.9%) 30644.694 ops/s [Average]
  (min, avg, max) = (4982441.424, 5084193.969, 5146079.173), stdev = 45867.539
  CI (99.9%): [5053549.275, 5114838.663] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy  thrpt   30  5084193.969 ± 30644.694  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6413049.353 ops/s
# Warmup Iteration   2: 10317055.092 ops/s
# Warmup Iteration   3: 12048607.787 ops/s
# Warmup Iteration   4: 12055286.070 ops/s
# Warmup Iteration   5: 11938273.415 ops/s
# Warmup Iteration   6: 11803161.502 ops/s
# Warmup Iteration   7: 12050003.514 ops/s
# Warmup Iteration   8: 12011501.447 ops/s
# Warmup Iteration   9: 12010741.433 ops/s
# Warmup Iteration  10: 11960168.504 ops/s
# Warmup Iteration  11: 12068027.077 ops/s
# Warmup Iteration  12: 12110796.683 ops/s
# Warmup Iteration  13: 12143680.693 ops/s
# Warmup Iteration  14: 12140824.214 ops/s
# Warmup Iteration  15: 12082634.576 ops/s
# Warmup Iteration  16: 12127926.884 ops/s
# Warmup Iteration  17: 12131608.231 ops/s
# Warmup Iteration  18: 12042919.149 ops/s
# Warmup Iteration  19: 12119224.947 ops/s
# Warmup Iteration  20: 12060293.164 ops/s
# Warmup Iteration  21: 12128306.373 ops/s
# Warmup Iteration  22: 12025543.814 ops/s
# Warmup Iteration  23: 12091592.242 ops/s
# Warmup Iteration  24: 12068661.985 ops/s
# Warmup Iteration  25: 11774203.424 ops/s
# Warmup Iteration  26: 12035415.162 ops/s
# Warmup Iteration  27: 11977535.913 ops/s
# Warmup Iteration  28: 11979842.003 ops/s
# Warmup Iteration  29: 12108891.336 ops/s
# Warmup Iteration  30: 12123937.752 ops/s
Iteration   1: 12085190.619 ops/s
Iteration   2: 12094869.544 ops/s
Iteration   3: 12209741.862 ops/s
Iteration   4: 12013667.114 ops/s
Iteration   5: 12064180.847 ops/s
Iteration   6: 12071315.932 ops/s
Iteration   7: 11735001.531 ops/s
Iteration   8: 12142986.459 ops/s
Iteration   9: 12146512.986 ops/s
Iteration  10: 12137882.128 ops/s
Iteration  11: 12230093.123 ops/s
Iteration  12: 12270055.328 ops/s
Iteration  13: 12044718.673 ops/s
Iteration  14: 12170716.440 ops/s
Iteration  15: 12089490.232 ops/s
Iteration  16: 12243588.177 ops/s
Iteration  17: 12239665.311 ops/s
Iteration  18: 12222650.885 ops/s
Iteration  19: 12272496.013 ops/s
Iteration  20: 12170427.843 ops/s
Iteration  21: 12165223.208 ops/s
Iteration  22: 12268918.337 ops/s
Iteration  23: 12203899.423 ops/s
Iteration  24: 12238027.309 ops/s
Iteration  25: 12142931.565 ops/s
Iteration  26: 12252092.462 ops/s
Iteration  27: 12245916.662 ops/s
Iteration  28: 12192887.737 ops/s
Iteration  29: 12186420.325 ops/s
Iteration  30: 12210910.229 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty":
  12158749.277 ±(99.9%) 72146.502 ops/s [Average]
  (min, avg, max) = (11735001.531, 12158749.277, 12272496.013), stdev = 107985.497
  CI (99.9%): [12086602.774, 12230895.779] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty  thrpt   30  12158749.277 ± 72146.502  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1737090.243 ops/s
# Warmup Iteration   2: 3719437.341 ops/s
# Warmup Iteration   3: 3119249.996 ops/s
# Warmup Iteration   4: 3660270.340 ops/s
# Warmup Iteration   5: 3668594.659 ops/s
# Warmup Iteration   6: 3692460.405 ops/s
# Warmup Iteration   7: 3706464.674 ops/s
# Warmup Iteration   8: 3720148.986 ops/s
# Warmup Iteration   9: 3727177.692 ops/s
# Warmup Iteration  10: 3729077.936 ops/s
# Warmup Iteration  11: 3723355.103 ops/s
# Warmup Iteration  12: 3721432.095 ops/s
# Warmup Iteration  13: 3728903.197 ops/s
# Warmup Iteration  14: 3721425.547 ops/s
# Warmup Iteration  15: 3722170.443 ops/s
# Warmup Iteration  16: 3695777.007 ops/s
# Warmup Iteration  17: 3709272.593 ops/s
# Warmup Iteration  18: 3699014.274 ops/s
# Warmup Iteration  19: 3735736.454 ops/s
# Warmup Iteration  20: 3721749.877 ops/s
# Warmup Iteration  21: 3718956.057 ops/s
# Warmup Iteration  22: 3727343.516 ops/s
# Warmup Iteration  23: 3720317.141 ops/s
# Warmup Iteration  24: 3719980.060 ops/s
# Warmup Iteration  25: 3697566.849 ops/s
# Warmup Iteration  26: 3730253.078 ops/s
# Warmup Iteration  27: 3727383.143 ops/s
# Warmup Iteration  28: 3728955.431 ops/s
# Warmup Iteration  29: 3729167.645 ops/s
# Warmup Iteration  30: 3719794.674 ops/s
Iteration   1: 3721173.020 ops/s
Iteration   2: 3739813.875 ops/s
Iteration   3: 3707065.348 ops/s
Iteration   4: 3709554.437 ops/s
Iteration   5: 3719327.556 ops/s
Iteration   6: 3717834.611 ops/s
Iteration   7: 3672018.383 ops/s
Iteration   8: 3711870.006 ops/s
Iteration   9: 3729119.342 ops/s
Iteration  10: 3712722.240 ops/s
Iteration  11: 3742930.339 ops/s
Iteration  12: 3738035.307 ops/s
Iteration  13: 3737792.534 ops/s
Iteration  14: 3732863.366 ops/s
Iteration  15: 3745250.969 ops/s
Iteration  16: 3704359.560 ops/s
Iteration  17: 3757689.267 ops/s
Iteration  18: 3743124.774 ops/s
Iteration  19: 3739951.717 ops/s
Iteration  20: 3730590.134 ops/s
Iteration  21: 3726243.964 ops/s
Iteration  22: 3726311.404 ops/s
Iteration  23: 3655515.705 ops/s
Iteration  24: 3718538.447 ops/s
Iteration  25: 3721648.494 ops/s
Iteration  26: 3744065.173 ops/s
Iteration  27: 3681876.657 ops/s
Iteration  28: 3681107.661 ops/s
Iteration  29: 3714982.319 ops/s
Iteration  30: 3742192.050 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_reduce":
  3720852.289 ±(99.9%) 15763.488 ops/s [Average]
  (min, avg, max) = (3655515.705, 3720852.289, 3757689.267), stdev = 23594.049
  CI (99.9%): [3705088.800, 3736615.777] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_reduce  thrpt   30  3720852.289 ± 15763.488  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1620479.170 ops/s
# Warmup Iteration   2: 3395717.196 ops/s
# Warmup Iteration   3: 2865657.850 ops/s
# Warmup Iteration   4: 3415917.229 ops/s
# Warmup Iteration   5: 3421887.875 ops/s
# Warmup Iteration   6: 3419256.208 ops/s
# Warmup Iteration   7: 3430682.605 ops/s
# Warmup Iteration   8: 3426393.625 ops/s
# Warmup Iteration   9: 3424983.155 ops/s
# Warmup Iteration  10: 3423750.733 ops/s
# Warmup Iteration  11: 3408544.184 ops/s
# Warmup Iteration  12: 3402184.260 ops/s
# Warmup Iteration  13: 3415625.328 ops/s
# Warmup Iteration  14: 3422704.125 ops/s
# Warmup Iteration  15: 3396223.040 ops/s
# Warmup Iteration  16: 3406003.877 ops/s
# Warmup Iteration  17: 3407340.572 ops/s
# Warmup Iteration  18: 3404002.063 ops/s
# Warmup Iteration  19: 3367777.716 ops/s
# Warmup Iteration  20: 3383881.561 ops/s
# Warmup Iteration  21: 3393461.962 ops/s
# Warmup Iteration  22: 3404720.103 ops/s
# Warmup Iteration  23: 3411703.097 ops/s
# Warmup Iteration  24: 3379009.392 ops/s
# Warmup Iteration  25: 3410347.452 ops/s
# Warmup Iteration  26: 3414225.638 ops/s
# Warmup Iteration  27: 3420554.388 ops/s
# Warmup Iteration  28: 3375964.623 ops/s
# Warmup Iteration  29: 3409488.968 ops/s
# Warmup Iteration  30: 3363527.545 ops/s
Iteration   1: 3407727.348 ops/s
Iteration   2: 3413704.919 ops/s
Iteration   3: 3375077.277 ops/s
Iteration   4: 3419073.875 ops/s
Iteration   5: 3407961.997 ops/s
Iteration   6: 3382393.984 ops/s
Iteration   7: 3403141.597 ops/s
Iteration   8: 3412739.583 ops/s
Iteration   9: 3424686.705 ops/s
Iteration  10: 3404061.339 ops/s
Iteration  11: 3413360.133 ops/s
Iteration  12: 3401592.313 ops/s
Iteration  13: 3414121.526 ops/s
Iteration  14: 3410855.028 ops/s
Iteration  15: 3405135.393 ops/s
Iteration  16: 3406089.105 ops/s
Iteration  17: 3429833.004 ops/s
Iteration  18: 3364891.650 ops/s
Iteration  19: 3388588.902 ops/s
Iteration  20: 3399163.638 ops/s
Iteration  21: 3394035.317 ops/s
Iteration  22: 3410415.346 ops/s
Iteration  23: 3424854.642 ops/s
Iteration  24: 3430499.949 ops/s
Iteration  25: 3400941.492 ops/s
Iteration  26: 3385162.085 ops/s
Iteration  27: 3419587.807 ops/s
Iteration  28: 3408671.261 ops/s
Iteration  29: 3408899.087 ops/s
Iteration  30: 3376428.761 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty":
  3404789.835 ±(99.9%) 10771.351 ops/s [Average]
  (min, avg, max) = (3364891.650, 3404789.835, 3430499.949), stdev = 16122.053
  CI (99.9%): [3394018.484, 3415561.187] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  3404789.835 ± 10771.351  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 698010.739 ops/s
# Warmup Iteration   2: 718187.743 ops/s
# Warmup Iteration   3: 926131.045 ops/s
# Warmup Iteration   4: 936224.944 ops/s
# Warmup Iteration   5: 948375.607 ops/s
# Warmup Iteration   6: 934733.314 ops/s
# Warmup Iteration   7: 946512.158 ops/s
# Warmup Iteration   8: 943411.645 ops/s
# Warmup Iteration   9: 947434.574 ops/s
# Warmup Iteration  10: 945329.594 ops/s
# Warmup Iteration  11: 940773.040 ops/s
# Warmup Iteration  12: 787823.662 ops/s
# Warmup Iteration  13: 943861.129 ops/s
# Warmup Iteration  14: 945228.312 ops/s
# Warmup Iteration  15: 945852.537 ops/s
# Warmup Iteration  16: 934394.735 ops/s
# Warmup Iteration  17: 1003632.292 ops/s
# Warmup Iteration  18: 1000907.393 ops/s
# Warmup Iteration  19: 1006874.386 ops/s
# Warmup Iteration  20: 1008340.590 ops/s
# Warmup Iteration  21: 1004332.705 ops/s
# Warmup Iteration  22: 1003473.423 ops/s
# Warmup Iteration  23: 1002502.467 ops/s
# Warmup Iteration  24: 1005658.742 ops/s
# Warmup Iteration  25: 1009030.610 ops/s
# Warmup Iteration  26: 1004668.207 ops/s
# Warmup Iteration  27: 998492.431 ops/s
# Warmup Iteration  28: 1005251.497 ops/s
# Warmup Iteration  29: 1002024.986 ops/s
# Warmup Iteration  30: 1010923.369 ops/s
Iteration   1: 1011861.305 ops/s
Iteration   2: 1007954.647 ops/s
Iteration   3: 1004705.852 ops/s
Iteration   4: 1006926.697 ops/s
Iteration   5: 1003972.917 ops/s
Iteration   6: 1009689.371 ops/s
Iteration   7: 1005921.622 ops/s
Iteration   8: 1005641.335 ops/s
Iteration   9: 1004006.928 ops/s
Iteration  10: 1011059.712 ops/s
Iteration  11: 1008729.322 ops/s
Iteration  12: 1004659.139 ops/s
Iteration  13: 1008336.433 ops/s
Iteration  14: 1003413.478 ops/s
Iteration  15: 1003930.829 ops/s
Iteration  16: 1005154.954 ops/s
Iteration  17: 999371.277 ops/s
Iteration  18: 989705.932 ops/s
Iteration  19: 995728.625 ops/s
Iteration  20: 1011218.155 ops/s
Iteration  21: 1001366.203 ops/s
Iteration  22: 1009493.952 ops/s
Iteration  23: 1005283.064 ops/s
Iteration  24: 1006648.521 ops/s
Iteration  25: 1013094.780 ops/s
Iteration  26: 1002791.275 ops/s
Iteration  27: 1010631.482 ops/s
Iteration  28: 1007570.869 ops/s
Iteration  29: 1006861.038 ops/s
Iteration  30: 1007650.812 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1005779.351 ±(99.9%) 3230.152 ops/s [Average]
  (min, avg, max) = (989705.932, 1005779.351, 1013094.780), stdev = 4834.739
  CI (99.9%): [1002549.199, 1009009.503] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1005779.351 ± 3230.152  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7000306.253 ops/s
# Warmup Iteration   2: 14245692.630 ops/s
# Warmup Iteration   3: 12834322.957 ops/s
# Warmup Iteration   4: 14709822.652 ops/s
# Warmup Iteration   5: 14799179.275 ops/s
# Warmup Iteration   6: 14793442.460 ops/s
# Warmup Iteration   7: 14782032.756 ops/s
# Warmup Iteration   8: 14716516.774 ops/s
# Warmup Iteration   9: 14649786.456 ops/s
# Warmup Iteration  10: 14727461.929 ops/s
# Warmup Iteration  11: 14689776.922 ops/s
# Warmup Iteration  12: 14791283.772 ops/s
# Warmup Iteration  13: 14666230.944 ops/s
# Warmup Iteration  14: 14796478.225 ops/s
# Warmup Iteration  15: 14719431.503 ops/s
# Warmup Iteration  16: 14675299.646 ops/s
# Warmup Iteration  17: 14827642.892 ops/s
# Warmup Iteration  18: 14711735.664 ops/s
# Warmup Iteration  19: 14792048.662 ops/s
# Warmup Iteration  20: 14796300.406 ops/s
# Warmup Iteration  21: 14769860.898 ops/s
# Warmup Iteration  22: 14781347.645 ops/s
# Warmup Iteration  23: 14625000.095 ops/s
# Warmup Iteration  24: 14762646.635 ops/s
# Warmup Iteration  25: 14817980.619 ops/s
# Warmup Iteration  26: 14760737.363 ops/s
# Warmup Iteration  27: 14728975.094 ops/s
# Warmup Iteration  28: 14653173.274 ops/s
# Warmup Iteration  29: 14763407.568 ops/s
# Warmup Iteration  30: 14749606.412 ops/s
Iteration   1: 14748640.234 ops/s
Iteration   2: 14606266.695 ops/s
Iteration   3: 14686670.774 ops/s
Iteration   4: 14822769.181 ops/s
Iteration   5: 14549768.232 ops/s
Iteration   6: 14816104.642 ops/s
Iteration   7: 14795824.217 ops/s
Iteration   8: 14601989.678 ops/s
Iteration   9: 14861090.958 ops/s
Iteration  10: 14833645.199 ops/s
Iteration  11: 14755545.544 ops/s
Iteration  12: 14807371.943 ops/s
Iteration  13: 14841877.881 ops/s
Iteration  14: 14885038.335 ops/s
Iteration  15: 14590995.834 ops/s
Iteration  16: 14608855.799 ops/s
Iteration  17: 14803239.104 ops/s
Iteration  18: 14710182.928 ops/s
Iteration  19: 14771509.266 ops/s
Iteration  20: 14804268.444 ops/s
Iteration  21: 14826755.986 ops/s
Iteration  22: 14855584.443 ops/s
Iteration  23: 14775621.377 ops/s
Iteration  24: 14871072.188 ops/s
Iteration  25: 14517913.487 ops/s
Iteration  26: 14850829.178 ops/s
Iteration  27: 14816724.963 ops/s
Iteration  28: 14806690.160 ops/s
Iteration  29: 14271108.620 ops/s
Iteration  30: 14804821.311 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_reject":
  14743292.553 ±(99.9%) 90818.009 ops/s [Average]
  (min, avg, max) = (14271108.620, 14743292.553, 14885038.335), stdev = 135932.130
  CI (99.9%): [14652474.545, 14834110.562] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_reject  thrpt   30  14743292.553 ± 90818.009  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8020802.771 ops/s
# Warmup Iteration   2: 17183928.844 ops/s
# Warmup Iteration   3: 17166868.380 ops/s
# Warmup Iteration   4: 14841622.728 ops/s
# Warmup Iteration   5: 17307489.909 ops/s
# Warmup Iteration   6: 17513561.808 ops/s
# Warmup Iteration   7: 17345977.336 ops/s
# Warmup Iteration   8: 17473002.769 ops/s
# Warmup Iteration   9: 17356755.907 ops/s
# Warmup Iteration  10: 17538539.050 ops/s
# Warmup Iteration  11: 17387688.264 ops/s
# Warmup Iteration  12: 17409638.517 ops/s
# Warmup Iteration  13: 17515758.884 ops/s
# Warmup Iteration  14: 17468428.512 ops/s
# Warmup Iteration  15: 17352745.458 ops/s
# Warmup Iteration  16: 17222597.352 ops/s
# Warmup Iteration  17: 17483830.812 ops/s
# Warmup Iteration  18: 17488453.022 ops/s
# Warmup Iteration  19: 17523097.430 ops/s
# Warmup Iteration  20: 17447989.517 ops/s
# Warmup Iteration  21: 17367530.695 ops/s
# Warmup Iteration  22: 17401118.642 ops/s
# Warmup Iteration  23: 17496569.656 ops/s
# Warmup Iteration  24: 17455519.414 ops/s
# Warmup Iteration  25: 17405287.739 ops/s
# Warmup Iteration  26: 17534716.329 ops/s
# Warmup Iteration  27: 17524727.958 ops/s
# Warmup Iteration  28: 17304773.780 ops/s
# Warmup Iteration  29: 17291838.819 ops/s
# Warmup Iteration  30: 17438749.284 ops/s
Iteration   1: 17470627.593 ops/s
Iteration   2: 17068781.790 ops/s
Iteration   3: 17401742.428 ops/s
Iteration   4: 17413197.137 ops/s
Iteration   5: 17473083.970 ops/s
Iteration   6: 17537980.026 ops/s
Iteration   7: 17561585.831 ops/s
Iteration   8: 16956660.069 ops/s
Iteration   9: 17498938.235 ops/s
Iteration  10: 17434207.753 ops/s
Iteration  11: 17471360.206 ops/s
Iteration  12: 17434713.910 ops/s
Iteration  13: 17488578.274 ops/s
Iteration  14: 17237382.102 ops/s
Iteration  15: 17519203.851 ops/s
Iteration  16: 17493865.756 ops/s
Iteration  17: 17497747.876 ops/s
Iteration  18: 17299701.259 ops/s
Iteration  19: 17209636.694 ops/s
Iteration  20: 17511550.209 ops/s
Iteration  21: 17506182.017 ops/s
Iteration  22: 17586473.138 ops/s
Iteration  23: 17437492.754 ops/s
Iteration  24: 17366536.887 ops/s
Iteration  25: 17499180.534 ops/s
Iteration  26: 17409605.020 ops/s
Iteration  27: 17413858.063 ops/s
Iteration  28: 17447837.839 ops/s
Iteration  29: 17462713.578 ops/s
Iteration  30: 17512627.098 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_remove":
  17420768.397 ±(99.9%) 93620.874 ops/s [Average]
  (min, avg, max) = (16956660.069, 17420768.397, 17586473.138), stdev = 140127.327
  CI (99.9%): [17327147.523, 17514389.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_remove  thrpt   30  17420768.397 ± 93620.874  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2387722.923 ops/s
# Warmup Iteration   2: 5564653.069 ops/s
# Warmup Iteration   3: 4590341.459 ops/s
# Warmup Iteration   4: 5556057.449 ops/s
# Warmup Iteration   5: 5503176.899 ops/s
# Warmup Iteration   6: 5511460.257 ops/s
# Warmup Iteration   7: 5523569.822 ops/s
# Warmup Iteration   8: 5538905.677 ops/s
# Warmup Iteration   9: 5510097.445 ops/s
# Warmup Iteration  10: 5518616.994 ops/s
# Warmup Iteration  11: 5553246.790 ops/s
# Warmup Iteration  12: 5538299.035 ops/s
# Warmup Iteration  13: 5522077.243 ops/s
# Warmup Iteration  14: 5502539.812 ops/s
# Warmup Iteration  15: 5445018.688 ops/s
# Warmup Iteration  16: 5501467.508 ops/s
# Warmup Iteration  17: 5526753.681 ops/s
# Warmup Iteration  18: 5547652.724 ops/s
# Warmup Iteration  19: 5555474.127 ops/s
# Warmup Iteration  20: 5531876.587 ops/s
# Warmup Iteration  21: 5504161.287 ops/s
# Warmup Iteration  22: 5500807.033 ops/s
# Warmup Iteration  23: 5529893.535 ops/s
# Warmup Iteration  24: 5533270.712 ops/s
# Warmup Iteration  25: 5567030.575 ops/s
# Warmup Iteration  26: 5545896.346 ops/s
# Warmup Iteration  27: 5516338.233 ops/s
# Warmup Iteration  28: 5497989.630 ops/s
# Warmup Iteration  29: 5554239.723 ops/s
# Warmup Iteration  30: 5528020.850 ops/s
Iteration   1: 5491148.603 ops/s
Iteration   2: 5481907.696 ops/s
Iteration   3: 5547653.126 ops/s
Iteration   4: 5538981.479 ops/s
Iteration   5: 5539176.445 ops/s
Iteration   6: 5495709.425 ops/s
Iteration   7: 5376160.883 ops/s
Iteration   8: 5553751.722 ops/s
Iteration   9: 5519570.687 ops/s
Iteration  10: 5548684.423 ops/s
Iteration  11: 5558768.323 ops/s
Iteration  12: 5542790.689 ops/s
Iteration  13: 5545707.002 ops/s
Iteration  14: 5520011.163 ops/s
Iteration  15: 5536541.678 ops/s
Iteration  16: 5514225.143 ops/s
Iteration  17: 5548646.705 ops/s
Iteration  18: 5548103.095 ops/s
Iteration  19: 5556526.378 ops/s
Iteration  20: 5549559.439 ops/s
Iteration  21: 5481865.336 ops/s
Iteration  22: 5509199.269 ops/s
Iteration  23: 5515201.109 ops/s
Iteration  24: 5566918.247 ops/s
Iteration  25: 5511266.621 ops/s
Iteration  26: 5466418.061 ops/s
Iteration  27: 5526784.695 ops/s
Iteration  28: 5548843.726 ops/s
Iteration  29: 5542632.393 ops/s
Iteration  30: 5560693.532 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_removeAll":
  5524781.570 ±(99.9%) 25705.646 ops/s [Average]
  (min, avg, max) = (5376160.883, 5524781.570, 5566918.247), stdev = 38475.004
  CI (99.9%): [5499075.924, 5550487.216] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_removeAll  thrpt   30  5524781.570 ± 25705.646  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1788720.717 ops/s
# Warmup Iteration   2: 4014461.579 ops/s
# Warmup Iteration   3: 3385055.383 ops/s
# Warmup Iteration   4: 4060555.704 ops/s
# Warmup Iteration   5: 4000790.639 ops/s
# Warmup Iteration   6: 4076530.288 ops/s
# Warmup Iteration   7: 4063280.960 ops/s
# Warmup Iteration   8: 4063754.331 ops/s
# Warmup Iteration   9: 4001981.727 ops/s
# Warmup Iteration  10: 4043136.291 ops/s
# Warmup Iteration  11: 4051046.503 ops/s
# Warmup Iteration  12: 4047894.457 ops/s
# Warmup Iteration  13: 4029507.852 ops/s
# Warmup Iteration  14: 4022929.334 ops/s
# Warmup Iteration  15: 4019717.782 ops/s
# Warmup Iteration  16: 3988216.436 ops/s
# Warmup Iteration  17: 4008603.199 ops/s
# Warmup Iteration  18: 4014386.424 ops/s
# Warmup Iteration  19: 4038295.944 ops/s
# Warmup Iteration  20: 4044088.487 ops/s
# Warmup Iteration  21: 4011068.375 ops/s
# Warmup Iteration  22: 4031445.730 ops/s
# Warmup Iteration  23: 4034118.502 ops/s
# Warmup Iteration  24: 4051135.090 ops/s
# Warmup Iteration  25: 4007474.169 ops/s
# Warmup Iteration  26: 4053294.476 ops/s
# Warmup Iteration  27: 4003981.863 ops/s
# Warmup Iteration  28: 4022704.036 ops/s
# Warmup Iteration  29: 4034343.918 ops/s
# Warmup Iteration  30: 4029726.524 ops/s
Iteration   1: 4034214.722 ops/s
Iteration   2: 4030411.970 ops/s
Iteration   3: 4050942.868 ops/s
Iteration   4: 4038166.739 ops/s
Iteration   5: 4037646.174 ops/s
Iteration   6: 4049604.045 ops/s
Iteration   7: 4038721.499 ops/s
Iteration   8: 4033515.516 ops/s
Iteration   9: 3974466.556 ops/s
Iteration  10: 3993296.221 ops/s
Iteration  11: 3982822.765 ops/s
Iteration  12: 4036283.580 ops/s
Iteration  13: 4033687.990 ops/s
Iteration  14: 4041855.515 ops/s
Iteration  15: 4039418.950 ops/s
Iteration  16: 4020727.066 ops/s
Iteration  17: 4050214.856 ops/s
Iteration  18: 4026144.699 ops/s
Iteration  19: 4027142.527 ops/s
Iteration  20: 4053181.891 ops/s
Iteration  21: 4017471.250 ops/s
Iteration  22: 4025382.592 ops/s
Iteration  23: 4028069.219 ops/s
Iteration  24: 4037213.484 ops/s
Iteration  25: 4033401.795 ops/s
Iteration  26: 4051900.766 ops/s
Iteration  27: 4045351.598 ops/s
Iteration  28: 3958561.460 ops/s
Iteration  29: 4024613.864 ops/s
Iteration  30: 4047604.560 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable":
  4028734.558 ±(99.9%) 15398.100 ops/s [Average]
  (min, avg, max) = (3958561.460, 4028734.558, 4053181.891), stdev = 23047.154
  CI (99.9%): [4013336.458, 4044132.658] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  4028734.558 ± 15398.100  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 931627.522 ops/s
# Warmup Iteration   2: 2154094.799 ops/s
# Warmup Iteration   3: 1789860.132 ops/s
# Warmup Iteration   4: 2142486.581 ops/s
# Warmup Iteration   5: 2156714.258 ops/s
# Warmup Iteration   6: 2167567.922 ops/s
# Warmup Iteration   7: 2154277.715 ops/s
# Warmup Iteration   8: 2161743.885 ops/s
# Warmup Iteration   9: 2157923.499 ops/s
# Warmup Iteration  10: 2153255.912 ops/s
# Warmup Iteration  11: 2167258.191 ops/s
# Warmup Iteration  12: 2169661.434 ops/s
# Warmup Iteration  13: 2161150.979 ops/s
# Warmup Iteration  14: 2144260.583 ops/s
# Warmup Iteration  15: 2135512.234 ops/s
# Warmup Iteration  16: 2143471.979 ops/s
# Warmup Iteration  17: 2131682.036 ops/s
# Warmup Iteration  18: 2143005.464 ops/s
# Warmup Iteration  19: 2156967.854 ops/s
# Warmup Iteration  20: 2152732.556 ops/s
# Warmup Iteration  21: 2160763.250 ops/s
# Warmup Iteration  22: 2150781.510 ops/s
# Warmup Iteration  23: 2157393.508 ops/s
# Warmup Iteration  24: 2166695.430 ops/s
# Warmup Iteration  25: 2166365.219 ops/s
# Warmup Iteration  26: 2165784.823 ops/s
# Warmup Iteration  27: 2148619.555 ops/s
# Warmup Iteration  28: 2167325.419 ops/s
# Warmup Iteration  29: 2148399.526 ops/s
# Warmup Iteration  30: 2168325.998 ops/s
Iteration   1: 2164784.013 ops/s
Iteration   2: 2133124.427 ops/s
Iteration   3: 2142788.749 ops/s
Iteration   4: 2171102.318 ops/s
Iteration   5: 2169771.803 ops/s
Iteration   6: 2167266.482 ops/s
Iteration   7: 2161977.483 ops/s
Iteration   8: 2163670.923 ops/s
Iteration   9: 2164355.188 ops/s
Iteration  10: 2166718.817 ops/s
Iteration  11: 2171427.092 ops/s
Iteration  12: 2121508.132 ops/s
Iteration  13: 2154857.656 ops/s
Iteration  14: 2179876.868 ops/s
Iteration  15: 2158706.592 ops/s
Iteration  16: 2147619.079 ops/s
Iteration  17: 2159168.723 ops/s
Iteration  18: 2159789.967 ops/s
Iteration  19: 2147457.533 ops/s
Iteration  20: 2154595.986 ops/s
Iteration  21: 2164521.103 ops/s
Iteration  22: 2177405.914 ops/s
Iteration  23: 2172592.866 ops/s
Iteration  24: 2167746.576 ops/s
Iteration  25: 2166245.834 ops/s
Iteration  26: 2144972.625 ops/s
Iteration  27: 2131909.855 ops/s
Iteration  28: 2135379.470 ops/s
Iteration  29: 2124565.552 ops/s
Iteration  30: 2167856.806 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_retainAll":
  2157125.481 ±(99.9%) 10411.084 ops/s [Average]
  (min, avg, max) = (2121508.132, 2157125.481, 2179876.868), stdev = 15582.821
  CI (99.9%): [2146714.397, 2167536.565] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_retainAll  thrpt   30  2157125.481 ± 10411.084  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 549962.978 ops/s
# Warmup Iteration   2: 1319243.623 ops/s
# Warmup Iteration   3: 1331060.539 ops/s
# Warmup Iteration   4: 1093952.159 ops/s
# Warmup Iteration   5: 1327513.077 ops/s
# Warmup Iteration   6: 1333080.059 ops/s
# Warmup Iteration   7: 1332528.205 ops/s
# Warmup Iteration   8: 1326466.367 ops/s
# Warmup Iteration   9: 1320338.037 ops/s
# Warmup Iteration  10: 1329073.541 ops/s
# Warmup Iteration  11: 1336803.605 ops/s
# Warmup Iteration  12: 1326543.397 ops/s
# Warmup Iteration  13: 1336808.143 ops/s
# Warmup Iteration  14: 1325259.126 ops/s
# Warmup Iteration  15: 1326761.779 ops/s
# Warmup Iteration  16: 1328359.418 ops/s
# Warmup Iteration  17: 1327909.304 ops/s
# Warmup Iteration  18: 1327833.442 ops/s
# Warmup Iteration  19: 1324340.245 ops/s
# Warmup Iteration  20: 1330105.072 ops/s
# Warmup Iteration  21: 1334322.500 ops/s
# Warmup Iteration  22: 1322028.062 ops/s
# Warmup Iteration  23: 1329810.971 ops/s
# Warmup Iteration  24: 1319598.110 ops/s
# Warmup Iteration  25: 1327700.351 ops/s
# Warmup Iteration  26: 1335446.734 ops/s
# Warmup Iteration  27: 1321198.323 ops/s
# Warmup Iteration  28: 1334671.020 ops/s
# Warmup Iteration  29: 1323594.884 ops/s
# Warmup Iteration  30: 1330417.119 ops/s
Iteration   1: 1335115.302 ops/s
Iteration   2: 1330327.817 ops/s
Iteration   3: 1325261.788 ops/s
Iteration   4: 1339482.030 ops/s
Iteration   5: 1324391.028 ops/s
Iteration   6: 1317383.426 ops/s
Iteration   7: 1334630.760 ops/s
Iteration   8: 1288835.642 ops/s
Iteration   9: 1334278.110 ops/s
Iteration  10: 1322992.721 ops/s
Iteration  11: 1340618.168 ops/s
Iteration  12: 1313399.693 ops/s
Iteration  13: 1331491.612 ops/s
Iteration  14: 1331098.569 ops/s
Iteration  15: 1334864.315 ops/s
Iteration  16: 1332445.295 ops/s
Iteration  17: 1327879.984 ops/s
Iteration  18: 1332734.922 ops/s
Iteration  19: 1341712.641 ops/s
Iteration  20: 1322881.766 ops/s
Iteration  21: 1298860.784 ops/s
Iteration  22: 1330094.714 ops/s
Iteration  23: 1319871.077 ops/s
Iteration  24: 1313013.520 ops/s
Iteration  25: 1333661.281 ops/s
Iteration  26: 1331467.818 ops/s
Iteration  27: 1327583.644 ops/s
Iteration  28: 1337267.422 ops/s
Iteration  29: 1333543.791 ops/s
Iteration  30: 1330813.324 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable":
  1327266.765 ±(99.9%) 7805.239 ops/s [Average]
  (min, avg, max) = (1288835.642, 1327266.765, 1341712.641), stdev = 11682.516
  CI (99.9%): [1319461.526, 1335072.005] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  1327266.765 ± 7805.239  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6808393.165 ops/s
# Warmup Iteration   2: 14291542.652 ops/s
# Warmup Iteration   3: 12225122.019 ops/s
# Warmup Iteration   4: 14494732.452 ops/s
# Warmup Iteration   5: 14538530.769 ops/s
# Warmup Iteration   6: 14397983.810 ops/s
# Warmup Iteration   7: 14517328.379 ops/s
# Warmup Iteration   8: 14391702.042 ops/s
# Warmup Iteration   9: 14255202.871 ops/s
# Warmup Iteration  10: 14420119.854 ops/s
# Warmup Iteration  11: 14373869.572 ops/s
# Warmup Iteration  12: 14621607.952 ops/s
# Warmup Iteration  13: 14369719.314 ops/s
# Warmup Iteration  14: 14491609.515 ops/s
# Warmup Iteration  15: 14333145.445 ops/s
# Warmup Iteration  16: 14438965.644 ops/s
# Warmup Iteration  17: 14481778.908 ops/s
# Warmup Iteration  18: 14483082.702 ops/s
# Warmup Iteration  19: 14482575.526 ops/s
# Warmup Iteration  20: 14275771.047 ops/s
# Warmup Iteration  21: 14474016.512 ops/s
# Warmup Iteration  22: 14424129.454 ops/s
# Warmup Iteration  23: 14555823.632 ops/s
# Warmup Iteration  24: 14496788.773 ops/s
# Warmup Iteration  25: 14558555.165 ops/s
# Warmup Iteration  26: 14570574.974 ops/s
# Warmup Iteration  27: 14479833.894 ops/s
# Warmup Iteration  28: 14312790.903 ops/s
# Warmup Iteration  29: 14155270.730 ops/s
# Warmup Iteration  30: 14558973.916 ops/s
Iteration   1: 14505732.055 ops/s
Iteration   2: 14456314.893 ops/s
Iteration   3: 14535905.268 ops/s
Iteration   4: 14607445.762 ops/s
Iteration   5: 14634181.364 ops/s
Iteration   6: 14505996.435 ops/s
Iteration   7: 14477406.901 ops/s
Iteration   8: 14585317.105 ops/s
Iteration   9: 14577904.884 ops/s
Iteration  10: 14524610.179 ops/s
Iteration  11: 14400785.109 ops/s
Iteration  12: 14118002.386 ops/s
Iteration  13: 14532295.905 ops/s
Iteration  14: 14528657.065 ops/s
Iteration  15: 14488658.763 ops/s
Iteration  16: 14285474.653 ops/s
Iteration  17: 14508825.972 ops/s
Iteration  18: 14607010.609 ops/s
Iteration  19: 14559359.724 ops/s
Iteration  20: 14541899.795 ops/s
Iteration  21: 14493718.400 ops/s
Iteration  22: 14433884.475 ops/s
Iteration  23: 14134083.300 ops/s
Iteration  24: 14441547.055 ops/s
Iteration  25: 14644782.787 ops/s
Iteration  26: 14571722.065 ops/s
Iteration  27: 14516529.162 ops/s
Iteration  28: 14539877.140 ops/s
Iteration  29: 14196537.813 ops/s
Iteration  30: 14185178.543 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_select":
  14471321.519 ±(99.9%) 96427.529 ops/s [Average]
  (min, avg, max) = (14118002.386, 14471321.519, 14644782.787), stdev = 144328.196
  CI (99.9%): [14374893.990, 14567749.048] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_select  thrpt   30  14471321.519 ± 96427.529  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3744010.746 ops/s
# Warmup Iteration   2: 6039914.856 ops/s
# Warmup Iteration   3: 7141262.872 ops/s
# Warmup Iteration   4: 7182428.434 ops/s
# Warmup Iteration   5: 7120476.523 ops/s
# Warmup Iteration   6: 7074692.222 ops/s
# Warmup Iteration   7: 7056737.064 ops/s
# Warmup Iteration   8: 7052815.127 ops/s
# Warmup Iteration   9: 7193583.731 ops/s
# Warmup Iteration  10: 7202504.824 ops/s
# Warmup Iteration  11: 7182877.213 ops/s
# Warmup Iteration  12: 7177678.430 ops/s
# Warmup Iteration  13: 7089775.082 ops/s
# Warmup Iteration  14: 7165991.849 ops/s
# Warmup Iteration  15: 7160700.857 ops/s
# Warmup Iteration  16: 7093023.465 ops/s
# Warmup Iteration  17: 7182524.947 ops/s
# Warmup Iteration  18: 7181023.877 ops/s
# Warmup Iteration  19: 7199244.108 ops/s
# Warmup Iteration  20: 7160893.806 ops/s
# Warmup Iteration  21: 7075609.766 ops/s
# Warmup Iteration  22: 7174423.099 ops/s
# Warmup Iteration  23: 7244788.320 ops/s
# Warmup Iteration  24: 7219906.754 ops/s
# Warmup Iteration  25: 7153280.590 ops/s
# Warmup Iteration  26: 7169980.328 ops/s
# Warmup Iteration  27: 7053701.396 ops/s
# Warmup Iteration  28: 7142547.518 ops/s
# Warmup Iteration  29: 7107510.304 ops/s
# Warmup Iteration  30: 7207413.714 ops/s
Iteration   1: 7200922.251 ops/s
Iteration   2: 7051126.114 ops/s
Iteration   3: 7222752.893 ops/s
Iteration   4: 7063345.644 ops/s
Iteration   5: 7104867.713 ops/s
Iteration   6: 7180864.307 ops/s
Iteration   7: 7162821.252 ops/s
Iteration   8: 7081113.007 ops/s
Iteration   9: 7128408.939 ops/s
Iteration  10: 7170242.062 ops/s
Iteration  11: 7190850.565 ops/s
Iteration  12: 7020944.034 ops/s
Iteration  13: 7122632.729 ops/s
Iteration  14: 7219887.999 ops/s
Iteration  15: 7177587.016 ops/s
Iteration  16: 7102266.919 ops/s
Iteration  17: 7149222.421 ops/s
Iteration  18: 7247886.428 ops/s
Iteration  19: 7101115.547 ops/s
Iteration  20: 7237456.302 ops/s
Iteration  21: 7223410.126 ops/s
Iteration  22: 7230939.323 ops/s
Iteration  23: 7225893.193 ops/s
Iteration  24: 7213079.698 ops/s
Iteration  25: 7154183.982 ops/s
Iteration  26: 7143097.270 ops/s
Iteration  27: 7174700.869 ops/s
Iteration  28: 7211270.387 ops/s
Iteration  29: 7060684.982 ops/s
Iteration  30: 7163848.802 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_size":
  7157914.092 ±(99.9%) 41698.239 ops/s [Average]
  (min, avg, max) = (7020944.034, 7157914.092, 7247886.428), stdev = 62411.965
  CI (99.9%): [7116215.854, 7199612.331] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_size  thrpt   30  7157914.092 ± 41698.239  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 163671038.866 ops/s
# Warmup Iteration   2: 298104666.068 ops/s
# Warmup Iteration   3: 257107577.936 ops/s
# Warmup Iteration   4: 301355799.257 ops/s
# Warmup Iteration   5: 300392273.076 ops/s
# Warmup Iteration   6: 303161574.405 ops/s
# Warmup Iteration   7: 300673966.975 ops/s
# Warmup Iteration   8: 301982712.329 ops/s
# Warmup Iteration   9: 303951307.985 ops/s
# Warmup Iteration  10: 300508988.495 ops/s
# Warmup Iteration  11: 300814365.784 ops/s
# Warmup Iteration  12: 301101624.105 ops/s
# Warmup Iteration  13: 302889394.038 ops/s
# Warmup Iteration  14: 303255357.326 ops/s
# Warmup Iteration  15: 301938264.442 ops/s
# Warmup Iteration  16: 300054239.076 ops/s
# Warmup Iteration  17: 304315278.530 ops/s
# Warmup Iteration  18: 297807642.058 ops/s
# Warmup Iteration  19: 301918271.719 ops/s
# Warmup Iteration  20: 301378371.079 ops/s
# Warmup Iteration  21: 302504399.043 ops/s
# Warmup Iteration  22: 303827696.644 ops/s
# Warmup Iteration  23: 304046652.213 ops/s
# Warmup Iteration  24: 298726959.873 ops/s
# Warmup Iteration  25: 301524487.059 ops/s
# Warmup Iteration  26: 299402829.340 ops/s
# Warmup Iteration  27: 295647539.245 ops/s
# Warmup Iteration  28: 302755097.716 ops/s
# Warmup Iteration  29: 298772608.172 ops/s
# Warmup Iteration  30: 303705786.933 ops/s
Iteration   1: 298445454.975 ops/s
Iteration   2: 299722122.416 ops/s
Iteration   3: 302766372.968 ops/s
Iteration   4: 297966303.279 ops/s
Iteration   5: 301056746.862 ops/s
Iteration   6: 300948562.608 ops/s
Iteration   7: 304254863.714 ops/s
Iteration   8: 302120899.433 ops/s
Iteration   9: 302059738.681 ops/s
Iteration  10: 302283363.238 ops/s
Iteration  11: 296932536.947 ops/s
Iteration  12: 303715395.437 ops/s
Iteration  13: 302158395.297 ops/s
Iteration  14: 301971051.540 ops/s
Iteration  15: 303311931.767 ops/s
Iteration  16: 301376221.640 ops/s
Iteration  17: 297826467.188 ops/s
Iteration  18: 299402885.688 ops/s
Iteration  19: 300276744.904 ops/s
Iteration  20: 299840313.983 ops/s
Iteration  21: 302011918.931 ops/s
Iteration  22: 303161032.804 ops/s
Iteration  23: 303284319.736 ops/s
Iteration  24: 301747797.414 ops/s
Iteration  25: 297156251.284 ops/s
Iteration  26: 302816360.877 ops/s
Iteration  27: 301540235.662 ops/s
Iteration  28: 300753634.705 ops/s
Iteration  29: 300887316.347 ops/s
Iteration  30: 301080459.435 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_testEquals":
  301095856.659 ±(99.9%) 1306690.271 ops/s [Average]
  (min, avg, max) = (296932536.947, 301095856.659, 304254863.714), stdev = 1955792.631
  CI (99.9%): [299789166.387, 302402546.930] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt          Score         Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_testEquals  thrpt   30  301095856.659 ± 1306690.271  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 162663472.360 ops/s
# Warmup Iteration   2: 297801761.738 ops/s
# Warmup Iteration   3: 258586946.066 ops/s
# Warmup Iteration   4: 302196201.653 ops/s
# Warmup Iteration   5: 305909898.002 ops/s
# Warmup Iteration   6: 304746230.169 ops/s
# Warmup Iteration   7: 305309473.067 ops/s
# Warmup Iteration   8: 302946304.303 ops/s
# Warmup Iteration   9: 303012407.473 ops/s
# Warmup Iteration  10: 300834446.521 ops/s
# Warmup Iteration  11: 303470930.381 ops/s
# Warmup Iteration  12: 304575724.848 ops/s
# Warmup Iteration  13: 305031300.017 ops/s
# Warmup Iteration  14: 302054176.569 ops/s
# Warmup Iteration  15: 304538843.539 ops/s
# Warmup Iteration  16: 305278452.899 ops/s
# Warmup Iteration  17: 304638037.015 ops/s
# Warmup Iteration  18: 300465706.048 ops/s
# Warmup Iteration  19: 306580907.527 ops/s
# Warmup Iteration  20: 304138679.142 ops/s
# Warmup Iteration  21: 303635515.697 ops/s
# Warmup Iteration  22: 306065236.969 ops/s
# Warmup Iteration  23: 302812950.335 ops/s
# Warmup Iteration  24: 300636491.155 ops/s
# Warmup Iteration  25: 306171167.986 ops/s
# Warmup Iteration  26: 302838196.332 ops/s
# Warmup Iteration  27: 304083485.448 ops/s
# Warmup Iteration  28: 304701423.450 ops/s
# Warmup Iteration  29: 302233433.968 ops/s
# Warmup Iteration  30: 304697260.128 ops/s
Iteration   1: 304146177.614 ops/s
Iteration   2: 305166828.422 ops/s
Iteration   3: 298586058.788 ops/s
Iteration   4: 305180529.624 ops/s
Iteration   5: 305334589.325 ops/s
Iteration   6: 297297171.172 ops/s
Iteration   7: 304010527.678 ops/s
Iteration   8: 303120201.008 ops/s
Iteration   9: 306562120.051 ops/s
Iteration  10: 305478368.397 ops/s
Iteration  11: 304806271.382 ops/s
Iteration  12: 302826756.057 ops/s
Iteration  13: 305463581.383 ops/s
Iteration  14: 302009858.392 ops/s
Iteration  15: 306562722.050 ops/s
Iteration  16: 305219713.917 ops/s
Iteration  17: 304046940.279 ops/s
Iteration  18: 305244318.572 ops/s
Iteration  19: 304840564.657 ops/s
Iteration  20: 303999659.779 ops/s
Iteration  21: 299517061.794 ops/s
Iteration  22: 300542750.097 ops/s
Iteration  23: 306144107.340 ops/s
Iteration  24: 303050730.788 ops/s
Iteration  25: 304355381.231 ops/s
Iteration  26: 306214756.437 ops/s
Iteration  27: 295793286.467 ops/s
Iteration  28: 299477139.359 ops/s
Iteration  29: 305505751.191 ops/s
Iteration  30: 293955661.854 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode":
  303148652.837 ±(99.9%) 2214350.602 ops/s [Average]
  (min, avg, max) = (293955661.854, 303148652.837, 306562722.050), stdev = 3314335.987
  CI (99.9%): [300934302.235, 305363003.439] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt          Score         Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode  thrpt   30  303148652.837 ± 2214350.602  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 164436555.481 ops/s
# Warmup Iteration   2: 298870921.608 ops/s
# Warmup Iteration   3: 260582664.475 ops/s
# Warmup Iteration   4: 304630686.640 ops/s
# Warmup Iteration   5: 305381187.917 ops/s
# Warmup Iteration   6: 305627134.904 ops/s
# Warmup Iteration   7: 305123354.401 ops/s
# Warmup Iteration   8: 304412249.373 ops/s
# Warmup Iteration   9: 305141880.443 ops/s
# Warmup Iteration  10: 303107268.799 ops/s
# Warmup Iteration  11: 302849411.129 ops/s
# Warmup Iteration  12: 304465442.936 ops/s
# Warmup Iteration  13: 302806989.734 ops/s
# Warmup Iteration  14: 303286978.549 ops/s
# Warmup Iteration  15: 296358968.669 ops/s
# Warmup Iteration  16: 298584499.746 ops/s
# Warmup Iteration  17: 305491023.888 ops/s
# Warmup Iteration  18: 303586975.288 ops/s
# Warmup Iteration  19: 304639090.006 ops/s
# Warmup Iteration  20: 303699128.891 ops/s
# Warmup Iteration  21: 304414928.604 ops/s
# Warmup Iteration  22: 306023570.112 ops/s
# Warmup Iteration  23: 303610461.235 ops/s
# Warmup Iteration  24: 305404733.744 ops/s
# Warmup Iteration  25: 305399729.195 ops/s
# Warmup Iteration  26: 304553452.307 ops/s
# Warmup Iteration  27: 303432106.083 ops/s
# Warmup Iteration  28: 306687935.033 ops/s
# Warmup Iteration  29: 302411665.600 ops/s
# Warmup Iteration  30: 306870018.472 ops/s
Iteration   1: 306011927.125 ops/s
Iteration   2: 307083529.155 ops/s
Iteration   3: 305111347.484 ops/s
Iteration   4: 297345883.513 ops/s
Iteration   5: 305727784.145 ops/s
Iteration   6: 305135329.653 ops/s
Iteration   7: 306078925.794 ops/s
Iteration   8: 302752785.156 ops/s
Iteration   9: 306260885.645 ops/s
Iteration  10: 304736298.712 ops/s
Iteration  11: 299286105.247 ops/s
Iteration  12: 302622030.495 ops/s
Iteration  13: 303107589.405 ops/s
Iteration  14: 304356103.425 ops/s
Iteration  15: 299193808.274 ops/s
Iteration  16: 300786038.472 ops/s
Iteration  17: 303691455.121 ops/s
Iteration  18: 299729976.791 ops/s
Iteration  19: 303999272.049 ops/s
Iteration  20: 305649783.844 ops/s
Iteration  21: 304135568.839 ops/s
Iteration  22: 304578068.558 ops/s
Iteration  23: 304562917.298 ops/s
Iteration  24: 305075634.629 ops/s
Iteration  25: 305184033.440 ops/s
Iteration  26: 303722860.866 ops/s
Iteration  27: 305345603.827 ops/s
Iteration  28: 303886950.170 ops/s
Iteration  29: 307926058.548 ops/s
Iteration  30: 306327166.776 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_testToString":
  303980390.749 ±(99.9%) 1666095.047 ops/s [Average]
  (min, avg, max) = (297345883.513, 303980390.749, 307926058.548), stdev = 2493732.821
  CI (99.9%): [302314295.701, 305646485.796] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt          Score         Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_testToString  thrpt   30  303980390.749 ± 1666095.047  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2478667.985 ops/s
# Warmup Iteration   2: 5654962.502 ops/s
# Warmup Iteration   3: 4692526.040 ops/s
# Warmup Iteration   4: 5691198.314 ops/s
# Warmup Iteration   5: 5673644.321 ops/s
# Warmup Iteration   6: 5611992.878 ops/s
# Warmup Iteration   7: 5706919.334 ops/s
# Warmup Iteration   8: 5694322.879 ops/s
# Warmup Iteration   9: 5719289.524 ops/s
# Warmup Iteration  10: 5633115.763 ops/s
# Warmup Iteration  11: 5694284.961 ops/s
# Warmup Iteration  12: 5716205.841 ops/s
# Warmup Iteration  13: 5681361.230 ops/s
# Warmup Iteration  14: 5670945.867 ops/s
# Warmup Iteration  15: 5726372.189 ops/s
# Warmup Iteration  16: 5698999.950 ops/s
# Warmup Iteration  17: 5723208.102 ops/s
# Warmup Iteration  18: 5714177.024 ops/s
# Warmup Iteration  19: 5652481.693 ops/s
# Warmup Iteration  20: 5671653.928 ops/s
# Warmup Iteration  21: 5685131.774 ops/s
# Warmup Iteration  22: 5677747.747 ops/s
# Warmup Iteration  23: 5672067.748 ops/s
# Warmup Iteration  24: 5727986.416 ops/s
# Warmup Iteration  25: 5709725.648 ops/s
# Warmup Iteration  26: 5680543.307 ops/s
# Warmup Iteration  27: 5729099.364 ops/s
# Warmup Iteration  28: 5735263.372 ops/s
# Warmup Iteration  29: 5730277.633 ops/s
# Warmup Iteration  30: 5707666.335 ops/s
Iteration   1: 5746251.204 ops/s
Iteration   2: 5710871.894 ops/s
Iteration   3: 5572992.149 ops/s
Iteration   4: 5746105.001 ops/s
Iteration   5: 5676171.445 ops/s
Iteration   6: 5704392.876 ops/s
Iteration   7: 5705924.183 ops/s
Iteration   8: 5741773.050 ops/s
Iteration   9: 5671678.796 ops/s
Iteration  10: 5757923.635 ops/s
Iteration  11: 5715647.287 ops/s
Iteration  12: 5739391.864 ops/s
Iteration  13: 5720998.929 ops/s
Iteration  14: 5689880.570 ops/s
Iteration  15: 5656781.966 ops/s
Iteration  16: 5620365.966 ops/s
Iteration  17: 5719119.773 ops/s
Iteration  18: 5754187.520 ops/s
Iteration  19: 5656271.566 ops/s
Iteration  20: 5477002.185 ops/s
Iteration  21: 5702880.510 ops/s
Iteration  22: 5594635.031 ops/s
Iteration  23: 5732453.648 ops/s
Iteration  24: 5694819.754 ops/s
Iteration  25: 5758592.606 ops/s
Iteration  26: 5711607.790 ops/s
Iteration  27: 5725636.740 ops/s
Iteration  28: 5746241.077 ops/s
Iteration  29: 5672287.655 ops/s
Iteration  30: 5741957.508 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_toArray":
  5695494.806 ±(99.9%) 41705.698 ops/s [Average]
  (min, avg, max) = (5477002.185, 5695494.806, 5758592.606), stdev = 62423.130
  CI (99.9%): [5653789.108, 5737200.504] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_toArray  thrpt   30  5695494.806 ± 41705.698  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 967459.372 ops/s
# Warmup Iteration   2: 2599231.249 ops/s
# Warmup Iteration   3: 2679991.910 ops/s
# Warmup Iteration   4: 2501063.074 ops/s
# Warmup Iteration   5: 2374509.508 ops/s
# Warmup Iteration   6: 2665157.084 ops/s
# Warmup Iteration   7: 2675461.283 ops/s
# Warmup Iteration   8: 2661669.328 ops/s
# Warmup Iteration   9: 2656363.904 ops/s
# Warmup Iteration  10: 2661216.168 ops/s
# Warmup Iteration  11: 2664825.258 ops/s
# Warmup Iteration  12: 2602078.382 ops/s
# Warmup Iteration  13: 2676309.458 ops/s
# Warmup Iteration  14: 2657999.382 ops/s
# Warmup Iteration  15: 2672865.751 ops/s
# Warmup Iteration  16: 2635149.028 ops/s
# Warmup Iteration  17: 2656081.839 ops/s
# Warmup Iteration  18: 2662552.275 ops/s
# Warmup Iteration  19: 2666906.138 ops/s
# Warmup Iteration  20: 2637046.934 ops/s
# Warmup Iteration  21: 2663600.389 ops/s
# Warmup Iteration  22: 2634960.272 ops/s
# Warmup Iteration  23: 2659721.787 ops/s
# Warmup Iteration  24: 2651595.344 ops/s
# Warmup Iteration  25: 2665312.138 ops/s
# Warmup Iteration  26: 2622313.453 ops/s
# Warmup Iteration  27: 2671524.513 ops/s
# Warmup Iteration  28: 2661741.754 ops/s
# Warmup Iteration  29: 2662373.935 ops/s
# Warmup Iteration  30: 2652205.143 ops/s
Iteration   1: 2617482.806 ops/s
Iteration   2: 2607481.900 ops/s
Iteration   3: 2658844.410 ops/s
Iteration   4: 2640487.740 ops/s
Iteration   5: 2660880.787 ops/s
Iteration   6: 2640316.813 ops/s
Iteration   7: 2652349.060 ops/s
Iteration   8: 2645327.397 ops/s
Iteration   9: 2660091.722 ops/s
Iteration  10: 2610892.734 ops/s
Iteration  11: 2669414.036 ops/s
Iteration  12: 2665907.992 ops/s
Iteration  13: 2658673.929 ops/s
Iteration  14: 2630803.977 ops/s
Iteration  15: 2681759.422 ops/s
Iteration  16: 2580281.071 ops/s
Iteration  17: 2676965.025 ops/s
Iteration  18: 2667830.306 ops/s
Iteration  19: 2660276.659 ops/s
Iteration  20: 2660236.776 ops/s
Iteration  21: 2661366.744 ops/s
Iteration  22: 2658303.868 ops/s
Iteration  23: 2662867.456 ops/s
Iteration  24: 2679347.886 ops/s
Iteration  25: 2664596.517 ops/s
Iteration  26: 2658211.609 ops/s
Iteration  27: 2666363.078 ops/s
Iteration  28: 2655073.663 ops/s
Iteration  29: 2670121.565 ops/s
Iteration  30: 2567279.597 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_toBag":
  2649661.218 ±(99.9%) 18462.930 ops/s [Average]
  (min, avg, max) = (2567279.597, 2649661.218, 2681759.422), stdev = 27634.446
  CI (99.9%): [2631198.288, 2668124.148] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_toBag  thrpt   30  2649661.218 ± 18462.930  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1505948.315 ops/s
# Warmup Iteration   2: 3518774.648 ops/s
# Warmup Iteration   3: 2912185.160 ops/s
# Warmup Iteration   4: 3503879.463 ops/s
# Warmup Iteration   5: 3510527.740 ops/s
# Warmup Iteration   6: 3487666.580 ops/s
# Warmup Iteration   7: 3493872.467 ops/s
# Warmup Iteration   8: 3491578.939 ops/s
# Warmup Iteration   9: 3507390.047 ops/s
# Warmup Iteration  10: 3487832.055 ops/s
# Warmup Iteration  11: 3515593.908 ops/s
# Warmup Iteration  12: 3492311.756 ops/s
# Warmup Iteration  13: 3511110.419 ops/s
# Warmup Iteration  14: 3499316.130 ops/s
# Warmup Iteration  15: 3513921.820 ops/s
# Warmup Iteration  16: 3484125.540 ops/s
# Warmup Iteration  17: 3450611.234 ops/s
# Warmup Iteration  18: 3506177.514 ops/s
# Warmup Iteration  19: 3475912.753 ops/s
# Warmup Iteration  20: 3513293.338 ops/s
# Warmup Iteration  21: 3489788.184 ops/s
# Warmup Iteration  22: 3519210.063 ops/s
# Warmup Iteration  23: 3503151.631 ops/s
# Warmup Iteration  24: 3520295.275 ops/s
# Warmup Iteration  25: 3490345.574 ops/s
# Warmup Iteration  26: 3506866.301 ops/s
# Warmup Iteration  27: 3492229.770 ops/s
# Warmup Iteration  28: 3516404.992 ops/s
# Warmup Iteration  29: 3506818.775 ops/s
# Warmup Iteration  30: 3492823.755 ops/s
Iteration   1: 3507978.598 ops/s
Iteration   2: 3443974.757 ops/s
Iteration   3: 3490586.805 ops/s
Iteration   4: 3481955.888 ops/s
Iteration   5: 3514867.817 ops/s
Iteration   6: 3403390.063 ops/s
Iteration   7: 3502407.486 ops/s
Iteration   8: 3526808.821 ops/s
Iteration   9: 3514084.783 ops/s
Iteration  10: 3510317.132 ops/s
Iteration  11: 3514100.728 ops/s
Iteration  12: 3485778.974 ops/s
Iteration  13: 3492218.358 ops/s
Iteration  14: 3513443.394 ops/s
Iteration  15: 3482254.732 ops/s
Iteration  16: 3528216.713 ops/s
Iteration  17: 3513872.780 ops/s
Iteration  18: 3517047.300 ops/s
Iteration  19: 3516329.428 ops/s
Iteration  20: 3441695.799 ops/s
Iteration  21: 3514701.910 ops/s
Iteration  22: 3482823.940 ops/s
Iteration  23: 3527656.057 ops/s
Iteration  24: 3503591.894 ops/s
Iteration  25: 3522421.342 ops/s
Iteration  26: 3515572.861 ops/s
Iteration  27: 3515868.627 ops/s
Iteration  28: 3517109.644 ops/s
Iteration  29: 3525236.345 ops/s
Iteration  30: 3525628.118 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_toList":
  3501731.370 ±(99.9%) 19174.241 ops/s [Average]
  (min, avg, max) = (3403390.063, 3501731.370, 3528216.713), stdev = 28699.104
  CI (99.9%): [3482557.128, 3520905.611] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_toList  thrpt   30  3501731.370 ± 19174.241  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2413163.245 ops/s
# Warmup Iteration   2: 6240498.645 ops/s
# Warmup Iteration   3: 5191110.922 ops/s
# Warmup Iteration   4: 6211575.790 ops/s
# Warmup Iteration   5: 6215508.188 ops/s
# Warmup Iteration   6: 6263518.407 ops/s
# Warmup Iteration   7: 6284067.119 ops/s
# Warmup Iteration   8: 6286608.798 ops/s
# Warmup Iteration   9: 6279454.693 ops/s
# Warmup Iteration  10: 6219240.559 ops/s
# Warmup Iteration  11: 6222514.194 ops/s
# Warmup Iteration  12: 6203925.073 ops/s
# Warmup Iteration  13: 6225024.399 ops/s
# Warmup Iteration  14: 6257200.740 ops/s
# Warmup Iteration  15: 6237422.366 ops/s
# Warmup Iteration  16: 6266394.942 ops/s
# Warmup Iteration  17: 6262237.078 ops/s
# Warmup Iteration  18: 6288428.914 ops/s
# Warmup Iteration  19: 6160717.621 ops/s
# Warmup Iteration  20: 6266234.022 ops/s
# Warmup Iteration  21: 6267131.802 ops/s
# Warmup Iteration  22: 6269198.157 ops/s
# Warmup Iteration  23: 6290150.922 ops/s
# Warmup Iteration  24: 6271355.071 ops/s
# Warmup Iteration  25: 6248327.902 ops/s
# Warmup Iteration  26: 6238311.164 ops/s
# Warmup Iteration  27: 6304513.347 ops/s
# Warmup Iteration  28: 6291163.303 ops/s
# Warmup Iteration  29: 6248273.420 ops/s
# Warmup Iteration  30: 6287651.481 ops/s
Iteration   1: 6292642.452 ops/s
Iteration   2: 6264947.367 ops/s
Iteration   3: 6298658.430 ops/s
Iteration   4: 6277061.110 ops/s
Iteration   5: 6194387.274 ops/s
Iteration   6: 6247093.024 ops/s
Iteration   7: 6169853.400 ops/s
Iteration   8: 6303995.778 ops/s
Iteration   9: 6273950.407 ops/s
Iteration  10: 6322240.595 ops/s
Iteration  11: 6275719.271 ops/s
Iteration  12: 6323786.276 ops/s
Iteration  13: 6291563.046 ops/s
Iteration  14: 6274696.172 ops/s
Iteration  15: 6283570.852 ops/s
Iteration  16: 6309706.977 ops/s
Iteration  17: 6276015.624 ops/s
Iteration  18: 6120798.569 ops/s
Iteration  19: 6236865.928 ops/s
Iteration  20: 6251152.036 ops/s
Iteration  21: 6274211.196 ops/s
Iteration  22: 6232719.682 ops/s
Iteration  23: 6303768.072 ops/s
Iteration  24: 6276870.878 ops/s
Iteration  25: 6021831.153 ops/s
Iteration  26: 6266286.183 ops/s
Iteration  27: 6211001.853 ops/s
Iteration  28: 6126588.469 ops/s
Iteration  29: 6267020.195 ops/s
Iteration  30: 6285146.856 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_toSet":
  6251804.971 ±(99.9%) 44569.690 ops/s [Average]
  (min, avg, max) = (6021831.153, 6251804.971, 6323786.276), stdev = 66709.819
  CI (99.9%): [6207235.281, 6296374.661] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_toSet  thrpt   30  6251804.971 ± 44569.690  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 701092.658 ops/s
# Warmup Iteration   2: 757305.977 ops/s
# Warmup Iteration   3: 1011418.763 ops/s
# Warmup Iteration   4: 1012164.303 ops/s
# Warmup Iteration   5: 997300.163 ops/s
# Warmup Iteration   6: 1009166.424 ops/s
# Warmup Iteration   7: 1000279.219 ops/s
# Warmup Iteration   8: 1003519.566 ops/s
# Warmup Iteration   9: 1006302.081 ops/s
# Warmup Iteration  10: 888924.119 ops/s
# Warmup Iteration  11: 950080.961 ops/s
# Warmup Iteration  12: 1003246.508 ops/s
# Warmup Iteration  13: 1007411.063 ops/s
# Warmup Iteration  14: 995684.131 ops/s
# Warmup Iteration  15: 1002395.792 ops/s
# Warmup Iteration  16: 1006524.058 ops/s
# Warmup Iteration  17: 1065760.192 ops/s
# Warmup Iteration  18: 1070207.489 ops/s
# Warmup Iteration  19: 1071159.377 ops/s
# Warmup Iteration  20: 1061740.345 ops/s
# Warmup Iteration  21: 1072177.821 ops/s
# Warmup Iteration  22: 1069607.607 ops/s
# Warmup Iteration  23: 1063254.443 ops/s
# Warmup Iteration  24: 1071666.081 ops/s
# Warmup Iteration  25: 1078156.233 ops/s
# Warmup Iteration  26: 1074637.688 ops/s
# Warmup Iteration  27: 1074013.369 ops/s
# Warmup Iteration  28: 1073075.571 ops/s
# Warmup Iteration  29: 1072268.395 ops/s
# Warmup Iteration  30: 1061358.438 ops/s
Iteration   1: 1066596.787 ops/s
Iteration   2: 1076224.325 ops/s
Iteration   3: 1074288.046 ops/s
Iteration   4: 1067381.373 ops/s
Iteration   5: 1080023.361 ops/s
Iteration   6: 1056080.082 ops/s
Iteration   7: 1079386.715 ops/s
Iteration   8: 1078268.332 ops/s
Iteration   9: 1072668.573 ops/s
Iteration  10: 1073067.513 ops/s
Iteration  11: 1060602.384 ops/s
Iteration  12: 1073003.754 ops/s
Iteration  13: 1070755.738 ops/s
Iteration  14: 1076118.869 ops/s
Iteration  15: 1057367.238 ops/s
Iteration  16: 1055322.440 ops/s
Iteration  17: 1076494.397 ops/s
Iteration  18: 1074737.928 ops/s
Iteration  19: 1060561.921 ops/s
Iteration  20: 1065325.901 ops/s
Iteration  21: 1069722.773 ops/s
Iteration  22: 1066556.645 ops/s
Iteration  23: 1075001.404 ops/s
Iteration  24: 1070115.306 ops/s
Iteration  25: 1069198.728 ops/s
Iteration  26: 1067876.577 ops/s
Iteration  27: 1058450.611 ops/s
Iteration  28: 1061560.592 ops/s
Iteration  29: 1074711.263 ops/s
Iteration  30: 1066763.082 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_with":
  1069141.089 ±(99.9%) 4782.541 ops/s [Average]
  (min, avg, max) = (1055322.440, 1069141.089, 1080023.361), stdev = 7158.283
  CI (99.9%): [1064358.548, 1073923.629] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_with  thrpt   30  1069141.089 ± 4782.541  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 707767.789 ops/s
# Warmup Iteration   2: 759613.883 ops/s
# Warmup Iteration   3: 999109.086 ops/s
# Warmup Iteration   4: 1008226.142 ops/s
# Warmup Iteration   5: 1009285.146 ops/s
# Warmup Iteration   6: 1004676.445 ops/s
# Warmup Iteration   7: 998180.722 ops/s
# Warmup Iteration   8: 1004766.651 ops/s
# Warmup Iteration   9: 1003959.141 ops/s
# Warmup Iteration  10: 1006957.222 ops/s
# Warmup Iteration  11: 841320.234 ops/s
# Warmup Iteration  12: 996862.743 ops/s
# Warmup Iteration  13: 1006135.398 ops/s
# Warmup Iteration  14: 997191.852 ops/s
# Warmup Iteration  15: 995125.660 ops/s
# Warmup Iteration  16: 1011220.503 ops/s
# Warmup Iteration  17: 1057000.650 ops/s
# Warmup Iteration  18: 1067230.927 ops/s
# Warmup Iteration  19: 1061438.191 ops/s
# Warmup Iteration  20: 1060439.191 ops/s
# Warmup Iteration  21: 1053674.754 ops/s
# Warmup Iteration  22: 1068075.430 ops/s
# Warmup Iteration  23: 1053596.056 ops/s
# Warmup Iteration  24: 1062025.620 ops/s
# Warmup Iteration  25: 1070284.952 ops/s
# Warmup Iteration  26: 1065613.826 ops/s
# Warmup Iteration  27: 1070609.634 ops/s
# Warmup Iteration  28: 1056491.606 ops/s
# Warmup Iteration  29: 1066972.059 ops/s
# Warmup Iteration  30: 1050345.290 ops/s
Iteration   1: 1059769.814 ops/s
Iteration   2: 1071425.539 ops/s
Iteration   3: 1054658.072 ops/s
Iteration   4: 1057244.200 ops/s
Iteration   5: 1061500.365 ops/s
Iteration   6: 1066060.455 ops/s
Iteration   7: 1060072.732 ops/s
Iteration   8: 1055498.215 ops/s
Iteration   9: 1046913.739 ops/s
Iteration  10: 1070271.328 ops/s
Iteration  11: 1069501.277 ops/s
Iteration  12: 1064217.713 ops/s
Iteration  13: 1063738.538 ops/s
Iteration  14: 1072619.195 ops/s
Iteration  15: 1041498.202 ops/s
Iteration  16: 1073187.205 ops/s
Iteration  17: 1057923.901 ops/s
Iteration  18: 1061629.771 ops/s
Iteration  19: 1061187.116 ops/s
Iteration  20: 1044510.185 ops/s
Iteration  21: 1070020.451 ops/s
Iteration  22: 1064558.279 ops/s
Iteration  23: 1068880.427 ops/s
Iteration  24: 1052217.917 ops/s
Iteration  25: 1070097.549 ops/s
Iteration  26: 1062755.951 ops/s
Iteration  27: 1067336.851 ops/s
Iteration  28: 1062851.666 ops/s
Iteration  29: 1061693.246 ops/s
Iteration  30: 1066221.781 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_withAll":
  1062002.056 ±(99.9%) 5410.732 ops/s [Average]
  (min, avg, max) = (1041498.202, 1062002.056, 1073187.205), stdev = 8098.530
  CI (99.9%): [1056591.323, 1067412.788] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_withAll  thrpt   30  1062002.056 ± 5410.732  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 701579.478 ops/s
# Warmup Iteration   2: 767329.735 ops/s
# Warmup Iteration   3: 995892.995 ops/s
# Warmup Iteration   4: 1005076.502 ops/s
# Warmup Iteration   5: 999824.600 ops/s
# Warmup Iteration   6: 992951.758 ops/s
# Warmup Iteration   7: 1012088.430 ops/s
# Warmup Iteration   8: 999384.111 ops/s
# Warmup Iteration   9: 1001358.871 ops/s
# Warmup Iteration  10: 866868.634 ops/s
# Warmup Iteration  11: 969249.112 ops/s
# Warmup Iteration  12: 1006226.156 ops/s
# Warmup Iteration  13: 1001977.285 ops/s
# Warmup Iteration  14: 1008592.354 ops/s
# Warmup Iteration  15: 1005645.585 ops/s
# Warmup Iteration  16: 1000360.398 ops/s
# Warmup Iteration  17: 1061389.574 ops/s
# Warmup Iteration  18: 1058680.936 ops/s
# Warmup Iteration  19: 1069712.985 ops/s
# Warmup Iteration  20: 1069481.857 ops/s
# Warmup Iteration  21: 1069469.526 ops/s
# Warmup Iteration  22: 1067066.576 ops/s
# Warmup Iteration  23: 1063769.678 ops/s
# Warmup Iteration  24: 1064013.904 ops/s
# Warmup Iteration  25: 1061389.558 ops/s
# Warmup Iteration  26: 1072122.615 ops/s
# Warmup Iteration  27: 1061827.330 ops/s
# Warmup Iteration  28: 1066216.021 ops/s
# Warmup Iteration  29: 1050301.873 ops/s
# Warmup Iteration  30: 1055463.034 ops/s
Iteration   1: 1061672.059 ops/s
Iteration   2: 1050148.345 ops/s
Iteration   3: 1062185.583 ops/s
Iteration   4: 1071748.397 ops/s
Iteration   5: 1065175.630 ops/s
Iteration   6: 1044412.935 ops/s
Iteration   7: 1030421.163 ops/s
Iteration   8: 1068455.670 ops/s
Iteration   9: 1071654.446 ops/s
Iteration  10: 1067198.869 ops/s
Iteration  11: 1073362.542 ops/s
Iteration  12: 1062743.617 ops/s
Iteration  13: 1072338.960 ops/s
Iteration  14: 1053477.364 ops/s
Iteration  15: 1073122.196 ops/s
Iteration  16: 1066127.989 ops/s
Iteration  17: 1063769.214 ops/s
Iteration  18: 1066753.000 ops/s
Iteration  19: 1064305.079 ops/s
Iteration  20: 1057745.368 ops/s
Iteration  21: 1062966.772 ops/s
Iteration  22: 1060363.197 ops/s
Iteration  23: 1075356.022 ops/s
Iteration  24: 1049379.828 ops/s
Iteration  25: 1072381.969 ops/s
Iteration  26: 1067488.813 ops/s
Iteration  27: 1067989.546 ops/s
Iteration  28: 1073322.377 ops/s
Iteration  29: 1068606.026 ops/s
Iteration  30: 1073511.903 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_without":
  1063939.496 ±(99.9%) 6703.890 ops/s [Average]
  (min, avg, max) = (1030421.163, 1063939.496, 1075356.022), stdev = 10034.067
  CI (99.9%): [1057235.606, 1070643.385] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_without  thrpt   30  1063939.496 ± 6703.890  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 686878.395 ops/s
# Warmup Iteration   2: 757970.178 ops/s
# Warmup Iteration   3: 998131.767 ops/s
# Warmup Iteration   4: 993631.789 ops/s
# Warmup Iteration   5: 986931.222 ops/s
# Warmup Iteration   6: 999303.017 ops/s
# Warmup Iteration   7: 998900.894 ops/s
# Warmup Iteration   8: 997452.737 ops/s
# Warmup Iteration   9: 997603.524 ops/s
# Warmup Iteration  10: 879248.906 ops/s
# Warmup Iteration  11: 946753.349 ops/s
# Warmup Iteration  12: 996067.843 ops/s
# Warmup Iteration  13: 991632.075 ops/s
# Warmup Iteration  14: 987005.936 ops/s
# Warmup Iteration  15: 999312.260 ops/s
# Warmup Iteration  16: 1000570.255 ops/s
# Warmup Iteration  17: 1068763.021 ops/s
# Warmup Iteration  18: 1065005.927 ops/s
# Warmup Iteration  19: 1068424.948 ops/s
# Warmup Iteration  20: 1064641.892 ops/s
# Warmup Iteration  21: 1067268.610 ops/s
# Warmup Iteration  22: 1063856.399 ops/s
# Warmup Iteration  23: 1063252.797 ops/s
# Warmup Iteration  24: 1059135.334 ops/s
# Warmup Iteration  25: 1064982.576 ops/s
# Warmup Iteration  26: 1063731.517 ops/s
# Warmup Iteration  27: 1066661.712 ops/s
# Warmup Iteration  28: 1055385.739 ops/s
# Warmup Iteration  29: 1065927.925 ops/s
# Warmup Iteration  30: 1055624.659 ops/s
Iteration   1: 1067526.307 ops/s
Iteration   2: 1066928.770 ops/s
Iteration   3: 1071530.923 ops/s
Iteration   4: 1063111.921 ops/s
Iteration   5: 1060772.929 ops/s
Iteration   6: 1064103.149 ops/s
Iteration   7: 1062346.871 ops/s
Iteration   8: 1070752.067 ops/s
Iteration   9: 1067527.424 ops/s
Iteration  10: 1062348.352 ops/s
Iteration  11: 1063914.353 ops/s
Iteration  12: 1063648.737 ops/s
Iteration  13: 1029749.569 ops/s
Iteration  14: 1066168.308 ops/s
Iteration  15: 1071023.990 ops/s
Iteration  16: 1068966.513 ops/s
Iteration  17: 1060578.155 ops/s
Iteration  18: 1065807.040 ops/s
Iteration  19: 1069610.984 ops/s
Iteration  20: 1062363.672 ops/s
Iteration  21: 1064899.049 ops/s
Iteration  22: 1064176.851 ops/s
Iteration  23: 1049956.217 ops/s
Iteration  24: 1067646.752 ops/s
Iteration  25: 1055939.394 ops/s
Iteration  26: 1066360.151 ops/s
Iteration  27: 1060706.089 ops/s
Iteration  28: 1060386.780 ops/s
Iteration  29: 1057718.431 ops/s
Iteration  30: 1066109.397 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.CharBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll":
  1063089.305 ±(99.9%) 5231.884 ops/s [Average]
  (min, avg, max) = (1029749.569, 1063089.305, 1071530.923), stdev = 7830.838
  CI (99.9%): [1057857.421, 1068321.188] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
CharBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll  thrpt   30  1063089.305 ± 5231.884  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 679259.585 ops/s
# Warmup Iteration   2: 766196.782 ops/s
# Warmup Iteration   3: 995347.064 ops/s
# Warmup Iteration   4: 992687.086 ops/s
# Warmup Iteration   5: 983377.604 ops/s
# Warmup Iteration   6: 995529.414 ops/s
# Warmup Iteration   7: 992558.746 ops/s
# Warmup Iteration   8: 990880.819 ops/s
# Warmup Iteration   9: 993404.160 ops/s
# Warmup Iteration  10: 826358.521 ops/s
# Warmup Iteration  11: 990982.323 ops/s
# Warmup Iteration  12: 993855.376 ops/s
# Warmup Iteration  13: 992098.882 ops/s
# Warmup Iteration  14: 994400.266 ops/s
# Warmup Iteration  15: 996177.265 ops/s
# Warmup Iteration  16: 973722.590 ops/s
# Warmup Iteration  17: 1044692.963 ops/s
# Warmup Iteration  18: 1053993.715 ops/s
# Warmup Iteration  19: 1051671.057 ops/s
# Warmup Iteration  20: 1044929.032 ops/s
# Warmup Iteration  21: 1056116.326 ops/s
# Warmup Iteration  22: 1056463.074 ops/s
# Warmup Iteration  23: 1046221.856 ops/s
# Warmup Iteration  24: 1055220.005 ops/s
# Warmup Iteration  25: 1054043.839 ops/s
# Warmup Iteration  26: 1055687.494 ops/s
# Warmup Iteration  27: 1037065.074 ops/s
# Warmup Iteration  28: 1049024.224 ops/s
# Warmup Iteration  29: 1054173.211 ops/s
# Warmup Iteration  30: 1054244.604 ops/s
Iteration   1: 1051366.491 ops/s
Iteration   2: 1035213.133 ops/s
Iteration   3: 1060042.340 ops/s
Iteration   4: 1038053.785 ops/s
Iteration   5: 1042124.497 ops/s
Iteration   6: 1042056.351 ops/s
Iteration   7: 1041238.814 ops/s
Iteration   8: 1059576.260 ops/s
Iteration   9: 1020896.743 ops/s
Iteration  10: 1039357.755 ops/s
Iteration  11: 1056175.166 ops/s
Iteration  12: 1062041.241 ops/s
Iteration  13: 1040032.751 ops/s
Iteration  14: 1057781.068 ops/s
Iteration  15: 1026584.993 ops/s
Iteration  16: 1050316.631 ops/s
Iteration  17: 1058157.122 ops/s
Iteration  18: 1060213.274 ops/s
Iteration  19: 1034331.974 ops/s
Iteration  20: 1065712.846 ops/s
Iteration  21: 1053655.200 ops/s
Iteration  22: 1060776.949 ops/s
Iteration  23: 1039190.153 ops/s
Iteration  24: 1049833.386 ops/s
Iteration  25: 1058892.550 ops/s
Iteration  26: 1056989.843 ops/s
Iteration  27: 1046842.253 ops/s
Iteration  28: 1052720.180 ops/s
Iteration  29: 1034783.230 ops/s
Iteration  30: 1059290.321 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_add":
  1048474.910 ±(99.9%) 7760.099 ops/s [Average]
  (min, avg, max) = (1020896.743, 1048474.910, 1065712.846), stdev = 11614.951
  CI (99.9%): [1040714.811, 1056235.009] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_add  thrpt   30  1048474.910 ± 7760.099  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 675519.593 ops/s
# Warmup Iteration   2: 762101.398 ops/s
# Warmup Iteration   3: 996957.707 ops/s
# Warmup Iteration   4: 1003648.261 ops/s
# Warmup Iteration   5: 995958.201 ops/s
# Warmup Iteration   6: 983467.955 ops/s
# Warmup Iteration   7: 1001012.553 ops/s
# Warmup Iteration   8: 983039.519 ops/s
# Warmup Iteration   9: 997422.053 ops/s
# Warmup Iteration  10: 831278.163 ops/s
# Warmup Iteration  11: 1000876.164 ops/s
# Warmup Iteration  12: 1002191.352 ops/s
# Warmup Iteration  13: 998327.068 ops/s
# Warmup Iteration  14: 981835.703 ops/s
# Warmup Iteration  15: 1003726.595 ops/s
# Warmup Iteration  16: 1000736.141 ops/s
# Warmup Iteration  17: 1048944.693 ops/s
# Warmup Iteration  18: 1066105.018 ops/s
# Warmup Iteration  19: 1062785.679 ops/s
# Warmup Iteration  20: 1060090.424 ops/s
# Warmup Iteration  21: 1063302.809 ops/s
# Warmup Iteration  22: 1056418.568 ops/s
# Warmup Iteration  23: 1053185.658 ops/s
# Warmup Iteration  24: 1054833.573 ops/s
# Warmup Iteration  25: 1043487.696 ops/s
# Warmup Iteration  26: 1042606.765 ops/s
# Warmup Iteration  27: 1053447.351 ops/s
# Warmup Iteration  28: 1036958.095 ops/s
# Warmup Iteration  29: 1064457.502 ops/s
# Warmup Iteration  30: 1061166.528 ops/s
Iteration   1: 1050525.860 ops/s
Iteration   2: 1062245.000 ops/s
Iteration   3: 1042312.446 ops/s
Iteration   4: 1061172.443 ops/s
Iteration   5: 1062413.970 ops/s
Iteration   6: 1058725.413 ops/s
Iteration   7: 1067061.234 ops/s
Iteration   8: 1057712.532 ops/s
Iteration   9: 1064529.460 ops/s
Iteration  10: 1058294.989 ops/s
Iteration  11: 1061527.917 ops/s
Iteration  12: 1061083.709 ops/s
Iteration  13: 1060081.562 ops/s
Iteration  14: 1062426.282 ops/s
Iteration  15: 1049670.834 ops/s
Iteration  16: 1059749.220 ops/s
Iteration  17: 1051398.955 ops/s
Iteration  18: 1039998.477 ops/s
Iteration  19: 1059678.397 ops/s
Iteration  20: 1067138.520 ops/s
Iteration  21: 1049969.293 ops/s
Iteration  22: 1067472.545 ops/s
Iteration  23: 1061225.868 ops/s
Iteration  24: 1062284.546 ops/s
Iteration  25: 1057523.395 ops/s
Iteration  26: 1045172.056 ops/s
Iteration  27: 1048150.451 ops/s
Iteration  28: 1051668.991 ops/s
Iteration  29: 1055096.281 ops/s
Iteration  30: 1058455.739 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray":
  1057158.880 ±(99.9%) 4836.193 ops/s [Average]
  (min, avg, max) = (1039998.477, 1057158.880, 1067472.545), stdev = 7238.587
  CI (99.9%): [1052322.687, 1061995.073] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray  thrpt   30  1057158.880 ± 4836.193  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 682946.103 ops/s
# Warmup Iteration   2: 756158.047 ops/s
# Warmup Iteration   3: 996694.789 ops/s
# Warmup Iteration   4: 998352.599 ops/s
# Warmup Iteration   5: 989865.829 ops/s
# Warmup Iteration   6: 994541.492 ops/s
# Warmup Iteration   7: 989325.177 ops/s
# Warmup Iteration   8: 984535.074 ops/s
# Warmup Iteration   9: 998070.504 ops/s
# Warmup Iteration  10: 827670.311 ops/s
# Warmup Iteration  11: 998156.065 ops/s
# Warmup Iteration  12: 996575.370 ops/s
# Warmup Iteration  13: 992777.325 ops/s
# Warmup Iteration  14: 989404.089 ops/s
# Warmup Iteration  15: 987577.563 ops/s
# Warmup Iteration  16: 1000019.783 ops/s
# Warmup Iteration  17: 1037676.866 ops/s
# Warmup Iteration  18: 1037789.583 ops/s
# Warmup Iteration  19: 1055345.900 ops/s
# Warmup Iteration  20: 1055600.233 ops/s
# Warmup Iteration  21: 1057378.177 ops/s
# Warmup Iteration  22: 1052217.708 ops/s
# Warmup Iteration  23: 1046328.084 ops/s
# Warmup Iteration  24: 1050870.990 ops/s
# Warmup Iteration  25: 1052526.389 ops/s
# Warmup Iteration  26: 1058986.937 ops/s
# Warmup Iteration  27: 1056897.827 ops/s
# Warmup Iteration  28: 1054016.754 ops/s
# Warmup Iteration  29: 1055015.610 ops/s
# Warmup Iteration  30: 1044069.478 ops/s
Iteration   1: 1032282.814 ops/s
Iteration   2: 1057146.060 ops/s
Iteration   3: 1054437.054 ops/s
Iteration   4: 1059341.162 ops/s
Iteration   5: 1053507.361 ops/s
Iteration   6: 1059505.284 ops/s
Iteration   7: 1047406.511 ops/s
Iteration   8: 1058507.229 ops/s
Iteration   9: 1045047.936 ops/s
Iteration  10: 1051500.379 ops/s
Iteration  11: 1040858.849 ops/s
Iteration  12: 1040463.891 ops/s
Iteration  13: 1052278.672 ops/s
Iteration  14: 1037911.794 ops/s
Iteration  15: 1057755.252 ops/s
Iteration  16: 1061442.529 ops/s
Iteration  17: 1044746.695 ops/s
Iteration  18: 1053324.003 ops/s
Iteration  19: 1035559.570 ops/s
Iteration  20: 1048530.128 ops/s
Iteration  21: 1055272.756 ops/s
Iteration  22: 1052668.716 ops/s
Iteration  23: 1019880.494 ops/s
Iteration  24: 1059624.885 ops/s
Iteration  25: 1056083.795 ops/s
Iteration  26: 1059577.466 ops/s
Iteration  27: 1048374.895 ops/s
Iteration  28: 1054835.324 ops/s
Iteration  29: 1059042.539 ops/s
Iteration  30: 1061105.633 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable":
  1050600.656 ±(99.9%) 6600.522 ops/s [Average]
  (min, avg, max) = (1019880.494, 1050600.656, 1061442.529), stdev = 9879.351
  CI (99.9%): [1044000.134, 1057201.178] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable  thrpt   30  1050600.656 ± 6600.522  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1032471.772 ops/s
# Warmup Iteration   2: 2316529.195 ops/s
# Warmup Iteration   3: 1898283.470 ops/s
# Warmup Iteration   4: 2261291.382 ops/s
# Warmup Iteration   5: 2293600.436 ops/s
# Warmup Iteration   6: 2291562.869 ops/s
# Warmup Iteration   7: 2291278.765 ops/s
# Warmup Iteration   8: 2240432.567 ops/s
# Warmup Iteration   9: 2285092.659 ops/s
# Warmup Iteration  10: 2236843.080 ops/s
# Warmup Iteration  11: 2267895.688 ops/s
# Warmup Iteration  12: 2264970.539 ops/s
# Warmup Iteration  13: 2278464.721 ops/s
# Warmup Iteration  14: 2291441.592 ops/s
# Warmup Iteration  15: 2275887.101 ops/s
# Warmup Iteration  16: 2297362.249 ops/s
# Warmup Iteration  17: 2243475.754 ops/s
# Warmup Iteration  18: 2230423.388 ops/s
# Warmup Iteration  19: 2228795.248 ops/s
# Warmup Iteration  20: 2234400.000 ops/s
# Warmup Iteration  21: 2233322.752 ops/s
# Warmup Iteration  22: 2218697.551 ops/s
# Warmup Iteration  23: 2235317.793 ops/s
# Warmup Iteration  24: 2223895.313 ops/s
# Warmup Iteration  25: 2219729.719 ops/s
# Warmup Iteration  26: 2224279.381 ops/s
# Warmup Iteration  27: 2231063.566 ops/s
# Warmup Iteration  28: 2224869.203 ops/s
# Warmup Iteration  29: 2240217.090 ops/s
# Warmup Iteration  30: 2236085.007 ops/s
Iteration   1: 2225700.254 ops/s
Iteration   2: 2242075.090 ops/s
Iteration   3: 2212481.076 ops/s
Iteration   4: 2184690.054 ops/s
Iteration   5: 2233111.371 ops/s
Iteration   6: 2233500.455 ops/s
Iteration   7: 2197910.256 ops/s
Iteration   8: 2204835.601 ops/s
Iteration   9: 2195273.626 ops/s
Iteration  10: 2166142.011 ops/s
Iteration  11: 2199607.175 ops/s
Iteration  12: 2203364.744 ops/s
Iteration  13: 2223616.893 ops/s
Iteration  14: 2127139.327 ops/s
Iteration  15: 2213901.175 ops/s
Iteration  16: 2241468.856 ops/s
Iteration  17: 2239225.063 ops/s
Iteration  18: 2224614.490 ops/s
Iteration  19: 2240704.790 ops/s
Iteration  20: 2250384.445 ops/s
Iteration  21: 2217482.968 ops/s
Iteration  22: 2235889.819 ops/s
Iteration  23: 2227477.222 ops/s
Iteration  24: 2221127.370 ops/s
Iteration  25: 2206016.256 ops/s
Iteration  26: 2238129.555 ops/s
Iteration  27: 2231332.806 ops/s
Iteration  28: 2223048.515 ops/s
Iteration  29: 2222331.664 ops/s
Iteration  30: 2244538.817 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy":
  2217570.725 ±(99.9%) 17273.852 ops/s [Average]
  (min, avg, max) = (2127139.327, 2217570.725, 2250384.445), stdev = 25854.691
  CI (99.9%): [2200296.872, 2234844.577] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy  thrpt   30  2217570.725 ± 17273.852  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1155522.806 ops/s
# Warmup Iteration   2: 2557714.265 ops/s
# Warmup Iteration   3: 2138755.285 ops/s
# Warmup Iteration   4: 2551084.814 ops/s
# Warmup Iteration   5: 2565812.260 ops/s
# Warmup Iteration   6: 2573449.229 ops/s
# Warmup Iteration   7: 2564147.610 ops/s
# Warmup Iteration   8: 2569513.303 ops/s
# Warmup Iteration   9: 2567169.332 ops/s
# Warmup Iteration  10: 2581599.218 ops/s
# Warmup Iteration  11: 2557246.232 ops/s
# Warmup Iteration  12: 2539016.616 ops/s
# Warmup Iteration  13: 2573610.443 ops/s
# Warmup Iteration  14: 2579797.165 ops/s
# Warmup Iteration  15: 2542643.650 ops/s
# Warmup Iteration  16: 2558736.527 ops/s
# Warmup Iteration  17: 2579639.695 ops/s
# Warmup Iteration  18: 2580481.223 ops/s
# Warmup Iteration  19: 2580372.953 ops/s
# Warmup Iteration  20: 2557120.835 ops/s
# Warmup Iteration  21: 2581186.303 ops/s
# Warmup Iteration  22: 2589329.377 ops/s
# Warmup Iteration  23: 2576156.911 ops/s
# Warmup Iteration  24: 2585099.953 ops/s
# Warmup Iteration  25: 2582296.353 ops/s
# Warmup Iteration  26: 2564864.884 ops/s
# Warmup Iteration  27: 2578419.543 ops/s
# Warmup Iteration  28: 2587350.153 ops/s
# Warmup Iteration  29: 2550829.443 ops/s
# Warmup Iteration  30: 2583282.021 ops/s
Iteration   1: 2575335.770 ops/s
Iteration   2: 2571811.592 ops/s
Iteration   3: 2599031.351 ops/s
Iteration   4: 2579952.503 ops/s
Iteration   5: 2581616.642 ops/s
Iteration   6: 2588565.434 ops/s
Iteration   7: 2572622.301 ops/s
Iteration   8: 2599173.293 ops/s
Iteration   9: 2594956.910 ops/s
Iteration  10: 2541814.662 ops/s
Iteration  11: 2571385.933 ops/s
Iteration  12: 2586995.527 ops/s
Iteration  13: 2547633.894 ops/s
Iteration  14: 2562807.392 ops/s
Iteration  15: 2543343.301 ops/s
Iteration  16: 2592486.847 ops/s
Iteration  17: 2585942.766 ops/s
Iteration  18: 2576841.639 ops/s
Iteration  19: 2573590.325 ops/s
Iteration  20: 2588152.047 ops/s
Iteration  21: 2590515.436 ops/s
Iteration  22: 2527962.555 ops/s
Iteration  23: 2579052.507 ops/s
Iteration  24: 2583386.363 ops/s
Iteration  25: 2517353.250 ops/s
Iteration  26: 2590117.406 ops/s
Iteration  27: 2594204.880 ops/s
Iteration  28: 2543593.378 ops/s
Iteration  29: 2583182.744 ops/s
Iteration  30: 2556429.924 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy":
  2573328.619 ±(99.9%) 14342.901 ops/s [Average]
  (min, avg, max) = (2517353.250, 2573328.619, 2599173.293), stdev = 21467.781
  CI (99.9%): [2558985.718, 2587671.520] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy  thrpt   30  2573328.619 ± 14342.901  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 589130.913 ops/s
# Warmup Iteration   2: 1335225.598 ops/s
# Warmup Iteration   3: 1330270.796 ops/s
# Warmup Iteration   4: 1104886.039 ops/s
# Warmup Iteration   5: 1330115.403 ops/s
# Warmup Iteration   6: 1334288.020 ops/s
# Warmup Iteration   7: 1341180.423 ops/s
# Warmup Iteration   8: 1328488.205 ops/s
# Warmup Iteration   9: 1335633.643 ops/s
# Warmup Iteration  10: 1333165.728 ops/s
# Warmup Iteration  11: 1327267.431 ops/s
# Warmup Iteration  12: 1336317.269 ops/s
# Warmup Iteration  13: 1322380.321 ops/s
# Warmup Iteration  14: 1330039.732 ops/s
# Warmup Iteration  15: 1318246.699 ops/s
# Warmup Iteration  16: 1331862.585 ops/s
# Warmup Iteration  17: 1334342.123 ops/s
# Warmup Iteration  18: 1328111.312 ops/s
# Warmup Iteration  19: 1336105.969 ops/s
# Warmup Iteration  20: 1311695.395 ops/s
# Warmup Iteration  21: 1338050.761 ops/s
# Warmup Iteration  22: 1333347.751 ops/s
# Warmup Iteration  23: 1332648.031 ops/s
# Warmup Iteration  24: 1323758.295 ops/s
# Warmup Iteration  25: 1334380.812 ops/s
# Warmup Iteration  26: 1331916.308 ops/s
# Warmup Iteration  27: 1337737.661 ops/s
# Warmup Iteration  28: 1334504.061 ops/s
# Warmup Iteration  29: 1338435.169 ops/s
# Warmup Iteration  30: 1335568.701 ops/s
Iteration   1: 1326400.022 ops/s
Iteration   2: 1336831.941 ops/s
Iteration   3: 1325160.083 ops/s
Iteration   4: 1329119.225 ops/s
Iteration   5: 1342795.398 ops/s
Iteration   6: 1324600.263 ops/s
Iteration   7: 1337318.435 ops/s
Iteration   8: 1334811.045 ops/s
Iteration   9: 1340616.687 ops/s
Iteration  10: 1333451.271 ops/s
Iteration  11: 1335029.763 ops/s
Iteration  12: 1322919.662 ops/s
Iteration  13: 1346342.552 ops/s
Iteration  14: 1332667.997 ops/s
Iteration  15: 1340247.855 ops/s
Iteration  16: 1332854.141 ops/s
Iteration  17: 1317095.529 ops/s
Iteration  18: 1332694.694 ops/s
Iteration  19: 1335713.842 ops/s
Iteration  20: 1327086.065 ops/s
Iteration  21: 1337805.695 ops/s
Iteration  22: 1332569.222 ops/s
Iteration  23: 1340696.219 ops/s
Iteration  24: 1335748.089 ops/s
Iteration  25: 1318817.324 ops/s
Iteration  26: 1329293.018 ops/s
Iteration  27: 1325092.887 ops/s
Iteration  28: 1328167.825 ops/s
Iteration  29: 1334635.783 ops/s
Iteration  30: 1341589.956 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_appendString":
  1332605.750 ±(99.9%) 4766.199 ops/s [Average]
  (min, avg, max) = (1317095.529, 1332605.750, 1346342.552), stdev = 7133.822
  CI (99.9%): [1327839.551, 1337371.948] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_appendString  thrpt   30  1332605.750 ± 4766.199  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3789845.896 ops/s
# Warmup Iteration   2: 7973400.316 ops/s
# Warmup Iteration   3: 8147430.174 ops/s
# Warmup Iteration   4: 7805854.789 ops/s
# Warmup Iteration   5: 7277252.647 ops/s
# Warmup Iteration   6: 8250254.553 ops/s
# Warmup Iteration   7: 8255353.801 ops/s
# Warmup Iteration   8: 8121852.271 ops/s
# Warmup Iteration   9: 8196871.025 ops/s
# Warmup Iteration  10: 8237341.960 ops/s
# Warmup Iteration  11: 8207857.305 ops/s
# Warmup Iteration  12: 8223700.495 ops/s
# Warmup Iteration  13: 8287130.600 ops/s
# Warmup Iteration  14: 8248883.989 ops/s
# Warmup Iteration  15: 8193804.490 ops/s
# Warmup Iteration  16: 8151921.405 ops/s
# Warmup Iteration  17: 8251374.989 ops/s
# Warmup Iteration  18: 8232221.793 ops/s
# Warmup Iteration  19: 8248768.866 ops/s
# Warmup Iteration  20: 8256022.159 ops/s
# Warmup Iteration  21: 8218229.164 ops/s
# Warmup Iteration  22: 8209224.131 ops/s
# Warmup Iteration  23: 8248549.498 ops/s
# Warmup Iteration  24: 8268067.188 ops/s
# Warmup Iteration  25: 8238957.870 ops/s
# Warmup Iteration  26: 8261611.297 ops/s
# Warmup Iteration  27: 8183742.857 ops/s
# Warmup Iteration  28: 8201756.453 ops/s
# Warmup Iteration  29: 8213653.185 ops/s
# Warmup Iteration  30: 8258692.871 ops/s
Iteration   1: 8120748.927 ops/s
Iteration   2: 8213140.426 ops/s
Iteration   3: 8047292.723 ops/s
Iteration   4: 8197410.638 ops/s
Iteration   5: 8240504.361 ops/s
Iteration   6: 8247398.541 ops/s
Iteration   7: 8239885.282 ops/s
Iteration   8: 8233840.181 ops/s
Iteration   9: 8201342.527 ops/s
Iteration  10: 8089919.454 ops/s
Iteration  11: 8227766.998 ops/s
Iteration  12: 8260490.337 ops/s
Iteration  13: 8243552.687 ops/s
Iteration  14: 8126620.213 ops/s
Iteration  15: 8211603.761 ops/s
Iteration  16: 8243417.407 ops/s
Iteration  17: 8179900.833 ops/s
Iteration  18: 8301353.229 ops/s
Iteration  19: 8234035.771 ops/s
Iteration  20: 8253668.947 ops/s
Iteration  21: 8254299.206 ops/s
Iteration  22: 8219449.452 ops/s
Iteration  23: 8196641.054 ops/s
Iteration  24: 8244748.426 ops/s
Iteration  25: 8295355.266 ops/s
Iteration  26: 8273900.381 ops/s
Iteration  27: 8257081.060 ops/s
Iteration  28: 8253977.287 ops/s
Iteration  29: 8238345.085 ops/s
Iteration  30: 8241931.359 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_asLazy":
  8219654.061 ±(99.9%) 38174.083 ops/s [Average]
  (min, avg, max) = (8047292.723, 8219654.061, 8301353.229), stdev = 57137.175
  CI (99.9%): [8181479.978, 8257828.144] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_asLazy  thrpt   30  8219654.061 ± 38174.083  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4310697.536 ops/s
# Warmup Iteration   2: 8609963.358 ops/s
# Warmup Iteration   3: 7395975.212 ops/s
# Warmup Iteration   4: 8680169.572 ops/s
# Warmup Iteration   5: 8542924.487 ops/s
# Warmup Iteration   6: 8704954.321 ops/s
# Warmup Iteration   7: 8576244.662 ops/s
# Warmup Iteration   8: 8717147.545 ops/s
# Warmup Iteration   9: 8683884.020 ops/s
# Warmup Iteration  10: 8797199.760 ops/s
# Warmup Iteration  11: 8746151.766 ops/s
# Warmup Iteration  12: 8560581.613 ops/s
# Warmup Iteration  13: 8688265.256 ops/s
# Warmup Iteration  14: 8679189.501 ops/s
# Warmup Iteration  15: 8692049.782 ops/s
# Warmup Iteration  16: 8677252.481 ops/s
# Warmup Iteration  17: 8584971.025 ops/s
# Warmup Iteration  18: 8742649.560 ops/s
# Warmup Iteration  19: 8630250.528 ops/s
# Warmup Iteration  20: 8664235.910 ops/s
# Warmup Iteration  21: 8583136.511 ops/s
# Warmup Iteration  22: 8665321.856 ops/s
# Warmup Iteration  23: 8598321.137 ops/s
# Warmup Iteration  24: 8678121.226 ops/s
# Warmup Iteration  25: 8607311.317 ops/s
# Warmup Iteration  26: 8559598.594 ops/s
# Warmup Iteration  27: 8136545.450 ops/s
# Warmup Iteration  28: 8662340.745 ops/s
# Warmup Iteration  29: 8848164.695 ops/s
# Warmup Iteration  30: 8541908.807 ops/s
Iteration   1: 8619175.171 ops/s
Iteration   2: 8638020.674 ops/s
Iteration   3: 8706787.181 ops/s
Iteration   4: 8628197.645 ops/s
Iteration   5: 8619771.423 ops/s
Iteration   6: 8672568.094 ops/s
Iteration   7: 8594328.335 ops/s
Iteration   8: 8603679.087 ops/s
Iteration   9: 8742382.341 ops/s
Iteration  10: 8613976.412 ops/s
Iteration  11: 8521456.194 ops/s
Iteration  12: 8609524.126 ops/s
Iteration  13: 8571449.281 ops/s
Iteration  14: 8432067.946 ops/s
Iteration  15: 8712548.084 ops/s
Iteration  16: 8692969.775 ops/s
Iteration  17: 8597693.990 ops/s
Iteration  18: 8689197.703 ops/s
Iteration  19: 8652697.470 ops/s
Iteration  20: 8688408.442 ops/s
Iteration  21: 8596888.803 ops/s
Iteration  22: 8368597.146 ops/s
Iteration  23: 8724944.552 ops/s
Iteration  24: 8635680.446 ops/s
Iteration  25: 8577829.619 ops/s
Iteration  26: 8660832.240 ops/s
Iteration  27: 8658254.440 ops/s
Iteration  28: 8645396.549 ops/s
Iteration  29: 8534619.967 ops/s
Iteration  30: 8636239.666 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized":
  8621539.427 ±(99.9%) 53661.867 ops/s [Average]
  (min, avg, max) = (8368597.146, 8621539.427, 8742382.341), stdev = 80318.563
  CI (99.9%): [8567877.559, 8675201.294] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized  thrpt   30  8621539.427 ± 53661.867  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5226940.117 ops/s
# Warmup Iteration   2: 10865919.983 ops/s
# Warmup Iteration   3: 9364806.728 ops/s
# Warmup Iteration   4: 11024321.208 ops/s
# Warmup Iteration   5: 11055788.238 ops/s
# Warmup Iteration   6: 10986209.691 ops/s
# Warmup Iteration   7: 11031235.737 ops/s
# Warmup Iteration   8: 11093199.071 ops/s
# Warmup Iteration   9: 11015169.127 ops/s
# Warmup Iteration  10: 11058665.186 ops/s
# Warmup Iteration  11: 11079478.890 ops/s
# Warmup Iteration  12: 11058182.141 ops/s
# Warmup Iteration  13: 11101070.515 ops/s
# Warmup Iteration  14: 10879063.835 ops/s
# Warmup Iteration  15: 10881808.869 ops/s
# Warmup Iteration  16: 11044600.589 ops/s
# Warmup Iteration  17: 11086735.045 ops/s
# Warmup Iteration  18: 10942360.567 ops/s
# Warmup Iteration  19: 11001095.036 ops/s
# Warmup Iteration  20: 11044146.559 ops/s
# Warmup Iteration  21: 11063720.031 ops/s
# Warmup Iteration  22: 11086607.200 ops/s
# Warmup Iteration  23: 11086818.318 ops/s
# Warmup Iteration  24: 11039557.965 ops/s
# Warmup Iteration  25: 10997052.221 ops/s
# Warmup Iteration  26: 10907999.281 ops/s
# Warmup Iteration  27: 11070588.733 ops/s
# Warmup Iteration  28: 11044125.941 ops/s
# Warmup Iteration  29: 11029025.799 ops/s
# Warmup Iteration  30: 11055918.171 ops/s
Iteration   1: 10866070.925 ops/s
Iteration   2: 11037076.517 ops/s
Iteration   3: 11024200.641 ops/s
Iteration   4: 11090814.834 ops/s
Iteration   5: 11020423.198 ops/s
Iteration   6: 11014329.136 ops/s
Iteration   7: 10977967.924 ops/s
Iteration   8: 10979308.569 ops/s
Iteration   9: 11095986.752 ops/s
Iteration  10: 11139606.457 ops/s
Iteration  11: 11066572.776 ops/s
Iteration  12: 11034341.623 ops/s
Iteration  13: 11027234.606 ops/s
Iteration  14: 10677350.142 ops/s
Iteration  15: 11012782.618 ops/s
Iteration  16: 11042834.774 ops/s
Iteration  17: 10894055.336 ops/s
Iteration  18: 11008284.175 ops/s
Iteration  19: 11070992.868 ops/s
Iteration  20: 11072626.155 ops/s
Iteration  21: 11030436.823 ops/s
Iteration  22: 11125727.036 ops/s
Iteration  23: 10916670.612 ops/s
Iteration  24: 11131506.714 ops/s
Iteration  25: 11125994.594 ops/s
Iteration  26: 11112760.641 ops/s
Iteration  27: 11018117.322 ops/s
Iteration  28: 10932023.244 ops/s
Iteration  29: 11084523.534 ops/s
Iteration  30: 11046249.555 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable":
  11022562.337 ±(99.9%) 63378.785 ops/s [Average]
  (min, avg, max) = (10677350.142, 11022562.337, 11139606.457), stdev = 94862.388
  CI (99.9%): [10959183.552, 11085941.121] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  11022562.337 ± 63378.785  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 491156.603 ops/s
# Warmup Iteration   2: 522471.230 ops/s
# Warmup Iteration   3: 711638.924 ops/s
# Warmup Iteration   4: 715422.066 ops/s
# Warmup Iteration   5: 717489.288 ops/s
# Warmup Iteration   6: 714640.131 ops/s
# Warmup Iteration   7: 708514.434 ops/s
# Warmup Iteration   8: 718001.785 ops/s
# Warmup Iteration   9: 710514.671 ops/s
# Warmup Iteration  10: 714985.843 ops/s
# Warmup Iteration  11: 601754.916 ops/s
# Warmup Iteration  12: 698660.188 ops/s
# Warmup Iteration  13: 711154.419 ops/s
# Warmup Iteration  14: 718265.957 ops/s
# Warmup Iteration  15: 712430.700 ops/s
# Warmup Iteration  16: 713910.694 ops/s
# Warmup Iteration  17: 749761.328 ops/s
# Warmup Iteration  18: 754507.252 ops/s
# Warmup Iteration  19: 755879.099 ops/s
# Warmup Iteration  20: 755534.823 ops/s
# Warmup Iteration  21: 757912.615 ops/s
# Warmup Iteration  22: 747116.239 ops/s
# Warmup Iteration  23: 759890.228 ops/s
# Warmup Iteration  24: 753273.079 ops/s
# Warmup Iteration  25: 754155.414 ops/s
# Warmup Iteration  26: 752753.268 ops/s
# Warmup Iteration  27: 756750.814 ops/s
# Warmup Iteration  28: 751435.265 ops/s
# Warmup Iteration  29: 742946.132 ops/s
# Warmup Iteration  30: 747676.321 ops/s
Iteration   1: 757923.532 ops/s
Iteration   2: 748941.967 ops/s
Iteration   3: 757402.892 ops/s
Iteration   4: 747654.476 ops/s
Iteration   5: 758516.843 ops/s
Iteration   6: 745788.316 ops/s
Iteration   7: 758635.593 ops/s
Iteration   8: 733091.998 ops/s
Iteration   9: 747845.716 ops/s
Iteration  10: 755127.472 ops/s
Iteration  11: 758494.160 ops/s
Iteration  12: 761281.100 ops/s
Iteration  13: 757362.439 ops/s
Iteration  14: 757391.032 ops/s
Iteration  15: 753773.154 ops/s
Iteration  16: 744978.525 ops/s
Iteration  17: 756277.561 ops/s
Iteration  18: 756824.514 ops/s
Iteration  19: 753703.044 ops/s
Iteration  20: 755117.349 ops/s
Iteration  21: 737964.295 ops/s
Iteration  22: 753089.239 ops/s
Iteration  23: 756900.134 ops/s
Iteration  24: 755863.047 ops/s
Iteration  25: 732506.162 ops/s
Iteration  26: 755899.585 ops/s
Iteration  27: 755040.627 ops/s
Iteration  28: 749112.746 ops/s
Iteration  29: 754564.969 ops/s
Iteration  30: 758389.521 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator":
  752515.400 ±(99.9%) 4938.173 ops/s [Average]
  (min, avg, max) = (732506.162, 752515.400, 761281.100), stdev = 7391.226
  CI (99.9%): [747577.227, 757453.574] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator  thrpt   30  752515.400 ± 4938.173  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 506695.934 ops/s
# Warmup Iteration   2: 678440.161 ops/s
# Warmup Iteration   3: 809706.309 ops/s
# Warmup Iteration   4: 810475.752 ops/s
# Warmup Iteration   5: 822321.769 ops/s
# Warmup Iteration   6: 819837.154 ops/s
# Warmup Iteration   7: 820660.493 ops/s
# Warmup Iteration   8: 675902.219 ops/s
# Warmup Iteration   9: 805902.024 ops/s
# Warmup Iteration  10: 812879.656 ops/s
# Warmup Iteration  11: 819529.081 ops/s
# Warmup Iteration  12: 821112.443 ops/s
# Warmup Iteration  13: 805591.645 ops/s
# Warmup Iteration  14: 815194.504 ops/s
# Warmup Iteration  15: 820668.382 ops/s
# Warmup Iteration  16: 814458.099 ops/s
# Warmup Iteration  17: 858493.890 ops/s
# Warmup Iteration  18: 856990.880 ops/s
# Warmup Iteration  19: 855455.389 ops/s
# Warmup Iteration  20: 857768.329 ops/s
# Warmup Iteration  21: 857042.798 ops/s
# Warmup Iteration  22: 861714.833 ops/s
# Warmup Iteration  23: 854687.941 ops/s
# Warmup Iteration  24: 856054.055 ops/s
# Warmup Iteration  25: 855026.680 ops/s
# Warmup Iteration  26: 857136.234 ops/s
# Warmup Iteration  27: 857877.835 ops/s
# Warmup Iteration  28: 855067.959 ops/s
# Warmup Iteration  29: 857673.914 ops/s
# Warmup Iteration  30: 862009.992 ops/s
Iteration   1: 853911.058 ops/s
Iteration   2: 851397.876 ops/s
Iteration   3: 861169.971 ops/s
Iteration   4: 843995.415 ops/s
Iteration   5: 860152.113 ops/s
Iteration   6: 860202.462 ops/s
Iteration   7: 861265.274 ops/s
Iteration   8: 857244.751 ops/s
Iteration   9: 841139.329 ops/s
Iteration  10: 861319.505 ops/s
Iteration  11: 859353.228 ops/s
Iteration  12: 863567.071 ops/s
Iteration  13: 861276.880 ops/s
Iteration  14: 861194.240 ops/s
Iteration  15: 845886.506 ops/s
Iteration  16: 862280.911 ops/s
Iteration  17: 858462.494 ops/s
Iteration  18: 857930.983 ops/s
Iteration  19: 861528.331 ops/s
Iteration  20: 859612.702 ops/s
Iteration  21: 866469.767 ops/s
Iteration  22: 862006.767 ops/s
Iteration  23: 844525.623 ops/s
Iteration  24: 857672.586 ops/s
Iteration  25: 859484.886 ops/s
Iteration  26: 862064.105 ops/s
Iteration  27: 852483.543 ops/s
Iteration  28: 858847.707 ops/s
Iteration  29: 856274.848 ops/s
Iteration  30: 857157.019 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove":
  857329.265 ±(99.9%) 4163.345 ops/s [Average]
  (min, avg, max) = (841139.329, 857329.265, 866469.767), stdev = 6231.500
  CI (99.9%): [853165.920, 861492.610] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  857329.265 ± 4163.345  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 133324.906 ops/s
# Warmup Iteration   2: 227499.513 ops/s
# Warmup Iteration   3: 258471.082 ops/s
# Warmup Iteration   4: 261399.634 ops/s
# Warmup Iteration   5: 256417.156 ops/s
# Warmup Iteration   6: 219626.970 ops/s
# Warmup Iteration   7: 261683.150 ops/s
# Warmup Iteration   8: 258502.269 ops/s
# Warmup Iteration   9: 262554.021 ops/s
# Warmup Iteration  10: 262207.179 ops/s
# Warmup Iteration  11: 260824.459 ops/s
# Warmup Iteration  12: 261600.077 ops/s
# Warmup Iteration  13: 262861.210 ops/s
# Warmup Iteration  14: 257305.236 ops/s
# Warmup Iteration  15: 260037.808 ops/s
# Warmup Iteration  16: 260649.574 ops/s
# Warmup Iteration  17: 269069.099 ops/s
# Warmup Iteration  18: 269509.298 ops/s
# Warmup Iteration  19: 269593.702 ops/s
# Warmup Iteration  20: 269890.153 ops/s
# Warmup Iteration  21: 268292.411 ops/s
# Warmup Iteration  22: 270023.018 ops/s
# Warmup Iteration  23: 270783.942 ops/s
# Warmup Iteration  24: 267241.369 ops/s
# Warmup Iteration  25: 269769.168 ops/s
# Warmup Iteration  26: 270501.855 ops/s
# Warmup Iteration  27: 267792.722 ops/s
# Warmup Iteration  28: 266518.176 ops/s
# Warmup Iteration  29: 266815.141 ops/s
# Warmup Iteration  30: 269535.095 ops/s
Iteration   1: 265549.816 ops/s
Iteration   2: 270843.860 ops/s
Iteration   3: 269550.224 ops/s
Iteration   4: 269961.024 ops/s
Iteration   5: 270025.982 ops/s
Iteration   6: 261288.268 ops/s
Iteration   7: 269795.966 ops/s
Iteration   8: 269933.914 ops/s
Iteration   9: 269543.123 ops/s
Iteration  10: 270900.062 ops/s
Iteration  11: 270633.383 ops/s
Iteration  12: 266805.577 ops/s
Iteration  13: 268146.049 ops/s
Iteration  14: 267410.077 ops/s
Iteration  15: 269129.589 ops/s
Iteration  16: 269306.491 ops/s
Iteration  17: 261221.079 ops/s
Iteration  18: 269736.417 ops/s
Iteration  19: 268672.611 ops/s
Iteration  20: 268273.417 ops/s
Iteration  21: 270818.077 ops/s
Iteration  22: 269998.591 ops/s
Iteration  23: 269986.175 ops/s
Iteration  24: 267964.245 ops/s
Iteration  25: 266080.322 ops/s
Iteration  26: 270304.588 ops/s
Iteration  27: 270392.450 ops/s
Iteration  28: 265520.409 ops/s
Iteration  29: 266354.416 ops/s
Iteration  30: 271120.882 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_chunk":
  268508.903 ±(99.9%) 1709.617 ops/s [Average]
  (min, avg, max) = (261221.079, 268508.903, 271120.882), stdev = 2558.875
  CI (99.9%): [266799.285, 270218.520] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_chunk  thrpt   30  268508.903 ± 1709.617  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2728413.590 ops/s
# Warmup Iteration   2: 5811274.667 ops/s
# Warmup Iteration   3: 4810257.531 ops/s
# Warmup Iteration   4: 5850689.466 ops/s
# Warmup Iteration   5: 5810314.672 ops/s
# Warmup Iteration   6: 5816155.689 ops/s
# Warmup Iteration   7: 5765742.122 ops/s
# Warmup Iteration   8: 5844443.442 ops/s
# Warmup Iteration   9: 5756038.110 ops/s
# Warmup Iteration  10: 5745441.446 ops/s
# Warmup Iteration  11: 5800330.714 ops/s
# Warmup Iteration  12: 5771718.288 ops/s
# Warmup Iteration  13: 5819052.356 ops/s
# Warmup Iteration  14: 5794269.631 ops/s
# Warmup Iteration  15: 5787308.751 ops/s
# Warmup Iteration  16: 5818282.727 ops/s
# Warmup Iteration  17: 5803194.277 ops/s
# Warmup Iteration  18: 5811319.475 ops/s
# Warmup Iteration  19: 5798865.501 ops/s
# Warmup Iteration  20: 5812115.019 ops/s
# Warmup Iteration  21: 5778144.067 ops/s
# Warmup Iteration  22: 5789073.455 ops/s
# Warmup Iteration  23: 5748003.453 ops/s
# Warmup Iteration  24: 5757147.985 ops/s
# Warmup Iteration  25: 5824973.607 ops/s
# Warmup Iteration  26: 5802517.032 ops/s
# Warmup Iteration  27: 5799823.065 ops/s
# Warmup Iteration  28: 5789045.461 ops/s
# Warmup Iteration  29: 5836985.926 ops/s
# Warmup Iteration  30: 5811837.005 ops/s
Iteration   1: 5880475.464 ops/s
Iteration   2: 5827261.274 ops/s
Iteration   3: 5850042.476 ops/s
Iteration   4: 5829811.268 ops/s
Iteration   5: 5779923.548 ops/s
Iteration   6: 5805705.704 ops/s
Iteration   7: 5833567.257 ops/s
Iteration   8: 5787739.248 ops/s
Iteration   9: 5843976.456 ops/s
Iteration  10: 5824756.905 ops/s
Iteration  11: 5756172.418 ops/s
Iteration  12: 5827056.886 ops/s
Iteration  13: 5753850.819 ops/s
Iteration  14: 5852436.316 ops/s
Iteration  15: 5771869.748 ops/s
Iteration  16: 5857382.258 ops/s
Iteration  17: 5807238.878 ops/s
Iteration  18: 5809558.732 ops/s
Iteration  19: 5817091.777 ops/s
Iteration  20: 5823499.368 ops/s
Iteration  21: 5757126.987 ops/s
Iteration  22: 5714829.699 ops/s
Iteration  23: 5753935.559 ops/s
Iteration  24: 5828238.317 ops/s
Iteration  25: 5885191.470 ops/s
Iteration  26: 5811418.012 ops/s
Iteration  27: 5756300.771 ops/s
Iteration  28: 5842146.389 ops/s
Iteration  29: 5817878.580 ops/s
Iteration  30: 5599708.800 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_clear":
  5803539.713 ±(99.9%) 37348.030 ops/s [Average]
  (min, avg, max) = (5599708.800, 5803539.713, 5885191.470), stdev = 55900.777
  CI (99.9%): [5766191.683, 5840887.743] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_clear  thrpt   30  5803539.713 ± 37348.030  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 626227.393 ops/s
# Warmup Iteration   2: 1561256.466 ops/s
# Warmup Iteration   3: 1641156.023 ops/s
# Warmup Iteration   4: 1354489.211 ops/s
# Warmup Iteration   5: 1639341.693 ops/s
# Warmup Iteration   6: 1640413.678 ops/s
# Warmup Iteration   7: 1643804.847 ops/s
# Warmup Iteration   8: 1641922.110 ops/s
# Warmup Iteration   9: 1640776.545 ops/s
# Warmup Iteration  10: 1638127.707 ops/s
# Warmup Iteration  11: 1637904.629 ops/s
# Warmup Iteration  12: 1626188.950 ops/s
# Warmup Iteration  13: 1644733.143 ops/s
# Warmup Iteration  14: 1642717.339 ops/s
# Warmup Iteration  15: 1646424.684 ops/s
# Warmup Iteration  16: 1638051.529 ops/s
# Warmup Iteration  17: 1641113.742 ops/s
# Warmup Iteration  18: 1627351.259 ops/s
# Warmup Iteration  19: 1634046.631 ops/s
# Warmup Iteration  20: 1628641.310 ops/s
# Warmup Iteration  21: 1645530.739 ops/s
# Warmup Iteration  22: 1617940.214 ops/s
# Warmup Iteration  23: 1632225.798 ops/s
# Warmup Iteration  24: 1622143.480 ops/s
# Warmup Iteration  25: 1649446.611 ops/s
# Warmup Iteration  26: 1623698.232 ops/s
# Warmup Iteration  27: 1634987.045 ops/s
# Warmup Iteration  28: 1636413.299 ops/s
# Warmup Iteration  29: 1644395.884 ops/s
# Warmup Iteration  30: 1643984.037 ops/s
Iteration   1: 1631367.621 ops/s
Iteration   2: 1649673.464 ops/s
Iteration   3: 1653488.407 ops/s
Iteration   4: 1650365.843 ops/s
Iteration   5: 1651787.076 ops/s
Iteration   6: 1647126.531 ops/s
Iteration   7: 1646406.724 ops/s
Iteration   8: 1638399.254 ops/s
Iteration   9: 1649927.525 ops/s
Iteration  10: 1655495.256 ops/s
Iteration  11: 1637537.616 ops/s
Iteration  12: 1641741.374 ops/s
Iteration  13: 1638919.395 ops/s
Iteration  14: 1622100.542 ops/s
Iteration  15: 1644546.931 ops/s
Iteration  16: 1638171.309 ops/s
Iteration  17: 1651166.374 ops/s
Iteration  18: 1642409.318 ops/s
Iteration  19: 1649511.336 ops/s
Iteration  20: 1635062.243 ops/s
Iteration  21: 1633035.616 ops/s
Iteration  22: 1644645.277 ops/s
Iteration  23: 1653893.468 ops/s
Iteration  24: 1645199.132 ops/s
Iteration  25: 1612848.914 ops/s
Iteration  26: 1637326.924 ops/s
Iteration  27: 1641218.008 ops/s
Iteration  28: 1645992.881 ops/s
Iteration  29: 1644260.569 ops/s
Iteration  30: 1642646.799 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_collect":
  1642542.391 ±(99.9%) 6243.581 ops/s [Average]
  (min, avg, max) = (1612848.914, 1642542.391, 1655495.256), stdev = 9345.098
  CI (99.9%): [1636298.810, 1648785.971] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_collect  thrpt   30  1642542.391 ± 6243.581  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1545226.508 ops/s
# Warmup Iteration   2: 3365765.187 ops/s
# Warmup Iteration   3: 2992573.108 ops/s
# Warmup Iteration   4: 3182753.057 ops/s
# Warmup Iteration   5: 3383603.071 ops/s
# Warmup Iteration   6: 3369960.609 ops/s
# Warmup Iteration   7: 3353923.256 ops/s
# Warmup Iteration   8: 3341924.966 ops/s
# Warmup Iteration   9: 3356277.575 ops/s
# Warmup Iteration  10: 3389775.257 ops/s
# Warmup Iteration  11: 3355172.483 ops/s
# Warmup Iteration  12: 3388877.734 ops/s
# Warmup Iteration  13: 3363890.141 ops/s
# Warmup Iteration  14: 3357258.535 ops/s
# Warmup Iteration  15: 3383044.745 ops/s
# Warmup Iteration  16: 3380104.152 ops/s
# Warmup Iteration  17: 3374195.354 ops/s
# Warmup Iteration  18: 3369832.245 ops/s
# Warmup Iteration  19: 3381887.309 ops/s
# Warmup Iteration  20: 3378793.510 ops/s
# Warmup Iteration  21: 3360219.787 ops/s
# Warmup Iteration  22: 3368816.333 ops/s
# Warmup Iteration  23: 3364198.538 ops/s
# Warmup Iteration  24: 3383902.940 ops/s
# Warmup Iteration  25: 3384215.465 ops/s
# Warmup Iteration  26: 3377902.189 ops/s
# Warmup Iteration  27: 3370428.122 ops/s
# Warmup Iteration  28: 3370963.282 ops/s
# Warmup Iteration  29: 3378293.793 ops/s
# Warmup Iteration  30: 3390514.447 ops/s
Iteration   1: 3326797.610 ops/s
Iteration   2: 3361255.246 ops/s
Iteration   3: 3396332.754 ops/s
Iteration   4: 3356458.659 ops/s
Iteration   5: 3393491.759 ops/s
Iteration   6: 3382129.934 ops/s
Iteration   7: 3397389.143 ops/s
Iteration   8: 3388856.492 ops/s
Iteration   9: 3394298.597 ops/s
Iteration  10: 3391105.920 ops/s
Iteration  11: 3371337.957 ops/s
Iteration  12: 3402905.210 ops/s
Iteration  13: 3395547.120 ops/s
Iteration  14: 3343365.614 ops/s
Iteration  15: 3331012.465 ops/s
Iteration  16: 3405469.527 ops/s
Iteration  17: 3389517.703 ops/s
Iteration  18: 3388010.337 ops/s
Iteration  19: 3392427.099 ops/s
Iteration  20: 3386916.320 ops/s
Iteration  21: 3394172.218 ops/s
Iteration  22: 3384358.104 ops/s
Iteration  23: 3377219.536 ops/s
Iteration  24: 3388016.469 ops/s
Iteration  25: 3339450.308 ops/s
Iteration  26: 3348803.108 ops/s
Iteration  27: 3394709.212 ops/s
Iteration  28: 3395221.138 ops/s
Iteration  29: 3382914.570 ops/s
Iteration  30: 3395994.617 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_contains":
  3379849.492 ±(99.9%) 14736.137 ops/s [Average]
  (min, avg, max) = (3326797.610, 3379849.492, 3405469.527), stdev = 22056.358
  CI (99.9%): [3365113.354, 3394585.629] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_contains  thrpt   30  3379849.492 ± 14736.137  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3222787.232 ops/s
# Warmup Iteration   2: 7018291.627 ops/s
# Warmup Iteration   3: 5822883.075 ops/s
# Warmup Iteration   4: 7007407.914 ops/s
# Warmup Iteration   5: 6928187.115 ops/s
# Warmup Iteration   6: 6953330.903 ops/s
# Warmup Iteration   7: 6937919.637 ops/s
# Warmup Iteration   8: 6937667.192 ops/s
# Warmup Iteration   9: 7003921.350 ops/s
# Warmup Iteration  10: 6992777.582 ops/s
# Warmup Iteration  11: 6987714.811 ops/s
# Warmup Iteration  12: 6989280.338 ops/s
# Warmup Iteration  13: 6995864.968 ops/s
# Warmup Iteration  14: 6937936.117 ops/s
# Warmup Iteration  15: 6978897.695 ops/s
# Warmup Iteration  16: 6923518.970 ops/s
# Warmup Iteration  17: 6960896.714 ops/s
# Warmup Iteration  18: 7005361.728 ops/s
# Warmup Iteration  19: 6895573.777 ops/s
# Warmup Iteration  20: 7004542.618 ops/s
# Warmup Iteration  21: 7020866.758 ops/s
# Warmup Iteration  22: 6937380.337 ops/s
# Warmup Iteration  23: 6999541.680 ops/s
# Warmup Iteration  24: 7011033.421 ops/s
# Warmup Iteration  25: 7006547.619 ops/s
# Warmup Iteration  26: 7007895.492 ops/s
# Warmup Iteration  27: 7014945.945 ops/s
# Warmup Iteration  28: 6972968.969 ops/s
# Warmup Iteration  29: 6986102.588 ops/s
# Warmup Iteration  30: 6997441.269 ops/s
Iteration   1: 7028550.581 ops/s
Iteration   2: 6958488.909 ops/s
Iteration   3: 6991076.384 ops/s
Iteration   4: 6850671.417 ops/s
Iteration   5: 7043239.552 ops/s
Iteration   6: 6977301.425 ops/s
Iteration   7: 6946218.709 ops/s
Iteration   8: 6952074.332 ops/s
Iteration   9: 6970519.131 ops/s
Iteration  10: 6892807.796 ops/s
Iteration  11: 6963635.770 ops/s
Iteration  12: 6915209.436 ops/s
Iteration  13: 6946986.040 ops/s
Iteration  14: 6957135.012 ops/s
Iteration  15: 7000233.450 ops/s
Iteration  16: 7013887.689 ops/s
Iteration  17: 6965565.295 ops/s
Iteration  18: 6938398.001 ops/s
Iteration  19: 6975853.866 ops/s
Iteration  20: 6867561.836 ops/s
Iteration  21: 6999726.020 ops/s
Iteration  22: 6964997.258 ops/s
Iteration  23: 6978605.030 ops/s
Iteration  24: 6981489.911 ops/s
Iteration  25: 6962537.524 ops/s
Iteration  26: 6970365.541 ops/s
Iteration  27: 6987071.924 ops/s
Iteration  28: 6969515.221 ops/s
Iteration  29: 6926413.971 ops/s
Iteration  30: 6981935.760 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray":
  6962602.426 ±(99.9%) 27878.612 ops/s [Average]
  (min, avg, max) = (6850671.417, 6962602.426, 7043239.552), stdev = 41727.397
  CI (99.9%): [6934723.814, 6990481.038] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray  thrpt   30  6962602.426 ± 27878.612  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2085477.066 ops/s
# Warmup Iteration   2: 4899628.699 ops/s
# Warmup Iteration   3: 3972127.639 ops/s
# Warmup Iteration   4: 4801351.841 ops/s
# Warmup Iteration   5: 4836949.993 ops/s
# Warmup Iteration   6: 4811576.446 ops/s
# Warmup Iteration   7: 4832974.350 ops/s
# Warmup Iteration   8: 4779232.181 ops/s
# Warmup Iteration   9: 4777312.939 ops/s
# Warmup Iteration  10: 4803315.520 ops/s
# Warmup Iteration  11: 4824112.167 ops/s
# Warmup Iteration  12: 4824736.590 ops/s
# Warmup Iteration  13: 4831324.609 ops/s
# Warmup Iteration  14: 4801095.172 ops/s
# Warmup Iteration  15: 4821000.334 ops/s
# Warmup Iteration  16: 4858111.274 ops/s
# Warmup Iteration  17: 4814250.723 ops/s
# Warmup Iteration  18: 4798867.605 ops/s
# Warmup Iteration  19: 4836352.762 ops/s
# Warmup Iteration  20: 4824504.903 ops/s
# Warmup Iteration  21: 4811818.485 ops/s
# Warmup Iteration  22: 4826377.334 ops/s
# Warmup Iteration  23: 4842509.197 ops/s
# Warmup Iteration  24: 4791587.682 ops/s
# Warmup Iteration  25: 4835255.605 ops/s
# Warmup Iteration  26: 4792997.777 ops/s
# Warmup Iteration  27: 4818045.322 ops/s
# Warmup Iteration  28: 4821810.144 ops/s
# Warmup Iteration  29: 4817688.596 ops/s
# Warmup Iteration  30: 4824262.613 ops/s
Iteration   1: 4837304.551 ops/s
Iteration   2: 4770812.945 ops/s
Iteration   3: 4740945.639 ops/s
Iteration   4: 4796818.054 ops/s
Iteration   5: 4845326.261 ops/s
Iteration   6: 4832205.609 ops/s
Iteration   7: 4806401.271 ops/s
Iteration   8: 4836174.916 ops/s
Iteration   9: 4810753.444 ops/s
Iteration  10: 4822267.549 ops/s
Iteration  11: 4846652.294 ops/s
Iteration  12: 4812207.570 ops/s
Iteration  13: 4817350.359 ops/s
Iteration  14: 4785730.491 ops/s
Iteration  15: 4866662.538 ops/s
Iteration  16: 4848245.471 ops/s
Iteration  17: 4857262.943 ops/s
Iteration  18: 4798298.480 ops/s
Iteration  19: 4826692.370 ops/s
Iteration  20: 4819899.813 ops/s
Iteration  21: 4853519.111 ops/s
Iteration  22: 4832735.247 ops/s
Iteration  23: 4813731.081 ops/s
Iteration  24: 4834537.364 ops/s
Iteration  25: 4831340.576 ops/s
Iteration  26: 4856861.307 ops/s
Iteration  27: 4766211.703 ops/s
Iteration  28: 4839826.976 ops/s
Iteration  29: 4850654.646 ops/s
Iteration  30: 4815732.952 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable":
  4822438.784 ±(99.9%) 19520.056 ops/s [Average]
  (min, avg, max) = (4740945.639, 4822438.784, 4866662.538), stdev = 29216.703
  CI (99.9%): [4802918.728, 4841958.840] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable  thrpt   30  4822438.784 ± 19520.056  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1219416.637 ops/s
# Warmup Iteration   2: 2786120.038 ops/s
# Warmup Iteration   3: 2808876.158 ops/s
# Warmup Iteration   4: 2321053.273 ops/s
# Warmup Iteration   5: 2811591.451 ops/s
# Warmup Iteration   6: 2788359.330 ops/s
# Warmup Iteration   7: 2824433.578 ops/s
# Warmup Iteration   8: 2818557.045 ops/s
# Warmup Iteration   9: 2801156.695 ops/s
# Warmup Iteration  10: 2747933.687 ops/s
# Warmup Iteration  11: 2813966.678 ops/s
# Warmup Iteration  12: 2815351.105 ops/s
# Warmup Iteration  13: 2805008.800 ops/s
# Warmup Iteration  14: 2817524.925 ops/s
# Warmup Iteration  15: 2800925.379 ops/s
# Warmup Iteration  16: 2820675.679 ops/s
# Warmup Iteration  17: 2815481.582 ops/s
# Warmup Iteration  18: 2808778.651 ops/s
# Warmup Iteration  19: 2821711.806 ops/s
# Warmup Iteration  20: 2828615.273 ops/s
# Warmup Iteration  21: 2800134.804 ops/s
# Warmup Iteration  22: 2805587.195 ops/s
# Warmup Iteration  23: 2797546.010 ops/s
# Warmup Iteration  24: 2802471.810 ops/s
# Warmup Iteration  25: 2828949.875 ops/s
# Warmup Iteration  26: 2826894.459 ops/s
# Warmup Iteration  27: 2825143.098 ops/s
# Warmup Iteration  28: 2804775.378 ops/s
# Warmup Iteration  29: 2821754.139 ops/s
# Warmup Iteration  30: 2805905.124 ops/s
Iteration   1: 2833994.158 ops/s
Iteration   2: 2785862.564 ops/s
Iteration   3: 2828364.938 ops/s
Iteration   4: 2768145.458 ops/s
Iteration   5: 2818178.678 ops/s
Iteration   6: 2831869.681 ops/s
Iteration   7: 2823601.425 ops/s
Iteration   8: 2830711.610 ops/s
Iteration   9: 2820619.074 ops/s
Iteration  10: 2802714.098 ops/s
Iteration  11: 2833855.871 ops/s
Iteration  12: 2836848.230 ops/s
Iteration  13: 2774144.491 ops/s
Iteration  14: 2804763.625 ops/s
Iteration  15: 2806316.459 ops/s
Iteration  16: 2802603.934 ops/s
Iteration  17: 2819269.852 ops/s
Iteration  18: 2811454.577 ops/s
Iteration  19: 2816146.421 ops/s
Iteration  20: 2831057.323 ops/s
Iteration  21: 2812965.135 ops/s
Iteration  22: 2769072.655 ops/s
Iteration  23: 2775597.117 ops/s
Iteration  24: 2838043.879 ops/s
Iteration  25: 2787711.917 ops/s
Iteration  26: 2809422.278 ops/s
Iteration  27: 2820090.924 ops/s
Iteration  28: 2809292.825 ops/s
Iteration  29: 2837893.868 ops/s
Iteration  30: 2776166.763 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray":
  2810559.328 ±(99.9%) 14668.881 ops/s [Average]
  (min, avg, max) = (2768145.458, 2810559.328, 2838043.879), stdev = 21955.693
  CI (99.9%): [2795890.446, 2825228.209] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray  thrpt   30  2810559.328 ± 14668.881  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 489027.678 ops/s
# Warmup Iteration   2: 741665.238 ops/s
# Warmup Iteration   3: 870100.728 ops/s
# Warmup Iteration   4: 868797.318 ops/s
# Warmup Iteration   5: 868181.216 ops/s
# Warmup Iteration   6: 814773.720 ops/s
# Warmup Iteration   7: 766567.035 ops/s
# Warmup Iteration   8: 860983.242 ops/s
# Warmup Iteration   9: 866190.615 ops/s
# Warmup Iteration  10: 848846.575 ops/s
# Warmup Iteration  11: 861453.214 ops/s
# Warmup Iteration  12: 871564.854 ops/s
# Warmup Iteration  13: 866579.010 ops/s
# Warmup Iteration  14: 857117.232 ops/s
# Warmup Iteration  15: 864276.390 ops/s
# Warmup Iteration  16: 870465.914 ops/s
# Warmup Iteration  17: 841498.871 ops/s
# Warmup Iteration  18: 845695.057 ops/s
# Warmup Iteration  19: 842608.144 ops/s
# Warmup Iteration  20: 848738.056 ops/s
# Warmup Iteration  21: 839818.306 ops/s
# Warmup Iteration  22: 849242.677 ops/s
# Warmup Iteration  23: 847940.370 ops/s
# Warmup Iteration  24: 839568.103 ops/s
# Warmup Iteration  25: 848757.154 ops/s
# Warmup Iteration  26: 846159.799 ops/s
# Warmup Iteration  27: 847729.127 ops/s
# Warmup Iteration  28: 849195.635 ops/s
# Warmup Iteration  29: 841619.165 ops/s
# Warmup Iteration  30: 843412.387 ops/s
Iteration   1: 847649.642 ops/s
Iteration   2: 817564.397 ops/s
Iteration   3: 846863.634 ops/s
Iteration   4: 850721.166 ops/s
Iteration   5: 837951.458 ops/s
Iteration   6: 843041.868 ops/s
Iteration   7: 849921.907 ops/s
Iteration   8: 852564.436 ops/s
Iteration   9: 837907.830 ops/s
Iteration  10: 850037.225 ops/s
Iteration  11: 836517.907 ops/s
Iteration  12: 843384.316 ops/s
Iteration  13: 844412.894 ops/s
Iteration  14: 844416.974 ops/s
Iteration  15: 848624.065 ops/s
Iteration  16: 830613.114 ops/s
Iteration  17: 847458.615 ops/s
Iteration  18: 846365.976 ops/s
Iteration  19: 841840.155 ops/s
Iteration  20: 849689.555 ops/s
Iteration  21: 845332.037 ops/s
Iteration  22: 851369.344 ops/s
Iteration  23: 847493.869 ops/s
Iteration  24: 843030.549 ops/s
Iteration  25: 847055.483 ops/s
Iteration  26: 844812.057 ops/s
Iteration  27: 841299.431 ops/s
Iteration  28: 850933.808 ops/s
Iteration  29: 836259.358 ops/s
Iteration  30: 848877.871 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable":
  844133.698 ±(99.9%) 4828.491 ops/s [Average]
  (min, avg, max) = (817564.397, 844133.698, 852564.436), stdev = 7227.058
  CI (99.9%): [839305.207, 848962.189] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  844133.698 ± 4828.491  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1226238.162 ops/s
# Warmup Iteration   2: 2726727.664 ops/s
# Warmup Iteration   3: 2735390.660 ops/s
# Warmup Iteration   4: 2270429.951 ops/s
# Warmup Iteration   5: 2740306.446 ops/s
# Warmup Iteration   6: 2709016.813 ops/s
# Warmup Iteration   7: 2738646.393 ops/s
# Warmup Iteration   8: 2744919.361 ops/s
# Warmup Iteration   9: 2733953.220 ops/s
# Warmup Iteration  10: 2732607.289 ops/s
# Warmup Iteration  11: 2736159.510 ops/s
# Warmup Iteration  12: 2745901.267 ops/s
# Warmup Iteration  13: 2745832.410 ops/s
# Warmup Iteration  14: 2724070.884 ops/s
# Warmup Iteration  15: 2713925.535 ops/s
# Warmup Iteration  16: 2742713.822 ops/s
# Warmup Iteration  17: 2724853.593 ops/s
# Warmup Iteration  18: 2733175.641 ops/s
# Warmup Iteration  19: 2738912.541 ops/s
# Warmup Iteration  20: 2740792.183 ops/s
# Warmup Iteration  21: 2721363.533 ops/s
# Warmup Iteration  22: 2734519.154 ops/s
# Warmup Iteration  23: 2742311.636 ops/s
# Warmup Iteration  24: 2699551.097 ops/s
# Warmup Iteration  25: 2707044.328 ops/s
# Warmup Iteration  26: 2742333.846 ops/s
# Warmup Iteration  27: 2717371.141 ops/s
# Warmup Iteration  28: 2742878.996 ops/s
# Warmup Iteration  29: 2717378.903 ops/s
# Warmup Iteration  30: 2694226.672 ops/s
Iteration   1: 2742272.359 ops/s
Iteration   2: 2739858.228 ops/s
Iteration   3: 2722673.947 ops/s
Iteration   4: 2614593.357 ops/s
Iteration   5: 2741744.250 ops/s
Iteration   6: 2698046.405 ops/s
Iteration   7: 2701496.120 ops/s
Iteration   8: 2740824.632 ops/s
Iteration   9: 2719851.603 ops/s
Iteration  10: 2756081.585 ops/s
Iteration  11: 2740515.904 ops/s
Iteration  12: 2659805.415 ops/s
Iteration  13: 2738783.186 ops/s
Iteration  14: 2737443.525 ops/s
Iteration  15: 2741501.615 ops/s
Iteration  16: 2730522.478 ops/s
Iteration  17: 2738663.286 ops/s
Iteration  18: 2747721.436 ops/s
Iteration  19: 2751920.936 ops/s
Iteration  20: 2750397.722 ops/s
Iteration  21: 2704486.497 ops/s
Iteration  22: 2734452.763 ops/s
Iteration  23: 2732202.671 ops/s
Iteration  24: 2742309.399 ops/s
Iteration  25: 2743897.517 ops/s
Iteration  26: 2732858.740 ops/s
Iteration  27: 2740007.377 ops/s
Iteration  28: 2690510.930 ops/s
Iteration  29: 2740351.179 ops/s
Iteration  30: 2714881.669 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray":
  2726355.891 ±(99.9%) 19891.520 ops/s [Average]
  (min, avg, max) = (2614593.357, 2726355.891, 2756081.585), stdev = 29772.693
  CI (99.9%): [2706464.371, 2746247.411] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray  thrpt   30  2726355.891 ± 19891.520  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 462317.216 ops/s
# Warmup Iteration   2: 717939.402 ops/s
# Warmup Iteration   3: 827949.037 ops/s
# Warmup Iteration   4: 829460.659 ops/s
# Warmup Iteration   5: 834418.667 ops/s
# Warmup Iteration   6: 752631.590 ops/s
# Warmup Iteration   7: 768450.200 ops/s
# Warmup Iteration   8: 827318.828 ops/s
# Warmup Iteration   9: 822549.333 ops/s
# Warmup Iteration  10: 835667.052 ops/s
# Warmup Iteration  11: 827836.891 ops/s
# Warmup Iteration  12: 837325.237 ops/s
# Warmup Iteration  13: 831967.715 ops/s
# Warmup Iteration  14: 828986.081 ops/s
# Warmup Iteration  15: 831372.510 ops/s
# Warmup Iteration  16: 837028.263 ops/s
# Warmup Iteration  17: 833437.043 ops/s
# Warmup Iteration  18: 832404.259 ops/s
# Warmup Iteration  19: 829466.586 ops/s
# Warmup Iteration  20: 828287.894 ops/s
# Warmup Iteration  21: 831944.989 ops/s
# Warmup Iteration  22: 834765.757 ops/s
# Warmup Iteration  23: 829291.079 ops/s
# Warmup Iteration  24: 831291.665 ops/s
# Warmup Iteration  25: 827342.736 ops/s
# Warmup Iteration  26: 814714.574 ops/s
# Warmup Iteration  27: 832810.724 ops/s
# Warmup Iteration  28: 832297.265 ops/s
# Warmup Iteration  29: 831424.088 ops/s
# Warmup Iteration  30: 823940.944 ops/s
Iteration   1: 834646.958 ops/s
Iteration   2: 819703.398 ops/s
Iteration   3: 833012.388 ops/s
Iteration   4: 832986.237 ops/s
Iteration   5: 822235.223 ops/s
Iteration   6: 823749.460 ops/s
Iteration   7: 832347.202 ops/s
Iteration   8: 834851.570 ops/s
Iteration   9: 830953.195 ops/s
Iteration  10: 819496.757 ops/s
Iteration  11: 835830.132 ops/s
Iteration  12: 807846.354 ops/s
Iteration  13: 834680.187 ops/s
Iteration  14: 831731.726 ops/s
Iteration  15: 833587.419 ops/s
Iteration  16: 823415.705 ops/s
Iteration  17: 831156.996 ops/s
Iteration  18: 832440.799 ops/s
Iteration  19: 819969.385 ops/s
Iteration  20: 837904.009 ops/s
Iteration  21: 813181.808 ops/s
Iteration  22: 836682.170 ops/s
Iteration  23: 831278.599 ops/s
Iteration  24: 826223.979 ops/s
Iteration  25: 818921.561 ops/s
Iteration  26: 833939.636 ops/s
Iteration  27: 834514.126 ops/s
Iteration  28: 835479.589 ops/s
Iteration  29: 837013.768 ops/s
Iteration  30: 820186.581 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable":
  828665.564 ±(99.9%) 5242.628 ops/s [Average]
  (min, avg, max) = (807846.354, 828665.564, 837904.009), stdev = 7846.920
  CI (99.9%): [823422.936, 833908.192] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  828665.564 ± 5242.628  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 959294.064 ops/s
# Warmup Iteration   2: 1807141.450 ops/s
# Warmup Iteration   3: 1954413.870 ops/s
# Warmup Iteration   4: 1957134.476 ops/s
# Warmup Iteration   5: 1610726.372 ops/s
# Warmup Iteration   6: 1985981.846 ops/s
# Warmup Iteration   7: 1973048.733 ops/s
# Warmup Iteration   8: 1962399.680 ops/s
# Warmup Iteration   9: 1961658.624 ops/s
# Warmup Iteration  10: 1967691.172 ops/s
# Warmup Iteration  11: 1973745.601 ops/s
# Warmup Iteration  12: 1984008.867 ops/s
# Warmup Iteration  13: 1976202.608 ops/s
# Warmup Iteration  14: 1954846.837 ops/s
# Warmup Iteration  15: 1940657.428 ops/s
# Warmup Iteration  16: 1958786.067 ops/s
# Warmup Iteration  17: 1981882.691 ops/s
# Warmup Iteration  18: 1982185.617 ops/s
# Warmup Iteration  19: 1975926.836 ops/s
# Warmup Iteration  20: 1977770.210 ops/s
# Warmup Iteration  21: 1976204.131 ops/s
# Warmup Iteration  22: 1977722.893 ops/s
# Warmup Iteration  23: 1956923.086 ops/s
# Warmup Iteration  24: 1962993.926 ops/s
# Warmup Iteration  25: 1973957.144 ops/s
# Warmup Iteration  26: 1981224.130 ops/s
# Warmup Iteration  27: 1978483.011 ops/s
# Warmup Iteration  28: 1951447.465 ops/s
# Warmup Iteration  29: 1978391.618 ops/s
# Warmup Iteration  30: 1972709.397 ops/s
Iteration   1: 1954472.747 ops/s
Iteration   2: 1964086.509 ops/s
Iteration   3: 1985566.072 ops/s
Iteration   4: 1978319.599 ops/s
Iteration   5: 1986448.249 ops/s
Iteration   6: 1980065.732 ops/s
Iteration   7: 1974520.052 ops/s
Iteration   8: 1978749.513 ops/s
Iteration   9: 1927384.641 ops/s
Iteration  10: 1981492.088 ops/s
Iteration  11: 1985142.523 ops/s
Iteration  12: 1978656.305 ops/s
Iteration  13: 1990050.378 ops/s
Iteration  14: 1973023.565 ops/s
Iteration  15: 1965244.144 ops/s
Iteration  16: 1969437.962 ops/s
Iteration  17: 1985446.855 ops/s
Iteration  18: 1976491.338 ops/s
Iteration  19: 1978409.668 ops/s
Iteration  20: 1984768.458 ops/s
Iteration  21: 1962470.039 ops/s
Iteration  22: 1960789.979 ops/s
Iteration  23: 1988258.260 ops/s
Iteration  24: 1953508.130 ops/s
Iteration  25: 1982789.469 ops/s
Iteration  26: 1976910.316 ops/s
Iteration  27: 1978729.607 ops/s
Iteration  28: 1979355.016 ops/s
Iteration  29: 1982729.569 ops/s
Iteration  30: 1932859.972 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_count":
  1973205.892 ±(99.9%) 10130.512 ops/s [Average]
  (min, avg, max) = (1927384.641, 1973205.892, 1990050.378), stdev = 15162.875
  CI (99.9%): [1963075.380, 1983336.404] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_count  thrpt   30  1973205.892 ± 10130.512  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1409429.166 ops/s
# Warmup Iteration   2: 3109886.085 ops/s
# Warmup Iteration   3: 3150783.033 ops/s
# Warmup Iteration   4: 2675525.503 ops/s
# Warmup Iteration   5: 3045389.268 ops/s
# Warmup Iteration   6: 3142690.601 ops/s
# Warmup Iteration   7: 3147560.435 ops/s
# Warmup Iteration   8: 3150174.019 ops/s
# Warmup Iteration   9: 3143452.275 ops/s
# Warmup Iteration  10: 3138605.262 ops/s
# Warmup Iteration  11: 3156254.600 ops/s
# Warmup Iteration  12: 3125675.279 ops/s
# Warmup Iteration  13: 3150136.238 ops/s
# Warmup Iteration  14: 3130545.376 ops/s
# Warmup Iteration  15: 3161958.698 ops/s
# Warmup Iteration  16: 3147041.376 ops/s
# Warmup Iteration  17: 3157514.964 ops/s
# Warmup Iteration  18: 3161040.920 ops/s
# Warmup Iteration  19: 3152578.815 ops/s
# Warmup Iteration  20: 3160952.334 ops/s
# Warmup Iteration  21: 3142759.139 ops/s
# Warmup Iteration  22: 3142505.642 ops/s
# Warmup Iteration  23: 3146003.702 ops/s
# Warmup Iteration  24: 3161218.709 ops/s
# Warmup Iteration  25: 3129291.577 ops/s
# Warmup Iteration  26: 3136972.130 ops/s
# Warmup Iteration  27: 3158506.163 ops/s
# Warmup Iteration  28: 3157785.914 ops/s
# Warmup Iteration  29: 3157630.831 ops/s
# Warmup Iteration  30: 3148904.186 ops/s
Iteration   1: 3144391.310 ops/s
Iteration   2: 3104876.342 ops/s
Iteration   3: 3164447.106 ops/s
Iteration   4: 3168651.543 ops/s
Iteration   5: 3159676.367 ops/s
Iteration   6: 3159608.336 ops/s
Iteration   7: 3085211.989 ops/s
Iteration   8: 3161145.523 ops/s
Iteration   9: 3174413.372 ops/s
Iteration  10: 3145431.133 ops/s
Iteration  11: 3167219.929 ops/s
Iteration  12: 3145837.507 ops/s
Iteration  13: 3166320.279 ops/s
Iteration  14: 3084310.792 ops/s
Iteration  15: 3146828.478 ops/s
Iteration  16: 3139568.559 ops/s
Iteration  17: 3150065.811 ops/s
Iteration  18: 3152682.652 ops/s
Iteration  19: 3154042.490 ops/s
Iteration  20: 3106459.286 ops/s
Iteration  21: 3155871.108 ops/s
Iteration  22: 3122703.388 ops/s
Iteration  23: 3158681.773 ops/s
Iteration  24: 3151854.071 ops/s
Iteration  25: 3133306.035 ops/s
Iteration  26: 3131380.183 ops/s
Iteration  27: 3160282.497 ops/s
Iteration  28: 3159022.509 ops/s
Iteration  29: 3068139.877 ops/s
Iteration  30: 3098381.502 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone":
  3140693.725 ±(99.9%) 18864.676 ops/s [Average]
  (min, avg, max) = (3068139.877, 3140693.725, 3174413.372), stdev = 28235.762
  CI (99.9%): [3121829.049, 3159558.401] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone  thrpt   30  3140693.725 ± 18864.676  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1984667.979 ops/s
# Warmup Iteration   2: 4239513.585 ops/s
# Warmup Iteration   3: 4035662.253 ops/s
# Warmup Iteration   4: 3826155.581 ops/s
# Warmup Iteration   5: 4316438.297 ops/s
# Warmup Iteration   6: 4295765.616 ops/s
# Warmup Iteration   7: 4310695.060 ops/s
# Warmup Iteration   8: 4261112.636 ops/s
# Warmup Iteration   9: 4263281.649 ops/s
# Warmup Iteration  10: 4278011.516 ops/s
# Warmup Iteration  11: 4316244.430 ops/s
# Warmup Iteration  12: 4299381.036 ops/s
# Warmup Iteration  13: 4241649.392 ops/s
# Warmup Iteration  14: 4305007.081 ops/s
# Warmup Iteration  15: 4301319.663 ops/s
# Warmup Iteration  16: 4280538.178 ops/s
# Warmup Iteration  17: 4256527.937 ops/s
# Warmup Iteration  18: 4257578.590 ops/s
# Warmup Iteration  19: 4296530.006 ops/s
# Warmup Iteration  20: 4268694.938 ops/s
# Warmup Iteration  21: 4307146.923 ops/s
# Warmup Iteration  22: 4298759.537 ops/s
# Warmup Iteration  23: 4288782.463 ops/s
# Warmup Iteration  24: 4325358.683 ops/s
# Warmup Iteration  25: 4256928.659 ops/s
# Warmup Iteration  26: 4243221.663 ops/s
# Warmup Iteration  27: 4252284.888 ops/s
# Warmup Iteration  28: 4312902.605 ops/s
# Warmup Iteration  29: 4319326.527 ops/s
# Warmup Iteration  30: 4251658.641 ops/s
Iteration   1: 4242254.823 ops/s
Iteration   2: 4297948.433 ops/s
Iteration   3: 4231678.687 ops/s
Iteration   4: 4332828.665 ops/s
Iteration   5: 4312593.643 ops/s
Iteration   6: 4314049.088 ops/s
Iteration   7: 4293458.020 ops/s
Iteration   8: 4290444.114 ops/s
Iteration   9: 4230041.317 ops/s
Iteration  10: 4302228.066 ops/s
Iteration  11: 4256203.443 ops/s
Iteration  12: 4302336.909 ops/s
Iteration  13: 4300703.710 ops/s
Iteration  14: 4303718.356 ops/s
Iteration  15: 4296674.532 ops/s
Iteration  16: 4288711.276 ops/s
Iteration  17: 4288852.485 ops/s
Iteration  18: 4315894.429 ops/s
Iteration  19: 4246235.195 ops/s
Iteration  20: 4222984.145 ops/s
Iteration  21: 4295189.372 ops/s
Iteration  22: 4309131.057 ops/s
Iteration  23: 4305431.576 ops/s
Iteration  24: 4319259.000 ops/s
Iteration  25: 4297705.408 ops/s
Iteration  26: 4307892.183 ops/s
Iteration  27: 4316097.571 ops/s
Iteration  28: 4303406.211 ops/s
Iteration  29: 4300932.857 ops/s
Iteration  30: 4304036.870 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_forEach":
  4290964.048 ±(99.9%) 19284.835 ops/s [Average]
  (min, avg, max) = (4222984.145, 4290964.048, 4332828.665), stdev = 28864.635
  CI (99.9%): [4271679.213, 4310248.883] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_forEach  thrpt   30  4290964.048 ± 19284.835  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5532821.837 ops/s
# Warmup Iteration   2: 12095454.575 ops/s
# Warmup Iteration   3: 10147500.541 ops/s
# Warmup Iteration   4: 12263870.439 ops/s
# Warmup Iteration   5: 12239798.156 ops/s
# Warmup Iteration   6: 12298659.312 ops/s
# Warmup Iteration   7: 12271849.593 ops/s
# Warmup Iteration   8: 12146380.656 ops/s
# Warmup Iteration   9: 12297698.675 ops/s
# Warmup Iteration  10: 12265130.778 ops/s
# Warmup Iteration  11: 12072250.743 ops/s
# Warmup Iteration  12: 12311025.747 ops/s
# Warmup Iteration  13: 12263474.181 ops/s
# Warmup Iteration  14: 12340201.044 ops/s
# Warmup Iteration  15: 12180123.813 ops/s
# Warmup Iteration  16: 12296401.880 ops/s
# Warmup Iteration  17: 12366544.012 ops/s
# Warmup Iteration  18: 12275817.483 ops/s
# Warmup Iteration  19: 12254180.304 ops/s
# Warmup Iteration  20: 12265940.937 ops/s
# Warmup Iteration  21: 12210582.244 ops/s
# Warmup Iteration  22: 12169201.650 ops/s
# Warmup Iteration  23: 12324019.952 ops/s
# Warmup Iteration  24: 12297188.201 ops/s
# Warmup Iteration  25: 12269593.680 ops/s
# Warmup Iteration  26: 12281106.325 ops/s
# Warmup Iteration  27: 12248653.112 ops/s
# Warmup Iteration  28: 12302185.774 ops/s
# Warmup Iteration  29: 12325434.736 ops/s
# Warmup Iteration  30: 12304206.468 ops/s
Iteration   1: 12131101.040 ops/s
Iteration   2: 12367450.211 ops/s
Iteration   3: 12264108.693 ops/s
Iteration   4: 12264138.357 ops/s
Iteration   5: 12343413.933 ops/s
Iteration   6: 12403081.523 ops/s
Iteration   7: 12322969.726 ops/s
Iteration   8: 12384179.975 ops/s
Iteration   9: 12300847.879 ops/s
Iteration  10: 12294356.503 ops/s
Iteration  11: 12372361.684 ops/s
Iteration  12: 12358623.004 ops/s
Iteration  13: 12157550.406 ops/s
Iteration  14: 11917754.138 ops/s
Iteration  15: 12278011.492 ops/s
Iteration  16: 12258259.157 ops/s
Iteration  17: 12293051.305 ops/s
Iteration  18: 12040847.150 ops/s
Iteration  19: 12289752.260 ops/s
Iteration  20: 12220202.091 ops/s
Iteration  21: 12341371.026 ops/s
Iteration  22: 12281343.014 ops/s
Iteration  23: 12286473.040 ops/s
Iteration  24: 12313906.779 ops/s
Iteration  25: 12353737.191 ops/s
Iteration  26: 12253596.600 ops/s
Iteration  27: 12334951.284 ops/s
Iteration  28: 12310689.685 ops/s
Iteration  29: 12280593.032 ops/s
Iteration  30: 12308893.956 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_injectInto":
  12277587.205 ±(99.9%) 68065.462 ops/s [Average]
  (min, avg, max) = (11917754.138, 12277587.205, 12403081.523), stdev = 101877.187
  CI (99.9%): [12209521.742, 12345652.667] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_injectInto  thrpt   30  12277587.205 ± 68065.462  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1151524.635 ops/s
# Warmup Iteration   2: 2002735.728 ops/s
# Warmup Iteration   3: 2073944.098 ops/s
# Warmup Iteration   4: 2190421.221 ops/s
# Warmup Iteration   5: 2208566.162 ops/s
# Warmup Iteration   6: 2226132.296 ops/s
# Warmup Iteration   7: 2204939.759 ops/s
# Warmup Iteration   8: 2233323.617 ops/s
# Warmup Iteration   9: 2235746.914 ops/s
# Warmup Iteration  10: 2248113.103 ops/s
# Warmup Iteration  11: 2244707.660 ops/s
# Warmup Iteration  12: 2244273.281 ops/s
# Warmup Iteration  13: 2237047.286 ops/s
# Warmup Iteration  14: 2242518.386 ops/s
# Warmup Iteration  15: 2239447.523 ops/s
# Warmup Iteration  16: 2249998.705 ops/s
# Warmup Iteration  17: 2229656.376 ops/s
# Warmup Iteration  18: 2230843.776 ops/s
# Warmup Iteration  19: 2240322.734 ops/s
# Warmup Iteration  20: 2214600.348 ops/s
# Warmup Iteration  21: 2212050.347 ops/s
# Warmup Iteration  22: 2239409.476 ops/s
# Warmup Iteration  23: 2256743.334 ops/s
# Warmup Iteration  24: 2249373.289 ops/s
# Warmup Iteration  25: 2248178.138 ops/s
# Warmup Iteration  26: 2241374.803 ops/s
# Warmup Iteration  27: 2244971.494 ops/s
# Warmup Iteration  28: 2238708.309 ops/s
# Warmup Iteration  29: 2238271.394 ops/s
# Warmup Iteration  30: 2232769.006 ops/s
Iteration   1: 2230359.029 ops/s
Iteration   2: 2229829.521 ops/s
Iteration   3: 2235476.061 ops/s
Iteration   4: 2233777.557 ops/s
Iteration   5: 2234776.059 ops/s
Iteration   6: 2247385.743 ops/s
Iteration   7: 2254291.580 ops/s
Iteration   8: 2221924.819 ops/s
Iteration   9: 2230335.355 ops/s
Iteration  10: 2239441.464 ops/s
Iteration  11: 2237759.393 ops/s
Iteration  12: 2226938.634 ops/s
Iteration  13: 2262034.565 ops/s
Iteration  14: 2237157.394 ops/s
Iteration  15: 2205914.924 ops/s
Iteration  16: 2238379.336 ops/s
Iteration  17: 2240442.591 ops/s
Iteration  18: 2243941.941 ops/s
Iteration  19: 2237399.138 ops/s
Iteration  20: 2223619.310 ops/s
Iteration  21: 2225666.017 ops/s
Iteration  22: 2231393.643 ops/s
Iteration  23: 2260178.130 ops/s
Iteration  24: 2241842.671 ops/s
Iteration  25: 2265005.837 ops/s
Iteration  26: 2208699.198 ops/s
Iteration  27: 2229434.344 ops/s
Iteration  28: 2247736.727 ops/s
Iteration  29: 2228893.591 ops/s
Iteration  30: 2243753.512 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty":
  2236459.603 ±(99.9%) 9044.509 ops/s [Average]
  (min, avg, max) = (2205914.924, 2236459.603, 2265005.837), stdev = 13537.397
  CI (99.9%): [2227415.093, 2245504.112] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  2236459.603 ± 9044.509  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 682866.633 ops/s
# Warmup Iteration   2: 709961.000 ops/s
# Warmup Iteration   3: 968928.350 ops/s
# Warmup Iteration   4: 958373.693 ops/s
# Warmup Iteration   5: 968056.578 ops/s
# Warmup Iteration   6: 965605.220 ops/s
# Warmup Iteration   7: 964680.858 ops/s
# Warmup Iteration   8: 964787.455 ops/s
# Warmup Iteration   9: 957483.856 ops/s
# Warmup Iteration  10: 965746.919 ops/s
# Warmup Iteration  11: 805335.568 ops/s
# Warmup Iteration  12: 954452.408 ops/s
# Warmup Iteration  13: 968844.752 ops/s
# Warmup Iteration  14: 966163.074 ops/s
# Warmup Iteration  15: 966241.082 ops/s
# Warmup Iteration  16: 965320.877 ops/s
# Warmup Iteration  17: 1026239.470 ops/s
# Warmup Iteration  18: 1028643.213 ops/s
# Warmup Iteration  19: 1019737.959 ops/s
# Warmup Iteration  20: 1024023.957 ops/s
# Warmup Iteration  21: 1026904.126 ops/s
# Warmup Iteration  22: 1027039.706 ops/s
# Warmup Iteration  23: 1020106.588 ops/s
# Warmup Iteration  24: 1024884.349 ops/s
# Warmup Iteration  25: 1024237.444 ops/s
# Warmup Iteration  26: 1019401.638 ops/s
# Warmup Iteration  27: 1022194.401 ops/s
# Warmup Iteration  28: 1023543.535 ops/s
# Warmup Iteration  29: 1017291.258 ops/s
# Warmup Iteration  30: 1024454.296 ops/s
Iteration   1: 1029214.248 ops/s
Iteration   2: 1026824.441 ops/s
Iteration   3: 1024181.418 ops/s
Iteration   4: 1032169.014 ops/s
Iteration   5: 1012061.690 ops/s
Iteration   6: 1026365.611 ops/s
Iteration   7: 1030342.537 ops/s
Iteration   8: 1016427.930 ops/s
Iteration   9: 1015044.786 ops/s
Iteration  10: 1027183.099 ops/s
Iteration  11: 1015338.110 ops/s
Iteration  12: 1022426.379 ops/s
Iteration  13: 1022781.248 ops/s
Iteration  14: 1012231.268 ops/s
Iteration  15: 1031393.130 ops/s
Iteration  16: 1018950.239 ops/s
Iteration  17: 1030179.298 ops/s
Iteration  18: 1020297.522 ops/s
Iteration  19: 1031957.088 ops/s
Iteration  20: 1020987.703 ops/s
Iteration  21: 1017163.396 ops/s
Iteration  22: 1024728.336 ops/s
Iteration  23: 1031371.318 ops/s
Iteration  24: 1025658.010 ops/s
Iteration  25: 1020623.574 ops/s
Iteration  26: 1021751.813 ops/s
Iteration  27: 1020978.082 ops/s
Iteration  28: 1024369.470 ops/s
Iteration  29: 1023351.418 ops/s
Iteration  30: 1025739.349 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws":
  1023403.051 ±(99.9%) 3889.228 ops/s [Average]
  (min, avg, max) = (1012061.690, 1023403.051, 1032169.014), stdev = 5821.213
  CI (99.9%): [1019513.823, 1027292.278] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws  thrpt   30  1023403.051 ± 3889.228  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 706897.818 ops/s
# Warmup Iteration   2: 766970.108 ops/s
# Warmup Iteration   3: 995940.856 ops/s
# Warmup Iteration   4: 979176.016 ops/s
# Warmup Iteration   5: 986234.413 ops/s
# Warmup Iteration   6: 986314.340 ops/s
# Warmup Iteration   7: 982700.922 ops/s
# Warmup Iteration   8: 985223.320 ops/s
# Warmup Iteration   9: 986195.366 ops/s
# Warmup Iteration  10: 884899.118 ops/s
# Warmup Iteration  11: 918110.426 ops/s
# Warmup Iteration  12: 981060.577 ops/s
# Warmup Iteration  13: 986930.368 ops/s
# Warmup Iteration  14: 990693.325 ops/s
# Warmup Iteration  15: 987495.569 ops/s
# Warmup Iteration  16: 980303.032 ops/s
# Warmup Iteration  17: 1055063.003 ops/s
# Warmup Iteration  18: 1040166.738 ops/s
# Warmup Iteration  19: 1051523.416 ops/s
# Warmup Iteration  20: 1049723.682 ops/s
# Warmup Iteration  21: 1053398.602 ops/s
# Warmup Iteration  22: 1049072.469 ops/s
# Warmup Iteration  23: 1040728.446 ops/s
# Warmup Iteration  24: 1046939.823 ops/s
# Warmup Iteration  25: 1039297.012 ops/s
# Warmup Iteration  26: 1034726.270 ops/s
# Warmup Iteration  27: 1046613.032 ops/s
# Warmup Iteration  28: 1039113.068 ops/s
# Warmup Iteration  29: 1045619.069 ops/s
# Warmup Iteration  30: 1047018.912 ops/s
Iteration   1: 1050516.355 ops/s
Iteration   2: 1041924.157 ops/s
Iteration   3: 1054597.036 ops/s
Iteration   4: 1058021.106 ops/s
Iteration   5: 1052018.078 ops/s
Iteration   6: 1052102.493 ops/s
Iteration   7: 1049383.627 ops/s
Iteration   8: 1046287.869 ops/s
Iteration   9: 1052167.228 ops/s
Iteration  10: 1051789.137 ops/s
Iteration  11: 1047491.762 ops/s
Iteration  12: 1044871.943 ops/s
Iteration  13: 1048661.503 ops/s
Iteration  14: 1054011.792 ops/s
Iteration  15: 1048835.251 ops/s
Iteration  16: 1053412.860 ops/s
Iteration  17: 1058239.116 ops/s
Iteration  18: 1050823.166 ops/s
Iteration  19: 1036815.087 ops/s
Iteration  20: 1010699.547 ops/s
Iteration  21: 1026546.080 ops/s
Iteration  22: 1049472.656 ops/s
Iteration  23: 1039867.454 ops/s
Iteration  24: 1034882.290 ops/s
Iteration  25: 1036342.909 ops/s
Iteration  26: 1017160.528 ops/s
Iteration  27: 1047187.092 ops/s
Iteration  28: 1047135.613 ops/s
Iteration  29: 1053277.645 ops/s
Iteration  30: 1056991.731 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList":
  1045717.770 ±(99.9%) 7550.745 ops/s [Average]
  (min, avg, max) = (1010699.547, 1045717.770, 1058239.116), stdev = 11301.601
  CI (99.9%): [1038167.025, 1053268.515] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1045717.770 ± 7550.745  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 623465.972 ops/s
# Warmup Iteration   2: 649701.953 ops/s
# Warmup Iteration   3: 866890.615 ops/s
# Warmup Iteration   4: 875051.184 ops/s
# Warmup Iteration   5: 865997.750 ops/s
# Warmup Iteration   6: 870234.035 ops/s
# Warmup Iteration   7: 873763.697 ops/s
# Warmup Iteration   8: 865245.543 ops/s
# Warmup Iteration   9: 873197.641 ops/s
# Warmup Iteration  10: 870566.345 ops/s
# Warmup Iteration  11: 722393.591 ops/s
# Warmup Iteration  12: 872695.685 ops/s
# Warmup Iteration  13: 871162.234 ops/s
# Warmup Iteration  14: 874079.706 ops/s
# Warmup Iteration  15: 873353.750 ops/s
# Warmup Iteration  16: 873139.733 ops/s
# Warmup Iteration  17: 919244.563 ops/s
# Warmup Iteration  18: 920579.222 ops/s
# Warmup Iteration  19: 908241.214 ops/s
# Warmup Iteration  20: 910401.894 ops/s
# Warmup Iteration  21: 919984.007 ops/s
# Warmup Iteration  22: 923071.365 ops/s
# Warmup Iteration  23: 927415.060 ops/s
# Warmup Iteration  24: 925276.924 ops/s
# Warmup Iteration  25: 916402.430 ops/s
# Warmup Iteration  26: 914442.552 ops/s
# Warmup Iteration  27: 917480.547 ops/s
# Warmup Iteration  28: 921356.367 ops/s
# Warmup Iteration  29: 920944.116 ops/s
# Warmup Iteration  30: 914420.306 ops/s
Iteration   1: 917751.956 ops/s
Iteration   2: 922549.337 ops/s
Iteration   3: 919633.725 ops/s
Iteration   4: 910824.396 ops/s
Iteration   5: 918140.643 ops/s
Iteration   6: 926465.579 ops/s
Iteration   7: 924916.587 ops/s
Iteration   8: 921389.574 ops/s
Iteration   9: 926315.972 ops/s
Iteration  10: 925105.460 ops/s
Iteration  11: 910189.593 ops/s
Iteration  12: 918792.948 ops/s
Iteration  13: 919716.084 ops/s
Iteration  14: 924218.494 ops/s
Iteration  15: 921602.713 ops/s
Iteration  16: 919929.541 ops/s
Iteration  17: 923145.241 ops/s
Iteration  18: 915436.142 ops/s
Iteration  19: 925552.807 ops/s
Iteration  20: 927839.689 ops/s
Iteration  21: 919897.316 ops/s
Iteration  22: 925048.085 ops/s
Iteration  23: 897639.481 ops/s
Iteration  24: 910460.003 ops/s
Iteration  25: 916290.383 ops/s
Iteration  26: 913050.312 ops/s
Iteration  27: 919311.997 ops/s
Iteration  28: 919760.059 ops/s
Iteration  29: 919600.843 ops/s
Iteration  30: 924270.616 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  919494.853 ±(99.9%) 4233.156 ops/s [Average]
  (min, avg, max) = (897639.481, 919494.853, 927839.689), stdev = 6335.989
  CI (99.9%): [915261.697, 923728.009] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt       Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  919494.853 ± 4233.156  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 713338.792 ops/s
# Warmup Iteration   2: 804483.738 ops/s
# Warmup Iteration   3: 989232.321 ops/s
# Warmup Iteration   4: 1004071.634 ops/s
# Warmup Iteration   5: 1006990.049 ops/s
# Warmup Iteration   6: 1010970.503 ops/s
# Warmup Iteration   7: 1000864.909 ops/s
# Warmup Iteration   8: 998467.335 ops/s
# Warmup Iteration   9: 1008215.988 ops/s
# Warmup Iteration  10: 847710.070 ops/s
# Warmup Iteration  11: 1004509.695 ops/s
# Warmup Iteration  12: 1009084.007 ops/s
# Warmup Iteration  13: 1000981.350 ops/s
# Warmup Iteration  14: 1001055.941 ops/s
# Warmup Iteration  15: 1008030.294 ops/s
# Warmup Iteration  16: 1011574.130 ops/s
# Warmup Iteration  17: 1068760.170 ops/s
# Warmup Iteration  18: 1078358.732 ops/s
# Warmup Iteration  19: 1068173.873 ops/s
# Warmup Iteration  20: 1069325.935 ops/s
# Warmup Iteration  21: 1075985.431 ops/s
# Warmup Iteration  22: 1073783.691 ops/s
# Warmup Iteration  23: 1070712.782 ops/s
# Warmup Iteration  24: 1068644.301 ops/s
# Warmup Iteration  25: 1066689.931 ops/s
# Warmup Iteration  26: 1063890.525 ops/s
# Warmup Iteration  27: 1075987.715 ops/s
# Warmup Iteration  28: 1073446.795 ops/s
# Warmup Iteration  29: 1074458.371 ops/s
# Warmup Iteration  30: 1071766.365 ops/s
Iteration   1: 1079590.679 ops/s
Iteration   2: 1068993.819 ops/s
Iteration   3: 1051474.911 ops/s
Iteration   4: 1075126.528 ops/s
Iteration   5: 1067412.305 ops/s
Iteration   6: 1078345.602 ops/s
Iteration   7: 1083577.192 ops/s
Iteration   8: 1067233.861 ops/s
Iteration   9: 1081101.839 ops/s
Iteration  10: 1073894.519 ops/s
Iteration  11: 1069744.577 ops/s
Iteration  12: 1078245.661 ops/s
Iteration  13: 1064246.926 ops/s
Iteration  14: 1081814.754 ops/s
Iteration  15: 1077701.542 ops/s
Iteration  16: 1070849.925 ops/s
Iteration  17: 1079066.347 ops/s
Iteration  18: 1073796.940 ops/s
Iteration  19: 1079419.209 ops/s
Iteration  20: 1051246.121 ops/s
Iteration  21: 1078960.788 ops/s
Iteration  22: 1049828.313 ops/s
Iteration  23: 1083835.680 ops/s
Iteration  24: 1077271.046 ops/s
Iteration  25: 1077783.213 ops/s
Iteration  26: 1076071.079 ops/s
Iteration  27: 1073937.318 ops/s
Iteration  28: 1038183.228 ops/s
Iteration  29: 1075366.093 ops/s
Iteration  30: 1057343.762 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  1071382.126 ±(99.9%) 7541.947 ops/s [Average]
  (min, avg, max) = (1038183.228, 1071382.126, 1083835.680), stdev = 11288.432
  CI (99.9%): [1063840.179, 1078924.073] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                 Mode  Cnt        Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  1071382.126 ± 7541.947  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 706385.201 ops/s
# Warmup Iteration   2: 793268.966 ops/s
# Warmup Iteration   3: 1008009.273 ops/s
# Warmup Iteration   4: 1003962.696 ops/s
# Warmup Iteration   5: 996067.248 ops/s
# Warmup Iteration   6: 1005079.290 ops/s
# Warmup Iteration   7: 1005480.285 ops/s
# Warmup Iteration   8: 1006621.916 ops/s
# Warmup Iteration   9: 1015639.420 ops/s
# Warmup Iteration  10: 844622.561 ops/s
# Warmup Iteration  11: 1010029.149 ops/s
# Warmup Iteration  12: 1012029.647 ops/s
# Warmup Iteration  13: 998956.511 ops/s
# Warmup Iteration  14: 1011645.933 ops/s
# Warmup Iteration  15: 996096.467 ops/s
# Warmup Iteration  16: 1011787.134 ops/s
# Warmup Iteration  17: 1062417.389 ops/s
# Warmup Iteration  18: 1067043.338 ops/s
# Warmup Iteration  19: 1071728.815 ops/s
# Warmup Iteration  20: 1069225.140 ops/s
# Warmup Iteration  21: 1071749.435 ops/s
# Warmup Iteration  22: 1062161.462 ops/s
# Warmup Iteration  23: 1068765.819 ops/s
# Warmup Iteration  24: 1058723.472 ops/s
# Warmup Iteration  25: 1064979.387 ops/s
# Warmup Iteration  26: 1064700.426 ops/s
# Warmup Iteration  27: 1072307.916 ops/s
# Warmup Iteration  28: 1055663.923 ops/s
# Warmup Iteration  29: 1074873.187 ops/s
# Warmup Iteration  30: 1071731.781 ops/s
Iteration   1: 1072255.572 ops/s
Iteration   2: 1075907.863 ops/s
Iteration   3: 1046576.523 ops/s
Iteration   4: 1072920.064 ops/s
Iteration   5: 1058855.442 ops/s
Iteration   6: 1073213.966 ops/s
Iteration   7: 1078597.933 ops/s
Iteration   8: 1067074.911 ops/s
Iteration   9: 1067043.244 ops/s
Iteration  10: 1057289.528 ops/s
Iteration  11: 1080348.027 ops/s
Iteration  12: 1074359.714 ops/s
Iteration  13: 1069595.544 ops/s
Iteration  14: 1071712.429 ops/s
Iteration  15: 1077656.959 ops/s
Iteration  16: 1042072.195 ops/s
Iteration  17: 1073587.599 ops/s
Iteration  18: 1050102.839 ops/s
Iteration  19: 1076868.758 ops/s
Iteration  20: 1072858.950 ops/s
Iteration  21: 1080047.388 ops/s
Iteration  22: 1070593.391 ops/s
Iteration  23: 1071916.782 ops/s
Iteration  24: 1066268.648 ops/s
Iteration  25: 1076419.223 ops/s
Iteration  26: 1053708.314 ops/s
Iteration  27: 1049995.652 ops/s
Iteration  28: 1078621.712 ops/s
Iteration  29: 1070576.657 ops/s
Iteration  30: 1063517.701 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1068018.784 ±(99.9%) 7063.032 ops/s [Average]
  (min, avg, max) = (1042072.195, 1068018.784, 1080348.027), stdev = 10571.615
  CI (99.9%): [1060955.752, 1075081.817] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                 Mode  Cnt        Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1068018.784 ± 7063.032  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 581853.751 ops/s
# Warmup Iteration   2: 1199851.075 ops/s
# Warmup Iteration   3: 1189751.968 ops/s
# Warmup Iteration   4: 991743.898 ops/s
# Warmup Iteration   5: 1192002.389 ops/s
# Warmup Iteration   6: 1194653.889 ops/s
# Warmup Iteration   7: 1191950.000 ops/s
# Warmup Iteration   8: 1169892.211 ops/s
# Warmup Iteration   9: 1180440.245 ops/s
# Warmup Iteration  10: 1184467.688 ops/s
# Warmup Iteration  11: 1196250.298 ops/s
# Warmup Iteration  12: 1188789.893 ops/s
# Warmup Iteration  13: 1198905.473 ops/s
# Warmup Iteration  14: 1171698.796 ops/s
# Warmup Iteration  15: 1208153.421 ops/s
# Warmup Iteration  16: 1193835.540 ops/s
# Warmup Iteration  17: 1170451.385 ops/s
# Warmup Iteration  18: 1197857.615 ops/s
# Warmup Iteration  19: 1183029.458 ops/s
# Warmup Iteration  20: 1192225.693 ops/s
# Warmup Iteration  21: 1194198.917 ops/s
# Warmup Iteration  22: 1192920.315 ops/s
# Warmup Iteration  23: 1195808.895 ops/s
# Warmup Iteration  24: 1184519.639 ops/s
# Warmup Iteration  25: 1177727.499 ops/s
# Warmup Iteration  26: 1186356.454 ops/s
# Warmup Iteration  27: 1197605.998 ops/s
# Warmup Iteration  28: 1193756.714 ops/s
# Warmup Iteration  29: 1193988.576 ops/s
# Warmup Iteration  30: 1198475.424 ops/s
Iteration   1: 1199295.415 ops/s
Iteration   2: 1193919.565 ops/s
Iteration   3: 1207888.521 ops/s
Iteration   4: 1182817.383 ops/s
Iteration   5: 1180518.630 ops/s
Iteration   6: 1198851.268 ops/s
Iteration   7: 1204698.433 ops/s
Iteration   8: 1204975.197 ops/s
Iteration   9: 1157273.583 ops/s
Iteration  10: 1203893.359 ops/s
Iteration  11: 1191345.902 ops/s
Iteration  12: 1188305.116 ops/s
Iteration  13: 1196112.084 ops/s
Iteration  14: 1189038.220 ops/s
Iteration  15: 1185035.631 ops/s
Iteration  16: 1201754.703 ops/s
Iteration  17: 1191249.238 ops/s
Iteration  18: 1204468.422 ops/s
Iteration  19: 1204964.057 ops/s
Iteration  20: 1184893.971 ops/s
Iteration  21: 1177904.161 ops/s
Iteration  22: 1199940.636 ops/s
Iteration  23: 1195322.172 ops/s
Iteration  24: 1173104.482 ops/s
Iteration  25: 1169354.974 ops/s
Iteration  26: 1198406.491 ops/s
Iteration  27: 1191136.067 ops/s
Iteration  28: 1205428.037 ops/s
Iteration  29: 1207917.477 ops/s
Iteration  30: 1178436.282 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_makeString":
  1192274.983 ±(99.9%) 8421.127 ops/s [Average]
  (min, avg, max) = (1157273.583, 1192274.983, 1207917.477), stdev = 12604.347
  CI (99.9%): [1183853.856, 1200696.109] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_makeString  thrpt   30  1192274.983 ± 8421.127  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 164336236.720 ops/s
# Warmup Iteration   2: 301395841.996 ops/s
# Warmup Iteration   3: 260166013.672 ops/s
# Warmup Iteration   4: 306958655.732 ops/s
# Warmup Iteration   5: 301626112.361 ops/s
# Warmup Iteration   6: 306239045.891 ops/s
# Warmup Iteration   7: 304094679.180 ops/s
# Warmup Iteration   8: 304066520.126 ops/s
# Warmup Iteration   9: 305719667.371 ops/s
# Warmup Iteration  10: 307145286.554 ops/s
# Warmup Iteration  11: 305923812.041 ops/s
# Warmup Iteration  12: 306427366.815 ops/s
# Warmup Iteration  13: 305407788.094 ops/s
# Warmup Iteration  14: 306214272.803 ops/s
# Warmup Iteration  15: 305565593.760 ops/s
# Warmup Iteration  16: 304220908.965 ops/s
# Warmup Iteration  17: 302150704.529 ops/s
# Warmup Iteration  18: 301462939.923 ops/s
# Warmup Iteration  19: 304380002.406 ops/s
# Warmup Iteration  20: 301788029.889 ops/s
# Warmup Iteration  21: 305960671.996 ops/s
# Warmup Iteration  22: 303854949.662 ops/s
# Warmup Iteration  23: 303645116.944 ops/s
# Warmup Iteration  24: 304249282.576 ops/s
# Warmup Iteration  25: 304328611.344 ops/s
# Warmup Iteration  26: 304988567.010 ops/s
# Warmup Iteration  27: 304706728.081 ops/s
# Warmup Iteration  28: 306091171.232 ops/s
# Warmup Iteration  29: 302138019.009 ops/s
# Warmup Iteration  30: 306056641.857 ops/s
Iteration   1: 299134540.131 ops/s
Iteration   2: 299668717.298 ops/s
Iteration   3: 304766539.643 ops/s
Iteration   4: 300843231.067 ops/s
Iteration   5: 302696929.254 ops/s
Iteration   6: 305500413.099 ops/s
Iteration   7: 304897825.025 ops/s
Iteration   8: 299074686.978 ops/s
Iteration   9: 306478824.913 ops/s
Iteration  10: 295682179.972 ops/s
Iteration  11: 305304045.213 ops/s
Iteration  12: 306063997.693 ops/s
Iteration  13: 299464650.119 ops/s
Iteration  14: 303693531.647 ops/s
Iteration  15: 297482809.331 ops/s
Iteration  16: 303462023.047 ops/s
Iteration  17: 291918548.644 ops/s
Iteration  18: 303285082.970 ops/s
Iteration  19: 296441141.849 ops/s
Iteration  20: 305088607.352 ops/s
Iteration  21: 303489595.969 ops/s
Iteration  22: 299012762.795 ops/s
Iteration  23: 301450872.398 ops/s
Iteration  24: 301022543.945 ops/s
Iteration  25: 298428651.794 ops/s
Iteration  26: 304675388.561 ops/s
Iteration  27: 307135380.658 ops/s
Iteration  28: 298673401.034 ops/s
Iteration  29: 304984989.871 ops/s
Iteration  30: 304094506.342 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_newCollection":
  301797213.954 ±(99.9%) 2472354.397 ops/s [Average]
  (min, avg, max) = (291918548.644, 301797213.954, 307135380.658), stdev = 3700503.952
  CI (99.9%): [299324859.557, 304269568.351] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt          Score         Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_newCollection  thrpt   30  301797213.954 ± 2472354.397  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2026657.859 ops/s
# Warmup Iteration   2: 4120397.475 ops/s
# Warmup Iteration   3: 4036170.044 ops/s
# Warmup Iteration   4: 4469914.591 ops/s
# Warmup Iteration   5: 4445969.885 ops/s
# Warmup Iteration   6: 4468197.271 ops/s
# Warmup Iteration   7: 4445252.702 ops/s
# Warmup Iteration   8: 4466798.876 ops/s
# Warmup Iteration   9: 4423464.168 ops/s
# Warmup Iteration  10: 4453381.076 ops/s
# Warmup Iteration  11: 4458946.923 ops/s
# Warmup Iteration  12: 4430698.763 ops/s
# Warmup Iteration  13: 4439529.051 ops/s
# Warmup Iteration  14: 4441974.875 ops/s
# Warmup Iteration  15: 4460807.374 ops/s
# Warmup Iteration  16: 4463317.117 ops/s
# Warmup Iteration  17: 4480102.944 ops/s
# Warmup Iteration  18: 4470613.603 ops/s
# Warmup Iteration  19: 4483283.732 ops/s
# Warmup Iteration  20: 4433229.636 ops/s
# Warmup Iteration  21: 4465524.501 ops/s
# Warmup Iteration  22: 4453733.482 ops/s
# Warmup Iteration  23: 4441760.119 ops/s
# Warmup Iteration  24: 4461025.384 ops/s
# Warmup Iteration  25: 4351192.291 ops/s
# Warmup Iteration  26: 4440595.192 ops/s
# Warmup Iteration  27: 4438491.774 ops/s
# Warmup Iteration  28: 4428775.754 ops/s
# Warmup Iteration  29: 4419153.426 ops/s
# Warmup Iteration  30: 4427252.437 ops/s
Iteration   1: 4458641.763 ops/s
Iteration   2: 4481489.028 ops/s
Iteration   3: 4346913.104 ops/s
Iteration   4: 4358430.518 ops/s
Iteration   5: 4456671.747 ops/s
Iteration   6: 4497895.611 ops/s
Iteration   7: 4444161.847 ops/s
Iteration   8: 4451811.831 ops/s
Iteration   9: 4435965.466 ops/s
Iteration  10: 4503839.490 ops/s
Iteration  11: 4394764.991 ops/s
Iteration  12: 4487032.204 ops/s
Iteration  13: 4481438.172 ops/s
Iteration  14: 4470012.269 ops/s
Iteration  15: 4458241.748 ops/s
Iteration  16: 4454183.750 ops/s
Iteration  17: 4403455.598 ops/s
Iteration  18: 4331293.143 ops/s
Iteration  19: 4463101.348 ops/s
Iteration  20: 4495786.412 ops/s
Iteration  21: 4479620.032 ops/s
Iteration  22: 4453103.683 ops/s
Iteration  23: 4419312.684 ops/s
Iteration  24: 4475871.322 ops/s
Iteration  25: 4495801.656 ops/s
Iteration  26: 4426689.075 ops/s
Iteration  27: 4482607.404 ops/s
Iteration  28: 4416238.168 ops/s
Iteration  29: 4471692.067 ops/s
Iteration  30: 4469973.051 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith":
  4448867.973 ±(99.9%) 29916.317 ops/s [Average]
  (min, avg, max) = (4331293.143, 4448867.973, 4503839.490), stdev = 44777.338
  CI (99.9%): [4418951.656, 4478784.289] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith  thrpt   30  4448867.973 ± 29916.317  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1053195.601 ops/s
# Warmup Iteration   2: 2410451.671 ops/s
# Warmup Iteration   3: 1972141.703 ops/s
# Warmup Iteration   4: 2367315.741 ops/s
# Warmup Iteration   5: 2391974.305 ops/s
# Warmup Iteration   6: 2392641.848 ops/s
# Warmup Iteration   7: 2370286.860 ops/s
# Warmup Iteration   8: 2382526.772 ops/s
# Warmup Iteration   9: 2365204.937 ops/s
# Warmup Iteration  10: 2393176.511 ops/s
# Warmup Iteration  11: 2355165.690 ops/s
# Warmup Iteration  12: 2348044.029 ops/s
# Warmup Iteration  13: 2377356.964 ops/s
# Warmup Iteration  14: 2403065.822 ops/s
# Warmup Iteration  15: 2375977.030 ops/s
# Warmup Iteration  16: 2380492.258 ops/s
# Warmup Iteration  17: 2377885.920 ops/s
# Warmup Iteration  18: 2327159.403 ops/s
# Warmup Iteration  19: 2383858.231 ops/s
# Warmup Iteration  20: 2382539.284 ops/s
# Warmup Iteration  21: 2395070.539 ops/s
# Warmup Iteration  22: 2368238.311 ops/s
# Warmup Iteration  23: 2392522.941 ops/s
# Warmup Iteration  24: 2371417.738 ops/s
# Warmup Iteration  25: 2391573.650 ops/s
# Warmup Iteration  26: 2367965.050 ops/s
# Warmup Iteration  27: 2377290.000 ops/s
# Warmup Iteration  28: 2380011.081 ops/s
# Warmup Iteration  29: 2363695.894 ops/s
# Warmup Iteration  30: 2385341.017 ops/s
Iteration   1: 2402389.829 ops/s
Iteration   2: 2387040.684 ops/s
Iteration   3: 2377781.109 ops/s
Iteration   4: 2387729.046 ops/s
Iteration   5: 2307366.506 ops/s
Iteration   6: 2353117.696 ops/s
Iteration   7: 2342847.908 ops/s
Iteration   8: 2397888.449 ops/s
Iteration   9: 2367104.121 ops/s
Iteration  10: 2367713.242 ops/s
Iteration  11: 2395991.344 ops/s
Iteration  12: 2293140.927 ops/s
Iteration  13: 2343279.130 ops/s
Iteration  14: 2391633.534 ops/s
Iteration  15: 2346711.533 ops/s
Iteration  16: 2385771.753 ops/s
Iteration  17: 2399293.212 ops/s
Iteration  18: 2385894.971 ops/s
Iteration  19: 2391209.989 ops/s
Iteration  20: 2380455.589 ops/s
Iteration  21: 2395996.756 ops/s
Iteration  22: 2390362.727 ops/s
Iteration  23: 2373155.604 ops/s
Iteration  24: 2331489.239 ops/s
Iteration  25: 2385165.419 ops/s
Iteration  26: 2354801.493 ops/s
Iteration  27: 2388410.494 ops/s
Iteration  28: 2395441.933 ops/s
Iteration  29: 2390799.600 ops/s
Iteration  30: 2366339.793 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy":
  2372544.121 ±(99.9%) 18384.900 ops/s [Average]
  (min, avg, max) = (2293140.927, 2372544.121, 2402389.829), stdev = 27517.654
  CI (99.9%): [2354159.221, 2390929.021] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy  thrpt   30  2372544.121 ± 18384.900  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2762589.916 ops/s
# Warmup Iteration   2: 4841046.909 ops/s
# Warmup Iteration   3: 5811794.984 ops/s
# Warmup Iteration   4: 5835872.726 ops/s
# Warmup Iteration   5: 5768054.900 ops/s
# Warmup Iteration   6: 5822285.078 ops/s
# Warmup Iteration   7: 5823191.069 ops/s
# Warmup Iteration   8: 5781714.455 ops/s
# Warmup Iteration   9: 5786182.985 ops/s
# Warmup Iteration  10: 5810102.786 ops/s
# Warmup Iteration  11: 5792545.232 ops/s
# Warmup Iteration  12: 5824382.769 ops/s
# Warmup Iteration  13: 5773978.150 ops/s
# Warmup Iteration  14: 5794400.782 ops/s
# Warmup Iteration  15: 5821126.165 ops/s
# Warmup Iteration  16: 5854341.742 ops/s
# Warmup Iteration  17: 5797123.378 ops/s
# Warmup Iteration  18: 5843336.267 ops/s
# Warmup Iteration  19: 5761645.081 ops/s
# Warmup Iteration  20: 5865528.794 ops/s
# Warmup Iteration  21: 5867071.777 ops/s
# Warmup Iteration  22: 5753115.272 ops/s
# Warmup Iteration  23: 5802498.268 ops/s
# Warmup Iteration  24: 5830494.454 ops/s
# Warmup Iteration  25: 5852104.867 ops/s
# Warmup Iteration  26: 5853964.171 ops/s
# Warmup Iteration  27: 5776192.836 ops/s
# Warmup Iteration  28: 5777188.104 ops/s
# Warmup Iteration  29: 5859921.911 ops/s
# Warmup Iteration  30: 5837581.465 ops/s
Iteration   1: 5830567.754 ops/s
Iteration   2: 5754671.180 ops/s
Iteration   3: 5807001.783 ops/s
Iteration   4: 5857823.768 ops/s
Iteration   5: 5873952.606 ops/s
Iteration   6: 5746376.461 ops/s
Iteration   7: 5865040.181 ops/s
Iteration   8: 5912850.961 ops/s
Iteration   9: 5831465.085 ops/s
Iteration  10: 5887320.276 ops/s
Iteration  11: 5818581.817 ops/s
Iteration  12: 5893259.875 ops/s
Iteration  13: 5890647.756 ops/s
Iteration  14: 5876291.596 ops/s
Iteration  15: 5888625.921 ops/s
Iteration  16: 5893808.492 ops/s
Iteration  17: 5728405.149 ops/s
Iteration  18: 5895182.316 ops/s
Iteration  19: 5621879.558 ops/s
Iteration  20: 5819749.032 ops/s
Iteration  21: 5884287.881 ops/s
Iteration  22: 5878707.868 ops/s
Iteration  23: 5787283.980 ops/s
Iteration  24: 5771976.544 ops/s
Iteration  25: 5894188.739 ops/s
Iteration  26: 5908083.555 ops/s
Iteration  27: 5861582.442 ops/s
Iteration  28: 5786566.465 ops/s
Iteration  29: 5885440.197 ops/s
Iteration  30: 5891864.625 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty":
  5841449.462 ±(99.9%) 44614.244 ops/s [Average]
  (min, avg, max) = (5621879.558, 5841449.462, 5912850.961), stdev = 66776.505
  CI (99.9%): [5796835.218, 5886063.706] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty  thrpt   30  5841449.462 ± 44614.244  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1228721.627 ops/s
# Warmup Iteration   2: 2759817.566 ops/s
# Warmup Iteration   3: 2281958.511 ops/s
# Warmup Iteration   4: 2776662.651 ops/s
# Warmup Iteration   5: 2756423.143 ops/s
# Warmup Iteration   6: 2777333.845 ops/s
# Warmup Iteration   7: 2792138.865 ops/s
# Warmup Iteration   8: 2755806.499 ops/s
# Warmup Iteration   9: 2766952.690 ops/s
# Warmup Iteration  10: 2724590.727 ops/s
# Warmup Iteration  11: 2775887.863 ops/s
# Warmup Iteration  12: 2714620.234 ops/s
# Warmup Iteration  13: 2751059.030 ops/s
# Warmup Iteration  14: 2763002.793 ops/s
# Warmup Iteration  15: 2766188.545 ops/s
# Warmup Iteration  16: 2782779.708 ops/s
# Warmup Iteration  17: 2769711.975 ops/s
# Warmup Iteration  18: 2737612.731 ops/s
# Warmup Iteration  19: 2714889.829 ops/s
# Warmup Iteration  20: 2782016.280 ops/s
# Warmup Iteration  21: 2759705.559 ops/s
# Warmup Iteration  22: 2753865.098 ops/s
# Warmup Iteration  23: 2752315.896 ops/s
# Warmup Iteration  24: 2758429.330 ops/s
# Warmup Iteration  25: 2777549.488 ops/s
# Warmup Iteration  26: 2746428.928 ops/s
# Warmup Iteration  27: 2765213.870 ops/s
# Warmup Iteration  28: 2765889.741 ops/s
# Warmup Iteration  29: 2755349.221 ops/s
# Warmup Iteration  30: 2785242.862 ops/s
Iteration   1: 2796343.165 ops/s
Iteration   2: 2775855.502 ops/s
Iteration   3: 2792079.468 ops/s
Iteration   4: 2774993.606 ops/s
Iteration   5: 2775493.262 ops/s
Iteration   6: 2787434.620 ops/s
Iteration   7: 2780121.864 ops/s
Iteration   8: 2780533.828 ops/s
Iteration   9: 2781914.765 ops/s
Iteration  10: 2788399.365 ops/s
Iteration  11: 2775129.298 ops/s
Iteration  12: 2784277.233 ops/s
Iteration  13: 2774929.529 ops/s
Iteration  14: 2765672.646 ops/s
Iteration  15: 2748384.666 ops/s
Iteration  16: 2784077.357 ops/s
Iteration  17: 2765069.948 ops/s
Iteration  18: 2788363.465 ops/s
Iteration  19: 2782561.718 ops/s
Iteration  20: 2774919.824 ops/s
Iteration  21: 2765520.868 ops/s
Iteration  22: 2742455.247 ops/s
Iteration  23: 2767704.022 ops/s
Iteration  24: 2792198.338 ops/s
Iteration  25: 2776314.103 ops/s
Iteration  26: 2745289.299 ops/s
Iteration  27: 2786064.471 ops/s
Iteration  28: 2720510.589 ops/s
Iteration  29: 2772129.420 ops/s
Iteration  30: 2771495.249 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_reduce":
  2773874.558 ±(99.9%) 11056.320 ops/s [Average]
  (min, avg, max) = (2720510.589, 2773874.558, 2796343.165), stdev = 16548.580
  CI (99.9%): [2762818.238, 2784930.877] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_reduce  thrpt   30  2773874.558 ± 11056.320  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1005045.943 ops/s
# Warmup Iteration   2: 2254381.870 ops/s
# Warmup Iteration   3: 1851863.950 ops/s
# Warmup Iteration   4: 2252517.283 ops/s
# Warmup Iteration   5: 2271979.943 ops/s
# Warmup Iteration   6: 2252826.988 ops/s
# Warmup Iteration   7: 2232629.180 ops/s
# Warmup Iteration   8: 2226565.160 ops/s
# Warmup Iteration   9: 2266153.278 ops/s
# Warmup Iteration  10: 2257632.909 ops/s
# Warmup Iteration  11: 2269477.878 ops/s
# Warmup Iteration  12: 2250678.202 ops/s
# Warmup Iteration  13: 2246758.319 ops/s
# Warmup Iteration  14: 2265420.307 ops/s
# Warmup Iteration  15: 2257611.179 ops/s
# Warmup Iteration  16: 2264927.270 ops/s
# Warmup Iteration  17: 2238944.255 ops/s
# Warmup Iteration  18: 2262077.710 ops/s
# Warmup Iteration  19: 2244060.095 ops/s
# Warmup Iteration  20: 2236629.760 ops/s
# Warmup Iteration  21: 2265902.234 ops/s
# Warmup Iteration  22: 2212686.660 ops/s
# Warmup Iteration  23: 2251537.811 ops/s
# Warmup Iteration  24: 2245126.016 ops/s
# Warmup Iteration  25: 2272369.190 ops/s
# Warmup Iteration  26: 2249567.836 ops/s
# Warmup Iteration  27: 2255607.398 ops/s
# Warmup Iteration  28: 2242808.562 ops/s
# Warmup Iteration  29: 2274239.485 ops/s
# Warmup Iteration  30: 2256997.829 ops/s
Iteration   1: 2260842.412 ops/s
Iteration   2: 2266674.398 ops/s
Iteration   3: 2266193.605 ops/s
Iteration   4: 2195297.333 ops/s
Iteration   5: 2233223.548 ops/s
Iteration   6: 2256522.925 ops/s
Iteration   7: 2263273.639 ops/s
Iteration   8: 2258900.634 ops/s
Iteration   9: 2265579.871 ops/s
Iteration  10: 2247026.392 ops/s
Iteration  11: 2267303.169 ops/s
Iteration  12: 2243683.249 ops/s
Iteration  13: 2243663.418 ops/s
Iteration  14: 2258420.677 ops/s
Iteration  15: 2260571.540 ops/s
Iteration  16: 2260179.525 ops/s
Iteration  17: 2268127.550 ops/s
Iteration  18: 2251634.952 ops/s
Iteration  19: 2251533.116 ops/s
Iteration  20: 2258557.341 ops/s
Iteration  21: 2261811.527 ops/s
Iteration  22: 2257894.289 ops/s
Iteration  23: 2251049.820 ops/s
Iteration  24: 2273332.502 ops/s
Iteration  25: 2263689.598 ops/s
Iteration  26: 2263086.751 ops/s
Iteration  27: 2254362.697 ops/s
Iteration  28: 2206767.364 ops/s
Iteration  29: 2253751.221 ops/s
Iteration  30: 2182677.009 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty":
  2251521.069 ±(99.9%) 14159.201 ops/s [Average]
  (min, avg, max) = (2182677.009, 2251521.069, 2273332.502), stdev = 21192.827
  CI (99.9%): [2237361.868, 2265680.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  2251521.069 ± 14159.201  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 684482.570 ops/s
# Warmup Iteration   2: 748730.390 ops/s
# Warmup Iteration   3: 984938.679 ops/s
# Warmup Iteration   4: 988894.922 ops/s
# Warmup Iteration   5: 980908.877 ops/s
# Warmup Iteration   6: 985383.787 ops/s
# Warmup Iteration   7: 972749.858 ops/s
# Warmup Iteration   8: 990018.069 ops/s
# Warmup Iteration   9: 992351.837 ops/s
# Warmup Iteration  10: 874139.683 ops/s
# Warmup Iteration  11: 929461.959 ops/s
# Warmup Iteration  12: 981077.499 ops/s
# Warmup Iteration  13: 985032.068 ops/s
# Warmup Iteration  14: 987333.296 ops/s
# Warmup Iteration  15: 990237.721 ops/s
# Warmup Iteration  16: 980086.485 ops/s
# Warmup Iteration  17: 1033102.068 ops/s
# Warmup Iteration  18: 1039989.405 ops/s
# Warmup Iteration  19: 1037296.283 ops/s
# Warmup Iteration  20: 1035543.209 ops/s
# Warmup Iteration  21: 1036282.303 ops/s
# Warmup Iteration  22: 1042282.709 ops/s
# Warmup Iteration  23: 1045020.310 ops/s
# Warmup Iteration  24: 1041822.024 ops/s
# Warmup Iteration  25: 1041444.349 ops/s
# Warmup Iteration  26: 1035782.955 ops/s
# Warmup Iteration  27: 1017312.810 ops/s
# Warmup Iteration  28: 1034958.111 ops/s
# Warmup Iteration  29: 1034225.358 ops/s
# Warmup Iteration  30: 1045676.362 ops/s
Iteration   1: 1036867.574 ops/s
Iteration   2: 1010150.124 ops/s
Iteration   3: 1038427.352 ops/s
Iteration   4: 1040795.298 ops/s
Iteration   5: 1048157.652 ops/s
Iteration   6: 1047102.770 ops/s
Iteration   7: 1020610.073 ops/s
Iteration   8: 1027631.199 ops/s
Iteration   9: 1036800.627 ops/s
Iteration  10: 1034429.850 ops/s
Iteration  11: 1045360.201 ops/s
Iteration  12: 1023340.007 ops/s
Iteration  13: 1037636.745 ops/s
Iteration  14: 1043440.195 ops/s
Iteration  15: 1040621.681 ops/s
Iteration  16: 1026540.536 ops/s
Iteration  17: 1048336.439 ops/s
Iteration  18: 1038964.930 ops/s
Iteration  19: 1045648.705 ops/s
Iteration  20: 1043033.289 ops/s
Iteration  21: 1042112.738 ops/s
Iteration  22: 1044966.734 ops/s
Iteration  23: 1042750.921 ops/s
Iteration  24: 1046383.627 ops/s
Iteration  25: 1036756.544 ops/s
Iteration  26: 1042977.076 ops/s
Iteration  27: 1039676.805 ops/s
Iteration  28: 1044036.523 ops/s
Iteration  29: 1037468.896 ops/s
Iteration  30: 1047050.196 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1038602.510 ±(99.9%) 5974.276 ops/s [Average]
  (min, avg, max) = (1010150.124, 1038602.510, 1048336.439), stdev = 8942.015
  CI (99.9%): [1032628.235, 1044576.786] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1038602.510 ± 5974.276  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4533156.859 ops/s
# Warmup Iteration   2: 9641026.560 ops/s
# Warmup Iteration   3: 7976628.249 ops/s
# Warmup Iteration   4: 9403469.523 ops/s
# Warmup Iteration   5: 9480930.769 ops/s
# Warmup Iteration   6: 9501673.014 ops/s
# Warmup Iteration   7: 9438363.722 ops/s
# Warmup Iteration   8: 9531001.030 ops/s
# Warmup Iteration   9: 9479712.592 ops/s
# Warmup Iteration  10: 9392482.727 ops/s
# Warmup Iteration  11: 9489151.662 ops/s
# Warmup Iteration  12: 9496537.124 ops/s
# Warmup Iteration  13: 9467585.492 ops/s
# Warmup Iteration  14: 9384681.871 ops/s
# Warmup Iteration  15: 9425601.538 ops/s
# Warmup Iteration  16: 9482880.244 ops/s
# Warmup Iteration  17: 9521605.603 ops/s
# Warmup Iteration  18: 9414062.800 ops/s
# Warmup Iteration  19: 9471722.278 ops/s
# Warmup Iteration  20: 9475936.635 ops/s
# Warmup Iteration  21: 9489697.096 ops/s
# Warmup Iteration  22: 9506493.923 ops/s
# Warmup Iteration  23: 9385812.666 ops/s
# Warmup Iteration  24: 9522580.499 ops/s
# Warmup Iteration  25: 9475089.053 ops/s
# Warmup Iteration  26: 9457707.546 ops/s
# Warmup Iteration  27: 9517876.809 ops/s
# Warmup Iteration  28: 9461774.352 ops/s
# Warmup Iteration  29: 9498988.731 ops/s
# Warmup Iteration  30: 9505413.336 ops/s
Iteration   1: 9498049.755 ops/s
Iteration   2: 9473058.694 ops/s
Iteration   3: 9546808.733 ops/s
Iteration   4: 9512616.483 ops/s
Iteration   5: 9320661.697 ops/s
Iteration   6: 9480161.562 ops/s
Iteration   7: 9502740.150 ops/s
Iteration   8: 9427813.200 ops/s
Iteration   9: 9523923.324 ops/s
Iteration  10: 9507772.971 ops/s
Iteration  11: 9571687.212 ops/s
Iteration  12: 9479294.131 ops/s
Iteration  13: 9529734.806 ops/s
Iteration  14: 9535104.664 ops/s
Iteration  15: 9539095.185 ops/s
Iteration  16: 9552854.961 ops/s
Iteration  17: 9396871.585 ops/s
Iteration  18: 9537629.868 ops/s
Iteration  19: 9540417.813 ops/s
Iteration  20: 9547532.928 ops/s
Iteration  21: 9574761.006 ops/s
Iteration  22: 9514716.365 ops/s
Iteration  23: 9486260.413 ops/s
Iteration  24: 9498613.377 ops/s
Iteration  25: 9548442.986 ops/s
Iteration  26: 9337788.459 ops/s
Iteration  27: 9562207.884 ops/s
Iteration  28: 9481034.165 ops/s
Iteration  29: 9521707.388 ops/s
Iteration  30: 9504512.275 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_reject":
  9501795.801 ±(99.9%) 40907.335 ops/s [Average]
  (min, avg, max) = (9320661.697, 9501795.801, 9574761.006), stdev = 61228.178
  CI (99.9%): [9460888.466, 9542703.136] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_reject  thrpt   30  9501795.801 ± 40907.335  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4336970.337 ops/s
# Warmup Iteration   2: 8023278.785 ops/s
# Warmup Iteration   3: 8401378.797 ops/s
# Warmup Iteration   4: 8332749.132 ops/s
# Warmup Iteration   5: 7001940.897 ops/s
# Warmup Iteration   6: 8340065.633 ops/s
# Warmup Iteration   7: 8354425.940 ops/s
# Warmup Iteration   8: 8396516.144 ops/s
# Warmup Iteration   9: 8387624.199 ops/s
# Warmup Iteration  10: 8387414.043 ops/s
# Warmup Iteration  11: 8388372.537 ops/s
# Warmup Iteration  12: 8381736.725 ops/s
# Warmup Iteration  13: 8404776.875 ops/s
# Warmup Iteration  14: 8392650.922 ops/s
# Warmup Iteration  15: 8368955.096 ops/s
# Warmup Iteration  16: 8301460.741 ops/s
# Warmup Iteration  17: 8436082.170 ops/s
# Warmup Iteration  18: 8384253.285 ops/s
# Warmup Iteration  19: 8385315.691 ops/s
# Warmup Iteration  20: 8394109.089 ops/s
# Warmup Iteration  21: 8384235.568 ops/s
# Warmup Iteration  22: 8390969.371 ops/s
# Warmup Iteration  23: 8391625.663 ops/s
# Warmup Iteration  24: 8380713.786 ops/s
# Warmup Iteration  25: 8375984.373 ops/s
# Warmup Iteration  26: 8396921.060 ops/s
# Warmup Iteration  27: 8400758.467 ops/s
# Warmup Iteration  28: 8417881.018 ops/s
# Warmup Iteration  29: 8387721.510 ops/s
# Warmup Iteration  30: 8405366.338 ops/s
Iteration   1: 8386896.555 ops/s
Iteration   2: 8379224.309 ops/s
Iteration   3: 8418147.659 ops/s
Iteration   4: 8376250.840 ops/s
Iteration   5: 8361459.280 ops/s
Iteration   6: 8339645.101 ops/s
Iteration   7: 8398027.078 ops/s
Iteration   8: 8358456.267 ops/s
Iteration   9: 8373757.759 ops/s
Iteration  10: 8234315.148 ops/s
Iteration  11: 8396229.602 ops/s
Iteration  12: 8385947.810 ops/s
Iteration  13: 8346890.487 ops/s
Iteration  14: 8370881.775 ops/s
Iteration  15: 8354294.979 ops/s
Iteration  16: 8353371.758 ops/s
Iteration  17: 8410638.081 ops/s
Iteration  18: 8395504.644 ops/s
Iteration  19: 8322647.609 ops/s
Iteration  20: 8401443.486 ops/s
Iteration  21: 8422098.267 ops/s
Iteration  22: 8421583.155 ops/s
Iteration  23: 8373250.926 ops/s
Iteration  24: 8274268.824 ops/s
Iteration  25: 8388181.428 ops/s
Iteration  26: 8267954.437 ops/s
Iteration  27: 8401584.302 ops/s
Iteration  28: 8408682.392 ops/s
Iteration  29: 8426314.563 ops/s
Iteration  30: 8363030.446 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_remove":
  8370365.966 ±(99.9%) 30792.832 ops/s [Average]
  (min, avg, max) = (8234315.148, 8370365.966, 8426314.563), stdev = 46089.266
  CI (99.9%): [8339573.133, 8401158.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_remove  thrpt   30  8370365.966 ± 30792.832  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1252955.537 ops/s
# Warmup Iteration   2: 3018424.128 ops/s
# Warmup Iteration   3: 3013402.775 ops/s
# Warmup Iteration   4: 2513872.942 ops/s
# Warmup Iteration   5: 3015688.070 ops/s
# Warmup Iteration   6: 3000322.682 ops/s
# Warmup Iteration   7: 3000570.432 ops/s
# Warmup Iteration   8: 3005404.508 ops/s
# Warmup Iteration   9: 3015376.713 ops/s
# Warmup Iteration  10: 3026263.904 ops/s
# Warmup Iteration  11: 2972426.318 ops/s
# Warmup Iteration  12: 3013299.715 ops/s
# Warmup Iteration  13: 3017237.839 ops/s
# Warmup Iteration  14: 3019299.659 ops/s
# Warmup Iteration  15: 2992020.336 ops/s
# Warmup Iteration  16: 2997848.717 ops/s
# Warmup Iteration  17: 3025771.019 ops/s
# Warmup Iteration  18: 3029056.550 ops/s
# Warmup Iteration  19: 3026360.316 ops/s
# Warmup Iteration  20: 3025252.912 ops/s
# Warmup Iteration  21: 3021266.159 ops/s
# Warmup Iteration  22: 3027699.241 ops/s
# Warmup Iteration  23: 3023892.388 ops/s
# Warmup Iteration  24: 3014305.734 ops/s
# Warmup Iteration  25: 3025306.454 ops/s
# Warmup Iteration  26: 3022031.299 ops/s
# Warmup Iteration  27: 3026357.653 ops/s
# Warmup Iteration  28: 3017616.970 ops/s
# Warmup Iteration  29: 3017401.604 ops/s
# Warmup Iteration  30: 2966760.369 ops/s
Iteration   1: 3033348.248 ops/s
Iteration   2: 3024310.577 ops/s
Iteration   3: 3028326.328 ops/s
Iteration   4: 3027396.780 ops/s
Iteration   5: 3020746.864 ops/s
Iteration   6: 2998017.678 ops/s
Iteration   7: 2972481.485 ops/s
Iteration   8: 3035922.423 ops/s
Iteration   9: 2971520.033 ops/s
Iteration  10: 3020631.385 ops/s
Iteration  11: 3019638.871 ops/s
Iteration  12: 3035462.267 ops/s
Iteration  13: 3027172.087 ops/s
Iteration  14: 3018443.026 ops/s
Iteration  15: 2999608.500 ops/s
Iteration  16: 3013435.530 ops/s
Iteration  17: 3017450.976 ops/s
Iteration  18: 3040857.926 ops/s
Iteration  19: 3026512.310 ops/s
Iteration  20: 2965433.397 ops/s
Iteration  21: 3021269.652 ops/s
Iteration  22: 3023774.130 ops/s
Iteration  23: 3026556.237 ops/s
Iteration  24: 3032984.819 ops/s
Iteration  25: 3011134.548 ops/s
Iteration  26: 3012280.490 ops/s
Iteration  27: 3008442.216 ops/s
Iteration  28: 3008907.822 ops/s
Iteration  29: 3017004.269 ops/s
Iteration  30: 3026844.962 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_removeAll":
  3016197.195 ±(99.9%) 12483.544 ops/s [Average]
  (min, avg, max) = (2965433.397, 3016197.195, 3040857.926), stdev = 18684.782
  CI (99.9%): [3003713.651, 3028680.738] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_removeAll  thrpt   30  3016197.195 ± 12483.544  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1057758.774 ops/s
# Warmup Iteration   2: 2450718.391 ops/s
# Warmup Iteration   3: 2255918.847 ops/s
# Warmup Iteration   4: 2255676.516 ops/s
# Warmup Iteration   5: 2452881.199 ops/s
# Warmup Iteration   6: 2432861.261 ops/s
# Warmup Iteration   7: 2423727.634 ops/s
# Warmup Iteration   8: 2460786.088 ops/s
# Warmup Iteration   9: 2439727.121 ops/s
# Warmup Iteration  10: 2453766.273 ops/s
# Warmup Iteration  11: 2463374.033 ops/s
# Warmup Iteration  12: 2440561.352 ops/s
# Warmup Iteration  13: 2454884.056 ops/s
# Warmup Iteration  14: 2412139.049 ops/s
# Warmup Iteration  15: 2458294.282 ops/s
# Warmup Iteration  16: 2439672.627 ops/s
# Warmup Iteration  17: 2448741.170 ops/s
# Warmup Iteration  18: 2423353.900 ops/s
# Warmup Iteration  19: 2462307.007 ops/s
# Warmup Iteration  20: 2424015.504 ops/s
# Warmup Iteration  21: 2456122.240 ops/s
# Warmup Iteration  22: 2456823.664 ops/s
# Warmup Iteration  23: 2459727.295 ops/s
# Warmup Iteration  24: 2455771.941 ops/s
# Warmup Iteration  25: 2458369.471 ops/s
# Warmup Iteration  26: 2449474.924 ops/s
# Warmup Iteration  27: 2467298.311 ops/s
# Warmup Iteration  28: 2462571.574 ops/s
# Warmup Iteration  29: 2462713.267 ops/s
# Warmup Iteration  30: 2447672.331 ops/s
Iteration   1: 2479673.419 ops/s
Iteration   2: 2468919.291 ops/s
Iteration   3: 2444531.992 ops/s
Iteration   4: 2463554.553 ops/s
Iteration   5: 2458796.017 ops/s
Iteration   6: 2457341.868 ops/s
Iteration   7: 2433908.592 ops/s
Iteration   8: 2471181.579 ops/s
Iteration   9: 2446230.346 ops/s
Iteration  10: 2449873.015 ops/s
Iteration  11: 2460510.046 ops/s
Iteration  12: 2452035.820 ops/s
Iteration  13: 2448299.033 ops/s
Iteration  14: 2454013.833 ops/s
Iteration  15: 2440944.406 ops/s
Iteration  16: 2456035.889 ops/s
Iteration  17: 2434302.240 ops/s
Iteration  18: 2451901.955 ops/s
Iteration  19: 2472069.472 ops/s
Iteration  20: 2451524.789 ops/s
Iteration  21: 2451885.758 ops/s
Iteration  22: 2415519.044 ops/s
Iteration  23: 2413421.859 ops/s
Iteration  24: 2439648.322 ops/s
Iteration  25: 2447968.950 ops/s
Iteration  26: 2450501.520 ops/s
Iteration  27: 2462860.233 ops/s
Iteration  28: 2426191.890 ops/s
Iteration  29: 2427242.435 ops/s
Iteration  30: 2461839.955 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable":
  2449757.604 ±(99.9%) 10619.861 ops/s [Average]
  (min, avg, max) = (2413421.859, 2449757.604, 2479673.419), stdev = 15895.309
  CI (99.9%): [2439137.743, 2460377.465] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  2449757.604 ± 10619.861  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 420248.693 ops/s
# Warmup Iteration   2: 950015.310 ops/s
# Warmup Iteration   3: 952478.769 ops/s
# Warmup Iteration   4: 792345.006 ops/s
# Warmup Iteration   5: 947738.668 ops/s
# Warmup Iteration   6: 943159.701 ops/s
# Warmup Iteration   7: 948782.693 ops/s
# Warmup Iteration   8: 946657.932 ops/s
# Warmup Iteration   9: 945857.346 ops/s
# Warmup Iteration  10: 947323.425 ops/s
# Warmup Iteration  11: 951547.599 ops/s
# Warmup Iteration  12: 940216.136 ops/s
# Warmup Iteration  13: 943581.577 ops/s
# Warmup Iteration  14: 953319.487 ops/s
# Warmup Iteration  15: 953961.149 ops/s
# Warmup Iteration  16: 943743.442 ops/s
# Warmup Iteration  17: 955295.745 ops/s
# Warmup Iteration  18: 954744.827 ops/s
# Warmup Iteration  19: 945488.738 ops/s
# Warmup Iteration  20: 943358.440 ops/s
# Warmup Iteration  21: 948409.931 ops/s
# Warmup Iteration  22: 934655.944 ops/s
# Warmup Iteration  23: 947963.358 ops/s
# Warmup Iteration  24: 947571.968 ops/s
# Warmup Iteration  25: 951407.228 ops/s
# Warmup Iteration  26: 925321.956 ops/s
# Warmup Iteration  27: 951921.174 ops/s
# Warmup Iteration  28: 942458.670 ops/s
# Warmup Iteration  29: 948494.971 ops/s
# Warmup Iteration  30: 945325.314 ops/s
Iteration   1: 957028.138 ops/s
Iteration   2: 951198.897 ops/s
Iteration   3: 944232.063 ops/s
Iteration   4: 939668.256 ops/s
Iteration   5: 937990.255 ops/s
Iteration   6: 954622.348 ops/s
Iteration   7: 952781.453 ops/s
Iteration   8: 951903.880 ops/s
Iteration   9: 955692.795 ops/s
Iteration  10: 953606.631 ops/s
Iteration  11: 956445.269 ops/s
Iteration  12: 939880.251 ops/s
Iteration  13: 952151.263 ops/s
Iteration  14: 949956.339 ops/s
Iteration  15: 945294.757 ops/s
Iteration  16: 955875.979 ops/s
Iteration  17: 952108.536 ops/s
Iteration  18: 949234.065 ops/s
Iteration  19: 951850.131 ops/s
Iteration  20: 948500.415 ops/s
Iteration  21: 943470.328 ops/s
Iteration  22: 940690.536 ops/s
Iteration  23: 950319.305 ops/s
Iteration  24: 950186.919 ops/s
Iteration  25: 954937.724 ops/s
Iteration  26: 959561.317 ops/s
Iteration  27: 939454.404 ops/s
Iteration  28: 953190.626 ops/s
Iteration  29: 939015.897 ops/s
Iteration  30: 936193.549 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_retainAll":
  948901.411 ±(99.9%) 4422.834 ops/s [Average]
  (min, avg, max) = (936193.549, 948901.411, 959561.317), stdev = 6619.890
  CI (99.9%): [944478.577, 953324.245] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_retainAll  thrpt   30  948901.411 ± 4422.834  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 315559.217 ops/s
# Warmup Iteration   2: 664257.696 ops/s
# Warmup Iteration   3: 695269.674 ops/s
# Warmup Iteration   4: 672323.089 ops/s
# Warmup Iteration   5: 583518.122 ops/s
# Warmup Iteration   6: 689704.090 ops/s
# Warmup Iteration   7: 688891.768 ops/s
# Warmup Iteration   8: 694474.521 ops/s
# Warmup Iteration   9: 692344.358 ops/s
# Warmup Iteration  10: 691859.979 ops/s
# Warmup Iteration  11: 692716.246 ops/s
# Warmup Iteration  12: 693396.247 ops/s
# Warmup Iteration  13: 687323.019 ops/s
# Warmup Iteration  14: 681796.577 ops/s
# Warmup Iteration  15: 689178.987 ops/s
# Warmup Iteration  16: 691860.960 ops/s
# Warmup Iteration  17: 691486.267 ops/s
# Warmup Iteration  18: 689415.803 ops/s
# Warmup Iteration  19: 693449.285 ops/s
# Warmup Iteration  20: 686645.458 ops/s
# Warmup Iteration  21: 693920.732 ops/s
# Warmup Iteration  22: 691726.806 ops/s
# Warmup Iteration  23: 696201.892 ops/s
# Warmup Iteration  24: 683718.142 ops/s
# Warmup Iteration  25: 692593.022 ops/s
# Warmup Iteration  26: 691163.567 ops/s
# Warmup Iteration  27: 692503.744 ops/s
# Warmup Iteration  28: 689376.180 ops/s
# Warmup Iteration  29: 694499.735 ops/s
# Warmup Iteration  30: 688793.854 ops/s
Iteration   1: 693704.495 ops/s
Iteration   2: 694218.235 ops/s
Iteration   3: 694827.930 ops/s
Iteration   4: 692826.060 ops/s
Iteration   5: 693869.420 ops/s
Iteration   6: 694477.176 ops/s
Iteration   7: 689687.439 ops/s
Iteration   8: 698441.892 ops/s
Iteration   9: 692632.189 ops/s
Iteration  10: 697266.901 ops/s
Iteration  11: 684743.439 ops/s
Iteration  12: 683678.720 ops/s
Iteration  13: 691475.599 ops/s
Iteration  14: 693384.106 ops/s
Iteration  15: 689648.441 ops/s
Iteration  16: 696299.404 ops/s
Iteration  17: 693500.745 ops/s
Iteration  18: 685193.388 ops/s
Iteration  19: 695786.258 ops/s
Iteration  20: 688847.815 ops/s
Iteration  21: 694145.043 ops/s
Iteration  22: 691581.623 ops/s
Iteration  23: 694463.499 ops/s
Iteration  24: 694626.307 ops/s
Iteration  25: 690305.361 ops/s
Iteration  26: 685111.685 ops/s
Iteration  27: 692645.199 ops/s
Iteration  28: 691472.482 ops/s
Iteration  29: 673854.994 ops/s
Iteration  30: 695683.135 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable":
  691613.299 ±(99.9%) 3350.139 ops/s [Average]
  (min, avg, max) = (673854.994, 691613.299, 698441.892), stdev = 5014.331
  CI (99.9%): [688263.160, 694963.438] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  691613.299 ± 3350.139  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4421881.323 ops/s
# Warmup Iteration   2: 9410447.104 ops/s
# Warmup Iteration   3: 7828561.609 ops/s
# Warmup Iteration   4: 9379474.795 ops/s
# Warmup Iteration   5: 9468878.916 ops/s
# Warmup Iteration   6: 9396495.638 ops/s
# Warmup Iteration   7: 9408381.672 ops/s
# Warmup Iteration   8: 9425259.915 ops/s
# Warmup Iteration   9: 9348118.288 ops/s
# Warmup Iteration  10: 9392517.761 ops/s
# Warmup Iteration  11: 9462688.424 ops/s
# Warmup Iteration  12: 9454546.541 ops/s
# Warmup Iteration  13: 9346148.147 ops/s
# Warmup Iteration  14: 9436423.330 ops/s
# Warmup Iteration  15: 9322575.613 ops/s
# Warmup Iteration  16: 9464143.063 ops/s
# Warmup Iteration  17: 9410812.463 ops/s
# Warmup Iteration  18: 9415419.446 ops/s
# Warmup Iteration  19: 9452214.291 ops/s
# Warmup Iteration  20: 9430617.043 ops/s
# Warmup Iteration  21: 9372856.009 ops/s
# Warmup Iteration  22: 9346496.986 ops/s
# Warmup Iteration  23: 9321443.000 ops/s
# Warmup Iteration  24: 9433386.302 ops/s
# Warmup Iteration  25: 9347297.605 ops/s
# Warmup Iteration  26: 9360003.264 ops/s
# Warmup Iteration  27: 9259247.515 ops/s
# Warmup Iteration  28: 9329399.104 ops/s
# Warmup Iteration  29: 9392892.896 ops/s
# Warmup Iteration  30: 9406854.744 ops/s
Iteration   1: 9363017.061 ops/s
Iteration   2: 9478343.324 ops/s
Iteration   3: 9391872.542 ops/s
Iteration   4: 9440511.323 ops/s
Iteration   5: 9399311.873 ops/s
Iteration   6: 9387401.784 ops/s
Iteration   7: 9440814.000 ops/s
Iteration   8: 9308251.994 ops/s
Iteration   9: 9368283.313 ops/s
Iteration  10: 9184594.809 ops/s
Iteration  11: 9260651.363 ops/s
Iteration  12: 9456739.565 ops/s
Iteration  13: 9379789.422 ops/s
Iteration  14: 9344476.734 ops/s
Iteration  15: 9467612.765 ops/s
Iteration  16: 9343948.479 ops/s
Iteration  17: 9430087.253 ops/s
Iteration  18: 9447464.067 ops/s
Iteration  19: 9444443.552 ops/s
Iteration  20: 9304297.608 ops/s
Iteration  21: 9465876.926 ops/s
Iteration  22: 9195881.133 ops/s
Iteration  23: 9454402.547 ops/s
Iteration  24: 9433449.455 ops/s
Iteration  25: 9457520.269 ops/s
Iteration  26: 9447868.674 ops/s
Iteration  27: 9423335.547 ops/s
Iteration  28: 9481984.157 ops/s
Iteration  29: 9479186.335 ops/s
Iteration  30: 9404614.471 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_select":
  9396201.078 ±(99.9%) 53189.569 ops/s [Average]
  (min, avg, max) = (9184594.809, 9396201.078, 9481984.157), stdev = 79611.650
  CI (99.9%): [9343011.509, 9449390.648] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_select  thrpt   30  9396201.078 ± 53189.569  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2682397.645 ops/s
# Warmup Iteration   2: 4560612.552 ops/s
# Warmup Iteration   3: 5447067.040 ops/s
# Warmup Iteration   4: 5412552.737 ops/s
# Warmup Iteration   5: 5425687.912 ops/s
# Warmup Iteration   6: 5450061.694 ops/s
# Warmup Iteration   7: 5438454.084 ops/s
# Warmup Iteration   8: 5456485.896 ops/s
# Warmup Iteration   9: 5340794.985 ops/s
# Warmup Iteration  10: 5479678.632 ops/s
# Warmup Iteration  11: 5452970.648 ops/s
# Warmup Iteration  12: 5426085.699 ops/s
# Warmup Iteration  13: 5397149.232 ops/s
# Warmup Iteration  14: 5376929.829 ops/s
# Warmup Iteration  15: 5395679.852 ops/s
# Warmup Iteration  16: 5446620.486 ops/s
# Warmup Iteration  17: 5436395.800 ops/s
# Warmup Iteration  18: 5442618.989 ops/s
# Warmup Iteration  19: 5427993.071 ops/s
# Warmup Iteration  20: 5467066.280 ops/s
# Warmup Iteration  21: 5443408.186 ops/s
# Warmup Iteration  22: 5454395.330 ops/s
# Warmup Iteration  23: 5448202.430 ops/s
# Warmup Iteration  24: 5437317.465 ops/s
# Warmup Iteration  25: 5386140.214 ops/s
# Warmup Iteration  26: 5422072.618 ops/s
# Warmup Iteration  27: 5366756.860 ops/s
# Warmup Iteration  28: 5420635.250 ops/s
# Warmup Iteration  29: 5419131.073 ops/s
# Warmup Iteration  30: 5423127.134 ops/s
Iteration   1: 5462776.107 ops/s
Iteration   2: 5421125.680 ops/s
Iteration   3: 5399881.180 ops/s
Iteration   4: 5449887.156 ops/s
Iteration   5: 5412785.799 ops/s
Iteration   6: 5357384.067 ops/s
Iteration   7: 5380149.032 ops/s
Iteration   8: 5418043.925 ops/s
Iteration   9: 5342963.928 ops/s
Iteration  10: 5384279.989 ops/s
Iteration  11: 5375089.259 ops/s
Iteration  12: 5393283.721 ops/s
Iteration  13: 5461266.186 ops/s
Iteration  14: 5387803.198 ops/s
Iteration  15: 5395415.047 ops/s
Iteration  16: 5429600.865 ops/s
Iteration  17: 5365876.024 ops/s
Iteration  18: 5440658.150 ops/s
Iteration  19: 5456049.763 ops/s
Iteration  20: 5452515.555 ops/s
Iteration  21: 5449335.119 ops/s
Iteration  22: 5489280.975 ops/s
Iteration  23: 5461323.922 ops/s
Iteration  24: 5419518.163 ops/s
Iteration  25: 5439008.902 ops/s
Iteration  26: 5404308.633 ops/s
Iteration  27: 5476959.513 ops/s
Iteration  28: 5320715.872 ops/s
Iteration  29: 5369354.696 ops/s
Iteration  30: 5332267.496 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_size":
  5411630.264 ±(99.9%) 29625.960 ops/s [Average]
  (min, avg, max) = (5320715.872, 5411630.264, 5489280.975), stdev = 44342.746
  CI (99.9%): [5382004.304, 5441256.224] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_size  thrpt   30  5411630.264 ± 29625.960  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 160664045.913 ops/s
# Warmup Iteration   2: 297068381.070 ops/s
# Warmup Iteration   3: 239939835.946 ops/s
# Warmup Iteration   4: 279187485.713 ops/s
# Warmup Iteration   5: 278810802.619 ops/s
# Warmup Iteration   6: 277720228.419 ops/s
# Warmup Iteration   7: 276221359.463 ops/s
# Warmup Iteration   8: 278415377.029 ops/s
# Warmup Iteration   9: 276778782.737 ops/s
# Warmup Iteration  10: 274752523.515 ops/s
# Warmup Iteration  11: 280042104.933 ops/s
# Warmup Iteration  12: 274487558.211 ops/s
# Warmup Iteration  13: 279319703.657 ops/s
# Warmup Iteration  14: 276091401.626 ops/s
# Warmup Iteration  15: 271507060.782 ops/s
# Warmup Iteration  16: 277826689.571 ops/s
# Warmup Iteration  17: 279008101.004 ops/s
# Warmup Iteration  18: 275448928.505 ops/s
# Warmup Iteration  19: 278581473.022 ops/s
# Warmup Iteration  20: 276088331.637 ops/s
# Warmup Iteration  21: 277763053.149 ops/s
# Warmup Iteration  22: 276866834.215 ops/s
# Warmup Iteration  23: 276291464.227 ops/s
# Warmup Iteration  24: 276740024.397 ops/s
# Warmup Iteration  25: 279545252.573 ops/s
# Warmup Iteration  26: 277530682.310 ops/s
# Warmup Iteration  27: 276019576.186 ops/s
# Warmup Iteration  28: 276754944.650 ops/s
# Warmup Iteration  29: 279065712.869 ops/s
# Warmup Iteration  30: 276535987.824 ops/s
Iteration   1: 277988027.239 ops/s
Iteration   2: 277653153.692 ops/s
Iteration   3: 274982847.278 ops/s
Iteration   4: 280387067.086 ops/s
Iteration   5: 278399502.178 ops/s
Iteration   6: 277231636.588 ops/s
Iteration   7: 280110077.198 ops/s
Iteration   8: 280909486.505 ops/s
Iteration   9: 277864240.930 ops/s
Iteration  10: 273678204.588 ops/s
Iteration  11: 275060728.771 ops/s
Iteration  12: 279682404.803 ops/s
Iteration  13: 272374508.566 ops/s
Iteration  14: 279505691.431 ops/s
Iteration  15: 278342752.939 ops/s
Iteration  16: 279426456.063 ops/s
Iteration  17: 274973507.008 ops/s
Iteration  18: 278547340.931 ops/s
Iteration  19: 274405729.160 ops/s
Iteration  20: 278330321.257 ops/s
Iteration  21: 280694057.622 ops/s
Iteration  22: 276936685.018 ops/s
Iteration  23: 279308501.251 ops/s
Iteration  24: 275533032.826 ops/s
Iteration  25: 277224544.318 ops/s
Iteration  26: 279949813.936 ops/s
Iteration  27: 278838167.967 ops/s
Iteration  28: 280235447.772 ops/s
Iteration  29: 274044050.445 ops/s
Iteration  30: 274270422.620 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_testEquals":
  277562946.933 ±(99.9%) 1605324.639 ops/s [Average]
  (min, avg, max) = (272374508.566, 277562946.933, 280909486.505), stdev = 2402774.528
  CI (99.9%): [275957622.294, 279168271.571] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt          Score         Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_testEquals  thrpt   30  277562946.933 ± 1605324.639  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 163439710.664 ops/s
# Warmup Iteration   2: 300131062.188 ops/s
# Warmup Iteration   3: 256534822.920 ops/s
# Warmup Iteration   4: 300948931.916 ops/s
# Warmup Iteration   5: 303353351.247 ops/s
# Warmup Iteration   6: 305014611.239 ops/s
# Warmup Iteration   7: 307104056.221 ops/s
# Warmup Iteration   8: 303582701.200 ops/s
# Warmup Iteration   9: 306238769.332 ops/s
# Warmup Iteration  10: 304087915.944 ops/s
# Warmup Iteration  11: 304314923.865 ops/s
# Warmup Iteration  12: 306479555.633 ops/s
# Warmup Iteration  13: 307075722.707 ops/s
# Warmup Iteration  14: 306027086.634 ops/s
# Warmup Iteration  15: 304770799.089 ops/s
# Warmup Iteration  16: 300000217.927 ops/s
# Warmup Iteration  17: 302735967.688 ops/s
# Warmup Iteration  18: 305309763.360 ops/s
# Warmup Iteration  19: 303736104.469 ops/s
# Warmup Iteration  20: 302938118.748 ops/s
# Warmup Iteration  21: 302824544.222 ops/s
# Warmup Iteration  22: 303632702.565 ops/s
# Warmup Iteration  23: 302284836.099 ops/s
# Warmup Iteration  24: 305063196.681 ops/s
# Warmup Iteration  25: 306179450.027 ops/s
# Warmup Iteration  26: 307272901.838 ops/s
# Warmup Iteration  27: 302176444.293 ops/s
# Warmup Iteration  28: 306518451.200 ops/s
# Warmup Iteration  29: 303507097.614 ops/s
# Warmup Iteration  30: 307522049.714 ops/s
Iteration   1: 304446972.375 ops/s
Iteration   2: 296682992.519 ops/s
Iteration   3: 304170119.274 ops/s
Iteration   4: 307369557.276 ops/s
Iteration   5: 303823804.834 ops/s
Iteration   6: 305164285.780 ops/s
Iteration   7: 304374425.181 ops/s
Iteration   8: 305128100.384 ops/s
Iteration   9: 301743927.788 ops/s
Iteration  10: 307649715.881 ops/s
Iteration  11: 305405973.290 ops/s
Iteration  12: 301220178.556 ops/s
Iteration  13: 302792856.937 ops/s
Iteration  14: 307399447.903 ops/s
Iteration  15: 307349402.560 ops/s
Iteration  16: 306532168.166 ops/s
Iteration  17: 305749518.813 ops/s
Iteration  18: 305676456.363 ops/s
Iteration  19: 306179923.106 ops/s
Iteration  20: 304206104.009 ops/s
Iteration  21: 305178088.921 ops/s
Iteration  22: 300388986.021 ops/s
Iteration  23: 304644109.327 ops/s
Iteration  24: 301701929.278 ops/s
Iteration  25: 305535498.285 ops/s
Iteration  26: 307764845.436 ops/s
Iteration  27: 305820640.058 ops/s
Iteration  28: 303981633.010 ops/s
Iteration  29: 305857331.141 ops/s
Iteration  30: 306192606.181 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode":
  304671053.289 ±(99.9%) 1627400.205 ops/s [Average]
  (min, avg, max) = (296682992.519, 304671053.289, 307764845.436), stdev = 2435816.198
  CI (99.9%): [303043653.084, 306298453.493] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt          Score         Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode  thrpt   30  304671053.289 ± 1627400.205  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 165462967.580 ops/s
# Warmup Iteration   2: 300203751.295 ops/s
# Warmup Iteration   3: 264506383.975 ops/s
# Warmup Iteration   4: 305764248.811 ops/s
# Warmup Iteration   5: 307047827.758 ops/s
# Warmup Iteration   6: 306297414.711 ops/s
# Warmup Iteration   7: 306103385.959 ops/s
# Warmup Iteration   8: 304468985.472 ops/s
# Warmup Iteration   9: 306247058.742 ops/s
# Warmup Iteration  10: 305476007.913 ops/s
# Warmup Iteration  11: 304616501.418 ops/s
# Warmup Iteration  12: 304585011.019 ops/s
# Warmup Iteration  13: 306690848.731 ops/s
# Warmup Iteration  14: 303271731.258 ops/s
# Warmup Iteration  15: 305029453.939 ops/s
# Warmup Iteration  16: 302118295.389 ops/s
# Warmup Iteration  17: 303919098.005 ops/s
# Warmup Iteration  18: 306359032.728 ops/s
# Warmup Iteration  19: 306004363.892 ops/s
# Warmup Iteration  20: 307162179.603 ops/s
# Warmup Iteration  21: 305754691.383 ops/s
# Warmup Iteration  22: 304189267.118 ops/s
# Warmup Iteration  23: 305725373.023 ops/s
# Warmup Iteration  24: 301039922.235 ops/s
# Warmup Iteration  25: 305599268.445 ops/s
# Warmup Iteration  26: 304354983.691 ops/s
# Warmup Iteration  27: 302512349.911 ops/s
# Warmup Iteration  28: 302051857.400 ops/s
# Warmup Iteration  29: 304777652.891 ops/s
# Warmup Iteration  30: 307083071.860 ops/s
Iteration   1: 301220015.527 ops/s
Iteration   2: 304836101.226 ops/s
Iteration   3: 304548174.481 ops/s
Iteration   4: 306805424.352 ops/s
Iteration   5: 306071187.515 ops/s
Iteration   6: 306226579.922 ops/s
Iteration   7: 303491766.454 ops/s
Iteration   8: 300904829.736 ops/s
Iteration   9: 302213276.040 ops/s
Iteration  10: 307032449.805 ops/s
Iteration  11: 300173397.793 ops/s
Iteration  12: 306558902.552 ops/s
Iteration  13: 302255217.771 ops/s
Iteration  14: 307113461.210 ops/s
Iteration  15: 305153649.911 ops/s
Iteration  16: 300538986.091 ops/s
Iteration  17: 306191976.148 ops/s
Iteration  18: 308254883.195 ops/s
Iteration  19: 305337698.975 ops/s
Iteration  20: 304884006.706 ops/s
Iteration  21: 301360308.594 ops/s
Iteration  22: 306698156.264 ops/s
Iteration  23: 305975352.745 ops/s
Iteration  24: 305483066.179 ops/s
Iteration  25: 306122131.801 ops/s
Iteration  26: 308381556.189 ops/s
Iteration  27: 305960436.133 ops/s
Iteration  28: 306464970.270 ops/s
Iteration  29: 302659688.376 ops/s
Iteration  30: 307022688.543 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_testToString":
  304864678.017 ±(99.9%) 1585242.328 ops/s [Average]
  (min, avg, max) = (300173397.793, 304864678.017, 308381556.189), stdev = 2372716.269
  CI (99.9%): [303279435.688, 306449920.345] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt          Score         Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_testToString  thrpt   30  304864678.017 ± 1585242.328  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1493015.575 ops/s
# Warmup Iteration   2: 3251577.340 ops/s
# Warmup Iteration   3: 2733890.914 ops/s
# Warmup Iteration   4: 3284415.028 ops/s
# Warmup Iteration   5: 3265949.465 ops/s
# Warmup Iteration   6: 3272609.534 ops/s
# Warmup Iteration   7: 3282672.444 ops/s
# Warmup Iteration   8: 3305513.073 ops/s
# Warmup Iteration   9: 3295531.866 ops/s
# Warmup Iteration  10: 3228792.630 ops/s
# Warmup Iteration  11: 3293500.919 ops/s
# Warmup Iteration  12: 3274592.467 ops/s
# Warmup Iteration  13: 3302214.686 ops/s
# Warmup Iteration  14: 3309224.911 ops/s
# Warmup Iteration  15: 3280312.541 ops/s
# Warmup Iteration  16: 3293188.645 ops/s
# Warmup Iteration  17: 3285630.884 ops/s
# Warmup Iteration  18: 3291466.983 ops/s
# Warmup Iteration  19: 3295524.522 ops/s
# Warmup Iteration  20: 3304344.805 ops/s
# Warmup Iteration  21: 3313676.343 ops/s
# Warmup Iteration  22: 3291369.677 ops/s
# Warmup Iteration  23: 3278225.758 ops/s
# Warmup Iteration  24: 3271147.390 ops/s
# Warmup Iteration  25: 3283286.737 ops/s
# Warmup Iteration  26: 3300339.991 ops/s
# Warmup Iteration  27: 3299110.416 ops/s
# Warmup Iteration  28: 3305990.703 ops/s
# Warmup Iteration  29: 3271987.634 ops/s
# Warmup Iteration  30: 3303325.092 ops/s
Iteration   1: 3321788.957 ops/s
Iteration   2: 3313574.916 ops/s
Iteration   3: 3288322.563 ops/s
Iteration   4: 3258389.123 ops/s
Iteration   5: 3294582.386 ops/s
Iteration   6: 3318243.272 ops/s
Iteration   7: 3305157.478 ops/s
Iteration   8: 3301322.742 ops/s
Iteration   9: 3309353.582 ops/s
Iteration  10: 3293056.172 ops/s
Iteration  11: 3286504.448 ops/s
Iteration  12: 3300320.196 ops/s
Iteration  13: 3265100.009 ops/s
Iteration  14: 3297213.728 ops/s
Iteration  15: 3308979.215 ops/s
Iteration  16: 3298403.529 ops/s
Iteration  17: 3203505.383 ops/s
Iteration  18: 3291200.120 ops/s
Iteration  19: 3305373.413 ops/s
Iteration  20: 3285714.014 ops/s
Iteration  21: 3235285.776 ops/s
Iteration  22: 3282511.170 ops/s
Iteration  23: 3235386.515 ops/s
Iteration  24: 3293164.735 ops/s
Iteration  25: 3285500.072 ops/s
Iteration  26: 3301587.757 ops/s
Iteration  27: 3192651.647 ops/s
Iteration  28: 3302246.672 ops/s
Iteration  29: 3302852.594 ops/s
Iteration  30: 3298193.100 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_toArray":
  3285849.509 ±(99.9%) 20991.305 ops/s [Average]
  (min, avg, max) = (3192651.647, 3285849.509, 3321788.957), stdev = 31418.800
  CI (99.9%): [3264858.204, 3306840.815] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_toArray  thrpt   30  3285849.509 ± 20991.305  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1047784.036 ops/s
# Warmup Iteration   2: 2348552.107 ops/s
# Warmup Iteration   3: 2382484.572 ops/s
# Warmup Iteration   4: 1960975.878 ops/s
# Warmup Iteration   5: 2389682.052 ops/s
# Warmup Iteration   6: 2386263.430 ops/s
# Warmup Iteration   7: 2339547.587 ops/s
# Warmup Iteration   8: 2373305.287 ops/s
# Warmup Iteration   9: 2367625.908 ops/s
# Warmup Iteration  10: 2381826.455 ops/s
# Warmup Iteration  11: 2383614.364 ops/s
# Warmup Iteration  12: 2380580.945 ops/s
# Warmup Iteration  13: 2346450.552 ops/s
# Warmup Iteration  14: 2366418.229 ops/s
# Warmup Iteration  15: 2383091.692 ops/s
# Warmup Iteration  16: 2339262.789 ops/s
# Warmup Iteration  17: 2361359.156 ops/s
# Warmup Iteration  18: 2378034.500 ops/s
# Warmup Iteration  19: 2380509.887 ops/s
# Warmup Iteration  20: 2360595.338 ops/s
# Warmup Iteration  21: 2382778.174 ops/s
# Warmup Iteration  22: 2371182.002 ops/s
# Warmup Iteration  23: 2391170.405 ops/s
# Warmup Iteration  24: 2379917.221 ops/s
# Warmup Iteration  25: 2382946.859 ops/s
# Warmup Iteration  26: 2377179.009 ops/s
# Warmup Iteration  27: 2386506.656 ops/s
# Warmup Iteration  28: 2352945.875 ops/s
# Warmup Iteration  29: 2390689.028 ops/s
# Warmup Iteration  30: 2344144.045 ops/s
Iteration   1: 2399021.495 ops/s
Iteration   2: 2383973.794 ops/s
Iteration   3: 2392847.156 ops/s
Iteration   4: 2372469.732 ops/s
Iteration   5: 2396373.141 ops/s
Iteration   6: 2374756.052 ops/s
Iteration   7: 2380401.077 ops/s
Iteration   8: 2394155.856 ops/s
Iteration   9: 2380552.509 ops/s
Iteration  10: 2404316.613 ops/s
Iteration  11: 2360223.246 ops/s
Iteration  12: 2367305.884 ops/s
Iteration  13: 2370561.289 ops/s
Iteration  14: 2387860.851 ops/s
Iteration  15: 2350408.255 ops/s
Iteration  16: 2386075.411 ops/s
Iteration  17: 2385121.859 ops/s
Iteration  18: 2398188.531 ops/s
Iteration  19: 2380226.483 ops/s
Iteration  20: 2387607.342 ops/s
Iteration  21: 2382351.295 ops/s
Iteration  22: 2350161.481 ops/s
Iteration  23: 2375945.167 ops/s
Iteration  24: 2373029.581 ops/s
Iteration  25: 2363697.365 ops/s
Iteration  26: 2385735.931 ops/s
Iteration  27: 2390572.316 ops/s
Iteration  28: 2382042.366 ops/s
Iteration  29: 2390490.475 ops/s
Iteration  30: 2394947.286 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_toBag":
  2381380.661 ±(99.9%) 9091.211 ops/s [Average]
  (min, avg, max) = (2350161.481, 2381380.661, 2404316.613), stdev = 13607.298
  CI (99.9%): [2372289.450, 2390471.872] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_toBag  thrpt   30  2381380.661 ± 9091.211  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 984933.377 ops/s
# Warmup Iteration   2: 2416101.081 ops/s
# Warmup Iteration   3: 2017582.927 ops/s
# Warmup Iteration   4: 2373141.803 ops/s
# Warmup Iteration   5: 2428250.687 ops/s
# Warmup Iteration   6: 2426783.010 ops/s
# Warmup Iteration   7: 2420907.389 ops/s
# Warmup Iteration   8: 2416435.314 ops/s
# Warmup Iteration   9: 2392602.951 ops/s
# Warmup Iteration  10: 2384555.239 ops/s
# Warmup Iteration  11: 2423820.525 ops/s
# Warmup Iteration  12: 2410727.472 ops/s
# Warmup Iteration  13: 2394282.181 ops/s
# Warmup Iteration  14: 2379868.368 ops/s
# Warmup Iteration  15: 2410389.558 ops/s
# Warmup Iteration  16: 2414997.335 ops/s
# Warmup Iteration  17: 2411137.669 ops/s
# Warmup Iteration  18: 2398492.261 ops/s
# Warmup Iteration  19: 2392073.599 ops/s
# Warmup Iteration  20: 2419679.902 ops/s
# Warmup Iteration  21: 2376868.494 ops/s
# Warmup Iteration  22: 2418692.075 ops/s
# Warmup Iteration  23: 2413615.836 ops/s
# Warmup Iteration  24: 2430583.063 ops/s
# Warmup Iteration  25: 2417568.241 ops/s
# Warmup Iteration  26: 2417091.869 ops/s
# Warmup Iteration  27: 2423013.133 ops/s
# Warmup Iteration  28: 2429736.289 ops/s
# Warmup Iteration  29: 2381509.149 ops/s
# Warmup Iteration  30: 2407012.984 ops/s
Iteration   1: 2413196.444 ops/s
Iteration   2: 2383339.171 ops/s
Iteration   3: 2416759.987 ops/s
Iteration   4: 2391444.141 ops/s
Iteration   5: 2424865.710 ops/s
Iteration   6: 2429527.098 ops/s
Iteration   7: 2423073.879 ops/s
Iteration   8: 2435283.285 ops/s
Iteration   9: 2412322.969 ops/s
Iteration  10: 2388536.792 ops/s
Iteration  11: 2416055.677 ops/s
Iteration  12: 2430180.524 ops/s
Iteration  13: 2417202.841 ops/s
Iteration  14: 2416368.656 ops/s
Iteration  15: 2337079.987 ops/s
Iteration  16: 2420203.861 ops/s
Iteration  17: 2420895.361 ops/s
Iteration  18: 2399666.170 ops/s
Iteration  19: 2410105.877 ops/s
Iteration  20: 2430165.588 ops/s
Iteration  21: 2363713.340 ops/s
Iteration  22: 2431625.370 ops/s
Iteration  23: 2356199.520 ops/s
Iteration  24: 2418995.546 ops/s
Iteration  25: 2422876.481 ops/s
Iteration  26: 2414963.848 ops/s
Iteration  27: 2381018.260 ops/s
Iteration  28: 2358725.112 ops/s
Iteration  29: 2426729.843 ops/s
Iteration  30: 2408998.059 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_toList":
  2406670.647 ±(99.9%) 16998.739 ops/s [Average]
  (min, avg, max) = (2337079.987, 2406670.647, 2435283.285), stdev = 25442.914
  CI (99.9%): [2389671.908, 2423669.386] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_toList  thrpt   30  2406670.647 ± 16998.739  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1382835.551 ops/s
# Warmup Iteration   2: 3251407.607 ops/s
# Warmup Iteration   3: 3226520.376 ops/s
# Warmup Iteration   4: 2662358.329 ops/s
# Warmup Iteration   5: 3227530.616 ops/s
# Warmup Iteration   6: 3228815.323 ops/s
# Warmup Iteration   7: 3217068.157 ops/s
# Warmup Iteration   8: 3236618.215 ops/s
# Warmup Iteration   9: 3207406.967 ops/s
# Warmup Iteration  10: 3186697.856 ops/s
# Warmup Iteration  11: 3215323.417 ops/s
# Warmup Iteration  12: 3207731.517 ops/s
# Warmup Iteration  13: 3195778.968 ops/s
# Warmup Iteration  14: 3214207.645 ops/s
# Warmup Iteration  15: 3229067.513 ops/s
# Warmup Iteration  16: 3230279.738 ops/s
# Warmup Iteration  17: 3274695.648 ops/s
# Warmup Iteration  18: 3283312.372 ops/s
# Warmup Iteration  19: 3269646.585 ops/s
# Warmup Iteration  20: 3254041.282 ops/s
# Warmup Iteration  21: 3292931.192 ops/s
# Warmup Iteration  22: 3237968.789 ops/s
# Warmup Iteration  23: 3273795.745 ops/s
# Warmup Iteration  24: 3270200.813 ops/s
# Warmup Iteration  25: 3250109.290 ops/s
# Warmup Iteration  26: 3217425.253 ops/s
# Warmup Iteration  27: 3273522.918 ops/s
# Warmup Iteration  28: 3250326.727 ops/s
# Warmup Iteration  29: 3241110.554 ops/s
# Warmup Iteration  30: 3265153.599 ops/s
Iteration   1: 3249563.858 ops/s
Iteration   2: 3290240.121 ops/s
Iteration   3: 3270847.106 ops/s
Iteration   4: 3266855.943 ops/s
Iteration   5: 3260837.168 ops/s
Iteration   6: 3277956.666 ops/s
Iteration   7: 3229083.339 ops/s
Iteration   8: 3224939.546 ops/s
Iteration   9: 3272801.963 ops/s
Iteration  10: 3266068.261 ops/s
Iteration  11: 3254202.575 ops/s
Iteration  12: 3276535.027 ops/s
Iteration  13: 3265414.895 ops/s
Iteration  14: 3271407.701 ops/s
Iteration  15: 3281038.705 ops/s
Iteration  16: 3275848.252 ops/s
Iteration  17: 3208482.736 ops/s
Iteration  18: 3274140.027 ops/s
Iteration  19: 3278765.075 ops/s
Iteration  20: 3284698.175 ops/s
Iteration  21: 3271941.175 ops/s
Iteration  22: 3285475.673 ops/s
Iteration  23: 3264131.564 ops/s
Iteration  24: 3216476.991 ops/s
Iteration  25: 3279572.644 ops/s
Iteration  26: 3277382.508 ops/s
Iteration  27: 3274635.280 ops/s
Iteration  28: 3258221.852 ops/s
Iteration  29: 3212645.756 ops/s
Iteration  30: 3283534.716 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_toSet":
  3263458.177 ±(99.9%) 15152.447 ops/s [Average]
  (min, avg, max) = (3208482.736, 3263458.177, 3290240.121), stdev = 22679.471
  CI (99.9%): [3248305.730, 3278610.623] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_toSet  thrpt   30  3263458.177 ± 15152.447  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 687015.620 ops/s
# Warmup Iteration   2: 769952.083 ops/s
# Warmup Iteration   3: 989783.781 ops/s
# Warmup Iteration   4: 999252.714 ops/s
# Warmup Iteration   5: 992026.561 ops/s
# Warmup Iteration   6: 987503.933 ops/s
# Warmup Iteration   7: 981087.170 ops/s
# Warmup Iteration   8: 992016.366 ops/s
# Warmup Iteration   9: 993136.595 ops/s
# Warmup Iteration  10: 823130.936 ops/s
# Warmup Iteration  11: 993832.543 ops/s
# Warmup Iteration  12: 991442.584 ops/s
# Warmup Iteration  13: 998534.088 ops/s
# Warmup Iteration  14: 998127.224 ops/s
# Warmup Iteration  15: 991796.607 ops/s
# Warmup Iteration  16: 989986.476 ops/s
# Warmup Iteration  17: 1061116.722 ops/s
# Warmup Iteration  18: 1055284.042 ops/s
# Warmup Iteration  19: 1065962.275 ops/s
# Warmup Iteration  20: 1037553.767 ops/s
# Warmup Iteration  21: 1052971.166 ops/s
# Warmup Iteration  22: 1065039.154 ops/s
# Warmup Iteration  23: 1066428.547 ops/s
# Warmup Iteration  24: 1061026.615 ops/s
# Warmup Iteration  25: 1048677.293 ops/s
# Warmup Iteration  26: 1064893.616 ops/s
# Warmup Iteration  27: 1061607.620 ops/s
# Warmup Iteration  28: 1065599.970 ops/s
# Warmup Iteration  29: 1042495.153 ops/s
# Warmup Iteration  30: 1062139.410 ops/s
Iteration   1: 1063889.652 ops/s
Iteration   2: 1049289.915 ops/s
Iteration   3: 1040875.067 ops/s
Iteration   4: 1052632.467 ops/s
Iteration   5: 1042851.241 ops/s
Iteration   6: 1055146.485 ops/s
Iteration   7: 1037900.271 ops/s
Iteration   8: 1057195.141 ops/s
Iteration   9: 1069043.567 ops/s
Iteration  10: 1064285.600 ops/s
Iteration  11: 1040748.405 ops/s
Iteration  12: 1067941.951 ops/s
Iteration  13: 1058682.603 ops/s
Iteration  14: 1057237.981 ops/s
Iteration  15: 1061266.488 ops/s
Iteration  16: 1068583.954 ops/s
Iteration  17: 1058589.165 ops/s
Iteration  18: 1040084.782 ops/s
Iteration  19: 1030799.194 ops/s
Iteration  20: 1064507.816 ops/s
Iteration  21: 1062482.624 ops/s
Iteration  22: 1056580.407 ops/s
Iteration  23: 1056127.854 ops/s
Iteration  24: 1069030.154 ops/s
Iteration  25: 1055179.234 ops/s
Iteration  26: 1058041.491 ops/s
Iteration  27: 1064712.301 ops/s
Iteration  28: 1055810.550 ops/s
Iteration  29: 1068213.946 ops/s
Iteration  30: 1064674.120 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_with":
  1056413.481 ±(99.9%) 6950.487 ops/s [Average]
  (min, avg, max) = (1030799.194, 1056413.481, 1069043.567), stdev = 10403.162
  CI (99.9%): [1049462.994, 1063363.968] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_with  thrpt   30  1056413.481 ± 6950.487  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 681915.695 ops/s
# Warmup Iteration   2: 771015.683 ops/s
# Warmup Iteration   3: 991892.524 ops/s
# Warmup Iteration   4: 1005789.727 ops/s
# Warmup Iteration   5: 979600.606 ops/s
# Warmup Iteration   6: 1002401.733 ops/s
# Warmup Iteration   7: 995794.111 ops/s
# Warmup Iteration   8: 990240.141 ops/s
# Warmup Iteration   9: 1000612.641 ops/s
# Warmup Iteration  10: 833254.513 ops/s
# Warmup Iteration  11: 1001037.455 ops/s
# Warmup Iteration  12: 988606.368 ops/s
# Warmup Iteration  13: 999408.850 ops/s
# Warmup Iteration  14: 989533.039 ops/s
# Warmup Iteration  15: 999002.305 ops/s
# Warmup Iteration  16: 1002617.956 ops/s
# Warmup Iteration  17: 1047777.977 ops/s
# Warmup Iteration  18: 1063895.738 ops/s
# Warmup Iteration  19: 1066512.680 ops/s
# Warmup Iteration  20: 1046519.600 ops/s
# Warmup Iteration  21: 1063600.575 ops/s
# Warmup Iteration  22: 1058079.731 ops/s
# Warmup Iteration  23: 1063507.386 ops/s
# Warmup Iteration  24: 1057925.780 ops/s
# Warmup Iteration  25: 1055298.571 ops/s
# Warmup Iteration  26: 1048307.565 ops/s
# Warmup Iteration  27: 1064676.442 ops/s
# Warmup Iteration  28: 1065232.124 ops/s
# Warmup Iteration  29: 1060625.649 ops/s
# Warmup Iteration  30: 1062988.133 ops/s
Iteration   1: 1063358.497 ops/s
Iteration   2: 1060070.903 ops/s
Iteration   3: 1073106.992 ops/s
Iteration   4: 1067653.009 ops/s
Iteration   5: 1062371.321 ops/s
Iteration   6: 1070140.480 ops/s
Iteration   7: 1068901.649 ops/s
Iteration   8: 1073318.691 ops/s
Iteration   9: 1065481.491 ops/s
Iteration  10: 1038253.719 ops/s
Iteration  11: 1047328.753 ops/s
Iteration  12: 1062946.554 ops/s
Iteration  13: 1046718.078 ops/s
Iteration  14: 1059330.792 ops/s
Iteration  15: 1065848.042 ops/s
Iteration  16: 1046898.802 ops/s
Iteration  17: 1056251.728 ops/s
Iteration  18: 1039896.798 ops/s
Iteration  19: 1064637.715 ops/s
Iteration  20: 1062253.403 ops/s
Iteration  21: 1056369.744 ops/s
Iteration  22: 1047302.668 ops/s
Iteration  23: 1067625.457 ops/s
Iteration  24: 1043032.893 ops/s
Iteration  25: 1049733.900 ops/s
Iteration  26: 1060524.234 ops/s
Iteration  27: 1062657.429 ops/s
Iteration  28: 1062945.485 ops/s
Iteration  29: 1053204.860 ops/s
Iteration  30: 1042988.833 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_withAll":
  1058038.431 ±(99.9%) 6759.400 ops/s [Average]
  (min, avg, max) = (1038253.719, 1058038.431, 1073318.691), stdev = 10117.153
  CI (99.9%): [1051279.031, 1064797.831] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_withAll  thrpt   30  1058038.431 ± 6759.400  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 681768.691 ops/s
# Warmup Iteration   2: 766944.415 ops/s
# Warmup Iteration   3: 985254.514 ops/s
# Warmup Iteration   4: 983590.154 ops/s
# Warmup Iteration   5: 978119.986 ops/s
# Warmup Iteration   6: 987374.668 ops/s
# Warmup Iteration   7: 989203.955 ops/s
# Warmup Iteration   8: 986777.755 ops/s
# Warmup Iteration   9: 985717.209 ops/s
# Warmup Iteration  10: 809247.747 ops/s
# Warmup Iteration  11: 983130.239 ops/s
# Warmup Iteration  12: 978345.792 ops/s
# Warmup Iteration  13: 979811.788 ops/s
# Warmup Iteration  14: 986550.779 ops/s
# Warmup Iteration  15: 978523.383 ops/s
# Warmup Iteration  16: 970995.646 ops/s
# Warmup Iteration  17: 1060124.807 ops/s
# Warmup Iteration  18: 1046034.530 ops/s
# Warmup Iteration  19: 1055252.813 ops/s
# Warmup Iteration  20: 1055377.538 ops/s
# Warmup Iteration  21: 1054127.459 ops/s
# Warmup Iteration  22: 1053260.821 ops/s
# Warmup Iteration  23: 1050185.428 ops/s
# Warmup Iteration  24: 1054508.608 ops/s
# Warmup Iteration  25: 1054613.773 ops/s
# Warmup Iteration  26: 1054195.459 ops/s
# Warmup Iteration  27: 1044421.949 ops/s
# Warmup Iteration  28: 1057586.086 ops/s
# Warmup Iteration  29: 1055085.089 ops/s
# Warmup Iteration  30: 1057203.501 ops/s
Iteration   1: 1037427.198 ops/s
Iteration   2: 1057250.872 ops/s
Iteration   3: 1056380.142 ops/s
Iteration   4: 1051806.193 ops/s
Iteration   5: 1057884.163 ops/s
Iteration   6: 1050937.410 ops/s
Iteration   7: 1055958.257 ops/s
Iteration   8: 1056721.108 ops/s
Iteration   9: 1057250.389 ops/s
Iteration  10: 1059152.223 ops/s
Iteration  11: 1048982.182 ops/s
Iteration  12: 1043762.590 ops/s
Iteration  13: 1043538.772 ops/s
Iteration  14: 1041637.651 ops/s
Iteration  15: 1055371.412 ops/s
Iteration  16: 1060470.285 ops/s
Iteration  17: 1049169.153 ops/s
Iteration  18: 1052796.021 ops/s
Iteration  19: 1058470.652 ops/s
Iteration  20: 1056205.695 ops/s
Iteration  21: 1034201.892 ops/s
Iteration  22: 1045283.408 ops/s
Iteration  23: 1053223.992 ops/s
Iteration  24: 1055824.382 ops/s
Iteration  25: 1056116.165 ops/s
Iteration  26: 1048631.768 ops/s
Iteration  27: 1055297.455 ops/s
Iteration  28: 1053064.023 ops/s
Iteration  29: 1037716.006 ops/s
Iteration  30: 1057438.399 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_without":
  1051598.995 ±(99.9%) 4750.148 ops/s [Average]
  (min, avg, max) = (1034201.892, 1051598.995, 1060470.285), stdev = 7109.799
  CI (99.9%): [1046848.847, 1056349.143] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_without  thrpt   30  1051598.995 ± 4750.148  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 674158.585 ops/s
# Warmup Iteration   2: 758355.154 ops/s
# Warmup Iteration   3: 1000183.656 ops/s
# Warmup Iteration   4: 997198.869 ops/s
# Warmup Iteration   5: 995878.857 ops/s
# Warmup Iteration   6: 984975.158 ops/s
# Warmup Iteration   7: 999555.652 ops/s
# Warmup Iteration   8: 995631.961 ops/s
# Warmup Iteration   9: 999808.299 ops/s
# Warmup Iteration  10: 825578.178 ops/s
# Warmup Iteration  11: 988044.304 ops/s
# Warmup Iteration  12: 998174.927 ops/s
# Warmup Iteration  13: 981367.685 ops/s
# Warmup Iteration  14: 990968.178 ops/s
# Warmup Iteration  15: 992768.540 ops/s
# Warmup Iteration  16: 988304.180 ops/s
# Warmup Iteration  17: 1037466.834 ops/s
# Warmup Iteration  18: 1045336.344 ops/s
# Warmup Iteration  19: 1042317.057 ops/s
# Warmup Iteration  20: 1058957.809 ops/s
# Warmup Iteration  21: 1053209.491 ops/s
# Warmup Iteration  22: 1051116.021 ops/s
# Warmup Iteration  23: 1055770.021 ops/s
# Warmup Iteration  24: 1058616.882 ops/s
# Warmup Iteration  25: 1050903.557 ops/s
# Warmup Iteration  26: 1044726.718 ops/s
# Warmup Iteration  27: 1057396.186 ops/s
# Warmup Iteration  28: 1037680.335 ops/s
# Warmup Iteration  29: 1044288.045 ops/s
# Warmup Iteration  30: 1051213.752 ops/s
Iteration   1: 1055226.323 ops/s
Iteration   2: 1059855.315 ops/s
Iteration   3: 1052620.227 ops/s
Iteration   4: 1045732.178 ops/s
Iteration   5: 1054591.949 ops/s
Iteration   6: 1058624.041 ops/s
Iteration   7: 1043553.382 ops/s
Iteration   8: 1023500.207 ops/s
Iteration   9: 1042345.599 ops/s
Iteration  10: 1041423.727 ops/s
Iteration  11: 1057679.956 ops/s
Iteration  12: 1022632.429 ops/s
Iteration  13: 1057307.779 ops/s
Iteration  14: 1054425.551 ops/s
Iteration  15: 1054031.931 ops/s
Iteration  16: 1063086.781 ops/s
Iteration  17: 1049179.273 ops/s
Iteration  18: 1056310.768 ops/s
Iteration  19: 1055990.977 ops/s
Iteration  20: 1056452.512 ops/s
Iteration  21: 1057000.855 ops/s
Iteration  22: 1057193.989 ops/s
Iteration  23: 1052944.247 ops/s
Iteration  24: 1026393.736 ops/s
Iteration  25: 1050005.727 ops/s
Iteration  26: 1057869.766 ops/s
Iteration  27: 1051109.266 ops/s
Iteration  28: 1059708.000 ops/s
Iteration  29: 1056321.867 ops/s
Iteration  30: 1053001.651 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.DoubleBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll":
  1050870.667 ±(99.9%) 6971.723 ops/s [Average]
  (min, avg, max) = (1022632.429, 1050870.667, 1063086.781), stdev = 10434.948
  CI (99.9%): [1043898.944, 1057842.390] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
DoubleBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll  thrpt   30  1050870.667 ± 6971.723  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 701605.784 ops/s
# Warmup Iteration   2: 762382.942 ops/s
# Warmup Iteration   3: 993254.119 ops/s
# Warmup Iteration   4: 998694.334 ops/s
# Warmup Iteration   5: 998406.677 ops/s
# Warmup Iteration   6: 998107.479 ops/s
# Warmup Iteration   7: 997304.753 ops/s
# Warmup Iteration   8: 1003149.423 ops/s
# Warmup Iteration   9: 1002980.056 ops/s
# Warmup Iteration  10: 850043.823 ops/s
# Warmup Iteration  11: 983506.953 ops/s
# Warmup Iteration  12: 999751.078 ops/s
# Warmup Iteration  13: 1000437.895 ops/s
# Warmup Iteration  14: 996548.155 ops/s
# Warmup Iteration  15: 1000596.843 ops/s
# Warmup Iteration  16: 1004463.496 ops/s
# Warmup Iteration  17: 1053815.810 ops/s
# Warmup Iteration  18: 1061410.443 ops/s
# Warmup Iteration  19: 1071506.777 ops/s
# Warmup Iteration  20: 1069528.691 ops/s
# Warmup Iteration  21: 1065273.124 ops/s
# Warmup Iteration  22: 1071507.803 ops/s
# Warmup Iteration  23: 1071624.597 ops/s
# Warmup Iteration  24: 1075027.003 ops/s
# Warmup Iteration  25: 1067994.255 ops/s
# Warmup Iteration  26: 1069807.397 ops/s
# Warmup Iteration  27: 1066493.332 ops/s
# Warmup Iteration  28: 1073992.563 ops/s
# Warmup Iteration  29: 1061055.655 ops/s
# Warmup Iteration  30: 1068201.759 ops/s
Iteration   1: 1072684.032 ops/s
Iteration   2: 1069960.291 ops/s
Iteration   3: 1068936.158 ops/s
Iteration   4: 1070255.078 ops/s
Iteration   5: 1070215.601 ops/s
Iteration   6: 1071186.809 ops/s
Iteration   7: 1070179.688 ops/s
Iteration   8: 1069957.924 ops/s
Iteration   9: 1057875.916 ops/s
Iteration  10: 1071119.306 ops/s
Iteration  11: 1059848.291 ops/s
Iteration  12: 1059121.611 ops/s
Iteration  13: 1060331.582 ops/s
Iteration  14: 1064305.285 ops/s
Iteration  15: 1056584.028 ops/s
Iteration  16: 1071455.807 ops/s
Iteration  17: 1073419.744 ops/s
Iteration  18: 1067257.660 ops/s
Iteration  19: 1060417.799 ops/s
Iteration  20: 1063585.166 ops/s
Iteration  21: 1065624.222 ops/s
Iteration  22: 1055823.556 ops/s
Iteration  23: 1074962.146 ops/s
Iteration  24: 1051007.599 ops/s
Iteration  25: 1069313.469 ops/s
Iteration  26: 1068605.061 ops/s
Iteration  27: 1063978.809 ops/s
Iteration  28: 1067677.041 ops/s
Iteration  29: 1064098.782 ops/s
Iteration  30: 1074358.691 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_add":
  1066138.238 ±(99.9%) 4106.700 ops/s [Average]
  (min, avg, max) = (1051007.599, 1066138.238, 1074962.146), stdev = 6146.716
  CI (99.9%): [1062031.538, 1070244.939] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_add  thrpt   30  1066138.238 ± 4106.700  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 701393.086 ops/s
# Warmup Iteration   2: 759113.151 ops/s
# Warmup Iteration   3: 1004518.490 ops/s
# Warmup Iteration   4: 1000328.114 ops/s
# Warmup Iteration   5: 1000993.595 ops/s
# Warmup Iteration   6: 996034.382 ops/s
# Warmup Iteration   7: 1000847.849 ops/s
# Warmup Iteration   8: 994577.554 ops/s
# Warmup Iteration   9: 995754.920 ops/s
# Warmup Iteration  10: 844296.223 ops/s
# Warmup Iteration  11: 982227.383 ops/s
# Warmup Iteration  12: 1000789.650 ops/s
# Warmup Iteration  13: 1001481.332 ops/s
# Warmup Iteration  14: 1008454.420 ops/s
# Warmup Iteration  15: 1000522.354 ops/s
# Warmup Iteration  16: 998822.022 ops/s
# Warmup Iteration  17: 1043929.388 ops/s
# Warmup Iteration  18: 1059659.071 ops/s
# Warmup Iteration  19: 1059311.938 ops/s
# Warmup Iteration  20: 1061050.121 ops/s
# Warmup Iteration  21: 1057863.650 ops/s
# Warmup Iteration  22: 1063407.842 ops/s
# Warmup Iteration  23: 1059318.142 ops/s
# Warmup Iteration  24: 1059489.156 ops/s
# Warmup Iteration  25: 1060994.746 ops/s
# Warmup Iteration  26: 1055583.531 ops/s
# Warmup Iteration  27: 1052635.259 ops/s
# Warmup Iteration  28: 1053606.980 ops/s
# Warmup Iteration  29: 1059065.211 ops/s
# Warmup Iteration  30: 1061162.106 ops/s
Iteration   1: 1048076.781 ops/s
Iteration   2: 1058612.276 ops/s
Iteration   3: 1060656.911 ops/s
Iteration   4: 1057521.936 ops/s
Iteration   5: 1061502.896 ops/s
Iteration   6: 1057402.122 ops/s
Iteration   7: 1063411.018 ops/s
Iteration   8: 1059000.004 ops/s
Iteration   9: 1060797.364 ops/s
Iteration  10: 1031307.333 ops/s
Iteration  11: 1061051.254 ops/s
Iteration  12: 1040351.044 ops/s
Iteration  13: 1053304.382 ops/s
Iteration  14: 1055039.085 ops/s
Iteration  15: 1061267.379 ops/s
Iteration  16: 1059280.185 ops/s
Iteration  17: 1052715.519 ops/s
Iteration  18: 1066310.347 ops/s
Iteration  19: 1055792.010 ops/s
Iteration  20: 1058150.439 ops/s
Iteration  21: 1057033.061 ops/s
Iteration  22: 1064846.992 ops/s
Iteration  23: 1053727.408 ops/s
Iteration  24: 1052853.473 ops/s
Iteration  25: 1057456.484 ops/s
Iteration  26: 1050851.571 ops/s
Iteration  27: 1056619.818 ops/s
Iteration  28: 1058059.206 ops/s
Iteration  29: 1054966.189 ops/s
Iteration  30: 1062140.022 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray":
  1056336.817 ±(99.9%) 4682.375 ops/s [Average]
  (min, avg, max) = (1031307.333, 1056336.817, 1066310.347), stdev = 7008.358
  CI (99.9%): [1051654.442, 1061019.192] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray  thrpt   30  1056336.817 ± 4682.375  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 685075.518 ops/s
# Warmup Iteration   2: 755493.098 ops/s
# Warmup Iteration   3: 996094.212 ops/s
# Warmup Iteration   4: 993046.964 ops/s
# Warmup Iteration   5: 997292.896 ops/s
# Warmup Iteration   6: 997999.656 ops/s
# Warmup Iteration   7: 997244.435 ops/s
# Warmup Iteration   8: 985936.472 ops/s
# Warmup Iteration   9: 997052.152 ops/s
# Warmup Iteration  10: 859273.609 ops/s
# Warmup Iteration  11: 957033.739 ops/s
# Warmup Iteration  12: 997442.604 ops/s
# Warmup Iteration  13: 998542.698 ops/s
# Warmup Iteration  14: 996817.795 ops/s
# Warmup Iteration  15: 997925.189 ops/s
# Warmup Iteration  16: 995293.654 ops/s
# Warmup Iteration  17: 1062121.295 ops/s
# Warmup Iteration  18: 1046812.720 ops/s
# Warmup Iteration  19: 1057929.708 ops/s
# Warmup Iteration  20: 1047807.159 ops/s
# Warmup Iteration  21: 1061306.603 ops/s
# Warmup Iteration  22: 1054583.333 ops/s
# Warmup Iteration  23: 1056782.186 ops/s
# Warmup Iteration  24: 1046717.444 ops/s
# Warmup Iteration  25: 1054864.389 ops/s
# Warmup Iteration  26: 1045182.839 ops/s
# Warmup Iteration  27: 1045424.156 ops/s
# Warmup Iteration  28: 1057389.343 ops/s
# Warmup Iteration  29: 1058430.470 ops/s
# Warmup Iteration  30: 1063182.640 ops/s
Iteration   1: 1044259.383 ops/s
Iteration   2: 1050201.501 ops/s
Iteration   3: 1060016.008 ops/s
Iteration   4: 1057277.237 ops/s
Iteration   5: 1034867.305 ops/s
Iteration   6: 1038090.573 ops/s
Iteration   7: 1051253.545 ops/s
Iteration   8: 1060053.848 ops/s
Iteration   9: 1060148.366 ops/s
Iteration  10: 1037019.799 ops/s
Iteration  11: 1061322.382 ops/s
Iteration  12: 1060208.005 ops/s
Iteration  13: 1060307.713 ops/s
Iteration  14: 1059283.148 ops/s
Iteration  15: 1047828.982 ops/s
Iteration  16: 1041388.651 ops/s
Iteration  17: 1052622.233 ops/s
Iteration  18: 1056679.085 ops/s
Iteration  19: 1053504.726 ops/s
Iteration  20: 1046606.995 ops/s
Iteration  21: 1059900.957 ops/s
Iteration  22: 1052253.365 ops/s
Iteration  23: 1041422.003 ops/s
Iteration  24: 1054450.995 ops/s
Iteration  25: 1059244.964 ops/s
Iteration  26: 1052405.784 ops/s
Iteration  27: 1064392.964 ops/s
Iteration  28: 1051045.447 ops/s
Iteration  29: 1056128.918 ops/s
Iteration  30: 1060922.203 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable":
  1052836.903 ±(99.9%) 5438.589 ops/s [Average]
  (min, avg, max) = (1034867.305, 1052836.903, 1064392.964), stdev = 8140.224
  CI (99.9%): [1047398.314, 1058275.492] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable  thrpt   30  1052836.903 ± 5438.589  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1300072.357 ops/s
# Warmup Iteration   2: 2772375.162 ops/s
# Warmup Iteration   3: 2359314.821 ops/s
# Warmup Iteration   4: 2788370.108 ops/s
# Warmup Iteration   5: 2784014.279 ops/s
# Warmup Iteration   6: 2819042.929 ops/s
# Warmup Iteration   7: 2839328.196 ops/s
# Warmup Iteration   8: 2769136.105 ops/s
# Warmup Iteration   9: 2824118.587 ops/s
# Warmup Iteration  10: 2827923.646 ops/s
# Warmup Iteration  11: 2791664.430 ops/s
# Warmup Iteration  12: 2804386.203 ops/s
# Warmup Iteration  13: 2839274.328 ops/s
# Warmup Iteration  14: 2801357.720 ops/s
# Warmup Iteration  15: 2798429.211 ops/s
# Warmup Iteration  16: 2843753.126 ops/s
# Warmup Iteration  17: 2804969.948 ops/s
# Warmup Iteration  18: 2828432.990 ops/s
# Warmup Iteration  19: 2838861.035 ops/s
# Warmup Iteration  20: 2800038.274 ops/s
# Warmup Iteration  21: 2817387.832 ops/s
# Warmup Iteration  22: 2839426.762 ops/s
# Warmup Iteration  23: 2807709.217 ops/s
# Warmup Iteration  24: 2825629.858 ops/s
# Warmup Iteration  25: 2808276.212 ops/s
# Warmup Iteration  26: 2813062.218 ops/s
# Warmup Iteration  27: 2831488.571 ops/s
# Warmup Iteration  28: 2789312.202 ops/s
# Warmup Iteration  29: 2791617.708 ops/s
# Warmup Iteration  30: 2798797.826 ops/s
Iteration   1: 2843989.414 ops/s
Iteration   2: 2832122.912 ops/s
Iteration   3: 2790162.813 ops/s
Iteration   4: 2777336.305 ops/s
Iteration   5: 2803592.346 ops/s
Iteration   6: 2823618.816 ops/s
Iteration   7: 2827692.149 ops/s
Iteration   8: 2842556.009 ops/s
Iteration   9: 2790084.000 ops/s
Iteration  10: 2770609.793 ops/s
Iteration  11: 2832566.931 ops/s
Iteration  12: 2825897.927 ops/s
Iteration  13: 2842460.394 ops/s
Iteration  14: 2778293.655 ops/s
Iteration  15: 2811547.924 ops/s
Iteration  16: 2837526.713 ops/s
Iteration  17: 2827594.599 ops/s
Iteration  18: 2822034.720 ops/s
Iteration  19: 2817585.721 ops/s
Iteration  20: 2817736.792 ops/s
Iteration  21: 2830001.069 ops/s
Iteration  22: 2838885.150 ops/s
Iteration  23: 2819039.838 ops/s
Iteration  24: 2822094.617 ops/s
Iteration  25: 2835426.230 ops/s
Iteration  26: 2787955.565 ops/s
Iteration  27: 2842831.242 ops/s
Iteration  28: 2803664.032 ops/s
Iteration  29: 2845711.764 ops/s
Iteration  30: 2826784.072 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy":
  2818913.450 ±(99.9%) 14517.319 ops/s [Average]
  (min, avg, max) = (2770609.793, 2818913.450, 2845711.764), stdev = 21728.841
  CI (99.9%): [2804396.132, 2833430.769] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy  thrpt   30  2818913.450 ± 14517.319  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1528648.575 ops/s
# Warmup Iteration   2: 3198361.446 ops/s
# Warmup Iteration   3: 2684289.890 ops/s
# Warmup Iteration   4: 3183235.775 ops/s
# Warmup Iteration   5: 3206524.463 ops/s
# Warmup Iteration   6: 3201488.047 ops/s
# Warmup Iteration   7: 3147225.092 ops/s
# Warmup Iteration   8: 3203406.288 ops/s
# Warmup Iteration   9: 3201761.204 ops/s
# Warmup Iteration  10: 3201353.750 ops/s
# Warmup Iteration  11: 3212983.569 ops/s
# Warmup Iteration  12: 3210305.932 ops/s
# Warmup Iteration  13: 3201871.386 ops/s
# Warmup Iteration  14: 3198913.127 ops/s
# Warmup Iteration  15: 3199213.154 ops/s
# Warmup Iteration  16: 3193377.116 ops/s
# Warmup Iteration  17: 3213521.521 ops/s
# Warmup Iteration  18: 3194874.529 ops/s
# Warmup Iteration  19: 3210840.877 ops/s
# Warmup Iteration  20: 3186131.764 ops/s
# Warmup Iteration  21: 3209771.393 ops/s
# Warmup Iteration  22: 3146677.968 ops/s
# Warmup Iteration  23: 3195686.155 ops/s
# Warmup Iteration  24: 3207955.718 ops/s
# Warmup Iteration  25: 3196390.880 ops/s
# Warmup Iteration  26: 3162304.530 ops/s
# Warmup Iteration  27: 3158166.172 ops/s
# Warmup Iteration  28: 3214425.566 ops/s
# Warmup Iteration  29: 3225894.460 ops/s
# Warmup Iteration  30: 3208383.499 ops/s
Iteration   1: 3127586.253 ops/s
Iteration   2: 3209500.021 ops/s
Iteration   3: 3139908.362 ops/s
Iteration   4: 3178776.972 ops/s
Iteration   5: 3161634.422 ops/s
Iteration   6: 3206739.687 ops/s
Iteration   7: 3210863.602 ops/s
Iteration   8: 3216996.354 ops/s
Iteration   9: 3186369.904 ops/s
Iteration  10: 3208444.821 ops/s
Iteration  11: 3231387.619 ops/s
Iteration  12: 3204674.913 ops/s
Iteration  13: 3209872.023 ops/s
Iteration  14: 3166601.729 ops/s
Iteration  15: 3225066.215 ops/s
Iteration  16: 3139756.658 ops/s
Iteration  17: 3221666.406 ops/s
Iteration  18: 3172387.629 ops/s
Iteration  19: 3190253.337 ops/s
Iteration  20: 3200924.567 ops/s
Iteration  21: 3219145.305 ops/s
Iteration  22: 3185994.625 ops/s
Iteration  23: 3179893.769 ops/s
Iteration  24: 3160348.747 ops/s
Iteration  25: 3102747.495 ops/s
Iteration  26: 3180864.839 ops/s
Iteration  27: 3197818.698 ops/s
Iteration  28: 3204147.622 ops/s
Iteration  29: 3192010.590 ops/s
Iteration  30: 3197547.749 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy":
  3187664.364 ±(99.9%) 20488.515 ops/s [Average]
  (min, avg, max) = (3102747.495, 3187664.364, 3231387.619), stdev = 30666.247
  CI (99.9%): [3167175.849, 3208152.880] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy  thrpt   30  3187664.364 ± 20488.515  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 673710.830 ops/s
# Warmup Iteration   2: 1518399.305 ops/s
# Warmup Iteration   3: 1513270.959 ops/s
# Warmup Iteration   4: 1242032.894 ops/s
# Warmup Iteration   5: 1503487.351 ops/s
# Warmup Iteration   6: 1510004.785 ops/s
# Warmup Iteration   7: 1512596.769 ops/s
# Warmup Iteration   8: 1504855.048 ops/s
# Warmup Iteration   9: 1501987.366 ops/s
# Warmup Iteration  10: 1496349.616 ops/s
# Warmup Iteration  11: 1507495.488 ops/s
# Warmup Iteration  12: 1504326.135 ops/s
# Warmup Iteration  13: 1503862.917 ops/s
# Warmup Iteration  14: 1498288.612 ops/s
# Warmup Iteration  15: 1499524.465 ops/s
# Warmup Iteration  16: 1513939.288 ops/s
# Warmup Iteration  17: 1499897.112 ops/s
# Warmup Iteration  18: 1500417.303 ops/s
# Warmup Iteration  19: 1488263.754 ops/s
# Warmup Iteration  20: 1533511.778 ops/s
# Warmup Iteration  21: 1511039.061 ops/s
# Warmup Iteration  22: 1491634.039 ops/s
# Warmup Iteration  23: 1513013.772 ops/s
# Warmup Iteration  24: 1510005.366 ops/s
# Warmup Iteration  25: 1518255.267 ops/s
# Warmup Iteration  26: 1511998.616 ops/s
# Warmup Iteration  27: 1513904.699 ops/s
# Warmup Iteration  28: 1525682.429 ops/s
# Warmup Iteration  29: 1514553.234 ops/s
# Warmup Iteration  30: 1512749.763 ops/s
Iteration   1: 1479167.108 ops/s
Iteration   2: 1519272.151 ops/s
Iteration   3: 1513545.867 ops/s
Iteration   4: 1538792.028 ops/s
Iteration   5: 1489796.225 ops/s
Iteration   6: 1502066.402 ops/s
Iteration   7: 1521868.136 ops/s
Iteration   8: 1490969.208 ops/s
Iteration   9: 1529990.325 ops/s
Iteration  10: 1501910.238 ops/s
Iteration  11: 1522170.020 ops/s
Iteration  12: 1511200.540 ops/s
Iteration  13: 1491383.950 ops/s
Iteration  14: 1512741.129 ops/s
Iteration  15: 1514676.588 ops/s
Iteration  16: 1520692.264 ops/s
Iteration  17: 1491317.127 ops/s
Iteration  18: 1492176.416 ops/s
Iteration  19: 1493137.289 ops/s
Iteration  20: 1483375.344 ops/s
Iteration  21: 1512420.448 ops/s
Iteration  22: 1485889.494 ops/s
Iteration  23: 1496963.934 ops/s
Iteration  24: 1484327.691 ops/s
Iteration  25: 1499237.813 ops/s
Iteration  26: 1504494.681 ops/s
Iteration  27: 1516010.450 ops/s
Iteration  28: 1503841.345 ops/s
Iteration  29: 1529374.264 ops/s
Iteration  30: 1508833.511 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_appendString":
  1505388.066 ±(99.9%) 10374.256 ops/s [Average]
  (min, avg, max) = (1479167.108, 1505388.066, 1538792.028), stdev = 15527.699
  CI (99.9%): [1495013.810, 1515762.322] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_appendString  thrpt   30  1505388.066 ± 10374.256  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3823299.853 ops/s
# Warmup Iteration   2: 6917713.738 ops/s
# Warmup Iteration   3: 7635921.600 ops/s
# Warmup Iteration   4: 7641608.690 ops/s
# Warmup Iteration   5: 6315207.121 ops/s
# Warmup Iteration   6: 7581976.895 ops/s
# Warmup Iteration   7: 7652848.554 ops/s
# Warmup Iteration   8: 7588040.795 ops/s
# Warmup Iteration   9: 7655501.512 ops/s
# Warmup Iteration  10: 7491090.155 ops/s
# Warmup Iteration  11: 7618243.245 ops/s
# Warmup Iteration  12: 7598928.894 ops/s
# Warmup Iteration  13: 7574788.990 ops/s
# Warmup Iteration  14: 7638978.553 ops/s
# Warmup Iteration  15: 7595772.809 ops/s
# Warmup Iteration  16: 7608406.212 ops/s
# Warmup Iteration  17: 7577333.558 ops/s
# Warmup Iteration  18: 7628575.214 ops/s
# Warmup Iteration  19: 7531163.291 ops/s
# Warmup Iteration  20: 7638029.751 ops/s
# Warmup Iteration  21: 7595266.096 ops/s
# Warmup Iteration  22: 7641700.288 ops/s
# Warmup Iteration  23: 7632516.967 ops/s
# Warmup Iteration  24: 7578657.660 ops/s
# Warmup Iteration  25: 7548129.187 ops/s
# Warmup Iteration  26: 7619721.579 ops/s
# Warmup Iteration  27: 7619374.378 ops/s
# Warmup Iteration  28: 7636117.981 ops/s
# Warmup Iteration  29: 7650455.115 ops/s
# Warmup Iteration  30: 7662858.325 ops/s
Iteration   1: 7662226.213 ops/s
Iteration   2: 7644745.170 ops/s
Iteration   3: 7629591.322 ops/s
Iteration   4: 7637256.464 ops/s
Iteration   5: 7578441.097 ops/s
Iteration   6: 7638707.773 ops/s
Iteration   7: 7646044.605 ops/s
Iteration   8: 7538587.826 ops/s
Iteration   9: 7639916.762 ops/s
Iteration  10: 7628492.078 ops/s
Iteration  11: 7615607.276 ops/s
Iteration  12: 7580194.523 ops/s
Iteration  13: 7509419.871 ops/s
Iteration  14: 7412398.235 ops/s
Iteration  15: 7508332.383 ops/s
Iteration  16: 7538334.061 ops/s
Iteration  17: 7518278.711 ops/s
Iteration  18: 7367454.349 ops/s
Iteration  19: 7644411.680 ops/s
Iteration  20: 7537980.788 ops/s
Iteration  21: 7492088.212 ops/s
Iteration  22: 7463630.430 ops/s
Iteration  23: 7638815.589 ops/s
Iteration  24: 7609877.635 ops/s
Iteration  25: 7625065.541 ops/s
Iteration  26: 7636620.997 ops/s
Iteration  27: 7645338.626 ops/s
Iteration  28: 7661116.990 ops/s
Iteration  29: 7643237.647 ops/s
Iteration  30: 7664373.965 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_asLazy":
  7585219.561 ±(99.9%) 52677.253 ops/s [Average]
  (min, avg, max) = (7367454.349, 7585219.561, 7664373.965), stdev = 78844.839
  CI (99.9%): [7532542.308, 7637896.814] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_asLazy  thrpt   30  7585219.561 ± 52677.253  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4641035.308 ops/s
# Warmup Iteration   2: 9680899.492 ops/s
# Warmup Iteration   3: 8159407.767 ops/s
# Warmup Iteration   4: 9643823.101 ops/s
# Warmup Iteration   5: 9624383.853 ops/s
# Warmup Iteration   6: 9668940.248 ops/s
# Warmup Iteration   7: 9595828.573 ops/s
# Warmup Iteration   8: 9664110.614 ops/s
# Warmup Iteration   9: 9435195.060 ops/s
# Warmup Iteration  10: 9573757.482 ops/s
# Warmup Iteration  11: 9648836.799 ops/s
# Warmup Iteration  12: 9629869.630 ops/s
# Warmup Iteration  13: 9553764.017 ops/s
# Warmup Iteration  14: 9636905.189 ops/s
# Warmup Iteration  15: 9658759.768 ops/s
# Warmup Iteration  16: 9674421.382 ops/s
# Warmup Iteration  17: 9595728.944 ops/s
# Warmup Iteration  18: 9676114.499 ops/s
# Warmup Iteration  19: 9605889.946 ops/s
# Warmup Iteration  20: 9617049.200 ops/s
# Warmup Iteration  21: 9631983.327 ops/s
# Warmup Iteration  22: 9569351.408 ops/s
# Warmup Iteration  23: 9650720.465 ops/s
# Warmup Iteration  24: 9597089.829 ops/s
# Warmup Iteration  25: 9607290.884 ops/s
# Warmup Iteration  26: 9570555.619 ops/s
# Warmup Iteration  27: 9655282.973 ops/s
# Warmup Iteration  28: 9646210.680 ops/s
# Warmup Iteration  29: 9604460.482 ops/s
# Warmup Iteration  30: 9665458.469 ops/s
Iteration   1: 9583615.988 ops/s
Iteration   2: 9694171.984 ops/s
Iteration   3: 9599609.636 ops/s
Iteration   4: 9680382.170 ops/s
Iteration   5: 9657444.221 ops/s
Iteration   6: 9309229.227 ops/s
Iteration   7: 9490996.373 ops/s
Iteration   8: 9613909.688 ops/s
Iteration   9: 9616033.177 ops/s
Iteration  10: 9684583.806 ops/s
Iteration  11: 9516700.687 ops/s
Iteration  12: 9674896.211 ops/s
Iteration  13: 9673020.233 ops/s
Iteration  14: 9667645.443 ops/s
Iteration  15: 9659230.247 ops/s
Iteration  16: 9657691.954 ops/s
Iteration  17: 9643346.209 ops/s
Iteration  18: 9534534.281 ops/s
Iteration  19: 9680263.006 ops/s
Iteration  20: 9647811.871 ops/s
Iteration  21: 9656239.071 ops/s
Iteration  22: 9704786.088 ops/s
Iteration  23: 9651599.324 ops/s
Iteration  24: 9459940.058 ops/s
Iteration  25: 9658440.708 ops/s
Iteration  26: 9645905.250 ops/s
Iteration  27: 9401396.828 ops/s
Iteration  28: 9624671.948 ops/s
Iteration  29: 9586459.540 ops/s
Iteration  30: 9625942.911 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized":
  9610016.605 ±(99.9%) 61654.549 ops/s [Average]
  (min, avg, max) = (9309229.227, 9610016.605, 9704786.088), stdev = 92281.633
  CI (99.9%): [9548362.056, 9671671.153] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized  thrpt   30  9610016.605 ± 61654.549  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4898184.349 ops/s
# Warmup Iteration   2: 10284315.403 ops/s
# Warmup Iteration   3: 8901946.670 ops/s
# Warmup Iteration   4: 10444447.051 ops/s
# Warmup Iteration   5: 10636209.489 ops/s
# Warmup Iteration   6: 10700139.780 ops/s
# Warmup Iteration   7: 10596290.757 ops/s
# Warmup Iteration   8: 10617975.970 ops/s
# Warmup Iteration   9: 10677103.956 ops/s
# Warmup Iteration  10: 10659720.015 ops/s
# Warmup Iteration  11: 10659748.226 ops/s
# Warmup Iteration  12: 10645832.680 ops/s
# Warmup Iteration  13: 10659281.135 ops/s
# Warmup Iteration  14: 10642731.634 ops/s
# Warmup Iteration  15: 10603266.793 ops/s
# Warmup Iteration  16: 10543613.299 ops/s
# Warmup Iteration  17: 10630732.215 ops/s
# Warmup Iteration  18: 10642643.268 ops/s
# Warmup Iteration  19: 10598687.751 ops/s
# Warmup Iteration  20: 10648747.874 ops/s
# Warmup Iteration  21: 10648015.984 ops/s
# Warmup Iteration  22: 10545240.861 ops/s
# Warmup Iteration  23: 10592197.213 ops/s
# Warmup Iteration  24: 10667268.311 ops/s
# Warmup Iteration  25: 10643954.385 ops/s
# Warmup Iteration  26: 10611892.217 ops/s
# Warmup Iteration  27: 10654958.589 ops/s
# Warmup Iteration  28: 10628213.038 ops/s
# Warmup Iteration  29: 10659578.883 ops/s
# Warmup Iteration  30: 10544543.979 ops/s
Iteration   1: 10681344.966 ops/s
Iteration   2: 10551157.990 ops/s
Iteration   3: 10514984.366 ops/s
Iteration   4: 10610646.732 ops/s
Iteration   5: 10627516.950 ops/s
Iteration   6: 10547679.981 ops/s
Iteration   7: 10553913.472 ops/s
Iteration   8: 10620836.872 ops/s
Iteration   9: 10515590.001 ops/s
Iteration  10: 10640449.812 ops/s
Iteration  11: 10634723.068 ops/s
Iteration  12: 10669059.863 ops/s
Iteration  13: 10716868.009 ops/s
Iteration  14: 10673777.059 ops/s
Iteration  15: 10613287.125 ops/s
Iteration  16: 10490233.420 ops/s
Iteration  17: 10668812.373 ops/s
Iteration  18: 10605879.747 ops/s
Iteration  19: 10654528.377 ops/s
Iteration  20: 10690417.966 ops/s
Iteration  21: 10359360.882 ops/s
Iteration  22: 10603203.986 ops/s
Iteration  23: 10698047.747 ops/s
Iteration  24: 10385977.275 ops/s
Iteration  25: 10714782.319 ops/s
Iteration  26: 10696591.445 ops/s
Iteration  27: 10671851.852 ops/s
Iteration  28: 10735460.082 ops/s
Iteration  29: 10694644.021 ops/s
Iteration  30: 10643291.935 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable":
  10616163.990 ±(99.9%) 61624.990 ops/s [Average]
  (min, avg, max) = (10359360.882, 10616163.990, 10735460.082), stdev = 92237.391
  CI (99.9%): [10554539.000, 10677788.980] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  10616163.990 ± 61624.990  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 521883.128 ops/s
# Warmup Iteration   2: 550899.026 ops/s
# Warmup Iteration   3: 751112.636 ops/s
# Warmup Iteration   4: 756329.134 ops/s
# Warmup Iteration   5: 751559.922 ops/s
# Warmup Iteration   6: 755665.538 ops/s
# Warmup Iteration   7: 749357.028 ops/s
# Warmup Iteration   8: 753485.104 ops/s
# Warmup Iteration   9: 752760.020 ops/s
# Warmup Iteration  10: 746242.464 ops/s
# Warmup Iteration  11: 724242.991 ops/s
# Warmup Iteration  12: 658687.372 ops/s
# Warmup Iteration  13: 752145.310 ops/s
# Warmup Iteration  14: 752417.157 ops/s
# Warmup Iteration  15: 757705.034 ops/s
# Warmup Iteration  16: 755393.492 ops/s
# Warmup Iteration  17: 792521.938 ops/s
# Warmup Iteration  18: 770252.897 ops/s
# Warmup Iteration  19: 797188.270 ops/s
# Warmup Iteration  20: 797205.307 ops/s
# Warmup Iteration  21: 796164.560 ops/s
# Warmup Iteration  22: 797237.510 ops/s
# Warmup Iteration  23: 796258.964 ops/s
# Warmup Iteration  24: 794222.088 ops/s
# Warmup Iteration  25: 797410.912 ops/s
# Warmup Iteration  26: 790450.350 ops/s
# Warmup Iteration  27: 791672.940 ops/s
# Warmup Iteration  28: 788866.056 ops/s
# Warmup Iteration  29: 789320.013 ops/s
# Warmup Iteration  30: 791759.651 ops/s
Iteration   1: 786214.997 ops/s
Iteration   2: 792131.407 ops/s
Iteration   3: 795563.603 ops/s
Iteration   4: 797626.668 ops/s
Iteration   5: 785232.380 ops/s
Iteration   6: 771729.360 ops/s
Iteration   7: 795221.265 ops/s
Iteration   8: 795111.183 ops/s
Iteration   9: 774248.733 ops/s
Iteration  10: 793576.456 ops/s
Iteration  11: 794345.331 ops/s
Iteration  12: 791659.525 ops/s
Iteration  13: 787518.425 ops/s
Iteration  14: 794940.281 ops/s
Iteration  15: 789322.813 ops/s
Iteration  16: 776116.975 ops/s
Iteration  17: 799245.737 ops/s
Iteration  18: 794983.641 ops/s
Iteration  19: 791607.350 ops/s
Iteration  20: 793907.438 ops/s
Iteration  21: 794598.037 ops/s
Iteration  22: 787987.382 ops/s
Iteration  23: 795059.679 ops/s
Iteration  24: 793146.183 ops/s
Iteration  25: 797635.375 ops/s
Iteration  26: 787064.537 ops/s
Iteration  27: 795362.553 ops/s
Iteration  28: 793284.703 ops/s
Iteration  29: 789954.303 ops/s
Iteration  30: 793733.365 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator":
  790937.656 ±(99.9%) 4485.445 ops/s [Average]
  (min, avg, max) = (771729.360, 790937.656, 799245.737), stdev = 6713.604
  CI (99.9%): [786452.211, 795423.101] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator  thrpt   30  790937.656 ± 4485.445  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 508421.256 ops/s
# Warmup Iteration   2: 690388.086 ops/s
# Warmup Iteration   3: 834610.438 ops/s
# Warmup Iteration   4: 842350.140 ops/s
# Warmup Iteration   5: 836441.416 ops/s
# Warmup Iteration   6: 832887.660 ops/s
# Warmup Iteration   7: 838693.339 ops/s
# Warmup Iteration   8: 692890.031 ops/s
# Warmup Iteration   9: 838834.753 ops/s
# Warmup Iteration  10: 827249.062 ops/s
# Warmup Iteration  11: 839077.331 ops/s
# Warmup Iteration  12: 837342.827 ops/s
# Warmup Iteration  13: 836210.058 ops/s
# Warmup Iteration  14: 838796.607 ops/s
# Warmup Iteration  15: 839257.842 ops/s
# Warmup Iteration  16: 829138.180 ops/s
# Warmup Iteration  17: 884870.778 ops/s
# Warmup Iteration  18: 881990.202 ops/s
# Warmup Iteration  19: 880739.159 ops/s
# Warmup Iteration  20: 885273.445 ops/s
# Warmup Iteration  21: 886668.907 ops/s
# Warmup Iteration  22: 880342.728 ops/s
# Warmup Iteration  23: 886263.249 ops/s
# Warmup Iteration  24: 883573.525 ops/s
# Warmup Iteration  25: 867880.809 ops/s
# Warmup Iteration  26: 883225.092 ops/s
# Warmup Iteration  27: 879957.405 ops/s
# Warmup Iteration  28: 886517.965 ops/s
# Warmup Iteration  29: 868011.190 ops/s
# Warmup Iteration  30: 878077.862 ops/s
Iteration   1: 884205.862 ops/s
Iteration   2: 885425.655 ops/s
Iteration   3: 881824.139 ops/s
Iteration   4: 867711.327 ops/s
Iteration   5: 881013.175 ops/s
Iteration   6: 883475.057 ops/s
Iteration   7: 886504.844 ops/s
Iteration   8: 884119.777 ops/s
Iteration   9: 886718.918 ops/s
Iteration  10: 877754.577 ops/s
Iteration  11: 874241.894 ops/s
Iteration  12: 886596.487 ops/s
Iteration  13: 874982.600 ops/s
Iteration  14: 886486.651 ops/s
Iteration  15: 883770.191 ops/s
Iteration  16: 869991.758 ops/s
Iteration  17: 881865.518 ops/s
Iteration  18: 881645.702 ops/s
Iteration  19: 882010.223 ops/s
Iteration  20: 883001.362 ops/s
Iteration  21: 881332.018 ops/s
Iteration  22: 882770.356 ops/s
Iteration  23: 876289.379 ops/s
Iteration  24: 885850.890 ops/s
Iteration  25: 885075.481 ops/s
Iteration  26: 881556.544 ops/s
Iteration  27: 883432.224 ops/s
Iteration  28: 881602.855 ops/s
Iteration  29: 887605.452 ops/s
Iteration  30: 885880.179 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove":
  881824.703 ±(99.9%) 3268.586 ops/s [Average]
  (min, avg, max) = (867711.327, 881824.703, 887605.452), stdev = 4892.266
  CI (99.9%): [878556.117, 885093.289] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  881824.703 ± 3268.586  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 138224.078 ops/s
# Warmup Iteration   2: 228991.080 ops/s
# Warmup Iteration   3: 267902.239 ops/s
# Warmup Iteration   4: 267460.574 ops/s
# Warmup Iteration   5: 268548.538 ops/s
# Warmup Iteration   6: 224540.000 ops/s
# Warmup Iteration   7: 267692.664 ops/s
# Warmup Iteration   8: 269383.458 ops/s
# Warmup Iteration   9: 268955.581 ops/s
# Warmup Iteration  10: 267158.526 ops/s
# Warmup Iteration  11: 267283.125 ops/s
# Warmup Iteration  12: 266790.858 ops/s
# Warmup Iteration  13: 270088.035 ops/s
# Warmup Iteration  14: 269779.621 ops/s
# Warmup Iteration  15: 268088.767 ops/s
# Warmup Iteration  16: 267257.561 ops/s
# Warmup Iteration  17: 275787.726 ops/s
# Warmup Iteration  18: 273558.040 ops/s
# Warmup Iteration  19: 275677.547 ops/s
# Warmup Iteration  20: 278075.800 ops/s
# Warmup Iteration  21: 276760.108 ops/s
# Warmup Iteration  22: 275616.384 ops/s
# Warmup Iteration  23: 277052.559 ops/s
# Warmup Iteration  24: 268947.227 ops/s
# Warmup Iteration  25: 276220.545 ops/s
# Warmup Iteration  26: 276791.380 ops/s
# Warmup Iteration  27: 276859.269 ops/s
# Warmup Iteration  28: 273718.926 ops/s
# Warmup Iteration  29: 275187.225 ops/s
# Warmup Iteration  30: 269623.790 ops/s
Iteration   1: 276207.653 ops/s
Iteration   2: 279161.314 ops/s
Iteration   3: 271622.690 ops/s
Iteration   4: 276473.026 ops/s
Iteration   5: 277655.362 ops/s
Iteration   6: 273951.466 ops/s
Iteration   7: 274713.427 ops/s
Iteration   8: 275117.369 ops/s
Iteration   9: 274665.092 ops/s
Iteration  10: 274286.921 ops/s
Iteration  11: 275350.759 ops/s
Iteration  12: 273762.035 ops/s
Iteration  13: 277742.114 ops/s
Iteration  14: 277933.124 ops/s
Iteration  15: 272968.084 ops/s
Iteration  16: 276551.004 ops/s
Iteration  17: 275871.546 ops/s
Iteration  18: 275914.844 ops/s
Iteration  19: 273942.831 ops/s
Iteration  20: 277166.763 ops/s
Iteration  21: 276647.273 ops/s
Iteration  22: 276904.760 ops/s
Iteration  23: 277075.288 ops/s
Iteration  24: 271290.344 ops/s
Iteration  25: 273037.552 ops/s
Iteration  26: 274339.115 ops/s
Iteration  27: 277102.943 ops/s
Iteration  28: 277313.280 ops/s
Iteration  29: 277286.775 ops/s
Iteration  30: 275610.411 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_chunk":
  275588.839 ±(99.9%) 1281.007 ops/s [Average]
  (min, avg, max) = (271290.344, 275588.839, 279161.314), stdev = 1917.351
  CI (99.9%): [274307.832, 276869.846] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_chunk  thrpt   30  275588.839 ± 1281.007  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3192025.827 ops/s
# Warmup Iteration   2: 6568483.953 ops/s
# Warmup Iteration   3: 5514424.820 ops/s
# Warmup Iteration   4: 6528247.667 ops/s
# Warmup Iteration   5: 6585802.464 ops/s
# Warmup Iteration   6: 6547086.826 ops/s
# Warmup Iteration   7: 6594753.280 ops/s
# Warmup Iteration   8: 6497745.064 ops/s
# Warmup Iteration   9: 6545134.007 ops/s
# Warmup Iteration  10: 6532637.117 ops/s
# Warmup Iteration  11: 6510748.956 ops/s
# Warmup Iteration  12: 6466082.796 ops/s
# Warmup Iteration  13: 6555461.392 ops/s
# Warmup Iteration  14: 6609434.274 ops/s
# Warmup Iteration  15: 6551820.261 ops/s
# Warmup Iteration  16: 6548345.808 ops/s
# Warmup Iteration  17: 6462055.707 ops/s
# Warmup Iteration  18: 6559712.413 ops/s
# Warmup Iteration  19: 6583062.588 ops/s
# Warmup Iteration  20: 6557600.915 ops/s
# Warmup Iteration  21: 6493428.514 ops/s
# Warmup Iteration  22: 6456719.389 ops/s
# Warmup Iteration  23: 6608446.781 ops/s
# Warmup Iteration  24: 6486139.487 ops/s
# Warmup Iteration  25: 6580961.176 ops/s
# Warmup Iteration  26: 6571462.585 ops/s
# Warmup Iteration  27: 6579924.194 ops/s
# Warmup Iteration  28: 6543893.579 ops/s
# Warmup Iteration  29: 6521710.685 ops/s
# Warmup Iteration  30: 6545397.789 ops/s
Iteration   1: 6529539.941 ops/s
Iteration   2: 6636135.809 ops/s
Iteration   3: 6540111.063 ops/s
Iteration   4: 6505612.858 ops/s
Iteration   5: 6618743.578 ops/s
Iteration   6: 6605744.672 ops/s
Iteration   7: 6489815.891 ops/s
Iteration   8: 6597677.795 ops/s
Iteration   9: 6601386.721 ops/s
Iteration  10: 6610325.204 ops/s
Iteration  11: 6620143.760 ops/s
Iteration  12: 6531011.910 ops/s
Iteration  13: 6644785.097 ops/s
Iteration  14: 6589267.108 ops/s
Iteration  15: 6632848.100 ops/s
Iteration  16: 6638991.678 ops/s
Iteration  17: 6617493.142 ops/s
Iteration  18: 6596112.585 ops/s
Iteration  19: 6561025.640 ops/s
Iteration  20: 6616332.138 ops/s
Iteration  21: 6650842.997 ops/s
Iteration  22: 6574490.014 ops/s
Iteration  23: 6642659.755 ops/s
Iteration  24: 6612966.464 ops/s
Iteration  25: 6642233.952 ops/s
Iteration  26: 6596918.920 ops/s
Iteration  27: 6615875.213 ops/s
Iteration  28: 6570795.478 ops/s
Iteration  29: 6630112.947 ops/s
Iteration  30: 6621791.783 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_clear":
  6598059.740 ±(99.9%) 28504.741 ops/s [Average]
  (min, avg, max) = (6489815.891, 6598059.740, 6650842.997), stdev = 42664.558
  CI (99.9%): [6569554.999, 6626564.482] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_clear  thrpt   30  6598059.740 ± 28504.741  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 673403.537 ops/s
# Warmup Iteration   2: 1712856.577 ops/s
# Warmup Iteration   3: 1791007.482 ops/s
# Warmup Iteration   4: 1463675.853 ops/s
# Warmup Iteration   5: 1788321.158 ops/s
# Warmup Iteration   6: 1778956.051 ops/s
# Warmup Iteration   7: 1794571.798 ops/s
# Warmup Iteration   8: 1778555.927 ops/s
# Warmup Iteration   9: 1785120.726 ops/s
# Warmup Iteration  10: 1787601.779 ops/s
# Warmup Iteration  11: 1776939.320 ops/s
# Warmup Iteration  12: 1788757.813 ops/s
# Warmup Iteration  13: 1783540.582 ops/s
# Warmup Iteration  14: 1768389.093 ops/s
# Warmup Iteration  15: 1767761.967 ops/s
# Warmup Iteration  16: 1757125.518 ops/s
# Warmup Iteration  17: 1788650.723 ops/s
# Warmup Iteration  18: 1757660.586 ops/s
# Warmup Iteration  19: 1783750.176 ops/s
# Warmup Iteration  20: 1777068.230 ops/s
# Warmup Iteration  21: 1791619.809 ops/s
# Warmup Iteration  22: 1769082.901 ops/s
# Warmup Iteration  23: 1791071.533 ops/s
# Warmup Iteration  24: 1792446.081 ops/s
# Warmup Iteration  25: 1785711.995 ops/s
# Warmup Iteration  26: 1772348.581 ops/s
# Warmup Iteration  27: 1789036.598 ops/s
# Warmup Iteration  28: 1787482.284 ops/s
# Warmup Iteration  29: 1790478.321 ops/s
# Warmup Iteration  30: 1790926.918 ops/s
Iteration   1: 1792984.419 ops/s
Iteration   2: 1789478.410 ops/s
Iteration   3: 1774129.633 ops/s
Iteration   4: 1785477.081 ops/s
Iteration   5: 1785297.590 ops/s
Iteration   6: 1784264.169 ops/s
Iteration   7: 1776968.516 ops/s
Iteration   8: 1780022.161 ops/s
Iteration   9: 1792974.051 ops/s
Iteration  10: 1791458.831 ops/s
Iteration  11: 1776203.648 ops/s
Iteration  12: 1789714.116 ops/s
Iteration  13: 1796383.477 ops/s
Iteration  14: 1763061.749 ops/s
Iteration  15: 1788404.058 ops/s
Iteration  16: 1757964.868 ops/s
Iteration  17: 1783373.763 ops/s
Iteration  18: 1787316.941 ops/s
Iteration  19: 1781837.831 ops/s
Iteration  20: 1780700.978 ops/s
Iteration  21: 1788211.992 ops/s
Iteration  22: 1796855.717 ops/s
Iteration  23: 1789586.368 ops/s
Iteration  24: 1785390.458 ops/s
Iteration  25: 1774723.214 ops/s
Iteration  26: 1755825.374 ops/s
Iteration  27: 1789265.036 ops/s
Iteration  28: 1781272.043 ops/s
Iteration  29: 1793778.103 ops/s
Iteration  30: 1788491.316 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_collect":
  1783380.530 ±(99.9%) 6861.110 ops/s [Average]
  (min, avg, max) = (1755825.374, 1783380.530, 1796855.717), stdev = 10269.388
  CI (99.9%): [1776519.420, 1790241.641] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_collect  thrpt   30  1783380.530 ± 6861.110  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1844936.047 ops/s
# Warmup Iteration   2: 3907172.866 ops/s
# Warmup Iteration   3: 3482576.834 ops/s
# Warmup Iteration   4: 3739777.698 ops/s
# Warmup Iteration   5: 3952550.843 ops/s
# Warmup Iteration   6: 3940043.899 ops/s
# Warmup Iteration   7: 3936267.929 ops/s
# Warmup Iteration   8: 3947243.320 ops/s
# Warmup Iteration   9: 3944544.556 ops/s
# Warmup Iteration  10: 3937754.263 ops/s
# Warmup Iteration  11: 3927033.726 ops/s
# Warmup Iteration  12: 3919651.631 ops/s
# Warmup Iteration  13: 3923597.358 ops/s
# Warmup Iteration  14: 3928429.933 ops/s
# Warmup Iteration  15: 3929191.909 ops/s
# Warmup Iteration  16: 3928845.779 ops/s
# Warmup Iteration  17: 3942243.444 ops/s
# Warmup Iteration  18: 3930179.570 ops/s
# Warmup Iteration  19: 3939504.625 ops/s
# Warmup Iteration  20: 3920599.765 ops/s
# Warmup Iteration  21: 3928830.120 ops/s
# Warmup Iteration  22: 3932424.161 ops/s
# Warmup Iteration  23: 3937758.702 ops/s
# Warmup Iteration  24: 3934455.655 ops/s
# Warmup Iteration  25: 3900114.527 ops/s
# Warmup Iteration  26: 3935136.298 ops/s
# Warmup Iteration  27: 3901577.428 ops/s
# Warmup Iteration  28: 3932612.841 ops/s
# Warmup Iteration  29: 3930507.887 ops/s
# Warmup Iteration  30: 3918166.278 ops/s
Iteration   1: 3934465.741 ops/s
Iteration   2: 3908526.260 ops/s
Iteration   3: 3894960.585 ops/s
Iteration   4: 3922292.282 ops/s
Iteration   5: 3900200.131 ops/s
Iteration   6: 3879777.700 ops/s
Iteration   7: 3932579.755 ops/s
Iteration   8: 3939828.397 ops/s
Iteration   9: 3950844.790 ops/s
Iteration  10: 3920824.254 ops/s
Iteration  11: 3941031.513 ops/s
Iteration  12: 3941399.465 ops/s
Iteration  13: 3913024.656 ops/s
Iteration  14: 3921245.072 ops/s
Iteration  15: 3929492.847 ops/s
Iteration  16: 3937469.664 ops/s
Iteration  17: 3856895.789 ops/s
Iteration  18: 3907218.022 ops/s
Iteration  19: 3942940.861 ops/s
Iteration  20: 3942089.110 ops/s
Iteration  21: 3923821.247 ops/s
Iteration  22: 3933366.036 ops/s
Iteration  23: 3925100.204 ops/s
Iteration  24: 3924091.213 ops/s
Iteration  25: 3921609.820 ops/s
Iteration  26: 3942929.876 ops/s
Iteration  27: 3918225.602 ops/s
Iteration  28: 3902683.784 ops/s
Iteration  29: 3909585.861 ops/s
Iteration  30: 3934781.468 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_contains":
  3921776.733 ±(99.9%) 13754.833 ops/s [Average]
  (min, avg, max) = (3856895.789, 3921776.733, 3950844.790), stdev = 20587.588
  CI (99.9%): [3908021.900, 3935531.566] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_contains  thrpt   30  3921776.733 ± 13754.833  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3237920.553 ops/s
# Warmup Iteration   2: 7081495.429 ops/s
# Warmup Iteration   3: 7115956.071 ops/s
# Warmup Iteration   4: 5922663.841 ops/s
# Warmup Iteration   5: 7145461.056 ops/s
# Warmup Iteration   6: 7093811.182 ops/s
# Warmup Iteration   7: 7115716.896 ops/s
# Warmup Iteration   8: 7133615.583 ops/s
# Warmup Iteration   9: 7117610.189 ops/s
# Warmup Iteration  10: 7125481.024 ops/s
# Warmup Iteration  11: 7124625.354 ops/s
# Warmup Iteration  12: 7121316.439 ops/s
# Warmup Iteration  13: 7079391.762 ops/s
# Warmup Iteration  14: 7102396.934 ops/s
# Warmup Iteration  15: 7139422.716 ops/s
# Warmup Iteration  16: 7124400.013 ops/s
# Warmup Iteration  17: 7119312.900 ops/s
# Warmup Iteration  18: 7116469.577 ops/s
# Warmup Iteration  19: 7109282.949 ops/s
# Warmup Iteration  20: 7114138.113 ops/s
# Warmup Iteration  21: 7029775.400 ops/s
# Warmup Iteration  22: 7026178.009 ops/s
# Warmup Iteration  23: 7123887.105 ops/s
# Warmup Iteration  24: 7121687.072 ops/s
# Warmup Iteration  25: 7109255.830 ops/s
# Warmup Iteration  26: 7126708.872 ops/s
# Warmup Iteration  27: 7079570.110 ops/s
# Warmup Iteration  28: 7118455.404 ops/s
# Warmup Iteration  29: 7109728.074 ops/s
# Warmup Iteration  30: 7113367.207 ops/s
Iteration   1: 7146018.568 ops/s
Iteration   2: 7020762.642 ops/s
Iteration   3: 7109002.690 ops/s
Iteration   4: 7142960.300 ops/s
Iteration   5: 7119736.565 ops/s
Iteration   6: 7133267.379 ops/s
Iteration   7: 7000495.001 ops/s
Iteration   8: 7106939.695 ops/s
Iteration   9: 7126589.728 ops/s
Iteration  10: 7093922.128 ops/s
Iteration  11: 7104236.948 ops/s
Iteration  12: 7145885.761 ops/s
Iteration  13: 7103994.228 ops/s
Iteration  14: 7130654.642 ops/s
Iteration  15: 7129840.516 ops/s
Iteration  16: 7132154.005 ops/s
Iteration  17: 7115553.466 ops/s
Iteration  18: 7108648.915 ops/s
Iteration  19: 7162963.741 ops/s
Iteration  20: 7126089.911 ops/s
Iteration  21: 7082535.641 ops/s
Iteration  22: 7083921.193 ops/s
Iteration  23: 7131167.067 ops/s
Iteration  24: 7025933.663 ops/s
Iteration  25: 7108566.560 ops/s
Iteration  26: 7074774.504 ops/s
Iteration  27: 7094395.754 ops/s
Iteration  28: 7149802.637 ops/s
Iteration  29: 7093775.616 ops/s
Iteration  30: 7116406.244 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray":
  7107366.524 ±(99.9%) 25243.552 ops/s [Average]
  (min, avg, max) = (7000495.001, 7107366.524, 7162963.741), stdev = 37783.364
  CI (99.9%): [7082122.971, 7132610.076] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray  thrpt   30  7107366.524 ± 25243.552  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2355721.097 ops/s
# Warmup Iteration   2: 5330814.010 ops/s
# Warmup Iteration   3: 4505344.048 ops/s
# Warmup Iteration   4: 5425608.089 ops/s
# Warmup Iteration   5: 5433198.892 ops/s
# Warmup Iteration   6: 5439582.536 ops/s
# Warmup Iteration   7: 5448752.067 ops/s
# Warmup Iteration   8: 5466531.338 ops/s
# Warmup Iteration   9: 5429271.189 ops/s
# Warmup Iteration  10: 5453473.073 ops/s
# Warmup Iteration  11: 5453640.607 ops/s
# Warmup Iteration  12: 5432973.237 ops/s
# Warmup Iteration  13: 5467923.834 ops/s
# Warmup Iteration  14: 5416024.527 ops/s
# Warmup Iteration  15: 5455638.502 ops/s
# Warmup Iteration  16: 5469158.173 ops/s
# Warmup Iteration  17: 5427764.641 ops/s
# Warmup Iteration  18: 5435803.880 ops/s
# Warmup Iteration  19: 5403999.940 ops/s
# Warmup Iteration  20: 5464670.941 ops/s
# Warmup Iteration  21: 5439211.326 ops/s
# Warmup Iteration  22: 5416657.029 ops/s
# Warmup Iteration  23: 5469656.035 ops/s
# Warmup Iteration  24: 5461845.964 ops/s
# Warmup Iteration  25: 5455321.543 ops/s
# Warmup Iteration  26: 5472401.954 ops/s
# Warmup Iteration  27: 5438398.140 ops/s
# Warmup Iteration  28: 5436044.308 ops/s
# Warmup Iteration  29: 5448739.466 ops/s
# Warmup Iteration  30: 5467788.969 ops/s
Iteration   1: 5460707.599 ops/s
Iteration   2: 5428619.048 ops/s
Iteration   3: 5461418.842 ops/s
Iteration   4: 5427260.530 ops/s
Iteration   5: 5446841.600 ops/s
Iteration   6: 5412348.482 ops/s
Iteration   7: 5468787.879 ops/s
Iteration   8: 5413095.809 ops/s
Iteration   9: 5428515.554 ops/s
Iteration  10: 5344000.561 ops/s
Iteration  11: 5459769.573 ops/s
Iteration  12: 5419049.736 ops/s
Iteration  13: 5442968.905 ops/s
Iteration  14: 5391995.545 ops/s
Iteration  15: 5453046.206 ops/s
Iteration  16: 5493682.017 ops/s
Iteration  17: 5459840.703 ops/s
Iteration  18: 5362319.427 ops/s
Iteration  19: 5465759.871 ops/s
Iteration  20: 5372393.312 ops/s
Iteration  21: 5414950.666 ops/s
Iteration  22: 5426528.501 ops/s
Iteration  23: 5465660.312 ops/s
Iteration  24: 5453401.114 ops/s
Iteration  25: 5445809.754 ops/s
Iteration  26: 5442561.440 ops/s
Iteration  27: 5458455.081 ops/s
Iteration  28: 5471728.791 ops/s
Iteration  29: 5362069.308 ops/s
Iteration  30: 5442524.620 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable":
  5433203.693 ±(99.9%) 24336.053 ops/s [Average]
  (min, avg, max) = (5344000.561, 5433203.693, 5493682.017), stdev = 36425.061
  CI (99.9%): [5408867.640, 5457539.746] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable  thrpt   30  5433203.693 ± 24336.053  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1520432.035 ops/s
# Warmup Iteration   2: 3109220.303 ops/s
# Warmup Iteration   3: 3150838.543 ops/s
# Warmup Iteration   4: 3133607.250 ops/s
# Warmup Iteration   5: 2675366.964 ops/s
# Warmup Iteration   6: 3169564.386 ops/s
# Warmup Iteration   7: 3173603.688 ops/s
# Warmup Iteration   8: 3169920.421 ops/s
# Warmup Iteration   9: 3166641.487 ops/s
# Warmup Iteration  10: 3173074.925 ops/s
# Warmup Iteration  11: 3150366.145 ops/s
# Warmup Iteration  12: 3168059.916 ops/s
# Warmup Iteration  13: 3134685.377 ops/s
# Warmup Iteration  14: 3173674.271 ops/s
# Warmup Iteration  15: 3112304.313 ops/s
# Warmup Iteration  16: 3163557.817 ops/s
# Warmup Iteration  17: 3147370.412 ops/s
# Warmup Iteration  18: 3162824.574 ops/s
# Warmup Iteration  19: 3173529.102 ops/s
# Warmup Iteration  20: 3148539.917 ops/s
# Warmup Iteration  21: 3174016.915 ops/s
# Warmup Iteration  22: 3171169.043 ops/s
# Warmup Iteration  23: 3176116.379 ops/s
# Warmup Iteration  24: 3176287.783 ops/s
# Warmup Iteration  25: 3159359.576 ops/s
# Warmup Iteration  26: 3163433.593 ops/s
# Warmup Iteration  27: 3172902.799 ops/s
# Warmup Iteration  28: 3159820.661 ops/s
# Warmup Iteration  29: 3152381.883 ops/s
# Warmup Iteration  30: 3159053.055 ops/s
Iteration   1: 3177640.709 ops/s
Iteration   2: 3176577.129 ops/s
Iteration   3: 3180054.748 ops/s
Iteration   4: 3102204.536 ops/s
Iteration   5: 3170788.783 ops/s
Iteration   6: 3054117.569 ops/s
Iteration   7: 3153666.573 ops/s
Iteration   8: 3172319.281 ops/s
Iteration   9: 3151271.002 ops/s
Iteration  10: 3152491.930 ops/s
Iteration  11: 3178495.524 ops/s
Iteration  12: 3181731.316 ops/s
Iteration  13: 3170634.985 ops/s
Iteration  14: 3176354.276 ops/s
Iteration  15: 3170282.063 ops/s
Iteration  16: 3169746.085 ops/s
Iteration  17: 3137009.465 ops/s
Iteration  18: 3175630.675 ops/s
Iteration  19: 3126800.592 ops/s
Iteration  20: 3183141.892 ops/s
Iteration  21: 3154003.738 ops/s
Iteration  22: 3172777.112 ops/s
Iteration  23: 3157299.657 ops/s
Iteration  24: 3161523.095 ops/s
Iteration  25: 3167375.756 ops/s
Iteration  26: 3169066.195 ops/s
Iteration  27: 3166550.745 ops/s
Iteration  28: 3164224.863 ops/s
Iteration  29: 3154398.400 ops/s
Iteration  30: 3164273.323 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray":
  3159748.401 ±(99.9%) 17650.722 ops/s [Average]
  (min, avg, max) = (3054117.569, 3159748.401, 3183141.892), stdev = 26418.772
  CI (99.9%): [3142097.679, 3177399.122] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray  thrpt   30  3159748.401 ± 17650.722  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 532638.961 ops/s
# Warmup Iteration   2: 769934.486 ops/s
# Warmup Iteration   3: 900074.188 ops/s
# Warmup Iteration   4: 898233.449 ops/s
# Warmup Iteration   5: 887750.006 ops/s
# Warmup Iteration   6: 894993.702 ops/s
# Warmup Iteration   7: 743607.525 ops/s
# Warmup Iteration   8: 898607.561 ops/s
# Warmup Iteration   9: 901505.253 ops/s
# Warmup Iteration  10: 890370.659 ops/s
# Warmup Iteration  11: 894259.090 ops/s
# Warmup Iteration  12: 900919.700 ops/s
# Warmup Iteration  13: 895549.636 ops/s
# Warmup Iteration  14: 898173.766 ops/s
# Warmup Iteration  15: 900493.075 ops/s
# Warmup Iteration  16: 898514.782 ops/s
# Warmup Iteration  17: 873929.591 ops/s
# Warmup Iteration  18: 869020.433 ops/s
# Warmup Iteration  19: 873864.436 ops/s
# Warmup Iteration  20: 872695.077 ops/s
# Warmup Iteration  21: 870212.372 ops/s
# Warmup Iteration  22: 861593.104 ops/s
# Warmup Iteration  23: 870391.510 ops/s
# Warmup Iteration  24: 871299.967 ops/s
# Warmup Iteration  25: 863302.292 ops/s
# Warmup Iteration  26: 850488.776 ops/s
# Warmup Iteration  27: 865003.416 ops/s
# Warmup Iteration  28: 868960.720 ops/s
# Warmup Iteration  29: 864460.011 ops/s
# Warmup Iteration  30: 865118.260 ops/s
Iteration   1: 871600.798 ops/s
Iteration   2: 870777.488 ops/s
Iteration   3: 873223.983 ops/s
Iteration   4: 869415.717 ops/s
Iteration   5: 872025.162 ops/s
Iteration   6: 873205.573 ops/s
Iteration   7: 864904.033 ops/s
Iteration   8: 868539.231 ops/s
Iteration   9: 857058.231 ops/s
Iteration  10: 872819.453 ops/s
Iteration  11: 863504.312 ops/s
Iteration  12: 842670.021 ops/s
Iteration  13: 862783.777 ops/s
Iteration  14: 872425.236 ops/s
Iteration  15: 870902.605 ops/s
Iteration  16: 852769.159 ops/s
Iteration  17: 868171.859 ops/s
Iteration  18: 869578.300 ops/s
Iteration  19: 872607.658 ops/s
Iteration  20: 871600.393 ops/s
Iteration  21: 866936.720 ops/s
Iteration  22: 871678.481 ops/s
Iteration  23: 870914.579 ops/s
Iteration  24: 872283.595 ops/s
Iteration  25: 872918.055 ops/s
Iteration  26: 872799.158 ops/s
Iteration  27: 872385.313 ops/s
Iteration  28: 873586.807 ops/s
Iteration  29: 872462.349 ops/s
Iteration  30: 874012.423 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable":
  868685.349 ±(99.9%) 4663.552 ops/s [Average]
  (min, avg, max) = (842670.021, 868685.349, 874012.423), stdev = 6980.186
  CI (99.9%): [864021.797, 873348.901] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  868685.349 ± 4663.552  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1433749.954 ops/s
# Warmup Iteration   2: 2946677.427 ops/s
# Warmup Iteration   3: 2997983.536 ops/s
# Warmup Iteration   4: 2491889.687 ops/s
# Warmup Iteration   5: 3002819.583 ops/s
# Warmup Iteration   6: 3002724.549 ops/s
# Warmup Iteration   7: 2969548.658 ops/s
# Warmup Iteration   8: 2987754.825 ops/s
# Warmup Iteration   9: 2995271.605 ops/s
# Warmup Iteration  10: 2982596.553 ops/s
# Warmup Iteration  11: 2998598.038 ops/s
# Warmup Iteration  12: 2997744.907 ops/s
# Warmup Iteration  13: 3006442.558 ops/s
# Warmup Iteration  14: 2973491.685 ops/s
# Warmup Iteration  15: 2988586.105 ops/s
# Warmup Iteration  16: 2969576.206 ops/s
# Warmup Iteration  17: 2992696.830 ops/s
# Warmup Iteration  18: 3003454.153 ops/s
# Warmup Iteration  19: 2993917.634 ops/s
# Warmup Iteration  20: 3005115.878 ops/s
# Warmup Iteration  21: 2985814.258 ops/s
# Warmup Iteration  22: 3000878.507 ops/s
# Warmup Iteration  23: 3002965.044 ops/s
# Warmup Iteration  24: 2961622.508 ops/s
# Warmup Iteration  25: 2995376.181 ops/s
# Warmup Iteration  26: 2977589.882 ops/s
# Warmup Iteration  27: 3005293.509 ops/s
# Warmup Iteration  28: 2999190.861 ops/s
# Warmup Iteration  29: 2991522.988 ops/s
# Warmup Iteration  30: 3011247.872 ops/s
Iteration   1: 3015216.638 ops/s
Iteration   2: 3004260.979 ops/s
Iteration   3: 2995107.727 ops/s
Iteration   4: 3004799.378 ops/s
Iteration   5: 2952972.611 ops/s
Iteration   6: 3000548.187 ops/s
Iteration   7: 3003236.081 ops/s
Iteration   8: 3010276.874 ops/s
Iteration   9: 2943078.857 ops/s
Iteration  10: 2995955.464 ops/s
Iteration  11: 3003238.757 ops/s
Iteration  12: 3002017.117 ops/s
Iteration  13: 2996137.655 ops/s
Iteration  14: 2999226.008 ops/s
Iteration  15: 2993782.101 ops/s
Iteration  16: 3002488.769 ops/s
Iteration  17: 2996472.369 ops/s
Iteration  18: 2982936.713 ops/s
Iteration  19: 2998123.860 ops/s
Iteration  20: 2996685.133 ops/s
Iteration  21: 2950581.138 ops/s
Iteration  22: 2977178.226 ops/s
Iteration  23: 2956416.890 ops/s
Iteration  24: 3001432.840 ops/s
Iteration  25: 3003349.791 ops/s
Iteration  26: 2995879.653 ops/s
Iteration  27: 2960015.280 ops/s
Iteration  28: 2998505.194 ops/s
Iteration  29: 3000475.447 ops/s
Iteration  30: 3000483.956 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray":
  2991362.656 ±(99.9%) 12731.197 ops/s [Average]
  (min, avg, max) = (2943078.857, 2991362.656, 3015216.638), stdev = 19055.458
  CI (99.9%): [2978631.459, 3004093.854] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray  thrpt   30  2991362.656 ± 12731.197  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 501939.630 ops/s
# Warmup Iteration   2: 733683.492 ops/s
# Warmup Iteration   3: 856628.913 ops/s
# Warmup Iteration   4: 860229.642 ops/s
# Warmup Iteration   5: 860286.493 ops/s
# Warmup Iteration   6: 842394.122 ops/s
# Warmup Iteration   7: 716576.490 ops/s
# Warmup Iteration   8: 855721.247 ops/s
# Warmup Iteration   9: 855676.243 ops/s
# Warmup Iteration  10: 858593.750 ops/s
# Warmup Iteration  11: 854873.203 ops/s
# Warmup Iteration  12: 844163.338 ops/s
# Warmup Iteration  13: 859768.147 ops/s
# Warmup Iteration  14: 860302.571 ops/s
# Warmup Iteration  15: 854134.780 ops/s
# Warmup Iteration  16: 859131.369 ops/s
# Warmup Iteration  17: 859066.979 ops/s
# Warmup Iteration  18: 859866.940 ops/s
# Warmup Iteration  19: 860544.835 ops/s
# Warmup Iteration  20: 860451.729 ops/s
# Warmup Iteration  21: 855428.126 ops/s
# Warmup Iteration  22: 861001.266 ops/s
# Warmup Iteration  23: 858571.524 ops/s
# Warmup Iteration  24: 858139.066 ops/s
# Warmup Iteration  25: 858358.768 ops/s
# Warmup Iteration  26: 859833.513 ops/s
# Warmup Iteration  27: 860141.249 ops/s
# Warmup Iteration  28: 845645.020 ops/s
# Warmup Iteration  29: 862452.117 ops/s
# Warmup Iteration  30: 858410.846 ops/s
Iteration   1: 853661.171 ops/s
Iteration   2: 856597.826 ops/s
Iteration   3: 857380.171 ops/s
Iteration   4: 856744.866 ops/s
Iteration   5: 860460.404 ops/s
Iteration   6: 856032.329 ops/s
Iteration   7: 859045.415 ops/s
Iteration   8: 858129.992 ops/s
Iteration   9: 854341.815 ops/s
Iteration  10: 860060.816 ops/s
Iteration  11: 862212.693 ops/s
Iteration  12: 861349.312 ops/s
Iteration  13: 855451.957 ops/s
Iteration  14: 864772.418 ops/s
Iteration  15: 856904.552 ops/s
Iteration  16: 845550.103 ops/s
Iteration  17: 860102.109 ops/s
Iteration  18: 856622.845 ops/s
Iteration  19: 862539.507 ops/s
Iteration  20: 862548.762 ops/s
Iteration  21: 861665.235 ops/s
Iteration  22: 860002.617 ops/s
Iteration  23: 862433.667 ops/s
Iteration  24: 862709.519 ops/s
Iteration  25: 857904.565 ops/s
Iteration  26: 854978.117 ops/s
Iteration  27: 860012.894 ops/s
Iteration  28: 862543.877 ops/s
Iteration  29: 849325.486 ops/s
Iteration  30: 859010.248 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable":
  858369.843 ±(99.9%) 2779.280 ops/s [Average]
  (min, avg, max) = (845550.103, 858369.843, 864772.418), stdev = 4159.895
  CI (99.9%): [855590.563, 861149.123] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  858369.843 ± 2779.280  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1104518.306 ops/s
# Warmup Iteration   2: 2047015.689 ops/s
# Warmup Iteration   3: 2208895.445 ops/s
# Warmup Iteration   4: 2204050.940 ops/s
# Warmup Iteration   5: 1830325.090 ops/s
# Warmup Iteration   6: 2199159.743 ops/s
# Warmup Iteration   7: 2209225.538 ops/s
# Warmup Iteration   8: 2211121.911 ops/s
# Warmup Iteration   9: 2204841.179 ops/s
# Warmup Iteration  10: 2213322.743 ops/s
# Warmup Iteration  11: 2192349.554 ops/s
# Warmup Iteration  12: 2215277.503 ops/s
# Warmup Iteration  13: 2208552.846 ops/s
# Warmup Iteration  14: 2209866.507 ops/s
# Warmup Iteration  15: 2199825.846 ops/s
# Warmup Iteration  16: 2209916.776 ops/s
# Warmup Iteration  17: 2209637.645 ops/s
# Warmup Iteration  18: 2208565.597 ops/s
# Warmup Iteration  19: 2209332.024 ops/s
# Warmup Iteration  20: 2206647.674 ops/s
# Warmup Iteration  21: 2216951.118 ops/s
# Warmup Iteration  22: 2211306.427 ops/s
# Warmup Iteration  23: 2208177.450 ops/s
# Warmup Iteration  24: 2193452.899 ops/s
# Warmup Iteration  25: 2217260.327 ops/s
# Warmup Iteration  26: 2190581.739 ops/s
# Warmup Iteration  27: 2212184.773 ops/s
# Warmup Iteration  28: 2205205.908 ops/s
# Warmup Iteration  29: 2185727.291 ops/s
# Warmup Iteration  30: 2218748.408 ops/s
Iteration   1: 2215468.910 ops/s
Iteration   2: 2207709.130 ops/s
Iteration   3: 2175653.073 ops/s
Iteration   4: 2223767.921 ops/s
Iteration   5: 2210880.431 ops/s
Iteration   6: 2207799.023 ops/s
Iteration   7: 2215872.666 ops/s
Iteration   8: 2217029.004 ops/s
Iteration   9: 2209773.086 ops/s
Iteration  10: 2209760.978 ops/s
Iteration  11: 2211970.390 ops/s
Iteration  12: 2208350.301 ops/s
Iteration  13: 2203317.588 ops/s
Iteration  14: 2200775.966 ops/s
Iteration  15: 2207425.329 ops/s
Iteration  16: 2208156.006 ops/s
Iteration  17: 2210112.409 ops/s
Iteration  18: 2220806.827 ops/s
Iteration  19: 2220686.062 ops/s
Iteration  20: 2214631.867 ops/s
Iteration  21: 2227029.224 ops/s
Iteration  22: 2204283.339 ops/s
Iteration  23: 2189387.164 ops/s
Iteration  24: 2174839.589 ops/s
Iteration  25: 2216376.302 ops/s
Iteration  26: 2203371.765 ops/s
Iteration  27: 2217201.097 ops/s
Iteration  28: 2211807.159 ops/s
Iteration  29: 2216274.268 ops/s
Iteration  30: 2212003.819 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_count":
  2209084.023 ±(99.9%) 7880.457 ops/s [Average]
  (min, avg, max) = (2174839.589, 2209084.023, 2227029.224), stdev = 11795.098
  CI (99.9%): [2201203.566, 2216964.480] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_count  thrpt   30  2209084.023 ± 7880.457  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1705517.252 ops/s
# Warmup Iteration   2: 3729481.361 ops/s
# Warmup Iteration   3: 3706445.039 ops/s
# Warmup Iteration   4: 3096235.721 ops/s
# Warmup Iteration   5: 3717509.050 ops/s
# Warmup Iteration   6: 3659838.846 ops/s
# Warmup Iteration   7: 3695538.338 ops/s
# Warmup Iteration   8: 3730276.409 ops/s
# Warmup Iteration   9: 3733130.911 ops/s
# Warmup Iteration  10: 3704707.858 ops/s
# Warmup Iteration  11: 3718855.207 ops/s
# Warmup Iteration  12: 3737289.290 ops/s
# Warmup Iteration  13: 3725006.132 ops/s
# Warmup Iteration  14: 3715057.257 ops/s
# Warmup Iteration  15: 3730371.638 ops/s
# Warmup Iteration  16: 3730386.478 ops/s
# Warmup Iteration  17: 3717299.986 ops/s
# Warmup Iteration  18: 3717050.188 ops/s
# Warmup Iteration  19: 3729276.136 ops/s
# Warmup Iteration  20: 3731188.402 ops/s
# Warmup Iteration  21: 3736699.526 ops/s
# Warmup Iteration  22: 3737806.937 ops/s
# Warmup Iteration  23: 3738353.804 ops/s
# Warmup Iteration  24: 3739194.978 ops/s
# Warmup Iteration  25: 3736965.787 ops/s
# Warmup Iteration  26: 3731882.357 ops/s
# Warmup Iteration  27: 3737243.246 ops/s
# Warmup Iteration  28: 3737021.697 ops/s
# Warmup Iteration  29: 3720018.168 ops/s
# Warmup Iteration  30: 3726915.908 ops/s
Iteration   1: 3723734.247 ops/s
Iteration   2: 3734490.517 ops/s
Iteration   3: 3739153.136 ops/s
Iteration   4: 3668833.590 ops/s
Iteration   5: 3746034.102 ops/s
Iteration   6: 3723310.902 ops/s
Iteration   7: 3743380.300 ops/s
Iteration   8: 3684760.131 ops/s
Iteration   9: 3719569.879 ops/s
Iteration  10: 3718521.775 ops/s
Iteration  11: 3724255.828 ops/s
Iteration  12: 3725143.256 ops/s
Iteration  13: 3740163.994 ops/s
Iteration  14: 3731325.540 ops/s
Iteration  15: 3728689.576 ops/s
Iteration  16: 3674531.408 ops/s
Iteration  17: 3725882.199 ops/s
Iteration  18: 3732639.259 ops/s
Iteration  19: 3722891.283 ops/s
Iteration  20: 3730824.086 ops/s
Iteration  21: 3719602.960 ops/s
Iteration  22: 3717851.598 ops/s
Iteration  23: 3689556.323 ops/s
Iteration  24: 3714959.619 ops/s
Iteration  25: 3724383.421 ops/s
Iteration  26: 3733582.628 ops/s
Iteration  27: 3721506.106 ops/s
Iteration  28: 3731270.350 ops/s
Iteration  29: 3736497.229 ops/s
Iteration  30: 3694434.651 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone":
  3720725.996 ±(99.9%) 12970.905 ops/s [Average]
  (min, avg, max) = (3668833.590, 3720725.996, 3746034.102), stdev = 19414.242
  CI (99.9%): [3707755.091, 3733696.902] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone  thrpt   30  3720725.996 ± 12970.905  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2649123.889 ops/s
# Warmup Iteration   2: 5535860.611 ops/s
# Warmup Iteration   3: 4589070.817 ops/s
# Warmup Iteration   4: 5507896.368 ops/s
# Warmup Iteration   5: 5514902.178 ops/s
# Warmup Iteration   6: 5499787.524 ops/s
# Warmup Iteration   7: 5489843.646 ops/s
# Warmup Iteration   8: 5518466.684 ops/s
# Warmup Iteration   9: 5522172.776 ops/s
# Warmup Iteration  10: 5535017.258 ops/s
# Warmup Iteration  11: 5554901.805 ops/s
# Warmup Iteration  12: 5499559.308 ops/s
# Warmup Iteration  13: 5527683.391 ops/s
# Warmup Iteration  14: 5489103.768 ops/s
# Warmup Iteration  15: 5481925.899 ops/s
# Warmup Iteration  16: 5523669.065 ops/s
# Warmup Iteration  17: 5496380.396 ops/s
# Warmup Iteration  18: 5493946.281 ops/s
# Warmup Iteration  19: 5491128.225 ops/s
# Warmup Iteration  20: 5528450.419 ops/s
# Warmup Iteration  21: 5476422.093 ops/s
# Warmup Iteration  22: 5482216.210 ops/s
# Warmup Iteration  23: 5484032.547 ops/s
# Warmup Iteration  24: 5530682.970 ops/s
# Warmup Iteration  25: 5544875.296 ops/s
# Warmup Iteration  26: 5506466.916 ops/s
# Warmup Iteration  27: 5519801.930 ops/s
# Warmup Iteration  28: 5534716.101 ops/s
# Warmup Iteration  29: 5521449.767 ops/s
# Warmup Iteration  30: 5507045.185 ops/s
Iteration   1: 5537450.595 ops/s
Iteration   2: 5509919.328 ops/s
Iteration   3: 5551520.214 ops/s
Iteration   4: 5495903.478 ops/s
Iteration   5: 5541339.392 ops/s
Iteration   6: 5522253.863 ops/s
Iteration   7: 5532067.684 ops/s
Iteration   8: 5524221.058 ops/s
Iteration   9: 5513077.663 ops/s
Iteration  10: 5524803.334 ops/s
Iteration  11: 5531357.900 ops/s
Iteration  12: 5509968.370 ops/s
Iteration  13: 5547434.657 ops/s
Iteration  14: 5510194.639 ops/s
Iteration  15: 5518554.146 ops/s
Iteration  16: 5517162.980 ops/s
Iteration  17: 5560863.003 ops/s
Iteration  18: 5512562.442 ops/s
Iteration  19: 5534739.761 ops/s
Iteration  20: 5512549.450 ops/s
Iteration  21: 5536783.953 ops/s
Iteration  22: 5543245.928 ops/s
Iteration  23: 5493364.470 ops/s
Iteration  24: 5531772.037 ops/s
Iteration  25: 5513390.849 ops/s
Iteration  26: 5536023.562 ops/s
Iteration  27: 5514469.525 ops/s
Iteration  28: 5492032.642 ops/s
Iteration  29: 5547557.201 ops/s
Iteration  30: 5542242.215 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_forEach":
  5525294.211 ±(99.9%) 11742.522 ops/s [Average]
  (min, avg, max) = (5492032.642, 5525294.211, 5560863.003), stdev = 17575.656
  CI (99.9%): [5513551.689, 5537036.733] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_forEach  thrpt   30  5525294.211 ± 11742.522  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7575130.832 ops/s
# Warmup Iteration   2: 15512609.192 ops/s
# Warmup Iteration   3: 13489099.083 ops/s
# Warmup Iteration   4: 16152928.519 ops/s
# Warmup Iteration   5: 16208564.215 ops/s
# Warmup Iteration   6: 16237573.043 ops/s
# Warmup Iteration   7: 16129780.284 ops/s
# Warmup Iteration   8: 16215852.033 ops/s
# Warmup Iteration   9: 16133955.265 ops/s
# Warmup Iteration  10: 16241411.450 ops/s
# Warmup Iteration  11: 16196772.459 ops/s
# Warmup Iteration  12: 16220761.440 ops/s
# Warmup Iteration  13: 16252111.402 ops/s
# Warmup Iteration  14: 16144212.647 ops/s
# Warmup Iteration  15: 16045644.743 ops/s
# Warmup Iteration  16: 16270677.215 ops/s
# Warmup Iteration  17: 16069979.820 ops/s
# Warmup Iteration  18: 16268566.904 ops/s
# Warmup Iteration  19: 16118948.494 ops/s
# Warmup Iteration  20: 16057573.503 ops/s
# Warmup Iteration  21: 16270591.620 ops/s
# Warmup Iteration  22: 16282410.466 ops/s
# Warmup Iteration  23: 16165020.380 ops/s
# Warmup Iteration  24: 16255644.132 ops/s
# Warmup Iteration  25: 16263988.658 ops/s
# Warmup Iteration  26: 16228982.738 ops/s
# Warmup Iteration  27: 16259687.961 ops/s
# Warmup Iteration  28: 16200058.102 ops/s
# Warmup Iteration  29: 16312949.177 ops/s
# Warmup Iteration  30: 16117440.670 ops/s
Iteration   1: 16256070.099 ops/s
Iteration   2: 16331253.473 ops/s
Iteration   3: 16158255.165 ops/s
Iteration   4: 16326763.325 ops/s
Iteration   5: 16198282.167 ops/s
Iteration   6: 16171085.217 ops/s
Iteration   7: 16153415.612 ops/s
Iteration   8: 16255782.380 ops/s
Iteration   9: 16339533.337 ops/s
Iteration  10: 16311405.226 ops/s
Iteration  11: 16027907.805 ops/s
Iteration  12: 16271420.976 ops/s
Iteration  13: 16233492.499 ops/s
Iteration  14: 16280199.666 ops/s
Iteration  15: 16248128.048 ops/s
Iteration  16: 16258728.328 ops/s
Iteration  17: 16335747.989 ops/s
Iteration  18: 16231896.891 ops/s
Iteration  19: 16248758.386 ops/s
Iteration  20: 16331065.972 ops/s
Iteration  21: 16126948.482 ops/s
Iteration  22: 16302109.317 ops/s
Iteration  23: 16137545.073 ops/s
Iteration  24: 16288337.649 ops/s
Iteration  25: 16322710.497 ops/s
Iteration  26: 16146232.277 ops/s
Iteration  27: 16198199.561 ops/s
Iteration  28: 15964612.197 ops/s
Iteration  29: 16235183.969 ops/s
Iteration  30: 16317523.606 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_injectInto":
  16233619.840 ±(99.9%) 61432.833 ops/s [Average]
  (min, avg, max) = (15964612.197, 16233619.840, 16339533.337), stdev = 91949.780
  CI (99.9%): [16172187.006, 16295052.673] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_injectInto  thrpt   30  16233619.840 ± 61432.833  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1307499.058 ops/s
# Warmup Iteration   2: 2102119.045 ops/s
# Warmup Iteration   3: 2411958.620 ops/s
# Warmup Iteration   4: 2459058.521 ops/s
# Warmup Iteration   5: 2456784.113 ops/s
# Warmup Iteration   6: 2437518.186 ops/s
# Warmup Iteration   7: 2457383.602 ops/s
# Warmup Iteration   8: 2428209.243 ops/s
# Warmup Iteration   9: 2454962.553 ops/s
# Warmup Iteration  10: 2451751.512 ops/s
# Warmup Iteration  11: 2445158.418 ops/s
# Warmup Iteration  12: 2453753.724 ops/s
# Warmup Iteration  13: 2450954.430 ops/s
# Warmup Iteration  14: 2444762.326 ops/s
# Warmup Iteration  15: 2454093.092 ops/s
# Warmup Iteration  16: 2457362.888 ops/s
# Warmup Iteration  17: 2450531.994 ops/s
# Warmup Iteration  18: 2451550.861 ops/s
# Warmup Iteration  19: 2419179.395 ops/s
# Warmup Iteration  20: 2380452.657 ops/s
# Warmup Iteration  21: 2388026.115 ops/s
# Warmup Iteration  22: 2408445.502 ops/s
# Warmup Iteration  23: 2423022.408 ops/s
# Warmup Iteration  24: 2405595.596 ops/s
# Warmup Iteration  25: 2415519.108 ops/s
# Warmup Iteration  26: 2406671.937 ops/s
# Warmup Iteration  27: 2410080.380 ops/s
# Warmup Iteration  28: 2392524.444 ops/s
# Warmup Iteration  29: 2402155.325 ops/s
# Warmup Iteration  30: 2399945.573 ops/s
Iteration   1: 2408420.989 ops/s
Iteration   2: 2399928.805 ops/s
Iteration   3: 2405600.941 ops/s
Iteration   4: 2405625.516 ops/s
Iteration   5: 2401896.703 ops/s
Iteration   6: 2405381.602 ops/s
Iteration   7: 2406872.146 ops/s
Iteration   8: 2407637.832 ops/s
Iteration   9: 2391923.279 ops/s
Iteration  10: 2390434.383 ops/s
Iteration  11: 2388697.872 ops/s
Iteration  12: 2397897.334 ops/s
Iteration  13: 2405046.238 ops/s
Iteration  14: 2412093.923 ops/s
Iteration  15: 2391157.672 ops/s
Iteration  16: 2396547.083 ops/s
Iteration  17: 2393574.874 ops/s
Iteration  18: 2391234.635 ops/s
Iteration  19: 2409758.933 ops/s
Iteration  20: 2386512.224 ops/s
Iteration  21: 2397270.027 ops/s
Iteration  22: 2411250.972 ops/s
Iteration  23: 2381785.905 ops/s
Iteration  24: 2416637.550 ops/s
Iteration  25: 2398311.198 ops/s
Iteration  26: 2397246.904 ops/s
Iteration  27: 2400659.644 ops/s
Iteration  28: 2390775.747 ops/s
Iteration  29: 2413294.706 ops/s
Iteration  30: 2397322.586 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty":
  2400026.607 ±(99.9%) 5872.513 ops/s [Average]
  (min, avg, max) = (2381785.905, 2400026.607, 2416637.550), stdev = 8789.702
  CI (99.9%): [2394154.094, 2405899.121] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  2400026.607 ± 5872.513  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 691613.437 ops/s
# Warmup Iteration   2: 717469.422 ops/s
# Warmup Iteration   3: 959603.046 ops/s
# Warmup Iteration   4: 955774.196 ops/s
# Warmup Iteration   5: 955313.954 ops/s
# Warmup Iteration   6: 961577.205 ops/s
# Warmup Iteration   7: 944020.143 ops/s
# Warmup Iteration   8: 962526.510 ops/s
# Warmup Iteration   9: 962139.764 ops/s
# Warmup Iteration  10: 961099.150 ops/s
# Warmup Iteration  11: 946152.144 ops/s
# Warmup Iteration  12: 805825.361 ops/s
# Warmup Iteration  13: 961666.014 ops/s
# Warmup Iteration  14: 962200.009 ops/s
# Warmup Iteration  15: 962328.832 ops/s
# Warmup Iteration  16: 954399.168 ops/s
# Warmup Iteration  17: 1025326.585 ops/s
# Warmup Iteration  18: 1022075.290 ops/s
# Warmup Iteration  19: 1022416.887 ops/s
# Warmup Iteration  20: 1025284.512 ops/s
# Warmup Iteration  21: 1023165.020 ops/s
# Warmup Iteration  22: 1023099.580 ops/s
# Warmup Iteration  23: 1023979.579 ops/s
# Warmup Iteration  24: 1014945.955 ops/s
# Warmup Iteration  25: 1012162.794 ops/s
# Warmup Iteration  26: 1020416.373 ops/s
# Warmup Iteration  27: 1017275.568 ops/s
# Warmup Iteration  28: 1028781.204 ops/s
# Warmup Iteration  29: 1023250.900 ops/s
# Warmup Iteration  30: 1020589.511 ops/s
Iteration   1: 1021623.898 ops/s
Iteration   2: 1023129.133 ops/s
Iteration   3: 1026699.562 ops/s
Iteration   4: 1028273.547 ops/s
Iteration   5: 1023111.101 ops/s
Iteration   6: 1025386.912 ops/s
Iteration   7: 1023936.799 ops/s
Iteration   8: 1025911.818 ops/s
Iteration   9: 1016299.357 ops/s
Iteration  10: 1031642.842 ops/s
Iteration  11: 1023658.785 ops/s
Iteration  12: 1009045.603 ops/s
Iteration  13: 1012938.500 ops/s
Iteration  14: 1017353.372 ops/s
Iteration  15: 1027694.299 ops/s
Iteration  16: 1030797.377 ops/s
Iteration  17: 1023146.851 ops/s
Iteration  18: 1027288.850 ops/s
Iteration  19: 1024541.031 ops/s
Iteration  20: 1024366.492 ops/s
Iteration  21: 1021020.584 ops/s
Iteration  22: 1016997.792 ops/s
Iteration  23: 1002483.543 ops/s
Iteration  24: 1019443.563 ops/s
Iteration  25: 1017332.825 ops/s
Iteration  26: 1026751.778 ops/s
Iteration  27: 1023168.244 ops/s
Iteration  28: 1021468.265 ops/s
Iteration  29: 1023809.710 ops/s
Iteration  30: 1022838.144 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws":
  1022072.019 ±(99.9%) 4131.163 ops/s [Average]
  (min, avg, max) = (1002483.543, 1022072.019, 1031642.842), stdev = 6183.331
  CI (99.9%): [1017940.856, 1026203.182] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws  thrpt   30  1022072.019 ± 4131.163  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 733702.576 ops/s
# Warmup Iteration   2: 764773.111 ops/s
# Warmup Iteration   3: 1002479.007 ops/s
# Warmup Iteration   4: 1000849.446 ops/s
# Warmup Iteration   5: 998140.829 ops/s
# Warmup Iteration   6: 1009154.471 ops/s
# Warmup Iteration   7: 1008491.415 ops/s
# Warmup Iteration   8: 999626.929 ops/s
# Warmup Iteration   9: 997622.376 ops/s
# Warmup Iteration  10: 1002584.064 ops/s
# Warmup Iteration  11: 838901.772 ops/s
# Warmup Iteration  12: 1000708.537 ops/s
# Warmup Iteration  13: 996660.392 ops/s
# Warmup Iteration  14: 1008531.927 ops/s
# Warmup Iteration  15: 1002260.466 ops/s
# Warmup Iteration  16: 1006313.186 ops/s
# Warmup Iteration  17: 1066080.681 ops/s
# Warmup Iteration  18: 1064775.407 ops/s
# Warmup Iteration  19: 1061557.304 ops/s
# Warmup Iteration  20: 1070411.349 ops/s
# Warmup Iteration  21: 1063776.634 ops/s
# Warmup Iteration  22: 1064576.296 ops/s
# Warmup Iteration  23: 1066787.392 ops/s
# Warmup Iteration  24: 1066027.407 ops/s
# Warmup Iteration  25: 1069524.687 ops/s
# Warmup Iteration  26: 1057142.444 ops/s
# Warmup Iteration  27: 1069083.568 ops/s
# Warmup Iteration  28: 1057757.086 ops/s
# Warmup Iteration  29: 1065342.100 ops/s
# Warmup Iteration  30: 1067562.534 ops/s
Iteration   1: 1065003.884 ops/s
Iteration   2: 1069421.648 ops/s
Iteration   3: 1070870.556 ops/s
Iteration   4: 1062418.499 ops/s
Iteration   5: 1064410.845 ops/s
Iteration   6: 1068890.978 ops/s
Iteration   7: 1072429.810 ops/s
Iteration   8: 1061781.125 ops/s
Iteration   9: 1063051.719 ops/s
Iteration  10: 1066031.926 ops/s
Iteration  11: 1067290.427 ops/s
Iteration  12: 1049739.209 ops/s
Iteration  13: 1069842.254 ops/s
Iteration  14: 1064978.348 ops/s
Iteration  15: 1064710.985 ops/s
Iteration  16: 1068700.381 ops/s
Iteration  17: 1053001.963 ops/s
Iteration  18: 1061192.793 ops/s
Iteration  19: 1067166.214 ops/s
Iteration  20: 1065445.977 ops/s
Iteration  21: 1070138.040 ops/s
Iteration  22: 1069565.433 ops/s
Iteration  23: 1064575.185 ops/s
Iteration  24: 1060010.907 ops/s
Iteration  25: 1062467.489 ops/s
Iteration  26: 1065291.980 ops/s
Iteration  27: 1070343.928 ops/s
Iteration  28: 1065616.298 ops/s
Iteration  29: 1067975.197 ops/s
Iteration  30: 1048880.122 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList":
  1064708.137 ±(99.9%) 3842.400 ops/s [Average]
  (min, avg, max) = (1048880.122, 1064708.137, 1072429.810), stdev = 5751.125
  CI (99.9%): [1060865.737, 1068550.538] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1064708.137 ± 3842.400  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 636233.424 ops/s
# Warmup Iteration   2: 653247.787 ops/s
# Warmup Iteration   3: 858607.654 ops/s
# Warmup Iteration   4: 868669.476 ops/s
# Warmup Iteration   5: 864251.423 ops/s
# Warmup Iteration   6: 860488.352 ops/s
# Warmup Iteration   7: 868654.774 ops/s
# Warmup Iteration   8: 859431.174 ops/s
# Warmup Iteration   9: 865424.528 ops/s
# Warmup Iteration  10: 864758.626 ops/s
# Warmup Iteration  11: 867756.455 ops/s
# Warmup Iteration  12: 715655.399 ops/s
# Warmup Iteration  13: 864032.449 ops/s
# Warmup Iteration  14: 867258.478 ops/s
# Warmup Iteration  15: 868509.553 ops/s
# Warmup Iteration  16: 857205.531 ops/s
# Warmup Iteration  17: 917919.299 ops/s
# Warmup Iteration  18: 917694.092 ops/s
# Warmup Iteration  19: 909114.657 ops/s
# Warmup Iteration  20: 920483.072 ops/s
# Warmup Iteration  21: 919237.419 ops/s
# Warmup Iteration  22: 918348.463 ops/s
# Warmup Iteration  23: 913545.013 ops/s
# Warmup Iteration  24: 918309.453 ops/s
# Warmup Iteration  25: 914540.209 ops/s
# Warmup Iteration  26: 919102.239 ops/s
# Warmup Iteration  27: 917784.982 ops/s
# Warmup Iteration  28: 916833.982 ops/s
# Warmup Iteration  29: 916813.960 ops/s
# Warmup Iteration  30: 910237.404 ops/s
Iteration   1: 919818.411 ops/s
Iteration   2: 899522.119 ops/s
Iteration   3: 920146.274 ops/s
Iteration   4: 919068.780 ops/s
Iteration   5: 917728.744 ops/s
Iteration   6: 917061.951 ops/s
Iteration   7: 916579.175 ops/s
Iteration   8: 919926.911 ops/s
Iteration   9: 915237.634 ops/s
Iteration  10: 919449.295 ops/s
Iteration  11: 914210.903 ops/s
Iteration  12: 919455.981 ops/s
Iteration  13: 917968.365 ops/s
Iteration  14: 918331.657 ops/s
Iteration  15: 916804.565 ops/s
Iteration  16: 925509.859 ops/s
Iteration  17: 917819.668 ops/s
Iteration  18: 918683.954 ops/s
Iteration  19: 913352.347 ops/s
Iteration  20: 918275.898 ops/s
Iteration  21: 923112.150 ops/s
Iteration  22: 922104.441 ops/s
Iteration  23: 920676.858 ops/s
Iteration  24: 909416.026 ops/s
Iteration  25: 918040.863 ops/s
Iteration  26: 916069.764 ops/s
Iteration  27: 914888.084 ops/s
Iteration  28: 920421.275 ops/s
Iteration  29: 921085.495 ops/s
Iteration  30: 925204.207 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  917865.722 ±(99.9%) 3205.312 ops/s [Average]
  (min, avg, max) = (899522.119, 917865.722, 925509.859), stdev = 4797.560
  CI (99.9%): [914660.410, 921071.033] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  917865.722 ± 3205.312  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 735687.924 ops/s
# Warmup Iteration   2: 802288.180 ops/s
# Warmup Iteration   3: 1026448.800 ops/s
# Warmup Iteration   4: 1018515.892 ops/s
# Warmup Iteration   5: 1021210.786 ops/s
# Warmup Iteration   6: 1017655.443 ops/s
# Warmup Iteration   7: 1015745.138 ops/s
# Warmup Iteration   8: 1018188.132 ops/s
# Warmup Iteration   9: 1030439.479 ops/s
# Warmup Iteration  10: 978088.681 ops/s
# Warmup Iteration  11: 898909.502 ops/s
# Warmup Iteration  12: 1025751.382 ops/s
# Warmup Iteration  13: 1024807.485 ops/s
# Warmup Iteration  14: 1021268.963 ops/s
# Warmup Iteration  15: 1027710.835 ops/s
# Warmup Iteration  16: 1013995.518 ops/s
# Warmup Iteration  17: 1084060.753 ops/s
# Warmup Iteration  18: 1088193.200 ops/s
# Warmup Iteration  19: 1085211.274 ops/s
# Warmup Iteration  20: 1084556.326 ops/s
# Warmup Iteration  21: 1077940.617 ops/s
# Warmup Iteration  22: 1083728.215 ops/s
# Warmup Iteration  23: 1087294.661 ops/s
# Warmup Iteration  24: 1088870.427 ops/s
# Warmup Iteration  25: 1083344.976 ops/s
# Warmup Iteration  26: 1071590.945 ops/s
# Warmup Iteration  27: 1079755.215 ops/s
# Warmup Iteration  28: 1082030.452 ops/s
# Warmup Iteration  29: 1075958.171 ops/s
# Warmup Iteration  30: 1088088.405 ops/s
Iteration   1: 1092010.491 ops/s
Iteration   2: 1089178.645 ops/s
Iteration   3: 1084554.506 ops/s
Iteration   4: 1090086.622 ops/s
Iteration   5: 1080256.181 ops/s
Iteration   6: 1085205.224 ops/s
Iteration   7: 1082843.496 ops/s
Iteration   8: 1082999.517 ops/s
Iteration   9: 1078836.724 ops/s
Iteration  10: 1072450.820 ops/s
Iteration  11: 1080754.489 ops/s
Iteration  12: 1086528.683 ops/s
Iteration  13: 1068728.512 ops/s
Iteration  14: 1087200.484 ops/s
Iteration  15: 1080194.899 ops/s
Iteration  16: 1087061.960 ops/s
Iteration  17: 1089140.412 ops/s
Iteration  18: 1077091.551 ops/s
Iteration  19: 1087458.475 ops/s
Iteration  20: 1086358.575 ops/s
Iteration  21: 1091629.235 ops/s
Iteration  22: 1087887.207 ops/s
Iteration  23: 1089621.299 ops/s
Iteration  24: 1088061.815 ops/s
Iteration  25: 1087842.463 ops/s
Iteration  26: 1092914.660 ops/s
Iteration  27: 1090898.924 ops/s
Iteration  28: 1086066.398 ops/s
Iteration  29: 1082360.618 ops/s
Iteration  30: 1084461.475 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  1085022.812 ±(99.9%) 3765.420 ops/s [Average]
  (min, avg, max) = (1068728.512, 1085022.812, 1092914.660), stdev = 5635.903
  CI (99.9%): [1081257.392, 1088788.232] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                Mode  Cnt        Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  1085022.812 ± 3765.420  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 748071.258 ops/s
# Warmup Iteration   2: 803791.420 ops/s
# Warmup Iteration   3: 1014132.580 ops/s
# Warmup Iteration   4: 1026665.709 ops/s
# Warmup Iteration   5: 1016003.092 ops/s
# Warmup Iteration   6: 1023806.747 ops/s
# Warmup Iteration   7: 1022864.221 ops/s
# Warmup Iteration   8: 1028172.206 ops/s
# Warmup Iteration   9: 1028130.859 ops/s
# Warmup Iteration  10: 981639.353 ops/s
# Warmup Iteration  11: 895938.324 ops/s
# Warmup Iteration  12: 1027670.965 ops/s
# Warmup Iteration  13: 1002671.374 ops/s
# Warmup Iteration  14: 1029965.496 ops/s
# Warmup Iteration  15: 1020423.020 ops/s
# Warmup Iteration  16: 1024155.116 ops/s
# Warmup Iteration  17: 1079635.534 ops/s
# Warmup Iteration  18: 1084484.435 ops/s
# Warmup Iteration  19: 1082198.342 ops/s
# Warmup Iteration  20: 1094618.084 ops/s
# Warmup Iteration  21: 1080153.543 ops/s
# Warmup Iteration  22: 1083305.332 ops/s
# Warmup Iteration  23: 1088397.704 ops/s
# Warmup Iteration  24: 1090619.517 ops/s
# Warmup Iteration  25: 1090708.075 ops/s
# Warmup Iteration  26: 1093743.710 ops/s
# Warmup Iteration  27: 1085636.253 ops/s
# Warmup Iteration  28: 1083573.253 ops/s
# Warmup Iteration  29: 1077661.457 ops/s
# Warmup Iteration  30: 1068370.642 ops/s
Iteration   1: 1074581.736 ops/s
Iteration   2: 1092649.470 ops/s
Iteration   3: 1087984.118 ops/s
Iteration   4: 1088204.506 ops/s
Iteration   5: 1087514.348 ops/s
Iteration   6: 1096173.687 ops/s
Iteration   7: 1086634.207 ops/s
Iteration   8: 1084274.485 ops/s
Iteration   9: 1081387.065 ops/s
Iteration  10: 1074561.667 ops/s
Iteration  11: 1089180.860 ops/s
Iteration  12: 1072480.352 ops/s
Iteration  13: 1086404.338 ops/s
Iteration  14: 1085436.084 ops/s
Iteration  15: 1083685.306 ops/s
Iteration  16: 1090153.747 ops/s
Iteration  17: 1093104.565 ops/s
Iteration  18: 1091914.969 ops/s
Iteration  19: 1076837.153 ops/s
Iteration  20: 1074273.707 ops/s
Iteration  21: 1092400.921 ops/s
Iteration  22: 1071492.578 ops/s
Iteration  23: 1075824.566 ops/s
Iteration  24: 1088999.207 ops/s
Iteration  25: 1080164.630 ops/s
Iteration  26: 1091021.860 ops/s
Iteration  27: 1086745.100 ops/s
Iteration  28: 1090648.802 ops/s
Iteration  29: 1076699.769 ops/s
Iteration  30: 1091593.659 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1084767.582 ±(99.9%) 4781.309 ops/s [Average]
  (min, avg, max) = (1071492.578, 1084767.582, 1096173.687), stdev = 7156.439
  CI (99.9%): [1079986.273, 1089548.891] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                Mode  Cnt        Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1084767.582 ± 4781.309  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 624178.547 ops/s
# Warmup Iteration   2: 1314012.328 ops/s
# Warmup Iteration   3: 1318384.713 ops/s
# Warmup Iteration   4: 1096963.446 ops/s
# Warmup Iteration   5: 1313613.611 ops/s
# Warmup Iteration   6: 1302473.272 ops/s
# Warmup Iteration   7: 1319129.961 ops/s
# Warmup Iteration   8: 1293046.058 ops/s
# Warmup Iteration   9: 1304244.293 ops/s
# Warmup Iteration  10: 1313258.055 ops/s
# Warmup Iteration  11: 1314015.770 ops/s
# Warmup Iteration  12: 1320943.146 ops/s
# Warmup Iteration  13: 1306219.613 ops/s
# Warmup Iteration  14: 1302958.840 ops/s
# Warmup Iteration  15: 1314268.693 ops/s
# Warmup Iteration  16: 1304855.388 ops/s
# Warmup Iteration  17: 1313155.289 ops/s
# Warmup Iteration  18: 1299346.141 ops/s
# Warmup Iteration  19: 1311555.332 ops/s
# Warmup Iteration  20: 1302487.360 ops/s
# Warmup Iteration  21: 1325697.203 ops/s
# Warmup Iteration  22: 1304904.651 ops/s
# Warmup Iteration  23: 1301078.682 ops/s
# Warmup Iteration  24: 1310631.432 ops/s
# Warmup Iteration  25: 1301284.101 ops/s
# Warmup Iteration  26: 1310668.690 ops/s
# Warmup Iteration  27: 1322012.716 ops/s
# Warmup Iteration  28: 1307941.166 ops/s
# Warmup Iteration  29: 1315033.815 ops/s
# Warmup Iteration  30: 1299753.166 ops/s
Iteration   1: 1308256.289 ops/s
Iteration   2: 1296580.788 ops/s
Iteration   3: 1305478.773 ops/s
Iteration   4: 1303603.242 ops/s
Iteration   5: 1300165.398 ops/s
Iteration   6: 1308502.407 ops/s
Iteration   7: 1295925.472 ops/s
Iteration   8: 1298037.827 ops/s
Iteration   9: 1285192.161 ops/s
Iteration  10: 1303817.319 ops/s
Iteration  11: 1322157.001 ops/s
Iteration  12: 1320602.610 ops/s
Iteration  13: 1270773.559 ops/s
Iteration  14: 1287181.901 ops/s
Iteration  15: 1299599.980 ops/s
Iteration  16: 1300763.285 ops/s
Iteration  17: 1284952.223 ops/s
Iteration  18: 1290481.394 ops/s
Iteration  19: 1307988.519 ops/s
Iteration  20: 1311948.442 ops/s
Iteration  21: 1279608.357 ops/s
Iteration  22: 1297735.757 ops/s
Iteration  23: 1292336.239 ops/s
Iteration  24: 1294814.681 ops/s
Iteration  25: 1299436.252 ops/s
Iteration  26: 1314561.092 ops/s
Iteration  27: 1257861.128 ops/s
Iteration  28: 1301583.292 ops/s
Iteration  29: 1287469.725 ops/s
Iteration  30: 1313276.713 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_makeString":
  1298023.061 ±(99.9%) 9301.480 ops/s [Average]
  (min, avg, max) = (1257861.128, 1298023.061, 1322157.001), stdev = 13922.019
  CI (99.9%): [1288721.580, 1307324.541] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_makeString  thrpt   30  1298023.061 ± 9301.480  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 163267775.854 ops/s
# Warmup Iteration   2: 300901966.638 ops/s
# Warmup Iteration   3: 261289701.227 ops/s
# Warmup Iteration   4: 305651543.380 ops/s
# Warmup Iteration   5: 307434067.309 ops/s
# Warmup Iteration   6: 304754873.892 ops/s
# Warmup Iteration   7: 304725635.345 ops/s
# Warmup Iteration   8: 306554287.952 ops/s
# Warmup Iteration   9: 304703624.616 ops/s
# Warmup Iteration  10: 304526360.868 ops/s
# Warmup Iteration  11: 301875238.961 ops/s
# Warmup Iteration  12: 303293072.600 ops/s
# Warmup Iteration  13: 302802428.780 ops/s
# Warmup Iteration  14: 300777362.568 ops/s
# Warmup Iteration  15: 303651499.348 ops/s
# Warmup Iteration  16: 304251092.921 ops/s
# Warmup Iteration  17: 301642255.120 ops/s
# Warmup Iteration  18: 304684097.604 ops/s
# Warmup Iteration  19: 304749962.831 ops/s
# Warmup Iteration  20: 303748022.850 ops/s
# Warmup Iteration  21: 296625093.526 ops/s
# Warmup Iteration  22: 299830968.647 ops/s
# Warmup Iteration  23: 299497150.669 ops/s
# Warmup Iteration  24: 302940478.260 ops/s
# Warmup Iteration  25: 303076811.731 ops/s
# Warmup Iteration  26: 305577716.483 ops/s
# Warmup Iteration  27: 300056678.764 ops/s
# Warmup Iteration  28: 304450216.971 ops/s
# Warmup Iteration  29: 306405833.289 ops/s
# Warmup Iteration  30: 305024401.324 ops/s
Iteration   1: 306101596.393 ops/s
Iteration   2: 306392176.909 ops/s
Iteration   3: 305646291.144 ops/s
Iteration   4: 304705691.320 ops/s
Iteration   5: 304552530.960 ops/s
Iteration   6: 304580432.991 ops/s
Iteration   7: 303534070.347 ops/s
Iteration   8: 303717758.405 ops/s
Iteration   9: 302861625.988 ops/s
Iteration  10: 305160381.060 ops/s
Iteration  11: 295918418.195 ops/s
Iteration  12: 301748820.947 ops/s
Iteration  13: 304585568.786 ops/s
Iteration  14: 304247417.798 ops/s
Iteration  15: 299979068.615 ops/s
Iteration  16: 300570878.421 ops/s
Iteration  17: 303420304.870 ops/s
Iteration  18: 305968919.016 ops/s
Iteration  19: 306110178.164 ops/s
Iteration  20: 302606865.511 ops/s
Iteration  21: 303425864.215 ops/s
Iteration  22: 298066593.752 ops/s
Iteration  23: 305498371.093 ops/s
Iteration  24: 302740084.204 ops/s
Iteration  25: 304602601.838 ops/s
Iteration  26: 304068428.229 ops/s
Iteration  27: 305799804.134 ops/s
Iteration  28: 305472492.906 ops/s
Iteration  29: 306810649.918 ops/s
Iteration  30: 305706065.475 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_newCollection":
  303819998.387 ±(99.9%) 1670176.268 ops/s [Average]
  (min, avg, max) = (295918418.195, 303819998.387, 306810649.918), stdev = 2499841.401
  CI (99.9%): [302149822.119, 305490174.655] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt          Score         Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_newCollection  thrpt   30  303819998.387 ± 1670176.268  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2515586.871 ops/s
# Warmup Iteration   2: 4771133.864 ops/s
# Warmup Iteration   3: 4655403.582 ops/s
# Warmup Iteration   4: 5108071.279 ops/s
# Warmup Iteration   5: 5167003.570 ops/s
# Warmup Iteration   6: 5169647.222 ops/s
# Warmup Iteration   7: 5120905.014 ops/s
# Warmup Iteration   8: 5118330.500 ops/s
# Warmup Iteration   9: 5153804.578 ops/s
# Warmup Iteration  10: 5136341.356 ops/s
# Warmup Iteration  11: 5130199.936 ops/s
# Warmup Iteration  12: 5171983.123 ops/s
# Warmup Iteration  13: 5139114.268 ops/s
# Warmup Iteration  14: 5159618.563 ops/s
# Warmup Iteration  15: 5118923.531 ops/s
# Warmup Iteration  16: 5162636.829 ops/s
# Warmup Iteration  17: 5173945.774 ops/s
# Warmup Iteration  18: 5031987.259 ops/s
# Warmup Iteration  19: 5138610.304 ops/s
# Warmup Iteration  20: 5054284.302 ops/s
# Warmup Iteration  21: 5187717.261 ops/s
# Warmup Iteration  22: 5078649.121 ops/s
# Warmup Iteration  23: 5105172.644 ops/s
# Warmup Iteration  24: 5107871.337 ops/s
# Warmup Iteration  25: 5105956.832 ops/s
# Warmup Iteration  26: 5101806.367 ops/s
# Warmup Iteration  27: 5157858.800 ops/s
# Warmup Iteration  28: 5082256.112 ops/s
# Warmup Iteration  29: 5173345.881 ops/s
# Warmup Iteration  30: 5121470.798 ops/s
Iteration   1: 5149875.179 ops/s
Iteration   2: 5203865.727 ops/s
Iteration   3: 5039377.133 ops/s
Iteration   4: 5039469.217 ops/s
Iteration   5: 5174081.129 ops/s
Iteration   6: 5181773.285 ops/s
Iteration   7: 5113739.652 ops/s
Iteration   8: 5142440.950 ops/s
Iteration   9: 5197475.400 ops/s
Iteration  10: 5139473.489 ops/s
Iteration  11: 5131767.664 ops/s
Iteration  12: 5148448.606 ops/s
Iteration  13: 5132215.969 ops/s
Iteration  14: 5177927.114 ops/s
Iteration  15: 5138746.779 ops/s
Iteration  16: 5188693.012 ops/s
Iteration  17: 5140801.674 ops/s
Iteration  18: 5166393.487 ops/s
Iteration  19: 5047629.610 ops/s
Iteration  20: 5133676.466 ops/s
Iteration  21: 5153209.521 ops/s
Iteration  22: 5169744.614 ops/s
Iteration  23: 5159422.339 ops/s
Iteration  24: 5168194.785 ops/s
Iteration  25: 5153270.855 ops/s
Iteration  26: 5096786.249 ops/s
Iteration  27: 5167176.305 ops/s
Iteration  28: 5102722.923 ops/s
Iteration  29: 5208783.539 ops/s
Iteration  30: 5164485.530 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith":
  5144388.940 ±(99.9%) 29293.579 ops/s [Average]
  (min, avg, max) = (5039377.133, 5144388.940, 5208783.539), stdev = 43845.253
  CI (99.9%): [5115095.361, 5173682.519] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith  thrpt   30  5144388.940 ± 29293.579  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1377479.334 ops/s
# Warmup Iteration   2: 2833437.700 ops/s
# Warmup Iteration   3: 2387545.711 ops/s
# Warmup Iteration   4: 2871771.236 ops/s
# Warmup Iteration   5: 2882183.125 ops/s
# Warmup Iteration   6: 2858458.641 ops/s
# Warmup Iteration   7: 2876257.303 ops/s
# Warmup Iteration   8: 2856105.811 ops/s
# Warmup Iteration   9: 2882440.925 ops/s
# Warmup Iteration  10: 2855601.177 ops/s
# Warmup Iteration  11: 2885187.140 ops/s
# Warmup Iteration  12: 2890046.922 ops/s
# Warmup Iteration  13: 2881435.855 ops/s
# Warmup Iteration  14: 2879278.856 ops/s
# Warmup Iteration  15: 2855077.783 ops/s
# Warmup Iteration  16: 2874216.904 ops/s
# Warmup Iteration  17: 2832662.465 ops/s
# Warmup Iteration  18: 2838296.769 ops/s
# Warmup Iteration  19: 2877643.141 ops/s
# Warmup Iteration  20: 2876757.701 ops/s
# Warmup Iteration  21: 2884005.057 ops/s
# Warmup Iteration  22: 2870578.610 ops/s
# Warmup Iteration  23: 2884478.178 ops/s
# Warmup Iteration  24: 2882358.761 ops/s
# Warmup Iteration  25: 2850941.549 ops/s
# Warmup Iteration  26: 2884073.028 ops/s
# Warmup Iteration  27: 2851163.288 ops/s
# Warmup Iteration  28: 2871697.250 ops/s
# Warmup Iteration  29: 2889026.337 ops/s
# Warmup Iteration  30: 2883577.267 ops/s
Iteration   1: 2876058.554 ops/s
Iteration   2: 2868700.268 ops/s
Iteration   3: 2851668.032 ops/s
Iteration   4: 2889331.080 ops/s
Iteration   5: 2884433.023 ops/s
Iteration   6: 2873650.346 ops/s
Iteration   7: 2860643.007 ops/s
Iteration   8: 2893405.116 ops/s
Iteration   9: 2881827.939 ops/s
Iteration  10: 2885658.329 ops/s
Iteration  11: 2898472.830 ops/s
Iteration  12: 2872292.250 ops/s
Iteration  13: 2887416.928 ops/s
Iteration  14: 2884219.736 ops/s
Iteration  15: 2848797.426 ops/s
Iteration  16: 2887710.920 ops/s
Iteration  17: 2864493.653 ops/s
Iteration  18: 2847510.507 ops/s
Iteration  19: 2839934.666 ops/s
Iteration  20: 2878501.973 ops/s
Iteration  21: 2889762.533 ops/s
Iteration  22: 2837831.309 ops/s
Iteration  23: 2878527.311 ops/s
Iteration  24: 2824536.840 ops/s
Iteration  25: 2864922.634 ops/s
Iteration  26: 2874602.971 ops/s
Iteration  27: 2839367.615 ops/s
Iteration  28: 2882253.544 ops/s
Iteration  29: 2881807.596 ops/s
Iteration  30: 2874878.844 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy":
  2870773.926 ±(99.9%) 12672.280 ops/s [Average]
  (min, avg, max) = (2824536.840, 2870773.926, 2898472.830), stdev = 18967.274
  CI (99.9%): [2858101.645, 2883446.206] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy  thrpt   30  2870773.926 ± 12672.280  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4344535.474 ops/s
# Warmup Iteration   2: 6980684.769 ops/s
# Warmup Iteration   3: 8277276.206 ops/s
# Warmup Iteration   4: 8390039.904 ops/s
# Warmup Iteration   5: 8378218.138 ops/s
# Warmup Iteration   6: 8262811.977 ops/s
# Warmup Iteration   7: 8285422.941 ops/s
# Warmup Iteration   8: 8297417.234 ops/s
# Warmup Iteration   9: 8315774.527 ops/s
# Warmup Iteration  10: 8323145.923 ops/s
# Warmup Iteration  11: 8287474.750 ops/s
# Warmup Iteration  12: 8312032.235 ops/s
# Warmup Iteration  13: 8361471.416 ops/s
# Warmup Iteration  14: 8276351.553 ops/s
# Warmup Iteration  15: 8330354.090 ops/s
# Warmup Iteration  16: 8281138.949 ops/s
# Warmup Iteration  17: 8318442.520 ops/s
# Warmup Iteration  18: 8368047.591 ops/s
# Warmup Iteration  19: 8341520.546 ops/s
# Warmup Iteration  20: 8408124.430 ops/s
# Warmup Iteration  21: 8380582.035 ops/s
# Warmup Iteration  22: 8401802.969 ops/s
# Warmup Iteration  23: 8363438.456 ops/s
# Warmup Iteration  24: 8377182.936 ops/s
# Warmup Iteration  25: 8383541.501 ops/s
# Warmup Iteration  26: 8311066.710 ops/s
# Warmup Iteration  27: 8337502.986 ops/s
# Warmup Iteration  28: 8271207.838 ops/s
# Warmup Iteration  29: 8375386.215 ops/s
# Warmup Iteration  30: 8374207.002 ops/s
Iteration   1: 8244385.765 ops/s
Iteration   2: 8347889.374 ops/s
Iteration   3: 8360235.183 ops/s
Iteration   4: 8373732.932 ops/s
Iteration   5: 7742337.000 ops/s
Iteration   6: 8253335.772 ops/s
Iteration   7: 8420389.280 ops/s
Iteration   8: 8422712.290 ops/s
Iteration   9: 8419516.757 ops/s
Iteration  10: 8324037.181 ops/s
Iteration  11: 8414106.710 ops/s
Iteration  12: 8428403.770 ops/s
Iteration  13: 8376443.428 ops/s
Iteration  14: 8362439.205 ops/s
Iteration  15: 8382697.885 ops/s
Iteration  16: 8113125.818 ops/s
Iteration  17: 8156058.889 ops/s
Iteration  18: 8379910.859 ops/s
Iteration  19: 8394140.733 ops/s
Iteration  20: 8426564.783 ops/s
Iteration  21: 8432722.364 ops/s
Iteration  22: 8375555.679 ops/s
Iteration  23: 8381174.635 ops/s
Iteration  24: 8416690.648 ops/s
Iteration  25: 8304766.977 ops/s
Iteration  26: 8392037.016 ops/s
Iteration  27: 8411632.543 ops/s
Iteration  28: 8291431.715 ops/s
Iteration  29: 8361611.846 ops/s
Iteration  30: 8406430.213 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty":
  8337217.242 ±(99.9%) 91435.142 ops/s [Average]
  (min, avg, max) = (7742337.000, 8337217.242, 8432722.364), stdev = 136855.826
  CI (99.9%): [8245782.100, 8428652.383] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty  thrpt   30  8337217.242 ± 91435.142  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1444694.812 ops/s
# Warmup Iteration   2: 3220945.352 ops/s
# Warmup Iteration   3: 2705953.930 ops/s
# Warmup Iteration   4: 3239664.958 ops/s
# Warmup Iteration   5: 3234419.550 ops/s
# Warmup Iteration   6: 3215608.149 ops/s
# Warmup Iteration   7: 3241545.489 ops/s
# Warmup Iteration   8: 3199456.830 ops/s
# Warmup Iteration   9: 3235168.897 ops/s
# Warmup Iteration  10: 3221293.848 ops/s
# Warmup Iteration  11: 3198371.187 ops/s
# Warmup Iteration  12: 3229509.098 ops/s
# Warmup Iteration  13: 3239485.728 ops/s
# Warmup Iteration  14: 3236254.319 ops/s
# Warmup Iteration  15: 3217019.758 ops/s
# Warmup Iteration  16: 3190595.062 ops/s
# Warmup Iteration  17: 3227040.064 ops/s
# Warmup Iteration  18: 3235376.870 ops/s
# Warmup Iteration  19: 3216321.399 ops/s
# Warmup Iteration  20: 3211741.541 ops/s
# Warmup Iteration  21: 3197399.673 ops/s
# Warmup Iteration  22: 3219656.640 ops/s
# Warmup Iteration  23: 3231638.330 ops/s
# Warmup Iteration  24: 3210131.861 ops/s
# Warmup Iteration  25: 3201414.093 ops/s
# Warmup Iteration  26: 3238050.078 ops/s
# Warmup Iteration  27: 3213980.827 ops/s
# Warmup Iteration  28: 3238077.627 ops/s
# Warmup Iteration  29: 3230004.645 ops/s
# Warmup Iteration  30: 3235164.103 ops/s
Iteration   1: 3207759.668 ops/s
Iteration   2: 3165268.893 ops/s
Iteration   3: 3233404.869 ops/s
Iteration   4: 3171413.421 ops/s
Iteration   5: 3246398.082 ops/s
Iteration   6: 3237660.471 ops/s
Iteration   7: 3183189.280 ops/s
Iteration   8: 3242485.975 ops/s
Iteration   9: 3220157.670 ops/s
Iteration  10: 3246667.521 ops/s
Iteration  11: 3200449.922 ops/s
Iteration  12: 3135738.882 ops/s
Iteration  13: 3231755.090 ops/s
Iteration  14: 3220851.676 ops/s
Iteration  15: 3235304.021 ops/s
Iteration  16: 3216512.497 ops/s
Iteration  17: 3237450.175 ops/s
Iteration  18: 3216151.339 ops/s
Iteration  19: 3242036.453 ops/s
Iteration  20: 3227474.069 ops/s
Iteration  21: 3216786.074 ops/s
Iteration  22: 3243902.833 ops/s
Iteration  23: 3232053.953 ops/s
Iteration  24: 3227727.301 ops/s
Iteration  25: 3246182.790 ops/s
Iteration  26: 3199461.550 ops/s
Iteration  27: 3128295.422 ops/s
Iteration  28: 3251796.975 ops/s
Iteration  29: 3211833.937 ops/s
Iteration  30: 3223059.740 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_reduce":
  3216641.018 ±(99.9%) 21144.644 ops/s [Average]
  (min, avg, max) = (3128295.422, 3216641.018, 3251796.975), stdev = 31648.310
  CI (99.9%): [3195496.374, 3237785.662] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_reduce  thrpt   30  3216641.018 ± 21144.644  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1242840.767 ops/s
# Warmup Iteration   2: 2721032.489 ops/s
# Warmup Iteration   3: 2272979.648 ops/s
# Warmup Iteration   4: 2741841.967 ops/s
# Warmup Iteration   5: 2715843.266 ops/s
# Warmup Iteration   6: 2727166.377 ops/s
# Warmup Iteration   7: 2741907.697 ops/s
# Warmup Iteration   8: 2742727.974 ops/s
# Warmup Iteration   9: 2700960.294 ops/s
# Warmup Iteration  10: 2692736.318 ops/s
# Warmup Iteration  11: 2735588.709 ops/s
# Warmup Iteration  12: 2732298.241 ops/s
# Warmup Iteration  13: 2740428.827 ops/s
# Warmup Iteration  14: 2714054.363 ops/s
# Warmup Iteration  15: 2748272.853 ops/s
# Warmup Iteration  16: 2714330.114 ops/s
# Warmup Iteration  17: 2727198.914 ops/s
# Warmup Iteration  18: 2710869.522 ops/s
# Warmup Iteration  19: 2728935.446 ops/s
# Warmup Iteration  20: 2738178.942 ops/s
# Warmup Iteration  21: 2715366.205 ops/s
# Warmup Iteration  22: 2742945.279 ops/s
# Warmup Iteration  23: 2722675.461 ops/s
# Warmup Iteration  24: 2700470.416 ops/s
# Warmup Iteration  25: 2743912.273 ops/s
# Warmup Iteration  26: 2720845.826 ops/s
# Warmup Iteration  27: 2734100.141 ops/s
# Warmup Iteration  28: 2725480.023 ops/s
# Warmup Iteration  29: 2725937.681 ops/s
# Warmup Iteration  30: 2730935.541 ops/s
Iteration   1: 2731835.485 ops/s
Iteration   2: 2736560.907 ops/s
Iteration   3: 2748288.155 ops/s
Iteration   4: 2729913.191 ops/s
Iteration   5: 2736311.888 ops/s
Iteration   6: 2739462.053 ops/s
Iteration   7: 2750330.410 ops/s
Iteration   8: 2747302.632 ops/s
Iteration   9: 2741765.472 ops/s
Iteration  10: 2718271.832 ops/s
Iteration  11: 2747319.159 ops/s
Iteration  12: 2740806.657 ops/s
Iteration  13: 2747162.943 ops/s
Iteration  14: 2736591.428 ops/s
Iteration  15: 2698660.685 ops/s
Iteration  16: 2727516.301 ops/s
Iteration  17: 2729904.793 ops/s
Iteration  18: 2687199.461 ops/s
Iteration  19: 2747932.211 ops/s
Iteration  20: 2745793.995 ops/s
Iteration  21: 2717600.685 ops/s
Iteration  22: 2724973.805 ops/s
Iteration  23: 2725497.398 ops/s
Iteration  24: 2692075.448 ops/s
Iteration  25: 2714753.277 ops/s
Iteration  26: 2746712.766 ops/s
Iteration  27: 2698987.705 ops/s
Iteration  28: 2667020.109 ops/s
Iteration  29: 2740421.137 ops/s
Iteration  30: 2725514.322 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty":
  2728082.877 ±(99.9%) 14003.980 ops/s [Average]
  (min, avg, max) = (2667020.109, 2728082.877, 2750330.410), stdev = 20960.499
  CI (99.9%): [2714078.897, 2742086.857] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  2728082.877 ± 14003.980  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 712570.054 ops/s
# Warmup Iteration   2: 743733.918 ops/s
# Warmup Iteration   3: 983520.680 ops/s
# Warmup Iteration   4: 995929.978 ops/s
# Warmup Iteration   5: 984361.544 ops/s
# Warmup Iteration   6: 992040.198 ops/s
# Warmup Iteration   7: 985875.221 ops/s
# Warmup Iteration   8: 994422.874 ops/s
# Warmup Iteration   9: 986052.429 ops/s
# Warmup Iteration  10: 993877.121 ops/s
# Warmup Iteration  11: 827564.773 ops/s
# Warmup Iteration  12: 990000.953 ops/s
# Warmup Iteration  13: 989295.511 ops/s
# Warmup Iteration  14: 992828.824 ops/s
# Warmup Iteration  15: 996498.905 ops/s
# Warmup Iteration  16: 1001013.017 ops/s
# Warmup Iteration  17: 1053469.791 ops/s
# Warmup Iteration  18: 1046208.811 ops/s
# Warmup Iteration  19: 1051929.943 ops/s
# Warmup Iteration  20: 1055153.266 ops/s
# Warmup Iteration  21: 1045374.820 ops/s
# Warmup Iteration  22: 1045105.782 ops/s
# Warmup Iteration  23: 1059188.687 ops/s
# Warmup Iteration  24: 1050712.193 ops/s
# Warmup Iteration  25: 1062798.493 ops/s
# Warmup Iteration  26: 1058440.348 ops/s
# Warmup Iteration  27: 1056917.259 ops/s
# Warmup Iteration  28: 1049859.848 ops/s
# Warmup Iteration  29: 1062653.515 ops/s
# Warmup Iteration  30: 1063154.592 ops/s
Iteration   1: 1045646.186 ops/s
Iteration   2: 1052818.225 ops/s
Iteration   3: 1060612.205 ops/s
Iteration   4: 1058602.387 ops/s
Iteration   5: 1054890.661 ops/s
Iteration   6: 1049798.814 ops/s
Iteration   7: 1037297.863 ops/s
Iteration   8: 1062345.377 ops/s
Iteration   9: 1056499.773 ops/s
Iteration  10: 1050482.289 ops/s
Iteration  11: 1056911.363 ops/s
Iteration  12: 1056237.199 ops/s
Iteration  13: 1060322.546 ops/s
Iteration  14: 1058911.260 ops/s
Iteration  15: 1053282.529 ops/s
Iteration  16: 1039883.374 ops/s
Iteration  17: 1050666.098 ops/s
Iteration  18: 1066525.244 ops/s
Iteration  19: 1052444.556 ops/s
Iteration  20: 1061692.927 ops/s
Iteration  21: 1037696.965 ops/s
Iteration  22: 1059130.109 ops/s
Iteration  23: 1061922.009 ops/s
Iteration  24: 1062931.632 ops/s
Iteration  25: 1057372.153 ops/s
Iteration  26: 1062222.061 ops/s
Iteration  27: 1053023.714 ops/s
Iteration  28: 1038000.456 ops/s
Iteration  29: 1058500.422 ops/s
Iteration  30: 1058888.552 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1054518.632 ±(99.9%) 5315.101 ops/s [Average]
  (min, avg, max) = (1037297.863, 1054518.632, 1066525.244), stdev = 7955.393
  CI (99.9%): [1049203.531, 1059833.732] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1054518.632 ± 5315.101  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3480289.724 ops/s
# Warmup Iteration   2: 9847378.185 ops/s
# Warmup Iteration   3: 8169146.330 ops/s
# Warmup Iteration   4: 9746089.016 ops/s
# Warmup Iteration   5: 9702910.804 ops/s
# Warmup Iteration   6: 9679440.507 ops/s
# Warmup Iteration   7: 9739618.531 ops/s
# Warmup Iteration   8: 9579342.566 ops/s
# Warmup Iteration   9: 9565796.933 ops/s
# Warmup Iteration  10: 9758271.084 ops/s
# Warmup Iteration  11: 9707399.659 ops/s
# Warmup Iteration  12: 9702532.241 ops/s
# Warmup Iteration  13: 9687636.566 ops/s
# Warmup Iteration  14: 9599010.781 ops/s
# Warmup Iteration  15: 9723335.141 ops/s
# Warmup Iteration  16: 9777988.877 ops/s
# Warmup Iteration  17: 9626942.659 ops/s
# Warmup Iteration  18: 9676220.005 ops/s
# Warmup Iteration  19: 9676483.662 ops/s
# Warmup Iteration  20: 9607843.919 ops/s
# Warmup Iteration  21: 9600308.029 ops/s
# Warmup Iteration  22: 9653983.861 ops/s
# Warmup Iteration  23: 9650173.580 ops/s
# Warmup Iteration  24: 9640957.180 ops/s
# Warmup Iteration  25: 9671500.718 ops/s
# Warmup Iteration  26: 9619765.645 ops/s
# Warmup Iteration  27: 9601991.324 ops/s
# Warmup Iteration  28: 9628425.472 ops/s
# Warmup Iteration  29: 9703229.188 ops/s
# Warmup Iteration  30: 9602811.842 ops/s
Iteration   1: 9649366.449 ops/s
Iteration   2: 9604246.566 ops/s
Iteration   3: 9479602.414 ops/s
Iteration   4: 9695511.599 ops/s
Iteration   5: 9685534.996 ops/s
Iteration   6: 9603888.661 ops/s
Iteration   7: 9688864.543 ops/s
Iteration   8: 9681004.599 ops/s
Iteration   9: 9538669.599 ops/s
Iteration  10: 9680863.825 ops/s
Iteration  11: 9528892.142 ops/s
Iteration  12: 9501710.570 ops/s
Iteration  13: 9682259.657 ops/s
Iteration  14: 9642164.723 ops/s
Iteration  15: 9681992.457 ops/s
Iteration  16: 9696788.722 ops/s
Iteration  17: 9594443.456 ops/s
Iteration  18: 9700021.743 ops/s
Iteration  19: 9669925.393 ops/s
Iteration  20: 9522850.350 ops/s
Iteration  21: 9589282.781 ops/s
Iteration  22: 9694775.728 ops/s
Iteration  23: 9477020.473 ops/s
Iteration  24: 9570973.974 ops/s
Iteration  25: 9660024.203 ops/s
Iteration  26: 9628502.601 ops/s
Iteration  27: 9705391.362 ops/s
Iteration  28: 9677362.269 ops/s
Iteration  29: 9470397.011 ops/s
Iteration  30: 9600537.585 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_reject":
  9620095.682 ±(99.9%) 51100.253 ops/s [Average]
  (min, avg, max) = (9470397.011, 9620095.682, 9705391.362), stdev = 76484.459
  CI (99.9%): [9568995.428, 9671195.935] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_reject  thrpt   30  9620095.682 ± 51100.253  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4955157.441 ops/s
# Warmup Iteration   2: 8982507.901 ops/s
# Warmup Iteration   3: 9519813.502 ops/s
# Warmup Iteration   4: 9590305.999 ops/s
# Warmup Iteration   5: 7999596.572 ops/s
# Warmup Iteration   6: 9530585.383 ops/s
# Warmup Iteration   7: 9513612.905 ops/s
# Warmup Iteration   8: 9566054.637 ops/s
# Warmup Iteration   9: 9434551.351 ops/s
# Warmup Iteration  10: 9518722.998 ops/s
# Warmup Iteration  11: 9584027.563 ops/s
# Warmup Iteration  12: 9538421.444 ops/s
# Warmup Iteration  13: 9566415.392 ops/s
# Warmup Iteration  14: 9619478.942 ops/s
# Warmup Iteration  15: 9464964.817 ops/s
# Warmup Iteration  16: 9557506.578 ops/s
# Warmup Iteration  17: 9598644.119 ops/s
# Warmup Iteration  18: 9612964.444 ops/s
# Warmup Iteration  19: 9581283.058 ops/s
# Warmup Iteration  20: 9505426.377 ops/s
# Warmup Iteration  21: 9562536.407 ops/s
# Warmup Iteration  22: 9555606.100 ops/s
# Warmup Iteration  23: 9557034.205 ops/s
# Warmup Iteration  24: 9566180.164 ops/s
# Warmup Iteration  25: 9562876.406 ops/s
# Warmup Iteration  26: 9580111.576 ops/s
# Warmup Iteration  27: 9584960.569 ops/s
# Warmup Iteration  28: 9525873.097 ops/s
# Warmup Iteration  29: 9497475.813 ops/s
# Warmup Iteration  30: 9616073.581 ops/s
Iteration   1: 9650453.146 ops/s
Iteration   2: 9549535.025 ops/s
Iteration   3: 9648083.537 ops/s
Iteration   4: 9648524.315 ops/s
Iteration   5: 9584997.148 ops/s
Iteration   6: 9557943.685 ops/s
Iteration   7: 9423940.669 ops/s
Iteration   8: 9520351.258 ops/s
Iteration   9: 9605559.156 ops/s
Iteration  10: 9623378.891 ops/s
Iteration  11: 9439171.198 ops/s
Iteration  12: 9601305.192 ops/s
Iteration  13: 9577519.214 ops/s
Iteration  14: 9589709.929 ops/s
Iteration  15: 9556333.421 ops/s
Iteration  16: 9584519.881 ops/s
Iteration  17: 9535740.018 ops/s
Iteration  18: 9317357.378 ops/s
Iteration  19: 9444472.945 ops/s
Iteration  20: 9570715.226 ops/s
Iteration  21: 9536942.055 ops/s
Iteration  22: 9618916.459 ops/s
Iteration  23: 9605415.857 ops/s
Iteration  24: 9581151.156 ops/s
Iteration  25: 9612049.028 ops/s
Iteration  26: 9402429.578 ops/s
Iteration  27: 9603985.786 ops/s
Iteration  28: 9561880.063 ops/s
Iteration  29: 9562350.146 ops/s
Iteration  30: 9616255.730 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_remove":
  9557699.570 ±(99.9%) 52742.804 ops/s [Average]
  (min, avg, max) = (9317357.378, 9557699.570, 9650453.146), stdev = 78942.952
  CI (99.9%): [9504956.766, 9610442.374] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_remove  thrpt   30  9557699.570 ± 52742.804  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1389897.507 ops/s
# Warmup Iteration   2: 3119379.264 ops/s
# Warmup Iteration   3: 3104609.898 ops/s
# Warmup Iteration   4: 2573409.358 ops/s
# Warmup Iteration   5: 3108578.113 ops/s
# Warmup Iteration   6: 3112314.685 ops/s
# Warmup Iteration   7: 3122546.372 ops/s
# Warmup Iteration   8: 3078425.068 ops/s
# Warmup Iteration   9: 3097428.070 ops/s
# Warmup Iteration  10: 3058412.061 ops/s
# Warmup Iteration  11: 3110451.100 ops/s
# Warmup Iteration  12: 3119562.349 ops/s
# Warmup Iteration  13: 3122701.514 ops/s
# Warmup Iteration  14: 3102340.326 ops/s
# Warmup Iteration  15: 3130524.192 ops/s
# Warmup Iteration  16: 3091655.909 ops/s
# Warmup Iteration  17: 3113539.666 ops/s
# Warmup Iteration  18: 3113671.514 ops/s
# Warmup Iteration  19: 3128693.583 ops/s
# Warmup Iteration  20: 3104575.108 ops/s
# Warmup Iteration  21: 3116810.417 ops/s
# Warmup Iteration  22: 3094492.691 ops/s
# Warmup Iteration  23: 3123298.914 ops/s
# Warmup Iteration  24: 3107764.923 ops/s
# Warmup Iteration  25: 3092383.499 ops/s
# Warmup Iteration  26: 3120828.551 ops/s
# Warmup Iteration  27: 3092643.857 ops/s
# Warmup Iteration  28: 3109671.952 ops/s
# Warmup Iteration  29: 3089351.586 ops/s
# Warmup Iteration  30: 3123990.318 ops/s
Iteration   1: 3131868.436 ops/s
Iteration   2: 3120948.880 ops/s
Iteration   3: 3100875.261 ops/s
Iteration   4: 3118539.420 ops/s
Iteration   5: 3130249.613 ops/s
Iteration   6: 3116916.681 ops/s
Iteration   7: 3067760.941 ops/s
Iteration   8: 3119553.844 ops/s
Iteration   9: 3122460.050 ops/s
Iteration  10: 3079116.461 ops/s
Iteration  11: 3113800.444 ops/s
Iteration  12: 3137614.731 ops/s
Iteration  13: 3105871.495 ops/s
Iteration  14: 3142161.444 ops/s
Iteration  15: 3142115.999 ops/s
Iteration  16: 3132814.938 ops/s
Iteration  17: 3127324.211 ops/s
Iteration  18: 3129699.453 ops/s
Iteration  19: 3120444.744 ops/s
Iteration  20: 3078641.956 ops/s
Iteration  21: 3070264.033 ops/s
Iteration  22: 3134887.319 ops/s
Iteration  23: 3138197.506 ops/s
Iteration  24: 3130268.468 ops/s
Iteration  25: 3092193.649 ops/s
Iteration  26: 3130056.827 ops/s
Iteration  27: 3135398.563 ops/s
Iteration  28: 3134618.173 ops/s
Iteration  29: 3137251.499 ops/s
Iteration  30: 3138665.963 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_removeAll":
  3119352.700 ±(99.9%) 14506.929 ops/s [Average]
  (min, avg, max) = (3067760.941, 3119352.700, 3142161.444), stdev = 21713.290
  CI (99.9%): [3104845.771, 3133859.629] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_removeAll  thrpt   30  3119352.700 ± 14506.929  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1096695.584 ops/s
# Warmup Iteration   2: 2542475.780 ops/s
# Warmup Iteration   3: 2584088.015 ops/s
# Warmup Iteration   4: 2155555.859 ops/s
# Warmup Iteration   5: 2572259.933 ops/s
# Warmup Iteration   6: 2582545.724 ops/s
# Warmup Iteration   7: 2567493.102 ops/s
# Warmup Iteration   8: 2578357.765 ops/s
# Warmup Iteration   9: 2561960.512 ops/s
# Warmup Iteration  10: 2564869.318 ops/s
# Warmup Iteration  11: 2576532.751 ops/s
# Warmup Iteration  12: 2576354.176 ops/s
# Warmup Iteration  13: 2551255.293 ops/s
# Warmup Iteration  14: 2544909.512 ops/s
# Warmup Iteration  15: 2571176.647 ops/s
# Warmup Iteration  16: 2568514.186 ops/s
# Warmup Iteration  17: 2566355.371 ops/s
# Warmup Iteration  18: 2565813.633 ops/s
# Warmup Iteration  19: 2566600.135 ops/s
# Warmup Iteration  20: 2566344.663 ops/s
# Warmup Iteration  21: 2571902.632 ops/s
# Warmup Iteration  22: 2576776.892 ops/s
# Warmup Iteration  23: 2564877.925 ops/s
# Warmup Iteration  24: 2567866.943 ops/s
# Warmup Iteration  25: 2562810.911 ops/s
# Warmup Iteration  26: 2550693.501 ops/s
# Warmup Iteration  27: 2566290.098 ops/s
# Warmup Iteration  28: 2580985.037 ops/s
# Warmup Iteration  29: 2566392.183 ops/s
# Warmup Iteration  30: 2578447.940 ops/s
Iteration   1: 2562537.349 ops/s
Iteration   2: 2592074.006 ops/s
Iteration   3: 2578963.441 ops/s
Iteration   4: 2563372.759 ops/s
Iteration   5: 2575880.405 ops/s
Iteration   6: 2578768.069 ops/s
Iteration   7: 2585448.475 ops/s
Iteration   8: 2581236.681 ops/s
Iteration   9: 2574333.838 ops/s
Iteration  10: 2566329.398 ops/s
Iteration  11: 2530406.183 ops/s
Iteration  12: 2579119.872 ops/s
Iteration  13: 2571943.083 ops/s
Iteration  14: 2575696.056 ops/s
Iteration  15: 2546497.604 ops/s
Iteration  16: 2585613.080 ops/s
Iteration  17: 2561924.570 ops/s
Iteration  18: 2584882.338 ops/s
Iteration  19: 2527986.634 ops/s
Iteration  20: 2579011.595 ops/s
Iteration  21: 2536695.317 ops/s
Iteration  22: 2571247.476 ops/s
Iteration  23: 2575830.248 ops/s
Iteration  24: 2570620.636 ops/s
Iteration  25: 2566175.571 ops/s
Iteration  26: 2571644.332 ops/s
Iteration  27: 2580276.962 ops/s
Iteration  28: 2567700.418 ops/s
Iteration  29: 2569038.328 ops/s
Iteration  30: 2578530.297 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable":
  2569659.501 ±(99.9%) 10480.155 ops/s [Average]
  (min, avg, max) = (2527986.634, 2569659.501, 2592074.006), stdev = 15686.204
  CI (99.9%): [2559179.346, 2580139.656] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  2569659.501 ± 10480.155  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 491943.602 ops/s
# Warmup Iteration   2: 1082051.167 ops/s
# Warmup Iteration   3: 1089745.940 ops/s
# Warmup Iteration   4: 911049.359 ops/s
# Warmup Iteration   5: 1084517.201 ops/s
# Warmup Iteration   6: 1093300.840 ops/s
# Warmup Iteration   7: 1078753.296 ops/s
# Warmup Iteration   8: 1083188.585 ops/s
# Warmup Iteration   9: 1090656.108 ops/s
# Warmup Iteration  10: 1089254.951 ops/s
# Warmup Iteration  11: 1094258.166 ops/s
# Warmup Iteration  12: 1090699.999 ops/s
# Warmup Iteration  13: 1079884.309 ops/s
# Warmup Iteration  14: 1091828.949 ops/s
# Warmup Iteration  15: 1090468.029 ops/s
# Warmup Iteration  16: 1092993.428 ops/s
# Warmup Iteration  17: 1082605.663 ops/s
# Warmup Iteration  18: 1074277.893 ops/s
# Warmup Iteration  19: 1089996.647 ops/s
# Warmup Iteration  20: 1091310.518 ops/s
# Warmup Iteration  21: 1086992.992 ops/s
# Warmup Iteration  22: 1089522.258 ops/s
# Warmup Iteration  23: 1093073.555 ops/s
# Warmup Iteration  24: 1073152.989 ops/s
# Warmup Iteration  25: 1088995.112 ops/s
# Warmup Iteration  26: 1088838.316 ops/s
# Warmup Iteration  27: 1080569.652 ops/s
# Warmup Iteration  28: 1090524.105 ops/s
# Warmup Iteration  29: 1088540.751 ops/s
# Warmup Iteration  30: 1090091.145 ops/s
Iteration   1: 1091580.375 ops/s
Iteration   2: 1093125.383 ops/s
Iteration   3: 1090209.066 ops/s
Iteration   4: 1085914.062 ops/s
Iteration   5: 1089718.775 ops/s
Iteration   6: 1087719.147 ops/s
Iteration   7: 1089082.752 ops/s
Iteration   8: 1095150.123 ops/s
Iteration   9: 1092565.385 ops/s
Iteration  10: 1090429.613 ops/s
Iteration  11: 1089943.750 ops/s
Iteration  12: 1093811.375 ops/s
Iteration  13: 1094592.463 ops/s
Iteration  14: 1094823.449 ops/s
Iteration  15: 1093261.688 ops/s
Iteration  16: 1091617.894 ops/s
Iteration  17: 1091359.340 ops/s
Iteration  18: 1087614.802 ops/s
Iteration  19: 1085439.642 ops/s
Iteration  20: 1096691.465 ops/s
Iteration  21: 1072342.470 ops/s
Iteration  22: 1091196.908 ops/s
Iteration  23: 1089770.698 ops/s
Iteration  24: 1085501.605 ops/s
Iteration  25: 1073496.748 ops/s
Iteration  26: 1086801.928 ops/s
Iteration  27: 1092644.552 ops/s
Iteration  28: 1086993.665 ops/s
Iteration  29: 1090159.667 ops/s
Iteration  30: 1076459.450 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_retainAll":
  1089000.608 ±(99.9%) 3921.729 ops/s [Average]
  (min, avg, max) = (1072342.470, 1089000.608, 1096691.465), stdev = 5869.860
  CI (99.9%): [1085078.879, 1092922.337] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_retainAll  thrpt   30  1089000.608 ± 3921.729  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 377010.232 ops/s
# Warmup Iteration   2: 768728.533 ops/s
# Warmup Iteration   3: 802252.820 ops/s
# Warmup Iteration   4: 804629.327 ops/s
# Warmup Iteration   5: 666599.548 ops/s
# Warmup Iteration   6: 807264.810 ops/s
# Warmup Iteration   7: 805747.461 ops/s
# Warmup Iteration   8: 806079.187 ops/s
# Warmup Iteration   9: 808370.919 ops/s
# Warmup Iteration  10: 803099.259 ops/s
# Warmup Iteration  11: 807884.033 ops/s
# Warmup Iteration  12: 808102.491 ops/s
# Warmup Iteration  13: 804623.276 ops/s
# Warmup Iteration  14: 794311.116 ops/s
# Warmup Iteration  15: 807590.025 ops/s
# Warmup Iteration  16: 806448.481 ops/s
# Warmup Iteration  17: 804851.410 ops/s
# Warmup Iteration  18: 808400.320 ops/s
# Warmup Iteration  19: 805651.441 ops/s
# Warmup Iteration  20: 801520.335 ops/s
# Warmup Iteration  21: 804919.696 ops/s
# Warmup Iteration  22: 804050.989 ops/s
# Warmup Iteration  23: 806619.681 ops/s
# Warmup Iteration  24: 804981.931 ops/s
# Warmup Iteration  25: 806259.166 ops/s
# Warmup Iteration  26: 809073.645 ops/s
# Warmup Iteration  27: 806768.962 ops/s
# Warmup Iteration  28: 804374.755 ops/s
# Warmup Iteration  29: 805019.639 ops/s
# Warmup Iteration  30: 808545.567 ops/s
Iteration   1: 805203.208 ops/s
Iteration   2: 804603.365 ops/s
Iteration   3: 806293.400 ops/s
Iteration   4: 805671.050 ops/s
Iteration   5: 806014.713 ops/s
Iteration   6: 805224.026 ops/s
Iteration   7: 794861.583 ops/s
Iteration   8: 805601.274 ops/s
Iteration   9: 807172.331 ops/s
Iteration  10: 807416.355 ops/s
Iteration  11: 806210.310 ops/s
Iteration  12: 786068.679 ops/s
Iteration  13: 803947.219 ops/s
Iteration  14: 803359.882 ops/s
Iteration  15: 806706.063 ops/s
Iteration  16: 807374.766 ops/s
Iteration  17: 804425.644 ops/s
Iteration  18: 805419.554 ops/s
Iteration  19: 799020.495 ops/s
Iteration  20: 806215.785 ops/s
Iteration  21: 801541.782 ops/s
Iteration  22: 801017.372 ops/s
Iteration  23: 803774.328 ops/s
Iteration  24: 799666.464 ops/s
Iteration  25: 807779.460 ops/s
Iteration  26: 799435.665 ops/s
Iteration  27: 802110.807 ops/s
Iteration  28: 802443.894 ops/s
Iteration  29: 807199.088 ops/s
Iteration  30: 800198.227 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable":
  803399.226 ±(99.9%) 3012.037 ops/s [Average]
  (min, avg, max) = (786068.679, 803399.226, 807779.460), stdev = 4508.275
  CI (99.9%): [800387.190, 806411.263] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  803399.226 ± 3012.037  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4575087.382 ops/s
# Warmup Iteration   2: 9971512.291 ops/s
# Warmup Iteration   3: 8239424.261 ops/s
# Warmup Iteration   4: 9792159.384 ops/s
# Warmup Iteration   5: 9810358.469 ops/s
# Warmup Iteration   6: 9788699.146 ops/s
# Warmup Iteration   7: 9791717.335 ops/s
# Warmup Iteration   8: 9811245.537 ops/s
# Warmup Iteration   9: 9824150.192 ops/s
# Warmup Iteration  10: 9790522.265 ops/s
# Warmup Iteration  11: 9793512.456 ops/s
# Warmup Iteration  12: 9846666.094 ops/s
# Warmup Iteration  13: 9727374.796 ops/s
# Warmup Iteration  14: 9766378.488 ops/s
# Warmup Iteration  15: 9813929.993 ops/s
# Warmup Iteration  16: 9818623.359 ops/s
# Warmup Iteration  17: 9913937.261 ops/s
# Warmup Iteration  18: 9844146.645 ops/s
# Warmup Iteration  19: 9899200.440 ops/s
# Warmup Iteration  20: 9864429.234 ops/s
# Warmup Iteration  21: 9870014.234 ops/s
# Warmup Iteration  22: 9911629.682 ops/s
# Warmup Iteration  23: 9809343.813 ops/s
# Warmup Iteration  24: 9898595.726 ops/s
# Warmup Iteration  25: 9883247.597 ops/s
# Warmup Iteration  26: 9879840.345 ops/s
# Warmup Iteration  27: 9835832.849 ops/s
# Warmup Iteration  28: 9877112.479 ops/s
# Warmup Iteration  29: 9883061.693 ops/s
# Warmup Iteration  30: 9868385.932 ops/s
Iteration   1: 9886837.737 ops/s
Iteration   2: 9809231.136 ops/s
Iteration   3: 9754019.879 ops/s
Iteration   4: 9725131.657 ops/s
Iteration   5: 9878945.696 ops/s
Iteration   6: 9890701.607 ops/s
Iteration   7: 9933737.250 ops/s
Iteration   8: 9925343.852 ops/s
Iteration   9: 9539627.223 ops/s
Iteration  10: 9905514.255 ops/s
Iteration  11: 9858612.242 ops/s
Iteration  12: 9634031.282 ops/s
Iteration  13: 9909589.118 ops/s
Iteration  14: 9889544.320 ops/s
Iteration  15: 9909838.756 ops/s
Iteration  16: 9920796.901 ops/s
Iteration  17: 9742314.540 ops/s
Iteration  18: 9897568.947 ops/s
Iteration  19: 9929692.526 ops/s
Iteration  20: 9772826.791 ops/s
Iteration  21: 9889499.693 ops/s
Iteration  22: 9909955.152 ops/s
Iteration  23: 9866650.383 ops/s
Iteration  24: 9918205.547 ops/s
Iteration  25: 9924669.648 ops/s
Iteration  26: 9941921.043 ops/s
Iteration  27: 9717795.567 ops/s
Iteration  28: 9909606.594 ops/s
Iteration  29: 9949510.484 ops/s
Iteration  30: 9965278.703 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_select":
  9856899.951 ±(99.9%) 67488.938 ops/s [Average]
  (min, avg, max) = (9539627.223, 9856899.951, 9965278.703), stdev = 101014.274
  CI (99.9%): [9789411.013, 9924388.889] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_select  thrpt   30  9856899.951 ± 67488.938  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3381942.397 ops/s
# Warmup Iteration   2: 5555912.216 ops/s
# Warmup Iteration   3: 6470959.795 ops/s
# Warmup Iteration   4: 6454544.289 ops/s
# Warmup Iteration   5: 6492629.578 ops/s
# Warmup Iteration   6: 6502575.625 ops/s
# Warmup Iteration   7: 6522235.116 ops/s
# Warmup Iteration   8: 6511113.242 ops/s
# Warmup Iteration   9: 6513924.378 ops/s
# Warmup Iteration  10: 6480637.903 ops/s
# Warmup Iteration  11: 6506808.413 ops/s
# Warmup Iteration  12: 6452627.802 ops/s
# Warmup Iteration  13: 6483196.645 ops/s
# Warmup Iteration  14: 6520488.513 ops/s
# Warmup Iteration  15: 6463877.363 ops/s
# Warmup Iteration  16: 6465183.484 ops/s
# Warmup Iteration  17: 6415720.952 ops/s
# Warmup Iteration  18: 6414106.871 ops/s
# Warmup Iteration  19: 6424096.206 ops/s
# Warmup Iteration  20: 6415833.352 ops/s
# Warmup Iteration  21: 6502400.382 ops/s
# Warmup Iteration  22: 6417295.529 ops/s
# Warmup Iteration  23: 6478532.255 ops/s
# Warmup Iteration  24: 6466399.500 ops/s
# Warmup Iteration  25: 6441950.910 ops/s
# Warmup Iteration  26: 6478017.161 ops/s
# Warmup Iteration  27: 6473925.319 ops/s
# Warmup Iteration  28: 6473087.066 ops/s
# Warmup Iteration  29: 6413793.482 ops/s
# Warmup Iteration  30: 6340443.746 ops/s
Iteration   1: 6513964.291 ops/s
Iteration   2: 6344488.161 ops/s
Iteration   3: 6459120.438 ops/s
Iteration   4: 6465674.071 ops/s
Iteration   5: 6446102.810 ops/s
Iteration   6: 6529985.144 ops/s
Iteration   7: 6515331.389 ops/s
Iteration   8: 6518310.594 ops/s
Iteration   9: 6535694.962 ops/s
Iteration  10: 6519192.653 ops/s
Iteration  11: 6466689.575 ops/s
Iteration  12: 6560381.862 ops/s
Iteration  13: 6514050.843 ops/s
Iteration  14: 6501242.416 ops/s
Iteration  15: 6522425.266 ops/s
Iteration  16: 6572268.481 ops/s
Iteration  17: 6330116.442 ops/s
Iteration  18: 6516355.956 ops/s
Iteration  19: 6555175.426 ops/s
Iteration  20: 6442750.882 ops/s
Iteration  21: 6493291.961 ops/s
Iteration  22: 6498959.393 ops/s
Iteration  23: 6519394.853 ops/s
Iteration  24: 6538563.999 ops/s
Iteration  25: 6522415.756 ops/s
Iteration  26: 6568028.977 ops/s
Iteration  27: 6516580.087 ops/s
Iteration  28: 6533729.448 ops/s
Iteration  29: 6550844.244 ops/s
Iteration  30: 6585342.011 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_size":
  6505215.746 ±(99.9%) 38616.003 ops/s [Average]
  (min, avg, max) = (6330116.442, 6505215.746, 6585342.011), stdev = 57798.620
  CI (99.9%): [6466599.743, 6543831.750] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_size  thrpt   30  6505215.746 ± 38616.003  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 161954840.248 ops/s
# Warmup Iteration   2: 292240936.028 ops/s
# Warmup Iteration   3: 263098224.334 ops/s
# Warmup Iteration   4: 306945679.822 ops/s
# Warmup Iteration   5: 305421775.730 ops/s
# Warmup Iteration   6: 306882744.856 ops/s
# Warmup Iteration   7: 307698240.551 ops/s
# Warmup Iteration   8: 307715977.400 ops/s
# Warmup Iteration   9: 306664999.857 ops/s
# Warmup Iteration  10: 304064570.873 ops/s
# Warmup Iteration  11: 307472356.089 ops/s
# Warmup Iteration  12: 302569142.508 ops/s
# Warmup Iteration  13: 307868574.603 ops/s
# Warmup Iteration  14: 306438872.968 ops/s
# Warmup Iteration  15: 308412086.644 ops/s
# Warmup Iteration  16: 303790351.530 ops/s
# Warmup Iteration  17: 306542967.497 ops/s
# Warmup Iteration  18: 306731800.199 ops/s
# Warmup Iteration  19: 305862195.675 ops/s
# Warmup Iteration  20: 306095622.706 ops/s
# Warmup Iteration  21: 299201551.254 ops/s
# Warmup Iteration  22: 307804670.950 ops/s
# Warmup Iteration  23: 306852776.064 ops/s
# Warmup Iteration  24: 304742682.699 ops/s
# Warmup Iteration  25: 305258675.847 ops/s
# Warmup Iteration  26: 303994166.401 ops/s
# Warmup Iteration  27: 305362759.084 ops/s
# Warmup Iteration  28: 303078603.409 ops/s
# Warmup Iteration  29: 303202174.048 ops/s
# Warmup Iteration  30: 309034623.585 ops/s
Iteration   1: 308064399.548 ops/s
Iteration   2: 307016832.109 ops/s
Iteration   3: 304287747.889 ops/s
Iteration   4: 303043302.616 ops/s
Iteration   5: 300697158.450 ops/s
Iteration   6: 308159795.477 ops/s
Iteration   7: 299531661.748 ops/s
Iteration   8: 304230039.687 ops/s
Iteration   9: 301858238.772 ops/s
Iteration  10: 302960511.465 ops/s
Iteration  11: 306304341.921 ops/s
Iteration  12: 303962642.697 ops/s
Iteration  13: 307348625.280 ops/s
Iteration  14: 302883815.987 ops/s
Iteration  15: 306047174.246 ops/s
Iteration  16: 294119333.898 ops/s
Iteration  17: 308417452.719 ops/s
Iteration  18: 308130715.287 ops/s
Iteration  19: 307323635.830 ops/s
Iteration  20: 306348758.821 ops/s
Iteration  21: 308133783.149 ops/s
Iteration  22: 307511454.769 ops/s
Iteration  23: 308563838.231 ops/s
Iteration  24: 305038192.915 ops/s
Iteration  25: 301590546.349 ops/s
Iteration  26: 304965934.888 ops/s
Iteration  27: 304654253.460 ops/s
Iteration  28: 305380210.082 ops/s
Iteration  29: 309139254.128 ops/s
Iteration  30: 307129115.390 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_testEquals":
  305094758.927 ±(99.9%) 2198066.526 ops/s [Average]
  (min, avg, max) = (294119333.898, 305094758.927, 309139254.128), stdev = 3289962.747
  CI (99.9%): [302896692.401, 307292825.453] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt          Score         Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_testEquals  thrpt   30  305094758.927 ± 2198066.526  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 165977937.931 ops/s
# Warmup Iteration   2: 298710963.232 ops/s
# Warmup Iteration   3: 257221023.075 ops/s
# Warmup Iteration   4: 305810076.154 ops/s
# Warmup Iteration   5: 300045926.061 ops/s
# Warmup Iteration   6: 303446300.409 ops/s
# Warmup Iteration   7: 306640393.600 ops/s
# Warmup Iteration   8: 307127709.704 ops/s
# Warmup Iteration   9: 304224625.906 ops/s
# Warmup Iteration  10: 305214033.259 ops/s
# Warmup Iteration  11: 305074742.189 ops/s
# Warmup Iteration  12: 303856687.820 ops/s
# Warmup Iteration  13: 301403392.172 ops/s
# Warmup Iteration  14: 305514992.819 ops/s
# Warmup Iteration  15: 304965590.055 ops/s
# Warmup Iteration  16: 301701451.613 ops/s
# Warmup Iteration  17: 305432399.533 ops/s
# Warmup Iteration  18: 303989973.641 ops/s
# Warmup Iteration  19: 300646707.041 ops/s
# Warmup Iteration  20: 301716066.199 ops/s
# Warmup Iteration  21: 305672703.123 ops/s
# Warmup Iteration  22: 307833747.268 ops/s
# Warmup Iteration  23: 306409930.006 ops/s
# Warmup Iteration  24: 307148178.112 ops/s
# Warmup Iteration  25: 306986216.575 ops/s
# Warmup Iteration  26: 307074811.067 ops/s
# Warmup Iteration  27: 305516913.643 ops/s
# Warmup Iteration  28: 304088212.060 ops/s
# Warmup Iteration  29: 303835756.332 ops/s
# Warmup Iteration  30: 306925270.421 ops/s
Iteration   1: 303639373.270 ops/s
Iteration   2: 301931454.691 ops/s
Iteration   3: 307441250.284 ops/s
Iteration   4: 302172001.486 ops/s
Iteration   5: 301778268.501 ops/s
Iteration   6: 307253142.694 ops/s
Iteration   7: 305901091.280 ops/s
Iteration   8: 303904056.114 ops/s
Iteration   9: 306757904.368 ops/s
Iteration  10: 306518569.842 ops/s
Iteration  11: 305242003.834 ops/s
Iteration  12: 304294080.701 ops/s
Iteration  13: 307584263.910 ops/s
Iteration  14: 305056740.195 ops/s
Iteration  15: 305371743.068 ops/s
Iteration  16: 306476268.856 ops/s
Iteration  17: 306196196.445 ops/s
Iteration  18: 306254669.526 ops/s
Iteration  19: 302101463.712 ops/s
Iteration  20: 307878233.274 ops/s
Iteration  21: 296791289.962 ops/s
Iteration  22: 304388199.245 ops/s
Iteration  23: 306406246.904 ops/s
Iteration  24: 300123674.202 ops/s
Iteration  25: 307329293.377 ops/s
Iteration  26: 302745842.318 ops/s
Iteration  27: 299859065.901 ops/s
Iteration  28: 307023156.517 ops/s
Iteration  29: 305153856.258 ops/s
Iteration  30: 304506994.241 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode":
  304602679.833 ±(99.9%) 1786759.327 ops/s [Average]
  (min, avg, max) = (296791289.962, 304602679.833, 307878233.274), stdev = 2674337.448
  CI (99.9%): [302815920.506, 306389439.159] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt          Score         Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode  thrpt   30  304602679.833 ± 1786759.327  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 165072241.243 ops/s
# Warmup Iteration   2: 295284446.458 ops/s
# Warmup Iteration   3: 258232431.730 ops/s
# Warmup Iteration   4: 304254980.575 ops/s
# Warmup Iteration   5: 304951398.197 ops/s
# Warmup Iteration   6: 306572532.246 ops/s
# Warmup Iteration   7: 307097220.130 ops/s
# Warmup Iteration   8: 307121121.762 ops/s
# Warmup Iteration   9: 306649508.330 ops/s
# Warmup Iteration  10: 307284225.186 ops/s
# Warmup Iteration  11: 306195769.417 ops/s
# Warmup Iteration  12: 306211579.038 ops/s
# Warmup Iteration  13: 307657750.693 ops/s
# Warmup Iteration  14: 305676894.613 ops/s
# Warmup Iteration  15: 307504884.039 ops/s
# Warmup Iteration  16: 306364517.162 ops/s
# Warmup Iteration  17: 302975420.238 ops/s
# Warmup Iteration  18: 304678771.706 ops/s
# Warmup Iteration  19: 306910074.690 ops/s
# Warmup Iteration  20: 306127655.264 ops/s
# Warmup Iteration  21: 304738085.975 ops/s
# Warmup Iteration  22: 304458114.356 ops/s
# Warmup Iteration  23: 303558733.808 ops/s
# Warmup Iteration  24: 305034047.944 ops/s
# Warmup Iteration  25: 301286838.406 ops/s
# Warmup Iteration  26: 306951311.100 ops/s
# Warmup Iteration  27: 301493894.858 ops/s
# Warmup Iteration  28: 306632008.432 ops/s
# Warmup Iteration  29: 307230275.455 ops/s
# Warmup Iteration  30: 306342857.538 ops/s
Iteration   1: 305631766.498 ops/s
Iteration   2: 302372374.694 ops/s
Iteration   3: 303994330.721 ops/s
Iteration   4: 305037618.576 ops/s
Iteration   5: 306190940.621 ops/s
Iteration   6: 305132239.058 ops/s
Iteration   7: 307070379.360 ops/s
Iteration   8: 302978542.571 ops/s
Iteration   9: 306313311.690 ops/s
Iteration  10: 305674363.884 ops/s
Iteration  11: 306708721.036 ops/s
Iteration  12: 302836660.864 ops/s
Iteration  13: 305767020.675 ops/s
Iteration  14: 307516528.826 ops/s
Iteration  15: 306462496.858 ops/s
Iteration  16: 308101009.908 ops/s
Iteration  17: 305064661.924 ops/s
Iteration  18: 305454434.124 ops/s
Iteration  19: 306668758.905 ops/s
Iteration  20: 305244811.151 ops/s
Iteration  21: 308081336.640 ops/s
Iteration  22: 305662872.745 ops/s
Iteration  23: 304602629.201 ops/s
Iteration  24: 303268607.770 ops/s
Iteration  25: 307294942.812 ops/s
Iteration  26: 304780097.116 ops/s
Iteration  27: 307228246.171 ops/s
Iteration  28: 305328574.141 ops/s
Iteration  29: 304841240.818 ops/s
Iteration  30: 306900816.564 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_testToString":
  305607011.197 ±(99.9%) 1005605.866 ops/s [Average]
  (min, avg, max) = (302372374.694, 305607011.197, 308101009.908), stdev = 1505143.634
  CI (99.9%): [304601405.331, 306612617.064] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt          Score         Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_testToString  thrpt   30  305607011.197 ± 1005605.866  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1824506.369 ops/s
# Warmup Iteration   2: 4091599.443 ops/s
# Warmup Iteration   3: 3374582.845 ops/s
# Warmup Iteration   4: 4113001.672 ops/s
# Warmup Iteration   5: 4114547.222 ops/s
# Warmup Iteration   6: 4110355.253 ops/s
# Warmup Iteration   7: 4141086.911 ops/s
# Warmup Iteration   8: 4130522.636 ops/s
# Warmup Iteration   9: 4090785.229 ops/s
# Warmup Iteration  10: 4135610.226 ops/s
# Warmup Iteration  11: 4108575.236 ops/s
# Warmup Iteration  12: 4102866.026 ops/s
# Warmup Iteration  13: 4105163.691 ops/s
# Warmup Iteration  14: 4116141.632 ops/s
# Warmup Iteration  15: 4132837.819 ops/s
# Warmup Iteration  16: 4103775.689 ops/s
# Warmup Iteration  17: 4109747.624 ops/s
# Warmup Iteration  18: 4104265.322 ops/s
# Warmup Iteration  19: 4107435.654 ops/s
# Warmup Iteration  20: 4136774.439 ops/s
# Warmup Iteration  21: 4129188.136 ops/s
# Warmup Iteration  22: 4118802.494 ops/s
# Warmup Iteration  23: 4113758.856 ops/s
# Warmup Iteration  24: 4057781.384 ops/s
# Warmup Iteration  25: 4091990.529 ops/s
# Warmup Iteration  26: 4127986.212 ops/s
# Warmup Iteration  27: 4090536.889 ops/s
# Warmup Iteration  28: 4128744.418 ops/s
# Warmup Iteration  29: 4132122.662 ops/s
# Warmup Iteration  30: 4119921.614 ops/s
Iteration   1: 4102171.015 ops/s
Iteration   2: 4126312.339 ops/s
Iteration   3: 4117386.878 ops/s
Iteration   4: 4127304.054 ops/s
Iteration   5: 4129065.824 ops/s
Iteration   6: 4131319.210 ops/s
Iteration   7: 4111968.746 ops/s
Iteration   8: 4144830.632 ops/s
Iteration   9: 4110714.287 ops/s
Iteration  10: 4093787.373 ops/s
Iteration  11: 4023534.264 ops/s
Iteration  12: 4083942.538 ops/s
Iteration  13: 4066325.829 ops/s
Iteration  14: 4124038.273 ops/s
Iteration  15: 4065774.713 ops/s
Iteration  16: 4130284.069 ops/s
Iteration  17: 4091796.975 ops/s
Iteration  18: 4128641.870 ops/s
Iteration  19: 4114132.258 ops/s
Iteration  20: 4069873.284 ops/s
Iteration  21: 4147024.187 ops/s
Iteration  22: 4115400.131 ops/s
Iteration  23: 4120464.577 ops/s
Iteration  24: 4041650.668 ops/s
Iteration  25: 4126546.381 ops/s
Iteration  26: 4147749.692 ops/s
Iteration  27: 4080014.441 ops/s
Iteration  28: 4089442.901 ops/s
Iteration  29: 4063467.432 ops/s
Iteration  30: 4074468.962 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_toArray":
  4103314.460 ±(99.9%) 21200.867 ops/s [Average]
  (min, avg, max) = (4023534.264, 4103314.460, 4147749.692), stdev = 31732.462
  CI (99.9%): [4082113.593, 4124515.327] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_toArray  thrpt   30  4103314.460 ± 21200.867  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1342755.733 ops/s
# Warmup Iteration   2: 2868737.414 ops/s
# Warmup Iteration   3: 2488648.285 ops/s
# Warmup Iteration   4: 2808156.242 ops/s
# Warmup Iteration   5: 2872827.851 ops/s
# Warmup Iteration   6: 2860213.410 ops/s
# Warmup Iteration   7: 2888759.020 ops/s
# Warmup Iteration   8: 2890991.375 ops/s
# Warmup Iteration   9: 2914612.564 ops/s
# Warmup Iteration  10: 2884087.188 ops/s
# Warmup Iteration  11: 2903653.312 ops/s
# Warmup Iteration  12: 2903234.905 ops/s
# Warmup Iteration  13: 2873262.726 ops/s
# Warmup Iteration  14: 2889379.440 ops/s
# Warmup Iteration  15: 2897026.900 ops/s
# Warmup Iteration  16: 2900033.355 ops/s
# Warmup Iteration  17: 2902890.365 ops/s
# Warmup Iteration  18: 2894384.190 ops/s
# Warmup Iteration  19: 2896116.339 ops/s
# Warmup Iteration  20: 2865519.245 ops/s
# Warmup Iteration  21: 2901516.640 ops/s
# Warmup Iteration  22: 2890429.447 ops/s
# Warmup Iteration  23: 2872950.013 ops/s
# Warmup Iteration  24: 2890214.285 ops/s
# Warmup Iteration  25: 2921090.722 ops/s
# Warmup Iteration  26: 2901738.336 ops/s
# Warmup Iteration  27: 2913366.791 ops/s
# Warmup Iteration  28: 2918527.465 ops/s
# Warmup Iteration  29: 2876344.439 ops/s
# Warmup Iteration  30: 2909241.129 ops/s
Iteration   1: 2910228.646 ops/s
Iteration   2: 2913626.564 ops/s
Iteration   3: 2901128.869 ops/s
Iteration   4: 2919758.433 ops/s
Iteration   5: 2909448.933 ops/s
Iteration   6: 2840009.764 ops/s
Iteration   7: 2878149.993 ops/s
Iteration   8: 2916138.054 ops/s
Iteration   9: 2910856.920 ops/s
Iteration  10: 2900694.231 ops/s
Iteration  11: 2870669.277 ops/s
Iteration  12: 2893515.396 ops/s
Iteration  13: 2921870.971 ops/s
Iteration  14: 2911411.458 ops/s
Iteration  15: 2912513.259 ops/s
Iteration  16: 2913786.237 ops/s
Iteration  17: 2917211.304 ops/s
Iteration  18: 2912589.393 ops/s
Iteration  19: 2911680.160 ops/s
Iteration  20: 2917599.956 ops/s
Iteration  21: 2911553.778 ops/s
Iteration  22: 2901738.786 ops/s
Iteration  23: 2870895.484 ops/s
Iteration  24: 2902556.652 ops/s
Iteration  25: 2879524.647 ops/s
Iteration  26: 2910131.632 ops/s
Iteration  27: 2905851.801 ops/s
Iteration  28: 2905340.968 ops/s
Iteration  29: 2898185.861 ops/s
Iteration  30: 2891161.463 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_toBag":
  2901994.296 ±(99.9%) 12106.163 ops/s [Average]
  (min, avg, max) = (2840009.764, 2901994.296, 2921870.971), stdev = 18119.936
  CI (99.9%): [2889888.133, 2914100.459] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_toBag  thrpt   30  2901994.296 ± 12106.163  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1138736.969 ops/s
# Warmup Iteration   2: 2595807.415 ops/s
# Warmup Iteration   3: 2376729.907 ops/s
# Warmup Iteration   4: 2380979.247 ops/s
# Warmup Iteration   5: 2611127.066 ops/s
# Warmup Iteration   6: 2613031.869 ops/s
# Warmup Iteration   7: 2622684.752 ops/s
# Warmup Iteration   8: 2621064.264 ops/s
# Warmup Iteration   9: 2597029.044 ops/s
# Warmup Iteration  10: 2599145.928 ops/s
# Warmup Iteration  11: 2582336.701 ops/s
# Warmup Iteration  12: 2589375.790 ops/s
# Warmup Iteration  13: 2614203.538 ops/s
# Warmup Iteration  14: 2612290.761 ops/s
# Warmup Iteration  15: 2621768.032 ops/s
# Warmup Iteration  16: 2573223.294 ops/s
# Warmup Iteration  17: 2609363.271 ops/s
# Warmup Iteration  18: 2612980.788 ops/s
# Warmup Iteration  19: 2585701.717 ops/s
# Warmup Iteration  20: 2614745.710 ops/s
# Warmup Iteration  21: 2577792.341 ops/s
# Warmup Iteration  22: 2610888.967 ops/s
# Warmup Iteration  23: 2616328.817 ops/s
# Warmup Iteration  24: 2613119.531 ops/s
# Warmup Iteration  25: 2617856.641 ops/s
# Warmup Iteration  26: 2606825.341 ops/s
# Warmup Iteration  27: 2568730.082 ops/s
# Warmup Iteration  28: 2606118.399 ops/s
# Warmup Iteration  29: 2532677.350 ops/s
# Warmup Iteration  30: 2604162.861 ops/s
Iteration   1: 2600123.022 ops/s
Iteration   2: 2607363.299 ops/s
Iteration   3: 2573799.568 ops/s
Iteration   4: 2603046.843 ops/s
Iteration   5: 2573460.654 ops/s
Iteration   6: 2609070.288 ops/s
Iteration   7: 2577791.488 ops/s
Iteration   8: 2608026.060 ops/s
Iteration   9: 2620560.165 ops/s
Iteration  10: 2564494.455 ops/s
Iteration  11: 2606935.631 ops/s
Iteration  12: 2585632.879 ops/s
Iteration  13: 2603830.750 ops/s
Iteration  14: 2606767.442 ops/s
Iteration  15: 2583615.531 ops/s
Iteration  16: 2619687.456 ops/s
Iteration  17: 2614518.633 ops/s
Iteration  18: 2601324.855 ops/s
Iteration  19: 2610903.162 ops/s
Iteration  20: 2609535.406 ops/s
Iteration  21: 2603507.173 ops/s
Iteration  22: 2586090.574 ops/s
Iteration  23: 2599536.450 ops/s
Iteration  24: 2555570.853 ops/s
Iteration  25: 2621025.394 ops/s
Iteration  26: 2609134.752 ops/s
Iteration  27: 2594613.071 ops/s
Iteration  28: 2616384.710 ops/s
Iteration  29: 2549159.593 ops/s
Iteration  30: 2559360.193 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_toList":
  2595829.012 ±(99.9%) 13527.301 ops/s [Average]
  (min, avg, max) = (2549159.593, 2595829.012, 2621025.394), stdev = 20247.029
  CI (99.9%): [2582301.711, 2609356.313] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_toList  thrpt   30  2595829.012 ± 13527.301  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1629034.291 ops/s
# Warmup Iteration   2: 3839786.324 ops/s
# Warmup Iteration   3: 3840006.074 ops/s
# Warmup Iteration   4: 3180547.432 ops/s
# Warmup Iteration   5: 3851358.473 ops/s
# Warmup Iteration   6: 3824506.021 ops/s
# Warmup Iteration   7: 3817666.552 ops/s
# Warmup Iteration   8: 3856711.851 ops/s
# Warmup Iteration   9: 3826239.867 ops/s
# Warmup Iteration  10: 3801199.460 ops/s
# Warmup Iteration  11: 3820914.236 ops/s
# Warmup Iteration  12: 3820172.753 ops/s
# Warmup Iteration  13: 3796823.401 ops/s
# Warmup Iteration  14: 3839540.632 ops/s
# Warmup Iteration  15: 3830175.364 ops/s
# Warmup Iteration  16: 3847603.984 ops/s
# Warmup Iteration  17: 3829970.943 ops/s
# Warmup Iteration  18: 3829640.054 ops/s
# Warmup Iteration  19: 3851564.614 ops/s
# Warmup Iteration  20: 3800864.394 ops/s
# Warmup Iteration  21: 3834443.163 ops/s
# Warmup Iteration  22: 3819535.530 ops/s
# Warmup Iteration  23: 3836913.057 ops/s
# Warmup Iteration  24: 3805597.101 ops/s
# Warmup Iteration  25: 3839012.403 ops/s
# Warmup Iteration  26: 3848933.956 ops/s
# Warmup Iteration  27: 3848563.351 ops/s
# Warmup Iteration  28: 3837640.950 ops/s
# Warmup Iteration  29: 3821602.484 ops/s
# Warmup Iteration  30: 3842551.660 ops/s
Iteration   1: 3852808.705 ops/s
Iteration   2: 3844420.920 ops/s
Iteration   3: 3857129.787 ops/s
Iteration   4: 3861834.125 ops/s
Iteration   5: 3838436.057 ops/s
Iteration   6: 3813992.423 ops/s
Iteration   7: 3831509.705 ops/s
Iteration   8: 3791836.807 ops/s
Iteration   9: 3768514.760 ops/s
Iteration  10: 3840364.959 ops/s
Iteration  11: 3849074.370 ops/s
Iteration  12: 3841256.322 ops/s
Iteration  13: 3847692.565 ops/s
Iteration  14: 3854774.677 ops/s
Iteration  15: 3755689.385 ops/s
Iteration  16: 3829639.367 ops/s
Iteration  17: 3841812.174 ops/s
Iteration  18: 3841286.737 ops/s
Iteration  19: 3857869.686 ops/s
Iteration  20: 3857816.150 ops/s
Iteration  21: 3815567.448 ops/s
Iteration  22: 3852044.732 ops/s
Iteration  23: 3839208.600 ops/s
Iteration  24: 3803700.997 ops/s
Iteration  25: 3841379.314 ops/s
Iteration  26: 3867727.845 ops/s
Iteration  27: 3818355.583 ops/s
Iteration  28: 3845253.695 ops/s
Iteration  29: 3839020.858 ops/s
Iteration  30: 3843789.747 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_toSet":
  3834793.617 ±(99.9%) 17493.917 ops/s [Average]
  (min, avg, max) = (3755689.385, 3834793.617, 3867727.845), stdev = 26184.073
  CI (99.9%): [3817299.700, 3852287.533] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_toSet  thrpt   30  3834793.617 ± 17493.917  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 682800.215 ops/s
# Warmup Iteration   2: 733013.626 ops/s
# Warmup Iteration   3: 989585.793 ops/s
# Warmup Iteration   4: 989954.497 ops/s
# Warmup Iteration   5: 998934.224 ops/s
# Warmup Iteration   6: 995334.444 ops/s
# Warmup Iteration   7: 993471.084 ops/s
# Warmup Iteration   8: 1000131.114 ops/s
# Warmup Iteration   9: 990433.157 ops/s
# Warmup Iteration  10: 866859.650 ops/s
# Warmup Iteration  11: 953376.443 ops/s
# Warmup Iteration  12: 992743.000 ops/s
# Warmup Iteration  13: 981713.392 ops/s
# Warmup Iteration  14: 993765.699 ops/s
# Warmup Iteration  15: 992237.874 ops/s
# Warmup Iteration  16: 992076.190 ops/s
# Warmup Iteration  17: 1058401.518 ops/s
# Warmup Iteration  18: 1055543.833 ops/s
# Warmup Iteration  19: 1042591.246 ops/s
# Warmup Iteration  20: 1046502.020 ops/s
# Warmup Iteration  21: 1047822.985 ops/s
# Warmup Iteration  22: 1052395.998 ops/s
# Warmup Iteration  23: 1054307.829 ops/s
# Warmup Iteration  24: 1054152.936 ops/s
# Warmup Iteration  25: 1039050.291 ops/s
# Warmup Iteration  26: 1058237.469 ops/s
# Warmup Iteration  27: 1063615.244 ops/s
# Warmup Iteration  28: 1056643.102 ops/s
# Warmup Iteration  29: 1046494.531 ops/s
# Warmup Iteration  30: 1043153.621 ops/s
Iteration   1: 1049251.639 ops/s
Iteration   2: 1061033.094 ops/s
Iteration   3: 1046196.653 ops/s
Iteration   4: 1038538.081 ops/s
Iteration   5: 1046826.316 ops/s
Iteration   6: 1058113.589 ops/s
Iteration   7: 1054224.715 ops/s
Iteration   8: 1058839.089 ops/s
Iteration   9: 1063540.474 ops/s
Iteration  10: 1040984.397 ops/s
Iteration  11: 1059515.673 ops/s
Iteration  12: 1051865.639 ops/s
Iteration  13: 1055814.444 ops/s
Iteration  14: 1054911.350 ops/s
Iteration  15: 1057376.778 ops/s
Iteration  16: 1050569.784 ops/s
Iteration  17: 1035563.575 ops/s
Iteration  18: 1033215.226 ops/s
Iteration  19: 1048620.677 ops/s
Iteration  20: 1049481.390 ops/s
Iteration  21: 1061294.584 ops/s
Iteration  22: 1060573.919 ops/s
Iteration  23: 1056581.017 ops/s
Iteration  24: 1056727.639 ops/s
Iteration  25: 1061931.144 ops/s
Iteration  26: 1062767.991 ops/s
Iteration  27: 1056109.747 ops/s
Iteration  28: 1054706.800 ops/s
Iteration  29: 1057924.906 ops/s
Iteration  30: 1052415.529 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_with":
  1053183.862 ±(99.9%) 5352.067 ops/s [Average]
  (min, avg, max) = (1033215.226, 1053183.862, 1063540.474), stdev = 8010.722
  CI (99.9%): [1047831.795, 1058535.929] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_with  thrpt   30  1053183.862 ± 5352.067  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 681243.620 ops/s
# Warmup Iteration   2: 756245.159 ops/s
# Warmup Iteration   3: 999884.853 ops/s
# Warmup Iteration   4: 1006149.956 ops/s
# Warmup Iteration   5: 988217.753 ops/s
# Warmup Iteration   6: 994047.387 ops/s
# Warmup Iteration   7: 1001774.657 ops/s
# Warmup Iteration   8: 999328.097 ops/s
# Warmup Iteration   9: 1003971.857 ops/s
# Warmup Iteration  10: 821520.832 ops/s
# Warmup Iteration  11: 995609.492 ops/s
# Warmup Iteration  12: 1009331.269 ops/s
# Warmup Iteration  13: 1011294.251 ops/s
# Warmup Iteration  14: 1001901.484 ops/s
# Warmup Iteration  15: 999738.300 ops/s
# Warmup Iteration  16: 1000911.404 ops/s
# Warmup Iteration  17: 1055310.384 ops/s
# Warmup Iteration  18: 1060352.028 ops/s
# Warmup Iteration  19: 1071334.720 ops/s
# Warmup Iteration  20: 1063757.036 ops/s
# Warmup Iteration  21: 1072710.327 ops/s
# Warmup Iteration  22: 1061334.343 ops/s
# Warmup Iteration  23: 1058725.734 ops/s
# Warmup Iteration  24: 1060706.224 ops/s
# Warmup Iteration  25: 1067171.653 ops/s
# Warmup Iteration  26: 1065789.502 ops/s
# Warmup Iteration  27: 1063950.387 ops/s
# Warmup Iteration  28: 1067566.741 ops/s
# Warmup Iteration  29: 1067075.768 ops/s
# Warmup Iteration  30: 1066315.371 ops/s
Iteration   1: 1073823.476 ops/s
Iteration   2: 1072061.997 ops/s
Iteration   3: 1059046.373 ops/s
Iteration   4: 1066641.618 ops/s
Iteration   5: 1067410.823 ops/s
Iteration   6: 1065724.568 ops/s
Iteration   7: 1074740.574 ops/s
Iteration   8: 1055098.033 ops/s
Iteration   9: 1068226.483 ops/s
Iteration  10: 1069052.689 ops/s
Iteration  11: 1074130.371 ops/s
Iteration  12: 1064899.977 ops/s
Iteration  13: 1066055.244 ops/s
Iteration  14: 1069746.909 ops/s
Iteration  15: 1055750.357 ops/s
Iteration  16: 1070127.039 ops/s
Iteration  17: 1074491.578 ops/s
Iteration  18: 1061229.888 ops/s
Iteration  19: 1071274.496 ops/s
Iteration  20: 1071173.121 ops/s
Iteration  21: 1067411.516 ops/s
Iteration  22: 1067067.690 ops/s
Iteration  23: 1068945.935 ops/s
Iteration  24: 1060533.378 ops/s
Iteration  25: 1042705.026 ops/s
Iteration  26: 1068567.346 ops/s
Iteration  27: 1063751.386 ops/s
Iteration  28: 1069602.027 ops/s
Iteration  29: 1069583.540 ops/s
Iteration  30: 1054221.988 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_withAll":
  1066103.181 ±(99.9%) 4759.029 ops/s [Average]
  (min, avg, max) = (1042705.026, 1066103.181, 1074740.574), stdev = 7123.091
  CI (99.9%): [1061344.153, 1070862.210] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_withAll  thrpt   30  1066103.181 ± 4759.029  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 689273.172 ops/s
# Warmup Iteration   2: 760980.032 ops/s
# Warmup Iteration   3: 1002502.812 ops/s
# Warmup Iteration   4: 999474.289 ops/s
# Warmup Iteration   5: 989151.648 ops/s
# Warmup Iteration   6: 990401.329 ops/s
# Warmup Iteration   7: 994061.166 ops/s
# Warmup Iteration   8: 991387.785 ops/s
# Warmup Iteration   9: 995075.960 ops/s
# Warmup Iteration  10: 834481.165 ops/s
# Warmup Iteration  11: 998751.379 ops/s
# Warmup Iteration  12: 990770.536 ops/s
# Warmup Iteration  13: 988119.088 ops/s
# Warmup Iteration  14: 993900.058 ops/s
# Warmup Iteration  15: 1007891.030 ops/s
# Warmup Iteration  16: 1004626.176 ops/s
# Warmup Iteration  17: 1061614.935 ops/s
# Warmup Iteration  18: 1061734.395 ops/s
# Warmup Iteration  19: 1056677.628 ops/s
# Warmup Iteration  20: 1070048.119 ops/s
# Warmup Iteration  21: 1063710.700 ops/s
# Warmup Iteration  22: 1052330.070 ops/s
# Warmup Iteration  23: 1064655.737 ops/s
# Warmup Iteration  24: 1065706.178 ops/s
# Warmup Iteration  25: 1056455.945 ops/s
# Warmup Iteration  26: 1059872.856 ops/s
# Warmup Iteration  27: 1067078.786 ops/s
# Warmup Iteration  28: 1056780.479 ops/s
# Warmup Iteration  29: 1068145.027 ops/s
# Warmup Iteration  30: 1061391.788 ops/s
Iteration   1: 1051161.589 ops/s
Iteration   2: 1049781.768 ops/s
Iteration   3: 1065856.565 ops/s
Iteration   4: 1062247.947 ops/s
Iteration   5: 1053666.632 ops/s
Iteration   6: 1070041.223 ops/s
Iteration   7: 1060820.632 ops/s
Iteration   8: 1065371.562 ops/s
Iteration   9: 1054340.893 ops/s
Iteration  10: 1068804.896 ops/s
Iteration  11: 1071199.775 ops/s
Iteration  12: 1072274.051 ops/s
Iteration  13: 1047770.623 ops/s
Iteration  14: 1068943.777 ops/s
Iteration  15: 1044631.736 ops/s
Iteration  16: 1072590.812 ops/s
Iteration  17: 1074311.500 ops/s
Iteration  18: 1071110.180 ops/s
Iteration  19: 1063935.879 ops/s
Iteration  20: 1048892.781 ops/s
Iteration  21: 1064844.181 ops/s
Iteration  22: 1064558.155 ops/s
Iteration  23: 1072951.673 ops/s
Iteration  24: 1065470.707 ops/s
Iteration  25: 1066584.070 ops/s
Iteration  26: 1072902.627 ops/s
Iteration  27: 1062361.434 ops/s
Iteration  28: 1060928.014 ops/s
Iteration  29: 1061111.104 ops/s
Iteration  30: 1060652.027 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_without":
  1063003.960 ±(99.9%) 5628.926 ops/s [Average]
  (min, avg, max) = (1044631.736, 1063003.960, 1074311.500), stdev = 8425.112
  CI (99.9%): [1057375.035, 1068632.886] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_without  thrpt   30  1063003.960 ± 5628.926  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 691758.093 ops/s
# Warmup Iteration   2: 765418.869 ops/s
# Warmup Iteration   3: 1010310.981 ops/s
# Warmup Iteration   4: 997984.540 ops/s
# Warmup Iteration   5: 1000576.747 ops/s
# Warmup Iteration   6: 994852.315 ops/s
# Warmup Iteration   7: 1000628.623 ops/s
# Warmup Iteration   8: 1000942.345 ops/s
# Warmup Iteration   9: 1002945.622 ops/s
# Warmup Iteration  10: 828900.448 ops/s
# Warmup Iteration  11: 997387.450 ops/s
# Warmup Iteration  12: 998861.154 ops/s
# Warmup Iteration  13: 994616.685 ops/s
# Warmup Iteration  14: 988186.471 ops/s
# Warmup Iteration  15: 992219.354 ops/s
# Warmup Iteration  16: 1000542.877 ops/s
# Warmup Iteration  17: 1064677.049 ops/s
# Warmup Iteration  18: 1064293.620 ops/s
# Warmup Iteration  19: 1066681.646 ops/s
# Warmup Iteration  20: 1062500.726 ops/s
# Warmup Iteration  21: 1060628.046 ops/s
# Warmup Iteration  22: 1059103.114 ops/s
# Warmup Iteration  23: 1067569.421 ops/s
# Warmup Iteration  24: 1057106.099 ops/s
# Warmup Iteration  25: 1058523.231 ops/s
# Warmup Iteration  26: 1061233.583 ops/s
# Warmup Iteration  27: 1072431.525 ops/s
# Warmup Iteration  28: 1062884.625 ops/s
# Warmup Iteration  29: 1056948.907 ops/s
# Warmup Iteration  30: 1062049.187 ops/s
Iteration   1: 1066004.919 ops/s
Iteration   2: 1061979.802 ops/s
Iteration   3: 1053749.316 ops/s
Iteration   4: 1060057.575 ops/s
Iteration   5: 1040569.692 ops/s
Iteration   6: 1039404.786 ops/s
Iteration   7: 1068947.654 ops/s
Iteration   8: 1052291.086 ops/s
Iteration   9: 1049046.036 ops/s
Iteration  10: 1070475.509 ops/s
Iteration  11: 1067365.874 ops/s
Iteration  12: 1060243.438 ops/s
Iteration  13: 1059207.852 ops/s
Iteration  14: 1058874.676 ops/s
Iteration  15: 1064399.697 ops/s
Iteration  16: 1065143.035 ops/s
Iteration  17: 1067662.779 ops/s
Iteration  18: 1047625.671 ops/s
Iteration  19: 1051228.920 ops/s
Iteration  20: 1066938.841 ops/s
Iteration  21: 1062377.001 ops/s
Iteration  22: 1043404.000 ops/s
Iteration  23: 1051897.749 ops/s
Iteration  24: 1056133.783 ops/s
Iteration  25: 1063861.930 ops/s
Iteration  26: 1064798.346 ops/s
Iteration  27: 1068568.345 ops/s
Iteration  28: 1046498.061 ops/s
Iteration  29: 1063994.429 ops/s
Iteration  30: 1043610.837 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.FloatBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll":
  1057878.721 ±(99.9%) 6195.575 ops/s [Average]
  (min, avg, max) = (1039404.786, 1057878.721, 1070475.509), stdev = 9273.246
  CI (99.9%): [1051683.146, 1064074.296] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
FloatBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll  thrpt   30  1057878.721 ± 6195.575  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 682674.087 ops/s
# Warmup Iteration   2: 757013.550 ops/s
# Warmup Iteration   3: 983179.661 ops/s
# Warmup Iteration   4: 996888.286 ops/s
# Warmup Iteration   5: 1001872.582 ops/s
# Warmup Iteration   6: 1004196.017 ops/s
# Warmup Iteration   7: 1000660.742 ops/s
# Warmup Iteration   8: 1004149.545 ops/s
# Warmup Iteration   9: 1000610.767 ops/s
# Warmup Iteration  10: 855789.705 ops/s
# Warmup Iteration  11: 983622.580 ops/s
# Warmup Iteration  12: 988556.723 ops/s
# Warmup Iteration  13: 999851.434 ops/s
# Warmup Iteration  14: 1002993.843 ops/s
# Warmup Iteration  15: 1002064.195 ops/s
# Warmup Iteration  16: 998956.790 ops/s
# Warmup Iteration  17: 1070362.405 ops/s
# Warmup Iteration  18: 1065061.388 ops/s
# Warmup Iteration  19: 1056983.047 ops/s
# Warmup Iteration  20: 1068199.768 ops/s
# Warmup Iteration  21: 1068391.382 ops/s
# Warmup Iteration  22: 1062950.082 ops/s
# Warmup Iteration  23: 1063213.049 ops/s
# Warmup Iteration  24: 1071986.662 ops/s
# Warmup Iteration  25: 1066201.863 ops/s
# Warmup Iteration  26: 1066825.968 ops/s
# Warmup Iteration  27: 1060739.101 ops/s
# Warmup Iteration  28: 1066385.962 ops/s
# Warmup Iteration  29: 1061029.359 ops/s
# Warmup Iteration  30: 1058259.610 ops/s
Iteration   1: 1064949.512 ops/s
Iteration   2: 1047005.265 ops/s
Iteration   3: 1053304.106 ops/s
Iteration   4: 1069603.641 ops/s
Iteration   5: 1061372.907 ops/s
Iteration   6: 1070761.403 ops/s
Iteration   7: 1056224.717 ops/s
Iteration   8: 1052967.930 ops/s
Iteration   9: 1061724.549 ops/s
Iteration  10: 1061095.582 ops/s
Iteration  11: 1051685.374 ops/s
Iteration  12: 1064838.094 ops/s
Iteration  13: 1046369.529 ops/s
Iteration  14: 1068145.769 ops/s
Iteration  15: 1070566.116 ops/s
Iteration  16: 1057792.111 ops/s
Iteration  17: 1073533.942 ops/s
Iteration  18: 1068076.684 ops/s
Iteration  19: 1070860.511 ops/s
Iteration  20: 1047637.891 ops/s
Iteration  21: 1056092.621 ops/s
Iteration  22: 1066529.500 ops/s
Iteration  23: 1067881.922 ops/s
Iteration  24: 1063815.754 ops/s
Iteration  25: 1048988.616 ops/s
Iteration  26: 1061821.320 ops/s
Iteration  27: 1058163.600 ops/s
Iteration  28: 1073739.480 ops/s
Iteration  29: 1072061.746 ops/s
Iteration  30: 1063617.992 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_add":
  1061707.606 ±(99.9%) 5574.347 ops/s [Average]
  (min, avg, max) = (1046369.529, 1061707.606, 1073739.480), stdev = 8343.421
  CI (99.9%): [1056133.259, 1067281.953] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_add  thrpt   30  1061707.606 ± 5574.347  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 698491.652 ops/s
# Warmup Iteration   2: 766104.619 ops/s
# Warmup Iteration   3: 1001788.459 ops/s
# Warmup Iteration   4: 1005330.550 ops/s
# Warmup Iteration   5: 1005609.649 ops/s
# Warmup Iteration   6: 1003666.086 ops/s
# Warmup Iteration   7: 1002163.319 ops/s
# Warmup Iteration   8: 1004863.119 ops/s
# Warmup Iteration   9: 1001136.351 ops/s
# Warmup Iteration  10: 832079.840 ops/s
# Warmup Iteration  11: 985408.347 ops/s
# Warmup Iteration  12: 1006895.841 ops/s
# Warmup Iteration  13: 1002373.490 ops/s
# Warmup Iteration  14: 1000545.073 ops/s
# Warmup Iteration  15: 994007.880 ops/s
# Warmup Iteration  16: 1005450.483 ops/s
# Warmup Iteration  17: 1071325.788 ops/s
# Warmup Iteration  18: 1065737.720 ops/s
# Warmup Iteration  19: 1064435.297 ops/s
# Warmup Iteration  20: 1065326.398 ops/s
# Warmup Iteration  21: 1060215.732 ops/s
# Warmup Iteration  22: 1055860.389 ops/s
# Warmup Iteration  23: 1068071.275 ops/s
# Warmup Iteration  24: 1067644.788 ops/s
# Warmup Iteration  25: 1068243.717 ops/s
# Warmup Iteration  26: 1055518.640 ops/s
# Warmup Iteration  27: 1057064.712 ops/s
# Warmup Iteration  28: 1074315.044 ops/s
# Warmup Iteration  29: 1066120.101 ops/s
# Warmup Iteration  30: 1067046.294 ops/s
Iteration   1: 1066990.840 ops/s
Iteration   2: 1052797.021 ops/s
Iteration   3: 1069007.986 ops/s
Iteration   4: 1072992.715 ops/s
Iteration   5: 1069091.836 ops/s
Iteration   6: 1067375.296 ops/s
Iteration   7: 1054109.663 ops/s
Iteration   8: 1075720.795 ops/s
Iteration   9: 1067656.203 ops/s
Iteration  10: 1062375.566 ops/s
Iteration  11: 1071678.807 ops/s
Iteration  12: 1052492.528 ops/s
Iteration  13: 1059883.755 ops/s
Iteration  14: 1071574.107 ops/s
Iteration  15: 1064547.860 ops/s
Iteration  16: 1073104.032 ops/s
Iteration  17: 1051491.828 ops/s
Iteration  18: 1069856.580 ops/s
Iteration  19: 1063767.408 ops/s
Iteration  20: 1068429.853 ops/s
Iteration  21: 1064020.428 ops/s
Iteration  22: 1053898.743 ops/s
Iteration  23: 1066629.784 ops/s
Iteration  24: 1073727.660 ops/s
Iteration  25: 1056100.312 ops/s
Iteration  26: 1063827.487 ops/s
Iteration  27: 1060709.049 ops/s
Iteration  28: 1064975.787 ops/s
Iteration  29: 1059131.291 ops/s
Iteration  30: 1066548.781 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray":
  1064483.800 ±(99.9%) 4624.180 ops/s [Average]
  (min, avg, max) = (1051491.828, 1064483.800, 1075720.795), stdev = 6921.255
  CI (99.9%): [1059859.620, 1069107.979] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray  thrpt   30  1064483.800 ± 4624.180  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 692624.868 ops/s
# Warmup Iteration   2: 757997.069 ops/s
# Warmup Iteration   3: 1000113.648 ops/s
# Warmup Iteration   4: 986330.143 ops/s
# Warmup Iteration   5: 985753.207 ops/s
# Warmup Iteration   6: 990542.245 ops/s
# Warmup Iteration   7: 985717.042 ops/s
# Warmup Iteration   8: 997827.380 ops/s
# Warmup Iteration   9: 995206.941 ops/s
# Warmup Iteration  10: 857919.648 ops/s
# Warmup Iteration  11: 961763.308 ops/s
# Warmup Iteration  12: 994231.831 ops/s
# Warmup Iteration  13: 991713.379 ops/s
# Warmup Iteration  14: 985493.908 ops/s
# Warmup Iteration  15: 995954.540 ops/s
# Warmup Iteration  16: 1001127.903 ops/s
# Warmup Iteration  17: 1038190.836 ops/s
# Warmup Iteration  18: 1064218.638 ops/s
# Warmup Iteration  19: 1050924.911 ops/s
# Warmup Iteration  20: 1069026.896 ops/s
# Warmup Iteration  21: 1062153.070 ops/s
# Warmup Iteration  22: 1063220.201 ops/s
# Warmup Iteration  23: 1065800.297 ops/s
# Warmup Iteration  24: 1058087.538 ops/s
# Warmup Iteration  25: 1066578.862 ops/s
# Warmup Iteration  26: 1067648.223 ops/s
# Warmup Iteration  27: 1065849.763 ops/s
# Warmup Iteration  28: 1063974.843 ops/s
# Warmup Iteration  29: 1057273.551 ops/s
# Warmup Iteration  30: 1059745.525 ops/s
Iteration   1: 1057249.075 ops/s
Iteration   2: 1056806.870 ops/s
Iteration   3: 1040066.858 ops/s
Iteration   4: 1051064.461 ops/s
Iteration   5: 1023641.791 ops/s
Iteration   6: 1063641.589 ops/s
Iteration   7: 1062176.084 ops/s
Iteration   8: 1053277.125 ops/s
Iteration   9: 1063057.142 ops/s
Iteration  10: 1052067.219 ops/s
Iteration  11: 1058653.979 ops/s
Iteration  12: 1060464.108 ops/s
Iteration  13: 1070942.716 ops/s
Iteration  14: 1065949.633 ops/s
Iteration  15: 1061963.470 ops/s
Iteration  16: 1061839.966 ops/s
Iteration  17: 1061939.585 ops/s
Iteration  18: 1059892.146 ops/s
Iteration  19: 1060981.345 ops/s
Iteration  20: 1058823.418 ops/s
Iteration  21: 1059562.646 ops/s
Iteration  22: 1040974.087 ops/s
Iteration  23: 1060963.886 ops/s
Iteration  24: 1047397.523 ops/s
Iteration  25: 1061793.029 ops/s
Iteration  26: 1058211.832 ops/s
Iteration  27: 1067772.279 ops/s
Iteration  28: 1055250.475 ops/s
Iteration  29: 1061269.448 ops/s
Iteration  30: 1068073.733 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable":
  1057525.584 ±(99.9%) 6347.106 ops/s [Average]
  (min, avg, max) = (1023641.791, 1057525.584, 1070942.716), stdev = 9500.050
  CI (99.9%): [1051178.478, 1063872.690] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable  thrpt   30  1057525.584 ± 6347.106  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2347751.622 ops/s
# Warmup Iteration   2: 4156646.336 ops/s
# Warmup Iteration   3: 4919653.273 ops/s
# Warmup Iteration   4: 4853946.062 ops/s
# Warmup Iteration   5: 4901262.456 ops/s
# Warmup Iteration   6: 4913258.136 ops/s
# Warmup Iteration   7: 4936268.770 ops/s
# Warmup Iteration   8: 4874380.120 ops/s
# Warmup Iteration   9: 4934026.221 ops/s
# Warmup Iteration  10: 4924472.043 ops/s
# Warmup Iteration  11: 4929339.485 ops/s
# Warmup Iteration  12: 4872793.096 ops/s
# Warmup Iteration  13: 4943230.771 ops/s
# Warmup Iteration  14: 4911955.484 ops/s
# Warmup Iteration  15: 4890558.479 ops/s
# Warmup Iteration  16: 4930014.253 ops/s
# Warmup Iteration  17: 4890997.465 ops/s
# Warmup Iteration  18: 4908756.458 ops/s
# Warmup Iteration  19: 4929819.910 ops/s
# Warmup Iteration  20: 4947102.938 ops/s
# Warmup Iteration  21: 4945211.878 ops/s
# Warmup Iteration  22: 4913668.978 ops/s
# Warmup Iteration  23: 4902157.659 ops/s
# Warmup Iteration  24: 4869343.439 ops/s
# Warmup Iteration  25: 4877797.603 ops/s
# Warmup Iteration  26: 4914333.540 ops/s
# Warmup Iteration  27: 4933636.297 ops/s
# Warmup Iteration  28: 4912647.695 ops/s
# Warmup Iteration  29: 4850175.926 ops/s
# Warmup Iteration  30: 4874451.154 ops/s
Iteration   1: 4945053.354 ops/s
Iteration   2: 4800735.003 ops/s
Iteration   3: 4929120.584 ops/s
Iteration   4: 4931520.493 ops/s
Iteration   5: 4957460.928 ops/s
Iteration   6: 4950177.751 ops/s
Iteration   7: 4889430.112 ops/s
Iteration   8: 4924040.152 ops/s
Iteration   9: 4932590.252 ops/s
Iteration  10: 4949651.062 ops/s
Iteration  11: 4975640.105 ops/s
Iteration  12: 4977385.355 ops/s
Iteration  13: 4886073.758 ops/s
Iteration  14: 4927833.210 ops/s
Iteration  15: 4903831.734 ops/s
Iteration  16: 4974402.588 ops/s
Iteration  17: 4949858.362 ops/s
Iteration  18: 4943318.091 ops/s
Iteration  19: 4889888.747 ops/s
Iteration  20: 4885021.161 ops/s
Iteration  21: 4971305.629 ops/s
Iteration  22: 4949878.612 ops/s
Iteration  23: 4976959.092 ops/s
Iteration  24: 4951850.218 ops/s
Iteration  25: 4901528.059 ops/s
Iteration  26: 4924647.044 ops/s
Iteration  27: 4850928.043 ops/s
Iteration  28: 4929503.476 ops/s
Iteration  29: 4942521.333 ops/s
Iteration  30: 4873213.974 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy":
  4926512.276 ±(99.9%) 27235.044 ops/s [Average]
  (min, avg, max) = (4800735.003, 4926512.276, 4977385.355), stdev = 40764.134
  CI (99.9%): [4899277.232, 4953747.319] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy  thrpt   30  4926512.276 ± 27235.044  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2595642.426 ops/s
# Warmup Iteration   2: 4666279.937 ops/s
# Warmup Iteration   3: 5587407.298 ops/s
# Warmup Iteration   4: 5578548.865 ops/s
# Warmup Iteration   5: 5563039.858 ops/s
# Warmup Iteration   6: 5528887.767 ops/s
# Warmup Iteration   7: 5593315.478 ops/s
# Warmup Iteration   8: 5467040.719 ops/s
# Warmup Iteration   9: 5540816.521 ops/s
# Warmup Iteration  10: 5554248.753 ops/s
# Warmup Iteration  11: 5557723.112 ops/s
# Warmup Iteration  12: 5582914.306 ops/s
# Warmup Iteration  13: 5583357.510 ops/s
# Warmup Iteration  14: 5557805.572 ops/s
# Warmup Iteration  15: 5582524.734 ops/s
# Warmup Iteration  16: 5561450.997 ops/s
# Warmup Iteration  17: 5555994.827 ops/s
# Warmup Iteration  18: 5541469.061 ops/s
# Warmup Iteration  19: 5530856.093 ops/s
# Warmup Iteration  20: 5572822.989 ops/s
# Warmup Iteration  21: 5574131.694 ops/s
# Warmup Iteration  22: 5496505.091 ops/s
# Warmup Iteration  23: 5558864.619 ops/s
# Warmup Iteration  24: 5498970.998 ops/s
# Warmup Iteration  25: 5520523.370 ops/s
# Warmup Iteration  26: 5569494.094 ops/s
# Warmup Iteration  27: 5577299.774 ops/s
# Warmup Iteration  28: 5561003.194 ops/s
# Warmup Iteration  29: 5584217.664 ops/s
# Warmup Iteration  30: 5579501.649 ops/s
Iteration   1: 5433013.771 ops/s
Iteration   2: 5595867.232 ops/s
Iteration   3: 5584623.018 ops/s
Iteration   4: 5464490.442 ops/s
Iteration   5: 5529076.755 ops/s
Iteration   6: 5542839.869 ops/s
Iteration   7: 5603396.418 ops/s
Iteration   8: 5570754.539 ops/s
Iteration   9: 5571446.015 ops/s
Iteration  10: 5556748.889 ops/s
Iteration  11: 5602207.959 ops/s
Iteration  12: 5588477.695 ops/s
Iteration  13: 5570207.202 ops/s
Iteration  14: 5563624.754 ops/s
Iteration  15: 5538318.429 ops/s
Iteration  16: 5559997.439 ops/s
Iteration  17: 5577157.431 ops/s
Iteration  18: 5538374.673 ops/s
Iteration  19: 5592739.572 ops/s
Iteration  20: 5543093.704 ops/s
Iteration  21: 5437051.628 ops/s
Iteration  22: 5609715.451 ops/s
Iteration  23: 5565666.942 ops/s
Iteration  24: 5506484.102 ops/s
Iteration  25: 5553453.850 ops/s
Iteration  26: 5602139.447 ops/s
Iteration  27: 5561717.292 ops/s
Iteration  28: 5568060.142 ops/s
Iteration  29: 5571846.149 ops/s
Iteration  30: 5599652.625 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy":
  5556741.448 ±(99.9%) 30287.166 ops/s [Average]
  (min, avg, max) = (5433013.771, 5556741.448, 5609715.451), stdev = 45332.408
  CI (99.9%): [5526454.282, 5587028.614] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy  thrpt   30  5556741.448 ± 30287.166  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 884158.675 ops/s
# Warmup Iteration   2: 1967117.729 ops/s
# Warmup Iteration   3: 1625460.250 ops/s
# Warmup Iteration   4: 1972681.486 ops/s
# Warmup Iteration   5: 1960867.219 ops/s
# Warmup Iteration   6: 1959082.562 ops/s
# Warmup Iteration   7: 1949402.635 ops/s
# Warmup Iteration   8: 1946170.063 ops/s
# Warmup Iteration   9: 1969145.204 ops/s
# Warmup Iteration  10: 1965357.756 ops/s
# Warmup Iteration  11: 1952538.212 ops/s
# Warmup Iteration  12: 1963455.742 ops/s
# Warmup Iteration  13: 1965444.267 ops/s
# Warmup Iteration  14: 1955993.477 ops/s
# Warmup Iteration  15: 1966103.963 ops/s
# Warmup Iteration  16: 1929644.902 ops/s
# Warmup Iteration  17: 1967139.281 ops/s
# Warmup Iteration  18: 1980908.027 ops/s
# Warmup Iteration  19: 1972799.134 ops/s
# Warmup Iteration  20: 1973848.716 ops/s
# Warmup Iteration  21: 1958709.401 ops/s
# Warmup Iteration  22: 1949514.825 ops/s
# Warmup Iteration  23: 1954016.643 ops/s
# Warmup Iteration  24: 1925391.919 ops/s
# Warmup Iteration  25: 1964727.500 ops/s
# Warmup Iteration  26: 1965715.833 ops/s
# Warmup Iteration  27: 1981363.271 ops/s
# Warmup Iteration  28: 1978152.636 ops/s
# Warmup Iteration  29: 1950574.957 ops/s
# Warmup Iteration  30: 1982353.902 ops/s
Iteration   1: 1927462.419 ops/s
Iteration   2: 1979611.579 ops/s
Iteration   3: 1963007.988 ops/s
Iteration   4: 1955137.561 ops/s
Iteration   5: 1958518.943 ops/s
Iteration   6: 1942755.501 ops/s
Iteration   7: 1968268.175 ops/s
Iteration   8: 1980861.398 ops/s
Iteration   9: 1953236.480 ops/s
Iteration  10: 1982923.663 ops/s
Iteration  11: 1974006.894 ops/s
Iteration  12: 1968869.069 ops/s
Iteration  13: 1979261.582 ops/s
Iteration  14: 1982005.853 ops/s
Iteration  15: 1966043.090 ops/s
Iteration  16: 1943565.482 ops/s
Iteration  17: 1949531.170 ops/s
Iteration  18: 1962669.449 ops/s
Iteration  19: 1979457.288 ops/s
Iteration  20: 1967919.029 ops/s
Iteration  21: 1980516.487 ops/s
Iteration  22: 1971764.549 ops/s
Iteration  23: 1971678.381 ops/s
Iteration  24: 1993695.992 ops/s
Iteration  25: 1989038.002 ops/s
Iteration  26: 1964923.872 ops/s
Iteration  27: 1969619.678 ops/s
Iteration  28: 1977545.987 ops/s
Iteration  29: 1958134.613 ops/s
Iteration  30: 1977924.651 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_appendString":
  1967998.494 ±(99.9%) 9886.077 ops/s [Average]
  (min, avg, max) = (1927462.419, 1967998.494, 1993695.992), stdev = 14797.015
  CI (99.9%): [1958112.418, 1977884.571] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_appendString  thrpt   30  1967998.494 ± 9886.077  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3944502.176 ops/s
# Warmup Iteration   2: 7606952.537 ops/s
# Warmup Iteration   3: 8032836.982 ops/s
# Warmup Iteration   4: 8143655.024 ops/s
# Warmup Iteration   5: 6790628.932 ops/s
# Warmup Iteration   6: 8191620.318 ops/s
# Warmup Iteration   7: 8179792.633 ops/s
# Warmup Iteration   8: 8186251.564 ops/s
# Warmup Iteration   9: 8198401.375 ops/s
# Warmup Iteration  10: 8135815.872 ops/s
# Warmup Iteration  11: 8155615.735 ops/s
# Warmup Iteration  12: 8186556.539 ops/s
# Warmup Iteration  13: 8188373.740 ops/s
# Warmup Iteration  14: 8187077.342 ops/s
# Warmup Iteration  15: 8143477.305 ops/s
# Warmup Iteration  16: 8192165.403 ops/s
# Warmup Iteration  17: 8136892.116 ops/s
# Warmup Iteration  18: 8194395.139 ops/s
# Warmup Iteration  19: 8129962.805 ops/s
# Warmup Iteration  20: 8193084.102 ops/s
# Warmup Iteration  21: 8147269.458 ops/s
# Warmup Iteration  22: 8187660.772 ops/s
# Warmup Iteration  23: 8144523.229 ops/s
# Warmup Iteration  24: 8169803.509 ops/s
# Warmup Iteration  25: 8159557.848 ops/s
# Warmup Iteration  26: 8177761.425 ops/s
# Warmup Iteration  27: 8127320.989 ops/s
# Warmup Iteration  28: 8171704.595 ops/s
# Warmup Iteration  29: 8166475.919 ops/s
# Warmup Iteration  30: 8175680.523 ops/s
Iteration   1: 8174230.799 ops/s
Iteration   2: 8168512.450 ops/s
Iteration   3: 8173959.343 ops/s
Iteration   4: 8156169.519 ops/s
Iteration   5: 8197855.257 ops/s
Iteration   6: 8213495.099 ops/s
Iteration   7: 8162938.395 ops/s
Iteration   8: 8145267.963 ops/s
Iteration   9: 8219571.141 ops/s
Iteration  10: 8168006.323 ops/s
Iteration  11: 8179536.240 ops/s
Iteration  12: 8155604.561 ops/s
Iteration  13: 8174935.959 ops/s
Iteration  14: 8184821.257 ops/s
Iteration  15: 8184232.251 ops/s
Iteration  16: 8187810.100 ops/s
Iteration  17: 8024089.561 ops/s
Iteration  18: 8140861.191 ops/s
Iteration  19: 8248145.881 ops/s
Iteration  20: 8187688.013 ops/s
Iteration  21: 8190996.159 ops/s
Iteration  22: 8038033.653 ops/s
Iteration  23: 8145512.894 ops/s
Iteration  24: 8201535.666 ops/s
Iteration  25: 8054442.282 ops/s
Iteration  26: 8035927.361 ops/s
Iteration  27: 8197639.559 ops/s
Iteration  28: 8135571.532 ops/s
Iteration  29: 8157632.592 ops/s
Iteration  30: 8172886.581 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_asLazy":
  8159263.653 ±(99.9%) 36185.823 ops/s [Average]
  (min, avg, max) = (8024089.561, 8159263.653, 8248145.881), stdev = 54161.240
  CI (99.9%): [8123077.830, 8195449.476] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_asLazy  thrpt   30  8159263.653 ± 36185.823  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6201398.314 ops/s
# Warmup Iteration   2: 11354704.952 ops/s
# Warmup Iteration   3: 11310970.870 ops/s
# Warmup Iteration   4: 12338175.837 ops/s
# Warmup Iteration   5: 12129328.619 ops/s
# Warmup Iteration   6: 12244121.201 ops/s
# Warmup Iteration   7: 12247002.832 ops/s
# Warmup Iteration   8: 12398227.628 ops/s
# Warmup Iteration   9: 12243108.991 ops/s
# Warmup Iteration  10: 12225860.377 ops/s
# Warmup Iteration  11: 12366484.569 ops/s
# Warmup Iteration  12: 12388156.597 ops/s
# Warmup Iteration  13: 12379940.458 ops/s
# Warmup Iteration  14: 12235969.282 ops/s
# Warmup Iteration  15: 12359079.890 ops/s
# Warmup Iteration  16: 12295639.437 ops/s
# Warmup Iteration  17: 12249986.423 ops/s
# Warmup Iteration  18: 12259523.248 ops/s
# Warmup Iteration  19: 12394822.651 ops/s
# Warmup Iteration  20: 12294707.985 ops/s
# Warmup Iteration  21: 12365355.823 ops/s
# Warmup Iteration  22: 12275397.810 ops/s
# Warmup Iteration  23: 12377778.871 ops/s
# Warmup Iteration  24: 12147413.595 ops/s
# Warmup Iteration  25: 12361817.879 ops/s
# Warmup Iteration  26: 12315469.714 ops/s
# Warmup Iteration  27: 12360316.055 ops/s
# Warmup Iteration  28: 12346752.909 ops/s
# Warmup Iteration  29: 12267289.771 ops/s
# Warmup Iteration  30: 12264749.422 ops/s
Iteration   1: 12240835.409 ops/s
Iteration   2: 12372401.442 ops/s
Iteration   3: 12233360.569 ops/s
Iteration   4: 12353816.942 ops/s
Iteration   5: 12404814.454 ops/s
Iteration   6: 12386508.883 ops/s
Iteration   7: 12328014.323 ops/s
Iteration   8: 12188830.404 ops/s
Iteration   9: 12348270.829 ops/s
Iteration  10: 12369582.547 ops/s
Iteration  11: 12291083.380 ops/s
Iteration  12: 12159081.855 ops/s
Iteration  13: 12290717.138 ops/s
Iteration  14: 12333127.324 ops/s
Iteration  15: 12177071.461 ops/s
Iteration  16: 12391269.521 ops/s
Iteration  17: 12395716.387 ops/s
Iteration  18: 12185501.834 ops/s
Iteration  19: 12357890.396 ops/s
Iteration  20: 12065176.960 ops/s
Iteration  21: 12337886.386 ops/s
Iteration  22: 12155579.904 ops/s
Iteration  23: 11894984.749 ops/s
Iteration  24: 12396910.059 ops/s
Iteration  25: 12099097.765 ops/s
Iteration  26: 12369638.547 ops/s
Iteration  27: 12204148.457 ops/s
Iteration  28: 12346619.998 ops/s
Iteration  29: 12326847.154 ops/s
Iteration  30: 12197423.621 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized":
  12273406.957 ±(99.9%) 80643.729 ops/s [Average]
  (min, avg, max) = (11894984.749, 12273406.957, 12404814.454), stdev = 120703.747
  CI (99.9%): [12192763.227, 12354050.686] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized  thrpt   30  12273406.957 ± 80643.729  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7095040.319 ops/s
# Warmup Iteration   2: 12686437.759 ops/s
# Warmup Iteration   3: 12829006.223 ops/s
# Warmup Iteration   4: 14151021.479 ops/s
# Warmup Iteration   5: 14104419.576 ops/s
# Warmup Iteration   6: 13869357.272 ops/s
# Warmup Iteration   7: 14111388.228 ops/s
# Warmup Iteration   8: 14013506.750 ops/s
# Warmup Iteration   9: 14072944.671 ops/s
# Warmup Iteration  10: 13858130.969 ops/s
# Warmup Iteration  11: 14075203.965 ops/s
# Warmup Iteration  12: 14077333.898 ops/s
# Warmup Iteration  13: 14054336.317 ops/s
# Warmup Iteration  14: 13889075.236 ops/s
# Warmup Iteration  15: 14074600.336 ops/s
# Warmup Iteration  16: 14025849.058 ops/s
# Warmup Iteration  17: 13870199.650 ops/s
# Warmup Iteration  18: 13992079.619 ops/s
# Warmup Iteration  19: 14068190.353 ops/s
# Warmup Iteration  20: 13858166.527 ops/s
# Warmup Iteration  21: 13892725.030 ops/s
# Warmup Iteration  22: 14088151.881 ops/s
# Warmup Iteration  23: 14043347.759 ops/s
# Warmup Iteration  24: 14003785.823 ops/s
# Warmup Iteration  25: 13964202.409 ops/s
# Warmup Iteration  26: 13931728.578 ops/s
# Warmup Iteration  27: 13935090.773 ops/s
# Warmup Iteration  28: 13899571.776 ops/s
# Warmup Iteration  29: 14133398.417 ops/s
# Warmup Iteration  30: 14168260.984 ops/s
Iteration   1: 14055043.111 ops/s
Iteration   2: 14114354.934 ops/s
Iteration   3: 14152859.122 ops/s
Iteration   4: 13713839.577 ops/s
Iteration   5: 14223061.703 ops/s
Iteration   6: 13820932.610 ops/s
Iteration   7: 14062991.650 ops/s
Iteration   8: 14055161.198 ops/s
Iteration   9: 14128253.615 ops/s
Iteration  10: 14021156.709 ops/s
Iteration  11: 13748697.057 ops/s
Iteration  12: 13865195.283 ops/s
Iteration  13: 14149174.740 ops/s
Iteration  14: 14112374.081 ops/s
Iteration  15: 13944539.108 ops/s
Iteration  16: 14065251.295 ops/s
Iteration  17: 13931907.145 ops/s
Iteration  18: 14128693.946 ops/s
Iteration  19: 13959868.931 ops/s
Iteration  20: 14041202.060 ops/s
Iteration  21: 14139261.920 ops/s
Iteration  22: 14065399.559 ops/s
Iteration  23: 14029131.611 ops/s
Iteration  24: 14056234.197 ops/s
Iteration  25: 14119593.861 ops/s
Iteration  26: 14018449.945 ops/s
Iteration  27: 14125769.815 ops/s
Iteration  28: 13934462.576 ops/s
Iteration  29: 14137897.298 ops/s
Iteration  30: 14199134.944 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable":
  14037329.787 ±(99.9%) 83635.178 ops/s [Average]
  (min, avg, max) = (13713839.577, 14037329.787, 14223061.703), stdev = 125181.207
  CI (99.9%): [13953694.608, 14120964.965] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  14037329.787 ± 83635.178  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 535268.407 ops/s
# Warmup Iteration   2: 559148.037 ops/s
# Warmup Iteration   3: 761277.899 ops/s
# Warmup Iteration   4: 758680.084 ops/s
# Warmup Iteration   5: 761352.136 ops/s
# Warmup Iteration   6: 761620.973 ops/s
# Warmup Iteration   7: 755529.171 ops/s
# Warmup Iteration   8: 758718.557 ops/s
# Warmup Iteration   9: 761303.489 ops/s
# Warmup Iteration  10: 755967.580 ops/s
# Warmup Iteration  11: 660369.599 ops/s
# Warmup Iteration  12: 725235.981 ops/s
# Warmup Iteration  13: 749627.237 ops/s
# Warmup Iteration  14: 755601.735 ops/s
# Warmup Iteration  15: 757839.487 ops/s
# Warmup Iteration  16: 759608.068 ops/s
# Warmup Iteration  17: 797790.029 ops/s
# Warmup Iteration  18: 799311.317 ops/s
# Warmup Iteration  19: 799091.436 ops/s
# Warmup Iteration  20: 794444.285 ops/s
# Warmup Iteration  21: 796509.411 ops/s
# Warmup Iteration  22: 781496.630 ops/s
# Warmup Iteration  23: 795492.852 ops/s
# Warmup Iteration  24: 794749.216 ops/s
# Warmup Iteration  25: 792034.514 ops/s
# Warmup Iteration  26: 799720.075 ops/s
# Warmup Iteration  27: 795257.152 ops/s
# Warmup Iteration  28: 798969.508 ops/s
# Warmup Iteration  29: 794439.559 ops/s
# Warmup Iteration  30: 799839.622 ops/s
Iteration   1: 799019.793 ops/s
Iteration   2: 784930.944 ops/s
Iteration   3: 795981.181 ops/s
Iteration   4: 798087.699 ops/s
Iteration   5: 791905.397 ops/s
Iteration   6: 798074.019 ops/s
Iteration   7: 795599.788 ops/s
Iteration   8: 789489.711 ops/s
Iteration   9: 802326.486 ops/s
Iteration  10: 788229.842 ops/s
Iteration  11: 767495.224 ops/s
Iteration  12: 798761.528 ops/s
Iteration  13: 797940.071 ops/s
Iteration  14: 797688.963 ops/s
Iteration  15: 796316.419 ops/s
Iteration  16: 802612.131 ops/s
Iteration  17: 796832.406 ops/s
Iteration  18: 794522.236 ops/s
Iteration  19: 799116.553 ops/s
Iteration  20: 800177.570 ops/s
Iteration  21: 798504.144 ops/s
Iteration  22: 797915.227 ops/s
Iteration  23: 796017.644 ops/s
Iteration  24: 790003.253 ops/s
Iteration  25: 794354.501 ops/s
Iteration  26: 796700.407 ops/s
Iteration  27: 797629.796 ops/s
Iteration  28: 796816.688 ops/s
Iteration  29: 794478.640 ops/s
Iteration  30: 793386.325 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator":
  795030.486 ±(99.9%) 4358.228 ops/s [Average]
  (min, avg, max) = (767495.224, 795030.486, 802612.131), stdev = 6523.191
  CI (99.9%): [790672.258, 799388.714] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator  thrpt   30  795030.486 ± 4358.228  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 511568.082 ops/s
# Warmup Iteration   2: 685199.666 ops/s
# Warmup Iteration   3: 830411.857 ops/s
# Warmup Iteration   4: 822988.036 ops/s
# Warmup Iteration   5: 831393.347 ops/s
# Warmup Iteration   6: 832713.343 ops/s
# Warmup Iteration   7: 833086.465 ops/s
# Warmup Iteration   8: 685557.098 ops/s
# Warmup Iteration   9: 833860.575 ops/s
# Warmup Iteration  10: 833884.124 ops/s
# Warmup Iteration  11: 827404.569 ops/s
# Warmup Iteration  12: 821044.315 ops/s
# Warmup Iteration  13: 832382.294 ops/s
# Warmup Iteration  14: 832847.886 ops/s
# Warmup Iteration  15: 831811.263 ops/s
# Warmup Iteration  16: 830126.539 ops/s
# Warmup Iteration  17: 870073.929 ops/s
# Warmup Iteration  18: 874927.310 ops/s
# Warmup Iteration  19: 878722.036 ops/s
# Warmup Iteration  20: 876460.151 ops/s
# Warmup Iteration  21: 870339.463 ops/s
# Warmup Iteration  22: 877591.849 ops/s
# Warmup Iteration  23: 862234.877 ops/s
# Warmup Iteration  24: 878431.891 ops/s
# Warmup Iteration  25: 873712.124 ops/s
# Warmup Iteration  26: 865879.043 ops/s
# Warmup Iteration  27: 871924.590 ops/s
# Warmup Iteration  28: 865690.481 ops/s
# Warmup Iteration  29: 873965.414 ops/s
# Warmup Iteration  30: 862851.520 ops/s
Iteration   1: 876255.854 ops/s
Iteration   2: 876212.579 ops/s
Iteration   3: 854662.685 ops/s
Iteration   4: 877151.115 ops/s
Iteration   5: 874239.997 ops/s
Iteration   6: 855343.161 ops/s
Iteration   7: 865951.027 ops/s
Iteration   8: 877960.333 ops/s
Iteration   9: 862950.891 ops/s
Iteration  10: 876530.723 ops/s
Iteration  11: 876944.795 ops/s
Iteration  12: 871504.389 ops/s
Iteration  13: 875012.044 ops/s
Iteration  14: 874682.318 ops/s
Iteration  15: 872972.641 ops/s
Iteration  16: 869075.631 ops/s
Iteration  17: 861129.781 ops/s
Iteration  18: 860153.854 ops/s
Iteration  19: 874016.531 ops/s
Iteration  20: 878080.279 ops/s
Iteration  21: 872268.318 ops/s
Iteration  22: 858179.706 ops/s
Iteration  23: 873739.318 ops/s
Iteration  24: 873730.393 ops/s
Iteration  25: 862646.527 ops/s
Iteration  26: 875729.568 ops/s
Iteration  27: 871370.434 ops/s
Iteration  28: 875160.635 ops/s
Iteration  29: 850401.826 ops/s
Iteration  30: 864282.718 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove":
  869611.336 ±(99.9%) 5312.702 ops/s [Average]
  (min, avg, max) = (850401.826, 869611.336, 878080.279), stdev = 7951.803
  CI (99.9%): [864298.634, 874924.038] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  869611.336 ± 5312.702  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 138976.397 ops/s
# Warmup Iteration   2: 237480.260 ops/s
# Warmup Iteration   3: 272789.570 ops/s
# Warmup Iteration   4: 273348.272 ops/s
# Warmup Iteration   5: 273018.212 ops/s
# Warmup Iteration   6: 227507.957 ops/s
# Warmup Iteration   7: 276267.101 ops/s
# Warmup Iteration   8: 274786.156 ops/s
# Warmup Iteration   9: 271203.438 ops/s
# Warmup Iteration  10: 272221.541 ops/s
# Warmup Iteration  11: 272073.119 ops/s
# Warmup Iteration  12: 271534.166 ops/s
# Warmup Iteration  13: 274655.663 ops/s
# Warmup Iteration  14: 275744.766 ops/s
# Warmup Iteration  15: 274984.034 ops/s
# Warmup Iteration  16: 272786.560 ops/s
# Warmup Iteration  17: 285973.959 ops/s
# Warmup Iteration  18: 283638.585 ops/s
# Warmup Iteration  19: 282393.431 ops/s
# Warmup Iteration  20: 283583.585 ops/s
# Warmup Iteration  21: 285395.420 ops/s
# Warmup Iteration  22: 285499.454 ops/s
# Warmup Iteration  23: 285705.203 ops/s
# Warmup Iteration  24: 285342.754 ops/s
# Warmup Iteration  25: 282982.202 ops/s
# Warmup Iteration  26: 286498.881 ops/s
# Warmup Iteration  27: 283571.156 ops/s
# Warmup Iteration  28: 285881.388 ops/s
# Warmup Iteration  29: 283349.271 ops/s
# Warmup Iteration  30: 284127.685 ops/s
Iteration   1: 283889.053 ops/s
Iteration   2: 278973.396 ops/s
Iteration   3: 286275.516 ops/s
Iteration   4: 285326.654 ops/s
Iteration   5: 285234.704 ops/s
Iteration   6: 284123.771 ops/s
Iteration   7: 287141.720 ops/s
Iteration   8: 285796.398 ops/s
Iteration   9: 283874.373 ops/s
Iteration  10: 283458.326 ops/s
Iteration  11: 283965.793 ops/s
Iteration  12: 285140.815 ops/s
Iteration  13: 281190.384 ops/s
Iteration  14: 279593.913 ops/s
Iteration  15: 285442.855 ops/s
Iteration  16: 286547.239 ops/s
Iteration  17: 285417.651 ops/s
Iteration  18: 280989.035 ops/s
Iteration  19: 281289.238 ops/s
Iteration  20: 280801.114 ops/s
Iteration  21: 284523.346 ops/s
Iteration  22: 285286.691 ops/s
Iteration  23: 287056.660 ops/s
Iteration  24: 281104.048 ops/s
Iteration  25: 285000.415 ops/s
Iteration  26: 282160.487 ops/s
Iteration  27: 280547.009 ops/s
Iteration  28: 285372.871 ops/s
Iteration  29: 285422.412 ops/s
Iteration  30: 285435.869 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_chunk":
  283879.392 ±(99.9%) 1542.114 ops/s [Average]
  (min, avg, max) = (278973.396, 283879.392, 287141.720), stdev = 2308.164
  CI (99.9%): [282337.278, 285421.506] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_chunk  thrpt   30  283879.392 ± 1542.114  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4445257.331 ops/s
# Warmup Iteration   2: 7765488.650 ops/s
# Warmup Iteration   3: 9264079.833 ops/s
# Warmup Iteration   4: 9188155.218 ops/s
# Warmup Iteration   5: 9219733.264 ops/s
# Warmup Iteration   6: 9225899.168 ops/s
# Warmup Iteration   7: 9211110.842 ops/s
# Warmup Iteration   8: 9164504.542 ops/s
# Warmup Iteration   9: 9212012.814 ops/s
# Warmup Iteration  10: 9201369.571 ops/s
# Warmup Iteration  11: 9233470.474 ops/s
# Warmup Iteration  12: 9053635.271 ops/s
# Warmup Iteration  13: 9147596.908 ops/s
# Warmup Iteration  14: 9165292.474 ops/s
# Warmup Iteration  15: 9205998.385 ops/s
# Warmup Iteration  16: 9197425.722 ops/s
# Warmup Iteration  17: 9204887.665 ops/s
# Warmup Iteration  18: 9190994.482 ops/s
# Warmup Iteration  19: 9170331.507 ops/s
# Warmup Iteration  20: 9179282.106 ops/s
# Warmup Iteration  21: 9056657.061 ops/s
# Warmup Iteration  22: 9136620.488 ops/s
# Warmup Iteration  23: 9127872.492 ops/s
# Warmup Iteration  24: 9172523.122 ops/s
# Warmup Iteration  25: 9218613.527 ops/s
# Warmup Iteration  26: 9161724.480 ops/s
# Warmup Iteration  27: 9123683.754 ops/s
# Warmup Iteration  28: 9149803.747 ops/s
# Warmup Iteration  29: 9163856.949 ops/s
# Warmup Iteration  30: 9195467.900 ops/s
Iteration   1: 9163842.680 ops/s
Iteration   2: 9247685.608 ops/s
Iteration   3: 8995391.595 ops/s
Iteration   4: 9067787.814 ops/s
Iteration   5: 9210664.146 ops/s
Iteration   6: 9269625.392 ops/s
Iteration   7: 9224963.934 ops/s
Iteration   8: 9267020.952 ops/s
Iteration   9: 9206443.536 ops/s
Iteration  10: 9212018.827 ops/s
Iteration  11: 9216147.326 ops/s
Iteration  12: 9267360.279 ops/s
Iteration  13: 9217475.488 ops/s
Iteration  14: 9246531.770 ops/s
Iteration  15: 9273830.913 ops/s
Iteration  16: 9202372.317 ops/s
Iteration  17: 9243620.973 ops/s
Iteration  18: 9235563.984 ops/s
Iteration  19: 9228679.318 ops/s
Iteration  20: 9226226.501 ops/s
Iteration  21: 9142964.486 ops/s
Iteration  22: 9138718.261 ops/s
Iteration  23: 9187298.657 ops/s
Iteration  24: 9092226.509 ops/s
Iteration  25: 9125207.314 ops/s
Iteration  26: 9222001.663 ops/s
Iteration  27: 9232634.086 ops/s
Iteration  28: 9257952.108 ops/s
Iteration  29: 9078498.218 ops/s
Iteration  30: 9051090.630 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_clear":
  9191728.176 ±(99.9%) 48807.103 ops/s [Average]
  (min, avg, max) = (8995391.595, 9191728.176, 9273830.913), stdev = 73052.180
  CI (99.9%): [9142921.073, 9240535.280] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_clear  thrpt   30  9191728.176 ± 48807.103  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 701150.359 ops/s
# Warmup Iteration   2: 1864829.373 ops/s
# Warmup Iteration   3: 1929095.795 ops/s
# Warmup Iteration   4: 1585877.435 ops/s
# Warmup Iteration   5: 1914060.132 ops/s
# Warmup Iteration   6: 1912343.402 ops/s
# Warmup Iteration   7: 1904888.415 ops/s
# Warmup Iteration   8: 1932416.458 ops/s
# Warmup Iteration   9: 1924374.508 ops/s
# Warmup Iteration  10: 1921538.267 ops/s
# Warmup Iteration  11: 1919504.997 ops/s
# Warmup Iteration  12: 1921915.168 ops/s
# Warmup Iteration  13: 1919415.564 ops/s
# Warmup Iteration  14: 1872513.285 ops/s
# Warmup Iteration  15: 1926658.926 ops/s
# Warmup Iteration  16: 1917427.136 ops/s
# Warmup Iteration  17: 1920736.259 ops/s
# Warmup Iteration  18: 1895539.411 ops/s
# Warmup Iteration  19: 1926199.945 ops/s
# Warmup Iteration  20: 1904881.188 ops/s
# Warmup Iteration  21: 1914251.004 ops/s
# Warmup Iteration  22: 1918928.976 ops/s
# Warmup Iteration  23: 1930239.092 ops/s
# Warmup Iteration  24: 1910395.423 ops/s
# Warmup Iteration  25: 1922237.357 ops/s
# Warmup Iteration  26: 1919192.222 ops/s
# Warmup Iteration  27: 1911109.536 ops/s
# Warmup Iteration  28: 1931785.587 ops/s
# Warmup Iteration  29: 1915463.091 ops/s
# Warmup Iteration  30: 1916316.362 ops/s
Iteration   1: 1926006.225 ops/s
Iteration   2: 1917347.660 ops/s
Iteration   3: 1877549.735 ops/s
Iteration   4: 1922771.477 ops/s
Iteration   5: 1925339.839 ops/s
Iteration   6: 1911173.762 ops/s
Iteration   7: 1914613.035 ops/s
Iteration   8: 1925431.594 ops/s
Iteration   9: 1920389.071 ops/s
Iteration  10: 1923935.457 ops/s
Iteration  11: 1912796.246 ops/s
Iteration  12: 1929325.553 ops/s
Iteration  13: 1928687.707 ops/s
Iteration  14: 1924768.952 ops/s
Iteration  15: 1892645.603 ops/s
Iteration  16: 1897981.058 ops/s
Iteration  17: 1895544.096 ops/s
Iteration  18: 1932589.272 ops/s
Iteration  19: 1897820.093 ops/s
Iteration  20: 1913404.585 ops/s
Iteration  21: 1912275.968 ops/s
Iteration  22: 1931506.553 ops/s
Iteration  23: 1926859.187 ops/s
Iteration  24: 1911313.840 ops/s
Iteration  25: 1925260.639 ops/s
Iteration  26: 1919356.557 ops/s
Iteration  27: 1916103.011 ops/s
Iteration  28: 1922527.051 ops/s
Iteration  29: 1892303.525 ops/s
Iteration  30: 1888155.962 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_collect":
  1914526.110 ±(99.9%) 9643.686 ops/s [Average]
  (min, avg, max) = (1877549.735, 1914526.110, 1932589.272), stdev = 14434.216
  CI (99.9%): [1904882.425, 1924169.796] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_collect  thrpt   30  1914526.110 ± 9643.686  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3405840.363 ops/s
# Warmup Iteration   2: 5945503.310 ops/s
# Warmup Iteration   3: 7105517.160 ops/s
# Warmup Iteration   4: 7047433.321 ops/s
# Warmup Iteration   5: 7139699.583 ops/s
# Warmup Iteration   6: 7118895.966 ops/s
# Warmup Iteration   7: 7133579.261 ops/s
# Warmup Iteration   8: 7084285.247 ops/s
# Warmup Iteration   9: 7137553.399 ops/s
# Warmup Iteration  10: 6859577.337 ops/s
# Warmup Iteration  11: 7133477.759 ops/s
# Warmup Iteration  12: 7119206.534 ops/s
# Warmup Iteration  13: 7123015.817 ops/s
# Warmup Iteration  14: 7063060.677 ops/s
# Warmup Iteration  15: 7091242.832 ops/s
# Warmup Iteration  16: 7082809.479 ops/s
# Warmup Iteration  17: 7091649.651 ops/s
# Warmup Iteration  18: 7100227.995 ops/s
# Warmup Iteration  19: 7069823.031 ops/s
# Warmup Iteration  20: 7040428.757 ops/s
# Warmup Iteration  21: 7013532.144 ops/s
# Warmup Iteration  22: 7089186.578 ops/s
# Warmup Iteration  23: 7104453.752 ops/s
# Warmup Iteration  24: 7057141.011 ops/s
# Warmup Iteration  25: 7095736.029 ops/s
# Warmup Iteration  26: 7077543.243 ops/s
# Warmup Iteration  27: 7087099.919 ops/s
# Warmup Iteration  28: 7112161.384 ops/s
# Warmup Iteration  29: 7053750.114 ops/s
# Warmup Iteration  30: 7143341.188 ops/s
Iteration   1: 7065224.281 ops/s
Iteration   2: 7166806.550 ops/s
Iteration   3: 7045167.496 ops/s
Iteration   4: 7007055.469 ops/s
Iteration   5: 7141962.141 ops/s
Iteration   6: 7133358.185 ops/s
Iteration   7: 7034386.802 ops/s
Iteration   8: 7134795.208 ops/s
Iteration   9: 7064710.764 ops/s
Iteration  10: 7103525.504 ops/s
Iteration  11: 7094478.003 ops/s
Iteration  12: 7113299.436 ops/s
Iteration  13: 7052150.947 ops/s
Iteration  14: 7111652.767 ops/s
Iteration  15: 7096024.534 ops/s
Iteration  16: 6992625.431 ops/s
Iteration  17: 7027293.636 ops/s
Iteration  18: 7103670.066 ops/s
Iteration  19: 7155022.466 ops/s
Iteration  20: 7113193.035 ops/s
Iteration  21: 7092943.082 ops/s
Iteration  22: 7151445.563 ops/s
Iteration  23: 7095203.083 ops/s
Iteration  24: 7026427.270 ops/s
Iteration  25: 7072751.318 ops/s
Iteration  26: 7126646.602 ops/s
Iteration  27: 7143447.385 ops/s
Iteration  28: 7117985.494 ops/s
Iteration  29: 7074052.441 ops/s
Iteration  30: 7095289.006 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_contains":
  7091753.132 ±(99.9%) 30413.788 ops/s [Average]
  (min, avg, max) = (6992625.431, 7091753.132, 7166806.550), stdev = 45521.930
  CI (99.9%): [7061339.344, 7122166.920] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_contains  thrpt   30  7091753.132 ± 30413.788  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6684897.059 ops/s
# Warmup Iteration   2: 12241015.388 ops/s
# Warmup Iteration   3: 12223569.976 ops/s
# Warmup Iteration   4: 13595078.120 ops/s
# Warmup Iteration   5: 13635400.661 ops/s
# Warmup Iteration   6: 13522817.890 ops/s
# Warmup Iteration   7: 13554842.219 ops/s
# Warmup Iteration   8: 13446937.324 ops/s
# Warmup Iteration   9: 13465705.749 ops/s
# Warmup Iteration  10: 13577768.213 ops/s
# Warmup Iteration  11: 13576176.124 ops/s
# Warmup Iteration  12: 13418588.725 ops/s
# Warmup Iteration  13: 13580726.201 ops/s
# Warmup Iteration  14: 13577224.283 ops/s
# Warmup Iteration  15: 13579059.676 ops/s
# Warmup Iteration  16: 13614001.606 ops/s
# Warmup Iteration  17: 13545869.710 ops/s
# Warmup Iteration  18: 13336261.554 ops/s
# Warmup Iteration  19: 13560104.425 ops/s
# Warmup Iteration  20: 13517983.937 ops/s
# Warmup Iteration  21: 13624999.912 ops/s
# Warmup Iteration  22: 13578375.436 ops/s
# Warmup Iteration  23: 13435613.625 ops/s
# Warmup Iteration  24: 13487517.963 ops/s
# Warmup Iteration  25: 13595473.900 ops/s
# Warmup Iteration  26: 13590223.464 ops/s
# Warmup Iteration  27: 13410113.348 ops/s
# Warmup Iteration  28: 13449239.591 ops/s
# Warmup Iteration  29: 13591482.260 ops/s
# Warmup Iteration  30: 13615057.627 ops/s
Iteration   1: 13650170.494 ops/s
Iteration   2: 13664282.193 ops/s
Iteration   3: 13542721.916 ops/s
Iteration   4: 13604106.863 ops/s
Iteration   5: 13640445.818 ops/s
Iteration   6: 13626540.474 ops/s
Iteration   7: 13597165.144 ops/s
Iteration   8: 13578445.679 ops/s
Iteration   9: 13627967.130 ops/s
Iteration  10: 13585564.891 ops/s
Iteration  11: 13634616.948 ops/s
Iteration  12: 13488357.791 ops/s
Iteration  13: 13562837.782 ops/s
Iteration  14: 13630795.075 ops/s
Iteration  15: 13599211.003 ops/s
Iteration  16: 13664630.963 ops/s
Iteration  17: 13656726.178 ops/s
Iteration  18: 13706150.945 ops/s
Iteration  19: 13562959.784 ops/s
Iteration  20: 13629264.161 ops/s
Iteration  21: 13670440.571 ops/s
Iteration  22: 13425627.094 ops/s
Iteration  23: 13668551.448 ops/s
Iteration  24: 13357319.870 ops/s
Iteration  25: 13501384.897 ops/s
Iteration  26: 13560416.957 ops/s
Iteration  27: 13576264.802 ops/s
Iteration  28: 13474330.899 ops/s
Iteration  29: 13586489.823 ops/s
Iteration  30: 13559948.868 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray":
  13587791.215 ±(99.9%) 51834.660 ops/s [Average]
  (min, avg, max) = (13357319.870, 13587791.215, 13706150.945), stdev = 77583.685
  CI (99.9%): [13535956.555, 13639625.875] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray  thrpt   30  13587791.215 ± 51834.660  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4405015.171 ops/s
# Warmup Iteration   2: 7842073.567 ops/s
# Warmup Iteration   3: 9159457.306 ops/s
# Warmup Iteration   4: 9409206.178 ops/s
# Warmup Iteration   5: 9452094.202 ops/s
# Warmup Iteration   6: 9387213.199 ops/s
# Warmup Iteration   7: 9464731.048 ops/s
# Warmup Iteration   8: 9462649.067 ops/s
# Warmup Iteration   9: 9460163.134 ops/s
# Warmup Iteration  10: 9430769.110 ops/s
# Warmup Iteration  11: 9416466.786 ops/s
# Warmup Iteration  12: 9499544.085 ops/s
# Warmup Iteration  13: 9475239.255 ops/s
# Warmup Iteration  14: 9405063.157 ops/s
# Warmup Iteration  15: 9424159.529 ops/s
# Warmup Iteration  16: 9401841.027 ops/s
# Warmup Iteration  17: 9466669.840 ops/s
# Warmup Iteration  18: 9364605.156 ops/s
# Warmup Iteration  19: 9447004.311 ops/s
# Warmup Iteration  20: 9483107.190 ops/s
# Warmup Iteration  21: 9452683.055 ops/s
# Warmup Iteration  22: 9498832.171 ops/s
# Warmup Iteration  23: 9368666.782 ops/s
# Warmup Iteration  24: 9382635.711 ops/s
# Warmup Iteration  25: 9406252.601 ops/s
# Warmup Iteration  26: 9496466.966 ops/s
# Warmup Iteration  27: 9381148.019 ops/s
# Warmup Iteration  28: 9491169.556 ops/s
# Warmup Iteration  29: 9459898.365 ops/s
# Warmup Iteration  30: 9425245.397 ops/s
Iteration   1: 9476035.492 ops/s
Iteration   2: 9406016.458 ops/s
Iteration   3: 9302809.920 ops/s
Iteration   4: 9456586.492 ops/s
Iteration   5: 9520114.042 ops/s
Iteration   6: 9419485.104 ops/s
Iteration   7: 9474680.650 ops/s
Iteration   8: 9473954.954 ops/s
Iteration   9: 9472722.651 ops/s
Iteration  10: 9469892.643 ops/s
Iteration  11: 9291439.299 ops/s
Iteration  12: 9509906.166 ops/s
Iteration  13: 9489019.231 ops/s
Iteration  14: 9399073.668 ops/s
Iteration  15: 9446529.128 ops/s
Iteration  16: 9492456.174 ops/s
Iteration  17: 9446030.035 ops/s
Iteration  18: 9513146.767 ops/s
Iteration  19: 9302025.330 ops/s
Iteration  20: 9495362.446 ops/s
Iteration  21: 9517609.964 ops/s
Iteration  22: 9505826.927 ops/s
Iteration  23: 9469286.637 ops/s
Iteration  24: 9375107.734 ops/s
Iteration  25: 9512347.627 ops/s
Iteration  26: 9497618.828 ops/s
Iteration  27: 9177359.557 ops/s
Iteration  28: 9450329.069 ops/s
Iteration  29: 9513118.103 ops/s
Iteration  30: 9349418.377 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable":
  9440843.649 ±(99.9%) 55570.085 ops/s [Average]
  (min, avg, max) = (9177359.557, 9440843.649, 9520114.042), stdev = 83174.694
  CI (99.9%): [9385273.564, 9496413.734] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable  thrpt   30  9440843.649 ± 55570.085  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3732358.965 ops/s
# Warmup Iteration   2: 6985898.376 ops/s
# Warmup Iteration   3: 7206347.101 ops/s
# Warmup Iteration   4: 7749165.698 ops/s
# Warmup Iteration   5: 7859018.927 ops/s
# Warmup Iteration   6: 7830606.252 ops/s
# Warmup Iteration   7: 7851486.953 ops/s
# Warmup Iteration   8: 7853591.691 ops/s
# Warmup Iteration   9: 7845039.458 ops/s
# Warmup Iteration  10: 7824521.553 ops/s
# Warmup Iteration  11: 7775980.909 ops/s
# Warmup Iteration  12: 7815281.878 ops/s
# Warmup Iteration  13: 7830645.739 ops/s
# Warmup Iteration  14: 7628448.633 ops/s
# Warmup Iteration  15: 7835813.942 ops/s
# Warmup Iteration  16: 7849248.801 ops/s
# Warmup Iteration  17: 7755024.175 ops/s
# Warmup Iteration  18: 7831511.932 ops/s
# Warmup Iteration  19: 7741156.675 ops/s
# Warmup Iteration  20: 7855426.961 ops/s
# Warmup Iteration  21: 7778269.237 ops/s
# Warmup Iteration  22: 7826221.975 ops/s
# Warmup Iteration  23: 7842380.925 ops/s
# Warmup Iteration  24: 7781472.613 ops/s
# Warmup Iteration  25: 7776119.058 ops/s
# Warmup Iteration  26: 7808118.811 ops/s
# Warmup Iteration  27: 7757904.658 ops/s
# Warmup Iteration  28: 7807146.378 ops/s
# Warmup Iteration  29: 7822164.655 ops/s
# Warmup Iteration  30: 7833034.011 ops/s
Iteration   1: 7853284.102 ops/s
Iteration   2: 7717084.168 ops/s
Iteration   3: 7851825.581 ops/s
Iteration   4: 7721348.839 ops/s
Iteration   5: 7835976.866 ops/s
Iteration   6: 7825231.652 ops/s
Iteration   7: 7806363.240 ops/s
Iteration   8: 7845951.762 ops/s
Iteration   9: 7860560.519 ops/s
Iteration  10: 7837269.737 ops/s
Iteration  11: 7842466.082 ops/s
Iteration  12: 7722998.226 ops/s
Iteration  13: 7859061.544 ops/s
Iteration  14: 7820608.217 ops/s
Iteration  15: 7791889.471 ops/s
Iteration  16: 7683944.541 ops/s
Iteration  17: 7616653.088 ops/s
Iteration  18: 7789310.294 ops/s
Iteration  19: 7741372.024 ops/s
Iteration  20: 7782611.622 ops/s
Iteration  21: 7839290.907 ops/s
Iteration  22: 7820511.448 ops/s
Iteration  23: 7846939.700 ops/s
Iteration  24: 7792174.782 ops/s
Iteration  25: 7829206.297 ops/s
Iteration  26: 7819374.876 ops/s
Iteration  27: 7653253.849 ops/s
Iteration  28: 7719427.522 ops/s
Iteration  29: 7769323.801 ops/s
Iteration  30: 7829618.385 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray":
  7790831.105 ±(99.9%) 43539.021 ops/s [Average]
  (min, avg, max) = (7616653.088, 7790831.105, 7860560.519), stdev = 65167.161
  CI (99.9%): [7747292.084, 7834370.125] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray  thrpt   30  7790831.105 ± 43539.021  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 603795.880 ops/s
# Warmup Iteration   2: 1022591.021 ops/s
# Warmup Iteration   3: 1141029.384 ops/s
# Warmup Iteration   4: 1147023.339 ops/s
# Warmup Iteration   5: 1141433.983 ops/s
# Warmup Iteration   6: 950814.903 ops/s
# Warmup Iteration   7: 1147562.821 ops/s
# Warmup Iteration   8: 1132656.085 ops/s
# Warmup Iteration   9: 1137013.978 ops/s
# Warmup Iteration  10: 1132406.586 ops/s
# Warmup Iteration  11: 1139064.665 ops/s
# Warmup Iteration  12: 1142767.806 ops/s
# Warmup Iteration  13: 1132756.040 ops/s
# Warmup Iteration  14: 1143487.730 ops/s
# Warmup Iteration  15: 1149977.220 ops/s
# Warmup Iteration  16: 1147469.267 ops/s
# Warmup Iteration  17: 1098931.809 ops/s
# Warmup Iteration  18: 1112430.714 ops/s
# Warmup Iteration  19: 1115691.483 ops/s
# Warmup Iteration  20: 1110156.311 ops/s
# Warmup Iteration  21: 1106205.520 ops/s
# Warmup Iteration  22: 1109592.524 ops/s
# Warmup Iteration  23: 1115499.285 ops/s
# Warmup Iteration  24: 1113603.165 ops/s
# Warmup Iteration  25: 1104578.293 ops/s
# Warmup Iteration  26: 1113719.294 ops/s
# Warmup Iteration  27: 1106361.221 ops/s
# Warmup Iteration  28: 1102815.330 ops/s
# Warmup Iteration  29: 1099464.951 ops/s
# Warmup Iteration  30: 1112947.197 ops/s
Iteration   1: 1106114.337 ops/s
Iteration   2: 1074293.464 ops/s
Iteration   3: 1101427.152 ops/s
Iteration   4: 1117061.429 ops/s
Iteration   5: 1114300.766 ops/s
Iteration   6: 1111096.606 ops/s
Iteration   7: 1111410.972 ops/s
Iteration   8: 1115886.475 ops/s
Iteration   9: 1117518.452 ops/s
Iteration  10: 1094597.308 ops/s
Iteration  11: 1098657.673 ops/s
Iteration  12: 1116545.364 ops/s
Iteration  13: 1116308.094 ops/s
Iteration  14: 1099196.820 ops/s
Iteration  15: 1114111.095 ops/s
Iteration  16: 1111185.000 ops/s
Iteration  17: 1080733.363 ops/s
Iteration  18: 1120359.320 ops/s
Iteration  19: 1109076.108 ops/s
Iteration  20: 1102587.350 ops/s
Iteration  21: 1108748.769 ops/s
Iteration  22: 1116740.371 ops/s
Iteration  23: 1108397.086 ops/s
Iteration  24: 1114895.103 ops/s
Iteration  25: 1094119.337 ops/s
Iteration  26: 1095348.183 ops/s
Iteration  27: 1100956.274 ops/s
Iteration  28: 1118115.666 ops/s
Iteration  29: 1099728.640 ops/s
Iteration  30: 1113368.730 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable":
  1106762.844 ±(99.9%) 7464.575 ops/s [Average]
  (min, avg, max) = (1074293.464, 1106762.844, 1120359.320), stdev = 11172.626
  CI (99.9%): [1099298.268, 1114227.419] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1106762.844 ± 7464.575  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2473965.295 ops/s
# Warmup Iteration   2: 7752434.505 ops/s
# Warmup Iteration   3: 6681759.471 ops/s
# Warmup Iteration   4: 7863714.830 ops/s
# Warmup Iteration   5: 7961006.072 ops/s
# Warmup Iteration   6: 7955429.351 ops/s
# Warmup Iteration   7: 7967347.633 ops/s
# Warmup Iteration   8: 7901525.755 ops/s
# Warmup Iteration   9: 7881155.759 ops/s
# Warmup Iteration  10: 7951714.606 ops/s
# Warmup Iteration  11: 7913533.372 ops/s
# Warmup Iteration  12: 7944908.615 ops/s
# Warmup Iteration  13: 7952996.808 ops/s
# Warmup Iteration  14: 7968667.700 ops/s
# Warmup Iteration  15: 7911287.857 ops/s
# Warmup Iteration  16: 7879469.238 ops/s
# Warmup Iteration  17: 7877746.519 ops/s
# Warmup Iteration  18: 7981162.186 ops/s
# Warmup Iteration  19: 7954739.842 ops/s
# Warmup Iteration  20: 7929347.287 ops/s
# Warmup Iteration  21: 7930318.618 ops/s
# Warmup Iteration  22: 7845580.394 ops/s
# Warmup Iteration  23: 7832660.690 ops/s
# Warmup Iteration  24: 7810654.752 ops/s
# Warmup Iteration  25: 7864244.925 ops/s
# Warmup Iteration  26: 7941924.378 ops/s
# Warmup Iteration  27: 7856583.516 ops/s
# Warmup Iteration  28: 7863325.473 ops/s
# Warmup Iteration  29: 7949694.018 ops/s
# Warmup Iteration  30: 7960656.864 ops/s
Iteration   1: 7913702.833 ops/s
Iteration   2: 7904338.530 ops/s
Iteration   3: 7799685.801 ops/s
Iteration   4: 7851972.467 ops/s
Iteration   5: 7890489.409 ops/s
Iteration   6: 7892015.980 ops/s
Iteration   7: 7828136.875 ops/s
Iteration   8: 7887223.428 ops/s
Iteration   9: 7756352.226 ops/s
Iteration  10: 7889079.683 ops/s
Iteration  11: 7910007.431 ops/s
Iteration  12: 7894507.972 ops/s
Iteration  13: 7905962.174 ops/s
Iteration  14: 7808799.205 ops/s
Iteration  15: 7828017.810 ops/s
Iteration  16: 7921737.858 ops/s
Iteration  17: 7932454.151 ops/s
Iteration  18: 7921763.351 ops/s
Iteration  19: 7968950.222 ops/s
Iteration  20: 7930707.178 ops/s
Iteration  21: 7946612.578 ops/s
Iteration  22: 7942807.606 ops/s
Iteration  23: 7879173.203 ops/s
Iteration  24: 7815884.528 ops/s
Iteration  25: 7906265.250 ops/s
Iteration  26: 7807302.202 ops/s
Iteration  27: 7919049.454 ops/s
Iteration  28: 7854651.707 ops/s
Iteration  29: 7877501.532 ops/s
Iteration  30: 7917101.153 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray":
  7883408.460 ±(99.9%) 34039.946 ops/s [Average]
  (min, avg, max) = (7756352.226, 7883408.460, 7968950.222), stdev = 50949.393
  CI (99.9%): [7849368.514, 7917448.406] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray  thrpt   30  7883408.460 ± 34039.946  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 556067.877 ops/s
# Warmup Iteration   2: 897170.502 ops/s
# Warmup Iteration   3: 1021861.931 ops/s
# Warmup Iteration   4: 1013676.644 ops/s
# Warmup Iteration   5: 1017383.624 ops/s
# Warmup Iteration   6: 845797.635 ops/s
# Warmup Iteration   7: 1020236.961 ops/s
# Warmup Iteration   8: 1000673.785 ops/s
# Warmup Iteration   9: 1015334.142 ops/s
# Warmup Iteration  10: 1019880.542 ops/s
# Warmup Iteration  11: 1014267.723 ops/s
# Warmup Iteration  12: 1009541.908 ops/s
# Warmup Iteration  13: 1016986.893 ops/s
# Warmup Iteration  14: 1017480.631 ops/s
# Warmup Iteration  15: 1016477.399 ops/s
# Warmup Iteration  16: 1016629.942 ops/s
# Warmup Iteration  17: 991850.602 ops/s
# Warmup Iteration  18: 990083.318 ops/s
# Warmup Iteration  19: 994214.074 ops/s
# Warmup Iteration  20: 991475.529 ops/s
# Warmup Iteration  21: 993935.760 ops/s
# Warmup Iteration  22: 987056.850 ops/s
# Warmup Iteration  23: 987385.321 ops/s
# Warmup Iteration  24: 990122.517 ops/s
# Warmup Iteration  25: 993986.500 ops/s
# Warmup Iteration  26: 975251.181 ops/s
# Warmup Iteration  27: 996306.510 ops/s
# Warmup Iteration  28: 978648.092 ops/s
# Warmup Iteration  29: 992269.973 ops/s
# Warmup Iteration  30: 993062.147 ops/s
Iteration   1: 984792.009 ops/s
Iteration   2: 997865.591 ops/s
Iteration   3: 997822.200 ops/s
Iteration   4: 991707.725 ops/s
Iteration   5: 998787.008 ops/s
Iteration   6: 994960.128 ops/s
Iteration   7: 996972.823 ops/s
Iteration   8: 993252.616 ops/s
Iteration   9: 996202.574 ops/s
Iteration  10: 994206.204 ops/s
Iteration  11: 996571.504 ops/s
Iteration  12: 987633.073 ops/s
Iteration  13: 997072.640 ops/s
Iteration  14: 996686.791 ops/s
Iteration  15: 997763.628 ops/s
Iteration  16: 993406.201 ops/s
Iteration  17: 995868.672 ops/s
Iteration  18: 993337.370 ops/s
Iteration  19: 995618.547 ops/s
Iteration  20: 999129.948 ops/s
Iteration  21: 990107.251 ops/s
Iteration  22: 992721.130 ops/s
Iteration  23: 979259.812 ops/s
Iteration  24: 973512.198 ops/s
Iteration  25: 993691.170 ops/s
Iteration  26: 994260.378 ops/s
Iteration  27: 991275.848 ops/s
Iteration  28: 988092.932 ops/s
Iteration  29: 989849.030 ops/s
Iteration  30: 993887.206 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable":
  992877.140 ±(99.9%) 3813.120 ops/s [Average]
  (min, avg, max) = (973512.198, 992877.140, 999129.948), stdev = 5707.299
  CI (99.9%): [989064.020, 996690.260] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  992877.140 ± 3813.120  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1170302.052 ops/s
# Warmup Iteration   2: 3117468.556 ops/s
# Warmup Iteration   3: 3232491.419 ops/s
# Warmup Iteration   4: 2683459.764 ops/s
# Warmup Iteration   5: 3241903.208 ops/s
# Warmup Iteration   6: 3258149.909 ops/s
# Warmup Iteration   7: 3247116.891 ops/s
# Warmup Iteration   8: 3212207.313 ops/s
# Warmup Iteration   9: 3254485.031 ops/s
# Warmup Iteration  10: 3217536.966 ops/s
# Warmup Iteration  11: 3257347.912 ops/s
# Warmup Iteration  12: 3255156.303 ops/s
# Warmup Iteration  13: 3246045.950 ops/s
# Warmup Iteration  14: 3243979.151 ops/s
# Warmup Iteration  15: 3241016.706 ops/s
# Warmup Iteration  16: 3247338.912 ops/s
# Warmup Iteration  17: 3244292.461 ops/s
# Warmup Iteration  18: 3224619.119 ops/s
# Warmup Iteration  19: 3193021.626 ops/s
# Warmup Iteration  20: 3254331.745 ops/s
# Warmup Iteration  21: 3264892.682 ops/s
# Warmup Iteration  22: 3214539.151 ops/s
# Warmup Iteration  23: 3248714.823 ops/s
# Warmup Iteration  24: 3253759.717 ops/s
# Warmup Iteration  25: 3249416.108 ops/s
# Warmup Iteration  26: 3235960.492 ops/s
# Warmup Iteration  27: 3236790.616 ops/s
# Warmup Iteration  28: 3236257.695 ops/s
# Warmup Iteration  29: 3243881.742 ops/s
# Warmup Iteration  30: 3242847.493 ops/s
Iteration   1: 3241747.910 ops/s
Iteration   2: 3246710.162 ops/s
Iteration   3: 3230774.700 ops/s
Iteration   4: 3269317.659 ops/s
Iteration   5: 3185179.874 ops/s
Iteration   6: 3184588.093 ops/s
Iteration   7: 3192798.507 ops/s
Iteration   8: 3231659.918 ops/s
Iteration   9: 3220446.772 ops/s
Iteration  10: 3159078.031 ops/s
Iteration  11: 3250807.469 ops/s
Iteration  12: 3269253.132 ops/s
Iteration  13: 3253739.978 ops/s
Iteration  14: 3237215.384 ops/s
Iteration  15: 3246315.185 ops/s
Iteration  16: 3197398.139 ops/s
Iteration  17: 3242804.313 ops/s
Iteration  18: 3224046.976 ops/s
Iteration  19: 3228252.888 ops/s
Iteration  20: 3244078.438 ops/s
Iteration  21: 3230149.527 ops/s
Iteration  22: 3247337.062 ops/s
Iteration  23: 3215087.296 ops/s
Iteration  24: 3225094.519 ops/s
Iteration  25: 3223475.481 ops/s
Iteration  26: 3236646.596 ops/s
Iteration  27: 3244525.539 ops/s
Iteration  28: 3224288.117 ops/s
Iteration  29: 3247289.983 ops/s
Iteration  30: 3195900.620 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_count":
  3228200.276 ±(99.9%) 17147.880 ops/s [Average]
  (min, avg, max) = (3159078.031, 3228200.276, 3269317.659), stdev = 25666.141
  CI (99.9%): [3211052.396, 3245348.155] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_count  thrpt   30  3228200.276 ± 17147.880  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3194843.308 ops/s
# Warmup Iteration   2: 7361678.799 ops/s
# Warmup Iteration   3: 6135407.667 ops/s
# Warmup Iteration   4: 7292448.773 ops/s
# Warmup Iteration   5: 7394570.017 ops/s
# Warmup Iteration   6: 7323225.521 ops/s
# Warmup Iteration   7: 7357552.977 ops/s
# Warmup Iteration   8: 7346583.020 ops/s
# Warmup Iteration   9: 7388477.179 ops/s
# Warmup Iteration  10: 7304153.412 ops/s
# Warmup Iteration  11: 7348720.945 ops/s
# Warmup Iteration  12: 7341802.260 ops/s
# Warmup Iteration  13: 7402893.693 ops/s
# Warmup Iteration  14: 7363885.038 ops/s
# Warmup Iteration  15: 7361923.653 ops/s
# Warmup Iteration  16: 7380484.515 ops/s
# Warmup Iteration  17: 7300467.533 ops/s
# Warmup Iteration  18: 7382345.972 ops/s
# Warmup Iteration  19: 7412162.174 ops/s
# Warmup Iteration  20: 7421390.293 ops/s
# Warmup Iteration  21: 7400359.226 ops/s
# Warmup Iteration  22: 7270098.343 ops/s
# Warmup Iteration  23: 7250350.955 ops/s
# Warmup Iteration  24: 7379198.341 ops/s
# Warmup Iteration  25: 7387230.821 ops/s
# Warmup Iteration  26: 7383272.370 ops/s
# Warmup Iteration  27: 7411520.517 ops/s
# Warmup Iteration  28: 7415372.188 ops/s
# Warmup Iteration  29: 7390554.246 ops/s
# Warmup Iteration  30: 7360646.044 ops/s
Iteration   1: 7397853.244 ops/s
Iteration   2: 7402570.447 ops/s
Iteration   3: 7419911.129 ops/s
Iteration   4: 7267821.566 ops/s
Iteration   5: 7141742.719 ops/s
Iteration   6: 7388613.131 ops/s
Iteration   7: 7409192.691 ops/s
Iteration   8: 7446766.961 ops/s
Iteration   9: 7422589.135 ops/s
Iteration  10: 7360404.449 ops/s
Iteration  11: 7394266.536 ops/s
Iteration  12: 7418172.607 ops/s
Iteration  13: 7416391.994 ops/s
Iteration  14: 7356822.606 ops/s
Iteration  15: 7414323.646 ops/s
Iteration  16: 7377636.238 ops/s
Iteration  17: 7405886.135 ops/s
Iteration  18: 7362742.997 ops/s
Iteration  19: 7415063.581 ops/s
Iteration  20: 7363575.364 ops/s
Iteration  21: 7311027.292 ops/s
Iteration  22: 7367346.163 ops/s
Iteration  23: 7225325.060 ops/s
Iteration  24: 7272933.361 ops/s
Iteration  25: 7386552.150 ops/s
Iteration  26: 7298960.492 ops/s
Iteration  27: 7372875.390 ops/s
Iteration  28: 7224451.249 ops/s
Iteration  29: 7338480.364 ops/s
Iteration  30: 7276857.647 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone":
  7355238.545 ±(99.9%) 48314.933 ops/s [Average]
  (min, avg, max) = (7141742.719, 7355238.545, 7446766.961), stdev = 72315.523
  CI (99.9%): [7306923.612, 7403553.478] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone  thrpt   30  7355238.545 ± 48314.933  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3683693.465 ops/s
# Warmup Iteration   2: 8199090.284 ops/s
# Warmup Iteration   3: 6750557.616 ops/s
# Warmup Iteration   4: 8027162.557 ops/s
# Warmup Iteration   5: 8126109.707 ops/s
# Warmup Iteration   6: 7921125.763 ops/s
# Warmup Iteration   7: 8018154.973 ops/s
# Warmup Iteration   8: 8067011.323 ops/s
# Warmup Iteration   9: 8049801.062 ops/s
# Warmup Iteration  10: 8044599.397 ops/s
# Warmup Iteration  11: 8123574.868 ops/s
# Warmup Iteration  12: 8004277.954 ops/s
# Warmup Iteration  13: 8081249.354 ops/s
# Warmup Iteration  14: 8057483.399 ops/s
# Warmup Iteration  15: 8039709.307 ops/s
# Warmup Iteration  16: 8093002.380 ops/s
# Warmup Iteration  17: 8118554.312 ops/s
# Warmup Iteration  18: 8018305.513 ops/s
# Warmup Iteration  19: 8027497.001 ops/s
# Warmup Iteration  20: 7992799.945 ops/s
# Warmup Iteration  21: 8022724.780 ops/s
# Warmup Iteration  22: 8060764.514 ops/s
# Warmup Iteration  23: 8087823.732 ops/s
# Warmup Iteration  24: 8021822.271 ops/s
# Warmup Iteration  25: 8077733.466 ops/s
# Warmup Iteration  26: 8098950.657 ops/s
# Warmup Iteration  27: 8098795.011 ops/s
# Warmup Iteration  28: 8110357.777 ops/s
# Warmup Iteration  29: 8099845.534 ops/s
# Warmup Iteration  30: 8143996.414 ops/s
Iteration   1: 8087726.095 ops/s
Iteration   2: 7800799.600 ops/s
Iteration   3: 8032738.891 ops/s
Iteration   4: 7942881.045 ops/s
Iteration   5: 8084886.599 ops/s
Iteration   6: 7923942.406 ops/s
Iteration   7: 7890290.570 ops/s
Iteration   8: 8066939.319 ops/s
Iteration   9: 8056831.895 ops/s
Iteration  10: 8054058.324 ops/s
Iteration  11: 8028843.201 ops/s
Iteration  12: 7981008.488 ops/s
Iteration  13: 8059143.093 ops/s
Iteration  14: 8115447.944 ops/s
Iteration  15: 8078685.271 ops/s
Iteration  16: 8088125.213 ops/s
Iteration  17: 8126542.339 ops/s
Iteration  18: 8108475.068 ops/s
Iteration  19: 8160063.472 ops/s
Iteration  20: 8125821.884 ops/s
Iteration  21: 7893677.060 ops/s
Iteration  22: 8141740.676 ops/s
Iteration  23: 8124295.188 ops/s
Iteration  24: 7994008.968 ops/s
Iteration  25: 8129686.913 ops/s
Iteration  26: 8136458.557 ops/s
Iteration  27: 7953813.109 ops/s
Iteration  28: 8096840.296 ops/s
Iteration  29: 8044807.604 ops/s
Iteration  30: 8054270.277 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_forEach":
  8046094.979 ±(99.9%) 58668.641 ops/s [Average]
  (min, avg, max) = (7800799.600, 8046094.979, 8160063.472), stdev = 87812.467
  CI (99.9%): [7987426.338, 8104763.620] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_forEach  thrpt   30  8046094.979 ± 58668.641  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10874490.452 ops/s
# Warmup Iteration   2: 19829553.848 ops/s
# Warmup Iteration   3: 20420285.096 ops/s
# Warmup Iteration   4: 21898192.362 ops/s
# Warmup Iteration   5: 21758522.741 ops/s
# Warmup Iteration   6: 21868500.428 ops/s
# Warmup Iteration   7: 21638255.050 ops/s
# Warmup Iteration   8: 22004594.403 ops/s
# Warmup Iteration   9: 21831912.159 ops/s
# Warmup Iteration  10: 21898559.200 ops/s
# Warmup Iteration  11: 21649073.813 ops/s
# Warmup Iteration  12: 21802997.816 ops/s
# Warmup Iteration  13: 21685320.041 ops/s
# Warmup Iteration  14: 21671875.073 ops/s
# Warmup Iteration  15: 21752613.915 ops/s
# Warmup Iteration  16: 21888717.562 ops/s
# Warmup Iteration  17: 21782075.396 ops/s
# Warmup Iteration  18: 21710731.572 ops/s
# Warmup Iteration  19: 21689624.413 ops/s
# Warmup Iteration  20: 21899010.727 ops/s
# Warmup Iteration  21: 21813416.849 ops/s
# Warmup Iteration  22: 21923251.372 ops/s
# Warmup Iteration  23: 21899605.911 ops/s
# Warmup Iteration  24: 21727956.957 ops/s
# Warmup Iteration  25: 21944781.110 ops/s
# Warmup Iteration  26: 21944016.458 ops/s
# Warmup Iteration  27: 21899063.344 ops/s
# Warmup Iteration  28: 22003011.609 ops/s
# Warmup Iteration  29: 22025223.209 ops/s
# Warmup Iteration  30: 21877518.528 ops/s
Iteration   1: 21766065.870 ops/s
Iteration   2: 21852779.859 ops/s
Iteration   3: 21787372.093 ops/s
Iteration   4: 21480102.450 ops/s
Iteration   5: 21945821.770 ops/s
Iteration   6: 21918656.109 ops/s
Iteration   7: 21901853.070 ops/s
Iteration   8: 21429894.467 ops/s
Iteration   9: 21693593.090 ops/s
Iteration  10: 21791404.361 ops/s
Iteration  11: 21889006.849 ops/s
Iteration  12: 22114473.130 ops/s
Iteration  13: 21982179.609 ops/s
Iteration  14: 21957985.418 ops/s
Iteration  15: 21971858.119 ops/s
Iteration  16: 21503911.026 ops/s
Iteration  17: 22031898.840 ops/s
Iteration  18: 21916308.686 ops/s
Iteration  19: 22124014.222 ops/s
Iteration  20: 21889442.606 ops/s
Iteration  21: 21970947.738 ops/s
Iteration  22: 21845025.412 ops/s
Iteration  23: 21609162.518 ops/s
Iteration  24: 21897335.125 ops/s
Iteration  25: 21860121.944 ops/s
Iteration  26: 21816591.924 ops/s
Iteration  27: 21779348.468 ops/s
Iteration  28: 21875990.520 ops/s
Iteration  29: 21697126.749 ops/s
Iteration  30: 22017735.574 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_injectInto":
  21843933.587 ±(99.9%) 114403.043 ops/s [Average]
  (min, avg, max) = (21429894.467, 21843933.587, 22124014.222), stdev = 171233.101
  CI (99.9%): [21729530.545, 21958336.630] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_injectInto  thrpt   30  21843933.587 ± 114403.043  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1312607.181 ops/s
# Warmup Iteration   2: 2169361.763 ops/s
# Warmup Iteration   3: 2325819.558 ops/s
# Warmup Iteration   4: 2419012.255 ops/s
# Warmup Iteration   5: 2392142.260 ops/s
# Warmup Iteration   6: 2394634.009 ops/s
# Warmup Iteration   7: 2406805.593 ops/s
# Warmup Iteration   8: 2416538.907 ops/s
# Warmup Iteration   9: 2430270.697 ops/s
# Warmup Iteration  10: 2421553.143 ops/s
# Warmup Iteration  11: 2432552.067 ops/s
# Warmup Iteration  12: 2442673.306 ops/s
# Warmup Iteration  13: 2430360.306 ops/s
# Warmup Iteration  14: 2416120.047 ops/s
# Warmup Iteration  15: 2433950.808 ops/s
# Warmup Iteration  16: 2400901.935 ops/s
# Warmup Iteration  17: 2388976.574 ops/s
# Warmup Iteration  18: 2383170.538 ops/s
# Warmup Iteration  19: 2392276.362 ops/s
# Warmup Iteration  20: 2396866.008 ops/s
# Warmup Iteration  21: 2407756.728 ops/s
# Warmup Iteration  22: 2412254.155 ops/s
# Warmup Iteration  23: 2413002.022 ops/s
# Warmup Iteration  24: 2434525.542 ops/s
# Warmup Iteration  25: 2444198.370 ops/s
# Warmup Iteration  26: 2444272.021 ops/s
# Warmup Iteration  27: 2408779.995 ops/s
# Warmup Iteration  28: 2411261.262 ops/s
# Warmup Iteration  29: 2406302.020 ops/s
# Warmup Iteration  30: 2386489.467 ops/s
Iteration   1: 2428948.977 ops/s
Iteration   2: 2397123.061 ops/s
Iteration   3: 2425517.320 ops/s
Iteration   4: 2429632.525 ops/s
Iteration   5: 2446049.764 ops/s
Iteration   6: 2451072.242 ops/s
Iteration   7: 2430803.071 ops/s
Iteration   8: 2440287.752 ops/s
Iteration   9: 2430801.139 ops/s
Iteration  10: 2412950.397 ops/s
Iteration  11: 2438550.664 ops/s
Iteration  12: 2421915.730 ops/s
Iteration  13: 2445523.347 ops/s
Iteration  14: 2390980.953 ops/s
Iteration  15: 2439602.810 ops/s
Iteration  16: 2412975.811 ops/s
Iteration  17: 2428028.240 ops/s
Iteration  18: 2417356.240 ops/s
Iteration  19: 2418945.592 ops/s
Iteration  20: 2446300.863 ops/s
Iteration  21: 2442151.559 ops/s
Iteration  22: 2426903.763 ops/s
Iteration  23: 2430713.696 ops/s
Iteration  24: 2430640.301 ops/s
Iteration  25: 2442546.847 ops/s
Iteration  26: 2441728.466 ops/s
Iteration  27: 2425641.583 ops/s
Iteration  28: 2383081.145 ops/s
Iteration  29: 2414935.400 ops/s
Iteration  30: 2429468.779 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty":
  2427372.601 ±(99.9%) 10908.565 ops/s [Average]
  (min, avg, max) = (2383081.145, 2427372.601, 2451072.242), stdev = 16327.427
  CI (99.9%): [2416464.037, 2438281.166] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  2427372.601 ± 10908.565  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 662020.572 ops/s
# Warmup Iteration   2: 670869.037 ops/s
# Warmup Iteration   3: 855055.353 ops/s
# Warmup Iteration   4: 889915.878 ops/s
# Warmup Iteration   5: 891488.304 ops/s
# Warmup Iteration   6: 887111.173 ops/s
# Warmup Iteration   7: 891244.698 ops/s
# Warmup Iteration   8: 893753.804 ops/s
# Warmup Iteration   9: 888881.841 ops/s
# Warmup Iteration  10: 891128.310 ops/s
# Warmup Iteration  11: 887726.484 ops/s
# Warmup Iteration  12: 836816.932 ops/s
# Warmup Iteration  13: 779756.667 ops/s
# Warmup Iteration  14: 888137.582 ops/s
# Warmup Iteration  15: 884684.942 ops/s
# Warmup Iteration  16: 891823.807 ops/s
# Warmup Iteration  17: 943442.827 ops/s
# Warmup Iteration  18: 936793.901 ops/s
# Warmup Iteration  19: 944763.775 ops/s
# Warmup Iteration  20: 942420.964 ops/s
# Warmup Iteration  21: 948006.571 ops/s
# Warmup Iteration  22: 934032.558 ops/s
# Warmup Iteration  23: 937557.270 ops/s
# Warmup Iteration  24: 938434.216 ops/s
# Warmup Iteration  25: 942708.314 ops/s
# Warmup Iteration  26: 941019.959 ops/s
# Warmup Iteration  27: 926322.332 ops/s
# Warmup Iteration  28: 943561.265 ops/s
# Warmup Iteration  29: 926663.171 ops/s
# Warmup Iteration  30: 942540.161 ops/s
Iteration   1: 933563.242 ops/s
Iteration   2: 944910.935 ops/s
Iteration   3: 931614.149 ops/s
Iteration   4: 931240.674 ops/s
Iteration   5: 932959.237 ops/s
Iteration   6: 940477.784 ops/s
Iteration   7: 948125.903 ops/s
Iteration   8: 941635.810 ops/s
Iteration   9: 943189.466 ops/s
Iteration  10: 949615.438 ops/s
Iteration  11: 947824.284 ops/s
Iteration  12: 950894.721 ops/s
Iteration  13: 941977.649 ops/s
Iteration  14: 931785.958 ops/s
Iteration  15: 945541.047 ops/s
Iteration  16: 953270.207 ops/s
Iteration  17: 952259.831 ops/s
Iteration  18: 948019.557 ops/s
Iteration  19: 943693.478 ops/s
Iteration  20: 945629.007 ops/s
Iteration  21: 942765.219 ops/s
Iteration  22: 951389.650 ops/s
Iteration  23: 940204.022 ops/s
Iteration  24: 946602.754 ops/s
Iteration  25: 946264.430 ops/s
Iteration  26: 944364.936 ops/s
Iteration  27: 950569.500 ops/s
Iteration  28: 941192.585 ops/s
Iteration  29: 944505.016 ops/s
Iteration  30: 948102.350 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws":
  943806.295 ±(99.9%) 4217.355 ops/s [Average]
  (min, avg, max) = (931240.674, 943806.295, 953270.207), stdev = 6312.339
  CI (99.9%): [939588.939, 948023.650] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws  thrpt   30  943806.295 ± 4217.355  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 725269.434 ops/s
# Warmup Iteration   2: 758255.154 ops/s
# Warmup Iteration   3: 1005526.771 ops/s
# Warmup Iteration   4: 1002621.754 ops/s
# Warmup Iteration   5: 1002588.123 ops/s
# Warmup Iteration   6: 1005895.457 ops/s
# Warmup Iteration   7: 1007409.801 ops/s
# Warmup Iteration   8: 998913.138 ops/s
# Warmup Iteration   9: 985259.848 ops/s
# Warmup Iteration  10: 1010306.928 ops/s
# Warmup Iteration  11: 840550.864 ops/s
# Warmup Iteration  12: 996868.266 ops/s
# Warmup Iteration  13: 1003738.668 ops/s
# Warmup Iteration  14: 1002312.089 ops/s
# Warmup Iteration  15: 1004056.760 ops/s
# Warmup Iteration  16: 997599.378 ops/s
# Warmup Iteration  17: 1052775.333 ops/s
# Warmup Iteration  18: 1071909.263 ops/s
# Warmup Iteration  19: 1069824.095 ops/s
# Warmup Iteration  20: 1065979.140 ops/s
# Warmup Iteration  21: 1060866.752 ops/s
# Warmup Iteration  22: 1067943.130 ops/s
# Warmup Iteration  23: 1062198.046 ops/s
# Warmup Iteration  24: 1059838.091 ops/s
# Warmup Iteration  25: 1061960.510 ops/s
# Warmup Iteration  26: 1070151.122 ops/s
# Warmup Iteration  27: 1067351.407 ops/s
# Warmup Iteration  28: 1064560.124 ops/s
# Warmup Iteration  29: 1063643.311 ops/s
# Warmup Iteration  30: 1061582.678 ops/s
Iteration   1: 1065542.536 ops/s
Iteration   2: 1060317.528 ops/s
Iteration   3: 1070283.686 ops/s
Iteration   4: 1067939.573 ops/s
Iteration   5: 1070242.154 ops/s
Iteration   6: 1058435.785 ops/s
Iteration   7: 1055334.345 ops/s
Iteration   8: 1072376.433 ops/s
Iteration   9: 1066191.495 ops/s
Iteration  10: 1073257.560 ops/s
Iteration  11: 1074904.689 ops/s
Iteration  12: 1069977.300 ops/s
Iteration  13: 1069730.205 ops/s
Iteration  14: 1070339.245 ops/s
Iteration  15: 1070383.487 ops/s
Iteration  16: 1046213.020 ops/s
Iteration  17: 1066646.022 ops/s
Iteration  18: 1070215.668 ops/s
Iteration  19: 1073478.732 ops/s
Iteration  20: 1048276.015 ops/s
Iteration  21: 1068668.417 ops/s
Iteration  22: 1051279.627 ops/s
Iteration  23: 1068005.767 ops/s
Iteration  24: 1069757.647 ops/s
Iteration  25: 1069852.719 ops/s
Iteration  26: 1055057.756 ops/s
Iteration  27: 1064474.222 ops/s
Iteration  28: 1068697.162 ops/s
Iteration  29: 1063831.388 ops/s
Iteration  30: 1069233.735 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList":
  1065631.464 ±(99.9%) 5056.366 ops/s [Average]
  (min, avg, max) = (1046213.020, 1065631.464, 1074904.689), stdev = 7568.131
  CI (99.9%): [1060575.098, 1070687.830] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1065631.464 ± 5056.366  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 663142.470 ops/s
# Warmup Iteration   2: 677689.443 ops/s
# Warmup Iteration   3: 862111.607 ops/s
# Warmup Iteration   4: 893885.217 ops/s
# Warmup Iteration   5: 896953.242 ops/s
# Warmup Iteration   6: 889964.800 ops/s
# Warmup Iteration   7: 891538.893 ops/s
# Warmup Iteration   8: 897939.138 ops/s
# Warmup Iteration   9: 899722.959 ops/s
# Warmup Iteration  10: 884777.262 ops/s
# Warmup Iteration  11: 895309.738 ops/s
# Warmup Iteration  12: 824707.109 ops/s
# Warmup Iteration  13: 803850.871 ops/s
# Warmup Iteration  14: 900250.714 ops/s
# Warmup Iteration  15: 901990.378 ops/s
# Warmup Iteration  16: 901748.376 ops/s
# Warmup Iteration  17: 945754.052 ops/s
# Warmup Iteration  18: 952709.509 ops/s
# Warmup Iteration  19: 959511.585 ops/s
# Warmup Iteration  20: 960715.305 ops/s
# Warmup Iteration  21: 942312.492 ops/s
# Warmup Iteration  22: 958770.638 ops/s
# Warmup Iteration  23: 956952.052 ops/s
# Warmup Iteration  24: 961036.355 ops/s
# Warmup Iteration  25: 958378.163 ops/s
# Warmup Iteration  26: 956888.923 ops/s
# Warmup Iteration  27: 953208.734 ops/s
# Warmup Iteration  28: 954858.189 ops/s
# Warmup Iteration  29: 954241.129 ops/s
# Warmup Iteration  30: 962614.957 ops/s
Iteration   1: 950962.307 ops/s
Iteration   2: 960656.303 ops/s
Iteration   3: 960718.568 ops/s
Iteration   4: 947825.823 ops/s
Iteration   5: 963065.985 ops/s
Iteration   6: 956771.755 ops/s
Iteration   7: 956856.725 ops/s
Iteration   8: 961365.738 ops/s
Iteration   9: 959327.523 ops/s
Iteration  10: 963252.583 ops/s
Iteration  11: 960315.150 ops/s
Iteration  12: 939634.210 ops/s
Iteration  13: 956692.786 ops/s
Iteration  14: 960461.835 ops/s
Iteration  15: 942099.501 ops/s
Iteration  16: 955282.932 ops/s
Iteration  17: 962818.710 ops/s
Iteration  18: 942544.896 ops/s
Iteration  19: 951883.933 ops/s
Iteration  20: 955271.769 ops/s
Iteration  21: 959817.158 ops/s
Iteration  22: 957666.694 ops/s
Iteration  23: 955046.633 ops/s
Iteration  24: 920222.064 ops/s
Iteration  25: 949535.557 ops/s
Iteration  26: 926540.754 ops/s
Iteration  27: 952200.198 ops/s
Iteration  28: 954914.694 ops/s
Iteration  29: 959058.547 ops/s
Iteration  30: 959818.544 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  953420.996 ±(99.9%) 6877.999 ops/s [Average]
  (min, avg, max) = (920222.064, 953420.996, 963252.583), stdev = 10294.666
  CI (99.9%): [946542.997, 960298.995] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score      Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  953420.996 ± 6877.999  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 731972.745 ops/s
# Warmup Iteration   2: 806255.483 ops/s
# Warmup Iteration   3: 1024875.556 ops/s
# Warmup Iteration   4: 1021359.359 ops/s
# Warmup Iteration   5: 1032082.582 ops/s
# Warmup Iteration   6: 1028048.371 ops/s
# Warmup Iteration   7: 1035427.451 ops/s
# Warmup Iteration   8: 1029695.591 ops/s
# Warmup Iteration   9: 1029905.444 ops/s
# Warmup Iteration  10: 976128.137 ops/s
# Warmup Iteration  11: 916104.948 ops/s
# Warmup Iteration  12: 1024404.229 ops/s
# Warmup Iteration  13: 1032523.785 ops/s
# Warmup Iteration  14: 1029913.861 ops/s
# Warmup Iteration  15: 1029271.581 ops/s
# Warmup Iteration  16: 1019822.538 ops/s
# Warmup Iteration  17: 1098374.140 ops/s
# Warmup Iteration  18: 1097588.853 ops/s
# Warmup Iteration  19: 1096222.055 ops/s
# Warmup Iteration  20: 1086080.836 ops/s
# Warmup Iteration  21: 1093322.106 ops/s
# Warmup Iteration  22: 1090815.280 ops/s
# Warmup Iteration  23: 1096766.215 ops/s
# Warmup Iteration  24: 1098835.639 ops/s
# Warmup Iteration  25: 1089743.738 ops/s
# Warmup Iteration  26: 1086573.546 ops/s
# Warmup Iteration  27: 1088457.029 ops/s
# Warmup Iteration  28: 1081695.577 ops/s
# Warmup Iteration  29: 1093963.275 ops/s
# Warmup Iteration  30: 1095628.747 ops/s
Iteration   1: 1098461.181 ops/s
Iteration   2: 1074510.017 ops/s
Iteration   3: 1086139.859 ops/s
Iteration   4: 1099056.953 ops/s
Iteration   5: 1069695.279 ops/s
Iteration   6: 1095126.636 ops/s
Iteration   7: 1092053.564 ops/s
Iteration   8: 1096615.270 ops/s
Iteration   9: 1075922.313 ops/s
Iteration  10: 1083182.846 ops/s
Iteration  11: 1097229.629 ops/s
Iteration  12: 1093080.658 ops/s
Iteration  13: 1097136.983 ops/s
Iteration  14: 1105923.617 ops/s
Iteration  15: 1103698.083 ops/s
Iteration  16: 1095210.533 ops/s
Iteration  17: 1098180.794 ops/s
Iteration  18: 1098991.723 ops/s
Iteration  19: 1099313.893 ops/s
Iteration  20: 1100787.747 ops/s
Iteration  21: 1099801.460 ops/s
Iteration  22: 1102220.607 ops/s
Iteration  23: 1082535.628 ops/s
Iteration  24: 1105900.564 ops/s
Iteration  25: 1097412.064 ops/s
Iteration  26: 1079092.638 ops/s
Iteration  27: 1094625.606 ops/s
Iteration  28: 1073332.210 ops/s
Iteration  29: 1082450.265 ops/s
Iteration  30: 1093132.900 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  1092360.717 ±(99.9%) 6793.423 ops/s [Average]
  (min, avg, max) = (1069695.279, 1092360.717, 1105923.617), stdev = 10168.076
  CI (99.9%): [1085567.295, 1099154.140] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                              Mode  Cnt        Score      Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  1092360.717 ± 6793.423  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 748613.402 ops/s
# Warmup Iteration   2: 796050.646 ops/s
# Warmup Iteration   3: 1027174.029 ops/s
# Warmup Iteration   4: 1017858.011 ops/s
# Warmup Iteration   5: 1025635.427 ops/s
# Warmup Iteration   6: 1027789.555 ops/s
# Warmup Iteration   7: 1014657.172 ops/s
# Warmup Iteration   8: 1029281.154 ops/s
# Warmup Iteration   9: 1027602.367 ops/s
# Warmup Iteration  10: 977289.090 ops/s
# Warmup Iteration  11: 909162.199 ops/s
# Warmup Iteration  12: 1019534.522 ops/s
# Warmup Iteration  13: 1025999.401 ops/s
# Warmup Iteration  14: 1019300.573 ops/s
# Warmup Iteration  15: 1029769.085 ops/s
# Warmup Iteration  16: 1011393.422 ops/s
# Warmup Iteration  17: 1083525.800 ops/s
# Warmup Iteration  18: 1099470.646 ops/s
# Warmup Iteration  19: 1074561.100 ops/s
# Warmup Iteration  20: 1083181.499 ops/s
# Warmup Iteration  21: 1078111.574 ops/s
# Warmup Iteration  22: 1063352.449 ops/s
# Warmup Iteration  23: 1092572.442 ops/s
# Warmup Iteration  24: 1091399.891 ops/s
# Warmup Iteration  25: 1089183.719 ops/s
# Warmup Iteration  26: 1083930.550 ops/s
# Warmup Iteration  27: 1086813.646 ops/s
# Warmup Iteration  28: 1087847.572 ops/s
# Warmup Iteration  29: 1085652.181 ops/s
# Warmup Iteration  30: 1087960.310 ops/s
Iteration   1: 1094613.351 ops/s
Iteration   2: 1074626.879 ops/s
Iteration   3: 1085745.153 ops/s
Iteration   4: 1058012.893 ops/s
Iteration   5: 1092751.550 ops/s
Iteration   6: 1058663.527 ops/s
Iteration   7: 1076073.910 ops/s
Iteration   8: 1096318.381 ops/s
Iteration   9: 1087140.903 ops/s
Iteration  10: 1089450.138 ops/s
Iteration  11: 1094529.319 ops/s
Iteration  12: 1083593.571 ops/s
Iteration  13: 1086270.193 ops/s
Iteration  14: 1100768.066 ops/s
Iteration  15: 1097933.897 ops/s
Iteration  16: 1084235.420 ops/s
Iteration  17: 1095464.472 ops/s
Iteration  18: 1082184.031 ops/s
Iteration  19: 1098582.821 ops/s
Iteration  20: 1096749.584 ops/s
Iteration  21: 1065861.018 ops/s
Iteration  22: 1092640.526 ops/s
Iteration  23: 1100923.579 ops/s
Iteration  24: 1072634.923 ops/s
Iteration  25: 1094969.313 ops/s
Iteration  26: 1089863.719 ops/s
Iteration  27: 1104071.151 ops/s
Iteration  28: 1095341.458 ops/s
Iteration  29: 1095218.744 ops/s
Iteration  30: 1095792.852 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1088034.178 ±(99.9%) 8073.960 ops/s [Average]
  (min, avg, max) = (1058012.893, 1088034.178, 1104071.151), stdev = 12084.724
  CI (99.9%): [1079960.218, 1096108.138] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                              Mode  Cnt        Score      Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1088034.178 ± 8073.960  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 868101.973 ops/s
# Warmup Iteration   2: 1841461.105 ops/s
# Warmup Iteration   3: 1552121.203 ops/s
# Warmup Iteration   4: 1874821.898 ops/s
# Warmup Iteration   5: 1859186.901 ops/s
# Warmup Iteration   6: 1870470.559 ops/s
# Warmup Iteration   7: 1865663.256 ops/s
# Warmup Iteration   8: 1849488.029 ops/s
# Warmup Iteration   9: 1863645.254 ops/s
# Warmup Iteration  10: 1866665.527 ops/s
# Warmup Iteration  11: 1864336.637 ops/s
# Warmup Iteration  12: 1868077.473 ops/s
# Warmup Iteration  13: 1850446.196 ops/s
# Warmup Iteration  14: 1844197.674 ops/s
# Warmup Iteration  15: 1857076.214 ops/s
# Warmup Iteration  16: 1870430.101 ops/s
# Warmup Iteration  17: 1849476.775 ops/s
# Warmup Iteration  18: 1846768.809 ops/s
# Warmup Iteration  19: 1841253.046 ops/s
# Warmup Iteration  20: 1853510.853 ops/s
# Warmup Iteration  21: 1859992.485 ops/s
# Warmup Iteration  22: 1852210.177 ops/s
# Warmup Iteration  23: 1869134.671 ops/s
# Warmup Iteration  24: 1848638.100 ops/s
# Warmup Iteration  25: 1855993.163 ops/s
# Warmup Iteration  26: 1856587.659 ops/s
# Warmup Iteration  27: 1858504.181 ops/s
# Warmup Iteration  28: 1837238.463 ops/s
# Warmup Iteration  29: 1851922.388 ops/s
# Warmup Iteration  30: 1847124.447 ops/s
Iteration   1: 1860615.773 ops/s
Iteration   2: 1867442.096 ops/s
Iteration   3: 1831057.666 ops/s
Iteration   4: 1848676.391 ops/s
Iteration   5: 1859505.215 ops/s
Iteration   6: 1854995.755 ops/s
Iteration   7: 1850588.419 ops/s
Iteration   8: 1871461.557 ops/s
Iteration   9: 1827281.044 ops/s
Iteration  10: 1828503.919 ops/s
Iteration  11: 1870591.680 ops/s
Iteration  12: 1832153.807 ops/s
Iteration  13: 1832682.892 ops/s
Iteration  14: 1869892.892 ops/s
Iteration  15: 1782509.155 ops/s
Iteration  16: 1843176.258 ops/s
Iteration  17: 1861025.918 ops/s
Iteration  18: 1831850.163 ops/s
Iteration  19: 1856296.193 ops/s
Iteration  20: 1857178.816 ops/s
Iteration  21: 1852525.491 ops/s
Iteration  22: 1859421.850 ops/s
Iteration  23: 1845709.304 ops/s
Iteration  24: 1864257.784 ops/s
Iteration  25: 1856969.020 ops/s
Iteration  26: 1835133.489 ops/s
Iteration  27: 1827820.775 ops/s
Iteration  28: 1861695.169 ops/s
Iteration  29: 1851516.129 ops/s
Iteration  30: 1845563.529 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_makeString":
  1847936.605 ±(99.9%) 12420.926 ops/s [Average]
  (min, avg, max) = (1782509.155, 1847936.605, 1871461.557), stdev = 18591.059
  CI (99.9%): [1835515.679, 1860357.531] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_makeString  thrpt   30  1847936.605 ± 12420.926  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 166872072.327 ops/s
# Warmup Iteration   2: 298650483.134 ops/s
# Warmup Iteration   3: 257628437.214 ops/s
# Warmup Iteration   4: 299677170.471 ops/s
# Warmup Iteration   5: 300550186.577 ops/s
# Warmup Iteration   6: 297140782.752 ops/s
# Warmup Iteration   7: 302386046.603 ops/s
# Warmup Iteration   8: 303981802.594 ops/s
# Warmup Iteration   9: 303793700.633 ops/s
# Warmup Iteration  10: 301953814.478 ops/s
# Warmup Iteration  11: 301624539.681 ops/s
# Warmup Iteration  12: 298959427.505 ops/s
# Warmup Iteration  13: 301410736.810 ops/s
# Warmup Iteration  14: 300067777.084 ops/s
# Warmup Iteration  15: 302692244.779 ops/s
# Warmup Iteration  16: 302446219.440 ops/s
# Warmup Iteration  17: 301405901.230 ops/s
# Warmup Iteration  18: 300711202.005 ops/s
# Warmup Iteration  19: 301360033.227 ops/s
# Warmup Iteration  20: 303351088.042 ops/s
# Warmup Iteration  21: 303744285.681 ops/s
# Warmup Iteration  22: 295329874.852 ops/s
# Warmup Iteration  23: 297402288.436 ops/s
# Warmup Iteration  24: 301027332.912 ops/s
# Warmup Iteration  25: 299477776.810 ops/s
# Warmup Iteration  26: 303884976.895 ops/s
# Warmup Iteration  27: 303491219.164 ops/s
# Warmup Iteration  28: 303791223.068 ops/s
# Warmup Iteration  29: 300942807.065 ops/s
# Warmup Iteration  30: 302239954.407 ops/s
Iteration   1: 293757218.545 ops/s
Iteration   2: 303918447.449 ops/s
Iteration   3: 299214189.769 ops/s
Iteration   4: 300529067.738 ops/s
Iteration   5: 304296633.932 ops/s
Iteration   6: 303642386.688 ops/s
Iteration   7: 303678035.638 ops/s
Iteration   8: 304604293.824 ops/s
Iteration   9: 293594449.225 ops/s
Iteration  10: 304659499.204 ops/s
Iteration  11: 303368272.703 ops/s
Iteration  12: 304641563.386 ops/s
Iteration  13: 300100633.625 ops/s
Iteration  14: 304689353.557 ops/s
Iteration  15: 302159910.317 ops/s
Iteration  16: 299127669.289 ops/s
Iteration  17: 294915772.641 ops/s
Iteration  18: 302889421.520 ops/s
Iteration  19: 299589521.135 ops/s
Iteration  20: 303739720.402 ops/s
Iteration  21: 297512120.392 ops/s
Iteration  22: 296625079.750 ops/s
Iteration  23: 297782318.004 ops/s
Iteration  24: 302441419.156 ops/s
Iteration  25: 303288233.399 ops/s
Iteration  26: 302115657.579 ops/s
Iteration  27: 303199251.236 ops/s
Iteration  28: 302153417.432 ops/s
Iteration  29: 304389364.493 ops/s
Iteration  30: 301402478.258 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_newCollection":
  301267513.343 ±(99.9%) 2235741.530 ops/s [Average]
  (min, avg, max) = (293594449.225, 301267513.343, 304689353.557), stdev = 3346352.923
  CI (99.9%): [299031771.813, 303503254.873] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt          Score         Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_newCollection  thrpt   30  301267513.343 ± 2235741.530  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3642475.509 ops/s
# Warmup Iteration   2: 6318420.565 ops/s
# Warmup Iteration   3: 7538119.965 ops/s
# Warmup Iteration   4: 7425007.371 ops/s
# Warmup Iteration   5: 7446562.628 ops/s
# Warmup Iteration   6: 7492235.506 ops/s
# Warmup Iteration   7: 7509760.560 ops/s
# Warmup Iteration   8: 7538057.152 ops/s
# Warmup Iteration   9: 7491889.612 ops/s
# Warmup Iteration  10: 7509555.450 ops/s
# Warmup Iteration  11: 7536197.697 ops/s
# Warmup Iteration  12: 7511761.949 ops/s
# Warmup Iteration  13: 7305756.373 ops/s
# Warmup Iteration  14: 7410429.530 ops/s
# Warmup Iteration  15: 7480278.592 ops/s
# Warmup Iteration  16: 7433531.530 ops/s
# Warmup Iteration  17: 7463084.047 ops/s
# Warmup Iteration  18: 7459437.174 ops/s
# Warmup Iteration  19: 7490901.424 ops/s
# Warmup Iteration  20: 7487123.388 ops/s
# Warmup Iteration  21: 7492058.141 ops/s
# Warmup Iteration  22: 7431711.715 ops/s
# Warmup Iteration  23: 7488064.113 ops/s
# Warmup Iteration  24: 7492618.480 ops/s
# Warmup Iteration  25: 7552089.087 ops/s
# Warmup Iteration  26: 7439627.762 ops/s
# Warmup Iteration  27: 7569393.915 ops/s
# Warmup Iteration  28: 7537679.398 ops/s
# Warmup Iteration  29: 7620035.885 ops/s
# Warmup Iteration  30: 7549786.614 ops/s
Iteration   1: 7591999.698 ops/s
Iteration   2: 7347289.611 ops/s
Iteration   3: 7580434.383 ops/s
Iteration   4: 7539206.817 ops/s
Iteration   5: 7495187.199 ops/s
Iteration   6: 7540704.187 ops/s
Iteration   7: 7550566.062 ops/s
Iteration   8: 7497797.727 ops/s
Iteration   9: 7465719.901 ops/s
Iteration  10: 7558385.022 ops/s
Iteration  11: 7394453.468 ops/s
Iteration  12: 7527720.289 ops/s
Iteration  13: 7587193.683 ops/s
Iteration  14: 7533497.210 ops/s
Iteration  15: 7543404.940 ops/s
Iteration  16: 7526849.607 ops/s
Iteration  17: 7600011.194 ops/s
Iteration  18: 7478201.583 ops/s
Iteration  19: 7598455.969 ops/s
Iteration  20: 7427097.795 ops/s
Iteration  21: 7569584.760 ops/s
Iteration  22: 7562911.508 ops/s
Iteration  23: 7548156.317 ops/s
Iteration  24: 7412348.735 ops/s
Iteration  25: 7561631.503 ops/s
Iteration  26: 7547373.353 ops/s
Iteration  27: 7562927.357 ops/s
Iteration  28: 7356774.921 ops/s
Iteration  29: 7401103.561 ops/s
Iteration  30: 7587664.462 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith":
  7516488.427 ±(99.9%) 48996.902 ops/s [Average]
  (min, avg, max) = (7347289.611, 7516488.427, 7600011.194), stdev = 73336.262
  CI (99.9%): [7467491.525, 7565485.330] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith  thrpt   30  7516488.427 ± 48996.902  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2338903.954 ops/s
# Warmup Iteration   2: 4172164.342 ops/s
# Warmup Iteration   3: 5008259.820 ops/s
# Warmup Iteration   4: 4983399.461 ops/s
# Warmup Iteration   5: 4999361.259 ops/s
# Warmup Iteration   6: 4948657.482 ops/s
# Warmup Iteration   7: 4973796.240 ops/s
# Warmup Iteration   8: 4926926.358 ops/s
# Warmup Iteration   9: 4971291.744 ops/s
# Warmup Iteration  10: 4979713.273 ops/s
# Warmup Iteration  11: 4960632.564 ops/s
# Warmup Iteration  12: 4945092.683 ops/s
# Warmup Iteration  13: 4965007.339 ops/s
# Warmup Iteration  14: 4965325.486 ops/s
# Warmup Iteration  15: 4936393.874 ops/s
# Warmup Iteration  16: 4980799.108 ops/s
# Warmup Iteration  17: 4974186.671 ops/s
# Warmup Iteration  18: 4985445.650 ops/s
# Warmup Iteration  19: 4944271.015 ops/s
# Warmup Iteration  20: 4974012.174 ops/s
# Warmup Iteration  21: 4886014.375 ops/s
# Warmup Iteration  22: 4951783.839 ops/s
# Warmup Iteration  23: 4967582.936 ops/s
# Warmup Iteration  24: 4906523.883 ops/s
# Warmup Iteration  25: 4961456.854 ops/s
# Warmup Iteration  26: 4944507.175 ops/s
# Warmup Iteration  27: 4949496.137 ops/s
# Warmup Iteration  28: 4911125.480 ops/s
# Warmup Iteration  29: 4992441.211 ops/s
# Warmup Iteration  30: 4964839.275 ops/s
Iteration   1: 4990294.731 ops/s
Iteration   2: 4911909.142 ops/s
Iteration   3: 4901736.130 ops/s
Iteration   4: 4964559.294 ops/s
Iteration   5: 4982978.756 ops/s
Iteration   6: 4969628.092 ops/s
Iteration   7: 4989832.735 ops/s
Iteration   8: 4977788.154 ops/s
Iteration   9: 4983806.197 ops/s
Iteration  10: 4923307.629 ops/s
Iteration  11: 4897493.819 ops/s
Iteration  12: 4996386.776 ops/s
Iteration  13: 4925676.195 ops/s
Iteration  14: 4969014.949 ops/s
Iteration  15: 4949488.294 ops/s
Iteration  16: 4986151.899 ops/s
Iteration  17: 4951745.457 ops/s
Iteration  18: 4958433.801 ops/s
Iteration  19: 4963660.044 ops/s
Iteration  20: 4959050.923 ops/s
Iteration  21: 4978216.905 ops/s
Iteration  22: 5006780.944 ops/s
Iteration  23: 4970312.872 ops/s
Iteration  24: 4928827.623 ops/s
Iteration  25: 4964875.287 ops/s
Iteration  26: 4873274.094 ops/s
Iteration  27: 4922786.400 ops/s
Iteration  28: 4965105.248 ops/s
Iteration  29: 4853783.347 ops/s
Iteration  30: 4975550.850 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy":
  4953081.886 ±(99.9%) 24936.332 ops/s [Average]
  (min, avg, max) = (4853783.347, 4953081.886, 5006780.944), stdev = 37323.531
  CI (99.9%): [4928145.554, 4978018.218] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy  thrpt   30  4953081.886 ± 24936.332  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5411931.021 ops/s
# Warmup Iteration   2: 8448125.449 ops/s
# Warmup Iteration   3: 10036214.821 ops/s
# Warmup Iteration   4: 9990327.448 ops/s
# Warmup Iteration   5: 9932556.774 ops/s
# Warmup Iteration   6: 10099008.924 ops/s
# Warmup Iteration   7: 10097320.142 ops/s
# Warmup Iteration   8: 9870831.406 ops/s
# Warmup Iteration   9: 10039674.696 ops/s
# Warmup Iteration  10: 10059600.683 ops/s
# Warmup Iteration  11: 10024876.805 ops/s
# Warmup Iteration  12: 10032937.957 ops/s
# Warmup Iteration  13: 10108647.850 ops/s
# Warmup Iteration  14: 10114009.890 ops/s
# Warmup Iteration  15: 10033254.491 ops/s
# Warmup Iteration  16: 10099294.609 ops/s
# Warmup Iteration  17: 10120145.842 ops/s
# Warmup Iteration  18: 10091651.531 ops/s
# Warmup Iteration  19: 10083770.885 ops/s
# Warmup Iteration  20: 9938119.996 ops/s
# Warmup Iteration  21: 10134502.134 ops/s
# Warmup Iteration  22: 9926937.534 ops/s
# Warmup Iteration  23: 9927452.553 ops/s
# Warmup Iteration  24: 10135090.066 ops/s
# Warmup Iteration  25: 10083184.067 ops/s
# Warmup Iteration  26: 10132080.124 ops/s
# Warmup Iteration  27: 10140497.224 ops/s
# Warmup Iteration  28: 10101548.911 ops/s
# Warmup Iteration  29: 10022822.622 ops/s
# Warmup Iteration  30: 9958699.646 ops/s
Iteration   1: 10039359.396 ops/s
Iteration   2: 10080231.262 ops/s
Iteration   3: 10146345.554 ops/s
Iteration   4: 10168442.529 ops/s
Iteration   5: 10111569.626 ops/s
Iteration   6: 9931734.358 ops/s
Iteration   7: 10064808.038 ops/s
Iteration   8: 9776847.079 ops/s
Iteration   9: 10075654.369 ops/s
Iteration  10: 10129916.548 ops/s
Iteration  11: 10073653.940 ops/s
Iteration  12: 10109970.060 ops/s
Iteration  13: 10063798.652 ops/s
Iteration  14: 10117121.118 ops/s
Iteration  15: 10106469.037 ops/s
Iteration  16: 9988540.752 ops/s
Iteration  17: 9905252.599 ops/s
Iteration  18: 10128816.192 ops/s
Iteration  19: 10153787.832 ops/s
Iteration  20: 10101909.057 ops/s
Iteration  21: 10051917.040 ops/s
Iteration  22: 10040139.039 ops/s
Iteration  23: 10176996.388 ops/s
Iteration  24: 10070304.320 ops/s
Iteration  25: 9926734.146 ops/s
Iteration  26: 9931717.893 ops/s
Iteration  27: 10013363.678 ops/s
Iteration  28: 10060221.325 ops/s
Iteration  29: 10062593.539 ops/s
Iteration  30: 9778120.680 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty":
  10046211.202 ±(99.9%) 68107.259 ops/s [Average]
  (min, avg, max) = (9776847.079, 10046211.202, 10176996.388), stdev = 101939.747
  CI (99.9%): [9978103.943, 10114318.461] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty  thrpt   30  10046211.202 ± 68107.259  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1733331.585 ops/s
# Warmup Iteration   2: 3834018.107 ops/s
# Warmup Iteration   3: 3270572.362 ops/s
# Warmup Iteration   4: 3904635.315 ops/s
# Warmup Iteration   5: 3905291.746 ops/s
# Warmup Iteration   6: 3882747.074 ops/s
# Warmup Iteration   7: 3885193.988 ops/s
# Warmup Iteration   8: 3880284.567 ops/s
# Warmup Iteration   9: 3842912.556 ops/s
# Warmup Iteration  10: 3865076.110 ops/s
# Warmup Iteration  11: 3873390.642 ops/s
# Warmup Iteration  12: 3899873.742 ops/s
# Warmup Iteration  13: 3850164.071 ops/s
# Warmup Iteration  14: 3848703.118 ops/s
# Warmup Iteration  15: 3846132.898 ops/s
# Warmup Iteration  16: 3857133.768 ops/s
# Warmup Iteration  17: 3832857.504 ops/s
# Warmup Iteration  18: 3903506.934 ops/s
# Warmup Iteration  19: 3830748.689 ops/s
# Warmup Iteration  20: 3820395.656 ops/s
# Warmup Iteration  21: 3853765.654 ops/s
# Warmup Iteration  22: 3868805.465 ops/s
# Warmup Iteration  23: 3832580.672 ops/s
# Warmup Iteration  24: 3892147.712 ops/s
# Warmup Iteration  25: 3894830.663 ops/s
# Warmup Iteration  26: 3842625.021 ops/s
# Warmup Iteration  27: 3883834.757 ops/s
# Warmup Iteration  28: 3892353.366 ops/s
# Warmup Iteration  29: 3863280.099 ops/s
# Warmup Iteration  30: 3890367.566 ops/s
Iteration   1: 3862523.721 ops/s
Iteration   2: 3905805.134 ops/s
Iteration   3: 3893986.922 ops/s
Iteration   4: 3898644.063 ops/s
Iteration   5: 3868434.676 ops/s
Iteration   6: 3860817.789 ops/s
Iteration   7: 3904318.422 ops/s
Iteration   8: 3882033.005 ops/s
Iteration   9: 3888781.972 ops/s
Iteration  10: 3877625.481 ops/s
Iteration  11: 3892928.640 ops/s
Iteration  12: 3869577.188 ops/s
Iteration  13: 3886955.014 ops/s
Iteration  14: 3911851.110 ops/s
Iteration  15: 3897413.451 ops/s
Iteration  16: 3895515.693 ops/s
Iteration  17: 3897895.655 ops/s
Iteration  18: 3903465.565 ops/s
Iteration  19: 3833972.493 ops/s
Iteration  20: 3879048.428 ops/s
Iteration  21: 3865546.132 ops/s
Iteration  22: 3877788.554 ops/s
Iteration  23: 3858437.664 ops/s
Iteration  24: 3908832.786 ops/s
Iteration  25: 3913535.285 ops/s
Iteration  26: 3864968.737 ops/s
Iteration  27: 3908182.468 ops/s
Iteration  28: 3848213.577 ops/s
Iteration  29: 3894578.163 ops/s
Iteration  30: 3906725.256 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_reduce":
  3885280.102 ±(99.9%) 13772.451 ops/s [Average]
  (min, avg, max) = (3833972.493, 3885280.102, 3913535.285), stdev = 20613.958
  CI (99.9%): [3871507.650, 3899052.553] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_reduce  thrpt   30  3885280.102 ± 13772.451  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1407836.634 ops/s
# Warmup Iteration   2: 2954470.023 ops/s
# Warmup Iteration   3: 2513952.678 ops/s
# Warmup Iteration   4: 2951868.066 ops/s
# Warmup Iteration   5: 2997651.886 ops/s
# Warmup Iteration   6: 2988978.759 ops/s
# Warmup Iteration   7: 2990631.085 ops/s
# Warmup Iteration   8: 2989558.380 ops/s
# Warmup Iteration   9: 2981988.843 ops/s
# Warmup Iteration  10: 2979597.285 ops/s
# Warmup Iteration  11: 2977287.116 ops/s
# Warmup Iteration  12: 2969156.573 ops/s
# Warmup Iteration  13: 2951809.636 ops/s
# Warmup Iteration  14: 2990289.373 ops/s
# Warmup Iteration  15: 2980247.845 ops/s
# Warmup Iteration  16: 2984805.479 ops/s
# Warmup Iteration  17: 2977133.590 ops/s
# Warmup Iteration  18: 2942905.697 ops/s
# Warmup Iteration  19: 2992193.285 ops/s
# Warmup Iteration  20: 2966456.235 ops/s
# Warmup Iteration  21: 2991612.358 ops/s
# Warmup Iteration  22: 2973553.060 ops/s
# Warmup Iteration  23: 2964788.207 ops/s
# Warmup Iteration  24: 2956938.081 ops/s
# Warmup Iteration  25: 2922010.455 ops/s
# Warmup Iteration  26: 2971356.294 ops/s
# Warmup Iteration  27: 2962905.509 ops/s
# Warmup Iteration  28: 2987585.940 ops/s
# Warmup Iteration  29: 2978571.623 ops/s
# Warmup Iteration  30: 2984278.144 ops/s
Iteration   1: 2962684.140 ops/s
Iteration   2: 2912384.766 ops/s
Iteration   3: 2965285.694 ops/s
Iteration   4: 2987875.070 ops/s
Iteration   5: 2926911.164 ops/s
Iteration   6: 2958051.820 ops/s
Iteration   7: 2996893.903 ops/s
Iteration   8: 2990783.037 ops/s
Iteration   9: 2996512.162 ops/s
Iteration  10: 2980557.914 ops/s
Iteration  11: 2988956.138 ops/s
Iteration  12: 2922032.558 ops/s
Iteration  13: 2988456.280 ops/s
Iteration  14: 2996263.821 ops/s
Iteration  15: 2980560.880 ops/s
Iteration  16: 2987993.414 ops/s
Iteration  17: 2985280.596 ops/s
Iteration  18: 2968538.088 ops/s
Iteration  19: 2949135.454 ops/s
Iteration  20: 2996385.011 ops/s
Iteration  21: 2991718.961 ops/s
Iteration  22: 3003806.093 ops/s
Iteration  23: 2959388.133 ops/s
Iteration  24: 3006203.917 ops/s
Iteration  25: 2916045.211 ops/s
Iteration  26: 2983463.053 ops/s
Iteration  27: 3001102.292 ops/s
Iteration  28: 2990567.904 ops/s
Iteration  29: 3000859.574 ops/s
Iteration  30: 2948337.300 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty":
  2974767.812 ±(99.9%) 18164.943 ops/s [Average]
  (min, avg, max) = (2912384.766, 2974767.812, 3006203.917), stdev = 27188.434
  CI (99.9%): [2956602.868, 2992932.755] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  2974767.812 ± 18164.943  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 696967.524 ops/s
# Warmup Iteration   2: 716150.807 ops/s
# Warmup Iteration   3: 954109.214 ops/s
# Warmup Iteration   4: 943291.887 ops/s
# Warmup Iteration   5: 938850.185 ops/s
# Warmup Iteration   6: 941798.483 ops/s
# Warmup Iteration   7: 946985.211 ops/s
# Warmup Iteration   8: 948711.029 ops/s
# Warmup Iteration   9: 949014.419 ops/s
# Warmup Iteration  10: 937262.742 ops/s
# Warmup Iteration  11: 886316.943 ops/s
# Warmup Iteration  12: 858007.661 ops/s
# Warmup Iteration  13: 948164.461 ops/s
# Warmup Iteration  14: 938871.245 ops/s
# Warmup Iteration  15: 948744.564 ops/s
# Warmup Iteration  16: 946164.102 ops/s
# Warmup Iteration  17: 1009251.666 ops/s
# Warmup Iteration  18: 992523.258 ops/s
# Warmup Iteration  19: 1004054.922 ops/s
# Warmup Iteration  20: 1003204.680 ops/s
# Warmup Iteration  21: 1002889.148 ops/s
# Warmup Iteration  22: 1001030.633 ops/s
# Warmup Iteration  23: 1005647.063 ops/s
# Warmup Iteration  24: 1005669.361 ops/s
# Warmup Iteration  25: 1008270.806 ops/s
# Warmup Iteration  26: 1002143.107 ops/s
# Warmup Iteration  27: 1006347.110 ops/s
# Warmup Iteration  28: 996445.130 ops/s
# Warmup Iteration  29: 986769.071 ops/s
# Warmup Iteration  30: 1004082.690 ops/s
Iteration   1: 1000632.598 ops/s
Iteration   2: 994133.854 ops/s
Iteration   3: 987498.876 ops/s
Iteration   4: 997087.727 ops/s
Iteration   5: 1012279.273 ops/s
Iteration   6: 987476.451 ops/s
Iteration   7: 995964.772 ops/s
Iteration   8: 991137.212 ops/s
Iteration   9: 1010990.387 ops/s
Iteration  10: 1000599.360 ops/s
Iteration  11: 1009060.721 ops/s
Iteration  12: 1003464.993 ops/s
Iteration  13: 1000560.826 ops/s
Iteration  14: 1008718.438 ops/s
Iteration  15: 954935.038 ops/s
Iteration  16: 1001395.792 ops/s
Iteration  17: 1001984.868 ops/s
Iteration  18: 1005023.661 ops/s
Iteration  19: 978383.729 ops/s
Iteration  20: 990811.148 ops/s
Iteration  21: 1002452.631 ops/s
Iteration  22: 987342.920 ops/s
Iteration  23: 982515.738 ops/s
Iteration  24: 1002121.243 ops/s
Iteration  25: 986538.016 ops/s
Iteration  26: 1006330.476 ops/s
Iteration  27: 1002186.859 ops/s
Iteration  28: 996201.050 ops/s
Iteration  29: 995926.948 ops/s
Iteration  30: 999704.864 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows":
  996448.682 ±(99.9%) 7710.571 ops/s [Average]
  (min, avg, max) = (954935.038, 996448.682, 1012279.273), stdev = 11540.820
  CI (99.9%): [988738.112, 1004159.253] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  996448.682 ± 7710.571  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5037760.795 ops/s
# Warmup Iteration   2: 14334529.201 ops/s
# Warmup Iteration   3: 11957203.374 ops/s
# Warmup Iteration   4: 14062868.601 ops/s
# Warmup Iteration   5: 14008786.928 ops/s
# Warmup Iteration   6: 14004451.243 ops/s
# Warmup Iteration   7: 14136697.022 ops/s
# Warmup Iteration   8: 13951853.772 ops/s
# Warmup Iteration   9: 13899801.332 ops/s
# Warmup Iteration  10: 13974941.839 ops/s
# Warmup Iteration  11: 14180432.121 ops/s
# Warmup Iteration  12: 14259886.196 ops/s
# Warmup Iteration  13: 14061838.860 ops/s
# Warmup Iteration  14: 13997914.117 ops/s
# Warmup Iteration  15: 14023233.514 ops/s
# Warmup Iteration  16: 13903963.199 ops/s
# Warmup Iteration  17: 14146703.294 ops/s
# Warmup Iteration  18: 13932788.933 ops/s
# Warmup Iteration  19: 14082115.009 ops/s
# Warmup Iteration  20: 13878355.151 ops/s
# Warmup Iteration  21: 14137592.444 ops/s
# Warmup Iteration  22: 14013615.046 ops/s
# Warmup Iteration  23: 13998497.420 ops/s
# Warmup Iteration  24: 14055251.955 ops/s
# Warmup Iteration  25: 14001674.700 ops/s
# Warmup Iteration  26: 14035825.295 ops/s
# Warmup Iteration  27: 13987744.919 ops/s
# Warmup Iteration  28: 13987046.013 ops/s
# Warmup Iteration  29: 14050994.306 ops/s
# Warmup Iteration  30: 14113186.217 ops/s
Iteration   1: 14129656.844 ops/s
Iteration   2: 14201314.554 ops/s
Iteration   3: 14149924.058 ops/s
Iteration   4: 14080547.527 ops/s
Iteration   5: 14157711.803 ops/s
Iteration   6: 14194530.637 ops/s
Iteration   7: 14113175.570 ops/s
Iteration   8: 14159009.459 ops/s
Iteration   9: 14059354.883 ops/s
Iteration  10: 14097255.627 ops/s
Iteration  11: 14084577.309 ops/s
Iteration  12: 13888534.092 ops/s
Iteration  13: 14132100.619 ops/s
Iteration  14: 14025623.968 ops/s
Iteration  15: 14087836.332 ops/s
Iteration  16: 14058830.854 ops/s
Iteration  17: 14122519.263 ops/s
Iteration  18: 14114276.996 ops/s
Iteration  19: 14204423.580 ops/s
Iteration  20: 14150830.019 ops/s
Iteration  21: 14218045.208 ops/s
Iteration  22: 14083968.299 ops/s
Iteration  23: 13892568.537 ops/s
Iteration  24: 14156568.856 ops/s
Iteration  25: 14081599.872 ops/s
Iteration  26: 14047797.468 ops/s
Iteration  27: 13939532.908 ops/s
Iteration  28: 13814414.161 ops/s
Iteration  29: 13869903.058 ops/s
Iteration  30: 14093953.515 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_reject":
  14080346.196 ±(99.9%) 69226.055 ops/s [Average]
  (min, avg, max) = (13814414.161, 14080346.196, 14218045.208), stdev = 103614.307
  CI (99.9%): [14011120.141, 14149572.250] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_reject  thrpt   30  14080346.196 ± 69226.055  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8117242.387 ops/s
# Warmup Iteration   2: 16495350.399 ops/s
# Warmup Iteration   3: 15236710.766 ops/s
# Warmup Iteration   4: 15878381.018 ops/s
# Warmup Iteration   5: 16863256.785 ops/s
# Warmup Iteration   6: 16872167.242 ops/s
# Warmup Iteration   7: 16827708.328 ops/s
# Warmup Iteration   8: 16891164.495 ops/s
# Warmup Iteration   9: 16995967.273 ops/s
# Warmup Iteration  10: 16877575.739 ops/s
# Warmup Iteration  11: 16709414.447 ops/s
# Warmup Iteration  12: 16873918.389 ops/s
# Warmup Iteration  13: 16806615.396 ops/s
# Warmup Iteration  14: 16975101.604 ops/s
# Warmup Iteration  15: 16921590.554 ops/s
# Warmup Iteration  16: 16945495.078 ops/s
# Warmup Iteration  17: 16908264.243 ops/s
# Warmup Iteration  18: 16967015.732 ops/s
# Warmup Iteration  19: 16905265.974 ops/s
# Warmup Iteration  20: 16980035.559 ops/s
# Warmup Iteration  21: 16888492.403 ops/s
# Warmup Iteration  22: 16804345.248 ops/s
# Warmup Iteration  23: 16947438.458 ops/s
# Warmup Iteration  24: 16985476.415 ops/s
# Warmup Iteration  25: 16982403.773 ops/s
# Warmup Iteration  26: 16969965.508 ops/s
# Warmup Iteration  27: 16805802.266 ops/s
# Warmup Iteration  28: 17020481.850 ops/s
# Warmup Iteration  29: 16928369.895 ops/s
# Warmup Iteration  30: 16754567.613 ops/s
Iteration   1: 16807667.231 ops/s
Iteration   2: 16987136.518 ops/s
Iteration   3: 17024416.780 ops/s
Iteration   4: 16981629.891 ops/s
Iteration   5: 17005835.925 ops/s
Iteration   6: 17069112.544 ops/s
Iteration   7: 16944938.210 ops/s
Iteration   8: 16861977.661 ops/s
Iteration   9: 16951866.311 ops/s
Iteration  10: 16896881.390 ops/s
Iteration  11: 17010399.427 ops/s
Iteration  12: 17043749.614 ops/s
Iteration  13: 16652956.687 ops/s
Iteration  14: 16860616.339 ops/s
Iteration  15: 16523153.540 ops/s
Iteration  16: 16983950.364 ops/s
Iteration  17: 16986563.452 ops/s
Iteration  18: 16762149.254 ops/s
Iteration  19: 17022936.210 ops/s
Iteration  20: 16998187.265 ops/s
Iteration  21: 16966722.247 ops/s
Iteration  22: 16853048.594 ops/s
Iteration  23: 17049785.685 ops/s
Iteration  24: 17010276.490 ops/s
Iteration  25: 16963968.952 ops/s
Iteration  26: 16924349.368 ops/s
Iteration  27: 16942390.875 ops/s
Iteration  28: 16989254.644 ops/s
Iteration  29: 16697040.159 ops/s
Iteration  30: 17022297.649 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_remove":
  16926508.642 ±(99.9%) 85121.942 ops/s [Average]
  (min, avg, max) = (16523153.540, 16926508.642, 17069112.544), stdev = 127406.526
  CI (99.9%): [16841386.700, 17011630.585] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_remove  thrpt   30  16926508.642 ± 85121.942  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2412315.930 ops/s
# Warmup Iteration   2: 5427859.515 ops/s
# Warmup Iteration   3: 4472405.646 ops/s
# Warmup Iteration   4: 5351709.830 ops/s
# Warmup Iteration   5: 5331988.058 ops/s
# Warmup Iteration   6: 5389751.421 ops/s
# Warmup Iteration   7: 5405184.452 ops/s
# Warmup Iteration   8: 5411263.549 ops/s
# Warmup Iteration   9: 5431600.417 ops/s
# Warmup Iteration  10: 5452339.167 ops/s
# Warmup Iteration  11: 5388187.647 ops/s
# Warmup Iteration  12: 5375769.092 ops/s
# Warmup Iteration  13: 5371363.706 ops/s
# Warmup Iteration  14: 5430599.727 ops/s
# Warmup Iteration  15: 5406693.026 ops/s
# Warmup Iteration  16: 5407829.727 ops/s
# Warmup Iteration  17: 5435028.885 ops/s
# Warmup Iteration  18: 5358640.891 ops/s
# Warmup Iteration  19: 5410703.299 ops/s
# Warmup Iteration  20: 5344078.391 ops/s
# Warmup Iteration  21: 5446846.723 ops/s
# Warmup Iteration  22: 5437100.946 ops/s
# Warmup Iteration  23: 5429188.610 ops/s
# Warmup Iteration  24: 5446926.899 ops/s
# Warmup Iteration  25: 5449695.940 ops/s
# Warmup Iteration  26: 5392057.253 ops/s
# Warmup Iteration  27: 5409551.698 ops/s
# Warmup Iteration  28: 5426761.426 ops/s
# Warmup Iteration  29: 5438942.621 ops/s
# Warmup Iteration  30: 5403586.392 ops/s
Iteration   1: 5436692.911 ops/s
Iteration   2: 5459373.805 ops/s
Iteration   3: 5455412.465 ops/s
Iteration   4: 5411163.915 ops/s
Iteration   5: 5445429.156 ops/s
Iteration   6: 5409242.472 ops/s
Iteration   7: 5356349.013 ops/s
Iteration   8: 5388750.572 ops/s
Iteration   9: 5402873.088 ops/s
Iteration  10: 5466168.622 ops/s
Iteration  11: 5448321.369 ops/s
Iteration  12: 5437000.579 ops/s
Iteration  13: 5331583.045 ops/s
Iteration  14: 5465601.162 ops/s
Iteration  15: 5387516.153 ops/s
Iteration  16: 5435969.500 ops/s
Iteration  17: 5459655.561 ops/s
Iteration  18: 5465611.226 ops/s
Iteration  19: 5456128.282 ops/s
Iteration  20: 5465530.348 ops/s
Iteration  21: 5428627.696 ops/s
Iteration  22: 5434171.967 ops/s
Iteration  23: 5432175.939 ops/s
Iteration  24: 5424504.005 ops/s
Iteration  25: 5481878.334 ops/s
Iteration  26: 5330489.102 ops/s
Iteration  27: 5397075.953 ops/s
Iteration  28: 5439448.937 ops/s
Iteration  29: 5443693.745 ops/s
Iteration  30: 5442163.267 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_removeAll":
  5427953.406 ±(99.9%) 25741.560 ops/s [Average]
  (min, avg, max) = (5330489.102, 5427953.406, 5481878.334), stdev = 38528.759
  CI (99.9%): [5402211.846, 5453694.967] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_removeAll  thrpt   30  5427953.406 ± 25741.560  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1703961.452 ops/s
# Warmup Iteration   2: 3772678.588 ops/s
# Warmup Iteration   3: 3151968.003 ops/s
# Warmup Iteration   4: 3785912.216 ops/s
# Warmup Iteration   5: 3788432.654 ops/s
# Warmup Iteration   6: 3794357.259 ops/s
# Warmup Iteration   7: 3789549.541 ops/s
# Warmup Iteration   8: 3794896.550 ops/s
# Warmup Iteration   9: 3774361.481 ops/s
# Warmup Iteration  10: 3796064.843 ops/s
# Warmup Iteration  11: 3808190.190 ops/s
# Warmup Iteration  12: 3775951.909 ops/s
# Warmup Iteration  13: 3771087.469 ops/s
# Warmup Iteration  14: 3786015.466 ops/s
# Warmup Iteration  15: 3775408.971 ops/s
# Warmup Iteration  16: 3786175.024 ops/s
# Warmup Iteration  17: 3804662.567 ops/s
# Warmup Iteration  18: 3780754.652 ops/s
# Warmup Iteration  19: 3792542.872 ops/s
# Warmup Iteration  20: 3748411.796 ops/s
# Warmup Iteration  21: 3762775.462 ops/s
# Warmup Iteration  22: 3795688.914 ops/s
# Warmup Iteration  23: 3797085.281 ops/s
# Warmup Iteration  24: 3778222.656 ops/s
# Warmup Iteration  25: 3776499.885 ops/s
# Warmup Iteration  26: 3797485.168 ops/s
# Warmup Iteration  27: 3798391.246 ops/s
# Warmup Iteration  28: 3769067.936 ops/s
# Warmup Iteration  29: 3751613.238 ops/s
# Warmup Iteration  30: 3784857.605 ops/s
Iteration   1: 3812833.509 ops/s
Iteration   2: 3750102.699 ops/s
Iteration   3: 3791448.825 ops/s
Iteration   4: 3787118.025 ops/s
Iteration   5: 3771712.595 ops/s
Iteration   6: 3773901.065 ops/s
Iteration   7: 3785398.145 ops/s
Iteration   8: 3793782.575 ops/s
Iteration   9: 3787382.921 ops/s
Iteration  10: 3795438.692 ops/s
Iteration  11: 3748829.529 ops/s
Iteration  12: 3731452.790 ops/s
Iteration  13: 3752325.228 ops/s
Iteration  14: 3737722.756 ops/s
Iteration  15: 3786786.198 ops/s
Iteration  16: 3789077.659 ops/s
Iteration  17: 3766989.961 ops/s
Iteration  18: 3791554.609 ops/s
Iteration  19: 3807506.258 ops/s
Iteration  20: 3789134.500 ops/s
Iteration  21: 3784060.574 ops/s
Iteration  22: 3771371.657 ops/s
Iteration  23: 3784273.637 ops/s
Iteration  24: 3796304.993 ops/s
Iteration  25: 3793234.863 ops/s
Iteration  26: 3776843.360 ops/s
Iteration  27: 3778731.863 ops/s
Iteration  28: 3755800.854 ops/s
Iteration  29: 3797566.434 ops/s
Iteration  30: 3789176.289 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable":
  3779262.102 ±(99.9%) 13274.569 ops/s [Average]
  (min, avg, max) = (3731452.790, 3779262.102, 3812833.509), stdev = 19868.751
  CI (99.9%): [3765987.533, 3792536.671] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  3779262.102 ± 13274.569  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 885392.330 ops/s
# Warmup Iteration   2: 2033785.825 ops/s
# Warmup Iteration   3: 1712251.845 ops/s
# Warmup Iteration   4: 2044124.722 ops/s
# Warmup Iteration   5: 2057462.346 ops/s
# Warmup Iteration   6: 2058376.364 ops/s
# Warmup Iteration   7: 2051490.782 ops/s
# Warmup Iteration   8: 2031340.968 ops/s
# Warmup Iteration   9: 2039127.780 ops/s
# Warmup Iteration  10: 2056023.182 ops/s
# Warmup Iteration  11: 2059176.515 ops/s
# Warmup Iteration  12: 2039728.652 ops/s
# Warmup Iteration  13: 2060246.795 ops/s
# Warmup Iteration  14: 2036992.224 ops/s
# Warmup Iteration  15: 2036240.861 ops/s
# Warmup Iteration  16: 2050199.736 ops/s
# Warmup Iteration  17: 2060302.696 ops/s
# Warmup Iteration  18: 2049642.664 ops/s
# Warmup Iteration  19: 2039839.015 ops/s
# Warmup Iteration  20: 2059329.890 ops/s
# Warmup Iteration  21: 2059954.076 ops/s
# Warmup Iteration  22: 2049783.467 ops/s
# Warmup Iteration  23: 2026988.039 ops/s
# Warmup Iteration  24: 2043214.803 ops/s
# Warmup Iteration  25: 2051597.263 ops/s
# Warmup Iteration  26: 2056815.804 ops/s
# Warmup Iteration  27: 2056265.672 ops/s
# Warmup Iteration  28: 2043400.549 ops/s
# Warmup Iteration  29: 2046754.359 ops/s
# Warmup Iteration  30: 2052262.537 ops/s
Iteration   1: 2061672.920 ops/s
Iteration   2: 2016368.517 ops/s
Iteration   3: 2044988.229 ops/s
Iteration   4: 2047930.637 ops/s
Iteration   5: 2053502.673 ops/s
Iteration   6: 2062208.130 ops/s
Iteration   7: 2058471.841 ops/s
Iteration   8: 2061783.801 ops/s
Iteration   9: 2054601.117 ops/s
Iteration  10: 2060226.875 ops/s
Iteration  11: 2038902.777 ops/s
Iteration  12: 2059292.524 ops/s
Iteration  13: 2050775.766 ops/s
Iteration  14: 2052281.965 ops/s
Iteration  15: 2053443.762 ops/s
Iteration  16: 2062820.005 ops/s
Iteration  17: 2045597.573 ops/s
Iteration  18: 2055794.871 ops/s
Iteration  19: 2054202.242 ops/s
Iteration  20: 2052003.067 ops/s
Iteration  21: 2059249.420 ops/s
Iteration  22: 2057382.535 ops/s
Iteration  23: 2016182.670 ops/s
Iteration  24: 2059683.812 ops/s
Iteration  25: 2051893.770 ops/s
Iteration  26: 2056616.750 ops/s
Iteration  27: 2016118.868 ops/s
Iteration  28: 2054371.781 ops/s
Iteration  29: 2045380.107 ops/s
Iteration  30: 2065053.658 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_retainAll":
  2050960.089 ±(99.9%) 8836.334 ops/s [Average]
  (min, avg, max) = (2016118.868, 2050960.089, 2065053.658), stdev = 13225.810
  CI (99.9%): [2042123.754, 2059796.423] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_retainAll  thrpt   30  2050960.089 ± 8836.334  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 544493.869 ops/s
# Warmup Iteration   2: 1268444.318 ops/s
# Warmup Iteration   3: 1184085.368 ops/s
# Warmup Iteration   4: 1127482.856 ops/s
# Warmup Iteration   5: 1262461.255 ops/s
# Warmup Iteration   6: 1267858.870 ops/s
# Warmup Iteration   7: 1266738.462 ops/s
# Warmup Iteration   8: 1262988.614 ops/s
# Warmup Iteration   9: 1242649.611 ops/s
# Warmup Iteration  10: 1263186.008 ops/s
# Warmup Iteration  11: 1250882.210 ops/s
# Warmup Iteration  12: 1263042.222 ops/s
# Warmup Iteration  13: 1261283.093 ops/s
# Warmup Iteration  14: 1263248.255 ops/s
# Warmup Iteration  15: 1266025.950 ops/s
# Warmup Iteration  16: 1265144.980 ops/s
# Warmup Iteration  17: 1264314.564 ops/s
# Warmup Iteration  18: 1241315.034 ops/s
# Warmup Iteration  19: 1251340.395 ops/s
# Warmup Iteration  20: 1262338.984 ops/s
# Warmup Iteration  21: 1262811.009 ops/s
# Warmup Iteration  22: 1261897.570 ops/s
# Warmup Iteration  23: 1264323.127 ops/s
# Warmup Iteration  24: 1263008.475 ops/s
# Warmup Iteration  25: 1266147.566 ops/s
# Warmup Iteration  26: 1263346.977 ops/s
# Warmup Iteration  27: 1260178.748 ops/s
# Warmup Iteration  28: 1253133.724 ops/s
# Warmup Iteration  29: 1262861.339 ops/s
# Warmup Iteration  30: 1255582.468 ops/s
Iteration   1: 1246138.770 ops/s
Iteration   2: 1271978.539 ops/s
Iteration   3: 1264698.675 ops/s
Iteration   4: 1262244.654 ops/s
Iteration   5: 1264319.289 ops/s
Iteration   6: 1265133.550 ops/s
Iteration   7: 1263890.268 ops/s
Iteration   8: 1262398.165 ops/s
Iteration   9: 1263073.353 ops/s
Iteration  10: 1263997.878 ops/s
Iteration  11: 1258844.121 ops/s
Iteration  12: 1267380.675 ops/s
Iteration  13: 1255741.310 ops/s
Iteration  14: 1271186.820 ops/s
Iteration  15: 1260524.554 ops/s
Iteration  16: 1269827.170 ops/s
Iteration  17: 1264899.129 ops/s
Iteration  18: 1259938.119 ops/s
Iteration  19: 1267507.313 ops/s
Iteration  20: 1269791.293 ops/s
Iteration  21: 1264295.177 ops/s
Iteration  22: 1260820.277 ops/s
Iteration  23: 1266208.305 ops/s
Iteration  24: 1263942.423 ops/s
Iteration  25: 1256098.945 ops/s
Iteration  26: 1269573.971 ops/s
Iteration  27: 1267070.810 ops/s
Iteration  28: 1266783.877 ops/s
Iteration  29: 1263468.428 ops/s
Iteration  30: 1258007.447 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable":
  1263659.444 ±(99.9%) 3545.302 ops/s [Average]
  (min, avg, max) = (1246138.770, 1263659.444, 1271978.539), stdev = 5306.442
  CI (99.9%): [1260114.141, 1267204.746] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  1263659.444 ± 3545.302  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6701596.457 ops/s
# Warmup Iteration   2: 13754287.972 ops/s
# Warmup Iteration   3: 12632404.951 ops/s
# Warmup Iteration   4: 14232952.000 ops/s
# Warmup Iteration   5: 14217208.753 ops/s
# Warmup Iteration   6: 14236663.908 ops/s
# Warmup Iteration   7: 14272365.195 ops/s
# Warmup Iteration   8: 14222480.402 ops/s
# Warmup Iteration   9: 14218549.567 ops/s
# Warmup Iteration  10: 14175264.307 ops/s
# Warmup Iteration  11: 14239950.886 ops/s
# Warmup Iteration  12: 14216682.750 ops/s
# Warmup Iteration  13: 14234946.453 ops/s
# Warmup Iteration  14: 14214732.220 ops/s
# Warmup Iteration  15: 14273817.395 ops/s
# Warmup Iteration  16: 14231977.496 ops/s
# Warmup Iteration  17: 14140395.004 ops/s
# Warmup Iteration  18: 14171229.205 ops/s
# Warmup Iteration  19: 14054161.058 ops/s
# Warmup Iteration  20: 14197744.029 ops/s
# Warmup Iteration  21: 14095420.616 ops/s
# Warmup Iteration  22: 14126496.200 ops/s
# Warmup Iteration  23: 14135393.003 ops/s
# Warmup Iteration  24: 14227946.651 ops/s
# Warmup Iteration  25: 14121246.842 ops/s
# Warmup Iteration  26: 14190189.765 ops/s
# Warmup Iteration  27: 14290478.322 ops/s
# Warmup Iteration  28: 14178152.169 ops/s
# Warmup Iteration  29: 14237608.644 ops/s
# Warmup Iteration  30: 14340689.934 ops/s
Iteration   1: 14269910.930 ops/s
Iteration   2: 14134533.093 ops/s
Iteration   3: 14156684.255 ops/s
Iteration   4: 14219674.196 ops/s
Iteration   5: 14141353.342 ops/s
Iteration   6: 14188524.977 ops/s
Iteration   7: 14238038.643 ops/s
Iteration   8: 14307600.747 ops/s
Iteration   9: 14276736.256 ops/s
Iteration  10: 14258284.743 ops/s
Iteration  11: 14210600.645 ops/s
Iteration  12: 14241264.006 ops/s
Iteration  13: 14147021.553 ops/s
Iteration  14: 14218146.864 ops/s
Iteration  15: 14230880.682 ops/s
Iteration  16: 14251925.476 ops/s
Iteration  17: 14230709.358 ops/s
Iteration  18: 14273372.147 ops/s
Iteration  19: 14199469.304 ops/s
Iteration  20: 14103834.577 ops/s
Iteration  21: 14197419.309 ops/s
Iteration  22: 14274185.065 ops/s
Iteration  23: 14212950.209 ops/s
Iteration  24: 14202327.917 ops/s
Iteration  25: 14116615.426 ops/s
Iteration  26: 14243711.681 ops/s
Iteration  27: 14256495.562 ops/s
Iteration  28: 14311551.556 ops/s
Iteration  29: 14226853.026 ops/s
Iteration  30: 14210547.724 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_select":
  14218374.109 ±(99.9%) 35609.252 ops/s [Average]
  (min, avg, max) = (14103834.577, 14218374.109, 14311551.556), stdev = 53298.255
  CI (99.9%): [14182764.857, 14253983.361] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_select  thrpt   30  14218374.109 ± 35609.252  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3314668.714 ops/s
# Warmup Iteration   2: 5492072.204 ops/s
# Warmup Iteration   3: 6452728.164 ops/s
# Warmup Iteration   4: 6430700.611 ops/s
# Warmup Iteration   5: 6428191.377 ops/s
# Warmup Iteration   6: 6309731.960 ops/s
# Warmup Iteration   7: 6370289.425 ops/s
# Warmup Iteration   8: 6378486.209 ops/s
# Warmup Iteration   9: 6372616.094 ops/s
# Warmup Iteration  10: 6293572.067 ops/s
# Warmup Iteration  11: 6357108.783 ops/s
# Warmup Iteration  12: 6366071.218 ops/s
# Warmup Iteration  13: 6362535.591 ops/s
# Warmup Iteration  14: 6364807.598 ops/s
# Warmup Iteration  15: 6368450.783 ops/s
# Warmup Iteration  16: 6370807.468 ops/s
# Warmup Iteration  17: 6360771.812 ops/s
# Warmup Iteration  18: 6340143.682 ops/s
# Warmup Iteration  19: 6361533.931 ops/s
# Warmup Iteration  20: 6405735.126 ops/s
# Warmup Iteration  21: 6432123.292 ops/s
# Warmup Iteration  22: 6246797.354 ops/s
# Warmup Iteration  23: 6368931.689 ops/s
# Warmup Iteration  24: 6341666.133 ops/s
# Warmup Iteration  25: 6367916.378 ops/s
# Warmup Iteration  26: 6390206.429 ops/s
# Warmup Iteration  27: 6400088.515 ops/s
# Warmup Iteration  28: 6399874.000 ops/s
# Warmup Iteration  29: 6411829.905 ops/s
# Warmup Iteration  30: 6429225.940 ops/s
Iteration   1: 6359480.020 ops/s
Iteration   2: 6395468.247 ops/s
Iteration   3: 6408410.246 ops/s
Iteration   4: 6432597.925 ops/s
Iteration   5: 6405625.737 ops/s
Iteration   6: 6289031.462 ops/s
Iteration   7: 6381339.241 ops/s
Iteration   8: 6388238.951 ops/s
Iteration   9: 6282562.569 ops/s
Iteration  10: 6335910.059 ops/s
Iteration  11: 6372969.115 ops/s
Iteration  12: 6341984.164 ops/s
Iteration  13: 6373030.332 ops/s
Iteration  14: 6373858.551 ops/s
Iteration  15: 6277400.816 ops/s
Iteration  16: 6440627.232 ops/s
Iteration  17: 6402300.079 ops/s
Iteration  18: 6409008.383 ops/s
Iteration  19: 6428665.120 ops/s
Iteration  20: 6368691.444 ops/s
Iteration  21: 6396965.401 ops/s
Iteration  22: 6403064.885 ops/s
Iteration  23: 6407259.706 ops/s
Iteration  24: 6415378.740 ops/s
Iteration  25: 6383408.114 ops/s
Iteration  26: 6398447.831 ops/s
Iteration  27: 6372781.683 ops/s
Iteration  28: 6360154.780 ops/s
Iteration  29: 6414279.415 ops/s
Iteration  30: 6361137.834 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_size":
  6379335.936 ±(99.9%) 27581.016 ops/s [Average]
  (min, avg, max) = (6277400.816, 6379335.936, 6440627.232), stdev = 41281.970
  CI (99.9%): [6351754.920, 6406916.952] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_size  thrpt   30  6379335.936 ± 27581.016  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 163706573.340 ops/s
# Warmup Iteration   2: 296667265.135 ops/s
# Warmup Iteration   3: 258269934.777 ops/s
# Warmup Iteration   4: 302780395.749 ops/s
# Warmup Iteration   5: 302701046.718 ops/s
# Warmup Iteration   6: 303968066.353 ops/s
# Warmup Iteration   7: 301223727.289 ops/s
# Warmup Iteration   8: 302553231.255 ops/s
# Warmup Iteration   9: 301831624.013 ops/s
# Warmup Iteration  10: 302616520.259 ops/s
# Warmup Iteration  11: 302466034.907 ops/s
# Warmup Iteration  12: 303110800.367 ops/s
# Warmup Iteration  13: 296459760.531 ops/s
# Warmup Iteration  14: 302666317.905 ops/s
# Warmup Iteration  15: 303381071.497 ops/s
# Warmup Iteration  16: 301173196.017 ops/s
# Warmup Iteration  17: 301889007.833 ops/s
# Warmup Iteration  18: 300152782.125 ops/s
# Warmup Iteration  19: 300092178.577 ops/s
# Warmup Iteration  20: 299683907.558 ops/s
# Warmup Iteration  21: 299498088.529 ops/s
# Warmup Iteration  22: 299141883.788 ops/s
# Warmup Iteration  23: 299673886.456 ops/s
# Warmup Iteration  24: 301686810.195 ops/s
# Warmup Iteration  25: 299561475.508 ops/s
# Warmup Iteration  26: 302631658.210 ops/s
# Warmup Iteration  27: 300816435.761 ops/s
# Warmup Iteration  28: 301918132.104 ops/s
# Warmup Iteration  29: 302480274.858 ops/s
# Warmup Iteration  30: 303635502.964 ops/s
Iteration   1: 304939352.960 ops/s
Iteration   2: 302328323.990 ops/s
Iteration   3: 304970349.502 ops/s
Iteration   4: 303583659.106 ops/s
Iteration   5: 297326187.211 ops/s
Iteration   6: 302535179.846 ops/s
Iteration   7: 300270358.755 ops/s
Iteration   8: 302032210.279 ops/s
Iteration   9: 302380536.834 ops/s
Iteration  10: 303970678.495 ops/s
Iteration  11: 302726309.490 ops/s
Iteration  12: 304041444.121 ops/s
Iteration  13: 304995989.713 ops/s
Iteration  14: 302934386.843 ops/s
Iteration  15: 306528123.825 ops/s
Iteration  16: 302249449.315 ops/s
Iteration  17: 303809072.742 ops/s
Iteration  18: 303626876.452 ops/s
Iteration  19: 303585795.139 ops/s
Iteration  20: 303239068.076 ops/s
Iteration  21: 305329775.101 ops/s
Iteration  22: 302514121.991 ops/s
Iteration  23: 301753247.210 ops/s
Iteration  24: 302978913.652 ops/s
Iteration  25: 301468442.463 ops/s
Iteration  26: 294695265.447 ops/s
Iteration  27: 297468591.509 ops/s
Iteration  28: 299296195.545 ops/s
Iteration  29: 305056729.428 ops/s
Iteration  30: 301977944.647 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_testEquals":
  302487085.989 ±(99.9%) 1711894.433 ops/s [Average]
  (min, avg, max) = (294695265.447, 302487085.989, 306528123.825), stdev = 2562283.191
  CI (99.9%): [300775191.556, 304198980.423] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score         Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_testEquals  thrpt   30  302487085.989 ± 1711894.433  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 161774952.248 ops/s
# Warmup Iteration   2: 300474516.077 ops/s
# Warmup Iteration   3: 239278519.387 ops/s
# Warmup Iteration   4: 274770659.228 ops/s
# Warmup Iteration   5: 279206098.314 ops/s
# Warmup Iteration   6: 278905988.616 ops/s
# Warmup Iteration   7: 277164622.783 ops/s
# Warmup Iteration   8: 275981494.532 ops/s
# Warmup Iteration   9: 278986185.338 ops/s
# Warmup Iteration  10: 279347714.367 ops/s
# Warmup Iteration  11: 279052743.450 ops/s
# Warmup Iteration  12: 276582561.981 ops/s
# Warmup Iteration  13: 276208281.461 ops/s
# Warmup Iteration  14: 276925676.727 ops/s
# Warmup Iteration  15: 279647634.731 ops/s
# Warmup Iteration  16: 278136843.819 ops/s
# Warmup Iteration  17: 278079538.440 ops/s
# Warmup Iteration  18: 276768666.548 ops/s
# Warmup Iteration  19: 278326786.241 ops/s
# Warmup Iteration  20: 278202542.297 ops/s
# Warmup Iteration  21: 279835521.906 ops/s
# Warmup Iteration  22: 280259129.028 ops/s
# Warmup Iteration  23: 279808045.757 ops/s
# Warmup Iteration  24: 278923399.383 ops/s
# Warmup Iteration  25: 280293874.676 ops/s
# Warmup Iteration  26: 280625197.231 ops/s
# Warmup Iteration  27: 275204012.727 ops/s
# Warmup Iteration  28: 276921164.057 ops/s
# Warmup Iteration  29: 280723720.089 ops/s
# Warmup Iteration  30: 279059688.406 ops/s
Iteration   1: 277156143.192 ops/s
Iteration   2: 278310402.961 ops/s
Iteration   3: 274883091.211 ops/s
Iteration   4: 276219473.612 ops/s
Iteration   5: 277877262.554 ops/s
Iteration   6: 276333225.790 ops/s
Iteration   7: 276934413.318 ops/s
Iteration   8: 279305642.242 ops/s
Iteration   9: 278430598.486 ops/s
Iteration  10: 278894288.446 ops/s
Iteration  11: 279258289.538 ops/s
Iteration  12: 278692639.053 ops/s
Iteration  13: 278718086.043 ops/s
Iteration  14: 277639698.245 ops/s
Iteration  15: 279511278.165 ops/s
Iteration  16: 278683004.476 ops/s
Iteration  17: 276750628.263 ops/s
Iteration  18: 278410724.617 ops/s
Iteration  19: 276789940.534 ops/s
Iteration  20: 278067222.701 ops/s
Iteration  21: 279714077.961 ops/s
Iteration  22: 279722540.607 ops/s
Iteration  23: 278826784.308 ops/s
Iteration  24: 280490450.159 ops/s
Iteration  25: 279140498.047 ops/s
Iteration  26: 280385258.128 ops/s
Iteration  27: 275930949.058 ops/s
Iteration  28: 275025812.848 ops/s
Iteration  29: 280055898.267 ops/s
Iteration  30: 276031860.174 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode":
  278073006.100 ±(99.9%) 1036657.264 ops/s [Average]
  (min, avg, max) = (274883091.211, 278073006.100, 280490450.159), stdev = 1551619.907
  CI (99.9%): [277036348.836, 279109663.364] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt          Score         Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode  thrpt   30  278073006.100 ± 1036657.264  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 164409571.464 ops/s
# Warmup Iteration   2: 300612869.711 ops/s
# Warmup Iteration   3: 260993718.100 ops/s
# Warmup Iteration   4: 303434967.573 ops/s
# Warmup Iteration   5: 303245638.321 ops/s
# Warmup Iteration   6: 302138911.308 ops/s
# Warmup Iteration   7: 303608051.202 ops/s
# Warmup Iteration   8: 302411479.687 ops/s
# Warmup Iteration   9: 302416528.715 ops/s
# Warmup Iteration  10: 300333703.309 ops/s
# Warmup Iteration  11: 303623132.308 ops/s
# Warmup Iteration  12: 304209912.637 ops/s
# Warmup Iteration  13: 302094305.440 ops/s
# Warmup Iteration  14: 303104751.670 ops/s
# Warmup Iteration  15: 300678185.743 ops/s
# Warmup Iteration  16: 299916641.393 ops/s
# Warmup Iteration  17: 301421009.293 ops/s
# Warmup Iteration  18: 303514846.859 ops/s
# Warmup Iteration  19: 300752407.946 ops/s
# Warmup Iteration  20: 303511824.868 ops/s
# Warmup Iteration  21: 303133533.130 ops/s
# Warmup Iteration  22: 301345604.300 ops/s
# Warmup Iteration  23: 301508306.843 ops/s
# Warmup Iteration  24: 302811091.544 ops/s
# Warmup Iteration  25: 303874379.299 ops/s
# Warmup Iteration  26: 301417481.432 ops/s
# Warmup Iteration  27: 299363500.920 ops/s
# Warmup Iteration  28: 301332164.958 ops/s
# Warmup Iteration  29: 304176242.927 ops/s
# Warmup Iteration  30: 303850332.445 ops/s
Iteration   1: 303862206.900 ops/s
Iteration   2: 299146381.913 ops/s
Iteration   3: 298725673.678 ops/s
Iteration   4: 302707427.958 ops/s
Iteration   5: 303635319.914 ops/s
Iteration   6: 300500497.034 ops/s
Iteration   7: 296207656.280 ops/s
Iteration   8: 302475628.356 ops/s
Iteration   9: 299265672.184 ops/s
Iteration  10: 304242615.304 ops/s
Iteration  11: 304333193.887 ops/s
Iteration  12: 304204643.527 ops/s
Iteration  13: 302947740.872 ops/s
Iteration  14: 300871363.018 ops/s
Iteration  15: 300574132.774 ops/s
Iteration  16: 302680890.765 ops/s
Iteration  17: 303418836.201 ops/s
Iteration  18: 296666901.169 ops/s
Iteration  19: 303309327.920 ops/s
Iteration  20: 304146102.792 ops/s
Iteration  21: 303676308.720 ops/s
Iteration  22: 284074213.009 ops/s
Iteration  23: 302602831.102 ops/s
Iteration  24: 303910164.518 ops/s
Iteration  25: 296740453.226 ops/s
Iteration  26: 303828533.254 ops/s
Iteration  27: 303520080.252 ops/s
Iteration  28: 303697637.127 ops/s
Iteration  29: 301193020.517 ops/s
Iteration  30: 304876831.897 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_testToString":
  301401409.536 ±(99.9%) 2741593.496 ops/s [Average]
  (min, avg, max) = (284074213.009, 301401409.536, 304876831.897), stdev = 4103488.391
  CI (99.9%): [298659816.039, 304143003.032] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt          Score         Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_testToString  thrpt   30  301401409.536 ± 2741593.496  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2556813.489 ops/s
# Warmup Iteration   2: 5615299.329 ops/s
# Warmup Iteration   3: 4790716.385 ops/s
# Warmup Iteration   4: 5718976.805 ops/s
# Warmup Iteration   5: 5658795.618 ops/s
# Warmup Iteration   6: 5712117.167 ops/s
# Warmup Iteration   7: 5732500.714 ops/s
# Warmup Iteration   8: 5677744.701 ops/s
# Warmup Iteration   9: 5660983.148 ops/s
# Warmup Iteration  10: 5729921.973 ops/s
# Warmup Iteration  11: 5663522.391 ops/s
# Warmup Iteration  12: 5700373.132 ops/s
# Warmup Iteration  13: 5708107.593 ops/s
# Warmup Iteration  14: 5714156.474 ops/s
# Warmup Iteration  15: 5691309.000 ops/s
# Warmup Iteration  16: 5667517.583 ops/s
# Warmup Iteration  17: 5626294.139 ops/s
# Warmup Iteration  18: 5675286.842 ops/s
# Warmup Iteration  19: 5609772.927 ops/s
# Warmup Iteration  20: 5658523.620 ops/s
# Warmup Iteration  21: 5686273.972 ops/s
# Warmup Iteration  22: 5621682.663 ops/s
# Warmup Iteration  23: 5725108.337 ops/s
# Warmup Iteration  24: 5701327.942 ops/s
# Warmup Iteration  25: 5717783.105 ops/s
# Warmup Iteration  26: 5695652.743 ops/s
# Warmup Iteration  27: 5665434.196 ops/s
# Warmup Iteration  28: 5658796.480 ops/s
# Warmup Iteration  29: 5653831.773 ops/s
# Warmup Iteration  30: 5657425.687 ops/s
Iteration   1: 5705340.238 ops/s
Iteration   2: 5721281.538 ops/s
Iteration   3: 5736249.985 ops/s
Iteration   4: 5666724.200 ops/s
Iteration   5: 5708263.053 ops/s
Iteration   6: 5704257.566 ops/s
Iteration   7: 5596431.842 ops/s
Iteration   8: 5645936.352 ops/s
Iteration   9: 5706700.426 ops/s
Iteration  10: 5689301.610 ops/s
Iteration  11: 5697993.468 ops/s
Iteration  12: 5734765.861 ops/s
Iteration  13: 5632351.226 ops/s
Iteration  14: 5718581.604 ops/s
Iteration  15: 5695304.709 ops/s
Iteration  16: 5608506.296 ops/s
Iteration  17: 5608484.476 ops/s
Iteration  18: 5575437.700 ops/s
Iteration  19: 5712185.098 ops/s
Iteration  20: 5738700.487 ops/s
Iteration  21: 5719667.775 ops/s
Iteration  22: 5694431.735 ops/s
Iteration  23: 5706652.181 ops/s
Iteration  24: 5650227.708 ops/s
Iteration  25: 5731903.360 ops/s
Iteration  26: 5750566.332 ops/s
Iteration  27: 5705883.609 ops/s
Iteration  28: 5683449.418 ops/s
Iteration  29: 5629813.262 ops/s
Iteration  30: 5694268.622 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_toArray":
  5685655.391 ±(99.9%) 31009.155 ops/s [Average]
  (min, avg, max) = (5575437.700, 5685655.391, 5750566.332), stdev = 46413.048
  CI (99.9%): [5654646.236, 5716664.547] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_toArray  thrpt   30  5685655.391 ± 31009.155  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 951416.469 ops/s
# Warmup Iteration   2: 2661762.330 ops/s
# Warmup Iteration   3: 2680142.630 ops/s
# Warmup Iteration   4: 2252914.897 ops/s
# Warmup Iteration   5: 2673236.817 ops/s
# Warmup Iteration   6: 2693932.661 ops/s
# Warmup Iteration   7: 2686847.265 ops/s
# Warmup Iteration   8: 2706743.090 ops/s
# Warmup Iteration   9: 2704742.643 ops/s
# Warmup Iteration  10: 2695134.705 ops/s
# Warmup Iteration  11: 2678734.913 ops/s
# Warmup Iteration  12: 2684254.998 ops/s
# Warmup Iteration  13: 2692128.131 ops/s
# Warmup Iteration  14: 2694517.664 ops/s
# Warmup Iteration  15: 2678346.263 ops/s
# Warmup Iteration  16: 2667196.823 ops/s
# Warmup Iteration  17: 2678017.449 ops/s
# Warmup Iteration  18: 2703030.903 ops/s
# Warmup Iteration  19: 2664557.882 ops/s
# Warmup Iteration  20: 2695333.447 ops/s
# Warmup Iteration  21: 2704332.488 ops/s
# Warmup Iteration  22: 2703342.408 ops/s
# Warmup Iteration  23: 2701720.506 ops/s
# Warmup Iteration  24: 2684596.043 ops/s
# Warmup Iteration  25: 2671940.985 ops/s
# Warmup Iteration  26: 2693656.279 ops/s
# Warmup Iteration  27: 2685038.960 ops/s
# Warmup Iteration  28: 2696573.674 ops/s
# Warmup Iteration  29: 2654778.335 ops/s
# Warmup Iteration  30: 2700764.529 ops/s
Iteration   1: 2681679.192 ops/s
Iteration   2: 2700232.585 ops/s
Iteration   3: 2700958.865 ops/s
Iteration   4: 2699699.455 ops/s
Iteration   5: 2684474.039 ops/s
Iteration   6: 2690486.516 ops/s
Iteration   7: 2687513.664 ops/s
Iteration   8: 2677488.029 ops/s
Iteration   9: 2699642.547 ops/s
Iteration  10: 2693363.976 ops/s
Iteration  11: 2716410.898 ops/s
Iteration  12: 2702647.685 ops/s
Iteration  13: 2693596.240 ops/s
Iteration  14: 2685631.152 ops/s
Iteration  15: 2657278.644 ops/s
Iteration  16: 2668396.234 ops/s
Iteration  17: 2697736.826 ops/s
Iteration  18: 2703274.416 ops/s
Iteration  19: 2654284.446 ops/s
Iteration  20: 2682826.907 ops/s
Iteration  21: 2706736.358 ops/s
Iteration  22: 2710412.784 ops/s
Iteration  23: 2648781.534 ops/s
Iteration  24: 2709813.597 ops/s
Iteration  25: 2675580.317 ops/s
Iteration  26: 2682706.822 ops/s
Iteration  27: 2696890.542 ops/s
Iteration  28: 2656028.684 ops/s
Iteration  29: 2701712.155 ops/s
Iteration  30: 2701250.521 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_toBag":
  2688917.854 ±(99.9%) 11871.165 ops/s [Average]
  (min, avg, max) = (2648781.534, 2688917.854, 2716410.898), stdev = 17768.203
  CI (99.9%): [2677046.689, 2700789.020] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_toBag  thrpt   30  2688917.854 ± 11871.165  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1499764.064 ops/s
# Warmup Iteration   2: 3430773.758 ops/s
# Warmup Iteration   3: 2830246.667 ops/s
# Warmup Iteration   4: 3408087.003 ops/s
# Warmup Iteration   5: 3417763.799 ops/s
# Warmup Iteration   6: 3399638.328 ops/s
# Warmup Iteration   7: 3406523.810 ops/s
# Warmup Iteration   8: 3390382.321 ops/s
# Warmup Iteration   9: 3420512.353 ops/s
# Warmup Iteration  10: 3423630.322 ops/s
# Warmup Iteration  11: 3421280.836 ops/s
# Warmup Iteration  12: 3429125.764 ops/s
# Warmup Iteration  13: 3410125.225 ops/s
# Warmup Iteration  14: 3409118.801 ops/s
# Warmup Iteration  15: 3406162.004 ops/s
# Warmup Iteration  16: 3392305.210 ops/s
# Warmup Iteration  17: 3412553.150 ops/s
# Warmup Iteration  18: 3400172.292 ops/s
# Warmup Iteration  19: 3380557.815 ops/s
# Warmup Iteration  20: 3375076.832 ops/s
# Warmup Iteration  21: 3413918.233 ops/s
# Warmup Iteration  22: 3421910.407 ops/s
# Warmup Iteration  23: 3408656.408 ops/s
# Warmup Iteration  24: 3334452.473 ops/s
# Warmup Iteration  25: 3403789.723 ops/s
# Warmup Iteration  26: 3391057.604 ops/s
# Warmup Iteration  27: 3420816.999 ops/s
# Warmup Iteration  28: 3416608.672 ops/s
# Warmup Iteration  29: 3365693.655 ops/s
# Warmup Iteration  30: 3378149.128 ops/s
Iteration   1: 3443588.143 ops/s
Iteration   2: 3376769.048 ops/s
Iteration   3: 3427598.781 ops/s
Iteration   4: 3402074.928 ops/s
Iteration   5: 3438580.555 ops/s
Iteration   6: 3358545.351 ops/s
Iteration   7: 3389363.517 ops/s
Iteration   8: 3379885.700 ops/s
Iteration   9: 3417649.431 ops/s
Iteration  10: 3384092.780 ops/s
Iteration  11: 3407324.731 ops/s
Iteration  12: 3383596.177 ops/s
Iteration  13: 3428765.246 ops/s
Iteration  14: 3415804.991 ops/s
Iteration  15: 3411377.468 ops/s
Iteration  16: 3355979.701 ops/s
Iteration  17: 3374575.266 ops/s
Iteration  18: 3429158.712 ops/s
Iteration  19: 3367330.630 ops/s
Iteration  20: 3405241.384 ops/s
Iteration  21: 3404103.267 ops/s
Iteration  22: 3412920.887 ops/s
Iteration  23: 3416470.278 ops/s
Iteration  24: 3402921.211 ops/s
Iteration  25: 3423477.443 ops/s
Iteration  26: 3410408.681 ops/s
Iteration  27: 3423720.514 ops/s
Iteration  28: 3424747.859 ops/s
Iteration  29: 3396617.940 ops/s
Iteration  30: 3407965.831 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_toList":
  3404021.882 ±(99.9%) 15416.745 ops/s [Average]
  (min, avg, max) = (3355979.701, 3404021.882, 3443588.143), stdev = 23075.059
  CI (99.9%): [3388605.137, 3419438.626] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_toList  thrpt   30  3404021.882 ± 15416.745  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2291305.762 ops/s
# Warmup Iteration   2: 6025311.629 ops/s
# Warmup Iteration   3: 5022225.978 ops/s
# Warmup Iteration   4: 6073227.276 ops/s
# Warmup Iteration   5: 5979042.556 ops/s
# Warmup Iteration   6: 6012110.511 ops/s
# Warmup Iteration   7: 6079226.719 ops/s
# Warmup Iteration   8: 6076026.305 ops/s
# Warmup Iteration   9: 6108739.812 ops/s
# Warmup Iteration  10: 6025206.905 ops/s
# Warmup Iteration  11: 6023313.608 ops/s
# Warmup Iteration  12: 6022297.477 ops/s
# Warmup Iteration  13: 6099739.925 ops/s
# Warmup Iteration  14: 6083187.910 ops/s
# Warmup Iteration  15: 6024412.486 ops/s
# Warmup Iteration  16: 6093977.038 ops/s
# Warmup Iteration  17: 6065613.628 ops/s
# Warmup Iteration  18: 6085862.418 ops/s
# Warmup Iteration  19: 6093840.840 ops/s
# Warmup Iteration  20: 6087117.437 ops/s
# Warmup Iteration  21: 6108421.864 ops/s
# Warmup Iteration  22: 6100736.455 ops/s
# Warmup Iteration  23: 6095539.928 ops/s
# Warmup Iteration  24: 6076855.253 ops/s
# Warmup Iteration  25: 6080076.083 ops/s
# Warmup Iteration  26: 6099303.444 ops/s
# Warmup Iteration  27: 6087668.831 ops/s
# Warmup Iteration  28: 6071026.855 ops/s
# Warmup Iteration  29: 6090797.353 ops/s
# Warmup Iteration  30: 6095186.719 ops/s
Iteration   1: 6107466.789 ops/s
Iteration   2: 6100170.780 ops/s
Iteration   3: 6107067.256 ops/s
Iteration   4: 6047541.147 ops/s
Iteration   5: 6071368.654 ops/s
Iteration   6: 6088349.593 ops/s
Iteration   7: 6036762.537 ops/s
Iteration   8: 6065048.485 ops/s
Iteration   9: 6119658.062 ops/s
Iteration  10: 6143691.637 ops/s
Iteration  11: 6077669.481 ops/s
Iteration  12: 6079441.483 ops/s
Iteration  13: 6097254.286 ops/s
Iteration  14: 6109261.743 ops/s
Iteration  15: 6107303.716 ops/s
Iteration  16: 6090064.084 ops/s
Iteration  17: 6104514.207 ops/s
Iteration  18: 6103219.110 ops/s
Iteration  19: 6100001.861 ops/s
Iteration  20: 6013410.161 ops/s
Iteration  21: 6075880.981 ops/s
Iteration  22: 6007394.347 ops/s
Iteration  23: 6128004.903 ops/s
Iteration  24: 6045284.504 ops/s
Iteration  25: 6008339.074 ops/s
Iteration  26: 6094569.310 ops/s
Iteration  27: 6113867.314 ops/s
Iteration  28: 6113896.600 ops/s
Iteration  29: 5897912.344 ops/s
Iteration  30: 6100695.851 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_toSet":
  6078503.677 ±(99.9%) 32531.119 ops/s [Average]
  (min, avg, max) = (5897912.344, 6078503.677, 6143691.637), stdev = 48691.052
  CI (99.9%): [6045972.557, 6111034.796] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_toSet  thrpt   30  6078503.677 ± 32531.119  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 696853.770 ops/s
# Warmup Iteration   2: 768769.610 ops/s
# Warmup Iteration   3: 1014950.373 ops/s
# Warmup Iteration   4: 1009357.646 ops/s
# Warmup Iteration   5: 1012869.780 ops/s
# Warmup Iteration   6: 998463.865 ops/s
# Warmup Iteration   7: 1004561.528 ops/s
# Warmup Iteration   8: 998982.243 ops/s
# Warmup Iteration   9: 1011773.381 ops/s
# Warmup Iteration  10: 834588.225 ops/s
# Warmup Iteration  11: 1009178.394 ops/s
# Warmup Iteration  12: 1019976.189 ops/s
# Warmup Iteration  13: 1006355.230 ops/s
# Warmup Iteration  14: 1015208.785 ops/s
# Warmup Iteration  15: 1010719.025 ops/s
# Warmup Iteration  16: 1000344.555 ops/s
# Warmup Iteration  17: 1055185.381 ops/s
# Warmup Iteration  18: 1071214.190 ops/s
# Warmup Iteration  19: 1049818.295 ops/s
# Warmup Iteration  20: 1067212.486 ops/s
# Warmup Iteration  21: 1073680.506 ops/s
# Warmup Iteration  22: 1071001.973 ops/s
# Warmup Iteration  23: 1072042.656 ops/s
# Warmup Iteration  24: 1074576.971 ops/s
# Warmup Iteration  25: 1075454.467 ops/s
# Warmup Iteration  26: 1078609.089 ops/s
# Warmup Iteration  27: 1079107.595 ops/s
# Warmup Iteration  28: 1076846.444 ops/s
# Warmup Iteration  29: 1067862.201 ops/s
# Warmup Iteration  30: 1047785.030 ops/s
Iteration   1: 1070917.037 ops/s
Iteration   2: 1057093.080 ops/s
Iteration   3: 1074049.906 ops/s
Iteration   4: 1058790.767 ops/s
Iteration   5: 1080581.725 ops/s
Iteration   6: 1073019.580 ops/s
Iteration   7: 1056546.891 ops/s
Iteration   8: 1077946.889 ops/s
Iteration   9: 1071212.847 ops/s
Iteration  10: 1074547.002 ops/s
Iteration  11: 1063496.123 ops/s
Iteration  12: 1072825.317 ops/s
Iteration  13: 1075200.129 ops/s
Iteration  14: 1073736.451 ops/s
Iteration  15: 1077326.583 ops/s
Iteration  16: 1047045.360 ops/s
Iteration  17: 1072705.533 ops/s
Iteration  18: 1082362.791 ops/s
Iteration  19: 1065098.145 ops/s
Iteration  20: 1061401.665 ops/s
Iteration  21: 1075404.543 ops/s
Iteration  22: 1072209.167 ops/s
Iteration  23: 1066218.152 ops/s
Iteration  24: 1080801.100 ops/s
Iteration  25: 1077565.299 ops/s
Iteration  26: 1078296.020 ops/s
Iteration  27: 1072261.106 ops/s
Iteration  28: 1075203.533 ops/s
Iteration  29: 1063438.808 ops/s
Iteration  30: 1079971.682 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_with":
  1070909.108 ±(99.9%) 5641.697 ops/s [Average]
  (min, avg, max) = (1047045.360, 1070909.108, 1082362.791), stdev = 8444.227
  CI (99.9%): [1065267.411, 1076550.805] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_with  thrpt   30  1070909.108 ± 5641.697  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 697763.864 ops/s
# Warmup Iteration   2: 770176.710 ops/s
# Warmup Iteration   3: 997379.820 ops/s
# Warmup Iteration   4: 997111.191 ops/s
# Warmup Iteration   5: 994089.228 ops/s
# Warmup Iteration   6: 1000386.695 ops/s
# Warmup Iteration   7: 991610.086 ops/s
# Warmup Iteration   8: 1001957.644 ops/s
# Warmup Iteration   9: 997626.257 ops/s
# Warmup Iteration  10: 834784.625 ops/s
# Warmup Iteration  11: 1002299.992 ops/s
# Warmup Iteration  12: 1001338.464 ops/s
# Warmup Iteration  13: 994720.632 ops/s
# Warmup Iteration  14: 1002105.818 ops/s
# Warmup Iteration  15: 1001499.149 ops/s
# Warmup Iteration  16: 1000667.078 ops/s
# Warmup Iteration  17: 1069521.209 ops/s
# Warmup Iteration  18: 1064275.867 ops/s
# Warmup Iteration  19: 1071813.743 ops/s
# Warmup Iteration  20: 1073732.695 ops/s
# Warmup Iteration  21: 1075491.663 ops/s
# Warmup Iteration  22: 1066887.315 ops/s
# Warmup Iteration  23: 1066786.133 ops/s
# Warmup Iteration  24: 1065953.258 ops/s
# Warmup Iteration  25: 1055936.026 ops/s
# Warmup Iteration  26: 1053872.243 ops/s
# Warmup Iteration  27: 1069021.887 ops/s
# Warmup Iteration  28: 1069024.925 ops/s
# Warmup Iteration  29: 1059420.592 ops/s
# Warmup Iteration  30: 1055103.654 ops/s
Iteration   1: 1059240.669 ops/s
Iteration   2: 1069102.814 ops/s
Iteration   3: 1055165.520 ops/s
Iteration   4: 1052683.770 ops/s
Iteration   5: 1040741.442 ops/s
Iteration   6: 1061991.506 ops/s
Iteration   7: 1067114.878 ops/s
Iteration   8: 1068184.696 ops/s
Iteration   9: 1048991.721 ops/s
Iteration  10: 1070451.830 ops/s
Iteration  11: 1063163.055 ops/s
Iteration  12: 1049808.907 ops/s
Iteration  13: 1072920.601 ops/s
Iteration  14: 1079024.521 ops/s
Iteration  15: 1067110.929 ops/s
Iteration  16: 1049701.406 ops/s
Iteration  17: 1067828.042 ops/s
Iteration  18: 1071439.578 ops/s
Iteration  19: 1067639.712 ops/s
Iteration  20: 1071670.632 ops/s
Iteration  21: 1072564.123 ops/s
Iteration  22: 1067472.989 ops/s
Iteration  23: 1049440.762 ops/s
Iteration  24: 1067167.469 ops/s
Iteration  25: 1065383.366 ops/s
Iteration  26: 1053379.712 ops/s
Iteration  27: 1069165.088 ops/s
Iteration  28: 1065739.796 ops/s
Iteration  29: 1066395.168 ops/s
Iteration  30: 1067025.842 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_withAll":
  1063257.018 ±(99.9%) 6087.614 ops/s [Average]
  (min, avg, max) = (1040741.442, 1063257.018, 1079024.521), stdev = 9111.655
  CI (99.9%): [1057169.404, 1069344.632] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_withAll  thrpt   30  1063257.018 ± 6087.614  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 698494.145 ops/s
# Warmup Iteration   2: 774267.174 ops/s
# Warmup Iteration   3: 1014283.048 ops/s
# Warmup Iteration   4: 1015720.745 ops/s
# Warmup Iteration   5: 1013496.154 ops/s
# Warmup Iteration   6: 1010606.362 ops/s
# Warmup Iteration   7: 1001792.871 ops/s
# Warmup Iteration   8: 1013071.447 ops/s
# Warmup Iteration   9: 1009502.184 ops/s
# Warmup Iteration  10: 831272.063 ops/s
# Warmup Iteration  11: 978038.549 ops/s
# Warmup Iteration  12: 1013693.626 ops/s
# Warmup Iteration  13: 1011297.042 ops/s
# Warmup Iteration  14: 1014666.033 ops/s
# Warmup Iteration  15: 1012168.757 ops/s
# Warmup Iteration  16: 1010572.997 ops/s
# Warmup Iteration  17: 1063382.679 ops/s
# Warmup Iteration  18: 1070353.443 ops/s
# Warmup Iteration  19: 1073128.225 ops/s
# Warmup Iteration  20: 1069680.245 ops/s
# Warmup Iteration  21: 1074823.034 ops/s
# Warmup Iteration  22: 1076665.540 ops/s
# Warmup Iteration  23: 1039039.763 ops/s
# Warmup Iteration  24: 1074278.998 ops/s
# Warmup Iteration  25: 1079779.684 ops/s
# Warmup Iteration  26: 1073474.620 ops/s
# Warmup Iteration  27: 1076325.547 ops/s
# Warmup Iteration  28: 1075970.551 ops/s
# Warmup Iteration  29: 1071214.341 ops/s
# Warmup Iteration  30: 1079272.706 ops/s
Iteration   1: 1074934.800 ops/s
Iteration   2: 1074091.365 ops/s
Iteration   3: 1087921.568 ops/s
Iteration   4: 1071829.798 ops/s
Iteration   5: 1084689.673 ops/s
Iteration   6: 1082711.650 ops/s
Iteration   7: 1075082.140 ops/s
Iteration   8: 1068466.609 ops/s
Iteration   9: 1077543.470 ops/s
Iteration  10: 1074022.256 ops/s
Iteration  11: 1086278.301 ops/s
Iteration  12: 1078225.989 ops/s
Iteration  13: 1085495.828 ops/s
Iteration  14: 1081887.639 ops/s
Iteration  15: 1080800.101 ops/s
Iteration  16: 1072627.691 ops/s
Iteration  17: 1075556.291 ops/s
Iteration  18: 1046357.747 ops/s
Iteration  19: 1075722.248 ops/s
Iteration  20: 1086448.520 ops/s
Iteration  21: 1084920.849 ops/s
Iteration  22: 1086003.972 ops/s
Iteration  23: 1063649.556 ops/s
Iteration  24: 1085038.528 ops/s
Iteration  25: 1080256.691 ops/s
Iteration  26: 1074272.262 ops/s
Iteration  27: 1077563.014 ops/s
Iteration  28: 1066198.652 ops/s
Iteration  29: 1083793.646 ops/s
Iteration  30: 1078457.078 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_without":
  1077361.598 ±(99.9%) 5754.492 ops/s [Average]
  (min, avg, max) = (1046357.747, 1077361.598, 1087921.568), stdev = 8613.053
  CI (99.9%): [1071607.106, 1083116.089] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_without  thrpt   30  1077361.598 ± 5754.492  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 696941.450 ops/s
# Warmup Iteration   2: 763390.345 ops/s
# Warmup Iteration   3: 1010352.964 ops/s
# Warmup Iteration   4: 1004012.706 ops/s
# Warmup Iteration   5: 1009543.035 ops/s
# Warmup Iteration   6: 1012073.654 ops/s
# Warmup Iteration   7: 1006120.807 ops/s
# Warmup Iteration   8: 990662.620 ops/s
# Warmup Iteration   9: 1013984.883 ops/s
# Warmup Iteration  10: 830371.425 ops/s
# Warmup Iteration  11: 1007859.226 ops/s
# Warmup Iteration  12: 1012469.356 ops/s
# Warmup Iteration  13: 1000943.053 ops/s
# Warmup Iteration  14: 999876.731 ops/s
# Warmup Iteration  15: 1002281.180 ops/s
# Warmup Iteration  16: 1012597.824 ops/s
# Warmup Iteration  17: 1074034.002 ops/s
# Warmup Iteration  18: 1077388.818 ops/s
# Warmup Iteration  19: 1061422.175 ops/s
# Warmup Iteration  20: 1054953.128 ops/s
# Warmup Iteration  21: 1068659.378 ops/s
# Warmup Iteration  22: 1071401.764 ops/s
# Warmup Iteration  23: 1064984.801 ops/s
# Warmup Iteration  24: 1073731.914 ops/s
# Warmup Iteration  25: 1057031.445 ops/s
# Warmup Iteration  26: 1055885.939 ops/s
# Warmup Iteration  27: 1063344.610 ops/s
# Warmup Iteration  28: 1051290.389 ops/s
# Warmup Iteration  29: 1069322.156 ops/s
# Warmup Iteration  30: 1074315.405 ops/s
Iteration   1: 1066614.192 ops/s
Iteration   2: 1054356.635 ops/s
Iteration   3: 1059007.803 ops/s
Iteration   4: 1063440.363 ops/s
Iteration   5: 1070330.324 ops/s
Iteration   6: 1071462.867 ops/s
Iteration   7: 1077882.998 ops/s
Iteration   8: 1078227.435 ops/s
Iteration   9: 1060075.364 ops/s
Iteration  10: 1053855.039 ops/s
Iteration  11: 1073547.575 ops/s
Iteration  12: 1077244.416 ops/s
Iteration  13: 1072536.575 ops/s
Iteration  14: 1068325.329 ops/s
Iteration  15: 1072898.764 ops/s
Iteration  16: 1066795.454 ops/s
Iteration  17: 1046893.090 ops/s
Iteration  18: 1076012.250 ops/s
Iteration  19: 1074336.478 ops/s
Iteration  20: 1078415.540 ops/s
Iteration  21: 1074894.176 ops/s
Iteration  22: 1077508.114 ops/s
Iteration  23: 1074870.426 ops/s
Iteration  24: 1073046.521 ops/s
Iteration  25: 1072626.763 ops/s
Iteration  26: 1080891.184 ops/s
Iteration  27: 1067704.231 ops/s
Iteration  28: 1082274.156 ops/s
Iteration  29: 1072962.471 ops/s
Iteration  30: 1070466.436 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.IntBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll":
  1070316.766 ±(99.9%) 5637.419 ops/s [Average]
  (min, avg, max) = (1046893.090, 1070316.766, 1082274.156), stdev = 8437.824
  CI (99.9%): [1064679.346, 1075954.185] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
IntBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll  thrpt   30  1070316.766 ± 5637.419  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 690824.172 ops/s
# Warmup Iteration   2: 779395.962 ops/s
# Warmup Iteration   3: 1003578.600 ops/s
# Warmup Iteration   4: 1005439.703 ops/s
# Warmup Iteration   5: 1001524.918 ops/s
# Warmup Iteration   6: 1002314.396 ops/s
# Warmup Iteration   7: 1009266.460 ops/s
# Warmup Iteration   8: 1002546.696 ops/s
# Warmup Iteration   9: 1000085.666 ops/s
# Warmup Iteration  10: 836176.205 ops/s
# Warmup Iteration  11: 1005798.099 ops/s
# Warmup Iteration  12: 998407.832 ops/s
# Warmup Iteration  13: 1005323.892 ops/s
# Warmup Iteration  14: 1005201.663 ops/s
# Warmup Iteration  15: 1004485.668 ops/s
# Warmup Iteration  16: 995415.148 ops/s
# Warmup Iteration  17: 1066700.356 ops/s
# Warmup Iteration  18: 1054791.088 ops/s
# Warmup Iteration  19: 1061859.854 ops/s
# Warmup Iteration  20: 1065459.190 ops/s
# Warmup Iteration  21: 1064188.031 ops/s
# Warmup Iteration  22: 1061451.341 ops/s
# Warmup Iteration  23: 1068340.677 ops/s
# Warmup Iteration  24: 1066248.299 ops/s
# Warmup Iteration  25: 1060277.983 ops/s
# Warmup Iteration  26: 1050579.675 ops/s
# Warmup Iteration  27: 1064510.644 ops/s
# Warmup Iteration  28: 1060504.585 ops/s
# Warmup Iteration  29: 1048755.291 ops/s
# Warmup Iteration  30: 1065914.962 ops/s
Iteration   1: 1063911.354 ops/s
Iteration   2: 1040222.070 ops/s
Iteration   3: 1045575.737 ops/s
Iteration   4: 1058455.438 ops/s
Iteration   5: 1064854.327 ops/s
Iteration   6: 1063211.081 ops/s
Iteration   7: 1040088.270 ops/s
Iteration   8: 1065666.505 ops/s
Iteration   9: 1067091.128 ops/s
Iteration  10: 1061303.286 ops/s
Iteration  11: 1065002.657 ops/s
Iteration  12: 1065994.750 ops/s
Iteration  13: 1059709.297 ops/s
Iteration  14: 1046768.837 ops/s
Iteration  15: 1060948.711 ops/s
Iteration  16: 1059116.849 ops/s
Iteration  17: 1066109.269 ops/s
Iteration  18: 1062395.562 ops/s
Iteration  19: 1057779.862 ops/s
Iteration  20: 1049585.091 ops/s
Iteration  21: 1056639.013 ops/s
Iteration  22: 1061487.343 ops/s
Iteration  23: 1052740.281 ops/s
Iteration  24: 1047859.367 ops/s
Iteration  25: 1064397.289 ops/s
Iteration  26: 1069281.162 ops/s
Iteration  27: 1065503.055 ops/s
Iteration  28: 1067966.542 ops/s
Iteration  29: 1065892.071 ops/s
Iteration  30: 1067569.779 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_add":
  1059437.533 ±(99.9%) 5577.383 ops/s [Average]
  (min, avg, max) = (1040088.270, 1059437.533, 1069281.162), stdev = 8347.965
  CI (99.9%): [1053860.150, 1065014.916] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_add  thrpt   30  1059437.533 ± 5577.383  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 677564.875 ops/s
# Warmup Iteration   2: 773163.506 ops/s
# Warmup Iteration   3: 996597.132 ops/s
# Warmup Iteration   4: 995648.096 ops/s
# Warmup Iteration   5: 991266.229 ops/s
# Warmup Iteration   6: 998002.093 ops/s
# Warmup Iteration   7: 992215.490 ops/s
# Warmup Iteration   8: 996441.901 ops/s
# Warmup Iteration   9: 988817.583 ops/s
# Warmup Iteration  10: 831378.594 ops/s
# Warmup Iteration  11: 999572.116 ops/s
# Warmup Iteration  12: 993507.600 ops/s
# Warmup Iteration  13: 1001423.988 ops/s
# Warmup Iteration  14: 994456.742 ops/s
# Warmup Iteration  15: 992207.239 ops/s
# Warmup Iteration  16: 999819.792 ops/s
# Warmup Iteration  17: 1060492.876 ops/s
# Warmup Iteration  18: 1064365.654 ops/s
# Warmup Iteration  19: 1068536.459 ops/s
# Warmup Iteration  20: 1057166.874 ops/s
# Warmup Iteration  21: 1061024.701 ops/s
# Warmup Iteration  22: 1065376.239 ops/s
# Warmup Iteration  23: 1062238.139 ops/s
# Warmup Iteration  24: 1072955.075 ops/s
# Warmup Iteration  25: 1057823.214 ops/s
# Warmup Iteration  26: 1068231.497 ops/s
# Warmup Iteration  27: 1069630.205 ops/s
# Warmup Iteration  28: 1053736.840 ops/s
# Warmup Iteration  29: 1066744.441 ops/s
# Warmup Iteration  30: 1068130.256 ops/s
Iteration   1: 1070422.650 ops/s
Iteration   2: 1071292.922 ops/s
Iteration   3: 1077262.402 ops/s
Iteration   4: 1050325.610 ops/s
Iteration   5: 1056711.046 ops/s
Iteration   6: 1071636.108 ops/s
Iteration   7: 1064041.224 ops/s
Iteration   8: 1071075.266 ops/s
Iteration   9: 1063529.260 ops/s
Iteration  10: 1061890.601 ops/s
Iteration  11: 1070477.038 ops/s
Iteration  12: 1071544.407 ops/s
Iteration  13: 1050595.597 ops/s
Iteration  14: 1049866.830 ops/s
Iteration  15: 1072223.343 ops/s
Iteration  16: 1072647.163 ops/s
Iteration  17: 1063755.183 ops/s
Iteration  18: 1062753.358 ops/s
Iteration  19: 1067446.438 ops/s
Iteration  20: 1030781.804 ops/s
Iteration  21: 1065718.029 ops/s
Iteration  22: 1063445.075 ops/s
Iteration  23: 1046713.166 ops/s
Iteration  24: 1065965.587 ops/s
Iteration  25: 1038984.086 ops/s
Iteration  26: 1061146.434 ops/s
Iteration  27: 1066984.403 ops/s
Iteration  28: 1062705.886 ops/s
Iteration  29: 1066101.362 ops/s
Iteration  30: 1073252.612 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray":
  1062709.830 ±(99.9%) 7182.617 ops/s [Average]
  (min, avg, max) = (1030781.804, 1062709.830, 1077262.402), stdev = 10750.604
  CI (99.9%): [1055527.213, 1069892.446] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray  thrpt   30  1062709.830 ± 7182.617  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 691174.672 ops/s
# Warmup Iteration   2: 780007.380 ops/s
# Warmup Iteration   3: 1007008.924 ops/s
# Warmup Iteration   4: 994899.225 ops/s
# Warmup Iteration   5: 1006965.533 ops/s
# Warmup Iteration   6: 1004057.826 ops/s
# Warmup Iteration   7: 1007163.153 ops/s
# Warmup Iteration   8: 1003433.642 ops/s
# Warmup Iteration   9: 1004021.800 ops/s
# Warmup Iteration  10: 829457.075 ops/s
# Warmup Iteration  11: 1001837.183 ops/s
# Warmup Iteration  12: 1002935.189 ops/s
# Warmup Iteration  13: 984868.798 ops/s
# Warmup Iteration  14: 996747.095 ops/s
# Warmup Iteration  15: 1002613.953 ops/s
# Warmup Iteration  16: 1009013.721 ops/s
# Warmup Iteration  17: 1063819.387 ops/s
# Warmup Iteration  18: 1071858.882 ops/s
# Warmup Iteration  19: 1068262.335 ops/s
# Warmup Iteration  20: 1059125.003 ops/s
# Warmup Iteration  21: 1069280.868 ops/s
# Warmup Iteration  22: 1073943.787 ops/s
# Warmup Iteration  23: 1063873.022 ops/s
# Warmup Iteration  24: 1060068.997 ops/s
# Warmup Iteration  25: 1067760.834 ops/s
# Warmup Iteration  26: 1066074.011 ops/s
# Warmup Iteration  27: 1064862.202 ops/s
# Warmup Iteration  28: 1049233.231 ops/s
# Warmup Iteration  29: 1073230.022 ops/s
# Warmup Iteration  30: 1073479.038 ops/s
Iteration   1: 1066476.029 ops/s
Iteration   2: 1071582.243 ops/s
Iteration   3: 1067685.850 ops/s
Iteration   4: 1056205.496 ops/s
Iteration   5: 1066645.516 ops/s
Iteration   6: 1075218.172 ops/s
Iteration   7: 1075578.930 ops/s
Iteration   8: 1053292.593 ops/s
Iteration   9: 1070170.852 ops/s
Iteration  10: 1069762.419 ops/s
Iteration  11: 1072295.411 ops/s
Iteration  12: 1060876.924 ops/s
Iteration  13: 1062877.052 ops/s
Iteration  14: 1075431.562 ops/s
Iteration  15: 1070569.514 ops/s
Iteration  16: 1071067.015 ops/s
Iteration  17: 1057692.339 ops/s
Iteration  18: 1070173.807 ops/s
Iteration  19: 1074349.913 ops/s
Iteration  20: 1070020.225 ops/s
Iteration  21: 1074035.988 ops/s
Iteration  22: 1063429.333 ops/s
Iteration  23: 1063252.180 ops/s
Iteration  24: 1069928.963 ops/s
Iteration  25: 1075167.811 ops/s
Iteration  26: 1051312.916 ops/s
Iteration  27: 1042856.729 ops/s
Iteration  28: 1072838.568 ops/s
Iteration  29: 1045926.275 ops/s
Iteration  30: 1064268.392 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable":
  1066032.967 ±(99.9%) 5905.868 ops/s [Average]
  (min, avg, max) = (1042856.729, 1066032.967, 1075578.930), stdev = 8839.626
  CI (99.9%): [1060127.100, 1071938.835] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable  thrpt   30  1066032.967 ± 5905.868  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1552072.968 ops/s
# Warmup Iteration   2: 2860333.247 ops/s
# Warmup Iteration   3: 3415517.267 ops/s
# Warmup Iteration   4: 3440659.448 ops/s
# Warmup Iteration   5: 3438399.189 ops/s
# Warmup Iteration   6: 3428131.781 ops/s
# Warmup Iteration   7: 3448935.413 ops/s
# Warmup Iteration   8: 3453344.992 ops/s
# Warmup Iteration   9: 3379629.797 ops/s
# Warmup Iteration  10: 3453382.404 ops/s
# Warmup Iteration  11: 3472447.182 ops/s
# Warmup Iteration  12: 3445627.414 ops/s
# Warmup Iteration  13: 3454952.776 ops/s
# Warmup Iteration  14: 3466249.032 ops/s
# Warmup Iteration  15: 3475983.728 ops/s
# Warmup Iteration  16: 3453945.179 ops/s
# Warmup Iteration  17: 3433322.658 ops/s
# Warmup Iteration  18: 3458312.992 ops/s
# Warmup Iteration  19: 3456666.479 ops/s
# Warmup Iteration  20: 3442358.054 ops/s
# Warmup Iteration  21: 3406507.405 ops/s
# Warmup Iteration  22: 3425111.844 ops/s
# Warmup Iteration  23: 3412171.958 ops/s
# Warmup Iteration  24: 3431413.319 ops/s
# Warmup Iteration  25: 3432325.144 ops/s
# Warmup Iteration  26: 3452121.206 ops/s
# Warmup Iteration  27: 3453294.651 ops/s
# Warmup Iteration  28: 3437182.323 ops/s
# Warmup Iteration  29: 3462239.794 ops/s
# Warmup Iteration  30: 3449477.726 ops/s
Iteration   1: 3418017.253 ops/s
Iteration   2: 3390366.622 ops/s
Iteration   3: 3432802.759 ops/s
Iteration   4: 3462388.250 ops/s
Iteration   5: 3418637.977 ops/s
Iteration   6: 3454575.701 ops/s
Iteration   7: 3401879.894 ops/s
Iteration   8: 3450105.013 ops/s
Iteration   9: 3324785.355 ops/s
Iteration  10: 3418494.558 ops/s
Iteration  11: 3413507.785 ops/s
Iteration  12: 3421386.794 ops/s
Iteration  13: 3402553.089 ops/s
Iteration  14: 3372983.872 ops/s
Iteration  15: 3417553.510 ops/s
Iteration  16: 3426265.971 ops/s
Iteration  17: 3423958.805 ops/s
Iteration  18: 3354970.341 ops/s
Iteration  19: 3393089.104 ops/s
Iteration  20: 3394507.589 ops/s
Iteration  21: 3439713.023 ops/s
Iteration  22: 3447130.317 ops/s
Iteration  23: 3445549.872 ops/s
Iteration  24: 3459445.576 ops/s
Iteration  25: 3446408.891 ops/s
Iteration  26: 3411366.565 ops/s
Iteration  27: 3478296.680 ops/s
Iteration  28: 3474769.503 ops/s
Iteration  29: 3476802.526 ops/s
Iteration  30: 3470918.390 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy":
  3424774.386 ±(99.9%) 24249.823 ops/s [Average]
  (min, avg, max) = (3324785.355, 3424774.386, 3478296.680), stdev = 36295.996
  CI (99.9%): [3400524.563, 3449024.209] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy  thrpt   30  3424774.386 ± 24249.823  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1578571.295 ops/s
# Warmup Iteration   2: 2842900.116 ops/s
# Warmup Iteration   3: 3439252.091 ops/s
# Warmup Iteration   4: 3438064.482 ops/s
# Warmup Iteration   5: 3446760.781 ops/s
# Warmup Iteration   6: 3431439.107 ops/s
# Warmup Iteration   7: 3441085.745 ops/s
# Warmup Iteration   8: 3441445.253 ops/s
# Warmup Iteration   9: 3456386.588 ops/s
# Warmup Iteration  10: 3468541.749 ops/s
# Warmup Iteration  11: 3433292.005 ops/s
# Warmup Iteration  12: 3471784.706 ops/s
# Warmup Iteration  13: 3474513.493 ops/s
# Warmup Iteration  14: 3437601.651 ops/s
# Warmup Iteration  15: 3442833.541 ops/s
# Warmup Iteration  16: 3463467.699 ops/s
# Warmup Iteration  17: 3440052.573 ops/s
# Warmup Iteration  18: 3468306.515 ops/s
# Warmup Iteration  19: 3388546.303 ops/s
# Warmup Iteration  20: 3452117.144 ops/s
# Warmup Iteration  21: 3460111.138 ops/s
# Warmup Iteration  22: 3451221.634 ops/s
# Warmup Iteration  23: 3432593.194 ops/s
# Warmup Iteration  24: 3435553.611 ops/s
# Warmup Iteration  25: 3458742.486 ops/s
# Warmup Iteration  26: 3450114.331 ops/s
# Warmup Iteration  27: 3437795.756 ops/s
# Warmup Iteration  28: 3426751.418 ops/s
# Warmup Iteration  29: 3454637.388 ops/s
# Warmup Iteration  30: 3461863.938 ops/s
Iteration   1: 3380739.595 ops/s
Iteration   2: 3373044.746 ops/s
Iteration   3: 3465824.968 ops/s
Iteration   4: 3445636.237 ops/s
Iteration   5: 3446891.664 ops/s
Iteration   6: 3470779.339 ops/s
Iteration   7: 3475576.808 ops/s
Iteration   8: 3467771.717 ops/s
Iteration   9: 3478247.582 ops/s
Iteration  10: 3465911.081 ops/s
Iteration  11: 3416898.756 ops/s
Iteration  12: 3434185.922 ops/s
Iteration  13: 3443290.542 ops/s
Iteration  14: 3429109.960 ops/s
Iteration  15: 3456031.717 ops/s
Iteration  16: 3456473.259 ops/s
Iteration  17: 3464254.878 ops/s
Iteration  18: 3394080.729 ops/s
Iteration  19: 3474316.835 ops/s
Iteration  20: 3414672.115 ops/s
Iteration  21: 3427437.667 ops/s
Iteration  22: 3401457.346 ops/s
Iteration  23: 3432259.848 ops/s
Iteration  24: 3463608.428 ops/s
Iteration  25: 3465785.169 ops/s
Iteration  26: 3470878.849 ops/s
Iteration  27: 3460934.246 ops/s
Iteration  28: 3478434.474 ops/s
Iteration  29: 3433695.070 ops/s
Iteration  30: 3372819.705 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy":
  3442034.975 ±(99.9%) 21425.660 ops/s [Average]
  (min, avg, max) = (3372819.705, 3442034.975, 3478434.474), stdev = 32068.922
  CI (99.9%): [3420609.315, 3463460.635] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy  thrpt   30  3442034.975 ± 21425.660  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 809444.497 ops/s
# Warmup Iteration   2: 1769151.387 ops/s
# Warmup Iteration   3: 1466379.064 ops/s
# Warmup Iteration   4: 1745650.509 ops/s
# Warmup Iteration   5: 1738180.169 ops/s
# Warmup Iteration   6: 1730087.179 ops/s
# Warmup Iteration   7: 1712443.777 ops/s
# Warmup Iteration   8: 1703637.954 ops/s
# Warmup Iteration   9: 1736495.393 ops/s
# Warmup Iteration  10: 1736609.884 ops/s
# Warmup Iteration  11: 1733191.025 ops/s
# Warmup Iteration  12: 1728627.923 ops/s
# Warmup Iteration  13: 1733785.695 ops/s
# Warmup Iteration  14: 1750098.937 ops/s
# Warmup Iteration  15: 1756085.625 ops/s
# Warmup Iteration  16: 1735104.981 ops/s
# Warmup Iteration  17: 1741565.553 ops/s
# Warmup Iteration  18: 1760596.450 ops/s
# Warmup Iteration  19: 1742847.681 ops/s
# Warmup Iteration  20: 1755973.748 ops/s
# Warmup Iteration  21: 1738086.275 ops/s
# Warmup Iteration  22: 1752197.781 ops/s
# Warmup Iteration  23: 1731360.005 ops/s
# Warmup Iteration  24: 1753809.932 ops/s
# Warmup Iteration  25: 1745052.600 ops/s
# Warmup Iteration  26: 1729499.145 ops/s
# Warmup Iteration  27: 1744615.440 ops/s
# Warmup Iteration  28: 1747143.629 ops/s
# Warmup Iteration  29: 1731426.791 ops/s
# Warmup Iteration  30: 1747161.774 ops/s
Iteration   1: 1722141.610 ops/s
Iteration   2: 1749069.114 ops/s
Iteration   3: 1745704.833 ops/s
Iteration   4: 1759570.479 ops/s
Iteration   5: 1729070.636 ops/s
Iteration   6: 1734297.888 ops/s
Iteration   7: 1764171.634 ops/s
Iteration   8: 1779390.257 ops/s
Iteration   9: 1752875.305 ops/s
Iteration  10: 1767651.194 ops/s
Iteration  11: 1738863.413 ops/s
Iteration  12: 1770897.772 ops/s
Iteration  13: 1757206.589 ops/s
Iteration  14: 1748891.954 ops/s
Iteration  15: 1748711.120 ops/s
Iteration  16: 1716581.760 ops/s
Iteration  17: 1700314.717 ops/s
Iteration  18: 1764619.044 ops/s
Iteration  19: 1754934.285 ops/s
Iteration  20: 1748191.884 ops/s
Iteration  21: 1751630.546 ops/s
Iteration  22: 1718927.553 ops/s
Iteration  23: 1741826.560 ops/s
Iteration  24: 1780894.506 ops/s
Iteration  25: 1746511.682 ops/s
Iteration  26: 1748999.733 ops/s
Iteration  27: 1742068.908 ops/s
Iteration  28: 1759170.275 ops/s
Iteration  29: 1752614.380 ops/s
Iteration  30: 1759004.207 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_appendString":
  1748493.461 ±(99.9%) 12135.458 ops/s [Average]
  (min, avg, max) = (1700314.717, 1748493.461, 1780894.506), stdev = 18163.784
  CI (99.9%): [1736358.003, 1760628.920] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_appendString  thrpt   30  1748493.461 ± 12135.458  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3154337.766 ops/s
# Warmup Iteration   2: 6822410.794 ops/s
# Warmup Iteration   3: 6862054.738 ops/s
# Warmup Iteration   4: 5792500.723 ops/s
# Warmup Iteration   5: 6983371.142 ops/s
# Warmup Iteration   6: 6903213.112 ops/s
# Warmup Iteration   7: 6935825.324 ops/s
# Warmup Iteration   8: 6930291.204 ops/s
# Warmup Iteration   9: 6938315.193 ops/s
# Warmup Iteration  10: 7010252.426 ops/s
# Warmup Iteration  11: 6919969.418 ops/s
# Warmup Iteration  12: 7014744.094 ops/s
# Warmup Iteration  13: 7006342.782 ops/s
# Warmup Iteration  14: 6937208.211 ops/s
# Warmup Iteration  15: 6998070.554 ops/s
# Warmup Iteration  16: 6968898.411 ops/s
# Warmup Iteration  17: 6980059.843 ops/s
# Warmup Iteration  18: 6986511.442 ops/s
# Warmup Iteration  19: 6925820.453 ops/s
# Warmup Iteration  20: 6990541.946 ops/s
# Warmup Iteration  21: 6979547.407 ops/s
# Warmup Iteration  22: 6881411.382 ops/s
# Warmup Iteration  23: 6973385.291 ops/s
# Warmup Iteration  24: 6836548.663 ops/s
# Warmup Iteration  25: 6833961.330 ops/s
# Warmup Iteration  26: 6933411.667 ops/s
# Warmup Iteration  27: 6936758.259 ops/s
# Warmup Iteration  28: 6990325.919 ops/s
# Warmup Iteration  29: 6996761.980 ops/s
# Warmup Iteration  30: 6985314.061 ops/s
Iteration   1: 6990841.638 ops/s
Iteration   2: 7004137.325 ops/s
Iteration   3: 6872981.402 ops/s
Iteration   4: 6949107.146 ops/s
Iteration   5: 7032951.584 ops/s
Iteration   6: 6954638.743 ops/s
Iteration   7: 7005978.633 ops/s
Iteration   8: 6828808.535 ops/s
Iteration   9: 6954233.684 ops/s
Iteration  10: 6973093.659 ops/s
Iteration  11: 6992488.710 ops/s
Iteration  12: 7007944.108 ops/s
Iteration  13: 6863906.458 ops/s
Iteration  14: 6941942.565 ops/s
Iteration  15: 7021697.988 ops/s
Iteration  16: 6770583.319 ops/s
Iteration  17: 6985712.045 ops/s
Iteration  18: 6978392.276 ops/s
Iteration  19: 6931993.553 ops/s
Iteration  20: 6993208.513 ops/s
Iteration  21: 7009554.516 ops/s
Iteration  22: 6968281.652 ops/s
Iteration  23: 6971672.422 ops/s
Iteration  24: 7007166.240 ops/s
Iteration  25: 6945598.413 ops/s
Iteration  26: 6764982.695 ops/s
Iteration  27: 6707753.079 ops/s
Iteration  28: 7003308.841 ops/s
Iteration  29: 6880576.675 ops/s
Iteration  30: 6979125.392 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_asLazy":
  6943088.727 ±(99.9%) 55160.933 ops/s [Average]
  (min, avg, max) = (6707753.079, 6943088.727, 7032951.584), stdev = 82562.294
  CI (99.9%): [6887927.794, 6998249.660] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_asLazy  thrpt   30  6943088.727 ± 55160.933  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5466620.477 ops/s
# Warmup Iteration   2: 9839706.786 ops/s
# Warmup Iteration   3: 9982473.625 ops/s
# Warmup Iteration   4: 10768260.939 ops/s
# Warmup Iteration   5: 10857893.657 ops/s
# Warmup Iteration   6: 10615841.250 ops/s
# Warmup Iteration   7: 10727237.453 ops/s
# Warmup Iteration   8: 10566989.120 ops/s
# Warmup Iteration   9: 10737506.688 ops/s
# Warmup Iteration  10: 10767441.625 ops/s
# Warmup Iteration  11: 10854007.631 ops/s
# Warmup Iteration  12: 10794144.261 ops/s
# Warmup Iteration  13: 10627866.698 ops/s
# Warmup Iteration  14: 10688196.217 ops/s
# Warmup Iteration  15: 10711842.987 ops/s
# Warmup Iteration  16: 10808917.171 ops/s
# Warmup Iteration  17: 10768652.369 ops/s
# Warmup Iteration  18: 10770433.548 ops/s
# Warmup Iteration  19: 10864950.206 ops/s
# Warmup Iteration  20: 10728391.980 ops/s
# Warmup Iteration  21: 10710724.397 ops/s
# Warmup Iteration  22: 10820885.926 ops/s
# Warmup Iteration  23: 10728724.164 ops/s
# Warmup Iteration  24: 10634401.936 ops/s
# Warmup Iteration  25: 10697623.128 ops/s
# Warmup Iteration  26: 10719439.861 ops/s
# Warmup Iteration  27: 10754124.000 ops/s
# Warmup Iteration  28: 10781064.188 ops/s
# Warmup Iteration  29: 10714309.504 ops/s
# Warmup Iteration  30: 10868538.591 ops/s
Iteration   1: 10726531.144 ops/s
Iteration   2: 10866885.140 ops/s
Iteration   3: 10750000.324 ops/s
Iteration   4: 10520640.512 ops/s
Iteration   5: 10625787.312 ops/s
Iteration   6: 10864086.985 ops/s
Iteration   7: 10722533.237 ops/s
Iteration   8: 10736858.841 ops/s
Iteration   9: 10770099.941 ops/s
Iteration  10: 10793435.341 ops/s
Iteration  11: 10549940.641 ops/s
Iteration  12: 10626082.849 ops/s
Iteration  13: 10485924.643 ops/s
Iteration  14: 10674854.602 ops/s
Iteration  15: 10738780.677 ops/s
Iteration  16: 10496622.686 ops/s
Iteration  17: 10722072.952 ops/s
Iteration  18: 10748415.128 ops/s
Iteration  19: 10668033.345 ops/s
Iteration  20: 10792815.242 ops/s
Iteration  21: 10787342.714 ops/s
Iteration  22: 10750354.846 ops/s
Iteration  23: 10778730.651 ops/s
Iteration  24: 10518742.369 ops/s
Iteration  25: 10646175.597 ops/s
Iteration  26: 10699518.585 ops/s
Iteration  27: 10789822.692 ops/s
Iteration  28: 10747926.087 ops/s
Iteration  29: 10477098.323 ops/s
Iteration  30: 10759559.099 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized":
  10694522.417 ±(99.9%) 73999.083 ops/s [Average]
  (min, avg, max) = (10477098.323, 10694522.417, 10866885.140), stdev = 110758.352
  CI (99.9%): [10620523.334, 10768521.500] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized  thrpt   30  10694522.417 ± 73999.083  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6230157.592 ops/s
# Warmup Iteration   2: 10920482.048 ops/s
# Warmup Iteration   3: 11812370.110 ops/s
# Warmup Iteration   4: 12444848.041 ops/s
# Warmup Iteration   5: 12507361.226 ops/s
# Warmup Iteration   6: 12342829.092 ops/s
# Warmup Iteration   7: 12419896.613 ops/s
# Warmup Iteration   8: 12393122.630 ops/s
# Warmup Iteration   9: 12251540.144 ops/s
# Warmup Iteration  10: 12451867.621 ops/s
# Warmup Iteration  11: 12350936.899 ops/s
# Warmup Iteration  12: 12438327.511 ops/s
# Warmup Iteration  13: 12393821.439 ops/s
# Warmup Iteration  14: 12517213.200 ops/s
# Warmup Iteration  15: 12490860.308 ops/s
# Warmup Iteration  16: 12266190.351 ops/s
# Warmup Iteration  17: 12521294.163 ops/s
# Warmup Iteration  18: 12381108.432 ops/s
# Warmup Iteration  19: 12437656.847 ops/s
# Warmup Iteration  20: 12402659.179 ops/s
# Warmup Iteration  21: 12477259.459 ops/s
# Warmup Iteration  22: 12427952.903 ops/s
# Warmup Iteration  23: 12361402.681 ops/s
# Warmup Iteration  24: 12339277.833 ops/s
# Warmup Iteration  25: 12379880.409 ops/s
# Warmup Iteration  26: 12468103.014 ops/s
# Warmup Iteration  27: 12504200.468 ops/s
# Warmup Iteration  28: 12577319.812 ops/s
# Warmup Iteration  29: 12483860.180 ops/s
# Warmup Iteration  30: 12528744.842 ops/s
Iteration   1: 12454230.772 ops/s
Iteration   2: 12556344.988 ops/s
Iteration   3: 12536074.733 ops/s
Iteration   4: 12532035.734 ops/s
Iteration   5: 12500575.389 ops/s
Iteration   6: 12341392.351 ops/s
Iteration   7: 12450938.826 ops/s
Iteration   8: 12436300.068 ops/s
Iteration   9: 12552319.344 ops/s
Iteration  10: 12335991.942 ops/s
Iteration  11: 12498069.582 ops/s
Iteration  12: 12472044.904 ops/s
Iteration  13: 12537918.225 ops/s
Iteration  14: 12277153.467 ops/s
Iteration  15: 12482045.271 ops/s
Iteration  16: 12524780.728 ops/s
Iteration  17: 12590094.771 ops/s
Iteration  18: 12542174.584 ops/s
Iteration  19: 12385367.955 ops/s
Iteration  20: 12480212.096 ops/s
Iteration  21: 12193034.821 ops/s
Iteration  22: 12489719.537 ops/s
Iteration  23: 12601026.707 ops/s
Iteration  24: 12505958.864 ops/s
Iteration  25: 12559184.242 ops/s
Iteration  26: 12527244.649 ops/s
Iteration  27: 12560128.398 ops/s
Iteration  28: 12554957.012 ops/s
Iteration  29: 12266831.196 ops/s
Iteration  30: 12526801.146 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable":
  12475698.410 ±(99.9%) 67718.306 ops/s [Average]
  (min, avg, max) = (12193034.821, 12475698.410, 12601026.707), stdev = 101357.580
  CI (99.9%): [12407980.105, 12543416.716] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  12475698.410 ± 67718.306  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 528289.757 ops/s
# Warmup Iteration   2: 587320.348 ops/s
# Warmup Iteration   3: 781979.963 ops/s
# Warmup Iteration   4: 782722.720 ops/s
# Warmup Iteration   5: 784275.569 ops/s
# Warmup Iteration   6: 787618.862 ops/s
# Warmup Iteration   7: 783300.016 ops/s
# Warmup Iteration   8: 777951.704 ops/s
# Warmup Iteration   9: 783760.277 ops/s
# Warmup Iteration  10: 732774.055 ops/s
# Warmup Iteration  11: 707061.001 ops/s
# Warmup Iteration  12: 772206.758 ops/s
# Warmup Iteration  13: 772572.624 ops/s
# Warmup Iteration  14: 786695.782 ops/s
# Warmup Iteration  15: 788417.951 ops/s
# Warmup Iteration  16: 784411.915 ops/s
# Warmup Iteration  17: 819610.204 ops/s
# Warmup Iteration  18: 811597.805 ops/s
# Warmup Iteration  19: 818692.185 ops/s
# Warmup Iteration  20: 805067.169 ops/s
# Warmup Iteration  21: 828738.511 ops/s
# Warmup Iteration  22: 820519.346 ops/s
# Warmup Iteration  23: 822982.697 ops/s
# Warmup Iteration  24: 825255.442 ops/s
# Warmup Iteration  25: 815108.752 ops/s
# Warmup Iteration  26: 821552.714 ops/s
# Warmup Iteration  27: 825164.619 ops/s
# Warmup Iteration  28: 816722.935 ops/s
# Warmup Iteration  29: 823395.082 ops/s
# Warmup Iteration  30: 815144.859 ops/s
Iteration   1: 823325.654 ops/s
Iteration   2: 808746.890 ops/s
Iteration   3: 818513.902 ops/s
Iteration   4: 828016.943 ops/s
Iteration   5: 826778.614 ops/s
Iteration   6: 820140.289 ops/s
Iteration   7: 826257.552 ops/s
Iteration   8: 823404.255 ops/s
Iteration   9: 818213.883 ops/s
Iteration  10: 818064.313 ops/s
Iteration  11: 818654.955 ops/s
Iteration  12: 824154.403 ops/s
Iteration  13: 814394.890 ops/s
Iteration  14: 825644.422 ops/s
Iteration  15: 825400.362 ops/s
Iteration  16: 821465.505 ops/s
Iteration  17: 823856.149 ops/s
Iteration  18: 812422.152 ops/s
Iteration  19: 825965.557 ops/s
Iteration  20: 827664.068 ops/s
Iteration  21: 807855.085 ops/s
Iteration  22: 824327.061 ops/s
Iteration  23: 818119.021 ops/s
Iteration  24: 826512.210 ops/s
Iteration  25: 809435.304 ops/s
Iteration  26: 810641.189 ops/s
Iteration  27: 825052.371 ops/s
Iteration  28: 816400.611 ops/s
Iteration  29: 823721.732 ops/s
Iteration  30: 823957.048 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator":
  820570.213 ±(99.9%) 4034.908 ops/s [Average]
  (min, avg, max) = (807855.085, 820570.213, 828016.943), stdev = 6039.261
  CI (99.9%): [816535.305, 824605.121] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator  thrpt   30  820570.213 ± 4034.908  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 524811.644 ops/s
# Warmup Iteration   2: 727411.633 ops/s
# Warmup Iteration   3: 862155.414 ops/s
# Warmup Iteration   4: 861732.929 ops/s
# Warmup Iteration   5: 846776.562 ops/s
# Warmup Iteration   6: 858744.648 ops/s
# Warmup Iteration   7: 776933.946 ops/s
# Warmup Iteration   8: 810177.430 ops/s
# Warmup Iteration   9: 856060.977 ops/s
# Warmup Iteration  10: 852498.304 ops/s
# Warmup Iteration  11: 864847.544 ops/s
# Warmup Iteration  12: 864807.492 ops/s
# Warmup Iteration  13: 850016.113 ops/s
# Warmup Iteration  14: 854965.241 ops/s
# Warmup Iteration  15: 863625.587 ops/s
# Warmup Iteration  16: 859519.019 ops/s
# Warmup Iteration  17: 890208.276 ops/s
# Warmup Iteration  18: 895537.578 ops/s
# Warmup Iteration  19: 906644.003 ops/s
# Warmup Iteration  20: 902454.884 ops/s
# Warmup Iteration  21: 899206.377 ops/s
# Warmup Iteration  22: 901136.281 ops/s
# Warmup Iteration  23: 904043.173 ops/s
# Warmup Iteration  24: 907441.491 ops/s
# Warmup Iteration  25: 905603.177 ops/s
# Warmup Iteration  26: 908355.627 ops/s
# Warmup Iteration  27: 912585.922 ops/s
# Warmup Iteration  28: 901886.379 ops/s
# Warmup Iteration  29: 901942.298 ops/s
# Warmup Iteration  30: 908664.025 ops/s
Iteration   1: 903617.594 ops/s
Iteration   2: 896512.072 ops/s
Iteration   3: 902576.781 ops/s
Iteration   4: 909436.952 ops/s
Iteration   5: 907282.815 ops/s
Iteration   6: 893850.635 ops/s
Iteration   7: 913250.019 ops/s
Iteration   8: 911378.629 ops/s
Iteration   9: 909756.757 ops/s
Iteration  10: 906254.908 ops/s
Iteration  11: 903118.625 ops/s
Iteration  12: 900800.331 ops/s
Iteration  13: 913034.235 ops/s
Iteration  14: 907562.710 ops/s
Iteration  15: 912333.589 ops/s
Iteration  16: 906583.313 ops/s
Iteration  17: 907823.561 ops/s
Iteration  18: 909338.315 ops/s
Iteration  19: 894993.241 ops/s
Iteration  20: 906851.475 ops/s
Iteration  21: 904973.301 ops/s
Iteration  22: 895741.184 ops/s
Iteration  23: 907137.533 ops/s
Iteration  24: 898740.843 ops/s
Iteration  25: 911471.208 ops/s
Iteration  26: 906594.157 ops/s
Iteration  27: 911753.738 ops/s
Iteration  28: 907603.731 ops/s
Iteration  29: 894238.286 ops/s
Iteration  30: 905042.068 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove":
  905321.754 ±(99.9%) 3883.698 ops/s [Average]
  (min, avg, max) = (893850.635, 905321.754, 913250.019), stdev = 5812.937
  CI (99.9%): [901438.055, 909205.452] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  905321.754 ± 3883.698  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 135577.982 ops/s
# Warmup Iteration   2: 236814.997 ops/s
# Warmup Iteration   3: 265394.018 ops/s
# Warmup Iteration   4: 270222.224 ops/s
# Warmup Iteration   5: 267378.966 ops/s
# Warmup Iteration   6: 224972.267 ops/s
# Warmup Iteration   7: 270475.019 ops/s
# Warmup Iteration   8: 270181.621 ops/s
# Warmup Iteration   9: 269092.468 ops/s
# Warmup Iteration  10: 269736.202 ops/s
# Warmup Iteration  11: 270245.777 ops/s
# Warmup Iteration  12: 269043.710 ops/s
# Warmup Iteration  13: 265309.007 ops/s
# Warmup Iteration  14: 269029.347 ops/s
# Warmup Iteration  15: 268084.223 ops/s
# Warmup Iteration  16: 270199.475 ops/s
# Warmup Iteration  17: 280157.293 ops/s
# Warmup Iteration  18: 278747.967 ops/s
# Warmup Iteration  19: 279760.344 ops/s
# Warmup Iteration  20: 278157.733 ops/s
# Warmup Iteration  21: 279840.691 ops/s
# Warmup Iteration  22: 279681.066 ops/s
# Warmup Iteration  23: 277048.629 ops/s
# Warmup Iteration  24: 276326.632 ops/s
# Warmup Iteration  25: 279240.425 ops/s
# Warmup Iteration  26: 276516.295 ops/s
# Warmup Iteration  27: 278632.534 ops/s
# Warmup Iteration  28: 274044.918 ops/s
# Warmup Iteration  29: 278624.396 ops/s
# Warmup Iteration  30: 277149.965 ops/s
Iteration   1: 280042.302 ops/s
Iteration   2: 279565.818 ops/s
Iteration   3: 278160.565 ops/s
Iteration   4: 279215.455 ops/s
Iteration   5: 279053.637 ops/s
Iteration   6: 280139.850 ops/s
Iteration   7: 278613.797 ops/s
Iteration   8: 273986.533 ops/s
Iteration   9: 276257.382 ops/s
Iteration  10: 280009.748 ops/s
Iteration  11: 279072.508 ops/s
Iteration  12: 276304.093 ops/s
Iteration  13: 277840.601 ops/s
Iteration  14: 280860.735 ops/s
Iteration  15: 281070.084 ops/s
Iteration  16: 279455.633 ops/s
Iteration  17: 280629.282 ops/s
Iteration  18: 280832.677 ops/s
Iteration  19: 279964.115 ops/s
Iteration  20: 277216.916 ops/s
Iteration  21: 279875.895 ops/s
Iteration  22: 274343.851 ops/s
Iteration  23: 280812.813 ops/s
Iteration  24: 279460.232 ops/s
Iteration  25: 278436.364 ops/s
Iteration  26: 280952.245 ops/s
Iteration  27: 279769.581 ops/s
Iteration  28: 280676.994 ops/s
Iteration  29: 279410.458 ops/s
Iteration  30: 280522.913 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_chunk":
  279085.103 ±(99.9%) 1238.972 ops/s [Average]
  (min, avg, max) = (273986.533, 279085.103, 281070.084), stdev = 1854.436
  CI (99.9%): [277846.130, 280324.075] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_chunk  thrpt   30  279085.103 ± 1238.972  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3896292.918 ops/s
# Warmup Iteration   2: 6815053.096 ops/s
# Warmup Iteration   3: 8034205.957 ops/s
# Warmup Iteration   4: 8159854.284 ops/s
# Warmup Iteration   5: 8137732.235 ops/s
# Warmup Iteration   6: 8102078.240 ops/s
# Warmup Iteration   7: 8065020.731 ops/s
# Warmup Iteration   8: 8142284.654 ops/s
# Warmup Iteration   9: 8117662.964 ops/s
# Warmup Iteration  10: 8109196.298 ops/s
# Warmup Iteration  11: 8101552.949 ops/s
# Warmup Iteration  12: 8136036.977 ops/s
# Warmup Iteration  13: 8130945.823 ops/s
# Warmup Iteration  14: 8155455.000 ops/s
# Warmup Iteration  15: 8145618.397 ops/s
# Warmup Iteration  16: 8130644.159 ops/s
# Warmup Iteration  17: 8028244.894 ops/s
# Warmup Iteration  18: 8044673.791 ops/s
# Warmup Iteration  19: 8105881.755 ops/s
# Warmup Iteration  20: 8109846.348 ops/s
# Warmup Iteration  21: 8140248.842 ops/s
# Warmup Iteration  22: 8126112.049 ops/s
# Warmup Iteration  23: 8100065.084 ops/s
# Warmup Iteration  24: 8055269.982 ops/s
# Warmup Iteration  25: 8057601.174 ops/s
# Warmup Iteration  26: 8150271.248 ops/s
# Warmup Iteration  27: 8048798.609 ops/s
# Warmup Iteration  28: 8047960.296 ops/s
# Warmup Iteration  29: 8105919.662 ops/s
# Warmup Iteration  30: 8092939.864 ops/s
Iteration   1: 8116887.656 ops/s
Iteration   2: 8174026.701 ops/s
Iteration   3: 8092160.724 ops/s
Iteration   4: 7851944.509 ops/s
Iteration   5: 8101743.671 ops/s
Iteration   6: 8159584.718 ops/s
Iteration   7: 8143876.611 ops/s
Iteration   8: 8120582.419 ops/s
Iteration   9: 8103170.472 ops/s
Iteration  10: 8049607.424 ops/s
Iteration  11: 8072659.566 ops/s
Iteration  12: 8144946.788 ops/s
Iteration  13: 8114698.307 ops/s
Iteration  14: 8135155.137 ops/s
Iteration  15: 8018632.017 ops/s
Iteration  16: 8081231.840 ops/s
Iteration  17: 8113730.620 ops/s
Iteration  18: 8085107.855 ops/s
Iteration  19: 8102811.310 ops/s
Iteration  20: 8089313.637 ops/s
Iteration  21: 8159590.464 ops/s
Iteration  22: 8133495.459 ops/s
Iteration  23: 8152130.312 ops/s
Iteration  24: 8120785.533 ops/s
Iteration  25: 8122417.626 ops/s
Iteration  26: 8098612.051 ops/s
Iteration  27: 8174198.728 ops/s
Iteration  28: 8161365.809 ops/s
Iteration  29: 8180839.459 ops/s
Iteration  30: 8137892.651 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_clear":
  8110440.002 ±(99.9%) 41116.819 ops/s [Average]
  (min, avg, max) = (7851944.509, 8110440.002, 8180839.459), stdev = 61541.723
  CI (99.9%): [8069323.184, 8151556.821] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_clear  thrpt   30  8110440.002 ± 41116.819  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 681152.328 ops/s
# Warmup Iteration   2: 1846968.535 ops/s
# Warmup Iteration   3: 1824326.316 ops/s
# Warmup Iteration   4: 1523371.901 ops/s
# Warmup Iteration   5: 1861643.623 ops/s
# Warmup Iteration   6: 1865608.433 ops/s
# Warmup Iteration   7: 1867876.443 ops/s
# Warmup Iteration   8: 1862013.284 ops/s
# Warmup Iteration   9: 1865927.194 ops/s
# Warmup Iteration  10: 1848484.017 ops/s
# Warmup Iteration  11: 1844407.348 ops/s
# Warmup Iteration  12: 1861368.815 ops/s
# Warmup Iteration  13: 1859433.094 ops/s
# Warmup Iteration  14: 1849809.961 ops/s
# Warmup Iteration  15: 1860089.322 ops/s
# Warmup Iteration  16: 1860582.550 ops/s
# Warmup Iteration  17: 1814464.979 ops/s
# Warmup Iteration  18: 1853261.703 ops/s
# Warmup Iteration  19: 1849000.730 ops/s
# Warmup Iteration  20: 1842831.282 ops/s
# Warmup Iteration  21: 1851406.291 ops/s
# Warmup Iteration  22: 1824641.297 ops/s
# Warmup Iteration  23: 1849478.095 ops/s
# Warmup Iteration  24: 1847330.464 ops/s
# Warmup Iteration  25: 1843874.582 ops/s
# Warmup Iteration  26: 1847451.275 ops/s
# Warmup Iteration  27: 1824778.442 ops/s
# Warmup Iteration  28: 1817788.203 ops/s
# Warmup Iteration  29: 1825501.272 ops/s
# Warmup Iteration  30: 1835666.313 ops/s
Iteration   1: 1797766.779 ops/s
Iteration   2: 1848664.956 ops/s
Iteration   3: 1856283.819 ops/s
Iteration   4: 1828823.782 ops/s
Iteration   5: 1831560.409 ops/s
Iteration   6: 1838917.281 ops/s
Iteration   7: 1826385.360 ops/s
Iteration   8: 1843623.508 ops/s
Iteration   9: 1774445.942 ops/s
Iteration  10: 1834788.861 ops/s
Iteration  11: 1849581.452 ops/s
Iteration  12: 1853273.723 ops/s
Iteration  13: 1847703.035 ops/s
Iteration  14: 1856097.349 ops/s
Iteration  15: 1849271.508 ops/s
Iteration  16: 1854840.545 ops/s
Iteration  17: 1826444.572 ops/s
Iteration  18: 1821727.872 ops/s
Iteration  19: 1838043.259 ops/s
Iteration  20: 1839844.892 ops/s
Iteration  21: 1824828.129 ops/s
Iteration  22: 1815680.256 ops/s
Iteration  23: 1818168.801 ops/s
Iteration  24: 1858013.081 ops/s
Iteration  25: 1854357.825 ops/s
Iteration  26: 1854809.116 ops/s
Iteration  27: 1849284.444 ops/s
Iteration  28: 1856499.228 ops/s
Iteration  29: 1856785.112 ops/s
Iteration  30: 1845449.809 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_collect":
  1838398.824 ±(99.9%) 12952.472 ops/s [Average]
  (min, avg, max) = (1774445.942, 1838398.824, 1858013.081), stdev = 19386.652
  CI (99.9%): [1825446.352, 1851351.295] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_collect  thrpt   30  1838398.824 ± 12952.472  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2586104.082 ops/s
# Warmup Iteration   2: 4732932.993 ops/s
# Warmup Iteration   3: 5424636.430 ops/s
# Warmup Iteration   4: 5564847.155 ops/s
# Warmup Iteration   5: 5567056.578 ops/s
# Warmup Iteration   6: 5528507.409 ops/s
# Warmup Iteration   7: 5565223.555 ops/s
# Warmup Iteration   8: 5510798.374 ops/s
# Warmup Iteration   9: 5530817.357 ops/s
# Warmup Iteration  10: 5524169.142 ops/s
# Warmup Iteration  11: 5580685.676 ops/s
# Warmup Iteration  12: 5595472.252 ops/s
# Warmup Iteration  13: 5561259.867 ops/s
# Warmup Iteration  14: 5559212.662 ops/s
# Warmup Iteration  15: 5577248.377 ops/s
# Warmup Iteration  16: 5583574.264 ops/s
# Warmup Iteration  17: 5439701.278 ops/s
# Warmup Iteration  18: 5394551.737 ops/s
# Warmup Iteration  19: 5463200.603 ops/s
# Warmup Iteration  20: 5413556.069 ops/s
# Warmup Iteration  21: 5483127.423 ops/s
# Warmup Iteration  22: 5453571.993 ops/s
# Warmup Iteration  23: 5478069.181 ops/s
# Warmup Iteration  24: 5481085.411 ops/s
# Warmup Iteration  25: 5460899.199 ops/s
# Warmup Iteration  26: 5497095.915 ops/s
# Warmup Iteration  27: 5386442.063 ops/s
# Warmup Iteration  28: 5478925.416 ops/s
# Warmup Iteration  29: 5465301.522 ops/s
# Warmup Iteration  30: 5466291.077 ops/s
Iteration   1: 5409198.401 ops/s
Iteration   2: 5466806.414 ops/s
Iteration   3: 5485974.763 ops/s
Iteration   4: 5379821.743 ops/s
Iteration   5: 5437343.218 ops/s
Iteration   6: 5361610.854 ops/s
Iteration   7: 5501299.587 ops/s
Iteration   8: 5468351.667 ops/s
Iteration   9: 5451124.570 ops/s
Iteration  10: 5490705.595 ops/s
Iteration  11: 5499040.341 ops/s
Iteration  12: 5377417.192 ops/s
Iteration  13: 5441640.227 ops/s
Iteration  14: 5492266.455 ops/s
Iteration  15: 5456323.335 ops/s
Iteration  16: 5493909.438 ops/s
Iteration  17: 5479516.376 ops/s
Iteration  18: 5435839.731 ops/s
Iteration  19: 5517184.269 ops/s
Iteration  20: 5460709.857 ops/s
Iteration  21: 5487823.749 ops/s
Iteration  22: 5421389.773 ops/s
Iteration  23: 5502206.287 ops/s
Iteration  24: 5504952.318 ops/s
Iteration  25: 5494322.636 ops/s
Iteration  26: 5466962.811 ops/s
Iteration  27: 5453242.034 ops/s
Iteration  28: 5458766.381 ops/s
Iteration  29: 5383772.963 ops/s
Iteration  30: 5501903.189 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_contains":
  5459380.873 ±(99.9%) 28491.213 ops/s [Average]
  (min, avg, max) = (5361610.854, 5459380.873, 5517184.269), stdev = 42644.310
  CI (99.9%): [5430889.659, 5487872.086] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_contains  thrpt   30  5459380.873 ± 28491.213  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5136167.790 ops/s
# Warmup Iteration   2: 10003123.766 ops/s
# Warmup Iteration   3: 9281869.570 ops/s
# Warmup Iteration   4: 10501678.807 ops/s
# Warmup Iteration   5: 10518304.604 ops/s
# Warmup Iteration   6: 10490593.842 ops/s
# Warmup Iteration   7: 10527129.833 ops/s
# Warmup Iteration   8: 10415525.489 ops/s
# Warmup Iteration   9: 10479441.493 ops/s
# Warmup Iteration  10: 10419561.940 ops/s
# Warmup Iteration  11: 10480107.443 ops/s
# Warmup Iteration  12: 10501795.705 ops/s
# Warmup Iteration  13: 10421163.437 ops/s
# Warmup Iteration  14: 10417248.275 ops/s
# Warmup Iteration  15: 10526210.787 ops/s
# Warmup Iteration  16: 10431872.123 ops/s
# Warmup Iteration  17: 10508288.338 ops/s
# Warmup Iteration  18: 10471908.050 ops/s
# Warmup Iteration  19: 10435879.738 ops/s
# Warmup Iteration  20: 10383194.818 ops/s
# Warmup Iteration  21: 10489077.848 ops/s
# Warmup Iteration  22: 10495082.367 ops/s
# Warmup Iteration  23: 10515103.061 ops/s
# Warmup Iteration  24: 10357188.129 ops/s
# Warmup Iteration  25: 10529798.413 ops/s
# Warmup Iteration  26: 10429749.779 ops/s
# Warmup Iteration  27: 10458561.205 ops/s
# Warmup Iteration  28: 10407268.586 ops/s
# Warmup Iteration  29: 10439340.900 ops/s
# Warmup Iteration  30: 10518063.561 ops/s
Iteration   1: 10397836.014 ops/s
Iteration   2: 10493927.736 ops/s
Iteration   3: 10481072.113 ops/s
Iteration   4: 10301427.140 ops/s
Iteration   5: 10454114.366 ops/s
Iteration   6: 10334470.310 ops/s
Iteration   7: 10284981.053 ops/s
Iteration   8: 10360180.249 ops/s
Iteration   9: 10233927.272 ops/s
Iteration  10: 10392210.298 ops/s
Iteration  11: 10400460.802 ops/s
Iteration  12: 10424433.269 ops/s
Iteration  13: 10486184.390 ops/s
Iteration  14: 10454526.511 ops/s
Iteration  15: 10448425.134 ops/s
Iteration  16: 10472386.652 ops/s
Iteration  17: 10405714.604 ops/s
Iteration  18: 10389106.300 ops/s
Iteration  19: 10410734.554 ops/s
Iteration  20: 10205602.539 ops/s
Iteration  21: 10383748.363 ops/s
Iteration  22: 10445632.252 ops/s
Iteration  23: 10384271.762 ops/s
Iteration  24: 10332129.767 ops/s
Iteration  25: 10417078.902 ops/s
Iteration  26: 10385449.884 ops/s
Iteration  27: 10336691.324 ops/s
Iteration  28: 10412461.199 ops/s
Iteration  29: 10402276.173 ops/s
Iteration  30: 10412556.223 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray":
  10391467.239 ±(99.9%) 46632.764 ops/s [Average]
  (min, avg, max) = (10205602.539, 10391467.239, 10493927.736), stdev = 69797.731
  CI (99.9%): [10344834.475, 10438100.002] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray  thrpt   30  10391467.239 ± 46632.764  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3627666.362 ops/s
# Warmup Iteration   2: 6885949.450 ops/s
# Warmup Iteration   3: 7727498.139 ops/s
# Warmup Iteration   4: 8043806.412 ops/s
# Warmup Iteration   5: 7851205.550 ops/s
# Warmup Iteration   6: 8035965.381 ops/s
# Warmup Iteration   7: 8078167.673 ops/s
# Warmup Iteration   8: 8023493.693 ops/s
# Warmup Iteration   9: 7921848.270 ops/s
# Warmup Iteration  10: 7939473.783 ops/s
# Warmup Iteration  11: 8008411.356 ops/s
# Warmup Iteration  12: 7995606.093 ops/s
# Warmup Iteration  13: 8006480.122 ops/s
# Warmup Iteration  14: 7967600.234 ops/s
# Warmup Iteration  15: 7981057.132 ops/s
# Warmup Iteration  16: 7897655.716 ops/s
# Warmup Iteration  17: 8005393.978 ops/s
# Warmup Iteration  18: 8120994.462 ops/s
# Warmup Iteration  19: 8107132.526 ops/s
# Warmup Iteration  20: 8109779.824 ops/s
# Warmup Iteration  21: 8111334.918 ops/s
# Warmup Iteration  22: 8095818.308 ops/s
# Warmup Iteration  23: 8052107.982 ops/s
# Warmup Iteration  24: 8015183.873 ops/s
# Warmup Iteration  25: 8066495.721 ops/s
# Warmup Iteration  26: 7999743.912 ops/s
# Warmup Iteration  27: 8066120.164 ops/s
# Warmup Iteration  28: 8078753.781 ops/s
# Warmup Iteration  29: 8020624.209 ops/s
# Warmup Iteration  30: 8071938.998 ops/s
Iteration   1: 8056368.321 ops/s
Iteration   2: 8075085.403 ops/s
Iteration   3: 8048430.657 ops/s
Iteration   4: 7983187.068 ops/s
Iteration   5: 8133029.165 ops/s
Iteration   6: 8143623.816 ops/s
Iteration   7: 8031631.317 ops/s
Iteration   8: 8025197.828 ops/s
Iteration   9: 7940370.916 ops/s
Iteration  10: 8096776.347 ops/s
Iteration  11: 8090734.368 ops/s
Iteration  12: 8121947.487 ops/s
Iteration  13: 8075418.635 ops/s
Iteration  14: 8138074.396 ops/s
Iteration  15: 7880457.703 ops/s
Iteration  16: 8101954.226 ops/s
Iteration  17: 8102427.544 ops/s
Iteration  18: 7946629.073 ops/s
Iteration  19: 8074284.130 ops/s
Iteration  20: 8139375.273 ops/s
Iteration  21: 8101147.339 ops/s
Iteration  22: 7891575.091 ops/s
Iteration  23: 8139953.610 ops/s
Iteration  24: 8141398.212 ops/s
Iteration  25: 8134415.090 ops/s
Iteration  26: 7960232.808 ops/s
Iteration  27: 8134369.324 ops/s
Iteration  28: 8096620.635 ops/s
Iteration  29: 8117701.332 ops/s
Iteration  30: 8084652.278 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable":
  8066902.313 ±(99.9%) 51228.422 ops/s [Average]
  (min, avg, max) = (7880457.703, 8066902.313, 8143623.816), stdev = 76676.297
  CI (99.9%): [8015673.891, 8118130.736] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable  thrpt   30  8066902.313 ± 51228.422  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2788959.449 ops/s
# Warmup Iteration   2: 5603368.486 ops/s
# Warmup Iteration   3: 5576944.753 ops/s
# Warmup Iteration   4: 6089189.317 ops/s
# Warmup Iteration   5: 6199872.425 ops/s
# Warmup Iteration   6: 6173638.538 ops/s
# Warmup Iteration   7: 6092153.719 ops/s
# Warmup Iteration   8: 6166741.959 ops/s
# Warmup Iteration   9: 6198322.768 ops/s
# Warmup Iteration  10: 6160078.146 ops/s
# Warmup Iteration  11: 6146691.450 ops/s
# Warmup Iteration  12: 6148612.801 ops/s
# Warmup Iteration  13: 6184283.890 ops/s
# Warmup Iteration  14: 6165534.932 ops/s
# Warmup Iteration  15: 6219047.634 ops/s
# Warmup Iteration  16: 6084980.707 ops/s
# Warmup Iteration  17: 6174115.287 ops/s
# Warmup Iteration  18: 6157255.269 ops/s
# Warmup Iteration  19: 6163047.213 ops/s
# Warmup Iteration  20: 6174342.206 ops/s
# Warmup Iteration  21: 6194049.511 ops/s
# Warmup Iteration  22: 6180791.216 ops/s
# Warmup Iteration  23: 6109608.232 ops/s
# Warmup Iteration  24: 6139854.418 ops/s
# Warmup Iteration  25: 6174203.033 ops/s
# Warmup Iteration  26: 6184168.651 ops/s
# Warmup Iteration  27: 6163551.480 ops/s
# Warmup Iteration  28: 6175156.278 ops/s
# Warmup Iteration  29: 6049998.413 ops/s
# Warmup Iteration  30: 6044178.388 ops/s
Iteration   1: 6163026.058 ops/s
Iteration   2: 6180196.696 ops/s
Iteration   3: 6131088.726 ops/s
Iteration   4: 6037694.573 ops/s
Iteration   5: 6058245.114 ops/s
Iteration   6: 6177715.470 ops/s
Iteration   7: 6174309.270 ops/s
Iteration   8: 6176577.369 ops/s
Iteration   9: 6175129.263 ops/s
Iteration  10: 6177707.433 ops/s
Iteration  11: 6183267.268 ops/s
Iteration  12: 6223150.750 ops/s
Iteration  13: 6130779.137 ops/s
Iteration  14: 6172071.219 ops/s
Iteration  15: 6171567.857 ops/s
Iteration  16: 6188344.647 ops/s
Iteration  17: 6024547.061 ops/s
Iteration  18: 6083798.927 ops/s
Iteration  19: 6195422.517 ops/s
Iteration  20: 6028539.223 ops/s
Iteration  21: 6120276.352 ops/s
Iteration  22: 6080310.393 ops/s
Iteration  23: 6182273.355 ops/s
Iteration  24: 6193202.936 ops/s
Iteration  25: 6153006.242 ops/s
Iteration  26: 6103264.324 ops/s
Iteration  27: 6155394.486 ops/s
Iteration  28: 6165071.545 ops/s
Iteration  29: 6189574.849 ops/s
Iteration  30: 6162955.138 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray":
  6145283.607 ±(99.9%) 36018.828 ops/s [Average]
  (min, avg, max) = (6024547.061, 6145283.607, 6223150.750), stdev = 53911.290
  CI (99.9%): [6109264.778, 6181302.435] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray  thrpt   30  6145283.607 ± 36018.828  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 544753.794 ops/s
# Warmup Iteration   2: 984662.612 ops/s
# Warmup Iteration   3: 1050786.825 ops/s
# Warmup Iteration   4: 1075497.347 ops/s
# Warmup Iteration   5: 995730.321 ops/s
# Warmup Iteration   6: 969974.942 ops/s
# Warmup Iteration   7: 1073470.437 ops/s
# Warmup Iteration   8: 1081152.216 ops/s
# Warmup Iteration   9: 1074639.543 ops/s
# Warmup Iteration  10: 1068087.880 ops/s
# Warmup Iteration  11: 1070806.653 ops/s
# Warmup Iteration  12: 1082309.482 ops/s
# Warmup Iteration  13: 1076850.083 ops/s
# Warmup Iteration  14: 1058882.006 ops/s
# Warmup Iteration  15: 1077438.919 ops/s
# Warmup Iteration  16: 1076827.758 ops/s
# Warmup Iteration  17: 1052226.092 ops/s
# Warmup Iteration  18: 1042488.104 ops/s
# Warmup Iteration  19: 1045246.044 ops/s
# Warmup Iteration  20: 1056259.631 ops/s
# Warmup Iteration  21: 1042914.631 ops/s
# Warmup Iteration  22: 1042161.555 ops/s
# Warmup Iteration  23: 1042014.650 ops/s
# Warmup Iteration  24: 1050158.426 ops/s
# Warmup Iteration  25: 1037549.080 ops/s
# Warmup Iteration  26: 1039924.426 ops/s
# Warmup Iteration  27: 1051028.150 ops/s
# Warmup Iteration  28: 1052220.913 ops/s
# Warmup Iteration  29: 1026732.607 ops/s
# Warmup Iteration  30: 1045423.996 ops/s
Iteration   1: 1046171.072 ops/s
Iteration   2: 1050276.822 ops/s
Iteration   3: 1030298.042 ops/s
Iteration   4: 1055494.166 ops/s
Iteration   5: 1055014.509 ops/s
Iteration   6: 1050640.346 ops/s
Iteration   7: 1051816.839 ops/s
Iteration   8: 1050801.381 ops/s
Iteration   9: 1032667.062 ops/s
Iteration  10: 1049454.176 ops/s
Iteration  11: 1041262.037 ops/s
Iteration  12: 1045833.349 ops/s
Iteration  13: 1055356.320 ops/s
Iteration  14: 1054081.365 ops/s
Iteration  15: 1042595.424 ops/s
Iteration  16: 1047277.154 ops/s
Iteration  17: 1054472.330 ops/s
Iteration  18: 1045487.679 ops/s
Iteration  19: 1054255.347 ops/s
Iteration  20: 1054100.242 ops/s
Iteration  21: 1055848.642 ops/s
Iteration  22: 1054566.154 ops/s
Iteration  23: 1053885.787 ops/s
Iteration  24: 1045414.203 ops/s
Iteration  25: 1055310.469 ops/s
Iteration  26: 1033814.032 ops/s
Iteration  27: 1028040.526 ops/s
Iteration  28: 1052870.154 ops/s
Iteration  29: 1055100.287 ops/s
Iteration  30: 1050870.569 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable":
  1048435.883 ±(99.9%) 5358.001 ops/s [Average]
  (min, avg, max) = (1028040.526, 1048435.883, 1055848.642), stdev = 8019.605
  CI (99.9%): [1043077.882, 1053793.884] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1048435.883 ± 5358.001  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2820836.280 ops/s
# Warmup Iteration   2: 5610741.531 ops/s
# Warmup Iteration   3: 5771978.458 ops/s
# Warmup Iteration   4: 6267957.856 ops/s
# Warmup Iteration   5: 6326288.254 ops/s
# Warmup Iteration   6: 6292310.763 ops/s
# Warmup Iteration   7: 6272925.327 ops/s
# Warmup Iteration   8: 6276296.202 ops/s
# Warmup Iteration   9: 6250215.846 ops/s
# Warmup Iteration  10: 6308710.946 ops/s
# Warmup Iteration  11: 6329007.399 ops/s
# Warmup Iteration  12: 6264225.086 ops/s
# Warmup Iteration  13: 6332689.028 ops/s
# Warmup Iteration  14: 6306137.908 ops/s
# Warmup Iteration  15: 6233718.593 ops/s
# Warmup Iteration  16: 6291820.233 ops/s
# Warmup Iteration  17: 6271439.681 ops/s
# Warmup Iteration  18: 6336809.980 ops/s
# Warmup Iteration  19: 6317896.312 ops/s
# Warmup Iteration  20: 6325124.589 ops/s
# Warmup Iteration  21: 6317980.972 ops/s
# Warmup Iteration  22: 6335665.480 ops/s
# Warmup Iteration  23: 6272494.297 ops/s
# Warmup Iteration  24: 6332024.085 ops/s
# Warmup Iteration  25: 6338475.031 ops/s
# Warmup Iteration  26: 6264997.873 ops/s
# Warmup Iteration  27: 6288265.885 ops/s
# Warmup Iteration  28: 6326156.166 ops/s
# Warmup Iteration  29: 6240083.633 ops/s
# Warmup Iteration  30: 6261780.367 ops/s
Iteration   1: 6188397.789 ops/s
Iteration   2: 6255319.007 ops/s
Iteration   3: 6258972.416 ops/s
Iteration   4: 6312053.196 ops/s
Iteration   5: 6341840.343 ops/s
Iteration   6: 6287228.152 ops/s
Iteration   7: 6314141.043 ops/s
Iteration   8: 6336265.295 ops/s
Iteration   9: 6342849.889 ops/s
Iteration  10: 6325943.386 ops/s
Iteration  11: 6298644.496 ops/s
Iteration  12: 6345806.764 ops/s
Iteration  13: 6321066.229 ops/s
Iteration  14: 6339312.114 ops/s
Iteration  15: 6238795.804 ops/s
Iteration  16: 6263306.240 ops/s
Iteration  17: 6313655.644 ops/s
Iteration  18: 6239232.184 ops/s
Iteration  19: 6285772.184 ops/s
Iteration  20: 6120746.750 ops/s
Iteration  21: 6261479.824 ops/s
Iteration  22: 6251094.590 ops/s
Iteration  23: 6303719.010 ops/s
Iteration  24: 6354303.105 ops/s
Iteration  25: 6329478.300 ops/s
Iteration  26: 6302722.536 ops/s
Iteration  27: 6329425.456 ops/s
Iteration  28: 6307724.133 ops/s
Iteration  29: 6292285.617 ops/s
Iteration  30: 6294274.048 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray":
  6291861.851 ±(99.9%) 33831.132 ops/s [Average]
  (min, avg, max) = (6120746.750, 6291861.851, 6354303.105), stdev = 50636.850
  CI (99.9%): [6258030.719, 6325692.983] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray  thrpt   30  6291861.851 ± 33831.132  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 517734.658 ops/s
# Warmup Iteration   2: 912641.028 ops/s
# Warmup Iteration   3: 1009987.301 ops/s
# Warmup Iteration   4: 1010892.136 ops/s
# Warmup Iteration   5: 992222.549 ops/s
# Warmup Iteration   6: 858726.954 ops/s
# Warmup Iteration   7: 1006432.942 ops/s
# Warmup Iteration   8: 1005935.509 ops/s
# Warmup Iteration   9: 1005074.176 ops/s
# Warmup Iteration  10: 1015129.757 ops/s
# Warmup Iteration  11: 1003379.792 ops/s
# Warmup Iteration  12: 1007833.899 ops/s
# Warmup Iteration  13: 1009532.640 ops/s
# Warmup Iteration  14: 1005542.267 ops/s
# Warmup Iteration  15: 1015263.283 ops/s
# Warmup Iteration  16: 1007076.292 ops/s
# Warmup Iteration  17: 982935.840 ops/s
# Warmup Iteration  18: 966138.983 ops/s
# Warmup Iteration  19: 987070.113 ops/s
# Warmup Iteration  20: 977542.078 ops/s
# Warmup Iteration  21: 970280.819 ops/s
# Warmup Iteration  22: 977183.645 ops/s
# Warmup Iteration  23: 978580.382 ops/s
# Warmup Iteration  24: 977016.369 ops/s
# Warmup Iteration  25: 972421.007 ops/s
# Warmup Iteration  26: 988007.717 ops/s
# Warmup Iteration  27: 974313.956 ops/s
# Warmup Iteration  28: 971323.638 ops/s
# Warmup Iteration  29: 982935.203 ops/s
# Warmup Iteration  30: 980846.040 ops/s
Iteration   1: 978528.828 ops/s
Iteration   2: 989082.344 ops/s
Iteration   3: 978499.158 ops/s
Iteration   4: 973357.372 ops/s
Iteration   5: 979623.286 ops/s
Iteration   6: 979773.970 ops/s
Iteration   7: 988485.424 ops/s
Iteration   8: 983602.090 ops/s
Iteration   9: 993122.643 ops/s
Iteration  10: 983442.643 ops/s
Iteration  11: 969111.854 ops/s
Iteration  12: 985996.062 ops/s
Iteration  13: 985531.681 ops/s
Iteration  14: 986869.343 ops/s
Iteration  15: 988307.558 ops/s
Iteration  16: 986523.217 ops/s
Iteration  17: 985053.016 ops/s
Iteration  18: 971632.661 ops/s
Iteration  19: 990635.286 ops/s
Iteration  20: 988337.688 ops/s
Iteration  21: 983047.999 ops/s
Iteration  22: 988436.173 ops/s
Iteration  23: 964251.457 ops/s
Iteration  24: 955418.007 ops/s
Iteration  25: 980827.251 ops/s
Iteration  26: 989201.848 ops/s
Iteration  27: 961248.706 ops/s
Iteration  28: 965942.386 ops/s
Iteration  29: 982097.359 ops/s
Iteration  30: 964652.650 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable":
  980021.332 ±(99.9%) 6599.478 ops/s [Average]
  (min, avg, max) = (955418.007, 980021.332, 993122.643), stdev = 9877.788
  CI (99.9%): [973421.854, 986620.810] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  980021.332 ± 6599.478  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1117307.472 ops/s
# Warmup Iteration   2: 2829397.721 ops/s
# Warmup Iteration   3: 2821970.291 ops/s
# Warmup Iteration   4: 2311453.529 ops/s
# Warmup Iteration   5: 2821743.966 ops/s
# Warmup Iteration   6: 2784669.675 ops/s
# Warmup Iteration   7: 2814451.160 ops/s
# Warmup Iteration   8: 2806657.176 ops/s
# Warmup Iteration   9: 2765477.674 ops/s
# Warmup Iteration  10: 2790502.808 ops/s
# Warmup Iteration  11: 2823649.265 ops/s
# Warmup Iteration  12: 2787195.397 ops/s
# Warmup Iteration  13: 2808254.328 ops/s
# Warmup Iteration  14: 2795580.670 ops/s
# Warmup Iteration  15: 2820895.345 ops/s
# Warmup Iteration  16: 2800899.764 ops/s
# Warmup Iteration  17: 2795691.820 ops/s
# Warmup Iteration  18: 2811855.022 ops/s
# Warmup Iteration  19: 2819615.095 ops/s
# Warmup Iteration  20: 2814490.330 ops/s
# Warmup Iteration  21: 2807251.765 ops/s
# Warmup Iteration  22: 2786670.827 ops/s
# Warmup Iteration  23: 2799029.494 ops/s
# Warmup Iteration  24: 2804495.738 ops/s
# Warmup Iteration  25: 2793360.513 ops/s
# Warmup Iteration  26: 2824512.324 ops/s
# Warmup Iteration  27: 2813964.108 ops/s
# Warmup Iteration  28: 2814641.426 ops/s
# Warmup Iteration  29: 2796005.499 ops/s
# Warmup Iteration  30: 2812592.627 ops/s
Iteration   1: 2795147.168 ops/s
Iteration   2: 2796034.956 ops/s
Iteration   3: 2776025.047 ops/s
Iteration   4: 2812260.851 ops/s
Iteration   5: 2807305.184 ops/s
Iteration   6: 2762479.389 ops/s
Iteration   7: 2796536.271 ops/s
Iteration   8: 2815050.623 ops/s
Iteration   9: 2820245.109 ops/s
Iteration  10: 2824945.170 ops/s
Iteration  11: 2797682.232 ops/s
Iteration  12: 2822784.290 ops/s
Iteration  13: 2809263.509 ops/s
Iteration  14: 2822769.226 ops/s
Iteration  15: 2835185.420 ops/s
Iteration  16: 2801656.445 ops/s
Iteration  17: 2814401.554 ops/s
Iteration  18: 2818410.311 ops/s
Iteration  19: 2818060.424 ops/s
Iteration  20: 2809394.610 ops/s
Iteration  21: 2801773.821 ops/s
Iteration  22: 2822308.484 ops/s
Iteration  23: 2822275.039 ops/s
Iteration  24: 2799884.515 ops/s
Iteration  25: 2829648.180 ops/s
Iteration  26: 2826320.457 ops/s
Iteration  27: 2818327.405 ops/s
Iteration  28: 2819442.653 ops/s
Iteration  29: 2799971.273 ops/s
Iteration  30: 2768601.163 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_count":
  2808806.359 ±(99.9%) 11617.533 ops/s [Average]
  (min, avg, max) = (2762479.389, 2808806.359, 2835185.420), stdev = 17388.578
  CI (99.9%): [2797188.826, 2820423.892] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_count  thrpt   30  2808806.359 ± 11617.533  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2604041.648 ops/s
# Warmup Iteration   2: 6022107.061 ops/s
# Warmup Iteration   3: 4851030.652 ops/s
# Warmup Iteration   4: 5836337.360 ops/s
# Warmup Iteration   5: 5787161.524 ops/s
# Warmup Iteration   6: 5885213.467 ops/s
# Warmup Iteration   7: 5870142.780 ops/s
# Warmup Iteration   8: 5846871.749 ops/s
# Warmup Iteration   9: 5774022.542 ops/s
# Warmup Iteration  10: 5885126.340 ops/s
# Warmup Iteration  11: 5815846.584 ops/s
# Warmup Iteration  12: 5796144.360 ops/s
# Warmup Iteration  13: 5869875.820 ops/s
# Warmup Iteration  14: 5858661.906 ops/s
# Warmup Iteration  15: 5870440.307 ops/s
# Warmup Iteration  16: 5793157.826 ops/s
# Warmup Iteration  17: 5827412.730 ops/s
# Warmup Iteration  18: 5862329.490 ops/s
# Warmup Iteration  19: 5899613.711 ops/s
# Warmup Iteration  20: 5854282.035 ops/s
# Warmup Iteration  21: 5864171.738 ops/s
# Warmup Iteration  22: 5857030.989 ops/s
# Warmup Iteration  23: 5797379.483 ops/s
# Warmup Iteration  24: 5827748.431 ops/s
# Warmup Iteration  25: 5863840.221 ops/s
# Warmup Iteration  26: 5861402.597 ops/s
# Warmup Iteration  27: 5893385.454 ops/s
# Warmup Iteration  28: 5863187.034 ops/s
# Warmup Iteration  29: 5881440.117 ops/s
# Warmup Iteration  30: 5866331.936 ops/s
Iteration   1: 5894656.737 ops/s
Iteration   2: 5871719.407 ops/s
Iteration   3: 5899798.478 ops/s
Iteration   4: 5793424.094 ops/s
Iteration   5: 5924559.166 ops/s
Iteration   6: 5897612.097 ops/s
Iteration   7: 5870674.485 ops/s
Iteration   8: 5733981.394 ops/s
Iteration   9: 5853571.591 ops/s
Iteration  10: 5844909.581 ops/s
Iteration  11: 5867329.229 ops/s
Iteration  12: 5668869.160 ops/s
Iteration  13: 5771075.531 ops/s
Iteration  14: 5798112.663 ops/s
Iteration  15: 5850007.644 ops/s
Iteration  16: 5881510.074 ops/s
Iteration  17: 5857034.199 ops/s
Iteration  18: 5693892.477 ops/s
Iteration  19: 5809003.252 ops/s
Iteration  20: 5782482.162 ops/s
Iteration  21: 5790067.207 ops/s
Iteration  22: 5890806.630 ops/s
Iteration  23: 5809745.328 ops/s
Iteration  24: 5864901.457 ops/s
Iteration  25: 5892633.407 ops/s
Iteration  26: 5785236.334 ops/s
Iteration  27: 5858224.851 ops/s
Iteration  28: 5827355.522 ops/s
Iteration  29: 5811259.310 ops/s
Iteration  30: 5902440.911 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone":
  5833229.813 ±(99.9%) 41721.079 ops/s [Average]
  (min, avg, max) = (5668869.160, 5833229.813, 5924559.166), stdev = 62446.152
  CI (99.9%): [5791508.734, 5874950.891] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone  thrpt   30  5833229.813 ± 41721.079  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3694406.675 ops/s
# Warmup Iteration   2: 7597279.161 ops/s
# Warmup Iteration   3: 7412157.039 ops/s
# Warmup Iteration   4: 8179893.087 ops/s
# Warmup Iteration   5: 8180142.007 ops/s
# Warmup Iteration   6: 8125983.980 ops/s
# Warmup Iteration   7: 8142381.686 ops/s
# Warmup Iteration   8: 8200084.615 ops/s
# Warmup Iteration   9: 8140112.796 ops/s
# Warmup Iteration  10: 8130364.338 ops/s
# Warmup Iteration  11: 8180099.473 ops/s
# Warmup Iteration  12: 8197607.592 ops/s
# Warmup Iteration  13: 8142788.502 ops/s
# Warmup Iteration  14: 8177419.666 ops/s
# Warmup Iteration  15: 8191952.550 ops/s
# Warmup Iteration  16: 8144072.935 ops/s
# Warmup Iteration  17: 8208774.284 ops/s
# Warmup Iteration  18: 8224089.855 ops/s
# Warmup Iteration  19: 8191987.422 ops/s
# Warmup Iteration  20: 8197353.881 ops/s
# Warmup Iteration  21: 8193388.624 ops/s
# Warmup Iteration  22: 8185638.905 ops/s
# Warmup Iteration  23: 8210667.114 ops/s
# Warmup Iteration  24: 8160100.382 ops/s
# Warmup Iteration  25: 8117310.549 ops/s
# Warmup Iteration  26: 8106498.765 ops/s
# Warmup Iteration  27: 8141458.176 ops/s
# Warmup Iteration  28: 8174752.137 ops/s
# Warmup Iteration  29: 8067744.649 ops/s
# Warmup Iteration  30: 8218859.467 ops/s
Iteration   1: 8221737.441 ops/s
Iteration   2: 8112511.093 ops/s
Iteration   3: 8232174.399 ops/s
Iteration   4: 8092847.590 ops/s
Iteration   5: 8046597.296 ops/s
Iteration   6: 8144038.771 ops/s
Iteration   7: 8191070.762 ops/s
Iteration   8: 8091333.383 ops/s
Iteration   9: 8213546.215 ops/s
Iteration  10: 8172825.475 ops/s
Iteration  11: 8199970.738 ops/s
Iteration  12: 8172577.729 ops/s
Iteration  13: 8260826.474 ops/s
Iteration  14: 8149237.491 ops/s
Iteration  15: 8219891.132 ops/s
Iteration  16: 8038360.936 ops/s
Iteration  17: 8218975.705 ops/s
Iteration  18: 8195142.127 ops/s
Iteration  19: 8089359.720 ops/s
Iteration  20: 8173469.467 ops/s
Iteration  21: 8223696.700 ops/s
Iteration  22: 8154696.381 ops/s
Iteration  23: 8235592.807 ops/s
Iteration  24: 8200449.775 ops/s
Iteration  25: 8106897.773 ops/s
Iteration  26: 8186358.460 ops/s
Iteration  27: 8105994.056 ops/s
Iteration  28: 8020023.240 ops/s
Iteration  29: 8163836.636 ops/s
Iteration  30: 8185187.901 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_forEach":
  8160640.922 ±(99.9%) 42257.921 ops/s [Average]
  (min, avg, max) = (8020023.240, 8160640.922, 8260826.474), stdev = 63249.671
  CI (99.9%): [8118383.001, 8202898.843] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_forEach  thrpt   30  8160640.922 ± 42257.921  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9759853.006 ops/s
# Warmup Iteration   2: 17130651.589 ops/s
# Warmup Iteration   3: 20119071.538 ops/s
# Warmup Iteration   4: 20460275.171 ops/s
# Warmup Iteration   5: 20466737.231 ops/s
# Warmup Iteration   6: 20485166.595 ops/s
# Warmup Iteration   7: 20353477.706 ops/s
# Warmup Iteration   8: 20474744.991 ops/s
# Warmup Iteration   9: 20041503.870 ops/s
# Warmup Iteration  10: 20380669.358 ops/s
# Warmup Iteration  11: 20227447.012 ops/s
# Warmup Iteration  12: 20493225.960 ops/s
# Warmup Iteration  13: 20408755.357 ops/s
# Warmup Iteration  14: 20493818.469 ops/s
# Warmup Iteration  15: 20386615.938 ops/s
# Warmup Iteration  16: 20659788.567 ops/s
# Warmup Iteration  17: 20473491.465 ops/s
# Warmup Iteration  18: 20371652.623 ops/s
# Warmup Iteration  19: 20065880.280 ops/s
# Warmup Iteration  20: 20254370.694 ops/s
# Warmup Iteration  21: 20018475.304 ops/s
# Warmup Iteration  22: 19968464.069 ops/s
# Warmup Iteration  23: 20195400.183 ops/s
# Warmup Iteration  24: 20126592.600 ops/s
# Warmup Iteration  25: 20249730.324 ops/s
# Warmup Iteration  26: 20558649.462 ops/s
# Warmup Iteration  27: 20286526.179 ops/s
# Warmup Iteration  28: 20399367.840 ops/s
# Warmup Iteration  29: 20519237.666 ops/s
# Warmup Iteration  30: 20288509.452 ops/s
Iteration   1: 20614913.970 ops/s
Iteration   2: 20362233.264 ops/s
Iteration   3: 20397235.262 ops/s
Iteration   4: 20230515.162 ops/s
Iteration   5: 20593298.747 ops/s
Iteration   6: 20523034.559 ops/s
Iteration   7: 20410627.756 ops/s
Iteration   8: 20402956.940 ops/s
Iteration   9: 20457011.463 ops/s
Iteration  10: 20236703.530 ops/s
Iteration  11: 20355527.710 ops/s
Iteration  12: 20402819.854 ops/s
Iteration  13: 20373309.826 ops/s
Iteration  14: 20254735.883 ops/s
Iteration  15: 20623035.741 ops/s
Iteration  16: 20073243.241 ops/s
Iteration  17: 20622556.638 ops/s
Iteration  18: 20447651.353 ops/s
Iteration  19: 20377091.833 ops/s
Iteration  20: 20148490.832 ops/s
Iteration  21: 20345742.877 ops/s
Iteration  22: 20402844.393 ops/s
Iteration  23: 20274978.170 ops/s
Iteration  24: 20097614.474 ops/s
Iteration  25: 20409181.725 ops/s
Iteration  26: 20349661.717 ops/s
Iteration  27: 20445921.695 ops/s
Iteration  28: 20255320.074 ops/s
Iteration  29: 20408118.600 ops/s
Iteration  30: 20454741.883 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_injectInto":
  20378370.639 ±(99.9%) 94444.012 ops/s [Average]
  (min, avg, max) = (20073243.241, 20378370.639, 20623035.741), stdev = 141359.362
  CI (99.9%): [20283926.627, 20472814.651] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_injectInto  thrpt   30  20378370.639 ± 94444.012  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1167182.569 ops/s
# Warmup Iteration   2: 1964214.917 ops/s
# Warmup Iteration   3: 2312260.527 ops/s
# Warmup Iteration   4: 2324264.191 ops/s
# Warmup Iteration   5: 2335350.166 ops/s
# Warmup Iteration   6: 2325353.787 ops/s
# Warmup Iteration   7: 2322587.897 ops/s
# Warmup Iteration   8: 2326145.539 ops/s
# Warmup Iteration   9: 2313255.976 ops/s
# Warmup Iteration  10: 2347363.473 ops/s
# Warmup Iteration  11: 2302825.376 ops/s
# Warmup Iteration  12: 2326989.182 ops/s
# Warmup Iteration  13: 2308710.441 ops/s
# Warmup Iteration  14: 2329849.121 ops/s
# Warmup Iteration  15: 2334177.075 ops/s
# Warmup Iteration  16: 2326887.239 ops/s
# Warmup Iteration  17: 2301098.944 ops/s
# Warmup Iteration  18: 2306710.644 ops/s
# Warmup Iteration  19: 2320734.885 ops/s
# Warmup Iteration  20: 2334775.677 ops/s
# Warmup Iteration  21: 2324866.084 ops/s
# Warmup Iteration  22: 2332252.504 ops/s
# Warmup Iteration  23: 2278619.222 ops/s
# Warmup Iteration  24: 2325648.428 ops/s
# Warmup Iteration  25: 2310749.413 ops/s
# Warmup Iteration  26: 2321436.896 ops/s
# Warmup Iteration  27: 2325312.048 ops/s
# Warmup Iteration  28: 2309234.351 ops/s
# Warmup Iteration  29: 2332591.042 ops/s
# Warmup Iteration  30: 2343936.087 ops/s
Iteration   1: 2294313.980 ops/s
Iteration   2: 2333100.222 ops/s
Iteration   3: 2311807.560 ops/s
Iteration   4: 2335746.336 ops/s
Iteration   5: 2270215.771 ops/s
Iteration   6: 2333084.300 ops/s
Iteration   7: 2329664.198 ops/s
Iteration   8: 2303961.053 ops/s
Iteration   9: 2329249.804 ops/s
Iteration  10: 2335213.325 ops/s
Iteration  11: 2328055.550 ops/s
Iteration  12: 2335431.940 ops/s
Iteration  13: 2300125.939 ops/s
Iteration  14: 2317745.485 ops/s
Iteration  15: 2307678.778 ops/s
Iteration  16: 2307761.394 ops/s
Iteration  17: 2294586.910 ops/s
Iteration  18: 2278709.654 ops/s
Iteration  19: 2306017.904 ops/s
Iteration  20: 2252322.347 ops/s
Iteration  21: 2335688.829 ops/s
Iteration  22: 2314889.830 ops/s
Iteration  23: 2333034.389 ops/s
Iteration  24: 2325014.874 ops/s
Iteration  25: 2276386.876 ops/s
Iteration  26: 2334790.806 ops/s
Iteration  27: 2324819.154 ops/s
Iteration  28: 2321205.782 ops/s
Iteration  29: 2315589.764 ops/s
Iteration  30: 2338975.892 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty":
  2314172.955 ±(99.9%) 14974.804 ops/s [Average]
  (min, avg, max) = (2252322.347, 2314172.955, 2338975.892), stdev = 22413.583
  CI (99.9%): [2299198.151, 2329147.758] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  2314172.955 ± 14974.804  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 683095.821 ops/s
# Warmup Iteration   2: 717317.600 ops/s
# Warmup Iteration   3: 970225.223 ops/s
# Warmup Iteration   4: 960729.893 ops/s
# Warmup Iteration   5: 961715.028 ops/s
# Warmup Iteration   6: 967678.224 ops/s
# Warmup Iteration   7: 943105.466 ops/s
# Warmup Iteration   8: 962056.924 ops/s
# Warmup Iteration   9: 969451.439 ops/s
# Warmup Iteration  10: 959341.318 ops/s
# Warmup Iteration  11: 808367.146 ops/s
# Warmup Iteration  12: 958585.149 ops/s
# Warmup Iteration  13: 970088.749 ops/s
# Warmup Iteration  14: 971754.653 ops/s
# Warmup Iteration  15: 972521.386 ops/s
# Warmup Iteration  16: 969795.980 ops/s
# Warmup Iteration  17: 1033661.045 ops/s
# Warmup Iteration  18: 1032676.612 ops/s
# Warmup Iteration  19: 1021969.845 ops/s
# Warmup Iteration  20: 1028058.410 ops/s
# Warmup Iteration  21: 1035563.970 ops/s
# Warmup Iteration  22: 1020113.694 ops/s
# Warmup Iteration  23: 1033554.079 ops/s
# Warmup Iteration  24: 1030289.486 ops/s
# Warmup Iteration  25: 1033698.115 ops/s
# Warmup Iteration  26: 1018973.694 ops/s
# Warmup Iteration  27: 1034451.515 ops/s
# Warmup Iteration  28: 1023683.845 ops/s
# Warmup Iteration  29: 1023119.362 ops/s
# Warmup Iteration  30: 1033147.763 ops/s
Iteration   1: 1037423.360 ops/s
Iteration   2: 1037735.283 ops/s
Iteration   3: 1018970.846 ops/s
Iteration   4: 1026381.451 ops/s
Iteration   5: 1034530.313 ops/s
Iteration   6: 1031771.302 ops/s
Iteration   7: 1026742.707 ops/s
Iteration   8: 1037453.035 ops/s
Iteration   9: 1023629.907 ops/s
Iteration  10: 1031563.726 ops/s
Iteration  11: 1023440.380 ops/s
Iteration  12: 1034573.282 ops/s
Iteration  13: 1022850.390 ops/s
Iteration  14: 1030007.437 ops/s
Iteration  15: 1030766.421 ops/s
Iteration  16: 1027547.447 ops/s
Iteration  17: 1027914.129 ops/s
Iteration  18: 1030523.699 ops/s
Iteration  19: 1019127.519 ops/s
Iteration  20: 1002645.922 ops/s
Iteration  21: 1013879.074 ops/s
Iteration  22: 1032276.784 ops/s
Iteration  23: 1014605.191 ops/s
Iteration  24: 1030251.615 ops/s
Iteration  25: 1025981.330 ops/s
Iteration  26: 1031059.553 ops/s
Iteration  27: 998404.651 ops/s
Iteration  28: 1033573.961 ops/s
Iteration  29: 1034648.832 ops/s
Iteration  30: 1032726.284 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws":
  1026766.861 ±(99.9%) 6351.806 ops/s [Average]
  (min, avg, max) = (998404.651, 1026766.861, 1037735.283), stdev = 9507.085
  CI (99.9%): [1020415.055, 1033118.667] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws  thrpt   30  1026766.861 ± 6351.806  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 704657.547 ops/s
# Warmup Iteration   2: 757114.341 ops/s
# Warmup Iteration   3: 994413.901 ops/s
# Warmup Iteration   4: 989486.383 ops/s
# Warmup Iteration   5: 991465.550 ops/s
# Warmup Iteration   6: 994228.178 ops/s
# Warmup Iteration   7: 993131.616 ops/s
# Warmup Iteration   8: 985649.412 ops/s
# Warmup Iteration   9: 974688.592 ops/s
# Warmup Iteration  10: 891070.948 ops/s
# Warmup Iteration  11: 927273.492 ops/s
# Warmup Iteration  12: 988161.350 ops/s
# Warmup Iteration  13: 985082.215 ops/s
# Warmup Iteration  14: 991126.981 ops/s
# Warmup Iteration  15: 980306.749 ops/s
# Warmup Iteration  16: 987362.078 ops/s
# Warmup Iteration  17: 1053169.558 ops/s
# Warmup Iteration  18: 1050602.976 ops/s
# Warmup Iteration  19: 1050405.396 ops/s
# Warmup Iteration  20: 1057947.914 ops/s
# Warmup Iteration  21: 1061280.805 ops/s
# Warmup Iteration  22: 1054212.820 ops/s
# Warmup Iteration  23: 1051396.581 ops/s
# Warmup Iteration  24: 1048847.316 ops/s
# Warmup Iteration  25: 1054892.650 ops/s
# Warmup Iteration  26: 1054588.598 ops/s
# Warmup Iteration  27: 1059416.181 ops/s
# Warmup Iteration  28: 1054226.303 ops/s
# Warmup Iteration  29: 1058163.964 ops/s
# Warmup Iteration  30: 1047755.010 ops/s
Iteration   1: 1037875.924 ops/s
Iteration   2: 1055659.133 ops/s
Iteration   3: 1045247.095 ops/s
Iteration   4: 1062237.962 ops/s
Iteration   5: 1060486.434 ops/s
Iteration   6: 1030875.342 ops/s
Iteration   7: 1040692.628 ops/s
Iteration   8: 1055032.970 ops/s
Iteration   9: 1042955.725 ops/s
Iteration  10: 1041743.133 ops/s
Iteration  11: 1040112.919 ops/s
Iteration  12: 1050884.061 ops/s
Iteration  13: 1059582.207 ops/s
Iteration  14: 1056137.545 ops/s
Iteration  15: 1052961.611 ops/s
Iteration  16: 1047633.001 ops/s
Iteration  17: 1028438.857 ops/s
Iteration  18: 1048825.301 ops/s
Iteration  19: 1060288.146 ops/s
Iteration  20: 1059134.085 ops/s
Iteration  21: 1043514.059 ops/s
Iteration  22: 1060476.745 ops/s
Iteration  23: 1051371.058 ops/s
Iteration  24: 1057687.918 ops/s
Iteration  25: 1058410.726 ops/s
Iteration  26: 1060016.422 ops/s
Iteration  27: 1028071.695 ops/s
Iteration  28: 1043931.261 ops/s
Iteration  29: 1054983.355 ops/s
Iteration  30: 1049622.010 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList":
  1049496.311 ±(99.9%) 6650.784 ops/s [Average]
  (min, avg, max) = (1028071.695, 1049496.311, 1062237.962), stdev = 9954.581
  CI (99.9%): [1042845.527, 1056147.095] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1049496.311 ± 6650.784  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 693884.448 ops/s
# Warmup Iteration   2: 752102.082 ops/s
# Warmup Iteration   3: 996508.212 ops/s
# Warmup Iteration   4: 990774.848 ops/s
# Warmup Iteration   5: 996068.918 ops/s
# Warmup Iteration   6: 995931.696 ops/s
# Warmup Iteration   7: 992207.862 ops/s
# Warmup Iteration   8: 982419.654 ops/s
# Warmup Iteration   9: 991014.394 ops/s
# Warmup Iteration  10: 939280.678 ops/s
# Warmup Iteration  11: 875776.261 ops/s
# Warmup Iteration  12: 994952.101 ops/s
# Warmup Iteration  13: 997975.028 ops/s
# Warmup Iteration  14: 998993.347 ops/s
# Warmup Iteration  15: 988952.919 ops/s
# Warmup Iteration  16: 994841.763 ops/s
# Warmup Iteration  17: 1062016.508 ops/s
# Warmup Iteration  18: 1061978.352 ops/s
# Warmup Iteration  19: 1052682.197 ops/s
# Warmup Iteration  20: 1059049.868 ops/s
# Warmup Iteration  21: 1059482.899 ops/s
# Warmup Iteration  22: 1067152.446 ops/s
# Warmup Iteration  23: 1059359.458 ops/s
# Warmup Iteration  24: 1062484.783 ops/s
# Warmup Iteration  25: 1062407.169 ops/s
# Warmup Iteration  26: 1060757.125 ops/s
# Warmup Iteration  27: 1053890.232 ops/s
# Warmup Iteration  28: 1066272.181 ops/s
# Warmup Iteration  29: 1057467.906 ops/s
# Warmup Iteration  30: 1061428.281 ops/s
Iteration   1: 1066079.470 ops/s
Iteration   2: 1062145.487 ops/s
Iteration   3: 1063732.120 ops/s
Iteration   4: 1069742.490 ops/s
Iteration   5: 1061225.794 ops/s
Iteration   6: 1064303.706 ops/s
Iteration   7: 1050625.753 ops/s
Iteration   8: 1065273.787 ops/s
Iteration   9: 1042647.399 ops/s
Iteration  10: 1065196.141 ops/s
Iteration  11: 1066504.551 ops/s
Iteration  12: 1060914.756 ops/s
Iteration  13: 1064049.549 ops/s
Iteration  14: 1060309.154 ops/s
Iteration  15: 1052935.315 ops/s
Iteration  16: 1065255.951 ops/s
Iteration  17: 1047160.365 ops/s
Iteration  18: 1062099.037 ops/s
Iteration  19: 1063388.482 ops/s
Iteration  20: 1060379.133 ops/s
Iteration  21: 1046389.863 ops/s
Iteration  22: 1066470.520 ops/s
Iteration  23: 1067107.758 ops/s
Iteration  24: 1056382.759 ops/s
Iteration  25: 1067614.037 ops/s
Iteration  26: 1059696.636 ops/s
Iteration  27: 1061402.215 ops/s
Iteration  28: 1062433.794 ops/s
Iteration  29: 1058934.548 ops/s
Iteration  30: 1060620.175 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  1060700.692 ±(99.9%) 4431.328 ops/s [Average]
  (min, avg, max) = (1042647.399, 1060700.692, 1069742.490), stdev = 6632.603
  CI (99.9%): [1056269.364, 1065132.019] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score      Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  1060700.692 ± 4431.328  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 716113.946 ops/s
# Warmup Iteration   2: 788308.308 ops/s
# Warmup Iteration   3: 989865.903 ops/s
# Warmup Iteration   4: 992768.837 ops/s
# Warmup Iteration   5: 992816.860 ops/s
# Warmup Iteration   6: 994317.673 ops/s
# Warmup Iteration   7: 995763.447 ops/s
# Warmup Iteration   8: 986701.976 ops/s
# Warmup Iteration   9: 996467.608 ops/s
# Warmup Iteration  10: 825996.638 ops/s
# Warmup Iteration  11: 991988.881 ops/s
# Warmup Iteration  12: 993671.319 ops/s
# Warmup Iteration  13: 994562.016 ops/s
# Warmup Iteration  14: 995281.576 ops/s
# Warmup Iteration  15: 989658.485 ops/s
# Warmup Iteration  16: 994489.535 ops/s
# Warmup Iteration  17: 1049766.824 ops/s
# Warmup Iteration  18: 1054005.409 ops/s
# Warmup Iteration  19: 1055208.105 ops/s
# Warmup Iteration  20: 1052029.822 ops/s
# Warmup Iteration  21: 1043729.690 ops/s
# Warmup Iteration  22: 1053161.240 ops/s
# Warmup Iteration  23: 1055652.268 ops/s
# Warmup Iteration  24: 1050402.256 ops/s
# Warmup Iteration  25: 1057618.356 ops/s
# Warmup Iteration  26: 1051436.012 ops/s
# Warmup Iteration  27: 1055302.422 ops/s
# Warmup Iteration  28: 1058737.574 ops/s
# Warmup Iteration  29: 1044850.064 ops/s
# Warmup Iteration  30: 1049219.774 ops/s
Iteration   1: 1057039.591 ops/s
Iteration   2: 1063795.149 ops/s
Iteration   3: 1038545.962 ops/s
Iteration   4: 1051454.826 ops/s
Iteration   5: 1051102.983 ops/s
Iteration   6: 1056249.220 ops/s
Iteration   7: 1047902.570 ops/s
Iteration   8: 1059718.980 ops/s
Iteration   9: 1056891.954 ops/s
Iteration  10: 1059864.865 ops/s
Iteration  11: 1055385.487 ops/s
Iteration  12: 1056960.333 ops/s
Iteration  13: 1052593.127 ops/s
Iteration  14: 1057590.027 ops/s
Iteration  15: 1051012.836 ops/s
Iteration  16: 1057306.641 ops/s
Iteration  17: 1051992.597 ops/s
Iteration  18: 1056674.006 ops/s
Iteration  19: 1054946.089 ops/s
Iteration  20: 1059597.577 ops/s
Iteration  21: 1055623.938 ops/s
Iteration  22: 1054521.699 ops/s
Iteration  23: 1044352.648 ops/s
Iteration  24: 1059191.878 ops/s
Iteration  25: 1062503.431 ops/s
Iteration  26: 1042859.006 ops/s
Iteration  27: 1044194.423 ops/s
Iteration  28: 1050741.130 ops/s
Iteration  29: 1055053.596 ops/s
Iteration  30: 1060525.286 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  1054206.395 ±(99.9%) 3989.335 ops/s [Average]
  (min, avg, max) = (1038545.962, 1054206.395, 1063795.149), stdev = 5971.049
  CI (99.9%): [1050217.060, 1058195.730] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                               Mode  Cnt        Score      Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  1054206.395 ± 3989.335  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 715973.036 ops/s
# Warmup Iteration   2: 803822.024 ops/s
# Warmup Iteration   3: 1007518.500 ops/s
# Warmup Iteration   4: 1004303.130 ops/s
# Warmup Iteration   5: 1007542.151 ops/s
# Warmup Iteration   6: 1007704.717 ops/s
# Warmup Iteration   7: 1007583.430 ops/s
# Warmup Iteration   8: 1006837.950 ops/s
# Warmup Iteration   9: 1006999.871 ops/s
# Warmup Iteration  10: 847049.329 ops/s
# Warmup Iteration  11: 1010143.241 ops/s
# Warmup Iteration  12: 1009416.454 ops/s
# Warmup Iteration  13: 1009920.493 ops/s
# Warmup Iteration  14: 1009617.200 ops/s
# Warmup Iteration  15: 1007974.237 ops/s
# Warmup Iteration  16: 1005536.886 ops/s
# Warmup Iteration  17: 1055970.240 ops/s
# Warmup Iteration  18: 1054888.458 ops/s
# Warmup Iteration  19: 1060762.597 ops/s
# Warmup Iteration  20: 1049452.442 ops/s
# Warmup Iteration  21: 1065180.829 ops/s
# Warmup Iteration  22: 1064021.704 ops/s
# Warmup Iteration  23: 1069682.741 ops/s
# Warmup Iteration  24: 1060625.248 ops/s
# Warmup Iteration  25: 1066944.500 ops/s
# Warmup Iteration  26: 1069617.426 ops/s
# Warmup Iteration  27: 1069124.785 ops/s
# Warmup Iteration  28: 1057417.287 ops/s
# Warmup Iteration  29: 1052013.437 ops/s
# Warmup Iteration  30: 1057774.971 ops/s
Iteration   1: 1069696.094 ops/s
Iteration   2: 1065714.924 ops/s
Iteration   3: 1066930.083 ops/s
Iteration   4: 1069506.815 ops/s
Iteration   5: 1068278.678 ops/s
Iteration   6: 1069554.015 ops/s
Iteration   7: 1064287.544 ops/s
Iteration   8: 1068551.477 ops/s
Iteration   9: 1068691.946 ops/s
Iteration  10: 1066784.306 ops/s
Iteration  11: 1071056.227 ops/s
Iteration  12: 1066984.597 ops/s
Iteration  13: 1055934.393 ops/s
Iteration  14: 1066173.528 ops/s
Iteration  15: 1067027.812 ops/s
Iteration  16: 1067247.596 ops/s
Iteration  17: 1061402.904 ops/s
Iteration  18: 1047673.833 ops/s
Iteration  19: 1065925.712 ops/s
Iteration  20: 1064376.911 ops/s
Iteration  21: 1067981.134 ops/s
Iteration  22: 1066576.217 ops/s
Iteration  23: 1070400.766 ops/s
Iteration  24: 1048945.294 ops/s
Iteration  25: 1053169.373 ops/s
Iteration  26: 1071828.701 ops/s
Iteration  27: 1065523.925 ops/s
Iteration  28: 1071052.089 ops/s
Iteration  29: 1036630.166 ops/s
Iteration  30: 1067277.495 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1064372.818 ±(99.9%) 5373.297 ops/s [Average]
  (min, avg, max) = (1036630.166, 1064372.818, 1071828.701), stdev = 8042.499
  CI (99.9%): [1058999.521, 1069746.116] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                               Mode  Cnt        Score      Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1064372.818 ± 5373.297  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 782972.880 ops/s
# Warmup Iteration   2: 1580088.684 ops/s
# Warmup Iteration   3: 1349912.816 ops/s
# Warmup Iteration   4: 1596065.642 ops/s
# Warmup Iteration   5: 1584384.966 ops/s
# Warmup Iteration   6: 1562409.457 ops/s
# Warmup Iteration   7: 1579249.374 ops/s
# Warmup Iteration   8: 1582531.468 ops/s
# Warmup Iteration   9: 1576053.313 ops/s
# Warmup Iteration  10: 1593279.005 ops/s
# Warmup Iteration  11: 1592515.950 ops/s
# Warmup Iteration  12: 1598574.157 ops/s
# Warmup Iteration  13: 1591873.508 ops/s
# Warmup Iteration  14: 1595940.196 ops/s
# Warmup Iteration  15: 1585080.393 ops/s
# Warmup Iteration  16: 1590370.509 ops/s
# Warmup Iteration  17: 1585376.200 ops/s
# Warmup Iteration  18: 1585290.363 ops/s
# Warmup Iteration  19: 1588014.032 ops/s
# Warmup Iteration  20: 1588564.927 ops/s
# Warmup Iteration  21: 1566371.175 ops/s
# Warmup Iteration  22: 1571761.258 ops/s
# Warmup Iteration  23: 1578806.364 ops/s
# Warmup Iteration  24: 1575442.282 ops/s
# Warmup Iteration  25: 1573198.071 ops/s
# Warmup Iteration  26: 1596650.026 ops/s
# Warmup Iteration  27: 1579487.146 ops/s
# Warmup Iteration  28: 1588310.473 ops/s
# Warmup Iteration  29: 1587593.487 ops/s
# Warmup Iteration  30: 1578605.417 ops/s
Iteration   1: 1594190.632 ops/s
Iteration   2: 1554288.219 ops/s
Iteration   3: 1584912.696 ops/s
Iteration   4: 1577298.543 ops/s
Iteration   5: 1591619.034 ops/s
Iteration   6: 1576349.094 ops/s
Iteration   7: 1568267.029 ops/s
Iteration   8: 1582954.940 ops/s
Iteration   9: 1593598.183 ops/s
Iteration  10: 1567852.795 ops/s
Iteration  11: 1584231.739 ops/s
Iteration  12: 1582120.252 ops/s
Iteration  13: 1565567.389 ops/s
Iteration  14: 1605369.810 ops/s
Iteration  15: 1558540.428 ops/s
Iteration  16: 1550173.760 ops/s
Iteration  17: 1578531.323 ops/s
Iteration  18: 1571226.817 ops/s
Iteration  19: 1593246.636 ops/s
Iteration  20: 1587512.039 ops/s
Iteration  21: 1589804.806 ops/s
Iteration  22: 1592193.277 ops/s
Iteration  23: 1583211.583 ops/s
Iteration  24: 1578102.837 ops/s
Iteration  25: 1587230.382 ops/s
Iteration  26: 1580725.800 ops/s
Iteration  27: 1598828.787 ops/s
Iteration  28: 1595314.897 ops/s
Iteration  29: 1587154.716 ops/s
Iteration  30: 1568655.519 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_makeString":
  1580969.132 ±(99.9%) 8867.755 ops/s [Average]
  (min, avg, max) = (1550173.760, 1580969.132, 1605369.810), stdev = 13272.840
  CI (99.9%): [1572101.377, 1589836.887] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_makeString  thrpt   30  1580969.132 ± 8867.755  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 165043088.366 ops/s
# Warmup Iteration   2: 301387411.552 ops/s
# Warmup Iteration   3: 260000795.940 ops/s
# Warmup Iteration   4: 307765832.698 ops/s
# Warmup Iteration   5: 305080936.489 ops/s
# Warmup Iteration   6: 307668678.961 ops/s
# Warmup Iteration   7: 308830331.738 ops/s
# Warmup Iteration   8: 308019110.492 ops/s
# Warmup Iteration   9: 308006279.767 ops/s
# Warmup Iteration  10: 306737951.131 ops/s
# Warmup Iteration  11: 308260200.043 ops/s
# Warmup Iteration  12: 308086262.789 ops/s
# Warmup Iteration  13: 307794274.176 ops/s
# Warmup Iteration  14: 308445174.823 ops/s
# Warmup Iteration  15: 306073181.074 ops/s
# Warmup Iteration  16: 305638053.173 ops/s
# Warmup Iteration  17: 308674147.074 ops/s
# Warmup Iteration  18: 305178436.757 ops/s
# Warmup Iteration  19: 308055067.561 ops/s
# Warmup Iteration  20: 304085344.638 ops/s
# Warmup Iteration  21: 307430308.938 ops/s
# Warmup Iteration  22: 305745743.893 ops/s
# Warmup Iteration  23: 307385700.923 ops/s
# Warmup Iteration  24: 308116955.412 ops/s
# Warmup Iteration  25: 308176726.438 ops/s
# Warmup Iteration  26: 307412113.891 ops/s
# Warmup Iteration  27: 304715735.327 ops/s
# Warmup Iteration  28: 308321646.381 ops/s
# Warmup Iteration  29: 305326520.208 ops/s
# Warmup Iteration  30: 308146805.340 ops/s
Iteration   1: 307535462.961 ops/s
Iteration   2: 308444537.533 ops/s
Iteration   3: 307922240.490 ops/s
Iteration   4: 308352843.915 ops/s
Iteration   5: 307711091.026 ops/s
Iteration   6: 307233970.074 ops/s
Iteration   7: 307853474.243 ops/s
Iteration   8: 306969370.706 ops/s
Iteration   9: 307486831.959 ops/s
Iteration  10: 307533033.389 ops/s
Iteration  11: 309281469.086 ops/s
Iteration  12: 307311623.549 ops/s
Iteration  13: 309561498.114 ops/s
Iteration  14: 306276287.212 ops/s
Iteration  15: 307406532.932 ops/s
Iteration  16: 308887034.745 ops/s
Iteration  17: 301491594.071 ops/s
Iteration  18: 307012073.308 ops/s
Iteration  19: 307927052.830 ops/s
Iteration  20: 305257476.149 ops/s
Iteration  21: 307983562.091 ops/s
Iteration  22: 307695755.349 ops/s
Iteration  23: 308599810.929 ops/s
Iteration  24: 306862622.167 ops/s
Iteration  25: 308014909.094 ops/s
Iteration  26: 307472236.245 ops/s
Iteration  27: 307547332.217 ops/s
Iteration  28: 303664690.190 ops/s
Iteration  29: 307764367.810 ops/s
Iteration  30: 307911704.597 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_newCollection":
  307365749.633 ±(99.9%) 1047790.134 ops/s [Average]
  (min, avg, max) = (301491594.071, 307365749.633, 309561498.114), stdev = 1568283.065
  CI (99.9%): [306317959.498, 308413539.767] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt          Score         Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_newCollection  thrpt   30  307365749.633 ± 1047790.134  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2982304.617 ops/s
# Warmup Iteration   2: 5371223.402 ops/s
# Warmup Iteration   3: 6420997.154 ops/s
# Warmup Iteration   4: 6425488.479 ops/s
# Warmup Iteration   5: 6401803.415 ops/s
# Warmup Iteration   6: 6418317.068 ops/s
# Warmup Iteration   7: 6443250.775 ops/s
# Warmup Iteration   8: 6356534.086 ops/s
# Warmup Iteration   9: 6430313.344 ops/s
# Warmup Iteration  10: 6427958.294 ops/s
# Warmup Iteration  11: 6420255.262 ops/s
# Warmup Iteration  12: 6392467.087 ops/s
# Warmup Iteration  13: 6353705.057 ops/s
# Warmup Iteration  14: 6455624.113 ops/s
# Warmup Iteration  15: 6398815.467 ops/s
# Warmup Iteration  16: 6415241.897 ops/s
# Warmup Iteration  17: 6387639.197 ops/s
# Warmup Iteration  18: 6405361.433 ops/s
# Warmup Iteration  19: 6388284.268 ops/s
# Warmup Iteration  20: 6429910.246 ops/s
# Warmup Iteration  21: 6428387.627 ops/s
# Warmup Iteration  22: 6424567.042 ops/s
# Warmup Iteration  23: 6385725.872 ops/s
# Warmup Iteration  24: 6422184.841 ops/s
# Warmup Iteration  25: 6372173.705 ops/s
# Warmup Iteration  26: 6407077.099 ops/s
# Warmup Iteration  27: 6390156.247 ops/s
# Warmup Iteration  28: 6392046.125 ops/s
# Warmup Iteration  29: 6372195.940 ops/s
# Warmup Iteration  30: 6406670.968 ops/s
Iteration   1: 6397372.031 ops/s
Iteration   2: 6384738.207 ops/s
Iteration   3: 6411075.014 ops/s
Iteration   4: 6425004.067 ops/s
Iteration   5: 6425915.379 ops/s
Iteration   6: 6423597.317 ops/s
Iteration   7: 6439080.159 ops/s
Iteration   8: 6418377.958 ops/s
Iteration   9: 6394376.426 ops/s
Iteration  10: 6387653.185 ops/s
Iteration  11: 6423472.663 ops/s
Iteration  12: 6411276.387 ops/s
Iteration  13: 6305773.335 ops/s
Iteration  14: 6447588.522 ops/s
Iteration  15: 6434707.023 ops/s
Iteration  16: 6432514.060 ops/s
Iteration  17: 6260804.265 ops/s
Iteration  18: 6312461.267 ops/s
Iteration  19: 6414732.486 ops/s
Iteration  20: 6466063.043 ops/s
Iteration  21: 6305297.125 ops/s
Iteration  22: 6330192.324 ops/s
Iteration  23: 6419882.668 ops/s
Iteration  24: 6440390.504 ops/s
Iteration  25: 6402891.190 ops/s
Iteration  26: 6425466.924 ops/s
Iteration  27: 6405060.822 ops/s
Iteration  28: 6407552.714 ops/s
Iteration  29: 6361382.089 ops/s
Iteration  30: 6423558.231 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith":
  6397941.913 ±(99.9%) 32469.982 ops/s [Average]
  (min, avg, max) = (6260804.265, 6397941.913, 6466063.043), stdev = 48599.544
  CI (99.9%): [6365471.931, 6430411.895] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith  thrpt   30  6397941.913 ± 32469.982  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1586347.661 ops/s
# Warmup Iteration   2: 2818343.958 ops/s
# Warmup Iteration   3: 3324985.930 ops/s
# Warmup Iteration   4: 3368232.281 ops/s
# Warmup Iteration   5: 3359028.439 ops/s
# Warmup Iteration   6: 3381125.464 ops/s
# Warmup Iteration   7: 3361056.599 ops/s
# Warmup Iteration   8: 3376737.808 ops/s
# Warmup Iteration   9: 3322196.846 ops/s
# Warmup Iteration  10: 3360778.745 ops/s
# Warmup Iteration  11: 3361438.116 ops/s
# Warmup Iteration  12: 3375954.027 ops/s
# Warmup Iteration  13: 3336905.718 ops/s
# Warmup Iteration  14: 3350552.815 ops/s
# Warmup Iteration  15: 3347229.211 ops/s
# Warmup Iteration  16: 3360652.461 ops/s
# Warmup Iteration  17: 3340441.052 ops/s
# Warmup Iteration  18: 3360326.277 ops/s
# Warmup Iteration  19: 3368409.419 ops/s
# Warmup Iteration  20: 3373449.207 ops/s
# Warmup Iteration  21: 3328896.900 ops/s
# Warmup Iteration  22: 3369315.330 ops/s
# Warmup Iteration  23: 3346367.723 ops/s
# Warmup Iteration  24: 3370682.634 ops/s
# Warmup Iteration  25: 3365131.095 ops/s
# Warmup Iteration  26: 3324283.655 ops/s
# Warmup Iteration  27: 3364883.176 ops/s
# Warmup Iteration  28: 3357867.729 ops/s
# Warmup Iteration  29: 3374696.665 ops/s
# Warmup Iteration  30: 3361101.609 ops/s
Iteration   1: 3319113.852 ops/s
Iteration   2: 3263929.339 ops/s
Iteration   3: 3374473.294 ops/s
Iteration   4: 3362756.379 ops/s
Iteration   5: 3351425.505 ops/s
Iteration   6: 3371181.322 ops/s
Iteration   7: 3315994.679 ops/s
Iteration   8: 3377078.598 ops/s
Iteration   9: 3382465.914 ops/s
Iteration  10: 3386679.605 ops/s
Iteration  11: 3361401.114 ops/s
Iteration  12: 3371627.090 ops/s
Iteration  13: 3363888.189 ops/s
Iteration  14: 3353601.021 ops/s
Iteration  15: 3371512.391 ops/s
Iteration  16: 3370818.174 ops/s
Iteration  17: 3372117.201 ops/s
Iteration  18: 3367070.751 ops/s
Iteration  19: 3364018.749 ops/s
Iteration  20: 3360694.057 ops/s
Iteration  21: 3372606.033 ops/s
Iteration  22: 3363494.474 ops/s
Iteration  23: 3332268.499 ops/s
Iteration  24: 3358552.255 ops/s
Iteration  25: 3294456.758 ops/s
Iteration  26: 3381276.300 ops/s
Iteration  27: 3366667.359 ops/s
Iteration  28: 3313356.311 ops/s
Iteration  29: 3369328.941 ops/s
Iteration  30: 3323634.481 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy":
  3354582.954 ±(99.9%) 19163.137 ops/s [Average]
  (min, avg, max) = (3263929.339, 3354582.954, 3386679.605), stdev = 28682.483
  CI (99.9%): [3335419.818, 3373746.091] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy  thrpt   30  3354582.954 ± 19163.137  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3529028.808 ops/s
# Warmup Iteration   2: 5969737.556 ops/s
# Warmup Iteration   3: 7059456.490 ops/s
# Warmup Iteration   4: 7076252.716 ops/s
# Warmup Iteration   5: 7017042.560 ops/s
# Warmup Iteration   6: 7096372.157 ops/s
# Warmup Iteration   7: 7075520.801 ops/s
# Warmup Iteration   8: 7017581.510 ops/s
# Warmup Iteration   9: 7075192.754 ops/s
# Warmup Iteration  10: 7033709.199 ops/s
# Warmup Iteration  11: 7092999.080 ops/s
# Warmup Iteration  12: 7065713.675 ops/s
# Warmup Iteration  13: 7100791.483 ops/s
# Warmup Iteration  14: 7089193.344 ops/s
# Warmup Iteration  15: 7079424.419 ops/s
# Warmup Iteration  16: 7055595.439 ops/s
# Warmup Iteration  17: 7054566.815 ops/s
# Warmup Iteration  18: 7032423.143 ops/s
# Warmup Iteration  19: 7103852.113 ops/s
# Warmup Iteration  20: 7098853.257 ops/s
# Warmup Iteration  21: 7030688.035 ops/s
# Warmup Iteration  22: 7006376.582 ops/s
# Warmup Iteration  23: 7064213.081 ops/s
# Warmup Iteration  24: 7056093.070 ops/s
# Warmup Iteration  25: 7096486.543 ops/s
# Warmup Iteration  26: 7087714.577 ops/s
# Warmup Iteration  27: 7062514.858 ops/s
# Warmup Iteration  28: 7069504.391 ops/s
# Warmup Iteration  29: 7010313.543 ops/s
# Warmup Iteration  30: 7060512.216 ops/s
Iteration   1: 7016944.932 ops/s
Iteration   2: 7091014.619 ops/s
Iteration   3: 6969375.853 ops/s
Iteration   4: 7090363.470 ops/s
Iteration   5: 7114564.263 ops/s
Iteration   6: 6973024.126 ops/s
Iteration   7: 7072581.705 ops/s
Iteration   8: 6984066.223 ops/s
Iteration   9: 7060950.203 ops/s
Iteration  10: 7098697.967 ops/s
Iteration  11: 7095411.300 ops/s
Iteration  12: 7166439.465 ops/s
Iteration  13: 7079645.873 ops/s
Iteration  14: 7107047.946 ops/s
Iteration  15: 6986363.574 ops/s
Iteration  16: 6947251.615 ops/s
Iteration  17: 7096291.217 ops/s
Iteration  18: 7036914.299 ops/s
Iteration  19: 7053492.397 ops/s
Iteration  20: 7105405.336 ops/s
Iteration  21: 7078363.373 ops/s
Iteration  22: 7074347.806 ops/s
Iteration  23: 7097316.173 ops/s
Iteration  24: 7089409.078 ops/s
Iteration  25: 7094153.405 ops/s
Iteration  26: 6928952.238 ops/s
Iteration  27: 7032982.801 ops/s
Iteration  28: 7027814.489 ops/s
Iteration  29: 7005015.880 ops/s
Iteration  30: 7057266.308 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty":
  7054382.265 ±(99.9%) 37667.013 ops/s [Average]
  (min, avg, max) = (6928952.238, 7054382.265, 7166439.465), stdev = 56378.215
  CI (99.9%): [7016715.252, 7092049.277] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty  thrpt   30  7054382.265 ± 37667.013  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1455875.631 ops/s
# Warmup Iteration   2: 3367288.349 ops/s
# Warmup Iteration   3: 2798125.921 ops/s
# Warmup Iteration   4: 3379081.660 ops/s
# Warmup Iteration   5: 3373968.915 ops/s
# Warmup Iteration   6: 3397973.055 ops/s
# Warmup Iteration   7: 3376022.344 ops/s
# Warmup Iteration   8: 3402235.104 ops/s
# Warmup Iteration   9: 3402934.699 ops/s
# Warmup Iteration  10: 3391170.746 ops/s
# Warmup Iteration  11: 3399752.706 ops/s
# Warmup Iteration  12: 3379761.945 ops/s
# Warmup Iteration  13: 3389470.763 ops/s
# Warmup Iteration  14: 3348414.126 ops/s
# Warmup Iteration  15: 3394612.577 ops/s
# Warmup Iteration  16: 3393641.118 ops/s
# Warmup Iteration  17: 3385265.977 ops/s
# Warmup Iteration  18: 3391214.325 ops/s
# Warmup Iteration  19: 3396853.652 ops/s
# Warmup Iteration  20: 3385144.259 ops/s
# Warmup Iteration  21: 3409321.939 ops/s
# Warmup Iteration  22: 3398363.585 ops/s
# Warmup Iteration  23: 3391298.512 ops/s
# Warmup Iteration  24: 3383883.582 ops/s
# Warmup Iteration  25: 3398618.264 ops/s
# Warmup Iteration  26: 3394094.453 ops/s
# Warmup Iteration  27: 3355119.451 ops/s
# Warmup Iteration  28: 3374714.506 ops/s
# Warmup Iteration  29: 3375316.820 ops/s
# Warmup Iteration  30: 3358786.175 ops/s
Iteration   1: 3402781.296 ops/s
Iteration   2: 3393636.483 ops/s
Iteration   3: 3394255.796 ops/s
Iteration   4: 3402731.154 ops/s
Iteration   5: 3392555.770 ops/s
Iteration   6: 3378408.685 ops/s
Iteration   7: 3394990.856 ops/s
Iteration   8: 3393165.871 ops/s
Iteration   9: 3375668.888 ops/s
Iteration  10: 3379338.051 ops/s
Iteration  11: 3405616.124 ops/s
Iteration  12: 3400728.604 ops/s
Iteration  13: 3387167.525 ops/s
Iteration  14: 3389557.975 ops/s
Iteration  15: 3388251.125 ops/s
Iteration  16: 3379237.481 ops/s
Iteration  17: 3394275.283 ops/s
Iteration  18: 3390720.202 ops/s
Iteration  19: 3334893.890 ops/s
Iteration  20: 3372643.148 ops/s
Iteration  21: 3404653.981 ops/s
Iteration  22: 3392871.320 ops/s
Iteration  23: 3392658.726 ops/s
Iteration  24: 3400346.071 ops/s
Iteration  25: 3413554.730 ops/s
Iteration  26: 3402479.674 ops/s
Iteration  27: 3407063.126 ops/s
Iteration  28: 3351802.686 ops/s
Iteration  29: 3405919.326 ops/s
Iteration  30: 3396672.976 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_reduce":
  3390621.561 ±(99.9%) 10942.182 ops/s [Average]
  (min, avg, max) = (3334893.890, 3390621.561, 3413554.730), stdev = 16377.744
  CI (99.9%): [3379679.379, 3401563.743] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_reduce  thrpt   30  3390621.561 ± 10942.182  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1260833.573 ops/s
# Warmup Iteration   2: 2666896.369 ops/s
# Warmup Iteration   3: 2485292.224 ops/s
# Warmup Iteration   4: 2813141.182 ops/s
# Warmup Iteration   5: 2796667.904 ops/s
# Warmup Iteration   6: 2808190.586 ops/s
# Warmup Iteration   7: 2799006.856 ops/s
# Warmup Iteration   8: 2798596.484 ops/s
# Warmup Iteration   9: 2815671.941 ops/s
# Warmup Iteration  10: 2818446.989 ops/s
# Warmup Iteration  11: 2801528.789 ops/s
# Warmup Iteration  12: 2810910.104 ops/s
# Warmup Iteration  13: 2797326.015 ops/s
# Warmup Iteration  14: 2802588.037 ops/s
# Warmup Iteration  15: 2794783.120 ops/s
# Warmup Iteration  16: 2770906.335 ops/s
# Warmup Iteration  17: 2792637.330 ops/s
# Warmup Iteration  18: 2798180.087 ops/s
# Warmup Iteration  19: 2808375.779 ops/s
# Warmup Iteration  20: 2808775.995 ops/s
# Warmup Iteration  21: 2818017.230 ops/s
# Warmup Iteration  22: 2804310.892 ops/s
# Warmup Iteration  23: 2796749.527 ops/s
# Warmup Iteration  24: 2808754.842 ops/s
# Warmup Iteration  25: 2815146.177 ops/s
# Warmup Iteration  26: 2790258.325 ops/s
# Warmup Iteration  27: 2802699.476 ops/s
# Warmup Iteration  28: 2780090.569 ops/s
# Warmup Iteration  29: 2808358.786 ops/s
# Warmup Iteration  30: 2799131.791 ops/s
Iteration   1: 2799866.854 ops/s
Iteration   2: 2762619.646 ops/s
Iteration   3: 2806069.745 ops/s
Iteration   4: 2767365.829 ops/s
Iteration   5: 2786338.788 ops/s
Iteration   6: 2812180.292 ops/s
Iteration   7: 2802358.921 ops/s
Iteration   8: 2794763.999 ops/s
Iteration   9: 2791395.243 ops/s
Iteration  10: 2796860.643 ops/s
Iteration  11: 2806731.691 ops/s
Iteration  12: 2818143.240 ops/s
Iteration  13: 2795100.065 ops/s
Iteration  14: 2804090.523 ops/s
Iteration  15: 2818005.390 ops/s
Iteration  16: 2815178.408 ops/s
Iteration  17: 2824588.524 ops/s
Iteration  18: 2807287.464 ops/s
Iteration  19: 2795052.926 ops/s
Iteration  20: 2805452.065 ops/s
Iteration  21: 2811723.109 ops/s
Iteration  22: 2796576.139 ops/s
Iteration  23: 2813981.376 ops/s
Iteration  24: 2786974.469 ops/s
Iteration  25: 2823581.599 ops/s
Iteration  26: 2798704.917 ops/s
Iteration  27: 2806662.713 ops/s
Iteration  28: 2817050.820 ops/s
Iteration  29: 2747542.671 ops/s
Iteration  30: 2728162.466 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty":
  2798013.684 ±(99.9%) 14592.305 ops/s [Average]
  (min, avg, max) = (2728162.466, 2798013.684, 2824588.524), stdev = 21841.077
  CI (99.9%): [2783421.379, 2812605.990] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  2798013.684 ± 14592.305  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 709456.478 ops/s
# Warmup Iteration   2: 777486.038 ops/s
# Warmup Iteration   3: 1000070.616 ops/s
# Warmup Iteration   4: 991574.021 ops/s
# Warmup Iteration   5: 994957.254 ops/s
# Warmup Iteration   6: 989801.950 ops/s
# Warmup Iteration   7: 1001548.552 ops/s
# Warmup Iteration   8: 999339.943 ops/s
# Warmup Iteration   9: 1001018.173 ops/s
# Warmup Iteration  10: 849193.697 ops/s
# Warmup Iteration  11: 989311.554 ops/s
# Warmup Iteration  12: 999108.252 ops/s
# Warmup Iteration  13: 996976.816 ops/s
# Warmup Iteration  14: 1002515.225 ops/s
# Warmup Iteration  15: 998220.547 ops/s
# Warmup Iteration  16: 999545.884 ops/s
# Warmup Iteration  17: 1059297.643 ops/s
# Warmup Iteration  18: 1063873.260 ops/s
# Warmup Iteration  19: 1060855.523 ops/s
# Warmup Iteration  20: 1061709.774 ops/s
# Warmup Iteration  21: 1057106.601 ops/s
# Warmup Iteration  22: 1059688.987 ops/s
# Warmup Iteration  23: 1053878.520 ops/s
# Warmup Iteration  24: 1055606.432 ops/s
# Warmup Iteration  25: 1052807.783 ops/s
# Warmup Iteration  26: 1063105.348 ops/s
# Warmup Iteration  27: 1057809.711 ops/s
# Warmup Iteration  28: 1061663.337 ops/s
# Warmup Iteration  29: 1053829.879 ops/s
# Warmup Iteration  30: 1061965.770 ops/s
Iteration   1: 1063971.736 ops/s
Iteration   2: 1068306.379 ops/s
Iteration   3: 1057571.076 ops/s
Iteration   4: 1062603.394 ops/s
Iteration   5: 1065587.666 ops/s
Iteration   6: 1059995.129 ops/s
Iteration   7: 1060171.847 ops/s
Iteration   8: 1065590.532 ops/s
Iteration   9: 1063582.841 ops/s
Iteration  10: 1057885.580 ops/s
Iteration  11: 1061873.835 ops/s
Iteration  12: 1059596.960 ops/s
Iteration  13: 1064395.398 ops/s
Iteration  14: 1058281.724 ops/s
Iteration  15: 1062238.078 ops/s
Iteration  16: 1056661.263 ops/s
Iteration  17: 1058532.673 ops/s
Iteration  18: 1062062.567 ops/s
Iteration  19: 1051844.844 ops/s
Iteration  20: 1069769.869 ops/s
Iteration  21: 1064344.176 ops/s
Iteration  22: 1061424.120 ops/s
Iteration  23: 1062295.401 ops/s
Iteration  24: 1045406.263 ops/s
Iteration  25: 1062344.655 ops/s
Iteration  26: 1060988.535 ops/s
Iteration  27: 1064327.005 ops/s
Iteration  28: 1063299.997 ops/s
Iteration  29: 1065695.925 ops/s
Iteration  30: 1066674.294 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1061577.459 ±(99.9%) 3200.069 ops/s [Average]
  (min, avg, max) = (1045406.263, 1061577.459, 1069769.869), stdev = 4789.713
  CI (99.9%): [1058377.390, 1064777.528] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1061577.459 ± 3200.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6382660.488 ops/s
# Warmup Iteration   2: 12517697.076 ops/s
# Warmup Iteration   3: 12122404.850 ops/s
# Warmup Iteration   4: 13442744.398 ops/s
# Warmup Iteration   5: 13398268.462 ops/s
# Warmup Iteration   6: 13475399.613 ops/s
# Warmup Iteration   7: 13509148.246 ops/s
# Warmup Iteration   8: 13408583.225 ops/s
# Warmup Iteration   9: 13232026.695 ops/s
# Warmup Iteration  10: 13465858.739 ops/s
# Warmup Iteration  11: 13466451.532 ops/s
# Warmup Iteration  12: 13491919.526 ops/s
# Warmup Iteration  13: 13486541.354 ops/s
# Warmup Iteration  14: 13436583.806 ops/s
# Warmup Iteration  15: 13432745.188 ops/s
# Warmup Iteration  16: 13496503.789 ops/s
# Warmup Iteration  17: 13498477.836 ops/s
# Warmup Iteration  18: 13378119.431 ops/s
# Warmup Iteration  19: 13476711.482 ops/s
# Warmup Iteration  20: 13471102.026 ops/s
# Warmup Iteration  21: 13533977.479 ops/s
# Warmup Iteration  22: 13503650.750 ops/s
# Warmup Iteration  23: 13495405.155 ops/s
# Warmup Iteration  24: 13334168.047 ops/s
# Warmup Iteration  25: 13472204.518 ops/s
# Warmup Iteration  26: 13269780.988 ops/s
# Warmup Iteration  27: 13327870.166 ops/s
# Warmup Iteration  28: 13340387.430 ops/s
# Warmup Iteration  29: 13444835.958 ops/s
# Warmup Iteration  30: 13526170.035 ops/s
Iteration   1: 13524210.225 ops/s
Iteration   2: 13502609.374 ops/s
Iteration   3: 13381274.893 ops/s
Iteration   4: 13476200.324 ops/s
Iteration   5: 13437373.038 ops/s
Iteration   6: 13367128.691 ops/s
Iteration   7: 13398673.146 ops/s
Iteration   8: 13406387.316 ops/s
Iteration   9: 13382173.272 ops/s
Iteration  10: 13381199.984 ops/s
Iteration  11: 13458647.568 ops/s
Iteration  12: 13335530.151 ops/s
Iteration  13: 13408744.905 ops/s
Iteration  14: 13402902.260 ops/s
Iteration  15: 13159027.077 ops/s
Iteration  16: 13441556.967 ops/s
Iteration  17: 13468243.705 ops/s
Iteration  18: 13377642.285 ops/s
Iteration  19: 13527144.925 ops/s
Iteration  20: 13501414.877 ops/s
Iteration  21: 13441980.492 ops/s
Iteration  22: 13389704.044 ops/s
Iteration  23: 13501485.346 ops/s
Iteration  24: 13449534.719 ops/s
Iteration  25: 13436672.343 ops/s
Iteration  26: 13458695.864 ops/s
Iteration  27: 13484502.118 ops/s
Iteration  28: 13526677.071 ops/s
Iteration  29: 13353503.098 ops/s
Iteration  30: 13463110.267 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_reject":
  13428131.678 ±(99.9%) 49531.623 ops/s [Average]
  (min, avg, max) = (13159027.077, 13428131.678, 13527144.925), stdev = 74136.607
  CI (99.9%): [13378600.055, 13477663.301] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_reject  thrpt   30  13428131.678 ± 49531.623  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8009411.681 ops/s
# Warmup Iteration   2: 16441301.991 ops/s
# Warmup Iteration   3: 13817899.955 ops/s
# Warmup Iteration   4: 16387351.518 ops/s
# Warmup Iteration   5: 16386447.388 ops/s
# Warmup Iteration   6: 16439677.952 ops/s
# Warmup Iteration   7: 16404257.900 ops/s
# Warmup Iteration   8: 16379620.984 ops/s
# Warmup Iteration   9: 16472301.756 ops/s
# Warmup Iteration  10: 16433542.454 ops/s
# Warmup Iteration  11: 16400828.357 ops/s
# Warmup Iteration  12: 16407858.349 ops/s
# Warmup Iteration  13: 16472209.644 ops/s
# Warmup Iteration  14: 16298024.079 ops/s
# Warmup Iteration  15: 16404913.032 ops/s
# Warmup Iteration  16: 16467793.790 ops/s
# Warmup Iteration  17: 16318868.309 ops/s
# Warmup Iteration  18: 16420457.524 ops/s
# Warmup Iteration  19: 16396153.728 ops/s
# Warmup Iteration  20: 16427412.120 ops/s
# Warmup Iteration  21: 16482454.091 ops/s
# Warmup Iteration  22: 16360064.968 ops/s
# Warmup Iteration  23: 16426982.080 ops/s
# Warmup Iteration  24: 16472320.257 ops/s
# Warmup Iteration  25: 16409232.635 ops/s
# Warmup Iteration  26: 16319057.177 ops/s
# Warmup Iteration  27: 16435414.397 ops/s
# Warmup Iteration  28: 16424168.916 ops/s
# Warmup Iteration  29: 16331966.765 ops/s
# Warmup Iteration  30: 16432265.226 ops/s
Iteration   1: 16411724.540 ops/s
Iteration   2: 16409833.744 ops/s
Iteration   3: 16212250.481 ops/s
Iteration   4: 16152282.496 ops/s
Iteration   5: 16495419.580 ops/s
Iteration   6: 16470483.419 ops/s
Iteration   7: 16528151.828 ops/s
Iteration   8: 16046755.211 ops/s
Iteration   9: 16228961.713 ops/s
Iteration  10: 16116918.135 ops/s
Iteration  11: 16540679.342 ops/s
Iteration  12: 16480134.032 ops/s
Iteration  13: 16493832.117 ops/s
Iteration  14: 16485338.227 ops/s
Iteration  15: 16503313.199 ops/s
Iteration  16: 16378171.441 ops/s
Iteration  17: 16388869.633 ops/s
Iteration  18: 16492838.508 ops/s
Iteration  19: 16451159.102 ops/s
Iteration  20: 16367352.209 ops/s
Iteration  21: 16518367.599 ops/s
Iteration  22: 16448788.448 ops/s
Iteration  23: 16486737.529 ops/s
Iteration  24: 16508184.801 ops/s
Iteration  25: 16205387.995 ops/s
Iteration  26: 16451616.017 ops/s
Iteration  27: 16372939.407 ops/s
Iteration  28: 16149042.625 ops/s
Iteration  29: 16355670.781 ops/s
Iteration  30: 16437231.540 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_remove":
  16386281.190 ±(99.9%) 93252.657 ops/s [Average]
  (min, avg, max) = (16046755.211, 16386281.190, 16540679.342), stdev = 139576.197
  CI (99.9%): [16293028.533, 16479533.847] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_remove  thrpt   30  16386281.190 ± 93252.657  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2036132.401 ops/s
# Warmup Iteration   2: 4328192.602 ops/s
# Warmup Iteration   3: 3651343.766 ops/s
# Warmup Iteration   4: 4367187.630 ops/s
# Warmup Iteration   5: 4377945.854 ops/s
# Warmup Iteration   6: 4371596.418 ops/s
# Warmup Iteration   7: 4353984.801 ops/s
# Warmup Iteration   8: 4364846.473 ops/s
# Warmup Iteration   9: 4366591.086 ops/s
# Warmup Iteration  10: 4375664.069 ops/s
# Warmup Iteration  11: 4357932.437 ops/s
# Warmup Iteration  12: 4353923.337 ops/s
# Warmup Iteration  13: 4338858.391 ops/s
# Warmup Iteration  14: 4372466.146 ops/s
# Warmup Iteration  15: 4369610.767 ops/s
# Warmup Iteration  16: 4369797.108 ops/s
# Warmup Iteration  17: 4338815.560 ops/s
# Warmup Iteration  18: 4330534.566 ops/s
# Warmup Iteration  19: 4352297.001 ops/s
# Warmup Iteration  20: 4326792.490 ops/s
# Warmup Iteration  21: 4346498.631 ops/s
# Warmup Iteration  22: 4369371.215 ops/s
# Warmup Iteration  23: 4369194.197 ops/s
# Warmup Iteration  24: 4360667.131 ops/s
# Warmup Iteration  25: 4374435.819 ops/s
# Warmup Iteration  26: 4366424.856 ops/s
# Warmup Iteration  27: 4281945.518 ops/s
# Warmup Iteration  28: 4369360.557 ops/s
# Warmup Iteration  29: 4313950.076 ops/s
# Warmup Iteration  30: 4352321.481 ops/s
Iteration   1: 4361218.401 ops/s
Iteration   2: 4373565.343 ops/s
Iteration   3: 4348623.558 ops/s
Iteration   4: 4382150.166 ops/s
Iteration   5: 4367142.250 ops/s
Iteration   6: 4328956.458 ops/s
Iteration   7: 4284303.633 ops/s
Iteration   8: 4351808.487 ops/s
Iteration   9: 4287655.860 ops/s
Iteration  10: 4307100.225 ops/s
Iteration  11: 4373542.877 ops/s
Iteration  12: 4354834.106 ops/s
Iteration  13: 4367215.846 ops/s
Iteration  14: 4289788.855 ops/s
Iteration  15: 4358405.787 ops/s
Iteration  16: 4338383.911 ops/s
Iteration  17: 4369583.806 ops/s
Iteration  18: 4360238.055 ops/s
Iteration  19: 4367679.949 ops/s
Iteration  20: 4355104.829 ops/s
Iteration  21: 4367788.487 ops/s
Iteration  22: 4372574.056 ops/s
Iteration  23: 4371735.608 ops/s
Iteration  24: 4230772.495 ops/s
Iteration  25: 4361304.563 ops/s
Iteration  26: 4283256.233 ops/s
Iteration  27: 4367327.836 ops/s
Iteration  28: 4382623.742 ops/s
Iteration  29: 4350704.225 ops/s
Iteration  30: 4376687.234 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_removeAll":
  4346402.563 ±(99.9%) 24756.275 ops/s [Average]
  (min, avg, max) = (4230772.495, 4346402.563, 4382623.742), stdev = 37054.030
  CI (99.9%): [4321646.288, 4371158.838] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_removeAll  thrpt   30  4346402.563 ± 24756.275  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1526520.324 ops/s
# Warmup Iteration   2: 3390685.632 ops/s
# Warmup Iteration   3: 2807049.037 ops/s
# Warmup Iteration   4: 3381340.534 ops/s
# Warmup Iteration   5: 3370568.467 ops/s
# Warmup Iteration   6: 3377326.830 ops/s
# Warmup Iteration   7: 3367426.499 ops/s
# Warmup Iteration   8: 3385690.022 ops/s
# Warmup Iteration   9: 3371862.722 ops/s
# Warmup Iteration  10: 3359119.335 ops/s
# Warmup Iteration  11: 3390826.667 ops/s
# Warmup Iteration  12: 3384769.876 ops/s
# Warmup Iteration  13: 3382621.078 ops/s
# Warmup Iteration  14: 3384356.832 ops/s
# Warmup Iteration  15: 3378074.580 ops/s
# Warmup Iteration  16: 3374170.068 ops/s
# Warmup Iteration  17: 3392362.412 ops/s
# Warmup Iteration  18: 3349790.738 ops/s
# Warmup Iteration  19: 3366787.901 ops/s
# Warmup Iteration  20: 3373468.495 ops/s
# Warmup Iteration  21: 3375497.255 ops/s
# Warmup Iteration  22: 3377515.460 ops/s
# Warmup Iteration  23: 3349863.577 ops/s
# Warmup Iteration  24: 3376057.521 ops/s
# Warmup Iteration  25: 3381894.630 ops/s
# Warmup Iteration  26: 3361672.847 ops/s
# Warmup Iteration  27: 3368986.903 ops/s
# Warmup Iteration  28: 3377300.119 ops/s
# Warmup Iteration  29: 3377888.006 ops/s
# Warmup Iteration  30: 3386263.828 ops/s
Iteration   1: 3350378.513 ops/s
Iteration   2: 3385772.481 ops/s
Iteration   3: 3373114.129 ops/s
Iteration   4: 3364955.844 ops/s
Iteration   5: 3352570.984 ops/s
Iteration   6: 3379903.080 ops/s
Iteration   7: 3327480.039 ops/s
Iteration   8: 3377080.549 ops/s
Iteration   9: 3374503.807 ops/s
Iteration  10: 3337640.541 ops/s
Iteration  11: 3388950.175 ops/s
Iteration  12: 3362615.779 ops/s
Iteration  13: 3366528.443 ops/s
Iteration  14: 3395866.393 ops/s
Iteration  15: 3382790.163 ops/s
Iteration  16: 3394825.134 ops/s
Iteration  17: 3382332.740 ops/s
Iteration  18: 3383953.228 ops/s
Iteration  19: 3374473.330 ops/s
Iteration  20: 3332889.095 ops/s
Iteration  21: 3365572.332 ops/s
Iteration  22: 3376585.361 ops/s
Iteration  23: 3365100.867 ops/s
Iteration  24: 3389951.788 ops/s
Iteration  25: 3369238.018 ops/s
Iteration  26: 3364000.540 ops/s
Iteration  27: 3377888.213 ops/s
Iteration  28: 3269387.994 ops/s
Iteration  29: 3374050.668 ops/s
Iteration  30: 3384581.567 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable":
  3367499.393 ±(99.9%) 16812.113 ops/s [Average]
  (min, avg, max) = (3269387.994, 3367499.393, 3395866.393), stdev = 25163.581
  CI (99.9%): [3350687.280, 3384311.506] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  3367499.393 ± 16812.113  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 614885.710 ops/s
# Warmup Iteration   2: 1356806.326 ops/s
# Warmup Iteration   3: 1134919.873 ops/s
# Warmup Iteration   4: 1359425.884 ops/s
# Warmup Iteration   5: 1354187.227 ops/s
# Warmup Iteration   6: 1356630.620 ops/s
# Warmup Iteration   7: 1356106.878 ops/s
# Warmup Iteration   8: 1359468.943 ops/s
# Warmup Iteration   9: 1362929.043 ops/s
# Warmup Iteration  10: 1355929.165 ops/s
# Warmup Iteration  11: 1346240.597 ops/s
# Warmup Iteration  12: 1360008.760 ops/s
# Warmup Iteration  13: 1333865.316 ops/s
# Warmup Iteration  14: 1354626.087 ops/s
# Warmup Iteration  15: 1357181.482 ops/s
# Warmup Iteration  16: 1349344.482 ops/s
# Warmup Iteration  17: 1348089.744 ops/s
# Warmup Iteration  18: 1361079.858 ops/s
# Warmup Iteration  19: 1362839.347 ops/s
# Warmup Iteration  20: 1357456.910 ops/s
# Warmup Iteration  21: 1353443.906 ops/s
# Warmup Iteration  22: 1356723.228 ops/s
# Warmup Iteration  23: 1351163.327 ops/s
# Warmup Iteration  24: 1350539.098 ops/s
# Warmup Iteration  25: 1355541.491 ops/s
# Warmup Iteration  26: 1356894.313 ops/s
# Warmup Iteration  27: 1355622.806 ops/s
# Warmup Iteration  28: 1358543.557 ops/s
# Warmup Iteration  29: 1345368.689 ops/s
# Warmup Iteration  30: 1353693.567 ops/s
Iteration   1: 1344315.338 ops/s
Iteration   2: 1357388.762 ops/s
Iteration   3: 1359414.981 ops/s
Iteration   4: 1354244.745 ops/s
Iteration   5: 1359056.612 ops/s
Iteration   6: 1361934.251 ops/s
Iteration   7: 1356600.050 ops/s
Iteration   8: 1345485.059 ops/s
Iteration   9: 1362641.334 ops/s
Iteration  10: 1344624.265 ops/s
Iteration  11: 1358369.764 ops/s
Iteration  12: 1358710.675 ops/s
Iteration  13: 1353268.163 ops/s
Iteration  14: 1367115.622 ops/s
Iteration  15: 1357153.581 ops/s
Iteration  16: 1357172.522 ops/s
Iteration  17: 1346687.324 ops/s
Iteration  18: 1363640.952 ops/s
Iteration  19: 1349678.024 ops/s
Iteration  20: 1352960.611 ops/s
Iteration  21: 1357634.603 ops/s
Iteration  22: 1360961.107 ops/s
Iteration  23: 1352249.436 ops/s
Iteration  24: 1360806.482 ops/s
Iteration  25: 1357089.535 ops/s
Iteration  26: 1358408.700 ops/s
Iteration  27: 1361218.605 ops/s
Iteration  28: 1362076.574 ops/s
Iteration  29: 1355601.299 ops/s
Iteration  30: 1360382.841 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_retainAll":
  1356563.061 ±(99.9%) 3861.332 ops/s [Average]
  (min, avg, max) = (1344315.338, 1356563.061, 1367115.622), stdev = 5779.460
  CI (99.9%): [1352701.729, 1360424.392] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_retainAll  thrpt   30  1356563.061 ± 3861.332  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 456124.957 ops/s
# Warmup Iteration   2: 1061361.315 ops/s
# Warmup Iteration   3: 929877.312 ops/s
# Warmup Iteration   4: 1017528.209 ops/s
# Warmup Iteration   5: 1067124.432 ops/s
# Warmup Iteration   6: 1067545.005 ops/s
# Warmup Iteration   7: 1057353.897 ops/s
# Warmup Iteration   8: 1068308.690 ops/s
# Warmup Iteration   9: 1067051.741 ops/s
# Warmup Iteration  10: 1068683.652 ops/s
# Warmup Iteration  11: 1068840.972 ops/s
# Warmup Iteration  12: 1054041.238 ops/s
# Warmup Iteration  13: 1064800.560 ops/s
# Warmup Iteration  14: 1068669.227 ops/s
# Warmup Iteration  15: 1059044.645 ops/s
# Warmup Iteration  16: 1061914.694 ops/s
# Warmup Iteration  17: 1066997.418 ops/s
# Warmup Iteration  18: 1065097.172 ops/s
# Warmup Iteration  19: 1060014.528 ops/s
# Warmup Iteration  20: 1044536.920 ops/s
# Warmup Iteration  21: 1066773.799 ops/s
# Warmup Iteration  22: 1065602.325 ops/s
# Warmup Iteration  23: 1068866.056 ops/s
# Warmup Iteration  24: 1064854.484 ops/s
# Warmup Iteration  25: 1064357.703 ops/s
# Warmup Iteration  26: 1066859.336 ops/s
# Warmup Iteration  27: 1068495.916 ops/s
# Warmup Iteration  28: 1065830.023 ops/s
# Warmup Iteration  29: 1063549.127 ops/s
# Warmup Iteration  30: 1068037.598 ops/s
Iteration   1: 1069574.462 ops/s
Iteration   2: 1066870.626 ops/s
Iteration   3: 1070269.641 ops/s
Iteration   4: 1065751.447 ops/s
Iteration   5: 1066623.169 ops/s
Iteration   6: 1061251.018 ops/s
Iteration   7: 1070572.037 ops/s
Iteration   8: 1070098.096 ops/s
Iteration   9: 1040611.126 ops/s
Iteration  10: 1071038.051 ops/s
Iteration  11: 1073660.328 ops/s
Iteration  12: 1066080.504 ops/s
Iteration  13: 1064822.968 ops/s
Iteration  14: 1071109.115 ops/s
Iteration  15: 1073147.129 ops/s
Iteration  16: 1067763.624 ops/s
Iteration  17: 1067650.929 ops/s
Iteration  18: 1068265.931 ops/s
Iteration  19: 1067625.992 ops/s
Iteration  20: 1054456.025 ops/s
Iteration  21: 1048029.526 ops/s
Iteration  22: 1071843.657 ops/s
Iteration  23: 1069498.221 ops/s
Iteration  24: 1064356.212 ops/s
Iteration  25: 1069791.649 ops/s
Iteration  26: 1069934.714 ops/s
Iteration  27: 1069279.103 ops/s
Iteration  28: 1049595.695 ops/s
Iteration  29: 1068612.140 ops/s
Iteration  30: 1069663.405 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable":
  1065928.218 ±(99.9%) 5187.663 ops/s [Average]
  (min, avg, max) = (1040611.126, 1065928.218, 1073660.328), stdev = 7764.651
  CI (99.9%): [1060740.555, 1071115.881] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  1065928.218 ± 5187.663  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6599161.404 ops/s
# Warmup Iteration   2: 12333704.428 ops/s
# Warmup Iteration   3: 12230150.453 ops/s
# Warmup Iteration   4: 13406583.431 ops/s
# Warmup Iteration   5: 13415540.873 ops/s
# Warmup Iteration   6: 13402491.267 ops/s
# Warmup Iteration   7: 13407246.451 ops/s
# Warmup Iteration   8: 13416110.708 ops/s
# Warmup Iteration   9: 13412743.907 ops/s
# Warmup Iteration  10: 13409212.638 ops/s
# Warmup Iteration  11: 13382980.339 ops/s
# Warmup Iteration  12: 13409992.724 ops/s
# Warmup Iteration  13: 13422410.465 ops/s
# Warmup Iteration  14: 13397114.511 ops/s
# Warmup Iteration  15: 13430815.824 ops/s
# Warmup Iteration  16: 13403593.435 ops/s
# Warmup Iteration  17: 13288691.225 ops/s
# Warmup Iteration  18: 13295889.326 ops/s
# Warmup Iteration  19: 13418728.088 ops/s
# Warmup Iteration  20: 13218260.924 ops/s
# Warmup Iteration  21: 13447835.898 ops/s
# Warmup Iteration  22: 13256068.177 ops/s
# Warmup Iteration  23: 13381176.368 ops/s
# Warmup Iteration  24: 13179785.126 ops/s
# Warmup Iteration  25: 13436303.167 ops/s
# Warmup Iteration  26: 13184529.832 ops/s
# Warmup Iteration  27: 13386246.909 ops/s
# Warmup Iteration  28: 13307512.094 ops/s
# Warmup Iteration  29: 13380986.417 ops/s
# Warmup Iteration  30: 13418613.947 ops/s
Iteration   1: 13137300.191 ops/s
Iteration   2: 13376572.789 ops/s
Iteration   3: 13304927.515 ops/s
Iteration   4: 13471484.841 ops/s
Iteration   5: 13299261.155 ops/s
Iteration   6: 13172103.093 ops/s
Iteration   7: 13454571.917 ops/s
Iteration   8: 13420555.411 ops/s
Iteration   9: 13413668.292 ops/s
Iteration  10: 13149539.358 ops/s
Iteration  11: 13169152.749 ops/s
Iteration  12: 13479600.203 ops/s
Iteration  13: 13362153.329 ops/s
Iteration  14: 13379825.869 ops/s
Iteration  15: 13376135.719 ops/s
Iteration  16: 13371575.363 ops/s
Iteration  17: 13429208.190 ops/s
Iteration  18: 13326136.007 ops/s
Iteration  19: 13305202.601 ops/s
Iteration  20: 13321895.211 ops/s
Iteration  21: 13391973.866 ops/s
Iteration  22: 13405369.671 ops/s
Iteration  23: 13404207.145 ops/s
Iteration  24: 13481014.686 ops/s
Iteration  25: 13389882.955 ops/s
Iteration  26: 13427225.882 ops/s
Iteration  27: 13460801.603 ops/s
Iteration  28: 13350630.572 ops/s
Iteration  29: 13459002.197 ops/s
Iteration  30: 13153470.248 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_select":
  13354814.954 ±(99.9%) 69411.398 ops/s [Average]
  (min, avg, max) = (13137300.191, 13354814.954, 13481014.686), stdev = 103891.721
  CI (99.9%): [13285403.556, 13424226.352] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_select  thrpt   30  13354814.954 ± 69411.398  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2746633.383 ops/s
# Warmup Iteration   2: 4623099.776 ops/s
# Warmup Iteration   3: 5537961.550 ops/s
# Warmup Iteration   4: 5464093.358 ops/s
# Warmup Iteration   5: 5463517.615 ops/s
# Warmup Iteration   6: 5472148.563 ops/s
# Warmup Iteration   7: 5533515.294 ops/s
# Warmup Iteration   8: 5457408.985 ops/s
# Warmup Iteration   9: 5465080.864 ops/s
# Warmup Iteration  10: 5508772.723 ops/s
# Warmup Iteration  11: 5534275.098 ops/s
# Warmup Iteration  12: 5511819.801 ops/s
# Warmup Iteration  13: 5511096.993 ops/s
# Warmup Iteration  14: 5520570.919 ops/s
# Warmup Iteration  15: 5525146.121 ops/s
# Warmup Iteration  16: 5563804.559 ops/s
# Warmup Iteration  17: 5518055.148 ops/s
# Warmup Iteration  18: 5546788.018 ops/s
# Warmup Iteration  19: 5502266.065 ops/s
# Warmup Iteration  20: 5461782.289 ops/s
# Warmup Iteration  21: 5538186.202 ops/s
# Warmup Iteration  22: 5509095.033 ops/s
# Warmup Iteration  23: 5557083.039 ops/s
# Warmup Iteration  24: 5503098.547 ops/s
# Warmup Iteration  25: 5563827.009 ops/s
# Warmup Iteration  26: 5490077.527 ops/s
# Warmup Iteration  27: 5491821.700 ops/s
# Warmup Iteration  28: 5546269.865 ops/s
# Warmup Iteration  29: 5565900.596 ops/s
# Warmup Iteration  30: 5512710.777 ops/s
Iteration   1: 5490866.327 ops/s
Iteration   2: 5496862.132 ops/s
Iteration   3: 5410474.251 ops/s
Iteration   4: 5443861.767 ops/s
Iteration   5: 5537486.097 ops/s
Iteration   6: 5540517.096 ops/s
Iteration   7: 5511967.932 ops/s
Iteration   8: 5525677.842 ops/s
Iteration   9: 5513030.672 ops/s
Iteration  10: 5491793.374 ops/s
Iteration  11: 5535940.179 ops/s
Iteration  12: 5571129.421 ops/s
Iteration  13: 5541401.868 ops/s
Iteration  14: 5555624.757 ops/s
Iteration  15: 5521756.322 ops/s
Iteration  16: 5512284.397 ops/s
Iteration  17: 5406990.095 ops/s
Iteration  18: 5550939.933 ops/s
Iteration  19: 5541458.903 ops/s
Iteration  20: 5555995.967 ops/s
Iteration  21: 5532130.409 ops/s
Iteration  22: 5424177.981 ops/s
Iteration  23: 5526679.258 ops/s
Iteration  24: 5519256.709 ops/s
Iteration  25: 5553292.089 ops/s
Iteration  26: 5529015.144 ops/s
Iteration  27: 5538630.678 ops/s
Iteration  28: 5513087.337 ops/s
Iteration  29: 5505399.154 ops/s
Iteration  30: 5491979.121 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_size":
  5512990.241 ±(99.9%) 28146.852 ops/s [Average]
  (min, avg, max) = (5406990.095, 5512990.241, 5571129.421), stdev = 42128.886
  CI (99.9%): [5484843.389, 5541137.093] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_size  thrpt   30  5512990.241 ± 28146.852  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 164859158.328 ops/s
# Warmup Iteration   2: 300336644.802 ops/s
# Warmup Iteration   3: 261791791.103 ops/s
# Warmup Iteration   4: 306067314.846 ops/s
# Warmup Iteration   5: 305238264.278 ops/s
# Warmup Iteration   6: 304698039.893 ops/s
# Warmup Iteration   7: 307192865.612 ops/s
# Warmup Iteration   8: 305183761.096 ops/s
# Warmup Iteration   9: 302276067.008 ops/s
# Warmup Iteration  10: 305209219.709 ops/s
# Warmup Iteration  11: 303101460.051 ops/s
# Warmup Iteration  12: 304279588.125 ops/s
# Warmup Iteration  13: 305612203.644 ops/s
# Warmup Iteration  14: 304259070.783 ops/s
# Warmup Iteration  15: 305411113.019 ops/s
# Warmup Iteration  16: 304276248.445 ops/s
# Warmup Iteration  17: 300345877.699 ops/s
# Warmup Iteration  18: 301768285.023 ops/s
# Warmup Iteration  19: 303789454.915 ops/s
# Warmup Iteration  20: 301682267.246 ops/s
# Warmup Iteration  21: 303499514.667 ops/s
# Warmup Iteration  22: 302043101.449 ops/s
# Warmup Iteration  23: 302983843.252 ops/s
# Warmup Iteration  24: 299839494.412 ops/s
# Warmup Iteration  25: 302525284.383 ops/s
# Warmup Iteration  26: 302432560.641 ops/s
# Warmup Iteration  27: 301913923.467 ops/s
# Warmup Iteration  28: 302361776.926 ops/s
# Warmup Iteration  29: 301497225.594 ops/s
# Warmup Iteration  30: 303017470.505 ops/s
Iteration   1: 301044430.760 ops/s
Iteration   2: 297425365.700 ops/s
Iteration   3: 300012912.858 ops/s
Iteration   4: 303797380.131 ops/s
Iteration   5: 302278609.596 ops/s
Iteration   6: 302295538.179 ops/s
Iteration   7: 302178402.737 ops/s
Iteration   8: 302100540.041 ops/s
Iteration   9: 297005873.424 ops/s
Iteration  10: 301113026.820 ops/s
Iteration  11: 300249869.757 ops/s
Iteration  12: 302699219.229 ops/s
Iteration  13: 294843581.194 ops/s
Iteration  14: 301970293.563 ops/s
Iteration  15: 301453840.685 ops/s
Iteration  16: 300652251.412 ops/s
Iteration  17: 302952335.155 ops/s
Iteration  18: 302839940.878 ops/s
Iteration  19: 303480419.060 ops/s
Iteration  20: 301114732.940 ops/s
Iteration  21: 301255149.640 ops/s
Iteration  22: 298374555.127 ops/s
Iteration  23: 301512100.486 ops/s
Iteration  24: 300949553.597 ops/s
Iteration  25: 300465653.978 ops/s
Iteration  26: 301937013.387 ops/s
Iteration  27: 302337543.855 ops/s
Iteration  28: 303273532.737 ops/s
Iteration  29: 300677729.084 ops/s
Iteration  30: 301108560.269 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_testEquals":
  301113331.876 ±(99.9%) 1327649.738 ops/s [Average]
  (min, avg, max) = (294843581.194, 301113331.876, 303797380.131), stdev = 1987163.776
  CI (99.9%): [299785682.138, 302440981.614] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt          Score         Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_testEquals  thrpt   30  301113331.876 ± 1327649.738  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 162964014.804 ops/s
# Warmup Iteration   2: 299032536.727 ops/s
# Warmup Iteration   3: 257731749.618 ops/s
# Warmup Iteration   4: 300155885.927 ops/s
# Warmup Iteration   5: 301540216.864 ops/s
# Warmup Iteration   6: 300755039.410 ops/s
# Warmup Iteration   7: 301535501.558 ops/s
# Warmup Iteration   8: 298261296.684 ops/s
# Warmup Iteration   9: 301514044.190 ops/s
# Warmup Iteration  10: 300910812.672 ops/s
# Warmup Iteration  11: 292992548.239 ops/s
# Warmup Iteration  12: 298409867.555 ops/s
# Warmup Iteration  13: 301434050.723 ops/s
# Warmup Iteration  14: 301112758.707 ops/s
# Warmup Iteration  15: 301580133.998 ops/s
# Warmup Iteration  16: 302862644.089 ops/s
# Warmup Iteration  17: 300804282.590 ops/s
# Warmup Iteration  18: 300481297.348 ops/s
# Warmup Iteration  19: 302172271.021 ops/s
# Warmup Iteration  20: 298411324.638 ops/s
# Warmup Iteration  21: 302164666.278 ops/s
# Warmup Iteration  22: 302292857.705 ops/s
# Warmup Iteration  23: 301955725.533 ops/s
# Warmup Iteration  24: 300320250.659 ops/s
# Warmup Iteration  25: 301542808.618 ops/s
# Warmup Iteration  26: 301613070.369 ops/s
# Warmup Iteration  27: 301486740.589 ops/s
# Warmup Iteration  28: 300932147.490 ops/s
# Warmup Iteration  29: 299259427.162 ops/s
# Warmup Iteration  30: 300280627.720 ops/s
Iteration   1: 300011963.391 ops/s
Iteration   2: 301114066.183 ops/s
Iteration   3: 299430992.103 ops/s
Iteration   4: 301078566.131 ops/s
Iteration   5: 301756889.243 ops/s
Iteration   6: 301911046.097 ops/s
Iteration   7: 299513332.090 ops/s
Iteration   8: 301099502.858 ops/s
Iteration   9: 302415188.885 ops/s
Iteration  10: 301978469.503 ops/s
Iteration  11: 300829597.183 ops/s
Iteration  12: 301191446.288 ops/s
Iteration  13: 299731699.258 ops/s
Iteration  14: 300324415.858 ops/s
Iteration  15: 302105401.507 ops/s
Iteration  16: 300406654.092 ops/s
Iteration  17: 298502648.710 ops/s
Iteration  18: 296917947.828 ops/s
Iteration  19: 299758067.402 ops/s
Iteration  20: 301039285.170 ops/s
Iteration  21: 301089437.918 ops/s
Iteration  22: 300515669.518 ops/s
Iteration  23: 299805476.698 ops/s
Iteration  24: 300861606.723 ops/s
Iteration  25: 301711180.599 ops/s
Iteration  26: 300328495.715 ops/s
Iteration  27: 301879131.381 ops/s
Iteration  28: 301639416.756 ops/s
Iteration  29: 299363229.536 ops/s
Iteration  30: 301915108.528 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode":
  300674197.772 ±(99.9%) 807359.142 ops/s [Average]
  (min, avg, max) = (296917947.828, 300674197.772, 302415188.885), stdev = 1208417.248
  CI (99.9%): [299866838.630, 301481556.914] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt          Score        Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode  thrpt   30  300674197.772 ± 807359.142  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 161707975.577 ops/s
# Warmup Iteration   2: 299957117.699 ops/s
# Warmup Iteration   3: 259831511.884 ops/s
# Warmup Iteration   4: 301919287.031 ops/s
# Warmup Iteration   5: 305268137.250 ops/s
# Warmup Iteration   6: 304122130.685 ops/s
# Warmup Iteration   7: 305044088.284 ops/s
# Warmup Iteration   8: 303962042.219 ops/s
# Warmup Iteration   9: 306238181.986 ops/s
# Warmup Iteration  10: 306978875.897 ops/s
# Warmup Iteration  11: 305448590.987 ops/s
# Warmup Iteration  12: 307132523.552 ops/s
# Warmup Iteration  13: 307788284.618 ops/s
# Warmup Iteration  14: 308507996.436 ops/s
# Warmup Iteration  15: 307955856.594 ops/s
# Warmup Iteration  16: 307375556.303 ops/s
# Warmup Iteration  17: 308223867.298 ops/s
# Warmup Iteration  18: 308027309.196 ops/s
# Warmup Iteration  19: 307675128.358 ops/s
# Warmup Iteration  20: 308347157.469 ops/s
# Warmup Iteration  21: 307514821.900 ops/s
# Warmup Iteration  22: 307870123.774 ops/s
# Warmup Iteration  23: 308416207.116 ops/s
# Warmup Iteration  24: 308088487.073 ops/s
# Warmup Iteration  25: 308465846.399 ops/s
# Warmup Iteration  26: 308113989.528 ops/s
# Warmup Iteration  27: 308348121.724 ops/s
# Warmup Iteration  28: 306870736.566 ops/s
# Warmup Iteration  29: 308577754.167 ops/s
# Warmup Iteration  30: 307734749.025 ops/s
Iteration   1: 309326059.121 ops/s
Iteration   2: 308365852.463 ops/s
Iteration   3: 307341370.858 ops/s
Iteration   4: 306593954.588 ops/s
Iteration   5: 307013371.610 ops/s
Iteration   6: 302582347.575 ops/s
Iteration   7: 307229382.035 ops/s
Iteration   8: 307859970.448 ops/s
Iteration   9: 309135892.278 ops/s
Iteration  10: 306880391.843 ops/s
Iteration  11: 304788766.108 ops/s
Iteration  12: 304623897.808 ops/s
Iteration  13: 308188440.413 ops/s
Iteration  14: 309355394.429 ops/s
Iteration  15: 301164157.394 ops/s
Iteration  16: 306528243.610 ops/s
Iteration  17: 308243921.905 ops/s
Iteration  18: 307554385.195 ops/s
Iteration  19: 306633796.785 ops/s
Iteration  20: 305645901.633 ops/s
Iteration  21: 304451045.992 ops/s
Iteration  22: 306959507.960 ops/s
Iteration  23: 307301016.515 ops/s
Iteration  24: 307534540.070 ops/s
Iteration  25: 301518588.244 ops/s
Iteration  26: 303268909.800 ops/s
Iteration  27: 304685877.985 ops/s
Iteration  28: 303358235.378 ops/s
Iteration  29: 294638412.339 ops/s
Iteration  30: 303192766.209 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_testToString":
  305732146.620 ±(99.9%) 2063292.752 ops/s [Average]
  (min, avg, max) = (294638412.339, 305732146.620, 309355394.429), stdev = 3088239.692
  CI (99.9%): [303668853.868, 307795439.372] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt          Score         Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_testToString  thrpt   30  305732146.620 ± 2063292.752  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2019868.000 ops/s
# Warmup Iteration   2: 4378108.648 ops/s
# Warmup Iteration   3: 3807604.427 ops/s
# Warmup Iteration   4: 4501219.626 ops/s
# Warmup Iteration   5: 4461746.259 ops/s
# Warmup Iteration   6: 4486328.311 ops/s
# Warmup Iteration   7: 4513099.714 ops/s
# Warmup Iteration   8: 4494978.631 ops/s
# Warmup Iteration   9: 4499450.393 ops/s
# Warmup Iteration  10: 4460396.751 ops/s
# Warmup Iteration  11: 4504717.128 ops/s
# Warmup Iteration  12: 4530613.565 ops/s
# Warmup Iteration  13: 4482035.435 ops/s
# Warmup Iteration  14: 4508727.823 ops/s
# Warmup Iteration  15: 4495325.138 ops/s
# Warmup Iteration  16: 4490563.083 ops/s
# Warmup Iteration  17: 4447210.124 ops/s
# Warmup Iteration  18: 4466748.670 ops/s
# Warmup Iteration  19: 4494014.440 ops/s
# Warmup Iteration  20: 4453110.925 ops/s
# Warmup Iteration  21: 4513960.221 ops/s
# Warmup Iteration  22: 4448771.925 ops/s
# Warmup Iteration  23: 4498784.342 ops/s
# Warmup Iteration  24: 4469575.578 ops/s
# Warmup Iteration  25: 4464182.737 ops/s
# Warmup Iteration  26: 4510046.822 ops/s
# Warmup Iteration  27: 4464240.437 ops/s
# Warmup Iteration  28: 4508679.590 ops/s
# Warmup Iteration  29: 4492971.487 ops/s
# Warmup Iteration  30: 4481402.794 ops/s
Iteration   1: 4508747.077 ops/s
Iteration   2: 4525421.991 ops/s
Iteration   3: 4521492.104 ops/s
Iteration   4: 4514564.496 ops/s
Iteration   5: 4440192.315 ops/s
Iteration   6: 4483517.089 ops/s
Iteration   7: 4496460.185 ops/s
Iteration   8: 4522912.307 ops/s
Iteration   9: 4524727.012 ops/s
Iteration  10: 4528678.779 ops/s
Iteration  11: 4524505.247 ops/s
Iteration  12: 4481796.792 ops/s
Iteration  13: 4465509.458 ops/s
Iteration  14: 4462361.178 ops/s
Iteration  15: 4379742.204 ops/s
Iteration  16: 4486815.902 ops/s
Iteration  17: 4463227.563 ops/s
Iteration  18: 4516449.371 ops/s
Iteration  19: 4443561.625 ops/s
Iteration  20: 4517900.955 ops/s
Iteration  21: 4424313.981 ops/s
Iteration  22: 4505189.837 ops/s
Iteration  23: 4514358.609 ops/s
Iteration  24: 4507780.145 ops/s
Iteration  25: 4491321.826 ops/s
Iteration  26: 4506990.784 ops/s
Iteration  27: 4533690.096 ops/s
Iteration  28: 4520528.195 ops/s
Iteration  29: 4522120.064 ops/s
Iteration  30: 4524142.111 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_toArray":
  4495300.643 ±(99.9%) 24384.949 ops/s [Average]
  (min, avg, max) = (4379742.204, 4495300.643, 4533690.096), stdev = 36498.247
  CI (99.9%): [4470915.694, 4519685.593] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_toArray  thrpt   30  4495300.643 ± 24384.949  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1038317.029 ops/s
# Warmup Iteration   2: 2381384.007 ops/s
# Warmup Iteration   3: 2371286.212 ops/s
# Warmup Iteration   4: 1973607.463 ops/s
# Warmup Iteration   5: 2368677.200 ops/s
# Warmup Iteration   6: 2355035.252 ops/s
# Warmup Iteration   7: 2376757.581 ops/s
# Warmup Iteration   8: 2382690.606 ops/s
# Warmup Iteration   9: 2359243.461 ops/s
# Warmup Iteration  10: 2355612.562 ops/s
# Warmup Iteration  11: 2387994.756 ops/s
# Warmup Iteration  12: 2382410.379 ops/s
# Warmup Iteration  13: 2377198.000 ops/s
# Warmup Iteration  14: 2365657.443 ops/s
# Warmup Iteration  15: 2371683.395 ops/s
# Warmup Iteration  16: 2388367.990 ops/s
# Warmup Iteration  17: 2380778.616 ops/s
# Warmup Iteration  18: 2378662.686 ops/s
# Warmup Iteration  19: 2381617.064 ops/s
# Warmup Iteration  20: 2387313.723 ops/s
# Warmup Iteration  21: 2363430.930 ops/s
# Warmup Iteration  22: 2384730.689 ops/s
# Warmup Iteration  23: 2366524.300 ops/s
# Warmup Iteration  24: 2378172.025 ops/s
# Warmup Iteration  25: 2378432.983 ops/s
# Warmup Iteration  26: 2368598.123 ops/s
# Warmup Iteration  27: 2381449.017 ops/s
# Warmup Iteration  28: 2379209.882 ops/s
# Warmup Iteration  29: 2387080.488 ops/s
# Warmup Iteration  30: 2378604.946 ops/s
Iteration   1: 2376103.174 ops/s
Iteration   2: 2383770.224 ops/s
Iteration   3: 2378544.363 ops/s
Iteration   4: 2332422.080 ops/s
Iteration   5: 2382220.789 ops/s
Iteration   6: 2384785.707 ops/s
Iteration   7: 2391002.375 ops/s
Iteration   8: 2377686.607 ops/s
Iteration   9: 2346051.427 ops/s
Iteration  10: 2372571.997 ops/s
Iteration  11: 2377734.139 ops/s
Iteration  12: 2372997.698 ops/s
Iteration  13: 2388104.189 ops/s
Iteration  14: 2378443.423 ops/s
Iteration  15: 2360917.483 ops/s
Iteration  16: 2346236.961 ops/s
Iteration  17: 2388253.575 ops/s
Iteration  18: 2375024.087 ops/s
Iteration  19: 2377424.345 ops/s
Iteration  20: 2378694.122 ops/s
Iteration  21: 2342730.697 ops/s
Iteration  22: 2384282.921 ops/s
Iteration  23: 2385633.292 ops/s
Iteration  24: 2351257.871 ops/s
Iteration  25: 2372842.064 ops/s
Iteration  26: 2384765.011 ops/s
Iteration  27: 2360749.159 ops/s
Iteration  28: 2379094.612 ops/s
Iteration  29: 2341351.569 ops/s
Iteration  30: 2385112.622 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_toBag":
  2371893.619 ±(99.9%) 10846.792 ops/s [Average]
  (min, avg, max) = (2332422.080, 2371893.619, 2391002.375), stdev = 16234.969
  CI (99.9%): [2361046.827, 2382740.411] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_toBag  thrpt   30  2371893.619 ± 10846.792  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1319443.430 ops/s
# Warmup Iteration   2: 3050914.249 ops/s
# Warmup Iteration   3: 2535725.390 ops/s
# Warmup Iteration   4: 3087973.263 ops/s
# Warmup Iteration   5: 3093657.696 ops/s
# Warmup Iteration   6: 3091006.315 ops/s
# Warmup Iteration   7: 3089251.731 ops/s
# Warmup Iteration   8: 3069516.576 ops/s
# Warmup Iteration   9: 3087447.786 ops/s
# Warmup Iteration  10: 3078061.716 ops/s
# Warmup Iteration  11: 3093152.832 ops/s
# Warmup Iteration  12: 3083847.115 ops/s
# Warmup Iteration  13: 3029566.346 ops/s
# Warmup Iteration  14: 3075823.432 ops/s
# Warmup Iteration  15: 3089205.333 ops/s
# Warmup Iteration  16: 3078729.120 ops/s
# Warmup Iteration  17: 3081775.874 ops/s
# Warmup Iteration  18: 3084982.195 ops/s
# Warmup Iteration  19: 3071276.276 ops/s
# Warmup Iteration  20: 3102527.261 ops/s
# Warmup Iteration  21: 3068123.685 ops/s
# Warmup Iteration  22: 3064299.542 ops/s
# Warmup Iteration  23: 3060160.960 ops/s
# Warmup Iteration  24: 3085611.473 ops/s
# Warmup Iteration  25: 3092300.409 ops/s
# Warmup Iteration  26: 3081949.893 ops/s
# Warmup Iteration  27: 3090415.718 ops/s
# Warmup Iteration  28: 3095340.978 ops/s
# Warmup Iteration  29: 3054646.512 ops/s
# Warmup Iteration  30: 3092853.138 ops/s
Iteration   1: 3078628.932 ops/s
Iteration   2: 3005267.782 ops/s
Iteration   3: 3091414.687 ops/s
Iteration   4: 3096343.243 ops/s
Iteration   5: 3098564.830 ops/s
Iteration   6: 3058323.971 ops/s
Iteration   7: 3093845.468 ops/s
Iteration   8: 3078555.324 ops/s
Iteration   9: 3049051.837 ops/s
Iteration  10: 3080891.298 ops/s
Iteration  11: 3076832.461 ops/s
Iteration  12: 3076852.320 ops/s
Iteration  13: 3071370.685 ops/s
Iteration  14: 3072974.456 ops/s
Iteration  15: 3097769.306 ops/s
Iteration  16: 3046952.695 ops/s
Iteration  17: 3095997.876 ops/s
Iteration  18: 3096158.030 ops/s
Iteration  19: 3098313.512 ops/s
Iteration  20: 3081207.747 ops/s
Iteration  21: 3077130.659 ops/s
Iteration  22: 3045591.639 ops/s
Iteration  23: 3083922.529 ops/s
Iteration  24: 3098628.285 ops/s
Iteration  25: 3078232.285 ops/s
Iteration  26: 3091273.481 ops/s
Iteration  27: 3073241.061 ops/s
Iteration  28: 3091779.549 ops/s
Iteration  29: 3084644.081 ops/s
Iteration  30: 3055757.494 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_toList":
  3077517.251 ±(99.9%) 13953.980 ops/s [Average]
  (min, avg, max) = (3005267.782, 3077517.251, 3098628.285), stdev = 20885.662
  CI (99.9%): [3063563.270, 3091471.231] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_toList  thrpt   30  3077517.251 ± 13953.980  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1984766.436 ops/s
# Warmup Iteration   2: 4791766.621 ops/s
# Warmup Iteration   3: 3951676.255 ops/s
# Warmup Iteration   4: 4886036.918 ops/s
# Warmup Iteration   5: 4871308.559 ops/s
# Warmup Iteration   6: 4879608.958 ops/s
# Warmup Iteration   7: 4843499.723 ops/s
# Warmup Iteration   8: 4876021.085 ops/s
# Warmup Iteration   9: 4844994.652 ops/s
# Warmup Iteration  10: 4865063.645 ops/s
# Warmup Iteration  11: 4829417.487 ops/s
# Warmup Iteration  12: 4842036.063 ops/s
# Warmup Iteration  13: 4864117.407 ops/s
# Warmup Iteration  14: 4871361.374 ops/s
# Warmup Iteration  15: 4866518.411 ops/s
# Warmup Iteration  16: 4862064.568 ops/s
# Warmup Iteration  17: 4860026.349 ops/s
# Warmup Iteration  18: 4849921.165 ops/s
# Warmup Iteration  19: 4855998.463 ops/s
# Warmup Iteration  20: 4855836.065 ops/s
# Warmup Iteration  21: 4868053.516 ops/s
# Warmup Iteration  22: 4821987.562 ops/s
# Warmup Iteration  23: 4853503.817 ops/s
# Warmup Iteration  24: 4881855.659 ops/s
# Warmup Iteration  25: 4877415.051 ops/s
# Warmup Iteration  26: 4876607.043 ops/s
# Warmup Iteration  27: 4878093.650 ops/s
# Warmup Iteration  28: 4859716.631 ops/s
# Warmup Iteration  29: 4858350.726 ops/s
# Warmup Iteration  30: 4855641.009 ops/s
Iteration   1: 4882956.686 ops/s
Iteration   2: 4868593.039 ops/s
Iteration   3: 4844739.919 ops/s
Iteration   4: 4784989.870 ops/s
Iteration   5: 4839890.337 ops/s
Iteration   6: 4863817.737 ops/s
Iteration   7: 4867407.417 ops/s
Iteration   8: 4859419.038 ops/s
Iteration   9: 4873214.094 ops/s
Iteration  10: 4854593.935 ops/s
Iteration  11: 4862662.821 ops/s
Iteration  12: 4869935.225 ops/s
Iteration  13: 4876907.393 ops/s
Iteration  14: 4874005.599 ops/s
Iteration  15: 4801755.262 ops/s
Iteration  16: 4861993.347 ops/s
Iteration  17: 4835657.843 ops/s
Iteration  18: 4868884.081 ops/s
Iteration  19: 4813272.186 ops/s
Iteration  20: 4801801.436 ops/s
Iteration  21: 4786167.944 ops/s
Iteration  22: 4848394.718 ops/s
Iteration  23: 4775713.077 ops/s
Iteration  24: 4853733.135 ops/s
Iteration  25: 4853411.327 ops/s
Iteration  26: 4858246.150 ops/s
Iteration  27: 4862435.792 ops/s
Iteration  28: 4880406.842 ops/s
Iteration  29: 4891261.941 ops/s
Iteration  30: 4874553.360 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_toSet":
  4849694.052 ±(99.9%) 20968.724 ops/s [Average]
  (min, avg, max) = (4775713.077, 4849694.052, 4891261.941), stdev = 31385.001
  CI (99.9%): [4828725.328, 4870662.776] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_toSet  thrpt   30  4849694.052 ± 20968.724  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 691711.350 ops/s
# Warmup Iteration   2: 768309.863 ops/s
# Warmup Iteration   3: 1000624.740 ops/s
# Warmup Iteration   4: 999162.750 ops/s
# Warmup Iteration   5: 1004019.550 ops/s
# Warmup Iteration   6: 984342.136 ops/s
# Warmup Iteration   7: 1000783.396 ops/s
# Warmup Iteration   8: 993169.439 ops/s
# Warmup Iteration   9: 1003103.055 ops/s
# Warmup Iteration  10: 832668.935 ops/s
# Warmup Iteration  11: 1007931.417 ops/s
# Warmup Iteration  12: 1005887.431 ops/s
# Warmup Iteration  13: 980672.732 ops/s
# Warmup Iteration  14: 1003177.791 ops/s
# Warmup Iteration  15: 1006756.447 ops/s
# Warmup Iteration  16: 996701.745 ops/s
# Warmup Iteration  17: 1050196.991 ops/s
# Warmup Iteration  18: 1062750.437 ops/s
# Warmup Iteration  19: 1065118.140 ops/s
# Warmup Iteration  20: 1059471.065 ops/s
# Warmup Iteration  21: 1058918.820 ops/s
# Warmup Iteration  22: 1057859.519 ops/s
# Warmup Iteration  23: 1050548.221 ops/s
# Warmup Iteration  24: 1059224.793 ops/s
# Warmup Iteration  25: 1061884.482 ops/s
# Warmup Iteration  26: 1066022.399 ops/s
# Warmup Iteration  27: 1056373.308 ops/s
# Warmup Iteration  28: 1063279.129 ops/s
# Warmup Iteration  29: 1061164.701 ops/s
# Warmup Iteration  30: 1068969.430 ops/s
Iteration   1: 1067853.039 ops/s
Iteration   2: 1066330.640 ops/s
Iteration   3: 1064586.704 ops/s
Iteration   4: 1064523.508 ops/s
Iteration   5: 1070032.101 ops/s
Iteration   6: 1065080.877 ops/s
Iteration   7: 1063274.305 ops/s
Iteration   8: 1069364.430 ops/s
Iteration   9: 1065509.706 ops/s
Iteration  10: 1059623.537 ops/s
Iteration  11: 1047982.773 ops/s
Iteration  12: 1069153.196 ops/s
Iteration  13: 1066095.294 ops/s
Iteration  14: 1064213.357 ops/s
Iteration  15: 1024628.940 ops/s
Iteration  16: 1063870.854 ops/s
Iteration  17: 1051231.681 ops/s
Iteration  18: 1070711.044 ops/s
Iteration  19: 1049264.589 ops/s
Iteration  20: 1056731.340 ops/s
Iteration  21: 1048028.307 ops/s
Iteration  22: 1063651.895 ops/s
Iteration  23: 1059160.881 ops/s
Iteration  24: 1040837.155 ops/s
Iteration  25: 1061857.420 ops/s
Iteration  26: 1059117.076 ops/s
Iteration  27: 1064436.630 ops/s
Iteration  28: 1053091.110 ops/s
Iteration  29: 1056697.332 ops/s
Iteration  30: 1062131.937 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_with":
  1059635.722 ±(99.9%) 6650.013 ops/s [Average]
  (min, avg, max) = (1024628.940, 1059635.722, 1070711.044), stdev = 9953.427
  CI (99.9%): [1052985.709, 1066285.734] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_with  thrpt   30  1059635.722 ± 6650.013  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 687441.993 ops/s
# Warmup Iteration   2: 783906.047 ops/s
# Warmup Iteration   3: 1002813.244 ops/s
# Warmup Iteration   4: 1014872.823 ops/s
# Warmup Iteration   5: 1001306.393 ops/s
# Warmup Iteration   6: 1013925.485 ops/s
# Warmup Iteration   7: 1004302.160 ops/s
# Warmup Iteration   8: 1006942.623 ops/s
# Warmup Iteration   9: 1010700.098 ops/s
# Warmup Iteration  10: 850864.236 ops/s
# Warmup Iteration  11: 1002840.346 ops/s
# Warmup Iteration  12: 1008813.736 ops/s
# Warmup Iteration  13: 1011357.621 ops/s
# Warmup Iteration  14: 1018773.537 ops/s
# Warmup Iteration  15: 1015703.144 ops/s
# Warmup Iteration  16: 1009495.279 ops/s
# Warmup Iteration  17: 1054815.710 ops/s
# Warmup Iteration  18: 1066743.495 ops/s
# Warmup Iteration  19: 1074253.826 ops/s
# Warmup Iteration  20: 1076568.649 ops/s
# Warmup Iteration  21: 1077140.352 ops/s
# Warmup Iteration  22: 1049394.337 ops/s
# Warmup Iteration  23: 1068146.690 ops/s
# Warmup Iteration  24: 1072304.080 ops/s
# Warmup Iteration  25: 1065755.418 ops/s
# Warmup Iteration  26: 1060603.941 ops/s
# Warmup Iteration  27: 1068610.293 ops/s
# Warmup Iteration  28: 1064077.863 ops/s
# Warmup Iteration  29: 1077439.298 ops/s
# Warmup Iteration  30: 1077554.203 ops/s
Iteration   1: 1080701.387 ops/s
Iteration   2: 1065685.225 ops/s
Iteration   3: 1071448.319 ops/s
Iteration   4: 1060847.381 ops/s
Iteration   5: 1075956.854 ops/s
Iteration   6: 1079529.352 ops/s
Iteration   7: 1077110.839 ops/s
Iteration   8: 1062097.661 ops/s
Iteration   9: 1072426.526 ops/s
Iteration  10: 1075792.086 ops/s
Iteration  11: 1071728.037 ops/s
Iteration  12: 1067981.443 ops/s
Iteration  13: 1064388.005 ops/s
Iteration  14: 1077322.037 ops/s
Iteration  15: 1071824.220 ops/s
Iteration  16: 1075064.165 ops/s
Iteration  17: 1073544.421 ops/s
Iteration  18: 1066969.705 ops/s
Iteration  19: 1073172.049 ops/s
Iteration  20: 1075550.695 ops/s
Iteration  21: 1057071.208 ops/s
Iteration  22: 1073431.359 ops/s
Iteration  23: 1071431.001 ops/s
Iteration  24: 1077655.246 ops/s
Iteration  25: 1081604.404 ops/s
Iteration  26: 1078858.090 ops/s
Iteration  27: 1076420.272 ops/s
Iteration  28: 1074083.258 ops/s
Iteration  29: 1073723.170 ops/s
Iteration  30: 1082168.149 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_withAll":
  1072852.886 ±(99.9%) 4133.186 ops/s [Average]
  (min, avg, max) = (1057071.208, 1072852.886, 1082168.149), stdev = 6186.359
  CI (99.9%): [1068719.699, 1076986.072] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_withAll  thrpt   30  1072852.886 ± 4133.186  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 690632.452 ops/s
# Warmup Iteration   2: 772920.164 ops/s
# Warmup Iteration   3: 990113.130 ops/s
# Warmup Iteration   4: 988434.523 ops/s
# Warmup Iteration   5: 991565.709 ops/s
# Warmup Iteration   6: 996121.941 ops/s
# Warmup Iteration   7: 987247.604 ops/s
# Warmup Iteration   8: 991808.744 ops/s
# Warmup Iteration   9: 992491.576 ops/s
# Warmup Iteration  10: 827562.756 ops/s
# Warmup Iteration  11: 991944.972 ops/s
# Warmup Iteration  12: 997831.589 ops/s
# Warmup Iteration  13: 991757.803 ops/s
# Warmup Iteration  14: 977466.842 ops/s
# Warmup Iteration  15: 990920.105 ops/s
# Warmup Iteration  16: 998318.901 ops/s
# Warmup Iteration  17: 1065470.959 ops/s
# Warmup Iteration  18: 1055195.454 ops/s
# Warmup Iteration  19: 1069682.456 ops/s
# Warmup Iteration  20: 1065196.929 ops/s
# Warmup Iteration  21: 1054614.353 ops/s
# Warmup Iteration  22: 1066031.513 ops/s
# Warmup Iteration  23: 1062066.215 ops/s
# Warmup Iteration  24: 1061369.309 ops/s
# Warmup Iteration  25: 1059353.325 ops/s
# Warmup Iteration  26: 1054510.542 ops/s
# Warmup Iteration  27: 1062271.599 ops/s
# Warmup Iteration  28: 1053086.610 ops/s
# Warmup Iteration  29: 1051420.434 ops/s
# Warmup Iteration  30: 1065949.141 ops/s
Iteration   1: 1063732.673 ops/s
Iteration   2: 1067010.487 ops/s
Iteration   3: 1047700.573 ops/s
Iteration   4: 1065714.750 ops/s
Iteration   5: 1059297.752 ops/s
Iteration   6: 1048389.447 ops/s
Iteration   7: 1055617.830 ops/s
Iteration   8: 1066043.477 ops/s
Iteration   9: 1043927.665 ops/s
Iteration  10: 1064626.340 ops/s
Iteration  11: 1049203.444 ops/s
Iteration  12: 1016464.683 ops/s
Iteration  13: 1067570.846 ops/s
Iteration  14: 1065583.290 ops/s
Iteration  15: 1056677.822 ops/s
Iteration  16: 1058104.671 ops/s
Iteration  17: 1060912.613 ops/s
Iteration  18: 1039996.272 ops/s
Iteration  19: 1054324.143 ops/s
Iteration  20: 1061688.739 ops/s
Iteration  21: 1055024.586 ops/s
Iteration  22: 1048660.607 ops/s
Iteration  23: 1063084.003 ops/s
Iteration  24: 1048152.100 ops/s
Iteration  25: 1059724.480 ops/s
Iteration  26: 1064787.242 ops/s
Iteration  27: 1068203.845 ops/s
Iteration  28: 1068484.431 ops/s
Iteration  29: 1061702.570 ops/s
Iteration  30: 1066060.287 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_without":
  1057215.722 ±(99.9%) 7383.075 ops/s [Average]
  (min, avg, max) = (1016464.683, 1057215.722, 1068484.431), stdev = 11050.641
  CI (99.9%): [1049832.647, 1064598.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_without  thrpt   30  1057215.722 ± 7383.075  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 687550.871 ops/s
# Warmup Iteration   2: 776985.659 ops/s
# Warmup Iteration   3: 1001042.183 ops/s
# Warmup Iteration   4: 998596.521 ops/s
# Warmup Iteration   5: 1005364.481 ops/s
# Warmup Iteration   6: 1001248.746 ops/s
# Warmup Iteration   7: 993896.692 ops/s
# Warmup Iteration   8: 991295.049 ops/s
# Warmup Iteration   9: 998791.599 ops/s
# Warmup Iteration  10: 831892.398 ops/s
# Warmup Iteration  11: 986638.603 ops/s
# Warmup Iteration  12: 1000786.876 ops/s
# Warmup Iteration  13: 993933.107 ops/s
# Warmup Iteration  14: 999332.598 ops/s
# Warmup Iteration  15: 1005826.393 ops/s
# Warmup Iteration  16: 1006910.822 ops/s
# Warmup Iteration  17: 1064100.241 ops/s
# Warmup Iteration  18: 1059327.303 ops/s
# Warmup Iteration  19: 1047075.491 ops/s
# Warmup Iteration  20: 1047295.565 ops/s
# Warmup Iteration  21: 1060267.558 ops/s
# Warmup Iteration  22: 1054791.121 ops/s
# Warmup Iteration  23: 1048297.842 ops/s
# Warmup Iteration  24: 1060935.775 ops/s
# Warmup Iteration  25: 1039822.378 ops/s
# Warmup Iteration  26: 1057778.996 ops/s
# Warmup Iteration  27: 1065223.949 ops/s
# Warmup Iteration  28: 1057922.610 ops/s
# Warmup Iteration  29: 1061138.111 ops/s
# Warmup Iteration  30: 1065080.921 ops/s
Iteration   1: 1037602.992 ops/s
Iteration   2: 1068532.870 ops/s
Iteration   3: 1067625.631 ops/s
Iteration   4: 1056324.083 ops/s
Iteration   5: 1050068.847 ops/s
Iteration   6: 1064893.323 ops/s
Iteration   7: 1060579.126 ops/s
Iteration   8: 1054036.439 ops/s
Iteration   9: 1059220.197 ops/s
Iteration  10: 1061835.916 ops/s
Iteration  11: 1067962.420 ops/s
Iteration  12: 1048009.193 ops/s
Iteration  13: 1057991.686 ops/s
Iteration  14: 1047163.426 ops/s
Iteration  15: 1042103.665 ops/s
Iteration  16: 1053060.010 ops/s
Iteration  17: 1046906.509 ops/s
Iteration  18: 1059487.858 ops/s
Iteration  19: 1061334.994 ops/s
Iteration  20: 1042420.879 ops/s
Iteration  21: 1051171.549 ops/s
Iteration  22: 1066276.124 ops/s
Iteration  23: 1063619.164 ops/s
Iteration  24: 1062597.256 ops/s
Iteration  25: 1061930.373 ops/s
Iteration  26: 1065515.162 ops/s
Iteration  27: 1057240.474 ops/s
Iteration  28: 1022863.729 ops/s
Iteration  29: 1059053.350 ops/s
Iteration  30: 1045861.547 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.LongBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll":
  1055442.960 ±(99.9%) 6986.682 ops/s [Average]
  (min, avg, max) = (1022863.729, 1055442.960, 1068532.870), stdev = 10457.337
  CI (99.9%): [1048456.278, 1062429.642] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
LongBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll  thrpt   30  1055442.960 ± 6986.682  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 678625.469 ops/s
# Warmup Iteration   2: 698601.235 ops/s
# Warmup Iteration   3: 949954.247 ops/s
# Warmup Iteration   4: 937607.407 ops/s
# Warmup Iteration   5: 942669.202 ops/s
# Warmup Iteration   6: 941787.099 ops/s
# Warmup Iteration   7: 934243.593 ops/s
# Warmup Iteration   8: 932974.602 ops/s
# Warmup Iteration   9: 938927.917 ops/s
# Warmup Iteration  10: 942520.710 ops/s
# Warmup Iteration  11: 851271.764 ops/s
# Warmup Iteration  12: 873319.175 ops/s
# Warmup Iteration  13: 939323.256 ops/s
# Warmup Iteration  14: 938513.260 ops/s
# Warmup Iteration  15: 943187.581 ops/s
# Warmup Iteration  16: 946359.559 ops/s
# Warmup Iteration  17: 1003159.762 ops/s
# Warmup Iteration  18: 997557.069 ops/s
# Warmup Iteration  19: 1003157.629 ops/s
# Warmup Iteration  20: 1004067.237 ops/s
# Warmup Iteration  21: 1002063.929 ops/s
# Warmup Iteration  22: 999946.189 ops/s
# Warmup Iteration  23: 999407.864 ops/s
# Warmup Iteration  24: 991114.477 ops/s
# Warmup Iteration  25: 984667.749 ops/s
# Warmup Iteration  26: 994995.246 ops/s
# Warmup Iteration  27: 1001117.089 ops/s
# Warmup Iteration  28: 999462.897 ops/s
# Warmup Iteration  29: 992701.267 ops/s
# Warmup Iteration  30: 997201.643 ops/s
Iteration   1: 998031.080 ops/s
Iteration   2: 1008073.730 ops/s
Iteration   3: 997763.998 ops/s
Iteration   4: 999355.566 ops/s
Iteration   5: 984596.254 ops/s
Iteration   6: 997434.908 ops/s
Iteration   7: 997712.126 ops/s
Iteration   8: 982791.318 ops/s
Iteration   9: 995742.867 ops/s
Iteration  10: 1002258.592 ops/s
Iteration  11: 1001758.786 ops/s
Iteration  12: 1004916.306 ops/s
Iteration  13: 1005974.374 ops/s
Iteration  14: 996674.139 ops/s
Iteration  15: 996670.380 ops/s
Iteration  16: 1001092.032 ops/s
Iteration  17: 992406.445 ops/s
Iteration  18: 1000892.356 ops/s
Iteration  19: 1000399.143 ops/s
Iteration  20: 1000350.385 ops/s
Iteration  21: 988877.999 ops/s
Iteration  22: 999191.124 ops/s
Iteration  23: 998611.779 ops/s
Iteration  24: 999701.134 ops/s
Iteration  25: 1002948.023 ops/s
Iteration  26: 998360.589 ops/s
Iteration  27: 984723.353 ops/s
Iteration  28: 999081.122 ops/s
Iteration  29: 996669.188 ops/s
Iteration  30: 983604.975 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_add":
  997222.136 ±(99.9%) 4312.645 ops/s [Average]
  (min, avg, max) = (982791.318, 997222.136, 1008073.730), stdev = 6454.964
  CI (99.9%): [992909.491, 1001534.780] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_add  thrpt   30  997222.136 ± 4312.645  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 682014.189 ops/s
# Warmup Iteration   2: 706275.866 ops/s
# Warmup Iteration   3: 953257.470 ops/s
# Warmup Iteration   4: 931591.451 ops/s
# Warmup Iteration   5: 946083.024 ops/s
# Warmup Iteration   6: 945842.125 ops/s
# Warmup Iteration   7: 932059.815 ops/s
# Warmup Iteration   8: 942632.951 ops/s
# Warmup Iteration   9: 944811.201 ops/s
# Warmup Iteration  10: 941691.804 ops/s
# Warmup Iteration  11: 831594.716 ops/s
# Warmup Iteration  12: 888329.881 ops/s
# Warmup Iteration  13: 943995.550 ops/s
# Warmup Iteration  14: 945314.150 ops/s
# Warmup Iteration  15: 944800.708 ops/s
# Warmup Iteration  16: 934021.945 ops/s
# Warmup Iteration  17: 992219.437 ops/s
# Warmup Iteration  18: 989390.301 ops/s
# Warmup Iteration  19: 995671.730 ops/s
# Warmup Iteration  20: 986164.109 ops/s
# Warmup Iteration  21: 991970.743 ops/s
# Warmup Iteration  22: 991993.619 ops/s
# Warmup Iteration  23: 992738.464 ops/s
# Warmup Iteration  24: 992404.061 ops/s
# Warmup Iteration  25: 995372.651 ops/s
# Warmup Iteration  26: 982051.154 ops/s
# Warmup Iteration  27: 990448.696 ops/s
# Warmup Iteration  28: 987797.887 ops/s
# Warmup Iteration  29: 983904.250 ops/s
# Warmup Iteration  30: 992500.598 ops/s
Iteration   1: 977009.434 ops/s
Iteration   2: 975249.847 ops/s
Iteration   3: 998090.714 ops/s
Iteration   4: 990762.696 ops/s
Iteration   5: 977501.317 ops/s
Iteration   6: 996469.251 ops/s
Iteration   7: 992901.187 ops/s
Iteration   8: 984511.062 ops/s
Iteration   9: 996314.810 ops/s
Iteration  10: 997410.982 ops/s
Iteration  11: 995567.237 ops/s
Iteration  12: 989750.507 ops/s
Iteration  13: 965395.477 ops/s
Iteration  14: 997375.152 ops/s
Iteration  15: 989170.035 ops/s
Iteration  16: 992369.747 ops/s
Iteration  17: 993532.237 ops/s
Iteration  18: 990157.911 ops/s
Iteration  19: 998008.653 ops/s
Iteration  20: 997601.989 ops/s
Iteration  21: 997322.437 ops/s
Iteration  22: 981312.468 ops/s
Iteration  23: 1002034.636 ops/s
Iteration  24: 986216.115 ops/s
Iteration  25: 992434.622 ops/s
Iteration  26: 987650.765 ops/s
Iteration  27: 999666.275 ops/s
Iteration  28: 989920.858 ops/s
Iteration  29: 1001963.669 ops/s
Iteration  30: 993080.768 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray":
  990891.762 ±(99.9%) 5735.578 ops/s [Average]
  (min, avg, max) = (965395.477, 990891.762, 1002034.636), stdev = 8584.744
  CI (99.9%): [985156.183, 996627.340] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray  thrpt   30  990891.762 ± 5735.578  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 684937.271 ops/s
# Warmup Iteration   2: 701705.889 ops/s
# Warmup Iteration   3: 956972.760 ops/s
# Warmup Iteration   4: 942995.553 ops/s
# Warmup Iteration   5: 944038.170 ops/s
# Warmup Iteration   6: 945829.051 ops/s
# Warmup Iteration   7: 937636.436 ops/s
# Warmup Iteration   8: 937685.896 ops/s
# Warmup Iteration   9: 943781.446 ops/s
# Warmup Iteration  10: 947920.212 ops/s
# Warmup Iteration  11: 835900.736 ops/s
# Warmup Iteration  12: 898716.976 ops/s
# Warmup Iteration  13: 946280.984 ops/s
# Warmup Iteration  14: 942494.393 ops/s
# Warmup Iteration  15: 933820.845 ops/s
# Warmup Iteration  16: 941012.258 ops/s
# Warmup Iteration  17: 999491.638 ops/s
# Warmup Iteration  18: 990586.224 ops/s
# Warmup Iteration  19: 991263.998 ops/s
# Warmup Iteration  20: 1006944.553 ops/s
# Warmup Iteration  21: 1002423.453 ops/s
# Warmup Iteration  22: 998949.601 ops/s
# Warmup Iteration  23: 988771.707 ops/s
# Warmup Iteration  24: 1004815.893 ops/s
# Warmup Iteration  25: 993800.206 ops/s
# Warmup Iteration  26: 1005509.229 ops/s
# Warmup Iteration  27: 1004291.416 ops/s
# Warmup Iteration  28: 1008166.612 ops/s
# Warmup Iteration  29: 1005956.869 ops/s
# Warmup Iteration  30: 1001210.087 ops/s
Iteration   1: 991856.912 ops/s
Iteration   2: 989826.933 ops/s
Iteration   3: 1004072.009 ops/s
Iteration   4: 1001560.466 ops/s
Iteration   5: 1002048.729 ops/s
Iteration   6: 1000364.560 ops/s
Iteration   7: 1005729.525 ops/s
Iteration   8: 1009244.698 ops/s
Iteration   9: 1000893.300 ops/s
Iteration  10: 1001235.853 ops/s
Iteration  11: 992828.714 ops/s
Iteration  12: 1005630.398 ops/s
Iteration  13: 1005678.998 ops/s
Iteration  14: 1007683.805 ops/s
Iteration  15: 1004043.564 ops/s
Iteration  16: 1001901.863 ops/s
Iteration  17: 1002461.378 ops/s
Iteration  18: 1002086.221 ops/s
Iteration  19: 1008442.852 ops/s
Iteration  20: 1003013.785 ops/s
Iteration  21: 1005564.402 ops/s
Iteration  22: 1005303.997 ops/s
Iteration  23: 1004601.922 ops/s
Iteration  24: 1012545.557 ops/s
Iteration  25: 1004130.680 ops/s
Iteration  26: 1004946.526 ops/s
Iteration  27: 1005661.013 ops/s
Iteration  28: 1006755.745 ops/s
Iteration  29: 1007301.668 ops/s
Iteration  30: 1008906.777 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable":
  1003544.095 ±(99.9%) 3309.634 ops/s [Average]
  (min, avg, max) = (989826.933, 1003544.095, 1012545.557), stdev = 4953.705
  CI (99.9%): [1000234.461, 1006853.729] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable  thrpt   30  1003544.095 ± 3309.634  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1962808.084 ops/s
# Warmup Iteration   2: 3884053.640 ops/s
# Warmup Iteration   3: 3771572.840 ops/s
# Warmup Iteration   4: 4191838.721 ops/s
# Warmup Iteration   5: 4169785.241 ops/s
# Warmup Iteration   6: 4155787.898 ops/s
# Warmup Iteration   7: 4164669.590 ops/s
# Warmup Iteration   8: 4191595.999 ops/s
# Warmup Iteration   9: 4153000.845 ops/s
# Warmup Iteration  10: 4173925.351 ops/s
# Warmup Iteration  11: 4195578.784 ops/s
# Warmup Iteration  12: 4204192.454 ops/s
# Warmup Iteration  13: 4147036.128 ops/s
# Warmup Iteration  14: 4188081.005 ops/s
# Warmup Iteration  15: 4176108.277 ops/s
# Warmup Iteration  16: 4190208.223 ops/s
# Warmup Iteration  17: 4184169.774 ops/s
# Warmup Iteration  18: 4172609.673 ops/s
# Warmup Iteration  19: 4210205.791 ops/s
# Warmup Iteration  20: 4116188.601 ops/s
# Warmup Iteration  21: 4161583.880 ops/s
# Warmup Iteration  22: 4221027.323 ops/s
# Warmup Iteration  23: 4195840.953 ops/s
# Warmup Iteration  24: 4159996.973 ops/s
# Warmup Iteration  25: 4156034.961 ops/s
# Warmup Iteration  26: 4179288.046 ops/s
# Warmup Iteration  27: 4169082.863 ops/s
# Warmup Iteration  28: 4208957.387 ops/s
# Warmup Iteration  29: 4200418.145 ops/s
# Warmup Iteration  30: 4155212.411 ops/s
Iteration   1: 4214473.590 ops/s
Iteration   2: 4194291.167 ops/s
Iteration   3: 4117868.932 ops/s
Iteration   4: 4171963.331 ops/s
Iteration   5: 4180411.341 ops/s
Iteration   6: 4204240.148 ops/s
Iteration   7: 4188131.453 ops/s
Iteration   8: 4126356.069 ops/s
Iteration   9: 4181903.033 ops/s
Iteration  10: 4155999.003 ops/s
Iteration  11: 4148224.652 ops/s
Iteration  12: 4191218.394 ops/s
Iteration  13: 4186190.569 ops/s
Iteration  14: 4160957.946 ops/s
Iteration  15: 4199019.524 ops/s
Iteration  16: 4105398.262 ops/s
Iteration  17: 4152857.603 ops/s
Iteration  18: 4170819.276 ops/s
Iteration  19: 4187938.224 ops/s
Iteration  20: 4165246.760 ops/s
Iteration  21: 4180561.103 ops/s
Iteration  22: 4188517.371 ops/s
Iteration  23: 4184700.101 ops/s
Iteration  24: 4194495.315 ops/s
Iteration  25: 4194180.362 ops/s
Iteration  26: 4136267.402 ops/s
Iteration  27: 4080658.462 ops/s
Iteration  28: 4090521.763 ops/s
Iteration  29: 4216594.785 ops/s
Iteration  30: 4214092.460 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy":
  4169469.947 ±(99.9%) 24013.256 ops/s [Average]
  (min, avg, max) = (4080658.462, 4169469.947, 4216594.785), stdev = 35941.914
  CI (99.9%): [4145456.690, 4193483.203] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy  thrpt   30  4169469.947 ± 24013.256  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2187170.787 ops/s
# Warmup Iteration   2: 3829794.930 ops/s
# Warmup Iteration   3: 4591952.052 ops/s
# Warmup Iteration   4: 4586276.313 ops/s
# Warmup Iteration   5: 4604483.146 ops/s
# Warmup Iteration   6: 4595690.170 ops/s
# Warmup Iteration   7: 4602190.149 ops/s
# Warmup Iteration   8: 4602619.221 ops/s
# Warmup Iteration   9: 4587531.700 ops/s
# Warmup Iteration  10: 4567589.663 ops/s
# Warmup Iteration  11: 4607584.016 ops/s
# Warmup Iteration  12: 4581484.323 ops/s
# Warmup Iteration  13: 4623887.686 ops/s
# Warmup Iteration  14: 4607914.710 ops/s
# Warmup Iteration  15: 4611953.019 ops/s
# Warmup Iteration  16: 4625344.586 ops/s
# Warmup Iteration  17: 4579696.642 ops/s
# Warmup Iteration  18: 4531528.225 ops/s
# Warmup Iteration  19: 4591418.202 ops/s
# Warmup Iteration  20: 4617801.337 ops/s
# Warmup Iteration  21: 4470795.974 ops/s
# Warmup Iteration  22: 4533450.142 ops/s
# Warmup Iteration  23: 4521223.095 ops/s
# Warmup Iteration  24: 4541352.650 ops/s
# Warmup Iteration  25: 4603282.341 ops/s
# Warmup Iteration  26: 4552355.086 ops/s
# Warmup Iteration  27: 4601475.823 ops/s
# Warmup Iteration  28: 4562313.566 ops/s
# Warmup Iteration  29: 4609561.425 ops/s
# Warmup Iteration  30: 4583482.089 ops/s
Iteration   1: 4569214.525 ops/s
Iteration   2: 4611393.464 ops/s
Iteration   3: 4627353.796 ops/s
Iteration   4: 4575759.164 ops/s
Iteration   5: 4538326.574 ops/s
Iteration   6: 4609947.679 ops/s
Iteration   7: 4593946.324 ops/s
Iteration   8: 4606391.241 ops/s
Iteration   9: 4577087.156 ops/s
Iteration  10: 4595150.947 ops/s
Iteration  11: 4585744.464 ops/s
Iteration  12: 4568277.174 ops/s
Iteration  13: 4577230.989 ops/s
Iteration  14: 4615767.087 ops/s
Iteration  15: 4561407.045 ops/s
Iteration  16: 4603032.023 ops/s
Iteration  17: 4622218.633 ops/s
Iteration  18: 4601237.928 ops/s
Iteration  19: 4586199.755 ops/s
Iteration  20: 4610039.447 ops/s
Iteration  21: 4584717.667 ops/s
Iteration  22: 4552806.016 ops/s
Iteration  23: 4597132.398 ops/s
Iteration  24: 4592329.289 ops/s
Iteration  25: 4594087.015 ops/s
Iteration  26: 4570912.341 ops/s
Iteration  27: 4561560.775 ops/s
Iteration  28: 4616233.880 ops/s
Iteration  29: 4605660.223 ops/s
Iteration  30: 4601085.073 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy":
  4590408.336 ±(99.9%) 14482.685 ops/s [Average]
  (min, avg, max) = (4538326.574, 4590408.336, 4627353.796), stdev = 21677.003
  CI (99.9%): [4575925.651, 4604891.021] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy  thrpt   30  4590408.336 ± 14482.685  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 973853.137 ops/s
# Warmup Iteration   2: 2072033.773 ops/s
# Warmup Iteration   3: 2089941.682 ops/s
# Warmup Iteration   4: 1758445.832 ops/s
# Warmup Iteration   5: 2115834.021 ops/s
# Warmup Iteration   6: 2097839.942 ops/s
# Warmup Iteration   7: 2117773.684 ops/s
# Warmup Iteration   8: 2117143.578 ops/s
# Warmup Iteration   9: 2078092.107 ops/s
# Warmup Iteration  10: 2084239.483 ops/s
# Warmup Iteration  11: 2111330.773 ops/s
# Warmup Iteration  12: 2100888.608 ops/s
# Warmup Iteration  13: 2095894.558 ops/s
# Warmup Iteration  14: 2120255.223 ops/s
# Warmup Iteration  15: 2110193.991 ops/s
# Warmup Iteration  16: 2115884.489 ops/s
# Warmup Iteration  17: 2102713.769 ops/s
# Warmup Iteration  18: 2103368.551 ops/s
# Warmup Iteration  19: 2087952.809 ops/s
# Warmup Iteration  20: 2118826.570 ops/s
# Warmup Iteration  21: 2097225.926 ops/s
# Warmup Iteration  22: 2089941.618 ops/s
# Warmup Iteration  23: 2091864.894 ops/s
# Warmup Iteration  24: 2102985.325 ops/s
# Warmup Iteration  25: 2083996.574 ops/s
# Warmup Iteration  26: 2111209.286 ops/s
# Warmup Iteration  27: 2085958.517 ops/s
# Warmup Iteration  28: 2070111.625 ops/s
# Warmup Iteration  29: 2101700.389 ops/s
# Warmup Iteration  30: 2075237.798 ops/s
Iteration   1: 2113434.589 ops/s
Iteration   2: 2074591.246 ops/s
Iteration   3: 2112411.972 ops/s
Iteration   4: 2107370.374 ops/s
Iteration   5: 2085231.001 ops/s
Iteration   6: 2095941.258 ops/s
Iteration   7: 2119246.562 ops/s
Iteration   8: 2123312.947 ops/s
Iteration   9: 2109267.956 ops/s
Iteration  10: 2116880.582 ops/s
Iteration  11: 2092844.288 ops/s
Iteration  12: 2066110.634 ops/s
Iteration  13: 2091167.886 ops/s
Iteration  14: 2102496.455 ops/s
Iteration  15: 2100418.993 ops/s
Iteration  16: 2118920.533 ops/s
Iteration  17: 2103447.282 ops/s
Iteration  18: 2110496.811 ops/s
Iteration  19: 2105238.349 ops/s
Iteration  20: 2094553.873 ops/s
Iteration  21: 2125213.969 ops/s
Iteration  22: 2105863.587 ops/s
Iteration  23: 2107600.131 ops/s
Iteration  24: 2078934.534 ops/s
Iteration  25: 2111307.671 ops/s
Iteration  26: 2118726.396 ops/s
Iteration  27: 2114323.213 ops/s
Iteration  28: 2079802.783 ops/s
Iteration  29: 2100076.407 ops/s
Iteration  30: 2109865.563 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_appendString":
  2103169.928 ±(99.9%) 9951.758 ops/s [Average]
  (min, avg, max) = (2066110.634, 2103169.928, 2125213.969), stdev = 14895.325
  CI (99.9%): [2093218.170, 2113121.687] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_appendString  thrpt   30  2103169.928 ± 9951.758  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12476031.625 ops/s
# Warmup Iteration   2: 25557862.798 ops/s
# Warmup Iteration   3: 21826843.523 ops/s
# Warmup Iteration   4: 25809281.996 ops/s
# Warmup Iteration   5: 25739933.437 ops/s
# Warmup Iteration   6: 25738132.807 ops/s
# Warmup Iteration   7: 25698354.361 ops/s
# Warmup Iteration   8: 25872331.901 ops/s
# Warmup Iteration   9: 25919516.158 ops/s
# Warmup Iteration  10: 25820921.031 ops/s
# Warmup Iteration  11: 25788137.980 ops/s
# Warmup Iteration  12: 25843057.290 ops/s
# Warmup Iteration  13: 25785771.180 ops/s
# Warmup Iteration  14: 25571643.312 ops/s
# Warmup Iteration  15: 25496412.483 ops/s
# Warmup Iteration  16: 25710948.432 ops/s
# Warmup Iteration  17: 25828886.722 ops/s
# Warmup Iteration  18: 25653939.272 ops/s
# Warmup Iteration  19: 25612306.650 ops/s
# Warmup Iteration  20: 25395432.124 ops/s
# Warmup Iteration  21: 25690745.989 ops/s
# Warmup Iteration  22: 25424712.213 ops/s
# Warmup Iteration  23: 25856463.769 ops/s
# Warmup Iteration  24: 25970954.126 ops/s
# Warmup Iteration  25: 25355808.194 ops/s
# Warmup Iteration  26: 25586217.325 ops/s
# Warmup Iteration  27: 25921727.541 ops/s
# Warmup Iteration  28: 25437041.380 ops/s
# Warmup Iteration  29: 25893432.703 ops/s
# Warmup Iteration  30: 25644711.542 ops/s
Iteration   1: 25935673.350 ops/s
Iteration   2: 25958411.385 ops/s
Iteration   3: 25828701.313 ops/s
Iteration   4: 25937774.672 ops/s
Iteration   5: 25730162.015 ops/s
Iteration   6: 25163761.658 ops/s
Iteration   7: 25838681.157 ops/s
Iteration   8: 25307421.419 ops/s
Iteration   9: 25942043.645 ops/s
Iteration  10: 25663141.422 ops/s
Iteration  11: 25821238.878 ops/s
Iteration  12: 25972037.157 ops/s
Iteration  13: 25645960.077 ops/s
Iteration  14: 25620313.810 ops/s
Iteration  15: 25847587.450 ops/s
Iteration  16: 25581073.699 ops/s
Iteration  17: 25570525.189 ops/s
Iteration  18: 25934335.515 ops/s
Iteration  19: 25693590.258 ops/s
Iteration  20: 25854270.295 ops/s
Iteration  21: 25867473.394 ops/s
Iteration  22: 26083810.109 ops/s
Iteration  23: 25499521.746 ops/s
Iteration  24: 25723390.881 ops/s
Iteration  25: 25915834.023 ops/s
Iteration  26: 25940290.748 ops/s
Iteration  27: 24920312.241 ops/s
Iteration  28: 25770436.367 ops/s
Iteration  29: 25562223.457 ops/s
Iteration  30: 26030661.137 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_asLazy":
  25738688.616 ±(99.9%) 173837.788 ops/s [Average]
  (min, avg, max) = (24920312.241, 25738688.616, 26083810.109), stdev = 260192.237
  CI (99.9%): [25564850.827, 25912526.404] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_asLazy  thrpt   30  25738688.616 ± 173837.788  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6516254.954 ops/s
# Warmup Iteration   2: 13571424.031 ops/s
# Warmup Iteration   3: 11444823.253 ops/s
# Warmup Iteration   4: 13618800.480 ops/s
# Warmup Iteration   5: 13602674.224 ops/s
# Warmup Iteration   6: 13580516.090 ops/s
# Warmup Iteration   7: 13384066.811 ops/s
# Warmup Iteration   8: 13414255.646 ops/s
# Warmup Iteration   9: 13486109.723 ops/s
# Warmup Iteration  10: 13537873.231 ops/s
# Warmup Iteration  11: 13400916.902 ops/s
# Warmup Iteration  12: 13597934.339 ops/s
# Warmup Iteration  13: 13644937.905 ops/s
# Warmup Iteration  14: 13535339.737 ops/s
# Warmup Iteration  15: 13593738.370 ops/s
# Warmup Iteration  16: 13408357.393 ops/s
# Warmup Iteration  17: 13458156.709 ops/s
# Warmup Iteration  18: 13562327.328 ops/s
# Warmup Iteration  19: 13483080.184 ops/s
# Warmup Iteration  20: 13530928.573 ops/s
# Warmup Iteration  21: 13555495.409 ops/s
# Warmup Iteration  22: 13582915.226 ops/s
# Warmup Iteration  23: 13441468.951 ops/s
# Warmup Iteration  24: 13539198.668 ops/s
# Warmup Iteration  25: 13530465.710 ops/s
# Warmup Iteration  26: 13462150.678 ops/s
# Warmup Iteration  27: 13418206.596 ops/s
# Warmup Iteration  28: 13469964.633 ops/s
# Warmup Iteration  29: 13659695.599 ops/s
# Warmup Iteration  30: 13374852.618 ops/s
Iteration   1: 13650150.771 ops/s
Iteration   2: 13532115.858 ops/s
Iteration   3: 13539964.416 ops/s
Iteration   4: 13343201.643 ops/s
Iteration   5: 13556639.966 ops/s
Iteration   6: 13553307.323 ops/s
Iteration   7: 13543195.233 ops/s
Iteration   8: 13634161.873 ops/s
Iteration   9: 13540656.752 ops/s
Iteration  10: 13534950.963 ops/s
Iteration  11: 13322769.073 ops/s
Iteration  12: 13597545.355 ops/s
Iteration  13: 13522690.865 ops/s
Iteration  14: 13628319.362 ops/s
Iteration  15: 13567852.164 ops/s
Iteration  16: 13300226.895 ops/s
Iteration  17: 13611213.897 ops/s
Iteration  18: 13601826.271 ops/s
Iteration  19: 13611496.219 ops/s
Iteration  20: 13610846.346 ops/s
Iteration  21: 13521928.761 ops/s
Iteration  22: 13692291.532 ops/s
Iteration  23: 13594602.188 ops/s
Iteration  24: 13538564.505 ops/s
Iteration  25: 13531178.092 ops/s
Iteration  26: 12816428.255 ops/s
Iteration  27: 13515790.652 ops/s
Iteration  28: 13565085.430 ops/s
Iteration  29: 13515097.594 ops/s
Iteration  30: 13498438.046 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized":
  13519751.210 ±(99.9%) 106549.977 ops/s [Average]
  (min, avg, max) = (12816428.255, 13519751.210, 13692291.532), stdev = 159479.002
  CI (99.9%): [13413201.233, 13626301.187] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized  thrpt   30  13519751.210 ± 106549.977  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7626656.834 ops/s
# Warmup Iteration   2: 15520662.647 ops/s
# Warmup Iteration   3: 13323340.098 ops/s
# Warmup Iteration   4: 15724936.509 ops/s
# Warmup Iteration   5: 15725485.555 ops/s
# Warmup Iteration   6: 15489238.789 ops/s
# Warmup Iteration   7: 15874955.456 ops/s
# Warmup Iteration   8: 15743979.222 ops/s
# Warmup Iteration   9: 15621195.388 ops/s
# Warmup Iteration  10: 15697737.325 ops/s
# Warmup Iteration  11: 15559539.521 ops/s
# Warmup Iteration  12: 15763065.315 ops/s
# Warmup Iteration  13: 15454362.500 ops/s
# Warmup Iteration  14: 15724683.238 ops/s
# Warmup Iteration  15: 15708028.044 ops/s
# Warmup Iteration  16: 15812059.064 ops/s
# Warmup Iteration  17: 15869462.731 ops/s
# Warmup Iteration  18: 15728834.899 ops/s
# Warmup Iteration  19: 15891718.549 ops/s
# Warmup Iteration  20: 15694504.098 ops/s
# Warmup Iteration  21: 15733051.914 ops/s
# Warmup Iteration  22: 15850926.342 ops/s
# Warmup Iteration  23: 15558758.579 ops/s
# Warmup Iteration  24: 15636361.373 ops/s
# Warmup Iteration  25: 15874457.541 ops/s
# Warmup Iteration  26: 15760945.943 ops/s
# Warmup Iteration  27: 15791751.248 ops/s
# Warmup Iteration  28: 15823981.416 ops/s
# Warmup Iteration  29: 15862770.080 ops/s
# Warmup Iteration  30: 15804114.047 ops/s
Iteration   1: 15764539.607 ops/s
Iteration   2: 15607427.005 ops/s
Iteration   3: 15553812.423 ops/s
Iteration   4: 15846687.969 ops/s
Iteration   5: 15855013.688 ops/s
Iteration   6: 15939255.907 ops/s
Iteration   7: 15806005.936 ops/s
Iteration   8: 15879563.670 ops/s
Iteration   9: 15805344.308 ops/s
Iteration  10: 15792185.651 ops/s
Iteration  11: 15870567.430 ops/s
Iteration  12: 15715134.011 ops/s
Iteration  13: 15589418.221 ops/s
Iteration  14: 15547858.387 ops/s
Iteration  15: 15732890.435 ops/s
Iteration  16: 15913651.618 ops/s
Iteration  17: 15734334.384 ops/s
Iteration  18: 15559830.820 ops/s
Iteration  19: 15597255.896 ops/s
Iteration  20: 15663468.369 ops/s
Iteration  21: 15795591.496 ops/s
Iteration  22: 15897406.151 ops/s
Iteration  23: 15863898.648 ops/s
Iteration  24: 15916969.605 ops/s
Iteration  25: 15877548.076 ops/s
Iteration  26: 15882308.077 ops/s
Iteration  27: 15865913.408 ops/s
Iteration  28: 15577907.335 ops/s
Iteration  29: 15821183.056 ops/s
Iteration  30: 15820452.892 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable":
  15769780.816 ±(99.9%) 83821.600 ops/s [Average]
  (min, avg, max) = (15547858.387, 15769780.816, 15939255.907), stdev = 125460.235
  CI (99.9%): [15685959.216, 15853602.416] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  15769780.816 ± 83821.600  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 74570.525 ops/s
# Warmup Iteration   2: 88351.035 ops/s
# Warmup Iteration   3: 117534.572 ops/s
# Warmup Iteration   4: 118906.594 ops/s
# Warmup Iteration   5: 118939.150 ops/s
# Warmup Iteration   6: 118027.594 ops/s
# Warmup Iteration   7: 117979.195 ops/s
# Warmup Iteration   8: 118716.459 ops/s
# Warmup Iteration   9: 96303.020 ops/s
# Warmup Iteration  10: 118604.385 ops/s
# Warmup Iteration  11: 119129.028 ops/s
# Warmup Iteration  12: 118950.944 ops/s
# Warmup Iteration  13: 119030.478 ops/s
# Warmup Iteration  14: 118261.489 ops/s
# Warmup Iteration  15: 117722.397 ops/s
# Warmup Iteration  16: 119199.662 ops/s
# Warmup Iteration  17: 120315.720 ops/s
# Warmup Iteration  18: 119900.096 ops/s
# Warmup Iteration  19: 120651.568 ops/s
# Warmup Iteration  20: 120529.858 ops/s
# Warmup Iteration  21: 119762.526 ops/s
# Warmup Iteration  22: 120427.167 ops/s
# Warmup Iteration  23: 120985.881 ops/s
# Warmup Iteration  24: 120237.716 ops/s
# Warmup Iteration  25: 120375.107 ops/s
# Warmup Iteration  26: 119252.571 ops/s
# Warmup Iteration  27: 120411.031 ops/s
# Warmup Iteration  28: 120419.621 ops/s
# Warmup Iteration  29: 119825.889 ops/s
# Warmup Iteration  30: 120659.866 ops/s
Iteration   1: 118824.297 ops/s
Iteration   2: 120053.507 ops/s
Iteration   3: 120471.832 ops/s
Iteration   4: 119401.978 ops/s
Iteration   5: 118415.822 ops/s
Iteration   6: 118825.109 ops/s
Iteration   7: 118798.610 ops/s
Iteration   8: 120080.934 ops/s
Iteration   9: 117853.613 ops/s
Iteration  10: 118539.918 ops/s
Iteration  11: 118661.852 ops/s
Iteration  12: 120263.700 ops/s
Iteration  13: 119250.075 ops/s
Iteration  14: 120748.445 ops/s
Iteration  15: 119000.217 ops/s
Iteration  16: 120845.273 ops/s
Iteration  17: 120528.354 ops/s
Iteration  18: 118481.522 ops/s
Iteration  19: 119665.173 ops/s
Iteration  20: 119750.899 ops/s
Iteration  21: 119988.007 ops/s
Iteration  22: 121309.263 ops/s
Iteration  23: 120878.310 ops/s
Iteration  24: 119954.328 ops/s
Iteration  25: 119813.388 ops/s
Iteration  26: 119769.306 ops/s
Iteration  27: 120860.475 ops/s
Iteration  28: 119896.428 ops/s
Iteration  29: 119732.106 ops/s
Iteration  30: 119980.999 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator":
  119688.125 ±(99.9%) 581.669 ops/s [Average]
  (min, avg, max) = (117853.613, 119688.125, 121309.263), stdev = 870.615
  CI (99.9%): [119106.456, 120269.794] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score     Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator  thrpt   30  119688.125 ± 581.669  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 544246.978 ops/s
# Warmup Iteration   2: 734493.686 ops/s
# Warmup Iteration   3: 877792.540 ops/s
# Warmup Iteration   4: 880824.781 ops/s
# Warmup Iteration   5: 875108.222 ops/s
# Warmup Iteration   6: 879113.450 ops/s
# Warmup Iteration   7: 876662.663 ops/s
# Warmup Iteration   8: 737332.142 ops/s
# Warmup Iteration   9: 876536.041 ops/s
# Warmup Iteration  10: 881348.836 ops/s
# Warmup Iteration  11: 872661.990 ops/s
# Warmup Iteration  12: 875896.742 ops/s
# Warmup Iteration  13: 880374.354 ops/s
# Warmup Iteration  14: 873658.478 ops/s
# Warmup Iteration  15: 857297.183 ops/s
# Warmup Iteration  16: 872593.649 ops/s
# Warmup Iteration  17: 927963.094 ops/s
# Warmup Iteration  18: 927800.496 ops/s
# Warmup Iteration  19: 925944.689 ops/s
# Warmup Iteration  20: 920179.246 ops/s
# Warmup Iteration  21: 921692.582 ops/s
# Warmup Iteration  22: 922861.877 ops/s
# Warmup Iteration  23: 927572.056 ops/s
# Warmup Iteration  24: 933446.955 ops/s
# Warmup Iteration  25: 919113.055 ops/s
# Warmup Iteration  26: 926068.201 ops/s
# Warmup Iteration  27: 918339.728 ops/s
# Warmup Iteration  28: 918167.796 ops/s
# Warmup Iteration  29: 926643.224 ops/s
# Warmup Iteration  30: 918996.284 ops/s
Iteration   1: 914465.651 ops/s
Iteration   2: 933627.216 ops/s
Iteration   3: 928998.209 ops/s
Iteration   4: 928501.534 ops/s
Iteration   5: 915257.155 ops/s
Iteration   6: 926094.625 ops/s
Iteration   7: 931411.345 ops/s
Iteration   8: 929944.654 ops/s
Iteration   9: 912769.398 ops/s
Iteration  10: 938243.848 ops/s
Iteration  11: 933727.764 ops/s
Iteration  12: 933287.334 ops/s
Iteration  13: 929570.849 ops/s
Iteration  14: 921503.386 ops/s
Iteration  15: 929191.032 ops/s
Iteration  16: 912358.311 ops/s
Iteration  17: 923855.710 ops/s
Iteration  18: 930063.096 ops/s
Iteration  19: 932520.794 ops/s
Iteration  20: 907845.120 ops/s
Iteration  21: 931470.276 ops/s
Iteration  22: 922209.725 ops/s
Iteration  23: 913499.745 ops/s
Iteration  24: 926877.827 ops/s
Iteration  25: 927135.641 ops/s
Iteration  26: 912534.491 ops/s
Iteration  27: 926347.823 ops/s
Iteration  28: 936030.205 ops/s
Iteration  29: 927945.401 ops/s
Iteration  30: 928038.378 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove":
  925510.885 ±(99.9%) 5425.504 ops/s [Average]
  (min, avg, max) = (907845.120, 925510.885, 938243.848), stdev = 8120.639
  CI (99.9%): [920085.381, 930936.389] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  925510.885 ± 5425.504  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 141207.540 ops/s
# Warmup Iteration   2: 228659.214 ops/s
# Warmup Iteration   3: 269439.393 ops/s
# Warmup Iteration   4: 272893.203 ops/s
# Warmup Iteration   5: 272609.873 ops/s
# Warmup Iteration   6: 249020.427 ops/s
# Warmup Iteration   7: 248811.801 ops/s
# Warmup Iteration   8: 270803.728 ops/s
# Warmup Iteration   9: 270121.025 ops/s
# Warmup Iteration  10: 269921.057 ops/s
# Warmup Iteration  11: 273247.319 ops/s
# Warmup Iteration  12: 270227.318 ops/s
# Warmup Iteration  13: 271280.383 ops/s
# Warmup Iteration  14: 270563.611 ops/s
# Warmup Iteration  15: 273503.370 ops/s
# Warmup Iteration  16: 272687.724 ops/s
# Warmup Iteration  17: 278897.637 ops/s
# Warmup Iteration  18: 281938.547 ops/s
# Warmup Iteration  19: 279261.370 ops/s
# Warmup Iteration  20: 277187.013 ops/s
# Warmup Iteration  21: 279141.979 ops/s
# Warmup Iteration  22: 281125.822 ops/s
# Warmup Iteration  23: 278883.767 ops/s
# Warmup Iteration  24: 281029.318 ops/s
# Warmup Iteration  25: 280894.289 ops/s
# Warmup Iteration  26: 281501.057 ops/s
# Warmup Iteration  27: 282836.048 ops/s
# Warmup Iteration  28: 278229.009 ops/s
# Warmup Iteration  29: 278324.025 ops/s
# Warmup Iteration  30: 277350.770 ops/s
Iteration   1: 281870.716 ops/s
Iteration   2: 280758.445 ops/s
Iteration   3: 280662.276 ops/s
Iteration   4: 277953.765 ops/s
Iteration   5: 278334.384 ops/s
Iteration   6: 282267.273 ops/s
Iteration   7: 278148.786 ops/s
Iteration   8: 279806.557 ops/s
Iteration   9: 283879.844 ops/s
Iteration  10: 281169.732 ops/s
Iteration  11: 279964.932 ops/s
Iteration  12: 277260.403 ops/s
Iteration  13: 281302.898 ops/s
Iteration  14: 281658.305 ops/s
Iteration  15: 279411.048 ops/s
Iteration  16: 277683.812 ops/s
Iteration  17: 279257.667 ops/s
Iteration  18: 283433.789 ops/s
Iteration  19: 280285.384 ops/s
Iteration  20: 278100.887 ops/s
Iteration  21: 277951.967 ops/s
Iteration  22: 281135.037 ops/s
Iteration  23: 280172.570 ops/s
Iteration  24: 280916.817 ops/s
Iteration  25: 278695.172 ops/s
Iteration  26: 279287.619 ops/s
Iteration  27: 281210.833 ops/s
Iteration  28: 279162.605 ops/s
Iteration  29: 279872.490 ops/s
Iteration  30: 280262.743 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_chunk":
  280062.625 ±(99.9%) 1115.866 ops/s [Average]
  (min, avg, max) = (277260.403, 280062.625, 283879.844), stdev = 1670.175
  CI (99.9%): [278946.760, 281178.491] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_chunk  thrpt   30  280062.625 ± 1115.866  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4962496.396 ops/s
# Warmup Iteration   2: 8366861.684 ops/s
# Warmup Iteration   3: 10026586.022 ops/s
# Warmup Iteration   4: 9980000.762 ops/s
# Warmup Iteration   5: 9882352.271 ops/s
# Warmup Iteration   6: 9831464.694 ops/s
# Warmup Iteration   7: 9817762.344 ops/s
# Warmup Iteration   8: 10006035.460 ops/s
# Warmup Iteration   9: 10046812.754 ops/s
# Warmup Iteration  10: 9955208.154 ops/s
# Warmup Iteration  11: 9935465.165 ops/s
# Warmup Iteration  12: 10017634.152 ops/s
# Warmup Iteration  13: 10002983.479 ops/s
# Warmup Iteration  14: 9951734.967 ops/s
# Warmup Iteration  15: 10041656.183 ops/s
# Warmup Iteration  16: 10051290.002 ops/s
# Warmup Iteration  17: 9961853.727 ops/s
# Warmup Iteration  18: 9889861.485 ops/s
# Warmup Iteration  19: 10019728.357 ops/s
# Warmup Iteration  20: 9993706.548 ops/s
# Warmup Iteration  21: 9927775.070 ops/s
# Warmup Iteration  22: 9986753.056 ops/s
# Warmup Iteration  23: 10027938.586 ops/s
# Warmup Iteration  24: 9931406.614 ops/s
# Warmup Iteration  25: 9939785.751 ops/s
# Warmup Iteration  26: 9984024.424 ops/s
# Warmup Iteration  27: 10003856.674 ops/s
# Warmup Iteration  28: 9986258.537 ops/s
# Warmup Iteration  29: 9980564.684 ops/s
# Warmup Iteration  30: 9913494.754 ops/s
Iteration   1: 10007862.340 ops/s
Iteration   2: 9848253.371 ops/s
Iteration   3: 10024029.133 ops/s
Iteration   4: 10064073.530 ops/s
Iteration   5: 10019380.704 ops/s
Iteration   6: 10076785.683 ops/s
Iteration   7: 9893777.673 ops/s
Iteration   8: 9975848.694 ops/s
Iteration   9: 10066646.722 ops/s
Iteration  10: 9908854.350 ops/s
Iteration  11: 9868602.291 ops/s
Iteration  12: 9966661.174 ops/s
Iteration  13: 9927035.184 ops/s
Iteration  14: 10037662.028 ops/s
Iteration  15: 9859407.256 ops/s
Iteration  16: 9992097.889 ops/s
Iteration  17: 9931113.402 ops/s
Iteration  18: 10042814.823 ops/s
Iteration  19: 9700891.986 ops/s
Iteration  20: 9923050.243 ops/s
Iteration  21: 10063119.255 ops/s
Iteration  22: 9912520.706 ops/s
Iteration  23: 9969660.173 ops/s
Iteration  24: 10010438.899 ops/s
Iteration  25: 9939619.840 ops/s
Iteration  26: 9875183.772 ops/s
Iteration  27: 9974325.592 ops/s
Iteration  28: 9999234.464 ops/s
Iteration  29: 10009939.069 ops/s
Iteration  30: 10001453.689 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_clear":
  9963011.464 ±(99.9%) 55091.129 ops/s [Average]
  (min, avg, max) = (9700891.986, 9963011.464, 10076785.683), stdev = 82457.815
  CI (99.9%): [9907920.335, 10018102.593] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_clear  thrpt   30  9963011.464 ± 55091.129  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1077722.691 ops/s
# Warmup Iteration   2: 2991650.437 ops/s
# Warmup Iteration   3: 3061994.958 ops/s
# Warmup Iteration   4: 2530699.207 ops/s
# Warmup Iteration   5: 3078761.367 ops/s
# Warmup Iteration   6: 3044145.659 ops/s
# Warmup Iteration   7: 3068662.200 ops/s
# Warmup Iteration   8: 3017986.516 ops/s
# Warmup Iteration   9: 3062737.476 ops/s
# Warmup Iteration  10: 3064685.833 ops/s
# Warmup Iteration  11: 3072375.371 ops/s
# Warmup Iteration  12: 3075416.777 ops/s
# Warmup Iteration  13: 3049220.304 ops/s
# Warmup Iteration  14: 3075999.602 ops/s
# Warmup Iteration  15: 3018286.347 ops/s
# Warmup Iteration  16: 3046714.786 ops/s
# Warmup Iteration  17: 3071188.399 ops/s
# Warmup Iteration  18: 3061603.190 ops/s
# Warmup Iteration  19: 3037804.673 ops/s
# Warmup Iteration  20: 3075512.648 ops/s
# Warmup Iteration  21: 3020299.912 ops/s
# Warmup Iteration  22: 3062420.628 ops/s
# Warmup Iteration  23: 3046098.334 ops/s
# Warmup Iteration  24: 3073672.872 ops/s
# Warmup Iteration  25: 3050666.539 ops/s
# Warmup Iteration  26: 3075218.114 ops/s
# Warmup Iteration  27: 3072383.756 ops/s
# Warmup Iteration  28: 3087416.393 ops/s
# Warmup Iteration  29: 3043110.297 ops/s
# Warmup Iteration  30: 3043388.748 ops/s
Iteration   1: 3011730.263 ops/s
Iteration   2: 3081370.879 ops/s
Iteration   3: 3056667.887 ops/s
Iteration   4: 3046811.812 ops/s
Iteration   5: 2981434.262 ops/s
Iteration   6: 3073368.273 ops/s
Iteration   7: 3076770.580 ops/s
Iteration   8: 3062775.691 ops/s
Iteration   9: 3076036.000 ops/s
Iteration  10: 3045852.516 ops/s
Iteration  11: 3063588.266 ops/s
Iteration  12: 3082784.604 ops/s
Iteration  13: 3074815.026 ops/s
Iteration  14: 3038494.856 ops/s
Iteration  15: 3051418.860 ops/s
Iteration  16: 3087474.911 ops/s
Iteration  17: 3076435.350 ops/s
Iteration  18: 3054547.737 ops/s
Iteration  19: 3061448.903 ops/s
Iteration  20: 3015158.453 ops/s
Iteration  21: 3016536.595 ops/s
Iteration  22: 3066910.759 ops/s
Iteration  23: 3037767.208 ops/s
Iteration  24: 3065036.228 ops/s
Iteration  25: 3066777.814 ops/s
Iteration  26: 3064783.062 ops/s
Iteration  27: 3077414.145 ops/s
Iteration  28: 3073943.917 ops/s
Iteration  29: 3063150.420 ops/s
Iteration  30: 3059339.172 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_collect":
  3057021.482 ±(99.9%) 16267.082 ops/s [Average]
  (min, avg, max) = (2981434.262, 3057021.482, 3087474.911), stdev = 24347.805
  CI (99.9%): [3040754.399, 3073288.564] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_collect  thrpt   30  3057021.482 ± 16267.082  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8735422.801 ops/s
# Warmup Iteration   2: 17531318.666 ops/s
# Warmup Iteration   3: 18296827.782 ops/s
# Warmup Iteration   4: 18357925.204 ops/s
# Warmup Iteration   5: 15038287.982 ops/s
# Warmup Iteration   6: 18412866.248 ops/s
# Warmup Iteration   7: 18458431.041 ops/s
# Warmup Iteration   8: 18387815.039 ops/s
# Warmup Iteration   9: 18463260.285 ops/s
# Warmup Iteration  10: 18445655.792 ops/s
# Warmup Iteration  11: 18436692.058 ops/s
# Warmup Iteration  12: 18410083.967 ops/s
# Warmup Iteration  13: 18419540.113 ops/s
# Warmup Iteration  14: 18400842.809 ops/s
# Warmup Iteration  15: 18390022.238 ops/s
# Warmup Iteration  16: 18284893.772 ops/s
# Warmup Iteration  17: 18413061.868 ops/s
# Warmup Iteration  18: 18467842.693 ops/s
# Warmup Iteration  19: 18490526.557 ops/s
# Warmup Iteration  20: 18437468.722 ops/s
# Warmup Iteration  21: 18292819.731 ops/s
# Warmup Iteration  22: 18464955.906 ops/s
# Warmup Iteration  23: 18414915.384 ops/s
# Warmup Iteration  24: 18435223.391 ops/s
# Warmup Iteration  25: 18458696.510 ops/s
# Warmup Iteration  26: 18441056.737 ops/s
# Warmup Iteration  27: 18487966.540 ops/s
# Warmup Iteration  28: 18475572.614 ops/s
# Warmup Iteration  29: 18412987.360 ops/s
# Warmup Iteration  30: 18418321.510 ops/s
Iteration   1: 18312359.313 ops/s
Iteration   2: 18405597.641 ops/s
Iteration   3: 18428481.589 ops/s
Iteration   4: 18457862.370 ops/s
Iteration   5: 18424025.235 ops/s
Iteration   6: 18401795.661 ops/s
Iteration   7: 18451308.955 ops/s
Iteration   8: 18374094.536 ops/s
Iteration   9: 18455321.270 ops/s
Iteration  10: 18341910.978 ops/s
Iteration  11: 18417046.806 ops/s
Iteration  12: 18417783.519 ops/s
Iteration  13: 18460455.503 ops/s
Iteration  14: 18494593.814 ops/s
Iteration  15: 18299936.861 ops/s
Iteration  16: 18365259.678 ops/s
Iteration  17: 18302429.001 ops/s
Iteration  18: 18497064.288 ops/s
Iteration  19: 18507152.304 ops/s
Iteration  20: 18480946.409 ops/s
Iteration  21: 18396327.085 ops/s
Iteration  22: 18444631.518 ops/s
Iteration  23: 18245500.624 ops/s
Iteration  24: 18458623.041 ops/s
Iteration  25: 18386902.244 ops/s
Iteration  26: 18422402.847 ops/s
Iteration  27: 18409097.110 ops/s
Iteration  28: 18460979.000 ops/s
Iteration  29: 18371132.854 ops/s
Iteration  30: 18321948.134 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_contains":
  18407099.006 ±(99.9%) 43475.245 ops/s [Average]
  (min, avg, max) = (18245500.624, 18407099.006, 18507152.304), stdev = 65071.705
  CI (99.9%): [18363623.761, 18450574.252] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_contains  thrpt   30  18407099.006 ± 43475.245  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8961475.442 ops/s
# Warmup Iteration   2: 14648760.350 ops/s
# Warmup Iteration   3: 17624054.136 ops/s
# Warmup Iteration   4: 17877097.772 ops/s
# Warmup Iteration   5: 17980263.242 ops/s
# Warmup Iteration   6: 17870745.770 ops/s
# Warmup Iteration   7: 17922949.887 ops/s
# Warmup Iteration   8: 17917410.152 ops/s
# Warmup Iteration   9: 17848326.225 ops/s
# Warmup Iteration  10: 17685162.370 ops/s
# Warmup Iteration  11: 17933806.533 ops/s
# Warmup Iteration  12: 17886403.025 ops/s
# Warmup Iteration  13: 17766483.703 ops/s
# Warmup Iteration  14: 17841489.129 ops/s
# Warmup Iteration  15: 18106411.454 ops/s
# Warmup Iteration  16: 18107127.656 ops/s
# Warmup Iteration  17: 18201428.777 ops/s
# Warmup Iteration  18: 18108346.885 ops/s
# Warmup Iteration  19: 18057281.582 ops/s
# Warmup Iteration  20: 18171896.317 ops/s
# Warmup Iteration  21: 18087553.415 ops/s
# Warmup Iteration  22: 18169401.479 ops/s
# Warmup Iteration  23: 18187847.567 ops/s
# Warmup Iteration  24: 18089909.724 ops/s
# Warmup Iteration  25: 18096897.327 ops/s
# Warmup Iteration  26: 18045450.049 ops/s
# Warmup Iteration  27: 18058278.632 ops/s
# Warmup Iteration  28: 18028040.185 ops/s
# Warmup Iteration  29: 18146341.620 ops/s
# Warmup Iteration  30: 18246637.801 ops/s
Iteration   1: 18161091.531 ops/s
Iteration   2: 17874145.602 ops/s
Iteration   3: 18118215.664 ops/s
Iteration   4: 18139437.275 ops/s
Iteration   5: 18231107.777 ops/s
Iteration   6: 18177980.086 ops/s
Iteration   7: 18044486.391 ops/s
Iteration   8: 17926595.813 ops/s
Iteration   9: 18260881.516 ops/s
Iteration  10: 18244539.683 ops/s
Iteration  11: 18069717.239 ops/s
Iteration  12: 18056937.356 ops/s
Iteration  13: 18238489.702 ops/s
Iteration  14: 18063363.578 ops/s
Iteration  15: 18053208.399 ops/s
Iteration  16: 18090775.229 ops/s
Iteration  17: 17660490.097 ops/s
Iteration  18: 18058711.415 ops/s
Iteration  19: 18201939.655 ops/s
Iteration  20: 18177284.340 ops/s
Iteration  21: 17875371.590 ops/s
Iteration  22: 18175968.863 ops/s
Iteration  23: 18107473.530 ops/s
Iteration  24: 18242615.583 ops/s
Iteration  25: 18216614.477 ops/s
Iteration  26: 18257634.850 ops/s
Iteration  27: 18063227.204 ops/s
Iteration  28: 18126010.439 ops/s
Iteration  29: 18041431.149 ops/s
Iteration  30: 18265172.193 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray":
  18107363.941 ±(99.9%) 91406.597 ops/s [Average]
  (min, avg, max) = (17660490.097, 18107363.941, 18265172.193), stdev = 136813.101
  CI (99.9%): [18015957.344, 18198770.538] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray  thrpt   30  18107363.941 ± 91406.597  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5259649.825 ops/s
# Warmup Iteration   2: 8918105.902 ops/s
# Warmup Iteration   3: 10723746.047 ops/s
# Warmup Iteration   4: 10603776.227 ops/s
# Warmup Iteration   5: 10619958.315 ops/s
# Warmup Iteration   6: 10587541.913 ops/s
# Warmup Iteration   7: 10669930.101 ops/s
# Warmup Iteration   8: 10685817.434 ops/s
# Warmup Iteration   9: 10669022.883 ops/s
# Warmup Iteration  10: 10642632.399 ops/s
# Warmup Iteration  11: 10626214.941 ops/s
# Warmup Iteration  12: 10723564.425 ops/s
# Warmup Iteration  13: 10608174.508 ops/s
# Warmup Iteration  14: 10655837.311 ops/s
# Warmup Iteration  15: 10635468.877 ops/s
# Warmup Iteration  16: 10554196.190 ops/s
# Warmup Iteration  17: 10666673.239 ops/s
# Warmup Iteration  18: 10661696.651 ops/s
# Warmup Iteration  19: 10565913.645 ops/s
# Warmup Iteration  20: 10598556.738 ops/s
# Warmup Iteration  21: 10585814.489 ops/s
# Warmup Iteration  22: 10597565.012 ops/s
# Warmup Iteration  23: 10662782.337 ops/s
# Warmup Iteration  24: 10537884.073 ops/s
# Warmup Iteration  25: 10712756.176 ops/s
# Warmup Iteration  26: 10575254.758 ops/s
# Warmup Iteration  27: 10503397.562 ops/s
# Warmup Iteration  28: 10658946.475 ops/s
# Warmup Iteration  29: 10651564.809 ops/s
# Warmup Iteration  30: 10674060.969 ops/s
Iteration   1: 10718335.584 ops/s
Iteration   2: 10467000.522 ops/s
Iteration   3: 10503225.932 ops/s
Iteration   4: 10716665.622 ops/s
Iteration   5: 10692155.584 ops/s
Iteration   6: 10714182.427 ops/s
Iteration   7: 10480436.207 ops/s
Iteration   8: 10722230.364 ops/s
Iteration   9: 10641322.537 ops/s
Iteration  10: 10618263.873 ops/s
Iteration  11: 10575168.336 ops/s
Iteration  12: 10649529.262 ops/s
Iteration  13: 10586788.204 ops/s
Iteration  14: 10725700.588 ops/s
Iteration  15: 10599137.829 ops/s
Iteration  16: 10743226.813 ops/s
Iteration  17: 10384519.543 ops/s
Iteration  18: 10530590.947 ops/s
Iteration  19: 10655426.461 ops/s
Iteration  20: 10732502.444 ops/s
Iteration  21: 10599368.640 ops/s
Iteration  22: 10540217.899 ops/s
Iteration  23: 10617699.845 ops/s
Iteration  24: 10678751.964 ops/s
Iteration  25: 10645393.290 ops/s
Iteration  26: 10688383.414 ops/s
Iteration  27: 10537743.997 ops/s
Iteration  28: 10687793.460 ops/s
Iteration  29: 10602286.862 ops/s
Iteration  30: 10379328.834 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable":
  10614445.910 ±(99.9%) 67144.408 ops/s [Average]
  (min, avg, max) = (10379328.834, 10614445.910, 10743226.813), stdev = 100498.596
  CI (99.9%): [10547301.502, 10681590.317] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable  thrpt   30  10614445.910 ± 67144.408  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2531060.240 ops/s
# Warmup Iteration   2: 5580636.520 ops/s
# Warmup Iteration   3: 4717241.360 ops/s
# Warmup Iteration   4: 5649200.610 ops/s
# Warmup Iteration   5: 5673911.091 ops/s
# Warmup Iteration   6: 5638268.831 ops/s
# Warmup Iteration   7: 5706599.231 ops/s
# Warmup Iteration   8: 5617112.351 ops/s
# Warmup Iteration   9: 5646672.009 ops/s
# Warmup Iteration  10: 5715200.197 ops/s
# Warmup Iteration  11: 5654858.212 ops/s
# Warmup Iteration  12: 5694839.999 ops/s
# Warmup Iteration  13: 5689847.110 ops/s
# Warmup Iteration  14: 5659853.394 ops/s
# Warmup Iteration  15: 5608154.970 ops/s
# Warmup Iteration  16: 5646164.711 ops/s
# Warmup Iteration  17: 5620979.908 ops/s
# Warmup Iteration  18: 5648128.564 ops/s
# Warmup Iteration  19: 5640872.371 ops/s
# Warmup Iteration  20: 5708591.853 ops/s
# Warmup Iteration  21: 5660582.229 ops/s
# Warmup Iteration  22: 5674484.823 ops/s
# Warmup Iteration  23: 5651230.101 ops/s
# Warmup Iteration  24: 5670592.346 ops/s
# Warmup Iteration  25: 5649060.877 ops/s
# Warmup Iteration  26: 5663990.754 ops/s
# Warmup Iteration  27: 5629358.608 ops/s
# Warmup Iteration  28: 5705555.759 ops/s
# Warmup Iteration  29: 5617297.322 ops/s
# Warmup Iteration  30: 5655635.999 ops/s
Iteration   1: 5640798.013 ops/s
Iteration   2: 5613955.289 ops/s
Iteration   3: 5690848.678 ops/s
Iteration   4: 5712011.488 ops/s
Iteration   5: 5611898.756 ops/s
Iteration   6: 5713585.917 ops/s
Iteration   7: 5668782.520 ops/s
Iteration   8: 5684920.375 ops/s
Iteration   9: 5600777.581 ops/s
Iteration  10: 5633872.213 ops/s
Iteration  11: 5716272.220 ops/s
Iteration  12: 5620060.641 ops/s
Iteration  13: 5615536.319 ops/s
Iteration  14: 5692913.927 ops/s
Iteration  15: 5692265.435 ops/s
Iteration  16: 5712402.045 ops/s
Iteration  17: 5597449.441 ops/s
Iteration  18: 5695864.176 ops/s
Iteration  19: 5699796.397 ops/s
Iteration  20: 5692092.323 ops/s
Iteration  21: 5667537.436 ops/s
Iteration  22: 5685841.315 ops/s
Iteration  23: 5709170.857 ops/s
Iteration  24: 5618067.588 ops/s
Iteration  25: 5580256.134 ops/s
Iteration  26: 5730220.584 ops/s
Iteration  27: 5699996.634 ops/s
Iteration  28: 5704357.178 ops/s
Iteration  29: 5671321.348 ops/s
Iteration  30: 5718818.901 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray":
  5669723.058 ±(99.9%) 29398.598 ops/s [Average]
  (min, avg, max) = (5580256.134, 5669723.058, 5730220.584), stdev = 44002.441
  CI (99.9%): [5640324.460, 5699121.655] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray  thrpt   30  5669723.058 ± 29398.598  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 596696.069 ops/s
# Warmup Iteration   2: 966733.344 ops/s
# Warmup Iteration   3: 1086130.661 ops/s
# Warmup Iteration   4: 1079035.835 ops/s
# Warmup Iteration   5: 1080365.894 ops/s
# Warmup Iteration   6: 907022.249 ops/s
# Warmup Iteration   7: 1091724.733 ops/s
# Warmup Iteration   8: 1076092.526 ops/s
# Warmup Iteration   9: 1092390.383 ops/s
# Warmup Iteration  10: 1070024.240 ops/s
# Warmup Iteration  11: 1074703.366 ops/s
# Warmup Iteration  12: 1090308.041 ops/s
# Warmup Iteration  13: 1092252.781 ops/s
# Warmup Iteration  14: 1086178.371 ops/s
# Warmup Iteration  15: 1085768.708 ops/s
# Warmup Iteration  16: 1080105.520 ops/s
# Warmup Iteration  17: 1093735.070 ops/s
# Warmup Iteration  18: 1091746.432 ops/s
# Warmup Iteration  19: 1081605.114 ops/s
# Warmup Iteration  20: 1082218.167 ops/s
# Warmup Iteration  21: 1089677.737 ops/s
# Warmup Iteration  22: 1092735.758 ops/s
# Warmup Iteration  23: 1091008.203 ops/s
# Warmup Iteration  24: 1087973.432 ops/s
# Warmup Iteration  25: 1084433.726 ops/s
# Warmup Iteration  26: 1087743.392 ops/s
# Warmup Iteration  27: 1084255.084 ops/s
# Warmup Iteration  28: 1078850.820 ops/s
# Warmup Iteration  29: 1086188.465 ops/s
# Warmup Iteration  30: 1085713.160 ops/s
Iteration   1: 1072191.926 ops/s
Iteration   2: 1093208.279 ops/s
Iteration   3: 1078449.654 ops/s
Iteration   4: 1092552.342 ops/s
Iteration   5: 1086745.295 ops/s
Iteration   6: 1091540.938 ops/s
Iteration   7: 1085576.797 ops/s
Iteration   8: 1093592.807 ops/s
Iteration   9: 1092480.746 ops/s
Iteration  10: 1073436.370 ops/s
Iteration  11: 1080825.176 ops/s
Iteration  12: 1062880.973 ops/s
Iteration  13: 1075366.084 ops/s
Iteration  14: 1083733.538 ops/s
Iteration  15: 1090693.572 ops/s
Iteration  16: 1087213.951 ops/s
Iteration  17: 1090036.964 ops/s
Iteration  18: 1081768.891 ops/s
Iteration  19: 1091876.080 ops/s
Iteration  20: 1082335.091 ops/s
Iteration  21: 1092176.455 ops/s
Iteration  22: 1085042.004 ops/s
Iteration  23: 1049690.422 ops/s
Iteration  24: 1082914.672 ops/s
Iteration  25: 1092498.589 ops/s
Iteration  26: 1086713.622 ops/s
Iteration  27: 1082499.564 ops/s
Iteration  28: 1085003.100 ops/s
Iteration  29: 1080647.357 ops/s
Iteration  30: 1068709.677 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable":
  1083080.031 ±(99.9%) 6694.272 ops/s [Average]
  (min, avg, max) = (1049690.422, 1083080.031, 1093592.807), stdev = 10019.673
  CI (99.9%): [1076385.759, 1089774.304] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1083080.031 ± 6694.272  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2642957.136 ops/s
# Warmup Iteration   2: 5698493.906 ops/s
# Warmup Iteration   3: 4644207.076 ops/s
# Warmup Iteration   4: 5586204.863 ops/s
# Warmup Iteration   5: 5627396.493 ops/s
# Warmup Iteration   6: 5659302.157 ops/s
# Warmup Iteration   7: 5651939.223 ops/s
# Warmup Iteration   8: 5654735.855 ops/s
# Warmup Iteration   9: 5651431.432 ops/s
# Warmup Iteration  10: 5611006.571 ops/s
# Warmup Iteration  11: 5667645.893 ops/s
# Warmup Iteration  12: 5577484.169 ops/s
# Warmup Iteration  13: 5637959.780 ops/s
# Warmup Iteration  14: 5644325.930 ops/s
# Warmup Iteration  15: 5689804.319 ops/s
# Warmup Iteration  16: 5662548.679 ops/s
# Warmup Iteration  17: 5590476.486 ops/s
# Warmup Iteration  18: 5686131.274 ops/s
# Warmup Iteration  19: 5660281.862 ops/s
# Warmup Iteration  20: 5628179.129 ops/s
# Warmup Iteration  21: 5616996.699 ops/s
# Warmup Iteration  22: 5635368.199 ops/s
# Warmup Iteration  23: 5567544.233 ops/s
# Warmup Iteration  24: 5539459.274 ops/s
# Warmup Iteration  25: 5659556.851 ops/s
# Warmup Iteration  26: 5600787.330 ops/s
# Warmup Iteration  27: 5649813.375 ops/s
# Warmup Iteration  28: 5676174.701 ops/s
# Warmup Iteration  29: 5648685.137 ops/s
# Warmup Iteration  30: 5662424.247 ops/s
Iteration   1: 5567334.897 ops/s
Iteration   2: 5654389.755 ops/s
Iteration   3: 5639008.816 ops/s
Iteration   4: 5482365.684 ops/s
Iteration   5: 5669626.373 ops/s
Iteration   6: 5582171.360 ops/s
Iteration   7: 5564787.748 ops/s
Iteration   8: 5691693.190 ops/s
Iteration   9: 5663114.608 ops/s
Iteration  10: 5654160.506 ops/s
Iteration  11: 5663381.930 ops/s
Iteration  12: 5668892.622 ops/s
Iteration  13: 5560354.790 ops/s
Iteration  14: 5633423.693 ops/s
Iteration  15: 5701822.355 ops/s
Iteration  16: 5651773.525 ops/s
Iteration  17: 5713157.706 ops/s
Iteration  18: 5694143.601 ops/s
Iteration  19: 5640893.113 ops/s
Iteration  20: 5698285.459 ops/s
Iteration  21: 5630866.097 ops/s
Iteration  22: 5639063.626 ops/s
Iteration  23: 5702290.059 ops/s
Iteration  24: 5707494.605 ops/s
Iteration  25: 5592422.188 ops/s
Iteration  26: 5640996.053 ops/s
Iteration  27: 5618030.288 ops/s
Iteration  28: 5675975.260 ops/s
Iteration  29: 5682002.797 ops/s
Iteration  30: 5695659.033 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray":
  5645986.058 ±(99.9%) 35824.953 ops/s [Average]
  (min, avg, max) = (5482365.684, 5645986.058, 5713157.706), stdev = 53621.107
  CI (99.9%): [5610161.105, 5681811.010] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray  thrpt   30  5645986.058 ± 35824.953  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 570872.700 ops/s
# Warmup Iteration   2: 908604.455 ops/s
# Warmup Iteration   3: 1016611.583 ops/s
# Warmup Iteration   4: 1028716.919 ops/s
# Warmup Iteration   5: 1021410.247 ops/s
# Warmup Iteration   6: 848026.467 ops/s
# Warmup Iteration   7: 1025721.602 ops/s
# Warmup Iteration   8: 1021481.590 ops/s
# Warmup Iteration   9: 1034398.280 ops/s
# Warmup Iteration  10: 1025257.269 ops/s
# Warmup Iteration  11: 1031213.096 ops/s
# Warmup Iteration  12: 1019588.608 ops/s
# Warmup Iteration  13: 1028563.384 ops/s
# Warmup Iteration  14: 1033787.606 ops/s
# Warmup Iteration  15: 1022973.448 ops/s
# Warmup Iteration  16: 1031210.181 ops/s
# Warmup Iteration  17: 1024693.815 ops/s
# Warmup Iteration  18: 1030177.877 ops/s
# Warmup Iteration  19: 1032015.053 ops/s
# Warmup Iteration  20: 1029287.534 ops/s
# Warmup Iteration  21: 1023599.596 ops/s
# Warmup Iteration  22: 1032539.410 ops/s
# Warmup Iteration  23: 1024828.600 ops/s
# Warmup Iteration  24: 1024425.843 ops/s
# Warmup Iteration  25: 1031422.502 ops/s
# Warmup Iteration  26: 1020064.456 ops/s
# Warmup Iteration  27: 1032938.392 ops/s
# Warmup Iteration  28: 1024799.715 ops/s
# Warmup Iteration  29: 1026791.334 ops/s
# Warmup Iteration  30: 1034300.902 ops/s
Iteration   1: 1031105.317 ops/s
Iteration   2: 1024498.295 ops/s
Iteration   3: 1033396.329 ops/s
Iteration   4: 1017107.881 ops/s
Iteration   5: 1033383.296 ops/s
Iteration   6: 1011462.389 ops/s
Iteration   7: 1030945.341 ops/s
Iteration   8: 1013090.629 ops/s
Iteration   9: 1035554.322 ops/s
Iteration  10: 1031555.563 ops/s
Iteration  11: 1032413.871 ops/s
Iteration  12: 1025641.409 ops/s
Iteration  13: 1029548.240 ops/s
Iteration  14: 1035652.231 ops/s
Iteration  15: 1032271.112 ops/s
Iteration  16: 1029259.284 ops/s
Iteration  17: 1028364.769 ops/s
Iteration  18: 1034945.294 ops/s
Iteration  19: 1021196.279 ops/s
Iteration  20: 1020874.277 ops/s
Iteration  21: 1026659.704 ops/s
Iteration  22: 1029392.506 ops/s
Iteration  23: 1031503.142 ops/s
Iteration  24: 1030818.980 ops/s
Iteration  25: 1036641.340 ops/s
Iteration  26: 1028619.025 ops/s
Iteration  27: 1026342.474 ops/s
Iteration  28: 1014881.411 ops/s
Iteration  29: 1030961.336 ops/s
Iteration  30: 1029661.289 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable":
  1027924.911 ±(99.9%) 4489.197 ops/s [Average]
  (min, avg, max) = (1011462.389, 1027924.911, 1036641.340), stdev = 6719.219
  CI (99.9%): [1023435.715, 1032414.108] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  1027924.911 ± 4489.197  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1381244.387 ops/s
# Warmup Iteration   2: 2889203.231 ops/s
# Warmup Iteration   3: 2965409.137 ops/s
# Warmup Iteration   4: 2905306.598 ops/s
# Warmup Iteration   5: 2490650.459 ops/s
# Warmup Iteration   6: 2953884.492 ops/s
# Warmup Iteration   7: 2962579.684 ops/s
# Warmup Iteration   8: 2930601.402 ops/s
# Warmup Iteration   9: 2944558.792 ops/s
# Warmup Iteration  10: 2972213.169 ops/s
# Warmup Iteration  11: 2911351.209 ops/s
# Warmup Iteration  12: 2957293.761 ops/s
# Warmup Iteration  13: 2961954.762 ops/s
# Warmup Iteration  14: 2934157.666 ops/s
# Warmup Iteration  15: 2957058.906 ops/s
# Warmup Iteration  16: 2923797.647 ops/s
# Warmup Iteration  17: 2969918.240 ops/s
# Warmup Iteration  18: 2932267.053 ops/s
# Warmup Iteration  19: 2959653.742 ops/s
# Warmup Iteration  20: 2963102.365 ops/s
# Warmup Iteration  21: 2935491.977 ops/s
# Warmup Iteration  22: 2952027.034 ops/s
# Warmup Iteration  23: 2937377.634 ops/s
# Warmup Iteration  24: 2934202.288 ops/s
# Warmup Iteration  25: 2952113.162 ops/s
# Warmup Iteration  26: 2928085.659 ops/s
# Warmup Iteration  27: 2936285.404 ops/s
# Warmup Iteration  28: 2963986.701 ops/s
# Warmup Iteration  29: 2951266.191 ops/s
# Warmup Iteration  30: 2960966.096 ops/s
Iteration   1: 2955904.963 ops/s
Iteration   2: 2971926.301 ops/s
Iteration   3: 2966917.811 ops/s
Iteration   4: 2953611.238 ops/s
Iteration   5: 2912295.580 ops/s
Iteration   6: 2923985.061 ops/s
Iteration   7: 2952556.601 ops/s
Iteration   8: 2923802.430 ops/s
Iteration   9: 2953868.803 ops/s
Iteration  10: 2952804.533 ops/s
Iteration  11: 2949162.579 ops/s
Iteration  12: 2975909.538 ops/s
Iteration  13: 2953462.682 ops/s
Iteration  14: 2906897.465 ops/s
Iteration  15: 2928941.628 ops/s
Iteration  16: 2964365.152 ops/s
Iteration  17: 2963886.571 ops/s
Iteration  18: 2962779.737 ops/s
Iteration  19: 2964472.105 ops/s
Iteration  20: 2940895.961 ops/s
Iteration  21: 2940498.802 ops/s
Iteration  22: 2961697.895 ops/s
Iteration  23: 2963627.459 ops/s
Iteration  24: 2955404.198 ops/s
Iteration  25: 2966462.350 ops/s
Iteration  26: 2957924.224 ops/s
Iteration  27: 2953483.797 ops/s
Iteration  28: 2921500.545 ops/s
Iteration  29: 2970192.309 ops/s
Iteration  30: 2972981.268 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_count":
  2951407.320 ±(99.9%) 12372.830 ops/s [Average]
  (min, avg, max) = (2906897.465, 2951407.320, 2975909.538), stdev = 18519.071
  CI (99.9%): [2939034.489, 2963780.150] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_count  thrpt   30  2951407.320 ± 12372.830  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1950771.641 ops/s
# Warmup Iteration   2: 4019410.044 ops/s
# Warmup Iteration   3: 4158358.337 ops/s
# Warmup Iteration   4: 4164188.920 ops/s
# Warmup Iteration   5: 3427834.812 ops/s
# Warmup Iteration   6: 4112884.528 ops/s
# Warmup Iteration   7: 4134076.764 ops/s
# Warmup Iteration   8: 4148634.478 ops/s
# Warmup Iteration   9: 4166875.320 ops/s
# Warmup Iteration  10: 4154528.818 ops/s
# Warmup Iteration  11: 4130182.562 ops/s
# Warmup Iteration  12: 4154439.589 ops/s
# Warmup Iteration  13: 4145460.492 ops/s
# Warmup Iteration  14: 4164405.897 ops/s
# Warmup Iteration  15: 4142580.723 ops/s
# Warmup Iteration  16: 4157883.582 ops/s
# Warmup Iteration  17: 4141340.318 ops/s
# Warmup Iteration  18: 4152922.287 ops/s
# Warmup Iteration  19: 4167084.464 ops/s
# Warmup Iteration  20: 4075679.507 ops/s
# Warmup Iteration  21: 4066703.669 ops/s
# Warmup Iteration  22: 4153278.237 ops/s
# Warmup Iteration  23: 4094208.817 ops/s
# Warmup Iteration  24: 4166203.573 ops/s
# Warmup Iteration  25: 4179101.235 ops/s
# Warmup Iteration  26: 4162737.990 ops/s
# Warmup Iteration  27: 4143117.275 ops/s
# Warmup Iteration  28: 4144247.341 ops/s
# Warmup Iteration  29: 4103331.903 ops/s
# Warmup Iteration  30: 4118904.437 ops/s
Iteration   1: 4104641.837 ops/s
Iteration   2: 4158756.097 ops/s
Iteration   3: 4132897.372 ops/s
Iteration   4: 4155485.078 ops/s
Iteration   5: 4107345.605 ops/s
Iteration   6: 4165326.033 ops/s
Iteration   7: 4168883.013 ops/s
Iteration   8: 4090486.619 ops/s
Iteration   9: 4133937.625 ops/s
Iteration  10: 4100932.224 ops/s
Iteration  11: 4117126.727 ops/s
Iteration  12: 4155868.154 ops/s
Iteration  13: 4131891.776 ops/s
Iteration  14: 4139133.653 ops/s
Iteration  15: 4157772.953 ops/s
Iteration  16: 4164408.617 ops/s
Iteration  17: 4136793.201 ops/s
Iteration  18: 4156298.760 ops/s
Iteration  19: 4156667.011 ops/s
Iteration  20: 4162885.770 ops/s
Iteration  21: 4174973.207 ops/s
Iteration  22: 4171621.338 ops/s
Iteration  23: 4101443.769 ops/s
Iteration  24: 4165531.290 ops/s
Iteration  25: 4058522.393 ops/s
Iteration  26: 4163234.831 ops/s
Iteration  27: 4170779.093 ops/s
Iteration  28: 4042498.798 ops/s
Iteration  29: 4166915.711 ops/s
Iteration  30: 4107271.164 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone":
  4137344.324 ±(99.9%) 23163.129 ops/s [Average]
  (min, avg, max) = (4042498.798, 4137344.324, 4174973.207), stdev = 34669.484
  CI (99.9%): [4114181.195, 4160507.453] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone  thrpt   30  4137344.324 ± 23163.129  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3516612.629 ops/s
# Warmup Iteration   2: 7414298.729 ops/s
# Warmup Iteration   3: 6374740.794 ops/s
# Warmup Iteration   4: 7697748.854 ops/s
# Warmup Iteration   5: 7606738.357 ops/s
# Warmup Iteration   6: 7699420.456 ops/s
# Warmup Iteration   7: 7680871.663 ops/s
# Warmup Iteration   8: 7627505.284 ops/s
# Warmup Iteration   9: 7648066.812 ops/s
# Warmup Iteration  10: 7686154.674 ops/s
# Warmup Iteration  11: 7675242.818 ops/s
# Warmup Iteration  12: 7645568.946 ops/s
# Warmup Iteration  13: 7675351.124 ops/s
# Warmup Iteration  14: 7672822.658 ops/s
# Warmup Iteration  15: 7661286.999 ops/s
# Warmup Iteration  16: 7671320.038 ops/s
# Warmup Iteration  17: 7733002.593 ops/s
# Warmup Iteration  18: 7682350.327 ops/s
# Warmup Iteration  19: 7596598.396 ops/s
# Warmup Iteration  20: 7698719.516 ops/s
# Warmup Iteration  21: 7683227.969 ops/s
# Warmup Iteration  22: 7685484.972 ops/s
# Warmup Iteration  23: 7590024.827 ops/s
# Warmup Iteration  24: 7644741.479 ops/s
# Warmup Iteration  25: 7608459.372 ops/s
# Warmup Iteration  26: 7714820.395 ops/s
# Warmup Iteration  27: 7636717.084 ops/s
# Warmup Iteration  28: 7639323.794 ops/s
# Warmup Iteration  29: 7687963.962 ops/s
# Warmup Iteration  30: 7688406.705 ops/s
Iteration   1: 7625457.205 ops/s
Iteration   2: 7685964.254 ops/s
Iteration   3: 7653992.009 ops/s
Iteration   4: 7553568.977 ops/s
Iteration   5: 7703633.126 ops/s
Iteration   6: 7585067.776 ops/s
Iteration   7: 7671957.729 ops/s
Iteration   8: 7722958.306 ops/s
Iteration   9: 7637519.723 ops/s
Iteration  10: 7674020.689 ops/s
Iteration  11: 7571411.695 ops/s
Iteration  12: 7696277.067 ops/s
Iteration  13: 7706733.949 ops/s
Iteration  14: 7697990.948 ops/s
Iteration  15: 7675379.772 ops/s
Iteration  16: 7473422.167 ops/s
Iteration  17: 7688668.090 ops/s
Iteration  18: 7678887.586 ops/s
Iteration  19: 7652232.769 ops/s
Iteration  20: 7705092.263 ops/s
Iteration  21: 7643646.297 ops/s
Iteration  22: 7582871.326 ops/s
Iteration  23: 7675448.604 ops/s
Iteration  24: 7643290.461 ops/s
Iteration  25: 7558406.621 ops/s
Iteration  26: 7643337.672 ops/s
Iteration  27: 7639920.470 ops/s
Iteration  28: 7724940.586 ops/s
Iteration  29: 7684533.602 ops/s
Iteration  30: 7722706.373 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_forEach":
  7652644.604 ±(99.9%) 39532.734 ops/s [Average]
  (min, avg, max) = (7473422.167, 7652644.604, 7724940.586), stdev = 59170.740
  CI (99.9%): [7613111.870, 7692177.338] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_forEach  thrpt   30  7652644.604 ± 39532.734  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9725172.832 ops/s
# Warmup Iteration   2: 19699931.574 ops/s
# Warmup Iteration   3: 17152694.044 ops/s
# Warmup Iteration   4: 20461729.767 ops/s
# Warmup Iteration   5: 20452013.910 ops/s
# Warmup Iteration   6: 20414518.723 ops/s
# Warmup Iteration   7: 20379321.439 ops/s
# Warmup Iteration   8: 20140982.489 ops/s
# Warmup Iteration   9: 20356983.430 ops/s
# Warmup Iteration  10: 20347962.482 ops/s
# Warmup Iteration  11: 20251813.052 ops/s
# Warmup Iteration  12: 20395216.479 ops/s
# Warmup Iteration  13: 20353534.860 ops/s
# Warmup Iteration  14: 20321648.588 ops/s
# Warmup Iteration  15: 20422525.051 ops/s
# Warmup Iteration  16: 20396158.614 ops/s
# Warmup Iteration  17: 20300422.875 ops/s
# Warmup Iteration  18: 20385529.381 ops/s
# Warmup Iteration  19: 20371606.772 ops/s
# Warmup Iteration  20: 20163478.477 ops/s
# Warmup Iteration  21: 20258611.129 ops/s
# Warmup Iteration  22: 20351086.244 ops/s
# Warmup Iteration  23: 20095842.556 ops/s
# Warmup Iteration  24: 20288010.924 ops/s
# Warmup Iteration  25: 20177343.167 ops/s
# Warmup Iteration  26: 20333888.605 ops/s
# Warmup Iteration  27: 20286020.988 ops/s
# Warmup Iteration  28: 20424141.277 ops/s
# Warmup Iteration  29: 20410211.951 ops/s
# Warmup Iteration  30: 20065588.595 ops/s
Iteration   1: 20081506.050 ops/s
Iteration   2: 20416241.908 ops/s
Iteration   3: 20416059.276 ops/s
Iteration   4: 20191752.249 ops/s
Iteration   5: 20375334.195 ops/s
Iteration   6: 20274824.873 ops/s
Iteration   7: 20414973.280 ops/s
Iteration   8: 20355131.060 ops/s
Iteration   9: 20227781.368 ops/s
Iteration  10: 20104439.540 ops/s
Iteration  11: 20109844.814 ops/s
Iteration  12: 20285758.690 ops/s
Iteration  13: 20330499.010 ops/s
Iteration  14: 20394401.000 ops/s
Iteration  15: 20368842.902 ops/s
Iteration  16: 20347421.538 ops/s
Iteration  17: 20401988.255 ops/s
Iteration  18: 20312551.879 ops/s
Iteration  19: 20453530.185 ops/s
Iteration  20: 20404950.564 ops/s
Iteration  21: 20410747.676 ops/s
Iteration  22: 20396829.047 ops/s
Iteration  23: 20445525.658 ops/s
Iteration  24: 20406779.434 ops/s
Iteration  25: 20415668.830 ops/s
Iteration  26: 20092230.945 ops/s
Iteration  27: 20386067.863 ops/s
Iteration  28: 20463700.038 ops/s
Iteration  29: 20071070.686 ops/s
Iteration  30: 20364657.882 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_injectInto":
  20324037.023 ±(99.9%) 81829.782 ops/s [Average]
  (min, avg, max) = (20071070.686, 20324037.023, 20463700.038), stdev = 122478.975
  CI (99.9%): [20242207.241, 20405866.805] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_injectInto  thrpt   30  20324037.023 ± 81829.782  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1452955.605 ops/s
# Warmup Iteration   2: 2364651.985 ops/s
# Warmup Iteration   3: 2721460.111 ops/s
# Warmup Iteration   4: 2710999.919 ops/s
# Warmup Iteration   5: 2722712.873 ops/s
# Warmup Iteration   6: 2728284.104 ops/s
# Warmup Iteration   7: 2718720.164 ops/s
# Warmup Iteration   8: 2723002.349 ops/s
# Warmup Iteration   9: 2700470.630 ops/s
# Warmup Iteration  10: 2685148.371 ops/s
# Warmup Iteration  11: 2708824.706 ops/s
# Warmup Iteration  12: 2726448.514 ops/s
# Warmup Iteration  13: 2696330.845 ops/s
# Warmup Iteration  14: 2691644.726 ops/s
# Warmup Iteration  15: 2714980.182 ops/s
# Warmup Iteration  16: 2727618.823 ops/s
# Warmup Iteration  17: 2717548.809 ops/s
# Warmup Iteration  18: 2740505.396 ops/s
# Warmup Iteration  19: 2719357.016 ops/s
# Warmup Iteration  20: 2738743.280 ops/s
# Warmup Iteration  21: 2748589.437 ops/s
# Warmup Iteration  22: 2738395.074 ops/s
# Warmup Iteration  23: 2741938.667 ops/s
# Warmup Iteration  24: 2732923.298 ops/s
# Warmup Iteration  25: 2663027.296 ops/s
# Warmup Iteration  26: 2729702.494 ops/s
# Warmup Iteration  27: 2729199.042 ops/s
# Warmup Iteration  28: 2741595.909 ops/s
# Warmup Iteration  29: 2754665.303 ops/s
# Warmup Iteration  30: 2744859.237 ops/s
Iteration   1: 2735945.589 ops/s
Iteration   2: 2728143.170 ops/s
Iteration   3: 2730610.113 ops/s
Iteration   4: 2768718.827 ops/s
Iteration   5: 2750685.491 ops/s
Iteration   6: 2739035.221 ops/s
Iteration   7: 2701213.796 ops/s
Iteration   8: 2676845.150 ops/s
Iteration   9: 2752768.412 ops/s
Iteration  10: 2722933.730 ops/s
Iteration  11: 2732651.124 ops/s
Iteration  12: 2731730.923 ops/s
Iteration  13: 2758254.615 ops/s
Iteration  14: 2718148.806 ops/s
Iteration  15: 2708081.076 ops/s
Iteration  16: 2727016.964 ops/s
Iteration  17: 2687543.155 ops/s
Iteration  18: 2705283.357 ops/s
Iteration  19: 2727524.735 ops/s
Iteration  20: 2726510.097 ops/s
Iteration  21: 2739349.001 ops/s
Iteration  22: 2745669.118 ops/s
Iteration  23: 2757402.175 ops/s
Iteration  24: 2749703.441 ops/s
Iteration  25: 2704982.216 ops/s
Iteration  26: 2737143.266 ops/s
Iteration  27: 2746450.001 ops/s
Iteration  28: 2740732.426 ops/s
Iteration  29: 2730013.914 ops/s
Iteration  30: 2728651.222 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty":
  2730324.704 ±(99.9%) 13966.920 ops/s [Average]
  (min, avg, max) = (2676845.150, 2730324.704, 2768718.827), stdev = 20905.029
  CI (99.9%): [2716357.785, 2744291.624] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  2730324.704 ± 13966.920  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 723268.126 ops/s
# Warmup Iteration   2: 748318.057 ops/s
# Warmup Iteration   3: 938642.697 ops/s
# Warmup Iteration   4: 989428.621 ops/s
# Warmup Iteration   5: 985722.513 ops/s
# Warmup Iteration   6: 988806.213 ops/s
# Warmup Iteration   7: 976038.081 ops/s
# Warmup Iteration   8: 990241.525 ops/s
# Warmup Iteration   9: 987402.715 ops/s
# Warmup Iteration  10: 983550.795 ops/s
# Warmup Iteration  11: 987786.524 ops/s
# Warmup Iteration  12: 957233.541 ops/s
# Warmup Iteration  13: 840066.922 ops/s
# Warmup Iteration  14: 984545.379 ops/s
# Warmup Iteration  15: 987493.638 ops/s
# Warmup Iteration  16: 991470.333 ops/s
# Warmup Iteration  17: 1044786.486 ops/s
# Warmup Iteration  18: 1053369.705 ops/s
# Warmup Iteration  19: 1043754.124 ops/s
# Warmup Iteration  20: 1055910.549 ops/s
# Warmup Iteration  21: 1051583.674 ops/s
# Warmup Iteration  22: 1047028.186 ops/s
# Warmup Iteration  23: 1047787.277 ops/s
# Warmup Iteration  24: 1050051.867 ops/s
# Warmup Iteration  25: 1053891.544 ops/s
# Warmup Iteration  26: 1047157.160 ops/s
# Warmup Iteration  27: 1057109.362 ops/s
# Warmup Iteration  28: 1035832.051 ops/s
# Warmup Iteration  29: 1045889.742 ops/s
# Warmup Iteration  30: 1053598.024 ops/s
Iteration   1: 1029002.497 ops/s
Iteration   2: 1046468.649 ops/s
Iteration   3: 1035510.943 ops/s
Iteration   4: 1041397.666 ops/s
Iteration   5: 1053453.345 ops/s
Iteration   6: 1051090.058 ops/s
Iteration   7: 1031112.170 ops/s
Iteration   8: 1051645.196 ops/s
Iteration   9: 1030092.801 ops/s
Iteration  10: 1033875.613 ops/s
Iteration  11: 1038872.483 ops/s
Iteration  12: 1037205.723 ops/s
Iteration  13: 1054119.951 ops/s
Iteration  14: 1062050.134 ops/s
Iteration  15: 1032434.243 ops/s
Iteration  16: 1051954.755 ops/s
Iteration  17: 1056036.050 ops/s
Iteration  18: 1055048.266 ops/s
Iteration  19: 1054735.586 ops/s
Iteration  20: 1056079.497 ops/s
Iteration  21: 1056596.979 ops/s
Iteration  22: 1056830.259 ops/s
Iteration  23: 1051351.265 ops/s
Iteration  24: 1052601.716 ops/s
Iteration  25: 1054467.748 ops/s
Iteration  26: 1047064.337 ops/s
Iteration  27: 1051627.800 ops/s
Iteration  28: 1052903.868 ops/s
Iteration  29: 1047903.359 ops/s
Iteration  30: 1044233.519 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws":
  1047258.883 ±(99.9%) 6326.369 ops/s [Average]
  (min, avg, max) = (1029002.497, 1047258.883, 1062050.134), stdev = 9469.011
  CI (99.9%): [1040932.514, 1053585.251] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws  thrpt   30  1047258.883 ± 6326.369  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 746390.721 ops/s
# Warmup Iteration   2: 765719.029 ops/s
# Warmup Iteration   3: 1013185.580 ops/s
# Warmup Iteration   4: 1004566.097 ops/s
# Warmup Iteration   5: 1008859.148 ops/s
# Warmup Iteration   6: 1010489.013 ops/s
# Warmup Iteration   7: 1003812.936 ops/s
# Warmup Iteration   8: 1008419.070 ops/s
# Warmup Iteration   9: 1010436.232 ops/s
# Warmup Iteration  10: 1014124.635 ops/s
# Warmup Iteration  11: 884552.560 ops/s
# Warmup Iteration  12: 976489.712 ops/s
# Warmup Iteration  13: 1017082.057 ops/s
# Warmup Iteration  14: 1016476.262 ops/s
# Warmup Iteration  15: 1009936.115 ops/s
# Warmup Iteration  16: 1008528.525 ops/s
# Warmup Iteration  17: 1071545.286 ops/s
# Warmup Iteration  18: 1081584.263 ops/s
# Warmup Iteration  19: 1073935.290 ops/s
# Warmup Iteration  20: 1075683.793 ops/s
# Warmup Iteration  21: 1077223.224 ops/s
# Warmup Iteration  22: 1063421.965 ops/s
# Warmup Iteration  23: 1076337.239 ops/s
# Warmup Iteration  24: 1059209.059 ops/s
# Warmup Iteration  25: 1055338.723 ops/s
# Warmup Iteration  26: 1060475.499 ops/s
# Warmup Iteration  27: 1081889.843 ops/s
# Warmup Iteration  28: 1075053.138 ops/s
# Warmup Iteration  29: 1081345.776 ops/s
# Warmup Iteration  30: 1076647.871 ops/s
Iteration   1: 1063998.846 ops/s
Iteration   2: 1069934.624 ops/s
Iteration   3: 1080516.476 ops/s
Iteration   4: 1075190.976 ops/s
Iteration   5: 1078443.801 ops/s
Iteration   6: 1082599.816 ops/s
Iteration   7: 1074108.203 ops/s
Iteration   8: 1074081.609 ops/s
Iteration   9: 1076420.018 ops/s
Iteration  10: 1075193.947 ops/s
Iteration  11: 1059797.765 ops/s
Iteration  12: 1079470.202 ops/s
Iteration  13: 1074402.397 ops/s
Iteration  14: 1074273.128 ops/s
Iteration  15: 1048815.335 ops/s
Iteration  16: 1072190.410 ops/s
Iteration  17: 1063903.788 ops/s
Iteration  18: 1077143.813 ops/s
Iteration  19: 1078428.075 ops/s
Iteration  20: 1053385.726 ops/s
Iteration  21: 1077388.215 ops/s
Iteration  22: 1067995.882 ops/s
Iteration  23: 1074582.425 ops/s
Iteration  24: 1083017.239 ops/s
Iteration  25: 1058335.422 ops/s
Iteration  26: 1060197.566 ops/s
Iteration  27: 1060250.860 ops/s
Iteration  28: 1061245.778 ops/s
Iteration  29: 1071724.368 ops/s
Iteration  30: 1074691.053 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList":
  1070724.259 ±(99.9%) 5934.081 ops/s [Average]
  (min, avg, max) = (1048815.335, 1070724.259, 1083017.239), stdev = 8881.853
  CI (99.9%): [1064790.178, 1076658.339] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1070724.259 ± 5934.081  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 686972.453 ops/s
# Warmup Iteration   2: 698222.727 ops/s
# Warmup Iteration   3: 884210.649 ops/s
# Warmup Iteration   4: 915770.770 ops/s
# Warmup Iteration   5: 905497.472 ops/s
# Warmup Iteration   6: 917248.974 ops/s
# Warmup Iteration   7: 916930.050 ops/s
# Warmup Iteration   8: 917638.023 ops/s
# Warmup Iteration   9: 913746.974 ops/s
# Warmup Iteration  10: 909040.520 ops/s
# Warmup Iteration  11: 921247.225 ops/s
# Warmup Iteration  12: 875778.142 ops/s
# Warmup Iteration  13: 818304.487 ops/s
# Warmup Iteration  14: 910613.947 ops/s
# Warmup Iteration  15: 914510.947 ops/s
# Warmup Iteration  16: 919744.596 ops/s
# Warmup Iteration  17: 972333.051 ops/s
# Warmup Iteration  18: 973815.255 ops/s
# Warmup Iteration  19: 967495.468 ops/s
# Warmup Iteration  20: 974017.333 ops/s
# Warmup Iteration  21: 953400.398 ops/s
# Warmup Iteration  22: 955193.387 ops/s
# Warmup Iteration  23: 969767.925 ops/s
# Warmup Iteration  24: 970829.962 ops/s
# Warmup Iteration  25: 959613.047 ops/s
# Warmup Iteration  26: 969795.894 ops/s
# Warmup Iteration  27: 973604.035 ops/s
# Warmup Iteration  28: 980452.683 ops/s
# Warmup Iteration  29: 971275.466 ops/s
# Warmup Iteration  30: 970707.380 ops/s
Iteration   1: 960417.525 ops/s
Iteration   2: 966865.318 ops/s
Iteration   3: 973683.015 ops/s
Iteration   4: 979070.170 ops/s
Iteration   5: 971242.588 ops/s
Iteration   6: 969882.224 ops/s
Iteration   7: 953499.075 ops/s
Iteration   8: 979440.576 ops/s
Iteration   9: 964442.251 ops/s
Iteration  10: 978575.561 ops/s
Iteration  11: 978535.925 ops/s
Iteration  12: 977880.070 ops/s
Iteration  13: 976906.988 ops/s
Iteration  14: 977437.425 ops/s
Iteration  15: 975499.536 ops/s
Iteration  16: 975970.585 ops/s
Iteration  17: 970855.954 ops/s
Iteration  18: 977179.167 ops/s
Iteration  19: 968280.308 ops/s
Iteration  20: 974505.727 ops/s
Iteration  21: 974972.432 ops/s
Iteration  22: 972239.816 ops/s
Iteration  23: 973234.816 ops/s
Iteration  24: 978612.419 ops/s
Iteration  25: 979202.093 ops/s
Iteration  26: 978207.521 ops/s
Iteration  27: 975387.362 ops/s
Iteration  28: 976076.732 ops/s
Iteration  29: 976303.801 ops/s
Iteration  30: 975755.990 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  973672.099 ±(99.9%) 4010.578 ops/s [Average]
  (min, avg, max) = (953499.075, 973672.099, 979440.576), stdev = 6002.845
  CI (99.9%): [969661.521, 977682.677] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt       Score      Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  973672.099 ± 4010.578  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 701410.612 ops/s
# Warmup Iteration   2: 719200.699 ops/s
# Warmup Iteration   3: 989352.910 ops/s
# Warmup Iteration   4: 989504.280 ops/s
# Warmup Iteration   5: 987790.070 ops/s
# Warmup Iteration   6: 988663.339 ops/s
# Warmup Iteration   7: 984297.828 ops/s
# Warmup Iteration   8: 991711.991 ops/s
# Warmup Iteration   9: 994000.687 ops/s
# Warmup Iteration  10: 983200.453 ops/s
# Warmup Iteration  11: 903449.577 ops/s
# Warmup Iteration  12: 909436.911 ops/s
# Warmup Iteration  13: 989161.927 ops/s
# Warmup Iteration  14: 998460.891 ops/s
# Warmup Iteration  15: 999118.502 ops/s
# Warmup Iteration  16: 983702.261 ops/s
# Warmup Iteration  17: 1055038.035 ops/s
# Warmup Iteration  18: 1042207.416 ops/s
# Warmup Iteration  19: 1050051.302 ops/s
# Warmup Iteration  20: 1056164.424 ops/s
# Warmup Iteration  21: 1043440.191 ops/s
# Warmup Iteration  22: 1055058.813 ops/s
# Warmup Iteration  23: 1056168.034 ops/s
# Warmup Iteration  24: 1054912.547 ops/s
# Warmup Iteration  25: 1045334.807 ops/s
# Warmup Iteration  26: 1046183.575 ops/s
# Warmup Iteration  27: 1057005.240 ops/s
# Warmup Iteration  28: 1055367.464 ops/s
# Warmup Iteration  29: 1056021.790 ops/s
# Warmup Iteration  30: 1052023.531 ops/s
Iteration   1: 1065084.116 ops/s
Iteration   2: 1034035.382 ops/s
Iteration   3: 1055223.787 ops/s
Iteration   4: 1049539.882 ops/s
Iteration   5: 1054701.965 ops/s
Iteration   6: 1056079.445 ops/s
Iteration   7: 1048868.405 ops/s
Iteration   8: 1055920.269 ops/s
Iteration   9: 1053724.340 ops/s
Iteration  10: 1049845.127 ops/s
Iteration  11: 1060788.205 ops/s
Iteration  12: 1058731.768 ops/s
Iteration  13: 1048913.129 ops/s
Iteration  14: 1062988.220 ops/s
Iteration  15: 1042918.311 ops/s
Iteration  16: 1045202.741 ops/s
Iteration  17: 1058622.451 ops/s
Iteration  18: 1060792.743 ops/s
Iteration  19: 1040505.879 ops/s
Iteration  20: 1057907.644 ops/s
Iteration  21: 1061000.533 ops/s
Iteration  22: 1060751.563 ops/s
Iteration  23: 1048301.833 ops/s
Iteration  24: 1056674.173 ops/s
Iteration  25: 1052335.462 ops/s
Iteration  26: 1053400.377 ops/s
Iteration  27: 1057900.351 ops/s
Iteration  28: 1057927.858 ops/s
Iteration  29: 1054936.574 ops/s
Iteration  30: 1053507.898 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  1053904.348 ±(99.9%) 4648.791 ops/s [Average]
  (min, avg, max) = (1034035.382, 1053904.348, 1065084.116), stdev = 6958.092
  CI (99.9%): [1049255.557, 1058553.139] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                 Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  1053904.348 ± 4648.791  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 737915.232 ops/s
# Warmup Iteration   2: 785294.307 ops/s
# Warmup Iteration   3: 1020159.078 ops/s
# Warmup Iteration   4: 1017231.539 ops/s
# Warmup Iteration   5: 1010693.681 ops/s
# Warmup Iteration   6: 1016575.870 ops/s
# Warmup Iteration   7: 1014004.303 ops/s
# Warmup Iteration   8: 1013435.179 ops/s
# Warmup Iteration   9: 1014773.501 ops/s
# Warmup Iteration  10: 1017186.754 ops/s
# Warmup Iteration  11: 842621.934 ops/s
# Warmup Iteration  12: 1016838.842 ops/s
# Warmup Iteration  13: 1002432.589 ops/s
# Warmup Iteration  14: 1009694.703 ops/s
# Warmup Iteration  15: 979354.945 ops/s
# Warmup Iteration  16: 1017028.664 ops/s
# Warmup Iteration  17: 1081151.393 ops/s
# Warmup Iteration  18: 1085590.401 ops/s
# Warmup Iteration  19: 1071051.941 ops/s
# Warmup Iteration  20: 1064097.739 ops/s
# Warmup Iteration  21: 1079401.669 ops/s
# Warmup Iteration  22: 1073550.835 ops/s
# Warmup Iteration  23: 1086565.170 ops/s
# Warmup Iteration  24: 1081720.903 ops/s
# Warmup Iteration  25: 1063849.944 ops/s
# Warmup Iteration  26: 1076936.414 ops/s
# Warmup Iteration  27: 1082287.925 ops/s
# Warmup Iteration  28: 1069613.468 ops/s
# Warmup Iteration  29: 1084082.911 ops/s
# Warmup Iteration  30: 1075558.691 ops/s
Iteration   1: 1084847.620 ops/s
Iteration   2: 1080851.696 ops/s
Iteration   3: 1080300.590 ops/s
Iteration   4: 1080714.060 ops/s
Iteration   5: 1081856.056 ops/s
Iteration   6: 1070292.367 ops/s
Iteration   7: 1068015.986 ops/s
Iteration   8: 1073079.791 ops/s
Iteration   9: 1076749.242 ops/s
Iteration  10: 1079125.663 ops/s
Iteration  11: 1073662.677 ops/s
Iteration  12: 1058507.723 ops/s
Iteration  13: 1081377.188 ops/s
Iteration  14: 1082560.655 ops/s
Iteration  15: 1060438.825 ops/s
Iteration  16: 1084646.406 ops/s
Iteration  17: 1071513.544 ops/s
Iteration  18: 1076645.272 ops/s
Iteration  19: 1077648.949 ops/s
Iteration  20: 1080124.173 ops/s
Iteration  21: 1083585.989 ops/s
Iteration  22: 1084425.287 ops/s
Iteration  23: 1078458.356 ops/s
Iteration  24: 1083972.189 ops/s
Iteration  25: 1067295.338 ops/s
Iteration  26: 1083121.444 ops/s
Iteration  27: 1080809.623 ops/s
Iteration  28: 1085296.946 ops/s
Iteration  29: 1076263.641 ops/s
Iteration  30: 1057442.394 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1076787.656 ±(99.9%) 5252.848 ops/s [Average]
  (min, avg, max) = (1057442.394, 1076787.656, 1085296.946), stdev = 7862.216
  CI (99.9%): [1071534.809, 1082040.504] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                 Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1076787.656 ± 5252.848  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 572387.189 ops/s
# Warmup Iteration   2: 1223995.310 ops/s
# Warmup Iteration   3: 1232752.015 ops/s
# Warmup Iteration   4: 1060445.300 ops/s
# Warmup Iteration   5: 1197613.506 ops/s
# Warmup Iteration   6: 1224408.480 ops/s
# Warmup Iteration   7: 1232653.632 ops/s
# Warmup Iteration   8: 1240731.449 ops/s
# Warmup Iteration   9: 1238096.435 ops/s
# Warmup Iteration  10: 1233097.184 ops/s
# Warmup Iteration  11: 1227742.499 ops/s
# Warmup Iteration  12: 1240677.767 ops/s
# Warmup Iteration  13: 1238577.378 ops/s
# Warmup Iteration  14: 1237708.506 ops/s
# Warmup Iteration  15: 1222239.458 ops/s
# Warmup Iteration  16: 1232027.693 ops/s
# Warmup Iteration  17: 1221106.735 ops/s
# Warmup Iteration  18: 1223952.743 ops/s
# Warmup Iteration  19: 1224412.844 ops/s
# Warmup Iteration  20: 1205616.196 ops/s
# Warmup Iteration  21: 1231435.076 ops/s
# Warmup Iteration  22: 1231438.789 ops/s
# Warmup Iteration  23: 1226838.801 ops/s
# Warmup Iteration  24: 1230198.471 ops/s
# Warmup Iteration  25: 1220730.126 ops/s
# Warmup Iteration  26: 1231367.052 ops/s
# Warmup Iteration  27: 1226915.424 ops/s
# Warmup Iteration  28: 1229353.253 ops/s
# Warmup Iteration  29: 1228115.355 ops/s
# Warmup Iteration  30: 1226182.475 ops/s
Iteration   1: 1223062.029 ops/s
Iteration   2: 1230225.673 ops/s
Iteration   3: 1219316.470 ops/s
Iteration   4: 1227895.410 ops/s
Iteration   5: 1220899.811 ops/s
Iteration   6: 1230863.890 ops/s
Iteration   7: 1220964.416 ops/s
Iteration   8: 1224966.083 ops/s
Iteration   9: 1229966.203 ops/s
Iteration  10: 1235583.728 ops/s
Iteration  11: 1225693.250 ops/s
Iteration  12: 1215671.962 ops/s
Iteration  13: 1233406.989 ops/s
Iteration  14: 1229838.516 ops/s
Iteration  15: 1226342.793 ops/s
Iteration  16: 1227838.201 ops/s
Iteration  17: 1218329.357 ops/s
Iteration  18: 1221527.504 ops/s
Iteration  19: 1228361.327 ops/s
Iteration  20: 1227186.042 ops/s
Iteration  21: 1204321.434 ops/s
Iteration  22: 1223243.180 ops/s
Iteration  23: 1229360.315 ops/s
Iteration  24: 1223791.419 ops/s
Iteration  25: 1222253.613 ops/s
Iteration  26: 1230479.043 ops/s
Iteration  27: 1228509.679 ops/s
Iteration  28: 1219282.652 ops/s
Iteration  29: 1229099.980 ops/s
Iteration  30: 1222982.941 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_makeString":
  1225042.130 ±(99.9%) 4104.562 ops/s [Average]
  (min, avg, max) = (1204321.434, 1225042.130, 1235583.728), stdev = 6143.516
  CI (99.9%): [1220937.568, 1229146.693] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_makeString  thrpt   30  1225042.130 ± 4104.562  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 164264529.642 ops/s
# Warmup Iteration   2: 300677783.213 ops/s
# Warmup Iteration   3: 239871957.839 ops/s
# Warmup Iteration   4: 274303421.587 ops/s
# Warmup Iteration   5: 274121645.516 ops/s
# Warmup Iteration   6: 274209571.564 ops/s
# Warmup Iteration   7: 273196323.036 ops/s
# Warmup Iteration   8: 273325314.834 ops/s
# Warmup Iteration   9: 275112108.513 ops/s
# Warmup Iteration  10: 272274192.232 ops/s
# Warmup Iteration  11: 273962910.155 ops/s
# Warmup Iteration  12: 274650137.719 ops/s
# Warmup Iteration  13: 272249774.838 ops/s
# Warmup Iteration  14: 273140317.083 ops/s
# Warmup Iteration  15: 273901654.843 ops/s
# Warmup Iteration  16: 275217014.814 ops/s
# Warmup Iteration  17: 271065094.804 ops/s
# Warmup Iteration  18: 272080402.546 ops/s
# Warmup Iteration  19: 270853803.505 ops/s
# Warmup Iteration  20: 271461553.591 ops/s
# Warmup Iteration  21: 272280974.069 ops/s
# Warmup Iteration  22: 272654216.066 ops/s
# Warmup Iteration  23: 272798419.240 ops/s
# Warmup Iteration  24: 271773696.429 ops/s
# Warmup Iteration  25: 271752821.167 ops/s
# Warmup Iteration  26: 272383727.030 ops/s
# Warmup Iteration  27: 272519042.060 ops/s
# Warmup Iteration  28: 271821228.771 ops/s
# Warmup Iteration  29: 270764613.471 ops/s
# Warmup Iteration  30: 272155890.666 ops/s
Iteration   1: 273218566.453 ops/s
Iteration   2: 271356375.545 ops/s
Iteration   3: 272950454.529 ops/s
Iteration   4: 268735925.086 ops/s
Iteration   5: 272908390.298 ops/s
Iteration   6: 273057315.656 ops/s
Iteration   7: 266777923.765 ops/s
Iteration   8: 270827262.650 ops/s
Iteration   9: 272211980.146 ops/s
Iteration  10: 272100511.780 ops/s
Iteration  11: 273497106.403 ops/s
Iteration  12: 271000423.105 ops/s
Iteration  13: 272229153.917 ops/s
Iteration  14: 270730006.436 ops/s
Iteration  15: 269724233.701 ops/s
Iteration  16: 271589981.107 ops/s
Iteration  17: 272318990.637 ops/s
Iteration  18: 266013894.130 ops/s
Iteration  19: 271658965.337 ops/s
Iteration  20: 271723135.167 ops/s
Iteration  21: 271089686.886 ops/s
Iteration  22: 272412464.456 ops/s
Iteration  23: 269946423.594 ops/s
Iteration  24: 272193075.363 ops/s
Iteration  25: 272722790.254 ops/s
Iteration  26: 272840275.365 ops/s
Iteration  27: 270436975.406 ops/s
Iteration  28: 272487870.923 ops/s
Iteration  29: 271786297.989 ops/s
Iteration  30: 268014506.537 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_newCollection":
  271285365.421 ±(99.9%) 1242223.306 ops/s [Average]
  (min, avg, max) = (266013894.130, 271285365.421, 273497106.403), stdev = 1859301.505
  CI (99.9%): [270043142.115, 272527588.726] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt          Score         Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_newCollection  thrpt   30  271285365.421 ± 1242223.306  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3022990.413 ops/s
# Warmup Iteration   2: 5222840.098 ops/s
# Warmup Iteration   3: 6303668.369 ops/s
# Warmup Iteration   4: 6284644.217 ops/s
# Warmup Iteration   5: 6282221.928 ops/s
# Warmup Iteration   6: 6316138.427 ops/s
# Warmup Iteration   7: 6308521.994 ops/s
# Warmup Iteration   8: 6315900.767 ops/s
# Warmup Iteration   9: 6320410.760 ops/s
# Warmup Iteration  10: 6304866.795 ops/s
# Warmup Iteration  11: 6300570.014 ops/s
# Warmup Iteration  12: 6280210.140 ops/s
# Warmup Iteration  13: 6300535.872 ops/s
# Warmup Iteration  14: 6297271.652 ops/s
# Warmup Iteration  15: 6295271.080 ops/s
# Warmup Iteration  16: 6307457.276 ops/s
# Warmup Iteration  17: 6175077.137 ops/s
# Warmup Iteration  18: 6226545.301 ops/s
# Warmup Iteration  19: 6264762.458 ops/s
# Warmup Iteration  20: 6241788.337 ops/s
# Warmup Iteration  21: 6223257.723 ops/s
# Warmup Iteration  22: 6224251.471 ops/s
# Warmup Iteration  23: 6174325.554 ops/s
# Warmup Iteration  24: 6226112.119 ops/s
# Warmup Iteration  25: 6232643.087 ops/s
# Warmup Iteration  26: 6237678.518 ops/s
# Warmup Iteration  27: 6236459.969 ops/s
# Warmup Iteration  28: 6244632.552 ops/s
# Warmup Iteration  29: 6216037.700 ops/s
# Warmup Iteration  30: 6242349.879 ops/s
Iteration   1: 6236384.512 ops/s
Iteration   2: 6233171.519 ops/s
Iteration   3: 6217553.360 ops/s
Iteration   4: 6246138.902 ops/s
Iteration   5: 6132022.122 ops/s
Iteration   6: 6242920.850 ops/s
Iteration   7: 6230962.146 ops/s
Iteration   8: 6272450.811 ops/s
Iteration   9: 6224373.763 ops/s
Iteration  10: 6259271.621 ops/s
Iteration  11: 6202458.438 ops/s
Iteration  12: 6212537.569 ops/s
Iteration  13: 6228029.690 ops/s
Iteration  14: 6261917.918 ops/s
Iteration  15: 6242531.910 ops/s
Iteration  16: 6265155.730 ops/s
Iteration  17: 6256487.809 ops/s
Iteration  18: 6272272.168 ops/s
Iteration  19: 6237820.882 ops/s
Iteration  20: 6244613.734 ops/s
Iteration  21: 6259117.805 ops/s
Iteration  22: 6265415.849 ops/s
Iteration  23: 6230906.020 ops/s
Iteration  24: 6252099.819 ops/s
Iteration  25: 6253996.411 ops/s
Iteration  26: 6225827.478 ops/s
Iteration  27: 6224735.281 ops/s
Iteration  28: 6255296.769 ops/s
Iteration  29: 6248049.342 ops/s
Iteration  30: 6262288.797 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith":
  6239893.634 ±(99.9%) 18170.700 ops/s [Average]
  (min, avg, max) = (6132022.122, 6239893.634, 6272450.811), stdev = 27197.050
  CI (99.9%): [6221722.935, 6258064.334] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith  thrpt   30  6239893.634 ± 18170.700  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2092750.719 ops/s
# Warmup Iteration   2: 3821515.772 ops/s
# Warmup Iteration   3: 4105099.647 ops/s
# Warmup Iteration   4: 4299083.482 ops/s
# Warmup Iteration   5: 4316098.210 ops/s
# Warmup Iteration   6: 4285261.226 ops/s
# Warmup Iteration   7: 4275515.141 ops/s
# Warmup Iteration   8: 4292606.128 ops/s
# Warmup Iteration   9: 4362328.739 ops/s
# Warmup Iteration  10: 4342863.430 ops/s
# Warmup Iteration  11: 4344341.897 ops/s
# Warmup Iteration  12: 4363073.816 ops/s
# Warmup Iteration  13: 4356096.424 ops/s
# Warmup Iteration  14: 4343579.348 ops/s
# Warmup Iteration  15: 4319104.894 ops/s
# Warmup Iteration  16: 4365446.321 ops/s
# Warmup Iteration  17: 4354292.490 ops/s
# Warmup Iteration  18: 4346075.444 ops/s
# Warmup Iteration  19: 4361880.748 ops/s
# Warmup Iteration  20: 4346510.474 ops/s
# Warmup Iteration  21: 4340935.298 ops/s
# Warmup Iteration  22: 4348510.658 ops/s
# Warmup Iteration  23: 4339847.867 ops/s
# Warmup Iteration  24: 4347525.673 ops/s
# Warmup Iteration  25: 4319522.995 ops/s
# Warmup Iteration  26: 4337173.416 ops/s
# Warmup Iteration  27: 4293904.026 ops/s
# Warmup Iteration  28: 4350649.447 ops/s
# Warmup Iteration  29: 4305471.598 ops/s
# Warmup Iteration  30: 4342515.667 ops/s
Iteration   1: 4338314.502 ops/s
Iteration   2: 4343900.082 ops/s
Iteration   3: 4331448.105 ops/s
Iteration   4: 4338859.083 ops/s
Iteration   5: 4344995.198 ops/s
Iteration   6: 4341583.717 ops/s
Iteration   7: 4344850.875 ops/s
Iteration   8: 4361564.095 ops/s
Iteration   9: 4347151.054 ops/s
Iteration  10: 4374256.282 ops/s
Iteration  11: 4328228.767 ops/s
Iteration  12: 4245758.741 ops/s
Iteration  13: 4326095.085 ops/s
Iteration  14: 4357283.068 ops/s
Iteration  15: 4380414.506 ops/s
Iteration  16: 4255114.644 ops/s
Iteration  17: 4363855.459 ops/s
Iteration  18: 4348825.102 ops/s
Iteration  19: 4369076.292 ops/s
Iteration  20: 4347095.030 ops/s
Iteration  21: 4353439.784 ops/s
Iteration  22: 4268751.237 ops/s
Iteration  23: 4344534.416 ops/s
Iteration  24: 4333230.189 ops/s
Iteration  25: 4354018.892 ops/s
Iteration  26: 4354893.382 ops/s
Iteration  27: 4356905.784 ops/s
Iteration  28: 4321602.466 ops/s
Iteration  29: 4337613.187 ops/s
Iteration  30: 4348660.189 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy":
  4338743.974 ±(99.9%) 20806.826 ops/s [Average]
  (min, avg, max) = (4245758.741, 4338743.974, 4380414.506), stdev = 31142.680
  CI (99.9%): [4317937.148, 4359550.800] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy  thrpt   30  4338743.974 ± 20806.826  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4536748.930 ops/s
# Warmup Iteration   2: 7556870.587 ops/s
# Warmup Iteration   3: 8984253.904 ops/s
# Warmup Iteration   4: 8992099.199 ops/s
# Warmup Iteration   5: 9003864.193 ops/s
# Warmup Iteration   6: 8894000.907 ops/s
# Warmup Iteration   7: 8948303.383 ops/s
# Warmup Iteration   8: 9016548.902 ops/s
# Warmup Iteration   9: 8992520.141 ops/s
# Warmup Iteration  10: 9031512.026 ops/s
# Warmup Iteration  11: 8943982.862 ops/s
# Warmup Iteration  12: 8791550.836 ops/s
# Warmup Iteration  13: 8811624.569 ops/s
# Warmup Iteration  14: 8817588.542 ops/s
# Warmup Iteration  15: 8893229.073 ops/s
# Warmup Iteration  16: 8756812.001 ops/s
# Warmup Iteration  17: 8850234.696 ops/s
# Warmup Iteration  18: 8822998.096 ops/s
# Warmup Iteration  19: 8772940.707 ops/s
# Warmup Iteration  20: 8866563.907 ops/s
# Warmup Iteration  21: 8730975.719 ops/s
# Warmup Iteration  22: 8860476.439 ops/s
# Warmup Iteration  23: 8849407.827 ops/s
# Warmup Iteration  24: 8808559.570 ops/s
# Warmup Iteration  25: 8793164.647 ops/s
# Warmup Iteration  26: 8763667.256 ops/s
# Warmup Iteration  27: 8698877.731 ops/s
# Warmup Iteration  28: 8743869.178 ops/s
# Warmup Iteration  29: 8723489.669 ops/s
# Warmup Iteration  30: 8842906.615 ops/s
Iteration   1: 8699987.764 ops/s
Iteration   2: 8814255.566 ops/s
Iteration   3: 8798847.393 ops/s
Iteration   4: 8816136.430 ops/s
Iteration   5: 8844534.934 ops/s
Iteration   6: 8855619.563 ops/s
Iteration   7: 8875857.808 ops/s
Iteration   8: 8881023.967 ops/s
Iteration   9: 8798597.051 ops/s
Iteration  10: 8901223.717 ops/s
Iteration  11: 8930514.930 ops/s
Iteration  12: 8966446.068 ops/s
Iteration  13: 8901398.796 ops/s
Iteration  14: 8775921.133 ops/s
Iteration  15: 8910455.528 ops/s
Iteration  16: 8930319.191 ops/s
Iteration  17: 8825071.718 ops/s
Iteration  18: 8784230.992 ops/s
Iteration  19: 8695027.579 ops/s
Iteration  20: 8712409.755 ops/s
Iteration  21: 8866987.514 ops/s
Iteration  22: 8859170.892 ops/s
Iteration  23: 8976451.535 ops/s
Iteration  24: 8888272.269 ops/s
Iteration  25: 8861113.134 ops/s
Iteration  26: 8967325.001 ops/s
Iteration  27: 8904689.521 ops/s
Iteration  28: 8903350.382 ops/s
Iteration  29: 8965683.559 ops/s
Iteration  30: 8970341.489 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty":
  8862708.839 ±(99.9%) 52818.727 ops/s [Average]
  (min, avg, max) = (8695027.579, 8862708.839, 8976451.535), stdev = 79056.590
  CI (99.9%): [8809890.112, 8915527.567] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty  thrpt   30  8862708.839 ± 52818.727  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1893470.030 ops/s
# Warmup Iteration   2: 4149190.984 ops/s
# Warmup Iteration   3: 3478254.745 ops/s
# Warmup Iteration   4: 4157516.275 ops/s
# Warmup Iteration   5: 4146467.074 ops/s
# Warmup Iteration   6: 4180883.681 ops/s
# Warmup Iteration   7: 4132418.813 ops/s
# Warmup Iteration   8: 4148499.582 ops/s
# Warmup Iteration   9: 4143354.744 ops/s
# Warmup Iteration  10: 4119145.653 ops/s
# Warmup Iteration  11: 4150861.523 ops/s
# Warmup Iteration  12: 4157431.112 ops/s
# Warmup Iteration  13: 4132180.712 ops/s
# Warmup Iteration  14: 4178630.753 ops/s
# Warmup Iteration  15: 4135688.539 ops/s
# Warmup Iteration  16: 4196938.805 ops/s
# Warmup Iteration  17: 4170149.366 ops/s
# Warmup Iteration  18: 4169972.016 ops/s
# Warmup Iteration  19: 4144428.482 ops/s
# Warmup Iteration  20: 4175387.640 ops/s
# Warmup Iteration  21: 4168248.080 ops/s
# Warmup Iteration  22: 4128512.133 ops/s
# Warmup Iteration  23: 4164217.245 ops/s
# Warmup Iteration  24: 4176845.115 ops/s
# Warmup Iteration  25: 4111587.306 ops/s
# Warmup Iteration  26: 4135875.725 ops/s
# Warmup Iteration  27: 4165623.542 ops/s
# Warmup Iteration  28: 4127094.701 ops/s
# Warmup Iteration  29: 4144692.562 ops/s
# Warmup Iteration  30: 4135138.679 ops/s
Iteration   1: 4194027.732 ops/s
Iteration   2: 4141884.143 ops/s
Iteration   3: 4176721.171 ops/s
Iteration   4: 4099748.686 ops/s
Iteration   5: 4137453.579 ops/s
Iteration   6: 4188888.183 ops/s
Iteration   7: 4170996.648 ops/s
Iteration   8: 4151653.732 ops/s
Iteration   9: 4195697.319 ops/s
Iteration  10: 4179644.121 ops/s
Iteration  11: 4204589.528 ops/s
Iteration  12: 4158230.376 ops/s
Iteration  13: 4168950.675 ops/s
Iteration  14: 4184759.661 ops/s
Iteration  15: 4170324.764 ops/s
Iteration  16: 4182472.941 ops/s
Iteration  17: 4179136.796 ops/s
Iteration  18: 4188304.601 ops/s
Iteration  19: 4176699.102 ops/s
Iteration  20: 4180679.372 ops/s
Iteration  21: 4117911.413 ops/s
Iteration  22: 4161092.687 ops/s
Iteration  23: 4115322.333 ops/s
Iteration  24: 4188343.887 ops/s
Iteration  25: 4170326.237 ops/s
Iteration  26: 4185007.372 ops/s
Iteration  27: 4178775.365 ops/s
Iteration  28: 4162560.555 ops/s
Iteration  29: 4082017.903 ops/s
Iteration  30: 4165439.857 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_reduce":
  4165255.358 ±(99.9%) 19500.375 ops/s [Average]
  (min, avg, max) = (4082017.903, 4165255.358, 4204589.528), stdev = 29187.246
  CI (99.9%): [4145754.983, 4184755.733] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_reduce  thrpt   30  4165255.358 ± 19500.375  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1593830.811 ops/s
# Warmup Iteration   2: 3330706.268 ops/s
# Warmup Iteration   3: 2831678.704 ops/s
# Warmup Iteration   4: 3382614.989 ops/s
# Warmup Iteration   5: 3339269.096 ops/s
# Warmup Iteration   6: 3371919.582 ops/s
# Warmup Iteration   7: 3369387.041 ops/s
# Warmup Iteration   8: 3341825.429 ops/s
# Warmup Iteration   9: 3352858.605 ops/s
# Warmup Iteration  10: 3366325.184 ops/s
# Warmup Iteration  11: 3386258.542 ops/s
# Warmup Iteration  12: 3361880.181 ops/s
# Warmup Iteration  13: 3378109.001 ops/s
# Warmup Iteration  14: 3356302.759 ops/s
# Warmup Iteration  15: 3335760.733 ops/s
# Warmup Iteration  16: 3345832.241 ops/s
# Warmup Iteration  17: 3337876.546 ops/s
# Warmup Iteration  18: 3367918.907 ops/s
# Warmup Iteration  19: 3367930.910 ops/s
# Warmup Iteration  20: 3351219.814 ops/s
# Warmup Iteration  21: 3383708.491 ops/s
# Warmup Iteration  22: 3367713.246 ops/s
# Warmup Iteration  23: 3380391.106 ops/s
# Warmup Iteration  24: 3384315.664 ops/s
# Warmup Iteration  25: 3380692.431 ops/s
# Warmup Iteration  26: 3381182.051 ops/s
# Warmup Iteration  27: 3374462.033 ops/s
# Warmup Iteration  28: 3370641.512 ops/s
# Warmup Iteration  29: 3379104.137 ops/s
# Warmup Iteration  30: 3358617.279 ops/s
Iteration   1: 3318227.672 ops/s
Iteration   2: 3392428.828 ops/s
Iteration   3: 3380481.039 ops/s
Iteration   4: 3363549.856 ops/s
Iteration   5: 3342317.834 ops/s
Iteration   6: 3343253.429 ops/s
Iteration   7: 3303238.931 ops/s
Iteration   8: 3375004.367 ops/s
Iteration   9: 3347882.699 ops/s
Iteration  10: 3379988.337 ops/s
Iteration  11: 3375826.856 ops/s
Iteration  12: 3361771.831 ops/s
Iteration  13: 3381467.869 ops/s
Iteration  14: 3375684.289 ops/s
Iteration  15: 3319948.083 ops/s
Iteration  16: 3362327.728 ops/s
Iteration  17: 3378854.998 ops/s
Iteration  18: 3315629.975 ops/s
Iteration  19: 3340989.994 ops/s
Iteration  20: 3315245.965 ops/s
Iteration  21: 3400302.312 ops/s
Iteration  22: 3366177.171 ops/s
Iteration  23: 3382005.372 ops/s
Iteration  24: 3384335.680 ops/s
Iteration  25: 3392229.766 ops/s
Iteration  26: 3383338.608 ops/s
Iteration  27: 3355294.158 ops/s
Iteration  28: 3360391.908 ops/s
Iteration  29: 3379413.429 ops/s
Iteration  30: 3382998.723 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty":
  3362020.257 ±(99.9%) 17633.736 ops/s [Average]
  (min, avg, max) = (3303238.931, 3362020.257, 3400302.312), stdev = 26393.348
  CI (99.9%): [3344386.521, 3379653.993] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  3362020.257 ± 17633.736  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 703951.707 ops/s
# Warmup Iteration   2: 721426.406 ops/s
# Warmup Iteration   3: 987547.120 ops/s
# Warmup Iteration   4: 984221.663 ops/s
# Warmup Iteration   5: 980164.901 ops/s
# Warmup Iteration   6: 978072.587 ops/s
# Warmup Iteration   7: 987143.864 ops/s
# Warmup Iteration   8: 971286.280 ops/s
# Warmup Iteration   9: 981393.088 ops/s
# Warmup Iteration  10: 981806.036 ops/s
# Warmup Iteration  11: 855900.490 ops/s
# Warmup Iteration  12: 948029.009 ops/s
# Warmup Iteration  13: 971730.083 ops/s
# Warmup Iteration  14: 987592.772 ops/s
# Warmup Iteration  15: 982320.434 ops/s
# Warmup Iteration  16: 975612.539 ops/s
# Warmup Iteration  17: 1035075.162 ops/s
# Warmup Iteration  18: 1040643.552 ops/s
# Warmup Iteration  19: 1043469.447 ops/s
# Warmup Iteration  20: 1036066.723 ops/s
# Warmup Iteration  21: 1043807.389 ops/s
# Warmup Iteration  22: 1045575.055 ops/s
# Warmup Iteration  23: 1035019.666 ops/s
# Warmup Iteration  24: 1040504.645 ops/s
# Warmup Iteration  25: 1042111.915 ops/s
# Warmup Iteration  26: 1046792.121 ops/s
# Warmup Iteration  27: 1045122.197 ops/s
# Warmup Iteration  28: 1037096.735 ops/s
# Warmup Iteration  29: 1043371.661 ops/s
# Warmup Iteration  30: 1046051.612 ops/s
Iteration   1: 1033993.226 ops/s
Iteration   2: 1042406.617 ops/s
Iteration   3: 1042066.366 ops/s
Iteration   4: 1045346.650 ops/s
Iteration   5: 1042160.368 ops/s
Iteration   6: 1036177.228 ops/s
Iteration   7: 1038177.118 ops/s
Iteration   8: 1043255.139 ops/s
Iteration   9: 1043767.208 ops/s
Iteration  10: 1038791.804 ops/s
Iteration  11: 1044462.254 ops/s
Iteration  12: 1041178.145 ops/s
Iteration  13: 1047666.129 ops/s
Iteration  14: 1049970.629 ops/s
Iteration  15: 1045340.585 ops/s
Iteration  16: 1021368.662 ops/s
Iteration  17: 1046873.006 ops/s
Iteration  18: 1044832.687 ops/s
Iteration  19: 1042416.389 ops/s
Iteration  20: 1048490.662 ops/s
Iteration  21: 1044603.088 ops/s
Iteration  22: 1040452.118 ops/s
Iteration  23: 1037294.248 ops/s
Iteration  24: 1036981.673 ops/s
Iteration  25: 1041215.001 ops/s
Iteration  26: 1036513.613 ops/s
Iteration  27: 1047490.717 ops/s
Iteration  28: 1045534.153 ops/s
Iteration  29: 1045985.924 ops/s
Iteration  30: 1044620.242 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1041981.055 ±(99.9%) 3732.018 ops/s [Average]
  (min, avg, max) = (1021368.662, 1041981.055, 1049970.629), stdev = 5585.909
  CI (99.9%): [1038249.037, 1045713.073] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1041981.055 ± 3732.018  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3410181.127 ops/s
# Warmup Iteration   2: 9420557.029 ops/s
# Warmup Iteration   3: 7995551.153 ops/s
# Warmup Iteration   4: 9464475.612 ops/s
# Warmup Iteration   5: 9358445.394 ops/s
# Warmup Iteration   6: 9363684.903 ops/s
# Warmup Iteration   7: 9331430.498 ops/s
# Warmup Iteration   8: 9318790.911 ops/s
# Warmup Iteration   9: 9363084.676 ops/s
# Warmup Iteration  10: 9344293.069 ops/s
# Warmup Iteration  11: 9351850.797 ops/s
# Warmup Iteration  12: 9332666.255 ops/s
# Warmup Iteration  13: 9345626.921 ops/s
# Warmup Iteration  14: 9352012.870 ops/s
# Warmup Iteration  15: 9376920.871 ops/s
# Warmup Iteration  16: 9373047.312 ops/s
# Warmup Iteration  17: 9301850.938 ops/s
# Warmup Iteration  18: 9441189.321 ops/s
# Warmup Iteration  19: 9441297.856 ops/s
# Warmup Iteration  20: 9434602.932 ops/s
# Warmup Iteration  21: 9427067.501 ops/s
# Warmup Iteration  22: 9386740.541 ops/s
# Warmup Iteration  23: 9330814.109 ops/s
# Warmup Iteration  24: 9391639.768 ops/s
# Warmup Iteration  25: 9393336.902 ops/s
# Warmup Iteration  26: 9420554.020 ops/s
# Warmup Iteration  27: 9377272.884 ops/s
# Warmup Iteration  28: 9410250.363 ops/s
# Warmup Iteration  29: 9469400.644 ops/s
# Warmup Iteration  30: 9365227.377 ops/s
Iteration   1: 9442353.774 ops/s
Iteration   2: 9295298.983 ops/s
Iteration   3: 9415365.510 ops/s
Iteration   4: 9437444.484 ops/s
Iteration   5: 9293998.658 ops/s
Iteration   6: 9319365.692 ops/s
Iteration   7: 9455341.515 ops/s
Iteration   8: 9460253.252 ops/s
Iteration   9: 9293494.663 ops/s
Iteration  10: 9466174.573 ops/s
Iteration  11: 9263754.162 ops/s
Iteration  12: 9451368.174 ops/s
Iteration  13: 9461946.029 ops/s
Iteration  14: 9489300.625 ops/s
Iteration  15: 9400629.952 ops/s
Iteration  16: 9265133.329 ops/s
Iteration  17: 9299606.693 ops/s
Iteration  18: 9378402.617 ops/s
Iteration  19: 9429864.906 ops/s
Iteration  20: 9428093.023 ops/s
Iteration  21: 9259249.066 ops/s
Iteration  22: 9490811.954 ops/s
Iteration  23: 9450762.975 ops/s
Iteration  24: 9436853.709 ops/s
Iteration  25: 9480370.771 ops/s
Iteration  26: 9400716.777 ops/s
Iteration  27: 9394021.417 ops/s
Iteration  28: 9286372.446 ops/s
Iteration  29: 9359151.611 ops/s
Iteration  30: 9468408.958 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_reject":
  9392463.677 ±(99.9%) 51755.013 ops/s [Average]
  (min, avg, max) = (9259249.066, 9392463.677, 9490811.954), stdev = 77464.472
  CI (99.9%): [9340708.664, 9444218.689] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_reject  thrpt   30  9392463.677 ± 51755.013  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14427638.821 ops/s
# Warmup Iteration   2: 31026558.933 ops/s
# Warmup Iteration   3: 25767716.241 ops/s
# Warmup Iteration   4: 30571660.443 ops/s
# Warmup Iteration   5: 30016971.628 ops/s
# Warmup Iteration   6: 30737672.319 ops/s
# Warmup Iteration   7: 30726080.737 ops/s
# Warmup Iteration   8: 30495699.235 ops/s
# Warmup Iteration   9: 30960991.338 ops/s
# Warmup Iteration  10: 30526338.026 ops/s
# Warmup Iteration  11: 30791167.403 ops/s
# Warmup Iteration  12: 30666506.970 ops/s
# Warmup Iteration  13: 30661163.453 ops/s
# Warmup Iteration  14: 30756045.880 ops/s
# Warmup Iteration  15: 30804314.423 ops/s
# Warmup Iteration  16: 30687939.672 ops/s
# Warmup Iteration  17: 30596306.507 ops/s
# Warmup Iteration  18: 30488667.886 ops/s
# Warmup Iteration  19: 30669940.770 ops/s
# Warmup Iteration  20: 30748827.488 ops/s
# Warmup Iteration  21: 30688777.023 ops/s
# Warmup Iteration  22: 30427507.902 ops/s
# Warmup Iteration  23: 30740113.507 ops/s
# Warmup Iteration  24: 30592391.452 ops/s
# Warmup Iteration  25: 30439948.044 ops/s
# Warmup Iteration  26: 30289333.828 ops/s
# Warmup Iteration  27: 30296021.940 ops/s
# Warmup Iteration  28: 30301522.661 ops/s
# Warmup Iteration  29: 30067695.268 ops/s
# Warmup Iteration  30: 30639275.647 ops/s
Iteration   1: 30746537.076 ops/s
Iteration   2: 30837734.409 ops/s
Iteration   3: 30670265.477 ops/s
Iteration   4: 30698952.809 ops/s
Iteration   5: 30637588.115 ops/s
Iteration   6: 30635413.766 ops/s
Iteration   7: 30598350.428 ops/s
Iteration   8: 30473974.224 ops/s
Iteration   9: 30605707.967 ops/s
Iteration  10: 30687601.349 ops/s
Iteration  11: 30375870.800 ops/s
Iteration  12: 29373648.153 ops/s
Iteration  13: 30549562.251 ops/s
Iteration  14: 30414859.902 ops/s
Iteration  15: 30441413.444 ops/s
Iteration  16: 30307296.804 ops/s
Iteration  17: 30036775.538 ops/s
Iteration  18: 30634280.593 ops/s
Iteration  19: 29969606.688 ops/s
Iteration  20: 30710948.338 ops/s
Iteration  21: 30551215.828 ops/s
Iteration  22: 30603050.701 ops/s
Iteration  23: 30737348.196 ops/s
Iteration  24: 30371185.497 ops/s
Iteration  25: 30771368.870 ops/s
Iteration  26: 30112906.282 ops/s
Iteration  27: 30282721.110 ops/s
Iteration  28: 30691884.143 ops/s
Iteration  29: 30546024.614 ops/s
Iteration  30: 30530660.859 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_remove":
  30486825.141 ±(99.9%) 200882.992 ops/s [Average]
  (min, avg, max) = (29373648.153, 30486825.141, 30837734.409), stdev = 300672.228
  CI (99.9%): [30285942.149, 30687708.133] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_remove  thrpt   30  30486825.141 ± 200882.992  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4094718.731 ops/s
# Warmup Iteration   2: 9098588.074 ops/s
# Warmup Iteration   3: 7730340.290 ops/s
# Warmup Iteration   4: 9218510.564 ops/s
# Warmup Iteration   5: 9365663.420 ops/s
# Warmup Iteration   6: 9313980.627 ops/s
# Warmup Iteration   7: 9230677.732 ops/s
# Warmup Iteration   8: 9317095.104 ops/s
# Warmup Iteration   9: 9221639.118 ops/s
# Warmup Iteration  10: 9202832.507 ops/s
# Warmup Iteration  11: 9331774.459 ops/s
# Warmup Iteration  12: 9325690.772 ops/s
# Warmup Iteration  13: 9357512.995 ops/s
# Warmup Iteration  14: 9220954.926 ops/s
# Warmup Iteration  15: 9288331.414 ops/s
# Warmup Iteration  16: 9208936.527 ops/s
# Warmup Iteration  17: 9353708.693 ops/s
# Warmup Iteration  18: 9337768.773 ops/s
# Warmup Iteration  19: 9349338.927 ops/s
# Warmup Iteration  20: 9318916.746 ops/s
# Warmup Iteration  21: 9348258.400 ops/s
# Warmup Iteration  22: 9332732.352 ops/s
# Warmup Iteration  23: 9155474.627 ops/s
# Warmup Iteration  24: 9300946.078 ops/s
# Warmup Iteration  25: 9345040.713 ops/s
# Warmup Iteration  26: 9292727.929 ops/s
# Warmup Iteration  27: 9350063.189 ops/s
# Warmup Iteration  28: 9231298.846 ops/s
# Warmup Iteration  29: 9311610.323 ops/s
# Warmup Iteration  30: 9313449.279 ops/s
Iteration   1: 9342617.498 ops/s
Iteration   2: 9395047.500 ops/s
Iteration   3: 9194308.512 ops/s
Iteration   4: 9297839.273 ops/s
Iteration   5: 9362276.149 ops/s
Iteration   6: 9389786.106 ops/s
Iteration   7: 9183034.682 ops/s
Iteration   8: 9292404.232 ops/s
Iteration   9: 9126506.522 ops/s
Iteration  10: 9310095.076 ops/s
Iteration  11: 9296366.046 ops/s
Iteration  12: 9316848.322 ops/s
Iteration  13: 9313340.058 ops/s
Iteration  14: 9367050.352 ops/s
Iteration  15: 9299749.994 ops/s
Iteration  16: 9186377.721 ops/s
Iteration  17: 9308245.624 ops/s
Iteration  18: 9247767.552 ops/s
Iteration  19: 9314782.078 ops/s
Iteration  20: 9342333.322 ops/s
Iteration  21: 9271375.343 ops/s
Iteration  22: 9212699.938 ops/s
Iteration  23: 9278217.617 ops/s
Iteration  24: 9322596.453 ops/s
Iteration  25: 9338460.708 ops/s
Iteration  26: 9136621.437 ops/s
Iteration  27: 9387272.851 ops/s
Iteration  28: 9171049.568 ops/s
Iteration  29: 9281141.329 ops/s
Iteration  30: 9159274.321 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_removeAll":
  9281516.206 ±(99.9%) 51505.218 ops/s [Average]
  (min, avg, max) = (9126506.522, 9281516.206, 9395047.500), stdev = 77090.591
  CI (99.9%): [9230010.988, 9333021.424] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_removeAll  thrpt   30  9281516.206 ± 51505.218  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1858053.729 ops/s
# Warmup Iteration   2: 4246272.951 ops/s
# Warmup Iteration   3: 3524956.256 ops/s
# Warmup Iteration   4: 4209138.837 ops/s
# Warmup Iteration   5: 4254341.665 ops/s
# Warmup Iteration   6: 4203178.440 ops/s
# Warmup Iteration   7: 4252581.593 ops/s
# Warmup Iteration   8: 4270468.152 ops/s
# Warmup Iteration   9: 4167026.183 ops/s
# Warmup Iteration  10: 4236803.442 ops/s
# Warmup Iteration  11: 4270184.312 ops/s
# Warmup Iteration  12: 4231621.151 ops/s
# Warmup Iteration  13: 4261083.037 ops/s
# Warmup Iteration  14: 4224417.294 ops/s
# Warmup Iteration  15: 4263761.948 ops/s
# Warmup Iteration  16: 4238164.409 ops/s
# Warmup Iteration  17: 4157261.767 ops/s
# Warmup Iteration  18: 4214777.309 ops/s
# Warmup Iteration  19: 4232386.354 ops/s
# Warmup Iteration  20: 4242755.038 ops/s
# Warmup Iteration  21: 4264726.789 ops/s
# Warmup Iteration  22: 4260205.727 ops/s
# Warmup Iteration  23: 4242628.666 ops/s
# Warmup Iteration  24: 4197845.959 ops/s
# Warmup Iteration  25: 4236993.095 ops/s
# Warmup Iteration  26: 4243686.947 ops/s
# Warmup Iteration  27: 4268054.349 ops/s
# Warmup Iteration  28: 4257232.916 ops/s
# Warmup Iteration  29: 4233340.209 ops/s
# Warmup Iteration  30: 4252125.786 ops/s
Iteration   1: 4191775.574 ops/s
Iteration   2: 4154516.413 ops/s
Iteration   3: 4230481.585 ops/s
Iteration   4: 4270509.083 ops/s
Iteration   5: 4206197.559 ops/s
Iteration   6: 4257651.991 ops/s
Iteration   7: 4187662.160 ops/s
Iteration   8: 4294678.389 ops/s
Iteration   9: 4245699.366 ops/s
Iteration  10: 4276697.452 ops/s
Iteration  11: 4270602.153 ops/s
Iteration  12: 4209593.093 ops/s
Iteration  13: 4247611.877 ops/s
Iteration  14: 4196534.579 ops/s
Iteration  15: 4258584.044 ops/s
Iteration  16: 4260565.770 ops/s
Iteration  17: 4192779.003 ops/s
Iteration  18: 4239989.524 ops/s
Iteration  19: 4279503.573 ops/s
Iteration  20: 4273608.668 ops/s
Iteration  21: 4249473.323 ops/s
Iteration  22: 4119213.873 ops/s
Iteration  23: 4144202.064 ops/s
Iteration  24: 4217073.930 ops/s
Iteration  25: 4251337.651 ops/s
Iteration  26: 4212121.950 ops/s
Iteration  27: 4222058.859 ops/s
Iteration  28: 4218596.160 ops/s
Iteration  29: 4276447.712 ops/s
Iteration  30: 4203802.963 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable":
  4228652.345 ±(99.9%) 28711.563 ops/s [Average]
  (min, avg, max) = (4119213.873, 4228652.345, 4294678.389), stdev = 42974.120
  CI (99.9%): [4199940.781, 4257363.908] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  4228652.345 ± 28711.563  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1629950.613 ops/s
# Warmup Iteration   2: 3664434.081 ops/s
# Warmup Iteration   3: 3105420.914 ops/s
# Warmup Iteration   4: 3769349.695 ops/s
# Warmup Iteration   5: 3735255.095 ops/s
# Warmup Iteration   6: 3745675.075 ops/s
# Warmup Iteration   7: 3745001.284 ops/s
# Warmup Iteration   8: 3761735.387 ops/s
# Warmup Iteration   9: 3774427.368 ops/s
# Warmup Iteration  10: 3773153.891 ops/s
# Warmup Iteration  11: 3781381.747 ops/s
# Warmup Iteration  12: 3768798.773 ops/s
# Warmup Iteration  13: 3781176.491 ops/s
# Warmup Iteration  14: 3746691.265 ops/s
# Warmup Iteration  15: 3738662.194 ops/s
# Warmup Iteration  16: 3753910.394 ops/s
# Warmup Iteration  17: 3740983.216 ops/s
# Warmup Iteration  18: 3790833.552 ops/s
# Warmup Iteration  19: 3736862.149 ops/s
# Warmup Iteration  20: 3716860.523 ops/s
# Warmup Iteration  21: 3765457.948 ops/s
# Warmup Iteration  22: 3785033.782 ops/s
# Warmup Iteration  23: 3769678.237 ops/s
# Warmup Iteration  24: 3778454.779 ops/s
# Warmup Iteration  25: 3706044.673 ops/s
# Warmup Iteration  26: 3722172.177 ops/s
# Warmup Iteration  27: 3758494.908 ops/s
# Warmup Iteration  28: 3762279.267 ops/s
# Warmup Iteration  29: 3741547.465 ops/s
# Warmup Iteration  30: 3788827.114 ops/s
Iteration   1: 3772155.486 ops/s
Iteration   2: 3751103.027 ops/s
Iteration   3: 3781041.478 ops/s
Iteration   4: 3778214.779 ops/s
Iteration   5: 3781641.719 ops/s
Iteration   6: 3741420.687 ops/s
Iteration   7: 3785080.946 ops/s
Iteration   8: 3736013.831 ops/s
Iteration   9: 3782315.722 ops/s
Iteration  10: 3799525.314 ops/s
Iteration  11: 3744873.935 ops/s
Iteration  12: 3770176.102 ops/s
Iteration  13: 3799105.752 ops/s
Iteration  14: 3733445.234 ops/s
Iteration  15: 3771331.635 ops/s
Iteration  16: 3758817.267 ops/s
Iteration  17: 3817830.465 ops/s
Iteration  18: 3790053.999 ops/s
Iteration  19: 3801187.776 ops/s
Iteration  20: 3746009.855 ops/s
Iteration  21: 3801061.933 ops/s
Iteration  22: 3686516.922 ops/s
Iteration  23: 3784413.850 ops/s
Iteration  24: 3793957.013 ops/s
Iteration  25: 3748082.777 ops/s
Iteration  26: 3779594.728 ops/s
Iteration  27: 3792579.192 ops/s
Iteration  28: 3709732.315 ops/s
Iteration  29: 3712520.664 ops/s
Iteration  30: 3717959.461 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_retainAll":
  3765592.129 ±(99.9%) 21470.374 ops/s [Average]
  (min, avg, max) = (3686516.922, 3765592.129, 3817830.465), stdev = 32135.848
  CI (99.9%): [3744121.754, 3787062.503] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_retainAll  thrpt   30  3765592.129 ± 21470.374  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 726507.398 ops/s
# Warmup Iteration   2: 1767201.431 ops/s
# Warmup Iteration   3: 1791855.099 ops/s
# Warmup Iteration   4: 1482122.824 ops/s
# Warmup Iteration   5: 1775428.829 ops/s
# Warmup Iteration   6: 1793597.608 ops/s
# Warmup Iteration   7: 1769273.332 ops/s
# Warmup Iteration   8: 1786304.700 ops/s
# Warmup Iteration   9: 1778865.200 ops/s
# Warmup Iteration  10: 1792546.085 ops/s
# Warmup Iteration  11: 1782047.528 ops/s
# Warmup Iteration  12: 1788942.207 ops/s
# Warmup Iteration  13: 1792602.357 ops/s
# Warmup Iteration  14: 1766995.944 ops/s
# Warmup Iteration  15: 1789197.768 ops/s
# Warmup Iteration  16: 1786487.089 ops/s
# Warmup Iteration  17: 1791959.087 ops/s
# Warmup Iteration  18: 1774248.042 ops/s
# Warmup Iteration  19: 1781525.183 ops/s
# Warmup Iteration  20: 1766960.864 ops/s
# Warmup Iteration  21: 1797218.029 ops/s
# Warmup Iteration  22: 1790067.318 ops/s
# Warmup Iteration  23: 1787486.106 ops/s
# Warmup Iteration  24: 1771094.775 ops/s
# Warmup Iteration  25: 1786725.642 ops/s
# Warmup Iteration  26: 1783816.172 ops/s
# Warmup Iteration  27: 1785147.455 ops/s
# Warmup Iteration  28: 1795017.959 ops/s
# Warmup Iteration  29: 1777421.024 ops/s
# Warmup Iteration  30: 1775545.033 ops/s
Iteration   1: 1788909.560 ops/s
Iteration   2: 1795335.597 ops/s
Iteration   3: 1782551.214 ops/s
Iteration   4: 1795762.703 ops/s
Iteration   5: 1788968.023 ops/s
Iteration   6: 1765008.318 ops/s
Iteration   7: 1761218.380 ops/s
Iteration   8: 1800705.908 ops/s
Iteration   9: 1785295.277 ops/s
Iteration  10: 1782469.094 ops/s
Iteration  11: 1786854.436 ops/s
Iteration  12: 1788177.349 ops/s
Iteration  13: 1785763.875 ops/s
Iteration  14: 1780208.679 ops/s
Iteration  15: 1798166.899 ops/s
Iteration  16: 1798697.164 ops/s
Iteration  17: 1789931.654 ops/s
Iteration  18: 1785823.606 ops/s
Iteration  19: 1782578.402 ops/s
Iteration  20: 1784520.104 ops/s
Iteration  21: 1755895.605 ops/s
Iteration  22: 1794339.701 ops/s
Iteration  23: 1786376.555 ops/s
Iteration  24: 1794466.973 ops/s
Iteration  25: 1790927.498 ops/s
Iteration  26: 1795671.115 ops/s
Iteration  27: 1784822.549 ops/s
Iteration  28: 1800125.219 ops/s
Iteration  29: 1785273.228 ops/s
Iteration  30: 1775724.172 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable":
  1786352.295 ±(99.9%) 7172.353 ops/s [Average]
  (min, avg, max) = (1755895.605, 1786352.295, 1800705.908), stdev = 10735.241
  CI (99.9%): [1779179.942, 1793524.648] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  1786352.295 ± 7172.353  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4747724.971 ops/s
# Warmup Iteration   2: 9737469.854 ops/s
# Warmup Iteration   3: 8328229.331 ops/s
# Warmup Iteration   4: 9810181.656 ops/s
# Warmup Iteration   5: 9804336.888 ops/s
# Warmup Iteration   6: 9701338.983 ops/s
# Warmup Iteration   7: 9771040.217 ops/s
# Warmup Iteration   8: 9828273.711 ops/s
# Warmup Iteration   9: 9725913.649 ops/s
# Warmup Iteration  10: 9796489.715 ops/s
# Warmup Iteration  11: 9857920.771 ops/s
# Warmup Iteration  12: 9765317.777 ops/s
# Warmup Iteration  13: 9840464.896 ops/s
# Warmup Iteration  14: 9839016.000 ops/s
# Warmup Iteration  15: 9734742.699 ops/s
# Warmup Iteration  16: 9854300.554 ops/s
# Warmup Iteration  17: 9849274.655 ops/s
# Warmup Iteration  18: 9838733.153 ops/s
# Warmup Iteration  19: 9677235.347 ops/s
# Warmup Iteration  20: 9763190.541 ops/s
# Warmup Iteration  21: 9759869.349 ops/s
# Warmup Iteration  22: 9804580.759 ops/s
# Warmup Iteration  23: 9750639.990 ops/s
# Warmup Iteration  24: 9683523.896 ops/s
# Warmup Iteration  25: 9807494.851 ops/s
# Warmup Iteration  26: 9741357.819 ops/s
# Warmup Iteration  27: 9719448.391 ops/s
# Warmup Iteration  28: 9695232.133 ops/s
# Warmup Iteration  29: 9861175.437 ops/s
# Warmup Iteration  30: 9750321.163 ops/s
Iteration   1: 9699150.737 ops/s
Iteration   2: 9879529.313 ops/s
Iteration   3: 9483641.491 ops/s
Iteration   4: 9819947.418 ops/s
Iteration   5: 9834958.533 ops/s
Iteration   6: 9853523.521 ops/s
Iteration   7: 9823256.806 ops/s
Iteration   8: 9848604.039 ops/s
Iteration   9: 9715270.851 ops/s
Iteration  10: 9835450.709 ops/s
Iteration  11: 9735003.991 ops/s
Iteration  12: 9774119.877 ops/s
Iteration  13: 9731565.787 ops/s
Iteration  14: 9801228.810 ops/s
Iteration  15: 9831085.662 ops/s
Iteration  16: 9741481.292 ops/s
Iteration  17: 9833615.379 ops/s
Iteration  18: 9751075.580 ops/s
Iteration  19: 9800428.286 ops/s
Iteration  20: 9717257.666 ops/s
Iteration  21: 9884227.821 ops/s
Iteration  22: 9838797.108 ops/s
Iteration  23: 9819171.040 ops/s
Iteration  24: 9826865.219 ops/s
Iteration  25: 9860536.715 ops/s
Iteration  26: 9687478.806 ops/s
Iteration  27: 9793064.556 ops/s
Iteration  28: 9846619.979 ops/s
Iteration  29: 9817441.537 ops/s
Iteration  30: 9787291.799 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_select":
  9789056.344 ±(99.9%) 52906.409 ops/s [Average]
  (min, avg, max) = (9483641.491, 9789056.344, 9884227.821), stdev = 79187.829
  CI (99.9%): [9736149.935, 9841962.754] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_select  thrpt   30  9789056.344 ± 52906.409  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3149128.466 ops/s
# Warmup Iteration   2: 5203296.375 ops/s
# Warmup Iteration   3: 6226207.164 ops/s
# Warmup Iteration   4: 6230367.472 ops/s
# Warmup Iteration   5: 6230666.499 ops/s
# Warmup Iteration   6: 6198439.525 ops/s
# Warmup Iteration   7: 6253229.321 ops/s
# Warmup Iteration   8: 6229073.805 ops/s
# Warmup Iteration   9: 6199655.421 ops/s
# Warmup Iteration  10: 6194850.938 ops/s
# Warmup Iteration  11: 6273596.120 ops/s
# Warmup Iteration  12: 6200525.713 ops/s
# Warmup Iteration  13: 6161766.675 ops/s
# Warmup Iteration  14: 6203965.389 ops/s
# Warmup Iteration  15: 6193001.506 ops/s
# Warmup Iteration  16: 6226475.087 ops/s
# Warmup Iteration  17: 6236498.805 ops/s
# Warmup Iteration  18: 6256534.819 ops/s
# Warmup Iteration  19: 6239095.099 ops/s
# Warmup Iteration  20: 6164778.346 ops/s
# Warmup Iteration  21: 6238074.370 ops/s
# Warmup Iteration  22: 6218320.791 ops/s
# Warmup Iteration  23: 6213214.025 ops/s
# Warmup Iteration  24: 6274577.571 ops/s
# Warmup Iteration  25: 6237934.403 ops/s
# Warmup Iteration  26: 6180315.839 ops/s
# Warmup Iteration  27: 6226021.336 ops/s
# Warmup Iteration  28: 6273816.831 ops/s
# Warmup Iteration  29: 6128809.466 ops/s
# Warmup Iteration  30: 6172069.033 ops/s
Iteration   1: 6173271.446 ops/s
Iteration   2: 6285085.267 ops/s
Iteration   3: 6216411.668 ops/s
Iteration   4: 6121614.595 ops/s
Iteration   5: 6176339.864 ops/s
Iteration   6: 6246859.877 ops/s
Iteration   7: 6243326.435 ops/s
Iteration   8: 6201633.692 ops/s
Iteration   9: 6177249.884 ops/s
Iteration  10: 6212560.348 ops/s
Iteration  11: 6169915.589 ops/s
Iteration  12: 6257696.828 ops/s
Iteration  13: 6263982.031 ops/s
Iteration  14: 6288239.204 ops/s
Iteration  15: 6293415.323 ops/s
Iteration  16: 6216291.002 ops/s
Iteration  17: 6250574.983 ops/s
Iteration  18: 6199754.361 ops/s
Iteration  19: 6257828.453 ops/s
Iteration  20: 6231199.822 ops/s
Iteration  21: 6227466.219 ops/s
Iteration  22: 6237476.995 ops/s
Iteration  23: 6124274.954 ops/s
Iteration  24: 6189089.003 ops/s
Iteration  25: 6039006.565 ops/s
Iteration  26: 6245236.862 ops/s
Iteration  27: 6232581.985 ops/s
Iteration  28: 6217880.964 ops/s
Iteration  29: 6244413.850 ops/s
Iteration  30: 6177314.373 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_size":
  6213933.081 ±(99.9%) 36315.721 ops/s [Average]
  (min, avg, max) = (6039006.565, 6213933.081, 6293415.323), stdev = 54355.665
  CI (99.9%): [6177617.361, 6250248.802] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_size  thrpt   30  6213933.081 ± 36315.721  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 164030661.805 ops/s
# Warmup Iteration   2: 300318914.614 ops/s
# Warmup Iteration   3: 255015901.615 ops/s
# Warmup Iteration   4: 307513382.615 ops/s
# Warmup Iteration   5: 307666883.327 ops/s
# Warmup Iteration   6: 308494935.333 ops/s
# Warmup Iteration   7: 304042841.599 ops/s
# Warmup Iteration   8: 307356605.835 ops/s
# Warmup Iteration   9: 306212212.655 ops/s
# Warmup Iteration  10: 307652264.821 ops/s
# Warmup Iteration  11: 306333177.806 ops/s
# Warmup Iteration  12: 306314572.489 ops/s
# Warmup Iteration  13: 305997986.038 ops/s
# Warmup Iteration  14: 307205129.267 ops/s
# Warmup Iteration  15: 304057227.234 ops/s
# Warmup Iteration  16: 307340404.554 ops/s
# Warmup Iteration  17: 306137141.717 ops/s
# Warmup Iteration  18: 306116104.323 ops/s
# Warmup Iteration  19: 306736750.040 ops/s
# Warmup Iteration  20: 308302519.037 ops/s
# Warmup Iteration  21: 303209681.850 ops/s
# Warmup Iteration  22: 305178222.313 ops/s
# Warmup Iteration  23: 307176721.211 ops/s
# Warmup Iteration  24: 307049603.131 ops/s
# Warmup Iteration  25: 302707680.065 ops/s
# Warmup Iteration  26: 307355285.116 ops/s
# Warmup Iteration  27: 307832025.969 ops/s
# Warmup Iteration  28: 305781044.690 ops/s
# Warmup Iteration  29: 302805964.984 ops/s
# Warmup Iteration  30: 306822674.085 ops/s
Iteration   1: 300957803.665 ops/s
Iteration   2: 306817193.618 ops/s
Iteration   3: 304666020.313 ops/s
Iteration   4: 307826472.082 ops/s
Iteration   5: 302818762.930 ops/s
Iteration   6: 303782469.535 ops/s
Iteration   7: 307005101.844 ops/s
Iteration   8: 301386332.380 ops/s
Iteration   9: 307380045.598 ops/s
Iteration  10: 306764300.913 ops/s
Iteration  11: 306236050.243 ops/s
Iteration  12: 302303859.165 ops/s
Iteration  13: 307405296.136 ops/s
Iteration  14: 302020066.497 ops/s
Iteration  15: 305477377.363 ops/s
Iteration  16: 306726924.327 ops/s
Iteration  17: 306233330.480 ops/s
Iteration  18: 306998578.176 ops/s
Iteration  19: 309133758.261 ops/s
Iteration  20: 308493551.781 ops/s
Iteration  21: 306595581.144 ops/s
Iteration  22: 301476891.599 ops/s
Iteration  23: 300783376.467 ops/s
Iteration  24: 307313951.271 ops/s
Iteration  25: 305949915.470 ops/s
Iteration  26: 301489703.613 ops/s
Iteration  27: 305741340.010 ops/s
Iteration  28: 306522018.011 ops/s
Iteration  29: 303555069.351 ops/s
Iteration  30: 303125309.947 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_testEquals":
  305099548.406 ±(99.9%) 1668242.481 ops/s [Average]
  (min, avg, max) = (300783376.467, 305099548.406, 309133758.261), stdev = 2496946.999
  CI (99.9%): [303431305.925, 306767790.887] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt          Score         Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_testEquals  thrpt   30  305099548.406 ± 1668242.481  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 165000187.754 ops/s
# Warmup Iteration   2: 299092418.161 ops/s
# Warmup Iteration   3: 254620604.344 ops/s
# Warmup Iteration   4: 303900682.397 ops/s
# Warmup Iteration   5: 303482698.321 ops/s
# Warmup Iteration   6: 302692846.532 ops/s
# Warmup Iteration   7: 301576818.566 ops/s
# Warmup Iteration   8: 301998049.305 ops/s
# Warmup Iteration   9: 303536940.124 ops/s
# Warmup Iteration  10: 302865971.623 ops/s
# Warmup Iteration  11: 301464650.025 ops/s
# Warmup Iteration  12: 303799305.985 ops/s
# Warmup Iteration  13: 298428698.949 ops/s
# Warmup Iteration  14: 304605920.516 ops/s
# Warmup Iteration  15: 302322565.324 ops/s
# Warmup Iteration  16: 303104551.823 ops/s
# Warmup Iteration  17: 300618663.173 ops/s
# Warmup Iteration  18: 298215816.398 ops/s
# Warmup Iteration  19: 299037144.640 ops/s
# Warmup Iteration  20: 302226814.106 ops/s
# Warmup Iteration  21: 302307246.463 ops/s
# Warmup Iteration  22: 304173859.455 ops/s
# Warmup Iteration  23: 302494312.037 ops/s
# Warmup Iteration  24: 301413436.227 ops/s
# Warmup Iteration  25: 299573809.130 ops/s
# Warmup Iteration  26: 304497174.121 ops/s
# Warmup Iteration  27: 300227987.262 ops/s
# Warmup Iteration  28: 302227822.986 ops/s
# Warmup Iteration  29: 301693165.931 ops/s
# Warmup Iteration  30: 302675560.472 ops/s
Iteration   1: 304759484.944 ops/s
Iteration   2: 303720976.029 ops/s
Iteration   3: 304015576.866 ops/s
Iteration   4: 300497518.897 ops/s
Iteration   5: 301101502.762 ops/s
Iteration   6: 304109766.239 ops/s
Iteration   7: 303031513.548 ops/s
Iteration   8: 300347841.988 ops/s
Iteration   9: 297938447.856 ops/s
Iteration  10: 300721832.750 ops/s
Iteration  11: 300767644.954 ops/s
Iteration  12: 302990951.433 ops/s
Iteration  13: 301648845.309 ops/s
Iteration  14: 297143186.328 ops/s
Iteration  15: 303172872.436 ops/s
Iteration  16: 306482221.272 ops/s
Iteration  17: 303802981.104 ops/s
Iteration  18: 306323264.417 ops/s
Iteration  19: 302502603.131 ops/s
Iteration  20: 304513211.428 ops/s
Iteration  21: 304845580.390 ops/s
Iteration  22: 305318352.414 ops/s
Iteration  23: 303966675.923 ops/s
Iteration  24: 304271214.470 ops/s
Iteration  25: 304287808.807 ops/s
Iteration  26: 304292433.648 ops/s
Iteration  27: 303861695.160 ops/s
Iteration  28: 299877485.996 ops/s
Iteration  29: 303302799.858 ops/s
Iteration  30: 304108680.709 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode":
  302924165.702 ±(99.9%) 1506176.666 ops/s [Average]
  (min, avg, max) = (297143186.328, 302924165.702, 306482221.272), stdev = 2254374.499
  CI (99.9%): [301417989.036, 304430342.369] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt          Score         Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode  thrpt   30  302924165.702 ± 1506176.666  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 161767996.409 ops/s
# Warmup Iteration   2: 300405252.870 ops/s
# Warmup Iteration   3: 240486371.357 ops/s
# Warmup Iteration   4: 280131779.986 ops/s
# Warmup Iteration   5: 276973100.667 ops/s
# Warmup Iteration   6: 279931202.535 ops/s
# Warmup Iteration   7: 278776436.405 ops/s
# Warmup Iteration   8: 280152398.966 ops/s
# Warmup Iteration   9: 279326091.698 ops/s
# Warmup Iteration  10: 275676833.525 ops/s
# Warmup Iteration  11: 279219376.457 ops/s
# Warmup Iteration  12: 278412514.828 ops/s
# Warmup Iteration  13: 280429706.503 ops/s
# Warmup Iteration  14: 279270903.556 ops/s
# Warmup Iteration  15: 279199943.217 ops/s
# Warmup Iteration  16: 278171973.350 ops/s
# Warmup Iteration  17: 278027671.914 ops/s
# Warmup Iteration  18: 279265828.432 ops/s
# Warmup Iteration  19: 279940773.377 ops/s
# Warmup Iteration  20: 280032941.867 ops/s
# Warmup Iteration  21: 280178101.540 ops/s
# Warmup Iteration  22: 278047312.725 ops/s
# Warmup Iteration  23: 279285878.163 ops/s
# Warmup Iteration  24: 276654558.742 ops/s
# Warmup Iteration  25: 280339216.753 ops/s
# Warmup Iteration  26: 277450269.146 ops/s
# Warmup Iteration  27: 277375302.505 ops/s
# Warmup Iteration  28: 278594315.719 ops/s
# Warmup Iteration  29: 280396086.806 ops/s
# Warmup Iteration  30: 279686601.243 ops/s
Iteration   1: 278984174.499 ops/s
Iteration   2: 278829237.715 ops/s
Iteration   3: 279411808.066 ops/s
Iteration   4: 280292792.706 ops/s
Iteration   5: 278384442.785 ops/s
Iteration   6: 279558959.674 ops/s
Iteration   7: 278067442.831 ops/s
Iteration   8: 280924872.539 ops/s
Iteration   9: 278085545.191 ops/s
Iteration  10: 281757311.890 ops/s
Iteration  11: 279447206.665 ops/s
Iteration  12: 278708579.175 ops/s
Iteration  13: 279147433.087 ops/s
Iteration  14: 281077343.662 ops/s
Iteration  15: 279929879.917 ops/s
Iteration  16: 281017196.548 ops/s
Iteration  17: 279730141.046 ops/s
Iteration  18: 279698274.625 ops/s
Iteration  19: 280884778.452 ops/s
Iteration  20: 279812461.269 ops/s
Iteration  21: 280601222.912 ops/s
Iteration  22: 279872022.269 ops/s
Iteration  23: 278853824.617 ops/s
Iteration  24: 279071228.861 ops/s
Iteration  25: 279389215.518 ops/s
Iteration  26: 280318219.387 ops/s
Iteration  27: 280614872.097 ops/s
Iteration  28: 279478975.956 ops/s
Iteration  29: 280374444.148 ops/s
Iteration  30: 279752597.250 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_testToString":
  279735883.512 ±(99.9%) 615986.642 ops/s [Average]
  (min, avg, max) = (278067442.831, 279735883.512, 281757311.890), stdev = 921979.877
  CI (99.9%): [279119896.870, 280351870.154] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt          Score        Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_testToString  thrpt   30  279735883.512 ± 615986.642  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2007418.032 ops/s
# Warmup Iteration   2: 4471539.263 ops/s
# Warmup Iteration   3: 3705693.441 ops/s
# Warmup Iteration   4: 4484165.450 ops/s
# Warmup Iteration   5: 4463151.765 ops/s
# Warmup Iteration   6: 4479571.602 ops/s
# Warmup Iteration   7: 4463730.251 ops/s
# Warmup Iteration   8: 4427504.103 ops/s
# Warmup Iteration   9: 4474124.577 ops/s
# Warmup Iteration  10: 4434636.521 ops/s
# Warmup Iteration  11: 4489009.630 ops/s
# Warmup Iteration  12: 4484960.806 ops/s
# Warmup Iteration  13: 4483350.360 ops/s
# Warmup Iteration  14: 4467640.544 ops/s
# Warmup Iteration  15: 4484569.952 ops/s
# Warmup Iteration  16: 4482301.165 ops/s
# Warmup Iteration  17: 4484795.213 ops/s
# Warmup Iteration  18: 4459843.007 ops/s
# Warmup Iteration  19: 4483193.817 ops/s
# Warmup Iteration  20: 4454089.404 ops/s
# Warmup Iteration  21: 4470552.079 ops/s
# Warmup Iteration  22: 4470790.938 ops/s
# Warmup Iteration  23: 4414356.987 ops/s
# Warmup Iteration  24: 4460536.923 ops/s
# Warmup Iteration  25: 4440064.321 ops/s
# Warmup Iteration  26: 4438910.102 ops/s
# Warmup Iteration  27: 4451066.294 ops/s
# Warmup Iteration  28: 4445607.524 ops/s
# Warmup Iteration  29: 4476603.247 ops/s
# Warmup Iteration  30: 4478497.038 ops/s
Iteration   1: 4475360.094 ops/s
Iteration   2: 4492689.273 ops/s
Iteration   3: 4469150.264 ops/s
Iteration   4: 4488221.247 ops/s
Iteration   5: 4481204.742 ops/s
Iteration   6: 4491452.207 ops/s
Iteration   7: 4472760.147 ops/s
Iteration   8: 4500198.883 ops/s
Iteration   9: 4478717.780 ops/s
Iteration  10: 4497361.350 ops/s
Iteration  11: 4482571.456 ops/s
Iteration  12: 4491143.387 ops/s
Iteration  13: 4455630.818 ops/s
Iteration  14: 4499072.556 ops/s
Iteration  15: 4466416.937 ops/s
Iteration  16: 4490161.133 ops/s
Iteration  17: 4467050.885 ops/s
Iteration  18: 4499897.411 ops/s
Iteration  19: 4444839.620 ops/s
Iteration  20: 4479144.904 ops/s
Iteration  21: 4500618.492 ops/s
Iteration  22: 4412203.393 ops/s
Iteration  23: 4491720.336 ops/s
Iteration  24: 4404435.295 ops/s
Iteration  25: 4505214.470 ops/s
Iteration  26: 4498466.787 ops/s
Iteration  27: 4499490.679 ops/s
Iteration  28: 4384079.971 ops/s
Iteration  29: 4377427.697 ops/s
Iteration  30: 4492561.682 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_toArray":
  4472975.463 ±(99.9%) 23232.204 ops/s [Average]
  (min, avg, max) = (4377427.697, 4472975.463, 4505214.470), stdev = 34772.872
  CI (99.9%): [4449743.259, 4496207.667] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_toArray  thrpt   30  4472975.463 ± 23232.204  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2712696.817 ops/s
# Warmup Iteration   2: 5663129.453 ops/s
# Warmup Iteration   3: 4723062.747 ops/s
# Warmup Iteration   4: 5676891.918 ops/s
# Warmup Iteration   5: 5675589.769 ops/s
# Warmup Iteration   6: 5687557.982 ops/s
# Warmup Iteration   7: 5646091.549 ops/s
# Warmup Iteration   8: 5656133.950 ops/s
# Warmup Iteration   9: 5612816.005 ops/s
# Warmup Iteration  10: 5680075.074 ops/s
# Warmup Iteration  11: 5662914.360 ops/s
# Warmup Iteration  12: 5640560.230 ops/s
# Warmup Iteration  13: 5680673.645 ops/s
# Warmup Iteration  14: 5671863.233 ops/s
# Warmup Iteration  15: 5661962.062 ops/s
# Warmup Iteration  16: 5671570.533 ops/s
# Warmup Iteration  17: 5676356.302 ops/s
# Warmup Iteration  18: 5680244.757 ops/s
# Warmup Iteration  19: 5684998.832 ops/s
# Warmup Iteration  20: 5662655.290 ops/s
# Warmup Iteration  21: 5682473.451 ops/s
# Warmup Iteration  22: 5697278.609 ops/s
# Warmup Iteration  23: 5669895.541 ops/s
# Warmup Iteration  24: 5688105.204 ops/s
# Warmup Iteration  25: 5672187.932 ops/s
# Warmup Iteration  26: 5675583.315 ops/s
# Warmup Iteration  27: 5666072.069 ops/s
# Warmup Iteration  28: 5663902.610 ops/s
# Warmup Iteration  29: 5640866.031 ops/s
# Warmup Iteration  30: 5696520.799 ops/s
Iteration   1: 5613280.964 ops/s
Iteration   2: 5674445.468 ops/s
Iteration   3: 5663240.039 ops/s
Iteration   4: 5655877.994 ops/s
Iteration   5: 5691519.493 ops/s
Iteration   6: 5706613.194 ops/s
Iteration   7: 5681050.390 ops/s
Iteration   8: 5687814.206 ops/s
Iteration   9: 5691677.954 ops/s
Iteration  10: 5671567.674 ops/s
Iteration  11: 5702805.032 ops/s
Iteration  12: 5659080.148 ops/s
Iteration  13: 5681708.052 ops/s
Iteration  14: 5693168.147 ops/s
Iteration  15: 5663869.512 ops/s
Iteration  16: 5682198.170 ops/s
Iteration  17: 5696859.092 ops/s
Iteration  18: 5680990.143 ops/s
Iteration  19: 5684621.259 ops/s
Iteration  20: 5686925.711 ops/s
Iteration  21: 5684032.376 ops/s
Iteration  22: 5669632.129 ops/s
Iteration  23: 5687788.076 ops/s
Iteration  24: 5653594.702 ops/s
Iteration  25: 5681390.334 ops/s
Iteration  26: 5695279.678 ops/s
Iteration  27: 5696197.393 ops/s
Iteration  28: 5679925.832 ops/s
Iteration  29: 5682975.856 ops/s
Iteration  30: 5678139.697 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_toBag":
  5679275.624 ±(99.9%) 12146.522 ops/s [Average]
  (min, avg, max) = (5613280.964, 5679275.624, 5706613.194), stdev = 18180.343
  CI (99.9%): [5667129.102, 5691422.146] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_toBag  thrpt   30  5679275.624 ± 12146.522  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1828378.621 ops/s
# Warmup Iteration   2: 3920816.718 ops/s
# Warmup Iteration   3: 3311384.940 ops/s
# Warmup Iteration   4: 3990967.778 ops/s
# Warmup Iteration   5: 3994393.151 ops/s
# Warmup Iteration   6: 3967200.489 ops/s
# Warmup Iteration   7: 3989565.493 ops/s
# Warmup Iteration   8: 3893274.827 ops/s
# Warmup Iteration   9: 3959273.107 ops/s
# Warmup Iteration  10: 3988912.781 ops/s
# Warmup Iteration  11: 3997254.497 ops/s
# Warmup Iteration  12: 3997635.460 ops/s
# Warmup Iteration  13: 3985266.646 ops/s
# Warmup Iteration  14: 3945940.933 ops/s
# Warmup Iteration  15: 3985049.890 ops/s
# Warmup Iteration  16: 3998568.378 ops/s
# Warmup Iteration  17: 3977630.290 ops/s
# Warmup Iteration  18: 3975871.236 ops/s
# Warmup Iteration  19: 3959685.892 ops/s
# Warmup Iteration  20: 3996448.308 ops/s
# Warmup Iteration  21: 3971505.879 ops/s
# Warmup Iteration  22: 3983726.433 ops/s
# Warmup Iteration  23: 3975721.184 ops/s
# Warmup Iteration  24: 3965941.796 ops/s
# Warmup Iteration  25: 3976171.451 ops/s
# Warmup Iteration  26: 3972826.166 ops/s
# Warmup Iteration  27: 3991348.182 ops/s
# Warmup Iteration  28: 3994548.429 ops/s
# Warmup Iteration  29: 3990787.598 ops/s
# Warmup Iteration  30: 3987183.746 ops/s
Iteration   1: 3908678.771 ops/s
Iteration   2: 3978798.059 ops/s
Iteration   3: 3997386.873 ops/s
Iteration   4: 3965771.397 ops/s
Iteration   5: 3997737.534 ops/s
Iteration   6: 3999018.927 ops/s
Iteration   7: 3988926.306 ops/s
Iteration   8: 4007789.090 ops/s
Iteration   9: 3991717.616 ops/s
Iteration  10: 3984436.865 ops/s
Iteration  11: 3933614.159 ops/s
Iteration  12: 4010947.544 ops/s
Iteration  13: 4002709.739 ops/s
Iteration  14: 3986877.027 ops/s
Iteration  15: 3979086.145 ops/s
Iteration  16: 3976666.655 ops/s
Iteration  17: 3973600.574 ops/s
Iteration  18: 3997905.079 ops/s
Iteration  19: 3991459.845 ops/s
Iteration  20: 4014332.866 ops/s
Iteration  21: 3985348.675 ops/s
Iteration  22: 4004306.792 ops/s
Iteration  23: 3948094.542 ops/s
Iteration  24: 3996378.794 ops/s
Iteration  25: 4010631.245 ops/s
Iteration  26: 3986742.972 ops/s
Iteration  27: 3968490.406 ops/s
Iteration  28: 3938747.529 ops/s
Iteration  29: 3981738.227 ops/s
Iteration  30: 3999666.989 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_toList":
  3983586.908 ±(99.9%) 16347.293 ops/s [Average]
  (min, avg, max) = (3908678.771, 3983586.908, 4014332.866), stdev = 24467.861
  CI (99.9%): [3967239.615, 3999934.202] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_toList  thrpt   30  3983586.908 ± 16347.293  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3554167.454 ops/s
# Warmup Iteration   2: 7328431.308 ops/s
# Warmup Iteration   3: 6234427.412 ops/s
# Warmup Iteration   4: 7446247.400 ops/s
# Warmup Iteration   5: 7425555.390 ops/s
# Warmup Iteration   6: 7377806.464 ops/s
# Warmup Iteration   7: 7374422.863 ops/s
# Warmup Iteration   8: 7405330.183 ops/s
# Warmup Iteration   9: 7296234.604 ops/s
# Warmup Iteration  10: 7416270.827 ops/s
# Warmup Iteration  11: 7408637.315 ops/s
# Warmup Iteration  12: 7374589.930 ops/s
# Warmup Iteration  13: 7393500.305 ops/s
# Warmup Iteration  14: 7448400.535 ops/s
# Warmup Iteration  15: 7449043.905 ops/s
# Warmup Iteration  16: 7454345.737 ops/s
# Warmup Iteration  17: 7399719.981 ops/s
# Warmup Iteration  18: 7425240.913 ops/s
# Warmup Iteration  19: 7444849.328 ops/s
# Warmup Iteration  20: 7350399.456 ops/s
# Warmup Iteration  21: 7410902.383 ops/s
# Warmup Iteration  22: 7361112.405 ops/s
# Warmup Iteration  23: 7324019.124 ops/s
# Warmup Iteration  24: 7370010.179 ops/s
# Warmup Iteration  25: 7379798.564 ops/s
# Warmup Iteration  26: 7330876.621 ops/s
# Warmup Iteration  27: 7434481.184 ops/s
# Warmup Iteration  28: 7329666.525 ops/s
# Warmup Iteration  29: 7420581.546 ops/s
# Warmup Iteration  30: 7366376.083 ops/s
Iteration   1: 7369588.883 ops/s
Iteration   2: 7388068.883 ops/s
Iteration   3: 7396070.905 ops/s
Iteration   4: 7414635.350 ops/s
Iteration   5: 7371301.884 ops/s
Iteration   6: 7395371.583 ops/s
Iteration   7: 7433366.514 ops/s
Iteration   8: 7394093.442 ops/s
Iteration   9: 7389582.955 ops/s
Iteration  10: 7449320.780 ops/s
Iteration  11: 7445050.909 ops/s
Iteration  12: 7440308.662 ops/s
Iteration  13: 7424559.636 ops/s
Iteration  14: 7416421.925 ops/s
Iteration  15: 7416936.393 ops/s
Iteration  16: 7353242.968 ops/s
Iteration  17: 7309812.213 ops/s
Iteration  18: 7436030.679 ops/s
Iteration  19: 7329267.332 ops/s
Iteration  20: 7311503.347 ops/s
Iteration  21: 7441411.885 ops/s
Iteration  22: 7436194.237 ops/s
Iteration  23: 7327758.639 ops/s
Iteration  24: 7383067.191 ops/s
Iteration  25: 7417313.127 ops/s
Iteration  26: 7427831.668 ops/s
Iteration  27: 7414269.821 ops/s
Iteration  28: 7408988.253 ops/s
Iteration  29: 7324732.048 ops/s
Iteration  30: 7392636.746 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_toSet":
  7395291.295 ±(99.9%) 27753.466 ops/s [Average]
  (min, avg, max) = (7309812.213, 7395291.295, 7449320.780), stdev = 41540.085
  CI (99.9%): [7367537.829, 7423044.762] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_toSet  thrpt   30  7395291.295 ± 27753.466  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 687123.445 ops/s
# Warmup Iteration   2: 712870.126 ops/s
# Warmup Iteration   3: 946231.493 ops/s
# Warmup Iteration   4: 941255.213 ops/s
# Warmup Iteration   5: 923643.165 ops/s
# Warmup Iteration   6: 942148.614 ops/s
# Warmup Iteration   7: 935443.790 ops/s
# Warmup Iteration   8: 941436.205 ops/s
# Warmup Iteration   9: 939363.593 ops/s
# Warmup Iteration  10: 937146.281 ops/s
# Warmup Iteration  11: 849085.923 ops/s
# Warmup Iteration  12: 887591.524 ops/s
# Warmup Iteration  13: 942705.974 ops/s
# Warmup Iteration  14: 943914.737 ops/s
# Warmup Iteration  15: 946454.654 ops/s
# Warmup Iteration  16: 938429.600 ops/s
# Warmup Iteration  17: 1002285.174 ops/s
# Warmup Iteration  18: 989327.199 ops/s
# Warmup Iteration  19: 995375.819 ops/s
# Warmup Iteration  20: 999559.427 ops/s
# Warmup Iteration  21: 997537.963 ops/s
# Warmup Iteration  22: 1001038.120 ops/s
# Warmup Iteration  23: 996190.573 ops/s
# Warmup Iteration  24: 994598.873 ops/s
# Warmup Iteration  25: 997557.613 ops/s
# Warmup Iteration  26: 988965.357 ops/s
# Warmup Iteration  27: 999226.441 ops/s
# Warmup Iteration  28: 990576.131 ops/s
# Warmup Iteration  29: 1001522.360 ops/s
# Warmup Iteration  30: 999463.789 ops/s
Iteration   1: 995167.273 ops/s
Iteration   2: 987612.928 ops/s
Iteration   3: 994655.267 ops/s
Iteration   4: 998738.929 ops/s
Iteration   5: 1002966.961 ops/s
Iteration   6: 996207.026 ops/s
Iteration   7: 993591.983 ops/s
Iteration   8: 996493.316 ops/s
Iteration   9: 995899.850 ops/s
Iteration  10: 998987.947 ops/s
Iteration  11: 996658.739 ops/s
Iteration  12: 1000490.736 ops/s
Iteration  13: 997514.850 ops/s
Iteration  14: 1005108.335 ops/s
Iteration  15: 994658.379 ops/s
Iteration  16: 996826.038 ops/s
Iteration  17: 995123.065 ops/s
Iteration  18: 991966.099 ops/s
Iteration  19: 993684.814 ops/s
Iteration  20: 1005016.196 ops/s
Iteration  21: 995627.566 ops/s
Iteration  22: 997785.013 ops/s
Iteration  23: 994258.885 ops/s
Iteration  24: 985082.553 ops/s
Iteration  25: 996588.703 ops/s
Iteration  26: 983222.141 ops/s
Iteration  27: 996838.114 ops/s
Iteration  28: 993947.863 ops/s
Iteration  29: 994658.997 ops/s
Iteration  30: 1000558.440 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_with":
  995864.567 ±(99.9%) 3216.261 ops/s [Average]
  (min, avg, max) = (983222.141, 995864.567, 1005108.335), stdev = 4813.948
  CI (99.9%): [992648.306, 999080.828] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_with  thrpt   30  995864.567 ± 3216.261  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 685510.001 ops/s
# Warmup Iteration   2: 718684.372 ops/s
# Warmup Iteration   3: 944477.677 ops/s
# Warmup Iteration   4: 939198.390 ops/s
# Warmup Iteration   5: 946707.570 ops/s
# Warmup Iteration   6: 948469.320 ops/s
# Warmup Iteration   7: 940742.116 ops/s
# Warmup Iteration   8: 934621.080 ops/s
# Warmup Iteration   9: 947782.427 ops/s
# Warmup Iteration  10: 943901.827 ops/s
# Warmup Iteration  11: 812197.512 ops/s
# Warmup Iteration  12: 925551.441 ops/s
# Warmup Iteration  13: 943015.570 ops/s
# Warmup Iteration  14: 942878.171 ops/s
# Warmup Iteration  15: 950456.360 ops/s
# Warmup Iteration  16: 950891.161 ops/s
# Warmup Iteration  17: 1007723.469 ops/s
# Warmup Iteration  18: 1000914.638 ops/s
# Warmup Iteration  19: 1008919.047 ops/s
# Warmup Iteration  20: 1010324.774 ops/s
# Warmup Iteration  21: 1005187.233 ops/s
# Warmup Iteration  22: 992051.058 ops/s
# Warmup Iteration  23: 1004800.589 ops/s
# Warmup Iteration  24: 1008343.708 ops/s
# Warmup Iteration  25: 1004540.254 ops/s
# Warmup Iteration  26: 1006816.706 ops/s
# Warmup Iteration  27: 1008051.699 ops/s
# Warmup Iteration  28: 996957.870 ops/s
# Warmup Iteration  29: 1005964.686 ops/s
# Warmup Iteration  30: 1007942.106 ops/s
Iteration   1: 984528.447 ops/s
Iteration   2: 987181.379 ops/s
Iteration   3: 1008490.724 ops/s
Iteration   4: 1015128.582 ops/s
Iteration   5: 1009899.609 ops/s
Iteration   6: 1003668.765 ops/s
Iteration   7: 1006235.612 ops/s
Iteration   8: 1009323.963 ops/s
Iteration   9: 979449.564 ops/s
Iteration  10: 1004254.510 ops/s
Iteration  11: 1007553.798 ops/s
Iteration  12: 1007174.908 ops/s
Iteration  13: 1004297.245 ops/s
Iteration  14: 1012889.241 ops/s
Iteration  15: 1011120.794 ops/s
Iteration  16: 1001788.482 ops/s
Iteration  17: 1006322.496 ops/s
Iteration  18: 1000693.023 ops/s
Iteration  19: 1001699.046 ops/s
Iteration  20: 1009158.902 ops/s
Iteration  21: 1001934.586 ops/s
Iteration  22: 1008017.499 ops/s
Iteration  23: 1011774.537 ops/s
Iteration  24: 1011797.722 ops/s
Iteration  25: 1012159.523 ops/s
Iteration  26: 1010512.968 ops/s
Iteration  27: 1007706.804 ops/s
Iteration  28: 999791.803 ops/s
Iteration  29: 1005110.273 ops/s
Iteration  30: 1003966.674 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_withAll":
  1004787.716 ±(99.9%) 5474.979 ops/s [Average]
  (min, avg, max) = (979449.564, 1004787.716, 1015128.582), stdev = 8194.692
  CI (99.9%): [999312.737, 1010262.695] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_withAll  thrpt   30  1004787.716 ± 5474.979  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 685930.051 ops/s
# Warmup Iteration   2: 714361.429 ops/s
# Warmup Iteration   3: 954557.514 ops/s
# Warmup Iteration   4: 949198.606 ops/s
# Warmup Iteration   5: 941927.770 ops/s
# Warmup Iteration   6: 947262.570 ops/s
# Warmup Iteration   7: 946421.471 ops/s
# Warmup Iteration   8: 943683.800 ops/s
# Warmup Iteration   9: 937200.763 ops/s
# Warmup Iteration  10: 946616.716 ops/s
# Warmup Iteration  11: 804222.420 ops/s
# Warmup Iteration  12: 931601.313 ops/s
# Warmup Iteration  13: 946698.957 ops/s
# Warmup Iteration  14: 945198.385 ops/s
# Warmup Iteration  15: 946052.206 ops/s
# Warmup Iteration  16: 942915.983 ops/s
# Warmup Iteration  17: 999807.820 ops/s
# Warmup Iteration  18: 1004328.367 ops/s
# Warmup Iteration  19: 1005199.144 ops/s
# Warmup Iteration  20: 1004657.796 ops/s
# Warmup Iteration  21: 1004212.666 ops/s
# Warmup Iteration  22: 1005277.014 ops/s
# Warmup Iteration  23: 1003949.825 ops/s
# Warmup Iteration  24: 999736.758 ops/s
# Warmup Iteration  25: 1000567.268 ops/s
# Warmup Iteration  26: 1005433.331 ops/s
# Warmup Iteration  27: 999776.431 ops/s
# Warmup Iteration  28: 1006894.839 ops/s
# Warmup Iteration  29: 1009339.090 ops/s
# Warmup Iteration  30: 994965.815 ops/s
Iteration   1: 1006852.765 ops/s
Iteration   2: 1010652.039 ops/s
Iteration   3: 1002452.383 ops/s
Iteration   4: 1003398.091 ops/s
Iteration   5: 1002017.017 ops/s
Iteration   6: 1003642.777 ops/s
Iteration   7: 1004222.887 ops/s
Iteration   8: 1006971.476 ops/s
Iteration   9: 1006198.194 ops/s
Iteration  10: 1008230.245 ops/s
Iteration  11: 1010618.026 ops/s
Iteration  12: 1006855.249 ops/s
Iteration  13: 1008795.216 ops/s
Iteration  14: 1004703.323 ops/s
Iteration  15: 1001116.246 ops/s
Iteration  16: 1009874.106 ops/s
Iteration  17: 1007925.243 ops/s
Iteration  18: 1009296.711 ops/s
Iteration  19: 1008139.969 ops/s
Iteration  20: 990336.919 ops/s
Iteration  21: 1003256.354 ops/s
Iteration  22: 1004281.547 ops/s
Iteration  23: 1008081.372 ops/s
Iteration  24: 1007818.108 ops/s
Iteration  25: 1005680.042 ops/s
Iteration  26: 988427.393 ops/s
Iteration  27: 1003598.854 ops/s
Iteration  28: 1001921.463 ops/s
Iteration  29: 1011695.335 ops/s
Iteration  30: 1004006.397 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_without":
  1005035.525 ±(99.9%) 3431.661 ops/s [Average]
  (min, avg, max) = (988427.393, 1005035.525, 1011695.335), stdev = 5136.349
  CI (99.9%): [1001603.864, 1008467.186] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_without  thrpt   30  1005035.525 ± 3431.661  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 682632.102 ops/s
# Warmup Iteration   2: 711192.937 ops/s
# Warmup Iteration   3: 953528.714 ops/s
# Warmup Iteration   4: 949193.043 ops/s
# Warmup Iteration   5: 951844.463 ops/s
# Warmup Iteration   6: 951202.470 ops/s
# Warmup Iteration   7: 949745.371 ops/s
# Warmup Iteration   8: 952307.439 ops/s
# Warmup Iteration   9: 946552.527 ops/s
# Warmup Iteration  10: 952567.184 ops/s
# Warmup Iteration  11: 801337.469 ops/s
# Warmup Iteration  12: 939764.919 ops/s
# Warmup Iteration  13: 947706.566 ops/s
# Warmup Iteration  14: 948984.424 ops/s
# Warmup Iteration  15: 946939.382 ops/s
# Warmup Iteration  16: 953118.278 ops/s
# Warmup Iteration  17: 1005526.253 ops/s
# Warmup Iteration  18: 1008046.713 ops/s
# Warmup Iteration  19: 1005902.940 ops/s
# Warmup Iteration  20: 1000549.396 ops/s
# Warmup Iteration  21: 1002342.546 ops/s
# Warmup Iteration  22: 1006607.453 ops/s
# Warmup Iteration  23: 1005728.155 ops/s
# Warmup Iteration  24: 1009742.365 ops/s
# Warmup Iteration  25: 1008563.070 ops/s
# Warmup Iteration  26: 1002945.614 ops/s
# Warmup Iteration  27: 1008804.665 ops/s
# Warmup Iteration  28: 1001895.665 ops/s
# Warmup Iteration  29: 1000217.829 ops/s
# Warmup Iteration  30: 994101.179 ops/s
Iteration   1: 1003393.948 ops/s
Iteration   2: 1006723.741 ops/s
Iteration   3: 1008042.318 ops/s
Iteration   4: 1009555.162 ops/s
Iteration   5: 1005407.755 ops/s
Iteration   6: 1007849.826 ops/s
Iteration   7: 1010019.526 ops/s
Iteration   8: 1006141.432 ops/s
Iteration   9: 1000281.043 ops/s
Iteration  10: 1007665.187 ops/s
Iteration  11: 994156.688 ops/s
Iteration  12: 989325.676 ops/s
Iteration  13: 1002632.131 ops/s
Iteration  14: 1007762.399 ops/s
Iteration  15: 997682.211 ops/s
Iteration  16: 1008155.461 ops/s
Iteration  17: 999480.714 ops/s
Iteration  18: 1003418.380 ops/s
Iteration  19: 1010842.214 ops/s
Iteration  20: 1007630.112 ops/s
Iteration  21: 1005008.072 ops/s
Iteration  22: 1005011.486 ops/s
Iteration  23: 1009102.718 ops/s
Iteration  24: 1002219.507 ops/s
Iteration  25: 1009094.552 ops/s
Iteration  26: 1006074.164 ops/s
Iteration  27: 1007423.456 ops/s
Iteration  28: 999143.353 ops/s
Iteration  29: 1012042.665 ops/s
Iteration  30: 1006743.517 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll":
  1004934.314 ±(99.9%) 3395.178 ops/s [Average]
  (min, avg, max) = (989325.676, 1004934.314, 1012042.665), stdev = 5081.743
  CI (99.9%): [1001539.136, 1008329.492] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll  thrpt   30  1004934.314 ± 3395.178  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 697647.427 ops/s
# Warmup Iteration   2: 725578.837 ops/s
# Warmup Iteration   3: 956940.143 ops/s
# Warmup Iteration   4: 959485.248 ops/s
# Warmup Iteration   5: 964113.540 ops/s
# Warmup Iteration   6: 962109.284 ops/s
# Warmup Iteration   7: 955398.672 ops/s
# Warmup Iteration   8: 964437.152 ops/s
# Warmup Iteration   9: 962862.195 ops/s
# Warmup Iteration  10: 960714.370 ops/s
# Warmup Iteration  11: 907372.235 ops/s
# Warmup Iteration  12: 867078.967 ops/s
# Warmup Iteration  13: 957480.320 ops/s
# Warmup Iteration  14: 961093.072 ops/s
# Warmup Iteration  15: 959188.082 ops/s
# Warmup Iteration  16: 949812.164 ops/s
# Warmup Iteration  17: 1031104.261 ops/s
# Warmup Iteration  18: 1005852.549 ops/s
# Warmup Iteration  19: 1020390.042 ops/s
# Warmup Iteration  20: 1029188.877 ops/s
# Warmup Iteration  21: 1026851.687 ops/s
# Warmup Iteration  22: 1027354.131 ops/s
# Warmup Iteration  23: 1023761.685 ops/s
# Warmup Iteration  24: 1024041.293 ops/s
# Warmup Iteration  25: 1020666.750 ops/s
# Warmup Iteration  26: 1026156.837 ops/s
# Warmup Iteration  27: 1026560.474 ops/s
# Warmup Iteration  28: 1028554.195 ops/s
# Warmup Iteration  29: 1028840.910 ops/s
# Warmup Iteration  30: 1013741.765 ops/s
Iteration   1: 1017469.867 ops/s
Iteration   2: 1025928.875 ops/s
Iteration   3: 1031178.605 ops/s
Iteration   4: 1007166.661 ops/s
Iteration   5: 1024382.926 ops/s
Iteration   6: 1025598.455 ops/s
Iteration   7: 1025575.031 ops/s
Iteration   8: 1022202.571 ops/s
Iteration   9: 1026068.363 ops/s
Iteration  10: 1028220.538 ops/s
Iteration  11: 1028936.069 ops/s
Iteration  12: 1026895.442 ops/s
Iteration  13: 1026955.675 ops/s
Iteration  14: 1029697.420 ops/s
Iteration  15: 1022217.144 ops/s
Iteration  16: 1030936.252 ops/s
Iteration  17: 1023814.492 ops/s
Iteration  18: 1026365.758 ops/s
Iteration  19: 1025904.989 ops/s
Iteration  20: 1030243.110 ops/s
Iteration  21: 1030695.609 ops/s
Iteration  22: 1025424.503 ops/s
Iteration  23: 1023160.272 ops/s
Iteration  24: 1026805.039 ops/s
Iteration  25: 1024656.197 ops/s
Iteration  26: 1029615.752 ops/s
Iteration  27: 1021520.842 ops/s
Iteration  28: 1022524.439 ops/s
Iteration  29: 1029607.319 ops/s
Iteration  30: 1028809.983 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_add":
  1025619.273 ±(99.9%) 3179.742 ops/s [Average]
  (min, avg, max) = (1007166.661, 1025619.273, 1031178.605), stdev = 4759.289
  CI (99.9%): [1022439.531, 1028799.015] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_add  thrpt   30  1025619.273 ± 3179.742  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 711017.921 ops/s
# Warmup Iteration   2: 731395.393 ops/s
# Warmup Iteration   3: 983647.191 ops/s
# Warmup Iteration   4: 983022.153 ops/s
# Warmup Iteration   5: 986730.143 ops/s
# Warmup Iteration   6: 985761.270 ops/s
# Warmup Iteration   7: 986109.625 ops/s
# Warmup Iteration   8: 983782.736 ops/s
# Warmup Iteration   9: 988115.240 ops/s
# Warmup Iteration  10: 984515.343 ops/s
# Warmup Iteration  11: 872051.854 ops/s
# Warmup Iteration  12: 945262.355 ops/s
# Warmup Iteration  13: 976789.832 ops/s
# Warmup Iteration  14: 980664.954 ops/s
# Warmup Iteration  15: 987882.511 ops/s
# Warmup Iteration  16: 981769.105 ops/s
# Warmup Iteration  17: 1040065.540 ops/s
# Warmup Iteration  18: 1047692.952 ops/s
# Warmup Iteration  19: 1039382.859 ops/s
# Warmup Iteration  20: 1037243.893 ops/s
# Warmup Iteration  21: 1044115.142 ops/s
# Warmup Iteration  22: 1044529.098 ops/s
# Warmup Iteration  23: 1045042.704 ops/s
# Warmup Iteration  24: 1040057.492 ops/s
# Warmup Iteration  25: 1042946.565 ops/s
# Warmup Iteration  26: 1041715.913 ops/s
# Warmup Iteration  27: 1040920.325 ops/s
# Warmup Iteration  28: 1040668.594 ops/s
# Warmup Iteration  29: 1045585.427 ops/s
# Warmup Iteration  30: 1018465.470 ops/s
Iteration   1: 1046834.122 ops/s
Iteration   2: 1045910.888 ops/s
Iteration   3: 1030460.352 ops/s
Iteration   4: 1046757.405 ops/s
Iteration   5: 1039299.754 ops/s
Iteration   6: 1041478.230 ops/s
Iteration   7: 1034687.730 ops/s
Iteration   8: 1029147.210 ops/s
Iteration   9: 1036530.087 ops/s
Iteration  10: 1043880.072 ops/s
Iteration  11: 1045403.514 ops/s
Iteration  12: 1045556.495 ops/s
Iteration  13: 1040545.870 ops/s
Iteration  14: 1040994.256 ops/s
Iteration  15: 1042408.886 ops/s
Iteration  16: 1040091.558 ops/s
Iteration  17: 1040936.286 ops/s
Iteration  18: 1039419.736 ops/s
Iteration  19: 1047549.502 ops/s
Iteration  20: 1048302.320 ops/s
Iteration  21: 1040138.248 ops/s
Iteration  22: 1042191.145 ops/s
Iteration  23: 1042635.098 ops/s
Iteration  24: 1030902.770 ops/s
Iteration  25: 1043865.746 ops/s
Iteration  26: 1042467.912 ops/s
Iteration  27: 1036348.570 ops/s
Iteration  28: 1041567.639 ops/s
Iteration  29: 1039512.837 ops/s
Iteration  30: 1041286.796 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_addAllArray":
  1040903.701 ±(99.9%) 3275.736 ops/s [Average]
  (min, avg, max) = (1029147.210, 1040903.701, 1048302.320), stdev = 4902.968
  CI (99.9%): [1037627.965, 1044179.437] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_addAllArray  thrpt   30  1040903.701 ± 3275.736  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 710232.941 ops/s
# Warmup Iteration   2: 747225.542 ops/s
# Warmup Iteration   3: 986481.919 ops/s
# Warmup Iteration   4: 989040.736 ops/s
# Warmup Iteration   5: 981986.875 ops/s
# Warmup Iteration   6: 987939.503 ops/s
# Warmup Iteration   7: 989657.948 ops/s
# Warmup Iteration   8: 977198.608 ops/s
# Warmup Iteration   9: 987874.783 ops/s
# Warmup Iteration  10: 968439.231 ops/s
# Warmup Iteration  11: 871896.819 ops/s
# Warmup Iteration  12: 943091.377 ops/s
# Warmup Iteration  13: 980894.187 ops/s
# Warmup Iteration  14: 986165.726 ops/s
# Warmup Iteration  15: 986260.534 ops/s
# Warmup Iteration  16: 987473.764 ops/s
# Warmup Iteration  17: 1049018.818 ops/s
# Warmup Iteration  18: 1052011.167 ops/s
# Warmup Iteration  19: 1047589.462 ops/s
# Warmup Iteration  20: 1048579.948 ops/s
# Warmup Iteration  21: 1053644.213 ops/s
# Warmup Iteration  22: 1042278.192 ops/s
# Warmup Iteration  23: 1048212.181 ops/s
# Warmup Iteration  24: 1046798.810 ops/s
# Warmup Iteration  25: 1049091.326 ops/s
# Warmup Iteration  26: 1049028.235 ops/s
# Warmup Iteration  27: 1051782.325 ops/s
# Warmup Iteration  28: 1036932.928 ops/s
# Warmup Iteration  29: 1047223.141 ops/s
# Warmup Iteration  30: 1048601.346 ops/s
Iteration   1: 1049294.607 ops/s
Iteration   2: 1039815.624 ops/s
Iteration   3: 1049436.246 ops/s
Iteration   4: 1055431.170 ops/s
Iteration   5: 1051726.730 ops/s
Iteration   6: 1052680.912 ops/s
Iteration   7: 1048629.975 ops/s
Iteration   8: 1050525.626 ops/s
Iteration   9: 1054394.186 ops/s
Iteration  10: 1053485.877 ops/s
Iteration  11: 1049814.238 ops/s
Iteration  12: 1042464.825 ops/s
Iteration  13: 1042267.569 ops/s
Iteration  14: 1056301.901 ops/s
Iteration  15: 1051286.094 ops/s
Iteration  16: 1048949.873 ops/s
Iteration  17: 1044701.756 ops/s
Iteration  18: 1047684.117 ops/s
Iteration  19: 1053094.418 ops/s
Iteration  20: 1054803.210 ops/s
Iteration  21: 1045556.548 ops/s
Iteration  22: 1047991.918 ops/s
Iteration  23: 1048244.241 ops/s
Iteration  24: 1044220.342 ops/s
Iteration  25: 1045289.912 ops/s
Iteration  26: 1047535.676 ops/s
Iteration  27: 1045617.383 ops/s
Iteration  28: 1049789.466 ops/s
Iteration  29: 1022939.482 ops/s
Iteration  30: 1044056.410 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_addAllIterable":
  1047934.344 ±(99.9%) 4207.878 ops/s [Average]
  (min, avg, max) = (1022939.482, 1047934.344, 1056301.901), stdev = 6298.154
  CI (99.9%): [1043726.466, 1052142.222] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_addAllIterable  thrpt   30  1047934.344 ± 4207.878  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1803178.541 ops/s
# Warmup Iteration   2: 3808651.044 ops/s
# Warmup Iteration   3: 3168491.476 ops/s
# Warmup Iteration   4: 3791306.354 ops/s
# Warmup Iteration   5: 3811181.182 ops/s
# Warmup Iteration   6: 3806849.468 ops/s
# Warmup Iteration   7: 3804376.326 ops/s
# Warmup Iteration   8: 3821368.608 ops/s
# Warmup Iteration   9: 3827263.370 ops/s
# Warmup Iteration  10: 3830416.224 ops/s
# Warmup Iteration  11: 3780683.021 ops/s
# Warmup Iteration  12: 3795885.957 ops/s
# Warmup Iteration  13: 3820877.300 ops/s
# Warmup Iteration  14: 3848371.832 ops/s
# Warmup Iteration  15: 3822361.856 ops/s
# Warmup Iteration  16: 3824488.791 ops/s
# Warmup Iteration  17: 3668703.549 ops/s
# Warmup Iteration  18: 3691858.766 ops/s
# Warmup Iteration  19: 3669775.769 ops/s
# Warmup Iteration  20: 3688398.320 ops/s
# Warmup Iteration  21: 3692975.340 ops/s
# Warmup Iteration  22: 3694822.328 ops/s
# Warmup Iteration  23: 3650548.126 ops/s
# Warmup Iteration  24: 3684820.588 ops/s
# Warmup Iteration  25: 3697692.402 ops/s
# Warmup Iteration  26: 3614020.799 ops/s
# Warmup Iteration  27: 3702625.535 ops/s
# Warmup Iteration  28: 3695539.304 ops/s
# Warmup Iteration  29: 3685138.068 ops/s
# Warmup Iteration  30: 3672151.458 ops/s
Iteration   1: 3711889.579 ops/s
Iteration   2: 3545475.331 ops/s
Iteration   3: 3686797.730 ops/s
Iteration   4: 3701778.639 ops/s
Iteration   5: 3676699.328 ops/s
Iteration   6: 3700933.450 ops/s
Iteration   7: 3673889.723 ops/s
Iteration   8: 3697720.157 ops/s
Iteration   9: 3706405.260 ops/s
Iteration  10: 3691176.310 ops/s
Iteration  11: 3652071.481 ops/s
Iteration  12: 3670768.180 ops/s
Iteration  13: 3702021.546 ops/s
Iteration  14: 3643725.705 ops/s
Iteration  15: 3685211.283 ops/s
Iteration  16: 3697355.136 ops/s
Iteration  17: 3692981.668 ops/s
Iteration  18: 3680273.611 ops/s
Iteration  19: 3689272.199 ops/s
Iteration  20: 3700842.041 ops/s
Iteration  21: 3709014.425 ops/s
Iteration  22: 3718724.999 ops/s
Iteration  23: 3685864.606 ops/s
Iteration  24: 3649891.283 ops/s
Iteration  25: 3694632.137 ops/s
Iteration  26: 3690316.046 ops/s
Iteration  27: 3675483.442 ops/s
Iteration  28: 3707205.430 ops/s
Iteration  29: 3693299.953 ops/s
Iteration  30: 3598100.507 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_allSatisfy":
  3680994.039 ±(99.9%) 23591.521 ops/s [Average]
  (min, avg, max) = (3545475.331, 3680994.039, 3718724.999), stdev = 35310.681
  CI (99.9%): [3657402.518, 3704585.561] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_allSatisfy  thrpt   30  3680994.039 ± 23591.521  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2026421.636 ops/s
# Warmup Iteration   2: 3863280.412 ops/s
# Warmup Iteration   3: 3912957.184 ops/s
# Warmup Iteration   4: 4242853.531 ops/s
# Warmup Iteration   5: 4248182.597 ops/s
# Warmup Iteration   6: 4177681.882 ops/s
# Warmup Iteration   7: 4232968.817 ops/s
# Warmup Iteration   8: 4217477.065 ops/s
# Warmup Iteration   9: 4229526.319 ops/s
# Warmup Iteration  10: 4230690.455 ops/s
# Warmup Iteration  11: 4223090.893 ops/s
# Warmup Iteration  12: 4240157.898 ops/s
# Warmup Iteration  13: 4236001.659 ops/s
# Warmup Iteration  14: 4241134.999 ops/s
# Warmup Iteration  15: 4193833.794 ops/s
# Warmup Iteration  16: 4217757.265 ops/s
# Warmup Iteration  17: 4225304.466 ops/s
# Warmup Iteration  18: 4234593.031 ops/s
# Warmup Iteration  19: 4194387.828 ops/s
# Warmup Iteration  20: 4186260.148 ops/s
# Warmup Iteration  21: 4224670.477 ops/s
# Warmup Iteration  22: 4240752.774 ops/s
# Warmup Iteration  23: 4199998.879 ops/s
# Warmup Iteration  24: 4224865.621 ops/s
# Warmup Iteration  25: 4243589.735 ops/s
# Warmup Iteration  26: 4191003.563 ops/s
# Warmup Iteration  27: 4233059.568 ops/s
# Warmup Iteration  28: 4213278.140 ops/s
# Warmup Iteration  29: 4232998.746 ops/s
# Warmup Iteration  30: 4185980.398 ops/s
Iteration   1: 4241213.688 ops/s
Iteration   2: 4209877.113 ops/s
Iteration   3: 4178763.126 ops/s
Iteration   4: 4205548.543 ops/s
Iteration   5: 4216264.263 ops/s
Iteration   6: 4220990.237 ops/s
Iteration   7: 4220755.255 ops/s
Iteration   8: 4164769.945 ops/s
Iteration   9: 4194059.298 ops/s
Iteration  10: 4234504.039 ops/s
Iteration  11: 4215154.318 ops/s
Iteration  12: 4227401.278 ops/s
Iteration  13: 4212260.370 ops/s
Iteration  14: 4220851.524 ops/s
Iteration  15: 4215285.280 ops/s
Iteration  16: 4231699.691 ops/s
Iteration  17: 4174964.981 ops/s
Iteration  18: 4236938.638 ops/s
Iteration  19: 4226633.686 ops/s
Iteration  20: 4245827.118 ops/s
Iteration  21: 4172189.040 ops/s
Iteration  22: 4182243.998 ops/s
Iteration  23: 4214264.847 ops/s
Iteration  24: 4199611.742 ops/s
Iteration  25: 4242913.501 ops/s
Iteration  26: 4212266.030 ops/s
Iteration  27: 4227933.569 ops/s
Iteration  28: 4156176.836 ops/s
Iteration  29: 4198662.651 ops/s
Iteration  30: 4243488.539 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_anySatisfy":
  4211450.438 ±(99.9%) 16379.640 ops/s [Average]
  (min, avg, max) = (4156176.836, 4211450.438, 4245827.118), stdev = 24516.276
  CI (99.9%): [4195070.798, 4227830.078] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_anySatisfy  thrpt   30  4211450.438 ± 16379.640  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 911255.514 ops/s
# Warmup Iteration   2: 1913028.099 ops/s
# Warmup Iteration   3: 1928870.153 ops/s
# Warmup Iteration   4: 1607542.861 ops/s
# Warmup Iteration   5: 1925958.486 ops/s
# Warmup Iteration   6: 1908254.020 ops/s
# Warmup Iteration   7: 1930976.240 ops/s
# Warmup Iteration   8: 1926216.806 ops/s
# Warmup Iteration   9: 1934696.096 ops/s
# Warmup Iteration  10: 1927022.911 ops/s
# Warmup Iteration  11: 1921424.466 ops/s
# Warmup Iteration  12: 1920332.442 ops/s
# Warmup Iteration  13: 1931657.382 ops/s
# Warmup Iteration  14: 1918613.943 ops/s
# Warmup Iteration  15: 1918353.934 ops/s
# Warmup Iteration  16: 1925301.265 ops/s
# Warmup Iteration  17: 1927283.083 ops/s
# Warmup Iteration  18: 1914864.077 ops/s
# Warmup Iteration  19: 1924630.274 ops/s
# Warmup Iteration  20: 1925519.954 ops/s
# Warmup Iteration  21: 1933630.359 ops/s
# Warmup Iteration  22: 1946372.224 ops/s
# Warmup Iteration  23: 1932875.649 ops/s
# Warmup Iteration  24: 1912986.502 ops/s
# Warmup Iteration  25: 1920962.299 ops/s
# Warmup Iteration  26: 1920384.055 ops/s
# Warmup Iteration  27: 1921441.838 ops/s
# Warmup Iteration  28: 1934088.618 ops/s
# Warmup Iteration  29: 1914754.492 ops/s
# Warmup Iteration  30: 1914467.994 ops/s
Iteration   1: 1923339.693 ops/s
Iteration   2: 1895893.748 ops/s
Iteration   3: 1942044.873 ops/s
Iteration   4: 1939416.696 ops/s
Iteration   5: 1910885.257 ops/s
Iteration   6: 1924518.821 ops/s
Iteration   7: 1911796.373 ops/s
Iteration   8: 1921478.390 ops/s
Iteration   9: 1918653.129 ops/s
Iteration  10: 1898008.318 ops/s
Iteration  11: 1932094.528 ops/s
Iteration  12: 1913662.533 ops/s
Iteration  13: 1888493.200 ops/s
Iteration  14: 1921077.581 ops/s
Iteration  15: 1916130.437 ops/s
Iteration  16: 1935775.482 ops/s
Iteration  17: 1907451.986 ops/s
Iteration  18: 1923411.942 ops/s
Iteration  19: 1946102.441 ops/s
Iteration  20: 1922579.552 ops/s
Iteration  21: 1939548.102 ops/s
Iteration  22: 1938362.898 ops/s
Iteration  23: 1937005.716 ops/s
Iteration  24: 1937938.605 ops/s
Iteration  25: 1945248.176 ops/s
Iteration  26: 1927551.562 ops/s
Iteration  27: 1912422.575 ops/s
Iteration  28: 1921791.297 ops/s
Iteration  29: 1947828.872 ops/s
Iteration  30: 1923969.185 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_appendString":
  1924149.399 ±(99.9%) 10211.119 ops/s [Average]
  (min, avg, max) = (1888493.200, 1924149.399, 1947828.872), stdev = 15283.524
  CI (99.9%): [1913938.280, 1934360.518] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_appendString  thrpt   30  1924149.399 ± 10211.119  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4486010.168 ops/s
# Warmup Iteration   2: 14705028.605 ops/s
# Warmup Iteration   3: 15599486.836 ops/s
# Warmup Iteration   4: 12926332.353 ops/s
# Warmup Iteration   5: 15538198.889 ops/s
# Warmup Iteration   6: 15560429.975 ops/s
# Warmup Iteration   7: 15551880.136 ops/s
# Warmup Iteration   8: 15513197.896 ops/s
# Warmup Iteration   9: 15309728.520 ops/s
# Warmup Iteration  10: 15545487.214 ops/s
# Warmup Iteration  11: 15578562.245 ops/s
# Warmup Iteration  12: 15536818.748 ops/s
# Warmup Iteration  13: 15579741.370 ops/s
# Warmup Iteration  14: 15490457.743 ops/s
# Warmup Iteration  15: 15466675.285 ops/s
# Warmup Iteration  16: 15523008.040 ops/s
# Warmup Iteration  17: 15526878.989 ops/s
# Warmup Iteration  18: 15450462.038 ops/s
# Warmup Iteration  19: 15383741.805 ops/s
# Warmup Iteration  20: 15511721.965 ops/s
# Warmup Iteration  21: 15548736.815 ops/s
# Warmup Iteration  22: 15492707.617 ops/s
# Warmup Iteration  23: 15468290.155 ops/s
# Warmup Iteration  24: 15409256.091 ops/s
# Warmup Iteration  25: 15492215.976 ops/s
# Warmup Iteration  26: 15501727.828 ops/s
# Warmup Iteration  27: 15446191.208 ops/s
# Warmup Iteration  28: 15556930.922 ops/s
# Warmup Iteration  29: 15497314.849 ops/s
# Warmup Iteration  30: 15540751.270 ops/s
Iteration   1: 15529596.266 ops/s
Iteration   2: 15478322.252 ops/s
Iteration   3: 15593268.544 ops/s
Iteration   4: 15536075.735 ops/s
Iteration   5: 15350668.751 ops/s
Iteration   6: 15596341.596 ops/s
Iteration   7: 15536306.224 ops/s
Iteration   8: 15467340.198 ops/s
Iteration   9: 15558811.061 ops/s
Iteration  10: 15584792.697 ops/s
Iteration  11: 15506071.860 ops/s
Iteration  12: 15484175.088 ops/s
Iteration  13: 15493507.536 ops/s
Iteration  14: 15547058.256 ops/s
Iteration  15: 15566716.037 ops/s
Iteration  16: 15595463.402 ops/s
Iteration  17: 15598593.712 ops/s
Iteration  18: 15554373.090 ops/s
Iteration  19: 15544522.085 ops/s
Iteration  20: 15610325.336 ops/s
Iteration  21: 15420501.468 ops/s
Iteration  22: 15537387.898 ops/s
Iteration  23: 15540640.791 ops/s
Iteration  24: 15480515.311 ops/s
Iteration  25: 15506587.427 ops/s
Iteration  26: 15316337.012 ops/s
Iteration  27: 15563704.172 ops/s
Iteration  28: 15544052.773 ops/s
Iteration  29: 15581692.980 ops/s
Iteration  30: 15595130.187 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_asLazy":
  15527295.992 ±(99.9%) 46717.750 ops/s [Average]
  (min, avg, max) = (15316337.012, 15527295.992, 15610325.336), stdev = 69924.934
  CI (99.9%): [15480578.241, 15574013.742] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt         Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_asLazy  thrpt   30  15527295.992 ± 46717.750  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6267355.107 ops/s
# Warmup Iteration   2: 12847535.541 ops/s
# Warmup Iteration   3: 10856405.168 ops/s
# Warmup Iteration   4: 12921845.608 ops/s
# Warmup Iteration   5: 12746685.573 ops/s
# Warmup Iteration   6: 12869268.409 ops/s
# Warmup Iteration   7: 12846771.538 ops/s
# Warmup Iteration   8: 12967819.404 ops/s
# Warmup Iteration   9: 12903425.955 ops/s
# Warmup Iteration  10: 12902032.315 ops/s
# Warmup Iteration  11: 12973510.583 ops/s
# Warmup Iteration  12: 12916466.426 ops/s
# Warmup Iteration  13: 12867423.990 ops/s
# Warmup Iteration  14: 12887807.934 ops/s
# Warmup Iteration  15: 12915722.423 ops/s
# Warmup Iteration  16: 12866273.868 ops/s
# Warmup Iteration  17: 12852312.884 ops/s
# Warmup Iteration  18: 12745303.166 ops/s
# Warmup Iteration  19: 12902893.417 ops/s
# Warmup Iteration  20: 12895833.458 ops/s
# Warmup Iteration  21: 12902142.352 ops/s
# Warmup Iteration  22: 12930156.094 ops/s
# Warmup Iteration  23: 12761836.565 ops/s
# Warmup Iteration  24: 12871870.136 ops/s
# Warmup Iteration  25: 12963509.509 ops/s
# Warmup Iteration  26: 12892282.722 ops/s
# Warmup Iteration  27: 12925159.631 ops/s
# Warmup Iteration  28: 12912499.293 ops/s
# Warmup Iteration  29: 12830039.184 ops/s
# Warmup Iteration  30: 12903090.354 ops/s
Iteration   1: 12920690.498 ops/s
Iteration   2: 12775119.422 ops/s
Iteration   3: 12971974.949 ops/s
Iteration   4: 12952211.464 ops/s
Iteration   5: 12741890.904 ops/s
Iteration   6: 12969255.679 ops/s
Iteration   7: 12606971.765 ops/s
Iteration   8: 12938407.645 ops/s
Iteration   9: 12902238.042 ops/s
Iteration  10: 12963181.050 ops/s
Iteration  11: 12856698.271 ops/s
Iteration  12: 12870241.413 ops/s
Iteration  13: 12838892.341 ops/s
Iteration  14: 12937429.447 ops/s
Iteration  15: 12869849.532 ops/s
Iteration  16: 12962826.564 ops/s
Iteration  17: 12938237.072 ops/s
Iteration  18: 12889485.141 ops/s
Iteration  19: 12931118.336 ops/s
Iteration  20: 12920431.272 ops/s
Iteration  21: 12879192.116 ops/s
Iteration  22: 12883903.451 ops/s
Iteration  23: 12996225.195 ops/s
Iteration  24: 12883178.219 ops/s
Iteration  25: 12928895.523 ops/s
Iteration  26: 12825167.959 ops/s
Iteration  27: 12938573.058 ops/s
Iteration  28: 12889124.770 ops/s
Iteration  29: 12918342.585 ops/s
Iteration  30: 12954048.487 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_asSynchronized":
  12895126.739 ±(99.9%) 52868.907 ops/s [Average]
  (min, avg, max) = (12606971.765, 12895126.739, 12996225.195), stdev = 79131.697
  CI (99.9%): [12842257.832, 12947995.646] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt         Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_asSynchronized  thrpt   30  12895126.739 ± 52868.907  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2846333.308 ops/s
# Warmup Iteration   2: 10951770.379 ops/s
# Warmup Iteration   3: 9947755.507 ops/s
# Warmup Iteration   4: 11902138.143 ops/s
# Warmup Iteration   5: 11792432.096 ops/s
# Warmup Iteration   6: 12009995.560 ops/s
# Warmup Iteration   7: 11977148.161 ops/s
# Warmup Iteration   8: 11882641.407 ops/s
# Warmup Iteration   9: 11954690.505 ops/s
# Warmup Iteration  10: 11949298.251 ops/s
# Warmup Iteration  11: 11982235.524 ops/s
# Warmup Iteration  12: 11972303.071 ops/s
# Warmup Iteration  13: 11888292.277 ops/s
# Warmup Iteration  14: 11919030.583 ops/s
# Warmup Iteration  15: 11999725.202 ops/s
# Warmup Iteration  16: 11892512.485 ops/s
# Warmup Iteration  17: 11991794.831 ops/s
# Warmup Iteration  18: 11957691.082 ops/s
# Warmup Iteration  19: 11958671.387 ops/s
# Warmup Iteration  20: 11899901.248 ops/s
# Warmup Iteration  21: 11921126.785 ops/s
# Warmup Iteration  22: 12020548.693 ops/s
# Warmup Iteration  23: 11842329.034 ops/s
# Warmup Iteration  24: 11913529.596 ops/s
# Warmup Iteration  25: 11976094.859 ops/s
# Warmup Iteration  26: 11969768.689 ops/s
# Warmup Iteration  27: 12043706.525 ops/s
# Warmup Iteration  28: 12025804.309 ops/s
# Warmup Iteration  29: 11968237.670 ops/s
# Warmup Iteration  30: 11962606.227 ops/s
Iteration   1: 12051825.496 ops/s
Iteration   2: 11980002.326 ops/s
Iteration   3: 11962091.504 ops/s
Iteration   4: 11976258.882 ops/s
Iteration   5: 11988082.159 ops/s
Iteration   6: 11960230.241 ops/s
Iteration   7: 11836827.159 ops/s
Iteration   8: 11925637.305 ops/s
Iteration   9: 12009175.777 ops/s
Iteration  10: 12033439.632 ops/s
Iteration  11: 11680664.469 ops/s
Iteration  12: 11608687.326 ops/s
Iteration  13: 12019646.781 ops/s
Iteration  14: 11995057.785 ops/s
Iteration  15: 12035801.458 ops/s
Iteration  16: 12046286.409 ops/s
Iteration  17: 11936434.031 ops/s
Iteration  18: 11971455.543 ops/s
Iteration  19: 11986637.028 ops/s
Iteration  20: 12037504.929 ops/s
Iteration  21: 12036174.242 ops/s
Iteration  22: 12064632.824 ops/s
Iteration  23: 12033926.522 ops/s
Iteration  24: 11986660.765 ops/s
Iteration  25: 11977430.392 ops/s
Iteration  26: 11808399.856 ops/s
Iteration  27: 11992908.507 ops/s
Iteration  28: 12068139.045 ops/s
Iteration  29: 12031755.875 ops/s
Iteration  30: 11973369.657 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_asUnmodifiable":
  11967171.464 ±(99.9%) 70582.023 ops/s [Average]
  (min, avg, max) = (11608687.326, 11967171.464, 12068139.045), stdev = 105643.857
  CI (99.9%): [11896589.442, 12037753.487] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt         Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  11967171.464 ± 70582.023  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 71386.112 ops/s
# Warmup Iteration   2: 84257.254 ops/s
# Warmup Iteration   3: 113237.577 ops/s
# Warmup Iteration   4: 113144.481 ops/s
# Warmup Iteration   5: 114940.033 ops/s
# Warmup Iteration   6: 113900.652 ops/s
# Warmup Iteration   7: 113279.366 ops/s
# Warmup Iteration   8: 114353.547 ops/s
# Warmup Iteration   9: 106161.511 ops/s
# Warmup Iteration  10: 101597.803 ops/s
# Warmup Iteration  11: 114507.543 ops/s
# Warmup Iteration  12: 113814.317 ops/s
# Warmup Iteration  13: 114871.721 ops/s
# Warmup Iteration  14: 114671.052 ops/s
# Warmup Iteration  15: 114573.406 ops/s
# Warmup Iteration  16: 114333.032 ops/s
# Warmup Iteration  17: 115069.401 ops/s
# Warmup Iteration  18: 114959.705 ops/s
# Warmup Iteration  19: 112798.125 ops/s
# Warmup Iteration  20: 115289.074 ops/s
# Warmup Iteration  21: 114401.376 ops/s
# Warmup Iteration  22: 115865.901 ops/s
# Warmup Iteration  23: 114464.200 ops/s
# Warmup Iteration  24: 114522.447 ops/s
# Warmup Iteration  25: 114743.371 ops/s
# Warmup Iteration  26: 115254.588 ops/s
# Warmup Iteration  27: 115353.614 ops/s
# Warmup Iteration  28: 115295.068 ops/s
# Warmup Iteration  29: 114482.536 ops/s
# Warmup Iteration  30: 115210.090 ops/s
Iteration   1: 115145.612 ops/s
Iteration   2: 114662.131 ops/s
Iteration   3: 115266.257 ops/s
Iteration   4: 115448.311 ops/s
Iteration   5: 114939.337 ops/s
Iteration   6: 112939.772 ops/s
Iteration   7: 114738.028 ops/s
Iteration   8: 115254.764 ops/s
Iteration   9: 113778.074 ops/s
Iteration  10: 115591.373 ops/s
Iteration  11: 115642.047 ops/s
Iteration  12: 113888.764 ops/s
Iteration  13: 112464.074 ops/s
Iteration  14: 114621.881 ops/s
Iteration  15: 114627.563 ops/s
Iteration  16: 115181.800 ops/s
Iteration  17: 113573.615 ops/s
Iteration  18: 114833.022 ops/s
Iteration  19: 115096.553 ops/s
Iteration  20: 114838.718 ops/s
Iteration  21: 115518.373 ops/s
Iteration  22: 115038.664 ops/s
Iteration  23: 114942.085 ops/s
Iteration  24: 114094.308 ops/s
Iteration  25: 115188.251 ops/s
Iteration  26: 114972.058 ops/s
Iteration  27: 114838.247 ops/s
Iteration  28: 115537.511 ops/s
Iteration  29: 115166.729 ops/s
Iteration  30: 115152.101 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_booleanIterator":
  114766.001 ±(99.9%) 511.170 ops/s [Average]
  (min, avg, max) = (112464.074, 114766.001, 115642.047), stdev = 765.095
  CI (99.9%): [114254.831, 115277.170] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score     Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_booleanIterator  thrpt   30  114766.001 ± 511.170  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 530732.729 ops/s
# Warmup Iteration   2: 709024.962 ops/s
# Warmup Iteration   3: 861100.185 ops/s
# Warmup Iteration   4: 858906.676 ops/s
# Warmup Iteration   5: 859758.917 ops/s
# Warmup Iteration   6: 857702.596 ops/s
# Warmup Iteration   7: 859738.835 ops/s
# Warmup Iteration   8: 721748.633 ops/s
# Warmup Iteration   9: 861554.853 ops/s
# Warmup Iteration  10: 857490.338 ops/s
# Warmup Iteration  11: 861898.015 ops/s
# Warmup Iteration  12: 859436.152 ops/s
# Warmup Iteration  13: 858825.883 ops/s
# Warmup Iteration  14: 863329.186 ops/s
# Warmup Iteration  15: 862002.883 ops/s
# Warmup Iteration  16: 861753.611 ops/s
# Warmup Iteration  17: 909098.341 ops/s
# Warmup Iteration  18: 897608.151 ops/s
# Warmup Iteration  19: 906843.288 ops/s
# Warmup Iteration  20: 897501.758 ops/s
# Warmup Iteration  21: 902455.427 ops/s
# Warmup Iteration  22: 902108.312 ops/s
# Warmup Iteration  23: 899013.312 ops/s
# Warmup Iteration  24: 898433.426 ops/s
# Warmup Iteration  25: 902658.287 ops/s
# Warmup Iteration  26: 897865.663 ops/s
# Warmup Iteration  27: 901400.248 ops/s
# Warmup Iteration  28: 904686.824 ops/s
# Warmup Iteration  29: 908169.497 ops/s
# Warmup Iteration  30: 903219.143 ops/s
Iteration   1: 908050.183 ops/s
Iteration   2: 902512.898 ops/s
Iteration   3: 896457.942 ops/s
Iteration   4: 903648.959 ops/s
Iteration   5: 907357.749 ops/s
Iteration   6: 909225.792 ops/s
Iteration   7: 903799.007 ops/s
Iteration   8: 886027.189 ops/s
Iteration   9: 903736.841 ops/s
Iteration  10: 902260.741 ops/s
Iteration  11: 901124.439 ops/s
Iteration  12: 907749.362 ops/s
Iteration  13: 899188.741 ops/s
Iteration  14: 903957.075 ops/s
Iteration  15: 892155.476 ops/s
Iteration  16: 903038.104 ops/s
Iteration  17: 903896.092 ops/s
Iteration  18: 903362.344 ops/s
Iteration  19: 885060.153 ops/s
Iteration  20: 902936.982 ops/s
Iteration  21: 897733.737 ops/s
Iteration  22: 899994.067 ops/s
Iteration  23: 906143.706 ops/s
Iteration  24: 902900.763 ops/s
Iteration  25: 897274.550 ops/s
Iteration  26: 897781.536 ops/s
Iteration  27: 904999.119 ops/s
Iteration  28: 897928.080 ops/s
Iteration  29: 901264.381 ops/s
Iteration  30: 905150.285 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_booleanIterator_with_remove":
  901223.876 ±(99.9%) 3819.537 ops/s [Average]
  (min, avg, max) = (885060.153, 901223.876, 909225.792), stdev = 5716.904
  CI (99.9%): [897404.339, 905043.414] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                            Mode  Cnt       Score      Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  901223.876 ± 3819.537  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 137253.784 ops/s
# Warmup Iteration   2: 226257.145 ops/s
# Warmup Iteration   3: 265040.550 ops/s
# Warmup Iteration   4: 265291.595 ops/s
# Warmup Iteration   5: 267330.537 ops/s
# Warmup Iteration   6: 256284.015 ops/s
# Warmup Iteration   7: 233600.776 ops/s
# Warmup Iteration   8: 267098.344 ops/s
# Warmup Iteration   9: 267310.276 ops/s
# Warmup Iteration  10: 264158.655 ops/s
# Warmup Iteration  11: 268145.856 ops/s
# Warmup Iteration  12: 265443.306 ops/s
# Warmup Iteration  13: 267271.141 ops/s
# Warmup Iteration  14: 268108.772 ops/s
# Warmup Iteration  15: 267278.431 ops/s
# Warmup Iteration  16: 267281.986 ops/s
# Warmup Iteration  17: 275580.531 ops/s
# Warmup Iteration  18: 275486.179 ops/s
# Warmup Iteration  19: 276803.443 ops/s
# Warmup Iteration  20: 274475.545 ops/s
# Warmup Iteration  21: 273789.905 ops/s
# Warmup Iteration  22: 276890.211 ops/s
# Warmup Iteration  23: 276109.567 ops/s
# Warmup Iteration  24: 275544.030 ops/s
# Warmup Iteration  25: 276054.847 ops/s
# Warmup Iteration  26: 276827.217 ops/s
# Warmup Iteration  27: 276031.934 ops/s
# Warmup Iteration  28: 276476.471 ops/s
# Warmup Iteration  29: 274579.190 ops/s
# Warmup Iteration  30: 275724.803 ops/s
Iteration   1: 276563.973 ops/s
Iteration   2: 275140.959 ops/s
Iteration   3: 276689.647 ops/s
Iteration   4: 276468.537 ops/s
Iteration   5: 276680.600 ops/s
Iteration   6: 277108.706 ops/s
Iteration   7: 276338.282 ops/s
Iteration   8: 276939.589 ops/s
Iteration   9: 277490.808 ops/s
Iteration  10: 276460.066 ops/s
Iteration  11: 277507.724 ops/s
Iteration  12: 276609.330 ops/s
Iteration  13: 275603.712 ops/s
Iteration  14: 274620.741 ops/s
Iteration  15: 276486.024 ops/s
Iteration  16: 276190.444 ops/s
Iteration  17: 275476.829 ops/s
Iteration  18: 275527.845 ops/s
Iteration  19: 278371.084 ops/s
Iteration  20: 270097.955 ops/s
Iteration  21: 277280.874 ops/s
Iteration  22: 276394.979 ops/s
Iteration  23: 276783.906 ops/s
Iteration  24: 277264.885 ops/s
Iteration  25: 275837.122 ops/s
Iteration  26: 274901.821 ops/s
Iteration  27: 277118.571 ops/s
Iteration  28: 276672.319 ops/s
Iteration  29: 277114.526 ops/s
Iteration  30: 273992.825 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_chunk":
  276191.156 ±(99.9%) 991.948 ops/s [Average]
  (min, avg, max) = (270097.955, 276191.156, 278371.084), stdev = 1484.701
  CI (99.9%): [275199.208, 277183.104] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score     Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_chunk  thrpt   30  276191.156 ± 991.948  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4951860.889 ops/s
# Warmup Iteration   2: 8465768.521 ops/s
# Warmup Iteration   3: 9961470.080 ops/s
# Warmup Iteration   4: 9963392.788 ops/s
# Warmup Iteration   5: 10002263.193 ops/s
# Warmup Iteration   6: 10007439.465 ops/s
# Warmup Iteration   7: 9989176.286 ops/s
# Warmup Iteration   8: 10011518.384 ops/s
# Warmup Iteration   9: 9935296.772 ops/s
# Warmup Iteration  10: 10009687.431 ops/s
# Warmup Iteration  11: 10039183.599 ops/s
# Warmup Iteration  12: 10020589.280 ops/s
# Warmup Iteration  13: 10013574.744 ops/s
# Warmup Iteration  14: 10046193.390 ops/s
# Warmup Iteration  15: 9910283.798 ops/s
# Warmup Iteration  16: 9932850.404 ops/s
# Warmup Iteration  17: 9849207.108 ops/s
# Warmup Iteration  18: 9999107.008 ops/s
# Warmup Iteration  19: 9957645.650 ops/s
# Warmup Iteration  20: 10009697.194 ops/s
# Warmup Iteration  21: 9933849.337 ops/s
# Warmup Iteration  22: 9967799.753 ops/s
# Warmup Iteration  23: 10035746.331 ops/s
# Warmup Iteration  24: 9995366.327 ops/s
# Warmup Iteration  25: 9976559.714 ops/s
# Warmup Iteration  26: 9988153.620 ops/s
# Warmup Iteration  27: 10006785.932 ops/s
# Warmup Iteration  28: 9928281.239 ops/s
# Warmup Iteration  29: 10007297.827 ops/s
# Warmup Iteration  30: 10026842.781 ops/s
Iteration   1: 10007036.171 ops/s
Iteration   2: 10058599.664 ops/s
Iteration   3: 9992269.173 ops/s
Iteration   4: 9992105.043 ops/s
Iteration   5: 10015801.039 ops/s
Iteration   6: 10040217.594 ops/s
Iteration   7: 10013753.033 ops/s
Iteration   8: 10044893.032 ops/s
Iteration   9: 9976689.047 ops/s
Iteration  10: 9995497.612 ops/s
Iteration  11: 10052699.875 ops/s
Iteration  12: 10031183.494 ops/s
Iteration  13: 10048338.523 ops/s
Iteration  14: 9877215.920 ops/s
Iteration  15: 9915918.679 ops/s
Iteration  16: 10034233.818 ops/s
Iteration  17: 10062777.197 ops/s
Iteration  18: 9994795.721 ops/s
Iteration  19: 10030635.968 ops/s
Iteration  20: 9987316.016 ops/s
Iteration  21: 10056385.871 ops/s
Iteration  22: 9931311.768 ops/s
Iteration  23: 10010415.814 ops/s
Iteration  24: 9949133.860 ops/s
Iteration  25: 10061059.860 ops/s
Iteration  26: 10057662.801 ops/s
Iteration  27: 10053012.071 ops/s
Iteration  28: 9756351.542 ops/s
Iteration  29: 9983040.889 ops/s
Iteration  30: 9845208.135 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_clear":
  9995851.974 ±(99.9%) 47448.443 ops/s [Average]
  (min, avg, max) = (9756351.542, 9995851.974, 10062777.197), stdev = 71018.602
  CI (99.9%): [9948403.531, 10043300.418] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_clear  thrpt   30  9995851.974 ± 47448.443  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1091028.187 ops/s
# Warmup Iteration   2: 2927614.003 ops/s
# Warmup Iteration   3: 3012862.658 ops/s
# Warmup Iteration   4: 2491681.448 ops/s
# Warmup Iteration   5: 3020615.591 ops/s
# Warmup Iteration   6: 3031104.805 ops/s
# Warmup Iteration   7: 3023693.838 ops/s
# Warmup Iteration   8: 2999975.215 ops/s
# Warmup Iteration   9: 3033446.178 ops/s
# Warmup Iteration  10: 3032601.901 ops/s
# Warmup Iteration  11: 3013711.373 ops/s
# Warmup Iteration  12: 2990051.450 ops/s
# Warmup Iteration  13: 3039051.385 ops/s
# Warmup Iteration  14: 2990911.209 ops/s
# Warmup Iteration  15: 3009227.721 ops/s
# Warmup Iteration  16: 3042023.126 ops/s
# Warmup Iteration  17: 3006903.244 ops/s
# Warmup Iteration  18: 3028542.991 ops/s
# Warmup Iteration  19: 3026406.485 ops/s
# Warmup Iteration  20: 3031163.286 ops/s
# Warmup Iteration  21: 3022560.489 ops/s
# Warmup Iteration  22: 3025617.678 ops/s
# Warmup Iteration  23: 3024890.805 ops/s
# Warmup Iteration  24: 3026845.097 ops/s
# Warmup Iteration  25: 3033766.091 ops/s
# Warmup Iteration  26: 3040489.170 ops/s
# Warmup Iteration  27: 3010698.613 ops/s
# Warmup Iteration  28: 3025904.966 ops/s
# Warmup Iteration  29: 2989961.395 ops/s
# Warmup Iteration  30: 3032971.791 ops/s
Iteration   1: 3028538.047 ops/s
Iteration   2: 3027615.831 ops/s
Iteration   3: 3034932.036 ops/s
Iteration   4: 3024529.619 ops/s
Iteration   5: 3030034.446 ops/s
Iteration   6: 3016138.657 ops/s
Iteration   7: 3046332.118 ops/s
Iteration   8: 3032307.158 ops/s
Iteration   9: 3045667.392 ops/s
Iteration  10: 3028624.287 ops/s
Iteration  11: 2990330.273 ops/s
Iteration  12: 3015152.578 ops/s
Iteration  13: 3030171.302 ops/s
Iteration  14: 3038243.436 ops/s
Iteration  15: 3044907.758 ops/s
Iteration  16: 2986368.294 ops/s
Iteration  17: 3042298.909 ops/s
Iteration  18: 3030628.105 ops/s
Iteration  19: 3041280.918 ops/s
Iteration  20: 3028318.381 ops/s
Iteration  21: 3046166.295 ops/s
Iteration  22: 2980055.248 ops/s
Iteration  23: 3035750.584 ops/s
Iteration  24: 3034194.107 ops/s
Iteration  25: 3025788.887 ops/s
Iteration  26: 3035299.040 ops/s
Iteration  27: 2957379.091 ops/s
Iteration  28: 3028763.880 ops/s
Iteration  29: 3043719.757 ops/s
Iteration  30: 3042753.154 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_collect":
  3026409.653 ±(99.9%) 14219.027 ops/s [Average]
  (min, avg, max) = (2957379.091, 3026409.653, 3046332.118), stdev = 21282.371
  CI (99.9%): [3012190.626, 3040628.680] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_collect  thrpt   30  3026409.653 ± 14219.027  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4928367.098 ops/s
# Warmup Iteration   2: 7540510.283 ops/s
# Warmup Iteration   3: 8769675.321 ops/s
# Warmup Iteration   4: 8732941.972 ops/s
# Warmup Iteration   5: 8805836.344 ops/s
# Warmup Iteration   6: 8308539.529 ops/s
# Warmup Iteration   7: 7721812.393 ops/s
# Warmup Iteration   8: 8724480.278 ops/s
# Warmup Iteration   9: 8817625.536 ops/s
# Warmup Iteration  10: 8790163.455 ops/s
# Warmup Iteration  11: 8711760.380 ops/s
# Warmup Iteration  12: 8804709.593 ops/s
# Warmup Iteration  13: 8798078.316 ops/s
# Warmup Iteration  14: 8783130.779 ops/s
# Warmup Iteration  15: 8781264.633 ops/s
# Warmup Iteration  16: 8795312.466 ops/s
# Warmup Iteration  17: 8773470.043 ops/s
# Warmup Iteration  18: 8816446.570 ops/s
# Warmup Iteration  19: 8827477.272 ops/s
# Warmup Iteration  20: 8788566.077 ops/s
# Warmup Iteration  21: 8773661.392 ops/s
# Warmup Iteration  22: 8790476.223 ops/s
# Warmup Iteration  23: 8816233.538 ops/s
# Warmup Iteration  24: 8765152.744 ops/s
# Warmup Iteration  25: 8747198.690 ops/s
# Warmup Iteration  26: 8697519.405 ops/s
# Warmup Iteration  27: 8787070.912 ops/s
# Warmup Iteration  28: 8784085.762 ops/s
# Warmup Iteration  29: 8776833.437 ops/s
# Warmup Iteration  30: 8802298.770 ops/s
Iteration   1: 8821654.542 ops/s
Iteration   2: 8734672.339 ops/s
Iteration   3: 8814092.889 ops/s
Iteration   4: 8720533.717 ops/s
Iteration   5: 8806575.612 ops/s
Iteration   6: 8770699.486 ops/s
Iteration   7: 8817911.243 ops/s
Iteration   8: 8813618.696 ops/s
Iteration   9: 8830518.055 ops/s
Iteration  10: 8513488.148 ops/s
Iteration  11: 8649492.632 ops/s
Iteration  12: 8813987.946 ops/s
Iteration  13: 8774066.046 ops/s
Iteration  14: 8828296.225 ops/s
Iteration  15: 8826709.426 ops/s
Iteration  16: 8780779.482 ops/s
Iteration  17: 8819083.085 ops/s
Iteration  18: 8795901.507 ops/s
Iteration  19: 8696121.916 ops/s
Iteration  20: 8816828.875 ops/s
Iteration  21: 8806769.962 ops/s
Iteration  22: 8793023.593 ops/s
Iteration  23: 8770125.369 ops/s
Iteration  24: 8639616.665 ops/s
Iteration  25: 8802866.082 ops/s
Iteration  26: 8712454.298 ops/s
Iteration  27: 8770849.116 ops/s
Iteration  28: 8770284.763 ops/s
Iteration  29: 8824180.114 ops/s
Iteration  30: 8773988.345 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_contains":
  8770306.339 ±(99.9%) 46991.581 ops/s [Average]
  (min, avg, max) = (8513488.148, 8770306.339, 8830518.055), stdev = 70334.792
  CI (99.9%): [8723314.758, 8817297.921] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_contains  thrpt   30  8770306.339 ± 46991.581  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4799892.432 ops/s
# Warmup Iteration   2: 16624062.631 ops/s
# Warmup Iteration   3: 16015963.350 ops/s
# Warmup Iteration   4: 17686844.686 ops/s
# Warmup Iteration   5: 17725682.251 ops/s
# Warmup Iteration   6: 17525509.677 ops/s
# Warmup Iteration   7: 17695019.547 ops/s
# Warmup Iteration   8: 17608247.872 ops/s
# Warmup Iteration   9: 17642646.265 ops/s
# Warmup Iteration  10: 17712066.012 ops/s
# Warmup Iteration  11: 17752466.157 ops/s
# Warmup Iteration  12: 17518276.328 ops/s
# Warmup Iteration  13: 17659705.747 ops/s
# Warmup Iteration  14: 17663004.790 ops/s
# Warmup Iteration  15: 17712643.360 ops/s
# Warmup Iteration  16: 17565327.100 ops/s
# Warmup Iteration  17: 17710581.820 ops/s
# Warmup Iteration  18: 17637185.443 ops/s
# Warmup Iteration  19: 17706331.535 ops/s
# Warmup Iteration  20: 17705298.245 ops/s
# Warmup Iteration  21: 17659099.166 ops/s
# Warmup Iteration  22: 17589892.105 ops/s
# Warmup Iteration  23: 17784501.425 ops/s
# Warmup Iteration  24: 17710926.039 ops/s
# Warmup Iteration  25: 17727271.438 ops/s
# Warmup Iteration  26: 17722715.613 ops/s
# Warmup Iteration  27: 17621140.652 ops/s
# Warmup Iteration  28: 17623481.309 ops/s
# Warmup Iteration  29: 17639430.356 ops/s
# Warmup Iteration  30: 17682627.738 ops/s
Iteration   1: 17436496.129 ops/s
Iteration   2: 17289115.365 ops/s
Iteration   3: 17636002.161 ops/s
Iteration   4: 17696383.015 ops/s
Iteration   5: 17760776.976 ops/s
Iteration   6: 17773549.297 ops/s
Iteration   7: 17661677.481 ops/s
Iteration   8: 17747784.846 ops/s
Iteration   9: 17740869.663 ops/s
Iteration  10: 17395622.295 ops/s
Iteration  11: 17480520.404 ops/s
Iteration  12: 17707988.067 ops/s
Iteration  13: 17669134.716 ops/s
Iteration  14: 17507882.919 ops/s
Iteration  15: 17682099.613 ops/s
Iteration  16: 17745219.592 ops/s
Iteration  17: 17630469.948 ops/s
Iteration  18: 17612753.847 ops/s
Iteration  19: 17638905.949 ops/s
Iteration  20: 17652853.164 ops/s
Iteration  21: 17796486.178 ops/s
Iteration  22: 17798742.026 ops/s
Iteration  23: 17709221.626 ops/s
Iteration  24: 17678225.764 ops/s
Iteration  25: 17576837.338 ops/s
Iteration  26: 17756077.019 ops/s
Iteration  27: 17781538.200 ops/s
Iteration  28: 17641732.901 ops/s
Iteration  29: 17594022.628 ops/s
Iteration  30: 17656249.741 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsAllArray":
  17648507.962 ±(99.9%) 82106.836 ops/s [Average]
  (min, avg, max) = (17289115.365, 17648507.962, 17798742.026), stdev = 122893.656
  CI (99.9%): [17566401.127, 17730614.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt         Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsAllArray  thrpt   30  17648507.962 ± 82106.836  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5177855.337 ops/s
# Warmup Iteration   2: 9030361.025 ops/s
# Warmup Iteration   3: 10554819.996 ops/s
# Warmup Iteration   4: 10621494.192 ops/s
# Warmup Iteration   5: 10648758.144 ops/s
# Warmup Iteration   6: 10577517.097 ops/s
# Warmup Iteration   7: 10622082.826 ops/s
# Warmup Iteration   8: 10633530.493 ops/s
# Warmup Iteration   9: 10660291.555 ops/s
# Warmup Iteration  10: 10630121.095 ops/s
# Warmup Iteration  11: 10722621.578 ops/s
# Warmup Iteration  12: 10691517.044 ops/s
# Warmup Iteration  13: 10604872.574 ops/s
# Warmup Iteration  14: 10688985.585 ops/s
# Warmup Iteration  15: 10632294.981 ops/s
# Warmup Iteration  16: 10626501.273 ops/s
# Warmup Iteration  17: 10587278.647 ops/s
# Warmup Iteration  18: 10600668.108 ops/s
# Warmup Iteration  19: 10473738.816 ops/s
# Warmup Iteration  20: 10610735.677 ops/s
# Warmup Iteration  21: 10669480.454 ops/s
# Warmup Iteration  22: 10666590.212 ops/s
# Warmup Iteration  23: 10663930.412 ops/s
# Warmup Iteration  24: 10630040.140 ops/s
# Warmup Iteration  25: 10639223.528 ops/s
# Warmup Iteration  26: 10641936.735 ops/s
# Warmup Iteration  27: 10646313.810 ops/s
# Warmup Iteration  28: 10713419.788 ops/s
# Warmup Iteration  29: 10747495.933 ops/s
# Warmup Iteration  30: 10744875.769 ops/s
Iteration   1: 10659752.768 ops/s
Iteration   2: 10790803.255 ops/s
Iteration   3: 10744225.764 ops/s
Iteration   4: 10490630.209 ops/s
Iteration   5: 10677530.866 ops/s
Iteration   6: 10553367.673 ops/s
Iteration   7: 10637045.345 ops/s
Iteration   8: 10757827.884 ops/s
Iteration   9: 10791396.218 ops/s
Iteration  10: 10697380.453 ops/s
Iteration  11: 10755021.220 ops/s
Iteration  12: 10742096.580 ops/s
Iteration  13: 10756379.836 ops/s
Iteration  14: 10774501.336 ops/s
Iteration  15: 10744266.757 ops/s
Iteration  16: 10812983.283 ops/s
Iteration  17: 10819426.243 ops/s
Iteration  18: 10759440.249 ops/s
Iteration  19: 10729725.588 ops/s
Iteration  20: 10741081.548 ops/s
Iteration  21: 10844342.165 ops/s
Iteration  22: 10602397.049 ops/s
Iteration  23: 10629829.216 ops/s
Iteration  24: 10780395.248 ops/s
Iteration  25: 10702406.075 ops/s
Iteration  26: 10717248.186 ops/s
Iteration  27: 10796609.981 ops/s
Iteration  28: 10796971.493 ops/s
Iteration  29: 10557950.508 ops/s
Iteration  30: 10690454.167 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsAllIterable":
  10718449.572 ±(99.9%) 57231.256 ops/s [Average]
  (min, avg, max) = (10490630.209, 10718449.572, 10844342.165), stdev = 85661.056
  CI (99.9%): [10661218.317, 10775680.828] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt         Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsAllIterable  thrpt   30  10718449.572 ± 57231.256  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2554409.012 ops/s
# Warmup Iteration   2: 5785183.878 ops/s
# Warmup Iteration   3: 4764458.791 ops/s
# Warmup Iteration   4: 5700671.732 ops/s
# Warmup Iteration   5: 5756714.366 ops/s
# Warmup Iteration   6: 5780291.292 ops/s
# Warmup Iteration   7: 5757606.445 ops/s
# Warmup Iteration   8: 5726183.755 ops/s
# Warmup Iteration   9: 5748195.060 ops/s
# Warmup Iteration  10: 5746461.981 ops/s
# Warmup Iteration  11: 5791910.348 ops/s
# Warmup Iteration  12: 5782901.289 ops/s
# Warmup Iteration  13: 5781845.985 ops/s
# Warmup Iteration  14: 5794516.771 ops/s
# Warmup Iteration  15: 5762054.016 ops/s
# Warmup Iteration  16: 5777487.119 ops/s
# Warmup Iteration  17: 5750462.818 ops/s
# Warmup Iteration  18: 5643275.972 ops/s
# Warmup Iteration  19: 5786320.843 ops/s
# Warmup Iteration  20: 5732558.196 ops/s
# Warmup Iteration  21: 5799770.630 ops/s
# Warmup Iteration  22: 5778527.302 ops/s
# Warmup Iteration  23: 5774091.601 ops/s
# Warmup Iteration  24: 5804547.814 ops/s
# Warmup Iteration  25: 5752495.667 ops/s
# Warmup Iteration  26: 5771950.931 ops/s
# Warmup Iteration  27: 5788906.775 ops/s
# Warmup Iteration  28: 5803905.909 ops/s
# Warmup Iteration  29: 5778952.984 ops/s
# Warmup Iteration  30: 5793907.921 ops/s
Iteration   1: 5807693.741 ops/s
Iteration   2: 5786677.266 ops/s
Iteration   3: 5776679.828 ops/s
Iteration   4: 5707665.542 ops/s
Iteration   5: 5695918.592 ops/s
Iteration   6: 5775710.095 ops/s
Iteration   7: 5763370.111 ops/s
Iteration   8: 5781197.769 ops/s
Iteration   9: 5699630.646 ops/s
Iteration  10: 5793073.632 ops/s
Iteration  11: 5616777.148 ops/s
Iteration  12: 5677662.812 ops/s
Iteration  13: 5775438.471 ops/s
Iteration  14: 5745638.847 ops/s
Iteration  15: 5672595.952 ops/s
Iteration  16: 5817815.714 ops/s
Iteration  17: 5781733.959 ops/s
Iteration  18: 5844425.103 ops/s
Iteration  19: 5758232.236 ops/s
Iteration  20: 5771851.594 ops/s
Iteration  21: 5787743.558 ops/s
Iteration  22: 5776647.784 ops/s
Iteration  23: 5778536.808 ops/s
Iteration  24: 5773130.168 ops/s
Iteration  25: 5791495.274 ops/s
Iteration  26: 5762285.789 ops/s
Iteration  27: 5757719.057 ops/s
Iteration  28: 5806011.494 ops/s
Iteration  29: 5767711.615 ops/s
Iteration  30: 5776374.219 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsAnyArray":
  5760914.827 ±(99.9%) 32114.261 ops/s [Average]
  (min, avg, max) = (5616777.148, 5760914.827, 5844425.103), stdev = 48067.117
  CI (99.9%): [5728800.567, 5793029.088] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsAnyArray  thrpt   30  5760914.827 ± 32114.261  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 583074.339 ops/s
# Warmup Iteration   2: 945630.166 ops/s
# Warmup Iteration   3: 1068320.782 ops/s
# Warmup Iteration   4: 1079771.007 ops/s
# Warmup Iteration   5: 1081026.534 ops/s
# Warmup Iteration   6: 890486.244 ops/s
# Warmup Iteration   7: 1086457.082 ops/s
# Warmup Iteration   8: 1083924.236 ops/s
# Warmup Iteration   9: 1084587.155 ops/s
# Warmup Iteration  10: 1081802.957 ops/s
# Warmup Iteration  11: 1081006.147 ops/s
# Warmup Iteration  12: 1083063.818 ops/s
# Warmup Iteration  13: 1080278.120 ops/s
# Warmup Iteration  14: 1085713.884 ops/s
# Warmup Iteration  15: 1072510.844 ops/s
# Warmup Iteration  16: 1082477.854 ops/s
# Warmup Iteration  17: 1080911.787 ops/s
# Warmup Iteration  18: 1081796.046 ops/s
# Warmup Iteration  19: 1078160.065 ops/s
# Warmup Iteration  20: 1080531.483 ops/s
# Warmup Iteration  21: 1056530.824 ops/s
# Warmup Iteration  22: 1078418.877 ops/s
# Warmup Iteration  23: 1078472.321 ops/s
# Warmup Iteration  24: 1077023.470 ops/s
# Warmup Iteration  25: 1067744.765 ops/s
# Warmup Iteration  26: 1083682.554 ops/s
# Warmup Iteration  27: 1081212.473 ops/s
# Warmup Iteration  28: 1082940.169 ops/s
# Warmup Iteration  29: 1079706.014 ops/s
# Warmup Iteration  30: 1077614.171 ops/s
Iteration   1: 1077275.510 ops/s
Iteration   2: 1084719.458 ops/s
Iteration   3: 1082028.598 ops/s
Iteration   4: 1085969.579 ops/s
Iteration   5: 1076227.038 ops/s
Iteration   6: 1058827.167 ops/s
Iteration   7: 1080036.876 ops/s
Iteration   8: 1076177.087 ops/s
Iteration   9: 1066770.265 ops/s
Iteration  10: 1083660.776 ops/s
Iteration  11: 1066666.747 ops/s
Iteration  12: 1082283.638 ops/s
Iteration  13: 1079536.533 ops/s
Iteration  14: 1082545.985 ops/s
Iteration  15: 1078301.188 ops/s
Iteration  16: 1079971.633 ops/s
Iteration  17: 1080081.114 ops/s
Iteration  18: 1083365.919 ops/s
Iteration  19: 1074299.137 ops/s
Iteration  20: 1077282.203 ops/s
Iteration  21: 1078260.067 ops/s
Iteration  22: 1079797.393 ops/s
Iteration  23: 1082716.335 ops/s
Iteration  24: 1076737.716 ops/s
Iteration  25: 1080917.916 ops/s
Iteration  26: 1084545.760 ops/s
Iteration  27: 1068812.828 ops/s
Iteration  28: 1076273.076 ops/s
Iteration  29: 1079291.012 ops/s
Iteration  30: 1064405.868 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsAnyIterable":
  1077592.814 ±(99.9%) 4351.662 ops/s [Average]
  (min, avg, max) = (1058827.167, 1077592.814, 1085969.579), stdev = 6513.363
  CI (99.9%): [1073241.152, 1081944.476] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1077592.814 ± 4351.662  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2539852.508 ops/s
# Warmup Iteration   2: 5434154.097 ops/s
# Warmup Iteration   3: 4572344.890 ops/s
# Warmup Iteration   4: 5402423.620 ops/s
# Warmup Iteration   5: 5466898.143 ops/s
# Warmup Iteration   6: 5469981.834 ops/s
# Warmup Iteration   7: 5451354.555 ops/s
# Warmup Iteration   8: 5354503.852 ops/s
# Warmup Iteration   9: 5422092.296 ops/s
# Warmup Iteration  10: 5450969.394 ops/s
# Warmup Iteration  11: 5417906.199 ops/s
# Warmup Iteration  12: 5414910.054 ops/s
# Warmup Iteration  13: 5396446.230 ops/s
# Warmup Iteration  14: 5422753.630 ops/s
# Warmup Iteration  15: 5421960.112 ops/s
# Warmup Iteration  16: 5448458.204 ops/s
# Warmup Iteration  17: 5459519.472 ops/s
# Warmup Iteration  18: 5446448.278 ops/s
# Warmup Iteration  19: 5443393.648 ops/s
# Warmup Iteration  20: 5442681.473 ops/s
# Warmup Iteration  21: 5412181.132 ops/s
# Warmup Iteration  22: 5468754.537 ops/s
# Warmup Iteration  23: 5474130.977 ops/s
# Warmup Iteration  24: 5439149.296 ops/s
# Warmup Iteration  25: 5451965.830 ops/s
# Warmup Iteration  26: 5451984.675 ops/s
# Warmup Iteration  27: 5417465.662 ops/s
# Warmup Iteration  28: 5448872.177 ops/s
# Warmup Iteration  29: 5412602.622 ops/s
# Warmup Iteration  30: 5425992.733 ops/s
Iteration   1: 5453598.747 ops/s
Iteration   2: 5412896.419 ops/s
Iteration   3: 5461729.674 ops/s
Iteration   4: 5465849.430 ops/s
Iteration   5: 5435120.903 ops/s
Iteration   6: 5426149.842 ops/s
Iteration   7: 5365157.525 ops/s
Iteration   8: 5306427.398 ops/s
Iteration   9: 5448692.422 ops/s
Iteration  10: 5310943.035 ops/s
Iteration  11: 5443190.071 ops/s
Iteration  12: 5427044.467 ops/s
Iteration  13: 5455337.113 ops/s
Iteration  14: 5433842.630 ops/s
Iteration  15: 5480181.075 ops/s
Iteration  16: 5474204.917 ops/s
Iteration  17: 5462496.622 ops/s
Iteration  18: 5432775.354 ops/s
Iteration  19: 5354808.996 ops/s
Iteration  20: 5451960.276 ops/s
Iteration  21: 5412049.558 ops/s
Iteration  22: 5416410.690 ops/s
Iteration  23: 5371471.715 ops/s
Iteration  24: 5440001.504 ops/s
Iteration  25: 5421882.673 ops/s
Iteration  26: 5468147.930 ops/s
Iteration  27: 5463617.163 ops/s
Iteration  28: 5426762.731 ops/s
Iteration  29: 5474170.529 ops/s
Iteration  30: 5364271.825 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsNoneArray":
  5425373.108 ±(99.9%) 30895.955 ops/s [Average]
  (min, avg, max) = (5306427.398, 5425373.108, 5480181.075), stdev = 46243.615
  CI (99.9%): [5394477.153, 5456269.063] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsNoneArray  thrpt   30  5425373.108 ± 30895.955  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 564128.567 ops/s
# Warmup Iteration   2: 895470.385 ops/s
# Warmup Iteration   3: 1010138.635 ops/s
# Warmup Iteration   4: 1010139.894 ops/s
# Warmup Iteration   5: 996098.292 ops/s
# Warmup Iteration   6: 850732.707 ops/s
# Warmup Iteration   7: 1001890.859 ops/s
# Warmup Iteration   8: 995124.822 ops/s
# Warmup Iteration   9: 998824.599 ops/s
# Warmup Iteration  10: 1012226.600 ops/s
# Warmup Iteration  11: 1004981.852 ops/s
# Warmup Iteration  12: 1012765.459 ops/s
# Warmup Iteration  13: 1012581.649 ops/s
# Warmup Iteration  14: 1005163.873 ops/s
# Warmup Iteration  15: 1015154.509 ops/s
# Warmup Iteration  16: 1013366.499 ops/s
# Warmup Iteration  17: 1013838.137 ops/s
# Warmup Iteration  18: 1015270.212 ops/s
# Warmup Iteration  19: 999745.891 ops/s
# Warmup Iteration  20: 1008450.523 ops/s
# Warmup Iteration  21: 1013204.920 ops/s
# Warmup Iteration  22: 1019280.211 ops/s
# Warmup Iteration  23: 1010428.008 ops/s
# Warmup Iteration  24: 1006517.284 ops/s
# Warmup Iteration  25: 1010654.824 ops/s
# Warmup Iteration  26: 1008432.486 ops/s
# Warmup Iteration  27: 1009003.502 ops/s
# Warmup Iteration  28: 1007832.852 ops/s
# Warmup Iteration  29: 1013897.567 ops/s
# Warmup Iteration  30: 1011689.508 ops/s
Iteration   1: 1006325.000 ops/s
Iteration   2: 1001806.597 ops/s
Iteration   3: 1018378.840 ops/s
Iteration   4: 1014668.154 ops/s
Iteration   5: 1005942.014 ops/s
Iteration   6: 1010142.988 ops/s
Iteration   7: 1014618.733 ops/s
Iteration   8: 1018448.317 ops/s
Iteration   9: 1013524.921 ops/s
Iteration  10: 1016089.408 ops/s
Iteration  11: 1013476.123 ops/s
Iteration  12: 1018572.636 ops/s
Iteration  13: 1012106.456 ops/s
Iteration  14: 998799.673 ops/s
Iteration  15: 1016827.089 ops/s
Iteration  16: 1018128.510 ops/s
Iteration  17: 1017874.106 ops/s
Iteration  18: 1011377.975 ops/s
Iteration  19: 997861.241 ops/s
Iteration  20: 1002042.782 ops/s
Iteration  21: 1011262.482 ops/s
Iteration  22: 998631.614 ops/s
Iteration  23: 1017608.433 ops/s
Iteration  24: 1005082.179 ops/s
Iteration  25: 1006250.189 ops/s
Iteration  26: 1014481.929 ops/s
Iteration  27: 1004437.562 ops/s
Iteration  28: 995008.886 ops/s
Iteration  29: 1018790.767 ops/s
Iteration  30: 1018441.710 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsNoneIterable":
  1010566.910 ±(99.9%) 4924.742 ops/s [Average]
  (min, avg, max) = (995008.886, 1010566.910, 1018790.767), stdev = 7371.123
  CI (99.9%): [1005642.168, 1015491.653] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  1010566.910 ± 4924.742  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1287425.389 ops/s
# Warmup Iteration   2: 2504110.628 ops/s
# Warmup Iteration   3: 2668076.899 ops/s
# Warmup Iteration   4: 2691362.157 ops/s
# Warmup Iteration   5: 2191255.913 ops/s
# Warmup Iteration   6: 2666061.640 ops/s
# Warmup Iteration   7: 2700561.157 ops/s
# Warmup Iteration   8: 2676283.375 ops/s
# Warmup Iteration   9: 2681368.153 ops/s
# Warmup Iteration  10: 2673751.719 ops/s
# Warmup Iteration  11: 2692214.317 ops/s
# Warmup Iteration  12: 2666220.373 ops/s
# Warmup Iteration  13: 2690278.684 ops/s
# Warmup Iteration  14: 2680940.798 ops/s
# Warmup Iteration  15: 2675898.205 ops/s
# Warmup Iteration  16: 2683922.676 ops/s
# Warmup Iteration  17: 2691675.901 ops/s
# Warmup Iteration  18: 2682004.034 ops/s
# Warmup Iteration  19: 2686403.986 ops/s
# Warmup Iteration  20: 2660690.330 ops/s
# Warmup Iteration  21: 2682476.782 ops/s
# Warmup Iteration  22: 2687187.773 ops/s
# Warmup Iteration  23: 2668147.614 ops/s
# Warmup Iteration  24: 2676934.490 ops/s
# Warmup Iteration  25: 2672543.093 ops/s
# Warmup Iteration  26: 2681794.295 ops/s
# Warmup Iteration  27: 2665276.741 ops/s
# Warmup Iteration  28: 2672945.321 ops/s
# Warmup Iteration  29: 2641554.987 ops/s
# Warmup Iteration  30: 2692498.830 ops/s
Iteration   1: 2577047.271 ops/s
Iteration   2: 2686625.192 ops/s
Iteration   3: 2643991.052 ops/s
Iteration   4: 2671308.034 ops/s
Iteration   5: 2702734.180 ops/s
Iteration   6: 2681936.159 ops/s
Iteration   7: 2667275.649 ops/s
Iteration   8: 2680751.822 ops/s
Iteration   9: 2698830.115 ops/s
Iteration  10: 2652982.383 ops/s
Iteration  11: 2647708.990 ops/s
Iteration  12: 2691254.528 ops/s
Iteration  13: 2672063.890 ops/s
Iteration  14: 2681440.586 ops/s
Iteration  15: 2697915.108 ops/s
Iteration  16: 2687875.972 ops/s
Iteration  17: 2631903.961 ops/s
Iteration  18: 2707536.893 ops/s
Iteration  19: 2679410.635 ops/s
Iteration  20: 2678952.130 ops/s
Iteration  21: 2692712.226 ops/s
Iteration  22: 2679893.645 ops/s
Iteration  23: 2678251.174 ops/s
Iteration  24: 2682463.736 ops/s
Iteration  25: 2699669.530 ops/s
Iteration  26: 2699469.766 ops/s
Iteration  27: 2685918.625 ops/s
Iteration  28: 2663785.428 ops/s
Iteration  29: 2683990.422 ops/s
Iteration  30: 2668294.166 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_count":
  2675799.776 ±(99.9%) 17249.849 ops/s [Average]
  (min, avg, max) = (2577047.271, 2675799.776, 2707536.893), stdev = 25818.764
  CI (99.9%): [2658549.926, 2693049.625] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_count  thrpt   30  2675799.776 ± 17249.849  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1802009.319 ops/s
# Warmup Iteration   2: 3339642.591 ops/s
# Warmup Iteration   3: 3530183.097 ops/s
# Warmup Iteration   4: 3561598.864 ops/s
# Warmup Iteration   5: 2950356.057 ops/s
# Warmup Iteration   6: 3558889.456 ops/s
# Warmup Iteration   7: 3567933.353 ops/s
# Warmup Iteration   8: 3572465.778 ops/s
# Warmup Iteration   9: 3561445.244 ops/s
# Warmup Iteration  10: 3565267.964 ops/s
# Warmup Iteration  11: 3530765.090 ops/s
# Warmup Iteration  12: 3553963.659 ops/s
# Warmup Iteration  13: 3565873.148 ops/s
# Warmup Iteration  14: 3567664.988 ops/s
# Warmup Iteration  15: 3530084.346 ops/s
# Warmup Iteration  16: 3562753.121 ops/s
# Warmup Iteration  17: 3572596.962 ops/s
# Warmup Iteration  18: 3556057.463 ops/s
# Warmup Iteration  19: 3551550.717 ops/s
# Warmup Iteration  20: 3548726.097 ops/s
# Warmup Iteration  21: 3494370.055 ops/s
# Warmup Iteration  22: 3581772.757 ops/s
# Warmup Iteration  23: 3583914.938 ops/s
# Warmup Iteration  24: 3561083.213 ops/s
# Warmup Iteration  25: 3556883.323 ops/s
# Warmup Iteration  26: 3570026.512 ops/s
# Warmup Iteration  27: 3545384.299 ops/s
# Warmup Iteration  28: 3580389.826 ops/s
# Warmup Iteration  29: 3523235.119 ops/s
# Warmup Iteration  30: 3564753.969 ops/s
Iteration   1: 3583140.516 ops/s
Iteration   2: 3569187.735 ops/s
Iteration   3: 3560608.474 ops/s
Iteration   4: 3516851.336 ops/s
Iteration   5: 3563970.652 ops/s
Iteration   6: 3583979.581 ops/s
Iteration   7: 3576737.910 ops/s
Iteration   8: 3563628.783 ops/s
Iteration   9: 3557670.448 ops/s
Iteration  10: 3517761.625 ops/s
Iteration  11: 3506351.042 ops/s
Iteration  12: 3560557.698 ops/s
Iteration  13: 3580038.650 ops/s
Iteration  14: 3563210.911 ops/s
Iteration  15: 3426960.019 ops/s
Iteration  16: 3554517.895 ops/s
Iteration  17: 3583920.131 ops/s
Iteration  18: 3540841.897 ops/s
Iteration  19: 3549149.590 ops/s
Iteration  20: 3502053.630 ops/s
Iteration  21: 3560775.059 ops/s
Iteration  22: 3553999.065 ops/s
Iteration  23: 3565479.456 ops/s
Iteration  24: 3559641.365 ops/s
Iteration  25: 3560111.409 ops/s
Iteration  26: 3564443.585 ops/s
Iteration  27: 3574604.641 ops/s
Iteration  28: 3562312.147 ops/s
Iteration  29: 3521405.880 ops/s
Iteration  30: 3577845.293 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_detectIfNone":
  3552058.547 ±(99.9%) 21777.501 ops/s [Average]
  (min, avg, max) = (3426960.019, 3552058.547, 3583979.581), stdev = 32595.540
  CI (99.9%): [3530281.047, 3573836.048] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_detectIfNone  thrpt   30  3552058.547 ± 21777.501  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2529366.195 ops/s
# Warmup Iteration   2: 5588634.203 ops/s
# Warmup Iteration   3: 5783073.904 ops/s
# Warmup Iteration   4: 4784383.466 ops/s
# Warmup Iteration   5: 5806483.727 ops/s
# Warmup Iteration   6: 5815487.195 ops/s
# Warmup Iteration   7: 5794324.541 ops/s
# Warmup Iteration   8: 5803627.647 ops/s
# Warmup Iteration   9: 5788467.925 ops/s
# Warmup Iteration  10: 5801019.235 ops/s
# Warmup Iteration  11: 5767976.028 ops/s
# Warmup Iteration  12: 5802867.767 ops/s
# Warmup Iteration  13: 5801108.315 ops/s
# Warmup Iteration  14: 5802602.302 ops/s
# Warmup Iteration  15: 5788238.782 ops/s
# Warmup Iteration  16: 5761700.362 ops/s
# Warmup Iteration  17: 5796119.915 ops/s
# Warmup Iteration  18: 5813862.448 ops/s
# Warmup Iteration  19: 5703210.662 ops/s
# Warmup Iteration  20: 5737588.523 ops/s
# Warmup Iteration  21: 5789588.541 ops/s
# Warmup Iteration  22: 5801932.759 ops/s
# Warmup Iteration  23: 5820069.093 ops/s
# Warmup Iteration  24: 5812199.261 ops/s
# Warmup Iteration  25: 5755263.642 ops/s
# Warmup Iteration  26: 5739231.280 ops/s
# Warmup Iteration  27: 5817853.764 ops/s
# Warmup Iteration  28: 5807457.995 ops/s
# Warmup Iteration  29: 5776155.600 ops/s
# Warmup Iteration  30: 5782593.488 ops/s
Iteration   1: 5808747.200 ops/s
Iteration   2: 5708510.527 ops/s
Iteration   3: 5828960.373 ops/s
Iteration   4: 5809916.210 ops/s
Iteration   5: 5801105.462 ops/s
Iteration   6: 5808287.870 ops/s
Iteration   7: 5808814.747 ops/s
Iteration   8: 5777087.088 ops/s
Iteration   9: 5699087.126 ops/s
Iteration  10: 5839852.535 ops/s
Iteration  11: 5803392.327 ops/s
Iteration  12: 5813793.009 ops/s
Iteration  13: 5831312.383 ops/s
Iteration  14: 5814425.277 ops/s
Iteration  15: 5818213.201 ops/s
Iteration  16: 5759383.266 ops/s
Iteration  17: 5837649.627 ops/s
Iteration  18: 5822634.686 ops/s
Iteration  19: 5849601.725 ops/s
Iteration  20: 5804841.662 ops/s
Iteration  21: 5831422.449 ops/s
Iteration  22: 5795933.280 ops/s
Iteration  23: 5751464.599 ops/s
Iteration  24: 5798515.845 ops/s
Iteration  25: 5762884.898 ops/s
Iteration  26: 5805131.919 ops/s
Iteration  27: 5839294.254 ops/s
Iteration  28: 5812576.011 ops/s
Iteration  29: 5841171.200 ops/s
Iteration  30: 5808343.107 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_forEach":
  5803078.462 ±(99.9%) 24044.923 ops/s [Average]
  (min, avg, max) = (5699087.126, 5803078.462, 5849601.725), stdev = 35989.312
  CI (99.9%): [5779033.539, 5827123.385] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_forEach  thrpt   30  5803078.462 ± 24044.923  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8820503.022 ops/s
# Warmup Iteration   2: 18748373.865 ops/s
# Warmup Iteration   3: 16322813.176 ops/s
# Warmup Iteration   4: 19579056.271 ops/s
# Warmup Iteration   5: 19522095.226 ops/s
# Warmup Iteration   6: 19623932.397 ops/s
# Warmup Iteration   7: 19735387.820 ops/s
# Warmup Iteration   8: 19536724.339 ops/s
# Warmup Iteration   9: 19644355.390 ops/s
# Warmup Iteration  10: 19529198.309 ops/s
# Warmup Iteration  11: 19631520.677 ops/s
# Warmup Iteration  12: 19614513.172 ops/s
# Warmup Iteration  13: 19595653.558 ops/s
# Warmup Iteration  14: 19660405.392 ops/s
# Warmup Iteration  15: 19409474.162 ops/s
# Warmup Iteration  16: 19650257.868 ops/s
# Warmup Iteration  17: 19645369.680 ops/s
# Warmup Iteration  18: 19581168.159 ops/s
# Warmup Iteration  19: 19617984.995 ops/s
# Warmup Iteration  20: 19641150.813 ops/s
# Warmup Iteration  21: 19631210.695 ops/s
# Warmup Iteration  22: 19610139.661 ops/s
# Warmup Iteration  23: 19609703.207 ops/s
# Warmup Iteration  24: 19680283.081 ops/s
# Warmup Iteration  25: 19641579.269 ops/s
# Warmup Iteration  26: 19415807.890 ops/s
# Warmup Iteration  27: 19567019.631 ops/s
# Warmup Iteration  28: 19605220.110 ops/s
# Warmup Iteration  29: 19475350.083 ops/s
# Warmup Iteration  30: 19663889.158 ops/s
Iteration   1: 19625853.433 ops/s
Iteration   2: 19515881.577 ops/s
Iteration   3: 19694094.925 ops/s
Iteration   4: 19515838.073 ops/s
Iteration   5: 19667494.019 ops/s
Iteration   6: 19605558.301 ops/s
Iteration   7: 19637949.384 ops/s
Iteration   8: 19611408.622 ops/s
Iteration   9: 19694925.430 ops/s
Iteration  10: 19619036.098 ops/s
Iteration  11: 19640316.864 ops/s
Iteration  12: 19345152.415 ops/s
Iteration  13: 19567657.416 ops/s
Iteration  14: 19752613.127 ops/s
Iteration  15: 19625444.492 ops/s
Iteration  16: 19583282.015 ops/s
Iteration  17: 19633475.352 ops/s
Iteration  18: 19509243.983 ops/s
Iteration  19: 19735800.893 ops/s
Iteration  20: 19678307.414 ops/s
Iteration  21: 19216625.734 ops/s
Iteration  22: 19712345.937 ops/s
Iteration  23: 19573718.123 ops/s
Iteration  24: 19657293.910 ops/s
Iteration  25: 19660667.357 ops/s
Iteration  26: 19702719.293 ops/s
Iteration  27: 19552840.156 ops/s
Iteration  28: 19642396.200 ops/s
Iteration  29: 19606533.464 ops/s
Iteration  30: 19609115.647 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_injectInto":
  19606452.989 ±(99.9%) 72943.678 ops/s [Average]
  (min, avg, max) = (19216625.734, 19606452.989, 19752613.127), stdev = 109178.672
  CI (99.9%): [19533509.310, 19679396.667] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt         Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_injectInto  thrpt   30  19606452.989 ± 72943.678  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1353962.838 ops/s
# Warmup Iteration   2: 2216139.487 ops/s
# Warmup Iteration   3: 2587743.847 ops/s
# Warmup Iteration   4: 2587422.096 ops/s
# Warmup Iteration   5: 2606279.836 ops/s
# Warmup Iteration   6: 2590040.331 ops/s
# Warmup Iteration   7: 2578830.991 ops/s
# Warmup Iteration   8: 2604516.902 ops/s
# Warmup Iteration   9: 2595263.479 ops/s
# Warmup Iteration  10: 2604500.183 ops/s
# Warmup Iteration  11: 2599429.172 ops/s
# Warmup Iteration  12: 2577695.011 ops/s
# Warmup Iteration  13: 2567661.426 ops/s
# Warmup Iteration  14: 2605429.919 ops/s
# Warmup Iteration  15: 2604078.206 ops/s
# Warmup Iteration  16: 2593619.358 ops/s
# Warmup Iteration  17: 2598344.527 ops/s
# Warmup Iteration  18: 2611395.899 ops/s
# Warmup Iteration  19: 2594786.658 ops/s
# Warmup Iteration  20: 2605690.790 ops/s
# Warmup Iteration  21: 2611781.857 ops/s
# Warmup Iteration  22: 2574508.489 ops/s
# Warmup Iteration  23: 2594117.138 ops/s
# Warmup Iteration  24: 2608001.693 ops/s
# Warmup Iteration  25: 2601036.070 ops/s
# Warmup Iteration  26: 2584534.670 ops/s
# Warmup Iteration  27: 2601551.139 ops/s
# Warmup Iteration  28: 2617195.015 ops/s
# Warmup Iteration  29: 2603674.005 ops/s
# Warmup Iteration  30: 2612719.743 ops/s
Iteration   1: 2613420.561 ops/s
Iteration   2: 2615609.188 ops/s
Iteration   3: 2605082.646 ops/s
Iteration   4: 2588330.861 ops/s
Iteration   5: 2614312.542 ops/s
Iteration   6: 2612879.568 ops/s
Iteration   7: 2579035.486 ops/s
Iteration   8: 2600301.302 ops/s
Iteration   9: 2598245.204 ops/s
Iteration  10: 2595087.123 ops/s
Iteration  11: 2597228.777 ops/s
Iteration  12: 2563171.201 ops/s
Iteration  13: 2549085.938 ops/s
Iteration  14: 2586089.037 ops/s
Iteration  15: 2611723.401 ops/s
Iteration  16: 2593827.711 ops/s
Iteration  17: 2600169.717 ops/s
Iteration  18: 2610783.188 ops/s
Iteration  19: 2579481.229 ops/s
Iteration  20: 2607886.442 ops/s
Iteration  21: 2601370.138 ops/s
Iteration  22: 2595525.837 ops/s
Iteration  23: 2592220.550 ops/s
Iteration  24: 2551235.054 ops/s
Iteration  25: 2604576.481 ops/s
Iteration  26: 2536893.684 ops/s
Iteration  27: 2595226.740 ops/s
Iteration  28: 2599428.168 ops/s
Iteration  29: 2525451.523 ops/s
Iteration  30: 2600310.430 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_isEmpty":
  2590799.657 ±(99.9%) 15621.039 ops/s [Average]
  (min, avg, max) = (2525451.523, 2590799.657, 2615609.188), stdev = 23380.838
  CI (99.9%): [2575178.618, 2606420.697] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  2590799.657 ± 15621.039  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 697309.767 ops/s
# Warmup Iteration   2: 711916.768 ops/s
# Warmup Iteration   3: 851864.834 ops/s
# Warmup Iteration   4: 913815.930 ops/s
# Warmup Iteration   5: 921410.732 ops/s
# Warmup Iteration   6: 902768.435 ops/s
# Warmup Iteration   7: 917320.019 ops/s
# Warmup Iteration   8: 913829.807 ops/s
# Warmup Iteration   9: 915850.709 ops/s
# Warmup Iteration  10: 911712.894 ops/s
# Warmup Iteration  11: 914695.723 ops/s
# Warmup Iteration  12: 913011.304 ops/s
# Warmup Iteration  13: 867918.069 ops/s
# Warmup Iteration  14: 814992.383 ops/s
# Warmup Iteration  15: 918435.157 ops/s
# Warmup Iteration  16: 917142.723 ops/s
# Warmup Iteration  17: 975876.775 ops/s
# Warmup Iteration  18: 974033.499 ops/s
# Warmup Iteration  19: 976551.385 ops/s
# Warmup Iteration  20: 961248.405 ops/s
# Warmup Iteration  21: 975599.512 ops/s
# Warmup Iteration  22: 979496.248 ops/s
# Warmup Iteration  23: 975676.661 ops/s
# Warmup Iteration  24: 976194.169 ops/s
# Warmup Iteration  25: 960016.719 ops/s
# Warmup Iteration  26: 966413.286 ops/s
# Warmup Iteration  27: 959616.900 ops/s
# Warmup Iteration  28: 968032.402 ops/s
# Warmup Iteration  29: 975801.814 ops/s
# Warmup Iteration  30: 966184.883 ops/s
Iteration   1: 974832.550 ops/s
Iteration   2: 976415.212 ops/s
Iteration   3: 979355.480 ops/s
Iteration   4: 980871.684 ops/s
Iteration   5: 974569.415 ops/s
Iteration   6: 978285.764 ops/s
Iteration   7: 979835.036 ops/s
Iteration   8: 978653.637 ops/s
Iteration   9: 975090.576 ops/s
Iteration  10: 976424.489 ops/s
Iteration  11: 964215.304 ops/s
Iteration  12: 977033.785 ops/s
Iteration  13: 976299.119 ops/s
Iteration  14: 981127.326 ops/s
Iteration  15: 974181.653 ops/s
Iteration  16: 973604.412 ops/s
Iteration  17: 973779.429 ops/s
Iteration  18: 970669.244 ops/s
Iteration  19: 969670.424 ops/s
Iteration  20: 979972.635 ops/s
Iteration  21: 969867.769 ops/s
Iteration  22: 979865.640 ops/s
Iteration  23: 979595.330 ops/s
Iteration  24: 979718.769 ops/s
Iteration  25: 976967.938 ops/s
Iteration  26: 957892.760 ops/s
Iteration  27: 966973.060 ops/s
Iteration  28: 973154.981 ops/s
Iteration  29: 974289.655 ops/s
Iteration  30: 976222.122 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_iterator_throws":
  974981.173 ±(99.9%) 3510.520 ops/s [Average]
  (min, avg, max) = (957892.760, 974981.173, 981127.326), stdev = 5254.381
  CI (99.9%): [971470.653, 978491.693] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score      Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_iterator_throws  thrpt   30  974981.173 ± 3510.520  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 745728.326 ops/s
# Warmup Iteration   2: 774563.226 ops/s
# Warmup Iteration   3: 1020886.598 ops/s
# Warmup Iteration   4: 1012615.139 ops/s
# Warmup Iteration   5: 1012372.282 ops/s
# Warmup Iteration   6: 1016804.243 ops/s
# Warmup Iteration   7: 1007417.750 ops/s
# Warmup Iteration   8: 1016446.436 ops/s
# Warmup Iteration   9: 1018430.686 ops/s
# Warmup Iteration  10: 1017486.415 ops/s
# Warmup Iteration  11: 869929.249 ops/s
# Warmup Iteration  12: 996713.136 ops/s
# Warmup Iteration  13: 1010112.137 ops/s
# Warmup Iteration  14: 1022152.412 ops/s
# Warmup Iteration  15: 1017328.616 ops/s
# Warmup Iteration  16: 1022558.002 ops/s
# Warmup Iteration  17: 1091160.817 ops/s
# Warmup Iteration  18: 1085521.875 ops/s
# Warmup Iteration  19: 1090006.681 ops/s
# Warmup Iteration  20: 1088327.980 ops/s
# Warmup Iteration  21: 1083806.032 ops/s
# Warmup Iteration  22: 1086638.639 ops/s
# Warmup Iteration  23: 1080387.907 ops/s
# Warmup Iteration  24: 1080609.493 ops/s
# Warmup Iteration  25: 1082602.642 ops/s
# Warmup Iteration  26: 1085580.876 ops/s
# Warmup Iteration  27: 1082692.766 ops/s
# Warmup Iteration  28: 1086575.350 ops/s
# Warmup Iteration  29: 1088390.071 ops/s
# Warmup Iteration  30: 1079907.252 ops/s
Iteration   1: 1078993.487 ops/s
Iteration   2: 1089088.049 ops/s
Iteration   3: 1085132.397 ops/s
Iteration   4: 1087247.047 ops/s
Iteration   5: 1088755.310 ops/s
Iteration   6: 1088747.911 ops/s
Iteration   7: 1087922.011 ops/s
Iteration   8: 1090603.194 ops/s
Iteration   9: 1083083.640 ops/s
Iteration  10: 1070179.617 ops/s
Iteration  11: 1090118.520 ops/s
Iteration  12: 1086574.284 ops/s
Iteration  13: 1062463.209 ops/s
Iteration  14: 1081706.975 ops/s
Iteration  15: 1085220.793 ops/s
Iteration  16: 1088236.195 ops/s
Iteration  17: 1082152.007 ops/s
Iteration  18: 1080962.696 ops/s
Iteration  19: 1086523.747 ops/s
Iteration  20: 1070004.749 ops/s
Iteration  21: 1087216.251 ops/s
Iteration  22: 1068835.737 ops/s
Iteration  23: 1087655.944 ops/s
Iteration  24: 1064517.004 ops/s
Iteration  25: 1090114.489 ops/s
Iteration  26: 1092434.016 ops/s
Iteration  27: 1078229.369 ops/s
Iteration  28: 1089858.726 ops/s
Iteration  29: 1088938.606 ops/s
Iteration  30: 1079548.697 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_iterator_throws_emptyList":
  1083035.489 ±(99.9%) 5453.126 ops/s [Average]
  (min, avg, max) = (1062463.209, 1083035.489, 1092434.016), stdev = 8161.982
  CI (99.9%): [1077582.364, 1088488.615] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1083035.489 ± 5453.126  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 681380.061 ops/s
# Warmup Iteration   2: 692583.905 ops/s
# Warmup Iteration   3: 864821.078 ops/s
# Warmup Iteration   4: 904584.370 ops/s
# Warmup Iteration   5: 895412.500 ops/s
# Warmup Iteration   6: 895358.440 ops/s
# Warmup Iteration   7: 897687.048 ops/s
# Warmup Iteration   8: 902783.710 ops/s
# Warmup Iteration   9: 895424.307 ops/s
# Warmup Iteration  10: 897007.062 ops/s
# Warmup Iteration  11: 891809.733 ops/s
# Warmup Iteration  12: 892775.925 ops/s
# Warmup Iteration  13: 750108.501 ops/s
# Warmup Iteration  14: 908203.813 ops/s
# Warmup Iteration  15: 905428.145 ops/s
# Warmup Iteration  16: 906458.897 ops/s
# Warmup Iteration  17: 955034.021 ops/s
# Warmup Iteration  18: 952211.695 ops/s
# Warmup Iteration  19: 954398.622 ops/s
# Warmup Iteration  20: 959566.589 ops/s
# Warmup Iteration  21: 955968.257 ops/s
# Warmup Iteration  22: 957401.575 ops/s
# Warmup Iteration  23: 954430.612 ops/s
# Warmup Iteration  24: 958947.155 ops/s
# Warmup Iteration  25: 955360.030 ops/s
# Warmup Iteration  26: 952571.744 ops/s
# Warmup Iteration  27: 954787.633 ops/s
# Warmup Iteration  28: 953197.974 ops/s
# Warmup Iteration  29: 951447.836 ops/s
# Warmup Iteration  30: 953855.820 ops/s
Iteration   1: 942322.324 ops/s
Iteration   2: 937967.986 ops/s
Iteration   3: 960629.940 ops/s
Iteration   4: 955758.756 ops/s
Iteration   5: 953447.438 ops/s
Iteration   6: 954773.097 ops/s
Iteration   7: 958841.840 ops/s
Iteration   8: 956836.323 ops/s
Iteration   9: 941214.554 ops/s
Iteration  10: 959626.626 ops/s
Iteration  11: 959492.603 ops/s
Iteration  12: 939357.093 ops/s
Iteration  13: 938247.790 ops/s
Iteration  14: 957300.760 ops/s
Iteration  15: 961541.600 ops/s
Iteration  16: 957165.545 ops/s
Iteration  17: 958103.217 ops/s
Iteration  18: 953632.871 ops/s
Iteration  19: 937560.179 ops/s
Iteration  20: 951485.250 ops/s
Iteration  21: 952645.978 ops/s
Iteration  22: 954465.524 ops/s
Iteration  23: 956479.373 ops/s
Iteration  24: 960632.007 ops/s
Iteration  25: 960625.743 ops/s
Iteration  26: 957445.945 ops/s
Iteration  27: 952734.886 ops/s
Iteration  28: 955226.054 ops/s
Iteration  29: 959320.131 ops/s
Iteration  30: 957880.649 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  953425.403 ±(99.9%) 5079.944 ops/s [Average]
  (min, avg, max) = (937560.179, 953425.403, 961541.600), stdev = 7603.421
  CI (99.9%): [948345.459, 958505.346] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                     Mode  Cnt       Score      Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  953425.403 ± 5079.944  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 670364.204 ops/s
# Warmup Iteration   2: 698794.691 ops/s
# Warmup Iteration   3: 946620.909 ops/s
# Warmup Iteration   4: 947188.939 ops/s
# Warmup Iteration   5: 947511.745 ops/s
# Warmup Iteration   6: 949659.994 ops/s
# Warmup Iteration   7: 945732.174 ops/s
# Warmup Iteration   8: 949905.864 ops/s
# Warmup Iteration   9: 951685.589 ops/s
# Warmup Iteration  10: 942706.760 ops/s
# Warmup Iteration  11: 849487.208 ops/s
# Warmup Iteration  12: 871569.970 ops/s
# Warmup Iteration  13: 949254.991 ops/s
# Warmup Iteration  14: 943656.192 ops/s
# Warmup Iteration  15: 945083.404 ops/s
# Warmup Iteration  16: 949824.736 ops/s
# Warmup Iteration  17: 1007498.032 ops/s
# Warmup Iteration  18: 1004766.095 ops/s
# Warmup Iteration  19: 1009038.529 ops/s
# Warmup Iteration  20: 1007791.358 ops/s
# Warmup Iteration  21: 1007298.530 ops/s
# Warmup Iteration  22: 1003466.503 ops/s
# Warmup Iteration  23: 1004183.829 ops/s
# Warmup Iteration  24: 1005128.332 ops/s
# Warmup Iteration  25: 1006321.521 ops/s
# Warmup Iteration  26: 1008198.405 ops/s
# Warmup Iteration  27: 1007743.400 ops/s
# Warmup Iteration  28: 1000982.627 ops/s
# Warmup Iteration  29: 1009538.264 ops/s
# Warmup Iteration  30: 994559.017 ops/s
Iteration   1: 1002566.211 ops/s
Iteration   2: 1008427.062 ops/s
Iteration   3: 1006559.792 ops/s
Iteration   4: 1009841.002 ops/s
Iteration   5: 1009446.675 ops/s
Iteration   6: 1004955.236 ops/s
Iteration   7: 1009018.800 ops/s
Iteration   8: 1002890.267 ops/s
Iteration   9: 1007419.961 ops/s
Iteration  10: 1009100.121 ops/s
Iteration  11: 1005144.116 ops/s
Iteration  12: 1003707.453 ops/s
Iteration  13: 1006144.348 ops/s
Iteration  14: 1006586.450 ops/s
Iteration  15: 1006432.400 ops/s
Iteration  16: 1001804.831 ops/s
Iteration  17: 1008164.746 ops/s
Iteration  18: 992315.414 ops/s
Iteration  19: 1010639.098 ops/s
Iteration  20: 1006203.055 ops/s
Iteration  21: 1012262.613 ops/s
Iteration  22: 1001390.761 ops/s
Iteration  23: 1004950.166 ops/s
Iteration  24: 1012221.126 ops/s
Iteration  25: 1012871.396 ops/s
Iteration  26: 1004743.181 ops/s
Iteration  27: 1008344.445 ops/s
Iteration  28: 1007510.485 ops/s
Iteration  29: 1005749.089 ops/s
Iteration  30: 1001924.666 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  1006311.166 ±(99.9%) 2730.557 ops/s [Average]
  (min, avg, max) = (992315.414, 1006311.166, 1012871.396), stdev = 4086.969
  CI (99.9%): [1003580.609, 1009041.722] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                                    Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  1006311.166 ± 2730.557  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 730151.571 ops/s
# Warmup Iteration   2: 772034.885 ops/s
# Warmup Iteration   3: 1010780.730 ops/s
# Warmup Iteration   4: 1010648.465 ops/s
# Warmup Iteration   5: 997712.516 ops/s
# Warmup Iteration   6: 1004430.873 ops/s
# Warmup Iteration   7: 999096.889 ops/s
# Warmup Iteration   8: 1000048.405 ops/s
# Warmup Iteration   9: 1007988.582 ops/s
# Warmup Iteration  10: 1012836.949 ops/s
# Warmup Iteration  11: 841320.328 ops/s
# Warmup Iteration  12: 1011657.793 ops/s
# Warmup Iteration  13: 1008110.594 ops/s
# Warmup Iteration  14: 1009734.885 ops/s
# Warmup Iteration  15: 1013005.889 ops/s
# Warmup Iteration  16: 1010348.618 ops/s
# Warmup Iteration  17: 1068140.915 ops/s
# Warmup Iteration  18: 1068034.785 ops/s
# Warmup Iteration  19: 1070277.015 ops/s
# Warmup Iteration  20: 1067372.645 ops/s
# Warmup Iteration  21: 1070794.441 ops/s
# Warmup Iteration  22: 1067427.023 ops/s
# Warmup Iteration  23: 1066771.575 ops/s
# Warmup Iteration  24: 1069491.511 ops/s
# Warmup Iteration  25: 1071475.425 ops/s
# Warmup Iteration  26: 1065349.475 ops/s
# Warmup Iteration  27: 1065025.916 ops/s
# Warmup Iteration  28: 1071521.556 ops/s
# Warmup Iteration  29: 1066862.489 ops/s
# Warmup Iteration  30: 1067008.808 ops/s
Iteration   1: 1066069.959 ops/s
Iteration   2: 1070636.387 ops/s
Iteration   3: 1067620.113 ops/s
Iteration   4: 1068044.784 ops/s
Iteration   5: 1069759.623 ops/s
Iteration   6: 1068766.902 ops/s
Iteration   7: 1069235.438 ops/s
Iteration   8: 1070285.592 ops/s
Iteration   9: 1068920.086 ops/s
Iteration  10: 1067700.953 ops/s
Iteration  11: 1066273.323 ops/s
Iteration  12: 1067700.658 ops/s
Iteration  13: 1062902.764 ops/s
Iteration  14: 1070374.527 ops/s
Iteration  15: 1066141.918 ops/s
Iteration  16: 1067633.641 ops/s
Iteration  17: 1061449.434 ops/s
Iteration  18: 1068526.831 ops/s
Iteration  19: 1072429.330 ops/s
Iteration  20: 1068841.809 ops/s
Iteration  21: 1067982.095 ops/s
Iteration  22: 1065053.590 ops/s
Iteration  23: 1063027.711 ops/s
Iteration  24: 1066617.078 ops/s
Iteration  25: 1069492.278 ops/s
Iteration  26: 1066443.914 ops/s
Iteration  27: 1069224.450 ops/s
Iteration  28: 1069006.480 ops/s
Iteration  29: 1066071.794 ops/s
Iteration  30: 1069645.342 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1067729.293 ±(99.9%) 1620.898 ops/s [Average]
  (min, avg, max) = (1061449.434, 1067729.293, 1072429.330), stdev = 2426.083
  CI (99.9%): [1066108.396, 1069350.191] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                                    Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1067729.293 ± 1620.898  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 575248.208 ops/s
# Warmup Iteration   2: 1259095.482 ops/s
# Warmup Iteration   3: 1281129.698 ops/s
# Warmup Iteration   4: 1054228.563 ops/s
# Warmup Iteration   5: 1275421.845 ops/s
# Warmup Iteration   6: 1270110.898 ops/s
# Warmup Iteration   7: 1272972.649 ops/s
# Warmup Iteration   8: 1278299.025 ops/s
# Warmup Iteration   9: 1269182.538 ops/s
# Warmup Iteration  10: 1257668.119 ops/s
# Warmup Iteration  11: 1269850.516 ops/s
# Warmup Iteration  12: 1279999.040 ops/s
# Warmup Iteration  13: 1270845.161 ops/s
# Warmup Iteration  14: 1283027.236 ops/s
# Warmup Iteration  15: 1270712.364 ops/s
# Warmup Iteration  16: 1280208.327 ops/s
# Warmup Iteration  17: 1285973.656 ops/s
# Warmup Iteration  18: 1283446.244 ops/s
# Warmup Iteration  19: 1280080.696 ops/s
# Warmup Iteration  20: 1275653.520 ops/s
# Warmup Iteration  21: 1277748.248 ops/s
# Warmup Iteration  22: 1272210.242 ops/s
# Warmup Iteration  23: 1272378.384 ops/s
# Warmup Iteration  24: 1268926.088 ops/s
# Warmup Iteration  25: 1276710.325 ops/s
# Warmup Iteration  26: 1284017.590 ops/s
# Warmup Iteration  27: 1278866.541 ops/s
# Warmup Iteration  28: 1273608.978 ops/s
# Warmup Iteration  29: 1275381.115 ops/s
# Warmup Iteration  30: 1271320.090 ops/s
Iteration   1: 1270343.078 ops/s
Iteration   2: 1276352.213 ops/s
Iteration   3: 1269271.826 ops/s
Iteration   4: 1276436.273 ops/s
Iteration   5: 1275834.914 ops/s
Iteration   6: 1270289.667 ops/s
Iteration   7: 1272520.499 ops/s
Iteration   8: 1274090.913 ops/s
Iteration   9: 1267887.219 ops/s
Iteration  10: 1267182.583 ops/s
Iteration  11: 1279561.998 ops/s
Iteration  12: 1263830.358 ops/s
Iteration  13: 1272452.912 ops/s
Iteration  14: 1273734.422 ops/s
Iteration  15: 1289631.499 ops/s
Iteration  16: 1259501.575 ops/s
Iteration  17: 1262961.603 ops/s
Iteration  18: 1277870.424 ops/s
Iteration  19: 1273536.477 ops/s
Iteration  20: 1272358.344 ops/s
Iteration  21: 1280859.257 ops/s
Iteration  22: 1277084.917 ops/s
Iteration  23: 1271823.039 ops/s
Iteration  24: 1270939.542 ops/s
Iteration  25: 1274027.951 ops/s
Iteration  26: 1272569.751 ops/s
Iteration  27: 1270186.420 ops/s
Iteration  28: 1269177.096 ops/s
Iteration  29: 1264297.754 ops/s
Iteration  30: 1283174.049 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_makeString":
  1272659.619 ±(99.9%) 4145.340 ops/s [Average]
  (min, avg, max) = (1259501.575, 1272659.619, 1289631.499), stdev = 6204.550
  CI (99.9%): [1268514.279, 1276804.959] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_makeString  thrpt   30  1272659.619 ± 4145.340  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 163245987.930 ops/s
# Warmup Iteration   2: 301340671.609 ops/s
# Warmup Iteration   3: 259188076.587 ops/s
# Warmup Iteration   4: 306598394.608 ops/s
# Warmup Iteration   5: 305178446.973 ops/s
# Warmup Iteration   6: 305637296.951 ops/s
# Warmup Iteration   7: 305090052.005 ops/s
# Warmup Iteration   8: 305342671.373 ops/s
# Warmup Iteration   9: 301327421.469 ops/s
# Warmup Iteration  10: 301236745.343 ops/s
# Warmup Iteration  11: 301216907.989 ops/s
# Warmup Iteration  12: 304053649.993 ops/s
# Warmup Iteration  13: 303328484.623 ops/s
# Warmup Iteration  14: 304299790.948 ops/s
# Warmup Iteration  15: 304794151.004 ops/s
# Warmup Iteration  16: 305294528.913 ops/s
# Warmup Iteration  17: 303513728.347 ops/s
# Warmup Iteration  18: 303476925.940 ops/s
# Warmup Iteration  19: 302905040.071 ops/s
# Warmup Iteration  20: 303123588.959 ops/s
# Warmup Iteration  21: 303700086.393 ops/s
# Warmup Iteration  22: 304063533.854 ops/s
# Warmup Iteration  23: 303170543.003 ops/s
# Warmup Iteration  24: 302806355.767 ops/s
# Warmup Iteration  25: 304407788.420 ops/s
# Warmup Iteration  26: 303270053.642 ops/s
# Warmup Iteration  27: 302440275.016 ops/s
# Warmup Iteration  28: 303583996.173 ops/s
# Warmup Iteration  29: 303841997.431 ops/s
# Warmup Iteration  30: 304608734.262 ops/s
Iteration   1: 302488291.021 ops/s
Iteration   2: 305384706.674 ops/s
Iteration   3: 304440854.994 ops/s
Iteration   4: 302759422.812 ops/s
Iteration   5: 305138156.426 ops/s
Iteration   6: 303822258.556 ops/s
Iteration   7: 303295059.093 ops/s
Iteration   8: 304476708.497 ops/s
Iteration   9: 305169978.506 ops/s
Iteration  10: 303689830.922 ops/s
Iteration  11: 304834763.720 ops/s
Iteration  12: 303664835.036 ops/s
Iteration  13: 304243411.715 ops/s
Iteration  14: 302799532.722 ops/s
Iteration  15: 302299615.941 ops/s
Iteration  16: 303801610.848 ops/s
Iteration  17: 302897388.412 ops/s
Iteration  18: 302060195.336 ops/s
Iteration  19: 303579942.131 ops/s
Iteration  20: 304065642.059 ops/s
Iteration  21: 304224377.683 ops/s
Iteration  22: 304784749.047 ops/s
Iteration  23: 304764561.150 ops/s
Iteration  24: 303827015.040 ops/s
Iteration  25: 302343244.248 ops/s
Iteration  26: 304722248.574 ops/s
Iteration  27: 303350518.379 ops/s
Iteration  28: 303782138.231 ops/s
Iteration  29: 305438927.935 ops/s
Iteration  30: 305761970.998 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_newCollection":
  303930398.557 ±(99.9%) 678378.319 ops/s [Average]
  (min, avg, max) = (302060195.336, 303930398.557, 305761970.998), stdev = 1015364.810
  CI (99.9%): [303252020.237, 304608776.876] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt          Score        Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_newCollection  thrpt   30  303930398.557 ± 678378.319  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2805377.112 ops/s
# Warmup Iteration   2: 5154645.736 ops/s
# Warmup Iteration   3: 5808921.460 ops/s
# Warmup Iteration   4: 5966469.810 ops/s
# Warmup Iteration   5: 5892287.785 ops/s
# Warmup Iteration   6: 5958931.659 ops/s
# Warmup Iteration   7: 5943171.935 ops/s
# Warmup Iteration   8: 5955522.283 ops/s
# Warmup Iteration   9: 5985552.927 ops/s
# Warmup Iteration  10: 5938528.217 ops/s
# Warmup Iteration  11: 5875702.009 ops/s
# Warmup Iteration  12: 5902886.521 ops/s
# Warmup Iteration  13: 5960353.580 ops/s
# Warmup Iteration  14: 5970953.308 ops/s
# Warmup Iteration  15: 5954397.298 ops/s
# Warmup Iteration  16: 5950806.392 ops/s
# Warmup Iteration  17: 5971520.925 ops/s
# Warmup Iteration  18: 5987886.475 ops/s
# Warmup Iteration  19: 5976785.266 ops/s
# Warmup Iteration  20: 5954945.835 ops/s
# Warmup Iteration  21: 5906309.188 ops/s
# Warmup Iteration  22: 5917757.882 ops/s
# Warmup Iteration  23: 5958489.745 ops/s
# Warmup Iteration  24: 5936454.482 ops/s
# Warmup Iteration  25: 5940772.840 ops/s
# Warmup Iteration  26: 5890468.816 ops/s
# Warmup Iteration  27: 5983863.030 ops/s
# Warmup Iteration  28: 5986051.046 ops/s
# Warmup Iteration  29: 5967261.971 ops/s
# Warmup Iteration  30: 5968095.848 ops/s
Iteration   1: 5981668.935 ops/s
Iteration   2: 5973211.008 ops/s
Iteration   3: 5972889.231 ops/s
Iteration   4: 5945966.423 ops/s
Iteration   5: 5962302.462 ops/s
Iteration   6: 5975903.436 ops/s
Iteration   7: 5983061.412 ops/s
Iteration   8: 5996306.771 ops/s
Iteration   9: 5964714.218 ops/s
Iteration  10: 5996869.171 ops/s
Iteration  11: 5947914.165 ops/s
Iteration  12: 5958881.723 ops/s
Iteration  13: 5990571.299 ops/s
Iteration  14: 5954133.009 ops/s
Iteration  15: 5984680.777 ops/s
Iteration  16: 5992707.160 ops/s
Iteration  17: 5963836.238 ops/s
Iteration  18: 5955550.757 ops/s
Iteration  19: 5894778.040 ops/s
Iteration  20: 5877718.647 ops/s
Iteration  21: 5894047.527 ops/s
Iteration  22: 5962864.434 ops/s
Iteration  23: 5868994.046 ops/s
Iteration  24: 5978505.103 ops/s
Iteration  25: 5975754.890 ops/s
Iteration  26: 5994425.816 ops/s
Iteration  27: 5968917.337 ops/s
Iteration  28: 5962077.832 ops/s
Iteration  29: 5831102.291 ops/s
Iteration  30: 5964326.185 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_newCollectionWith":
  5955822.678 ±(99.9%) 27451.930 ops/s [Average]
  (min, avg, max) = (5831102.291, 5955822.678, 5996869.171), stdev = 41088.760
  CI (99.9%): [5928370.748, 5983274.608] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_newCollectionWith  thrpt   30  5955822.678 ± 27451.930  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1815338.619 ops/s
# Warmup Iteration   2: 3867136.377 ops/s
# Warmup Iteration   3: 3267129.198 ops/s
# Warmup Iteration   4: 3867730.297 ops/s
# Warmup Iteration   5: 3886049.794 ops/s
# Warmup Iteration   6: 3901542.872 ops/s
# Warmup Iteration   7: 3841066.907 ops/s
# Warmup Iteration   8: 3881024.689 ops/s
# Warmup Iteration   9: 3878728.503 ops/s
# Warmup Iteration  10: 3898035.864 ops/s
# Warmup Iteration  11: 3875673.094 ops/s
# Warmup Iteration  12: 3894048.316 ops/s
# Warmup Iteration  13: 3862911.987 ops/s
# Warmup Iteration  14: 3889742.128 ops/s
# Warmup Iteration  15: 3857870.223 ops/s
# Warmup Iteration  16: 3886454.951 ops/s
# Warmup Iteration  17: 3879462.246 ops/s
# Warmup Iteration  18: 3854147.590 ops/s
# Warmup Iteration  19: 3885007.583 ops/s
# Warmup Iteration  20: 3869384.311 ops/s
# Warmup Iteration  21: 3866366.024 ops/s
# Warmup Iteration  22: 3853530.071 ops/s
# Warmup Iteration  23: 3827215.728 ops/s
# Warmup Iteration  24: 3873778.216 ops/s
# Warmup Iteration  25: 3883551.725 ops/s
# Warmup Iteration  26: 3891335.041 ops/s
# Warmup Iteration  27: 3852763.438 ops/s
# Warmup Iteration  28: 3887485.155 ops/s
# Warmup Iteration  29: 3860950.082 ops/s
# Warmup Iteration  30: 3842272.229 ops/s
Iteration   1: 3898734.739 ops/s
Iteration   2: 3898363.304 ops/s
Iteration   3: 3908033.055 ops/s
Iteration   4: 3879649.949 ops/s
Iteration   5: 3897651.196 ops/s
Iteration   6: 3875315.584 ops/s
Iteration   7: 3879459.970 ops/s
Iteration   8: 3889823.933 ops/s
Iteration   9: 3896707.726 ops/s
Iteration  10: 3875595.585 ops/s
Iteration  11: 3851565.041 ops/s
Iteration  12: 3876072.668 ops/s
Iteration  13: 3866837.762 ops/s
Iteration  14: 3868657.471 ops/s
Iteration  15: 3882766.617 ops/s
Iteration  16: 3891941.839 ops/s
Iteration  17: 3883184.617 ops/s
Iteration  18: 3898786.089 ops/s
Iteration  19: 3905305.521 ops/s
Iteration  20: 3891504.018 ops/s
Iteration  21: 3883190.942 ops/s
Iteration  22: 3890160.321 ops/s
Iteration  23: 3905233.983 ops/s
Iteration  24: 3872122.315 ops/s
Iteration  25: 3911788.008 ops/s
Iteration  26: 3918108.537 ops/s
Iteration  27: 3895413.893 ops/s
Iteration  28: 3881897.950 ops/s
Iteration  29: 3900576.829 ops/s
Iteration  30: 3896300.215 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_noneSatisfy":
  3889024.989 ±(99.9%) 9907.135 ops/s [Average]
  (min, avg, max) = (3851565.041, 3889024.989, 3918108.537), stdev = 14828.535
  CI (99.9%): [3879117.854, 3898932.125] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_noneSatisfy  thrpt   30  3889024.989 ± 9907.135  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4141809.851 ops/s
# Warmup Iteration   2: 6902295.206 ops/s
# Warmup Iteration   3: 8227774.539 ops/s
# Warmup Iteration   4: 8279851.383 ops/s
# Warmup Iteration   5: 8205328.640 ops/s
# Warmup Iteration   6: 8254430.868 ops/s
# Warmup Iteration   7: 8333606.754 ops/s
# Warmup Iteration   8: 8302184.745 ops/s
# Warmup Iteration   9: 8274229.830 ops/s
# Warmup Iteration  10: 8296456.735 ops/s
# Warmup Iteration  11: 8236451.242 ops/s
# Warmup Iteration  12: 8307153.112 ops/s
# Warmup Iteration  13: 8300655.702 ops/s
# Warmup Iteration  14: 8322336.443 ops/s
# Warmup Iteration  15: 8274074.125 ops/s
# Warmup Iteration  16: 8254691.001 ops/s
# Warmup Iteration  17: 8224356.663 ops/s
# Warmup Iteration  18: 8212786.375 ops/s
# Warmup Iteration  19: 8271289.870 ops/s
# Warmup Iteration  20: 8221928.264 ops/s
# Warmup Iteration  21: 8214511.136 ops/s
# Warmup Iteration  22: 8280296.106 ops/s
# Warmup Iteration  23: 8297833.363 ops/s
# Warmup Iteration  24: 8225316.330 ops/s
# Warmup Iteration  25: 8244596.020 ops/s
# Warmup Iteration  26: 8311561.020 ops/s
# Warmup Iteration  27: 8299780.937 ops/s
# Warmup Iteration  28: 8274804.304 ops/s
# Warmup Iteration  29: 8278338.558 ops/s
# Warmup Iteration  30: 8227240.840 ops/s
Iteration   1: 8265545.626 ops/s
Iteration   2: 8300551.727 ops/s
Iteration   3: 8268814.900 ops/s
Iteration   4: 8308932.982 ops/s
Iteration   5: 8299685.057 ops/s
Iteration   6: 8244784.984 ops/s
Iteration   7: 8253168.939 ops/s
Iteration   8: 8279378.128 ops/s
Iteration   9: 8305100.659 ops/s
Iteration  10: 8303038.654 ops/s
Iteration  11: 8289222.771 ops/s
Iteration  12: 8210866.188 ops/s
Iteration  13: 8269446.729 ops/s
Iteration  14: 8312190.953 ops/s
Iteration  15: 8290304.913 ops/s
Iteration  16: 8277880.945 ops/s
Iteration  17: 8162471.205 ops/s
Iteration  18: 8312225.132 ops/s
Iteration  19: 8296231.128 ops/s
Iteration  20: 8285659.105 ops/s
Iteration  21: 8272145.229 ops/s
Iteration  22: 8299818.406 ops/s
Iteration  23: 8321137.445 ops/s
Iteration  24: 8291140.325 ops/s
Iteration  25: 8338697.244 ops/s
Iteration  26: 8310111.292 ops/s
Iteration  27: 8282176.189 ops/s
Iteration  28: 8267186.943 ops/s
Iteration  29: 8282664.390 ops/s
Iteration  30: 8297673.956 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_notEmpty":
  8283275.071 ±(99.9%) 22592.710 ops/s [Average]
  (min, avg, max) = (8162471.205, 8283275.071, 8338697.244), stdev = 33815.708
  CI (99.9%): [8260682.361, 8305867.782] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_notEmpty  thrpt   30  8283275.071 ± 22592.710  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1727048.982 ops/s
# Warmup Iteration   2: 3888805.898 ops/s
# Warmup Iteration   3: 3255625.814 ops/s
# Warmup Iteration   4: 3879248.653 ops/s
# Warmup Iteration   5: 3901886.202 ops/s
# Warmup Iteration   6: 3882541.812 ops/s
# Warmup Iteration   7: 3899658.651 ops/s
# Warmup Iteration   8: 3917530.964 ops/s
# Warmup Iteration   9: 3873685.457 ops/s
# Warmup Iteration  10: 3880583.535 ops/s
# Warmup Iteration  11: 3918430.253 ops/s
# Warmup Iteration  12: 3901624.094 ops/s
# Warmup Iteration  13: 3909995.571 ops/s
# Warmup Iteration  14: 3852226.459 ops/s
# Warmup Iteration  15: 3902004.201 ops/s
# Warmup Iteration  16: 3910384.683 ops/s
# Warmup Iteration  17: 3908031.585 ops/s
# Warmup Iteration  18: 3880187.905 ops/s
# Warmup Iteration  19: 3851185.733 ops/s
# Warmup Iteration  20: 3912639.188 ops/s
# Warmup Iteration  21: 3840705.666 ops/s
# Warmup Iteration  22: 3894654.570 ops/s
# Warmup Iteration  23: 3888789.558 ops/s
# Warmup Iteration  24: 3866958.514 ops/s
# Warmup Iteration  25: 3908963.191 ops/s
# Warmup Iteration  26: 3906977.154 ops/s
# Warmup Iteration  27: 3911544.988 ops/s
# Warmup Iteration  28: 3874558.376 ops/s
# Warmup Iteration  29: 3915532.579 ops/s
# Warmup Iteration  30: 3909731.069 ops/s
Iteration   1: 3908526.623 ops/s
Iteration   2: 3912633.980 ops/s
Iteration   3: 3912839.712 ops/s
Iteration   4: 3912338.373 ops/s
Iteration   5: 3866574.755 ops/s
Iteration   6: 3909993.322 ops/s
Iteration   7: 3894100.932 ops/s
Iteration   8: 3906470.299 ops/s
Iteration   9: 3894178.086 ops/s
Iteration  10: 3913766.483 ops/s
Iteration  11: 3819319.063 ops/s
Iteration  12: 3901452.609 ops/s
Iteration  13: 3911505.269 ops/s
Iteration  14: 3886438.197 ops/s
Iteration  15: 3892909.778 ops/s
Iteration  16: 3927362.070 ops/s
Iteration  17: 3886022.551 ops/s
Iteration  18: 3921303.806 ops/s
Iteration  19: 3908034.204 ops/s
Iteration  20: 3903820.648 ops/s
Iteration  21: 3927320.373 ops/s
Iteration  22: 3899472.992 ops/s
Iteration  23: 3907824.889 ops/s
Iteration  24: 3902518.823 ops/s
Iteration  25: 3904592.250 ops/s
Iteration  26: 3893971.296 ops/s
Iteration  27: 3893492.890 ops/s
Iteration  28: 3910150.296 ops/s
Iteration  29: 3876980.221 ops/s
Iteration  30: 3895169.877 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_reduce":
  3900036.156 ±(99.9%) 13586.159 ops/s [Average]
  (min, avg, max) = (3819319.063, 3900036.156, 3927362.070), stdev = 20335.124
  CI (99.9%): [3886449.997, 3913622.314] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_reduce  thrpt   30  3900036.156 ± 13586.159  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1474399.998 ops/s
# Warmup Iteration   2: 3173758.657 ops/s
# Warmup Iteration   3: 2680783.048 ops/s
# Warmup Iteration   4: 3182285.332 ops/s
# Warmup Iteration   5: 3232160.056 ops/s
# Warmup Iteration   6: 3163523.418 ops/s
# Warmup Iteration   7: 3225735.796 ops/s
# Warmup Iteration   8: 3198686.315 ops/s
# Warmup Iteration   9: 3226925.311 ops/s
# Warmup Iteration  10: 3224961.538 ops/s
# Warmup Iteration  11: 3236598.686 ops/s
# Warmup Iteration  12: 3233454.938 ops/s
# Warmup Iteration  13: 3194251.772 ops/s
# Warmup Iteration  14: 3218721.354 ops/s
# Warmup Iteration  15: 3234724.347 ops/s
# Warmup Iteration  16: 3224507.461 ops/s
# Warmup Iteration  17: 3212672.393 ops/s
# Warmup Iteration  18: 3215031.445 ops/s
# Warmup Iteration  19: 3212857.771 ops/s
# Warmup Iteration  20: 3219456.915 ops/s
# Warmup Iteration  21: 3207249.990 ops/s
# Warmup Iteration  22: 3215130.702 ops/s
# Warmup Iteration  23: 3224481.756 ops/s
# Warmup Iteration  24: 3230392.514 ops/s
# Warmup Iteration  25: 3232295.027 ops/s
# Warmup Iteration  26: 3224048.615 ops/s
# Warmup Iteration  27: 3230462.740 ops/s
# Warmup Iteration  28: 3225252.761 ops/s
# Warmup Iteration  29: 3210978.414 ops/s
# Warmup Iteration  30: 3204057.220 ops/s
Iteration   1: 3192844.056 ops/s
Iteration   2: 3183405.158 ops/s
Iteration   3: 3218350.888 ops/s
Iteration   4: 3240539.500 ops/s
Iteration   5: 3183841.727 ops/s
Iteration   6: 3218609.356 ops/s
Iteration   7: 3207171.591 ops/s
Iteration   8: 3224801.723 ops/s
Iteration   9: 3245878.693 ops/s
Iteration  10: 3216091.712 ops/s
Iteration  11: 3230569.351 ops/s
Iteration  12: 3231797.999 ops/s
Iteration  13: 3237429.996 ops/s
Iteration  14: 3219203.777 ops/s
Iteration  15: 3227990.499 ops/s
Iteration  16: 3209937.043 ops/s
Iteration  17: 3198507.695 ops/s
Iteration  18: 3193098.091 ops/s
Iteration  19: 3219852.512 ops/s
Iteration  20: 3237486.220 ops/s
Iteration  21: 3193854.557 ops/s
Iteration  22: 3230625.012 ops/s
Iteration  23: 3236691.111 ops/s
Iteration  24: 3223383.108 ops/s
Iteration  25: 3236455.107 ops/s
Iteration  26: 3226991.749 ops/s
Iteration  27: 3219870.727 ops/s
Iteration  28: 3182262.191 ops/s
Iteration  29: 3237107.292 ops/s
Iteration  30: 3190800.024 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_reduceIfEmpty":
  3217181.615 ±(99.9%) 12792.815 ops/s [Average]
  (min, avg, max) = (3182262.191, 3217181.615, 3245878.693), stdev = 19147.685
  CI (99.9%): [3204388.800, 3229974.431] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  3217181.615 ± 12792.815  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 738521.882 ops/s
# Warmup Iteration   2: 792670.923 ops/s
# Warmup Iteration   3: 1013935.243 ops/s
# Warmup Iteration   4: 1006548.760 ops/s
# Warmup Iteration   5: 1004922.410 ops/s
# Warmup Iteration   6: 1013451.975 ops/s
# Warmup Iteration   7: 1014671.703 ops/s
# Warmup Iteration   8: 1011037.397 ops/s
# Warmup Iteration   9: 1005347.211 ops/s
# Warmup Iteration  10: 1016939.689 ops/s
# Warmup Iteration  11: 845746.640 ops/s
# Warmup Iteration  12: 1010412.753 ops/s
# Warmup Iteration  13: 1007687.070 ops/s
# Warmup Iteration  14: 1008159.596 ops/s
# Warmup Iteration  15: 1009902.636 ops/s
# Warmup Iteration  16: 1009295.169 ops/s
# Warmup Iteration  17: 1057997.927 ops/s
# Warmup Iteration  18: 1048082.658 ops/s
# Warmup Iteration  19: 1072002.020 ops/s
# Warmup Iteration  20: 1072338.021 ops/s
# Warmup Iteration  21: 1058560.713 ops/s
# Warmup Iteration  22: 1070008.855 ops/s
# Warmup Iteration  23: 1075323.999 ops/s
# Warmup Iteration  24: 1070296.074 ops/s
# Warmup Iteration  25: 1070366.596 ops/s
# Warmup Iteration  26: 1061090.710 ops/s
# Warmup Iteration  27: 1067161.189 ops/s
# Warmup Iteration  28: 1072176.147 ops/s
# Warmup Iteration  29: 1070377.862 ops/s
# Warmup Iteration  30: 1065198.014 ops/s
Iteration   1: 1065277.105 ops/s
Iteration   2: 1063670.264 ops/s
Iteration   3: 1077262.796 ops/s
Iteration   4: 1065986.234 ops/s
Iteration   5: 1053309.245 ops/s
Iteration   6: 1067793.106 ops/s
Iteration   7: 1066018.995 ops/s
Iteration   8: 1060567.009 ops/s
Iteration   9: 1071530.863 ops/s
Iteration  10: 1052463.537 ops/s
Iteration  11: 1067039.350 ops/s
Iteration  12: 1048355.072 ops/s
Iteration  13: 1048282.929 ops/s
Iteration  14: 1053222.011 ops/s
Iteration  15: 1069997.790 ops/s
Iteration  16: 1067463.506 ops/s
Iteration  17: 1069517.594 ops/s
Iteration  18: 1052330.813 ops/s
Iteration  19: 1067468.771 ops/s
Iteration  20: 1068705.467 ops/s
Iteration  21: 1068777.047 ops/s
Iteration  22: 1071158.638 ops/s
Iteration  23: 1066155.290 ops/s
Iteration  24: 1068873.257 ops/s
Iteration  25: 1070682.407 ops/s
Iteration  26: 1070218.679 ops/s
Iteration  27: 1071685.539 ops/s
Iteration  28: 1070255.748 ops/s
Iteration  29: 1070366.014 ops/s
Iteration  30: 1069884.887 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1065143.999 ±(99.9%) 5118.007 ops/s [Average]
  (min, avg, max) = (1048282.929, 1065143.999, 1077262.796), stdev = 7660.392
  CI (99.9%): [1060025.992, 1070262.005] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1065143.999 ± 5118.007  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3138723.758 ops/s
# Warmup Iteration   2: 9047027.732 ops/s
# Warmup Iteration   3: 7788606.786 ops/s
# Warmup Iteration   4: 9224324.175 ops/s
# Warmup Iteration   5: 9208787.088 ops/s
# Warmup Iteration   6: 9220410.131 ops/s
# Warmup Iteration   7: 9217548.415 ops/s
# Warmup Iteration   8: 9226469.489 ops/s
# Warmup Iteration   9: 9246544.127 ops/s
# Warmup Iteration  10: 9230636.973 ops/s
# Warmup Iteration  11: 9259667.365 ops/s
# Warmup Iteration  12: 9223498.060 ops/s
# Warmup Iteration  13: 9255722.547 ops/s
# Warmup Iteration  14: 9218745.854 ops/s
# Warmup Iteration  15: 9198602.305 ops/s
# Warmup Iteration  16: 9199249.825 ops/s
# Warmup Iteration  17: 9211089.116 ops/s
# Warmup Iteration  18: 9233729.161 ops/s
# Warmup Iteration  19: 9209890.100 ops/s
# Warmup Iteration  20: 9211203.334 ops/s
# Warmup Iteration  21: 9234983.984 ops/s
# Warmup Iteration  22: 9215362.703 ops/s
# Warmup Iteration  23: 9242240.711 ops/s
# Warmup Iteration  24: 9112629.082 ops/s
# Warmup Iteration  25: 9152605.809 ops/s
# Warmup Iteration  26: 9237463.742 ops/s
# Warmup Iteration  27: 9237264.970 ops/s
# Warmup Iteration  28: 9208647.416 ops/s
# Warmup Iteration  29: 9213800.394 ops/s
# Warmup Iteration  30: 9150192.731 ops/s
Iteration   1: 9208605.588 ops/s
Iteration   2: 9219067.759 ops/s
Iteration   3: 9252359.814 ops/s
Iteration   4: 9236462.410 ops/s
Iteration   5: 9229796.807 ops/s
Iteration   6: 9250623.735 ops/s
Iteration   7: 9231825.047 ops/s
Iteration   8: 9239640.044 ops/s
Iteration   9: 9234109.253 ops/s
Iteration  10: 9199669.975 ops/s
Iteration  11: 9217498.967 ops/s
Iteration  12: 9208587.092 ops/s
Iteration  13: 9300756.162 ops/s
Iteration  14: 9181344.827 ops/s
Iteration  15: 9195587.099 ops/s
Iteration  16: 9186661.482 ops/s
Iteration  17: 9197497.175 ops/s
Iteration  18: 9134602.833 ops/s
Iteration  19: 9221979.195 ops/s
Iteration  20: 9108478.657 ops/s
Iteration  21: 9152174.168 ops/s
Iteration  22: 9074797.505 ops/s
Iteration  23: 9223011.972 ops/s
Iteration  24: 9233732.789 ops/s
Iteration  25: 9203627.994 ops/s
Iteration  26: 9210354.397 ops/s
Iteration  27: 9211638.705 ops/s
Iteration  28: 9121335.310 ops/s
Iteration  29: 9221508.449 ops/s
Iteration  30: 9194418.590 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_reject":
  9203391.793 ±(99.9%) 30929.273 ops/s [Average]
  (min, avg, max) = (9074797.505, 9203391.793, 9300756.162), stdev = 46293.483
  CI (99.9%): [9172462.520, 9234321.066] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_reject  thrpt   30  9203391.793 ± 30929.273  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14755850.533 ops/s
# Warmup Iteration   2: 30349248.878 ops/s
# Warmup Iteration   3: 25319096.299 ops/s
# Warmup Iteration   4: 30640524.256 ops/s
# Warmup Iteration   5: 30570739.341 ops/s
# Warmup Iteration   6: 30393376.324 ops/s
# Warmup Iteration   7: 30523207.057 ops/s
# Warmup Iteration   8: 30704663.314 ops/s
# Warmup Iteration   9: 30588761.117 ops/s
# Warmup Iteration  10: 30638645.029 ops/s
# Warmup Iteration  11: 30514153.892 ops/s
# Warmup Iteration  12: 30641185.924 ops/s
# Warmup Iteration  13: 30301380.579 ops/s
# Warmup Iteration  14: 30368987.975 ops/s
# Warmup Iteration  15: 30677944.496 ops/s
# Warmup Iteration  16: 30619897.218 ops/s
# Warmup Iteration  17: 30662174.443 ops/s
# Warmup Iteration  18: 30581409.896 ops/s
# Warmup Iteration  19: 30547105.243 ops/s
# Warmup Iteration  20: 30334391.882 ops/s
# Warmup Iteration  21: 30476925.030 ops/s
# Warmup Iteration  22: 30546989.509 ops/s
# Warmup Iteration  23: 30409422.453 ops/s
# Warmup Iteration  24: 30761785.393 ops/s
# Warmup Iteration  25: 30601869.224 ops/s
# Warmup Iteration  26: 30573095.715 ops/s
# Warmup Iteration  27: 30514674.529 ops/s
# Warmup Iteration  28: 30626333.991 ops/s
# Warmup Iteration  29: 30629917.372 ops/s
# Warmup Iteration  30: 30537128.460 ops/s
Iteration   1: 30527824.425 ops/s
Iteration   2: 30729880.662 ops/s
Iteration   3: 30601158.960 ops/s
Iteration   4: 30356916.001 ops/s
Iteration   5: 30475719.863 ops/s
Iteration   6: 30408007.614 ops/s
Iteration   7: 30564867.473 ops/s
Iteration   8: 30681515.053 ops/s
Iteration   9: 30714262.499 ops/s
Iteration  10: 30587266.698 ops/s
Iteration  11: 30544006.887 ops/s
Iteration  12: 30623318.948 ops/s
Iteration  13: 30598623.625 ops/s
Iteration  14: 30693181.887 ops/s
Iteration  15: 30589885.146 ops/s
Iteration  16: 30676898.498 ops/s
Iteration  17: 30689416.520 ops/s
Iteration  18: 30613757.040 ops/s
Iteration  19: 30494682.543 ops/s
Iteration  20: 30353352.713 ops/s
Iteration  21: 30485402.489 ops/s
Iteration  22: 30588247.873 ops/s
Iteration  23: 30384251.400 ops/s
Iteration  24: 30579280.131 ops/s
Iteration  25: 30590809.740 ops/s
Iteration  26: 30592990.212 ops/s
Iteration  27: 30570503.585 ops/s
Iteration  28: 30480288.150 ops/s
Iteration  29: 30620309.343 ops/s
Iteration  30: 30680651.733 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_remove":
  30569909.257 ±(99.9%) 68898.164 ops/s [Average]
  (min, avg, max) = (30353352.713, 30569909.257, 30729880.662), stdev = 103123.537
  CI (99.9%): [30501011.093, 30638807.421] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt         Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_remove  thrpt   30  30569909.257 ± 68898.164  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4608171.923 ops/s
# Warmup Iteration   2: 9905398.482 ops/s
# Warmup Iteration   3: 8600685.594 ops/s
# Warmup Iteration   4: 10302684.073 ops/s
# Warmup Iteration   5: 10346671.727 ops/s
# Warmup Iteration   6: 10335120.494 ops/s
# Warmup Iteration   7: 10167304.023 ops/s
# Warmup Iteration   8: 10296533.767 ops/s
# Warmup Iteration   9: 10328166.620 ops/s
# Warmup Iteration  10: 10299925.061 ops/s
# Warmup Iteration  11: 10302604.935 ops/s
# Warmup Iteration  12: 10318596.210 ops/s
# Warmup Iteration  13: 10293871.149 ops/s
# Warmup Iteration  14: 10334099.218 ops/s
# Warmup Iteration  15: 10290850.065 ops/s
# Warmup Iteration  16: 10341100.931 ops/s
# Warmup Iteration  17: 10346452.837 ops/s
# Warmup Iteration  18: 10330746.145 ops/s
# Warmup Iteration  19: 10174055.966 ops/s
# Warmup Iteration  20: 10295763.580 ops/s
# Warmup Iteration  21: 10276190.136 ops/s
# Warmup Iteration  22: 10315065.716 ops/s
# Warmup Iteration  23: 10296640.055 ops/s
# Warmup Iteration  24: 10314454.627 ops/s
# Warmup Iteration  25: 10286149.322 ops/s
# Warmup Iteration  26: 10166784.842 ops/s
# Warmup Iteration  27: 10277420.871 ops/s
# Warmup Iteration  28: 10115837.058 ops/s
# Warmup Iteration  29: 10313901.351 ops/s
# Warmup Iteration  30: 10272876.980 ops/s
Iteration   1: 10335020.283 ops/s
Iteration   2: 10337212.109 ops/s
Iteration   3: 10309415.603 ops/s
Iteration   4: 10269339.324 ops/s
Iteration   5: 10308306.187 ops/s
Iteration   6: 10320837.991 ops/s
Iteration   7: 10315410.558 ops/s
Iteration   8: 10332824.846 ops/s
Iteration   9: 10304133.047 ops/s
Iteration  10: 10390942.562 ops/s
Iteration  11: 10338151.894 ops/s
Iteration  12: 10327251.796 ops/s
Iteration  13: 10257668.710 ops/s
Iteration  14: 10331078.037 ops/s
Iteration  15: 10132464.011 ops/s
Iteration  16: 10330301.663 ops/s
Iteration  17: 10360036.324 ops/s
Iteration  18: 10344851.761 ops/s
Iteration  19: 10250465.498 ops/s
Iteration  20: 10133325.242 ops/s
Iteration  21: 10146282.791 ops/s
Iteration  22: 10325417.574 ops/s
Iteration  23: 10334894.416 ops/s
Iteration  24: 10343656.559 ops/s
Iteration  25: 10163422.051 ops/s
Iteration  26: 10255158.631 ops/s
Iteration  27: 10094430.685 ops/s
Iteration  28: 10268657.835 ops/s
Iteration  29: 10285416.444 ops/s
Iteration  30: 10326975.998 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_removeAll":
  10285778.348 ±(99.9%) 51110.601 ops/s [Average]
  (min, avg, max) = (10094430.685, 10285778.348, 10390942.562), stdev = 76499.947
  CI (99.9%): [10234667.747, 10336888.949] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt         Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_removeAll  thrpt   30  10285778.348 ± 51110.601  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1975614.340 ops/s
# Warmup Iteration   2: 4653056.613 ops/s
# Warmup Iteration   3: 3904281.123 ops/s
# Warmup Iteration   4: 4670398.608 ops/s
# Warmup Iteration   5: 4690699.363 ops/s
# Warmup Iteration   6: 4688323.982 ops/s
# Warmup Iteration   7: 4669281.840 ops/s
# Warmup Iteration   8: 4609517.587 ops/s
# Warmup Iteration   9: 4670408.502 ops/s
# Warmup Iteration  10: 4699310.437 ops/s
# Warmup Iteration  11: 4701803.354 ops/s
# Warmup Iteration  12: 4710310.532 ops/s
# Warmup Iteration  13: 4700098.694 ops/s
# Warmup Iteration  14: 4681357.907 ops/s
# Warmup Iteration  15: 4689073.158 ops/s
# Warmup Iteration  16: 4687655.054 ops/s
# Warmup Iteration  17: 4677196.054 ops/s
# Warmup Iteration  18: 4687492.158 ops/s
# Warmup Iteration  19: 4702744.359 ops/s
# Warmup Iteration  20: 4685022.372 ops/s
# Warmup Iteration  21: 4711469.942 ops/s
# Warmup Iteration  22: 4674641.676 ops/s
# Warmup Iteration  23: 4667104.373 ops/s
# Warmup Iteration  24: 4681023.220 ops/s
# Warmup Iteration  25: 4682072.623 ops/s
# Warmup Iteration  26: 4703369.382 ops/s
# Warmup Iteration  27: 4705551.301 ops/s
# Warmup Iteration  28: 4687642.628 ops/s
# Warmup Iteration  29: 4664769.060 ops/s
# Warmup Iteration  30: 4702418.800 ops/s
Iteration   1: 4691161.753 ops/s
Iteration   2: 4695607.244 ops/s
Iteration   3: 4673129.913 ops/s
Iteration   4: 4660884.117 ops/s
Iteration   5: 4693529.330 ops/s
Iteration   6: 4618867.749 ops/s
Iteration   7: 4652775.275 ops/s
Iteration   8: 4690343.527 ops/s
Iteration   9: 4677575.188 ops/s
Iteration  10: 4679448.065 ops/s
Iteration  11: 4706819.253 ops/s
Iteration  12: 4693817.979 ops/s
Iteration  13: 4685999.348 ops/s
Iteration  14: 4610933.374 ops/s
Iteration  15: 4663348.317 ops/s
Iteration  16: 4698072.022 ops/s
Iteration  17: 4674892.343 ops/s
Iteration  18: 4706335.724 ops/s
Iteration  19: 4684516.273 ops/s
Iteration  20: 4712940.111 ops/s
Iteration  21: 4695927.349 ops/s
Iteration  22: 4684146.883 ops/s
Iteration  23: 4718906.681 ops/s
Iteration  24: 4684906.343 ops/s
Iteration  25: 4713469.904 ops/s
Iteration  26: 4696471.363 ops/s
Iteration  27: 4712421.418 ops/s
Iteration  28: 4675996.214 ops/s
Iteration  29: 4675526.359 ops/s
Iteration  30: 4690957.538 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_removeAll_iterable":
  4683990.899 ±(99.9%) 16473.342 ops/s [Average]
  (min, avg, max) = (4610933.374, 4683990.899, 4718906.681), stdev = 24656.525
  CI (99.9%): [4667517.556, 4700464.241] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  4683990.899 ± 16473.342  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1347904.469 ops/s
# Warmup Iteration   2: 3088849.195 ops/s
# Warmup Iteration   3: 2574819.251 ops/s
# Warmup Iteration   4: 3144808.218 ops/s
# Warmup Iteration   5: 3139287.832 ops/s
# Warmup Iteration   6: 3133836.286 ops/s
# Warmup Iteration   7: 3144077.155 ops/s
# Warmup Iteration   8: 3140586.263 ops/s
# Warmup Iteration   9: 3126668.038 ops/s
# Warmup Iteration  10: 3148801.164 ops/s
# Warmup Iteration  11: 3152104.464 ops/s
# Warmup Iteration  12: 3139066.568 ops/s
# Warmup Iteration  13: 3126747.176 ops/s
# Warmup Iteration  14: 3143632.757 ops/s
# Warmup Iteration  15: 3138381.804 ops/s
# Warmup Iteration  16: 3060730.641 ops/s
# Warmup Iteration  17: 3130433.986 ops/s
# Warmup Iteration  18: 3148068.152 ops/s
# Warmup Iteration  19: 3143760.172 ops/s
# Warmup Iteration  20: 3126409.601 ops/s
# Warmup Iteration  21: 3128298.952 ops/s
# Warmup Iteration  22: 3127941.498 ops/s
# Warmup Iteration  23: 3157958.159 ops/s
# Warmup Iteration  24: 3126651.461 ops/s
# Warmup Iteration  25: 3115089.702 ops/s
# Warmup Iteration  26: 3140021.405 ops/s
# Warmup Iteration  27: 3157445.606 ops/s
# Warmup Iteration  28: 3127945.529 ops/s
# Warmup Iteration  29: 3140797.733 ops/s
# Warmup Iteration  30: 3150370.026 ops/s
Iteration   1: 3139689.212 ops/s
Iteration   2: 3127240.443 ops/s
Iteration   3: 3126254.396 ops/s
Iteration   4: 3153317.393 ops/s
Iteration   5: 3147828.182 ops/s
Iteration   6: 3155060.075 ops/s
Iteration   7: 3061535.947 ops/s
Iteration   8: 3131478.581 ops/s
Iteration   9: 3124518.713 ops/s
Iteration  10: 3131143.032 ops/s
Iteration  11: 3120716.560 ops/s
Iteration  12: 3142772.680 ops/s
Iteration  13: 3151145.417 ops/s
Iteration  14: 3160663.109 ops/s
Iteration  15: 3125541.201 ops/s
Iteration  16: 3125656.615 ops/s
Iteration  17: 3130749.906 ops/s
Iteration  18: 3154468.415 ops/s
Iteration  19: 3139536.726 ops/s
Iteration  20: 3137580.607 ops/s
Iteration  21: 3146090.061 ops/s
Iteration  22: 3126379.565 ops/s
Iteration  23: 3141734.051 ops/s
Iteration  24: 3124923.102 ops/s
Iteration  25: 3149540.823 ops/s
Iteration  26: 3053009.875 ops/s
Iteration  27: 3151961.314 ops/s
Iteration  28: 3125076.029 ops/s
Iteration  29: 3152174.216 ops/s
Iteration  30: 3138136.531 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_retainAll":
  3133197.426 ±(99.9%) 15816.067 ops/s [Average]
  (min, avg, max) = (3053009.875, 3133197.426, 3160663.109), stdev = 23672.746
  CI (99.9%): [3117381.359, 3149013.492] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_retainAll  thrpt   30  3133197.426 ± 15816.067  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 744171.629 ops/s
# Warmup Iteration   2: 1837407.802 ops/s
# Warmup Iteration   3: 1823037.734 ops/s
# Warmup Iteration   4: 1523692.381 ops/s
# Warmup Iteration   5: 1847650.839 ops/s
# Warmup Iteration   6: 1822230.683 ops/s
# Warmup Iteration   7: 1843632.754 ops/s
# Warmup Iteration   8: 1829745.761 ops/s
# Warmup Iteration   9: 1826480.501 ops/s
# Warmup Iteration  10: 1845241.318 ops/s
# Warmup Iteration  11: 1847530.597 ops/s
# Warmup Iteration  12: 1832603.739 ops/s
# Warmup Iteration  13: 1828337.995 ops/s
# Warmup Iteration  14: 1829627.738 ops/s
# Warmup Iteration  15: 1847259.110 ops/s
# Warmup Iteration  16: 1843346.225 ops/s
# Warmup Iteration  17: 1849371.791 ops/s
# Warmup Iteration  18: 1844821.088 ops/s
# Warmup Iteration  19: 1826801.456 ops/s
# Warmup Iteration  20: 1830708.304 ops/s
# Warmup Iteration  21: 1846199.271 ops/s
# Warmup Iteration  22: 1841021.836 ops/s
# Warmup Iteration  23: 1853933.225 ops/s
# Warmup Iteration  24: 1851395.328 ops/s
# Warmup Iteration  25: 1843669.792 ops/s
# Warmup Iteration  26: 1832910.517 ops/s
# Warmup Iteration  27: 1848675.710 ops/s
# Warmup Iteration  28: 1846540.876 ops/s
# Warmup Iteration  29: 1846395.337 ops/s
# Warmup Iteration  30: 1852135.809 ops/s
Iteration   1: 1839047.696 ops/s
Iteration   2: 1817800.419 ops/s
Iteration   3: 1843377.184 ops/s
Iteration   4: 1853721.638 ops/s
Iteration   5: 1845156.260 ops/s
Iteration   6: 1842275.127 ops/s
Iteration   7: 1843796.839 ops/s
Iteration   8: 1850371.781 ops/s
Iteration   9: 1847039.028 ops/s
Iteration  10: 1854423.498 ops/s
Iteration  11: 1851639.723 ops/s
Iteration  12: 1848649.499 ops/s
Iteration  13: 1851625.351 ops/s
Iteration  14: 1834288.355 ops/s
Iteration  15: 1847006.996 ops/s
Iteration  16: 1849058.816 ops/s
Iteration  17: 1849750.539 ops/s
Iteration  18: 1835578.934 ops/s
Iteration  19: 1849696.416 ops/s
Iteration  20: 1845961.345 ops/s
Iteration  21: 1822575.363 ops/s
Iteration  22: 1850158.028 ops/s
Iteration  23: 1839921.472 ops/s
Iteration  24: 1847956.168 ops/s
Iteration  25: 1846314.936 ops/s
Iteration  26: 1844551.027 ops/s
Iteration  27: 1846978.171 ops/s
Iteration  28: 1845272.801 ops/s
Iteration  29: 1846869.895 ops/s
Iteration  30: 1823616.511 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_retainAll_iterable":
  1843815.994 ±(99.9%) 6006.765 ops/s [Average]
  (min, avg, max) = (1817800.419, 1843815.994, 1854423.498), stdev = 8990.644
  CI (99.9%): [1837809.229, 1849822.759] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  1843815.994 ± 6006.765  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3133270.112 ops/s
# Warmup Iteration   2: 9313916.249 ops/s
# Warmup Iteration   3: 7872671.859 ops/s
# Warmup Iteration   4: 9355173.214 ops/s
# Warmup Iteration   5: 9307153.119 ops/s
# Warmup Iteration   6: 9274842.706 ops/s
# Warmup Iteration   7: 9340930.104 ops/s
# Warmup Iteration   8: 9359943.626 ops/s
# Warmup Iteration   9: 9336014.557 ops/s
# Warmup Iteration  10: 9354948.214 ops/s
# Warmup Iteration  11: 9332879.962 ops/s
# Warmup Iteration  12: 9335807.376 ops/s
# Warmup Iteration  13: 9303730.267 ops/s
# Warmup Iteration  14: 9302215.844 ops/s
# Warmup Iteration  15: 9304360.374 ops/s
# Warmup Iteration  16: 9307474.168 ops/s
# Warmup Iteration  17: 9319526.835 ops/s
# Warmup Iteration  18: 9332892.077 ops/s
# Warmup Iteration  19: 9292825.350 ops/s
# Warmup Iteration  20: 9318819.508 ops/s
# Warmup Iteration  21: 9287467.819 ops/s
# Warmup Iteration  22: 9314812.009 ops/s
# Warmup Iteration  23: 9240114.541 ops/s
# Warmup Iteration  24: 9302750.927 ops/s
# Warmup Iteration  25: 9323613.308 ops/s
# Warmup Iteration  26: 9354575.395 ops/s
# Warmup Iteration  27: 9275614.607 ops/s
# Warmup Iteration  28: 9325310.431 ops/s
# Warmup Iteration  29: 9272547.500 ops/s
# Warmup Iteration  30: 9339179.283 ops/s
Iteration   1: 9236560.719 ops/s
Iteration   2: 9329455.190 ops/s
Iteration   3: 9323361.934 ops/s
Iteration   4: 9130593.068 ops/s
Iteration   5: 9315682.615 ops/s
Iteration   6: 9359225.326 ops/s
Iteration   7: 9340055.365 ops/s
Iteration   8: 9219182.214 ops/s
Iteration   9: 9325793.245 ops/s
Iteration  10: 9294729.598 ops/s
Iteration  11: 9367983.862 ops/s
Iteration  12: 9374354.606 ops/s
Iteration  13: 9142286.276 ops/s
Iteration  14: 9322480.569 ops/s
Iteration  15: 9331111.106 ops/s
Iteration  16: 9359165.103 ops/s
Iteration  17: 9316426.742 ops/s
Iteration  18: 9331351.737 ops/s
Iteration  19: 9355962.947 ops/s
Iteration  20: 9333842.212 ops/s
Iteration  21: 9291672.364 ops/s
Iteration  22: 9257816.981 ops/s
Iteration  23: 9344051.145 ops/s
Iteration  24: 9359873.337 ops/s
Iteration  25: 9384631.434 ops/s
Iteration  26: 9298108.593 ops/s
Iteration  27: 9383536.966 ops/s
Iteration  28: 9266167.593 ops/s
Iteration  29: 9353103.102 ops/s
Iteration  30: 9323664.593 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_select":
  9312407.685 ±(99.9%) 41828.937 ops/s [Average]
  (min, avg, max) = (9130593.068, 9312407.685, 9384631.434), stdev = 62607.589
  CI (99.9%): [9270578.747, 9354236.622] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_select  thrpt   30  9312407.685 ± 41828.937  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3044480.420 ops/s
# Warmup Iteration   2: 5039555.612 ops/s
# Warmup Iteration   3: 5948679.964 ops/s
# Warmup Iteration   4: 6016125.863 ops/s
# Warmup Iteration   5: 5993566.626 ops/s
# Warmup Iteration   6: 6050997.875 ops/s
# Warmup Iteration   7: 5976181.962 ops/s
# Warmup Iteration   8: 6018876.315 ops/s
# Warmup Iteration   9: 6038162.471 ops/s
# Warmup Iteration  10: 5992082.457 ops/s
# Warmup Iteration  11: 5993001.471 ops/s
# Warmup Iteration  12: 6037915.355 ops/s
# Warmup Iteration  13: 6021669.426 ops/s
# Warmup Iteration  14: 5992362.792 ops/s
# Warmup Iteration  15: 6029702.941 ops/s
# Warmup Iteration  16: 6029513.716 ops/s
# Warmup Iteration  17: 5990397.179 ops/s
# Warmup Iteration  18: 5985453.629 ops/s
# Warmup Iteration  19: 6001390.621 ops/s
# Warmup Iteration  20: 5993821.828 ops/s
# Warmup Iteration  21: 5977471.571 ops/s
# Warmup Iteration  22: 5922373.159 ops/s
# Warmup Iteration  23: 5981462.299 ops/s
# Warmup Iteration  24: 5941769.838 ops/s
# Warmup Iteration  25: 6012167.326 ops/s
# Warmup Iteration  26: 6009481.733 ops/s
# Warmup Iteration  27: 5969111.467 ops/s
# Warmup Iteration  28: 5990185.657 ops/s
# Warmup Iteration  29: 5974812.473 ops/s
# Warmup Iteration  30: 6014708.875 ops/s
Iteration   1: 5938711.093 ops/s
Iteration   2: 6003014.964 ops/s
Iteration   3: 5973366.105 ops/s
Iteration   4: 6001072.769 ops/s
Iteration   5: 6000184.876 ops/s
Iteration   6: 5998681.104 ops/s
Iteration   7: 6027656.596 ops/s
Iteration   8: 6012120.708 ops/s
Iteration   9: 5993668.564 ops/s
Iteration  10: 5973856.324 ops/s
Iteration  11: 6006804.965 ops/s
Iteration  12: 6011924.575 ops/s
Iteration  13: 5956633.262 ops/s
Iteration  14: 5923893.491 ops/s
Iteration  15: 5962754.413 ops/s
Iteration  16: 6014019.622 ops/s
Iteration  17: 5970774.370 ops/s
Iteration  18: 5995162.852 ops/s
Iteration  19: 6008719.253 ops/s
Iteration  20: 6027279.395 ops/s
Iteration  21: 6016842.404 ops/s
Iteration  22: 5901060.103 ops/s
Iteration  23: 5983308.760 ops/s
Iteration  24: 6001982.679 ops/s
Iteration  25: 5984679.703 ops/s
Iteration  26: 6020279.241 ops/s
Iteration  27: 5964555.847 ops/s
Iteration  28: 6010883.236 ops/s
Iteration  29: 6009976.382 ops/s
Iteration  30: 6032033.329 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_size":
  5990863.366 ±(99.9%) 20853.806 ops/s [Average]
  (min, avg, max) = (5901060.103, 5990863.366, 6032033.329), stdev = 31212.997
  CI (99.9%): [5970009.560, 6011717.172] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_size  thrpt   30  5990863.366 ± 20853.806  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 160147844.144 ops/s
# Warmup Iteration   2: 303874458.439 ops/s
# Warmup Iteration   3: 256437113.705 ops/s
# Warmup Iteration   4: 306701447.522 ops/s
# Warmup Iteration   5: 306403210.439 ops/s
# Warmup Iteration   6: 306643954.600 ops/s
# Warmup Iteration   7: 305691402.594 ops/s
# Warmup Iteration   8: 306272817.183 ops/s
# Warmup Iteration   9: 305332768.769 ops/s
# Warmup Iteration  10: 304149076.606 ops/s
# Warmup Iteration  11: 307491648.862 ops/s
# Warmup Iteration  12: 305616614.897 ops/s
# Warmup Iteration  13: 308178860.695 ops/s
# Warmup Iteration  14: 306931229.270 ops/s
# Warmup Iteration  15: 306254678.521 ops/s
# Warmup Iteration  16: 305766574.908 ops/s
# Warmup Iteration  17: 300516114.258 ops/s
# Warmup Iteration  18: 307734310.755 ops/s
# Warmup Iteration  19: 305997509.614 ops/s
# Warmup Iteration  20: 306968124.047 ops/s
# Warmup Iteration  21: 306216893.453 ops/s
# Warmup Iteration  22: 301894018.915 ops/s
# Warmup Iteration  23: 307035449.392 ops/s
# Warmup Iteration  24: 306435920.709 ops/s
# Warmup Iteration  25: 306421305.288 ops/s
# Warmup Iteration  26: 307966297.919 ops/s
# Warmup Iteration  27: 305478226.156 ops/s
# Warmup Iteration  28: 303601481.630 ops/s
# Warmup Iteration  29: 304431265.528 ops/s
# Warmup Iteration  30: 303542790.646 ops/s
Iteration   1: 307600219.976 ops/s
Iteration   2: 307335497.988 ops/s
Iteration   3: 303885646.445 ops/s
Iteration   4: 307556717.493 ops/s
Iteration   5: 307447302.108 ops/s
Iteration   6: 306271905.763 ops/s
Iteration   7: 306482294.982 ops/s
Iteration   8: 308174597.430 ops/s
Iteration   9: 308079918.199 ops/s
Iteration  10: 304667598.298 ops/s
Iteration  11: 306901758.049 ops/s
Iteration  12: 305269020.617 ops/s
Iteration  13: 305827968.707 ops/s
Iteration  14: 305685060.393 ops/s
Iteration  15: 307353526.696 ops/s
Iteration  16: 307674602.680 ops/s
Iteration  17: 302422605.698 ops/s
Iteration  18: 306193595.082 ops/s
Iteration  19: 306386858.339 ops/s
Iteration  20: 305621752.859 ops/s
Iteration  21: 303879261.256 ops/s
Iteration  22: 306521577.963 ops/s
Iteration  23: 304265623.761 ops/s
Iteration  24: 305181553.923 ops/s
Iteration  25: 303660055.703 ops/s
Iteration  26: 305372506.052 ops/s
Iteration  27: 303251768.087 ops/s
Iteration  28: 304759865.057 ops/s
Iteration  29: 304490047.766 ops/s
Iteration  30: 304035591.425 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_testEquals":
  305741876.627 ±(99.9%) 1047287.739 ops/s [Average]
  (min, avg, max) = (302422605.698, 305741876.627, 308174597.430), stdev = 1567531.103
  CI (99.9%): [304694588.888, 306789164.365] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt          Score         Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_testEquals  thrpt   30  305741876.627 ± 1047287.739  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 160728995.956 ops/s
# Warmup Iteration   2: 294949355.734 ops/s
# Warmup Iteration   3: 262453718.332 ops/s
# Warmup Iteration   4: 304386057.150 ops/s
# Warmup Iteration   5: 305263773.451 ops/s
# Warmup Iteration   6: 306887012.205 ops/s
# Warmup Iteration   7: 308488898.061 ops/s
# Warmup Iteration   8: 304910122.279 ops/s
# Warmup Iteration   9: 304889149.850 ops/s
# Warmup Iteration  10: 306237013.761 ops/s
# Warmup Iteration  11: 306851439.291 ops/s
# Warmup Iteration  12: 308000648.702 ops/s
# Warmup Iteration  13: 305241834.709 ops/s
# Warmup Iteration  14: 307810372.214 ops/s
# Warmup Iteration  15: 308233780.608 ops/s
# Warmup Iteration  16: 308311905.046 ops/s
# Warmup Iteration  17: 304525464.126 ops/s
# Warmup Iteration  18: 307479041.645 ops/s
# Warmup Iteration  19: 306597219.954 ops/s
# Warmup Iteration  20: 306497297.518 ops/s
# Warmup Iteration  21: 305735772.625 ops/s
# Warmup Iteration  22: 305011572.854 ops/s
# Warmup Iteration  23: 304111327.683 ops/s
# Warmup Iteration  24: 306108736.605 ops/s
# Warmup Iteration  25: 307424921.524 ops/s
# Warmup Iteration  26: 303948401.017 ops/s
# Warmup Iteration  27: 307518747.271 ops/s
# Warmup Iteration  28: 306189918.164 ops/s
# Warmup Iteration  29: 306441859.666 ops/s
# Warmup Iteration  30: 305862570.600 ops/s
Iteration   1: 306999947.514 ops/s
Iteration   2: 305331633.412 ops/s
Iteration   3: 304954560.146 ops/s
Iteration   4: 306636352.026 ops/s
Iteration   5: 305906783.847 ops/s
Iteration   6: 305141418.179 ops/s
Iteration   7: 306525689.373 ops/s
Iteration   8: 306113035.186 ops/s
Iteration   9: 304737433.803 ops/s
Iteration  10: 303733578.846 ops/s
Iteration  11: 300860716.028 ops/s
Iteration  12: 305749404.566 ops/s
Iteration  13: 304340084.951 ops/s
Iteration  14: 305796787.393 ops/s
Iteration  15: 305616717.700 ops/s
Iteration  16: 306657856.508 ops/s
Iteration  17: 307575582.905 ops/s
Iteration  18: 306574163.088 ops/s
Iteration  19: 304344702.169 ops/s
Iteration  20: 301213536.424 ops/s
Iteration  21: 305137713.919 ops/s
Iteration  22: 306887617.293 ops/s
Iteration  23: 306918793.293 ops/s
Iteration  24: 303476832.673 ops/s
Iteration  25: 305938437.609 ops/s
Iteration  26: 304315339.383 ops/s
Iteration  27: 307644571.091 ops/s
Iteration  28: 305901795.291 ops/s
Iteration  29: 306401335.331 ops/s
Iteration  30: 303844413.394 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_testHashCode":
  305375894.445 ±(99.9%) 1084735.037 ops/s [Average]
  (min, avg, max) = (300860716.028, 305375894.445, 307644571.091), stdev = 1623580.460
  CI (99.9%): [304291159.408, 306460629.482] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt          Score         Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_testHashCode  thrpt   30  305375894.445 ± 1084735.037  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 163607863.444 ops/s
# Warmup Iteration   2: 297451425.396 ops/s
# Warmup Iteration   3: 233198754.540 ops/s
# Warmup Iteration   4: 267644116.900 ops/s
# Warmup Iteration   5: 270343322.909 ops/s
# Warmup Iteration   6: 271787703.190 ops/s
# Warmup Iteration   7: 269513559.070 ops/s
# Warmup Iteration   8: 270276945.068 ops/s
# Warmup Iteration   9: 269307447.347 ops/s
# Warmup Iteration  10: 270258839.799 ops/s
# Warmup Iteration  11: 270431202.455 ops/s
# Warmup Iteration  12: 269756221.960 ops/s
# Warmup Iteration  13: 268445524.544 ops/s
# Warmup Iteration  14: 270751718.306 ops/s
# Warmup Iteration  15: 269025615.715 ops/s
# Warmup Iteration  16: 270555846.860 ops/s
# Warmup Iteration  17: 270669591.095 ops/s
# Warmup Iteration  18: 268651323.807 ops/s
# Warmup Iteration  19: 267655003.255 ops/s
# Warmup Iteration  20: 269323930.248 ops/s
# Warmup Iteration  21: 268436114.301 ops/s
# Warmup Iteration  22: 267942278.254 ops/s
# Warmup Iteration  23: 268556959.305 ops/s
# Warmup Iteration  24: 269334386.642 ops/s
# Warmup Iteration  25: 266008360.244 ops/s
# Warmup Iteration  26: 270054183.687 ops/s
# Warmup Iteration  27: 268785949.803 ops/s
# Warmup Iteration  28: 270396718.065 ops/s
# Warmup Iteration  29: 266895248.806 ops/s
# Warmup Iteration  30: 270640583.321 ops/s
Iteration   1: 268455235.355 ops/s
Iteration   2: 270017920.965 ops/s
Iteration   3: 270654540.943 ops/s
Iteration   4: 269792671.400 ops/s
Iteration   5: 268762035.016 ops/s
Iteration   6: 270531044.072 ops/s
Iteration   7: 270963804.761 ops/s
Iteration   8: 268727656.621 ops/s
Iteration   9: 267338182.987 ops/s
Iteration  10: 268971583.205 ops/s
Iteration  11: 270930678.955 ops/s
Iteration  12: 265610960.352 ops/s
Iteration  13: 269865390.604 ops/s
Iteration  14: 270189633.409 ops/s
Iteration  15: 268400869.148 ops/s
Iteration  16: 270398466.248 ops/s
Iteration  17: 268447145.565 ops/s
Iteration  18: 269916313.647 ops/s
Iteration  19: 270553028.437 ops/s
Iteration  20: 268553003.873 ops/s
Iteration  21: 269311986.317 ops/s
Iteration  22: 264324664.170 ops/s
Iteration  23: 269754725.903 ops/s
Iteration  24: 269440488.167 ops/s
Iteration  25: 269829389.485 ops/s
Iteration  26: 269950589.181 ops/s
Iteration  27: 269934675.391 ops/s
Iteration  28: 268205038.780 ops/s
Iteration  29: 270378700.341 ops/s
Iteration  30: 271433557.363 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_testToString":
  269321466.022 ±(99.9%) 1021422.281 ops/s [Average]
  (min, avg, max) = (264324664.170, 269321466.022, 271433557.363), stdev = 1528816.901
  CI (99.9%): [268300043.741, 270342888.303] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt          Score         Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_testToString  thrpt   30  269321466.022 ± 1021422.281  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1873547.097 ops/s
# Warmup Iteration   2: 4147998.545 ops/s
# Warmup Iteration   3: 3428038.845 ops/s
# Warmup Iteration   4: 4229628.962 ops/s
# Warmup Iteration   5: 4213343.165 ops/s
# Warmup Iteration   6: 4191110.489 ops/s
# Warmup Iteration   7: 4227990.107 ops/s
# Warmup Iteration   8: 4237389.060 ops/s
# Warmup Iteration   9: 4221814.764 ops/s
# Warmup Iteration  10: 4249864.785 ops/s
# Warmup Iteration  11: 4186475.707 ops/s
# Warmup Iteration  12: 4262103.297 ops/s
# Warmup Iteration  13: 4204301.967 ops/s
# Warmup Iteration  14: 4170940.555 ops/s
# Warmup Iteration  15: 4232090.960 ops/s
# Warmup Iteration  16: 4208635.786 ops/s
# Warmup Iteration  17: 4229768.724 ops/s
# Warmup Iteration  18: 4204611.623 ops/s
# Warmup Iteration  19: 4236082.010 ops/s
# Warmup Iteration  20: 4207852.872 ops/s
# Warmup Iteration  21: 4212609.707 ops/s
# Warmup Iteration  22: 4230900.501 ops/s
# Warmup Iteration  23: 4212008.946 ops/s
# Warmup Iteration  24: 4230236.000 ops/s
# Warmup Iteration  25: 4193329.849 ops/s
# Warmup Iteration  26: 4211497.531 ops/s
# Warmup Iteration  27: 4229611.216 ops/s
# Warmup Iteration  28: 4230263.073 ops/s
# Warmup Iteration  29: 4226985.401 ops/s
# Warmup Iteration  30: 4227084.398 ops/s
Iteration   1: 4227144.156 ops/s
Iteration   2: 4245930.289 ops/s
Iteration   3: 4227557.749 ops/s
Iteration   4: 4251929.112 ops/s
Iteration   5: 4200716.450 ops/s
Iteration   6: 4227069.676 ops/s
Iteration   7: 4222436.021 ops/s
Iteration   8: 4221108.334 ops/s
Iteration   9: 4209370.168 ops/s
Iteration  10: 4202048.492 ops/s
Iteration  11: 4126339.592 ops/s
Iteration  12: 4232902.178 ops/s
Iteration  13: 4206397.424 ops/s
Iteration  14: 4209022.856 ops/s
Iteration  15: 4223128.439 ops/s
Iteration  16: 4186426.627 ops/s
Iteration  17: 4239536.420 ops/s
Iteration  18: 4214336.278 ops/s
Iteration  19: 4215346.613 ops/s
Iteration  20: 4248805.834 ops/s
Iteration  21: 4212500.635 ops/s
Iteration  22: 4239378.770 ops/s
Iteration  23: 4232787.495 ops/s
Iteration  24: 4222573.065 ops/s
Iteration  25: 4242579.576 ops/s
Iteration  26: 4214872.817 ops/s
Iteration  27: 4166704.365 ops/s
Iteration  28: 4214444.725 ops/s
Iteration  29: 4224479.486 ops/s
Iteration  30: 4237866.334 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_toArray":
  4218191.333 ±(99.9%) 16902.578 ops/s [Average]
  (min, avg, max) = (4126339.592, 4218191.333, 4251929.112), stdev = 25298.985
  CI (99.9%): [4201288.754, 4235093.911] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_toArray  thrpt   30  4218191.333 ± 16902.578  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2365437.810 ops/s
# Warmup Iteration   2: 5077585.103 ops/s
# Warmup Iteration   3: 4272023.357 ops/s
# Warmup Iteration   4: 5142620.106 ops/s
# Warmup Iteration   5: 5067534.985 ops/s
# Warmup Iteration   6: 5151855.782 ops/s
# Warmup Iteration   7: 5143702.261 ops/s
# Warmup Iteration   8: 5073777.374 ops/s
# Warmup Iteration   9: 5073706.585 ops/s
# Warmup Iteration  10: 5086785.756 ops/s
# Warmup Iteration  11: 5132242.682 ops/s
# Warmup Iteration  12: 5103440.301 ops/s
# Warmup Iteration  13: 5139433.553 ops/s
# Warmup Iteration  14: 5134283.647 ops/s
# Warmup Iteration  15: 5148316.117 ops/s
# Warmup Iteration  16: 5120415.561 ops/s
# Warmup Iteration  17: 5126152.137 ops/s
# Warmup Iteration  18: 5048487.669 ops/s
# Warmup Iteration  19: 5105076.855 ops/s
# Warmup Iteration  20: 5121072.229 ops/s
# Warmup Iteration  21: 5093098.288 ops/s
# Warmup Iteration  22: 5093738.722 ops/s
# Warmup Iteration  23: 5114350.711 ops/s
# Warmup Iteration  24: 5100530.193 ops/s
# Warmup Iteration  25: 5095848.916 ops/s
# Warmup Iteration  26: 5127858.550 ops/s
# Warmup Iteration  27: 5125784.764 ops/s
# Warmup Iteration  28: 5117579.255 ops/s
# Warmup Iteration  29: 5076631.189 ops/s
# Warmup Iteration  30: 5078929.885 ops/s
Iteration   1: 5121222.703 ops/s
Iteration   2: 5120338.894 ops/s
Iteration   3: 5120393.072 ops/s
Iteration   4: 5158092.994 ops/s
Iteration   5: 5134449.934 ops/s
Iteration   6: 5118662.808 ops/s
Iteration   7: 5035910.155 ops/s
Iteration   8: 5143678.787 ops/s
Iteration   9: 5127525.387 ops/s
Iteration  10: 5152355.415 ops/s
Iteration  11: 5102492.388 ops/s
Iteration  12: 5153328.513 ops/s
Iteration  13: 5115138.914 ops/s
Iteration  14: 5136333.306 ops/s
Iteration  15: 5102389.378 ops/s
Iteration  16: 5047466.504 ops/s
Iteration  17: 5099401.192 ops/s
Iteration  18: 5131034.534 ops/s
Iteration  19: 5120695.006 ops/s
Iteration  20: 5139372.377 ops/s
Iteration  21: 5133428.005 ops/s
Iteration  22: 5147764.008 ops/s
Iteration  23: 5021525.269 ops/s
Iteration  24: 5121041.506 ops/s
Iteration  25: 5130083.576 ops/s
Iteration  26: 5148912.785 ops/s
Iteration  27: 5128708.446 ops/s
Iteration  28: 5140420.072 ops/s
Iteration  29: 5139579.157 ops/s
Iteration  30: 5112543.884 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_toBag":
  5120142.966 ±(99.9%) 21885.439 ops/s [Average]
  (min, avg, max) = (5021525.269, 5120142.966, 5158092.994), stdev = 32757.098
  CI (99.9%): [5098257.526, 5142028.405] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_toBag  thrpt   30  5120142.966 ± 21885.439  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1723765.536 ops/s
# Warmup Iteration   2: 3854406.671 ops/s
# Warmup Iteration   3: 3224771.480 ops/s
# Warmup Iteration   4: 3900761.601 ops/s
# Warmup Iteration   5: 3860293.127 ops/s
# Warmup Iteration   6: 3886811.266 ops/s
# Warmup Iteration   7: 3892876.431 ops/s
# Warmup Iteration   8: 3884817.916 ops/s
# Warmup Iteration   9: 3885350.703 ops/s
# Warmup Iteration  10: 3874780.639 ops/s
# Warmup Iteration  11: 3855096.201 ops/s
# Warmup Iteration  12: 3883220.771 ops/s
# Warmup Iteration  13: 3868095.353 ops/s
# Warmup Iteration  14: 3896242.599 ops/s
# Warmup Iteration  15: 3887925.394 ops/s
# Warmup Iteration  16: 3877694.436 ops/s
# Warmup Iteration  17: 3872251.756 ops/s
# Warmup Iteration  18: 3898462.435 ops/s
# Warmup Iteration  19: 3878102.011 ops/s
# Warmup Iteration  20: 3866571.538 ops/s
# Warmup Iteration  21: 3889959.568 ops/s
# Warmup Iteration  22: 3873704.124 ops/s
# Warmup Iteration  23: 3881609.695 ops/s
# Warmup Iteration  24: 3886115.095 ops/s
# Warmup Iteration  25: 3893803.232 ops/s
# Warmup Iteration  26: 3883558.470 ops/s
# Warmup Iteration  27: 3891100.885 ops/s
# Warmup Iteration  28: 3877845.986 ops/s
# Warmup Iteration  29: 3862090.045 ops/s
# Warmup Iteration  30: 3881133.779 ops/s
Iteration   1: 3853698.142 ops/s
Iteration   2: 3888058.243 ops/s
Iteration   3: 3909130.700 ops/s
Iteration   4: 3873722.220 ops/s
Iteration   5: 3886755.007 ops/s
Iteration   6: 3879672.678 ops/s
Iteration   7: 3832320.757 ops/s
Iteration   8: 3871135.859 ops/s
Iteration   9: 3886332.783 ops/s
Iteration  10: 3881917.401 ops/s
Iteration  11: 3889936.825 ops/s
Iteration  12: 3872965.507 ops/s
Iteration  13: 3887318.681 ops/s
Iteration  14: 3868715.705 ops/s
Iteration  15: 3901641.978 ops/s
Iteration  16: 3887496.941 ops/s
Iteration  17: 3886260.007 ops/s
Iteration  18: 3848443.647 ops/s
Iteration  19: 3892035.313 ops/s
Iteration  20: 3883388.512 ops/s
Iteration  21: 3901181.296 ops/s
Iteration  22: 3800306.291 ops/s
Iteration  23: 3882969.651 ops/s
Iteration  24: 3821436.171 ops/s
Iteration  25: 3879402.340 ops/s
Iteration  26: 3858611.061 ops/s
Iteration  27: 3715134.762 ops/s
Iteration  28: 3872165.122 ops/s
Iteration  29: 3878175.855 ops/s
Iteration  30: 3882225.271 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_toList":
  3869085.158 ±(99.9%) 24968.761 ops/s [Average]
  (min, avg, max) = (3715134.762, 3869085.158, 3909130.700), stdev = 37372.068
  CI (99.9%): [3844116.397, 3894053.918] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_toList  thrpt   30  3869085.158 ± 24968.761  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3224571.691 ops/s
# Warmup Iteration   2: 6905500.692 ops/s
# Warmup Iteration   3: 5825432.010 ops/s
# Warmup Iteration   4: 6934286.619 ops/s
# Warmup Iteration   5: 6894067.380 ops/s
# Warmup Iteration   6: 6972462.915 ops/s
# Warmup Iteration   7: 6946257.200 ops/s
# Warmup Iteration   8: 7008636.599 ops/s
# Warmup Iteration   9: 7031686.937 ops/s
# Warmup Iteration  10: 6911503.489 ops/s
# Warmup Iteration  11: 6956980.110 ops/s
# Warmup Iteration  12: 6969227.932 ops/s
# Warmup Iteration  13: 6991348.603 ops/s
# Warmup Iteration  14: 6952097.822 ops/s
# Warmup Iteration  15: 7011525.214 ops/s
# Warmup Iteration  16: 7004891.218 ops/s
# Warmup Iteration  17: 6949296.259 ops/s
# Warmup Iteration  18: 6929813.026 ops/s
# Warmup Iteration  19: 6970612.631 ops/s
# Warmup Iteration  20: 7004445.384 ops/s
# Warmup Iteration  21: 6966454.380 ops/s
# Warmup Iteration  22: 6934003.657 ops/s
# Warmup Iteration  23: 6916419.971 ops/s
# Warmup Iteration  24: 6984407.610 ops/s
# Warmup Iteration  25: 6997704.390 ops/s
# Warmup Iteration  26: 6940594.797 ops/s
# Warmup Iteration  27: 6954081.190 ops/s
# Warmup Iteration  28: 6925027.666 ops/s
# Warmup Iteration  29: 6899843.805 ops/s
# Warmup Iteration  30: 6943014.966 ops/s
Iteration   1: 6961311.718 ops/s
Iteration   2: 6948562.040 ops/s
Iteration   3: 6984971.299 ops/s
Iteration   4: 6972837.651 ops/s
Iteration   5: 6964808.349 ops/s
Iteration   6: 6985057.313 ops/s
Iteration   7: 6988110.591 ops/s
Iteration   8: 6980307.972 ops/s
Iteration   9: 7011144.980 ops/s
Iteration  10: 6924395.334 ops/s
Iteration  11: 6950367.391 ops/s
Iteration  12: 6928057.706 ops/s
Iteration  13: 6991888.727 ops/s
Iteration  14: 6974129.163 ops/s
Iteration  15: 7005864.534 ops/s
Iteration  16: 6963234.202 ops/s
Iteration  17: 6970191.281 ops/s
Iteration  18: 6969513.597 ops/s
Iteration  19: 6932147.617 ops/s
Iteration  20: 6956606.846 ops/s
Iteration  21: 6957481.118 ops/s
Iteration  22: 6993453.270 ops/s
Iteration  23: 6972176.979 ops/s
Iteration  24: 7016172.235 ops/s
Iteration  25: 6923579.520 ops/s
Iteration  26: 6971274.128 ops/s
Iteration  27: 7001052.575 ops/s
Iteration  28: 7010796.926 ops/s
Iteration  29: 7004826.705 ops/s
Iteration  30: 7033825.261 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_toSet":
  6974938.234 ±(99.9%) 18814.085 ops/s [Average]
  (min, avg, max) = (6923579.520, 6974938.234, 7033825.261), stdev = 28160.039
  CI (99.9%): [6956124.149, 6993752.319] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_toSet  thrpt   30  6974938.234 ± 18814.085  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 709724.874 ops/s
# Warmup Iteration   2: 738067.430 ops/s
# Warmup Iteration   3: 977815.295 ops/s
# Warmup Iteration   4: 981473.378 ops/s
# Warmup Iteration   5: 974889.310 ops/s
# Warmup Iteration   6: 978924.852 ops/s
# Warmup Iteration   7: 978092.316 ops/s
# Warmup Iteration   8: 977794.746 ops/s
# Warmup Iteration   9: 982315.028 ops/s
# Warmup Iteration  10: 984062.931 ops/s
# Warmup Iteration  11: 886627.025 ops/s
# Warmup Iteration  12: 904154.887 ops/s
# Warmup Iteration  13: 981764.596 ops/s
# Warmup Iteration  14: 976859.568 ops/s
# Warmup Iteration  15: 979446.045 ops/s
# Warmup Iteration  16: 975577.106 ops/s
# Warmup Iteration  17: 1040425.673 ops/s
# Warmup Iteration  18: 1040184.611 ops/s
# Warmup Iteration  19: 1042366.663 ops/s
# Warmup Iteration  20: 1046937.932 ops/s
# Warmup Iteration  21: 1040216.922 ops/s
# Warmup Iteration  22: 1040037.436 ops/s
# Warmup Iteration  23: 1030668.800 ops/s
# Warmup Iteration  24: 1036607.291 ops/s
# Warmup Iteration  25: 1033670.161 ops/s
# Warmup Iteration  26: 1026534.294 ops/s
# Warmup Iteration  27: 1031011.416 ops/s
# Warmup Iteration  28: 1037822.335 ops/s
# Warmup Iteration  29: 1037991.584 ops/s
# Warmup Iteration  30: 1040379.372 ops/s
Iteration   1: 1019930.705 ops/s
Iteration   2: 1040699.789 ops/s
Iteration   3: 1034578.643 ops/s
Iteration   4: 1042003.223 ops/s
Iteration   5: 1025249.307 ops/s
Iteration   6: 1032291.841 ops/s
Iteration   7: 1039080.221 ops/s
Iteration   8: 1040539.370 ops/s
Iteration   9: 1038407.489 ops/s
Iteration  10: 1044701.544 ops/s
Iteration  11: 1041787.181 ops/s
Iteration  12: 1037833.608 ops/s
Iteration  13: 1004263.263 ops/s
Iteration  14: 1025061.044 ops/s
Iteration  15: 1035116.531 ops/s
Iteration  16: 1042107.489 ops/s
Iteration  17: 1044261.742 ops/s
Iteration  18: 1027589.362 ops/s
Iteration  19: 1042414.057 ops/s
Iteration  20: 1039285.706 ops/s
Iteration  21: 1028825.270 ops/s
Iteration  22: 1025443.809 ops/s
Iteration  23: 1041960.847 ops/s
Iteration  24: 1024599.121 ops/s
Iteration  25: 1040930.846 ops/s
Iteration  26: 1041440.458 ops/s
Iteration  27: 1036596.651 ops/s
Iteration  28: 1035625.568 ops/s
Iteration  29: 1030604.926 ops/s
Iteration  30: 1050184.305 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_with":
  1035113.797 ±(99.9%) 6254.698 ops/s [Average]
  (min, avg, max) = (1004263.263, 1035113.797, 1050184.305), stdev = 9361.738
  CI (99.9%): [1028859.100, 1041368.495] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_with  thrpt   30  1035113.797 ± 6254.698  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 706850.011 ops/s
# Warmup Iteration   2: 745332.003 ops/s
# Warmup Iteration   3: 979912.189 ops/s
# Warmup Iteration   4: 967383.639 ops/s
# Warmup Iteration   5: 968481.831 ops/s
# Warmup Iteration   6: 980844.348 ops/s
# Warmup Iteration   7: 978714.364 ops/s
# Warmup Iteration   8: 979251.191 ops/s
# Warmup Iteration   9: 976081.427 ops/s
# Warmup Iteration  10: 970450.547 ops/s
# Warmup Iteration  11: 853164.697 ops/s
# Warmup Iteration  12: 939011.153 ops/s
# Warmup Iteration  13: 972120.898 ops/s
# Warmup Iteration  14: 973066.266 ops/s
# Warmup Iteration  15: 974699.525 ops/s
# Warmup Iteration  16: 973126.210 ops/s
# Warmup Iteration  17: 1025619.225 ops/s
# Warmup Iteration  18: 1033862.776 ops/s
# Warmup Iteration  19: 1028552.675 ops/s
# Warmup Iteration  20: 1033805.934 ops/s
# Warmup Iteration  21: 1037142.037 ops/s
# Warmup Iteration  22: 1025106.345 ops/s
# Warmup Iteration  23: 1035262.035 ops/s
# Warmup Iteration  24: 1023909.455 ops/s
# Warmup Iteration  25: 1037365.124 ops/s
# Warmup Iteration  26: 1024871.380 ops/s
# Warmup Iteration  27: 1035030.649 ops/s
# Warmup Iteration  28: 1018929.354 ops/s
# Warmup Iteration  29: 1031729.127 ops/s
# Warmup Iteration  30: 1033059.948 ops/s
Iteration   1: 1032883.731 ops/s
Iteration   2: 1033268.255 ops/s
Iteration   3: 1026879.210 ops/s
Iteration   4: 1026474.905 ops/s
Iteration   5: 1033664.200 ops/s
Iteration   6: 1020464.663 ops/s
Iteration   7: 1020602.499 ops/s
Iteration   8: 1032168.549 ops/s
Iteration   9: 1038707.161 ops/s
Iteration  10: 1019709.215 ops/s
Iteration  11: 1033042.124 ops/s
Iteration  12: 1037018.474 ops/s
Iteration  13: 1037434.420 ops/s
Iteration  14: 1030124.885 ops/s
Iteration  15: 1038484.690 ops/s
Iteration  16: 1033872.021 ops/s
Iteration  17: 1028746.573 ops/s
Iteration  18: 1000736.766 ops/s
Iteration  19: 1032752.154 ops/s
Iteration  20: 1035301.448 ops/s
Iteration  21: 1033078.723 ops/s
Iteration  22: 1036327.345 ops/s
Iteration  23: 1037440.339 ops/s
Iteration  24: 1032944.214 ops/s
Iteration  25: 1032514.837 ops/s
Iteration  26: 1031680.360 ops/s
Iteration  27: 1016413.219 ops/s
Iteration  28: 1034164.248 ops/s
Iteration  29: 1036803.852 ops/s
Iteration  30: 1040627.697 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_withAll":
  1030811.026 ±(99.9%) 5518.822 ops/s [Average]
  (min, avg, max) = (1000736.766, 1030811.026, 1040627.697), stdev = 8260.313
  CI (99.9%): [1025292.204, 1036329.848] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_withAll  thrpt   30  1030811.026 ± 5518.822  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 701608.976 ops/s
# Warmup Iteration   2: 732909.022 ops/s
# Warmup Iteration   3: 976792.254 ops/s
# Warmup Iteration   4: 975232.391 ops/s
# Warmup Iteration   5: 975096.208 ops/s
# Warmup Iteration   6: 978437.800 ops/s
# Warmup Iteration   7: 978183.696 ops/s
# Warmup Iteration   8: 970423.762 ops/s
# Warmup Iteration   9: 978459.949 ops/s
# Warmup Iteration  10: 970431.113 ops/s
# Warmup Iteration  11: 856316.578 ops/s
# Warmup Iteration  12: 930755.119 ops/s
# Warmup Iteration  13: 982906.174 ops/s
# Warmup Iteration  14: 980544.105 ops/s
# Warmup Iteration  15: 978141.148 ops/s
# Warmup Iteration  16: 978211.105 ops/s
# Warmup Iteration  17: 1041609.349 ops/s
# Warmup Iteration  18: 1046363.069 ops/s
# Warmup Iteration  19: 1035708.655 ops/s
# Warmup Iteration  20: 1039664.760 ops/s
# Warmup Iteration  21: 1047369.789 ops/s
# Warmup Iteration  22: 1045907.344 ops/s
# Warmup Iteration  23: 1022490.551 ops/s
# Warmup Iteration  24: 1042764.220 ops/s
# Warmup Iteration  25: 1040630.680 ops/s
# Warmup Iteration  26: 1044212.709 ops/s
# Warmup Iteration  27: 1034768.495 ops/s
# Warmup Iteration  28: 1043780.828 ops/s
# Warmup Iteration  29: 1037873.416 ops/s
# Warmup Iteration  30: 1040169.518 ops/s
Iteration   1: 1046165.962 ops/s
Iteration   2: 1047651.736 ops/s
Iteration   3: 1042204.771 ops/s
Iteration   4: 1030902.457 ops/s
Iteration   5: 1047835.302 ops/s
Iteration   6: 1039260.833 ops/s
Iteration   7: 1028467.417 ops/s
Iteration   8: 1046302.985 ops/s
Iteration   9: 1041174.590 ops/s
Iteration  10: 1044287.291 ops/s
Iteration  11: 1036564.374 ops/s
Iteration  12: 1042398.282 ops/s
Iteration  13: 1044277.123 ops/s
Iteration  14: 1037880.127 ops/s
Iteration  15: 1043034.579 ops/s
Iteration  16: 1042594.662 ops/s
Iteration  17: 1042015.401 ops/s
Iteration  18: 1049227.042 ops/s
Iteration  19: 1052045.018 ops/s
Iteration  20: 1051463.086 ops/s
Iteration  21: 1044513.253 ops/s
Iteration  22: 1043365.487 ops/s
Iteration  23: 1050152.858 ops/s
Iteration  24: 1039429.942 ops/s
Iteration  25: 1048579.478 ops/s
Iteration  26: 1043864.201 ops/s
Iteration  27: 1043813.184 ops/s
Iteration  28: 1047922.167 ops/s
Iteration  29: 1048185.840 ops/s
Iteration  30: 1040656.628 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_without":
  1043541.203 ±(99.9%) 3622.983 ops/s [Average]
  (min, avg, max) = (1028467.417, 1043541.203, 1052045.018), stdev = 5422.711
  CI (99.9%): [1039918.220, 1047164.185] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_without  thrpt   30  1043541.203 ± 3622.983  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 705505.700 ops/s
# Warmup Iteration   2: 729459.077 ops/s
# Warmup Iteration   3: 984264.883 ops/s
# Warmup Iteration   4: 982104.828 ops/s
# Warmup Iteration   5: 978803.012 ops/s
# Warmup Iteration   6: 986791.968 ops/s
# Warmup Iteration   7: 986824.660 ops/s
# Warmup Iteration   8: 982564.634 ops/s
# Warmup Iteration   9: 980667.758 ops/s
# Warmup Iteration  10: 983381.467 ops/s
# Warmup Iteration  11: 849111.416 ops/s
# Warmup Iteration  12: 956936.406 ops/s
# Warmup Iteration  13: 982599.315 ops/s
# Warmup Iteration  14: 985187.772 ops/s
# Warmup Iteration  15: 983836.304 ops/s
# Warmup Iteration  16: 985342.015 ops/s
# Warmup Iteration  17: 1040765.476 ops/s
# Warmup Iteration  18: 1047394.514 ops/s
# Warmup Iteration  19: 1031737.445 ops/s
# Warmup Iteration  20: 1048975.358 ops/s
# Warmup Iteration  21: 1048201.900 ops/s
# Warmup Iteration  22: 1030950.810 ops/s
# Warmup Iteration  23: 1037581.267 ops/s
# Warmup Iteration  24: 1041657.696 ops/s
# Warmup Iteration  25: 1046493.572 ops/s
# Warmup Iteration  26: 1045939.579 ops/s
# Warmup Iteration  27: 1037680.911 ops/s
# Warmup Iteration  28: 1040790.032 ops/s
# Warmup Iteration  29: 1038461.982 ops/s
# Warmup Iteration  30: 1045571.121 ops/s
Iteration   1: 1045692.791 ops/s
Iteration   2: 1039177.175 ops/s
Iteration   3: 1045505.032 ops/s
Iteration   4: 1039032.096 ops/s
Iteration   5: 1048285.682 ops/s
Iteration   6: 1048750.789 ops/s
Iteration   7: 1054081.228 ops/s
Iteration   8: 1047278.462 ops/s
Iteration   9: 1044490.455 ops/s
Iteration  10: 1041790.214 ops/s
Iteration  11: 1046245.271 ops/s
Iteration  12: 1049667.628 ops/s
Iteration  13: 1048775.262 ops/s
Iteration  14: 1042869.389 ops/s
Iteration  15: 1045745.769 ops/s
Iteration  16: 1045577.365 ops/s
Iteration  17: 1031628.954 ops/s
Iteration  18: 1043027.476 ops/s
Iteration  19: 1040905.116 ops/s
Iteration  20: 1043360.107 ops/s
Iteration  21: 1038208.167 ops/s
Iteration  22: 1036212.690 ops/s
Iteration  23: 1043218.150 ops/s
Iteration  24: 1039188.581 ops/s
Iteration  25: 1043970.016 ops/s
Iteration  26: 1040417.178 ops/s
Iteration  27: 1030892.349 ops/s
Iteration  28: 1027201.608 ops/s
Iteration  29: 1044537.532 ops/s
Iteration  30: 1045121.229 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_withoutAll":
  1042695.125 ±(99.9%) 3878.936 ops/s [Average]
  (min, avg, max) = (1027201.608, 1042695.125, 1054081.228), stdev = 5805.809
  CI (99.9%): [1038816.189, 1046574.061] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score      Error  Units
ObjectBooleanHashMapWithHashingStrategyValuesTest._Benchmark.benchmark_withoutAll  thrpt   30  1042695.125 ± 3878.936  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 701350.242 ops/s
# Warmup Iteration   2: 767069.813 ops/s
# Warmup Iteration   3: 1007347.621 ops/s
# Warmup Iteration   4: 997536.775 ops/s
# Warmup Iteration   5: 989337.749 ops/s
# Warmup Iteration   6: 1007156.990 ops/s
# Warmup Iteration   7: 992270.799 ops/s
# Warmup Iteration   8: 994155.894 ops/s
# Warmup Iteration   9: 1002608.516 ops/s
# Warmup Iteration  10: 898275.664 ops/s
# Warmup Iteration  11: 942445.902 ops/s
# Warmup Iteration  12: 1000682.827 ops/s
# Warmup Iteration  13: 1006767.721 ops/s
# Warmup Iteration  14: 1000051.884 ops/s
# Warmup Iteration  15: 1008489.943 ops/s
# Warmup Iteration  16: 998224.877 ops/s
# Warmup Iteration  17: 1064798.646 ops/s
# Warmup Iteration  18: 1058673.218 ops/s
# Warmup Iteration  19: 1062726.654 ops/s
# Warmup Iteration  20: 1067386.659 ops/s
# Warmup Iteration  21: 1070577.040 ops/s
# Warmup Iteration  22: 1064052.520 ops/s
# Warmup Iteration  23: 1066165.347 ops/s
# Warmup Iteration  24: 1052729.145 ops/s
# Warmup Iteration  25: 1069072.978 ops/s
# Warmup Iteration  26: 1067810.075 ops/s
# Warmup Iteration  27: 1069212.168 ops/s
# Warmup Iteration  28: 1067824.685 ops/s
# Warmup Iteration  29: 1065655.028 ops/s
# Warmup Iteration  30: 1063835.223 ops/s
Iteration   1: 1069520.235 ops/s
Iteration   2: 1057628.925 ops/s
Iteration   3: 1057723.198 ops/s
Iteration   4: 1058062.194 ops/s
Iteration   5: 1063650.462 ops/s
Iteration   6: 1052638.703 ops/s
Iteration   7: 1065923.956 ops/s
Iteration   8: 1053904.635 ops/s
Iteration   9: 1063265.742 ops/s
Iteration  10: 1066031.549 ops/s
Iteration  11: 1068859.172 ops/s
Iteration  12: 1065755.183 ops/s
Iteration  13: 1071477.139 ops/s
Iteration  14: 1063536.011 ops/s
Iteration  15: 1053838.959 ops/s
Iteration  16: 1070066.608 ops/s
Iteration  17: 1070937.519 ops/s
Iteration  18: 1068872.818 ops/s
Iteration  19: 1071397.238 ops/s
Iteration  20: 1070835.451 ops/s
Iteration  21: 1069128.105 ops/s
Iteration  22: 1069864.991 ops/s
Iteration  23: 1067682.027 ops/s
Iteration  24: 1064691.617 ops/s
Iteration  25: 1073461.399 ops/s
Iteration  26: 1053028.971 ops/s
Iteration  27: 1063836.905 ops/s
Iteration  28: 1071189.133 ops/s
Iteration  29: 1063215.464 ops/s
Iteration  30: 1069684.274 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_add":
  1064990.286 ±(99.9%) 4154.278 ops/s [Average]
  (min, avg, max) = (1052638.703, 1064990.286, 1073461.399), stdev = 6217.928
  CI (99.9%): [1060836.009, 1069144.564] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_add  thrpt   30  1064990.286 ± 4154.278  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 708809.483 ops/s
# Warmup Iteration   2: 764308.644 ops/s
# Warmup Iteration   3: 1010839.439 ops/s
# Warmup Iteration   4: 1013561.766 ops/s
# Warmup Iteration   5: 1013607.681 ops/s
# Warmup Iteration   6: 1011411.160 ops/s
# Warmup Iteration   7: 999236.923 ops/s
# Warmup Iteration   8: 1014214.900 ops/s
# Warmup Iteration   9: 1013174.225 ops/s
# Warmup Iteration  10: 880801.732 ops/s
# Warmup Iteration  11: 974262.211 ops/s
# Warmup Iteration  12: 1010716.786 ops/s
# Warmup Iteration  13: 1009338.074 ops/s
# Warmup Iteration  14: 1011951.211 ops/s
# Warmup Iteration  15: 1009368.416 ops/s
# Warmup Iteration  16: 1008384.075 ops/s
# Warmup Iteration  17: 1074817.174 ops/s
# Warmup Iteration  18: 1071866.764 ops/s
# Warmup Iteration  19: 1075669.108 ops/s
# Warmup Iteration  20: 1069561.332 ops/s
# Warmup Iteration  21: 1072369.068 ops/s
# Warmup Iteration  22: 1072482.458 ops/s
# Warmup Iteration  23: 1075582.666 ops/s
# Warmup Iteration  24: 1069498.719 ops/s
# Warmup Iteration  25: 1067689.140 ops/s
# Warmup Iteration  26: 1075916.382 ops/s
# Warmup Iteration  27: 1064850.133 ops/s
# Warmup Iteration  28: 1065714.985 ops/s
# Warmup Iteration  29: 1075588.414 ops/s
# Warmup Iteration  30: 1062451.442 ops/s
Iteration   1: 1074527.517 ops/s
Iteration   2: 1073278.012 ops/s
Iteration   3: 1064051.931 ops/s
Iteration   4: 1072301.011 ops/s
Iteration   5: 1073186.348 ops/s
Iteration   6: 1069059.181 ops/s
Iteration   7: 1072197.238 ops/s
Iteration   8: 1070820.852 ops/s
Iteration   9: 1069695.427 ops/s
Iteration  10: 1069876.564 ops/s
Iteration  11: 1073633.393 ops/s
Iteration  12: 1047766.985 ops/s
Iteration  13: 1066615.976 ops/s
Iteration  14: 1072347.379 ops/s
Iteration  15: 1072528.687 ops/s
Iteration  16: 1070319.940 ops/s
Iteration  17: 1074784.806 ops/s
Iteration  18: 1067718.242 ops/s
Iteration  19: 1067555.310 ops/s
Iteration  20: 1074641.367 ops/s
Iteration  21: 1073259.457 ops/s
Iteration  22: 1074781.063 ops/s
Iteration  23: 1070941.583 ops/s
Iteration  24: 1073694.787 ops/s
Iteration  25: 1074753.691 ops/s
Iteration  26: 1070973.040 ops/s
Iteration  27: 1061743.356 ops/s
Iteration  28: 1070928.167 ops/s
Iteration  29: 1072741.314 ops/s
Iteration  30: 1066389.431 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray":
  1070237.068 ±(99.9%) 3584.216 ops/s [Average]
  (min, avg, max) = (1047766.985, 1070237.068, 1074784.806), stdev = 5364.686
  CI (99.9%): [1066652.853, 1073821.284] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_addAllArray  thrpt   30  1070237.068 ± 3584.216  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 692211.286 ops/s
# Warmup Iteration   2: 752972.288 ops/s
# Warmup Iteration   3: 997817.358 ops/s
# Warmup Iteration   4: 989937.558 ops/s
# Warmup Iteration   5: 996612.592 ops/s
# Warmup Iteration   6: 996288.665 ops/s
# Warmup Iteration   7: 992259.218 ops/s
# Warmup Iteration   8: 987438.238 ops/s
# Warmup Iteration   9: 987244.416 ops/s
# Warmup Iteration  10: 914213.928 ops/s
# Warmup Iteration  11: 905025.412 ops/s
# Warmup Iteration  12: 994521.199 ops/s
# Warmup Iteration  13: 984759.623 ops/s
# Warmup Iteration  14: 988966.318 ops/s
# Warmup Iteration  15: 992742.757 ops/s
# Warmup Iteration  16: 988706.277 ops/s
# Warmup Iteration  17: 1052763.263 ops/s
# Warmup Iteration  18: 1053723.730 ops/s
# Warmup Iteration  19: 1053064.940 ops/s
# Warmup Iteration  20: 1056835.271 ops/s
# Warmup Iteration  21: 1041285.649 ops/s
# Warmup Iteration  22: 1045306.157 ops/s
# Warmup Iteration  23: 1054518.774 ops/s
# Warmup Iteration  24: 1056548.767 ops/s
# Warmup Iteration  25: 1055116.532 ops/s
# Warmup Iteration  26: 1054051.114 ops/s
# Warmup Iteration  27: 1056128.001 ops/s
# Warmup Iteration  28: 1053927.688 ops/s
# Warmup Iteration  29: 1052257.211 ops/s
# Warmup Iteration  30: 1052520.696 ops/s
Iteration   1: 1048222.410 ops/s
Iteration   2: 1036047.567 ops/s
Iteration   3: 1042632.447 ops/s
Iteration   4: 1061268.520 ops/s
Iteration   5: 1053592.296 ops/s
Iteration   6: 1047609.688 ops/s
Iteration   7: 1041737.319 ops/s
Iteration   8: 1028270.681 ops/s
Iteration   9: 1050046.623 ops/s
Iteration  10: 1053604.799 ops/s
Iteration  11: 1042102.641 ops/s
Iteration  12: 1053944.889 ops/s
Iteration  13: 1052449.722 ops/s
Iteration  14: 1055120.841 ops/s
Iteration  15: 1051018.917 ops/s
Iteration  16: 1036251.839 ops/s
Iteration  17: 1052162.142 ops/s
Iteration  18: 1046416.057 ops/s
Iteration  19: 1040261.446 ops/s
Iteration  20: 1061570.347 ops/s
Iteration  21: 1053479.868 ops/s
Iteration  22: 1045450.148 ops/s
Iteration  23: 1057461.997 ops/s
Iteration  24: 1037561.766 ops/s
Iteration  25: 1038737.405 ops/s
Iteration  26: 1056766.247 ops/s
Iteration  27: 1063179.958 ops/s
Iteration  28: 1053789.431 ops/s
Iteration  29: 1051309.997 ops/s
Iteration  30: 1052264.731 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable":
  1048811.091 ±(99.9%) 5639.069 ops/s [Average]
  (min, avg, max) = (1028270.681, 1048811.091, 1063179.958), stdev = 8440.294
  CI (99.9%): [1043172.022, 1054450.160] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_addAllIterable  thrpt   30  1048811.091 ± 5639.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2465571.500 ops/s
# Warmup Iteration   2: 4449661.236 ops/s
# Warmup Iteration   3: 5272830.244 ops/s
# Warmup Iteration   4: 5322576.333 ops/s
# Warmup Iteration   5: 5296378.365 ops/s
# Warmup Iteration   6: 5265949.517 ops/s
# Warmup Iteration   7: 5355533.497 ops/s
# Warmup Iteration   8: 5338144.350 ops/s
# Warmup Iteration   9: 5354809.135 ops/s
# Warmup Iteration  10: 5325601.647 ops/s
# Warmup Iteration  11: 5358649.976 ops/s
# Warmup Iteration  12: 5294214.265 ops/s
# Warmup Iteration  13: 5336061.552 ops/s
# Warmup Iteration  14: 5344119.237 ops/s
# Warmup Iteration  15: 5336801.249 ops/s
# Warmup Iteration  16: 5334229.813 ops/s
# Warmup Iteration  17: 5313907.687 ops/s
# Warmup Iteration  18: 5335713.041 ops/s
# Warmup Iteration  19: 5272491.902 ops/s
# Warmup Iteration  20: 5312115.660 ops/s
# Warmup Iteration  21: 5341858.041 ops/s
# Warmup Iteration  22: 5281227.938 ops/s
# Warmup Iteration  23: 5334389.513 ops/s
# Warmup Iteration  24: 5311231.490 ops/s
# Warmup Iteration  25: 5320515.079 ops/s
# Warmup Iteration  26: 5339541.955 ops/s
# Warmup Iteration  27: 5318689.923 ops/s
# Warmup Iteration  28: 5268179.175 ops/s
# Warmup Iteration  29: 5346509.460 ops/s
# Warmup Iteration  30: 5291510.660 ops/s
Iteration   1: 5309151.501 ops/s
Iteration   2: 5296681.727 ops/s
Iteration   3: 5211753.565 ops/s
Iteration   4: 5324579.672 ops/s
Iteration   5: 5339878.820 ops/s
Iteration   6: 5321768.873 ops/s
Iteration   7: 5356062.436 ops/s
Iteration   8: 5355492.680 ops/s
Iteration   9: 5352591.625 ops/s
Iteration  10: 5264898.080 ops/s
Iteration  11: 5282543.714 ops/s
Iteration  12: 5261864.941 ops/s
Iteration  13: 5319736.133 ops/s
Iteration  14: 5165621.916 ops/s
Iteration  15: 5318678.007 ops/s
Iteration  16: 5308948.160 ops/s
Iteration  17: 5318016.526 ops/s
Iteration  18: 5340568.215 ops/s
Iteration  19: 5327847.929 ops/s
Iteration  20: 5333456.298 ops/s
Iteration  21: 5310370.941 ops/s
Iteration  22: 5341448.417 ops/s
Iteration  23: 5324793.158 ops/s
Iteration  24: 5251783.172 ops/s
Iteration  25: 5323132.213 ops/s
Iteration  26: 5338398.055 ops/s
Iteration  27: 5336240.786 ops/s
Iteration  28: 5338935.627 ops/s
Iteration  29: 5348333.036 ops/s
Iteration  30: 5250346.708 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy":
  5309130.764 ±(99.9%) 29665.793 ops/s [Average]
  (min, avg, max) = (5165621.916, 5309130.764, 5356062.436), stdev = 44402.366
  CI (99.9%): [5279464.971, 5338796.558] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_allSatisfy  thrpt   30  5309130.764 ± 29665.793  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3011764.266 ops/s
# Warmup Iteration   2: 5372802.600 ops/s
# Warmup Iteration   3: 6311403.305 ops/s
# Warmup Iteration   4: 6316316.953 ops/s
# Warmup Iteration   5: 6311060.608 ops/s
# Warmup Iteration   6: 6343082.745 ops/s
# Warmup Iteration   7: 6304663.185 ops/s
# Warmup Iteration   8: 6331835.680 ops/s
# Warmup Iteration   9: 6351117.585 ops/s
# Warmup Iteration  10: 6302799.747 ops/s
# Warmup Iteration  11: 6302622.799 ops/s
# Warmup Iteration  12: 6295349.595 ops/s
# Warmup Iteration  13: 6320878.960 ops/s
# Warmup Iteration  14: 6321167.875 ops/s
# Warmup Iteration  15: 6342813.870 ops/s
# Warmup Iteration  16: 6347481.392 ops/s
# Warmup Iteration  17: 6296370.145 ops/s
# Warmup Iteration  18: 6292388.968 ops/s
# Warmup Iteration  19: 6312179.336 ops/s
# Warmup Iteration  20: 6158347.448 ops/s
# Warmup Iteration  21: 6269609.904 ops/s
# Warmup Iteration  22: 6298342.199 ops/s
# Warmup Iteration  23: 6268881.758 ops/s
# Warmup Iteration  24: 6258453.726 ops/s
# Warmup Iteration  25: 6338094.206 ops/s
# Warmup Iteration  26: 6315952.691 ops/s
# Warmup Iteration  27: 6321318.069 ops/s
# Warmup Iteration  28: 6277426.296 ops/s
# Warmup Iteration  29: 6300164.612 ops/s
# Warmup Iteration  30: 6311181.771 ops/s
Iteration   1: 6321581.260 ops/s
Iteration   2: 6336391.499 ops/s
Iteration   3: 6316817.891 ops/s
Iteration   4: 6327830.609 ops/s
Iteration   5: 6360166.356 ops/s
Iteration   6: 6249836.205 ops/s
Iteration   7: 6339201.497 ops/s
Iteration   8: 6325722.040 ops/s
Iteration   9: 6366333.451 ops/s
Iteration  10: 6335545.018 ops/s
Iteration  11: 6329065.686 ops/s
Iteration  12: 6315801.973 ops/s
Iteration  13: 6335654.088 ops/s
Iteration  14: 6291616.657 ops/s
Iteration  15: 6350939.133 ops/s
Iteration  16: 6273188.442 ops/s
Iteration  17: 6376709.985 ops/s
Iteration  18: 6315793.056 ops/s
Iteration  19: 6317956.032 ops/s
Iteration  20: 6322544.733 ops/s
Iteration  21: 6246659.173 ops/s
Iteration  22: 6376765.772 ops/s
Iteration  23: 6360113.817 ops/s
Iteration  24: 6309731.060 ops/s
Iteration  25: 6346477.320 ops/s
Iteration  26: 6263409.690 ops/s
Iteration  27: 6283494.807 ops/s
Iteration  28: 6332424.136 ops/s
Iteration  29: 6313613.524 ops/s
Iteration  30: 6266531.668 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy":
  6320263.886 ±(99.9%) 23479.548 ops/s [Average]
  (min, avg, max) = (6246659.173, 6320263.886, 6376765.772), stdev = 35143.085
  CI (99.9%): [6296784.338, 6343743.434] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_anySatisfy  thrpt   30  6320263.886 ± 23479.548  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 996849.435 ops/s
# Warmup Iteration   2: 2200813.077 ops/s
# Warmup Iteration   3: 1982710.950 ops/s
# Warmup Iteration   4: 1995767.164 ops/s
# Warmup Iteration   5: 2185373.236 ops/s
# Warmup Iteration   6: 2201136.682 ops/s
# Warmup Iteration   7: 2192439.897 ops/s
# Warmup Iteration   8: 2198229.469 ops/s
# Warmup Iteration   9: 2215054.091 ops/s
# Warmup Iteration  10: 2175121.765 ops/s
# Warmup Iteration  11: 2187436.868 ops/s
# Warmup Iteration  12: 2204837.868 ops/s
# Warmup Iteration  13: 2174359.252 ops/s
# Warmup Iteration  14: 2202611.670 ops/s
# Warmup Iteration  15: 2206209.831 ops/s
# Warmup Iteration  16: 2175289.414 ops/s
# Warmup Iteration  17: 2205355.097 ops/s
# Warmup Iteration  18: 2224728.226 ops/s
# Warmup Iteration  19: 2197787.511 ops/s
# Warmup Iteration  20: 2194525.961 ops/s
# Warmup Iteration  21: 2194184.873 ops/s
# Warmup Iteration  22: 2209431.294 ops/s
# Warmup Iteration  23: 2211628.014 ops/s
# Warmup Iteration  24: 2186951.125 ops/s
# Warmup Iteration  25: 2190462.103 ops/s
# Warmup Iteration  26: 2181830.618 ops/s
# Warmup Iteration  27: 2168080.194 ops/s
# Warmup Iteration  28: 2180175.854 ops/s
# Warmup Iteration  29: 2206293.550 ops/s
# Warmup Iteration  30: 2201009.784 ops/s
Iteration   1: 2218666.994 ops/s
Iteration   2: 2188296.972 ops/s
Iteration   3: 2189891.783 ops/s
Iteration   4: 2205560.708 ops/s
Iteration   5: 2197221.592 ops/s
Iteration   6: 2197030.048 ops/s
Iteration   7: 2197080.113 ops/s
Iteration   8: 2185928.498 ops/s
Iteration   9: 2177521.141 ops/s
Iteration  10: 2174308.610 ops/s
Iteration  11: 2154691.140 ops/s
Iteration  12: 2179351.801 ops/s
Iteration  13: 2185759.537 ops/s
Iteration  14: 2164592.513 ops/s
Iteration  15: 2149519.721 ops/s
Iteration  16: 2210319.595 ops/s
Iteration  17: 2179189.087 ops/s
Iteration  18: 2194299.588 ops/s
Iteration  19: 2208786.555 ops/s
Iteration  20: 2184093.587 ops/s
Iteration  21: 2189880.415 ops/s
Iteration  22: 2191854.378 ops/s
Iteration  23: 2200127.120 ops/s
Iteration  24: 2184699.605 ops/s
Iteration  25: 2196679.766 ops/s
Iteration  26: 2137495.447 ops/s
Iteration  27: 2201516.027 ops/s
Iteration  28: 2222101.312 ops/s
Iteration  29: 2188287.908 ops/s
Iteration  30: 2204029.665 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_appendString":
  2188626.041 ±(99.9%) 12699.057 ops/s [Average]
  (min, avg, max) = (2137495.447, 2188626.041, 2222101.312), stdev = 19007.352
  CI (99.9%): [2175926.984, 2201325.098] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_appendString  thrpt   30  2188626.041 ± 12699.057  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4136401.569 ops/s
# Warmup Iteration   2: 5143692.281 ops/s
# Warmup Iteration   3: 5540103.423 ops/s
# Warmup Iteration   4: 5547492.834 ops/s
# Warmup Iteration   5: 5543493.283 ops/s
# Warmup Iteration   6: 5425943.842 ops/s
# Warmup Iteration   7: 4710957.786 ops/s
# Warmup Iteration   8: 5524719.252 ops/s
# Warmup Iteration   9: 5550374.655 ops/s
# Warmup Iteration  10: 5541245.945 ops/s
# Warmup Iteration  11: 5533723.749 ops/s
# Warmup Iteration  12: 5528460.582 ops/s
# Warmup Iteration  13: 5531764.441 ops/s
# Warmup Iteration  14: 5568293.094 ops/s
# Warmup Iteration  15: 5542074.719 ops/s
# Warmup Iteration  16: 5556186.400 ops/s
# Warmup Iteration  17: 5537941.522 ops/s
# Warmup Iteration  18: 5542967.814 ops/s
# Warmup Iteration  19: 5516047.818 ops/s
# Warmup Iteration  20: 5547369.542 ops/s
# Warmup Iteration  21: 5544212.423 ops/s
# Warmup Iteration  22: 5536759.943 ops/s
# Warmup Iteration  23: 5534614.125 ops/s
# Warmup Iteration  24: 5542507.073 ops/s
# Warmup Iteration  25: 5537919.254 ops/s
# Warmup Iteration  26: 5543243.678 ops/s
# Warmup Iteration  27: 5546261.615 ops/s
# Warmup Iteration  28: 5551221.108 ops/s
# Warmup Iteration  29: 5546886.655 ops/s
# Warmup Iteration  30: 5551729.390 ops/s
Iteration   1: 5541673.821 ops/s
Iteration   2: 5534200.063 ops/s
Iteration   3: 5517275.804 ops/s
Iteration   4: 5530788.096 ops/s
Iteration   5: 5544289.805 ops/s
Iteration   6: 5545912.686 ops/s
Iteration   7: 5538347.114 ops/s
Iteration   8: 5538571.953 ops/s
Iteration   9: 5563380.119 ops/s
Iteration  10: 5549836.837 ops/s
Iteration  11: 5540093.315 ops/s
Iteration  12: 5546813.890 ops/s
Iteration  13: 5525153.748 ops/s
Iteration  14: 5539316.438 ops/s
Iteration  15: 5542604.560 ops/s
Iteration  16: 5543484.254 ops/s
Iteration  17: 5531053.251 ops/s
Iteration  18: 5535267.071 ops/s
Iteration  19: 5523550.583 ops/s
Iteration  20: 5538552.529 ops/s
Iteration  21: 5537067.145 ops/s
Iteration  22: 5536033.923 ops/s
Iteration  23: 5543599.800 ops/s
Iteration  24: 5539183.136 ops/s
Iteration  25: 5538402.929 ops/s
Iteration  26: 5534862.514 ops/s
Iteration  27: 5523035.986 ops/s
Iteration  28: 5532412.587 ops/s
Iteration  29: 5532606.330 ops/s
Iteration  30: 5558270.426 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_asLazy":
  5538188.024 ±(99.9%) 6449.978 ops/s [Average]
  (min, avg, max) = (5517275.804, 5538188.024, 5563380.119), stdev = 9654.024
  CI (99.9%): [5531738.046, 5544638.001] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_asLazy  thrpt   30  5538188.024 ± 6449.978  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6086489.057 ops/s
# Warmup Iteration   2: 12226294.004 ops/s
# Warmup Iteration   3: 10450130.862 ops/s
# Warmup Iteration   4: 12360488.135 ops/s
# Warmup Iteration   5: 12370404.184 ops/s
# Warmup Iteration   6: 12313120.858 ops/s
# Warmup Iteration   7: 12369500.863 ops/s
# Warmup Iteration   8: 12406978.876 ops/s
# Warmup Iteration   9: 12338248.416 ops/s
# Warmup Iteration  10: 12346371.584 ops/s
# Warmup Iteration  11: 12307446.102 ops/s
# Warmup Iteration  12: 12347115.892 ops/s
# Warmup Iteration  13: 12348226.725 ops/s
# Warmup Iteration  14: 12351706.911 ops/s
# Warmup Iteration  15: 12356860.941 ops/s
# Warmup Iteration  16: 12385648.403 ops/s
# Warmup Iteration  17: 12365042.308 ops/s
# Warmup Iteration  18: 12314942.806 ops/s
# Warmup Iteration  19: 12328761.403 ops/s
# Warmup Iteration  20: 12352522.155 ops/s
# Warmup Iteration  21: 12366753.927 ops/s
# Warmup Iteration  22: 12344564.415 ops/s
# Warmup Iteration  23: 12340023.205 ops/s
# Warmup Iteration  24: 12400263.819 ops/s
# Warmup Iteration  25: 12397142.776 ops/s
# Warmup Iteration  26: 12328864.572 ops/s
# Warmup Iteration  27: 12340118.072 ops/s
# Warmup Iteration  28: 12406657.799 ops/s
# Warmup Iteration  29: 12353378.740 ops/s
# Warmup Iteration  30: 12379123.556 ops/s
Iteration   1: 12300364.022 ops/s
Iteration   2: 12302074.803 ops/s
Iteration   3: 12354243.298 ops/s
Iteration   4: 12433196.307 ops/s
Iteration   5: 12398272.948 ops/s
Iteration   6: 12398537.469 ops/s
Iteration   7: 12349877.940 ops/s
Iteration   8: 12343389.888 ops/s
Iteration   9: 12290761.789 ops/s
Iteration  10: 12323953.289 ops/s
Iteration  11: 12337786.508 ops/s
Iteration  12: 12319704.607 ops/s
Iteration  13: 12350268.947 ops/s
Iteration  14: 12337128.650 ops/s
Iteration  15: 12434238.412 ops/s
Iteration  16: 12413753.106 ops/s
Iteration  17: 12301910.342 ops/s
Iteration  18: 12354682.023 ops/s
Iteration  19: 12322927.288 ops/s
Iteration  20: 12398245.150 ops/s
Iteration  21: 12366757.949 ops/s
Iteration  22: 12395317.344 ops/s
Iteration  23: 12328966.803 ops/s
Iteration  24: 12326818.808 ops/s
Iteration  25: 12312682.990 ops/s
Iteration  26: 12365690.012 ops/s
Iteration  27: 12378152.179 ops/s
Iteration  28: 12299712.545 ops/s
Iteration  29: 12304207.834 ops/s
Iteration  30: 12393713.173 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized":
  12351244.547 ±(99.9%) 27919.322 ops/s [Average]
  (min, avg, max) = (12290761.789, 12351244.547, 12434238.412), stdev = 41788.329
  CI (99.9%): [12323325.226, 12379163.869] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_asSynchronized  thrpt   30  12351244.547 ± 27919.322  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7040593.513 ops/s
# Warmup Iteration   2: 13910845.612 ops/s
# Warmup Iteration   3: 11919965.523 ops/s
# Warmup Iteration   4: 14150325.353 ops/s
# Warmup Iteration   5: 14110514.738 ops/s
# Warmup Iteration   6: 14060136.021 ops/s
# Warmup Iteration   7: 14197718.401 ops/s
# Warmup Iteration   8: 14063407.970 ops/s
# Warmup Iteration   9: 14054084.509 ops/s
# Warmup Iteration  10: 14078294.752 ops/s
# Warmup Iteration  11: 14086428.558 ops/s
# Warmup Iteration  12: 14160530.997 ops/s
# Warmup Iteration  13: 14169297.069 ops/s
# Warmup Iteration  14: 14064512.381 ops/s
# Warmup Iteration  15: 14156697.181 ops/s
# Warmup Iteration  16: 14062184.830 ops/s
# Warmup Iteration  17: 14155185.645 ops/s
# Warmup Iteration  18: 14083754.651 ops/s
# Warmup Iteration  19: 14062924.403 ops/s
# Warmup Iteration  20: 14081315.470 ops/s
# Warmup Iteration  21: 14069028.078 ops/s
# Warmup Iteration  22: 14096534.118 ops/s
# Warmup Iteration  23: 14079108.412 ops/s
# Warmup Iteration  24: 14126727.675 ops/s
# Warmup Iteration  25: 14124305.519 ops/s
# Warmup Iteration  26: 14108704.647 ops/s
# Warmup Iteration  27: 14113963.731 ops/s
# Warmup Iteration  28: 14158757.348 ops/s
# Warmup Iteration  29: 14098512.764 ops/s
# Warmup Iteration  30: 14099494.437 ops/s
Iteration   1: 14106186.966 ops/s
Iteration   2: 14153986.799 ops/s
Iteration   3: 14154109.967 ops/s
Iteration   4: 13976629.285 ops/s
Iteration   5: 14014952.993 ops/s
Iteration   6: 14131422.096 ops/s
Iteration   7: 14083482.495 ops/s
Iteration   8: 14101053.032 ops/s
Iteration   9: 14056211.267 ops/s
Iteration  10: 14067038.396 ops/s
Iteration  11: 14130837.371 ops/s
Iteration  12: 14019826.385 ops/s
Iteration  13: 14047065.726 ops/s
Iteration  14: 14147806.371 ops/s
Iteration  15: 14121462.680 ops/s
Iteration  16: 14066101.312 ops/s
Iteration  17: 14162038.684 ops/s
Iteration  18: 14077854.114 ops/s
Iteration  19: 14090547.250 ops/s
Iteration  20: 14031371.650 ops/s
Iteration  21: 14115746.291 ops/s
Iteration  22: 14092189.548 ops/s
Iteration  23: 14064575.726 ops/s
Iteration  24: 14025803.569 ops/s
Iteration  25: 14030884.182 ops/s
Iteration  26: 14076997.402 ops/s
Iteration  27: 14111350.047 ops/s
Iteration  28: 14064202.022 ops/s
Iteration  29: 14005625.739 ops/s
Iteration  30: 13966728.903 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable":
  14076469.609 ±(99.9%) 35015.570 ops/s [Average]
  (min, avg, max) = (13966728.903, 14076469.609, 14162038.684), stdev = 52409.661
  CI (99.9%): [14041454.039, 14111485.179] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  14076469.609 ± 35015.570  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 530661.982 ops/s
# Warmup Iteration   2: 563579.770 ops/s
# Warmup Iteration   3: 763505.596 ops/s
# Warmup Iteration   4: 758980.801 ops/s
# Warmup Iteration   5: 769280.476 ops/s
# Warmup Iteration   6: 764400.367 ops/s
# Warmup Iteration   7: 768193.172 ops/s
# Warmup Iteration   8: 765657.593 ops/s
# Warmup Iteration   9: 766806.681 ops/s
# Warmup Iteration  10: 765941.249 ops/s
# Warmup Iteration  11: 720244.001 ops/s
# Warmup Iteration  12: 681040.565 ops/s
# Warmup Iteration  13: 766763.221 ops/s
# Warmup Iteration  14: 766469.856 ops/s
# Warmup Iteration  15: 769081.032 ops/s
# Warmup Iteration  16: 767370.725 ops/s
# Warmup Iteration  17: 807338.090 ops/s
# Warmup Iteration  18: 803511.059 ops/s
# Warmup Iteration  19: 807837.198 ops/s
# Warmup Iteration  20: 806767.094 ops/s
# Warmup Iteration  21: 807488.226 ops/s
# Warmup Iteration  22: 805351.845 ops/s
# Warmup Iteration  23: 802853.717 ops/s
# Warmup Iteration  24: 805487.773 ops/s
# Warmup Iteration  25: 806496.707 ops/s
# Warmup Iteration  26: 803262.073 ops/s
# Warmup Iteration  27: 803503.093 ops/s
# Warmup Iteration  28: 803413.614 ops/s
# Warmup Iteration  29: 802781.263 ops/s
# Warmup Iteration  30: 804332.332 ops/s
Iteration   1: 801275.086 ops/s
Iteration   2: 803086.272 ops/s
Iteration   3: 808790.755 ops/s
Iteration   4: 807816.252 ops/s
Iteration   5: 803120.997 ops/s
Iteration   6: 800402.759 ops/s
Iteration   7: 802950.539 ops/s
Iteration   8: 803401.185 ops/s
Iteration   9: 805520.316 ops/s
Iteration  10: 805283.522 ops/s
Iteration  11: 804468.339 ops/s
Iteration  12: 801218.808 ops/s
Iteration  13: 807064.272 ops/s
Iteration  14: 798116.170 ops/s
Iteration  15: 805438.497 ops/s
Iteration  16: 804827.154 ops/s
Iteration  17: 804351.139 ops/s
Iteration  18: 806055.462 ops/s
Iteration  19: 802894.060 ops/s
Iteration  20: 806543.339 ops/s
Iteration  21: 806032.973 ops/s
Iteration  22: 802781.158 ops/s
Iteration  23: 803427.102 ops/s
Iteration  24: 803228.987 ops/s
Iteration  25: 800762.247 ops/s
Iteration  26: 800044.524 ops/s
Iteration  27: 804043.446 ops/s
Iteration  28: 805006.774 ops/s
Iteration  29: 805986.847 ops/s
Iteration  30: 805773.656 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator":
  803990.421 ±(99.9%) 1629.182 ops/s [Average]
  (min, avg, max) = (798116.170, 803990.421, 808790.755), stdev = 2438.483
  CI (99.9%): [802361.239, 805619.603] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator  thrpt   30  803990.421 ± 1629.182  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 530207.534 ops/s
# Warmup Iteration   2: 718407.909 ops/s
# Warmup Iteration   3: 860444.020 ops/s
# Warmup Iteration   4: 859884.689 ops/s
# Warmup Iteration   5: 856126.176 ops/s
# Warmup Iteration   6: 856563.597 ops/s
# Warmup Iteration   7: 850781.344 ops/s
# Warmup Iteration   8: 725779.282 ops/s
# Warmup Iteration   9: 857255.745 ops/s
# Warmup Iteration  10: 864306.825 ops/s
# Warmup Iteration  11: 858251.916 ops/s
# Warmup Iteration  12: 853033.768 ops/s
# Warmup Iteration  13: 860564.470 ops/s
# Warmup Iteration  14: 859664.091 ops/s
# Warmup Iteration  15: 861059.394 ops/s
# Warmup Iteration  16: 856613.765 ops/s
# Warmup Iteration  17: 909081.328 ops/s
# Warmup Iteration  18: 905415.396 ops/s
# Warmup Iteration  19: 903802.651 ops/s
# Warmup Iteration  20: 908095.247 ops/s
# Warmup Iteration  21: 906988.653 ops/s
# Warmup Iteration  22: 906691.600 ops/s
# Warmup Iteration  23: 908726.602 ops/s
# Warmup Iteration  24: 909133.453 ops/s
# Warmup Iteration  25: 907928.567 ops/s
# Warmup Iteration  26: 906292.801 ops/s
# Warmup Iteration  27: 907480.873 ops/s
# Warmup Iteration  28: 910142.993 ops/s
# Warmup Iteration  29: 906137.161 ops/s
# Warmup Iteration  30: 909237.401 ops/s
Iteration   1: 904698.276 ops/s
Iteration   2: 908791.331 ops/s
Iteration   3: 907501.279 ops/s
Iteration   4: 905827.901 ops/s
Iteration   5: 909593.181 ops/s
Iteration   6: 908147.991 ops/s
Iteration   7: 906667.352 ops/s
Iteration   8: 899273.698 ops/s
Iteration   9: 912652.337 ops/s
Iteration  10: 906423.471 ops/s
Iteration  11: 908833.612 ops/s
Iteration  12: 904297.342 ops/s
Iteration  13: 903246.540 ops/s
Iteration  14: 908654.764 ops/s
Iteration  15: 901386.071 ops/s
Iteration  16: 907221.251 ops/s
Iteration  17: 909832.566 ops/s
Iteration  18: 907354.853 ops/s
Iteration  19: 906933.251 ops/s
Iteration  20: 908838.581 ops/s
Iteration  21: 908477.471 ops/s
Iteration  22: 909823.685 ops/s
Iteration  23: 904875.423 ops/s
Iteration  24: 907000.256 ops/s
Iteration  25: 908266.397 ops/s
Iteration  26: 904590.838 ops/s
Iteration  27: 905267.226 ops/s
Iteration  28: 912341.586 ops/s
Iteration  29: 911866.104 ops/s
Iteration  30: 913508.756 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove":
  907406.446 ±(99.9%) 2132.895 ops/s [Average]
  (min, avg, max) = (899273.698, 907406.446, 913508.756), stdev = 3192.417
  CI (99.9%): [905273.551, 909539.341] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  907406.446 ± 2132.895  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 142262.724 ops/s
# Warmup Iteration   2: 239065.990 ops/s
# Warmup Iteration   3: 273209.296 ops/s
# Warmup Iteration   4: 274361.768 ops/s
# Warmup Iteration   5: 275101.702 ops/s
# Warmup Iteration   6: 228606.018 ops/s
# Warmup Iteration   7: 274452.525 ops/s
# Warmup Iteration   8: 274483.401 ops/s
# Warmup Iteration   9: 274663.971 ops/s
# Warmup Iteration  10: 274137.787 ops/s
# Warmup Iteration  11: 273071.551 ops/s
# Warmup Iteration  12: 274234.215 ops/s
# Warmup Iteration  13: 273884.920 ops/s
# Warmup Iteration  14: 273593.555 ops/s
# Warmup Iteration  15: 274329.504 ops/s
# Warmup Iteration  16: 273978.423 ops/s
# Warmup Iteration  17: 283812.451 ops/s
# Warmup Iteration  18: 283906.217 ops/s
# Warmup Iteration  19: 283327.365 ops/s
# Warmup Iteration  20: 281744.490 ops/s
# Warmup Iteration  21: 284073.143 ops/s
# Warmup Iteration  22: 283477.474 ops/s
# Warmup Iteration  23: 283846.190 ops/s
# Warmup Iteration  24: 283611.726 ops/s
# Warmup Iteration  25: 283639.278 ops/s
# Warmup Iteration  26: 284359.012 ops/s
# Warmup Iteration  27: 282367.231 ops/s
# Warmup Iteration  28: 283633.961 ops/s
# Warmup Iteration  29: 282786.047 ops/s
# Warmup Iteration  30: 283375.196 ops/s
Iteration   1: 283035.096 ops/s
Iteration   2: 284089.694 ops/s
Iteration   3: 283406.046 ops/s
Iteration   4: 283734.999 ops/s
Iteration   5: 283327.223 ops/s
Iteration   6: 283920.598 ops/s
Iteration   7: 283743.028 ops/s
Iteration   8: 284502.744 ops/s
Iteration   9: 283189.041 ops/s
Iteration  10: 284183.798 ops/s
Iteration  11: 282961.315 ops/s
Iteration  12: 283346.751 ops/s
Iteration  13: 280686.286 ops/s
Iteration  14: 281649.115 ops/s
Iteration  15: 281985.825 ops/s
Iteration  16: 282827.363 ops/s
Iteration  17: 283066.631 ops/s
Iteration  18: 281992.527 ops/s
Iteration  19: 283245.000 ops/s
Iteration  20: 282786.284 ops/s
Iteration  21: 281634.248 ops/s
Iteration  22: 281179.160 ops/s
Iteration  23: 282801.401 ops/s
Iteration  24: 281951.323 ops/s
Iteration  25: 282742.596 ops/s
Iteration  26: 281170.085 ops/s
Iteration  27: 282445.977 ops/s
Iteration  28: 283634.044 ops/s
Iteration  29: 282071.755 ops/s
Iteration  30: 282575.920 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_chunk":
  282796.196 ±(99.9%) 642.490 ops/s [Average]
  (min, avg, max) = (280686.286, 282796.196, 284502.744), stdev = 961.649
  CI (99.9%): [282153.706, 283438.686] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_chunk  thrpt   30  282796.196 ± 642.490  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4561074.621 ops/s
# Warmup Iteration   2: 8232704.228 ops/s
# Warmup Iteration   3: 8923332.116 ops/s
# Warmup Iteration   4: 9303808.161 ops/s
# Warmup Iteration   5: 9302693.900 ops/s
# Warmup Iteration   6: 9307579.750 ops/s
# Warmup Iteration   7: 9352126.164 ops/s
# Warmup Iteration   8: 9354979.927 ops/s
# Warmup Iteration   9: 9337070.976 ops/s
# Warmup Iteration  10: 9323062.777 ops/s
# Warmup Iteration  11: 9352724.598 ops/s
# Warmup Iteration  12: 9380239.708 ops/s
# Warmup Iteration  13: 9354541.879 ops/s
# Warmup Iteration  14: 9339486.381 ops/s
# Warmup Iteration  15: 9352436.133 ops/s
# Warmup Iteration  16: 9303920.398 ops/s
# Warmup Iteration  17: 9334604.643 ops/s
# Warmup Iteration  18: 9350381.386 ops/s
# Warmup Iteration  19: 9370232.493 ops/s
# Warmup Iteration  20: 9368033.057 ops/s
# Warmup Iteration  21: 9372843.359 ops/s
# Warmup Iteration  22: 9341838.445 ops/s
# Warmup Iteration  23: 9322777.885 ops/s
# Warmup Iteration  24: 9366997.563 ops/s
# Warmup Iteration  25: 9318360.701 ops/s
# Warmup Iteration  26: 9338873.920 ops/s
# Warmup Iteration  27: 9322489.339 ops/s
# Warmup Iteration  28: 9334291.192 ops/s
# Warmup Iteration  29: 9350989.498 ops/s
# Warmup Iteration  30: 9307885.843 ops/s
Iteration   1: 9406390.950 ops/s
Iteration   2: 9340578.998 ops/s
Iteration   3: 9343819.589 ops/s
Iteration   4: 9354574.949 ops/s
Iteration   5: 9377266.720 ops/s
Iteration   6: 9330638.578 ops/s
Iteration   7: 9335177.313 ops/s
Iteration   8: 9374698.482 ops/s
Iteration   9: 9354353.509 ops/s
Iteration  10: 9346382.453 ops/s
Iteration  11: 9301343.245 ops/s
Iteration  12: 9341076.223 ops/s
Iteration  13: 9378451.810 ops/s
Iteration  14: 9416282.129 ops/s
Iteration  15: 9383316.217 ops/s
Iteration  16: 9369654.348 ops/s
Iteration  17: 9354830.768 ops/s
Iteration  18: 9381972.547 ops/s
Iteration  19: 9389838.928 ops/s
Iteration  20: 9340867.695 ops/s
Iteration  21: 9335013.606 ops/s
Iteration  22: 9374582.616 ops/s
Iteration  23: 9319021.115 ops/s
Iteration  24: 9326906.012 ops/s
Iteration  25: 9395590.855 ops/s
Iteration  26: 9349689.394 ops/s
Iteration  27: 9376622.412 ops/s
Iteration  28: 9368339.056 ops/s
Iteration  29: 9361399.993 ops/s
Iteration  30: 9387201.950 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_clear":
  9360529.415 ±(99.9%) 17894.588 ops/s [Average]
  (min, avg, max) = (9301343.245, 9360529.415, 9416282.129), stdev = 26783.780
  CI (99.9%): [9342634.827, 9378424.004] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_clear  thrpt   30  9360529.415 ± 17894.588  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 743904.446 ops/s
# Warmup Iteration   2: 1879603.252 ops/s
# Warmup Iteration   3: 1934907.321 ops/s
# Warmup Iteration   4: 1593704.357 ops/s
# Warmup Iteration   5: 1942674.871 ops/s
# Warmup Iteration   6: 1937856.752 ops/s
# Warmup Iteration   7: 1929233.110 ops/s
# Warmup Iteration   8: 1923630.621 ops/s
# Warmup Iteration   9: 1933739.600 ops/s
# Warmup Iteration  10: 1930889.468 ops/s
# Warmup Iteration  11: 1931545.540 ops/s
# Warmup Iteration  12: 1936127.594 ops/s
# Warmup Iteration  13: 1930989.101 ops/s
# Warmup Iteration  14: 1928789.770 ops/s
# Warmup Iteration  15: 1927231.407 ops/s
# Warmup Iteration  16: 1929108.519 ops/s
# Warmup Iteration  17: 1939617.145 ops/s
# Warmup Iteration  18: 1939282.019 ops/s
# Warmup Iteration  19: 1945764.800 ops/s
# Warmup Iteration  20: 1941422.947 ops/s
# Warmup Iteration  21: 1935377.010 ops/s
# Warmup Iteration  22: 1934719.556 ops/s
# Warmup Iteration  23: 1944084.555 ops/s
# Warmup Iteration  24: 1940598.395 ops/s
# Warmup Iteration  25: 1940698.452 ops/s
# Warmup Iteration  26: 1935701.483 ops/s
# Warmup Iteration  27: 1941766.724 ops/s
# Warmup Iteration  28: 1933376.702 ops/s
# Warmup Iteration  29: 1939009.237 ops/s
# Warmup Iteration  30: 1937974.912 ops/s
Iteration   1: 1937738.790 ops/s
Iteration   2: 1933121.763 ops/s
Iteration   3: 1932548.847 ops/s
Iteration   4: 1946907.939 ops/s
Iteration   5: 1947059.204 ops/s
Iteration   6: 1946491.215 ops/s
Iteration   7: 1934933.991 ops/s
Iteration   8: 1941138.732 ops/s
Iteration   9: 1943659.327 ops/s
Iteration  10: 1942094.092 ops/s
Iteration  11: 1932811.766 ops/s
Iteration  12: 1942838.054 ops/s
Iteration  13: 1941045.281 ops/s
Iteration  14: 1941725.813 ops/s
Iteration  15: 1944562.362 ops/s
Iteration  16: 1942950.136 ops/s
Iteration  17: 1948116.730 ops/s
Iteration  18: 1933974.167 ops/s
Iteration  19: 1936928.841 ops/s
Iteration  20: 1948766.495 ops/s
Iteration  21: 1933282.738 ops/s
Iteration  22: 1948968.664 ops/s
Iteration  23: 1945687.944 ops/s
Iteration  24: 1938810.661 ops/s
Iteration  25: 1949537.995 ops/s
Iteration  26: 1942453.185 ops/s
Iteration  27: 1936938.317 ops/s
Iteration  28: 1941439.928 ops/s
Iteration  29: 1938372.424 ops/s
Iteration  30: 1937917.249 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_collect":
  1941094.088 ±(99.9%) 3537.494 ops/s [Average]
  (min, avg, max) = (1932548.847, 1941094.088, 1949537.995), stdev = 5294.755
  CI (99.9%): [1937556.594, 1944631.582] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_collect  thrpt   30  1941094.088 ± 3537.494  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4756873.593 ops/s
# Warmup Iteration   2: 8141784.984 ops/s
# Warmup Iteration   3: 9730260.770 ops/s
# Warmup Iteration   4: 9741647.962 ops/s
# Warmup Iteration   5: 9730261.180 ops/s
# Warmup Iteration   6: 9791475.962 ops/s
# Warmup Iteration   7: 9689175.539 ops/s
# Warmup Iteration   8: 9778326.185 ops/s
# Warmup Iteration   9: 9730232.103 ops/s
# Warmup Iteration  10: 9708203.246 ops/s
# Warmup Iteration  11: 9618127.523 ops/s
# Warmup Iteration  12: 9627171.222 ops/s
# Warmup Iteration  13: 9718888.402 ops/s
# Warmup Iteration  14: 9746708.094 ops/s
# Warmup Iteration  15: 9693484.185 ops/s
# Warmup Iteration  16: 9629380.836 ops/s
# Warmup Iteration  17: 9696448.556 ops/s
# Warmup Iteration  18: 9519917.555 ops/s
# Warmup Iteration  19: 9695270.417 ops/s
# Warmup Iteration  20: 9694722.123 ops/s
# Warmup Iteration  21: 9683998.678 ops/s
# Warmup Iteration  22: 9673054.613 ops/s
# Warmup Iteration  23: 9780720.189 ops/s
# Warmup Iteration  24: 9581778.320 ops/s
# Warmup Iteration  25: 9739955.377 ops/s
# Warmup Iteration  26: 9778560.981 ops/s
# Warmup Iteration  27: 9703203.849 ops/s
# Warmup Iteration  28: 9690125.762 ops/s
# Warmup Iteration  29: 9716245.822 ops/s
# Warmup Iteration  30: 9657112.027 ops/s
Iteration   1: 9842914.676 ops/s
Iteration   2: 9822225.885 ops/s
Iteration   3: 9755336.916 ops/s
Iteration   4: 9673868.993 ops/s
Iteration   5: 9779265.709 ops/s
Iteration   6: 9746680.630 ops/s
Iteration   7: 9673584.216 ops/s
Iteration   8: 9640142.209 ops/s
Iteration   9: 9698069.559 ops/s
Iteration  10: 9788115.405 ops/s
Iteration  11: 9667601.184 ops/s
Iteration  12: 9752306.251 ops/s
Iteration  13: 9755614.995 ops/s
Iteration  14: 9748774.350 ops/s
Iteration  15: 9723603.756 ops/s
Iteration  16: 9648046.118 ops/s
Iteration  17: 9555719.784 ops/s
Iteration  18: 9513146.576 ops/s
Iteration  19: 9742565.462 ops/s
Iteration  20: 9761521.536 ops/s
Iteration  21: 9787517.494 ops/s
Iteration  22: 9786829.750 ops/s
Iteration  23: 9701538.729 ops/s
Iteration  24: 9744026.416 ops/s
Iteration  25: 9707580.314 ops/s
Iteration  26: 9758742.667 ops/s
Iteration  27: 9771621.454 ops/s
Iteration  28: 9795638.497 ops/s
Iteration  29: 9804941.812 ops/s
Iteration  30: 9597137.827 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_contains":
  9724822.639 ±(99.9%) 51377.745 ops/s [Average]
  (min, avg, max) = (9513146.576, 9724822.639, 9842914.676), stdev = 76899.796
  CI (99.9%): [9673444.894, 9776200.384] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_contains  thrpt   30  9724822.639 ± 51377.745  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6966381.478 ops/s
# Warmup Iteration   2: 14146536.024 ops/s
# Warmup Iteration   3: 11915007.683 ops/s
# Warmup Iteration   4: 14017980.096 ops/s
# Warmup Iteration   5: 13986215.050 ops/s
# Warmup Iteration   6: 13974931.143 ops/s
# Warmup Iteration   7: 14064660.935 ops/s
# Warmup Iteration   8: 14062680.047 ops/s
# Warmup Iteration   9: 13903416.561 ops/s
# Warmup Iteration  10: 13989944.108 ops/s
# Warmup Iteration  11: 13972960.671 ops/s
# Warmup Iteration  12: 14047191.125 ops/s
# Warmup Iteration  13: 14048085.623 ops/s
# Warmup Iteration  14: 14057292.435 ops/s
# Warmup Iteration  15: 13980631.500 ops/s
# Warmup Iteration  16: 14063067.365 ops/s
# Warmup Iteration  17: 13920877.443 ops/s
# Warmup Iteration  18: 13974519.373 ops/s
# Warmup Iteration  19: 13845801.404 ops/s
# Warmup Iteration  20: 14003264.110 ops/s
# Warmup Iteration  21: 13971199.691 ops/s
# Warmup Iteration  22: 14023007.531 ops/s
# Warmup Iteration  23: 14157452.361 ops/s
# Warmup Iteration  24: 14119165.137 ops/s
# Warmup Iteration  25: 14156432.924 ops/s
# Warmup Iteration  26: 14141649.439 ops/s
# Warmup Iteration  27: 14070608.230 ops/s
# Warmup Iteration  28: 14074837.957 ops/s
# Warmup Iteration  29: 14103731.551 ops/s
# Warmup Iteration  30: 14106076.270 ops/s
Iteration   1: 14110549.235 ops/s
Iteration   2: 13985953.387 ops/s
Iteration   3: 14014525.657 ops/s
Iteration   4: 14126646.823 ops/s
Iteration   5: 13909138.369 ops/s
Iteration   6: 14139473.829 ops/s
Iteration   7: 13935894.171 ops/s
Iteration   8: 13860705.426 ops/s
Iteration   9: 14001496.057 ops/s
Iteration  10: 14088857.975 ops/s
Iteration  11: 14064334.239 ops/s
Iteration  12: 13922470.202 ops/s
Iteration  13: 14111248.851 ops/s
Iteration  14: 14080353.550 ops/s
Iteration  15: 13957664.499 ops/s
Iteration  16: 14125641.782 ops/s
Iteration  17: 14029778.298 ops/s
Iteration  18: 14119934.792 ops/s
Iteration  19: 13832586.432 ops/s
Iteration  20: 14080264.013 ops/s
Iteration  21: 14049460.248 ops/s
Iteration  22: 14086508.327 ops/s
Iteration  23: 14051830.433 ops/s
Iteration  24: 14117443.726 ops/s
Iteration  25: 13880303.036 ops/s
Iteration  26: 13984887.316 ops/s
Iteration  27: 13866511.395 ops/s
Iteration  28: 13995334.314 ops/s
Iteration  29: 14017118.223 ops/s
Iteration  30: 14142913.069 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray":
  14022994.256 ±(99.9%) 61753.077 ops/s [Average]
  (min, avg, max) = (13832586.432, 14022994.256, 14142913.069), stdev = 92429.106
  CI (99.9%): [13961241.178, 14084747.333] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsAllArray  thrpt   30  14022994.256 ± 61753.077  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4450496.495 ops/s
# Warmup Iteration   2: 8545662.341 ops/s
# Warmup Iteration   3: 9544070.177 ops/s
# Warmup Iteration   4: 9856236.830 ops/s
# Warmup Iteration   5: 9802748.225 ops/s
# Warmup Iteration   6: 9779891.296 ops/s
# Warmup Iteration   7: 9781025.972 ops/s
# Warmup Iteration   8: 9817137.589 ops/s
# Warmup Iteration   9: 9852374.326 ops/s
# Warmup Iteration  10: 9878523.791 ops/s
# Warmup Iteration  11: 9839397.116 ops/s
# Warmup Iteration  12: 9851562.361 ops/s
# Warmup Iteration  13: 9871669.384 ops/s
# Warmup Iteration  14: 9841402.538 ops/s
# Warmup Iteration  15: 9820880.274 ops/s
# Warmup Iteration  16: 9795062.945 ops/s
# Warmup Iteration  17: 9806840.126 ops/s
# Warmup Iteration  18: 9839213.364 ops/s
# Warmup Iteration  19: 9788814.791 ops/s
# Warmup Iteration  20: 9774602.406 ops/s
# Warmup Iteration  21: 9795032.124 ops/s
# Warmup Iteration  22: 9835926.974 ops/s
# Warmup Iteration  23: 9765659.558 ops/s
# Warmup Iteration  24: 9731832.212 ops/s
# Warmup Iteration  25: 9722095.073 ops/s
# Warmup Iteration  26: 9804621.542 ops/s
# Warmup Iteration  27: 9738156.110 ops/s
# Warmup Iteration  28: 9769294.651 ops/s
# Warmup Iteration  29: 9789387.812 ops/s
# Warmup Iteration  30: 9739311.151 ops/s
Iteration   1: 9742663.142 ops/s
Iteration   2: 9802398.351 ops/s
Iteration   3: 9744118.744 ops/s
Iteration   4: 9835672.219 ops/s
Iteration   5: 9691199.496 ops/s
Iteration   6: 9830246.053 ops/s
Iteration   7: 9704717.740 ops/s
Iteration   8: 9862895.862 ops/s
Iteration   9: 9756289.635 ops/s
Iteration  10: 9877380.792 ops/s
Iteration  11: 9808765.306 ops/s
Iteration  12: 9647362.908 ops/s
Iteration  13: 9891574.546 ops/s
Iteration  14: 9811203.133 ops/s
Iteration  15: 9812474.235 ops/s
Iteration  16: 9859804.092 ops/s
Iteration  17: 9867431.004 ops/s
Iteration  18: 9720938.398 ops/s
Iteration  19: 9857409.176 ops/s
Iteration  20: 9831449.277 ops/s
Iteration  21: 9617905.024 ops/s
Iteration  22: 9779949.446 ops/s
Iteration  23: 9779785.675 ops/s
Iteration  24: 9733832.682 ops/s
Iteration  25: 9852571.276 ops/s
Iteration  26: 9613474.649 ops/s
Iteration  27: 9838185.904 ops/s
Iteration  28: 9816671.958 ops/s
Iteration  29: 9818686.550 ops/s
Iteration  30: 9813359.934 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable":
  9787347.240 ±(99.9%) 50462.568 ops/s [Average]
  (min, avg, max) = (9613474.649, 9787347.240, 9891574.546), stdev = 75530.002
  CI (99.9%): [9736884.672, 9837809.808] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsAllIterable  thrpt   30  9787347.240 ± 50462.568  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3932221.209 ops/s
# Warmup Iteration   2: 8163371.441 ops/s
# Warmup Iteration   3: 7167800.199 ops/s
# Warmup Iteration   4: 8463951.775 ops/s
# Warmup Iteration   5: 8454808.407 ops/s
# Warmup Iteration   6: 8431648.204 ops/s
# Warmup Iteration   7: 8500017.527 ops/s
# Warmup Iteration   8: 8406322.294 ops/s
# Warmup Iteration   9: 8500598.301 ops/s
# Warmup Iteration  10: 8443096.548 ops/s
# Warmup Iteration  11: 8411185.103 ops/s
# Warmup Iteration  12: 8441216.556 ops/s
# Warmup Iteration  13: 8434730.875 ops/s
# Warmup Iteration  14: 8482749.917 ops/s
# Warmup Iteration  15: 8477705.848 ops/s
# Warmup Iteration  16: 8509801.026 ops/s
# Warmup Iteration  17: 8539671.380 ops/s
# Warmup Iteration  18: 8406654.380 ops/s
# Warmup Iteration  19: 8436790.370 ops/s
# Warmup Iteration  20: 8497097.567 ops/s
# Warmup Iteration  21: 8453065.971 ops/s
# Warmup Iteration  22: 8441907.450 ops/s
# Warmup Iteration  23: 8501438.598 ops/s
# Warmup Iteration  24: 8546167.793 ops/s
# Warmup Iteration  25: 8527715.027 ops/s
# Warmup Iteration  26: 8533434.606 ops/s
# Warmup Iteration  27: 8515396.570 ops/s
# Warmup Iteration  28: 8438075.319 ops/s
# Warmup Iteration  29: 8462667.153 ops/s
# Warmup Iteration  30: 8338439.335 ops/s
Iteration   1: 8528141.965 ops/s
Iteration   2: 8510767.106 ops/s
Iteration   3: 8469857.979 ops/s
Iteration   4: 8456045.255 ops/s
Iteration   5: 8497473.546 ops/s
Iteration   6: 8530260.229 ops/s
Iteration   7: 8530323.856 ops/s
Iteration   8: 8476467.375 ops/s
Iteration   9: 8424609.208 ops/s
Iteration  10: 8498793.927 ops/s
Iteration  11: 8531524.158 ops/s
Iteration  12: 8507073.592 ops/s
Iteration  13: 8524792.788 ops/s
Iteration  14: 8499500.644 ops/s
Iteration  15: 8484439.302 ops/s
Iteration  16: 8355109.688 ops/s
Iteration  17: 8518794.546 ops/s
Iteration  18: 8459305.125 ops/s
Iteration  19: 8538305.351 ops/s
Iteration  20: 8515159.785 ops/s
Iteration  21: 8485293.882 ops/s
Iteration  22: 8528550.937 ops/s
Iteration  23: 8487238.164 ops/s
Iteration  24: 8527563.892 ops/s
Iteration  25: 8462050.416 ops/s
Iteration  26: 8449350.721 ops/s
Iteration  27: 8549590.608 ops/s
Iteration  28: 8529125.737 ops/s
Iteration  29: 8521191.314 ops/s
Iteration  30: 8513264.178 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray":
  8496998.843 ±(99.9%) 27195.955 ops/s [Average]
  (min, avg, max) = (8355109.688, 8496998.843, 8549590.608), stdev = 40705.628
  CI (99.9%): [8469802.888, 8524194.797] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyArray  thrpt   30  8496998.843 ± 27195.955  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 629068.289 ops/s
# Warmup Iteration   2: 1023160.925 ops/s
# Warmup Iteration   3: 1148126.037 ops/s
# Warmup Iteration   4: 1150154.681 ops/s
# Warmup Iteration   5: 1152157.019 ops/s
# Warmup Iteration   6: 954495.642 ops/s
# Warmup Iteration   7: 1137787.369 ops/s
# Warmup Iteration   8: 1145894.452 ops/s
# Warmup Iteration   9: 1148597.182 ops/s
# Warmup Iteration  10: 1149985.441 ops/s
# Warmup Iteration  11: 1150319.916 ops/s
# Warmup Iteration  12: 1152440.169 ops/s
# Warmup Iteration  13: 1149097.935 ops/s
# Warmup Iteration  14: 1147078.858 ops/s
# Warmup Iteration  15: 1148601.540 ops/s
# Warmup Iteration  16: 1145863.975 ops/s
# Warmup Iteration  17: 1110722.724 ops/s
# Warmup Iteration  18: 1115035.235 ops/s
# Warmup Iteration  19: 1108883.054 ops/s
# Warmup Iteration  20: 1105780.276 ops/s
# Warmup Iteration  21: 1107690.924 ops/s
# Warmup Iteration  22: 1095761.403 ops/s
# Warmup Iteration  23: 1114351.489 ops/s
# Warmup Iteration  24: 1109634.394 ops/s
# Warmup Iteration  25: 1113871.448 ops/s
# Warmup Iteration  26: 1102845.371 ops/s
# Warmup Iteration  27: 1112412.380 ops/s
# Warmup Iteration  28: 1113839.907 ops/s
# Warmup Iteration  29: 1112527.240 ops/s
# Warmup Iteration  30: 1113509.198 ops/s
Iteration   1: 1110010.939 ops/s
Iteration   2: 1098659.029 ops/s
Iteration   3: 1111254.988 ops/s
Iteration   4: 1111099.056 ops/s
Iteration   5: 1104234.593 ops/s
Iteration   6: 1115201.505 ops/s
Iteration   7: 1112462.845 ops/s
Iteration   8: 1115399.791 ops/s
Iteration   9: 1112722.272 ops/s
Iteration  10: 1112080.625 ops/s
Iteration  11: 1116042.531 ops/s
Iteration  12: 1112114.665 ops/s
Iteration  13: 1109358.741 ops/s
Iteration  14: 1116908.815 ops/s
Iteration  15: 1113294.958 ops/s
Iteration  16: 1114451.028 ops/s
Iteration  17: 1116792.840 ops/s
Iteration  18: 1101255.376 ops/s
Iteration  19: 1117042.140 ops/s
Iteration  20: 1111947.308 ops/s
Iteration  21: 1113449.393 ops/s
Iteration  22: 1095974.202 ops/s
Iteration  23: 1093212.218 ops/s
Iteration  24: 1107367.367 ops/s
Iteration  25: 1110136.937 ops/s
Iteration  26: 1111717.462 ops/s
Iteration  27: 1109403.080 ops/s
Iteration  28: 1108465.817 ops/s
Iteration  29: 1110126.194 ops/s
Iteration  30: 1109708.499 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable":
  1110063.174 ±(99.9%) 3996.161 ops/s [Average]
  (min, avg, max) = (1093212.218, 1110063.174, 1117042.140), stdev = 5981.266
  CI (99.9%): [1106067.013, 1114059.335] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1110063.174 ± 3996.161  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4643105.779 ops/s
# Warmup Iteration   2: 8496983.777 ops/s
# Warmup Iteration   3: 9357425.895 ops/s
# Warmup Iteration   4: 9768824.613 ops/s
# Warmup Iteration   5: 9716477.715 ops/s
# Warmup Iteration   6: 9699720.881 ops/s
# Warmup Iteration   7: 9730637.917 ops/s
# Warmup Iteration   8: 9724801.512 ops/s
# Warmup Iteration   9: 9634281.816 ops/s
# Warmup Iteration  10: 9522858.430 ops/s
# Warmup Iteration  11: 9622930.094 ops/s
# Warmup Iteration  12: 9602459.727 ops/s
# Warmup Iteration  13: 9703076.579 ops/s
# Warmup Iteration  14: 9772919.773 ops/s
# Warmup Iteration  15: 9780978.952 ops/s
# Warmup Iteration  16: 9809653.815 ops/s
# Warmup Iteration  17: 9783301.843 ops/s
# Warmup Iteration  18: 9706362.239 ops/s
# Warmup Iteration  19: 9666958.487 ops/s
# Warmup Iteration  20: 9746273.944 ops/s
# Warmup Iteration  21: 9776166.751 ops/s
# Warmup Iteration  22: 9652708.623 ops/s
# Warmup Iteration  23: 9706592.357 ops/s
# Warmup Iteration  24: 9748517.332 ops/s
# Warmup Iteration  25: 9762305.944 ops/s
# Warmup Iteration  26: 9792281.847 ops/s
# Warmup Iteration  27: 9769151.692 ops/s
# Warmup Iteration  28: 9701074.017 ops/s
# Warmup Iteration  29: 9766221.706 ops/s
# Warmup Iteration  30: 9785421.168 ops/s
Iteration   1: 9777235.437 ops/s
Iteration   2: 9772067.215 ops/s
Iteration   3: 9805153.430 ops/s
Iteration   4: 9591146.616 ops/s
Iteration   5: 9785771.131 ops/s
Iteration   6: 9762449.730 ops/s
Iteration   7: 9758791.930 ops/s
Iteration   8: 9768238.280 ops/s
Iteration   9: 9736565.028 ops/s
Iteration  10: 9590116.980 ops/s
Iteration  11: 9637674.938 ops/s
Iteration  12: 9691176.941 ops/s
Iteration  13: 9740013.073 ops/s
Iteration  14: 9717801.780 ops/s
Iteration  15: 9729051.644 ops/s
Iteration  16: 9797522.996 ops/s
Iteration  17: 9826839.222 ops/s
Iteration  18: 9713978.103 ops/s
Iteration  19: 9767046.001 ops/s
Iteration  20: 9692331.348 ops/s
Iteration  21: 9709861.359 ops/s
Iteration  22: 9683180.372 ops/s
Iteration  23: 9753243.407 ops/s
Iteration  24: 9748155.143 ops/s
Iteration  25: 9675840.939 ops/s
Iteration  26: 9638391.925 ops/s
Iteration  27: 9685639.267 ops/s
Iteration  28: 9616733.695 ops/s
Iteration  29: 9599549.355 ops/s
Iteration  30: 9739913.019 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray":
  9717049.343 ±(99.9%) 43676.379 ops/s [Average]
  (min, avg, max) = (9590116.980, 9717049.343, 9826839.222), stdev = 65372.752
  CI (99.9%): [9673372.965, 9760725.722] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneArray  thrpt   30  9717049.343 ± 43676.379  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 580811.126 ops/s
# Warmup Iteration   2: 914494.176 ops/s
# Warmup Iteration   3: 1040297.557 ops/s
# Warmup Iteration   4: 1039335.672 ops/s
# Warmup Iteration   5: 1029928.084 ops/s
# Warmup Iteration   6: 916850.740 ops/s
# Warmup Iteration   7: 989387.894 ops/s
# Warmup Iteration   8: 1037449.410 ops/s
# Warmup Iteration   9: 1039157.358 ops/s
# Warmup Iteration  10: 1038685.136 ops/s
# Warmup Iteration  11: 1036344.333 ops/s
# Warmup Iteration  12: 1035269.273 ops/s
# Warmup Iteration  13: 1036185.119 ops/s
# Warmup Iteration  14: 1036785.367 ops/s
# Warmup Iteration  15: 1029825.170 ops/s
# Warmup Iteration  16: 1039022.293 ops/s
# Warmup Iteration  17: 1008571.560 ops/s
# Warmup Iteration  18: 1012769.067 ops/s
# Warmup Iteration  19: 1011774.399 ops/s
# Warmup Iteration  20: 1008379.508 ops/s
# Warmup Iteration  21: 1011075.957 ops/s
# Warmup Iteration  22: 1013135.092 ops/s
# Warmup Iteration  23: 998292.328 ops/s
# Warmup Iteration  24: 1007067.207 ops/s
# Warmup Iteration  25: 1005736.503 ops/s
# Warmup Iteration  26: 1011102.102 ops/s
# Warmup Iteration  27: 1006762.402 ops/s
# Warmup Iteration  28: 1006022.980 ops/s
# Warmup Iteration  29: 1007766.645 ops/s
# Warmup Iteration  30: 1011598.206 ops/s
Iteration   1: 1006939.285 ops/s
Iteration   2: 1011889.262 ops/s
Iteration   3: 1004405.306 ops/s
Iteration   4: 1008623.688 ops/s
Iteration   5: 1008860.800 ops/s
Iteration   6: 1012141.834 ops/s
Iteration   7: 1010850.046 ops/s
Iteration   8: 1013506.428 ops/s
Iteration   9: 991623.242 ops/s
Iteration  10: 1007857.814 ops/s
Iteration  11: 1009416.117 ops/s
Iteration  12: 1013527.571 ops/s
Iteration  13: 1010618.525 ops/s
Iteration  14: 1012421.987 ops/s
Iteration  15: 1009662.376 ops/s
Iteration  16: 1007820.774 ops/s
Iteration  17: 1004066.725 ops/s
Iteration  18: 998375.319 ops/s
Iteration  19: 1011387.737 ops/s
Iteration  20: 1011275.086 ops/s
Iteration  21: 1009765.347 ops/s
Iteration  22: 1009138.348 ops/s
Iteration  23: 1005690.747 ops/s
Iteration  24: 1010995.378 ops/s
Iteration  25: 1004683.403 ops/s
Iteration  26: 1007825.110 ops/s
Iteration  27: 997726.981 ops/s
Iteration  28: 1008137.228 ops/s
Iteration  29: 1011620.289 ops/s
Iteration  30: 1009013.565 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable":
  1007995.544 ±(99.9%) 3272.197 ops/s [Average]
  (min, avg, max) = (991623.242, 1007995.544, 1013527.571), stdev = 4897.671
  CI (99.9%): [1004723.347, 1011267.741] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  1007995.544 ± 3272.197  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1444820.735 ops/s
# Warmup Iteration   2: 3217429.932 ops/s
# Warmup Iteration   3: 3259896.045 ops/s
# Warmup Iteration   4: 2788187.388 ops/s
# Warmup Iteration   5: 3164801.880 ops/s
# Warmup Iteration   6: 3272347.143 ops/s
# Warmup Iteration   7: 3265862.811 ops/s
# Warmup Iteration   8: 3280035.088 ops/s
# Warmup Iteration   9: 3274060.049 ops/s
# Warmup Iteration  10: 3277137.126 ops/s
# Warmup Iteration  11: 3279574.921 ops/s
# Warmup Iteration  12: 3274390.065 ops/s
# Warmup Iteration  13: 3273817.683 ops/s
# Warmup Iteration  14: 3265907.116 ops/s
# Warmup Iteration  15: 3264512.784 ops/s
# Warmup Iteration  16: 3281184.098 ops/s
# Warmup Iteration  17: 3271630.018 ops/s
# Warmup Iteration  18: 3260633.666 ops/s
# Warmup Iteration  19: 3273565.395 ops/s
# Warmup Iteration  20: 3254740.889 ops/s
# Warmup Iteration  21: 3276435.029 ops/s
# Warmup Iteration  22: 3273638.367 ops/s
# Warmup Iteration  23: 3268468.805 ops/s
# Warmup Iteration  24: 3270925.789 ops/s
# Warmup Iteration  25: 3249092.886 ops/s
# Warmup Iteration  26: 3273297.415 ops/s
# Warmup Iteration  27: 3270820.569 ops/s
# Warmup Iteration  28: 3281836.256 ops/s
# Warmup Iteration  29: 3278382.811 ops/s
# Warmup Iteration  30: 3274010.760 ops/s
Iteration   1: 3289128.205 ops/s
Iteration   2: 3281535.863 ops/s
Iteration   3: 3245830.112 ops/s
Iteration   4: 3278411.926 ops/s
Iteration   5: 3279840.812 ops/s
Iteration   6: 3263933.738 ops/s
Iteration   7: 3272685.254 ops/s
Iteration   8: 3257205.206 ops/s
Iteration   9: 3270636.423 ops/s
Iteration  10: 3282906.413 ops/s
Iteration  11: 3286724.584 ops/s
Iteration  12: 3275851.339 ops/s
Iteration  13: 3294501.093 ops/s
Iteration  14: 3281901.338 ops/s
Iteration  15: 3276946.843 ops/s
Iteration  16: 3288742.150 ops/s
Iteration  17: 3272987.713 ops/s
Iteration  18: 3276351.865 ops/s
Iteration  19: 3286594.804 ops/s
Iteration  20: 3298335.402 ops/s
Iteration  21: 3279405.017 ops/s
Iteration  22: 3276071.015 ops/s
Iteration  23: 3265659.188 ops/s
Iteration  24: 3290320.938 ops/s
Iteration  25: 3303299.353 ops/s
Iteration  26: 3290497.495 ops/s
Iteration  27: 3295579.822 ops/s
Iteration  28: 3264860.443 ops/s
Iteration  29: 3283249.770 ops/s
Iteration  30: 3269219.379 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_count":
  3279307.117 ±(99.9%) 8371.200 ops/s [Average]
  (min, avg, max) = (3245830.112, 3279307.117, 3303299.353), stdev = 12529.619
  CI (99.9%): [3270935.917, 3287678.316] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_count  thrpt   30  3279307.117 ± 8371.200  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3130217.633 ops/s
# Warmup Iteration   2: 7172325.491 ops/s
# Warmup Iteration   3: 6009577.019 ops/s
# Warmup Iteration   4: 7243607.671 ops/s
# Warmup Iteration   5: 7208617.652 ops/s
# Warmup Iteration   6: 7215344.596 ops/s
# Warmup Iteration   7: 7199752.024 ops/s
# Warmup Iteration   8: 7205028.186 ops/s
# Warmup Iteration   9: 7209170.420 ops/s
# Warmup Iteration  10: 7216289.058 ops/s
# Warmup Iteration  11: 7188959.148 ops/s
# Warmup Iteration  12: 7203450.141 ops/s
# Warmup Iteration  13: 7206892.517 ops/s
# Warmup Iteration  14: 7227044.578 ops/s
# Warmup Iteration  15: 7225415.998 ops/s
# Warmup Iteration  16: 7245992.376 ops/s
# Warmup Iteration  17: 7238891.340 ops/s
# Warmup Iteration  18: 7225320.394 ops/s
# Warmup Iteration  19: 7219842.106 ops/s
# Warmup Iteration  20: 7204475.510 ops/s
# Warmup Iteration  21: 7213392.611 ops/s
# Warmup Iteration  22: 7221748.487 ops/s
# Warmup Iteration  23: 7190656.188 ops/s
# Warmup Iteration  24: 7203292.444 ops/s
# Warmup Iteration  25: 7206292.356 ops/s
# Warmup Iteration  26: 7205734.505 ops/s
# Warmup Iteration  27: 7187364.783 ops/s
# Warmup Iteration  28: 7209690.891 ops/s
# Warmup Iteration  29: 7182898.145 ops/s
# Warmup Iteration  30: 7218493.323 ops/s
Iteration   1: 7181309.337 ops/s
Iteration   2: 7241860.982 ops/s
Iteration   3: 7238577.539 ops/s
Iteration   4: 7212071.466 ops/s
Iteration   5: 7193203.760 ops/s
Iteration   6: 7193182.953 ops/s
Iteration   7: 7210138.751 ops/s
Iteration   8: 7214727.558 ops/s
Iteration   9: 7210235.902 ops/s
Iteration  10: 7203679.672 ops/s
Iteration  11: 7191553.492 ops/s
Iteration  12: 7189776.366 ops/s
Iteration  13: 7205247.820 ops/s
Iteration  14: 7227946.198 ops/s
Iteration  15: 7183781.549 ops/s
Iteration  16: 7263418.890 ops/s
Iteration  17: 7211302.681 ops/s
Iteration  18: 7235293.304 ops/s
Iteration  19: 7245868.202 ops/s
Iteration  20: 7200880.673 ops/s
Iteration  21: 7189409.467 ops/s
Iteration  22: 7193582.074 ops/s
Iteration  23: 7210029.777 ops/s
Iteration  24: 7181515.955 ops/s
Iteration  25: 7203587.560 ops/s
Iteration  26: 7186170.408 ops/s
Iteration  27: 7256762.894 ops/s
Iteration  28: 7257433.905 ops/s
Iteration  29: 7243478.738 ops/s
Iteration  30: 7181810.111 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone":
  7211927.933 ±(99.9%) 16777.366 ops/s [Average]
  (min, avg, max) = (7181309.337, 7211927.933, 7263418.890), stdev = 25111.574
  CI (99.9%): [7195150.567, 7228705.299] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_detectIfNone  thrpt   30  7211927.933 ± 16777.366  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3756609.144 ops/s
# Warmup Iteration   2: 8320029.478 ops/s
# Warmup Iteration   3: 6971237.829 ops/s
# Warmup Iteration   4: 8440414.851 ops/s
# Warmup Iteration   5: 8377515.350 ops/s
# Warmup Iteration   6: 8407404.193 ops/s
# Warmup Iteration   7: 8402190.128 ops/s
# Warmup Iteration   8: 8361823.669 ops/s
# Warmup Iteration   9: 8347042.063 ops/s
# Warmup Iteration  10: 8400005.240 ops/s
# Warmup Iteration  11: 8376112.922 ops/s
# Warmup Iteration  12: 8377675.747 ops/s
# Warmup Iteration  13: 8408576.594 ops/s
# Warmup Iteration  14: 8412042.649 ops/s
# Warmup Iteration  15: 8383991.115 ops/s
# Warmup Iteration  16: 8366542.329 ops/s
# Warmup Iteration  17: 8391452.333 ops/s
# Warmup Iteration  18: 8373655.496 ops/s
# Warmup Iteration  19: 8423884.361 ops/s
# Warmup Iteration  20: 8395008.094 ops/s
# Warmup Iteration  21: 8381993.586 ops/s
# Warmup Iteration  22: 8387122.329 ops/s
# Warmup Iteration  23: 8408482.404 ops/s
# Warmup Iteration  24: 8385306.649 ops/s
# Warmup Iteration  25: 8376352.458 ops/s
# Warmup Iteration  26: 8385036.416 ops/s
# Warmup Iteration  27: 8391285.316 ops/s
# Warmup Iteration  28: 8388092.015 ops/s
# Warmup Iteration  29: 8383397.060 ops/s
# Warmup Iteration  30: 8404888.153 ops/s
Iteration   1: 8363956.842 ops/s
Iteration   2: 8395481.597 ops/s
Iteration   3: 8380247.055 ops/s
Iteration   4: 8365427.618 ops/s
Iteration   5: 8317729.474 ops/s
Iteration   6: 8411454.296 ops/s
Iteration   7: 8420011.426 ops/s
Iteration   8: 8410259.225 ops/s
Iteration   9: 8396398.427 ops/s
Iteration  10: 8407898.856 ops/s
Iteration  11: 8395590.828 ops/s
Iteration  12: 8379799.293 ops/s
Iteration  13: 8365788.440 ops/s
Iteration  14: 8395763.454 ops/s
Iteration  15: 8407761.229 ops/s
Iteration  16: 8417623.102 ops/s
Iteration  17: 8379860.331 ops/s
Iteration  18: 8423759.410 ops/s
Iteration  19: 8347324.847 ops/s
Iteration  20: 8334341.392 ops/s
Iteration  21: 8372162.887 ops/s
Iteration  22: 8428781.131 ops/s
Iteration  23: 8366460.411 ops/s
Iteration  24: 8363901.477 ops/s
Iteration  25: 8352997.577 ops/s
Iteration  26: 8380297.125 ops/s
Iteration  27: 8380854.356 ops/s
Iteration  28: 8377211.335 ops/s
Iteration  29: 8382039.191 ops/s
Iteration  30: 8364952.151 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_forEach":
  8382871.159 ±(99.9%) 17846.377 ops/s [Average]
  (min, avg, max) = (8317729.474, 8382871.159, 8428781.131), stdev = 26711.620
  CI (99.9%): [8365024.782, 8400717.537] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_forEach  thrpt   30  8382871.159 ± 17846.377  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14340095.424 ops/s
# Warmup Iteration   2: 25363393.837 ops/s
# Warmup Iteration   3: 26457504.640 ops/s
# Warmup Iteration   4: 28370461.374 ops/s
# Warmup Iteration   5: 28354857.811 ops/s
# Warmup Iteration   6: 28410453.229 ops/s
# Warmup Iteration   7: 28274122.537 ops/s
# Warmup Iteration   8: 28398488.955 ops/s
# Warmup Iteration   9: 28318203.738 ops/s
# Warmup Iteration  10: 28311974.703 ops/s
# Warmup Iteration  11: 28319519.156 ops/s
# Warmup Iteration  12: 28303897.799 ops/s
# Warmup Iteration  13: 28133943.301 ops/s
# Warmup Iteration  14: 28301983.996 ops/s
# Warmup Iteration  15: 28265417.096 ops/s
# Warmup Iteration  16: 28329121.593 ops/s
# Warmup Iteration  17: 28226110.609 ops/s
# Warmup Iteration  18: 28339396.436 ops/s
# Warmup Iteration  19: 28307182.055 ops/s
# Warmup Iteration  20: 28311674.927 ops/s
# Warmup Iteration  21: 28413176.081 ops/s
# Warmup Iteration  22: 28360450.615 ops/s
# Warmup Iteration  23: 28331122.167 ops/s
# Warmup Iteration  24: 28242482.235 ops/s
# Warmup Iteration  25: 28306691.719 ops/s
# Warmup Iteration  26: 28537957.861 ops/s
# Warmup Iteration  27: 28336423.391 ops/s
# Warmup Iteration  28: 28290377.550 ops/s
# Warmup Iteration  29: 28287579.528 ops/s
# Warmup Iteration  30: 28326240.117 ops/s
Iteration   1: 28411295.753 ops/s
Iteration   2: 28412034.201 ops/s
Iteration   3: 28306759.961 ops/s
Iteration   4: 28460364.617 ops/s
Iteration   5: 28392706.188 ops/s
Iteration   6: 28384217.812 ops/s
Iteration   7: 28574151.504 ops/s
Iteration   8: 28475238.563 ops/s
Iteration   9: 28194979.578 ops/s
Iteration  10: 28401075.134 ops/s
Iteration  11: 28366431.356 ops/s
Iteration  12: 28458713.738 ops/s
Iteration  13: 28337334.337 ops/s
Iteration  14: 28464687.423 ops/s
Iteration  15: 28349713.891 ops/s
Iteration  16: 28337675.966 ops/s
Iteration  17: 28361982.626 ops/s
Iteration  18: 28546551.414 ops/s
Iteration  19: 28397654.652 ops/s
Iteration  20: 28301984.126 ops/s
Iteration  21: 28473537.329 ops/s
Iteration  22: 28326448.340 ops/s
Iteration  23: 28280890.343 ops/s
Iteration  24: 28288045.346 ops/s
Iteration  25: 27987474.869 ops/s
Iteration  26: 28377502.036 ops/s
Iteration  27: 28352474.256 ops/s
Iteration  28: 28196098.983 ops/s
Iteration  29: 28458002.364 ops/s
Iteration  30: 28292507.392 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_injectInto":
  28365617.803 ±(99.9%) 75881.122 ops/s [Average]
  (min, avg, max) = (27987474.869, 28365617.803, 28574151.504), stdev = 113575.299
  CI (99.9%): [28289736.682, 28441498.925] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_injectInto  thrpt   30  28365617.803 ± 75881.122  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1341336.444 ops/s
# Warmup Iteration   2: 2292847.912 ops/s
# Warmup Iteration   3: 2322929.290 ops/s
# Warmup Iteration   4: 2490454.461 ops/s
# Warmup Iteration   5: 2505156.241 ops/s
# Warmup Iteration   6: 2524272.719 ops/s
# Warmup Iteration   7: 2501441.264 ops/s
# Warmup Iteration   8: 2497020.886 ops/s
# Warmup Iteration   9: 2496540.704 ops/s
# Warmup Iteration  10: 2513434.476 ops/s
# Warmup Iteration  11: 2521039.097 ops/s
# Warmup Iteration  12: 2510672.879 ops/s
# Warmup Iteration  13: 2516147.158 ops/s
# Warmup Iteration  14: 2515961.182 ops/s
# Warmup Iteration  15: 2510609.746 ops/s
# Warmup Iteration  16: 2498665.878 ops/s
# Warmup Iteration  17: 2508194.509 ops/s
# Warmup Iteration  18: 2509609.962 ops/s
# Warmup Iteration  19: 2514147.511 ops/s
# Warmup Iteration  20: 2503539.599 ops/s
# Warmup Iteration  21: 2516699.196 ops/s
# Warmup Iteration  22: 2522781.871 ops/s
# Warmup Iteration  23: 2530623.699 ops/s
# Warmup Iteration  24: 2516691.825 ops/s
# Warmup Iteration  25: 2515470.423 ops/s
# Warmup Iteration  26: 2517719.979 ops/s
# Warmup Iteration  27: 2524020.710 ops/s
# Warmup Iteration  28: 2507150.487 ops/s
# Warmup Iteration  29: 2522971.159 ops/s
# Warmup Iteration  30: 2512957.277 ops/s
Iteration   1: 2499008.498 ops/s
Iteration   2: 2493655.311 ops/s
Iteration   3: 2496488.169 ops/s
Iteration   4: 2501869.882 ops/s
Iteration   5: 2492444.575 ops/s
Iteration   6: 2508046.479 ops/s
Iteration   7: 2532772.594 ops/s
Iteration   8: 2514665.603 ops/s
Iteration   9: 2520930.882 ops/s
Iteration  10: 2505303.230 ops/s
Iteration  11: 2529951.438 ops/s
Iteration  12: 2528461.573 ops/s
Iteration  13: 2516057.291 ops/s
Iteration  14: 2520944.261 ops/s
Iteration  15: 2511511.573 ops/s
Iteration  16: 2500894.391 ops/s
Iteration  17: 2518193.862 ops/s
Iteration  18: 2495792.696 ops/s
Iteration  19: 2501527.046 ops/s
Iteration  20: 2523396.264 ops/s
Iteration  21: 2520746.165 ops/s
Iteration  22: 2525173.376 ops/s
Iteration  23: 2518458.393 ops/s
Iteration  24: 2526233.419 ops/s
Iteration  25: 2485207.045 ops/s
Iteration  26: 2522780.407 ops/s
Iteration  27: 2523176.356 ops/s
Iteration  28: 2503889.098 ops/s
Iteration  29: 2517744.421 ops/s
Iteration  30: 2518573.856 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty":
  2512463.272 ±(99.9%) 8552.924 ops/s [Average]
  (min, avg, max) = (2485207.045, 2512463.272, 2532772.594), stdev = 12801.614
  CI (99.9%): [2503910.348, 2521016.195] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  2512463.272 ± 8552.924  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 663925.372 ops/s
# Warmup Iteration   2: 685377.991 ops/s
# Warmup Iteration   3: 860178.156 ops/s
# Warmup Iteration   4: 897430.908 ops/s
# Warmup Iteration   5: 894906.319 ops/s
# Warmup Iteration   6: 894863.345 ops/s
# Warmup Iteration   7: 896525.220 ops/s
# Warmup Iteration   8: 897153.003 ops/s
# Warmup Iteration   9: 895311.342 ops/s
# Warmup Iteration  10: 892305.727 ops/s
# Warmup Iteration  11: 895371.388 ops/s
# Warmup Iteration  12: 878006.163 ops/s
# Warmup Iteration  13: 764909.204 ops/s
# Warmup Iteration  14: 896506.134 ops/s
# Warmup Iteration  15: 895805.138 ops/s
# Warmup Iteration  16: 894097.028 ops/s
# Warmup Iteration  17: 947454.552 ops/s
# Warmup Iteration  18: 950575.944 ops/s
# Warmup Iteration  19: 949584.539 ops/s
# Warmup Iteration  20: 947899.733 ops/s
# Warmup Iteration  21: 951178.471 ops/s
# Warmup Iteration  22: 948369.159 ops/s
# Warmup Iteration  23: 946842.997 ops/s
# Warmup Iteration  24: 944984.832 ops/s
# Warmup Iteration  25: 945839.642 ops/s
# Warmup Iteration  26: 946526.730 ops/s
# Warmup Iteration  27: 947830.437 ops/s
# Warmup Iteration  28: 947725.538 ops/s
# Warmup Iteration  29: 946607.172 ops/s
# Warmup Iteration  30: 947667.937 ops/s
Iteration   1: 944144.479 ops/s
Iteration   2: 947843.080 ops/s
Iteration   3: 943282.574 ops/s
Iteration   4: 944338.806 ops/s
Iteration   5: 944321.486 ops/s
Iteration   6: 951186.803 ops/s
Iteration   7: 945154.118 ops/s
Iteration   8: 950817.786 ops/s
Iteration   9: 945308.334 ops/s
Iteration  10: 944502.911 ops/s
Iteration  11: 947883.143 ops/s
Iteration  12: 948089.228 ops/s
Iteration  13: 947413.252 ops/s
Iteration  14: 950249.204 ops/s
Iteration  15: 946251.123 ops/s
Iteration  16: 936750.837 ops/s
Iteration  17: 942407.828 ops/s
Iteration  18: 939100.500 ops/s
Iteration  19: 946743.808 ops/s
Iteration  20: 948919.651 ops/s
Iteration  21: 946867.313 ops/s
Iteration  22: 947204.627 ops/s
Iteration  23: 946016.436 ops/s
Iteration  24: 945442.534 ops/s
Iteration  25: 951841.159 ops/s
Iteration  26: 949674.356 ops/s
Iteration  27: 947652.327 ops/s
Iteration  28: 946647.539 ops/s
Iteration  29: 948575.289 ops/s
Iteration  30: 946698.034 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws":
  946377.619 ±(99.9%) 2193.660 ops/s [Average]
  (min, avg, max) = (936750.837, 946377.619, 951841.159), stdev = 3283.367
  CI (99.9%): [944183.959, 948571.279] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws  thrpt   30  946377.619 ± 2193.660  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 741029.870 ops/s
# Warmup Iteration   2: 757459.716 ops/s
# Warmup Iteration   3: 1027494.574 ops/s
# Warmup Iteration   4: 1017362.927 ops/s
# Warmup Iteration   5: 1020959.767 ops/s
# Warmup Iteration   6: 1020540.118 ops/s
# Warmup Iteration   7: 1017428.587 ops/s
# Warmup Iteration   8: 1018791.084 ops/s
# Warmup Iteration   9: 1023742.502 ops/s
# Warmup Iteration  10: 1015350.260 ops/s
# Warmup Iteration  11: 926807.657 ops/s
# Warmup Iteration  12: 941712.887 ops/s
# Warmup Iteration  13: 1013575.719 ops/s
# Warmup Iteration  14: 1015037.717 ops/s
# Warmup Iteration  15: 1014252.941 ops/s
# Warmup Iteration  16: 1013243.291 ops/s
# Warmup Iteration  17: 1078257.583 ops/s
# Warmup Iteration  18: 1079947.331 ops/s
# Warmup Iteration  19: 1074758.822 ops/s
# Warmup Iteration  20: 1080169.367 ops/s
# Warmup Iteration  21: 1076656.215 ops/s
# Warmup Iteration  22: 1079170.606 ops/s
# Warmup Iteration  23: 1077336.945 ops/s
# Warmup Iteration  24: 1073517.199 ops/s
# Warmup Iteration  25: 1074712.306 ops/s
# Warmup Iteration  26: 1080242.694 ops/s
# Warmup Iteration  27: 1078650.613 ops/s
# Warmup Iteration  28: 1081273.570 ops/s
# Warmup Iteration  29: 1077133.596 ops/s
# Warmup Iteration  30: 1077319.036 ops/s
Iteration   1: 1085026.873 ops/s
Iteration   2: 1075540.215 ops/s
Iteration   3: 1075607.983 ops/s
Iteration   4: 1076784.346 ops/s
Iteration   5: 1079423.640 ops/s
Iteration   6: 1076223.893 ops/s
Iteration   7: 1075515.656 ops/s
Iteration   8: 1073896.820 ops/s
Iteration   9: 1079179.004 ops/s
Iteration  10: 1081423.873 ops/s
Iteration  11: 1082515.252 ops/s
Iteration  12: 1085193.850 ops/s
Iteration  13: 1073201.862 ops/s
Iteration  14: 1076883.275 ops/s
Iteration  15: 1076831.072 ops/s
Iteration  16: 1081360.673 ops/s
Iteration  17: 1078785.776 ops/s
Iteration  18: 1077286.231 ops/s
Iteration  19: 1076805.562 ops/s
Iteration  20: 1074731.027 ops/s
Iteration  21: 1076252.519 ops/s
Iteration  22: 1072843.911 ops/s
Iteration  23: 1087225.307 ops/s
Iteration  24: 1072984.247 ops/s
Iteration  25: 1074251.309 ops/s
Iteration  26: 1074834.874 ops/s
Iteration  27: 1078084.041 ops/s
Iteration  28: 1072291.770 ops/s
Iteration  29: 1079534.904 ops/s
Iteration  30: 1071373.958 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList":
  1077396.457 ±(99.9%) 2655.508 ops/s [Average]
  (min, avg, max) = (1071373.958, 1077396.457, 1087225.307), stdev = 3974.639
  CI (99.9%): [1074740.950, 1080051.965] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1077396.457 ± 2655.508  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 724664.519 ops/s
# Warmup Iteration   2: 746148.723 ops/s
# Warmup Iteration   3: 1006683.496 ops/s
# Warmup Iteration   4: 1011758.501 ops/s
# Warmup Iteration   5: 1006884.420 ops/s
# Warmup Iteration   6: 1012808.236 ops/s
# Warmup Iteration   7: 1009759.061 ops/s
# Warmup Iteration   8: 1012604.256 ops/s
# Warmup Iteration   9: 1014055.550 ops/s
# Warmup Iteration  10: 1010848.016 ops/s
# Warmup Iteration  11: 973663.996 ops/s
# Warmup Iteration  12: 880198.777 ops/s
# Warmup Iteration  13: 1016372.600 ops/s
# Warmup Iteration  14: 1015760.800 ops/s
# Warmup Iteration  15: 1015157.547 ops/s
# Warmup Iteration  16: 1012429.632 ops/s
# Warmup Iteration  17: 1077400.889 ops/s
# Warmup Iteration  18: 1081983.883 ops/s
# Warmup Iteration  19: 1081965.659 ops/s
# Warmup Iteration  20: 1077397.244 ops/s
# Warmup Iteration  21: 1078982.063 ops/s
# Warmup Iteration  22: 1074542.183 ops/s
# Warmup Iteration  23: 1075312.409 ops/s
# Warmup Iteration  24: 1081653.641 ops/s
# Warmup Iteration  25: 1076726.851 ops/s
# Warmup Iteration  26: 1081022.850 ops/s
# Warmup Iteration  27: 1078424.125 ops/s
# Warmup Iteration  28: 1080346.620 ops/s
# Warmup Iteration  29: 1079745.003 ops/s
# Warmup Iteration  30: 1074646.606 ops/s
Iteration   1: 1072910.242 ops/s
Iteration   2: 1082127.691 ops/s
Iteration   3: 1083295.672 ops/s
Iteration   4: 1075558.428 ops/s
Iteration   5: 1081391.224 ops/s
Iteration   6: 1079372.331 ops/s
Iteration   7: 1073931.422 ops/s
Iteration   8: 1078020.115 ops/s
Iteration   9: 1076627.163 ops/s
Iteration  10: 1075002.515 ops/s
Iteration  11: 1082630.208 ops/s
Iteration  12: 1077495.865 ops/s
Iteration  13: 1075272.522 ops/s
Iteration  14: 1082877.208 ops/s
Iteration  15: 1078141.314 ops/s
Iteration  16: 1074045.841 ops/s
Iteration  17: 1073027.022 ops/s
Iteration  18: 1074353.998 ops/s
Iteration  19: 1080769.948 ops/s
Iteration  20: 1084462.654 ops/s
Iteration  21: 1080883.873 ops/s
Iteration  22: 1074540.259 ops/s
Iteration  23: 1085287.662 ops/s
Iteration  24: 1080548.635 ops/s
Iteration  25: 1081263.835 ops/s
Iteration  26: 1071271.203 ops/s
Iteration  27: 1079968.520 ops/s
Iteration  28: 1075248.169 ops/s
Iteration  29: 1072596.704 ops/s
Iteration  30: 1080982.528 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  1078130.159 ±(99.9%) 2656.985 ops/s [Average]
  (min, avg, max) = (1071271.203, 1078130.159, 1085287.662), stdev = 3976.850
  CI (99.9%): [1075473.174, 1080787.144] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  1078130.159 ± 2656.985  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 742735.056 ops/s
# Warmup Iteration   2: 790615.612 ops/s
# Warmup Iteration   3: 1028328.094 ops/s
# Warmup Iteration   4: 1029802.912 ops/s
# Warmup Iteration   5: 1028957.611 ops/s
# Warmup Iteration   6: 1027217.345 ops/s
# Warmup Iteration   7: 1027549.562 ops/s
# Warmup Iteration   8: 1031339.756 ops/s
# Warmup Iteration   9: 1028606.455 ops/s
# Warmup Iteration  10: 1028658.788 ops/s
# Warmup Iteration  11: 855633.119 ops/s
# Warmup Iteration  12: 1022966.644 ops/s
# Warmup Iteration  13: 1024615.135 ops/s
# Warmup Iteration  14: 1023561.225 ops/s
# Warmup Iteration  15: 1024635.536 ops/s
# Warmup Iteration  16: 1024551.985 ops/s
# Warmup Iteration  17: 1091468.771 ops/s
# Warmup Iteration  18: 1096423.422 ops/s
# Warmup Iteration  19: 1095808.339 ops/s
# Warmup Iteration  20: 1090909.324 ops/s
# Warmup Iteration  21: 1096011.549 ops/s
# Warmup Iteration  22: 1094840.681 ops/s
# Warmup Iteration  23: 1089267.287 ops/s
# Warmup Iteration  24: 1091668.952 ops/s
# Warmup Iteration  25: 1089769.633 ops/s
# Warmup Iteration  26: 1093886.338 ops/s
# Warmup Iteration  27: 1101261.633 ops/s
# Warmup Iteration  28: 1098869.497 ops/s
# Warmup Iteration  29: 1096430.773 ops/s
# Warmup Iteration  30: 1094014.853 ops/s
Iteration   1: 1095594.977 ops/s
Iteration   2: 1091121.036 ops/s
Iteration   3: 1095267.307 ops/s
Iteration   4: 1091004.771 ops/s
Iteration   5: 1093752.471 ops/s
Iteration   6: 1095269.118 ops/s
Iteration   7: 1094149.371 ops/s
Iteration   8: 1096238.221 ops/s
Iteration   9: 1092067.853 ops/s
Iteration  10: 1090368.078 ops/s
Iteration  11: 1096855.708 ops/s
Iteration  12: 1088325.376 ops/s
Iteration  13: 1093700.542 ops/s
Iteration  14: 1094939.231 ops/s
Iteration  15: 1092868.380 ops/s
Iteration  16: 1094543.214 ops/s
Iteration  17: 1098949.471 ops/s
Iteration  18: 1093975.961 ops/s
Iteration  19: 1092114.553 ops/s
Iteration  20: 1097300.990 ops/s
Iteration  21: 1100178.098 ops/s
Iteration  22: 1093582.112 ops/s
Iteration  23: 1095071.180 ops/s
Iteration  24: 1098082.524 ops/s
Iteration  25: 1101975.985 ops/s
Iteration  26: 1093923.000 ops/s
Iteration  27: 1094052.703 ops/s
Iteration  28: 1092781.286 ops/s
Iteration  29: 1088921.351 ops/s
Iteration  30: 1088033.126 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  1094166.933 ±(99.9%) 2179.881 ops/s [Average]
  (min, avg, max) = (1088033.126, 1094166.933, 1101975.985), stdev = 3262.744
  CI (99.9%): [1091987.052, 1096346.815] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                Mode  Cnt        Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  1094166.933 ± 2179.881  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 753826.002 ops/s
# Warmup Iteration   2: 791608.104 ops/s
# Warmup Iteration   3: 1029380.573 ops/s
# Warmup Iteration   4: 1034125.805 ops/s
# Warmup Iteration   5: 1034159.327 ops/s
# Warmup Iteration   6: 1024904.635 ops/s
# Warmup Iteration   7: 1032025.453 ops/s
# Warmup Iteration   8: 1033422.417 ops/s
# Warmup Iteration   9: 1033076.164 ops/s
# Warmup Iteration  10: 1032133.298 ops/s
# Warmup Iteration  11: 851496.590 ops/s
# Warmup Iteration  12: 1027978.445 ops/s
# Warmup Iteration  13: 1025657.770 ops/s
# Warmup Iteration  14: 1030879.839 ops/s
# Warmup Iteration  15: 1030028.495 ops/s
# Warmup Iteration  16: 1033948.009 ops/s
# Warmup Iteration  17: 1091800.418 ops/s
# Warmup Iteration  18: 1098027.204 ops/s
# Warmup Iteration  19: 1099900.469 ops/s
# Warmup Iteration  20: 1102298.596 ops/s
# Warmup Iteration  21: 1102110.023 ops/s
# Warmup Iteration  22: 1101181.992 ops/s
# Warmup Iteration  23: 1099733.278 ops/s
# Warmup Iteration  24: 1096863.283 ops/s
# Warmup Iteration  25: 1100354.762 ops/s
# Warmup Iteration  26: 1091731.729 ops/s
# Warmup Iteration  27: 1090495.166 ops/s
# Warmup Iteration  28: 1093534.413 ops/s
# Warmup Iteration  29: 1099076.012 ops/s
# Warmup Iteration  30: 1102816.493 ops/s
Iteration   1: 1102923.335 ops/s
Iteration   2: 1097334.708 ops/s
Iteration   3: 1078998.373 ops/s
Iteration   4: 1102763.517 ops/s
Iteration   5: 1100017.528 ops/s
Iteration   6: 1090374.413 ops/s
Iteration   7: 1101476.865 ops/s
Iteration   8: 1101723.662 ops/s
Iteration   9: 1100475.949 ops/s
Iteration  10: 1096265.136 ops/s
Iteration  11: 1105229.335 ops/s
Iteration  12: 1102527.392 ops/s
Iteration  13: 1097806.599 ops/s
Iteration  14: 1101015.149 ops/s
Iteration  15: 1096674.441 ops/s
Iteration  16: 1101533.668 ops/s
Iteration  17: 1103693.462 ops/s
Iteration  18: 1097692.258 ops/s
Iteration  19: 1100749.601 ops/s
Iteration  20: 1102749.622 ops/s
Iteration  21: 1106478.899 ops/s
Iteration  22: 1103135.204 ops/s
Iteration  23: 1104924.260 ops/s
Iteration  24: 1094611.357 ops/s
Iteration  25: 1096567.570 ops/s
Iteration  26: 1097973.182 ops/s
Iteration  27: 1098655.623 ops/s
Iteration  28: 1100775.089 ops/s
Iteration  29: 1096934.137 ops/s
Iteration  30: 1101409.042 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1099449.646 ±(99.9%) 3469.618 ops/s [Average]
  (min, avg, max) = (1078998.373, 1099449.646, 1106478.899), stdev = 5193.161
  CI (99.9%): [1095980.028, 1102919.264] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                Mode  Cnt        Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1099449.646 ± 3469.618  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 895034.017 ops/s
# Warmup Iteration   2: 1895476.384 ops/s
# Warmup Iteration   3: 1834049.754 ops/s
# Warmup Iteration   4: 1687390.501 ops/s
# Warmup Iteration   5: 1937665.720 ops/s
# Warmup Iteration   6: 1918947.798 ops/s
# Warmup Iteration   7: 1899950.541 ops/s
# Warmup Iteration   8: 1941953.031 ops/s
# Warmup Iteration   9: 1936480.875 ops/s
# Warmup Iteration  10: 1916853.829 ops/s
# Warmup Iteration  11: 1911031.843 ops/s
# Warmup Iteration  12: 1927709.897 ops/s
# Warmup Iteration  13: 1933786.031 ops/s
# Warmup Iteration  14: 1923440.139 ops/s
# Warmup Iteration  15: 1941006.497 ops/s
# Warmup Iteration  16: 1930259.136 ops/s
# Warmup Iteration  17: 1925901.730 ops/s
# Warmup Iteration  18: 1911789.950 ops/s
# Warmup Iteration  19: 1917302.307 ops/s
# Warmup Iteration  20: 1930064.374 ops/s
# Warmup Iteration  21: 1910511.251 ops/s
# Warmup Iteration  22: 1921764.126 ops/s
# Warmup Iteration  23: 1938690.070 ops/s
# Warmup Iteration  24: 1942669.973 ops/s
# Warmup Iteration  25: 1946812.075 ops/s
# Warmup Iteration  26: 1931448.927 ops/s
# Warmup Iteration  27: 1919505.574 ops/s
# Warmup Iteration  28: 1916335.100 ops/s
# Warmup Iteration  29: 1931171.041 ops/s
# Warmup Iteration  30: 1911573.422 ops/s
Iteration   1: 1932047.223 ops/s
Iteration   2: 1915621.588 ops/s
Iteration   3: 1926507.053 ops/s
Iteration   4: 1929342.198 ops/s
Iteration   5: 1923245.034 ops/s
Iteration   6: 1926606.341 ops/s
Iteration   7: 1948791.911 ops/s
Iteration   8: 1926521.205 ops/s
Iteration   9: 1908928.665 ops/s
Iteration  10: 1954430.592 ops/s
Iteration  11: 1923535.096 ops/s
Iteration  12: 1931034.161 ops/s
Iteration  13: 1952833.729 ops/s
Iteration  14: 1945590.663 ops/s
Iteration  15: 1936061.995 ops/s
Iteration  16: 1936806.942 ops/s
Iteration  17: 1916659.942 ops/s
Iteration  18: 1931144.730 ops/s
Iteration  19: 1950360.595 ops/s
Iteration  20: 1938887.362 ops/s
Iteration  21: 1915305.009 ops/s
Iteration  22: 1907741.402 ops/s
Iteration  23: 1929678.847 ops/s
Iteration  24: 1920995.321 ops/s
Iteration  25: 1912085.211 ops/s
Iteration  26: 1890929.497 ops/s
Iteration  27: 1913094.668 ops/s
Iteration  28: 1941144.307 ops/s
Iteration  29: 1921182.613 ops/s
Iteration  30: 1927715.142 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_makeString":
  1927827.635 ±(99.9%) 9801.485 ops/s [Average]
  (min, avg, max) = (1890929.497, 1927827.635, 1954430.592), stdev = 14670.403
  CI (99.9%): [1918026.150, 1937629.120] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_makeString  thrpt   30  1927827.635 ± 9801.485  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 165017053.665 ops/s
# Warmup Iteration   2: 298301678.087 ops/s
# Warmup Iteration   3: 240668257.364 ops/s
# Warmup Iteration   4: 279610040.319 ops/s
# Warmup Iteration   5: 280926099.756 ops/s
# Warmup Iteration   6: 280591781.499 ops/s
# Warmup Iteration   7: 280711996.455 ops/s
# Warmup Iteration   8: 280959107.953 ops/s
# Warmup Iteration   9: 282228532.516 ops/s
# Warmup Iteration  10: 281922827.126 ops/s
# Warmup Iteration  11: 280491671.388 ops/s
# Warmup Iteration  12: 282381100.175 ops/s
# Warmup Iteration  13: 280727103.747 ops/s
# Warmup Iteration  14: 279815055.935 ops/s
# Warmup Iteration  15: 280546633.989 ops/s
# Warmup Iteration  16: 280379514.195 ops/s
# Warmup Iteration  17: 280666198.141 ops/s
# Warmup Iteration  18: 280444508.688 ops/s
# Warmup Iteration  19: 281020670.029 ops/s
# Warmup Iteration  20: 280202055.379 ops/s
# Warmup Iteration  21: 278650723.244 ops/s
# Warmup Iteration  22: 280381504.919 ops/s
# Warmup Iteration  23: 281319078.598 ops/s
# Warmup Iteration  24: 281897665.746 ops/s
# Warmup Iteration  25: 280682067.457 ops/s
# Warmup Iteration  26: 280985488.839 ops/s
# Warmup Iteration  27: 281272969.681 ops/s
# Warmup Iteration  28: 279989289.461 ops/s
# Warmup Iteration  29: 280541194.436 ops/s
# Warmup Iteration  30: 281544135.869 ops/s
Iteration   1: 283135770.328 ops/s
Iteration   2: 281843950.864 ops/s
Iteration   3: 283410239.038 ops/s
Iteration   4: 276898652.092 ops/s
Iteration   5: 280013631.733 ops/s
Iteration   6: 282624793.750 ops/s
Iteration   7: 281593110.961 ops/s
Iteration   8: 281122167.858 ops/s
Iteration   9: 283117998.651 ops/s
Iteration  10: 280149515.592 ops/s
Iteration  11: 281925099.353 ops/s
Iteration  12: 281066238.125 ops/s
Iteration  13: 279001708.655 ops/s
Iteration  14: 271216591.720 ops/s
Iteration  15: 279994560.870 ops/s
Iteration  16: 277066327.055 ops/s
Iteration  17: 281333720.529 ops/s
Iteration  18: 282847371.383 ops/s
Iteration  19: 282459587.359 ops/s
Iteration  20: 279258913.914 ops/s
Iteration  21: 281198858.267 ops/s
Iteration  22: 280697782.719 ops/s
Iteration  23: 280709900.923 ops/s
Iteration  24: 276605926.167 ops/s
Iteration  25: 282345398.604 ops/s
Iteration  26: 280617582.739 ops/s
Iteration  27: 280446775.441 ops/s
Iteration  28: 275832837.914 ops/s
Iteration  29: 277945546.470 ops/s
Iteration  30: 282319938.753 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_newCollection":
  280293349.928 ±(99.9%) 1786749.829 ops/s [Average]
  (min, avg, max) = (271216591.720, 280293349.928, 283410239.038), stdev = 2674323.232
  CI (99.9%): [278506600.098, 282080099.757] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt          Score         Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_newCollection  thrpt   30  280293349.928 ± 1786749.829  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3919158.415 ops/s
# Warmup Iteration   2: 6823367.612 ops/s
# Warmup Iteration   3: 7970716.519 ops/s
# Warmup Iteration   4: 7975183.591 ops/s
# Warmup Iteration   5: 8033146.844 ops/s
# Warmup Iteration   6: 8005561.059 ops/s
# Warmup Iteration   7: 8165812.551 ops/s
# Warmup Iteration   8: 8138953.574 ops/s
# Warmup Iteration   9: 8085486.703 ops/s
# Warmup Iteration  10: 8118430.881 ops/s
# Warmup Iteration  11: 8099165.434 ops/s
# Warmup Iteration  12: 8075051.623 ops/s
# Warmup Iteration  13: 8161419.167 ops/s
# Warmup Iteration  14: 8048867.841 ops/s
# Warmup Iteration  15: 8059084.259 ops/s
# Warmup Iteration  16: 8094388.844 ops/s
# Warmup Iteration  17: 8007272.747 ops/s
# Warmup Iteration  18: 8125167.257 ops/s
# Warmup Iteration  19: 8139863.646 ops/s
# Warmup Iteration  20: 8048403.149 ops/s
# Warmup Iteration  21: 8111316.630 ops/s
# Warmup Iteration  22: 8094748.210 ops/s
# Warmup Iteration  23: 8100653.186 ops/s
# Warmup Iteration  24: 8075981.898 ops/s
# Warmup Iteration  25: 8082899.993 ops/s
# Warmup Iteration  26: 8081661.806 ops/s
# Warmup Iteration  27: 7989777.906 ops/s
# Warmup Iteration  28: 8012737.568 ops/s
# Warmup Iteration  29: 8102643.867 ops/s
# Warmup Iteration  30: 8131559.327 ops/s
Iteration   1: 8113306.897 ops/s
Iteration   2: 8052504.337 ops/s
Iteration   3: 7940569.514 ops/s
Iteration   4: 7971147.137 ops/s
Iteration   5: 7881277.877 ops/s
Iteration   6: 8028334.923 ops/s
Iteration   7: 8097831.003 ops/s
Iteration   8: 8099655.259 ops/s
Iteration   9: 8014978.014 ops/s
Iteration  10: 8124547.785 ops/s
Iteration  11: 8129912.001 ops/s
Iteration  12: 8140836.677 ops/s
Iteration  13: 8101740.223 ops/s
Iteration  14: 8159280.583 ops/s
Iteration  15: 8093908.413 ops/s
Iteration  16: 8053266.413 ops/s
Iteration  17: 8049510.649 ops/s
Iteration  18: 8080353.645 ops/s
Iteration  19: 8112001.048 ops/s
Iteration  20: 7950734.260 ops/s
Iteration  21: 8129863.646 ops/s
Iteration  22: 8197799.853 ops/s
Iteration  23: 8092645.218 ops/s
Iteration  24: 8139356.835 ops/s
Iteration  25: 8062868.433 ops/s
Iteration  26: 8091873.672 ops/s
Iteration  27: 8120102.202 ops/s
Iteration  28: 8111204.305 ops/s
Iteration  29: 7858284.556 ops/s
Iteration  30: 8139328.460 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith":
  8071300.795 ±(99.9%) 53825.462 ops/s [Average]
  (min, avg, max) = (7858284.556, 8071300.795, 8197799.853), stdev = 80563.423
  CI (99.9%): [8017475.333, 8125126.256] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_newCollectionWith  thrpt   30  8071300.795 ± 53825.462  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2432148.716 ops/s
# Warmup Iteration   2: 4438524.941 ops/s
# Warmup Iteration   3: 5080785.227 ops/s
# Warmup Iteration   4: 5127960.243 ops/s
# Warmup Iteration   5: 5088200.869 ops/s
# Warmup Iteration   6: 5130181.340 ops/s
# Warmup Iteration   7: 5140488.434 ops/s
# Warmup Iteration   8: 5134368.741 ops/s
# Warmup Iteration   9: 5106294.526 ops/s
# Warmup Iteration  10: 5110667.910 ops/s
# Warmup Iteration  11: 5158096.618 ops/s
# Warmup Iteration  12: 5130365.460 ops/s
# Warmup Iteration  13: 5137379.968 ops/s
# Warmup Iteration  14: 5159789.176 ops/s
# Warmup Iteration  15: 5146487.681 ops/s
# Warmup Iteration  16: 5176382.235 ops/s
# Warmup Iteration  17: 5132023.961 ops/s
# Warmup Iteration  18: 5102429.757 ops/s
# Warmup Iteration  19: 5143510.028 ops/s
# Warmup Iteration  20: 5160116.599 ops/s
# Warmup Iteration  21: 5127093.030 ops/s
# Warmup Iteration  22: 5156377.491 ops/s
# Warmup Iteration  23: 5116060.816 ops/s
# Warmup Iteration  24: 5111186.137 ops/s
# Warmup Iteration  25: 5114778.205 ops/s
# Warmup Iteration  26: 5118612.267 ops/s
# Warmup Iteration  27: 5167340.936 ops/s
# Warmup Iteration  28: 5162214.440 ops/s
# Warmup Iteration  29: 5121933.537 ops/s
# Warmup Iteration  30: 5140352.470 ops/s
Iteration   1: 5142202.276 ops/s
Iteration   2: 5165250.847 ops/s
Iteration   3: 5175993.004 ops/s
Iteration   4: 5152095.836 ops/s
Iteration   5: 5122935.030 ops/s
Iteration   6: 5152642.491 ops/s
Iteration   7: 5148502.337 ops/s
Iteration   8: 5062771.796 ops/s
Iteration   9: 5161850.081 ops/s
Iteration  10: 5122546.182 ops/s
Iteration  11: 5121619.495 ops/s
Iteration  12: 5079905.350 ops/s
Iteration  13: 5156247.284 ops/s
Iteration  14: 5140895.565 ops/s
Iteration  15: 5146594.339 ops/s
Iteration  16: 5142200.623 ops/s
Iteration  17: 5154376.268 ops/s
Iteration  18: 5167123.625 ops/s
Iteration  19: 5135072.422 ops/s
Iteration  20: 5148030.951 ops/s
Iteration  21: 5157838.991 ops/s
Iteration  22: 5132091.546 ops/s
Iteration  23: 5165911.153 ops/s
Iteration  24: 5171829.479 ops/s
Iteration  25: 5175170.601 ops/s
Iteration  26: 5170471.019 ops/s
Iteration  27: 5143764.282 ops/s
Iteration  28: 5118918.648 ops/s
Iteration  29: 5139086.862 ops/s
Iteration  30: 5064819.267 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy":
  5141291.922 ±(99.9%) 19592.736 ops/s [Average]
  (min, avg, max) = (5062771.796, 5141291.922, 5175993.004), stdev = 29325.487
  CI (99.9%): [5121699.185, 5160884.658] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_noneSatisfy  thrpt   30  5141291.922 ± 19592.736  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6061474.797 ops/s
# Warmup Iteration   2: 9637504.569 ops/s
# Warmup Iteration   3: 11273451.242 ops/s
# Warmup Iteration   4: 11269705.537 ops/s
# Warmup Iteration   5: 11324304.261 ops/s
# Warmup Iteration   6: 11231875.486 ops/s
# Warmup Iteration   7: 11350737.167 ops/s
# Warmup Iteration   8: 11353635.610 ops/s
# Warmup Iteration   9: 11259528.711 ops/s
# Warmup Iteration  10: 11086540.565 ops/s
# Warmup Iteration  11: 11285103.886 ops/s
# Warmup Iteration  12: 11299733.265 ops/s
# Warmup Iteration  13: 11247914.673 ops/s
# Warmup Iteration  14: 11337592.314 ops/s
# Warmup Iteration  15: 11190147.312 ops/s
# Warmup Iteration  16: 11334683.975 ops/s
# Warmup Iteration  17: 11379265.158 ops/s
# Warmup Iteration  18: 11288939.188 ops/s
# Warmup Iteration  19: 11312364.472 ops/s
# Warmup Iteration  20: 11401427.885 ops/s
# Warmup Iteration  21: 11371273.519 ops/s
# Warmup Iteration  22: 11358448.850 ops/s
# Warmup Iteration  23: 11344544.713 ops/s
# Warmup Iteration  24: 11415691.405 ops/s
# Warmup Iteration  25: 11362975.117 ops/s
# Warmup Iteration  26: 11389833.096 ops/s
# Warmup Iteration  27: 11396343.192 ops/s
# Warmup Iteration  28: 11201382.490 ops/s
# Warmup Iteration  29: 11322521.905 ops/s
# Warmup Iteration  30: 11276664.035 ops/s
Iteration   1: 11383233.667 ops/s
Iteration   2: 11404111.620 ops/s
Iteration   3: 11331521.355 ops/s
Iteration   4: 11290802.924 ops/s
Iteration   5: 11002798.280 ops/s
Iteration   6: 11130875.678 ops/s
Iteration   7: 11223403.363 ops/s
Iteration   8: 11324026.090 ops/s
Iteration   9: 11305612.092 ops/s
Iteration  10: 11411782.304 ops/s
Iteration  11: 11433634.589 ops/s
Iteration  12: 11392235.535 ops/s
Iteration  13: 11384785.578 ops/s
Iteration  14: 11415807.843 ops/s
Iteration  15: 11381697.220 ops/s
Iteration  16: 11445755.162 ops/s
Iteration  17: 11201627.237 ops/s
Iteration  18: 11416442.833 ops/s
Iteration  19: 11342844.104 ops/s
Iteration  20: 11336716.226 ops/s
Iteration  21: 11373413.389 ops/s
Iteration  22: 11384455.549 ops/s
Iteration  23: 11423011.484 ops/s
Iteration  24: 11345100.357 ops/s
Iteration  25: 11292656.072 ops/s
Iteration  26: 11270157.589 ops/s
Iteration  27: 11394543.358 ops/s
Iteration  28: 11379224.904 ops/s
Iteration  29: 11333849.107 ops/s
Iteration  30: 11407535.308 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty":
  11338788.694 ±(99.9%) 64403.366 ops/s [Average]
  (min, avg, max) = (11002798.280, 11338788.694, 11445755.162), stdev = 96395.933
  CI (99.9%): [11274385.328, 11403192.060] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_notEmpty  thrpt   30  11338788.694 ± 64403.366  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1975972.212 ops/s
# Warmup Iteration   2: 4390956.911 ops/s
# Warmup Iteration   3: 3674196.031 ops/s
# Warmup Iteration   4: 4386629.798 ops/s
# Warmup Iteration   5: 4362610.804 ops/s
# Warmup Iteration   6: 4404619.985 ops/s
# Warmup Iteration   7: 4343793.991 ops/s
# Warmup Iteration   8: 4360811.258 ops/s
# Warmup Iteration   9: 4430916.727 ops/s
# Warmup Iteration  10: 4399331.990 ops/s
# Warmup Iteration  11: 4411970.727 ops/s
# Warmup Iteration  12: 4414685.798 ops/s
# Warmup Iteration  13: 4378467.780 ops/s
# Warmup Iteration  14: 4409532.943 ops/s
# Warmup Iteration  15: 4419708.192 ops/s
# Warmup Iteration  16: 4389462.859 ops/s
# Warmup Iteration  17: 4413419.346 ops/s
# Warmup Iteration  18: 4403963.746 ops/s
# Warmup Iteration  19: 4400443.332 ops/s
# Warmup Iteration  20: 4409427.278 ops/s
# Warmup Iteration  21: 4394458.990 ops/s
# Warmup Iteration  22: 4414623.237 ops/s
# Warmup Iteration  23: 4400240.043 ops/s
# Warmup Iteration  24: 4398530.792 ops/s
# Warmup Iteration  25: 4404508.562 ops/s
# Warmup Iteration  26: 4396395.744 ops/s
# Warmup Iteration  27: 4354028.043 ops/s
# Warmup Iteration  28: 4401537.210 ops/s
# Warmup Iteration  29: 4356136.331 ops/s
# Warmup Iteration  30: 4397830.800 ops/s
Iteration   1: 4420098.488 ops/s
Iteration   2: 4420987.614 ops/s
Iteration   3: 4402339.208 ops/s
Iteration   4: 4401174.605 ops/s
Iteration   5: 4398955.861 ops/s
Iteration   6: 4403202.590 ops/s
Iteration   7: 4393427.000 ops/s
Iteration   8: 4371177.134 ops/s
Iteration   9: 4338024.664 ops/s
Iteration  10: 4420238.805 ops/s
Iteration  11: 4411903.896 ops/s
Iteration  12: 4399002.942 ops/s
Iteration  13: 4413180.556 ops/s
Iteration  14: 4407636.825 ops/s
Iteration  15: 4416442.674 ops/s
Iteration  16: 4351772.256 ops/s
Iteration  17: 4411453.418 ops/s
Iteration  18: 4380070.333 ops/s
Iteration  19: 4398856.767 ops/s
Iteration  20: 4408176.977 ops/s
Iteration  21: 4333362.533 ops/s
Iteration  22: 4401254.243 ops/s
Iteration  23: 4408245.284 ops/s
Iteration  24: 4415022.934 ops/s
Iteration  25: 4400700.669 ops/s
Iteration  26: 4422088.062 ops/s
Iteration  27: 4418866.090 ops/s
Iteration  28: 4394911.497 ops/s
Iteration  29: 4393994.497 ops/s
Iteration  30: 4369540.921 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_reduce":
  4397536.978 ±(99.9%) 15664.965 ops/s [Average]
  (min, avg, max) = (4333362.533, 4397536.978, 4422088.062), stdev = 23446.584
  CI (99.9%): [4381872.013, 4413201.943] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_reduce  thrpt   30  4397536.978 ± 15664.965  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1223737.998 ops/s
# Warmup Iteration   2: 2940165.284 ops/s
# Warmup Iteration   3: 2447625.677 ops/s
# Warmup Iteration   4: 2940972.156 ops/s
# Warmup Iteration   5: 2917609.888 ops/s
# Warmup Iteration   6: 2931840.404 ops/s
# Warmup Iteration   7: 2908487.833 ops/s
# Warmup Iteration   8: 2922095.045 ops/s
# Warmup Iteration   9: 2941078.422 ops/s
# Warmup Iteration  10: 2915241.393 ops/s
# Warmup Iteration  11: 2942052.187 ops/s
# Warmup Iteration  12: 2938037.168 ops/s
# Warmup Iteration  13: 2950144.949 ops/s
# Warmup Iteration  14: 2899494.755 ops/s
# Warmup Iteration  15: 2934479.903 ops/s
# Warmup Iteration  16: 2946293.134 ops/s
# Warmup Iteration  17: 2951036.178 ops/s
# Warmup Iteration  18: 2928398.375 ops/s
# Warmup Iteration  19: 2909286.439 ops/s
# Warmup Iteration  20: 2939456.020 ops/s
# Warmup Iteration  21: 2934269.587 ops/s
# Warmup Iteration  22: 2941879.251 ops/s
# Warmup Iteration  23: 2940787.563 ops/s
# Warmup Iteration  24: 2906056.387 ops/s
# Warmup Iteration  25: 2936943.622 ops/s
# Warmup Iteration  26: 2935539.432 ops/s
# Warmup Iteration  27: 2949428.806 ops/s
# Warmup Iteration  28: 2928769.750 ops/s
# Warmup Iteration  29: 2945813.023 ops/s
# Warmup Iteration  30: 2935163.837 ops/s
Iteration   1: 2907531.610 ops/s
Iteration   2: 2957745.826 ops/s
Iteration   3: 2956745.859 ops/s
Iteration   4: 2943916.928 ops/s
Iteration   5: 2954900.561 ops/s
Iteration   6: 2928254.931 ops/s
Iteration   7: 2945533.510 ops/s
Iteration   8: 2941835.076 ops/s
Iteration   9: 2937299.448 ops/s
Iteration  10: 2906777.383 ops/s
Iteration  11: 2898016.022 ops/s
Iteration  12: 2888000.267 ops/s
Iteration  13: 2940937.992 ops/s
Iteration  14: 2942631.066 ops/s
Iteration  15: 2947618.877 ops/s
Iteration  16: 2931214.959 ops/s
Iteration  17: 2943689.097 ops/s
Iteration  18: 2945112.722 ops/s
Iteration  19: 2876465.659 ops/s
Iteration  20: 2934781.293 ops/s
Iteration  21: 2941679.545 ops/s
Iteration  22: 2936342.432 ops/s
Iteration  23: 2927403.585 ops/s
Iteration  24: 2942054.203 ops/s
Iteration  25: 2956279.880 ops/s
Iteration  26: 2919847.281 ops/s
Iteration  27: 2945786.290 ops/s
Iteration  28: 2963331.704 ops/s
Iteration  29: 2947850.158 ops/s
Iteration  30: 2958923.418 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty":
  2935616.919 ±(99.9%) 14229.504 ops/s [Average]
  (min, avg, max) = (2876465.659, 2935616.919, 2963331.704), stdev = 21298.054
  CI (99.9%): [2921387.415, 2949846.424] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  2935616.919 ± 14229.504  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 707572.736 ops/s
# Warmup Iteration   2: 717003.572 ops/s
# Warmup Iteration   3: 951608.284 ops/s
# Warmup Iteration   4: 950910.940 ops/s
# Warmup Iteration   5: 958283.810 ops/s
# Warmup Iteration   6: 946482.292 ops/s
# Warmup Iteration   7: 942539.656 ops/s
# Warmup Iteration   8: 955746.502 ops/s
# Warmup Iteration   9: 948469.882 ops/s
# Warmup Iteration  10: 956440.019 ops/s
# Warmup Iteration  11: 958228.838 ops/s
# Warmup Iteration  12: 796659.320 ops/s
# Warmup Iteration  13: 959326.773 ops/s
# Warmup Iteration  14: 953031.752 ops/s
# Warmup Iteration  15: 947141.896 ops/s
# Warmup Iteration  16: 951801.100 ops/s
# Warmup Iteration  17: 1007581.870 ops/s
# Warmup Iteration  18: 1000809.819 ops/s
# Warmup Iteration  19: 1007274.759 ops/s
# Warmup Iteration  20: 1008923.654 ops/s
# Warmup Iteration  21: 1006938.856 ops/s
# Warmup Iteration  22: 995181.940 ops/s
# Warmup Iteration  23: 1008518.996 ops/s
# Warmup Iteration  24: 1009011.470 ops/s
# Warmup Iteration  25: 1006567.885 ops/s
# Warmup Iteration  26: 1009983.898 ops/s
# Warmup Iteration  27: 1001914.174 ops/s
# Warmup Iteration  28: 993565.228 ops/s
# Warmup Iteration  29: 1005408.189 ops/s
# Warmup Iteration  30: 1002302.436 ops/s
Iteration   1: 1012555.924 ops/s
Iteration   2: 1000446.322 ops/s
Iteration   3: 997084.078 ops/s
Iteration   4: 1012691.270 ops/s
Iteration   5: 1007391.424 ops/s
Iteration   6: 1012791.506 ops/s
Iteration   7: 1009533.343 ops/s
Iteration   8: 1008963.240 ops/s
Iteration   9: 997948.673 ops/s
Iteration  10: 995636.568 ops/s
Iteration  11: 1008181.829 ops/s
Iteration  12: 1008596.438 ops/s
Iteration  13: 1014588.916 ops/s
Iteration  14: 988945.434 ops/s
Iteration  15: 1001554.214 ops/s
Iteration  16: 996965.377 ops/s
Iteration  17: 1006448.802 ops/s
Iteration  18: 1010307.289 ops/s
Iteration  19: 1013978.523 ops/s
Iteration  20: 1000077.108 ops/s
Iteration  21: 1011166.567 ops/s
Iteration  22: 1003737.766 ops/s
Iteration  23: 988482.506 ops/s
Iteration  24: 1013485.212 ops/s
Iteration  25: 1003167.942 ops/s
Iteration  26: 1016237.268 ops/s
Iteration  27: 1015277.432 ops/s
Iteration  28: 1008085.201 ops/s
Iteration  29: 1009512.319 ops/s
Iteration  30: 991757.961 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1005519.882 ±(99.9%) 5323.046 ops/s [Average]
  (min, avg, max) = (988482.506, 1005519.882, 1016237.268), stdev = 7967.285
  CI (99.9%): [1000196.836, 1010842.927] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1005519.882 ± 5323.046  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5183970.388 ops/s
# Warmup Iteration   2: 14497423.519 ops/s
# Warmup Iteration   3: 12377406.166 ops/s
# Warmup Iteration   4: 14665120.770 ops/s
# Warmup Iteration   5: 14584021.650 ops/s
# Warmup Iteration   6: 14515325.783 ops/s
# Warmup Iteration   7: 14707579.509 ops/s
# Warmup Iteration   8: 14658879.878 ops/s
# Warmup Iteration   9: 14573124.047 ops/s
# Warmup Iteration  10: 14665402.339 ops/s
# Warmup Iteration  11: 14550985.587 ops/s
# Warmup Iteration  12: 14488430.470 ops/s
# Warmup Iteration  13: 14705556.285 ops/s
# Warmup Iteration  14: 14640506.862 ops/s
# Warmup Iteration  15: 14603760.526 ops/s
# Warmup Iteration  16: 14649246.121 ops/s
# Warmup Iteration  17: 14647451.074 ops/s
# Warmup Iteration  18: 14632702.778 ops/s
# Warmup Iteration  19: 14716521.593 ops/s
# Warmup Iteration  20: 14666337.254 ops/s
# Warmup Iteration  21: 14681010.563 ops/s
# Warmup Iteration  22: 14502739.603 ops/s
# Warmup Iteration  23: 14570639.770 ops/s
# Warmup Iteration  24: 14636267.302 ops/s
# Warmup Iteration  25: 14675025.723 ops/s
# Warmup Iteration  26: 14487677.918 ops/s
# Warmup Iteration  27: 14596949.734 ops/s
# Warmup Iteration  28: 14659122.251 ops/s
# Warmup Iteration  29: 14607206.298 ops/s
# Warmup Iteration  30: 14567473.925 ops/s
Iteration   1: 14477995.193 ops/s
Iteration   2: 14664498.490 ops/s
Iteration   3: 14721430.244 ops/s
Iteration   4: 14681738.166 ops/s
Iteration   5: 14687641.687 ops/s
Iteration   6: 14671681.767 ops/s
Iteration   7: 14769177.092 ops/s
Iteration   8: 14739244.713 ops/s
Iteration   9: 14616760.837 ops/s
Iteration  10: 14752057.852 ops/s
Iteration  11: 14746692.191 ops/s
Iteration  12: 14660491.662 ops/s
Iteration  13: 14645204.163 ops/s
Iteration  14: 14775479.439 ops/s
Iteration  15: 14630872.873 ops/s
Iteration  16: 14624525.866 ops/s
Iteration  17: 14639979.402 ops/s
Iteration  18: 14649316.028 ops/s
Iteration  19: 14622619.006 ops/s
Iteration  20: 14548744.905 ops/s
Iteration  21: 14695570.680 ops/s
Iteration  22: 14691701.205 ops/s
Iteration  23: 14653951.421 ops/s
Iteration  24: 14755773.614 ops/s
Iteration  25: 14682236.910 ops/s
Iteration  26: 14667187.134 ops/s
Iteration  27: 14594009.624 ops/s
Iteration  28: 14761347.607 ops/s
Iteration  29: 14636016.276 ops/s
Iteration  30: 14698973.907 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_reject":
  14672097.332 ±(99.9%) 44501.087 ops/s [Average]
  (min, avg, max) = (14477995.193, 14672097.332, 14775479.439), stdev = 66607.137
  CI (99.9%): [14627596.245, 14716598.419] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_reject  thrpt   30  14672097.332 ± 44501.087  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8096645.205 ops/s
# Warmup Iteration   2: 16681368.643 ops/s
# Warmup Iteration   3: 17280676.655 ops/s
# Warmup Iteration   4: 14305792.832 ops/s
# Warmup Iteration   5: 17298013.667 ops/s
# Warmup Iteration   6: 17114377.931 ops/s
# Warmup Iteration   7: 17241235.057 ops/s
# Warmup Iteration   8: 17310498.922 ops/s
# Warmup Iteration   9: 17001884.245 ops/s
# Warmup Iteration  10: 17237415.451 ops/s
# Warmup Iteration  11: 17046061.849 ops/s
# Warmup Iteration  12: 17290002.795 ops/s
# Warmup Iteration  13: 17197223.880 ops/s
# Warmup Iteration  14: 17293523.649 ops/s
# Warmup Iteration  15: 17328856.353 ops/s
# Warmup Iteration  16: 17271087.447 ops/s
# Warmup Iteration  17: 17180802.684 ops/s
# Warmup Iteration  18: 17195944.042 ops/s
# Warmup Iteration  19: 17203661.257 ops/s
# Warmup Iteration  20: 17040066.350 ops/s
# Warmup Iteration  21: 17208455.752 ops/s
# Warmup Iteration  22: 17000481.370 ops/s
# Warmup Iteration  23: 17235201.434 ops/s
# Warmup Iteration  24: 17296227.163 ops/s
# Warmup Iteration  25: 17262211.920 ops/s
# Warmup Iteration  26: 17371591.871 ops/s
# Warmup Iteration  27: 17313573.117 ops/s
# Warmup Iteration  28: 17074213.212 ops/s
# Warmup Iteration  29: 17264721.997 ops/s
# Warmup Iteration  30: 17338449.337 ops/s
Iteration   1: 17136605.561 ops/s
Iteration   2: 17233735.251 ops/s
Iteration   3: 17235952.359 ops/s
Iteration   4: 17355774.180 ops/s
Iteration   5: 17211277.071 ops/s
Iteration   6: 17277570.463 ops/s
Iteration   7: 17297929.995 ops/s
Iteration   8: 16973136.265 ops/s
Iteration   9: 17369381.121 ops/s
Iteration  10: 17154333.817 ops/s
Iteration  11: 17288843.381 ops/s
Iteration  12: 17169800.810 ops/s
Iteration  13: 17334084.049 ops/s
Iteration  14: 17077738.443 ops/s
Iteration  15: 17283472.578 ops/s
Iteration  16: 17146744.566 ops/s
Iteration  17: 16874232.635 ops/s
Iteration  18: 17242720.206 ops/s
Iteration  19: 17202572.255 ops/s
Iteration  20: 17336070.900 ops/s
Iteration  21: 17347761.297 ops/s
Iteration  22: 17225142.292 ops/s
Iteration  23: 17218097.931 ops/s
Iteration  24: 17289470.711 ops/s
Iteration  25: 17341963.883 ops/s
Iteration  26: 17287396.503 ops/s
Iteration  27: 17359095.062 ops/s
Iteration  28: 16941944.291 ops/s
Iteration  29: 17076716.387 ops/s
Iteration  30: 17226254.175 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_remove":
  17217193.948 ±(99.9%) 84529.647 ops/s [Average]
  (min, avg, max) = (16874232.635, 17217193.948, 17369381.121), stdev = 126520.006
  CI (99.9%): [17132664.301, 17301723.595] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_remove  thrpt   30  17217193.948 ± 84529.647  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2430333.249 ops/s
# Warmup Iteration   2: 5539119.703 ops/s
# Warmup Iteration   3: 4573372.419 ops/s
# Warmup Iteration   4: 5514796.143 ops/s
# Warmup Iteration   5: 5498793.599 ops/s
# Warmup Iteration   6: 5500085.126 ops/s
# Warmup Iteration   7: 5483888.263 ops/s
# Warmup Iteration   8: 5523014.115 ops/s
# Warmup Iteration   9: 5509356.286 ops/s
# Warmup Iteration  10: 5524785.932 ops/s
# Warmup Iteration  11: 5516379.516 ops/s
# Warmup Iteration  12: 5499996.522 ops/s
# Warmup Iteration  13: 5515329.790 ops/s
# Warmup Iteration  14: 5473370.564 ops/s
# Warmup Iteration  15: 5489768.013 ops/s
# Warmup Iteration  16: 5515286.904 ops/s
# Warmup Iteration  17: 5437752.444 ops/s
# Warmup Iteration  18: 5519809.051 ops/s
# Warmup Iteration  19: 5486131.469 ops/s
# Warmup Iteration  20: 5432434.861 ops/s
# Warmup Iteration  21: 5476274.289 ops/s
# Warmup Iteration  22: 5472924.513 ops/s
# Warmup Iteration  23: 5449246.604 ops/s
# Warmup Iteration  24: 5483198.053 ops/s
# Warmup Iteration  25: 5518337.699 ops/s
# Warmup Iteration  26: 5465463.608 ops/s
# Warmup Iteration  27: 5520892.467 ops/s
# Warmup Iteration  28: 5510154.632 ops/s
# Warmup Iteration  29: 5523459.730 ops/s
# Warmup Iteration  30: 5506893.776 ops/s
Iteration   1: 5529193.539 ops/s
Iteration   2: 5535529.130 ops/s
Iteration   3: 5498334.178 ops/s
Iteration   4: 5482295.678 ops/s
Iteration   5: 5517986.556 ops/s
Iteration   6: 5517647.499 ops/s
Iteration   7: 5499750.007 ops/s
Iteration   8: 5531036.785 ops/s
Iteration   9: 5426074.290 ops/s
Iteration  10: 5514244.900 ops/s
Iteration  11: 5480116.232 ops/s
Iteration  12: 5409454.976 ops/s
Iteration  13: 5556314.351 ops/s
Iteration  14: 5488739.706 ops/s
Iteration  15: 5522909.155 ops/s
Iteration  16: 5501000.958 ops/s
Iteration  17: 5544937.558 ops/s
Iteration  18: 5526488.345 ops/s
Iteration  19: 5491710.536 ops/s
Iteration  20: 5439811.330 ops/s
Iteration  21: 5341084.590 ops/s
Iteration  22: 5417360.933 ops/s
Iteration  23: 5522037.839 ops/s
Iteration  24: 5376359.631 ops/s
Iteration  25: 5519511.739 ops/s
Iteration  26: 5499651.741 ops/s
Iteration  27: 5518023.377 ops/s
Iteration  28: 5540784.122 ops/s
Iteration  29: 5446013.934 ops/s
Iteration  30: 5515610.782 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_removeAll":
  5490333.813 ±(99.9%) 34894.653 ops/s [Average]
  (min, avg, max) = (5341084.590, 5490333.813, 5556314.351), stdev = 52228.678
  CI (99.9%): [5455439.160, 5525228.467] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_removeAll  thrpt   30  5490333.813 ± 34894.653  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1724142.083 ops/s
# Warmup Iteration   2: 3883189.587 ops/s
# Warmup Iteration   3: 3254240.433 ops/s
# Warmup Iteration   4: 3935185.645 ops/s
# Warmup Iteration   5: 3945236.129 ops/s
# Warmup Iteration   6: 3944318.253 ops/s
# Warmup Iteration   7: 3936381.218 ops/s
# Warmup Iteration   8: 3938199.059 ops/s
# Warmup Iteration   9: 3930719.235 ops/s
# Warmup Iteration  10: 3929252.771 ops/s
# Warmup Iteration  11: 3941307.258 ops/s
# Warmup Iteration  12: 3942384.881 ops/s
# Warmup Iteration  13: 3923178.760 ops/s
# Warmup Iteration  14: 3919112.396 ops/s
# Warmup Iteration  15: 3943936.088 ops/s
# Warmup Iteration  16: 3926021.804 ops/s
# Warmup Iteration  17: 3928033.609 ops/s
# Warmup Iteration  18: 3931575.575 ops/s
# Warmup Iteration  19: 3942903.759 ops/s
# Warmup Iteration  20: 3942197.051 ops/s
# Warmup Iteration  21: 3931273.508 ops/s
# Warmup Iteration  22: 3939993.098 ops/s
# Warmup Iteration  23: 3930364.328 ops/s
# Warmup Iteration  24: 3879408.191 ops/s
# Warmup Iteration  25: 3917372.819 ops/s
# Warmup Iteration  26: 3911706.950 ops/s
# Warmup Iteration  27: 3875066.968 ops/s
# Warmup Iteration  28: 3922462.137 ops/s
# Warmup Iteration  29: 3924261.027 ops/s
# Warmup Iteration  30: 3938611.559 ops/s
Iteration   1: 3922239.344 ops/s
Iteration   2: 3920118.191 ops/s
Iteration   3: 3918254.452 ops/s
Iteration   4: 3947945.647 ops/s
Iteration   5: 3938071.066 ops/s
Iteration   6: 3925352.707 ops/s
Iteration   7: 3945349.223 ops/s
Iteration   8: 3903521.681 ops/s
Iteration   9: 3928699.598 ops/s
Iteration  10: 3932386.661 ops/s
Iteration  11: 3928585.453 ops/s
Iteration  12: 3950252.133 ops/s
Iteration  13: 3938869.727 ops/s
Iteration  14: 3931480.530 ops/s
Iteration  15: 3943060.638 ops/s
Iteration  16: 3936629.025 ops/s
Iteration  17: 3917306.729 ops/s
Iteration  18: 3900380.557 ops/s
Iteration  19: 3963670.508 ops/s
Iteration  20: 3917968.252 ops/s
Iteration  21: 3959328.524 ops/s
Iteration  22: 3938515.743 ops/s
Iteration  23: 3951026.446 ops/s
Iteration  24: 3924245.488 ops/s
Iteration  25: 3897385.815 ops/s
Iteration  26: 3921444.048 ops/s
Iteration  27: 3859479.442 ops/s
Iteration  28: 3863360.687 ops/s
Iteration  29: 3911200.536 ops/s
Iteration  30: 3949166.328 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable":
  3926176.506 ±(99.9%) 16135.226 ops/s [Average]
  (min, avg, max) = (3859479.442, 3926176.506, 3963670.508), stdev = 24150.448
  CI (99.9%): [3910041.280, 3942311.732] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  3926176.506 ± 16135.226  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 941713.181 ops/s
# Warmup Iteration   2: 2191432.213 ops/s
# Warmup Iteration   3: 1850197.894 ops/s
# Warmup Iteration   4: 2181345.104 ops/s
# Warmup Iteration   5: 2216007.669 ops/s
# Warmup Iteration   6: 2214269.102 ops/s
# Warmup Iteration   7: 2199214.342 ops/s
# Warmup Iteration   8: 2208462.516 ops/s
# Warmup Iteration   9: 2221389.884 ops/s
# Warmup Iteration  10: 2198439.894 ops/s
# Warmup Iteration  11: 2177966.010 ops/s
# Warmup Iteration  12: 2204985.597 ops/s
# Warmup Iteration  13: 2222154.378 ops/s
# Warmup Iteration  14: 2224935.895 ops/s
# Warmup Iteration  15: 2212944.327 ops/s
# Warmup Iteration  16: 2221041.926 ops/s
# Warmup Iteration  17: 2219322.456 ops/s
# Warmup Iteration  18: 2222928.951 ops/s
# Warmup Iteration  19: 2220265.272 ops/s
# Warmup Iteration  20: 2216354.251 ops/s
# Warmup Iteration  21: 2226278.314 ops/s
# Warmup Iteration  22: 2213629.818 ops/s
# Warmup Iteration  23: 2224391.250 ops/s
# Warmup Iteration  24: 2216383.255 ops/s
# Warmup Iteration  25: 2227922.630 ops/s
# Warmup Iteration  26: 2198548.462 ops/s
# Warmup Iteration  27: 2224928.782 ops/s
# Warmup Iteration  28: 2221608.048 ops/s
# Warmup Iteration  29: 2217351.855 ops/s
# Warmup Iteration  30: 2221834.009 ops/s
Iteration   1: 2227273.171 ops/s
Iteration   2: 2218428.166 ops/s
Iteration   3: 2227342.326 ops/s
Iteration   4: 2211702.530 ops/s
Iteration   5: 2228085.518 ops/s
Iteration   6: 2230829.226 ops/s
Iteration   7: 2210560.778 ops/s
Iteration   8: 2217505.974 ops/s
Iteration   9: 2220052.352 ops/s
Iteration  10: 2234924.128 ops/s
Iteration  11: 2217415.908 ops/s
Iteration  12: 2225955.822 ops/s
Iteration  13: 2227398.764 ops/s
Iteration  14: 2220737.556 ops/s
Iteration  15: 2223492.340 ops/s
Iteration  16: 2224511.676 ops/s
Iteration  17: 2237594.635 ops/s
Iteration  18: 2224302.867 ops/s
Iteration  19: 2231535.402 ops/s
Iteration  20: 2216291.145 ops/s
Iteration  21: 2226638.575 ops/s
Iteration  22: 2220836.610 ops/s
Iteration  23: 2230476.521 ops/s
Iteration  24: 2216166.363 ops/s
Iteration  25: 2216917.141 ops/s
Iteration  26: 2221575.429 ops/s
Iteration  27: 2228440.687 ops/s
Iteration  28: 2215245.272 ops/s
Iteration  29: 2227064.627 ops/s
Iteration  30: 2223363.192 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_retainAll":
  2223422.157 ±(99.9%) 4419.010 ops/s [Average]
  (min, avg, max) = (2210560.778, 2223422.157, 2237594.635), stdev = 6614.167
  CI (99.9%): [2219003.146, 2227841.167] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_retainAll  thrpt   30  2223422.157 ± 4419.010  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 558400.296 ops/s
# Warmup Iteration   2: 1336684.537 ops/s
# Warmup Iteration   3: 1334360.852 ops/s
# Warmup Iteration   4: 1105810.715 ops/s
# Warmup Iteration   5: 1331671.178 ops/s
# Warmup Iteration   6: 1334869.772 ops/s
# Warmup Iteration   7: 1337738.499 ops/s
# Warmup Iteration   8: 1332825.421 ops/s
# Warmup Iteration   9: 1335724.285 ops/s
# Warmup Iteration  10: 1337026.787 ops/s
# Warmup Iteration  11: 1333306.659 ops/s
# Warmup Iteration  12: 1334042.398 ops/s
# Warmup Iteration  13: 1334649.409 ops/s
# Warmup Iteration  14: 1335162.421 ops/s
# Warmup Iteration  15: 1332048.345 ops/s
# Warmup Iteration  16: 1336009.680 ops/s
# Warmup Iteration  17: 1329247.597 ops/s
# Warmup Iteration  18: 1335013.779 ops/s
# Warmup Iteration  19: 1332674.065 ops/s
# Warmup Iteration  20: 1331424.078 ops/s
# Warmup Iteration  21: 1331522.960 ops/s
# Warmup Iteration  22: 1331864.238 ops/s
# Warmup Iteration  23: 1330526.661 ops/s
# Warmup Iteration  24: 1332904.441 ops/s
# Warmup Iteration  25: 1331891.858 ops/s
# Warmup Iteration  26: 1332225.356 ops/s
# Warmup Iteration  27: 1333980.142 ops/s
# Warmup Iteration  28: 1328354.607 ops/s
# Warmup Iteration  29: 1330618.038 ops/s
# Warmup Iteration  30: 1331276.080 ops/s
Iteration   1: 1328335.253 ops/s
Iteration   2: 1326942.634 ops/s
Iteration   3: 1335903.438 ops/s
Iteration   4: 1332356.586 ops/s
Iteration   5: 1335670.934 ops/s
Iteration   6: 1330856.245 ops/s
Iteration   7: 1322855.339 ops/s
Iteration   8: 1325167.994 ops/s
Iteration   9: 1335432.950 ops/s
Iteration  10: 1338271.047 ops/s
Iteration  11: 1340195.610 ops/s
Iteration  12: 1332023.572 ops/s
Iteration  13: 1338449.505 ops/s
Iteration  14: 1334710.271 ops/s
Iteration  15: 1335160.678 ops/s
Iteration  16: 1306114.772 ops/s
Iteration  17: 1326094.537 ops/s
Iteration  18: 1336228.335 ops/s
Iteration  19: 1345649.795 ops/s
Iteration  20: 1332774.582 ops/s
Iteration  21: 1331225.659 ops/s
Iteration  22: 1317757.430 ops/s
Iteration  23: 1331126.452 ops/s
Iteration  24: 1331875.871 ops/s
Iteration  25: 1331719.214 ops/s
Iteration  26: 1337379.687 ops/s
Iteration  27: 1331026.391 ops/s
Iteration  28: 1312876.882 ops/s
Iteration  29: 1328955.727 ops/s
Iteration  30: 1329021.681 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable":
  1330738.636 ±(99.9%) 5345.882 ops/s [Average]
  (min, avg, max) = (1306114.772, 1330738.636, 1345649.795), stdev = 8001.465
  CI (99.9%): [1325392.753, 1336084.518] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  1330738.636 ± 5345.882  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6832356.062 ops/s
# Warmup Iteration   2: 14313788.664 ops/s
# Warmup Iteration   3: 12373869.311 ops/s
# Warmup Iteration   4: 14594679.698 ops/s
# Warmup Iteration   5: 14622317.517 ops/s
# Warmup Iteration   6: 14499782.020 ops/s
# Warmup Iteration   7: 14660589.776 ops/s
# Warmup Iteration   8: 14556551.769 ops/s
# Warmup Iteration   9: 14507547.703 ops/s
# Warmup Iteration  10: 14594727.864 ops/s
# Warmup Iteration  11: 14587029.378 ops/s
# Warmup Iteration  12: 14422859.223 ops/s
# Warmup Iteration  13: 14580153.079 ops/s
# Warmup Iteration  14: 14459866.571 ops/s
# Warmup Iteration  15: 14534512.347 ops/s
# Warmup Iteration  16: 14457395.595 ops/s
# Warmup Iteration  17: 14441994.323 ops/s
# Warmup Iteration  18: 14477136.843 ops/s
# Warmup Iteration  19: 14626305.706 ops/s
# Warmup Iteration  20: 14552059.938 ops/s
# Warmup Iteration  21: 14509277.465 ops/s
# Warmup Iteration  22: 14530816.997 ops/s
# Warmup Iteration  23: 14576481.754 ops/s
# Warmup Iteration  24: 14517031.862 ops/s
# Warmup Iteration  25: 14391751.652 ops/s
# Warmup Iteration  26: 14543720.323 ops/s
# Warmup Iteration  27: 14262833.980 ops/s
# Warmup Iteration  28: 14569390.579 ops/s
# Warmup Iteration  29: 14375963.801 ops/s
# Warmup Iteration  30: 14335822.431 ops/s
Iteration   1: 14595603.588 ops/s
Iteration   2: 14593679.470 ops/s
Iteration   3: 14541106.719 ops/s
Iteration   4: 14499370.314 ops/s
Iteration   5: 14607152.178 ops/s
Iteration   6: 14456884.823 ops/s
Iteration   7: 14502665.032 ops/s
Iteration   8: 14533396.534 ops/s
Iteration   9: 14508002.971 ops/s
Iteration  10: 14527615.238 ops/s
Iteration  11: 14505813.017 ops/s
Iteration  12: 14525645.090 ops/s
Iteration  13: 14529103.988 ops/s
Iteration  14: 14041787.109 ops/s
Iteration  15: 14668111.329 ops/s
Iteration  16: 14652278.470 ops/s
Iteration  17: 14530316.902 ops/s
Iteration  18: 14478832.436 ops/s
Iteration  19: 14548164.402 ops/s
Iteration  20: 14573568.437 ops/s
Iteration  21: 14589904.861 ops/s
Iteration  22: 14580984.702 ops/s
Iteration  23: 14570678.253 ops/s
Iteration  24: 14432536.760 ops/s
Iteration  25: 14561016.100 ops/s
Iteration  26: 14634258.276 ops/s
Iteration  27: 14622010.803 ops/s
Iteration  28: 14611661.495 ops/s
Iteration  29: 14607700.816 ops/s
Iteration  30: 14552161.645 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_select":
  14539400.392 ±(99.9%) 73186.261 ops/s [Average]
  (min, avg, max) = (14041787.109, 14539400.392, 14668111.329), stdev = 109541.759
  CI (99.9%): [14466214.131, 14612586.653] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_select  thrpt   30  14539400.392 ± 73186.261  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3749688.525 ops/s
# Warmup Iteration   2: 6042246.399 ops/s
# Warmup Iteration   3: 7221120.264 ops/s
# Warmup Iteration   4: 7138688.171 ops/s
# Warmup Iteration   5: 7178257.253 ops/s
# Warmup Iteration   6: 7203729.614 ops/s
# Warmup Iteration   7: 7201053.587 ops/s
# Warmup Iteration   8: 7211524.335 ops/s
# Warmup Iteration   9: 7242422.846 ops/s
# Warmup Iteration  10: 7144096.192 ops/s
# Warmup Iteration  11: 7178220.474 ops/s
# Warmup Iteration  12: 7164807.241 ops/s
# Warmup Iteration  13: 7079192.053 ops/s
# Warmup Iteration  14: 7082105.351 ops/s
# Warmup Iteration  15: 7152530.348 ops/s
# Warmup Iteration  16: 7033166.003 ops/s
# Warmup Iteration  17: 7176314.034 ops/s
# Warmup Iteration  18: 7145789.736 ops/s
# Warmup Iteration  19: 7219351.912 ops/s
# Warmup Iteration  20: 7194400.647 ops/s
# Warmup Iteration  21: 7223762.394 ops/s
# Warmup Iteration  22: 7110611.026 ops/s
# Warmup Iteration  23: 7195984.455 ops/s
# Warmup Iteration  24: 7196969.170 ops/s
# Warmup Iteration  25: 7177220.668 ops/s
# Warmup Iteration  26: 7172228.452 ops/s
# Warmup Iteration  27: 7179200.672 ops/s
# Warmup Iteration  28: 7234518.262 ops/s
# Warmup Iteration  29: 7177364.016 ops/s
# Warmup Iteration  30: 7118307.432 ops/s
Iteration   1: 7137200.897 ops/s
Iteration   2: 7103276.597 ops/s
Iteration   3: 7137121.026 ops/s
Iteration   4: 7134985.236 ops/s
Iteration   5: 7121432.017 ops/s
Iteration   6: 7219930.519 ops/s
Iteration   7: 7191874.694 ops/s
Iteration   8: 7255074.831 ops/s
Iteration   9: 6983991.588 ops/s
Iteration  10: 7258549.284 ops/s
Iteration  11: 7224787.331 ops/s
Iteration  12: 7215083.726 ops/s
Iteration  13: 7098075.443 ops/s
Iteration  14: 7099583.276 ops/s
Iteration  15: 7229639.452 ops/s
Iteration  16: 7202034.051 ops/s
Iteration  17: 7176536.678 ops/s
Iteration  18: 7120079.895 ops/s
Iteration  19: 7206954.496 ops/s
Iteration  20: 7197876.424 ops/s
Iteration  21: 7023831.747 ops/s
Iteration  22: 7224925.561 ops/s
Iteration  23: 7250786.611 ops/s
Iteration  24: 7192661.602 ops/s
Iteration  25: 7180533.997 ops/s
Iteration  26: 7218469.637 ops/s
Iteration  27: 7205205.642 ops/s
Iteration  28: 7225197.621 ops/s
Iteration  29: 7078186.385 ops/s
Iteration  30: 7217077.420 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_size":
  7171032.123 ±(99.9%) 45761.826 ops/s [Average]
  (min, avg, max) = (6983991.588, 7171032.123, 7258549.284), stdev = 68494.152
  CI (99.9%): [7125270.297, 7216793.949] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_size  thrpt   30  7171032.123 ± 45761.826  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 164314201.182 ops/s
# Warmup Iteration   2: 298801437.616 ops/s
# Warmup Iteration   3: 260964370.809 ops/s
# Warmup Iteration   4: 306844897.656 ops/s
# Warmup Iteration   5: 306675066.286 ops/s
# Warmup Iteration   6: 305823289.280 ops/s
# Warmup Iteration   7: 307093818.887 ops/s
# Warmup Iteration   8: 307780550.447 ops/s
# Warmup Iteration   9: 306723094.271 ops/s
# Warmup Iteration  10: 304436726.358 ops/s
# Warmup Iteration  11: 305241166.455 ops/s
# Warmup Iteration  12: 306782441.069 ops/s
# Warmup Iteration  13: 306486408.489 ops/s
# Warmup Iteration  14: 303467983.148 ops/s
# Warmup Iteration  15: 307448213.292 ops/s
# Warmup Iteration  16: 304021948.759 ops/s
# Warmup Iteration  17: 306206918.325 ops/s
# Warmup Iteration  18: 307176861.065 ops/s
# Warmup Iteration  19: 306249470.097 ops/s
# Warmup Iteration  20: 305697556.410 ops/s
# Warmup Iteration  21: 304218597.445 ops/s
# Warmup Iteration  22: 305505547.654 ops/s
# Warmup Iteration  23: 306516663.545 ops/s
# Warmup Iteration  24: 302277592.218 ops/s
# Warmup Iteration  25: 303029613.750 ops/s
# Warmup Iteration  26: 307045449.778 ops/s
# Warmup Iteration  27: 305527728.876 ops/s
# Warmup Iteration  28: 305927816.867 ops/s
# Warmup Iteration  29: 303756159.229 ops/s
# Warmup Iteration  30: 305214744.746 ops/s
Iteration   1: 306876463.533 ops/s
Iteration   2: 306623316.861 ops/s
Iteration   3: 306947552.608 ops/s
Iteration   4: 306983282.612 ops/s
Iteration   5: 307640611.595 ops/s
Iteration   6: 308525942.876 ops/s
Iteration   7: 307947579.294 ops/s
Iteration   8: 306912175.008 ops/s
Iteration   9: 307074148.403 ops/s
Iteration  10: 306247103.706 ops/s
Iteration  11: 304513310.468 ops/s
Iteration  12: 308018552.307 ops/s
Iteration  13: 307703126.519 ops/s
Iteration  14: 307479810.599 ops/s
Iteration  15: 306845975.510 ops/s
Iteration  16: 306559534.459 ops/s
Iteration  17: 308071503.345 ops/s
Iteration  18: 308306682.741 ops/s
Iteration  19: 307765492.535 ops/s
Iteration  20: 307248270.091 ops/s
Iteration  21: 303206095.239 ops/s
Iteration  22: 302884743.669 ops/s
Iteration  23: 298393860.587 ops/s
Iteration  24: 301693572.715 ops/s
Iteration  25: 306630821.764 ops/s
Iteration  26: 305733881.081 ops/s
Iteration  27: 306635984.494 ops/s
Iteration  28: 305202801.293 ops/s
Iteration  29: 304314378.681 ops/s
Iteration  30: 305297821.316 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_testEquals":
  306142813.197 ±(99.9%) 1482388.157 ops/s [Average]
  (min, avg, max) = (298393860.587, 306142813.197, 308525942.876), stdev = 2218768.976
  CI (99.9%): [304660425.039, 307625201.354] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt          Score         Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_testEquals  thrpt   30  306142813.197 ± 1482388.157  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 165757430.713 ops/s
# Warmup Iteration   2: 299201295.854 ops/s
# Warmup Iteration   3: 256711821.428 ops/s
# Warmup Iteration   4: 301576563.227 ops/s
# Warmup Iteration   5: 302389889.989 ops/s
# Warmup Iteration   6: 300548702.377 ops/s
# Warmup Iteration   7: 303100082.513 ops/s
# Warmup Iteration   8: 300224777.847 ops/s
# Warmup Iteration   9: 299588779.142 ops/s
# Warmup Iteration  10: 302769177.304 ops/s
# Warmup Iteration  11: 303857387.442 ops/s
# Warmup Iteration  12: 301188723.880 ops/s
# Warmup Iteration  13: 302820980.067 ops/s
# Warmup Iteration  14: 303302810.891 ops/s
# Warmup Iteration  15: 300767424.248 ops/s
# Warmup Iteration  16: 302084379.638 ops/s
# Warmup Iteration  17: 302129846.554 ops/s
# Warmup Iteration  18: 302250376.142 ops/s
# Warmup Iteration  19: 302831578.075 ops/s
# Warmup Iteration  20: 303197829.210 ops/s
# Warmup Iteration  21: 300130995.673 ops/s
# Warmup Iteration  22: 303721017.729 ops/s
# Warmup Iteration  23: 300772242.288 ops/s
# Warmup Iteration  24: 298784712.858 ops/s
# Warmup Iteration  25: 302627453.399 ops/s
# Warmup Iteration  26: 296929222.177 ops/s
# Warmup Iteration  27: 303359377.322 ops/s
# Warmup Iteration  28: 303194863.302 ops/s
# Warmup Iteration  29: 300616581.748 ops/s
# Warmup Iteration  30: 304846842.277 ops/s
Iteration   1: 302870082.639 ops/s
Iteration   2: 299629251.262 ops/s
Iteration   3: 301859869.932 ops/s
Iteration   4: 300451443.543 ops/s
Iteration   5: 304864198.359 ops/s
Iteration   6: 298468961.093 ops/s
Iteration   7: 304191482.959 ops/s
Iteration   8: 303436370.743 ops/s
Iteration   9: 302954994.481 ops/s
Iteration  10: 302022941.090 ops/s
Iteration  11: 303180900.526 ops/s
Iteration  12: 304233899.607 ops/s
Iteration  13: 303337335.031 ops/s
Iteration  14: 304800265.557 ops/s
Iteration  15: 305769608.909 ops/s
Iteration  16: 301638948.809 ops/s
Iteration  17: 303564360.448 ops/s
Iteration  18: 303807798.235 ops/s
Iteration  19: 299853170.669 ops/s
Iteration  20: 300095502.066 ops/s
Iteration  21: 299934830.123 ops/s
Iteration  22: 301560286.459 ops/s
Iteration  23: 297080286.686 ops/s
Iteration  24: 300741246.841 ops/s
Iteration  25: 303385861.491 ops/s
Iteration  26: 302938994.474 ops/s
Iteration  27: 303719653.735 ops/s
Iteration  28: 303517799.303 ops/s
Iteration  29: 303716228.733 ops/s
Iteration  30: 303735129.616 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode":
  302378723.447 ±(99.9%) 1367618.293 ops/s [Average]
  (min, avg, max) = (297080286.686, 302378723.447, 305769608.909), stdev = 2046986.833
  CI (99.9%): [301011105.154, 303746341.740] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt          Score         Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_testHashCode  thrpt   30  302378723.447 ± 1367618.293  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 164004268.947 ops/s
# Warmup Iteration   2: 299355988.512 ops/s
# Warmup Iteration   3: 259960357.332 ops/s
# Warmup Iteration   4: 306507142.537 ops/s
# Warmup Iteration   5: 303818340.352 ops/s
# Warmup Iteration   6: 307147119.359 ops/s
# Warmup Iteration   7: 306358951.770 ops/s
# Warmup Iteration   8: 306336771.226 ops/s
# Warmup Iteration   9: 305922031.075 ops/s
# Warmup Iteration  10: 306584586.966 ops/s
# Warmup Iteration  11: 305242054.302 ops/s
# Warmup Iteration  12: 306459076.287 ops/s
# Warmup Iteration  13: 304847643.788 ops/s
# Warmup Iteration  14: 305502531.425 ops/s
# Warmup Iteration  15: 306335774.769 ops/s
# Warmup Iteration  16: 306025203.192 ops/s
# Warmup Iteration  17: 305776141.175 ops/s
# Warmup Iteration  18: 306092766.141 ops/s
# Warmup Iteration  19: 306686186.844 ops/s
# Warmup Iteration  20: 305643941.766 ops/s
# Warmup Iteration  21: 302860112.234 ops/s
# Warmup Iteration  22: 306787073.188 ops/s
# Warmup Iteration  23: 301936118.947 ops/s
# Warmup Iteration  24: 298081756.539 ops/s
# Warmup Iteration  25: 305617941.672 ops/s
# Warmup Iteration  26: 303568154.185 ops/s
# Warmup Iteration  27: 305654121.765 ops/s
# Warmup Iteration  28: 302352591.498 ops/s
# Warmup Iteration  29: 306190749.349 ops/s
# Warmup Iteration  30: 305303479.227 ops/s
Iteration   1: 306099412.615 ops/s
Iteration   2: 306157222.371 ops/s
Iteration   3: 307444067.045 ops/s
Iteration   4: 305379432.283 ops/s
Iteration   5: 307359786.720 ops/s
Iteration   6: 302169349.256 ops/s
Iteration   7: 303089762.280 ops/s
Iteration   8: 306170424.215 ops/s
Iteration   9: 306047719.882 ops/s
Iteration  10: 306734964.443 ops/s
Iteration  11: 307291773.489 ops/s
Iteration  12: 306847677.761 ops/s
Iteration  13: 307502204.479 ops/s
Iteration  14: 304863160.288 ops/s
Iteration  15: 305966909.631 ops/s
Iteration  16: 306620940.045 ops/s
Iteration  17: 301397189.148 ops/s
Iteration  18: 306606215.954 ops/s
Iteration  19: 300536389.546 ops/s
Iteration  20: 305395782.278 ops/s
Iteration  21: 306509140.278 ops/s
Iteration  22: 306340441.337 ops/s
Iteration  23: 304462787.705 ops/s
Iteration  24: 306492174.738 ops/s
Iteration  25: 305494815.037 ops/s
Iteration  26: 305612993.302 ops/s
Iteration  27: 304424060.342 ops/s
Iteration  28: 306611362.903 ops/s
Iteration  29: 301178509.842 ops/s
Iteration  30: 306836045.519 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_testToString":
  305454757.158 ±(99.9%) 1285925.594 ops/s [Average]
  (min, avg, max) = (300536389.546, 305454757.158, 307502204.479), stdev = 1924713.037
  CI (99.9%): [304168831.564, 306740682.751] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt          Score         Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_testToString  thrpt   30  305454757.158 ± 1285925.594  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2557356.320 ops/s
# Warmup Iteration   2: 5670959.063 ops/s
# Warmup Iteration   3: 4715646.349 ops/s
# Warmup Iteration   4: 5711868.578 ops/s
# Warmup Iteration   5: 5711926.612 ops/s
# Warmup Iteration   6: 5710509.200 ops/s
# Warmup Iteration   7: 5706881.316 ops/s
# Warmup Iteration   8: 5721437.852 ops/s
# Warmup Iteration   9: 5709406.041 ops/s
# Warmup Iteration  10: 5710377.648 ops/s
# Warmup Iteration  11: 5662756.543 ops/s
# Warmup Iteration  12: 5617692.255 ops/s
# Warmup Iteration  13: 5716465.363 ops/s
# Warmup Iteration  14: 5629709.521 ops/s
# Warmup Iteration  15: 5708667.448 ops/s
# Warmup Iteration  16: 5691473.794 ops/s
# Warmup Iteration  17: 5688423.322 ops/s
# Warmup Iteration  18: 5650908.102 ops/s
# Warmup Iteration  19: 5706781.088 ops/s
# Warmup Iteration  20: 5717159.091 ops/s
# Warmup Iteration  21: 5695361.349 ops/s
# Warmup Iteration  22: 5712477.553 ops/s
# Warmup Iteration  23: 5668351.133 ops/s
# Warmup Iteration  24: 5669387.595 ops/s
# Warmup Iteration  25: 5719511.568 ops/s
# Warmup Iteration  26: 5613588.867 ops/s
# Warmup Iteration  27: 5715297.777 ops/s
# Warmup Iteration  28: 5730684.122 ops/s
# Warmup Iteration  29: 5697220.398 ops/s
# Warmup Iteration  30: 5723797.702 ops/s
Iteration   1: 5717960.894 ops/s
Iteration   2: 5715796.906 ops/s
Iteration   3: 5746194.002 ops/s
Iteration   4: 5724027.085 ops/s
Iteration   5: 5627738.412 ops/s
Iteration   6: 5611304.024 ops/s
Iteration   7: 5745847.845 ops/s
Iteration   8: 5720088.770 ops/s
Iteration   9: 5681658.328 ops/s
Iteration  10: 5660113.259 ops/s
Iteration  11: 5707920.035 ops/s
Iteration  12: 5744078.954 ops/s
Iteration  13: 5707676.322 ops/s
Iteration  14: 5725909.869 ops/s
Iteration  15: 5727652.805 ops/s
Iteration  16: 5701687.629 ops/s
Iteration  17: 5716697.713 ops/s
Iteration  18: 5724503.665 ops/s
Iteration  19: 5710859.647 ops/s
Iteration  20: 5589204.068 ops/s
Iteration  21: 5645197.928 ops/s
Iteration  22: 5712485.801 ops/s
Iteration  23: 5742252.317 ops/s
Iteration  24: 5709950.034 ops/s
Iteration  25: 5631334.051 ops/s
Iteration  26: 5716623.902 ops/s
Iteration  27: 5600096.996 ops/s
Iteration  28: 5731238.739 ops/s
Iteration  29: 5694736.665 ops/s
Iteration  30: 5745947.861 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_toArray":
  5697892.818 ±(99.9%) 30535.811 ops/s [Average]
  (min, avg, max) = (5589204.068, 5697892.818, 5746194.002), stdev = 45704.568
  CI (99.9%): [5667357.007, 5728428.628] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_toArray  thrpt   30  5697892.818 ± 30535.811  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1211671.825 ops/s
# Warmup Iteration   2: 2570089.651 ops/s
# Warmup Iteration   3: 2596761.095 ops/s
# Warmup Iteration   4: 2514792.456 ops/s
# Warmup Iteration   5: 2252266.085 ops/s
# Warmup Iteration   6: 2602281.468 ops/s
# Warmup Iteration   7: 2585254.046 ops/s
# Warmup Iteration   8: 2608519.938 ops/s
# Warmup Iteration   9: 2605055.393 ops/s
# Warmup Iteration  10: 2600134.935 ops/s
# Warmup Iteration  11: 2598948.589 ops/s
# Warmup Iteration  12: 2613118.054 ops/s
# Warmup Iteration  13: 2598233.644 ops/s
# Warmup Iteration  14: 2593369.541 ops/s
# Warmup Iteration  15: 2607719.621 ops/s
# Warmup Iteration  16: 2589033.877 ops/s
# Warmup Iteration  17: 2604160.625 ops/s
# Warmup Iteration  18: 2571885.159 ops/s
# Warmup Iteration  19: 2580017.473 ops/s
# Warmup Iteration  20: 2600048.510 ops/s
# Warmup Iteration  21: 2607443.760 ops/s
# Warmup Iteration  22: 2610991.456 ops/s
# Warmup Iteration  23: 2545995.161 ops/s
# Warmup Iteration  24: 2576255.587 ops/s
# Warmup Iteration  25: 2603302.352 ops/s
# Warmup Iteration  26: 2596286.949 ops/s
# Warmup Iteration  27: 2598382.275 ops/s
# Warmup Iteration  28: 2564843.942 ops/s
# Warmup Iteration  29: 2580968.776 ops/s
# Warmup Iteration  30: 2599986.836 ops/s
Iteration   1: 2615408.637 ops/s
Iteration   2: 2606107.854 ops/s
Iteration   3: 2594751.842 ops/s
Iteration   4: 2599043.308 ops/s
Iteration   5: 2606005.957 ops/s
Iteration   6: 2600450.769 ops/s
Iteration   7: 2563618.600 ops/s
Iteration   8: 2600937.785 ops/s
Iteration   9: 2585771.105 ops/s
Iteration  10: 2613004.845 ops/s
Iteration  11: 2590449.450 ops/s
Iteration  12: 2607905.504 ops/s
Iteration  13: 2603164.273 ops/s
Iteration  14: 2570797.745 ops/s
Iteration  15: 2605739.017 ops/s
Iteration  16: 2607404.709 ops/s
Iteration  17: 2581141.712 ops/s
Iteration  18: 2606037.264 ops/s
Iteration  19: 2608857.910 ops/s
Iteration  20: 2573097.757 ops/s
Iteration  21: 2574857.811 ops/s
Iteration  22: 2607286.775 ops/s
Iteration  23: 2606460.534 ops/s
Iteration  24: 2599334.543 ops/s
Iteration  25: 2604953.458 ops/s
Iteration  26: 2585346.202 ops/s
Iteration  27: 2605416.751 ops/s
Iteration  28: 2605286.374 ops/s
Iteration  29: 2598233.603 ops/s
Iteration  30: 2602594.687 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_toBag":
  2597648.893 ±(99.9%) 8948.261 ops/s [Average]
  (min, avg, max) = (2563618.600, 2597648.893, 2615408.637), stdev = 13393.337
  CI (99.9%): [2588700.632, 2606597.154] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_toBag  thrpt   30  2597648.893 ± 8948.261  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1540952.963 ops/s
# Warmup Iteration   2: 3471761.900 ops/s
# Warmup Iteration   3: 2886273.884 ops/s
# Warmup Iteration   4: 3500911.813 ops/s
# Warmup Iteration   5: 3488908.239 ops/s
# Warmup Iteration   6: 3474971.979 ops/s
# Warmup Iteration   7: 3503360.865 ops/s
# Warmup Iteration   8: 3512452.531 ops/s
# Warmup Iteration   9: 3504674.953 ops/s
# Warmup Iteration  10: 3478438.088 ops/s
# Warmup Iteration  11: 3485180.830 ops/s
# Warmup Iteration  12: 3514926.213 ops/s
# Warmup Iteration  13: 3520930.865 ops/s
# Warmup Iteration  14: 3514115.223 ops/s
# Warmup Iteration  15: 3493380.836 ops/s
# Warmup Iteration  16: 3513498.605 ops/s
# Warmup Iteration  17: 3496208.745 ops/s
# Warmup Iteration  18: 3515724.659 ops/s
# Warmup Iteration  19: 3516479.126 ops/s
# Warmup Iteration  20: 3500506.639 ops/s
# Warmup Iteration  21: 3497629.134 ops/s
# Warmup Iteration  22: 3503567.138 ops/s
# Warmup Iteration  23: 3511254.368 ops/s
# Warmup Iteration  24: 3489572.559 ops/s
# Warmup Iteration  25: 3503601.444 ops/s
# Warmup Iteration  26: 3508288.673 ops/s
# Warmup Iteration  27: 3518213.779 ops/s
# Warmup Iteration  28: 3514457.205 ops/s
# Warmup Iteration  29: 3510539.042 ops/s
# Warmup Iteration  30: 3504267.343 ops/s
Iteration   1: 3494650.778 ops/s
Iteration   2: 3505510.938 ops/s
Iteration   3: 3510276.232 ops/s
Iteration   4: 3507337.054 ops/s
Iteration   5: 3513565.184 ops/s
Iteration   6: 3496530.449 ops/s
Iteration   7: 3507483.473 ops/s
Iteration   8: 3515887.117 ops/s
Iteration   9: 3445906.025 ops/s
Iteration  10: 3497743.048 ops/s
Iteration  11: 3536142.144 ops/s
Iteration  12: 3526371.880 ops/s
Iteration  13: 3514082.794 ops/s
Iteration  14: 3499234.556 ops/s
Iteration  15: 3525805.855 ops/s
Iteration  16: 3509804.849 ops/s
Iteration  17: 3523947.760 ops/s
Iteration  18: 3517310.248 ops/s
Iteration  19: 3508405.211 ops/s
Iteration  20: 3519662.629 ops/s
Iteration  21: 3501924.509 ops/s
Iteration  22: 3508324.911 ops/s
Iteration  23: 3511916.970 ops/s
Iteration  24: 3504384.775 ops/s
Iteration  25: 3521881.020 ops/s
Iteration  26: 3515325.148 ops/s
Iteration  27: 3518560.151 ops/s
Iteration  28: 3515200.639 ops/s
Iteration  29: 3497851.661 ops/s
Iteration  30: 3525162.589 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_toList":
  3509873.020 ±(99.9%) 10515.710 ops/s [Average]
  (min, avg, max) = (3445906.025, 3509873.020, 3536142.144), stdev = 15739.421
  CI (99.9%): [3499357.310, 3520388.730] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_toList  thrpt   30  3509873.020 ± 10515.710  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1300673.153 ops/s
# Warmup Iteration   2: 5743900.731 ops/s
# Warmup Iteration   3: 6064616.432 ops/s
# Warmup Iteration   4: 5447112.047 ops/s
# Warmup Iteration   5: 6275530.718 ops/s
# Warmup Iteration   6: 6307747.625 ops/s
# Warmup Iteration   7: 6281302.796 ops/s
# Warmup Iteration   8: 6302139.576 ops/s
# Warmup Iteration   9: 6296620.898 ops/s
# Warmup Iteration  10: 6300724.475 ops/s
# Warmup Iteration  11: 6291653.079 ops/s
# Warmup Iteration  12: 6313820.654 ops/s
# Warmup Iteration  13: 6304205.956 ops/s
# Warmup Iteration  14: 6292812.131 ops/s
# Warmup Iteration  15: 6309842.329 ops/s
# Warmup Iteration  16: 6314379.071 ops/s
# Warmup Iteration  17: 6309197.248 ops/s
# Warmup Iteration  18: 6307857.984 ops/s
# Warmup Iteration  19: 6295853.169 ops/s
# Warmup Iteration  20: 6300191.154 ops/s
# Warmup Iteration  21: 6302979.337 ops/s
# Warmup Iteration  22: 6281463.506 ops/s
# Warmup Iteration  23: 6266423.452 ops/s
# Warmup Iteration  24: 6267199.717 ops/s
# Warmup Iteration  25: 6282818.479 ops/s
# Warmup Iteration  26: 6283105.561 ops/s
# Warmup Iteration  27: 6304003.962 ops/s
# Warmup Iteration  28: 6261130.608 ops/s
# Warmup Iteration  29: 6284417.556 ops/s
# Warmup Iteration  30: 6267624.389 ops/s
Iteration   1: 6291969.822 ops/s
Iteration   2: 6296904.729 ops/s
Iteration   3: 6247365.392 ops/s
Iteration   4: 6305847.845 ops/s
Iteration   5: 6299951.162 ops/s
Iteration   6: 6234785.341 ops/s
Iteration   7: 6270238.906 ops/s
Iteration   8: 6258375.443 ops/s
Iteration   9: 6252859.744 ops/s
Iteration  10: 6272355.438 ops/s
Iteration  11: 6280448.279 ops/s
Iteration  12: 6256512.470 ops/s
Iteration  13: 6259272.904 ops/s
Iteration  14: 6273222.754 ops/s
Iteration  15: 6267696.855 ops/s
Iteration  16: 6293927.094 ops/s
Iteration  17: 6275794.822 ops/s
Iteration  18: 6296567.095 ops/s
Iteration  19: 6296322.691 ops/s
Iteration  20: 6279496.842 ops/s
Iteration  21: 6267006.944 ops/s
Iteration  22: 6277002.002 ops/s
Iteration  23: 6288569.336 ops/s
Iteration  24: 6277825.982 ops/s
Iteration  25: 6288678.797 ops/s
Iteration  26: 6267649.121 ops/s
Iteration  27: 6306486.867 ops/s
Iteration  28: 6291638.535 ops/s
Iteration  29: 6278549.028 ops/s
Iteration  30: 6261331.047 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_toSet":
  6277155.110 ±(99.9%) 11979.079 ops/s [Average]
  (min, avg, max) = (6234785.341, 6277155.110, 6306486.867), stdev = 17929.723
  CI (99.9%): [6265176.030, 6289134.189] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_toSet  thrpt   30  6277155.110 ± 11979.079  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 698615.947 ops/s
# Warmup Iteration   2: 770983.842 ops/s
# Warmup Iteration   3: 1015725.130 ops/s
# Warmup Iteration   4: 1017063.807 ops/s
# Warmup Iteration   5: 1008815.489 ops/s
# Warmup Iteration   6: 1012850.859 ops/s
# Warmup Iteration   7: 1019816.468 ops/s
# Warmup Iteration   8: 1019354.701 ops/s
# Warmup Iteration   9: 1009964.090 ops/s
# Warmup Iteration  10: 875464.121 ops/s
# Warmup Iteration  11: 983039.539 ops/s
# Warmup Iteration  12: 1015301.228 ops/s
# Warmup Iteration  13: 1017843.036 ops/s
# Warmup Iteration  14: 1014228.465 ops/s
# Warmup Iteration  15: 1019251.208 ops/s
# Warmup Iteration  16: 1011834.213 ops/s
# Warmup Iteration  17: 1075619.865 ops/s
# Warmup Iteration  18: 1071238.447 ops/s
# Warmup Iteration  19: 1080954.580 ops/s
# Warmup Iteration  20: 1079154.927 ops/s
# Warmup Iteration  21: 1078311.513 ops/s
# Warmup Iteration  22: 1064609.575 ops/s
# Warmup Iteration  23: 1083226.479 ops/s
# Warmup Iteration  24: 1066806.540 ops/s
# Warmup Iteration  25: 1079708.351 ops/s
# Warmup Iteration  26: 1077962.561 ops/s
# Warmup Iteration  27: 1081351.405 ops/s
# Warmup Iteration  28: 1074863.653 ops/s
# Warmup Iteration  29: 1078977.846 ops/s
# Warmup Iteration  30: 1077258.914 ops/s
Iteration   1: 1074938.263 ops/s
Iteration   2: 1082796.826 ops/s
Iteration   3: 1059267.793 ops/s
Iteration   4: 1075951.748 ops/s
Iteration   5: 1079359.100 ops/s
Iteration   6: 1085235.855 ops/s
Iteration   7: 1082289.745 ops/s
Iteration   8: 1079622.889 ops/s
Iteration   9: 1081503.331 ops/s
Iteration  10: 1074145.542 ops/s
Iteration  11: 1085617.733 ops/s
Iteration  12: 1083510.225 ops/s
Iteration  13: 1077996.425 ops/s
Iteration  14: 1080127.074 ops/s
Iteration  15: 1081905.626 ops/s
Iteration  16: 1079113.650 ops/s
Iteration  17: 1074962.229 ops/s
Iteration  18: 1066603.247 ops/s
Iteration  19: 1076377.874 ops/s
Iteration  20: 1080739.330 ops/s
Iteration  21: 1074232.246 ops/s
Iteration  22: 1064525.288 ops/s
Iteration  23: 1077998.913 ops/s
Iteration  24: 1074487.539 ops/s
Iteration  25: 1085454.420 ops/s
Iteration  26: 1075863.208 ops/s
Iteration  27: 1084956.882 ops/s
Iteration  28: 1071694.730 ops/s
Iteration  29: 1081418.860 ops/s
Iteration  30: 1078524.997 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_with":
  1077707.386 ±(99.9%) 4141.429 ops/s [Average]
  (min, avg, max) = (1059267.793, 1077707.386, 1085617.733), stdev = 6198.696
  CI (99.9%): [1073565.957, 1081848.815] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_with  thrpt   30  1077707.386 ± 4141.429  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 699249.191 ops/s
# Warmup Iteration   2: 763126.680 ops/s
# Warmup Iteration   3: 1016297.761 ops/s
# Warmup Iteration   4: 1018447.739 ops/s
# Warmup Iteration   5: 1009944.581 ops/s
# Warmup Iteration   6: 1019490.298 ops/s
# Warmup Iteration   7: 1013694.478 ops/s
# Warmup Iteration   8: 1014741.510 ops/s
# Warmup Iteration   9: 1014342.774 ops/s
# Warmup Iteration  10: 849749.135 ops/s
# Warmup Iteration  11: 1012337.816 ops/s
# Warmup Iteration  12: 1008784.064 ops/s
# Warmup Iteration  13: 1019780.041 ops/s
# Warmup Iteration  14: 1017937.335 ops/s
# Warmup Iteration  15: 1015477.112 ops/s
# Warmup Iteration  16: 1015728.360 ops/s
# Warmup Iteration  17: 1083661.754 ops/s
# Warmup Iteration  18: 1066205.704 ops/s
# Warmup Iteration  19: 1082404.510 ops/s
# Warmup Iteration  20: 1084437.709 ops/s
# Warmup Iteration  21: 1088536.481 ops/s
# Warmup Iteration  22: 1085791.077 ops/s
# Warmup Iteration  23: 1085079.308 ops/s
# Warmup Iteration  24: 1087539.667 ops/s
# Warmup Iteration  25: 1086896.514 ops/s
# Warmup Iteration  26: 1074220.058 ops/s
# Warmup Iteration  27: 1080114.368 ops/s
# Warmup Iteration  28: 1083513.523 ops/s
# Warmup Iteration  29: 1087478.701 ops/s
# Warmup Iteration  30: 1083998.803 ops/s
Iteration   1: 1049702.873 ops/s
Iteration   2: 1088902.792 ops/s
Iteration   3: 1076157.016 ops/s
Iteration   4: 1084825.202 ops/s
Iteration   5: 1083877.973 ops/s
Iteration   6: 1085852.979 ops/s
Iteration   7: 1081179.844 ops/s
Iteration   8: 1072126.335 ops/s
Iteration   9: 1077807.025 ops/s
Iteration  10: 1085918.211 ops/s
Iteration  11: 1086661.121 ops/s
Iteration  12: 1083090.644 ops/s
Iteration  13: 1088713.672 ops/s
Iteration  14: 1087217.988 ops/s
Iteration  15: 1084960.085 ops/s
Iteration  16: 1082271.604 ops/s
Iteration  17: 1067824.317 ops/s
Iteration  18: 1085187.822 ops/s
Iteration  19: 1082389.680 ops/s
Iteration  20: 1065966.782 ops/s
Iteration  21: 1083493.219 ops/s
Iteration  22: 1086044.910 ops/s
Iteration  23: 1087275.822 ops/s
Iteration  24: 1062852.613 ops/s
Iteration  25: 1081518.877 ops/s
Iteration  26: 1085710.187 ops/s
Iteration  27: 1076185.120 ops/s
Iteration  28: 1068553.527 ops/s
Iteration  29: 1087352.382 ops/s
Iteration  30: 1081585.617 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_withAll":
  1080040.208 ±(99.9%) 6090.570 ops/s [Average]
  (min, avg, max) = (1049702.873, 1080040.208, 1088902.792), stdev = 9116.080
  CI (99.9%): [1073949.638, 1086130.778] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_withAll  thrpt   30  1080040.208 ± 6090.570  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 696724.346 ops/s
# Warmup Iteration   2: 768074.247 ops/s
# Warmup Iteration   3: 1010485.861 ops/s
# Warmup Iteration   4: 1009617.741 ops/s
# Warmup Iteration   5: 1002912.323 ops/s
# Warmup Iteration   6: 1005741.140 ops/s
# Warmup Iteration   7: 1004924.555 ops/s
# Warmup Iteration   8: 1009591.429 ops/s
# Warmup Iteration   9: 1009524.838 ops/s
# Warmup Iteration  10: 864614.300 ops/s
# Warmup Iteration  11: 990264.267 ops/s
# Warmup Iteration  12: 1012021.206 ops/s
# Warmup Iteration  13: 1008144.027 ops/s
# Warmup Iteration  14: 1012543.187 ops/s
# Warmup Iteration  15: 1011846.749 ops/s
# Warmup Iteration  16: 1012093.536 ops/s
# Warmup Iteration  17: 1070554.580 ops/s
# Warmup Iteration  18: 1053521.317 ops/s
# Warmup Iteration  19: 1064832.399 ops/s
# Warmup Iteration  20: 1062374.564 ops/s
# Warmup Iteration  21: 1069858.338 ops/s
# Warmup Iteration  22: 1068334.315 ops/s
# Warmup Iteration  23: 1066977.818 ops/s
# Warmup Iteration  24: 1066220.853 ops/s
# Warmup Iteration  25: 1068354.051 ops/s
# Warmup Iteration  26: 1073298.267 ops/s
# Warmup Iteration  27: 1071759.241 ops/s
# Warmup Iteration  28: 1074367.198 ops/s
# Warmup Iteration  29: 1067003.184 ops/s
# Warmup Iteration  30: 1055199.026 ops/s
Iteration   1: 1074528.887 ops/s
Iteration   2: 1052578.568 ops/s
Iteration   3: 1054995.382 ops/s
Iteration   4: 1047130.881 ops/s
Iteration   5: 1062241.500 ops/s
Iteration   6: 1060876.846 ops/s
Iteration   7: 1065566.004 ops/s
Iteration   8: 1070089.291 ops/s
Iteration   9: 1062475.750 ops/s
Iteration  10: 1067550.776 ops/s
Iteration  11: 1072786.344 ops/s
Iteration  12: 1073962.018 ops/s
Iteration  13: 1069445.554 ops/s
Iteration  14: 1069740.490 ops/s
Iteration  15: 1045092.229 ops/s
Iteration  16: 1058376.072 ops/s
Iteration  17: 1061592.342 ops/s
Iteration  18: 1057990.533 ops/s
Iteration  19: 1073624.038 ops/s
Iteration  20: 1071105.428 ops/s
Iteration  21: 1066415.656 ops/s
Iteration  22: 1065570.339 ops/s
Iteration  23: 1072527.707 ops/s
Iteration  24: 1073094.000 ops/s
Iteration  25: 1066898.925 ops/s
Iteration  26: 1062182.814 ops/s
Iteration  27: 1072176.968 ops/s
Iteration  28: 1069802.689 ops/s
Iteration  29: 1070664.219 ops/s
Iteration  30: 1060727.061 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_without":
  1065060.310 ±(99.9%) 5241.420 ops/s [Average]
  (min, avg, max) = (1045092.229, 1065060.310, 1074528.887), stdev = 7845.112
  CI (99.9%): [1059818.890, 1070301.731] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_without  thrpt   30  1065060.310 ± 5241.420  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 700067.355 ops/s
# Warmup Iteration   2: 767781.347 ops/s
# Warmup Iteration   3: 1002133.011 ops/s
# Warmup Iteration   4: 1004145.175 ops/s
# Warmup Iteration   5: 993754.800 ops/s
# Warmup Iteration   6: 1005185.207 ops/s
# Warmup Iteration   7: 1004250.884 ops/s
# Warmup Iteration   8: 1005580.917 ops/s
# Warmup Iteration   9: 1006939.044 ops/s
# Warmup Iteration  10: 863218.126 ops/s
# Warmup Iteration  11: 973063.080 ops/s
# Warmup Iteration  12: 1005523.045 ops/s
# Warmup Iteration  13: 1003401.941 ops/s
# Warmup Iteration  14: 1008407.529 ops/s
# Warmup Iteration  15: 1005661.064 ops/s
# Warmup Iteration  16: 1005881.063 ops/s
# Warmup Iteration  17: 1070026.639 ops/s
# Warmup Iteration  18: 1076110.083 ops/s
# Warmup Iteration  19: 1070631.243 ops/s
# Warmup Iteration  20: 1074931.734 ops/s
# Warmup Iteration  21: 1070937.791 ops/s
# Warmup Iteration  22: 1068129.143 ops/s
# Warmup Iteration  23: 1072692.655 ops/s
# Warmup Iteration  24: 1070005.801 ops/s
# Warmup Iteration  25: 1066155.784 ops/s
# Warmup Iteration  26: 1068030.531 ops/s
# Warmup Iteration  27: 1072176.252 ops/s
# Warmup Iteration  28: 1077288.645 ops/s
# Warmup Iteration  29: 1068990.460 ops/s
# Warmup Iteration  30: 1071840.420 ops/s
Iteration   1: 1041769.378 ops/s
Iteration   2: 1068715.652 ops/s
Iteration   3: 1067689.885 ops/s
Iteration   4: 1059232.877 ops/s
Iteration   5: 1056206.732 ops/s
Iteration   6: 1074122.648 ops/s
Iteration   7: 1069212.104 ops/s
Iteration   8: 1062841.381 ops/s
Iteration   9: 1073954.759 ops/s
Iteration  10: 1075657.944 ops/s
Iteration  11: 1070131.634 ops/s
Iteration  12: 1073909.955 ops/s
Iteration  13: 1076386.795 ops/s
Iteration  14: 1073677.522 ops/s
Iteration  15: 1076213.600 ops/s
Iteration  16: 1069075.386 ops/s
Iteration  17: 1070160.962 ops/s
Iteration  18: 1070348.351 ops/s
Iteration  19: 1076670.536 ops/s
Iteration  20: 1057556.704 ops/s
Iteration  21: 1066334.734 ops/s
Iteration  22: 1074186.636 ops/s
Iteration  23: 1069838.291 ops/s
Iteration  24: 1070523.336 ops/s
Iteration  25: 1069397.054 ops/s
Iteration  26: 1071364.149 ops/s
Iteration  27: 1077965.505 ops/s
Iteration  28: 1065857.174 ops/s
Iteration  29: 1071517.973 ops/s
Iteration  30: 1077648.897 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.ShortBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll":
  1069272.285 ±(99.9%) 5106.675 ops/s [Average]
  (min, avg, max) = (1041769.378, 1069272.285, 1077965.505), stdev = 7643.432
  CI (99.9%): [1064165.610, 1074378.960] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ShortBooleanHashMapValuesTest._Benchmark.benchmark_withoutAll  thrpt   30  1069272.285 ± 5106.675  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 678712.050 ops/s
# Warmup Iteration   2: 739166.959 ops/s
# Warmup Iteration   3: 970312.115 ops/s
# Warmup Iteration   4: 971873.968 ops/s
# Warmup Iteration   5: 967507.043 ops/s
# Warmup Iteration   6: 975242.047 ops/s
# Warmup Iteration   7: 976195.168 ops/s
# Warmup Iteration   8: 977893.587 ops/s
# Warmup Iteration   9: 971226.415 ops/s
# Warmup Iteration  10: 898551.248 ops/s
# Warmup Iteration  11: 893266.487 ops/s
# Warmup Iteration  12: 974540.795 ops/s
# Warmup Iteration  13: 970591.269 ops/s
# Warmup Iteration  14: 972845.128 ops/s
# Warmup Iteration  15: 975485.239 ops/s
# Warmup Iteration  16: 971617.224 ops/s
# Warmup Iteration  17: 1035128.368 ops/s
# Warmup Iteration  18: 1024725.676 ops/s
# Warmup Iteration  19: 1024338.714 ops/s
# Warmup Iteration  20: 1030181.663 ops/s
# Warmup Iteration  21: 1022788.186 ops/s
# Warmup Iteration  22: 1037019.191 ops/s
# Warmup Iteration  23: 1031436.307 ops/s
# Warmup Iteration  24: 1034197.323 ops/s
# Warmup Iteration  25: 1034529.329 ops/s
# Warmup Iteration  26: 1029358.763 ops/s
# Warmup Iteration  27: 1034455.437 ops/s
# Warmup Iteration  28: 1028986.903 ops/s
# Warmup Iteration  29: 1035023.025 ops/s
# Warmup Iteration  30: 1030162.249 ops/s
Iteration   1: 1023527.834 ops/s
Iteration   2: 1028070.795 ops/s
Iteration   3: 1036471.734 ops/s
Iteration   4: 1037437.854 ops/s
Iteration   5: 1029502.094 ops/s
Iteration   6: 1002025.553 ops/s
Iteration   7: 1027266.916 ops/s
Iteration   8: 1028638.509 ops/s
Iteration   9: 1034302.332 ops/s
Iteration  10: 1037690.977 ops/s
Iteration  11: 1034329.599 ops/s
Iteration  12: 1028638.207 ops/s
Iteration  13: 1001729.866 ops/s
Iteration  14: 1030548.297 ops/s
Iteration  15: 1029854.237 ops/s
Iteration  16: 1035091.431 ops/s
Iteration  17: 1034901.734 ops/s
Iteration  18: 1032366.843 ops/s
Iteration  19: 1038299.280 ops/s
Iteration  20: 1023593.734 ops/s
Iteration  21: 1032336.530 ops/s
Iteration  22: 1017320.583 ops/s
Iteration  23: 1033436.245 ops/s
Iteration  24: 1036567.679 ops/s
Iteration  25: 1030760.342 ops/s
Iteration  26: 1031559.427 ops/s
Iteration  27: 1031057.208 ops/s
Iteration  28: 1024451.075 ops/s
Iteration  29: 1012592.420 ops/s
Iteration  30: 1035574.161 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_add":
  1028664.783 ±(99.9%) 6246.432 ops/s [Average]
  (min, avg, max) = (1001729.866, 1028664.783, 1038299.280), stdev = 9349.366
  CI (99.9%): [1022418.351, 1034911.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_add  thrpt   30  1028664.783 ± 6246.432  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 688167.498 ops/s
# Warmup Iteration   2: 746714.617 ops/s
# Warmup Iteration   3: 981801.141 ops/s
# Warmup Iteration   4: 986212.611 ops/s
# Warmup Iteration   5: 984116.036 ops/s
# Warmup Iteration   6: 995291.153 ops/s
# Warmup Iteration   7: 988490.180 ops/s
# Warmup Iteration   8: 989170.237 ops/s
# Warmup Iteration   9: 987297.754 ops/s
# Warmup Iteration  10: 869474.217 ops/s
# Warmup Iteration  11: 934912.041 ops/s
# Warmup Iteration  12: 983763.622 ops/s
# Warmup Iteration  13: 991274.038 ops/s
# Warmup Iteration  14: 986560.436 ops/s
# Warmup Iteration  15: 989424.684 ops/s
# Warmup Iteration  16: 991731.020 ops/s
# Warmup Iteration  17: 1056238.224 ops/s
# Warmup Iteration  18: 1048886.153 ops/s
# Warmup Iteration  19: 1048397.541 ops/s
# Warmup Iteration  20: 1052107.404 ops/s
# Warmup Iteration  21: 1041380.741 ops/s
# Warmup Iteration  22: 1047867.901 ops/s
# Warmup Iteration  23: 1041075.519 ops/s
# Warmup Iteration  24: 1041592.530 ops/s
# Warmup Iteration  25: 1046919.698 ops/s
# Warmup Iteration  26: 1045796.575 ops/s
# Warmup Iteration  27: 1040777.556 ops/s
# Warmup Iteration  28: 1051956.119 ops/s
# Warmup Iteration  29: 1052299.180 ops/s
# Warmup Iteration  30: 1040930.460 ops/s
Iteration   1: 1028185.034 ops/s
Iteration   2: 1050469.648 ops/s
Iteration   3: 1046262.634 ops/s
Iteration   4: 1043906.782 ops/s
Iteration   5: 1054423.825 ops/s
Iteration   6: 1049110.803 ops/s
Iteration   7: 1045417.241 ops/s
Iteration   8: 1032425.112 ops/s
Iteration   9: 1043322.827 ops/s
Iteration  10: 1047229.914 ops/s
Iteration  11: 1042161.815 ops/s
Iteration  12: 1049817.511 ops/s
Iteration  13: 1046272.297 ops/s
Iteration  14: 1045527.333 ops/s
Iteration  15: 1041957.277 ops/s
Iteration  16: 1050037.690 ops/s
Iteration  17: 1041782.542 ops/s
Iteration  18: 1050295.107 ops/s
Iteration  19: 1057989.697 ops/s
Iteration  20: 1052934.621 ops/s
Iteration  21: 1047365.029 ops/s
Iteration  22: 1046610.664 ops/s
Iteration  23: 1052756.190 ops/s
Iteration  24: 1040841.859 ops/s
Iteration  25: 1033325.038 ops/s
Iteration  26: 1046212.656 ops/s
Iteration  27: 1049155.250 ops/s
Iteration  28: 1042425.800 ops/s
Iteration  29: 1027609.617 ops/s
Iteration  30: 1052090.911 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_addAllArray":
  1045264.091 ±(99.9%) 4841.796 ops/s [Average]
  (min, avg, max) = (1027609.617, 1045264.091, 1057989.697), stdev = 7246.973
  CI (99.9%): [1040422.295, 1050105.887] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_addAllArray  thrpt   30  1045264.091 ± 4841.796  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 671734.435 ops/s
# Warmup Iteration   2: 738442.246 ops/s
# Warmup Iteration   3: 971583.342 ops/s
# Warmup Iteration   4: 977107.833 ops/s
# Warmup Iteration   5: 982133.277 ops/s
# Warmup Iteration   6: 983601.997 ops/s
# Warmup Iteration   7: 984620.759 ops/s
# Warmup Iteration   8: 983184.878 ops/s
# Warmup Iteration   9: 983095.825 ops/s
# Warmup Iteration  10: 887746.581 ops/s
# Warmup Iteration  11: 912640.946 ops/s
# Warmup Iteration  12: 977743.224 ops/s
# Warmup Iteration  13: 982888.541 ops/s
# Warmup Iteration  14: 982356.656 ops/s
# Warmup Iteration  15: 971669.454 ops/s
# Warmup Iteration  16: 974059.256 ops/s
# Warmup Iteration  17: 1034309.456 ops/s
# Warmup Iteration  18: 1038443.599 ops/s
# Warmup Iteration  19: 1038412.194 ops/s
# Warmup Iteration  20: 1038306.175 ops/s
# Warmup Iteration  21: 1028269.242 ops/s
# Warmup Iteration  22: 1031484.073 ops/s
# Warmup Iteration  23: 1036850.087 ops/s
# Warmup Iteration  24: 1041971.401 ops/s
# Warmup Iteration  25: 1030041.874 ops/s
# Warmup Iteration  26: 1036848.532 ops/s
# Warmup Iteration  27: 1038035.356 ops/s
# Warmup Iteration  28: 1037973.225 ops/s
# Warmup Iteration  29: 1034612.720 ops/s
# Warmup Iteration  30: 1042201.890 ops/s
Iteration   1: 1019415.127 ops/s
Iteration   2: 1034260.198 ops/s
Iteration   3: 1036478.080 ops/s
Iteration   4: 1018438.982 ops/s
Iteration   5: 1036358.131 ops/s
Iteration   6: 1032417.928 ops/s
Iteration   7: 1043864.190 ops/s
Iteration   8: 1025281.219 ops/s
Iteration   9: 1038445.039 ops/s
Iteration  10: 1043989.569 ops/s
Iteration  11: 1036651.970 ops/s
Iteration  12: 1041549.258 ops/s
Iteration  13: 1035150.291 ops/s
Iteration  14: 1042424.524 ops/s
Iteration  15: 1021976.441 ops/s
Iteration  16: 1026239.139 ops/s
Iteration  17: 1037681.610 ops/s
Iteration  18: 1042298.577 ops/s
Iteration  19: 1043628.750 ops/s
Iteration  20: 1038807.286 ops/s
Iteration  21: 1035329.795 ops/s
Iteration  22: 1039450.283 ops/s
Iteration  23: 1035228.142 ops/s
Iteration  24: 1036021.083 ops/s
Iteration  25: 1034375.368 ops/s
Iteration  26: 1038718.219 ops/s
Iteration  27: 1043832.272 ops/s
Iteration  28: 1045213.623 ops/s
Iteration  29: 1037187.296 ops/s
Iteration  30: 1032409.019 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_addAllIterable":
  1035770.714 ±(99.9%) 4808.047 ops/s [Average]
  (min, avg, max) = (1018438.982, 1035770.714, 1045213.623), stdev = 7196.459
  CI (99.9%): [1030962.667, 1040578.761] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_addAllIterable  thrpt   30  1035770.714 ± 4808.047  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 996252.440 ops/s
# Warmup Iteration   2: 2310487.654 ops/s
# Warmup Iteration   3: 2862759.201 ops/s
# Warmup Iteration   4: 3415558.264 ops/s
# Warmup Iteration   5: 3367782.212 ops/s
# Warmup Iteration   6: 3393316.218 ops/s
# Warmup Iteration   7: 3380021.501 ops/s
# Warmup Iteration   8: 3408901.505 ops/s
# Warmup Iteration   9: 3405709.435 ops/s
# Warmup Iteration  10: 3422875.441 ops/s
# Warmup Iteration  11: 3402968.783 ops/s
# Warmup Iteration  12: 3417769.768 ops/s
# Warmup Iteration  13: 3405010.024 ops/s
# Warmup Iteration  14: 3379255.435 ops/s
# Warmup Iteration  15: 3405103.744 ops/s
# Warmup Iteration  16: 3388752.719 ops/s
# Warmup Iteration  17: 3391039.952 ops/s
# Warmup Iteration  18: 3403756.812 ops/s
# Warmup Iteration  19: 3408695.584 ops/s
# Warmup Iteration  20: 3408586.897 ops/s
# Warmup Iteration  21: 3402858.474 ops/s
# Warmup Iteration  22: 3426444.881 ops/s
# Warmup Iteration  23: 3409470.385 ops/s
# Warmup Iteration  24: 3390754.338 ops/s
# Warmup Iteration  25: 3413559.232 ops/s
# Warmup Iteration  26: 3403861.751 ops/s
# Warmup Iteration  27: 3395459.954 ops/s
# Warmup Iteration  28: 3404837.975 ops/s
# Warmup Iteration  29: 3416702.349 ops/s
# Warmup Iteration  30: 3431997.996 ops/s
Iteration   1: 3412365.535 ops/s
Iteration   2: 3419652.358 ops/s
Iteration   3: 3392531.743 ops/s
Iteration   4: 3415446.693 ops/s
Iteration   5: 3414125.752 ops/s
Iteration   6: 3404973.388 ops/s
Iteration   7: 3415403.155 ops/s
Iteration   8: 3410445.391 ops/s
Iteration   9: 3426099.279 ops/s
Iteration  10: 3402755.653 ops/s
Iteration  11: 3422468.019 ops/s
Iteration  12: 3364884.017 ops/s
Iteration  13: 3364957.197 ops/s
Iteration  14: 3367985.119 ops/s
Iteration  15: 3425043.218 ops/s
Iteration  16: 3406379.434 ops/s
Iteration  17: 3374393.901 ops/s
Iteration  18: 3427327.712 ops/s
Iteration  19: 3409947.952 ops/s
Iteration  20: 3423869.165 ops/s
Iteration  21: 3403977.221 ops/s
Iteration  22: 3395138.687 ops/s
Iteration  23: 3408448.709 ops/s
Iteration  24: 3395081.986 ops/s
Iteration  25: 3337214.866 ops/s
Iteration  26: 3413960.790 ops/s
Iteration  27: 3424446.736 ops/s
Iteration  28: 3404527.437 ops/s
Iteration  29: 3408856.862 ops/s
Iteration  30: 3406077.447 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_allSatisfy":
  3403292.847 ±(99.9%) 14416.681 ops/s [Average]
  (min, avg, max) = (3337214.866, 3403292.847, 3427327.712), stdev = 21578.211
  CI (99.9%): [3388876.166, 3417709.529] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_allSatisfy  thrpt   30  3403292.847 ± 14416.681  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1031094.869 ops/s
# Warmup Iteration   2: 2337213.193 ops/s
# Warmup Iteration   3: 3028471.157 ops/s
# Warmup Iteration   4: 3609932.960 ops/s
# Warmup Iteration   5: 3603865.754 ops/s
# Warmup Iteration   6: 3598735.107 ops/s
# Warmup Iteration   7: 3601064.327 ops/s
# Warmup Iteration   8: 3597362.220 ops/s
# Warmup Iteration   9: 3560389.067 ops/s
# Warmup Iteration  10: 3614923.166 ops/s
# Warmup Iteration  11: 3612966.363 ops/s
# Warmup Iteration  12: 3607717.954 ops/s
# Warmup Iteration  13: 3599684.320 ops/s
# Warmup Iteration  14: 3599164.554 ops/s
# Warmup Iteration  15: 3579034.250 ops/s
# Warmup Iteration  16: 3562023.142 ops/s
# Warmup Iteration  17: 3608447.584 ops/s
# Warmup Iteration  18: 3588965.040 ops/s
# Warmup Iteration  19: 3597434.375 ops/s
# Warmup Iteration  20: 3600298.481 ops/s
# Warmup Iteration  21: 3616442.042 ops/s
# Warmup Iteration  22: 3606692.073 ops/s
# Warmup Iteration  23: 3616194.280 ops/s
# Warmup Iteration  24: 3597244.422 ops/s
# Warmup Iteration  25: 3609305.632 ops/s
# Warmup Iteration  26: 3565768.241 ops/s
# Warmup Iteration  27: 3630038.898 ops/s
# Warmup Iteration  28: 3602227.893 ops/s
# Warmup Iteration  29: 3602595.775 ops/s
# Warmup Iteration  30: 3596363.812 ops/s
Iteration   1: 3625353.484 ops/s
Iteration   2: 3627915.933 ops/s
Iteration   3: 3609013.071 ops/s
Iteration   4: 3609538.190 ops/s
Iteration   5: 3610855.603 ops/s
Iteration   6: 3613431.004 ops/s
Iteration   7: 3593014.365 ops/s
Iteration   8: 3605824.364 ops/s
Iteration   9: 3617978.841 ops/s
Iteration  10: 3615178.568 ops/s
Iteration  11: 3584219.268 ops/s
Iteration  12: 3591359.158 ops/s
Iteration  13: 3613067.625 ops/s
Iteration  14: 3599165.759 ops/s
Iteration  15: 3587704.945 ops/s
Iteration  16: 3594363.768 ops/s
Iteration  17: 3618288.157 ops/s
Iteration  18: 3593343.651 ops/s
Iteration  19: 3617291.032 ops/s
Iteration  20: 3608581.263 ops/s
Iteration  21: 3598821.482 ops/s
Iteration  22: 3624728.766 ops/s
Iteration  23: 3629332.008 ops/s
Iteration  24: 3608962.718 ops/s
Iteration  25: 3621927.086 ops/s
Iteration  26: 3589289.405 ops/s
Iteration  27: 3612465.919 ops/s
Iteration  28: 3632817.628 ops/s
Iteration  29: 3604551.393 ops/s
Iteration  30: 3610959.175 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_anySatisfy":
  3608978.121 ±(99.9%) 8827.407 ops/s [Average]
  (min, avg, max) = (3584219.268, 3608978.121, 3632817.628), stdev = 13212.448
  CI (99.9%): [3600150.714, 3617805.528] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_anySatisfy  thrpt   30  3608978.121 ± 8827.407  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 927397.752 ops/s
# Warmup Iteration   2: 2035684.659 ops/s
# Warmup Iteration   3: 2153160.657 ops/s
# Warmup Iteration   4: 2334640.717 ops/s
# Warmup Iteration   5: 2471088.996 ops/s
# Warmup Iteration   6: 2476155.598 ops/s
# Warmup Iteration   7: 2459115.764 ops/s
# Warmup Iteration   8: 2483137.123 ops/s
# Warmup Iteration   9: 2468948.846 ops/s
# Warmup Iteration  10: 2462725.962 ops/s
# Warmup Iteration  11: 2468588.987 ops/s
# Warmup Iteration  12: 2465539.143 ops/s
# Warmup Iteration  13: 2449912.485 ops/s
# Warmup Iteration  14: 2474305.948 ops/s
# Warmup Iteration  15: 2470977.184 ops/s
# Warmup Iteration  16: 2471205.442 ops/s
# Warmup Iteration  17: 2465897.588 ops/s
# Warmup Iteration  18: 2462522.603 ops/s
# Warmup Iteration  19: 2461271.037 ops/s
# Warmup Iteration  20: 2456257.227 ops/s
# Warmup Iteration  21: 2466236.996 ops/s
# Warmup Iteration  22: 2466541.018 ops/s
# Warmup Iteration  23: 2449975.464 ops/s
# Warmup Iteration  24: 2461417.775 ops/s
# Warmup Iteration  25: 2461560.953 ops/s
# Warmup Iteration  26: 2467015.391 ops/s
# Warmup Iteration  27: 2466182.217 ops/s
# Warmup Iteration  28: 2469521.213 ops/s
# Warmup Iteration  29: 2434521.463 ops/s
# Warmup Iteration  30: 2463272.451 ops/s
Iteration   1: 2471278.655 ops/s
Iteration   2: 2475905.344 ops/s
Iteration   3: 2469664.678 ops/s
Iteration   4: 2444700.811 ops/s
Iteration   5: 2468877.815 ops/s
Iteration   6: 2422954.385 ops/s
Iteration   7: 2427777.090 ops/s
Iteration   8: 2469296.392 ops/s
Iteration   9: 2483881.301 ops/s
Iteration  10: 2479359.678 ops/s
Iteration  11: 2457787.810 ops/s
Iteration  12: 2487675.458 ops/s
Iteration  13: 2480047.688 ops/s
Iteration  14: 2467724.359 ops/s
Iteration  15: 2473486.909 ops/s
Iteration  16: 2458136.810 ops/s
Iteration  17: 2471991.010 ops/s
Iteration  18: 2476392.348 ops/s
Iteration  19: 2471902.428 ops/s
Iteration  20: 2459359.393 ops/s
Iteration  21: 2461405.010 ops/s
Iteration  22: 2467466.958 ops/s
Iteration  23: 2424026.457 ops/s
Iteration  24: 2460728.635 ops/s
Iteration  25: 2469062.609 ops/s
Iteration  26: 2495549.302 ops/s
Iteration  27: 2471168.861 ops/s
Iteration  28: 2459280.853 ops/s
Iteration  29: 2493792.663 ops/s
Iteration  30: 2473660.891 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_appendString":
  2466478.087 ±(99.9%) 11831.279 ops/s [Average]
  (min, avg, max) = (2422954.385, 2466478.087, 2495549.302), stdev = 17708.503
  CI (99.9%): [2454646.808, 2478309.366] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_appendString  thrpt   30  2466478.087 ± 11831.279  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2706829.869 ops/s
# Warmup Iteration   2: 4920547.126 ops/s
# Warmup Iteration   3: 6597450.363 ops/s
# Warmup Iteration   4: 6521956.652 ops/s
# Warmup Iteration   5: 5459699.446 ops/s
# Warmup Iteration   6: 6599068.938 ops/s
# Warmup Iteration   7: 6609597.203 ops/s
# Warmup Iteration   8: 6552800.574 ops/s
# Warmup Iteration   9: 6478541.076 ops/s
# Warmup Iteration  10: 6540088.244 ops/s
# Warmup Iteration  11: 6603842.863 ops/s
# Warmup Iteration  12: 6611004.335 ops/s
# Warmup Iteration  13: 6608724.246 ops/s
# Warmup Iteration  14: 6594099.218 ops/s
# Warmup Iteration  15: 6633807.168 ops/s
# Warmup Iteration  16: 6603976.510 ops/s
# Warmup Iteration  17: 6653424.523 ops/s
# Warmup Iteration  18: 6631496.037 ops/s
# Warmup Iteration  19: 6564213.311 ops/s
# Warmup Iteration  20: 6596626.843 ops/s
# Warmup Iteration  21: 6608382.149 ops/s
# Warmup Iteration  22: 6611215.688 ops/s
# Warmup Iteration  23: 6618280.851 ops/s
# Warmup Iteration  24: 6612446.915 ops/s
# Warmup Iteration  25: 6578393.684 ops/s
# Warmup Iteration  26: 6626507.485 ops/s
# Warmup Iteration  27: 6619384.311 ops/s
# Warmup Iteration  28: 6586712.010 ops/s
# Warmup Iteration  29: 6651957.991 ops/s
# Warmup Iteration  30: 6514234.688 ops/s
Iteration   1: 6648181.304 ops/s
Iteration   2: 6688884.918 ops/s
Iteration   3: 6577245.813 ops/s
Iteration   4: 6606444.150 ops/s
Iteration   5: 6520750.113 ops/s
Iteration   6: 6622764.353 ops/s
Iteration   7: 6598467.484 ops/s
Iteration   8: 6641174.657 ops/s
Iteration   9: 6627653.446 ops/s
Iteration  10: 6628878.900 ops/s
Iteration  11: 6659738.141 ops/s
Iteration  12: 6637730.418 ops/s
Iteration  13: 6623740.596 ops/s
Iteration  14: 6538221.792 ops/s
Iteration  15: 6619653.964 ops/s
Iteration  16: 6614446.154 ops/s
Iteration  17: 6645395.528 ops/s
Iteration  18: 6596173.465 ops/s
Iteration  19: 6646349.526 ops/s
Iteration  20: 6634776.526 ops/s
Iteration  21: 6621413.318 ops/s
Iteration  22: 6641736.820 ops/s
Iteration  23: 6604384.890 ops/s
Iteration  24: 6640840.390 ops/s
Iteration  25: 6535775.578 ops/s
Iteration  26: 6652190.583 ops/s
Iteration  27: 6657738.674 ops/s
Iteration  28: 6663193.907 ops/s
Iteration  29: 6364871.567 ops/s
Iteration  30: 6612732.835 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_asLazy":
  6612384.994 ±(99.9%) 40237.437 ops/s [Average]
  (min, avg, max) = (6364871.567, 6612384.994, 6688884.918), stdev = 60225.506
  CI (99.9%): [6572147.557, 6652622.430] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_asLazy  thrpt   30  6612384.994 ± 40237.437  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6737822.483 ops/s
# Warmup Iteration   2: 12881412.655 ops/s
# Warmup Iteration   3: 12035592.107 ops/s
# Warmup Iteration   4: 13608353.089 ops/s
# Warmup Iteration   5: 13589671.140 ops/s
# Warmup Iteration   6: 13604243.720 ops/s
# Warmup Iteration   7: 13567397.287 ops/s
# Warmup Iteration   8: 13594643.179 ops/s
# Warmup Iteration   9: 13619592.903 ops/s
# Warmup Iteration  10: 13549657.731 ops/s
# Warmup Iteration  11: 13611866.140 ops/s
# Warmup Iteration  12: 13603250.194 ops/s
# Warmup Iteration  13: 13537309.378 ops/s
# Warmup Iteration  14: 13489655.144 ops/s
# Warmup Iteration  15: 13499052.360 ops/s
# Warmup Iteration  16: 13565995.460 ops/s
# Warmup Iteration  17: 13587449.578 ops/s
# Warmup Iteration  18: 13558111.076 ops/s
# Warmup Iteration  19: 13602827.001 ops/s
# Warmup Iteration  20: 13549816.547 ops/s
# Warmup Iteration  21: 13611726.394 ops/s
# Warmup Iteration  22: 13592647.543 ops/s
# Warmup Iteration  23: 13666446.473 ops/s
# Warmup Iteration  24: 13538375.013 ops/s
# Warmup Iteration  25: 13607543.961 ops/s
# Warmup Iteration  26: 13487060.906 ops/s
# Warmup Iteration  27: 13562695.084 ops/s
# Warmup Iteration  28: 13576875.230 ops/s
# Warmup Iteration  29: 13668758.785 ops/s
# Warmup Iteration  30: 13403707.909 ops/s
Iteration   1: 13500185.837 ops/s
Iteration   2: 13535049.672 ops/s
Iteration   3: 13415832.592 ops/s
Iteration   4: 13630628.769 ops/s
Iteration   5: 13314849.951 ops/s
Iteration   6: 13582624.915 ops/s
Iteration   7: 13621949.111 ops/s
Iteration   8: 13529834.843 ops/s
Iteration   9: 13601523.408 ops/s
Iteration  10: 13508109.452 ops/s
Iteration  11: 13548819.835 ops/s
Iteration  12: 13606142.584 ops/s
Iteration  13: 13614959.513 ops/s
Iteration  14: 13381295.057 ops/s
Iteration  15: 13382614.943 ops/s
Iteration  16: 13566457.903 ops/s
Iteration  17: 13567922.735 ops/s
Iteration  18: 13571820.813 ops/s
Iteration  19: 13574008.888 ops/s
Iteration  20: 13586006.909 ops/s
Iteration  21: 13628633.252 ops/s
Iteration  22: 13593584.457 ops/s
Iteration  23: 13598375.003 ops/s
Iteration  24: 13582013.864 ops/s
Iteration  25: 13609102.648 ops/s
Iteration  26: 13667214.038 ops/s
Iteration  27: 13584977.750 ops/s
Iteration  28: 13606298.750 ops/s
Iteration  29: 13437758.459 ops/s
Iteration  30: 13646928.687 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_asSynchronized":
  13553184.155 ±(99.9%) 57542.193 ops/s [Average]
  (min, avg, max) = (13314849.951, 13553184.155, 13667214.038), stdev = 86126.452
  CI (99.9%): [13495641.962, 13610726.347] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score       Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_asSynchronized  thrpt   30  13553184.155 ± 57542.193  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6442410.923 ops/s
# Warmup Iteration   2: 12076402.376 ops/s
# Warmup Iteration   3: 11763170.793 ops/s
# Warmup Iteration   4: 12885489.708 ops/s
# Warmup Iteration   5: 12951381.134 ops/s
# Warmup Iteration   6: 12949535.401 ops/s
# Warmup Iteration   7: 12958008.233 ops/s
# Warmup Iteration   8: 12902343.360 ops/s
# Warmup Iteration   9: 12869147.927 ops/s
# Warmup Iteration  10: 12952436.580 ops/s
# Warmup Iteration  11: 12916122.448 ops/s
# Warmup Iteration  12: 12876290.343 ops/s
# Warmup Iteration  13: 12929385.368 ops/s
# Warmup Iteration  14: 12969517.376 ops/s
# Warmup Iteration  15: 12978805.263 ops/s
# Warmup Iteration  16: 12897703.516 ops/s
# Warmup Iteration  17: 12900601.343 ops/s
# Warmup Iteration  18: 12888187.233 ops/s
# Warmup Iteration  19: 12742391.144 ops/s
# Warmup Iteration  20: 12939427.283 ops/s
# Warmup Iteration  21: 12750000.750 ops/s
# Warmup Iteration  22: 12830375.884 ops/s
# Warmup Iteration  23: 12991454.739 ops/s
# Warmup Iteration  24: 12792995.421 ops/s
# Warmup Iteration  25: 12953394.723 ops/s
# Warmup Iteration  26: 12818387.822 ops/s
# Warmup Iteration  27: 12838779.661 ops/s
# Warmup Iteration  28: 12951008.198 ops/s
# Warmup Iteration  29: 12983983.926 ops/s
# Warmup Iteration  30: 12711754.004 ops/s
Iteration   1: 12984249.572 ops/s
Iteration   2: 12989639.118 ops/s
Iteration   3: 12975167.635 ops/s
Iteration   4: 13012830.355 ops/s
Iteration   5: 12996553.113 ops/s
Iteration   6: 13031976.945 ops/s
Iteration   7: 12960642.548 ops/s
Iteration   8: 12980857.910 ops/s
Iteration   9: 12970180.155 ops/s
Iteration  10: 12977362.613 ops/s
Iteration  11: 12998853.443 ops/s
Iteration  12: 12970172.669 ops/s
Iteration  13: 12969782.736 ops/s
Iteration  14: 13000365.114 ops/s
Iteration  15: 12688011.364 ops/s
Iteration  16: 13047691.103 ops/s
Iteration  17: 12997228.266 ops/s
Iteration  18: 12967346.070 ops/s
Iteration  19: 12893830.163 ops/s
Iteration  20: 12929761.583 ops/s
Iteration  21: 12889393.139 ops/s
Iteration  22: 12857762.312 ops/s
Iteration  23: 12782427.346 ops/s
Iteration  24: 12907656.028 ops/s
Iteration  25: 12913792.672 ops/s
Iteration  26: 12907510.814 ops/s
Iteration  27: 12845165.854 ops/s
Iteration  28: 12909338.510 ops/s
Iteration  29: 12953921.533 ops/s
Iteration  30: 12868472.168 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable":
  12939264.762 ±(99.9%) 51071.083 ops/s [Average]
  (min, avg, max) = (12688011.364, 12939264.762, 13047691.103), stdev = 76440.799
  CI (99.9%): [12888193.678, 12990335.845] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score       Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  12939264.762 ± 51071.083  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4692125.914 ops/s
# Warmup Iteration   2: 10094977.810 ops/s
# Warmup Iteration   3: 8380985.458 ops/s
# Warmup Iteration   4: 10035602.312 ops/s
# Warmup Iteration   5: 10029515.206 ops/s
# Warmup Iteration   6: 10031909.863 ops/s
# Warmup Iteration   7: 9938470.574 ops/s
# Warmup Iteration   8: 10054776.617 ops/s
# Warmup Iteration   9: 10071692.317 ops/s
# Warmup Iteration  10: 10014369.291 ops/s
# Warmup Iteration  11: 9898821.222 ops/s
# Warmup Iteration  12: 10072999.865 ops/s
# Warmup Iteration  13: 10074712.907 ops/s
# Warmup Iteration  14: 10070167.332 ops/s
# Warmup Iteration  15: 10074295.572 ops/s
# Warmup Iteration  16: 10015866.086 ops/s
# Warmup Iteration  17: 9992629.719 ops/s
# Warmup Iteration  18: 10033007.259 ops/s
# Warmup Iteration  19: 10053288.788 ops/s
# Warmup Iteration  20: 10003596.159 ops/s
# Warmup Iteration  21: 10054752.328 ops/s
# Warmup Iteration  22: 10045282.799 ops/s
# Warmup Iteration  23: 10038585.401 ops/s
# Warmup Iteration  24: 9913004.181 ops/s
# Warmup Iteration  25: 10008157.735 ops/s
# Warmup Iteration  26: 9956646.241 ops/s
# Warmup Iteration  27: 10015483.411 ops/s
# Warmup Iteration  28: 10039917.080 ops/s
# Warmup Iteration  29: 10008494.723 ops/s
# Warmup Iteration  30: 10008439.991 ops/s
Iteration   1: 10063000.699 ops/s
Iteration   2: 9911333.419 ops/s
Iteration   3: 10020640.134 ops/s
Iteration   4: 10057998.216 ops/s
Iteration   5: 9940051.090 ops/s
Iteration   6: 10049805.120 ops/s
Iteration   7: 10055154.338 ops/s
Iteration   8: 10049829.354 ops/s
Iteration   9: 9848997.601 ops/s
Iteration  10: 10019801.955 ops/s
Iteration  11: 10069302.303 ops/s
Iteration  12: 10065990.570 ops/s
Iteration  13: 10041527.244 ops/s
Iteration  14: 9986833.280 ops/s
Iteration  15: 10012261.006 ops/s
Iteration  16: 10005577.312 ops/s
Iteration  17: 10031093.415 ops/s
Iteration  18: 10085253.058 ops/s
Iteration  19: 10011342.473 ops/s
Iteration  20: 10064042.085 ops/s
Iteration  21: 10053240.951 ops/s
Iteration  22: 9906566.985 ops/s
Iteration  23: 10018302.668 ops/s
Iteration  24: 10053466.259 ops/s
Iteration  25: 10040535.223 ops/s
Iteration  26: 10068350.028 ops/s
Iteration  27: 9959631.993 ops/s
Iteration  28: 9962107.030 ops/s
Iteration  29: 9895263.017 ops/s
Iteration  30: 9848163.720 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_booleanIterator":
  10006515.418 ±(99.9%) 44904.924 ops/s [Average]
  (min, avg, max) = (9848163.720, 10006515.418, 10085253.058), stdev = 67211.581
  CI (99.9%): [9961610.495, 10051420.342] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score       Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_booleanIterator  thrpt   30  10006515.418 ± 44904.924  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 525716.958 ops/s
# Warmup Iteration   2: 713637.906 ops/s
# Warmup Iteration   3: 855649.508 ops/s
# Warmup Iteration   4: 852334.050 ops/s
# Warmup Iteration   5: 857477.455 ops/s
# Warmup Iteration   6: 860453.543 ops/s
# Warmup Iteration   7: 832998.365 ops/s
# Warmup Iteration   8: 734741.589 ops/s
# Warmup Iteration   9: 852188.912 ops/s
# Warmup Iteration  10: 858991.817 ops/s
# Warmup Iteration  11: 853591.399 ops/s
# Warmup Iteration  12: 848500.072 ops/s
# Warmup Iteration  13: 843188.952 ops/s
# Warmup Iteration  14: 858174.669 ops/s
# Warmup Iteration  15: 859945.693 ops/s
# Warmup Iteration  16: 852655.269 ops/s
# Warmup Iteration  17: 902769.032 ops/s
# Warmup Iteration  18: 903376.490 ops/s
# Warmup Iteration  19: 899011.315 ops/s
# Warmup Iteration  20: 900340.584 ops/s
# Warmup Iteration  21: 905439.417 ops/s
# Warmup Iteration  22: 886656.997 ops/s
# Warmup Iteration  23: 904174.410 ops/s
# Warmup Iteration  24: 901328.962 ops/s
# Warmup Iteration  25: 899302.498 ops/s
# Warmup Iteration  26: 907028.841 ops/s
# Warmup Iteration  27: 903872.271 ops/s
# Warmup Iteration  28: 901693.418 ops/s
# Warmup Iteration  29: 899726.168 ops/s
# Warmup Iteration  30: 890279.171 ops/s
Iteration   1: 901622.816 ops/s
Iteration   2: 903010.108 ops/s
Iteration   3: 901760.620 ops/s
Iteration   4: 886632.966 ops/s
Iteration   5: 903659.047 ops/s
Iteration   6: 905907.260 ops/s
Iteration   7: 900482.819 ops/s
Iteration   8: 903624.791 ops/s
Iteration   9: 900123.399 ops/s
Iteration  10: 908872.961 ops/s
Iteration  11: 904580.641 ops/s
Iteration  12: 883903.120 ops/s
Iteration  13: 905470.680 ops/s
Iteration  14: 904029.366 ops/s
Iteration  15: 898995.476 ops/s
Iteration  16: 885720.191 ops/s
Iteration  17: 899434.292 ops/s
Iteration  18: 900805.500 ops/s
Iteration  19: 903282.967 ops/s
Iteration  20: 906296.109 ops/s
Iteration  21: 889114.404 ops/s
Iteration  22: 906446.417 ops/s
Iteration  23: 899225.985 ops/s
Iteration  24: 898024.096 ops/s
Iteration  25: 890100.539 ops/s
Iteration  26: 901005.581 ops/s
Iteration  27: 904945.807 ops/s
Iteration  28: 890504.490 ops/s
Iteration  29: 908826.408 ops/s
Iteration  30: 901766.919 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove":
  899939.193 ±(99.9%) 4601.385 ops/s [Average]
  (min, avg, max) = (883903.120, 899939.193, 908872.961), stdev = 6887.137
  CI (99.9%): [895337.807, 904540.578] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  899939.193 ± 4601.385  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 134410.600 ops/s
# Warmup Iteration   2: 222748.234 ops/s
# Warmup Iteration   3: 262417.669 ops/s
# Warmup Iteration   4: 264260.945 ops/s
# Warmup Iteration   5: 264072.458 ops/s
# Warmup Iteration   6: 221953.400 ops/s
# Warmup Iteration   7: 260867.063 ops/s
# Warmup Iteration   8: 264007.133 ops/s
# Warmup Iteration   9: 263338.613 ops/s
# Warmup Iteration  10: 264220.048 ops/s
# Warmup Iteration  11: 264251.319 ops/s
# Warmup Iteration  12: 264046.283 ops/s
# Warmup Iteration  13: 263982.689 ops/s
# Warmup Iteration  14: 263847.211 ops/s
# Warmup Iteration  15: 262723.225 ops/s
# Warmup Iteration  16: 262019.117 ops/s
# Warmup Iteration  17: 271134.308 ops/s
# Warmup Iteration  18: 270444.204 ops/s
# Warmup Iteration  19: 271566.741 ops/s
# Warmup Iteration  20: 272275.521 ops/s
# Warmup Iteration  21: 272230.195 ops/s
# Warmup Iteration  22: 271885.832 ops/s
# Warmup Iteration  23: 272430.360 ops/s
# Warmup Iteration  24: 272322.651 ops/s
# Warmup Iteration  25: 272814.524 ops/s
# Warmup Iteration  26: 272505.103 ops/s
# Warmup Iteration  27: 272436.423 ops/s
# Warmup Iteration  28: 272315.562 ops/s
# Warmup Iteration  29: 272019.479 ops/s
# Warmup Iteration  30: 274197.282 ops/s
Iteration   1: 272248.061 ops/s
Iteration   2: 271091.834 ops/s
Iteration   3: 271415.479 ops/s
Iteration   4: 273619.399 ops/s
Iteration   5: 272077.975 ops/s
Iteration   6: 273278.705 ops/s
Iteration   7: 272055.508 ops/s
Iteration   8: 273874.923 ops/s
Iteration   9: 272127.935 ops/s
Iteration  10: 273373.978 ops/s
Iteration  11: 272246.704 ops/s
Iteration  12: 273815.921 ops/s
Iteration  13: 271828.145 ops/s
Iteration  14: 273054.627 ops/s
Iteration  15: 272714.196 ops/s
Iteration  16: 272504.796 ops/s
Iteration  17: 272939.741 ops/s
Iteration  18: 272176.170 ops/s
Iteration  19: 273284.083 ops/s
Iteration  20: 272263.231 ops/s
Iteration  21: 273103.596 ops/s
Iteration  22: 271665.102 ops/s
Iteration  23: 272607.400 ops/s
Iteration  24: 272431.091 ops/s
Iteration  25: 273333.152 ops/s
Iteration  26: 272874.881 ops/s
Iteration  27: 272504.687 ops/s
Iteration  28: 273823.426 ops/s
Iteration  29: 273308.852 ops/s
Iteration  30: 273128.431 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_chunk":
  272692.401 ±(99.9%) 487.225 ops/s [Average]
  (min, avg, max) = (271091.834, 272692.401, 273874.923), stdev = 729.256
  CI (99.9%): [272205.176, 273179.627] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_chunk  thrpt   30  272692.401 ± 487.225  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4152032.576 ops/s
# Warmup Iteration   2: 7586585.903 ops/s
# Warmup Iteration   3: 8524861.639 ops/s
# Warmup Iteration   4: 8814939.048 ops/s
# Warmup Iteration   5: 8724338.226 ops/s
# Warmup Iteration   6: 8804107.731 ops/s
# Warmup Iteration   7: 8811285.310 ops/s
# Warmup Iteration   8: 8767220.500 ops/s
# Warmup Iteration   9: 8818692.678 ops/s
# Warmup Iteration  10: 8849587.012 ops/s
# Warmup Iteration  11: 8770857.707 ops/s
# Warmup Iteration  12: 8780507.260 ops/s
# Warmup Iteration  13: 8813231.698 ops/s
# Warmup Iteration  14: 8795641.358 ops/s
# Warmup Iteration  15: 8756955.383 ops/s
# Warmup Iteration  16: 8771335.657 ops/s
# Warmup Iteration  17: 8734692.115 ops/s
# Warmup Iteration  18: 8770936.717 ops/s
# Warmup Iteration  19: 8796233.687 ops/s
# Warmup Iteration  20: 8815762.968 ops/s
# Warmup Iteration  21: 8788430.339 ops/s
# Warmup Iteration  22: 8769641.542 ops/s
# Warmup Iteration  23: 8826541.751 ops/s
# Warmup Iteration  24: 8761944.674 ops/s
# Warmup Iteration  25: 8762667.340 ops/s
# Warmup Iteration  26: 8768375.876 ops/s
# Warmup Iteration  27: 8781576.353 ops/s
# Warmup Iteration  28: 8797251.941 ops/s
# Warmup Iteration  29: 8759644.599 ops/s
# Warmup Iteration  30: 8797038.214 ops/s
Iteration   1: 8816314.905 ops/s
Iteration   2: 8840679.078 ops/s
Iteration   3: 8816630.440 ops/s
Iteration   4: 8766660.932 ops/s
Iteration   5: 8784493.000 ops/s
Iteration   6: 8800372.433 ops/s
Iteration   7: 8827585.267 ops/s
Iteration   8: 8795556.556 ops/s
Iteration   9: 8806719.613 ops/s
Iteration  10: 8790250.279 ops/s
Iteration  11: 8767424.056 ops/s
Iteration  12: 8742378.234 ops/s
Iteration  13: 8747158.914 ops/s
Iteration  14: 8707136.523 ops/s
Iteration  15: 8743283.276 ops/s
Iteration  16: 8642866.160 ops/s
Iteration  17: 8701256.840 ops/s
Iteration  18: 8670808.576 ops/s
Iteration  19: 8718268.574 ops/s
Iteration  20: 8724424.086 ops/s
Iteration  21: 8706511.800 ops/s
Iteration  22: 8768868.665 ops/s
Iteration  23: 8689691.661 ops/s
Iteration  24: 8731008.783 ops/s
Iteration  25: 8732687.527 ops/s
Iteration  26: 8668739.610 ops/s
Iteration  27: 8659739.345 ops/s
Iteration  28: 8668550.578 ops/s
Iteration  29: 8613836.194 ops/s
Iteration  30: 8616332.959 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_clear":
  8735541.162 ±(99.9%) 42273.285 ops/s [Average]
  (min, avg, max) = (8613836.194, 8735541.162, 8840679.078), stdev = 63272.668
  CI (99.9%): [8693267.877, 8777814.447] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_clear  thrpt   30  8735541.162 ± 42273.285  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 673556.951 ops/s
# Warmup Iteration   2: 1662124.403 ops/s
# Warmup Iteration   3: 1777281.935 ops/s
# Warmup Iteration   4: 1454843.056 ops/s
# Warmup Iteration   5: 1764919.844 ops/s
# Warmup Iteration   6: 1779269.352 ops/s
# Warmup Iteration   7: 1774712.783 ops/s
# Warmup Iteration   8: 1777190.198 ops/s
# Warmup Iteration   9: 1775919.033 ops/s
# Warmup Iteration  10: 1773781.841 ops/s
# Warmup Iteration  11: 1775527.012 ops/s
# Warmup Iteration  12: 1774749.719 ops/s
# Warmup Iteration  13: 1768295.596 ops/s
# Warmup Iteration  14: 1776438.606 ops/s
# Warmup Iteration  15: 1770386.141 ops/s
# Warmup Iteration  16: 1773283.689 ops/s
# Warmup Iteration  17: 1770576.602 ops/s
# Warmup Iteration  18: 1773499.462 ops/s
# Warmup Iteration  19: 1776811.978 ops/s
# Warmup Iteration  20: 1774295.388 ops/s
# Warmup Iteration  21: 1780373.200 ops/s
# Warmup Iteration  22: 1773668.911 ops/s
# Warmup Iteration  23: 1771392.139 ops/s
# Warmup Iteration  24: 1774528.384 ops/s
# Warmup Iteration  25: 1773872.365 ops/s
# Warmup Iteration  26: 1776009.951 ops/s
# Warmup Iteration  27: 1777248.367 ops/s
# Warmup Iteration  28: 1767971.117 ops/s
# Warmup Iteration  29: 1773358.366 ops/s
# Warmup Iteration  30: 1771497.258 ops/s
Iteration   1: 1770332.226 ops/s
Iteration   2: 1776373.590 ops/s
Iteration   3: 1768820.961 ops/s
Iteration   4: 1763177.780 ops/s
Iteration   5: 1767541.237 ops/s
Iteration   6: 1770596.445 ops/s
Iteration   7: 1783718.037 ops/s
Iteration   8: 1773339.498 ops/s
Iteration   9: 1764152.018 ops/s
Iteration  10: 1782853.503 ops/s
Iteration  11: 1778167.477 ops/s
Iteration  12: 1779780.899 ops/s
Iteration  13: 1769032.428 ops/s
Iteration  14: 1772488.398 ops/s
Iteration  15: 1774246.232 ops/s
Iteration  16: 1776572.592 ops/s
Iteration  17: 1770049.081 ops/s
Iteration  18: 1776077.481 ops/s
Iteration  19: 1783523.622 ops/s
Iteration  20: 1771333.888 ops/s
Iteration  21: 1778846.129 ops/s
Iteration  22: 1780993.373 ops/s
Iteration  23: 1775807.788 ops/s
Iteration  24: 1778524.800 ops/s
Iteration  25: 1768028.732 ops/s
Iteration  26: 1774810.258 ops/s
Iteration  27: 1771271.002 ops/s
Iteration  28: 1768409.672 ops/s
Iteration  29: 1772960.127 ops/s
Iteration  30: 1774059.708 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_collect":
  1773862.966 ±(99.9%) 3639.161 ops/s [Average]
  (min, avg, max) = (1763177.780, 1773862.966, 1783718.037), stdev = 5446.925
  CI (99.9%): [1770223.805, 1777502.127] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_collect  thrpt   30  1773862.966 ± 3639.161  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1799388.394 ops/s
# Warmup Iteration   2: 3968136.170 ops/s
# Warmup Iteration   3: 4842860.508 ops/s
# Warmup Iteration   4: 5774389.550 ops/s
# Warmup Iteration   5: 5746345.755 ops/s
# Warmup Iteration   6: 5769981.139 ops/s
# Warmup Iteration   7: 5767516.632 ops/s
# Warmup Iteration   8: 5750642.960 ops/s
# Warmup Iteration   9: 5781396.302 ops/s
# Warmup Iteration  10: 5754776.184 ops/s
# Warmup Iteration  11: 5787880.074 ops/s
# Warmup Iteration  12: 5779862.428 ops/s
# Warmup Iteration  13: 5788205.430 ops/s
# Warmup Iteration  14: 5757180.194 ops/s
# Warmup Iteration  15: 5759496.182 ops/s
# Warmup Iteration  16: 5800784.433 ops/s
# Warmup Iteration  17: 5786499.894 ops/s
# Warmup Iteration  18: 5795154.776 ops/s
# Warmup Iteration  19: 5766741.915 ops/s
# Warmup Iteration  20: 5800704.609 ops/s
# Warmup Iteration  21: 5782838.746 ops/s
# Warmup Iteration  22: 5759924.688 ops/s
# Warmup Iteration  23: 5772643.563 ops/s
# Warmup Iteration  24: 5764505.677 ops/s
# Warmup Iteration  25: 5796269.060 ops/s
# Warmup Iteration  26: 5758592.253 ops/s
# Warmup Iteration  27: 5774726.009 ops/s
# Warmup Iteration  28: 5771686.260 ops/s
# Warmup Iteration  29: 5768627.320 ops/s
# Warmup Iteration  30: 5795779.126 ops/s
Iteration   1: 5784579.229 ops/s
Iteration   2: 5808073.700 ops/s
Iteration   3: 5782754.198 ops/s
Iteration   4: 5781176.926 ops/s
Iteration   5: 5790711.596 ops/s
Iteration   6: 5779952.346 ops/s
Iteration   7: 5783256.586 ops/s
Iteration   8: 5768684.904 ops/s
Iteration   9: 5799047.804 ops/s
Iteration  10: 5766902.657 ops/s
Iteration  11: 5763306.912 ops/s
Iteration  12: 5777363.402 ops/s
Iteration  13: 5807565.667 ops/s
Iteration  14: 5783957.024 ops/s
Iteration  15: 5760759.895 ops/s
Iteration  16: 5792138.766 ops/s
Iteration  17: 5766630.762 ops/s
Iteration  18: 5772142.478 ops/s
Iteration  19: 5783223.019 ops/s
Iteration  20: 5796534.499 ops/s
Iteration  21: 5767704.530 ops/s
Iteration  22: 5746940.032 ops/s
Iteration  23: 5784141.671 ops/s
Iteration  24: 5781740.241 ops/s
Iteration  25: 5768592.915 ops/s
Iteration  26: 5755530.067 ops/s
Iteration  27: 5780996.112 ops/s
Iteration  28: 5770326.387 ops/s
Iteration  29: 5800652.751 ops/s
Iteration  30: 5761154.708 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_contains":
  5778884.726 ±(99.9%) 10033.887 ops/s [Average]
  (min, avg, max) = (5746940.032, 5778884.726, 5808073.700), stdev = 15018.251
  CI (99.9%): [5768850.839, 5788918.614] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_contains  thrpt   30  5778884.726 ± 10033.887  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6617905.193 ops/s
# Warmup Iteration   2: 13185466.124 ops/s
# Warmup Iteration   3: 11446903.707 ops/s
# Warmup Iteration   4: 13322172.914 ops/s
# Warmup Iteration   5: 13352870.386 ops/s
# Warmup Iteration   6: 13265587.283 ops/s
# Warmup Iteration   7: 13317165.173 ops/s
# Warmup Iteration   8: 13344819.859 ops/s
# Warmup Iteration   9: 13354041.232 ops/s
# Warmup Iteration  10: 13315761.737 ops/s
# Warmup Iteration  11: 13288696.037 ops/s
# Warmup Iteration  12: 13286464.320 ops/s
# Warmup Iteration  13: 13250770.160 ops/s
# Warmup Iteration  14: 13342046.795 ops/s
# Warmup Iteration  15: 13327610.264 ops/s
# Warmup Iteration  16: 13322747.492 ops/s
# Warmup Iteration  17: 13346400.328 ops/s
# Warmup Iteration  18: 13295855.566 ops/s
# Warmup Iteration  19: 13346996.956 ops/s
# Warmup Iteration  20: 13290443.890 ops/s
# Warmup Iteration  21: 13277233.739 ops/s
# Warmup Iteration  22: 13293082.632 ops/s
# Warmup Iteration  23: 13326963.965 ops/s
# Warmup Iteration  24: 13253401.176 ops/s
# Warmup Iteration  25: 13299083.203 ops/s
# Warmup Iteration  26: 13298950.500 ops/s
# Warmup Iteration  27: 13343807.246 ops/s
# Warmup Iteration  28: 13300432.338 ops/s
# Warmup Iteration  29: 13354662.129 ops/s
# Warmup Iteration  30: 13298501.579 ops/s
Iteration   1: 13301873.203 ops/s
Iteration   2: 13369116.832 ops/s
Iteration   3: 13286591.674 ops/s
Iteration   4: 13364755.752 ops/s
Iteration   5: 13329783.680 ops/s
Iteration   6: 13278249.225 ops/s
Iteration   7: 13333148.701 ops/s
Iteration   8: 13191175.312 ops/s
Iteration   9: 13369686.409 ops/s
Iteration  10: 13381217.738 ops/s
Iteration  11: 13314100.785 ops/s
Iteration  12: 13309959.431 ops/s
Iteration  13: 13270313.131 ops/s
Iteration  14: 13365805.796 ops/s
Iteration  15: 13360314.163 ops/s
Iteration  16: 13367924.688 ops/s
Iteration  17: 13299972.911 ops/s
Iteration  18: 13355121.181 ops/s
Iteration  19: 13347524.121 ops/s
Iteration  20: 13367794.187 ops/s
Iteration  21: 13334554.635 ops/s
Iteration  22: 13374630.001 ops/s
Iteration  23: 13328149.516 ops/s
Iteration  24: 13316818.466 ops/s
Iteration  25: 13379284.297 ops/s
Iteration  26: 13420094.602 ops/s
Iteration  27: 13336148.923 ops/s
Iteration  28: 13284414.647 ops/s
Iteration  29: 13362884.520 ops/s
Iteration  30: 13315435.375 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsAllArray":
  13333894.797 ±(99.9%) 29978.324 ops/s [Average]
  (min, avg, max) = (13191175.312, 13333894.797, 13420094.602), stdev = 44870.148
  CI (99.9%): [13303916.473, 13363873.121] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt         Score       Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsAllArray  thrpt   30  13333894.797 ± 29978.324  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2219424.654 ops/s
# Warmup Iteration   2: 5376347.612 ops/s
# Warmup Iteration   3: 7102070.200 ops/s
# Warmup Iteration   4: 8475736.706 ops/s
# Warmup Iteration   5: 8476187.460 ops/s
# Warmup Iteration   6: 8418776.438 ops/s
# Warmup Iteration   7: 8489516.146 ops/s
# Warmup Iteration   8: 8459022.895 ops/s
# Warmup Iteration   9: 8450073.955 ops/s
# Warmup Iteration  10: 8454596.681 ops/s
# Warmup Iteration  11: 8432852.154 ops/s
# Warmup Iteration  12: 8479185.988 ops/s
# Warmup Iteration  13: 8421953.793 ops/s
# Warmup Iteration  14: 8452673.040 ops/s
# Warmup Iteration  15: 8462182.414 ops/s
# Warmup Iteration  16: 8450520.576 ops/s
# Warmup Iteration  17: 8462994.878 ops/s
# Warmup Iteration  18: 8494469.188 ops/s
# Warmup Iteration  19: 8518577.446 ops/s
# Warmup Iteration  20: 8524085.467 ops/s
# Warmup Iteration  21: 8456440.789 ops/s
# Warmup Iteration  22: 8485550.502 ops/s
# Warmup Iteration  23: 8528978.514 ops/s
# Warmup Iteration  24: 8479336.682 ops/s
# Warmup Iteration  25: 8528167.127 ops/s
# Warmup Iteration  26: 8463991.032 ops/s
# Warmup Iteration  27: 8494630.613 ops/s
# Warmup Iteration  28: 8442693.420 ops/s
# Warmup Iteration  29: 8502179.653 ops/s
# Warmup Iteration  30: 8499316.922 ops/s
Iteration   1: 8452146.859 ops/s
Iteration   2: 8466988.001 ops/s
Iteration   3: 8420418.913 ops/s
Iteration   4: 8481802.911 ops/s
Iteration   5: 8470272.991 ops/s
Iteration   6: 8405899.593 ops/s
Iteration   7: 8499994.650 ops/s
Iteration   8: 8519601.341 ops/s
Iteration   9: 8560089.760 ops/s
Iteration  10: 8506256.579 ops/s
Iteration  11: 8524683.845 ops/s
Iteration  12: 8478084.610 ops/s
Iteration  13: 8467512.683 ops/s
Iteration  14: 8532978.568 ops/s
Iteration  15: 8512041.401 ops/s
Iteration  16: 8474221.901 ops/s
Iteration  17: 8462647.621 ops/s
Iteration  18: 8496826.197 ops/s
Iteration  19: 8456937.714 ops/s
Iteration  20: 8521023.860 ops/s
Iteration  21: 8477625.783 ops/s
Iteration  22: 8465428.403 ops/s
Iteration  23: 8502462.429 ops/s
Iteration  24: 8428529.738 ops/s
Iteration  25: 8423567.088 ops/s
Iteration  26: 8472054.691 ops/s
Iteration  27: 8451520.027 ops/s
Iteration  28: 8456329.714 ops/s
Iteration  29: 8486010.725 ops/s
Iteration  30: 8533315.646 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable":
  8480242.475 ±(99.9%) 24452.378 ops/s [Average]
  (min, avg, max) = (8405899.593, 8480242.475, 8560089.760), stdev = 36599.171
  CI (99.9%): [8455790.097, 8504694.853] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable  thrpt   30  8480242.475 ± 24452.378  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1126361.595 ops/s
# Warmup Iteration   2: 2248429.683 ops/s
# Warmup Iteration   3: 4743729.449 ops/s
# Warmup Iteration   4: 3992111.959 ops/s
# Warmup Iteration   5: 4801279.185 ops/s
# Warmup Iteration   6: 4794996.564 ops/s
# Warmup Iteration   7: 4781469.386 ops/s
# Warmup Iteration   8: 4782071.129 ops/s
# Warmup Iteration   9: 4788871.873 ops/s
# Warmup Iteration  10: 4775040.744 ops/s
# Warmup Iteration  11: 4800441.445 ops/s
# Warmup Iteration  12: 4781096.684 ops/s
# Warmup Iteration  13: 4800428.155 ops/s
# Warmup Iteration  14: 4794798.403 ops/s
# Warmup Iteration  15: 4794671.396 ops/s
# Warmup Iteration  16: 4804135.125 ops/s
# Warmup Iteration  17: 4791386.184 ops/s
# Warmup Iteration  18: 4796650.048 ops/s
# Warmup Iteration  19: 4785086.777 ops/s
# Warmup Iteration  20: 4793092.484 ops/s
# Warmup Iteration  21: 4775128.122 ops/s
# Warmup Iteration  22: 4777222.621 ops/s
# Warmup Iteration  23: 4772370.427 ops/s
# Warmup Iteration  24: 4794632.454 ops/s
# Warmup Iteration  25: 4767584.091 ops/s
# Warmup Iteration  26: 4788363.867 ops/s
# Warmup Iteration  27: 4785602.109 ops/s
# Warmup Iteration  28: 4769976.620 ops/s
# Warmup Iteration  29: 4771875.202 ops/s
# Warmup Iteration  30: 4773592.840 ops/s
Iteration   1: 4790209.055 ops/s
Iteration   2: 4763494.776 ops/s
Iteration   3: 4779504.100 ops/s
Iteration   4: 4792115.911 ops/s
Iteration   5: 4772816.877 ops/s
Iteration   6: 4764341.345 ops/s
Iteration   7: 4785681.929 ops/s
Iteration   8: 4787035.252 ops/s
Iteration   9: 4762820.516 ops/s
Iteration  10: 4746276.556 ops/s
Iteration  11: 4762312.429 ops/s
Iteration  12: 4751637.978 ops/s
Iteration  13: 4752239.356 ops/s
Iteration  14: 4766152.990 ops/s
Iteration  15: 4788065.017 ops/s
Iteration  16: 4763694.057 ops/s
Iteration  17: 4784361.474 ops/s
Iteration  18: 4776956.700 ops/s
Iteration  19: 4783461.374 ops/s
Iteration  20: 4767664.339 ops/s
Iteration  21: 4783943.576 ops/s
Iteration  22: 4749588.463 ops/s
Iteration  23: 4753622.918 ops/s
Iteration  24: 4785574.034 ops/s
Iteration  25: 4761117.407 ops/s
Iteration  26: 4776846.862 ops/s
Iteration  27: 4786522.394 ops/s
Iteration  28: 4779918.167 ops/s
Iteration  29: 4805687.493 ops/s
Iteration  30: 4782583.762 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray":
  4773541.570 ±(99.9%) 9947.801 ops/s [Average]
  (min, avg, max) = (4746276.556, 4773541.570, 4805687.493), stdev = 14889.401
  CI (99.9%): [4763593.770, 4783489.371] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray  thrpt   30  4773541.570 ± 9947.801  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 523748.296 ops/s
# Warmup Iteration   2: 789264.071 ops/s
# Warmup Iteration   3: 1050701.053 ops/s
# Warmup Iteration   4: 1055972.654 ops/s
# Warmup Iteration   5: 1056579.277 ops/s
# Warmup Iteration   6: 877586.732 ops/s
# Warmup Iteration   7: 1053104.712 ops/s
# Warmup Iteration   8: 1054699.975 ops/s
# Warmup Iteration   9: 1058162.893 ops/s
# Warmup Iteration  10: 1055368.172 ops/s
# Warmup Iteration  11: 1058055.498 ops/s
# Warmup Iteration  12: 1057307.858 ops/s
# Warmup Iteration  13: 1052090.029 ops/s
# Warmup Iteration  14: 1053147.055 ops/s
# Warmup Iteration  15: 1054083.794 ops/s
# Warmup Iteration  16: 1054464.844 ops/s
# Warmup Iteration  17: 1056433.524 ops/s
# Warmup Iteration  18: 1055028.096 ops/s
# Warmup Iteration  19: 1054030.879 ops/s
# Warmup Iteration  20: 1055385.203 ops/s
# Warmup Iteration  21: 1052300.330 ops/s
# Warmup Iteration  22: 1057653.499 ops/s
# Warmup Iteration  23: 1054658.116 ops/s
# Warmup Iteration  24: 1055367.390 ops/s
# Warmup Iteration  25: 1058642.388 ops/s
# Warmup Iteration  26: 1059443.918 ops/s
# Warmup Iteration  27: 1055172.710 ops/s
# Warmup Iteration  28: 1053513.099 ops/s
# Warmup Iteration  29: 1056736.428 ops/s
# Warmup Iteration  30: 1055947.946 ops/s
Iteration   1: 1054205.814 ops/s
Iteration   2: 1058936.551 ops/s
Iteration   3: 1054285.210 ops/s
Iteration   4: 1058048.562 ops/s
Iteration   5: 1060537.456 ops/s
Iteration   6: 1058020.007 ops/s
Iteration   7: 1054650.835 ops/s
Iteration   8: 1054724.763 ops/s
Iteration   9: 1053023.844 ops/s
Iteration  10: 1056569.857 ops/s
Iteration  11: 1057011.601 ops/s
Iteration  12: 1057302.300 ops/s
Iteration  13: 1057409.996 ops/s
Iteration  14: 1056961.554 ops/s
Iteration  15: 1053986.112 ops/s
Iteration  16: 1053776.255 ops/s
Iteration  17: 1054061.868 ops/s
Iteration  18: 1057086.547 ops/s
Iteration  19: 1057774.723 ops/s
Iteration  20: 1053030.498 ops/s
Iteration  21: 1059700.102 ops/s
Iteration  22: 1055458.703 ops/s
Iteration  23: 1056171.702 ops/s
Iteration  24: 1061163.595 ops/s
Iteration  25: 1057610.866 ops/s
Iteration  26: 1053786.887 ops/s
Iteration  27: 1060826.883 ops/s
Iteration  28: 1057056.327 ops/s
Iteration  29: 1055645.567 ops/s
Iteration  30: 1056584.423 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable":
  1056513.647 ±(99.9%) 1534.354 ops/s [Average]
  (min, avg, max) = (1053023.844, 1056513.647, 1061163.595), stdev = 2296.549
  CI (99.9%): [1054979.293, 1058048.001] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1056513.647 ± 1534.354  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1130879.145 ops/s
# Warmup Iteration   2: 2272204.364 ops/s
# Warmup Iteration   3: 4872444.765 ops/s
# Warmup Iteration   4: 4065277.341 ops/s
# Warmup Iteration   5: 4878448.358 ops/s
# Warmup Iteration   6: 4892972.669 ops/s
# Warmup Iteration   7: 4901125.668 ops/s
# Warmup Iteration   8: 4909611.397 ops/s
# Warmup Iteration   9: 4902787.100 ops/s
# Warmup Iteration  10: 4905371.416 ops/s
# Warmup Iteration  11: 4911568.389 ops/s
# Warmup Iteration  12: 4908904.266 ops/s
# Warmup Iteration  13: 4880538.481 ops/s
# Warmup Iteration  14: 4896914.299 ops/s
# Warmup Iteration  15: 4893709.656 ops/s
# Warmup Iteration  16: 4899832.708 ops/s
# Warmup Iteration  17: 4884055.702 ops/s
# Warmup Iteration  18: 4894948.597 ops/s
# Warmup Iteration  19: 4901438.156 ops/s
# Warmup Iteration  20: 4887746.033 ops/s
# Warmup Iteration  21: 4885427.726 ops/s
# Warmup Iteration  22: 4888129.879 ops/s
# Warmup Iteration  23: 4886396.250 ops/s
# Warmup Iteration  24: 4871799.047 ops/s
# Warmup Iteration  25: 4872596.194 ops/s
# Warmup Iteration  26: 4816833.716 ops/s
# Warmup Iteration  27: 4868803.100 ops/s
# Warmup Iteration  28: 4884760.459 ops/s
# Warmup Iteration  29: 4900464.363 ops/s
# Warmup Iteration  30: 4903964.627 ops/s
Iteration   1: 4906383.235 ops/s
Iteration   2: 4899407.506 ops/s
Iteration   3: 4902042.197 ops/s
Iteration   4: 4907951.123 ops/s
Iteration   5: 4882635.750 ops/s
Iteration   6: 4878897.224 ops/s
Iteration   7: 4912684.144 ops/s
Iteration   8: 4868472.712 ops/s
Iteration   9: 4896586.860 ops/s
Iteration  10: 4885438.937 ops/s
Iteration  11: 4891533.499 ops/s
Iteration  12: 4906152.996 ops/s
Iteration  13: 4878555.541 ops/s
Iteration  14: 4908773.663 ops/s
Iteration  15: 4891421.633 ops/s
Iteration  16: 4878921.541 ops/s
Iteration  17: 4904339.638 ops/s
Iteration  18: 4902830.546 ops/s
Iteration  19: 4903634.368 ops/s
Iteration  20: 4883749.675 ops/s
Iteration  21: 4890523.121 ops/s
Iteration  22: 4898665.111 ops/s
Iteration  23: 4856096.113 ops/s
Iteration  24: 4914195.689 ops/s
Iteration  25: 4886357.550 ops/s
Iteration  26: 4890002.942 ops/s
Iteration  27: 4890102.600 ops/s
Iteration  28: 4869896.631 ops/s
Iteration  29: 4896125.802 ops/s
Iteration  30: 4867116.650 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray":
  4891649.833 ±(99.9%) 9782.873 ops/s [Average]
  (min, avg, max) = (4856096.113, 4891649.833, 4914195.689), stdev = 14642.544
  CI (99.9%): [4881866.961, 4901432.706] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray  thrpt   30  4891649.833 ± 9782.873  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 497578.278 ops/s
# Warmup Iteration   2: 735042.118 ops/s
# Warmup Iteration   3: 952383.632 ops/s
# Warmup Iteration   4: 954703.475 ops/s
# Warmup Iteration   5: 956538.149 ops/s
# Warmup Iteration   6: 875121.986 ops/s
# Warmup Iteration   7: 873082.676 ops/s
# Warmup Iteration   8: 953080.636 ops/s
# Warmup Iteration   9: 953147.333 ops/s
# Warmup Iteration  10: 957472.358 ops/s
# Warmup Iteration  11: 953481.892 ops/s
# Warmup Iteration  12: 951756.266 ops/s
# Warmup Iteration  13: 956755.094 ops/s
# Warmup Iteration  14: 953061.704 ops/s
# Warmup Iteration  15: 954728.285 ops/s
# Warmup Iteration  16: 951218.295 ops/s
# Warmup Iteration  17: 955895.762 ops/s
# Warmup Iteration  18: 953119.832 ops/s
# Warmup Iteration  19: 952105.210 ops/s
# Warmup Iteration  20: 955870.571 ops/s
# Warmup Iteration  21: 954914.688 ops/s
# Warmup Iteration  22: 957386.019 ops/s
# Warmup Iteration  23: 953354.429 ops/s
# Warmup Iteration  24: 953204.177 ops/s
# Warmup Iteration  25: 952485.353 ops/s
# Warmup Iteration  26: 952452.230 ops/s
# Warmup Iteration  27: 955452.762 ops/s
# Warmup Iteration  28: 954221.348 ops/s
# Warmup Iteration  29: 952280.647 ops/s
# Warmup Iteration  30: 954430.035 ops/s
Iteration   1: 952087.728 ops/s
Iteration   2: 953107.047 ops/s
Iteration   3: 952972.729 ops/s
Iteration   4: 951474.699 ops/s
Iteration   5: 956577.887 ops/s
Iteration   6: 951551.204 ops/s
Iteration   7: 954796.725 ops/s
Iteration   8: 949901.735 ops/s
Iteration   9: 953846.620 ops/s
Iteration  10: 952281.416 ops/s
Iteration  11: 958981.020 ops/s
Iteration  12: 954901.531 ops/s
Iteration  13: 955270.741 ops/s
Iteration  14: 952069.516 ops/s
Iteration  15: 952270.087 ops/s
Iteration  16: 955778.102 ops/s
Iteration  17: 953703.995 ops/s
Iteration  18: 951550.006 ops/s
Iteration  19: 951793.116 ops/s
Iteration  20: 954161.144 ops/s
Iteration  21: 954144.554 ops/s
Iteration  22: 951711.013 ops/s
Iteration  23: 951837.488 ops/s
Iteration  24: 956171.768 ops/s
Iteration  25: 953602.036 ops/s
Iteration  26: 952283.435 ops/s
Iteration  27: 958010.395 ops/s
Iteration  28: 956942.990 ops/s
Iteration  29: 957244.218 ops/s
Iteration  30: 957333.730 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable":
  953945.289 ±(99.9%) 1554.999 ops/s [Average]
  (min, avg, max) = (949901.735, 953945.289, 958981.020), stdev = 2327.449
  CI (99.9%): [952390.291, 955500.288] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  953945.289 ± 1554.999  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1131887.890 ops/s
# Warmup Iteration   2: 2219262.520 ops/s
# Warmup Iteration   3: 2656957.860 ops/s
# Warmup Iteration   4: 2649591.627 ops/s
# Warmup Iteration   5: 2207420.088 ops/s
# Warmup Iteration   6: 2666811.649 ops/s
# Warmup Iteration   7: 2664708.409 ops/s
# Warmup Iteration   8: 2653115.600 ops/s
# Warmup Iteration   9: 2665858.264 ops/s
# Warmup Iteration  10: 2649116.891 ops/s
# Warmup Iteration  11: 2658252.991 ops/s
# Warmup Iteration  12: 2656185.696 ops/s
# Warmup Iteration  13: 2657369.887 ops/s
# Warmup Iteration  14: 2652917.283 ops/s
# Warmup Iteration  15: 2660010.645 ops/s
# Warmup Iteration  16: 2650315.458 ops/s
# Warmup Iteration  17: 2648644.127 ops/s
# Warmup Iteration  18: 2651448.979 ops/s
# Warmup Iteration  19: 2652382.969 ops/s
# Warmup Iteration  20: 2657965.180 ops/s
# Warmup Iteration  21: 2642607.127 ops/s
# Warmup Iteration  22: 2658774.408 ops/s
# Warmup Iteration  23: 2656344.858 ops/s
# Warmup Iteration  24: 2655286.852 ops/s
# Warmup Iteration  25: 2654042.018 ops/s
# Warmup Iteration  26: 2650482.263 ops/s
# Warmup Iteration  27: 2651900.239 ops/s
# Warmup Iteration  28: 2655934.572 ops/s
# Warmup Iteration  29: 2661104.141 ops/s
# Warmup Iteration  30: 2662664.180 ops/s
Iteration   1: 2653270.637 ops/s
Iteration   2: 2651804.575 ops/s
Iteration   3: 2645939.375 ops/s
Iteration   4: 2646379.717 ops/s
Iteration   5: 2662383.611 ops/s
Iteration   6: 2667433.212 ops/s
Iteration   7: 2647300.783 ops/s
Iteration   8: 2647011.834 ops/s
Iteration   9: 2663347.006 ops/s
Iteration  10: 2656654.751 ops/s
Iteration  11: 2655055.528 ops/s
Iteration  12: 2659980.212 ops/s
Iteration  13: 2650641.920 ops/s
Iteration  14: 2658159.801 ops/s
Iteration  15: 2652722.950 ops/s
Iteration  16: 2651855.432 ops/s
Iteration  17: 2664041.473 ops/s
Iteration  18: 2646435.015 ops/s
Iteration  19: 2662076.024 ops/s
Iteration  20: 2643215.185 ops/s
Iteration  21: 2642258.310 ops/s
Iteration  22: 2641861.723 ops/s
Iteration  23: 2645647.661 ops/s
Iteration  24: 2654889.149 ops/s
Iteration  25: 2653363.837 ops/s
Iteration  26: 2650914.667 ops/s
Iteration  27: 2653669.408 ops/s
Iteration  28: 2646053.569 ops/s
Iteration  29: 2647398.263 ops/s
Iteration  30: 2654589.379 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_count":
  2652545.167 ±(99.9%) 4622.019 ops/s [Average]
  (min, avg, max) = (2641861.723, 2652545.167, 2667433.212), stdev = 6918.021
  CI (99.9%): [2647923.148, 2657167.186] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_count  thrpt   30  2652545.167 ± 4622.019  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1440112.687 ops/s
# Warmup Iteration   2: 3008569.673 ops/s
# Warmup Iteration   3: 5535432.506 ops/s
# Warmup Iteration   4: 4660644.872 ops/s
# Warmup Iteration   5: 5567738.904 ops/s
# Warmup Iteration   6: 5545739.018 ops/s
# Warmup Iteration   7: 5553540.720 ops/s
# Warmup Iteration   8: 5556094.997 ops/s
# Warmup Iteration   9: 5578551.496 ops/s
# Warmup Iteration  10: 5560714.646 ops/s
# Warmup Iteration  11: 5570828.155 ops/s
# Warmup Iteration  12: 5580875.013 ops/s
# Warmup Iteration  13: 5569859.932 ops/s
# Warmup Iteration  14: 5590168.477 ops/s
# Warmup Iteration  15: 5552294.862 ops/s
# Warmup Iteration  16: 5580498.594 ops/s
# Warmup Iteration  17: 5573281.669 ops/s
# Warmup Iteration  18: 5574295.087 ops/s
# Warmup Iteration  19: 5555788.724 ops/s
# Warmup Iteration  20: 5569321.601 ops/s
# Warmup Iteration  21: 5567454.005 ops/s
# Warmup Iteration  22: 5559537.151 ops/s
# Warmup Iteration  23: 5546426.414 ops/s
# Warmup Iteration  24: 5558275.156 ops/s
# Warmup Iteration  25: 5568224.356 ops/s
# Warmup Iteration  26: 5562034.569 ops/s
# Warmup Iteration  27: 5543535.182 ops/s
# Warmup Iteration  28: 5573387.539 ops/s
# Warmup Iteration  29: 5570348.585 ops/s
# Warmup Iteration  30: 5590798.720 ops/s
Iteration   1: 5587933.564 ops/s
Iteration   2: 5585943.559 ops/s
Iteration   3: 5580735.677 ops/s
Iteration   4: 5570581.582 ops/s
Iteration   5: 5551486.310 ops/s
Iteration   6: 5581978.546 ops/s
Iteration   7: 5586944.780 ops/s
Iteration   8: 5590280.012 ops/s
Iteration   9: 5569504.592 ops/s
Iteration  10: 5572142.352 ops/s
Iteration  11: 5562521.459 ops/s
Iteration  12: 5563492.175 ops/s
Iteration  13: 5581016.038 ops/s
Iteration  14: 5562559.886 ops/s
Iteration  15: 5553716.164 ops/s
Iteration  16: 5524865.589 ops/s
Iteration  17: 5543591.822 ops/s
Iteration  18: 5573695.224 ops/s
Iteration  19: 5563609.214 ops/s
Iteration  20: 5544290.320 ops/s
Iteration  21: 5550175.427 ops/s
Iteration  22: 5552546.481 ops/s
Iteration  23: 5537256.383 ops/s
Iteration  24: 5568134.425 ops/s
Iteration  25: 5537644.449 ops/s
Iteration  26: 5578200.763 ops/s
Iteration  27: 5549722.910 ops/s
Iteration  28: 5569384.705 ops/s
Iteration  29: 5575951.236 ops/s
Iteration  30: 5579360.360 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_detectIfNone":
  5564975.534 ±(99.9%) 11462.225 ops/s [Average]
  (min, avg, max) = (5524865.589, 5564975.534, 5590280.012), stdev = 17156.120
  CI (99.9%): [5553513.309, 5576437.758] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_detectIfNone  thrpt   30  5564975.534 ± 11462.225  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2456797.502 ops/s
# Warmup Iteration   2: 5302818.653 ops/s
# Warmup Iteration   3: 5135839.962 ops/s
# Warmup Iteration   4: 6165430.121 ops/s
# Warmup Iteration   5: 6123609.286 ops/s
# Warmup Iteration   6: 6168863.934 ops/s
# Warmup Iteration   7: 6153537.899 ops/s
# Warmup Iteration   8: 6125251.621 ops/s
# Warmup Iteration   9: 6162753.954 ops/s
# Warmup Iteration  10: 6126982.796 ops/s
# Warmup Iteration  11: 6173620.144 ops/s
# Warmup Iteration  12: 6140146.649 ops/s
# Warmup Iteration  13: 6160165.747 ops/s
# Warmup Iteration  14: 6152421.261 ops/s
# Warmup Iteration  15: 6170600.593 ops/s
# Warmup Iteration  16: 6143823.245 ops/s
# Warmup Iteration  17: 6144500.861 ops/s
# Warmup Iteration  18: 6159248.331 ops/s
# Warmup Iteration  19: 6168362.770 ops/s
# Warmup Iteration  20: 6168894.162 ops/s
# Warmup Iteration  21: 6160872.630 ops/s
# Warmup Iteration  22: 6164464.895 ops/s
# Warmup Iteration  23: 6160992.266 ops/s
# Warmup Iteration  24: 6166711.280 ops/s
# Warmup Iteration  25: 6159899.221 ops/s
# Warmup Iteration  26: 6154412.668 ops/s
# Warmup Iteration  27: 6142982.848 ops/s
# Warmup Iteration  28: 6147784.914 ops/s
# Warmup Iteration  29: 6146997.198 ops/s
# Warmup Iteration  30: 6154972.145 ops/s
Iteration   1: 6180018.933 ops/s
Iteration   2: 6188126.720 ops/s
Iteration   3: 6140033.988 ops/s
Iteration   4: 6117516.129 ops/s
Iteration   5: 6161115.818 ops/s
Iteration   6: 6192100.169 ops/s
Iteration   7: 6162057.040 ops/s
Iteration   8: 6171737.426 ops/s
Iteration   9: 6157574.439 ops/s
Iteration  10: 6163798.482 ops/s
Iteration  11: 6162305.531 ops/s
Iteration  12: 6159201.597 ops/s
Iteration  13: 6156460.507 ops/s
Iteration  14: 6158093.795 ops/s
Iteration  15: 6179511.317 ops/s
Iteration  16: 6147240.453 ops/s
Iteration  17: 6139395.024 ops/s
Iteration  18: 6150517.419 ops/s
Iteration  19: 6146832.752 ops/s
Iteration  20: 6182601.406 ops/s
Iteration  21: 6174257.745 ops/s
Iteration  22: 6171176.325 ops/s
Iteration  23: 6142733.363 ops/s
Iteration  24: 6156539.090 ops/s
Iteration  25: 6142372.716 ops/s
Iteration  26: 6146503.939 ops/s
Iteration  27: 6130416.369 ops/s
Iteration  28: 6144393.763 ops/s
Iteration  29: 6165733.430 ops/s
Iteration  30: 6134390.556 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_forEach":
  6157491.875 ±(99.9%) 11837.416 ops/s [Average]
  (min, avg, max) = (6117516.129, 6157491.875, 6192100.169), stdev = 17717.688
  CI (99.9%): [6145654.459, 6169329.290] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_forEach  thrpt   30  6157491.875 ± 11837.416  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6139621.409 ops/s
# Warmup Iteration   2: 12952320.044 ops/s
# Warmup Iteration   3: 15185101.332 ops/s
# Warmup Iteration   4: 18001370.459 ops/s
# Warmup Iteration   5: 18055140.331 ops/s
# Warmup Iteration   6: 18038753.728 ops/s
# Warmup Iteration   7: 18013432.178 ops/s
# Warmup Iteration   8: 18041831.082 ops/s
# Warmup Iteration   9: 17990392.172 ops/s
# Warmup Iteration  10: 17968115.430 ops/s
# Warmup Iteration  11: 17915714.277 ops/s
# Warmup Iteration  12: 18005063.398 ops/s
# Warmup Iteration  13: 18001034.939 ops/s
# Warmup Iteration  14: 18011745.869 ops/s
# Warmup Iteration  15: 18103909.689 ops/s
# Warmup Iteration  16: 18070913.461 ops/s
# Warmup Iteration  17: 18019397.879 ops/s
# Warmup Iteration  18: 18055970.578 ops/s
# Warmup Iteration  19: 17981695.614 ops/s
# Warmup Iteration  20: 18021894.258 ops/s
# Warmup Iteration  21: 17982590.150 ops/s
# Warmup Iteration  22: 18056379.114 ops/s
# Warmup Iteration  23: 18061047.246 ops/s
# Warmup Iteration  24: 18025418.597 ops/s
# Warmup Iteration  25: 18022958.946 ops/s
# Warmup Iteration  26: 18080544.886 ops/s
# Warmup Iteration  27: 18088387.127 ops/s
# Warmup Iteration  28: 18111697.230 ops/s
# Warmup Iteration  29: 18066241.260 ops/s
# Warmup Iteration  30: 18077083.461 ops/s
Iteration   1: 18092592.742 ops/s
Iteration   2: 18158876.496 ops/s
Iteration   3: 18144877.347 ops/s
Iteration   4: 18074223.551 ops/s
Iteration   5: 18191410.591 ops/s
Iteration   6: 18086033.063 ops/s
Iteration   7: 18164155.867 ops/s
Iteration   8: 18031189.794 ops/s
Iteration   9: 18131744.773 ops/s
Iteration  10: 18094528.769 ops/s
Iteration  11: 18122119.145 ops/s
Iteration  12: 18075686.412 ops/s
Iteration  13: 18097908.102 ops/s
Iteration  14: 18067331.928 ops/s
Iteration  15: 18112026.266 ops/s
Iteration  16: 18188999.392 ops/s
Iteration  17: 18068142.449 ops/s
Iteration  18: 17955478.016 ops/s
Iteration  19: 18103132.913 ops/s
Iteration  20: 17995506.049 ops/s
Iteration  21: 18159517.044 ops/s
Iteration  22: 18129653.028 ops/s
Iteration  23: 18056541.685 ops/s
Iteration  24: 18021323.273 ops/s
Iteration  25: 17999887.020 ops/s
Iteration  26: 18108876.365 ops/s
Iteration  27: 18027702.386 ops/s
Iteration  28: 18085620.317 ops/s
Iteration  29: 18081553.710 ops/s
Iteration  30: 18015459.892 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_injectInto":
  18088069.946 ±(99.9%) 39024.421 ops/s [Average]
  (min, avg, max) = (17955478.016, 18088069.946, 18191410.591), stdev = 58409.921
  CI (99.9%): [18049045.525, 18127094.367] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_injectInto  thrpt   30  18088069.946 ± 39024.421  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 769565.757 ops/s
# Warmup Iteration   2: 1587609.911 ops/s
# Warmup Iteration   3: 1859279.206 ops/s
# Warmup Iteration   4: 2177603.897 ops/s
# Warmup Iteration   5: 2176995.880 ops/s
# Warmup Iteration   6: 2169551.991 ops/s
# Warmup Iteration   7: 2179589.210 ops/s
# Warmup Iteration   8: 2172771.890 ops/s
# Warmup Iteration   9: 2184674.638 ops/s
# Warmup Iteration  10: 2169811.223 ops/s
# Warmup Iteration  11: 2179814.929 ops/s
# Warmup Iteration  12: 2173798.247 ops/s
# Warmup Iteration  13: 2179831.176 ops/s
# Warmup Iteration  14: 2184943.019 ops/s
# Warmup Iteration  15: 2181900.369 ops/s
# Warmup Iteration  16: 2177692.616 ops/s
# Warmup Iteration  17: 2188016.858 ops/s
# Warmup Iteration  18: 2177435.311 ops/s
# Warmup Iteration  19: 2181473.960 ops/s
# Warmup Iteration  20: 2182547.131 ops/s
# Warmup Iteration  21: 2177173.397 ops/s
# Warmup Iteration  22: 2185940.908 ops/s
# Warmup Iteration  23: 2183038.612 ops/s
# Warmup Iteration  24: 2177761.526 ops/s
# Warmup Iteration  25: 2173290.867 ops/s
# Warmup Iteration  26: 2164103.324 ops/s
# Warmup Iteration  27: 2180275.647 ops/s
# Warmup Iteration  28: 2173597.295 ops/s
# Warmup Iteration  29: 2180739.722 ops/s
# Warmup Iteration  30: 2176629.988 ops/s
Iteration   1: 2171621.835 ops/s
Iteration   2: 2175234.728 ops/s
Iteration   3: 2183603.131 ops/s
Iteration   4: 2168729.004 ops/s
Iteration   5: 2167433.686 ops/s
Iteration   6: 2175828.671 ops/s
Iteration   7: 2183444.263 ops/s
Iteration   8: 2174735.397 ops/s
Iteration   9: 2166139.498 ops/s
Iteration  10: 2173190.362 ops/s
Iteration  11: 2170387.311 ops/s
Iteration  12: 2184315.427 ops/s
Iteration  13: 2187610.301 ops/s
Iteration  14: 2185212.660 ops/s
Iteration  15: 2180431.923 ops/s
Iteration  16: 2193701.276 ops/s
Iteration  17: 2177634.717 ops/s
Iteration  18: 2179073.820 ops/s
Iteration  19: 2182843.810 ops/s
Iteration  20: 2177085.020 ops/s
Iteration  21: 2174275.045 ops/s
Iteration  22: 2173655.763 ops/s
Iteration  23: 2181589.101 ops/s
Iteration  24: 2182924.189 ops/s
Iteration  25: 2179512.810 ops/s
Iteration  26: 2182320.570 ops/s
Iteration  27: 2179139.851 ops/s
Iteration  28: 2186068.270 ops/s
Iteration  29: 2175781.685 ops/s
Iteration  30: 2185744.607 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_isEmpty":
  2178642.291 ±(99.9%) 4326.557 ops/s [Average]
  (min, avg, max) = (2166139.498, 2178642.291, 2193701.276), stdev = 6475.788
  CI (99.9%): [2174315.734, 2182968.848] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  2178642.291 ± 4326.557  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 657330.645 ops/s
# Warmup Iteration   2: 676690.942 ops/s
# Warmup Iteration   3: 854213.039 ops/s
# Warmup Iteration   4: 886159.653 ops/s
# Warmup Iteration   5: 889348.735 ops/s
# Warmup Iteration   6: 888021.946 ops/s
# Warmup Iteration   7: 888163.166 ops/s
# Warmup Iteration   8: 886786.075 ops/s
# Warmup Iteration   9: 886246.284 ops/s
# Warmup Iteration  10: 886081.586 ops/s
# Warmup Iteration  11: 886222.997 ops/s
# Warmup Iteration  12: 842423.837 ops/s
# Warmup Iteration  13: 784197.583 ops/s
# Warmup Iteration  14: 888212.878 ops/s
# Warmup Iteration  15: 885871.774 ops/s
# Warmup Iteration  16: 885050.893 ops/s
# Warmup Iteration  17: 940355.344 ops/s
# Warmup Iteration  18: 942700.944 ops/s
# Warmup Iteration  19: 939705.124 ops/s
# Warmup Iteration  20: 945863.448 ops/s
# Warmup Iteration  21: 939205.723 ops/s
# Warmup Iteration  22: 948300.576 ops/s
# Warmup Iteration  23: 943511.925 ops/s
# Warmup Iteration  24: 944020.006 ops/s
# Warmup Iteration  25: 939531.912 ops/s
# Warmup Iteration  26: 943850.007 ops/s
# Warmup Iteration  27: 946630.787 ops/s
# Warmup Iteration  28: 942420.831 ops/s
# Warmup Iteration  29: 944331.764 ops/s
# Warmup Iteration  30: 939285.737 ops/s
Iteration   1: 939960.470 ops/s
Iteration   2: 938242.287 ops/s
Iteration   3: 940274.278 ops/s
Iteration   4: 943928.646 ops/s
Iteration   5: 938646.717 ops/s
Iteration   6: 946264.762 ops/s
Iteration   7: 938872.360 ops/s
Iteration   8: 947971.509 ops/s
Iteration   9: 943362.636 ops/s
Iteration  10: 942144.544 ops/s
Iteration  11: 935448.208 ops/s
Iteration  12: 940778.728 ops/s
Iteration  13: 934233.895 ops/s
Iteration  14: 936741.132 ops/s
Iteration  15: 935552.680 ops/s
Iteration  16: 935408.736 ops/s
Iteration  17: 943351.924 ops/s
Iteration  18: 937066.129 ops/s
Iteration  19: 939465.288 ops/s
Iteration  20: 943750.640 ops/s
Iteration  21: 942980.064 ops/s
Iteration  22: 944362.723 ops/s
Iteration  23: 942885.910 ops/s
Iteration  24: 941010.749 ops/s
Iteration  25: 946757.449 ops/s
Iteration  26: 938057.468 ops/s
Iteration  27: 943191.877 ops/s
Iteration  28: 943415.894 ops/s
Iteration  29: 937167.446 ops/s
Iteration  30: 943040.184 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws":
  940811.178 ±(99.9%) 2439.813 ops/s [Average]
  (min, avg, max) = (934233.895, 940811.178, 947971.509), stdev = 3651.797
  CI (99.9%): [938371.365, 943250.991] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws  thrpt   30  940811.178 ± 2439.813  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 721874.631 ops/s
# Warmup Iteration   2: 752945.971 ops/s
# Warmup Iteration   3: 995769.672 ops/s
# Warmup Iteration   4: 984199.184 ops/s
# Warmup Iteration   5: 986267.134 ops/s
# Warmup Iteration   6: 991404.288 ops/s
# Warmup Iteration   7: 982971.162 ops/s
# Warmup Iteration   8: 987145.052 ops/s
# Warmup Iteration   9: 986688.915 ops/s
# Warmup Iteration  10: 984236.537 ops/s
# Warmup Iteration  11: 864045.683 ops/s
# Warmup Iteration  12: 948164.939 ops/s
# Warmup Iteration  13: 983310.302 ops/s
# Warmup Iteration  14: 989274.701 ops/s
# Warmup Iteration  15: 986375.244 ops/s
# Warmup Iteration  16: 986874.470 ops/s
# Warmup Iteration  17: 1052756.278 ops/s
# Warmup Iteration  18: 1057286.012 ops/s
# Warmup Iteration  19: 1050458.699 ops/s
# Warmup Iteration  20: 1053681.047 ops/s
# Warmup Iteration  21: 1050297.407 ops/s
# Warmup Iteration  22: 1053558.347 ops/s
# Warmup Iteration  23: 1051051.461 ops/s
# Warmup Iteration  24: 1054282.486 ops/s
# Warmup Iteration  25: 1052071.644 ops/s
# Warmup Iteration  26: 1051803.185 ops/s
# Warmup Iteration  27: 1052666.001 ops/s
# Warmup Iteration  28: 1055967.636 ops/s
# Warmup Iteration  29: 1052278.111 ops/s
# Warmup Iteration  30: 1045963.508 ops/s
Iteration   1: 1046415.561 ops/s
Iteration   2: 1049252.413 ops/s
Iteration   3: 1052065.770 ops/s
Iteration   4: 1050583.683 ops/s
Iteration   5: 1053758.186 ops/s
Iteration   6: 1053316.827 ops/s
Iteration   7: 1049342.241 ops/s
Iteration   8: 1050583.336 ops/s
Iteration   9: 1057939.988 ops/s
Iteration  10: 1052124.958 ops/s
Iteration  11: 1052175.153 ops/s
Iteration  12: 1053922.272 ops/s
Iteration  13: 1055052.344 ops/s
Iteration  14: 1048187.246 ops/s
Iteration  15: 1048580.602 ops/s
Iteration  16: 1057046.029 ops/s
Iteration  17: 1047329.772 ops/s
Iteration  18: 1051514.447 ops/s
Iteration  19: 1049019.045 ops/s
Iteration  20: 1051229.412 ops/s
Iteration  21: 1055533.309 ops/s
Iteration  22: 1057950.488 ops/s
Iteration  23: 1054909.967 ops/s
Iteration  24: 1050944.468 ops/s
Iteration  25: 1056176.012 ops/s
Iteration  26: 1054848.760 ops/s
Iteration  27: 1044840.800 ops/s
Iteration  28: 1051803.333 ops/s
Iteration  29: 1052721.917 ops/s
Iteration  30: 1056118.473 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList":
  1052176.227 ±(99.9%) 2277.792 ops/s [Average]
  (min, avg, max) = (1044840.800, 1052176.227, 1057950.488), stdev = 3409.292
  CI (99.9%): [1049898.435, 1054454.019] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1052176.227 ± 2277.792  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 695612.477 ops/s
# Warmup Iteration   2: 727150.934 ops/s
# Warmup Iteration   3: 985764.385 ops/s
# Warmup Iteration   4: 984923.835 ops/s
# Warmup Iteration   5: 987615.418 ops/s
# Warmup Iteration   6: 987052.347 ops/s
# Warmup Iteration   7: 982892.837 ops/s
# Warmup Iteration   8: 986260.772 ops/s
# Warmup Iteration   9: 988026.511 ops/s
# Warmup Iteration  10: 986219.966 ops/s
# Warmup Iteration  11: 821430.218 ops/s
# Warmup Iteration  12: 984767.911 ops/s
# Warmup Iteration  13: 987496.509 ops/s
# Warmup Iteration  14: 987136.107 ops/s
# Warmup Iteration  15: 985228.767 ops/s
# Warmup Iteration  16: 984605.496 ops/s
# Warmup Iteration  17: 1047772.429 ops/s
# Warmup Iteration  18: 1046745.733 ops/s
# Warmup Iteration  19: 1050103.431 ops/s
# Warmup Iteration  20: 1048840.459 ops/s
# Warmup Iteration  21: 1050305.723 ops/s
# Warmup Iteration  22: 1046576.788 ops/s
# Warmup Iteration  23: 1049715.482 ops/s
# Warmup Iteration  24: 1046283.964 ops/s
# Warmup Iteration  25: 1050765.955 ops/s
# Warmup Iteration  26: 1053287.072 ops/s
# Warmup Iteration  27: 1051257.490 ops/s
# Warmup Iteration  28: 1047037.466 ops/s
# Warmup Iteration  29: 1047924.739 ops/s
# Warmup Iteration  30: 1048507.642 ops/s
Iteration   1: 1054193.211 ops/s
Iteration   2: 1042316.467 ops/s
Iteration   3: 1050937.839 ops/s
Iteration   4: 1041227.153 ops/s
Iteration   5: 1046960.995 ops/s
Iteration   6: 1048587.590 ops/s
Iteration   7: 1048164.842 ops/s
Iteration   8: 1054133.057 ops/s
Iteration   9: 1042796.711 ops/s
Iteration  10: 1047971.776 ops/s
Iteration  11: 1047697.776 ops/s
Iteration  12: 1053764.686 ops/s
Iteration  13: 1049877.043 ops/s
Iteration  14: 1042680.340 ops/s
Iteration  15: 1047491.457 ops/s
Iteration  16: 1048726.979 ops/s
Iteration  17: 1052913.783 ops/s
Iteration  18: 1043399.195 ops/s
Iteration  19: 1050868.778 ops/s
Iteration  20: 1047661.998 ops/s
Iteration  21: 1048217.929 ops/s
Iteration  22: 1054415.728 ops/s
Iteration  23: 1051893.233 ops/s
Iteration  24: 1050330.856 ops/s
Iteration  25: 1053998.199 ops/s
Iteration  26: 1047268.236 ops/s
Iteration  27: 1039441.523 ops/s
Iteration  28: 1046464.302 ops/s
Iteration  29: 1049577.137 ops/s
Iteration  30: 1046739.733 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  1048357.285 ±(99.9%) 2732.416 ops/s [Average]
  (min, avg, max) = (1039441.523, 1048357.285, 1054415.728), stdev = 4089.752
  CI (99.9%): [1045624.869, 1051089.701] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  1048357.285 ± 2732.416  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 720983.849 ops/s
# Warmup Iteration   2: 773856.479 ops/s
# Warmup Iteration   3: 1011216.916 ops/s
# Warmup Iteration   4: 1006865.995 ops/s
# Warmup Iteration   5: 1005098.879 ops/s
# Warmup Iteration   6: 1007992.539 ops/s
# Warmup Iteration   7: 1011151.445 ops/s
# Warmup Iteration   8: 1009503.899 ops/s
# Warmup Iteration   9: 1007175.315 ops/s
# Warmup Iteration  10: 1005016.806 ops/s
# Warmup Iteration  11: 848103.965 ops/s
# Warmup Iteration  12: 1014391.931 ops/s
# Warmup Iteration  13: 1008890.510 ops/s
# Warmup Iteration  14: 1011258.039 ops/s
# Warmup Iteration  15: 1011467.468 ops/s
# Warmup Iteration  16: 1011176.204 ops/s
# Warmup Iteration  17: 1071263.847 ops/s
# Warmup Iteration  18: 1071819.849 ops/s
# Warmup Iteration  19: 1071473.326 ops/s
# Warmup Iteration  20: 1069139.940 ops/s
# Warmup Iteration  21: 1071990.695 ops/s
# Warmup Iteration  22: 1072619.657 ops/s
# Warmup Iteration  23: 1074620.159 ops/s
# Warmup Iteration  24: 1075466.065 ops/s
# Warmup Iteration  25: 1068488.433 ops/s
# Warmup Iteration  26: 1075936.068 ops/s
# Warmup Iteration  27: 1072439.860 ops/s
# Warmup Iteration  28: 1074023.766 ops/s
# Warmup Iteration  29: 1071333.650 ops/s
# Warmup Iteration  30: 1074566.790 ops/s
Iteration   1: 1075257.437 ops/s
Iteration   2: 1072223.535 ops/s
Iteration   3: 1071516.079 ops/s
Iteration   4: 1076735.845 ops/s
Iteration   5: 1077467.131 ops/s
Iteration   6: 1079247.176 ops/s
Iteration   7: 1074958.109 ops/s
Iteration   8: 1076217.123 ops/s
Iteration   9: 1080122.122 ops/s
Iteration  10: 1069684.879 ops/s
Iteration  11: 1072315.133 ops/s
Iteration  12: 1074435.464 ops/s
Iteration  13: 1080168.253 ops/s
Iteration  14: 1070767.622 ops/s
Iteration  15: 1074591.278 ops/s
Iteration  16: 1076361.388 ops/s
Iteration  17: 1073511.479 ops/s
Iteration  18: 1080878.558 ops/s
Iteration  19: 1075173.400 ops/s
Iteration  20: 1073606.416 ops/s
Iteration  21: 1071879.975 ops/s
Iteration  22: 1070780.117 ops/s
Iteration  23: 1077665.726 ops/s
Iteration  24: 1075399.912 ops/s
Iteration  25: 1075286.548 ops/s
Iteration  26: 1069000.720 ops/s
Iteration  27: 1071834.538 ops/s
Iteration  28: 1074510.815 ops/s
Iteration  29: 1075836.585 ops/s
Iteration  30: 1073436.336 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  1074695.657 ±(99.9%) 2066.518 ops/s [Average]
  (min, avg, max) = (1069000.720, 1074695.657, 1080878.558), stdev = 3093.067
  CI (99.9%): [1072629.139, 1076762.174] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                       Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  1074695.657 ± 2066.518  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 716796.757 ops/s
# Warmup Iteration   2: 763356.952 ops/s
# Warmup Iteration   3: 1000731.380 ops/s
# Warmup Iteration   4: 1004499.927 ops/s
# Warmup Iteration   5: 999478.008 ops/s
# Warmup Iteration   6: 1005096.071 ops/s
# Warmup Iteration   7: 1001428.767 ops/s
# Warmup Iteration   8: 1001288.501 ops/s
# Warmup Iteration   9: 1000008.519 ops/s
# Warmup Iteration  10: 1005094.844 ops/s
# Warmup Iteration  11: 837857.003 ops/s
# Warmup Iteration  12: 1000245.524 ops/s
# Warmup Iteration  13: 996590.511 ops/s
# Warmup Iteration  14: 999040.059 ops/s
# Warmup Iteration  15: 997527.381 ops/s
# Warmup Iteration  16: 997394.908 ops/s
# Warmup Iteration  17: 1065744.116 ops/s
# Warmup Iteration  18: 1064674.673 ops/s
# Warmup Iteration  19: 1068389.234 ops/s
# Warmup Iteration  20: 1064791.624 ops/s
# Warmup Iteration  21: 1073851.069 ops/s
# Warmup Iteration  22: 1070154.034 ops/s
# Warmup Iteration  23: 1065544.239 ops/s
# Warmup Iteration  24: 1067055.485 ops/s
# Warmup Iteration  25: 1064863.516 ops/s
# Warmup Iteration  26: 1065583.298 ops/s
# Warmup Iteration  27: 1066756.494 ops/s
# Warmup Iteration  28: 1066009.630 ops/s
# Warmup Iteration  29: 1068655.742 ops/s
# Warmup Iteration  30: 1063751.062 ops/s
Iteration   1: 1065610.532 ops/s
Iteration   2: 1062474.622 ops/s
Iteration   3: 1069399.056 ops/s
Iteration   4: 1063691.435 ops/s
Iteration   5: 1066399.153 ops/s
Iteration   6: 1064030.234 ops/s
Iteration   7: 1060945.498 ops/s
Iteration   8: 1067668.906 ops/s
Iteration   9: 1066833.935 ops/s
Iteration  10: 1064619.645 ops/s
Iteration  11: 1065007.521 ops/s
Iteration  12: 1062567.544 ops/s
Iteration  13: 1065886.769 ops/s
Iteration  14: 1069110.300 ops/s
Iteration  15: 1065256.679 ops/s
Iteration  16: 1067941.140 ops/s
Iteration  17: 1068098.552 ops/s
Iteration  18: 1064221.775 ops/s
Iteration  19: 1066322.362 ops/s
Iteration  20: 1067012.498 ops/s
Iteration  21: 1062711.808 ops/s
Iteration  22: 1069277.405 ops/s
Iteration  23: 1071184.149 ops/s
Iteration  24: 1065390.962 ops/s
Iteration  25: 1060832.820 ops/s
Iteration  26: 1068507.852 ops/s
Iteration  27: 1062964.127 ops/s
Iteration  28: 1058314.545 ops/s
Iteration  29: 1071476.967 ops/s
Iteration  30: 1065987.732 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1065658.217 ±(99.9%) 2062.885 ops/s [Average]
  (min, avg, max) = (1058314.545, 1065658.217, 1071476.967), stdev = 3087.629
  CI (99.9%): [1063595.333, 1067721.102] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                       Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1065658.217 ± 2062.885  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 643638.443 ops/s
# Warmup Iteration   2: 1340395.460 ops/s
# Warmup Iteration   3: 1447144.180 ops/s
# Warmup Iteration   4: 1330402.161 ops/s
# Warmup Iteration   5: 1503559.049 ops/s
# Warmup Iteration   6: 1505305.998 ops/s
# Warmup Iteration   7: 1502116.827 ops/s
# Warmup Iteration   8: 1510495.897 ops/s
# Warmup Iteration   9: 1508493.782 ops/s
# Warmup Iteration  10: 1509655.343 ops/s
# Warmup Iteration  11: 1503446.604 ops/s
# Warmup Iteration  12: 1512377.122 ops/s
# Warmup Iteration  13: 1507326.236 ops/s
# Warmup Iteration  14: 1509780.607 ops/s
# Warmup Iteration  15: 1505881.250 ops/s
# Warmup Iteration  16: 1517412.933 ops/s
# Warmup Iteration  17: 1507436.345 ops/s
# Warmup Iteration  18: 1512201.907 ops/s
# Warmup Iteration  19: 1517471.293 ops/s
# Warmup Iteration  20: 1508637.162 ops/s
# Warmup Iteration  21: 1502411.342 ops/s
# Warmup Iteration  22: 1504040.268 ops/s
# Warmup Iteration  23: 1514754.812 ops/s
# Warmup Iteration  24: 1518792.564 ops/s
# Warmup Iteration  25: 1507680.798 ops/s
# Warmup Iteration  26: 1509137.679 ops/s
# Warmup Iteration  27: 1511720.064 ops/s
# Warmup Iteration  28: 1516247.987 ops/s
# Warmup Iteration  29: 1513476.580 ops/s
# Warmup Iteration  30: 1510931.574 ops/s
Iteration   1: 1514096.140 ops/s
Iteration   2: 1499324.926 ops/s
Iteration   3: 1514454.337 ops/s
Iteration   4: 1512901.859 ops/s
Iteration   5: 1514337.445 ops/s
Iteration   6: 1501924.251 ops/s
Iteration   7: 1511272.316 ops/s
Iteration   8: 1502278.490 ops/s
Iteration   9: 1505613.059 ops/s
Iteration  10: 1505919.749 ops/s
Iteration  11: 1503948.749 ops/s
Iteration  12: 1502718.650 ops/s
Iteration  13: 1501306.629 ops/s
Iteration  14: 1506834.183 ops/s
Iteration  15: 1514000.850 ops/s
Iteration  16: 1505704.320 ops/s
Iteration  17: 1508974.698 ops/s
Iteration  18: 1499624.385 ops/s
Iteration  19: 1497491.055 ops/s
Iteration  20: 1493725.966 ops/s
Iteration  21: 1516013.858 ops/s
Iteration  22: 1504822.574 ops/s
Iteration  23: 1508841.388 ops/s
Iteration  24: 1511033.403 ops/s
Iteration  25: 1513282.682 ops/s
Iteration  26: 1509830.317 ops/s
Iteration  27: 1515717.190 ops/s
Iteration  28: 1514449.459 ops/s
Iteration  29: 1516781.604 ops/s
Iteration  30: 1505077.892 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_makeString":
  1507743.414 ±(99.9%) 4163.133 ops/s [Average]
  (min, avg, max) = (1493725.966, 1507743.414, 1516781.604), stdev = 6231.181
  CI (99.9%): [1503580.282, 1511906.547] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_makeString  thrpt   30  1507743.414 ± 4163.133  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 163372781.948 ops/s
# Warmup Iteration   2: 301068328.461 ops/s
# Warmup Iteration   3: 261591198.426 ops/s
# Warmup Iteration   4: 307928268.886 ops/s
# Warmup Iteration   5: 307007641.272 ops/s
# Warmup Iteration   6: 306821175.942 ops/s
# Warmup Iteration   7: 307385196.159 ops/s
# Warmup Iteration   8: 309038290.392 ops/s
# Warmup Iteration   9: 308374257.138 ops/s
# Warmup Iteration  10: 306535793.173 ops/s
# Warmup Iteration  11: 306822862.723 ops/s
# Warmup Iteration  12: 308810636.409 ops/s
# Warmup Iteration  13: 307534049.624 ops/s
# Warmup Iteration  14: 306995866.053 ops/s
# Warmup Iteration  15: 307918962.405 ops/s
# Warmup Iteration  16: 306618636.365 ops/s
# Warmup Iteration  17: 308411936.962 ops/s
# Warmup Iteration  18: 305279634.596 ops/s
# Warmup Iteration  19: 305478002.155 ops/s
# Warmup Iteration  20: 306014380.024 ops/s
# Warmup Iteration  21: 305750124.471 ops/s
# Warmup Iteration  22: 307116941.285 ops/s
# Warmup Iteration  23: 306234870.863 ops/s
# Warmup Iteration  24: 306779195.706 ops/s
# Warmup Iteration  25: 307495065.512 ops/s
# Warmup Iteration  26: 305899542.489 ops/s
# Warmup Iteration  27: 304300112.002 ops/s
# Warmup Iteration  28: 306486069.013 ops/s
# Warmup Iteration  29: 305279601.658 ops/s
# Warmup Iteration  30: 305801186.787 ops/s
Iteration   1: 305310570.393 ops/s
Iteration   2: 306985821.777 ops/s
Iteration   3: 306284148.260 ops/s
Iteration   4: 306334737.236 ops/s
Iteration   5: 306140860.769 ops/s
Iteration   6: 306074452.125 ops/s
Iteration   7: 307257751.284 ops/s
Iteration   8: 306134224.014 ops/s
Iteration   9: 305718904.883 ops/s
Iteration  10: 305815292.860 ops/s
Iteration  11: 305900218.701 ops/s
Iteration  12: 303412180.276 ops/s
Iteration  13: 305348865.664 ops/s
Iteration  14: 306511803.277 ops/s
Iteration  15: 306698689.923 ops/s
Iteration  16: 307965014.184 ops/s
Iteration  17: 305262775.837 ops/s
Iteration  18: 305967355.828 ops/s
Iteration  19: 306524479.339 ops/s
Iteration  20: 307806120.599 ops/s
Iteration  21: 306502303.926 ops/s
Iteration  22: 304203091.630 ops/s
Iteration  23: 304584041.294 ops/s
Iteration  24: 306468565.310 ops/s
Iteration  25: 306093178.164 ops/s
Iteration  26: 306343086.488 ops/s
Iteration  27: 307436607.825 ops/s
Iteration  28: 308024570.082 ops/s
Iteration  29: 305831922.974 ops/s
Iteration  30: 306774288.181 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_newCollection":
  306190530.770 ±(99.9%) 687817.080 ops/s [Average]
  (min, avg, max) = (303412180.276, 306190530.770, 308024570.082), stdev = 1029492.304
  CI (99.9%): [305502713.690, 306878347.850] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt          Score        Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_newCollection  thrpt   30  306190530.770 ± 687817.080  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1204312.313 ops/s
# Warmup Iteration   2: 2829590.598 ops/s
# Warmup Iteration   3: 4359222.107 ops/s
# Warmup Iteration   4: 5197978.990 ops/s
# Warmup Iteration   5: 5193049.987 ops/s
# Warmup Iteration   6: 5196604.495 ops/s
# Warmup Iteration   7: 5194419.058 ops/s
# Warmup Iteration   8: 5195361.209 ops/s
# Warmup Iteration   9: 5167030.159 ops/s
# Warmup Iteration  10: 5209216.676 ops/s
# Warmup Iteration  11: 5221743.560 ops/s
# Warmup Iteration  12: 5196438.149 ops/s
# Warmup Iteration  13: 5188543.920 ops/s
# Warmup Iteration  14: 5197560.025 ops/s
# Warmup Iteration  15: 5161406.933 ops/s
# Warmup Iteration  16: 5192237.420 ops/s
# Warmup Iteration  17: 5180249.095 ops/s
# Warmup Iteration  18: 5173322.198 ops/s
# Warmup Iteration  19: 5160325.171 ops/s
# Warmup Iteration  20: 5174828.871 ops/s
# Warmup Iteration  21: 5201028.805 ops/s
# Warmup Iteration  22: 5197006.118 ops/s
# Warmup Iteration  23: 5173797.813 ops/s
# Warmup Iteration  24: 5177405.935 ops/s
# Warmup Iteration  25: 5171301.187 ops/s
# Warmup Iteration  26: 5171166.532 ops/s
# Warmup Iteration  27: 5183382.059 ops/s
# Warmup Iteration  28: 5194002.356 ops/s
# Warmup Iteration  29: 5185141.059 ops/s
# Warmup Iteration  30: 5176242.174 ops/s
Iteration   1: 5191292.264 ops/s
Iteration   2: 5185103.635 ops/s
Iteration   3: 5201393.734 ops/s
Iteration   4: 5175032.423 ops/s
Iteration   5: 5188076.700 ops/s
Iteration   6: 5195906.050 ops/s
Iteration   7: 5141223.618 ops/s
Iteration   8: 5163934.040 ops/s
Iteration   9: 5177945.986 ops/s
Iteration  10: 5193467.550 ops/s
Iteration  11: 5167835.906 ops/s
Iteration  12: 5203123.686 ops/s
Iteration  13: 5159123.312 ops/s
Iteration  14: 5188305.991 ops/s
Iteration  15: 5212051.793 ops/s
Iteration  16: 5175628.273 ops/s
Iteration  17: 5154688.974 ops/s
Iteration  18: 5155534.617 ops/s
Iteration  19: 5162492.729 ops/s
Iteration  20: 5190045.749 ops/s
Iteration  21: 5131147.861 ops/s
Iteration  22: 5183697.108 ops/s
Iteration  23: 5153315.555 ops/s
Iteration  24: 5117514.939 ops/s
Iteration  25: 5168648.183 ops/s
Iteration  26: 5165653.320 ops/s
Iteration  27: 5194634.126 ops/s
Iteration  28: 5198105.319 ops/s
Iteration  29: 5175938.841 ops/s
Iteration  30: 5187413.544 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith":
  5175275.861 ±(99.9%) 14720.069 ops/s [Average]
  (min, avg, max) = (5117514.939, 5175275.861, 5212051.793), stdev = 22032.308
  CI (99.9%): [5160555.792, 5189995.930] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith  thrpt   30  5175275.861 ± 14720.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 968332.695 ops/s
# Warmup Iteration   2: 2159395.127 ops/s
# Warmup Iteration   3: 2465059.160 ops/s
# Warmup Iteration   4: 2937227.806 ops/s
# Warmup Iteration   5: 2942969.477 ops/s
# Warmup Iteration   6: 2937570.689 ops/s
# Warmup Iteration   7: 2946584.251 ops/s
# Warmup Iteration   8: 2940164.143 ops/s
# Warmup Iteration   9: 2935000.318 ops/s
# Warmup Iteration  10: 2938922.964 ops/s
# Warmup Iteration  11: 2949501.916 ops/s
# Warmup Iteration  12: 2950567.473 ops/s
# Warmup Iteration  13: 2944821.761 ops/s
# Warmup Iteration  14: 2940231.622 ops/s
# Warmup Iteration  15: 2947899.644 ops/s
# Warmup Iteration  16: 2944062.766 ops/s
# Warmup Iteration  17: 2945936.666 ops/s
# Warmup Iteration  18: 2949041.309 ops/s
# Warmup Iteration  19: 2944834.370 ops/s
# Warmup Iteration  20: 2938572.711 ops/s
# Warmup Iteration  21: 2941611.719 ops/s
# Warmup Iteration  22: 2948161.969 ops/s
# Warmup Iteration  23: 2940692.706 ops/s
# Warmup Iteration  24: 2941584.916 ops/s
# Warmup Iteration  25: 2928429.390 ops/s
# Warmup Iteration  26: 2931635.070 ops/s
# Warmup Iteration  27: 2937783.427 ops/s
# Warmup Iteration  28: 2945359.587 ops/s
# Warmup Iteration  29: 2940953.082 ops/s
# Warmup Iteration  30: 2936899.090 ops/s
Iteration   1: 2953816.090 ops/s
Iteration   2: 2951174.900 ops/s
Iteration   3: 2950251.649 ops/s
Iteration   4: 2934692.028 ops/s
Iteration   5: 2951752.268 ops/s
Iteration   6: 2942442.788 ops/s
Iteration   7: 2950680.511 ops/s
Iteration   8: 2947881.760 ops/s
Iteration   9: 2952180.984 ops/s
Iteration  10: 2939205.429 ops/s
Iteration  11: 2935734.523 ops/s
Iteration  12: 2932160.927 ops/s
Iteration  13: 2942689.634 ops/s
Iteration  14: 2937856.986 ops/s
Iteration  15: 2952448.110 ops/s
Iteration  16: 2941032.033 ops/s
Iteration  17: 2936343.587 ops/s
Iteration  18: 2940453.396 ops/s
Iteration  19: 2933238.307 ops/s
Iteration  20: 2941022.863 ops/s
Iteration  21: 2938141.394 ops/s
Iteration  22: 2943485.718 ops/s
Iteration  23: 2939231.847 ops/s
Iteration  24: 2939752.596 ops/s
Iteration  25: 2946763.669 ops/s
Iteration  26: 2952556.514 ops/s
Iteration  27: 2941190.855 ops/s
Iteration  28: 2953475.396 ops/s
Iteration  29: 2955146.084 ops/s
Iteration  30: 2944477.137 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy":
  2944042.666 ±(99.9%) 4622.136 ops/s [Average]
  (min, avg, max) = (2932160.927, 2944042.666, 2955146.084), stdev = 6918.196
  CI (99.9%): [2939420.530, 2948664.802] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy  thrpt   30  2944042.666 ± 4622.136  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2102196.376 ops/s
# Warmup Iteration   2: 4558655.127 ops/s
# Warmup Iteration   3: 5979067.074 ops/s
# Warmup Iteration   4: 7068640.822 ops/s
# Warmup Iteration   5: 7058930.163 ops/s
# Warmup Iteration   6: 7084698.380 ops/s
# Warmup Iteration   7: 7058989.969 ops/s
# Warmup Iteration   8: 7076348.229 ops/s
# Warmup Iteration   9: 7110587.310 ops/s
# Warmup Iteration  10: 7074372.445 ops/s
# Warmup Iteration  11: 7041289.529 ops/s
# Warmup Iteration  12: 7089221.212 ops/s
# Warmup Iteration  13: 7083020.555 ops/s
# Warmup Iteration  14: 7078288.763 ops/s
# Warmup Iteration  15: 7088009.860 ops/s
# Warmup Iteration  16: 7077906.110 ops/s
# Warmup Iteration  17: 7079674.238 ops/s
# Warmup Iteration  18: 7044464.694 ops/s
# Warmup Iteration  19: 7071315.197 ops/s
# Warmup Iteration  20: 7071808.665 ops/s
# Warmup Iteration  21: 7046438.084 ops/s
# Warmup Iteration  22: 7071457.197 ops/s
# Warmup Iteration  23: 7063800.162 ops/s
# Warmup Iteration  24: 7071697.840 ops/s
# Warmup Iteration  25: 7063158.743 ops/s
# Warmup Iteration  26: 7075218.505 ops/s
# Warmup Iteration  27: 7027586.445 ops/s
# Warmup Iteration  28: 7055952.048 ops/s
# Warmup Iteration  29: 7026532.526 ops/s
# Warmup Iteration  30: 7042190.932 ops/s
Iteration   1: 7101059.427 ops/s
Iteration   2: 7055913.682 ops/s
Iteration   3: 7018776.295 ops/s
Iteration   4: 7056715.900 ops/s
Iteration   5: 7001355.464 ops/s
Iteration   6: 7034374.711 ops/s
Iteration   7: 7069579.770 ops/s
Iteration   8: 7093043.826 ops/s
Iteration   9: 7069263.544 ops/s
Iteration  10: 7038865.826 ops/s
Iteration  11: 7063694.900 ops/s
Iteration  12: 7068210.046 ops/s
Iteration  13: 7069320.765 ops/s
Iteration  14: 7043461.862 ops/s
Iteration  15: 7064294.984 ops/s
Iteration  16: 7019177.299 ops/s
Iteration  17: 7068895.316 ops/s
Iteration  18: 7088972.012 ops/s
Iteration  19: 7049993.852 ops/s
Iteration  20: 7062763.279 ops/s
Iteration  21: 7028128.438 ops/s
Iteration  22: 7037889.587 ops/s
Iteration  23: 7082782.461 ops/s
Iteration  24: 7054649.094 ops/s
Iteration  25: 7090061.114 ops/s
Iteration  26: 7095479.868 ops/s
Iteration  27: 7092763.020 ops/s
Iteration  28: 7067904.838 ops/s
Iteration  29: 7018377.640 ops/s
Iteration  30: 7048197.270 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_notEmpty":
  7058465.536 ±(99.9%) 17337.760 ops/s [Average]
  (min, avg, max) = (7001355.464, 7058465.536, 7101059.427), stdev = 25950.345
  CI (99.9%): [7041127.776, 7075803.296] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_notEmpty  thrpt   30  7058465.536 ± 17337.760  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1353343.137 ops/s
# Warmup Iteration   2: 2926118.200 ops/s
# Warmup Iteration   3: 2936393.763 ops/s
# Warmup Iteration   4: 3513882.757 ops/s
# Warmup Iteration   5: 3519468.913 ops/s
# Warmup Iteration   6: 3532331.413 ops/s
# Warmup Iteration   7: 3532680.072 ops/s
# Warmup Iteration   8: 3526852.019 ops/s
# Warmup Iteration   9: 3530342.024 ops/s
# Warmup Iteration  10: 3515317.502 ops/s
# Warmup Iteration  11: 3520652.128 ops/s
# Warmup Iteration  12: 3528276.932 ops/s
# Warmup Iteration  13: 3524414.660 ops/s
# Warmup Iteration  14: 3528979.657 ops/s
# Warmup Iteration  15: 3525779.656 ops/s
# Warmup Iteration  16: 3513920.545 ops/s
# Warmup Iteration  17: 3521858.323 ops/s
# Warmup Iteration  18: 3532965.049 ops/s
# Warmup Iteration  19: 3520326.001 ops/s
# Warmup Iteration  20: 3529214.746 ops/s
# Warmup Iteration  21: 3533312.798 ops/s
# Warmup Iteration  22: 3520120.035 ops/s
# Warmup Iteration  23: 3516784.020 ops/s
# Warmup Iteration  24: 3526918.974 ops/s
# Warmup Iteration  25: 3522696.005 ops/s
# Warmup Iteration  26: 3512760.447 ops/s
# Warmup Iteration  27: 3520427.365 ops/s
# Warmup Iteration  28: 3530386.330 ops/s
# Warmup Iteration  29: 3515285.509 ops/s
# Warmup Iteration  30: 3524441.618 ops/s
Iteration   1: 3506582.987 ops/s
Iteration   2: 3514709.096 ops/s
Iteration   3: 3503350.151 ops/s
Iteration   4: 3515997.175 ops/s
Iteration   5: 3519244.837 ops/s
Iteration   6: 3497080.455 ops/s
Iteration   7: 3508251.841 ops/s
Iteration   8: 3520574.250 ops/s
Iteration   9: 3504971.011 ops/s
Iteration  10: 3531950.725 ops/s
Iteration  11: 3519617.243 ops/s
Iteration  12: 3529325.300 ops/s
Iteration  13: 3507877.390 ops/s
Iteration  14: 3510736.549 ops/s
Iteration  15: 3519748.931 ops/s
Iteration  16: 3513588.525 ops/s
Iteration  17: 3539697.964 ops/s
Iteration  18: 3521472.126 ops/s
Iteration  19: 3523102.867 ops/s
Iteration  20: 3539331.936 ops/s
Iteration  21: 3535744.065 ops/s
Iteration  22: 3525185.611 ops/s
Iteration  23: 3515836.386 ops/s
Iteration  24: 3541078.631 ops/s
Iteration  25: 3519949.963 ops/s
Iteration  26: 3522757.934 ops/s
Iteration  27: 3513172.177 ops/s
Iteration  28: 3534295.527 ops/s
Iteration  29: 3533725.473 ops/s
Iteration  30: 3521773.115 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_reduce":
  3520357.675 ±(99.9%) 7699.494 ops/s [Average]
  (min, avg, max) = (3497080.455, 3520357.675, 3541078.631), stdev = 11524.241
  CI (99.9%): [3512658.181, 3528057.169] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_reduce  thrpt   30  3520357.675 ± 7699.494  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 933242.609 ops/s
# Warmup Iteration   2: 2086818.718 ops/s
# Warmup Iteration   3: 2238754.382 ops/s
# Warmup Iteration   4: 2675438.088 ops/s
# Warmup Iteration   5: 2688217.912 ops/s
# Warmup Iteration   6: 2686151.727 ops/s
# Warmup Iteration   7: 2672570.609 ops/s
# Warmup Iteration   8: 2674220.021 ops/s
# Warmup Iteration   9: 2675078.084 ops/s
# Warmup Iteration  10: 2672059.312 ops/s
# Warmup Iteration  11: 2676746.366 ops/s
# Warmup Iteration  12: 2683432.327 ops/s
# Warmup Iteration  13: 2677474.626 ops/s
# Warmup Iteration  14: 2680050.744 ops/s
# Warmup Iteration  15: 2681122.548 ops/s
# Warmup Iteration  16: 2683195.507 ops/s
# Warmup Iteration  17: 2671518.804 ops/s
# Warmup Iteration  18: 2675421.624 ops/s
# Warmup Iteration  19: 2684905.553 ops/s
# Warmup Iteration  20: 2680361.671 ops/s
# Warmup Iteration  21: 2676470.052 ops/s
# Warmup Iteration  22: 2678866.753 ops/s
# Warmup Iteration  23: 2684272.938 ops/s
# Warmup Iteration  24: 2681098.616 ops/s
# Warmup Iteration  25: 2677245.619 ops/s
# Warmup Iteration  26: 2671525.309 ops/s
# Warmup Iteration  27: 2674235.798 ops/s
# Warmup Iteration  28: 2679420.381 ops/s
# Warmup Iteration  29: 2682791.142 ops/s
# Warmup Iteration  30: 2679558.244 ops/s
Iteration   1: 2667914.993 ops/s
Iteration   2: 2669251.198 ops/s
Iteration   3: 2680618.068 ops/s
Iteration   4: 2696103.992 ops/s
Iteration   5: 2675546.387 ops/s
Iteration   6: 2684541.456 ops/s
Iteration   7: 2699558.579 ops/s
Iteration   8: 2672616.123 ops/s
Iteration   9: 2672726.288 ops/s
Iteration  10: 2663678.237 ops/s
Iteration  11: 2669772.634 ops/s
Iteration  12: 2677795.065 ops/s
Iteration  13: 2684293.464 ops/s
Iteration  14: 2690182.510 ops/s
Iteration  15: 2679296.669 ops/s
Iteration  16: 2679434.602 ops/s
Iteration  17: 2682927.988 ops/s
Iteration  18: 2685142.126 ops/s
Iteration  19: 2679181.789 ops/s
Iteration  20: 2663327.206 ops/s
Iteration  21: 2667311.811 ops/s
Iteration  22: 2669172.096 ops/s
Iteration  23: 2683199.082 ops/s
Iteration  24: 2678768.795 ops/s
Iteration  25: 2670393.119 ops/s
Iteration  26: 2687230.546 ops/s
Iteration  27: 2680617.056 ops/s
Iteration  28: 2685197.103 ops/s
Iteration  29: 2676719.148 ops/s
Iteration  30: 2672967.362 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty":
  2678182.850 ±(99.9%) 5933.517 ops/s [Average]
  (min, avg, max) = (2663327.206, 2678182.850, 2699558.579), stdev = 8881.009
  CI (99.9%): [2672249.333, 2684116.366] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  2678182.850 ± 5933.517  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 712826.212 ops/s
# Warmup Iteration   2: 743873.762 ops/s
# Warmup Iteration   3: 990728.930 ops/s
# Warmup Iteration   4: 988990.657 ops/s
# Warmup Iteration   5: 994697.971 ops/s
# Warmup Iteration   6: 991185.254 ops/s
# Warmup Iteration   7: 993452.279 ops/s
# Warmup Iteration   8: 995686.525 ops/s
# Warmup Iteration   9: 992557.425 ops/s
# Warmup Iteration  10: 995537.233 ops/s
# Warmup Iteration  11: 886211.816 ops/s
# Warmup Iteration  12: 933973.413 ops/s
# Warmup Iteration  13: 995466.036 ops/s
# Warmup Iteration  14: 991389.955 ops/s
# Warmup Iteration  15: 995530.386 ops/s
# Warmup Iteration  16: 990292.911 ops/s
# Warmup Iteration  17: 1072442.933 ops/s
# Warmup Iteration  18: 1072204.526 ops/s
# Warmup Iteration  19: 1072407.403 ops/s
# Warmup Iteration  20: 1072568.410 ops/s
# Warmup Iteration  21: 1067299.200 ops/s
# Warmup Iteration  22: 1076602.330 ops/s
# Warmup Iteration  23: 1071493.514 ops/s
# Warmup Iteration  24: 1072595.685 ops/s
# Warmup Iteration  25: 1069573.274 ops/s
# Warmup Iteration  26: 1063882.177 ops/s
# Warmup Iteration  27: 1074119.403 ops/s
# Warmup Iteration  28: 1070821.293 ops/s
# Warmup Iteration  29: 1070899.101 ops/s
# Warmup Iteration  30: 1066302.418 ops/s
Iteration   1: 1071005.965 ops/s
Iteration   2: 1066704.728 ops/s
Iteration   3: 1066172.480 ops/s
Iteration   4: 1067248.384 ops/s
Iteration   5: 1067895.595 ops/s
Iteration   6: 1070792.403 ops/s
Iteration   7: 1067289.945 ops/s
Iteration   8: 1073396.753 ops/s
Iteration   9: 1071422.146 ops/s
Iteration  10: 1067412.976 ops/s
Iteration  11: 1066716.903 ops/s
Iteration  12: 1071413.879 ops/s
Iteration  13: 1074406.754 ops/s
Iteration  14: 1071344.665 ops/s
Iteration  15: 1066275.672 ops/s
Iteration  16: 1077773.538 ops/s
Iteration  17: 1068414.066 ops/s
Iteration  18: 1072958.264 ops/s
Iteration  19: 1070225.668 ops/s
Iteration  20: 1069352.784 ops/s
Iteration  21: 1065193.762 ops/s
Iteration  22: 1075027.459 ops/s
Iteration  23: 1068630.146 ops/s
Iteration  24: 1068982.814 ops/s
Iteration  25: 1068207.975 ops/s
Iteration  26: 1066399.512 ops/s
Iteration  27: 1074946.987 ops/s
Iteration  28: 1068524.709 ops/s
Iteration  29: 1068448.983 ops/s
Iteration  30: 1071669.086 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1069808.500 ±(99.9%) 2094.422 ops/s [Average]
  (min, avg, max) = (1065193.762, 1069808.500, 1077773.538), stdev = 3134.832
  CI (99.9%): [1067714.078, 1071902.922] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1069808.500 ± 2094.422  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4082070.676 ops/s
# Warmup Iteration   2: 8678817.285 ops/s
# Warmup Iteration   3: 9052627.598 ops/s
# Warmup Iteration   4: 10702505.282 ops/s
# Warmup Iteration   5: 10619377.818 ops/s
# Warmup Iteration   6: 10777625.637 ops/s
# Warmup Iteration   7: 10791991.534 ops/s
# Warmup Iteration   8: 10755886.009 ops/s
# Warmup Iteration   9: 10715686.631 ops/s
# Warmup Iteration  10: 10757606.502 ops/s
# Warmup Iteration  11: 10695776.226 ops/s
# Warmup Iteration  12: 10748616.202 ops/s
# Warmup Iteration  13: 10761133.904 ops/s
# Warmup Iteration  14: 10720967.368 ops/s
# Warmup Iteration  15: 10744190.273 ops/s
# Warmup Iteration  16: 10636517.012 ops/s
# Warmup Iteration  17: 10717018.525 ops/s
# Warmup Iteration  18: 10722018.749 ops/s
# Warmup Iteration  19: 10677731.466 ops/s
# Warmup Iteration  20: 10714318.999 ops/s
# Warmup Iteration  21: 10751035.173 ops/s
# Warmup Iteration  22: 10690965.839 ops/s
# Warmup Iteration  23: 10710628.352 ops/s
# Warmup Iteration  24: 10731940.837 ops/s
# Warmup Iteration  25: 10687603.227 ops/s
# Warmup Iteration  26: 10677519.580 ops/s
# Warmup Iteration  27: 10759027.211 ops/s
# Warmup Iteration  28: 10691346.793 ops/s
# Warmup Iteration  29: 10669439.168 ops/s
# Warmup Iteration  30: 10733964.041 ops/s
Iteration   1: 10652894.323 ops/s
Iteration   2: 10699834.534 ops/s
Iteration   3: 10686135.743 ops/s
Iteration   4: 10708015.332 ops/s
Iteration   5: 10677917.258 ops/s
Iteration   6: 10656408.773 ops/s
Iteration   7: 10691723.868 ops/s
Iteration   8: 10677076.054 ops/s
Iteration   9: 10755253.141 ops/s
Iteration  10: 10727230.768 ops/s
Iteration  11: 10645315.277 ops/s
Iteration  12: 10650599.161 ops/s
Iteration  13: 10656052.603 ops/s
Iteration  14: 10712682.118 ops/s
Iteration  15: 10715428.952 ops/s
Iteration  16: 10721792.793 ops/s
Iteration  17: 10606327.285 ops/s
Iteration  18: 10597479.980 ops/s
Iteration  19: 10677945.957 ops/s
Iteration  20: 10691065.423 ops/s
Iteration  21: 10682555.475 ops/s
Iteration  22: 10669595.935 ops/s
Iteration  23: 10664222.348 ops/s
Iteration  24: 10691790.138 ops/s
Iteration  25: 10675316.482 ops/s
Iteration  26: 10632885.662 ops/s
Iteration  27: 10755624.871 ops/s
Iteration  28: 10699314.570 ops/s
Iteration  29: 10710614.064 ops/s
Iteration  30: 10719411.039 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_reject":
  10683616.998 ±(99.9%) 24986.370 ops/s [Average]
  (min, avg, max) = (10597479.980, 10683616.998, 10755624.871), stdev = 37398.426
  CI (99.9%): [10658630.627, 10708603.368] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_reject  thrpt   30  10683616.998 ± 24986.370  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8537194.299 ops/s
# Warmup Iteration   2: 18617631.059 ops/s
# Warmup Iteration   3: 17986991.758 ops/s
# Warmup Iteration   4: 17490712.668 ops/s
# Warmup Iteration   5: 19464820.946 ops/s
# Warmup Iteration   6: 19512270.732 ops/s
# Warmup Iteration   7: 19422687.465 ops/s
# Warmup Iteration   8: 19452857.832 ops/s
# Warmup Iteration   9: 19421849.481 ops/s
# Warmup Iteration  10: 19439432.731 ops/s
# Warmup Iteration  11: 19474946.943 ops/s
# Warmup Iteration  12: 19417461.045 ops/s
# Warmup Iteration  13: 19457323.780 ops/s
# Warmup Iteration  14: 19377971.477 ops/s
# Warmup Iteration  15: 19327747.935 ops/s
# Warmup Iteration  16: 19385134.391 ops/s
# Warmup Iteration  17: 19416971.097 ops/s
# Warmup Iteration  18: 19303617.289 ops/s
# Warmup Iteration  19: 19417644.051 ops/s
# Warmup Iteration  20: 19382636.749 ops/s
# Warmup Iteration  21: 19407550.391 ops/s
# Warmup Iteration  22: 19446252.191 ops/s
# Warmup Iteration  23: 19428343.057 ops/s
# Warmup Iteration  24: 19287487.798 ops/s
# Warmup Iteration  25: 19476509.268 ops/s
# Warmup Iteration  26: 19499670.906 ops/s
# Warmup Iteration  27: 19463106.000 ops/s
# Warmup Iteration  28: 19420075.414 ops/s
# Warmup Iteration  29: 19475499.667 ops/s
# Warmup Iteration  30: 19430784.484 ops/s
Iteration   1: 19540204.449 ops/s
Iteration   2: 19502353.983 ops/s
Iteration   3: 19511973.676 ops/s
Iteration   4: 19592536.295 ops/s
Iteration   5: 19424628.323 ops/s
Iteration   6: 19611948.490 ops/s
Iteration   7: 19534483.213 ops/s
Iteration   8: 19448224.673 ops/s
Iteration   9: 19528080.615 ops/s
Iteration  10: 19547174.557 ops/s
Iteration  11: 19520034.604 ops/s
Iteration  12: 19495835.979 ops/s
Iteration  13: 19583728.880 ops/s
Iteration  14: 19233263.441 ops/s
Iteration  15: 19299945.692 ops/s
Iteration  16: 19487245.420 ops/s
Iteration  17: 19408585.892 ops/s
Iteration  18: 19458917.549 ops/s
Iteration  19: 19302585.972 ops/s
Iteration  20: 19458169.135 ops/s
Iteration  21: 19401425.981 ops/s
Iteration  22: 19497610.915 ops/s
Iteration  23: 19495445.560 ops/s
Iteration  24: 19470765.714 ops/s
Iteration  25: 19524301.052 ops/s
Iteration  26: 19434497.214 ops/s
Iteration  27: 19404804.793 ops/s
Iteration  28: 19436680.050 ops/s
Iteration  29: 19469871.244 ops/s
Iteration  30: 19514174.506 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_remove":
  19471316.596 ±(99.9%) 56844.590 ops/s [Average]
  (min, avg, max) = (19233263.441, 19471316.596, 19611948.490), stdev = 85082.312
  CI (99.9%): [19414472.006, 19528161.185] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_remove  thrpt   30  19471316.596 ± 56844.590  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2365336.299 ops/s
# Warmup Iteration   2: 5295303.711 ops/s
# Warmup Iteration   3: 4430557.806 ops/s
# Warmup Iteration   4: 5318225.065 ops/s
# Warmup Iteration   5: 5291977.503 ops/s
# Warmup Iteration   6: 5307842.529 ops/s
# Warmup Iteration   7: 5303408.940 ops/s
# Warmup Iteration   8: 5314943.382 ops/s
# Warmup Iteration   9: 5316594.386 ops/s
# Warmup Iteration  10: 5309516.917 ops/s
# Warmup Iteration  11: 5259892.652 ops/s
# Warmup Iteration  12: 5295631.423 ops/s
# Warmup Iteration  13: 5314097.444 ops/s
# Warmup Iteration  14: 5301529.070 ops/s
# Warmup Iteration  15: 5308328.439 ops/s
# Warmup Iteration  16: 5292519.126 ops/s
# Warmup Iteration  17: 5302979.636 ops/s
# Warmup Iteration  18: 5304568.639 ops/s
# Warmup Iteration  19: 5308356.135 ops/s
# Warmup Iteration  20: 5296039.616 ops/s
# Warmup Iteration  21: 5305374.433 ops/s
# Warmup Iteration  22: 5303124.942 ops/s
# Warmup Iteration  23: 5279726.824 ops/s
# Warmup Iteration  24: 5302806.483 ops/s
# Warmup Iteration  25: 5280500.726 ops/s
# Warmup Iteration  26: 5295061.506 ops/s
# Warmup Iteration  27: 5292443.106 ops/s
# Warmup Iteration  28: 5272160.441 ops/s
# Warmup Iteration  29: 5278982.668 ops/s
# Warmup Iteration  30: 5299344.479 ops/s
Iteration   1: 5304964.919 ops/s
Iteration   2: 5345108.548 ops/s
Iteration   3: 5308851.813 ops/s
Iteration   4: 5316859.015 ops/s
Iteration   5: 5311210.672 ops/s
Iteration   6: 5330278.159 ops/s
Iteration   7: 5331268.426 ops/s
Iteration   8: 5332954.882 ops/s
Iteration   9: 5334269.041 ops/s
Iteration  10: 5359625.001 ops/s
Iteration  11: 5300832.957 ops/s
Iteration  12: 5316153.547 ops/s
Iteration  13: 5297597.093 ops/s
Iteration  14: 5329746.681 ops/s
Iteration  15: 5293911.939 ops/s
Iteration  16: 5320084.751 ops/s
Iteration  17: 5301072.887 ops/s
Iteration  18: 5318680.646 ops/s
Iteration  19: 5288961.108 ops/s
Iteration  20: 5250380.561 ops/s
Iteration  21: 5317107.927 ops/s
Iteration  22: 5299591.729 ops/s
Iteration  23: 5265329.637 ops/s
Iteration  24: 5340060.491 ops/s
Iteration  25: 5277837.540 ops/s
Iteration  26: 5292415.190 ops/s
Iteration  27: 5323522.229 ops/s
Iteration  28: 5285872.583 ops/s
Iteration  29: 5259295.444 ops/s
Iteration  30: 5286759.510 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_removeAll":
  5308020.164 ±(99.9%) 17140.929 ops/s [Average]
  (min, avg, max) = (5250380.561, 5308020.164, 5359625.001), stdev = 25655.737
  CI (99.9%): [5290879.235, 5325161.093] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_removeAll  thrpt   30  5308020.164 ± 17140.929  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1715654.718 ops/s
# Warmup Iteration   2: 3929552.510 ops/s
# Warmup Iteration   3: 3288709.558 ops/s
# Warmup Iteration   4: 3931445.694 ops/s
# Warmup Iteration   5: 3932347.612 ops/s
# Warmup Iteration   6: 3949650.465 ops/s
# Warmup Iteration   7: 3935945.314 ops/s
# Warmup Iteration   8: 3930952.343 ops/s
# Warmup Iteration   9: 3919027.382 ops/s
# Warmup Iteration  10: 3940841.899 ops/s
# Warmup Iteration  11: 3925685.931 ops/s
# Warmup Iteration  12: 3939890.007 ops/s
# Warmup Iteration  13: 3934338.638 ops/s
# Warmup Iteration  14: 3916735.663 ops/s
# Warmup Iteration  15: 3924280.605 ops/s
# Warmup Iteration  16: 3932487.256 ops/s
# Warmup Iteration  17: 3918268.484 ops/s
# Warmup Iteration  18: 3922132.304 ops/s
# Warmup Iteration  19: 3943513.691 ops/s
# Warmup Iteration  20: 3938460.747 ops/s
# Warmup Iteration  21: 3943537.528 ops/s
# Warmup Iteration  22: 3931959.897 ops/s
# Warmup Iteration  23: 3927605.017 ops/s
# Warmup Iteration  24: 3935678.860 ops/s
# Warmup Iteration  25: 3924870.252 ops/s
# Warmup Iteration  26: 3938811.664 ops/s
# Warmup Iteration  27: 3924610.551 ops/s
# Warmup Iteration  28: 3939865.758 ops/s
# Warmup Iteration  29: 3921601.469 ops/s
# Warmup Iteration  30: 3925138.230 ops/s
Iteration   1: 3917781.540 ops/s
Iteration   2: 3957326.738 ops/s
Iteration   3: 3944198.527 ops/s
Iteration   4: 3933934.847 ops/s
Iteration   5: 3919644.719 ops/s
Iteration   6: 3930412.150 ops/s
Iteration   7: 3935629.061 ops/s
Iteration   8: 3929460.159 ops/s
Iteration   9: 3933284.918 ops/s
Iteration  10: 3938205.359 ops/s
Iteration  11: 3925879.624 ops/s
Iteration  12: 3937656.156 ops/s
Iteration  13: 3942241.408 ops/s
Iteration  14: 3942394.192 ops/s
Iteration  15: 3925689.047 ops/s
Iteration  16: 3903009.196 ops/s
Iteration  17: 3918435.123 ops/s
Iteration  18: 3932887.082 ops/s
Iteration  19: 3927172.122 ops/s
Iteration  20: 3929367.284 ops/s
Iteration  21: 3905391.981 ops/s
Iteration  22: 3908385.544 ops/s
Iteration  23: 3908306.162 ops/s
Iteration  24: 3917841.155 ops/s
Iteration  25: 3944653.213 ops/s
Iteration  26: 3961734.950 ops/s
Iteration  27: 3938992.675 ops/s
Iteration  28: 3891448.702 ops/s
Iteration  29: 3922540.029 ops/s
Iteration  30: 3940816.754 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable":
  3928824.014 ±(99.9%) 10540.825 ops/s [Average]
  (min, avg, max) = (3891448.702, 3928824.014, 3961734.950), stdev = 15777.011
  CI (99.9%): [3918283.189, 3939364.838] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  3928824.014 ± 10540.825  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1103723.182 ops/s
# Warmup Iteration   2: 2561196.153 ops/s
# Warmup Iteration   3: 2226629.714 ops/s
# Warmup Iteration   4: 2691065.668 ops/s
# Warmup Iteration   5: 2686888.471 ops/s
# Warmup Iteration   6: 2682047.493 ops/s
# Warmup Iteration   7: 2687769.836 ops/s
# Warmup Iteration   8: 2685292.280 ops/s
# Warmup Iteration   9: 2687757.844 ops/s
# Warmup Iteration  10: 2679101.925 ops/s
# Warmup Iteration  11: 2677466.819 ops/s
# Warmup Iteration  12: 2692613.896 ops/s
# Warmup Iteration  13: 2687124.547 ops/s
# Warmup Iteration  14: 2690236.409 ops/s
# Warmup Iteration  15: 2685211.928 ops/s
# Warmup Iteration  16: 2697983.498 ops/s
# Warmup Iteration  17: 2687557.446 ops/s
# Warmup Iteration  18: 2685754.273 ops/s
# Warmup Iteration  19: 2684611.473 ops/s
# Warmup Iteration  20: 2691171.051 ops/s
# Warmup Iteration  21: 2686880.216 ops/s
# Warmup Iteration  22: 2673487.133 ops/s
# Warmup Iteration  23: 2686731.894 ops/s
# Warmup Iteration  24: 2675925.912 ops/s
# Warmup Iteration  25: 2683907.725 ops/s
# Warmup Iteration  26: 2685739.622 ops/s
# Warmup Iteration  27: 2696090.429 ops/s
# Warmup Iteration  28: 2690697.913 ops/s
# Warmup Iteration  29: 2684242.356 ops/s
# Warmup Iteration  30: 2684198.078 ops/s
Iteration   1: 2672778.919 ops/s
Iteration   2: 2683640.888 ops/s
Iteration   3: 2666711.023 ops/s
Iteration   4: 2688499.017 ops/s
Iteration   5: 2695123.097 ops/s
Iteration   6: 2689243.434 ops/s
Iteration   7: 2679350.130 ops/s
Iteration   8: 2691001.570 ops/s
Iteration   9: 2681658.414 ops/s
Iteration  10: 2691941.911 ops/s
Iteration  11: 2696708.162 ops/s
Iteration  12: 2689740.257 ops/s
Iteration  13: 2699881.913 ops/s
Iteration  14: 2687796.580 ops/s
Iteration  15: 2669776.508 ops/s
Iteration  16: 2687053.018 ops/s
Iteration  17: 2682470.402 ops/s
Iteration  18: 2685438.904 ops/s
Iteration  19: 2689881.738 ops/s
Iteration  20: 2699980.295 ops/s
Iteration  21: 2689141.775 ops/s
Iteration  22: 2667803.164 ops/s
Iteration  23: 2697558.095 ops/s
Iteration  24: 2692491.391 ops/s
Iteration  25: 2694890.807 ops/s
Iteration  26: 2691952.180 ops/s
Iteration  27: 2672721.010 ops/s
Iteration  28: 2690234.389 ops/s
Iteration  29: 2687451.626 ops/s
Iteration  30: 2674875.150 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_retainAll":
  2686259.859 ±(99.9%) 6249.387 ops/s [Average]
  (min, avg, max) = (2666711.023, 2686259.859, 2699980.295), stdev = 9353.790
  CI (99.9%): [2680010.471, 2692509.246] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_retainAll  thrpt   30  2686259.859 ± 6249.387  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 660998.523 ops/s
# Warmup Iteration   2: 1635108.426 ops/s
# Warmup Iteration   3: 1634941.117 ops/s
# Warmup Iteration   4: 1361769.320 ops/s
# Warmup Iteration   5: 1645227.212 ops/s
# Warmup Iteration   6: 1641911.040 ops/s
# Warmup Iteration   7: 1642799.028 ops/s
# Warmup Iteration   8: 1644348.590 ops/s
# Warmup Iteration   9: 1641749.276 ops/s
# Warmup Iteration  10: 1644499.466 ops/s
# Warmup Iteration  11: 1633076.290 ops/s
# Warmup Iteration  12: 1635378.416 ops/s
# Warmup Iteration  13: 1641142.182 ops/s
# Warmup Iteration  14: 1645600.296 ops/s
# Warmup Iteration  15: 1639326.529 ops/s
# Warmup Iteration  16: 1645567.983 ops/s
# Warmup Iteration  17: 1641667.840 ops/s
# Warmup Iteration  18: 1644372.393 ops/s
# Warmup Iteration  19: 1643238.922 ops/s
# Warmup Iteration  20: 1637585.250 ops/s
# Warmup Iteration  21: 1643263.299 ops/s
# Warmup Iteration  22: 1646797.052 ops/s
# Warmup Iteration  23: 1645009.802 ops/s
# Warmup Iteration  24: 1644372.307 ops/s
# Warmup Iteration  25: 1644859.953 ops/s
# Warmup Iteration  26: 1645446.983 ops/s
# Warmup Iteration  27: 1646868.967 ops/s
# Warmup Iteration  28: 1647204.845 ops/s
# Warmup Iteration  29: 1647590.110 ops/s
# Warmup Iteration  30: 1644058.178 ops/s
Iteration   1: 1642945.262 ops/s
Iteration   2: 1646530.445 ops/s
Iteration   3: 1642109.720 ops/s
Iteration   4: 1640566.124 ops/s
Iteration   5: 1647732.690 ops/s
Iteration   6: 1648084.034 ops/s
Iteration   7: 1646463.448 ops/s
Iteration   8: 1644621.283 ops/s
Iteration   9: 1641270.787 ops/s
Iteration  10: 1641093.376 ops/s
Iteration  11: 1637770.308 ops/s
Iteration  12: 1649406.648 ops/s
Iteration  13: 1649473.646 ops/s
Iteration  14: 1650389.866 ops/s
Iteration  15: 1640561.192 ops/s
Iteration  16: 1644738.207 ops/s
Iteration  17: 1646744.666 ops/s
Iteration  18: 1645249.472 ops/s
Iteration  19: 1645722.451 ops/s
Iteration  20: 1647864.427 ops/s
Iteration  21: 1649547.723 ops/s
Iteration  22: 1659969.830 ops/s
Iteration  23: 1645545.761 ops/s
Iteration  24: 1640665.804 ops/s
Iteration  25: 1654517.376 ops/s
Iteration  26: 1641803.952 ops/s
Iteration  27: 1643079.500 ops/s
Iteration  28: 1648455.681 ops/s
Iteration  29: 1646615.104 ops/s
Iteration  30: 1648367.116 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable":
  1645930.197 ±(99.9%) 3048.174 ops/s [Average]
  (min, avg, max) = (1637770.308, 1645930.197, 1659969.830), stdev = 4562.363
  CI (99.9%): [1642882.023, 1648978.370] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  1645930.197 ± 3048.174  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3462236.759 ops/s
# Warmup Iteration   2: 8566472.401 ops/s
# Warmup Iteration   3: 9100639.142 ops/s
# Warmup Iteration   4: 10737212.346 ops/s
# Warmup Iteration   5: 10761542.106 ops/s
# Warmup Iteration   6: 10720277.222 ops/s
# Warmup Iteration   7: 10767155.676 ops/s
# Warmup Iteration   8: 10752065.186 ops/s
# Warmup Iteration   9: 10730760.651 ops/s
# Warmup Iteration  10: 10703860.100 ops/s
# Warmup Iteration  11: 10770959.358 ops/s
# Warmup Iteration  12: 10676392.150 ops/s
# Warmup Iteration  13: 10707400.554 ops/s
# Warmup Iteration  14: 10684716.143 ops/s
# Warmup Iteration  15: 10741256.852 ops/s
# Warmup Iteration  16: 10748664.599 ops/s
# Warmup Iteration  17: 10744012.130 ops/s
# Warmup Iteration  18: 10743769.129 ops/s
# Warmup Iteration  19: 10744588.795 ops/s
# Warmup Iteration  20: 10710088.093 ops/s
# Warmup Iteration  21: 10696484.971 ops/s
# Warmup Iteration  22: 10732539.678 ops/s
# Warmup Iteration  23: 10722384.754 ops/s
# Warmup Iteration  24: 10714367.192 ops/s
# Warmup Iteration  25: 10724774.718 ops/s
# Warmup Iteration  26: 10690620.900 ops/s
# Warmup Iteration  27: 10680547.544 ops/s
# Warmup Iteration  28: 10704184.867 ops/s
# Warmup Iteration  29: 10760377.042 ops/s
# Warmup Iteration  30: 10647806.912 ops/s
Iteration   1: 10710931.422 ops/s
Iteration   2: 10679898.577 ops/s
Iteration   3: 10656654.310 ops/s
Iteration   4: 10687195.513 ops/s
Iteration   5: 10660047.205 ops/s
Iteration   6: 10637824.413 ops/s
Iteration   7: 10764164.738 ops/s
Iteration   8: 10705831.676 ops/s
Iteration   9: 10723585.832 ops/s
Iteration  10: 10695456.325 ops/s
Iteration  11: 10769613.679 ops/s
Iteration  12: 10742650.246 ops/s
Iteration  13: 10722075.969 ops/s
Iteration  14: 10744004.905 ops/s
Iteration  15: 10770253.802 ops/s
Iteration  16: 10720948.435 ops/s
Iteration  17: 10730531.302 ops/s
Iteration  18: 10760293.447 ops/s
Iteration  19: 10757774.938 ops/s
Iteration  20: 10786692.516 ops/s
Iteration  21: 10708031.618 ops/s
Iteration  22: 10683822.969 ops/s
Iteration  23: 10749098.693 ops/s
Iteration  24: 10743826.546 ops/s
Iteration  25: 10665502.758 ops/s
Iteration  26: 10684879.999 ops/s
Iteration  27: 10723136.525 ops/s
Iteration  28: 10676735.691 ops/s
Iteration  29: 10716212.278 ops/s
Iteration  30: 10775325.355 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_select":
  10718433.389 ±(99.9%) 26474.729 ops/s [Average]
  (min, avg, max) = (10637824.413, 10718433.389, 10786692.516), stdev = 39626.130
  CI (99.9%): [10691958.661, 10744908.118] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_select  thrpt   30  10718433.389 ± 26474.729  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1629183.687 ops/s
# Warmup Iteration   2: 3461189.425 ops/s
# Warmup Iteration   3: 4134456.733 ops/s
# Warmup Iteration   4: 4880810.080 ops/s
# Warmup Iteration   5: 4871295.583 ops/s
# Warmup Iteration   6: 4879324.126 ops/s
# Warmup Iteration   7: 4889362.015 ops/s
# Warmup Iteration   8: 4887652.884 ops/s
# Warmup Iteration   9: 4874438.986 ops/s
# Warmup Iteration  10: 4900099.126 ops/s
# Warmup Iteration  11: 4892808.964 ops/s
# Warmup Iteration  12: 4884730.796 ops/s
# Warmup Iteration  13: 4891648.495 ops/s
# Warmup Iteration  14: 4898514.186 ops/s
# Warmup Iteration  15: 4897486.938 ops/s
# Warmup Iteration  16: 4897322.912 ops/s
# Warmup Iteration  17: 4907596.438 ops/s
# Warmup Iteration  18: 4900819.624 ops/s
# Warmup Iteration  19: 4899525.065 ops/s
# Warmup Iteration  20: 4919088.005 ops/s
# Warmup Iteration  21: 4905995.624 ops/s
# Warmup Iteration  22: 4875073.269 ops/s
# Warmup Iteration  23: 4878852.190 ops/s
# Warmup Iteration  24: 4897745.059 ops/s
# Warmup Iteration  25: 4911352.133 ops/s
# Warmup Iteration  26: 4905756.068 ops/s
# Warmup Iteration  27: 4906390.635 ops/s
# Warmup Iteration  28: 4862265.140 ops/s
# Warmup Iteration  29: 4881007.707 ops/s
# Warmup Iteration  30: 4910158.403 ops/s
Iteration   1: 4913390.737 ops/s
Iteration   2: 4887755.054 ops/s
Iteration   3: 4899786.218 ops/s
Iteration   4: 4868940.635 ops/s
Iteration   5: 4923901.939 ops/s
Iteration   6: 4944532.013 ops/s
Iteration   7: 4901126.329 ops/s
Iteration   8: 4915740.596 ops/s
Iteration   9: 4899871.915 ops/s
Iteration  10: 4886076.893 ops/s
Iteration  11: 4879297.724 ops/s
Iteration  12: 4909632.149 ops/s
Iteration  13: 4932106.912 ops/s
Iteration  14: 4932719.192 ops/s
Iteration  15: 4935699.728 ops/s
Iteration  16: 4916114.873 ops/s
Iteration  17: 4920686.142 ops/s
Iteration  18: 4915929.988 ops/s
Iteration  19: 4933070.590 ops/s
Iteration  20: 4923361.905 ops/s
Iteration  21: 4924434.356 ops/s
Iteration  22: 4922520.359 ops/s
Iteration  23: 4878766.545 ops/s
Iteration  24: 4915902.841 ops/s
Iteration  25: 4917663.589 ops/s
Iteration  26: 4938778.594 ops/s
Iteration  27: 4903844.618 ops/s
Iteration  28: 4925842.639 ops/s
Iteration  29: 4870057.141 ops/s
Iteration  30: 4880005.365 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_size":
  4910585.253 ±(99.9%) 14151.423 ops/s [Average]
  (min, avg, max) = (4868940.635, 4910585.253, 4944532.013), stdev = 21181.185
  CI (99.9%): [4896433.830, 4924736.675] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_size  thrpt   30  4910585.253 ± 14151.423  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 166295256.294 ops/s
# Warmup Iteration   2: 299309711.542 ops/s
# Warmup Iteration   3: 264946577.907 ops/s
# Warmup Iteration   4: 305921271.723 ops/s
# Warmup Iteration   5: 309614720.047 ops/s
# Warmup Iteration   6: 309362439.417 ops/s
# Warmup Iteration   7: 308605343.225 ops/s
# Warmup Iteration   8: 307788583.437 ops/s
# Warmup Iteration   9: 308696460.773 ops/s
# Warmup Iteration  10: 310408400.390 ops/s
# Warmup Iteration  11: 309919505.978 ops/s
# Warmup Iteration  12: 308563296.737 ops/s
# Warmup Iteration  13: 308436226.990 ops/s
# Warmup Iteration  14: 309154753.883 ops/s
# Warmup Iteration  15: 308336557.116 ops/s
# Warmup Iteration  16: 308438989.044 ops/s
# Warmup Iteration  17: 307659428.999 ops/s
# Warmup Iteration  18: 308714448.922 ops/s
# Warmup Iteration  19: 308997038.185 ops/s
# Warmup Iteration  20: 308348002.838 ops/s
# Warmup Iteration  21: 308371333.330 ops/s
# Warmup Iteration  22: 308540713.707 ops/s
# Warmup Iteration  23: 308279756.408 ops/s
# Warmup Iteration  24: 308450150.249 ops/s
# Warmup Iteration  25: 309084668.815 ops/s
# Warmup Iteration  26: 308667858.733 ops/s
# Warmup Iteration  27: 308613410.103 ops/s
# Warmup Iteration  28: 308733270.973 ops/s
# Warmup Iteration  29: 308560448.268 ops/s
# Warmup Iteration  30: 308286283.222 ops/s
Iteration   1: 308527364.739 ops/s
Iteration   2: 308069145.745 ops/s
Iteration   3: 307821070.642 ops/s
Iteration   4: 308991991.706 ops/s
Iteration   5: 308019495.535 ops/s
Iteration   6: 307280066.694 ops/s
Iteration   7: 307832282.476 ops/s
Iteration   8: 306338039.837 ops/s
Iteration   9: 308635839.954 ops/s
Iteration  10: 308671952.313 ops/s
Iteration  11: 309834054.707 ops/s
Iteration  12: 309378173.850 ops/s
Iteration  13: 307419232.437 ops/s
Iteration  14: 307150616.859 ops/s
Iteration  15: 308672493.719 ops/s
Iteration  16: 307143844.060 ops/s
Iteration  17: 307089403.527 ops/s
Iteration  18: 307706745.746 ops/s
Iteration  19: 306752489.499 ops/s
Iteration  20: 308756902.767 ops/s
Iteration  21: 307870194.609 ops/s
Iteration  22: 309712258.399 ops/s
Iteration  23: 307275742.134 ops/s
Iteration  24: 308003602.120 ops/s
Iteration  25: 307439304.487 ops/s
Iteration  26: 306348201.467 ops/s
Iteration  27: 309899212.492 ops/s
Iteration  28: 308692946.507 ops/s
Iteration  29: 308645548.057 ops/s
Iteration  30: 308689954.416 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_testEquals":
  308088939.050 ±(99.9%) 647924.406 ops/s [Average]
  (min, avg, max) = (306338039.837, 308088939.050, 309899212.492), stdev = 969782.822
  CI (99.9%): [307441014.644, 308736863.456] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt          Score        Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_testEquals  thrpt   30  308088939.050 ± 647924.406  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 165292967.402 ops/s
# Warmup Iteration   2: 301307151.221 ops/s
# Warmup Iteration   3: 235786176.422 ops/s
# Warmup Iteration   4: 271015947.818 ops/s
# Warmup Iteration   5: 272133741.398 ops/s
# Warmup Iteration   6: 271610368.021 ops/s
# Warmup Iteration   7: 272650475.058 ops/s
# Warmup Iteration   8: 272808891.627 ops/s
# Warmup Iteration   9: 271877901.897 ops/s
# Warmup Iteration  10: 272412448.824 ops/s
# Warmup Iteration  11: 272268962.523 ops/s
# Warmup Iteration  12: 272675513.291 ops/s
# Warmup Iteration  13: 273833349.108 ops/s
# Warmup Iteration  14: 272344995.543 ops/s
# Warmup Iteration  15: 272290301.243 ops/s
# Warmup Iteration  16: 272603157.292 ops/s
# Warmup Iteration  17: 273005358.232 ops/s
# Warmup Iteration  18: 273142886.707 ops/s
# Warmup Iteration  19: 272498596.138 ops/s
# Warmup Iteration  20: 271433365.134 ops/s
# Warmup Iteration  21: 272474188.622 ops/s
# Warmup Iteration  22: 272304012.481 ops/s
# Warmup Iteration  23: 271079818.323 ops/s
# Warmup Iteration  24: 271988847.815 ops/s
# Warmup Iteration  25: 271759520.481 ops/s
# Warmup Iteration  26: 270931800.845 ops/s
# Warmup Iteration  27: 270964290.563 ops/s
# Warmup Iteration  28: 271342640.934 ops/s
# Warmup Iteration  29: 271141433.621 ops/s
# Warmup Iteration  30: 271474736.728 ops/s
Iteration   1: 271716627.379 ops/s
Iteration   2: 272646507.826 ops/s
Iteration   3: 272853150.789 ops/s
Iteration   4: 272398942.641 ops/s
Iteration   5: 271865244.954 ops/s
Iteration   6: 272934141.593 ops/s
Iteration   7: 270992947.700 ops/s
Iteration   8: 272237402.835 ops/s
Iteration   9: 272761999.518 ops/s
Iteration  10: 272546746.129 ops/s
Iteration  11: 272918085.654 ops/s
Iteration  12: 273669989.839 ops/s
Iteration  13: 273103744.953 ops/s
Iteration  14: 273657381.408 ops/s
Iteration  15: 272763528.187 ops/s
Iteration  16: 272146250.750 ops/s
Iteration  17: 271623849.360 ops/s
Iteration  18: 271141151.276 ops/s
Iteration  19: 271914135.378 ops/s
Iteration  20: 272175721.183 ops/s
Iteration  21: 272036659.397 ops/s
Iteration  22: 271593408.636 ops/s
Iteration  23: 272091143.498 ops/s
Iteration  24: 271833221.932 ops/s
Iteration  25: 272792220.472 ops/s
Iteration  26: 271242959.500 ops/s
Iteration  27: 273174399.227 ops/s
Iteration  28: 272885740.415 ops/s
Iteration  29: 272178353.878 ops/s
Iteration  30: 272928277.930 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_testHashCode":
  272360797.808 ±(99.9%) 462554.789 ops/s [Average]
  (min, avg, max) = (270992947.700, 272360797.808, 273669989.839), stdev = 692330.284
  CI (99.9%): [271898243.019, 272823352.596] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt          Score        Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_testHashCode  thrpt   30  272360797.808 ± 462554.789  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 165829986.932 ops/s
# Warmup Iteration   2: 299976100.215 ops/s
# Warmup Iteration   3: 262778294.468 ops/s
# Warmup Iteration   4: 305203084.998 ops/s
# Warmup Iteration   5: 304804040.068 ops/s
# Warmup Iteration   6: 307659317.715 ops/s
# Warmup Iteration   7: 306887429.454 ops/s
# Warmup Iteration   8: 307153449.343 ops/s
# Warmup Iteration   9: 308117720.579 ops/s
# Warmup Iteration  10: 307881275.596 ops/s
# Warmup Iteration  11: 306481282.103 ops/s
# Warmup Iteration  12: 308823844.194 ops/s
# Warmup Iteration  13: 309321202.111 ops/s
# Warmup Iteration  14: 307793225.225 ops/s
# Warmup Iteration  15: 308257973.124 ops/s
# Warmup Iteration  16: 307405977.834 ops/s
# Warmup Iteration  17: 307955484.794 ops/s
# Warmup Iteration  18: 307131694.081 ops/s
# Warmup Iteration  19: 307254792.605 ops/s
# Warmup Iteration  20: 307554583.413 ops/s
# Warmup Iteration  21: 307378342.989 ops/s
# Warmup Iteration  22: 306725451.084 ops/s
# Warmup Iteration  23: 307177936.764 ops/s
# Warmup Iteration  24: 306013619.860 ops/s
# Warmup Iteration  25: 308447607.787 ops/s
# Warmup Iteration  26: 307487590.881 ops/s
# Warmup Iteration  27: 307280102.475 ops/s
# Warmup Iteration  28: 308781649.468 ops/s
# Warmup Iteration  29: 306425928.592 ops/s
# Warmup Iteration  30: 307383006.848 ops/s
Iteration   1: 305262823.309 ops/s
Iteration   2: 307139238.312 ops/s
Iteration   3: 308617196.840 ops/s
Iteration   4: 307642648.071 ops/s
Iteration   5: 307175243.277 ops/s
Iteration   6: 306459857.800 ops/s
Iteration   7: 309181838.472 ops/s
Iteration   8: 308882714.362 ops/s
Iteration   9: 308255490.720 ops/s
Iteration  10: 307042381.160 ops/s
Iteration  11: 306593639.293 ops/s
Iteration  12: 306873439.895 ops/s
Iteration  13: 307487919.473 ops/s
Iteration  14: 308162285.900 ops/s
Iteration  15: 306430534.027 ops/s
Iteration  16: 306050823.187 ops/s
Iteration  17: 307261503.479 ops/s
Iteration  18: 307032197.004 ops/s
Iteration  19: 302974954.730 ops/s
Iteration  20: 306283544.232 ops/s
Iteration  21: 306638625.814 ops/s
Iteration  22: 305781273.091 ops/s
Iteration  23: 305508022.387 ops/s
Iteration  24: 305807616.791 ops/s
Iteration  25: 306861463.271 ops/s
Iteration  26: 306617190.257 ops/s
Iteration  27: 304580520.659 ops/s
Iteration  28: 306480752.171 ops/s
Iteration  29: 306148162.262 ops/s
Iteration  30: 305442290.219 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_testToString":
  306689206.349 ±(99.9%) 858272.114 ops/s [Average]
  (min, avg, max) = (302974954.730, 306689206.349, 309181838.472), stdev = 1284621.393
  CI (99.9%): [305830934.235, 307547478.463] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt          Score        Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_testToString  thrpt   30  306689206.349 ± 858272.114  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1384532.025 ops/s
# Warmup Iteration   2: 3031336.594 ops/s
# Warmup Iteration   3: 3238913.362 ops/s
# Warmup Iteration   4: 3931613.927 ops/s
# Warmup Iteration   5: 3953233.321 ops/s
# Warmup Iteration   6: 3923885.473 ops/s
# Warmup Iteration   7: 3948964.787 ops/s
# Warmup Iteration   8: 3926598.624 ops/s
# Warmup Iteration   9: 3938432.869 ops/s
# Warmup Iteration  10: 3932450.320 ops/s
# Warmup Iteration  11: 3932792.104 ops/s
# Warmup Iteration  12: 3930089.072 ops/s
# Warmup Iteration  13: 3930532.181 ops/s
# Warmup Iteration  14: 3933398.124 ops/s
# Warmup Iteration  15: 3931689.127 ops/s
# Warmup Iteration  16: 3934071.394 ops/s
# Warmup Iteration  17: 3936279.026 ops/s
# Warmup Iteration  18: 3944983.483 ops/s
# Warmup Iteration  19: 3950053.244 ops/s
# Warmup Iteration  20: 3939565.684 ops/s
# Warmup Iteration  21: 3945653.225 ops/s
# Warmup Iteration  22: 3930720.695 ops/s
# Warmup Iteration  23: 3936359.098 ops/s
# Warmup Iteration  24: 3944946.692 ops/s
# Warmup Iteration  25: 3929569.872 ops/s
# Warmup Iteration  26: 3931574.471 ops/s
# Warmup Iteration  27: 3927814.602 ops/s
# Warmup Iteration  28: 3924147.036 ops/s
# Warmup Iteration  29: 3929414.196 ops/s
# Warmup Iteration  30: 3938395.061 ops/s
Iteration   1: 3934505.776 ops/s
Iteration   2: 3929856.430 ops/s
Iteration   3: 3916160.307 ops/s
Iteration   4: 3944989.534 ops/s
Iteration   5: 3909271.862 ops/s
Iteration   6: 3931678.498 ops/s
Iteration   7: 3917333.999 ops/s
Iteration   8: 3957454.633 ops/s
Iteration   9: 3916070.737 ops/s
Iteration  10: 3930312.032 ops/s
Iteration  11: 3936490.451 ops/s
Iteration  12: 3932651.558 ops/s
Iteration  13: 3937407.710 ops/s
Iteration  14: 3947858.802 ops/s
Iteration  15: 3953011.643 ops/s
Iteration  16: 3934280.901 ops/s
Iteration  17: 3940991.960 ops/s
Iteration  18: 3920431.295 ops/s
Iteration  19: 3934242.088 ops/s
Iteration  20: 3946299.611 ops/s
Iteration  21: 3935528.598 ops/s
Iteration  22: 3924401.225 ops/s
Iteration  23: 3934389.176 ops/s
Iteration  24: 3947056.490 ops/s
Iteration  25: 3935404.302 ops/s
Iteration  26: 3920432.855 ops/s
Iteration  27: 3926920.451 ops/s
Iteration  28: 3940217.794 ops/s
Iteration  29: 3955441.149 ops/s
Iteration  30: 3916119.573 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_toArray":
  3933573.715 ±(99.9%) 8329.690 ops/s [Average]
  (min, avg, max) = (3909271.862, 3933573.715, 3957454.633), stdev = 12467.489
  CI (99.9%): [3925244.025, 3941903.405] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_toArray  thrpt   30  3933573.715 ± 8329.690  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 974849.890 ops/s
# Warmup Iteration   2: 1949185.351 ops/s
# Warmup Iteration   3: 2399624.394 ops/s
# Warmup Iteration   4: 2000699.960 ops/s
# Warmup Iteration   5: 2404717.255 ops/s
# Warmup Iteration   6: 2404252.682 ops/s
# Warmup Iteration   7: 2398795.145 ops/s
# Warmup Iteration   8: 2397640.721 ops/s
# Warmup Iteration   9: 2399755.369 ops/s
# Warmup Iteration  10: 2394107.243 ops/s
# Warmup Iteration  11: 2400326.873 ops/s
# Warmup Iteration  12: 2400998.652 ops/s
# Warmup Iteration  13: 2398027.188 ops/s
# Warmup Iteration  14: 2396172.362 ops/s
# Warmup Iteration  15: 2401284.814 ops/s
# Warmup Iteration  16: 2394152.747 ops/s
# Warmup Iteration  17: 2402321.293 ops/s
# Warmup Iteration  18: 2396303.351 ops/s
# Warmup Iteration  19: 2391135.331 ops/s
# Warmup Iteration  20: 2396976.069 ops/s
# Warmup Iteration  21: 2398050.508 ops/s
# Warmup Iteration  22: 2397780.420 ops/s
# Warmup Iteration  23: 2404831.709 ops/s
# Warmup Iteration  24: 2391649.073 ops/s
# Warmup Iteration  25: 2399506.347 ops/s
# Warmup Iteration  26: 2403560.969 ops/s
# Warmup Iteration  27: 2399495.326 ops/s
# Warmup Iteration  28: 2401217.488 ops/s
# Warmup Iteration  29: 2401265.035 ops/s
# Warmup Iteration  30: 2406730.605 ops/s
Iteration   1: 2400248.508 ops/s
Iteration   2: 2411563.505 ops/s
Iteration   3: 2402558.054 ops/s
Iteration   4: 2405426.462 ops/s
Iteration   5: 2400886.412 ops/s
Iteration   6: 2408163.694 ops/s
Iteration   7: 2397818.052 ops/s
Iteration   8: 2411293.369 ops/s
Iteration   9: 2406652.489 ops/s
Iteration  10: 2402937.003 ops/s
Iteration  11: 2409978.546 ops/s
Iteration  12: 2393619.749 ops/s
Iteration  13: 2395023.923 ops/s
Iteration  14: 2404092.550 ops/s
Iteration  15: 2413559.289 ops/s
Iteration  16: 2414853.197 ops/s
Iteration  17: 2399341.234 ops/s
Iteration  18: 2397355.365 ops/s
Iteration  19: 2394538.844 ops/s
Iteration  20: 2410560.706 ops/s
Iteration  21: 2391168.570 ops/s
Iteration  22: 2406672.274 ops/s
Iteration  23: 2408441.565 ops/s
Iteration  24: 2408700.348 ops/s
Iteration  25: 2408450.226 ops/s
Iteration  26: 2377706.065 ops/s
Iteration  27: 2402142.981 ops/s
Iteration  28: 2397613.384 ops/s
Iteration  29: 2402474.566 ops/s
Iteration  30: 2393557.979 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_toBag":
  2402579.964 ±(99.9%) 5341.364 ops/s [Average]
  (min, avg, max) = (2377706.065, 2402579.964, 2414853.197), stdev = 7994.703
  CI (99.9%): [2397238.599, 2407921.328] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_toBag  thrpt   30  2402579.964 ± 5341.364  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1092612.425 ops/s
# Warmup Iteration   2: 2584051.644 ops/s
# Warmup Iteration   3: 2386445.542 ops/s
# Warmup Iteration   4: 2832329.926 ops/s
# Warmup Iteration   5: 2876110.232 ops/s
# Warmup Iteration   6: 2872434.112 ops/s
# Warmup Iteration   7: 2864570.408 ops/s
# Warmup Iteration   8: 2860204.988 ops/s
# Warmup Iteration   9: 2847277.422 ops/s
# Warmup Iteration  10: 2863901.888 ops/s
# Warmup Iteration  11: 2861249.692 ops/s
# Warmup Iteration  12: 2864268.397 ops/s
# Warmup Iteration  13: 2862218.838 ops/s
# Warmup Iteration  14: 2853373.345 ops/s
# Warmup Iteration  15: 2862043.631 ops/s
# Warmup Iteration  16: 2863466.827 ops/s
# Warmup Iteration  17: 2875169.160 ops/s
# Warmup Iteration  18: 2859367.089 ops/s
# Warmup Iteration  19: 2870316.906 ops/s
# Warmup Iteration  20: 2868780.402 ops/s
# Warmup Iteration  21: 2865907.737 ops/s
# Warmup Iteration  22: 2858059.009 ops/s
# Warmup Iteration  23: 2871047.526 ops/s
# Warmup Iteration  24: 2865767.743 ops/s
# Warmup Iteration  25: 2849515.727 ops/s
# Warmup Iteration  26: 2870337.081 ops/s
# Warmup Iteration  27: 2860278.780 ops/s
# Warmup Iteration  28: 2840705.680 ops/s
# Warmup Iteration  29: 2860683.406 ops/s
# Warmup Iteration  30: 2852882.154 ops/s
Iteration   1: 2841919.137 ops/s
Iteration   2: 2850375.042 ops/s
Iteration   3: 2858229.198 ops/s
Iteration   4: 2850513.007 ops/s
Iteration   5: 2847031.453 ops/s
Iteration   6: 2838114.589 ops/s
Iteration   7: 2854944.038 ops/s
Iteration   8: 2856379.605 ops/s
Iteration   9: 2864554.260 ops/s
Iteration  10: 2858010.420 ops/s
Iteration  11: 2850907.781 ops/s
Iteration  12: 2847425.474 ops/s
Iteration  13: 2857064.709 ops/s
Iteration  14: 2832432.432 ops/s
Iteration  15: 2861258.794 ops/s
Iteration  16: 2862740.989 ops/s
Iteration  17: 2863682.302 ops/s
Iteration  18: 2856504.123 ops/s
Iteration  19: 2854108.197 ops/s
Iteration  20: 2837955.201 ops/s
Iteration  21: 2855812.498 ops/s
Iteration  22: 2843417.312 ops/s
Iteration  23: 2858700.535 ops/s
Iteration  24: 2854656.047 ops/s
Iteration  25: 2848401.597 ops/s
Iteration  26: 2852821.588 ops/s
Iteration  27: 2852422.019 ops/s
Iteration  28: 2848633.570 ops/s
Iteration  29: 2835357.527 ops/s
Iteration  30: 2852086.325 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_toList":
  2851548.659 ±(99.9%) 5563.229 ops/s [Average]
  (min, avg, max) = (2832432.432, 2851548.659, 2864554.260), stdev = 8326.780
  CI (99.9%): [2845985.430, 2857111.888] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_toList  thrpt   30  2851548.659 ± 5563.229  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1474288.641 ops/s
# Warmup Iteration   2: 3436251.491 ops/s
# Warmup Iteration   3: 4110048.523 ops/s
# Warmup Iteration   4: 3383821.296 ops/s
# Warmup Iteration   5: 4106608.593 ops/s
# Warmup Iteration   6: 4107885.081 ops/s
# Warmup Iteration   7: 4091588.688 ops/s
# Warmup Iteration   8: 4108002.194 ops/s
# Warmup Iteration   9: 4088969.828 ops/s
# Warmup Iteration  10: 4106311.131 ops/s
# Warmup Iteration  11: 4087216.098 ops/s
# Warmup Iteration  12: 4098818.474 ops/s
# Warmup Iteration  13: 4103418.379 ops/s
# Warmup Iteration  14: 4105470.576 ops/s
# Warmup Iteration  15: 4115622.970 ops/s
# Warmup Iteration  16: 4118783.029 ops/s
# Warmup Iteration  17: 4094466.137 ops/s
# Warmup Iteration  18: 4122499.376 ops/s
# Warmup Iteration  19: 4112213.740 ops/s
# Warmup Iteration  20: 4114217.048 ops/s
# Warmup Iteration  21: 4102955.023 ops/s
# Warmup Iteration  22: 4114837.401 ops/s
# Warmup Iteration  23: 4094639.223 ops/s
# Warmup Iteration  24: 4097425.099 ops/s
# Warmup Iteration  25: 4125496.724 ops/s
# Warmup Iteration  26: 4102033.909 ops/s
# Warmup Iteration  27: 4108979.696 ops/s
# Warmup Iteration  28: 4109470.654 ops/s
# Warmup Iteration  29: 4089936.763 ops/s
# Warmup Iteration  30: 4120299.014 ops/s
Iteration   1: 4120081.799 ops/s
Iteration   2: 4095582.041 ops/s
Iteration   3: 4108899.715 ops/s
Iteration   4: 4115791.681 ops/s
Iteration   5: 4108424.470 ops/s
Iteration   6: 4118512.794 ops/s
Iteration   7: 4125795.174 ops/s
Iteration   8: 4095893.238 ops/s
Iteration   9: 4111459.404 ops/s
Iteration  10: 4119908.779 ops/s
Iteration  11: 4097617.457 ops/s
Iteration  12: 4106909.571 ops/s
Iteration  13: 4088765.728 ops/s
Iteration  14: 4108215.847 ops/s
Iteration  15: 4144521.691 ops/s
Iteration  16: 4097638.055 ops/s
Iteration  17: 4102087.380 ops/s
Iteration  18: 4103890.768 ops/s
Iteration  19: 4106814.695 ops/s
Iteration  20: 4106110.751 ops/s
Iteration  21: 4105474.057 ops/s
Iteration  22: 4107225.691 ops/s
Iteration  23: 4107482.562 ops/s
Iteration  24: 4102597.558 ops/s
Iteration  25: 4106904.875 ops/s
Iteration  26: 4114835.889 ops/s
Iteration  27: 4114297.433 ops/s
Iteration  28: 4105112.237 ops/s
Iteration  29: 4094010.990 ops/s
Iteration  30: 4102258.334 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_toSet":
  4108104.022 ±(99.9%) 7263.001 ops/s [Average]
  (min, avg, max) = (4088765.728, 4108104.022, 4144521.691), stdev = 10870.919
  CI (99.9%): [4100841.021, 4115367.024] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_toSet  thrpt   30  4108104.022 ± 7263.001  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 658783.502 ops/s
# Warmup Iteration   2: 702198.382 ops/s
# Warmup Iteration   3: 943634.983 ops/s
# Warmup Iteration   4: 939645.610 ops/s
# Warmup Iteration   5: 943304.421 ops/s
# Warmup Iteration   6: 939850.854 ops/s
# Warmup Iteration   7: 945110.040 ops/s
# Warmup Iteration   8: 938445.340 ops/s
# Warmup Iteration   9: 939745.189 ops/s
# Warmup Iteration  10: 943129.170 ops/s
# Warmup Iteration  11: 781124.488 ops/s
# Warmup Iteration  12: 945177.783 ops/s
# Warmup Iteration  13: 944554.604 ops/s
# Warmup Iteration  14: 942607.405 ops/s
# Warmup Iteration  15: 945401.021 ops/s
# Warmup Iteration  16: 943472.493 ops/s
# Warmup Iteration  17: 997598.048 ops/s
# Warmup Iteration  18: 996983.587 ops/s
# Warmup Iteration  19: 999177.672 ops/s
# Warmup Iteration  20: 996691.485 ops/s
# Warmup Iteration  21: 1000279.856 ops/s
# Warmup Iteration  22: 995268.885 ops/s
# Warmup Iteration  23: 993467.301 ops/s
# Warmup Iteration  24: 996616.992 ops/s
# Warmup Iteration  25: 996968.998 ops/s
# Warmup Iteration  26: 1001170.996 ops/s
# Warmup Iteration  27: 998730.305 ops/s
# Warmup Iteration  28: 994046.990 ops/s
# Warmup Iteration  29: 1001883.742 ops/s
# Warmup Iteration  30: 1001301.913 ops/s
Iteration   1: 998080.946 ops/s
Iteration   2: 997659.371 ops/s
Iteration   3: 996864.001 ops/s
Iteration   4: 989869.927 ops/s
Iteration   5: 999638.905 ops/s
Iteration   6: 996413.139 ops/s
Iteration   7: 1000827.652 ops/s
Iteration   8: 994436.657 ops/s
Iteration   9: 990525.014 ops/s
Iteration  10: 992123.267 ops/s
Iteration  11: 1001036.078 ops/s
Iteration  12: 994393.095 ops/s
Iteration  13: 997343.259 ops/s
Iteration  14: 996870.594 ops/s
Iteration  15: 992606.364 ops/s
Iteration  16: 1002497.755 ops/s
Iteration  17: 999098.137 ops/s
Iteration  18: 998514.088 ops/s
Iteration  19: 993966.361 ops/s
Iteration  20: 994185.204 ops/s
Iteration  21: 996397.633 ops/s
Iteration  22: 997786.036 ops/s
Iteration  23: 997555.877 ops/s
Iteration  24: 994463.296 ops/s
Iteration  25: 1005269.793 ops/s
Iteration  26: 996652.294 ops/s
Iteration  27: 1001652.564 ops/s
Iteration  28: 999046.691 ops/s
Iteration  29: 997238.771 ops/s
Iteration  30: 998144.118 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_with":
  997038.563 ±(99.9%) 2309.949 ops/s [Average]
  (min, avg, max) = (989869.927, 997038.563, 1005269.793), stdev = 3457.424
  CI (99.9%): [994728.613, 999348.512] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_with  thrpt   30  997038.563 ± 2309.949  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 666419.880 ops/s
# Warmup Iteration   2: 713975.361 ops/s
# Warmup Iteration   3: 950259.398 ops/s
# Warmup Iteration   4: 950994.554 ops/s
# Warmup Iteration   5: 948774.890 ops/s
# Warmup Iteration   6: 949611.653 ops/s
# Warmup Iteration   7: 947789.112 ops/s
# Warmup Iteration   8: 951843.709 ops/s
# Warmup Iteration   9: 949640.328 ops/s
# Warmup Iteration  10: 934924.054 ops/s
# Warmup Iteration  11: 811963.193 ops/s
# Warmup Iteration  12: 949115.720 ops/s
# Warmup Iteration  13: 950593.408 ops/s
# Warmup Iteration  14: 951439.888 ops/s
# Warmup Iteration  15: 946266.357 ops/s
# Warmup Iteration  16: 944570.426 ops/s
# Warmup Iteration  17: 1007561.329 ops/s
# Warmup Iteration  18: 999886.829 ops/s
# Warmup Iteration  19: 1004517.170 ops/s
# Warmup Iteration  20: 1008818.094 ops/s
# Warmup Iteration  21: 1007078.290 ops/s
# Warmup Iteration  22: 1005659.367 ops/s
# Warmup Iteration  23: 1004574.664 ops/s
# Warmup Iteration  24: 1010608.079 ops/s
# Warmup Iteration  25: 1005756.391 ops/s
# Warmup Iteration  26: 1005038.026 ops/s
# Warmup Iteration  27: 1004928.864 ops/s
# Warmup Iteration  28: 1004487.402 ops/s
# Warmup Iteration  29: 1007287.668 ops/s
# Warmup Iteration  30: 1007490.998 ops/s
Iteration   1: 1006969.494 ops/s
Iteration   2: 1004205.222 ops/s
Iteration   3: 1010407.809 ops/s
Iteration   4: 1010325.736 ops/s
Iteration   5: 1004698.462 ops/s
Iteration   6: 1006591.605 ops/s
Iteration   7: 1005658.980 ops/s
Iteration   8: 1003920.890 ops/s
Iteration   9: 993236.222 ops/s
Iteration  10: 1005195.068 ops/s
Iteration  11: 1003181.605 ops/s
Iteration  12: 1004774.332 ops/s
Iteration  13: 1000941.901 ops/s
Iteration  14: 1002144.788 ops/s
Iteration  15: 1003845.346 ops/s
Iteration  16: 1004723.887 ops/s
Iteration  17: 997992.310 ops/s
Iteration  18: 1001842.721 ops/s
Iteration  19: 997106.852 ops/s
Iteration  20: 999492.987 ops/s
Iteration  21: 1005731.262 ops/s
Iteration  22: 1000953.406 ops/s
Iteration  23: 1005742.993 ops/s
Iteration  24: 998901.113 ops/s
Iteration  25: 1009139.654 ops/s
Iteration  26: 1006426.193 ops/s
Iteration  27: 1008226.024 ops/s
Iteration  28: 1011117.978 ops/s
Iteration  29: 1006090.264 ops/s
Iteration  30: 1007072.348 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_withAll":
  1004221.915 ±(99.9%) 2759.849 ops/s [Average]
  (min, avg, max) = (993236.222, 1004221.915, 1011117.978), stdev = 4130.813
  CI (99.9%): [1001462.066, 1006981.765] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_withAll  thrpt   30  1004221.915 ± 2759.849  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1701908.285 ops/s
# Warmup Iteration   2: 4113826.142 ops/s
# Warmup Iteration   3: 4985786.448 ops/s
# Warmup Iteration   4: 4094734.325 ops/s
# Warmup Iteration   5: 4984171.116 ops/s
# Warmup Iteration   6: 4979714.351 ops/s
# Warmup Iteration   7: 4976513.690 ops/s
# Warmup Iteration   8: 4985207.752 ops/s
# Warmup Iteration   9: 4989767.143 ops/s
# Warmup Iteration  10: 4979335.714 ops/s
# Warmup Iteration  11: 4997875.620 ops/s
# Warmup Iteration  12: 4978731.050 ops/s
# Warmup Iteration  13: 4975747.497 ops/s
# Warmup Iteration  14: 4979228.775 ops/s
# Warmup Iteration  15: 4978442.429 ops/s
# Warmup Iteration  16: 4998406.331 ops/s
# Warmup Iteration  17: 4988131.627 ops/s
# Warmup Iteration  18: 4972884.938 ops/s
# Warmup Iteration  19: 4973362.913 ops/s
# Warmup Iteration  20: 4973512.919 ops/s
# Warmup Iteration  21: 4984002.140 ops/s
# Warmup Iteration  22: 4979796.088 ops/s
# Warmup Iteration  23: 4980169.561 ops/s
# Warmup Iteration  24: 4980557.047 ops/s
# Warmup Iteration  25: 4986836.816 ops/s
# Warmup Iteration  26: 4973639.012 ops/s
# Warmup Iteration  27: 4975485.462 ops/s
# Warmup Iteration  28: 4977330.302 ops/s
# Warmup Iteration  29: 4970711.529 ops/s
# Warmup Iteration  30: 4972394.285 ops/s
Iteration   1: 5002726.630 ops/s
Iteration   2: 4980688.250 ops/s
Iteration   3: 4972286.392 ops/s
Iteration   4: 4986300.807 ops/s
Iteration   5: 5001439.205 ops/s
Iteration   6: 4970781.176 ops/s
Iteration   7: 4950994.116 ops/s
Iteration   8: 4981811.354 ops/s
Iteration   9: 4988723.453 ops/s
Iteration  10: 4981457.442 ops/s
Iteration  11: 4985243.608 ops/s
Iteration  12: 5008168.278 ops/s
Iteration  13: 4978962.025 ops/s
Iteration  14: 4949239.421 ops/s
Iteration  15: 4971518.384 ops/s
Iteration  16: 4984434.648 ops/s
Iteration  17: 4989780.389 ops/s
Iteration  18: 4965561.709 ops/s
Iteration  19: 4991807.480 ops/s
Iteration  20: 4985857.755 ops/s
Iteration  21: 4988069.768 ops/s
Iteration  22: 4970245.860 ops/s
Iteration  23: 4974163.427 ops/s
Iteration  24: 4974758.267 ops/s
Iteration  25: 4955798.024 ops/s
Iteration  26: 4980468.247 ops/s
Iteration  27: 4919104.440 ops/s
Iteration  28: 4961413.293 ops/s
Iteration  29: 4947883.709 ops/s
Iteration  30: 4960945.328 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_without":
  4975354.430 ±(99.9%) 12425.097 ops/s [Average]
  (min, avg, max) = (4919104.440, 4975354.430, 5008168.278), stdev = 18597.301
  CI (99.9%): [4962929.333, 4987779.526] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_without  thrpt   30  4975354.430 ± 12425.097  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1640407.012 ops/s
# Warmup Iteration   2: 3961738.345 ops/s
# Warmup Iteration   3: 4491311.319 ops/s
# Warmup Iteration   4: 4016916.649 ops/s
# Warmup Iteration   5: 4680383.746 ops/s
# Warmup Iteration   6: 4677123.664 ops/s
# Warmup Iteration   7: 4674195.798 ops/s
# Warmup Iteration   8: 4666164.008 ops/s
# Warmup Iteration   9: 4662729.342 ops/s
# Warmup Iteration  10: 4668545.826 ops/s
# Warmup Iteration  11: 4667593.511 ops/s
# Warmup Iteration  12: 4641615.984 ops/s
# Warmup Iteration  13: 4659129.258 ops/s
# Warmup Iteration  14: 4662459.063 ops/s
# Warmup Iteration  15: 4641617.840 ops/s
# Warmup Iteration  16: 4663642.085 ops/s
# Warmup Iteration  17: 4673592.534 ops/s
# Warmup Iteration  18: 4679207.126 ops/s
# Warmup Iteration  19: 4671053.873 ops/s
# Warmup Iteration  20: 4664936.950 ops/s
# Warmup Iteration  21: 4679601.375 ops/s
# Warmup Iteration  22: 4686884.275 ops/s
# Warmup Iteration  23: 4676582.186 ops/s
# Warmup Iteration  24: 4665243.753 ops/s
# Warmup Iteration  25: 4690630.152 ops/s
# Warmup Iteration  26: 4660915.850 ops/s
# Warmup Iteration  27: 4682968.282 ops/s
# Warmup Iteration  28: 4688658.645 ops/s
# Warmup Iteration  29: 4675054.163 ops/s
# Warmup Iteration  30: 4669793.998 ops/s
Iteration   1: 4682882.961 ops/s
Iteration   2: 4684547.433 ops/s
Iteration   3: 4672520.233 ops/s
Iteration   4: 4696984.534 ops/s
Iteration   5: 4676307.844 ops/s
Iteration   6: 4668304.239 ops/s
Iteration   7: 4679616.547 ops/s
Iteration   8: 4684248.862 ops/s
Iteration   9: 4696393.797 ops/s
Iteration  10: 4677425.201 ops/s
Iteration  11: 4665796.177 ops/s
Iteration  12: 4689836.722 ops/s
Iteration  13: 4692292.321 ops/s
Iteration  14: 4664961.920 ops/s
Iteration  15: 4671484.954 ops/s
Iteration  16: 4678192.209 ops/s
Iteration  17: 4679186.892 ops/s
Iteration  18: 4700171.652 ops/s
Iteration  19: 4659911.322 ops/s
Iteration  20: 4694046.627 ops/s
Iteration  21: 4678788.245 ops/s
Iteration  22: 4692673.984 ops/s
Iteration  23: 4684456.174 ops/s
Iteration  24: 4671678.750 ops/s
Iteration  25: 4688965.462 ops/s
Iteration  26: 4697964.570 ops/s
Iteration  27: 4686172.933 ops/s
Iteration  28: 4649061.456 ops/s
Iteration  29: 4661614.900 ops/s
Iteration  30: 4713749.680 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_withoutAll":
  4681341.287 ±(99.9%) 9325.607 ops/s [Average]
  (min, avg, max) = (4649061.456, 4681341.287, 4713749.680), stdev = 13958.131
  CI (99.9%): [4672015.679, 4690666.894] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
SynchronizedByteBooleanMapValuesTest._Benchmark.benchmark_withoutAll  thrpt   30  4681341.287 ± 9325.607  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 683338.529 ops/s
# Warmup Iteration   2: 746514.563 ops/s
# Warmup Iteration   3: 990288.518 ops/s
# Warmup Iteration   4: 986713.236 ops/s
# Warmup Iteration   5: 984796.299 ops/s
# Warmup Iteration   6: 987716.827 ops/s
# Warmup Iteration   7: 985953.913 ops/s
# Warmup Iteration   8: 989003.486 ops/s
# Warmup Iteration   9: 989633.686 ops/s
# Warmup Iteration  10: 853377.761 ops/s
# Warmup Iteration  11: 954259.631 ops/s
# Warmup Iteration  12: 986668.370 ops/s
# Warmup Iteration  13: 991091.126 ops/s
# Warmup Iteration  14: 988348.660 ops/s
# Warmup Iteration  15: 987021.942 ops/s
# Warmup Iteration  16: 984803.547 ops/s
# Warmup Iteration  17: 1052260.007 ops/s
# Warmup Iteration  18: 1049817.477 ops/s
# Warmup Iteration  19: 1047383.713 ops/s
# Warmup Iteration  20: 1050754.699 ops/s
# Warmup Iteration  21: 1042195.672 ops/s
# Warmup Iteration  22: 1048536.485 ops/s
# Warmup Iteration  23: 1052077.145 ops/s
# Warmup Iteration  24: 1050608.169 ops/s
# Warmup Iteration  25: 1048752.084 ops/s
# Warmup Iteration  26: 1046371.928 ops/s
# Warmup Iteration  27: 1045470.119 ops/s
# Warmup Iteration  28: 1046825.903 ops/s
# Warmup Iteration  29: 1046224.889 ops/s
# Warmup Iteration  30: 1047763.288 ops/s
Iteration   1: 1049934.874 ops/s
Iteration   2: 1050668.251 ops/s
Iteration   3: 1049969.115 ops/s
Iteration   4: 1049324.405 ops/s
Iteration   5: 1054247.973 ops/s
Iteration   6: 1046534.754 ops/s
Iteration   7: 1041543.059 ops/s
Iteration   8: 1050247.705 ops/s
Iteration   9: 1048528.070 ops/s
Iteration  10: 1048083.577 ops/s
Iteration  11: 1045329.610 ops/s
Iteration  12: 1051067.982 ops/s
Iteration  13: 1044659.453 ops/s
Iteration  14: 1050442.524 ops/s
Iteration  15: 1046390.953 ops/s
Iteration  16: 1051559.290 ops/s
Iteration  17: 1043061.529 ops/s
Iteration  18: 1049821.400 ops/s
Iteration  19: 1047914.596 ops/s
Iteration  20: 1047809.148 ops/s
Iteration  21: 1050154.853 ops/s
Iteration  22: 1046242.553 ops/s
Iteration  23: 1044961.087 ops/s
Iteration  24: 1046992.435 ops/s
Iteration  25: 1047060.392 ops/s
Iteration  26: 1042043.072 ops/s
Iteration  27: 1045207.265 ops/s
Iteration  28: 1050647.065 ops/s
Iteration  29: 1040000.075 ops/s
Iteration  30: 1051303.167 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_add":
  1047725.008 ±(99.9%) 2230.359 ops/s [Average]
  (min, avg, max) = (1040000.075, 1047725.008, 1054247.973), stdev = 3338.296
  CI (99.9%): [1045494.649, 1049955.366] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_add  thrpt   30  1047725.008 ± 2230.359  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 682306.054 ops/s
# Warmup Iteration   2: 748802.580 ops/s
# Warmup Iteration   3: 981671.072 ops/s
# Warmup Iteration   4: 982453.867 ops/s
# Warmup Iteration   5: 979770.686 ops/s
# Warmup Iteration   6: 978540.596 ops/s
# Warmup Iteration   7: 984741.745 ops/s
# Warmup Iteration   8: 982313.772 ops/s
# Warmup Iteration   9: 982264.229 ops/s
# Warmup Iteration  10: 853761.311 ops/s
# Warmup Iteration  11: 946362.359 ops/s
# Warmup Iteration  12: 984961.135 ops/s
# Warmup Iteration  13: 978183.734 ops/s
# Warmup Iteration  14: 983702.773 ops/s
# Warmup Iteration  15: 982713.897 ops/s
# Warmup Iteration  16: 981377.220 ops/s
# Warmup Iteration  17: 1038351.662 ops/s
# Warmup Iteration  18: 1035729.037 ops/s
# Warmup Iteration  19: 1039835.247 ops/s
# Warmup Iteration  20: 1041719.583 ops/s
# Warmup Iteration  21: 1034085.110 ops/s
# Warmup Iteration  22: 1039850.435 ops/s
# Warmup Iteration  23: 1040795.741 ops/s
# Warmup Iteration  24: 1038974.809 ops/s
# Warmup Iteration  25: 1033356.196 ops/s
# Warmup Iteration  26: 1041199.142 ops/s
# Warmup Iteration  27: 1037109.953 ops/s
# Warmup Iteration  28: 1036853.194 ops/s
# Warmup Iteration  29: 1040174.605 ops/s
# Warmup Iteration  30: 1042703.872 ops/s
Iteration   1: 1035680.150 ops/s
Iteration   2: 1035405.541 ops/s
Iteration   3: 1039378.356 ops/s
Iteration   4: 1037899.360 ops/s
Iteration   5: 1040573.270 ops/s
Iteration   6: 1040160.431 ops/s
Iteration   7: 1034631.437 ops/s
Iteration   8: 1035414.289 ops/s
Iteration   9: 1041043.298 ops/s
Iteration  10: 1032083.748 ops/s
Iteration  11: 1030117.263 ops/s
Iteration  12: 1039114.833 ops/s
Iteration  13: 1042102.172 ops/s
Iteration  14: 1031615.193 ops/s
Iteration  15: 1041545.306 ops/s
Iteration  16: 1037342.646 ops/s
Iteration  17: 1038732.351 ops/s
Iteration  18: 1032259.827 ops/s
Iteration  19: 1036995.944 ops/s
Iteration  20: 1036102.800 ops/s
Iteration  21: 1036259.629 ops/s
Iteration  22: 1041875.409 ops/s
Iteration  23: 1043856.088 ops/s
Iteration  24: 1034333.208 ops/s
Iteration  25: 1038071.453 ops/s
Iteration  26: 1034017.175 ops/s
Iteration  27: 1038434.995 ops/s
Iteration  28: 1039373.801 ops/s
Iteration  29: 1035574.113 ops/s
Iteration  30: 1039096.827 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_addAllArray":
  1037303.030 ±(99.9%) 2273.900 ops/s [Average]
  (min, avg, max) = (1030117.263, 1037303.030, 1043856.088), stdev = 3403.467
  CI (99.9%): [1035029.131, 1039576.930] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_addAllArray  thrpt   30  1037303.030 ± 2273.900  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 677479.972 ops/s
# Warmup Iteration   2: 745005.145 ops/s
# Warmup Iteration   3: 984331.067 ops/s
# Warmup Iteration   4: 984431.674 ops/s
# Warmup Iteration   5: 982945.164 ops/s
# Warmup Iteration   6: 981940.013 ops/s
# Warmup Iteration   7: 980490.805 ops/s
# Warmup Iteration   8: 984158.435 ops/s
# Warmup Iteration   9: 980173.349 ops/s
# Warmup Iteration  10: 856953.116 ops/s
# Warmup Iteration  11: 941369.354 ops/s
# Warmup Iteration  12: 979157.256 ops/s
# Warmup Iteration  13: 978318.350 ops/s
# Warmup Iteration  14: 978951.716 ops/s
# Warmup Iteration  15: 984189.349 ops/s
# Warmup Iteration  16: 980600.444 ops/s
# Warmup Iteration  17: 1042750.320 ops/s
# Warmup Iteration  18: 1035798.434 ops/s
# Warmup Iteration  19: 1044047.454 ops/s
# Warmup Iteration  20: 1043428.875 ops/s
# Warmup Iteration  21: 1037853.159 ops/s
# Warmup Iteration  22: 1041435.644 ops/s
# Warmup Iteration  23: 1039291.840 ops/s
# Warmup Iteration  24: 1038032.096 ops/s
# Warmup Iteration  25: 1039826.931 ops/s
# Warmup Iteration  26: 1039117.860 ops/s
# Warmup Iteration  27: 1040591.565 ops/s
# Warmup Iteration  28: 1043732.534 ops/s
# Warmup Iteration  29: 1039560.999 ops/s
# Warmup Iteration  30: 1041162.677 ops/s
Iteration   1: 1041893.043 ops/s
Iteration   2: 1042673.485 ops/s
Iteration   3: 1039358.588 ops/s
Iteration   4: 1035557.507 ops/s
Iteration   5: 1041232.541 ops/s
Iteration   6: 1041162.185 ops/s
Iteration   7: 1044185.684 ops/s
Iteration   8: 1038317.160 ops/s
Iteration   9: 1040894.072 ops/s
Iteration  10: 1033435.036 ops/s
Iteration  11: 1040594.829 ops/s
Iteration  12: 1042111.452 ops/s
Iteration  13: 1038450.168 ops/s
Iteration  14: 1044029.539 ops/s
Iteration  15: 1038051.571 ops/s
Iteration  16: 1044977.503 ops/s
Iteration  17: 1037868.663 ops/s
Iteration  18: 1043936.151 ops/s
Iteration  19: 1041492.940 ops/s
Iteration  20: 1038763.558 ops/s
Iteration  21: 1043603.187 ops/s
Iteration  22: 1039959.220 ops/s
Iteration  23: 1042061.123 ops/s
Iteration  24: 1040971.080 ops/s
Iteration  25: 1036044.143 ops/s
Iteration  26: 1039976.627 ops/s
Iteration  27: 1042067.712 ops/s
Iteration  28: 1042197.642 ops/s
Iteration  29: 1040909.877 ops/s
Iteration  30: 1038451.372 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_addAllIterable":
  1040507.589 ±(99.9%) 1807.450 ops/s [Average]
  (min, avg, max) = (1033435.036, 1040507.589, 1044977.503), stdev = 2705.306
  CI (99.9%): [1038700.139, 1042315.039] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_addAllIterable  thrpt   30  1040507.589 ± 1807.450  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1022424.154 ops/s
# Warmup Iteration   2: 2297005.109 ops/s
# Warmup Iteration   3: 2833110.914 ops/s
# Warmup Iteration   4: 3362370.932 ops/s
# Warmup Iteration   5: 3364983.946 ops/s
# Warmup Iteration   6: 3382402.562 ops/s
# Warmup Iteration   7: 3379763.515 ops/s
# Warmup Iteration   8: 3368107.508 ops/s
# Warmup Iteration   9: 3372482.467 ops/s
# Warmup Iteration  10: 3374820.953 ops/s
# Warmup Iteration  11: 3374810.580 ops/s
# Warmup Iteration  12: 3376856.284 ops/s
# Warmup Iteration  13: 3368296.564 ops/s
# Warmup Iteration  14: 3386201.736 ops/s
# Warmup Iteration  15: 3371464.764 ops/s
# Warmup Iteration  16: 3384876.344 ops/s
# Warmup Iteration  17: 3381198.510 ops/s
# Warmup Iteration  18: 3371015.182 ops/s
# Warmup Iteration  19: 3382177.704 ops/s
# Warmup Iteration  20: 3378424.170 ops/s
# Warmup Iteration  21: 3383082.375 ops/s
# Warmup Iteration  22: 3376514.637 ops/s
# Warmup Iteration  23: 3374487.180 ops/s
# Warmup Iteration  24: 3378800.102 ops/s
# Warmup Iteration  25: 3398579.008 ops/s
# Warmup Iteration  26: 3390188.458 ops/s
# Warmup Iteration  27: 3390322.237 ops/s
# Warmup Iteration  28: 3371365.227 ops/s
# Warmup Iteration  29: 3387454.750 ops/s
# Warmup Iteration  30: 3383620.193 ops/s
Iteration   1: 3382086.505 ops/s
Iteration   2: 3384088.042 ops/s
Iteration   3: 3390848.785 ops/s
Iteration   4: 3367980.759 ops/s
Iteration   5: 3357036.763 ops/s
Iteration   6: 3357128.742 ops/s
Iteration   7: 3388294.955 ops/s
Iteration   8: 3393436.118 ops/s
Iteration   9: 3381570.096 ops/s
Iteration  10: 3356696.102 ops/s
Iteration  11: 3382780.543 ops/s
Iteration  12: 3378608.304 ops/s
Iteration  13: 3366278.656 ops/s
Iteration  14: 3389799.535 ops/s
Iteration  15: 3359995.273 ops/s
Iteration  16: 3385796.007 ops/s
Iteration  17: 3381485.142 ops/s
Iteration  18: 3377423.571 ops/s
Iteration  19: 3362744.012 ops/s
Iteration  20: 3378263.022 ops/s
Iteration  21: 3363787.689 ops/s
Iteration  22: 3385609.757 ops/s
Iteration  23: 3373414.939 ops/s
Iteration  24: 3350860.502 ops/s
Iteration  25: 3382436.950 ops/s
Iteration  26: 3393689.366 ops/s
Iteration  27: 3380878.686 ops/s
Iteration  28: 3358877.298 ops/s
Iteration  29: 3379247.932 ops/s
Iteration  30: 3373003.114 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_allSatisfy":
  3375471.572 ±(99.9%) 8255.034 ops/s [Average]
  (min, avg, max) = (3350860.502, 3375471.572, 3393689.366), stdev = 12355.747
  CI (99.9%): [3367216.538, 3383726.606] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_allSatisfy  thrpt   30  3375471.572 ± 8255.034  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 846095.670 ops/s
# Warmup Iteration   2: 1969796.718 ops/s
# Warmup Iteration   3: 2794979.313 ops/s
# Warmup Iteration   4: 3346411.147 ops/s
# Warmup Iteration   5: 3340014.979 ops/s
# Warmup Iteration   6: 3341670.708 ops/s
# Warmup Iteration   7: 3336698.934 ops/s
# Warmup Iteration   8: 3343824.863 ops/s
# Warmup Iteration   9: 3354807.698 ops/s
# Warmup Iteration  10: 3344761.093 ops/s
# Warmup Iteration  11: 3336065.618 ops/s
# Warmup Iteration  12: 3340108.224 ops/s
# Warmup Iteration  13: 3330486.670 ops/s
# Warmup Iteration  14: 3335737.700 ops/s
# Warmup Iteration  15: 3346312.205 ops/s
# Warmup Iteration  16: 3334686.445 ops/s
# Warmup Iteration  17: 3339062.470 ops/s
# Warmup Iteration  18: 3345363.884 ops/s
# Warmup Iteration  19: 3336171.907 ops/s
# Warmup Iteration  20: 3346050.917 ops/s
# Warmup Iteration  21: 3342995.194 ops/s
# Warmup Iteration  22: 3351484.104 ops/s
# Warmup Iteration  23: 3368855.162 ops/s
# Warmup Iteration  24: 3345802.049 ops/s
# Warmup Iteration  25: 3347095.561 ops/s
# Warmup Iteration  26: 3354076.538 ops/s
# Warmup Iteration  27: 3326627.227 ops/s
# Warmup Iteration  28: 3347891.401 ops/s
# Warmup Iteration  29: 3355798.803 ops/s
# Warmup Iteration  30: 3348975.507 ops/s
Iteration   1: 3334947.361 ops/s
Iteration   2: 3363443.913 ops/s
Iteration   3: 3359498.452 ops/s
Iteration   4: 3350249.068 ops/s
Iteration   5: 3347803.642 ops/s
Iteration   6: 3330275.689 ops/s
Iteration   7: 3333609.443 ops/s
Iteration   8: 3333671.037 ops/s
Iteration   9: 3361048.218 ops/s
Iteration  10: 3355816.111 ops/s
Iteration  11: 3331014.092 ops/s
Iteration  12: 3351943.171 ops/s
Iteration  13: 3335800.286 ops/s
Iteration  14: 3315533.918 ops/s
Iteration  15: 3357509.646 ops/s
Iteration  16: 3353129.668 ops/s
Iteration  17: 3353130.373 ops/s
Iteration  18: 3330731.506 ops/s
Iteration  19: 3348766.228 ops/s
Iteration  20: 3353227.983 ops/s
Iteration  21: 3345270.949 ops/s
Iteration  22: 3350957.469 ops/s
Iteration  23: 3349476.839 ops/s
Iteration  24: 3351845.803 ops/s
Iteration  25: 3339263.488 ops/s
Iteration  26: 3339799.361 ops/s
Iteration  27: 3343611.522 ops/s
Iteration  28: 3347150.697 ops/s
Iteration  29: 3342348.911 ops/s
Iteration  30: 3347765.587 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_anySatisfy":
  3345288.014 ±(99.9%) 7327.539 ops/s [Average]
  (min, avg, max) = (3315533.918, 3345288.014, 3363443.913), stdev = 10967.517
  CI (99.9%): [3337960.475, 3352615.554] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_anySatisfy  thrpt   30  3345288.014 ± 7327.539  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 913296.459 ops/s
# Warmup Iteration   2: 2007274.908 ops/s
# Warmup Iteration   3: 1995338.569 ops/s
# Warmup Iteration   4: 2309534.324 ops/s
# Warmup Iteration   5: 2352536.556 ops/s
# Warmup Iteration   6: 2353648.416 ops/s
# Warmup Iteration   7: 2363067.721 ops/s
# Warmup Iteration   8: 2358678.295 ops/s
# Warmup Iteration   9: 2352706.406 ops/s
# Warmup Iteration  10: 2360644.511 ops/s
# Warmup Iteration  11: 2359581.722 ops/s
# Warmup Iteration  12: 2361943.245 ops/s
# Warmup Iteration  13: 2356017.394 ops/s
# Warmup Iteration  14: 2350742.835 ops/s
# Warmup Iteration  15: 2360537.147 ops/s
# Warmup Iteration  16: 2345629.907 ops/s
# Warmup Iteration  17: 2344665.945 ops/s
# Warmup Iteration  18: 2348038.241 ops/s
# Warmup Iteration  19: 2360646.975 ops/s
# Warmup Iteration  20: 2365375.606 ops/s
# Warmup Iteration  21: 2371295.113 ops/s
# Warmup Iteration  22: 2370569.346 ops/s
# Warmup Iteration  23: 2369238.932 ops/s
# Warmup Iteration  24: 2366479.962 ops/s
# Warmup Iteration  25: 2354971.903 ops/s
# Warmup Iteration  26: 2360028.253 ops/s
# Warmup Iteration  27: 2369301.533 ops/s
# Warmup Iteration  28: 2377297.402 ops/s
# Warmup Iteration  29: 2364808.333 ops/s
# Warmup Iteration  30: 2356912.459 ops/s
Iteration   1: 2358638.056 ops/s
Iteration   2: 2380550.757 ops/s
Iteration   3: 2354450.562 ops/s
Iteration   4: 2371695.105 ops/s
Iteration   5: 2337407.084 ops/s
Iteration   6: 2373304.433 ops/s
Iteration   7: 2355747.911 ops/s
Iteration   8: 2363394.350 ops/s
Iteration   9: 2362696.767 ops/s
Iteration  10: 2354394.906 ops/s
Iteration  11: 2366935.017 ops/s
Iteration  12: 2346012.350 ops/s
Iteration  13: 2366380.806 ops/s
Iteration  14: 2375520.700 ops/s
Iteration  15: 2358729.680 ops/s
Iteration  16: 2360558.250 ops/s
Iteration  17: 2360183.502 ops/s
Iteration  18: 2366470.681 ops/s
Iteration  19: 2377308.229 ops/s
Iteration  20: 2362175.593 ops/s
Iteration  21: 2380506.500 ops/s
Iteration  22: 2347146.186 ops/s
Iteration  23: 2377967.503 ops/s
Iteration  24: 2351576.702 ops/s
Iteration  25: 2350561.886 ops/s
Iteration  26: 2342888.662 ops/s
Iteration  27: 2353271.920 ops/s
Iteration  28: 2351033.086 ops/s
Iteration  29: 2366274.998 ops/s
Iteration  30: 2362346.828 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_appendString":
  2361204.300 ±(99.9%) 7556.221 ops/s [Average]
  (min, avg, max) = (2337407.084, 2361204.300, 2380550.757), stdev = 11309.797
  CI (99.9%): [2353648.079, 2368760.521] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_appendString  thrpt   30  2361204.300 ± 7556.221  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2713437.521 ops/s
# Warmup Iteration   2: 4934418.506 ops/s
# Warmup Iteration   3: 6431635.490 ops/s
# Warmup Iteration   4: 6403930.747 ops/s
# Warmup Iteration   5: 5389833.769 ops/s
# Warmup Iteration   6: 6440012.447 ops/s
# Warmup Iteration   7: 6435195.152 ops/s
# Warmup Iteration   8: 6463473.476 ops/s
# Warmup Iteration   9: 6446148.411 ops/s
# Warmup Iteration  10: 6459275.008 ops/s
# Warmup Iteration  11: 6459113.265 ops/s
# Warmup Iteration  12: 6436096.026 ops/s
# Warmup Iteration  13: 6444687.164 ops/s
# Warmup Iteration  14: 6437721.007 ops/s
# Warmup Iteration  15: 6449152.442 ops/s
# Warmup Iteration  16: 6427598.205 ops/s
# Warmup Iteration  17: 6471823.761 ops/s
# Warmup Iteration  18: 6459439.919 ops/s
# Warmup Iteration  19: 6454784.179 ops/s
# Warmup Iteration  20: 6442979.557 ops/s
# Warmup Iteration  21: 6457804.748 ops/s
# Warmup Iteration  22: 6450171.205 ops/s
# Warmup Iteration  23: 6424442.401 ops/s
# Warmup Iteration  24: 6478638.982 ops/s
# Warmup Iteration  25: 6446134.255 ops/s
# Warmup Iteration  26: 6430545.239 ops/s
# Warmup Iteration  27: 6459033.425 ops/s
# Warmup Iteration  28: 6457081.364 ops/s
# Warmup Iteration  29: 6426688.397 ops/s
# Warmup Iteration  30: 6459865.304 ops/s
Iteration   1: 6464189.446 ops/s
Iteration   2: 6438450.080 ops/s
Iteration   3: 6456855.652 ops/s
Iteration   4: 6494456.821 ops/s
Iteration   5: 6425228.818 ops/s
Iteration   6: 6470417.717 ops/s
Iteration   7: 6477467.134 ops/s
Iteration   8: 6435811.819 ops/s
Iteration   9: 6416609.537 ops/s
Iteration  10: 6422313.071 ops/s
Iteration  11: 6453910.421 ops/s
Iteration  12: 6438880.790 ops/s
Iteration  13: 6465302.476 ops/s
Iteration  14: 6413269.560 ops/s
Iteration  15: 6465447.120 ops/s
Iteration  16: 6472326.027 ops/s
Iteration  17: 6433649.059 ops/s
Iteration  18: 6430833.736 ops/s
Iteration  19: 6453266.870 ops/s
Iteration  20: 6448501.839 ops/s
Iteration  21: 6462757.143 ops/s
Iteration  22: 6461247.216 ops/s
Iteration  23: 6434201.599 ops/s
Iteration  24: 6425289.553 ops/s
Iteration  25: 6462095.996 ops/s
Iteration  26: 6437901.164 ops/s
Iteration  27: 6470089.479 ops/s
Iteration  28: 6450349.855 ops/s
Iteration  29: 6422914.876 ops/s
Iteration  30: 6436955.750 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_asLazy":
  6448033.021 ±(99.9%) 13571.599 ops/s [Average]
  (min, avg, max) = (6413269.560, 6448033.021, 6494456.821), stdev = 20313.332
  CI (99.9%): [6434461.422, 6461604.620] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_asLazy  thrpt   30  6448033.021 ± 13571.599  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3500310.520 ops/s
# Warmup Iteration   2: 7580442.602 ops/s
# Warmup Iteration   3: 8780739.082 ops/s
# Warmup Iteration   4: 10404342.036 ops/s
# Warmup Iteration   5: 10424690.568 ops/s
# Warmup Iteration   6: 10413901.657 ops/s
# Warmup Iteration   7: 10418156.011 ops/s
# Warmup Iteration   8: 10356582.245 ops/s
# Warmup Iteration   9: 10393653.180 ops/s
# Warmup Iteration  10: 10361470.930 ops/s
# Warmup Iteration  11: 10406040.408 ops/s
# Warmup Iteration  12: 10396399.273 ops/s
# Warmup Iteration  13: 10416356.890 ops/s
# Warmup Iteration  14: 10406225.681 ops/s
# Warmup Iteration  15: 10425720.307 ops/s
# Warmup Iteration  16: 10386171.718 ops/s
# Warmup Iteration  17: 10392584.616 ops/s
# Warmup Iteration  18: 10373166.592 ops/s
# Warmup Iteration  19: 10418356.663 ops/s
# Warmup Iteration  20: 10417019.485 ops/s
# Warmup Iteration  21: 10423909.749 ops/s
# Warmup Iteration  22: 10454952.329 ops/s
# Warmup Iteration  23: 10357887.025 ops/s
# Warmup Iteration  24: 10362951.101 ops/s
# Warmup Iteration  25: 10377319.620 ops/s
# Warmup Iteration  26: 10415598.502 ops/s
# Warmup Iteration  27: 10339488.226 ops/s
# Warmup Iteration  28: 10337818.126 ops/s
# Warmup Iteration  29: 10338211.700 ops/s
# Warmup Iteration  30: 10370668.912 ops/s
Iteration   1: 10296456.963 ops/s
Iteration   2: 10403267.304 ops/s
Iteration   3: 10348917.246 ops/s
Iteration   4: 10416146.556 ops/s
Iteration   5: 10410402.146 ops/s
Iteration   6: 10397522.078 ops/s
Iteration   7: 10437659.128 ops/s
Iteration   8: 10446921.753 ops/s
Iteration   9: 10409426.825 ops/s
Iteration  10: 10466002.416 ops/s
Iteration  11: 10416558.866 ops/s
Iteration  12: 10392480.852 ops/s
Iteration  13: 10444219.475 ops/s
Iteration  14: 10409503.505 ops/s
Iteration  15: 10393467.372 ops/s
Iteration  16: 10389700.861 ops/s
Iteration  17: 10383984.150 ops/s
Iteration  18: 10379576.692 ops/s
Iteration  19: 10351267.110 ops/s
Iteration  20: 10427709.231 ops/s
Iteration  21: 10406578.016 ops/s
Iteration  22: 10240050.515 ops/s
Iteration  23: 10474822.843 ops/s
Iteration  24: 10438235.205 ops/s
Iteration  25: 10438881.307 ops/s
Iteration  26: 10345897.281 ops/s
Iteration  27: 10497267.926 ops/s
Iteration  28: 10323695.554 ops/s
Iteration  29: 10448850.730 ops/s
Iteration  30: 10452661.352 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_asSynchronized":
  10402937.709 ±(99.9%) 36263.069 ops/s [Average]
  (min, avg, max) = (10240050.515, 10402937.709, 10497267.926), stdev = 54276.858
  CI (99.9%): [10366674.640, 10439200.777] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_asSynchronized  thrpt   30  10402937.709 ± 36263.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3548669.893 ops/s
# Warmup Iteration   2: 7657202.676 ops/s
# Warmup Iteration   3: 8940294.001 ops/s
# Warmup Iteration   4: 10429202.240 ops/s
# Warmup Iteration   5: 10518622.811 ops/s
# Warmup Iteration   6: 10545401.262 ops/s
# Warmup Iteration   7: 10579378.648 ops/s
# Warmup Iteration   8: 10556808.277 ops/s
# Warmup Iteration   9: 10521244.291 ops/s
# Warmup Iteration  10: 10578374.039 ops/s
# Warmup Iteration  11: 10583147.488 ops/s
# Warmup Iteration  12: 10499534.934 ops/s
# Warmup Iteration  13: 10457487.979 ops/s
# Warmup Iteration  14: 10525084.049 ops/s
# Warmup Iteration  15: 10322341.986 ops/s
# Warmup Iteration  16: 10487260.411 ops/s
# Warmup Iteration  17: 10322543.876 ops/s
# Warmup Iteration  18: 10384113.884 ops/s
# Warmup Iteration  19: 10502134.800 ops/s
# Warmup Iteration  20: 10424753.734 ops/s
# Warmup Iteration  21: 10496389.514 ops/s
# Warmup Iteration  22: 10441254.982 ops/s
# Warmup Iteration  23: 10476272.409 ops/s
# Warmup Iteration  24: 10466214.724 ops/s
# Warmup Iteration  25: 10443043.586 ops/s
# Warmup Iteration  26: 10471125.540 ops/s
# Warmup Iteration  27: 10370554.712 ops/s
# Warmup Iteration  28: 10487074.296 ops/s
# Warmup Iteration  29: 10380664.494 ops/s
# Warmup Iteration  30: 10231137.725 ops/s
Iteration   1: 10426317.748 ops/s
Iteration   2: 10444829.290 ops/s
Iteration   3: 10349631.632 ops/s
Iteration   4: 10212394.165 ops/s
Iteration   5: 10409065.111 ops/s
Iteration   6: 10478570.733 ops/s
Iteration   7: 10468813.296 ops/s
Iteration   8: 10481333.765 ops/s
Iteration   9: 10537154.795 ops/s
Iteration  10: 10539276.232 ops/s
Iteration  11: 10552130.807 ops/s
Iteration  12: 10495247.747 ops/s
Iteration  13: 10521185.317 ops/s
Iteration  14: 10539506.063 ops/s
Iteration  15: 10530677.470 ops/s
Iteration  16: 10517729.447 ops/s
Iteration  17: 10468998.557 ops/s
Iteration  18: 10570073.997 ops/s
Iteration  19: 10482359.117 ops/s
Iteration  20: 10528443.719 ops/s
Iteration  21: 10489666.971 ops/s
Iteration  22: 10492421.318 ops/s
Iteration  23: 10472100.503 ops/s
Iteration  24: 10598218.370 ops/s
Iteration  25: 10574124.738 ops/s
Iteration  26: 10528895.888 ops/s
Iteration  27: 10571730.533 ops/s
Iteration  28: 10555759.815 ops/s
Iteration  29: 10556109.784 ops/s
Iteration  30: 10638833.869 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable":
  10501053.360 ±(99.9%) 53698.018 ops/s [Average]
  (min, avg, max) = (10212394.165, 10501053.360, 10638833.869), stdev = 80372.671
  CI (99.9%): [10447355.342, 10554751.378] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  10501053.360 ± 53698.018  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4606651.508 ops/s
# Warmup Iteration   2: 10654009.926 ops/s
# Warmup Iteration   3: 8742997.801 ops/s
# Warmup Iteration   4: 10339983.658 ops/s
# Warmup Iteration   5: 10354258.097 ops/s
# Warmup Iteration   6: 10371705.773 ops/s
# Warmup Iteration   7: 10372498.932 ops/s
# Warmup Iteration   8: 10371718.250 ops/s
# Warmup Iteration   9: 10373963.442 ops/s
# Warmup Iteration  10: 10343348.053 ops/s
# Warmup Iteration  11: 10367899.254 ops/s
# Warmup Iteration  12: 10422207.654 ops/s
# Warmup Iteration  13: 10411594.861 ops/s
# Warmup Iteration  14: 10384706.006 ops/s
# Warmup Iteration  15: 10383595.732 ops/s
# Warmup Iteration  16: 10376816.244 ops/s
# Warmup Iteration  17: 10371774.094 ops/s
# Warmup Iteration  18: 10377085.219 ops/s
# Warmup Iteration  19: 10364161.783 ops/s
# Warmup Iteration  20: 10359115.011 ops/s
# Warmup Iteration  21: 10404556.432 ops/s
# Warmup Iteration  22: 10367587.778 ops/s
# Warmup Iteration  23: 10402766.189 ops/s
# Warmup Iteration  24: 10418271.160 ops/s
# Warmup Iteration  25: 10410657.616 ops/s
# Warmup Iteration  26: 10331025.208 ops/s
# Warmup Iteration  27: 10355172.871 ops/s
# Warmup Iteration  28: 10381990.348 ops/s
# Warmup Iteration  29: 10407187.397 ops/s
# Warmup Iteration  30: 10376709.141 ops/s
Iteration   1: 10403481.700 ops/s
Iteration   2: 10340545.874 ops/s
Iteration   3: 10360785.110 ops/s
Iteration   4: 10339155.283 ops/s
Iteration   5: 10299198.130 ops/s
Iteration   6: 10343171.143 ops/s
Iteration   7: 10305887.540 ops/s
Iteration   8: 10362231.309 ops/s
Iteration   9: 10285984.870 ops/s
Iteration  10: 10314474.196 ops/s
Iteration  11: 10307608.312 ops/s
Iteration  12: 10223066.097 ops/s
Iteration  13: 10310596.298 ops/s
Iteration  14: 10322800.116 ops/s
Iteration  15: 10297341.160 ops/s
Iteration  16: 10223021.117 ops/s
Iteration  17: 10257972.182 ops/s
Iteration  18: 10262913.126 ops/s
Iteration  19: 10308149.826 ops/s
Iteration  20: 10228718.553 ops/s
Iteration  21: 10339524.767 ops/s
Iteration  22: 10295265.405 ops/s
Iteration  23: 10334073.365 ops/s
Iteration  24: 10340907.174 ops/s
Iteration  25: 10330135.340 ops/s
Iteration  26: 10250075.559 ops/s
Iteration  27: 10324166.654 ops/s
Iteration  28: 10340836.882 ops/s
Iteration  29: 10335865.756 ops/s
Iteration  30: 10305515.442 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_booleanIterator":
  10309782.276 ±(99.9%) 28590.632 ops/s [Average]
  (min, avg, max) = (10223021.117, 10309782.276, 10403481.700), stdev = 42793.116
  CI (99.9%): [10281191.644, 10338372.909] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_booleanIterator  thrpt   30  10309782.276 ± 28590.632  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 520056.447 ops/s
# Warmup Iteration   2: 714231.933 ops/s
# Warmup Iteration   3: 855198.170 ops/s
# Warmup Iteration   4: 856885.468 ops/s
# Warmup Iteration   5: 857256.433 ops/s
# Warmup Iteration   6: 854195.258 ops/s
# Warmup Iteration   7: 827662.741 ops/s
# Warmup Iteration   8: 755119.540 ops/s
# Warmup Iteration   9: 853041.488 ops/s
# Warmup Iteration  10: 848240.873 ops/s
# Warmup Iteration  11: 861965.801 ops/s
# Warmup Iteration  12: 857950.438 ops/s
# Warmup Iteration  13: 854497.902 ops/s
# Warmup Iteration  14: 860341.166 ops/s
# Warmup Iteration  15: 859126.851 ops/s
# Warmup Iteration  16: 858271.988 ops/s
# Warmup Iteration  17: 901927.217 ops/s
# Warmup Iteration  18: 898582.641 ops/s
# Warmup Iteration  19: 899620.588 ops/s
# Warmup Iteration  20: 895275.551 ops/s
# Warmup Iteration  21: 906568.105 ops/s
# Warmup Iteration  22: 897620.787 ops/s
# Warmup Iteration  23: 901745.717 ops/s
# Warmup Iteration  24: 899206.982 ops/s
# Warmup Iteration  25: 906889.667 ops/s
# Warmup Iteration  26: 903710.780 ops/s
# Warmup Iteration  27: 904716.887 ops/s
# Warmup Iteration  28: 900661.042 ops/s
# Warmup Iteration  29: 902704.368 ops/s
# Warmup Iteration  30: 900741.900 ops/s
Iteration   1: 900688.149 ops/s
Iteration   2: 894364.175 ops/s
Iteration   3: 906059.617 ops/s
Iteration   4: 897852.405 ops/s
Iteration   5: 894637.648 ops/s
Iteration   6: 901933.886 ops/s
Iteration   7: 896759.863 ops/s
Iteration   8: 901240.484 ops/s
Iteration   9: 906155.627 ops/s
Iteration  10: 905003.797 ops/s
Iteration  11: 901646.978 ops/s
Iteration  12: 901659.915 ops/s
Iteration  13: 900206.114 ops/s
Iteration  14: 899300.763 ops/s
Iteration  15: 902785.381 ops/s
Iteration  16: 896712.157 ops/s
Iteration  17: 899047.390 ops/s
Iteration  18: 889829.870 ops/s
Iteration  19: 897017.876 ops/s
Iteration  20: 899401.487 ops/s
Iteration  21: 898572.658 ops/s
Iteration  22: 905975.787 ops/s
Iteration  23: 899719.745 ops/s
Iteration  24: 901537.977 ops/s
Iteration  25: 905412.541 ops/s
Iteration  26: 900792.049 ops/s
Iteration  27: 903587.400 ops/s
Iteration  28: 901175.663 ops/s
Iteration  29: 887345.827 ops/s
Iteration  30: 899473.771 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove":
  899863.233 ±(99.9%) 2944.814 ops/s [Average]
  (min, avg, max) = (887345.827, 899863.233, 906155.627), stdev = 4407.660
  CI (99.9%): [896918.419, 902808.048] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score      Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  899863.233 ± 2944.814  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 133070.447 ops/s
# Warmup Iteration   2: 217986.255 ops/s
# Warmup Iteration   3: 255368.933 ops/s
# Warmup Iteration   4: 262013.475 ops/s
# Warmup Iteration   5: 262024.350 ops/s
# Warmup Iteration   6: 220267.059 ops/s
# Warmup Iteration   7: 257055.626 ops/s
# Warmup Iteration   8: 260737.763 ops/s
# Warmup Iteration   9: 261160.482 ops/s
# Warmup Iteration  10: 261518.184 ops/s
# Warmup Iteration  11: 259713.981 ops/s
# Warmup Iteration  12: 261403.566 ops/s
# Warmup Iteration  13: 260588.700 ops/s
# Warmup Iteration  14: 257397.001 ops/s
# Warmup Iteration  15: 257669.800 ops/s
# Warmup Iteration  16: 259206.146 ops/s
# Warmup Iteration  17: 269244.972 ops/s
# Warmup Iteration  18: 269426.564 ops/s
# Warmup Iteration  19: 268776.602 ops/s
# Warmup Iteration  20: 268548.819 ops/s
# Warmup Iteration  21: 268522.058 ops/s
# Warmup Iteration  22: 266249.279 ops/s
# Warmup Iteration  23: 268675.743 ops/s
# Warmup Iteration  24: 267931.407 ops/s
# Warmup Iteration  25: 269094.452 ops/s
# Warmup Iteration  26: 268886.427 ops/s
# Warmup Iteration  27: 269866.787 ops/s
# Warmup Iteration  28: 267010.107 ops/s
# Warmup Iteration  29: 269695.610 ops/s
# Warmup Iteration  30: 267286.935 ops/s
Iteration   1: 269266.886 ops/s
Iteration   2: 269361.699 ops/s
Iteration   3: 266719.169 ops/s
Iteration   4: 269682.110 ops/s
Iteration   5: 266316.140 ops/s
Iteration   6: 265004.380 ops/s
Iteration   7: 268809.138 ops/s
Iteration   8: 269507.705 ops/s
Iteration   9: 268257.043 ops/s
Iteration  10: 269022.040 ops/s
Iteration  11: 268029.593 ops/s
Iteration  12: 269443.765 ops/s
Iteration  13: 270537.000 ops/s
Iteration  14: 269545.895 ops/s
Iteration  15: 268124.173 ops/s
Iteration  16: 269063.491 ops/s
Iteration  17: 270401.806 ops/s
Iteration  18: 268880.463 ops/s
Iteration  19: 269552.242 ops/s
Iteration  20: 268496.495 ops/s
Iteration  21: 268230.378 ops/s
Iteration  22: 269996.304 ops/s
Iteration  23: 266517.845 ops/s
Iteration  24: 265059.682 ops/s
Iteration  25: 269146.801 ops/s
Iteration  26: 268185.381 ops/s
Iteration  27: 265691.569 ops/s
Iteration  28: 269092.442 ops/s
Iteration  29: 269036.974 ops/s
Iteration  30: 267756.143 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_chunk":
  268424.492 ±(99.9%) 988.764 ops/s [Average]
  (min, avg, max) = (265004.380, 268424.492, 270537.000), stdev = 1479.935
  CI (99.9%): [267435.728, 269413.255] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_chunk  thrpt   30  268424.492 ± 988.764  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4109692.643 ops/s
# Warmup Iteration   2: 7270874.609 ops/s
# Warmup Iteration   3: 8482307.451 ops/s
# Warmup Iteration   4: 8536642.269 ops/s
# Warmup Iteration   5: 8519581.775 ops/s
# Warmup Iteration   6: 8644811.973 ops/s
# Warmup Iteration   7: 8597282.523 ops/s
# Warmup Iteration   8: 8600660.708 ops/s
# Warmup Iteration   9: 8594197.706 ops/s
# Warmup Iteration  10: 8618871.674 ops/s
# Warmup Iteration  11: 8583081.151 ops/s
# Warmup Iteration  12: 8624558.373 ops/s
# Warmup Iteration  13: 8631829.282 ops/s
# Warmup Iteration  14: 8524664.432 ops/s
# Warmup Iteration  15: 8570882.064 ops/s
# Warmup Iteration  16: 8533791.518 ops/s
# Warmup Iteration  17: 8619122.987 ops/s
# Warmup Iteration  18: 8648815.965 ops/s
# Warmup Iteration  19: 8604611.445 ops/s
# Warmup Iteration  20: 8603285.282 ops/s
# Warmup Iteration  21: 8628561.832 ops/s
# Warmup Iteration  22: 8578088.736 ops/s
# Warmup Iteration  23: 8580630.121 ops/s
# Warmup Iteration  24: 8517312.586 ops/s
# Warmup Iteration  25: 8555768.073 ops/s
# Warmup Iteration  26: 8594128.146 ops/s
# Warmup Iteration  27: 8604017.618 ops/s
# Warmup Iteration  28: 8492419.437 ops/s
# Warmup Iteration  29: 8510669.642 ops/s
# Warmup Iteration  30: 8395238.908 ops/s
Iteration   1: 8519146.610 ops/s
Iteration   2: 8498918.998 ops/s
Iteration   3: 8562182.144 ops/s
Iteration   4: 8540477.895 ops/s
Iteration   5: 8632792.557 ops/s
Iteration   6: 8592391.486 ops/s
Iteration   7: 8580037.301 ops/s
Iteration   8: 8593847.663 ops/s
Iteration   9: 8510755.145 ops/s
Iteration  10: 8546889.862 ops/s
Iteration  11: 8587754.550 ops/s
Iteration  12: 8542807.818 ops/s
Iteration  13: 8559193.330 ops/s
Iteration  14: 8592019.825 ops/s
Iteration  15: 8590796.888 ops/s
Iteration  16: 8577192.434 ops/s
Iteration  17: 8610569.366 ops/s
Iteration  18: 8648355.341 ops/s
Iteration  19: 8529814.383 ops/s
Iteration  20: 8571211.871 ops/s
Iteration  21: 8660009.048 ops/s
Iteration  22: 8511222.650 ops/s
Iteration  23: 8581892.164 ops/s
Iteration  24: 8624561.633 ops/s
Iteration  25: 8520349.899 ops/s
Iteration  26: 8502985.388 ops/s
Iteration  27: 8623800.746 ops/s
Iteration  28: 8606424.553 ops/s
Iteration  29: 8605462.285 ops/s
Iteration  30: 8575423.829 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_clear":
  8573309.589 ±(99.9%) 29380.704 ops/s [Average]
  (min, avg, max) = (8498918.998, 8573309.589, 8660009.048), stdev = 43975.658
  CI (99.9%): [8543928.885, 8602690.293] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_clear  thrpt   30  8573309.589 ± 29380.704  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 662223.151 ops/s
# Warmup Iteration   2: 1663671.406 ops/s
# Warmup Iteration   3: 1781129.683 ops/s
# Warmup Iteration   4: 1474252.156 ops/s
# Warmup Iteration   5: 1776137.200 ops/s
# Warmup Iteration   6: 1779527.112 ops/s
# Warmup Iteration   7: 1773053.448 ops/s
# Warmup Iteration   8: 1788637.814 ops/s
# Warmup Iteration   9: 1794875.136 ops/s
# Warmup Iteration  10: 1792405.160 ops/s
# Warmup Iteration  11: 1792528.856 ops/s
# Warmup Iteration  12: 1785293.372 ops/s
# Warmup Iteration  13: 1786621.484 ops/s
# Warmup Iteration  14: 1791595.378 ops/s
# Warmup Iteration  15: 1764186.348 ops/s
# Warmup Iteration  16: 1780128.793 ops/s
# Warmup Iteration  17: 1790668.995 ops/s
# Warmup Iteration  18: 1787848.537 ops/s
# Warmup Iteration  19: 1791388.532 ops/s
# Warmup Iteration  20: 1779301.197 ops/s
# Warmup Iteration  21: 1793789.820 ops/s
# Warmup Iteration  22: 1791977.394 ops/s
# Warmup Iteration  23: 1784698.758 ops/s
# Warmup Iteration  24: 1788858.140 ops/s
# Warmup Iteration  25: 1794831.115 ops/s
# Warmup Iteration  26: 1783996.980 ops/s
# Warmup Iteration  27: 1788553.614 ops/s
# Warmup Iteration  28: 1776106.805 ops/s
# Warmup Iteration  29: 1790257.545 ops/s
# Warmup Iteration  30: 1790268.743 ops/s
Iteration   1: 1786692.496 ops/s
Iteration   2: 1792631.649 ops/s
Iteration   3: 1790232.511 ops/s
Iteration   4: 1732508.802 ops/s
Iteration   5: 1802594.323 ops/s
Iteration   6: 1800433.746 ops/s
Iteration   7: 1793670.779 ops/s
Iteration   8: 1795531.072 ops/s
Iteration   9: 1793748.246 ops/s
Iteration  10: 1791701.251 ops/s
Iteration  11: 1784278.170 ops/s
Iteration  12: 1798406.137 ops/s
Iteration  13: 1788875.232 ops/s
Iteration  14: 1786098.564 ops/s
Iteration  15: 1755988.295 ops/s
Iteration  16: 1789226.963 ops/s
Iteration  17: 1794661.042 ops/s
Iteration  18: 1797255.075 ops/s
Iteration  19: 1789111.622 ops/s
Iteration  20: 1797997.435 ops/s
Iteration  21: 1790879.147 ops/s
Iteration  22: 1779997.934 ops/s
Iteration  23: 1791152.299 ops/s
Iteration  24: 1791133.485 ops/s
Iteration  25: 1789678.005 ops/s
Iteration  26: 1790291.625 ops/s
Iteration  27: 1788525.689 ops/s
Iteration  28: 1790548.166 ops/s
Iteration  29: 1795463.398 ops/s
Iteration  30: 1787843.643 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_collect":
  1788571.893 ±(99.9%) 8901.161 ops/s [Average]
  (min, avg, max) = (1732508.802, 1788571.893, 1802594.323), stdev = 13322.840
  CI (99.9%): [1779670.732, 1797473.054] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_collect  thrpt   30  1788571.893 ± 8901.161  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1764010.999 ops/s
# Warmup Iteration   2: 3846648.720 ops/s
# Warmup Iteration   3: 4780622.118 ops/s
# Warmup Iteration   4: 5687848.196 ops/s
# Warmup Iteration   5: 5677494.514 ops/s
# Warmup Iteration   6: 5623381.453 ops/s
# Warmup Iteration   7: 5678721.311 ops/s
# Warmup Iteration   8: 5661826.183 ops/s
# Warmup Iteration   9: 5671655.136 ops/s
# Warmup Iteration  10: 5680865.869 ops/s
# Warmup Iteration  11: 5669751.416 ops/s
# Warmup Iteration  12: 5647041.956 ops/s
# Warmup Iteration  13: 5668983.262 ops/s
# Warmup Iteration  14: 5684247.732 ops/s
# Warmup Iteration  15: 5666203.888 ops/s
# Warmup Iteration  16: 5664625.872 ops/s
# Warmup Iteration  17: 5659931.943 ops/s
# Warmup Iteration  18: 5626381.313 ops/s
# Warmup Iteration  19: 5639563.038 ops/s
# Warmup Iteration  20: 5688954.324 ops/s
# Warmup Iteration  21: 5629861.932 ops/s
# Warmup Iteration  22: 5635054.188 ops/s
# Warmup Iteration  23: 5645369.175 ops/s
# Warmup Iteration  24: 5688834.654 ops/s
# Warmup Iteration  25: 5692915.870 ops/s
# Warmup Iteration  26: 5639119.523 ops/s
# Warmup Iteration  27: 5642972.036 ops/s
# Warmup Iteration  28: 5684966.604 ops/s
# Warmup Iteration  29: 5669933.254 ops/s
# Warmup Iteration  30: 5688852.330 ops/s
Iteration   1: 5711192.950 ops/s
Iteration   2: 5688751.923 ops/s
Iteration   3: 5621346.383 ops/s
Iteration   4: 5637988.566 ops/s
Iteration   5: 5683652.288 ops/s
Iteration   6: 5699011.811 ops/s
Iteration   7: 5718996.367 ops/s
Iteration   8: 5674205.895 ops/s
Iteration   9: 5708665.933 ops/s
Iteration  10: 5698512.419 ops/s
Iteration  11: 5613713.043 ops/s
Iteration  12: 5679741.732 ops/s
Iteration  13: 5669097.647 ops/s
Iteration  14: 5670810.018 ops/s
Iteration  15: 5683128.219 ops/s
Iteration  16: 5692945.111 ops/s
Iteration  17: 5688888.828 ops/s
Iteration  18: 5699346.577 ops/s
Iteration  19: 5706833.534 ops/s
Iteration  20: 5520874.421 ops/s
Iteration  21: 5688152.986 ops/s
Iteration  22: 5656025.247 ops/s
Iteration  23: 5703066.275 ops/s
Iteration  24: 5678890.860 ops/s
Iteration  25: 5675976.584 ops/s
Iteration  26: 5673650.578 ops/s
Iteration  27: 5671021.865 ops/s
Iteration  28: 5678456.599 ops/s
Iteration  29: 5572294.422 ops/s
Iteration  30: 5684666.732 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_contains":
  5671663.527 ±(99.9%) 28146.380 ops/s [Average]
  (min, avg, max) = (5520874.421, 5671663.527, 5718996.367), stdev = 42128.180
  CI (99.9%): [5643517.147, 5699809.907] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_contains  thrpt   30  5671663.527 ± 28146.380  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6096395.849 ops/s
# Warmup Iteration   2: 12541159.577 ops/s
# Warmup Iteration   3: 11329684.186 ops/s
# Warmup Iteration   4: 13046004.597 ops/s
# Warmup Iteration   5: 13036081.359 ops/s
# Warmup Iteration   6: 13019279.150 ops/s
# Warmup Iteration   7: 12784771.530 ops/s
# Warmup Iteration   8: 13017138.552 ops/s
# Warmup Iteration   9: 12908868.708 ops/s
# Warmup Iteration  10: 12955074.181 ops/s
# Warmup Iteration  11: 12903164.760 ops/s
# Warmup Iteration  12: 12909852.216 ops/s
# Warmup Iteration  13: 12954927.914 ops/s
# Warmup Iteration  14: 13049752.491 ops/s
# Warmup Iteration  15: 12920111.810 ops/s
# Warmup Iteration  16: 12960245.138 ops/s
# Warmup Iteration  17: 12922311.767 ops/s
# Warmup Iteration  18: 12979436.108 ops/s
# Warmup Iteration  19: 12996722.412 ops/s
# Warmup Iteration  20: 13064170.069 ops/s
# Warmup Iteration  21: 13024911.698 ops/s
# Warmup Iteration  22: 13030211.868 ops/s
# Warmup Iteration  23: 12893117.508 ops/s
# Warmup Iteration  24: 12886511.393 ops/s
# Warmup Iteration  25: 12997731.196 ops/s
# Warmup Iteration  26: 12998607.902 ops/s
# Warmup Iteration  27: 13026904.149 ops/s
# Warmup Iteration  28: 12978880.091 ops/s
# Warmup Iteration  29: 12990341.852 ops/s
# Warmup Iteration  30: 13062325.020 ops/s
Iteration   1: 13120301.213 ops/s
Iteration   2: 12840380.779 ops/s
Iteration   3: 13016776.256 ops/s
Iteration   4: 13075082.596 ops/s
Iteration   5: 13106008.560 ops/s
Iteration   6: 13026797.485 ops/s
Iteration   7: 12941556.633 ops/s
Iteration   8: 13137635.535 ops/s
Iteration   9: 13060575.080 ops/s
Iteration  10: 13059568.400 ops/s
Iteration  11: 13060572.231 ops/s
Iteration  12: 13028442.857 ops/s
Iteration  13: 12974105.641 ops/s
Iteration  14: 13051642.694 ops/s
Iteration  15: 13060636.724 ops/s
Iteration  16: 13100735.976 ops/s
Iteration  17: 13116793.986 ops/s
Iteration  18: 12971711.125 ops/s
Iteration  19: 13047760.669 ops/s
Iteration  20: 13057460.111 ops/s
Iteration  21: 12898552.666 ops/s
Iteration  22: 13005463.909 ops/s
Iteration  23: 13066017.877 ops/s
Iteration  24: 12505811.495 ops/s
Iteration  25: 12868357.965 ops/s
Iteration  26: 13053887.399 ops/s
Iteration  27: 12923929.593 ops/s
Iteration  28: 12837856.574 ops/s
Iteration  29: 12938650.834 ops/s
Iteration  30: 13010107.036 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsAllArray":
  12998772.663 ±(99.9%) 82678.208 ops/s [Average]
  (min, avg, max) = (12505811.495, 12998772.663, 13137635.535), stdev = 123748.858
  CI (99.9%): [12916094.456, 13081450.871] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt         Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsAllArray  thrpt   30  12998772.663 ± 82678.208  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3870300.240 ops/s
# Warmup Iteration   2: 7973228.531 ops/s
# Warmup Iteration   3: 7872027.798 ops/s
# Warmup Iteration   4: 8533367.331 ops/s
# Warmup Iteration   5: 8639682.243 ops/s
# Warmup Iteration   6: 8679722.932 ops/s
# Warmup Iteration   7: 8617299.777 ops/s
# Warmup Iteration   8: 8651354.561 ops/s
# Warmup Iteration   9: 8637460.042 ops/s
# Warmup Iteration  10: 8662240.171 ops/s
# Warmup Iteration  11: 8492634.334 ops/s
# Warmup Iteration  12: 8545420.565 ops/s
# Warmup Iteration  13: 8679917.415 ops/s
# Warmup Iteration  14: 8665908.727 ops/s
# Warmup Iteration  15: 8689488.062 ops/s
# Warmup Iteration  16: 8701652.686 ops/s
# Warmup Iteration  17: 8653555.682 ops/s
# Warmup Iteration  18: 8633543.232 ops/s
# Warmup Iteration  19: 8644431.192 ops/s
# Warmup Iteration  20: 8626710.383 ops/s
# Warmup Iteration  21: 8611831.947 ops/s
# Warmup Iteration  22: 8648388.585 ops/s
# Warmup Iteration  23: 8608575.226 ops/s
# Warmup Iteration  24: 8614788.036 ops/s
# Warmup Iteration  25: 8637394.075 ops/s
# Warmup Iteration  26: 8633683.046 ops/s
# Warmup Iteration  27: 8577298.309 ops/s
# Warmup Iteration  28: 8671811.174 ops/s
# Warmup Iteration  29: 8674443.926 ops/s
# Warmup Iteration  30: 8653263.760 ops/s
Iteration   1: 8630685.510 ops/s
Iteration   2: 8693751.350 ops/s
Iteration   3: 8531603.184 ops/s
Iteration   4: 8668581.481 ops/s
Iteration   5: 8637049.969 ops/s
Iteration   6: 8580848.708 ops/s
Iteration   7: 8507937.154 ops/s
Iteration   8: 8673492.750 ops/s
Iteration   9: 8645585.179 ops/s
Iteration  10: 8651704.474 ops/s
Iteration  11: 8699184.642 ops/s
Iteration  12: 8628421.134 ops/s
Iteration  13: 8664146.995 ops/s
Iteration  14: 8534079.863 ops/s
Iteration  15: 8683333.446 ops/s
Iteration  16: 8629784.453 ops/s
Iteration  17: 8590455.367 ops/s
Iteration  18: 8649824.982 ops/s
Iteration  19: 8590315.123 ops/s
Iteration  20: 8632049.861 ops/s
Iteration  21: 8593902.115 ops/s
Iteration  22: 8626312.644 ops/s
Iteration  23: 8604313.846 ops/s
Iteration  24: 8667323.381 ops/s
Iteration  25: 8650098.561 ops/s
Iteration  26: 8516918.739 ops/s
Iteration  27: 8655769.494 ops/s
Iteration  28: 8651187.490 ops/s
Iteration  29: 8642017.321 ops/s
Iteration  30: 8638331.765 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable":
  8625633.699 ±(99.9%) 33762.543 ops/s [Average]
  (min, avg, max) = (8507937.154, 8625633.699, 8699184.642), stdev = 50534.189
  CI (99.9%): [8591871.156, 8659396.243] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable  thrpt   30  8625633.699 ± 33762.543  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1090549.010 ops/s
# Warmup Iteration   2: 2251987.801 ops/s
# Warmup Iteration   3: 4740356.739 ops/s
# Warmup Iteration   4: 3929631.506 ops/s
# Warmup Iteration   5: 4728909.076 ops/s
# Warmup Iteration   6: 4744674.104 ops/s
# Warmup Iteration   7: 4776954.429 ops/s
# Warmup Iteration   8: 4788845.284 ops/s
# Warmup Iteration   9: 4777511.791 ops/s
# Warmup Iteration  10: 4761088.063 ops/s
# Warmup Iteration  11: 4715225.627 ops/s
# Warmup Iteration  12: 4755707.770 ops/s
# Warmup Iteration  13: 4756608.534 ops/s
# Warmup Iteration  14: 4726023.928 ops/s
# Warmup Iteration  15: 4760676.584 ops/s
# Warmup Iteration  16: 4770095.813 ops/s
# Warmup Iteration  17: 4772547.169 ops/s
# Warmup Iteration  18: 4774989.947 ops/s
# Warmup Iteration  19: 4757861.795 ops/s
# Warmup Iteration  20: 4723776.826 ops/s
# Warmup Iteration  21: 4761241.782 ops/s
# Warmup Iteration  22: 4793324.720 ops/s
# Warmup Iteration  23: 4735616.537 ops/s
# Warmup Iteration  24: 4729809.722 ops/s
# Warmup Iteration  25: 4768927.648 ops/s
# Warmup Iteration  26: 4770268.625 ops/s
# Warmup Iteration  27: 4773662.658 ops/s
# Warmup Iteration  28: 4778534.216 ops/s
# Warmup Iteration  29: 4794956.192 ops/s
# Warmup Iteration  30: 4728473.826 ops/s
Iteration   1: 4755613.906 ops/s
Iteration   2: 4767863.545 ops/s
Iteration   3: 4746598.315 ops/s
Iteration   4: 4750182.335 ops/s
Iteration   5: 4753356.416 ops/s
Iteration   6: 4688787.031 ops/s
Iteration   7: 4757363.017 ops/s
Iteration   8: 4795682.281 ops/s
Iteration   9: 4778619.481 ops/s
Iteration  10: 4771731.437 ops/s
Iteration  11: 4770017.920 ops/s
Iteration  12: 4765481.341 ops/s
Iteration  13: 4769145.476 ops/s
Iteration  14: 4678227.145 ops/s
Iteration  15: 4740922.992 ops/s
Iteration  16: 4781311.629 ops/s
Iteration  17: 4769186.502 ops/s
Iteration  18: 4772969.879 ops/s
Iteration  19: 4773663.377 ops/s
Iteration  20: 4746091.513 ops/s
Iteration  21: 4785565.186 ops/s
Iteration  22: 4762585.440 ops/s
Iteration  23: 4756537.437 ops/s
Iteration  24: 4788094.677 ops/s
Iteration  25: 4773384.206 ops/s
Iteration  26: 4753436.950 ops/s
Iteration  27: 4762514.199 ops/s
Iteration  28: 4732784.116 ops/s
Iteration  29: 4756936.705 ops/s
Iteration  30: 4757298.628 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray":
  4758731.770 ±(99.9%) 16639.537 ops/s [Average]
  (min, avg, max) = (4678227.145, 4758731.770, 4795682.281), stdev = 24905.278
  CI (99.9%): [4742092.233, 4775371.307] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray  thrpt   30  4758731.770 ± 16639.537  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 517043.680 ops/s
# Warmup Iteration   2: 787569.392 ops/s
# Warmup Iteration   3: 1051923.432 ops/s
# Warmup Iteration   4: 1050310.345 ops/s
# Warmup Iteration   5: 1053308.396 ops/s
# Warmup Iteration   6: 865583.820 ops/s
# Warmup Iteration   7: 1049733.765 ops/s
# Warmup Iteration   8: 1051308.104 ops/s
# Warmup Iteration   9: 1050881.789 ops/s
# Warmup Iteration  10: 1050548.807 ops/s
# Warmup Iteration  11: 1046864.556 ops/s
# Warmup Iteration  12: 1050308.166 ops/s
# Warmup Iteration  13: 1049998.783 ops/s
# Warmup Iteration  14: 1052371.681 ops/s
# Warmup Iteration  15: 1047466.219 ops/s
# Warmup Iteration  16: 1052127.321 ops/s
# Warmup Iteration  17: 1052105.764 ops/s
# Warmup Iteration  18: 1050762.251 ops/s
# Warmup Iteration  19: 1040118.502 ops/s
# Warmup Iteration  20: 1051958.536 ops/s
# Warmup Iteration  21: 1043162.307 ops/s
# Warmup Iteration  22: 1046612.777 ops/s
# Warmup Iteration  23: 1051459.997 ops/s
# Warmup Iteration  24: 1040081.919 ops/s
# Warmup Iteration  25: 1050696.364 ops/s
# Warmup Iteration  26: 1050651.652 ops/s
# Warmup Iteration  27: 1052995.561 ops/s
# Warmup Iteration  28: 1047734.446 ops/s
# Warmup Iteration  29: 1054605.852 ops/s
# Warmup Iteration  30: 1053307.084 ops/s
Iteration   1: 1053842.143 ops/s
Iteration   2: 1052078.294 ops/s
Iteration   3: 1051246.808 ops/s
Iteration   4: 1052709.091 ops/s
Iteration   5: 1046525.066 ops/s
Iteration   6: 1049271.622 ops/s
Iteration   7: 1055268.835 ops/s
Iteration   8: 1041193.491 ops/s
Iteration   9: 1007180.998 ops/s
Iteration  10: 1037867.561 ops/s
Iteration  11: 1055265.189 ops/s
Iteration  12: 1051308.719 ops/s
Iteration  13: 1053470.070 ops/s
Iteration  14: 1051472.046 ops/s
Iteration  15: 1050167.627 ops/s
Iteration  16: 1034587.459 ops/s
Iteration  17: 1052366.094 ops/s
Iteration  18: 1047567.238 ops/s
Iteration  19: 1051090.605 ops/s
Iteration  20: 1044368.669 ops/s
Iteration  21: 1055897.432 ops/s
Iteration  22: 1044158.401 ops/s
Iteration  23: 1051319.645 ops/s
Iteration  24: 1042978.123 ops/s
Iteration  25: 1047929.423 ops/s
Iteration  26: 1049646.855 ops/s
Iteration  27: 1053923.320 ops/s
Iteration  28: 1053118.647 ops/s
Iteration  29: 1046509.411 ops/s
Iteration  30: 1053963.494 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable":
  1047943.079 ±(99.9%) 6206.551 ops/s [Average]
  (min, avg, max) = (1007180.998, 1047943.079, 1055897.432), stdev = 9289.674
  CI (99.9%): [1041736.528, 1054149.630] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1047943.079 ± 6206.551  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1099935.330 ops/s
# Warmup Iteration   2: 2320462.113 ops/s
# Warmup Iteration   3: 4841930.599 ops/s
# Warmup Iteration   4: 4025401.216 ops/s
# Warmup Iteration   5: 4838752.181 ops/s
# Warmup Iteration   6: 4767750.379 ops/s
# Warmup Iteration   7: 4830394.417 ops/s
# Warmup Iteration   8: 4818459.640 ops/s
# Warmup Iteration   9: 4800285.917 ops/s
# Warmup Iteration  10: 4821022.506 ops/s
# Warmup Iteration  11: 4585166.711 ops/s
# Warmup Iteration  12: 4847732.603 ops/s
# Warmup Iteration  13: 4823555.780 ops/s
# Warmup Iteration  14: 4843442.667 ops/s
# Warmup Iteration  15: 4832551.954 ops/s
# Warmup Iteration  16: 4794167.225 ops/s
# Warmup Iteration  17: 4801338.561 ops/s
# Warmup Iteration  18: 4770814.642 ops/s
# Warmup Iteration  19: 4828077.793 ops/s
# Warmup Iteration  20: 4836898.136 ops/s
# Warmup Iteration  21: 4834959.038 ops/s
# Warmup Iteration  22: 4833282.138 ops/s
# Warmup Iteration  23: 4843242.468 ops/s
# Warmup Iteration  24: 4831480.660 ops/s
# Warmup Iteration  25: 4830215.500 ops/s
# Warmup Iteration  26: 4780896.908 ops/s
# Warmup Iteration  27: 4787895.385 ops/s
# Warmup Iteration  28: 4837667.947 ops/s
# Warmup Iteration  29: 4815865.398 ops/s
# Warmup Iteration  30: 4793845.101 ops/s
Iteration   1: 4827142.533 ops/s
Iteration   2: 4792125.717 ops/s
Iteration   3: 4839988.127 ops/s
Iteration   4: 4792280.902 ops/s
Iteration   5: 4834136.814 ops/s
Iteration   6: 4818538.777 ops/s
Iteration   7: 4839292.676 ops/s
Iteration   8: 4849790.849 ops/s
Iteration   9: 4852544.222 ops/s
Iteration  10: 4817985.864 ops/s
Iteration  11: 4859716.899 ops/s
Iteration  12: 4850143.836 ops/s
Iteration  13: 4828239.708 ops/s
Iteration  14: 4832771.511 ops/s
Iteration  15: 4840048.424 ops/s
Iteration  16: 4823207.546 ops/s
Iteration  17: 4790690.768 ops/s
Iteration  18: 4821721.343 ops/s
Iteration  19: 4837983.075 ops/s
Iteration  20: 4849191.349 ops/s
Iteration  21: 4836683.641 ops/s
Iteration  22: 4837759.691 ops/s
Iteration  23: 4853381.024 ops/s
Iteration  24: 4847254.008 ops/s
Iteration  25: 4811342.428 ops/s
Iteration  26: 4837795.154 ops/s
Iteration  27: 4757718.347 ops/s
Iteration  28: 4857952.186 ops/s
Iteration  29: 4822230.583 ops/s
Iteration  30: 4845357.358 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray":
  4830167.179 ±(99.9%) 15394.224 ops/s [Average]
  (min, avg, max) = (4757718.347, 4830167.179, 4859716.899), stdev = 23041.352
  CI (99.9%): [4814772.954, 4845561.403] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray  thrpt   30  4830167.179 ± 15394.224  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 489390.950 ops/s
# Warmup Iteration   2: 739060.264 ops/s
# Warmup Iteration   3: 941564.238 ops/s
# Warmup Iteration   4: 953770.992 ops/s
# Warmup Iteration   5: 939456.714 ops/s
# Warmup Iteration   6: 825581.488 ops/s
# Warmup Iteration   7: 918423.673 ops/s
# Warmup Iteration   8: 954831.801 ops/s
# Warmup Iteration   9: 957211.299 ops/s
# Warmup Iteration  10: 935716.659 ops/s
# Warmup Iteration  11: 950742.372 ops/s
# Warmup Iteration  12: 948889.773 ops/s
# Warmup Iteration  13: 950949.962 ops/s
# Warmup Iteration  14: 950965.061 ops/s
# Warmup Iteration  15: 952328.154 ops/s
# Warmup Iteration  16: 943229.352 ops/s
# Warmup Iteration  17: 947856.342 ops/s
# Warmup Iteration  18: 939818.777 ops/s
# Warmup Iteration  19: 954316.067 ops/s
# Warmup Iteration  20: 951388.740 ops/s
# Warmup Iteration  21: 948119.933 ops/s
# Warmup Iteration  22: 952439.726 ops/s
# Warmup Iteration  23: 948504.711 ops/s
# Warmup Iteration  24: 949821.969 ops/s
# Warmup Iteration  25: 949949.881 ops/s
# Warmup Iteration  26: 953210.886 ops/s
# Warmup Iteration  27: 954707.721 ops/s
# Warmup Iteration  28: 954878.145 ops/s
# Warmup Iteration  29: 953349.084 ops/s
# Warmup Iteration  30: 951677.660 ops/s
Iteration   1: 954363.950 ops/s
Iteration   2: 956338.116 ops/s
Iteration   3: 956149.545 ops/s
Iteration   4: 940741.420 ops/s
Iteration   5: 957129.257 ops/s
Iteration   6: 953590.242 ops/s
Iteration   7: 943279.384 ops/s
Iteration   8: 954576.913 ops/s
Iteration   9: 959460.987 ops/s
Iteration  10: 956296.816 ops/s
Iteration  11: 959387.400 ops/s
Iteration  12: 954666.433 ops/s
Iteration  13: 957954.081 ops/s
Iteration  14: 954539.327 ops/s
Iteration  15: 949032.677 ops/s
Iteration  16: 938942.553 ops/s
Iteration  17: 934884.133 ops/s
Iteration  18: 954627.802 ops/s
Iteration  19: 951830.143 ops/s
Iteration  20: 952587.641 ops/s
Iteration  21: 949726.046 ops/s
Iteration  22: 948642.754 ops/s
Iteration  23: 953740.559 ops/s
Iteration  24: 957313.877 ops/s
Iteration  25: 949421.254 ops/s
Iteration  26: 954589.249 ops/s
Iteration  27: 951329.511 ops/s
Iteration  28: 956345.556 ops/s
Iteration  29: 947596.844 ops/s
Iteration  30: 957227.133 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable":
  952210.387 ±(99.9%) 4044.866 ops/s [Average]
  (min, avg, max) = (934884.133, 952210.387, 959460.987), stdev = 6054.166
  CI (99.9%): [948165.520, 956255.253] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  952210.387 ± 4044.866  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1060454.411 ops/s
# Warmup Iteration   2: 2110389.940 ops/s
# Warmup Iteration   3: 2535412.879 ops/s
# Warmup Iteration   4: 2495072.613 ops/s
# Warmup Iteration   5: 2157708.744 ops/s
# Warmup Iteration   6: 2555778.149 ops/s
# Warmup Iteration   7: 2554463.114 ops/s
# Warmup Iteration   8: 2553298.185 ops/s
# Warmup Iteration   9: 2556676.253 ops/s
# Warmup Iteration  10: 2554085.633 ops/s
# Warmup Iteration  11: 2565381.489 ops/s
# Warmup Iteration  12: 2556050.819 ops/s
# Warmup Iteration  13: 2535450.348 ops/s
# Warmup Iteration  14: 2555141.254 ops/s
# Warmup Iteration  15: 2545270.404 ops/s
# Warmup Iteration  16: 2536334.016 ops/s
# Warmup Iteration  17: 2533690.720 ops/s
# Warmup Iteration  18: 2537398.124 ops/s
# Warmup Iteration  19: 2564123.332 ops/s
# Warmup Iteration  20: 2555227.521 ops/s
# Warmup Iteration  21: 2551221.627 ops/s
# Warmup Iteration  22: 2544634.306 ops/s
# Warmup Iteration  23: 2533868.738 ops/s
# Warmup Iteration  24: 2512955.284 ops/s
# Warmup Iteration  25: 2518830.525 ops/s
# Warmup Iteration  26: 2529558.514 ops/s
# Warmup Iteration  27: 2551735.451 ops/s
# Warmup Iteration  28: 2559381.617 ops/s
# Warmup Iteration  29: 2546006.792 ops/s
# Warmup Iteration  30: 2523897.139 ops/s
Iteration   1: 2559013.069 ops/s
Iteration   2: 2533189.530 ops/s
Iteration   3: 2559152.133 ops/s
Iteration   4: 2481813.818 ops/s
Iteration   5: 2560995.194 ops/s
Iteration   6: 2546304.338 ops/s
Iteration   7: 2548279.709 ops/s
Iteration   8: 2568060.093 ops/s
Iteration   9: 2568194.251 ops/s
Iteration  10: 2515772.123 ops/s
Iteration  11: 2558430.979 ops/s
Iteration  12: 2551215.442 ops/s
Iteration  13: 2550808.095 ops/s
Iteration  14: 2551546.059 ops/s
Iteration  15: 2561997.298 ops/s
Iteration  16: 2545255.325 ops/s
Iteration  17: 2565239.027 ops/s
Iteration  18: 2559996.336 ops/s
Iteration  19: 2564156.087 ops/s
Iteration  20: 2526324.189 ops/s
Iteration  21: 2554559.468 ops/s
Iteration  22: 2565624.404 ops/s
Iteration  23: 2548052.303 ops/s
Iteration  24: 2560172.435 ops/s
Iteration  25: 2557117.306 ops/s
Iteration  26: 2564886.223 ops/s
Iteration  27: 2517587.876 ops/s
Iteration  28: 2558454.495 ops/s
Iteration  29: 2528412.065 ops/s
Iteration  30: 2548177.330 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_count":
  2549292.900 ±(99.9%) 12784.863 ops/s [Average]
  (min, avg, max) = (2481813.818, 2549292.900, 2568194.251), stdev = 19135.783
  CI (99.9%): [2536508.036, 2562077.763] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_count  thrpt   30  2549292.900 ± 12784.863  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1374245.061 ops/s
# Warmup Iteration   2: 2975923.251 ops/s
# Warmup Iteration   3: 5451356.332 ops/s
# Warmup Iteration   4: 4509206.560 ops/s
# Warmup Iteration   5: 5493767.527 ops/s
# Warmup Iteration   6: 5478794.171 ops/s
# Warmup Iteration   7: 5470107.362 ops/s
# Warmup Iteration   8: 5496315.133 ops/s
# Warmup Iteration   9: 5506285.250 ops/s
# Warmup Iteration  10: 5492211.829 ops/s
# Warmup Iteration  11: 5474001.739 ops/s
# Warmup Iteration  12: 5456644.862 ops/s
# Warmup Iteration  13: 5497506.482 ops/s
# Warmup Iteration  14: 5481232.319 ops/s
# Warmup Iteration  15: 5543317.862 ops/s
# Warmup Iteration  16: 5501797.748 ops/s
# Warmup Iteration  17: 5484375.522 ops/s
# Warmup Iteration  18: 5483657.673 ops/s
# Warmup Iteration  19: 5469004.335 ops/s
# Warmup Iteration  20: 5399389.051 ops/s
# Warmup Iteration  21: 5486103.088 ops/s
# Warmup Iteration  22: 5437408.902 ops/s
# Warmup Iteration  23: 5486012.674 ops/s
# Warmup Iteration  24: 5488373.261 ops/s
# Warmup Iteration  25: 5483125.361 ops/s
# Warmup Iteration  26: 5469374.028 ops/s
# Warmup Iteration  27: 5472631.696 ops/s
# Warmup Iteration  28: 5496134.768 ops/s
# Warmup Iteration  29: 5466287.152 ops/s
# Warmup Iteration  30: 5513246.373 ops/s
Iteration   1: 5480293.911 ops/s
Iteration   2: 5467003.470 ops/s
Iteration   3: 5491090.140 ops/s
Iteration   4: 5466451.651 ops/s
Iteration   5: 5508378.550 ops/s
Iteration   6: 5512999.889 ops/s
Iteration   7: 5452160.781 ops/s
Iteration   8: 5425565.544 ops/s
Iteration   9: 5503697.460 ops/s
Iteration  10: 5488066.787 ops/s
Iteration  11: 5530254.184 ops/s
Iteration  12: 5502997.449 ops/s
Iteration  13: 5487908.530 ops/s
Iteration  14: 5509045.854 ops/s
Iteration  15: 5519459.674 ops/s
Iteration  16: 5502936.612 ops/s
Iteration  17: 5498642.269 ops/s
Iteration  18: 5504320.390 ops/s
Iteration  19: 5483157.861 ops/s
Iteration  20: 5479706.544 ops/s
Iteration  21: 5493472.737 ops/s
Iteration  22: 5450039.823 ops/s
Iteration  23: 5480923.186 ops/s
Iteration  24: 5503638.911 ops/s
Iteration  25: 5507645.411 ops/s
Iteration  26: 5499436.121 ops/s
Iteration  27: 5510706.827 ops/s
Iteration  28: 5480893.165 ops/s
Iteration  29: 5471038.160 ops/s
Iteration  30: 5471610.589 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_detectIfNone":
  5489451.416 ±(99.9%) 15155.695 ops/s [Average]
  (min, avg, max) = (5425565.544, 5489451.416, 5530254.184), stdev = 22684.333
  CI (99.9%): [5474295.721, 5504607.111] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_detectIfNone  thrpt   30  5489451.416 ± 15155.695  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2045463.184 ops/s
# Warmup Iteration   2: 4358196.609 ops/s
# Warmup Iteration   3: 5015002.662 ops/s
# Warmup Iteration   4: 6038861.867 ops/s
# Warmup Iteration   5: 6024831.219 ops/s
# Warmup Iteration   6: 6014071.193 ops/s
# Warmup Iteration   7: 6027791.312 ops/s
# Warmup Iteration   8: 6002716.376 ops/s
# Warmup Iteration   9: 6046204.755 ops/s
# Warmup Iteration  10: 6046081.804 ops/s
# Warmup Iteration  11: 6043358.489 ops/s
# Warmup Iteration  12: 6023831.779 ops/s
# Warmup Iteration  13: 6033385.693 ops/s
# Warmup Iteration  14: 6039188.560 ops/s
# Warmup Iteration  15: 6016407.018 ops/s
# Warmup Iteration  16: 6021178.935 ops/s
# Warmup Iteration  17: 6034296.182 ops/s
# Warmup Iteration  18: 6020128.246 ops/s
# Warmup Iteration  19: 6030627.993 ops/s
# Warmup Iteration  20: 6048109.442 ops/s
# Warmup Iteration  21: 5975863.569 ops/s
# Warmup Iteration  22: 5967489.801 ops/s
# Warmup Iteration  23: 6073506.736 ops/s
# Warmup Iteration  24: 6043882.068 ops/s
# Warmup Iteration  25: 6037334.252 ops/s
# Warmup Iteration  26: 5999757.187 ops/s
# Warmup Iteration  27: 6046674.039 ops/s
# Warmup Iteration  28: 6050351.144 ops/s
# Warmup Iteration  29: 6023208.167 ops/s
# Warmup Iteration  30: 6033720.095 ops/s
Iteration   1: 6019625.289 ops/s
Iteration   2: 6062820.864 ops/s
Iteration   3: 6088155.286 ops/s
Iteration   4: 6049437.004 ops/s
Iteration   5: 6039323.579 ops/s
Iteration   6: 6014762.034 ops/s
Iteration   7: 5953320.268 ops/s
Iteration   8: 6074772.234 ops/s
Iteration   9: 6049970.743 ops/s
Iteration  10: 6082325.054 ops/s
Iteration  11: 6055488.547 ops/s
Iteration  12: 6036845.360 ops/s
Iteration  13: 6058483.361 ops/s
Iteration  14: 6029915.263 ops/s
Iteration  15: 6037227.581 ops/s
Iteration  16: 6040139.636 ops/s
Iteration  17: 6016590.833 ops/s
Iteration  18: 6022906.492 ops/s
Iteration  19: 6046073.610 ops/s
Iteration  20: 5930873.001 ops/s
Iteration  21: 5907509.686 ops/s
Iteration  22: 6016608.740 ops/s
Iteration  23: 6041093.676 ops/s
Iteration  24: 6053909.889 ops/s
Iteration  25: 5892623.131 ops/s
Iteration  26: 5942445.207 ops/s
Iteration  27: 6051969.370 ops/s
Iteration  28: 5881885.446 ops/s
Iteration  29: 6037545.628 ops/s
Iteration  30: 6005542.569 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_forEach":
  6018006.313 ±(99.9%) 37103.417 ops/s [Average]
  (min, avg, max) = (5881885.446, 6018006.313, 6088155.286), stdev = 55534.653
  CI (99.9%): [5980902.895, 6055109.730] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_forEach  thrpt   30  6018006.313 ± 37103.417  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6016757.502 ops/s
# Warmup Iteration   2: 12661057.257 ops/s
# Warmup Iteration   3: 14847395.998 ops/s
# Warmup Iteration   4: 17697121.314 ops/s
# Warmup Iteration   5: 17708953.220 ops/s
# Warmup Iteration   6: 17681420.236 ops/s
# Warmup Iteration   7: 17721739.514 ops/s
# Warmup Iteration   8: 17576342.196 ops/s
# Warmup Iteration   9: 17745181.516 ops/s
# Warmup Iteration  10: 17659731.254 ops/s
# Warmup Iteration  11: 17654191.920 ops/s
# Warmup Iteration  12: 17623301.952 ops/s
# Warmup Iteration  13: 17704954.310 ops/s
# Warmup Iteration  14: 17830755.244 ops/s
# Warmup Iteration  15: 17675907.441 ops/s
# Warmup Iteration  16: 17714170.980 ops/s
# Warmup Iteration  17: 17554676.165 ops/s
# Warmup Iteration  18: 17568174.210 ops/s
# Warmup Iteration  19: 17806980.238 ops/s
# Warmup Iteration  20: 17766645.754 ops/s
# Warmup Iteration  21: 17800161.486 ops/s
# Warmup Iteration  22: 17800790.966 ops/s
# Warmup Iteration  23: 17758786.019 ops/s
# Warmup Iteration  24: 17734315.298 ops/s
# Warmup Iteration  25: 17779734.513 ops/s
# Warmup Iteration  26: 17730534.393 ops/s
# Warmup Iteration  27: 17766996.501 ops/s
# Warmup Iteration  28: 17452676.461 ops/s
# Warmup Iteration  29: 17626005.344 ops/s
# Warmup Iteration  30: 17717584.610 ops/s
Iteration   1: 17583618.505 ops/s
Iteration   2: 17589140.374 ops/s
Iteration   3: 17447187.412 ops/s
Iteration   4: 17720397.083 ops/s
Iteration   5: 17727498.022 ops/s
Iteration   6: 17808580.993 ops/s
Iteration   7: 17624811.355 ops/s
Iteration   8: 17734634.653 ops/s
Iteration   9: 17754316.985 ops/s
Iteration  10: 17879056.613 ops/s
Iteration  11: 17820691.131 ops/s
Iteration  12: 17751466.961 ops/s
Iteration  13: 17765807.070 ops/s
Iteration  14: 17734835.692 ops/s
Iteration  15: 17358233.065 ops/s
Iteration  16: 17277432.769 ops/s
Iteration  17: 17644132.262 ops/s
Iteration  18: 17687593.546 ops/s
Iteration  19: 17756080.783 ops/s
Iteration  20: 17462087.262 ops/s
Iteration  21: 17394320.536 ops/s
Iteration  22: 17835238.831 ops/s
Iteration  23: 17721396.146 ops/s
Iteration  24: 17679647.534 ops/s
Iteration  25: 17793321.190 ops/s
Iteration  26: 17664352.568 ops/s
Iteration  27: 17705664.715 ops/s
Iteration  28: 17508902.006 ops/s
Iteration  29: 17594357.535 ops/s
Iteration  30: 17345500.281 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_injectInto":
  17645676.796 ±(99.9%) 106230.496 ops/s [Average]
  (min, avg, max) = (17277432.769, 17645676.796, 17879056.613), stdev = 159000.818
  CI (99.9%): [17539446.299, 17751907.292] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score        Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_injectInto  thrpt   30  17645676.796 ± 106230.496  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 768097.520 ops/s
# Warmup Iteration   2: 1587977.460 ops/s
# Warmup Iteration   3: 1861592.938 ops/s
# Warmup Iteration   4: 2194271.159 ops/s
# Warmup Iteration   5: 2203766.409 ops/s
# Warmup Iteration   6: 2203451.304 ops/s
# Warmup Iteration   7: 2199742.756 ops/s
# Warmup Iteration   8: 2195193.462 ops/s
# Warmup Iteration   9: 2202415.554 ops/s
# Warmup Iteration  10: 2187265.566 ops/s
# Warmup Iteration  11: 2165906.185 ops/s
# Warmup Iteration  12: 2205409.954 ops/s
# Warmup Iteration  13: 2191850.037 ops/s
# Warmup Iteration  14: 2201200.166 ops/s
# Warmup Iteration  15: 2210984.816 ops/s
# Warmup Iteration  16: 2197309.401 ops/s
# Warmup Iteration  17: 2218336.254 ops/s
# Warmup Iteration  18: 2209630.030 ops/s
# Warmup Iteration  19: 2209448.323 ops/s
# Warmup Iteration  20: 2209849.388 ops/s
# Warmup Iteration  21: 2215030.778 ops/s
# Warmup Iteration  22: 2204778.724 ops/s
# Warmup Iteration  23: 2196847.956 ops/s
# Warmup Iteration  24: 2202189.714 ops/s
# Warmup Iteration  25: 2206020.073 ops/s
# Warmup Iteration  26: 2206166.124 ops/s
# Warmup Iteration  27: 2214797.221 ops/s
# Warmup Iteration  28: 2205746.887 ops/s
# Warmup Iteration  29: 2190442.592 ops/s
# Warmup Iteration  30: 2202606.166 ops/s
Iteration   1: 2193964.232 ops/s
Iteration   2: 2167906.020 ops/s
Iteration   3: 2195751.761 ops/s
Iteration   4: 2163804.468 ops/s
Iteration   5: 2190881.005 ops/s
Iteration   6: 2194667.423 ops/s
Iteration   7: 2195041.104 ops/s
Iteration   8: 2193074.999 ops/s
Iteration   9: 2176795.926 ops/s
Iteration  10: 2161547.334 ops/s
Iteration  11: 2209130.316 ops/s
Iteration  12: 2187341.015 ops/s
Iteration  13: 2184950.219 ops/s
Iteration  14: 2197125.938 ops/s
Iteration  15: 2161566.370 ops/s
Iteration  16: 2190831.357 ops/s
Iteration  17: 2184432.438 ops/s
Iteration  18: 2198828.826 ops/s
Iteration  19: 2207428.255 ops/s
Iteration  20: 2218424.441 ops/s
Iteration  21: 2216743.015 ops/s
Iteration  22: 2181180.745 ops/s
Iteration  23: 2149723.022 ops/s
Iteration  24: 2200354.518 ops/s
Iteration  25: 2214364.264 ops/s
Iteration  26: 2196070.880 ops/s
Iteration  27: 2215230.917 ops/s
Iteration  28: 2216324.886 ops/s
Iteration  29: 2216622.486 ops/s
Iteration  30: 2207860.973 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_isEmpty":
  2192932.305 ±(99.9%) 12404.006 ops/s [Average]
  (min, avg, max) = (2149723.022, 2192932.305, 2218424.441), stdev = 18565.734
  CI (99.9%): [2180528.299, 2205336.312] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  2192932.305 ± 12404.006  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 646401.584 ops/s
# Warmup Iteration   2: 679276.371 ops/s
# Warmup Iteration   3: 855675.675 ops/s
# Warmup Iteration   4: 890561.509 ops/s
# Warmup Iteration   5: 888262.397 ops/s
# Warmup Iteration   6: 888864.444 ops/s
# Warmup Iteration   7: 890430.668 ops/s
# Warmup Iteration   8: 889631.844 ops/s
# Warmup Iteration   9: 879088.832 ops/s
# Warmup Iteration  10: 886625.620 ops/s
# Warmup Iteration  11: 889148.186 ops/s
# Warmup Iteration  12: 816106.632 ops/s
# Warmup Iteration  13: 806415.538 ops/s
# Warmup Iteration  14: 882282.844 ops/s
# Warmup Iteration  15: 888689.172 ops/s
# Warmup Iteration  16: 889480.226 ops/s
# Warmup Iteration  17: 930619.414 ops/s
# Warmup Iteration  18: 942695.177 ops/s
# Warmup Iteration  19: 943712.556 ops/s
# Warmup Iteration  20: 941803.358 ops/s
# Warmup Iteration  21: 940781.084 ops/s
# Warmup Iteration  22: 940181.062 ops/s
# Warmup Iteration  23: 943185.426 ops/s
# Warmup Iteration  24: 939885.307 ops/s
# Warmup Iteration  25: 946674.884 ops/s
# Warmup Iteration  26: 940719.492 ops/s
# Warmup Iteration  27: 940526.446 ops/s
# Warmup Iteration  28: 931885.544 ops/s
# Warmup Iteration  29: 938532.423 ops/s
# Warmup Iteration  30: 942072.890 ops/s
Iteration   1: 942311.017 ops/s
Iteration   2: 939046.611 ops/s
Iteration   3: 942432.238 ops/s
Iteration   4: 945426.006 ops/s
Iteration   5: 940956.198 ops/s
Iteration   6: 941087.548 ops/s
Iteration   7: 939706.639 ops/s
Iteration   8: 943074.201 ops/s
Iteration   9: 942544.594 ops/s
Iteration  10: 943313.123 ops/s
Iteration  11: 930407.475 ops/s
Iteration  12: 934302.336 ops/s
Iteration  13: 937221.396 ops/s
Iteration  14: 933159.220 ops/s
Iteration  15: 937973.126 ops/s
Iteration  16: 942626.587 ops/s
Iteration  17: 942369.661 ops/s
Iteration  18: 938442.874 ops/s
Iteration  19: 940020.727 ops/s
Iteration  20: 941941.070 ops/s
Iteration  21: 941296.981 ops/s
Iteration  22: 941166.742 ops/s
Iteration  23: 939799.360 ops/s
Iteration  24: 940505.424 ops/s
Iteration  25: 942499.856 ops/s
Iteration  26: 940438.525 ops/s
Iteration  27: 926513.670 ops/s
Iteration  28: 944963.578 ops/s
Iteration  29: 936550.109 ops/s
Iteration  30: 940399.820 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws":
  939749.890 ±(99.9%) 2771.381 ops/s [Average]
  (min, avg, max) = (926513.670, 939749.890, 945426.006), stdev = 4148.073
  CI (99.9%): [936978.510, 942521.271] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws  thrpt   30  939749.890 ± 2771.381  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 715559.024 ops/s
# Warmup Iteration   2: 750757.572 ops/s
# Warmup Iteration   3: 998190.274 ops/s
# Warmup Iteration   4: 984403.581 ops/s
# Warmup Iteration   5: 993523.363 ops/s
# Warmup Iteration   6: 993123.013 ops/s
# Warmup Iteration   7: 984657.446 ops/s
# Warmup Iteration   8: 984183.803 ops/s
# Warmup Iteration   9: 990941.598 ops/s
# Warmup Iteration  10: 991157.396 ops/s
# Warmup Iteration  11: 826054.920 ops/s
# Warmup Iteration  12: 990250.821 ops/s
# Warmup Iteration  13: 987303.981 ops/s
# Warmup Iteration  14: 990399.857 ops/s
# Warmup Iteration  15: 971880.600 ops/s
# Warmup Iteration  16: 989335.304 ops/s
# Warmup Iteration  17: 1047801.963 ops/s
# Warmup Iteration  18: 1053258.303 ops/s
# Warmup Iteration  19: 1043498.207 ops/s
# Warmup Iteration  20: 1047374.876 ops/s
# Warmup Iteration  21: 1052599.371 ops/s
# Warmup Iteration  22: 1028026.959 ops/s
# Warmup Iteration  23: 1053499.839 ops/s
# Warmup Iteration  24: 1044470.527 ops/s
# Warmup Iteration  25: 1053808.894 ops/s
# Warmup Iteration  26: 1050178.350 ops/s
# Warmup Iteration  27: 1041066.208 ops/s
# Warmup Iteration  28: 1051314.443 ops/s
# Warmup Iteration  29: 1051041.420 ops/s
# Warmup Iteration  30: 1051604.806 ops/s
Iteration   1: 1061146.109 ops/s
Iteration   2: 1049218.774 ops/s
Iteration   3: 1054620.484 ops/s
Iteration   4: 1048072.078 ops/s
Iteration   5: 1044574.154 ops/s
Iteration   6: 1052048.157 ops/s
Iteration   7: 1048322.263 ops/s
Iteration   8: 1048852.200 ops/s
Iteration   9: 1051658.889 ops/s
Iteration  10: 1053513.200 ops/s
Iteration  11: 1049682.792 ops/s
Iteration  12: 1057025.640 ops/s
Iteration  13: 1044627.376 ops/s
Iteration  14: 1014403.653 ops/s
Iteration  15: 1053339.596 ops/s
Iteration  16: 1055102.962 ops/s
Iteration  17: 1055903.568 ops/s
Iteration  18: 1052218.513 ops/s
Iteration  19: 1053961.308 ops/s
Iteration  20: 1050420.870 ops/s
Iteration  21: 1047419.649 ops/s
Iteration  22: 1053466.384 ops/s
Iteration  23: 1055660.164 ops/s
Iteration  24: 1049551.558 ops/s
Iteration  25: 1049435.572 ops/s
Iteration  26: 1050641.761 ops/s
Iteration  27: 1053687.162 ops/s
Iteration  28: 1046872.036 ops/s
Iteration  29: 1053936.546 ops/s
Iteration  30: 1050858.222 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList":
  1050341.388 ±(99.9%) 5158.488 ops/s [Average]
  (min, avg, max) = (1014403.653, 1050341.388, 1061146.109), stdev = 7720.983
  CI (99.9%): [1045182.900, 1055499.876] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1050341.388 ± 5158.488  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 634653.280 ops/s
# Warmup Iteration   2: 651582.035 ops/s
# Warmup Iteration   3: 844518.192 ops/s
# Warmup Iteration   4: 863476.978 ops/s
# Warmup Iteration   5: 858990.506 ops/s
# Warmup Iteration   6: 859120.892 ops/s
# Warmup Iteration   7: 856474.490 ops/s
# Warmup Iteration   8: 865426.419 ops/s
# Warmup Iteration   9: 863155.292 ops/s
# Warmup Iteration  10: 864320.886 ops/s
# Warmup Iteration  11: 868737.700 ops/s
# Warmup Iteration  12: 731549.741 ops/s
# Warmup Iteration  13: 850343.375 ops/s
# Warmup Iteration  14: 862618.227 ops/s
# Warmup Iteration  15: 857549.687 ops/s
# Warmup Iteration  16: 862386.480 ops/s
# Warmup Iteration  17: 923800.045 ops/s
# Warmup Iteration  18: 924436.551 ops/s
# Warmup Iteration  19: 919611.326 ops/s
# Warmup Iteration  20: 920710.760 ops/s
# Warmup Iteration  21: 909770.054 ops/s
# Warmup Iteration  22: 918283.007 ops/s
# Warmup Iteration  23: 920993.443 ops/s
# Warmup Iteration  24: 918667.310 ops/s
# Warmup Iteration  25: 918054.061 ops/s
# Warmup Iteration  26: 916384.497 ops/s
# Warmup Iteration  27: 918693.787 ops/s
# Warmup Iteration  28: 919115.858 ops/s
# Warmup Iteration  29: 920667.523 ops/s
# Warmup Iteration  30: 921411.182 ops/s
Iteration   1: 922231.374 ops/s
Iteration   2: 927746.507 ops/s
Iteration   3: 924362.033 ops/s
Iteration   4: 922073.347 ops/s
Iteration   5: 922925.611 ops/s
Iteration   6: 924759.686 ops/s
Iteration   7: 920266.473 ops/s
Iteration   8: 917902.641 ops/s
Iteration   9: 922897.963 ops/s
Iteration  10: 922388.319 ops/s
Iteration  11: 920833.067 ops/s
Iteration  12: 917012.610 ops/s
Iteration  13: 921303.187 ops/s
Iteration  14: 923333.312 ops/s
Iteration  15: 921085.905 ops/s
Iteration  16: 926509.047 ops/s
Iteration  17: 923313.652 ops/s
Iteration  18: 923538.406 ops/s
Iteration  19: 921329.985 ops/s
Iteration  20: 923803.427 ops/s
Iteration  21: 923641.083 ops/s
Iteration  22: 925008.140 ops/s
Iteration  23: 922323.099 ops/s
Iteration  24: 924786.217 ops/s
Iteration  25: 921411.964 ops/s
Iteration  26: 922916.840 ops/s
Iteration  27: 919822.161 ops/s
Iteration  28: 917365.937 ops/s
Iteration  29: 914272.651 ops/s
Iteration  30: 918106.560 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  921975.707 ±(99.9%) 1950.670 ops/s [Average]
  (min, avg, max) = (914272.651, 921975.707, 927746.507), stdev = 2919.671
  CI (99.9%): [920025.037, 923926.377] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt       Score      Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  921975.707 ± 1950.670  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 713737.013 ops/s
# Warmup Iteration   2: 771681.393 ops/s
# Warmup Iteration   3: 1007793.479 ops/s
# Warmup Iteration   4: 1007174.019 ops/s
# Warmup Iteration   5: 1003582.839 ops/s
# Warmup Iteration   6: 1004916.890 ops/s
# Warmup Iteration   7: 1014929.184 ops/s
# Warmup Iteration   8: 1013152.330 ops/s
# Warmup Iteration   9: 1010855.811 ops/s
# Warmup Iteration  10: 952425.939 ops/s
# Warmup Iteration  11: 893442.823 ops/s
# Warmup Iteration  12: 1006145.088 ops/s
# Warmup Iteration  13: 1005460.428 ops/s
# Warmup Iteration  14: 1007269.521 ops/s
# Warmup Iteration  15: 1004695.779 ops/s
# Warmup Iteration  16: 1004444.641 ops/s
# Warmup Iteration  17: 1066182.403 ops/s
# Warmup Iteration  18: 1065797.314 ops/s
# Warmup Iteration  19: 1062269.039 ops/s
# Warmup Iteration  20: 1065264.574 ops/s
# Warmup Iteration  21: 1064028.140 ops/s
# Warmup Iteration  22: 1069027.715 ops/s
# Warmup Iteration  23: 1062906.877 ops/s
# Warmup Iteration  24: 1066225.378 ops/s
# Warmup Iteration  25: 1064170.687 ops/s
# Warmup Iteration  26: 1062312.130 ops/s
# Warmup Iteration  27: 1064265.244 ops/s
# Warmup Iteration  28: 1062615.688 ops/s
# Warmup Iteration  29: 1064700.878 ops/s
# Warmup Iteration  30: 1059213.695 ops/s
Iteration   1: 1070499.687 ops/s
Iteration   2: 1068388.381 ops/s
Iteration   3: 1063523.523 ops/s
Iteration   4: 1066338.574 ops/s
Iteration   5: 1063331.654 ops/s
Iteration   6: 1067185.463 ops/s
Iteration   7: 1060394.614 ops/s
Iteration   8: 1062560.684 ops/s
Iteration   9: 1063129.181 ops/s
Iteration  10: 1042014.778 ops/s
Iteration  11: 1051861.416 ops/s
Iteration  12: 1051940.866 ops/s
Iteration  13: 1071818.617 ops/s
Iteration  14: 1059840.158 ops/s
Iteration  15: 1069333.350 ops/s
Iteration  16: 1072005.928 ops/s
Iteration  17: 1068946.546 ops/s
Iteration  18: 1068882.010 ops/s
Iteration  19: 1071225.033 ops/s
Iteration  20: 1070731.881 ops/s
Iteration  21: 1074240.295 ops/s
Iteration  22: 1068183.413 ops/s
Iteration  23: 1063224.378 ops/s
Iteration  24: 1059327.925 ops/s
Iteration  25: 1069542.200 ops/s
Iteration  26: 1064354.125 ops/s
Iteration  27: 1072593.624 ops/s
Iteration  28: 1048474.222 ops/s
Iteration  29: 1066519.750 ops/s
Iteration  30: 1069981.072 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  1064679.778 ±(99.9%) 5123.365 ops/s [Average]
  (min, avg, max) = (1042014.778, 1064679.778, 1074240.295), stdev = 7668.413
  CI (99.9%): [1059556.413, 1069803.144] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                       Mode  Cnt        Score      Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  1064679.778 ± 5123.365  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 708837.662 ops/s
# Warmup Iteration   2: 752562.258 ops/s
# Warmup Iteration   3: 995285.474 ops/s
# Warmup Iteration   4: 992027.827 ops/s
# Warmup Iteration   5: 986150.635 ops/s
# Warmup Iteration   6: 986400.356 ops/s
# Warmup Iteration   7: 996110.158 ops/s
# Warmup Iteration   8: 989368.699 ops/s
# Warmup Iteration   9: 987420.361 ops/s
# Warmup Iteration  10: 986579.770 ops/s
# Warmup Iteration  11: 838303.781 ops/s
# Warmup Iteration  12: 995385.911 ops/s
# Warmup Iteration  13: 994405.364 ops/s
# Warmup Iteration  14: 999467.450 ops/s
# Warmup Iteration  15: 996470.672 ops/s
# Warmup Iteration  16: 976279.297 ops/s
# Warmup Iteration  17: 1066972.391 ops/s
# Warmup Iteration  18: 1055295.212 ops/s
# Warmup Iteration  19: 1067692.654 ops/s
# Warmup Iteration  20: 1059356.460 ops/s
# Warmup Iteration  21: 1054912.305 ops/s
# Warmup Iteration  22: 1061367.346 ops/s
# Warmup Iteration  23: 1060118.824 ops/s
# Warmup Iteration  24: 1062118.975 ops/s
# Warmup Iteration  25: 1062805.334 ops/s
# Warmup Iteration  26: 1061278.537 ops/s
# Warmup Iteration  27: 1062561.821 ops/s
# Warmup Iteration  28: 1062101.520 ops/s
# Warmup Iteration  29: 1060236.250 ops/s
# Warmup Iteration  30: 1062127.729 ops/s
Iteration   1: 1069203.654 ops/s
Iteration   2: 1062290.818 ops/s
Iteration   3: 1066631.036 ops/s
Iteration   4: 1068609.160 ops/s
Iteration   5: 1060947.320 ops/s
Iteration   6: 1065440.116 ops/s
Iteration   7: 1068116.266 ops/s
Iteration   8: 1052442.417 ops/s
Iteration   9: 1063000.441 ops/s
Iteration  10: 1061475.690 ops/s
Iteration  11: 1057099.529 ops/s
Iteration  12: 1062667.481 ops/s
Iteration  13: 1049175.281 ops/s
Iteration  14: 1064365.970 ops/s
Iteration  15: 1064463.957 ops/s
Iteration  16: 1043702.593 ops/s
Iteration  17: 1054214.222 ops/s
Iteration  18: 1064106.687 ops/s
Iteration  19: 1061853.774 ops/s
Iteration  20: 1062182.969 ops/s
Iteration  21: 1048866.222 ops/s
Iteration  22: 1069372.655 ops/s
Iteration  23: 1057426.801 ops/s
Iteration  24: 1058255.956 ops/s
Iteration  25: 1062070.916 ops/s
Iteration  26: 1057769.349 ops/s
Iteration  27: 1059315.618 ops/s
Iteration  28: 1065374.442 ops/s
Iteration  29: 1065947.821 ops/s
Iteration  30: 1060790.987 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1060906.005 ±(99.9%) 4188.951 ops/s [Average]
  (min, avg, max) = (1043702.593, 1060906.005, 1069372.655), stdev = 6269.825
  CI (99.9%): [1056717.054, 1065094.956] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                       Mode  Cnt        Score      Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1060906.005 ± 4188.951  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 616084.821 ops/s
# Warmup Iteration   2: 1248872.198 ops/s
# Warmup Iteration   3: 1351795.006 ops/s
# Warmup Iteration   4: 1126213.054 ops/s
# Warmup Iteration   5: 1344488.209 ops/s
# Warmup Iteration   6: 1345518.019 ops/s
# Warmup Iteration   7: 1339256.680 ops/s
# Warmup Iteration   8: 1352301.158 ops/s
# Warmup Iteration   9: 1348967.273 ops/s
# Warmup Iteration  10: 1330247.807 ops/s
# Warmup Iteration  11: 1342675.933 ops/s
# Warmup Iteration  12: 1344223.242 ops/s
# Warmup Iteration  13: 1343535.041 ops/s
# Warmup Iteration  14: 1339660.210 ops/s
# Warmup Iteration  15: 1343036.748 ops/s
# Warmup Iteration  16: 1333367.135 ops/s
# Warmup Iteration  17: 1343838.296 ops/s
# Warmup Iteration  18: 1330900.496 ops/s
# Warmup Iteration  19: 1335397.673 ops/s
# Warmup Iteration  20: 1338126.217 ops/s
# Warmup Iteration  21: 1341664.398 ops/s
# Warmup Iteration  22: 1334703.686 ops/s
# Warmup Iteration  23: 1339502.367 ops/s
# Warmup Iteration  24: 1346438.830 ops/s
# Warmup Iteration  25: 1344636.273 ops/s
# Warmup Iteration  26: 1343627.366 ops/s
# Warmup Iteration  27: 1339245.880 ops/s
# Warmup Iteration  28: 1339783.096 ops/s
# Warmup Iteration  29: 1341724.179 ops/s
# Warmup Iteration  30: 1328863.672 ops/s
Iteration   1: 1337602.380 ops/s
Iteration   2: 1333468.496 ops/s
Iteration   3: 1335615.104 ops/s
Iteration   4: 1334873.831 ops/s
Iteration   5: 1331980.341 ops/s
Iteration   6: 1333434.410 ops/s
Iteration   7: 1351322.367 ops/s
Iteration   8: 1342233.520 ops/s
Iteration   9: 1331748.848 ops/s
Iteration  10: 1322012.415 ops/s
Iteration  11: 1348475.061 ops/s
Iteration  12: 1337189.480 ops/s
Iteration  13: 1332881.690 ops/s
Iteration  14: 1317420.840 ops/s
Iteration  15: 1315797.453 ops/s
Iteration  16: 1343560.344 ops/s
Iteration  17: 1299188.739 ops/s
Iteration  18: 1315288.764 ops/s
Iteration  19: 1350803.749 ops/s
Iteration  20: 1327129.975 ops/s
Iteration  21: 1327337.916 ops/s
Iteration  22: 1331176.321 ops/s
Iteration  23: 1349779.335 ops/s
Iteration  24: 1327365.448 ops/s
Iteration  25: 1329336.413 ops/s
Iteration  26: 1324650.457 ops/s
Iteration  27: 1348636.675 ops/s
Iteration  28: 1350187.269 ops/s
Iteration  29: 1339761.419 ops/s
Iteration  30: 1328637.115 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_makeString":
  1333296.539 ±(99.9%) 8159.696 ops/s [Average]
  (min, avg, max) = (1299188.739, 1333296.539, 1351322.367), stdev = 12213.049
  CI (99.9%): [1325136.844, 1341456.235] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_makeString  thrpt   30  1333296.539 ± 8159.696  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 162987969.967 ops/s
# Warmup Iteration   2: 300256080.604 ops/s
# Warmup Iteration   3: 258373569.514 ops/s
# Warmup Iteration   4: 305158914.368 ops/s
# Warmup Iteration   5: 305428512.648 ops/s
# Warmup Iteration   6: 306060754.225 ops/s
# Warmup Iteration   7: 305865140.056 ops/s
# Warmup Iteration   8: 306569510.905 ops/s
# Warmup Iteration   9: 307064207.174 ops/s
# Warmup Iteration  10: 307016420.142 ops/s
# Warmup Iteration  11: 305968800.705 ops/s
# Warmup Iteration  12: 307347673.850 ops/s
# Warmup Iteration  13: 305236734.183 ops/s
# Warmup Iteration  14: 301233648.504 ops/s
# Warmup Iteration  15: 305358726.537 ops/s
# Warmup Iteration  16: 303024295.534 ops/s
# Warmup Iteration  17: 304654937.410 ops/s
# Warmup Iteration  18: 302897669.395 ops/s
# Warmup Iteration  19: 305338859.967 ops/s
# Warmup Iteration  20: 303185011.460 ops/s
# Warmup Iteration  21: 306763382.442 ops/s
# Warmup Iteration  22: 306322446.929 ops/s
# Warmup Iteration  23: 304724179.919 ops/s
# Warmup Iteration  24: 307538729.007 ops/s
# Warmup Iteration  25: 306343384.204 ops/s
# Warmup Iteration  26: 306331868.418 ops/s
# Warmup Iteration  27: 302874883.383 ops/s
# Warmup Iteration  28: 305949730.751 ops/s
# Warmup Iteration  29: 305642006.787 ops/s
# Warmup Iteration  30: 301576189.741 ops/s
Iteration   1: 306425567.152 ops/s
Iteration   2: 302374160.254 ops/s
Iteration   3: 303548712.702 ops/s
Iteration   4: 302043534.716 ops/s
Iteration   5: 306291150.014 ops/s
Iteration   6: 303746302.594 ops/s
Iteration   7: 306517279.916 ops/s
Iteration   8: 305913428.174 ops/s
Iteration   9: 303404072.838 ops/s
Iteration  10: 301201315.274 ops/s
Iteration  11: 306929308.383 ops/s
Iteration  12: 306291383.890 ops/s
Iteration  13: 301280040.926 ops/s
Iteration  14: 305958608.125 ops/s
Iteration  15: 306486686.595 ops/s
Iteration  16: 307228795.906 ops/s
Iteration  17: 305908891.337 ops/s
Iteration  18: 305061609.510 ops/s
Iteration  19: 302003243.835 ops/s
Iteration  20: 307683714.337 ops/s
Iteration  21: 306541229.777 ops/s
Iteration  22: 306454899.179 ops/s
Iteration  23: 294442992.066 ops/s
Iteration  24: 305162315.642 ops/s
Iteration  25: 306323084.558 ops/s
Iteration  26: 306657911.439 ops/s
Iteration  27: 306546503.506 ops/s
Iteration  28: 306611616.702 ops/s
Iteration  29: 307167053.060 ops/s
Iteration  30: 304981344.723 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_newCollection":
  304906225.238 ±(99.9%) 1829087.003 ops/s [Average]
  (min, avg, max) = (294442992.066, 304906225.238, 307683714.337), stdev = 2737691.526
  CI (99.9%): [303077138.235, 306735312.241] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt          Score         Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_newCollection  thrpt   30  304906225.238 ± 1829087.003  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1190099.551 ops/s
# Warmup Iteration   2: 2766844.005 ops/s
# Warmup Iteration   3: 4159178.925 ops/s
# Warmup Iteration   4: 5008496.477 ops/s
# Warmup Iteration   5: 4994643.746 ops/s
# Warmup Iteration   6: 4980302.797 ops/s
# Warmup Iteration   7: 4963092.893 ops/s
# Warmup Iteration   8: 4972342.546 ops/s
# Warmup Iteration   9: 4979979.211 ops/s
# Warmup Iteration  10: 4948677.093 ops/s
# Warmup Iteration  11: 4985727.089 ops/s
# Warmup Iteration  12: 4952409.411 ops/s
# Warmup Iteration  13: 4979476.083 ops/s
# Warmup Iteration  14: 5024529.737 ops/s
# Warmup Iteration  15: 4993467.776 ops/s
# Warmup Iteration  16: 5011681.181 ops/s
# Warmup Iteration  17: 4991178.259 ops/s
# Warmup Iteration  18: 5012333.716 ops/s
# Warmup Iteration  19: 4909603.495 ops/s
# Warmup Iteration  20: 4996720.174 ops/s
# Warmup Iteration  21: 4991006.499 ops/s
# Warmup Iteration  22: 4979050.416 ops/s
# Warmup Iteration  23: 4995417.415 ops/s
# Warmup Iteration  24: 5001475.862 ops/s
# Warmup Iteration  25: 4982600.758 ops/s
# Warmup Iteration  26: 4997382.149 ops/s
# Warmup Iteration  27: 4983169.893 ops/s
# Warmup Iteration  28: 4958779.430 ops/s
# Warmup Iteration  29: 4995760.559 ops/s
# Warmup Iteration  30: 4968064.095 ops/s
Iteration   1: 4934766.544 ops/s
Iteration   2: 5017912.770 ops/s
Iteration   3: 5022861.329 ops/s
Iteration   4: 5007191.079 ops/s
Iteration   5: 4978399.939 ops/s
Iteration   6: 4984113.626 ops/s
Iteration   7: 5006086.198 ops/s
Iteration   8: 4973988.627 ops/s
Iteration   9: 4984193.169 ops/s
Iteration  10: 4998702.077 ops/s
Iteration  11: 4997859.951 ops/s
Iteration  12: 5009592.677 ops/s
Iteration  13: 4980664.253 ops/s
Iteration  14: 5028492.064 ops/s
Iteration  15: 4978488.194 ops/s
Iteration  16: 4968435.151 ops/s
Iteration  17: 5013983.390 ops/s
Iteration  18: 5024077.593 ops/s
Iteration  19: 5022180.770 ops/s
Iteration  20: 5008935.319 ops/s
Iteration  21: 4973668.382 ops/s
Iteration  22: 5032058.338 ops/s
Iteration  23: 5005912.696 ops/s
Iteration  24: 5001290.821 ops/s
Iteration  25: 5004382.931 ops/s
Iteration  26: 5034555.747 ops/s
Iteration  27: 4998169.684 ops/s
Iteration  28: 5024806.116 ops/s
Iteration  29: 4991110.746 ops/s
Iteration  30: 4983007.720 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith":
  4999662.930 ±(99.9%) 15132.559 ops/s [Average]
  (min, avg, max) = (4934766.544, 4999662.930, 5034555.747), stdev = 22649.703
  CI (99.9%): [4984530.371, 5014795.489] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith  thrpt   30  4999662.930 ± 15132.559  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 929654.724 ops/s
# Warmup Iteration   2: 2044983.756 ops/s
# Warmup Iteration   3: 2140417.388 ops/s
# Warmup Iteration   4: 2592162.882 ops/s
# Warmup Iteration   5: 2614107.829 ops/s
# Warmup Iteration   6: 2590726.146 ops/s
# Warmup Iteration   7: 2601245.565 ops/s
# Warmup Iteration   8: 2615452.603 ops/s
# Warmup Iteration   9: 2590247.733 ops/s
# Warmup Iteration  10: 2612744.972 ops/s
# Warmup Iteration  11: 2612569.599 ops/s
# Warmup Iteration  12: 2626652.790 ops/s
# Warmup Iteration  13: 2582930.358 ops/s
# Warmup Iteration  14: 2624298.285 ops/s
# Warmup Iteration  15: 2625676.794 ops/s
# Warmup Iteration  16: 2608917.782 ops/s
# Warmup Iteration  17: 2623172.056 ops/s
# Warmup Iteration  18: 2614796.015 ops/s
# Warmup Iteration  19: 2610482.793 ops/s
# Warmup Iteration  20: 2622901.013 ops/s
# Warmup Iteration  21: 2603571.214 ops/s
# Warmup Iteration  22: 2602668.333 ops/s
# Warmup Iteration  23: 2591935.924 ops/s
# Warmup Iteration  24: 2618063.876 ops/s
# Warmup Iteration  25: 2626027.651 ops/s
# Warmup Iteration  26: 2607883.088 ops/s
# Warmup Iteration  27: 2633254.053 ops/s
# Warmup Iteration  28: 2621985.485 ops/s
# Warmup Iteration  29: 2628251.573 ops/s
# Warmup Iteration  30: 2629743.704 ops/s
Iteration   1: 2617859.773 ops/s
Iteration   2: 2599519.573 ops/s
Iteration   3: 2631848.713 ops/s
Iteration   4: 2606998.062 ops/s
Iteration   5: 2637787.669 ops/s
Iteration   6: 2622171.839 ops/s
Iteration   7: 2602905.220 ops/s
Iteration   8: 2620528.665 ops/s
Iteration   9: 2597572.129 ops/s
Iteration  10: 2597558.371 ops/s
Iteration  11: 2618322.954 ops/s
Iteration  12: 2622944.883 ops/s
Iteration  13: 2619192.770 ops/s
Iteration  14: 2577189.801 ops/s
Iteration  15: 2634426.004 ops/s
Iteration  16: 2646345.918 ops/s
Iteration  17: 2636125.058 ops/s
Iteration  18: 2620650.491 ops/s
Iteration  19: 2621288.982 ops/s
Iteration  20: 2635092.386 ops/s
Iteration  21: 2600537.209 ops/s
Iteration  22: 2622205.231 ops/s
Iteration  23: 2637577.644 ops/s
Iteration  24: 2625703.524 ops/s
Iteration  25: 2622249.664 ops/s
Iteration  26: 2628368.074 ops/s
Iteration  27: 2633369.942 ops/s
Iteration  28: 2622570.427 ops/s
Iteration  29: 2619883.267 ops/s
Iteration  30: 2617839.274 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy":
  2619887.784 ±(99.9%) 10064.304 ops/s [Average]
  (min, avg, max) = (2577189.801, 2619887.784, 2646345.918), stdev = 15063.778
  CI (99.9%): [2609823.480, 2629952.088] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy  thrpt   30  2619887.784 ± 10064.304  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2008330.251 ops/s
# Warmup Iteration   2: 4431656.964 ops/s
# Warmup Iteration   3: 5634556.821 ops/s
# Warmup Iteration   4: 6613358.806 ops/s
# Warmup Iteration   5: 6668940.644 ops/s
# Warmup Iteration   6: 6659128.579 ops/s
# Warmup Iteration   7: 6661217.498 ops/s
# Warmup Iteration   8: 6665915.047 ops/s
# Warmup Iteration   9: 6605938.369 ops/s
# Warmup Iteration  10: 6604557.270 ops/s
# Warmup Iteration  11: 6551290.084 ops/s
# Warmup Iteration  12: 6590115.547 ops/s
# Warmup Iteration  13: 6682643.438 ops/s
# Warmup Iteration  14: 6590688.028 ops/s
# Warmup Iteration  15: 6614960.201 ops/s
# Warmup Iteration  16: 6647517.391 ops/s
# Warmup Iteration  17: 6654217.071 ops/s
# Warmup Iteration  18: 6653582.510 ops/s
# Warmup Iteration  19: 6594355.230 ops/s
# Warmup Iteration  20: 6631694.293 ops/s
# Warmup Iteration  21: 6615784.743 ops/s
# Warmup Iteration  22: 6675860.632 ops/s
# Warmup Iteration  23: 6646150.082 ops/s
# Warmup Iteration  24: 6679024.227 ops/s
# Warmup Iteration  25: 6610396.442 ops/s
# Warmup Iteration  26: 6653305.331 ops/s
# Warmup Iteration  27: 6664845.761 ops/s
# Warmup Iteration  28: 6653076.509 ops/s
# Warmup Iteration  29: 6665002.130 ops/s
# Warmup Iteration  30: 6620482.214 ops/s
Iteration   1: 6708178.985 ops/s
Iteration   2: 6649689.388 ops/s
Iteration   3: 6557504.564 ops/s
Iteration   4: 6648522.987 ops/s
Iteration   5: 6710241.343 ops/s
Iteration   6: 6629685.745 ops/s
Iteration   7: 6681227.930 ops/s
Iteration   8: 6673831.474 ops/s
Iteration   9: 6673866.332 ops/s
Iteration  10: 6668121.947 ops/s
Iteration  11: 6658881.167 ops/s
Iteration  12: 6625902.754 ops/s
Iteration  13: 6688433.945 ops/s
Iteration  14: 6672210.265 ops/s
Iteration  15: 6646611.095 ops/s
Iteration  16: 6655864.536 ops/s
Iteration  17: 6616387.117 ops/s
Iteration  18: 6647059.324 ops/s
Iteration  19: 6660570.105 ops/s
Iteration  20: 6643434.247 ops/s
Iteration  21: 6681097.911 ops/s
Iteration  22: 6641350.439 ops/s
Iteration  23: 6588112.774 ops/s
Iteration  24: 6616374.322 ops/s
Iteration  25: 6566200.671 ops/s
Iteration  26: 6643181.643 ops/s
Iteration  27: 6587481.025 ops/s
Iteration  28: 6647222.399 ops/s
Iteration  29: 6639497.031 ops/s
Iteration  30: 6601397.966 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_notEmpty":
  6644271.381 ±(99.9%) 25081.549 ops/s [Average]
  (min, avg, max) = (6557504.564, 6644271.381, 6710241.343), stdev = 37540.884
  CI (99.9%): [6619189.832, 6669352.930] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_notEmpty  thrpt   30  6644271.381 ± 25081.549  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1344144.276 ops/s
# Warmup Iteration   2: 2722157.099 ops/s
# Warmup Iteration   3: 2654995.447 ops/s
# Warmup Iteration   4: 3165586.860 ops/s
# Warmup Iteration   5: 3175077.086 ops/s
# Warmup Iteration   6: 3157976.961 ops/s
# Warmup Iteration   7: 3155344.253 ops/s
# Warmup Iteration   8: 3172517.150 ops/s
# Warmup Iteration   9: 3139511.160 ops/s
# Warmup Iteration  10: 3172268.974 ops/s
# Warmup Iteration  11: 3156402.354 ops/s
# Warmup Iteration  12: 3152817.672 ops/s
# Warmup Iteration  13: 3165057.917 ops/s
# Warmup Iteration  14: 3173994.281 ops/s
# Warmup Iteration  15: 3155529.837 ops/s
# Warmup Iteration  16: 3114664.740 ops/s
# Warmup Iteration  17: 3156089.322 ops/s
# Warmup Iteration  18: 3164986.529 ops/s
# Warmup Iteration  19: 3166574.867 ops/s
# Warmup Iteration  20: 3180489.313 ops/s
# Warmup Iteration  21: 3162244.505 ops/s
# Warmup Iteration  22: 3153453.441 ops/s
# Warmup Iteration  23: 3172115.973 ops/s
# Warmup Iteration  24: 3152303.441 ops/s
# Warmup Iteration  25: 3170979.846 ops/s
# Warmup Iteration  26: 3153490.596 ops/s
# Warmup Iteration  27: 3171446.346 ops/s
# Warmup Iteration  28: 3130322.870 ops/s
# Warmup Iteration  29: 3136751.501 ops/s
# Warmup Iteration  30: 3142438.239 ops/s
Iteration   1: 3156041.044 ops/s
Iteration   2: 3172250.127 ops/s
Iteration   3: 3161472.651 ops/s
Iteration   4: 3073572.541 ops/s
Iteration   5: 3130471.348 ops/s
Iteration   6: 3056940.301 ops/s
Iteration   7: 3124209.598 ops/s
Iteration   8: 3166766.930 ops/s
Iteration   9: 3167758.124 ops/s
Iteration  10: 3173786.338 ops/s
Iteration  11: 3154769.070 ops/s
Iteration  12: 3123452.284 ops/s
Iteration  13: 3128878.904 ops/s
Iteration  14: 3128449.320 ops/s
Iteration  15: 3163349.907 ops/s
Iteration  16: 3144209.778 ops/s
Iteration  17: 3146854.259 ops/s
Iteration  18: 3165263.867 ops/s
Iteration  19: 3121218.595 ops/s
Iteration  20: 3140895.520 ops/s
Iteration  21: 3142515.503 ops/s
Iteration  22: 3148772.644 ops/s
Iteration  23: 3148860.920 ops/s
Iteration  24: 3148882.059 ops/s
Iteration  25: 3152500.630 ops/s
Iteration  26: 3094735.144 ops/s
Iteration  27: 3146718.784 ops/s
Iteration  28: 3155275.866 ops/s
Iteration  29: 3162393.332 ops/s
Iteration  30: 3146072.828 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_reduce":
  3141577.940 ±(99.9%) 18224.278 ops/s [Average]
  (min, avg, max) = (3056940.301, 3141577.940, 3173786.338), stdev = 27277.244
  CI (99.9%): [3123353.662, 3159802.219] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_reduce  thrpt   30  3141577.940 ± 18224.278  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 939749.094 ops/s
# Warmup Iteration   2: 1944292.458 ops/s
# Warmup Iteration   3: 1993939.061 ops/s
# Warmup Iteration   4: 2370052.816 ops/s
# Warmup Iteration   5: 2383718.627 ops/s
# Warmup Iteration   6: 2371189.752 ops/s
# Warmup Iteration   7: 2392438.149 ops/s
# Warmup Iteration   8: 2383031.963 ops/s
# Warmup Iteration   9: 2380671.648 ops/s
# Warmup Iteration  10: 2381826.986 ops/s
# Warmup Iteration  11: 2382563.038 ops/s
# Warmup Iteration  12: 2376451.106 ops/s
# Warmup Iteration  13: 2379099.497 ops/s
# Warmup Iteration  14: 2380031.963 ops/s
# Warmup Iteration  15: 2386674.856 ops/s
# Warmup Iteration  16: 2378973.232 ops/s
# Warmup Iteration  17: 2376565.038 ops/s
# Warmup Iteration  18: 2377341.075 ops/s
# Warmup Iteration  19: 2371691.914 ops/s
# Warmup Iteration  20: 2378278.217 ops/s
# Warmup Iteration  21: 2386168.133 ops/s
# Warmup Iteration  22: 2393590.249 ops/s
# Warmup Iteration  23: 2383655.695 ops/s
# Warmup Iteration  24: 2385595.117 ops/s
# Warmup Iteration  25: 2380238.462 ops/s
# Warmup Iteration  26: 2370528.505 ops/s
# Warmup Iteration  27: 2394248.088 ops/s
# Warmup Iteration  28: 2395813.954 ops/s
# Warmup Iteration  29: 2386101.711 ops/s
# Warmup Iteration  30: 2339513.195 ops/s
Iteration   1: 2372623.201 ops/s
Iteration   2: 2377472.070 ops/s
Iteration   3: 2370170.885 ops/s
Iteration   4: 2389060.209 ops/s
Iteration   5: 2369331.746 ops/s
Iteration   6: 2366045.034 ops/s
Iteration   7: 2293355.870 ops/s
Iteration   8: 2380966.980 ops/s
Iteration   9: 2381371.811 ops/s
Iteration  10: 2385547.367 ops/s
Iteration  11: 2396114.951 ops/s
Iteration  12: 2382745.271 ops/s
Iteration  13: 2371769.703 ops/s
Iteration  14: 2404571.209 ops/s
Iteration  15: 2377614.962 ops/s
Iteration  16: 2390302.152 ops/s
Iteration  17: 2385739.553 ops/s
Iteration  18: 2392626.936 ops/s
Iteration  19: 2390904.548 ops/s
Iteration  20: 2369017.175 ops/s
Iteration  21: 2398782.713 ops/s
Iteration  22: 2320712.648 ops/s
Iteration  23: 2388671.676 ops/s
Iteration  24: 2351001.766 ops/s
Iteration  25: 2389209.041 ops/s
Iteration  26: 2377426.634 ops/s
Iteration  27: 2391427.164 ops/s
Iteration  28: 2385247.349 ops/s
Iteration  29: 2388933.345 ops/s
Iteration  30: 2385843.171 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty":
  2377486.905 ±(99.9%) 14954.493 ops/s [Average]
  (min, avg, max) = (2293355.870, 2377486.905, 2404571.209), stdev = 22383.182
  CI (99.9%): [2362532.412, 2392441.397] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  2377486.905 ± 14954.493  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 703479.842 ops/s
# Warmup Iteration   2: 732365.626 ops/s
# Warmup Iteration   3: 1009464.269 ops/s
# Warmup Iteration   4: 1001232.635 ops/s
# Warmup Iteration   5: 998823.677 ops/s
# Warmup Iteration   6: 1007450.489 ops/s
# Warmup Iteration   7: 1007249.818 ops/s
# Warmup Iteration   8: 1006414.156 ops/s
# Warmup Iteration   9: 1001263.969 ops/s
# Warmup Iteration  10: 1006142.274 ops/s
# Warmup Iteration  11: 835730.336 ops/s
# Warmup Iteration  12: 999261.554 ops/s
# Warmup Iteration  13: 997627.771 ops/s
# Warmup Iteration  14: 1005533.277 ops/s
# Warmup Iteration  15: 996829.096 ops/s
# Warmup Iteration  16: 1005174.462 ops/s
# Warmup Iteration  17: 1059851.617 ops/s
# Warmup Iteration  18: 1056378.205 ops/s
# Warmup Iteration  19: 1062056.720 ops/s
# Warmup Iteration  20: 1064221.398 ops/s
# Warmup Iteration  21: 1059563.707 ops/s
# Warmup Iteration  22: 1054117.391 ops/s
# Warmup Iteration  23: 1059387.812 ops/s
# Warmup Iteration  24: 1062818.565 ops/s
# Warmup Iteration  25: 1063556.610 ops/s
# Warmup Iteration  26: 1060075.432 ops/s
# Warmup Iteration  27: 1061643.473 ops/s
# Warmup Iteration  28: 1063389.273 ops/s
# Warmup Iteration  29: 1061941.502 ops/s
# Warmup Iteration  30: 1062607.057 ops/s
Iteration   1: 1061050.727 ops/s
Iteration   2: 1050114.596 ops/s
Iteration   3: 1061578.497 ops/s
Iteration   4: 1027050.103 ops/s
Iteration   5: 1064674.098 ops/s
Iteration   6: 1060983.938 ops/s
Iteration   7: 1065913.101 ops/s
Iteration   8: 1064432.805 ops/s
Iteration   9: 1060546.690 ops/s
Iteration  10: 1060153.254 ops/s
Iteration  11: 1057982.603 ops/s
Iteration  12: 1066847.513 ops/s
Iteration  13: 1058088.343 ops/s
Iteration  14: 1061274.068 ops/s
Iteration  15: 1060651.119 ops/s
Iteration  16: 1059782.172 ops/s
Iteration  17: 1059953.749 ops/s
Iteration  18: 1060457.362 ops/s
Iteration  19: 1069773.016 ops/s
Iteration  20: 1055584.450 ops/s
Iteration  21: 1062864.246 ops/s
Iteration  22: 1061067.071 ops/s
Iteration  23: 1042171.017 ops/s
Iteration  24: 1063445.154 ops/s
Iteration  25: 1064517.004 ops/s
Iteration  26: 1062869.258 ops/s
Iteration  27: 1051914.508 ops/s
Iteration  28: 1060365.966 ops/s
Iteration  29: 1015365.651 ops/s
Iteration  30: 1058745.457 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1057673.918 ±(99.9%) 7548.035 ops/s [Average]
  (min, avg, max) = (1015365.651, 1057673.918, 1069773.016), stdev = 11297.545
  CI (99.9%): [1050125.883, 1065221.953] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1057673.918 ± 7548.035  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3265580.020 ops/s
# Warmup Iteration   2: 8514517.164 ops/s
# Warmup Iteration   3: 8917471.578 ops/s
# Warmup Iteration   4: 10631981.291 ops/s
# Warmup Iteration   5: 10669296.946 ops/s
# Warmup Iteration   6: 10687710.283 ops/s
# Warmup Iteration   7: 10627605.051 ops/s
# Warmup Iteration   8: 10542766.898 ops/s
# Warmup Iteration   9: 10630697.733 ops/s
# Warmup Iteration  10: 10639747.928 ops/s
# Warmup Iteration  11: 10652802.637 ops/s
# Warmup Iteration  12: 10643289.215 ops/s
# Warmup Iteration  13: 10645199.691 ops/s
# Warmup Iteration  14: 10638129.982 ops/s
# Warmup Iteration  15: 10673175.005 ops/s
# Warmup Iteration  16: 10668347.292 ops/s
# Warmup Iteration  17: 10645595.244 ops/s
# Warmup Iteration  18: 10676435.844 ops/s
# Warmup Iteration  19: 10641334.979 ops/s
# Warmup Iteration  20: 10574363.975 ops/s
# Warmup Iteration  21: 10614225.535 ops/s
# Warmup Iteration  22: 10666566.436 ops/s
# Warmup Iteration  23: 10692966.648 ops/s
# Warmup Iteration  24: 10619699.701 ops/s
# Warmup Iteration  25: 10656639.915 ops/s
# Warmup Iteration  26: 10642061.652 ops/s
# Warmup Iteration  27: 10669503.061 ops/s
# Warmup Iteration  28: 10701619.789 ops/s
# Warmup Iteration  29: 10687993.665 ops/s
# Warmup Iteration  30: 10650548.157 ops/s
Iteration   1: 10700172.399 ops/s
Iteration   2: 10689514.362 ops/s
Iteration   3: 10633047.799 ops/s
Iteration   4: 10644033.641 ops/s
Iteration   5: 10625131.207 ops/s
Iteration   6: 10641634.730 ops/s
Iteration   7: 10598571.205 ops/s
Iteration   8: 10588302.459 ops/s
Iteration   9: 10403918.704 ops/s
Iteration  10: 10514549.824 ops/s
Iteration  11: 10638384.452 ops/s
Iteration  12: 10605311.673 ops/s
Iteration  13: 10611239.726 ops/s
Iteration  14: 10624716.520 ops/s
Iteration  15: 10673351.435 ops/s
Iteration  16: 10596474.589 ops/s
Iteration  17: 10660617.939 ops/s
Iteration  18: 10636467.351 ops/s
Iteration  19: 10712597.837 ops/s
Iteration  20: 10652989.582 ops/s
Iteration  21: 10715779.906 ops/s
Iteration  22: 10396059.326 ops/s
Iteration  23: 10626501.068 ops/s
Iteration  24: 10514010.465 ops/s
Iteration  25: 10614933.658 ops/s
Iteration  26: 10661448.642 ops/s
Iteration  27: 10648805.906 ops/s
Iteration  28: 10676724.442 ops/s
Iteration  29: 10657509.913 ops/s
Iteration  30: 10628720.795 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_reject":
  10619717.385 ±(99.9%) 50438.995 ops/s [Average]
  (min, avg, max) = (10396059.326, 10619717.385, 10715779.906), stdev = 75494.718
  CI (99.9%): [10569278.390, 10670156.380] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_reject  thrpt   30  10619717.385 ± 50438.995  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7071862.955 ops/s
# Warmup Iteration   2: 17308064.356 ops/s
# Warmup Iteration   3: 17554816.190 ops/s
# Warmup Iteration   4: 14810603.205 ops/s
# Warmup Iteration   5: 17690976.498 ops/s
# Warmup Iteration   6: 17657825.699 ops/s
# Warmup Iteration   7: 17718519.992 ops/s
# Warmup Iteration   8: 17547199.434 ops/s
# Warmup Iteration   9: 17560135.856 ops/s
# Warmup Iteration  10: 17479774.373 ops/s
# Warmup Iteration  11: 17687527.041 ops/s
# Warmup Iteration  12: 17751406.077 ops/s
# Warmup Iteration  13: 17662764.514 ops/s
# Warmup Iteration  14: 17647185.863 ops/s
# Warmup Iteration  15: 17617917.218 ops/s
# Warmup Iteration  16: 17658004.426 ops/s
# Warmup Iteration  17: 17538084.360 ops/s
# Warmup Iteration  18: 17713295.984 ops/s
# Warmup Iteration  19: 17684629.801 ops/s
# Warmup Iteration  20: 17721836.679 ops/s
# Warmup Iteration  21: 17724290.121 ops/s
# Warmup Iteration  22: 17739500.464 ops/s
# Warmup Iteration  23: 17710295.664 ops/s
# Warmup Iteration  24: 17698780.738 ops/s
# Warmup Iteration  25: 17743025.129 ops/s
# Warmup Iteration  26: 17621904.130 ops/s
# Warmup Iteration  27: 17558267.015 ops/s
# Warmup Iteration  28: 17685305.385 ops/s
# Warmup Iteration  29: 17668937.617 ops/s
# Warmup Iteration  30: 17480643.473 ops/s
Iteration   1: 17528091.741 ops/s
Iteration   2: 17470887.285 ops/s
Iteration   3: 17648907.886 ops/s
Iteration   4: 17793131.770 ops/s
Iteration   5: 17856359.014 ops/s
Iteration   6: 17294264.573 ops/s
Iteration   7: 17808624.528 ops/s
Iteration   8: 17737484.775 ops/s
Iteration   9: 17695672.672 ops/s
Iteration  10: 17676425.067 ops/s
Iteration  11: 17693061.498 ops/s
Iteration  12: 17783492.182 ops/s
Iteration  13: 17786770.807 ops/s
Iteration  14: 17810238.774 ops/s
Iteration  15: 17491727.607 ops/s
Iteration  16: 17799918.904 ops/s
Iteration  17: 17761776.866 ops/s
Iteration  18: 17544900.512 ops/s
Iteration  19: 17763003.310 ops/s
Iteration  20: 17784420.061 ops/s
Iteration  21: 17655199.329 ops/s
Iteration  22: 17813362.355 ops/s
Iteration  23: 17863462.844 ops/s
Iteration  24: 17533392.011 ops/s
Iteration  25: 17709229.119 ops/s
Iteration  26: 17712560.879 ops/s
Iteration  27: 17734534.472 ops/s
Iteration  28: 17510367.803 ops/s
Iteration  29: 17669111.999 ops/s
Iteration  30: 17517383.265 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_remove":
  17681592.130 ±(99.9%) 91680.721 ops/s [Average]
  (min, avg, max) = (17294264.573, 17681592.130, 17863462.844), stdev = 137223.397
  CI (99.9%): [17589911.409, 17773272.851] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_remove  thrpt   30  17681592.130 ± 91680.721  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2375527.795 ops/s
# Warmup Iteration   2: 5224721.509 ops/s
# Warmup Iteration   3: 4383792.900 ops/s
# Warmup Iteration   4: 5290992.713 ops/s
# Warmup Iteration   5: 5306730.472 ops/s
# Warmup Iteration   6: 5284631.762 ops/s
# Warmup Iteration   7: 5296683.151 ops/s
# Warmup Iteration   8: 5285193.614 ops/s
# Warmup Iteration   9: 5270375.059 ops/s
# Warmup Iteration  10: 5192651.197 ops/s
# Warmup Iteration  11: 5257736.907 ops/s
# Warmup Iteration  12: 5257088.632 ops/s
# Warmup Iteration  13: 5264448.566 ops/s
# Warmup Iteration  14: 5234096.115 ops/s
# Warmup Iteration  15: 5259473.424 ops/s
# Warmup Iteration  16: 5253686.981 ops/s
# Warmup Iteration  17: 5267479.517 ops/s
# Warmup Iteration  18: 5214745.020 ops/s
# Warmup Iteration  19: 5277450.114 ops/s
# Warmup Iteration  20: 5207852.470 ops/s
# Warmup Iteration  21: 5215552.445 ops/s
# Warmup Iteration  22: 5201674.089 ops/s
# Warmup Iteration  23: 5240086.987 ops/s
# Warmup Iteration  24: 5187497.590 ops/s
# Warmup Iteration  25: 5240882.102 ops/s
# Warmup Iteration  26: 5253849.204 ops/s
# Warmup Iteration  27: 5223475.512 ops/s
# Warmup Iteration  28: 5252203.511 ops/s
# Warmup Iteration  29: 5276682.802 ops/s
# Warmup Iteration  30: 5313930.220 ops/s
Iteration   1: 5300485.156 ops/s
Iteration   2: 5296488.386 ops/s
Iteration   3: 5281071.056 ops/s
Iteration   4: 5314714.905 ops/s
Iteration   5: 5291879.154 ops/s
Iteration   6: 5283379.453 ops/s
Iteration   7: 5292429.404 ops/s
Iteration   8: 5310424.287 ops/s
Iteration   9: 5241655.591 ops/s
Iteration  10: 5199526.986 ops/s
Iteration  11: 5230455.278 ops/s
Iteration  12: 5290633.665 ops/s
Iteration  13: 5265103.790 ops/s
Iteration  14: 5303046.377 ops/s
Iteration  15: 5321580.398 ops/s
Iteration  16: 5305840.127 ops/s
Iteration  17: 5312683.825 ops/s
Iteration  18: 5294773.405 ops/s
Iteration  19: 5291914.818 ops/s
Iteration  20: 5322438.656 ops/s
Iteration  21: 5292609.516 ops/s
Iteration  22: 5312335.868 ops/s
Iteration  23: 5285897.097 ops/s
Iteration  24: 5291593.399 ops/s
Iteration  25: 5259155.418 ops/s
Iteration  26: 5248305.824 ops/s
Iteration  27: 5297834.209 ops/s
Iteration  28: 5283084.272 ops/s
Iteration  29: 5309073.123 ops/s
Iteration  30: 5235252.045 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_removeAll":
  5285522.183 ±(99.9%) 19654.383 ops/s [Average]
  (min, avg, max) = (5199526.986, 5285522.183, 5322438.656), stdev = 29417.758
  CI (99.9%): [5265867.800, 5305176.566] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_removeAll  thrpt   30  5285522.183 ± 19654.383  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1620573.813 ops/s
# Warmup Iteration   2: 3737899.658 ops/s
# Warmup Iteration   3: 3159323.346 ops/s
# Warmup Iteration   4: 3773499.921 ops/s
# Warmup Iteration   5: 3738554.681 ops/s
# Warmup Iteration   6: 3771998.631 ops/s
# Warmup Iteration   7: 3766679.153 ops/s
# Warmup Iteration   8: 3770532.133 ops/s
# Warmup Iteration   9: 3751316.958 ops/s
# Warmup Iteration  10: 3774443.612 ops/s
# Warmup Iteration  11: 3776470.494 ops/s
# Warmup Iteration  12: 3766848.369 ops/s
# Warmup Iteration  13: 3782543.843 ops/s
# Warmup Iteration  14: 3733503.764 ops/s
# Warmup Iteration  15: 3765363.351 ops/s
# Warmup Iteration  16: 3761990.687 ops/s
# Warmup Iteration  17: 3787253.342 ops/s
# Warmup Iteration  18: 3762066.337 ops/s
# Warmup Iteration  19: 3788647.529 ops/s
# Warmup Iteration  20: 3722640.059 ops/s
# Warmup Iteration  21: 3767970.692 ops/s
# Warmup Iteration  22: 3771472.257 ops/s
# Warmup Iteration  23: 3768055.485 ops/s
# Warmup Iteration  24: 3790180.292 ops/s
# Warmup Iteration  25: 3781566.530 ops/s
# Warmup Iteration  26: 3772901.886 ops/s
# Warmup Iteration  27: 3785695.919 ops/s
# Warmup Iteration  28: 3770607.786 ops/s
# Warmup Iteration  29: 3743885.715 ops/s
# Warmup Iteration  30: 3781899.398 ops/s
Iteration   1: 3737492.997 ops/s
Iteration   2: 3780732.160 ops/s
Iteration   3: 3775199.490 ops/s
Iteration   4: 3648594.607 ops/s
Iteration   5: 3766868.440 ops/s
Iteration   6: 3769487.656 ops/s
Iteration   7: 3769595.422 ops/s
Iteration   8: 3764560.387 ops/s
Iteration   9: 3712583.348 ops/s
Iteration  10: 3754879.686 ops/s
Iteration  11: 3755566.325 ops/s
Iteration  12: 3753221.068 ops/s
Iteration  13: 3732688.636 ops/s
Iteration  14: 3756475.257 ops/s
Iteration  15: 3712857.848 ops/s
Iteration  16: 3753894.225 ops/s
Iteration  17: 3777543.332 ops/s
Iteration  18: 3709884.727 ops/s
Iteration  19: 3764761.249 ops/s
Iteration  20: 3774097.184 ops/s
Iteration  21: 3761041.863 ops/s
Iteration  22: 3758450.611 ops/s
Iteration  23: 3778193.846 ops/s
Iteration  24: 3754718.759 ops/s
Iteration  25: 3768665.693 ops/s
Iteration  26: 3755400.685 ops/s
Iteration  27: 3783448.110 ops/s
Iteration  28: 3782130.025 ops/s
Iteration  29: 3800451.929 ops/s
Iteration  30: 3794135.342 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable":
  3756920.697 ±(99.9%) 20098.151 ops/s [Average]
  (min, avg, max) = (3648594.607, 3756920.697, 3800451.929), stdev = 30081.968
  CI (99.9%): [3736822.546, 3777018.847] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  3756920.697 ± 20098.151  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1142864.918 ops/s
# Warmup Iteration   2: 2733416.310 ops/s
# Warmup Iteration   3: 2274818.163 ops/s
# Warmup Iteration   4: 2731324.567 ops/s
# Warmup Iteration   5: 2743867.517 ops/s
# Warmup Iteration   6: 2734359.415 ops/s
# Warmup Iteration   7: 2741197.071 ops/s
# Warmup Iteration   8: 2740568.030 ops/s
# Warmup Iteration   9: 2739830.393 ops/s
# Warmup Iteration  10: 2733733.995 ops/s
# Warmup Iteration  11: 2726341.165 ops/s
# Warmup Iteration  12: 2752935.506 ops/s
# Warmup Iteration  13: 2696313.300 ops/s
# Warmup Iteration  14: 2721238.330 ops/s
# Warmup Iteration  15: 2739734.582 ops/s
# Warmup Iteration  16: 2738941.244 ops/s
# Warmup Iteration  17: 2737613.393 ops/s
# Warmup Iteration  18: 2733440.797 ops/s
# Warmup Iteration  19: 2728764.523 ops/s
# Warmup Iteration  20: 2694151.631 ops/s
# Warmup Iteration  21: 2728996.633 ops/s
# Warmup Iteration  22: 2667859.134 ops/s
# Warmup Iteration  23: 2740153.491 ops/s
# Warmup Iteration  24: 2744006.247 ops/s
# Warmup Iteration  25: 2730972.724 ops/s
# Warmup Iteration  26: 2736666.133 ops/s
# Warmup Iteration  27: 2730058.502 ops/s
# Warmup Iteration  28: 2751556.930 ops/s
# Warmup Iteration  29: 2738577.229 ops/s
# Warmup Iteration  30: 2751484.728 ops/s
Iteration   1: 2741577.278 ops/s
Iteration   2: 2725581.681 ops/s
Iteration   3: 2723250.337 ops/s
Iteration   4: 2738238.369 ops/s
Iteration   5: 2730123.940 ops/s
Iteration   6: 2729977.371 ops/s
Iteration   7: 2740283.446 ops/s
Iteration   8: 2734494.745 ops/s
Iteration   9: 2710372.512 ops/s
Iteration  10: 2732126.397 ops/s
Iteration  11: 2742603.498 ops/s
Iteration  12: 2750382.290 ops/s
Iteration  13: 2730289.972 ops/s
Iteration  14: 2687531.908 ops/s
Iteration  15: 2742488.578 ops/s
Iteration  16: 2698102.202 ops/s
Iteration  17: 2734428.810 ops/s
Iteration  18: 2746314.376 ops/s
Iteration  19: 2702120.148 ops/s
Iteration  20: 2750916.662 ops/s
Iteration  21: 2735923.080 ops/s
Iteration  22: 2738002.576 ops/s
Iteration  23: 2742802.596 ops/s
Iteration  24: 2730401.921 ops/s
Iteration  25: 2729361.947 ops/s
Iteration  26: 2731694.910 ops/s
Iteration  27: 2736866.027 ops/s
Iteration  28: 2743851.841 ops/s
Iteration  29: 2698133.559 ops/s
Iteration  30: 2730179.860 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_retainAll":
  2730280.761 ±(99.9%) 10638.745 ops/s [Average]
  (min, avg, max) = (2687531.908, 2730280.761, 2750916.662), stdev = 15923.574
  CI (99.9%): [2719642.016, 2740919.506] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_retainAll  thrpt   30  2730280.761 ± 10638.745  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 614757.321 ops/s
# Warmup Iteration   2: 1494209.790 ops/s
# Warmup Iteration   3: 1525624.597 ops/s
# Warmup Iteration   4: 1255360.194 ops/s
# Warmup Iteration   5: 1512682.144 ops/s
# Warmup Iteration   6: 1525197.536 ops/s
# Warmup Iteration   7: 1495351.460 ops/s
# Warmup Iteration   8: 1521808.262 ops/s
# Warmup Iteration   9: 1513092.142 ops/s
# Warmup Iteration  10: 1528041.456 ops/s
# Warmup Iteration  11: 1530037.254 ops/s
# Warmup Iteration  12: 1531539.485 ops/s
# Warmup Iteration  13: 1524065.619 ops/s
# Warmup Iteration  14: 1530040.783 ops/s
# Warmup Iteration  15: 1526463.192 ops/s
# Warmup Iteration  16: 1506096.306 ops/s
# Warmup Iteration  17: 1534585.199 ops/s
# Warmup Iteration  18: 1527886.230 ops/s
# Warmup Iteration  19: 1528880.041 ops/s
# Warmup Iteration  20: 1532002.691 ops/s
# Warmup Iteration  21: 1526578.207 ops/s
# Warmup Iteration  22: 1529049.765 ops/s
# Warmup Iteration  23: 1522811.256 ops/s
# Warmup Iteration  24: 1533536.763 ops/s
# Warmup Iteration  25: 1524889.408 ops/s
# Warmup Iteration  26: 1535131.620 ops/s
# Warmup Iteration  27: 1529695.949 ops/s
# Warmup Iteration  28: 1526602.169 ops/s
# Warmup Iteration  29: 1517780.007 ops/s
# Warmup Iteration  30: 1533481.039 ops/s
Iteration   1: 1531485.078 ops/s
Iteration   2: 1511846.796 ops/s
Iteration   3: 1510367.991 ops/s
Iteration   4: 1531865.148 ops/s
Iteration   5: 1533201.219 ops/s
Iteration   6: 1481886.974 ops/s
Iteration   7: 1536893.640 ops/s
Iteration   8: 1528593.645 ops/s
Iteration   9: 1524704.847 ops/s
Iteration  10: 1530024.189 ops/s
Iteration  11: 1533449.996 ops/s
Iteration  12: 1533607.996 ops/s
Iteration  13: 1531068.115 ops/s
Iteration  14: 1500519.119 ops/s
Iteration  15: 1524339.610 ops/s
Iteration  16: 1522243.562 ops/s
Iteration  17: 1532849.543 ops/s
Iteration  18: 1526113.388 ops/s
Iteration  19: 1532674.553 ops/s
Iteration  20: 1487810.290 ops/s
Iteration  21: 1531568.353 ops/s
Iteration  22: 1510662.512 ops/s
Iteration  23: 1520528.126 ops/s
Iteration  24: 1523651.107 ops/s
Iteration  25: 1506028.255 ops/s
Iteration  26: 1532736.345 ops/s
Iteration  27: 1525059.869 ops/s
Iteration  28: 1524335.582 ops/s
Iteration  29: 1534008.906 ops/s
Iteration  30: 1514052.127 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable":
  1522272.563 ±(99.9%) 9238.569 ops/s [Average]
  (min, avg, max) = (1481886.974, 1522272.563, 1536893.640), stdev = 13827.856
  CI (99.9%): [1513033.994, 1531511.132] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  1522272.563 ± 9238.569  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4000413.720 ops/s
# Warmup Iteration   2: 8509486.013 ops/s
# Warmup Iteration   3: 8902621.937 ops/s
# Warmup Iteration   4: 10588078.583 ops/s
# Warmup Iteration   5: 10659011.424 ops/s
# Warmup Iteration   6: 10468754.081 ops/s
# Warmup Iteration   7: 10584360.283 ops/s
# Warmup Iteration   8: 10578343.023 ops/s
# Warmup Iteration   9: 10545215.253 ops/s
# Warmup Iteration  10: 10527427.519 ops/s
# Warmup Iteration  11: 10644280.781 ops/s
# Warmup Iteration  12: 10562370.781 ops/s
# Warmup Iteration  13: 10567706.126 ops/s
# Warmup Iteration  14: 10658531.309 ops/s
# Warmup Iteration  15: 10591534.854 ops/s
# Warmup Iteration  16: 10612962.403 ops/s
# Warmup Iteration  17: 10500729.293 ops/s
# Warmup Iteration  18: 10555236.620 ops/s
# Warmup Iteration  19: 10611632.642 ops/s
# Warmup Iteration  20: 10424328.808 ops/s
# Warmup Iteration  21: 10644786.614 ops/s
# Warmup Iteration  22: 10615178.077 ops/s
# Warmup Iteration  23: 10671376.724 ops/s
# Warmup Iteration  24: 10659437.468 ops/s
# Warmup Iteration  25: 10616739.687 ops/s
# Warmup Iteration  26: 10502463.861 ops/s
# Warmup Iteration  27: 10556932.255 ops/s
# Warmup Iteration  28: 10602502.049 ops/s
# Warmup Iteration  29: 10634219.881 ops/s
# Warmup Iteration  30: 10634438.186 ops/s
Iteration   1: 10589659.304 ops/s
Iteration   2: 10619179.326 ops/s
Iteration   3: 10597767.584 ops/s
Iteration   4: 10603358.033 ops/s
Iteration   5: 10620773.166 ops/s
Iteration   6: 10328200.280 ops/s
Iteration   7: 10539037.370 ops/s
Iteration   8: 10482573.552 ops/s
Iteration   9: 10511921.354 ops/s
Iteration  10: 10484229.719 ops/s
Iteration  11: 10497812.726 ops/s
Iteration  12: 10509717.332 ops/s
Iteration  13: 10503954.360 ops/s
Iteration  14: 10486542.189 ops/s
Iteration  15: 10456384.297 ops/s
Iteration  16: 10463704.881 ops/s
Iteration  17: 10488763.178 ops/s
Iteration  18: 10508957.005 ops/s
Iteration  19: 10504724.506 ops/s
Iteration  20: 10565844.802 ops/s
Iteration  21: 10634827.113 ops/s
Iteration  22: 10523285.631 ops/s
Iteration  23: 10398864.625 ops/s
Iteration  24: 10461276.696 ops/s
Iteration  25: 10512743.138 ops/s
Iteration  26: 10471472.460 ops/s
Iteration  27: 10554878.638 ops/s
Iteration  28: 10522667.238 ops/s
Iteration  29: 10572653.676 ops/s
Iteration  30: 10526486.096 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_select":
  10518075.343 ±(99.9%) 44389.123 ops/s [Average]
  (min, avg, max) = (10328200.280, 10518075.343, 10634827.113), stdev = 66439.555
  CI (99.9%): [10473686.219, 10562464.466] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_select  thrpt   30  10518075.343 ± 44389.123  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1537464.831 ops/s
# Warmup Iteration   2: 3344639.229 ops/s
# Warmup Iteration   3: 3983284.854 ops/s
# Warmup Iteration   4: 4732188.238 ops/s
# Warmup Iteration   5: 4714963.711 ops/s
# Warmup Iteration   6: 4728322.555 ops/s
# Warmup Iteration   7: 4694161.447 ops/s
# Warmup Iteration   8: 4680703.569 ops/s
# Warmup Iteration   9: 4714846.901 ops/s
# Warmup Iteration  10: 4714047.103 ops/s
# Warmup Iteration  11: 4696786.381 ops/s
# Warmup Iteration  12: 4683635.340 ops/s
# Warmup Iteration  13: 4667156.371 ops/s
# Warmup Iteration  14: 4701804.946 ops/s
# Warmup Iteration  15: 4706800.925 ops/s
# Warmup Iteration  16: 4690192.163 ops/s
# Warmup Iteration  17: 4688068.269 ops/s
# Warmup Iteration  18: 4687098.237 ops/s
# Warmup Iteration  19: 4713558.535 ops/s
# Warmup Iteration  20: 4641971.324 ops/s
# Warmup Iteration  21: 4690025.014 ops/s
# Warmup Iteration  22: 4659873.914 ops/s
# Warmup Iteration  23: 4697834.261 ops/s
# Warmup Iteration  24: 4723474.573 ops/s
# Warmup Iteration  25: 4712172.071 ops/s
# Warmup Iteration  26: 4731002.392 ops/s
# Warmup Iteration  27: 4711131.522 ops/s
# Warmup Iteration  28: 4725156.260 ops/s
# Warmup Iteration  29: 4729818.238 ops/s
# Warmup Iteration  30: 4760271.928 ops/s
Iteration   1: 4771861.782 ops/s
Iteration   2: 4668431.894 ops/s
Iteration   3: 4719403.412 ops/s
Iteration   4: 4744145.767 ops/s
Iteration   5: 4719739.774 ops/s
Iteration   6: 4736334.624 ops/s
Iteration   7: 4709035.104 ops/s
Iteration   8: 4672253.490 ops/s
Iteration   9: 4697053.613 ops/s
Iteration  10: 4707547.795 ops/s
Iteration  11: 4702194.162 ops/s
Iteration  12: 4720021.102 ops/s
Iteration  13: 4740568.443 ops/s
Iteration  14: 4702669.014 ops/s
Iteration  15: 4733605.678 ops/s
Iteration  16: 4723265.647 ops/s
Iteration  17: 4649814.012 ops/s
Iteration  18: 4663744.073 ops/s
Iteration  19: 4721801.853 ops/s
Iteration  20: 4713620.687 ops/s
Iteration  21: 4729626.927 ops/s
Iteration  22: 4660986.222 ops/s
Iteration  23: 4625736.096 ops/s
Iteration  24: 4720567.302 ops/s
Iteration  25: 4734900.521 ops/s
Iteration  26: 4738173.715 ops/s
Iteration  27: 4742741.344 ops/s
Iteration  28: 4734082.684 ops/s
Iteration  29: 4759018.776 ops/s
Iteration  30: 4727790.271 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_size":
  4713024.526 ±(99.9%) 22367.686 ops/s [Average]
  (min, avg, max) = (4625736.096, 4713024.526, 4771861.782), stdev = 33478.902
  CI (99.9%): [4690656.840, 4735392.212] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_size  thrpt   30  4713024.526 ± 22367.686  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 164877211.102 ops/s
# Warmup Iteration   2: 294917873.184 ops/s
# Warmup Iteration   3: 255100967.781 ops/s
# Warmup Iteration   4: 301886224.034 ops/s
# Warmup Iteration   5: 302253838.425 ops/s
# Warmup Iteration   6: 300022997.664 ops/s
# Warmup Iteration   7: 300711603.844 ops/s
# Warmup Iteration   8: 301877685.022 ops/s
# Warmup Iteration   9: 301983670.745 ops/s
# Warmup Iteration  10: 303602285.754 ops/s
# Warmup Iteration  11: 302058969.131 ops/s
# Warmup Iteration  12: 300451082.451 ops/s
# Warmup Iteration  13: 304633996.567 ops/s
# Warmup Iteration  14: 303542827.710 ops/s
# Warmup Iteration  15: 303363817.364 ops/s
# Warmup Iteration  16: 302701415.651 ops/s
# Warmup Iteration  17: 303248633.741 ops/s
# Warmup Iteration  18: 303434074.476 ops/s
# Warmup Iteration  19: 303348684.808 ops/s
# Warmup Iteration  20: 302809338.189 ops/s
# Warmup Iteration  21: 303243522.583 ops/s
# Warmup Iteration  22: 300829965.914 ops/s
# Warmup Iteration  23: 302649156.124 ops/s
# Warmup Iteration  24: 298579978.325 ops/s
# Warmup Iteration  25: 304102239.279 ops/s
# Warmup Iteration  26: 302784080.179 ops/s
# Warmup Iteration  27: 302234312.815 ops/s
# Warmup Iteration  28: 298316442.281 ops/s
# Warmup Iteration  29: 304331925.238 ops/s
# Warmup Iteration  30: 302675537.637 ops/s
Iteration   1: 300549404.549 ops/s
Iteration   2: 302899422.375 ops/s
Iteration   3: 303518012.745 ops/s
Iteration   4: 303759255.977 ops/s
Iteration   5: 303125876.239 ops/s
Iteration   6: 301579227.836 ops/s
Iteration   7: 303820138.934 ops/s
Iteration   8: 304120788.179 ops/s
Iteration   9: 302963534.816 ops/s
Iteration  10: 301854622.995 ops/s
Iteration  11: 302465131.037 ops/s
Iteration  12: 300655965.995 ops/s
Iteration  13: 298139931.614 ops/s
Iteration  14: 301559612.301 ops/s
Iteration  15: 301162089.855 ops/s
Iteration  16: 303792564.689 ops/s
Iteration  17: 300749944.575 ops/s
Iteration  18: 298936276.950 ops/s
Iteration  19: 301097221.764 ops/s
Iteration  20: 298491258.324 ops/s
Iteration  21: 300154906.797 ops/s
Iteration  22: 299833047.218 ops/s
Iteration  23: 300090117.430 ops/s
Iteration  24: 298012025.010 ops/s
Iteration  25: 301131210.607 ops/s
Iteration  26: 301542768.634 ops/s
Iteration  27: 302444158.638 ops/s
Iteration  28: 302002933.895 ops/s
Iteration  29: 302943522.881 ops/s
Iteration  30: 301704181.422 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_testEquals":
  301503305.143 ±(99.9%) 1150631.036 ops/s [Average]
  (min, avg, max) = (298012025.010, 301503305.143, 304120788.179), stdev = 1722210.497
  CI (99.9%): [300352674.107, 302653936.178] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt          Score         Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_testEquals  thrpt   30  301503305.143 ± 1150631.036  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 159118656.803 ops/s
# Warmup Iteration   2: 297262118.501 ops/s
# Warmup Iteration   3: 253795207.926 ops/s
# Warmup Iteration   4: 302532038.297 ops/s
# Warmup Iteration   5: 300213765.463 ops/s
# Warmup Iteration   6: 302936814.758 ops/s
# Warmup Iteration   7: 300615977.973 ops/s
# Warmup Iteration   8: 302901969.384 ops/s
# Warmup Iteration   9: 301971504.466 ops/s
# Warmup Iteration  10: 304814354.239 ops/s
# Warmup Iteration  11: 304197187.600 ops/s
# Warmup Iteration  12: 302994847.604 ops/s
# Warmup Iteration  13: 305344718.526 ops/s
# Warmup Iteration  14: 303447400.069 ops/s
# Warmup Iteration  15: 304634139.591 ops/s
# Warmup Iteration  16: 305366624.461 ops/s
# Warmup Iteration  17: 305459797.351 ops/s
# Warmup Iteration  18: 302849058.084 ops/s
# Warmup Iteration  19: 304785622.259 ops/s
# Warmup Iteration  20: 303350565.811 ops/s
# Warmup Iteration  21: 301104541.042 ops/s
# Warmup Iteration  22: 302598994.293 ops/s
# Warmup Iteration  23: 303662750.050 ops/s
# Warmup Iteration  24: 307060060.394 ops/s
# Warmup Iteration  25: 305035901.227 ops/s
# Warmup Iteration  26: 305267626.577 ops/s
# Warmup Iteration  27: 305355319.719 ops/s
# Warmup Iteration  28: 306174156.660 ops/s
# Warmup Iteration  29: 306052426.929 ops/s
# Warmup Iteration  30: 305193989.289 ops/s
Iteration   1: 305966636.179 ops/s
Iteration   2: 290647823.591 ops/s
Iteration   3: 304550749.569 ops/s
Iteration   4: 304253944.199 ops/s
Iteration   5: 304743298.129 ops/s
Iteration   6: 297987718.684 ops/s
Iteration   7: 294867853.075 ops/s
Iteration   8: 304270689.379 ops/s
Iteration   9: 302622132.276 ops/s
Iteration  10: 302654364.838 ops/s
Iteration  11: 300480003.063 ops/s
Iteration  12: 302305043.664 ops/s
Iteration  13: 302635741.914 ops/s
Iteration  14: 303639814.778 ops/s
Iteration  15: 301139723.321 ops/s
Iteration  16: 303424906.679 ops/s
Iteration  17: 300124218.598 ops/s
Iteration  18: 297805778.115 ops/s
Iteration  19: 305152191.350 ops/s
Iteration  20: 304519133.354 ops/s
Iteration  21: 305956093.068 ops/s
Iteration  22: 298310911.958 ops/s
Iteration  23: 299970952.124 ops/s
Iteration  24: 297587344.546 ops/s
Iteration  25: 305317733.784 ops/s
Iteration  26: 304822031.925 ops/s
Iteration  27: 300032758.999 ops/s
Iteration  28: 304999505.649 ops/s
Iteration  29: 301670345.715 ops/s
Iteration  30: 305031219.133 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_testHashCode":
  301916355.389 ±(99.9%) 2406002.958 ops/s [Average]
  (min, avg, max) = (290647823.591, 301916355.389, 305966636.179), stdev = 3601192.233
  CI (99.9%): [299510352.431, 304322358.346] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt          Score         Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_testHashCode  thrpt   30  301916355.389 ± 2406002.958  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 163027791.438 ops/s
# Warmup Iteration   2: 300465583.495 ops/s
# Warmup Iteration   3: 257661224.815 ops/s
# Warmup Iteration   4: 301624633.882 ops/s
# Warmup Iteration   5: 303161996.645 ops/s
# Warmup Iteration   6: 301108320.297 ops/s
# Warmup Iteration   7: 300503977.930 ops/s
# Warmup Iteration   8: 302565598.668 ops/s
# Warmup Iteration   9: 302396629.199 ops/s
# Warmup Iteration  10: 301961376.291 ops/s
# Warmup Iteration  11: 300789436.001 ops/s
# Warmup Iteration  12: 302235194.831 ops/s
# Warmup Iteration  13: 301887092.709 ops/s
# Warmup Iteration  14: 303851249.317 ops/s
# Warmup Iteration  15: 302232714.796 ops/s
# Warmup Iteration  16: 297266256.266 ops/s
# Warmup Iteration  17: 302117621.032 ops/s
# Warmup Iteration  18: 299605981.574 ops/s
# Warmup Iteration  19: 301345043.483 ops/s
# Warmup Iteration  20: 299477488.344 ops/s
# Warmup Iteration  21: 300931975.187 ops/s
# Warmup Iteration  22: 301396879.194 ops/s
# Warmup Iteration  23: 301594511.588 ops/s
# Warmup Iteration  24: 300899098.923 ops/s
# Warmup Iteration  25: 301242156.484 ops/s
# Warmup Iteration  26: 299936122.138 ops/s
# Warmup Iteration  27: 299415019.933 ops/s
# Warmup Iteration  28: 302392218.618 ops/s
# Warmup Iteration  29: 297482936.193 ops/s
# Warmup Iteration  30: 301804297.344 ops/s
Iteration   1: 301999075.029 ops/s
Iteration   2: 298060791.914 ops/s
Iteration   3: 301733062.549 ops/s
Iteration   4: 301587422.235 ops/s
Iteration   5: 301264723.412 ops/s
Iteration   6: 302489356.487 ops/s
Iteration   7: 303998783.717 ops/s
Iteration   8: 303205079.431 ops/s
Iteration   9: 300108066.493 ops/s
Iteration  10: 298107990.712 ops/s
Iteration  11: 297696580.149 ops/s
Iteration  12: 299537397.698 ops/s
Iteration  13: 303777940.483 ops/s
Iteration  14: 301767121.342 ops/s
Iteration  15: 300699330.199 ops/s
Iteration  16: 305074628.957 ops/s
Iteration  17: 301238561.679 ops/s
Iteration  18: 299320509.608 ops/s
Iteration  19: 302176507.897 ops/s
Iteration  20: 301922404.495 ops/s
Iteration  21: 300957611.023 ops/s
Iteration  22: 302637854.955 ops/s
Iteration  23: 302040743.215 ops/s
Iteration  24: 296275848.945 ops/s
Iteration  25: 294483733.174 ops/s
Iteration  26: 297885715.659 ops/s
Iteration  27: 300768059.350 ops/s
Iteration  28: 298734225.047 ops/s
Iteration  29: 298239003.958 ops/s
Iteration  30: 301902951.109 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_testToString":
  300656369.364 ±(99.9%) 1604785.857 ops/s [Average]
  (min, avg, max) = (294483733.174, 300656369.364, 305074628.957), stdev = 2401968.104
  CI (99.9%): [299051583.507, 302261155.221] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt          Score         Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_testToString  thrpt   30  300656369.364 ± 1604785.857  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1344342.188 ops/s
# Warmup Iteration   2: 2987739.592 ops/s
# Warmup Iteration   3: 3162550.455 ops/s
# Warmup Iteration   4: 3806312.199 ops/s
# Warmup Iteration   5: 3802101.574 ops/s
# Warmup Iteration   6: 3805488.501 ops/s
# Warmup Iteration   7: 3799938.869 ops/s
# Warmup Iteration   8: 3822326.963 ops/s
# Warmup Iteration   9: 3844821.315 ops/s
# Warmup Iteration  10: 3825274.946 ops/s
# Warmup Iteration  11: 3809920.020 ops/s
# Warmup Iteration  12: 3843777.800 ops/s
# Warmup Iteration  13: 3827310.755 ops/s
# Warmup Iteration  14: 3744109.104 ops/s
# Warmup Iteration  15: 3730966.508 ops/s
# Warmup Iteration  16: 3803770.312 ops/s
# Warmup Iteration  17: 3752473.415 ops/s
# Warmup Iteration  18: 3794712.169 ops/s
# Warmup Iteration  19: 3791677.982 ops/s
# Warmup Iteration  20: 3811592.319 ops/s
# Warmup Iteration  21: 3805178.642 ops/s
# Warmup Iteration  22: 3810105.392 ops/s
# Warmup Iteration  23: 3842004.800 ops/s
# Warmup Iteration  24: 3815444.718 ops/s
# Warmup Iteration  25: 3814029.486 ops/s
# Warmup Iteration  26: 3821495.677 ops/s
# Warmup Iteration  27: 3819386.690 ops/s
# Warmup Iteration  28: 3779432.950 ops/s
# Warmup Iteration  29: 3838891.636 ops/s
# Warmup Iteration  30: 3826284.802 ops/s
Iteration   1: 3820606.303 ops/s
Iteration   2: 3824188.020 ops/s
Iteration   3: 3820276.597 ops/s
Iteration   4: 3770646.179 ops/s
Iteration   5: 3826775.294 ops/s
Iteration   6: 3794269.072 ops/s
Iteration   7: 3842223.776 ops/s
Iteration   8: 3830858.615 ops/s
Iteration   9: 3828080.405 ops/s
Iteration  10: 3813526.515 ops/s
Iteration  11: 3768306.845 ops/s
Iteration  12: 3814944.068 ops/s
Iteration  13: 3773047.886 ops/s
Iteration  14: 3831136.409 ops/s
Iteration  15: 3847394.743 ops/s
Iteration  16: 3818578.626 ops/s
Iteration  17: 3823801.346 ops/s
Iteration  18: 3823429.119 ops/s
Iteration  19: 3825510.873 ops/s
Iteration  20: 3820177.935 ops/s
Iteration  21: 3792549.215 ops/s
Iteration  22: 3815597.073 ops/s
Iteration  23: 3837483.128 ops/s
Iteration  24: 3835627.928 ops/s
Iteration  25: 3823989.783 ops/s
Iteration  26: 3810933.510 ops/s
Iteration  27: 3795092.522 ops/s
Iteration  28: 3817357.091 ops/s
Iteration  29: 3750818.119 ops/s
Iteration  30: 3821479.852 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_toArray":
  3813956.895 ±(99.9%) 15424.684 ops/s [Average]
  (min, avg, max) = (3750818.119, 3813956.895, 3847394.743), stdev = 23086.943
  CI (99.9%): [3798532.211, 3829381.579] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_toArray  thrpt   30  3813956.895 ± 15424.684  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 881191.204 ops/s
# Warmup Iteration   2: 1682375.915 ops/s
# Warmup Iteration   3: 2080159.806 ops/s
# Warmup Iteration   4: 2023251.193 ops/s
# Warmup Iteration   5: 1766292.638 ops/s
# Warmup Iteration   6: 2044813.341 ops/s
# Warmup Iteration   7: 2064964.125 ops/s
# Warmup Iteration   8: 2050189.811 ops/s
# Warmup Iteration   9: 2083730.059 ops/s
# Warmup Iteration  10: 2082295.956 ops/s
# Warmup Iteration  11: 2080993.281 ops/s
# Warmup Iteration  12: 2080306.417 ops/s
# Warmup Iteration  13: 2084878.264 ops/s
# Warmup Iteration  14: 2085329.383 ops/s
# Warmup Iteration  15: 2068744.752 ops/s
# Warmup Iteration  16: 2086693.255 ops/s
# Warmup Iteration  17: 2087809.670 ops/s
# Warmup Iteration  18: 2088494.666 ops/s
# Warmup Iteration  19: 2070297.261 ops/s
# Warmup Iteration  20: 2090314.048 ops/s
# Warmup Iteration  21: 2081530.583 ops/s
# Warmup Iteration  22: 2090374.908 ops/s
# Warmup Iteration  23: 2063228.643 ops/s
# Warmup Iteration  24: 2056541.349 ops/s
# Warmup Iteration  25: 2085689.689 ops/s
# Warmup Iteration  26: 2083799.162 ops/s
# Warmup Iteration  27: 2080039.103 ops/s
# Warmup Iteration  28: 2093831.152 ops/s
# Warmup Iteration  29: 2086143.538 ops/s
# Warmup Iteration  30: 2080780.858 ops/s
Iteration   1: 2079552.381 ops/s
Iteration   2: 2068626.756 ops/s
Iteration   3: 2047546.445 ops/s
Iteration   4: 2086735.617 ops/s
Iteration   5: 2093164.471 ops/s
Iteration   6: 2088627.093 ops/s
Iteration   7: 2052280.435 ops/s
Iteration   8: 2082322.117 ops/s
Iteration   9: 2088762.949 ops/s
Iteration  10: 2083446.605 ops/s
Iteration  11: 2081069.861 ops/s
Iteration  12: 2076992.088 ops/s
Iteration  13: 2091981.068 ops/s
Iteration  14: 2051770.731 ops/s
Iteration  15: 2084116.583 ops/s
Iteration  16: 2081380.246 ops/s
Iteration  17: 2082218.354 ops/s
Iteration  18: 2051188.797 ops/s
Iteration  19: 2078422.135 ops/s
Iteration  20: 2062649.337 ops/s
Iteration  21: 2075586.515 ops/s
Iteration  22: 2074189.261 ops/s
Iteration  23: 2069429.925 ops/s
Iteration  24: 2081327.344 ops/s
Iteration  25: 2080285.611 ops/s
Iteration  26: 2089227.797 ops/s
Iteration  27: 2076745.002 ops/s
Iteration  28: 2089641.321 ops/s
Iteration  29: 2073343.565 ops/s
Iteration  30: 2045613.050 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_toBag":
  2075608.115 ±(99.9%) 9158.994 ops/s [Average]
  (min, avg, max) = (2045613.050, 2075608.115, 2093164.471), stdev = 13708.753
  CI (99.9%): [2066449.121, 2084767.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_toBag  thrpt   30  2075608.115 ± 9158.994  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1082290.544 ops/s
# Warmup Iteration   2: 2565024.585 ops/s
# Warmup Iteration   3: 2381426.399 ops/s
# Warmup Iteration   4: 2913339.160 ops/s
# Warmup Iteration   5: 2930648.625 ops/s
# Warmup Iteration   6: 2903517.783 ops/s
# Warmup Iteration   7: 2910218.494 ops/s
# Warmup Iteration   8: 2925890.682 ops/s
# Warmup Iteration   9: 2902700.796 ops/s
# Warmup Iteration  10: 2905101.681 ops/s
# Warmup Iteration  11: 2922697.299 ops/s
# Warmup Iteration  12: 2914712.801 ops/s
# Warmup Iteration  13: 2909850.349 ops/s
# Warmup Iteration  14: 2917429.849 ops/s
# Warmup Iteration  15: 2932184.869 ops/s
# Warmup Iteration  16: 2913268.911 ops/s
# Warmup Iteration  17: 2913826.747 ops/s
# Warmup Iteration  18: 2925827.799 ops/s
# Warmup Iteration  19: 2908953.311 ops/s
# Warmup Iteration  20: 2916758.631 ops/s
# Warmup Iteration  21: 2938806.970 ops/s
# Warmup Iteration  22: 2910493.248 ops/s
# Warmup Iteration  23: 2897456.882 ops/s
# Warmup Iteration  24: 2905921.800 ops/s
# Warmup Iteration  25: 2926029.385 ops/s
# Warmup Iteration  26: 2911163.708 ops/s
# Warmup Iteration  27: 2920062.076 ops/s
# Warmup Iteration  28: 2916754.308 ops/s
# Warmup Iteration  29: 2928527.549 ops/s
# Warmup Iteration  30: 2918556.975 ops/s
Iteration   1: 2920972.923 ops/s
Iteration   2: 2886382.509 ops/s
Iteration   3: 2924634.859 ops/s
Iteration   4: 2913351.008 ops/s
Iteration   5: 2907735.868 ops/s
Iteration   6: 2922417.965 ops/s
Iteration   7: 2938220.704 ops/s
Iteration   8: 2914004.160 ops/s
Iteration   9: 2868274.011 ops/s
Iteration  10: 2931312.738 ops/s
Iteration  11: 2922834.535 ops/s
Iteration  12: 2929539.785 ops/s
Iteration  13: 2876286.425 ops/s
Iteration  14: 2852284.881 ops/s
Iteration  15: 2914761.005 ops/s
Iteration  16: 2929329.564 ops/s
Iteration  17: 2922810.048 ops/s
Iteration  18: 2923918.941 ops/s
Iteration  19: 2915038.567 ops/s
Iteration  20: 2902859.527 ops/s
Iteration  21: 2932074.278 ops/s
Iteration  22: 2869639.220 ops/s
Iteration  23: 2923544.032 ops/s
Iteration  24: 2889666.847 ops/s
Iteration  25: 2932921.985 ops/s
Iteration  26: 2935225.118 ops/s
Iteration  27: 2914178.628 ops/s
Iteration  28: 2919748.704 ops/s
Iteration  29: 2924986.283 ops/s
Iteration  30: 2927341.797 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_toList":
  2912876.564 ±(99.9%) 14773.582 ops/s [Average]
  (min, avg, max) = (2852284.881, 2912876.564, 2938220.704), stdev = 22112.404
  CI (99.9%): [2898102.982, 2927650.146] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_toList  thrpt   30  2912876.564 ± 14773.582  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1482166.715 ops/s
# Warmup Iteration   2: 3467560.336 ops/s
# Warmup Iteration   3: 3841119.413 ops/s
# Warmup Iteration   4: 3808010.063 ops/s
# Warmup Iteration   5: 4204744.207 ops/s
# Warmup Iteration   6: 4159640.630 ops/s
# Warmup Iteration   7: 4166971.066 ops/s
# Warmup Iteration   8: 4171828.761 ops/s
# Warmup Iteration   9: 4157354.758 ops/s
# Warmup Iteration  10: 4192980.509 ops/s
# Warmup Iteration  11: 4152846.184 ops/s
# Warmup Iteration  12: 4178844.797 ops/s
# Warmup Iteration  13: 4189818.890 ops/s
# Warmup Iteration  14: 4196576.538 ops/s
# Warmup Iteration  15: 4194976.316 ops/s
# Warmup Iteration  16: 4115879.102 ops/s
# Warmup Iteration  17: 4176589.314 ops/s
# Warmup Iteration  18: 4182673.325 ops/s
# Warmup Iteration  19: 4196833.658 ops/s
# Warmup Iteration  20: 4201698.503 ops/s
# Warmup Iteration  21: 4198956.683 ops/s
# Warmup Iteration  22: 4215485.193 ops/s
# Warmup Iteration  23: 4192378.304 ops/s
# Warmup Iteration  24: 4200254.796 ops/s
# Warmup Iteration  25: 4198307.459 ops/s
# Warmup Iteration  26: 4186505.545 ops/s
# Warmup Iteration  27: 4188968.970 ops/s
# Warmup Iteration  28: 4187498.541 ops/s
# Warmup Iteration  29: 4204842.483 ops/s
# Warmup Iteration  30: 4207276.239 ops/s
Iteration   1: 4132263.836 ops/s
Iteration   2: 4214868.532 ops/s
Iteration   3: 4228753.519 ops/s
Iteration   4: 4220194.850 ops/s
Iteration   5: 4213809.963 ops/s
Iteration   6: 4184998.661 ops/s
Iteration   7: 4201994.070 ops/s
Iteration   8: 4205284.091 ops/s
Iteration   9: 4202825.281 ops/s
Iteration  10: 4226190.119 ops/s
Iteration  11: 4183395.440 ops/s
Iteration  12: 4107052.137 ops/s
Iteration  13: 4178473.039 ops/s
Iteration  14: 4236771.384 ops/s
Iteration  15: 4214391.363 ops/s
Iteration  16: 4181005.766 ops/s
Iteration  17: 4181601.128 ops/s
Iteration  18: 4189585.886 ops/s
Iteration  19: 4191587.720 ops/s
Iteration  20: 4196031.950 ops/s
Iteration  21: 4203773.615 ops/s
Iteration  22: 4172743.305 ops/s
Iteration  23: 4152672.650 ops/s
Iteration  24: 4127374.624 ops/s
Iteration  25: 4159142.726 ops/s
Iteration  26: 4202650.057 ops/s
Iteration  27: 4170545.991 ops/s
Iteration  28: 4204596.505 ops/s
Iteration  29: 4173428.089 ops/s
Iteration  30: 4194312.526 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_toSet":
  4188410.627 ±(99.9%) 20220.331 ops/s [Average]
  (min, avg, max) = (4107052.137, 4188410.627, 4236771.384), stdev = 30264.841
  CI (99.9%): [4168190.297, 4208630.958] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_toSet  thrpt   30  4188410.627 ± 20220.331  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 670761.294 ops/s
# Warmup Iteration   2: 719494.753 ops/s
# Warmup Iteration   3: 968665.503 ops/s
# Warmup Iteration   4: 969246.034 ops/s
# Warmup Iteration   5: 966993.089 ops/s
# Warmup Iteration   6: 966512.224 ops/s
# Warmup Iteration   7: 970696.848 ops/s
# Warmup Iteration   8: 968517.148 ops/s
# Warmup Iteration   9: 964163.794 ops/s
# Warmup Iteration  10: 882977.183 ops/s
# Warmup Iteration  11: 885386.591 ops/s
# Warmup Iteration  12: 964659.853 ops/s
# Warmup Iteration  13: 970722.203 ops/s
# Warmup Iteration  14: 971224.085 ops/s
# Warmup Iteration  15: 966542.309 ops/s
# Warmup Iteration  16: 968788.932 ops/s
# Warmup Iteration  17: 1027807.682 ops/s
# Warmup Iteration  18: 1013131.605 ops/s
# Warmup Iteration  19: 1021139.968 ops/s
# Warmup Iteration  20: 1017375.640 ops/s
# Warmup Iteration  21: 1021873.869 ops/s
# Warmup Iteration  22: 1024432.266 ops/s
# Warmup Iteration  23: 1012741.331 ops/s
# Warmup Iteration  24: 1018709.849 ops/s
# Warmup Iteration  25: 1026900.000 ops/s
# Warmup Iteration  26: 1028043.258 ops/s
# Warmup Iteration  27: 1023790.348 ops/s
# Warmup Iteration  28: 1021983.746 ops/s
# Warmup Iteration  29: 1025806.815 ops/s
# Warmup Iteration  30: 1028610.913 ops/s
Iteration   1: 1025344.655 ops/s
Iteration   2: 1026461.039 ops/s
Iteration   3: 1028666.224 ops/s
Iteration   4: 1035805.134 ops/s
Iteration   5: 1026510.502 ops/s
Iteration   6: 1032611.289 ops/s
Iteration   7: 1023389.888 ops/s
Iteration   8: 1026995.144 ops/s
Iteration   9: 1025405.676 ops/s
Iteration  10: 1021546.104 ops/s
Iteration  11: 1022793.802 ops/s
Iteration  12: 1021209.648 ops/s
Iteration  13: 1029021.897 ops/s
Iteration  14: 1024887.396 ops/s
Iteration  15: 1021299.513 ops/s
Iteration  16: 1024958.884 ops/s
Iteration  17: 1024393.867 ops/s
Iteration  18: 1028884.847 ops/s
Iteration  19: 1023924.765 ops/s
Iteration  20: 1028518.208 ops/s
Iteration  21: 1026391.329 ops/s
Iteration  22: 1030027.217 ops/s
Iteration  23: 1031810.300 ops/s
Iteration  24: 1026602.716 ops/s
Iteration  25: 1027419.877 ops/s
Iteration  26: 1024979.198 ops/s
Iteration  27: 1006194.204 ops/s
Iteration  28: 1016968.142 ops/s
Iteration  29: 1022186.697 ops/s
Iteration  30: 1026818.120 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_with":
  1025400.876 ±(99.9%) 3500.358 ops/s [Average]
  (min, avg, max) = (1006194.204, 1025400.876, 1035805.134), stdev = 5239.172
  CI (99.9%): [1021900.518, 1028901.234] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_with  thrpt   30  1025400.876 ± 3500.358  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 667925.666 ops/s
# Warmup Iteration   2: 726868.979 ops/s
# Warmup Iteration   3: 964030.919 ops/s
# Warmup Iteration   4: 964643.948 ops/s
# Warmup Iteration   5: 958656.955 ops/s
# Warmup Iteration   6: 959865.473 ops/s
# Warmup Iteration   7: 949519.071 ops/s
# Warmup Iteration   8: 962234.648 ops/s
# Warmup Iteration   9: 965518.605 ops/s
# Warmup Iteration  10: 899169.681 ops/s
# Warmup Iteration  11: 863761.578 ops/s
# Warmup Iteration  12: 959506.698 ops/s
# Warmup Iteration  13: 965099.460 ops/s
# Warmup Iteration  14: 959124.176 ops/s
# Warmup Iteration  15: 962649.577 ops/s
# Warmup Iteration  16: 961548.203 ops/s
# Warmup Iteration  17: 1015752.036 ops/s
# Warmup Iteration  18: 1004828.973 ops/s
# Warmup Iteration  19: 1007645.650 ops/s
# Warmup Iteration  20: 1014868.458 ops/s
# Warmup Iteration  21: 1012051.548 ops/s
# Warmup Iteration  22: 1016345.331 ops/s
# Warmup Iteration  23: 1015945.796 ops/s
# Warmup Iteration  24: 1019422.015 ops/s
# Warmup Iteration  25: 1008617.183 ops/s
# Warmup Iteration  26: 1015017.630 ops/s
# Warmup Iteration  27: 1006502.388 ops/s
# Warmup Iteration  28: 1015208.309 ops/s
# Warmup Iteration  29: 1016648.632 ops/s
# Warmup Iteration  30: 1015059.479 ops/s
Iteration   1: 1014650.441 ops/s
Iteration   2: 1012254.235 ops/s
Iteration   3: 1015737.819 ops/s
Iteration   4: 1014865.996 ops/s
Iteration   5: 1013528.067 ops/s
Iteration   6: 1013196.300 ops/s
Iteration   7: 1017501.969 ops/s
Iteration   8: 1002257.833 ops/s
Iteration   9: 1010503.423 ops/s
Iteration  10: 1017923.722 ops/s
Iteration  11: 1008848.873 ops/s
Iteration  12: 1017307.069 ops/s
Iteration  13: 1007858.862 ops/s
Iteration  14: 1011933.024 ops/s
Iteration  15: 1002783.056 ops/s
Iteration  16: 1017139.692 ops/s
Iteration  17: 1019930.035 ops/s
Iteration  18: 1012642.327 ops/s
Iteration  19: 1015280.678 ops/s
Iteration  20: 1012546.770 ops/s
Iteration  21: 1012795.900 ops/s
Iteration  22: 997036.495 ops/s
Iteration  23: 1006504.894 ops/s
Iteration  24: 998404.700 ops/s
Iteration  25: 1008799.753 ops/s
Iteration  26: 1023013.280 ops/s
Iteration  27: 1010626.319 ops/s
Iteration  28: 1013057.179 ops/s
Iteration  29: 994662.000 ops/s
Iteration  30: 1013657.302 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_withAll":
  1011241.600 ±(99.9%) 4467.620 ops/s [Average]
  (min, avg, max) = (994662.000, 1011241.600, 1023013.280), stdev = 6686.924
  CI (99.9%): [1006773.980, 1015709.220] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_withAll  thrpt   30  1011241.600 ± 4467.620  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1703327.870 ops/s
# Warmup Iteration   2: 4023605.295 ops/s
# Warmup Iteration   3: 4838761.718 ops/s
# Warmup Iteration   4: 4042984.608 ops/s
# Warmup Iteration   5: 4858361.873 ops/s
# Warmup Iteration   6: 4868955.785 ops/s
# Warmup Iteration   7: 4832103.394 ops/s
# Warmup Iteration   8: 4829756.735 ops/s
# Warmup Iteration   9: 4868014.654 ops/s
# Warmup Iteration  10: 4851688.035 ops/s
# Warmup Iteration  11: 4876105.622 ops/s
# Warmup Iteration  12: 4863418.116 ops/s
# Warmup Iteration  13: 4838710.860 ops/s
# Warmup Iteration  14: 4873065.109 ops/s
# Warmup Iteration  15: 4866914.641 ops/s
# Warmup Iteration  16: 4864638.504 ops/s
# Warmup Iteration  17: 4874694.976 ops/s
# Warmup Iteration  18: 4856029.857 ops/s
# Warmup Iteration  19: 4870390.171 ops/s
# Warmup Iteration  20: 4887515.841 ops/s
# Warmup Iteration  21: 4872265.827 ops/s
# Warmup Iteration  22: 4824123.330 ops/s
# Warmup Iteration  23: 4868667.681 ops/s
# Warmup Iteration  24: 4872929.297 ops/s
# Warmup Iteration  25: 4877963.514 ops/s
# Warmup Iteration  26: 4878690.041 ops/s
# Warmup Iteration  27: 4841273.416 ops/s
# Warmup Iteration  28: 4876845.554 ops/s
# Warmup Iteration  29: 4866151.396 ops/s
# Warmup Iteration  30: 4875633.396 ops/s
Iteration   1: 4866662.530 ops/s
Iteration   2: 4866031.007 ops/s
Iteration   3: 4803613.864 ops/s
Iteration   4: 4839434.694 ops/s
Iteration   5: 4851774.514 ops/s
Iteration   6: 4840167.585 ops/s
Iteration   7: 4847364.609 ops/s
Iteration   8: 4889617.070 ops/s
Iteration   9: 4899647.002 ops/s
Iteration  10: 4817798.470 ops/s
Iteration  11: 4842465.562 ops/s
Iteration  12: 4879881.734 ops/s
Iteration  13: 4863082.009 ops/s
Iteration  14: 4838133.039 ops/s
Iteration  15: 4836486.671 ops/s
Iteration  16: 4850741.739 ops/s
Iteration  17: 4881779.434 ops/s
Iteration  18: 4872556.752 ops/s
Iteration  19: 4835607.132 ops/s
Iteration  20: 4856099.883 ops/s
Iteration  21: 4849027.221 ops/s
Iteration  22: 4861674.602 ops/s
Iteration  23: 4841467.519 ops/s
Iteration  24: 4850256.808 ops/s
Iteration  25: 4867876.221 ops/s
Iteration  26: 4849670.532 ops/s
Iteration  27: 4846965.399 ops/s
Iteration  28: 4835363.054 ops/s
Iteration  29: 4897461.744 ops/s
Iteration  30: 4884619.252 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_without":
  4855444.255 ±(99.9%) 14938.960 ops/s [Average]
  (min, avg, max) = (4803613.864, 4855444.255, 4899647.002), stdev = 22359.933
  CI (99.9%): [4840505.295, 4870383.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_without  thrpt   30  4855444.255 ± 14938.960  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1661181.407 ops/s
# Warmup Iteration   2: 3987433.511 ops/s
# Warmup Iteration   3: 4204824.460 ops/s
# Warmup Iteration   4: 4348238.057 ops/s
# Warmup Iteration   5: 4702118.361 ops/s
# Warmup Iteration   6: 4613437.480 ops/s
# Warmup Iteration   7: 4711554.280 ops/s
# Warmup Iteration   8: 4721008.599 ops/s
# Warmup Iteration   9: 4693245.381 ops/s
# Warmup Iteration  10: 4714342.998 ops/s
# Warmup Iteration  11: 4697661.668 ops/s
# Warmup Iteration  12: 4713777.334 ops/s
# Warmup Iteration  13: 4705602.813 ops/s
# Warmup Iteration  14: 4697989.038 ops/s
# Warmup Iteration  15: 4659190.312 ops/s
# Warmup Iteration  16: 4685220.478 ops/s
# Warmup Iteration  17: 4697180.125 ops/s
# Warmup Iteration  18: 4618894.736 ops/s
# Warmup Iteration  19: 4695054.932 ops/s
# Warmup Iteration  20: 4708324.484 ops/s
# Warmup Iteration  21: 4692009.091 ops/s
# Warmup Iteration  22: 4715149.097 ops/s
# Warmup Iteration  23: 4719080.889 ops/s
# Warmup Iteration  24: 4701200.939 ops/s
# Warmup Iteration  25: 4691503.352 ops/s
# Warmup Iteration  26: 4719599.140 ops/s
# Warmup Iteration  27: 4640860.400 ops/s
# Warmup Iteration  28: 4703787.908 ops/s
# Warmup Iteration  29: 4717400.802 ops/s
# Warmup Iteration  30: 4701599.335 ops/s
Iteration   1: 4714860.845 ops/s
Iteration   2: 4650617.229 ops/s
Iteration   3: 4710535.440 ops/s
Iteration   4: 4696566.405 ops/s
Iteration   5: 4687446.354 ops/s
Iteration   6: 4688972.373 ops/s
Iteration   7: 4631674.777 ops/s
Iteration   8: 4722222.880 ops/s
Iteration   9: 4721012.747 ops/s
Iteration  10: 4670540.830 ops/s
Iteration  11: 4707999.047 ops/s
Iteration  12: 4707067.792 ops/s
Iteration  13: 4697854.163 ops/s
Iteration  14: 4689589.936 ops/s
Iteration  15: 4716133.901 ops/s
Iteration  16: 4730480.192 ops/s
Iteration  17: 4636271.584 ops/s
Iteration  18: 4733225.028 ops/s
Iteration  19: 4727046.944 ops/s
Iteration  20: 4683437.474 ops/s
Iteration  21: 4720378.985 ops/s
Iteration  22: 4690437.123 ops/s
Iteration  23: 4737564.791 ops/s
Iteration  24: 4710990.062 ops/s
Iteration  25: 4686171.758 ops/s
Iteration  26: 4692773.894 ops/s
Iteration  27: 4708045.820 ops/s
Iteration  28: 4694079.279 ops/s
Iteration  29: 4737561.973 ops/s
Iteration  30: 4725922.360 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_withoutAll":
  4700916.066 ±(99.9%) 18216.913 ops/s [Average]
  (min, avg, max) = (4631674.777, 4700916.066, 4737564.791), stdev = 27266.220
  CI (99.9%): [4682699.153, 4719132.979] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
SynchronizedCharBooleanMapValuesTest._Benchmark.benchmark_withoutAll  thrpt   30  4700916.066 ± 18216.913  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 664950.993 ops/s
# Warmup Iteration   2: 745601.060 ops/s
# Warmup Iteration   3: 961257.637 ops/s
# Warmup Iteration   4: 965632.468 ops/s
# Warmup Iteration   5: 973576.228 ops/s
# Warmup Iteration   6: 970672.046 ops/s
# Warmup Iteration   7: 967125.791 ops/s
# Warmup Iteration   8: 971104.844 ops/s
# Warmup Iteration   9: 969563.962 ops/s
# Warmup Iteration  10: 806384.666 ops/s
# Warmup Iteration  11: 969434.372 ops/s
# Warmup Iteration  12: 969403.781 ops/s
# Warmup Iteration  13: 966390.445 ops/s
# Warmup Iteration  14: 963919.175 ops/s
# Warmup Iteration  15: 968119.760 ops/s
# Warmup Iteration  16: 969423.315 ops/s
# Warmup Iteration  17: 1024708.784 ops/s
# Warmup Iteration  18: 1027628.540 ops/s
# Warmup Iteration  19: 1023163.547 ops/s
# Warmup Iteration  20: 1022847.136 ops/s
# Warmup Iteration  21: 1022746.291 ops/s
# Warmup Iteration  22: 1022650.097 ops/s
# Warmup Iteration  23: 1025554.424 ops/s
# Warmup Iteration  24: 1030475.549 ops/s
# Warmup Iteration  25: 1029807.230 ops/s
# Warmup Iteration  26: 1025467.644 ops/s
# Warmup Iteration  27: 1025422.991 ops/s
# Warmup Iteration  28: 1026909.562 ops/s
# Warmup Iteration  29: 1026224.699 ops/s
# Warmup Iteration  30: 1028354.556 ops/s
Iteration   1: 1025839.444 ops/s
Iteration   2: 1028036.784 ops/s
Iteration   3: 1023741.671 ops/s
Iteration   4: 1029618.827 ops/s
Iteration   5: 1025492.397 ops/s
Iteration   6: 1031160.015 ops/s
Iteration   7: 1024479.800 ops/s
Iteration   8: 1020889.805 ops/s
Iteration   9: 1024395.917 ops/s
Iteration  10: 1030543.127 ops/s
Iteration  11: 1021657.274 ops/s
Iteration  12: 1026359.365 ops/s
Iteration  13: 1031826.513 ops/s
Iteration  14: 1023692.204 ops/s
Iteration  15: 1030830.095 ops/s
Iteration  16: 1027300.476 ops/s
Iteration  17: 1024158.079 ops/s
Iteration  18: 1030276.451 ops/s
Iteration  19: 1028443.378 ops/s
Iteration  20: 1029291.939 ops/s
Iteration  21: 1026283.473 ops/s
Iteration  22: 1030775.317 ops/s
Iteration  23: 1031806.040 ops/s
Iteration  24: 1024195.745 ops/s
Iteration  25: 1024328.073 ops/s
Iteration  26: 1027255.425 ops/s
Iteration  27: 1025653.184 ops/s
Iteration  28: 1026514.239 ops/s
Iteration  29: 1028904.133 ops/s
Iteration  30: 1021927.301 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_add":
  1026855.883 ±(99.9%) 2113.900 ops/s [Average]
  (min, avg, max) = (1020889.805, 1026855.883, 1031826.513), stdev = 3163.987
  CI (99.9%): [1024741.983, 1028969.783] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_add  thrpt   30  1026855.883 ± 2113.900  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 664498.112 ops/s
# Warmup Iteration   2: 743655.348 ops/s
# Warmup Iteration   3: 973574.644 ops/s
# Warmup Iteration   4: 977464.247 ops/s
# Warmup Iteration   5: 975319.688 ops/s
# Warmup Iteration   6: 976826.015 ops/s
# Warmup Iteration   7: 977966.081 ops/s
# Warmup Iteration   8: 976320.509 ops/s
# Warmup Iteration   9: 977599.089 ops/s
# Warmup Iteration  10: 815006.104 ops/s
# Warmup Iteration  11: 978137.988 ops/s
# Warmup Iteration  12: 975297.468 ops/s
# Warmup Iteration  13: 974943.375 ops/s
# Warmup Iteration  14: 974465.456 ops/s
# Warmup Iteration  15: 975459.593 ops/s
# Warmup Iteration  16: 977640.131 ops/s
# Warmup Iteration  17: 1029844.097 ops/s
# Warmup Iteration  18: 1025329.010 ops/s
# Warmup Iteration  19: 1034581.646 ops/s
# Warmup Iteration  20: 1033023.143 ops/s
# Warmup Iteration  21: 1032830.501 ops/s
# Warmup Iteration  22: 1031629.070 ops/s
# Warmup Iteration  23: 1032430.028 ops/s
# Warmup Iteration  24: 1037779.480 ops/s
# Warmup Iteration  25: 1026859.309 ops/s
# Warmup Iteration  26: 1028031.318 ops/s
# Warmup Iteration  27: 1033987.403 ops/s
# Warmup Iteration  28: 1034505.593 ops/s
# Warmup Iteration  29: 1030937.441 ops/s
# Warmup Iteration  30: 1033256.945 ops/s
Iteration   1: 1029305.804 ops/s
Iteration   2: 1039003.144 ops/s
Iteration   3: 1034252.944 ops/s
Iteration   4: 1030455.256 ops/s
Iteration   5: 1038200.256 ops/s
Iteration   6: 1033654.137 ops/s
Iteration   7: 1027400.386 ops/s
Iteration   8: 1025618.051 ops/s
Iteration   9: 1030420.317 ops/s
Iteration  10: 1023418.360 ops/s
Iteration  11: 1035373.008 ops/s
Iteration  12: 1039705.919 ops/s
Iteration  13: 1031744.300 ops/s
Iteration  14: 1030044.527 ops/s
Iteration  15: 1034488.506 ops/s
Iteration  16: 1032832.944 ops/s
Iteration  17: 1031317.694 ops/s
Iteration  18: 1034784.265 ops/s
Iteration  19: 1034333.929 ops/s
Iteration  20: 1032328.662 ops/s
Iteration  21: 1033361.635 ops/s
Iteration  22: 1036635.094 ops/s
Iteration  23: 1027143.210 ops/s
Iteration  24: 1034862.665 ops/s
Iteration  25: 1032354.907 ops/s
Iteration  26: 1032547.606 ops/s
Iteration  27: 1035164.627 ops/s
Iteration  28: 1034163.189 ops/s
Iteration  29: 1034586.193 ops/s
Iteration  30: 1034806.535 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_addAllArray":
  1032810.269 ±(99.9%) 2491.793 ops/s [Average]
  (min, avg, max) = (1023418.360, 1032810.269, 1039705.919), stdev = 3729.598
  CI (99.9%): [1030318.476, 1035302.062] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_addAllArray  thrpt   30  1032810.269 ± 2491.793  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 659464.736 ops/s
# Warmup Iteration   2: 747647.182 ops/s
# Warmup Iteration   3: 980706.331 ops/s
# Warmup Iteration   4: 981062.517 ops/s
# Warmup Iteration   5: 975538.516 ops/s
# Warmup Iteration   6: 975833.087 ops/s
# Warmup Iteration   7: 977128.010 ops/s
# Warmup Iteration   8: 974208.201 ops/s
# Warmup Iteration   9: 974422.135 ops/s
# Warmup Iteration  10: 808885.329 ops/s
# Warmup Iteration  11: 975338.562 ops/s
# Warmup Iteration  12: 977033.663 ops/s
# Warmup Iteration  13: 974016.191 ops/s
# Warmup Iteration  14: 972794.522 ops/s
# Warmup Iteration  15: 977619.814 ops/s
# Warmup Iteration  16: 979629.465 ops/s
# Warmup Iteration  17: 1040823.121 ops/s
# Warmup Iteration  18: 1029687.188 ops/s
# Warmup Iteration  19: 1038462.047 ops/s
# Warmup Iteration  20: 1038739.718 ops/s
# Warmup Iteration  21: 1040894.636 ops/s
# Warmup Iteration  22: 1039689.230 ops/s
# Warmup Iteration  23: 1038826.807 ops/s
# Warmup Iteration  24: 1037314.335 ops/s
# Warmup Iteration  25: 1036009.947 ops/s
# Warmup Iteration  26: 1038683.140 ops/s
# Warmup Iteration  27: 1038981.650 ops/s
# Warmup Iteration  28: 1039151.756 ops/s
# Warmup Iteration  29: 1036200.491 ops/s
# Warmup Iteration  30: 1039674.745 ops/s
Iteration   1: 1035704.829 ops/s
Iteration   2: 1036803.602 ops/s
Iteration   3: 1036366.147 ops/s
Iteration   4: 1040727.824 ops/s
Iteration   5: 1040367.104 ops/s
Iteration   6: 1038562.802 ops/s
Iteration   7: 1038782.097 ops/s
Iteration   8: 1034722.588 ops/s
Iteration   9: 1040267.865 ops/s
Iteration  10: 1039481.027 ops/s
Iteration  11: 1040400.871 ops/s
Iteration  12: 1037894.244 ops/s
Iteration  13: 1036842.655 ops/s
Iteration  14: 1036276.894 ops/s
Iteration  15: 1041443.738 ops/s
Iteration  16: 1039463.737 ops/s
Iteration  17: 1034608.686 ops/s
Iteration  18: 1040893.576 ops/s
Iteration  19: 1037418.594 ops/s
Iteration  20: 1032488.230 ops/s
Iteration  21: 1046129.410 ops/s
Iteration  22: 1042149.983 ops/s
Iteration  23: 1034904.671 ops/s
Iteration  24: 1038061.807 ops/s
Iteration  25: 1034689.021 ops/s
Iteration  26: 1032988.834 ops/s
Iteration  27: 1033886.334 ops/s
Iteration  28: 1034747.990 ops/s
Iteration  29: 1033106.022 ops/s
Iteration  30: 1035456.931 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_addAllIterable":
  1037521.270 ±(99.9%) 2134.885 ops/s [Average]
  (min, avg, max) = (1032488.230, 1037521.270, 1046129.410), stdev = 3195.396
  CI (99.9%): [1035386.385, 1039656.156] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_addAllIterable  thrpt   30  1037521.270 ± 2134.885  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 593062.794 ops/s
# Warmup Iteration   2: 1235810.114 ops/s
# Warmup Iteration   3: 1474592.288 ops/s
# Warmup Iteration   4: 1333610.355 ops/s
# Warmup Iteration   5: 1524795.996 ops/s
# Warmup Iteration   6: 1527944.923 ops/s
# Warmup Iteration   7: 1525137.979 ops/s
# Warmup Iteration   8: 1527102.945 ops/s
# Warmup Iteration   9: 1504748.381 ops/s
# Warmup Iteration  10: 1524373.073 ops/s
# Warmup Iteration  11: 1516540.338 ops/s
# Warmup Iteration  12: 1512024.030 ops/s
# Warmup Iteration  13: 1507361.905 ops/s
# Warmup Iteration  14: 1527113.417 ops/s
# Warmup Iteration  15: 1516429.465 ops/s
# Warmup Iteration  16: 1517053.578 ops/s
# Warmup Iteration  17: 1514147.376 ops/s
# Warmup Iteration  18: 1513076.447 ops/s
# Warmup Iteration  19: 1505257.189 ops/s
# Warmup Iteration  20: 1506733.519 ops/s
# Warmup Iteration  21: 1512748.897 ops/s
# Warmup Iteration  22: 1519309.795 ops/s
# Warmup Iteration  23: 1516102.560 ops/s
# Warmup Iteration  24: 1512107.395 ops/s
# Warmup Iteration  25: 1511781.166 ops/s
# Warmup Iteration  26: 1512696.243 ops/s
# Warmup Iteration  27: 1506853.080 ops/s
# Warmup Iteration  28: 1519750.042 ops/s
# Warmup Iteration  29: 1515239.277 ops/s
# Warmup Iteration  30: 1513910.503 ops/s
Iteration   1: 1517900.204 ops/s
Iteration   2: 1517077.932 ops/s
Iteration   3: 1511032.812 ops/s
Iteration   4: 1516305.163 ops/s
Iteration   5: 1493300.681 ops/s
Iteration   6: 1497388.978 ops/s
Iteration   7: 1500634.385 ops/s
Iteration   8: 1505159.551 ops/s
Iteration   9: 1503548.282 ops/s
Iteration  10: 1517406.475 ops/s
Iteration  11: 1516336.854 ops/s
Iteration  12: 1507884.552 ops/s
Iteration  13: 1515656.898 ops/s
Iteration  14: 1510433.388 ops/s
Iteration  15: 1501804.486 ops/s
Iteration  16: 1511118.839 ops/s
Iteration  17: 1508477.725 ops/s
Iteration  18: 1516923.393 ops/s
Iteration  19: 1512153.653 ops/s
Iteration  20: 1503628.377 ops/s
Iteration  21: 1516657.272 ops/s
Iteration  22: 1519179.883 ops/s
Iteration  23: 1504403.243 ops/s
Iteration  24: 1507991.580 ops/s
Iteration  25: 1508217.008 ops/s
Iteration  26: 1514951.573 ops/s
Iteration  27: 1516772.783 ops/s
Iteration  28: 1518271.841 ops/s
Iteration  29: 1507708.894 ops/s
Iteration  30: 1524546.939 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_allSatisfy":
  1510762.455 ±(99.9%) 4876.493 ops/s [Average]
  (min, avg, max) = (1493300.681, 1510762.455, 1524546.939), stdev = 7298.906
  CI (99.9%): [1505885.962, 1515638.948] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_allSatisfy  thrpt   30  1510762.455 ± 4876.493  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 666042.407 ops/s
# Warmup Iteration   2: 1486433.949 ops/s
# Warmup Iteration   3: 1486786.476 ops/s
# Warmup Iteration   4: 1785655.984 ops/s
# Warmup Iteration   5: 1784443.139 ops/s
# Warmup Iteration   6: 1790582.595 ops/s
# Warmup Iteration   7: 1791161.107 ops/s
# Warmup Iteration   8: 1783488.344 ops/s
# Warmup Iteration   9: 1782672.218 ops/s
# Warmup Iteration  10: 1790131.522 ops/s
# Warmup Iteration  11: 1794769.717 ops/s
# Warmup Iteration  12: 1798806.527 ops/s
# Warmup Iteration  13: 1801939.295 ops/s
# Warmup Iteration  14: 1801636.455 ops/s
# Warmup Iteration  15: 1795938.944 ops/s
# Warmup Iteration  16: 1799416.854 ops/s
# Warmup Iteration  17: 1797494.631 ops/s
# Warmup Iteration  18: 1787679.749 ops/s
# Warmup Iteration  19: 1788562.172 ops/s
# Warmup Iteration  20: 1797792.585 ops/s
# Warmup Iteration  21: 1793345.405 ops/s
# Warmup Iteration  22: 1792752.361 ops/s
# Warmup Iteration  23: 1797747.755 ops/s
# Warmup Iteration  24: 1798512.139 ops/s
# Warmup Iteration  25: 1796476.485 ops/s
# Warmup Iteration  26: 1794837.074 ops/s
# Warmup Iteration  27: 1794553.620 ops/s
# Warmup Iteration  28: 1796275.909 ops/s
# Warmup Iteration  29: 1801096.913 ops/s
# Warmup Iteration  30: 1787347.548 ops/s
Iteration   1: 1789761.021 ops/s
Iteration   2: 1798488.485 ops/s
Iteration   3: 1791696.650 ops/s
Iteration   4: 1787028.748 ops/s
Iteration   5: 1781311.314 ops/s
Iteration   6: 1791210.113 ops/s
Iteration   7: 1788094.191 ops/s
Iteration   8: 1788071.713 ops/s
Iteration   9: 1791544.879 ops/s
Iteration  10: 1789505.323 ops/s
Iteration  11: 1792604.609 ops/s
Iteration  12: 1789007.385 ops/s
Iteration  13: 1774513.736 ops/s
Iteration  14: 1787725.168 ops/s
Iteration  15: 1794191.495 ops/s
Iteration  16: 1785431.775 ops/s
Iteration  17: 1791551.202 ops/s
Iteration  18: 1797693.651 ops/s
Iteration  19: 1798111.986 ops/s
Iteration  20: 1784400.176 ops/s
Iteration  21: 1777610.687 ops/s
Iteration  22: 1777600.931 ops/s
Iteration  23: 1798373.600 ops/s
Iteration  24: 1793528.645 ops/s
Iteration  25: 1795526.660 ops/s
Iteration  26: 1792525.907 ops/s
Iteration  27: 1787007.933 ops/s
Iteration  28: 1790826.199 ops/s
Iteration  29: 1776973.407 ops/s
Iteration  30: 1783065.459 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_anySatisfy":
  1788832.768 ±(99.9%) 4358.197 ops/s [Average]
  (min, avg, max) = (1774513.736, 1788832.768, 1798488.485), stdev = 6523.145
  CI (99.9%): [1784474.571, 1793190.966] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_anySatisfy  thrpt   30  1788832.768 ± 4358.197  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 625148.614 ops/s
# Warmup Iteration   2: 1376511.781 ops/s
# Warmup Iteration   3: 1528074.854 ops/s
# Warmup Iteration   4: 1278242.157 ops/s
# Warmup Iteration   5: 1526753.434 ops/s
# Warmup Iteration   6: 1533698.863 ops/s
# Warmup Iteration   7: 1533223.444 ops/s
# Warmup Iteration   8: 1540344.168 ops/s
# Warmup Iteration   9: 1534937.475 ops/s
# Warmup Iteration  10: 1538999.249 ops/s
# Warmup Iteration  11: 1530643.796 ops/s
# Warmup Iteration  12: 1534907.915 ops/s
# Warmup Iteration  13: 1536158.251 ops/s
# Warmup Iteration  14: 1528670.345 ops/s
# Warmup Iteration  15: 1527946.528 ops/s
# Warmup Iteration  16: 1526724.463 ops/s
# Warmup Iteration  17: 1526258.899 ops/s
# Warmup Iteration  18: 1526561.909 ops/s
# Warmup Iteration  19: 1528432.406 ops/s
# Warmup Iteration  20: 1537195.042 ops/s
# Warmup Iteration  21: 1541542.881 ops/s
# Warmup Iteration  22: 1529215.686 ops/s
# Warmup Iteration  23: 1542042.240 ops/s
# Warmup Iteration  24: 1531808.564 ops/s
# Warmup Iteration  25: 1532627.991 ops/s
# Warmup Iteration  26: 1528881.963 ops/s
# Warmup Iteration  27: 1533856.233 ops/s
# Warmup Iteration  28: 1544428.844 ops/s
# Warmup Iteration  29: 1544499.861 ops/s
# Warmup Iteration  30: 1542748.348 ops/s
Iteration   1: 1543642.827 ops/s
Iteration   2: 1535616.942 ops/s
Iteration   3: 1541173.749 ops/s
Iteration   4: 1544114.602 ops/s
Iteration   5: 1523971.914 ops/s
Iteration   6: 1525984.792 ops/s
Iteration   7: 1518463.860 ops/s
Iteration   8: 1531646.065 ops/s
Iteration   9: 1538360.674 ops/s
Iteration  10: 1538722.179 ops/s
Iteration  11: 1544309.561 ops/s
Iteration  12: 1534840.009 ops/s
Iteration  13: 1547533.941 ops/s
Iteration  14: 1548676.008 ops/s
Iteration  15: 1545018.122 ops/s
Iteration  16: 1545026.732 ops/s
Iteration  17: 1537781.508 ops/s
Iteration  18: 1530065.136 ops/s
Iteration  19: 1533342.655 ops/s
Iteration  20: 1544680.257 ops/s
Iteration  21: 1531831.929 ops/s
Iteration  22: 1530399.183 ops/s
Iteration  23: 1531236.874 ops/s
Iteration  24: 1549561.140 ops/s
Iteration  25: 1533931.447 ops/s
Iteration  26: 1530580.736 ops/s
Iteration  27: 1539382.601 ops/s
Iteration  28: 1517460.168 ops/s
Iteration  29: 1518541.936 ops/s
Iteration  30: 1534815.286 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_appendString":
  1535690.428 ±(99.9%) 5989.665 ops/s [Average]
  (min, avg, max) = (1517460.168, 1535690.428, 1549561.140), stdev = 8965.049
  CI (99.9%): [1529700.763, 1541680.092] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_appendString  thrpt   30  1535690.428 ± 5989.665  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3074638.518 ops/s
# Warmup Iteration   2: 6868409.859 ops/s
# Warmup Iteration   3: 6907034.484 ops/s
# Warmup Iteration   4: 5766264.562 ops/s
# Warmup Iteration   5: 6944040.163 ops/s
# Warmup Iteration   6: 6932435.384 ops/s
# Warmup Iteration   7: 6939800.018 ops/s
# Warmup Iteration   8: 6953450.679 ops/s
# Warmup Iteration   9: 6955284.355 ops/s
# Warmup Iteration  10: 6945093.883 ops/s
# Warmup Iteration  11: 6934658.781 ops/s
# Warmup Iteration  12: 6919829.825 ops/s
# Warmup Iteration  13: 6947435.599 ops/s
# Warmup Iteration  14: 6931072.102 ops/s
# Warmup Iteration  15: 6938612.623 ops/s
# Warmup Iteration  16: 6934102.769 ops/s
# Warmup Iteration  17: 6953326.511 ops/s
# Warmup Iteration  18: 6941025.591 ops/s
# Warmup Iteration  19: 6975947.086 ops/s
# Warmup Iteration  20: 6958065.420 ops/s
# Warmup Iteration  21: 6976730.443 ops/s
# Warmup Iteration  22: 6938029.728 ops/s
# Warmup Iteration  23: 6941758.425 ops/s
# Warmup Iteration  24: 6949153.043 ops/s
# Warmup Iteration  25: 6936169.349 ops/s
# Warmup Iteration  26: 6942435.476 ops/s
# Warmup Iteration  27: 6981454.524 ops/s
# Warmup Iteration  28: 6939574.026 ops/s
# Warmup Iteration  29: 6951104.426 ops/s
# Warmup Iteration  30: 6957657.929 ops/s
Iteration   1: 6962463.859 ops/s
Iteration   2: 6962349.800 ops/s
Iteration   3: 6927826.127 ops/s
Iteration   4: 6945346.100 ops/s
Iteration   5: 6944682.865 ops/s
Iteration   6: 6928865.591 ops/s
Iteration   7: 6950485.952 ops/s
Iteration   8: 6934941.000 ops/s
Iteration   9: 6929961.324 ops/s
Iteration  10: 6947926.337 ops/s
Iteration  11: 6941054.565 ops/s
Iteration  12: 6941649.958 ops/s
Iteration  13: 6911856.987 ops/s
Iteration  14: 6949321.832 ops/s
Iteration  15: 6945762.993 ops/s
Iteration  16: 6953362.369 ops/s
Iteration  17: 6940149.773 ops/s
Iteration  18: 6940076.374 ops/s
Iteration  19: 6938462.922 ops/s
Iteration  20: 6933785.460 ops/s
Iteration  21: 6944285.134 ops/s
Iteration  22: 6927742.843 ops/s
Iteration  23: 6913822.176 ops/s
Iteration  24: 6922933.068 ops/s
Iteration  25: 6935851.434 ops/s
Iteration  26: 6965210.033 ops/s
Iteration  27: 6945945.223 ops/s
Iteration  28: 6943521.713 ops/s
Iteration  29: 6943466.792 ops/s
Iteration  30: 6886562.763 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_asLazy":
  6938655.779 ±(99.9%) 10687.305 ops/s [Average]
  (min, avg, max) = (6886562.763, 6938655.779, 6965210.033), stdev = 15996.256
  CI (99.9%): [6927968.474, 6949343.084] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_asLazy  thrpt   30  6938655.779 ± 10687.305  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3165418.606 ops/s
# Warmup Iteration   2: 6574275.305 ops/s
# Warmup Iteration   3: 6922803.195 ops/s
# Warmup Iteration   4: 8156682.053 ops/s
# Warmup Iteration   5: 8077614.964 ops/s
# Warmup Iteration   6: 8100093.436 ops/s
# Warmup Iteration   7: 8105169.174 ops/s
# Warmup Iteration   8: 8078879.978 ops/s
# Warmup Iteration   9: 8203972.911 ops/s
# Warmup Iteration  10: 8204460.624 ops/s
# Warmup Iteration  11: 8144761.519 ops/s
# Warmup Iteration  12: 8176645.857 ops/s
# Warmup Iteration  13: 8152145.742 ops/s
# Warmup Iteration  14: 8082498.647 ops/s
# Warmup Iteration  15: 8039348.116 ops/s
# Warmup Iteration  16: 8144365.977 ops/s
# Warmup Iteration  17: 8159095.134 ops/s
# Warmup Iteration  18: 8155280.711 ops/s
# Warmup Iteration  19: 8140724.360 ops/s
# Warmup Iteration  20: 8112407.773 ops/s
# Warmup Iteration  21: 8127021.975 ops/s
# Warmup Iteration  22: 8071179.032 ops/s
# Warmup Iteration  23: 8062509.945 ops/s
# Warmup Iteration  24: 8103733.250 ops/s
# Warmup Iteration  25: 8144072.814 ops/s
# Warmup Iteration  26: 8086005.150 ops/s
# Warmup Iteration  27: 8132114.501 ops/s
# Warmup Iteration  28: 8071372.547 ops/s
# Warmup Iteration  29: 8110176.529 ops/s
# Warmup Iteration  30: 8214026.996 ops/s
Iteration   1: 8123894.073 ops/s
Iteration   2: 8217178.341 ops/s
Iteration   3: 8137825.781 ops/s
Iteration   4: 8085662.863 ops/s
Iteration   5: 8074106.288 ops/s
Iteration   6: 8131415.219 ops/s
Iteration   7: 8125689.275 ops/s
Iteration   8: 8097274.805 ops/s
Iteration   9: 8153708.601 ops/s
Iteration  10: 8167734.377 ops/s
Iteration  11: 8110247.659 ops/s
Iteration  12: 8120734.158 ops/s
Iteration  13: 8130437.856 ops/s
Iteration  14: 8139386.842 ops/s
Iteration  15: 8123957.595 ops/s
Iteration  16: 8121536.988 ops/s
Iteration  17: 8101369.478 ops/s
Iteration  18: 8147521.739 ops/s
Iteration  19: 8181617.405 ops/s
Iteration  20: 8184642.697 ops/s
Iteration  21: 8134243.000 ops/s
Iteration  22: 8193703.047 ops/s
Iteration  23: 8192673.810 ops/s
Iteration  24: 8153789.632 ops/s
Iteration  25: 8152697.713 ops/s
Iteration  26: 8165083.887 ops/s
Iteration  27: 8111855.225 ops/s
Iteration  28: 8134928.811 ops/s
Iteration  29: 8105158.437 ops/s
Iteration  30: 8153076.476 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_asSynchronized":
  8139105.069 ±(99.9%) 22416.918 ops/s [Average]
  (min, avg, max) = (8074106.288, 8139105.069, 8217178.341), stdev = 33552.590
  CI (99.9%): [8116688.151, 8161521.987] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_asSynchronized  thrpt   30  8139105.069 ± 22416.918  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3108583.779 ops/s
# Warmup Iteration   2: 8608590.153 ops/s
# Warmup Iteration   3: 7351800.765 ops/s
# Warmup Iteration   4: 8677721.038 ops/s
# Warmup Iteration   5: 8659306.580 ops/s
# Warmup Iteration   6: 8675278.527 ops/s
# Warmup Iteration   7: 8683690.402 ops/s
# Warmup Iteration   8: 8695735.800 ops/s
# Warmup Iteration   9: 8665438.262 ops/s
# Warmup Iteration  10: 8666746.520 ops/s
# Warmup Iteration  11: 8706355.429 ops/s
# Warmup Iteration  12: 8670752.143 ops/s
# Warmup Iteration  13: 8636426.121 ops/s
# Warmup Iteration  14: 8647602.957 ops/s
# Warmup Iteration  15: 8575377.681 ops/s
# Warmup Iteration  16: 8620407.511 ops/s
# Warmup Iteration  17: 8619979.062 ops/s
# Warmup Iteration  18: 8623036.771 ops/s
# Warmup Iteration  19: 8630132.931 ops/s
# Warmup Iteration  20: 8658919.006 ops/s
# Warmup Iteration  21: 8660654.491 ops/s
# Warmup Iteration  22: 8632224.656 ops/s
# Warmup Iteration  23: 8646371.492 ops/s
# Warmup Iteration  24: 8650691.490 ops/s
# Warmup Iteration  25: 8689528.795 ops/s
# Warmup Iteration  26: 8676737.155 ops/s
# Warmup Iteration  27: 8697073.743 ops/s
# Warmup Iteration  28: 8659892.256 ops/s
# Warmup Iteration  29: 8674177.634 ops/s
# Warmup Iteration  30: 8650931.411 ops/s
Iteration   1: 8682922.458 ops/s
Iteration   2: 8666146.813 ops/s
Iteration   3: 8658294.737 ops/s
Iteration   4: 8690314.825 ops/s
Iteration   5: 8672139.044 ops/s
Iteration   6: 8663477.343 ops/s
Iteration   7: 8689751.770 ops/s
Iteration   8: 8676279.372 ops/s
Iteration   9: 8688263.572 ops/s
Iteration  10: 8634280.434 ops/s
Iteration  11: 8646893.462 ops/s
Iteration  12: 8680023.349 ops/s
Iteration  13: 8708327.559 ops/s
Iteration  14: 8675977.480 ops/s
Iteration  15: 8654624.743 ops/s
Iteration  16: 8694729.329 ops/s
Iteration  17: 8663592.731 ops/s
Iteration  18: 8640443.122 ops/s
Iteration  19: 8705993.686 ops/s
Iteration  20: 8673461.465 ops/s
Iteration  21: 8713164.767 ops/s
Iteration  22: 8662045.630 ops/s
Iteration  23: 8696272.303 ops/s
Iteration  24: 8637363.618 ops/s
Iteration  25: 8673771.474 ops/s
Iteration  26: 8692688.678 ops/s
Iteration  27: 8686409.259 ops/s
Iteration  28: 8713677.865 ops/s
Iteration  29: 8619983.299 ops/s
Iteration  30: 8592650.058 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable":
  8671798.808 ±(99.9%) 18734.450 ops/s [Average]
  (min, avg, max) = (8592650.058, 8671798.808, 8713677.865), stdev = 28040.844
  CI (99.9%): [8653064.359, 8690533.258] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  8671798.808 ± 18734.450  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4354574.286 ops/s
# Warmup Iteration   2: 9293815.069 ops/s
# Warmup Iteration   3: 7844948.741 ops/s
# Warmup Iteration   4: 9302933.907 ops/s
# Warmup Iteration   5: 9326721.910 ops/s
# Warmup Iteration   6: 9327927.194 ops/s
# Warmup Iteration   7: 9330302.847 ops/s
# Warmup Iteration   8: 9341065.986 ops/s
# Warmup Iteration   9: 9286676.955 ops/s
# Warmup Iteration  10: 9346480.651 ops/s
# Warmup Iteration  11: 9292112.388 ops/s
# Warmup Iteration  12: 9301314.068 ops/s
# Warmup Iteration  13: 9335223.249 ops/s
# Warmup Iteration  14: 9344820.437 ops/s
# Warmup Iteration  15: 9263496.392 ops/s
# Warmup Iteration  16: 9324675.798 ops/s
# Warmup Iteration  17: 9315225.809 ops/s
# Warmup Iteration  18: 9345478.578 ops/s
# Warmup Iteration  19: 9327023.366 ops/s
# Warmup Iteration  20: 9363631.046 ops/s
# Warmup Iteration  21: 9321518.386 ops/s
# Warmup Iteration  22: 9342386.530 ops/s
# Warmup Iteration  23: 9326883.997 ops/s
# Warmup Iteration  24: 9298740.383 ops/s
# Warmup Iteration  25: 9315577.246 ops/s
# Warmup Iteration  26: 9315538.524 ops/s
# Warmup Iteration  27: 9342558.310 ops/s
# Warmup Iteration  28: 9359957.785 ops/s
# Warmup Iteration  29: 9324994.539 ops/s
# Warmup Iteration  30: 9356978.011 ops/s
Iteration   1: 9338986.571 ops/s
Iteration   2: 9349159.809 ops/s
Iteration   3: 9326767.978 ops/s
Iteration   4: 9303882.335 ops/s
Iteration   5: 9371835.918 ops/s
Iteration   6: 9336064.279 ops/s
Iteration   7: 9329884.998 ops/s
Iteration   8: 9346645.658 ops/s
Iteration   9: 9345516.822 ops/s
Iteration  10: 9366802.347 ops/s
Iteration  11: 9308044.523 ops/s
Iteration  12: 9356004.733 ops/s
Iteration  13: 9316364.921 ops/s
Iteration  14: 9348123.933 ops/s
Iteration  15: 9364968.414 ops/s
Iteration  16: 9289453.418 ops/s
Iteration  17: 9322311.013 ops/s
Iteration  18: 9373814.058 ops/s
Iteration  19: 9295757.720 ops/s
Iteration  20: 9306801.431 ops/s
Iteration  21: 9354328.979 ops/s
Iteration  22: 9311408.667 ops/s
Iteration  23: 9379592.923 ops/s
Iteration  24: 9328937.813 ops/s
Iteration  25: 9332504.063 ops/s
Iteration  26: 9370297.401 ops/s
Iteration  27: 9333773.106 ops/s
Iteration  28: 9335991.555 ops/s
Iteration  29: 9372612.809 ops/s
Iteration  30: 9337238.987 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_booleanIterator":
  9338462.573 ±(99.9%) 16564.915 ops/s [Average]
  (min, avg, max) = (9289453.418, 9338462.573, 9379592.923), stdev = 24793.587
  CI (99.9%): [9321897.658, 9355027.488] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_booleanIterator  thrpt   30  9338462.573 ± 16564.915  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 500501.034 ops/s
# Warmup Iteration   2: 674315.213 ops/s
# Warmup Iteration   3: 806230.899 ops/s
# Warmup Iteration   4: 808197.579 ops/s
# Warmup Iteration   5: 806144.795 ops/s
# Warmup Iteration   6: 806162.684 ops/s
# Warmup Iteration   7: 808660.190 ops/s
# Warmup Iteration   8: 682231.504 ops/s
# Warmup Iteration   9: 809116.328 ops/s
# Warmup Iteration  10: 809368.158 ops/s
# Warmup Iteration  11: 809209.662 ops/s
# Warmup Iteration  12: 805318.335 ops/s
# Warmup Iteration  13: 807867.666 ops/s
# Warmup Iteration  14: 806068.651 ops/s
# Warmup Iteration  15: 806536.778 ops/s
# Warmup Iteration  16: 806469.028 ops/s
# Warmup Iteration  17: 848910.386 ops/s
# Warmup Iteration  18: 848626.884 ops/s
# Warmup Iteration  19: 852316.032 ops/s
# Warmup Iteration  20: 850107.119 ops/s
# Warmup Iteration  21: 849864.553 ops/s
# Warmup Iteration  22: 852263.461 ops/s
# Warmup Iteration  23: 851585.323 ops/s
# Warmup Iteration  24: 851053.108 ops/s
# Warmup Iteration  25: 848812.180 ops/s
# Warmup Iteration  26: 849962.623 ops/s
# Warmup Iteration  27: 852579.278 ops/s
# Warmup Iteration  28: 847964.754 ops/s
# Warmup Iteration  29: 849608.830 ops/s
# Warmup Iteration  30: 848026.258 ops/s
Iteration   1: 847816.207 ops/s
Iteration   2: 852205.954 ops/s
Iteration   3: 849162.429 ops/s
Iteration   4: 850137.530 ops/s
Iteration   5: 850374.643 ops/s
Iteration   6: 850219.909 ops/s
Iteration   7: 850869.372 ops/s
Iteration   8: 849267.577 ops/s
Iteration   9: 848759.285 ops/s
Iteration  10: 850925.474 ops/s
Iteration  11: 845796.095 ops/s
Iteration  12: 846136.075 ops/s
Iteration  13: 851901.193 ops/s
Iteration  14: 851295.739 ops/s
Iteration  15: 846784.481 ops/s
Iteration  16: 848406.286 ops/s
Iteration  17: 848244.387 ops/s
Iteration  18: 845463.901 ops/s
Iteration  19: 848270.412 ops/s
Iteration  20: 844071.407 ops/s
Iteration  21: 852113.536 ops/s
Iteration  22: 850320.818 ops/s
Iteration  23: 846633.694 ops/s
Iteration  24: 849340.298 ops/s
Iteration  25: 845750.298 ops/s
Iteration  26: 848031.321 ops/s
Iteration  27: 847318.961 ops/s
Iteration  28: 853639.914 ops/s
Iteration  29: 848929.017 ops/s
Iteration  30: 848794.018 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove":
  848899.341 ±(99.9%) 1528.444 ops/s [Average]
  (min, avg, max) = (844071.407, 848899.341, 853639.914), stdev = 2287.703
  CI (99.9%): [847370.897, 850427.785] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  848899.341 ± 1528.444  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 127557.121 ops/s
# Warmup Iteration   2: 218623.260 ops/s
# Warmup Iteration   3: 253696.499 ops/s
# Warmup Iteration   4: 254710.305 ops/s
# Warmup Iteration   5: 253559.984 ops/s
# Warmup Iteration   6: 212371.886 ops/s
# Warmup Iteration   7: 254477.993 ops/s
# Warmup Iteration   8: 254448.043 ops/s
# Warmup Iteration   9: 254415.492 ops/s
# Warmup Iteration  10: 253720.087 ops/s
# Warmup Iteration  11: 253818.198 ops/s
# Warmup Iteration  12: 253795.394 ops/s
# Warmup Iteration  13: 254518.578 ops/s
# Warmup Iteration  14: 254471.677 ops/s
# Warmup Iteration  15: 254025.560 ops/s
# Warmup Iteration  16: 255183.619 ops/s
# Warmup Iteration  17: 263471.494 ops/s
# Warmup Iteration  18: 262821.299 ops/s
# Warmup Iteration  19: 263447.909 ops/s
# Warmup Iteration  20: 263373.960 ops/s
# Warmup Iteration  21: 263174.526 ops/s
# Warmup Iteration  22: 262551.578 ops/s
# Warmup Iteration  23: 261593.116 ops/s
# Warmup Iteration  24: 262093.645 ops/s
# Warmup Iteration  25: 262583.959 ops/s
# Warmup Iteration  26: 262618.442 ops/s
# Warmup Iteration  27: 263388.196 ops/s
# Warmup Iteration  28: 263594.109 ops/s
# Warmup Iteration  29: 262396.976 ops/s
# Warmup Iteration  30: 262617.800 ops/s
Iteration   1: 262808.701 ops/s
Iteration   2: 263185.110 ops/s
Iteration   3: 264220.616 ops/s
Iteration   4: 263186.131 ops/s
Iteration   5: 262965.378 ops/s
Iteration   6: 263255.736 ops/s
Iteration   7: 262507.205 ops/s
Iteration   8: 261026.347 ops/s
Iteration   9: 263794.541 ops/s
Iteration  10: 263466.090 ops/s
Iteration  11: 261393.090 ops/s
Iteration  12: 264086.305 ops/s
Iteration  13: 261489.028 ops/s
Iteration  14: 263026.200 ops/s
Iteration  15: 262855.687 ops/s
Iteration  16: 262714.677 ops/s
Iteration  17: 263004.679 ops/s
Iteration  18: 261944.595 ops/s
Iteration  19: 261977.772 ops/s
Iteration  20: 262604.620 ops/s
Iteration  21: 264411.896 ops/s
Iteration  22: 262070.356 ops/s
Iteration  23: 262787.016 ops/s
Iteration  24: 262211.161 ops/s
Iteration  25: 263560.017 ops/s
Iteration  26: 264158.748 ops/s
Iteration  27: 262938.799 ops/s
Iteration  28: 264958.180 ops/s
Iteration  29: 261848.439 ops/s
Iteration  30: 262845.937 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_chunk":
  262910.102 ±(99.9%) 623.289 ops/s [Average]
  (min, avg, max) = (261026.347, 262910.102, 264958.180), stdev = 932.909
  CI (99.9%): [262286.813, 263533.391] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_chunk  thrpt   30  262910.102 ± 623.289  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2474490.469 ops/s
# Warmup Iteration   2: 5430082.698 ops/s
# Warmup Iteration   3: 4472936.863 ops/s
# Warmup Iteration   4: 5366421.488 ops/s
# Warmup Iteration   5: 5379775.140 ops/s
# Warmup Iteration   6: 5339130.810 ops/s
# Warmup Iteration   7: 5336533.795 ops/s
# Warmup Iteration   8: 5334191.392 ops/s
# Warmup Iteration   9: 5342103.506 ops/s
# Warmup Iteration  10: 5308246.832 ops/s
# Warmup Iteration  11: 5344807.026 ops/s
# Warmup Iteration  12: 5330619.093 ops/s
# Warmup Iteration  13: 5331327.598 ops/s
# Warmup Iteration  14: 5362212.252 ops/s
# Warmup Iteration  15: 5344285.601 ops/s
# Warmup Iteration  16: 5374729.736 ops/s
# Warmup Iteration  17: 5391872.604 ops/s
# Warmup Iteration  18: 5364785.937 ops/s
# Warmup Iteration  19: 5343868.554 ops/s
# Warmup Iteration  20: 5373794.191 ops/s
# Warmup Iteration  21: 5355708.622 ops/s
# Warmup Iteration  22: 5335830.073 ops/s
# Warmup Iteration  23: 5348829.038 ops/s
# Warmup Iteration  24: 5352791.555 ops/s
# Warmup Iteration  25: 5348245.693 ops/s
# Warmup Iteration  26: 5365846.677 ops/s
# Warmup Iteration  27: 5347816.749 ops/s
# Warmup Iteration  28: 5338730.697 ops/s
# Warmup Iteration  29: 5342781.398 ops/s
# Warmup Iteration  30: 5373697.239 ops/s
Iteration   1: 5377583.591 ops/s
Iteration   2: 5346132.160 ops/s
Iteration   3: 5347853.566 ops/s
Iteration   4: 5345493.356 ops/s
Iteration   5: 5369107.601 ops/s
Iteration   6: 5294859.010 ops/s
Iteration   7: 5376474.585 ops/s
Iteration   8: 5282681.143 ops/s
Iteration   9: 5359661.254 ops/s
Iteration  10: 5342848.863 ops/s
Iteration  11: 5371342.055 ops/s
Iteration  12: 5381627.857 ops/s
Iteration  13: 5375724.318 ops/s
Iteration  14: 5356114.204 ops/s
Iteration  15: 5319736.700 ops/s
Iteration  16: 5351801.073 ops/s
Iteration  17: 5388157.613 ops/s
Iteration  18: 5311504.579 ops/s
Iteration  19: 5348578.417 ops/s
Iteration  20: 5330162.557 ops/s
Iteration  21: 5376184.572 ops/s
Iteration  22: 5380280.221 ops/s
Iteration  23: 5340787.936 ops/s
Iteration  24: 5315012.599 ops/s
Iteration  25: 5342969.472 ops/s
Iteration  26: 5321227.712 ops/s
Iteration  27: 5363688.585 ops/s
Iteration  28: 5358919.607 ops/s
Iteration  29: 5377564.259 ops/s
Iteration  30: 5342688.737 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_clear":
  5349892.273 ±(99.9%) 17918.619 ops/s [Average]
  (min, avg, max) = (5282681.143, 5349892.273, 5388157.613), stdev = 26819.747
  CI (99.9%): [5331973.655, 5367810.892] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_clear  thrpt   30  5349892.273 ± 17918.619  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 592837.926 ops/s
# Warmup Iteration   2: 1473454.728 ops/s
# Warmup Iteration   3: 1561524.441 ops/s
# Warmup Iteration   4: 1281548.081 ops/s
# Warmup Iteration   5: 1565129.065 ops/s
# Warmup Iteration   6: 1559550.328 ops/s
# Warmup Iteration   7: 1563207.076 ops/s
# Warmup Iteration   8: 1564607.142 ops/s
# Warmup Iteration   9: 1559136.936 ops/s
# Warmup Iteration  10: 1563129.844 ops/s
# Warmup Iteration  11: 1568906.863 ops/s
# Warmup Iteration  12: 1562744.271 ops/s
# Warmup Iteration  13: 1564831.753 ops/s
# Warmup Iteration  14: 1567278.844 ops/s
# Warmup Iteration  15: 1562667.985 ops/s
# Warmup Iteration  16: 1562586.029 ops/s
# Warmup Iteration  17: 1565055.308 ops/s
# Warmup Iteration  18: 1561403.675 ops/s
# Warmup Iteration  19: 1557189.744 ops/s
# Warmup Iteration  20: 1564242.214 ops/s
# Warmup Iteration  21: 1567468.691 ops/s
# Warmup Iteration  22: 1565939.361 ops/s
# Warmup Iteration  23: 1564859.474 ops/s
# Warmup Iteration  24: 1559741.973 ops/s
# Warmup Iteration  25: 1563255.852 ops/s
# Warmup Iteration  26: 1566430.464 ops/s
# Warmup Iteration  27: 1557943.587 ops/s
# Warmup Iteration  28: 1564355.561 ops/s
# Warmup Iteration  29: 1559095.496 ops/s
# Warmup Iteration  30: 1564919.451 ops/s
Iteration   1: 1565755.518 ops/s
Iteration   2: 1564915.332 ops/s
Iteration   3: 1558304.680 ops/s
Iteration   4: 1559851.665 ops/s
Iteration   5: 1561899.463 ops/s
Iteration   6: 1562116.849 ops/s
Iteration   7: 1557412.971 ops/s
Iteration   8: 1567419.200 ops/s
Iteration   9: 1559700.257 ops/s
Iteration  10: 1560156.702 ops/s
Iteration  11: 1561626.550 ops/s
Iteration  12: 1562469.013 ops/s
Iteration  13: 1559303.404 ops/s
Iteration  14: 1557608.030 ops/s
Iteration  15: 1562100.333 ops/s
Iteration  16: 1552917.623 ops/s
Iteration  17: 1567543.763 ops/s
Iteration  18: 1560919.171 ops/s
Iteration  19: 1564297.919 ops/s
Iteration  20: 1567589.302 ops/s
Iteration  21: 1565432.844 ops/s
Iteration  22: 1562646.443 ops/s
Iteration  23: 1566124.582 ops/s
Iteration  24: 1558379.151 ops/s
Iteration  25: 1570033.824 ops/s
Iteration  26: 1566692.863 ops/s
Iteration  27: 1569623.501 ops/s
Iteration  28: 1559216.969 ops/s
Iteration  29: 1558737.727 ops/s
Iteration  30: 1563544.954 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_collect":
  1562478.020 ±(99.9%) 2714.632 ops/s [Average]
  (min, avg, max) = (1552917.623, 1562478.020, 1570033.824), stdev = 4063.134
  CI (99.9%): [1559763.388, 1565192.652] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_collect  thrpt   30  1562478.020 ± 2714.632  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1063900.631 ops/s
# Warmup Iteration   2: 2360109.353 ops/s
# Warmup Iteration   3: 2616906.573 ops/s
# Warmup Iteration   4: 2450368.395 ops/s
# Warmup Iteration   5: 2780304.418 ops/s
# Warmup Iteration   6: 2767695.625 ops/s
# Warmup Iteration   7: 2766821.101 ops/s
# Warmup Iteration   8: 2772201.284 ops/s
# Warmup Iteration   9: 2771513.742 ops/s
# Warmup Iteration  10: 2767848.392 ops/s
# Warmup Iteration  11: 2768872.048 ops/s
# Warmup Iteration  12: 2761213.392 ops/s
# Warmup Iteration  13: 2776229.843 ops/s
# Warmup Iteration  14: 2767849.203 ops/s
# Warmup Iteration  15: 2769181.389 ops/s
# Warmup Iteration  16: 2767771.649 ops/s
# Warmup Iteration  17: 2769431.904 ops/s
# Warmup Iteration  18: 2764718.450 ops/s
# Warmup Iteration  19: 2758761.188 ops/s
# Warmup Iteration  20: 2759661.771 ops/s
# Warmup Iteration  21: 2761469.851 ops/s
# Warmup Iteration  22: 2748853.151 ops/s
# Warmup Iteration  23: 2753658.642 ops/s
# Warmup Iteration  24: 2750188.966 ops/s
# Warmup Iteration  25: 2734503.375 ops/s
# Warmup Iteration  26: 2758450.229 ops/s
# Warmup Iteration  27: 2742028.012 ops/s
# Warmup Iteration  28: 2748540.794 ops/s
# Warmup Iteration  29: 2731666.493 ops/s
# Warmup Iteration  30: 2750348.949 ops/s
Iteration   1: 2752472.626 ops/s
Iteration   2: 2748618.399 ops/s
Iteration   3: 2732185.947 ops/s
Iteration   4: 2745518.529 ops/s
Iteration   5: 2775639.965 ops/s
Iteration   6: 2746404.366 ops/s
Iteration   7: 2757464.423 ops/s
Iteration   8: 2767215.955 ops/s
Iteration   9: 2773588.179 ops/s
Iteration  10: 2766069.156 ops/s
Iteration  11: 2766439.724 ops/s
Iteration  12: 2741150.277 ops/s
Iteration  13: 2762249.497 ops/s
Iteration  14: 2764861.108 ops/s
Iteration  15: 2762434.066 ops/s
Iteration  16: 2753951.693 ops/s
Iteration  17: 2765760.161 ops/s
Iteration  18: 2767575.627 ops/s
Iteration  19: 2740048.627 ops/s
Iteration  20: 2759368.122 ops/s
Iteration  21: 2754032.944 ops/s
Iteration  22: 2762898.220 ops/s
Iteration  23: 2760188.383 ops/s
Iteration  24: 2769611.402 ops/s
Iteration  25: 2754842.999 ops/s
Iteration  26: 2767039.866 ops/s
Iteration  27: 2761812.813 ops/s
Iteration  28: 2764274.107 ops/s
Iteration  29: 2768853.693 ops/s
Iteration  30: 2763230.170 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_contains":
  2759193.368 ±(99.9%) 6951.425 ops/s [Average]
  (min, avg, max) = (2732185.947, 2759193.368, 2775639.965), stdev = 10404.567
  CI (99.9%): [2752241.943, 2766144.793] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_contains  thrpt   30  2759193.368 ± 6951.425  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1433979.566 ops/s
# Warmup Iteration   2: 3065721.797 ops/s
# Warmup Iteration   3: 4860277.321 ops/s
# Warmup Iteration   4: 4048706.450 ops/s
# Warmup Iteration   5: 4839320.465 ops/s
# Warmup Iteration   6: 4842743.564 ops/s
# Warmup Iteration   7: 4831042.734 ops/s
# Warmup Iteration   8: 4839428.438 ops/s
# Warmup Iteration   9: 4844668.361 ops/s
# Warmup Iteration  10: 4843058.427 ops/s
# Warmup Iteration  11: 4829365.851 ops/s
# Warmup Iteration  12: 4854791.962 ops/s
# Warmup Iteration  13: 4857744.866 ops/s
# Warmup Iteration  14: 4850219.123 ops/s
# Warmup Iteration  15: 4853919.253 ops/s
# Warmup Iteration  16: 4854579.353 ops/s
# Warmup Iteration  17: 4858907.279 ops/s
# Warmup Iteration  18: 4862554.151 ops/s
# Warmup Iteration  19: 4863152.635 ops/s
# Warmup Iteration  20: 4847146.130 ops/s
# Warmup Iteration  21: 4857226.160 ops/s
# Warmup Iteration  22: 4831303.424 ops/s
# Warmup Iteration  23: 4853669.508 ops/s
# Warmup Iteration  24: 4855965.511 ops/s
# Warmup Iteration  25: 4855578.300 ops/s
# Warmup Iteration  26: 4822487.860 ops/s
# Warmup Iteration  27: 4863275.225 ops/s
# Warmup Iteration  28: 4854552.179 ops/s
# Warmup Iteration  29: 4865098.046 ops/s
# Warmup Iteration  30: 4837615.314 ops/s
Iteration   1: 4848400.529 ops/s
Iteration   2: 4843805.328 ops/s
Iteration   3: 4819223.823 ops/s
Iteration   4: 4820756.574 ops/s
Iteration   5: 4830085.326 ops/s
Iteration   6: 4808405.040 ops/s
Iteration   7: 4800558.763 ops/s
Iteration   8: 4836494.898 ops/s
Iteration   9: 4829050.166 ops/s
Iteration  10: 4825008.953 ops/s
Iteration  11: 4804511.770 ops/s
Iteration  12: 4801465.501 ops/s
Iteration  13: 4833413.522 ops/s
Iteration  14: 4836752.916 ops/s
Iteration  15: 4786460.753 ops/s
Iteration  16: 4838816.672 ops/s
Iteration  17: 4853266.127 ops/s
Iteration  18: 4825514.762 ops/s
Iteration  19: 4815167.725 ops/s
Iteration  20: 4839071.011 ops/s
Iteration  21: 4830909.736 ops/s
Iteration  22: 4829408.454 ops/s
Iteration  23: 4820059.694 ops/s
Iteration  24: 4842491.112 ops/s
Iteration  25: 4802406.281 ops/s
Iteration  26: 4822456.260 ops/s
Iteration  27: 4837311.098 ops/s
Iteration  28: 4834048.938 ops/s
Iteration  29: 4842580.978 ops/s
Iteration  30: 4858933.781 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAllArray":
  4827227.883 ±(99.9%) 11370.235 ops/s [Average]
  (min, avg, max) = (4786460.753, 4827227.883, 4858933.781), stdev = 17018.433
  CI (99.9%): [4815857.648, 4838598.118] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAllArray  thrpt   30  4827227.883 ± 11370.235  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1263490.034 ops/s
# Warmup Iteration   2: 2965040.752 ops/s
# Warmup Iteration   3: 3498031.873 ops/s
# Warmup Iteration   4: 3975448.471 ops/s
# Warmup Iteration   5: 4078032.883 ops/s
# Warmup Iteration   6: 4050105.771 ops/s
# Warmup Iteration   7: 4095196.090 ops/s
# Warmup Iteration   8: 4072325.476 ops/s
# Warmup Iteration   9: 4062065.358 ops/s
# Warmup Iteration  10: 4074196.152 ops/s
# Warmup Iteration  11: 4080061.585 ops/s
# Warmup Iteration  12: 4058769.286 ops/s
# Warmup Iteration  13: 4074666.476 ops/s
# Warmup Iteration  14: 4065345.367 ops/s
# Warmup Iteration  15: 4049068.664 ops/s
# Warmup Iteration  16: 4076790.028 ops/s
# Warmup Iteration  17: 4085312.186 ops/s
# Warmup Iteration  18: 4063043.080 ops/s
# Warmup Iteration  19: 4075356.230 ops/s
# Warmup Iteration  20: 4062454.892 ops/s
# Warmup Iteration  21: 4068988.174 ops/s
# Warmup Iteration  22: 4047947.846 ops/s
# Warmup Iteration  23: 4069131.518 ops/s
# Warmup Iteration  24: 4059018.732 ops/s
# Warmup Iteration  25: 4063004.013 ops/s
# Warmup Iteration  26: 4065551.526 ops/s
# Warmup Iteration  27: 4081047.858 ops/s
# Warmup Iteration  28: 4071333.539 ops/s
# Warmup Iteration  29: 4062640.339 ops/s
# Warmup Iteration  30: 4064419.065 ops/s
Iteration   1: 4037077.493 ops/s
Iteration   2: 4054437.315 ops/s
Iteration   3: 4066161.582 ops/s
Iteration   4: 4092693.445 ops/s
Iteration   5: 4063858.105 ops/s
Iteration   6: 4032556.001 ops/s
Iteration   7: 4092070.412 ops/s
Iteration   8: 4040622.594 ops/s
Iteration   9: 4099959.327 ops/s
Iteration  10: 4074991.150 ops/s
Iteration  11: 4057405.868 ops/s
Iteration  12: 4043572.654 ops/s
Iteration  13: 4080372.879 ops/s
Iteration  14: 4096238.816 ops/s
Iteration  15: 4074058.261 ops/s
Iteration  16: 4070786.236 ops/s
Iteration  17: 4090690.603 ops/s
Iteration  18: 4081835.905 ops/s
Iteration  19: 4060805.914 ops/s
Iteration  20: 4080586.007 ops/s
Iteration  21: 4077996.306 ops/s
Iteration  22: 4048311.187 ops/s
Iteration  23: 4054146.383 ops/s
Iteration  24: 4091749.639 ops/s
Iteration  25: 4072842.503 ops/s
Iteration  26: 4085489.127 ops/s
Iteration  27: 4067599.943 ops/s
Iteration  28: 4094950.718 ops/s
Iteration  29: 4074339.108 ops/s
Iteration  30: 4092970.123 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable":
  4071705.853 ±(99.9%) 12771.715 ops/s [Average]
  (min, avg, max) = (4032556.001, 4071705.853, 4099959.327), stdev = 19116.103
  CI (99.9%): [4058934.138, 4084477.569] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable  thrpt   30  4071705.853 ± 12771.715  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 730278.138 ops/s
# Warmup Iteration   2: 1357759.139 ops/s
# Warmup Iteration   3: 1989828.254 ops/s
# Warmup Iteration   4: 1846692.598 ops/s
# Warmup Iteration   5: 1797139.360 ops/s
# Warmup Iteration   6: 1990742.562 ops/s
# Warmup Iteration   7: 1983109.092 ops/s
# Warmup Iteration   8: 1983386.175 ops/s
# Warmup Iteration   9: 1990342.214 ops/s
# Warmup Iteration  10: 1992998.484 ops/s
# Warmup Iteration  11: 1988032.474 ops/s
# Warmup Iteration  12: 1990128.937 ops/s
# Warmup Iteration  13: 1989650.817 ops/s
# Warmup Iteration  14: 1981879.264 ops/s
# Warmup Iteration  15: 1977523.452 ops/s
# Warmup Iteration  16: 1987220.389 ops/s
# Warmup Iteration  17: 1966242.941 ops/s
# Warmup Iteration  18: 1986478.756 ops/s
# Warmup Iteration  19: 1989633.583 ops/s
# Warmup Iteration  20: 1980665.872 ops/s
# Warmup Iteration  21: 1973793.034 ops/s
# Warmup Iteration  22: 1988813.491 ops/s
# Warmup Iteration  23: 1982507.419 ops/s
# Warmup Iteration  24: 1991951.654 ops/s
# Warmup Iteration  25: 1988192.809 ops/s
# Warmup Iteration  26: 1992828.588 ops/s
# Warmup Iteration  27: 1982966.535 ops/s
# Warmup Iteration  28: 1989782.094 ops/s
# Warmup Iteration  29: 1987151.974 ops/s
# Warmup Iteration  30: 1988683.446 ops/s
Iteration   1: 1986998.454 ops/s
Iteration   2: 1996776.874 ops/s
Iteration   3: 1995415.638 ops/s
Iteration   4: 1984064.480 ops/s
Iteration   5: 1979268.821 ops/s
Iteration   6: 1988790.342 ops/s
Iteration   7: 1985014.462 ops/s
Iteration   8: 1994685.136 ops/s
Iteration   9: 1989641.712 ops/s
Iteration  10: 1996146.412 ops/s
Iteration  11: 1988412.324 ops/s
Iteration  12: 1985987.288 ops/s
Iteration  13: 1977929.754 ops/s
Iteration  14: 1991883.710 ops/s
Iteration  15: 1987277.671 ops/s
Iteration  16: 1985946.443 ops/s
Iteration  17: 1980093.126 ops/s
Iteration  18: 1992935.748 ops/s
Iteration  19: 1980489.781 ops/s
Iteration  20: 1976753.183 ops/s
Iteration  21: 1982628.042 ops/s
Iteration  22: 1987435.631 ops/s
Iteration  23: 1991532.738 ops/s
Iteration  24: 1991753.493 ops/s
Iteration  25: 1993091.626 ops/s
Iteration  26: 1987835.914 ops/s
Iteration  27: 1984406.457 ops/s
Iteration  28: 1994946.922 ops/s
Iteration  29: 1994807.393 ops/s
Iteration  30: 1987176.949 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray":
  1988004.217 ±(99.9%) 3789.897 ops/s [Average]
  (min, avg, max) = (1976753.183, 1988004.217, 1996776.874), stdev = 5672.540
  CI (99.9%): [1984214.320, 1991794.115] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray  thrpt   30  1988004.217 ± 3789.897  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 419576.760 ops/s
# Warmup Iteration   2: 622356.484 ops/s
# Warmup Iteration   3: 798544.394 ops/s
# Warmup Iteration   4: 809490.339 ops/s
# Warmup Iteration   5: 807348.984 ops/s
# Warmup Iteration   6: 738584.051 ops/s
# Warmup Iteration   7: 738190.833 ops/s
# Warmup Iteration   8: 808796.394 ops/s
# Warmup Iteration   9: 810025.089 ops/s
# Warmup Iteration  10: 804695.766 ops/s
# Warmup Iteration  11: 808807.812 ops/s
# Warmup Iteration  12: 805921.317 ops/s
# Warmup Iteration  13: 807675.360 ops/s
# Warmup Iteration  14: 803541.520 ops/s
# Warmup Iteration  15: 805265.337 ops/s
# Warmup Iteration  16: 806133.063 ops/s
# Warmup Iteration  17: 804847.732 ops/s
# Warmup Iteration  18: 804348.542 ops/s
# Warmup Iteration  19: 804488.851 ops/s
# Warmup Iteration  20: 806327.632 ops/s
# Warmup Iteration  21: 806726.599 ops/s
# Warmup Iteration  22: 809098.784 ops/s
# Warmup Iteration  23: 808857.549 ops/s
# Warmup Iteration  24: 804237.582 ops/s
# Warmup Iteration  25: 808166.950 ops/s
# Warmup Iteration  26: 804543.384 ops/s
# Warmup Iteration  27: 808183.199 ops/s
# Warmup Iteration  28: 806657.342 ops/s
# Warmup Iteration  29: 806194.998 ops/s
# Warmup Iteration  30: 808861.597 ops/s
Iteration   1: 810448.081 ops/s
Iteration   2: 809501.758 ops/s
Iteration   3: 806540.124 ops/s
Iteration   4: 807460.045 ops/s
Iteration   5: 807350.087 ops/s
Iteration   6: 808469.662 ops/s
Iteration   7: 809511.830 ops/s
Iteration   8: 806550.890 ops/s
Iteration   9: 807606.054 ops/s
Iteration  10: 806657.962 ops/s
Iteration  11: 809446.944 ops/s
Iteration  12: 811125.968 ops/s
Iteration  13: 806542.120 ops/s
Iteration  14: 803564.438 ops/s
Iteration  15: 804998.258 ops/s
Iteration  16: 799690.602 ops/s
Iteration  17: 807691.249 ops/s
Iteration  18: 805201.122 ops/s
Iteration  19: 808596.732 ops/s
Iteration  20: 804268.531 ops/s
Iteration  21: 807470.492 ops/s
Iteration  22: 807836.680 ops/s
Iteration  23: 805246.779 ops/s
Iteration  24: 812352.910 ops/s
Iteration  25: 809101.615 ops/s
Iteration  26: 806888.061 ops/s
Iteration  27: 808417.313 ops/s
Iteration  28: 806659.410 ops/s
Iteration  29: 811647.471 ops/s
Iteration  30: 807544.494 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable":
  807479.589 ±(99.9%) 1702.138 ops/s [Average]
  (min, avg, max) = (799690.602, 807479.589, 812352.910), stdev = 2547.680
  CI (99.9%): [805777.451, 809181.727] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  807479.589 ± 1702.138  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 772245.555 ops/s
# Warmup Iteration   2: 1399845.790 ops/s
# Warmup Iteration   3: 2220891.567 ops/s
# Warmup Iteration   4: 2103216.678 ops/s
# Warmup Iteration   5: 1962290.390 ops/s
# Warmup Iteration   6: 2239477.578 ops/s
# Warmup Iteration   7: 2222721.585 ops/s
# Warmup Iteration   8: 2234956.208 ops/s
# Warmup Iteration   9: 2242570.638 ops/s
# Warmup Iteration  10: 2230696.187 ops/s
# Warmup Iteration  11: 2235050.291 ops/s
# Warmup Iteration  12: 2231726.348 ops/s
# Warmup Iteration  13: 2235840.021 ops/s
# Warmup Iteration  14: 2232637.877 ops/s
# Warmup Iteration  15: 2236245.856 ops/s
# Warmup Iteration  16: 2229788.202 ops/s
# Warmup Iteration  17: 2232896.079 ops/s
# Warmup Iteration  18: 2233687.191 ops/s
# Warmup Iteration  19: 2235035.108 ops/s
# Warmup Iteration  20: 2230118.783 ops/s
# Warmup Iteration  21: 2240103.837 ops/s
# Warmup Iteration  22: 2231617.089 ops/s
# Warmup Iteration  23: 2240639.764 ops/s
# Warmup Iteration  24: 2243022.250 ops/s
# Warmup Iteration  25: 2238733.231 ops/s
# Warmup Iteration  26: 2242642.384 ops/s
# Warmup Iteration  27: 2238225.862 ops/s
# Warmup Iteration  28: 2235379.490 ops/s
# Warmup Iteration  29: 2232978.203 ops/s
# Warmup Iteration  30: 2231734.487 ops/s
Iteration   1: 2233192.085 ops/s
Iteration   2: 2234426.972 ops/s
Iteration   3: 2235941.422 ops/s
Iteration   4: 2224329.972 ops/s
Iteration   5: 2234195.469 ops/s
Iteration   6: 2221562.608 ops/s
Iteration   7: 2238085.654 ops/s
Iteration   8: 2231296.812 ops/s
Iteration   9: 2230515.571 ops/s
Iteration  10: 2227063.473 ops/s
Iteration  11: 2226464.239 ops/s
Iteration  12: 2223955.447 ops/s
Iteration  13: 2227296.960 ops/s
Iteration  14: 2231171.210 ops/s
Iteration  15: 2226182.597 ops/s
Iteration  16: 2232304.385 ops/s
Iteration  17: 2233579.408 ops/s
Iteration  18: 2234191.707 ops/s
Iteration  19: 2234763.496 ops/s
Iteration  20: 2226902.939 ops/s
Iteration  21: 2235391.558 ops/s
Iteration  22: 2238015.488 ops/s
Iteration  23: 2209586.518 ops/s
Iteration  24: 2229150.563 ops/s
Iteration  25: 2225545.629 ops/s
Iteration  26: 2233396.057 ops/s
Iteration  27: 2227305.873 ops/s
Iteration  28: 2222074.164 ops/s
Iteration  29: 2238774.046 ops/s
Iteration  30: 2235367.015 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray":
  2230067.645 ±(99.9%) 4152.198 ops/s [Average]
  (min, avg, max) = (2209586.518, 2230067.645, 2238774.046), stdev = 6214.815
  CI (99.9%): [2225915.447, 2234219.842] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray  thrpt   30  2230067.645 ± 4152.198  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 399754.744 ops/s
# Warmup Iteration   2: 594694.528 ops/s
# Warmup Iteration   3: 757856.784 ops/s
# Warmup Iteration   4: 762366.726 ops/s
# Warmup Iteration   5: 762276.322 ops/s
# Warmup Iteration   6: 737532.703 ops/s
# Warmup Iteration   7: 658471.238 ops/s
# Warmup Iteration   8: 762742.278 ops/s
# Warmup Iteration   9: 763135.277 ops/s
# Warmup Iteration  10: 759745.313 ops/s
# Warmup Iteration  11: 761772.207 ops/s
# Warmup Iteration  12: 762444.230 ops/s
# Warmup Iteration  13: 762951.462 ops/s
# Warmup Iteration  14: 760738.522 ops/s
# Warmup Iteration  15: 764189.979 ops/s
# Warmup Iteration  16: 761039.483 ops/s
# Warmup Iteration  17: 762819.815 ops/s
# Warmup Iteration  18: 763120.264 ops/s
# Warmup Iteration  19: 761796.922 ops/s
# Warmup Iteration  20: 767283.289 ops/s
# Warmup Iteration  21: 756819.867 ops/s
# Warmup Iteration  22: 764629.885 ops/s
# Warmup Iteration  23: 763728.705 ops/s
# Warmup Iteration  24: 758093.639 ops/s
# Warmup Iteration  25: 755714.557 ops/s
# Warmup Iteration  26: 765907.458 ops/s
# Warmup Iteration  27: 755084.854 ops/s
# Warmup Iteration  28: 761699.761 ops/s
# Warmup Iteration  29: 755093.677 ops/s
# Warmup Iteration  30: 764262.168 ops/s
Iteration   1: 763414.223 ops/s
Iteration   2: 752170.722 ops/s
Iteration   3: 761183.006 ops/s
Iteration   4: 763449.581 ops/s
Iteration   5: 763006.275 ops/s
Iteration   6: 765844.445 ops/s
Iteration   7: 758700.457 ops/s
Iteration   8: 762630.626 ops/s
Iteration   9: 765515.811 ops/s
Iteration  10: 764116.671 ops/s
Iteration  11: 752780.118 ops/s
Iteration  12: 765294.569 ops/s
Iteration  13: 766605.464 ops/s
Iteration  14: 755507.198 ops/s
Iteration  15: 759861.166 ops/s
Iteration  16: 757042.734 ops/s
Iteration  17: 764562.375 ops/s
Iteration  18: 763620.403 ops/s
Iteration  19: 751616.263 ops/s
Iteration  20: 761982.746 ops/s
Iteration  21: 767825.134 ops/s
Iteration  22: 764869.708 ops/s
Iteration  23: 765885.641 ops/s
Iteration  24: 762779.675 ops/s
Iteration  25: 765588.975 ops/s
Iteration  26: 748072.482 ops/s
Iteration  27: 764907.295 ops/s
Iteration  28: 765192.961 ops/s
Iteration  29: 769099.737 ops/s
Iteration  30: 765410.524 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable":
  761951.233 ±(99.9%) 3500.396 ops/s [Average]
  (min, avg, max) = (748072.482, 761951.233, 769099.737), stdev = 5239.228
  CI (99.9%): [758450.837, 765451.629] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  761951.233 ± 3500.396  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 717958.313 ops/s
# Warmup Iteration   2: 1259928.485 ops/s
# Warmup Iteration   3: 1620836.408 ops/s
# Warmup Iteration   4: 1608962.452 ops/s
# Warmup Iteration   5: 1337392.853 ops/s
# Warmup Iteration   6: 1620017.507 ops/s
# Warmup Iteration   7: 1605906.541 ops/s
# Warmup Iteration   8: 1613843.345 ops/s
# Warmup Iteration   9: 1608489.306 ops/s
# Warmup Iteration  10: 1613801.456 ops/s
# Warmup Iteration  11: 1608475.806 ops/s
# Warmup Iteration  12: 1604168.950 ops/s
# Warmup Iteration  13: 1619602.292 ops/s
# Warmup Iteration  14: 1601073.425 ops/s
# Warmup Iteration  15: 1618648.348 ops/s
# Warmup Iteration  16: 1616924.208 ops/s
# Warmup Iteration  17: 1608790.943 ops/s
# Warmup Iteration  18: 1598076.159 ops/s
# Warmup Iteration  19: 1620161.898 ops/s
# Warmup Iteration  20: 1616469.186 ops/s
# Warmup Iteration  21: 1615085.940 ops/s
# Warmup Iteration  22: 1601909.613 ops/s
# Warmup Iteration  23: 1599240.654 ops/s
# Warmup Iteration  24: 1598697.317 ops/s
# Warmup Iteration  25: 1608051.864 ops/s
# Warmup Iteration  26: 1607984.007 ops/s
# Warmup Iteration  27: 1615404.509 ops/s
# Warmup Iteration  28: 1613174.721 ops/s
# Warmup Iteration  29: 1613701.577 ops/s
# Warmup Iteration  30: 1590781.086 ops/s
Iteration   1: 1624756.252 ops/s
Iteration   2: 1613497.814 ops/s
Iteration   3: 1615342.789 ops/s
Iteration   4: 1585636.817 ops/s
Iteration   5: 1623498.338 ops/s
Iteration   6: 1611064.198 ops/s
Iteration   7: 1620880.062 ops/s
Iteration   8: 1624024.833 ops/s
Iteration   9: 1608294.296 ops/s
Iteration  10: 1613909.030 ops/s
Iteration  11: 1615281.537 ops/s
Iteration  12: 1619095.701 ops/s
Iteration  13: 1615683.255 ops/s
Iteration  14: 1603761.517 ops/s
Iteration  15: 1609018.465 ops/s
Iteration  16: 1618027.790 ops/s
Iteration  17: 1618368.524 ops/s
Iteration  18: 1600821.509 ops/s
Iteration  19: 1616695.425 ops/s
Iteration  20: 1609669.803 ops/s
Iteration  21: 1609423.437 ops/s
Iteration  22: 1620107.178 ops/s
Iteration  23: 1608860.477 ops/s
Iteration  24: 1606193.043 ops/s
Iteration  25: 1587164.017 ops/s
Iteration  26: 1614970.434 ops/s
Iteration  27: 1611965.752 ops/s
Iteration  28: 1611821.568 ops/s
Iteration  29: 1616746.496 ops/s
Iteration  30: 1585346.837 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_count":
  1611330.906 ±(99.9%) 6893.130 ops/s [Average]
  (min, avg, max) = (1585346.837, 1611330.906, 1624756.252), stdev = 10317.314
  CI (99.9%): [1604437.776, 1618224.037] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_count  thrpt   30  1611330.906 ± 6893.130  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 888175.455 ops/s
# Warmup Iteration   2: 1480459.906 ops/s
# Warmup Iteration   3: 2178304.117 ops/s
# Warmup Iteration   4: 2178461.247 ops/s
# Warmup Iteration   5: 1802883.640 ops/s
# Warmup Iteration   6: 2191289.669 ops/s
# Warmup Iteration   7: 2176985.047 ops/s
# Warmup Iteration   8: 2184212.462 ops/s
# Warmup Iteration   9: 2174367.722 ops/s
# Warmup Iteration  10: 2193008.980 ops/s
# Warmup Iteration  11: 2194285.597 ops/s
# Warmup Iteration  12: 2186803.630 ops/s
# Warmup Iteration  13: 2181767.014 ops/s
# Warmup Iteration  14: 2187865.866 ops/s
# Warmup Iteration  15: 2168334.656 ops/s
# Warmup Iteration  16: 2183139.861 ops/s
# Warmup Iteration  17: 2162008.763 ops/s
# Warmup Iteration  18: 2179321.201 ops/s
# Warmup Iteration  19: 2183182.141 ops/s
# Warmup Iteration  20: 2157515.495 ops/s
# Warmup Iteration  21: 2179392.022 ops/s
# Warmup Iteration  22: 2169813.307 ops/s
# Warmup Iteration  23: 2174428.587 ops/s
# Warmup Iteration  24: 2171002.401 ops/s
# Warmup Iteration  25: 2177263.580 ops/s
# Warmup Iteration  26: 2187583.012 ops/s
# Warmup Iteration  27: 2188631.421 ops/s
# Warmup Iteration  28: 2170999.803 ops/s
# Warmup Iteration  29: 2180311.967 ops/s
# Warmup Iteration  30: 2178869.513 ops/s
Iteration   1: 2173132.585 ops/s
Iteration   2: 2189593.438 ops/s
Iteration   3: 2182699.510 ops/s
Iteration   4: 2179707.426 ops/s
Iteration   5: 2129641.709 ops/s
Iteration   6: 2173487.675 ops/s
Iteration   7: 2166772.379 ops/s
Iteration   8: 2182871.568 ops/s
Iteration   9: 2176611.831 ops/s
Iteration  10: 2192089.483 ops/s
Iteration  11: 2184160.919 ops/s
Iteration  12: 2166819.174 ops/s
Iteration  13: 2188044.327 ops/s
Iteration  14: 2178313.167 ops/s
Iteration  15: 2191879.490 ops/s
Iteration  16: 2130247.135 ops/s
Iteration  17: 2180220.309 ops/s
Iteration  18: 2152097.396 ops/s
Iteration  19: 2163364.090 ops/s
Iteration  20: 2188459.796 ops/s
Iteration  21: 2182404.834 ops/s
Iteration  22: 2185939.512 ops/s
Iteration  23: 2176903.827 ops/s
Iteration  24: 2185328.886 ops/s
Iteration  25: 2176975.786 ops/s
Iteration  26: 2179312.597 ops/s
Iteration  27: 2192631.844 ops/s
Iteration  28: 2192332.043 ops/s
Iteration  29: 2187414.290 ops/s
Iteration  30: 2191750.910 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_detectIfNone":
  2177373.598 ±(99.9%) 10711.533 ops/s [Average]
  (min, avg, max) = (2129641.709, 2177373.598, 2192631.844), stdev = 16032.519
  CI (99.9%): [2166662.065, 2188085.130] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_detectIfNone  thrpt   30  2177373.598 ± 10711.533  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1644339.175 ops/s
# Warmup Iteration   2: 3477928.015 ops/s
# Warmup Iteration   3: 3326433.450 ops/s
# Warmup Iteration   4: 3497690.444 ops/s
# Warmup Iteration   5: 3737631.205 ops/s
# Warmup Iteration   6: 3727926.445 ops/s
# Warmup Iteration   7: 3743027.866 ops/s
# Warmup Iteration   8: 3751974.258 ops/s
# Warmup Iteration   9: 3747572.116 ops/s
# Warmup Iteration  10: 3745691.074 ops/s
# Warmup Iteration  11: 3736473.209 ops/s
# Warmup Iteration  12: 3734786.972 ops/s
# Warmup Iteration  13: 3736982.972 ops/s
# Warmup Iteration  14: 3757555.927 ops/s
# Warmup Iteration  15: 3686897.234 ops/s
# Warmup Iteration  16: 3680030.713 ops/s
# Warmup Iteration  17: 3727535.120 ops/s
# Warmup Iteration  18: 3717437.492 ops/s
# Warmup Iteration  19: 3735261.338 ops/s
# Warmup Iteration  20: 3694439.082 ops/s
# Warmup Iteration  21: 3715246.267 ops/s
# Warmup Iteration  22: 3712021.130 ops/s
# Warmup Iteration  23: 3719559.798 ops/s
# Warmup Iteration  24: 3703071.556 ops/s
# Warmup Iteration  25: 3738517.657 ops/s
# Warmup Iteration  26: 3742538.646 ops/s
# Warmup Iteration  27: 3735639.924 ops/s
# Warmup Iteration  28: 3721225.390 ops/s
# Warmup Iteration  29: 3706080.593 ops/s
# Warmup Iteration  30: 3736413.620 ops/s
Iteration   1: 3743741.943 ops/s
Iteration   2: 3692919.891 ops/s
Iteration   3: 3712394.893 ops/s
Iteration   4: 3735896.749 ops/s
Iteration   5: 3742759.468 ops/s
Iteration   6: 3757498.635 ops/s
Iteration   7: 3721076.296 ops/s
Iteration   8: 3744738.916 ops/s
Iteration   9: 3697129.200 ops/s
Iteration  10: 3723450.578 ops/s
Iteration  11: 3640460.039 ops/s
Iteration  12: 3736128.166 ops/s
Iteration  13: 3753534.423 ops/s
Iteration  14: 3740275.755 ops/s
Iteration  15: 3739444.615 ops/s
Iteration  16: 3683388.255 ops/s
Iteration  17: 3741007.862 ops/s
Iteration  18: 3726346.388 ops/s
Iteration  19: 3736976.648 ops/s
Iteration  20: 3751056.870 ops/s
Iteration  21: 3717123.029 ops/s
Iteration  22: 3753080.996 ops/s
Iteration  23: 3759686.000 ops/s
Iteration  24: 3748466.989 ops/s
Iteration  25: 3724632.892 ops/s
Iteration  26: 3739449.329 ops/s
Iteration  27: 3749270.680 ops/s
Iteration  28: 3742487.756 ops/s
Iteration  29: 3737010.579 ops/s
Iteration  30: 3706639.989 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_forEach":
  3729935.794 ±(99.9%) 17106.431 ops/s [Average]
  (min, avg, max) = (3640460.039, 3729935.794, 3759686.000), stdev = 25604.102
  CI (99.9%): [3712829.364, 3747042.225] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_forEach  thrpt   30  3729935.794 ± 17106.431  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3812661.761 ops/s
# Warmup Iteration   2: 8339724.413 ops/s
# Warmup Iteration   3: 8924738.467 ops/s
# Warmup Iteration   4: 8784239.433 ops/s
# Warmup Iteration   5: 9650278.598 ops/s
# Warmup Iteration   6: 9658250.930 ops/s
# Warmup Iteration   7: 9408204.745 ops/s
# Warmup Iteration   8: 9634231.078 ops/s
# Warmup Iteration   9: 9661259.919 ops/s
# Warmup Iteration  10: 9493780.899 ops/s
# Warmup Iteration  11: 9636815.940 ops/s
# Warmup Iteration  12: 9617508.244 ops/s
# Warmup Iteration  13: 9669542.972 ops/s
# Warmup Iteration  14: 9647096.832 ops/s
# Warmup Iteration  15: 9659430.659 ops/s
# Warmup Iteration  16: 9532038.123 ops/s
# Warmup Iteration  17: 9612054.576 ops/s
# Warmup Iteration  18: 9396043.888 ops/s
# Warmup Iteration  19: 9506046.330 ops/s
# Warmup Iteration  20: 9660902.349 ops/s
# Warmup Iteration  21: 9662102.623 ops/s
# Warmup Iteration  22: 9631705.468 ops/s
# Warmup Iteration  23: 9663823.468 ops/s
# Warmup Iteration  24: 9667988.785 ops/s
# Warmup Iteration  25: 9673562.488 ops/s
# Warmup Iteration  26: 9577607.417 ops/s
# Warmup Iteration  27: 9567686.163 ops/s
# Warmup Iteration  28: 9673653.941 ops/s
# Warmup Iteration  29: 9612549.017 ops/s
# Warmup Iteration  30: 9637171.571 ops/s
Iteration   1: 9629882.444 ops/s
Iteration   2: 9599344.135 ops/s
Iteration   3: 9630221.290 ops/s
Iteration   4: 9651587.734 ops/s
Iteration   5: 9654836.486 ops/s
Iteration   6: 9643140.758 ops/s
Iteration   7: 9658671.377 ops/s
Iteration   8: 9700372.957 ops/s
Iteration   9: 9617858.138 ops/s
Iteration  10: 9542247.987 ops/s
Iteration  11: 9706403.039 ops/s
Iteration  12: 9687879.374 ops/s
Iteration  13: 9661312.316 ops/s
Iteration  14: 9642283.407 ops/s
Iteration  15: 9408123.204 ops/s
Iteration  16: 9493629.009 ops/s
Iteration  17: 9564665.328 ops/s
Iteration  18: 9533373.127 ops/s
Iteration  19: 9702694.983 ops/s
Iteration  20: 9531078.373 ops/s
Iteration  21: 9711672.216 ops/s
Iteration  22: 9591948.197 ops/s
Iteration  23: 9689126.987 ops/s
Iteration  24: 9628324.518 ops/s
Iteration  25: 9537705.018 ops/s
Iteration  26: 9672992.291 ops/s
Iteration  27: 9686066.616 ops/s
Iteration  28: 9648048.118 ops/s
Iteration  29: 9573118.002 ops/s
Iteration  30: 9659938.832 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_injectInto":
  9621951.542 ±(99.9%) 48095.133 ops/s [Average]
  (min, avg, max) = (9408123.204, 9621951.542, 9711672.216), stdev = 71986.536
  CI (99.9%): [9573856.409, 9670046.675] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_injectInto  thrpt   30  9621951.542 ± 48095.133  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 741424.161 ops/s
# Warmup Iteration   2: 1508291.520 ops/s
# Warmup Iteration   3: 1643456.665 ops/s
# Warmup Iteration   4: 1905666.919 ops/s
# Warmup Iteration   5: 1930703.654 ops/s
# Warmup Iteration   6: 1926941.620 ops/s
# Warmup Iteration   7: 1912218.720 ops/s
# Warmup Iteration   8: 1918082.807 ops/s
# Warmup Iteration   9: 1907376.959 ops/s
# Warmup Iteration  10: 1911766.903 ops/s
# Warmup Iteration  11: 1923961.705 ops/s
# Warmup Iteration  12: 1914399.382 ops/s
# Warmup Iteration  13: 1886982.370 ops/s
# Warmup Iteration  14: 1894563.431 ops/s
# Warmup Iteration  15: 1910722.759 ops/s
# Warmup Iteration  16: 1912897.880 ops/s
# Warmup Iteration  17: 1929924.278 ops/s
# Warmup Iteration  18: 1909815.891 ops/s
# Warmup Iteration  19: 1914063.805 ops/s
# Warmup Iteration  20: 1902081.966 ops/s
# Warmup Iteration  21: 1913403.825 ops/s
# Warmup Iteration  22: 1906909.860 ops/s
# Warmup Iteration  23: 1917197.878 ops/s
# Warmup Iteration  24: 1917395.706 ops/s
# Warmup Iteration  25: 1922126.308 ops/s
# Warmup Iteration  26: 1916118.876 ops/s
# Warmup Iteration  27: 1921327.993 ops/s
# Warmup Iteration  28: 1926683.848 ops/s
# Warmup Iteration  29: 1905973.059 ops/s
# Warmup Iteration  30: 1913474.871 ops/s
Iteration   1: 1910249.225 ops/s
Iteration   2: 1890691.990 ops/s
Iteration   3: 1917104.016 ops/s
Iteration   4: 1911226.909 ops/s
Iteration   5: 1912691.545 ops/s
Iteration   6: 1912132.437 ops/s
Iteration   7: 1866814.898 ops/s
Iteration   8: 1926355.336 ops/s
Iteration   9: 1922898.340 ops/s
Iteration  10: 1897555.115 ops/s
Iteration  11: 1886359.563 ops/s
Iteration  12: 1907409.107 ops/s
Iteration  13: 1907083.153 ops/s
Iteration  14: 1911114.529 ops/s
Iteration  15: 1923173.571 ops/s
Iteration  16: 1894205.335 ops/s
Iteration  17: 1895573.794 ops/s
Iteration  18: 1918329.878 ops/s
Iteration  19: 1878860.126 ops/s
Iteration  20: 1884883.265 ops/s
Iteration  21: 1922644.088 ops/s
Iteration  22: 1931672.816 ops/s
Iteration  23: 1927681.788 ops/s
Iteration  24: 1928951.963 ops/s
Iteration  25: 1909823.966 ops/s
Iteration  26: 1915543.902 ops/s
Iteration  27: 1929086.526 ops/s
Iteration  28: 1929225.514 ops/s
Iteration  29: 1897262.113 ops/s
Iteration  30: 1921508.580 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_isEmpty":
  1909603.780 ±(99.9%) 11181.587 ops/s [Average]
  (min, avg, max) = (1866814.898, 1909603.780, 1931672.816), stdev = 16736.074
  CI (99.9%): [1898422.192, 1920785.367] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  1909603.780 ± 11181.587  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 675009.220 ops/s
# Warmup Iteration   2: 720246.090 ops/s
# Warmup Iteration   3: 963536.565 ops/s
# Warmup Iteration   4: 960942.620 ops/s
# Warmup Iteration   5: 959906.186 ops/s
# Warmup Iteration   6: 957829.812 ops/s
# Warmup Iteration   7: 957708.834 ops/s
# Warmup Iteration   8: 959252.095 ops/s
# Warmup Iteration   9: 961620.289 ops/s
# Warmup Iteration  10: 959794.212 ops/s
# Warmup Iteration  11: 800092.552 ops/s
# Warmup Iteration  12: 960692.996 ops/s
# Warmup Iteration  13: 961605.932 ops/s
# Warmup Iteration  14: 961909.283 ops/s
# Warmup Iteration  15: 959672.477 ops/s
# Warmup Iteration  16: 956161.477 ops/s
# Warmup Iteration  17: 1017896.944 ops/s
# Warmup Iteration  18: 1011130.681 ops/s
# Warmup Iteration  19: 1019908.172 ops/s
# Warmup Iteration  20: 1016214.466 ops/s
# Warmup Iteration  21: 1015576.596 ops/s
# Warmup Iteration  22: 1007470.991 ops/s
# Warmup Iteration  23: 1019248.483 ops/s
# Warmup Iteration  24: 1015837.692 ops/s
# Warmup Iteration  25: 1012153.333 ops/s
# Warmup Iteration  26: 1021589.023 ops/s
# Warmup Iteration  27: 1023525.780 ops/s
# Warmup Iteration  28: 1018995.296 ops/s
# Warmup Iteration  29: 1018311.689 ops/s
# Warmup Iteration  30: 1020144.730 ops/s
Iteration   1: 1013772.021 ops/s
Iteration   2: 1021082.946 ops/s
Iteration   3: 1011512.493 ops/s
Iteration   4: 1006770.545 ops/s
Iteration   5: 998886.530 ops/s
Iteration   6: 1026060.606 ops/s
Iteration   7: 1020956.799 ops/s
Iteration   8: 1014899.200 ops/s
Iteration   9: 1013673.147 ops/s
Iteration  10: 1016262.489 ops/s
Iteration  11: 1015784.803 ops/s
Iteration  12: 1015234.561 ops/s
Iteration  13: 1017553.844 ops/s
Iteration  14: 1003384.091 ops/s
Iteration  15: 1020558.502 ops/s
Iteration  16: 1018828.225 ops/s
Iteration  17: 1014865.231 ops/s
Iteration  18: 997773.494 ops/s
Iteration  19: 1011287.302 ops/s
Iteration  20: 992508.554 ops/s
Iteration  21: 1017545.003 ops/s
Iteration  22: 1015134.166 ops/s
Iteration  23: 1017132.495 ops/s
Iteration  24: 1019272.807 ops/s
Iteration  25: 998160.405 ops/s
Iteration  26: 1015246.081 ops/s
Iteration  27: 1020913.914 ops/s
Iteration  28: 1023098.236 ops/s
Iteration  29: 1019572.403 ops/s
Iteration  30: 1013393.224 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws":
  1013704.137 ±(99.9%) 5450.300 ops/s [Average]
  (min, avg, max) = (992508.554, 1013704.137, 1026060.606), stdev = 8157.753
  CI (99.9%): [1008253.838, 1019154.437] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws  thrpt   30  1013704.137 ± 5450.300  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 693170.057 ops/s
# Warmup Iteration   2: 771997.598 ops/s
# Warmup Iteration   3: 986888.292 ops/s
# Warmup Iteration   4: 993592.250 ops/s
# Warmup Iteration   5: 994744.529 ops/s
# Warmup Iteration   6: 991820.569 ops/s
# Warmup Iteration   7: 988235.942 ops/s
# Warmup Iteration   8: 991062.608 ops/s
# Warmup Iteration   9: 984817.281 ops/s
# Warmup Iteration  10: 830577.815 ops/s
# Warmup Iteration  11: 993390.055 ops/s
# Warmup Iteration  12: 992106.690 ops/s
# Warmup Iteration  13: 986583.625 ops/s
# Warmup Iteration  14: 984349.580 ops/s
# Warmup Iteration  15: 989194.311 ops/s
# Warmup Iteration  16: 992014.997 ops/s
# Warmup Iteration  17: 1056275.596 ops/s
# Warmup Iteration  18: 1055049.591 ops/s
# Warmup Iteration  19: 1053542.522 ops/s
# Warmup Iteration  20: 1054407.810 ops/s
# Warmup Iteration  21: 1039906.397 ops/s
# Warmup Iteration  22: 1052680.527 ops/s
# Warmup Iteration  23: 1058078.124 ops/s
# Warmup Iteration  24: 1049597.486 ops/s
# Warmup Iteration  25: 1051351.126 ops/s
# Warmup Iteration  26: 1050019.566 ops/s
# Warmup Iteration  27: 1035868.134 ops/s
# Warmup Iteration  28: 1039156.017 ops/s
# Warmup Iteration  29: 1051789.076 ops/s
# Warmup Iteration  30: 1053893.642 ops/s
Iteration   1: 1054060.434 ops/s
Iteration   2: 1058047.234 ops/s
Iteration   3: 1056702.075 ops/s
Iteration   4: 1056272.684 ops/s
Iteration   5: 1058494.733 ops/s
Iteration   6: 1048819.222 ops/s
Iteration   7: 1034048.774 ops/s
Iteration   8: 1050190.454 ops/s
Iteration   9: 1055976.559 ops/s
Iteration  10: 1049946.149 ops/s
Iteration  11: 1057382.707 ops/s
Iteration  12: 1048472.361 ops/s
Iteration  13: 1057864.979 ops/s
Iteration  14: 1064059.294 ops/s
Iteration  15: 1056937.091 ops/s
Iteration  16: 1036732.396 ops/s
Iteration  17: 1064033.187 ops/s
Iteration  18: 1055849.768 ops/s
Iteration  19: 1057921.156 ops/s
Iteration  20: 1054379.804 ops/s
Iteration  21: 1051219.028 ops/s
Iteration  22: 1056557.155 ops/s
Iteration  23: 1046457.174 ops/s
Iteration  24: 1052883.010 ops/s
Iteration  25: 1051112.464 ops/s
Iteration  26: 1058510.566 ops/s
Iteration  27: 1053937.136 ops/s
Iteration  28: 1050255.017 ops/s
Iteration  29: 1058859.931 ops/s
Iteration  30: 1054827.740 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList":
  1053693.676 ±(99.9%) 4351.040 ops/s [Average]
  (min, avg, max) = (1034048.774, 1053693.676, 1064059.294), stdev = 6512.432
  CI (99.9%): [1049342.636, 1058044.716] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1053693.676 ± 4351.040  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 606491.449 ops/s
# Warmup Iteration   2: 639928.084 ops/s
# Warmup Iteration   3: 858720.761 ops/s
# Warmup Iteration   4: 856456.201 ops/s
# Warmup Iteration   5: 857959.676 ops/s
# Warmup Iteration   6: 859556.033 ops/s
# Warmup Iteration   7: 856814.493 ops/s
# Warmup Iteration   8: 859139.482 ops/s
# Warmup Iteration   9: 861087.827 ops/s
# Warmup Iteration  10: 859211.089 ops/s
# Warmup Iteration  11: 712472.159 ops/s
# Warmup Iteration  12: 852362.240 ops/s
# Warmup Iteration  13: 852931.595 ops/s
# Warmup Iteration  14: 855326.495 ops/s
# Warmup Iteration  15: 855193.314 ops/s
# Warmup Iteration  16: 853074.599 ops/s
# Warmup Iteration  17: 903830.910 ops/s
# Warmup Iteration  18: 906289.836 ops/s
# Warmup Iteration  19: 902723.575 ops/s
# Warmup Iteration  20: 902645.099 ops/s
# Warmup Iteration  21: 906825.449 ops/s
# Warmup Iteration  22: 904698.358 ops/s
# Warmup Iteration  23: 903645.247 ops/s
# Warmup Iteration  24: 903620.033 ops/s
# Warmup Iteration  25: 906760.335 ops/s
# Warmup Iteration  26: 906164.344 ops/s
# Warmup Iteration  27: 906126.507 ops/s
# Warmup Iteration  28: 908993.730 ops/s
# Warmup Iteration  29: 903276.356 ops/s
# Warmup Iteration  30: 903677.997 ops/s
Iteration   1: 905357.040 ops/s
Iteration   2: 907710.917 ops/s
Iteration   3: 907658.958 ops/s
Iteration   4: 906707.184 ops/s
Iteration   5: 904589.536 ops/s
Iteration   6: 906610.175 ops/s
Iteration   7: 907092.270 ops/s
Iteration   8: 905120.044 ops/s
Iteration   9: 902613.883 ops/s
Iteration  10: 902095.706 ops/s
Iteration  11: 902599.286 ops/s
Iteration  12: 903027.430 ops/s
Iteration  13: 902187.766 ops/s
Iteration  14: 899328.920 ops/s
Iteration  15: 906709.666 ops/s
Iteration  16: 908710.784 ops/s
Iteration  17: 903383.043 ops/s
Iteration  18: 903453.133 ops/s
Iteration  19: 905383.408 ops/s
Iteration  20: 903845.784 ops/s
Iteration  21: 906928.074 ops/s
Iteration  22: 907275.963 ops/s
Iteration  23: 897918.266 ops/s
Iteration  24: 901160.457 ops/s
Iteration  25: 901732.501 ops/s
Iteration  26: 902387.070 ops/s
Iteration  27: 907899.741 ops/s
Iteration  28: 905349.018 ops/s
Iteration  29: 902926.685 ops/s
Iteration  30: 899834.290 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  904253.233 ±(99.9%) 1863.976 ops/s [Average]
  (min, avg, max) = (897918.266, 904253.233, 908710.784), stdev = 2789.912
  CI (99.9%): [902389.257, 906117.209] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt       Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  904253.233 ± 1863.976  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 678171.159 ops/s
# Warmup Iteration   2: 762855.441 ops/s
# Warmup Iteration   3: 975769.284 ops/s
# Warmup Iteration   4: 978039.001 ops/s
# Warmup Iteration   5: 977426.432 ops/s
# Warmup Iteration   6: 967497.408 ops/s
# Warmup Iteration   7: 977803.590 ops/s
# Warmup Iteration   8: 980028.753 ops/s
# Warmup Iteration   9: 978471.775 ops/s
# Warmup Iteration  10: 814158.580 ops/s
# Warmup Iteration  11: 984525.078 ops/s
# Warmup Iteration  12: 981866.179 ops/s
# Warmup Iteration  13: 982366.237 ops/s
# Warmup Iteration  14: 983936.360 ops/s
# Warmup Iteration  15: 984658.974 ops/s
# Warmup Iteration  16: 987517.924 ops/s
# Warmup Iteration  17: 1042551.066 ops/s
# Warmup Iteration  18: 1045393.586 ops/s
# Warmup Iteration  19: 1042444.123 ops/s
# Warmup Iteration  20: 1051022.049 ops/s
# Warmup Iteration  21: 1050858.555 ops/s
# Warmup Iteration  22: 1043619.569 ops/s
# Warmup Iteration  23: 1050870.651 ops/s
# Warmup Iteration  24: 1045928.825 ops/s
# Warmup Iteration  25: 1051432.802 ops/s
# Warmup Iteration  26: 1048654.609 ops/s
# Warmup Iteration  27: 1041630.663 ops/s
# Warmup Iteration  28: 1042601.627 ops/s
# Warmup Iteration  29: 1045260.270 ops/s
# Warmup Iteration  30: 1050844.422 ops/s
Iteration   1: 1043836.068 ops/s
Iteration   2: 1048294.666 ops/s
Iteration   3: 1044525.408 ops/s
Iteration   4: 1048596.780 ops/s
Iteration   5: 1041390.302 ops/s
Iteration   6: 1052905.672 ops/s
Iteration   7: 1025984.346 ops/s
Iteration   8: 1034331.231 ops/s
Iteration   9: 1049442.399 ops/s
Iteration  10: 1027630.899 ops/s
Iteration  11: 1049556.863 ops/s
Iteration  12: 1044098.497 ops/s
Iteration  13: 1040888.065 ops/s
Iteration  14: 1048403.429 ops/s
Iteration  15: 1047738.577 ops/s
Iteration  16: 1055525.571 ops/s
Iteration  17: 1047954.415 ops/s
Iteration  18: 1051615.801 ops/s
Iteration  19: 1051297.771 ops/s
Iteration  20: 1031588.534 ops/s
Iteration  21: 1028714.406 ops/s
Iteration  22: 1044123.560 ops/s
Iteration  23: 1052625.154 ops/s
Iteration  24: 1051798.716 ops/s
Iteration  25: 1049086.438 ops/s
Iteration  26: 1049350.503 ops/s
Iteration  27: 1047028.651 ops/s
Iteration  28: 1030225.092 ops/s
Iteration  29: 1051877.762 ops/s
Iteration  30: 1052992.098 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  1044780.922 ±(99.9%) 5653.157 ops/s [Average]
  (min, avg, max) = (1025984.346, 1044780.922, 1055525.571), stdev = 8461.380
  CI (99.9%): [1039127.765, 1050434.079] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                         Mode  Cnt        Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  1044780.922 ± 5653.157  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 686607.661 ops/s
# Warmup Iteration   2: 769655.410 ops/s
# Warmup Iteration   3: 984784.399 ops/s
# Warmup Iteration   4: 988006.954 ops/s
# Warmup Iteration   5: 983677.417 ops/s
# Warmup Iteration   6: 985796.002 ops/s
# Warmup Iteration   7: 987228.273 ops/s
# Warmup Iteration   8: 986118.833 ops/s
# Warmup Iteration   9: 958968.272 ops/s
# Warmup Iteration  10: 837138.303 ops/s
# Warmup Iteration  11: 977342.437 ops/s
# Warmup Iteration  12: 981632.586 ops/s
# Warmup Iteration  13: 972352.129 ops/s
# Warmup Iteration  14: 980636.399 ops/s
# Warmup Iteration  15: 981715.948 ops/s
# Warmup Iteration  16: 983612.138 ops/s
# Warmup Iteration  17: 1032063.998 ops/s
# Warmup Iteration  18: 1038617.153 ops/s
# Warmup Iteration  19: 1032923.459 ops/s
# Warmup Iteration  20: 1044431.466 ops/s
# Warmup Iteration  21: 1042438.940 ops/s
# Warmup Iteration  22: 1038664.522 ops/s
# Warmup Iteration  23: 1045705.735 ops/s
# Warmup Iteration  24: 1045395.638 ops/s
# Warmup Iteration  25: 1039765.873 ops/s
# Warmup Iteration  26: 1036130.829 ops/s
# Warmup Iteration  27: 1049333.127 ops/s
# Warmup Iteration  28: 1024028.186 ops/s
# Warmup Iteration  29: 1042291.477 ops/s
# Warmup Iteration  30: 1047855.501 ops/s
Iteration   1: 1044034.893 ops/s
Iteration   2: 1040203.304 ops/s
Iteration   3: 1045491.723 ops/s
Iteration   4: 1047685.857 ops/s
Iteration   5: 1044196.308 ops/s
Iteration   6: 1023476.765 ops/s
Iteration   7: 1038689.553 ops/s
Iteration   8: 1043248.460 ops/s
Iteration   9: 1023993.701 ops/s
Iteration  10: 1045779.007 ops/s
Iteration  11: 1029042.585 ops/s
Iteration  12: 1037668.366 ops/s
Iteration  13: 1051798.236 ops/s
Iteration  14: 1045363.730 ops/s
Iteration  15: 1046461.587 ops/s
Iteration  16: 1027356.478 ops/s
Iteration  17: 1049205.220 ops/s
Iteration  18: 1044937.347 ops/s
Iteration  19: 1051536.336 ops/s
Iteration  20: 1044765.515 ops/s
Iteration  21: 1047585.808 ops/s
Iteration  22: 1045351.689 ops/s
Iteration  23: 1037215.496 ops/s
Iteration  24: 1044877.465 ops/s
Iteration  25: 1036884.815 ops/s
Iteration  26: 1043039.418 ops/s
Iteration  27: 1029916.138 ops/s
Iteration  28: 1047945.423 ops/s
Iteration  29: 1045167.317 ops/s
Iteration  30: 1047893.949 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1041693.750 ±(99.9%) 5208.496 ops/s [Average]
  (min, avg, max) = (1023476.765, 1041693.750, 1051798.236), stdev = 7795.832
  CI (99.9%): [1036485.253, 1046902.246] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                         Mode  Cnt        Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1041693.750 ± 5208.496  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 447754.276 ops/s
# Warmup Iteration   2: 942352.080 ops/s
# Warmup Iteration   3: 1022328.969 ops/s
# Warmup Iteration   4: 855611.608 ops/s
# Warmup Iteration   5: 1007160.429 ops/s
# Warmup Iteration   6: 1023214.611 ops/s
# Warmup Iteration   7: 1006077.702 ops/s
# Warmup Iteration   8: 1018324.918 ops/s
# Warmup Iteration   9: 1023986.966 ops/s
# Warmup Iteration  10: 1021431.585 ops/s
# Warmup Iteration  11: 1016041.952 ops/s
# Warmup Iteration  12: 1011637.166 ops/s
# Warmup Iteration  13: 1013068.286 ops/s
# Warmup Iteration  14: 1021657.896 ops/s
# Warmup Iteration  15: 1018431.132 ops/s
# Warmup Iteration  16: 1005883.858 ops/s
# Warmup Iteration  17: 1019291.219 ops/s
# Warmup Iteration  18: 1019839.218 ops/s
# Warmup Iteration  19: 1015808.360 ops/s
# Warmup Iteration  20: 1018893.916 ops/s
# Warmup Iteration  21: 1006386.171 ops/s
# Warmup Iteration  22: 1015530.839 ops/s
# Warmup Iteration  23: 1011905.755 ops/s
# Warmup Iteration  24: 1008601.020 ops/s
# Warmup Iteration  25: 1012406.946 ops/s
# Warmup Iteration  26: 1010738.917 ops/s
# Warmup Iteration  27: 1020274.809 ops/s
# Warmup Iteration  28: 1027035.858 ops/s
# Warmup Iteration  29: 1016985.951 ops/s
# Warmup Iteration  30: 1015380.973 ops/s
Iteration   1: 1013687.291 ops/s
Iteration   2: 1009969.353 ops/s
Iteration   3: 1025123.332 ops/s
Iteration   4: 1001425.609 ops/s
Iteration   5: 1023000.849 ops/s
Iteration   6: 1024033.196 ops/s
Iteration   7: 1008028.247 ops/s
Iteration   8: 1022378.669 ops/s
Iteration   9: 1016568.605 ops/s
Iteration  10: 1017995.551 ops/s
Iteration  11: 1018820.662 ops/s
Iteration  12: 1008134.947 ops/s
Iteration  13: 1019794.707 ops/s
Iteration  14: 1015964.641 ops/s
Iteration  15: 1021493.073 ops/s
Iteration  16: 1024180.240 ops/s
Iteration  17: 1020651.359 ops/s
Iteration  18: 1024386.199 ops/s
Iteration  19: 1002403.264 ops/s
Iteration  20: 1021383.396 ops/s
Iteration  21: 1016490.335 ops/s
Iteration  22: 1012218.626 ops/s
Iteration  23: 1011551.508 ops/s
Iteration  24: 1011685.169 ops/s
Iteration  25: 1012166.174 ops/s
Iteration  26: 1022098.696 ops/s
Iteration  27: 1019916.664 ops/s
Iteration  28: 1024511.923 ops/s
Iteration  29: 1019994.423 ops/s
Iteration  30: 1015146.996 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_makeString":
  1016840.123 ±(99.9%) 4359.473 ops/s [Average]
  (min, avg, max) = (1001425.609, 1016840.123, 1025123.332), stdev = 6525.054
  CI (99.9%): [1012480.651, 1021199.596] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_makeString  thrpt   30  1016840.123 ± 4359.473  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 159279182.027 ops/s
# Warmup Iteration   2: 298500635.357 ops/s
# Warmup Iteration   3: 257475253.911 ops/s
# Warmup Iteration   4: 302497100.278 ops/s
# Warmup Iteration   5: 305812228.314 ops/s
# Warmup Iteration   6: 304044881.190 ops/s
# Warmup Iteration   7: 302557545.239 ops/s
# Warmup Iteration   8: 303213709.538 ops/s
# Warmup Iteration   9: 306571436.418 ops/s
# Warmup Iteration  10: 305934407.134 ops/s
# Warmup Iteration  11: 304081372.109 ops/s
# Warmup Iteration  12: 306664979.961 ops/s
# Warmup Iteration  13: 305455691.747 ops/s
# Warmup Iteration  14: 306396524.121 ops/s
# Warmup Iteration  15: 306477178.148 ops/s
# Warmup Iteration  16: 305687400.430 ops/s
# Warmup Iteration  17: 304963361.102 ops/s
# Warmup Iteration  18: 305381735.546 ops/s
# Warmup Iteration  19: 302984831.241 ops/s
# Warmup Iteration  20: 305606698.775 ops/s
# Warmup Iteration  21: 305943316.958 ops/s
# Warmup Iteration  22: 306422486.201 ops/s
# Warmup Iteration  23: 303328017.082 ops/s
# Warmup Iteration  24: 305064092.120 ops/s
# Warmup Iteration  25: 305020612.959 ops/s
# Warmup Iteration  26: 305357017.724 ops/s
# Warmup Iteration  27: 305098146.719 ops/s
# Warmup Iteration  28: 303922668.918 ops/s
# Warmup Iteration  29: 305169256.353 ops/s
# Warmup Iteration  30: 303346336.041 ops/s
Iteration   1: 304386482.516 ops/s
Iteration   2: 306115391.830 ops/s
Iteration   3: 305826808.129 ops/s
Iteration   4: 300845696.972 ops/s
Iteration   5: 305108349.500 ops/s
Iteration   6: 305382358.451 ops/s
Iteration   7: 303650095.183 ops/s
Iteration   8: 300472638.538 ops/s
Iteration   9: 305637476.288 ops/s
Iteration  10: 301151052.002 ops/s
Iteration  11: 303854394.103 ops/s
Iteration  12: 303613344.563 ops/s
Iteration  13: 306600058.632 ops/s
Iteration  14: 303661694.707 ops/s
Iteration  15: 302021909.264 ops/s
Iteration  16: 305019093.526 ops/s
Iteration  17: 307020739.868 ops/s
Iteration  18: 304207009.748 ops/s
Iteration  19: 305166000.285 ops/s
Iteration  20: 303648650.272 ops/s
Iteration  21: 304511621.204 ops/s
Iteration  22: 306069519.924 ops/s
Iteration  23: 304180499.576 ops/s
Iteration  24: 304656111.232 ops/s
Iteration  25: 305207415.795 ops/s
Iteration  26: 308526328.825 ops/s
Iteration  27: 306961097.654 ops/s
Iteration  28: 307179971.205 ops/s
Iteration  29: 306915371.232 ops/s
Iteration  30: 307116708.989 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_newCollection":
  304823796.334 ±(99.9%) 1305627.148 ops/s [Average]
  (min, avg, max) = (300472638.538, 304823796.334, 308526328.825), stdev = 1954201.399
  CI (99.9%): [303518169.185, 306129423.482] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt          Score         Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_newCollection  thrpt   30  304823796.334 ± 1305627.148  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1025347.196 ops/s
# Warmup Iteration   2: 2338907.877 ops/s
# Warmup Iteration   3: 2827966.848 ops/s
# Warmup Iteration   4: 3403731.565 ops/s
# Warmup Iteration   5: 3431863.721 ops/s
# Warmup Iteration   6: 3423462.459 ops/s
# Warmup Iteration   7: 3415108.766 ops/s
# Warmup Iteration   8: 3384732.802 ops/s
# Warmup Iteration   9: 3408580.862 ops/s
# Warmup Iteration  10: 3400845.359 ops/s
# Warmup Iteration  11: 3413020.926 ops/s
# Warmup Iteration  12: 3403866.772 ops/s
# Warmup Iteration  13: 3380646.410 ops/s
# Warmup Iteration  14: 3362704.561 ops/s
# Warmup Iteration  15: 3416071.372 ops/s
# Warmup Iteration  16: 3379962.749 ops/s
# Warmup Iteration  17: 3372659.679 ops/s
# Warmup Iteration  18: 3388230.827 ops/s
# Warmup Iteration  19: 3395135.669 ops/s
# Warmup Iteration  20: 3397358.563 ops/s
# Warmup Iteration  21: 3401914.790 ops/s
# Warmup Iteration  22: 3377309.157 ops/s
# Warmup Iteration  23: 3387507.415 ops/s
# Warmup Iteration  24: 3414202.371 ops/s
# Warmup Iteration  25: 3399993.863 ops/s
# Warmup Iteration  26: 3402433.011 ops/s
# Warmup Iteration  27: 3391019.870 ops/s
# Warmup Iteration  28: 3386074.483 ops/s
# Warmup Iteration  29: 3428425.973 ops/s
# Warmup Iteration  30: 3393220.786 ops/s
Iteration   1: 3333478.898 ops/s
Iteration   2: 3407075.472 ops/s
Iteration   3: 3412010.069 ops/s
Iteration   4: 3395252.687 ops/s
Iteration   5: 3401229.729 ops/s
Iteration   6: 3363782.841 ops/s
Iteration   7: 3408104.889 ops/s
Iteration   8: 3390374.795 ops/s
Iteration   9: 3367066.981 ops/s
Iteration  10: 3374800.042 ops/s
Iteration  11: 3406901.032 ops/s
Iteration  12: 3353954.755 ops/s
Iteration  13: 3351692.047 ops/s
Iteration  14: 3389827.388 ops/s
Iteration  15: 3416365.368 ops/s
Iteration  16: 3409829.026 ops/s
Iteration  17: 3435989.907 ops/s
Iteration  18: 3339908.016 ops/s
Iteration  19: 3420232.651 ops/s
Iteration  20: 3413595.841 ops/s
Iteration  21: 3420175.251 ops/s
Iteration  22: 3411609.839 ops/s
Iteration  23: 3407671.445 ops/s
Iteration  24: 3368241.595 ops/s
Iteration  25: 3400160.368 ops/s
Iteration  26: 3416435.623 ops/s
Iteration  27: 3396359.369 ops/s
Iteration  28: 3404128.936 ops/s
Iteration  29: 3428952.153 ops/s
Iteration  30: 3407146.187 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith":
  3395078.440 ±(99.9%) 17709.367 ops/s [Average]
  (min, avg, max) = (3333478.898, 3395078.440, 3435989.907), stdev = 26506.549
  CI (99.9%): [3377369.073, 3412787.807] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith  thrpt   30  3395078.440 ± 17709.367  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 582581.319 ops/s
# Warmup Iteration   2: 1183426.150 ops/s
# Warmup Iteration   3: 1424036.858 ops/s
# Warmup Iteration   4: 1212753.851 ops/s
# Warmup Iteration   5: 1417547.612 ops/s
# Warmup Iteration   6: 1416350.623 ops/s
# Warmup Iteration   7: 1431234.237 ops/s
# Warmup Iteration   8: 1421525.582 ops/s
# Warmup Iteration   9: 1414138.871 ops/s
# Warmup Iteration  10: 1416780.811 ops/s
# Warmup Iteration  11: 1428278.521 ops/s
# Warmup Iteration  12: 1429104.632 ops/s
# Warmup Iteration  13: 1411446.562 ops/s
# Warmup Iteration  14: 1427067.995 ops/s
# Warmup Iteration  15: 1414603.376 ops/s
# Warmup Iteration  16: 1421314.819 ops/s
# Warmup Iteration  17: 1405334.116 ops/s
# Warmup Iteration  18: 1421652.284 ops/s
# Warmup Iteration  19: 1411467.271 ops/s
# Warmup Iteration  20: 1414501.695 ops/s
# Warmup Iteration  21: 1423981.955 ops/s
# Warmup Iteration  22: 1421081.606 ops/s
# Warmup Iteration  23: 1413736.272 ops/s
# Warmup Iteration  24: 1395000.136 ops/s
# Warmup Iteration  25: 1415815.066 ops/s
# Warmup Iteration  26: 1419331.606 ops/s
# Warmup Iteration  27: 1420687.521 ops/s
# Warmup Iteration  28: 1424738.331 ops/s
# Warmup Iteration  29: 1429447.946 ops/s
# Warmup Iteration  30: 1421419.877 ops/s
Iteration   1: 1426252.594 ops/s
Iteration   2: 1425881.435 ops/s
Iteration   3: 1416675.056 ops/s
Iteration   4: 1408582.178 ops/s
Iteration   5: 1404354.781 ops/s
Iteration   6: 1422902.196 ops/s
Iteration   7: 1427790.428 ops/s
Iteration   8: 1421279.939 ops/s
Iteration   9: 1402110.916 ops/s
Iteration  10: 1406866.468 ops/s
Iteration  11: 1426885.163 ops/s
Iteration  12: 1420195.985 ops/s
Iteration  13: 1429973.723 ops/s
Iteration  14: 1421294.511 ops/s
Iteration  15: 1386809.964 ops/s
Iteration  16: 1427562.776 ops/s
Iteration  17: 1418397.097 ops/s
Iteration  18: 1436511.326 ops/s
Iteration  19: 1431140.284 ops/s
Iteration  20: 1431709.509 ops/s
Iteration  21: 1426127.313 ops/s
Iteration  22: 1419443.697 ops/s
Iteration  23: 1416402.963 ops/s
Iteration  24: 1391439.834 ops/s
Iteration  25: 1420578.405 ops/s
Iteration  26: 1429295.866 ops/s
Iteration  27: 1425799.973 ops/s
Iteration  28: 1416558.687 ops/s
Iteration  29: 1426808.883 ops/s
Iteration  30: 1409412.155 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy":
  1419168.137 ±(99.9%) 7849.854 ops/s [Average]
  (min, avg, max) = (1386809.964, 1419168.137, 1436511.326), stdev = 11749.293
  CI (99.9%): [1411318.283, 1427017.991] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy  thrpt   30  1419168.137 ± 7849.854  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1717273.151 ops/s
# Warmup Iteration   2: 3640042.941 ops/s
# Warmup Iteration   3: 4149881.957 ops/s
# Warmup Iteration   4: 4906818.252 ops/s
# Warmup Iteration   5: 4944648.827 ops/s
# Warmup Iteration   6: 4946500.520 ops/s
# Warmup Iteration   7: 4918483.658 ops/s
# Warmup Iteration   8: 4959791.469 ops/s
# Warmup Iteration   9: 4947163.224 ops/s
# Warmup Iteration  10: 4903230.631 ops/s
# Warmup Iteration  11: 4922940.399 ops/s
# Warmup Iteration  12: 4949118.421 ops/s
# Warmup Iteration  13: 4959559.322 ops/s
# Warmup Iteration  14: 4938259.084 ops/s
# Warmup Iteration  15: 4946691.423 ops/s
# Warmup Iteration  16: 4869257.710 ops/s
# Warmup Iteration  17: 4868184.127 ops/s
# Warmup Iteration  18: 4881364.824 ops/s
# Warmup Iteration  19: 4939902.402 ops/s
# Warmup Iteration  20: 4928268.768 ops/s
# Warmup Iteration  21: 4959109.798 ops/s
# Warmup Iteration  22: 4941098.876 ops/s
# Warmup Iteration  23: 4943315.736 ops/s
# Warmup Iteration  24: 4917189.734 ops/s
# Warmup Iteration  25: 4953018.179 ops/s
# Warmup Iteration  26: 4951655.144 ops/s
# Warmup Iteration  27: 4916742.721 ops/s
# Warmup Iteration  28: 4939013.490 ops/s
# Warmup Iteration  29: 4938278.840 ops/s
# Warmup Iteration  30: 4883161.593 ops/s
Iteration   1: 4871902.312 ops/s
Iteration   2: 4934570.965 ops/s
Iteration   3: 4795668.520 ops/s
Iteration   4: 4919540.670 ops/s
Iteration   5: 4921469.659 ops/s
Iteration   6: 4955208.611 ops/s
Iteration   7: 4916369.326 ops/s
Iteration   8: 4886898.654 ops/s
Iteration   9: 4959166.401 ops/s
Iteration  10: 4929961.706 ops/s
Iteration  11: 4953796.947 ops/s
Iteration  12: 4934213.170 ops/s
Iteration  13: 4969404.669 ops/s
Iteration  14: 4928490.753 ops/s
Iteration  15: 4946517.199 ops/s
Iteration  16: 4919443.556 ops/s
Iteration  17: 4964325.849 ops/s
Iteration  18: 4833356.513 ops/s
Iteration  19: 4969268.728 ops/s
Iteration  20: 4929800.081 ops/s
Iteration  21: 4929660.651 ops/s
Iteration  22: 4792247.302 ops/s
Iteration  23: 4923994.186 ops/s
Iteration  24: 4954190.844 ops/s
Iteration  25: 4979713.830 ops/s
Iteration  26: 4969261.825 ops/s
Iteration  27: 4960008.706 ops/s
Iteration  28: 4953302.432 ops/s
Iteration  29: 4977345.068 ops/s
Iteration  30: 4913069.727 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_notEmpty":
  4926405.629 ±(99.9%) 32096.982 ops/s [Average]
  (min, avg, max) = (4792247.302, 4926405.629, 4979713.830), stdev = 48041.255
  CI (99.9%): [4894308.647, 4958502.611] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_notEmpty  thrpt   30  4926405.629 ± 32096.982  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 869783.888 ops/s
# Warmup Iteration   2: 1856239.518 ops/s
# Warmup Iteration   3: 2034661.974 ops/s
# Warmup Iteration   4: 1923199.245 ops/s
# Warmup Iteration   5: 2154262.717 ops/s
# Warmup Iteration   6: 2146728.947 ops/s
# Warmup Iteration   7: 2154389.521 ops/s
# Warmup Iteration   8: 2139599.728 ops/s
# Warmup Iteration   9: 2145802.358 ops/s
# Warmup Iteration  10: 2148886.065 ops/s
# Warmup Iteration  11: 2150298.054 ops/s
# Warmup Iteration  12: 2135971.437 ops/s
# Warmup Iteration  13: 2143916.975 ops/s
# Warmup Iteration  14: 2147457.930 ops/s
# Warmup Iteration  15: 2150016.859 ops/s
# Warmup Iteration  16: 2146948.928 ops/s
# Warmup Iteration  17: 2132308.485 ops/s
# Warmup Iteration  18: 2137530.759 ops/s
# Warmup Iteration  19: 2138674.872 ops/s
# Warmup Iteration  20: 2130125.191 ops/s
# Warmup Iteration  21: 2147616.899 ops/s
# Warmup Iteration  22: 2137820.552 ops/s
# Warmup Iteration  23: 2143887.356 ops/s
# Warmup Iteration  24: 2133011.333 ops/s
# Warmup Iteration  25: 2124992.769 ops/s
# Warmup Iteration  26: 2132622.952 ops/s
# Warmup Iteration  27: 2111736.330 ops/s
# Warmup Iteration  28: 2125117.501 ops/s
# Warmup Iteration  29: 2130698.291 ops/s
# Warmup Iteration  30: 2127048.011 ops/s
Iteration   1: 2141875.014 ops/s
Iteration   2: 2101633.551 ops/s
Iteration   3: 2112454.069 ops/s
Iteration   4: 2118592.608 ops/s
Iteration   5: 2129155.917 ops/s
Iteration   6: 2136266.431 ops/s
Iteration   7: 2131858.486 ops/s
Iteration   8: 2131167.557 ops/s
Iteration   9: 2117194.627 ops/s
Iteration  10: 2117179.232 ops/s
Iteration  11: 2144125.190 ops/s
Iteration  12: 2134147.221 ops/s
Iteration  13: 2141484.951 ops/s
Iteration  14: 2113574.724 ops/s
Iteration  15: 2137014.282 ops/s
Iteration  16: 2139420.805 ops/s
Iteration  17: 2136185.432 ops/s
Iteration  18: 2122691.401 ops/s
Iteration  19: 2123674.275 ops/s
Iteration  20: 2127146.463 ops/s
Iteration  21: 2137716.733 ops/s
Iteration  22: 2148327.896 ops/s
Iteration  23: 2108922.001 ops/s
Iteration  24: 2148156.155 ops/s
Iteration  25: 2145296.780 ops/s
Iteration  26: 2143521.839 ops/s
Iteration  27: 2151029.427 ops/s
Iteration  28: 2148314.675 ops/s
Iteration  29: 2145668.779 ops/s
Iteration  30: 2128160.269 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_reduce":
  2132065.226 ±(99.9%) 8892.845 ops/s [Average]
  (min, avg, max) = (2101633.551, 2132065.226, 2151029.427), stdev = 13310.392
  CI (99.9%): [2123172.382, 2140958.071] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_reduce  thrpt   30  2132065.226 ± 8892.845  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 667083.758 ops/s
# Warmup Iteration   2: 1327178.490 ops/s
# Warmup Iteration   3: 1389397.030 ops/s
# Warmup Iteration   4: 1264857.352 ops/s
# Warmup Iteration   5: 1450764.556 ops/s
# Warmup Iteration   6: 1443601.358 ops/s
# Warmup Iteration   7: 1451308.866 ops/s
# Warmup Iteration   8: 1443585.427 ops/s
# Warmup Iteration   9: 1447585.695 ops/s
# Warmup Iteration  10: 1441233.277 ops/s
# Warmup Iteration  11: 1462210.262 ops/s
# Warmup Iteration  12: 1460390.365 ops/s
# Warmup Iteration  13: 1457452.663 ops/s
# Warmup Iteration  14: 1453795.287 ops/s
# Warmup Iteration  15: 1445115.431 ops/s
# Warmup Iteration  16: 1443953.989 ops/s
# Warmup Iteration  17: 1456907.815 ops/s
# Warmup Iteration  18: 1426764.175 ops/s
# Warmup Iteration  19: 1444815.682 ops/s
# Warmup Iteration  20: 1458144.553 ops/s
# Warmup Iteration  21: 1439089.738 ops/s
# Warmup Iteration  22: 1456202.065 ops/s
# Warmup Iteration  23: 1457777.601 ops/s
# Warmup Iteration  24: 1446146.427 ops/s
# Warmup Iteration  25: 1462227.409 ops/s
# Warmup Iteration  26: 1462028.921 ops/s
# Warmup Iteration  27: 1463382.929 ops/s
# Warmup Iteration  28: 1464375.603 ops/s
# Warmup Iteration  29: 1457977.312 ops/s
# Warmup Iteration  30: 1455228.499 ops/s
Iteration   1: 1459797.239 ops/s
Iteration   2: 1457500.715 ops/s
Iteration   3: 1463716.451 ops/s
Iteration   4: 1463603.406 ops/s
Iteration   5: 1460157.045 ops/s
Iteration   6: 1465521.232 ops/s
Iteration   7: 1458055.008 ops/s
Iteration   8: 1459784.064 ops/s
Iteration   9: 1464654.472 ops/s
Iteration  10: 1450579.938 ops/s
Iteration  11: 1437416.977 ops/s
Iteration  12: 1468250.985 ops/s
Iteration  13: 1457371.463 ops/s
Iteration  14: 1451942.545 ops/s
Iteration  15: 1444605.117 ops/s
Iteration  16: 1456324.623 ops/s
Iteration  17: 1441798.860 ops/s
Iteration  18: 1453388.119 ops/s
Iteration  19: 1457207.573 ops/s
Iteration  20: 1467424.196 ops/s
Iteration  21: 1465357.336 ops/s
Iteration  22: 1461881.146 ops/s
Iteration  23: 1451755.847 ops/s
Iteration  24: 1464346.166 ops/s
Iteration  25: 1448099.623 ops/s
Iteration  26: 1459638.696 ops/s
Iteration  27: 1463151.271 ops/s
Iteration  28: 1450899.551 ops/s
Iteration  29: 1445557.505 ops/s
Iteration  30: 1447305.645 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty":
  1456569.760 ±(99.9%) 5388.616 ops/s [Average]
  (min, avg, max) = (1437416.977, 1456569.760, 1468250.985), stdev = 8065.427
  CI (99.9%): [1451181.145, 1461958.376] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  1456569.760 ± 5388.616  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 649256.220 ops/s
# Warmup Iteration   2: 678758.223 ops/s
# Warmup Iteration   3: 895886.042 ops/s
# Warmup Iteration   4: 914633.604 ops/s
# Warmup Iteration   5: 913192.499 ops/s
# Warmup Iteration   6: 904698.935 ops/s
# Warmup Iteration   7: 911987.169 ops/s
# Warmup Iteration   8: 910993.185 ops/s
# Warmup Iteration   9: 911377.680 ops/s
# Warmup Iteration  10: 911108.953 ops/s
# Warmup Iteration  11: 755686.369 ops/s
# Warmup Iteration  12: 908808.508 ops/s
# Warmup Iteration  13: 911621.678 ops/s
# Warmup Iteration  14: 910427.605 ops/s
# Warmup Iteration  15: 912898.702 ops/s
# Warmup Iteration  16: 910013.954 ops/s
# Warmup Iteration  17: 964211.874 ops/s
# Warmup Iteration  18: 963568.800 ops/s
# Warmup Iteration  19: 966456.380 ops/s
# Warmup Iteration  20: 960621.725 ops/s
# Warmup Iteration  21: 961813.176 ops/s
# Warmup Iteration  22: 956695.492 ops/s
# Warmup Iteration  23: 963432.638 ops/s
# Warmup Iteration  24: 955773.384 ops/s
# Warmup Iteration  25: 965935.509 ops/s
# Warmup Iteration  26: 961410.987 ops/s
# Warmup Iteration  27: 962902.311 ops/s
# Warmup Iteration  28: 960435.692 ops/s
# Warmup Iteration  29: 961181.761 ops/s
# Warmup Iteration  30: 960124.857 ops/s
Iteration   1: 958072.416 ops/s
Iteration   2: 962186.112 ops/s
Iteration   3: 965979.504 ops/s
Iteration   4: 963860.670 ops/s
Iteration   5: 960496.295 ops/s
Iteration   6: 957490.072 ops/s
Iteration   7: 956509.977 ops/s
Iteration   8: 958608.623 ops/s
Iteration   9: 965857.021 ops/s
Iteration  10: 959983.580 ops/s
Iteration  11: 959301.596 ops/s
Iteration  12: 959106.316 ops/s
Iteration  13: 962183.122 ops/s
Iteration  14: 960303.780 ops/s
Iteration  15: 962087.907 ops/s
Iteration  16: 964270.997 ops/s
Iteration  17: 959532.207 ops/s
Iteration  18: 955300.232 ops/s
Iteration  19: 933717.442 ops/s
Iteration  20: 961599.220 ops/s
Iteration  21: 960014.976 ops/s
Iteration  22: 957937.233 ops/s
Iteration  23: 958081.218 ops/s
Iteration  24: 950936.566 ops/s
Iteration  25: 954755.506 ops/s
Iteration  26: 963749.512 ops/s
Iteration  27: 961432.600 ops/s
Iteration  28: 960099.435 ops/s
Iteration  29: 945136.383 ops/s
Iteration  30: 964993.675 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows":
  958786.140 ±(99.9%) 4286.766 ops/s [Average]
  (min, avg, max) = (933717.442, 958786.140, 965979.504), stdev = 6416.231
  CI (99.9%): [954499.374, 963072.906] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  958786.140 ± 4286.766  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3346182.687 ops/s
# Warmup Iteration   2: 7257501.669 ops/s
# Warmup Iteration   3: 7145221.872 ops/s
# Warmup Iteration   4: 8558018.275 ops/s
# Warmup Iteration   5: 8540093.613 ops/s
# Warmup Iteration   6: 8458023.972 ops/s
# Warmup Iteration   7: 8573652.662 ops/s
# Warmup Iteration   8: 8563648.030 ops/s
# Warmup Iteration   9: 8501047.572 ops/s
# Warmup Iteration  10: 8556569.812 ops/s
# Warmup Iteration  11: 8547273.227 ops/s
# Warmup Iteration  12: 8536779.600 ops/s
# Warmup Iteration  13: 8526252.019 ops/s
# Warmup Iteration  14: 8553624.653 ops/s
# Warmup Iteration  15: 8525897.011 ops/s
# Warmup Iteration  16: 8503162.244 ops/s
# Warmup Iteration  17: 8555255.818 ops/s
# Warmup Iteration  18: 8486560.888 ops/s
# Warmup Iteration  19: 8500264.940 ops/s
# Warmup Iteration  20: 8550323.632 ops/s
# Warmup Iteration  21: 8554673.554 ops/s
# Warmup Iteration  22: 8561567.450 ops/s
# Warmup Iteration  23: 8500867.896 ops/s
# Warmup Iteration  24: 8580533.956 ops/s
# Warmup Iteration  25: 8572685.864 ops/s
# Warmup Iteration  26: 8570083.139 ops/s
# Warmup Iteration  27: 8562402.137 ops/s
# Warmup Iteration  28: 8569334.144 ops/s
# Warmup Iteration  29: 8573326.756 ops/s
# Warmup Iteration  30: 8547187.895 ops/s
Iteration   1: 8533508.478 ops/s
Iteration   2: 8528932.686 ops/s
Iteration   3: 8559601.213 ops/s
Iteration   4: 8541726.197 ops/s
Iteration   5: 8562967.269 ops/s
Iteration   6: 8516642.741 ops/s
Iteration   7: 8556765.972 ops/s
Iteration   8: 8438182.636 ops/s
Iteration   9: 8541045.657 ops/s
Iteration  10: 8516300.047 ops/s
Iteration  11: 8295972.421 ops/s
Iteration  12: 8274351.943 ops/s
Iteration  13: 8562993.712 ops/s
Iteration  14: 8478352.643 ops/s
Iteration  15: 8568765.109 ops/s
Iteration  16: 8564088.968 ops/s
Iteration  17: 8562862.673 ops/s
Iteration  18: 8546540.874 ops/s
Iteration  19: 8450685.617 ops/s
Iteration  20: 8506522.089 ops/s
Iteration  21: 8525374.912 ops/s
Iteration  22: 8538869.330 ops/s
Iteration  23: 8544794.480 ops/s
Iteration  24: 8549578.117 ops/s
Iteration  25: 8570874.309 ops/s
Iteration  26: 8537595.106 ops/s
Iteration  27: 8578724.113 ops/s
Iteration  28: 8464583.481 ops/s
Iteration  29: 8507454.950 ops/s
Iteration  30: 8536048.356 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_reject":
  8515356.870 ±(99.9%) 48000.087 ops/s [Average]
  (min, avg, max) = (8274351.943, 8515356.870, 8578724.113), stdev = 71844.276
  CI (99.9%): [8467356.783, 8563356.957] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_reject  thrpt   30  8515356.870 ± 48000.087  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4321168.448 ops/s
# Warmup Iteration   2: 7870538.860 ops/s
# Warmup Iteration   3: 8231275.823 ops/s
# Warmup Iteration   4: 8181909.360 ops/s
# Warmup Iteration   5: 6888935.432 ops/s
# Warmup Iteration   6: 8245739.766 ops/s
# Warmup Iteration   7: 8265105.879 ops/s
# Warmup Iteration   8: 8287844.754 ops/s
# Warmup Iteration   9: 8286772.237 ops/s
# Warmup Iteration  10: 8258064.976 ops/s
# Warmup Iteration  11: 8227972.333 ops/s
# Warmup Iteration  12: 8182195.487 ops/s
# Warmup Iteration  13: 8215229.719 ops/s
# Warmup Iteration  14: 8217296.758 ops/s
# Warmup Iteration  15: 8232510.778 ops/s
# Warmup Iteration  16: 8213607.021 ops/s
# Warmup Iteration  17: 8184991.902 ops/s
# Warmup Iteration  18: 8239144.268 ops/s
# Warmup Iteration  19: 8264198.139 ops/s
# Warmup Iteration  20: 8198280.423 ops/s
# Warmup Iteration  21: 8270159.313 ops/s
# Warmup Iteration  22: 8264069.114 ops/s
# Warmup Iteration  23: 8257981.050 ops/s
# Warmup Iteration  24: 8256914.138 ops/s
# Warmup Iteration  25: 8150169.217 ops/s
# Warmup Iteration  26: 8249872.204 ops/s
# Warmup Iteration  27: 8256181.668 ops/s
# Warmup Iteration  28: 8244553.136 ops/s
# Warmup Iteration  29: 8254006.386 ops/s
# Warmup Iteration  30: 8240508.667 ops/s
Iteration   1: 8214153.940 ops/s
Iteration   2: 7996728.797 ops/s
Iteration   3: 8242713.411 ops/s
Iteration   4: 8256804.361 ops/s
Iteration   5: 8205403.837 ops/s
Iteration   6: 8286878.802 ops/s
Iteration   7: 8235895.399 ops/s
Iteration   8: 8266231.254 ops/s
Iteration   9: 8235158.142 ops/s
Iteration  10: 8268499.411 ops/s
Iteration  11: 8139163.346 ops/s
Iteration  12: 8228415.540 ops/s
Iteration  13: 8242437.830 ops/s
Iteration  14: 8249615.696 ops/s
Iteration  15: 8225503.679 ops/s
Iteration  16: 8310968.749 ops/s
Iteration  17: 8249723.281 ops/s
Iteration  18: 8252400.934 ops/s
Iteration  19: 8273310.817 ops/s
Iteration  20: 8214485.636 ops/s
Iteration  21: 8020511.289 ops/s
Iteration  22: 8217064.906 ops/s
Iteration  23: 8264714.181 ops/s
Iteration  24: 8191315.071 ops/s
Iteration  25: 8228420.857 ops/s
Iteration  26: 8115479.831 ops/s
Iteration  27: 8151020.817 ops/s
Iteration  28: 8080891.878 ops/s
Iteration  29: 8247633.655 ops/s
Iteration  30: 8128178.251 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_remove":
  8207990.787 ±(99.9%) 50412.276 ops/s [Average]
  (min, avg, max) = (7996728.797, 8207990.787, 8310968.749), stdev = 75454.727
  CI (99.9%): [8157578.511, 8258403.062] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_remove  thrpt   30  8207990.787 ± 50412.276  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1243102.657 ops/s
# Warmup Iteration   2: 2863303.496 ops/s
# Warmup Iteration   3: 2895584.574 ops/s
# Warmup Iteration   4: 2415002.204 ops/s
# Warmup Iteration   5: 2886119.452 ops/s
# Warmup Iteration   6: 2885845.581 ops/s
# Warmup Iteration   7: 2894556.929 ops/s
# Warmup Iteration   8: 2899899.732 ops/s
# Warmup Iteration   9: 2901557.764 ops/s
# Warmup Iteration  10: 2893626.911 ops/s
# Warmup Iteration  11: 2896760.452 ops/s
# Warmup Iteration  12: 2900218.577 ops/s
# Warmup Iteration  13: 2868592.274 ops/s
# Warmup Iteration  14: 2840498.631 ops/s
# Warmup Iteration  15: 2905118.918 ops/s
# Warmup Iteration  16: 2897597.910 ops/s
# Warmup Iteration  17: 2876073.622 ops/s
# Warmup Iteration  18: 2876967.785 ops/s
# Warmup Iteration  19: 2900484.822 ops/s
# Warmup Iteration  20: 2907085.253 ops/s
# Warmup Iteration  21: 2876031.909 ops/s
# Warmup Iteration  22: 2864708.227 ops/s
# Warmup Iteration  23: 2882487.030 ops/s
# Warmup Iteration  24: 2892049.522 ops/s
# Warmup Iteration  25: 2893354.764 ops/s
# Warmup Iteration  26: 2889865.818 ops/s
# Warmup Iteration  27: 2885892.678 ops/s
# Warmup Iteration  28: 2902483.943 ops/s
# Warmup Iteration  29: 2857586.764 ops/s
# Warmup Iteration  30: 2868808.391 ops/s
Iteration   1: 2894640.827 ops/s
Iteration   2: 2860891.970 ops/s
Iteration   3: 2885198.592 ops/s
Iteration   4: 2842630.028 ops/s
Iteration   5: 2895803.597 ops/s
Iteration   6: 2873898.655 ops/s
Iteration   7: 2912322.798 ops/s
Iteration   8: 2895991.501 ops/s
Iteration   9: 2913823.370 ops/s
Iteration  10: 2887031.059 ops/s
Iteration  11: 2893842.143 ops/s
Iteration  12: 2851721.708 ops/s
Iteration  13: 2894438.754 ops/s
Iteration  14: 2879690.407 ops/s
Iteration  15: 2879513.376 ops/s
Iteration  16: 2891508.182 ops/s
Iteration  17: 2847866.616 ops/s
Iteration  18: 2887315.588 ops/s
Iteration  19: 2853311.915 ops/s
Iteration  20: 2890688.352 ops/s
Iteration  21: 2894844.333 ops/s
Iteration  22: 2898535.278 ops/s
Iteration  23: 2898601.473 ops/s
Iteration  24: 2890131.112 ops/s
Iteration  25: 2893860.362 ops/s
Iteration  26: 2886226.125 ops/s
Iteration  27: 2902911.161 ops/s
Iteration  28: 2878544.693 ops/s
Iteration  29: 2885971.537 ops/s
Iteration  30: 2845728.305 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_removeAll":
  2883582.794 ±(99.9%) 12788.142 ops/s [Average]
  (min, avg, max) = (2842630.028, 2883582.794, 2913823.370), stdev = 19140.691
  CI (99.9%): [2870794.652, 2896370.936] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_removeAll  thrpt   30  2883582.794 ± 12788.142  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1004077.710 ops/s
# Warmup Iteration   2: 2365187.388 ops/s
# Warmup Iteration   3: 2180564.489 ops/s
# Warmup Iteration   4: 2130028.560 ops/s
# Warmup Iteration   5: 2370415.130 ops/s
# Warmup Iteration   6: 2371135.640 ops/s
# Warmup Iteration   7: 2377722.588 ops/s
# Warmup Iteration   8: 2364853.958 ops/s
# Warmup Iteration   9: 2375249.747 ops/s
# Warmup Iteration  10: 2374066.203 ops/s
# Warmup Iteration  11: 2348352.687 ops/s
# Warmup Iteration  12: 2358815.790 ops/s
# Warmup Iteration  13: 2356512.185 ops/s
# Warmup Iteration  14: 2364882.644 ops/s
# Warmup Iteration  15: 2376341.945 ops/s
# Warmup Iteration  16: 2344466.436 ops/s
# Warmup Iteration  17: 2350035.355 ops/s
# Warmup Iteration  18: 2372650.825 ops/s
# Warmup Iteration  19: 2376707.326 ops/s
# Warmup Iteration  20: 2374221.213 ops/s
# Warmup Iteration  21: 2376906.524 ops/s
# Warmup Iteration  22: 2352139.614 ops/s
# Warmup Iteration  23: 2358180.246 ops/s
# Warmup Iteration  24: 2366451.081 ops/s
# Warmup Iteration  25: 2371436.321 ops/s
# Warmup Iteration  26: 2368071.982 ops/s
# Warmup Iteration  27: 2358788.781 ops/s
# Warmup Iteration  28: 2364033.306 ops/s
# Warmup Iteration  29: 2356166.952 ops/s
# Warmup Iteration  30: 2359894.849 ops/s
Iteration   1: 2353407.498 ops/s
Iteration   2: 2363044.441 ops/s
Iteration   3: 2375101.989 ops/s
Iteration   4: 2378299.791 ops/s
Iteration   5: 2382548.162 ops/s
Iteration   6: 2354180.921 ops/s
Iteration   7: 2382644.193 ops/s
Iteration   8: 2384043.064 ops/s
Iteration   9: 2373015.691 ops/s
Iteration  10: 2374823.356 ops/s
Iteration  11: 2375466.174 ops/s
Iteration  12: 2360322.541 ops/s
Iteration  13: 2384679.810 ops/s
Iteration  14: 2367174.074 ops/s
Iteration  15: 2341030.568 ops/s
Iteration  16: 2372646.870 ops/s
Iteration  17: 2374227.831 ops/s
Iteration  18: 2391236.814 ops/s
Iteration  19: 2330740.498 ops/s
Iteration  20: 2373742.507 ops/s
Iteration  21: 2378486.904 ops/s
Iteration  22: 2392257.236 ops/s
Iteration  23: 2366332.825 ops/s
Iteration  24: 2371729.565 ops/s
Iteration  25: 2366564.769 ops/s
Iteration  26: 2385767.102 ops/s
Iteration  27: 2373507.917 ops/s
Iteration  28: 2385382.415 ops/s
Iteration  29: 2368145.054 ops/s
Iteration  30: 2372019.963 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable":
  2371752.351 ±(99.9%) 9152.102 ops/s [Average]
  (min, avg, max) = (2330740.498, 2371752.351, 2392257.236), stdev = 13698.436
  CI (99.9%): [2362600.250, 2380904.453] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  2371752.351 ± 9152.102  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 516493.586 ops/s
# Warmup Iteration   2: 1185714.516 ops/s
# Warmup Iteration   3: 1183136.765 ops/s
# Warmup Iteration   4: 993013.825 ops/s
# Warmup Iteration   5: 1185019.795 ops/s
# Warmup Iteration   6: 1187363.122 ops/s
# Warmup Iteration   7: 1184856.933 ops/s
# Warmup Iteration   8: 1187385.163 ops/s
# Warmup Iteration   9: 1180927.907 ops/s
# Warmup Iteration  10: 1188272.637 ops/s
# Warmup Iteration  11: 1188577.254 ops/s
# Warmup Iteration  12: 1177755.710 ops/s
# Warmup Iteration  13: 1154663.623 ops/s
# Warmup Iteration  14: 1175219.528 ops/s
# Warmup Iteration  15: 1178227.947 ops/s
# Warmup Iteration  16: 1177698.456 ops/s
# Warmup Iteration  17: 1186085.106 ops/s
# Warmup Iteration  18: 1181941.245 ops/s
# Warmup Iteration  19: 1175944.866 ops/s
# Warmup Iteration  20: 1167416.295 ops/s
# Warmup Iteration  21: 1152497.759 ops/s
# Warmup Iteration  22: 1169925.421 ops/s
# Warmup Iteration  23: 1155430.924 ops/s
# Warmup Iteration  24: 1164120.689 ops/s
# Warmup Iteration  25: 1160559.811 ops/s
# Warmup Iteration  26: 1164643.153 ops/s
# Warmup Iteration  27: 1191144.246 ops/s
# Warmup Iteration  28: 1186356.060 ops/s
# Warmup Iteration  29: 1191464.291 ops/s
# Warmup Iteration  30: 1188351.332 ops/s
Iteration   1: 1189805.804 ops/s
Iteration   2: 1175729.793 ops/s
Iteration   3: 1188797.727 ops/s
Iteration   4: 1176213.754 ops/s
Iteration   5: 1183034.084 ops/s
Iteration   6: 1187521.297 ops/s
Iteration   7: 1190710.846 ops/s
Iteration   8: 1182218.746 ops/s
Iteration   9: 1183231.218 ops/s
Iteration  10: 1184466.699 ops/s
Iteration  11: 1189352.853 ops/s
Iteration  12: 1182484.382 ops/s
Iteration  13: 1190874.430 ops/s
Iteration  14: 1173089.953 ops/s
Iteration  15: 1192982.821 ops/s
Iteration  16: 1189934.999 ops/s
Iteration  17: 1165875.396 ops/s
Iteration  18: 1190568.142 ops/s
Iteration  19: 1191036.926 ops/s
Iteration  20: 1181772.680 ops/s
Iteration  21: 1187714.585 ops/s
Iteration  22: 1193407.991 ops/s
Iteration  23: 1181403.566 ops/s
Iteration  24: 1180360.851 ops/s
Iteration  25: 1178908.585 ops/s
Iteration  26: 1190195.223 ops/s
Iteration  27: 1195684.366 ops/s
Iteration  28: 1195322.507 ops/s
Iteration  29: 1186941.921 ops/s
Iteration  30: 1156622.339 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_retainAll":
  1184542.149 ±(99.9%) 5803.378 ops/s [Average]
  (min, avg, max) = (1156622.339, 1184542.149, 1195684.366), stdev = 8686.224
  CI (99.9%): [1178738.771, 1190345.528] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_retainAll  thrpt   30  1184542.149 ± 5803.378  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 388535.371 ops/s
# Warmup Iteration   2: 830674.939 ops/s
# Warmup Iteration   3: 859568.165 ops/s
# Warmup Iteration   4: 807542.047 ops/s
# Warmup Iteration   5: 768398.174 ops/s
# Warmup Iteration   6: 866363.546 ops/s
# Warmup Iteration   7: 864599.283 ops/s
# Warmup Iteration   8: 857368.933 ops/s
# Warmup Iteration   9: 867036.160 ops/s
# Warmup Iteration  10: 868966.387 ops/s
# Warmup Iteration  11: 858518.615 ops/s
# Warmup Iteration  12: 862765.253 ops/s
# Warmup Iteration  13: 870037.272 ops/s
# Warmup Iteration  14: 856296.091 ops/s
# Warmup Iteration  15: 869411.961 ops/s
# Warmup Iteration  16: 855619.029 ops/s
# Warmup Iteration  17: 851751.808 ops/s
# Warmup Iteration  18: 868737.247 ops/s
# Warmup Iteration  19: 855784.135 ops/s
# Warmup Iteration  20: 857736.639 ops/s
# Warmup Iteration  21: 866525.104 ops/s
# Warmup Iteration  22: 858511.478 ops/s
# Warmup Iteration  23: 866304.616 ops/s
# Warmup Iteration  24: 858795.111 ops/s
# Warmup Iteration  25: 862621.181 ops/s
# Warmup Iteration  26: 865876.882 ops/s
# Warmup Iteration  27: 863530.665 ops/s
# Warmup Iteration  28: 856333.025 ops/s
# Warmup Iteration  29: 860103.419 ops/s
# Warmup Iteration  30: 866217.051 ops/s
Iteration   1: 868525.147 ops/s
Iteration   2: 863488.861 ops/s
Iteration   3: 865391.265 ops/s
Iteration   4: 866355.970 ops/s
Iteration   5: 869036.079 ops/s
Iteration   6: 866261.155 ops/s
Iteration   7: 866519.681 ops/s
Iteration   8: 844701.293 ops/s
Iteration   9: 866260.621 ops/s
Iteration  10: 869901.152 ops/s
Iteration  11: 867250.084 ops/s
Iteration  12: 865023.720 ops/s
Iteration  13: 865619.071 ops/s
Iteration  14: 866045.090 ops/s
Iteration  15: 864868.051 ops/s
Iteration  16: 863407.330 ops/s
Iteration  17: 864594.226 ops/s
Iteration  18: 868428.213 ops/s
Iteration  19: 865987.400 ops/s
Iteration  20: 870896.471 ops/s
Iteration  21: 863990.762 ops/s
Iteration  22: 868419.399 ops/s
Iteration  23: 870191.154 ops/s
Iteration  24: 850854.972 ops/s
Iteration  25: 853915.475 ops/s
Iteration  26: 868037.746 ops/s
Iteration  27: 855227.890 ops/s
Iteration  28: 865353.585 ops/s
Iteration  29: 867794.164 ops/s
Iteration  30: 865951.667 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable":
  864609.923 ±(99.9%) 3928.971 ops/s [Average]
  (min, avg, max) = (844701.293, 864609.923, 870896.471), stdev = 5880.699
  CI (99.9%): [860680.952, 868538.894] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  864609.923 ± 3928.971  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3310158.936 ops/s
# Warmup Iteration   2: 7009432.270 ops/s
# Warmup Iteration   3: 7183438.164 ops/s
# Warmup Iteration   4: 8415132.416 ops/s
# Warmup Iteration   5: 8564812.308 ops/s
# Warmup Iteration   6: 8559035.125 ops/s
# Warmup Iteration   7: 8490511.253 ops/s
# Warmup Iteration   8: 8534512.240 ops/s
# Warmup Iteration   9: 8563546.081 ops/s
# Warmup Iteration  10: 8464995.052 ops/s
# Warmup Iteration  11: 8480311.414 ops/s
# Warmup Iteration  12: 8573888.868 ops/s
# Warmup Iteration  13: 8575486.779 ops/s
# Warmup Iteration  14: 8512242.236 ops/s
# Warmup Iteration  15: 8567033.957 ops/s
# Warmup Iteration  16: 8575643.749 ops/s
# Warmup Iteration  17: 8592026.651 ops/s
# Warmup Iteration  18: 8548507.950 ops/s
# Warmup Iteration  19: 8534351.571 ops/s
# Warmup Iteration  20: 8543442.861 ops/s
# Warmup Iteration  21: 8580498.420 ops/s
# Warmup Iteration  22: 8517764.715 ops/s
# Warmup Iteration  23: 8558716.956 ops/s
# Warmup Iteration  24: 8497175.960 ops/s
# Warmup Iteration  25: 8568481.221 ops/s
# Warmup Iteration  26: 8580005.164 ops/s
# Warmup Iteration  27: 8455729.170 ops/s
# Warmup Iteration  28: 8506083.298 ops/s
# Warmup Iteration  29: 8484295.998 ops/s
# Warmup Iteration  30: 8545515.064 ops/s
Iteration   1: 8584714.506 ops/s
Iteration   2: 8581313.634 ops/s
Iteration   3: 8543784.335 ops/s
Iteration   4: 8301642.863 ops/s
Iteration   5: 8576047.663 ops/s
Iteration   6: 8540947.931 ops/s
Iteration   7: 8578796.180 ops/s
Iteration   8: 8567094.710 ops/s
Iteration   9: 8516802.110 ops/s
Iteration  10: 8524718.695 ops/s
Iteration  11: 8506544.546 ops/s
Iteration  12: 8499125.317 ops/s
Iteration  13: 8535101.475 ops/s
Iteration  14: 8573924.481 ops/s
Iteration  15: 8518946.107 ops/s
Iteration  16: 8543653.834 ops/s
Iteration  17: 8539136.634 ops/s
Iteration  18: 8590571.088 ops/s
Iteration  19: 8521170.439 ops/s
Iteration  20: 8547539.387 ops/s
Iteration  21: 8465071.597 ops/s
Iteration  22: 8533774.366 ops/s
Iteration  23: 8572582.376 ops/s
Iteration  24: 8537146.642 ops/s
Iteration  25: 8438654.036 ops/s
Iteration  26: 8507987.180 ops/s
Iteration  27: 8335727.256 ops/s
Iteration  28: 8512721.887 ops/s
Iteration  29: 8580176.324 ops/s
Iteration  30: 8502608.088 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_select":
  8522600.856 ±(99.9%) 44153.604 ops/s [Average]
  (min, avg, max) = (8301642.863, 8522600.856, 8590571.088), stdev = 66087.041
  CI (99.9%): [8478447.252, 8566754.460] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_select  thrpt   30  8522600.856 ± 44153.604  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1384303.729 ops/s
# Warmup Iteration   2: 2936997.980 ops/s
# Warmup Iteration   3: 3043017.624 ops/s
# Warmup Iteration   4: 3615631.957 ops/s
# Warmup Iteration   5: 3635991.781 ops/s
# Warmup Iteration   6: 3636746.984 ops/s
# Warmup Iteration   7: 3633916.661 ops/s
# Warmup Iteration   8: 3611588.090 ops/s
# Warmup Iteration   9: 3627395.543 ops/s
# Warmup Iteration  10: 3583080.652 ops/s
# Warmup Iteration  11: 3588604.704 ops/s
# Warmup Iteration  12: 3640272.301 ops/s
# Warmup Iteration  13: 3642242.266 ops/s
# Warmup Iteration  14: 3617399.527 ops/s
# Warmup Iteration  15: 3649352.207 ops/s
# Warmup Iteration  16: 3656451.834 ops/s
# Warmup Iteration  17: 3642865.957 ops/s
# Warmup Iteration  18: 3609565.899 ops/s
# Warmup Iteration  19: 3657360.464 ops/s
# Warmup Iteration  20: 3597493.799 ops/s
# Warmup Iteration  21: 3653413.029 ops/s
# Warmup Iteration  22: 3631565.270 ops/s
# Warmup Iteration  23: 3628682.120 ops/s
# Warmup Iteration  24: 3648771.780 ops/s
# Warmup Iteration  25: 3630425.980 ops/s
# Warmup Iteration  26: 3642876.309 ops/s
# Warmup Iteration  27: 3640439.377 ops/s
# Warmup Iteration  28: 3645075.000 ops/s
# Warmup Iteration  29: 3624621.389 ops/s
# Warmup Iteration  30: 3648644.506 ops/s
Iteration   1: 3636945.845 ops/s
Iteration   2: 3646849.912 ops/s
Iteration   3: 3689118.119 ops/s
Iteration   4: 3645963.039 ops/s
Iteration   5: 3612496.520 ops/s
Iteration   6: 3566367.028 ops/s
Iteration   7: 3629087.283 ops/s
Iteration   8: 3634878.955 ops/s
Iteration   9: 3615820.147 ops/s
Iteration  10: 3677018.420 ops/s
Iteration  11: 3661551.795 ops/s
Iteration  12: 3592305.528 ops/s
Iteration  13: 3626615.662 ops/s
Iteration  14: 3660994.670 ops/s
Iteration  15: 3648248.582 ops/s
Iteration  16: 3687557.917 ops/s
Iteration  17: 3681839.153 ops/s
Iteration  18: 3676843.716 ops/s
Iteration  19: 3690254.393 ops/s
Iteration  20: 3560422.476 ops/s
Iteration  21: 3669600.042 ops/s
Iteration  22: 3674559.492 ops/s
Iteration  23: 3603485.618 ops/s
Iteration  24: 3661826.676 ops/s
Iteration  25: 3684539.368 ops/s
Iteration  26: 3681628.265 ops/s
Iteration  27: 3677777.322 ops/s
Iteration  28: 3616475.901 ops/s
Iteration  29: 3646765.692 ops/s
Iteration  30: 3653324.693 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_size":
  3647038.741 ±(99.9%) 23784.488 ops/s [Average]
  (min, avg, max) = (3560422.476, 3647038.741, 3690254.393), stdev = 35599.504
  CI (99.9%): [3623254.253, 3670823.228] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_size  thrpt   30  3647038.741 ± 23784.488  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 161772839.953 ops/s
# Warmup Iteration   2: 296259434.216 ops/s
# Warmup Iteration   3: 261228077.937 ops/s
# Warmup Iteration   4: 305754647.925 ops/s
# Warmup Iteration   5: 307126966.966 ops/s
# Warmup Iteration   6: 307460145.705 ops/s
# Warmup Iteration   7: 305426834.876 ops/s
# Warmup Iteration   8: 305345751.255 ops/s
# Warmup Iteration   9: 305146204.893 ops/s
# Warmup Iteration  10: 304514787.398 ops/s
# Warmup Iteration  11: 305914303.128 ops/s
# Warmup Iteration  12: 298177914.234 ops/s
# Warmup Iteration  13: 302111834.409 ops/s
# Warmup Iteration  14: 301863701.899 ops/s
# Warmup Iteration  15: 301363540.982 ops/s
# Warmup Iteration  16: 300775888.741 ops/s
# Warmup Iteration  17: 299815028.409 ops/s
# Warmup Iteration  18: 295653553.057 ops/s
# Warmup Iteration  19: 296705415.433 ops/s
# Warmup Iteration  20: 297105368.909 ops/s
# Warmup Iteration  21: 288657689.221 ops/s
# Warmup Iteration  22: 296883811.606 ops/s
# Warmup Iteration  23: 299259347.679 ops/s
# Warmup Iteration  24: 303035796.065 ops/s
# Warmup Iteration  25: 297934972.192 ops/s
# Warmup Iteration  26: 298237104.186 ops/s
# Warmup Iteration  27: 282675802.686 ops/s
# Warmup Iteration  28: 276345863.873 ops/s
# Warmup Iteration  29: 276780624.943 ops/s
# Warmup Iteration  30: 275860349.211 ops/s
Iteration   1: 271783295.055 ops/s
Iteration   2: 274905002.203 ops/s
Iteration   3: 291860598.967 ops/s
Iteration   4: 306304957.992 ops/s
Iteration   5: 303475097.698 ops/s
Iteration   6: 299629272.738 ops/s
Iteration   7: 305473530.458 ops/s
Iteration   8: 306730179.600 ops/s
Iteration   9: 306638391.191 ops/s
Iteration  10: 300660242.676 ops/s
Iteration  11: 301016053.083 ops/s
Iteration  12: 304893896.730 ops/s
Iteration  13: 301014435.193 ops/s
Iteration  14: 305536023.692 ops/s
Iteration  15: 305187944.532 ops/s
Iteration  16: 303895155.069 ops/s
Iteration  17: 306293924.964 ops/s
Iteration  18: 300232003.599 ops/s
Iteration  19: 304441274.725 ops/s
Iteration  20: 305983538.026 ops/s
Iteration  21: 304295116.397 ops/s
Iteration  22: 305945464.789 ops/s
Iteration  23: 300287314.613 ops/s
Iteration  24: 301141904.613 ops/s
Iteration  25: 304302144.118 ops/s
Iteration  26: 301266574.691 ops/s
Iteration  27: 301734522.456 ops/s
Iteration  28: 306005517.492 ops/s
Iteration  29: 298985960.373 ops/s
Iteration  30: 303112815.541 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_testEquals":
  301101071.776 ±(99.9%) 5473768.902 ops/s [Average]
  (min, avg, max) = (271783295.055, 301101071.776, 306730179.600), stdev = 8192880.226
  CI (99.9%): [295627302.874, 306574840.678] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt          Score         Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_testEquals  thrpt   30  301101071.776 ± 5473768.902  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 163626528.611 ops/s
# Warmup Iteration   2: 300286970.860 ops/s
# Warmup Iteration   3: 259661945.634 ops/s
# Warmup Iteration   4: 306094223.287 ops/s
# Warmup Iteration   5: 301759382.244 ops/s
# Warmup Iteration   6: 306272292.995 ops/s
# Warmup Iteration   7: 305749268.382 ops/s
# Warmup Iteration   8: 303569042.644 ops/s
# Warmup Iteration   9: 306165499.938 ops/s
# Warmup Iteration  10: 306125197.914 ops/s
# Warmup Iteration  11: 304565952.801 ops/s
# Warmup Iteration  12: 304403434.968 ops/s
# Warmup Iteration  13: 303414127.022 ops/s
# Warmup Iteration  14: 304717783.623 ops/s
# Warmup Iteration  15: 300261742.020 ops/s
# Warmup Iteration  16: 304109868.054 ops/s
# Warmup Iteration  17: 304637425.788 ops/s
# Warmup Iteration  18: 303598977.388 ops/s
# Warmup Iteration  19: 304411566.488 ops/s
# Warmup Iteration  20: 303092354.354 ops/s
# Warmup Iteration  21: 301127553.355 ops/s
# Warmup Iteration  22: 303635227.489 ops/s
# Warmup Iteration  23: 306442175.665 ops/s
# Warmup Iteration  24: 304241501.528 ops/s
# Warmup Iteration  25: 303074591.170 ops/s
# Warmup Iteration  26: 305142509.586 ops/s
# Warmup Iteration  27: 304262977.032 ops/s
# Warmup Iteration  28: 300309197.213 ops/s
# Warmup Iteration  29: 305582457.667 ops/s
# Warmup Iteration  30: 304527915.037 ops/s
Iteration   1: 305092358.376 ops/s
Iteration   2: 304768385.328 ops/s
Iteration   3: 303725090.438 ops/s
Iteration   4: 304820216.769 ops/s
Iteration   5: 306732620.712 ops/s
Iteration   6: 305843689.866 ops/s
Iteration   7: 304946193.899 ops/s
Iteration   8: 304288020.100 ops/s
Iteration   9: 304913548.169 ops/s
Iteration  10: 304770751.473 ops/s
Iteration  11: 305590659.474 ops/s
Iteration  12: 303631239.506 ops/s
Iteration  13: 306545703.120 ops/s
Iteration  14: 305326538.227 ops/s
Iteration  15: 303234380.698 ops/s
Iteration  16: 305942887.293 ops/s
Iteration  17: 303513032.595 ops/s
Iteration  18: 300198111.403 ops/s
Iteration  19: 304732741.444 ops/s
Iteration  20: 303775734.526 ops/s
Iteration  21: 302939373.202 ops/s
Iteration  22: 300759400.539 ops/s
Iteration  23: 304429063.933 ops/s
Iteration  24: 305819829.522 ops/s
Iteration  25: 304432544.292 ops/s
Iteration  26: 303799232.393 ops/s
Iteration  27: 302983813.606 ops/s
Iteration  28: 304467003.956 ops/s
Iteration  29: 304851901.514 ops/s
Iteration  30: 305734442.787 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_testHashCode":
  304420283.639 ±(99.9%) 972048.944 ops/s [Average]
  (min, avg, max) = (300198111.403, 304420283.639, 306732620.712), stdev = 1454917.209
  CI (99.9%): [303448234.694, 305392332.583] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt          Score        Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_testHashCode  thrpt   30  304420283.639 ± 972048.944  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 162399820.675 ops/s
# Warmup Iteration   2: 300506115.141 ops/s
# Warmup Iteration   3: 254705622.307 ops/s
# Warmup Iteration   4: 300958884.819 ops/s
# Warmup Iteration   5: 302791962.184 ops/s
# Warmup Iteration   6: 301107795.185 ops/s
# Warmup Iteration   7: 301118351.597 ops/s
# Warmup Iteration   8: 300835233.806 ops/s
# Warmup Iteration   9: 302912103.839 ops/s
# Warmup Iteration  10: 301626924.741 ops/s
# Warmup Iteration  11: 302799200.437 ops/s
# Warmup Iteration  12: 301255035.003 ops/s
# Warmup Iteration  13: 299971255.552 ops/s
# Warmup Iteration  14: 301019539.446 ops/s
# Warmup Iteration  15: 301302712.582 ops/s
# Warmup Iteration  16: 299569186.567 ops/s
# Warmup Iteration  17: 298972379.152 ops/s
# Warmup Iteration  18: 299251976.763 ops/s
# Warmup Iteration  19: 299312746.642 ops/s
# Warmup Iteration  20: 301301608.417 ops/s
# Warmup Iteration  21: 297270177.898 ops/s
# Warmup Iteration  22: 299420482.570 ops/s
# Warmup Iteration  23: 301339945.720 ops/s
# Warmup Iteration  24: 302226275.524 ops/s
# Warmup Iteration  25: 301348571.255 ops/s
# Warmup Iteration  26: 302617601.427 ops/s
# Warmup Iteration  27: 301577847.323 ops/s
# Warmup Iteration  28: 299517700.028 ops/s
# Warmup Iteration  29: 302581544.173 ops/s
# Warmup Iteration  30: 301935527.667 ops/s
Iteration   1: 301224971.811 ops/s
Iteration   2: 301660009.989 ops/s
Iteration   3: 300750492.806 ops/s
Iteration   4: 301279681.347 ops/s
Iteration   5: 300237745.552 ops/s
Iteration   6: 295907562.721 ops/s
Iteration   7: 300949899.353 ops/s
Iteration   8: 299520700.140 ops/s
Iteration   9: 302839970.383 ops/s
Iteration  10: 299725572.539 ops/s
Iteration  11: 301355786.274 ops/s
Iteration  12: 300685119.077 ops/s
Iteration  13: 299533848.800 ops/s
Iteration  14: 300206546.994 ops/s
Iteration  15: 302092306.385 ops/s
Iteration  16: 301289220.475 ops/s
Iteration  17: 295246897.815 ops/s
Iteration  18: 302913806.929 ops/s
Iteration  19: 300681418.332 ops/s
Iteration  20: 300886144.282 ops/s
Iteration  21: 303228871.774 ops/s
Iteration  22: 297602380.504 ops/s
Iteration  23: 300678409.903 ops/s
Iteration  24: 300622736.197 ops/s
Iteration  25: 297372259.871 ops/s
Iteration  26: 302160638.186 ops/s
Iteration  27: 298383927.581 ops/s
Iteration  28: 301645898.887 ops/s
Iteration  29: 303490390.507 ops/s
Iteration  30: 300146205.446 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_testToString":
  300477314.029 ±(99.9%) 1317427.596 ops/s [Average]
  (min, avg, max) = (295246897.815, 300477314.029, 303490390.507), stdev = 1971863.754
  CI (99.9%): [299159886.433, 301794741.624] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt          Score         Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_testToString  thrpt   30  300477314.029 ± 1317427.596  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 995451.013 ops/s
# Warmup Iteration   2: 2120930.690 ops/s
# Warmup Iteration   3: 2061751.285 ops/s
# Warmup Iteration   4: 2402463.156 ops/s
# Warmup Iteration   5: 2448337.393 ops/s
# Warmup Iteration   6: 2425667.423 ops/s
# Warmup Iteration   7: 2451207.209 ops/s
# Warmup Iteration   8: 2446494.260 ops/s
# Warmup Iteration   9: 2427719.035 ops/s
# Warmup Iteration  10: 2444655.546 ops/s
# Warmup Iteration  11: 2456676.891 ops/s
# Warmup Iteration  12: 2451422.643 ops/s
# Warmup Iteration  13: 2430862.088 ops/s
# Warmup Iteration  14: 2439524.591 ops/s
# Warmup Iteration  15: 2430151.210 ops/s
# Warmup Iteration  16: 2453785.043 ops/s
# Warmup Iteration  17: 2440264.309 ops/s
# Warmup Iteration  18: 2451025.287 ops/s
# Warmup Iteration  19: 2440952.685 ops/s
# Warmup Iteration  20: 2400790.819 ops/s
# Warmup Iteration  21: 2446071.337 ops/s
# Warmup Iteration  22: 2425445.934 ops/s
# Warmup Iteration  23: 2430343.971 ops/s
# Warmup Iteration  24: 2396051.465 ops/s
# Warmup Iteration  25: 2440572.579 ops/s
# Warmup Iteration  26: 2428385.845 ops/s
# Warmup Iteration  27: 2433024.672 ops/s
# Warmup Iteration  28: 2443426.603 ops/s
# Warmup Iteration  29: 2446316.630 ops/s
# Warmup Iteration  30: 2416557.159 ops/s
Iteration   1: 2438140.186 ops/s
Iteration   2: 2443666.094 ops/s
Iteration   3: 2434262.944 ops/s
Iteration   4: 2402253.723 ops/s
Iteration   5: 2427624.341 ops/s
Iteration   6: 2437981.655 ops/s
Iteration   7: 2447938.088 ops/s
Iteration   8: 2436457.902 ops/s
Iteration   9: 2440297.321 ops/s
Iteration  10: 2411480.681 ops/s
Iteration  11: 2461282.330 ops/s
Iteration  12: 2448787.859 ops/s
Iteration  13: 2434643.262 ops/s
Iteration  14: 2435889.155 ops/s
Iteration  15: 2431950.719 ops/s
Iteration  16: 2423682.589 ops/s
Iteration  17: 2441723.093 ops/s
Iteration  18: 2434271.555 ops/s
Iteration  19: 2447969.152 ops/s
Iteration  20: 2452913.737 ops/s
Iteration  21: 2434483.317 ops/s
Iteration  22: 2443401.000 ops/s
Iteration  23: 2438728.986 ops/s
Iteration  24: 2404340.442 ops/s
Iteration  25: 2444401.351 ops/s
Iteration  26: 2448017.374 ops/s
Iteration  27: 2447792.386 ops/s
Iteration  28: 2389889.386 ops/s
Iteration  29: 2444244.454 ops/s
Iteration  30: 2434442.257 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_toArray":
  2435431.911 ±(99.9%) 10444.538 ops/s [Average]
  (min, avg, max) = (2389889.386, 2435431.911, 2461282.330), stdev = 15632.894
  CI (99.9%): [2424987.373, 2445876.449] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_toArray  thrpt   30  2435431.911 ± 10444.538  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 661181.666 ops/s
# Warmup Iteration   2: 1510257.822 ops/s
# Warmup Iteration   3: 1671339.019 ops/s
# Warmup Iteration   4: 1388562.480 ops/s
# Warmup Iteration   5: 1685903.834 ops/s
# Warmup Iteration   6: 1682563.036 ops/s
# Warmup Iteration   7: 1682123.970 ops/s
# Warmup Iteration   8: 1670733.990 ops/s
# Warmup Iteration   9: 1676931.183 ops/s
# Warmup Iteration  10: 1670938.726 ops/s
# Warmup Iteration  11: 1678238.500 ops/s
# Warmup Iteration  12: 1679313.098 ops/s
# Warmup Iteration  13: 1663573.972 ops/s
# Warmup Iteration  14: 1666811.144 ops/s
# Warmup Iteration  15: 1677761.671 ops/s
# Warmup Iteration  16: 1689278.297 ops/s
# Warmup Iteration  17: 1680751.042 ops/s
# Warmup Iteration  18: 1681350.573 ops/s
# Warmup Iteration  19: 1680818.874 ops/s
# Warmup Iteration  20: 1685072.634 ops/s
# Warmup Iteration  21: 1690347.673 ops/s
# Warmup Iteration  22: 1684850.940 ops/s
# Warmup Iteration  23: 1663141.547 ops/s
# Warmup Iteration  24: 1671308.789 ops/s
# Warmup Iteration  25: 1661109.255 ops/s
# Warmup Iteration  26: 1670379.061 ops/s
# Warmup Iteration  27: 1670669.743 ops/s
# Warmup Iteration  28: 1659895.729 ops/s
# Warmup Iteration  29: 1634097.485 ops/s
# Warmup Iteration  30: 1639359.393 ops/s
Iteration   1: 1633424.775 ops/s
Iteration   2: 1632129.067 ops/s
Iteration   3: 1628671.314 ops/s
Iteration   4: 1627099.380 ops/s
Iteration   5: 1641877.230 ops/s
Iteration   6: 1626239.578 ops/s
Iteration   7: 1630703.303 ops/s
Iteration   8: 1649323.150 ops/s
Iteration   9: 1650889.042 ops/s
Iteration  10: 1613843.476 ops/s
Iteration  11: 1644287.759 ops/s
Iteration  12: 1637933.523 ops/s
Iteration  13: 1629267.059 ops/s
Iteration  14: 1628564.181 ops/s
Iteration  15: 1616546.127 ops/s
Iteration  16: 1613619.574 ops/s
Iteration  17: 1683524.089 ops/s
Iteration  18: 1689023.762 ops/s
Iteration  19: 1687653.199 ops/s
Iteration  20: 1695794.079 ops/s
Iteration  21: 1686479.946 ops/s
Iteration  22: 1685236.843 ops/s
Iteration  23: 1684308.167 ops/s
Iteration  24: 1689228.060 ops/s
Iteration  25: 1685540.124 ops/s
Iteration  26: 1669606.125 ops/s
Iteration  27: 1690785.359 ops/s
Iteration  28: 1662437.739 ops/s
Iteration  29: 1679188.153 ops/s
Iteration  30: 1671440.726 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_toBag":
  1655488.830 ±(99.9%) 18699.980 ops/s [Average]
  (min, avg, max) = (1613619.574, 1655488.830, 1695794.079), stdev = 27989.252
  CI (99.9%): [1636788.850, 1674188.810] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_toBag  thrpt   30  1655488.830 ± 18699.980  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 828033.142 ops/s
# Warmup Iteration   2: 1944914.966 ops/s
# Warmup Iteration   3: 1926986.252 ops/s
# Warmup Iteration   4: 1901329.676 ops/s
# Warmup Iteration   5: 2067616.604 ops/s
# Warmup Iteration   6: 2110980.023 ops/s
# Warmup Iteration   7: 2101737.866 ops/s
# Warmup Iteration   8: 2096065.697 ops/s
# Warmup Iteration   9: 2098308.406 ops/s
# Warmup Iteration  10: 2104413.638 ops/s
# Warmup Iteration  11: 2110081.744 ops/s
# Warmup Iteration  12: 2104789.242 ops/s
# Warmup Iteration  13: 2109345.148 ops/s
# Warmup Iteration  14: 2099966.477 ops/s
# Warmup Iteration  15: 2096394.119 ops/s
# Warmup Iteration  16: 2111085.331 ops/s
# Warmup Iteration  17: 2107212.257 ops/s
# Warmup Iteration  18: 2099853.301 ops/s
# Warmup Iteration  19: 2093891.031 ops/s
# Warmup Iteration  20: 2100557.800 ops/s
# Warmup Iteration  21: 2115416.269 ops/s
# Warmup Iteration  22: 2073329.260 ops/s
# Warmup Iteration  23: 2105542.462 ops/s
# Warmup Iteration  24: 2096958.214 ops/s
# Warmup Iteration  25: 2098683.128 ops/s
# Warmup Iteration  26: 2110856.796 ops/s
# Warmup Iteration  27: 2112288.032 ops/s
# Warmup Iteration  28: 2076492.242 ops/s
# Warmup Iteration  29: 2112808.873 ops/s
# Warmup Iteration  30: 2104891.829 ops/s
Iteration   1: 2113199.558 ops/s
Iteration   2: 2109219.573 ops/s
Iteration   3: 2110306.219 ops/s
Iteration   4: 2113153.131 ops/s
Iteration   5: 2099588.004 ops/s
Iteration   6: 2085507.082 ops/s
Iteration   7: 2069584.241 ops/s
Iteration   8: 2087028.880 ops/s
Iteration   9: 2087960.597 ops/s
Iteration  10: 2092734.295 ops/s
Iteration  11: 2100141.164 ops/s
Iteration  12: 2084809.717 ops/s
Iteration  13: 2089953.498 ops/s
Iteration  14: 2080406.610 ops/s
Iteration  15: 2080828.841 ops/s
Iteration  16: 2061553.145 ops/s
Iteration  17: 2057774.185 ops/s
Iteration  18: 2038530.915 ops/s
Iteration  19: 2037844.986 ops/s
Iteration  20: 2019510.156 ops/s
Iteration  21: 2063630.814 ops/s
Iteration  22: 2048165.113 ops/s
Iteration  23: 2077055.380 ops/s
Iteration  24: 2064701.399 ops/s
Iteration  25: 2053437.531 ops/s
Iteration  26: 2038604.417 ops/s
Iteration  27: 2017903.576 ops/s
Iteration  28: 2050107.420 ops/s
Iteration  29: 2055023.485 ops/s
Iteration  30: 2054736.005 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_toList":
  2071433.331 ±(99.9%) 17997.217 ops/s [Average]
  (min, avg, max) = (2017903.576, 2071433.331, 2113199.558), stdev = 26937.389
  CI (99.9%): [2053436.114, 2089430.548] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_toList  thrpt   30  2071433.331 ± 17997.217  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 969560.922 ops/s
# Warmup Iteration   2: 2364342.601 ops/s
# Warmup Iteration   3: 2651484.329 ops/s
# Warmup Iteration   4: 2203800.382 ops/s
# Warmup Iteration   5: 2691522.277 ops/s
# Warmup Iteration   6: 2679543.630 ops/s
# Warmup Iteration   7: 2686916.584 ops/s
# Warmup Iteration   8: 2691223.310 ops/s
# Warmup Iteration   9: 2666091.669 ops/s
# Warmup Iteration  10: 2688745.132 ops/s
# Warmup Iteration  11: 2691234.043 ops/s
# Warmup Iteration  12: 2695346.681 ops/s
# Warmup Iteration  13: 2696866.623 ops/s
# Warmup Iteration  14: 2697388.231 ops/s
# Warmup Iteration  15: 2675526.856 ops/s
# Warmup Iteration  16: 2694519.274 ops/s
# Warmup Iteration  17: 2684867.427 ops/s
# Warmup Iteration  18: 2699046.709 ops/s
# Warmup Iteration  19: 2689591.851 ops/s
# Warmup Iteration  20: 2687642.367 ops/s
# Warmup Iteration  21: 2680612.310 ops/s
# Warmup Iteration  22: 2649729.766 ops/s
# Warmup Iteration  23: 2677729.417 ops/s
# Warmup Iteration  24: 2694869.076 ops/s
# Warmup Iteration  25: 2698986.700 ops/s
# Warmup Iteration  26: 2698217.063 ops/s
# Warmup Iteration  27: 2679341.068 ops/s
# Warmup Iteration  28: 2705432.652 ops/s
# Warmup Iteration  29: 2687602.251 ops/s
# Warmup Iteration  30: 2691782.787 ops/s
Iteration   1: 2696660.219 ops/s
Iteration   2: 2701582.004 ops/s
Iteration   3: 2706976.145 ops/s
Iteration   4: 2690457.009 ops/s
Iteration   5: 2688427.476 ops/s
Iteration   6: 2687115.453 ops/s
Iteration   7: 2664231.338 ops/s
Iteration   8: 2689786.916 ops/s
Iteration   9: 2654533.718 ops/s
Iteration  10: 2691787.716 ops/s
Iteration  11: 2686538.617 ops/s
Iteration  12: 2711093.428 ops/s
Iteration  13: 2687040.207 ops/s
Iteration  14: 2695182.852 ops/s
Iteration  15: 2633619.957 ops/s
Iteration  16: 2688912.575 ops/s
Iteration  17: 2686741.807 ops/s
Iteration  18: 2678736.358 ops/s
Iteration  19: 2685495.426 ops/s
Iteration  20: 2695828.225 ops/s
Iteration  21: 2680644.327 ops/s
Iteration  22: 2649884.934 ops/s
Iteration  23: 2699881.995 ops/s
Iteration  24: 2681378.655 ops/s
Iteration  25: 2693766.806 ops/s
Iteration  26: 2680268.372 ops/s
Iteration  27: 2696773.670 ops/s
Iteration  28: 2674931.951 ops/s
Iteration  29: 2684671.912 ops/s
Iteration  30: 2689029.335 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_toSet":
  2685065.980 ±(99.9%) 10968.770 ops/s [Average]
  (min, avg, max) = (2633619.957, 2685065.980, 2711093.428), stdev = 16417.540
  CI (99.9%): [2674097.210, 2696034.750] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_toSet  thrpt   30  2685065.980 ± 10968.770  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 654983.495 ops/s
# Warmup Iteration   2: 725213.195 ops/s
# Warmup Iteration   3: 953095.625 ops/s
# Warmup Iteration   4: 946887.128 ops/s
# Warmup Iteration   5: 946217.492 ops/s
# Warmup Iteration   6: 947653.807 ops/s
# Warmup Iteration   7: 948879.768 ops/s
# Warmup Iteration   8: 949013.205 ops/s
# Warmup Iteration   9: 943392.431 ops/s
# Warmup Iteration  10: 785402.460 ops/s
# Warmup Iteration  11: 950795.439 ops/s
# Warmup Iteration  12: 948095.315 ops/s
# Warmup Iteration  13: 948220.125 ops/s
# Warmup Iteration  14: 945546.633 ops/s
# Warmup Iteration  15: 952990.006 ops/s
# Warmup Iteration  16: 950628.552 ops/s
# Warmup Iteration  17: 1009088.112 ops/s
# Warmup Iteration  18: 1006329.109 ops/s
# Warmup Iteration  19: 1010620.147 ops/s
# Warmup Iteration  20: 1007809.465 ops/s
# Warmup Iteration  21: 1006650.734 ops/s
# Warmup Iteration  22: 1006442.306 ops/s
# Warmup Iteration  23: 1007857.506 ops/s
# Warmup Iteration  24: 1008763.325 ops/s
# Warmup Iteration  25: 997932.590 ops/s
# Warmup Iteration  26: 1007320.184 ops/s
# Warmup Iteration  27: 1008493.280 ops/s
# Warmup Iteration  28: 1006290.761 ops/s
# Warmup Iteration  29: 997109.665 ops/s
# Warmup Iteration  30: 1005797.968 ops/s
Iteration   1: 1006113.968 ops/s
Iteration   2: 1002854.855 ops/s
Iteration   3: 1000837.956 ops/s
Iteration   4: 1009963.862 ops/s
Iteration   5: 1000033.923 ops/s
Iteration   6: 1012486.147 ops/s
Iteration   7: 1007267.543 ops/s
Iteration   8: 1004638.104 ops/s
Iteration   9: 1002124.781 ops/s
Iteration  10: 1001656.046 ops/s
Iteration  11: 1003489.309 ops/s
Iteration  12: 1003547.774 ops/s
Iteration  13: 1007058.124 ops/s
Iteration  14: 997435.955 ops/s
Iteration  15: 998986.927 ops/s
Iteration  16: 999217.610 ops/s
Iteration  17: 1006950.567 ops/s
Iteration  18: 1005950.451 ops/s
Iteration  19: 998078.473 ops/s
Iteration  20: 1000853.535 ops/s
Iteration  21: 1004702.807 ops/s
Iteration  22: 995201.044 ops/s
Iteration  23: 999013.667 ops/s
Iteration  24: 1006859.441 ops/s
Iteration  25: 990211.702 ops/s
Iteration  26: 984350.498 ops/s
Iteration  27: 993814.404 ops/s
Iteration  28: 998973.075 ops/s
Iteration  29: 1003190.786 ops/s
Iteration  30: 1010206.862 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_with":
  1001869.006 ±(99.9%) 3994.646 ops/s [Average]
  (min, avg, max) = (984350.498, 1001869.006, 1012486.147), stdev = 5978.999
  CI (99.9%): [997874.360, 1005863.653] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_with  thrpt   30  1001869.006 ± 3994.646  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 636582.431 ops/s
# Warmup Iteration   2: 715175.162 ops/s
# Warmup Iteration   3: 934047.638 ops/s
# Warmup Iteration   4: 936424.026 ops/s
# Warmup Iteration   5: 940154.257 ops/s
# Warmup Iteration   6: 937829.628 ops/s
# Warmup Iteration   7: 935621.063 ops/s
# Warmup Iteration   8: 946342.200 ops/s
# Warmup Iteration   9: 937263.218 ops/s
# Warmup Iteration  10: 797926.411 ops/s
# Warmup Iteration  11: 914664.618 ops/s
# Warmup Iteration  12: 934353.933 ops/s
# Warmup Iteration  13: 946814.454 ops/s
# Warmup Iteration  14: 940699.326 ops/s
# Warmup Iteration  15: 940190.862 ops/s
# Warmup Iteration  16: 933968.007 ops/s
# Warmup Iteration  17: 995041.057 ops/s
# Warmup Iteration  18: 998294.675 ops/s
# Warmup Iteration  19: 995477.114 ops/s
# Warmup Iteration  20: 999179.890 ops/s
# Warmup Iteration  21: 996383.301 ops/s
# Warmup Iteration  22: 985767.898 ops/s
# Warmup Iteration  23: 984240.809 ops/s
# Warmup Iteration  24: 991840.494 ops/s
# Warmup Iteration  25: 989517.117 ops/s
# Warmup Iteration  26: 983131.415 ops/s
# Warmup Iteration  27: 985537.904 ops/s
# Warmup Iteration  28: 993577.772 ops/s
# Warmup Iteration  29: 996822.658 ops/s
# Warmup Iteration  30: 992876.972 ops/s
Iteration   1: 993046.051 ops/s
Iteration   2: 997633.300 ops/s
Iteration   3: 1004122.372 ops/s
Iteration   4: 1001693.348 ops/s
Iteration   5: 959847.405 ops/s
Iteration   6: 1002614.237 ops/s
Iteration   7: 998146.626 ops/s
Iteration   8: 988245.850 ops/s
Iteration   9: 1000518.606 ops/s
Iteration  10: 993476.984 ops/s
Iteration  11: 999409.565 ops/s
Iteration  12: 996893.260 ops/s
Iteration  13: 988015.212 ops/s
Iteration  14: 997201.627 ops/s
Iteration  15: 993403.783 ops/s
Iteration  16: 994819.746 ops/s
Iteration  17: 1000295.371 ops/s
Iteration  18: 1004229.876 ops/s
Iteration  19: 970812.609 ops/s
Iteration  20: 998345.453 ops/s
Iteration  21: 1006930.961 ops/s
Iteration  22: 998826.882 ops/s
Iteration  23: 1002535.394 ops/s
Iteration  24: 992521.599 ops/s
Iteration  25: 1005932.736 ops/s
Iteration  26: 1000698.420 ops/s
Iteration  27: 999614.281 ops/s
Iteration  28: 1002128.763 ops/s
Iteration  29: 998620.364 ops/s
Iteration  30: 995101.544 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_withAll":
  996189.407 ±(99.9%) 6475.391 ops/s [Average]
  (min, avg, max) = (959847.405, 996189.407, 1006930.961), stdev = 9692.061
  CI (99.9%): [989714.017, 1002664.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_withAll  thrpt   30  996189.407 ± 6475.391  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1145395.560 ops/s
# Warmup Iteration   2: 2612751.508 ops/s
# Warmup Iteration   3: 3179441.148 ops/s
# Warmup Iteration   4: 2606374.879 ops/s
# Warmup Iteration   5: 3174344.972 ops/s
# Warmup Iteration   6: 3171771.153 ops/s
# Warmup Iteration   7: 3181781.331 ops/s
# Warmup Iteration   8: 3167498.876 ops/s
# Warmup Iteration   9: 3171231.906 ops/s
# Warmup Iteration  10: 3167476.755 ops/s
# Warmup Iteration  11: 3187107.609 ops/s
# Warmup Iteration  12: 3172488.738 ops/s
# Warmup Iteration  13: 3180130.271 ops/s
# Warmup Iteration  14: 3188249.613 ops/s
# Warmup Iteration  15: 3166710.223 ops/s
# Warmup Iteration  16: 3161913.033 ops/s
# Warmup Iteration  17: 3199278.021 ops/s
# Warmup Iteration  18: 3181616.704 ops/s
# Warmup Iteration  19: 3178757.492 ops/s
# Warmup Iteration  20: 3191293.609 ops/s
# Warmup Iteration  21: 3157469.081 ops/s
# Warmup Iteration  22: 3179091.269 ops/s
# Warmup Iteration  23: 3170782.233 ops/s
# Warmup Iteration  24: 3154773.216 ops/s
# Warmup Iteration  25: 3161973.257 ops/s
# Warmup Iteration  26: 3157633.588 ops/s
# Warmup Iteration  27: 3178723.084 ops/s
# Warmup Iteration  28: 3170937.285 ops/s
# Warmup Iteration  29: 3203113.437 ops/s
# Warmup Iteration  30: 3158171.890 ops/s
Iteration   1: 3181102.503 ops/s
Iteration   2: 3193130.731 ops/s
Iteration   3: 3185366.824 ops/s
Iteration   4: 3168499.353 ops/s
Iteration   5: 3183768.592 ops/s
Iteration   6: 3205930.488 ops/s
Iteration   7: 3186225.349 ops/s
Iteration   8: 3189198.879 ops/s
Iteration   9: 3132975.083 ops/s
Iteration  10: 3182770.106 ops/s
Iteration  11: 3170687.767 ops/s
Iteration  12: 3178757.898 ops/s
Iteration  13: 3173317.153 ops/s
Iteration  14: 3168646.966 ops/s
Iteration  15: 3195149.770 ops/s
Iteration  16: 3167908.203 ops/s
Iteration  17: 3173134.380 ops/s
Iteration  18: 3184760.881 ops/s
Iteration  19: 3184147.328 ops/s
Iteration  20: 3193071.743 ops/s
Iteration  21: 3175846.788 ops/s
Iteration  22: 3165928.069 ops/s
Iteration  23: 3175949.907 ops/s
Iteration  24: 3156020.282 ops/s
Iteration  25: 3171024.568 ops/s
Iteration  26: 3125166.078 ops/s
Iteration  27: 3179911.570 ops/s
Iteration  28: 3150856.653 ops/s
Iteration  29: 3171582.341 ops/s
Iteration  30: 3158035.642 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_without":
  3174295.730 ±(99.9%) 11491.691 ops/s [Average]
  (min, avg, max) = (3125166.078, 3174295.730, 3205930.488), stdev = 17200.223
  CI (99.9%): [3162804.039, 3185787.421] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_without  thrpt   30  3174295.730 ± 11491.691  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1118842.725 ops/s
# Warmup Iteration   2: 2676650.966 ops/s
# Warmup Iteration   3: 3063781.067 ops/s
# Warmup Iteration   4: 2489702.041 ops/s
# Warmup Iteration   5: 3040325.481 ops/s
# Warmup Iteration   6: 3061224.270 ops/s
# Warmup Iteration   7: 3051556.192 ops/s
# Warmup Iteration   8: 2996352.138 ops/s
# Warmup Iteration   9: 3044867.229 ops/s
# Warmup Iteration  10: 3052417.951 ops/s
# Warmup Iteration  11: 3017649.555 ops/s
# Warmup Iteration  12: 3033669.534 ops/s
# Warmup Iteration  13: 3020765.644 ops/s
# Warmup Iteration  14: 3054263.343 ops/s
# Warmup Iteration  15: 3046549.055 ops/s
# Warmup Iteration  16: 3059960.813 ops/s
# Warmup Iteration  17: 3052902.916 ops/s
# Warmup Iteration  18: 3052383.674 ops/s
# Warmup Iteration  19: 3036131.960 ops/s
# Warmup Iteration  20: 3023628.137 ops/s
# Warmup Iteration  21: 3050541.432 ops/s
# Warmup Iteration  22: 3050979.354 ops/s
# Warmup Iteration  23: 3020997.466 ops/s
# Warmup Iteration  24: 3049503.081 ops/s
# Warmup Iteration  25: 3035801.616 ops/s
# Warmup Iteration  26: 3029906.842 ops/s
# Warmup Iteration  27: 3070546.165 ops/s
# Warmup Iteration  28: 3068698.623 ops/s
# Warmup Iteration  29: 3038802.162 ops/s
# Warmup Iteration  30: 3022571.564 ops/s
Iteration   1: 3054200.952 ops/s
Iteration   2: 3059097.737 ops/s
Iteration   3: 3068784.535 ops/s
Iteration   4: 3041634.803 ops/s
Iteration   5: 3051265.218 ops/s
Iteration   6: 3039494.752 ops/s
Iteration   7: 3062631.083 ops/s
Iteration   8: 3048140.578 ops/s
Iteration   9: 3044714.294 ops/s
Iteration  10: 3055761.499 ops/s
Iteration  11: 3064424.324 ops/s
Iteration  12: 3042716.102 ops/s
Iteration  13: 3052687.575 ops/s
Iteration  14: 3000996.560 ops/s
Iteration  15: 3075214.910 ops/s
Iteration  16: 3052410.884 ops/s
Iteration  17: 3058970.882 ops/s
Iteration  18: 3059967.541 ops/s
Iteration  19: 3040328.554 ops/s
Iteration  20: 3041477.317 ops/s
Iteration  21: 3051380.379 ops/s
Iteration  22: 3047323.527 ops/s
Iteration  23: 3039323.366 ops/s
Iteration  24: 3062596.335 ops/s
Iteration  25: 3037985.508 ops/s
Iteration  26: 3046997.963 ops/s
Iteration  27: 3059268.119 ops/s
Iteration  28: 2986613.778 ops/s
Iteration  29: 3010282.818 ops/s
Iteration  30: 3059181.228 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_withoutAll":
  3047195.771 ±(99.9%) 12701.580 ops/s [Average]
  (min, avg, max) = (2986613.778, 3047195.771, 3075214.910), stdev = 19011.129
  CI (99.9%): [3034494.190, 3059897.351] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
SynchronizedDoubleBooleanMapValuesTest._Benchmark.benchmark_withoutAll  thrpt   30  3047195.771 ± 12701.580  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 661953.678 ops/s
# Warmup Iteration   2: 716375.069 ops/s
# Warmup Iteration   3: 959435.580 ops/s
# Warmup Iteration   4: 957544.267 ops/s
# Warmup Iteration   5: 947590.535 ops/s
# Warmup Iteration   6: 959175.238 ops/s
# Warmup Iteration   7: 960243.979 ops/s
# Warmup Iteration   8: 959109.897 ops/s
# Warmup Iteration   9: 956131.502 ops/s
# Warmup Iteration  10: 852725.828 ops/s
# Warmup Iteration  11: 897784.254 ops/s
# Warmup Iteration  12: 959407.916 ops/s
# Warmup Iteration  13: 956473.236 ops/s
# Warmup Iteration  14: 964441.868 ops/s
# Warmup Iteration  15: 960303.673 ops/s
# Warmup Iteration  16: 953949.763 ops/s
# Warmup Iteration  17: 1023577.689 ops/s
# Warmup Iteration  18: 1020361.654 ops/s
# Warmup Iteration  19: 1013562.302 ops/s
# Warmup Iteration  20: 1023274.220 ops/s
# Warmup Iteration  21: 1019685.705 ops/s
# Warmup Iteration  22: 1017737.008 ops/s
# Warmup Iteration  23: 1008298.433 ops/s
# Warmup Iteration  24: 1018139.074 ops/s
# Warmup Iteration  25: 1020313.166 ops/s
# Warmup Iteration  26: 1011778.098 ops/s
# Warmup Iteration  27: 1024989.073 ops/s
# Warmup Iteration  28: 1022860.250 ops/s
# Warmup Iteration  29: 1019340.209 ops/s
# Warmup Iteration  30: 1012109.851 ops/s
Iteration   1: 1017558.593 ops/s
Iteration   2: 1003596.452 ops/s
Iteration   3: 1017204.331 ops/s
Iteration   4: 1013817.476 ops/s
Iteration   5: 1020803.419 ops/s
Iteration   6: 1016652.747 ops/s
Iteration   7: 1005301.751 ops/s
Iteration   8: 1025667.189 ops/s
Iteration   9: 1022321.654 ops/s
Iteration  10: 1017986.634 ops/s
Iteration  11: 1017432.862 ops/s
Iteration  12: 1018174.127 ops/s
Iteration  13: 1022112.613 ops/s
Iteration  14: 1018493.932 ops/s
Iteration  15: 1008198.998 ops/s
Iteration  16: 1006800.303 ops/s
Iteration  17: 1019947.479 ops/s
Iteration  18: 1016882.997 ops/s
Iteration  19: 1015635.480 ops/s
Iteration  20: 1013559.351 ops/s
Iteration  21: 1012205.888 ops/s
Iteration  22: 1016782.292 ops/s
Iteration  23: 1009481.536 ops/s
Iteration  24: 1011236.435 ops/s
Iteration  25: 1016477.166 ops/s
Iteration  26: 1017675.589 ops/s
Iteration  27: 1011685.574 ops/s
Iteration  28: 1021874.743 ops/s
Iteration  29: 1018555.884 ops/s
Iteration  30: 1016510.025 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_add":
  1015687.784 ±(99.9%) 3501.048 ops/s [Average]
  (min, avg, max) = (1003596.452, 1015687.784, 1025667.189), stdev = 5240.204
  CI (99.9%): [1012186.736, 1019188.832] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_add  thrpt   30  1015687.784 ± 3501.048  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 663963.535 ops/s
# Warmup Iteration   2: 728460.840 ops/s
# Warmup Iteration   3: 966624.202 ops/s
# Warmup Iteration   4: 960644.723 ops/s
# Warmup Iteration   5: 967438.059 ops/s
# Warmup Iteration   6: 955431.077 ops/s
# Warmup Iteration   7: 967828.315 ops/s
# Warmup Iteration   8: 972433.757 ops/s
# Warmup Iteration   9: 962172.023 ops/s
# Warmup Iteration  10: 835387.595 ops/s
# Warmup Iteration  11: 923423.399 ops/s
# Warmup Iteration  12: 968491.491 ops/s
# Warmup Iteration  13: 967441.528 ops/s
# Warmup Iteration  14: 964336.799 ops/s
# Warmup Iteration  15: 973878.020 ops/s
# Warmup Iteration  16: 960474.813 ops/s
# Warmup Iteration  17: 1022883.571 ops/s
# Warmup Iteration  18: 1015175.459 ops/s
# Warmup Iteration  19: 1026766.658 ops/s
# Warmup Iteration  20: 1027863.100 ops/s
# Warmup Iteration  21: 1025820.951 ops/s
# Warmup Iteration  22: 1018530.399 ops/s
# Warmup Iteration  23: 1012661.318 ops/s
# Warmup Iteration  24: 1018151.655 ops/s
# Warmup Iteration  25: 1017425.310 ops/s
# Warmup Iteration  26: 1023798.953 ops/s
# Warmup Iteration  27: 1029236.034 ops/s
# Warmup Iteration  28: 1027110.869 ops/s
# Warmup Iteration  29: 1020239.000 ops/s
# Warmup Iteration  30: 1020217.414 ops/s
Iteration   1: 1012373.686 ops/s
Iteration   2: 1027189.939 ops/s
Iteration   3: 1029415.937 ops/s
Iteration   4: 1015049.826 ops/s
Iteration   5: 1030787.332 ops/s
Iteration   6: 1025233.469 ops/s
Iteration   7: 1006992.648 ops/s
Iteration   8: 1026565.843 ops/s
Iteration   9: 1029549.923 ops/s
Iteration  10: 1022679.225 ops/s
Iteration  11: 1029493.287 ops/s
Iteration  12: 1030740.533 ops/s
Iteration  13: 1024376.592 ops/s
Iteration  14: 1031993.106 ops/s
Iteration  15: 1021203.264 ops/s
Iteration  16: 1032173.495 ops/s
Iteration  17: 1024300.474 ops/s
Iteration  18: 1029368.105 ops/s
Iteration  19: 1005401.506 ops/s
Iteration  20: 1024086.674 ops/s
Iteration  21: 1018638.598 ops/s
Iteration  22: 1028752.657 ops/s
Iteration  23: 1022703.366 ops/s
Iteration  24: 1034551.120 ops/s
Iteration  25: 1025196.842 ops/s
Iteration  26: 1023553.377 ops/s
Iteration  27: 1032493.999 ops/s
Iteration  28: 1032025.089 ops/s
Iteration  29: 1030548.634 ops/s
Iteration  30: 1013473.701 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_addAllArray":
  1024697.075 ±(99.9%) 5057.055 ops/s [Average]
  (min, avg, max) = (1005401.506, 1024697.075, 1034551.120), stdev = 7569.163
  CI (99.9%): [1019640.020, 1029754.130] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_addAllArray  thrpt   30  1024697.075 ± 5057.055  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 671108.028 ops/s
# Warmup Iteration   2: 745482.366 ops/s
# Warmup Iteration   3: 983671.038 ops/s
# Warmup Iteration   4: 971091.486 ops/s
# Warmup Iteration   5: 976322.401 ops/s
# Warmup Iteration   6: 969282.851 ops/s
# Warmup Iteration   7: 977892.037 ops/s
# Warmup Iteration   8: 979261.184 ops/s
# Warmup Iteration   9: 984922.246 ops/s
# Warmup Iteration  10: 814050.207 ops/s
# Warmup Iteration  11: 977030.298 ops/s
# Warmup Iteration  12: 979892.266 ops/s
# Warmup Iteration  13: 985788.162 ops/s
# Warmup Iteration  14: 980995.478 ops/s
# Warmup Iteration  15: 977393.277 ops/s
# Warmup Iteration  16: 978472.935 ops/s
# Warmup Iteration  17: 1032469.109 ops/s
# Warmup Iteration  18: 1039484.881 ops/s
# Warmup Iteration  19: 1039153.946 ops/s
# Warmup Iteration  20: 1038462.357 ops/s
# Warmup Iteration  21: 1035693.532 ops/s
# Warmup Iteration  22: 1042571.077 ops/s
# Warmup Iteration  23: 1043050.879 ops/s
# Warmup Iteration  24: 1036812.323 ops/s
# Warmup Iteration  25: 1040289.456 ops/s
# Warmup Iteration  26: 1024959.805 ops/s
# Warmup Iteration  27: 1026616.876 ops/s
# Warmup Iteration  28: 1038047.559 ops/s
# Warmup Iteration  29: 1034014.628 ops/s
# Warmup Iteration  30: 1024579.716 ops/s
Iteration   1: 1039459.592 ops/s
Iteration   2: 1040311.747 ops/s
Iteration   3: 1014395.077 ops/s
Iteration   4: 1041844.431 ops/s
Iteration   5: 1043836.593 ops/s
Iteration   6: 1025181.703 ops/s
Iteration   7: 1043446.260 ops/s
Iteration   8: 1045523.575 ops/s
Iteration   9: 1042448.749 ops/s
Iteration  10: 1039173.914 ops/s
Iteration  11: 1045542.894 ops/s
Iteration  12: 1036996.085 ops/s
Iteration  13: 1040305.600 ops/s
Iteration  14: 1032373.050 ops/s
Iteration  15: 1041798.345 ops/s
Iteration  16: 1040582.366 ops/s
Iteration  17: 1044061.480 ops/s
Iteration  18: 1038997.740 ops/s
Iteration  19: 1001850.213 ops/s
Iteration  20: 1031591.499 ops/s
Iteration  21: 1042789.320 ops/s
Iteration  22: 1036986.447 ops/s
Iteration  23: 1044389.828 ops/s
Iteration  24: 1038926.995 ops/s
Iteration  25: 1043307.645 ops/s
Iteration  26: 1034204.442 ops/s
Iteration  27: 1039974.387 ops/s
Iteration  28: 1038884.732 ops/s
Iteration  29: 1039208.243 ops/s
Iteration  30: 1037214.307 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_addAllIterable":
  1037520.242 ±(99.9%) 6196.981 ops/s [Average]
  (min, avg, max) = (1001850.213, 1037520.242, 1045542.894), stdev = 9275.350
  CI (99.9%): [1031323.261, 1043717.223] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_addAllIterable  thrpt   30  1037520.242 ± 6196.981  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 666031.532 ops/s
# Warmup Iteration   2: 1459114.366 ops/s
# Warmup Iteration   3: 1864186.364 ops/s
# Warmup Iteration   4: 1574902.450 ops/s
# Warmup Iteration   5: 1856626.976 ops/s
# Warmup Iteration   6: 1882547.829 ops/s
# Warmup Iteration   7: 1883900.281 ops/s
# Warmup Iteration   8: 1851496.921 ops/s
# Warmup Iteration   9: 1868032.148 ops/s
# Warmup Iteration  10: 1877529.848 ops/s
# Warmup Iteration  11: 1880143.516 ops/s
# Warmup Iteration  12: 1876699.059 ops/s
# Warmup Iteration  13: 1864859.212 ops/s
# Warmup Iteration  14: 1870202.363 ops/s
# Warmup Iteration  15: 1859180.802 ops/s
# Warmup Iteration  16: 1872300.835 ops/s
# Warmup Iteration  17: 1878846.492 ops/s
# Warmup Iteration  18: 1862098.304 ops/s
# Warmup Iteration  19: 1861014.348 ops/s
# Warmup Iteration  20: 1812251.129 ops/s
# Warmup Iteration  21: 1879398.030 ops/s
# Warmup Iteration  22: 1867049.547 ops/s
# Warmup Iteration  23: 1855508.501 ops/s
# Warmup Iteration  24: 1871526.593 ops/s
# Warmup Iteration  25: 1871568.355 ops/s
# Warmup Iteration  26: 1872204.389 ops/s
# Warmup Iteration  27: 1876959.305 ops/s
# Warmup Iteration  28: 1873195.755 ops/s
# Warmup Iteration  29: 1869592.987 ops/s
# Warmup Iteration  30: 1837099.505 ops/s
Iteration   1: 1867252.960 ops/s
Iteration   2: 1849602.800 ops/s
Iteration   3: 1864858.371 ops/s
Iteration   4: 1874705.287 ops/s
Iteration   5: 1880891.705 ops/s
Iteration   6: 1858613.087 ops/s
Iteration   7: 1878251.177 ops/s
Iteration   8: 1871488.673 ops/s
Iteration   9: 1877437.915 ops/s
Iteration  10: 1821825.128 ops/s
Iteration  11: 1878619.521 ops/s
Iteration  12: 1879466.320 ops/s
Iteration  13: 1800174.912 ops/s
Iteration  14: 1874621.405 ops/s
Iteration  15: 1860080.345 ops/s
Iteration  16: 1864859.108 ops/s
Iteration  17: 1873247.568 ops/s
Iteration  18: 1882793.717 ops/s
Iteration  19: 1873296.525 ops/s
Iteration  20: 1831044.563 ops/s
Iteration  21: 1886346.412 ops/s
Iteration  22: 1846909.123 ops/s
Iteration  23: 1872235.834 ops/s
Iteration  24: 1884381.566 ops/s
Iteration  25: 1872467.440 ops/s
Iteration  26: 1851303.682 ops/s
Iteration  27: 1881141.275 ops/s
Iteration  28: 1873913.017 ops/s
Iteration  29: 1831605.343 ops/s
Iteration  30: 1869734.982 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_allSatisfy":
  1864438.992 ±(99.9%) 13652.235 ops/s [Average]
  (min, avg, max) = (1800174.912, 1864438.992, 1886346.412), stdev = 20434.024
  CI (99.9%): [1850786.757, 1878091.227] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_allSatisfy  thrpt   30  1864438.992 ± 13652.235  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 664624.584 ops/s
# Warmup Iteration   2: 1399831.553 ops/s
# Warmup Iteration   3: 1832254.743 ops/s
# Warmup Iteration   4: 1583047.762 ops/s
# Warmup Iteration   5: 1853838.572 ops/s
# Warmup Iteration   6: 1850134.593 ops/s
# Warmup Iteration   7: 1837833.985 ops/s
# Warmup Iteration   8: 1849894.646 ops/s
# Warmup Iteration   9: 1841049.853 ops/s
# Warmup Iteration  10: 1851095.364 ops/s
# Warmup Iteration  11: 1844960.931 ops/s
# Warmup Iteration  12: 1840059.579 ops/s
# Warmup Iteration  13: 1820546.553 ops/s
# Warmup Iteration  14: 1843163.993 ops/s
# Warmup Iteration  15: 1850432.238 ops/s
# Warmup Iteration  16: 1842726.497 ops/s
# Warmup Iteration  17: 1838505.684 ops/s
# Warmup Iteration  18: 1836484.026 ops/s
# Warmup Iteration  19: 1844179.454 ops/s
# Warmup Iteration  20: 1828802.370 ops/s
# Warmup Iteration  21: 1834859.292 ops/s
# Warmup Iteration  22: 1840878.217 ops/s
# Warmup Iteration  23: 1845699.484 ops/s
# Warmup Iteration  24: 1850190.258 ops/s
# Warmup Iteration  25: 1850841.498 ops/s
# Warmup Iteration  26: 1849583.085 ops/s
# Warmup Iteration  27: 1833916.745 ops/s
# Warmup Iteration  28: 1849814.854 ops/s
# Warmup Iteration  29: 1856184.611 ops/s
# Warmup Iteration  30: 1825049.577 ops/s
Iteration   1: 1857181.186 ops/s
Iteration   2: 1846186.213 ops/s
Iteration   3: 1854014.575 ops/s
Iteration   4: 1854191.213 ops/s
Iteration   5: 1841148.462 ops/s
Iteration   6: 1837054.048 ops/s
Iteration   7: 1848771.470 ops/s
Iteration   8: 1833519.671 ops/s
Iteration   9: 1850716.913 ops/s
Iteration  10: 1848026.371 ops/s
Iteration  11: 1848667.621 ops/s
Iteration  12: 1813726.404 ops/s
Iteration  13: 1855240.809 ops/s
Iteration  14: 1842624.222 ops/s
Iteration  15: 1856906.809 ops/s
Iteration  16: 1856063.154 ops/s
Iteration  17: 1824892.773 ops/s
Iteration  18: 1846393.503 ops/s
Iteration  19: 1856677.148 ops/s
Iteration  20: 1841274.485 ops/s
Iteration  21: 1842237.101 ops/s
Iteration  22: 1849883.505 ops/s
Iteration  23: 1822439.148 ops/s
Iteration  24: 1856975.379 ops/s
Iteration  25: 1851886.020 ops/s
Iteration  26: 1842221.273 ops/s
Iteration  27: 1832923.718 ops/s
Iteration  28: 1852574.612 ops/s
Iteration  29: 1838232.287 ops/s
Iteration  30: 1842594.715 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_anySatisfy":
  1844841.494 ±(99.9%) 7336.753 ops/s [Average]
  (min, avg, max) = (1813726.404, 1844841.494, 1857181.186), stdev = 10981.307
  CI (99.9%): [1837504.741, 1852178.247] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_anySatisfy  thrpt   30  1844841.494 ± 7336.753  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 673135.029 ops/s
# Warmup Iteration   2: 1492153.026 ops/s
# Warmup Iteration   3: 1718932.130 ops/s
# Warmup Iteration   4: 1438466.243 ops/s
# Warmup Iteration   5: 1720651.846 ops/s
# Warmup Iteration   6: 1706603.129 ops/s
# Warmup Iteration   7: 1721497.702 ops/s
# Warmup Iteration   8: 1715903.240 ops/s
# Warmup Iteration   9: 1720955.015 ops/s
# Warmup Iteration  10: 1701321.782 ops/s
# Warmup Iteration  11: 1719494.013 ops/s
# Warmup Iteration  12: 1717204.753 ops/s
# Warmup Iteration  13: 1717877.421 ops/s
# Warmup Iteration  14: 1721888.867 ops/s
# Warmup Iteration  15: 1714901.309 ops/s
# Warmup Iteration  16: 1718906.530 ops/s
# Warmup Iteration  17: 1717319.934 ops/s
# Warmup Iteration  18: 1717511.409 ops/s
# Warmup Iteration  19: 1712964.855 ops/s
# Warmup Iteration  20: 1721210.230 ops/s
# Warmup Iteration  21: 1721833.000 ops/s
# Warmup Iteration  22: 1688061.914 ops/s
# Warmup Iteration  23: 1708009.706 ops/s
# Warmup Iteration  24: 1714581.006 ops/s
# Warmup Iteration  25: 1705995.395 ops/s
# Warmup Iteration  26: 1714852.760 ops/s
# Warmup Iteration  27: 1718571.592 ops/s
# Warmup Iteration  28: 1719427.133 ops/s
# Warmup Iteration  29: 1703827.686 ops/s
# Warmup Iteration  30: 1693608.403 ops/s
Iteration   1: 1694332.496 ops/s
Iteration   2: 1717360.756 ops/s
Iteration   3: 1727808.267 ops/s
Iteration   4: 1708094.005 ops/s
Iteration   5: 1714166.585 ops/s
Iteration   6: 1714799.611 ops/s
Iteration   7: 1708268.610 ops/s
Iteration   8: 1713975.015 ops/s
Iteration   9: 1720223.140 ops/s
Iteration  10: 1711898.183 ops/s
Iteration  11: 1711171.427 ops/s
Iteration  12: 1684791.792 ops/s
Iteration  13: 1695986.261 ops/s
Iteration  14: 1724210.277 ops/s
Iteration  15: 1715194.761 ops/s
Iteration  16: 1693522.971 ops/s
Iteration  17: 1692860.529 ops/s
Iteration  18: 1720633.463 ops/s
Iteration  19: 1693138.900 ops/s
Iteration  20: 1715467.566 ops/s
Iteration  21: 1716321.609 ops/s
Iteration  22: 1715521.463 ops/s
Iteration  23: 1705548.032 ops/s
Iteration  24: 1706682.768 ops/s
Iteration  25: 1716244.008 ops/s
Iteration  26: 1726294.462 ops/s
Iteration  27: 1702628.951 ops/s
Iteration  28: 1711192.242 ops/s
Iteration  29: 1638190.630 ops/s
Iteration  30: 1711540.856 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_appendString":
  1707602.321 ±(99.9%) 11296.356 ops/s [Average]
  (min, avg, max) = (1638190.630, 1707602.321, 1727808.267), stdev = 16907.855
  CI (99.9%): [1696305.965, 1718898.677] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_appendString  thrpt   30  1707602.321 ± 11296.356  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2999663.246 ops/s
# Warmup Iteration   2: 6649389.896 ops/s
# Warmup Iteration   3: 6741472.753 ops/s
# Warmup Iteration   4: 5685154.365 ops/s
# Warmup Iteration   5: 6722834.399 ops/s
# Warmup Iteration   6: 6746981.726 ops/s
# Warmup Iteration   7: 6750297.806 ops/s
# Warmup Iteration   8: 6697434.496 ops/s
# Warmup Iteration   9: 6755536.019 ops/s
# Warmup Iteration  10: 6753324.995 ops/s
# Warmup Iteration  11: 6767506.223 ops/s
# Warmup Iteration  12: 6727749.983 ops/s
# Warmup Iteration  13: 6765366.722 ops/s
# Warmup Iteration  14: 6800553.068 ops/s
# Warmup Iteration  15: 6775438.067 ops/s
# Warmup Iteration  16: 6713841.941 ops/s
# Warmup Iteration  17: 6745317.773 ops/s
# Warmup Iteration  18: 6740845.220 ops/s
# Warmup Iteration  19: 6779431.107 ops/s
# Warmup Iteration  20: 6738973.449 ops/s
# Warmup Iteration  21: 6778918.424 ops/s
# Warmup Iteration  22: 6768364.505 ops/s
# Warmup Iteration  23: 6786887.816 ops/s
# Warmup Iteration  24: 6775815.934 ops/s
# Warmup Iteration  25: 6759080.774 ops/s
# Warmup Iteration  26: 6753166.146 ops/s
# Warmup Iteration  27: 6782304.046 ops/s
# Warmup Iteration  28: 6742671.965 ops/s
# Warmup Iteration  29: 6743711.638 ops/s
# Warmup Iteration  30: 6708236.478 ops/s
Iteration   1: 6760426.274 ops/s
Iteration   2: 6775818.621 ops/s
Iteration   3: 6731460.560 ops/s
Iteration   4: 6797268.070 ops/s
Iteration   5: 6760543.042 ops/s
Iteration   6: 6772400.061 ops/s
Iteration   7: 6746746.172 ops/s
Iteration   8: 6718411.167 ops/s
Iteration   9: 6824858.748 ops/s
Iteration  10: 6682777.673 ops/s
Iteration  11: 6716679.645 ops/s
Iteration  12: 6653393.629 ops/s
Iteration  13: 6790841.525 ops/s
Iteration  14: 6744571.071 ops/s
Iteration  15: 6757632.409 ops/s
Iteration  16: 6751871.738 ops/s
Iteration  17: 6745972.085 ops/s
Iteration  18: 6793518.870 ops/s
Iteration  19: 6772867.893 ops/s
Iteration  20: 6817576.678 ops/s
Iteration  21: 6777382.739 ops/s
Iteration  22: 6789083.582 ops/s
Iteration  23: 6748602.262 ops/s
Iteration  24: 6754289.961 ops/s
Iteration  25: 6758409.455 ops/s
Iteration  26: 6771646.090 ops/s
Iteration  27: 6780278.103 ops/s
Iteration  28: 6776487.490 ops/s
Iteration  29: 6747810.957 ops/s
Iteration  30: 6753237.924 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_asLazy":
  6759095.483 ±(99.9%) 23633.751 ops/s [Average]
  (min, avg, max) = (6653393.629, 6759095.483, 6824858.748), stdev = 35373.888
  CI (99.9%): [6735461.732, 6782729.234] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_asLazy  thrpt   30  6759095.483 ± 23633.751  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3119710.705 ops/s
# Warmup Iteration   2: 6620669.476 ops/s
# Warmup Iteration   3: 6854190.486 ops/s
# Warmup Iteration   4: 8203380.467 ops/s
# Warmup Iteration   5: 8169034.474 ops/s
# Warmup Iteration   6: 8127414.699 ops/s
# Warmup Iteration   7: 8145153.558 ops/s
# Warmup Iteration   8: 8152990.777 ops/s
# Warmup Iteration   9: 8109756.135 ops/s
# Warmup Iteration  10: 8171894.259 ops/s
# Warmup Iteration  11: 8178951.287 ops/s
# Warmup Iteration  12: 8179618.289 ops/s
# Warmup Iteration  13: 8174177.434 ops/s
# Warmup Iteration  14: 8153420.414 ops/s
# Warmup Iteration  15: 8078306.682 ops/s
# Warmup Iteration  16: 8140773.390 ops/s
# Warmup Iteration  17: 8129470.523 ops/s
# Warmup Iteration  18: 8104904.733 ops/s
# Warmup Iteration  19: 8044073.760 ops/s
# Warmup Iteration  20: 8111957.308 ops/s
# Warmup Iteration  21: 8036935.421 ops/s
# Warmup Iteration  22: 8028697.856 ops/s
# Warmup Iteration  23: 8060550.648 ops/s
# Warmup Iteration  24: 7990442.438 ops/s
# Warmup Iteration  25: 8095794.758 ops/s
# Warmup Iteration  26: 8008878.136 ops/s
# Warmup Iteration  27: 8061186.125 ops/s
# Warmup Iteration  28: 8155442.834 ops/s
# Warmup Iteration  29: 8127106.861 ops/s
# Warmup Iteration  30: 8146637.707 ops/s
Iteration   1: 8135479.314 ops/s
Iteration   2: 8161895.068 ops/s
Iteration   3: 8105980.071 ops/s
Iteration   4: 8052096.191 ops/s
Iteration   5: 8153789.495 ops/s
Iteration   6: 8143948.944 ops/s
Iteration   7: 8130492.249 ops/s
Iteration   8: 8218050.528 ops/s
Iteration   9: 8186366.425 ops/s
Iteration  10: 8191841.386 ops/s
Iteration  11: 8217118.108 ops/s
Iteration  12: 8127075.295 ops/s
Iteration  13: 8125566.115 ops/s
Iteration  14: 8144871.505 ops/s
Iteration  15: 8019909.610 ops/s
Iteration  16: 8168625.990 ops/s
Iteration  17: 8158253.165 ops/s
Iteration  18: 8151731.588 ops/s
Iteration  19: 8161586.628 ops/s
Iteration  20: 8143060.626 ops/s
Iteration  21: 8190800.400 ops/s
Iteration  22: 8174324.029 ops/s
Iteration  23: 8098576.052 ops/s
Iteration  24: 8148157.863 ops/s
Iteration  25: 8142386.266 ops/s
Iteration  26: 8132905.620 ops/s
Iteration  27: 8148015.718 ops/s
Iteration  28: 8181105.507 ops/s
Iteration  29: 8167930.334 ops/s
Iteration  30: 8133419.686 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_asSynchronized":
  8147178.659 ±(99.9%) 27678.542 ops/s [Average]
  (min, avg, max) = (8019909.610, 8147178.659, 8218050.528), stdev = 41427.942
  CI (99.9%): [8119500.117, 8174857.201] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_asSynchronized  thrpt   30  8147178.659 ± 27678.542  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3085946.779 ops/s
# Warmup Iteration   2: 6622145.077 ops/s
# Warmup Iteration   3: 6906808.497 ops/s
# Warmup Iteration   4: 8200629.642 ops/s
# Warmup Iteration   5: 8250024.651 ops/s
# Warmup Iteration   6: 8133259.649 ops/s
# Warmup Iteration   7: 8231418.594 ops/s
# Warmup Iteration   8: 8146304.890 ops/s
# Warmup Iteration   9: 8172637.222 ops/s
# Warmup Iteration  10: 8220608.739 ops/s
# Warmup Iteration  11: 8207515.602 ops/s
# Warmup Iteration  12: 8224048.817 ops/s
# Warmup Iteration  13: 8206905.311 ops/s
# Warmup Iteration  14: 8222917.491 ops/s
# Warmup Iteration  15: 8189165.035 ops/s
# Warmup Iteration  16: 8206293.026 ops/s
# Warmup Iteration  17: 8139279.945 ops/s
# Warmup Iteration  18: 8246343.179 ops/s
# Warmup Iteration  19: 8181262.481 ops/s
# Warmup Iteration  20: 8260344.637 ops/s
# Warmup Iteration  21: 8216780.507 ops/s
# Warmup Iteration  22: 8090073.755 ops/s
# Warmup Iteration  23: 8156923.236 ops/s
# Warmup Iteration  24: 8145339.200 ops/s
# Warmup Iteration  25: 8149141.901 ops/s
# Warmup Iteration  26: 8188915.449 ops/s
# Warmup Iteration  27: 8205383.965 ops/s
# Warmup Iteration  28: 8173390.492 ops/s
# Warmup Iteration  29: 8050748.330 ops/s
# Warmup Iteration  30: 8218982.421 ops/s
Iteration   1: 8236501.868 ops/s
Iteration   2: 8196703.267 ops/s
Iteration   3: 8204348.844 ops/s
Iteration   4: 8230508.530 ops/s
Iteration   5: 8059182.640 ops/s
Iteration   6: 8182561.243 ops/s
Iteration   7: 8204986.401 ops/s
Iteration   8: 8192712.562 ops/s
Iteration   9: 8239880.590 ops/s
Iteration  10: 8228037.841 ops/s
Iteration  11: 8214351.376 ops/s
Iteration  12: 8067404.929 ops/s
Iteration  13: 8197411.945 ops/s
Iteration  14: 8219225.854 ops/s
Iteration  15: 8217079.556 ops/s
Iteration  16: 7901956.091 ops/s
Iteration  17: 8284439.423 ops/s
Iteration  18: 8233370.291 ops/s
Iteration  19: 8205190.145 ops/s
Iteration  20: 8190365.947 ops/s
Iteration  21: 8203774.690 ops/s
Iteration  22: 8241679.663 ops/s
Iteration  23: 8246128.773 ops/s
Iteration  24: 8102092.619 ops/s
Iteration  25: 7961410.070 ops/s
Iteration  26: 8223718.757 ops/s
Iteration  27: 8163719.608 ops/s
Iteration  28: 8254715.771 ops/s
Iteration  29: 8227662.824 ops/s
Iteration  30: 8229087.480 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable":
  8185340.320 ±(99.9%) 56983.358 ops/s [Average]
  (min, avg, max) = (7901956.091, 8185340.320, 8284439.423), stdev = 85290.014
  CI (99.9%): [8128356.962, 8242323.678] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  8185340.320 ± 56983.358  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4254458.813 ops/s
# Warmup Iteration   2: 9422942.212 ops/s
# Warmup Iteration   3: 8001844.550 ops/s
# Warmup Iteration   4: 9603083.734 ops/s
# Warmup Iteration   5: 9649699.011 ops/s
# Warmup Iteration   6: 9655260.597 ops/s
# Warmup Iteration   7: 9600937.419 ops/s
# Warmup Iteration   8: 9610848.366 ops/s
# Warmup Iteration   9: 9679370.633 ops/s
# Warmup Iteration  10: 9651852.080 ops/s
# Warmup Iteration  11: 9598409.483 ops/s
# Warmup Iteration  12: 9643531.790 ops/s
# Warmup Iteration  13: 9649328.876 ops/s
# Warmup Iteration  14: 9645966.062 ops/s
# Warmup Iteration  15: 9649453.775 ops/s
# Warmup Iteration  16: 9606115.413 ops/s
# Warmup Iteration  17: 9694928.041 ops/s
# Warmup Iteration  18: 9609927.311 ops/s
# Warmup Iteration  19: 9720960.097 ops/s
# Warmup Iteration  20: 9668190.545 ops/s
# Warmup Iteration  21: 9644612.157 ops/s
# Warmup Iteration  22: 9621706.603 ops/s
# Warmup Iteration  23: 9683832.104 ops/s
# Warmup Iteration  24: 9608447.399 ops/s
# Warmup Iteration  25: 9565980.185 ops/s
# Warmup Iteration  26: 9673346.893 ops/s
# Warmup Iteration  27: 9674872.222 ops/s
# Warmup Iteration  28: 9695046.591 ops/s
# Warmup Iteration  29: 9670038.010 ops/s
# Warmup Iteration  30: 9685094.632 ops/s
Iteration   1: 9677123.283 ops/s
Iteration   2: 9716078.357 ops/s
Iteration   3: 9597797.555 ops/s
Iteration   4: 9576822.992 ops/s
Iteration   5: 9668032.206 ops/s
Iteration   6: 9615707.557 ops/s
Iteration   7: 9717711.685 ops/s
Iteration   8: 9632315.275 ops/s
Iteration   9: 9687762.873 ops/s
Iteration  10: 9559322.098 ops/s
Iteration  11: 9643210.843 ops/s
Iteration  12: 9629481.927 ops/s
Iteration  13: 9657935.036 ops/s
Iteration  14: 9659353.132 ops/s
Iteration  15: 9697225.700 ops/s
Iteration  16: 9690833.424 ops/s
Iteration  17: 9688502.980 ops/s
Iteration  18: 9535169.038 ops/s
Iteration  19: 9507330.682 ops/s
Iteration  20: 9622849.540 ops/s
Iteration  21: 9688983.684 ops/s
Iteration  22: 9644253.832 ops/s
Iteration  23: 9672697.512 ops/s
Iteration  24: 9570901.650 ops/s
Iteration  25: 9749991.313 ops/s
Iteration  26: 9727117.594 ops/s
Iteration  27: 9649781.377 ops/s
Iteration  28: 9634267.511 ops/s
Iteration  29: 9660853.933 ops/s
Iteration  30: 9640276.759 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_booleanIterator":
  9647323.045 ±(99.9%) 38041.696 ops/s [Average]
  (min, avg, max) = (9507330.682, 9647323.045, 9749991.313), stdev = 56939.024
  CI (99.9%): [9609281.349, 9685364.741] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_booleanIterator  thrpt   30  9647323.045 ± 38041.696  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 508114.196 ops/s
# Warmup Iteration   2: 692919.918 ops/s
# Warmup Iteration   3: 834129.978 ops/s
# Warmup Iteration   4: 838860.819 ops/s
# Warmup Iteration   5: 843328.627 ops/s
# Warmup Iteration   6: 836575.119 ops/s
# Warmup Iteration   7: 827281.024 ops/s
# Warmup Iteration   8: 710129.639 ops/s
# Warmup Iteration   9: 838039.325 ops/s
# Warmup Iteration  10: 834746.262 ops/s
# Warmup Iteration  11: 843786.786 ops/s
# Warmup Iteration  12: 843988.097 ops/s
# Warmup Iteration  13: 838629.039 ops/s
# Warmup Iteration  14: 843265.669 ops/s
# Warmup Iteration  15: 842861.648 ops/s
# Warmup Iteration  16: 843689.486 ops/s
# Warmup Iteration  17: 883459.430 ops/s
# Warmup Iteration  18: 883969.770 ops/s
# Warmup Iteration  19: 890547.218 ops/s
# Warmup Iteration  20: 885926.161 ops/s
# Warmup Iteration  21: 886725.406 ops/s
# Warmup Iteration  22: 890503.980 ops/s
# Warmup Iteration  23: 883470.472 ops/s
# Warmup Iteration  24: 878779.401 ops/s
# Warmup Iteration  25: 891594.175 ops/s
# Warmup Iteration  26: 884436.604 ops/s
# Warmup Iteration  27: 887655.673 ops/s
# Warmup Iteration  28: 879305.377 ops/s
# Warmup Iteration  29: 884490.665 ops/s
# Warmup Iteration  30: 885667.672 ops/s
Iteration   1: 887764.146 ops/s
Iteration   2: 889402.245 ops/s
Iteration   3: 869627.196 ops/s
Iteration   4: 886261.015 ops/s
Iteration   5: 890625.028 ops/s
Iteration   6: 886201.556 ops/s
Iteration   7: 873967.228 ops/s
Iteration   8: 888249.846 ops/s
Iteration   9: 889796.402 ops/s
Iteration  10: 886548.419 ops/s
Iteration  11: 893710.615 ops/s
Iteration  12: 875201.381 ops/s
Iteration  13: 890799.006 ops/s
Iteration  14: 888319.380 ops/s
Iteration  15: 886749.305 ops/s
Iteration  16: 890878.287 ops/s
Iteration  17: 868967.052 ops/s
Iteration  18: 891305.465 ops/s
Iteration  19: 884066.644 ops/s
Iteration  20: 897487.406 ops/s
Iteration  21: 889596.342 ops/s
Iteration  22: 886435.716 ops/s
Iteration  23: 882588.180 ops/s
Iteration  24: 884228.470 ops/s
Iteration  25: 885094.314 ops/s
Iteration  26: 886256.857 ops/s
Iteration  27: 888771.427 ops/s
Iteration  28: 887659.835 ops/s
Iteration  29: 883794.458 ops/s
Iteration  30: 887183.093 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove":
  885917.877 ±(99.9%) 4292.208 ops/s [Average]
  (min, avg, max) = (868967.052, 885917.877, 897487.406), stdev = 6424.376
  CI (99.9%): [881625.669, 890210.085] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  885917.877 ± 4292.208  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 129036.167 ops/s
# Warmup Iteration   2: 213095.780 ops/s
# Warmup Iteration   3: 246384.534 ops/s
# Warmup Iteration   4: 248077.312 ops/s
# Warmup Iteration   5: 251367.238 ops/s
# Warmup Iteration   6: 224485.153 ops/s
# Warmup Iteration   7: 236347.675 ops/s
# Warmup Iteration   8: 247841.388 ops/s
# Warmup Iteration   9: 251115.707 ops/s
# Warmup Iteration  10: 251467.780 ops/s
# Warmup Iteration  11: 251700.339 ops/s
# Warmup Iteration  12: 252475.532 ops/s
# Warmup Iteration  13: 249924.058 ops/s
# Warmup Iteration  14: 252404.444 ops/s
# Warmup Iteration  15: 249592.005 ops/s
# Warmup Iteration  16: 251223.311 ops/s
# Warmup Iteration  17: 259031.404 ops/s
# Warmup Iteration  18: 258944.979 ops/s
# Warmup Iteration  19: 259704.526 ops/s
# Warmup Iteration  20: 257639.846 ops/s
# Warmup Iteration  21: 259390.981 ops/s
# Warmup Iteration  22: 258870.400 ops/s
# Warmup Iteration  23: 259257.787 ops/s
# Warmup Iteration  24: 257404.034 ops/s
# Warmup Iteration  25: 258134.196 ops/s
# Warmup Iteration  26: 259416.096 ops/s
# Warmup Iteration  27: 257484.285 ops/s
# Warmup Iteration  28: 259412.775 ops/s
# Warmup Iteration  29: 259132.296 ops/s
# Warmup Iteration  30: 255736.953 ops/s
Iteration   1: 257509.223 ops/s
Iteration   2: 255793.581 ops/s
Iteration   3: 260215.422 ops/s
Iteration   4: 258550.457 ops/s
Iteration   5: 258611.918 ops/s
Iteration   6: 260266.843 ops/s
Iteration   7: 259047.019 ops/s
Iteration   8: 255072.843 ops/s
Iteration   9: 260114.680 ops/s
Iteration  10: 259610.856 ops/s
Iteration  11: 259168.815 ops/s
Iteration  12: 259636.637 ops/s
Iteration  13: 259835.203 ops/s
Iteration  14: 258117.185 ops/s
Iteration  15: 259736.037 ops/s
Iteration  16: 259303.655 ops/s
Iteration  17: 254685.806 ops/s
Iteration  18: 259398.874 ops/s
Iteration  19: 260118.501 ops/s
Iteration  20: 257187.179 ops/s
Iteration  21: 260670.385 ops/s
Iteration  22: 259316.456 ops/s
Iteration  23: 260223.486 ops/s
Iteration  24: 257717.611 ops/s
Iteration  25: 257312.357 ops/s
Iteration  26: 259640.530 ops/s
Iteration  27: 261357.003 ops/s
Iteration  28: 259754.270 ops/s
Iteration  29: 260149.741 ops/s
Iteration  30: 260248.456 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_chunk":
  258945.701 ±(99.9%) 1088.945 ops/s [Average]
  (min, avg, max) = (254685.806, 258945.701, 261357.003), stdev = 1629.882
  CI (99.9%): [257856.756, 260034.646] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_chunk  thrpt   30  258945.701 ± 1088.945  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2721230.848 ops/s
# Warmup Iteration   2: 6013116.567 ops/s
# Warmup Iteration   3: 5065225.140 ops/s
# Warmup Iteration   4: 6008536.969 ops/s
# Warmup Iteration   5: 6039433.441 ops/s
# Warmup Iteration   6: 6014881.045 ops/s
# Warmup Iteration   7: 6030840.566 ops/s
# Warmup Iteration   8: 6040721.366 ops/s
# Warmup Iteration   9: 6020701.812 ops/s
# Warmup Iteration  10: 6039741.340 ops/s
# Warmup Iteration  11: 6064897.893 ops/s
# Warmup Iteration  12: 6065393.753 ops/s
# Warmup Iteration  13: 6067437.071 ops/s
# Warmup Iteration  14: 6040098.331 ops/s
# Warmup Iteration  15: 6026960.040 ops/s
# Warmup Iteration  16: 6063650.834 ops/s
# Warmup Iteration  17: 6056486.273 ops/s
# Warmup Iteration  18: 6058152.256 ops/s
# Warmup Iteration  19: 6027130.688 ops/s
# Warmup Iteration  20: 6014562.783 ops/s
# Warmup Iteration  21: 6050606.669 ops/s
# Warmup Iteration  22: 6005252.407 ops/s
# Warmup Iteration  23: 6023764.105 ops/s
# Warmup Iteration  24: 5975948.816 ops/s
# Warmup Iteration  25: 5992448.360 ops/s
# Warmup Iteration  26: 6069277.917 ops/s
# Warmup Iteration  27: 6068285.755 ops/s
# Warmup Iteration  28: 6073986.517 ops/s
# Warmup Iteration  29: 6062913.187 ops/s
# Warmup Iteration  30: 6085630.170 ops/s
Iteration   1: 6097593.953 ops/s
Iteration   2: 6070859.723 ops/s
Iteration   3: 6034517.123 ops/s
Iteration   4: 6019622.368 ops/s
Iteration   5: 5932800.859 ops/s
Iteration   6: 6071302.626 ops/s
Iteration   7: 6105901.085 ops/s
Iteration   8: 6067030.913 ops/s
Iteration   9: 6100080.360 ops/s
Iteration  10: 6079212.793 ops/s
Iteration  11: 6072781.814 ops/s
Iteration  12: 6081626.875 ops/s
Iteration  13: 5939390.425 ops/s
Iteration  14: 6070935.573 ops/s
Iteration  15: 6047817.290 ops/s
Iteration  16: 6056063.713 ops/s
Iteration  17: 6056402.251 ops/s
Iteration  18: 6066168.584 ops/s
Iteration  19: 6066223.247 ops/s
Iteration  20: 6075726.312 ops/s
Iteration  21: 6048442.133 ops/s
Iteration  22: 6073564.239 ops/s
Iteration  23: 6054111.018 ops/s
Iteration  24: 5963057.700 ops/s
Iteration  25: 6065526.785 ops/s
Iteration  26: 6043140.812 ops/s
Iteration  27: 5957965.840 ops/s
Iteration  28: 6041349.409 ops/s
Iteration  29: 6060238.702 ops/s
Iteration  30: 6045547.074 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_clear":
  6048833.387 ±(99.9%) 29708.522 ops/s [Average]
  (min, avg, max) = (5932800.859, 6048833.387, 6105901.085), stdev = 44466.321
  CI (99.9%): [6019124.864, 6078541.909] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_clear  thrpt   30  6048833.387 ± 29708.522  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 627925.588 ops/s
# Warmup Iteration   2: 1546763.090 ops/s
# Warmup Iteration   3: 1653362.285 ops/s
# Warmup Iteration   4: 1354696.116 ops/s
# Warmup Iteration   5: 1641481.837 ops/s
# Warmup Iteration   6: 1639616.358 ops/s
# Warmup Iteration   7: 1653513.198 ops/s
# Warmup Iteration   8: 1659039.261 ops/s
# Warmup Iteration   9: 1661192.693 ops/s
# Warmup Iteration  10: 1652069.884 ops/s
# Warmup Iteration  11: 1652573.575 ops/s
# Warmup Iteration  12: 1652385.317 ops/s
# Warmup Iteration  13: 1652167.795 ops/s
# Warmup Iteration  14: 1623241.795 ops/s
# Warmup Iteration  15: 1651975.362 ops/s
# Warmup Iteration  16: 1645782.085 ops/s
# Warmup Iteration  17: 1638322.522 ops/s
# Warmup Iteration  18: 1652124.174 ops/s
# Warmup Iteration  19: 1653645.516 ops/s
# Warmup Iteration  20: 1636921.523 ops/s
# Warmup Iteration  21: 1647477.186 ops/s
# Warmup Iteration  22: 1653884.420 ops/s
# Warmup Iteration  23: 1638632.101 ops/s
# Warmup Iteration  24: 1647583.865 ops/s
# Warmup Iteration  25: 1654247.847 ops/s
# Warmup Iteration  26: 1652327.161 ops/s
# Warmup Iteration  27: 1652291.580 ops/s
# Warmup Iteration  28: 1648587.307 ops/s
# Warmup Iteration  29: 1658913.711 ops/s
# Warmup Iteration  30: 1635719.615 ops/s
Iteration   1: 1643950.293 ops/s
Iteration   2: 1648971.809 ops/s
Iteration   3: 1654063.190 ops/s
Iteration   4: 1654102.395 ops/s
Iteration   5: 1653049.125 ops/s
Iteration   6: 1654200.330 ops/s
Iteration   7: 1623343.280 ops/s
Iteration   8: 1662763.287 ops/s
Iteration   9: 1642020.012 ops/s
Iteration  10: 1653502.464 ops/s
Iteration  11: 1653751.085 ops/s
Iteration  12: 1658728.310 ops/s
Iteration  13: 1652189.297 ops/s
Iteration  14: 1623224.752 ops/s
Iteration  15: 1623691.903 ops/s
Iteration  16: 1655534.041 ops/s
Iteration  17: 1661512.978 ops/s
Iteration  18: 1644516.820 ops/s
Iteration  19: 1647308.385 ops/s
Iteration  20: 1657322.879 ops/s
Iteration  21: 1648976.490 ops/s
Iteration  22: 1655738.505 ops/s
Iteration  23: 1634704.686 ops/s
Iteration  24: 1631676.333 ops/s
Iteration  25: 1656005.866 ops/s
Iteration  26: 1624458.666 ops/s
Iteration  27: 1622342.700 ops/s
Iteration  28: 1642146.162 ops/s
Iteration  29: 1646687.557 ops/s
Iteration  30: 1654551.143 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_collect":
  1646167.825 ±(99.9%) 8336.782 ops/s [Average]
  (min, avg, max) = (1622342.700, 1646167.825, 1662763.287), stdev = 12478.104
  CI (99.9%): [1637831.042, 1654504.607] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_collect  thrpt   30  1646167.825 ± 8336.782  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1233991.501 ops/s
# Warmup Iteration   2: 2778727.522 ops/s
# Warmup Iteration   3: 3267340.883 ops/s
# Warmup Iteration   4: 2793795.722 ops/s
# Warmup Iteration   5: 3327243.665 ops/s
# Warmup Iteration   6: 3329961.731 ops/s
# Warmup Iteration   7: 3315297.027 ops/s
# Warmup Iteration   8: 3316814.488 ops/s
# Warmup Iteration   9: 3326064.987 ops/s
# Warmup Iteration  10: 3315037.185 ops/s
# Warmup Iteration  11: 3321612.270 ops/s
# Warmup Iteration  12: 3321409.981 ops/s
# Warmup Iteration  13: 3328237.080 ops/s
# Warmup Iteration  14: 3301004.264 ops/s
# Warmup Iteration  15: 3330492.597 ops/s
# Warmup Iteration  16: 3323081.125 ops/s
# Warmup Iteration  17: 3324037.568 ops/s
# Warmup Iteration  18: 3331573.228 ops/s
# Warmup Iteration  19: 3329991.802 ops/s
# Warmup Iteration  20: 3333513.000 ops/s
# Warmup Iteration  21: 3322690.208 ops/s
# Warmup Iteration  22: 3292640.312 ops/s
# Warmup Iteration  23: 3315992.569 ops/s
# Warmup Iteration  24: 3325891.322 ops/s
# Warmup Iteration  25: 3319981.601 ops/s
# Warmup Iteration  26: 3313925.282 ops/s
# Warmup Iteration  27: 3316603.359 ops/s
# Warmup Iteration  28: 3318180.182 ops/s
# Warmup Iteration  29: 3325529.160 ops/s
# Warmup Iteration  30: 3307029.850 ops/s
Iteration   1: 3323848.687 ops/s
Iteration   2: 3316653.739 ops/s
Iteration   3: 3314767.551 ops/s
Iteration   4: 3305261.978 ops/s
Iteration   5: 3333132.567 ops/s
Iteration   6: 3315903.923 ops/s
Iteration   7: 3326830.747 ops/s
Iteration   8: 3337712.851 ops/s
Iteration   9: 3330995.340 ops/s
Iteration  10: 3336326.696 ops/s
Iteration  11: 3316638.687 ops/s
Iteration  12: 3307017.871 ops/s
Iteration  13: 3310637.968 ops/s
Iteration  14: 3314876.303 ops/s
Iteration  15: 3276210.405 ops/s
Iteration  16: 3335449.380 ops/s
Iteration  17: 3314920.599 ops/s
Iteration  18: 3304978.130 ops/s
Iteration  19: 3314569.068 ops/s
Iteration  20: 3313545.206 ops/s
Iteration  21: 3321133.875 ops/s
Iteration  22: 3290984.259 ops/s
Iteration  23: 3323087.506 ops/s
Iteration  24: 3317730.579 ops/s
Iteration  25: 3333473.444 ops/s
Iteration  26: 3295662.461 ops/s
Iteration  27: 3257004.058 ops/s
Iteration  28: 3300328.601 ops/s
Iteration  29: 3329423.193 ops/s
Iteration  30: 3327103.846 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_contains":
  3314873.650 ±(99.9%) 11976.221 ops/s [Average]
  (min, avg, max) = (3257004.058, 3314873.650, 3337712.851), stdev = 17925.445
  CI (99.9%): [3302897.429, 3326849.872] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_contains  thrpt   30  3314873.650 ± 11976.221  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1564470.186 ops/s
# Warmup Iteration   2: 3088661.673 ops/s
# Warmup Iteration   3: 5004799.500 ops/s
# Warmup Iteration   4: 4216040.661 ops/s
# Warmup Iteration   5: 5048694.680 ops/s
# Warmup Iteration   6: 5027741.281 ops/s
# Warmup Iteration   7: 5048247.475 ops/s
# Warmup Iteration   8: 5066550.076 ops/s
# Warmup Iteration   9: 5062326.041 ops/s
# Warmup Iteration  10: 5059515.612 ops/s
# Warmup Iteration  11: 5044398.054 ops/s
# Warmup Iteration  12: 5059033.336 ops/s
# Warmup Iteration  13: 5044911.546 ops/s
# Warmup Iteration  14: 5043356.593 ops/s
# Warmup Iteration  15: 5062686.048 ops/s
# Warmup Iteration  16: 5026007.186 ops/s
# Warmup Iteration  17: 5051225.156 ops/s
# Warmup Iteration  18: 4989707.196 ops/s
# Warmup Iteration  19: 5053984.133 ops/s
# Warmup Iteration  20: 4995921.356 ops/s
# Warmup Iteration  21: 5046959.011 ops/s
# Warmup Iteration  22: 4959184.535 ops/s
# Warmup Iteration  23: 5019324.850 ops/s
# Warmup Iteration  24: 5028049.479 ops/s
# Warmup Iteration  25: 5034243.242 ops/s
# Warmup Iteration  26: 5027934.045 ops/s
# Warmup Iteration  27: 4995130.230 ops/s
# Warmup Iteration  28: 5020892.618 ops/s
# Warmup Iteration  29: 5043024.595 ops/s
# Warmup Iteration  30: 5034150.308 ops/s
Iteration   1: 4896749.272 ops/s
Iteration   2: 5068662.064 ops/s
Iteration   3: 5036575.841 ops/s
Iteration   4: 5070156.213 ops/s
Iteration   5: 5054673.651 ops/s
Iteration   6: 5018143.451 ops/s
Iteration   7: 5005037.662 ops/s
Iteration   8: 5039179.549 ops/s
Iteration   9: 4984479.863 ops/s
Iteration  10: 5033445.196 ops/s
Iteration  11: 5052826.686 ops/s
Iteration  12: 5042988.918 ops/s
Iteration  13: 5040062.099 ops/s
Iteration  14: 5060314.761 ops/s
Iteration  15: 5030285.314 ops/s
Iteration  16: 5041334.366 ops/s
Iteration  17: 5032514.917 ops/s
Iteration  18: 5068864.778 ops/s
Iteration  19: 5038316.802 ops/s
Iteration  20: 5047932.335 ops/s
Iteration  21: 5030954.563 ops/s
Iteration  22: 5046275.503 ops/s
Iteration  23: 4866869.880 ops/s
Iteration  24: 5026271.129 ops/s
Iteration  25: 4963919.681 ops/s
Iteration  26: 5055850.807 ops/s
Iteration  27: 5014003.405 ops/s
Iteration  28: 5043315.375 ops/s
Iteration  29: 5015977.629 ops/s
Iteration  30: 5044538.552 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsAllArray":
  5025684.009 ±(99.9%) 30491.196 ops/s [Average]
  (min, avg, max) = (4866869.880, 5025684.009, 5070156.213), stdev = 45637.790
  CI (99.9%): [4995192.813, 5056175.205] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsAllArray  thrpt   30  5025684.009 ± 30491.196  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1284419.895 ops/s
# Warmup Iteration   2: 2989334.334 ops/s
# Warmup Iteration   3: 4065547.677 ops/s
# Warmup Iteration   4: 3838969.630 ops/s
# Warmup Iteration   5: 4320499.846 ops/s
# Warmup Iteration   6: 4324403.759 ops/s
# Warmup Iteration   7: 4342468.401 ops/s
# Warmup Iteration   8: 4325485.766 ops/s
# Warmup Iteration   9: 4331687.376 ops/s
# Warmup Iteration  10: 4302873.093 ops/s
# Warmup Iteration  11: 4318835.719 ops/s
# Warmup Iteration  12: 4298890.739 ops/s
# Warmup Iteration  13: 4326009.910 ops/s
# Warmup Iteration  14: 4311433.820 ops/s
# Warmup Iteration  15: 4333837.826 ops/s
# Warmup Iteration  16: 4307541.084 ops/s
# Warmup Iteration  17: 4321301.410 ops/s
# Warmup Iteration  18: 4326832.982 ops/s
# Warmup Iteration  19: 4287680.376 ops/s
# Warmup Iteration  20: 4325680.734 ops/s
# Warmup Iteration  21: 4327989.867 ops/s
# Warmup Iteration  22: 4321005.729 ops/s
# Warmup Iteration  23: 4328090.812 ops/s
# Warmup Iteration  24: 4317804.396 ops/s
# Warmup Iteration  25: 4313529.776 ops/s
# Warmup Iteration  26: 4314031.260 ops/s
# Warmup Iteration  27: 4310613.229 ops/s
# Warmup Iteration  28: 4335000.786 ops/s
# Warmup Iteration  29: 4318817.797 ops/s
# Warmup Iteration  30: 4328330.981 ops/s
Iteration   1: 4331801.379 ops/s
Iteration   2: 4329509.690 ops/s
Iteration   3: 4313509.537 ops/s
Iteration   4: 4339821.113 ops/s
Iteration   5: 4334826.941 ops/s
Iteration   6: 4327783.864 ops/s
Iteration   7: 4319154.923 ops/s
Iteration   8: 4313517.913 ops/s
Iteration   9: 4336133.773 ops/s
Iteration  10: 4252767.291 ops/s
Iteration  11: 4316823.200 ops/s
Iteration  12: 4293767.755 ops/s
Iteration  13: 4338956.643 ops/s
Iteration  14: 4346525.867 ops/s
Iteration  15: 4323347.831 ops/s
Iteration  16: 4349310.918 ops/s
Iteration  17: 4331185.256 ops/s
Iteration  18: 4319223.885 ops/s
Iteration  19: 4309289.749 ops/s
Iteration  20: 4240331.585 ops/s
Iteration  21: 4324416.256 ops/s
Iteration  22: 4329054.758 ops/s
Iteration  23: 4287170.995 ops/s
Iteration  24: 4295108.649 ops/s
Iteration  25: 4315556.628 ops/s
Iteration  26: 4283820.802 ops/s
Iteration  27: 4160249.195 ops/s
Iteration  28: 4255268.119 ops/s
Iteration  29: 4351451.664 ops/s
Iteration  30: 4325016.841 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable":
  4309823.434 ±(99.9%) 26531.723 ops/s [Average]
  (min, avg, max) = (4160249.195, 4309823.434, 4351451.664), stdev = 39711.437
  CI (99.9%): [4283291.711, 4336355.157] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable  thrpt   30  4309823.434 ± 26531.723  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 803211.208 ops/s
# Warmup Iteration   2: 1348851.889 ops/s
# Warmup Iteration   3: 2126341.248 ops/s
# Warmup Iteration   4: 2124544.688 ops/s
# Warmup Iteration   5: 1770905.242 ops/s
# Warmup Iteration   6: 2141815.102 ops/s
# Warmup Iteration   7: 2126343.356 ops/s
# Warmup Iteration   8: 2139972.003 ops/s
# Warmup Iteration   9: 2146588.540 ops/s
# Warmup Iteration  10: 2131310.711 ops/s
# Warmup Iteration  11: 2133820.066 ops/s
# Warmup Iteration  12: 2132874.438 ops/s
# Warmup Iteration  13: 2135070.232 ops/s
# Warmup Iteration  14: 2133969.548 ops/s
# Warmup Iteration  15: 2134899.190 ops/s
# Warmup Iteration  16: 2115891.841 ops/s
# Warmup Iteration  17: 2140718.761 ops/s
# Warmup Iteration  18: 2139904.822 ops/s
# Warmup Iteration  19: 2137373.842 ops/s
# Warmup Iteration  20: 2127516.946 ops/s
# Warmup Iteration  21: 2134486.390 ops/s
# Warmup Iteration  22: 2137973.638 ops/s
# Warmup Iteration  23: 2125579.622 ops/s
# Warmup Iteration  24: 2143052.355 ops/s
# Warmup Iteration  25: 2137834.352 ops/s
# Warmup Iteration  26: 2140635.897 ops/s
# Warmup Iteration  27: 2144218.249 ops/s
# Warmup Iteration  28: 2119917.826 ops/s
# Warmup Iteration  29: 2111220.413 ops/s
# Warmup Iteration  30: 2128884.441 ops/s
Iteration   1: 2119149.790 ops/s
Iteration   2: 2134100.128 ops/s
Iteration   3: 2120752.690 ops/s
Iteration   4: 2137926.091 ops/s
Iteration   5: 2095987.209 ops/s
Iteration   6: 2135355.547 ops/s
Iteration   7: 2126461.744 ops/s
Iteration   8: 2140122.858 ops/s
Iteration   9: 2133882.724 ops/s
Iteration  10: 2096721.024 ops/s
Iteration  11: 2142255.292 ops/s
Iteration  12: 2097860.192 ops/s
Iteration  13: 2143097.286 ops/s
Iteration  14: 2089610.597 ops/s
Iteration  15: 2131872.878 ops/s
Iteration  16: 2131254.966 ops/s
Iteration  17: 2127966.671 ops/s
Iteration  18: 2148314.896 ops/s
Iteration  19: 2130060.362 ops/s
Iteration  20: 2132102.787 ops/s
Iteration  21: 2145513.321 ops/s
Iteration  22: 2139710.452 ops/s
Iteration  23: 2140717.066 ops/s
Iteration  24: 2127107.506 ops/s
Iteration  25: 2120899.253 ops/s
Iteration  26: 2111628.191 ops/s
Iteration  27: 2118199.633 ops/s
Iteration  28: 2145601.343 ops/s
Iteration  29: 2139790.771 ops/s
Iteration  30: 2129909.089 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray":
  2127797.745 ±(99.9%) 10565.692 ops/s [Average]
  (min, avg, max) = (2089610.597, 2127797.745, 2148314.896), stdev = 15814.232
  CI (99.9%): [2117232.053, 2138363.438] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray  thrpt   30  2127797.745 ± 10565.692  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 443852.321 ops/s
# Warmup Iteration   2: 616876.838 ops/s
# Warmup Iteration   3: 836800.577 ops/s
# Warmup Iteration   4: 837673.378 ops/s
# Warmup Iteration   5: 836747.774 ops/s
# Warmup Iteration   6: 823787.399 ops/s
# Warmup Iteration   7: 693773.364 ops/s
# Warmup Iteration   8: 837444.254 ops/s
# Warmup Iteration   9: 836730.768 ops/s
# Warmup Iteration  10: 839106.398 ops/s
# Warmup Iteration  11: 835333.532 ops/s
# Warmup Iteration  12: 836148.039 ops/s
# Warmup Iteration  13: 831723.057 ops/s
# Warmup Iteration  14: 833306.965 ops/s
# Warmup Iteration  15: 834983.821 ops/s
# Warmup Iteration  16: 835092.780 ops/s
# Warmup Iteration  17: 834777.586 ops/s
# Warmup Iteration  18: 836512.605 ops/s
# Warmup Iteration  19: 832643.221 ops/s
# Warmup Iteration  20: 835617.731 ops/s
# Warmup Iteration  21: 836107.291 ops/s
# Warmup Iteration  22: 837548.328 ops/s
# Warmup Iteration  23: 829542.915 ops/s
# Warmup Iteration  24: 837127.438 ops/s
# Warmup Iteration  25: 833526.992 ops/s
# Warmup Iteration  26: 834334.993 ops/s
# Warmup Iteration  27: 835731.496 ops/s
# Warmup Iteration  28: 838464.547 ops/s
# Warmup Iteration  29: 836148.413 ops/s
# Warmup Iteration  30: 833400.655 ops/s
Iteration   1: 835944.495 ops/s
Iteration   2: 831805.503 ops/s
Iteration   3: 837133.237 ops/s
Iteration   4: 833835.112 ops/s
Iteration   5: 832873.268 ops/s
Iteration   6: 837875.972 ops/s
Iteration   7: 837818.874 ops/s
Iteration   8: 827564.736 ops/s
Iteration   9: 839778.050 ops/s
Iteration  10: 837999.751 ops/s
Iteration  11: 821047.968 ops/s
Iteration  12: 838906.687 ops/s
Iteration  13: 822516.417 ops/s
Iteration  14: 823831.040 ops/s
Iteration  15: 840823.176 ops/s
Iteration  16: 837322.877 ops/s
Iteration  17: 832090.686 ops/s
Iteration  18: 836160.554 ops/s
Iteration  19: 834135.244 ops/s
Iteration  20: 838590.154 ops/s
Iteration  21: 822923.032 ops/s
Iteration  22: 833758.188 ops/s
Iteration  23: 841811.399 ops/s
Iteration  24: 832185.355 ops/s
Iteration  25: 839257.971 ops/s
Iteration  26: 836784.433 ops/s
Iteration  27: 840360.175 ops/s
Iteration  28: 837568.511 ops/s
Iteration  29: 825575.047 ops/s
Iteration  30: 833857.757 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable":
  834071.189 ±(99.9%) 3924.718 ops/s [Average]
  (min, avg, max) = (821047.968, 834071.189, 841811.399), stdev = 5874.333
  CI (99.9%): [830146.471, 837995.907] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  834071.189 ± 3924.718  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 845054.933 ops/s
# Warmup Iteration   2: 1389576.612 ops/s
# Warmup Iteration   3: 2386109.503 ops/s
# Warmup Iteration   4: 2384044.418 ops/s
# Warmup Iteration   5: 1994380.446 ops/s
# Warmup Iteration   6: 2381433.179 ops/s
# Warmup Iteration   7: 2384085.932 ops/s
# Warmup Iteration   8: 2389798.306 ops/s
# Warmup Iteration   9: 2383785.212 ops/s
# Warmup Iteration  10: 2392421.870 ops/s
# Warmup Iteration  11: 2347779.548 ops/s
# Warmup Iteration  12: 2384371.294 ops/s
# Warmup Iteration  13: 2376191.500 ops/s
# Warmup Iteration  14: 2376008.761 ops/s
# Warmup Iteration  15: 2390895.080 ops/s
# Warmup Iteration  16: 2381624.647 ops/s
# Warmup Iteration  17: 2378204.862 ops/s
# Warmup Iteration  18: 2391134.510 ops/s
# Warmup Iteration  19: 2384076.726 ops/s
# Warmup Iteration  20: 2374404.242 ops/s
# Warmup Iteration  21: 2382753.694 ops/s
# Warmup Iteration  22: 2385847.729 ops/s
# Warmup Iteration  23: 2395598.499 ops/s
# Warmup Iteration  24: 2376162.454 ops/s
# Warmup Iteration  25: 2388632.633 ops/s
# Warmup Iteration  26: 2374999.246 ops/s
# Warmup Iteration  27: 2392085.417 ops/s
# Warmup Iteration  28: 2369807.583 ops/s
# Warmup Iteration  29: 2390939.082 ops/s
# Warmup Iteration  30: 2375019.357 ops/s
Iteration   1: 2398435.603 ops/s
Iteration   2: 2350178.437 ops/s
Iteration   3: 2393209.943 ops/s
Iteration   4: 2387051.991 ops/s
Iteration   5: 2380378.729 ops/s
Iteration   6: 2388102.660 ops/s
Iteration   7: 2395705.312 ops/s
Iteration   8: 2385910.762 ops/s
Iteration   9: 2392162.812 ops/s
Iteration  10: 2396585.602 ops/s
Iteration  11: 2387793.832 ops/s
Iteration  12: 2379678.030 ops/s
Iteration  13: 2386848.850 ops/s
Iteration  14: 2340747.141 ops/s
Iteration  15: 2390296.248 ops/s
Iteration  16: 2380230.291 ops/s
Iteration  17: 2394866.552 ops/s
Iteration  18: 2389576.531 ops/s
Iteration  19: 2380321.791 ops/s
Iteration  20: 2398264.430 ops/s
Iteration  21: 2400559.563 ops/s
Iteration  22: 2386048.630 ops/s
Iteration  23: 2393474.282 ops/s
Iteration  24: 2388166.632 ops/s
Iteration  25: 2374548.093 ops/s
Iteration  26: 2385253.446 ops/s
Iteration  27: 2397324.762 ops/s
Iteration  28: 2394615.037 ops/s
Iteration  29: 2398938.706 ops/s
Iteration  30: 2390849.476 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray":
  2386870.806 ±(99.9%) 8740.768 ops/s [Average]
  (min, avg, max) = (2340747.141, 2386870.806, 2400559.563), stdev = 13082.771
  CI (99.9%): [2378130.038, 2395611.574] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray  thrpt   30  2386870.806 ± 8740.768  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 425314.566 ops/s
# Warmup Iteration   2: 593195.143 ops/s
# Warmup Iteration   3: 786434.439 ops/s
# Warmup Iteration   4: 774204.180 ops/s
# Warmup Iteration   5: 787637.654 ops/s
# Warmup Iteration   6: 787705.865 ops/s
# Warmup Iteration   7: 652535.569 ops/s
# Warmup Iteration   8: 783990.657 ops/s
# Warmup Iteration   9: 788615.397 ops/s
# Warmup Iteration  10: 791304.002 ops/s
# Warmup Iteration  11: 780770.003 ops/s
# Warmup Iteration  12: 786391.741 ops/s
# Warmup Iteration  13: 780282.461 ops/s
# Warmup Iteration  14: 782919.458 ops/s
# Warmup Iteration  15: 780771.271 ops/s
# Warmup Iteration  16: 781000.095 ops/s
# Warmup Iteration  17: 781103.408 ops/s
# Warmup Iteration  18: 785779.164 ops/s
# Warmup Iteration  19: 782995.827 ops/s
# Warmup Iteration  20: 781186.624 ops/s
# Warmup Iteration  21: 780211.426 ops/s
# Warmup Iteration  22: 780199.242 ops/s
# Warmup Iteration  23: 779344.159 ops/s
# Warmup Iteration  24: 780975.405 ops/s
# Warmup Iteration  25: 782512.668 ops/s
# Warmup Iteration  26: 770545.961 ops/s
# Warmup Iteration  27: 784409.859 ops/s
# Warmup Iteration  28: 785083.592 ops/s
# Warmup Iteration  29: 783902.808 ops/s
# Warmup Iteration  30: 783800.268 ops/s
Iteration   1: 782964.827 ops/s
Iteration   2: 782408.377 ops/s
Iteration   3: 780312.251 ops/s
Iteration   4: 774569.015 ops/s
Iteration   5: 785194.527 ops/s
Iteration   6: 784198.802 ops/s
Iteration   7: 784887.899 ops/s
Iteration   8: 787224.432 ops/s
Iteration   9: 785047.873 ops/s
Iteration  10: 776925.544 ops/s
Iteration  11: 786739.196 ops/s
Iteration  12: 784332.043 ops/s
Iteration  13: 788700.679 ops/s
Iteration  14: 783300.591 ops/s
Iteration  15: 784953.141 ops/s
Iteration  16: 784361.788 ops/s
Iteration  17: 784107.971 ops/s
Iteration  18: 786828.291 ops/s
Iteration  19: 776155.715 ops/s
Iteration  20: 785348.359 ops/s
Iteration  21: 784298.298 ops/s
Iteration  22: 778457.659 ops/s
Iteration  23: 786722.892 ops/s
Iteration  24: 775803.083 ops/s
Iteration  25: 781452.636 ops/s
Iteration  26: 780300.147 ops/s
Iteration  27: 768879.969 ops/s
Iteration  28: 786880.937 ops/s
Iteration  29: 786804.580 ops/s
Iteration  30: 786821.089 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable":
  782832.754 ±(99.9%) 3064.189 ops/s [Average]
  (min, avg, max) = (768879.969, 782832.754, 788700.679), stdev = 4586.333
  CI (99.9%): [779768.565, 785896.942] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  782832.754 ± 3064.189  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 830127.010 ops/s
# Warmup Iteration   2: 1398461.427 ops/s
# Warmup Iteration   3: 1833996.032 ops/s
# Warmup Iteration   4: 1844596.176 ops/s
# Warmup Iteration   5: 1526368.197 ops/s
# Warmup Iteration   6: 1850942.267 ops/s
# Warmup Iteration   7: 1845239.159 ops/s
# Warmup Iteration   8: 1840718.353 ops/s
# Warmup Iteration   9: 1847902.668 ops/s
# Warmup Iteration  10: 1847019.527 ops/s
# Warmup Iteration  11: 1843290.883 ops/s
# Warmup Iteration  12: 1837062.151 ops/s
# Warmup Iteration  13: 1833599.490 ops/s
# Warmup Iteration  14: 1830655.302 ops/s
# Warmup Iteration  15: 1841346.063 ops/s
# Warmup Iteration  16: 1831284.837 ops/s
# Warmup Iteration  17: 1811876.981 ops/s
# Warmup Iteration  18: 1839422.108 ops/s
# Warmup Iteration  19: 1838636.019 ops/s
# Warmup Iteration  20: 1834972.001 ops/s
# Warmup Iteration  21: 1825494.159 ops/s
# Warmup Iteration  22: 1840012.671 ops/s
# Warmup Iteration  23: 1838256.159 ops/s
# Warmup Iteration  24: 1845051.398 ops/s
# Warmup Iteration  25: 1824209.654 ops/s
# Warmup Iteration  26: 1846614.487 ops/s
# Warmup Iteration  27: 1843804.314 ops/s
# Warmup Iteration  28: 1841833.568 ops/s
# Warmup Iteration  29: 1848342.143 ops/s
# Warmup Iteration  30: 1845996.727 ops/s
Iteration   1: 1832614.619 ops/s
Iteration   2: 1839085.875 ops/s
Iteration   3: 1849512.801 ops/s
Iteration   4: 1821320.091 ops/s
Iteration   5: 1831851.075 ops/s
Iteration   6: 1846515.014 ops/s
Iteration   7: 1841782.681 ops/s
Iteration   8: 1835778.250 ops/s
Iteration   9: 1840785.615 ops/s
Iteration  10: 1836955.847 ops/s
Iteration  11: 1830570.517 ops/s
Iteration  12: 1844487.564 ops/s
Iteration  13: 1840032.657 ops/s
Iteration  14: 1803825.985 ops/s
Iteration  15: 1841366.470 ops/s
Iteration  16: 1845667.495 ops/s
Iteration  17: 1843932.914 ops/s
Iteration  18: 1838859.778 ops/s
Iteration  19: 1853431.709 ops/s
Iteration  20: 1849247.183 ops/s
Iteration  21: 1851194.667 ops/s
Iteration  22: 1849480.670 ops/s
Iteration  23: 1842063.369 ops/s
Iteration  24: 1821096.433 ops/s
Iteration  25: 1846159.998 ops/s
Iteration  26: 1855837.369 ops/s
Iteration  27: 1846719.721 ops/s
Iteration  28: 1844870.656 ops/s
Iteration  29: 1826929.702 ops/s
Iteration  30: 1821587.489 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_count":
  1839118.807 ±(99.9%) 7637.685 ops/s [Average]
  (min, avg, max) = (1803825.985, 1839118.807, 1855837.369), stdev = 11431.729
  CI (99.9%): [1831481.122, 1846756.492] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_count  thrpt   30  1839118.807 ± 7637.685  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 965212.533 ops/s
# Warmup Iteration   2: 1485319.704 ops/s
# Warmup Iteration   3: 2480618.390 ops/s
# Warmup Iteration   4: 2481619.660 ops/s
# Warmup Iteration   5: 2171581.426 ops/s
# Warmup Iteration   6: 2327432.559 ops/s
# Warmup Iteration   7: 2469331.431 ops/s
# Warmup Iteration   8: 2466597.700 ops/s
# Warmup Iteration   9: 2484479.144 ops/s
# Warmup Iteration  10: 2475823.768 ops/s
# Warmup Iteration  11: 2491666.360 ops/s
# Warmup Iteration  12: 2479627.904 ops/s
# Warmup Iteration  13: 2464188.347 ops/s
# Warmup Iteration  14: 2483785.152 ops/s
# Warmup Iteration  15: 2499086.603 ops/s
# Warmup Iteration  16: 2488460.886 ops/s
# Warmup Iteration  17: 2491038.682 ops/s
# Warmup Iteration  18: 2495435.113 ops/s
# Warmup Iteration  19: 2486438.415 ops/s
# Warmup Iteration  20: 2492170.429 ops/s
# Warmup Iteration  21: 2486594.681 ops/s
# Warmup Iteration  22: 2491233.194 ops/s
# Warmup Iteration  23: 2475931.563 ops/s
# Warmup Iteration  24: 2448694.602 ops/s
# Warmup Iteration  25: 2486582.656 ops/s
# Warmup Iteration  26: 2463323.814 ops/s
# Warmup Iteration  27: 2474831.285 ops/s
# Warmup Iteration  28: 2475944.362 ops/s
# Warmup Iteration  29: 2456400.571 ops/s
# Warmup Iteration  30: 2486327.559 ops/s
Iteration   1: 2485745.702 ops/s
Iteration   2: 2482064.368 ops/s
Iteration   3: 2476738.281 ops/s
Iteration   4: 2449800.205 ops/s
Iteration   5: 2473169.757 ops/s
Iteration   6: 2486818.017 ops/s
Iteration   7: 2486099.136 ops/s
Iteration   8: 2481078.984 ops/s
Iteration   9: 2473931.783 ops/s
Iteration  10: 2491659.794 ops/s
Iteration  11: 2434439.220 ops/s
Iteration  12: 2491005.891 ops/s
Iteration  13: 2476934.913 ops/s
Iteration  14: 2486234.302 ops/s
Iteration  15: 2476622.114 ops/s
Iteration  16: 2482134.301 ops/s
Iteration  17: 2475040.662 ops/s
Iteration  18: 2497388.727 ops/s
Iteration  19: 2497031.302 ops/s
Iteration  20: 2497246.993 ops/s
Iteration  21: 2496595.049 ops/s
Iteration  22: 2490691.497 ops/s
Iteration  23: 2493860.364 ops/s
Iteration  24: 2507360.861 ops/s
Iteration  25: 2502181.161 ops/s
Iteration  26: 2498136.509 ops/s
Iteration  27: 2438271.896 ops/s
Iteration  28: 2479999.503 ops/s
Iteration  29: 2493754.229 ops/s
Iteration  30: 2465866.026 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_detectIfNone":
  2482263.385 ±(99.9%) 11483.735 ops/s [Average]
  (min, avg, max) = (2434439.220, 2482263.385, 2507360.861), stdev = 17188.315
  CI (99.9%): [2470779.650, 2493747.120] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_detectIfNone  thrpt   30  2482263.385 ± 11483.735  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1635445.610 ops/s
# Warmup Iteration   2: 3508849.475 ops/s
# Warmup Iteration   3: 4107779.425 ops/s
# Warmup Iteration   4: 4178080.682 ops/s
# Warmup Iteration   5: 4515374.496 ops/s
# Warmup Iteration   6: 4531252.150 ops/s
# Warmup Iteration   7: 4552858.023 ops/s
# Warmup Iteration   8: 4544313.121 ops/s
# Warmup Iteration   9: 4539881.850 ops/s
# Warmup Iteration  10: 4545633.194 ops/s
# Warmup Iteration  11: 4528289.233 ops/s
# Warmup Iteration  12: 4490485.199 ops/s
# Warmup Iteration  13: 4548800.580 ops/s
# Warmup Iteration  14: 4530781.572 ops/s
# Warmup Iteration  15: 4536987.493 ops/s
# Warmup Iteration  16: 4529879.871 ops/s
# Warmup Iteration  17: 4522681.581 ops/s
# Warmup Iteration  18: 4493491.545 ops/s
# Warmup Iteration  19: 4527731.450 ops/s
# Warmup Iteration  20: 4479870.482 ops/s
# Warmup Iteration  21: 4526563.791 ops/s
# Warmup Iteration  22: 4505910.069 ops/s
# Warmup Iteration  23: 4507156.327 ops/s
# Warmup Iteration  24: 4475065.378 ops/s
# Warmup Iteration  25: 4514739.915 ops/s
# Warmup Iteration  26: 4530859.374 ops/s
# Warmup Iteration  27: 4541101.830 ops/s
# Warmup Iteration  28: 4539545.474 ops/s
# Warmup Iteration  29: 4538253.413 ops/s
# Warmup Iteration  30: 4507135.021 ops/s
Iteration   1: 4537640.358 ops/s
Iteration   2: 4523154.514 ops/s
Iteration   3: 4522951.441 ops/s
Iteration   4: 4541909.520 ops/s
Iteration   5: 4543492.958 ops/s
Iteration   6: 4505021.377 ops/s
Iteration   7: 4425523.365 ops/s
Iteration   8: 4555560.146 ops/s
Iteration   9: 4527971.176 ops/s
Iteration  10: 4538225.336 ops/s
Iteration  11: 4458777.542 ops/s
Iteration  12: 4474451.272 ops/s
Iteration  13: 4523832.270 ops/s
Iteration  14: 4549149.026 ops/s
Iteration  15: 4524765.171 ops/s
Iteration  16: 4520197.628 ops/s
Iteration  17: 4483228.836 ops/s
Iteration  18: 4506931.112 ops/s
Iteration  19: 4501353.190 ops/s
Iteration  20: 4534092.631 ops/s
Iteration  21: 4525639.314 ops/s
Iteration  22: 4409042.055 ops/s
Iteration  23: 4538150.722 ops/s
Iteration  24: 4531895.826 ops/s
Iteration  25: 4501764.013 ops/s
Iteration  26: 4543455.231 ops/s
Iteration  27: 4495339.613 ops/s
Iteration  28: 4533549.457 ops/s
Iteration  29: 4516396.650 ops/s
Iteration  30: 4559728.914 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_forEach":
  4515106.356 ±(99.9%) 23641.937 ops/s [Average]
  (min, avg, max) = (4409042.055, 4515106.356, 4559728.914), stdev = 35386.141
  CI (99.9%): [4491464.418, 4538748.293] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_forEach  thrpt   30  4515106.356 ± 23641.937  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6984611.258 ops/s
# Warmup Iteration   2: 14060336.492 ops/s
# Warmup Iteration   3: 12208564.731 ops/s
# Warmup Iteration   4: 14532017.639 ops/s
# Warmup Iteration   5: 14537780.420 ops/s
# Warmup Iteration   6: 14576855.684 ops/s
# Warmup Iteration   7: 14579429.185 ops/s
# Warmup Iteration   8: 14581791.009 ops/s
# Warmup Iteration   9: 14385468.821 ops/s
# Warmup Iteration  10: 14519889.454 ops/s
# Warmup Iteration  11: 14438752.906 ops/s
# Warmup Iteration  12: 14461305.722 ops/s
# Warmup Iteration  13: 14514659.059 ops/s
# Warmup Iteration  14: 14514997.120 ops/s
# Warmup Iteration  15: 14527173.444 ops/s
# Warmup Iteration  16: 14426734.434 ops/s
# Warmup Iteration  17: 14571473.276 ops/s
# Warmup Iteration  18: 14428167.327 ops/s
# Warmup Iteration  19: 14542702.436 ops/s
# Warmup Iteration  20: 14489237.837 ops/s
# Warmup Iteration  21: 14556524.689 ops/s
# Warmup Iteration  22: 14458148.743 ops/s
# Warmup Iteration  23: 14413037.965 ops/s
# Warmup Iteration  24: 14524974.276 ops/s
# Warmup Iteration  25: 14488292.573 ops/s
# Warmup Iteration  26: 14530741.640 ops/s
# Warmup Iteration  27: 14423491.848 ops/s
# Warmup Iteration  28: 14474704.703 ops/s
# Warmup Iteration  29: 14528178.462 ops/s
# Warmup Iteration  30: 14512415.757 ops/s
Iteration   1: 14409177.683 ops/s
Iteration   2: 14433347.270 ops/s
Iteration   3: 14605518.735 ops/s
Iteration   4: 14554885.279 ops/s
Iteration   5: 14679388.513 ops/s
Iteration   6: 14395869.492 ops/s
Iteration   7: 14564785.946 ops/s
Iteration   8: 14569786.158 ops/s
Iteration   9: 14402755.041 ops/s
Iteration  10: 14551946.729 ops/s
Iteration  11: 14514232.190 ops/s
Iteration  12: 14576178.728 ops/s
Iteration  13: 14435631.677 ops/s
Iteration  14: 14584858.959 ops/s
Iteration  15: 14561438.268 ops/s
Iteration  16: 14567646.834 ops/s
Iteration  17: 14606589.246 ops/s
Iteration  18: 14584187.950 ops/s
Iteration  19: 14640307.899 ops/s
Iteration  20: 14541331.176 ops/s
Iteration  21: 14622019.410 ops/s
Iteration  22: 14514781.968 ops/s
Iteration  23: 14568463.440 ops/s
Iteration  24: 14594948.666 ops/s
Iteration  25: 14570703.663 ops/s
Iteration  26: 14628919.525 ops/s
Iteration  27: 14483524.679 ops/s
Iteration  28: 14388479.914 ops/s
Iteration  29: 14434031.650 ops/s
Iteration  30: 14570779.957 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_injectInto":
  14538550.555 ±(99.9%) 53296.523 ops/s [Average]
  (min, avg, max) = (14388479.914, 14538550.555, 14679388.513), stdev = 79771.733
  CI (99.9%): [14485254.031, 14591847.078] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_injectInto  thrpt   30  14538550.555 ± 53296.523  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 769257.763 ops/s
# Warmup Iteration   2: 1576309.287 ops/s
# Warmup Iteration   3: 1794650.988 ops/s
# Warmup Iteration   4: 2105763.469 ops/s
# Warmup Iteration   5: 2113197.407 ops/s
# Warmup Iteration   6: 2115236.176 ops/s
# Warmup Iteration   7: 2119308.613 ops/s
# Warmup Iteration   8: 2117203.756 ops/s
# Warmup Iteration   9: 2098093.498 ops/s
# Warmup Iteration  10: 2095860.784 ops/s
# Warmup Iteration  11: 2104814.182 ops/s
# Warmup Iteration  12: 2087349.559 ops/s
# Warmup Iteration  13: 2098931.236 ops/s
# Warmup Iteration  14: 2110163.357 ops/s
# Warmup Iteration  15: 2123927.156 ops/s
# Warmup Iteration  16: 2094024.257 ops/s
# Warmup Iteration  17: 2132088.063 ops/s
# Warmup Iteration  18: 2119388.862 ops/s
# Warmup Iteration  19: 2129645.619 ops/s
# Warmup Iteration  20: 2096631.497 ops/s
# Warmup Iteration  21: 2104195.500 ops/s
# Warmup Iteration  22: 2124467.945 ops/s
# Warmup Iteration  23: 2118673.083 ops/s
# Warmup Iteration  24: 2127963.168 ops/s
# Warmup Iteration  25: 2122407.326 ops/s
# Warmup Iteration  26: 2108765.869 ops/s
# Warmup Iteration  27: 2124214.531 ops/s
# Warmup Iteration  28: 2097899.624 ops/s
# Warmup Iteration  29: 2106966.013 ops/s
# Warmup Iteration  30: 2106471.226 ops/s
Iteration   1: 2113824.896 ops/s
Iteration   2: 2095012.775 ops/s
Iteration   3: 2126329.995 ops/s
Iteration   4: 2131443.044 ops/s
Iteration   5: 2122848.771 ops/s
Iteration   6: 2118250.034 ops/s
Iteration   7: 2103241.193 ops/s
Iteration   8: 2119718.598 ops/s
Iteration   9: 2093038.332 ops/s
Iteration  10: 2114101.842 ops/s
Iteration  11: 2123351.507 ops/s
Iteration  12: 2122111.224 ops/s
Iteration  13: 2124413.058 ops/s
Iteration  14: 2115798.871 ops/s
Iteration  15: 2110285.452 ops/s
Iteration  16: 2064246.019 ops/s
Iteration  17: 2103275.896 ops/s
Iteration  18: 2109512.024 ops/s
Iteration  19: 2097979.076 ops/s
Iteration  20: 2119174.451 ops/s
Iteration  21: 2078634.870 ops/s
Iteration  22: 2099199.637 ops/s
Iteration  23: 2111275.768 ops/s
Iteration  24: 2082483.427 ops/s
Iteration  25: 2065175.899 ops/s
Iteration  26: 2115480.386 ops/s
Iteration  27: 2120719.460 ops/s
Iteration  28: 2065920.899 ops/s
Iteration  29: 2082685.460 ops/s
Iteration  30: 2100018.658 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_isEmpty":
  2104985.051 ±(99.9%) 12788.378 ops/s [Average]
  (min, avg, max) = (2064246.019, 2104985.051, 2131443.044), stdev = 19141.044
  CI (99.9%): [2092196.673, 2117773.429] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  2104985.051 ± 12788.378  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 635390.695 ops/s
# Warmup Iteration   2: 655737.871 ops/s
# Warmup Iteration   3: 843873.241 ops/s
# Warmup Iteration   4: 870515.913 ops/s
# Warmup Iteration   5: 876226.281 ops/s
# Warmup Iteration   6: 873444.620 ops/s
# Warmup Iteration   7: 875719.314 ops/s
# Warmup Iteration   8: 876468.987 ops/s
# Warmup Iteration   9: 870179.294 ops/s
# Warmup Iteration  10: 876794.697 ops/s
# Warmup Iteration  11: 871830.995 ops/s
# Warmup Iteration  12: 786584.278 ops/s
# Warmup Iteration  13: 803460.464 ops/s
# Warmup Iteration  14: 873301.341 ops/s
# Warmup Iteration  15: 874702.600 ops/s
# Warmup Iteration  16: 878682.904 ops/s
# Warmup Iteration  17: 928038.407 ops/s
# Warmup Iteration  18: 924961.654 ops/s
# Warmup Iteration  19: 927753.372 ops/s
# Warmup Iteration  20: 921491.214 ops/s
# Warmup Iteration  21: 922644.876 ops/s
# Warmup Iteration  22: 924103.488 ops/s
# Warmup Iteration  23: 920054.322 ops/s
# Warmup Iteration  24: 927701.072 ops/s
# Warmup Iteration  25: 917619.695 ops/s
# Warmup Iteration  26: 923832.520 ops/s
# Warmup Iteration  27: 925488.344 ops/s
# Warmup Iteration  28: 914860.168 ops/s
# Warmup Iteration  29: 913098.361 ops/s
# Warmup Iteration  30: 923061.243 ops/s
Iteration   1: 925406.682 ops/s
Iteration   2: 920697.976 ops/s
Iteration   3: 926292.865 ops/s
Iteration   4: 920956.175 ops/s
Iteration   5: 926230.967 ops/s
Iteration   6: 922752.493 ops/s
Iteration   7: 918125.750 ops/s
Iteration   8: 925477.522 ops/s
Iteration   9: 920110.567 ops/s
Iteration  10: 910573.029 ops/s
Iteration  11: 918375.869 ops/s
Iteration  12: 927428.679 ops/s
Iteration  13: 930144.634 ops/s
Iteration  14: 923584.317 ops/s
Iteration  15: 922106.716 ops/s
Iteration  16: 926313.595 ops/s
Iteration  17: 923542.650 ops/s
Iteration  18: 925364.379 ops/s
Iteration  19: 923472.716 ops/s
Iteration  20: 925890.202 ops/s
Iteration  21: 922603.269 ops/s
Iteration  22: 931680.286 ops/s
Iteration  23: 919060.044 ops/s
Iteration  24: 916620.622 ops/s
Iteration  25: 912786.648 ops/s
Iteration  26: 921237.603 ops/s
Iteration  27: 892298.107 ops/s
Iteration  28: 920849.419 ops/s
Iteration  29: 923996.146 ops/s
Iteration  30: 923108.556 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws":
  921569.616 ±(99.9%) 4763.059 ops/s [Average]
  (min, avg, max) = (892298.107, 921569.616, 931680.286), stdev = 7129.124
  CI (99.9%): [916806.557, 926332.675] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws  thrpt   30  921569.616 ± 4763.059  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 720508.454 ops/s
# Warmup Iteration   2: 766104.174 ops/s
# Warmup Iteration   3: 1013508.929 ops/s
# Warmup Iteration   4: 1010819.886 ops/s
# Warmup Iteration   5: 1014656.534 ops/s
# Warmup Iteration   6: 1006982.121 ops/s
# Warmup Iteration   7: 1012708.948 ops/s
# Warmup Iteration   8: 1010058.846 ops/s
# Warmup Iteration   9: 1011888.008 ops/s
# Warmup Iteration  10: 1006328.298 ops/s
# Warmup Iteration  11: 848155.211 ops/s
# Warmup Iteration  12: 1012424.132 ops/s
# Warmup Iteration  13: 1009319.920 ops/s
# Warmup Iteration  14: 1002213.546 ops/s
# Warmup Iteration  15: 1006409.348 ops/s
# Warmup Iteration  16: 1010495.639 ops/s
# Warmup Iteration  17: 1076826.120 ops/s
# Warmup Iteration  18: 1071647.979 ops/s
# Warmup Iteration  19: 1072574.238 ops/s
# Warmup Iteration  20: 1072564.589 ops/s
# Warmup Iteration  21: 1061134.537 ops/s
# Warmup Iteration  22: 1072042.931 ops/s
# Warmup Iteration  23: 1058182.954 ops/s
# Warmup Iteration  24: 1071232.692 ops/s
# Warmup Iteration  25: 1069641.602 ops/s
# Warmup Iteration  26: 1065435.854 ops/s
# Warmup Iteration  27: 1074192.995 ops/s
# Warmup Iteration  28: 1064403.066 ops/s
# Warmup Iteration  29: 1069244.433 ops/s
# Warmup Iteration  30: 1067535.195 ops/s
Iteration   1: 1064588.146 ops/s
Iteration   2: 1070025.295 ops/s
Iteration   3: 1066828.856 ops/s
Iteration   4: 1073259.054 ops/s
Iteration   5: 1072478.569 ops/s
Iteration   6: 1063603.350 ops/s
Iteration   7: 1058083.615 ops/s
Iteration   8: 1057527.901 ops/s
Iteration   9: 1078882.121 ops/s
Iteration  10: 1075629.380 ops/s
Iteration  11: 1066998.062 ops/s
Iteration  12: 1075949.454 ops/s
Iteration  13: 1076208.447 ops/s
Iteration  14: 1071108.596 ops/s
Iteration  15: 1054384.055 ops/s
Iteration  16: 1053259.101 ops/s
Iteration  17: 1068388.360 ops/s
Iteration  18: 1075016.679 ops/s
Iteration  19: 1075034.383 ops/s
Iteration  20: 1069835.408 ops/s
Iteration  21: 1071654.909 ops/s
Iteration  22: 1069081.321 ops/s
Iteration  23: 1074429.050 ops/s
Iteration  24: 1072369.482 ops/s
Iteration  25: 1073227.922 ops/s
Iteration  26: 1077278.626 ops/s
Iteration  27: 1066610.796 ops/s
Iteration  28: 1067828.337 ops/s
Iteration  29: 1071607.370 ops/s
Iteration  30: 1077276.932 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList":
  1069615.119 ±(99.9%) 4517.931 ops/s [Average]
  (min, avg, max) = (1053259.101, 1069615.119, 1078882.121), stdev = 6762.226
  CI (99.9%): [1065097.189, 1074133.050] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1069615.119 ± 4517.931  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 624675.962 ops/s
# Warmup Iteration   2: 642363.179 ops/s
# Warmup Iteration   3: 847053.409 ops/s
# Warmup Iteration   4: 855502.414 ops/s
# Warmup Iteration   5: 860002.513 ops/s
# Warmup Iteration   6: 853606.315 ops/s
# Warmup Iteration   7: 854862.822 ops/s
# Warmup Iteration   8: 859044.803 ops/s
# Warmup Iteration   9: 855138.537 ops/s
# Warmup Iteration  10: 851090.076 ops/s
# Warmup Iteration  11: 859083.075 ops/s
# Warmup Iteration  12: 702280.504 ops/s
# Warmup Iteration  13: 857740.333 ops/s
# Warmup Iteration  14: 856855.791 ops/s
# Warmup Iteration  15: 860921.345 ops/s
# Warmup Iteration  16: 857783.282 ops/s
# Warmup Iteration  17: 902491.655 ops/s
# Warmup Iteration  18: 910613.395 ops/s
# Warmup Iteration  19: 903356.828 ops/s
# Warmup Iteration  20: 901847.029 ops/s
# Warmup Iteration  21: 905313.257 ops/s
# Warmup Iteration  22: 908115.988 ops/s
# Warmup Iteration  23: 898850.887 ops/s
# Warmup Iteration  24: 904271.638 ops/s
# Warmup Iteration  25: 904956.202 ops/s
# Warmup Iteration  26: 909094.188 ops/s
# Warmup Iteration  27: 895393.094 ops/s
# Warmup Iteration  28: 901650.580 ops/s
# Warmup Iteration  29: 907175.669 ops/s
# Warmup Iteration  30: 904223.718 ops/s
Iteration   1: 912776.639 ops/s
Iteration   2: 904008.928 ops/s
Iteration   3: 908515.527 ops/s
Iteration   4: 902499.012 ops/s
Iteration   5: 905951.773 ops/s
Iteration   6: 905201.235 ops/s
Iteration   7: 907397.436 ops/s
Iteration   8: 900324.499 ops/s
Iteration   9: 905042.199 ops/s
Iteration  10: 902544.128 ops/s
Iteration  11: 885826.232 ops/s
Iteration  12: 909013.458 ops/s
Iteration  13: 905910.378 ops/s
Iteration  14: 905452.168 ops/s
Iteration  15: 907164.530 ops/s
Iteration  16: 905200.639 ops/s
Iteration  17: 903414.826 ops/s
Iteration  18: 904953.888 ops/s
Iteration  19: 908631.172 ops/s
Iteration  20: 893248.910 ops/s
Iteration  21: 908858.058 ops/s
Iteration  22: 895799.218 ops/s
Iteration  23: 872253.131 ops/s
Iteration  24: 904216.359 ops/s
Iteration  25: 903911.084 ops/s
Iteration  26: 905021.521 ops/s
Iteration  27: 903435.217 ops/s
Iteration  28: 903215.779 ops/s
Iteration  29: 905748.357 ops/s
Iteration  30: 907505.743 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  903101.401 ±(99.9%) 5169.191 ops/s [Average]
  (min, avg, max) = (872253.131, 903101.401, 912776.639), stdev = 7737.003
  CI (99.9%): [897932.210, 908270.593] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt       Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  903101.401 ± 5169.191  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 694050.543 ops/s
# Warmup Iteration   2: 751409.986 ops/s
# Warmup Iteration   3: 985330.249 ops/s
# Warmup Iteration   4: 984139.371 ops/s
# Warmup Iteration   5: 981038.772 ops/s
# Warmup Iteration   6: 990012.369 ops/s
# Warmup Iteration   7: 987173.397 ops/s
# Warmup Iteration   8: 977864.296 ops/s
# Warmup Iteration   9: 981376.062 ops/s
# Warmup Iteration  10: 897435.921 ops/s
# Warmup Iteration  11: 897361.381 ops/s
# Warmup Iteration  12: 980781.531 ops/s
# Warmup Iteration  13: 977349.482 ops/s
# Warmup Iteration  14: 989528.181 ops/s
# Warmup Iteration  15: 987257.072 ops/s
# Warmup Iteration  16: 982776.300 ops/s
# Warmup Iteration  17: 1041391.001 ops/s
# Warmup Iteration  18: 1048955.069 ops/s
# Warmup Iteration  19: 1049362.055 ops/s
# Warmup Iteration  20: 1043423.807 ops/s
# Warmup Iteration  21: 1048557.321 ops/s
# Warmup Iteration  22: 1056503.101 ops/s
# Warmup Iteration  23: 1052709.618 ops/s
# Warmup Iteration  24: 1044088.327 ops/s
# Warmup Iteration  25: 1051719.597 ops/s
# Warmup Iteration  26: 1040975.035 ops/s
# Warmup Iteration  27: 1052155.777 ops/s
# Warmup Iteration  28: 1046269.054 ops/s
# Warmup Iteration  29: 1042103.613 ops/s
# Warmup Iteration  30: 1038332.728 ops/s
Iteration   1: 1050234.974 ops/s
Iteration   2: 1054390.032 ops/s
Iteration   3: 1037482.786 ops/s
Iteration   4: 1049916.035 ops/s
Iteration   5: 1045932.231 ops/s
Iteration   6: 1059739.242 ops/s
Iteration   7: 1052467.721 ops/s
Iteration   8: 1047637.741 ops/s
Iteration   9: 1057108.010 ops/s
Iteration  10: 1055075.806 ops/s
Iteration  11: 1056755.525 ops/s
Iteration  12: 1033278.586 ops/s
Iteration  13: 1052536.606 ops/s
Iteration  14: 1052342.451 ops/s
Iteration  15: 1047949.677 ops/s
Iteration  16: 1053321.081 ops/s
Iteration  17: 1056825.639 ops/s
Iteration  18: 1034290.981 ops/s
Iteration  19: 1047300.084 ops/s
Iteration  20: 1053844.776 ops/s
Iteration  21: 1051618.069 ops/s
Iteration  22: 1053110.583 ops/s
Iteration  23: 1052478.506 ops/s
Iteration  24: 1052431.491 ops/s
Iteration  25: 1057678.781 ops/s
Iteration  26: 1038466.177 ops/s
Iteration  27: 1054909.163 ops/s
Iteration  28: 1021668.312 ops/s
Iteration  29: 1053616.336 ops/s
Iteration  30: 1061494.244 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  1049863.388 ±(99.9%) 5859.997 ops/s [Average]
  (min, avg, max) = (1021668.312, 1049863.388, 1061494.244), stdev = 8770.968
  CI (99.9%): [1044003.392, 1055723.385] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                        Mode  Cnt        Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  1049863.388 ± 5859.997  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 687250.876 ops/s
# Warmup Iteration   2: 743620.576 ops/s
# Warmup Iteration   3: 977414.065 ops/s
# Warmup Iteration   4: 979249.044 ops/s
# Warmup Iteration   5: 976568.659 ops/s
# Warmup Iteration   6: 985320.812 ops/s
# Warmup Iteration   7: 979354.171 ops/s
# Warmup Iteration   8: 974578.774 ops/s
# Warmup Iteration   9: 969516.835 ops/s
# Warmup Iteration  10: 918063.849 ops/s
# Warmup Iteration  11: 892600.451 ops/s
# Warmup Iteration  12: 983627.766 ops/s
# Warmup Iteration  13: 982594.639 ops/s
# Warmup Iteration  14: 986461.259 ops/s
# Warmup Iteration  15: 974212.992 ops/s
# Warmup Iteration  16: 985710.614 ops/s
# Warmup Iteration  17: 1045030.978 ops/s
# Warmup Iteration  18: 1031875.021 ops/s
# Warmup Iteration  19: 1043732.177 ops/s
# Warmup Iteration  20: 1040965.712 ops/s
# Warmup Iteration  21: 1040591.525 ops/s
# Warmup Iteration  22: 1041999.739 ops/s
# Warmup Iteration  23: 1043010.447 ops/s
# Warmup Iteration  24: 1041011.464 ops/s
# Warmup Iteration  25: 1045126.938 ops/s
# Warmup Iteration  26: 1043071.167 ops/s
# Warmup Iteration  27: 1033484.303 ops/s
# Warmup Iteration  28: 1042253.017 ops/s
# Warmup Iteration  29: 1041824.928 ops/s
# Warmup Iteration  30: 1037325.631 ops/s
Iteration   1: 1027092.466 ops/s
Iteration   2: 1034177.657 ops/s
Iteration   3: 1030548.279 ops/s
Iteration   4: 1043417.590 ops/s
Iteration   5: 1037632.528 ops/s
Iteration   6: 1026905.599 ops/s
Iteration   7: 1036894.102 ops/s
Iteration   8: 1020498.570 ops/s
Iteration   9: 1040859.977 ops/s
Iteration  10: 1042717.028 ops/s
Iteration  11: 1043637.828 ops/s
Iteration  12: 1030205.674 ops/s
Iteration  13: 1036124.602 ops/s
Iteration  14: 1042060.408 ops/s
Iteration  15: 1041869.455 ops/s
Iteration  16: 1044853.029 ops/s
Iteration  17: 1045468.947 ops/s
Iteration  18: 1023821.882 ops/s
Iteration  19: 1044239.308 ops/s
Iteration  20: 1032194.891 ops/s
Iteration  21: 1039041.210 ops/s
Iteration  22: 1038953.374 ops/s
Iteration  23: 1040024.421 ops/s
Iteration  24: 1037908.283 ops/s
Iteration  25: 1045556.577 ops/s
Iteration  26: 1044951.508 ops/s
Iteration  27: 1035731.454 ops/s
Iteration  28: 1048087.270 ops/s
Iteration  29: 1043070.639 ops/s
Iteration  30: 1041461.490 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1038000.202 ±(99.9%) 4707.404 ops/s [Average]
  (min, avg, max) = (1020498.570, 1038000.202, 1048087.270), stdev = 7045.821
  CI (99.9%): [1033292.798, 1042707.605] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                        Mode  Cnt        Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1038000.202 ± 4707.404  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 468110.831 ops/s
# Warmup Iteration   2: 1005941.273 ops/s
# Warmup Iteration   3: 1113923.117 ops/s
# Warmup Iteration   4: 926391.781 ops/s
# Warmup Iteration   5: 1111071.920 ops/s
# Warmup Iteration   6: 1121112.174 ops/s
# Warmup Iteration   7: 1113132.365 ops/s
# Warmup Iteration   8: 1110571.106 ops/s
# Warmup Iteration   9: 1117116.015 ops/s
# Warmup Iteration  10: 1116618.923 ops/s
# Warmup Iteration  11: 1117846.046 ops/s
# Warmup Iteration  12: 1106097.689 ops/s
# Warmup Iteration  13: 1110488.963 ops/s
# Warmup Iteration  14: 1116189.584 ops/s
# Warmup Iteration  15: 1117747.289 ops/s
# Warmup Iteration  16: 1116820.019 ops/s
# Warmup Iteration  17: 1098833.376 ops/s
# Warmup Iteration  18: 1106534.860 ops/s
# Warmup Iteration  19: 1107413.349 ops/s
# Warmup Iteration  20: 1115956.062 ops/s
# Warmup Iteration  21: 1112574.761 ops/s
# Warmup Iteration  22: 1120065.907 ops/s
# Warmup Iteration  23: 1115434.826 ops/s
# Warmup Iteration  24: 1114847.155 ops/s
# Warmup Iteration  25: 1104902.408 ops/s
# Warmup Iteration  26: 1115001.497 ops/s
# Warmup Iteration  27: 1116465.775 ops/s
# Warmup Iteration  28: 1117530.641 ops/s
# Warmup Iteration  29: 1117872.320 ops/s
# Warmup Iteration  30: 1112807.419 ops/s
Iteration   1: 1114384.902 ops/s
Iteration   2: 1104854.755 ops/s
Iteration   3: 1115158.494 ops/s
Iteration   4: 1105356.049 ops/s
Iteration   5: 1115266.554 ops/s
Iteration   6: 1103420.247 ops/s
Iteration   7: 1117359.920 ops/s
Iteration   8: 1103576.812 ops/s
Iteration   9: 1111596.808 ops/s
Iteration  10: 1116377.523 ops/s
Iteration  11: 1117753.514 ops/s
Iteration  12: 1092511.829 ops/s
Iteration  13: 1112757.689 ops/s
Iteration  14: 1115527.091 ops/s
Iteration  15: 1115298.384 ops/s
Iteration  16: 1101129.166 ops/s
Iteration  17: 1109655.866 ops/s
Iteration  18: 1110769.245 ops/s
Iteration  19: 1115311.230 ops/s
Iteration  20: 1115208.033 ops/s
Iteration  21: 1120331.555 ops/s
Iteration  22: 1123481.891 ops/s
Iteration  23: 1083488.679 ops/s
Iteration  24: 1097885.961 ops/s
Iteration  25: 1109796.766 ops/s
Iteration  26: 1108122.227 ops/s
Iteration  27: 1099071.612 ops/s
Iteration  28: 1118488.889 ops/s
Iteration  29: 1090324.853 ops/s
Iteration  30: 1118036.830 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_makeString":
  1109410.112 ±(99.9%) 6380.503 ops/s [Average]
  (min, avg, max) = (1083488.679, 1109410.112, 1123481.891), stdev = 9550.038
  CI (99.9%): [1103029.609, 1115790.616] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_makeString  thrpt   30  1109410.112 ± 6380.503  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 164146132.696 ops/s
# Warmup Iteration   2: 299732725.337 ops/s
# Warmup Iteration   3: 233877804.865 ops/s
# Warmup Iteration   4: 271474979.016 ops/s
# Warmup Iteration   5: 271017671.538 ops/s
# Warmup Iteration   6: 273648534.744 ops/s
# Warmup Iteration   7: 274387302.738 ops/s
# Warmup Iteration   8: 270120215.312 ops/s
# Warmup Iteration   9: 273559992.240 ops/s
# Warmup Iteration  10: 269917952.254 ops/s
# Warmup Iteration  11: 272540101.425 ops/s
# Warmup Iteration  12: 270029317.710 ops/s
# Warmup Iteration  13: 272624608.876 ops/s
# Warmup Iteration  14: 272177989.212 ops/s
# Warmup Iteration  15: 272929976.334 ops/s
# Warmup Iteration  16: 273031536.609 ops/s
# Warmup Iteration  17: 269830716.792 ops/s
# Warmup Iteration  18: 270878924.395 ops/s
# Warmup Iteration  19: 271074055.484 ops/s
# Warmup Iteration  20: 270268958.087 ops/s
# Warmup Iteration  21: 270742191.113 ops/s
# Warmup Iteration  22: 270252830.977 ops/s
# Warmup Iteration  23: 270171381.750 ops/s
# Warmup Iteration  24: 265730015.390 ops/s
# Warmup Iteration  25: 267746039.689 ops/s
# Warmup Iteration  26: 265804467.642 ops/s
# Warmup Iteration  27: 268545138.632 ops/s
# Warmup Iteration  28: 269143289.789 ops/s
# Warmup Iteration  29: 269543391.945 ops/s
# Warmup Iteration  30: 269494867.329 ops/s
Iteration   1: 271457784.797 ops/s
Iteration   2: 265399224.017 ops/s
Iteration   3: 270485259.395 ops/s
Iteration   4: 267408760.498 ops/s
Iteration   5: 270789162.171 ops/s
Iteration   6: 270774295.199 ops/s
Iteration   7: 270697892.599 ops/s
Iteration   8: 270341600.366 ops/s
Iteration   9: 271638249.091 ops/s
Iteration  10: 271108407.793 ops/s
Iteration  11: 268216565.390 ops/s
Iteration  12: 270344210.943 ops/s
Iteration  13: 268528585.290 ops/s
Iteration  14: 264224046.869 ops/s
Iteration  15: 269784311.342 ops/s
Iteration  16: 271175763.772 ops/s
Iteration  17: 270758774.670 ops/s
Iteration  18: 263388126.501 ops/s
Iteration  19: 269021121.550 ops/s
Iteration  20: 270123569.198 ops/s
Iteration  21: 269199513.268 ops/s
Iteration  22: 270140674.621 ops/s
Iteration  23: 270466687.298 ops/s
Iteration  24: 270828452.057 ops/s
Iteration  25: 270611538.835 ops/s
Iteration  26: 269959052.309 ops/s
Iteration  27: 268710990.678 ops/s
Iteration  28: 271638278.597 ops/s
Iteration  29: 270392434.203 ops/s
Iteration  30: 270652540.172 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_newCollection":
  269608862.450 ±(99.9%) 1380294.955 ops/s [Average]
  (min, avg, max) = (263388126.501, 269608862.450, 271638278.597), stdev = 2065960.665
  CI (99.9%): [268228567.495, 270989157.404] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt          Score         Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_newCollection  thrpt   30  269608862.450 ± 1380294.955  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1050197.358 ops/s
# Warmup Iteration   2: 2486665.014 ops/s
# Warmup Iteration   3: 3299136.846 ops/s
# Warmup Iteration   4: 3951629.441 ops/s
# Warmup Iteration   5: 3934832.659 ops/s
# Warmup Iteration   6: 3947647.495 ops/s
# Warmup Iteration   7: 3953341.589 ops/s
# Warmup Iteration   8: 3888062.434 ops/s
# Warmup Iteration   9: 3912663.415 ops/s
# Warmup Iteration  10: 3941291.838 ops/s
# Warmup Iteration  11: 3895977.048 ops/s
# Warmup Iteration  12: 3956684.820 ops/s
# Warmup Iteration  13: 3963799.473 ops/s
# Warmup Iteration  14: 3960142.647 ops/s
# Warmup Iteration  15: 3905589.617 ops/s
# Warmup Iteration  16: 3954188.493 ops/s
# Warmup Iteration  17: 3906582.225 ops/s
# Warmup Iteration  18: 3959672.283 ops/s
# Warmup Iteration  19: 3954209.395 ops/s
# Warmup Iteration  20: 3934850.048 ops/s
# Warmup Iteration  21: 3943408.097 ops/s
# Warmup Iteration  22: 3937581.416 ops/s
# Warmup Iteration  23: 3933526.269 ops/s
# Warmup Iteration  24: 3892863.230 ops/s
# Warmup Iteration  25: 3918192.408 ops/s
# Warmup Iteration  26: 3917030.809 ops/s
# Warmup Iteration  27: 3895233.513 ops/s
# Warmup Iteration  28: 3883219.630 ops/s
# Warmup Iteration  29: 3950371.916 ops/s
# Warmup Iteration  30: 3930654.592 ops/s
Iteration   1: 3966894.890 ops/s
Iteration   2: 3910569.473 ops/s
Iteration   3: 3877675.146 ops/s
Iteration   4: 3932631.462 ops/s
Iteration   5: 3954315.312 ops/s
Iteration   6: 3939193.527 ops/s
Iteration   7: 3951951.303 ops/s
Iteration   8: 3952905.835 ops/s
Iteration   9: 3926437.348 ops/s
Iteration  10: 3947225.452 ops/s
Iteration  11: 3932016.205 ops/s
Iteration  12: 3929841.228 ops/s
Iteration  13: 3962765.688 ops/s
Iteration  14: 3954397.634 ops/s
Iteration  15: 3931431.114 ops/s
Iteration  16: 3912993.934 ops/s
Iteration  17: 3882848.604 ops/s
Iteration  18: 3928179.256 ops/s
Iteration  19: 3936718.131 ops/s
Iteration  20: 3954853.183 ops/s
Iteration  21: 3920755.095 ops/s
Iteration  22: 3919016.470 ops/s
Iteration  23: 3941185.844 ops/s
Iteration  24: 3951704.256 ops/s
Iteration  25: 3930099.233 ops/s
Iteration  26: 3946547.475 ops/s
Iteration  27: 3901163.131 ops/s
Iteration  28: 3921703.855 ops/s
Iteration  29: 3944986.545 ops/s
Iteration  30: 3935587.844 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith":
  3933286.482 ±(99.9%) 14274.091 ops/s [Average]
  (min, avg, max) = (3877675.146, 3933286.482, 3966894.890), stdev = 21364.789
  CI (99.9%): [3919012.391, 3947560.574] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith  thrpt   30  3933286.482 ± 14274.091  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 684180.812 ops/s
# Warmup Iteration   2: 1438273.302 ops/s
# Warmup Iteration   3: 1776340.197 ops/s
# Warmup Iteration   4: 1531799.636 ops/s
# Warmup Iteration   5: 1787145.143 ops/s
# Warmup Iteration   6: 1797368.419 ops/s
# Warmup Iteration   7: 1775762.835 ops/s
# Warmup Iteration   8: 1769996.211 ops/s
# Warmup Iteration   9: 1798773.346 ops/s
# Warmup Iteration  10: 1795380.982 ops/s
# Warmup Iteration  11: 1811082.825 ops/s
# Warmup Iteration  12: 1808208.900 ops/s
# Warmup Iteration  13: 1782766.332 ops/s
# Warmup Iteration  14: 1803925.566 ops/s
# Warmup Iteration  15: 1802520.634 ops/s
# Warmup Iteration  16: 1808275.330 ops/s
# Warmup Iteration  17: 1800216.824 ops/s
# Warmup Iteration  18: 1801424.252 ops/s
# Warmup Iteration  19: 1785554.743 ops/s
# Warmup Iteration  20: 1778512.065 ops/s
# Warmup Iteration  21: 1778416.754 ops/s
# Warmup Iteration  22: 1796435.130 ops/s
# Warmup Iteration  23: 1799646.139 ops/s
# Warmup Iteration  24: 1803020.359 ops/s
# Warmup Iteration  25: 1803709.253 ops/s
# Warmup Iteration  26: 1803014.408 ops/s
# Warmup Iteration  27: 1779904.754 ops/s
# Warmup Iteration  28: 1796170.938 ops/s
# Warmup Iteration  29: 1787254.431 ops/s
# Warmup Iteration  30: 1800194.720 ops/s
Iteration   1: 1812899.127 ops/s
Iteration   2: 1790862.560 ops/s
Iteration   3: 1787049.165 ops/s
Iteration   4: 1796597.910 ops/s
Iteration   5: 1795579.119 ops/s
Iteration   6: 1793593.493 ops/s
Iteration   7: 1786459.113 ops/s
Iteration   8: 1775530.057 ops/s
Iteration   9: 1802713.464 ops/s
Iteration  10: 1793758.474 ops/s
Iteration  11: 1782389.137 ops/s
Iteration  12: 1808805.784 ops/s
Iteration  13: 1807173.179 ops/s
Iteration  14: 1798964.342 ops/s
Iteration  15: 1795130.328 ops/s
Iteration  16: 1790756.242 ops/s
Iteration  17: 1760444.861 ops/s
Iteration  18: 1780197.861 ops/s
Iteration  19: 1791384.817 ops/s
Iteration  20: 1794802.414 ops/s
Iteration  21: 1754081.478 ops/s
Iteration  22: 1791808.631 ops/s
Iteration  23: 1790307.554 ops/s
Iteration  24: 1785200.147 ops/s
Iteration  25: 1755020.107 ops/s
Iteration  26: 1802529.397 ops/s
Iteration  27: 1797344.501 ops/s
Iteration  28: 1815177.048 ops/s
Iteration  29: 1806902.849 ops/s
Iteration  30: 1809904.631 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy":
  1791778.926 ±(99.9%) 10230.174 ops/s [Average]
  (min, avg, max) = (1754081.478, 1791778.926, 1815177.048), stdev = 15312.045
  CI (99.9%): [1781548.752, 1802009.101] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy  thrpt   30  1791778.926 ± 10230.174  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1962432.872 ops/s
# Warmup Iteration   2: 4280851.966 ops/s
# Warmup Iteration   3: 5335775.728 ops/s
# Warmup Iteration   4: 6308968.347 ops/s
# Warmup Iteration   5: 6281187.271 ops/s
# Warmup Iteration   6: 6314768.005 ops/s
# Warmup Iteration   7: 6322667.106 ops/s
# Warmup Iteration   8: 6283747.961 ops/s
# Warmup Iteration   9: 6317317.263 ops/s
# Warmup Iteration  10: 6236478.441 ops/s
# Warmup Iteration  11: 6272085.210 ops/s
# Warmup Iteration  12: 6256872.270 ops/s
# Warmup Iteration  13: 6300202.650 ops/s
# Warmup Iteration  14: 6254069.561 ops/s
# Warmup Iteration  15: 6296793.114 ops/s
# Warmup Iteration  16: 6240152.301 ops/s
# Warmup Iteration  17: 6319975.250 ops/s
# Warmup Iteration  18: 6308300.304 ops/s
# Warmup Iteration  19: 6307692.247 ops/s
# Warmup Iteration  20: 6326884.470 ops/s
# Warmup Iteration  21: 6310317.695 ops/s
# Warmup Iteration  22: 6327326.890 ops/s
# Warmup Iteration  23: 6295692.243 ops/s
# Warmup Iteration  24: 6313891.688 ops/s
# Warmup Iteration  25: 6332500.113 ops/s
# Warmup Iteration  26: 6270777.383 ops/s
# Warmup Iteration  27: 6319551.230 ops/s
# Warmup Iteration  28: 6283307.321 ops/s
# Warmup Iteration  29: 6279423.750 ops/s
# Warmup Iteration  30: 6300080.440 ops/s
Iteration   1: 6342707.612 ops/s
Iteration   2: 6345779.175 ops/s
Iteration   3: 6328518.401 ops/s
Iteration   4: 6305934.838 ops/s
Iteration   5: 6333389.088 ops/s
Iteration   6: 6360203.521 ops/s
Iteration   7: 6355363.619 ops/s
Iteration   8: 6273281.937 ops/s
Iteration   9: 6305790.164 ops/s
Iteration  10: 6315572.079 ops/s
Iteration  11: 6337863.827 ops/s
Iteration  12: 6225301.396 ops/s
Iteration  13: 6338431.407 ops/s
Iteration  14: 6278957.340 ops/s
Iteration  15: 6324504.818 ops/s
Iteration  16: 6306682.277 ops/s
Iteration  17: 6327666.539 ops/s
Iteration  18: 6345779.646 ops/s
Iteration  19: 6263239.177 ops/s
Iteration  20: 6223808.686 ops/s
Iteration  21: 6347192.638 ops/s
Iteration  22: 6298120.880 ops/s
Iteration  23: 6230863.992 ops/s
Iteration  24: 6234710.716 ops/s
Iteration  25: 6203209.998 ops/s
Iteration  26: 6315663.349 ops/s
Iteration  27: 6260792.324 ops/s
Iteration  28: 6248913.168 ops/s
Iteration  29: 6234763.330 ops/s
Iteration  30: 6320425.030 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_notEmpty":
  6297781.032 ±(99.9%) 31070.366 ops/s [Average]
  (min, avg, max) = (6203209.998, 6297781.032, 6360203.521), stdev = 46504.664
  CI (99.9%): [6266710.666, 6328851.398] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_notEmpty  thrpt   30  6297781.032 ± 31070.366  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 997077.240 ops/s
# Warmup Iteration   2: 2264365.879 ops/s
# Warmup Iteration   3: 2451669.595 ops/s
# Warmup Iteration   4: 2440014.649 ops/s
# Warmup Iteration   5: 2673145.221 ops/s
# Warmup Iteration   6: 2648168.607 ops/s
# Warmup Iteration   7: 2657998.569 ops/s
# Warmup Iteration   8: 2647760.407 ops/s
# Warmup Iteration   9: 2660328.003 ops/s
# Warmup Iteration  10: 2653124.868 ops/s
# Warmup Iteration  11: 2694076.019 ops/s
# Warmup Iteration  12: 2667838.593 ops/s
# Warmup Iteration  13: 2680830.858 ops/s
# Warmup Iteration  14: 2680275.438 ops/s
# Warmup Iteration  15: 2676379.992 ops/s
# Warmup Iteration  16: 2670017.181 ops/s
# Warmup Iteration  17: 2694033.448 ops/s
# Warmup Iteration  18: 2686504.891 ops/s
# Warmup Iteration  19: 2690189.567 ops/s
# Warmup Iteration  20: 2672472.024 ops/s
# Warmup Iteration  21: 2667669.572 ops/s
# Warmup Iteration  22: 2693152.629 ops/s
# Warmup Iteration  23: 2694929.550 ops/s
# Warmup Iteration  24: 2694699.449 ops/s
# Warmup Iteration  25: 2691290.920 ops/s
# Warmup Iteration  26: 2674285.043 ops/s
# Warmup Iteration  27: 2698379.473 ops/s
# Warmup Iteration  28: 2678701.292 ops/s
# Warmup Iteration  29: 2667226.019 ops/s
# Warmup Iteration  30: 2676644.420 ops/s
Iteration   1: 2686826.407 ops/s
Iteration   2: 2677430.793 ops/s
Iteration   3: 2691448.472 ops/s
Iteration   4: 2687426.271 ops/s
Iteration   5: 2673185.467 ops/s
Iteration   6: 2663358.844 ops/s
Iteration   7: 2693456.525 ops/s
Iteration   8: 2683477.427 ops/s
Iteration   9: 2688671.207 ops/s
Iteration  10: 2675870.100 ops/s
Iteration  11: 2701835.167 ops/s
Iteration  12: 2685808.233 ops/s
Iteration  13: 2686193.748 ops/s
Iteration  14: 2643715.602 ops/s
Iteration  15: 2677625.409 ops/s
Iteration  16: 2685868.413 ops/s
Iteration  17: 2683295.516 ops/s
Iteration  18: 2674931.351 ops/s
Iteration  19: 2632675.250 ops/s
Iteration  20: 2694862.359 ops/s
Iteration  21: 2685619.888 ops/s
Iteration  22: 2652534.629 ops/s
Iteration  23: 2697097.740 ops/s
Iteration  24: 2697401.315 ops/s
Iteration  25: 2694773.779 ops/s
Iteration  26: 2687610.870 ops/s
Iteration  27: 2675218.756 ops/s
Iteration  28: 2689188.122 ops/s
Iteration  29: 2687376.711 ops/s
Iteration  30: 2662560.707 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_reduce":
  2680578.169 ±(99.9%) 10646.404 ops/s [Average]
  (min, avg, max) = (2632675.250, 2680578.169, 2701835.167), stdev = 15935.037
  CI (99.9%): [2669931.766, 2691224.573] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_reduce  thrpt   30  2680578.169 ± 10646.404  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 580972.204 ops/s
# Warmup Iteration   2: 1262755.678 ops/s
# Warmup Iteration   3: 1522809.935 ops/s
# Warmup Iteration   4: 1274783.983 ops/s
# Warmup Iteration   5: 1525395.334 ops/s
# Warmup Iteration   6: 1539751.907 ops/s
# Warmup Iteration   7: 1536312.127 ops/s
# Warmup Iteration   8: 1524764.897 ops/s
# Warmup Iteration   9: 1533858.427 ops/s
# Warmup Iteration  10: 1540703.693 ops/s
# Warmup Iteration  11: 1541699.578 ops/s
# Warmup Iteration  12: 1537620.874 ops/s
# Warmup Iteration  13: 1534198.168 ops/s
# Warmup Iteration  14: 1539444.689 ops/s
# Warmup Iteration  15: 1532964.311 ops/s
# Warmup Iteration  16: 1532473.712 ops/s
# Warmup Iteration  17: 1531519.009 ops/s
# Warmup Iteration  18: 1534932.643 ops/s
# Warmup Iteration  19: 1532288.737 ops/s
# Warmup Iteration  20: 1518095.256 ops/s
# Warmup Iteration  21: 1536227.688 ops/s
# Warmup Iteration  22: 1526371.074 ops/s
# Warmup Iteration  23: 1527175.054 ops/s
# Warmup Iteration  24: 1523125.339 ops/s
# Warmup Iteration  25: 1531814.265 ops/s
# Warmup Iteration  26: 1541525.379 ops/s
# Warmup Iteration  27: 1540077.797 ops/s
# Warmup Iteration  28: 1500542.444 ops/s
# Warmup Iteration  29: 1541237.993 ops/s
# Warmup Iteration  30: 1544474.625 ops/s
Iteration   1: 1513218.849 ops/s
Iteration   2: 1533819.163 ops/s
Iteration   3: 1544858.475 ops/s
Iteration   4: 1534562.876 ops/s
Iteration   5: 1541678.528 ops/s
Iteration   6: 1536446.907 ops/s
Iteration   7: 1516884.954 ops/s
Iteration   8: 1547675.135 ops/s
Iteration   9: 1543494.127 ops/s
Iteration  10: 1517766.557 ops/s
Iteration  11: 1540205.308 ops/s
Iteration  12: 1539970.821 ops/s
Iteration  13: 1543432.645 ops/s
Iteration  14: 1530691.308 ops/s
Iteration  15: 1543825.873 ops/s
Iteration  16: 1546155.172 ops/s
Iteration  17: 1532870.564 ops/s
Iteration  18: 1542847.741 ops/s
Iteration  19: 1545741.269 ops/s
Iteration  20: 1546016.457 ops/s
Iteration  21: 1547816.423 ops/s
Iteration  22: 1546574.909 ops/s
Iteration  23: 1540162.175 ops/s
Iteration  24: 1531992.626 ops/s
Iteration  25: 1536553.471 ops/s
Iteration  26: 1545162.101 ops/s
Iteration  27: 1536663.459 ops/s
Iteration  28: 1518619.169 ops/s
Iteration  29: 1535817.729 ops/s
Iteration  30: 1542336.942 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty":
  1537462.058 ±(99.9%) 6456.026 ops/s [Average]
  (min, avg, max) = (1513218.849, 1537462.058, 1547816.423), stdev = 9663.076
  CI (99.9%): [1531006.032, 1543918.083] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  1537462.058 ± 6456.026  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 673239.481 ops/s
# Warmup Iteration   2: 694223.003 ops/s
# Warmup Iteration   3: 923953.072 ops/s
# Warmup Iteration   4: 922876.585 ops/s
# Warmup Iteration   5: 926208.649 ops/s
# Warmup Iteration   6: 922882.964 ops/s
# Warmup Iteration   7: 932018.263 ops/s
# Warmup Iteration   8: 929804.977 ops/s
# Warmup Iteration   9: 933367.023 ops/s
# Warmup Iteration  10: 930769.087 ops/s
# Warmup Iteration  11: 839907.767 ops/s
# Warmup Iteration  12: 867733.912 ops/s
# Warmup Iteration  13: 932360.235 ops/s
# Warmup Iteration  14: 921926.880 ops/s
# Warmup Iteration  15: 933332.246 ops/s
# Warmup Iteration  16: 928130.022 ops/s
# Warmup Iteration  17: 983479.098 ops/s
# Warmup Iteration  18: 980189.926 ops/s
# Warmup Iteration  19: 972762.236 ops/s
# Warmup Iteration  20: 982774.091 ops/s
# Warmup Iteration  21: 984033.455 ops/s
# Warmup Iteration  22: 981631.302 ops/s
# Warmup Iteration  23: 984702.591 ops/s
# Warmup Iteration  24: 972732.433 ops/s
# Warmup Iteration  25: 984837.301 ops/s
# Warmup Iteration  26: 984459.019 ops/s
# Warmup Iteration  27: 979491.643 ops/s
# Warmup Iteration  28: 986619.847 ops/s
# Warmup Iteration  29: 979699.897 ops/s
# Warmup Iteration  30: 987540.801 ops/s
Iteration   1: 985713.641 ops/s
Iteration   2: 983445.160 ops/s
Iteration   3: 980764.335 ops/s
Iteration   4: 981883.665 ops/s
Iteration   5: 978468.160 ops/s
Iteration   6: 983821.354 ops/s
Iteration   7: 986065.006 ops/s
Iteration   8: 977804.607 ops/s
Iteration   9: 983154.702 ops/s
Iteration  10: 980057.923 ops/s
Iteration  11: 986462.730 ops/s
Iteration  12: 978058.342 ops/s
Iteration  13: 982750.136 ops/s
Iteration  14: 987165.346 ops/s
Iteration  15: 978846.697 ops/s
Iteration  16: 976225.078 ops/s
Iteration  17: 985369.301 ops/s
Iteration  18: 979366.278 ops/s
Iteration  19: 975408.071 ops/s
Iteration  20: 982293.561 ops/s
Iteration  21: 984511.780 ops/s
Iteration  22: 982371.849 ops/s
Iteration  23: 986093.619 ops/s
Iteration  24: 985860.458 ops/s
Iteration  25: 982860.982 ops/s
Iteration  26: 970933.397 ops/s
Iteration  27: 985346.923 ops/s
Iteration  28: 988184.211 ops/s
Iteration  29: 988465.265 ops/s
Iteration  30: 980977.504 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows":
  982291.003 ±(99.9%) 2750.029 ops/s [Average]
  (min, avg, max) = (970933.397, 982291.003, 988465.265), stdev = 4116.115
  CI (99.9%): [979540.973, 985041.032] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  982291.003 ± 2750.029  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3470257.922 ops/s
# Warmup Iteration   2: 7506505.639 ops/s
# Warmup Iteration   3: 7351319.861 ops/s
# Warmup Iteration   4: 8521448.044 ops/s
# Warmup Iteration   5: 8785365.939 ops/s
# Warmup Iteration   6: 8734762.492 ops/s
# Warmup Iteration   7: 8801171.891 ops/s
# Warmup Iteration   8: 8727044.710 ops/s
# Warmup Iteration   9: 8762396.907 ops/s
# Warmup Iteration  10: 8746677.383 ops/s
# Warmup Iteration  11: 8728823.670 ops/s
# Warmup Iteration  12: 8724311.941 ops/s
# Warmup Iteration  13: 8628579.313 ops/s
# Warmup Iteration  14: 8719590.603 ops/s
# Warmup Iteration  15: 8681819.333 ops/s
# Warmup Iteration  16: 8748972.218 ops/s
# Warmup Iteration  17: 8772552.071 ops/s
# Warmup Iteration  18: 8764214.251 ops/s
# Warmup Iteration  19: 8720706.570 ops/s
# Warmup Iteration  20: 8798692.963 ops/s
# Warmup Iteration  21: 8736695.421 ops/s
# Warmup Iteration  22: 8751378.314 ops/s
# Warmup Iteration  23: 8734680.380 ops/s
# Warmup Iteration  24: 8745500.673 ops/s
# Warmup Iteration  25: 8731882.946 ops/s
# Warmup Iteration  26: 8757443.772 ops/s
# Warmup Iteration  27: 8779442.480 ops/s
# Warmup Iteration  28: 8710513.718 ops/s
# Warmup Iteration  29: 8667957.785 ops/s
# Warmup Iteration  30: 8762570.666 ops/s
Iteration   1: 8800462.823 ops/s
Iteration   2: 8774525.915 ops/s
Iteration   3: 8750800.827 ops/s
Iteration   4: 8821739.531 ops/s
Iteration   5: 8769074.311 ops/s
Iteration   6: 8650715.299 ops/s
Iteration   7: 8771867.624 ops/s
Iteration   8: 8794780.242 ops/s
Iteration   9: 8631384.799 ops/s
Iteration  10: 8743209.231 ops/s
Iteration  11: 8665685.879 ops/s
Iteration  12: 8803219.066 ops/s
Iteration  13: 8732291.418 ops/s
Iteration  14: 8808854.510 ops/s
Iteration  15: 8755121.786 ops/s
Iteration  16: 8747259.430 ops/s
Iteration  17: 8754967.106 ops/s
Iteration  18: 8749016.462 ops/s
Iteration  19: 8757986.519 ops/s
Iteration  20: 8741167.312 ops/s
Iteration  21: 8597012.362 ops/s
Iteration  22: 8743500.031 ops/s
Iteration  23: 8756526.046 ops/s
Iteration  24: 8774554.567 ops/s
Iteration  25: 8756356.806 ops/s
Iteration  26: 8683899.840 ops/s
Iteration  27: 8703806.396 ops/s
Iteration  28: 8716145.954 ops/s
Iteration  29: 8669549.798 ops/s
Iteration  30: 8715120.944 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_reject":
  8738020.095 ±(99.9%) 36000.626 ops/s [Average]
  (min, avg, max) = (8597012.362, 8738020.095, 8821739.531), stdev = 53884.046
  CI (99.9%): [8702019.469, 8774020.720] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_reject  thrpt   30  8738020.095 ± 36000.626  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4970473.844 ops/s
# Warmup Iteration   2: 9028336.371 ops/s
# Warmup Iteration   3: 9453429.057 ops/s
# Warmup Iteration   4: 9494605.971 ops/s
# Warmup Iteration   5: 7870898.283 ops/s
# Warmup Iteration   6: 9578082.837 ops/s
# Warmup Iteration   7: 9504095.544 ops/s
# Warmup Iteration   8: 9556525.959 ops/s
# Warmup Iteration   9: 9539631.883 ops/s
# Warmup Iteration  10: 9540501.473 ops/s
# Warmup Iteration  11: 9456019.289 ops/s
# Warmup Iteration  12: 9498771.181 ops/s
# Warmup Iteration  13: 9544637.961 ops/s
# Warmup Iteration  14: 9509097.001 ops/s
# Warmup Iteration  15: 9512283.017 ops/s
# Warmup Iteration  16: 9536478.978 ops/s
# Warmup Iteration  17: 9561758.683 ops/s
# Warmup Iteration  18: 9493450.384 ops/s
# Warmup Iteration  19: 9544255.809 ops/s
# Warmup Iteration  20: 9524139.708 ops/s
# Warmup Iteration  21: 9486571.869 ops/s
# Warmup Iteration  22: 9551078.312 ops/s
# Warmup Iteration  23: 9571190.328 ops/s
# Warmup Iteration  24: 9557145.207 ops/s
# Warmup Iteration  25: 9532755.175 ops/s
# Warmup Iteration  26: 9421479.787 ops/s
# Warmup Iteration  27: 9486395.245 ops/s
# Warmup Iteration  28: 9515287.528 ops/s
# Warmup Iteration  29: 9545131.438 ops/s
# Warmup Iteration  30: 9532783.476 ops/s
Iteration   1: 9554364.346 ops/s
Iteration   2: 9579933.481 ops/s
Iteration   3: 9376792.198 ops/s
Iteration   4: 9488156.533 ops/s
Iteration   5: 9403615.749 ops/s
Iteration   6: 9569252.662 ops/s
Iteration   7: 9570677.299 ops/s
Iteration   8: 9515712.450 ops/s
Iteration   9: 9598521.663 ops/s
Iteration  10: 9507525.969 ops/s
Iteration  11: 9586316.780 ops/s
Iteration  12: 9553721.231 ops/s
Iteration  13: 9559680.560 ops/s
Iteration  14: 9570193.962 ops/s
Iteration  15: 9563847.215 ops/s
Iteration  16: 9579682.198 ops/s
Iteration  17: 9432122.049 ops/s
Iteration  18: 9373489.592 ops/s
Iteration  19: 9514197.011 ops/s
Iteration  20: 9578867.924 ops/s
Iteration  21: 9587727.993 ops/s
Iteration  22: 9563090.835 ops/s
Iteration  23: 9547336.992 ops/s
Iteration  24: 9581143.099 ops/s
Iteration  25: 9576558.946 ops/s
Iteration  26: 9591535.551 ops/s
Iteration  27: 9509071.674 ops/s
Iteration  28: 9569177.094 ops/s
Iteration  29: 9570807.179 ops/s
Iteration  30: 9514955.964 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_remove":
  9536269.207 ±(99.9%) 42150.278 ops/s [Average]
  (min, avg, max) = (9373489.592, 9536269.207, 9598521.663), stdev = 63088.556
  CI (99.9%): [9494118.929, 9578419.484] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_remove  thrpt   30  9536269.207 ± 42150.278  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1336337.664 ops/s
# Warmup Iteration   2: 3004399.853 ops/s
# Warmup Iteration   3: 3025163.038 ops/s
# Warmup Iteration   4: 2532130.880 ops/s
# Warmup Iteration   5: 3057727.365 ops/s
# Warmup Iteration   6: 3064895.698 ops/s
# Warmup Iteration   7: 3067668.819 ops/s
# Warmup Iteration   8: 3051662.969 ops/s
# Warmup Iteration   9: 3020185.677 ops/s
# Warmup Iteration  10: 3070721.423 ops/s
# Warmup Iteration  11: 3037911.628 ops/s
# Warmup Iteration  12: 3050860.990 ops/s
# Warmup Iteration  13: 3068845.182 ops/s
# Warmup Iteration  14: 3068542.998 ops/s
# Warmup Iteration  15: 3035876.385 ops/s
# Warmup Iteration  16: 3051330.390 ops/s
# Warmup Iteration  17: 3048963.185 ops/s
# Warmup Iteration  18: 3062907.257 ops/s
# Warmup Iteration  19: 3056798.500 ops/s
# Warmup Iteration  20: 3030962.878 ops/s
# Warmup Iteration  21: 3068411.591 ops/s
# Warmup Iteration  22: 3052487.766 ops/s
# Warmup Iteration  23: 3070957.438 ops/s
# Warmup Iteration  24: 3059889.397 ops/s
# Warmup Iteration  25: 3058152.166 ops/s
# Warmup Iteration  26: 3069576.372 ops/s
# Warmup Iteration  27: 3060246.401 ops/s
# Warmup Iteration  28: 3033538.668 ops/s
# Warmup Iteration  29: 3072564.087 ops/s
# Warmup Iteration  30: 3054322.875 ops/s
Iteration   1: 3064884.480 ops/s
Iteration   2: 3059197.010 ops/s
Iteration   3: 3076953.361 ops/s
Iteration   4: 3066362.913 ops/s
Iteration   5: 3022739.043 ops/s
Iteration   6: 3057175.641 ops/s
Iteration   7: 3069425.167 ops/s
Iteration   8: 2945492.453 ops/s
Iteration   9: 3070889.201 ops/s
Iteration  10: 3074374.163 ops/s
Iteration  11: 3029737.666 ops/s
Iteration  12: 3066741.383 ops/s
Iteration  13: 3064379.418 ops/s
Iteration  14: 3076755.321 ops/s
Iteration  15: 3062519.898 ops/s
Iteration  16: 3069407.962 ops/s
Iteration  17: 3072743.547 ops/s
Iteration  18: 3050893.590 ops/s
Iteration  19: 3066015.049 ops/s
Iteration  20: 3064518.992 ops/s
Iteration  21: 3066629.744 ops/s
Iteration  22: 3057329.957 ops/s
Iteration  23: 3074382.699 ops/s
Iteration  24: 3062169.594 ops/s
Iteration  25: 3049698.201 ops/s
Iteration  26: 3065446.516 ops/s
Iteration  27: 3039655.952 ops/s
Iteration  28: 3058291.219 ops/s
Iteration  29: 3077458.915 ops/s
Iteration  30: 3064979.367 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_removeAll":
  3058241.614 ±(99.9%) 16638.107 ops/s [Average]
  (min, avg, max) = (2945492.453, 3058241.614, 3077458.915), stdev = 24903.137
  CI (99.9%): [3041603.507, 3074879.721] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_removeAll  thrpt   30  3058241.614 ± 16638.107  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1079532.858 ops/s
# Warmup Iteration   2: 2511692.861 ops/s
# Warmup Iteration   3: 2523731.289 ops/s
# Warmup Iteration   4: 2092198.183 ops/s
# Warmup Iteration   5: 2518712.329 ops/s
# Warmup Iteration   6: 2520620.997 ops/s
# Warmup Iteration   7: 2468376.310 ops/s
# Warmup Iteration   8: 2520545.246 ops/s
# Warmup Iteration   9: 2529349.438 ops/s
# Warmup Iteration  10: 2526363.817 ops/s
# Warmup Iteration  11: 2529210.067 ops/s
# Warmup Iteration  12: 2521473.443 ops/s
# Warmup Iteration  13: 2512192.036 ops/s
# Warmup Iteration  14: 2510770.792 ops/s
# Warmup Iteration  15: 2506715.322 ops/s
# Warmup Iteration  16: 2481395.860 ops/s
# Warmup Iteration  17: 2508668.275 ops/s
# Warmup Iteration  18: 2524549.354 ops/s
# Warmup Iteration  19: 2524284.303 ops/s
# Warmup Iteration  20: 2526518.985 ops/s
# Warmup Iteration  21: 2530906.193 ops/s
# Warmup Iteration  22: 2488079.414 ops/s
# Warmup Iteration  23: 2525003.248 ops/s
# Warmup Iteration  24: 2512215.906 ops/s
# Warmup Iteration  25: 2535375.711 ops/s
# Warmup Iteration  26: 2520692.990 ops/s
# Warmup Iteration  27: 2507801.362 ops/s
# Warmup Iteration  28: 2533477.813 ops/s
# Warmup Iteration  29: 2531287.577 ops/s
# Warmup Iteration  30: 2537409.480 ops/s
Iteration   1: 2516815.438 ops/s
Iteration   2: 2525588.479 ops/s
Iteration   3: 2525225.176 ops/s
Iteration   4: 2529812.807 ops/s
Iteration   5: 2533459.118 ops/s
Iteration   6: 2525712.815 ops/s
Iteration   7: 2506935.749 ops/s
Iteration   8: 2521278.646 ops/s
Iteration   9: 2484387.423 ops/s
Iteration  10: 2500878.690 ops/s
Iteration  11: 2507937.760 ops/s
Iteration  12: 2529508.009 ops/s
Iteration  13: 2526749.699 ops/s
Iteration  14: 2524841.877 ops/s
Iteration  15: 2529980.312 ops/s
Iteration  16: 2526455.879 ops/s
Iteration  17: 2488840.115 ops/s
Iteration  18: 2501086.601 ops/s
Iteration  19: 2539902.641 ops/s
Iteration  20: 2517039.535 ops/s
Iteration  21: 2510927.967 ops/s
Iteration  22: 2471461.080 ops/s
Iteration  23: 2520013.678 ops/s
Iteration  24: 2522462.971 ops/s
Iteration  25: 2515604.146 ops/s
Iteration  26: 2526411.655 ops/s
Iteration  27: 2528382.052 ops/s
Iteration  28: 2508870.656 ops/s
Iteration  29: 2519983.459 ops/s
Iteration  30: 2491401.450 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable":
  2515931.863 ±(99.9%) 10661.688 ops/s [Average]
  (min, avg, max) = (2471461.080, 2515931.863, 2539902.641), stdev = 15957.914
  CI (99.9%): [2505270.175, 2526593.551] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  2515931.863 ± 10661.688  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 598013.597 ops/s
# Warmup Iteration   2: 1289779.672 ops/s
# Warmup Iteration   3: 1388951.388 ops/s
# Warmup Iteration   4: 1200223.682 ops/s
# Warmup Iteration   5: 1350926.669 ops/s
# Warmup Iteration   6: 1393365.490 ops/s
# Warmup Iteration   7: 1394906.540 ops/s
# Warmup Iteration   8: 1389538.226 ops/s
# Warmup Iteration   9: 1397629.858 ops/s
# Warmup Iteration  10: 1391049.271 ops/s
# Warmup Iteration  11: 1389284.560 ops/s
# Warmup Iteration  12: 1390184.412 ops/s
# Warmup Iteration  13: 1385641.474 ops/s
# Warmup Iteration  14: 1389647.286 ops/s
# Warmup Iteration  15: 1394290.450 ops/s
# Warmup Iteration  16: 1391754.479 ops/s
# Warmup Iteration  17: 1394141.803 ops/s
# Warmup Iteration  18: 1387819.503 ops/s
# Warmup Iteration  19: 1384668.237 ops/s
# Warmup Iteration  20: 1391796.863 ops/s
# Warmup Iteration  21: 1392323.136 ops/s
# Warmup Iteration  22: 1393434.149 ops/s
# Warmup Iteration  23: 1389539.485 ops/s
# Warmup Iteration  24: 1392718.852 ops/s
# Warmup Iteration  25: 1396563.758 ops/s
# Warmup Iteration  26: 1400999.249 ops/s
# Warmup Iteration  27: 1394915.149 ops/s
# Warmup Iteration  28: 1395217.345 ops/s
# Warmup Iteration  29: 1398029.840 ops/s
# Warmup Iteration  30: 1389678.754 ops/s
Iteration   1: 1392811.057 ops/s
Iteration   2: 1391519.552 ops/s
Iteration   3: 1395053.551 ops/s
Iteration   4: 1388415.926 ops/s
Iteration   5: 1396407.997 ops/s
Iteration   6: 1393373.480 ops/s
Iteration   7: 1394809.122 ops/s
Iteration   8: 1393531.607 ops/s
Iteration   9: 1396227.937 ops/s
Iteration  10: 1397022.780 ops/s
Iteration  11: 1399789.979 ops/s
Iteration  12: 1393235.381 ops/s
Iteration  13: 1393068.064 ops/s
Iteration  14: 1386424.212 ops/s
Iteration  15: 1386174.773 ops/s
Iteration  16: 1386962.847 ops/s
Iteration  17: 1387515.632 ops/s
Iteration  18: 1389832.776 ops/s
Iteration  19: 1377595.025 ops/s
Iteration  20: 1385791.503 ops/s
Iteration  21: 1386697.782 ops/s
Iteration  22: 1387969.078 ops/s
Iteration  23: 1381095.400 ops/s
Iteration  24: 1386062.737 ops/s
Iteration  25: 1382503.734 ops/s
Iteration  26: 1395072.241 ops/s
Iteration  27: 1385211.458 ops/s
Iteration  28: 1392380.901 ops/s
Iteration  29: 1385379.240 ops/s
Iteration  30: 1387324.658 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_retainAll":
  1389842.014 ±(99.9%) 3492.997 ops/s [Average]
  (min, avg, max) = (1377595.025, 1389842.014, 1399789.979), stdev = 5228.153
  CI (99.9%): [1386349.018, 1393335.011] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_retainAll  thrpt   30  1389842.014 ± 3492.997  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 446849.717 ops/s
# Warmup Iteration   2: 883801.037 ops/s
# Warmup Iteration   3: 929120.359 ops/s
# Warmup Iteration   4: 940192.110 ops/s
# Warmup Iteration   5: 781224.513 ops/s
# Warmup Iteration   6: 941773.376 ops/s
# Warmup Iteration   7: 927636.726 ops/s
# Warmup Iteration   8: 942055.414 ops/s
# Warmup Iteration   9: 931469.457 ops/s
# Warmup Iteration  10: 943351.440 ops/s
# Warmup Iteration  11: 943567.043 ops/s
# Warmup Iteration  12: 932174.469 ops/s
# Warmup Iteration  13: 941998.895 ops/s
# Warmup Iteration  14: 940599.682 ops/s
# Warmup Iteration  15: 940410.305 ops/s
# Warmup Iteration  16: 941987.402 ops/s
# Warmup Iteration  17: 941521.780 ops/s
# Warmup Iteration  18: 940031.394 ops/s
# Warmup Iteration  19: 934504.446 ops/s
# Warmup Iteration  20: 939847.046 ops/s
# Warmup Iteration  21: 941862.891 ops/s
# Warmup Iteration  22: 940906.548 ops/s
# Warmup Iteration  23: 936403.926 ops/s
# Warmup Iteration  24: 938033.418 ops/s
# Warmup Iteration  25: 942993.544 ops/s
# Warmup Iteration  26: 939866.103 ops/s
# Warmup Iteration  27: 942847.004 ops/s
# Warmup Iteration  28: 938759.418 ops/s
# Warmup Iteration  29: 942698.862 ops/s
# Warmup Iteration  30: 944200.323 ops/s
Iteration   1: 935626.849 ops/s
Iteration   2: 936371.134 ops/s
Iteration   3: 944835.335 ops/s
Iteration   4: 937314.812 ops/s
Iteration   5: 935967.455 ops/s
Iteration   6: 941934.571 ops/s
Iteration   7: 945082.473 ops/s
Iteration   8: 942603.552 ops/s
Iteration   9: 941908.930 ops/s
Iteration  10: 940002.157 ops/s
Iteration  11: 942784.979 ops/s
Iteration  12: 924648.784 ops/s
Iteration  13: 944847.563 ops/s
Iteration  14: 941657.933 ops/s
Iteration  15: 944007.950 ops/s
Iteration  16: 941498.469 ops/s
Iteration  17: 941190.332 ops/s
Iteration  18: 941909.026 ops/s
Iteration  19: 927800.264 ops/s
Iteration  20: 940971.981 ops/s
Iteration  21: 945623.352 ops/s
Iteration  22: 943019.146 ops/s
Iteration  23: 942523.219 ops/s
Iteration  24: 939239.583 ops/s
Iteration  25: 942540.154 ops/s
Iteration  26: 942859.360 ops/s
Iteration  27: 943695.008 ops/s
Iteration  28: 939136.914 ops/s
Iteration  29: 924018.281 ops/s
Iteration  30: 930332.095 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable":
  939531.722 ±(99.9%) 3885.780 ops/s [Average]
  (min, avg, max) = (924018.281, 939531.722, 945623.352), stdev = 5816.053
  CI (99.9%): [935645.942, 943417.502] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  939531.722 ± 3885.780  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3408015.806 ops/s
# Warmup Iteration   2: 7409479.805 ops/s
# Warmup Iteration   3: 7474292.160 ops/s
# Warmup Iteration   4: 8907426.300 ops/s
# Warmup Iteration   5: 8783108.578 ops/s
# Warmup Iteration   6: 8902703.365 ops/s
# Warmup Iteration   7: 8840304.965 ops/s
# Warmup Iteration   8: 8960697.885 ops/s
# Warmup Iteration   9: 8941387.062 ops/s
# Warmup Iteration  10: 8880193.599 ops/s
# Warmup Iteration  11: 8895720.907 ops/s
# Warmup Iteration  12: 8871749.025 ops/s
# Warmup Iteration  13: 8847496.301 ops/s
# Warmup Iteration  14: 8938393.667 ops/s
# Warmup Iteration  15: 8940251.424 ops/s
# Warmup Iteration  16: 8951940.059 ops/s
# Warmup Iteration  17: 8876173.919 ops/s
# Warmup Iteration  18: 8949325.056 ops/s
# Warmup Iteration  19: 8877501.674 ops/s
# Warmup Iteration  20: 8852654.632 ops/s
# Warmup Iteration  21: 8953091.640 ops/s
# Warmup Iteration  22: 8860056.657 ops/s
# Warmup Iteration  23: 8812358.931 ops/s
# Warmup Iteration  24: 8932516.587 ops/s
# Warmup Iteration  25: 8874402.298 ops/s
# Warmup Iteration  26: 8865772.898 ops/s
# Warmup Iteration  27: 8908751.298 ops/s
# Warmup Iteration  28: 8927095.026 ops/s
# Warmup Iteration  29: 8810376.519 ops/s
# Warmup Iteration  30: 8943338.376 ops/s
Iteration   1: 8968285.030 ops/s
Iteration   2: 8867425.633 ops/s
Iteration   3: 8972467.320 ops/s
Iteration   4: 8969947.024 ops/s
Iteration   5: 8984781.758 ops/s
Iteration   6: 8961712.987 ops/s
Iteration   7: 8972446.465 ops/s
Iteration   8: 8917768.015 ops/s
Iteration   9: 8964831.180 ops/s
Iteration  10: 8982718.688 ops/s
Iteration  11: 8950933.301 ops/s
Iteration  12: 8969636.580 ops/s
Iteration  13: 8981470.863 ops/s
Iteration  14: 8970101.340 ops/s
Iteration  15: 8985731.018 ops/s
Iteration  16: 8949623.939 ops/s
Iteration  17: 8780667.623 ops/s
Iteration  18: 8927095.308 ops/s
Iteration  19: 8962543.484 ops/s
Iteration  20: 8948416.057 ops/s
Iteration  21: 8943171.744 ops/s
Iteration  22: 8921190.730 ops/s
Iteration  23: 8812884.967 ops/s
Iteration  24: 8917615.042 ops/s
Iteration  25: 8950792.038 ops/s
Iteration  26: 8935597.867 ops/s
Iteration  27: 8908919.580 ops/s
Iteration  28: 8895673.244 ops/s
Iteration  29: 8960866.982 ops/s
Iteration  30: 8827666.784 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_select":
  8935432.753 ±(99.9%) 34858.145 ops/s [Average]
  (min, avg, max) = (8780667.623, 8935432.753, 8985731.018), stdev = 52174.035
  CI (99.9%): [8900574.608, 8970290.898] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_select  thrpt   30  8935432.753 ± 34858.145  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1524821.378 ops/s
# Warmup Iteration   2: 3244981.073 ops/s
# Warmup Iteration   3: 3716987.039 ops/s
# Warmup Iteration   4: 4408802.216 ops/s
# Warmup Iteration   5: 4392061.603 ops/s
# Warmup Iteration   6: 4420853.335 ops/s
# Warmup Iteration   7: 4425960.038 ops/s
# Warmup Iteration   8: 4419118.705 ops/s
# Warmup Iteration   9: 4441468.008 ops/s
# Warmup Iteration  10: 4434506.071 ops/s
# Warmup Iteration  11: 4444105.161 ops/s
# Warmup Iteration  12: 4412817.522 ops/s
# Warmup Iteration  13: 4412963.667 ops/s
# Warmup Iteration  14: 4442509.281 ops/s
# Warmup Iteration  15: 4402922.206 ops/s
# Warmup Iteration  16: 4440728.873 ops/s
# Warmup Iteration  17: 4383409.285 ops/s
# Warmup Iteration  18: 4412393.438 ops/s
# Warmup Iteration  19: 4435166.899 ops/s
# Warmup Iteration  20: 4401098.139 ops/s
# Warmup Iteration  21: 4418484.530 ops/s
# Warmup Iteration  22: 4427902.880 ops/s
# Warmup Iteration  23: 4405286.529 ops/s
# Warmup Iteration  24: 4382312.810 ops/s
# Warmup Iteration  25: 4365728.551 ops/s
# Warmup Iteration  26: 4386069.044 ops/s
# Warmup Iteration  27: 4438671.241 ops/s
# Warmup Iteration  28: 4431534.291 ops/s
# Warmup Iteration  29: 4440743.515 ops/s
# Warmup Iteration  30: 4394597.722 ops/s
Iteration   1: 4442325.404 ops/s
Iteration   2: 4393796.216 ops/s
Iteration   3: 4407328.835 ops/s
Iteration   4: 4342738.117 ops/s
Iteration   5: 4428916.615 ops/s
Iteration   6: 4339526.285 ops/s
Iteration   7: 4398044.338 ops/s
Iteration   8: 4403972.003 ops/s
Iteration   9: 4432362.128 ops/s
Iteration  10: 4408361.216 ops/s
Iteration  11: 4406572.960 ops/s
Iteration  12: 4439111.638 ops/s
Iteration  13: 4381191.185 ops/s
Iteration  14: 4354187.938 ops/s
Iteration  15: 4425875.066 ops/s
Iteration  16: 4434290.014 ops/s
Iteration  17: 4415815.370 ops/s
Iteration  18: 4416798.684 ops/s
Iteration  19: 4406279.672 ops/s
Iteration  20: 4352391.186 ops/s
Iteration  21: 4437322.078 ops/s
Iteration  22: 4401795.809 ops/s
Iteration  23: 4421943.400 ops/s
Iteration  24: 4442321.684 ops/s
Iteration  25: 4423048.133 ops/s
Iteration  26: 4428584.218 ops/s
Iteration  27: 4453427.795 ops/s
Iteration  28: 4386640.155 ops/s
Iteration  29: 4435506.257 ops/s
Iteration  30: 4437124.456 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_size":
  4409919.962 ±(99.9%) 20475.904 ops/s [Average]
  (min, avg, max) = (4339526.285, 4409919.962, 4453427.795), stdev = 30647.372
  CI (99.9%): [4389444.058, 4430395.866] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_size  thrpt   30  4409919.962 ± 20475.904  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 164968527.268 ops/s
# Warmup Iteration   2: 299415477.923 ops/s
# Warmup Iteration   3: 259166120.988 ops/s
# Warmup Iteration   4: 306438071.671 ops/s
# Warmup Iteration   5: 307676037.134 ops/s
# Warmup Iteration   6: 305311740.487 ops/s
# Warmup Iteration   7: 306012668.099 ops/s
# Warmup Iteration   8: 307439628.556 ops/s
# Warmup Iteration   9: 304624510.738 ops/s
# Warmup Iteration  10: 306210282.237 ops/s
# Warmup Iteration  11: 308476701.197 ops/s
# Warmup Iteration  12: 308960942.829 ops/s
# Warmup Iteration  13: 308698367.474 ops/s
# Warmup Iteration  14: 308536633.255 ops/s
# Warmup Iteration  15: 308064240.263 ops/s
# Warmup Iteration  16: 306868392.257 ops/s
# Warmup Iteration  17: 307344633.430 ops/s
# Warmup Iteration  18: 306021879.618 ops/s
# Warmup Iteration  19: 306710420.376 ops/s
# Warmup Iteration  20: 306973563.571 ops/s
# Warmup Iteration  21: 305675291.492 ops/s
# Warmup Iteration  22: 307896954.495 ops/s
# Warmup Iteration  23: 307026751.563 ops/s
# Warmup Iteration  24: 307631224.326 ops/s
# Warmup Iteration  25: 306838165.245 ops/s
# Warmup Iteration  26: 306529191.220 ops/s
# Warmup Iteration  27: 307281890.645 ops/s
# Warmup Iteration  28: 305687771.341 ops/s
# Warmup Iteration  29: 302928821.696 ops/s
# Warmup Iteration  30: 305847090.881 ops/s
Iteration   1: 304560432.515 ops/s
Iteration   2: 307115934.546 ops/s
Iteration   3: 305790643.202 ops/s
Iteration   4: 306819419.797 ops/s
Iteration   5: 305141459.954 ops/s
Iteration   6: 309193605.114 ops/s
Iteration   7: 306396124.883 ops/s
Iteration   8: 306344617.520 ops/s
Iteration   9: 306515718.257 ops/s
Iteration  10: 307691607.670 ops/s
Iteration  11: 307382969.609 ops/s
Iteration  12: 307437061.828 ops/s
Iteration  13: 307570782.090 ops/s
Iteration  14: 306756541.954 ops/s
Iteration  15: 306774008.955 ops/s
Iteration  16: 308294059.695 ops/s
Iteration  17: 307926729.221 ops/s
Iteration  18: 306069031.578 ops/s
Iteration  19: 306453466.957 ops/s
Iteration  20: 302036012.687 ops/s
Iteration  21: 308803762.622 ops/s
Iteration  22: 307031924.803 ops/s
Iteration  23: 307273979.517 ops/s
Iteration  24: 305966569.364 ops/s
Iteration  25: 307518778.422 ops/s
Iteration  26: 302698002.184 ops/s
Iteration  27: 306782193.081 ops/s
Iteration  28: 306436502.473 ops/s
Iteration  29: 307395165.169 ops/s
Iteration  30: 301995686.964 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_testEquals":
  306472426.421 ±(99.9%) 1155443.106 ops/s [Average]
  (min, avg, max) = (301995686.964, 306472426.421, 309193605.114), stdev = 1729412.978
  CI (99.9%): [305316983.315, 307627869.527] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt          Score         Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_testEquals  thrpt   30  306472426.421 ± 1155443.106  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 163676124.337 ops/s
# Warmup Iteration   2: 298352393.753 ops/s
# Warmup Iteration   3: 255937375.088 ops/s
# Warmup Iteration   4: 305935296.421 ops/s
# Warmup Iteration   5: 306508921.719 ops/s
# Warmup Iteration   6: 305471103.931 ops/s
# Warmup Iteration   7: 303239742.304 ops/s
# Warmup Iteration   8: 304375132.564 ops/s
# Warmup Iteration   9: 303989509.189 ops/s
# Warmup Iteration  10: 306062143.982 ops/s
# Warmup Iteration  11: 304491972.606 ops/s
# Warmup Iteration  12: 306669035.793 ops/s
# Warmup Iteration  13: 304483485.471 ops/s
# Warmup Iteration  14: 303425386.205 ops/s
# Warmup Iteration  15: 306855121.092 ops/s
# Warmup Iteration  16: 306867391.732 ops/s
# Warmup Iteration  17: 304988554.512 ops/s
# Warmup Iteration  18: 305446068.210 ops/s
# Warmup Iteration  19: 305444523.492 ops/s
# Warmup Iteration  20: 305231481.368 ops/s
# Warmup Iteration  21: 304478376.801 ops/s
# Warmup Iteration  22: 301637476.589 ops/s
# Warmup Iteration  23: 305711117.603 ops/s
# Warmup Iteration  24: 305567257.789 ops/s
# Warmup Iteration  25: 304360449.307 ops/s
# Warmup Iteration  26: 306106356.780 ops/s
# Warmup Iteration  27: 305730447.797 ops/s
# Warmup Iteration  28: 303624496.116 ops/s
# Warmup Iteration  29: 304886844.021 ops/s
# Warmup Iteration  30: 304062375.686 ops/s
Iteration   1: 304203262.907 ops/s
Iteration   2: 303037434.190 ops/s
Iteration   3: 306912768.248 ops/s
Iteration   4: 304733789.399 ops/s
Iteration   5: 306159402.274 ops/s
Iteration   6: 306378585.234 ops/s
Iteration   7: 304618619.551 ops/s
Iteration   8: 306042507.369 ops/s
Iteration   9: 304071478.985 ops/s
Iteration  10: 304956860.462 ops/s
Iteration  11: 305173442.286 ops/s
Iteration  12: 305467964.620 ops/s
Iteration  13: 302778725.768 ops/s
Iteration  14: 302817264.395 ops/s
Iteration  15: 306410114.238 ops/s
Iteration  16: 304629903.636 ops/s
Iteration  17: 305240313.255 ops/s
Iteration  18: 304511470.017 ops/s
Iteration  19: 303218528.566 ops/s
Iteration  20: 304069711.937 ops/s
Iteration  21: 306108535.480 ops/s
Iteration  22: 304542821.742 ops/s
Iteration  23: 305723749.307 ops/s
Iteration  24: 305683827.257 ops/s
Iteration  25: 301715306.873 ops/s
Iteration  26: 303844652.139 ops/s
Iteration  27: 306027479.137 ops/s
Iteration  28: 307303835.286 ops/s
Iteration  29: 305957991.747 ops/s
Iteration  30: 306102684.682 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_testHashCode":
  304948101.033 ±(99.9%) 902655.313 ops/s [Average]
  (min, avg, max) = (301715306.873, 304948101.033, 307303835.286), stdev = 1351052.081
  CI (99.9%): [304045445.720, 305850756.346] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt          Score        Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_testHashCode  thrpt   30  304948101.033 ± 902655.313  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 162130519.017 ops/s
# Warmup Iteration   2: 302105888.532 ops/s
# Warmup Iteration   3: 259693912.494 ops/s
# Warmup Iteration   4: 304900244.032 ops/s
# Warmup Iteration   5: 305461700.095 ops/s
# Warmup Iteration   6: 305696179.757 ops/s
# Warmup Iteration   7: 302695290.172 ops/s
# Warmup Iteration   8: 304387386.218 ops/s
# Warmup Iteration   9: 304455970.309 ops/s
# Warmup Iteration  10: 304305703.923 ops/s
# Warmup Iteration  11: 305492970.004 ops/s
# Warmup Iteration  12: 305147320.183 ops/s
# Warmup Iteration  13: 306387950.773 ops/s
# Warmup Iteration  14: 305154466.206 ops/s
# Warmup Iteration  15: 304812443.960 ops/s
# Warmup Iteration  16: 303916139.946 ops/s
# Warmup Iteration  17: 302711862.216 ops/s
# Warmup Iteration  18: 302966578.574 ops/s
# Warmup Iteration  19: 304242221.337 ops/s
# Warmup Iteration  20: 298704772.058 ops/s
# Warmup Iteration  21: 305779379.958 ops/s
# Warmup Iteration  22: 305381539.966 ops/s
# Warmup Iteration  23: 305117962.839 ops/s
# Warmup Iteration  24: 304855935.883 ops/s
# Warmup Iteration  25: 305196227.062 ops/s
# Warmup Iteration  26: 304859962.322 ops/s
# Warmup Iteration  27: 302126424.896 ops/s
# Warmup Iteration  28: 304660021.710 ops/s
# Warmup Iteration  29: 305016756.302 ops/s
# Warmup Iteration  30: 305693003.143 ops/s
Iteration   1: 306894498.665 ops/s
Iteration   2: 305878303.908 ops/s
Iteration   3: 305625826.318 ops/s
Iteration   4: 305101042.754 ops/s
Iteration   5: 304129917.283 ops/s
Iteration   6: 307084914.773 ops/s
Iteration   7: 304644690.172 ops/s
Iteration   8: 304520274.109 ops/s
Iteration   9: 306574012.192 ops/s
Iteration  10: 300111078.194 ops/s
Iteration  11: 304358702.320 ops/s
Iteration  12: 303166071.861 ops/s
Iteration  13: 306269505.283 ops/s
Iteration  14: 304203970.877 ops/s
Iteration  15: 299594282.989 ops/s
Iteration  16: 304587029.541 ops/s
Iteration  17: 303658913.812 ops/s
Iteration  18: 303962752.366 ops/s
Iteration  19: 306059592.006 ops/s
Iteration  20: 306578277.406 ops/s
Iteration  21: 306638911.478 ops/s
Iteration  22: 304930890.298 ops/s
Iteration  23: 299016055.018 ops/s
Iteration  24: 302527164.607 ops/s
Iteration  25: 305815011.801 ops/s
Iteration  26: 306745836.615 ops/s
Iteration  27: 302222519.890 ops/s
Iteration  28: 305663118.742 ops/s
Iteration  29: 304868341.553 ops/s
Iteration  30: 305286053.327 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_testToString":
  304557252.005 ±(99.9%) 1410204.913 ops/s [Average]
  (min, avg, max) = (299016055.018, 304557252.005, 307084914.773), stdev = 2110728.486
  CI (99.9%): [303147047.092, 305967456.918] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt          Score         Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_testToString  thrpt   30  304557252.005 ± 1410204.913  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1069985.319 ops/s
# Warmup Iteration   2: 2309583.131 ops/s
# Warmup Iteration   3: 2695275.540 ops/s
# Warmup Iteration   4: 2519682.792 ops/s
# Warmup Iteration   5: 2833327.491 ops/s
# Warmup Iteration   6: 2817977.128 ops/s
# Warmup Iteration   7: 2829193.984 ops/s
# Warmup Iteration   8: 2834553.283 ops/s
# Warmup Iteration   9: 2820460.075 ops/s
# Warmup Iteration  10: 2845338.412 ops/s
# Warmup Iteration  11: 2833509.950 ops/s
# Warmup Iteration  12: 2834902.965 ops/s
# Warmup Iteration  13: 2828063.913 ops/s
# Warmup Iteration  14: 2833093.518 ops/s
# Warmup Iteration  15: 2849129.849 ops/s
# Warmup Iteration  16: 2848511.615 ops/s
# Warmup Iteration  17: 2811967.649 ops/s
# Warmup Iteration  18: 2789832.307 ops/s
# Warmup Iteration  19: 2823048.379 ops/s
# Warmup Iteration  20: 2820138.301 ops/s
# Warmup Iteration  21: 2837157.613 ops/s
# Warmup Iteration  22: 2822773.157 ops/s
# Warmup Iteration  23: 2833585.367 ops/s
# Warmup Iteration  24: 2832076.692 ops/s
# Warmup Iteration  25: 2828570.814 ops/s
# Warmup Iteration  26: 2837743.322 ops/s
# Warmup Iteration  27: 2837759.647 ops/s
# Warmup Iteration  28: 2836222.638 ops/s
# Warmup Iteration  29: 2837618.387 ops/s
# Warmup Iteration  30: 2823382.016 ops/s
Iteration   1: 2830347.517 ops/s
Iteration   2: 2830691.124 ops/s
Iteration   3: 2842653.596 ops/s
Iteration   4: 2833611.547 ops/s
Iteration   5: 2832457.396 ops/s
Iteration   6: 2827351.449 ops/s
Iteration   7: 2827209.595 ops/s
Iteration   8: 2826285.878 ops/s
Iteration   9: 2828902.143 ops/s
Iteration  10: 2822882.568 ops/s
Iteration  11: 2829178.453 ops/s
Iteration  12: 2833904.179 ops/s
Iteration  13: 2851644.680 ops/s
Iteration  14: 2744094.865 ops/s
Iteration  15: 2838637.527 ops/s
Iteration  16: 2832647.605 ops/s
Iteration  17: 2838208.782 ops/s
Iteration  18: 2815327.969 ops/s
Iteration  19: 2825870.169 ops/s
Iteration  20: 2846526.989 ops/s
Iteration  21: 2845805.189 ops/s
Iteration  22: 2813647.405 ops/s
Iteration  23: 2783459.794 ops/s
Iteration  24: 2826311.704 ops/s
Iteration  25: 2827156.098 ops/s
Iteration  26: 2827232.947 ops/s
Iteration  27: 2781029.312 ops/s
Iteration  28: 2805595.570 ops/s
Iteration  29: 2796562.003 ops/s
Iteration  30: 2785721.182 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_toArray":
  2821698.508 ±(99.9%) 15444.203 ops/s [Average]
  (min, avg, max) = (2744094.865, 2821698.508, 2851644.680), stdev = 23116.158
  CI (99.9%): [2806254.305, 2837142.711] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_toArray  thrpt   30  2821698.508 ± 15444.203  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 891330.993 ops/s
# Warmup Iteration   2: 1973700.461 ops/s
# Warmup Iteration   3: 2407114.639 ops/s
# Warmup Iteration   4: 2016408.736 ops/s
# Warmup Iteration   5: 2403313.823 ops/s
# Warmup Iteration   6: 2411874.757 ops/s
# Warmup Iteration   7: 2413204.963 ops/s
# Warmup Iteration   8: 2421276.184 ops/s
# Warmup Iteration   9: 2422368.805 ops/s
# Warmup Iteration  10: 2424232.959 ops/s
# Warmup Iteration  11: 2392364.752 ops/s
# Warmup Iteration  12: 2424323.400 ops/s
# Warmup Iteration  13: 2419644.552 ops/s
# Warmup Iteration  14: 2409735.996 ops/s
# Warmup Iteration  15: 2415055.923 ops/s
# Warmup Iteration  16: 2411518.984 ops/s
# Warmup Iteration  17: 2411844.295 ops/s
# Warmup Iteration  18: 2420673.503 ops/s
# Warmup Iteration  19: 2400999.213 ops/s
# Warmup Iteration  20: 2418631.154 ops/s
# Warmup Iteration  21: 2413119.548 ops/s
# Warmup Iteration  22: 2398163.689 ops/s
# Warmup Iteration  23: 2400813.540 ops/s
# Warmup Iteration  24: 2426313.656 ops/s
# Warmup Iteration  25: 2425127.866 ops/s
# Warmup Iteration  26: 2419657.530 ops/s
# Warmup Iteration  27: 2420309.992 ops/s
# Warmup Iteration  28: 2394865.699 ops/s
# Warmup Iteration  29: 2407625.544 ops/s
# Warmup Iteration  30: 2410591.638 ops/s
Iteration   1: 2421013.801 ops/s
Iteration   2: 2394115.871 ops/s
Iteration   3: 2426377.511 ops/s
Iteration   4: 2437533.405 ops/s
Iteration   5: 2407613.281 ops/s
Iteration   6: 2424847.747 ops/s
Iteration   7: 2404806.962 ops/s
Iteration   8: 2409713.236 ops/s
Iteration   9: 2426189.411 ops/s
Iteration  10: 2425295.895 ops/s
Iteration  11: 2418560.748 ops/s
Iteration  12: 2411409.625 ops/s
Iteration  13: 2415220.707 ops/s
Iteration  14: 2427703.044 ops/s
Iteration  15: 2400671.711 ops/s
Iteration  16: 2429420.222 ops/s
Iteration  17: 2418662.615 ops/s
Iteration  18: 2426343.266 ops/s
Iteration  19: 2405218.508 ops/s
Iteration  20: 2413600.668 ops/s
Iteration  21: 2417584.916 ops/s
Iteration  22: 2411030.101 ops/s
Iteration  23: 2388574.084 ops/s
Iteration  24: 2421625.115 ops/s
Iteration  25: 2407004.424 ops/s
Iteration  26: 2421572.452 ops/s
Iteration  27: 2373460.220 ops/s
Iteration  28: 2412479.254 ops/s
Iteration  29: 2410795.326 ops/s
Iteration  30: 2416716.868 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_toBag":
  2414172.033 ±(99.9%) 8832.048 ops/s [Average]
  (min, avg, max) = (2373460.220, 2414172.033, 2437533.405), stdev = 13219.394
  CI (99.9%): [2405339.985, 2423004.081] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_toBag  thrpt   30  2414172.033 ± 8832.048  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 876127.218 ops/s
# Warmup Iteration   2: 2041220.418 ops/s
# Warmup Iteration   3: 2227180.437 ops/s
# Warmup Iteration   4: 1845211.548 ops/s
# Warmup Iteration   5: 2242937.679 ops/s
# Warmup Iteration   6: 2237248.430 ops/s
# Warmup Iteration   7: 2243932.758 ops/s
# Warmup Iteration   8: 2241328.979 ops/s
# Warmup Iteration   9: 2238574.367 ops/s
# Warmup Iteration  10: 2226920.117 ops/s
# Warmup Iteration  11: 2234974.843 ops/s
# Warmup Iteration  12: 2232196.466 ops/s
# Warmup Iteration  13: 2247353.739 ops/s
# Warmup Iteration  14: 2234539.630 ops/s
# Warmup Iteration  15: 2238501.617 ops/s
# Warmup Iteration  16: 2244821.571 ops/s
# Warmup Iteration  17: 2246006.646 ops/s
# Warmup Iteration  18: 2242658.883 ops/s
# Warmup Iteration  19: 2244095.318 ops/s
# Warmup Iteration  20: 2242196.677 ops/s
# Warmup Iteration  21: 2239556.044 ops/s
# Warmup Iteration  22: 2235432.185 ops/s
# Warmup Iteration  23: 2221759.670 ops/s
# Warmup Iteration  24: 2226635.057 ops/s
# Warmup Iteration  25: 2240541.072 ops/s
# Warmup Iteration  26: 2249533.062 ops/s
# Warmup Iteration  27: 2228918.487 ops/s
# Warmup Iteration  28: 2241259.208 ops/s
# Warmup Iteration  29: 2240457.903 ops/s
# Warmup Iteration  30: 2239851.603 ops/s
Iteration   1: 2213196.732 ops/s
Iteration   2: 2249214.131 ops/s
Iteration   3: 2241665.430 ops/s
Iteration   4: 2245881.906 ops/s
Iteration   5: 2204456.677 ops/s
Iteration   6: 2241003.497 ops/s
Iteration   7: 2250728.736 ops/s
Iteration   8: 2253527.063 ops/s
Iteration   9: 2237684.451 ops/s
Iteration  10: 2234147.859 ops/s
Iteration  11: 2242114.103 ops/s
Iteration  12: 2247292.342 ops/s
Iteration  13: 2248281.348 ops/s
Iteration  14: 2236710.653 ops/s
Iteration  15: 2234172.714 ops/s
Iteration  16: 2244001.774 ops/s
Iteration  17: 2242679.232 ops/s
Iteration  18: 2176938.293 ops/s
Iteration  19: 2217507.170 ops/s
Iteration  20: 2244731.949 ops/s
Iteration  21: 2199215.297 ops/s
Iteration  22: 2241811.765 ops/s
Iteration  23: 2245024.563 ops/s
Iteration  24: 2242121.252 ops/s
Iteration  25: 2228066.365 ops/s
Iteration  26: 2244479.659 ops/s
Iteration  27: 2238226.670 ops/s
Iteration  28: 2229632.267 ops/s
Iteration  29: 2227164.119 ops/s
Iteration  30: 2210103.252 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_toList":
  2233726.042 ±(99.9%) 11762.848 ops/s [Average]
  (min, avg, max) = (2176938.293, 2233726.042, 2253527.063), stdev = 17606.078
  CI (99.9%): [2221963.194, 2245488.890] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_toList  thrpt   30  2233726.042 ± 11762.848  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1144008.947 ops/s
# Warmup Iteration   2: 2600807.517 ops/s
# Warmup Iteration   3: 2999939.756 ops/s
# Warmup Iteration   4: 2498384.824 ops/s
# Warmup Iteration   5: 3022924.610 ops/s
# Warmup Iteration   6: 3007731.745 ops/s
# Warmup Iteration   7: 3015781.933 ops/s
# Warmup Iteration   8: 3013811.746 ops/s
# Warmup Iteration   9: 3019824.709 ops/s
# Warmup Iteration  10: 3022527.895 ops/s
# Warmup Iteration  11: 3021777.587 ops/s
# Warmup Iteration  12: 3027400.857 ops/s
# Warmup Iteration  13: 3023361.679 ops/s
# Warmup Iteration  14: 3017645.087 ops/s
# Warmup Iteration  15: 3021006.312 ops/s
# Warmup Iteration  16: 3014169.650 ops/s
# Warmup Iteration  17: 3011705.542 ops/s
# Warmup Iteration  18: 3024688.926 ops/s
# Warmup Iteration  19: 3024903.239 ops/s
# Warmup Iteration  20: 2981118.319 ops/s
# Warmup Iteration  21: 3037287.342 ops/s
# Warmup Iteration  22: 3014995.601 ops/s
# Warmup Iteration  23: 3036379.343 ops/s
# Warmup Iteration  24: 3029197.476 ops/s
# Warmup Iteration  25: 3025081.592 ops/s
# Warmup Iteration  26: 3028411.157 ops/s
# Warmup Iteration  27: 3029320.784 ops/s
# Warmup Iteration  28: 3003349.300 ops/s
# Warmup Iteration  29: 3019474.528 ops/s
# Warmup Iteration  30: 3015934.556 ops/s
Iteration   1: 3025693.096 ops/s
Iteration   2: 3015724.037 ops/s
Iteration   3: 2974717.020 ops/s
Iteration   4: 2973621.848 ops/s
Iteration   5: 3013765.305 ops/s
Iteration   6: 3035062.917 ops/s
Iteration   7: 3043236.007 ops/s
Iteration   8: 3025291.350 ops/s
Iteration   9: 3029649.022 ops/s
Iteration  10: 3030714.221 ops/s
Iteration  11: 3019313.006 ops/s
Iteration  12: 3020687.852 ops/s
Iteration  13: 3025014.943 ops/s
Iteration  14: 3020550.616 ops/s
Iteration  15: 3026261.573 ops/s
Iteration  16: 3035493.934 ops/s
Iteration  17: 3046890.162 ops/s
Iteration  18: 3031873.288 ops/s
Iteration  19: 2996566.432 ops/s
Iteration  20: 3024936.400 ops/s
Iteration  21: 3034878.214 ops/s
Iteration  22: 2983279.758 ops/s
Iteration  23: 3043478.306 ops/s
Iteration  24: 3038519.783 ops/s
Iteration  25: 2999580.135 ops/s
Iteration  26: 3032014.475 ops/s
Iteration  27: 3031698.459 ops/s
Iteration  28: 2983284.673 ops/s
Iteration  29: 3037681.034 ops/s
Iteration  30: 3036981.663 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_toSet":
  3021215.318 ±(99.9%) 13649.340 ops/s [Average]
  (min, avg, max) = (2973621.848, 3021215.318, 3046890.162), stdev = 20429.690
  CI (99.9%): [3007565.978, 3034864.657] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_toSet  thrpt   30  3021215.318 ± 13649.340  ops/s
----------------------------------------
