=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1121205.625 ops/s
# Warmup Iteration   2: 2640055.763 ops/s
# Warmup Iteration   3: 2757763.210 ops/s
# Warmup Iteration   4: 2354776.250 ops/s
# Warmup Iteration   5: 2741579.924 ops/s
# Warmup Iteration   6: 2791117.189 ops/s
# Warmup Iteration   7: 2842652.178 ops/s
# Warmup Iteration   8: 2741203.774 ops/s
# Warmup Iteration   9: 2747456.537 ops/s
# Warmup Iteration  10: 2819359.301 ops/s
# Warmup Iteration  11: 2896820.270 ops/s
# Warmup Iteration  12: 2878632.026 ops/s
# Warmup Iteration  13: 2833732.385 ops/s
# Warmup Iteration  14: 2848599.767 ops/s
# Warmup Iteration  15: 2791184.551 ops/s
# Warmup Iteration  16: 2765132.924 ops/s
# Warmup Iteration  17: 2764585.088 ops/s
# Warmup Iteration  18: 2755032.159 ops/s
# Warmup Iteration  19: 2766252.348 ops/s
# Warmup Iteration  20: 2753013.061 ops/s
# Warmup Iteration  21: 2720555.594 ops/s
# Warmup Iteration  22: 2747371.338 ops/s
# Warmup Iteration  23: 2755131.600 ops/s
# Warmup Iteration  24: 2806391.377 ops/s
# Warmup Iteration  25: 2771182.951 ops/s
# Warmup Iteration  26: 2804535.154 ops/s
# Warmup Iteration  27: 2884488.685 ops/s
# Warmup Iteration  28: 2795448.764 ops/s
# Warmup Iteration  29: 2820084.702 ops/s
# Warmup Iteration  30: 2735187.761 ops/s
Iteration   1: 2748138.346 ops/s
Iteration   2: 2720100.104 ops/s
Iteration   3: 2704897.531 ops/s
Iteration   4: 2758828.277 ops/s
Iteration   5: 2739276.494 ops/s
Iteration   6: 2710394.145 ops/s
Iteration   7: 2738966.606 ops/s
Iteration   8: 2751242.045 ops/s
Iteration   9: 2725040.846 ops/s
Iteration  10: 2748341.573 ops/s
Iteration  11: 2752334.705 ops/s
Iteration  12: 2741351.619 ops/s
Iteration  13: 2743032.468 ops/s
Iteration  14: 2820213.372 ops/s
Iteration  15: 2793444.355 ops/s
Iteration  16: 2777952.510 ops/s
Iteration  17: 2834675.672 ops/s
Iteration  18: 2893675.865 ops/s
Iteration  19: 2867348.315 ops/s
Iteration  20: 2896385.452 ops/s
Iteration  21: 2772762.799 ops/s
Iteration  22: 2799546.835 ops/s
Iteration  23: 2789040.980 ops/s
Iteration  24: 2719671.577 ops/s
Iteration  25: 2737938.057 ops/s
Iteration  26: 2720821.459 ops/s
Iteration  27: 2725570.895 ops/s
Iteration  28: 2820274.556 ops/s
Iteration  29: 2832607.448 ops/s
Iteration  30: 2808101.449 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedListBy":
  2773065.878 ±(99.9%) 35606.936 ops/s [Average]
  (min, avg, max) = (2704897.531, 2773065.878, 2896385.452), stdev = 53294.790
  CI (99.9%): [2737458.942, 2808672.815] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
TreeBagTest._Benchmark.benchmark_toImmutableSortedListBy  thrpt   30  2773065.878 ± 35606.936  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 668203.151 ops/s
# Warmup Iteration   2: 996746.041 ops/s
# Warmup Iteration   3: 1255093.035 ops/s
# Warmup Iteration   4: 1244874.318 ops/s
# Warmup Iteration   5: 1226713.018 ops/s
# Warmup Iteration   6: 1250914.912 ops/s
# Warmup Iteration   7: 1214281.962 ops/s
# Warmup Iteration   8: 1004222.803 ops/s
# Warmup Iteration   9: 1209077.226 ops/s
# Warmup Iteration  10: 1202922.047 ops/s
# Warmup Iteration  11: 1250046.084 ops/s
# Warmup Iteration  12: 1205869.620 ops/s
# Warmup Iteration  13: 1224163.619 ops/s
# Warmup Iteration  14: 1222352.593 ops/s
# Warmup Iteration  15: 1240765.391 ops/s
# Warmup Iteration  16: 1237467.426 ops/s
# Warmup Iteration  17: 1198904.643 ops/s
# Warmup Iteration  18: 1179246.911 ops/s
# Warmup Iteration  19: 1199389.613 ops/s
# Warmup Iteration  20: 1191452.027 ops/s
# Warmup Iteration  21: 1182929.611 ops/s
# Warmup Iteration  22: 1202456.746 ops/s
# Warmup Iteration  23: 1209552.837 ops/s
# Warmup Iteration  24: 1191942.438 ops/s
# Warmup Iteration  25: 1248905.260 ops/s
# Warmup Iteration  26: 1229219.581 ops/s
# Warmup Iteration  27: 1200706.518 ops/s
# Warmup Iteration  28: 1182006.238 ops/s
# Warmup Iteration  29: 1210164.356 ops/s
# Warmup Iteration  30: 1219216.775 ops/s
Iteration   1: 1216381.113 ops/s
Iteration   2: 1208412.884 ops/s
Iteration   3: 1184253.663 ops/s
Iteration   4: 1196702.031 ops/s
Iteration   5: 1189934.019 ops/s
Iteration   6: 1176818.383 ops/s
Iteration   7: 1191848.771 ops/s
Iteration   8: 1231226.783 ops/s
Iteration   9: 1192917.759 ops/s
Iteration  10: 1189093.681 ops/s
Iteration  11: 1168502.546 ops/s
Iteration  12: 1206823.795 ops/s
Iteration  13: 1236740.854 ops/s
Iteration  14: 1181629.084 ops/s
Iteration  15: 1186326.943 ops/s
Iteration  16: 1190978.828 ops/s
Iteration  17: 1214020.583 ops/s
Iteration  18: 1208559.872 ops/s
Iteration  19: 1200723.235 ops/s
Iteration  20: 1191159.263 ops/s
Iteration  21: 1182615.641 ops/s
Iteration  22: 1193711.497 ops/s
Iteration  23: 1194728.172 ops/s
Iteration  24: 1193824.018 ops/s
Iteration  25: 1258147.288 ops/s
Iteration  26: 1251325.329 ops/s
Iteration  27: 1228447.681 ops/s
Iteration  28: 1198301.603 ops/s
Iteration  29: 1190313.340 ops/s
Iteration  30: 1193261.910 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering":
  1201591.019 ±(99.9%) 14193.842 ops/s [Average]
  (min, avg, max) = (1168502.546, 1201591.019, 1258147.288), stdev = 21244.677
  CI (99.9%): [1187397.177, 1215784.861] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
TreeBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering  thrpt   30  1201591.019 ± 14193.842  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1595361.033 ops/s
# Warmup Iteration   2: 3074423.977 ops/s
# Warmup Iteration   3: 3451850.005 ops/s
# Warmup Iteration   4: 3377591.800 ops/s
# Warmup Iteration   5: 2876953.606 ops/s
# Warmup Iteration   6: 3256006.382 ops/s
# Warmup Iteration   7: 3353820.495 ops/s
# Warmup Iteration   8: 3385737.624 ops/s
# Warmup Iteration   9: 3397275.854 ops/s
# Warmup Iteration  10: 3364882.846 ops/s
# Warmup Iteration  11: 3376323.756 ops/s
# Warmup Iteration  12: 3378149.502 ops/s
# Warmup Iteration  13: 3464123.401 ops/s
# Warmup Iteration  14: 3402228.528 ops/s
# Warmup Iteration  15: 3364636.835 ops/s
# Warmup Iteration  16: 3346234.067 ops/s
# Warmup Iteration  17: 3391575.235 ops/s
# Warmup Iteration  18: 3385289.287 ops/s
# Warmup Iteration  19: 3365588.337 ops/s
# Warmup Iteration  20: 3359532.686 ops/s
# Warmup Iteration  21: 3342071.766 ops/s
# Warmup Iteration  22: 3450506.776 ops/s
# Warmup Iteration  23: 3386181.346 ops/s
# Warmup Iteration  24: 3432300.366 ops/s
# Warmup Iteration  25: 3375962.001 ops/s
# Warmup Iteration  26: 3353613.081 ops/s
# Warmup Iteration  27: 3402914.970 ops/s
# Warmup Iteration  28: 3445837.447 ops/s
# Warmup Iteration  29: 3382636.673 ops/s
# Warmup Iteration  30: 3348596.106 ops/s
Iteration   1: 3333375.637 ops/s
Iteration   2: 3365750.061 ops/s
Iteration   3: 3552380.271 ops/s
Iteration   4: 3550066.204 ops/s
Iteration   5: 3538150.861 ops/s
Iteration   6: 3557992.099 ops/s
Iteration   7: 3382725.807 ops/s
Iteration   8: 3370397.445 ops/s
Iteration   9: 3373258.083 ops/s
Iteration  10: 3395961.757 ops/s
Iteration  11: 3479381.084 ops/s
Iteration  12: 3350908.074 ops/s
Iteration  13: 3423458.963 ops/s
Iteration  14: 3452846.623 ops/s
Iteration  15: 3431865.141 ops/s
Iteration  16: 3411955.708 ops/s
Iteration  17: 3369430.730 ops/s
Iteration  18: 3399873.947 ops/s
Iteration  19: 3341127.171 ops/s
Iteration  20: 3332679.670 ops/s
Iteration  21: 3362174.395 ops/s
Iteration  22: 3557342.574 ops/s
Iteration  23: 3549158.048 ops/s
Iteration  24: 3560314.514 ops/s
Iteration  25: 3352654.326 ops/s
Iteration  26: 3365155.575 ops/s
Iteration  27: 3367724.325 ops/s
Iteration  28: 3433525.623 ops/s
Iteration  29: 3344141.483 ops/s
Iteration  30: 3312483.424 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator":
  3420608.654 ±(99.9%) 55100.384 ops/s [Average]
  (min, avg, max) = (3312483.424, 3420608.654, 3560314.514), stdev = 82471.666
  CI (99.9%): [3365508.271, 3475709.038] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
TreeBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator  thrpt   30  3420608.654 ± 55100.384  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 496419.282 ops/s
# Warmup Iteration   2: 1075331.698 ops/s
# Warmup Iteration   3: 1196053.974 ops/s
# Warmup Iteration   4: 1191985.488 ops/s
# Warmup Iteration   5: 985150.567 ops/s
# Warmup Iteration   6: 1202998.707 ops/s
# Warmup Iteration   7: 1232511.298 ops/s
# Warmup Iteration   8: 1257980.157 ops/s
# Warmup Iteration   9: 1196260.778 ops/s
# Warmup Iteration  10: 1198031.976 ops/s
# Warmup Iteration  11: 1201824.657 ops/s
# Warmup Iteration  12: 1205600.578 ops/s
# Warmup Iteration  13: 1242666.382 ops/s
# Warmup Iteration  14: 1205521.285 ops/s
# Warmup Iteration  15: 1184098.430 ops/s
# Warmup Iteration  16: 1189921.980 ops/s
# Warmup Iteration  17: 1189087.438 ops/s
# Warmup Iteration  18: 1239084.569 ops/s
# Warmup Iteration  19: 1192327.400 ops/s
# Warmup Iteration  20: 1214339.812 ops/s
# Warmup Iteration  21: 1232203.555 ops/s
# Warmup Iteration  22: 1227947.373 ops/s
# Warmup Iteration  23: 1193551.215 ops/s
# Warmup Iteration  24: 1192408.372 ops/s
# Warmup Iteration  25: 1187026.689 ops/s
# Warmup Iteration  26: 1219901.230 ops/s
# Warmup Iteration  27: 1222770.109 ops/s
# Warmup Iteration  28: 1222654.182 ops/s
# Warmup Iteration  29: 1225674.941 ops/s
# Warmup Iteration  30: 1208144.387 ops/s
Iteration   1: 1221381.760 ops/s
Iteration   2: 1260919.962 ops/s
Iteration   3: 1255423.355 ops/s
Iteration   4: 1184661.439 ops/s
Iteration   5: 1235942.511 ops/s
Iteration   6: 1253450.092 ops/s
Iteration   7: 1235133.359 ops/s
Iteration   8: 1197135.467 ops/s
Iteration   9: 1201103.157 ops/s
Iteration  10: 1194576.975 ops/s
Iteration  11: 1195935.931 ops/s
Iteration  12: 1194175.845 ops/s
Iteration  13: 1216335.725 ops/s
Iteration  14: 1235724.340 ops/s
Iteration  15: 1268194.825 ops/s
Iteration  16: 1234807.171 ops/s
Iteration  17: 1246882.383 ops/s
Iteration  18: 1260452.026 ops/s
Iteration  19: 1240669.450 ops/s
Iteration  20: 1250184.838 ops/s
Iteration  21: 1223469.227 ops/s
Iteration  22: 1203162.494 ops/s
Iteration  23: 1210657.984 ops/s
Iteration  24: 1221205.285 ops/s
Iteration  25: 1226118.846 ops/s
Iteration  26: 1241006.333 ops/s
Iteration  27: 1222178.005 ops/s
Iteration  28: 1252846.976 ops/s
Iteration  29: 1259657.224 ops/s
Iteration  30: 1223693.182 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedSetBy":
  1228902.872 ±(99.9%) 15795.553 ops/s [Average]
  (min, avg, max) = (1184661.439, 1228902.872, 1268194.825), stdev = 23642.042
  CI (99.9%): [1213107.319, 1244698.425] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
TreeBagTest._Benchmark.benchmark_toImmutableSortedSetBy  thrpt   30  1228902.872 ± 15795.553  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 575132.435 ops/s
# Warmup Iteration   2: 1104202.181 ops/s
# Warmup Iteration   3: 1244448.720 ops/s
# Warmup Iteration   4: 1248727.733 ops/s
# Warmup Iteration   5: 1230737.939 ops/s
# Warmup Iteration   6: 1027682.231 ops/s
# Warmup Iteration   7: 1259668.662 ops/s
# Warmup Iteration   8: 1221226.266 ops/s
# Warmup Iteration   9: 1284950.931 ops/s
# Warmup Iteration  10: 1248284.780 ops/s
# Warmup Iteration  11: 1245962.995 ops/s
# Warmup Iteration  12: 1288528.903 ops/s
# Warmup Iteration  13: 1273262.299 ops/s
# Warmup Iteration  14: 1244664.243 ops/s
# Warmup Iteration  15: 1281036.259 ops/s
# Warmup Iteration  16: 1291346.754 ops/s
# Warmup Iteration  17: 1284285.938 ops/s
# Warmup Iteration  18: 1311384.195 ops/s
# Warmup Iteration  19: 1310564.192 ops/s
# Warmup Iteration  20: 1291325.698 ops/s
# Warmup Iteration  21: 1304193.570 ops/s
# Warmup Iteration  22: 1305890.450 ops/s
# Warmup Iteration  23: 1311338.033 ops/s
# Warmup Iteration  24: 1311810.661 ops/s
# Warmup Iteration  25: 1305598.817 ops/s
# Warmup Iteration  26: 1312750.681 ops/s
# Warmup Iteration  27: 1313250.241 ops/s
# Warmup Iteration  28: 1310013.769 ops/s
# Warmup Iteration  29: 1311421.618 ops/s
# Warmup Iteration  30: 1313173.378 ops/s
Iteration   1: 1307052.797 ops/s
Iteration   2: 1284347.474 ops/s
Iteration   3: 1273161.811 ops/s
Iteration   4: 1302000.014 ops/s
Iteration   5: 1286200.231 ops/s
Iteration   6: 1263008.627 ops/s
Iteration   7: 1244576.966 ops/s
Iteration   8: 1296117.330 ops/s
Iteration   9: 1300870.553 ops/s
Iteration  10: 1273496.644 ops/s
Iteration  11: 1236371.622 ops/s
Iteration  12: 1281724.256 ops/s
Iteration  13: 1307413.326 ops/s
Iteration  14: 1255836.387 ops/s
Iteration  15: 1239010.846 ops/s
Iteration  16: 1243042.460 ops/s
Iteration  17: 1300837.853 ops/s
Iteration  18: 1251239.221 ops/s
Iteration  19: 1273411.788 ops/s
Iteration  20: 1307334.915 ops/s
Iteration  21: 1310716.397 ops/s
Iteration  22: 1298849.715 ops/s
Iteration  23: 1238748.624 ops/s
Iteration  24: 1227605.422 ops/s
Iteration  25: 1251704.305 ops/s
Iteration  26: 1302203.338 ops/s
Iteration  27: 1247647.608 ops/s
Iteration  28: 1242270.868 ops/s
Iteration  29: 1224723.258 ops/s
Iteration  30: 1247606.775 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator":
  1270637.714 ±(99.9%) 18784.997 ops/s [Average]
  (min, avg, max) = (1224723.258, 1270637.714, 1310716.397), stdev = 28116.502
  CI (99.9%): [1251852.717, 1289422.712] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
TreeBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator  thrpt   30  1270637.714 ± 18784.997  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 587962.768 ops/s
# Warmup Iteration   2: 1034225.590 ops/s
# Warmup Iteration   3: 1222502.083 ops/s
# Warmup Iteration   4: 1226212.651 ops/s
# Warmup Iteration   5: 1180856.925 ops/s
# Warmup Iteration   6: 964951.411 ops/s
# Warmup Iteration   7: 1160108.735 ops/s
# Warmup Iteration   8: 1163308.918 ops/s
# Warmup Iteration   9: 1156156.203 ops/s
# Warmup Iteration  10: 1173113.680 ops/s
# Warmup Iteration  11: 1226812.983 ops/s
# Warmup Iteration  12: 1211891.291 ops/s
# Warmup Iteration  13: 1181492.840 ops/s
# Warmup Iteration  14: 1166096.854 ops/s
# Warmup Iteration  15: 1204997.779 ops/s
# Warmup Iteration  16: 1162528.523 ops/s
# Warmup Iteration  17: 1151119.147 ops/s
# Warmup Iteration  18: 1155243.499 ops/s
# Warmup Iteration  19: 1161960.781 ops/s
# Warmup Iteration  20: 1155802.447 ops/s
# Warmup Iteration  21: 1170735.459 ops/s
# Warmup Iteration  22: 1169828.719 ops/s
# Warmup Iteration  23: 1176262.183 ops/s
# Warmup Iteration  24: 1158511.025 ops/s
# Warmup Iteration  25: 1171912.538 ops/s
# Warmup Iteration  26: 1198537.113 ops/s
# Warmup Iteration  27: 1183230.416 ops/s
# Warmup Iteration  28: 1168984.910 ops/s
# Warmup Iteration  29: 1172228.988 ops/s
# Warmup Iteration  30: 1183936.247 ops/s
Iteration   1: 1179531.691 ops/s
Iteration   2: 1166522.033 ops/s
Iteration   3: 1155613.299 ops/s
Iteration   4: 1161918.708 ops/s
Iteration   5: 1145202.777 ops/s
Iteration   6: 1144151.362 ops/s
Iteration   7: 1171981.955 ops/s
Iteration   8: 1165610.176 ops/s
Iteration   9: 1173731.225 ops/s
Iteration  10: 1196492.970 ops/s
Iteration  11: 1180627.157 ops/s
Iteration  12: 1198062.641 ops/s
Iteration  13: 1174972.187 ops/s
Iteration  14: 1193829.884 ops/s
Iteration  15: 1172021.787 ops/s
Iteration  16: 1160202.517 ops/s
Iteration  17: 1177366.595 ops/s
Iteration  18: 1171801.780 ops/s
Iteration  19: 1185088.005 ops/s
Iteration  20: 1183560.694 ops/s
Iteration  21: 1188806.564 ops/s
Iteration  22: 1181667.252 ops/s
Iteration  23: 1173222.710 ops/s
Iteration  24: 1183270.322 ops/s
Iteration  25: 1192128.383 ops/s
Iteration  26: 1190489.124 ops/s
Iteration  27: 1169146.737 ops/s
Iteration  28: 1166850.610 ops/s
Iteration  29: 1166190.185 ops/s
Iteration  30: 1163542.245 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toList":
  1174453.453 ±(99.9%) 9215.222 ops/s [Average]
  (min, avg, max) = (1144151.362, 1174453.453, 1198062.641), stdev = 13792.911
  CI (99.9%): [1165238.231, 1183668.674] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_toList  thrpt   30  1174453.453 ± 9215.222  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 398955.014 ops/s
# Warmup Iteration   2: 769271.749 ops/s
# Warmup Iteration   3: 832387.570 ops/s
# Warmup Iteration   4: 846160.106 ops/s
# Warmup Iteration   5: 711364.348 ops/s
# Warmup Iteration   6: 839305.478 ops/s
# Warmup Iteration   7: 824543.547 ops/s
# Warmup Iteration   8: 870782.821 ops/s
# Warmup Iteration   9: 830610.309 ops/s
# Warmup Iteration  10: 843612.127 ops/s
# Warmup Iteration  11: 861707.121 ops/s
# Warmup Iteration  12: 850810.637 ops/s
# Warmup Iteration  13: 858888.710 ops/s
# Warmup Iteration  14: 868807.595 ops/s
# Warmup Iteration  15: 833910.585 ops/s
# Warmup Iteration  16: 845389.029 ops/s
# Warmup Iteration  17: 842787.916 ops/s
# Warmup Iteration  18: 837615.389 ops/s
# Warmup Iteration  19: 833554.565 ops/s
# Warmup Iteration  20: 838993.096 ops/s
# Warmup Iteration  21: 834259.253 ops/s
# Warmup Iteration  22: 838781.472 ops/s
# Warmup Iteration  23: 849880.573 ops/s
# Warmup Iteration  24: 838313.370 ops/s
# Warmup Iteration  25: 823072.506 ops/s
# Warmup Iteration  26: 839130.011 ops/s
# Warmup Iteration  27: 836757.528 ops/s
# Warmup Iteration  28: 842816.369 ops/s
# Warmup Iteration  29: 835685.234 ops/s
# Warmup Iteration  30: 829718.372 ops/s
Iteration   1: 864553.244 ops/s
Iteration   2: 833338.419 ops/s
Iteration   3: 837798.790 ops/s
Iteration   4: 840607.369 ops/s
Iteration   5: 843186.430 ops/s
Iteration   6: 838523.973 ops/s
Iteration   7: 839571.502 ops/s
Iteration   8: 842075.376 ops/s
Iteration   9: 873956.312 ops/s
Iteration  10: 840086.545 ops/s
Iteration  11: 825628.682 ops/s
Iteration  12: 830483.535 ops/s
Iteration  13: 832132.998 ops/s
Iteration  14: 830890.232 ops/s
Iteration  15: 839807.604 ops/s
Iteration  16: 845257.349 ops/s
Iteration  17: 880913.317 ops/s
Iteration  18: 846032.901 ops/s
Iteration  19: 882302.060 ops/s
Iteration  20: 862695.757 ops/s
Iteration  21: 850470.181 ops/s
Iteration  22: 837280.124 ops/s
Iteration  23: 827123.062 ops/s
Iteration  24: 862290.890 ops/s
Iteration  25: 885166.347 ops/s
Iteration  26: 866948.048 ops/s
Iteration  27: 863748.468 ops/s
Iteration  28: 847665.778 ops/s
Iteration  29: 842226.049 ops/s
Iteration  30: 874060.846 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toMap":
  849560.740 ±(99.9%) 11703.232 ops/s [Average]
  (min, avg, max) = (825628.682, 849560.740, 885166.347), stdev = 17516.849
  CI (99.9%): [837857.507, 861263.972] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt       Score       Error  Units
TreeBagTest._Benchmark.benchmark_toMap  thrpt   30  849560.740 ± 11703.232  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toMapOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toMapOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 625006.309 ops/s
# Warmup Iteration   2: 1191456.745 ops/s
# Warmup Iteration   3: 1326280.485 ops/s
# Warmup Iteration   4: 1286077.434 ops/s
# Warmup Iteration   5: 1141137.812 ops/s
# Warmup Iteration   6: 1226562.065 ops/s
# Warmup Iteration   7: 1293925.897 ops/s
# Warmup Iteration   8: 1323176.592 ops/s
# Warmup Iteration   9: 1285032.979 ops/s
# Warmup Iteration  10: 1294648.403 ops/s
# Warmup Iteration  11: 1293890.910 ops/s
# Warmup Iteration  12: 1310578.699 ops/s
# Warmup Iteration  13: 1315024.570 ops/s
# Warmup Iteration  14: 1290557.575 ops/s
# Warmup Iteration  15: 1283724.698 ops/s
# Warmup Iteration  16: 1306891.380 ops/s
# Warmup Iteration  17: 1303987.910 ops/s
# Warmup Iteration  18: 1368404.163 ops/s
# Warmup Iteration  19: 1322753.254 ops/s
# Warmup Iteration  20: 1297429.926 ops/s
# Warmup Iteration  21: 1310635.604 ops/s
# Warmup Iteration  22: 1340547.869 ops/s
# Warmup Iteration  23: 1307859.365 ops/s
# Warmup Iteration  24: 1307262.267 ops/s
# Warmup Iteration  25: 1291342.428 ops/s
# Warmup Iteration  26: 1308855.164 ops/s
# Warmup Iteration  27: 1303794.106 ops/s
# Warmup Iteration  28: 1320434.453 ops/s
# Warmup Iteration  29: 1290728.110 ops/s
# Warmup Iteration  30: 1282401.690 ops/s
Iteration   1: 1286161.998 ops/s
Iteration   2: 1282691.824 ops/s
Iteration   3: 1306653.352 ops/s
Iteration   4: 1287411.864 ops/s
Iteration   5: 1256493.124 ops/s
Iteration   6: 1297340.686 ops/s
Iteration   7: 1295851.133 ops/s
Iteration   8: 1310859.489 ops/s
Iteration   9: 1338935.887 ops/s
Iteration  10: 1281330.076 ops/s
Iteration  11: 1306822.032 ops/s
Iteration  12: 1323185.783 ops/s
Iteration  13: 1284160.180 ops/s
Iteration  14: 1294112.583 ops/s
Iteration  15: 1317772.599 ops/s
Iteration  16: 1290483.346 ops/s
Iteration  17: 1307992.875 ops/s
Iteration  18: 1295363.849 ops/s
Iteration  19: 1305639.273 ops/s
Iteration  20: 1290449.733 ops/s
Iteration  21: 1304720.159 ops/s
Iteration  22: 1282527.636 ops/s
Iteration  23: 1332500.486 ops/s
Iteration  24: 1346022.129 ops/s
Iteration  25: 1327138.206 ops/s
Iteration  26: 1315234.848 ops/s
Iteration  27: 1286144.268 ops/s
Iteration  28: 1357296.818 ops/s
Iteration  29: 1350322.079 ops/s
Iteration  30: 1320113.245 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toMapOfItemToCount":
  1306057.719 ±(99.9%) 15624.009 ops/s [Average]
  (min, avg, max) = (1256493.124, 1306057.719, 1357296.818), stdev = 23385.283
  CI (99.9%): [1290433.710, 1321681.728] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
TreeBagTest._Benchmark.benchmark_toMapOfItemToCount  thrpt   30  1306057.719 ± 15624.009  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toMapTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toMapTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 750073.977 ops/s
# Warmup Iteration   2: 1820911.897 ops/s
# Warmup Iteration   3: 1857934.720 ops/s
# Warmup Iteration   4: 1547225.931 ops/s
# Warmup Iteration   5: 1859315.644 ops/s
# Warmup Iteration   6: 1872171.260 ops/s
# Warmup Iteration   7: 1956892.450 ops/s
# Warmup Iteration   8: 1872129.819 ops/s
# Warmup Iteration   9: 1862930.143 ops/s
# Warmup Iteration  10: 1870584.431 ops/s
# Warmup Iteration  11: 1864657.593 ops/s
# Warmup Iteration  12: 1939285.560 ops/s
# Warmup Iteration  13: 1881264.433 ops/s
# Warmup Iteration  14: 1848041.214 ops/s
# Warmup Iteration  15: 1877263.148 ops/s
# Warmup Iteration  16: 1890078.143 ops/s
# Warmup Iteration  17: 1864438.424 ops/s
# Warmup Iteration  18: 1884641.680 ops/s
# Warmup Iteration  19: 1884436.573 ops/s
# Warmup Iteration  20: 1979647.405 ops/s
# Warmup Iteration  21: 1918871.474 ops/s
# Warmup Iteration  22: 1934417.349 ops/s
# Warmup Iteration  23: 1951586.732 ops/s
# Warmup Iteration  24: 1876146.926 ops/s
# Warmup Iteration  25: 1855286.432 ops/s
# Warmup Iteration  26: 1858166.100 ops/s
# Warmup Iteration  27: 1934194.935 ops/s
# Warmup Iteration  28: 1878181.603 ops/s
# Warmup Iteration  29: 1888327.286 ops/s
# Warmup Iteration  30: 1919464.388 ops/s
Iteration   1: 1890480.706 ops/s
Iteration   2: 1861885.401 ops/s
Iteration   3: 1876104.068 ops/s
Iteration   4: 1871874.728 ops/s
Iteration   5: 1863687.200 ops/s
Iteration   6: 1878585.569 ops/s
Iteration   7: 1862519.331 ops/s
Iteration   8: 1852732.873 ops/s
Iteration   9: 1851717.179 ops/s
Iteration  10: 1878007.473 ops/s
Iteration  11: 1889204.511 ops/s
Iteration  12: 1876784.497 ops/s
Iteration  13: 1850934.390 ops/s
Iteration  14: 1856915.579 ops/s
Iteration  15: 1865558.816 ops/s
Iteration  16: 1901007.115 ops/s
Iteration  17: 1913385.857 ops/s
Iteration  18: 1865013.712 ops/s
Iteration  19: 1844792.134 ops/s
Iteration  20: 1831529.265 ops/s
Iteration  21: 1869759.739 ops/s
Iteration  22: 1880037.039 ops/s
Iteration  23: 1835127.959 ops/s
Iteration  24: 1931880.976 ops/s
Iteration  25: 1925575.567 ops/s
Iteration  26: 1842982.950 ops/s
Iteration  27: 1866147.373 ops/s
Iteration  28: 1872846.215 ops/s
Iteration  29: 1879713.485 ops/s
Iteration  30: 1862812.302 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toMapTarget":
  1871653.467 ±(99.9%) 15886.722 ops/s [Average]
  (min, avg, max) = (1831529.265, 1871653.467, 1931880.976), stdev = 23778.500
  CI (99.9%): [1855766.745, 1887540.189] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
TreeBagTest._Benchmark.benchmark_toMapTarget  thrpt   30  1871653.467 ± 15886.722  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 484966.344 ops/s
# Warmup Iteration   2: 799299.387 ops/s
# Warmup Iteration   3: 905144.670 ops/s
# Warmup Iteration   4: 906933.377 ops/s
# Warmup Iteration   5: 927687.778 ops/s
# Warmup Iteration   6: 821281.394 ops/s
# Warmup Iteration   7: 854319.030 ops/s
# Warmup Iteration   8: 917710.987 ops/s
# Warmup Iteration   9: 916386.461 ops/s
# Warmup Iteration  10: 914444.094 ops/s
# Warmup Iteration  11: 909741.807 ops/s
# Warmup Iteration  12: 928237.628 ops/s
# Warmup Iteration  13: 926425.842 ops/s
# Warmup Iteration  14: 932159.616 ops/s
# Warmup Iteration  15: 910218.207 ops/s
# Warmup Iteration  16: 933049.559 ops/s
# Warmup Iteration  17: 918529.892 ops/s
# Warmup Iteration  18: 915179.525 ops/s
# Warmup Iteration  19: 909901.997 ops/s
# Warmup Iteration  20: 926564.653 ops/s
# Warmup Iteration  21: 909355.381 ops/s
# Warmup Iteration  22: 932185.880 ops/s
# Warmup Iteration  23: 909207.959 ops/s
# Warmup Iteration  24: 924137.396 ops/s
# Warmup Iteration  25: 935901.428 ops/s
# Warmup Iteration  26: 938492.747 ops/s
# Warmup Iteration  27: 936981.259 ops/s
# Warmup Iteration  28: 926061.725 ops/s
# Warmup Iteration  29: 937270.149 ops/s
# Warmup Iteration  30: 935802.567 ops/s
Iteration   1: 926593.711 ops/s
Iteration   2: 921778.135 ops/s
Iteration   3: 912722.315 ops/s
Iteration   4: 940768.706 ops/s
Iteration   5: 924798.839 ops/s
Iteration   6: 946574.734 ops/s
Iteration   7: 946492.363 ops/s
Iteration   8: 966337.120 ops/s
Iteration   9: 916835.207 ops/s
Iteration  10: 935770.872 ops/s
Iteration  11: 907589.453 ops/s
Iteration  12: 917081.155 ops/s
Iteration  13: 904080.081 ops/s
Iteration  14: 909638.173 ops/s
Iteration  15: 907663.306 ops/s
Iteration  16: 921134.142 ops/s
Iteration  17: 926642.917 ops/s
Iteration  18: 952755.567 ops/s
Iteration  19: 944829.554 ops/s
Iteration  20: 926278.174 ops/s
Iteration  21: 915216.525 ops/s
Iteration  22: 942967.603 ops/s
Iteration  23: 967779.418 ops/s
Iteration  24: 961907.612 ops/s
Iteration  25: 935231.764 ops/s
Iteration  26: 928631.896 ops/s
Iteration  27: 926990.553 ops/s
Iteration  28: 912259.027 ops/s
Iteration  29: 912425.385 ops/s
Iteration  30: 916282.490 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSet":
  929201.893 ±(99.9%) 11998.789 ops/s [Average]
  (min, avg, max) = (904080.081, 929201.893, 967779.418), stdev = 17959.224
  CI (99.9%): [917203.104, 941200.682] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt       Score       Error  Units
TreeBagTest._Benchmark.benchmark_toSet  thrpt   30  929201.893 ± 11998.789  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 118196.322 ops/s
# Warmup Iteration   2: 208895.987 ops/s
# Warmup Iteration   3: 256862.823 ops/s
# Warmup Iteration   4: 255025.787 ops/s
# Warmup Iteration   5: 262646.460 ops/s
# Warmup Iteration   6: 209194.942 ops/s
# Warmup Iteration   7: 257898.196 ops/s
# Warmup Iteration   8: 258433.373 ops/s
# Warmup Iteration   9: 253259.363 ops/s
# Warmup Iteration  10: 255759.025 ops/s
# Warmup Iteration  11: 256680.115 ops/s
# Warmup Iteration  12: 256948.515 ops/s
# Warmup Iteration  13: 255043.507 ops/s
# Warmup Iteration  14: 254368.557 ops/s
# Warmup Iteration  15: 254869.826 ops/s
# Warmup Iteration  16: 253910.878 ops/s
# Warmup Iteration  17: 259406.958 ops/s
# Warmup Iteration  18: 258274.036 ops/s
# Warmup Iteration  19: 252786.917 ops/s
# Warmup Iteration  20: 258909.103 ops/s
# Warmup Iteration  21: 257653.483 ops/s
# Warmup Iteration  22: 256145.736 ops/s
# Warmup Iteration  23: 257401.618 ops/s
# Warmup Iteration  24: 256264.909 ops/s
# Warmup Iteration  25: 260063.527 ops/s
# Warmup Iteration  26: 261091.185 ops/s
# Warmup Iteration  27: 263124.493 ops/s
# Warmup Iteration  28: 255135.569 ops/s
# Warmup Iteration  29: 256011.467 ops/s
# Warmup Iteration  30: 263813.144 ops/s
Iteration   1: 257353.767 ops/s
Iteration   2: 254828.469 ops/s
Iteration   3: 254458.422 ops/s
Iteration   4: 257959.960 ops/s
Iteration   5: 257942.314 ops/s
Iteration   6: 254478.096 ops/s
Iteration   7: 259521.397 ops/s
Iteration   8: 260188.429 ops/s
Iteration   9: 255227.187 ops/s
Iteration  10: 256899.855 ops/s
Iteration  11: 269387.684 ops/s
Iteration  12: 269232.405 ops/s
Iteration  13: 267359.456 ops/s
Iteration  14: 258772.951 ops/s
Iteration  15: 257779.461 ops/s
Iteration  16: 257474.519 ops/s
Iteration  17: 252518.058 ops/s
Iteration  18: 251566.917 ops/s
Iteration  19: 255154.724 ops/s
Iteration  20: 255073.797 ops/s
Iteration  21: 258509.029 ops/s
Iteration  22: 257413.719 ops/s
Iteration  23: 256444.469 ops/s
Iteration  24: 259726.952 ops/s
Iteration  25: 256887.416 ops/s
Iteration  26: 255126.344 ops/s
Iteration  27: 255493.845 ops/s
Iteration  28: 270342.234 ops/s
Iteration  29: 270668.751 ops/s
Iteration  30: 270063.135 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedBagBy":
  259128.459 ±(99.9%) 3774.973 ops/s [Average]
  (min, avg, max) = (251566.917, 259128.459, 270668.751), stdev = 5650.203
  CI (99.9%): [255353.485, 262903.432] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  259128.459 ± 3774.973  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 255647.875 ops/s
# Warmup Iteration   2: 450905.111 ops/s
# Warmup Iteration   3: 526111.763 ops/s
# Warmup Iteration   4: 516731.259 ops/s
# Warmup Iteration   5: 515317.393 ops/s
# Warmup Iteration   6: 433306.106 ops/s
# Warmup Iteration   7: 522870.441 ops/s
# Warmup Iteration   8: 522064.115 ops/s
# Warmup Iteration   9: 517208.519 ops/s
# Warmup Iteration  10: 523629.269 ops/s
# Warmup Iteration  11: 526939.056 ops/s
# Warmup Iteration  12: 519866.204 ops/s
# Warmup Iteration  13: 524335.096 ops/s
# Warmup Iteration  14: 540988.457 ops/s
# Warmup Iteration  15: 523412.623 ops/s
# Warmup Iteration  16: 535919.264 ops/s
# Warmup Iteration  17: 520856.497 ops/s
# Warmup Iteration  18: 514022.136 ops/s
# Warmup Iteration  19: 518988.646 ops/s
# Warmup Iteration  20: 528244.930 ops/s
# Warmup Iteration  21: 531506.139 ops/s
# Warmup Iteration  22: 531543.305 ops/s
# Warmup Iteration  23: 534671.177 ops/s
# Warmup Iteration  24: 527030.683 ops/s
# Warmup Iteration  25: 516548.812 ops/s
# Warmup Iteration  26: 522375.734 ops/s
# Warmup Iteration  27: 519327.825 ops/s
# Warmup Iteration  28: 516180.293 ops/s
# Warmup Iteration  29: 522979.541 ops/s
# Warmup Iteration  30: 524998.404 ops/s
Iteration   1: 522724.251 ops/s
Iteration   2: 521285.581 ops/s
Iteration   3: 516931.996 ops/s
Iteration   4: 520342.123 ops/s
Iteration   5: 512487.342 ops/s
Iteration   6: 515769.608 ops/s
Iteration   7: 513518.784 ops/s
Iteration   8: 528770.095 ops/s
Iteration   9: 516822.357 ops/s
Iteration  10: 511474.182 ops/s
Iteration  11: 515629.437 ops/s
Iteration  12: 518568.594 ops/s
Iteration  13: 519020.723 ops/s
Iteration  14: 524245.479 ops/s
Iteration  15: 517771.350 ops/s
Iteration  16: 525629.810 ops/s
Iteration  17: 523516.257 ops/s
Iteration  18: 523038.702 ops/s
Iteration  19: 532161.312 ops/s
Iteration  20: 535130.848 ops/s
Iteration  21: 517072.387 ops/s
Iteration  22: 522339.682 ops/s
Iteration  23: 531246.856 ops/s
Iteration  24: 549020.782 ops/s
Iteration  25: 532482.369 ops/s
Iteration  26: 520755.673 ops/s
Iteration  27: 526304.822 ops/s
Iteration  28: 518390.888 ops/s
Iteration  29: 522734.017 ops/s
Iteration  30: 515174.680 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedBag_natural_ordering":
  522345.366 ±(99.9%) 5288.566 ops/s [Average]
  (min, avg, max) = (511474.182, 522345.366, 549020.782), stdev = 7915.678
  CI (99.9%): [517056.800, 527633.933] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_toSortedBag_natural_ordering  thrpt   30  522345.366 ± 5288.566  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 349282.616 ops/s
# Warmup Iteration   2: 609539.975 ops/s
# Warmup Iteration   3: 716571.471 ops/s
# Warmup Iteration   4: 745597.967 ops/s
# Warmup Iteration   5: 735078.573 ops/s
# Warmup Iteration   6: 618354.415 ops/s
# Warmup Iteration   7: 735311.156 ops/s
# Warmup Iteration   8: 730799.330 ops/s
# Warmup Iteration   9: 743518.804 ops/s
# Warmup Iteration  10: 758683.813 ops/s
# Warmup Iteration  11: 757245.785 ops/s
# Warmup Iteration  12: 733232.407 ops/s
# Warmup Iteration  13: 744961.991 ops/s
# Warmup Iteration  14: 760461.274 ops/s
# Warmup Iteration  15: 752493.617 ops/s
# Warmup Iteration  16: 724118.633 ops/s
# Warmup Iteration  17: 730484.447 ops/s
# Warmup Iteration  18: 721838.110 ops/s
# Warmup Iteration  19: 739125.187 ops/s
# Warmup Iteration  20: 726899.199 ops/s
# Warmup Iteration  21: 736919.240 ops/s
# Warmup Iteration  22: 727601.563 ops/s
# Warmup Iteration  23: 733935.987 ops/s
# Warmup Iteration  24: 773550.635 ops/s
# Warmup Iteration  25: 733544.079 ops/s
# Warmup Iteration  26: 733925.821 ops/s
# Warmup Iteration  27: 746383.904 ops/s
# Warmup Iteration  28: 734792.785 ops/s
# Warmup Iteration  29: 735823.059 ops/s
# Warmup Iteration  30: 761095.531 ops/s
Iteration   1: 740632.562 ops/s
Iteration   2: 726670.907 ops/s
Iteration   3: 748070.582 ops/s
Iteration   4: 768564.549 ops/s
Iteration   5: 746029.884 ops/s
Iteration   6: 742934.781 ops/s
Iteration   7: 734878.751 ops/s
Iteration   8: 736334.005 ops/s
Iteration   9: 746163.220 ops/s
Iteration  10: 715186.758 ops/s
Iteration  11: 725600.587 ops/s
Iteration  12: 725986.225 ops/s
Iteration  13: 732358.030 ops/s
Iteration  14: 744236.769 ops/s
Iteration  15: 737011.725 ops/s
Iteration  16: 724671.528 ops/s
Iteration  17: 736415.900 ops/s
Iteration  18: 741606.301 ops/s
Iteration  19: 731183.695 ops/s
Iteration  20: 735050.318 ops/s
Iteration  21: 734853.884 ops/s
Iteration  22: 727792.398 ops/s
Iteration  23: 731001.575 ops/s
Iteration  24: 717686.861 ops/s
Iteration  25: 714666.278 ops/s
Iteration  26: 716809.583 ops/s
Iteration  27: 711740.425 ops/s
Iteration  28: 716922.936 ops/s
Iteration  29: 774265.390 ops/s
Iteration  30: 772539.034 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedBag_with_comparator":
  735262.181 ±(99.9%) 10718.335 ops/s [Average]
  (min, avg, max) = (711740.425, 735262.181, 774265.390), stdev = 16042.700
  CI (99.9%): [724543.847, 745980.516] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
TreeBagTest._Benchmark.benchmark_toSortedBag_with_comparator  thrpt   30  735262.181 ± 10718.335  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedBag_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedBag_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 374552.918 ops/s
# Warmup Iteration   2: 391090.815 ops/s
# Warmup Iteration   3: 510728.304 ops/s
# Warmup Iteration   4: 520727.917 ops/s
# Warmup Iteration   5: 547620.840 ops/s
# Warmup Iteration   6: 529146.203 ops/s
# Warmup Iteration   7: 537074.178 ops/s
# Warmup Iteration   8: 550730.993 ops/s
# Warmup Iteration   9: 546315.689 ops/s
# Warmup Iteration  10: 540404.670 ops/s
# Warmup Iteration  11: 539479.356 ops/s
# Warmup Iteration  12: 461571.903 ops/s
# Warmup Iteration  13: 549079.819 ops/s
# Warmup Iteration  14: 534878.047 ops/s
# Warmup Iteration  15: 534121.774 ops/s
# Warmup Iteration  16: 522830.415 ops/s
# Warmup Iteration  17: 552608.223 ops/s
# Warmup Iteration  18: 545920.323 ops/s
# Warmup Iteration  19: 541638.506 ops/s
# Warmup Iteration  20: 542537.171 ops/s
# Warmup Iteration  21: 537807.045 ops/s
# Warmup Iteration  22: 542668.716 ops/s
# Warmup Iteration  23: 558481.696 ops/s
# Warmup Iteration  24: 556746.548 ops/s
# Warmup Iteration  25: 561989.217 ops/s
# Warmup Iteration  26: 567444.864 ops/s
# Warmup Iteration  27: 559498.812 ops/s
# Warmup Iteration  28: 568655.615 ops/s
# Warmup Iteration  29: 561517.902 ops/s
# Warmup Iteration  30: 558137.989 ops/s
Iteration   1: 561662.040 ops/s
Iteration   2: 552060.655 ops/s
Iteration   3: 563913.271 ops/s
Iteration   4: 564055.732 ops/s
Iteration   5: 559030.677 ops/s
Iteration   6: 574940.284 ops/s
Iteration   7: 574272.015 ops/s
Iteration   8: 574094.071 ops/s
Iteration   9: 574412.932 ops/s
Iteration  10: 563180.314 ops/s
Iteration  11: 559038.450 ops/s
Iteration  12: 558924.970 ops/s
Iteration  13: 549227.546 ops/s
Iteration  14: 561393.646 ops/s
Iteration  15: 547955.830 ops/s
Iteration  16: 563264.471 ops/s
Iteration  17: 547182.821 ops/s
Iteration  18: 543787.148 ops/s
Iteration  19: 556886.095 ops/s
Iteration  20: 557983.972 ops/s
Iteration  21: 560945.399 ops/s
Iteration  22: 574059.441 ops/s
Iteration  23: 552936.869 ops/s
Iteration  24: 544184.655 ops/s
Iteration  25: 543256.055 ops/s
Iteration  26: 553275.431 ops/s
Iteration  27: 567747.921 ops/s
Iteration  28: 568476.677 ops/s
Iteration  29: 564257.430 ops/s
Iteration  30: 560511.307 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedBag_with_null":
  559897.271 ±(99.9%) 6365.759 ops/s [Average]
  (min, avg, max) = (543256.055, 559897.271, 574940.284), stdev = 9527.969
  CI (99.9%): [553531.512, 566263.030] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_toSortedBag_with_null  thrpt   30  559897.271 ± 6365.759  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 293289.554 ops/s
# Warmup Iteration   2: 442500.561 ops/s
# Warmup Iteration   3: 553384.187 ops/s
# Warmup Iteration   4: 561342.531 ops/s
# Warmup Iteration   5: 553399.785 ops/s
# Warmup Iteration   6: 556272.985 ops/s
# Warmup Iteration   7: 450733.907 ops/s
# Warmup Iteration   8: 552135.082 ops/s
# Warmup Iteration   9: 573150.844 ops/s
# Warmup Iteration  10: 565015.339 ops/s
# Warmup Iteration  11: 559591.746 ops/s
# Warmup Iteration  12: 559677.666 ops/s
# Warmup Iteration  13: 555777.521 ops/s
# Warmup Iteration  14: 557064.376 ops/s
# Warmup Iteration  15: 551446.195 ops/s
# Warmup Iteration  16: 556413.291 ops/s
# Warmup Iteration  17: 563907.405 ops/s
# Warmup Iteration  18: 566113.623 ops/s
# Warmup Iteration  19: 569535.578 ops/s
# Warmup Iteration  20: 556383.496 ops/s
# Warmup Iteration  21: 565837.057 ops/s
# Warmup Iteration  22: 570641.226 ops/s
# Warmup Iteration  23: 566630.288 ops/s
# Warmup Iteration  24: 559110.387 ops/s
# Warmup Iteration  25: 562251.658 ops/s
# Warmup Iteration  26: 565229.656 ops/s
# Warmup Iteration  27: 559786.510 ops/s
# Warmup Iteration  28: 567913.029 ops/s
# Warmup Iteration  29: 573308.443 ops/s
# Warmup Iteration  30: 570006.204 ops/s
Iteration   1: 558741.115 ops/s
Iteration   2: 566704.316 ops/s
Iteration   3: 574306.635 ops/s
Iteration   4: 573589.275 ops/s
Iteration   5: 574492.639 ops/s
Iteration   6: 573585.082 ops/s
Iteration   7: 569614.221 ops/s
Iteration   8: 570591.004 ops/s
Iteration   9: 562090.339 ops/s
Iteration  10: 567554.931 ops/s
Iteration  11: 568821.433 ops/s
Iteration  12: 572719.515 ops/s
Iteration  13: 570779.894 ops/s
Iteration  14: 572389.791 ops/s
Iteration  15: 572546.820 ops/s
Iteration  16: 573744.771 ops/s
Iteration  17: 568597.741 ops/s
Iteration  18: 574177.174 ops/s
Iteration  19: 572437.973 ops/s
Iteration  20: 574350.163 ops/s
Iteration  21: 572806.172 ops/s
Iteration  22: 573617.022 ops/s
Iteration  23: 573513.811 ops/s
Iteration  24: 574680.072 ops/s
Iteration  25: 574644.083 ops/s
Iteration  26: 574062.554 ops/s
Iteration  27: 571216.724 ops/s
Iteration  28: 573313.932 ops/s
Iteration  29: 573207.493 ops/s
Iteration  30: 571848.043 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedListBy":
  571491.491 ±(99.9%) 2492.867 ops/s [Average]
  (min, avg, max) = (558741.115, 571491.491, 574680.072), stdev = 3731.206
  CI (99.9%): [568998.625, 573984.358] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_toSortedListBy  thrpt   30  571491.491 ± 2492.867  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedListBy_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedListBy_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 392057.373 ops/s
# Warmup Iteration   2: 416454.154 ops/s
# Warmup Iteration   3: 554846.652 ops/s
# Warmup Iteration   4: 552433.067 ops/s
# Warmup Iteration   5: 548206.498 ops/s
# Warmup Iteration   6: 554235.387 ops/s
# Warmup Iteration   7: 553559.717 ops/s
# Warmup Iteration   8: 555219.663 ops/s
# Warmup Iteration   9: 554064.799 ops/s
# Warmup Iteration  10: 553727.920 ops/s
# Warmup Iteration  11: 545324.246 ops/s
# Warmup Iteration  12: 476096.496 ops/s
# Warmup Iteration  13: 555163.390 ops/s
# Warmup Iteration  14: 553520.609 ops/s
# Warmup Iteration  15: 555517.106 ops/s
# Warmup Iteration  16: 552860.109 ops/s
# Warmup Iteration  17: 574252.314 ops/s
# Warmup Iteration  18: 573821.669 ops/s
# Warmup Iteration  19: 572602.430 ops/s
# Warmup Iteration  20: 572245.619 ops/s
# Warmup Iteration  21: 568939.100 ops/s
# Warmup Iteration  22: 562614.597 ops/s
# Warmup Iteration  23: 564951.648 ops/s
# Warmup Iteration  24: 568071.545 ops/s
# Warmup Iteration  25: 556470.037 ops/s
# Warmup Iteration  26: 568217.860 ops/s
# Warmup Iteration  27: 572330.819 ops/s
# Warmup Iteration  28: 568714.921 ops/s
# Warmup Iteration  29: 569364.767 ops/s
# Warmup Iteration  30: 559204.977 ops/s
Iteration   1: 562866.744 ops/s
Iteration   2: 547022.548 ops/s
Iteration   3: 570790.982 ops/s
Iteration   4: 571096.753 ops/s
Iteration   5: 562728.147 ops/s
Iteration   6: 554788.040 ops/s
Iteration   7: 549662.953 ops/s
Iteration   8: 553151.782 ops/s
Iteration   9: 554787.662 ops/s
Iteration  10: 543481.628 ops/s
Iteration  11: 553281.047 ops/s
Iteration  12: 555045.211 ops/s
Iteration  13: 549269.991 ops/s
Iteration  14: 557490.049 ops/s
Iteration  15: 562966.762 ops/s
Iteration  16: 562199.346 ops/s
Iteration  17: 555472.788 ops/s
Iteration  18: 556598.762 ops/s
Iteration  19: 564034.164 ops/s
Iteration  20: 556610.686 ops/s
Iteration  21: 564577.268 ops/s
Iteration  22: 565084.073 ops/s
Iteration  23: 559832.356 ops/s
Iteration  24: 557531.743 ops/s
Iteration  25: 552564.068 ops/s
Iteration  26: 555808.397 ops/s
Iteration  27: 561555.762 ops/s
Iteration  28: 548724.863 ops/s
Iteration  29: 547241.653 ops/s
Iteration  30: 556756.060 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedListBy_with_null":
  557100.743 ±(99.9%) 4551.109 ops/s [Average]
  (min, avg, max) = (543481.628, 557100.743, 571096.753), stdev = 6811.886
  CI (99.9%): [552549.634, 561651.852] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_toSortedListBy_with_null  thrpt   30  557100.743 ± 4551.109  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedListWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedListWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1642066.881 ops/s
# Warmup Iteration   2: 2808909.042 ops/s
# Warmup Iteration   3: 3231449.467 ops/s
# Warmup Iteration   4: 3223043.543 ops/s
# Warmup Iteration   5: 3217242.365 ops/s
# Warmup Iteration   6: 2647350.191 ops/s
# Warmup Iteration   7: 3206889.797 ops/s
# Warmup Iteration   8: 3230783.228 ops/s
# Warmup Iteration   9: 3189906.576 ops/s
# Warmup Iteration  10: 3232620.100 ops/s
# Warmup Iteration  11: 3262408.845 ops/s
# Warmup Iteration  12: 3272304.453 ops/s
# Warmup Iteration  13: 3277884.513 ops/s
# Warmup Iteration  14: 3208282.248 ops/s
# Warmup Iteration  15: 3204229.936 ops/s
# Warmup Iteration  16: 3244502.033 ops/s
# Warmup Iteration  17: 3198975.392 ops/s
# Warmup Iteration  18: 3206131.026 ops/s
# Warmup Iteration  19: 3187519.860 ops/s
# Warmup Iteration  20: 3188230.641 ops/s
# Warmup Iteration  21: 3218905.753 ops/s
# Warmup Iteration  22: 3177250.039 ops/s
# Warmup Iteration  23: 3194271.304 ops/s
# Warmup Iteration  24: 3247186.885 ops/s
# Warmup Iteration  25: 3253202.686 ops/s
# Warmup Iteration  26: 3204539.625 ops/s
# Warmup Iteration  27: 3231909.693 ops/s
# Warmup Iteration  28: 3189083.852 ops/s
# Warmup Iteration  29: 3239079.218 ops/s
# Warmup Iteration  30: 3208374.537 ops/s
Iteration   1: 3212892.177 ops/s
Iteration   2: 3291361.925 ops/s
Iteration   3: 3239103.395 ops/s
Iteration   4: 3218099.209 ops/s
Iteration   5: 3259722.254 ops/s
Iteration   6: 3224368.326 ops/s
Iteration   7: 3204550.966 ops/s
Iteration   8: 3182020.234 ops/s
Iteration   9: 3226758.330 ops/s
Iteration  10: 3259920.584 ops/s
Iteration  11: 3284951.233 ops/s
Iteration  12: 3205111.693 ops/s
Iteration  13: 3252880.592 ops/s
Iteration  14: 3254787.658 ops/s
Iteration  15: 3279395.106 ops/s
Iteration  16: 3262224.709 ops/s
Iteration  17: 3223189.736 ops/s
Iteration  18: 3250470.893 ops/s
Iteration  19: 3253930.395 ops/s
Iteration  20: 3266159.135 ops/s
Iteration  21: 3257190.770 ops/s
Iteration  22: 3252422.934 ops/s
Iteration  23: 3227268.860 ops/s
Iteration  24: 3230632.324 ops/s
Iteration  25: 3169995.335 ops/s
Iteration  26: 3225434.742 ops/s
Iteration  27: 3185662.208 ops/s
Iteration  28: 3211126.177 ops/s
Iteration  29: 3213860.281 ops/s
Iteration  30: 3166799.066 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedListWith":
  3233076.375 ±(99.9%) 21779.878 ops/s [Average]
  (min, avg, max) = (3166799.066, 3233076.375, 3291361.925), stdev = 32599.098
  CI (99.9%): [3211296.497, 3254856.252] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
TreeBagTest._Benchmark.benchmark_toSortedListWith  thrpt   30  3233076.375 ± 21779.878  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 553647.448 ops/s
# Warmup Iteration   2: 1015655.271 ops/s
# Warmup Iteration   3: 1137223.806 ops/s
# Warmup Iteration   4: 1147030.848 ops/s
# Warmup Iteration   5: 1053394.540 ops/s
# Warmup Iteration   6: 1035983.567 ops/s
# Warmup Iteration   7: 1156007.913 ops/s
# Warmup Iteration   8: 1151177.319 ops/s
# Warmup Iteration   9: 1157792.822 ops/s
# Warmup Iteration  10: 1161439.095 ops/s
# Warmup Iteration  11: 1135227.756 ops/s
# Warmup Iteration  12: 1138280.952 ops/s
# Warmup Iteration  13: 1157378.676 ops/s
# Warmup Iteration  14: 1148704.289 ops/s
# Warmup Iteration  15: 1145525.354 ops/s
# Warmup Iteration  16: 1135033.518 ops/s
# Warmup Iteration  17: 1137137.781 ops/s
# Warmup Iteration  18: 1158867.036 ops/s
# Warmup Iteration  19: 1153791.857 ops/s
# Warmup Iteration  20: 1159432.571 ops/s
# Warmup Iteration  21: 1152796.856 ops/s
# Warmup Iteration  22: 1176775.444 ops/s
# Warmup Iteration  23: 1159185.806 ops/s
# Warmup Iteration  24: 1171206.270 ops/s
# Warmup Iteration  25: 1149632.519 ops/s
# Warmup Iteration  26: 1142370.232 ops/s
# Warmup Iteration  27: 1166361.491 ops/s
# Warmup Iteration  28: 1151531.514 ops/s
# Warmup Iteration  29: 1155354.906 ops/s
# Warmup Iteration  30: 1153876.272 ops/s
Iteration   1: 1156536.787 ops/s
Iteration   2: 1146488.484 ops/s
Iteration   3: 1153106.628 ops/s
Iteration   4: 1142599.637 ops/s
Iteration   5: 1144453.715 ops/s
Iteration   6: 1144171.713 ops/s
Iteration   7: 1140097.102 ops/s
Iteration   8: 1157971.305 ops/s
Iteration   9: 1136264.496 ops/s
Iteration  10: 1141327.068 ops/s
Iteration  11: 1142928.965 ops/s
Iteration  12: 1165037.952 ops/s
Iteration  13: 1162238.548 ops/s
Iteration  14: 1133301.136 ops/s
Iteration  15: 1154492.015 ops/s
Iteration  16: 1170922.548 ops/s
Iteration  17: 1142652.256 ops/s
Iteration  18: 1150341.211 ops/s
Iteration  19: 1139096.924 ops/s
Iteration  20: 1162704.356 ops/s
Iteration  21: 1138381.817 ops/s
Iteration  22: 1140590.457 ops/s
Iteration  23: 1147122.773 ops/s
Iteration  24: 1147698.639 ops/s
Iteration  25: 1153944.368 ops/s
Iteration  26: 1164275.599 ops/s
Iteration  27: 1142183.995 ops/s
Iteration  28: 1156848.620 ops/s
Iteration  29: 1136406.288 ops/s
Iteration  30: 1134655.083 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedList_natural_ordering":
  1148294.683 ±(99.9%) 6800.146 ops/s [Average]
  (min, avg, max) = (1133301.136, 1148294.683, 1170922.548), stdev = 10178.140
  CI (99.9%): [1141494.537, 1155094.829] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_toSortedList_natural_ordering  thrpt   30  1148294.683 ± 6800.146  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 602314.502 ops/s
# Warmup Iteration   2: 1138248.372 ops/s
# Warmup Iteration   3: 1290280.671 ops/s
# Warmup Iteration   4: 1286877.608 ops/s
# Warmup Iteration   5: 1215746.337 ops/s
# Warmup Iteration   6: 1141623.192 ops/s
# Warmup Iteration   7: 1285845.003 ops/s
# Warmup Iteration   8: 1288792.219 ops/s
# Warmup Iteration   9: 1299894.973 ops/s
# Warmup Iteration  10: 1288618.662 ops/s
# Warmup Iteration  11: 1304442.909 ops/s
# Warmup Iteration  12: 1315692.092 ops/s
# Warmup Iteration  13: 1295108.521 ops/s
# Warmup Iteration  14: 1311505.944 ops/s
# Warmup Iteration  15: 1303959.292 ops/s
# Warmup Iteration  16: 1306701.323 ops/s
# Warmup Iteration  17: 1298211.780 ops/s
# Warmup Iteration  18: 1299524.025 ops/s
# Warmup Iteration  19: 1308043.294 ops/s
# Warmup Iteration  20: 1285885.409 ops/s
# Warmup Iteration  21: 1294550.835 ops/s
# Warmup Iteration  22: 1300314.334 ops/s
# Warmup Iteration  23: 1291522.902 ops/s
# Warmup Iteration  24: 1310601.146 ops/s
# Warmup Iteration  25: 1304656.452 ops/s
# Warmup Iteration  26: 1287960.557 ops/s
# Warmup Iteration  27: 1320711.380 ops/s
# Warmup Iteration  28: 1304985.990 ops/s
# Warmup Iteration  29: 1298513.438 ops/s
# Warmup Iteration  30: 1291961.218 ops/s
Iteration   1: 1297232.482 ops/s
Iteration   2: 1291699.252 ops/s
Iteration   3: 1314525.697 ops/s
Iteration   4: 1316398.032 ops/s
Iteration   5: 1298564.625 ops/s
Iteration   6: 1281111.907 ops/s
Iteration   7: 1319489.501 ops/s
Iteration   8: 1289433.666 ops/s
Iteration   9: 1280781.216 ops/s
Iteration  10: 1299509.130 ops/s
Iteration  11: 1305370.313 ops/s
Iteration  12: 1343760.629 ops/s
Iteration  13: 1342456.900 ops/s
Iteration  14: 1346972.143 ops/s
Iteration  15: 1330067.662 ops/s
Iteration  16: 1290849.320 ops/s
Iteration  17: 1312864.820 ops/s
Iteration  18: 1308135.434 ops/s
Iteration  19: 1310104.434 ops/s
Iteration  20: 1281488.817 ops/s
Iteration  21: 1300206.038 ops/s
Iteration  22: 1263167.601 ops/s
Iteration  23: 1296661.188 ops/s
Iteration  24: 1309493.624 ops/s
Iteration  25: 1303008.126 ops/s
Iteration  26: 1288481.947 ops/s
Iteration  27: 1286756.997 ops/s
Iteration  28: 1291548.165 ops/s
Iteration  29: 1309741.626 ops/s
Iteration  30: 1315296.129 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedList_with_comparator":
  1304172.581 ±(99.9%) 13039.536 ops/s [Average]
  (min, avg, max) = (1263167.601, 1304172.581, 1346972.143), stdev = 19516.966
  CI (99.9%): [1291133.044, 1317212.117] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
TreeBagTest._Benchmark.benchmark_toSortedList_with_comparator  thrpt   30  1304172.581 ± 13039.536  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedList_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedList_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 374337.747 ops/s
# Warmup Iteration   2: 398377.365 ops/s
# Warmup Iteration   3: 526396.835 ops/s
# Warmup Iteration   4: 536023.585 ops/s
# Warmup Iteration   5: 529324.468 ops/s
# Warmup Iteration   6: 529376.233 ops/s
# Warmup Iteration   7: 538095.843 ops/s
# Warmup Iteration   8: 538070.402 ops/s
# Warmup Iteration   9: 534129.383 ops/s
# Warmup Iteration  10: 532095.364 ops/s
# Warmup Iteration  11: 532745.916 ops/s
# Warmup Iteration  12: 448302.699 ops/s
# Warmup Iteration  13: 526295.578 ops/s
# Warmup Iteration  14: 530150.681 ops/s
# Warmup Iteration  15: 538213.173 ops/s
# Warmup Iteration  16: 538798.582 ops/s
# Warmup Iteration  17: 556306.472 ops/s
# Warmup Iteration  18: 546788.268 ops/s
# Warmup Iteration  19: 549514.725 ops/s
# Warmup Iteration  20: 556361.830 ops/s
# Warmup Iteration  21: 546909.089 ops/s
# Warmup Iteration  22: 559032.273 ops/s
# Warmup Iteration  23: 556879.563 ops/s
# Warmup Iteration  24: 553245.229 ops/s
# Warmup Iteration  25: 555319.780 ops/s
# Warmup Iteration  26: 554128.213 ops/s
# Warmup Iteration  27: 553340.830 ops/s
# Warmup Iteration  28: 553822.267 ops/s
# Warmup Iteration  29: 550773.655 ops/s
# Warmup Iteration  30: 561196.621 ops/s
Iteration   1: 548875.155 ops/s
Iteration   2: 546434.836 ops/s
Iteration   3: 557149.077 ops/s
Iteration   4: 555105.486 ops/s
Iteration   5: 554499.289 ops/s
Iteration   6: 559685.498 ops/s
Iteration   7: 551502.250 ops/s
Iteration   8: 554335.923 ops/s
Iteration   9: 544752.599 ops/s
Iteration  10: 547094.743 ops/s
Iteration  11: 545925.875 ops/s
Iteration  12: 555674.433 ops/s
Iteration  13: 546431.718 ops/s
Iteration  14: 548712.009 ops/s
Iteration  15: 561419.009 ops/s
Iteration  16: 555817.219 ops/s
Iteration  17: 554900.901 ops/s
Iteration  18: 556466.677 ops/s
Iteration  19: 562421.139 ops/s
Iteration  20: 555724.990 ops/s
Iteration  21: 555635.303 ops/s
Iteration  22: 555092.654 ops/s
Iteration  23: 552536.858 ops/s
Iteration  24: 550242.808 ops/s
Iteration  25: 559600.296 ops/s
Iteration  26: 555328.695 ops/s
Iteration  27: 557760.302 ops/s
Iteration  28: 553336.729 ops/s
Iteration  29: 559797.115 ops/s
Iteration  30: 562351.163 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedList_with_null":
  554153.692 ±(99.9%) 3351.144 ops/s [Average]
  (min, avg, max) = (544752.599, 554153.692, 562421.139), stdev = 5015.834
  CI (99.9%): [550802.548, 557504.835] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_toSortedList_with_null  thrpt   30  554153.692 ± 3351.144  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 240487.240 ops/s
# Warmup Iteration   2: 454824.271 ops/s
# Warmup Iteration   3: 520535.056 ops/s
# Warmup Iteration   4: 517534.286 ops/s
# Warmup Iteration   5: 514890.805 ops/s
# Warmup Iteration   6: 439312.406 ops/s
# Warmup Iteration   7: 526390.349 ops/s
# Warmup Iteration   8: 522910.351 ops/s
# Warmup Iteration   9: 526259.036 ops/s
# Warmup Iteration  10: 519613.296 ops/s
# Warmup Iteration  11: 529558.095 ops/s
# Warmup Iteration  12: 523594.141 ops/s
# Warmup Iteration  13: 521583.088 ops/s
# Warmup Iteration  14: 519162.689 ops/s
# Warmup Iteration  15: 524718.729 ops/s
# Warmup Iteration  16: 522466.396 ops/s
# Warmup Iteration  17: 532283.629 ops/s
# Warmup Iteration  18: 519010.956 ops/s
# Warmup Iteration  19: 517006.435 ops/s
# Warmup Iteration  20: 519915.639 ops/s
# Warmup Iteration  21: 519227.732 ops/s
# Warmup Iteration  22: 525453.342 ops/s
# Warmup Iteration  23: 523443.019 ops/s
# Warmup Iteration  24: 524048.264 ops/s
# Warmup Iteration  25: 534104.476 ops/s
# Warmup Iteration  26: 536723.490 ops/s
# Warmup Iteration  27: 533985.770 ops/s
# Warmup Iteration  28: 535470.162 ops/s
# Warmup Iteration  29: 531105.718 ops/s
# Warmup Iteration  30: 536049.874 ops/s
Iteration   1: 536300.408 ops/s
Iteration   2: 539065.875 ops/s
Iteration   3: 537460.723 ops/s
Iteration   4: 536539.622 ops/s
Iteration   5: 535761.434 ops/s
Iteration   6: 534863.580 ops/s
Iteration   7: 538393.949 ops/s
Iteration   8: 540213.010 ops/s
Iteration   9: 539330.834 ops/s
Iteration  10: 533747.813 ops/s
Iteration  11: 534251.821 ops/s
Iteration  12: 537435.727 ops/s
Iteration  13: 535173.613 ops/s
Iteration  14: 534708.287 ops/s
Iteration  15: 534333.509 ops/s
Iteration  16: 539957.694 ops/s
Iteration  17: 539114.642 ops/s
Iteration  18: 537177.868 ops/s
Iteration  19: 538760.665 ops/s
Iteration  20: 538930.357 ops/s
Iteration  21: 540153.796 ops/s
Iteration  22: 538431.641 ops/s
Iteration  23: 539136.632 ops/s
Iteration  24: 538553.351 ops/s
Iteration  25: 539534.072 ops/s
Iteration  26: 537525.753 ops/s
Iteration  27: 538196.683 ops/s
Iteration  28: 538065.683 ops/s
Iteration  29: 540911.039 ops/s
Iteration  30: 539707.593 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedMap":
  537724.589 ±(99.9%) 1348.779 ops/s [Average]
  (min, avg, max) = (533747.813, 537724.589, 540911.039), stdev = 2018.789
  CI (99.9%): [536375.811, 539073.368] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_toSortedMap  thrpt   30  537724.589 ± 1348.779  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedMapBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedMapBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 210027.442 ops/s
# Warmup Iteration   2: 344529.041 ops/s
# Warmup Iteration   3: 414456.869 ops/s
# Warmup Iteration   4: 410873.217 ops/s
# Warmup Iteration   5: 402653.266 ops/s
# Warmup Iteration   6: 409489.321 ops/s
# Warmup Iteration   7: 347032.261 ops/s
# Warmup Iteration   8: 413999.307 ops/s
# Warmup Iteration   9: 413903.516 ops/s
# Warmup Iteration  10: 415014.316 ops/s
# Warmup Iteration  11: 414775.497 ops/s
# Warmup Iteration  12: 416733.507 ops/s
# Warmup Iteration  13: 414146.026 ops/s
# Warmup Iteration  14: 415776.891 ops/s
# Warmup Iteration  15: 414031.102 ops/s
# Warmup Iteration  16: 414284.632 ops/s
# Warmup Iteration  17: 405346.373 ops/s
# Warmup Iteration  18: 411211.838 ops/s
# Warmup Iteration  19: 403229.377 ops/s
# Warmup Iteration  20: 405907.564 ops/s
# Warmup Iteration  21: 401799.242 ops/s
# Warmup Iteration  22: 404099.321 ops/s
# Warmup Iteration  23: 402029.293 ops/s
# Warmup Iteration  24: 404328.548 ops/s
# Warmup Iteration  25: 397626.163 ops/s
# Warmup Iteration  26: 405118.733 ops/s
# Warmup Iteration  27: 405518.031 ops/s
# Warmup Iteration  28: 397590.810 ops/s
# Warmup Iteration  29: 403745.463 ops/s
# Warmup Iteration  30: 403577.491 ops/s
Iteration   1: 402719.728 ops/s
Iteration   2: 394227.567 ops/s
Iteration   3: 402317.623 ops/s
Iteration   4: 406129.524 ops/s
Iteration   5: 403148.494 ops/s
Iteration   6: 403821.897 ops/s
Iteration   7: 407895.983 ops/s
Iteration   8: 402470.087 ops/s
Iteration   9: 413539.711 ops/s
Iteration  10: 415157.446 ops/s
Iteration  11: 416601.276 ops/s
Iteration  12: 417613.429 ops/s
Iteration  13: 416649.681 ops/s
Iteration  14: 410633.239 ops/s
Iteration  15: 400572.158 ops/s
Iteration  16: 406072.111 ops/s
Iteration  17: 401866.143 ops/s
Iteration  18: 409346.374 ops/s
Iteration  19: 404951.344 ops/s
Iteration  20: 407891.526 ops/s
Iteration  21: 417253.612 ops/s
Iteration  22: 410754.605 ops/s
Iteration  23: 399504.819 ops/s
Iteration  24: 409052.035 ops/s
Iteration  25: 411989.863 ops/s
Iteration  26: 408209.200 ops/s
Iteration  27: 405841.220 ops/s
Iteration  28: 404411.578 ops/s
Iteration  29: 406092.032 ops/s
Iteration  30: 406575.399 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedMapBy":
  407443.657 ±(99.9%) 3842.046 ops/s [Average]
  (min, avg, max) = (394227.567, 407443.657, 417613.429), stdev = 5750.595
  CI (99.9%): [403601.610, 411285.703] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_toSortedMapBy  thrpt   30  407443.657 ± 3842.046  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedMap_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedMap_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 236142.403 ops/s
# Warmup Iteration   2: 441744.182 ops/s
# Warmup Iteration   3: 506853.456 ops/s
# Warmup Iteration   4: 509831.376 ops/s
# Warmup Iteration   5: 508489.409 ops/s
# Warmup Iteration   6: 425344.385 ops/s
# Warmup Iteration   7: 523680.988 ops/s
# Warmup Iteration   8: 521301.700 ops/s
# Warmup Iteration   9: 519926.354 ops/s
# Warmup Iteration  10: 521841.317 ops/s
# Warmup Iteration  11: 522591.979 ops/s
# Warmup Iteration  12: 521487.644 ops/s
# Warmup Iteration  13: 524712.234 ops/s
# Warmup Iteration  14: 524684.401 ops/s
# Warmup Iteration  15: 519939.430 ops/s
# Warmup Iteration  16: 520629.307 ops/s
# Warmup Iteration  17: 513546.497 ops/s
# Warmup Iteration  18: 522090.682 ops/s
# Warmup Iteration  19: 517635.333 ops/s
# Warmup Iteration  20: 518801.695 ops/s
# Warmup Iteration  21: 515724.494 ops/s
# Warmup Iteration  22: 521298.405 ops/s
# Warmup Iteration  23: 518440.698 ops/s
# Warmup Iteration  24: 520302.889 ops/s
# Warmup Iteration  25: 506921.383 ops/s
# Warmup Iteration  26: 517877.848 ops/s
# Warmup Iteration  27: 516496.296 ops/s
# Warmup Iteration  28: 516820.811 ops/s
# Warmup Iteration  29: 521293.302 ops/s
# Warmup Iteration  30: 517397.372 ops/s
Iteration   1: 515176.146 ops/s
Iteration   2: 519746.943 ops/s
Iteration   3: 520697.213 ops/s
Iteration   4: 520844.318 ops/s
Iteration   5: 521120.907 ops/s
Iteration   6: 507396.921 ops/s
Iteration   7: 516585.487 ops/s
Iteration   8: 519714.473 ops/s
Iteration   9: 512813.756 ops/s
Iteration  10: 523572.979 ops/s
Iteration  11: 522737.753 ops/s
Iteration  12: 523790.233 ops/s
Iteration  13: 520957.750 ops/s
Iteration  14: 523330.449 ops/s
Iteration  15: 525191.205 ops/s
Iteration  16: 524904.355 ops/s
Iteration  17: 524357.646 ops/s
Iteration  18: 522710.797 ops/s
Iteration  19: 518390.586 ops/s
Iteration  20: 524959.492 ops/s
Iteration  21: 523494.210 ops/s
Iteration  22: 525163.889 ops/s
Iteration  23: 521894.123 ops/s
Iteration  24: 517273.118 ops/s
Iteration  25: 509125.703 ops/s
Iteration  26: 514651.739 ops/s
Iteration  27: 524633.560 ops/s
Iteration  28: 523745.068 ops/s
Iteration  29: 524419.832 ops/s
Iteration  30: 526921.012 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedMap_with_comparator":
  520677.389 ±(99.9%) 3247.315 ops/s [Average]
  (min, avg, max) = (507396.921, 520677.389, 526921.012), stdev = 4860.429
  CI (99.9%): [517430.073, 523924.704] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_toSortedMap_with_comparator  thrpt   30  520677.389 ± 3247.315  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 75483.946 ops/s
# Warmup Iteration   2: 134798.572 ops/s
# Warmup Iteration   3: 160455.259 ops/s
# Warmup Iteration   4: 160917.344 ops/s
# Warmup Iteration   5: 161433.728 ops/s
# Warmup Iteration   6: 130126.874 ops/s
# Warmup Iteration   7: 161147.475 ops/s
# Warmup Iteration   8: 163742.412 ops/s
# Warmup Iteration   9: 163961.219 ops/s
# Warmup Iteration  10: 164075.470 ops/s
# Warmup Iteration  11: 163615.045 ops/s
# Warmup Iteration  12: 163636.547 ops/s
# Warmup Iteration  13: 157664.552 ops/s
# Warmup Iteration  14: 160218.419 ops/s
# Warmup Iteration  15: 162123.965 ops/s
# Warmup Iteration  16: 164347.362 ops/s
# Warmup Iteration  17: 164314.653 ops/s
# Warmup Iteration  18: 164440.072 ops/s
# Warmup Iteration  19: 164479.299 ops/s
# Warmup Iteration  20: 164362.670 ops/s
# Warmup Iteration  21: 164443.099 ops/s
# Warmup Iteration  22: 164719.376 ops/s
# Warmup Iteration  23: 164685.551 ops/s
# Warmup Iteration  24: 164294.825 ops/s
# Warmup Iteration  25: 164434.191 ops/s
# Warmup Iteration  26: 163500.362 ops/s
# Warmup Iteration  27: 163086.909 ops/s
# Warmup Iteration  28: 164494.000 ops/s
# Warmup Iteration  29: 164696.709 ops/s
# Warmup Iteration  30: 164646.965 ops/s
Iteration   1: 164142.881 ops/s
Iteration   2: 164311.585 ops/s
Iteration   3: 164460.686 ops/s
Iteration   4: 164312.774 ops/s
Iteration   5: 164657.639 ops/s
Iteration   6: 164723.592 ops/s
Iteration   7: 164484.241 ops/s
Iteration   8: 163882.262 ops/s
Iteration   9: 164009.064 ops/s
Iteration  10: 163825.941 ops/s
Iteration  11: 164889.990 ops/s
Iteration  12: 164049.198 ops/s
Iteration  13: 164923.896 ops/s
Iteration  14: 164614.456 ops/s
Iteration  15: 164907.906 ops/s
Iteration  16: 163282.390 ops/s
Iteration  17: 162582.501 ops/s
Iteration  18: 161613.002 ops/s
Iteration  19: 162007.500 ops/s
Iteration  20: 161416.632 ops/s
Iteration  21: 163887.334 ops/s
Iteration  22: 164226.386 ops/s
Iteration  23: 161938.504 ops/s
Iteration  24: 160016.740 ops/s
Iteration  25: 162902.271 ops/s
Iteration  26: 164593.964 ops/s
Iteration  27: 164393.325 ops/s
Iteration  28: 164232.320 ops/s
Iteration  29: 163968.249 ops/s
Iteration  30: 164143.937 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedSetBy":
  163713.372 ±(99.9%) 812.432 ops/s [Average]
  (min, avg, max) = (160016.740, 163713.372, 164923.896), stdev = 1216.011
  CI (99.9%): [162900.940, 164525.805] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  163713.372 ± 812.432  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 339815.426 ops/s
# Warmup Iteration   2: 724351.588 ops/s
# Warmup Iteration   3: 772549.310 ops/s
# Warmup Iteration   4: 765484.722 ops/s
# Warmup Iteration   5: 654798.751 ops/s
# Warmup Iteration   6: 782337.007 ops/s
# Warmup Iteration   7: 782042.143 ops/s
# Warmup Iteration   8: 780538.900 ops/s
# Warmup Iteration   9: 782732.205 ops/s
# Warmup Iteration  10: 781224.710 ops/s
# Warmup Iteration  11: 782380.852 ops/s
# Warmup Iteration  12: 781743.810 ops/s
# Warmup Iteration  13: 782843.955 ops/s
# Warmup Iteration  14: 782728.798 ops/s
# Warmup Iteration  15: 780172.638 ops/s
# Warmup Iteration  16: 781030.950 ops/s
# Warmup Iteration  17: 781704.991 ops/s
# Warmup Iteration  18: 781766.006 ops/s
# Warmup Iteration  19: 785843.162 ops/s
# Warmup Iteration  20: 778071.516 ops/s
# Warmup Iteration  21: 783921.336 ops/s
# Warmup Iteration  22: 784011.309 ops/s
# Warmup Iteration  23: 784488.742 ops/s
# Warmup Iteration  24: 785604.324 ops/s
# Warmup Iteration  25: 784390.572 ops/s
# Warmup Iteration  26: 784620.723 ops/s
# Warmup Iteration  27: 784939.664 ops/s
# Warmup Iteration  28: 784195.288 ops/s
# Warmup Iteration  29: 784279.649 ops/s
# Warmup Iteration  30: 784749.738 ops/s
Iteration   1: 785664.965 ops/s
Iteration   2: 785721.793 ops/s
Iteration   3: 785714.637 ops/s
Iteration   4: 782643.536 ops/s
Iteration   5: 785875.268 ops/s
Iteration   6: 786319.175 ops/s
Iteration   7: 783779.707 ops/s
Iteration   8: 782932.174 ops/s
Iteration   9: 785269.599 ops/s
Iteration  10: 775470.189 ops/s
Iteration  11: 778111.798 ops/s
Iteration  12: 782021.153 ops/s
Iteration  13: 784627.759 ops/s
Iteration  14: 770107.877 ops/s
Iteration  15: 776062.495 ops/s
Iteration  16: 764445.292 ops/s
Iteration  17: 781141.979 ops/s
Iteration  18: 780017.955 ops/s
Iteration  19: 783465.588 ops/s
Iteration  20: 776938.216 ops/s
Iteration  21: 768352.059 ops/s
Iteration  22: 778990.460 ops/s
Iteration  23: 775526.573 ops/s
Iteration  24: 779574.648 ops/s
Iteration  25: 786631.767 ops/s
Iteration  26: 786018.531 ops/s
Iteration  27: 783671.097 ops/s
Iteration  28: 780295.707 ops/s
Iteration  29: 787456.627 ops/s
Iteration  30: 785076.665 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedSet_natural_ordering":
  780930.843 ±(99.9%) 3850.418 ops/s [Average]
  (min, avg, max) = (764445.292, 780930.843, 787456.627), stdev = 5763.125
  CI (99.9%): [777080.425, 784781.261] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_toSortedSet_natural_ordering  thrpt   30  780930.843 ± 3850.418  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 328797.126 ops/s
# Warmup Iteration   2: 660726.238 ops/s
# Warmup Iteration   3: 713583.981 ops/s
# Warmup Iteration   4: 720467.910 ops/s
# Warmup Iteration   5: 600543.795 ops/s
# Warmup Iteration   6: 718948.666 ops/s
# Warmup Iteration   7: 725390.444 ops/s
# Warmup Iteration   8: 725680.629 ops/s
# Warmup Iteration   9: 724832.277 ops/s
# Warmup Iteration  10: 725167.854 ops/s
# Warmup Iteration  11: 725360.582 ops/s
# Warmup Iteration  12: 720494.104 ops/s
# Warmup Iteration  13: 722457.757 ops/s
# Warmup Iteration  14: 719616.031 ops/s
# Warmup Iteration  15: 712295.733 ops/s
# Warmup Iteration  16: 708409.967 ops/s
# Warmup Iteration  17: 704175.234 ops/s
# Warmup Iteration  18: 710534.798 ops/s
# Warmup Iteration  19: 710313.669 ops/s
# Warmup Iteration  20: 721647.488 ops/s
# Warmup Iteration  21: 725435.883 ops/s
# Warmup Iteration  22: 720080.858 ops/s
# Warmup Iteration  23: 721855.500 ops/s
# Warmup Iteration  24: 722341.274 ops/s
# Warmup Iteration  25: 721672.287 ops/s
# Warmup Iteration  26: 725584.715 ops/s
# Warmup Iteration  27: 727583.998 ops/s
# Warmup Iteration  28: 721181.083 ops/s
# Warmup Iteration  29: 707967.141 ops/s
# Warmup Iteration  30: 709219.667 ops/s
Iteration   1: 712057.578 ops/s
Iteration   2: 717924.420 ops/s
Iteration   3: 709603.633 ops/s
Iteration   4: 720110.970 ops/s
Iteration   5: 711409.407 ops/s
Iteration   6: 723257.405 ops/s
Iteration   7: 721007.243 ops/s
Iteration   8: 723683.824 ops/s
Iteration   9: 727317.905 ops/s
Iteration  10: 722433.827 ops/s
Iteration  11: 725921.874 ops/s
Iteration  12: 723718.070 ops/s
Iteration  13: 728896.463 ops/s
Iteration  14: 719286.375 ops/s
Iteration  15: 720704.673 ops/s
Iteration  16: 726051.941 ops/s
Iteration  17: 723969.477 ops/s
Iteration  18: 721458.555 ops/s
Iteration  19: 724063.120 ops/s
Iteration  20: 710101.117 ops/s
Iteration  21: 702391.686 ops/s
Iteration  22: 709347.869 ops/s
Iteration  23: 714018.898 ops/s
Iteration  24: 714251.133 ops/s
Iteration  25: 703375.911 ops/s
Iteration  26: 709125.226 ops/s
Iteration  27: 707542.940 ops/s
Iteration  28: 710235.285 ops/s
Iteration  29: 707599.037 ops/s
Iteration  30: 718959.267 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toSortedSet_with_comparator":
  716994.171 ±(99.9%) 5044.627 ops/s [Average]
  (min, avg, max) = (702391.686, 716994.171, 728896.463), stdev = 7550.561
  CI (99.9%): [711949.544, 722038.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_toSortedSet_with_comparator  thrpt   30  716994.171 ± 5044.627  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1619797.848 ops/s
# Warmup Iteration   2: 3186647.778 ops/s
# Warmup Iteration   3: 3370568.807 ops/s
# Warmup Iteration   4: 3401052.921 ops/s
# Warmup Iteration   5: 2838338.638 ops/s
# Warmup Iteration   6: 3410494.323 ops/s
# Warmup Iteration   7: 3408163.066 ops/s
# Warmup Iteration   8: 3353125.006 ops/s
# Warmup Iteration   9: 3333117.435 ops/s
# Warmup Iteration  10: 3326223.618 ops/s
# Warmup Iteration  11: 3333945.035 ops/s
# Warmup Iteration  12: 3342099.148 ops/s
# Warmup Iteration  13: 3312081.253 ops/s
# Warmup Iteration  14: 3365945.657 ops/s
# Warmup Iteration  15: 3402743.344 ops/s
# Warmup Iteration  16: 3389139.983 ops/s
# Warmup Iteration  17: 3404727.982 ops/s
# Warmup Iteration  18: 3425703.112 ops/s
# Warmup Iteration  19: 3400231.924 ops/s
# Warmup Iteration  20: 3403146.273 ops/s
# Warmup Iteration  21: 3375645.103 ops/s
# Warmup Iteration  22: 3376141.269 ops/s
# Warmup Iteration  23: 3410433.578 ops/s
# Warmup Iteration  24: 3395215.554 ops/s
# Warmup Iteration  25: 3374802.485 ops/s
# Warmup Iteration  26: 3361884.765 ops/s
# Warmup Iteration  27: 3349956.653 ops/s
# Warmup Iteration  28: 3388693.361 ops/s
# Warmup Iteration  29: 3405943.816 ops/s
# Warmup Iteration  30: 3346454.310 ops/s
Iteration   1: 3370693.140 ops/s
Iteration   2: 3362891.150 ops/s
Iteration   3: 3353290.643 ops/s
Iteration   4: 3375911.893 ops/s
Iteration   5: 3347310.066 ops/s
Iteration   6: 3347357.498 ops/s
Iteration   7: 3355865.899 ops/s
Iteration   8: 3340540.000 ops/s
Iteration   9: 3362392.950 ops/s
Iteration  10: 3382635.898 ops/s
Iteration  11: 3355565.672 ops/s
Iteration  12: 3396696.575 ops/s
Iteration  13: 3350428.502 ops/s
Iteration  14: 3324230.252 ops/s
Iteration  15: 3379363.967 ops/s
Iteration  16: 3362484.378 ops/s
Iteration  17: 3355694.307 ops/s
Iteration  18: 3333304.597 ops/s
Iteration  19: 3372297.556 ops/s
Iteration  20: 3337319.532 ops/s
Iteration  21: 3358046.940 ops/s
Iteration  22: 3374393.857 ops/s
Iteration  23: 3328866.871 ops/s
Iteration  24: 3348627.784 ops/s
Iteration  25: 3328597.331 ops/s
Iteration  26: 3336517.223 ops/s
Iteration  27: 3346219.063 ops/s
Iteration  28: 3312568.253 ops/s
Iteration  29: 3335228.266 ops/s
Iteration  30: 3339972.093 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toStack":
  3352510.405 ±(99.9%) 12887.166 ops/s [Average]
  (min, avg, max) = (3312568.253, 3352510.405, 3396696.575), stdev = 19288.904
  CI (99.9%): [3339623.240, 3365397.571] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score       Error  Units
TreeBagTest._Benchmark.benchmark_toStack  thrpt   30  3352510.405 ± 12887.166  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toStringOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toStringOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 242051.266 ops/s
# Warmup Iteration   2: 478684.107 ops/s
# Warmup Iteration   3: 508719.298 ops/s
# Warmup Iteration   4: 510493.873 ops/s
# Warmup Iteration   5: 428270.874 ops/s
# Warmup Iteration   6: 508747.707 ops/s
# Warmup Iteration   7: 516970.438 ops/s
# Warmup Iteration   8: 511874.081 ops/s
# Warmup Iteration   9: 509389.160 ops/s
# Warmup Iteration  10: 507656.538 ops/s
# Warmup Iteration  11: 505565.462 ops/s
# Warmup Iteration  12: 513639.286 ops/s
# Warmup Iteration  13: 510574.441 ops/s
# Warmup Iteration  14: 510174.834 ops/s
# Warmup Iteration  15: 507514.307 ops/s
# Warmup Iteration  16: 510609.725 ops/s
# Warmup Iteration  17: 506902.812 ops/s
# Warmup Iteration  18: 512876.377 ops/s
# Warmup Iteration  19: 513950.121 ops/s
# Warmup Iteration  20: 512344.965 ops/s
# Warmup Iteration  21: 508350.681 ops/s
# Warmup Iteration  22: 509383.217 ops/s
# Warmup Iteration  23: 510291.851 ops/s
# Warmup Iteration  24: 510639.119 ops/s
# Warmup Iteration  25: 508083.046 ops/s
# Warmup Iteration  26: 513834.326 ops/s
# Warmup Iteration  27: 504942.890 ops/s
# Warmup Iteration  28: 510112.468 ops/s
# Warmup Iteration  29: 505808.823 ops/s
# Warmup Iteration  30: 510211.626 ops/s
Iteration   1: 509576.033 ops/s
Iteration   2: 506258.109 ops/s
Iteration   3: 504593.452 ops/s
Iteration   4: 512121.825 ops/s
Iteration   5: 510060.094 ops/s
Iteration   6: 511768.770 ops/s
Iteration   7: 512491.908 ops/s
Iteration   8: 513280.762 ops/s
Iteration   9: 505398.312 ops/s
Iteration  10: 510242.205 ops/s
Iteration  11: 511406.389 ops/s
Iteration  12: 510321.527 ops/s
Iteration  13: 505062.670 ops/s
Iteration  14: 507714.926 ops/s
Iteration  15: 504241.310 ops/s
Iteration  16: 512343.346 ops/s
Iteration  17: 506688.623 ops/s
Iteration  18: 508209.738 ops/s
Iteration  19: 510075.592 ops/s
Iteration  20: 510644.085 ops/s
Iteration  21: 512987.261 ops/s
Iteration  22: 507537.927 ops/s
Iteration  23: 502914.765 ops/s
Iteration  24: 510396.088 ops/s
Iteration  25: 508212.678 ops/s
Iteration  26: 510384.172 ops/s
Iteration  27: 513540.499 ops/s
Iteration  28: 509209.641 ops/s
Iteration  29: 505414.006 ops/s
Iteration  30: 511828.293 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toStringOfItemToCount":
  509164.167 ±(99.9%) 1998.335 ops/s [Average]
  (min, avg, max) = (502914.765, 509164.167, 513540.499), stdev = 2991.014
  CI (99.9%): [507165.832, 511162.502] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_toStringOfItemToCount  thrpt   30  509164.167 ± 1998.335  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toString_with_collection_containing_self$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toString_with_collection_containing_self

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3762807.312 ops/s
# Warmup Iteration   2: 5786161.654 ops/s
# Warmup Iteration   3: 6626442.040 ops/s
# Warmup Iteration   4: 6649996.417 ops/s
# Warmup Iteration   5: 6642341.473 ops/s
# Warmup Iteration   6: 6410134.974 ops/s
# Warmup Iteration   7: 5746289.200 ops/s
# Warmup Iteration   8: 6610607.626 ops/s
# Warmup Iteration   9: 6647093.213 ops/s
# Warmup Iteration  10: 6656701.563 ops/s
# Warmup Iteration  11: 6669126.261 ops/s
# Warmup Iteration  12: 6636578.384 ops/s
# Warmup Iteration  13: 6653923.792 ops/s
# Warmup Iteration  14: 6624008.737 ops/s
# Warmup Iteration  15: 6674907.149 ops/s
# Warmup Iteration  16: 6611307.319 ops/s
# Warmup Iteration  17: 6570281.836 ops/s
# Warmup Iteration  18: 6637382.921 ops/s
# Warmup Iteration  19: 6619038.241 ops/s
# Warmup Iteration  20: 6666672.939 ops/s
# Warmup Iteration  21: 6624694.270 ops/s
# Warmup Iteration  22: 6579580.083 ops/s
# Warmup Iteration  23: 6653952.633 ops/s
# Warmup Iteration  24: 6714669.717 ops/s
# Warmup Iteration  25: 6628982.087 ops/s
# Warmup Iteration  26: 6768127.550 ops/s
# Warmup Iteration  27: 6685279.503 ops/s
# Warmup Iteration  28: 6689369.421 ops/s
# Warmup Iteration  29: 6704196.340 ops/s
# Warmup Iteration  30: 6635563.494 ops/s
Iteration   1: 6570849.524 ops/s
Iteration   2: 6659228.687 ops/s
Iteration   3: 6646778.704 ops/s
Iteration   4: 6600078.519 ops/s
Iteration   5: 6645437.783 ops/s
Iteration   6: 6638087.618 ops/s
Iteration   7: 6589328.010 ops/s
Iteration   8: 6652963.535 ops/s
Iteration   9: 6607142.775 ops/s
Iteration  10: 6665697.339 ops/s
Iteration  11: 6615812.258 ops/s
Iteration  12: 6675559.282 ops/s
Iteration  13: 6698131.585 ops/s
Iteration  14: 6694101.257 ops/s
Iteration  15: 6733277.926 ops/s
Iteration  16: 6715305.273 ops/s
Iteration  17: 6644191.305 ops/s
Iteration  18: 6618487.526 ops/s
Iteration  19: 6689547.893 ops/s
Iteration  20: 6776204.695 ops/s
Iteration  21: 6746301.390 ops/s
Iteration  22: 6702709.799 ops/s
Iteration  23: 6728092.262 ops/s
Iteration  24: 6752971.863 ops/s
Iteration  25: 6700028.486 ops/s
Iteration  26: 6771548.563 ops/s
Iteration  27: 6793801.048 ops/s
Iteration  28: 6760088.069 ops/s
Iteration  29: 6776603.491 ops/s
Iteration  30: 6795451.276 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toString_with_collection_containing_self":
  6688793.591 ±(99.9%) 43237.381 ops/s [Average]
  (min, avg, max) = (6570849.524, 6688793.591, 6795451.276), stdev = 64715.682
  CI (99.9%): [6645556.210, 6732030.973] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
TreeBagTest._Benchmark.benchmark_toString_with_collection_containing_self  thrpt   30  6688793.591 ± 43237.381  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_topOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_topOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 96929.426 ops/s
# Warmup Iteration   2: 147103.077 ops/s
# Warmup Iteration   3: 180863.227 ops/s
# Warmup Iteration   4: 178025.441 ops/s
# Warmup Iteration   5: 179522.662 ops/s
# Warmup Iteration   6: 179765.870 ops/s
# Warmup Iteration   7: 150943.749 ops/s
# Warmup Iteration   8: 181181.061 ops/s
# Warmup Iteration   9: 180361.677 ops/s
# Warmup Iteration  10: 180854.823 ops/s
# Warmup Iteration  11: 180144.508 ops/s
# Warmup Iteration  12: 180327.329 ops/s
# Warmup Iteration  13: 180647.450 ops/s
# Warmup Iteration  14: 180201.025 ops/s
# Warmup Iteration  15: 179910.166 ops/s
# Warmup Iteration  16: 179439.001 ops/s
# Warmup Iteration  17: 180709.591 ops/s
# Warmup Iteration  18: 182309.401 ops/s
# Warmup Iteration  19: 182470.234 ops/s
# Warmup Iteration  20: 182148.339 ops/s
# Warmup Iteration  21: 182235.275 ops/s
# Warmup Iteration  22: 182381.433 ops/s
# Warmup Iteration  23: 183416.269 ops/s
# Warmup Iteration  24: 182828.368 ops/s
# Warmup Iteration  25: 181976.134 ops/s
# Warmup Iteration  26: 181527.624 ops/s
# Warmup Iteration  27: 182871.593 ops/s
# Warmup Iteration  28: 181898.522 ops/s
# Warmup Iteration  29: 181461.016 ops/s
# Warmup Iteration  30: 179699.053 ops/s
Iteration   1: 179375.117 ops/s
Iteration   2: 181047.884 ops/s
Iteration   3: 181818.099 ops/s
Iteration   4: 182551.612 ops/s
Iteration   5: 182387.624 ops/s
Iteration   6: 180653.949 ops/s
Iteration   7: 180915.402 ops/s
Iteration   8: 181441.881 ops/s
Iteration   9: 179433.011 ops/s
Iteration  10: 178184.670 ops/s
Iteration  11: 183266.239 ops/s
Iteration  12: 183071.637 ops/s
Iteration  13: 181772.619 ops/s
Iteration  14: 182826.625 ops/s
Iteration  15: 182790.826 ops/s
Iteration  16: 182492.210 ops/s
Iteration  17: 181182.347 ops/s
Iteration  18: 179357.114 ops/s
Iteration  19: 180441.734 ops/s
Iteration  20: 179426.891 ops/s
Iteration  21: 180341.917 ops/s
Iteration  22: 180378.163 ops/s
Iteration  23: 180350.726 ops/s
Iteration  24: 179006.862 ops/s
Iteration  25: 178343.974 ops/s
Iteration  26: 180396.606 ops/s
Iteration  27: 177518.723 ops/s
Iteration  28: 180187.367 ops/s
Iteration  29: 183302.189 ops/s
Iteration  30: 183111.584 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_topOccurrences":
  180912.520 ±(99.9%) 1092.927 ops/s [Average]
  (min, avg, max) = (177518.723, 180912.520, 183302.189), stdev = 1635.842
  CI (99.9%): [179819.593, 182005.447] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_topOccurrences  thrpt   30  180912.520 ± 1092.927  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 887746.507 ops/s
# Warmup Iteration   2: 1703236.240 ops/s
# Warmup Iteration   3: 1878440.423 ops/s
# Warmup Iteration   4: 1882887.057 ops/s
# Warmup Iteration   5: 1641514.681 ops/s
# Warmup Iteration   6: 1767561.140 ops/s
# Warmup Iteration   7: 1857486.942 ops/s
# Warmup Iteration   8: 1884714.581 ops/s
# Warmup Iteration   9: 1889649.795 ops/s
# Warmup Iteration  10: 1879831.262 ops/s
# Warmup Iteration  11: 1877689.204 ops/s
# Warmup Iteration  12: 1888448.675 ops/s
# Warmup Iteration  13: 1876581.451 ops/s
# Warmup Iteration  14: 1866950.054 ops/s
# Warmup Iteration  15: 1866814.309 ops/s
# Warmup Iteration  16: 1884544.912 ops/s
# Warmup Iteration  17: 1859978.803 ops/s
# Warmup Iteration  18: 1873413.861 ops/s
# Warmup Iteration  19: 1862884.732 ops/s
# Warmup Iteration  20: 1890109.130 ops/s
# Warmup Iteration  21: 1891512.494 ops/s
# Warmup Iteration  22: 1887808.663 ops/s
# Warmup Iteration  23: 1845206.852 ops/s
# Warmup Iteration  24: 1828306.489 ops/s
# Warmup Iteration  25: 1810148.258 ops/s
# Warmup Iteration  26: 1780246.216 ops/s
# Warmup Iteration  27: 1780354.276 ops/s
# Warmup Iteration  28: 1862182.997 ops/s
# Warmup Iteration  29: 1818956.772 ops/s
# Warmup Iteration  30: 1863282.829 ops/s
Iteration   1: 1887353.031 ops/s
Iteration   2: 1869551.161 ops/s
Iteration   3: 1814332.591 ops/s
Iteration   4: 1806235.591 ops/s
Iteration   5: 1857564.191 ops/s
Iteration   6: 1880258.097 ops/s
Iteration   7: 1805342.318 ops/s
Iteration   8: 1791482.587 ops/s
Iteration   9: 1842220.901 ops/s
Iteration  10: 1802342.225 ops/s
Iteration  11: 1798176.819 ops/s
Iteration  12: 1848353.126 ops/s
Iteration  13: 1820720.117 ops/s
Iteration  14: 1774555.105 ops/s
Iteration  15: 1788572.606 ops/s
Iteration  16: 1815029.329 ops/s
Iteration  17: 1780343.734 ops/s
Iteration  18: 1794830.982 ops/s
Iteration  19: 1810630.549 ops/s
Iteration  20: 1776583.657 ops/s
Iteration  21: 1783833.781 ops/s
Iteration  22: 1774174.881 ops/s
Iteration  23: 1834982.618 ops/s
Iteration  24: 1880660.653 ops/s
Iteration  25: 1799859.641 ops/s
Iteration  26: 1812461.861 ops/s
Iteration  27: 1837967.319 ops/s
Iteration  28: 1806626.480 ops/s
Iteration  29: 1816960.706 ops/s
Iteration  30: 1786476.370 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_with":
  1816616.101 ±(99.9%) 22086.460 ops/s [Average]
  (min, avg, max) = (1774174.881, 1816616.101, 1887353.031), stdev = 33057.975
  CI (99.9%): [1794529.641, 1838702.560] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt        Score       Error  Units
TreeBagTest._Benchmark.benchmark_with  thrpt   30  1816616.101 ± 22086.460  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 726353.682 ops/s
# Warmup Iteration   2: 1296769.885 ops/s
# Warmup Iteration   3: 1436811.474 ops/s
# Warmup Iteration   4: 1485173.975 ops/s
# Warmup Iteration   5: 1451939.508 ops/s
# Warmup Iteration   6: 1211141.819 ops/s
# Warmup Iteration   7: 1467194.623 ops/s
# Warmup Iteration   8: 1465503.888 ops/s
# Warmup Iteration   9: 1448474.665 ops/s
# Warmup Iteration  10: 1504381.910 ops/s
# Warmup Iteration  11: 1516000.696 ops/s
# Warmup Iteration  12: 1481215.259 ops/s
# Warmup Iteration  13: 1475422.730 ops/s
# Warmup Iteration  14: 1479292.674 ops/s
# Warmup Iteration  15: 1461820.817 ops/s
# Warmup Iteration  16: 1524770.416 ops/s
# Warmup Iteration  17: 1480941.488 ops/s
# Warmup Iteration  18: 1470182.114 ops/s
# Warmup Iteration  19: 1456652.307 ops/s
# Warmup Iteration  20: 1459838.805 ops/s
# Warmup Iteration  21: 1480431.940 ops/s
# Warmup Iteration  22: 1498572.610 ops/s
# Warmup Iteration  23: 1439515.922 ops/s
# Warmup Iteration  24: 1455760.720 ops/s
# Warmup Iteration  25: 1445391.708 ops/s
# Warmup Iteration  26: 1468943.981 ops/s
# Warmup Iteration  27: 1523688.420 ops/s
# Warmup Iteration  28: 1491049.598 ops/s
# Warmup Iteration  29: 1493980.657 ops/s
# Warmup Iteration  30: 1459517.748 ops/s
Iteration   1: 1466709.671 ops/s
Iteration   2: 1461704.865 ops/s
Iteration   3: 1436930.658 ops/s
Iteration   4: 1478764.040 ops/s
Iteration   5: 1498299.348 ops/s
Iteration   6: 1528678.367 ops/s
Iteration   7: 1437508.637 ops/s
Iteration   8: 1475435.139 ops/s
Iteration   9: 1526418.871 ops/s
Iteration  10: 1526453.001 ops/s
Iteration  11: 1526427.898 ops/s
Iteration  12: 1527533.195 ops/s
Iteration  13: 1451749.638 ops/s
Iteration  14: 1462886.406 ops/s
Iteration  15: 1439610.697 ops/s
Iteration  16: 1468843.301 ops/s
Iteration  17: 1499958.701 ops/s
Iteration  18: 1522098.086 ops/s
Iteration  19: 1526620.202 ops/s
Iteration  20: 1504447.775 ops/s
Iteration  21: 1442381.491 ops/s
Iteration  22: 1445586.824 ops/s
Iteration  23: 1435592.813 ops/s
Iteration  24: 1454660.649 ops/s
Iteration  25: 1499937.522 ops/s
Iteration  26: 1442398.109 ops/s
Iteration  27: 1426821.993 ops/s
Iteration  28: 1439715.716 ops/s
Iteration  29: 1439081.221 ops/s
Iteration  30: 1443041.178 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_withAll":
  1474543.200 ±(99.9%) 23876.487 ops/s [Average]
  (min, avg, max) = (1426821.993, 1474543.200, 1528678.367), stdev = 35737.204
  CI (99.9%): [1450666.714, 1498419.687] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score       Error  Units
TreeBagTest._Benchmark.benchmark_withAll  thrpt   30  1474543.200 ± 23876.487  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1071001.152 ops/s
# Warmup Iteration   2: 1911698.255 ops/s
# Warmup Iteration   3: 2218110.141 ops/s
# Warmup Iteration   4: 2231624.247 ops/s
# Warmup Iteration   5: 2235274.890 ops/s
# Warmup Iteration   6: 1821580.922 ops/s
# Warmup Iteration   7: 2250729.704 ops/s
# Warmup Iteration   8: 2255608.384 ops/s
# Warmup Iteration   9: 2231422.908 ops/s
# Warmup Iteration  10: 2251507.375 ops/s
# Warmup Iteration  11: 2266386.703 ops/s
# Warmup Iteration  12: 2289438.932 ops/s
# Warmup Iteration  13: 2261453.327 ops/s
# Warmup Iteration  14: 2222709.567 ops/s
# Warmup Iteration  15: 2210483.810 ops/s
# Warmup Iteration  16: 2234041.619 ops/s
# Warmup Iteration  17: 2254995.875 ops/s
# Warmup Iteration  18: 2305607.770 ops/s
# Warmup Iteration  19: 2286694.154 ops/s
# Warmup Iteration  20: 2234852.224 ops/s
# Warmup Iteration  21: 2217869.779 ops/s
# Warmup Iteration  22: 2265339.239 ops/s
# Warmup Iteration  23: 2235910.854 ops/s
# Warmup Iteration  24: 2287192.270 ops/s
# Warmup Iteration  25: 2270408.055 ops/s
# Warmup Iteration  26: 2280800.655 ops/s
# Warmup Iteration  27: 2301906.234 ops/s
# Warmup Iteration  28: 2254903.978 ops/s
# Warmup Iteration  29: 2363408.683 ops/s
# Warmup Iteration  30: 2291540.461 ops/s
Iteration   1: 2234061.965 ops/s
Iteration   2: 2246321.559 ops/s
Iteration   3: 2239511.823 ops/s
Iteration   4: 2255121.164 ops/s
Iteration   5: 2207071.655 ops/s
Iteration   6: 2237060.217 ops/s
Iteration   7: 2253246.718 ops/s
Iteration   8: 2252907.350 ops/s
Iteration   9: 2246130.338 ops/s
Iteration  10: 2234429.450 ops/s
Iteration  11: 2253614.494 ops/s
Iteration  12: 2199941.424 ops/s
Iteration  13: 2206510.032 ops/s
Iteration  14: 2221053.338 ops/s
Iteration  15: 2281486.317 ops/s
Iteration  16: 2321702.001 ops/s
Iteration  17: 2365526.121 ops/s
Iteration  18: 2291169.005 ops/s
Iteration  19: 2204803.737 ops/s
Iteration  20: 2272529.910 ops/s
Iteration  21: 2251508.857 ops/s
Iteration  22: 2233990.948 ops/s
Iteration  23: 2220968.104 ops/s
Iteration  24: 2371329.187 ops/s
Iteration  25: 2315522.203 ops/s
Iteration  26: 2298126.242 ops/s
Iteration  27: 2266264.656 ops/s
Iteration  28: 2275920.940 ops/s
Iteration  29: 2270446.973 ops/s
Iteration  30: 2313804.142 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_without":
  2261402.696 ±(99.9%) 29259.210 ops/s [Average]
  (min, avg, max) = (2199941.424, 2261402.696, 2371329.187), stdev = 43793.811
  CI (99.9%): [2232143.486, 2290661.906] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score       Error  Units
TreeBagTest._Benchmark.benchmark_without  thrpt   30  2261402.696 ± 29259.210  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 816323.104 ops/s
# Warmup Iteration   2: 1482541.982 ops/s
# Warmup Iteration   3: 1713251.297 ops/s
# Warmup Iteration   4: 1731511.824 ops/s
# Warmup Iteration   5: 1731531.122 ops/s
# Warmup Iteration   6: 1434589.603 ops/s
# Warmup Iteration   7: 1761392.877 ops/s
# Warmup Iteration   8: 1703884.796 ops/s
# Warmup Iteration   9: 1758804.583 ops/s
# Warmup Iteration  10: 1757778.282 ops/s
# Warmup Iteration  11: 1742902.804 ops/s
# Warmup Iteration  12: 1737295.846 ops/s
# Warmup Iteration  13: 1733242.646 ops/s
# Warmup Iteration  14: 1704649.435 ops/s
# Warmup Iteration  15: 1744428.629 ops/s
# Warmup Iteration  16: 1744464.986 ops/s
# Warmup Iteration  17: 1768291.421 ops/s
# Warmup Iteration  18: 1721179.883 ops/s
# Warmup Iteration  19: 1702537.124 ops/s
# Warmup Iteration  20: 1721299.646 ops/s
# Warmup Iteration  21: 1733214.792 ops/s
# Warmup Iteration  22: 1706215.712 ops/s
# Warmup Iteration  23: 1779987.425 ops/s
# Warmup Iteration  24: 1754524.766 ops/s
# Warmup Iteration  25: 1732453.119 ops/s
# Warmup Iteration  26: 1768774.163 ops/s
# Warmup Iteration  27: 1715358.022 ops/s
# Warmup Iteration  28: 1708731.993 ops/s
# Warmup Iteration  29: 1782495.642 ops/s
# Warmup Iteration  30: 1731774.355 ops/s
Iteration   1: 1693811.050 ops/s
Iteration   2: 1726814.519 ops/s
Iteration   3: 1716873.842 ops/s
Iteration   4: 1706336.896 ops/s
Iteration   5: 1721826.033 ops/s
Iteration   6: 1713967.263 ops/s
Iteration   7: 1730704.824 ops/s
Iteration   8: 1676515.416 ops/s
Iteration   9: 1682999.310 ops/s
Iteration  10: 1685592.871 ops/s
Iteration  11: 1711531.723 ops/s
Iteration  12: 1703471.268 ops/s
Iteration  13: 1755103.629 ops/s
Iteration  14: 1700226.111 ops/s
Iteration  15: 1736795.253 ops/s
Iteration  16: 1735503.272 ops/s
Iteration  17: 1719317.533 ops/s
Iteration  18: 1688505.330 ops/s
Iteration  19: 1718449.589 ops/s
Iteration  20: 1694481.468 ops/s
Iteration  21: 1665809.380 ops/s
Iteration  22: 1776013.401 ops/s
Iteration  23: 1758132.348 ops/s
Iteration  24: 1703871.391 ops/s
Iteration  25: 1705815.153 ops/s
Iteration  26: 1710811.023 ops/s
Iteration  27: 1721484.173 ops/s
Iteration  28: 1739199.414 ops/s
Iteration  29: 1711963.678 ops/s
Iteration  30: 1706683.355 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_withoutAll":
  1713953.684 ±(99.9%) 16296.295 ops/s [Average]
  (min, avg, max) = (1665809.380, 1713953.684, 1776013.401), stdev = 24391.530
  CI (99.9%): [1697657.389, 1730249.979] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
TreeBagTest._Benchmark.benchmark_withoutAll  thrpt   30  1713953.684 ± 16296.295  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 58018.004 ops/s
# Warmup Iteration   2: 71728.793 ops/s
# Warmup Iteration   3: 96303.525 ops/s
# Warmup Iteration   4: 99939.904 ops/s
# Warmup Iteration   5: 97826.814 ops/s
# Warmup Iteration   6: 98676.500 ops/s
# Warmup Iteration   7: 100434.219 ops/s
# Warmup Iteration   8: 99115.788 ops/s
# Warmup Iteration   9: 102875.683 ops/s
# Warmup Iteration  10: 102647.834 ops/s
# Warmup Iteration  11: 82592.323 ops/s
# Warmup Iteration  12: 97376.054 ops/s
# Warmup Iteration  13: 99562.826 ops/s
# Warmup Iteration  14: 100922.455 ops/s
# Warmup Iteration  15: 98866.470 ops/s
# Warmup Iteration  16: 101828.875 ops/s
# Warmup Iteration  17: 101116.665 ops/s
# Warmup Iteration  18: 99249.114 ops/s
# Warmup Iteration  19: 100322.352 ops/s
# Warmup Iteration  20: 101264.122 ops/s
# Warmup Iteration  21: 104554.962 ops/s
# Warmup Iteration  22: 98660.645 ops/s
# Warmup Iteration  23: 98827.961 ops/s
# Warmup Iteration  24: 98657.737 ops/s
# Warmup Iteration  25: 100609.264 ops/s
# Warmup Iteration  26: 98213.847 ops/s
# Warmup Iteration  27: 97562.760 ops/s
# Warmup Iteration  28: 102663.497 ops/s
# Warmup Iteration  29: 99386.014 ops/s
# Warmup Iteration  30: 99882.183 ops/s
Iteration   1: 102291.705 ops/s
Iteration   2: 105273.073 ops/s
Iteration   3: 99275.985 ops/s
Iteration   4: 99413.337 ops/s
Iteration   5: 98859.149 ops/s
Iteration   6: 101805.081 ops/s
Iteration   7: 99156.528 ops/s
Iteration   8: 99972.743 ops/s
Iteration   9: 99602.590 ops/s
Iteration  10: 98956.954 ops/s
Iteration  11: 102439.248 ops/s
Iteration  12: 105430.453 ops/s
Iteration  13: 105594.472 ops/s
Iteration  14: 101911.527 ops/s
Iteration  15: 99252.727 ops/s
Iteration  16: 100823.172 ops/s
Iteration  17: 99157.257 ops/s
Iteration  18: 98860.113 ops/s
Iteration  19: 101003.874 ops/s
Iteration  20: 101426.070 ops/s
Iteration  21: 100698.254 ops/s
Iteration  22: 100241.623 ops/s
Iteration  23: 99199.196 ops/s
Iteration  24: 100315.262 ops/s
Iteration  25: 99239.296 ops/s
Iteration  26: 102981.857 ops/s
Iteration  27: 99357.878 ops/s
Iteration  28: 99973.781 ops/s
Iteration  29: 97402.265 ops/s
Iteration  30: 101677.981 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_zip":
  100719.782 ±(99.9%) 1372.107 ops/s [Average]
  (min, avg, max) = (97402.265, 100719.782, 105594.472), stdev = 2053.705
  CI (99.9%): [99347.675, 102091.888] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_zip  thrpt   30  100719.782 ± 1372.107  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 142596.604 ops/s
# Warmup Iteration   2: 227659.160 ops/s
# Warmup Iteration   3: 289051.953 ops/s
# Warmup Iteration   4: 281322.757 ops/s
# Warmup Iteration   5: 283111.416 ops/s
# Warmup Iteration   6: 290448.618 ops/s
# Warmup Iteration   7: 235102.258 ops/s
# Warmup Iteration   8: 282357.104 ops/s
# Warmup Iteration   9: 284388.719 ops/s
# Warmup Iteration  10: 296388.625 ops/s
# Warmup Iteration  11: 286190.905 ops/s
# Warmup Iteration  12: 282835.054 ops/s
# Warmup Iteration  13: 285803.716 ops/s
# Warmup Iteration  14: 282098.858 ops/s
# Warmup Iteration  15: 280503.802 ops/s
# Warmup Iteration  16: 283158.379 ops/s
# Warmup Iteration  17: 284781.245 ops/s
# Warmup Iteration  18: 290171.130 ops/s
# Warmup Iteration  19: 297224.786 ops/s
# Warmup Iteration  20: 291070.107 ops/s
# Warmup Iteration  21: 292159.588 ops/s
# Warmup Iteration  22: 287608.433 ops/s
# Warmup Iteration  23: 298643.764 ops/s
# Warmup Iteration  24: 295113.574 ops/s
# Warmup Iteration  25: 285452.434 ops/s
# Warmup Iteration  26: 292599.379 ops/s
# Warmup Iteration  27: 287848.834 ops/s
# Warmup Iteration  28: 289571.244 ops/s
# Warmup Iteration  29: 284838.890 ops/s
# Warmup Iteration  30: 285000.966 ops/s
Iteration   1: 286299.171 ops/s
Iteration   2: 288616.803 ops/s
Iteration   3: 283833.673 ops/s
Iteration   4: 282583.146 ops/s
Iteration   5: 288406.484 ops/s
Iteration   6: 286714.170 ops/s
Iteration   7: 285066.787 ops/s
Iteration   8: 286729.054 ops/s
Iteration   9: 289579.648 ops/s
Iteration  10: 296083.527 ops/s
Iteration  11: 290990.599 ops/s
Iteration  12: 295812.648 ops/s
Iteration  13: 288109.252 ops/s
Iteration  14: 290522.883 ops/s
Iteration  15: 286416.870 ops/s
Iteration  16: 287593.155 ops/s
Iteration  17: 286898.848 ops/s
Iteration  18: 292469.845 ops/s
Iteration  19: 292506.882 ops/s
Iteration  20: 291006.642 ops/s
Iteration  21: 282663.166 ops/s
Iteration  22: 284336.502 ops/s
Iteration  23: 284968.041 ops/s
Iteration  24: 286373.132 ops/s
Iteration  25: 281088.435 ops/s
Iteration  26: 285182.063 ops/s
Iteration  27: 283870.604 ops/s
Iteration  28: 283323.735 ops/s
Iteration  29: 283920.083 ops/s
Iteration  30: 285269.585 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_zipWithIndex":
  287241.181 ±(99.9%) 2526.257 ops/s [Average]
  (min, avg, max) = (281088.435, 287241.181, 296083.527), stdev = 3781.183
  CI (99.9%): [284714.924, 289767.438] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_zipWithIndex  thrpt   30  287241.181 ± 2526.257  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 541832.151 ops/s
# Warmup Iteration   2: 637250.300 ops/s
# Warmup Iteration   3: 813872.249 ops/s
# Warmup Iteration   4: 808339.557 ops/s
# Warmup Iteration   5: 806209.796 ops/s
# Warmup Iteration   6: 818329.256 ops/s
# Warmup Iteration   7: 834722.943 ops/s
# Warmup Iteration   8: 809271.222 ops/s
# Warmup Iteration   9: 764764.200 ops/s
# Warmup Iteration  10: 723613.713 ops/s
# Warmup Iteration  11: 811548.518 ops/s
# Warmup Iteration  12: 826239.809 ops/s
# Warmup Iteration  13: 826533.405 ops/s
# Warmup Iteration  14: 814220.807 ops/s
# Warmup Iteration  15: 823086.644 ops/s
# Warmup Iteration  16: 835181.849 ops/s
# Warmup Iteration  17: 870453.250 ops/s
# Warmup Iteration  18: 875240.957 ops/s
# Warmup Iteration  19: 864360.712 ops/s
# Warmup Iteration  20: 869485.525 ops/s
# Warmup Iteration  21: 877857.996 ops/s
# Warmup Iteration  22: 867478.450 ops/s
# Warmup Iteration  23: 865415.597 ops/s
# Warmup Iteration  24: 883995.646 ops/s
# Warmup Iteration  25: 876610.227 ops/s
# Warmup Iteration  26: 868044.964 ops/s
# Warmup Iteration  27: 856495.552 ops/s
# Warmup Iteration  28: 856584.035 ops/s
# Warmup Iteration  29: 875378.755 ops/s
# Warmup Iteration  30: 855537.702 ops/s
Iteration   1: 850450.163 ops/s
Iteration   2: 849822.004 ops/s
Iteration   3: 843116.580 ops/s
Iteration   4: 867224.341 ops/s
Iteration   5: 865943.316 ops/s
Iteration   6: 867973.054 ops/s
Iteration   7: 861802.635 ops/s
Iteration   8: 859104.322 ops/s
Iteration   9: 855451.813 ops/s
Iteration  10: 858594.353 ops/s
Iteration  11: 852175.056 ops/s
Iteration  12: 855797.188 ops/s
Iteration  13: 846974.867 ops/s
Iteration  14: 854538.832 ops/s
Iteration  15: 861071.334 ops/s
Iteration  16: 873379.888 ops/s
Iteration  17: 856298.372 ops/s
Iteration  18: 849783.468 ops/s
Iteration  19: 851603.221 ops/s
Iteration  20: 850321.967 ops/s
Iteration  21: 855048.691 ops/s
Iteration  22: 839536.302 ops/s
Iteration  23: 855321.530 ops/s
Iteration  24: 881197.028 ops/s
Iteration  25: 906438.309 ops/s
Iteration  26: 906006.146 ops/s
Iteration  27: 845286.251 ops/s
Iteration  28: 891963.399 ops/s
Iteration  29: 850560.726 ops/s
Iteration  30: 867656.006 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_add":
  861014.705 ±(99.9%) 11055.735 ops/s [Average]
  (min, avg, max) = (839536.302, 861014.705, 906438.309), stdev = 16547.706
  CI (99.9%): [849958.970, 872070.441] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_add  thrpt   30  861014.705 ± 11055.735  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 532000.061 ops/s
# Warmup Iteration   2: 674097.331 ops/s
# Warmup Iteration   3: 854462.591 ops/s
# Warmup Iteration   4: 810287.858 ops/s
# Warmup Iteration   5: 805311.052 ops/s
# Warmup Iteration   6: 845459.495 ops/s
# Warmup Iteration   7: 852783.229 ops/s
# Warmup Iteration   8: 828866.004 ops/s
# Warmup Iteration   9: 689996.780 ops/s
# Warmup Iteration  10: 809616.704 ops/s
# Warmup Iteration  11: 811572.782 ops/s
# Warmup Iteration  12: 802856.610 ops/s
# Warmup Iteration  13: 814765.074 ops/s
# Warmup Iteration  14: 814461.185 ops/s
# Warmup Iteration  15: 849863.960 ops/s
# Warmup Iteration  16: 815728.220 ops/s
# Warmup Iteration  17: 874589.556 ops/s
# Warmup Iteration  18: 859574.740 ops/s
# Warmup Iteration  19: 878514.040 ops/s
# Warmup Iteration  20: 881275.126 ops/s
# Warmup Iteration  21: 860577.236 ops/s
# Warmup Iteration  22: 856556.965 ops/s
# Warmup Iteration  23: 871232.056 ops/s
# Warmup Iteration  24: 842084.531 ops/s
# Warmup Iteration  25: 850189.892 ops/s
# Warmup Iteration  26: 851712.538 ops/s
# Warmup Iteration  27: 899035.670 ops/s
# Warmup Iteration  28: 901174.958 ops/s
# Warmup Iteration  29: 864541.879 ops/s
# Warmup Iteration  30: 852817.259 ops/s
Iteration   1: 870625.071 ops/s
Iteration   2: 900505.838 ops/s
Iteration   3: 899336.854 ops/s
Iteration   4: 887337.702 ops/s
Iteration   5: 852882.578 ops/s
Iteration   6: 839848.558 ops/s
Iteration   7: 853286.826 ops/s
Iteration   8: 838414.158 ops/s
Iteration   9: 899101.007 ops/s
Iteration  10: 902092.647 ops/s
Iteration  11: 869188.245 ops/s
Iteration  12: 864368.398 ops/s
Iteration  13: 848910.803 ops/s
Iteration  14: 849127.701 ops/s
Iteration  15: 857662.167 ops/s
Iteration  16: 846702.242 ops/s
Iteration  17: 884695.267 ops/s
Iteration  18: 897850.476 ops/s
Iteration  19: 860720.964 ops/s
Iteration  20: 880000.126 ops/s
Iteration  21: 871234.789 ops/s
Iteration  22: 855087.113 ops/s
Iteration  23: 841963.557 ops/s
Iteration  24: 861139.051 ops/s
Iteration  25: 858831.359 ops/s
Iteration  26: 850323.611 ops/s
Iteration  27: 852186.162 ops/s
Iteration  28: 846672.093 ops/s
Iteration  29: 848326.818 ops/s
Iteration  30: 858759.502 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_addAll":
  864906.056 ±(99.9%) 13312.160 ops/s [Average]
  (min, avg, max) = (838414.158, 864906.056, 902092.647), stdev = 19925.016
  CI (99.9%): [851593.896, 878218.216] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_addAll  thrpt   30  864906.056 ± 13312.160  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 514574.147 ops/s
# Warmup Iteration   2: 607626.287 ops/s
# Warmup Iteration   3: 746019.898 ops/s
# Warmup Iteration   4: 742703.729 ops/s
# Warmup Iteration   5: 742365.076 ops/s
# Warmup Iteration   6: 745321.096 ops/s
# Warmup Iteration   7: 747667.839 ops/s
# Warmup Iteration   8: 773218.507 ops/s
# Warmup Iteration   9: 745399.988 ops/s
# Warmup Iteration  10: 618754.544 ops/s
# Warmup Iteration  11: 740548.649 ops/s
# Warmup Iteration  12: 746641.462 ops/s
# Warmup Iteration  13: 737444.026 ops/s
# Warmup Iteration  14: 755062.439 ops/s
# Warmup Iteration  15: 758078.664 ops/s
# Warmup Iteration  16: 754766.143 ops/s
# Warmup Iteration  17: 795637.176 ops/s
# Warmup Iteration  18: 792631.725 ops/s
# Warmup Iteration  19: 776004.914 ops/s
# Warmup Iteration  20: 802535.427 ops/s
# Warmup Iteration  21: 830685.473 ops/s
# Warmup Iteration  22: 817156.707 ops/s
# Warmup Iteration  23: 789980.973 ops/s
# Warmup Iteration  24: 781008.373 ops/s
# Warmup Iteration  25: 786827.853 ops/s
# Warmup Iteration  26: 771124.253 ops/s
# Warmup Iteration  27: 783594.870 ops/s
# Warmup Iteration  28: 774093.294 ops/s
# Warmup Iteration  29: 765864.383 ops/s
# Warmup Iteration  30: 779648.880 ops/s
Iteration   1: 830226.277 ops/s
Iteration   2: 785582.812 ops/s
Iteration   3: 793945.709 ops/s
Iteration   4: 788120.975 ops/s
Iteration   5: 780688.896 ops/s
Iteration   6: 781861.135 ops/s
Iteration   7: 765050.688 ops/s
Iteration   8: 773556.660 ops/s
Iteration   9: 800038.963 ops/s
Iteration  10: 787727.416 ops/s
Iteration  11: 777135.066 ops/s
Iteration  12: 815604.291 ops/s
Iteration  13: 818769.290 ops/s
Iteration  14: 831791.171 ops/s
Iteration  15: 796006.099 ops/s
Iteration  16: 777752.125 ops/s
Iteration  17: 774538.608 ops/s
Iteration  18: 772844.491 ops/s
Iteration  19: 779441.546 ops/s
Iteration  20: 780295.706 ops/s
Iteration  21: 767577.297 ops/s
Iteration  22: 782313.192 ops/s
Iteration  23: 787938.133 ops/s
Iteration  24: 776091.607 ops/s
Iteration  25: 775017.373 ops/s
Iteration  26: 793343.848 ops/s
Iteration  27: 778466.273 ops/s
Iteration  28: 777442.841 ops/s
Iteration  29: 793696.467 ops/s
Iteration  30: 783352.136 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_addAllIterable":
  787540.570 ±(99.9%) 11296.898 ops/s [Average]
  (min, avg, max) = (765050.688, 787540.570, 831791.171), stdev = 16908.666
  CI (99.9%): [776243.672, 798837.467] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_addAllIterable  thrpt   30  787540.570 ± 11296.898  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_addOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_addOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 533643.609 ops/s
# Warmup Iteration   2: 587937.120 ops/s
# Warmup Iteration   3: 785903.800 ops/s
# Warmup Iteration   4: 777411.104 ops/s
# Warmup Iteration   5: 768582.293 ops/s
# Warmup Iteration   6: 748716.416 ops/s
# Warmup Iteration   7: 747433.835 ops/s
# Warmup Iteration   8: 782513.966 ops/s
# Warmup Iteration   9: 745823.264 ops/s
# Warmup Iteration  10: 653297.162 ops/s
# Warmup Iteration  11: 781077.784 ops/s
# Warmup Iteration  12: 751583.847 ops/s
# Warmup Iteration  13: 749272.354 ops/s
# Warmup Iteration  14: 746303.939 ops/s
# Warmup Iteration  15: 745929.838 ops/s
# Warmup Iteration  16: 745677.251 ops/s
# Warmup Iteration  17: 795831.369 ops/s
# Warmup Iteration  18: 787149.421 ops/s
# Warmup Iteration  19: 788771.424 ops/s
# Warmup Iteration  20: 787254.581 ops/s
# Warmup Iteration  21: 805191.472 ops/s
# Warmup Iteration  22: 792014.516 ops/s
# Warmup Iteration  23: 804201.480 ops/s
# Warmup Iteration  24: 785951.037 ops/s
# Warmup Iteration  25: 807117.210 ops/s
# Warmup Iteration  26: 789336.200 ops/s
# Warmup Iteration  27: 798219.305 ops/s
# Warmup Iteration  28: 782297.346 ops/s
# Warmup Iteration  29: 804201.627 ops/s
# Warmup Iteration  30: 792956.381 ops/s
Iteration   1: 771435.667 ops/s
Iteration   2: 785930.375 ops/s
Iteration   3: 802722.827 ops/s
Iteration   4: 785604.358 ops/s
Iteration   5: 778568.545 ops/s
Iteration   6: 791441.453 ops/s
Iteration   7: 791954.767 ops/s
Iteration   8: 778892.994 ops/s
Iteration   9: 794325.536 ops/s
Iteration  10: 785442.490 ops/s
Iteration  11: 801088.044 ops/s
Iteration  12: 813833.764 ops/s
Iteration  13: 837456.861 ops/s
Iteration  14: 835912.252 ops/s
Iteration  15: 812073.201 ops/s
Iteration  16: 834143.270 ops/s
Iteration  17: 800956.594 ops/s
Iteration  18: 824216.086 ops/s
Iteration  19: 792079.934 ops/s
Iteration  20: 776851.783 ops/s
Iteration  21: 790201.623 ops/s
Iteration  22: 779973.122 ops/s
Iteration  23: 789465.654 ops/s
Iteration  24: 792050.715 ops/s
Iteration  25: 783476.481 ops/s
Iteration  26: 793742.911 ops/s
Iteration  27: 811294.042 ops/s
Iteration  28: 777074.416 ops/s
Iteration  29: 792570.817 ops/s
Iteration  30: 796388.103 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_addOccurrences":
  796705.623 ±(99.9%) 11949.851 ops/s [Average]
  (min, avg, max) = (771435.667, 796705.623, 837456.861), stdev = 17885.976
  CI (99.9%): [784755.772, 808655.474] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_addOccurrences  thrpt   30  796705.623 ± 11949.851  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_addOccurrences_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_addOccurrences_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 655529.199 ops/s
# Warmup Iteration   2: 677592.037 ops/s
# Warmup Iteration   3: 882612.722 ops/s
# Warmup Iteration   4: 896775.922 ops/s
# Warmup Iteration   5: 877855.520 ops/s
# Warmup Iteration   6: 887679.824 ops/s
# Warmup Iteration   7: 890358.890 ops/s
# Warmup Iteration   8: 894920.151 ops/s
# Warmup Iteration   9: 889088.642 ops/s
# Warmup Iteration  10: 891642.922 ops/s
# Warmup Iteration  11: 789639.065 ops/s
# Warmup Iteration  12: 886561.070 ops/s
# Warmup Iteration  13: 881093.409 ops/s
# Warmup Iteration  14: 887741.930 ops/s
# Warmup Iteration  15: 882847.129 ops/s
# Warmup Iteration  16: 879011.642 ops/s
# Warmup Iteration  17: 949453.521 ops/s
# Warmup Iteration  18: 944776.201 ops/s
# Warmup Iteration  19: 951755.486 ops/s
# Warmup Iteration  20: 949736.315 ops/s
# Warmup Iteration  21: 935759.384 ops/s
# Warmup Iteration  22: 941170.216 ops/s
# Warmup Iteration  23: 923274.987 ops/s
# Warmup Iteration  24: 941193.858 ops/s
# Warmup Iteration  25: 931546.743 ops/s
# Warmup Iteration  26: 950982.912 ops/s
# Warmup Iteration  27: 940408.626 ops/s
# Warmup Iteration  28: 945819.339 ops/s
# Warmup Iteration  29: 933130.371 ops/s
# Warmup Iteration  30: 936663.031 ops/s
Iteration   1: 936292.636 ops/s
Iteration   2: 959134.345 ops/s
Iteration   3: 961867.623 ops/s
Iteration   4: 917949.332 ops/s
Iteration   5: 915055.179 ops/s
Iteration   6: 923623.870 ops/s
Iteration   7: 933034.055 ops/s
Iteration   8: 960223.943 ops/s
Iteration   9: 956323.305 ops/s
Iteration  10: 952302.372 ops/s
Iteration  11: 925823.921 ops/s
Iteration  12: 964019.956 ops/s
Iteration  13: 962704.765 ops/s
Iteration  14: 969582.100 ops/s
Iteration  15: 956640.786 ops/s
Iteration  16: 953345.773 ops/s
Iteration  17: 939478.591 ops/s
Iteration  18: 933171.193 ops/s
Iteration  19: 957074.677 ops/s
Iteration  20: 955645.676 ops/s
Iteration  21: 952460.748 ops/s
Iteration  22: 927525.747 ops/s
Iteration  23: 937823.494 ops/s
Iteration  24: 941394.519 ops/s
Iteration  25: 940587.586 ops/s
Iteration  26: 956342.192 ops/s
Iteration  27: 955431.446 ops/s
Iteration  28: 956733.423 ops/s
Iteration  29: 959127.346 ops/s
Iteration  30: 943169.374 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_addOccurrences_throws":
  946796.332 ±(99.9%) 9933.094 ops/s [Average]
  (min, avg, max) = (915055.179, 946796.332, 969582.100), stdev = 14867.389
  CI (99.9%): [936863.238, 956729.427] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_addOccurrences_throws  thrpt   30  946796.332 ± 9933.094  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 445039.308 ops/s
# Warmup Iteration   2: 769838.083 ops/s
# Warmup Iteration   3: 870264.331 ops/s
# Warmup Iteration   4: 898400.611 ops/s
# Warmup Iteration   5: 876110.942 ops/s
# Warmup Iteration   6: 728921.301 ops/s
# Warmup Iteration   7: 891465.662 ops/s
# Warmup Iteration   8: 872548.996 ops/s
# Warmup Iteration   9: 859358.929 ops/s
# Warmup Iteration  10: 868136.111 ops/s
# Warmup Iteration  11: 866120.384 ops/s
# Warmup Iteration  12: 859585.308 ops/s
# Warmup Iteration  13: 872852.577 ops/s
# Warmup Iteration  14: 857319.145 ops/s
# Warmup Iteration  15: 859697.824 ops/s
# Warmup Iteration  16: 864139.181 ops/s
# Warmup Iteration  17: 868178.782 ops/s
# Warmup Iteration  18: 874349.811 ops/s
# Warmup Iteration  19: 866789.068 ops/s
# Warmup Iteration  20: 885782.084 ops/s
# Warmup Iteration  21: 890853.701 ops/s
# Warmup Iteration  22: 863366.920 ops/s
# Warmup Iteration  23: 871056.828 ops/s
# Warmup Iteration  24: 864994.311 ops/s
# Warmup Iteration  25: 860257.819 ops/s
# Warmup Iteration  26: 863049.571 ops/s
# Warmup Iteration  27: 884242.335 ops/s
# Warmup Iteration  28: 860590.619 ops/s
# Warmup Iteration  29: 878858.353 ops/s
# Warmup Iteration  30: 864010.916 ops/s
Iteration   1: 881700.799 ops/s
Iteration   2: 874192.572 ops/s
Iteration   3: 856508.704 ops/s
Iteration   4: 865356.644 ops/s
Iteration   5: 873670.430 ops/s
Iteration   6: 885690.807 ops/s
Iteration   7: 870218.660 ops/s
Iteration   8: 862773.231 ops/s
Iteration   9: 879734.063 ops/s
Iteration  10: 895838.314 ops/s
Iteration  11: 863373.323 ops/s
Iteration  12: 884691.638 ops/s
Iteration  13: 880362.523 ops/s
Iteration  14: 913829.273 ops/s
Iteration  15: 876417.185 ops/s
Iteration  16: 853262.874 ops/s
Iteration  17: 891582.340 ops/s
Iteration  18: 927225.487 ops/s
Iteration  19: 925814.033 ops/s
Iteration  20: 866640.083 ops/s
Iteration  21: 854507.482 ops/s
Iteration  22: 875974.172 ops/s
Iteration  23: 880906.914 ops/s
Iteration  24: 867599.729 ops/s
Iteration  25: 862958.621 ops/s
Iteration  26: 890279.455 ops/s
Iteration  27: 867689.794 ops/s
Iteration  28: 869477.160 ops/s
Iteration  29: 870174.152 ops/s
Iteration  30: 851872.790 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_aggregateByMutating":
  877344.108 ±(99.9%) 12704.636 ops/s [Average]
  (min, avg, max) = (851872.790, 877344.108, 927225.487), stdev = 19015.703
  CI (99.9%): [864639.472, 890048.745] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  877344.108 ± 12704.636  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 427761.946 ops/s
# Warmup Iteration   2: 749749.995 ops/s
# Warmup Iteration   3: 870215.269 ops/s
# Warmup Iteration   4: 864831.049 ops/s
# Warmup Iteration   5: 876690.482 ops/s
# Warmup Iteration   6: 711879.954 ops/s
# Warmup Iteration   7: 867206.905 ops/s
# Warmup Iteration   8: 877539.477 ops/s
# Warmup Iteration   9: 867059.891 ops/s
# Warmup Iteration  10: 868330.852 ops/s
# Warmup Iteration  11: 869022.829 ops/s
# Warmup Iteration  12: 859107.549 ops/s
# Warmup Iteration  13: 867855.496 ops/s
# Warmup Iteration  14: 885721.966 ops/s
# Warmup Iteration  15: 866881.401 ops/s
# Warmup Iteration  16: 870261.376 ops/s
# Warmup Iteration  17: 860211.201 ops/s
# Warmup Iteration  18: 876758.493 ops/s
# Warmup Iteration  19: 878420.742 ops/s
# Warmup Iteration  20: 904926.266 ops/s
# Warmup Iteration  21: 887903.429 ops/s
# Warmup Iteration  22: 864801.888 ops/s
# Warmup Iteration  23: 861467.462 ops/s
# Warmup Iteration  24: 864263.407 ops/s
# Warmup Iteration  25: 877003.463 ops/s
# Warmup Iteration  26: 887381.680 ops/s
# Warmup Iteration  27: 878743.172 ops/s
# Warmup Iteration  28: 886862.613 ops/s
# Warmup Iteration  29: 905084.310 ops/s
# Warmup Iteration  30: 908891.127 ops/s
Iteration   1: 873296.790 ops/s
Iteration   2: 868376.645 ops/s
Iteration   3: 892098.765 ops/s
Iteration   4: 878573.758 ops/s
Iteration   5: 871553.494 ops/s
Iteration   6: 879468.480 ops/s
Iteration   7: 924196.390 ops/s
Iteration   8: 921704.476 ops/s
Iteration   9: 924445.335 ops/s
Iteration  10: 890301.410 ops/s
Iteration  11: 925761.354 ops/s
Iteration  12: 923287.268 ops/s
Iteration  13: 919411.081 ops/s
Iteration  14: 860727.841 ops/s
Iteration  15: 866728.075 ops/s
Iteration  16: 882508.371 ops/s
Iteration  17: 922116.099 ops/s
Iteration  18: 903049.972 ops/s
Iteration  19: 869083.141 ops/s
Iteration  20: 881279.235 ops/s
Iteration  21: 868285.813 ops/s
Iteration  22: 885636.218 ops/s
Iteration  23: 869780.014 ops/s
Iteration  24: 862971.255 ops/s
Iteration  25: 872507.455 ops/s
Iteration  26: 870899.243 ops/s
Iteration  27: 867460.083 ops/s
Iteration  28: 859096.177 ops/s
Iteration  29: 854301.732 ops/s
Iteration  30: 859033.386 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_aggregateByNonMutating":
  884931.312 ±(99.9%) 15860.051 ops/s [Average]
  (min, avg, max) = (854301.732, 884931.312, 925761.354), stdev = 23738.579
  CI (99.9%): [869071.261, 900791.363] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  884931.312 ± 15860.051  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 526866.557 ops/s
# Warmup Iteration   2: 670807.894 ops/s
# Warmup Iteration   3: 858961.496 ops/s
# Warmup Iteration   4: 865617.494 ops/s
# Warmup Iteration   5: 879297.244 ops/s
# Warmup Iteration   6: 918080.912 ops/s
# Warmup Iteration   7: 881658.223 ops/s
# Warmup Iteration   8: 871581.003 ops/s
# Warmup Iteration   9: 743657.776 ops/s
# Warmup Iteration  10: 920085.341 ops/s
# Warmup Iteration  11: 905784.487 ops/s
# Warmup Iteration  12: 880884.830 ops/s
# Warmup Iteration  13: 909869.504 ops/s
# Warmup Iteration  14: 920404.168 ops/s
# Warmup Iteration  15: 916930.950 ops/s
# Warmup Iteration  16: 863868.247 ops/s
# Warmup Iteration  17: 864349.494 ops/s
# Warmup Iteration  18: 869587.810 ops/s
# Warmup Iteration  19: 861290.502 ops/s
# Warmup Iteration  20: 858228.159 ops/s
# Warmup Iteration  21: 859853.655 ops/s
# Warmup Iteration  22: 868781.000 ops/s
# Warmup Iteration  23: 861084.596 ops/s
# Warmup Iteration  24: 863932.170 ops/s
# Warmup Iteration  25: 917077.958 ops/s
# Warmup Iteration  26: 896701.309 ops/s
# Warmup Iteration  27: 911386.521 ops/s
# Warmup Iteration  28: 858262.816 ops/s
# Warmup Iteration  29: 886169.794 ops/s
# Warmup Iteration  30: 875486.308 ops/s
Iteration   1: 876068.544 ops/s
Iteration   2: 861194.180 ops/s
Iteration   3: 865803.121 ops/s
Iteration   4: 859227.725 ops/s
Iteration   5: 862050.238 ops/s
Iteration   6: 873630.043 ops/s
Iteration   7: 857111.171 ops/s
Iteration   8: 864861.353 ops/s
Iteration   9: 893633.732 ops/s
Iteration  10: 870330.818 ops/s
Iteration  11: 870487.138 ops/s
Iteration  12: 873773.348 ops/s
Iteration  13: 863126.677 ops/s
Iteration  14: 864719.101 ops/s
Iteration  15: 847802.420 ops/s
Iteration  16: 903790.684 ops/s
Iteration  17: 921198.023 ops/s
Iteration  18: 902054.687 ops/s
Iteration  19: 887781.581 ops/s
Iteration  20: 874331.125 ops/s
Iteration  21: 875644.832 ops/s
Iteration  22: 904260.533 ops/s
Iteration  23: 860068.995 ops/s
Iteration  24: 886595.390 ops/s
Iteration  25: 854653.423 ops/s
Iteration  26: 881696.284 ops/s
Iteration  27: 877875.059 ops/s
Iteration  28: 880759.429 ops/s
Iteration  29: 881315.926 ops/s
Iteration  30: 887865.413 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_allSatisfy":
  876123.700 ±(99.9%) 11258.855 ops/s [Average]
  (min, avg, max) = (847802.420, 876123.700, 921198.023), stdev = 16851.725
  CI (99.9%): [864864.845, 887382.555] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_allSatisfy  thrpt   30  876123.700 ± 11258.855  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 507354.882 ops/s
# Warmup Iteration   2: 641600.527 ops/s
# Warmup Iteration   3: 842438.621 ops/s
# Warmup Iteration   4: 843720.902 ops/s
# Warmup Iteration   5: 870476.022 ops/s
# Warmup Iteration   6: 831346.968 ops/s
# Warmup Iteration   7: 836335.411 ops/s
# Warmup Iteration   8: 870801.391 ops/s
# Warmup Iteration   9: 773286.055 ops/s
# Warmup Iteration  10: 817085.826 ops/s
# Warmup Iteration  11: 841756.093 ops/s
# Warmup Iteration  12: 829825.575 ops/s
# Warmup Iteration  13: 827056.424 ops/s
# Warmup Iteration  14: 868735.869 ops/s
# Warmup Iteration  15: 838952.425 ops/s
# Warmup Iteration  16: 853094.380 ops/s
# Warmup Iteration  17: 851384.737 ops/s
# Warmup Iteration  18: 859366.426 ops/s
# Warmup Iteration  19: 842048.609 ops/s
# Warmup Iteration  20: 862186.544 ops/s
# Warmup Iteration  21: 839355.296 ops/s
# Warmup Iteration  22: 837379.034 ops/s
# Warmup Iteration  23: 843437.949 ops/s
# Warmup Iteration  24: 870315.021 ops/s
# Warmup Iteration  25: 836927.030 ops/s
# Warmup Iteration  26: 856984.712 ops/s
# Warmup Iteration  27: 858345.026 ops/s
# Warmup Iteration  28: 832656.937 ops/s
# Warmup Iteration  29: 841275.082 ops/s
# Warmup Iteration  30: 858376.774 ops/s
Iteration   1: 866851.564 ops/s
Iteration   2: 846027.504 ops/s
Iteration   3: 853486.962 ops/s
Iteration   4: 847034.360 ops/s
Iteration   5: 829260.436 ops/s
Iteration   6: 829930.155 ops/s
Iteration   7: 851197.899 ops/s
Iteration   8: 844454.026 ops/s
Iteration   9: 831189.129 ops/s
Iteration  10: 839215.989 ops/s
Iteration  11: 857880.863 ops/s
Iteration  12: 843950.403 ops/s
Iteration  13: 847700.929 ops/s
Iteration  14: 850033.978 ops/s
Iteration  15: 832969.590 ops/s
Iteration  16: 844358.691 ops/s
Iteration  17: 846054.375 ops/s
Iteration  18: 836290.365 ops/s
Iteration  19: 840256.704 ops/s
Iteration  20: 846185.132 ops/s
Iteration  21: 838138.478 ops/s
Iteration  22: 826885.186 ops/s
Iteration  23: 835856.894 ops/s
Iteration  24: 835897.478 ops/s
Iteration  25: 837194.179 ops/s
Iteration  26: 833380.926 ops/s
Iteration  27: 857107.692 ops/s
Iteration  28: 859410.573 ops/s
Iteration  29: 861865.990 ops/s
Iteration  30: 857078.208 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_allSatisfyWith":
  844238.155 ±(99.9%) 7065.122 ops/s [Average]
  (min, avg, max) = (826885.186, 844238.155, 866851.564), stdev = 10574.743
  CI (99.9%): [837173.034, 851303.277] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  844238.155 ± 7065.122  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_allSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_allSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 512860.904 ops/s
# Warmup Iteration   2: 641641.669 ops/s
# Warmup Iteration   3: 854984.573 ops/s
# Warmup Iteration   4: 878887.378 ops/s
# Warmup Iteration   5: 886478.293 ops/s
# Warmup Iteration   6: 875535.288 ops/s
# Warmup Iteration   7: 854225.626 ops/s
# Warmup Iteration   8: 863286.398 ops/s
# Warmup Iteration   9: 697771.301 ops/s
# Warmup Iteration  10: 853704.670 ops/s
# Warmup Iteration  11: 855717.539 ops/s
# Warmup Iteration  12: 851118.784 ops/s
# Warmup Iteration  13: 855477.174 ops/s
# Warmup Iteration  14: 851199.037 ops/s
# Warmup Iteration  15: 852610.334 ops/s
# Warmup Iteration  16: 862461.962 ops/s
# Warmup Iteration  17: 854449.615 ops/s
# Warmup Iteration  18: 853653.751 ops/s
# Warmup Iteration  19: 913259.287 ops/s
# Warmup Iteration  20: 859904.160 ops/s
# Warmup Iteration  21: 853783.860 ops/s
# Warmup Iteration  22: 856149.424 ops/s
# Warmup Iteration  23: 855323.879 ops/s
# Warmup Iteration  24: 851973.871 ops/s
# Warmup Iteration  25: 856032.520 ops/s
# Warmup Iteration  26: 853454.109 ops/s
# Warmup Iteration  27: 858179.476 ops/s
# Warmup Iteration  28: 853882.143 ops/s
# Warmup Iteration  29: 861248.293 ops/s
# Warmup Iteration  30: 853158.816 ops/s
Iteration   1: 851525.771 ops/s
Iteration   2: 843666.584 ops/s
Iteration   3: 869027.191 ops/s
Iteration   4: 888567.184 ops/s
Iteration   5: 903666.182 ops/s
Iteration   6: 912875.996 ops/s
Iteration   7: 914033.653 ops/s
Iteration   8: 894181.074 ops/s
Iteration   9: 864510.313 ops/s
Iteration  10: 894539.430 ops/s
Iteration  11: 855852.105 ops/s
Iteration  12: 856732.811 ops/s
Iteration  13: 863106.567 ops/s
Iteration  14: 850127.654 ops/s
Iteration  15: 871693.186 ops/s
Iteration  16: 865773.562 ops/s
Iteration  17: 880428.933 ops/s
Iteration  18: 875878.480 ops/s
Iteration  19: 853847.695 ops/s
Iteration  20: 848027.125 ops/s
Iteration  21: 875226.599 ops/s
Iteration  22: 873454.632 ops/s
Iteration  23: 875542.408 ops/s
Iteration  24: 838357.055 ops/s
Iteration  25: 849733.811 ops/s
Iteration  26: 841134.541 ops/s
Iteration  27: 876518.179 ops/s
Iteration  28: 862947.134 ops/s
Iteration  29: 843396.923 ops/s
Iteration  30: 853780.218 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_allSatisfyWithOccurrences":
  868271.766 ±(99.9%) 13883.792 ops/s [Average]
  (min, avg, max) = (838357.055, 868271.766, 914033.653), stdev = 20780.608
  CI (99.9%): [854387.974, 882155.559] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_allSatisfyWithOccurrences  thrpt   30  868271.766 ± 13883.792  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 506384.409 ops/s
# Warmup Iteration   2: 664275.833 ops/s
# Warmup Iteration   3: 867830.885 ops/s
# Warmup Iteration   4: 889958.366 ops/s
# Warmup Iteration   5: 895116.034 ops/s
# Warmup Iteration   6: 885645.957 ops/s
# Warmup Iteration   7: 879266.260 ops/s
# Warmup Iteration   8: 887470.198 ops/s
# Warmup Iteration   9: 744098.010 ops/s
# Warmup Iteration  10: 887224.812 ops/s
# Warmup Iteration  11: 894505.784 ops/s
# Warmup Iteration  12: 886057.768 ops/s
# Warmup Iteration  13: 879433.705 ops/s
# Warmup Iteration  14: 893787.228 ops/s
# Warmup Iteration  15: 874555.772 ops/s
# Warmup Iteration  16: 890024.231 ops/s
# Warmup Iteration  17: 890482.176 ops/s
# Warmup Iteration  18: 873236.535 ops/s
# Warmup Iteration  19: 916163.654 ops/s
# Warmup Iteration  20: 878472.570 ops/s
# Warmup Iteration  21: 870233.997 ops/s
# Warmup Iteration  22: 876266.536 ops/s
# Warmup Iteration  23: 872703.822 ops/s
# Warmup Iteration  24: 891222.184 ops/s
# Warmup Iteration  25: 866522.923 ops/s
# Warmup Iteration  26: 875387.903 ops/s
# Warmup Iteration  27: 870922.779 ops/s
# Warmup Iteration  28: 882047.111 ops/s
# Warmup Iteration  29: 898368.234 ops/s
# Warmup Iteration  30: 887227.273 ops/s
Iteration   1: 894736.170 ops/s
Iteration   2: 899488.821 ops/s
Iteration   3: 870510.466 ops/s
Iteration   4: 862370.301 ops/s
Iteration   5: 862985.279 ops/s
Iteration   6: 877941.487 ops/s
Iteration   7: 876126.913 ops/s
Iteration   8: 884786.737 ops/s
Iteration   9: 895779.976 ops/s
Iteration  10: 885647.572 ops/s
Iteration  11: 867431.218 ops/s
Iteration  12: 877819.975 ops/s
Iteration  13: 882617.642 ops/s
Iteration  14: 900214.493 ops/s
Iteration  15: 868636.947 ops/s
Iteration  16: 880853.454 ops/s
Iteration  17: 876378.742 ops/s
Iteration  18: 873667.041 ops/s
Iteration  19: 867109.607 ops/s
Iteration  20: 868357.784 ops/s
Iteration  21: 884218.781 ops/s
Iteration  22: 876913.245 ops/s
Iteration  23: 875220.531 ops/s
Iteration  24: 871217.008 ops/s
Iteration  25: 873654.964 ops/s
Iteration  26: 862535.412 ops/s
Iteration  27: 871722.866 ops/s
Iteration  28: 873954.108 ops/s
Iteration  29: 868096.117 ops/s
Iteration  30: 889134.647 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_anySatisfy":
  877337.610 ±(99.9%) 7087.489 ops/s [Average]
  (min, avg, max) = (862370.301, 877337.610, 900214.493), stdev = 10608.221
  CI (99.9%): [870250.121, 884425.099] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_anySatisfy  thrpt   30  877337.610 ± 7087.489  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 540619.350 ops/s
# Warmup Iteration   2: 676644.046 ops/s
# Warmup Iteration   3: 886406.595 ops/s
# Warmup Iteration   4: 880417.659 ops/s
# Warmup Iteration   5: 862571.615 ops/s
# Warmup Iteration   6: 880920.163 ops/s
# Warmup Iteration   7: 891127.873 ops/s
# Warmup Iteration   8: 872087.467 ops/s
# Warmup Iteration   9: 741606.015 ops/s
# Warmup Iteration  10: 860748.167 ops/s
# Warmup Iteration  11: 874661.663 ops/s
# Warmup Iteration  12: 879903.428 ops/s
# Warmup Iteration  13: 863889.922 ops/s
# Warmup Iteration  14: 882883.736 ops/s
# Warmup Iteration  15: 896438.060 ops/s
# Warmup Iteration  16: 880820.140 ops/s
# Warmup Iteration  17: 881775.593 ops/s
# Warmup Iteration  18: 865344.093 ops/s
# Warmup Iteration  19: 859337.648 ops/s
# Warmup Iteration  20: 860313.387 ops/s
# Warmup Iteration  21: 867381.038 ops/s
# Warmup Iteration  22: 864057.272 ops/s
# Warmup Iteration  23: 886595.612 ops/s
# Warmup Iteration  24: 884088.297 ops/s
# Warmup Iteration  25: 877461.880 ops/s
# Warmup Iteration  26: 868526.297 ops/s
# Warmup Iteration  27: 859535.142 ops/s
# Warmup Iteration  28: 881719.563 ops/s
# Warmup Iteration  29: 886999.602 ops/s
# Warmup Iteration  30: 881165.269 ops/s
Iteration   1: 881285.883 ops/s
Iteration   2: 867719.124 ops/s
Iteration   3: 864711.902 ops/s
Iteration   4: 855531.075 ops/s
Iteration   5: 891506.006 ops/s
Iteration   6: 874008.219 ops/s
Iteration   7: 899311.267 ops/s
Iteration   8: 863586.484 ops/s
Iteration   9: 872687.954 ops/s
Iteration  10: 865579.256 ops/s
Iteration  11: 881951.148 ops/s
Iteration  12: 866024.952 ops/s
Iteration  13: 854192.259 ops/s
Iteration  14: 861032.231 ops/s
Iteration  15: 902881.588 ops/s
Iteration  16: 926418.088 ops/s
Iteration  17: 899619.143 ops/s
Iteration  18: 865260.245 ops/s
Iteration  19: 857651.670 ops/s
Iteration  20: 879012.775 ops/s
Iteration  21: 856363.352 ops/s
Iteration  22: 863248.884 ops/s
Iteration  23: 852698.290 ops/s
Iteration  24: 868813.310 ops/s
Iteration  25: 859100.029 ops/s
Iteration  26: 849315.122 ops/s
Iteration  27: 876863.630 ops/s
Iteration  28: 863745.377 ops/s
Iteration  29: 858923.215 ops/s
Iteration  30: 863636.873 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_anySatisfyWith":
  871422.645 ±(99.9%) 11723.878 ops/s [Average]
  (min, avg, max) = (849315.122, 871422.645, 926418.088), stdev = 17547.750
  CI (99.9%): [859698.767, 883146.523] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  871422.645 ± 11723.878  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_anySatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_anySatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 551626.339 ops/s
# Warmup Iteration   2: 729112.591 ops/s
# Warmup Iteration   3: 950091.929 ops/s
# Warmup Iteration   4: 943003.587 ops/s
# Warmup Iteration   5: 937095.673 ops/s
# Warmup Iteration   6: 947140.277 ops/s
# Warmup Iteration   7: 958506.130 ops/s
# Warmup Iteration   8: 880859.397 ops/s
# Warmup Iteration   9: 849744.945 ops/s
# Warmup Iteration  10: 938560.586 ops/s
# Warmup Iteration  11: 935858.278 ops/s
# Warmup Iteration  12: 939725.884 ops/s
# Warmup Iteration  13: 940165.948 ops/s
# Warmup Iteration  14: 958158.581 ops/s
# Warmup Iteration  15: 954944.302 ops/s
# Warmup Iteration  16: 944070.578 ops/s
# Warmup Iteration  17: 935858.165 ops/s
# Warmup Iteration  18: 978294.639 ops/s
# Warmup Iteration  19: 961338.204 ops/s
# Warmup Iteration  20: 936605.321 ops/s
# Warmup Iteration  21: 966247.208 ops/s
# Warmup Iteration  22: 950636.185 ops/s
# Warmup Iteration  23: 958012.478 ops/s
# Warmup Iteration  24: 949899.484 ops/s
# Warmup Iteration  25: 959589.784 ops/s
# Warmup Iteration  26: 962302.235 ops/s
# Warmup Iteration  27: 936254.995 ops/s
# Warmup Iteration  28: 962090.129 ops/s
# Warmup Iteration  29: 1001994.709 ops/s
# Warmup Iteration  30: 979498.401 ops/s
Iteration   1: 939935.649 ops/s
Iteration   2: 943025.477 ops/s
Iteration   3: 966492.234 ops/s
Iteration   4: 963529.662 ops/s
Iteration   5: 943726.372 ops/s
Iteration   6: 936142.161 ops/s
Iteration   7: 937809.409 ops/s
Iteration   8: 941119.925 ops/s
Iteration   9: 939235.239 ops/s
Iteration  10: 951261.409 ops/s
Iteration  11: 944351.567 ops/s
Iteration  12: 970388.826 ops/s
Iteration  13: 958458.240 ops/s
Iteration  14: 938454.812 ops/s
Iteration  15: 939998.862 ops/s
Iteration  16: 943175.548 ops/s
Iteration  17: 952048.643 ops/s
Iteration  18: 932233.128 ops/s
Iteration  19: 950647.125 ops/s
Iteration  20: 951245.176 ops/s
Iteration  21: 952067.399 ops/s
Iteration  22: 977906.438 ops/s
Iteration  23: 979963.583 ops/s
Iteration  24: 991376.077 ops/s
Iteration  25: 1005937.870 ops/s
Iteration  26: 1005002.102 ops/s
Iteration  27: 995945.868 ops/s
Iteration  28: 1005966.539 ops/s
Iteration  29: 1006258.039 ops/s
Iteration  30: 999807.529 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_anySatisfyWithOccurrences":
  962117.030 ±(99.9%) 16798.690 ops/s [Average]
  (min, avg, max) = (932233.128, 962117.030, 1006258.039), stdev = 25143.491
  CI (99.9%): [945318.340, 978915.721] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_anySatisfyWithOccurrences  thrpt   30  962117.030 ± 16798.690  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 344104.681 ops/s
# Warmup Iteration   2: 680552.763 ops/s
# Warmup Iteration   3: 758379.596 ops/s
# Warmup Iteration   4: 738684.349 ops/s
# Warmup Iteration   5: 624800.582 ops/s
# Warmup Iteration   6: 746554.387 ops/s
# Warmup Iteration   7: 731979.920 ops/s
# Warmup Iteration   8: 760787.670 ops/s
# Warmup Iteration   9: 746053.832 ops/s
# Warmup Iteration  10: 736865.495 ops/s
# Warmup Iteration  11: 769037.948 ops/s
# Warmup Iteration  12: 764519.048 ops/s
# Warmup Iteration  13: 742759.256 ops/s
# Warmup Iteration  14: 732257.656 ops/s
# Warmup Iteration  15: 725532.380 ops/s
# Warmup Iteration  16: 733210.954 ops/s
# Warmup Iteration  17: 725930.058 ops/s
# Warmup Iteration  18: 734126.756 ops/s
# Warmup Iteration  19: 751528.033 ops/s
# Warmup Iteration  20: 781710.888 ops/s
# Warmup Iteration  21: 753905.665 ops/s
# Warmup Iteration  22: 741506.850 ops/s
# Warmup Iteration  23: 753639.881 ops/s
# Warmup Iteration  24: 765773.507 ops/s
# Warmup Iteration  25: 764256.493 ops/s
# Warmup Iteration  26: 730808.588 ops/s
# Warmup Iteration  27: 731918.819 ops/s
# Warmup Iteration  28: 739378.285 ops/s
# Warmup Iteration  29: 749479.355 ops/s
# Warmup Iteration  30: 747203.803 ops/s
Iteration   1: 770264.695 ops/s
Iteration   2: 740296.435 ops/s
Iteration   3: 727845.359 ops/s
Iteration   4: 747001.606 ops/s
Iteration   5: 762817.723 ops/s
Iteration   6: 766279.016 ops/s
Iteration   7: 745791.198 ops/s
Iteration   8: 724600.003 ops/s
Iteration   9: 735438.143 ops/s
Iteration  10: 736954.902 ops/s
Iteration  11: 734331.997 ops/s
Iteration  12: 739848.371 ops/s
Iteration  13: 739953.783 ops/s
Iteration  14: 770981.924 ops/s
Iteration  15: 753505.563 ops/s
Iteration  16: 741054.347 ops/s
Iteration  17: 736570.076 ops/s
Iteration  18: 746304.795 ops/s
Iteration  19: 733523.008 ops/s
Iteration  20: 740761.941 ops/s
Iteration  21: 730762.231 ops/s
Iteration  22: 744764.092 ops/s
Iteration  23: 758055.145 ops/s
Iteration  24: 752460.574 ops/s
Iteration  25: 722441.596 ops/s
Iteration  26: 731386.969 ops/s
Iteration  27: 768232.348 ops/s
Iteration  28: 738921.183 ops/s
Iteration  29: 763375.763 ops/s
Iteration  30: 734357.112 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_appendString":
  744629.397 ±(99.9%) 9283.985 ops/s [Average]
  (min, avg, max) = (722441.596, 744629.397, 770981.924), stdev = 13895.833
  CI (99.9%): [735345.412, 753913.382] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_appendString  thrpt   30  744629.397 ± 9283.985  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_appendStringThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_appendStringThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 77570.365 ops/s
# Warmup Iteration   2: 87401.966 ops/s
# Warmup Iteration   3: 104053.880 ops/s
# Warmup Iteration   4: 107274.955 ops/s
# Warmup Iteration   5: 109164.703 ops/s
# Warmup Iteration   6: 110545.046 ops/s
# Warmup Iteration   7: 115668.176 ops/s
# Warmup Iteration   8: 113592.029 ops/s
# Warmup Iteration   9: 107442.804 ops/s
# Warmup Iteration  10: 116026.571 ops/s
# Warmup Iteration  11: 114880.897 ops/s
# Warmup Iteration  12: 113342.071 ops/s
# Warmup Iteration  13: 96923.517 ops/s
# Warmup Iteration  14: 109400.525 ops/s
# Warmup Iteration  15: 113787.598 ops/s
# Warmup Iteration  16: 113560.993 ops/s
# Warmup Iteration  17: 125731.099 ops/s
# Warmup Iteration  18: 120670.023 ops/s
# Warmup Iteration  19: 117797.075 ops/s
# Warmup Iteration  20: 118422.861 ops/s
# Warmup Iteration  21: 123095.522 ops/s
# Warmup Iteration  22: 119517.301 ops/s
# Warmup Iteration  23: 123436.692 ops/s
# Warmup Iteration  24: 119251.006 ops/s
# Warmup Iteration  25: 118993.464 ops/s
# Warmup Iteration  26: 122175.935 ops/s
# Warmup Iteration  27: 122703.896 ops/s
# Warmup Iteration  28: 120465.066 ops/s
# Warmup Iteration  29: 118190.701 ops/s
# Warmup Iteration  30: 117876.533 ops/s
Iteration   1: 119006.662 ops/s
Iteration   2: 122446.763 ops/s
Iteration   3: 126103.841 ops/s
Iteration   4: 125078.672 ops/s
Iteration   5: 123064.474 ops/s
Iteration   6: 123905.375 ops/s
Iteration   7: 122473.624 ops/s
Iteration   8: 121167.721 ops/s
Iteration   9: 119376.073 ops/s
Iteration  10: 121106.480 ops/s
Iteration  11: 119910.314 ops/s
Iteration  12: 121512.529 ops/s
Iteration  13: 119595.586 ops/s
Iteration  14: 120646.238 ops/s
Iteration  15: 120930.010 ops/s
Iteration  16: 122622.163 ops/s
Iteration  17: 121551.732 ops/s
Iteration  18: 118510.245 ops/s
Iteration  19: 121301.320 ops/s
Iteration  20: 120048.623 ops/s
Iteration  21: 120866.197 ops/s
Iteration  22: 123645.414 ops/s
Iteration  23: 126328.414 ops/s
Iteration  24: 124537.387 ops/s
Iteration  25: 121364.846 ops/s
Iteration  26: 120729.428 ops/s
Iteration  27: 121064.423 ops/s
Iteration  28: 119781.536 ops/s
Iteration  29: 120277.248 ops/s
Iteration  30: 120635.560 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_appendStringThrows":
  121652.963 ±(99.9%) 1344.646 ops/s [Average]
  (min, avg, max) = (118510.245, 121652.963, 126328.414), stdev = 2012.603
  CI (99.9%): [120308.317, 122997.609] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_appendStringThrows  thrpt   30  121652.963 ± 1344.646  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_appendStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_appendStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 348479.204 ops/s
# Warmup Iteration   2: 711849.884 ops/s
# Warmup Iteration   3: 757173.446 ops/s
# Warmup Iteration   4: 741242.338 ops/s
# Warmup Iteration   5: 638466.190 ops/s
# Warmup Iteration   6: 766587.047 ops/s
# Warmup Iteration   7: 765140.983 ops/s
# Warmup Iteration   8: 765789.676 ops/s
# Warmup Iteration   9: 757276.608 ops/s
# Warmup Iteration  10: 755707.590 ops/s
# Warmup Iteration  11: 761043.002 ops/s
# Warmup Iteration  12: 756984.794 ops/s
# Warmup Iteration  13: 750727.431 ops/s
# Warmup Iteration  14: 745019.228 ops/s
# Warmup Iteration  15: 751027.157 ops/s
# Warmup Iteration  16: 770202.561 ops/s
# Warmup Iteration  17: 744560.308 ops/s
# Warmup Iteration  18: 742434.899 ops/s
# Warmup Iteration  19: 745844.114 ops/s
# Warmup Iteration  20: 741482.515 ops/s
# Warmup Iteration  21: 776928.799 ops/s
# Warmup Iteration  22: 754601.845 ops/s
# Warmup Iteration  23: 743029.453 ops/s
# Warmup Iteration  24: 745566.227 ops/s
# Warmup Iteration  25: 744026.874 ops/s
# Warmup Iteration  26: 747842.905 ops/s
# Warmup Iteration  27: 750571.412 ops/s
# Warmup Iteration  28: 745002.301 ops/s
# Warmup Iteration  29: 753037.605 ops/s
# Warmup Iteration  30: 737699.587 ops/s
Iteration   1: 746992.582 ops/s
Iteration   2: 787652.882 ops/s
Iteration   3: 796721.109 ops/s
Iteration   4: 773653.292 ops/s
Iteration   5: 765729.072 ops/s
Iteration   6: 761746.536 ops/s
Iteration   7: 753814.971 ops/s
Iteration   8: 739739.779 ops/s
Iteration   9: 748762.790 ops/s
Iteration  10: 741831.112 ops/s
Iteration  11: 752720.254 ops/s
Iteration  12: 742130.053 ops/s
Iteration  13: 737687.871 ops/s
Iteration  14: 741007.931 ops/s
Iteration  15: 752143.027 ops/s
Iteration  16: 756417.878 ops/s
Iteration  17: 758727.212 ops/s
Iteration  18: 741846.131 ops/s
Iteration  19: 743331.956 ops/s
Iteration  20: 760914.650 ops/s
Iteration  21: 798075.273 ops/s
Iteration  22: 797198.463 ops/s
Iteration  23: 799069.509 ops/s
Iteration  24: 798525.909 ops/s
Iteration  25: 797583.645 ops/s
Iteration  26: 765615.913 ops/s
Iteration  27: 751748.419 ops/s
Iteration  28: 745097.081 ops/s
Iteration  29: 749900.331 ops/s
Iteration  30: 759464.973 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_appendStringWithSeparator":
  762195.020 ±(99.9%) 14069.867 ops/s [Average]
  (min, avg, max) = (737687.871, 762195.020, 799069.509), stdev = 21059.117
  CI (99.9%): [748125.153, 776264.888] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_appendStringWithSeparator  thrpt   30  762195.020 ± 14069.867  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 405731.776 ops/s
# Warmup Iteration   2: 773372.824 ops/s
# Warmup Iteration   3: 812556.995 ops/s
# Warmup Iteration   4: 807161.142 ops/s
# Warmup Iteration   5: 695556.610 ops/s
# Warmup Iteration   6: 787857.763 ops/s
# Warmup Iteration   7: 812176.000 ops/s
# Warmup Iteration   8: 809778.570 ops/s
# Warmup Iteration   9: 804594.307 ops/s
# Warmup Iteration  10: 812847.574 ops/s
# Warmup Iteration  11: 816828.946 ops/s
# Warmup Iteration  12: 812556.036 ops/s
# Warmup Iteration  13: 817108.196 ops/s
# Warmup Iteration  14: 813885.703 ops/s
# Warmup Iteration  15: 809375.568 ops/s
# Warmup Iteration  16: 860815.747 ops/s
# Warmup Iteration  17: 807944.894 ops/s
# Warmup Iteration  18: 827048.862 ops/s
# Warmup Iteration  19: 819550.286 ops/s
# Warmup Iteration  20: 808171.645 ops/s
# Warmup Iteration  21: 815657.371 ops/s
# Warmup Iteration  22: 844712.954 ops/s
# Warmup Iteration  23: 826685.643 ops/s
# Warmup Iteration  24: 821959.230 ops/s
# Warmup Iteration  25: 805444.466 ops/s
# Warmup Iteration  26: 811651.785 ops/s
# Warmup Iteration  27: 818565.756 ops/s
# Warmup Iteration  28: 829252.528 ops/s
# Warmup Iteration  29: 809036.417 ops/s
# Warmup Iteration  30: 816940.660 ops/s
Iteration   1: 807400.026 ops/s
Iteration   2: 825501.643 ops/s
Iteration   3: 868013.604 ops/s
Iteration   4: 852392.393 ops/s
Iteration   5: 797396.091 ops/s
Iteration   6: 827730.849 ops/s
Iteration   7: 813267.899 ops/s
Iteration   8: 810842.457 ops/s
Iteration   9: 795919.102 ops/s
Iteration  10: 806274.088 ops/s
Iteration  11: 815151.654 ops/s
Iteration  12: 805080.439 ops/s
Iteration  13: 806433.872 ops/s
Iteration  14: 807134.031 ops/s
Iteration  15: 808455.361 ops/s
Iteration  16: 839421.704 ops/s
Iteration  17: 806596.071 ops/s
Iteration  18: 825757.105 ops/s
Iteration  19: 810555.208 ops/s
Iteration  20: 801574.099 ops/s
Iteration  21: 811131.323 ops/s
Iteration  22: 812654.407 ops/s
Iteration  23: 831325.136 ops/s
Iteration  24: 869562.201 ops/s
Iteration  25: 837650.982 ops/s
Iteration  26: 821465.387 ops/s
Iteration  27: 828051.311 ops/s
Iteration  28: 821466.348 ops/s
Iteration  29: 822953.123 ops/s
Iteration  30: 834184.902 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd":
  820711.427 ±(99.9%) 12438.863 ops/s [Average]
  (min, avg, max) = (795919.102, 820711.427, 869562.201), stdev = 18617.905
  CI (99.9%): [808272.565, 833150.290] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd  thrpt   30  820711.427 ± 12438.863  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_appendString_with_collection_containing_self$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_appendString_with_collection_containing_self

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 494221.666 ops/s
# Warmup Iteration   2: 621855.697 ops/s
# Warmup Iteration   3: 795845.074 ops/s
# Warmup Iteration   4: 778302.987 ops/s
# Warmup Iteration   5: 784159.483 ops/s
# Warmup Iteration   6: 777057.149 ops/s
# Warmup Iteration   7: 779951.031 ops/s
# Warmup Iteration   8: 779915.328 ops/s
# Warmup Iteration   9: 640487.178 ops/s
# Warmup Iteration  10: 778243.307 ops/s
# Warmup Iteration  11: 795811.371 ops/s
# Warmup Iteration  12: 790652.907 ops/s
# Warmup Iteration  13: 776427.079 ops/s
# Warmup Iteration  14: 779274.497 ops/s
# Warmup Iteration  15: 782112.043 ops/s
# Warmup Iteration  16: 770543.575 ops/s
# Warmup Iteration  17: 820207.571 ops/s
# Warmup Iteration  18: 819152.696 ops/s
# Warmup Iteration  19: 821891.760 ops/s
# Warmup Iteration  20: 807842.055 ops/s
# Warmup Iteration  21: 812034.427 ops/s
# Warmup Iteration  22: 816633.234 ops/s
# Warmup Iteration  23: 833633.397 ops/s
# Warmup Iteration  24: 829112.709 ops/s
# Warmup Iteration  25: 838954.317 ops/s
# Warmup Iteration  26: 833233.416 ops/s
# Warmup Iteration  27: 841950.775 ops/s
# Warmup Iteration  28: 837585.878 ops/s
# Warmup Iteration  29: 833321.981 ops/s
# Warmup Iteration  30: 833934.449 ops/s
Iteration   1: 825767.327 ops/s
Iteration   2: 830330.183 ops/s
Iteration   3: 862594.788 ops/s
Iteration   4: 819100.124 ops/s
Iteration   5: 874005.772 ops/s
Iteration   6: 850579.287 ops/s
Iteration   7: 811741.587 ops/s
Iteration   8: 828038.925 ops/s
Iteration   9: 813854.916 ops/s
Iteration  10: 817929.551 ops/s
Iteration  11: 829498.899 ops/s
Iteration  12: 830232.429 ops/s
Iteration  13: 810464.340 ops/s
Iteration  14: 818548.044 ops/s
Iteration  15: 816351.762 ops/s
Iteration  16: 828265.861 ops/s
Iteration  17: 814932.027 ops/s
Iteration  18: 829674.432 ops/s
Iteration  19: 822858.841 ops/s
Iteration  20: 816736.186 ops/s
Iteration  21: 821775.970 ops/s
Iteration  22: 817574.864 ops/s
Iteration  23: 831549.724 ops/s
Iteration  24: 807630.065 ops/s
Iteration  25: 810205.552 ops/s
Iteration  26: 818772.119 ops/s
Iteration  27: 817882.484 ops/s
Iteration  28: 814339.282 ops/s
Iteration  29: 821625.894 ops/s
Iteration  30: 816269.005 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_appendString_with_collection_containing_self":
  824304.341 ±(99.9%) 9909.370 ops/s [Average]
  (min, avg, max) = (807630.065, 824304.341, 874005.772), stdev = 14831.879
  CI (99.9%): [814394.971, 834213.711] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_appendString_with_collection_containing_self  thrpt   30  824304.341 ± 9909.370  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4861198.211 ops/s
# Warmup Iteration   2: 7634316.390 ops/s
# Warmup Iteration   3: 9021726.837 ops/s
# Warmup Iteration   4: 9154786.389 ops/s
# Warmup Iteration   5: 9424248.734 ops/s
# Warmup Iteration   6: 8073276.153 ops/s
# Warmup Iteration   7: 8818460.712 ops/s
# Warmup Iteration   8: 9095889.013 ops/s
# Warmup Iteration   9: 8969283.581 ops/s
# Warmup Iteration  10: 9120763.435 ops/s
# Warmup Iteration  11: 9256763.375 ops/s
# Warmup Iteration  12: 9176988.024 ops/s
# Warmup Iteration  13: 9100859.924 ops/s
# Warmup Iteration  14: 9188030.554 ops/s
# Warmup Iteration  15: 9246471.633 ops/s
# Warmup Iteration  16: 9089316.430 ops/s
# Warmup Iteration  17: 9263767.675 ops/s
# Warmup Iteration  18: 9179832.269 ops/s
# Warmup Iteration  19: 8960103.876 ops/s
# Warmup Iteration  20: 9020316.614 ops/s
# Warmup Iteration  21: 9110932.828 ops/s
# Warmup Iteration  22: 9217604.071 ops/s
# Warmup Iteration  23: 9093944.851 ops/s
# Warmup Iteration  24: 9016122.631 ops/s
# Warmup Iteration  25: 9165448.465 ops/s
# Warmup Iteration  26: 9026075.315 ops/s
# Warmup Iteration  27: 9152915.842 ops/s
# Warmup Iteration  28: 9120790.781 ops/s
# Warmup Iteration  29: 9424692.698 ops/s
# Warmup Iteration  30: 9197614.509 ops/s
Iteration   1: 9460068.033 ops/s
Iteration   2: 9483672.262 ops/s
Iteration   3: 9065889.513 ops/s
Iteration   4: 8993185.984 ops/s
Iteration   5: 9247718.433 ops/s
Iteration   6: 9281862.212 ops/s
Iteration   7: 9203183.840 ops/s
Iteration   8: 9220042.127 ops/s
Iteration   9: 9202877.411 ops/s
Iteration  10: 8934583.379 ops/s
Iteration  11: 9116552.794 ops/s
Iteration  12: 9202595.728 ops/s
Iteration  13: 9423731.354 ops/s
Iteration  14: 9302892.997 ops/s
Iteration  15: 9031531.859 ops/s
Iteration  16: 9376224.489 ops/s
Iteration  17: 9127877.451 ops/s
Iteration  18: 8949835.288 ops/s
Iteration  19: 8920439.838 ops/s
Iteration  20: 9066859.056 ops/s
Iteration  21: 9051489.042 ops/s
Iteration  22: 9073641.612 ops/s
Iteration  23: 9161016.189 ops/s
Iteration  24: 8934027.882 ops/s
Iteration  25: 9141400.193 ops/s
Iteration  26: 9162658.304 ops/s
Iteration  27: 8984481.986 ops/s
Iteration  28: 9264951.162 ops/s
Iteration  29: 9534379.623 ops/s
Iteration  30: 9255362.851 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_asLazy":
  9172501.096 ±(99.9%) 113530.962 ops/s [Average]
  (min, avg, max) = (8920439.838, 9172501.096, 9534379.623), stdev = 169927.813
  CI (99.9%): [9058970.134, 9286032.059] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score        Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_asLazy  thrpt   30  9172501.096 ± 113530.962  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4621400.703 ops/s
# Warmup Iteration   2: 8074899.852 ops/s
# Warmup Iteration   3: 8977557.315 ops/s
# Warmup Iteration   4: 8931670.877 ops/s
# Warmup Iteration   5: 8870043.320 ops/s
# Warmup Iteration   6: 7581481.777 ops/s
# Warmup Iteration   7: 9003888.008 ops/s
# Warmup Iteration   8: 8996640.720 ops/s
# Warmup Iteration   9: 8638767.133 ops/s
# Warmup Iteration  10: 8800623.587 ops/s
# Warmup Iteration  11: 8975977.215 ops/s
# Warmup Iteration  12: 8937616.221 ops/s
# Warmup Iteration  13: 8989296.939 ops/s
# Warmup Iteration  14: 8930525.042 ops/s
# Warmup Iteration  15: 9442319.051 ops/s
# Warmup Iteration  16: 9177938.888 ops/s
# Warmup Iteration  17: 8940432.115 ops/s
# Warmup Iteration  18: 9072112.985 ops/s
# Warmup Iteration  19: 8873118.017 ops/s
# Warmup Iteration  20: 8907973.939 ops/s
# Warmup Iteration  21: 9011267.585 ops/s
# Warmup Iteration  22: 9044397.528 ops/s
# Warmup Iteration  23: 9103806.326 ops/s
# Warmup Iteration  24: 9225807.411 ops/s
# Warmup Iteration  25: 9249386.759 ops/s
# Warmup Iteration  26: 9144769.241 ops/s
# Warmup Iteration  27: 9023046.308 ops/s
# Warmup Iteration  28: 9089301.012 ops/s
# Warmup Iteration  29: 9200022.960 ops/s
# Warmup Iteration  30: 9009647.868 ops/s
Iteration   1: 9348856.168 ops/s
Iteration   2: 9061890.784 ops/s
Iteration   3: 9297978.242 ops/s
Iteration   4: 9150938.773 ops/s
Iteration   5: 8931445.776 ops/s
Iteration   6: 8870874.630 ops/s
Iteration   7: 8874313.841 ops/s
Iteration   8: 8656836.365 ops/s
Iteration   9: 8927448.491 ops/s
Iteration  10: 8929550.608 ops/s
Iteration  11: 8900165.320 ops/s
Iteration  12: 8948069.505 ops/s
Iteration  13: 8882537.716 ops/s
Iteration  14: 8883283.889 ops/s
Iteration  15: 8767027.453 ops/s
Iteration  16: 8952104.444 ops/s
Iteration  17: 9077309.848 ops/s
Iteration  18: 9045312.598 ops/s
Iteration  19: 8874270.887 ops/s
Iteration  20: 9030716.010 ops/s
Iteration  21: 9406849.646 ops/s
Iteration  22: 8760537.227 ops/s
Iteration  23: 9286887.807 ops/s
Iteration  24: 8838178.049 ops/s
Iteration  25: 8901226.576 ops/s
Iteration  26: 9079193.317 ops/s
Iteration  27: 9458107.038 ops/s
Iteration  28: 9467913.086 ops/s
Iteration  29: 9366969.833 ops/s
Iteration  30: 8800379.802 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_asSynchronized":
  9025905.791 ±(99.9%) 149614.516 ops/s [Average]
  (min, avg, max) = (8656836.365, 9025905.791, 9467913.086), stdev = 223935.981
  CI (99.9%): [8876291.275, 9175520.307] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_asSynchronized  thrpt   30  9025905.791 ± 149614.516  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5342024.325 ops/s
# Warmup Iteration   2: 8208940.730 ops/s
# Warmup Iteration   3: 9465534.192 ops/s
# Warmup Iteration   4: 9467933.150 ops/s
# Warmup Iteration   5: 9619375.083 ops/s
# Warmup Iteration   6: 9582507.456 ops/s
# Warmup Iteration   7: 7928546.447 ops/s
# Warmup Iteration   8: 10045155.356 ops/s
# Warmup Iteration   9: 9539725.483 ops/s
# Warmup Iteration  10: 9592227.938 ops/s
# Warmup Iteration  11: 9518337.151 ops/s
# Warmup Iteration  12: 9507460.668 ops/s
# Warmup Iteration  13: 10053279.884 ops/s
# Warmup Iteration  14: 9845486.817 ops/s
# Warmup Iteration  15: 9619651.381 ops/s
# Warmup Iteration  16: 9555563.094 ops/s
# Warmup Iteration  17: 9720279.218 ops/s
# Warmup Iteration  18: 10126477.669 ops/s
# Warmup Iteration  19: 9800524.595 ops/s
# Warmup Iteration  20: 9969295.725 ops/s
# Warmup Iteration  21: 9622222.852 ops/s
# Warmup Iteration  22: 10130543.019 ops/s
# Warmup Iteration  23: 9825674.614 ops/s
# Warmup Iteration  24: 9493725.622 ops/s
# Warmup Iteration  25: 9792396.827 ops/s
# Warmup Iteration  26: 9544095.749 ops/s
# Warmup Iteration  27: 9371359.561 ops/s
# Warmup Iteration  28: 9971735.850 ops/s
# Warmup Iteration  29: 9539123.667 ops/s
# Warmup Iteration  30: 9767281.175 ops/s
Iteration   1: 10095770.118 ops/s
Iteration   2: 9608715.615 ops/s
Iteration   3: 9337892.289 ops/s
Iteration   4: 9475022.440 ops/s
Iteration   5: 9776498.463 ops/s
Iteration   6: 9573819.922 ops/s
Iteration   7: 9775872.910 ops/s
Iteration   8: 9717724.020 ops/s
Iteration   9: 9676410.614 ops/s
Iteration  10: 9707138.628 ops/s
Iteration  11: 9779519.607 ops/s
Iteration  12: 9390996.326 ops/s
Iteration  13: 9969169.413 ops/s
Iteration  14: 9822443.225 ops/s
Iteration  15: 9612393.359 ops/s
Iteration  16: 9556319.536 ops/s
Iteration  17: 9641273.154 ops/s
Iteration  18: 9725793.779 ops/s
Iteration  19: 9830415.889 ops/s
Iteration  20: 9699244.206 ops/s
Iteration  21: 9874992.249 ops/s
Iteration  22: 9363162.409 ops/s
Iteration  23: 9554678.908 ops/s
Iteration  24: 9545352.053 ops/s
Iteration  25: 9497087.834 ops/s
Iteration  26: 9711893.115 ops/s
Iteration  27: 10095722.585 ops/s
Iteration  28: 9396178.666 ops/s
Iteration  29: 9474024.585 ops/s
Iteration  30: 9652621.101 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_asUnmodifiable":
  9664604.901 ±(99.9%) 130646.778 ops/s [Average]
  (min, avg, max) = (9337892.289, 9664604.901, 10095770.118), stdev = 195545.962
  CI (99.9%): [9533958.123, 9795251.679] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  9664604.901 ± 130646.778  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_bottomOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_bottomOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 96500.558 ops/s
# Warmup Iteration   2: 150175.952 ops/s
# Warmup Iteration   3: 180311.356 ops/s
# Warmup Iteration   4: 184007.857 ops/s
# Warmup Iteration   5: 183590.913 ops/s
# Warmup Iteration   6: 184913.743 ops/s
# Warmup Iteration   7: 154466.551 ops/s
# Warmup Iteration   8: 183010.403 ops/s
# Warmup Iteration   9: 181701.201 ops/s
# Warmup Iteration  10: 182052.640 ops/s
# Warmup Iteration  11: 181748.551 ops/s
# Warmup Iteration  12: 181292.753 ops/s
# Warmup Iteration  13: 181529.710 ops/s
# Warmup Iteration  14: 182862.934 ops/s
# Warmup Iteration  15: 182370.631 ops/s
# Warmup Iteration  16: 183809.328 ops/s
# Warmup Iteration  17: 188517.436 ops/s
# Warmup Iteration  18: 186880.149 ops/s
# Warmup Iteration  19: 189568.961 ops/s
# Warmup Iteration  20: 193477.767 ops/s
# Warmup Iteration  21: 186809.499 ops/s
# Warmup Iteration  22: 184783.912 ops/s
# Warmup Iteration  23: 182244.882 ops/s
# Warmup Iteration  24: 185508.741 ops/s
# Warmup Iteration  25: 186388.105 ops/s
# Warmup Iteration  26: 181426.140 ops/s
# Warmup Iteration  27: 182636.146 ops/s
# Warmup Iteration  28: 184283.647 ops/s
# Warmup Iteration  29: 182891.455 ops/s
# Warmup Iteration  30: 184761.911 ops/s
Iteration   1: 184865.995 ops/s
Iteration   2: 185485.080 ops/s
Iteration   3: 188859.442 ops/s
Iteration   4: 185540.079 ops/s
Iteration   5: 187545.339 ops/s
Iteration   6: 180551.182 ops/s
Iteration   7: 183074.216 ops/s
Iteration   8: 184403.172 ops/s
Iteration   9: 180345.194 ops/s
Iteration  10: 184738.954 ops/s
Iteration  11: 180736.853 ops/s
Iteration  12: 182930.706 ops/s
Iteration  13: 187735.077 ops/s
Iteration  14: 186670.554 ops/s
Iteration  15: 184598.929 ops/s
Iteration  16: 183509.483 ops/s
Iteration  17: 184744.931 ops/s
Iteration  18: 183561.583 ops/s
Iteration  19: 185188.845 ops/s
Iteration  20: 189738.249 ops/s
Iteration  21: 182217.913 ops/s
Iteration  22: 182015.745 ops/s
Iteration  23: 184632.621 ops/s
Iteration  24: 184449.993 ops/s
Iteration  25: 186553.463 ops/s
Iteration  26: 183420.927 ops/s
Iteration  27: 185393.338 ops/s
Iteration  28: 182590.201 ops/s
Iteration  29: 183663.311 ops/s
Iteration  30: 183088.557 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_bottomOccurrences":
  184428.331 ±(99.9%) 1523.685 ops/s [Average]
  (min, avg, max) = (180345.194, 184428.331, 189738.249), stdev = 2280.580
  CI (99.9%): [182904.646, 185952.016] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_bottomOccurrences  thrpt   30  184428.331 ± 1523.685  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 182237.391 ops/s
# Warmup Iteration   2: 343634.304 ops/s
# Warmup Iteration   3: 378540.976 ops/s
# Warmup Iteration   4: 384937.428 ops/s
# Warmup Iteration   5: 374820.359 ops/s
# Warmup Iteration   6: 332722.520 ops/s
# Warmup Iteration   7: 386778.205 ops/s
# Warmup Iteration   8: 384399.580 ops/s
# Warmup Iteration   9: 383448.679 ops/s
# Warmup Iteration  10: 382497.096 ops/s
# Warmup Iteration  11: 381703.483 ops/s
# Warmup Iteration  12: 388499.825 ops/s
# Warmup Iteration  13: 383385.721 ops/s
# Warmup Iteration  14: 384551.247 ops/s
# Warmup Iteration  15: 384187.763 ops/s
# Warmup Iteration  16: 389400.444 ops/s
# Warmup Iteration  17: 386923.996 ops/s
# Warmup Iteration  18: 386952.880 ops/s
# Warmup Iteration  19: 383770.863 ops/s
# Warmup Iteration  20: 385933.837 ops/s
# Warmup Iteration  21: 378073.265 ops/s
# Warmup Iteration  22: 378294.146 ops/s
# Warmup Iteration  23: 381908.330 ops/s
# Warmup Iteration  24: 389899.009 ops/s
# Warmup Iteration  25: 380750.799 ops/s
# Warmup Iteration  26: 387549.441 ops/s
# Warmup Iteration  27: 386528.296 ops/s
# Warmup Iteration  28: 386611.193 ops/s
# Warmup Iteration  29: 381412.545 ops/s
# Warmup Iteration  30: 387478.619 ops/s
Iteration   1: 384141.402 ops/s
Iteration   2: 385747.606 ops/s
Iteration   3: 384202.934 ops/s
Iteration   4: 389473.125 ops/s
Iteration   5: 381210.611 ops/s
Iteration   6: 382432.140 ops/s
Iteration   7: 383017.572 ops/s
Iteration   8: 385411.849 ops/s
Iteration   9: 385197.917 ops/s
Iteration  10: 390529.166 ops/s
Iteration  11: 381171.497 ops/s
Iteration  12: 386039.386 ops/s
Iteration  13: 390936.937 ops/s
Iteration  14: 382314.414 ops/s
Iteration  15: 391217.866 ops/s
Iteration  16: 388897.837 ops/s
Iteration  17: 388959.536 ops/s
Iteration  18: 386323.672 ops/s
Iteration  19: 386180.118 ops/s
Iteration  20: 384105.757 ops/s
Iteration  21: 393112.452 ops/s
Iteration  22: 397782.366 ops/s
Iteration  23: 385137.357 ops/s
Iteration  24: 389004.376 ops/s
Iteration  25: 394104.643 ops/s
Iteration  26: 390384.383 ops/s
Iteration  27: 380951.413 ops/s
Iteration  28: 384391.611 ops/s
Iteration  29: 386590.948 ops/s
Iteration  30: 386214.831 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_chunk":
  386839.524 ±(99.9%) 2734.151 ops/s [Average]
  (min, avg, max) = (380951.413, 386839.524, 397782.366), stdev = 4092.349
  CI (99.9%): [384105.373, 389573.675] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_chunk  thrpt   30  386839.524 ± 2734.151  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_chunk_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_chunk_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3347081.998 ops/s
# Warmup Iteration   2: 5653691.083 ops/s
# Warmup Iteration   3: 6327192.062 ops/s
# Warmup Iteration   4: 6492843.560 ops/s
# Warmup Iteration   5: 6304765.657 ops/s
# Warmup Iteration   6: 5368666.171 ops/s
# Warmup Iteration   7: 6591436.351 ops/s
# Warmup Iteration   8: 6360654.148 ops/s
# Warmup Iteration   9: 6385770.162 ops/s
# Warmup Iteration  10: 6318886.086 ops/s
# Warmup Iteration  11: 6439242.768 ops/s
# Warmup Iteration  12: 6397802.409 ops/s
# Warmup Iteration  13: 6603976.146 ops/s
# Warmup Iteration  14: 6802432.114 ops/s
# Warmup Iteration  15: 6517346.550 ops/s
# Warmup Iteration  16: 6374389.182 ops/s
# Warmup Iteration  17: 6559561.177 ops/s
# Warmup Iteration  18: 6650742.074 ops/s
# Warmup Iteration  19: 6588366.231 ops/s
# Warmup Iteration  20: 6764839.198 ops/s
# Warmup Iteration  21: 6796536.976 ops/s
# Warmup Iteration  22: 6795595.175 ops/s
# Warmup Iteration  23: 6793953.539 ops/s
# Warmup Iteration  24: 6759357.322 ops/s
# Warmup Iteration  25: 6780502.341 ops/s
# Warmup Iteration  26: 6770928.718 ops/s
# Warmup Iteration  27: 6790296.670 ops/s
# Warmup Iteration  28: 6761374.309 ops/s
# Warmup Iteration  29: 6812880.781 ops/s
# Warmup Iteration  30: 6595157.764 ops/s
Iteration   1: 6344119.608 ops/s
Iteration   2: 6572660.314 ops/s
Iteration   3: 6651706.764 ops/s
Iteration   4: 6379209.499 ops/s
Iteration   5: 6399500.678 ops/s
Iteration   6: 6334773.994 ops/s
Iteration   7: 6607788.913 ops/s
Iteration   8: 6446070.769 ops/s
Iteration   9: 6671044.319 ops/s
Iteration  10: 6381365.221 ops/s
Iteration  11: 6260847.188 ops/s
Iteration  12: 6442363.419 ops/s
Iteration  13: 6582218.338 ops/s
Iteration  14: 6441446.339 ops/s
Iteration  15: 6473827.904 ops/s
Iteration  16: 6491653.703 ops/s
Iteration  17: 6298046.754 ops/s
Iteration  18: 6394883.908 ops/s
Iteration  19: 6444479.823 ops/s
Iteration  20: 6300937.517 ops/s
Iteration  21: 6323942.262 ops/s
Iteration  22: 6680464.307 ops/s
Iteration  23: 6809681.622 ops/s
Iteration  24: 6806417.830 ops/s
Iteration  25: 6547955.897 ops/s
Iteration  26: 6301822.447 ops/s
Iteration  27: 6367721.968 ops/s
Iteration  28: 6350827.261 ops/s
Iteration  29: 6319024.958 ops/s
Iteration  30: 6560868.498 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_chunk_empty":
  6466255.734 ±(99.9%) 101204.365 ops/s [Average]
  (min, avg, max) = (6260847.188, 6466255.734, 6809681.622), stdev = 151477.940
  CI (99.9%): [6365051.369, 6567460.099] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_chunk_empty  thrpt   30  6466255.734 ± 101204.365  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 523941.909 ops/s
# Warmup Iteration   2: 801167.284 ops/s
# Warmup Iteration   3: 974428.621 ops/s
# Warmup Iteration   4: 960823.780 ops/s
# Warmup Iteration   5: 954760.694 ops/s
# Warmup Iteration   6: 959326.902 ops/s
# Warmup Iteration   7: 833907.215 ops/s
# Warmup Iteration   8: 971732.216 ops/s
# Warmup Iteration   9: 971480.111 ops/s
# Warmup Iteration  10: 967629.233 ops/s
# Warmup Iteration  11: 1010058.676 ops/s
# Warmup Iteration  12: 1002968.207 ops/s
# Warmup Iteration  13: 960086.589 ops/s
# Warmup Iteration  14: 973716.315 ops/s
# Warmup Iteration  15: 976764.931 ops/s
# Warmup Iteration  16: 994519.139 ops/s
# Warmup Iteration  17: 1009752.020 ops/s
# Warmup Iteration  18: 991659.925 ops/s
# Warmup Iteration  19: 984244.354 ops/s
# Warmup Iteration  20: 984332.546 ops/s
# Warmup Iteration  21: 985636.183 ops/s
# Warmup Iteration  22: 987772.751 ops/s
# Warmup Iteration  23: 978981.622 ops/s
# Warmup Iteration  24: 972494.888 ops/s
# Warmup Iteration  25: 985114.999 ops/s
# Warmup Iteration  26: 990769.331 ops/s
# Warmup Iteration  27: 964949.724 ops/s
# Warmup Iteration  28: 960933.260 ops/s
# Warmup Iteration  29: 998336.999 ops/s
# Warmup Iteration  30: 988157.005 ops/s
Iteration   1: 991005.899 ops/s
Iteration   2: 983267.250 ops/s
Iteration   3: 952995.259 ops/s
Iteration   4: 966778.541 ops/s
Iteration   5: 971037.486 ops/s
Iteration   6: 964113.108 ops/s
Iteration   7: 976176.372 ops/s
Iteration   8: 1000844.778 ops/s
Iteration   9: 1010439.254 ops/s
Iteration  10: 969097.245 ops/s
Iteration  11: 968533.803 ops/s
Iteration  12: 965495.243 ops/s
Iteration  13: 986093.184 ops/s
Iteration  14: 999247.983 ops/s
Iteration  15: 952116.361 ops/s
Iteration  16: 959200.394 ops/s
Iteration  17: 1004006.994 ops/s
Iteration  18: 959571.139 ops/s
Iteration  19: 969086.928 ops/s
Iteration  20: 960599.890 ops/s
Iteration  21: 983656.637 ops/s
Iteration  22: 1015701.204 ops/s
Iteration  23: 1000144.942 ops/s
Iteration  24: 966407.448 ops/s
Iteration  25: 962584.122 ops/s
Iteration  26: 958633.905 ops/s
Iteration  27: 966020.196 ops/s
Iteration  28: 966164.709 ops/s
Iteration  29: 962687.156 ops/s
Iteration  30: 985631.325 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_chunk_large_size":
  975911.292 ±(99.9%) 11878.562 ops/s [Average]
  (min, avg, max) = (952116.361, 975911.292, 1015701.204), stdev = 17779.274
  CI (99.9%): [964032.729, 987789.854] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_chunk_large_size  thrpt   30  975911.292 ± 11878.562  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_chunk_single$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_chunk_single

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1878896.296 ops/s
# Warmup Iteration   2: 4544189.549 ops/s
# Warmup Iteration   3: 4685789.363 ops/s
# Warmup Iteration   4: 4011903.730 ops/s
# Warmup Iteration   5: 4697215.959 ops/s
# Warmup Iteration   6: 4702437.714 ops/s
# Warmup Iteration   7: 4746097.305 ops/s
# Warmup Iteration   8: 4721710.520 ops/s
# Warmup Iteration   9: 4723061.830 ops/s
# Warmup Iteration  10: 4705237.491 ops/s
# Warmup Iteration  11: 4698795.676 ops/s
# Warmup Iteration  12: 4659399.847 ops/s
# Warmup Iteration  13: 4689005.088 ops/s
# Warmup Iteration  14: 4701117.085 ops/s
# Warmup Iteration  15: 4727573.367 ops/s
# Warmup Iteration  16: 4976143.978 ops/s
# Warmup Iteration  17: 5011107.342 ops/s
# Warmup Iteration  18: 4973423.127 ops/s
# Warmup Iteration  19: 4796220.571 ops/s
# Warmup Iteration  20: 4805126.203 ops/s
# Warmup Iteration  21: 4755452.884 ops/s
# Warmup Iteration  22: 4742670.944 ops/s
# Warmup Iteration  23: 4777649.409 ops/s
# Warmup Iteration  24: 4728713.471 ops/s
# Warmup Iteration  25: 4714149.540 ops/s
# Warmup Iteration  26: 4780078.041 ops/s
# Warmup Iteration  27: 4732599.519 ops/s
# Warmup Iteration  28: 4728881.762 ops/s
# Warmup Iteration  29: 4752555.904 ops/s
# Warmup Iteration  30: 4716578.818 ops/s
Iteration   1: 4883920.540 ops/s
Iteration   2: 4736690.175 ops/s
Iteration   3: 4748545.496 ops/s
Iteration   4: 4748736.095 ops/s
Iteration   5: 4731568.597 ops/s
Iteration   6: 4714896.296 ops/s
Iteration   7: 4791135.083 ops/s
Iteration   8: 4721645.800 ops/s
Iteration   9: 4751042.256 ops/s
Iteration  10: 4687235.653 ops/s
Iteration  11: 4754161.458 ops/s
Iteration  12: 4722834.577 ops/s
Iteration  13: 4725768.502 ops/s
Iteration  14: 4910457.939 ops/s
Iteration  15: 4828734.220 ops/s
Iteration  16: 4711182.618 ops/s
Iteration  17: 4835559.466 ops/s
Iteration  18: 4681349.751 ops/s
Iteration  19: 4816436.590 ops/s
Iteration  20: 4734145.832 ops/s
Iteration  21: 4822005.772 ops/s
Iteration  22: 4695752.958 ops/s
Iteration  23: 4800142.320 ops/s
Iteration  24: 4743439.127 ops/s
Iteration  25: 4863047.249 ops/s
Iteration  26: 4883878.784 ops/s
Iteration  27: 4744505.753 ops/s
Iteration  28: 4856469.252 ops/s
Iteration  29: 4842256.150 ops/s
Iteration  30: 4740144.418 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_chunk_single":
  4774256.291 ±(99.9%) 43214.838 ops/s [Average]
  (min, avg, max) = (4681349.751, 4774256.291, 4910457.939), stdev = 64681.941
  CI (99.9%): [4731041.453, 4817471.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_chunk_single  thrpt   30  4774256.291 ± 43214.838  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 462308.862 ops/s
# Warmup Iteration   2: 551240.538 ops/s
# Warmup Iteration   3: 715088.966 ops/s
# Warmup Iteration   4: 706779.105 ops/s
# Warmup Iteration   5: 699359.614 ops/s
# Warmup Iteration   6: 701094.818 ops/s
# Warmup Iteration   7: 699321.407 ops/s
# Warmup Iteration   8: 704492.765 ops/s
# Warmup Iteration   9: 709613.737 ops/s
# Warmup Iteration  10: 587985.990 ops/s
# Warmup Iteration  11: 705747.756 ops/s
# Warmup Iteration  12: 712454.319 ops/s
# Warmup Iteration  13: 703948.648 ops/s
# Warmup Iteration  14: 700461.178 ops/s
# Warmup Iteration  15: 703423.292 ops/s
# Warmup Iteration  16: 698010.488 ops/s
# Warmup Iteration  17: 736981.788 ops/s
# Warmup Iteration  18: 743663.300 ops/s
# Warmup Iteration  19: 737036.244 ops/s
# Warmup Iteration  20: 737201.479 ops/s
# Warmup Iteration  21: 732456.030 ops/s
# Warmup Iteration  22: 750253.299 ops/s
# Warmup Iteration  23: 739763.830 ops/s
# Warmup Iteration  24: 741320.773 ops/s
# Warmup Iteration  25: 734877.805 ops/s
# Warmup Iteration  26: 748304.678 ops/s
# Warmup Iteration  27: 744250.633 ops/s
# Warmup Iteration  28: 738498.042 ops/s
# Warmup Iteration  29: 742741.308 ops/s
# Warmup Iteration  30: 745755.025 ops/s
Iteration   1: 761960.106 ops/s
Iteration   2: 759240.380 ops/s
Iteration   3: 749449.965 ops/s
Iteration   4: 758871.314 ops/s
Iteration   5: 742044.697 ops/s
Iteration   6: 743828.858 ops/s
Iteration   7: 753337.353 ops/s
Iteration   8: 752631.193 ops/s
Iteration   9: 762017.578 ops/s
Iteration  10: 752526.312 ops/s
Iteration  11: 749320.012 ops/s
Iteration  12: 745336.875 ops/s
Iteration  13: 759655.471 ops/s
Iteration  14: 770093.307 ops/s
Iteration  15: 747625.171 ops/s
Iteration  16: 753806.201 ops/s
Iteration  17: 752200.400 ops/s
Iteration  18: 749462.434 ops/s
Iteration  19: 752043.674 ops/s
Iteration  20: 773606.535 ops/s
Iteration  21: 762592.709 ops/s
Iteration  22: 756130.816 ops/s
Iteration  23: 748959.791 ops/s
Iteration  24: 749520.756 ops/s
Iteration  25: 755052.192 ops/s
Iteration  26: 759250.636 ops/s
Iteration  27: 764085.462 ops/s
Iteration  28: 768606.998 ops/s
Iteration  29: 738386.835 ops/s
Iteration  30: 762851.537 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_chunk_zero_throws":
  755149.852 ±(99.9%) 5605.148 ops/s [Average]
  (min, avg, max) = (738386.835, 755149.852, 773606.535), stdev = 8389.523
  CI (99.9%): [749544.704, 760755.001] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  755149.852 ± 5605.148  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 494180.901 ops/s
# Warmup Iteration   2: 617363.591 ops/s
# Warmup Iteration   3: 784252.926 ops/s
# Warmup Iteration   4: 786188.592 ops/s
# Warmup Iteration   5: 799910.161 ops/s
# Warmup Iteration   6: 783257.069 ops/s
# Warmup Iteration   7: 787521.799 ops/s
# Warmup Iteration   8: 779724.405 ops/s
# Warmup Iteration   9: 655003.304 ops/s
# Warmup Iteration  10: 787611.105 ops/s
# Warmup Iteration  11: 795596.504 ops/s
# Warmup Iteration  12: 799280.312 ops/s
# Warmup Iteration  13: 789617.718 ops/s
# Warmup Iteration  14: 788148.456 ops/s
# Warmup Iteration  15: 787751.556 ops/s
# Warmup Iteration  16: 784833.547 ops/s
# Warmup Iteration  17: 827615.293 ops/s
# Warmup Iteration  18: 822516.527 ops/s
# Warmup Iteration  19: 825956.814 ops/s
# Warmup Iteration  20: 819363.264 ops/s
# Warmup Iteration  21: 828289.426 ops/s
# Warmup Iteration  22: 824221.772 ops/s
# Warmup Iteration  23: 843933.145 ops/s
# Warmup Iteration  24: 831363.348 ops/s
# Warmup Iteration  25: 831666.655 ops/s
# Warmup Iteration  26: 829872.806 ops/s
# Warmup Iteration  27: 834140.362 ops/s
# Warmup Iteration  28: 826810.573 ops/s
# Warmup Iteration  29: 821953.195 ops/s
# Warmup Iteration  30: 840483.933 ops/s
Iteration   1: 820112.237 ops/s
Iteration   2: 820933.067 ops/s
Iteration   3: 830841.582 ops/s
Iteration   4: 823121.896 ops/s
Iteration   5: 819808.485 ops/s
Iteration   6: 816517.639 ops/s
Iteration   7: 818546.177 ops/s
Iteration   8: 824215.719 ops/s
Iteration   9: 815936.679 ops/s
Iteration  10: 833317.428 ops/s
Iteration  11: 843734.921 ops/s
Iteration  12: 832706.944 ops/s
Iteration  13: 841760.689 ops/s
Iteration  14: 840129.691 ops/s
Iteration  15: 815461.009 ops/s
Iteration  16: 848435.317 ops/s
Iteration  17: 838975.465 ops/s
Iteration  18: 839248.443 ops/s
Iteration  19: 835681.321 ops/s
Iteration  20: 852994.810 ops/s
Iteration  21: 837576.043 ops/s
Iteration  22: 842706.741 ops/s
Iteration  23: 835830.155 ops/s
Iteration  24: 843258.060 ops/s
Iteration  25: 845158.429 ops/s
Iteration  26: 839431.122 ops/s
Iteration  27: 837749.541 ops/s
Iteration  28: 829881.340 ops/s
Iteration  29: 834124.788 ops/s
Iteration  30: 826256.410 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_clear":
  832815.072 ±(99.9%) 7021.542 ops/s [Average]
  (min, avg, max) = (815461.009, 832815.072, 852994.810), stdev = 10509.515
  CI (99.9%): [825793.529, 839836.614] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_clear  thrpt   30  832815.072 ± 7021.542  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 338536.476 ops/s
# Warmup Iteration   2: 670253.200 ops/s
# Warmup Iteration   3: 739197.644 ops/s
# Warmup Iteration   4: 741307.113 ops/s
# Warmup Iteration   5: 653508.761 ops/s
# Warmup Iteration   6: 679206.590 ops/s
# Warmup Iteration   7: 729469.108 ops/s
# Warmup Iteration   8: 726136.009 ops/s
# Warmup Iteration   9: 744426.715 ops/s
# Warmup Iteration  10: 731668.220 ops/s
# Warmup Iteration  11: 731133.689 ops/s
# Warmup Iteration  12: 732923.187 ops/s
# Warmup Iteration  13: 741798.418 ops/s
# Warmup Iteration  14: 734050.356 ops/s
# Warmup Iteration  15: 733845.839 ops/s
# Warmup Iteration  16: 735735.682 ops/s
# Warmup Iteration  17: 728980.149 ops/s
# Warmup Iteration  18: 756093.373 ops/s
# Warmup Iteration  19: 742349.241 ops/s
# Warmup Iteration  20: 734903.030 ops/s
# Warmup Iteration  21: 741241.741 ops/s
# Warmup Iteration  22: 742233.962 ops/s
# Warmup Iteration  23: 746557.411 ops/s
# Warmup Iteration  24: 738794.395 ops/s
# Warmup Iteration  25: 738102.326 ops/s
# Warmup Iteration  26: 731491.512 ops/s
# Warmup Iteration  27: 746945.605 ops/s
# Warmup Iteration  28: 728079.486 ops/s
# Warmup Iteration  29: 721693.206 ops/s
# Warmup Iteration  30: 727099.513 ops/s
Iteration   1: 720763.569 ops/s
Iteration   2: 721721.134 ops/s
Iteration   3: 740886.454 ops/s
Iteration   4: 737150.302 ops/s
Iteration   5: 730295.616 ops/s
Iteration   6: 748056.578 ops/s
Iteration   7: 727685.328 ops/s
Iteration   8: 730729.703 ops/s
Iteration   9: 733841.420 ops/s
Iteration  10: 725453.171 ops/s
Iteration  11: 727477.638 ops/s
Iteration  12: 718769.588 ops/s
Iteration  13: 738048.414 ops/s
Iteration  14: 736348.405 ops/s
Iteration  15: 734531.780 ops/s
Iteration  16: 722693.193 ops/s
Iteration  17: 729261.529 ops/s
Iteration  18: 748588.304 ops/s
Iteration  19: 737129.175 ops/s
Iteration  20: 729102.471 ops/s
Iteration  21: 725665.295 ops/s
Iteration  22: 729163.634 ops/s
Iteration  23: 739234.187 ops/s
Iteration  24: 733846.295 ops/s
Iteration  25: 740508.251 ops/s
Iteration  26: 747871.957 ops/s
Iteration  27: 744878.113 ops/s
Iteration  28: 730928.894 ops/s
Iteration  29: 727352.501 ops/s
Iteration  30: 740406.063 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collect":
  733279.632 ±(99.9%) 5498.707 ops/s [Average]
  (min, avg, max) = (718769.588, 733279.632, 748588.304), stdev = 8230.206
  CI (99.9%): [727780.925, 738778.339] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collect  thrpt   30  733279.632 ± 5498.707  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 697011.240 ops/s
# Warmup Iteration   2: 1141873.624 ops/s
# Warmup Iteration   3: 1357656.569 ops/s
# Warmup Iteration   4: 1397606.093 ops/s
# Warmup Iteration   5: 1399136.505 ops/s
# Warmup Iteration   6: 1233072.681 ops/s
# Warmup Iteration   7: 1305506.342 ops/s
# Warmup Iteration   8: 1362910.157 ops/s
# Warmup Iteration   9: 1369695.617 ops/s
# Warmup Iteration  10: 1363736.350 ops/s
# Warmup Iteration  11: 1377561.912 ops/s
# Warmup Iteration  12: 1369218.999 ops/s
# Warmup Iteration  13: 1378142.249 ops/s
# Warmup Iteration  14: 1390716.334 ops/s
# Warmup Iteration  15: 1384575.276 ops/s
# Warmup Iteration  16: 1375907.044 ops/s
# Warmup Iteration  17: 1397001.844 ops/s
# Warmup Iteration  18: 1370528.349 ops/s
# Warmup Iteration  19: 1377299.678 ops/s
# Warmup Iteration  20: 1381902.933 ops/s
# Warmup Iteration  21: 1379795.725 ops/s
# Warmup Iteration  22: 1380626.264 ops/s
# Warmup Iteration  23: 1393612.204 ops/s
# Warmup Iteration  24: 1404714.284 ops/s
# Warmup Iteration  25: 1398381.491 ops/s
# Warmup Iteration  26: 1405182.776 ops/s
# Warmup Iteration  27: 1391680.197 ops/s
# Warmup Iteration  28: 1459879.532 ops/s
# Warmup Iteration  29: 1397608.904 ops/s
# Warmup Iteration  30: 1396700.294 ops/s
Iteration   1: 1418934.006 ops/s
Iteration   2: 1390689.770 ops/s
Iteration   3: 1398997.097 ops/s
Iteration   4: 1413195.174 ops/s
Iteration   5: 1380036.282 ops/s
Iteration   6: 1373833.126 ops/s
Iteration   7: 1384599.752 ops/s
Iteration   8: 1384467.054 ops/s
Iteration   9: 1393477.501 ops/s
Iteration  10: 1375671.530 ops/s
Iteration  11: 1374515.389 ops/s
Iteration  12: 1415897.943 ops/s
Iteration  13: 1441875.859 ops/s
Iteration  14: 1406281.649 ops/s
Iteration  15: 1380197.133 ops/s
Iteration  16: 1426637.243 ops/s
Iteration  17: 1444383.156 ops/s
Iteration  18: 1432198.120 ops/s
Iteration  19: 1460161.919 ops/s
Iteration  20: 1397175.580 ops/s
Iteration  21: 1373001.061 ops/s
Iteration  22: 1381251.336 ops/s
Iteration  23: 1369987.319 ops/s
Iteration  24: 1383369.837 ops/s
Iteration  25: 1386283.752 ops/s
Iteration  26: 1376956.180 ops/s
Iteration  27: 1391435.067 ops/s
Iteration  28: 1396491.709 ops/s
Iteration  29: 1407916.074 ops/s
Iteration  30: 1407360.474 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectBoolean":
  1398909.270 ±(99.9%) 15883.831 ops/s [Average]
  (min, avg, max) = (1369987.319, 1398909.270, 1460161.919), stdev = 23774.172
  CI (99.9%): [1383025.439, 1414793.101] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectBoolean  thrpt   30  1398909.270 ± 15883.831  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectBooleanWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectBooleanWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2271882.328 ops/s
# Warmup Iteration   2: 4659772.886 ops/s
# Warmup Iteration   3: 5141595.354 ops/s
# Warmup Iteration   4: 5038647.138 ops/s
# Warmup Iteration   5: 4182451.700 ops/s
# Warmup Iteration   6: 4953954.819 ops/s
# Warmup Iteration   7: 4923870.928 ops/s
# Warmup Iteration   8: 4992501.561 ops/s
# Warmup Iteration   9: 4972602.094 ops/s
# Warmup Iteration  10: 4924633.204 ops/s
# Warmup Iteration  11: 4917737.333 ops/s
# Warmup Iteration  12: 4933419.424 ops/s
# Warmup Iteration  13: 5086594.510 ops/s
# Warmup Iteration  14: 4954601.101 ops/s
# Warmup Iteration  15: 5178797.801 ops/s
# Warmup Iteration  16: 5010920.250 ops/s
# Warmup Iteration  17: 4863274.396 ops/s
# Warmup Iteration  18: 4943895.802 ops/s
# Warmup Iteration  19: 5173060.659 ops/s
# Warmup Iteration  20: 4899176.342 ops/s
# Warmup Iteration  21: 4853891.131 ops/s
# Warmup Iteration  22: 4870637.197 ops/s
# Warmup Iteration  23: 4886743.942 ops/s
# Warmup Iteration  24: 4853225.237 ops/s
# Warmup Iteration  25: 4922054.067 ops/s
# Warmup Iteration  26: 4874901.301 ops/s
# Warmup Iteration  27: 5074128.435 ops/s
# Warmup Iteration  28: 4878223.958 ops/s
# Warmup Iteration  29: 4888104.056 ops/s
# Warmup Iteration  30: 4873241.294 ops/s
Iteration   1: 4829760.601 ops/s
Iteration   2: 4818578.705 ops/s
Iteration   3: 4881203.876 ops/s
Iteration   4: 4965685.721 ops/s
Iteration   5: 5172235.263 ops/s
Iteration   6: 5174386.258 ops/s
Iteration   7: 4910123.490 ops/s
Iteration   8: 4921394.278 ops/s
Iteration   9: 4901663.038 ops/s
Iteration  10: 4847421.816 ops/s
Iteration  11: 4872591.710 ops/s
Iteration  12: 4819079.584 ops/s
Iteration  13: 4917448.847 ops/s
Iteration  14: 4861508.602 ops/s
Iteration  15: 4927965.369 ops/s
Iteration  16: 5029411.155 ops/s
Iteration  17: 4817141.494 ops/s
Iteration  18: 4908530.666 ops/s
Iteration  19: 4861068.796 ops/s
Iteration  20: 4960018.121 ops/s
Iteration  21: 4885742.564 ops/s
Iteration  22: 4954177.106 ops/s
Iteration  23: 4930102.527 ops/s
Iteration  24: 4835942.632 ops/s
Iteration  25: 5055516.472 ops/s
Iteration  26: 4851250.441 ops/s
Iteration  27: 4907863.179 ops/s
Iteration  28: 4894295.207 ops/s
Iteration  29: 5092434.293 ops/s
Iteration  30: 4995872.635 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectBooleanWithBagTarget":
  4926680.481 ±(99.9%) 64143.192 ops/s [Average]
  (min, avg, max) = (4817141.494, 4926680.481, 5174386.258), stdev = 96006.517
  CI (99.9%): [4862537.290, 4990823.673] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectBooleanWithBagTarget  thrpt   30  4926680.481 ± 64143.192  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1705097.101 ops/s
# Warmup Iteration   2: 3039701.186 ops/s
# Warmup Iteration   3: 3462851.700 ops/s
# Warmup Iteration   4: 3553373.640 ops/s
# Warmup Iteration   5: 3510800.276 ops/s
# Warmup Iteration   6: 2977335.984 ops/s
# Warmup Iteration   7: 3442932.509 ops/s
# Warmup Iteration   8: 3426441.972 ops/s
# Warmup Iteration   9: 3487792.107 ops/s
# Warmup Iteration  10: 3465440.146 ops/s
# Warmup Iteration  11: 3465290.461 ops/s
# Warmup Iteration  12: 3478418.443 ops/s
# Warmup Iteration  13: 3676002.184 ops/s
# Warmup Iteration  14: 3663537.537 ops/s
# Warmup Iteration  15: 3604039.021 ops/s
# Warmup Iteration  16: 3620073.431 ops/s
# Warmup Iteration  17: 3598280.290 ops/s
# Warmup Iteration  18: 3602404.148 ops/s
# Warmup Iteration  19: 3623058.634 ops/s
# Warmup Iteration  20: 3511940.762 ops/s
# Warmup Iteration  21: 3618491.097 ops/s
# Warmup Iteration  22: 3599427.409 ops/s
# Warmup Iteration  23: 3635257.496 ops/s
# Warmup Iteration  24: 3385982.979 ops/s
# Warmup Iteration  25: 3516271.985 ops/s
# Warmup Iteration  26: 3526088.313 ops/s
# Warmup Iteration  27: 3519498.001 ops/s
# Warmup Iteration  28: 3597229.362 ops/s
# Warmup Iteration  29: 3580797.704 ops/s
# Warmup Iteration  30: 3542436.130 ops/s
Iteration   1: 3482019.120 ops/s
Iteration   2: 3537112.515 ops/s
Iteration   3: 3502508.323 ops/s
Iteration   4: 3508357.599 ops/s
Iteration   5: 3519673.259 ops/s
Iteration   6: 3525914.806 ops/s
Iteration   7: 3521652.924 ops/s
Iteration   8: 3493615.348 ops/s
Iteration   9: 3542729.496 ops/s
Iteration  10: 3459293.432 ops/s
Iteration  11: 3516641.125 ops/s
Iteration  12: 3656104.257 ops/s
Iteration  13: 3605448.362 ops/s
Iteration  14: 3685657.098 ops/s
Iteration  15: 3515514.897 ops/s
Iteration  16: 3494473.796 ops/s
Iteration  17: 3489964.333 ops/s
Iteration  18: 3523271.956 ops/s
Iteration  19: 3576350.516 ops/s
Iteration  20: 3550254.795 ops/s
Iteration  21: 3505790.918 ops/s
Iteration  22: 3512189.548 ops/s
Iteration  23: 3525569.373 ops/s
Iteration  24: 3512488.324 ops/s
Iteration  25: 3503354.781 ops/s
Iteration  26: 3507692.895 ops/s
Iteration  27: 3534437.718 ops/s
Iteration  28: 3512328.592 ops/s
Iteration  29: 3485009.654 ops/s
Iteration  30: 3551071.900 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectBooleanWithTarget":
  3528549.722 ±(99.9%) 32140.001 ops/s [Average]
  (min, avg, max) = (3459293.432, 3528549.722, 3685657.098), stdev = 48105.644
  CI (99.9%): [3496409.721, 3560689.723] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  3528549.722 ± 32140.001  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 409204.738 ops/s
# Warmup Iteration   2: 775123.849 ops/s
# Warmup Iteration   3: 846338.755 ops/s
# Warmup Iteration   4: 863885.253 ops/s
# Warmup Iteration   5: 740691.354 ops/s
# Warmup Iteration   6: 828544.052 ops/s
# Warmup Iteration   7: 855076.932 ops/s
# Warmup Iteration   8: 846061.388 ops/s
# Warmup Iteration   9: 849531.705 ops/s
# Warmup Iteration  10: 874639.038 ops/s
# Warmup Iteration  11: 869090.232 ops/s
# Warmup Iteration  12: 855361.009 ops/s
# Warmup Iteration  13: 858523.625 ops/s
# Warmup Iteration  14: 876295.347 ops/s
# Warmup Iteration  15: 867387.394 ops/s
# Warmup Iteration  16: 852889.937 ops/s
# Warmup Iteration  17: 853200.431 ops/s
# Warmup Iteration  18: 857533.341 ops/s
# Warmup Iteration  19: 860719.783 ops/s
# Warmup Iteration  20: 890262.429 ops/s
# Warmup Iteration  21: 881173.503 ops/s
# Warmup Iteration  22: 848899.542 ops/s
# Warmup Iteration  23: 857454.258 ops/s
# Warmup Iteration  24: 897428.290 ops/s
# Warmup Iteration  25: 868748.988 ops/s
# Warmup Iteration  26: 864305.449 ops/s
# Warmup Iteration  27: 869236.883 ops/s
# Warmup Iteration  28: 849711.891 ops/s
# Warmup Iteration  29: 853863.616 ops/s
# Warmup Iteration  30: 862440.508 ops/s
Iteration   1: 893719.502 ops/s
Iteration   2: 868307.264 ops/s
Iteration   3: 854432.605 ops/s
Iteration   4: 870645.118 ops/s
Iteration   5: 847814.711 ops/s
Iteration   6: 856637.499 ops/s
Iteration   7: 853450.518 ops/s
Iteration   8: 864622.723 ops/s
Iteration   9: 859938.325 ops/s
Iteration  10: 871818.589 ops/s
Iteration  11: 903031.512 ops/s
Iteration  12: 894892.277 ops/s
Iteration  13: 881006.024 ops/s
Iteration  14: 883163.176 ops/s
Iteration  15: 850036.300 ops/s
Iteration  16: 846306.311 ops/s
Iteration  17: 865862.418 ops/s
Iteration  18: 870445.871 ops/s
Iteration  19: 870226.931 ops/s
Iteration  20: 868320.512 ops/s
Iteration  21: 866486.862 ops/s
Iteration  22: 848976.859 ops/s
Iteration  23: 853136.374 ops/s
Iteration  24: 840638.199 ops/s
Iteration  25: 854433.171 ops/s
Iteration  26: 842800.093 ops/s
Iteration  27: 866133.396 ops/s
Iteration  28: 873937.367 ops/s
Iteration  29: 864672.333 ops/s
Iteration  30: 865522.755 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectByte":
  865047.187 ±(99.9%) 10228.828 ops/s [Average]
  (min, avg, max) = (840638.199, 865047.187, 903031.512), stdev = 15310.029
  CI (99.9%): [854818.359, 875276.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectByte  thrpt   30  865047.187 ± 10228.828  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectByteWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectByteWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1029297.111 ops/s
# Warmup Iteration   2: 2390033.886 ops/s
# Warmup Iteration   3: 2437110.642 ops/s
# Warmup Iteration   4: 2028711.911 ops/s
# Warmup Iteration   5: 2459935.090 ops/s
# Warmup Iteration   6: 2529635.575 ops/s
# Warmup Iteration   7: 2444929.611 ops/s
# Warmup Iteration   8: 2474665.146 ops/s
# Warmup Iteration   9: 2432867.657 ops/s
# Warmup Iteration  10: 2412814.885 ops/s
# Warmup Iteration  11: 2440056.242 ops/s
# Warmup Iteration  12: 2412305.861 ops/s
# Warmup Iteration  13: 2447774.724 ops/s
# Warmup Iteration  14: 2429509.230 ops/s
# Warmup Iteration  15: 2473393.910 ops/s
# Warmup Iteration  16: 2413110.007 ops/s
# Warmup Iteration  17: 2432844.701 ops/s
# Warmup Iteration  18: 2472624.298 ops/s
# Warmup Iteration  19: 2463126.735 ops/s
# Warmup Iteration  20: 2458210.267 ops/s
# Warmup Iteration  21: 2485988.559 ops/s
# Warmup Iteration  22: 2492983.415 ops/s
# Warmup Iteration  23: 2479423.536 ops/s
# Warmup Iteration  24: 2427070.696 ops/s
# Warmup Iteration  25: 2446260.999 ops/s
# Warmup Iteration  26: 2451202.416 ops/s
# Warmup Iteration  27: 2440244.705 ops/s
# Warmup Iteration  28: 2421728.468 ops/s
# Warmup Iteration  29: 2445213.760 ops/s
# Warmup Iteration  30: 2425702.190 ops/s
Iteration   1: 2432621.397 ops/s
Iteration   2: 2531321.865 ops/s
Iteration   3: 2431222.371 ops/s
Iteration   4: 2436761.121 ops/s
Iteration   5: 2445698.327 ops/s
Iteration   6: 2480344.166 ops/s
Iteration   7: 2395411.024 ops/s
Iteration   8: 2396947.083 ops/s
Iteration   9: 2393726.914 ops/s
Iteration  10: 2413254.272 ops/s
Iteration  11: 2414262.721 ops/s
Iteration  12: 2533359.578 ops/s
Iteration  13: 2420239.349 ops/s
Iteration  14: 2463899.661 ops/s
Iteration  15: 2387367.113 ops/s
Iteration  16: 2422269.004 ops/s
Iteration  17: 2444244.910 ops/s
Iteration  18: 2427574.547 ops/s
Iteration  19: 2430342.734 ops/s
Iteration  20: 2422040.513 ops/s
Iteration  21: 2388625.218 ops/s
Iteration  22: 2414357.487 ops/s
Iteration  23: 2434058.683 ops/s
Iteration  24: 2427695.914 ops/s
Iteration  25: 2398086.978 ops/s
Iteration  26: 2434217.370 ops/s
Iteration  27: 2445547.111 ops/s
Iteration  28: 2541672.739 ops/s
Iteration  29: 2454203.415 ops/s
Iteration  30: 2521131.741 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectByteWithBagTarget":
  2439416.844 ±(99.9%) 28634.327 ops/s [Average]
  (min, avg, max) = (2387367.113, 2439416.844, 2541672.739), stdev = 42858.516
  CI (99.9%): [2410782.517, 2468051.171] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectByteWithBagTarget  thrpt   30  2439416.844 ± 28634.327  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 848023.262 ops/s
# Warmup Iteration   2: 1833318.989 ops/s
# Warmup Iteration   3: 2002050.304 ops/s
# Warmup Iteration   4: 2019545.104 ops/s
# Warmup Iteration   5: 1678568.645 ops/s
# Warmup Iteration   6: 2066457.113 ops/s
# Warmup Iteration   7: 2071691.397 ops/s
# Warmup Iteration   8: 2007279.923 ops/s
# Warmup Iteration   9: 1998640.236 ops/s
# Warmup Iteration  10: 1954081.488 ops/s
# Warmup Iteration  11: 1966039.707 ops/s
# Warmup Iteration  12: 1985872.410 ops/s
# Warmup Iteration  13: 2017106.690 ops/s
# Warmup Iteration  14: 1990345.153 ops/s
# Warmup Iteration  15: 1961252.039 ops/s
# Warmup Iteration  16: 1976023.599 ops/s
# Warmup Iteration  17: 1933927.694 ops/s
# Warmup Iteration  18: 1966830.114 ops/s
# Warmup Iteration  19: 1935381.103 ops/s
# Warmup Iteration  20: 1940424.403 ops/s
# Warmup Iteration  21: 1967103.004 ops/s
# Warmup Iteration  22: 1950655.507 ops/s
# Warmup Iteration  23: 1971586.679 ops/s
# Warmup Iteration  24: 1951783.994 ops/s
# Warmup Iteration  25: 1979635.741 ops/s
# Warmup Iteration  26: 1973176.619 ops/s
# Warmup Iteration  27: 1956017.518 ops/s
# Warmup Iteration  28: 1970331.915 ops/s
# Warmup Iteration  29: 1955038.980 ops/s
# Warmup Iteration  30: 1948010.539 ops/s
Iteration   1: 1943858.659 ops/s
Iteration   2: 1998617.016 ops/s
Iteration   3: 1949139.334 ops/s
Iteration   4: 1953524.531 ops/s
Iteration   5: 1922512.962 ops/s
Iteration   6: 1996192.800 ops/s
Iteration   7: 1959656.920 ops/s
Iteration   8: 1968310.021 ops/s
Iteration   9: 1960195.583 ops/s
Iteration  10: 1970286.575 ops/s
Iteration  11: 1980153.599 ops/s
Iteration  12: 1982918.461 ops/s
Iteration  13: 1937733.879 ops/s
Iteration  14: 1941610.638 ops/s
Iteration  15: 1963996.267 ops/s
Iteration  16: 1978817.351 ops/s
Iteration  17: 1967324.842 ops/s
Iteration  18: 1984916.222 ops/s
Iteration  19: 1949061.302 ops/s
Iteration  20: 1939390.201 ops/s
Iteration  21: 1943345.386 ops/s
Iteration  22: 1974887.396 ops/s
Iteration  23: 1977230.478 ops/s
Iteration  24: 1948224.658 ops/s
Iteration  25: 1950335.956 ops/s
Iteration  26: 1948190.682 ops/s
Iteration  27: 2032203.682 ops/s
Iteration  28: 1951071.702 ops/s
Iteration  29: 1944497.701 ops/s
Iteration  30: 1965869.814 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectByteWithTarget":
  1962802.487 ±(99.9%) 15019.560 ops/s [Average]
  (min, avg, max) = (1922512.962, 1962802.487, 2032203.682), stdev = 22480.572
  CI (99.9%): [1947782.927, 1977822.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  1962802.487 ± 15019.560  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 419545.230 ops/s
# Warmup Iteration   2: 821524.292 ops/s
# Warmup Iteration   3: 890476.605 ops/s
# Warmup Iteration   4: 887086.542 ops/s
# Warmup Iteration   5: 762465.459 ops/s
# Warmup Iteration   6: 874147.262 ops/s
# Warmup Iteration   7: 877147.283 ops/s
# Warmup Iteration   8: 900010.576 ops/s
# Warmup Iteration   9: 873019.965 ops/s
# Warmup Iteration  10: 881393.009 ops/s
# Warmup Iteration  11: 901060.131 ops/s
# Warmup Iteration  12: 873979.551 ops/s
# Warmup Iteration  13: 881818.483 ops/s
# Warmup Iteration  14: 870969.203 ops/s
# Warmup Iteration  15: 884997.706 ops/s
# Warmup Iteration  16: 884329.645 ops/s
# Warmup Iteration  17: 882698.446 ops/s
# Warmup Iteration  18: 878457.640 ops/s
# Warmup Iteration  19: 878750.892 ops/s
# Warmup Iteration  20: 884707.141 ops/s
# Warmup Iteration  21: 884547.093 ops/s
# Warmup Iteration  22: 873403.318 ops/s
# Warmup Iteration  23: 881006.335 ops/s
# Warmup Iteration  24: 882177.291 ops/s
# Warmup Iteration  25: 891442.358 ops/s
# Warmup Iteration  26: 876709.326 ops/s
# Warmup Iteration  27: 878002.714 ops/s
# Warmup Iteration  28: 898000.703 ops/s
# Warmup Iteration  29: 905107.153 ops/s
# Warmup Iteration  30: 875912.058 ops/s
Iteration   1: 873524.088 ops/s
Iteration   2: 894941.835 ops/s
Iteration   3: 893597.583 ops/s
Iteration   4: 875778.563 ops/s
Iteration   5: 869233.493 ops/s
Iteration   6: 894054.001 ops/s
Iteration   7: 892562.227 ops/s
Iteration   8: 890236.773 ops/s
Iteration   9: 895096.130 ops/s
Iteration  10: 892025.263 ops/s
Iteration  11: 883487.910 ops/s
Iteration  12: 883533.691 ops/s
Iteration  13: 875660.740 ops/s
Iteration  14: 888093.140 ops/s
Iteration  15: 877802.836 ops/s
Iteration  16: 877274.325 ops/s
Iteration  17: 865484.763 ops/s
Iteration  18: 864190.709 ops/s
Iteration  19: 863241.755 ops/s
Iteration  20: 881240.928 ops/s
Iteration  21: 884037.140 ops/s
Iteration  22: 893607.624 ops/s
Iteration  23: 866078.957 ops/s
Iteration  24: 865060.491 ops/s
Iteration  25: 880201.699 ops/s
Iteration  26: 888457.487 ops/s
Iteration  27: 873845.164 ops/s
Iteration  28: 874834.777 ops/s
Iteration  29: 871448.621 ops/s
Iteration  30: 886120.588 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectChar":
  880491.777 ±(99.9%) 6950.545 ops/s [Average]
  (min, avg, max) = (863241.755, 880491.777, 895096.130), stdev = 10403.249
  CI (99.9%): [873541.232, 887442.322] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectChar  thrpt   30  880491.777 ± 6950.545  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectCharWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectCharWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 970410.778 ops/s
# Warmup Iteration   2: 2396431.519 ops/s
# Warmup Iteration   3: 2471309.587 ops/s
# Warmup Iteration   4: 2078967.301 ops/s
# Warmup Iteration   5: 2498551.017 ops/s
# Warmup Iteration   6: 2500930.964 ops/s
# Warmup Iteration   7: 2482612.032 ops/s
# Warmup Iteration   8: 2526323.439 ops/s
# Warmup Iteration   9: 2438199.359 ops/s
# Warmup Iteration  10: 2446683.759 ops/s
# Warmup Iteration  11: 2482864.045 ops/s
# Warmup Iteration  12: 2455242.469 ops/s
# Warmup Iteration  13: 2532231.195 ops/s
# Warmup Iteration  14: 2462825.130 ops/s
# Warmup Iteration  15: 2435978.450 ops/s
# Warmup Iteration  16: 2513832.784 ops/s
# Warmup Iteration  17: 2492812.614 ops/s
# Warmup Iteration  18: 2492142.041 ops/s
# Warmup Iteration  19: 2470969.703 ops/s
# Warmup Iteration  20: 2515872.264 ops/s
# Warmup Iteration  21: 2527840.782 ops/s
# Warmup Iteration  22: 2570686.915 ops/s
# Warmup Iteration  23: 2549236.103 ops/s
# Warmup Iteration  24: 2630362.551 ops/s
# Warmup Iteration  25: 2624271.048 ops/s
# Warmup Iteration  26: 2606319.080 ops/s
# Warmup Iteration  27: 2509740.138 ops/s
# Warmup Iteration  28: 2490425.124 ops/s
# Warmup Iteration  29: 2502400.453 ops/s
# Warmup Iteration  30: 2512653.440 ops/s
Iteration   1: 2523893.577 ops/s
Iteration   2: 2499618.653 ops/s
Iteration   3: 2461448.154 ops/s
Iteration   4: 2484818.669 ops/s
Iteration   5: 2508576.079 ops/s
Iteration   6: 2491559.048 ops/s
Iteration   7: 2492749.255 ops/s
Iteration   8: 2477290.969 ops/s
Iteration   9: 2556272.450 ops/s
Iteration  10: 2624859.022 ops/s
Iteration  11: 2517875.916 ops/s
Iteration  12: 2477330.006 ops/s
Iteration  13: 2442253.243 ops/s
Iteration  14: 2500285.522 ops/s
Iteration  15: 2490971.585 ops/s
Iteration  16: 2494613.635 ops/s
Iteration  17: 2524526.633 ops/s
Iteration  18: 2459095.826 ops/s
Iteration  19: 2492371.516 ops/s
Iteration  20: 2467198.393 ops/s
Iteration  21: 2484892.528 ops/s
Iteration  22: 2463896.122 ops/s
Iteration  23: 2537904.784 ops/s
Iteration  24: 2520277.275 ops/s
Iteration  25: 2547805.880 ops/s
Iteration  26: 2542973.145 ops/s
Iteration  27: 2521563.583 ops/s
Iteration  28: 2458370.630 ops/s
Iteration  29: 2477456.834 ops/s
Iteration  30: 2591223.323 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectCharWithBagTarget":
  2504465.742 ±(99.9%) 27007.021 ops/s [Average]
  (min, avg, max) = (2442253.243, 2504465.742, 2624859.022), stdev = 40422.841
  CI (99.9%): [2477458.721, 2531472.763] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectCharWithBagTarget  thrpt   30  2504465.742 ± 27007.021  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 873009.715 ops/s
# Warmup Iteration   2: 1912409.066 ops/s
# Warmup Iteration   3: 1957504.750 ops/s
# Warmup Iteration   4: 1969572.466 ops/s
# Warmup Iteration   5: 1654816.595 ops/s
# Warmup Iteration   6: 2003608.967 ops/s
# Warmup Iteration   7: 1987141.475 ops/s
# Warmup Iteration   8: 1993177.952 ops/s
# Warmup Iteration   9: 1955325.745 ops/s
# Warmup Iteration  10: 1981246.564 ops/s
# Warmup Iteration  11: 1977232.730 ops/s
# Warmup Iteration  12: 1973163.116 ops/s
# Warmup Iteration  13: 1994196.658 ops/s
# Warmup Iteration  14: 1969797.060 ops/s
# Warmup Iteration  15: 1985775.007 ops/s
# Warmup Iteration  16: 1979230.847 ops/s
# Warmup Iteration  17: 1962510.085 ops/s
# Warmup Iteration  18: 1988954.988 ops/s
# Warmup Iteration  19: 1999347.551 ops/s
# Warmup Iteration  20: 2061158.570 ops/s
# Warmup Iteration  21: 1990281.110 ops/s
# Warmup Iteration  22: 2067041.835 ops/s
# Warmup Iteration  23: 2011631.051 ops/s
# Warmup Iteration  24: 2003554.339 ops/s
# Warmup Iteration  25: 1979913.307 ops/s
# Warmup Iteration  26: 2007211.043 ops/s
# Warmup Iteration  27: 1981912.822 ops/s
# Warmup Iteration  28: 1992390.010 ops/s
# Warmup Iteration  29: 1991977.518 ops/s
# Warmup Iteration  30: 1982710.011 ops/s
Iteration   1: 1997321.871 ops/s
Iteration   2: 1996413.756 ops/s
Iteration   3: 2026966.000 ops/s
Iteration   4: 2022270.051 ops/s
Iteration   5: 1990174.148 ops/s
Iteration   6: 1979247.850 ops/s
Iteration   7: 2010538.689 ops/s
Iteration   8: 1968128.995 ops/s
Iteration   9: 2057845.914 ops/s
Iteration  10: 2078265.630 ops/s
Iteration  11: 1979243.177 ops/s
Iteration  12: 1968255.879 ops/s
Iteration  13: 1984295.716 ops/s
Iteration  14: 1998936.830 ops/s
Iteration  15: 2019401.843 ops/s
Iteration  16: 1979266.270 ops/s
Iteration  17: 2000779.672 ops/s
Iteration  18: 2098251.110 ops/s
Iteration  19: 2072958.353 ops/s
Iteration  20: 1991867.083 ops/s
Iteration  21: 1976094.673 ops/s
Iteration  22: 2025861.540 ops/s
Iteration  23: 2006105.935 ops/s
Iteration  24: 2004891.070 ops/s
Iteration  25: 1997717.553 ops/s
Iteration  26: 2017282.310 ops/s
Iteration  27: 2029582.149 ops/s
Iteration  28: 2080414.481 ops/s
Iteration  29: 2006105.059 ops/s
Iteration  30: 2025437.315 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectCharWithTarget":
  2012997.364 ±(99.9%) 23033.362 ops/s [Average]
  (min, avg, max) = (1968128.995, 2012997.364, 2098251.110), stdev = 34475.255
  CI (99.9%): [1989964.002, 2036030.726] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  2012997.364 ± 23033.362  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 321252.743 ops/s
# Warmup Iteration   2: 670682.029 ops/s
# Warmup Iteration   3: 690581.369 ops/s
# Warmup Iteration   4: 717246.763 ops/s
# Warmup Iteration   5: 615566.890 ops/s
# Warmup Iteration   6: 719916.283 ops/s
# Warmup Iteration   7: 707712.576 ops/s
# Warmup Iteration   8: 709141.754 ops/s
# Warmup Iteration   9: 691350.173 ops/s
# Warmup Iteration  10: 701356.819 ops/s
# Warmup Iteration  11: 707412.236 ops/s
# Warmup Iteration  12: 703187.427 ops/s
# Warmup Iteration  13: 709399.563 ops/s
# Warmup Iteration  14: 701336.388 ops/s
# Warmup Iteration  15: 718874.388 ops/s
# Warmup Iteration  16: 705447.118 ops/s
# Warmup Iteration  17: 713234.015 ops/s
# Warmup Iteration  18: 734891.880 ops/s
# Warmup Iteration  19: 728729.182 ops/s
# Warmup Iteration  20: 709192.598 ops/s
# Warmup Iteration  21: 702237.798 ops/s
# Warmup Iteration  22: 700798.325 ops/s
# Warmup Iteration  23: 732639.128 ops/s
# Warmup Iteration  24: 718826.609 ops/s
# Warmup Iteration  25: 706156.373 ops/s
# Warmup Iteration  26: 708064.571 ops/s
# Warmup Iteration  27: 702884.451 ops/s
# Warmup Iteration  28: 707167.338 ops/s
# Warmup Iteration  29: 698606.323 ops/s
# Warmup Iteration  30: 700641.712 ops/s
Iteration   1: 697550.839 ops/s
Iteration   2: 709346.606 ops/s
Iteration   3: 691239.183 ops/s
Iteration   4: 704448.907 ops/s
Iteration   5: 700765.961 ops/s
Iteration   6: 703268.378 ops/s
Iteration   7: 730221.493 ops/s
Iteration   8: 742331.286 ops/s
Iteration   9: 704282.816 ops/s
Iteration  10: 702696.990 ops/s
Iteration  11: 700626.601 ops/s
Iteration  12: 697599.857 ops/s
Iteration  13: 699827.309 ops/s
Iteration  14: 704155.751 ops/s
Iteration  15: 700182.576 ops/s
Iteration  16: 692684.752 ops/s
Iteration  17: 708707.658 ops/s
Iteration  18: 692681.472 ops/s
Iteration  19: 696528.131 ops/s
Iteration  20: 698638.194 ops/s
Iteration  21: 700905.078 ops/s
Iteration  22: 696881.638 ops/s
Iteration  23: 690259.874 ops/s
Iteration  24: 711404.870 ops/s
Iteration  25: 706060.436 ops/s
Iteration  26: 704118.311 ops/s
Iteration  27: 707670.277 ops/s
Iteration  28: 703943.121 ops/s
Iteration  29: 698820.770 ops/s
Iteration  30: 720232.550 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectDouble":
  703936.056 ±(99.9%) 7299.733 ops/s [Average]
  (min, avg, max) = (690259.874, 703936.056, 742331.286), stdev = 10925.897
  CI (99.9%): [696636.323, 711235.789] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectDouble  thrpt   30  703936.056 ± 7299.733  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectDoubleWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectDoubleWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 779031.841 ops/s
# Warmup Iteration   2: 1879430.090 ops/s
# Warmup Iteration   3: 1983826.638 ops/s
# Warmup Iteration   4: 1673998.776 ops/s
# Warmup Iteration   5: 1966328.514 ops/s
# Warmup Iteration   6: 2000746.475 ops/s
# Warmup Iteration   7: 2012985.014 ops/s
# Warmup Iteration   8: 2011493.962 ops/s
# Warmup Iteration   9: 2031416.040 ops/s
# Warmup Iteration  10: 2030184.700 ops/s
# Warmup Iteration  11: 2009130.305 ops/s
# Warmup Iteration  12: 1994027.980 ops/s
# Warmup Iteration  13: 1997446.044 ops/s
# Warmup Iteration  14: 1947135.075 ops/s
# Warmup Iteration  15: 2017030.432 ops/s
# Warmup Iteration  16: 1989901.711 ops/s
# Warmup Iteration  17: 2017114.188 ops/s
# Warmup Iteration  18: 2060900.196 ops/s
# Warmup Iteration  19: 2014575.187 ops/s
# Warmup Iteration  20: 1978718.839 ops/s
# Warmup Iteration  21: 1992081.142 ops/s
# Warmup Iteration  22: 1996816.701 ops/s
# Warmup Iteration  23: 1974747.250 ops/s
# Warmup Iteration  24: 1979377.745 ops/s
# Warmup Iteration  25: 1982767.243 ops/s
# Warmup Iteration  26: 1973660.007 ops/s
# Warmup Iteration  27: 1993515.714 ops/s
# Warmup Iteration  28: 2015525.244 ops/s
# Warmup Iteration  29: 1978566.491 ops/s
# Warmup Iteration  30: 1994782.611 ops/s
Iteration   1: 1969844.298 ops/s
Iteration   2: 1958703.432 ops/s
Iteration   3: 1999026.881 ops/s
Iteration   4: 2020061.639 ops/s
Iteration   5: 1982185.962 ops/s
Iteration   6: 1971286.226 ops/s
Iteration   7: 2035420.954 ops/s
Iteration   8: 2015478.335 ops/s
Iteration   9: 1971784.558 ops/s
Iteration  10: 2022849.733 ops/s
Iteration  11: 2009943.011 ops/s
Iteration  12: 1997832.902 ops/s
Iteration  13: 1989471.393 ops/s
Iteration  14: 1970817.992 ops/s
Iteration  15: 1993100.564 ops/s
Iteration  16: 2034782.525 ops/s
Iteration  17: 2010724.198 ops/s
Iteration  18: 1971344.728 ops/s
Iteration  19: 1971436.870 ops/s
Iteration  20: 2011255.902 ops/s
Iteration  21: 2041257.656 ops/s
Iteration  22: 2098898.916 ops/s
Iteration  23: 2102396.487 ops/s
Iteration  24: 2018114.576 ops/s
Iteration  25: 2011804.950 ops/s
Iteration  26: 2026550.047 ops/s
Iteration  27: 2089428.506 ops/s
Iteration  28: 2103581.316 ops/s
Iteration  29: 2100976.484 ops/s
Iteration  30: 2037751.371 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectDoubleWithBagTarget":
  2017937.080 ±(99.9%) 29098.834 ops/s [Average]
  (min, avg, max) = (1958703.432, 2017937.080, 2103581.316), stdev = 43553.768
  CI (99.9%): [1988838.247, 2047035.914] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectDoubleWithBagTarget  thrpt   30  2017937.080 ± 29098.834  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 709423.867 ops/s
# Warmup Iteration   2: 1600563.359 ops/s
# Warmup Iteration   3: 1702652.639 ops/s
# Warmup Iteration   4: 1559717.758 ops/s
# Warmup Iteration   5: 1464567.663 ops/s
# Warmup Iteration   6: 1664727.517 ops/s
# Warmup Iteration   7: 1689277.874 ops/s
# Warmup Iteration   8: 1729148.758 ops/s
# Warmup Iteration   9: 1652948.882 ops/s
# Warmup Iteration  10: 1731820.619 ops/s
# Warmup Iteration  11: 1716231.176 ops/s
# Warmup Iteration  12: 1679380.023 ops/s
# Warmup Iteration  13: 1636552.797 ops/s
# Warmup Iteration  14: 1630133.866 ops/s
# Warmup Iteration  15: 1630232.896 ops/s
# Warmup Iteration  16: 1659593.884 ops/s
# Warmup Iteration  17: 1670354.310 ops/s
# Warmup Iteration  18: 1664036.838 ops/s
# Warmup Iteration  19: 1731309.176 ops/s
# Warmup Iteration  20: 1727477.771 ops/s
# Warmup Iteration  21: 1671615.067 ops/s
# Warmup Iteration  22: 1625403.356 ops/s
# Warmup Iteration  23: 1638135.686 ops/s
# Warmup Iteration  24: 1654888.590 ops/s
# Warmup Iteration  25: 1624085.868 ops/s
# Warmup Iteration  26: 1615915.567 ops/s
# Warmup Iteration  27: 1651661.066 ops/s
# Warmup Iteration  28: 1687393.027 ops/s
# Warmup Iteration  29: 1651890.076 ops/s
# Warmup Iteration  30: 1666769.486 ops/s
Iteration   1: 1648966.283 ops/s
Iteration   2: 1617697.950 ops/s
Iteration   3: 1638765.558 ops/s
Iteration   4: 1630882.568 ops/s
Iteration   5: 1700747.293 ops/s
Iteration   6: 1694910.278 ops/s
Iteration   7: 1648812.403 ops/s
Iteration   8: 1629241.181 ops/s
Iteration   9: 1673709.792 ops/s
Iteration  10: 1726354.791 ops/s
Iteration  11: 1730970.641 ops/s
Iteration  12: 1653372.844 ops/s
Iteration  13: 1635608.699 ops/s
Iteration  14: 1636658.538 ops/s
Iteration  15: 1642985.203 ops/s
Iteration  16: 1648391.816 ops/s
Iteration  17: 1727649.384 ops/s
Iteration  18: 1628908.371 ops/s
Iteration  19: 1653245.976 ops/s
Iteration  20: 1728461.070 ops/s
Iteration  21: 1649855.627 ops/s
Iteration  22: 1672060.217 ops/s
Iteration  23: 1639702.896 ops/s
Iteration  24: 1630733.967 ops/s
Iteration  25: 1654559.875 ops/s
Iteration  26: 1688956.160 ops/s
Iteration  27: 1734612.349 ops/s
Iteration  28: 1708389.066 ops/s
Iteration  29: 1670825.108 ops/s
Iteration  30: 1657660.823 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectDoubleWithTarget":
  1666789.891 ±(99.9%) 24090.616 ops/s [Average]
  (min, avg, max) = (1617697.950, 1666789.891, 1734612.349), stdev = 36057.702
  CI (99.9%): [1642699.275, 1690880.506] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  1666789.891 ± 24090.616  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 370354.636 ops/s
# Warmup Iteration   2: 668701.644 ops/s
# Warmup Iteration   3: 740870.555 ops/s
# Warmup Iteration   4: 742188.574 ops/s
# Warmup Iteration   5: 742370.699 ops/s
# Warmup Iteration   6: 642575.416 ops/s
# Warmup Iteration   7: 761603.514 ops/s
# Warmup Iteration   8: 788579.042 ops/s
# Warmup Iteration   9: 768225.268 ops/s
# Warmup Iteration  10: 751628.651 ops/s
# Warmup Iteration  11: 765223.880 ops/s
# Warmup Iteration  12: 745783.141 ops/s
# Warmup Iteration  13: 764664.160 ops/s
# Warmup Iteration  14: 753343.198 ops/s
# Warmup Iteration  15: 755319.053 ops/s
# Warmup Iteration  16: 763159.360 ops/s
# Warmup Iteration  17: 765943.916 ops/s
# Warmup Iteration  18: 738858.911 ops/s
# Warmup Iteration  19: 740459.892 ops/s
# Warmup Iteration  20: 760768.427 ops/s
# Warmup Iteration  21: 746073.177 ops/s
# Warmup Iteration  22: 751297.252 ops/s
# Warmup Iteration  23: 767073.858 ops/s
# Warmup Iteration  24: 789404.061 ops/s
# Warmup Iteration  25: 766423.006 ops/s
# Warmup Iteration  26: 761313.128 ops/s
# Warmup Iteration  27: 756434.504 ops/s
# Warmup Iteration  28: 751978.883 ops/s
# Warmup Iteration  29: 758960.920 ops/s
# Warmup Iteration  30: 745476.536 ops/s
Iteration   1: 754587.597 ops/s
Iteration   2: 742472.657 ops/s
Iteration   3: 777422.996 ops/s
Iteration   4: 750719.320 ops/s
Iteration   5: 764135.052 ops/s
Iteration   6: 755519.785 ops/s
Iteration   7: 758436.664 ops/s
Iteration   8: 757409.501 ops/s
Iteration   9: 757381.138 ops/s
Iteration  10: 756133.314 ops/s
Iteration  11: 748393.937 ops/s
Iteration  12: 750238.140 ops/s
Iteration  13: 764547.793 ops/s
Iteration  14: 755750.200 ops/s
Iteration  15: 748336.298 ops/s
Iteration  16: 780152.881 ops/s
Iteration  17: 784396.173 ops/s
Iteration  18: 748699.356 ops/s
Iteration  19: 756982.664 ops/s
Iteration  20: 745216.082 ops/s
Iteration  21: 752520.504 ops/s
Iteration  22: 762016.682 ops/s
Iteration  23: 788093.332 ops/s
Iteration  24: 788738.153 ops/s
Iteration  25: 787666.435 ops/s
Iteration  26: 775717.170 ops/s
Iteration  27: 791407.081 ops/s
Iteration  28: 788257.903 ops/s
Iteration  29: 789304.885 ops/s
Iteration  30: 790769.463 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectFloat":
  765714.105 ±(99.9%) 10995.238 ops/s [Average]
  (min, avg, max) = (742472.657, 765714.105, 791407.081), stdev = 16457.156
  CI (99.9%): [754718.867, 776709.343] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectFloat  thrpt   30  765714.105 ± 10995.238  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectFloatWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectFloatWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 873085.903 ops/s
# Warmup Iteration   2: 2030656.861 ops/s
# Warmup Iteration   3: 2123182.712 ops/s
# Warmup Iteration   4: 1889634.380 ops/s
# Warmup Iteration   5: 1986652.380 ops/s
# Warmup Iteration   6: 2252714.436 ops/s
# Warmup Iteration   7: 2265582.044 ops/s
# Warmup Iteration   8: 2158174.853 ops/s
# Warmup Iteration   9: 2181486.951 ops/s
# Warmup Iteration  10: 2125173.711 ops/s
# Warmup Iteration  11: 2125475.795 ops/s
# Warmup Iteration  12: 2156695.389 ops/s
# Warmup Iteration  13: 2253913.511 ops/s
# Warmup Iteration  14: 2131837.354 ops/s
# Warmup Iteration  15: 2139753.995 ops/s
# Warmup Iteration  16: 2204011.450 ops/s
# Warmup Iteration  17: 2259369.652 ops/s
# Warmup Iteration  18: 2237724.862 ops/s
# Warmup Iteration  19: 2204614.242 ops/s
# Warmup Iteration  20: 2254546.552 ops/s
# Warmup Iteration  21: 2141119.318 ops/s
# Warmup Iteration  22: 2139600.438 ops/s
# Warmup Iteration  23: 2175336.894 ops/s
# Warmup Iteration  24: 2163003.762 ops/s
# Warmup Iteration  25: 2249286.635 ops/s
# Warmup Iteration  26: 2151597.846 ops/s
# Warmup Iteration  27: 2175452.919 ops/s
# Warmup Iteration  28: 2156633.419 ops/s
# Warmup Iteration  29: 2196295.191 ops/s
# Warmup Iteration  30: 2178141.672 ops/s
Iteration   1: 2140085.250 ops/s
Iteration   2: 2174336.829 ops/s
Iteration   3: 2190947.220 ops/s
Iteration   4: 2250706.205 ops/s
Iteration   5: 2209457.721 ops/s
Iteration   6: 2248902.804 ops/s
Iteration   7: 2174127.117 ops/s
Iteration   8: 2125273.695 ops/s
Iteration   9: 2257772.188 ops/s
Iteration  10: 2222624.730 ops/s
Iteration  11: 2151511.745 ops/s
Iteration  12: 2198691.170 ops/s
Iteration  13: 2137567.385 ops/s
Iteration  14: 2173420.092 ops/s
Iteration  15: 2260852.175 ops/s
Iteration  16: 2188674.517 ops/s
Iteration  17: 2251671.384 ops/s
Iteration  18: 2101783.985 ops/s
Iteration  19: 2266072.345 ops/s
Iteration  20: 2269071.784 ops/s
Iteration  21: 2214579.501 ops/s
Iteration  22: 2228736.064 ops/s
Iteration  23: 2197615.605 ops/s
Iteration  24: 2175493.925 ops/s
Iteration  25: 2193321.066 ops/s
Iteration  26: 2197054.397 ops/s
Iteration  27: 2214791.563 ops/s
Iteration  28: 2215373.141 ops/s
Iteration  29: 2176457.612 ops/s
Iteration  30: 2199379.652 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectFloatWithBagTarget":
  2200211.762 ±(99.9%) 28945.494 ops/s [Average]
  (min, avg, max) = (2101783.985, 2200211.762, 2269071.784), stdev = 43324.256
  CI (99.9%): [2171266.268, 2229157.256] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectFloatWithBagTarget  thrpt   30  2200211.762 ± 28945.494  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 811421.725 ops/s
# Warmup Iteration   2: 1744512.741 ops/s
# Warmup Iteration   3: 1779581.715 ops/s
# Warmup Iteration   4: 1820778.475 ops/s
# Warmup Iteration   5: 1535002.445 ops/s
# Warmup Iteration   6: 1847152.148 ops/s
# Warmup Iteration   7: 1906374.081 ops/s
# Warmup Iteration   8: 1856628.002 ops/s
# Warmup Iteration   9: 1783344.319 ops/s
# Warmup Iteration  10: 1780860.184 ops/s
# Warmup Iteration  11: 1803221.519 ops/s
# Warmup Iteration  12: 1800775.638 ops/s
# Warmup Iteration  13: 1784563.164 ops/s
# Warmup Iteration  14: 1789452.515 ops/s
# Warmup Iteration  15: 1890427.166 ops/s
# Warmup Iteration  16: 1838134.132 ops/s
# Warmup Iteration  17: 1809181.204 ops/s
# Warmup Iteration  18: 1795251.345 ops/s
# Warmup Iteration  19: 1795010.021 ops/s
# Warmup Iteration  20: 1775347.599 ops/s
# Warmup Iteration  21: 1822852.977 ops/s
# Warmup Iteration  22: 1837718.041 ops/s
# Warmup Iteration  23: 1807999.260 ops/s
# Warmup Iteration  24: 1861264.799 ops/s
# Warmup Iteration  25: 1820703.525 ops/s
# Warmup Iteration  26: 1809978.927 ops/s
# Warmup Iteration  27: 1818583.617 ops/s
# Warmup Iteration  28: 1821578.596 ops/s
# Warmup Iteration  29: 1776104.285 ops/s
# Warmup Iteration  30: 1779131.152 ops/s
Iteration   1: 1786072.442 ops/s
Iteration   2: 1822467.565 ops/s
Iteration   3: 1848174.044 ops/s
Iteration   4: 1806885.652 ops/s
Iteration   5: 1811729.503 ops/s
Iteration   6: 1896630.818 ops/s
Iteration   7: 1901759.865 ops/s
Iteration   8: 1899101.555 ops/s
Iteration   9: 1905213.013 ops/s
Iteration  10: 1836027.850 ops/s
Iteration  11: 1802063.514 ops/s
Iteration  12: 1794349.644 ops/s
Iteration  13: 1808095.167 ops/s
Iteration  14: 1816626.979 ops/s
Iteration  15: 1778935.264 ops/s
Iteration  16: 1815651.758 ops/s
Iteration  17: 1792607.032 ops/s
Iteration  18: 1775923.365 ops/s
Iteration  19: 1815409.930 ops/s
Iteration  20: 1753668.001 ops/s
Iteration  21: 1782652.098 ops/s
Iteration  22: 1824920.091 ops/s
Iteration  23: 1791905.218 ops/s
Iteration  24: 1790258.418 ops/s
Iteration  25: 1897219.212 ops/s
Iteration  26: 1912484.050 ops/s
Iteration  27: 1831728.373 ops/s
Iteration  28: 1808859.553 ops/s
Iteration  29: 1804778.706 ops/s
Iteration  30: 1786440.925 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectFloatWithTarget":
  1823287.987 ±(99.9%) 29718.764 ops/s [Average]
  (min, avg, max) = (1753668.001, 1823287.987, 1912484.050), stdev = 44481.650
  CI (99.9%): [1793569.223, 1853006.751] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  1823287.987 ± 29718.764  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 332345.773 ops/s
# Warmup Iteration   2: 598115.586 ops/s
# Warmup Iteration   3: 679695.946 ops/s
# Warmup Iteration   4: 687911.450 ops/s
# Warmup Iteration   5: 665119.085 ops/s
# Warmup Iteration   6: 556039.188 ops/s
# Warmup Iteration   7: 674569.491 ops/s
# Warmup Iteration   8: 672709.413 ops/s
# Warmup Iteration   9: 662179.580 ops/s
# Warmup Iteration  10: 678646.153 ops/s
# Warmup Iteration  11: 688866.282 ops/s
# Warmup Iteration  12: 704013.300 ops/s
# Warmup Iteration  13: 700404.168 ops/s
# Warmup Iteration  14: 659611.632 ops/s
# Warmup Iteration  15: 668455.326 ops/s
# Warmup Iteration  16: 664675.346 ops/s
# Warmup Iteration  17: 673816.348 ops/s
# Warmup Iteration  18: 662382.494 ops/s
# Warmup Iteration  19: 663518.734 ops/s
# Warmup Iteration  20: 665872.071 ops/s
# Warmup Iteration  21: 665184.209 ops/s
# Warmup Iteration  22: 662384.809 ops/s
# Warmup Iteration  23: 671271.152 ops/s
# Warmup Iteration  24: 670072.420 ops/s
# Warmup Iteration  25: 670083.939 ops/s
# Warmup Iteration  26: 665877.428 ops/s
# Warmup Iteration  27: 682116.234 ops/s
# Warmup Iteration  28: 681844.293 ops/s
# Warmup Iteration  29: 673549.640 ops/s
# Warmup Iteration  30: 676583.379 ops/s
Iteration   1: 686472.287 ops/s
Iteration   2: 665526.656 ops/s
Iteration   3: 663831.788 ops/s
Iteration   4: 674847.429 ops/s
Iteration   5: 708687.366 ops/s
Iteration   6: 683165.731 ops/s
Iteration   7: 673215.331 ops/s
Iteration   8: 673161.218 ops/s
Iteration   9: 670418.436 ops/s
Iteration  10: 668465.656 ops/s
Iteration  11: 685931.535 ops/s
Iteration  12: 672518.876 ops/s
Iteration  13: 701081.521 ops/s
Iteration  14: 710286.538 ops/s
Iteration  15: 689209.382 ops/s
Iteration  16: 659995.598 ops/s
Iteration  17: 678859.582 ops/s
Iteration  18: 665360.981 ops/s
Iteration  19: 673871.835 ops/s
Iteration  20: 705261.638 ops/s
Iteration  21: 707902.195 ops/s
Iteration  22: 704360.164 ops/s
Iteration  23: 682821.357 ops/s
Iteration  24: 683512.919 ops/s
Iteration  25: 671029.170 ops/s
Iteration  26: 692342.644 ops/s
Iteration  27: 664798.151 ops/s
Iteration  28: 704789.882 ops/s
Iteration  29: 709316.866 ops/s
Iteration  30: 709118.028 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectIf":
  684672.025 ±(99.9%) 11126.063 ops/s [Average]
  (min, avg, max) = (659995.598, 684672.025, 710286.538), stdev = 16652.968
  CI (99.9%): [673545.963, 695798.088] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectIf  thrpt   30  684672.025 ± 11126.063  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 405602.611 ops/s
# Warmup Iteration   2: 766011.254 ops/s
# Warmup Iteration   3: 838129.705 ops/s
# Warmup Iteration   4: 814780.227 ops/s
# Warmup Iteration   5: 689416.135 ops/s
# Warmup Iteration   6: 827671.502 ops/s
# Warmup Iteration   7: 819879.935 ops/s
# Warmup Iteration   8: 820955.860 ops/s
# Warmup Iteration   9: 843037.603 ops/s
# Warmup Iteration  10: 830253.135 ops/s
# Warmup Iteration  11: 815316.212 ops/s
# Warmup Iteration  12: 819537.578 ops/s
# Warmup Iteration  13: 818822.117 ops/s
# Warmup Iteration  14: 829214.324 ops/s
# Warmup Iteration  15: 819893.970 ops/s
# Warmup Iteration  16: 834664.734 ops/s
# Warmup Iteration  17: 818882.954 ops/s
# Warmup Iteration  18: 830519.288 ops/s
# Warmup Iteration  19: 817798.787 ops/s
# Warmup Iteration  20: 848551.195 ops/s
# Warmup Iteration  21: 818301.956 ops/s
# Warmup Iteration  22: 819565.014 ops/s
# Warmup Iteration  23: 830822.515 ops/s
# Warmup Iteration  24: 843924.134 ops/s
# Warmup Iteration  25: 836158.751 ops/s
# Warmup Iteration  26: 844699.187 ops/s
# Warmup Iteration  27: 823153.307 ops/s
# Warmup Iteration  28: 825698.358 ops/s
# Warmup Iteration  29: 834260.650 ops/s
# Warmup Iteration  30: 853263.839 ops/s
Iteration   1: 812530.643 ops/s
Iteration   2: 818518.721 ops/s
Iteration   3: 831730.371 ops/s
Iteration   4: 852669.065 ops/s
Iteration   5: 809634.463 ops/s
Iteration   6: 830090.531 ops/s
Iteration   7: 814211.455 ops/s
Iteration   8: 827359.680 ops/s
Iteration   9: 854226.021 ops/s
Iteration  10: 827826.185 ops/s
Iteration  11: 852736.550 ops/s
Iteration  12: 834719.730 ops/s
Iteration  13: 832573.316 ops/s
Iteration  14: 829885.562 ops/s
Iteration  15: 827029.548 ops/s
Iteration  16: 812886.241 ops/s
Iteration  17: 829286.524 ops/s
Iteration  18: 815134.575 ops/s
Iteration  19: 828141.063 ops/s
Iteration  20: 817926.749 ops/s
Iteration  21: 840933.213 ops/s
Iteration  22: 847959.307 ops/s
Iteration  23: 814461.338 ops/s
Iteration  24: 821579.798 ops/s
Iteration  25: 843904.452 ops/s
Iteration  26: 812612.347 ops/s
Iteration  27: 822018.501 ops/s
Iteration  28: 838759.845 ops/s
Iteration  29: 841020.605 ops/s
Iteration  30: 838977.491 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectInt":
  829378.130 ±(99.9%) 8786.571 ops/s [Average]
  (min, avg, max) = (809634.463, 829378.130, 854226.021), stdev = 13151.327
  CI (99.9%): [820591.559, 838164.701] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectInt  thrpt   30  829378.130 ± 8786.571  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectIntWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectIntWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 945360.354 ops/s
# Warmup Iteration   2: 2321035.334 ops/s
# Warmup Iteration   3: 2400567.736 ops/s
# Warmup Iteration   4: 2065220.447 ops/s
# Warmup Iteration   5: 2494556.026 ops/s
# Warmup Iteration   6: 2487037.940 ops/s
# Warmup Iteration   7: 2429851.163 ops/s
# Warmup Iteration   8: 2485794.779 ops/s
# Warmup Iteration   9: 2491985.655 ops/s
# Warmup Iteration  10: 2501194.011 ops/s
# Warmup Iteration  11: 2497182.362 ops/s
# Warmup Iteration  12: 2500055.009 ops/s
# Warmup Iteration  13: 2498974.976 ops/s
# Warmup Iteration  14: 2499640.058 ops/s
# Warmup Iteration  15: 2497885.916 ops/s
# Warmup Iteration  16: 2496717.125 ops/s
# Warmup Iteration  17: 2503040.077 ops/s
# Warmup Iteration  18: 2499975.126 ops/s
# Warmup Iteration  19: 2502479.259 ops/s
# Warmup Iteration  20: 2488459.736 ops/s
# Warmup Iteration  21: 2467947.299 ops/s
# Warmup Iteration  22: 2472198.114 ops/s
# Warmup Iteration  23: 2493114.876 ops/s
# Warmup Iteration  24: 2460090.659 ops/s
# Warmup Iteration  25: 2494335.657 ops/s
# Warmup Iteration  26: 2500367.310 ops/s
# Warmup Iteration  27: 2500968.281 ops/s
# Warmup Iteration  28: 2499099.776 ops/s
# Warmup Iteration  29: 2498792.950 ops/s
# Warmup Iteration  30: 2498164.773 ops/s
Iteration   1: 2496366.608 ops/s
Iteration   2: 2501651.038 ops/s
Iteration   3: 2503133.894 ops/s
Iteration   4: 2503566.551 ops/s
Iteration   5: 2496318.958 ops/s
Iteration   6: 2498014.433 ops/s
Iteration   7: 2498890.115 ops/s
Iteration   8: 2500269.439 ops/s
Iteration   9: 2497719.185 ops/s
Iteration  10: 2498319.734 ops/s
Iteration  11: 2499920.448 ops/s
Iteration  12: 2501322.364 ops/s
Iteration  13: 2499220.677 ops/s
Iteration  14: 2495736.471 ops/s
Iteration  15: 2485844.662 ops/s
Iteration  16: 2499672.135 ops/s
Iteration  17: 2500464.107 ops/s
Iteration  18: 2383279.200 ops/s
Iteration  19: 2334828.078 ops/s
Iteration  20: 2352165.694 ops/s
Iteration  21: 2350548.945 ops/s
Iteration  22: 2409768.604 ops/s
Iteration  23: 2346164.311 ops/s
Iteration  24: 2293177.661 ops/s
Iteration  25: 2328280.703 ops/s
Iteration  26: 2333298.357 ops/s
Iteration  27: 2327222.929 ops/s
Iteration  28: 2464784.652 ops/s
Iteration  29: 2496456.519 ops/s
Iteration  30: 2500171.827 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectIntWithBagTarget":
  2446552.610 ±(99.9%) 50035.169 ops/s [Average]
  (min, avg, max) = (2293177.661, 2446552.610, 2503566.551), stdev = 74890.291
  CI (99.9%): [2396517.441, 2496587.779] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectIntWithBagTarget  thrpt   30  2446552.610 ± 50035.169  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 851070.146 ops/s
# Warmup Iteration   2: 1826627.900 ops/s
# Warmup Iteration   3: 1881507.692 ops/s
# Warmup Iteration   4: 1886283.120 ops/s
# Warmup Iteration   5: 1565227.150 ops/s
# Warmup Iteration   6: 1895035.572 ops/s
# Warmup Iteration   7: 1878318.370 ops/s
# Warmup Iteration   8: 1869983.671 ops/s
# Warmup Iteration   9: 1879400.557 ops/s
# Warmup Iteration  10: 1894637.289 ops/s
# Warmup Iteration  11: 1985785.004 ops/s
# Warmup Iteration  12: 1910069.851 ops/s
# Warmup Iteration  13: 1928010.546 ops/s
# Warmup Iteration  14: 1926930.410 ops/s
# Warmup Iteration  15: 1892799.022 ops/s
# Warmup Iteration  16: 1879383.854 ops/s
# Warmup Iteration  17: 1895483.585 ops/s
# Warmup Iteration  18: 1902784.957 ops/s
# Warmup Iteration  19: 1873028.891 ops/s
# Warmup Iteration  20: 1917038.604 ops/s
# Warmup Iteration  21: 1871342.901 ops/s
# Warmup Iteration  22: 1881775.408 ops/s
# Warmup Iteration  23: 1877825.647 ops/s
# Warmup Iteration  24: 1867087.391 ops/s
# Warmup Iteration  25: 1904919.628 ops/s
# Warmup Iteration  26: 1913941.695 ops/s
# Warmup Iteration  27: 1911504.379 ops/s
# Warmup Iteration  28: 1881215.627 ops/s
# Warmup Iteration  29: 1866848.453 ops/s
# Warmup Iteration  30: 1877176.109 ops/s
Iteration   1: 1874551.709 ops/s
Iteration   2: 1881028.422 ops/s
Iteration   3: 1873838.804 ops/s
Iteration   4: 1933805.660 ops/s
Iteration   5: 2011528.581 ops/s
Iteration   6: 1977906.080 ops/s
Iteration   7: 1890785.132 ops/s
Iteration   8: 1867634.869 ops/s
Iteration   9: 1880226.517 ops/s
Iteration  10: 1866246.412 ops/s
Iteration  11: 1881584.900 ops/s
Iteration  12: 1873068.608 ops/s
Iteration  13: 1928551.092 ops/s
Iteration  14: 1883268.722 ops/s
Iteration  15: 1999593.182 ops/s
Iteration  16: 2009472.076 ops/s
Iteration  17: 1976240.140 ops/s
Iteration  18: 1911847.632 ops/s
Iteration  19: 1908927.542 ops/s
Iteration  20: 1916433.756 ops/s
Iteration  21: 1879829.213 ops/s
Iteration  22: 1912673.542 ops/s
Iteration  23: 1915178.572 ops/s
Iteration  24: 1899981.076 ops/s
Iteration  25: 1931850.385 ops/s
Iteration  26: 1917071.283 ops/s
Iteration  27: 1913847.599 ops/s
Iteration  28: 1956543.186 ops/s
Iteration  29: 1943086.237 ops/s
Iteration  30: 1893231.843 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectIntWithTarget":
  1916994.426 ±(99.9%) 28589.255 ops/s [Average]
  (min, avg, max) = (1866246.412, 1916994.426, 2011528.581), stdev = 42791.055
  CI (99.9%): [1888405.170, 1945583.681] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  1916994.426 ± 28589.255  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 334607.442 ops/s
# Warmup Iteration   2: 701625.458 ops/s
# Warmup Iteration   3: 735744.111 ops/s
# Warmup Iteration   4: 744612.209 ops/s
# Warmup Iteration   5: 621721.096 ops/s
# Warmup Iteration   6: 749216.353 ops/s
# Warmup Iteration   7: 737520.573 ops/s
# Warmup Iteration   8: 744896.112 ops/s
# Warmup Iteration   9: 764884.578 ops/s
# Warmup Iteration  10: 746454.538 ops/s
# Warmup Iteration  11: 749687.754 ops/s
# Warmup Iteration  12: 748973.799 ops/s
# Warmup Iteration  13: 735743.745 ops/s
# Warmup Iteration  14: 730271.554 ops/s
# Warmup Iteration  15: 734247.221 ops/s
# Warmup Iteration  16: 737395.247 ops/s
# Warmup Iteration  17: 738953.778 ops/s
# Warmup Iteration  18: 737657.544 ops/s
# Warmup Iteration  19: 738266.245 ops/s
# Warmup Iteration  20: 739002.378 ops/s
# Warmup Iteration  21: 738030.562 ops/s
# Warmup Iteration  22: 734602.069 ops/s
# Warmup Iteration  23: 736906.632 ops/s
# Warmup Iteration  24: 737262.269 ops/s
# Warmup Iteration  25: 731252.932 ops/s
# Warmup Iteration  26: 726968.791 ops/s
# Warmup Iteration  27: 727002.819 ops/s
# Warmup Iteration  28: 727060.369 ops/s
# Warmup Iteration  29: 764700.171 ops/s
# Warmup Iteration  30: 757141.036 ops/s
Iteration   1: 769229.734 ops/s
Iteration   2: 724783.964 ops/s
Iteration   3: 726544.729 ops/s
Iteration   4: 729232.994 ops/s
Iteration   5: 727709.074 ops/s
Iteration   6: 724699.009 ops/s
Iteration   7: 739320.909 ops/s
Iteration   8: 740358.787 ops/s
Iteration   9: 758105.441 ops/s
Iteration  10: 778176.055 ops/s
Iteration  11: 780056.514 ops/s
Iteration  12: 757786.183 ops/s
Iteration  13: 780005.288 ops/s
Iteration  14: 777268.206 ops/s
Iteration  15: 745855.789 ops/s
Iteration  16: 734034.042 ops/s
Iteration  17: 729813.541 ops/s
Iteration  18: 729257.641 ops/s
Iteration  19: 754779.749 ops/s
Iteration  20: 752826.583 ops/s
Iteration  21: 759819.600 ops/s
Iteration  22: 775682.044 ops/s
Iteration  23: 778668.125 ops/s
Iteration  24: 750963.102 ops/s
Iteration  25: 777221.541 ops/s
Iteration  26: 780111.673 ops/s
Iteration  27: 773318.736 ops/s
Iteration  28: 767094.323 ops/s
Iteration  29: 762983.546 ops/s
Iteration  30: 736806.153 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectLong":
  754083.769 ±(99.9%) 13502.078 ops/s [Average]
  (min, avg, max) = (724699.009, 754083.769, 780111.673), stdev = 20209.277
  CI (99.9%): [740581.691, 767585.847] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectLong  thrpt   30  754083.769 ± 13502.078  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectLongWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectLongWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 863944.891 ops/s
# Warmup Iteration   2: 2301285.363 ops/s
# Warmup Iteration   3: 2331337.323 ops/s
# Warmup Iteration   4: 1846741.853 ops/s
# Warmup Iteration   5: 2240048.779 ops/s
# Warmup Iteration   6: 2287388.719 ops/s
# Warmup Iteration   7: 2287809.512 ops/s
# Warmup Iteration   8: 2324949.193 ops/s
# Warmup Iteration   9: 2257753.227 ops/s
# Warmup Iteration  10: 2258070.962 ops/s
# Warmup Iteration  11: 2268188.868 ops/s
# Warmup Iteration  12: 2242839.549 ops/s
# Warmup Iteration  13: 2267652.770 ops/s
# Warmup Iteration  14: 2256564.891 ops/s
# Warmup Iteration  15: 2345651.431 ops/s
# Warmup Iteration  16: 2374603.001 ops/s
# Warmup Iteration  17: 2291483.681 ops/s
# Warmup Iteration  18: 2327562.863 ops/s
# Warmup Iteration  19: 2317931.416 ops/s
# Warmup Iteration  20: 2274029.775 ops/s
# Warmup Iteration  21: 2286723.421 ops/s
# Warmup Iteration  22: 2389894.956 ops/s
# Warmup Iteration  23: 2277409.436 ops/s
# Warmup Iteration  24: 2280996.958 ops/s
# Warmup Iteration  25: 2286269.165 ops/s
# Warmup Iteration  26: 2254792.517 ops/s
# Warmup Iteration  27: 2269282.272 ops/s
# Warmup Iteration  28: 2266101.445 ops/s
# Warmup Iteration  29: 2300135.073 ops/s
# Warmup Iteration  30: 2285050.841 ops/s
Iteration   1: 2301263.694 ops/s
Iteration   2: 2257794.501 ops/s
Iteration   3: 2250718.976 ops/s
Iteration   4: 2260766.379 ops/s
Iteration   5: 2303345.485 ops/s
Iteration   6: 2278034.802 ops/s
Iteration   7: 2270216.309 ops/s
Iteration   8: 2328091.568 ops/s
Iteration   9: 2302898.428 ops/s
Iteration  10: 2260581.609 ops/s
Iteration  11: 2269640.895 ops/s
Iteration  12: 2303022.506 ops/s
Iteration  13: 2384847.264 ops/s
Iteration  14: 2388760.777 ops/s
Iteration  15: 2292707.312 ops/s
Iteration  16: 2275496.574 ops/s
Iteration  17: 2258535.474 ops/s
Iteration  18: 2275286.138 ops/s
Iteration  19: 2226525.856 ops/s
Iteration  20: 2337472.989 ops/s
Iteration  21: 2394806.357 ops/s
Iteration  22: 2392586.644 ops/s
Iteration  23: 2390354.369 ops/s
Iteration  24: 2392870.397 ops/s
Iteration  25: 2274881.953 ops/s
Iteration  26: 2333619.401 ops/s
Iteration  27: 2285496.375 ops/s
Iteration  28: 2279590.070 ops/s
Iteration  29: 2251034.660 ops/s
Iteration  30: 2241985.672 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectLongWithBagTarget":
  2302107.781 ±(99.9%) 34570.658 ops/s [Average]
  (min, avg, max) = (2226525.856, 2302107.781, 2394806.357), stdev = 51743.737
  CI (99.9%): [2267537.123, 2336678.439] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectLongWithBagTarget  thrpt   30  2302107.781 ± 34570.658  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 708892.344 ops/s
# Warmup Iteration   2: 1723674.871 ops/s
# Warmup Iteration   3: 1871679.790 ops/s
# Warmup Iteration   4: 1616863.925 ops/s
# Warmup Iteration   5: 1894782.372 ops/s
# Warmup Iteration   6: 1813632.206 ops/s
# Warmup Iteration   7: 1818899.094 ops/s
# Warmup Iteration   8: 1892695.098 ops/s
# Warmup Iteration   9: 1901561.409 ops/s
# Warmup Iteration  10: 1852228.823 ops/s
# Warmup Iteration  11: 1832041.609 ops/s
# Warmup Iteration  12: 1809650.922 ops/s
# Warmup Iteration  13: 1792226.325 ops/s
# Warmup Iteration  14: 1824590.406 ops/s
# Warmup Iteration  15: 1808006.899 ops/s
# Warmup Iteration  16: 1885890.605 ops/s
# Warmup Iteration  17: 1810745.014 ops/s
# Warmup Iteration  18: 1812807.375 ops/s
# Warmup Iteration  19: 1808869.927 ops/s
# Warmup Iteration  20: 1846926.589 ops/s
# Warmup Iteration  21: 1853698.401 ops/s
# Warmup Iteration  22: 1863320.518 ops/s
# Warmup Iteration  23: 1839095.518 ops/s
# Warmup Iteration  24: 1838340.396 ops/s
# Warmup Iteration  25: 1849191.158 ops/s
# Warmup Iteration  26: 1814342.687 ops/s
# Warmup Iteration  27: 1827407.512 ops/s
# Warmup Iteration  28: 1881285.525 ops/s
# Warmup Iteration  29: 1833166.210 ops/s
# Warmup Iteration  30: 1821978.073 ops/s
Iteration   1: 1840905.704 ops/s
Iteration   2: 1842495.566 ops/s
Iteration   3: 1855144.217 ops/s
Iteration   4: 1945952.571 ops/s
Iteration   5: 1938269.335 ops/s
Iteration   6: 1860564.595 ops/s
Iteration   7: 1879067.634 ops/s
Iteration   8: 1878361.623 ops/s
Iteration   9: 1842156.453 ops/s
Iteration  10: 1846985.412 ops/s
Iteration  11: 1831137.842 ops/s
Iteration  12: 1818032.439 ops/s
Iteration  13: 1799366.514 ops/s
Iteration  14: 1836406.605 ops/s
Iteration  15: 1839994.402 ops/s
Iteration  16: 1817511.333 ops/s
Iteration  17: 1858433.022 ops/s
Iteration  18: 1851368.867 ops/s
Iteration  19: 1835212.397 ops/s
Iteration  20: 1905259.917 ops/s
Iteration  21: 1824472.736 ops/s
Iteration  22: 1821332.131 ops/s
Iteration  23: 1803478.802 ops/s
Iteration  24: 1918205.810 ops/s
Iteration  25: 1895031.672 ops/s
Iteration  26: 1821960.232 ops/s
Iteration  27: 1853619.289 ops/s
Iteration  28: 1855160.090 ops/s
Iteration  29: 1864892.162 ops/s
Iteration  30: 1826801.291 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectLongWithTarget":
  1853586.022 ±(99.9%) 24544.990 ops/s [Average]
  (min, avg, max) = (1799366.514, 1853586.022, 1945952.571), stdev = 36737.788
  CI (99.9%): [1829041.032, 1878131.012] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  1853586.022 ± 24544.990  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 411745.793 ops/s
# Warmup Iteration   2: 795601.002 ops/s
# Warmup Iteration   3: 851362.198 ops/s
# Warmup Iteration   4: 859096.520 ops/s
# Warmup Iteration   5: 712062.164 ops/s
# Warmup Iteration   6: 852720.881 ops/s
# Warmup Iteration   7: 856893.986 ops/s
# Warmup Iteration   8: 865797.058 ops/s
# Warmup Iteration   9: 855805.135 ops/s
# Warmup Iteration  10: 854905.406 ops/s
# Warmup Iteration  11: 915616.441 ops/s
# Warmup Iteration  12: 873771.564 ops/s
# Warmup Iteration  13: 850353.177 ops/s
# Warmup Iteration  14: 861427.551 ops/s
# Warmup Iteration  15: 853982.208 ops/s
# Warmup Iteration  16: 865344.133 ops/s
# Warmup Iteration  17: 859613.729 ops/s
# Warmup Iteration  18: 853331.976 ops/s
# Warmup Iteration  19: 858865.392 ops/s
# Warmup Iteration  20: 860608.433 ops/s
# Warmup Iteration  21: 853730.066 ops/s
# Warmup Iteration  22: 849099.675 ops/s
# Warmup Iteration  23: 867192.931 ops/s
# Warmup Iteration  24: 860956.119 ops/s
# Warmup Iteration  25: 881684.097 ops/s
# Warmup Iteration  26: 862062.820 ops/s
# Warmup Iteration  27: 869422.766 ops/s
# Warmup Iteration  28: 862481.786 ops/s
# Warmup Iteration  29: 891053.184 ops/s
# Warmup Iteration  30: 884617.393 ops/s
Iteration   1: 870046.476 ops/s
Iteration   2: 868036.073 ops/s
Iteration   3: 862360.271 ops/s
Iteration   4: 861061.455 ops/s
Iteration   5: 865438.537 ops/s
Iteration   6: 866814.903 ops/s
Iteration   7: 866527.630 ops/s
Iteration   8: 856644.146 ops/s
Iteration   9: 864955.838 ops/s
Iteration  10: 858174.777 ops/s
Iteration  11: 844401.325 ops/s
Iteration  12: 865793.337 ops/s
Iteration  13: 857295.481 ops/s
Iteration  14: 862235.085 ops/s
Iteration  15: 873035.033 ops/s
Iteration  16: 874693.736 ops/s
Iteration  17: 870395.613 ops/s
Iteration  18: 854955.827 ops/s
Iteration  19: 862073.516 ops/s
Iteration  20: 864996.805 ops/s
Iteration  21: 858912.401 ops/s
Iteration  22: 870669.782 ops/s
Iteration  23: 877848.622 ops/s
Iteration  24: 905656.530 ops/s
Iteration  25: 865113.881 ops/s
Iteration  26: 879507.761 ops/s
Iteration  27: 873590.510 ops/s
Iteration  28: 858445.764 ops/s
Iteration  29: 881299.754 ops/s
Iteration  30: 874789.876 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectShort":
  867192.358 ±(99.9%) 7234.454 ops/s [Average]
  (min, avg, max) = (844401.325, 867192.358, 905656.530), stdev = 10828.191
  CI (99.9%): [859957.904, 874426.812] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectShort  thrpt   30  867192.358 ± 7234.454  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectShortWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectShortWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 968023.325 ops/s
# Warmup Iteration   2: 2411566.341 ops/s
# Warmup Iteration   3: 2537296.644 ops/s
# Warmup Iteration   4: 2063997.934 ops/s
# Warmup Iteration   5: 2478517.229 ops/s
# Warmup Iteration   6: 2488503.334 ops/s
# Warmup Iteration   7: 2493683.935 ops/s
# Warmup Iteration   8: 2571138.281 ops/s
# Warmup Iteration   9: 2488904.585 ops/s
# Warmup Iteration  10: 2520822.618 ops/s
# Warmup Iteration  11: 2515556.126 ops/s
# Warmup Iteration  12: 2591683.339 ops/s
# Warmup Iteration  13: 2510951.404 ops/s
# Warmup Iteration  14: 2519622.250 ops/s
# Warmup Iteration  15: 2545213.334 ops/s
# Warmup Iteration  16: 2537057.695 ops/s
# Warmup Iteration  17: 2531535.198 ops/s
# Warmup Iteration  18: 2488143.327 ops/s
# Warmup Iteration  19: 2498513.005 ops/s
# Warmup Iteration  20: 2500003.867 ops/s
# Warmup Iteration  21: 2497481.676 ops/s
# Warmup Iteration  22: 2518138.174 ops/s
# Warmup Iteration  23: 2504948.733 ops/s
# Warmup Iteration  24: 2518357.395 ops/s
# Warmup Iteration  25: 2506017.761 ops/s
# Warmup Iteration  26: 2538613.094 ops/s
# Warmup Iteration  27: 2591175.661 ops/s
# Warmup Iteration  28: 2508213.532 ops/s
# Warmup Iteration  29: 2521825.143 ops/s
# Warmup Iteration  30: 2545397.471 ops/s
Iteration   1: 2533269.877 ops/s
Iteration   2: 2495437.767 ops/s
Iteration   3: 2503407.139 ops/s
Iteration   4: 2524934.012 ops/s
Iteration   5: 2474145.453 ops/s
Iteration   6: 2511022.390 ops/s
Iteration   7: 2496003.875 ops/s
Iteration   8: 2449276.160 ops/s
Iteration   9: 2487756.235 ops/s
Iteration  10: 2509260.448 ops/s
Iteration  11: 2459572.723 ops/s
Iteration  12: 2525072.210 ops/s
Iteration  13: 2485222.541 ops/s
Iteration  14: 2505829.678 ops/s
Iteration  15: 2483602.876 ops/s
Iteration  16: 2531791.555 ops/s
Iteration  17: 2499724.457 ops/s
Iteration  18: 2488719.010 ops/s
Iteration  19: 2586843.094 ops/s
Iteration  20: 2483752.814 ops/s
Iteration  21: 2486140.797 ops/s
Iteration  22: 2517696.555 ops/s
Iteration  23: 2485601.205 ops/s
Iteration  24: 2455793.475 ops/s
Iteration  25: 2487237.914 ops/s
Iteration  26: 2517379.264 ops/s
Iteration  27: 2513320.864 ops/s
Iteration  28: 2516909.681 ops/s
Iteration  29: 2559628.269 ops/s
Iteration  30: 2617485.723 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectShortWithBagTarget":
  2506394.602 ±(99.9%) 23809.650 ops/s [Average]
  (min, avg, max) = (2449276.160, 2506394.602, 2617485.723), stdev = 35637.166
  CI (99.9%): [2482584.952, 2530204.252] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectShortWithBagTarget  thrpt   30  2506394.602 ± 23809.650  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 870298.895 ops/s
# Warmup Iteration   2: 1945616.117 ops/s
# Warmup Iteration   3: 2029942.299 ops/s
# Warmup Iteration   4: 2070020.525 ops/s
# Warmup Iteration   5: 1673835.062 ops/s
# Warmup Iteration   6: 2022783.480 ops/s
# Warmup Iteration   7: 2090106.380 ops/s
# Warmup Iteration   8: 2035019.703 ops/s
# Warmup Iteration   9: 2044490.201 ops/s
# Warmup Iteration  10: 2038840.621 ops/s
# Warmup Iteration  11: 2092714.519 ops/s
# Warmup Iteration  12: 2024617.491 ops/s
# Warmup Iteration  13: 2032832.747 ops/s
# Warmup Iteration  14: 2147026.147 ops/s
# Warmup Iteration  15: 2013206.394 ops/s
# Warmup Iteration  16: 2034000.362 ops/s
# Warmup Iteration  17: 2031076.565 ops/s
# Warmup Iteration  18: 2041078.368 ops/s
# Warmup Iteration  19: 2038872.468 ops/s
# Warmup Iteration  20: 2093190.546 ops/s
# Warmup Iteration  21: 2073682.451 ops/s
# Warmup Iteration  22: 2038095.070 ops/s
# Warmup Iteration  23: 2021857.243 ops/s
# Warmup Iteration  24: 2042739.099 ops/s
# Warmup Iteration  25: 2064094.108 ops/s
# Warmup Iteration  26: 2022302.092 ops/s
# Warmup Iteration  27: 2041119.133 ops/s
# Warmup Iteration  28: 2073270.451 ops/s
# Warmup Iteration  29: 2061115.327 ops/s
# Warmup Iteration  30: 2077821.765 ops/s
Iteration   1: 2068102.838 ops/s
Iteration   2: 2047866.948 ops/s
Iteration   3: 2051925.753 ops/s
Iteration   4: 2018776.890 ops/s
Iteration   5: 2033855.992 ops/s
Iteration   6: 2039634.032 ops/s
Iteration   7: 2071529.037 ops/s
Iteration   8: 2066526.873 ops/s
Iteration   9: 2039807.394 ops/s
Iteration  10: 2035432.650 ops/s
Iteration  11: 2042092.980 ops/s
Iteration  12: 2048551.341 ops/s
Iteration  13: 2059729.380 ops/s
Iteration  14: 2087080.679 ops/s
Iteration  15: 2057418.076 ops/s
Iteration  16: 2064286.583 ops/s
Iteration  17: 2015242.604 ops/s
Iteration  18: 2050528.022 ops/s
Iteration  19: 2038507.000 ops/s
Iteration  20: 2099205.247 ops/s
Iteration  21: 2067066.729 ops/s
Iteration  22: 2051741.344 ops/s
Iteration  23: 2067144.965 ops/s
Iteration  24: 2032629.989 ops/s
Iteration  25: 2054744.412 ops/s
Iteration  26: 2019498.272 ops/s
Iteration  27: 2095563.018 ops/s
Iteration  28: 2068373.561 ops/s
Iteration  29: 2036989.708 ops/s
Iteration  30: 2037739.852 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectShortWithTarget":
  2052253.072 ±(99.9%) 13987.170 ops/s [Average]
  (min, avg, max) = (2015242.604, 2052253.072, 2099205.247), stdev = 20935.340
  CI (99.9%): [2038265.902, 2066240.243] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  2052253.072 ± 13987.170  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 96870.108 ops/s
# Warmup Iteration   2: 161149.853 ops/s
# Warmup Iteration   3: 199855.532 ops/s
# Warmup Iteration   4: 195303.066 ops/s
# Warmup Iteration   5: 196919.020 ops/s
# Warmup Iteration   6: 202936.666 ops/s
# Warmup Iteration   7: 165993.652 ops/s
# Warmup Iteration   8: 195353.328 ops/s
# Warmup Iteration   9: 200681.278 ops/s
# Warmup Iteration  10: 195750.376 ops/s
# Warmup Iteration  11: 196074.100 ops/s
# Warmup Iteration  12: 197403.516 ops/s
# Warmup Iteration  13: 199081.007 ops/s
# Warmup Iteration  14: 201439.088 ops/s
# Warmup Iteration  15: 201479.684 ops/s
# Warmup Iteration  16: 198317.670 ops/s
# Warmup Iteration  17: 200087.607 ops/s
# Warmup Iteration  18: 198451.572 ops/s
# Warmup Iteration  19: 197391.253 ops/s
# Warmup Iteration  20: 196019.353 ops/s
# Warmup Iteration  21: 198366.181 ops/s
# Warmup Iteration  22: 203838.660 ops/s
# Warmup Iteration  23: 201740.001 ops/s
# Warmup Iteration  24: 205707.245 ops/s
# Warmup Iteration  25: 199946.715 ops/s
# Warmup Iteration  26: 203917.932 ops/s
# Warmup Iteration  27: 201777.578 ops/s
# Warmup Iteration  28: 196874.934 ops/s
# Warmup Iteration  29: 204212.023 ops/s
# Warmup Iteration  30: 202229.951 ops/s
Iteration   1: 196157.226 ops/s
Iteration   2: 196342.099 ops/s
Iteration   3: 199143.543 ops/s
Iteration   4: 205117.394 ops/s
Iteration   5: 198992.373 ops/s
Iteration   6: 202285.004 ops/s
Iteration   7: 206598.533 ops/s
Iteration   8: 205388.871 ops/s
Iteration   9: 205259.397 ops/s
Iteration  10: 197454.715 ops/s
Iteration  11: 205953.805 ops/s
Iteration  12: 196767.725 ops/s
Iteration  13: 197969.948 ops/s
Iteration  14: 203061.075 ops/s
Iteration  15: 200294.662 ops/s
Iteration  16: 199121.425 ops/s
Iteration  17: 198959.244 ops/s
Iteration  18: 200662.972 ops/s
Iteration  19: 202451.843 ops/s
Iteration  20: 203946.706 ops/s
Iteration  21: 199214.933 ops/s
Iteration  22: 204995.718 ops/s
Iteration  23: 203657.209 ops/s
Iteration  24: 200422.387 ops/s
Iteration  25: 201919.932 ops/s
Iteration  26: 194312.124 ops/s
Iteration  27: 197791.689 ops/s
Iteration  28: 206981.996 ops/s
Iteration  29: 206413.109 ops/s
Iteration  30: 199377.219 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectTarget":
  201233.829 ±(99.9%) 2405.773 ops/s [Average]
  (min, avg, max) = (194312.124, 201233.829, 206981.996), stdev = 3600.849
  CI (99.9%): [198828.056, 203639.603] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectTarget  thrpt   30  201233.829 ± 2405.773  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 437038.920 ops/s
# Warmup Iteration   2: 755448.268 ops/s
# Warmup Iteration   3: 895332.584 ops/s
# Warmup Iteration   4: 897322.878 ops/s
# Warmup Iteration   5: 912267.756 ops/s
# Warmup Iteration   6: 762963.661 ops/s
# Warmup Iteration   7: 918062.886 ops/s
# Warmup Iteration   8: 911367.223 ops/s
# Warmup Iteration   9: 922142.519 ops/s
# Warmup Iteration  10: 901561.256 ops/s
# Warmup Iteration  11: 912204.051 ops/s
# Warmup Iteration  12: 917739.126 ops/s
# Warmup Iteration  13: 924796.301 ops/s
# Warmup Iteration  14: 938304.369 ops/s
# Warmup Iteration  15: 917539.145 ops/s
# Warmup Iteration  16: 902864.880 ops/s
# Warmup Iteration  17: 912998.304 ops/s
# Warmup Iteration  18: 891197.081 ops/s
# Warmup Iteration  19: 912293.582 ops/s
# Warmup Iteration  20: 890887.033 ops/s
# Warmup Iteration  21: 907750.635 ops/s
# Warmup Iteration  22: 900850.241 ops/s
# Warmup Iteration  23: 899972.891 ops/s
# Warmup Iteration  24: 912174.800 ops/s
# Warmup Iteration  25: 890393.182 ops/s
# Warmup Iteration  26: 903773.596 ops/s
# Warmup Iteration  27: 946638.906 ops/s
# Warmup Iteration  28: 932329.764 ops/s
# Warmup Iteration  29: 900334.452 ops/s
# Warmup Iteration  30: 901159.092 ops/s
Iteration   1: 895934.994 ops/s
Iteration   2: 900404.965 ops/s
Iteration   3: 900714.833 ops/s
Iteration   4: 898235.040 ops/s
Iteration   5: 887698.096 ops/s
Iteration   6: 907053.763 ops/s
Iteration   7: 901609.795 ops/s
Iteration   8: 888748.544 ops/s
Iteration   9: 884769.520 ops/s
Iteration  10: 889102.104 ops/s
Iteration  11: 912594.320 ops/s
Iteration  12: 900296.077 ops/s
Iteration  13: 914413.190 ops/s
Iteration  14: 913952.651 ops/s
Iteration  15: 900889.681 ops/s
Iteration  16: 888815.416 ops/s
Iteration  17: 906714.946 ops/s
Iteration  18: 908778.613 ops/s
Iteration  19: 907821.575 ops/s
Iteration  20: 941298.961 ops/s
Iteration  21: 893708.959 ops/s
Iteration  22: 904722.952 ops/s
Iteration  23: 915000.670 ops/s
Iteration  24: 944634.745 ops/s
Iteration  25: 922390.598 ops/s
Iteration  26: 916522.750 ops/s
Iteration  27: 898219.942 ops/s
Iteration  28: 898734.053 ops/s
Iteration  29: 909851.527 ops/s
Iteration  30: 902014.432 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectWith":
  905188.257 ±(99.9%) 9308.311 ops/s [Average]
  (min, avg, max) = (884769.520, 905188.257, 944634.745), stdev = 13932.242
  CI (99.9%): [895879.946, 914496.568] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectWith  thrpt   30  905188.257 ± 9308.311  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1486637.286 ops/s
# Warmup Iteration   2: 3716651.010 ops/s
# Warmup Iteration   3: 4084962.195 ops/s
# Warmup Iteration   4: 3226586.422 ops/s
# Warmup Iteration   5: 3879447.971 ops/s
# Warmup Iteration   6: 3931990.888 ops/s
# Warmup Iteration   7: 3881162.859 ops/s
# Warmup Iteration   8: 3916365.710 ops/s
# Warmup Iteration   9: 3928467.871 ops/s
# Warmup Iteration  10: 3918937.051 ops/s
# Warmup Iteration  11: 3906841.704 ops/s
# Warmup Iteration  12: 3858769.260 ops/s
# Warmup Iteration  13: 3857039.114 ops/s
# Warmup Iteration  14: 3867410.171 ops/s
# Warmup Iteration  15: 3981901.879 ops/s
# Warmup Iteration  16: 3914892.596 ops/s
# Warmup Iteration  17: 3830356.198 ops/s
# Warmup Iteration  18: 3917969.477 ops/s
# Warmup Iteration  19: 4014830.906 ops/s
# Warmup Iteration  20: 3916738.729 ops/s
# Warmup Iteration  21: 3846409.592 ops/s
# Warmup Iteration  22: 3890379.967 ops/s
# Warmup Iteration  23: 3834788.472 ops/s
# Warmup Iteration  24: 3898329.653 ops/s
# Warmup Iteration  25: 3943136.489 ops/s
# Warmup Iteration  26: 3814251.360 ops/s
# Warmup Iteration  27: 3856198.053 ops/s
# Warmup Iteration  28: 3903013.762 ops/s
# Warmup Iteration  29: 3863155.276 ops/s
# Warmup Iteration  30: 3900894.478 ops/s
Iteration   1: 3835019.576 ops/s
Iteration   2: 3879123.009 ops/s
Iteration   3: 3892326.072 ops/s
Iteration   4: 4091661.045 ops/s
Iteration   5: 3962864.587 ops/s
Iteration   6: 3895277.408 ops/s
Iteration   7: 3833856.506 ops/s
Iteration   8: 3879985.654 ops/s
Iteration   9: 3848967.481 ops/s
Iteration  10: 3874513.251 ops/s
Iteration  11: 3843605.163 ops/s
Iteration  12: 3946468.275 ops/s
Iteration  13: 4090631.151 ops/s
Iteration  14: 3972473.115 ops/s
Iteration  15: 3847119.369 ops/s
Iteration  16: 4064993.297 ops/s
Iteration  17: 4098497.336 ops/s
Iteration  18: 3847416.211 ops/s
Iteration  19: 3838026.294 ops/s
Iteration  20: 3872771.493 ops/s
Iteration  21: 3863676.740 ops/s
Iteration  22: 3907330.606 ops/s
Iteration  23: 3935194.152 ops/s
Iteration  24: 3848855.655 ops/s
Iteration  25: 3846111.429 ops/s
Iteration  26: 3899875.369 ops/s
Iteration  27: 3824954.173 ops/s
Iteration  28: 3845187.114 ops/s
Iteration  29: 3839482.608 ops/s
Iteration  30: 3898674.181 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectWithIndex":
  3904164.611 ±(99.9%) 55075.312 ops/s [Average]
  (min, avg, max) = (3824954.173, 3904164.611, 4098497.336), stdev = 82434.140
  CI (99.9%): [3849089.299, 3959239.922] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectWithIndex  thrpt   30  3904164.611 ± 55075.312  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1497582.410 ops/s
# Warmup Iteration   2: 3947478.467 ops/s
# Warmup Iteration   3: 3864121.371 ops/s
# Warmup Iteration   4: 3109347.845 ops/s
# Warmup Iteration   5: 3770454.062 ops/s
# Warmup Iteration   6: 3781636.606 ops/s
# Warmup Iteration   7: 3757638.484 ops/s
# Warmup Iteration   8: 3797258.148 ops/s
# Warmup Iteration   9: 3877835.083 ops/s
# Warmup Iteration  10: 3771068.465 ops/s
# Warmup Iteration  11: 3890846.484 ops/s
# Warmup Iteration  12: 3952579.426 ops/s
# Warmup Iteration  13: 3991963.220 ops/s
# Warmup Iteration  14: 3830698.167 ops/s
# Warmup Iteration  15: 3830550.738 ops/s
# Warmup Iteration  16: 3890495.140 ops/s
# Warmup Iteration  17: 3981392.286 ops/s
# Warmup Iteration  18: 3876741.616 ops/s
# Warmup Iteration  19: 3731635.521 ops/s
# Warmup Iteration  20: 3791780.639 ops/s
# Warmup Iteration  21: 3925082.803 ops/s
# Warmup Iteration  22: 3772710.765 ops/s
# Warmup Iteration  23: 3880246.611 ops/s
# Warmup Iteration  24: 3931510.116 ops/s
# Warmup Iteration  25: 3817182.628 ops/s
# Warmup Iteration  26: 3836482.978 ops/s
# Warmup Iteration  27: 3798369.089 ops/s
# Warmup Iteration  28: 3862467.201 ops/s
# Warmup Iteration  29: 3770744.224 ops/s
# Warmup Iteration  30: 3775582.354 ops/s
Iteration   1: 3941021.387 ops/s
Iteration   2: 3746631.984 ops/s
Iteration   3: 3871290.315 ops/s
Iteration   4: 4000698.530 ops/s
Iteration   5: 3976001.407 ops/s
Iteration   6: 3872883.773 ops/s
Iteration   7: 3780460.545 ops/s
Iteration   8: 3778310.202 ops/s
Iteration   9: 3773785.237 ops/s
Iteration  10: 3768086.163 ops/s
Iteration  11: 3726177.056 ops/s
Iteration  12: 3758898.066 ops/s
Iteration  13: 3780162.544 ops/s
Iteration  14: 3749104.053 ops/s
Iteration  15: 3800385.125 ops/s
Iteration  16: 3766951.115 ops/s
Iteration  17: 3710836.760 ops/s
Iteration  18: 3792981.010 ops/s
Iteration  19: 3776467.249 ops/s
Iteration  20: 3781953.016 ops/s
Iteration  21: 3796736.263 ops/s
Iteration  22: 3816417.086 ops/s
Iteration  23: 3811548.710 ops/s
Iteration  24: 3911826.405 ops/s
Iteration  25: 3925873.524 ops/s
Iteration  26: 3826930.471 ops/s
Iteration  27: 3980651.532 ops/s
Iteration  28: 3801253.079 ops/s
Iteration  29: 3823699.754 ops/s
Iteration  30: 3984195.396 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectWithIndexWithTarget":
  3827740.592 ±(99.9%) 55562.243 ops/s [Average]
  (min, avg, max) = (3710836.760, 3827740.592, 4000698.530), stdev = 83162.956
  CI (99.9%): [3772178.349, 3883302.835] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  3827740.592 ± 55562.243  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 245047.500 ops/s
# Warmup Iteration   2: 404729.171 ops/s
# Warmup Iteration   3: 508663.921 ops/s
# Warmup Iteration   4: 503167.642 ops/s
# Warmup Iteration   5: 511246.202 ops/s
# Warmup Iteration   6: 525146.771 ops/s
# Warmup Iteration   7: 443516.470 ops/s
# Warmup Iteration   8: 520198.836 ops/s
# Warmup Iteration   9: 521209.784 ops/s
# Warmup Iteration  10: 523498.245 ops/s
# Warmup Iteration  11: 513331.426 ops/s
# Warmup Iteration  12: 504590.189 ops/s
# Warmup Iteration  13: 509949.179 ops/s
# Warmup Iteration  14: 527603.519 ops/s
# Warmup Iteration  15: 539440.683 ops/s
# Warmup Iteration  16: 529518.735 ops/s
# Warmup Iteration  17: 505565.231 ops/s
# Warmup Iteration  18: 511931.270 ops/s
# Warmup Iteration  19: 518229.034 ops/s
# Warmup Iteration  20: 520471.715 ops/s
# Warmup Iteration  21: 526279.440 ops/s
# Warmup Iteration  22: 538239.861 ops/s
# Warmup Iteration  23: 515192.134 ops/s
# Warmup Iteration  24: 505640.943 ops/s
# Warmup Iteration  25: 525271.000 ops/s
# Warmup Iteration  26: 516052.752 ops/s
# Warmup Iteration  27: 512819.912 ops/s
# Warmup Iteration  28: 510049.155 ops/s
# Warmup Iteration  29: 515073.412 ops/s
# Warmup Iteration  30: 509181.498 ops/s
Iteration   1: 497767.306 ops/s
Iteration   2: 510758.308 ops/s
Iteration   3: 505308.395 ops/s
Iteration   4: 504689.086 ops/s
Iteration   5: 509795.149 ops/s
Iteration   6: 515349.652 ops/s
Iteration   7: 509854.030 ops/s
Iteration   8: 516832.284 ops/s
Iteration   9: 516219.131 ops/s
Iteration  10: 509838.041 ops/s
Iteration  11: 511353.248 ops/s
Iteration  12: 511724.831 ops/s
Iteration  13: 513340.746 ops/s
Iteration  14: 504775.100 ops/s
Iteration  15: 518267.267 ops/s
Iteration  16: 523659.923 ops/s
Iteration  17: 531611.937 ops/s
Iteration  18: 509855.424 ops/s
Iteration  19: 506501.397 ops/s
Iteration  20: 517404.060 ops/s
Iteration  21: 507224.848 ops/s
Iteration  22: 502275.761 ops/s
Iteration  23: 517158.508 ops/s
Iteration  24: 514534.832 ops/s
Iteration  25: 500097.922 ops/s
Iteration  26: 505355.611 ops/s
Iteration  27: 515850.612 ops/s
Iteration  28: 539134.920 ops/s
Iteration  29: 524275.762 ops/s
Iteration  30: 504839.238 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectWithOccurrences":
  512521.778 ±(99.9%) 5986.567 ops/s [Average]
  (min, avg, max) = (497767.306, 512521.778, 539134.920), stdev = 8960.412
  CI (99.9%): [506535.211, 518508.344] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectWithOccurrences  thrpt   30  512521.778 ± 5986.567  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 76757.240 ops/s
# Warmup Iteration   2: 127639.082 ops/s
# Warmup Iteration   3: 163344.926 ops/s
# Warmup Iteration   4: 162644.345 ops/s
# Warmup Iteration   5: 164704.958 ops/s
# Warmup Iteration   6: 169374.858 ops/s
# Warmup Iteration   7: 135951.491 ops/s
# Warmup Iteration   8: 166440.236 ops/s
# Warmup Iteration   9: 165580.525 ops/s
# Warmup Iteration  10: 163167.517 ops/s
# Warmup Iteration  11: 164988.293 ops/s
# Warmup Iteration  12: 171001.533 ops/s
# Warmup Iteration  13: 175158.090 ops/s
# Warmup Iteration  14: 172012.406 ops/s
# Warmup Iteration  15: 166623.577 ops/s
# Warmup Iteration  16: 165350.109 ops/s
# Warmup Iteration  17: 163999.374 ops/s
# Warmup Iteration  18: 165521.418 ops/s
# Warmup Iteration  19: 164264.332 ops/s
# Warmup Iteration  20: 163026.727 ops/s
# Warmup Iteration  21: 169411.758 ops/s
# Warmup Iteration  22: 169829.899 ops/s
# Warmup Iteration  23: 165692.198 ops/s
# Warmup Iteration  24: 167228.089 ops/s
# Warmup Iteration  25: 166320.139 ops/s
# Warmup Iteration  26: 168417.521 ops/s
# Warmup Iteration  27: 171287.784 ops/s
# Warmup Iteration  28: 168276.794 ops/s
# Warmup Iteration  29: 166870.205 ops/s
# Warmup Iteration  30: 169001.089 ops/s
Iteration   1: 168721.706 ops/s
Iteration   2: 170161.253 ops/s
Iteration   3: 167578.810 ops/s
Iteration   4: 161196.470 ops/s
Iteration   5: 170292.527 ops/s
Iteration   6: 168259.881 ops/s
Iteration   7: 173478.723 ops/s
Iteration   8: 174597.593 ops/s
Iteration   9: 174804.349 ops/s
Iteration  10: 169146.120 ops/s
Iteration  11: 167018.634 ops/s
Iteration  12: 165936.335 ops/s
Iteration  13: 170546.073 ops/s
Iteration  14: 169750.207 ops/s
Iteration  15: 168884.452 ops/s
Iteration  16: 168224.781 ops/s
Iteration  17: 167040.044 ops/s
Iteration  18: 167127.616 ops/s
Iteration  19: 163044.194 ops/s
Iteration  20: 172317.825 ops/s
Iteration  21: 174797.963 ops/s
Iteration  22: 166198.203 ops/s
Iteration  23: 166262.109 ops/s
Iteration  24: 165892.684 ops/s
Iteration  25: 163921.399 ops/s
Iteration  26: 164526.334 ops/s
Iteration  27: 170861.228 ops/s
Iteration  28: 174658.244 ops/s
Iteration  29: 164607.093 ops/s
Iteration  30: 172605.730 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_collectWith_target":
  168748.619 ±(99.9%) 2458.488 ops/s [Average]
  (min, avg, max) = (161196.470, 168748.619, 174804.349), stdev = 3679.749
  CI (99.9%): [166290.132, 171207.107] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_collectWith_target  thrpt   30  168748.619 ± 2458.488  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_compareTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_compareTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 99229.832 ops/s
# Warmup Iteration   2: 149831.582 ops/s
# Warmup Iteration   3: 175423.179 ops/s
# Warmup Iteration   4: 172372.151 ops/s
# Warmup Iteration   5: 173024.248 ops/s
# Warmup Iteration   6: 174621.219 ops/s
# Warmup Iteration   7: 144288.266 ops/s
# Warmup Iteration   8: 175108.326 ops/s
# Warmup Iteration   9: 174559.676 ops/s
# Warmup Iteration  10: 172512.416 ops/s
# Warmup Iteration  11: 173734.479 ops/s
# Warmup Iteration  12: 174108.504 ops/s
# Warmup Iteration  13: 173436.133 ops/s
# Warmup Iteration  14: 175724.590 ops/s
# Warmup Iteration  15: 173124.863 ops/s
# Warmup Iteration  16: 172688.930 ops/s
# Warmup Iteration  17: 173175.426 ops/s
# Warmup Iteration  18: 172828.998 ops/s
# Warmup Iteration  19: 175401.689 ops/s
# Warmup Iteration  20: 174440.397 ops/s
# Warmup Iteration  21: 173598.399 ops/s
# Warmup Iteration  22: 178414.245 ops/s
# Warmup Iteration  23: 174077.218 ops/s
# Warmup Iteration  24: 174762.838 ops/s
# Warmup Iteration  25: 185187.199 ops/s
# Warmup Iteration  26: 179234.014 ops/s
# Warmup Iteration  27: 175144.760 ops/s
# Warmup Iteration  28: 176312.570 ops/s
# Warmup Iteration  29: 180550.739 ops/s
# Warmup Iteration  30: 173095.858 ops/s
Iteration   1: 173780.024 ops/s
Iteration   2: 174184.968 ops/s
Iteration   3: 172922.877 ops/s
Iteration   4: 178932.753 ops/s
Iteration   5: 174242.182 ops/s
Iteration   6: 175365.400 ops/s
Iteration   7: 175353.620 ops/s
Iteration   8: 172745.493 ops/s
Iteration   9: 177663.235 ops/s
Iteration  10: 172573.362 ops/s
Iteration  11: 175526.406 ops/s
Iteration  12: 177139.522 ops/s
Iteration  13: 175563.011 ops/s
Iteration  14: 176506.547 ops/s
Iteration  15: 176282.955 ops/s
Iteration  16: 179440.164 ops/s
Iteration  17: 171790.436 ops/s
Iteration  18: 174411.667 ops/s
Iteration  19: 175875.184 ops/s
Iteration  20: 176614.764 ops/s
Iteration  21: 176665.460 ops/s
Iteration  22: 173099.697 ops/s
Iteration  23: 175342.975 ops/s
Iteration  24: 176117.623 ops/s
Iteration  25: 176470.721 ops/s
Iteration  26: 179387.750 ops/s
Iteration  27: 184427.053 ops/s
Iteration  28: 178948.535 ops/s
Iteration  29: 175539.527 ops/s
Iteration  30: 174097.807 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_compareTo":
  175900.391 ±(99.9%) 1728.321 ops/s [Average]
  (min, avg, max) = (171790.436, 175900.391, 184427.053), stdev = 2586.870
  CI (99.9%): [174172.069, 177628.712] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_compareTo  thrpt   30  175900.391 ± 1728.321  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2435684.297 ops/s
# Warmup Iteration   2: 4676616.829 ops/s
# Warmup Iteration   3: 5053086.135 ops/s
# Warmup Iteration   4: 4951787.877 ops/s
# Warmup Iteration   5: 4267951.988 ops/s
# Warmup Iteration   6: 5023232.058 ops/s
# Warmup Iteration   7: 5028332.155 ops/s
# Warmup Iteration   8: 4962385.264 ops/s
# Warmup Iteration   9: 5068456.762 ops/s
# Warmup Iteration  10: 5214502.050 ops/s
# Warmup Iteration  11: 4949966.997 ops/s
# Warmup Iteration  12: 5020940.290 ops/s
# Warmup Iteration  13: 5110555.327 ops/s
# Warmup Iteration  14: 4894648.240 ops/s
# Warmup Iteration  15: 4953279.174 ops/s
# Warmup Iteration  16: 4885057.602 ops/s
# Warmup Iteration  17: 4905516.769 ops/s
# Warmup Iteration  18: 4956164.614 ops/s
# Warmup Iteration  19: 4975834.138 ops/s
# Warmup Iteration  20: 5114189.312 ops/s
# Warmup Iteration  21: 5205430.877 ops/s
# Warmup Iteration  22: 5101782.875 ops/s
# Warmup Iteration  23: 4977652.468 ops/s
# Warmup Iteration  24: 4883313.437 ops/s
# Warmup Iteration  25: 4909134.268 ops/s
# Warmup Iteration  26: 5030020.706 ops/s
# Warmup Iteration  27: 4914589.851 ops/s
# Warmup Iteration  28: 4926258.698 ops/s
# Warmup Iteration  29: 5031778.422 ops/s
# Warmup Iteration  30: 4917784.747 ops/s
Iteration   1: 4909674.335 ops/s
Iteration   2: 4959725.192 ops/s
Iteration   3: 4944511.842 ops/s
Iteration   4: 4969237.572 ops/s
Iteration   5: 4930664.883 ops/s
Iteration   6: 4940452.873 ops/s
Iteration   7: 4897074.660 ops/s
Iteration   8: 4996295.483 ops/s
Iteration   9: 4961450.840 ops/s
Iteration  10: 4930457.323 ops/s
Iteration  11: 4952836.651 ops/s
Iteration  12: 4932607.173 ops/s
Iteration  13: 5105149.039 ops/s
Iteration  14: 5048002.519 ops/s
Iteration  15: 4938884.530 ops/s
Iteration  16: 5003545.139 ops/s
Iteration  17: 5154328.775 ops/s
Iteration  18: 5206201.812 ops/s
Iteration  19: 5216898.251 ops/s
Iteration  20: 5114508.557 ops/s
Iteration  21: 5009158.640 ops/s
Iteration  22: 5042632.470 ops/s
Iteration  23: 5048417.819 ops/s
Iteration  24: 4920832.811 ops/s
Iteration  25: 5032184.856 ops/s
Iteration  26: 5059433.610 ops/s
Iteration  27: 5140293.642 ops/s
Iteration  28: 4990140.311 ops/s
Iteration  29: 5037563.831 ops/s
Iteration  30: 4950982.557 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_contains":
  5011471.600 ±(99.9%) 58742.542 ops/s [Average]
  (min, avg, max) = (4897074.660, 5011471.600, 5216898.251), stdev = 87923.078
  CI (99.9%): [4952729.058, 5070214.142] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_contains  thrpt   30  5011471.600 ± 58742.542  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 984312.321 ops/s
# Warmup Iteration   2: 1694758.732 ops/s
# Warmup Iteration   3: 1914179.859 ops/s
# Warmup Iteration   4: 1925115.973 ops/s
# Warmup Iteration   5: 1926717.354 ops/s
# Warmup Iteration   6: 1618438.433 ops/s
# Warmup Iteration   7: 1958682.627 ops/s
# Warmup Iteration   8: 1936568.030 ops/s
# Warmup Iteration   9: 1968614.909 ops/s
# Warmup Iteration  10: 1938542.941 ops/s
# Warmup Iteration  11: 1905116.948 ops/s
# Warmup Iteration  12: 1919903.669 ops/s
# Warmup Iteration  13: 1910358.831 ops/s
# Warmup Iteration  14: 1926757.898 ops/s
# Warmup Iteration  15: 1955484.283 ops/s
# Warmup Iteration  16: 1919714.173 ops/s
# Warmup Iteration  17: 1951294.408 ops/s
# Warmup Iteration  18: 1992027.247 ops/s
# Warmup Iteration  19: 1934116.724 ops/s
# Warmup Iteration  20: 1948466.230 ops/s
# Warmup Iteration  21: 1967778.143 ops/s
# Warmup Iteration  22: 1954913.535 ops/s
# Warmup Iteration  23: 1961103.526 ops/s
# Warmup Iteration  24: 1920075.342 ops/s
# Warmup Iteration  25: 1966386.706 ops/s
# Warmup Iteration  26: 1941704.540 ops/s
# Warmup Iteration  27: 1896997.978 ops/s
# Warmup Iteration  28: 1928970.334 ops/s
# Warmup Iteration  29: 1901072.077 ops/s
# Warmup Iteration  30: 1914353.238 ops/s
Iteration   1: 1908445.750 ops/s
Iteration   2: 1935030.164 ops/s
Iteration   3: 1918233.232 ops/s
Iteration   4: 1931376.555 ops/s
Iteration   5: 1901364.136 ops/s
Iteration   6: 1909856.024 ops/s
Iteration   7: 1921434.702 ops/s
Iteration   8: 1908216.569 ops/s
Iteration   9: 1950283.583 ops/s
Iteration  10: 1948221.448 ops/s
Iteration  11: 1975743.825 ops/s
Iteration  12: 1921717.171 ops/s
Iteration  13: 1910979.859 ops/s
Iteration  14: 1908991.214 ops/s
Iteration  15: 1969203.852 ops/s
Iteration  16: 2011800.226 ops/s
Iteration  17: 1966660.319 ops/s
Iteration  18: 1945367.105 ops/s
Iteration  19: 1928852.139 ops/s
Iteration  20: 1915857.338 ops/s
Iteration  21: 1952993.709 ops/s
Iteration  22: 2025150.634 ops/s
Iteration  23: 2027300.316 ops/s
Iteration  24: 2001558.852 ops/s
Iteration  25: 1911473.462 ops/s
Iteration  26: 1910748.470 ops/s
Iteration  27: 1907549.713 ops/s
Iteration  28: 1920407.079 ops/s
Iteration  29: 1927011.368 ops/s
Iteration  30: 1918396.140 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsAllArray":
  1939674.165 ±(99.9%) 24481.305 ops/s [Average]
  (min, avg, max) = (1901364.136, 1939674.165, 2027300.316), stdev = 36642.467
  CI (99.9%): [1915192.861, 1964155.470] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_containsAllArray  thrpt   30  1939674.165 ± 24481.305  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsAllCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsAllCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2100408.560 ops/s
# Warmup Iteration   2: 4246245.487 ops/s
# Warmup Iteration   3: 4532669.220 ops/s
# Warmup Iteration   4: 4509243.265 ops/s
# Warmup Iteration   5: 3811160.494 ops/s
# Warmup Iteration   6: 4633966.734 ops/s
# Warmup Iteration   7: 4705465.075 ops/s
# Warmup Iteration   8: 4514554.468 ops/s
# Warmup Iteration   9: 4589657.291 ops/s
# Warmup Iteration  10: 4587279.261 ops/s
# Warmup Iteration  11: 4502757.573 ops/s
# Warmup Iteration  12: 4508687.288 ops/s
# Warmup Iteration  13: 4605034.118 ops/s
# Warmup Iteration  14: 4550137.966 ops/s
# Warmup Iteration  15: 4518253.845 ops/s
# Warmup Iteration  16: 4514353.813 ops/s
# Warmup Iteration  17: 4538914.138 ops/s
# Warmup Iteration  18: 4629263.328 ops/s
# Warmup Iteration  19: 4815527.683 ops/s
# Warmup Iteration  20: 4575116.324 ops/s
# Warmup Iteration  21: 4544435.901 ops/s
# Warmup Iteration  22: 4622598.228 ops/s
# Warmup Iteration  23: 4555252.611 ops/s
# Warmup Iteration  24: 4555106.619 ops/s
# Warmup Iteration  25: 4593824.631 ops/s
# Warmup Iteration  26: 4621991.013 ops/s
# Warmup Iteration  27: 4561709.801 ops/s
# Warmup Iteration  28: 4552627.102 ops/s
# Warmup Iteration  29: 4513553.333 ops/s
# Warmup Iteration  30: 4615073.573 ops/s
Iteration   1: 4619409.340 ops/s
Iteration   2: 4505441.893 ops/s
Iteration   3: 4583138.317 ops/s
Iteration   4: 4525433.173 ops/s
Iteration   5: 4509618.833 ops/s
Iteration   6: 4564563.394 ops/s
Iteration   7: 4770177.442 ops/s
Iteration   8: 4807479.484 ops/s
Iteration   9: 4815498.929 ops/s
Iteration  10: 4656253.193 ops/s
Iteration  11: 4811095.591 ops/s
Iteration  12: 4563315.355 ops/s
Iteration  13: 4522158.615 ops/s
Iteration  14: 4580116.007 ops/s
Iteration  15: 4798965.597 ops/s
Iteration  16: 4627916.149 ops/s
Iteration  17: 4637505.417 ops/s
Iteration  18: 4593316.909 ops/s
Iteration  19: 4539260.061 ops/s
Iteration  20: 4598329.484 ops/s
Iteration  21: 4616291.041 ops/s
Iteration  22: 4637149.152 ops/s
Iteration  23: 4618300.758 ops/s
Iteration  24: 4559334.468 ops/s
Iteration  25: 4604570.459 ops/s
Iteration  26: 4652251.588 ops/s
Iteration  27: 4716836.862 ops/s
Iteration  28: 4716102.115 ops/s
Iteration  29: 4636478.016 ops/s
Iteration  30: 4532773.558 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsAllCollection":
  4630636.040 ±(99.9%) 62684.356 ops/s [Average]
  (min, avg, max) = (4505441.893, 4630636.040, 4815498.929), stdev = 93823.000
  CI (99.9%): [4567951.684, 4693320.396] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_containsAllCollection  thrpt   30  4630636.040 ± 62684.356  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 979623.690 ops/s
# Warmup Iteration   2: 1775573.730 ops/s
# Warmup Iteration   3: 1999172.299 ops/s
# Warmup Iteration   4: 2013307.791 ops/s
# Warmup Iteration   5: 1951614.346 ops/s
# Warmup Iteration   6: 1657791.114 ops/s
# Warmup Iteration   7: 2017811.659 ops/s
# Warmup Iteration   8: 1994870.129 ops/s
# Warmup Iteration   9: 1964783.676 ops/s
# Warmup Iteration  10: 1976867.304 ops/s
# Warmup Iteration  11: 2009727.320 ops/s
# Warmup Iteration  12: 1972777.550 ops/s
# Warmup Iteration  13: 1943476.560 ops/s
# Warmup Iteration  14: 1958156.060 ops/s
# Warmup Iteration  15: 2024954.478 ops/s
# Warmup Iteration  16: 1982077.485 ops/s
# Warmup Iteration  17: 1976862.299 ops/s
# Warmup Iteration  18: 1994670.419 ops/s
# Warmup Iteration  19: 2014038.303 ops/s
# Warmup Iteration  20: 2030596.448 ops/s
# Warmup Iteration  21: 1944800.326 ops/s
# Warmup Iteration  22: 1990649.468 ops/s
# Warmup Iteration  23: 1999457.030 ops/s
# Warmup Iteration  24: 2003140.197 ops/s
# Warmup Iteration  25: 1964351.662 ops/s
# Warmup Iteration  26: 1960558.020 ops/s
# Warmup Iteration  27: 1951308.164 ops/s
# Warmup Iteration  28: 1971212.206 ops/s
# Warmup Iteration  29: 1986905.411 ops/s
# Warmup Iteration  30: 1994781.307 ops/s
Iteration   1: 1974546.938 ops/s
Iteration   2: 1955027.759 ops/s
Iteration   3: 1999122.534 ops/s
Iteration   4: 1973558.013 ops/s
Iteration   5: 1940883.926 ops/s
Iteration   6: 1957405.005 ops/s
Iteration   7: 1951475.824 ops/s
Iteration   8: 1989350.543 ops/s
Iteration   9: 1995026.586 ops/s
Iteration  10: 1973204.451 ops/s
Iteration  11: 1939300.984 ops/s
Iteration  12: 1948744.968 ops/s
Iteration  13: 1950279.173 ops/s
Iteration  14: 1994864.756 ops/s
Iteration  15: 1982845.440 ops/s
Iteration  16: 1948026.954 ops/s
Iteration  17: 1954063.392 ops/s
Iteration  18: 2019520.275 ops/s
Iteration  19: 1972280.669 ops/s
Iteration  20: 1960867.913 ops/s
Iteration  21: 2033465.223 ops/s
Iteration  22: 2074348.585 ops/s
Iteration  23: 1962982.910 ops/s
Iteration  24: 2041203.467 ops/s
Iteration  25: 2078636.311 ops/s
Iteration  26: 2070340.190 ops/s
Iteration  27: 2064082.394 ops/s
Iteration  28: 2061676.545 ops/s
Iteration  29: 2023502.424 ops/s
Iteration  30: 1963230.738 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsAllIterable":
  1991795.496 ±(99.9%) 29653.708 ops/s [Average]
  (min, avg, max) = (1939300.984, 1991795.496, 2078636.311), stdev = 44384.278
  CI (99.9%): [1962141.788, 2021449.204] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_containsAllIterable  thrpt   30  1991795.496 ± 29653.708  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33715.012 ops/s
# Warmup Iteration   2: 41416.450 ops/s
# Warmup Iteration   3: 57822.474 ops/s
# Warmup Iteration   4: 57058.955 ops/s
# Warmup Iteration   5: 56613.625 ops/s
# Warmup Iteration   6: 57395.589 ops/s
# Warmup Iteration   7: 56921.280 ops/s
# Warmup Iteration   8: 57669.853 ops/s
# Warmup Iteration   9: 59266.673 ops/s
# Warmup Iteration  10: 47927.013 ops/s
# Warmup Iteration  11: 56049.480 ops/s
# Warmup Iteration  12: 56460.376 ops/s
# Warmup Iteration  13: 57667.598 ops/s
# Warmup Iteration  14: 55903.408 ops/s
# Warmup Iteration  15: 56835.900 ops/s
# Warmup Iteration  16: 57747.773 ops/s
# Warmup Iteration  17: 58784.389 ops/s
# Warmup Iteration  18: 56752.309 ops/s
# Warmup Iteration  19: 57616.856 ops/s
# Warmup Iteration  20: 56184.777 ops/s
# Warmup Iteration  21: 55711.154 ops/s
# Warmup Iteration  22: 56799.028 ops/s
# Warmup Iteration  23: 57933.796 ops/s
# Warmup Iteration  24: 56433.669 ops/s
# Warmup Iteration  25: 56727.169 ops/s
# Warmup Iteration  26: 57214.157 ops/s
# Warmup Iteration  27: 57273.919 ops/s
# Warmup Iteration  28: 55754.288 ops/s
# Warmup Iteration  29: 56397.563 ops/s
# Warmup Iteration  30: 56196.462 ops/s
Iteration   1: 56234.077 ops/s
Iteration   2: 55360.771 ops/s
Iteration   3: 54913.010 ops/s
Iteration   4: 56548.777 ops/s
Iteration   5: 55999.655 ops/s
Iteration   6: 57082.531 ops/s
Iteration   7: 56391.696 ops/s
Iteration   8: 56402.426 ops/s
Iteration   9: 59317.244 ops/s
Iteration  10: 58445.632 ops/s
Iteration  11: 59563.028 ops/s
Iteration  12: 59513.897 ops/s
Iteration  13: 56962.475 ops/s
Iteration  14: 57253.072 ops/s
Iteration  15: 56004.924 ops/s
Iteration  16: 56999.569 ops/s
Iteration  17: 56004.435 ops/s
Iteration  18: 56096.006 ops/s
Iteration  19: 55833.144 ops/s
Iteration  20: 55668.993 ops/s
Iteration  21: 56116.078 ops/s
Iteration  22: 56010.553 ops/s
Iteration  23: 59135.959 ops/s
Iteration  24: 55932.223 ops/s
Iteration  25: 56439.038 ops/s
Iteration  26: 55813.038 ops/s
Iteration  27: 56392.370 ops/s
Iteration  28: 55500.261 ops/s
Iteration  29: 56518.798 ops/s
Iteration  30: 56147.248 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsAnyCollection":
  56686.698 ±(99.9%) 838.995 ops/s [Average]
  (min, avg, max) = (54913.010, 56686.698, 59563.028), stdev = 1255.768
  CI (99.9%): [55847.703, 57525.692] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt      Score     Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  56686.698 ± 838.995  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33012.863 ops/s
# Warmup Iteration   2: 40768.755 ops/s
# Warmup Iteration   3: 54344.529 ops/s
# Warmup Iteration   4: 53805.163 ops/s
# Warmup Iteration   5: 55087.029 ops/s
# Warmup Iteration   6: 53493.973 ops/s
# Warmup Iteration   7: 53019.761 ops/s
# Warmup Iteration   8: 53602.863 ops/s
# Warmup Iteration   9: 53834.805 ops/s
# Warmup Iteration  10: 44899.046 ops/s
# Warmup Iteration  11: 55371.140 ops/s
# Warmup Iteration  12: 53900.015 ops/s
# Warmup Iteration  13: 52246.113 ops/s
# Warmup Iteration  14: 52572.950 ops/s
# Warmup Iteration  15: 52514.139 ops/s
# Warmup Iteration  16: 52473.715 ops/s
# Warmup Iteration  17: 52348.293 ops/s
# Warmup Iteration  18: 52449.164 ops/s
# Warmup Iteration  19: 54683.679 ops/s
# Warmup Iteration  20: 55015.094 ops/s
# Warmup Iteration  21: 53591.655 ops/s
# Warmup Iteration  22: 55372.240 ops/s
# Warmup Iteration  23: 55898.969 ops/s
# Warmup Iteration  24: 54100.758 ops/s
# Warmup Iteration  25: 54868.419 ops/s
# Warmup Iteration  26: 53376.844 ops/s
# Warmup Iteration  27: 52861.094 ops/s
# Warmup Iteration  28: 52396.521 ops/s
# Warmup Iteration  29: 52834.146 ops/s
# Warmup Iteration  30: 53162.974 ops/s
Iteration   1: 53075.140 ops/s
Iteration   2: 55736.482 ops/s
Iteration   3: 55859.666 ops/s
Iteration   4: 55559.424 ops/s
Iteration   5: 53682.899 ops/s
Iteration   6: 53529.795 ops/s
Iteration   7: 54889.829 ops/s
Iteration   8: 54762.651 ops/s
Iteration   9: 53606.401 ops/s
Iteration  10: 54047.080 ops/s
Iteration  11: 53853.943 ops/s
Iteration  12: 52553.246 ops/s
Iteration  13: 54157.204 ops/s
Iteration  14: 52600.487 ops/s
Iteration  15: 52609.352 ops/s
Iteration  16: 53597.241 ops/s
Iteration  17: 53790.566 ops/s
Iteration  18: 53326.032 ops/s
Iteration  19: 53838.088 ops/s
Iteration  20: 54430.585 ops/s
Iteration  21: 54334.671 ops/s
Iteration  22: 53477.661 ops/s
Iteration  23: 54258.796 ops/s
Iteration  24: 54349.393 ops/s
Iteration  25: 53958.134 ops/s
Iteration  26: 53606.803 ops/s
Iteration  27: 54674.154 ops/s
Iteration  28: 54811.692 ops/s
Iteration  29: 53689.141 ops/s
Iteration  30: 54114.524 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsAnyIterable":
  54026.036 ±(99.9%) 561.041 ops/s [Average]
  (min, avg, max) = (52553.246, 54026.036, 55859.666), stdev = 839.740
  CI (99.9%): [53464.995, 54587.077] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt      Score     Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  54026.036 ± 561.041  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 640905.880 ops/s
# Warmup Iteration   2: 670465.820 ops/s
# Warmup Iteration   3: 835933.723 ops/s
# Warmup Iteration   4: 908560.167 ops/s
# Warmup Iteration   5: 895281.417 ops/s
# Warmup Iteration   6: 877512.710 ops/s
# Warmup Iteration   7: 889642.555 ops/s
# Warmup Iteration   8: 894137.581 ops/s
# Warmup Iteration   9: 907420.648 ops/s
# Warmup Iteration  10: 896945.815 ops/s
# Warmup Iteration  11: 895538.265 ops/s
# Warmup Iteration  12: 875661.039 ops/s
# Warmup Iteration  13: 819782.413 ops/s
# Warmup Iteration  14: 805454.860 ops/s
# Warmup Iteration  15: 897429.425 ops/s
# Warmup Iteration  16: 933327.874 ops/s
# Warmup Iteration  17: 946345.365 ops/s
# Warmup Iteration  18: 971189.019 ops/s
# Warmup Iteration  19: 937137.204 ops/s
# Warmup Iteration  20: 931215.797 ops/s
# Warmup Iteration  21: 936327.636 ops/s
# Warmup Iteration  22: 929644.047 ops/s
# Warmup Iteration  23: 928758.233 ops/s
# Warmup Iteration  24: 936919.725 ops/s
# Warmup Iteration  25: 934889.816 ops/s
# Warmup Iteration  26: 928103.079 ops/s
# Warmup Iteration  27: 926916.536 ops/s
# Warmup Iteration  28: 924281.866 ops/s
# Warmup Iteration  29: 969460.295 ops/s
# Warmup Iteration  30: 922422.038 ops/s
Iteration   1: 928427.389 ops/s
Iteration   2: 919271.439 ops/s
Iteration   3: 926797.265 ops/s
Iteration   4: 923599.881 ops/s
Iteration   5: 938726.102 ops/s
Iteration   6: 945543.597 ops/s
Iteration   7: 931337.883 ops/s
Iteration   8: 930594.524 ops/s
Iteration   9: 917018.546 ops/s
Iteration  10: 925456.281 ops/s
Iteration  11: 958815.930 ops/s
Iteration  12: 958132.428 ops/s
Iteration  13: 931375.459 ops/s
Iteration  14: 919256.626 ops/s
Iteration  15: 910554.957 ops/s
Iteration  16: 924580.310 ops/s
Iteration  17: 938521.591 ops/s
Iteration  18: 925383.961 ops/s
Iteration  19: 936547.940 ops/s
Iteration  20: 936047.613 ops/s
Iteration  21: 930015.542 ops/s
Iteration  22: 918831.530 ops/s
Iteration  23: 934531.099 ops/s
Iteration  24: 930110.448 ops/s
Iteration  25: 914761.851 ops/s
Iteration  26: 928930.878 ops/s
Iteration  27: 925654.877 ops/s
Iteration  28: 931006.463 ops/s
Iteration  29: 937665.134 ops/s
Iteration  30: 919086.259 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsBy":
  929886.127 ±(99.9%) 7416.790 ops/s [Average]
  (min, avg, max) = (910554.957, 929886.127, 958815.930), stdev = 11101.103
  CI (99.9%): [922469.337, 937302.917] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_containsBy  thrpt   30  929886.127 ± 7416.790  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33652.754 ops/s
# Warmup Iteration   2: 39932.506 ops/s
# Warmup Iteration   3: 54153.492 ops/s
# Warmup Iteration   4: 53297.825 ops/s
# Warmup Iteration   5: 52951.590 ops/s
# Warmup Iteration   6: 53537.264 ops/s
# Warmup Iteration   7: 52358.197 ops/s
# Warmup Iteration   8: 53501.915 ops/s
# Warmup Iteration   9: 54612.830 ops/s
# Warmup Iteration  10: 46573.030 ops/s
# Warmup Iteration  11: 52359.705 ops/s
# Warmup Iteration  12: 55853.744 ops/s
# Warmup Iteration  13: 55700.217 ops/s
# Warmup Iteration  14: 54135.092 ops/s
# Warmup Iteration  15: 54023.953 ops/s
# Warmup Iteration  16: 53771.991 ops/s
# Warmup Iteration  17: 52962.999 ops/s
# Warmup Iteration  18: 55453.863 ops/s
# Warmup Iteration  19: 53463.904 ops/s
# Warmup Iteration  20: 53944.872 ops/s
# Warmup Iteration  21: 53777.819 ops/s
# Warmup Iteration  22: 54508.735 ops/s
# Warmup Iteration  23: 54095.836 ops/s
# Warmup Iteration  24: 54081.824 ops/s
# Warmup Iteration  25: 54694.692 ops/s
# Warmup Iteration  26: 53088.833 ops/s
# Warmup Iteration  27: 52365.361 ops/s
# Warmup Iteration  28: 54032.490 ops/s
# Warmup Iteration  29: 54479.451 ops/s
# Warmup Iteration  30: 54444.484 ops/s
Iteration   1: 54023.005 ops/s
Iteration   2: 53676.100 ops/s
Iteration   3: 52647.673 ops/s
Iteration   4: 52669.182 ops/s
Iteration   5: 52514.226 ops/s
Iteration   6: 52322.604 ops/s
Iteration   7: 52766.939 ops/s
Iteration   8: 53573.814 ops/s
Iteration   9: 55719.050 ops/s
Iteration  10: 55801.401 ops/s
Iteration  11: 56232.962 ops/s
Iteration  12: 54825.008 ops/s
Iteration  13: 55997.258 ops/s
Iteration  14: 53957.710 ops/s
Iteration  15: 54484.301 ops/s
Iteration  16: 52524.743 ops/s
Iteration  17: 54267.800 ops/s
Iteration  18: 56040.357 ops/s
Iteration  19: 54742.932 ops/s
Iteration  20: 52211.957 ops/s
Iteration  21: 51954.614 ops/s
Iteration  22: 53191.971 ops/s
Iteration  23: 53474.007 ops/s
Iteration  24: 53276.114 ops/s
Iteration  25: 53768.676 ops/s
Iteration  26: 53348.436 ops/s
Iteration  27: 53885.655 ops/s
Iteration  28: 55373.391 ops/s
Iteration  29: 55997.961 ops/s
Iteration  30: 55209.831 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsNoneCollection":
  54015.989 ±(99.9%) 878.533 ops/s [Average]
  (min, avg, max) = (51954.614, 54015.989, 56232.962), stdev = 1314.947
  CI (99.9%): [53137.456, 54894.522] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt      Score     Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  54015.989 ± 878.533  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33795.539 ops/s
# Warmup Iteration   2: 39753.745 ops/s
# Warmup Iteration   3: 54807.985 ops/s
# Warmup Iteration   4: 53184.131 ops/s
# Warmup Iteration   5: 54505.407 ops/s
# Warmup Iteration   6: 54010.559 ops/s
# Warmup Iteration   7: 53593.923 ops/s
# Warmup Iteration   8: 52482.092 ops/s
# Warmup Iteration   9: 52607.394 ops/s
# Warmup Iteration  10: 44376.925 ops/s
# Warmup Iteration  11: 51934.962 ops/s
# Warmup Iteration  12: 51914.087 ops/s
# Warmup Iteration  13: 52656.904 ops/s
# Warmup Iteration  14: 53484.660 ops/s
# Warmup Iteration  15: 53080.077 ops/s
# Warmup Iteration  16: 53072.845 ops/s
# Warmup Iteration  17: 53877.226 ops/s
# Warmup Iteration  18: 53098.041 ops/s
# Warmup Iteration  19: 52763.349 ops/s
# Warmup Iteration  20: 53013.618 ops/s
# Warmup Iteration  21: 55185.351 ops/s
# Warmup Iteration  22: 52269.037 ops/s
# Warmup Iteration  23: 53858.493 ops/s
# Warmup Iteration  24: 53011.549 ops/s
# Warmup Iteration  25: 51678.441 ops/s
# Warmup Iteration  26: 52171.674 ops/s
# Warmup Iteration  27: 53377.000 ops/s
# Warmup Iteration  28: 52148.978 ops/s
# Warmup Iteration  29: 52178.938 ops/s
# Warmup Iteration  30: 52393.021 ops/s
Iteration   1: 51684.169 ops/s
Iteration   2: 53122.509 ops/s
Iteration   3: 51917.166 ops/s
Iteration   4: 52677.139 ops/s
Iteration   5: 52735.476 ops/s
Iteration   6: 52169.206 ops/s
Iteration   7: 52960.561 ops/s
Iteration   8: 54668.529 ops/s
Iteration   9: 52387.172 ops/s
Iteration  10: 52045.156 ops/s
Iteration  11: 51881.384 ops/s
Iteration  12: 52118.564 ops/s
Iteration  13: 52298.418 ops/s
Iteration  14: 52325.744 ops/s
Iteration  15: 51708.993 ops/s
Iteration  16: 52402.908 ops/s
Iteration  17: 52338.823 ops/s
Iteration  18: 52317.930 ops/s
Iteration  19: 51863.739 ops/s
Iteration  20: 52857.485 ops/s
Iteration  21: 51707.604 ops/s
Iteration  22: 51980.860 ops/s
Iteration  23: 51903.818 ops/s
Iteration  24: 52081.397 ops/s
Iteration  25: 52361.311 ops/s
Iteration  26: 52219.411 ops/s
Iteration  27: 51556.636 ops/s
Iteration  28: 53086.386 ops/s
Iteration  29: 54168.248 ops/s
Iteration  30: 52329.048 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_containsNoneIterable":
  52395.860 ±(99.9%) 460.817 ops/s [Average]
  (min, avg, max) = (51556.636, 52395.860, 54668.529), stdev = 689.729
  CI (99.9%): [51935.043, 52856.677] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt      Score     Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  52395.860 ± 460.817  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 284255.524 ops/s
# Warmup Iteration   2: 404245.069 ops/s
# Warmup Iteration   3: 502941.137 ops/s
# Warmup Iteration   4: 494529.487 ops/s
# Warmup Iteration   5: 487357.423 ops/s
# Warmup Iteration   6: 505623.159 ops/s
# Warmup Iteration   7: 442664.242 ops/s
# Warmup Iteration   8: 465753.358 ops/s
# Warmup Iteration   9: 496196.990 ops/s
# Warmup Iteration  10: 490462.231 ops/s
# Warmup Iteration  11: 501101.236 ops/s
# Warmup Iteration  12: 498376.940 ops/s
# Warmup Iteration  13: 511255.426 ops/s
# Warmup Iteration  14: 519789.871 ops/s
# Warmup Iteration  15: 496931.738 ops/s
# Warmup Iteration  16: 513808.697 ops/s
# Warmup Iteration  17: 503255.706 ops/s
# Warmup Iteration  18: 516862.908 ops/s
# Warmup Iteration  19: 522913.324 ops/s
# Warmup Iteration  20: 507399.641 ops/s
# Warmup Iteration  21: 497492.721 ops/s
# Warmup Iteration  22: 504376.216 ops/s
# Warmup Iteration  23: 496093.513 ops/s
# Warmup Iteration  24: 497484.032 ops/s
# Warmup Iteration  25: 488370.253 ops/s
# Warmup Iteration  26: 485832.563 ops/s
# Warmup Iteration  27: 487533.771 ops/s
# Warmup Iteration  28: 503901.531 ops/s
# Warmup Iteration  29: 490021.814 ops/s
# Warmup Iteration  30: 489840.796 ops/s
Iteration   1: 510371.046 ops/s
Iteration   2: 492933.961 ops/s
Iteration   3: 505155.684 ops/s
Iteration   4: 490963.750 ops/s
Iteration   5: 487222.187 ops/s
Iteration   6: 487729.201 ops/s
Iteration   7: 489105.780 ops/s
Iteration   8: 489687.878 ops/s
Iteration   9: 498135.598 ops/s
Iteration  10: 495745.199 ops/s
Iteration  11: 501339.890 ops/s
Iteration  12: 494192.253 ops/s
Iteration  13: 486757.457 ops/s
Iteration  14: 489126.189 ops/s
Iteration  15: 503101.887 ops/s
Iteration  16: 493562.142 ops/s
Iteration  17: 494905.485 ops/s
Iteration  18: 503647.206 ops/s
Iteration  19: 498373.293 ops/s
Iteration  20: 493786.206 ops/s
Iteration  21: 504835.860 ops/s
Iteration  22: 499793.342 ops/s
Iteration  23: 482100.591 ops/s
Iteration  24: 500370.237 ops/s
Iteration  25: 492575.637 ops/s
Iteration  26: 502552.387 ops/s
Iteration  27: 511162.366 ops/s
Iteration  28: 522369.632 ops/s
Iteration  29: 495387.384 ops/s
Iteration  30: 496033.866 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_corresponds":
  497100.786 ±(99.9%) 5688.525 ops/s [Average]
  (min, avg, max) = (482100.591, 497100.786, 522369.632), stdev = 8514.317
  CI (99.9%): [491412.262, 502789.311] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_corresponds  thrpt   30  497100.786 ± 5688.525  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 744927.205 ops/s
# Warmup Iteration   2: 1208374.920 ops/s
# Warmup Iteration   3: 1465119.510 ops/s
# Warmup Iteration   4: 1471561.902 ops/s
# Warmup Iteration   5: 1422458.955 ops/s
# Warmup Iteration   6: 1232319.028 ops/s
# Warmup Iteration   7: 1407430.685 ops/s
# Warmup Iteration   8: 1456798.958 ops/s
# Warmup Iteration   9: 1423893.320 ops/s
# Warmup Iteration  10: 1478913.287 ops/s
# Warmup Iteration  11: 1486121.722 ops/s
# Warmup Iteration  12: 1453150.799 ops/s
# Warmup Iteration  13: 1382802.750 ops/s
# Warmup Iteration  14: 1386026.804 ops/s
# Warmup Iteration  15: 1411801.371 ops/s
# Warmup Iteration  16: 1482107.288 ops/s
# Warmup Iteration  17: 1429448.042 ops/s
# Warmup Iteration  18: 1399089.468 ops/s
# Warmup Iteration  19: 1452644.984 ops/s
# Warmup Iteration  20: 1397409.302 ops/s
# Warmup Iteration  21: 1444858.187 ops/s
# Warmup Iteration  22: 1426104.335 ops/s
# Warmup Iteration  23: 1463962.320 ops/s
# Warmup Iteration  24: 1478475.614 ops/s
# Warmup Iteration  25: 1410546.641 ops/s
# Warmup Iteration  26: 1438185.340 ops/s
# Warmup Iteration  27: 1407101.046 ops/s
# Warmup Iteration  28: 1387290.128 ops/s
# Warmup Iteration  29: 1390185.856 ops/s
# Warmup Iteration  30: 1385859.346 ops/s
Iteration   1: 1424744.475 ops/s
Iteration   2: 1401417.062 ops/s
Iteration   3: 1424664.399 ops/s
Iteration   4: 1427073.947 ops/s
Iteration   5: 1414918.227 ops/s
Iteration   6: 1418180.476 ops/s
Iteration   7: 1413624.163 ops/s
Iteration   8: 1475522.234 ops/s
Iteration   9: 1476347.838 ops/s
Iteration  10: 1481809.302 ops/s
Iteration  11: 1467855.870 ops/s
Iteration  12: 1382659.147 ops/s
Iteration  13: 1376936.183 ops/s
Iteration  14: 1366016.193 ops/s
Iteration  15: 1399837.722 ops/s
Iteration  16: 1382021.297 ops/s
Iteration  17: 1400250.838 ops/s
Iteration  18: 1403472.954 ops/s
Iteration  19: 1440078.184 ops/s
Iteration  20: 1362699.510 ops/s
Iteration  21: 1385692.515 ops/s
Iteration  22: 1386006.760 ops/s
Iteration  23: 1374526.288 ops/s
Iteration  24: 1453792.332 ops/s
Iteration  25: 1437437.498 ops/s
Iteration  26: 1391276.194 ops/s
Iteration  27: 1394663.762 ops/s
Iteration  28: 1424389.355 ops/s
Iteration  29: 1430992.983 ops/s
Iteration  30: 1393187.349 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_count":
  1413736.502 ±(99.9%) 22274.806 ops/s [Average]
  (min, avg, max) = (1362699.510, 1413736.502, 1481809.302), stdev = 33339.883
  CI (99.9%): [1391461.696, 1436011.307] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_count  thrpt   30  1413736.502 ± 22274.806  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 659364.575 ops/s
# Warmup Iteration   2: 1186596.190 ops/s
# Warmup Iteration   3: 1370950.999 ops/s
# Warmup Iteration   4: 1336044.449 ops/s
# Warmup Iteration   5: 1342334.840 ops/s
# Warmup Iteration   6: 1080468.509 ops/s
# Warmup Iteration   7: 1332681.591 ops/s
# Warmup Iteration   8: 1338497.824 ops/s
# Warmup Iteration   9: 1317590.600 ops/s
# Warmup Iteration  10: 1323019.072 ops/s
# Warmup Iteration  11: 1326992.291 ops/s
# Warmup Iteration  12: 1324161.578 ops/s
# Warmup Iteration  13: 1347060.682 ops/s
# Warmup Iteration  14: 1328282.490 ops/s
# Warmup Iteration  15: 1330734.244 ops/s
# Warmup Iteration  16: 1338548.369 ops/s
# Warmup Iteration  17: 1331647.112 ops/s
# Warmup Iteration  18: 1322117.393 ops/s
# Warmup Iteration  19: 1331684.670 ops/s
# Warmup Iteration  20: 1321249.427 ops/s
# Warmup Iteration  21: 1324612.317 ops/s
# Warmup Iteration  22: 1338614.773 ops/s
# Warmup Iteration  23: 1336401.873 ops/s
# Warmup Iteration  24: 1342725.553 ops/s
# Warmup Iteration  25: 1329948.525 ops/s
# Warmup Iteration  26: 1327199.339 ops/s
# Warmup Iteration  27: 1327706.310 ops/s
# Warmup Iteration  28: 1320789.870 ops/s
# Warmup Iteration  29: 1324297.481 ops/s
# Warmup Iteration  30: 1340282.731 ops/s
Iteration   1: 1336583.993 ops/s
Iteration   2: 1307376.716 ops/s
Iteration   3: 1326560.073 ops/s
Iteration   4: 1317428.922 ops/s
Iteration   5: 1410452.950 ops/s
Iteration   6: 1413584.384 ops/s
Iteration   7: 1420614.376 ops/s
Iteration   8: 1366437.024 ops/s
Iteration   9: 1338033.089 ops/s
Iteration  10: 1351643.207 ops/s
Iteration  11: 1386618.022 ops/s
Iteration  12: 1411868.344 ops/s
Iteration  13: 1417384.851 ops/s
Iteration  14: 1416763.604 ops/s
Iteration  15: 1418208.404 ops/s
Iteration  16: 1418570.656 ops/s
Iteration  17: 1370064.837 ops/s
Iteration  18: 1370974.989 ops/s
Iteration  19: 1348174.300 ops/s
Iteration  20: 1391593.196 ops/s
Iteration  21: 1381022.561 ops/s
Iteration  22: 1347409.515 ops/s
Iteration  23: 1361628.106 ops/s
Iteration  24: 1337585.226 ops/s
Iteration  25: 1332882.030 ops/s
Iteration  26: 1340383.277 ops/s
Iteration  27: 1327907.173 ops/s
Iteration  28: 1333884.042 ops/s
Iteration  29: 1324009.125 ops/s
Iteration  30: 1350127.798 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_countBy":
  1365859.160 ±(99.9%) 24288.275 ops/s [Average]
  (min, avg, max) = (1307376.716, 1365859.160, 1420614.376), stdev = 36353.549
  CI (99.9%): [1341570.885, 1390147.435] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_countBy  thrpt   30  1365859.160 ± 24288.275  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 210595.781 ops/s
# Warmup Iteration   2: 388232.453 ops/s
# Warmup Iteration   3: 460885.749 ops/s
# Warmup Iteration   4: 454075.089 ops/s
# Warmup Iteration   5: 483487.299 ops/s
# Warmup Iteration   6: 378780.450 ops/s
# Warmup Iteration   7: 465648.035 ops/s
# Warmup Iteration   8: 476845.450 ops/s
# Warmup Iteration   9: 451480.687 ops/s
# Warmup Iteration  10: 456810.752 ops/s
# Warmup Iteration  11: 456073.041 ops/s
# Warmup Iteration  12: 483968.000 ops/s
# Warmup Iteration  13: 457309.403 ops/s
# Warmup Iteration  14: 461053.800 ops/s
# Warmup Iteration  15: 473003.366 ops/s
# Warmup Iteration  16: 454149.536 ops/s
# Warmup Iteration  17: 474473.943 ops/s
# Warmup Iteration  18: 459393.382 ops/s
# Warmup Iteration  19: 472732.265 ops/s
# Warmup Iteration  20: 466906.556 ops/s
# Warmup Iteration  21: 459852.320 ops/s
# Warmup Iteration  22: 469295.081 ops/s
# Warmup Iteration  23: 456587.866 ops/s
# Warmup Iteration  24: 450904.108 ops/s
# Warmup Iteration  25: 457266.589 ops/s
# Warmup Iteration  26: 457715.444 ops/s
# Warmup Iteration  27: 468257.422 ops/s
# Warmup Iteration  28: 487727.828 ops/s
# Warmup Iteration  29: 487326.886 ops/s
# Warmup Iteration  30: 461479.296 ops/s
Iteration   1: 454525.127 ops/s
Iteration   2: 463755.800 ops/s
Iteration   3: 463628.987 ops/s
Iteration   4: 470353.588 ops/s
Iteration   5: 487619.071 ops/s
Iteration   6: 487660.405 ops/s
Iteration   7: 466767.571 ops/s
Iteration   8: 461863.669 ops/s
Iteration   9: 474998.582 ops/s
Iteration  10: 473309.530 ops/s
Iteration  11: 468868.222 ops/s
Iteration  12: 470688.682 ops/s
Iteration  13: 466253.357 ops/s
Iteration  14: 459238.869 ops/s
Iteration  15: 457577.681 ops/s
Iteration  16: 488073.470 ops/s
Iteration  17: 486129.948 ops/s
Iteration  18: 485045.415 ops/s
Iteration  19: 481928.577 ops/s
Iteration  20: 486051.653 ops/s
Iteration  21: 487094.396 ops/s
Iteration  22: 487982.054 ops/s
Iteration  23: 473995.373 ops/s
Iteration  24: 485057.680 ops/s
Iteration  25: 457255.761 ops/s
Iteration  26: 465155.849 ops/s
Iteration  27: 466705.630 ops/s
Iteration  28: 459257.689 ops/s
Iteration  29: 483095.358 ops/s
Iteration  30: 483682.202 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_countByEach":
  473454.006 ±(99.9%) 7571.365 ops/s [Average]
  (min, avg, max) = (454525.127, 473454.006, 488073.470), stdev = 11332.464
  CI (99.9%): [465882.641, 481025.372] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_countByEach  thrpt   30  473454.006 ± 7571.365  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 611189.730 ops/s
# Warmup Iteration   2: 1057772.798 ops/s
# Warmup Iteration   3: 1194294.316 ops/s
# Warmup Iteration   4: 1213882.961 ops/s
# Warmup Iteration   5: 1226151.940 ops/s
# Warmup Iteration   6: 1073544.993 ops/s
# Warmup Iteration   7: 1169852.546 ops/s
# Warmup Iteration   8: 1221393.187 ops/s
# Warmup Iteration   9: 1210220.905 ops/s
# Warmup Iteration  10: 1201287.719 ops/s
# Warmup Iteration  11: 1211797.381 ops/s
# Warmup Iteration  12: 1255836.731 ops/s
# Warmup Iteration  13: 1230564.152 ops/s
# Warmup Iteration  14: 1264967.762 ops/s
# Warmup Iteration  15: 1216136.504 ops/s
# Warmup Iteration  16: 1198887.346 ops/s
# Warmup Iteration  17: 1242154.097 ops/s
# Warmup Iteration  18: 1223874.548 ops/s
# Warmup Iteration  19: 1225524.581 ops/s
# Warmup Iteration  20: 1240482.571 ops/s
# Warmup Iteration  21: 1251679.149 ops/s
# Warmup Iteration  22: 1282409.122 ops/s
# Warmup Iteration  23: 1232154.611 ops/s
# Warmup Iteration  24: 1203675.980 ops/s
# Warmup Iteration  25: 1235082.526 ops/s
# Warmup Iteration  26: 1259955.363 ops/s
# Warmup Iteration  27: 1296710.189 ops/s
# Warmup Iteration  28: 1273497.867 ops/s
# Warmup Iteration  29: 1211976.751 ops/s
# Warmup Iteration  30: 1216862.852 ops/s
Iteration   1: 1260337.175 ops/s
Iteration   2: 1245496.173 ops/s
Iteration   3: 1202240.986 ops/s
Iteration   4: 1223509.779 ops/s
Iteration   5: 1230911.822 ops/s
Iteration   6: 1208013.885 ops/s
Iteration   7: 1201513.581 ops/s
Iteration   8: 1226693.566 ops/s
Iteration   9: 1247599.622 ops/s
Iteration  10: 1249314.757 ops/s
Iteration  11: 1217151.535 ops/s
Iteration  12: 1214643.362 ops/s
Iteration  13: 1244891.767 ops/s
Iteration  14: 1277594.480 ops/s
Iteration  15: 1229314.395 ops/s
Iteration  16: 1214215.364 ops/s
Iteration  17: 1204289.026 ops/s
Iteration  18: 1229190.504 ops/s
Iteration  19: 1274579.659 ops/s
Iteration  20: 1226459.257 ops/s
Iteration  21: 1226378.650 ops/s
Iteration  22: 1257515.887 ops/s
Iteration  23: 1209974.477 ops/s
Iteration  24: 1273217.933 ops/s
Iteration  25: 1295994.866 ops/s
Iteration  26: 1292786.824 ops/s
Iteration  27: 1243519.563 ops/s
Iteration  28: 1219997.992 ops/s
Iteration  29: 1220350.721 ops/s
Iteration  30: 1256533.017 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_countByWith":
  1237474.354 ±(99.9%) 17764.435 ops/s [Average]
  (min, avg, max) = (1201513.581, 1237474.354, 1295994.866), stdev = 26588.972
  CI (99.9%): [1219709.919, 1255238.789] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_countByWith  thrpt   30  1237474.354 ± 17764.435  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 694915.977 ops/s
# Warmup Iteration   2: 1201376.634 ops/s
# Warmup Iteration   3: 1413550.373 ops/s
# Warmup Iteration   4: 1449314.947 ops/s
# Warmup Iteration   5: 1397124.298 ops/s
# Warmup Iteration   6: 1160748.577 ops/s
# Warmup Iteration   7: 1409412.514 ops/s
# Warmup Iteration   8: 1388274.594 ops/s
# Warmup Iteration   9: 1395596.180 ops/s
# Warmup Iteration  10: 1399642.653 ops/s
# Warmup Iteration  11: 1396500.848 ops/s
# Warmup Iteration  12: 1424679.087 ops/s
# Warmup Iteration  13: 1393094.006 ops/s
# Warmup Iteration  14: 1399089.859 ops/s
# Warmup Iteration  15: 1386624.690 ops/s
# Warmup Iteration  16: 1392754.285 ops/s
# Warmup Iteration  17: 1378328.485 ops/s
# Warmup Iteration  18: 1382290.236 ops/s
# Warmup Iteration  19: 1390695.479 ops/s
# Warmup Iteration  20: 1404002.494 ops/s
# Warmup Iteration  21: 1404915.043 ops/s
# Warmup Iteration  22: 1412941.632 ops/s
# Warmup Iteration  23: 1402806.003 ops/s
# Warmup Iteration  24: 1413403.982 ops/s
# Warmup Iteration  25: 1411091.112 ops/s
# Warmup Iteration  26: 1382602.762 ops/s
# Warmup Iteration  27: 1394412.237 ops/s
# Warmup Iteration  28: 1381272.172 ops/s
# Warmup Iteration  29: 1389199.204 ops/s
# Warmup Iteration  30: 1394748.939 ops/s
Iteration   1: 1415236.844 ops/s
Iteration   2: 1412625.194 ops/s
Iteration   3: 1410012.498 ops/s
Iteration   4: 1431678.664 ops/s
Iteration   5: 1417764.556 ops/s
Iteration   6: 1398048.849 ops/s
Iteration   7: 1386435.110 ops/s
Iteration   8: 1409516.381 ops/s
Iteration   9: 1404337.401 ops/s
Iteration  10: 1413285.103 ops/s
Iteration  11: 1402185.058 ops/s
Iteration  12: 1413813.840 ops/s
Iteration  13: 1393270.659 ops/s
Iteration  14: 1418932.763 ops/s
Iteration  15: 1392740.838 ops/s
Iteration  16: 1395021.808 ops/s
Iteration  17: 1418338.882 ops/s
Iteration  18: 1418561.115 ops/s
Iteration  19: 1435017.761 ops/s
Iteration  20: 1448922.556 ops/s
Iteration  21: 1413207.269 ops/s
Iteration  22: 1372229.653 ops/s
Iteration  23: 1424179.121 ops/s
Iteration  24: 1430242.743 ops/s
Iteration  25: 1443907.578 ops/s
Iteration  26: 1437473.188 ops/s
Iteration  27: 1439456.497 ops/s
Iteration  28: 1456394.242 ops/s
Iteration  29: 1434512.149 ops/s
Iteration  30: 1410484.409 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_countWith":
  1416594.424 ±(99.9%) 12902.679 ops/s [Average]
  (min, avg, max) = (1372229.653, 1416594.424, 1456394.242), stdev = 19312.124
  CI (99.9%): [1403691.745, 1429497.103] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_countWith  thrpt   30  1416594.424 ± 12902.679  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 424974.869 ops/s
# Warmup Iteration   2: 612730.189 ops/s
# Warmup Iteration   3: 778766.218 ops/s
# Warmup Iteration   4: 781003.761 ops/s
# Warmup Iteration   5: 767257.850 ops/s
# Warmup Iteration   6: 791182.779 ops/s
# Warmup Iteration   7: 721284.869 ops/s
# Warmup Iteration   8: 695023.574 ops/s
# Warmup Iteration   9: 769852.308 ops/s
# Warmup Iteration  10: 766603.557 ops/s
# Warmup Iteration  11: 792026.631 ops/s
# Warmup Iteration  12: 777976.174 ops/s
# Warmup Iteration  13: 773715.341 ops/s
# Warmup Iteration  14: 769455.015 ops/s
# Warmup Iteration  15: 777337.875 ops/s
# Warmup Iteration  16: 772332.610 ops/s
# Warmup Iteration  17: 760619.212 ops/s
# Warmup Iteration  18: 769125.315 ops/s
# Warmup Iteration  19: 775164.931 ops/s
# Warmup Iteration  20: 783064.695 ops/s
# Warmup Iteration  21: 778132.613 ops/s
# Warmup Iteration  22: 774356.560 ops/s
# Warmup Iteration  23: 777566.126 ops/s
# Warmup Iteration  24: 771786.048 ops/s
# Warmup Iteration  25: 770691.308 ops/s
# Warmup Iteration  26: 789740.328 ops/s
# Warmup Iteration  27: 797415.489 ops/s
# Warmup Iteration  28: 766777.927 ops/s
# Warmup Iteration  29: 787754.567 ops/s
# Warmup Iteration  30: 785495.283 ops/s
Iteration   1: 788679.977 ops/s
Iteration   2: 762011.212 ops/s
Iteration   3: 763190.835 ops/s
Iteration   4: 766191.063 ops/s
Iteration   5: 777741.224 ops/s
Iteration   6: 767062.336 ops/s
Iteration   7: 751464.720 ops/s
Iteration   8: 783738.992 ops/s
Iteration   9: 791360.314 ops/s
Iteration  10: 789909.367 ops/s
Iteration  11: 772824.946 ops/s
Iteration  12: 785184.223 ops/s
Iteration  13: 768590.400 ops/s
Iteration  14: 790211.106 ops/s
Iteration  15: 764354.393 ops/s
Iteration  16: 780173.071 ops/s
Iteration  17: 782248.344 ops/s
Iteration  18: 769311.517 ops/s
Iteration  19: 771994.953 ops/s
Iteration  20: 765430.115 ops/s
Iteration  21: 784335.854 ops/s
Iteration  22: 770360.999 ops/s
Iteration  23: 775090.888 ops/s
Iteration  24: 757886.252 ops/s
Iteration  25: 762287.134 ops/s
Iteration  26: 777637.884 ops/s
Iteration  27: 770511.829 ops/s
Iteration  28: 769603.764 ops/s
Iteration  29: 755062.486 ops/s
Iteration  30: 798633.074 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detect":
  773769.442 ±(99.9%) 7846.752 ops/s [Average]
  (min, avg, max) = (751464.720, 773769.442, 798633.074), stdev = 11744.650
  CI (99.9%): [765922.690, 781616.195] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_detect  thrpt   30  773769.442 ± 7846.752  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 279367.302 ops/s
# Warmup Iteration   2: 424116.687 ops/s
# Warmup Iteration   3: 520842.542 ops/s
# Warmup Iteration   4: 508992.630 ops/s
# Warmup Iteration   5: 507333.557 ops/s
# Warmup Iteration   6: 515323.648 ops/s
# Warmup Iteration   7: 419846.380 ops/s
# Warmup Iteration   8: 501639.441 ops/s
# Warmup Iteration   9: 514677.413 ops/s
# Warmup Iteration  10: 521640.537 ops/s
# Warmup Iteration  11: 519565.297 ops/s
# Warmup Iteration  12: 513700.974 ops/s
# Warmup Iteration  13: 517356.954 ops/s
# Warmup Iteration  14: 517216.929 ops/s
# Warmup Iteration  15: 511054.979 ops/s
# Warmup Iteration  16: 507171.111 ops/s
# Warmup Iteration  17: 522137.811 ops/s
# Warmup Iteration  18: 528567.549 ops/s
# Warmup Iteration  19: 522078.251 ops/s
# Warmup Iteration  20: 520518.246 ops/s
# Warmup Iteration  21: 514771.515 ops/s
# Warmup Iteration  22: 511229.805 ops/s
# Warmup Iteration  23: 517968.901 ops/s
# Warmup Iteration  24: 519567.379 ops/s
# Warmup Iteration  25: 513591.501 ops/s
# Warmup Iteration  26: 505373.504 ops/s
# Warmup Iteration  27: 509026.325 ops/s
# Warmup Iteration  28: 508713.749 ops/s
# Warmup Iteration  29: 511834.709 ops/s
# Warmup Iteration  30: 511980.570 ops/s
Iteration   1: 514626.050 ops/s
Iteration   2: 513505.987 ops/s
Iteration   3: 528868.837 ops/s
Iteration   4: 517367.447 ops/s
Iteration   5: 516925.740 ops/s
Iteration   6: 518780.984 ops/s
Iteration   7: 510058.996 ops/s
Iteration   8: 522310.577 ops/s
Iteration   9: 518154.314 ops/s
Iteration  10: 525008.875 ops/s
Iteration  11: 515911.038 ops/s
Iteration  12: 521816.857 ops/s
Iteration  13: 521293.763 ops/s
Iteration  14: 522291.592 ops/s
Iteration  15: 516276.843 ops/s
Iteration  16: 525773.180 ops/s
Iteration  17: 524238.825 ops/s
Iteration  18: 527084.272 ops/s
Iteration  19: 523038.977 ops/s
Iteration  20: 527765.906 ops/s
Iteration  21: 519401.418 ops/s
Iteration  22: 514521.815 ops/s
Iteration  23: 513477.508 ops/s
Iteration  24: 519042.875 ops/s
Iteration  25: 519937.200 ops/s
Iteration  26: 513915.840 ops/s
Iteration  27: 516854.104 ops/s
Iteration  28: 518386.922 ops/s
Iteration  29: 518862.740 ops/s
Iteration  30: 506840.922 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detectIfNone":
  519078.013 ±(99.9%) 3474.652 ops/s [Average]
  (min, avg, max) = (506840.922, 519078.013, 528868.837), stdev = 5200.696
  CI (99.9%): [515603.362, 522552.665] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_detectIfNone  thrpt   30  519078.013 ± 3474.652  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 367372.315 ops/s
# Warmup Iteration   2: 416819.749 ops/s
# Warmup Iteration   3: 475402.318 ops/s
# Warmup Iteration   4: 544862.134 ops/s
# Warmup Iteration   5: 548056.224 ops/s
# Warmup Iteration   6: 535694.591 ops/s
# Warmup Iteration   7: 531333.848 ops/s
# Warmup Iteration   8: 532769.067 ops/s
# Warmup Iteration   9: 538040.135 ops/s
# Warmup Iteration  10: 528008.237 ops/s
# Warmup Iteration  11: 538545.844 ops/s
# Warmup Iteration  12: 534853.197 ops/s
# Warmup Iteration  13: 532731.990 ops/s
# Warmup Iteration  14: 464309.743 ops/s
# Warmup Iteration  15: 511704.988 ops/s
# Warmup Iteration  16: 534967.022 ops/s
# Warmup Iteration  17: 532027.193 ops/s
# Warmup Iteration  18: 531693.635 ops/s
# Warmup Iteration  19: 530397.663 ops/s
# Warmup Iteration  20: 539821.266 ops/s
# Warmup Iteration  21: 538005.291 ops/s
# Warmup Iteration  22: 540438.698 ops/s
# Warmup Iteration  23: 542198.796 ops/s
# Warmup Iteration  24: 546815.769 ops/s
# Warmup Iteration  25: 528804.943 ops/s
# Warmup Iteration  26: 539881.621 ops/s
# Warmup Iteration  27: 533983.499 ops/s
# Warmup Iteration  28: 528065.954 ops/s
# Warmup Iteration  29: 535230.829 ops/s
# Warmup Iteration  30: 531247.745 ops/s
Iteration   1: 533536.350 ops/s
Iteration   2: 540196.818 ops/s
Iteration   3: 532063.998 ops/s
Iteration   4: 549120.355 ops/s
Iteration   5: 533347.107 ops/s
Iteration   6: 534182.982 ops/s
Iteration   7: 527317.874 ops/s
Iteration   8: 539952.603 ops/s
Iteration   9: 530862.682 ops/s
Iteration  10: 531198.767 ops/s
Iteration  11: 530090.107 ops/s
Iteration  12: 525850.079 ops/s
Iteration  13: 536237.968 ops/s
Iteration  14: 540336.813 ops/s
Iteration  15: 537913.672 ops/s
Iteration  16: 540793.105 ops/s
Iteration  17: 529305.526 ops/s
Iteration  18: 533464.504 ops/s
Iteration  19: 529660.475 ops/s
Iteration  20: 521115.265 ops/s
Iteration  21: 532055.672 ops/s
Iteration  22: 527168.041 ops/s
Iteration  23: 534967.825 ops/s
Iteration  24: 535107.897 ops/s
Iteration  25: 546121.201 ops/s
Iteration  26: 537555.914 ops/s
Iteration  27: 532475.863 ops/s
Iteration  28: 539031.547 ops/s
Iteration  29: 539066.164 ops/s
Iteration  30: 540998.530 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detectIndex":
  534703.190 ±(99.9%) 4047.595 ops/s [Average]
  (min, avg, max) = (521115.265, 534703.190, 549120.355), stdev = 6058.250
  CI (99.9%): [530655.595, 538750.785] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_detectIndex  thrpt   30  534703.190 ± 4047.595  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 271438.629 ops/s
# Warmup Iteration   2: 331194.012 ops/s
# Warmup Iteration   3: 416047.282 ops/s
# Warmup Iteration   4: 422938.707 ops/s
# Warmup Iteration   5: 420002.427 ops/s
# Warmup Iteration   6: 420573.780 ops/s
# Warmup Iteration   7: 418777.993 ops/s
# Warmup Iteration   8: 435186.857 ops/s
# Warmup Iteration   9: 402318.938 ops/s
# Warmup Iteration  10: 389614.770 ops/s
# Warmup Iteration  11: 425394.532 ops/s
# Warmup Iteration  12: 423041.811 ops/s
# Warmup Iteration  13: 425341.547 ops/s
# Warmup Iteration  14: 438091.425 ops/s
# Warmup Iteration  15: 444184.210 ops/s
# Warmup Iteration  16: 439678.122 ops/s
# Warmup Iteration  17: 451562.190 ops/s
# Warmup Iteration  18: 437011.123 ops/s
# Warmup Iteration  19: 443546.419 ops/s
# Warmup Iteration  20: 432214.618 ops/s
# Warmup Iteration  21: 425461.587 ops/s
# Warmup Iteration  22: 432755.560 ops/s
# Warmup Iteration  23: 427246.041 ops/s
# Warmup Iteration  24: 433196.345 ops/s
# Warmup Iteration  25: 431064.564 ops/s
# Warmup Iteration  26: 438516.341 ops/s
# Warmup Iteration  27: 442860.680 ops/s
# Warmup Iteration  28: 442709.273 ops/s
# Warmup Iteration  29: 443558.575 ops/s
# Warmup Iteration  30: 443535.440 ops/s
Iteration   1: 435016.236 ops/s
Iteration   2: 430653.198 ops/s
Iteration   3: 432738.826 ops/s
Iteration   4: 434347.032 ops/s
Iteration   5: 432475.486 ops/s
Iteration   6: 433023.141 ops/s
Iteration   7: 438968.096 ops/s
Iteration   8: 438211.572 ops/s
Iteration   9: 440720.288 ops/s
Iteration  10: 442197.315 ops/s
Iteration  11: 438345.413 ops/s
Iteration  12: 443269.846 ops/s
Iteration  13: 449299.147 ops/s
Iteration  14: 452825.939 ops/s
Iteration  15: 441370.325 ops/s
Iteration  16: 454488.727 ops/s
Iteration  17: 451348.348 ops/s
Iteration  18: 450802.748 ops/s
Iteration  19: 452288.398 ops/s
Iteration  20: 442335.625 ops/s
Iteration  21: 427702.597 ops/s
Iteration  22: 428162.805 ops/s
Iteration  23: 432130.479 ops/s
Iteration  24: 437841.548 ops/s
Iteration  25: 428914.678 ops/s
Iteration  26: 428625.095 ops/s
Iteration  27: 435127.726 ops/s
Iteration  28: 429234.698 ops/s
Iteration  29: 429381.451 ops/s
Iteration  30: 443734.056 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detectOptional":
  438519.361 ±(99.9%) 5549.354 ops/s [Average]
  (min, avg, max) = (427702.597, 438519.361, 454488.727), stdev = 8306.012
  CI (99.9%): [432970.007, 444068.715] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_detectOptional  thrpt   30  438519.361 ± 5549.354  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 313271.000 ops/s
# Warmup Iteration   2: 459897.004 ops/s
# Warmup Iteration   3: 552124.572 ops/s
# Warmup Iteration   4: 549742.671 ops/s
# Warmup Iteration   5: 564695.427 ops/s
# Warmup Iteration   6: 565659.045 ops/s
# Warmup Iteration   7: 536157.149 ops/s
# Warmup Iteration   8: 479280.029 ops/s
# Warmup Iteration   9: 561396.029 ops/s
# Warmup Iteration  10: 554468.128 ops/s
# Warmup Iteration  11: 560863.393 ops/s
# Warmup Iteration  12: 545810.975 ops/s
# Warmup Iteration  13: 568680.896 ops/s
# Warmup Iteration  14: 551692.128 ops/s
# Warmup Iteration  15: 554856.247 ops/s
# Warmup Iteration  16: 578057.736 ops/s
# Warmup Iteration  17: 579298.891 ops/s
# Warmup Iteration  18: 563429.960 ops/s
# Warmup Iteration  19: 549115.896 ops/s
# Warmup Iteration  20: 549853.801 ops/s
# Warmup Iteration  21: 551730.610 ops/s
# Warmup Iteration  22: 574608.022 ops/s
# Warmup Iteration  23: 549686.885 ops/s
# Warmup Iteration  24: 548157.329 ops/s
# Warmup Iteration  25: 550124.512 ops/s
# Warmup Iteration  26: 547374.026 ops/s
# Warmup Iteration  27: 550378.333 ops/s
# Warmup Iteration  28: 568998.356 ops/s
# Warmup Iteration  29: 558303.645 ops/s
# Warmup Iteration  30: 551727.837 ops/s
Iteration   1: 554093.436 ops/s
Iteration   2: 558955.970 ops/s
Iteration   3: 556283.055 ops/s
Iteration   4: 580274.731 ops/s
Iteration   5: 571447.705 ops/s
Iteration   6: 558062.562 ops/s
Iteration   7: 567699.381 ops/s
Iteration   8: 555915.016 ops/s
Iteration   9: 559310.215 ops/s
Iteration  10: 566197.118 ops/s
Iteration  11: 553994.285 ops/s
Iteration  12: 563753.842 ops/s
Iteration  13: 553984.817 ops/s
Iteration  14: 559699.717 ops/s
Iteration  15: 544128.681 ops/s
Iteration  16: 547296.364 ops/s
Iteration  17: 549897.412 ops/s
Iteration  18: 548777.325 ops/s
Iteration  19: 544873.893 ops/s
Iteration  20: 564531.950 ops/s
Iteration  21: 552734.705 ops/s
Iteration  22: 577044.374 ops/s
Iteration  23: 568647.766 ops/s
Iteration  24: 546879.373 ops/s
Iteration  25: 555405.427 ops/s
Iteration  26: 566018.225 ops/s
Iteration  27: 574298.732 ops/s
Iteration  28: 575336.192 ops/s
Iteration  29: 538217.550 ops/s
Iteration  30: 558785.947 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detectWith":
  559084.859 ±(99.9%) 7046.227 ops/s [Average]
  (min, avg, max) = (538217.550, 559084.859, 580274.731), stdev = 10546.461
  CI (99.9%): [552038.632, 566131.085] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_detectWith  thrpt   30  559084.859 ± 7046.227  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detectWithIfNoneBlock$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detectWithIfNoneBlock

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 318410.538 ops/s
# Warmup Iteration   2: 469544.441 ops/s
# Warmup Iteration   3: 577510.483 ops/s
# Warmup Iteration   4: 584306.854 ops/s
# Warmup Iteration   5: 585656.039 ops/s
# Warmup Iteration   6: 593406.535 ops/s
# Warmup Iteration   7: 489922.078 ops/s
# Warmup Iteration   8: 590147.469 ops/s
# Warmup Iteration   9: 586182.840 ops/s
# Warmup Iteration  10: 588205.683 ops/s
# Warmup Iteration  11: 592792.260 ops/s
# Warmup Iteration  12: 574618.695 ops/s
# Warmup Iteration  13: 573403.385 ops/s
# Warmup Iteration  14: 576701.209 ops/s
# Warmup Iteration  15: 572690.847 ops/s
# Warmup Iteration  16: 582878.933 ops/s
# Warmup Iteration  17: 566236.052 ops/s
# Warmup Iteration  18: 597847.671 ops/s
# Warmup Iteration  19: 583635.158 ops/s
# Warmup Iteration  20: 578195.268 ops/s
# Warmup Iteration  21: 577117.581 ops/s
# Warmup Iteration  22: 576975.374 ops/s
# Warmup Iteration  23: 571435.795 ops/s
# Warmup Iteration  24: 586556.557 ops/s
# Warmup Iteration  25: 586986.641 ops/s
# Warmup Iteration  26: 582103.120 ops/s
# Warmup Iteration  27: 575001.307 ops/s
# Warmup Iteration  28: 584195.710 ops/s
# Warmup Iteration  29: 573326.212 ops/s
# Warmup Iteration  30: 572844.292 ops/s
Iteration   1: 597914.032 ops/s
Iteration   2: 591168.760 ops/s
Iteration   3: 575856.966 ops/s
Iteration   4: 575911.527 ops/s
Iteration   5: 574696.398 ops/s
Iteration   6: 581628.865 ops/s
Iteration   7: 569512.874 ops/s
Iteration   8: 572755.733 ops/s
Iteration   9: 579651.793 ops/s
Iteration  10: 571306.066 ops/s
Iteration  11: 597895.892 ops/s
Iteration  12: 600878.991 ops/s
Iteration  13: 589223.435 ops/s
Iteration  14: 577356.252 ops/s
Iteration  15: 587557.213 ops/s
Iteration  16: 585950.919 ops/s
Iteration  17: 576520.579 ops/s
Iteration  18: 584984.461 ops/s
Iteration  19: 575380.056 ops/s
Iteration  20: 587617.072 ops/s
Iteration  21: 575756.497 ops/s
Iteration  22: 580001.441 ops/s
Iteration  23: 579195.376 ops/s
Iteration  24: 591944.162 ops/s
Iteration  25: 581004.669 ops/s
Iteration  26: 572826.622 ops/s
Iteration  27: 570954.009 ops/s
Iteration  28: 575267.992 ops/s
Iteration  29: 574436.281 ops/s
Iteration  30: 597666.686 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detectWithIfNoneBlock":
  581760.721 ±(99.9%) 6044.478 ops/s [Average]
  (min, avg, max) = (569512.874, 581760.721, 600878.991), stdev = 9047.091
  CI (99.9%): [575716.243, 587805.198] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_detectWithIfNoneBlock  thrpt   30  581760.721 ± 6044.478  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detectWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detectWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 589184.326 ops/s
# Warmup Iteration   2: 758576.840 ops/s
# Warmup Iteration   3: 976984.680 ops/s
# Warmup Iteration   4: 968330.566 ops/s
# Warmup Iteration   5: 994804.468 ops/s
# Warmup Iteration   6: 996853.998 ops/s
# Warmup Iteration   7: 945324.607 ops/s
# Warmup Iteration   8: 856581.173 ops/s
# Warmup Iteration   9: 909813.080 ops/s
# Warmup Iteration  10: 967265.005 ops/s
# Warmup Iteration  11: 978389.972 ops/s
# Warmup Iteration  12: 978468.091 ops/s
# Warmup Iteration  13: 970543.478 ops/s
# Warmup Iteration  14: 947147.282 ops/s
# Warmup Iteration  15: 976490.839 ops/s
# Warmup Iteration  16: 952252.034 ops/s
# Warmup Iteration  17: 972079.149 ops/s
# Warmup Iteration  18: 951767.439 ops/s
# Warmup Iteration  19: 951517.010 ops/s
# Warmup Iteration  20: 952167.478 ops/s
# Warmup Iteration  21: 957651.807 ops/s
# Warmup Iteration  22: 992815.363 ops/s
# Warmup Iteration  23: 944530.221 ops/s
# Warmup Iteration  24: 965080.055 ops/s
# Warmup Iteration  25: 991740.015 ops/s
# Warmup Iteration  26: 1002644.115 ops/s
# Warmup Iteration  27: 990689.388 ops/s
# Warmup Iteration  28: 967679.144 ops/s
# Warmup Iteration  29: 946419.045 ops/s
# Warmup Iteration  30: 967056.726 ops/s
Iteration   1: 1005590.788 ops/s
Iteration   2: 1006813.551 ops/s
Iteration   3: 974256.581 ops/s
Iteration   4: 994512.502 ops/s
Iteration   5: 977368.306 ops/s
Iteration   6: 987132.960 ops/s
Iteration   7: 974666.508 ops/s
Iteration   8: 949835.738 ops/s
Iteration   9: 955423.210 ops/s
Iteration  10: 947155.254 ops/s
Iteration  11: 941915.496 ops/s
Iteration  12: 958893.491 ops/s
Iteration  13: 973523.384 ops/s
Iteration  14: 976701.477 ops/s
Iteration  15: 966979.440 ops/s
Iteration  16: 958036.162 ops/s
Iteration  17: 956243.187 ops/s
Iteration  18: 944673.515 ops/s
Iteration  19: 960119.054 ops/s
Iteration  20: 979501.753 ops/s
Iteration  21: 972061.279 ops/s
Iteration  22: 961654.631 ops/s
Iteration  23: 991481.062 ops/s
Iteration  24: 953606.680 ops/s
Iteration  25: 974286.752 ops/s
Iteration  26: 1006816.552 ops/s
Iteration  27: 980582.824 ops/s
Iteration  28: 955490.944 ops/s
Iteration  29: 957895.560 ops/s
Iteration  30: 955881.302 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detectWithOccurrences":
  969969.998 ±(99.9%) 12242.945 ops/s [Average]
  (min, avg, max) = (941915.496, 969969.998, 1006816.552), stdev = 18324.665
  CI (99.9%): [957727.053, 982212.943] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_detectWithOccurrences  thrpt   30  969969.998 ± 12242.945  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 265445.976 ops/s
# Warmup Iteration   2: 328112.115 ops/s
# Warmup Iteration   3: 416159.533 ops/s
# Warmup Iteration   4: 418792.090 ops/s
# Warmup Iteration   5: 409442.627 ops/s
# Warmup Iteration   6: 417181.319 ops/s
# Warmup Iteration   7: 417845.613 ops/s
# Warmup Iteration   8: 415587.202 ops/s
# Warmup Iteration   9: 429248.619 ops/s
# Warmup Iteration  10: 357246.990 ops/s
# Warmup Iteration  11: 415042.642 ops/s
# Warmup Iteration  12: 418421.155 ops/s
# Warmup Iteration  13: 424634.882 ops/s
# Warmup Iteration  14: 417576.040 ops/s
# Warmup Iteration  15: 412954.887 ops/s
# Warmup Iteration  16: 414316.686 ops/s
# Warmup Iteration  17: 428936.775 ops/s
# Warmup Iteration  18: 434950.123 ops/s
# Warmup Iteration  19: 429549.261 ops/s
# Warmup Iteration  20: 425552.617 ops/s
# Warmup Iteration  21: 447447.613 ops/s
# Warmup Iteration  22: 430178.808 ops/s
# Warmup Iteration  23: 431838.220 ops/s
# Warmup Iteration  24: 427396.451 ops/s
# Warmup Iteration  25: 434080.355 ops/s
# Warmup Iteration  26: 434241.620 ops/s
# Warmup Iteration  27: 426628.889 ops/s
# Warmup Iteration  28: 436428.705 ops/s
# Warmup Iteration  29: 440144.086 ops/s
# Warmup Iteration  30: 436277.399 ops/s
Iteration   1: 439932.698 ops/s
Iteration   2: 436382.715 ops/s
Iteration   3: 435077.222 ops/s
Iteration   4: 432341.625 ops/s
Iteration   5: 446958.530 ops/s
Iteration   6: 450427.418 ops/s
Iteration   7: 445609.921 ops/s
Iteration   8: 425213.075 ops/s
Iteration   9: 422490.623 ops/s
Iteration  10: 425406.410 ops/s
Iteration  11: 426558.282 ops/s
Iteration  12: 427521.182 ops/s
Iteration  13: 426502.423 ops/s
Iteration  14: 425174.080 ops/s
Iteration  15: 421377.820 ops/s
Iteration  16: 422014.790 ops/s
Iteration  17: 426235.551 ops/s
Iteration  18: 429486.717 ops/s
Iteration  19: 428032.582 ops/s
Iteration  20: 416894.735 ops/s
Iteration  21: 424039.992 ops/s
Iteration  22: 426117.052 ops/s
Iteration  23: 430217.488 ops/s
Iteration  24: 428338.076 ops/s
Iteration  25: 431830.693 ops/s
Iteration  26: 421281.010 ops/s
Iteration  27: 427274.791 ops/s
Iteration  28: 424346.219 ops/s
Iteration  29: 430701.693 ops/s
Iteration  30: 421528.122 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_detectWithOptional":
  429177.118 ±(99.9%) 5300.661 ops/s [Average]
  (min, avg, max) = (416894.735, 429177.118, 450427.418), stdev = 7933.780
  CI (99.9%): [423876.457, 434477.779] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_detectWithOptional  thrpt   30  429177.118 ± 5300.661  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 617337.669 ops/s
# Warmup Iteration   2: 1173054.112 ops/s
# Warmup Iteration   3: 1325718.915 ops/s
# Warmup Iteration   4: 1292190.193 ops/s
# Warmup Iteration   5: 1098610.337 ops/s
# Warmup Iteration   6: 1234138.088 ops/s
# Warmup Iteration   7: 1281603.695 ops/s
# Warmup Iteration   8: 1279503.598 ops/s
# Warmup Iteration   9: 1301239.289 ops/s
# Warmup Iteration  10: 1296038.013 ops/s
# Warmup Iteration  11: 1335459.994 ops/s
# Warmup Iteration  12: 1325529.788 ops/s
# Warmup Iteration  13: 1295794.693 ops/s
# Warmup Iteration  14: 1278020.356 ops/s
# Warmup Iteration  15: 1308567.739 ops/s
# Warmup Iteration  16: 1313938.718 ops/s
# Warmup Iteration  17: 1348086.469 ops/s
# Warmup Iteration  18: 1357409.288 ops/s
# Warmup Iteration  19: 1317635.049 ops/s
# Warmup Iteration  20: 1315302.369 ops/s
# Warmup Iteration  21: 1294260.375 ops/s
# Warmup Iteration  22: 1280290.678 ops/s
# Warmup Iteration  23: 1285506.954 ops/s
# Warmup Iteration  24: 1357675.896 ops/s
# Warmup Iteration  25: 1294050.537 ops/s
# Warmup Iteration  26: 1297286.805 ops/s
# Warmup Iteration  27: 1314465.096 ops/s
# Warmup Iteration  28: 1296232.735 ops/s
# Warmup Iteration  29: 1302548.010 ops/s
# Warmup Iteration  30: 1284479.688 ops/s
Iteration   1: 1271556.781 ops/s
Iteration   2: 1306337.823 ops/s
Iteration   3: 1310902.442 ops/s
Iteration   4: 1287422.377 ops/s
Iteration   5: 1330322.060 ops/s
Iteration   6: 1315522.727 ops/s
Iteration   7: 1310525.156 ops/s
Iteration   8: 1312121.734 ops/s
Iteration   9: 1336289.075 ops/s
Iteration  10: 1313397.195 ops/s
Iteration  11: 1282306.866 ops/s
Iteration  12: 1281874.434 ops/s
Iteration  13: 1310067.728 ops/s
Iteration  14: 1279366.798 ops/s
Iteration  15: 1280361.608 ops/s
Iteration  16: 1302952.608 ops/s
Iteration  17: 1305259.790 ops/s
Iteration  18: 1292354.390 ops/s
Iteration  19: 1314380.299 ops/s
Iteration  20: 1286544.634 ops/s
Iteration  21: 1281004.872 ops/s
Iteration  22: 1294864.433 ops/s
Iteration  23: 1287026.381 ops/s
Iteration  24: 1285586.212 ops/s
Iteration  25: 1267943.302 ops/s
Iteration  26: 1274564.600 ops/s
Iteration  27: 1297558.026 ops/s
Iteration  28: 1280398.666 ops/s
Iteration  29: 1284861.800 ops/s
Iteration  30: 1284884.977 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_distinct":
  1295618.660 ±(99.9%) 11630.111 ops/s [Average]
  (min, avg, max) = (1267943.302, 1295618.660, 1336289.075), stdev = 17407.403
  CI (99.9%): [1283988.549, 1307248.771] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_distinct  thrpt   30  1295618.660 ± 11630.111  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_distinctView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_distinctView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 522026.107 ops/s
# Warmup Iteration   2: 814198.615 ops/s
# Warmup Iteration   3: 962435.271 ops/s
# Warmup Iteration   4: 963992.407 ops/s
# Warmup Iteration   5: 990702.165 ops/s
# Warmup Iteration   6: 955950.635 ops/s
# Warmup Iteration   7: 804367.893 ops/s
# Warmup Iteration   8: 1010428.814 ops/s
# Warmup Iteration   9: 1028715.725 ops/s
# Warmup Iteration  10: 994394.915 ops/s
# Warmup Iteration  11: 990055.891 ops/s
# Warmup Iteration  12: 989272.092 ops/s
# Warmup Iteration  13: 970424.740 ops/s
# Warmup Iteration  14: 961383.804 ops/s
# Warmup Iteration  15: 964103.220 ops/s
# Warmup Iteration  16: 968729.588 ops/s
# Warmup Iteration  17: 979323.263 ops/s
# Warmup Iteration  18: 966929.652 ops/s
# Warmup Iteration  19: 981385.263 ops/s
# Warmup Iteration  20: 961617.062 ops/s
# Warmup Iteration  21: 955829.564 ops/s
# Warmup Iteration  22: 958817.848 ops/s
# Warmup Iteration  23: 965168.803 ops/s
# Warmup Iteration  24: 979874.403 ops/s
# Warmup Iteration  25: 984831.133 ops/s
# Warmup Iteration  26: 994672.947 ops/s
# Warmup Iteration  27: 976002.855 ops/s
# Warmup Iteration  28: 1018541.983 ops/s
# Warmup Iteration  29: 990261.312 ops/s
# Warmup Iteration  30: 971358.956 ops/s
Iteration   1: 982006.714 ops/s
Iteration   2: 992527.669 ops/s
Iteration   3: 998095.306 ops/s
Iteration   4: 1017076.442 ops/s
Iteration   5: 971644.128 ops/s
Iteration   6: 972220.080 ops/s
Iteration   7: 988589.916 ops/s
Iteration   8: 986713.771 ops/s
Iteration   9: 970360.540 ops/s
Iteration  10: 975625.980 ops/s
Iteration  11: 962509.626 ops/s
Iteration  12: 993939.549 ops/s
Iteration  13: 978111.529 ops/s
Iteration  14: 980500.032 ops/s
Iteration  15: 996279.069 ops/s
Iteration  16: 969031.773 ops/s
Iteration  17: 998955.013 ops/s
Iteration  18: 966719.065 ops/s
Iteration  19: 972805.034 ops/s
Iteration  20: 977290.848 ops/s
Iteration  21: 975757.983 ops/s
Iteration  22: 1016592.106 ops/s
Iteration  23: 989665.121 ops/s
Iteration  24: 1008389.141 ops/s
Iteration  25: 978083.202 ops/s
Iteration  26: 976968.468 ops/s
Iteration  27: 973473.997 ops/s
Iteration  28: 978512.955 ops/s
Iteration  29: 1027071.196 ops/s
Iteration  30: 1026894.843 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_distinctView":
  986747.037 ±(99.9%) 11816.616 ops/s [Average]
  (min, avg, max) = (962509.626, 986747.037, 1027071.196), stdev = 17686.556
  CI (99.9%): [974930.421, 998563.653] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_distinctView  thrpt   30  986747.037 ± 11816.616  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 272931.371 ops/s
# Warmup Iteration   2: 480286.556 ops/s
# Warmup Iteration   3: 574613.737 ops/s
# Warmup Iteration   4: 564056.413 ops/s
# Warmup Iteration   5: 571912.663 ops/s
# Warmup Iteration   6: 457032.084 ops/s
# Warmup Iteration   7: 552462.239 ops/s
# Warmup Iteration   8: 567033.587 ops/s
# Warmup Iteration   9: 541070.966 ops/s
# Warmup Iteration  10: 555224.971 ops/s
# Warmup Iteration  11: 571098.974 ops/s
# Warmup Iteration  12: 552789.163 ops/s
# Warmup Iteration  13: 554998.907 ops/s
# Warmup Iteration  14: 550926.111 ops/s
# Warmup Iteration  15: 556218.556 ops/s
# Warmup Iteration  16: 553975.501 ops/s
# Warmup Iteration  17: 548017.073 ops/s
# Warmup Iteration  18: 555745.523 ops/s
# Warmup Iteration  19: 572153.787 ops/s
# Warmup Iteration  20: 568860.518 ops/s
# Warmup Iteration  21: 576325.418 ops/s
# Warmup Iteration  22: 574546.915 ops/s
# Warmup Iteration  23: 575131.726 ops/s
# Warmup Iteration  24: 578271.154 ops/s
# Warmup Iteration  25: 577777.689 ops/s
# Warmup Iteration  26: 576326.040 ops/s
# Warmup Iteration  27: 577877.293 ops/s
# Warmup Iteration  28: 576488.688 ops/s
# Warmup Iteration  29: 578899.787 ops/s
# Warmup Iteration  30: 578085.935 ops/s
Iteration   1: 574390.341 ops/s
Iteration   2: 578380.131 ops/s
Iteration   3: 577990.484 ops/s
Iteration   4: 577480.668 ops/s
Iteration   5: 577212.634 ops/s
Iteration   6: 577179.623 ops/s
Iteration   7: 578737.365 ops/s
Iteration   8: 579019.174 ops/s
Iteration   9: 577574.638 ops/s
Iteration  10: 576948.286 ops/s
Iteration  11: 563282.407 ops/s
Iteration  12: 548932.339 ops/s
Iteration  13: 553998.260 ops/s
Iteration  14: 546066.629 ops/s
Iteration  15: 558460.284 ops/s
Iteration  16: 553713.698 ops/s
Iteration  17: 557210.829 ops/s
Iteration  18: 572158.358 ops/s
Iteration  19: 577830.936 ops/s
Iteration  20: 579109.450 ops/s
Iteration  21: 559451.212 ops/s
Iteration  22: 558078.512 ops/s
Iteration  23: 558560.186 ops/s
Iteration  24: 545584.111 ops/s
Iteration  25: 547029.128 ops/s
Iteration  26: 546641.482 ops/s
Iteration  27: 549778.223 ops/s
Iteration  28: 543226.428 ops/s
Iteration  29: 549121.242 ops/s
Iteration  30: 549410.551 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_drop":
  563085.254 ±(99.9%) 8954.961 ops/s [Average]
  (min, avg, max) = (543226.428, 563085.254, 579109.450), stdev = 13403.365
  CI (99.9%): [554130.292, 572040.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_drop  thrpt   30  563085.254 ± 8954.961  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 158626.667 ops/s
# Warmup Iteration   2: 259844.056 ops/s
# Warmup Iteration   3: 315767.320 ops/s
# Warmup Iteration   4: 321417.652 ops/s
# Warmup Iteration   5: 329484.344 ops/s
# Warmup Iteration   6: 322639.455 ops/s
# Warmup Iteration   7: 271787.644 ops/s
# Warmup Iteration   8: 327348.861 ops/s
# Warmup Iteration   9: 323664.526 ops/s
# Warmup Iteration  10: 324294.368 ops/s
# Warmup Iteration  11: 327980.928 ops/s
# Warmup Iteration  12: 314758.174 ops/s
# Warmup Iteration  13: 321554.951 ops/s
# Warmup Iteration  14: 317910.156 ops/s
# Warmup Iteration  15: 312204.744 ops/s
# Warmup Iteration  16: 322095.569 ops/s
# Warmup Iteration  17: 332687.154 ops/s
# Warmup Iteration  18: 323625.958 ops/s
# Warmup Iteration  19: 319739.020 ops/s
# Warmup Iteration  20: 316209.543 ops/s
# Warmup Iteration  21: 333377.263 ops/s
# Warmup Iteration  22: 329651.253 ops/s
# Warmup Iteration  23: 321289.720 ops/s
# Warmup Iteration  24: 319956.120 ops/s
# Warmup Iteration  25: 328950.382 ops/s
# Warmup Iteration  26: 329756.434 ops/s
# Warmup Iteration  27: 330222.859 ops/s
# Warmup Iteration  28: 324282.167 ops/s
# Warmup Iteration  29: 327246.797 ops/s
# Warmup Iteration  30: 323752.983 ops/s
Iteration   1: 319519.141 ops/s
Iteration   2: 330514.838 ops/s
Iteration   3: 319182.774 ops/s
Iteration   4: 317260.880 ops/s
Iteration   5: 311453.311 ops/s
Iteration   6: 320821.832 ops/s
Iteration   7: 332385.198 ops/s
Iteration   8: 321493.625 ops/s
Iteration   9: 321518.794 ops/s
Iteration  10: 329549.742 ops/s
Iteration  11: 314520.216 ops/s
Iteration  12: 320999.264 ops/s
Iteration  13: 329792.308 ops/s
Iteration  14: 324579.075 ops/s
Iteration  15: 314536.082 ops/s
Iteration  16: 319897.666 ops/s
Iteration  17: 307743.553 ops/s
Iteration  18: 314064.381 ops/s
Iteration  19: 315013.666 ops/s
Iteration  20: 312970.366 ops/s
Iteration  21: 316684.670 ops/s
Iteration  22: 313860.576 ops/s
Iteration  23: 316051.095 ops/s
Iteration  24: 322289.003 ops/s
Iteration  25: 333113.308 ops/s
Iteration  26: 314272.176 ops/s
Iteration  27: 315317.716 ops/s
Iteration  28: 316312.344 ops/s
Iteration  29: 321815.419 ops/s
Iteration  30: 314444.982 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_dropWhile":
  319399.267 ±(99.9%) 4319.950 ops/s [Average]
  (min, avg, max) = (307743.553, 319399.267, 333113.308), stdev = 6465.899
  CI (99.9%): [315079.316, 323719.217] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_dropWhile  thrpt   30  319399.267 ± 4319.950  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 552618.124 ops/s
# Warmup Iteration   2: 658200.804 ops/s
# Warmup Iteration   3: 835096.464 ops/s
# Warmup Iteration   4: 834075.408 ops/s
# Warmup Iteration   5: 816275.972 ops/s
# Warmup Iteration   6: 862976.705 ops/s
# Warmup Iteration   7: 833773.144 ops/s
# Warmup Iteration   8: 874509.591 ops/s
# Warmup Iteration   9: 831236.034 ops/s
# Warmup Iteration  10: 724358.512 ops/s
# Warmup Iteration  11: 779623.985 ops/s
# Warmup Iteration  12: 829729.622 ops/s
# Warmup Iteration  13: 831572.007 ops/s
# Warmup Iteration  14: 834879.449 ops/s
# Warmup Iteration  15: 826055.077 ops/s
# Warmup Iteration  16: 848642.461 ops/s
# Warmup Iteration  17: 872397.453 ops/s
# Warmup Iteration  18: 914361.884 ops/s
# Warmup Iteration  19: 896349.292 ops/s
# Warmup Iteration  20: 873085.689 ops/s
# Warmup Iteration  21: 886594.372 ops/s
# Warmup Iteration  22: 909501.627 ops/s
# Warmup Iteration  23: 902992.860 ops/s
# Warmup Iteration  24: 921058.758 ops/s
# Warmup Iteration  25: 930966.817 ops/s
# Warmup Iteration  26: 930361.073 ops/s
# Warmup Iteration  27: 930223.349 ops/s
# Warmup Iteration  28: 929826.036 ops/s
# Warmup Iteration  29: 928565.145 ops/s
# Warmup Iteration  30: 930429.376 ops/s
Iteration   1: 933158.328 ops/s
Iteration   2: 931111.304 ops/s
Iteration   3: 922820.183 ops/s
Iteration   4: 912877.708 ops/s
Iteration   5: 932247.721 ops/s
Iteration   6: 923034.492 ops/s
Iteration   7: 892147.935 ops/s
Iteration   8: 908088.024 ops/s
Iteration   9: 896026.020 ops/s
Iteration  10: 892470.502 ops/s
Iteration  11: 889950.853 ops/s
Iteration  12: 880109.667 ops/s
Iteration  13: 880200.601 ops/s
Iteration  14: 882081.950 ops/s
Iteration  15: 878682.114 ops/s
Iteration  16: 903440.164 ops/s
Iteration  17: 914331.760 ops/s
Iteration  18: 905124.647 ops/s
Iteration  19: 894275.062 ops/s
Iteration  20: 933705.730 ops/s
Iteration  21: 906118.328 ops/s
Iteration  22: 881386.381 ops/s
Iteration  23: 872680.086 ops/s
Iteration  24: 909620.067 ops/s
Iteration  25: 881257.395 ops/s
Iteration  26: 872936.572 ops/s
Iteration  27: 873256.586 ops/s
Iteration  28: 883883.219 ops/s
Iteration  29: 884835.664 ops/s
Iteration  30: 908553.618 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_drop_throws":
  899347.089 ±(99.9%) 13113.641 ops/s [Average]
  (min, avg, max) = (872680.086, 899347.089, 933705.730), stdev = 19627.882
  CI (99.9%): [886233.448, 912460.731] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_drop_throws  thrpt   30  899347.089 ± 13113.641  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1690542.410 ops/s
# Warmup Iteration   2: 2804089.939 ops/s
# Warmup Iteration   3: 3235960.964 ops/s
# Warmup Iteration   4: 3188637.992 ops/s
# Warmup Iteration   5: 3197390.385 ops/s
# Warmup Iteration   6: 2703598.447 ops/s
# Warmup Iteration   7: 3192676.437 ops/s
# Warmup Iteration   8: 3218659.431 ops/s
# Warmup Iteration   9: 3169179.389 ops/s
# Warmup Iteration  10: 3171792.528 ops/s
# Warmup Iteration  11: 3146718.590 ops/s
# Warmup Iteration  12: 3159574.119 ops/s
# Warmup Iteration  13: 3172229.394 ops/s
# Warmup Iteration  14: 3184097.853 ops/s
# Warmup Iteration  15: 3167752.208 ops/s
# Warmup Iteration  16: 3293847.977 ops/s
# Warmup Iteration  17: 3253827.383 ops/s
# Warmup Iteration  18: 3255113.300 ops/s
# Warmup Iteration  19: 3330493.560 ops/s
# Warmup Iteration  20: 3260375.770 ops/s
# Warmup Iteration  21: 3285573.879 ops/s
# Warmup Iteration  22: 3251021.726 ops/s
# Warmup Iteration  23: 3284724.218 ops/s
# Warmup Iteration  24: 3162176.790 ops/s
# Warmup Iteration  25: 3204350.071 ops/s
# Warmup Iteration  26: 3310793.442 ops/s
# Warmup Iteration  27: 3356532.840 ops/s
# Warmup Iteration  28: 3286197.192 ops/s
# Warmup Iteration  29: 3160760.508 ops/s
# Warmup Iteration  30: 3204670.334 ops/s
Iteration   1: 3194635.223 ops/s
Iteration   2: 3322518.870 ops/s
Iteration   3: 3363886.051 ops/s
Iteration   4: 3313497.979 ops/s
Iteration   5: 3194231.478 ops/s
Iteration   6: 3200937.661 ops/s
Iteration   7: 3242018.904 ops/s
Iteration   8: 3291892.027 ops/s
Iteration   9: 3305311.329 ops/s
Iteration  10: 3223955.537 ops/s
Iteration  11: 3222418.299 ops/s
Iteration  12: 3174831.795 ops/s
Iteration  13: 3179365.979 ops/s
Iteration  14: 3144755.026 ops/s
Iteration  15: 3277542.838 ops/s
Iteration  16: 3235695.673 ops/s
Iteration  17: 3164329.424 ops/s
Iteration  18: 3209052.148 ops/s
Iteration  19: 3139254.957 ops/s
Iteration  20: 3169261.486 ops/s
Iteration  21: 3157940.872 ops/s
Iteration  22: 3223532.523 ops/s
Iteration  23: 3168898.215 ops/s
Iteration  24: 3220485.452 ops/s
Iteration  25: 3208790.741 ops/s
Iteration  26: 3234032.927 ops/s
Iteration  27: 3222853.365 ops/s
Iteration  28: 3224846.966 ops/s
Iteration  29: 3281712.950 ops/s
Iteration  30: 3211237.195 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_empty":
  3224124.130 ±(99.9%) 37221.141 ops/s [Average]
  (min, avg, max) = (3139254.957, 3224124.130, 3363886.051), stdev = 55710.856
  CI (99.9%): [3186902.988, 3261345.271] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_empty  thrpt   30  3224124.130 ± 37221.141  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8272.603 ops/s
# Warmup Iteration   2: 11772.077 ops/s
# Warmup Iteration   3: 16011.208 ops/s
# Warmup Iteration   4: 17392.582 ops/s
# Warmup Iteration   5: 17072.815 ops/s
# Warmup Iteration   6: 17418.471 ops/s
# Warmup Iteration   7: 17383.225 ops/s
# Warmup Iteration   8: 18083.965 ops/s
# Warmup Iteration   9: 17636.416 ops/s
# Warmup Iteration  10: 17930.869 ops/s
# Warmup Iteration  11: 14790.122 ops/s
# Warmup Iteration  12: 17544.524 ops/s
# Warmup Iteration  13: 17497.407 ops/s
# Warmup Iteration  14: 17181.954 ops/s
# Warmup Iteration  15: 17124.226 ops/s
# Warmup Iteration  16: 17609.858 ops/s
# Warmup Iteration  17: 17287.805 ops/s
# Warmup Iteration  18: 17098.876 ops/s
# Warmup Iteration  19: 17540.102 ops/s
# Warmup Iteration  20: 17199.150 ops/s
# Warmup Iteration  21: 17271.535 ops/s
# Warmup Iteration  22: 17148.750 ops/s
# Warmup Iteration  23: 17551.114 ops/s
# Warmup Iteration  24: 17291.668 ops/s
# Warmup Iteration  25: 17309.466 ops/s
# Warmup Iteration  26: 17472.910 ops/s
# Warmup Iteration  27: 17441.470 ops/s
# Warmup Iteration  28: 17340.998 ops/s
# Warmup Iteration  29: 17129.632 ops/s
# Warmup Iteration  30: 17141.983 ops/s
Iteration   1: 17281.718 ops/s
Iteration   2: 17931.328 ops/s
Iteration   3: 17278.545 ops/s
Iteration   4: 17319.420 ops/s
Iteration   5: 17049.407 ops/s
Iteration   6: 17328.933 ops/s
Iteration   7: 17204.011 ops/s
Iteration   8: 17131.885 ops/s
Iteration   9: 17290.262 ops/s
Iteration  10: 17158.048 ops/s
Iteration  11: 17692.451 ops/s
Iteration  12: 18102.543 ops/s
Iteration  13: 17195.264 ops/s
Iteration  14: 17246.436 ops/s
Iteration  15: 17286.806 ops/s
Iteration  16: 17275.184 ops/s
Iteration  17: 17314.128 ops/s
Iteration  18: 17428.592 ops/s
Iteration  19: 17271.129 ops/s
Iteration  20: 18234.791 ops/s
Iteration  21: 17490.224 ops/s
Iteration  22: 17373.401 ops/s
Iteration  23: 18204.237 ops/s
Iteration  24: 17727.779 ops/s
Iteration  25: 17423.559 ops/s
Iteration  26: 17558.206 ops/s
Iteration  27: 17051.958 ops/s
Iteration  28: 16883.002 ops/s
Iteration  29: 17084.459 ops/s
Iteration  30: 17285.849 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_equalsAndHashCode":
  17403.452 ±(99.9%) 225.730 ops/s [Average]
  (min, avg, max) = (16883.002, 17403.452, 18234.791), stdev = 337.862
  CI (99.9%): [17177.722, 17629.182] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt      Score     Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  17403.452 ± 225.730  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 297028.361 ops/s
# Warmup Iteration   2: 650454.336 ops/s
# Warmup Iteration   3: 719598.176 ops/s
# Warmup Iteration   4: 729256.936 ops/s
# Warmup Iteration   5: 644510.879 ops/s
# Warmup Iteration   6: 720080.420 ops/s
# Warmup Iteration   7: 741069.631 ops/s
# Warmup Iteration   8: 739165.230 ops/s
# Warmup Iteration   9: 741931.949 ops/s
# Warmup Iteration  10: 722010.885 ops/s
# Warmup Iteration  11: 752147.532 ops/s
# Warmup Iteration  12: 727680.059 ops/s
# Warmup Iteration  13: 725011.311 ops/s
# Warmup Iteration  14: 722827.486 ops/s
# Warmup Iteration  15: 720420.715 ops/s
# Warmup Iteration  16: 737524.773 ops/s
# Warmup Iteration  17: 724341.798 ops/s
# Warmup Iteration  18: 720748.027 ops/s
# Warmup Iteration  19: 719841.332 ops/s
# Warmup Iteration  20: 726968.175 ops/s
# Warmup Iteration  21: 723347.619 ops/s
# Warmup Iteration  22: 724640.896 ops/s
# Warmup Iteration  23: 731411.219 ops/s
# Warmup Iteration  24: 756055.134 ops/s
# Warmup Iteration  25: 756191.675 ops/s
# Warmup Iteration  26: 725713.301 ops/s
# Warmup Iteration  27: 735850.753 ops/s
# Warmup Iteration  28: 763360.319 ops/s
# Warmup Iteration  29: 720393.115 ops/s
# Warmup Iteration  30: 723005.722 ops/s
Iteration   1: 741755.508 ops/s
Iteration   2: 739992.826 ops/s
Iteration   3: 747606.150 ops/s
Iteration   4: 726898.772 ops/s
Iteration   5: 722869.009 ops/s
Iteration   6: 720167.228 ops/s
Iteration   7: 726991.710 ops/s
Iteration   8: 720045.638 ops/s
Iteration   9: 731568.850 ops/s
Iteration  10: 720785.264 ops/s
Iteration  11: 720289.977 ops/s
Iteration  12: 741730.286 ops/s
Iteration  13: 761500.308 ops/s
Iteration  14: 730485.524 ops/s
Iteration  15: 724768.643 ops/s
Iteration  16: 729253.712 ops/s
Iteration  17: 737491.873 ops/s
Iteration  18: 704624.646 ops/s
Iteration  19: 712488.951 ops/s
Iteration  20: 729030.910 ops/s
Iteration  21: 723914.687 ops/s
Iteration  22: 721582.537 ops/s
Iteration  23: 730734.164 ops/s
Iteration  24: 723795.854 ops/s
Iteration  25: 728961.874 ops/s
Iteration  26: 724271.636 ops/s
Iteration  27: 723817.881 ops/s
Iteration  28: 717226.556 ops/s
Iteration  29: 715845.410 ops/s
Iteration  30: 726321.146 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollect":
  727560.584 ±(99.9%) 7421.318 ops/s [Average]
  (min, avg, max) = (704624.646, 727560.584, 761500.308), stdev = 11107.881
  CI (99.9%): [720139.266, 734981.902] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollect  thrpt   30  727560.584 ± 7421.318  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 948144.175 ops/s
# Warmup Iteration   2: 2079287.258 ops/s
# Warmup Iteration   3: 2258533.400 ops/s
# Warmup Iteration   4: 2206605.669 ops/s
# Warmup Iteration   5: 1799818.047 ops/s
# Warmup Iteration   6: 2192370.386 ops/s
# Warmup Iteration   7: 2237923.414 ops/s
# Warmup Iteration   8: 2220512.797 ops/s
# Warmup Iteration   9: 2281133.690 ops/s
# Warmup Iteration  10: 2299009.263 ops/s
# Warmup Iteration  11: 2195530.778 ops/s
# Warmup Iteration  12: 2260085.147 ops/s
# Warmup Iteration  13: 2239224.938 ops/s
# Warmup Iteration  14: 2289807.266 ops/s
# Warmup Iteration  15: 2243059.725 ops/s
# Warmup Iteration  16: 2211791.683 ops/s
# Warmup Iteration  17: 2227797.926 ops/s
# Warmup Iteration  18: 2228748.573 ops/s
# Warmup Iteration  19: 2261877.721 ops/s
# Warmup Iteration  20: 2289833.882 ops/s
# Warmup Iteration  21: 2278045.193 ops/s
# Warmup Iteration  22: 2280739.837 ops/s
# Warmup Iteration  23: 2292811.680 ops/s
# Warmup Iteration  24: 2221467.430 ops/s
# Warmup Iteration  25: 2229957.017 ops/s
# Warmup Iteration  26: 2256453.946 ops/s
# Warmup Iteration  27: 2248241.167 ops/s
# Warmup Iteration  28: 2268436.529 ops/s
# Warmup Iteration  29: 2314833.348 ops/s
# Warmup Iteration  30: 2329398.784 ops/s
Iteration   1: 2297982.870 ops/s
Iteration   2: 2226900.668 ops/s
Iteration   3: 2230757.433 ops/s
Iteration   4: 2199359.927 ops/s
Iteration   5: 2196865.073 ops/s
Iteration   6: 2212331.244 ops/s
Iteration   7: 2230496.938 ops/s
Iteration   8: 2232756.773 ops/s
Iteration   9: 2281545.813 ops/s
Iteration  10: 2226090.810 ops/s
Iteration  11: 2231592.851 ops/s
Iteration  12: 2245041.015 ops/s
Iteration  13: 2226445.037 ops/s
Iteration  14: 2265364.835 ops/s
Iteration  15: 2232393.626 ops/s
Iteration  16: 2297377.354 ops/s
Iteration  17: 2331456.927 ops/s
Iteration  18: 2331094.054 ops/s
Iteration  19: 2332036.634 ops/s
Iteration  20: 2300966.463 ops/s
Iteration  21: 2340357.679 ops/s
Iteration  22: 2279165.680 ops/s
Iteration  23: 2236729.589 ops/s
Iteration  24: 2198088.790 ops/s
Iteration  25: 2209992.772 ops/s
Iteration  26: 2212921.047 ops/s
Iteration  27: 2249486.530 ops/s
Iteration  28: 2222946.263 ops/s
Iteration  29: 2263342.238 ops/s
Iteration  30: 2277670.716 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectBoolean":
  2253985.255 ±(99.9%) 28980.956 ops/s [Average]
  (min, avg, max) = (2196865.073, 2253985.255, 2340357.679), stdev = 43377.334
  CI (99.9%): [2225004.299, 2282966.211] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectBoolean  thrpt   30  2253985.255 ± 28980.956  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 572182.591 ops/s
# Warmup Iteration   2: 867773.651 ops/s
# Warmup Iteration   3: 1090588.888 ops/s
# Warmup Iteration   4: 1106159.015 ops/s
# Warmup Iteration   5: 1083048.136 ops/s
# Warmup Iteration   6: 1101170.124 ops/s
# Warmup Iteration   7: 905064.212 ops/s
# Warmup Iteration   8: 1064503.789 ops/s
# Warmup Iteration   9: 1053600.274 ops/s
# Warmup Iteration  10: 1070772.279 ops/s
# Warmup Iteration  11: 1098382.573 ops/s
# Warmup Iteration  12: 1093668.308 ops/s
# Warmup Iteration  13: 1094708.855 ops/s
# Warmup Iteration  14: 1069593.691 ops/s
# Warmup Iteration  15: 1059673.152 ops/s
# Warmup Iteration  16: 1077267.467 ops/s
# Warmup Iteration  17: 1062295.529 ops/s
# Warmup Iteration  18: 1057245.760 ops/s
# Warmup Iteration  19: 1071761.252 ops/s
# Warmup Iteration  20: 1090906.918 ops/s
# Warmup Iteration  21: 1119693.970 ops/s
# Warmup Iteration  22: 1052276.192 ops/s
# Warmup Iteration  23: 1064521.286 ops/s
# Warmup Iteration  24: 1054931.205 ops/s
# Warmup Iteration  25: 1103433.563 ops/s
# Warmup Iteration  26: 1069329.740 ops/s
# Warmup Iteration  27: 1113226.699 ops/s
# Warmup Iteration  28: 1062608.661 ops/s
# Warmup Iteration  29: 1092568.989 ops/s
# Warmup Iteration  30: 1101273.505 ops/s
Iteration   1: 1067851.826 ops/s
Iteration   2: 1108444.720 ops/s
Iteration   3: 1079458.190 ops/s
Iteration   4: 1092862.788 ops/s
Iteration   5: 1076265.015 ops/s
Iteration   6: 1079746.514 ops/s
Iteration   7: 1080788.407 ops/s
Iteration   8: 1071409.147 ops/s
Iteration   9: 1072806.380 ops/s
Iteration  10: 1097866.455 ops/s
Iteration  11: 1096268.395 ops/s
Iteration  12: 1078973.319 ops/s
Iteration  13: 1069759.638 ops/s
Iteration  14: 1055918.278 ops/s
Iteration  15: 1053156.743 ops/s
Iteration  16: 1114625.544 ops/s
Iteration  17: 1045189.647 ops/s
Iteration  18: 1060263.153 ops/s
Iteration  19: 1055410.698 ops/s
Iteration  20: 1058381.808 ops/s
Iteration  21: 1091045.191 ops/s
Iteration  22: 1056103.916 ops/s
Iteration  23: 1035780.168 ops/s
Iteration  24: 1062737.752 ops/s
Iteration  25: 1050423.506 ops/s
Iteration  26: 1052393.742 ops/s
Iteration  27: 1055794.660 ops/s
Iteration  28: 1063349.907 ops/s
Iteration  29: 1061723.663 ops/s
Iteration  30: 1073634.364 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectByte":
  1070614.451 ±(99.9%) 12593.340 ops/s [Average]
  (min, avg, max) = (1035780.168, 1070614.451, 1114625.544), stdev = 18849.120
  CI (99.9%): [1058021.111, 1083207.791] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectByte  thrpt   30  1070614.451 ± 12593.340  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 667177.605 ops/s
# Warmup Iteration   2: 1380374.556 ops/s
# Warmup Iteration   3: 1564904.897 ops/s
# Warmup Iteration   4: 1608975.558 ops/s
# Warmup Iteration   5: 1343940.237 ops/s
# Warmup Iteration   6: 1676332.336 ops/s
# Warmup Iteration   7: 1612420.437 ops/s
# Warmup Iteration   8: 1579178.077 ops/s
# Warmup Iteration   9: 1586581.343 ops/s
# Warmup Iteration  10: 1578934.902 ops/s
# Warmup Iteration  11: 1574708.263 ops/s
# Warmup Iteration  12: 1569938.411 ops/s
# Warmup Iteration  13: 1616903.016 ops/s
# Warmup Iteration  14: 1585380.034 ops/s
# Warmup Iteration  15: 1598725.616 ops/s
# Warmup Iteration  16: 1604957.906 ops/s
# Warmup Iteration  17: 1568593.437 ops/s
# Warmup Iteration  18: 1590422.128 ops/s
# Warmup Iteration  19: 1578551.309 ops/s
# Warmup Iteration  20: 1607633.255 ops/s
# Warmup Iteration  21: 1589421.240 ops/s
# Warmup Iteration  22: 1572791.209 ops/s
# Warmup Iteration  23: 1606457.216 ops/s
# Warmup Iteration  24: 1639327.512 ops/s
# Warmup Iteration  25: 1610422.813 ops/s
# Warmup Iteration  26: 1640470.398 ops/s
# Warmup Iteration  27: 1619215.010 ops/s
# Warmup Iteration  28: 1615730.288 ops/s
# Warmup Iteration  29: 1574820.192 ops/s
# Warmup Iteration  30: 1586960.040 ops/s
Iteration   1: 1623832.843 ops/s
Iteration   2: 1586852.865 ops/s
Iteration   3: 1571003.729 ops/s
Iteration   4: 1571172.050 ops/s
Iteration   5: 1603656.676 ops/s
Iteration   6: 1581413.893 ops/s
Iteration   7: 1587608.385 ops/s
Iteration   8: 1592765.990 ops/s
Iteration   9: 1592292.259 ops/s
Iteration  10: 1567715.777 ops/s
Iteration  11: 1586065.242 ops/s
Iteration  12: 1663942.894 ops/s
Iteration  13: 1675544.431 ops/s
Iteration  14: 1626418.705 ops/s
Iteration  15: 1557758.313 ops/s
Iteration  16: 1630315.277 ops/s
Iteration  17: 1677574.480 ops/s
Iteration  18: 1671957.596 ops/s
Iteration  19: 1586130.103 ops/s
Iteration  20: 1639789.189 ops/s
Iteration  21: 1651972.051 ops/s
Iteration  22: 1631554.959 ops/s
Iteration  23: 1558830.725 ops/s
Iteration  24: 1624041.588 ops/s
Iteration  25: 1574772.837 ops/s
Iteration  26: 1586625.561 ops/s
Iteration  27: 1630780.798 ops/s
Iteration  28: 1676711.950 ops/s
Iteration  29: 1664210.211 ops/s
Iteration  30: 1606723.618 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectChar":
  1613334.500 ±(99.9%) 25694.594 ops/s [Average]
  (min, avg, max) = (1557758.313, 1613334.500, 1677574.480), stdev = 38458.461
  CI (99.9%): [1587639.906, 1639029.094] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectChar  thrpt   30  1613334.500 ± 25694.594  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 343152.998 ops/s
# Warmup Iteration   2: 777241.298 ops/s
# Warmup Iteration   3: 842140.195 ops/s
# Warmup Iteration   4: 824481.370 ops/s
# Warmup Iteration   5: 689076.585 ops/s
# Warmup Iteration   6: 833152.181 ops/s
# Warmup Iteration   7: 832940.067 ops/s
# Warmup Iteration   8: 826341.166 ops/s
# Warmup Iteration   9: 823768.868 ops/s
# Warmup Iteration  10: 825752.309 ops/s
# Warmup Iteration  11: 829696.034 ops/s
# Warmup Iteration  12: 846465.922 ops/s
# Warmup Iteration  13: 836383.679 ops/s
# Warmup Iteration  14: 837912.028 ops/s
# Warmup Iteration  15: 843154.185 ops/s
# Warmup Iteration  16: 832752.461 ops/s
# Warmup Iteration  17: 841951.628 ops/s
# Warmup Iteration  18: 834083.125 ops/s
# Warmup Iteration  19: 843128.144 ops/s
# Warmup Iteration  20: 838684.558 ops/s
# Warmup Iteration  21: 837649.420 ops/s
# Warmup Iteration  22: 829657.104 ops/s
# Warmup Iteration  23: 837042.080 ops/s
# Warmup Iteration  24: 846457.602 ops/s
# Warmup Iteration  25: 846229.793 ops/s
# Warmup Iteration  26: 842684.825 ops/s
# Warmup Iteration  27: 879724.770 ops/s
# Warmup Iteration  28: 855288.770 ops/s
# Warmup Iteration  29: 859150.596 ops/s
# Warmup Iteration  30: 842953.465 ops/s
Iteration   1: 837188.360 ops/s
Iteration   2: 836197.977 ops/s
Iteration   3: 840204.824 ops/s
Iteration   4: 856310.250 ops/s
Iteration   5: 821808.358 ops/s
Iteration   6: 834831.772 ops/s
Iteration   7: 828067.230 ops/s
Iteration   8: 833584.501 ops/s
Iteration   9: 853423.874 ops/s
Iteration  10: 877513.863 ops/s
Iteration  11: 838627.888 ops/s
Iteration  12: 864845.971 ops/s
Iteration  13: 877254.102 ops/s
Iteration  14: 879037.970 ops/s
Iteration  15: 849067.917 ops/s
Iteration  16: 832469.274 ops/s
Iteration  17: 837845.144 ops/s
Iteration  18: 822378.139 ops/s
Iteration  19: 822824.707 ops/s
Iteration  20: 844959.522 ops/s
Iteration  21: 843790.354 ops/s
Iteration  22: 828605.064 ops/s
Iteration  23: 865219.938 ops/s
Iteration  24: 863816.158 ops/s
Iteration  25: 824713.860 ops/s
Iteration  26: 835303.626 ops/s
Iteration  27: 826406.570 ops/s
Iteration  28: 830069.104 ops/s
Iteration  29: 837268.724 ops/s
Iteration  30: 881783.582 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectDouble":
  844180.621 ±(99.9%) 12305.292 ops/s [Average]
  (min, avg, max) = (821808.358, 844180.621, 881783.582), stdev = 18417.983
  CI (99.9%): [831875.329, 856485.913] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectDouble  thrpt   30  844180.621 ± 12305.292  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 503982.019 ops/s
# Warmup Iteration   2: 1044546.161 ops/s
# Warmup Iteration   3: 1167101.561 ops/s
# Warmup Iteration   4: 1204281.429 ops/s
# Warmup Iteration   5: 987395.579 ops/s
# Warmup Iteration   6: 1165438.505 ops/s
# Warmup Iteration   7: 1201905.844 ops/s
# Warmup Iteration   8: 1187312.213 ops/s
# Warmup Iteration   9: 1193180.971 ops/s
# Warmup Iteration  10: 1161917.858 ops/s
# Warmup Iteration  11: 1156403.828 ops/s
# Warmup Iteration  12: 1159528.736 ops/s
# Warmup Iteration  13: 1167380.510 ops/s
# Warmup Iteration  14: 1163111.888 ops/s
# Warmup Iteration  15: 1198115.938 ops/s
# Warmup Iteration  16: 1170399.854 ops/s
# Warmup Iteration  17: 1158683.650 ops/s
# Warmup Iteration  18: 1158332.464 ops/s
# Warmup Iteration  19: 1162172.094 ops/s
# Warmup Iteration  20: 1182617.958 ops/s
# Warmup Iteration  21: 1179317.808 ops/s
# Warmup Iteration  22: 1208279.314 ops/s
# Warmup Iteration  23: 1154455.001 ops/s
# Warmup Iteration  24: 1164576.352 ops/s
# Warmup Iteration  25: 1191059.527 ops/s
# Warmup Iteration  26: 1167545.396 ops/s
# Warmup Iteration  27: 1199006.012 ops/s
# Warmup Iteration  28: 1163064.292 ops/s
# Warmup Iteration  29: 1152114.523 ops/s
# Warmup Iteration  30: 1171750.280 ops/s
Iteration   1: 1163108.173 ops/s
Iteration   2: 1162548.951 ops/s
Iteration   3: 1156234.288 ops/s
Iteration   4: 1183954.182 ops/s
Iteration   5: 1210945.779 ops/s
Iteration   6: 1186840.767 ops/s
Iteration   7: 1204197.165 ops/s
Iteration   8: 1187626.989 ops/s
Iteration   9: 1179754.440 ops/s
Iteration  10: 1186874.921 ops/s
Iteration  11: 1167737.483 ops/s
Iteration  12: 1152310.475 ops/s
Iteration  13: 1158240.971 ops/s
Iteration  14: 1191416.226 ops/s
Iteration  15: 1173796.596 ops/s
Iteration  16: 1154873.445 ops/s
Iteration  17: 1157950.754 ops/s
Iteration  18: 1168433.432 ops/s
Iteration  19: 1232040.863 ops/s
Iteration  20: 1236943.409 ops/s
Iteration  21: 1183399.199 ops/s
Iteration  22: 1149251.803 ops/s
Iteration  23: 1156735.662 ops/s
Iteration  24: 1171787.543 ops/s
Iteration  25: 1152523.610 ops/s
Iteration  26: 1160408.675 ops/s
Iteration  27: 1154099.352 ops/s
Iteration  28: 1187292.948 ops/s
Iteration  29: 1206981.546 ops/s
Iteration  30: 1188139.407 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectFloat":
  1177548.302 ±(99.9%) 15530.306 ops/s [Average]
  (min, avg, max) = (1149251.803, 1177548.302, 1236943.409), stdev = 23245.032
  CI (99.9%): [1162017.996, 1193078.608] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectFloat  thrpt   30  1177548.302 ± 15530.306  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 583322.688 ops/s
# Warmup Iteration   2: 1402329.247 ops/s
# Warmup Iteration   3: 1498203.758 ops/s
# Warmup Iteration   4: 1272152.359 ops/s
# Warmup Iteration   5: 1465009.823 ops/s
# Warmup Iteration   6: 1536733.309 ops/s
# Warmup Iteration   7: 1526080.817 ops/s
# Warmup Iteration   8: 1486012.933 ops/s
# Warmup Iteration   9: 1523873.897 ops/s
# Warmup Iteration  10: 1536551.869 ops/s
# Warmup Iteration  11: 1521137.313 ops/s
# Warmup Iteration  12: 1518504.438 ops/s
# Warmup Iteration  13: 1497889.896 ops/s
# Warmup Iteration  14: 1557480.067 ops/s
# Warmup Iteration  15: 1571986.506 ops/s
# Warmup Iteration  16: 1527696.059 ops/s
# Warmup Iteration  17: 1534018.588 ops/s
# Warmup Iteration  18: 1512090.988 ops/s
# Warmup Iteration  19: 1555489.787 ops/s
# Warmup Iteration  20: 1548092.237 ops/s
# Warmup Iteration  21: 1558396.963 ops/s
# Warmup Iteration  22: 1584984.900 ops/s
# Warmup Iteration  23: 1583726.143 ops/s
# Warmup Iteration  24: 1513376.540 ops/s
# Warmup Iteration  25: 1520151.012 ops/s
# Warmup Iteration  26: 1477993.570 ops/s
# Warmup Iteration  27: 1511248.934 ops/s
# Warmup Iteration  28: 1516584.855 ops/s
# Warmup Iteration  29: 1523803.807 ops/s
# Warmup Iteration  30: 1518397.913 ops/s
Iteration   1: 1494609.062 ops/s
Iteration   2: 1531496.520 ops/s
Iteration   3: 1498854.960 ops/s
Iteration   4: 1520407.288 ops/s
Iteration   5: 1528158.393 ops/s
Iteration   6: 1507975.035 ops/s
Iteration   7: 1524308.254 ops/s
Iteration   8: 1520412.895 ops/s
Iteration   9: 1538177.573 ops/s
Iteration  10: 1511721.705 ops/s
Iteration  11: 1497740.278 ops/s
Iteration  12: 1510120.331 ops/s
Iteration  13: 1518411.939 ops/s
Iteration  14: 1521675.587 ops/s
Iteration  15: 1518551.195 ops/s
Iteration  16: 1501436.932 ops/s
Iteration  17: 1509929.637 ops/s
Iteration  18: 1489566.334 ops/s
Iteration  19: 1506341.474 ops/s
Iteration  20: 1498415.873 ops/s
Iteration  21: 1539781.568 ops/s
Iteration  22: 1483179.321 ops/s
Iteration  23: 1536250.603 ops/s
Iteration  24: 1583983.830 ops/s
Iteration  25: 1536382.166 ops/s
Iteration  26: 1501273.934 ops/s
Iteration  27: 1529125.683 ops/s
Iteration  28: 1501166.153 ops/s
Iteration  29: 1500376.600 ops/s
Iteration  30: 1518354.584 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectInt":
  1515939.524 ±(99.9%) 13323.868 ops/s [Average]
  (min, avg, max) = (1483179.321, 1515939.524, 1583983.830), stdev = 19942.540
  CI (99.9%): [1502615.656, 1529263.392] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectInt  thrpt   30  1515939.524 ± 13323.868  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 544159.383 ops/s
# Warmup Iteration   2: 1500921.296 ops/s
# Warmup Iteration   3: 1501826.352 ops/s
# Warmup Iteration   4: 1223400.575 ops/s
# Warmup Iteration   5: 1513345.156 ops/s
# Warmup Iteration   6: 1460691.395 ops/s
# Warmup Iteration   7: 1471587.440 ops/s
# Warmup Iteration   8: 1492441.889 ops/s
# Warmup Iteration   9: 1452343.709 ops/s
# Warmup Iteration  10: 1535589.983 ops/s
# Warmup Iteration  11: 1504531.855 ops/s
# Warmup Iteration  12: 1466484.845 ops/s
# Warmup Iteration  13: 1510771.801 ops/s
# Warmup Iteration  14: 1458851.884 ops/s
# Warmup Iteration  15: 1493220.809 ops/s
# Warmup Iteration  16: 1470775.543 ops/s
# Warmup Iteration  17: 1489121.686 ops/s
# Warmup Iteration  18: 1483878.402 ops/s
# Warmup Iteration  19: 1511219.005 ops/s
# Warmup Iteration  20: 1480644.715 ops/s
# Warmup Iteration  21: 1493788.333 ops/s
# Warmup Iteration  22: 1467231.180 ops/s
# Warmup Iteration  23: 1468116.659 ops/s
# Warmup Iteration  24: 1480528.062 ops/s
# Warmup Iteration  25: 1484821.382 ops/s
# Warmup Iteration  26: 1477265.508 ops/s
# Warmup Iteration  27: 1498448.479 ops/s
# Warmup Iteration  28: 1484773.521 ops/s
# Warmup Iteration  29: 1472459.324 ops/s
# Warmup Iteration  30: 1493559.323 ops/s
Iteration   1: 1498073.324 ops/s
Iteration   2: 1489396.476 ops/s
Iteration   3: 1557598.132 ops/s
Iteration   4: 1551862.661 ops/s
Iteration   5: 1561743.438 ops/s
Iteration   6: 1539276.058 ops/s
Iteration   7: 1486889.301 ops/s
Iteration   8: 1537910.373 ops/s
Iteration   9: 1479828.082 ops/s
Iteration  10: 1479451.629 ops/s
Iteration  11: 1548324.110 ops/s
Iteration  12: 1471346.395 ops/s
Iteration  13: 1464276.033 ops/s
Iteration  14: 1476705.361 ops/s
Iteration  15: 1464927.959 ops/s
Iteration  16: 1488735.062 ops/s
Iteration  17: 1495436.607 ops/s
Iteration  18: 1491623.336 ops/s
Iteration  19: 1493484.866 ops/s
Iteration  20: 1496807.120 ops/s
Iteration  21: 1483842.769 ops/s
Iteration  22: 1481497.223 ops/s
Iteration  23: 1494965.164 ops/s
Iteration  24: 1494756.702 ops/s
Iteration  25: 1514051.741 ops/s
Iteration  26: 1482995.581 ops/s
Iteration  27: 1475401.244 ops/s
Iteration  28: 1478359.652 ops/s
Iteration  29: 1462911.560 ops/s
Iteration  30: 1485838.334 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectLong":
  1497610.543 ±(99.9%) 19225.447 ops/s [Average]
  (min, avg, max) = (1462911.560, 1497610.543, 1561743.438), stdev = 28775.747
  CI (99.9%): [1478385.096, 1516835.991] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectLong  thrpt   30  1497610.543 ± 19225.447  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 607607.161 ops/s
# Warmup Iteration   2: 1537783.594 ops/s
# Warmup Iteration   3: 1577081.230 ops/s
# Warmup Iteration   4: 1304312.975 ops/s
# Warmup Iteration   5: 1587662.144 ops/s
# Warmup Iteration   6: 1614136.369 ops/s
# Warmup Iteration   7: 1606652.465 ops/s
# Warmup Iteration   8: 1594324.054 ops/s
# Warmup Iteration   9: 1590770.180 ops/s
# Warmup Iteration  10: 1592809.387 ops/s
# Warmup Iteration  11: 1647249.251 ops/s
# Warmup Iteration  12: 1594933.430 ops/s
# Warmup Iteration  13: 1595805.599 ops/s
# Warmup Iteration  14: 1614099.667 ops/s
# Warmup Iteration  15: 1608553.941 ops/s
# Warmup Iteration  16: 1640308.170 ops/s
# Warmup Iteration  17: 1571589.043 ops/s
# Warmup Iteration  18: 1604917.835 ops/s
# Warmup Iteration  19: 1589679.485 ops/s
# Warmup Iteration  20: 1590248.495 ops/s
# Warmup Iteration  21: 1589185.216 ops/s
# Warmup Iteration  22: 1595277.375 ops/s
# Warmup Iteration  23: 1631034.303 ops/s
# Warmup Iteration  24: 1588825.050 ops/s
# Warmup Iteration  25: 1607982.739 ops/s
# Warmup Iteration  26: 1597820.838 ops/s
# Warmup Iteration  27: 1573457.566 ops/s
# Warmup Iteration  28: 1626702.079 ops/s
# Warmup Iteration  29: 1589972.802 ops/s
# Warmup Iteration  30: 1618798.121 ops/s
Iteration   1: 1581402.252 ops/s
Iteration   2: 1582911.127 ops/s
Iteration   3: 1575557.671 ops/s
Iteration   4: 1587351.280 ops/s
Iteration   5: 1600171.936 ops/s
Iteration   6: 1586129.583 ops/s
Iteration   7: 1599935.200 ops/s
Iteration   8: 1623693.523 ops/s
Iteration   9: 1600323.326 ops/s
Iteration  10: 1577851.987 ops/s
Iteration  11: 1577069.676 ops/s
Iteration  12: 1607682.182 ops/s
Iteration  13: 1620009.864 ops/s
Iteration  14: 1583321.973 ops/s
Iteration  15: 1629025.448 ops/s
Iteration  16: 1614066.066 ops/s
Iteration  17: 1611037.348 ops/s
Iteration  18: 1628790.023 ops/s
Iteration  19: 1596766.020 ops/s
Iteration  20: 1584397.056 ops/s
Iteration  21: 1586908.903 ops/s
Iteration  22: 1624517.857 ops/s
Iteration  23: 1623005.508 ops/s
Iteration  24: 1638965.442 ops/s
Iteration  25: 1659887.415 ops/s
Iteration  26: 1627933.952 ops/s
Iteration  27: 1604121.259 ops/s
Iteration  28: 1638577.937 ops/s
Iteration  29: 1635648.547 ops/s
Iteration  30: 1596607.141 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectShort":
  1606788.917 ±(99.9%) 15062.498 ops/s [Average]
  (min, avg, max) = (1575557.671, 1606788.917, 1659887.415), stdev = 22544.840
  CI (99.9%): [1591726.419, 1621851.415] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectShort  thrpt   30  1606788.917 ± 15062.498  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 159343.349 ops/s
# Warmup Iteration   2: 270230.665 ops/s
# Warmup Iteration   3: 338967.841 ops/s
# Warmup Iteration   4: 339964.044 ops/s
# Warmup Iteration   5: 334926.366 ops/s
# Warmup Iteration   6: 333904.239 ops/s
# Warmup Iteration   7: 286212.007 ops/s
# Warmup Iteration   8: 336838.576 ops/s
# Warmup Iteration   9: 339250.516 ops/s
# Warmup Iteration  10: 334387.738 ops/s
# Warmup Iteration  11: 343024.972 ops/s
# Warmup Iteration  12: 344184.437 ops/s
# Warmup Iteration  13: 344872.533 ops/s
# Warmup Iteration  14: 341537.025 ops/s
# Warmup Iteration  15: 338912.768 ops/s
# Warmup Iteration  16: 339253.064 ops/s
# Warmup Iteration  17: 350604.862 ops/s
# Warmup Iteration  18: 352381.852 ops/s
# Warmup Iteration  19: 357348.916 ops/s
# Warmup Iteration  20: 341265.654 ops/s
# Warmup Iteration  21: 348748.933 ops/s
# Warmup Iteration  22: 346689.784 ops/s
# Warmup Iteration  23: 347561.559 ops/s
# Warmup Iteration  24: 340048.017 ops/s
# Warmup Iteration  25: 342634.394 ops/s
# Warmup Iteration  26: 355985.495 ops/s
# Warmup Iteration  27: 350326.350 ops/s
# Warmup Iteration  28: 338968.323 ops/s
# Warmup Iteration  29: 343194.393 ops/s
# Warmup Iteration  30: 339968.582 ops/s
Iteration   1: 352872.360 ops/s
Iteration   2: 338337.470 ops/s
Iteration   3: 353362.694 ops/s
Iteration   4: 338102.025 ops/s
Iteration   5: 337839.258 ops/s
Iteration   6: 340692.940 ops/s
Iteration   7: 341175.930 ops/s
Iteration   8: 342155.718 ops/s
Iteration   9: 344085.151 ops/s
Iteration  10: 338308.869 ops/s
Iteration  11: 334393.270 ops/s
Iteration  12: 352914.631 ops/s
Iteration  13: 352041.535 ops/s
Iteration  14: 339772.620 ops/s
Iteration  15: 349073.042 ops/s
Iteration  16: 340551.602 ops/s
Iteration  17: 336651.084 ops/s
Iteration  18: 348025.003 ops/s
Iteration  19: 342186.432 ops/s
Iteration  20: 349233.381 ops/s
Iteration  21: 357053.936 ops/s
Iteration  22: 347639.548 ops/s
Iteration  23: 337569.355 ops/s
Iteration  24: 342107.031 ops/s
Iteration  25: 346489.070 ops/s
Iteration  26: 342452.500 ops/s
Iteration  27: 340734.934 ops/s
Iteration  28: 340190.364 ops/s
Iteration  29: 337432.316 ops/s
Iteration  30: 338973.876 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectWith":
  343413.932 ±(99.9%) 3999.349 ops/s [Average]
  (min, avg, max) = (334393.270, 343413.932, 357053.936), stdev = 5986.037
  CI (99.9%): [339414.583, 347413.280] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_flatCollectWith  thrpt   30  343413.932 ± 3999.349  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 601869.628 ops/s
# Warmup Iteration   2: 1127034.447 ops/s
# Warmup Iteration   3: 1304579.438 ops/s
# Warmup Iteration   4: 1348402.781 ops/s
# Warmup Iteration   5: 1313007.237 ops/s
# Warmup Iteration   6: 1073025.891 ops/s
# Warmup Iteration   7: 1331573.517 ops/s
# Warmup Iteration   8: 1374174.582 ops/s
# Warmup Iteration   9: 1308624.104 ops/s
# Warmup Iteration  10: 1349843.149 ops/s
# Warmup Iteration  11: 1313915.415 ops/s
# Warmup Iteration  12: 1346357.148 ops/s
# Warmup Iteration  13: 1323224.924 ops/s
# Warmup Iteration  14: 1344593.831 ops/s
# Warmup Iteration  15: 1311255.993 ops/s
# Warmup Iteration  16: 1309096.418 ops/s
# Warmup Iteration  17: 1327819.589 ops/s
# Warmup Iteration  18: 1327032.728 ops/s
# Warmup Iteration  19: 1321077.158 ops/s
# Warmup Iteration  20: 1327477.861 ops/s
# Warmup Iteration  21: 1330892.475 ops/s
# Warmup Iteration  22: 1297910.179 ops/s
# Warmup Iteration  23: 1346639.522 ops/s
# Warmup Iteration  24: 1323441.781 ops/s
# Warmup Iteration  25: 1346016.273 ops/s
# Warmup Iteration  26: 1367950.044 ops/s
# Warmup Iteration  27: 1320198.256 ops/s
# Warmup Iteration  28: 1349979.816 ops/s
# Warmup Iteration  29: 1359866.436 ops/s
# Warmup Iteration  30: 1311038.312 ops/s
Iteration   1: 1325247.685 ops/s
Iteration   2: 1382758.215 ops/s
Iteration   3: 1388520.973 ops/s
Iteration   4: 1374127.641 ops/s
Iteration   5: 1344047.863 ops/s
Iteration   6: 1300376.467 ops/s
Iteration   7: 1311153.260 ops/s
Iteration   8: 1366789.027 ops/s
Iteration   9: 1305536.798 ops/s
Iteration  10: 1295706.168 ops/s
Iteration  11: 1310967.847 ops/s
Iteration  12: 1335135.511 ops/s
Iteration  13: 1309757.318 ops/s
Iteration  14: 1310477.047 ops/s
Iteration  15: 1310339.481 ops/s
Iteration  16: 1304518.102 ops/s
Iteration  17: 1303913.951 ops/s
Iteration  18: 1304869.761 ops/s
Iteration  19: 1309968.229 ops/s
Iteration  20: 1365663.521 ops/s
Iteration  21: 1322019.428 ops/s
Iteration  22: 1334588.593 ops/s
Iteration  23: 1380030.674 ops/s
Iteration  24: 1387459.958 ops/s
Iteration  25: 1310155.916 ops/s
Iteration  26: 1284659.314 ops/s
Iteration  27: 1295906.230 ops/s
Iteration  28: 1381866.649 ops/s
Iteration  29: 1336101.096 ops/s
Iteration  30: 1316657.207 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_forEach":
  1330310.664 ±(99.9%) 21610.360 ops/s [Average]
  (min, avg, max) = (1284659.314, 1330310.664, 1388520.973), stdev = 32345.372
  CI (99.9%): [1308700.305, 1351921.024] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_forEach  thrpt   30  1330310.664 ± 21610.360  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 151591.480 ops/s
# Warmup Iteration   2: 176470.790 ops/s
# Warmup Iteration   3: 192833.112 ops/s
# Warmup Iteration   4: 211470.718 ops/s
# Warmup Iteration   5: 206503.394 ops/s
# Warmup Iteration   6: 210585.115 ops/s
# Warmup Iteration   7: 209573.560 ops/s
# Warmup Iteration   8: 208808.278 ops/s
# Warmup Iteration   9: 210787.142 ops/s
# Warmup Iteration  10: 212093.886 ops/s
# Warmup Iteration  11: 209532.052 ops/s
# Warmup Iteration  12: 209805.006 ops/s
# Warmup Iteration  13: 209874.709 ops/s
# Warmup Iteration  14: 209603.112 ops/s
# Warmup Iteration  15: 185181.941 ops/s
# Warmup Iteration  16: 199542.214 ops/s
# Warmup Iteration  17: 217301.688 ops/s
# Warmup Iteration  18: 217800.333 ops/s
# Warmup Iteration  19: 219851.764 ops/s
# Warmup Iteration  20: 217537.532 ops/s
# Warmup Iteration  21: 221298.032 ops/s
# Warmup Iteration  22: 231979.010 ops/s
# Warmup Iteration  23: 220759.191 ops/s
# Warmup Iteration  24: 219628.915 ops/s
# Warmup Iteration  25: 226412.390 ops/s
# Warmup Iteration  26: 222334.808 ops/s
# Warmup Iteration  27: 222217.841 ops/s
# Warmup Iteration  28: 222385.177 ops/s
# Warmup Iteration  29: 227211.140 ops/s
# Warmup Iteration  30: 224381.775 ops/s
Iteration   1: 213191.602 ops/s
Iteration   2: 231745.273 ops/s
Iteration   3: 231852.951 ops/s
Iteration   4: 219829.763 ops/s
Iteration   5: 228836.923 ops/s
Iteration   6: 216690.558 ops/s
Iteration   7: 216527.485 ops/s
Iteration   8: 218387.293 ops/s
Iteration   9: 220551.703 ops/s
Iteration  10: 230983.096 ops/s
Iteration  11: 227834.272 ops/s
Iteration  12: 231645.465 ops/s
Iteration  13: 229010.891 ops/s
Iteration  14: 221129.100 ops/s
Iteration  15: 216550.706 ops/s
Iteration  16: 216878.101 ops/s
Iteration  17: 217600.233 ops/s
Iteration  18: 217440.697 ops/s
Iteration  19: 220261.842 ops/s
Iteration  20: 219921.918 ops/s
Iteration  21: 230039.928 ops/s
Iteration  22: 226133.246 ops/s
Iteration  23: 231067.110 ops/s
Iteration  24: 232310.175 ops/s
Iteration  25: 232117.497 ops/s
Iteration  26: 232168.694 ops/s
Iteration  27: 232072.200 ops/s
Iteration  28: 231980.776 ops/s
Iteration  29: 232397.063 ops/s
Iteration  30: 232849.624 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_forEachFromTo":
  225333.540 ±(99.9%) 4516.017 ops/s [Average]
  (min, avg, max) = (213191.602, 225333.540, 232849.624), stdev = 6759.363
  CI (99.9%): [220817.522, 229849.557] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_forEachFromTo  thrpt   30  225333.540 ± 4516.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 552590.944 ops/s
# Warmup Iteration   2: 1178677.235 ops/s
# Warmup Iteration   3: 1258375.728 ops/s
# Warmup Iteration   4: 1259881.444 ops/s
# Warmup Iteration   5: 1055057.558 ops/s
# Warmup Iteration   6: 1266851.895 ops/s
# Warmup Iteration   7: 1266601.715 ops/s
# Warmup Iteration   8: 1260917.038 ops/s
# Warmup Iteration   9: 1264378.332 ops/s
# Warmup Iteration  10: 1261593.113 ops/s
# Warmup Iteration  11: 1257744.832 ops/s
# Warmup Iteration  12: 1207014.860 ops/s
# Warmup Iteration  13: 1191092.988 ops/s
# Warmup Iteration  14: 1187616.744 ops/s
# Warmup Iteration  15: 1181190.084 ops/s
# Warmup Iteration  16: 1236825.616 ops/s
# Warmup Iteration  17: 1213446.669 ops/s
# Warmup Iteration  18: 1227949.938 ops/s
# Warmup Iteration  19: 1233182.105 ops/s
# Warmup Iteration  20: 1196367.933 ops/s
# Warmup Iteration  21: 1225599.413 ops/s
# Warmup Iteration  22: 1235850.203 ops/s
# Warmup Iteration  23: 1244951.777 ops/s
# Warmup Iteration  24: 1236941.220 ops/s
# Warmup Iteration  25: 1254822.756 ops/s
# Warmup Iteration  26: 1204088.654 ops/s
# Warmup Iteration  27: 1202508.287 ops/s
# Warmup Iteration  28: 1198173.104 ops/s
# Warmup Iteration  29: 1201921.524 ops/s
# Warmup Iteration  30: 1185266.671 ops/s
Iteration   1: 1188053.298 ops/s
Iteration   2: 1195647.201 ops/s
Iteration   3: 1211268.518 ops/s
Iteration   4: 1267379.975 ops/s
Iteration   5: 1234333.948 ops/s
Iteration   6: 1189038.047 ops/s
Iteration   7: 1238998.421 ops/s
Iteration   8: 1180721.326 ops/s
Iteration   9: 1203834.415 ops/s
Iteration  10: 1190336.932 ops/s
Iteration  11: 1202693.718 ops/s
Iteration  12: 1177650.057 ops/s
Iteration  13: 1173715.578 ops/s
Iteration  14: 1225058.009 ops/s
Iteration  15: 1256710.119 ops/s
Iteration  16: 1255591.115 ops/s
Iteration  17: 1253489.270 ops/s
Iteration  18: 1228073.712 ops/s
Iteration  19: 1205388.556 ops/s
Iteration  20: 1190920.938 ops/s
Iteration  21: 1227282.578 ops/s
Iteration  22: 1228375.430 ops/s
Iteration  23: 1192678.594 ops/s
Iteration  24: 1248292.416 ops/s
Iteration  25: 1220682.416 ops/s
Iteration  26: 1208317.795 ops/s
Iteration  27: 1246472.470 ops/s
Iteration  28: 1262492.280 ops/s
Iteration  29: 1238752.992 ops/s
Iteration  30: 1220453.133 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_forEachWith":
  1218756.775 ±(99.9%) 18353.215 ops/s [Average]
  (min, avg, max) = (1173715.578, 1218756.775, 1267379.975), stdev = 27470.231
  CI (99.9%): [1200403.560, 1237109.990] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_forEachWith  thrpt   30  1218756.775 ± 18353.215  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 329231.744 ops/s
# Warmup Iteration   2: 536113.271 ops/s
# Warmup Iteration   3: 647583.855 ops/s
# Warmup Iteration   4: 653728.191 ops/s
# Warmup Iteration   5: 628765.257 ops/s
# Warmup Iteration   6: 587220.655 ops/s
# Warmup Iteration   7: 562811.445 ops/s
# Warmup Iteration   8: 624966.585 ops/s
# Warmup Iteration   9: 610286.169 ops/s
# Warmup Iteration  10: 610412.840 ops/s
# Warmup Iteration  11: 619880.897 ops/s
# Warmup Iteration  12: 629093.387 ops/s
# Warmup Iteration  13: 615223.884 ops/s
# Warmup Iteration  14: 618749.200 ops/s
# Warmup Iteration  15: 622849.357 ops/s
# Warmup Iteration  16: 624544.268 ops/s
# Warmup Iteration  17: 618432.201 ops/s
# Warmup Iteration  18: 616294.335 ops/s
# Warmup Iteration  19: 622888.926 ops/s
# Warmup Iteration  20: 618863.810 ops/s
# Warmup Iteration  21: 620349.182 ops/s
# Warmup Iteration  22: 630362.591 ops/s
# Warmup Iteration  23: 661306.482 ops/s
# Warmup Iteration  24: 660012.095 ops/s
# Warmup Iteration  25: 659760.259 ops/s
# Warmup Iteration  26: 624836.776 ops/s
# Warmup Iteration  27: 614228.727 ops/s
# Warmup Iteration  28: 639543.218 ops/s
# Warmup Iteration  29: 638535.032 ops/s
# Warmup Iteration  30: 629508.689 ops/s
Iteration   1: 634542.280 ops/s
Iteration   2: 631161.161 ops/s
Iteration   3: 634728.639 ops/s
Iteration   4: 621608.640 ops/s
Iteration   5: 622370.584 ops/s
Iteration   6: 612424.276 ops/s
Iteration   7: 619841.688 ops/s
Iteration   8: 620622.279 ops/s
Iteration   9: 660584.650 ops/s
Iteration  10: 660811.398 ops/s
Iteration  11: 661582.124 ops/s
Iteration  12: 660229.250 ops/s
Iteration  13: 661383.715 ops/s
Iteration  14: 640672.504 ops/s
Iteration  15: 609163.554 ops/s
Iteration  16: 610998.578 ops/s
Iteration  17: 610754.198 ops/s
Iteration  18: 638221.470 ops/s
Iteration  19: 619856.292 ops/s
Iteration  20: 615706.904 ops/s
Iteration  21: 616181.710 ops/s
Iteration  22: 642614.784 ops/s
Iteration  23: 634637.688 ops/s
Iteration  24: 631490.118 ops/s
Iteration  25: 622708.590 ops/s
Iteration  26: 622441.456 ops/s
Iteration  27: 653978.629 ops/s
Iteration  28: 636825.919 ops/s
Iteration  29: 624769.886 ops/s
Iteration  30: 635535.981 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_forEachWithIndex":
  632281.631 ±(99.9%) 11176.729 ops/s [Average]
  (min, avg, max) = (609163.554, 632281.631, 661582.124), stdev = 16728.803
  CI (99.9%): [621104.903, 643458.360] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  632281.631 ± 11176.729  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_forEachWithIndexWithFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_forEachWithIndexWithFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 143675.781 ops/s
# Warmup Iteration   2: 159767.562 ops/s
# Warmup Iteration   3: 190448.780 ops/s
# Warmup Iteration   4: 204424.976 ops/s
# Warmup Iteration   5: 204291.761 ops/s
# Warmup Iteration   6: 202511.215 ops/s
# Warmup Iteration   7: 205437.651 ops/s
# Warmup Iteration   8: 204890.378 ops/s
# Warmup Iteration   9: 205181.918 ops/s
# Warmup Iteration  10: 204352.681 ops/s
# Warmup Iteration  11: 205157.385 ops/s
# Warmup Iteration  12: 207539.879 ops/s
# Warmup Iteration  13: 195583.939 ops/s
# Warmup Iteration  14: 188287.385 ops/s
# Warmup Iteration  15: 206336.015 ops/s
# Warmup Iteration  16: 200070.790 ops/s
# Warmup Iteration  17: 213391.909 ops/s
# Warmup Iteration  18: 217324.162 ops/s
# Warmup Iteration  19: 217000.385 ops/s
# Warmup Iteration  20: 216238.710 ops/s
# Warmup Iteration  21: 227283.757 ops/s
# Warmup Iteration  22: 217065.770 ops/s
# Warmup Iteration  23: 217513.157 ops/s
# Warmup Iteration  24: 215032.709 ops/s
# Warmup Iteration  25: 215729.524 ops/s
# Warmup Iteration  26: 218516.651 ops/s
# Warmup Iteration  27: 221839.412 ops/s
# Warmup Iteration  28: 213994.330 ops/s
# Warmup Iteration  29: 215086.235 ops/s
# Warmup Iteration  30: 213972.687 ops/s
Iteration   1: 218332.947 ops/s
Iteration   2: 227822.907 ops/s
Iteration   3: 218547.702 ops/s
Iteration   4: 218383.948 ops/s
Iteration   5: 222612.076 ops/s
Iteration   6: 216680.822 ops/s
Iteration   7: 215313.245 ops/s
Iteration   8: 216425.326 ops/s
Iteration   9: 214909.882 ops/s
Iteration  10: 218970.466 ops/s
Iteration  11: 214591.369 ops/s
Iteration  12: 214444.632 ops/s
Iteration  13: 217328.286 ops/s
Iteration  14: 212997.392 ops/s
Iteration  15: 219381.480 ops/s
Iteration  16: 219242.398 ops/s
Iteration  17: 219809.953 ops/s
Iteration  18: 221266.289 ops/s
Iteration  19: 217660.991 ops/s
Iteration  20: 216913.526 ops/s
Iteration  21: 218558.217 ops/s
Iteration  22: 215042.563 ops/s
Iteration  23: 217035.240 ops/s
Iteration  24: 220541.526 ops/s
Iteration  25: 223970.440 ops/s
Iteration  26: 222569.797 ops/s
Iteration  27: 217412.221 ops/s
Iteration  28: 214573.017 ops/s
Iteration  29: 217210.037 ops/s
Iteration  30: 218765.865 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_forEachWithIndexWithFromTo":
  218243.819 ±(99.9%) 2124.278 ops/s [Average]
  (min, avg, max) = (212997.392, 218243.819, 227822.907), stdev = 3179.520
  CI (99.9%): [216119.541, 220368.097] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_forEachWithIndexWithFromTo  thrpt   30  218243.819 ± 2124.278  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_forEachWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_forEachWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 568276.831 ops/s
# Warmup Iteration   2: 608594.596 ops/s
# Warmup Iteration   3: 749303.972 ops/s
# Warmup Iteration   4: 818501.753 ops/s
# Warmup Iteration   5: 831861.095 ops/s
# Warmup Iteration   6: 793715.009 ops/s
# Warmup Iteration   7: 784887.571 ops/s
# Warmup Iteration   8: 789096.315 ops/s
# Warmup Iteration   9: 791005.564 ops/s
# Warmup Iteration  10: 799970.011 ops/s
# Warmup Iteration  11: 797331.259 ops/s
# Warmup Iteration  12: 771637.095 ops/s
# Warmup Iteration  13: 663424.299 ops/s
# Warmup Iteration  14: 783542.969 ops/s
# Warmup Iteration  15: 790024.126 ops/s
# Warmup Iteration  16: 790308.135 ops/s
# Warmup Iteration  17: 833453.071 ops/s
# Warmup Iteration  18: 829997.881 ops/s
# Warmup Iteration  19: 827188.985 ops/s
# Warmup Iteration  20: 814250.802 ops/s
# Warmup Iteration  21: 819489.859 ops/s
# Warmup Iteration  22: 831592.942 ops/s
# Warmup Iteration  23: 831627.333 ops/s
# Warmup Iteration  24: 825112.218 ops/s
# Warmup Iteration  25: 837465.548 ops/s
# Warmup Iteration  26: 828896.646 ops/s
# Warmup Iteration  27: 854206.819 ops/s
# Warmup Iteration  28: 862686.968 ops/s
# Warmup Iteration  29: 832220.177 ops/s
# Warmup Iteration  30: 838490.107 ops/s
Iteration   1: 821529.366 ops/s
Iteration   2: 816837.985 ops/s
Iteration   3: 833093.743 ops/s
Iteration   4: 828189.884 ops/s
Iteration   5: 845977.343 ops/s
Iteration   6: 842979.786 ops/s
Iteration   7: 834339.886 ops/s
Iteration   8: 843381.070 ops/s
Iteration   9: 827289.715 ops/s
Iteration  10: 816461.361 ops/s
Iteration  11: 812641.522 ops/s
Iteration  12: 808625.587 ops/s
Iteration  13: 825657.779 ops/s
Iteration  14: 831473.569 ops/s
Iteration  15: 852019.740 ops/s
Iteration  16: 840584.265 ops/s
Iteration  17: 831948.313 ops/s
Iteration  18: 837807.639 ops/s
Iteration  19: 845973.302 ops/s
Iteration  20: 862224.733 ops/s
Iteration  21: 825352.830 ops/s
Iteration  22: 824349.151 ops/s
Iteration  23: 841581.450 ops/s
Iteration  24: 826105.391 ops/s
Iteration  25: 823379.612 ops/s
Iteration  26: 831690.834 ops/s
Iteration  27: 829451.334 ops/s
Iteration  28: 849048.229 ops/s
Iteration  29: 875477.864 ops/s
Iteration  30: 877456.398 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_forEachWithOccurrences":
  835430.989 ±(99.9%) 10994.105 ops/s [Average]
  (min, avg, max) = (808625.587, 835430.989, 877456.398), stdev = 16455.460
  CI (99.9%): [824436.884, 846425.094] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_forEachWithOccurrences  thrpt   30  835430.989 ± 10994.105  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_fusedCollectMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_fusedCollectMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 823086.757 ops/s
# Warmup Iteration   2: 1757543.705 ops/s
# Warmup Iteration   3: 1840636.403 ops/s
# Warmup Iteration   4: 1857731.447 ops/s
# Warmup Iteration   5: 1615971.709 ops/s
# Warmup Iteration   6: 1934574.811 ops/s
# Warmup Iteration   7: 1865785.905 ops/s
# Warmup Iteration   8: 1847604.746 ops/s
# Warmup Iteration   9: 1842304.602 ops/s
# Warmup Iteration  10: 1944652.843 ops/s
# Warmup Iteration  11: 1858109.109 ops/s
# Warmup Iteration  12: 1887247.298 ops/s
# Warmup Iteration  13: 1888042.391 ops/s
# Warmup Iteration  14: 1898609.302 ops/s
# Warmup Iteration  15: 1898143.311 ops/s
# Warmup Iteration  16: 1894138.740 ops/s
# Warmup Iteration  17: 1918936.729 ops/s
# Warmup Iteration  18: 1890487.165 ops/s
# Warmup Iteration  19: 1860215.443 ops/s
# Warmup Iteration  20: 1873232.448 ops/s
# Warmup Iteration  21: 1913154.966 ops/s
# Warmup Iteration  22: 1837441.653 ops/s
# Warmup Iteration  23: 1852084.237 ops/s
# Warmup Iteration  24: 1850316.234 ops/s
# Warmup Iteration  25: 1861187.588 ops/s
# Warmup Iteration  26: 1939672.035 ops/s
# Warmup Iteration  27: 1916940.689 ops/s
# Warmup Iteration  28: 1888372.614 ops/s
# Warmup Iteration  29: 1895787.914 ops/s
# Warmup Iteration  30: 1887222.225 ops/s
Iteration   1: 1878384.385 ops/s
Iteration   2: 1862395.211 ops/s
Iteration   3: 1896983.163 ops/s
Iteration   4: 1952634.541 ops/s
Iteration   5: 1960950.269 ops/s
Iteration   6: 1905633.871 ops/s
Iteration   7: 1925390.846 ops/s
Iteration   8: 1869076.547 ops/s
Iteration   9: 1869452.471 ops/s
Iteration  10: 1962173.937 ops/s
Iteration  11: 1965744.891 ops/s
Iteration  12: 1967442.854 ops/s
Iteration  13: 1961466.243 ops/s
Iteration  14: 1847736.961 ops/s
Iteration  15: 1837593.164 ops/s
Iteration  16: 1843690.100 ops/s
Iteration  17: 1863878.526 ops/s
Iteration  18: 1870792.726 ops/s
Iteration  19: 1962114.891 ops/s
Iteration  20: 1963703.638 ops/s
Iteration  21: 1960282.169 ops/s
Iteration  22: 1930948.126 ops/s
Iteration  23: 1956780.008 ops/s
Iteration  24: 1890587.556 ops/s
Iteration  25: 1901332.987 ops/s
Iteration  26: 1848693.424 ops/s
Iteration  27: 1867300.030 ops/s
Iteration  28: 1867282.824 ops/s
Iteration  29: 1855459.889 ops/s
Iteration  30: 1845037.339 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_fusedCollectMakeString":
  1903031.453 ±(99.9%) 31565.942 ops/s [Average]
  (min, avg, max) = (1837593.164, 1903031.453, 1967442.854), stdev = 47246.419
  CI (99.9%): [1871465.511, 1934597.395] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_fusedCollectMakeString  thrpt   30  1903031.453 ± 31565.942  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_getAny$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_getAny

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 998178.476 ops/s
# Warmup Iteration   2: 1454955.487 ops/s
# Warmup Iteration   3: 1818690.478 ops/s
# Warmup Iteration   4: 1820119.829 ops/s
# Warmup Iteration   5: 1772614.617 ops/s
# Warmup Iteration   6: 1800601.605 ops/s
# Warmup Iteration   7: 1587339.100 ops/s
# Warmup Iteration   8: 1753086.587 ops/s
# Warmup Iteration   9: 1822497.634 ops/s
# Warmup Iteration  10: 1791960.048 ops/s
# Warmup Iteration  11: 1839834.179 ops/s
# Warmup Iteration  12: 1828997.532 ops/s
# Warmup Iteration  13: 1823951.237 ops/s
# Warmup Iteration  14: 1822084.125 ops/s
# Warmup Iteration  15: 1777276.812 ops/s
# Warmup Iteration  16: 1789955.103 ops/s
# Warmup Iteration  17: 1791681.206 ops/s
# Warmup Iteration  18: 1790931.873 ops/s
# Warmup Iteration  19: 1800223.308 ops/s
# Warmup Iteration  20: 1786580.869 ops/s
# Warmup Iteration  21: 1798342.567 ops/s
# Warmup Iteration  22: 1779621.923 ops/s
# Warmup Iteration  23: 1780310.241 ops/s
# Warmup Iteration  24: 1798802.958 ops/s
# Warmup Iteration  25: 1793949.856 ops/s
# Warmup Iteration  26: 1841209.570 ops/s
# Warmup Iteration  27: 1849718.485 ops/s
# Warmup Iteration  28: 1867607.974 ops/s
# Warmup Iteration  29: 1870360.948 ops/s
# Warmup Iteration  30: 1871905.310 ops/s
Iteration   1: 1825357.546 ops/s
Iteration   2: 1874146.687 ops/s
Iteration   3: 1851189.551 ops/s
Iteration   4: 1870210.931 ops/s
Iteration   5: 1828078.455 ops/s
Iteration   6: 1814540.286 ops/s
Iteration   7: 1845501.237 ops/s
Iteration   8: 1833644.139 ops/s
Iteration   9: 1826079.281 ops/s
Iteration  10: 1869771.807 ops/s
Iteration  11: 1873436.421 ops/s
Iteration  12: 1836821.778 ops/s
Iteration  13: 1892581.973 ops/s
Iteration  14: 1868993.196 ops/s
Iteration  15: 1855236.899 ops/s
Iteration  16: 1825598.484 ops/s
Iteration  17: 1850502.578 ops/s
Iteration  18: 1852017.385 ops/s
Iteration  19: 1844752.329 ops/s
Iteration  20: 1847149.046 ops/s
Iteration  21: 1837266.432 ops/s
Iteration  22: 1835804.691 ops/s
Iteration  23: 1849104.433 ops/s
Iteration  24: 1837462.898 ops/s
Iteration  25: 1862046.059 ops/s
Iteration  26: 1848639.400 ops/s
Iteration  27: 1886418.592 ops/s
Iteration  28: 1900826.976 ops/s
Iteration  29: 1903085.511 ops/s
Iteration  30: 1884353.155 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_getAny":
  1854353.938 ±(99.9%) 15769.773 ops/s [Average]
  (min, avg, max) = (1814540.286, 1854353.938, 1903085.511), stdev = 23603.456
  CI (99.9%): [1838584.165, 1870123.712] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_getAny  thrpt   30  1854353.938 ± 15769.773  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 341303.622 ops/s
# Warmup Iteration   2: 501306.999 ops/s
# Warmup Iteration   3: 602624.920 ops/s
# Warmup Iteration   4: 596861.397 ops/s
# Warmup Iteration   5: 592841.588 ops/s
# Warmup Iteration   6: 589230.811 ops/s
# Warmup Iteration   7: 525719.737 ops/s
# Warmup Iteration   8: 569236.676 ops/s
# Warmup Iteration   9: 601314.282 ops/s
# Warmup Iteration  10: 599701.138 ops/s
# Warmup Iteration  11: 599737.957 ops/s
# Warmup Iteration  12: 602188.341 ops/s
# Warmup Iteration  13: 601186.332 ops/s
# Warmup Iteration  14: 602504.827 ops/s
# Warmup Iteration  15: 603189.568 ops/s
# Warmup Iteration  16: 591772.318 ops/s
# Warmup Iteration  17: 591948.824 ops/s
# Warmup Iteration  18: 588334.518 ops/s
# Warmup Iteration  19: 572552.102 ops/s
# Warmup Iteration  20: 566642.176 ops/s
# Warmup Iteration  21: 573986.820 ops/s
# Warmup Iteration  22: 584290.868 ops/s
# Warmup Iteration  23: 597984.781 ops/s
# Warmup Iteration  24: 576443.712 ops/s
# Warmup Iteration  25: 593914.571 ops/s
# Warmup Iteration  26: 593291.633 ops/s
# Warmup Iteration  27: 580648.850 ops/s
# Warmup Iteration  28: 577713.016 ops/s
# Warmup Iteration  29: 571268.002 ops/s
# Warmup Iteration  30: 584453.199 ops/s
Iteration   1: 599117.841 ops/s
Iteration   2: 595581.063 ops/s
Iteration   3: 578063.269 ops/s
Iteration   4: 600038.643 ops/s
Iteration   5: 569344.210 ops/s
Iteration   6: 601483.641 ops/s
Iteration   7: 580879.817 ops/s
Iteration   8: 561230.750 ops/s
Iteration   9: 569166.654 ops/s
Iteration  10: 572019.895 ops/s
Iteration  11: 594121.009 ops/s
Iteration  12: 573551.831 ops/s
Iteration  13: 559999.729 ops/s
Iteration  14: 577564.239 ops/s
Iteration  15: 568880.649 ops/s
Iteration  16: 566525.431 ops/s
Iteration  17: 590757.496 ops/s
Iteration  18: 602290.058 ops/s
Iteration  19: 603860.434 ops/s
Iteration  20: 583088.701 ops/s
Iteration  21: 583385.570 ops/s
Iteration  22: 572949.061 ops/s
Iteration  23: 579743.533 ops/s
Iteration  24: 586880.441 ops/s
Iteration  25: 582126.025 ops/s
Iteration  26: 589016.006 ops/s
Iteration  27: 602943.517 ops/s
Iteration  28: 586961.140 ops/s
Iteration  29: 593593.453 ops/s
Iteration  30: 589687.265 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_getFirst":
  583828.379 ±(99.9%) 8661.955 ops/s [Average]
  (min, avg, max) = (559999.729, 583828.379, 603860.434), stdev = 12964.807
  CI (99.9%): [575166.425, 592490.334] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_getFirst  thrpt   30  583828.379 ± 8661.955  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 365160.348 ops/s
# Warmup Iteration   2: 484528.185 ops/s
# Warmup Iteration   3: 622034.401 ops/s
# Warmup Iteration   4: 625902.874 ops/s
# Warmup Iteration   5: 626658.293 ops/s
# Warmup Iteration   6: 638357.081 ops/s
# Warmup Iteration   7: 635051.061 ops/s
# Warmup Iteration   8: 518699.005 ops/s
# Warmup Iteration   9: 617444.173 ops/s
# Warmup Iteration  10: 610544.163 ops/s
# Warmup Iteration  11: 622486.385 ops/s
# Warmup Iteration  12: 622824.179 ops/s
# Warmup Iteration  13: 614021.174 ops/s
# Warmup Iteration  14: 650973.294 ops/s
# Warmup Iteration  15: 639233.744 ops/s
# Warmup Iteration  16: 626439.038 ops/s
# Warmup Iteration  17: 611987.415 ops/s
# Warmup Iteration  18: 623366.478 ops/s
# Warmup Iteration  19: 620211.172 ops/s
# Warmup Iteration  20: 612752.452 ops/s
# Warmup Iteration  21: 618066.185 ops/s
# Warmup Iteration  22: 633142.756 ops/s
# Warmup Iteration  23: 652366.225 ops/s
# Warmup Iteration  24: 625550.312 ops/s
# Warmup Iteration  25: 631105.448 ops/s
# Warmup Iteration  26: 619132.493 ops/s
# Warmup Iteration  27: 615473.804 ops/s
# Warmup Iteration  28: 616887.476 ops/s
# Warmup Iteration  29: 626187.119 ops/s
# Warmup Iteration  30: 649993.628 ops/s
Iteration   1: 645565.579 ops/s
Iteration   2: 643731.142 ops/s
Iteration   3: 623966.421 ops/s
Iteration   4: 617347.553 ops/s
Iteration   5: 618939.086 ops/s
Iteration   6: 615666.132 ops/s
Iteration   7: 646163.622 ops/s
Iteration   8: 649684.752 ops/s
Iteration   9: 628367.367 ops/s
Iteration  10: 627670.898 ops/s
Iteration  11: 633237.145 ops/s
Iteration  12: 635342.610 ops/s
Iteration  13: 621435.681 ops/s
Iteration  14: 612522.920 ops/s
Iteration  15: 636352.910 ops/s
Iteration  16: 626950.375 ops/s
Iteration  17: 638272.544 ops/s
Iteration  18: 635575.822 ops/s
Iteration  19: 610973.756 ops/s
Iteration  20: 619563.084 ops/s
Iteration  21: 630122.104 ops/s
Iteration  22: 629695.599 ops/s
Iteration  23: 635882.217 ops/s
Iteration  24: 622208.779 ops/s
Iteration  25: 604359.760 ops/s
Iteration  26: 616109.209 ops/s
Iteration  27: 617855.608 ops/s
Iteration  28: 604771.606 ops/s
Iteration  29: 614743.943 ops/s
Iteration  30: 608323.619 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_getLast":
  625713.395 ±(99.9%) 8351.185 ops/s [Average]
  (min, avg, max) = (604359.760, 625713.395, 649684.752), stdev = 12499.661
  CI (99.9%): [617362.210, 634064.580] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_getLast  thrpt   30  625713.395 ± 8351.185  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1267361.241 ops/s
# Warmup Iteration   2: 1737519.740 ops/s
# Warmup Iteration   3: 2241602.421 ops/s
# Warmup Iteration   4: 2274806.887 ops/s
# Warmup Iteration   5: 2278413.476 ops/s
# Warmup Iteration   6: 2292472.296 ops/s
# Warmup Iteration   7: 2245127.378 ops/s
# Warmup Iteration   8: 1815170.660 ops/s
# Warmup Iteration   9: 2339231.023 ops/s
# Warmup Iteration  10: 2275301.095 ops/s
# Warmup Iteration  11: 2287607.550 ops/s
# Warmup Iteration  12: 2328409.374 ops/s
# Warmup Iteration  13: 2375338.966 ops/s
# Warmup Iteration  14: 2316051.888 ops/s
# Warmup Iteration  15: 2286503.898 ops/s
# Warmup Iteration  16: 2263161.452 ops/s
# Warmup Iteration  17: 2256782.825 ops/s
# Warmup Iteration  18: 2376607.282 ops/s
# Warmup Iteration  19: 2296471.952 ops/s
# Warmup Iteration  20: 2210820.017 ops/s
# Warmup Iteration  21: 2265421.063 ops/s
# Warmup Iteration  22: 2220468.332 ops/s
# Warmup Iteration  23: 2244523.343 ops/s
# Warmup Iteration  24: 2238016.922 ops/s
# Warmup Iteration  25: 2272373.066 ops/s
# Warmup Iteration  26: 2249191.077 ops/s
# Warmup Iteration  27: 2211517.327 ops/s
# Warmup Iteration  28: 2297286.551 ops/s
# Warmup Iteration  29: 2280547.911 ops/s
# Warmup Iteration  30: 2221769.452 ops/s
Iteration   1: 2328589.177 ops/s
Iteration   2: 2243244.291 ops/s
Iteration   3: 2213929.097 ops/s
Iteration   4: 2284812.651 ops/s
Iteration   5: 2335649.700 ops/s
Iteration   6: 2348685.101 ops/s
Iteration   7: 2263736.016 ops/s
Iteration   8: 2383676.870 ops/s
Iteration   9: 2380681.947 ops/s
Iteration  10: 2235298.675 ops/s
Iteration  11: 2242316.847 ops/s
Iteration  12: 2256374.572 ops/s
Iteration  13: 2207180.736 ops/s
Iteration  14: 2213356.489 ops/s
Iteration  15: 2265646.145 ops/s
Iteration  16: 2387443.478 ops/s
Iteration  17: 2379412.461 ops/s
Iteration  18: 2283021.421 ops/s
Iteration  19: 2365481.241 ops/s
Iteration  20: 2248555.467 ops/s
Iteration  21: 2222228.610 ops/s
Iteration  22: 2248448.610 ops/s
Iteration  23: 2297573.329 ops/s
Iteration  24: 2258965.504 ops/s
Iteration  25: 2243630.671 ops/s
Iteration  26: 2253191.809 ops/s
Iteration  27: 2214276.047 ops/s
Iteration  28: 2231450.765 ops/s
Iteration  29: 2195811.433 ops/s
Iteration  30: 2205406.998 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_getOnly":
  2274602.539 ±(99.9%) 40450.613 ops/s [Average]
  (min, avg, max) = (2195811.433, 2274602.539, 2387443.478), stdev = 60544.577
  CI (99.9%): [2234151.926, 2315053.151] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_getOnly  thrpt   30  2274602.539 ± 40450.613  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_getOnly_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_getOnly_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 628987.052 ops/s
# Warmup Iteration   2: 688276.674 ops/s
# Warmup Iteration   3: 876690.849 ops/s
# Warmup Iteration   4: 837303.311 ops/s
# Warmup Iteration   5: 843730.537 ops/s
# Warmup Iteration   6: 860202.260 ops/s
# Warmup Iteration   7: 908564.136 ops/s
# Warmup Iteration   8: 873090.544 ops/s
# Warmup Iteration   9: 846319.607 ops/s
# Warmup Iteration  10: 838064.505 ops/s
# Warmup Iteration  11: 880957.932 ops/s
# Warmup Iteration  12: 877257.382 ops/s
# Warmup Iteration  13: 799489.195 ops/s
# Warmup Iteration  14: 854942.819 ops/s
# Warmup Iteration  15: 846441.126 ops/s
# Warmup Iteration  16: 854780.334 ops/s
# Warmup Iteration  17: 908878.186 ops/s
# Warmup Iteration  18: 906422.709 ops/s
# Warmup Iteration  19: 891682.264 ops/s
# Warmup Iteration  20: 902074.354 ops/s
# Warmup Iteration  21: 897141.221 ops/s
# Warmup Iteration  22: 892051.117 ops/s
# Warmup Iteration  23: 899896.888 ops/s
# Warmup Iteration  24: 949102.845 ops/s
# Warmup Iteration  25: 939403.064 ops/s
# Warmup Iteration  26: 917800.533 ops/s
# Warmup Iteration  27: 920871.502 ops/s
# Warmup Iteration  28: 898101.066 ops/s
# Warmup Iteration  29: 896361.761 ops/s
# Warmup Iteration  30: 906703.206 ops/s
Iteration   1: 903299.328 ops/s
Iteration   2: 901076.301 ops/s
Iteration   3: 888695.366 ops/s
Iteration   4: 892143.772 ops/s
Iteration   5: 911805.599 ops/s
Iteration   6: 913555.889 ops/s
Iteration   7: 893067.571 ops/s
Iteration   8: 917415.346 ops/s
Iteration   9: 946286.233 ops/s
Iteration  10: 938613.854 ops/s
Iteration  11: 934814.638 ops/s
Iteration  12: 906990.492 ops/s
Iteration  13: 891143.339 ops/s
Iteration  14: 919782.701 ops/s
Iteration  15: 911505.864 ops/s
Iteration  16: 904361.144 ops/s
Iteration  17: 914071.125 ops/s
Iteration  18: 913673.395 ops/s
Iteration  19: 909259.175 ops/s
Iteration  20: 903063.996 ops/s
Iteration  21: 909566.294 ops/s
Iteration  22: 921336.123 ops/s
Iteration  23: 907311.340 ops/s
Iteration  24: 895623.065 ops/s
Iteration  25: 930104.219 ops/s
Iteration  26: 910418.643 ops/s
Iteration  27: 935753.638 ops/s
Iteration  28: 901998.492 ops/s
Iteration  29: 924052.286 ops/s
Iteration  30: 924527.109 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_getOnly_empty_throws":
  912510.544 ±(99.9%) 9826.157 ops/s [Average]
  (min, avg, max) = (888695.366, 912510.544, 946286.233), stdev = 14707.331
  CI (99.9%): [902684.387, 922336.702] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_getOnly_empty_throws  thrpt   30  912510.544 ± 9826.157  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_getOnly_not_only_one_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_getOnly_not_only_one_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 591030.051 ops/s
# Warmup Iteration   2: 640892.660 ops/s
# Warmup Iteration   3: 878676.825 ops/s
# Warmup Iteration   4: 860463.196 ops/s
# Warmup Iteration   5: 867917.689 ops/s
# Warmup Iteration   6: 875456.375 ops/s
# Warmup Iteration   7: 902745.353 ops/s
# Warmup Iteration   8: 879194.227 ops/s
# Warmup Iteration   9: 882902.849 ops/s
# Warmup Iteration  10: 878840.974 ops/s
# Warmup Iteration  11: 738866.473 ops/s
# Warmup Iteration  12: 868005.332 ops/s
# Warmup Iteration  13: 886166.933 ops/s
# Warmup Iteration  14: 880150.327 ops/s
# Warmup Iteration  15: 858278.838 ops/s
# Warmup Iteration  16: 869958.596 ops/s
# Warmup Iteration  17: 898767.044 ops/s
# Warmup Iteration  18: 902363.418 ops/s
# Warmup Iteration  19: 916339.218 ops/s
# Warmup Iteration  20: 924563.756 ops/s
# Warmup Iteration  21: 937456.188 ops/s
# Warmup Iteration  22: 927363.299 ops/s
# Warmup Iteration  23: 908696.844 ops/s
# Warmup Iteration  24: 906870.110 ops/s
# Warmup Iteration  25: 901521.031 ops/s
# Warmup Iteration  26: 910261.537 ops/s
# Warmup Iteration  27: 915596.397 ops/s
# Warmup Iteration  28: 919474.151 ops/s
# Warmup Iteration  29: 914969.014 ops/s
# Warmup Iteration  30: 919384.598 ops/s
Iteration   1: 921528.628 ops/s
Iteration   2: 905263.871 ops/s
Iteration   3: 942103.482 ops/s
Iteration   4: 894029.109 ops/s
Iteration   5: 898030.747 ops/s
Iteration   6: 899959.925 ops/s
Iteration   7: 907889.804 ops/s
Iteration   8: 905458.441 ops/s
Iteration   9: 905527.342 ops/s
Iteration  10: 906285.042 ops/s
Iteration  11: 932922.234 ops/s
Iteration  12: 908451.617 ops/s
Iteration  13: 905359.463 ops/s
Iteration  14: 894625.197 ops/s
Iteration  15: 899847.281 ops/s
Iteration  16: 937269.303 ops/s
Iteration  17: 935002.185 ops/s
Iteration  18: 897437.274 ops/s
Iteration  19: 895110.557 ops/s
Iteration  20: 900793.743 ops/s
Iteration  21: 904965.460 ops/s
Iteration  22: 934139.240 ops/s
Iteration  23: 955050.406 ops/s
Iteration  24: 918649.830 ops/s
Iteration  25: 892746.899 ops/s
Iteration  26: 930428.365 ops/s
Iteration  27: 925407.979 ops/s
Iteration  28: 909264.118 ops/s
Iteration  29: 916606.319 ops/s
Iteration  30: 924494.269 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_getOnly_not_only_one_throws":
  913488.271 ±(99.9%) 11110.505 ops/s [Average]
  (min, avg, max) = (892746.899, 913488.271, 955050.406), stdev = 16629.681
  CI (99.9%): [902377.766, 924598.776] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_getOnly_not_only_one_throws  thrpt   30  913488.271 ± 11110.505  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 58074.900 ops/s
# Warmup Iteration   2: 82715.751 ops/s
# Warmup Iteration   3: 108161.563 ops/s
# Warmup Iteration   4: 106994.572 ops/s
# Warmup Iteration   5: 106407.513 ops/s
# Warmup Iteration   6: 107134.648 ops/s
# Warmup Iteration   7: 106279.335 ops/s
# Warmup Iteration   8: 89973.978 ops/s
# Warmup Iteration   9: 106399.502 ops/s
# Warmup Iteration  10: 106140.197 ops/s
# Warmup Iteration  11: 108779.819 ops/s
# Warmup Iteration  12: 106425.833 ops/s
# Warmup Iteration  13: 106219.239 ops/s
# Warmup Iteration  14: 108930.395 ops/s
# Warmup Iteration  15: 106693.229 ops/s
# Warmup Iteration  16: 106644.485 ops/s
# Warmup Iteration  17: 106281.584 ops/s
# Warmup Iteration  18: 107722.863 ops/s
# Warmup Iteration  19: 107665.454 ops/s
# Warmup Iteration  20: 107839.689 ops/s
# Warmup Iteration  21: 108068.402 ops/s
# Warmup Iteration  22: 106421.839 ops/s
# Warmup Iteration  23: 110138.083 ops/s
# Warmup Iteration  24: 106279.786 ops/s
# Warmup Iteration  25: 107616.202 ops/s
# Warmup Iteration  26: 108749.615 ops/s
# Warmup Iteration  27: 107731.536 ops/s
# Warmup Iteration  28: 107113.920 ops/s
# Warmup Iteration  29: 106358.785 ops/s
# Warmup Iteration  30: 107361.871 ops/s
Iteration   1: 107670.989 ops/s
Iteration   2: 106971.476 ops/s
Iteration   3: 106473.362 ops/s
Iteration   4: 106992.702 ops/s
Iteration   5: 106623.124 ops/s
Iteration   6: 107915.227 ops/s
Iteration   7: 108477.338 ops/s
Iteration   8: 111083.131 ops/s
Iteration   9: 111528.635 ops/s
Iteration  10: 106807.730 ops/s
Iteration  11: 106652.705 ops/s
Iteration  12: 106797.724 ops/s
Iteration  13: 105920.146 ops/s
Iteration  14: 108564.083 ops/s
Iteration  15: 108280.533 ops/s
Iteration  16: 110078.000 ops/s
Iteration  17: 108376.260 ops/s
Iteration  18: 109076.993 ops/s
Iteration  19: 112712.618 ops/s
Iteration  20: 108381.057 ops/s
Iteration  21: 108267.327 ops/s
Iteration  22: 110448.641 ops/s
Iteration  23: 106808.886 ops/s
Iteration  24: 109226.876 ops/s
Iteration  25: 106655.907 ops/s
Iteration  26: 107301.865 ops/s
Iteration  27: 111908.671 ops/s
Iteration  28: 111352.180 ops/s
Iteration  29: 106897.659 ops/s
Iteration  30: 108591.397 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_groupBy":
  108428.108 ±(99.9%) 1239.688 ops/s [Average]
  (min, avg, max) = (105920.146, 108428.108, 112712.618), stdev = 1855.507
  CI (99.9%): [107188.420, 109667.796] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_groupBy  thrpt   30  108428.108 ± 1239.688  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8850.376 ops/s
# Warmup Iteration   2: 10654.310 ops/s
# Warmup Iteration   3: 13805.842 ops/s
# Warmup Iteration   4: 14665.368 ops/s
# Warmup Iteration   5: 14418.709 ops/s
# Warmup Iteration   6: 14777.121 ops/s
# Warmup Iteration   7: 14562.210 ops/s
# Warmup Iteration   8: 14561.874 ops/s
# Warmup Iteration   9: 14443.529 ops/s
# Warmup Iteration  10: 14527.600 ops/s
# Warmup Iteration  11: 15033.984 ops/s
# Warmup Iteration  12: 12608.211 ops/s
# Warmup Iteration  13: 14803.012 ops/s
# Warmup Iteration  14: 14980.805 ops/s
# Warmup Iteration  15: 14785.170 ops/s
# Warmup Iteration  16: 14771.039 ops/s
# Warmup Iteration  17: 14658.110 ops/s
# Warmup Iteration  18: 14612.074 ops/s
# Warmup Iteration  19: 14553.222 ops/s
# Warmup Iteration  20: 14576.344 ops/s
# Warmup Iteration  21: 14678.231 ops/s
# Warmup Iteration  22: 14658.355 ops/s
# Warmup Iteration  23: 14597.286 ops/s
# Warmup Iteration  24: 14563.648 ops/s
# Warmup Iteration  25: 14690.516 ops/s
# Warmup Iteration  26: 14683.427 ops/s
# Warmup Iteration  27: 14880.875 ops/s
# Warmup Iteration  28: 14586.774 ops/s
# Warmup Iteration  29: 14571.326 ops/s
# Warmup Iteration  30: 14612.912 ops/s
Iteration   1: 14472.431 ops/s
Iteration   2: 14223.374 ops/s
Iteration   3: 14617.515 ops/s
Iteration   4: 14451.787 ops/s
Iteration   5: 14393.076 ops/s
Iteration   6: 14429.304 ops/s
Iteration   7: 14975.229 ops/s
Iteration   8: 14863.497 ops/s
Iteration   9: 14362.835 ops/s
Iteration  10: 14485.266 ops/s
Iteration  11: 14599.461 ops/s
Iteration  12: 14259.781 ops/s
Iteration  13: 14530.830 ops/s
Iteration  14: 14480.743 ops/s
Iteration  15: 14395.917 ops/s
Iteration  16: 14495.610 ops/s
Iteration  17: 14296.055 ops/s
Iteration  18: 14541.137 ops/s
Iteration  19: 14845.440 ops/s
Iteration  20: 14991.494 ops/s
Iteration  21: 15038.248 ops/s
Iteration  22: 14525.507 ops/s
Iteration  23: 14303.347 ops/s
Iteration  24: 14432.610 ops/s
Iteration  25: 14228.244 ops/s
Iteration  26: 14589.432 ops/s
Iteration  27: 14351.094 ops/s
Iteration  28: 15063.049 ops/s
Iteration  29: 14974.637 ops/s
Iteration  30: 15119.431 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_groupByEach":
  14577.879 ±(99.9%) 182.019 ops/s [Average]
  (min, avg, max) = (14223.374, 14577.879, 15119.431), stdev = 272.438
  CI (99.9%): [14395.860, 14759.898] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt      Score     Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_groupByEach  thrpt   30  14577.879 ± 182.019  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1574140.890 ops/s
# Warmup Iteration   2: 3001049.573 ops/s
# Warmup Iteration   3: 3283535.053 ops/s
# Warmup Iteration   4: 3322781.183 ops/s
# Warmup Iteration   5: 2895711.956 ops/s
# Warmup Iteration   6: 3108032.659 ops/s
# Warmup Iteration   7: 3325419.625 ops/s
# Warmup Iteration   8: 3329108.801 ops/s
# Warmup Iteration   9: 3329998.400 ops/s
# Warmup Iteration  10: 3339363.124 ops/s
# Warmup Iteration  11: 3296674.854 ops/s
# Warmup Iteration  12: 3310931.481 ops/s
# Warmup Iteration  13: 3343940.472 ops/s
# Warmup Iteration  14: 3365741.281 ops/s
# Warmup Iteration  15: 3340262.900 ops/s
# Warmup Iteration  16: 3285382.515 ops/s
# Warmup Iteration  17: 3304980.380 ops/s
# Warmup Iteration  18: 3355117.372 ops/s
# Warmup Iteration  19: 3341680.950 ops/s
# Warmup Iteration  20: 3330568.775 ops/s
# Warmup Iteration  21: 3380529.637 ops/s
# Warmup Iteration  22: 3422478.554 ops/s
# Warmup Iteration  23: 3291507.417 ops/s
# Warmup Iteration  24: 3340220.794 ops/s
# Warmup Iteration  25: 3386674.282 ops/s
# Warmup Iteration  26: 3463623.253 ops/s
# Warmup Iteration  27: 3377951.236 ops/s
# Warmup Iteration  28: 3374146.325 ops/s
# Warmup Iteration  29: 3320840.039 ops/s
# Warmup Iteration  30: 3305904.804 ops/s
Iteration   1: 3488662.441 ops/s
Iteration   2: 3434306.224 ops/s
Iteration   3: 3365045.279 ops/s
Iteration   4: 3385091.083 ops/s
Iteration   5: 3349951.992 ops/s
Iteration   6: 3302892.751 ops/s
Iteration   7: 3296481.890 ops/s
Iteration   8: 3305702.902 ops/s
Iteration   9: 3325942.736 ops/s
Iteration  10: 3338418.449 ops/s
Iteration  11: 3377587.756 ops/s
Iteration  12: 3315989.632 ops/s
Iteration  13: 3370122.230 ops/s
Iteration  14: 3503620.420 ops/s
Iteration  15: 3432149.011 ops/s
Iteration  16: 3485344.337 ops/s
Iteration  17: 3419603.201 ops/s
Iteration  18: 3264343.592 ops/s
Iteration  19: 3302538.156 ops/s
Iteration  20: 3292854.269 ops/s
Iteration  21: 3320704.064 ops/s
Iteration  22: 3294461.515 ops/s
Iteration  23: 3268366.817 ops/s
Iteration  24: 3304630.172 ops/s
Iteration  25: 3373459.457 ops/s
Iteration  26: 3402332.155 ops/s
Iteration  27: 3302241.346 ops/s
Iteration  28: 3324768.917 ops/s
Iteration  29: 3312817.359 ops/s
Iteration  30: 3337262.949 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_groupByUniqueKey":
  3353256.437 ±(99.9%) 43747.392 ops/s [Average]
  (min, avg, max) = (3264343.592, 3353256.437, 3503620.420), stdev = 65479.041
  CI (99.9%): [3309509.045, 3397003.828] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  3353256.437 ± 43747.392  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1114528.366 ops/s
# Warmup Iteration   2: 2080352.813 ops/s
# Warmup Iteration   3: 2268409.930 ops/s
# Warmup Iteration   4: 2364356.806 ops/s
# Warmup Iteration   5: 2326974.296 ops/s
# Warmup Iteration   6: 2059130.560 ops/s
# Warmup Iteration   7: 2344047.176 ops/s
# Warmup Iteration   8: 2337219.960 ops/s
# Warmup Iteration   9: 2331117.678 ops/s
# Warmup Iteration  10: 2363773.392 ops/s
# Warmup Iteration  11: 2424594.491 ops/s
# Warmup Iteration  12: 2346148.152 ops/s
# Warmup Iteration  13: 2408732.062 ops/s
# Warmup Iteration  14: 2328248.546 ops/s
# Warmup Iteration  15: 2294962.127 ops/s
# Warmup Iteration  16: 2297446.098 ops/s
# Warmup Iteration  17: 2318225.751 ops/s
# Warmup Iteration  18: 2297976.914 ops/s
# Warmup Iteration  19: 2306693.010 ops/s
# Warmup Iteration  20: 2314638.591 ops/s
# Warmup Iteration  21: 2404366.007 ops/s
# Warmup Iteration  22: 2365514.225 ops/s
# Warmup Iteration  23: 2363835.119 ops/s
# Warmup Iteration  24: 2312832.747 ops/s
# Warmup Iteration  25: 2287970.572 ops/s
# Warmup Iteration  26: 2301306.805 ops/s
# Warmup Iteration  27: 2314668.478 ops/s
# Warmup Iteration  28: 2317148.752 ops/s
# Warmup Iteration  29: 2281143.418 ops/s
# Warmup Iteration  30: 2392461.952 ops/s
Iteration   1: 2401216.669 ops/s
Iteration   2: 2302525.055 ops/s
Iteration   3: 2283589.274 ops/s
Iteration   4: 2310401.491 ops/s
Iteration   5: 2445823.149 ops/s
Iteration   6: 2439335.680 ops/s
Iteration   7: 2348350.024 ops/s
Iteration   8: 2345021.838 ops/s
Iteration   9: 2351054.964 ops/s
Iteration  10: 2353117.620 ops/s
Iteration  11: 2302223.308 ops/s
Iteration  12: 2387530.974 ops/s
Iteration  13: 2409874.369 ops/s
Iteration  14: 2322547.242 ops/s
Iteration  15: 2280889.838 ops/s
Iteration  16: 2295964.546 ops/s
Iteration  17: 2314225.691 ops/s
Iteration  18: 2330536.434 ops/s
Iteration  19: 2268712.755 ops/s
Iteration  20: 2299762.259 ops/s
Iteration  21: 2351174.912 ops/s
Iteration  22: 2327994.534 ops/s
Iteration  23: 2303124.850 ops/s
Iteration  24: 2311273.867 ops/s
Iteration  25: 2352260.603 ops/s
Iteration  26: 2321880.116 ops/s
Iteration  27: 2426320.016 ops/s
Iteration  28: 2448386.058 ops/s
Iteration  29: 2375709.394 ops/s
Iteration  30: 2339544.035 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_groupByUniqueKey_target":
  2345012.386 ±(99.9%) 33994.759 ops/s [Average]
  (min, avg, max) = (2268712.755, 2345012.386, 2448386.058), stdev = 50881.759
  CI (99.9%): [2311017.626, 2379007.145] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  2345012.386 ± 33994.759  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 345861.795 ops/s
# Warmup Iteration   2: 397834.583 ops/s
# Warmup Iteration   3: 543285.666 ops/s
# Warmup Iteration   4: 524150.487 ops/s
# Warmup Iteration   5: 515143.300 ops/s
# Warmup Iteration   6: 532444.453 ops/s
# Warmup Iteration   7: 521265.145 ops/s
# Warmup Iteration   8: 523909.141 ops/s
# Warmup Iteration   9: 527147.048 ops/s
# Warmup Iteration  10: 524067.501 ops/s
# Warmup Iteration  11: 439196.267 ops/s
# Warmup Iteration  12: 502808.442 ops/s
# Warmup Iteration  13: 516082.426 ops/s
# Warmup Iteration  14: 517833.621 ops/s
# Warmup Iteration  15: 528759.668 ops/s
# Warmup Iteration  16: 532697.137 ops/s
# Warmup Iteration  17: 538456.404 ops/s
# Warmup Iteration  18: 545512.231 ops/s
# Warmup Iteration  19: 543323.166 ops/s
# Warmup Iteration  20: 545266.866 ops/s
# Warmup Iteration  21: 549451.034 ops/s
# Warmup Iteration  22: 544878.492 ops/s
# Warmup Iteration  23: 541847.779 ops/s
# Warmup Iteration  24: 538568.977 ops/s
# Warmup Iteration  25: 556570.193 ops/s
# Warmup Iteration  26: 567676.362 ops/s
# Warmup Iteration  27: 567870.166 ops/s
# Warmup Iteration  28: 554826.801 ops/s
# Warmup Iteration  29: 533269.944 ops/s
# Warmup Iteration  30: 543769.796 ops/s
Iteration   1: 547720.044 ops/s
Iteration   2: 530772.960 ops/s
Iteration   3: 529712.283 ops/s
Iteration   4: 533780.052 ops/s
Iteration   5: 536165.890 ops/s
Iteration   6: 532453.667 ops/s
Iteration   7: 532319.670 ops/s
Iteration   8: 532805.180 ops/s
Iteration   9: 529104.680 ops/s
Iteration  10: 536239.601 ops/s
Iteration  11: 538120.409 ops/s
Iteration  12: 535408.927 ops/s
Iteration  13: 541790.045 ops/s
Iteration  14: 532517.885 ops/s
Iteration  15: 548499.196 ops/s
Iteration  16: 546389.798 ops/s
Iteration  17: 543514.655 ops/s
Iteration  18: 541851.156 ops/s
Iteration  19: 530202.949 ops/s
Iteration  20: 538428.836 ops/s
Iteration  21: 554081.419 ops/s
Iteration  22: 566770.980 ops/s
Iteration  23: 567431.702 ops/s
Iteration  24: 566047.509 ops/s
Iteration  25: 545226.559 ops/s
Iteration  26: 529334.052 ops/s
Iteration  27: 534488.748 ops/s
Iteration  28: 537687.176 ops/s
Iteration  29: 547919.928 ops/s
Iteration  30: 537988.424 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate":
  540825.813 ±(99.9%) 7323.711 ops/s [Average]
  (min, avg, max) = (529104.680, 540825.813, 567431.702), stdev = 10961.787
  CI (99.9%): [533502.101, 548149.524] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate  thrpt   30  540825.813 ± 7323.711  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 344337.945 ops/s
# Warmup Iteration   2: 387456.312 ops/s
# Warmup Iteration   3: 484096.331 ops/s
# Warmup Iteration   4: 503397.948 ops/s
# Warmup Iteration   5: 521709.188 ops/s
# Warmup Iteration   6: 518895.033 ops/s
# Warmup Iteration   7: 531693.393 ops/s
# Warmup Iteration   8: 515137.077 ops/s
# Warmup Iteration   9: 512618.120 ops/s
# Warmup Iteration  10: 514746.042 ops/s
# Warmup Iteration  11: 507336.563 ops/s
# Warmup Iteration  12: 489920.620 ops/s
# Warmup Iteration  13: 449801.733 ops/s
# Warmup Iteration  14: 520704.301 ops/s
# Warmup Iteration  15: 513654.644 ops/s
# Warmup Iteration  16: 518632.572 ops/s
# Warmup Iteration  17: 541634.032 ops/s
# Warmup Iteration  18: 538183.352 ops/s
# Warmup Iteration  19: 535383.651 ops/s
# Warmup Iteration  20: 528680.428 ops/s
# Warmup Iteration  21: 528218.786 ops/s
# Warmup Iteration  22: 532376.453 ops/s
# Warmup Iteration  23: 532687.844 ops/s
# Warmup Iteration  24: 557853.208 ops/s
# Warmup Iteration  25: 543210.110 ops/s
# Warmup Iteration  26: 539194.353 ops/s
# Warmup Iteration  27: 535745.828 ops/s
# Warmup Iteration  28: 536137.602 ops/s
# Warmup Iteration  29: 530783.095 ops/s
# Warmup Iteration  30: 527005.122 ops/s
Iteration   1: 531630.699 ops/s
Iteration   2: 520061.486 ops/s
Iteration   3: 530792.159 ops/s
Iteration   4: 529423.070 ops/s
Iteration   5: 525429.417 ops/s
Iteration   6: 526478.109 ops/s
Iteration   7: 516232.704 ops/s
Iteration   8: 526181.737 ops/s
Iteration   9: 528351.438 ops/s
Iteration  10: 535216.088 ops/s
Iteration  11: 524760.986 ops/s
Iteration  12: 527824.376 ops/s
Iteration  13: 517295.599 ops/s
Iteration  14: 538774.391 ops/s
Iteration  15: 532024.112 ops/s
Iteration  16: 557781.268 ops/s
Iteration  17: 537822.227 ops/s
Iteration  18: 538550.223 ops/s
Iteration  19: 523370.475 ops/s
Iteration  20: 539512.010 ops/s
Iteration  21: 530207.212 ops/s
Iteration  22: 552272.170 ops/s
Iteration  23: 526252.919 ops/s
Iteration  24: 529507.483 ops/s
Iteration  25: 530769.067 ops/s
Iteration  26: 529322.201 ops/s
Iteration  27: 561419.739 ops/s
Iteration  28: 558144.886 ops/s
Iteration  29: 536130.182 ops/s
Iteration  30: 529993.110 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate":
  533051.051 ±(99.9%) 7581.195 ops/s [Average]
  (min, avg, max) = (516232.704, 533051.051, 561419.739), stdev = 11347.177
  CI (99.9%): [525469.856, 540632.246] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate  thrpt   30  533051.051 ± 7581.195  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 581185.659 ops/s
# Warmup Iteration   2: 665192.810 ops/s
# Warmup Iteration   3: 893273.005 ops/s
# Warmup Iteration   4: 883546.890 ops/s
# Warmup Iteration   5: 884546.175 ops/s
# Warmup Iteration   6: 915877.000 ops/s
# Warmup Iteration   7: 864742.640 ops/s
# Warmup Iteration   8: 869212.057 ops/s
# Warmup Iteration   9: 888608.453 ops/s
# Warmup Iteration  10: 749910.013 ops/s
# Warmup Iteration  11: 868615.313 ops/s
# Warmup Iteration  12: 924192.774 ops/s
# Warmup Iteration  13: 907886.174 ops/s
# Warmup Iteration  14: 863223.424 ops/s
# Warmup Iteration  15: 870365.091 ops/s
# Warmup Iteration  16: 852030.320 ops/s
# Warmup Iteration  17: 899725.216 ops/s
# Warmup Iteration  18: 893519.450 ops/s
# Warmup Iteration  19: 903871.196 ops/s
# Warmup Iteration  20: 878625.829 ops/s
# Warmup Iteration  21: 869213.902 ops/s
# Warmup Iteration  22: 904114.149 ops/s
# Warmup Iteration  23: 927440.465 ops/s
# Warmup Iteration  24: 898139.015 ops/s
# Warmup Iteration  25: 890106.677 ops/s
# Warmup Iteration  26: 899498.709 ops/s
# Warmup Iteration  27: 909131.131 ops/s
# Warmup Iteration  28: 886451.456 ops/s
# Warmup Iteration  29: 898881.077 ops/s
# Warmup Iteration  30: 884823.144 ops/s
Iteration   1: 897475.952 ops/s
Iteration   2: 926966.344 ops/s
Iteration   3: 927517.003 ops/s
Iteration   4: 926316.602 ops/s
Iteration   5: 890173.651 ops/s
Iteration   6: 862446.064 ops/s
Iteration   7: 897362.488 ops/s
Iteration   8: 894564.078 ops/s
Iteration   9: 880780.503 ops/s
Iteration  10: 899503.893 ops/s
Iteration  11: 893858.015 ops/s
Iteration  12: 883005.926 ops/s
Iteration  13: 904057.467 ops/s
Iteration  14: 897453.217 ops/s
Iteration  15: 902840.957 ops/s
Iteration  16: 884044.065 ops/s
Iteration  17: 897403.315 ops/s
Iteration  18: 909012.444 ops/s
Iteration  19: 890495.470 ops/s
Iteration  20: 917069.081 ops/s
Iteration  21: 923934.800 ops/s
Iteration  22: 905189.430 ops/s
Iteration  23: 899316.768 ops/s
Iteration  24: 920334.185 ops/s
Iteration  25: 918658.568 ops/s
Iteration  26: 927792.400 ops/s
Iteration  27: 914652.910 ops/s
Iteration  28: 905115.754 ops/s
Iteration  29: 898685.628 ops/s
Iteration  30: 901912.173 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_indexOf":
  903264.638 ±(99.9%) 10555.723 ops/s [Average]
  (min, avg, max) = (862446.064, 903264.638, 927792.400), stdev = 15799.310
  CI (99.9%): [892708.915, 913820.361] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_indexOf  thrpt   30  903264.638 ± 10555.723  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 742553.698 ops/s
# Warmup Iteration   2: 1266102.871 ops/s
# Warmup Iteration   3: 1407786.634 ops/s
# Warmup Iteration   4: 1425705.971 ops/s
# Warmup Iteration   5: 1426118.255 ops/s
# Warmup Iteration   6: 1165453.586 ops/s
# Warmup Iteration   7: 1406358.781 ops/s
# Warmup Iteration   8: 1407752.893 ops/s
# Warmup Iteration   9: 1421597.609 ops/s
# Warmup Iteration  10: 1413615.201 ops/s
# Warmup Iteration  11: 1448506.078 ops/s
# Warmup Iteration  12: 1416933.171 ops/s
# Warmup Iteration  13: 1403349.661 ops/s
# Warmup Iteration  14: 1406409.121 ops/s
# Warmup Iteration  15: 1492090.347 ops/s
# Warmup Iteration  16: 1421454.154 ops/s
# Warmup Iteration  17: 1453726.753 ops/s
# Warmup Iteration  18: 1467921.807 ops/s
# Warmup Iteration  19: 1424960.554 ops/s
# Warmup Iteration  20: 1424747.224 ops/s
# Warmup Iteration  21: 1458258.176 ops/s
# Warmup Iteration  22: 1457100.124 ops/s
# Warmup Iteration  23: 1488387.108 ops/s
# Warmup Iteration  24: 1414963.985 ops/s
# Warmup Iteration  25: 1410405.036 ops/s
# Warmup Iteration  26: 1391608.749 ops/s
# Warmup Iteration  27: 1389184.376 ops/s
# Warmup Iteration  28: 1424460.359 ops/s
# Warmup Iteration  29: 1490160.429 ops/s
# Warmup Iteration  30: 1470585.154 ops/s
Iteration   1: 1450471.509 ops/s
Iteration   2: 1392739.320 ops/s
Iteration   3: 1405413.955 ops/s
Iteration   4: 1416152.771 ops/s
Iteration   5: 1444856.278 ops/s
Iteration   6: 1474627.718 ops/s
Iteration   7: 1384321.159 ops/s
Iteration   8: 1363948.870 ops/s
Iteration   9: 1395081.681 ops/s
Iteration  10: 1469305.619 ops/s
Iteration  11: 1383264.852 ops/s
Iteration  12: 1384485.866 ops/s
Iteration  13: 1448024.984 ops/s
Iteration  14: 1427113.271 ops/s
Iteration  15: 1443905.574 ops/s
Iteration  16: 1482997.272 ops/s
Iteration  17: 1405810.556 ops/s
Iteration  18: 1362103.133 ops/s
Iteration  19: 1432901.135 ops/s
Iteration  20: 1430549.092 ops/s
Iteration  21: 1402649.056 ops/s
Iteration  22: 1449098.970 ops/s
Iteration  23: 1488953.238 ops/s
Iteration  24: 1462483.348 ops/s
Iteration  25: 1490461.071 ops/s
Iteration  26: 1490488.183 ops/s
Iteration  27: 1445233.824 ops/s
Iteration  28: 1406789.741 ops/s
Iteration  29: 1434794.125 ops/s
Iteration  30: 1453895.577 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_injectInto":
  1430764.058 ±(99.9%) 25160.980 ops/s [Average]
  (min, avg, max) = (1362103.133, 1430764.058, 1490488.183), stdev = 37659.773
  CI (99.9%): [1405603.079, 1455925.038] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_injectInto  thrpt   30  1430764.058 ± 25160.980  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 759516.734 ops/s
# Warmup Iteration   2: 1343545.915 ops/s
# Warmup Iteration   3: 1510563.007 ops/s
# Warmup Iteration   4: 1505344.446 ops/s
# Warmup Iteration   5: 1508646.637 ops/s
# Warmup Iteration   6: 1253015.960 ops/s
# Warmup Iteration   7: 1518279.884 ops/s
# Warmup Iteration   8: 1536094.309 ops/s
# Warmup Iteration   9: 1516730.080 ops/s
# Warmup Iteration  10: 1517177.033 ops/s
# Warmup Iteration  11: 1506002.864 ops/s
# Warmup Iteration  12: 1517706.222 ops/s
# Warmup Iteration  13: 1500727.490 ops/s
# Warmup Iteration  14: 1518522.329 ops/s
# Warmup Iteration  15: 1507090.058 ops/s
# Warmup Iteration  16: 1511123.287 ops/s
# Warmup Iteration  17: 1538318.745 ops/s
# Warmup Iteration  18: 1536204.297 ops/s
# Warmup Iteration  19: 1554934.783 ops/s
# Warmup Iteration  20: 1517454.528 ops/s
# Warmup Iteration  21: 1512769.313 ops/s
# Warmup Iteration  22: 1521520.064 ops/s
# Warmup Iteration  23: 1498233.682 ops/s
# Warmup Iteration  24: 1531736.333 ops/s
# Warmup Iteration  25: 1506611.093 ops/s
# Warmup Iteration  26: 1553629.335 ops/s
# Warmup Iteration  27: 1517859.300 ops/s
# Warmup Iteration  28: 1601425.160 ops/s
# Warmup Iteration  29: 1528271.870 ops/s
# Warmup Iteration  30: 1500816.591 ops/s
Iteration   1: 1504301.402 ops/s
Iteration   2: 1526976.292 ops/s
Iteration   3: 1525852.088 ops/s
Iteration   4: 1545505.390 ops/s
Iteration   5: 1517728.538 ops/s
Iteration   6: 1517300.028 ops/s
Iteration   7: 1531840.019 ops/s
Iteration   8: 1544180.309 ops/s
Iteration   9: 1539370.303 ops/s
Iteration  10: 1540854.117 ops/s
Iteration  11: 1558781.130 ops/s
Iteration  12: 1525283.861 ops/s
Iteration  13: 1548946.503 ops/s
Iteration  14: 1517671.700 ops/s
Iteration  15: 1509002.281 ops/s
Iteration  16: 1525796.377 ops/s
Iteration  17: 1536455.121 ops/s
Iteration  18: 1500294.878 ops/s
Iteration  19: 1504603.780 ops/s
Iteration  20: 1503032.092 ops/s
Iteration  21: 1511699.549 ops/s
Iteration  22: 1493775.932 ops/s
Iteration  23: 1516384.316 ops/s
Iteration  24: 1498949.443 ops/s
Iteration  25: 1520735.580 ops/s
Iteration  26: 1498551.529 ops/s
Iteration  27: 1492752.435 ops/s
Iteration  28: 1527027.674 ops/s
Iteration  29: 1538426.126 ops/s
Iteration  30: 1529282.241 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_injectIntoDouble":
  1521712.034 ±(99.9%) 11798.642 ops/s [Average]
  (min, avg, max) = (1492752.435, 1521712.034, 1558781.130), stdev = 17659.653
  CI (99.9%): [1509913.393, 1533510.676] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  1521712.034 ± 11798.642  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 876205.960 ops/s
# Warmup Iteration   2: 1489114.486 ops/s
# Warmup Iteration   3: 1704699.750 ops/s
# Warmup Iteration   4: 1705366.839 ops/s
# Warmup Iteration   5: 1693011.795 ops/s
# Warmup Iteration   6: 1391283.581 ops/s
# Warmup Iteration   7: 1671628.368 ops/s
# Warmup Iteration   8: 1708906.091 ops/s
# Warmup Iteration   9: 1719150.550 ops/s
# Warmup Iteration  10: 1669525.423 ops/s
# Warmup Iteration  11: 1690149.127 ops/s
# Warmup Iteration  12: 1719478.358 ops/s
# Warmup Iteration  13: 1663993.407 ops/s
# Warmup Iteration  14: 1682696.531 ops/s
# Warmup Iteration  15: 1675968.170 ops/s
# Warmup Iteration  16: 1762719.897 ops/s
# Warmup Iteration  17: 1663088.212 ops/s
# Warmup Iteration  18: 1679556.227 ops/s
# Warmup Iteration  19: 1685959.046 ops/s
# Warmup Iteration  20: 1674754.461 ops/s
# Warmup Iteration  21: 1667783.694 ops/s
# Warmup Iteration  22: 1688198.671 ops/s
# Warmup Iteration  23: 1676081.020 ops/s
# Warmup Iteration  24: 1665060.650 ops/s
# Warmup Iteration  25: 1682180.948 ops/s
# Warmup Iteration  26: 1685323.713 ops/s
# Warmup Iteration  27: 1730065.276 ops/s
# Warmup Iteration  28: 1762148.401 ops/s
# Warmup Iteration  29: 1668525.250 ops/s
# Warmup Iteration  30: 1677418.792 ops/s
Iteration   1: 1633809.705 ops/s
Iteration   2: 1671730.551 ops/s
Iteration   3: 1658214.234 ops/s
Iteration   4: 1748851.175 ops/s
Iteration   5: 1674354.712 ops/s
Iteration   6: 1661882.272 ops/s
Iteration   7: 1720832.500 ops/s
Iteration   8: 1765578.924 ops/s
Iteration   9: 1772305.049 ops/s
Iteration  10: 1707267.003 ops/s
Iteration  11: 1671893.175 ops/s
Iteration  12: 1674775.092 ops/s
Iteration  13: 1667080.725 ops/s
Iteration  14: 1704211.300 ops/s
Iteration  15: 1745263.016 ops/s
Iteration  16: 1774884.570 ops/s
Iteration  17: 1773081.453 ops/s
Iteration  18: 1773217.509 ops/s
Iteration  19: 1758484.512 ops/s
Iteration  20: 1668635.615 ops/s
Iteration  21: 1655057.230 ops/s
Iteration  22: 1679338.785 ops/s
Iteration  23: 1638174.975 ops/s
Iteration  24: 1668989.767 ops/s
Iteration  25: 1671710.820 ops/s
Iteration  26: 1684028.725 ops/s
Iteration  27: 1673409.734 ops/s
Iteration  28: 1701822.975 ops/s
Iteration  29: 1708369.052 ops/s
Iteration  30: 1713893.502 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_injectIntoFloat":
  1700704.955 ±(99.9%) 29352.287 ops/s [Average]
  (min, avg, max) = (1633809.705, 1700704.955, 1774884.570), stdev = 43933.125
  CI (99.9%): [1671352.668, 1730057.243] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  1700704.955 ± 29352.287  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 753401.163 ops/s
# Warmup Iteration   2: 1283616.119 ops/s
# Warmup Iteration   3: 1491078.664 ops/s
# Warmup Iteration   4: 1484478.516 ops/s
# Warmup Iteration   5: 1481184.991 ops/s
# Warmup Iteration   6: 1223636.177 ops/s
# Warmup Iteration   7: 1541426.377 ops/s
# Warmup Iteration   8: 1556003.458 ops/s
# Warmup Iteration   9: 1566837.521 ops/s
# Warmup Iteration  10: 1563966.730 ops/s
# Warmup Iteration  11: 1516253.410 ops/s
# Warmup Iteration  12: 1482934.238 ops/s
# Warmup Iteration  13: 1478911.342 ops/s
# Warmup Iteration  14: 1482364.694 ops/s
# Warmup Iteration  15: 1482621.951 ops/s
# Warmup Iteration  16: 1524533.805 ops/s
# Warmup Iteration  17: 1494962.732 ops/s
# Warmup Iteration  18: 1482649.838 ops/s
# Warmup Iteration  19: 1542682.033 ops/s
# Warmup Iteration  20: 1524139.379 ops/s
# Warmup Iteration  21: 1515394.611 ops/s
# Warmup Iteration  22: 1512423.513 ops/s
# Warmup Iteration  23: 1480218.485 ops/s
# Warmup Iteration  24: 1518916.327 ops/s
# Warmup Iteration  25: 1497175.216 ops/s
# Warmup Iteration  26: 1472225.988 ops/s
# Warmup Iteration  27: 1496349.623 ops/s
# Warmup Iteration  28: 1485970.521 ops/s
# Warmup Iteration  29: 1490585.280 ops/s
# Warmup Iteration  30: 1524683.283 ops/s
Iteration   1: 1484280.672 ops/s
Iteration   2: 1477586.950 ops/s
Iteration   3: 1467786.819 ops/s
Iteration   4: 1486543.490 ops/s
Iteration   5: 1476058.338 ops/s
Iteration   6: 1465564.397 ops/s
Iteration   7: 1463721.616 ops/s
Iteration   8: 1489246.609 ops/s
Iteration   9: 1524188.856 ops/s
Iteration  10: 1478357.974 ops/s
Iteration  11: 1567154.624 ops/s
Iteration  12: 1521045.944 ops/s
Iteration  13: 1470408.902 ops/s
Iteration  14: 1486538.177 ops/s
Iteration  15: 1491652.624 ops/s
Iteration  16: 1545876.954 ops/s
Iteration  17: 1482581.026 ops/s
Iteration  18: 1480624.430 ops/s
Iteration  19: 1473318.315 ops/s
Iteration  20: 1474501.789 ops/s
Iteration  21: 1508868.935 ops/s
Iteration  22: 1493080.594 ops/s
Iteration  23: 1507209.116 ops/s
Iteration  24: 1517342.236 ops/s
Iteration  25: 1559804.072 ops/s
Iteration  26: 1487472.048 ops/s
Iteration  27: 1501633.986 ops/s
Iteration  28: 1507639.444 ops/s
Iteration  29: 1498623.784 ops/s
Iteration  30: 1505893.525 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_injectIntoInt":
  1496486.875 ±(99.9%) 17710.272 ops/s [Average]
  (min, avg, max) = (1463721.616, 1496486.875, 1567154.624), stdev = 26507.903
  CI (99.9%): [1478776.603, 1514197.147] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_injectIntoInt  thrpt   30  1496486.875 ± 17710.272  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 877812.290 ops/s
# Warmup Iteration   2: 1468206.561 ops/s
# Warmup Iteration   3: 1645409.311 ops/s
# Warmup Iteration   4: 1630582.903 ops/s
# Warmup Iteration   5: 1619623.651 ops/s
# Warmup Iteration   6: 1374466.883 ops/s
# Warmup Iteration   7: 1634522.416 ops/s
# Warmup Iteration   8: 1626609.647 ops/s
# Warmup Iteration   9: 1704083.719 ops/s
# Warmup Iteration  10: 1669363.794 ops/s
# Warmup Iteration  11: 1693322.817 ops/s
# Warmup Iteration  12: 1664870.516 ops/s
# Warmup Iteration  13: 1664921.177 ops/s
# Warmup Iteration  14: 1662497.766 ops/s
# Warmup Iteration  15: 1679240.622 ops/s
# Warmup Iteration  16: 1736588.217 ops/s
# Warmup Iteration  17: 1704880.233 ops/s
# Warmup Iteration  18: 1678367.436 ops/s
# Warmup Iteration  19: 1679952.543 ops/s
# Warmup Iteration  20: 1742076.981 ops/s
# Warmup Iteration  21: 1742677.003 ops/s
# Warmup Iteration  22: 1739876.984 ops/s
# Warmup Iteration  23: 1739754.145 ops/s
# Warmup Iteration  24: 1680234.104 ops/s
# Warmup Iteration  25: 1692813.137 ops/s
# Warmup Iteration  26: 1700512.509 ops/s
# Warmup Iteration  27: 1704091.226 ops/s
# Warmup Iteration  28: 1688630.406 ops/s
# Warmup Iteration  29: 1720693.122 ops/s
# Warmup Iteration  30: 1747123.848 ops/s
Iteration   1: 1739030.247 ops/s
Iteration   2: 1716182.099 ops/s
Iteration   3: 1747340.086 ops/s
Iteration   4: 1751546.671 ops/s
Iteration   5: 1753794.884 ops/s
Iteration   6: 1748168.271 ops/s
Iteration   7: 1749416.894 ops/s
Iteration   8: 1748498.680 ops/s
Iteration   9: 1744114.210 ops/s
Iteration  10: 1734684.487 ops/s
Iteration  11: 1726479.256 ops/s
Iteration  12: 1745252.427 ops/s
Iteration  13: 1723870.235 ops/s
Iteration  14: 1726048.770 ops/s
Iteration  15: 1703809.653 ops/s
Iteration  16: 1734792.089 ops/s
Iteration  17: 1729686.402 ops/s
Iteration  18: 1714945.223 ops/s
Iteration  19: 1682350.117 ops/s
Iteration  20: 1646962.716 ops/s
Iteration  21: 1687948.488 ops/s
Iteration  22: 1672633.583 ops/s
Iteration  23: 1671319.822 ops/s
Iteration  24: 1720392.208 ops/s
Iteration  25: 1744726.651 ops/s
Iteration  26: 1749508.189 ops/s
Iteration  27: 1734822.277 ops/s
Iteration  28: 1695478.057 ops/s
Iteration  29: 1714180.544 ops/s
Iteration  30: 1690333.458 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_injectIntoLong":
  1721610.556 ±(99.9%) 18975.612 ops/s [Average]
  (min, avg, max) = (1646962.716, 1721610.556, 1753794.884), stdev = 28401.805
  CI (99.9%): [1702634.944, 1740586.169] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_injectIntoLong  thrpt   30  1721610.556 ± 18975.612  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_injectIntoWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_injectIntoWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1032460.993 ops/s
# Warmup Iteration   2: 1702414.363 ops/s
# Warmup Iteration   3: 1958869.075 ops/s
# Warmup Iteration   4: 1981562.232 ops/s
# Warmup Iteration   5: 1938319.395 ops/s
# Warmup Iteration   6: 1606657.271 ops/s
# Warmup Iteration   7: 1966385.106 ops/s
# Warmup Iteration   8: 1973334.507 ops/s
# Warmup Iteration   9: 1982279.124 ops/s
# Warmup Iteration  10: 1960708.533 ops/s
# Warmup Iteration  11: 1953644.109 ops/s
# Warmup Iteration  12: 1978771.649 ops/s
# Warmup Iteration  13: 2004835.677 ops/s
# Warmup Iteration  14: 2017556.734 ops/s
# Warmup Iteration  15: 2029764.245 ops/s
# Warmup Iteration  16: 1963593.300 ops/s
# Warmup Iteration  17: 1947512.141 ops/s
# Warmup Iteration  18: 1993459.039 ops/s
# Warmup Iteration  19: 2001413.307 ops/s
# Warmup Iteration  20: 1939702.275 ops/s
# Warmup Iteration  21: 1994716.891 ops/s
# Warmup Iteration  22: 2009971.665 ops/s
# Warmup Iteration  23: 2034329.075 ops/s
# Warmup Iteration  24: 2001778.367 ops/s
# Warmup Iteration  25: 1997997.034 ops/s
# Warmup Iteration  26: 1955912.061 ops/s
# Warmup Iteration  27: 1954282.062 ops/s
# Warmup Iteration  28: 2019121.935 ops/s
# Warmup Iteration  29: 2031642.381 ops/s
# Warmup Iteration  30: 1972876.934 ops/s
Iteration   1: 1959379.402 ops/s
Iteration   2: 2007893.491 ops/s
Iteration   3: 2020377.379 ops/s
Iteration   4: 2000795.015 ops/s
Iteration   5: 1995081.836 ops/s
Iteration   6: 1982512.544 ops/s
Iteration   7: 1995853.761 ops/s
Iteration   8: 1988201.476 ops/s
Iteration   9: 1981247.129 ops/s
Iteration  10: 1951202.662 ops/s
Iteration  11: 1990380.851 ops/s
Iteration  12: 2029318.846 ops/s
Iteration  13: 2005471.961 ops/s
Iteration  14: 1990597.220 ops/s
Iteration  15: 2003133.133 ops/s
Iteration  16: 1980355.837 ops/s
Iteration  17: 1965503.450 ops/s
Iteration  18: 2020403.679 ops/s
Iteration  19: 2022399.406 ops/s
Iteration  20: 2034940.213 ops/s
Iteration  21: 2028078.628 ops/s
Iteration  22: 2009740.560 ops/s
Iteration  23: 1991726.673 ops/s
Iteration  24: 1984241.416 ops/s
Iteration  25: 1995116.423 ops/s
Iteration  26: 2020682.201 ops/s
Iteration  27: 2030712.362 ops/s
Iteration  28: 2028219.417 ops/s
Iteration  29: 2031071.643 ops/s
Iteration  30: 2022252.872 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_injectIntoWith":
  2002229.716 ±(99.9%) 15116.275 ops/s [Average]
  (min, avg, max) = (1951202.662, 2002229.716, 2034940.213), stdev = 22625.330
  CI (99.9%): [1987113.441, 2017345.991] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_injectIntoWith  thrpt   30  2002229.716 ± 15116.275  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1101985.194 ops/s
# Warmup Iteration   2: 2476934.670 ops/s
# Warmup Iteration   3: 2496109.547 ops/s
# Warmup Iteration   4: 2105879.377 ops/s
# Warmup Iteration   5: 2484844.030 ops/s
# Warmup Iteration   6: 2494706.482 ops/s
# Warmup Iteration   7: 2504946.644 ops/s
# Warmup Iteration   8: 2481307.471 ops/s
# Warmup Iteration   9: 2438973.938 ops/s
# Warmup Iteration  10: 2430812.664 ops/s
# Warmup Iteration  11: 2451684.353 ops/s
# Warmup Iteration  12: 2430665.089 ops/s
# Warmup Iteration  13: 2404363.465 ops/s
# Warmup Iteration  14: 2417080.760 ops/s
# Warmup Iteration  15: 2445822.135 ops/s
# Warmup Iteration  16: 2407263.605 ops/s
# Warmup Iteration  17: 2474229.541 ops/s
# Warmup Iteration  18: 2493846.638 ops/s
# Warmup Iteration  19: 2506954.890 ops/s
# Warmup Iteration  20: 2487452.090 ops/s
# Warmup Iteration  21: 2414182.259 ops/s
# Warmup Iteration  22: 2502866.553 ops/s
# Warmup Iteration  23: 2497813.801 ops/s
# Warmup Iteration  24: 2501929.538 ops/s
# Warmup Iteration  25: 2503741.106 ops/s
# Warmup Iteration  26: 2512359.830 ops/s
# Warmup Iteration  27: 2509840.995 ops/s
# Warmup Iteration  28: 2508262.088 ops/s
# Warmup Iteration  29: 2484957.892 ops/s
# Warmup Iteration  30: 2440186.439 ops/s
Iteration   1: 2475482.893 ops/s
Iteration   2: 2499094.425 ops/s
Iteration   3: 2501111.983 ops/s
Iteration   4: 2511510.734 ops/s
Iteration   5: 2446887.089 ops/s
Iteration   6: 2508467.159 ops/s
Iteration   7: 2487296.379 ops/s
Iteration   8: 2457034.148 ops/s
Iteration   9: 2507517.033 ops/s
Iteration  10: 2507785.566 ops/s
Iteration  11: 2461985.918 ops/s
Iteration  12: 2509881.859 ops/s
Iteration  13: 2504308.030 ops/s
Iteration  14: 2510741.333 ops/s
Iteration  15: 2510791.867 ops/s
Iteration  16: 2510446.815 ops/s
Iteration  17: 2505068.159 ops/s
Iteration  18: 2511141.278 ops/s
Iteration  19: 2506176.565 ops/s
Iteration  20: 2502695.089 ops/s
Iteration  21: 2501957.330 ops/s
Iteration  22: 2472413.777 ops/s
Iteration  23: 2493182.223 ops/s
Iteration  24: 2420124.453 ops/s
Iteration  25: 2467582.459 ops/s
Iteration  26: 2460389.008 ops/s
Iteration  27: 2378167.429 ops/s
Iteration  28: 2383024.805 ops/s
Iteration  29: 2402726.106 ops/s
Iteration  30: 2481884.736 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_isEmpty":
  2479895.888 ±(99.9%) 25980.738 ops/s [Average]
  (min, avg, max) = (2378167.429, 2479895.888, 2511510.734), stdev = 38886.749
  CI (99.9%): [2453915.150, 2505876.626] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_isEmpty  thrpt   30  2479895.888 ± 25980.738  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 158858.006 ops/s
# Warmup Iteration   2: 185374.816 ops/s
# Warmup Iteration   3: 242355.534 ops/s
# Warmup Iteration   4: 240243.431 ops/s
# Warmup Iteration   5: 238923.207 ops/s
# Warmup Iteration   6: 242396.865 ops/s
# Warmup Iteration   7: 242255.394 ops/s
# Warmup Iteration   8: 240675.031 ops/s
# Warmup Iteration   9: 241695.128 ops/s
# Warmup Iteration  10: 227284.471 ops/s
# Warmup Iteration  11: 218568.232 ops/s
# Warmup Iteration  12: 241414.143 ops/s
# Warmup Iteration  13: 242048.722 ops/s
# Warmup Iteration  14: 241920.683 ops/s
# Warmup Iteration  15: 240803.521 ops/s
# Warmup Iteration  16: 242070.373 ops/s
# Warmup Iteration  17: 250015.718 ops/s
# Warmup Iteration  18: 249696.259 ops/s
# Warmup Iteration  19: 249207.758 ops/s
# Warmup Iteration  20: 249818.658 ops/s
# Warmup Iteration  21: 249739.967 ops/s
# Warmup Iteration  22: 248932.314 ops/s
# Warmup Iteration  23: 249241.205 ops/s
# Warmup Iteration  24: 249541.954 ops/s
# Warmup Iteration  25: 249248.363 ops/s
# Warmup Iteration  26: 248640.856 ops/s
# Warmup Iteration  27: 249083.230 ops/s
# Warmup Iteration  28: 248781.011 ops/s
# Warmup Iteration  29: 249715.550 ops/s
# Warmup Iteration  30: 248968.827 ops/s
Iteration   1: 249730.164 ops/s
Iteration   2: 249078.192 ops/s
Iteration   3: 249432.742 ops/s
Iteration   4: 249097.432 ops/s
Iteration   5: 249034.347 ops/s
Iteration   6: 249014.548 ops/s
Iteration   7: 245595.767 ops/s
Iteration   8: 242557.139 ops/s
Iteration   9: 248454.406 ops/s
Iteration  10: 242517.450 ops/s
Iteration  11: 248317.343 ops/s
Iteration  12: 249693.100 ops/s
Iteration  13: 246055.492 ops/s
Iteration  14: 249388.552 ops/s
Iteration  15: 247871.445 ops/s
Iteration  16: 244861.779 ops/s
Iteration  17: 240622.656 ops/s
Iteration  18: 248037.931 ops/s
Iteration  19: 237701.487 ops/s
Iteration  20: 236799.205 ops/s
Iteration  21: 244256.649 ops/s
Iteration  22: 249846.952 ops/s
Iteration  23: 250059.966 ops/s
Iteration  24: 249369.685 ops/s
Iteration  25: 249789.322 ops/s
Iteration  26: 249100.316 ops/s
Iteration  27: 248327.167 ops/s
Iteration  28: 249042.648 ops/s
Iteration  29: 248871.505 ops/s
Iteration  30: 249084.190 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_iterator":
  247053.653 ±(99.9%) 2430.813 ops/s [Average]
  (min, avg, max) = (236799.205, 247053.653, 250059.966), stdev = 3638.326
  CI (99.9%): [244622.840, 249484.465] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_iterator  thrpt   30  247053.653 ± 2430.813  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 463136.893 ops/s
# Warmup Iteration   2: 617740.064 ops/s
# Warmup Iteration   3: 752748.919 ops/s
# Warmup Iteration   4: 747981.547 ops/s
# Warmup Iteration   5: 744295.836 ops/s
# Warmup Iteration   6: 725984.354 ops/s
# Warmup Iteration   7: 732075.032 ops/s
# Warmup Iteration   8: 607972.318 ops/s
# Warmup Iteration   9: 747184.223 ops/s
# Warmup Iteration  10: 744897.994 ops/s
# Warmup Iteration  11: 750771.857 ops/s
# Warmup Iteration  12: 744529.866 ops/s
# Warmup Iteration  13: 753925.302 ops/s
# Warmup Iteration  14: 733243.605 ops/s
# Warmup Iteration  15: 710090.357 ops/s
# Warmup Iteration  16: 740305.767 ops/s
# Warmup Iteration  17: 767209.492 ops/s
# Warmup Iteration  18: 780596.706 ops/s
# Warmup Iteration  19: 768944.123 ops/s
# Warmup Iteration  20: 756488.286 ops/s
# Warmup Iteration  21: 738382.217 ops/s
# Warmup Iteration  22: 778447.988 ops/s
# Warmup Iteration  23: 755565.322 ops/s
# Warmup Iteration  24: 743216.505 ops/s
# Warmup Iteration  25: 744706.305 ops/s
# Warmup Iteration  26: 742874.665 ops/s
# Warmup Iteration  27: 733879.671 ops/s
# Warmup Iteration  28: 742151.285 ops/s
# Warmup Iteration  29: 744007.400 ops/s
# Warmup Iteration  30: 754063.806 ops/s
Iteration   1: 751283.865 ops/s
Iteration   2: 738026.081 ops/s
Iteration   3: 745375.667 ops/s
Iteration   4: 740788.966 ops/s
Iteration   5: 765254.376 ops/s
Iteration   6: 776839.577 ops/s
Iteration   7: 744091.413 ops/s
Iteration   8: 751791.712 ops/s
Iteration   9: 779638.743 ops/s
Iteration  10: 762873.077 ops/s
Iteration  11: 741813.684 ops/s
Iteration  12: 734325.946 ops/s
Iteration  13: 744072.162 ops/s
Iteration  14: 741403.265 ops/s
Iteration  15: 774720.463 ops/s
Iteration  16: 785435.262 ops/s
Iteration  17: 760596.571 ops/s
Iteration  18: 755546.512 ops/s
Iteration  19: 746499.338 ops/s
Iteration  20: 735119.236 ops/s
Iteration  21: 729702.237 ops/s
Iteration  22: 747814.572 ops/s
Iteration  23: 736932.737 ops/s
Iteration  24: 737363.351 ops/s
Iteration  25: 756474.601 ops/s
Iteration  26: 750408.844 ops/s
Iteration  27: 772339.444 ops/s
Iteration  28: 761346.012 ops/s
Iteration  29: 748214.248 ops/s
Iteration  30: 732077.364 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_iteratorRemove":
  751605.644 ±(99.9%) 10091.327 ops/s [Average]
  (min, avg, max) = (729702.237, 751605.644, 785435.262), stdev = 15104.224
  CI (99.9%): [741514.317, 761696.971] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_iteratorRemove  thrpt   30  751605.644 ± 10091.327  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_iteratorRemove2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_iteratorRemove2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 160359267.538 ops/s
# Warmup Iteration   2: 296827993.406 ops/s
# Warmup Iteration   3: 252019948.570 ops/s
# Warmup Iteration   4: 301559707.395 ops/s
# Warmup Iteration   5: 296802200.950 ops/s
# Warmup Iteration   6: 299594238.562 ops/s
# Warmup Iteration   7: 296421113.161 ops/s
# Warmup Iteration   8: 306770253.026 ops/s
# Warmup Iteration   9: 300186156.152 ops/s
# Warmup Iteration  10: 301058947.146 ops/s
# Warmup Iteration  11: 296956042.727 ops/s
# Warmup Iteration  12: 297033582.578 ops/s
# Warmup Iteration  13: 299486359.510 ops/s
# Warmup Iteration  14: 302830075.231 ops/s
# Warmup Iteration  15: 302723117.245 ops/s
# Warmup Iteration  16: 298743109.717 ops/s
# Warmup Iteration  17: 303782627.145 ops/s
# Warmup Iteration  18: 298142935.300 ops/s
# Warmup Iteration  19: 296356013.332 ops/s
# Warmup Iteration  20: 302106825.038 ops/s
# Warmup Iteration  21: 300016243.446 ops/s
# Warmup Iteration  22: 302411335.540 ops/s
# Warmup Iteration  23: 302574459.787 ops/s
# Warmup Iteration  24: 303170054.928 ops/s
# Warmup Iteration  25: 303454700.951 ops/s
# Warmup Iteration  26: 303131812.879 ops/s
# Warmup Iteration  27: 296393643.050 ops/s
# Warmup Iteration  28: 297060095.144 ops/s
# Warmup Iteration  29: 294706325.783 ops/s
# Warmup Iteration  30: 297289590.990 ops/s
Iteration   1: 300422365.187 ops/s
Iteration   2: 305488624.347 ops/s
Iteration   3: 303133575.609 ops/s
Iteration   4: 303569036.302 ops/s
Iteration   5: 300713454.743 ops/s
Iteration   6: 302958327.821 ops/s
Iteration   7: 304942846.728 ops/s
Iteration   8: 301839430.934 ops/s
Iteration   9: 300103895.308 ops/s
Iteration  10: 298773016.013 ops/s
Iteration  11: 296989123.180 ops/s
Iteration  12: 298568333.570 ops/s
Iteration  13: 312386532.860 ops/s
Iteration  14: 313994068.976 ops/s
Iteration  15: 304370362.363 ops/s
Iteration  16: 301754940.926 ops/s
Iteration  17: 302323296.449 ops/s
Iteration  18: 299834471.714 ops/s
Iteration  19: 309986969.346 ops/s
Iteration  20: 310447863.129 ops/s
Iteration  21: 302824269.065 ops/s
Iteration  22: 301122771.981 ops/s
Iteration  23: 294871030.720 ops/s
Iteration  24: 296728786.376 ops/s
Iteration  25: 298587019.966 ops/s
Iteration  26: 303732846.401 ops/s
Iteration  27: 307731082.917 ops/s
Iteration  28: 304058846.873 ops/s
Iteration  29: 302031715.445 ops/s
Iteration  30: 302239392.370 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_iteratorRemove2":
  302884276.587 ±(99.9%) 3004127.897 ops/s [Average]
  (min, avg, max) = (294871030.720, 302884276.587, 313994068.976), stdev = 4496437.551
  CI (99.9%): [299880148.691, 305888404.484] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt          Score         Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_iteratorRemove2  thrpt   30  302884276.587 ± 3004127.897  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 486742.666 ops/s
# Warmup Iteration   2: 535620.709 ops/s
# Warmup Iteration   3: 652805.165 ops/s
# Warmup Iteration   4: 688271.879 ops/s
# Warmup Iteration   5: 679754.842 ops/s
# Warmup Iteration   6: 684539.485 ops/s
# Warmup Iteration   7: 697076.436 ops/s
# Warmup Iteration   8: 689526.045 ops/s
# Warmup Iteration   9: 687780.703 ops/s
# Warmup Iteration  10: 704423.553 ops/s
# Warmup Iteration  11: 691101.371 ops/s
# Warmup Iteration  12: 689388.725 ops/s
# Warmup Iteration  13: 578710.259 ops/s
# Warmup Iteration  14: 685869.789 ops/s
# Warmup Iteration  15: 673072.885 ops/s
# Warmup Iteration  16: 699141.792 ops/s
# Warmup Iteration  17: 705605.153 ops/s
# Warmup Iteration  18: 725650.865 ops/s
# Warmup Iteration  19: 719590.396 ops/s
# Warmup Iteration  20: 717582.270 ops/s
# Warmup Iteration  21: 735729.079 ops/s
# Warmup Iteration  22: 714841.979 ops/s
# Warmup Iteration  23: 707783.134 ops/s
# Warmup Iteration  24: 709563.059 ops/s
# Warmup Iteration  25: 723499.376 ops/s
# Warmup Iteration  26: 710170.904 ops/s
# Warmup Iteration  27: 726173.480 ops/s
# Warmup Iteration  28: 705634.551 ops/s
# Warmup Iteration  29: 711580.666 ops/s
# Warmup Iteration  30: 702957.091 ops/s
Iteration   1: 716436.403 ops/s
Iteration   2: 719885.213 ops/s
Iteration   3: 718201.939 ops/s
Iteration   4: 711117.478 ops/s
Iteration   5: 706149.616 ops/s
Iteration   6: 728798.468 ops/s
Iteration   7: 713834.505 ops/s
Iteration   8: 711434.622 ops/s
Iteration   9: 701327.500 ops/s
Iteration  10: 708681.672 ops/s
Iteration  11: 709944.864 ops/s
Iteration  12: 711243.188 ops/s
Iteration  13: 704884.871 ops/s
Iteration  14: 702095.477 ops/s
Iteration  15: 729386.377 ops/s
Iteration  16: 738680.827 ops/s
Iteration  17: 717167.227 ops/s
Iteration  18: 723903.471 ops/s
Iteration  19: 718222.908 ops/s
Iteration  20: 713309.777 ops/s
Iteration  21: 729587.819 ops/s
Iteration  22: 719274.552 ops/s
Iteration  23: 715200.465 ops/s
Iteration  24: 715993.184 ops/s
Iteration  25: 711410.034 ops/s
Iteration  26: 703622.351 ops/s
Iteration  27: 715355.812 ops/s
Iteration  28: 718882.331 ops/s
Iteration  29: 717285.651 ops/s
Iteration  30: 721672.957 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_iterator_throws":
  715766.385 ±(99.9%) 5760.908 ops/s [Average]
  (min, avg, max) = (701327.500, 715766.385, 738680.827), stdev = 8622.657
  CI (99.9%): [710005.477, 721527.294] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_iterator_throws  thrpt   30  715766.385 ± 5760.908  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3.441 ops/s
# Warmup Iteration   2: 4.426 ops/s
# Warmup Iteration   3: 4.263 ops/s
# Warmup Iteration   4: 5.092 ops/s
# Warmup Iteration   5: 5.092 ops/s
# Warmup Iteration   6: 4.960 ops/s
# Warmup Iteration   7: 5.043 ops/s
# Warmup Iteration   8: 5.026 ops/s
# Warmup Iteration   9: 5.050 ops/s
# Warmup Iteration  10: 4.964 ops/s
# Warmup Iteration  11: 5.035 ops/s
# Warmup Iteration  12: 4.937 ops/s
# Warmup Iteration  13: 5.062 ops/s
# Warmup Iteration  14: 5.087 ops/s
# Warmup Iteration  15: 5.077 ops/s
# Warmup Iteration  16: 5.121 ops/s
# Warmup Iteration  17: 5.055 ops/s
# Warmup Iteration  18: 4.815 ops/s
# Warmup Iteration  19: 4.639 ops/s
# Warmup Iteration  20: 5.113 ops/s
# Warmup Iteration  21: 5.130 ops/s
# Warmup Iteration  22: 5.159 ops/s
# Warmup Iteration  23: 5.113 ops/s
# Warmup Iteration  24: 5.064 ops/s
# Warmup Iteration  25: 5.049 ops/s
# Warmup Iteration  26: 5.167 ops/s
# Warmup Iteration  27: 5.068 ops/s
# Warmup Iteration  28: 5.089 ops/s
# Warmup Iteration  29: 5.035 ops/s
# Warmup Iteration  30: 5.047 ops/s
Iteration   1: 5.109 ops/s
Iteration   2: 5.240 ops/s
Iteration   3: 4.975 ops/s
Iteration   4: 5.149 ops/s
Iteration   5: 5.011 ops/s
Iteration   6: 5.195 ops/s
Iteration   7: 5.048 ops/s
Iteration   8: 5.126 ops/s
Iteration   9: 4.987 ops/s
Iteration  10: 5.031 ops/s
Iteration  11: 5.044 ops/s
Iteration  12: 5.099 ops/s
Iteration  13: 5.263 ops/s
Iteration  14: 5.212 ops/s
Iteration  15: 5.267 ops/s
Iteration  16: 5.102 ops/s
Iteration  17: 4.963 ops/s
Iteration  18: 5.020 ops/s
Iteration  19: 5.089 ops/s
Iteration  20: 5.136 ops/s
Iteration  21: 5.212 ops/s
Iteration  22: 5.061 ops/s
Iteration  23: 5.037 ops/s
Iteration  24: 5.277 ops/s
Iteration  25: 5.110 ops/s
Iteration  26: 5.254 ops/s
Iteration  27: 5.304 ops/s
Iteration  28: 5.197 ops/s
Iteration  29: 5.186 ops/s
Iteration  30: 5.130 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap":
  5.128 ±(99.9%) 0.066 ops/s [Average]
  (min, avg, max) = (4.963, 5.128, 5.304), stdev = 0.099
  CI (99.9%): [5.062, 5.194] (assumes normal distribution)


# Run complete. Total time: 00:01:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt  Score   Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap  thrpt   30  5.128 ± 0.066  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 580240.779 ops/s
# Warmup Iteration   2: 1252007.463 ops/s
# Warmup Iteration   3: 1326461.740 ops/s
# Warmup Iteration   4: 1328570.886 ops/s
# Warmup Iteration   5: 1061621.587 ops/s
# Warmup Iteration   6: 1280097.556 ops/s
# Warmup Iteration   7: 1297679.460 ops/s
# Warmup Iteration   8: 1308409.151 ops/s
# Warmup Iteration   9: 1290001.476 ops/s
# Warmup Iteration  10: 1296197.657 ops/s
# Warmup Iteration  11: 1292081.901 ops/s
# Warmup Iteration  12: 1328562.689 ops/s
# Warmup Iteration  13: 1313497.766 ops/s
# Warmup Iteration  14: 1318945.620 ops/s
# Warmup Iteration  15: 1326248.383 ops/s
# Warmup Iteration  16: 1341368.117 ops/s
# Warmup Iteration  17: 1351966.725 ops/s
# Warmup Iteration  18: 1349424.923 ops/s
# Warmup Iteration  19: 1352823.153 ops/s
# Warmup Iteration  20: 1352655.275 ops/s
# Warmup Iteration  21: 1347768.040 ops/s
# Warmup Iteration  22: 1350720.773 ops/s
# Warmup Iteration  23: 1348850.244 ops/s
# Warmup Iteration  24: 1349486.186 ops/s
# Warmup Iteration  25: 1349970.286 ops/s
# Warmup Iteration  26: 1348739.165 ops/s
# Warmup Iteration  27: 1350131.152 ops/s
# Warmup Iteration  28: 1351114.323 ops/s
# Warmup Iteration  29: 1345301.492 ops/s
# Warmup Iteration  30: 1348381.711 ops/s
Iteration   1: 1352963.683 ops/s
Iteration   2: 1356397.310 ops/s
Iteration   3: 1354534.230 ops/s
Iteration   4: 1354045.969 ops/s
Iteration   5: 1355482.645 ops/s
Iteration   6: 1352002.387 ops/s
Iteration   7: 1354599.927 ops/s
Iteration   8: 1358398.004 ops/s
Iteration   9: 1351506.593 ops/s
Iteration  10: 1350958.393 ops/s
Iteration  11: 1354803.329 ops/s
Iteration  12: 1355598.878 ops/s
Iteration  13: 1357830.285 ops/s
Iteration  14: 1353640.092 ops/s
Iteration  15: 1355402.004 ops/s
Iteration  16: 1350933.656 ops/s
Iteration  17: 1353548.173 ops/s
Iteration  18: 1354146.925 ops/s
Iteration  19: 1352634.647 ops/s
Iteration  20: 1353989.094 ops/s
Iteration  21: 1350232.002 ops/s
Iteration  22: 1353906.045 ops/s
Iteration  23: 1354603.078 ops/s
Iteration  24: 1355072.149 ops/s
Iteration  25: 1359017.504 ops/s
Iteration  26: 1353486.440 ops/s
Iteration  27: 1356221.703 ops/s
Iteration  28: 1341938.125 ops/s
Iteration  29: 1350192.179 ops/s
Iteration  30: 1349289.001 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_makeString":
  1353579.148 ±(99.9%) 2159.209 ops/s [Average]
  (min, avg, max) = (1341938.125, 1353579.148, 1359017.504), stdev = 3231.802
  CI (99.9%): [1351419.940, 1355738.357] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_makeString  thrpt   30  1353579.148 ± 2159.209  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_makeStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_makeStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 572226.004 ops/s
# Warmup Iteration   2: 1202536.430 ops/s
# Warmup Iteration   3: 1251232.130 ops/s
# Warmup Iteration   4: 1262375.820 ops/s
# Warmup Iteration   5: 1053340.137 ops/s
# Warmup Iteration   6: 1249891.227 ops/s
# Warmup Iteration   7: 1250523.887 ops/s
# Warmup Iteration   8: 1261190.072 ops/s
# Warmup Iteration   9: 1264253.763 ops/s
# Warmup Iteration  10: 1259342.424 ops/s
# Warmup Iteration  11: 1245548.861 ops/s
# Warmup Iteration  12: 1263822.619 ops/s
# Warmup Iteration  13: 1259212.333 ops/s
# Warmup Iteration  14: 1260395.609 ops/s
# Warmup Iteration  15: 1262777.822 ops/s
# Warmup Iteration  16: 1260853.387 ops/s
# Warmup Iteration  17: 1263847.773 ops/s
# Warmup Iteration  18: 1266344.215 ops/s
# Warmup Iteration  19: 1266872.408 ops/s
# Warmup Iteration  20: 1265418.485 ops/s
# Warmup Iteration  21: 1266833.685 ops/s
# Warmup Iteration  22: 1254526.039 ops/s
# Warmup Iteration  23: 1259523.005 ops/s
# Warmup Iteration  24: 1266807.429 ops/s
# Warmup Iteration  25: 1260674.462 ops/s
# Warmup Iteration  26: 1251397.561 ops/s
# Warmup Iteration  27: 1259048.192 ops/s
# Warmup Iteration  28: 1258036.740 ops/s
# Warmup Iteration  29: 1267661.445 ops/s
# Warmup Iteration  30: 1258164.494 ops/s
Iteration   1: 1266051.860 ops/s
Iteration   2: 1262311.999 ops/s
Iteration   3: 1261050.386 ops/s
Iteration   4: 1255034.308 ops/s
Iteration   5: 1264931.230 ops/s
Iteration   6: 1242181.882 ops/s
Iteration   7: 1267675.278 ops/s
Iteration   8: 1266493.106 ops/s
Iteration   9: 1252506.403 ops/s
Iteration  10: 1260457.210 ops/s
Iteration  11: 1252253.542 ops/s
Iteration  12: 1261371.347 ops/s
Iteration  13: 1249036.626 ops/s
Iteration  14: 1262142.661 ops/s
Iteration  15: 1265187.361 ops/s
Iteration  16: 1268983.131 ops/s
Iteration  17: 1266492.603 ops/s
Iteration  18: 1258988.122 ops/s
Iteration  19: 1260911.401 ops/s
Iteration  20: 1263376.310 ops/s
Iteration  21: 1258182.918 ops/s
Iteration  22: 1264242.604 ops/s
Iteration  23: 1259208.949 ops/s
Iteration  24: 1260464.905 ops/s
Iteration  25: 1263712.490 ops/s
Iteration  26: 1262196.737 ops/s
Iteration  27: 1263641.782 ops/s
Iteration  28: 1258527.234 ops/s
Iteration  29: 1260054.017 ops/s
Iteration  30: 1264663.694 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_makeStringWithSeparator":
  1260744.403 ±(99.9%) 3879.833 ops/s [Average]
  (min, avg, max) = (1242181.882, 1260744.403, 1268983.131), stdev = 5807.153
  CI (99.9%): [1256864.570, 1264624.237] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_makeStringWithSeparator  thrpt   30  1260744.403 ± 3879.833  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 598624.630 ops/s
# Warmup Iteration   2: 1261114.151 ops/s
# Warmup Iteration   3: 1301905.583 ops/s
# Warmup Iteration   4: 1311609.155 ops/s
# Warmup Iteration   5: 1086241.318 ops/s
# Warmup Iteration   6: 1307337.343 ops/s
# Warmup Iteration   7: 1311359.045 ops/s
# Warmup Iteration   8: 1302615.833 ops/s
# Warmup Iteration   9: 1310923.307 ops/s
# Warmup Iteration  10: 1309601.831 ops/s
# Warmup Iteration  11: 1300428.785 ops/s
# Warmup Iteration  12: 1312210.888 ops/s
# Warmup Iteration  13: 1310604.329 ops/s
# Warmup Iteration  14: 1309871.625 ops/s
# Warmup Iteration  15: 1311409.972 ops/s
# Warmup Iteration  16: 1309099.588 ops/s
# Warmup Iteration  17: 1300653.910 ops/s
# Warmup Iteration  18: 1309336.041 ops/s
# Warmup Iteration  19: 1303360.853 ops/s
# Warmup Iteration  20: 1297184.900 ops/s
# Warmup Iteration  21: 1312044.134 ops/s
# Warmup Iteration  22: 1305548.496 ops/s
# Warmup Iteration  23: 1309742.754 ops/s
# Warmup Iteration  24: 1303082.185 ops/s
# Warmup Iteration  25: 1305915.953 ops/s
# Warmup Iteration  26: 1307757.285 ops/s
# Warmup Iteration  27: 1295804.606 ops/s
# Warmup Iteration  28: 1302349.837 ops/s
# Warmup Iteration  29: 1305995.235 ops/s
# Warmup Iteration  30: 1307076.971 ops/s
Iteration   1: 1304404.597 ops/s
Iteration   2: 1310892.297 ops/s
Iteration   3: 1311827.533 ops/s
Iteration   4: 1303819.682 ops/s
Iteration   5: 1313102.161 ops/s
Iteration   6: 1311920.039 ops/s
Iteration   7: 1308262.662 ops/s
Iteration   8: 1303640.790 ops/s
Iteration   9: 1300807.261 ops/s
Iteration  10: 1311365.007 ops/s
Iteration  11: 1298468.515 ops/s
Iteration  12: 1311195.687 ops/s
Iteration  13: 1295059.036 ops/s
Iteration  14: 1306481.709 ops/s
Iteration  15: 1308595.216 ops/s
Iteration  16: 1306631.480 ops/s
Iteration  17: 1312628.897 ops/s
Iteration  18: 1300159.115 ops/s
Iteration  19: 1310133.125 ops/s
Iteration  20: 1313347.762 ops/s
Iteration  21: 1302425.448 ops/s
Iteration  22: 1307246.743 ops/s
Iteration  23: 1308800.036 ops/s
Iteration  24: 1307884.797 ops/s
Iteration  25: 1308691.909 ops/s
Iteration  26: 1311485.457 ops/s
Iteration  27: 1303170.891 ops/s
Iteration  28: 1306248.714 ops/s
Iteration  29: 1299742.680 ops/s
Iteration  30: 1310443.760 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd":
  1306962.767 ±(99.9%) 3233.457 ops/s [Average]
  (min, avg, max) = (1295059.036, 1306962.767, 1313347.762), stdev = 4839.687
  CI (99.9%): [1303729.310, 1310196.224] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd  thrpt   30  1306962.767 ± 3233.457  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_makeString_with_collection_containing_self$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_makeString_with_collection_containing_self

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 580344.165 ops/s
# Warmup Iteration   2: 662795.589 ops/s
# Warmup Iteration   3: 858695.374 ops/s
# Warmup Iteration   4: 858560.936 ops/s
# Warmup Iteration   5: 862264.368 ops/s
# Warmup Iteration   6: 862443.010 ops/s
# Warmup Iteration   7: 862773.350 ops/s
# Warmup Iteration   8: 862917.970 ops/s
# Warmup Iteration   9: 862877.414 ops/s
# Warmup Iteration  10: 711066.123 ops/s
# Warmup Iteration  11: 853148.776 ops/s
# Warmup Iteration  12: 860093.848 ops/s
# Warmup Iteration  13: 862758.827 ops/s
# Warmup Iteration  14: 858930.681 ops/s
# Warmup Iteration  15: 857260.421 ops/s
# Warmup Iteration  16: 860805.791 ops/s
# Warmup Iteration  17: 913148.804 ops/s
# Warmup Iteration  18: 901560.078 ops/s
# Warmup Iteration  19: 909967.441 ops/s
# Warmup Iteration  20: 904976.405 ops/s
# Warmup Iteration  21: 904801.164 ops/s
# Warmup Iteration  22: 907151.484 ops/s
# Warmup Iteration  23: 907942.086 ops/s
# Warmup Iteration  24: 892097.988 ops/s
# Warmup Iteration  25: 911520.465 ops/s
# Warmup Iteration  26: 910878.431 ops/s
# Warmup Iteration  27: 910507.157 ops/s
# Warmup Iteration  28: 900164.175 ops/s
# Warmup Iteration  29: 913051.631 ops/s
# Warmup Iteration  30: 908025.363 ops/s
Iteration   1: 912398.332 ops/s
Iteration   2: 911072.939 ops/s
Iteration   3: 912992.722 ops/s
Iteration   4: 910046.857 ops/s
Iteration   5: 913715.926 ops/s
Iteration   6: 911170.037 ops/s
Iteration   7: 913623.425 ops/s
Iteration   8: 905892.682 ops/s
Iteration   9: 909523.676 ops/s
Iteration  10: 884349.745 ops/s
Iteration  11: 915215.681 ops/s
Iteration  12: 905572.301 ops/s
Iteration  13: 908990.285 ops/s
Iteration  14: 913668.662 ops/s
Iteration  15: 911192.838 ops/s
Iteration  16: 896680.967 ops/s
Iteration  17: 910550.842 ops/s
Iteration  18: 911407.626 ops/s
Iteration  19: 905964.425 ops/s
Iteration  20: 905774.993 ops/s
Iteration  21: 909532.103 ops/s
Iteration  22: 902598.178 ops/s
Iteration  23: 914012.169 ops/s
Iteration  24: 910528.646 ops/s
Iteration  25: 909393.640 ops/s
Iteration  26: 912846.552 ops/s
Iteration  27: 914047.439 ops/s
Iteration  28: 909899.172 ops/s
Iteration  29: 913379.913 ops/s
Iteration  30: 907781.884 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_makeString_with_collection_containing_self":
  909127.489 ±(99.9%) 4087.535 ops/s [Average]
  (min, avg, max) = (884349.745, 909127.489, 915215.681), stdev = 6118.031
  CI (99.9%): [905039.953, 913215.024] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_makeString_with_collection_containing_self  thrpt   30  909127.489 ± 4087.535  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 507173.142 ops/s
# Warmup Iteration   2: 695817.716 ops/s
# Warmup Iteration   3: 872690.818 ops/s
# Warmup Iteration   4: 864841.014 ops/s
# Warmup Iteration   5: 867937.275 ops/s
# Warmup Iteration   6: 868449.203 ops/s
# Warmup Iteration   7: 871167.745 ops/s
# Warmup Iteration   8: 763106.308 ops/s
# Warmup Iteration   9: 840756.959 ops/s
# Warmup Iteration  10: 875046.952 ops/s
# Warmup Iteration  11: 872041.547 ops/s
# Warmup Iteration  12: 869362.364 ops/s
# Warmup Iteration  13: 873915.906 ops/s
# Warmup Iteration  14: 868452.816 ops/s
# Warmup Iteration  15: 867370.350 ops/s
# Warmup Iteration  16: 876189.680 ops/s
# Warmup Iteration  17: 871616.796 ops/s
# Warmup Iteration  18: 877637.884 ops/s
# Warmup Iteration  19: 869098.706 ops/s
# Warmup Iteration  20: 872734.275 ops/s
# Warmup Iteration  21: 871125.721 ops/s
# Warmup Iteration  22: 874536.252 ops/s
# Warmup Iteration  23: 879214.846 ops/s
# Warmup Iteration  24: 878415.097 ops/s
# Warmup Iteration  25: 876789.494 ops/s
# Warmup Iteration  26: 877260.656 ops/s
# Warmup Iteration  27: 873249.202 ops/s
# Warmup Iteration  28: 872456.814 ops/s
# Warmup Iteration  29: 875880.911 ops/s
# Warmup Iteration  30: 877809.479 ops/s
Iteration   1: 879453.090 ops/s
Iteration   2: 872190.254 ops/s
Iteration   3: 878121.905 ops/s
Iteration   4: 872365.703 ops/s
Iteration   5: 875474.404 ops/s
Iteration   6: 876031.176 ops/s
Iteration   7: 878873.968 ops/s
Iteration   8: 878666.704 ops/s
Iteration   9: 877991.650 ops/s
Iteration  10: 866066.628 ops/s
Iteration  11: 872264.182 ops/s
Iteration  12: 874644.779 ops/s
Iteration  13: 876774.360 ops/s
Iteration  14: 876684.841 ops/s
Iteration  15: 880816.828 ops/s
Iteration  16: 858389.338 ops/s
Iteration  17: 876757.172 ops/s
Iteration  18: 874459.377 ops/s
Iteration  19: 879139.272 ops/s
Iteration  20: 873558.308 ops/s
Iteration  21: 876509.327 ops/s
Iteration  22: 873589.625 ops/s
Iteration  23: 881275.985 ops/s
Iteration  24: 874380.670 ops/s
Iteration  25: 874482.288 ops/s
Iteration  26: 878516.435 ops/s
Iteration  27: 873157.794 ops/s
Iteration  28: 879976.000 ops/s
Iteration  29: 869124.617 ops/s
Iteration  30: 880682.025 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_max":
  875347.290 ±(99.9%) 3179.707 ops/s [Average]
  (min, avg, max) = (858389.338, 875347.290, 881275.985), stdev = 4759.236
  CI (99.9%): [872167.583, 878526.997] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_max  thrpt   30  875347.290 ± 3179.707  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 725476.014 ops/s
# Warmup Iteration   2: 1201084.331 ops/s
# Warmup Iteration   3: 1373304.958 ops/s
# Warmup Iteration   4: 1377309.200 ops/s
# Warmup Iteration   5: 1386462.247 ops/s
# Warmup Iteration   6: 1206786.193 ops/s
# Warmup Iteration   7: 1330971.496 ops/s
# Warmup Iteration   8: 1382008.506 ops/s
# Warmup Iteration   9: 1380620.218 ops/s
# Warmup Iteration  10: 1369731.114 ops/s
# Warmup Iteration  11: 1386572.564 ops/s
# Warmup Iteration  12: 1380363.858 ops/s
# Warmup Iteration  13: 1386038.167 ops/s
# Warmup Iteration  14: 1383246.441 ops/s
# Warmup Iteration  15: 1381833.281 ops/s
# Warmup Iteration  16: 1384650.725 ops/s
# Warmup Iteration  17: 1387597.717 ops/s
# Warmup Iteration  18: 1386498.110 ops/s
# Warmup Iteration  19: 1385844.254 ops/s
# Warmup Iteration  20: 1354931.283 ops/s
# Warmup Iteration  21: 1324669.497 ops/s
# Warmup Iteration  22: 1339050.522 ops/s
# Warmup Iteration  23: 1328825.826 ops/s
# Warmup Iteration  24: 1335700.728 ops/s
# Warmup Iteration  25: 1331929.446 ops/s
# Warmup Iteration  26: 1328782.373 ops/s
# Warmup Iteration  27: 1331794.177 ops/s
# Warmup Iteration  28: 1307482.785 ops/s
# Warmup Iteration  29: 1341625.568 ops/s
# Warmup Iteration  30: 1330247.213 ops/s
Iteration   1: 1324964.679 ops/s
Iteration   2: 1308771.762 ops/s
Iteration   3: 1311269.043 ops/s
Iteration   4: 1311080.784 ops/s
Iteration   5: 1314298.367 ops/s
Iteration   6: 1309727.197 ops/s
Iteration   7: 1301704.211 ops/s
Iteration   8: 1335054.481 ops/s
Iteration   9: 1308343.416 ops/s
Iteration  10: 1337792.673 ops/s
Iteration  11: 1339340.202 ops/s
Iteration  12: 1317765.859 ops/s
Iteration  13: 1302344.808 ops/s
Iteration  14: 1303225.016 ops/s
Iteration  15: 1294547.936 ops/s
Iteration  16: 1341518.257 ops/s
Iteration  17: 1299154.401 ops/s
Iteration  18: 1315461.364 ops/s
Iteration  19: 1282610.415 ops/s
Iteration  20: 1325030.015 ops/s
Iteration  21: 1309452.966 ops/s
Iteration  22: 1312344.068 ops/s
Iteration  23: 1301873.107 ops/s
Iteration  24: 1291169.936 ops/s
Iteration  25: 1310559.618 ops/s
Iteration  26: 1303633.990 ops/s
Iteration  27: 1304929.984 ops/s
Iteration  28: 1330341.023 ops/s
Iteration  29: 1309777.457 ops/s
Iteration  30: 1298610.146 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_maxBy":
  1311889.906 ±(99.9%) 9633.434 ops/s [Average]
  (min, avg, max) = (1282610.415, 1311889.906, 1341518.257), stdev = 14418.871
  CI (99.9%): [1302256.472, 1321523.340] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_maxBy  thrpt   30  1311889.906 ± 9633.434  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_maxByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_maxByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1086910.761 ops/s
# Warmup Iteration   2: 1889662.931 ops/s
# Warmup Iteration   3: 2139553.822 ops/s
# Warmup Iteration   4: 2148297.863 ops/s
# Warmup Iteration   5: 2127801.329 ops/s
# Warmup Iteration   6: 1802132.043 ops/s
# Warmup Iteration   7: 2181297.098 ops/s
# Warmup Iteration   8: 2145998.992 ops/s
# Warmup Iteration   9: 2180687.123 ops/s
# Warmup Iteration  10: 2199489.854 ops/s
# Warmup Iteration  11: 2132144.273 ops/s
# Warmup Iteration  12: 2176121.371 ops/s
# Warmup Iteration  13: 2144575.414 ops/s
# Warmup Iteration  14: 2167526.905 ops/s
# Warmup Iteration  15: 2154169.137 ops/s
# Warmup Iteration  16: 2202350.228 ops/s
# Warmup Iteration  17: 2126545.461 ops/s
# Warmup Iteration  18: 2135685.771 ops/s
# Warmup Iteration  19: 2110221.903 ops/s
# Warmup Iteration  20: 2117821.986 ops/s
# Warmup Iteration  21: 2131338.364 ops/s
# Warmup Iteration  22: 2180635.448 ops/s
# Warmup Iteration  23: 2237197.007 ops/s
# Warmup Iteration  24: 2179880.261 ops/s
# Warmup Iteration  25: 2207819.748 ops/s
# Warmup Iteration  26: 2140811.749 ops/s
# Warmup Iteration  27: 2134729.432 ops/s
# Warmup Iteration  28: 2135537.585 ops/s
# Warmup Iteration  29: 2147386.531 ops/s
# Warmup Iteration  30: 2204415.085 ops/s
Iteration   1: 2228984.921 ops/s
Iteration   2: 2183570.968 ops/s
Iteration   3: 2179457.398 ops/s
Iteration   4: 2264942.296 ops/s
Iteration   5: 2270046.687 ops/s
Iteration   6: 2269766.521 ops/s
Iteration   7: 2267587.669 ops/s
Iteration   8: 2266396.103 ops/s
Iteration   9: 2269000.682 ops/s
Iteration  10: 2159128.687 ops/s
Iteration  11: 2185936.466 ops/s
Iteration  12: 2189686.389 ops/s
Iteration  13: 2216538.159 ops/s
Iteration  14: 2197996.878 ops/s
Iteration  15: 2131959.340 ops/s
Iteration  16: 2146428.048 ops/s
Iteration  17: 2154814.521 ops/s
Iteration  18: 2156193.213 ops/s
Iteration  19: 2132526.122 ops/s
Iteration  20: 2165046.562 ops/s
Iteration  21: 2136863.580 ops/s
Iteration  22: 2116184.394 ops/s
Iteration  23: 2244404.503 ops/s
Iteration  24: 2121242.221 ops/s
Iteration  25: 2207658.769 ops/s
Iteration  26: 2256990.896 ops/s
Iteration  27: 2148713.419 ops/s
Iteration  28: 2140000.987 ops/s
Iteration  29: 2124001.987 ops/s
Iteration  30: 2105489.178 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_maxByOptional":
  2187918.585 ±(99.9%) 36761.857 ops/s [Average]
  (min, avg, max) = (2105489.178, 2187918.585, 2270046.687), stdev = 55023.422
  CI (99.9%): [2151156.728, 2224680.443] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_maxByOptional  thrpt   30  2187918.585 ± 36761.857  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_maxBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_maxBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 377518.795 ops/s
# Warmup Iteration   2: 399107.493 ops/s
# Warmup Iteration   3: 497420.446 ops/s
# Warmup Iteration   4: 531460.609 ops/s
# Warmup Iteration   5: 531502.285 ops/s
# Warmup Iteration   6: 515544.986 ops/s
# Warmup Iteration   7: 534378.718 ops/s
# Warmup Iteration   8: 534191.006 ops/s
# Warmup Iteration   9: 521750.589 ops/s
# Warmup Iteration  10: 518878.220 ops/s
# Warmup Iteration  11: 521556.038 ops/s
# Warmup Iteration  12: 547256.796 ops/s
# Warmup Iteration  13: 441389.426 ops/s
# Warmup Iteration  14: 535868.011 ops/s
# Warmup Iteration  15: 539921.811 ops/s
# Warmup Iteration  16: 542800.419 ops/s
# Warmup Iteration  17: 562583.632 ops/s
# Warmup Iteration  18: 560498.638 ops/s
# Warmup Iteration  19: 562740.403 ops/s
# Warmup Iteration  20: 551409.059 ops/s
# Warmup Iteration  21: 555746.325 ops/s
# Warmup Iteration  22: 556562.057 ops/s
# Warmup Iteration  23: 552439.821 ops/s
# Warmup Iteration  24: 555223.883 ops/s
# Warmup Iteration  25: 550522.933 ops/s
# Warmup Iteration  26: 541738.545 ops/s
# Warmup Iteration  27: 542395.911 ops/s
# Warmup Iteration  28: 545038.083 ops/s
# Warmup Iteration  29: 546235.948 ops/s
# Warmup Iteration  30: 552046.290 ops/s
Iteration   1: 576562.446 ops/s
Iteration   2: 572710.878 ops/s
Iteration   3: 544768.620 ops/s
Iteration   4: 540143.923 ops/s
Iteration   5: 539947.700 ops/s
Iteration   6: 541150.908 ops/s
Iteration   7: 540427.556 ops/s
Iteration   8: 544835.336 ops/s
Iteration   9: 539112.499 ops/s
Iteration  10: 540144.890 ops/s
Iteration  11: 559177.889 ops/s
Iteration  12: 575188.094 ops/s
Iteration  13: 541570.620 ops/s
Iteration  14: 540206.283 ops/s
Iteration  15: 547537.420 ops/s
Iteration  16: 541088.716 ops/s
Iteration  17: 537050.319 ops/s
Iteration  18: 539381.590 ops/s
Iteration  19: 540745.244 ops/s
Iteration  20: 530559.058 ops/s
Iteration  21: 531113.604 ops/s
Iteration  22: 537037.927 ops/s
Iteration  23: 541618.154 ops/s
Iteration  24: 549126.334 ops/s
Iteration  25: 552620.352 ops/s
Iteration  26: 554102.184 ops/s
Iteration  27: 548293.428 ops/s
Iteration  28: 554274.277 ops/s
Iteration  29: 541645.548 ops/s
Iteration  30: 556300.689 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_maxBy_null_throws":
  546614.750 ±(99.9%) 7827.584 ops/s [Average]
  (min, avg, max) = (530559.058, 546614.750, 576562.446), stdev = 11715.961
  CI (99.9%): [538787.165, 554442.334] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_maxBy_null_throws  thrpt   30  546614.750 ± 7827.584  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_maxOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_maxOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 650070.351 ops/s
# Warmup Iteration   2: 959371.272 ops/s
# Warmup Iteration   3: 1161367.453 ops/s
# Warmup Iteration   4: 1154895.487 ops/s
# Warmup Iteration   5: 1164111.214 ops/s
# Warmup Iteration   6: 1193654.749 ops/s
# Warmup Iteration   7: 1031399.816 ops/s
# Warmup Iteration   8: 1188057.918 ops/s
# Warmup Iteration   9: 1178017.712 ops/s
# Warmup Iteration  10: 1179639.378 ops/s
# Warmup Iteration  11: 1185706.648 ops/s
# Warmup Iteration  12: 1165149.386 ops/s
# Warmup Iteration  13: 1178803.999 ops/s
# Warmup Iteration  14: 1165444.282 ops/s
# Warmup Iteration  15: 1165199.097 ops/s
# Warmup Iteration  16: 1172708.101 ops/s
# Warmup Iteration  17: 1159819.709 ops/s
# Warmup Iteration  18: 1157016.860 ops/s
# Warmup Iteration  19: 1198790.136 ops/s
# Warmup Iteration  20: 1168407.091 ops/s
# Warmup Iteration  21: 1168892.688 ops/s
# Warmup Iteration  22: 1204125.688 ops/s
# Warmup Iteration  23: 1165770.265 ops/s
# Warmup Iteration  24: 1206243.904 ops/s
# Warmup Iteration  25: 1214791.298 ops/s
# Warmup Iteration  26: 1152753.448 ops/s
# Warmup Iteration  27: 1162392.302 ops/s
# Warmup Iteration  28: 1163059.437 ops/s
# Warmup Iteration  29: 1172998.253 ops/s
# Warmup Iteration  30: 1191127.941 ops/s
Iteration   1: 1203970.519 ops/s
Iteration   2: 1174851.828 ops/s
Iteration   3: 1159444.372 ops/s
Iteration   4: 1161639.104 ops/s
Iteration   5: 1188249.654 ops/s
Iteration   6: 1193335.449 ops/s
Iteration   7: 1187456.927 ops/s
Iteration   8: 1157810.295 ops/s
Iteration   9: 1127468.905 ops/s
Iteration  10: 1176322.712 ops/s
Iteration  11: 1167534.647 ops/s
Iteration  12: 1159979.826 ops/s
Iteration  13: 1177489.620 ops/s
Iteration  14: 1231106.357 ops/s
Iteration  15: 1205891.631 ops/s
Iteration  16: 1167510.832 ops/s
Iteration  17: 1169547.578 ops/s
Iteration  18: 1154026.912 ops/s
Iteration  19: 1158530.162 ops/s
Iteration  20: 1153009.171 ops/s
Iteration  21: 1153070.444 ops/s
Iteration  22: 1158836.267 ops/s
Iteration  23: 1174826.391 ops/s
Iteration  24: 1159947.604 ops/s
Iteration  25: 1213009.350 ops/s
Iteration  26: 1164030.758 ops/s
Iteration  27: 1159705.679 ops/s
Iteration  28: 1147150.492 ops/s
Iteration  29: 1151764.716 ops/s
Iteration  30: 1184435.654 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_maxOptional":
  1171398.462 ±(99.9%) 14646.320 ops/s [Average]
  (min, avg, max) = (1127468.905, 1171398.462, 1231106.357), stdev = 21921.925
  CI (99.9%): [1156752.141, 1186044.782] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_maxOptional  thrpt   30  1171398.462 ± 14646.320  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_max_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_max_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 551090.434 ops/s
# Warmup Iteration   2: 604224.019 ops/s
# Warmup Iteration   3: 711300.772 ops/s
# Warmup Iteration   4: 783254.396 ops/s
# Warmup Iteration   5: 778758.787 ops/s
# Warmup Iteration   6: 769498.878 ops/s
# Warmup Iteration   7: 760940.527 ops/s
# Warmup Iteration   8: 767223.076 ops/s
# Warmup Iteration   9: 794729.138 ops/s
# Warmup Iteration  10: 817987.184 ops/s
# Warmup Iteration  11: 790275.922 ops/s
# Warmup Iteration  12: 780430.649 ops/s
# Warmup Iteration  13: 817300.680 ops/s
# Warmup Iteration  14: 673864.798 ops/s
# Warmup Iteration  15: 745043.526 ops/s
# Warmup Iteration  16: 800052.183 ops/s
# Warmup Iteration  17: 801780.562 ops/s
# Warmup Iteration  18: 822925.839 ops/s
# Warmup Iteration  19: 821774.100 ops/s
# Warmup Iteration  20: 820981.367 ops/s
# Warmup Iteration  21: 822175.261 ops/s
# Warmup Iteration  22: 813216.535 ops/s
# Warmup Iteration  23: 805085.998 ops/s
# Warmup Iteration  24: 814542.373 ops/s
# Warmup Iteration  25: 806273.486 ops/s
# Warmup Iteration  26: 812942.247 ops/s
# Warmup Iteration  27: 816914.122 ops/s
# Warmup Iteration  28: 841198.022 ops/s
# Warmup Iteration  29: 801928.104 ops/s
# Warmup Iteration  30: 817842.907 ops/s
Iteration   1: 797839.339 ops/s
Iteration   2: 799477.678 ops/s
Iteration   3: 807745.195 ops/s
Iteration   4: 801938.533 ops/s
Iteration   5: 791786.907 ops/s
Iteration   6: 797089.197 ops/s
Iteration   7: 832861.752 ops/s
Iteration   8: 846022.172 ops/s
Iteration   9: 846916.390 ops/s
Iteration  10: 802833.313 ops/s
Iteration  11: 846063.880 ops/s
Iteration  12: 850223.660 ops/s
Iteration  13: 816748.499 ops/s
Iteration  14: 811676.823 ops/s
Iteration  15: 804678.465 ops/s
Iteration  16: 810963.217 ops/s
Iteration  17: 825783.805 ops/s
Iteration  18: 821274.073 ops/s
Iteration  19: 814380.859 ops/s
Iteration  20: 809621.835 ops/s
Iteration  21: 825609.707 ops/s
Iteration  22: 820153.608 ops/s
Iteration  23: 819440.926 ops/s
Iteration  24: 815397.279 ops/s
Iteration  25: 824736.338 ops/s
Iteration  26: 843283.180 ops/s
Iteration  27: 850127.931 ops/s
Iteration  28: 823127.507 ops/s
Iteration  29: 825225.251 ops/s
Iteration  30: 797077.202 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_max_empty_throws":
  819336.817 ±(99.9%) 11644.509 ops/s [Average]
  (min, avg, max) = (791786.907, 819336.817, 850223.660), stdev = 17428.955
  CI (99.9%): [807692.308, 830981.327] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_max_empty_throws  thrpt   30  819336.817 ± 11644.509  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_max_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_max_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 367500.983 ops/s
# Warmup Iteration   2: 383978.379 ops/s
# Warmup Iteration   3: 495475.681 ops/s
# Warmup Iteration   4: 510416.094 ops/s
# Warmup Iteration   5: 512037.499 ops/s
# Warmup Iteration   6: 503222.942 ops/s
# Warmup Iteration   7: 505297.966 ops/s
# Warmup Iteration   8: 508947.480 ops/s
# Warmup Iteration   9: 500303.818 ops/s
# Warmup Iteration  10: 513032.630 ops/s
# Warmup Iteration  11: 517424.048 ops/s
# Warmup Iteration  12: 447334.076 ops/s
# Warmup Iteration  13: 494606.858 ops/s
# Warmup Iteration  14: 506711.239 ops/s
# Warmup Iteration  15: 529466.681 ops/s
# Warmup Iteration  16: 533533.160 ops/s
# Warmup Iteration  17: 520262.914 ops/s
# Warmup Iteration  18: 539005.308 ops/s
# Warmup Iteration  19: 520350.304 ops/s
# Warmup Iteration  20: 519682.249 ops/s
# Warmup Iteration  21: 523981.134 ops/s
# Warmup Iteration  22: 522536.717 ops/s
# Warmup Iteration  23: 531297.703 ops/s
# Warmup Iteration  24: 520597.566 ops/s
# Warmup Iteration  25: 522887.655 ops/s
# Warmup Iteration  26: 526217.063 ops/s
# Warmup Iteration  27: 518817.526 ops/s
# Warmup Iteration  28: 525729.550 ops/s
# Warmup Iteration  29: 524105.661 ops/s
# Warmup Iteration  30: 543556.747 ops/s
Iteration   1: 533757.758 ops/s
Iteration   2: 538525.726 ops/s
Iteration   3: 526987.935 ops/s
Iteration   4: 525465.590 ops/s
Iteration   5: 525155.514 ops/s
Iteration   6: 518420.413 ops/s
Iteration   7: 521922.040 ops/s
Iteration   8: 516837.631 ops/s
Iteration   9: 547089.479 ops/s
Iteration  10: 536832.160 ops/s
Iteration  11: 517538.860 ops/s
Iteration  12: 550347.121 ops/s
Iteration  13: 552501.682 ops/s
Iteration  14: 518858.710 ops/s
Iteration  15: 527504.529 ops/s
Iteration  16: 551905.188 ops/s
Iteration  17: 519269.989 ops/s
Iteration  18: 537726.556 ops/s
Iteration  19: 549875.216 ops/s
Iteration  20: 533119.521 ops/s
Iteration  21: 527340.266 ops/s
Iteration  22: 538670.385 ops/s
Iteration  23: 532387.341 ops/s
Iteration  24: 526100.299 ops/s
Iteration  25: 520245.310 ops/s
Iteration  26: 543382.336 ops/s
Iteration  27: 531938.623 ops/s
Iteration  28: 518431.689 ops/s
Iteration  29: 521701.196 ops/s
Iteration  30: 543848.120 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_max_null_safe":
  531789.573 ±(99.9%) 7644.049 ops/s [Average]
  (min, avg, max) = (516837.631, 531789.573, 552501.682), stdev = 11441.253
  CI (99.9%): [524145.524, 539433.621] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_max_null_safe  thrpt   30  531789.573 ± 7644.049  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 397982.617 ops/s
# Warmup Iteration   2: 424177.815 ops/s
# Warmup Iteration   3: 537444.934 ops/s
# Warmup Iteration   4: 539895.541 ops/s
# Warmup Iteration   5: 527290.049 ops/s
# Warmup Iteration   6: 522293.160 ops/s
# Warmup Iteration   7: 535758.408 ops/s
# Warmup Iteration   8: 529380.276 ops/s
# Warmup Iteration   9: 556305.973 ops/s
# Warmup Iteration  10: 540597.142 ops/s
# Warmup Iteration  11: 550378.902 ops/s
# Warmup Iteration  12: 496133.709 ops/s
# Warmup Iteration  13: 480763.490 ops/s
# Warmup Iteration  14: 546194.589 ops/s
# Warmup Iteration  15: 527888.408 ops/s
# Warmup Iteration  16: 527852.153 ops/s
# Warmup Iteration  17: 545648.201 ops/s
# Warmup Iteration  18: 560201.379 ops/s
# Warmup Iteration  19: 540111.531 ops/s
# Warmup Iteration  20: 547205.671 ops/s
# Warmup Iteration  21: 545022.809 ops/s
# Warmup Iteration  22: 543050.183 ops/s
# Warmup Iteration  23: 542780.411 ops/s
# Warmup Iteration  24: 538775.898 ops/s
# Warmup Iteration  25: 544051.679 ops/s
# Warmup Iteration  26: 537123.895 ops/s
# Warmup Iteration  27: 551854.543 ops/s
# Warmup Iteration  28: 543523.054 ops/s
# Warmup Iteration  29: 566807.551 ops/s
# Warmup Iteration  30: 549350.620 ops/s
Iteration   1: 548776.759 ops/s
Iteration   2: 541270.794 ops/s
Iteration   3: 538505.741 ops/s
Iteration   4: 557049.426 ops/s
Iteration   5: 556740.428 ops/s
Iteration   6: 535496.051 ops/s
Iteration   7: 536129.652 ops/s
Iteration   8: 540277.940 ops/s
Iteration   9: 531257.695 ops/s
Iteration  10: 536585.758 ops/s
Iteration  11: 539396.638 ops/s
Iteration  12: 546860.386 ops/s
Iteration  13: 574841.220 ops/s
Iteration  14: 554845.753 ops/s
Iteration  15: 557638.467 ops/s
Iteration  16: 546542.049 ops/s
Iteration  17: 544517.430 ops/s
Iteration  18: 555070.204 ops/s
Iteration  19: 540902.613 ops/s
Iteration  20: 542313.659 ops/s
Iteration  21: 539769.260 ops/s
Iteration  22: 539722.991 ops/s
Iteration  23: 572995.218 ops/s
Iteration  24: 553894.976 ops/s
Iteration  25: 551003.298 ops/s
Iteration  26: 541344.404 ops/s
Iteration  27: 539747.807 ops/s
Iteration  28: 543097.210 ops/s
Iteration  29: 534684.816 ops/s
Iteration  30: 561996.443 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_max_null_throws":
  546775.836 ±(99.9%) 7248.783 ops/s [Average]
  (min, avg, max) = (531257.695, 546775.836, 574841.220), stdev = 10849.637
  CI (99.9%): [539527.054, 554024.619] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_max_null_throws  thrpt   30  546775.836 ± 7248.783  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 374129.410 ops/s
# Warmup Iteration   2: 407237.721 ops/s
# Warmup Iteration   3: 507434.192 ops/s
# Warmup Iteration   4: 523436.490 ops/s
# Warmup Iteration   5: 523715.326 ops/s
# Warmup Iteration   6: 526316.005 ops/s
# Warmup Iteration   7: 528096.782 ops/s
# Warmup Iteration   8: 533000.399 ops/s
# Warmup Iteration   9: 528373.062 ops/s
# Warmup Iteration  10: 525685.492 ops/s
# Warmup Iteration  11: 531854.162 ops/s
# Warmup Iteration  12: 519570.623 ops/s
# Warmup Iteration  13: 439000.855 ops/s
# Warmup Iteration  14: 527796.972 ops/s
# Warmup Iteration  15: 525037.096 ops/s
# Warmup Iteration  16: 540186.285 ops/s
# Warmup Iteration  17: 555918.773 ops/s
# Warmup Iteration  18: 551499.322 ops/s
# Warmup Iteration  19: 547848.834 ops/s
# Warmup Iteration  20: 549396.513 ops/s
# Warmup Iteration  21: 543166.138 ops/s
# Warmup Iteration  22: 546899.593 ops/s
# Warmup Iteration  23: 545355.920 ops/s
# Warmup Iteration  24: 538914.936 ops/s
# Warmup Iteration  25: 538663.564 ops/s
# Warmup Iteration  26: 545514.124 ops/s
# Warmup Iteration  27: 544310.447 ops/s
# Warmup Iteration  28: 548973.339 ops/s
# Warmup Iteration  29: 562266.475 ops/s
# Warmup Iteration  30: 548084.499 ops/s
Iteration   1: 535460.349 ops/s
Iteration   2: 542385.383 ops/s
Iteration   3: 537272.482 ops/s
Iteration   4: 550086.637 ops/s
Iteration   5: 577000.855 ops/s
Iteration   6: 578068.960 ops/s
Iteration   7: 578146.242 ops/s
Iteration   8: 557554.273 ops/s
Iteration   9: 537603.044 ops/s
Iteration  10: 567703.442 ops/s
Iteration  11: 572219.434 ops/s
Iteration  12: 571384.221 ops/s
Iteration  13: 546834.697 ops/s
Iteration  14: 578794.527 ops/s
Iteration  15: 542368.135 ops/s
Iteration  16: 543111.179 ops/s
Iteration  17: 546189.273 ops/s
Iteration  18: 548943.367 ops/s
Iteration  19: 562210.180 ops/s
Iteration  20: 577970.730 ops/s
Iteration  21: 566035.215 ops/s
Iteration  22: 547613.975 ops/s
Iteration  23: 557324.403 ops/s
Iteration  24: 549293.986 ops/s
Iteration  25: 540322.652 ops/s
Iteration  26: 543853.395 ops/s
Iteration  27: 544174.057 ops/s
Iteration  28: 578466.927 ops/s
Iteration  29: 578007.761 ops/s
Iteration  30: 547313.466 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_max_null_throws_without_comparator":
  556790.442 ±(99.9%) 10237.200 ops/s [Average]
  (min, avg, max) = (535460.349, 556790.442, 578794.527), stdev = 15322.560
  CI (99.9%): [546553.241, 567027.642] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  556790.442 ± 10237.200  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1816360.934 ops/s
# Warmup Iteration   2: 2731627.377 ops/s
# Warmup Iteration   3: 3269106.654 ops/s
# Warmup Iteration   4: 3273092.513 ops/s
# Warmup Iteration   5: 3246906.708 ops/s
# Warmup Iteration   6: 3294089.812 ops/s
# Warmup Iteration   7: 2735594.420 ops/s
# Warmup Iteration   8: 3297626.568 ops/s
# Warmup Iteration   9: 3253591.795 ops/s
# Warmup Iteration  10: 3272962.890 ops/s
# Warmup Iteration  11: 3302508.374 ops/s
# Warmup Iteration  12: 3334002.172 ops/s
# Warmup Iteration  13: 3316839.801 ops/s
# Warmup Iteration  14: 3289173.284 ops/s
# Warmup Iteration  15: 3333506.046 ops/s
# Warmup Iteration  16: 3296558.761 ops/s
# Warmup Iteration  17: 3312234.021 ops/s
# Warmup Iteration  18: 3331931.203 ops/s
# Warmup Iteration  19: 3389882.472 ops/s
# Warmup Iteration  20: 3283549.414 ops/s
# Warmup Iteration  21: 3278677.911 ops/s
# Warmup Iteration  22: 3297540.638 ops/s
# Warmup Iteration  23: 3300806.256 ops/s
# Warmup Iteration  24: 3269119.220 ops/s
# Warmup Iteration  25: 3285201.665 ops/s
# Warmup Iteration  26: 3340189.985 ops/s
# Warmup Iteration  27: 3491343.600 ops/s
# Warmup Iteration  28: 3365215.216 ops/s
# Warmup Iteration  29: 3346581.746 ops/s
# Warmup Iteration  30: 3361737.518 ops/s
Iteration   1: 3391825.441 ops/s
Iteration   2: 3362010.717 ops/s
Iteration   3: 3421231.055 ops/s
Iteration   4: 3398191.459 ops/s
Iteration   5: 3362465.492 ops/s
Iteration   6: 3421999.681 ops/s
Iteration   7: 3381586.427 ops/s
Iteration   8: 3417456.151 ops/s
Iteration   9: 3393787.402 ops/s
Iteration  10: 3437831.200 ops/s
Iteration  11: 3395988.990 ops/s
Iteration  12: 3351625.109 ops/s
Iteration  13: 3321878.061 ops/s
Iteration  14: 3315740.180 ops/s
Iteration  15: 3258069.807 ops/s
Iteration  16: 3264479.866 ops/s
Iteration  17: 3274875.197 ops/s
Iteration  18: 3341063.530 ops/s
Iteration  19: 3346527.999 ops/s
Iteration  20: 3325875.074 ops/s
Iteration  21: 3390506.449 ops/s
Iteration  22: 3361074.411 ops/s
Iteration  23: 3504495.975 ops/s
Iteration  24: 3417000.255 ops/s
Iteration  25: 3416002.568 ops/s
Iteration  26: 3372163.166 ops/s
Iteration  27: 3368675.060 ops/s
Iteration  28: 3326571.772 ops/s
Iteration  29: 3329696.515 ops/s
Iteration  30: 3352914.058 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_max_without_comparator":
  3367453.636 ±(99.9%) 35769.199 ops/s [Average]
  (min, avg, max) = (3258069.807, 3367453.636, 3504495.975), stdev = 53537.658
  CI (99.9%): [3331684.436, 3403222.835] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_max_without_comparator  thrpt   30  3367453.636 ± 35769.199  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 511967.732 ops/s
# Warmup Iteration   2: 732842.389 ops/s
# Warmup Iteration   3: 894981.512 ops/s
# Warmup Iteration   4: 888574.890 ops/s
# Warmup Iteration   5: 877016.891 ops/s
# Warmup Iteration   6: 881631.250 ops/s
# Warmup Iteration   7: 893509.082 ops/s
# Warmup Iteration   8: 742946.171 ops/s
# Warmup Iteration   9: 887963.249 ops/s
# Warmup Iteration  10: 896216.375 ops/s
# Warmup Iteration  11: 880041.835 ops/s
# Warmup Iteration  12: 895451.992 ops/s
# Warmup Iteration  13: 902483.134 ops/s
# Warmup Iteration  14: 915096.715 ops/s
# Warmup Iteration  15: 885549.330 ops/s
# Warmup Iteration  16: 892816.966 ops/s
# Warmup Iteration  17: 885266.998 ops/s
# Warmup Iteration  18: 885176.281 ops/s
# Warmup Iteration  19: 884873.009 ops/s
# Warmup Iteration  20: 897931.308 ops/s
# Warmup Iteration  21: 890145.665 ops/s
# Warmup Iteration  22: 900784.692 ops/s
# Warmup Iteration  23: 898653.822 ops/s
# Warmup Iteration  24: 919258.876 ops/s
# Warmup Iteration  25: 894426.448 ops/s
# Warmup Iteration  26: 922620.407 ops/s
# Warmup Iteration  27: 923858.220 ops/s
# Warmup Iteration  28: 895789.171 ops/s
# Warmup Iteration  29: 910838.141 ops/s
# Warmup Iteration  30: 933099.146 ops/s
Iteration   1: 922868.882 ops/s
Iteration   2: 894578.580 ops/s
Iteration   3: 888725.793 ops/s
Iteration   4: 924191.152 ops/s
Iteration   5: 933559.720 ops/s
Iteration   6: 935983.151 ops/s
Iteration   7: 928586.392 ops/s
Iteration   8: 911129.861 ops/s
Iteration   9: 895720.590 ops/s
Iteration  10: 878986.789 ops/s
Iteration  11: 888626.195 ops/s
Iteration  12: 888701.360 ops/s
Iteration  13: 885456.598 ops/s
Iteration  14: 877646.630 ops/s
Iteration  15: 884453.996 ops/s
Iteration  16: 894108.990 ops/s
Iteration  17: 894107.339 ops/s
Iteration  18: 906398.454 ops/s
Iteration  19: 866852.984 ops/s
Iteration  20: 910067.372 ops/s
Iteration  21: 883475.871 ops/s
Iteration  22: 885646.300 ops/s
Iteration  23: 890144.942 ops/s
Iteration  24: 884656.278 ops/s
Iteration  25: 898851.431 ops/s
Iteration  26: 911674.096 ops/s
Iteration  27: 889965.577 ops/s
Iteration  28: 921197.097 ops/s
Iteration  29: 935652.964 ops/s
Iteration  30: 897847.077 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_min":
  900328.749 ±(99.9%) 12639.314 ops/s [Average]
  (min, avg, max) = (866852.984, 900328.749, 935983.151), stdev = 18917.932
  CI (99.9%): [887689.434, 912968.063] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_min  thrpt   30  900328.749 ± 12639.314  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 693443.772 ops/s
# Warmup Iteration   2: 1102879.261 ops/s
# Warmup Iteration   3: 1337169.178 ops/s
# Warmup Iteration   4: 1403721.311 ops/s
# Warmup Iteration   5: 1391414.437 ops/s
# Warmup Iteration   6: 1260824.719 ops/s
# Warmup Iteration   7: 1179853.309 ops/s
# Warmup Iteration   8: 1380092.875 ops/s
# Warmup Iteration   9: 1381081.057 ops/s
# Warmup Iteration  10: 1358225.550 ops/s
# Warmup Iteration  11: 1352158.920 ops/s
# Warmup Iteration  12: 1366261.994 ops/s
# Warmup Iteration  13: 1380544.049 ops/s
# Warmup Iteration  14: 1357194.086 ops/s
# Warmup Iteration  15: 1372662.302 ops/s
# Warmup Iteration  16: 1360954.313 ops/s
# Warmup Iteration  17: 1346104.261 ops/s
# Warmup Iteration  18: 1355028.127 ops/s
# Warmup Iteration  19: 1334592.802 ops/s
# Warmup Iteration  20: 1318640.035 ops/s
# Warmup Iteration  21: 1313761.849 ops/s
# Warmup Iteration  22: 1338444.313 ops/s
# Warmup Iteration  23: 1348194.879 ops/s
# Warmup Iteration  24: 1319028.159 ops/s
# Warmup Iteration  25: 1417208.004 ops/s
# Warmup Iteration  26: 1348560.646 ops/s
# Warmup Iteration  27: 1337532.228 ops/s
# Warmup Iteration  28: 1366839.154 ops/s
# Warmup Iteration  29: 1378030.422 ops/s
# Warmup Iteration  30: 1357985.868 ops/s
Iteration   1: 1376345.966 ops/s
Iteration   2: 1331582.733 ops/s
Iteration   3: 1348003.597 ops/s
Iteration   4: 1311098.874 ops/s
Iteration   5: 1309066.401 ops/s
Iteration   6: 1328585.526 ops/s
Iteration   7: 1340859.129 ops/s
Iteration   8: 1346537.222 ops/s
Iteration   9: 1362470.647 ops/s
Iteration  10: 1345381.938 ops/s
Iteration  11: 1330167.679 ops/s
Iteration  12: 1347024.223 ops/s
Iteration  13: 1334191.890 ops/s
Iteration  14: 1340273.851 ops/s
Iteration  15: 1340188.298 ops/s
Iteration  16: 1341811.918 ops/s
Iteration  17: 1345361.049 ops/s
Iteration  18: 1332522.312 ops/s
Iteration  19: 1325584.328 ops/s
Iteration  20: 1333700.899 ops/s
Iteration  21: 1353810.277 ops/s
Iteration  22: 1332221.820 ops/s
Iteration  23: 1338023.652 ops/s
Iteration  24: 1353061.831 ops/s
Iteration  25: 1324859.236 ops/s
Iteration  26: 1342515.928 ops/s
Iteration  27: 1357231.500 ops/s
Iteration  28: 1419229.127 ops/s
Iteration  29: 1364558.700 ops/s
Iteration  30: 1393539.723 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_minBy":
  1344993.676 ±(99.9%) 14902.356 ops/s [Average]
  (min, avg, max) = (1309066.401, 1344993.676, 1419229.127), stdev = 22305.147
  CI (99.9%): [1330091.319, 1359896.032] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_minBy  thrpt   30  1344993.676 ± 14902.356  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_minByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_minByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1005887.495 ops/s
# Warmup Iteration   2: 1619206.658 ops/s
# Warmup Iteration   3: 2044294.368 ops/s
# Warmup Iteration   4: 2000094.755 ops/s
# Warmup Iteration   5: 1961402.898 ops/s
# Warmup Iteration   6: 2030853.897 ops/s
# Warmup Iteration   7: 1656655.823 ops/s
# Warmup Iteration   8: 1967062.009 ops/s
# Warmup Iteration   9: 2064742.301 ops/s
# Warmup Iteration  10: 2015422.914 ops/s
# Warmup Iteration  11: 2055074.459 ops/s
# Warmup Iteration  12: 2038090.567 ops/s
# Warmup Iteration  13: 2096712.854 ops/s
# Warmup Iteration  14: 2076780.715 ops/s
# Warmup Iteration  15: 2037408.741 ops/s
# Warmup Iteration  16: 1985123.086 ops/s
# Warmup Iteration  17: 1997627.005 ops/s
# Warmup Iteration  18: 2005460.874 ops/s
# Warmup Iteration  19: 1990654.718 ops/s
# Warmup Iteration  20: 2013235.788 ops/s
# Warmup Iteration  21: 1972190.777 ops/s
# Warmup Iteration  22: 1949627.341 ops/s
# Warmup Iteration  23: 1959818.957 ops/s
# Warmup Iteration  24: 1979704.164 ops/s
# Warmup Iteration  25: 1997677.690 ops/s
# Warmup Iteration  26: 2006739.179 ops/s
# Warmup Iteration  27: 2048998.405 ops/s
# Warmup Iteration  28: 2008959.859 ops/s
# Warmup Iteration  29: 2033023.129 ops/s
# Warmup Iteration  30: 1978462.832 ops/s
Iteration   1: 1971280.928 ops/s
Iteration   2: 1978206.322 ops/s
Iteration   3: 1987934.895 ops/s
Iteration   4: 1977518.709 ops/s
Iteration   5: 1966507.427 ops/s
Iteration   6: 1991226.911 ops/s
Iteration   7: 2023423.712 ops/s
Iteration   8: 1970419.204 ops/s
Iteration   9: 1977859.448 ops/s
Iteration  10: 1999889.393 ops/s
Iteration  11: 2048438.014 ops/s
Iteration  12: 2065704.206 ops/s
Iteration  13: 2058231.768 ops/s
Iteration  14: 2017612.636 ops/s
Iteration  15: 2001457.168 ops/s
Iteration  16: 1969725.011 ops/s
Iteration  17: 2051312.658 ops/s
Iteration  18: 1966183.365 ops/s
Iteration  19: 1994332.773 ops/s
Iteration  20: 2011528.932 ops/s
Iteration  21: 1963785.731 ops/s
Iteration  22: 1972123.288 ops/s
Iteration  23: 1999987.932 ops/s
Iteration  24: 1985082.310 ops/s
Iteration  25: 1995001.855 ops/s
Iteration  26: 1973841.049 ops/s
Iteration  27: 1986036.382 ops/s
Iteration  28: 2011793.112 ops/s
Iteration  29: 1984616.467 ops/s
Iteration  30: 1986929.684 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_minByOptional":
  1996266.376 ±(99.9%) 19072.136 ops/s [Average]
  (min, avg, max) = (1963785.731, 1996266.376, 2065704.206), stdev = 28546.278
  CI (99.9%): [1977194.240, 2015338.513] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_minByOptional  thrpt   30  1996266.376 ± 19072.136  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_minBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_minBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 379244.439 ops/s
# Warmup Iteration   2: 404379.632 ops/s
# Warmup Iteration   3: 515146.638 ops/s
# Warmup Iteration   4: 531796.713 ops/s
# Warmup Iteration   5: 535752.724 ops/s
# Warmup Iteration   6: 539931.682 ops/s
# Warmup Iteration   7: 532514.877 ops/s
# Warmup Iteration   8: 529912.912 ops/s
# Warmup Iteration   9: 534778.390 ops/s
# Warmup Iteration  10: 531155.343 ops/s
# Warmup Iteration  11: 536323.897 ops/s
# Warmup Iteration  12: 520299.340 ops/s
# Warmup Iteration  13: 463911.722 ops/s
# Warmup Iteration  14: 536055.249 ops/s
# Warmup Iteration  15: 530092.393 ops/s
# Warmup Iteration  16: 528536.197 ops/s
# Warmup Iteration  17: 548488.029 ops/s
# Warmup Iteration  18: 555341.605 ops/s
# Warmup Iteration  19: 555128.458 ops/s
# Warmup Iteration  20: 554011.355 ops/s
# Warmup Iteration  21: 553792.277 ops/s
# Warmup Iteration  22: 556013.430 ops/s
# Warmup Iteration  23: 570646.920 ops/s
# Warmup Iteration  24: 555212.671 ops/s
# Warmup Iteration  25: 560986.107 ops/s
# Warmup Iteration  26: 555080.361 ops/s
# Warmup Iteration  27: 564052.342 ops/s
# Warmup Iteration  28: 565166.719 ops/s
# Warmup Iteration  29: 560134.414 ops/s
# Warmup Iteration  30: 555000.966 ops/s
Iteration   1: 566444.935 ops/s
Iteration   2: 565060.100 ops/s
Iteration   3: 562603.729 ops/s
Iteration   4: 553098.471 ops/s
Iteration   5: 558499.155 ops/s
Iteration   6: 565380.076 ops/s
Iteration   7: 559486.006 ops/s
Iteration   8: 562952.510 ops/s
Iteration   9: 553386.681 ops/s
Iteration  10: 565167.565 ops/s
Iteration  11: 566876.681 ops/s
Iteration  12: 564116.457 ops/s
Iteration  13: 562251.586 ops/s
Iteration  14: 552697.274 ops/s
Iteration  15: 561669.456 ops/s
Iteration  16: 556112.478 ops/s
Iteration  17: 552765.998 ops/s
Iteration  18: 555533.255 ops/s
Iteration  19: 563403.344 ops/s
Iteration  20: 569867.622 ops/s
Iteration  21: 557865.231 ops/s
Iteration  22: 567924.556 ops/s
Iteration  23: 556013.577 ops/s
Iteration  24: 557155.042 ops/s
Iteration  25: 569954.589 ops/s
Iteration  26: 555342.381 ops/s
Iteration  27: 555229.437 ops/s
Iteration  28: 574343.559 ops/s
Iteration  29: 569262.570 ops/s
Iteration  30: 551035.721 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_minBy_null_throws":
  561050.001 ±(99.9%) 4166.166 ops/s [Average]
  (min, avg, max) = (551035.721, 561050.001, 574343.559), stdev = 6235.722
  CI (99.9%): [556883.835, 565216.168] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_minBy_null_throws  thrpt   30  561050.001 ± 4166.166  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_minOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_minOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 643765.189 ops/s
# Warmup Iteration   2: 984142.267 ops/s
# Warmup Iteration   3: 1174007.313 ops/s
# Warmup Iteration   4: 1186615.066 ops/s
# Warmup Iteration   5: 1196063.251 ops/s
# Warmup Iteration   6: 1189168.904 ops/s
# Warmup Iteration   7: 981726.055 ops/s
# Warmup Iteration   8: 1206594.411 ops/s
# Warmup Iteration   9: 1207501.107 ops/s
# Warmup Iteration  10: 1229004.760 ops/s
# Warmup Iteration  11: 1210338.839 ops/s
# Warmup Iteration  12: 1187348.929 ops/s
# Warmup Iteration  13: 1171613.837 ops/s
# Warmup Iteration  14: 1177372.568 ops/s
# Warmup Iteration  15: 1178936.677 ops/s
# Warmup Iteration  16: 1177614.166 ops/s
# Warmup Iteration  17: 1171343.503 ops/s
# Warmup Iteration  18: 1176344.732 ops/s
# Warmup Iteration  19: 1199995.806 ops/s
# Warmup Iteration  20: 1176018.899 ops/s
# Warmup Iteration  21: 1183639.118 ops/s
# Warmup Iteration  22: 1167791.222 ops/s
# Warmup Iteration  23: 1177006.699 ops/s
# Warmup Iteration  24: 1178468.545 ops/s
# Warmup Iteration  25: 1186541.180 ops/s
# Warmup Iteration  26: 1198324.627 ops/s
# Warmup Iteration  27: 1170094.124 ops/s
# Warmup Iteration  28: 1201681.773 ops/s
# Warmup Iteration  29: 1191668.340 ops/s
# Warmup Iteration  30: 1178030.981 ops/s
Iteration   1: 1188763.263 ops/s
Iteration   2: 1136895.975 ops/s
Iteration   3: 1152785.167 ops/s
Iteration   4: 1188235.837 ops/s
Iteration   5: 1173588.038 ops/s
Iteration   6: 1155655.385 ops/s
Iteration   7: 1153847.045 ops/s
Iteration   8: 1182329.294 ops/s
Iteration   9: 1165894.718 ops/s
Iteration  10: 1173252.599 ops/s
Iteration  11: 1184836.103 ops/s
Iteration  12: 1159790.341 ops/s
Iteration  13: 1164267.965 ops/s
Iteration  14: 1176666.060 ops/s
Iteration  15: 1156428.989 ops/s
Iteration  16: 1195496.252 ops/s
Iteration  17: 1187389.116 ops/s
Iteration  18: 1198294.841 ops/s
Iteration  19: 1185466.085 ops/s
Iteration  20: 1177634.351 ops/s
Iteration  21: 1180393.283 ops/s
Iteration  22: 1157278.634 ops/s
Iteration  23: 1159644.396 ops/s
Iteration  24: 1154446.217 ops/s
Iteration  25: 1168112.176 ops/s
Iteration  26: 1180648.069 ops/s
Iteration  27: 1204188.941 ops/s
Iteration  28: 1179741.752 ops/s
Iteration  29: 1179623.345 ops/s
Iteration  30: 1194666.890 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_minOptional":
  1173875.371 ±(99.9%) 10831.718 ops/s [Average]
  (min, avg, max) = (1136895.975, 1173875.371, 1204188.941), stdev = 16212.407
  CI (99.9%): [1163043.653, 1184707.089] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_minOptional  thrpt   30  1173875.371 ± 10831.718  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_min_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_min_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 545902.994 ops/s
# Warmup Iteration   2: 596572.945 ops/s
# Warmup Iteration   3: 698496.605 ops/s
# Warmup Iteration   4: 742870.172 ops/s
# Warmup Iteration   5: 796062.687 ops/s
# Warmup Iteration   6: 809884.066 ops/s
# Warmup Iteration   7: 787179.166 ops/s
# Warmup Iteration   8: 773600.853 ops/s
# Warmup Iteration   9: 780578.198 ops/s
# Warmup Iteration  10: 769583.301 ops/s
# Warmup Iteration  11: 761702.488 ops/s
# Warmup Iteration  12: 763536.285 ops/s
# Warmup Iteration  13: 769760.821 ops/s
# Warmup Iteration  14: 701578.524 ops/s
# Warmup Iteration  15: 689043.035 ops/s
# Warmup Iteration  16: 757792.867 ops/s
# Warmup Iteration  17: 820524.968 ops/s
# Warmup Iteration  18: 801826.461 ops/s
# Warmup Iteration  19: 791177.208 ops/s
# Warmup Iteration  20: 810242.610 ops/s
# Warmup Iteration  21: 804258.697 ops/s
# Warmup Iteration  22: 809446.492 ops/s
# Warmup Iteration  23: 809445.493 ops/s
# Warmup Iteration  24: 795389.052 ops/s
# Warmup Iteration  25: 798320.558 ops/s
# Warmup Iteration  26: 806616.706 ops/s
# Warmup Iteration  27: 803683.691 ops/s
# Warmup Iteration  28: 825721.648 ops/s
# Warmup Iteration  29: 801971.053 ops/s
# Warmup Iteration  30: 805130.745 ops/s
Iteration   1: 789954.310 ops/s
Iteration   2: 796301.131 ops/s
Iteration   3: 789656.166 ops/s
Iteration   4: 843417.177 ops/s
Iteration   5: 799259.018 ops/s
Iteration   6: 815849.412 ops/s
Iteration   7: 801547.173 ops/s
Iteration   8: 793415.601 ops/s
Iteration   9: 792045.939 ops/s
Iteration  10: 807129.147 ops/s
Iteration  11: 798858.211 ops/s
Iteration  12: 803840.496 ops/s
Iteration  13: 791214.380 ops/s
Iteration  14: 820319.189 ops/s
Iteration  15: 819225.062 ops/s
Iteration  16: 806446.988 ops/s
Iteration  17: 794041.831 ops/s
Iteration  18: 787362.379 ops/s
Iteration  19: 795497.853 ops/s
Iteration  20: 822562.874 ops/s
Iteration  21: 799737.605 ops/s
Iteration  22: 844904.374 ops/s
Iteration  23: 850029.289 ops/s
Iteration  24: 811117.871 ops/s
Iteration  25: 790876.829 ops/s
Iteration  26: 793729.354 ops/s
Iteration  27: 832434.811 ops/s
Iteration  28: 807656.252 ops/s
Iteration  29: 805967.380 ops/s
Iteration  30: 820731.991 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_min_empty_throws":
  807504.336 ±(99.9%) 11646.465 ops/s [Average]
  (min, avg, max) = (787362.379, 807504.336, 850029.289), stdev = 17431.882
  CI (99.9%): [795857.871, 819150.801] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_min_empty_throws  thrpt   30  807504.336 ± 11646.465  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_min_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_min_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 354028.569 ops/s
# Warmup Iteration   2: 375984.672 ops/s
# Warmup Iteration   3: 483694.220 ops/s
# Warmup Iteration   4: 500917.539 ops/s
# Warmup Iteration   5: 511796.873 ops/s
# Warmup Iteration   6: 514905.823 ops/s
# Warmup Iteration   7: 522484.114 ops/s
# Warmup Iteration   8: 511132.153 ops/s
# Warmup Iteration   9: 502805.642 ops/s
# Warmup Iteration  10: 506052.188 ops/s
# Warmup Iteration  11: 503587.262 ops/s
# Warmup Iteration  12: 448688.620 ops/s
# Warmup Iteration  13: 498820.543 ops/s
# Warmup Iteration  14: 509840.858 ops/s
# Warmup Iteration  15: 510894.476 ops/s
# Warmup Iteration  16: 509652.605 ops/s
# Warmup Iteration  17: 556399.900 ops/s
# Warmup Iteration  18: 526798.973 ops/s
# Warmup Iteration  19: 527801.521 ops/s
# Warmup Iteration  20: 531988.342 ops/s
# Warmup Iteration  21: 523251.440 ops/s
# Warmup Iteration  22: 523472.155 ops/s
# Warmup Iteration  23: 527138.302 ops/s
# Warmup Iteration  24: 529600.764 ops/s
# Warmup Iteration  25: 536772.790 ops/s
# Warmup Iteration  26: 524469.372 ops/s
# Warmup Iteration  27: 531189.378 ops/s
# Warmup Iteration  28: 533732.525 ops/s
# Warmup Iteration  29: 528319.555 ops/s
# Warmup Iteration  30: 531225.747 ops/s
Iteration   1: 525688.171 ops/s
Iteration   2: 519229.597 ops/s
Iteration   3: 517430.120 ops/s
Iteration   4: 526568.617 ops/s
Iteration   5: 520887.595 ops/s
Iteration   6: 519576.298 ops/s
Iteration   7: 522390.135 ops/s
Iteration   8: 522834.225 ops/s
Iteration   9: 520503.147 ops/s
Iteration  10: 529986.804 ops/s
Iteration  11: 516751.812 ops/s
Iteration  12: 518015.202 ops/s
Iteration  13: 522632.134 ops/s
Iteration  14: 520580.191 ops/s
Iteration  15: 520933.601 ops/s
Iteration  16: 517934.192 ops/s
Iteration  17: 521824.748 ops/s
Iteration  18: 510106.816 ops/s
Iteration  19: 523183.296 ops/s
Iteration  20: 517600.075 ops/s
Iteration  21: 527873.240 ops/s
Iteration  22: 521094.298 ops/s
Iteration  23: 520973.020 ops/s
Iteration  24: 531707.474 ops/s
Iteration  25: 548142.421 ops/s
Iteration  26: 510891.428 ops/s
Iteration  27: 521639.680 ops/s
Iteration  28: 527251.158 ops/s
Iteration  29: 532195.154 ops/s
Iteration  30: 530347.265 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_min_null_safe":
  522892.397 ±(99.9%) 4769.070 ops/s [Average]
  (min, avg, max) = (510106.816, 522892.397, 548142.421), stdev = 7138.120
  CI (99.9%): [518123.327, 527661.467] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_min_null_safe  thrpt   30  522892.397 ± 4769.070  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 373293.908 ops/s
# Warmup Iteration   2: 398251.032 ops/s
# Warmup Iteration   3: 495131.676 ops/s
# Warmup Iteration   4: 525182.388 ops/s
# Warmup Iteration   5: 525263.335 ops/s
# Warmup Iteration   6: 522505.340 ops/s
# Warmup Iteration   7: 529992.231 ops/s
# Warmup Iteration   8: 539358.920 ops/s
# Warmup Iteration   9: 527224.745 ops/s
# Warmup Iteration  10: 524665.417 ops/s
# Warmup Iteration  11: 527012.833 ops/s
# Warmup Iteration  12: 527155.033 ops/s
# Warmup Iteration  13: 443783.866 ops/s
# Warmup Iteration  14: 523804.741 ops/s
# Warmup Iteration  15: 526173.389 ops/s
# Warmup Iteration  16: 523376.157 ops/s
# Warmup Iteration  17: 548274.131 ops/s
# Warmup Iteration  18: 547332.580 ops/s
# Warmup Iteration  19: 543112.649 ops/s
# Warmup Iteration  20: 552485.700 ops/s
# Warmup Iteration  21: 543612.088 ops/s
# Warmup Iteration  22: 541458.792 ops/s
# Warmup Iteration  23: 543402.440 ops/s
# Warmup Iteration  24: 539154.888 ops/s
# Warmup Iteration  25: 548005.517 ops/s
# Warmup Iteration  26: 543919.726 ops/s
# Warmup Iteration  27: 560728.216 ops/s
# Warmup Iteration  28: 542316.074 ops/s
# Warmup Iteration  29: 549254.986 ops/s
# Warmup Iteration  30: 561143.749 ops/s
Iteration   1: 552379.467 ops/s
Iteration   2: 555498.135 ops/s
Iteration   3: 543094.295 ops/s
Iteration   4: 550474.563 ops/s
Iteration   5: 555744.570 ops/s
Iteration   6: 545872.475 ops/s
Iteration   7: 551921.465 ops/s
Iteration   8: 542080.931 ops/s
Iteration   9: 553810.987 ops/s
Iteration  10: 544714.202 ops/s
Iteration  11: 546556.675 ops/s
Iteration  12: 554738.244 ops/s
Iteration  13: 549915.801 ops/s
Iteration  14: 556110.418 ops/s
Iteration  15: 545365.373 ops/s
Iteration  16: 546420.373 ops/s
Iteration  17: 540465.866 ops/s
Iteration  18: 552370.946 ops/s
Iteration  19: 565716.220 ops/s
Iteration  20: 566927.626 ops/s
Iteration  21: 552703.927 ops/s
Iteration  22: 544946.342 ops/s
Iteration  23: 541281.690 ops/s
Iteration  24: 569819.228 ops/s
Iteration  25: 578567.154 ops/s
Iteration  26: 578042.139 ops/s
Iteration  27: 579501.307 ops/s
Iteration  28: 569341.470 ops/s
Iteration  29: 541787.162 ops/s
Iteration  30: 550649.393 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_min_null_throws":
  554227.282 ±(99.9%) 7707.070 ops/s [Average]
  (min, avg, max) = (540465.866, 554227.282, 579501.307), stdev = 11535.581
  CI (99.9%): [546520.211, 561934.352] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_min_null_throws  thrpt   30  554227.282 ± 7707.070  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 372020.954 ops/s
# Warmup Iteration   2: 398777.063 ops/s
# Warmup Iteration   3: 498480.549 ops/s
# Warmup Iteration   4: 519263.514 ops/s
# Warmup Iteration   5: 557888.911 ops/s
# Warmup Iteration   6: 537564.754 ops/s
# Warmup Iteration   7: 539491.848 ops/s
# Warmup Iteration   8: 505917.060 ops/s
# Warmup Iteration   9: 541056.430 ops/s
# Warmup Iteration  10: 549460.785 ops/s
# Warmup Iteration  11: 535459.530 ops/s
# Warmup Iteration  12: 535812.355 ops/s
# Warmup Iteration  13: 463051.209 ops/s
# Warmup Iteration  14: 551376.774 ops/s
# Warmup Iteration  15: 536552.659 ops/s
# Warmup Iteration  16: 533615.802 ops/s
# Warmup Iteration  17: 547168.461 ops/s
# Warmup Iteration  18: 534012.338 ops/s
# Warmup Iteration  19: 554316.872 ops/s
# Warmup Iteration  20: 536003.583 ops/s
# Warmup Iteration  21: 538262.709 ops/s
# Warmup Iteration  22: 536378.315 ops/s
# Warmup Iteration  23: 535627.632 ops/s
# Warmup Iteration  24: 542650.353 ops/s
# Warmup Iteration  25: 573453.020 ops/s
# Warmup Iteration  26: 563528.171 ops/s
# Warmup Iteration  27: 540210.236 ops/s
# Warmup Iteration  28: 544195.028 ops/s
# Warmup Iteration  29: 553242.260 ops/s
# Warmup Iteration  30: 569156.252 ops/s
Iteration   1: 562178.559 ops/s
Iteration   2: 538801.246 ops/s
Iteration   3: 561665.927 ops/s
Iteration   4: 555822.217 ops/s
Iteration   5: 553672.882 ops/s
Iteration   6: 552871.734 ops/s
Iteration   7: 551422.005 ops/s
Iteration   8: 559656.714 ops/s
Iteration   9: 564500.350 ops/s
Iteration  10: 556795.111 ops/s
Iteration  11: 576127.076 ops/s
Iteration  12: 573828.082 ops/s
Iteration  13: 573913.345 ops/s
Iteration  14: 576897.221 ops/s
Iteration  15: 575678.093 ops/s
Iteration  16: 564127.083 ops/s
Iteration  17: 554580.261 ops/s
Iteration  18: 548888.671 ops/s
Iteration  19: 554503.800 ops/s
Iteration  20: 546985.632 ops/s
Iteration  21: 536866.922 ops/s
Iteration  22: 552669.605 ops/s
Iteration  23: 567215.857 ops/s
Iteration  24: 544531.705 ops/s
Iteration  25: 538834.340 ops/s
Iteration  26: 538355.695 ops/s
Iteration  27: 567647.461 ops/s
Iteration  28: 576002.993 ops/s
Iteration  29: 567664.109 ops/s
Iteration  30: 539847.334 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_min_null_throws_without_comparator":
  557751.734 ±(99.9%) 8450.632 ops/s [Average]
  (min, avg, max) = (536866.922, 557751.734, 576897.221), stdev = 12648.509
  CI (99.9%): [549301.103, 566202.366] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  557751.734 ± 8450.632  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1877479.689 ops/s
# Warmup Iteration   2: 2700375.512 ops/s
# Warmup Iteration   3: 3243396.925 ops/s
# Warmup Iteration   4: 3300232.920 ops/s
# Warmup Iteration   5: 3306134.593 ops/s
# Warmup Iteration   6: 3301546.416 ops/s
# Warmup Iteration   7: 2801731.864 ops/s
# Warmup Iteration   8: 3458314.849 ops/s
# Warmup Iteration   9: 3444961.036 ops/s
# Warmup Iteration  10: 3501996.944 ops/s
# Warmup Iteration  11: 3526395.599 ops/s
# Warmup Iteration  12: 3516715.088 ops/s
# Warmup Iteration  13: 3481753.026 ops/s
# Warmup Iteration  14: 3448098.678 ops/s
# Warmup Iteration  15: 3461102.129 ops/s
# Warmup Iteration  16: 3440770.657 ops/s
# Warmup Iteration  17: 3448074.478 ops/s
# Warmup Iteration  18: 3385304.037 ops/s
# Warmup Iteration  19: 3415732.473 ops/s
# Warmup Iteration  20: 3475190.006 ops/s
# Warmup Iteration  21: 3450947.331 ops/s
# Warmup Iteration  22: 3391134.474 ops/s
# Warmup Iteration  23: 3385383.544 ops/s
# Warmup Iteration  24: 3385155.828 ops/s
# Warmup Iteration  25: 3429386.318 ops/s
# Warmup Iteration  26: 3484060.828 ops/s
# Warmup Iteration  27: 3388540.595 ops/s
# Warmup Iteration  28: 3298601.157 ops/s
# Warmup Iteration  29: 3270958.269 ops/s
# Warmup Iteration  30: 3307871.871 ops/s
Iteration   1: 3369555.042 ops/s
Iteration   2: 3306578.151 ops/s
Iteration   3: 3336207.532 ops/s
Iteration   4: 3311313.954 ops/s
Iteration   5: 3299049.445 ops/s
Iteration   6: 3365006.594 ops/s
Iteration   7: 3376391.509 ops/s
Iteration   8: 3314143.307 ops/s
Iteration   9: 3358906.361 ops/s
Iteration  10: 3264451.250 ops/s
Iteration  11: 3334286.846 ops/s
Iteration  12: 3302743.263 ops/s
Iteration  13: 3272840.712 ops/s
Iteration  14: 3275797.262 ops/s
Iteration  15: 3335601.445 ops/s
Iteration  16: 3316759.056 ops/s
Iteration  17: 3300979.868 ops/s
Iteration  18: 3394719.872 ops/s
Iteration  19: 3482883.567 ops/s
Iteration  20: 3412936.804 ops/s
Iteration  21: 3304790.525 ops/s
Iteration  22: 3300955.335 ops/s
Iteration  23: 3295754.268 ops/s
Iteration  24: 3255739.421 ops/s
Iteration  25: 3372183.999 ops/s
Iteration  26: 3317617.726 ops/s
Iteration  27: 3345128.562 ops/s
Iteration  28: 3379583.190 ops/s
Iteration  29: 3350231.267 ops/s
Iteration  30: 3418025.609 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_min_without_comparator":
  3335705.391 ±(99.9%) 33895.971 ops/s [Average]
  (min, avg, max) = (3255739.421, 3335705.391, 3482883.567), stdev = 50733.897
  CI (99.9%): [3301809.421, 3369601.362] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_min_without_comparator  thrpt   30  3335705.391 ± 33895.971  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3250210.480 ops/s
# Warmup Iteration   2: 7112882.722 ops/s
# Warmup Iteration   3: 7059467.656 ops/s
# Warmup Iteration   4: 5799474.784 ops/s
# Warmup Iteration   5: 6924168.490 ops/s
# Warmup Iteration   6: 6940536.301 ops/s
# Warmup Iteration   7: 7051444.632 ops/s
# Warmup Iteration   8: 6855756.252 ops/s
# Warmup Iteration   9: 7150633.390 ops/s
# Warmup Iteration  10: 6998087.648 ops/s
# Warmup Iteration  11: 7051575.359 ops/s
# Warmup Iteration  12: 7147662.244 ops/s
# Warmup Iteration  13: 6990214.449 ops/s
# Warmup Iteration  14: 6946970.444 ops/s
# Warmup Iteration  15: 6995922.224 ops/s
# Warmup Iteration  16: 7003910.769 ops/s
# Warmup Iteration  17: 6935164.339 ops/s
# Warmup Iteration  18: 6994690.210 ops/s
# Warmup Iteration  19: 6953687.839 ops/s
# Warmup Iteration  20: 6920986.496 ops/s
# Warmup Iteration  21: 6989467.900 ops/s
# Warmup Iteration  22: 7152693.021 ops/s
# Warmup Iteration  23: 6907716.495 ops/s
# Warmup Iteration  24: 7210462.937 ops/s
# Warmup Iteration  25: 7374350.906 ops/s
# Warmup Iteration  26: 7190022.244 ops/s
# Warmup Iteration  27: 6965431.909 ops/s
# Warmup Iteration  28: 7026554.699 ops/s
# Warmup Iteration  29: 6911817.541 ops/s
# Warmup Iteration  30: 6907351.054 ops/s
Iteration   1: 7064363.341 ops/s
Iteration   2: 6950920.045 ops/s
Iteration   3: 6936586.931 ops/s
Iteration   4: 6971071.491 ops/s
Iteration   5: 6955282.602 ops/s
Iteration   6: 6939118.544 ops/s
Iteration   7: 6963112.234 ops/s
Iteration   8: 6792113.553 ops/s
Iteration   9: 6935437.663 ops/s
Iteration  10: 6829275.428 ops/s
Iteration  11: 6905038.363 ops/s
Iteration  12: 7050469.905 ops/s
Iteration  13: 7054023.735 ops/s
Iteration  14: 6885233.561 ops/s
Iteration  15: 6998174.864 ops/s
Iteration  16: 6931276.616 ops/s
Iteration  17: 7271575.306 ops/s
Iteration  18: 6913083.767 ops/s
Iteration  19: 6933155.237 ops/s
Iteration  20: 7014042.511 ops/s
Iteration  21: 6863733.994 ops/s
Iteration  22: 7005104.082 ops/s
Iteration  23: 6988813.373 ops/s
Iteration  24: 6978590.752 ops/s
Iteration  25: 7380907.805 ops/s
Iteration  26: 7331022.247 ops/s
Iteration  27: 7027480.397 ops/s
Iteration  28: 6930340.415 ops/s
Iteration  29: 7032824.541 ops/s
Iteration  30: 7092359.024 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_newEmpty":
  6997484.411 ±(99.9%) 87923.140 ops/s [Average]
  (min, avg, max) = (6792113.553, 6997484.411, 7380907.805), stdev = 131599.227
  CI (99.9%): [6909561.271, 7085407.551] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_newEmpty  thrpt   30  6997484.411 ± 87923.140  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 427980.624 ops/s
# Warmup Iteration   2: 552360.099 ops/s
# Warmup Iteration   3: 706691.111 ops/s
# Warmup Iteration   4: 709544.084 ops/s
# Warmup Iteration   5: 716071.782 ops/s
# Warmup Iteration   6: 707526.623 ops/s
# Warmup Iteration   7: 705049.374 ops/s
# Warmup Iteration   8: 632035.675 ops/s
# Warmup Iteration   9: 647523.860 ops/s
# Warmup Iteration  10: 709082.437 ops/s
# Warmup Iteration  11: 694193.423 ops/s
# Warmup Iteration  12: 710329.265 ops/s
# Warmup Iteration  13: 715391.154 ops/s
# Warmup Iteration  14: 694395.975 ops/s
# Warmup Iteration  15: 697731.328 ops/s
# Warmup Iteration  16: 718160.325 ops/s
# Warmup Iteration  17: 733770.918 ops/s
# Warmup Iteration  18: 715330.793 ops/s
# Warmup Iteration  19: 700761.994 ops/s
# Warmup Iteration  20: 731196.288 ops/s
# Warmup Iteration  21: 704256.144 ops/s
# Warmup Iteration  22: 705010.156 ops/s
# Warmup Iteration  23: 724660.996 ops/s
# Warmup Iteration  24: 722468.735 ops/s
# Warmup Iteration  25: 701673.774 ops/s
# Warmup Iteration  26: 711468.041 ops/s
# Warmup Iteration  27: 712180.816 ops/s
# Warmup Iteration  28: 705978.244 ops/s
# Warmup Iteration  29: 707686.702 ops/s
# Warmup Iteration  30: 714626.504 ops/s
Iteration   1: 713278.659 ops/s
Iteration   2: 701971.371 ops/s
Iteration   3: 680034.707 ops/s
Iteration   4: 695701.770 ops/s
Iteration   5: 693257.938 ops/s
Iteration   6: 695641.711 ops/s
Iteration   7: 719665.708 ops/s
Iteration   8: 717439.411 ops/s
Iteration   9: 694886.770 ops/s
Iteration  10: 693615.563 ops/s
Iteration  11: 692272.434 ops/s
Iteration  12: 698994.707 ops/s
Iteration  13: 714408.196 ops/s
Iteration  14: 707793.291 ops/s
Iteration  15: 711914.992 ops/s
Iteration  16: 707726.373 ops/s
Iteration  17: 711627.034 ops/s
Iteration  18: 691916.662 ops/s
Iteration  19: 696254.206 ops/s
Iteration  20: 687581.506 ops/s
Iteration  21: 706190.081 ops/s
Iteration  22: 698083.111 ops/s
Iteration  23: 687317.197 ops/s
Iteration  24: 719511.102 ops/s
Iteration  25: 691374.686 ops/s
Iteration  26: 691251.614 ops/s
Iteration  27: 697787.082 ops/s
Iteration  28: 692114.701 ops/s
Iteration  29: 716822.371 ops/s
Iteration  30: 741591.724 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_noneSatisfy":
  702267.556 ±(99.9%) 8754.458 ops/s [Average]
  (min, avg, max) = (680034.707, 702267.556, 741591.724), stdev = 13103.262
  CI (99.9%): [693513.098, 711022.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_noneSatisfy  thrpt   30  702267.556 ± 8754.458  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 513159.336 ops/s
# Warmup Iteration   2: 634175.950 ops/s
# Warmup Iteration   3: 843760.326 ops/s
# Warmup Iteration   4: 851772.840 ops/s
# Warmup Iteration   5: 835173.022 ops/s
# Warmup Iteration   6: 830739.551 ops/s
# Warmup Iteration   7: 856154.527 ops/s
# Warmup Iteration   8: 887245.611 ops/s
# Warmup Iteration   9: 756261.489 ops/s
# Warmup Iteration  10: 815144.951 ops/s
# Warmup Iteration  11: 852153.210 ops/s
# Warmup Iteration  12: 844780.968 ops/s
# Warmup Iteration  13: 859100.352 ops/s
# Warmup Iteration  14: 841992.306 ops/s
# Warmup Iteration  15: 853994.272 ops/s
# Warmup Iteration  16: 836716.718 ops/s
# Warmup Iteration  17: 840452.511 ops/s
# Warmup Iteration  18: 850328.063 ops/s
# Warmup Iteration  19: 889767.658 ops/s
# Warmup Iteration  20: 870125.359 ops/s
# Warmup Iteration  21: 837797.290 ops/s
# Warmup Iteration  22: 871142.391 ops/s
# Warmup Iteration  23: 883823.869 ops/s
# Warmup Iteration  24: 843764.849 ops/s
# Warmup Iteration  25: 847137.904 ops/s
# Warmup Iteration  26: 869896.262 ops/s
# Warmup Iteration  27: 893435.628 ops/s
# Warmup Iteration  28: 890492.658 ops/s
# Warmup Iteration  29: 843854.811 ops/s
# Warmup Iteration  30: 839319.023 ops/s
Iteration   1: 843108.409 ops/s
Iteration   2: 841566.855 ops/s
Iteration   3: 836307.832 ops/s
Iteration   4: 845309.753 ops/s
Iteration   5: 837218.246 ops/s
Iteration   6: 841690.563 ops/s
Iteration   7: 837589.243 ops/s
Iteration   8: 846607.042 ops/s
Iteration   9: 835660.582 ops/s
Iteration  10: 823157.189 ops/s
Iteration  11: 860152.470 ops/s
Iteration  12: 880189.889 ops/s
Iteration  13: 854476.251 ops/s
Iteration  14: 884198.959 ops/s
Iteration  15: 882743.939 ops/s
Iteration  16: 866290.029 ops/s
Iteration  17: 850831.597 ops/s
Iteration  18: 875353.175 ops/s
Iteration  19: 874013.651 ops/s
Iteration  20: 848138.356 ops/s
Iteration  21: 856865.142 ops/s
Iteration  22: 850236.753 ops/s
Iteration  23: 855908.460 ops/s
Iteration  24: 874740.927 ops/s
Iteration  25: 859528.052 ops/s
Iteration  26: 854057.508 ops/s
Iteration  27: 844687.614 ops/s
Iteration  28: 865120.720 ops/s
Iteration  29: 844053.469 ops/s
Iteration  30: 838311.903 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_noneSatisfyWith":
  853603.819 ±(99.9%) 10569.689 ops/s [Average]
  (min, avg, max) = (823157.189, 853603.819, 884198.959), stdev = 15820.215
  CI (99.9%): [843034.130, 864173.509] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  853603.819 ± 10569.689  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 589832.414 ops/s
# Warmup Iteration   2: 785950.916 ops/s
# Warmup Iteration   3: 966948.728 ops/s
# Warmup Iteration   4: 995617.998 ops/s
# Warmup Iteration   5: 995550.624 ops/s
# Warmup Iteration   6: 994456.682 ops/s
# Warmup Iteration   7: 974982.373 ops/s
# Warmup Iteration   8: 907731.300 ops/s
# Warmup Iteration   9: 885136.448 ops/s
# Warmup Iteration  10: 985175.030 ops/s
# Warmup Iteration  11: 983631.127 ops/s
# Warmup Iteration  12: 1003108.483 ops/s
# Warmup Iteration  13: 983138.402 ops/s
# Warmup Iteration  14: 971085.490 ops/s
# Warmup Iteration  15: 991019.634 ops/s
# Warmup Iteration  16: 978802.453 ops/s
# Warmup Iteration  17: 993504.448 ops/s
# Warmup Iteration  18: 1010772.170 ops/s
# Warmup Iteration  19: 1019443.691 ops/s
# Warmup Iteration  20: 995269.004 ops/s
# Warmup Iteration  21: 976944.975 ops/s
# Warmup Iteration  22: 973787.297 ops/s
# Warmup Iteration  23: 1024996.865 ops/s
# Warmup Iteration  24: 1001763.144 ops/s
# Warmup Iteration  25: 991861.674 ops/s
# Warmup Iteration  26: 996876.138 ops/s
# Warmup Iteration  27: 998175.906 ops/s
# Warmup Iteration  28: 988389.170 ops/s
# Warmup Iteration  29: 977683.278 ops/s
# Warmup Iteration  30: 977498.973 ops/s
Iteration   1: 980915.522 ops/s
Iteration   2: 973148.099 ops/s
Iteration   3: 972482.323 ops/s
Iteration   4: 982387.593 ops/s
Iteration   5: 988168.895 ops/s
Iteration   6: 972104.257 ops/s
Iteration   7: 982017.845 ops/s
Iteration   8: 971978.995 ops/s
Iteration   9: 1005478.854 ops/s
Iteration  10: 980202.816 ops/s
Iteration  11: 982980.725 ops/s
Iteration  12: 965468.986 ops/s
Iteration  13: 979538.502 ops/s
Iteration  14: 986309.687 ops/s
Iteration  15: 976350.122 ops/s
Iteration  16: 996400.396 ops/s
Iteration  17: 979172.509 ops/s
Iteration  18: 970083.712 ops/s
Iteration  19: 1026135.030 ops/s
Iteration  20: 1040487.236 ops/s
Iteration  21: 1037610.526 ops/s
Iteration  22: 981943.380 ops/s
Iteration  23: 1013308.159 ops/s
Iteration  24: 992025.285 ops/s
Iteration  25: 974201.898 ops/s
Iteration  26: 970155.415 ops/s
Iteration  27: 979777.473 ops/s
Iteration  28: 995193.385 ops/s
Iteration  29: 1016776.297 ops/s
Iteration  30: 959742.981 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences":
  987751.563 ±(99.9%) 13750.387 ops/s [Average]
  (min, avg, max) = (959742.981, 987751.563, 1040487.236), stdev = 20580.934
  CI (99.9%): [974001.176, 1001501.951] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences  thrpt   30  987751.563 ± 13750.387  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2495110.408 ops/s
# Warmup Iteration   2: 5761010.757 ops/s
# Warmup Iteration   3: 4848512.439 ops/s
# Warmup Iteration   4: 5769567.521 ops/s
# Warmup Iteration   5: 5757934.880 ops/s
# Warmup Iteration   6: 6038087.038 ops/s
# Warmup Iteration   7: 5877260.472 ops/s
# Warmup Iteration   8: 5844049.277 ops/s
# Warmup Iteration   9: 5789510.343 ops/s
# Warmup Iteration  10: 5741117.887 ops/s
# Warmup Iteration  11: 5787364.635 ops/s
# Warmup Iteration  12: 5744868.455 ops/s
# Warmup Iteration  13: 5862109.737 ops/s
# Warmup Iteration  14: 5783080.424 ops/s
# Warmup Iteration  15: 5912493.283 ops/s
# Warmup Iteration  16: 5735461.241 ops/s
# Warmup Iteration  17: 5832065.754 ops/s
# Warmup Iteration  18: 5792629.340 ops/s
# Warmup Iteration  19: 5737291.498 ops/s
# Warmup Iteration  20: 5732415.851 ops/s
# Warmup Iteration  21: 6085830.948 ops/s
# Warmup Iteration  22: 5751836.127 ops/s
# Warmup Iteration  23: 5780670.724 ops/s
# Warmup Iteration  24: 5821262.561 ops/s
# Warmup Iteration  25: 5763756.852 ops/s
# Warmup Iteration  26: 5720177.181 ops/s
# Warmup Iteration  27: 5867820.861 ops/s
# Warmup Iteration  28: 5912236.902 ops/s
# Warmup Iteration  29: 5751813.868 ops/s
# Warmup Iteration  30: 5751045.437 ops/s
Iteration   1: 5855204.188 ops/s
Iteration   2: 5909811.037 ops/s
Iteration   3: 5792908.024 ops/s
Iteration   4: 5866662.445 ops/s
Iteration   5: 5821082.565 ops/s
Iteration   6: 5823138.682 ops/s
Iteration   7: 5813060.257 ops/s
Iteration   8: 5712549.491 ops/s
Iteration   9: 5787226.513 ops/s
Iteration  10: 5900402.044 ops/s
Iteration  11: 6115504.411 ops/s
Iteration  12: 5841992.466 ops/s
Iteration  13: 5804248.879 ops/s
Iteration  14: 5818794.046 ops/s
Iteration  15: 5780203.835 ops/s
Iteration  16: 5760930.135 ops/s
Iteration  17: 5811187.467 ops/s
Iteration  18: 5831962.742 ops/s
Iteration  19: 5918365.310 ops/s
Iteration  20: 5919437.705 ops/s
Iteration  21: 5874646.482 ops/s
Iteration  22: 5792210.769 ops/s
Iteration  23: 5847522.156 ops/s
Iteration  24: 5631513.806 ops/s
Iteration  25: 5818491.725 ops/s
Iteration  26: 5856639.200 ops/s
Iteration  27: 5873540.773 ops/s
Iteration  28: 5823844.618 ops/s
Iteration  29: 5823000.202 ops/s
Iteration  30: 5843420.737 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_notEmpty":
  5835650.090 ±(99.9%) 52892.113 ops/s [Average]
  (min, avg, max) = (5631513.806, 5835650.090, 6115504.411), stdev = 79166.431
  CI (99.9%): [5782757.977, 5888542.203] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_notEmpty  thrpt   30  5835650.090 ± 52892.113  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_occurrencesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_occurrencesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1779614.736 ops/s
# Warmup Iteration   2: 3363098.392 ops/s
# Warmup Iteration   3: 3639867.749 ops/s
# Warmup Iteration   4: 3407749.430 ops/s
# Warmup Iteration   5: 3035531.237 ops/s
# Warmup Iteration   6: 3265615.082 ops/s
# Warmup Iteration   7: 3470145.981 ops/s
# Warmup Iteration   8: 3436070.472 ops/s
# Warmup Iteration   9: 3442200.620 ops/s
# Warmup Iteration  10: 3475291.546 ops/s
# Warmup Iteration  11: 3483285.935 ops/s
# Warmup Iteration  12: 3437975.773 ops/s
# Warmup Iteration  13: 3492025.846 ops/s
# Warmup Iteration  14: 3459608.056 ops/s
# Warmup Iteration  15: 3467213.256 ops/s
# Warmup Iteration  16: 3429289.846 ops/s
# Warmup Iteration  17: 3467933.612 ops/s
# Warmup Iteration  18: 3423766.071 ops/s
# Warmup Iteration  19: 3445160.629 ops/s
# Warmup Iteration  20: 3460304.952 ops/s
# Warmup Iteration  21: 3427748.378 ops/s
# Warmup Iteration  22: 3496599.278 ops/s
# Warmup Iteration  23: 3479977.813 ops/s
# Warmup Iteration  24: 3461322.593 ops/s
# Warmup Iteration  25: 3642810.100 ops/s
# Warmup Iteration  26: 3492303.022 ops/s
# Warmup Iteration  27: 3567682.255 ops/s
# Warmup Iteration  28: 3519242.609 ops/s
# Warmup Iteration  29: 3584553.947 ops/s
# Warmup Iteration  30: 3543552.911 ops/s
Iteration   1: 3477187.753 ops/s
Iteration   2: 3452267.137 ops/s
Iteration   3: 3486356.503 ops/s
Iteration   4: 3422128.767 ops/s
Iteration   5: 3574722.473 ops/s
Iteration   6: 3470596.370 ops/s
Iteration   7: 3485909.016 ops/s
Iteration   8: 3447005.190 ops/s
Iteration   9: 3464997.291 ops/s
Iteration  10: 3422924.243 ops/s
Iteration  11: 3449997.282 ops/s
Iteration  12: 3460711.911 ops/s
Iteration  13: 3457697.627 ops/s
Iteration  14: 3485138.129 ops/s
Iteration  15: 3458466.881 ops/s
Iteration  16: 3514117.042 ops/s
Iteration  17: 3538595.677 ops/s
Iteration  18: 3521531.703 ops/s
Iteration  19: 3478217.743 ops/s
Iteration  20: 3553372.980 ops/s
Iteration  21: 3477046.839 ops/s
Iteration  22: 3455294.855 ops/s
Iteration  23: 3559378.446 ops/s
Iteration  24: 3527295.691 ops/s
Iteration  25: 3537015.923 ops/s
Iteration  26: 3430837.481 ops/s
Iteration  27: 3428712.658 ops/s
Iteration  28: 3370436.859 ops/s
Iteration  29: 3439782.246 ops/s
Iteration  30: 3467267.325 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_occurrencesOf":
  3477167.001 ±(99.9%) 31090.777 ops/s [Average]
  (min, avg, max) = (3370436.859, 3477167.001, 3574722.473), stdev = 46535.215
  CI (99.9%): [3446076.224, 3508257.779] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_occurrencesOf  thrpt   30  3477167.001 ± 31090.777  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 96862.612 ops/s
# Warmup Iteration   2: 169321.665 ops/s
# Warmup Iteration   3: 207624.868 ops/s
# Warmup Iteration   4: 208982.908 ops/s
# Warmup Iteration   5: 207476.835 ops/s
# Warmup Iteration   6: 179455.121 ops/s
# Warmup Iteration   7: 209189.857 ops/s
# Warmup Iteration   8: 207312.203 ops/s
# Warmup Iteration   9: 216222.091 ops/s
# Warmup Iteration  10: 207776.838 ops/s
# Warmup Iteration  11: 205653.231 ops/s
# Warmup Iteration  12: 204172.623 ops/s
# Warmup Iteration  13: 209929.658 ops/s
# Warmup Iteration  14: 207388.971 ops/s
# Warmup Iteration  15: 206758.148 ops/s
# Warmup Iteration  16: 214262.443 ops/s
# Warmup Iteration  17: 217948.351 ops/s
# Warmup Iteration  18: 206177.443 ops/s
# Warmup Iteration  19: 204312.176 ops/s
# Warmup Iteration  20: 204961.039 ops/s
# Warmup Iteration  21: 206064.847 ops/s
# Warmup Iteration  22: 206901.001 ops/s
# Warmup Iteration  23: 208475.825 ops/s
# Warmup Iteration  24: 204623.601 ops/s
# Warmup Iteration  25: 216898.918 ops/s
# Warmup Iteration  26: 211283.694 ops/s
# Warmup Iteration  27: 210157.438 ops/s
# Warmup Iteration  28: 208238.905 ops/s
# Warmup Iteration  29: 211011.881 ops/s
# Warmup Iteration  30: 208368.330 ops/s
Iteration   1: 204511.957 ops/s
Iteration   2: 206149.198 ops/s
Iteration   3: 204861.730 ops/s
Iteration   4: 208197.492 ops/s
Iteration   5: 202683.266 ops/s
Iteration   6: 205564.035 ops/s
Iteration   7: 201847.885 ops/s
Iteration   8: 207625.651 ops/s
Iteration   9: 206914.589 ops/s
Iteration  10: 204666.467 ops/s
Iteration  11: 206788.516 ops/s
Iteration  12: 207845.977 ops/s
Iteration  13: 209081.530 ops/s
Iteration  14: 218108.345 ops/s
Iteration  15: 206089.278 ops/s
Iteration  16: 208485.518 ops/s
Iteration  17: 209316.714 ops/s
Iteration  18: 208526.775 ops/s
Iteration  19: 208631.611 ops/s
Iteration  20: 205362.398 ops/s
Iteration  21: 204748.355 ops/s
Iteration  22: 216370.979 ops/s
Iteration  23: 215572.080 ops/s
Iteration  24: 206196.847 ops/s
Iteration  25: 209299.691 ops/s
Iteration  26: 210906.150 ops/s
Iteration  27: 210708.587 ops/s
Iteration  28: 208994.174 ops/s
Iteration  29: 209225.561 ops/s
Iteration  30: 205259.771 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_partition":
  207951.371 ±(99.9%) 2471.014 ops/s [Average]
  (min, avg, max) = (201847.885, 207951.371, 218108.345), stdev = 3698.498
  CI (99.9%): [205480.357, 210422.385] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_partition  thrpt   30  207951.371 ± 2471.014  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 254083.951 ops/s
# Warmup Iteration   2: 432082.240 ops/s
# Warmup Iteration   3: 513567.753 ops/s
# Warmup Iteration   4: 506856.333 ops/s
# Warmup Iteration   5: 517163.955 ops/s
# Warmup Iteration   6: 443108.785 ops/s
# Warmup Iteration   7: 483672.257 ops/s
# Warmup Iteration   8: 505571.868 ops/s
# Warmup Iteration   9: 504045.250 ops/s
# Warmup Iteration  10: 515998.591 ops/s
# Warmup Iteration  11: 518084.043 ops/s
# Warmup Iteration  12: 506465.260 ops/s
# Warmup Iteration  13: 507801.256 ops/s
# Warmup Iteration  14: 504892.518 ops/s
# Warmup Iteration  15: 504851.287 ops/s
# Warmup Iteration  16: 507382.217 ops/s
# Warmup Iteration  17: 520094.438 ops/s
# Warmup Iteration  18: 504292.249 ops/s
# Warmup Iteration  19: 501700.744 ops/s
# Warmup Iteration  20: 501676.655 ops/s
# Warmup Iteration  21: 503964.385 ops/s
# Warmup Iteration  22: 507997.507 ops/s
# Warmup Iteration  23: 500692.825 ops/s
# Warmup Iteration  24: 501294.145 ops/s
# Warmup Iteration  25: 504992.542 ops/s
# Warmup Iteration  26: 514546.236 ops/s
# Warmup Iteration  27: 536907.166 ops/s
# Warmup Iteration  28: 508508.344 ops/s
# Warmup Iteration  29: 511553.342 ops/s
# Warmup Iteration  30: 500591.368 ops/s
Iteration   1: 499443.839 ops/s
Iteration   2: 514845.424 ops/s
Iteration   3: 536700.131 ops/s
Iteration   4: 526840.978 ops/s
Iteration   5: 505713.701 ops/s
Iteration   6: 525205.324 ops/s
Iteration   7: 534086.303 ops/s
Iteration   8: 504310.660 ops/s
Iteration   9: 502810.311 ops/s
Iteration  10: 505085.401 ops/s
Iteration  11: 503592.751 ops/s
Iteration  12: 536765.446 ops/s
Iteration  13: 508644.616 ops/s
Iteration  14: 527322.065 ops/s
Iteration  15: 537046.237 ops/s
Iteration  16: 539128.025 ops/s
Iteration  17: 533380.662 ops/s
Iteration  18: 520966.470 ops/s
Iteration  19: 512460.324 ops/s
Iteration  20: 493964.233 ops/s
Iteration  21: 507042.647 ops/s
Iteration  22: 514780.929 ops/s
Iteration  23: 508354.647 ops/s
Iteration  24: 516688.695 ops/s
Iteration  25: 504870.625 ops/s
Iteration  26: 503160.148 ops/s
Iteration  27: 504140.741 ops/s
Iteration  28: 537088.906 ops/s
Iteration  29: 536356.376 ops/s
Iteration  30: 501445.781 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_partitionWhile":
  516741.413 ±(99.9%) 9580.771 ops/s [Average]
  (min, avg, max) = (493964.233, 516741.413, 539128.025), stdev = 14340.048
  CI (99.9%): [507160.643, 526322.184] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_partitionWhile  thrpt   30  516741.413 ± 9580.771  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 75280.928 ops/s
# Warmup Iteration   2: 112150.805 ops/s
# Warmup Iteration   3: 142013.371 ops/s
# Warmup Iteration   4: 142625.571 ops/s
# Warmup Iteration   5: 148720.523 ops/s
# Warmup Iteration   6: 146098.207 ops/s
# Warmup Iteration   7: 147570.849 ops/s
# Warmup Iteration   8: 125586.854 ops/s
# Warmup Iteration   9: 150705.259 ops/s
# Warmup Iteration  10: 144430.298 ops/s
# Warmup Iteration  11: 147870.540 ops/s
# Warmup Iteration  12: 143652.872 ops/s
# Warmup Iteration  13: 141980.058 ops/s
# Warmup Iteration  14: 143259.167 ops/s
# Warmup Iteration  15: 150002.723 ops/s
# Warmup Iteration  16: 149352.734 ops/s
# Warmup Iteration  17: 144830.537 ops/s
# Warmup Iteration  18: 142633.886 ops/s
# Warmup Iteration  19: 142528.143 ops/s
# Warmup Iteration  20: 142066.967 ops/s
# Warmup Iteration  21: 145058.538 ops/s
# Warmup Iteration  22: 145163.540 ops/s
# Warmup Iteration  23: 149368.076 ops/s
# Warmup Iteration  24: 141170.340 ops/s
# Warmup Iteration  25: 142398.705 ops/s
# Warmup Iteration  26: 143508.435 ops/s
# Warmup Iteration  27: 144135.222 ops/s
# Warmup Iteration  28: 148649.098 ops/s
# Warmup Iteration  29: 144073.823 ops/s
# Warmup Iteration  30: 150655.204 ops/s
Iteration   1: 150233.450 ops/s
Iteration   2: 146441.349 ops/s
Iteration   3: 145209.648 ops/s
Iteration   4: 147655.444 ops/s
Iteration   5: 145973.059 ops/s
Iteration   6: 141102.106 ops/s
Iteration   7: 142017.837 ops/s
Iteration   8: 150591.663 ops/s
Iteration   9: 150069.663 ops/s
Iteration  10: 145365.705 ops/s
Iteration  11: 146119.225 ops/s
Iteration  12: 145228.551 ops/s
Iteration  13: 149001.908 ops/s
Iteration  14: 146447.629 ops/s
Iteration  15: 139742.680 ops/s
Iteration  16: 143409.970 ops/s
Iteration  17: 143001.421 ops/s
Iteration  18: 147776.973 ops/s
Iteration  19: 146845.619 ops/s
Iteration  20: 145414.103 ops/s
Iteration  21: 143180.818 ops/s
Iteration  22: 147854.643 ops/s
Iteration  23: 145037.495 ops/s
Iteration  24: 141125.811 ops/s
Iteration  25: 141418.840 ops/s
Iteration  26: 143277.156 ops/s
Iteration  27: 145567.752 ops/s
Iteration  28: 144107.069 ops/s
Iteration  29: 147958.625 ops/s
Iteration  30: 150757.953 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_partitionWith":
  145597.806 ±(99.9%) 1993.298 ops/s [Average]
  (min, avg, max) = (139742.680, 145597.806, 150757.953), stdev = 2983.475
  CI (99.9%): [143604.507, 147591.104] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_partitionWith  thrpt   30  145597.806 ± 1993.298  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_reduceOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_reduceOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 307753.830 ops/s
# Warmup Iteration   2: 474135.020 ops/s
# Warmup Iteration   3: 547918.678 ops/s
# Warmup Iteration   4: 547023.330 ops/s
# Warmup Iteration   5: 535131.801 ops/s
# Warmup Iteration   6: 549276.688 ops/s
# Warmup Iteration   7: 448687.252 ops/s
# Warmup Iteration   8: 542831.431 ops/s
# Warmup Iteration   9: 540100.640 ops/s
# Warmup Iteration  10: 544212.038 ops/s
# Warmup Iteration  11: 542308.300 ops/s
# Warmup Iteration  12: 542597.128 ops/s
# Warmup Iteration  13: 552693.356 ops/s
# Warmup Iteration  14: 561296.623 ops/s
# Warmup Iteration  15: 554054.234 ops/s
# Warmup Iteration  16: 560985.721 ops/s
# Warmup Iteration  17: 538914.414 ops/s
# Warmup Iteration  18: 536705.026 ops/s
# Warmup Iteration  19: 562357.428 ops/s
# Warmup Iteration  20: 541896.184 ops/s
# Warmup Iteration  21: 544112.522 ops/s
# Warmup Iteration  22: 542126.482 ops/s
# Warmup Iteration  23: 546334.700 ops/s
# Warmup Iteration  24: 553406.607 ops/s
# Warmup Iteration  25: 542551.804 ops/s
# Warmup Iteration  26: 559534.814 ops/s
# Warmup Iteration  27: 554679.104 ops/s
# Warmup Iteration  28: 551632.014 ops/s
# Warmup Iteration  29: 550652.454 ops/s
# Warmup Iteration  30: 555343.626 ops/s
Iteration   1: 555108.589 ops/s
Iteration   2: 548285.742 ops/s
Iteration   3: 545184.682 ops/s
Iteration   4: 577555.906 ops/s
Iteration   5: 549337.805 ops/s
Iteration   6: 539636.768 ops/s
Iteration   7: 538616.606 ops/s
Iteration   8: 549874.805 ops/s
Iteration   9: 558979.564 ops/s
Iteration  10: 566806.718 ops/s
Iteration  11: 573549.609 ops/s
Iteration  12: 546692.797 ops/s
Iteration  13: 541341.020 ops/s
Iteration  14: 552461.981 ops/s
Iteration  15: 571086.183 ops/s
Iteration  16: 546439.017 ops/s
Iteration  17: 545830.014 ops/s
Iteration  18: 546089.001 ops/s
Iteration  19: 545376.447 ops/s
Iteration  20: 557665.690 ops/s
Iteration  21: 562398.249 ops/s
Iteration  22: 554148.897 ops/s
Iteration  23: 551830.432 ops/s
Iteration  24: 539162.839 ops/s
Iteration  25: 544888.494 ops/s
Iteration  26: 557181.755 ops/s
Iteration  27: 558428.686 ops/s
Iteration  28: 544938.521 ops/s
Iteration  29: 539388.974 ops/s
Iteration  30: 552058.651 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_reduceOptional":
  552011.481 ±(99.9%) 6896.875 ops/s [Average]
  (min, avg, max) = (538616.606, 552011.481, 577555.906), stdev = 10322.919
  CI (99.9%): [545114.606, 558908.356] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_reduceOptional  thrpt   30  552011.481 ± 6896.875  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 120724.288 ops/s
# Warmup Iteration   2: 221626.490 ops/s
# Warmup Iteration   3: 266307.593 ops/s
# Warmup Iteration   4: 267487.604 ops/s
# Warmup Iteration   5: 268690.857 ops/s
# Warmup Iteration   6: 231838.158 ops/s
# Warmup Iteration   7: 267098.757 ops/s
# Warmup Iteration   8: 264442.770 ops/s
# Warmup Iteration   9: 265434.953 ops/s
# Warmup Iteration  10: 263046.025 ops/s
# Warmup Iteration  11: 278337.563 ops/s
# Warmup Iteration  12: 281220.436 ops/s
# Warmup Iteration  13: 266186.217 ops/s
# Warmup Iteration  14: 269837.730 ops/s
# Warmup Iteration  15: 265098.249 ops/s
# Warmup Iteration  16: 268433.880 ops/s
# Warmup Iteration  17: 269613.240 ops/s
# Warmup Iteration  18: 270359.666 ops/s
# Warmup Iteration  19: 266999.325 ops/s
# Warmup Iteration  20: 268037.723 ops/s
# Warmup Iteration  21: 265431.642 ops/s
# Warmup Iteration  22: 271539.216 ops/s
# Warmup Iteration  23: 278003.602 ops/s
# Warmup Iteration  24: 277661.226 ops/s
# Warmup Iteration  25: 267010.794 ops/s
# Warmup Iteration  26: 264823.092 ops/s
# Warmup Iteration  27: 264422.042 ops/s
# Warmup Iteration  28: 268962.912 ops/s
# Warmup Iteration  29: 264573.729 ops/s
# Warmup Iteration  30: 274573.836 ops/s
Iteration   1: 283846.577 ops/s
Iteration   2: 283725.867 ops/s
Iteration   3: 283831.162 ops/s
Iteration   4: 278015.437 ops/s
Iteration   5: 270966.137 ops/s
Iteration   6: 262319.719 ops/s
Iteration   7: 266472.279 ops/s
Iteration   8: 267836.267 ops/s
Iteration   9: 271917.927 ops/s
Iteration  10: 270942.656 ops/s
Iteration  11: 268808.817 ops/s
Iteration  12: 267770.784 ops/s
Iteration  13: 261219.384 ops/s
Iteration  14: 264718.483 ops/s
Iteration  15: 269017.627 ops/s
Iteration  16: 267136.713 ops/s
Iteration  17: 281343.310 ops/s
Iteration  18: 269731.535 ops/s
Iteration  19: 265743.273 ops/s
Iteration  20: 264253.216 ops/s
Iteration  21: 266467.204 ops/s
Iteration  22: 267665.724 ops/s
Iteration  23: 274715.797 ops/s
Iteration  24: 266420.453 ops/s
Iteration  25: 267929.033 ops/s
Iteration  26: 265651.139 ops/s
Iteration  27: 264566.441 ops/s
Iteration  28: 265039.225 ops/s
Iteration  29: 270662.586 ops/s
Iteration  30: 275431.535 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_reject":
  270138.877 ±(99.9%) 4257.091 ops/s [Average]
  (min, avg, max) = (261219.384, 270138.877, 283846.577), stdev = 6371.814
  CI (99.9%): [265881.786, 274395.968] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_reject  thrpt   30  270138.877 ± 4257.091  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 233295.061 ops/s
# Warmup Iteration   2: 455566.914 ops/s
# Warmup Iteration   3: 500142.966 ops/s
# Warmup Iteration   4: 493198.097 ops/s
# Warmup Iteration   5: 495259.326 ops/s
# Warmup Iteration   6: 412968.322 ops/s
# Warmup Iteration   7: 510266.228 ops/s
# Warmup Iteration   8: 501139.178 ops/s
# Warmup Iteration   9: 508417.273 ops/s
# Warmup Iteration  10: 497759.775 ops/s
# Warmup Iteration  11: 501821.619 ops/s
# Warmup Iteration  12: 518432.213 ops/s
# Warmup Iteration  13: 506231.193 ops/s
# Warmup Iteration  14: 500282.912 ops/s
# Warmup Iteration  15: 502489.231 ops/s
# Warmup Iteration  16: 514607.676 ops/s
# Warmup Iteration  17: 495274.319 ops/s
# Warmup Iteration  18: 509973.461 ops/s
# Warmup Iteration  19: 509117.902 ops/s
# Warmup Iteration  20: 503107.322 ops/s
# Warmup Iteration  21: 505929.505 ops/s
# Warmup Iteration  22: 506109.602 ops/s
# Warmup Iteration  23: 500271.692 ops/s
# Warmup Iteration  24: 493897.990 ops/s
# Warmup Iteration  25: 502736.608 ops/s
# Warmup Iteration  26: 506583.795 ops/s
# Warmup Iteration  27: 507297.871 ops/s
# Warmup Iteration  28: 495618.463 ops/s
# Warmup Iteration  29: 497022.394 ops/s
# Warmup Iteration  30: 491127.782 ops/s
Iteration   1: 489869.289 ops/s
Iteration   2: 526511.771 ops/s
Iteration   3: 506248.632 ops/s
Iteration   4: 501080.183 ops/s
Iteration   5: 501855.211 ops/s
Iteration   6: 501003.655 ops/s
Iteration   7: 497671.328 ops/s
Iteration   8: 507775.178 ops/s
Iteration   9: 508258.051 ops/s
Iteration  10: 504695.002 ops/s
Iteration  11: 510823.224 ops/s
Iteration  12: 505233.563 ops/s
Iteration  13: 507940.755 ops/s
Iteration  14: 511996.222 ops/s
Iteration  15: 497953.935 ops/s
Iteration  16: 504139.210 ops/s
Iteration  17: 504772.389 ops/s
Iteration  18: 493810.012 ops/s
Iteration  19: 499934.711 ops/s
Iteration  20: 507678.225 ops/s
Iteration  21: 497137.565 ops/s
Iteration  22: 500585.822 ops/s
Iteration  23: 498103.725 ops/s
Iteration  24: 504197.966 ops/s
Iteration  25: 505192.722 ops/s
Iteration  26: 496256.139 ops/s
Iteration  27: 496189.980 ops/s
Iteration  28: 498906.557 ops/s
Iteration  29: 495537.351 ops/s
Iteration  30: 501591.588 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_rejectWith":
  502764.999 ±(99.9%) 4606.637 ops/s [Average]
  (min, avg, max) = (489869.289, 502764.999, 526511.771), stdev = 6894.998
  CI (99.9%): [498158.362, 507371.636] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_rejectWith  thrpt   30  502764.999 ± 4606.637  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 235493.648 ops/s
# Warmup Iteration   2: 437723.908 ops/s
# Warmup Iteration   3: 526948.871 ops/s
# Warmup Iteration   4: 536972.391 ops/s
# Warmup Iteration   5: 530290.521 ops/s
# Warmup Iteration   6: 441511.543 ops/s
# Warmup Iteration   7: 534044.394 ops/s
# Warmup Iteration   8: 535947.579 ops/s
# Warmup Iteration   9: 537693.821 ops/s
# Warmup Iteration  10: 531549.444 ops/s
# Warmup Iteration  11: 533172.037 ops/s
# Warmup Iteration  12: 532857.828 ops/s
# Warmup Iteration  13: 522441.352 ops/s
# Warmup Iteration  14: 525600.804 ops/s
# Warmup Iteration  15: 527761.170 ops/s
# Warmup Iteration  16: 528806.496 ops/s
# Warmup Iteration  17: 524939.577 ops/s
# Warmup Iteration  18: 554190.948 ops/s
# Warmup Iteration  19: 537266.910 ops/s
# Warmup Iteration  20: 523798.885 ops/s
# Warmup Iteration  21: 538982.159 ops/s
# Warmup Iteration  22: 540851.514 ops/s
# Warmup Iteration  23: 538967.295 ops/s
# Warmup Iteration  24: 521100.260 ops/s
# Warmup Iteration  25: 526034.750 ops/s
# Warmup Iteration  26: 533968.130 ops/s
# Warmup Iteration  27: 527334.463 ops/s
# Warmup Iteration  28: 516876.280 ops/s
# Warmup Iteration  29: 530976.548 ops/s
# Warmup Iteration  30: 531733.203 ops/s
Iteration   1: 521207.781 ops/s
Iteration   2: 535049.418 ops/s
Iteration   3: 555076.589 ops/s
Iteration   4: 540751.516 ops/s
Iteration   5: 527788.526 ops/s
Iteration   6: 529652.625 ops/s
Iteration   7: 529354.465 ops/s
Iteration   8: 528668.791 ops/s
Iteration   9: 519519.427 ops/s
Iteration  10: 515478.394 ops/s
Iteration  11: 520853.295 ops/s
Iteration  12: 522724.582 ops/s
Iteration  13: 525237.582 ops/s
Iteration  14: 520308.099 ops/s
Iteration  15: 518415.481 ops/s
Iteration  16: 521501.869 ops/s
Iteration  17: 517938.447 ops/s
Iteration  18: 520245.564 ops/s
Iteration  19: 518867.369 ops/s
Iteration  20: 534055.194 ops/s
Iteration  21: 524740.286 ops/s
Iteration  22: 521625.831 ops/s
Iteration  23: 531703.748 ops/s
Iteration  24: 530816.731 ops/s
Iteration  25: 514612.316 ops/s
Iteration  26: 528897.678 ops/s
Iteration  27: 521046.981 ops/s
Iteration  28: 526133.455 ops/s
Iteration  29: 516118.101 ops/s
Iteration  30: 518293.209 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_rejectWith_target":
  525222.778 ±(99.9%) 5679.097 ops/s [Average]
  (min, avg, max) = (514612.316, 525222.778, 555076.589), stdev = 8500.205
  CI (99.9%): [519543.682, 530901.875] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_rejectWith_target  thrpt   30  525222.778 ± 5679.097  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 535347.272 ops/s
# Warmup Iteration   2: 641872.467 ops/s
# Warmup Iteration   3: 824933.392 ops/s
# Warmup Iteration   4: 819918.143 ops/s
# Warmup Iteration   5: 826522.848 ops/s
# Warmup Iteration   6: 826792.332 ops/s
# Warmup Iteration   7: 835635.299 ops/s
# Warmup Iteration   8: 854059.922 ops/s
# Warmup Iteration   9: 874032.430 ops/s
# Warmup Iteration  10: 691409.843 ops/s
# Warmup Iteration  11: 829908.786 ops/s
# Warmup Iteration  12: 810381.274 ops/s
# Warmup Iteration  13: 822835.588 ops/s
# Warmup Iteration  14: 829726.374 ops/s
# Warmup Iteration  15: 820867.783 ops/s
# Warmup Iteration  16: 849092.645 ops/s
# Warmup Iteration  17: 872910.894 ops/s
# Warmup Iteration  18: 872491.380 ops/s
# Warmup Iteration  19: 889581.610 ops/s
# Warmup Iteration  20: 884266.262 ops/s
# Warmup Iteration  21: 894484.807 ops/s
# Warmup Iteration  22: 916592.447 ops/s
# Warmup Iteration  23: 887905.623 ops/s
# Warmup Iteration  24: 873725.333 ops/s
# Warmup Iteration  25: 864776.016 ops/s
# Warmup Iteration  26: 875859.886 ops/s
# Warmup Iteration  27: 857085.225 ops/s
# Warmup Iteration  28: 888239.246 ops/s
# Warmup Iteration  29: 904100.874 ops/s
# Warmup Iteration  30: 872300.373 ops/s
Iteration   1: 888675.501 ops/s
Iteration   2: 875940.970 ops/s
Iteration   3: 885392.930 ops/s
Iteration   4: 872315.599 ops/s
Iteration   5: 877362.077 ops/s
Iteration   6: 884949.162 ops/s
Iteration   7: 882036.272 ops/s
Iteration   8: 883785.265 ops/s
Iteration   9: 863426.756 ops/s
Iteration  10: 860460.952 ops/s
Iteration  11: 871117.447 ops/s
Iteration  12: 920899.690 ops/s
Iteration  13: 910534.994 ops/s
Iteration  14: 869690.972 ops/s
Iteration  15: 874662.897 ops/s
Iteration  16: 872679.700 ops/s
Iteration  17: 872888.553 ops/s
Iteration  18: 876906.439 ops/s
Iteration  19: 895718.002 ops/s
Iteration  20: 885660.091 ops/s
Iteration  21: 875028.596 ops/s
Iteration  22: 879953.891 ops/s
Iteration  23: 878140.715 ops/s
Iteration  24: 878358.033 ops/s
Iteration  25: 869647.572 ops/s
Iteration  26: 877993.861 ops/s
Iteration  27: 888561.329 ops/s
Iteration  28: 879303.214 ops/s
Iteration  29: 881465.161 ops/s
Iteration  30: 898093.578 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_removeAll":
  881055.007 ±(99.9%) 8423.563 ops/s [Average]
  (min, avg, max) = (860460.952, 881055.007, 920899.690), stdev = 12607.993
  CI (99.9%): [872631.445, 889478.570] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_removeAll  thrpt   30  881055.007 ± 8423.563  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 492661.776 ops/s
# Warmup Iteration   2: 606961.727 ops/s
# Warmup Iteration   3: 751218.128 ops/s
# Warmup Iteration   4: 745533.203 ops/s
# Warmup Iteration   5: 749727.330 ops/s
# Warmup Iteration   6: 752921.913 ops/s
# Warmup Iteration   7: 736799.335 ops/s
# Warmup Iteration   8: 691235.213 ops/s
# Warmup Iteration   9: 675647.648 ops/s
# Warmup Iteration  10: 756139.296 ops/s
# Warmup Iteration  11: 747165.433 ops/s
# Warmup Iteration  12: 737707.726 ops/s
# Warmup Iteration  13: 760349.456 ops/s
# Warmup Iteration  14: 768191.258 ops/s
# Warmup Iteration  15: 796503.979 ops/s
# Warmup Iteration  16: 763162.240 ops/s
# Warmup Iteration  17: 834010.986 ops/s
# Warmup Iteration  18: 821727.767 ops/s
# Warmup Iteration  19: 797843.404 ops/s
# Warmup Iteration  20: 798406.626 ops/s
# Warmup Iteration  21: 802093.102 ops/s
# Warmup Iteration  22: 804957.220 ops/s
# Warmup Iteration  23: 804598.112 ops/s
# Warmup Iteration  24: 806563.953 ops/s
# Warmup Iteration  25: 783773.481 ops/s
# Warmup Iteration  26: 778758.698 ops/s
# Warmup Iteration  27: 780691.511 ops/s
# Warmup Iteration  28: 780545.159 ops/s
# Warmup Iteration  29: 792676.221 ops/s
# Warmup Iteration  30: 794708.402 ops/s
Iteration   1: 784847.752 ops/s
Iteration   2: 795029.532 ops/s
Iteration   3: 775322.993 ops/s
Iteration   4: 802308.111 ops/s
Iteration   5: 821393.443 ops/s
Iteration   6: 835153.723 ops/s
Iteration   7: 814601.681 ops/s
Iteration   8: 793264.457 ops/s
Iteration   9: 791042.904 ops/s
Iteration  10: 785294.325 ops/s
Iteration  11: 800974.595 ops/s
Iteration  12: 810092.537 ops/s
Iteration  13: 816249.970 ops/s
Iteration  14: 779196.928 ops/s
Iteration  15: 787586.681 ops/s
Iteration  16: 803820.999 ops/s
Iteration  17: 835994.865 ops/s
Iteration  18: 818312.922 ops/s
Iteration  19: 832278.059 ops/s
Iteration  20: 817136.675 ops/s
Iteration  21: 799123.682 ops/s
Iteration  22: 835895.035 ops/s
Iteration  23: 818102.043 ops/s
Iteration  24: 805868.355 ops/s
Iteration  25: 797373.301 ops/s
Iteration  26: 797674.192 ops/s
Iteration  27: 819352.523 ops/s
Iteration  28: 834361.098 ops/s
Iteration  29: 835621.816 ops/s
Iteration  30: 788285.857 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_removeAllIterable":
  807718.702 ±(99.9%) 12337.875 ops/s [Average]
  (min, avg, max) = (775322.993, 807718.702, 835994.865), stdev = 18466.752
  CI (99.9%): [795380.826, 820056.577] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_removeAllIterable  thrpt   30  807718.702 ± 12337.875  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 457606.567 ops/s
# Warmup Iteration   2: 567129.728 ops/s
# Warmup Iteration   3: 723151.112 ops/s
# Warmup Iteration   4: 696487.414 ops/s
# Warmup Iteration   5: 728272.014 ops/s
# Warmup Iteration   6: 724094.063 ops/s
# Warmup Iteration   7: 716393.462 ops/s
# Warmup Iteration   8: 723774.089 ops/s
# Warmup Iteration   9: 619174.786 ops/s
# Warmup Iteration  10: 749035.804 ops/s
# Warmup Iteration  11: 710293.459 ops/s
# Warmup Iteration  12: 698579.212 ops/s
# Warmup Iteration  13: 711216.930 ops/s
# Warmup Iteration  14: 724942.949 ops/s
# Warmup Iteration  15: 743264.100 ops/s
# Warmup Iteration  16: 711506.570 ops/s
# Warmup Iteration  17: 760355.577 ops/s
# Warmup Iteration  18: 741610.600 ops/s
# Warmup Iteration  19: 734173.678 ops/s
# Warmup Iteration  20: 742873.449 ops/s
# Warmup Iteration  21: 732641.285 ops/s
# Warmup Iteration  22: 745547.995 ops/s
# Warmup Iteration  23: 765907.442 ops/s
# Warmup Iteration  24: 733173.337 ops/s
# Warmup Iteration  25: 761403.688 ops/s
# Warmup Iteration  26: 751503.412 ops/s
# Warmup Iteration  27: 733143.402 ops/s
# Warmup Iteration  28: 741923.882 ops/s
# Warmup Iteration  29: 740381.137 ops/s
# Warmup Iteration  30: 732785.488 ops/s
Iteration   1: 734134.389 ops/s
Iteration   2: 736646.420 ops/s
Iteration   3: 732597.624 ops/s
Iteration   4: 733134.700 ops/s
Iteration   5: 737416.817 ops/s
Iteration   6: 746249.186 ops/s
Iteration   7: 730350.604 ops/s
Iteration   8: 743003.096 ops/s
Iteration   9: 748603.734 ops/s
Iteration  10: 742152.153 ops/s
Iteration  11: 745541.110 ops/s
Iteration  12: 739121.199 ops/s
Iteration  13: 739991.922 ops/s
Iteration  14: 736797.325 ops/s
Iteration  15: 753846.928 ops/s
Iteration  16: 741057.218 ops/s
Iteration  17: 756524.322 ops/s
Iteration  18: 787868.185 ops/s
Iteration  19: 789367.389 ops/s
Iteration  20: 782278.229 ops/s
Iteration  21: 743721.765 ops/s
Iteration  22: 765719.401 ops/s
Iteration  23: 782841.417 ops/s
Iteration  24: 734163.657 ops/s
Iteration  25: 735779.085 ops/s
Iteration  26: 750958.045 ops/s
Iteration  27: 745143.973 ops/s
Iteration  28: 726237.449 ops/s
Iteration  29: 751514.872 ops/s
Iteration  30: 787756.498 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_removeIf":
  749350.624 ±(99.9%) 12460.079 ops/s [Average]
  (min, avg, max) = (726237.449, 749350.624, 789367.389), stdev = 18649.660
  CI (99.9%): [736890.545, 761810.702] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_removeIf  thrpt   30  749350.624 ± 12460.079  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 512179.878 ops/s
# Warmup Iteration   2: 576873.785 ops/s
# Warmup Iteration   3: 773727.986 ops/s
# Warmup Iteration   4: 777005.392 ops/s
# Warmup Iteration   5: 774792.911 ops/s
# Warmup Iteration   6: 768609.962 ops/s
# Warmup Iteration   7: 790634.263 ops/s
# Warmup Iteration   8: 825522.388 ops/s
# Warmup Iteration   9: 814975.819 ops/s
# Warmup Iteration  10: 654224.584 ops/s
# Warmup Iteration  11: 776566.619 ops/s
# Warmup Iteration  12: 784383.952 ops/s
# Warmup Iteration  13: 773996.862 ops/s
# Warmup Iteration  14: 779073.131 ops/s
# Warmup Iteration  15: 787688.131 ops/s
# Warmup Iteration  16: 803020.502 ops/s
# Warmup Iteration  17: 845462.597 ops/s
# Warmup Iteration  18: 828552.346 ops/s
# Warmup Iteration  19: 807300.832 ops/s
# Warmup Iteration  20: 827292.156 ops/s
# Warmup Iteration  21: 865585.403 ops/s
# Warmup Iteration  22: 810651.767 ops/s
# Warmup Iteration  23: 812661.047 ops/s
# Warmup Iteration  24: 826083.966 ops/s
# Warmup Iteration  25: 819745.017 ops/s
# Warmup Iteration  26: 826718.693 ops/s
# Warmup Iteration  27: 828945.497 ops/s
# Warmup Iteration  28: 839972.776 ops/s
# Warmup Iteration  29: 823536.821 ops/s
# Warmup Iteration  30: 826447.340 ops/s
Iteration   1: 813552.651 ops/s
Iteration   2: 823168.299 ops/s
Iteration   3: 859921.261 ops/s
Iteration   4: 816946.380 ops/s
Iteration   5: 819294.383 ops/s
Iteration   6: 820556.917 ops/s
Iteration   7: 809873.612 ops/s
Iteration   8: 836163.646 ops/s
Iteration   9: 837367.404 ops/s
Iteration  10: 807162.886 ops/s
Iteration  11: 826017.090 ops/s
Iteration  12: 841393.145 ops/s
Iteration  13: 821763.852 ops/s
Iteration  14: 818377.725 ops/s
Iteration  15: 841083.297 ops/s
Iteration  16: 814451.846 ops/s
Iteration  17: 868291.352 ops/s
Iteration  18: 819061.831 ops/s
Iteration  19: 816790.854 ops/s
Iteration  20: 830657.103 ops/s
Iteration  21: 811213.135 ops/s
Iteration  22: 809067.539 ops/s
Iteration  23: 817545.749 ops/s
Iteration  24: 860948.540 ops/s
Iteration  25: 850243.291 ops/s
Iteration  26: 843792.822 ops/s
Iteration  27: 853527.943 ops/s
Iteration  28: 812549.270 ops/s
Iteration  29: 823374.394 ops/s
Iteration  30: 832272.511 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_removeIfWith":
  828547.691 ±(99.9%) 11389.328 ops/s [Average]
  (min, avg, max) = (807162.886, 828547.691, 868291.352), stdev = 17047.011
  CI (99.9%): [817158.363, 839937.019] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_removeIfWith  thrpt   30  828547.691 ± 11389.328  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 496292.233 ops/s
# Warmup Iteration   2: 597951.899 ops/s
# Warmup Iteration   3: 762289.846 ops/s
# Warmup Iteration   4: 769962.329 ops/s
# Warmup Iteration   5: 777624.995 ops/s
# Warmup Iteration   6: 781350.001 ops/s
# Warmup Iteration   7: 761236.771 ops/s
# Warmup Iteration   8: 769036.696 ops/s
# Warmup Iteration   9: 650660.084 ops/s
# Warmup Iteration  10: 766454.023 ops/s
# Warmup Iteration  11: 782051.390 ops/s
# Warmup Iteration  12: 794611.517 ops/s
# Warmup Iteration  13: 767659.576 ops/s
# Warmup Iteration  14: 763731.183 ops/s
# Warmup Iteration  15: 752431.099 ops/s
# Warmup Iteration  16: 783693.319 ops/s
# Warmup Iteration  17: 783870.210 ops/s
# Warmup Iteration  18: 778678.076 ops/s
# Warmup Iteration  19: 796817.058 ops/s
# Warmup Iteration  20: 838252.968 ops/s
# Warmup Iteration  21: 838909.901 ops/s
# Warmup Iteration  22: 812552.574 ops/s
# Warmup Iteration  23: 797080.692 ops/s
# Warmup Iteration  24: 787480.743 ops/s
# Warmup Iteration  25: 786862.033 ops/s
# Warmup Iteration  26: 793652.053 ops/s
# Warmup Iteration  27: 786599.384 ops/s
# Warmup Iteration  28: 786182.015 ops/s
# Warmup Iteration  29: 800949.502 ops/s
# Warmup Iteration  30: 777460.319 ops/s
Iteration   1: 780600.004 ops/s
Iteration   2: 771281.004 ops/s
Iteration   3: 777337.946 ops/s
Iteration   4: 789533.617 ops/s
Iteration   5: 781836.407 ops/s
Iteration   6: 800238.217 ops/s
Iteration   7: 790512.358 ops/s
Iteration   8: 780596.097 ops/s
Iteration   9: 776890.884 ops/s
Iteration  10: 783101.719 ops/s
Iteration  11: 797984.230 ops/s
Iteration  12: 785028.044 ops/s
Iteration  13: 782776.447 ops/s
Iteration  14: 780138.794 ops/s
Iteration  15: 776511.549 ops/s
Iteration  16: 792621.683 ops/s
Iteration  17: 810354.348 ops/s
Iteration  18: 799731.059 ops/s
Iteration  19: 790941.851 ops/s
Iteration  20: 781845.761 ops/s
Iteration  21: 785514.238 ops/s
Iteration  22: 781936.975 ops/s
Iteration  23: 784871.922 ops/s
Iteration  24: 777485.266 ops/s
Iteration  25: 789622.205 ops/s
Iteration  26: 784264.864 ops/s
Iteration  27: 786968.229 ops/s
Iteration  28: 792804.147 ops/s
Iteration  29: 806070.964 ops/s
Iteration  30: 823702.235 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_removeObject":
  788103.435 ±(99.9%) 7532.647 ops/s [Average]
  (min, avg, max) = (771281.004, 788103.435, 823702.235), stdev = 11274.512
  CI (99.9%): [780570.788, 795636.083] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_removeObject  thrpt   30  788103.435 ± 7532.647  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_removeOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_removeOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 482628.082 ops/s
# Warmup Iteration   2: 530766.696 ops/s
# Warmup Iteration   3: 760018.662 ops/s
# Warmup Iteration   4: 748711.288 ops/s
# Warmup Iteration   5: 747534.516 ops/s
# Warmup Iteration   6: 791839.791 ops/s
# Warmup Iteration   7: 792111.023 ops/s
# Warmup Iteration   8: 770720.503 ops/s
# Warmup Iteration   9: 752152.182 ops/s
# Warmup Iteration  10: 692181.805 ops/s
# Warmup Iteration  11: 646325.013 ops/s
# Warmup Iteration  12: 774658.628 ops/s
# Warmup Iteration  13: 739115.394 ops/s
# Warmup Iteration  14: 729714.539 ops/s
# Warmup Iteration  15: 787689.091 ops/s
# Warmup Iteration  16: 760186.694 ops/s
# Warmup Iteration  17: 771679.772 ops/s
# Warmup Iteration  18: 777495.786 ops/s
# Warmup Iteration  19: 774798.970 ops/s
# Warmup Iteration  20: 763980.501 ops/s
# Warmup Iteration  21: 752982.953 ops/s
# Warmup Iteration  22: 758419.640 ops/s
# Warmup Iteration  23: 772655.306 ops/s
# Warmup Iteration  24: 793108.817 ops/s
# Warmup Iteration  25: 821873.157 ops/s
# Warmup Iteration  26: 800446.512 ops/s
# Warmup Iteration  27: 788897.054 ops/s
# Warmup Iteration  28: 796892.524 ops/s
# Warmup Iteration  29: 795915.476 ops/s
# Warmup Iteration  30: 801227.931 ops/s
Iteration   1: 784364.908 ops/s
Iteration   2: 760202.467 ops/s
Iteration   3: 817987.982 ops/s
Iteration   4: 770763.932 ops/s
Iteration   5: 784002.289 ops/s
Iteration   6: 771191.083 ops/s
Iteration   7: 771271.885 ops/s
Iteration   8: 778481.062 ops/s
Iteration   9: 788109.871 ops/s
Iteration  10: 783651.034 ops/s
Iteration  11: 780974.714 ops/s
Iteration  12: 776572.323 ops/s
Iteration  13: 761339.554 ops/s
Iteration  14: 769076.247 ops/s
Iteration  15: 797270.677 ops/s
Iteration  16: 822080.500 ops/s
Iteration  17: 813539.235 ops/s
Iteration  18: 763563.919 ops/s
Iteration  19: 766921.571 ops/s
Iteration  20: 755411.766 ops/s
Iteration  21: 758573.859 ops/s
Iteration  22: 771062.622 ops/s
Iteration  23: 770671.072 ops/s
Iteration  24: 787129.553 ops/s
Iteration  25: 772158.747 ops/s
Iteration  26: 780317.058 ops/s
Iteration  27: 789277.931 ops/s
Iteration  28: 792103.384 ops/s
Iteration  29: 780611.342 ops/s
Iteration  30: 783153.560 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_removeOccurrences":
  780061.205 ±(99.9%) 11021.387 ops/s [Average]
  (min, avg, max) = (755411.766, 780061.205, 822080.500), stdev = 16496.295
  CI (99.9%): [769039.818, 791082.592] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_removeOccurrences  thrpt   30  780061.205 ± 11021.387  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_removeOccurrences_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_removeOccurrences_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 609597.526 ops/s
# Warmup Iteration   2: 645160.208 ops/s
# Warmup Iteration   3: 906154.699 ops/s
# Warmup Iteration   4: 874118.103 ops/s
# Warmup Iteration   5: 880341.378 ops/s
# Warmup Iteration   6: 880948.072 ops/s
# Warmup Iteration   7: 925928.058 ops/s
# Warmup Iteration   8: 906631.455 ops/s
# Warmup Iteration   9: 907510.049 ops/s
# Warmup Iteration  10: 899517.153 ops/s
# Warmup Iteration  11: 785769.691 ops/s
# Warmup Iteration  12: 873702.940 ops/s
# Warmup Iteration  13: 894256.859 ops/s
# Warmup Iteration  14: 889652.206 ops/s
# Warmup Iteration  15: 920306.544 ops/s
# Warmup Iteration  16: 887952.123 ops/s
# Warmup Iteration  17: 954110.439 ops/s
# Warmup Iteration  18: 932261.807 ops/s
# Warmup Iteration  19: 920862.151 ops/s
# Warmup Iteration  20: 926559.590 ops/s
# Warmup Iteration  21: 962427.579 ops/s
# Warmup Iteration  22: 933997.260 ops/s
# Warmup Iteration  23: 931302.630 ops/s
# Warmup Iteration  24: 950723.403 ops/s
# Warmup Iteration  25: 935915.696 ops/s
# Warmup Iteration  26: 936491.818 ops/s
# Warmup Iteration  27: 931302.232 ops/s
# Warmup Iteration  28: 938399.947 ops/s
# Warmup Iteration  29: 919693.935 ops/s
# Warmup Iteration  30: 940966.405 ops/s
Iteration   1: 960809.598 ops/s
Iteration   2: 956312.261 ops/s
Iteration   3: 960098.288 ops/s
Iteration   4: 922205.152 ops/s
Iteration   5: 954562.445 ops/s
Iteration   6: 941779.380 ops/s
Iteration   7: 913786.815 ops/s
Iteration   8: 939617.873 ops/s
Iteration   9: 918095.377 ops/s
Iteration  10: 924020.845 ops/s
Iteration  11: 919291.960 ops/s
Iteration  12: 897825.313 ops/s
Iteration  13: 912532.719 ops/s
Iteration  14: 943114.844 ops/s
Iteration  15: 917220.193 ops/s
Iteration  16: 981209.491 ops/s
Iteration  17: 918496.417 ops/s
Iteration  18: 936714.678 ops/s
Iteration  19: 916082.157 ops/s
Iteration  20: 920024.566 ops/s
Iteration  21: 923434.051 ops/s
Iteration  22: 933535.523 ops/s
Iteration  23: 967520.523 ops/s
Iteration  24: 961631.350 ops/s
Iteration  25: 915537.469 ops/s
Iteration  26: 955751.833 ops/s
Iteration  27: 954472.180 ops/s
Iteration  28: 950806.129 ops/s
Iteration  29: 955062.340 ops/s
Iteration  30: 996151.758 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_removeOccurrences_throws":
  938923.451 ±(99.9%) 15570.028 ops/s [Average]
  (min, avg, max) = (897825.313, 938923.451, 996151.758), stdev = 23304.487
  CI (99.9%): [923353.423, 954493.479] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_removeOccurrences_throws  thrpt   30  938923.451 ± 15570.028  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 393550.919 ops/s
# Warmup Iteration   2: 458795.084 ops/s
# Warmup Iteration   3: 619130.547 ops/s
# Warmup Iteration   4: 601243.735 ops/s
# Warmup Iteration   5: 618166.112 ops/s
# Warmup Iteration   6: 615949.385 ops/s
# Warmup Iteration   7: 625282.065 ops/s
# Warmup Iteration   8: 632736.382 ops/s
# Warmup Iteration   9: 615075.915 ops/s
# Warmup Iteration  10: 514488.872 ops/s
# Warmup Iteration  11: 608434.075 ops/s
# Warmup Iteration  12: 601308.539 ops/s
# Warmup Iteration  13: 605544.245 ops/s
# Warmup Iteration  14: 621139.886 ops/s
# Warmup Iteration  15: 606937.512 ops/s
# Warmup Iteration  16: 645085.193 ops/s
# Warmup Iteration  17: 644153.788 ops/s
# Warmup Iteration  18: 622499.738 ops/s
# Warmup Iteration  19: 629625.786 ops/s
# Warmup Iteration  20: 631284.674 ops/s
# Warmup Iteration  21: 634971.666 ops/s
# Warmup Iteration  22: 622989.485 ops/s
# Warmup Iteration  23: 633203.548 ops/s
# Warmup Iteration  24: 625948.396 ops/s
# Warmup Iteration  25: 629811.361 ops/s
# Warmup Iteration  26: 667817.883 ops/s
# Warmup Iteration  27: 657257.676 ops/s
# Warmup Iteration  28: 628346.231 ops/s
# Warmup Iteration  29: 625345.255 ops/s
# Warmup Iteration  30: 648875.614 ops/s
Iteration   1: 618950.455 ops/s
Iteration   2: 632102.424 ops/s
Iteration   3: 647877.913 ops/s
Iteration   4: 628200.313 ops/s
Iteration   5: 659136.996 ops/s
Iteration   6: 624139.000 ops/s
Iteration   7: 617205.364 ops/s
Iteration   8: 624514.136 ops/s
Iteration   9: 625231.819 ops/s
Iteration  10: 662118.669 ops/s
Iteration  11: 627112.621 ops/s
Iteration  12: 622731.175 ops/s
Iteration  13: 647041.158 ops/s
Iteration  14: 626221.961 ops/s
Iteration  15: 622259.684 ops/s
Iteration  16: 630225.308 ops/s
Iteration  17: 618593.157 ops/s
Iteration  18: 619090.183 ops/s
Iteration  19: 628277.269 ops/s
Iteration  20: 622210.945 ops/s
Iteration  21: 629864.923 ops/s
Iteration  22: 623472.653 ops/s
Iteration  23: 632862.405 ops/s
Iteration  24: 635848.733 ops/s
Iteration  25: 621596.293 ops/s
Iteration  26: 630477.113 ops/s
Iteration  27: 625999.477 ops/s
Iteration  28: 616416.677 ops/s
Iteration  29: 624732.803 ops/s
Iteration  30: 626669.824 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_retainAll":
  629039.382 ±(99.9%) 7533.290 ops/s [Average]
  (min, avg, max) = (616416.677, 629039.382, 662118.669), stdev = 11275.474
  CI (99.9%): [621506.092, 636572.671] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_retainAll  thrpt   30  629039.382 ± 7533.290  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 457696.295 ops/s
# Warmup Iteration   2: 586242.605 ops/s
# Warmup Iteration   3: 758653.681 ops/s
# Warmup Iteration   4: 743671.798 ops/s
# Warmup Iteration   5: 741815.759 ops/s
# Warmup Iteration   6: 760222.342 ops/s
# Warmup Iteration   7: 753818.630 ops/s
# Warmup Iteration   8: 750544.566 ops/s
# Warmup Iteration   9: 620778.485 ops/s
# Warmup Iteration  10: 751308.569 ops/s
# Warmup Iteration  11: 741951.318 ops/s
# Warmup Iteration  12: 737705.616 ops/s
# Warmup Iteration  13: 759420.677 ops/s
# Warmup Iteration  14: 758931.010 ops/s
# Warmup Iteration  15: 754439.011 ops/s
# Warmup Iteration  16: 748868.618 ops/s
# Warmup Iteration  17: 813105.184 ops/s
# Warmup Iteration  18: 786246.348 ops/s
# Warmup Iteration  19: 793119.107 ops/s
# Warmup Iteration  20: 795411.296 ops/s
# Warmup Iteration  21: 804797.328 ops/s
# Warmup Iteration  22: 804753.774 ops/s
# Warmup Iteration  23: 799291.126 ops/s
# Warmup Iteration  24: 807096.398 ops/s
# Warmup Iteration  25: 803566.967 ops/s
# Warmup Iteration  26: 766311.832 ops/s
# Warmup Iteration  27: 788265.450 ops/s
# Warmup Iteration  28: 791882.667 ops/s
# Warmup Iteration  29: 783267.444 ops/s
# Warmup Iteration  30: 787274.295 ops/s
Iteration   1: 790179.467 ops/s
Iteration   2: 776851.072 ops/s
Iteration   3: 791459.049 ops/s
Iteration   4: 793104.142 ops/s
Iteration   5: 776552.435 ops/s
Iteration   6: 777109.702 ops/s
Iteration   7: 803940.071 ops/s
Iteration   8: 791903.629 ops/s
Iteration   9: 781320.022 ops/s
Iteration  10: 801266.022 ops/s
Iteration  11: 777760.656 ops/s
Iteration  12: 782636.718 ops/s
Iteration  13: 783274.339 ops/s
Iteration  14: 787684.970 ops/s
Iteration  15: 804015.135 ops/s
Iteration  16: 780796.211 ops/s
Iteration  17: 777551.810 ops/s
Iteration  18: 782222.127 ops/s
Iteration  19: 788796.002 ops/s
Iteration  20: 786924.964 ops/s
Iteration  21: 788899.131 ops/s
Iteration  22: 786969.987 ops/s
Iteration  23: 776931.579 ops/s
Iteration  24: 783338.166 ops/s
Iteration  25: 788294.576 ops/s
Iteration  26: 794144.477 ops/s
Iteration  27: 787016.489 ops/s
Iteration  28: 795213.727 ops/s
Iteration  29: 789069.954 ops/s
Iteration  30: 797718.400 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_retainAllIterable":
  787431.501 ±(99.9%) 5319.293 ops/s [Average]
  (min, avg, max) = (776552.435, 787431.501, 804015.135), stdev = 7961.669
  CI (99.9%): [782112.208, 792750.794] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_retainAllIterable  thrpt   30  787431.501 ± 5319.293  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 110681.492 ops/s
# Warmup Iteration   2: 194031.082 ops/s
# Warmup Iteration   3: 230737.889 ops/s
# Warmup Iteration   4: 231533.345 ops/s
# Warmup Iteration   5: 229768.948 ops/s
# Warmup Iteration   6: 205891.938 ops/s
# Warmup Iteration   7: 216311.971 ops/s
# Warmup Iteration   8: 231015.438 ops/s
# Warmup Iteration   9: 231833.740 ops/s
# Warmup Iteration  10: 232618.638 ops/s
# Warmup Iteration  11: 232112.746 ops/s
# Warmup Iteration  12: 232013.162 ops/s
# Warmup Iteration  13: 230454.023 ops/s
# Warmup Iteration  14: 232098.257 ops/s
# Warmup Iteration  15: 232712.338 ops/s
# Warmup Iteration  16: 231653.248 ops/s
# Warmup Iteration  17: 230944.535 ops/s
# Warmup Iteration  18: 233600.213 ops/s
# Warmup Iteration  19: 235569.276 ops/s
# Warmup Iteration  20: 234232.116 ops/s
# Warmup Iteration  21: 235368.666 ops/s
# Warmup Iteration  22: 234221.498 ops/s
# Warmup Iteration  23: 238540.781 ops/s
# Warmup Iteration  24: 229993.622 ops/s
# Warmup Iteration  25: 231674.212 ops/s
# Warmup Iteration  26: 236481.964 ops/s
# Warmup Iteration  27: 236818.436 ops/s
# Warmup Iteration  28: 233734.570 ops/s
# Warmup Iteration  29: 234200.972 ops/s
# Warmup Iteration  30: 237827.618 ops/s
Iteration   1: 233648.105 ops/s
Iteration   2: 235088.496 ops/s
Iteration   3: 231874.072 ops/s
Iteration   4: 234466.452 ops/s
Iteration   5: 236717.076 ops/s
Iteration   6: 230395.132 ops/s
Iteration   7: 231122.462 ops/s
Iteration   8: 230947.413 ops/s
Iteration   9: 230415.649 ops/s
Iteration  10: 230834.226 ops/s
Iteration  11: 230843.739 ops/s
Iteration  12: 231860.294 ops/s
Iteration  13: 232249.268 ops/s
Iteration  14: 236399.977 ops/s
Iteration  15: 239820.122 ops/s
Iteration  16: 235618.375 ops/s
Iteration  17: 230779.315 ops/s
Iteration  18: 231348.314 ops/s
Iteration  19: 238596.411 ops/s
Iteration  20: 237299.407 ops/s
Iteration  21: 231521.779 ops/s
Iteration  22: 228872.215 ops/s
Iteration  23: 237288.590 ops/s
Iteration  24: 232076.984 ops/s
Iteration  25: 233339.318 ops/s
Iteration  26: 228549.654 ops/s
Iteration  27: 233365.352 ops/s
Iteration  28: 231501.619 ops/s
Iteration  29: 233475.731 ops/s
Iteration  30: 234685.732 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_select":
  233166.709 ±(99.9%) 1921.281 ops/s [Average]
  (min, avg, max) = (228549.654, 233166.709, 239820.122), stdev = 2875.683
  CI (99.9%): [231245.428, 235087.990] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_select  thrpt   30  233166.709 ± 1921.281  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_selectAndRejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_selectAndRejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 703355.959 ops/s
# Warmup Iteration   2: 1598722.362 ops/s
# Warmup Iteration   3: 1678550.714 ops/s
# Warmup Iteration   4: 1592593.424 ops/s
# Warmup Iteration   5: 1499750.086 ops/s
# Warmup Iteration   6: 1700766.630 ops/s
# Warmup Iteration   7: 1724372.871 ops/s
# Warmup Iteration   8: 1709588.512 ops/s
# Warmup Iteration   9: 1714221.249 ops/s
# Warmup Iteration  10: 1697579.467 ops/s
# Warmup Iteration  11: 1674568.598 ops/s
# Warmup Iteration  12: 1694604.060 ops/s
# Warmup Iteration  13: 1695553.284 ops/s
# Warmup Iteration  14: 1665755.944 ops/s
# Warmup Iteration  15: 1734162.128 ops/s
# Warmup Iteration  16: 1743259.058 ops/s
# Warmup Iteration  17: 1738693.988 ops/s
# Warmup Iteration  18: 1751250.653 ops/s
# Warmup Iteration  19: 1746588.216 ops/s
# Warmup Iteration  20: 1774982.708 ops/s
# Warmup Iteration  21: 1758157.751 ops/s
# Warmup Iteration  22: 1787597.756 ops/s
# Warmup Iteration  23: 1707480.830 ops/s
# Warmup Iteration  24: 1734413.971 ops/s
# Warmup Iteration  25: 1701911.392 ops/s
# Warmup Iteration  26: 1717434.875 ops/s
# Warmup Iteration  27: 1719624.616 ops/s
# Warmup Iteration  28: 1742353.047 ops/s
# Warmup Iteration  29: 1742447.733 ops/s
# Warmup Iteration  30: 1803768.824 ops/s
Iteration   1: 1789130.091 ops/s
Iteration   2: 1779627.648 ops/s
Iteration   3: 1783628.205 ops/s
Iteration   4: 1717410.883 ops/s
Iteration   5: 1706974.007 ops/s
Iteration   6: 1728705.982 ops/s
Iteration   7: 1810032.297 ops/s
Iteration   8: 1809290.707 ops/s
Iteration   9: 1785557.030 ops/s
Iteration  10: 1805990.488 ops/s
Iteration  11: 1811319.957 ops/s
Iteration  12: 1748902.444 ops/s
Iteration  13: 1678763.361 ops/s
Iteration  14: 1723504.793 ops/s
Iteration  15: 1737828.296 ops/s
Iteration  16: 1699572.441 ops/s
Iteration  17: 1700485.485 ops/s
Iteration  18: 1675184.929 ops/s
Iteration  19: 1708095.993 ops/s
Iteration  20: 1712441.078 ops/s
Iteration  21: 1687814.317 ops/s
Iteration  22: 1678843.260 ops/s
Iteration  23: 1713505.270 ops/s
Iteration  24: 1704626.247 ops/s
Iteration  25: 1701643.967 ops/s
Iteration  26: 1708094.400 ops/s
Iteration  27: 1809943.694 ops/s
Iteration  28: 1809683.858 ops/s
Iteration  29: 1812917.370 ops/s
Iteration  30: 1812604.506 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_selectAndRejectWith":
  1745070.767 ±(99.9%) 33426.259 ops/s [Average]
  (min, avg, max) = (1675184.929, 1745070.767, 1812917.370), stdev = 50030.854
  CI (99.9%): [1711644.508, 1778497.025] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_selectAndRejectWith  thrpt   30  1745070.767 ± 33426.259  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_selectByOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_selectByOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 263187.621 ops/s
# Warmup Iteration   2: 423952.090 ops/s
# Warmup Iteration   3: 512113.817 ops/s
# Warmup Iteration   4: 499792.573 ops/s
# Warmup Iteration   5: 513948.229 ops/s
# Warmup Iteration   6: 508640.939 ops/s
# Warmup Iteration   7: 423754.104 ops/s
# Warmup Iteration   8: 513100.895 ops/s
# Warmup Iteration   9: 510915.227 ops/s
# Warmup Iteration  10: 504533.868 ops/s
# Warmup Iteration  11: 510868.733 ops/s
# Warmup Iteration  12: 514193.186 ops/s
# Warmup Iteration  13: 491132.498 ops/s
# Warmup Iteration  14: 482156.460 ops/s
# Warmup Iteration  15: 492692.095 ops/s
# Warmup Iteration  16: 482392.725 ops/s
# Warmup Iteration  17: 502410.282 ops/s
# Warmup Iteration  18: 494523.296 ops/s
# Warmup Iteration  19: 489999.296 ops/s
# Warmup Iteration  20: 513376.687 ops/s
# Warmup Iteration  21: 490915.429 ops/s
# Warmup Iteration  22: 508813.700 ops/s
# Warmup Iteration  23: 493307.755 ops/s
# Warmup Iteration  24: 499477.737 ops/s
# Warmup Iteration  25: 504913.732 ops/s
# Warmup Iteration  26: 503417.423 ops/s
# Warmup Iteration  27: 498697.981 ops/s
# Warmup Iteration  28: 504128.557 ops/s
# Warmup Iteration  29: 514432.853 ops/s
# Warmup Iteration  30: 492567.889 ops/s
Iteration   1: 485301.029 ops/s
Iteration   2: 480148.063 ops/s
Iteration   3: 484590.883 ops/s
Iteration   4: 483686.695 ops/s
Iteration   5: 489227.561 ops/s
Iteration   6: 479861.662 ops/s
Iteration   7: 477245.484 ops/s
Iteration   8: 484421.924 ops/s
Iteration   9: 503615.549 ops/s
Iteration  10: 484691.308 ops/s
Iteration  11: 486526.922 ops/s
Iteration  12: 514042.970 ops/s
Iteration  13: 482583.999 ops/s
Iteration  14: 486894.000 ops/s
Iteration  15: 514164.332 ops/s
Iteration  16: 511438.225 ops/s
Iteration  17: 481085.612 ops/s
Iteration  18: 492645.497 ops/s
Iteration  19: 478342.403 ops/s
Iteration  20: 505806.207 ops/s
Iteration  21: 495355.403 ops/s
Iteration  22: 506971.208 ops/s
Iteration  23: 494024.000 ops/s
Iteration  24: 483160.226 ops/s
Iteration  25: 486621.633 ops/s
Iteration  26: 510289.172 ops/s
Iteration  27: 513676.194 ops/s
Iteration  28: 502928.516 ops/s
Iteration  29: 489716.924 ops/s
Iteration  30: 500511.491 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_selectByOccurrences":
  492985.836 ±(99.9%) 8081.459 ops/s [Average]
  (min, avg, max) = (477245.484, 492985.836, 514164.332), stdev = 12095.948
  CI (99.9%): [484904.378, 501067.295] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_selectByOccurrences  thrpt   30  492985.836 ± 8081.459  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_selectDuplicates$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_selectDuplicates

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 202369.583 ops/s
# Warmup Iteration   2: 298837.196 ops/s
# Warmup Iteration   3: 377614.761 ops/s
# Warmup Iteration   4: 385721.587 ops/s
# Warmup Iteration   5: 389374.610 ops/s
# Warmup Iteration   6: 375302.746 ops/s
# Warmup Iteration   7: 370088.968 ops/s
# Warmup Iteration   8: 334023.517 ops/s
# Warmup Iteration   9: 387370.891 ops/s
# Warmup Iteration  10: 388503.189 ops/s
# Warmup Iteration  11: 386827.813 ops/s
# Warmup Iteration  12: 395056.552 ops/s
# Warmup Iteration  13: 402149.951 ops/s
# Warmup Iteration  14: 401559.796 ops/s
# Warmup Iteration  15: 401816.905 ops/s
# Warmup Iteration  16: 401664.046 ops/s
# Warmup Iteration  17: 401134.529 ops/s
# Warmup Iteration  18: 401442.368 ops/s
# Warmup Iteration  19: 394858.911 ops/s
# Warmup Iteration  20: 386629.942 ops/s
# Warmup Iteration  21: 381539.362 ops/s
# Warmup Iteration  22: 382067.419 ops/s
# Warmup Iteration  23: 390145.829 ops/s
# Warmup Iteration  24: 388998.829 ops/s
# Warmup Iteration  25: 388188.584 ops/s
# Warmup Iteration  26: 380442.314 ops/s
# Warmup Iteration  27: 384293.629 ops/s
# Warmup Iteration  28: 385552.991 ops/s
# Warmup Iteration  29: 378695.653 ops/s
# Warmup Iteration  30: 376451.202 ops/s
Iteration   1: 378141.143 ops/s
Iteration   2: 379328.120 ops/s
Iteration   3: 383559.231 ops/s
Iteration   4: 392902.030 ops/s
Iteration   5: 377381.085 ops/s
Iteration   6: 380322.570 ops/s
Iteration   7: 381747.747 ops/s
Iteration   8: 384401.790 ops/s
Iteration   9: 392533.381 ops/s
Iteration  10: 377504.269 ops/s
Iteration  11: 374111.055 ops/s
Iteration  12: 386697.783 ops/s
Iteration  13: 392574.507 ops/s
Iteration  14: 392819.055 ops/s
Iteration  15: 378226.989 ops/s
Iteration  16: 377121.619 ops/s
Iteration  17: 382019.613 ops/s
Iteration  18: 383655.531 ops/s
Iteration  19: 398836.283 ops/s
Iteration  20: 401895.446 ops/s
Iteration  21: 401212.882 ops/s
Iteration  22: 385439.480 ops/s
Iteration  23: 384233.872 ops/s
Iteration  24: 380442.529 ops/s
Iteration  25: 380033.475 ops/s
Iteration  26: 379523.039 ops/s
Iteration  27: 378152.311 ops/s
Iteration  28: 382995.165 ops/s
Iteration  29: 401359.254 ops/s
Iteration  30: 383474.890 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_selectDuplicates":
  385088.205 ±(99.9%) 5325.754 ops/s [Average]
  (min, avg, max) = (374111.055, 385088.205, 401895.446), stdev = 7971.338
  CI (99.9%): [379762.451, 390413.959] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_selectDuplicates  thrpt   30  385088.205 ± 5325.754  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 431992.085 ops/s
# Warmup Iteration   2: 724698.045 ops/s
# Warmup Iteration   3: 908218.223 ops/s
# Warmup Iteration   4: 905447.843 ops/s
# Warmup Iteration   5: 906016.586 ops/s
# Warmup Iteration   6: 804406.504 ops/s
# Warmup Iteration   7: 812753.713 ops/s
# Warmup Iteration   8: 865818.073 ops/s
# Warmup Iteration   9: 899156.324 ops/s
# Warmup Iteration  10: 921110.447 ops/s
# Warmup Iteration  11: 881534.490 ops/s
# Warmup Iteration  12: 906024.172 ops/s
# Warmup Iteration  13: 874749.697 ops/s
# Warmup Iteration  14: 889267.393 ops/s
# Warmup Iteration  15: 880305.242 ops/s
# Warmup Iteration  16: 897727.866 ops/s
# Warmup Iteration  17: 882185.624 ops/s
# Warmup Iteration  18: 881483.479 ops/s
# Warmup Iteration  19: 891571.552 ops/s
# Warmup Iteration  20: 889781.733 ops/s
# Warmup Iteration  21: 921889.956 ops/s
# Warmup Iteration  22: 917201.534 ops/s
# Warmup Iteration  23: 905834.763 ops/s
# Warmup Iteration  24: 886663.445 ops/s
# Warmup Iteration  25: 883574.992 ops/s
# Warmup Iteration  26: 885931.840 ops/s
# Warmup Iteration  27: 925866.741 ops/s
# Warmup Iteration  28: 927589.356 ops/s
# Warmup Iteration  29: 927696.763 ops/s
# Warmup Iteration  30: 927482.085 ops/s
Iteration   1: 928229.662 ops/s
Iteration   2: 926106.510 ops/s
Iteration   3: 928361.460 ops/s
Iteration   4: 925750.880 ops/s
Iteration   5: 925279.266 ops/s
Iteration   6: 927174.955 ops/s
Iteration   7: 885629.431 ops/s
Iteration   8: 871132.702 ops/s
Iteration   9: 877794.620 ops/s
Iteration  10: 861925.248 ops/s
Iteration  11: 888209.750 ops/s
Iteration  12: 924906.542 ops/s
Iteration  13: 854096.130 ops/s
Iteration  14: 904051.003 ops/s
Iteration  15: 868476.862 ops/s
Iteration  16: 862105.979 ops/s
Iteration  17: 889460.769 ops/s
Iteration  18: 856474.627 ops/s
Iteration  19: 871626.094 ops/s
Iteration  20: 883653.217 ops/s
Iteration  21: 893344.247 ops/s
Iteration  22: 864462.499 ops/s
Iteration  23: 872156.782 ops/s
Iteration  24: 900826.977 ops/s
Iteration  25: 885316.231 ops/s
Iteration  26: 870592.290 ops/s
Iteration  27: 882112.649 ops/s
Iteration  28: 893216.056 ops/s
Iteration  29: 878506.522 ops/s
Iteration  30: 878015.431 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_selectInstancesOf":
  889299.846 ±(99.9%) 16050.310 ops/s [Average]
  (min, avg, max) = (854096.130, 889299.846, 928361.460), stdev = 24023.350
  CI (99.9%): [873249.537, 905350.156] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  889299.846 ± 16050.310  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_selectUnique$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_selectUnique

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 390687.789 ops/s
# Warmup Iteration   2: 652004.983 ops/s
# Warmup Iteration   3: 786582.968 ops/s
# Warmup Iteration   4: 794055.568 ops/s
# Warmup Iteration   5: 805586.260 ops/s
# Warmup Iteration   6: 727926.196 ops/s
# Warmup Iteration   7: 763326.478 ops/s
# Warmup Iteration   8: 818928.273 ops/s
# Warmup Iteration   9: 797953.885 ops/s
# Warmup Iteration  10: 805568.335 ops/s
# Warmup Iteration  11: 807304.804 ops/s
# Warmup Iteration  12: 787426.702 ops/s
# Warmup Iteration  13: 780274.292 ops/s
# Warmup Iteration  14: 797187.792 ops/s
# Warmup Iteration  15: 781271.256 ops/s
# Warmup Iteration  16: 789245.396 ops/s
# Warmup Iteration  17: 790526.434 ops/s
# Warmup Iteration  18: 812120.162 ops/s
# Warmup Iteration  19: 788591.398 ops/s
# Warmup Iteration  20: 796903.340 ops/s
# Warmup Iteration  21: 823343.869 ops/s
# Warmup Iteration  22: 796955.680 ops/s
# Warmup Iteration  23: 822508.505 ops/s
# Warmup Iteration  24: 794198.925 ops/s
# Warmup Iteration  25: 788719.425 ops/s
# Warmup Iteration  26: 812890.898 ops/s
# Warmup Iteration  27: 791436.485 ops/s
# Warmup Iteration  28: 827552.530 ops/s
# Warmup Iteration  29: 809240.149 ops/s
# Warmup Iteration  30: 799197.899 ops/s
Iteration   1: 820084.278 ops/s
Iteration   2: 830896.171 ops/s
Iteration   3: 830509.769 ops/s
Iteration   4: 780500.857 ops/s
Iteration   5: 774354.226 ops/s
Iteration   6: 772729.719 ops/s
Iteration   7: 775447.496 ops/s
Iteration   8: 805224.489 ops/s
Iteration   9: 780135.108 ops/s
Iteration  10: 784542.763 ops/s
Iteration  11: 814235.317 ops/s
Iteration  12: 789496.807 ops/s
Iteration  13: 806600.341 ops/s
Iteration  14: 781317.915 ops/s
Iteration  15: 825845.841 ops/s
Iteration  16: 790172.465 ops/s
Iteration  17: 790531.771 ops/s
Iteration  18: 802033.712 ops/s
Iteration  19: 792860.619 ops/s
Iteration  20: 768685.947 ops/s
Iteration  21: 775108.907 ops/s
Iteration  22: 814865.169 ops/s
Iteration  23: 830393.943 ops/s
Iteration  24: 831814.445 ops/s
Iteration  25: 832430.510 ops/s
Iteration  26: 832815.598 ops/s
Iteration  27: 830251.340 ops/s
Iteration  28: 830967.060 ops/s
Iteration  29: 830343.854 ops/s
Iteration  30: 830997.079 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_selectUnique":
  805206.451 ±(99.9%) 15583.458 ops/s [Average]
  (min, avg, max) = (768685.947, 805206.451, 832815.598), stdev = 23324.588
  CI (99.9%): [789622.993, 820789.909] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_selectUnique  thrpt   30  805206.451 ± 15583.458  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 169279.140 ops/s
# Warmup Iteration   2: 384072.909 ops/s
# Warmup Iteration   3: 417638.477 ops/s
# Warmup Iteration   4: 413238.235 ops/s
# Warmup Iteration   5: 391166.490 ops/s
# Warmup Iteration   6: 382577.851 ops/s
# Warmup Iteration   7: 416013.126 ops/s
# Warmup Iteration   8: 413358.042 ops/s
# Warmup Iteration   9: 419091.904 ops/s
# Warmup Iteration  10: 420959.900 ops/s
# Warmup Iteration  11: 431678.991 ops/s
# Warmup Iteration  12: 413123.604 ops/s
# Warmup Iteration  13: 414749.560 ops/s
# Warmup Iteration  14: 414252.159 ops/s
# Warmup Iteration  15: 417661.493 ops/s
# Warmup Iteration  16: 418589.725 ops/s
# Warmup Iteration  17: 410776.938 ops/s
# Warmup Iteration  18: 420313.381 ops/s
# Warmup Iteration  19: 404460.918 ops/s
# Warmup Iteration  20: 408841.188 ops/s
# Warmup Iteration  21: 420513.589 ops/s
# Warmup Iteration  22: 406306.079 ops/s
# Warmup Iteration  23: 407263.119 ops/s
# Warmup Iteration  24: 435853.991 ops/s
# Warmup Iteration  25: 409483.466 ops/s
# Warmup Iteration  26: 412371.636 ops/s
# Warmup Iteration  27: 410240.174 ops/s
# Warmup Iteration  28: 418713.167 ops/s
# Warmup Iteration  29: 412556.955 ops/s
# Warmup Iteration  30: 408435.025 ops/s
Iteration   1: 411490.585 ops/s
Iteration   2: 406407.156 ops/s
Iteration   3: 412143.742 ops/s
Iteration   4: 412883.683 ops/s
Iteration   5: 403955.595 ops/s
Iteration   6: 421562.299 ops/s
Iteration   7: 419389.378 ops/s
Iteration   8: 420410.593 ops/s
Iteration   9: 420163.951 ops/s
Iteration  10: 415498.204 ops/s
Iteration  11: 410103.719 ops/s
Iteration  12: 405277.437 ops/s
Iteration  13: 408862.641 ops/s
Iteration  14: 415429.357 ops/s
Iteration  15: 406139.074 ops/s
Iteration  16: 409925.353 ops/s
Iteration  17: 412470.315 ops/s
Iteration  18: 410417.217 ops/s
Iteration  19: 403513.862 ops/s
Iteration  20: 401540.871 ops/s
Iteration  21: 411017.672 ops/s
Iteration  22: 411322.644 ops/s
Iteration  23: 417304.248 ops/s
Iteration  24: 414983.056 ops/s
Iteration  25: 411074.157 ops/s
Iteration  26: 409386.529 ops/s
Iteration  27: 414323.911 ops/s
Iteration  28: 412814.099 ops/s
Iteration  29: 410416.264 ops/s
Iteration  30: 404969.237 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_selectWith":
  411506.562 ±(99.9%) 3471.049 ops/s [Average]
  (min, avg, max) = (401540.871, 411506.562, 421562.299), stdev = 5195.304
  CI (99.9%): [408035.512, 414977.611] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_selectWith  thrpt   30  411506.562 ± 3471.049  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 140087.820 ops/s
# Warmup Iteration   2: 269071.986 ops/s
# Warmup Iteration   3: 330473.066 ops/s
# Warmup Iteration   4: 327766.856 ops/s
# Warmup Iteration   5: 325542.499 ops/s
# Warmup Iteration   6: 276260.147 ops/s
# Warmup Iteration   7: 330306.997 ops/s
# Warmup Iteration   8: 327941.344 ops/s
# Warmup Iteration   9: 327529.734 ops/s
# Warmup Iteration  10: 341412.373 ops/s
# Warmup Iteration  11: 348808.943 ops/s
# Warmup Iteration  12: 348988.425 ops/s
# Warmup Iteration  13: 348946.738 ops/s
# Warmup Iteration  14: 349215.396 ops/s
# Warmup Iteration  15: 348257.648 ops/s
# Warmup Iteration  16: 348575.786 ops/s
# Warmup Iteration  17: 345295.578 ops/s
# Warmup Iteration  18: 347683.553 ops/s
# Warmup Iteration  19: 329228.160 ops/s
# Warmup Iteration  20: 329344.809 ops/s
# Warmup Iteration  21: 330195.187 ops/s
# Warmup Iteration  22: 325945.820 ops/s
# Warmup Iteration  23: 327863.646 ops/s
# Warmup Iteration  24: 323371.007 ops/s
# Warmup Iteration  25: 325587.418 ops/s
# Warmup Iteration  26: 329817.867 ops/s
# Warmup Iteration  27: 327430.269 ops/s
# Warmup Iteration  28: 327892.473 ops/s
# Warmup Iteration  29: 328864.316 ops/s
# Warmup Iteration  30: 328239.529 ops/s
Iteration   1: 348256.424 ops/s
Iteration   2: 337450.338 ops/s
Iteration   3: 333953.841 ops/s
Iteration   4: 335039.287 ops/s
Iteration   5: 327967.067 ops/s
Iteration   6: 327541.376 ops/s
Iteration   7: 324618.684 ops/s
Iteration   8: 329056.801 ops/s
Iteration   9: 330100.445 ops/s
Iteration  10: 329874.500 ops/s
Iteration  11: 335328.416 ops/s
Iteration  12: 335965.443 ops/s
Iteration  13: 333261.622 ops/s
Iteration  14: 323917.273 ops/s
Iteration  15: 333101.255 ops/s
Iteration  16: 332086.092 ops/s
Iteration  17: 323191.722 ops/s
Iteration  18: 329552.400 ops/s
Iteration  19: 334829.434 ops/s
Iteration  20: 333182.053 ops/s
Iteration  21: 333228.860 ops/s
Iteration  22: 328975.680 ops/s
Iteration  23: 328149.695 ops/s
Iteration  24: 334834.978 ops/s
Iteration  25: 335678.102 ops/s
Iteration  26: 334551.819 ops/s
Iteration  27: 322366.961 ops/s
Iteration  28: 347195.234 ops/s
Iteration  29: 326588.672 ops/s
Iteration  30: 327964.428 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_selectWith_target":
  331926.963 ±(99.9%) 3972.092 ops/s [Average]
  (min, avg, max) = (322366.961, 331926.963, 348256.424), stdev = 5945.241
  CI (99.9%): [327954.871, 335899.056] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_selectWith_target  thrpt   30  331926.963 ± 3972.092  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18184.141 ops/s
# Warmup Iteration   2: 27392.696 ops/s
# Warmup Iteration   3: 37354.843 ops/s
# Warmup Iteration   4: 37822.578 ops/s
# Warmup Iteration   5: 37894.735 ops/s
# Warmup Iteration   6: 37976.236 ops/s
# Warmup Iteration   7: 38207.194 ops/s
# Warmup Iteration   8: 37976.372 ops/s
# Warmup Iteration   9: 36055.050 ops/s
# Warmup Iteration  10: 33701.745 ops/s
# Warmup Iteration  11: 38097.790 ops/s
# Warmup Iteration  12: 38367.008 ops/s
# Warmup Iteration  13: 39129.358 ops/s
# Warmup Iteration  14: 37778.208 ops/s
# Warmup Iteration  15: 38050.030 ops/s
# Warmup Iteration  16: 37793.502 ops/s
# Warmup Iteration  17: 37669.374 ops/s
# Warmup Iteration  18: 38092.295 ops/s
# Warmup Iteration  19: 37693.513 ops/s
# Warmup Iteration  20: 38588.486 ops/s
# Warmup Iteration  21: 39466.231 ops/s
# Warmup Iteration  22: 37620.880 ops/s
# Warmup Iteration  23: 37962.927 ops/s
# Warmup Iteration  24: 37805.948 ops/s
# Warmup Iteration  25: 39998.136 ops/s
# Warmup Iteration  26: 40169.016 ops/s
# Warmup Iteration  27: 40120.364 ops/s
# Warmup Iteration  28: 40160.802 ops/s
# Warmup Iteration  29: 40146.666 ops/s
# Warmup Iteration  30: 40214.585 ops/s
Iteration   1: 40305.820 ops/s
Iteration   2: 40116.249 ops/s
Iteration   3: 38503.502 ops/s
Iteration   4: 38252.864 ops/s
Iteration   5: 37499.658 ops/s
Iteration   6: 37481.892 ops/s
Iteration   7: 37639.078 ops/s
Iteration   8: 38535.377 ops/s
Iteration   9: 39614.050 ops/s
Iteration  10: 40148.522 ops/s
Iteration  11: 40099.084 ops/s
Iteration  12: 39435.288 ops/s
Iteration  13: 38056.507 ops/s
Iteration  14: 38412.374 ops/s
Iteration  15: 38487.576 ops/s
Iteration  16: 37871.222 ops/s
Iteration  17: 38448.882 ops/s
Iteration  18: 38616.891 ops/s
Iteration  19: 38357.475 ops/s
Iteration  20: 38499.124 ops/s
Iteration  21: 37411.898 ops/s
Iteration  22: 37524.175 ops/s
Iteration  23: 38537.882 ops/s
Iteration  24: 38337.676 ops/s
Iteration  25: 38347.288 ops/s
Iteration  26: 37896.515 ops/s
Iteration  27: 38245.591 ops/s
Iteration  28: 39319.636 ops/s
Iteration  29: 39458.473 ops/s
Iteration  30: 40231.878 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_serialization":
  38656.415 ±(99.9%) 597.748 ops/s [Average]
  (min, avg, max) = (37411.898, 38656.415, 40305.820), stdev = 894.681
  CI (99.9%): [38058.667, 39254.163] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt      Score     Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_serialization  thrpt   30  38656.415 ± 597.748  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_setOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_setOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 518169.542 ops/s
# Warmup Iteration   2: 566869.694 ops/s
# Warmup Iteration   3: 747560.753 ops/s
# Warmup Iteration   4: 742503.814 ops/s
# Warmup Iteration   5: 731607.690 ops/s
# Warmup Iteration   6: 722226.566 ops/s
# Warmup Iteration   7: 713496.817 ops/s
# Warmup Iteration   8: 718762.587 ops/s
# Warmup Iteration   9: 720918.777 ops/s
# Warmup Iteration  10: 702285.533 ops/s
# Warmup Iteration  11: 640108.177 ops/s
# Warmup Iteration  12: 647362.222 ops/s
# Warmup Iteration  13: 714270.448 ops/s
# Warmup Iteration  14: 710606.258 ops/s
# Warmup Iteration  15: 703836.230 ops/s
# Warmup Iteration  16: 704465.173 ops/s
# Warmup Iteration  17: 750870.299 ops/s
# Warmup Iteration  18: 744437.128 ops/s
# Warmup Iteration  19: 748546.644 ops/s
# Warmup Iteration  20: 749506.272 ops/s
# Warmup Iteration  21: 753008.083 ops/s
# Warmup Iteration  22: 725184.584 ops/s
# Warmup Iteration  23: 746439.614 ops/s
# Warmup Iteration  24: 750722.776 ops/s
# Warmup Iteration  25: 749881.903 ops/s
# Warmup Iteration  26: 753193.033 ops/s
# Warmup Iteration  27: 741576.308 ops/s
# Warmup Iteration  28: 736525.164 ops/s
# Warmup Iteration  29: 748016.653 ops/s
# Warmup Iteration  30: 735226.097 ops/s
Iteration   1: 734510.960 ops/s
Iteration   2: 747509.623 ops/s
Iteration   3: 742563.777 ops/s
Iteration   4: 726901.854 ops/s
Iteration   5: 728696.721 ops/s
Iteration   6: 737381.792 ops/s
Iteration   7: 727222.474 ops/s
Iteration   8: 740347.870 ops/s
Iteration   9: 777042.493 ops/s
Iteration  10: 737750.655 ops/s
Iteration  11: 760916.021 ops/s
Iteration  12: 738264.048 ops/s
Iteration  13: 736220.691 ops/s
Iteration  14: 736315.334 ops/s
Iteration  15: 749339.594 ops/s
Iteration  16: 753289.170 ops/s
Iteration  17: 779186.736 ops/s
Iteration  18: 776928.166 ops/s
Iteration  19: 784663.948 ops/s
Iteration  20: 784255.327 ops/s
Iteration  21: 784715.158 ops/s
Iteration  22: 784658.435 ops/s
Iteration  23: 785534.024 ops/s
Iteration  24: 782520.802 ops/s
Iteration  25: 782599.881 ops/s
Iteration  26: 783110.588 ops/s
Iteration  27: 784189.924 ops/s
Iteration  28: 783622.504 ops/s
Iteration  29: 784144.570 ops/s
Iteration  30: 783824.938 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_setOccurrences":
  761274.269 ±(99.9%) 15306.081 ops/s [Average]
  (min, avg, max) = (726901.854, 761274.269, 785534.024), stdev = 22909.424
  CI (99.9%): [745968.188, 776580.351] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_setOccurrences  thrpt   30  761274.269 ± 15306.081  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_setOccurrences_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_setOccurrences_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 553018.319 ops/s
# Warmup Iteration   2: 688668.370 ops/s
# Warmup Iteration   3: 835375.248 ops/s
# Warmup Iteration   4: 839091.880 ops/s
# Warmup Iteration   5: 836896.106 ops/s
# Warmup Iteration   6: 830719.481 ops/s
# Warmup Iteration   7: 843403.574 ops/s
# Warmup Iteration   8: 834776.254 ops/s
# Warmup Iteration   9: 700611.824 ops/s
# Warmup Iteration  10: 836367.290 ops/s
# Warmup Iteration  11: 848362.924 ops/s
# Warmup Iteration  12: 850204.613 ops/s
# Warmup Iteration  13: 844885.354 ops/s
# Warmup Iteration  14: 833968.017 ops/s
# Warmup Iteration  15: 835552.789 ops/s
# Warmup Iteration  16: 862860.978 ops/s
# Warmup Iteration  17: 877882.699 ops/s
# Warmup Iteration  18: 895257.008 ops/s
# Warmup Iteration  19: 900776.397 ops/s
# Warmup Iteration  20: 911662.779 ops/s
# Warmup Iteration  21: 907523.372 ops/s
# Warmup Iteration  22: 916161.746 ops/s
# Warmup Iteration  23: 896866.135 ops/s
# Warmup Iteration  24: 889888.557 ops/s
# Warmup Iteration  25: 880522.700 ops/s
# Warmup Iteration  26: 890203.275 ops/s
# Warmup Iteration  27: 895176.414 ops/s
# Warmup Iteration  28: 876070.702 ops/s
# Warmup Iteration  29: 902205.830 ops/s
# Warmup Iteration  30: 886673.898 ops/s
Iteration   1: 912619.800 ops/s
Iteration   2: 879637.988 ops/s
Iteration   3: 872412.332 ops/s
Iteration   4: 881393.764 ops/s
Iteration   5: 869068.365 ops/s
Iteration   6: 898938.597 ops/s
Iteration   7: 894484.085 ops/s
Iteration   8: 895773.171 ops/s
Iteration   9: 920487.485 ops/s
Iteration  10: 938239.528 ops/s
Iteration  11: 935291.896 ops/s
Iteration  12: 920015.715 ops/s
Iteration  13: 840402.886 ops/s
Iteration  14: 900262.024 ops/s
Iteration  15: 876453.173 ops/s
Iteration  16: 881008.184 ops/s
Iteration  17: 913652.847 ops/s
Iteration  18: 924507.218 ops/s
Iteration  19: 921943.090 ops/s
Iteration  20: 878949.057 ops/s
Iteration  21: 891345.685 ops/s
Iteration  22: 876811.298 ops/s
Iteration  23: 892575.909 ops/s
Iteration  24: 884508.904 ops/s
Iteration  25: 888872.367 ops/s
Iteration  26: 864905.759 ops/s
Iteration  27: 879391.773 ops/s
Iteration  28: 875134.640 ops/s
Iteration  29: 871138.770 ops/s
Iteration  30: 874256.178 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_setOccurrences_throws":
  891816.083 ±(99.9%) 15289.114 ops/s [Average]
  (min, avg, max) = (840402.886, 891816.083, 938239.528), stdev = 22884.028
  CI (99.9%): [876526.969, 907105.197] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_setOccurrences_throws  thrpt   30  891816.083 ± 15289.114  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 489498.449 ops/s
# Warmup Iteration   2: 620403.033 ops/s
# Warmup Iteration   3: 818494.737 ops/s
# Warmup Iteration   4: 778413.205 ops/s
# Warmup Iteration   5: 793464.580 ops/s
# Warmup Iteration   6: 786271.159 ops/s
# Warmup Iteration   7: 781449.412 ops/s
# Warmup Iteration   8: 810865.210 ops/s
# Warmup Iteration   9: 694557.964 ops/s
# Warmup Iteration  10: 836563.712 ops/s
# Warmup Iteration  11: 834509.293 ops/s
# Warmup Iteration  12: 835317.827 ops/s
# Warmup Iteration  13: 835780.086 ops/s
# Warmup Iteration  14: 835522.956 ops/s
# Warmup Iteration  15: 809444.057 ops/s
# Warmup Iteration  16: 783971.948 ops/s
# Warmup Iteration  17: 776769.493 ops/s
# Warmup Iteration  18: 779590.383 ops/s
# Warmup Iteration  19: 789504.474 ops/s
# Warmup Iteration  20: 800586.466 ops/s
# Warmup Iteration  21: 801408.906 ops/s
# Warmup Iteration  22: 802849.969 ops/s
# Warmup Iteration  23: 807201.835 ops/s
# Warmup Iteration  24: 786971.338 ops/s
# Warmup Iteration  25: 788489.309 ops/s
# Warmup Iteration  26: 783366.012 ops/s
# Warmup Iteration  27: 775957.327 ops/s
# Warmup Iteration  28: 782065.997 ops/s
# Warmup Iteration  29: 775821.099 ops/s
# Warmup Iteration  30: 786566.299 ops/s
Iteration   1: 792545.867 ops/s
Iteration   2: 803318.227 ops/s
Iteration   3: 776430.857 ops/s
Iteration   4: 802979.337 ops/s
Iteration   5: 786831.046 ops/s
Iteration   6: 781511.199 ops/s
Iteration   7: 783153.553 ops/s
Iteration   8: 782115.084 ops/s
Iteration   9: 788825.750 ops/s
Iteration  10: 804552.179 ops/s
Iteration  11: 781902.552 ops/s
Iteration  12: 781349.722 ops/s
Iteration  13: 789929.115 ops/s
Iteration  14: 782731.012 ops/s
Iteration  15: 802643.061 ops/s
Iteration  16: 798354.328 ops/s
Iteration  17: 804465.027 ops/s
Iteration  18: 790662.695 ops/s
Iteration  19: 830845.841 ops/s
Iteration  20: 833018.453 ops/s
Iteration  21: 809571.478 ops/s
Iteration  22: 806421.425 ops/s
Iteration  23: 804574.814 ops/s
Iteration  24: 825105.596 ops/s
Iteration  25: 832225.585 ops/s
Iteration  26: 832863.466 ops/s
Iteration  27: 834228.884 ops/s
Iteration  28: 830367.958 ops/s
Iteration  29: 823848.513 ops/s
Iteration  30: 831797.767 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumByDouble":
  804305.680 ±(99.9%) 13099.948 ops/s [Average]
  (min, avg, max) = (776430.857, 804305.680, 834228.884), stdev = 19607.387
  CI (99.9%): [791205.732, 817405.628] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_sumByDouble  thrpt   30  804305.680 ± 13099.948  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 64.056 ops/s
# Warmup Iteration   2: 71.281 ops/s
# Warmup Iteration   3: 100.705 ops/s
# Warmup Iteration   4: 99.888 ops/s
# Warmup Iteration   5: 97.864 ops/s
# Warmup Iteration   6: 97.668 ops/s
# Warmup Iteration   7: 97.351 ops/s
# Warmup Iteration   8: 97.489 ops/s
# Warmup Iteration   9: 96.973 ops/s
# Warmup Iteration  10: 83.441 ops/s
# Warmup Iteration  11: 92.928 ops/s
# Warmup Iteration  12: 97.328 ops/s
# Warmup Iteration  13: 97.441 ops/s
# Warmup Iteration  14: 96.775 ops/s
# Warmup Iteration  15: 96.693 ops/s
# Warmup Iteration  16: 97.966 ops/s
# Warmup Iteration  17: 96.969 ops/s
# Warmup Iteration  18: 97.874 ops/s
# Warmup Iteration  19: 98.594 ops/s
# Warmup Iteration  20: 98.810 ops/s
# Warmup Iteration  21: 99.449 ops/s
# Warmup Iteration  22: 98.189 ops/s
# Warmup Iteration  23: 98.990 ops/s
# Warmup Iteration  24: 99.029 ops/s
# Warmup Iteration  25: 99.149 ops/s
# Warmup Iteration  26: 101.273 ops/s
# Warmup Iteration  27: 101.652 ops/s
# Warmup Iteration  28: 101.397 ops/s
# Warmup Iteration  29: 99.436 ops/s
# Warmup Iteration  30: 97.019 ops/s
Iteration   1: 96.670 ops/s
Iteration   2: 97.277 ops/s
Iteration   3: 96.346 ops/s
Iteration   4: 94.720 ops/s
Iteration   5: 95.292 ops/s
Iteration   6: 95.712 ops/s
Iteration   7: 96.396 ops/s
Iteration   8: 95.382 ops/s
Iteration   9: 96.052 ops/s
Iteration  10: 96.316 ops/s
Iteration  11: 97.045 ops/s
Iteration  12: 95.972 ops/s
Iteration  13: 94.648 ops/s
Iteration  14: 95.602 ops/s
Iteration  15: 95.522 ops/s
Iteration  16: 95.575 ops/s
Iteration  17: 96.283 ops/s
Iteration  18: 95.412 ops/s
Iteration  19: 94.849 ops/s
Iteration  20: 96.419 ops/s
Iteration  21: 95.868 ops/s
Iteration  22: 94.842 ops/s
Iteration  23: 94.980 ops/s
Iteration  24: 95.187 ops/s
Iteration  25: 96.350 ops/s
Iteration  26: 95.887 ops/s
Iteration  27: 95.378 ops/s
Iteration  28: 98.492 ops/s
Iteration  29: 96.633 ops/s
Iteration  30: 96.250 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  95.912 ±(99.9%) 0.562 ops/s [Average]
  (min, avg, max) = (94.648, 95.912, 98.492), stdev = 0.841
  CI (99.9%): [95.350, 96.474] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt   Score   Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  95.912 ± 0.562  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 514499.791 ops/s
# Warmup Iteration   2: 685458.305 ops/s
# Warmup Iteration   3: 898343.145 ops/s
# Warmup Iteration   4: 886650.559 ops/s
# Warmup Iteration   5: 902064.878 ops/s
# Warmup Iteration   6: 892283.450 ops/s
# Warmup Iteration   7: 863414.167 ops/s
# Warmup Iteration   8: 716927.800 ops/s
# Warmup Iteration   9: 846534.675 ops/s
# Warmup Iteration  10: 843347.732 ops/s
# Warmup Iteration  11: 857421.063 ops/s
# Warmup Iteration  12: 858626.468 ops/s
# Warmup Iteration  13: 850919.778 ops/s
# Warmup Iteration  14: 867044.262 ops/s
# Warmup Iteration  15: 855462.532 ops/s
# Warmup Iteration  16: 849524.339 ops/s
# Warmup Iteration  17: 849618.645 ops/s
# Warmup Iteration  18: 870409.327 ops/s
# Warmup Iteration  19: 871517.835 ops/s
# Warmup Iteration  20: 848631.854 ops/s
# Warmup Iteration  21: 872003.777 ops/s
# Warmup Iteration  22: 852464.398 ops/s
# Warmup Iteration  23: 866413.433 ops/s
# Warmup Iteration  24: 885243.536 ops/s
# Warmup Iteration  25: 864365.057 ops/s
# Warmup Iteration  26: 854955.554 ops/s
# Warmup Iteration  27: 852111.829 ops/s
# Warmup Iteration  28: 898480.012 ops/s
# Warmup Iteration  29: 900119.624 ops/s
# Warmup Iteration  30: 846475.213 ops/s
Iteration   1: 868819.500 ops/s
Iteration   2: 843556.967 ops/s
Iteration   3: 872839.315 ops/s
Iteration   4: 892206.592 ops/s
Iteration   5: 889753.791 ops/s
Iteration   6: 892391.793 ops/s
Iteration   7: 864533.202 ops/s
Iteration   8: 851475.103 ops/s
Iteration   9: 882865.680 ops/s
Iteration  10: 864035.170 ops/s
Iteration  11: 866681.200 ops/s
Iteration  12: 875839.688 ops/s
Iteration  13: 890387.448 ops/s
Iteration  14: 897121.092 ops/s
Iteration  15: 897432.630 ops/s
Iteration  16: 896495.172 ops/s
Iteration  17: 903038.018 ops/s
Iteration  18: 903564.845 ops/s
Iteration  19: 901909.310 ops/s
Iteration  20: 903377.078 ops/s
Iteration  21: 901614.267 ops/s
Iteration  22: 902593.206 ops/s
Iteration  23: 902284.092 ops/s
Iteration  24: 900419.766 ops/s
Iteration  25: 902911.035 ops/s
Iteration  26: 902099.449 ops/s
Iteration  27: 864247.727 ops/s
Iteration  28: 839259.603 ops/s
Iteration  29: 842156.010 ops/s
Iteration  30: 846524.459 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumByFloat":
  882081.107 ±(99.9%) 14541.383 ops/s [Average]
  (min, avg, max) = (839259.603, 882081.107, 903564.845), stdev = 21764.859
  CI (99.9%): [867539.724, 896622.490] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_sumByFloat  thrpt   30  882081.107 ± 14541.383  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 60.849 ops/s
# Warmup Iteration   2: 66.828 ops/s
# Warmup Iteration   3: 96.296 ops/s
# Warmup Iteration   4: 96.530 ops/s
# Warmup Iteration   5: 95.920 ops/s
# Warmup Iteration   6: 96.610 ops/s
# Warmup Iteration   7: 96.931 ops/s
# Warmup Iteration   8: 96.971 ops/s
# Warmup Iteration   9: 100.166 ops/s
# Warmup Iteration  10: 89.302 ops/s
# Warmup Iteration  11: 87.335 ops/s
# Warmup Iteration  12: 97.786 ops/s
# Warmup Iteration  13: 96.376 ops/s
# Warmup Iteration  14: 96.251 ops/s
# Warmup Iteration  15: 96.098 ops/s
# Warmup Iteration  16: 96.797 ops/s
# Warmup Iteration  17: 96.260 ops/s
# Warmup Iteration  18: 97.425 ops/s
# Warmup Iteration  19: 97.358 ops/s
# Warmup Iteration  20: 95.650 ops/s
# Warmup Iteration  21: 98.824 ops/s
# Warmup Iteration  22: 96.656 ops/s
# Warmup Iteration  23: 95.512 ops/s
# Warmup Iteration  24: 96.394 ops/s
# Warmup Iteration  25: 96.747 ops/s
# Warmup Iteration  26: 97.101 ops/s
# Warmup Iteration  27: 97.029 ops/s
# Warmup Iteration  28: 96.361 ops/s
# Warmup Iteration  29: 98.297 ops/s
# Warmup Iteration  30: 94.262 ops/s
Iteration   1: 97.216 ops/s
Iteration   2: 97.482 ops/s
Iteration   3: 96.820 ops/s
Iteration   4: 98.360 ops/s
Iteration   5: 98.219 ops/s
Iteration   6: 95.572 ops/s
Iteration   7: 98.536 ops/s
Iteration   8: 98.896 ops/s
Iteration   9: 96.299 ops/s
Iteration  10: 100.368 ops/s
Iteration  11: 95.899 ops/s
Iteration  12: 95.924 ops/s
Iteration  13: 99.864 ops/s
Iteration  14: 96.709 ops/s
Iteration  15: 95.967 ops/s
Iteration  16: 93.388 ops/s
Iteration  17: 94.063 ops/s
Iteration  18: 94.477 ops/s
Iteration  19: 97.710 ops/s
Iteration  20: 94.202 ops/s
Iteration  21: 96.533 ops/s
Iteration  22: 96.098 ops/s
Iteration  23: 94.818 ops/s
Iteration  24: 99.569 ops/s
Iteration  25: 98.036 ops/s
Iteration  26: 95.461 ops/s
Iteration  27: 94.389 ops/s
Iteration  28: 95.102 ops/s
Iteration  29: 95.975 ops/s
Iteration  30: 94.486 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  96.548 ±(99.9%) 1.235 ops/s [Average]
  (min, avg, max) = (93.388, 96.548, 100.368), stdev = 1.848
  CI (99.9%): [95.313, 97.783] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt   Score   Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  96.548 ± 1.235  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 734891.387 ops/s
# Warmup Iteration   2: 1156638.650 ops/s
# Warmup Iteration   3: 1325765.565 ops/s
# Warmup Iteration   4: 1352040.022 ops/s
# Warmup Iteration   5: 1383453.863 ops/s
# Warmup Iteration   6: 1402021.891 ops/s
# Warmup Iteration   7: 1171319.653 ops/s
# Warmup Iteration   8: 1397542.010 ops/s
# Warmup Iteration   9: 1398475.418 ops/s
# Warmup Iteration  10: 1396194.914 ops/s
# Warmup Iteration  11: 1396702.155 ops/s
# Warmup Iteration  12: 1396717.486 ops/s
# Warmup Iteration  13: 1348329.615 ops/s
# Warmup Iteration  14: 1347542.112 ops/s
# Warmup Iteration  15: 1316648.990 ops/s
# Warmup Iteration  16: 1317826.272 ops/s
# Warmup Iteration  17: 1364507.478 ops/s
# Warmup Iteration  18: 1344773.879 ops/s
# Warmup Iteration  19: 1333550.536 ops/s
# Warmup Iteration  20: 1342551.095 ops/s
# Warmup Iteration  21: 1323754.932 ops/s
# Warmup Iteration  22: 1342888.609 ops/s
# Warmup Iteration  23: 1340876.604 ops/s
# Warmup Iteration  24: 1342074.574 ops/s
# Warmup Iteration  25: 1336525.402 ops/s
# Warmup Iteration  26: 1334239.174 ops/s
# Warmup Iteration  27: 1311105.723 ops/s
# Warmup Iteration  28: 1335724.794 ops/s
# Warmup Iteration  29: 1359263.326 ops/s
# Warmup Iteration  30: 1336238.634 ops/s
Iteration   1: 1321407.235 ops/s
Iteration   2: 1323995.850 ops/s
Iteration   3: 1332560.422 ops/s
Iteration   4: 1396484.795 ops/s
Iteration   5: 1363538.725 ops/s
Iteration   6: 1341193.888 ops/s
Iteration   7: 1313992.772 ops/s
Iteration   8: 1395020.880 ops/s
Iteration   9: 1346662.498 ops/s
Iteration  10: 1346522.195 ops/s
Iteration  11: 1394594.514 ops/s
Iteration  12: 1345660.705 ops/s
Iteration  13: 1320441.963 ops/s
Iteration  14: 1340058.864 ops/s
Iteration  15: 1364710.519 ops/s
Iteration  16: 1330233.480 ops/s
Iteration  17: 1351627.571 ops/s
Iteration  18: 1412048.176 ops/s
Iteration  19: 1321663.054 ops/s
Iteration  20: 1328400.454 ops/s
Iteration  21: 1331495.746 ops/s
Iteration  22: 1324408.268 ops/s
Iteration  23: 1342712.757 ops/s
Iteration  24: 1333372.317 ops/s
Iteration  25: 1342364.026 ops/s
Iteration  26: 1356643.741 ops/s
Iteration  27: 1400830.207 ops/s
Iteration  28: 1325252.536 ops/s
Iteration  29: 1351901.195 ops/s
Iteration  30: 1335205.260 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumByInt":
  1347833.487 ±(99.9%) 17971.380 ops/s [Average]
  (min, avg, max) = (1313992.772, 1347833.487, 1412048.176), stdev = 26898.718
  CI (99.9%): [1329862.107, 1365804.868] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_sumByInt  thrpt   30  1347833.487 ± 17971.380  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 758530.351 ops/s
# Warmup Iteration   2: 1219156.729 ops/s
# Warmup Iteration   3: 1315423.528 ops/s
# Warmup Iteration   4: 1330545.635 ops/s
# Warmup Iteration   5: 1332399.526 ops/s
# Warmup Iteration   6: 1339253.043 ops/s
# Warmup Iteration   7: 1085007.761 ops/s
# Warmup Iteration   8: 1317085.071 ops/s
# Warmup Iteration   9: 1318316.737 ops/s
# Warmup Iteration  10: 1333703.717 ops/s
# Warmup Iteration  11: 1330320.090 ops/s
# Warmup Iteration  12: 1354510.252 ops/s
# Warmup Iteration  13: 1373681.730 ops/s
# Warmup Iteration  14: 1366262.837 ops/s
# Warmup Iteration  15: 1374415.650 ops/s
# Warmup Iteration  16: 1321965.404 ops/s
# Warmup Iteration  17: 1339133.594 ops/s
# Warmup Iteration  18: 1335030.762 ops/s
# Warmup Iteration  19: 1354441.074 ops/s
# Warmup Iteration  20: 1386743.923 ops/s
# Warmup Iteration  21: 1420352.695 ops/s
# Warmup Iteration  22: 1418315.795 ops/s
# Warmup Iteration  23: 1417671.263 ops/s
# Warmup Iteration  24: 1419217.972 ops/s
# Warmup Iteration  25: 1417577.901 ops/s
# Warmup Iteration  26: 1417539.798 ops/s
# Warmup Iteration  27: 1381363.212 ops/s
# Warmup Iteration  28: 1349562.766 ops/s
# Warmup Iteration  29: 1335188.383 ops/s
# Warmup Iteration  30: 1374042.105 ops/s
Iteration   1: 1365404.260 ops/s
Iteration   2: 1406208.984 ops/s
Iteration   3: 1339130.801 ops/s
Iteration   4: 1346873.778 ops/s
Iteration   5: 1363272.270 ops/s
Iteration   6: 1335333.899 ops/s
Iteration   7: 1332170.584 ops/s
Iteration   8: 1355272.942 ops/s
Iteration   9: 1363690.511 ops/s
Iteration  10: 1388696.297 ops/s
Iteration  11: 1358056.278 ops/s
Iteration  12: 1327788.202 ops/s
Iteration  13: 1340365.399 ops/s
Iteration  14: 1327039.372 ops/s
Iteration  15: 1356774.146 ops/s
Iteration  16: 1340189.627 ops/s
Iteration  17: 1343034.656 ops/s
Iteration  18: 1349796.165 ops/s
Iteration  19: 1345528.736 ops/s
Iteration  20: 1361263.336 ops/s
Iteration  21: 1364249.009 ops/s
Iteration  22: 1404993.177 ops/s
Iteration  23: 1419242.706 ops/s
Iteration  24: 1408244.229 ops/s
Iteration  25: 1415786.580 ops/s
Iteration  26: 1364828.941 ops/s
Iteration  27: 1348996.688 ops/s
Iteration  28: 1341479.299 ops/s
Iteration  29: 1358497.394 ops/s
Iteration  30: 1363522.409 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumByLong":
  1361191.023 ±(99.9%) 17543.642 ops/s [Average]
  (min, avg, max) = (1327039.372, 1361191.023, 1419242.706), stdev = 26258.499
  CI (99.9%): [1343647.381, 1378734.664] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_sumByLong  thrpt   30  1361191.023 ± 17543.642  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 762950.594 ops/s
# Warmup Iteration   2: 1297155.799 ops/s
# Warmup Iteration   3: 1462291.089 ops/s
# Warmup Iteration   4: 1498014.162 ops/s
# Warmup Iteration   5: 1467045.172 ops/s
# Warmup Iteration   6: 1196684.283 ops/s
# Warmup Iteration   7: 1441659.581 ops/s
# Warmup Iteration   8: 1443829.418 ops/s
# Warmup Iteration   9: 1450008.210 ops/s
# Warmup Iteration  10: 1441561.104 ops/s
# Warmup Iteration  11: 1434948.062 ops/s
# Warmup Iteration  12: 1447214.916 ops/s
# Warmup Iteration  13: 1487958.453 ops/s
# Warmup Iteration  14: 1458441.841 ops/s
# Warmup Iteration  15: 1457897.126 ops/s
# Warmup Iteration  16: 1472026.927 ops/s
# Warmup Iteration  17: 1425890.115 ops/s
# Warmup Iteration  18: 1457482.750 ops/s
# Warmup Iteration  19: 1476005.800 ops/s
# Warmup Iteration  20: 1486769.275 ops/s
# Warmup Iteration  21: 1459835.960 ops/s
# Warmup Iteration  22: 1479735.945 ops/s
# Warmup Iteration  23: 1460700.864 ops/s
# Warmup Iteration  24: 1425724.246 ops/s
# Warmup Iteration  25: 1419550.580 ops/s
# Warmup Iteration  26: 1425265.421 ops/s
# Warmup Iteration  27: 1439625.731 ops/s
# Warmup Iteration  28: 1423029.897 ops/s
# Warmup Iteration  29: 1474037.490 ops/s
# Warmup Iteration  30: 1418938.672 ops/s
Iteration   1: 1410687.555 ops/s
Iteration   2: 1426566.569 ops/s
Iteration   3: 1424044.540 ops/s
Iteration   4: 1469036.976 ops/s
Iteration   5: 1513012.865 ops/s
Iteration   6: 1506165.468 ops/s
Iteration   7: 1459817.423 ops/s
Iteration   8: 1451635.702 ops/s
Iteration   9: 1510443.788 ops/s
Iteration  10: 1517625.382 ops/s
Iteration  11: 1516640.368 ops/s
Iteration  12: 1518942.618 ops/s
Iteration  13: 1514557.678 ops/s
Iteration  14: 1518433.544 ops/s
Iteration  15: 1516368.583 ops/s
Iteration  16: 1517782.984 ops/s
Iteration  17: 1517703.018 ops/s
Iteration  18: 1515494.984 ops/s
Iteration  19: 1514772.766 ops/s
Iteration  20: 1517417.812 ops/s
Iteration  21: 1519106.354 ops/s
Iteration  22: 1507088.861 ops/s
Iteration  23: 1451447.647 ops/s
Iteration  24: 1433585.600 ops/s
Iteration  25: 1441071.638 ops/s
Iteration  26: 1438638.354 ops/s
Iteration  27: 1487783.640 ops/s
Iteration  28: 1431096.134 ops/s
Iteration  29: 1484959.030 ops/s
Iteration  30: 1457776.060 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumDouble":
  1483656.798 ±(99.9%) 25071.978 ops/s [Average]
  (min, avg, max) = (1410687.555, 1483656.798, 1519106.354), stdev = 37526.559
  CI (99.9%): [1458584.820, 1508728.776] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_sumDouble  thrpt   30  1483656.798 ± 25071.978  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11.315 ops/s
# Warmup Iteration   2: 12.315 ops/s
# Warmup Iteration   3: 11.925 ops/s
# Warmup Iteration   4: 11.761 ops/s
# Warmup Iteration   5: 11.907 ops/s
# Warmup Iteration   6: 11.895 ops/s
# Warmup Iteration   7: 11.933 ops/s
# Warmup Iteration   8: 11.914 ops/s
# Warmup Iteration   9: 11.915 ops/s
# Warmup Iteration  10: 11.797 ops/s
# Warmup Iteration  11: 12.604 ops/s
# Warmup Iteration  12: 12.917 ops/s
# Warmup Iteration  13: 12.809 ops/s
# Warmup Iteration  14: 12.856 ops/s
# Warmup Iteration  15: 12.849 ops/s
# Warmup Iteration  16: 12.767 ops/s
# Warmup Iteration  17: 12.877 ops/s
# Warmup Iteration  18: 12.972 ops/s
# Warmup Iteration  19: 13.229 ops/s
# Warmup Iteration  20: 13.180 ops/s
# Warmup Iteration  21: 12.796 ops/s
# Warmup Iteration  22: 12.879 ops/s
# Warmup Iteration  23: 12.824 ops/s
# Warmup Iteration  24: 12.848 ops/s
# Warmup Iteration  25: 12.935 ops/s
# Warmup Iteration  26: 13.401 ops/s
# Warmup Iteration  27: 13.611 ops/s
# Warmup Iteration  28: 13.214 ops/s
# Warmup Iteration  29: 12.772 ops/s
# Warmup Iteration  30: 13.349 ops/s
Iteration   1: 12.972 ops/s
Iteration   2: 13.106 ops/s
Iteration   3: 13.766 ops/s
Iteration   4: 13.457 ops/s
Iteration   5: 13.485 ops/s
Iteration   6: 13.346 ops/s
Iteration   7: 13.297 ops/s
Iteration   8: 13.552 ops/s
Iteration   9: 13.617 ops/s
Iteration  10: 13.473 ops/s
Iteration  11: 13.100 ops/s
Iteration  12: 13.709 ops/s
Iteration  13: 13.658 ops/s
Iteration  14: 13.409 ops/s
Iteration  15: 13.566 ops/s
Iteration  16: 12.979 ops/s
Iteration  17: 12.936 ops/s
Iteration  18: 13.079 ops/s
Iteration  19: 12.931 ops/s
Iteration  20: 13.008 ops/s
Iteration  21: 13.088 ops/s
Iteration  22: 13.397 ops/s
Iteration  23: 13.376 ops/s
Iteration  24: 13.284 ops/s
Iteration  25: 13.294 ops/s
Iteration  26: 13.559 ops/s
Iteration  27: 13.925 ops/s
Iteration  28: 13.880 ops/s
Iteration  29: 13.653 ops/s
Iteration  30: 13.430 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1":
  13.378 ±(99.9%) 0.190 ops/s [Average]
  (min, avg, max) = (12.931, 13.378, 13.925), stdev = 0.285
  CI (99.9%): [13.187, 13.568] (assumes normal distribution)


# Run complete. Total time: 00:01:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt   Score   Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1  thrpt   30  13.378 ± 0.190  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10.899 ops/s
# Warmup Iteration   2: 12.295 ops/s
# Warmup Iteration   3: 12.614 ops/s
# Warmup Iteration   4: 12.633 ops/s
# Warmup Iteration   5: 12.625 ops/s
# Warmup Iteration   6: 12.655 ops/s
# Warmup Iteration   7: 12.676 ops/s
# Warmup Iteration   8: 12.674 ops/s
# Warmup Iteration   9: 12.442 ops/s
# Warmup Iteration  10: 12.075 ops/s
# Warmup Iteration  11: 12.909 ops/s
# Warmup Iteration  12: 13.043 ops/s
# Warmup Iteration  13: 13.514 ops/s
# Warmup Iteration  14: 13.134 ops/s
# Warmup Iteration  15: 13.190 ops/s
# Warmup Iteration  16: 13.131 ops/s
# Warmup Iteration  17: 13.112 ops/s
# Warmup Iteration  18: 12.993 ops/s
# Warmup Iteration  19: 13.218 ops/s
# Warmup Iteration  20: 13.389 ops/s
# Warmup Iteration  21: 12.994 ops/s
# Warmup Iteration  22: 12.925 ops/s
# Warmup Iteration  23: 13.032 ops/s
# Warmup Iteration  24: 13.041 ops/s
# Warmup Iteration  25: 13.444 ops/s
# Warmup Iteration  26: 12.993 ops/s
# Warmup Iteration  27: 13.186 ops/s
# Warmup Iteration  28: 13.197 ops/s
# Warmup Iteration  29: 13.137 ops/s
# Warmup Iteration  30: 13.024 ops/s
Iteration   1: 13.189 ops/s
Iteration   2: 13.390 ops/s
Iteration   3: 13.163 ops/s
Iteration   4: 13.288 ops/s
Iteration   5: 12.988 ops/s
Iteration   6: 13.125 ops/s
Iteration   7: 13.446 ops/s
Iteration   8: 13.705 ops/s
Iteration   9: 13.101 ops/s
Iteration  10: 13.118 ops/s
Iteration  11: 13.694 ops/s
Iteration  12: 13.249 ops/s
Iteration  13: 12.939 ops/s
Iteration  14: 13.491 ops/s
Iteration  15: 13.710 ops/s
Iteration  16: 13.490 ops/s
Iteration  17: 13.300 ops/s
Iteration  18: 13.578 ops/s
Iteration  19: 13.420 ops/s
Iteration  20: 13.731 ops/s
Iteration  21: 13.392 ops/s
Iteration  22: 13.205 ops/s
Iteration  23: 13.216 ops/s
Iteration  24: 13.192 ops/s
Iteration  25: 13.186 ops/s
Iteration  26: 13.061 ops/s
Iteration  27: 13.092 ops/s
Iteration  28: 13.117 ops/s
Iteration  29: 13.202 ops/s
Iteration  30: 13.104 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2":
  13.296 ±(99.9%) 0.150 ops/s [Average]
  (min, avg, max) = (12.939, 13.296, 13.731), stdev = 0.225
  CI (99.9%): [13.146, 13.446] (assumes normal distribution)


# Run complete. Total time: 00:01:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt   Score   Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2  thrpt   30  13.296 ± 0.150  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 769641.452 ops/s
# Warmup Iteration   2: 1244165.153 ops/s
# Warmup Iteration   3: 1379364.550 ops/s
# Warmup Iteration   4: 1412564.128 ops/s
# Warmup Iteration   5: 1416949.568 ops/s
# Warmup Iteration   6: 1236353.667 ops/s
# Warmup Iteration   7: 1377519.428 ops/s
# Warmup Iteration   8: 1418903.056 ops/s
# Warmup Iteration   9: 1426293.002 ops/s
# Warmup Iteration  10: 1461597.711 ops/s
# Warmup Iteration  11: 1467245.854 ops/s
# Warmup Iteration  12: 1434124.131 ops/s
# Warmup Iteration  13: 1390851.911 ops/s
# Warmup Iteration  14: 1388727.087 ops/s
# Warmup Iteration  15: 1405060.490 ops/s
# Warmup Iteration  16: 1471587.415 ops/s
# Warmup Iteration  17: 1471899.365 ops/s
# Warmup Iteration  18: 1472540.607 ops/s
# Warmup Iteration  19: 1472761.273 ops/s
# Warmup Iteration  20: 1472085.181 ops/s
# Warmup Iteration  21: 1472742.454 ops/s
# Warmup Iteration  22: 1472093.852 ops/s
# Warmup Iteration  23: 1417024.866 ops/s
# Warmup Iteration  24: 1404741.187 ops/s
# Warmup Iteration  25: 1387896.388 ops/s
# Warmup Iteration  26: 1389807.856 ops/s
# Warmup Iteration  27: 1411707.671 ops/s
# Warmup Iteration  28: 1389661.662 ops/s
# Warmup Iteration  29: 1392957.916 ops/s
# Warmup Iteration  30: 1396942.426 ops/s
Iteration   1: 1440590.809 ops/s
Iteration   2: 1438686.694 ops/s
Iteration   3: 1404562.417 ops/s
Iteration   4: 1413309.846 ops/s
Iteration   5: 1413637.913 ops/s
Iteration   6: 1384860.956 ops/s
Iteration   7: 1393989.670 ops/s
Iteration   8: 1415433.596 ops/s
Iteration   9: 1406793.102 ops/s
Iteration  10: 1428738.240 ops/s
Iteration  11: 1379461.031 ops/s
Iteration  12: 1377413.347 ops/s
Iteration  13: 1407160.172 ops/s
Iteration  14: 1399196.155 ops/s
Iteration  15: 1408049.206 ops/s
Iteration  16: 1409727.802 ops/s
Iteration  17: 1426274.315 ops/s
Iteration  18: 1416729.668 ops/s
Iteration  19: 1410856.526 ops/s
Iteration  20: 1398069.549 ops/s
Iteration  21: 1421124.584 ops/s
Iteration  22: 1414569.227 ops/s
Iteration  23: 1400606.908 ops/s
Iteration  24: 1470917.260 ops/s
Iteration  25: 1471561.974 ops/s
Iteration  26: 1454018.488 ops/s
Iteration  27: 1411802.474 ops/s
Iteration  28: 1409926.218 ops/s
Iteration  29: 1405828.291 ops/s
Iteration  30: 1453230.684 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumFloat":
  1416237.571 ±(99.9%) 15723.416 ops/s [Average]
  (min, avg, max) = (1377413.347, 1416237.571, 1471561.974), stdev = 23534.070
  CI (99.9%): [1400514.155, 1431960.987] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_sumFloat  thrpt   30  1416237.571 ± 15723.416  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumFloatConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumFloatConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11.264 ops/s
# Warmup Iteration   2: 12.676 ops/s
# Warmup Iteration   3: 12.419 ops/s
# Warmup Iteration   4: 11.886 ops/s
# Warmup Iteration   5: 11.997 ops/s
# Warmup Iteration   6: 12.270 ops/s
# Warmup Iteration   7: 12.297 ops/s
# Warmup Iteration   8: 12.251 ops/s
# Warmup Iteration   9: 12.106 ops/s
# Warmup Iteration  10: 12.422 ops/s
# Warmup Iteration  11: 12.862 ops/s
# Warmup Iteration  12: 13.550 ops/s
# Warmup Iteration  13: 13.319 ops/s
# Warmup Iteration  14: 13.198 ops/s
# Warmup Iteration  15: 13.263 ops/s
# Warmup Iteration  16: 13.268 ops/s
# Warmup Iteration  17: 13.310 ops/s
# Warmup Iteration  18: 13.288 ops/s
# Warmup Iteration  19: 13.105 ops/s
# Warmup Iteration  20: 13.300 ops/s
# Warmup Iteration  21: 13.020 ops/s
# Warmup Iteration  22: 12.888 ops/s
# Warmup Iteration  23: 13.087 ops/s
# Warmup Iteration  24: 12.839 ops/s
# Warmup Iteration  25: 12.945 ops/s
# Warmup Iteration  26: 12.985 ops/s
# Warmup Iteration  27: 12.887 ops/s
# Warmup Iteration  28: 13.157 ops/s
# Warmup Iteration  29: 12.955 ops/s
# Warmup Iteration  30: 13.451 ops/s
Iteration   1: 13.395 ops/s
Iteration   2: 13.725 ops/s
Iteration   3: 13.552 ops/s
Iteration   4: 13.611 ops/s
Iteration   5: 13.621 ops/s
Iteration   6: 13.561 ops/s
Iteration   7: 13.535 ops/s
Iteration   8: 13.581 ops/s
Iteration   9: 13.571 ops/s
Iteration  10: 13.555 ops/s
Iteration  11: 13.589 ops/s
Iteration  12: 13.380 ops/s
Iteration  13: 13.046 ops/s
Iteration  14: 13.601 ops/s
Iteration  15: 12.855 ops/s
Iteration  16: 12.878 ops/s
Iteration  17: 12.883 ops/s
Iteration  18: 13.070 ops/s
Iteration  19: 13.127 ops/s
Iteration  20: 13.283 ops/s
Iteration  21: 13.582 ops/s
Iteration  22: 13.300 ops/s
Iteration  23: 12.989 ops/s
Iteration  24: 12.815 ops/s
Iteration  25: 13.379 ops/s
Iteration  26: 13.615 ops/s
Iteration  27: 13.588 ops/s
Iteration  28: 13.591 ops/s
Iteration  29: 13.569 ops/s
Iteration  30: 13.511 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumFloatConsistentRounding1":
  13.379 ±(99.9%) 0.188 ops/s [Average]
  (min, avg, max) = (12.815, 13.379, 13.725), stdev = 0.281
  CI (99.9%): [13.191, 13.566] (assumes normal distribution)


# Run complete. Total time: 00:01:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt   Score   Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_sumFloatConsistentRounding1  thrpt   30  13.379 ± 0.188  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumFloatConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumFloatConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11.185 ops/s
# Warmup Iteration   2: 12.012 ops/s
# Warmup Iteration   3: 12.058 ops/s
# Warmup Iteration   4: 12.369 ops/s
# Warmup Iteration   5: 12.141 ops/s
# Warmup Iteration   6: 12.031 ops/s
# Warmup Iteration   7: 11.873 ops/s
# Warmup Iteration   8: 11.899 ops/s
# Warmup Iteration   9: 12.055 ops/s
# Warmup Iteration  10: 11.845 ops/s
# Warmup Iteration  11: 12.187 ops/s
# Warmup Iteration  12: 13.159 ops/s
# Warmup Iteration  13: 13.226 ops/s
# Warmup Iteration  14: 13.060 ops/s
# Warmup Iteration  15: 12.942 ops/s
# Warmup Iteration  16: 12.933 ops/s
# Warmup Iteration  17: 13.138 ops/s
# Warmup Iteration  18: 13.151 ops/s
# Warmup Iteration  19: 12.923 ops/s
# Warmup Iteration  20: 13.125 ops/s
# Warmup Iteration  21: 13.407 ops/s
# Warmup Iteration  22: 13.688 ops/s
# Warmup Iteration  23: 13.414 ops/s
# Warmup Iteration  24: 13.221 ops/s
# Warmup Iteration  25: 13.178 ops/s
# Warmup Iteration  26: 13.181 ops/s
# Warmup Iteration  27: 13.582 ops/s
# Warmup Iteration  28: 13.744 ops/s
# Warmup Iteration  29: 13.799 ops/s
# Warmup Iteration  30: 13.684 ops/s
Iteration   1: 13.129 ops/s
Iteration   2: 13.295 ops/s
Iteration   3: 13.370 ops/s
Iteration   4: 13.207 ops/s
Iteration   5: 13.463 ops/s
Iteration   6: 13.155 ops/s
Iteration   7: 13.211 ops/s
Iteration   8: 13.182 ops/s
Iteration   9: 13.058 ops/s
Iteration  10: 13.099 ops/s
Iteration  11: 13.232 ops/s
Iteration  12: 13.362 ops/s
Iteration  13: 13.523 ops/s
Iteration  14: 13.537 ops/s
Iteration  15: 12.838 ops/s
Iteration  16: 12.642 ops/s
Iteration  17: 12.843 ops/s
Iteration  18: 13.173 ops/s
Iteration  19: 12.769 ops/s
Iteration  20: 12.941 ops/s
Iteration  21: 13.307 ops/s
Iteration  22: 13.313 ops/s
Iteration  23: 13.299 ops/s
Iteration  24: 13.586 ops/s
Iteration  25: 13.838 ops/s
Iteration  26: 13.882 ops/s
Iteration  27: 13.904 ops/s
Iteration  28: 13.904 ops/s
Iteration  29: 13.853 ops/s
Iteration  30: 13.922 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumFloatConsistentRounding2":
  13.328 ±(99.9%) 0.239 ops/s [Average]
  (min, avg, max) = (12.642, 13.328, 13.922), stdev = 0.358
  CI (99.9%): [13.089, 13.567] (assumes normal distribution)


# Run complete. Total time: 00:01:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt   Score   Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_sumFloatConsistentRounding2  thrpt   30  13.328 ± 0.239  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 717815.280 ops/s
# Warmup Iteration   2: 1160585.909 ops/s
# Warmup Iteration   3: 1317218.660 ops/s
# Warmup Iteration   4: 1279968.706 ops/s
# Warmup Iteration   5: 1252685.543 ops/s
# Warmup Iteration   6: 1188629.416 ops/s
# Warmup Iteration   7: 1134708.062 ops/s
# Warmup Iteration   8: 1252414.045 ops/s
# Warmup Iteration   9: 1260617.896 ops/s
# Warmup Iteration  10: 1252582.610 ops/s
# Warmup Iteration  11: 1269953.469 ops/s
# Warmup Iteration  12: 1270718.308 ops/s
# Warmup Iteration  13: 1278607.620 ops/s
# Warmup Iteration  14: 1277602.638 ops/s
# Warmup Iteration  15: 1270961.367 ops/s
# Warmup Iteration  16: 1274183.290 ops/s
# Warmup Iteration  17: 1279474.621 ops/s
# Warmup Iteration  18: 1279262.212 ops/s
# Warmup Iteration  19: 1288385.134 ops/s
# Warmup Iteration  20: 1289713.978 ops/s
# Warmup Iteration  21: 1276800.184 ops/s
# Warmup Iteration  22: 1304595.345 ops/s
# Warmup Iteration  23: 1330445.817 ops/s
# Warmup Iteration  24: 1300797.318 ops/s
# Warmup Iteration  25: 1283001.162 ops/s
# Warmup Iteration  26: 1310042.075 ops/s
# Warmup Iteration  27: 1285988.867 ops/s
# Warmup Iteration  28: 1287356.076 ops/s
# Warmup Iteration  29: 1253927.469 ops/s
# Warmup Iteration  30: 1271683.992 ops/s
Iteration   1: 1294167.386 ops/s
Iteration   2: 1278821.947 ops/s
Iteration   3: 1273883.686 ops/s
Iteration   4: 1266668.675 ops/s
Iteration   5: 1278990.179 ops/s
Iteration   6: 1249832.321 ops/s
Iteration   7: 1264717.959 ops/s
Iteration   8: 1273565.665 ops/s
Iteration   9: 1285352.721 ops/s
Iteration  10: 1332106.597 ops/s
Iteration  11: 1307556.359 ops/s
Iteration  12: 1256203.602 ops/s
Iteration  13: 1272382.812 ops/s
Iteration  14: 1268915.766 ops/s
Iteration  15: 1275774.355 ops/s
Iteration  16: 1281040.871 ops/s
Iteration  17: 1284348.290 ops/s
Iteration  18: 1280173.724 ops/s
Iteration  19: 1269558.877 ops/s
Iteration  20: 1287073.275 ops/s
Iteration  21: 1276422.151 ops/s
Iteration  22: 1280143.788 ops/s
Iteration  23: 1252138.570 ops/s
Iteration  24: 1283329.378 ops/s
Iteration  25: 1288045.247 ops/s
Iteration  26: 1265565.425 ops/s
Iteration  27: 1283966.192 ops/s
Iteration  28: 1296666.880 ops/s
Iteration  29: 1277985.194 ops/s
Iteration  30: 1275001.739 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumInteger":
  1278679.988 ±(99.9%) 10668.184 ops/s [Average]
  (min, avg, max) = (1249832.321, 1278679.988, 1332106.597), stdev = 15967.637
  CI (99.9%): [1268011.804, 1289348.172] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_sumInteger  thrpt   30  1278679.988 ± 10668.184  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 790665.234 ops/s
# Warmup Iteration   2: 1272695.792 ops/s
# Warmup Iteration   3: 1447870.899 ops/s
# Warmup Iteration   4: 1465047.428 ops/s
# Warmup Iteration   5: 1466785.586 ops/s
# Warmup Iteration   6: 1391279.203 ops/s
# Warmup Iteration   7: 1296573.039 ops/s
# Warmup Iteration   8: 1475763.964 ops/s
# Warmup Iteration   9: 1464931.473 ops/s
# Warmup Iteration  10: 1476230.317 ops/s
# Warmup Iteration  11: 1528508.236 ops/s
# Warmup Iteration  12: 1541993.994 ops/s
# Warmup Iteration  13: 1542519.564 ops/s
# Warmup Iteration  14: 1542857.566 ops/s
# Warmup Iteration  15: 1541984.265 ops/s
# Warmup Iteration  16: 1542527.722 ops/s
# Warmup Iteration  17: 1536514.032 ops/s
# Warmup Iteration  18: 1516309.373 ops/s
# Warmup Iteration  19: 1470462.527 ops/s
# Warmup Iteration  20: 1461134.457 ops/s
# Warmup Iteration  21: 1460228.196 ops/s
# Warmup Iteration  22: 1485697.421 ops/s
# Warmup Iteration  23: 1461228.598 ops/s
# Warmup Iteration  24: 1472834.370 ops/s
# Warmup Iteration  25: 1466513.229 ops/s
# Warmup Iteration  26: 1460656.086 ops/s
# Warmup Iteration  27: 1473754.227 ops/s
# Warmup Iteration  28: 1461831.089 ops/s
# Warmup Iteration  29: 1461666.571 ops/s
# Warmup Iteration  30: 1461952.054 ops/s
Iteration   1: 1484448.895 ops/s
Iteration   2: 1476818.061 ops/s
Iteration   3: 1473383.753 ops/s
Iteration   4: 1465538.799 ops/s
Iteration   5: 1467286.099 ops/s
Iteration   6: 1474221.338 ops/s
Iteration   7: 1475755.312 ops/s
Iteration   8: 1481617.872 ops/s
Iteration   9: 1461211.282 ops/s
Iteration  10: 1438020.606 ops/s
Iteration  11: 1452657.776 ops/s
Iteration  12: 1472538.832 ops/s
Iteration  13: 1464132.947 ops/s
Iteration  14: 1459688.453 ops/s
Iteration  15: 1462231.634 ops/s
Iteration  16: 1465385.045 ops/s
Iteration  17: 1466013.650 ops/s
Iteration  18: 1457252.256 ops/s
Iteration  19: 1455317.592 ops/s
Iteration  20: 1438792.983 ops/s
Iteration  21: 1529251.132 ops/s
Iteration  22: 1462865.649 ops/s
Iteration  23: 1449780.524 ops/s
Iteration  24: 1483014.547 ops/s
Iteration  25: 1512163.684 ops/s
Iteration  26: 1466300.175 ops/s
Iteration  27: 1465168.719 ops/s
Iteration  28: 1463207.508 ops/s
Iteration  29: 1473586.051 ops/s
Iteration  30: 1454510.894 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_sumLong":
  1468405.402 ±(99.9%) 12190.333 ops/s [Average]
  (min, avg, max) = (1438020.606, 1468405.402, 1529251.132), stdev = 18245.917
  CI (99.9%): [1456215.070, 1480595.735] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_sumLong  thrpt   30  1468405.402 ± 12190.333  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_summarizeDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_summarizeDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1963003.297 ops/s
# Warmup Iteration   2: 3992832.075 ops/s
# Warmup Iteration   3: 4187585.115 ops/s
# Warmup Iteration   4: 4256589.267 ops/s
# Warmup Iteration   5: 3467114.165 ops/s
# Warmup Iteration   6: 4197596.361 ops/s
# Warmup Iteration   7: 4240893.720 ops/s
# Warmup Iteration   8: 4263605.278 ops/s
# Warmup Iteration   9: 4189667.874 ops/s
# Warmup Iteration  10: 4358915.202 ops/s
# Warmup Iteration  11: 4218044.004 ops/s
# Warmup Iteration  12: 4246949.657 ops/s
# Warmup Iteration  13: 4188125.212 ops/s
# Warmup Iteration  14: 4180916.416 ops/s
# Warmup Iteration  15: 4333906.794 ops/s
# Warmup Iteration  16: 4289630.043 ops/s
# Warmup Iteration  17: 4284594.379 ops/s
# Warmup Iteration  18: 4179798.755 ops/s
# Warmup Iteration  19: 4214244.335 ops/s
# Warmup Iteration  20: 4200570.356 ops/s
# Warmup Iteration  21: 4224310.237 ops/s
# Warmup Iteration  22: 4164420.294 ops/s
# Warmup Iteration  23: 4192986.319 ops/s
# Warmup Iteration  24: 4201533.975 ops/s
# Warmup Iteration  25: 4239554.304 ops/s
# Warmup Iteration  26: 4405591.599 ops/s
# Warmup Iteration  27: 4431999.264 ops/s
# Warmup Iteration  28: 4438510.059 ops/s
# Warmup Iteration  29: 4428458.968 ops/s
# Warmup Iteration  30: 4425255.028 ops/s
Iteration   1: 4425995.830 ops/s
Iteration   2: 4438712.501 ops/s
Iteration   3: 4434527.425 ops/s
Iteration   4: 4431867.087 ops/s
Iteration   5: 4406357.260 ops/s
Iteration   6: 4311038.208 ops/s
Iteration   7: 4188359.209 ops/s
Iteration   8: 4271132.947 ops/s
Iteration   9: 4375679.895 ops/s
Iteration  10: 4304373.429 ops/s
Iteration  11: 4433413.164 ops/s
Iteration  12: 4277278.340 ops/s
Iteration  13: 4429341.815 ops/s
Iteration  14: 4432284.013 ops/s
Iteration  15: 4192481.521 ops/s
Iteration  16: 4210599.654 ops/s
Iteration  17: 4196539.681 ops/s
Iteration  18: 4197727.056 ops/s
Iteration  19: 4180603.601 ops/s
Iteration  20: 4303124.053 ops/s
Iteration  21: 4260275.585 ops/s
Iteration  22: 4183478.375 ops/s
Iteration  23: 4201400.303 ops/s
Iteration  24: 4251598.549 ops/s
Iteration  25: 4176532.137 ops/s
Iteration  26: 4204348.404 ops/s
Iteration  27: 4205750.528 ops/s
Iteration  28: 4219803.286 ops/s
Iteration  29: 4210445.598 ops/s
Iteration  30: 4202899.756 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_summarizeDouble":
  4285265.640 ±(99.9%) 66403.263 ops/s [Average]
  (min, avg, max) = (4176532.137, 4285265.640, 4438712.501), stdev = 99389.285
  CI (99.9%): [4218862.377, 4351668.903] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_summarizeDouble  thrpt   30  4285265.640 ± 66403.263  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_summarizeFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_summarizeFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1965577.055 ops/s
# Warmup Iteration   2: 3960840.067 ops/s
# Warmup Iteration   3: 4140409.789 ops/s
# Warmup Iteration   4: 4313952.870 ops/s
# Warmup Iteration   5: 3537969.039 ops/s
# Warmup Iteration   6: 4263017.267 ops/s
# Warmup Iteration   7: 4268595.854 ops/s
# Warmup Iteration   8: 4171111.289 ops/s
# Warmup Iteration   9: 4177647.330 ops/s
# Warmup Iteration  10: 4208065.636 ops/s
# Warmup Iteration  11: 4164811.350 ops/s
# Warmup Iteration  12: 4271071.048 ops/s
# Warmup Iteration  13: 4144172.042 ops/s
# Warmup Iteration  14: 4148860.392 ops/s
# Warmup Iteration  15: 4242934.001 ops/s
# Warmup Iteration  16: 4369855.842 ops/s
# Warmup Iteration  17: 4279825.280 ops/s
# Warmup Iteration  18: 4176102.277 ops/s
# Warmup Iteration  19: 4369225.448 ops/s
# Warmup Iteration  20: 4226710.690 ops/s
# Warmup Iteration  21: 4183922.962 ops/s
# Warmup Iteration  22: 4234760.533 ops/s
# Warmup Iteration  23: 4158255.896 ops/s
# Warmup Iteration  24: 4220364.190 ops/s
# Warmup Iteration  25: 4239984.174 ops/s
# Warmup Iteration  26: 4172400.641 ops/s
# Warmup Iteration  27: 4175279.446 ops/s
# Warmup Iteration  28: 4168219.175 ops/s
# Warmup Iteration  29: 4131837.360 ops/s
# Warmup Iteration  30: 4225275.844 ops/s
Iteration   1: 4108876.281 ops/s
Iteration   2: 4155567.174 ops/s
Iteration   3: 4168963.065 ops/s
Iteration   4: 4196232.662 ops/s
Iteration   5: 4134751.191 ops/s
Iteration   6: 4205107.615 ops/s
Iteration   7: 4189385.556 ops/s
Iteration   8: 4140373.967 ops/s
Iteration   9: 4201202.283 ops/s
Iteration  10: 4136944.112 ops/s
Iteration  11: 4134570.505 ops/s
Iteration  12: 4083906.294 ops/s
Iteration  13: 4121859.340 ops/s
Iteration  14: 4210632.821 ops/s
Iteration  15: 4192829.335 ops/s
Iteration  16: 4144665.250 ops/s
Iteration  17: 4140782.478 ops/s
Iteration  18: 4145434.129 ops/s
Iteration  19: 4224029.706 ops/s
Iteration  20: 4366437.556 ops/s
Iteration  21: 4397739.863 ops/s
Iteration  22: 4392939.463 ops/s
Iteration  23: 4394112.625 ops/s
Iteration  24: 4396932.242 ops/s
Iteration  25: 4386859.011 ops/s
Iteration  26: 4388033.348 ops/s
Iteration  27: 4393709.632 ops/s
Iteration  28: 4398296.672 ops/s
Iteration  29: 4394104.280 ops/s
Iteration  30: 4383805.671 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_summarizeFloat":
  4244302.804 ±(99.9%) 78222.627 ops/s [Average]
  (min, avg, max) = (4083906.294, 4244302.804, 4398296.672), stdev = 117079.955
  CI (99.9%): [4166080.177, 4322525.431] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_summarizeFloat  thrpt   30  4244302.804 ± 78222.627  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_summarizeInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_summarizeInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2148436.090 ops/s
# Warmup Iteration   2: 4210815.137 ops/s
# Warmup Iteration   3: 4403783.361 ops/s
# Warmup Iteration   4: 4364076.297 ops/s
# Warmup Iteration   5: 3639169.451 ops/s
# Warmup Iteration   6: 4360664.569 ops/s
# Warmup Iteration   7: 4397824.753 ops/s
# Warmup Iteration   8: 4434710.821 ops/s
# Warmup Iteration   9: 4405597.996 ops/s
# Warmup Iteration  10: 4354423.661 ops/s
# Warmup Iteration  11: 4386484.927 ops/s
# Warmup Iteration  12: 4328526.472 ops/s
# Warmup Iteration  13: 4586141.039 ops/s
# Warmup Iteration  14: 4352191.706 ops/s
# Warmup Iteration  15: 4433886.124 ops/s
# Warmup Iteration  16: 4431981.837 ops/s
# Warmup Iteration  17: 4403676.632 ops/s
# Warmup Iteration  18: 4409090.541 ops/s
# Warmup Iteration  19: 4392004.078 ops/s
# Warmup Iteration  20: 4407187.456 ops/s
# Warmup Iteration  21: 4365571.637 ops/s
# Warmup Iteration  22: 4522922.949 ops/s
# Warmup Iteration  23: 4448315.534 ops/s
# Warmup Iteration  24: 4424538.728 ops/s
# Warmup Iteration  25: 4412274.736 ops/s
# Warmup Iteration  26: 4560026.692 ops/s
# Warmup Iteration  27: 4435930.755 ops/s
# Warmup Iteration  28: 4330405.551 ops/s
# Warmup Iteration  29: 4363254.250 ops/s
# Warmup Iteration  30: 4358323.326 ops/s
Iteration   1: 4382116.826 ops/s
Iteration   2: 4543597.279 ops/s
Iteration   3: 4453826.436 ops/s
Iteration   4: 4443321.972 ops/s
Iteration   5: 4505049.326 ops/s
Iteration   6: 4458396.825 ops/s
Iteration   7: 4387329.138 ops/s
Iteration   8: 4384423.874 ops/s
Iteration   9: 4454108.143 ops/s
Iteration  10: 4418423.109 ops/s
Iteration  11: 4361175.212 ops/s
Iteration  12: 4552608.398 ops/s
Iteration  13: 4483194.062 ops/s
Iteration  14: 4319933.825 ops/s
Iteration  15: 4507429.856 ops/s
Iteration  16: 4430761.190 ops/s
Iteration  17: 4412289.638 ops/s
Iteration  18: 4373690.941 ops/s
Iteration  19: 4422124.504 ops/s
Iteration  20: 4376737.162 ops/s
Iteration  21: 4438830.414 ops/s
Iteration  22: 4366558.400 ops/s
Iteration  23: 4411199.836 ops/s
Iteration  24: 4437378.591 ops/s
Iteration  25: 4539647.122 ops/s
Iteration  26: 4269800.081 ops/s
Iteration  27: 4395673.863 ops/s
Iteration  28: 4330025.041 ops/s
Iteration  29: 4542010.817 ops/s
Iteration  30: 4531065.898 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_summarizeInt":
  4431090.926 ±(99.9%) 48079.636 ops/s [Average]
  (min, avg, max) = (4269800.081, 4431090.926, 4552608.398), stdev = 71963.341
  CI (99.9%): [4383011.290, 4479170.562] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_summarizeInt  thrpt   30  4431090.926 ± 48079.636  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_summarizeLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_summarizeLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2053969.577 ops/s
# Warmup Iteration   2: 4221470.323 ops/s
# Warmup Iteration   3: 4422737.933 ops/s
# Warmup Iteration   4: 4392900.497 ops/s
# Warmup Iteration   5: 3618381.947 ops/s
# Warmup Iteration   6: 4427833.270 ops/s
# Warmup Iteration   7: 4350462.724 ops/s
# Warmup Iteration   8: 4350962.643 ops/s
# Warmup Iteration   9: 4516369.100 ops/s
# Warmup Iteration  10: 4599475.020 ops/s
# Warmup Iteration  11: 4601001.980 ops/s
# Warmup Iteration  12: 4601144.307 ops/s
# Warmup Iteration  13: 4592217.837 ops/s
# Warmup Iteration  14: 4595825.475 ops/s
# Warmup Iteration  15: 4597042.194 ops/s
# Warmup Iteration  16: 4512806.026 ops/s
# Warmup Iteration  17: 4458075.248 ops/s
# Warmup Iteration  18: 4421293.882 ops/s
# Warmup Iteration  19: 4493844.516 ops/s
# Warmup Iteration  20: 4386261.021 ops/s
# Warmup Iteration  21: 4569780.888 ops/s
# Warmup Iteration  22: 4369032.787 ops/s
# Warmup Iteration  23: 4339797.624 ops/s
# Warmup Iteration  24: 4364223.977 ops/s
# Warmup Iteration  25: 4439605.334 ops/s
# Warmup Iteration  26: 4407333.202 ops/s
# Warmup Iteration  27: 4426135.787 ops/s
# Warmup Iteration  28: 4415908.468 ops/s
# Warmup Iteration  29: 4546607.414 ops/s
# Warmup Iteration  30: 4402030.405 ops/s
Iteration   1: 4552345.947 ops/s
Iteration   2: 4597709.590 ops/s
Iteration   3: 4431919.769 ops/s
Iteration   4: 4378026.082 ops/s
Iteration   5: 4456825.774 ops/s
Iteration   6: 4418551.949 ops/s
Iteration   7: 4465137.747 ops/s
Iteration   8: 4405250.763 ops/s
Iteration   9: 4585000.532 ops/s
Iteration  10: 4348635.377 ops/s
Iteration  11: 4429599.414 ops/s
Iteration  12: 4372867.540 ops/s
Iteration  13: 4365483.055 ops/s
Iteration  14: 4373986.154 ops/s
Iteration  15: 4414057.857 ops/s
Iteration  16: 4392244.612 ops/s
Iteration  17: 4465574.682 ops/s
Iteration  18: 4495754.106 ops/s
Iteration  19: 4517263.082 ops/s
Iteration  20: 4409498.277 ops/s
Iteration  21: 4370321.707 ops/s
Iteration  22: 4395915.775 ops/s
Iteration  23: 4582626.243 ops/s
Iteration  24: 4458522.226 ops/s
Iteration  25: 4415073.160 ops/s
Iteration  26: 4441021.544 ops/s
Iteration  27: 4360440.985 ops/s
Iteration  28: 4469843.420 ops/s
Iteration  29: 4396282.191 ops/s
Iteration  30: 4345211.373 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_summarizeLong":
  4437033.031 ±(99.9%) 47641.022 ops/s [Average]
  (min, avg, max) = (4345211.373, 4437033.031, 4597709.590), stdev = 71306.844
  CI (99.9%): [4389392.009, 4484674.053] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_summarizeLong  thrpt   30  4437033.031 ± 47641.022  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 181344.771 ops/s
# Warmup Iteration   2: 306774.872 ops/s
# Warmup Iteration   3: 351132.095 ops/s
# Warmup Iteration   4: 358386.969 ops/s
# Warmup Iteration   5: 355718.488 ops/s
# Warmup Iteration   6: 331078.521 ops/s
# Warmup Iteration   7: 334805.778 ops/s
# Warmup Iteration   8: 353781.188 ops/s
# Warmup Iteration   9: 361356.173 ops/s
# Warmup Iteration  10: 357968.092 ops/s
# Warmup Iteration  11: 361061.207 ops/s
# Warmup Iteration  12: 355480.466 ops/s
# Warmup Iteration  13: 355540.726 ops/s
# Warmup Iteration  14: 355170.232 ops/s
# Warmup Iteration  15: 352193.858 ops/s
# Warmup Iteration  16: 360339.700 ops/s
# Warmup Iteration  17: 355635.342 ops/s
# Warmup Iteration  18: 366249.342 ops/s
# Warmup Iteration  19: 356813.945 ops/s
# Warmup Iteration  20: 355987.879 ops/s
# Warmup Iteration  21: 355594.757 ops/s
# Warmup Iteration  22: 362143.759 ops/s
# Warmup Iteration  23: 358565.286 ops/s
# Warmup Iteration  24: 374647.564 ops/s
# Warmup Iteration  25: 374657.646 ops/s
# Warmup Iteration  26: 374752.173 ops/s
# Warmup Iteration  27: 374840.133 ops/s
# Warmup Iteration  28: 374698.625 ops/s
# Warmup Iteration  29: 374443.748 ops/s
# Warmup Iteration  30: 374638.811 ops/s
Iteration   1: 373276.437 ops/s
Iteration   2: 371468.663 ops/s
Iteration   3: 368145.851 ops/s
Iteration   4: 357315.845 ops/s
Iteration   5: 364386.947 ops/s
Iteration   6: 371081.283 ops/s
Iteration   7: 373619.025 ops/s
Iteration   8: 372371.578 ops/s
Iteration   9: 363441.070 ops/s
Iteration  10: 374299.259 ops/s
Iteration  11: 356618.759 ops/s
Iteration  12: 358860.658 ops/s
Iteration  13: 357771.671 ops/s
Iteration  14: 363100.299 ops/s
Iteration  15: 360169.838 ops/s
Iteration  16: 365317.728 ops/s
Iteration  17: 363943.400 ops/s
Iteration  18: 357249.911 ops/s
Iteration  19: 351287.882 ops/s
Iteration  20: 355537.069 ops/s
Iteration  21: 352753.236 ops/s
Iteration  22: 360534.576 ops/s
Iteration  23: 358262.425 ops/s
Iteration  24: 355216.792 ops/s
Iteration  25: 360245.281 ops/s
Iteration  26: 373524.580 ops/s
Iteration  27: 375075.808 ops/s
Iteration  28: 370476.956 ops/s
Iteration  29: 360949.697 ops/s
Iteration  30: 356730.118 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_take":
  363434.421 ±(99.9%) 4819.814 ops/s [Average]
  (min, avg, max) = (351287.882, 363434.421, 375075.808), stdev = 7214.071
  CI (99.9%): [358614.607, 368254.235] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_take  thrpt   30  363434.421 ± 4819.814  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 266644.557 ops/s
# Warmup Iteration   2: 475646.065 ops/s
# Warmup Iteration   3: 520880.306 ops/s
# Warmup Iteration   4: 519881.158 ops/s
# Warmup Iteration   5: 527534.031 ops/s
# Warmup Iteration   6: 449628.702 ops/s
# Warmup Iteration   7: 537615.912 ops/s
# Warmup Iteration   8: 525500.251 ops/s
# Warmup Iteration   9: 546380.337 ops/s
# Warmup Iteration  10: 543566.282 ops/s
# Warmup Iteration  11: 539663.804 ops/s
# Warmup Iteration  12: 523373.340 ops/s
# Warmup Iteration  13: 523301.755 ops/s
# Warmup Iteration  14: 534415.005 ops/s
# Warmup Iteration  15: 520417.805 ops/s
# Warmup Iteration  16: 519949.177 ops/s
# Warmup Iteration  17: 542899.241 ops/s
# Warmup Iteration  18: 523776.259 ops/s
# Warmup Iteration  19: 536981.591 ops/s
# Warmup Iteration  20: 526144.946 ops/s
# Warmup Iteration  21: 529144.182 ops/s
# Warmup Iteration  22: 529734.606 ops/s
# Warmup Iteration  23: 529185.796 ops/s
# Warmup Iteration  24: 526189.990 ops/s
# Warmup Iteration  25: 524304.980 ops/s
# Warmup Iteration  26: 525223.195 ops/s
# Warmup Iteration  27: 534365.545 ops/s
# Warmup Iteration  28: 539528.980 ops/s
# Warmup Iteration  29: 542390.401 ops/s
# Warmup Iteration  30: 528876.732 ops/s
Iteration   1: 532857.448 ops/s
Iteration   2: 533989.524 ops/s
Iteration   3: 529555.139 ops/s
Iteration   4: 525831.491 ops/s
Iteration   5: 527050.292 ops/s
Iteration   6: 524717.950 ops/s
Iteration   7: 551213.771 ops/s
Iteration   8: 552015.455 ops/s
Iteration   9: 542123.284 ops/s
Iteration  10: 522914.987 ops/s
Iteration  11: 520578.798 ops/s
Iteration  12: 522758.893 ops/s
Iteration  13: 530866.351 ops/s
Iteration  14: 533720.752 ops/s
Iteration  15: 548274.112 ops/s
Iteration  16: 553158.476 ops/s
Iteration  17: 554531.654 ops/s
Iteration  18: 552157.889 ops/s
Iteration  19: 553539.282 ops/s
Iteration  20: 552843.517 ops/s
Iteration  21: 553493.187 ops/s
Iteration  22: 552920.738 ops/s
Iteration  23: 552078.208 ops/s
Iteration  24: 553388.141 ops/s
Iteration  25: 551826.286 ops/s
Iteration  26: 553965.568 ops/s
Iteration  27: 553075.212 ops/s
Iteration  28: 553495.810 ops/s
Iteration  29: 551189.874 ops/s
Iteration  30: 528823.457 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_takeWhile":
  542298.518 ±(99.9%) 8382.144 ops/s [Average]
  (min, avg, max) = (520578.798, 542298.518, 554531.654), stdev = 12545.999
  CI (99.9%): [533916.375, 550680.662] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_takeWhile  thrpt   30  542298.518 ± 8382.144  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 560581.255 ops/s
# Warmup Iteration   2: 616107.729 ops/s
# Warmup Iteration   3: 841117.075 ops/s
# Warmup Iteration   4: 849682.889 ops/s
# Warmup Iteration   5: 828901.807 ops/s
# Warmup Iteration   6: 832890.314 ops/s
# Warmup Iteration   7: 827374.211 ops/s
# Warmup Iteration   8: 831913.194 ops/s
# Warmup Iteration   9: 847406.549 ops/s
# Warmup Iteration  10: 756555.373 ops/s
# Warmup Iteration  11: 792805.502 ops/s
# Warmup Iteration  12: 845322.263 ops/s
# Warmup Iteration  13: 826141.697 ops/s
# Warmup Iteration  14: 833283.854 ops/s
# Warmup Iteration  15: 851127.023 ops/s
# Warmup Iteration  16: 836064.917 ops/s
# Warmup Iteration  17: 882527.466 ops/s
# Warmup Iteration  18: 882466.526 ops/s
# Warmup Iteration  19: 883578.638 ops/s
# Warmup Iteration  20: 873556.729 ops/s
# Warmup Iteration  21: 884456.675 ops/s
# Warmup Iteration  22: 882638.145 ops/s
# Warmup Iteration  23: 883234.412 ops/s
# Warmup Iteration  24: 885385.619 ops/s
# Warmup Iteration  25: 891311.332 ops/s
# Warmup Iteration  26: 895790.435 ops/s
# Warmup Iteration  27: 893052.563 ops/s
# Warmup Iteration  28: 867192.941 ops/s
# Warmup Iteration  29: 896684.362 ops/s
# Warmup Iteration  30: 893042.206 ops/s
Iteration   1: 887575.507 ops/s
Iteration   2: 894854.004 ops/s
Iteration   3: 884202.765 ops/s
Iteration   4: 868908.799 ops/s
Iteration   5: 920282.732 ops/s
Iteration   6: 897027.087 ops/s
Iteration   7: 880386.554 ops/s
Iteration   8: 883737.436 ops/s
Iteration   9: 869547.891 ops/s
Iteration  10: 892924.922 ops/s
Iteration  11: 926939.630 ops/s
Iteration  12: 899738.945 ops/s
Iteration  13: 883841.123 ops/s
Iteration  14: 881753.995 ops/s
Iteration  15: 876557.524 ops/s
Iteration  16: 881531.296 ops/s
Iteration  17: 880812.146 ops/s
Iteration  18: 888852.490 ops/s
Iteration  19: 875317.702 ops/s
Iteration  20: 891739.965 ops/s
Iteration  21: 884174.243 ops/s
Iteration  22: 893798.379 ops/s
Iteration  23: 886506.067 ops/s
Iteration  24: 890049.940 ops/s
Iteration  25: 890662.728 ops/s
Iteration  26: 871377.100 ops/s
Iteration  27: 885519.090 ops/s
Iteration  28: 872302.465 ops/s
Iteration  29: 888426.563 ops/s
Iteration  30: 875454.317 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_take_throws":
  886826.780 ±(99.9%) 8602.610 ops/s [Average]
  (min, avg, max) = (868908.799, 886826.780, 926939.630), stdev = 12875.982
  CI (99.9%): [878224.170, 895429.390] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_take_throws  thrpt   30  886826.780 ± 8602.610  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 664176.984 ops/s
# Warmup Iteration   2: 1172501.659 ops/s
# Warmup Iteration   3: 1321924.045 ops/s
# Warmup Iteration   4: 1336944.411 ops/s
# Warmup Iteration   5: 1311880.884 ops/s
# Warmup Iteration   6: 1095593.818 ops/s
# Warmup Iteration   7: 1385725.153 ops/s
# Warmup Iteration   8: 1404653.298 ops/s
# Warmup Iteration   9: 1404517.420 ops/s
# Warmup Iteration  10: 1404283.786 ops/s
# Warmup Iteration  11: 1404216.143 ops/s
# Warmup Iteration  12: 1404820.819 ops/s
# Warmup Iteration  13: 1403982.218 ops/s
# Warmup Iteration  14: 1401015.779 ops/s
# Warmup Iteration  15: 1388334.062 ops/s
# Warmup Iteration  16: 1384223.247 ops/s
# Warmup Iteration  17: 1327569.923 ops/s
# Warmup Iteration  18: 1336280.344 ops/s
# Warmup Iteration  19: 1339766.890 ops/s
# Warmup Iteration  20: 1305588.644 ops/s
# Warmup Iteration  21: 1333932.210 ops/s
# Warmup Iteration  22: 1340152.267 ops/s
# Warmup Iteration  23: 1324844.362 ops/s
# Warmup Iteration  24: 1347649.791 ops/s
# Warmup Iteration  25: 1343368.921 ops/s
# Warmup Iteration  26: 1332771.834 ops/s
# Warmup Iteration  27: 1397054.863 ops/s
# Warmup Iteration  28: 1359342.389 ops/s
# Warmup Iteration  29: 1346488.892 ops/s
# Warmup Iteration  30: 1377995.867 ops/s
Iteration   1: 1358124.390 ops/s
Iteration   2: 1368634.973 ops/s
Iteration   3: 1364196.772 ops/s
Iteration   4: 1338428.505 ops/s
Iteration   5: 1389659.710 ops/s
Iteration   6: 1377416.166 ops/s
Iteration   7: 1373007.587 ops/s
Iteration   8: 1369141.199 ops/s
Iteration   9: 1346258.480 ops/s
Iteration  10: 1346962.952 ops/s
Iteration  11: 1334541.507 ops/s
Iteration  12: 1341072.679 ops/s
Iteration  13: 1332193.682 ops/s
Iteration  14: 1334015.574 ops/s
Iteration  15: 1319105.636 ops/s
Iteration  16: 1334503.708 ops/s
Iteration  17: 1330553.603 ops/s
Iteration  18: 1341451.805 ops/s
Iteration  19: 1318482.882 ops/s
Iteration  20: 1312080.544 ops/s
Iteration  21: 1313162.098 ops/s
Iteration  22: 1361389.254 ops/s
Iteration  23: 1383440.070 ops/s
Iteration  24: 1351413.822 ops/s
Iteration  25: 1317103.767 ops/s
Iteration  26: 1320798.421 ops/s
Iteration  27: 1329694.729 ops/s
Iteration  28: 1349002.932 ops/s
Iteration  29: 1322489.238 ops/s
Iteration  30: 1324923.511 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_tap":
  1343441.673 ±(99.9%) 14685.379 ops/s [Average]
  (min, avg, max) = (1312080.544, 1343441.673, 1389659.710), stdev = 21980.386
  CI (99.9%): [1328756.294, 1358127.053] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_tap  thrpt   30  1343441.673 ± 14685.379  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testAsUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testAsUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2773504.178 ops/s
# Warmup Iteration   2: 4121736.705 ops/s
# Warmup Iteration   3: 4914876.215 ops/s
# Warmup Iteration   4: 4938849.716 ops/s
# Warmup Iteration   5: 4940267.761 ops/s
# Warmup Iteration   6: 4919365.749 ops/s
# Warmup Iteration   7: 4020405.834 ops/s
# Warmup Iteration   8: 4917387.375 ops/s
# Warmup Iteration   9: 4952904.726 ops/s
# Warmup Iteration  10: 4887021.841 ops/s
# Warmup Iteration  11: 4962359.157 ops/s
# Warmup Iteration  12: 4922990.171 ops/s
# Warmup Iteration  13: 4925557.609 ops/s
# Warmup Iteration  14: 4925283.242 ops/s
# Warmup Iteration  15: 4889693.304 ops/s
# Warmup Iteration  16: 5120065.386 ops/s
# Warmup Iteration  17: 4917243.967 ops/s
# Warmup Iteration  18: 4915454.448 ops/s
# Warmup Iteration  19: 4987061.924 ops/s
# Warmup Iteration  20: 4952536.786 ops/s
# Warmup Iteration  21: 5041410.370 ops/s
# Warmup Iteration  22: 5227909.014 ops/s
# Warmup Iteration  23: 5227797.621 ops/s
# Warmup Iteration  24: 5230459.484 ops/s
# Warmup Iteration  25: 5225145.491 ops/s
# Warmup Iteration  26: 5228720.075 ops/s
# Warmup Iteration  27: 5228361.443 ops/s
# Warmup Iteration  28: 5207267.335 ops/s
# Warmup Iteration  29: 4974275.653 ops/s
# Warmup Iteration  30: 5029869.699 ops/s
Iteration   1: 4959858.728 ops/s
Iteration   2: 5083763.610 ops/s
Iteration   3: 5024572.739 ops/s
Iteration   4: 4927439.597 ops/s
Iteration   5: 4990482.674 ops/s
Iteration   6: 4942344.798 ops/s
Iteration   7: 5001049.533 ops/s
Iteration   8: 4977102.749 ops/s
Iteration   9: 4929248.885 ops/s
Iteration  10: 4918443.023 ops/s
Iteration  11: 4876420.281 ops/s
Iteration  12: 4991062.853 ops/s
Iteration  13: 4895366.512 ops/s
Iteration  14: 4879660.472 ops/s
Iteration  15: 4941013.032 ops/s
Iteration  16: 4959888.609 ops/s
Iteration  17: 4956156.989 ops/s
Iteration  18: 4949525.294 ops/s
Iteration  19: 4991005.902 ops/s
Iteration  20: 5054500.575 ops/s
Iteration  21: 4890969.570 ops/s
Iteration  22: 4933778.128 ops/s
Iteration  23: 4940428.425 ops/s
Iteration  24: 4904119.497 ops/s
Iteration  25: 4897311.939 ops/s
Iteration  26: 4911521.090 ops/s
Iteration  27: 4908769.375 ops/s
Iteration  28: 4974003.711 ops/s
Iteration  29: 4913309.439 ops/s
Iteration  30: 4940394.175 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testAsUnmodifiable":
  4948783.740 ±(99.9%) 33347.280 ops/s [Average]
  (min, avg, max) = (4876420.281, 4948783.740, 5083763.610), stdev = 49912.642
  CI (99.9%): [4915436.461, 4982131.020] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_testAsUnmodifiable  thrpt   30  4948783.740 ± 33347.280  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testClone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testClone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 894298.055 ops/s
# Warmup Iteration   2: 1619015.337 ops/s
# Warmup Iteration   3: 1875973.352 ops/s
# Warmup Iteration   4: 1878958.952 ops/s
# Warmup Iteration   5: 1889647.315 ops/s
# Warmup Iteration   6: 1567161.981 ops/s
# Warmup Iteration   7: 1878272.413 ops/s
# Warmup Iteration   8: 1900565.655 ops/s
# Warmup Iteration   9: 1923247.134 ops/s
# Warmup Iteration  10: 1888413.057 ops/s
# Warmup Iteration  11: 1908708.849 ops/s
# Warmup Iteration  12: 1893604.506 ops/s
# Warmup Iteration  13: 1897547.574 ops/s
# Warmup Iteration  14: 1899889.084 ops/s
# Warmup Iteration  15: 1898257.384 ops/s
# Warmup Iteration  16: 1906616.260 ops/s
# Warmup Iteration  17: 1871610.608 ops/s
# Warmup Iteration  18: 1914178.243 ops/s
# Warmup Iteration  19: 1896201.306 ops/s
# Warmup Iteration  20: 1900528.481 ops/s
# Warmup Iteration  21: 1922725.064 ops/s
# Warmup Iteration  22: 1907597.786 ops/s
# Warmup Iteration  23: 1890372.984 ops/s
# Warmup Iteration  24: 1903794.052 ops/s
# Warmup Iteration  25: 1909824.878 ops/s
# Warmup Iteration  26: 1893031.517 ops/s
# Warmup Iteration  27: 1879794.463 ops/s
# Warmup Iteration  28: 1895861.771 ops/s
# Warmup Iteration  29: 1897825.271 ops/s
# Warmup Iteration  30: 1915966.174 ops/s
Iteration   1: 1879957.558 ops/s
Iteration   2: 1926927.906 ops/s
Iteration   3: 1880701.860 ops/s
Iteration   4: 1831696.451 ops/s
Iteration   5: 1946191.767 ops/s
Iteration   6: 1906319.693 ops/s
Iteration   7: 1886300.858 ops/s
Iteration   8: 1859571.085 ops/s
Iteration   9: 1890552.899 ops/s
Iteration  10: 1897145.489 ops/s
Iteration  11: 1962565.029 ops/s
Iteration  12: 2007209.807 ops/s
Iteration  13: 2002899.933 ops/s
Iteration  14: 2008222.778 ops/s
Iteration  15: 2004868.308 ops/s
Iteration  16: 2005914.586 ops/s
Iteration  17: 2009108.732 ops/s
Iteration  18: 2006065.896 ops/s
Iteration  19: 2004296.968 ops/s
Iteration  20: 2004787.992 ops/s
Iteration  21: 2005037.647 ops/s
Iteration  22: 2004846.158 ops/s
Iteration  23: 1995326.461 ops/s
Iteration  24: 2009553.558 ops/s
Iteration  25: 2003916.945 ops/s
Iteration  26: 2004382.168 ops/s
Iteration  27: 1970611.450 ops/s
Iteration  28: 1887611.106 ops/s
Iteration  29: 1936949.533 ops/s
Iteration  30: 1949537.828 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testClone":
  1956302.615 ±(99.9%) 38010.080 ops/s [Average]
  (min, avg, max) = (1831696.451, 1956302.615, 2009553.558), stdev = 56891.702
  CI (99.9%): [1918292.535, 1994312.695] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_testClone  thrpt   30  1956302.615 ± 38010.080  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testNewCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testNewCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3672173.406 ops/s
# Warmup Iteration   2: 7790355.391 ops/s
# Warmup Iteration   3: 7832321.216 ops/s
# Warmup Iteration   4: 7132807.540 ops/s
# Warmup Iteration   5: 7213107.663 ops/s
# Warmup Iteration   6: 7821859.694 ops/s
# Warmup Iteration   7: 7866035.542 ops/s
# Warmup Iteration   8: 7920364.810 ops/s
# Warmup Iteration   9: 8062808.175 ops/s
# Warmup Iteration  10: 7900836.384 ops/s
# Warmup Iteration  11: 7874412.151 ops/s
# Warmup Iteration  12: 7793737.668 ops/s
# Warmup Iteration  13: 7898250.307 ops/s
# Warmup Iteration  14: 7760538.317 ops/s
# Warmup Iteration  15: 7931762.726 ops/s
# Warmup Iteration  16: 7941670.977 ops/s
# Warmup Iteration  17: 7880085.694 ops/s
# Warmup Iteration  18: 7899189.844 ops/s
# Warmup Iteration  19: 7879199.283 ops/s
# Warmup Iteration  20: 7902573.740 ops/s
# Warmup Iteration  21: 7804271.189 ops/s
# Warmup Iteration  22: 7884654.080 ops/s
# Warmup Iteration  23: 7836217.210 ops/s
# Warmup Iteration  24: 7802894.634 ops/s
# Warmup Iteration  25: 8001084.943 ops/s
# Warmup Iteration  26: 7958317.818 ops/s
# Warmup Iteration  27: 7850174.877 ops/s
# Warmup Iteration  28: 7886563.156 ops/s
# Warmup Iteration  29: 7873345.092 ops/s
# Warmup Iteration  30: 8029575.037 ops/s
Iteration   1: 7930981.884 ops/s
Iteration   2: 7845316.597 ops/s
Iteration   3: 7833672.253 ops/s
Iteration   4: 7779502.038 ops/s
Iteration   5: 7844152.307 ops/s
Iteration   6: 7894333.387 ops/s
Iteration   7: 7809710.023 ops/s
Iteration   8: 7850906.393 ops/s
Iteration   9: 8161837.606 ops/s
Iteration  10: 7791459.971 ops/s
Iteration  11: 7890263.942 ops/s
Iteration  12: 7843209.378 ops/s
Iteration  13: 7888753.702 ops/s
Iteration  14: 7830818.678 ops/s
Iteration  15: 7805161.125 ops/s
Iteration  16: 7846632.771 ops/s
Iteration  17: 7910787.854 ops/s
Iteration  18: 7924596.500 ops/s
Iteration  19: 7968090.291 ops/s
Iteration  20: 7700343.481 ops/s
Iteration  21: 7933351.759 ops/s
Iteration  22: 7835075.320 ops/s
Iteration  23: 7719347.445 ops/s
Iteration  24: 7961400.003 ops/s
Iteration  25: 7960212.438 ops/s
Iteration  26: 7837912.458 ops/s
Iteration  27: 7762219.439 ops/s
Iteration  28: 7722831.691 ops/s
Iteration  29: 7860338.534 ops/s
Iteration  30: 7885261.429 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testNewCollection":
  7860949.357 ±(99.9%) 60505.928 ops/s [Average]
  (min, avg, max) = (7700343.481, 7860949.357, 8161837.606), stdev = 90562.432
  CI (99.9%): [7800443.428, 7921455.285] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_testNewCollection  thrpt   30  7860949.357 ± 60505.928  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2166161.395 ops/s
# Warmup Iteration   2: 4878434.924 ops/s
# Warmup Iteration   3: 4194674.085 ops/s
# Warmup Iteration   4: 5081068.210 ops/s
# Warmup Iteration   5: 5307781.546 ops/s
# Warmup Iteration   6: 5305868.902 ops/s
# Warmup Iteration   7: 5308826.251 ops/s
# Warmup Iteration   8: 5307060.428 ops/s
# Warmup Iteration   9: 5309225.745 ops/s
# Warmup Iteration  10: 5303356.028 ops/s
# Warmup Iteration  11: 5311019.294 ops/s
# Warmup Iteration  12: 5208227.297 ops/s
# Warmup Iteration  13: 5028888.802 ops/s
# Warmup Iteration  14: 5034338.625 ops/s
# Warmup Iteration  15: 5062633.430 ops/s
# Warmup Iteration  16: 5059187.254 ops/s
# Warmup Iteration  17: 5030487.158 ops/s
# Warmup Iteration  18: 5008422.436 ops/s
# Warmup Iteration  19: 4958434.417 ops/s
# Warmup Iteration  20: 5117854.955 ops/s
# Warmup Iteration  21: 5049660.398 ops/s
# Warmup Iteration  22: 5105456.479 ops/s
# Warmup Iteration  23: 5018150.284 ops/s
# Warmup Iteration  24: 5079904.348 ops/s
# Warmup Iteration  25: 4937079.172 ops/s
# Warmup Iteration  26: 5040615.842 ops/s
# Warmup Iteration  27: 5043816.175 ops/s
# Warmup Iteration  28: 5308382.707 ops/s
# Warmup Iteration  29: 5240468.729 ops/s
# Warmup Iteration  30: 5033800.378 ops/s
Iteration   1: 5014287.688 ops/s
Iteration   2: 5002737.358 ops/s
Iteration   3: 5058086.400 ops/s
Iteration   4: 5040068.159 ops/s
Iteration   5: 4993548.676 ops/s
Iteration   6: 5025562.655 ops/s
Iteration   7: 5095182.125 ops/s
Iteration   8: 5167353.922 ops/s
Iteration   9: 5032583.473 ops/s
Iteration  10: 5047439.089 ops/s
Iteration  11: 4944520.125 ops/s
Iteration  12: 5039421.162 ops/s
Iteration  13: 4995787.723 ops/s
Iteration  14: 5006616.464 ops/s
Iteration  15: 4991176.573 ops/s
Iteration  16: 5049198.866 ops/s
Iteration  17: 5185519.676 ops/s
Iteration  18: 4948097.432 ops/s
Iteration  19: 5149224.441 ops/s
Iteration  20: 5249806.721 ops/s
Iteration  21: 5013469.764 ops/s
Iteration  22: 5156782.658 ops/s
Iteration  23: 4926518.144 ops/s
Iteration  24: 5149429.620 ops/s
Iteration  25: 5320161.790 ops/s
Iteration  26: 5059146.840 ops/s
Iteration  27: 5014536.302 ops/s
Iteration  28: 5034597.120 ops/s
Iteration  29: 5012291.502 ops/s
Iteration  30: 5000317.572 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testNewWith":
  5057449.001 ±(99.9%) 60306.629 ops/s [Average]
  (min, avg, max) = (4926518.144, 5057449.001, 5320161.790), stdev = 90264.130
  CI (99.9%): [4997142.373, 5117755.630] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_testNewWith  thrpt   30  5057449.001 ± 60306.629  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testNewWithVarArgs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testNewWithVarArgs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1379240.250 ops/s
# Warmup Iteration   2: 3133088.232 ops/s
# Warmup Iteration   3: 2682716.933 ops/s
# Warmup Iteration   4: 3084898.516 ops/s
# Warmup Iteration   5: 3141472.595 ops/s
# Warmup Iteration   6: 3216376.619 ops/s
# Warmup Iteration   7: 3226811.109 ops/s
# Warmup Iteration   8: 3159463.732 ops/s
# Warmup Iteration   9: 3114781.374 ops/s
# Warmup Iteration  10: 3175121.867 ops/s
# Warmup Iteration  11: 3167660.857 ops/s
# Warmup Iteration  12: 3165602.883 ops/s
# Warmup Iteration  13: 3180755.001 ops/s
# Warmup Iteration  14: 3160242.335 ops/s
# Warmup Iteration  15: 3132157.161 ops/s
# Warmup Iteration  16: 3137104.958 ops/s
# Warmup Iteration  17: 3152217.607 ops/s
# Warmup Iteration  18: 3170234.613 ops/s
# Warmup Iteration  19: 3236103.371 ops/s
# Warmup Iteration  20: 3338279.195 ops/s
# Warmup Iteration  21: 3340244.868 ops/s
# Warmup Iteration  22: 3345304.823 ops/s
# Warmup Iteration  23: 3329946.092 ops/s
# Warmup Iteration  24: 3332369.593 ops/s
# Warmup Iteration  25: 3332541.302 ops/s
# Warmup Iteration  26: 3253672.613 ops/s
# Warmup Iteration  27: 3153313.932 ops/s
# Warmup Iteration  28: 3212408.580 ops/s
# Warmup Iteration  29: 3191379.218 ops/s
# Warmup Iteration  30: 3203009.798 ops/s
Iteration   1: 3169331.810 ops/s
Iteration   2: 3167118.161 ops/s
Iteration   3: 3175866.569 ops/s
Iteration   4: 3148691.475 ops/s
Iteration   5: 3099320.054 ops/s
Iteration   6: 3119936.209 ops/s
Iteration   7: 3102639.232 ops/s
Iteration   8: 3141063.366 ops/s
Iteration   9: 3271748.798 ops/s
Iteration  10: 3321122.560 ops/s
Iteration  11: 3297681.297 ops/s
Iteration  12: 3182913.337 ops/s
Iteration  13: 3171902.860 ops/s
Iteration  14: 3224309.929 ops/s
Iteration  15: 3233814.516 ops/s
Iteration  16: 3162684.287 ops/s
Iteration  17: 3180227.106 ops/s
Iteration  18: 3162433.346 ops/s
Iteration  19: 3147832.204 ops/s
Iteration  20: 3118924.582 ops/s
Iteration  21: 3195338.896 ops/s
Iteration  22: 3188937.174 ops/s
Iteration  23: 3162065.921 ops/s
Iteration  24: 3241531.643 ops/s
Iteration  25: 3339572.878 ops/s
Iteration  26: 3331748.373 ops/s
Iteration  27: 3302542.402 ops/s
Iteration  28: 3150159.761 ops/s
Iteration  29: 3210275.285 ops/s
Iteration  30: 3300516.402 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testNewWithVarArgs":
  3200741.681 ±(99.9%) 46872.980 ops/s [Average]
  (min, avg, max) = (3099320.054, 3200741.681, 3339572.878), stdev = 70157.276
  CI (99.9%): [3153868.701, 3247614.662] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_testNewWithVarArgs  thrpt   30  3200741.681 ± 46872.980  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testNewWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testNewWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1772665.184 ops/s
# Warmup Iteration   2: 4162421.893 ops/s
# Warmup Iteration   3: 3530145.048 ops/s
# Warmup Iteration   4: 4234919.213 ops/s
# Warmup Iteration   5: 4230157.680 ops/s
# Warmup Iteration   6: 4220700.955 ops/s
# Warmup Iteration   7: 4270610.818 ops/s
# Warmup Iteration   8: 4256929.068 ops/s
# Warmup Iteration   9: 4246914.429 ops/s
# Warmup Iteration  10: 4328844.879 ops/s
# Warmup Iteration  11: 4275680.398 ops/s
# Warmup Iteration  12: 4203721.812 ops/s
# Warmup Iteration  13: 4247012.779 ops/s
# Warmup Iteration  14: 4243091.152 ops/s
# Warmup Iteration  15: 4251869.719 ops/s
# Warmup Iteration  16: 4250392.247 ops/s
# Warmup Iteration  17: 4204310.461 ops/s
# Warmup Iteration  18: 4216299.676 ops/s
# Warmup Iteration  19: 4255393.180 ops/s
# Warmup Iteration  20: 4267376.839 ops/s
# Warmup Iteration  21: 4287874.192 ops/s
# Warmup Iteration  22: 4241594.058 ops/s
# Warmup Iteration  23: 4369011.843 ops/s
# Warmup Iteration  24: 4247359.267 ops/s
# Warmup Iteration  25: 4352511.642 ops/s
# Warmup Iteration  26: 4414455.547 ops/s
# Warmup Iteration  27: 4166235.335 ops/s
# Warmup Iteration  28: 4178526.594 ops/s
# Warmup Iteration  29: 4166846.653 ops/s
# Warmup Iteration  30: 4278186.463 ops/s
Iteration   1: 4305824.455 ops/s
Iteration   2: 4281616.160 ops/s
Iteration   3: 4275794.265 ops/s
Iteration   4: 4265265.098 ops/s
Iteration   5: 4272362.818 ops/s
Iteration   6: 4404676.604 ops/s
Iteration   7: 4440749.692 ops/s
Iteration   8: 4437157.035 ops/s
Iteration   9: 4445908.918 ops/s
Iteration  10: 4446148.766 ops/s
Iteration  11: 4413723.340 ops/s
Iteration  12: 4414131.477 ops/s
Iteration  13: 4431686.913 ops/s
Iteration  14: 4432322.872 ops/s
Iteration  15: 4423258.815 ops/s
Iteration  16: 4418187.663 ops/s
Iteration  17: 4441963.012 ops/s
Iteration  18: 4469202.889 ops/s
Iteration  19: 4438563.130 ops/s
Iteration  20: 4426104.634 ops/s
Iteration  21: 4290772.713 ops/s
Iteration  22: 4234960.273 ops/s
Iteration  23: 4335116.977 ops/s
Iteration  24: 4385525.757 ops/s
Iteration  25: 4262211.405 ops/s
Iteration  26: 4415108.496 ops/s
Iteration  27: 4343838.426 ops/s
Iteration  28: 4258083.531 ops/s
Iteration  29: 4296822.693 ops/s
Iteration  30: 4260642.242 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testNewWithWith":
  4365591.036 ±(99.9%) 51562.042 ops/s [Average]
  (min, avg, max) = (4234960.273, 4365591.036, 4469202.889), stdev = 77175.643
  CI (99.9%): [4314028.993, 4417153.078] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_testNewWithWith  thrpt   30  4365591.036 ± 51562.042  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testNewWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testNewWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1500356.414 ops/s
# Warmup Iteration   2: 3562215.281 ops/s
# Warmup Iteration   3: 3043069.065 ops/s
# Warmup Iteration   4: 3598547.962 ops/s
# Warmup Iteration   5: 3638152.051 ops/s
# Warmup Iteration   6: 3622319.717 ops/s
# Warmup Iteration   7: 3644806.457 ops/s
# Warmup Iteration   8: 3695132.732 ops/s
# Warmup Iteration   9: 3680206.681 ops/s
# Warmup Iteration  10: 3644795.106 ops/s
# Warmup Iteration  11: 3686088.331 ops/s
# Warmup Iteration  12: 3651253.775 ops/s
# Warmup Iteration  13: 3575370.044 ops/s
# Warmup Iteration  14: 3621770.833 ops/s
# Warmup Iteration  15: 3653264.580 ops/s
# Warmup Iteration  16: 3638766.737 ops/s
# Warmup Iteration  17: 3658593.864 ops/s
# Warmup Iteration  18: 3631407.992 ops/s
# Warmup Iteration  19: 3681883.779 ops/s
# Warmup Iteration  20: 3758796.387 ops/s
# Warmup Iteration  21: 3708567.762 ops/s
# Warmup Iteration  22: 3677467.447 ops/s
# Warmup Iteration  23: 3716906.296 ops/s
# Warmup Iteration  24: 3638090.449 ops/s
# Warmup Iteration  25: 3651141.920 ops/s
# Warmup Iteration  26: 3604830.783 ops/s
# Warmup Iteration  27: 3595451.252 ops/s
# Warmup Iteration  28: 3630987.246 ops/s
# Warmup Iteration  29: 3669359.545 ops/s
# Warmup Iteration  30: 3690058.628 ops/s
Iteration   1: 3603963.474 ops/s
Iteration   2: 3683727.151 ops/s
Iteration   3: 3642960.494 ops/s
Iteration   4: 3673845.951 ops/s
Iteration   5: 3733298.126 ops/s
Iteration   6: 3637885.426 ops/s
Iteration   7: 3637220.710 ops/s
Iteration   8: 3684539.610 ops/s
Iteration   9: 3569711.937 ops/s
Iteration  10: 3600215.354 ops/s
Iteration  11: 3657454.003 ops/s
Iteration  12: 3768977.398 ops/s
Iteration  13: 3606543.347 ops/s
Iteration  14: 3623453.479 ops/s
Iteration  15: 3626468.551 ops/s
Iteration  16: 3610360.663 ops/s
Iteration  17: 3622297.750 ops/s
Iteration  18: 3625742.822 ops/s
Iteration  19: 3588371.479 ops/s
Iteration  20: 3638415.057 ops/s
Iteration  21: 3689818.855 ops/s
Iteration  22: 3720907.365 ops/s
Iteration  23: 3771683.916 ops/s
Iteration  24: 3644580.085 ops/s
Iteration  25: 3670175.035 ops/s
Iteration  26: 3630114.485 ops/s
Iteration  27: 3665876.096 ops/s
Iteration  28: 3714418.845 ops/s
Iteration  29: 3643351.714 ops/s
Iteration  30: 3662472.878 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testNewWithWithWith":
  3654961.735 ±(99.9%) 33191.657 ops/s [Average]
  (min, avg, max) = (3569711.937, 3654961.735, 3771683.916), stdev = 49679.713
  CI (99.9%): [3621770.078, 3688153.392] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_testNewWithWithWith  thrpt   30  3654961.735 ± 33191.657  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 343209.843 ops/s
# Warmup Iteration   2: 650635.577 ops/s
# Warmup Iteration   3: 734322.794 ops/s
# Warmup Iteration   4: 738527.749 ops/s
# Warmup Iteration   5: 653080.171 ops/s
# Warmup Iteration   6: 706227.535 ops/s
# Warmup Iteration   7: 738076.463 ops/s
# Warmup Iteration   8: 738257.641 ops/s
# Warmup Iteration   9: 738359.472 ops/s
# Warmup Iteration  10: 729609.648 ops/s
# Warmup Iteration  11: 709665.905 ops/s
# Warmup Iteration  12: 709473.932 ops/s
# Warmup Iteration  13: 717814.609 ops/s
# Warmup Iteration  14: 700184.016 ops/s
# Warmup Iteration  15: 708034.743 ops/s
# Warmup Iteration  16: 705049.861 ops/s
# Warmup Iteration  17: 700735.138 ops/s
# Warmup Iteration  18: 701641.939 ops/s
# Warmup Iteration  19: 714289.031 ops/s
# Warmup Iteration  20: 705944.990 ops/s
# Warmup Iteration  21: 698521.317 ops/s
# Warmup Iteration  22: 719239.877 ops/s
# Warmup Iteration  23: 707362.306 ops/s
# Warmup Iteration  24: 687042.676 ops/s
# Warmup Iteration  25: 706803.031 ops/s
# Warmup Iteration  26: 704672.842 ops/s
# Warmup Iteration  27: 697273.707 ops/s
# Warmup Iteration  28: 702224.172 ops/s
# Warmup Iteration  29: 703347.992 ops/s
# Warmup Iteration  30: 702314.687 ops/s
Iteration   1: 700234.156 ops/s
Iteration   2: 707996.907 ops/s
Iteration   3: 705012.598 ops/s
Iteration   4: 697207.674 ops/s
Iteration   5: 710099.290 ops/s
Iteration   6: 722774.188 ops/s
Iteration   7: 712934.937 ops/s
Iteration   8: 704833.341 ops/s
Iteration   9: 710528.929 ops/s
Iteration  10: 698313.439 ops/s
Iteration  11: 709149.254 ops/s
Iteration  12: 702582.620 ops/s
Iteration  13: 707256.605 ops/s
Iteration  14: 694296.010 ops/s
Iteration  15: 699564.599 ops/s
Iteration  16: 698954.548 ops/s
Iteration  17: 702895.193 ops/s
Iteration  18: 715772.896 ops/s
Iteration  19: 694754.339 ops/s
Iteration  20: 703490.555 ops/s
Iteration  21: 701261.929 ops/s
Iteration  22: 702432.814 ops/s
Iteration  23: 701054.704 ops/s
Iteration  24: 700626.932 ops/s
Iteration  25: 722244.592 ops/s
Iteration  26: 696954.847 ops/s
Iteration  27: 705318.702 ops/s
Iteration  28: 701261.799 ops/s
Iteration  29: 701612.470 ops/s
Iteration  30: 716186.304 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_testToString":
  704920.239 ±(99.9%) 4926.840 ops/s [Average]
  (min, avg, max) = (694296.010, 704920.239, 722774.188), stdev = 7374.263
  CI (99.9%): [699993.399, 709847.079] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_testToString  thrpt   30  704920.239 ± 4926.840  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 362730.385 ops/s
# Warmup Iteration   2: 660222.759 ops/s
# Warmup Iteration   3: 724008.190 ops/s
# Warmup Iteration   4: 722618.596 ops/s
# Warmup Iteration   5: 731425.396 ops/s
# Warmup Iteration   6: 626151.447 ops/s
# Warmup Iteration   7: 719548.873 ops/s
# Warmup Iteration   8: 733066.181 ops/s
# Warmup Iteration   9: 723289.978 ops/s
# Warmup Iteration  10: 727227.355 ops/s
# Warmup Iteration  11: 734397.830 ops/s
# Warmup Iteration  12: 724176.919 ops/s
# Warmup Iteration  13: 722007.797 ops/s
# Warmup Iteration  14: 730655.161 ops/s
# Warmup Iteration  15: 741243.280 ops/s
# Warmup Iteration  16: 730014.058 ops/s
# Warmup Iteration  17: 749036.788 ops/s
# Warmup Iteration  18: 762016.825 ops/s
# Warmup Iteration  19: 762087.550 ops/s
# Warmup Iteration  20: 762929.318 ops/s
# Warmup Iteration  21: 760320.519 ops/s
# Warmup Iteration  22: 761246.917 ops/s
# Warmup Iteration  23: 752310.894 ops/s
# Warmup Iteration  24: 753309.871 ops/s
# Warmup Iteration  25: 750386.050 ops/s
# Warmup Iteration  26: 752129.925 ops/s
# Warmup Iteration  27: 750418.257 ops/s
# Warmup Iteration  28: 752369.260 ops/s
# Warmup Iteration  29: 745107.187 ops/s
# Warmup Iteration  30: 740471.626 ops/s
Iteration   1: 744783.112 ops/s
Iteration   2: 742954.227 ops/s
Iteration   3: 742073.464 ops/s
Iteration   4: 752516.998 ops/s
Iteration   5: 757737.228 ops/s
Iteration   6: 756185.524 ops/s
Iteration   7: 748241.139 ops/s
Iteration   8: 760005.497 ops/s
Iteration   9: 761566.493 ops/s
Iteration  10: 762431.266 ops/s
Iteration  11: 750621.155 ops/s
Iteration  12: 746937.694 ops/s
Iteration  13: 727602.969 ops/s
Iteration  14: 726683.817 ops/s
Iteration  15: 720792.307 ops/s
Iteration  16: 718747.841 ops/s
Iteration  17: 735939.683 ops/s
Iteration  18: 733111.063 ops/s
Iteration  19: 736117.629 ops/s
Iteration  20: 725762.576 ops/s
Iteration  21: 725565.566 ops/s
Iteration  22: 717853.547 ops/s
Iteration  23: 720430.675 ops/s
Iteration  24: 731397.445 ops/s
Iteration  25: 721842.053 ops/s
Iteration  26: 724201.037 ops/s
Iteration  27: 718204.715 ops/s
Iteration  28: 719163.835 ops/s
Iteration  29: 733119.578 ops/s
Iteration  30: 735849.309 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toArray":
  736614.648 ±(99.9%) 9741.200 ops/s [Average]
  (min, avg, max) = (717853.547, 736614.648, 762431.266), stdev = 14580.170
  CI (99.9%): [726873.448, 746355.848] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toArray  thrpt   30  736614.648 ± 9741.200  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 363782.004 ops/s
# Warmup Iteration   2: 619979.966 ops/s
# Warmup Iteration   3: 743302.139 ops/s
# Warmup Iteration   4: 765442.372 ops/s
# Warmup Iteration   5: 762725.689 ops/s
# Warmup Iteration   6: 652184.799 ops/s
# Warmup Iteration   7: 722406.446 ops/s
# Warmup Iteration   8: 772275.721 ops/s
# Warmup Iteration   9: 764352.232 ops/s
# Warmup Iteration  10: 745226.989 ops/s
# Warmup Iteration  11: 761853.441 ops/s
# Warmup Iteration  12: 749502.952 ops/s
# Warmup Iteration  13: 757152.605 ops/s
# Warmup Iteration  14: 747514.470 ops/s
# Warmup Iteration  15: 753080.850 ops/s
# Warmup Iteration  16: 757011.327 ops/s
# Warmup Iteration  17: 756625.854 ops/s
# Warmup Iteration  18: 738004.150 ops/s
# Warmup Iteration  19: 758905.452 ops/s
# Warmup Iteration  20: 761279.645 ops/s
# Warmup Iteration  21: 785511.123 ops/s
# Warmup Iteration  22: 756111.360 ops/s
# Warmup Iteration  23: 746798.286 ops/s
# Warmup Iteration  24: 757408.956 ops/s
# Warmup Iteration  25: 740936.040 ops/s
# Warmup Iteration  26: 775051.479 ops/s
# Warmup Iteration  27: 769505.682 ops/s
# Warmup Iteration  28: 784677.048 ops/s
# Warmup Iteration  29: 757326.703 ops/s
# Warmup Iteration  30: 760984.629 ops/s
Iteration   1: 776899.784 ops/s
Iteration   2: 774771.634 ops/s
Iteration   3: 798662.803 ops/s
Iteration   4: 797105.275 ops/s
Iteration   5: 798465.013 ops/s
Iteration   6: 795983.730 ops/s
Iteration   7: 798180.190 ops/s
Iteration   8: 797325.650 ops/s
Iteration   9: 798837.493 ops/s
Iteration  10: 796893.124 ops/s
Iteration  11: 797094.214 ops/s
Iteration  12: 798925.530 ops/s
Iteration  13: 796378.305 ops/s
Iteration  14: 798049.869 ops/s
Iteration  15: 797279.885 ops/s
Iteration  16: 792335.168 ops/s
Iteration  17: 769266.489 ops/s
Iteration  18: 769477.539 ops/s
Iteration  19: 762574.941 ops/s
Iteration  20: 765248.848 ops/s
Iteration  21: 759812.296 ops/s
Iteration  22: 767219.879 ops/s
Iteration  23: 754022.027 ops/s
Iteration  24: 771034.734 ops/s
Iteration  25: 758338.181 ops/s
Iteration  26: 763599.263 ops/s
Iteration  27: 774225.854 ops/s
Iteration  28: 756818.926 ops/s
Iteration  29: 752189.944 ops/s
Iteration  30: 749164.650 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toBag":
  779539.375 ±(99.9%) 11990.414 ops/s [Average]
  (min, avg, max) = (749164.650, 779539.375, 798925.530), stdev = 17946.689
  CI (99.9%): [767548.960, 791529.789] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toBag  thrpt   30  779539.375 ± 11990.414  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 87359.149 ops/s
# Warmup Iteration   2: 110307.614 ops/s
# Warmup Iteration   3: 144172.725 ops/s
# Warmup Iteration   4: 142427.141 ops/s
# Warmup Iteration   5: 144881.803 ops/s
# Warmup Iteration   6: 143664.452 ops/s
# Warmup Iteration   7: 144148.540 ops/s
# Warmup Iteration   8: 143529.571 ops/s
# Warmup Iteration   9: 121283.483 ops/s
# Warmup Iteration  10: 146228.164 ops/s
# Warmup Iteration  11: 144847.043 ops/s
# Warmup Iteration  12: 143986.808 ops/s
# Warmup Iteration  13: 148724.192 ops/s
# Warmup Iteration  14: 144635.155 ops/s
# Warmup Iteration  15: 147794.439 ops/s
# Warmup Iteration  16: 148938.715 ops/s
# Warmup Iteration  17: 155152.294 ops/s
# Warmup Iteration  18: 147443.332 ops/s
# Warmup Iteration  19: 147925.171 ops/s
# Warmup Iteration  20: 154051.610 ops/s
# Warmup Iteration  21: 148106.236 ops/s
# Warmup Iteration  22: 145728.163 ops/s
# Warmup Iteration  23: 152047.746 ops/s
# Warmup Iteration  24: 149656.609 ops/s
# Warmup Iteration  25: 147813.632 ops/s
# Warmup Iteration  26: 152560.881 ops/s
# Warmup Iteration  27: 150055.285 ops/s
# Warmup Iteration  28: 149409.187 ops/s
# Warmup Iteration  29: 148685.536 ops/s
# Warmup Iteration  30: 147710.839 ops/s
Iteration   1: 147149.287 ops/s
Iteration   2: 148035.677 ops/s
Iteration   3: 147613.535 ops/s
Iteration   4: 154287.088 ops/s
Iteration   5: 156731.223 ops/s
Iteration   6: 156703.510 ops/s
Iteration   7: 149625.561 ops/s
Iteration   8: 146880.614 ops/s
Iteration   9: 149021.415 ops/s
Iteration  10: 149473.596 ops/s
Iteration  11: 148879.024 ops/s
Iteration  12: 149842.729 ops/s
Iteration  13: 149801.654 ops/s
Iteration  14: 150743.851 ops/s
Iteration  15: 150381.145 ops/s
Iteration  16: 150858.109 ops/s
Iteration  17: 152453.992 ops/s
Iteration  18: 151672.107 ops/s
Iteration  19: 150859.530 ops/s
Iteration  20: 151529.425 ops/s
Iteration  21: 150094.996 ops/s
Iteration  22: 149636.156 ops/s
Iteration  23: 149797.443 ops/s
Iteration  24: 150656.447 ops/s
Iteration  25: 150541.541 ops/s
Iteration  26: 150662.055 ops/s
Iteration  27: 147747.153 ops/s
Iteration  28: 149650.798 ops/s
Iteration  29: 148625.001 ops/s
Iteration  30: 148348.305 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toBiMap":
  150276.766 ±(99.9%) 1573.852 ops/s [Average]
  (min, avg, max) = (146880.614, 150276.766, 156731.223), stdev = 2355.667
  CI (99.9%): [148702.914, 151850.617] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toBiMap  thrpt   30  150276.766 ± 1573.852  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1164887.981 ops/s
# Warmup Iteration   2: 2427381.287 ops/s
# Warmup Iteration   3: 2585925.857 ops/s
# Warmup Iteration   4: 2601703.463 ops/s
# Warmup Iteration   5: 2166441.272 ops/s
# Warmup Iteration   6: 2604143.416 ops/s
# Warmup Iteration   7: 2606955.882 ops/s
# Warmup Iteration   8: 2510587.135 ops/s
# Warmup Iteration   9: 2539957.603 ops/s
# Warmup Iteration  10: 2452100.892 ops/s
# Warmup Iteration  11: 2489044.392 ops/s
# Warmup Iteration  12: 2397059.010 ops/s
# Warmup Iteration  13: 2450779.304 ops/s
# Warmup Iteration  14: 2485208.885 ops/s
# Warmup Iteration  15: 2536694.812 ops/s
# Warmup Iteration  16: 2450401.485 ops/s
# Warmup Iteration  17: 2523082.617 ops/s
# Warmup Iteration  18: 2430898.850 ops/s
# Warmup Iteration  19: 2502668.646 ops/s
# Warmup Iteration  20: 2466920.929 ops/s
# Warmup Iteration  21: 2440234.035 ops/s
# Warmup Iteration  22: 2446671.980 ops/s
# Warmup Iteration  23: 2560460.121 ops/s
# Warmup Iteration  24: 2564626.572 ops/s
# Warmup Iteration  25: 2446126.896 ops/s
# Warmup Iteration  26: 2429935.548 ops/s
# Warmup Iteration  27: 2453246.341 ops/s
# Warmup Iteration  28: 2445246.189 ops/s
# Warmup Iteration  29: 2455155.353 ops/s
# Warmup Iteration  30: 2457083.340 ops/s
Iteration   1: 2468860.816 ops/s
Iteration   2: 2435823.576 ops/s
Iteration   3: 2518255.442 ops/s
Iteration   4: 2581053.822 ops/s
Iteration   5: 2467369.925 ops/s
Iteration   6: 2475476.548 ops/s
Iteration   7: 2587450.400 ops/s
Iteration   8: 2493412.488 ops/s
Iteration   9: 2443936.376 ops/s
Iteration  10: 2462368.988 ops/s
Iteration  11: 2402059.084 ops/s
Iteration  12: 2433408.493 ops/s
Iteration  13: 2421173.799 ops/s
Iteration  14: 2500004.567 ops/s
Iteration  15: 2448733.229 ops/s
Iteration  16: 2463447.091 ops/s
Iteration  17: 2500602.330 ops/s
Iteration  18: 2625291.001 ops/s
Iteration  19: 2608825.444 ops/s
Iteration  20: 2612385.508 ops/s
Iteration  21: 2618344.899 ops/s
Iteration  22: 2487142.917 ops/s
Iteration  23: 2412517.105 ops/s
Iteration  24: 2445122.482 ops/s
Iteration  25: 2482145.504 ops/s
Iteration  26: 2491725.596 ops/s
Iteration  27: 2510722.277 ops/s
Iteration  28: 2519693.982 ops/s
Iteration  29: 2474642.742 ops/s
Iteration  30: 2487774.073 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toCollection":
  2495992.350 ±(99.9%) 42313.479 ops/s [Average]
  (min, avg, max) = (2402059.084, 2495992.350, 2625291.001), stdev = 63332.828
  CI (99.9%): [2453678.871, 2538305.829] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toCollection  thrpt   30  2495992.350 ± 42313.479  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 303432.944 ops/s
# Warmup Iteration   2: 399361.583 ops/s
# Warmup Iteration   3: 510974.236 ops/s
# Warmup Iteration   4: 528522.076 ops/s
# Warmup Iteration   5: 532436.427 ops/s
# Warmup Iteration   6: 531485.474 ops/s
# Warmup Iteration   7: 530584.783 ops/s
# Warmup Iteration   8: 499813.328 ops/s
# Warmup Iteration   9: 474041.389 ops/s
# Warmup Iteration  10: 524108.422 ops/s
# Warmup Iteration  11: 530212.493 ops/s
# Warmup Iteration  12: 525271.096 ops/s
# Warmup Iteration  13: 500297.963 ops/s
# Warmup Iteration  14: 512206.364 ops/s
# Warmup Iteration  15: 527553.162 ops/s
# Warmup Iteration  16: 531723.154 ops/s
# Warmup Iteration  17: 536528.883 ops/s
# Warmup Iteration  18: 536563.824 ops/s
# Warmup Iteration  19: 537177.374 ops/s
# Warmup Iteration  20: 535975.882 ops/s
# Warmup Iteration  21: 536649.529 ops/s
# Warmup Iteration  22: 514900.961 ops/s
# Warmup Iteration  23: 512405.259 ops/s
# Warmup Iteration  24: 511896.973 ops/s
# Warmup Iteration  25: 516321.684 ops/s
# Warmup Iteration  26: 513978.116 ops/s
# Warmup Iteration  27: 501825.270 ops/s
# Warmup Iteration  28: 506057.624 ops/s
# Warmup Iteration  29: 504909.638 ops/s
# Warmup Iteration  30: 513794.290 ops/s
Iteration   1: 505497.687 ops/s
Iteration   2: 499231.297 ops/s
Iteration   3: 508859.574 ops/s
Iteration   4: 503437.506 ops/s
Iteration   5: 504818.559 ops/s
Iteration   6: 503328.998 ops/s
Iteration   7: 498025.745 ops/s
Iteration   8: 503330.350 ops/s
Iteration   9: 504134.352 ops/s
Iteration  10: 511815.591 ops/s
Iteration  11: 503180.540 ops/s
Iteration  12: 501461.464 ops/s
Iteration  13: 503794.995 ops/s
Iteration  14: 500740.597 ops/s
Iteration  15: 502377.043 ops/s
Iteration  16: 500984.550 ops/s
Iteration  17: 526188.157 ops/s
Iteration  18: 528078.709 ops/s
Iteration  19: 520941.634 ops/s
Iteration  20: 507506.172 ops/s
Iteration  21: 503853.914 ops/s
Iteration  22: 500386.028 ops/s
Iteration  23: 512708.876 ops/s
Iteration  24: 536466.262 ops/s
Iteration  25: 536160.225 ops/s
Iteration  26: 524478.185 ops/s
Iteration  27: 509598.085 ops/s
Iteration  28: 501304.527 ops/s
Iteration  29: 509820.120 ops/s
Iteration  30: 527047.722 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutable":
  509985.249 ±(99.9%) 7519.837 ops/s [Average]
  (min, avg, max) = (498025.745, 509985.249, 536466.262), stdev = 11255.339
  CI (99.9%): [502465.412, 517505.086] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutable  thrpt   30  509985.249 ± 7519.837  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 425757.384 ops/s
# Warmup Iteration   2: 716211.043 ops/s
# Warmup Iteration   3: 918887.393 ops/s
# Warmup Iteration   4: 900866.665 ops/s
# Warmup Iteration   5: 889015.111 ops/s
# Warmup Iteration   6: 883438.189 ops/s
# Warmup Iteration   7: 726347.491 ops/s
# Warmup Iteration   8: 893117.916 ops/s
# Warmup Iteration   9: 884224.338 ops/s
# Warmup Iteration  10: 912726.105 ops/s
# Warmup Iteration  11: 903134.949 ops/s
# Warmup Iteration  12: 897185.689 ops/s
# Warmup Iteration  13: 887673.155 ops/s
# Warmup Iteration  14: 888491.694 ops/s
# Warmup Iteration  15: 914044.003 ops/s
# Warmup Iteration  16: 879868.959 ops/s
# Warmup Iteration  17: 868834.743 ops/s
# Warmup Iteration  18: 881754.824 ops/s
# Warmup Iteration  19: 882309.879 ops/s
# Warmup Iteration  20: 890965.005 ops/s
# Warmup Iteration  21: 915014.110 ops/s
# Warmup Iteration  22: 876862.861 ops/s
# Warmup Iteration  23: 886346.395 ops/s
# Warmup Iteration  24: 884092.378 ops/s
# Warmup Iteration  25: 886952.143 ops/s
# Warmup Iteration  26: 882477.483 ops/s
# Warmup Iteration  27: 883859.881 ops/s
# Warmup Iteration  28: 892720.925 ops/s
# Warmup Iteration  29: 903376.140 ops/s
# Warmup Iteration  30: 934703.465 ops/s
Iteration   1: 935747.415 ops/s
Iteration   2: 934503.831 ops/s
Iteration   3: 935691.746 ops/s
Iteration   4: 934944.689 ops/s
Iteration   5: 936139.030 ops/s
Iteration   6: 933283.929 ops/s
Iteration   7: 935929.405 ops/s
Iteration   8: 934590.082 ops/s
Iteration   9: 934188.968 ops/s
Iteration  10: 935062.992 ops/s
Iteration  11: 936286.735 ops/s
Iteration  12: 920750.481 ops/s
Iteration  13: 881797.262 ops/s
Iteration  14: 884331.557 ops/s
Iteration  15: 895269.883 ops/s
Iteration  16: 893679.501 ops/s
Iteration  17: 880488.856 ops/s
Iteration  18: 879259.665 ops/s
Iteration  19: 874053.912 ops/s
Iteration  20: 878318.412 ops/s
Iteration  21: 873860.169 ops/s
Iteration  22: 885384.393 ops/s
Iteration  23: 878899.454 ops/s
Iteration  24: 882522.589 ops/s
Iteration  25: 884991.407 ops/s
Iteration  26: 921055.787 ops/s
Iteration  27: 871291.483 ops/s
Iteration  28: 878575.736 ops/s
Iteration  29: 932083.143 ops/s
Iteration  30: 910074.372 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableBag":
  906435.229 ±(99.9%) 17585.556 ops/s [Average]
  (min, avg, max) = (871291.483, 906435.229, 936286.735), stdev = 26321.235
  CI (99.9%): [888849.673, 924020.786] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableBag  thrpt   30  906435.229 ± 17585.556  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 68752.966 ops/s
# Warmup Iteration   2: 97966.043 ops/s
# Warmup Iteration   3: 124402.076 ops/s
# Warmup Iteration   4: 125186.965 ops/s
# Warmup Iteration   5: 125900.107 ops/s
# Warmup Iteration   6: 125059.472 ops/s
# Warmup Iteration   7: 124495.700 ops/s
# Warmup Iteration   8: 106399.972 ops/s
# Warmup Iteration   9: 127134.748 ops/s
# Warmup Iteration  10: 125368.377 ops/s
# Warmup Iteration  11: 122859.621 ops/s
# Warmup Iteration  12: 125243.918 ops/s
# Warmup Iteration  13: 128657.745 ops/s
# Warmup Iteration  14: 126712.137 ops/s
# Warmup Iteration  15: 130652.874 ops/s
# Warmup Iteration  16: 127901.196 ops/s
# Warmup Iteration  17: 136327.492 ops/s
# Warmup Iteration  18: 139754.972 ops/s
# Warmup Iteration  19: 138955.326 ops/s
# Warmup Iteration  20: 138327.876 ops/s
# Warmup Iteration  21: 139385.752 ops/s
# Warmup Iteration  22: 144880.105 ops/s
# Warmup Iteration  23: 142383.270 ops/s
# Warmup Iteration  24: 141620.177 ops/s
# Warmup Iteration  25: 139444.577 ops/s
# Warmup Iteration  26: 140247.949 ops/s
# Warmup Iteration  27: 139516.945 ops/s
# Warmup Iteration  28: 140954.611 ops/s
# Warmup Iteration  29: 138237.032 ops/s
# Warmup Iteration  30: 138396.565 ops/s
Iteration   1: 135783.028 ops/s
Iteration   2: 139491.141 ops/s
Iteration   3: 139565.765 ops/s
Iteration   4: 139033.438 ops/s
Iteration   5: 137600.741 ops/s
Iteration   6: 144580.392 ops/s
Iteration   7: 139255.983 ops/s
Iteration   8: 140245.907 ops/s
Iteration   9: 136318.967 ops/s
Iteration  10: 137241.815 ops/s
Iteration  11: 139673.039 ops/s
Iteration  12: 135480.022 ops/s
Iteration  13: 140181.193 ops/s
Iteration  14: 145485.763 ops/s
Iteration  15: 136430.096 ops/s
Iteration  16: 136605.781 ops/s
Iteration  17: 137112.400 ops/s
Iteration  18: 137597.060 ops/s
Iteration  19: 138875.360 ops/s
Iteration  20: 137444.731 ops/s
Iteration  21: 137866.368 ops/s
Iteration  22: 145445.989 ops/s
Iteration  23: 144802.544 ops/s
Iteration  24: 136303.280 ops/s
Iteration  25: 139346.159 ops/s
Iteration  26: 139874.063 ops/s
Iteration  27: 142817.229 ops/s
Iteration  28: 145820.193 ops/s
Iteration  29: 145647.839 ops/s
Iteration  30: 145923.749 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableBiMap":
  139928.335 ±(99.9%) 2302.872 ops/s [Average]
  (min, avg, max) = (135480.022, 139928.335, 145923.749), stdev = 3446.831
  CI (99.9%): [137625.462, 142231.207] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableBiMap  thrpt   30  139928.335 ± 2302.872  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 636471.622 ops/s
# Warmup Iteration   2: 1189746.224 ops/s
# Warmup Iteration   3: 1326132.331 ops/s
# Warmup Iteration   4: 1332756.297 ops/s
# Warmup Iteration   5: 1302519.768 ops/s
# Warmup Iteration   6: 1074311.956 ops/s
# Warmup Iteration   7: 1260069.393 ops/s
# Warmup Iteration   8: 1262769.042 ops/s
# Warmup Iteration   9: 1270129.592 ops/s
# Warmup Iteration  10: 1264996.155 ops/s
# Warmup Iteration  11: 1253950.516 ops/s
# Warmup Iteration  12: 1273791.167 ops/s
# Warmup Iteration  13: 1303043.045 ops/s
# Warmup Iteration  14: 1256159.990 ops/s
# Warmup Iteration  15: 1264355.643 ops/s
# Warmup Iteration  16: 1260606.919 ops/s
# Warmup Iteration  17: 1243811.088 ops/s
# Warmup Iteration  18: 1267097.774 ops/s
# Warmup Iteration  19: 1269558.296 ops/s
# Warmup Iteration  20: 1258489.930 ops/s
# Warmup Iteration  21: 1249052.069 ops/s
# Warmup Iteration  22: 1263584.703 ops/s
# Warmup Iteration  23: 1257087.524 ops/s
# Warmup Iteration  24: 1252921.505 ops/s
# Warmup Iteration  25: 1254628.843 ops/s
# Warmup Iteration  26: 1256639.937 ops/s
# Warmup Iteration  27: 1259626.547 ops/s
# Warmup Iteration  28: 1263936.626 ops/s
# Warmup Iteration  29: 1258481.300 ops/s
# Warmup Iteration  30: 1266849.330 ops/s
Iteration   1: 1257350.216 ops/s
Iteration   2: 1251627.767 ops/s
Iteration   3: 1244554.583 ops/s
Iteration   4: 1269830.891 ops/s
Iteration   5: 1255862.561 ops/s
Iteration   6: 1248567.293 ops/s
Iteration   7: 1261574.706 ops/s
Iteration   8: 1277078.134 ops/s
Iteration   9: 1269963.398 ops/s
Iteration  10: 1281767.211 ops/s
Iteration  11: 1244191.004 ops/s
Iteration  12: 1277497.371 ops/s
Iteration  13: 1255809.128 ops/s
Iteration  14: 1311302.617 ops/s
Iteration  15: 1283265.830 ops/s
Iteration  16: 1236246.708 ops/s
Iteration  17: 1253034.011 ops/s
Iteration  18: 1254863.172 ops/s
Iteration  19: 1264260.376 ops/s
Iteration  20: 1248367.103 ops/s
Iteration  21: 1253341.295 ops/s
Iteration  22: 1249319.275 ops/s
Iteration  23: 1268796.771 ops/s
Iteration  24: 1249512.180 ops/s
Iteration  25: 1264567.264 ops/s
Iteration  26: 1245672.934 ops/s
Iteration  27: 1265100.514 ops/s
Iteration  28: 1319173.919 ops/s
Iteration  29: 1323297.407 ops/s
Iteration  30: 1258176.769 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableList":
  1264799.080 ±(99.9%) 14353.744 ops/s [Average]
  (min, avg, max) = (1236246.708, 1264799.080, 1323297.407), stdev = 21484.010
  CI (99.9%): [1250445.336, 1279152.824] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableList  thrpt   30  1264799.080 ± 14353.744  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 541767.101 ops/s
# Warmup Iteration   2: 1193918.448 ops/s
# Warmup Iteration   3: 1281298.094 ops/s
# Warmup Iteration   4: 1234156.904 ops/s
# Warmup Iteration   5: 1124360.592 ops/s
# Warmup Iteration   6: 1301853.373 ops/s
# Warmup Iteration   7: 1255053.532 ops/s
# Warmup Iteration   8: 1257356.316 ops/s
# Warmup Iteration   9: 1272936.777 ops/s
# Warmup Iteration  10: 1286595.413 ops/s
# Warmup Iteration  11: 1256919.714 ops/s
# Warmup Iteration  12: 1264963.266 ops/s
# Warmup Iteration  13: 1327362.032 ops/s
# Warmup Iteration  14: 1325734.372 ops/s
# Warmup Iteration  15: 1326382.537 ops/s
# Warmup Iteration  16: 1327798.250 ops/s
# Warmup Iteration  17: 1327304.494 ops/s
# Warmup Iteration  18: 1324577.771 ops/s
# Warmup Iteration  19: 1327923.565 ops/s
# Warmup Iteration  20: 1290533.528 ops/s
# Warmup Iteration  21: 1280611.282 ops/s
# Warmup Iteration  22: 1280823.417 ops/s
# Warmup Iteration  23: 1284461.483 ops/s
# Warmup Iteration  24: 1299920.121 ops/s
# Warmup Iteration  25: 1251151.356 ops/s
# Warmup Iteration  26: 1249106.496 ops/s
# Warmup Iteration  27: 1241559.785 ops/s
# Warmup Iteration  28: 1247769.715 ops/s
# Warmup Iteration  29: 1246875.494 ops/s
# Warmup Iteration  30: 1239797.726 ops/s
Iteration   1: 1283225.652 ops/s
Iteration   2: 1231226.457 ops/s
Iteration   3: 1248123.640 ops/s
Iteration   4: 1270559.919 ops/s
Iteration   5: 1245730.143 ops/s
Iteration   6: 1238807.120 ops/s
Iteration   7: 1264857.148 ops/s
Iteration   8: 1248944.320 ops/s
Iteration   9: 1265612.271 ops/s
Iteration  10: 1242497.769 ops/s
Iteration  11: 1252210.647 ops/s
Iteration  12: 1235534.742 ops/s
Iteration  13: 1256382.215 ops/s
Iteration  14: 1248703.533 ops/s
Iteration  15: 1246024.222 ops/s
Iteration  16: 1318341.674 ops/s
Iteration  17: 1280338.936 ops/s
Iteration  18: 1277343.217 ops/s
Iteration  19: 1268810.583 ops/s
Iteration  20: 1256393.149 ops/s
Iteration  21: 1272464.893 ops/s
Iteration  22: 1271278.751 ops/s
Iteration  23: 1278695.392 ops/s
Iteration  24: 1249138.304 ops/s
Iteration  25: 1318784.034 ops/s
Iteration  26: 1327128.480 ops/s
Iteration  27: 1327609.319 ops/s
Iteration  28: 1321690.250 ops/s
Iteration  29: 1328953.311 ops/s
Iteration  30: 1307441.208 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableMap":
  1272761.710 ±(99.9%) 20449.502 ops/s [Average]
  (min, avg, max) = (1231226.457, 1272761.710, 1328953.311), stdev = 30607.854
  CI (99.9%): [1252312.208, 1293211.212] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableMap  thrpt   30  1272761.710 ± 20449.502  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 526672.637 ops/s
# Warmup Iteration   2: 865038.008 ops/s
# Warmup Iteration   3: 1036567.444 ops/s
# Warmup Iteration   4: 1048745.203 ops/s
# Warmup Iteration   5: 1056773.766 ops/s
# Warmup Iteration   6: 1039775.698 ops/s
# Warmup Iteration   7: 883269.848 ops/s
# Warmup Iteration   8: 1040650.561 ops/s
# Warmup Iteration   9: 1037826.215 ops/s
# Warmup Iteration  10: 1020186.702 ops/s
# Warmup Iteration  11: 1050446.519 ops/s
# Warmup Iteration  12: 1036058.342 ops/s
# Warmup Iteration  13: 1025468.584 ops/s
# Warmup Iteration  14: 1049052.671 ops/s
# Warmup Iteration  15: 1089282.807 ops/s
# Warmup Iteration  16: 1034885.821 ops/s
# Warmup Iteration  17: 1061708.796 ops/s
# Warmup Iteration  18: 1090986.542 ops/s
# Warmup Iteration  19: 1034655.641 ops/s
# Warmup Iteration  20: 1031550.509 ops/s
# Warmup Iteration  21: 1033446.770 ops/s
# Warmup Iteration  22: 1036992.421 ops/s
# Warmup Iteration  23: 1030002.486 ops/s
# Warmup Iteration  24: 1033698.363 ops/s
# Warmup Iteration  25: 1063042.330 ops/s
# Warmup Iteration  26: 1052111.382 ops/s
# Warmup Iteration  27: 1083073.107 ops/s
# Warmup Iteration  28: 1098363.076 ops/s
# Warmup Iteration  29: 1098148.961 ops/s
# Warmup Iteration  30: 1097187.512 ops/s
Iteration   1: 1099649.873 ops/s
Iteration   2: 1100515.453 ops/s
Iteration   3: 1102494.553 ops/s
Iteration   4: 1096882.382 ops/s
Iteration   5: 1102211.106 ops/s
Iteration   6: 1098792.974 ops/s
Iteration   7: 1101169.223 ops/s
Iteration   8: 1057186.441 ops/s
Iteration   9: 1050981.780 ops/s
Iteration  10: 1024002.146 ops/s
Iteration  11: 1036644.731 ops/s
Iteration  12: 1060455.762 ops/s
Iteration  13: 1099196.350 ops/s
Iteration  14: 1097155.421 ops/s
Iteration  15: 1054882.889 ops/s
Iteration  16: 1029762.644 ops/s
Iteration  17: 1053743.226 ops/s
Iteration  18: 1061542.345 ops/s
Iteration  19: 1044875.795 ops/s
Iteration  20: 1026749.507 ops/s
Iteration  21: 1041018.355 ops/s
Iteration  22: 1070748.614 ops/s
Iteration  23: 1051059.990 ops/s
Iteration  24: 1050710.352 ops/s
Iteration  25: 1030164.046 ops/s
Iteration  26: 1037927.161 ops/s
Iteration  27: 1041366.435 ops/s
Iteration  28: 1027079.873 ops/s
Iteration  29: 1035009.006 ops/s
Iteration  30: 1022298.244 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSet":
  1060209.222 ±(99.9%) 19228.277 ops/s [Average]
  (min, avg, max) = (1022298.244, 1060209.222, 1102494.553), stdev = 28779.982
  CI (99.9%): [1040980.945, 1079437.500] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSet  thrpt   30  1060209.222 ± 19228.277  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 461734.504 ops/s
# Warmup Iteration   2: 862017.755 ops/s
# Warmup Iteration   3: 994506.539 ops/s
# Warmup Iteration   4: 1003426.367 ops/s
# Warmup Iteration   5: 989120.942 ops/s
# Warmup Iteration   6: 847387.582 ops/s
# Warmup Iteration   7: 1023479.737 ops/s
# Warmup Iteration   8: 1014049.418 ops/s
# Warmup Iteration   9: 1025096.113 ops/s
# Warmup Iteration  10: 999919.855 ops/s
# Warmup Iteration  11: 1030192.282 ops/s
# Warmup Iteration  12: 1017359.726 ops/s
# Warmup Iteration  13: 1008964.204 ops/s
# Warmup Iteration  14: 1005320.932 ops/s
# Warmup Iteration  15: 1041928.277 ops/s
# Warmup Iteration  16: 1002530.461 ops/s
# Warmup Iteration  17: 998387.993 ops/s
# Warmup Iteration  18: 1008930.600 ops/s
# Warmup Iteration  19: 998127.224 ops/s
# Warmup Iteration  20: 1002422.895 ops/s
# Warmup Iteration  21: 1029216.922 ops/s
# Warmup Iteration  22: 1013041.912 ops/s
# Warmup Iteration  23: 1015775.493 ops/s
# Warmup Iteration  24: 1011033.784 ops/s
# Warmup Iteration  25: 997499.841 ops/s
# Warmup Iteration  26: 998922.937 ops/s
# Warmup Iteration  27: 1008337.181 ops/s
# Warmup Iteration  28: 1015391.903 ops/s
# Warmup Iteration  29: 1006923.737 ops/s
# Warmup Iteration  30: 1025021.226 ops/s
Iteration   1: 998122.643 ops/s
Iteration   2: 1014063.490 ops/s
Iteration   3: 1004912.628 ops/s
Iteration   4: 1004772.947 ops/s
Iteration   5: 1020416.397 ops/s
Iteration   6: 1032857.144 ops/s
Iteration   7: 1018490.465 ops/s
Iteration   8: 1000762.649 ops/s
Iteration   9: 1022674.193 ops/s
Iteration  10: 1032767.656 ops/s
Iteration  11: 1048641.263 ops/s
Iteration  12: 1025735.328 ops/s
Iteration  13: 1027583.161 ops/s
Iteration  14: 1023905.365 ops/s
Iteration  15: 1023414.258 ops/s
Iteration  16: 1045809.600 ops/s
Iteration  17: 1062119.023 ops/s
Iteration  18: 1007489.603 ops/s
Iteration  19: 1039119.633 ops/s
Iteration  20: 1041762.723 ops/s
Iteration  21: 1030867.129 ops/s
Iteration  22: 1055123.645 ops/s
Iteration  23: 1065470.381 ops/s
Iteration  24: 1066311.909 ops/s
Iteration  25: 1066512.720 ops/s
Iteration  26: 1065582.933 ops/s
Iteration  27: 1065669.631 ops/s
Iteration  28: 1066074.541 ops/s
Iteration  29: 1064402.112 ops/s
Iteration  30: 1066247.897 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering":
  1036922.769 ±(99.9%) 15489.687 ops/s [Average]
  (min, avg, max) = (998122.643, 1036922.769, 1066512.720), stdev = 23184.236
  CI (99.9%): [1021433.082, 1052412.456] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering  thrpt   30  1036922.769 ± 15489.687  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 231342.764 ops/s
# Warmup Iteration   2: 396675.170 ops/s
# Warmup Iteration   3: 483571.834 ops/s
# Warmup Iteration   4: 483516.012 ops/s
# Warmup Iteration   5: 471332.836 ops/s
# Warmup Iteration   6: 449406.771 ops/s
# Warmup Iteration   7: 395040.281 ops/s
# Warmup Iteration   8: 467721.267 ops/s
# Warmup Iteration   9: 468927.149 ops/s
# Warmup Iteration  10: 477900.491 ops/s
# Warmup Iteration  11: 473831.995 ops/s
# Warmup Iteration  12: 473063.854 ops/s
# Warmup Iteration  13: 478711.174 ops/s
# Warmup Iteration  14: 472187.285 ops/s
# Warmup Iteration  15: 481102.846 ops/s
# Warmup Iteration  16: 479124.669 ops/s
# Warmup Iteration  17: 481055.444 ops/s
# Warmup Iteration  18: 472433.726 ops/s
# Warmup Iteration  19: 469789.451 ops/s
# Warmup Iteration  20: 466875.189 ops/s
# Warmup Iteration  21: 464500.528 ops/s
# Warmup Iteration  22: 469796.383 ops/s
# Warmup Iteration  23: 468829.235 ops/s
# Warmup Iteration  24: 469103.842 ops/s
# Warmup Iteration  25: 475115.574 ops/s
# Warmup Iteration  26: 481186.821 ops/s
# Warmup Iteration  27: 481985.547 ops/s
# Warmup Iteration  28: 477260.295 ops/s
# Warmup Iteration  29: 472193.339 ops/s
# Warmup Iteration  30: 484718.668 ops/s
Iteration   1: 489425.078 ops/s
Iteration   2: 475159.755 ops/s
Iteration   3: 481724.725 ops/s
Iteration   4: 490376.169 ops/s
Iteration   5: 479894.419 ops/s
Iteration   6: 470727.042 ops/s
Iteration   7: 464474.773 ops/s
Iteration   8: 490628.669 ops/s
Iteration   9: 457978.085 ops/s
Iteration  10: 463522.949 ops/s
Iteration  11: 482528.605 ops/s
Iteration  12: 461966.682 ops/s
Iteration  13: 485414.456 ops/s
Iteration  14: 491162.279 ops/s
Iteration  15: 490384.614 ops/s
Iteration  16: 495212.318 ops/s
Iteration  17: 461005.728 ops/s
Iteration  18: 461617.922 ops/s
Iteration  19: 469034.780 ops/s
Iteration  20: 454966.436 ops/s
Iteration  21: 470255.284 ops/s
Iteration  22: 464753.691 ops/s
Iteration  23: 472920.164 ops/s
Iteration  24: 460259.773 ops/s
Iteration  25: 477505.850 ops/s
Iteration  26: 471819.310 ops/s
Iteration  27: 476163.975 ops/s
Iteration  28: 468296.646 ops/s
Iteration  29: 479561.536 ops/s
Iteration  30: 467547.269 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedBagBy":
  474209.633 ±(99.9%) 7679.209 ops/s [Average]
  (min, avg, max) = (454966.436, 474209.633, 495212.318), stdev = 11493.879
  CI (99.9%): [466530.424, 481888.842] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedBagBy  thrpt   30  474209.633 ± 7679.209  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 368213.915 ops/s
# Warmup Iteration   2: 580402.126 ops/s
# Warmup Iteration   3: 684871.923 ops/s
# Warmup Iteration   4: 701965.447 ops/s
# Warmup Iteration   5: 691856.862 ops/s
# Warmup Iteration   6: 683952.240 ops/s
# Warmup Iteration   7: 568014.016 ops/s
# Warmup Iteration   8: 698211.030 ops/s
# Warmup Iteration   9: 689962.505 ops/s
# Warmup Iteration  10: 706666.854 ops/s
# Warmup Iteration  11: 731077.614 ops/s
# Warmup Iteration  12: 729353.126 ops/s
# Warmup Iteration  13: 729405.997 ops/s
# Warmup Iteration  14: 728768.201 ops/s
# Warmup Iteration  15: 729657.784 ops/s
# Warmup Iteration  16: 724161.661 ops/s
# Warmup Iteration  17: 731251.256 ops/s
# Warmup Iteration  18: 728971.289 ops/s
# Warmup Iteration  19: 703953.625 ops/s
# Warmup Iteration  20: 722536.295 ops/s
# Warmup Iteration  21: 697563.702 ops/s
# Warmup Iteration  22: 700022.433 ops/s
# Warmup Iteration  23: 695701.960 ops/s
# Warmup Iteration  24: 697351.835 ops/s
# Warmup Iteration  25: 701693.764 ops/s
# Warmup Iteration  26: 704936.614 ops/s
# Warmup Iteration  27: 681355.791 ops/s
# Warmup Iteration  28: 680345.942 ops/s
# Warmup Iteration  29: 679942.557 ops/s
# Warmup Iteration  30: 687240.036 ops/s
Iteration   1: 682773.428 ops/s
Iteration   2: 683937.350 ops/s
Iteration   3: 687529.895 ops/s
Iteration   4: 703842.051 ops/s
Iteration   5: 692094.215 ops/s
Iteration   6: 702222.811 ops/s
Iteration   7: 693841.502 ops/s
Iteration   8: 686306.726 ops/s
Iteration   9: 683993.117 ops/s
Iteration  10: 682783.761 ops/s
Iteration  11: 675620.394 ops/s
Iteration  12: 681346.493 ops/s
Iteration  13: 677601.717 ops/s
Iteration  14: 677148.671 ops/s
Iteration  15: 684870.515 ops/s
Iteration  16: 685163.594 ops/s
Iteration  17: 677601.767 ops/s
Iteration  18: 690780.354 ops/s
Iteration  19: 705045.285 ops/s
Iteration  20: 702215.761 ops/s
Iteration  21: 688784.405 ops/s
Iteration  22: 677131.941 ops/s
Iteration  23: 678022.456 ops/s
Iteration  24: 688780.278 ops/s
Iteration  25: 685552.972 ops/s
Iteration  26: 685986.342 ops/s
Iteration  27: 714125.654 ops/s
Iteration  28: 731138.650 ops/s
Iteration  29: 683923.508 ops/s
Iteration  30: 677004.040 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering":
  688905.655 ±(99.9%) 8349.696 ops/s [Average]
  (min, avg, max) = (675620.394, 688905.655, 731138.650), stdev = 12497.433
  CI (99.9%): [680555.959, 697255.351] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering  thrpt   30  688905.655 ± 8349.696  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 448999.198 ops/s
# Warmup Iteration   2: 813716.194 ops/s
# Warmup Iteration   3: 965669.018 ops/s
# Warmup Iteration   4: 961447.565 ops/s
# Warmup Iteration   5: 977782.019 ops/s
# Warmup Iteration   6: 815860.696 ops/s
# Warmup Iteration   7: 997030.947 ops/s
# Warmup Iteration   8: 998744.746 ops/s
# Warmup Iteration   9: 974618.534 ops/s
# Warmup Iteration  10: 981951.443 ops/s
# Warmup Iteration  11: 988563.302 ops/s
# Warmup Iteration  12: 998445.087 ops/s
# Warmup Iteration  13: 1032948.925 ops/s
# Warmup Iteration  14: 1002511.897 ops/s
# Warmup Iteration  15: 982400.959 ops/s
# Warmup Iteration  16: 987604.784 ops/s
# Warmup Iteration  17: 962564.263 ops/s
# Warmup Iteration  18: 983585.295 ops/s
# Warmup Iteration  19: 972833.269 ops/s
# Warmup Iteration  20: 995053.635 ops/s
# Warmup Iteration  21: 954175.991 ops/s
# Warmup Iteration  22: 963369.676 ops/s
# Warmup Iteration  23: 977177.560 ops/s
# Warmup Iteration  24: 1011963.840 ops/s
# Warmup Iteration  25: 1032096.029 ops/s
# Warmup Iteration  26: 1036509.164 ops/s
# Warmup Iteration  27: 1036029.232 ops/s
# Warmup Iteration  28: 1032425.573 ops/s
# Warmup Iteration  29: 1035087.307 ops/s
# Warmup Iteration  30: 1034869.061 ops/s
Iteration   1: 1034364.914 ops/s
Iteration   2: 1037877.034 ops/s
Iteration   3: 1037598.955 ops/s
Iteration   4: 976521.936 ops/s
Iteration   5: 987441.052 ops/s
Iteration   6: 977132.901 ops/s
Iteration   7: 970538.394 ops/s
Iteration   8: 989006.154 ops/s
Iteration   9: 998250.759 ops/s
Iteration  10: 977608.641 ops/s
Iteration  11: 967130.283 ops/s
Iteration  12: 987848.155 ops/s
Iteration  13: 978828.009 ops/s
Iteration  14: 1014469.102 ops/s
Iteration  15: 969792.593 ops/s
Iteration  16: 968433.596 ops/s
Iteration  17: 1018116.943 ops/s
Iteration  18: 991649.312 ops/s
Iteration  19: 1014138.961 ops/s
Iteration  20: 1037025.938 ops/s
Iteration  21: 967305.942 ops/s
Iteration  22: 975879.548 ops/s
Iteration  23: 976405.723 ops/s
Iteration  24: 978056.969 ops/s
Iteration  25: 975872.409 ops/s
Iteration  26: 967547.150 ops/s
Iteration  27: 982906.505 ops/s
Iteration  28: 971568.167 ops/s
Iteration  29: 958670.290 ops/s
Iteration  30: 963133.276 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator":
  988370.654 ±(99.9%) 16153.616 ops/s [Average]
  (min, avg, max) = (958670.290, 988370.654, 1037877.034), stdev = 24177.974
  CI (99.9%): [972217.038, 1004524.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator  thrpt   30  988370.654 ± 16153.616  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1105914.199 ops/s
# Warmup Iteration   2: 2671462.425 ops/s
# Warmup Iteration   3: 2775999.760 ops/s
# Warmup Iteration   4: 2331368.586 ops/s
# Warmup Iteration   5: 2788118.245 ops/s
# Warmup Iteration   6: 2941647.799 ops/s
# Warmup Iteration   7: 2791790.340 ops/s
# Warmup Iteration   8: 2945395.911 ops/s
# Warmup Iteration   9: 2798827.287 ops/s
# Warmup Iteration  10: 2853665.409 ops/s
# Warmup Iteration  11: 2878371.907 ops/s
# Warmup Iteration  12: 2836748.843 ops/s
# Warmup Iteration  13: 2878763.052 ops/s
# Warmup Iteration  14: 2794346.456 ops/s
# Warmup Iteration  15: 2799550.852 ops/s
# Warmup Iteration  16: 2823366.753 ops/s
# Warmup Iteration  17: 2833019.427 ops/s
# Warmup Iteration  18: 2875095.493 ops/s
# Warmup Iteration  19: 2991973.995 ops/s
# Warmup Iteration  20: 2924788.353 ops/s
# Warmup Iteration  21: 2840882.336 ops/s
# Warmup Iteration  22: 2838338.522 ops/s
# Warmup Iteration  23: 2833371.708 ops/s
# Warmup Iteration  24: 2761271.254 ops/s
# Warmup Iteration  25: 2815988.816 ops/s
# Warmup Iteration  26: 2803555.427 ops/s
# Warmup Iteration  27: 2800475.645 ops/s
# Warmup Iteration  28: 2784279.431 ops/s
# Warmup Iteration  29: 2786528.314 ops/s
# Warmup Iteration  30: 2853456.116 ops/s
Iteration   1: 2790750.046 ops/s
Iteration   2: 2879995.057 ops/s
Iteration   3: 2880162.902 ops/s
Iteration   4: 2881724.465 ops/s
Iteration   5: 2808043.823 ops/s
Iteration   6: 2771903.749 ops/s
Iteration   7: 2793147.115 ops/s
Iteration   8: 2798559.902 ops/s
Iteration   9: 2839939.397 ops/s
Iteration  10: 2858436.272 ops/s
Iteration  11: 2856101.548 ops/s
Iteration  12: 2789172.957 ops/s
Iteration  13: 2760569.267 ops/s
Iteration  14: 2911802.636 ops/s
Iteration  15: 2808097.505 ops/s
Iteration  16: 2814868.124 ops/s
Iteration  17: 2906773.958 ops/s
Iteration  18: 2952900.802 ops/s
Iteration  19: 2989253.542 ops/s
Iteration  20: 2991335.366 ops/s
Iteration  21: 2992592.365 ops/s
Iteration  22: 2988604.400 ops/s
Iteration  23: 2992757.383 ops/s
Iteration  24: 2987928.297 ops/s
Iteration  25: 2987252.962 ops/s
Iteration  26: 2995439.139 ops/s
Iteration  27: 2991207.025 ops/s
Iteration  28: 2991370.150 ops/s
Iteration  29: 2980691.229 ops/s
Iteration  30: 2985790.069 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedListBy":
  2899239.048 ±(99.9%) 57340.313 ops/s [Average]
  (min, avg, max) = (2760569.267, 2899239.048, 2995439.139), stdev = 85824.288
  CI (99.9%): [2841898.736, 2956579.361] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedListBy  thrpt   30  2899239.048 ± 57340.313  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 645565.757 ops/s
# Warmup Iteration   2: 925019.305 ops/s
# Warmup Iteration   3: 1141368.085 ops/s
# Warmup Iteration   4: 1129280.198 ops/s
# Warmup Iteration   5: 1161330.015 ops/s
# Warmup Iteration   6: 1156412.624 ops/s
# Warmup Iteration   7: 1114076.668 ops/s
# Warmup Iteration   8: 968480.201 ops/s
# Warmup Iteration   9: 1145699.214 ops/s
# Warmup Iteration  10: 1157184.776 ops/s
# Warmup Iteration  11: 1168365.544 ops/s
# Warmup Iteration  12: 1140294.869 ops/s
# Warmup Iteration  13: 1129237.579 ops/s
# Warmup Iteration  14: 1134113.799 ops/s
# Warmup Iteration  15: 1149523.586 ops/s
# Warmup Iteration  16: 1162517.963 ops/s
# Warmup Iteration  17: 1199611.409 ops/s
# Warmup Iteration  18: 1141892.491 ops/s
# Warmup Iteration  19: 1123524.299 ops/s
# Warmup Iteration  20: 1108731.214 ops/s
# Warmup Iteration  21: 1128236.222 ops/s
# Warmup Iteration  22: 1141117.677 ops/s
# Warmup Iteration  23: 1134659.535 ops/s
# Warmup Iteration  24: 1117654.869 ops/s
# Warmup Iteration  25: 1211868.018 ops/s
# Warmup Iteration  26: 1176822.353 ops/s
# Warmup Iteration  27: 1138158.658 ops/s
# Warmup Iteration  28: 1159869.692 ops/s
# Warmup Iteration  29: 1131974.877 ops/s
# Warmup Iteration  30: 1176169.042 ops/s
Iteration   1: 1170983.197 ops/s
Iteration   2: 1138535.800 ops/s
Iteration   3: 1168102.272 ops/s
Iteration   4: 1168400.579 ops/s
Iteration   5: 1198301.405 ops/s
Iteration   6: 1156442.013 ops/s
Iteration   7: 1166957.668 ops/s
Iteration   8: 1189989.595 ops/s
Iteration   9: 1121678.101 ops/s
Iteration  10: 1164733.821 ops/s
Iteration  11: 1191672.155 ops/s
Iteration  12: 1143748.060 ops/s
Iteration  13: 1137014.700 ops/s
Iteration  14: 1180359.098 ops/s
Iteration  15: 1214505.977 ops/s
Iteration  16: 1196808.258 ops/s
Iteration  17: 1178492.998 ops/s
Iteration  18: 1118660.093 ops/s
Iteration  19: 1127324.368 ops/s
Iteration  20: 1122812.956 ops/s
Iteration  21: 1092474.791 ops/s
Iteration  22: 1124289.149 ops/s
Iteration  23: 1131012.486 ops/s
Iteration  24: 1120251.024 ops/s
Iteration  25: 1139817.432 ops/s
Iteration  26: 1126454.680 ops/s
Iteration  27: 1135797.265 ops/s
Iteration  28: 1135467.949 ops/s
Iteration  29: 1120269.045 ops/s
Iteration  30: 1120885.880 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering":
  1150074.761 ±(99.9%) 20311.107 ops/s [Average]
  (min, avg, max) = (1092474.791, 1150074.761, 1214505.977), stdev = 30400.711
  CI (99.9%): [1129763.654, 1170385.867] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering  thrpt   30  1150074.761 ± 20311.107  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1595535.327 ops/s
# Warmup Iteration   2: 3105846.285 ops/s
# Warmup Iteration   3: 3269738.533 ops/s
# Warmup Iteration   4: 3332210.794 ops/s
# Warmup Iteration   5: 2970197.887 ops/s
# Warmup Iteration   6: 3098914.064 ops/s
# Warmup Iteration   7: 3398551.405 ops/s
# Warmup Iteration   8: 3433031.488 ops/s
# Warmup Iteration   9: 3563638.394 ops/s
# Warmup Iteration  10: 3566831.730 ops/s
# Warmup Iteration  11: 3565788.412 ops/s
# Warmup Iteration  12: 3564033.458 ops/s
# Warmup Iteration  13: 3565526.275 ops/s
# Warmup Iteration  14: 3557467.465 ops/s
# Warmup Iteration  15: 3526818.062 ops/s
# Warmup Iteration  16: 3332575.367 ops/s
# Warmup Iteration  17: 3305845.096 ops/s
# Warmup Iteration  18: 3336912.826 ops/s
# Warmup Iteration  19: 3352928.416 ops/s
# Warmup Iteration  20: 3324963.296 ops/s
# Warmup Iteration  21: 3381833.557 ops/s
# Warmup Iteration  22: 3269301.216 ops/s
# Warmup Iteration  23: 3296236.345 ops/s
# Warmup Iteration  24: 3315622.866 ops/s
# Warmup Iteration  25: 3310177.834 ops/s
# Warmup Iteration  26: 3297937.778 ops/s
# Warmup Iteration  27: 3324209.272 ops/s
# Warmup Iteration  28: 3329599.374 ops/s
# Warmup Iteration  29: 3329420.104 ops/s
# Warmup Iteration  30: 3280764.310 ops/s
Iteration   1: 3345597.235 ops/s
Iteration   2: 3300834.761 ops/s
Iteration   3: 3285168.400 ops/s
Iteration   4: 3263938.228 ops/s
Iteration   5: 3317328.443 ops/s
Iteration   6: 3330941.087 ops/s
Iteration   7: 3301231.759 ops/s
Iteration   8: 3381086.895 ops/s
Iteration   9: 3357601.553 ops/s
Iteration  10: 3423333.749 ops/s
Iteration  11: 3372276.785 ops/s
Iteration  12: 3410070.319 ops/s
Iteration  13: 3420237.495 ops/s
Iteration  14: 3382504.438 ops/s
Iteration  15: 3303537.849 ops/s
Iteration  16: 3407460.486 ops/s
Iteration  17: 3317998.068 ops/s
Iteration  18: 3333631.594 ops/s
Iteration  19: 3317129.456 ops/s
Iteration  20: 3309319.509 ops/s
Iteration  21: 3315303.484 ops/s
Iteration  22: 3426185.944 ops/s
Iteration  23: 3325899.603 ops/s
Iteration  24: 3307880.003 ops/s
Iteration  25: 3329515.421 ops/s
Iteration  26: 3401042.241 ops/s
Iteration  27: 3325275.847 ops/s
Iteration  28: 3341825.415 ops/s
Iteration  29: 3267110.139 ops/s
Iteration  30: 3371947.405 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator":
  3343107.120 ±(99.9%) 31098.874 ops/s [Average]
  (min, avg, max) = (3263938.228, 3343107.120, 3426185.944), stdev = 46547.334
  CI (99.9%): [3312008.246, 3374205.995] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator  thrpt   30  3343107.120 ± 31098.874  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 499869.455 ops/s
# Warmup Iteration   2: 1089235.340 ops/s
# Warmup Iteration   3: 1223750.974 ops/s
# Warmup Iteration   4: 1214941.044 ops/s
# Warmup Iteration   5: 997855.425 ops/s
# Warmup Iteration   6: 1183558.629 ops/s
# Warmup Iteration   7: 1203465.655 ops/s
# Warmup Iteration   8: 1198108.259 ops/s
# Warmup Iteration   9: 1204065.493 ops/s
# Warmup Iteration  10: 1208371.739 ops/s
# Warmup Iteration  11: 1195717.696 ops/s
# Warmup Iteration  12: 1196970.243 ops/s
# Warmup Iteration  13: 1176358.328 ops/s
# Warmup Iteration  14: 1182538.766 ops/s
# Warmup Iteration  15: 1190988.323 ops/s
# Warmup Iteration  16: 1188807.832 ops/s
# Warmup Iteration  17: 1192829.158 ops/s
# Warmup Iteration  18: 1210433.888 ops/s
# Warmup Iteration  19: 1201458.408 ops/s
# Warmup Iteration  20: 1208464.754 ops/s
# Warmup Iteration  21: 1220871.840 ops/s
# Warmup Iteration  22: 1223863.935 ops/s
# Warmup Iteration  23: 1278090.736 ops/s
# Warmup Iteration  24: 1285799.471 ops/s
# Warmup Iteration  25: 1284172.317 ops/s
# Warmup Iteration  26: 1284142.778 ops/s
# Warmup Iteration  27: 1284500.736 ops/s
# Warmup Iteration  28: 1284462.418 ops/s
# Warmup Iteration  29: 1283826.396 ops/s
# Warmup Iteration  30: 1246356.486 ops/s
Iteration   1: 1207286.185 ops/s
Iteration   2: 1212333.784 ops/s
Iteration   3: 1199398.153 ops/s
Iteration   4: 1214407.789 ops/s
Iteration   5: 1196257.190 ops/s
Iteration   6: 1207115.319 ops/s
Iteration   7: 1244168.579 ops/s
Iteration   8: 1249706.411 ops/s
Iteration   9: 1188723.195 ops/s
Iteration  10: 1232215.558 ops/s
Iteration  11: 1209697.052 ops/s
Iteration  12: 1189034.221 ops/s
Iteration  13: 1193083.261 ops/s
Iteration  14: 1209072.643 ops/s
Iteration  15: 1207706.376 ops/s
Iteration  16: 1191514.066 ops/s
Iteration  17: 1195274.665 ops/s
Iteration  18: 1200777.059 ops/s
Iteration  19: 1184107.382 ops/s
Iteration  20: 1199189.768 ops/s
Iteration  21: 1228813.292 ops/s
Iteration  22: 1200941.614 ops/s
Iteration  23: 1189026.172 ops/s
Iteration  24: 1210291.320 ops/s
Iteration  25: 1194941.512 ops/s
Iteration  26: 1201350.781 ops/s
Iteration  27: 1208227.865 ops/s
Iteration  28: 1220327.266 ops/s
Iteration  29: 1204595.067 ops/s
Iteration  30: 1190530.019 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedSetBy":
  1206003.785 ±(99.9%) 10680.847 ops/s [Average]
  (min, avg, max) = (1184107.382, 1206003.785, 1249706.411), stdev = 15986.590
  CI (99.9%): [1195322.938, 1216684.632] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedSetBy  thrpt   30  1206003.785 ± 10680.847  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 571666.095 ops/s
# Warmup Iteration   2: 1044834.395 ops/s
# Warmup Iteration   3: 1271061.754 ops/s
# Warmup Iteration   4: 1299270.700 ops/s
# Warmup Iteration   5: 1207747.468 ops/s
# Warmup Iteration   6: 1007763.057 ops/s
# Warmup Iteration   7: 1223904.239 ops/s
# Warmup Iteration   8: 1255865.170 ops/s
# Warmup Iteration   9: 1302562.328 ops/s
# Warmup Iteration  10: 1262449.365 ops/s
# Warmup Iteration  11: 1232138.599 ops/s
# Warmup Iteration  12: 1235186.559 ops/s
# Warmup Iteration  13: 1237518.137 ops/s
# Warmup Iteration  14: 1237246.425 ops/s
# Warmup Iteration  15: 1246525.125 ops/s
# Warmup Iteration  16: 1217639.599 ops/s
# Warmup Iteration  17: 1272696.151 ops/s
# Warmup Iteration  18: 1215039.682 ops/s
# Warmup Iteration  19: 1301377.222 ops/s
# Warmup Iteration  20: 1258003.831 ops/s
# Warmup Iteration  21: 1249487.433 ops/s
# Warmup Iteration  22: 1227027.779 ops/s
# Warmup Iteration  23: 1214175.566 ops/s
# Warmup Iteration  24: 1217811.455 ops/s
# Warmup Iteration  25: 1253345.977 ops/s
# Warmup Iteration  26: 1200302.807 ops/s
# Warmup Iteration  27: 1231195.348 ops/s
# Warmup Iteration  28: 1202459.356 ops/s
# Warmup Iteration  29: 1201405.057 ops/s
# Warmup Iteration  30: 1241845.466 ops/s
Iteration   1: 1232230.601 ops/s
Iteration   2: 1238079.365 ops/s
Iteration   3: 1211031.126 ops/s
Iteration   4: 1221416.231 ops/s
Iteration   5: 1202556.947 ops/s
Iteration   6: 1200178.246 ops/s
Iteration   7: 1228352.706 ops/s
Iteration   8: 1188488.865 ops/s
Iteration   9: 1202021.529 ops/s
Iteration  10: 1218005.440 ops/s
Iteration  11: 1239425.045 ops/s
Iteration  12: 1196272.722 ops/s
Iteration  13: 1224218.845 ops/s
Iteration  14: 1272669.108 ops/s
Iteration  15: 1303830.949 ops/s
Iteration  16: 1307061.771 ops/s
Iteration  17: 1302904.282 ops/s
Iteration  18: 1301699.421 ops/s
Iteration  19: 1307866.486 ops/s
Iteration  20: 1302245.371 ops/s
Iteration  21: 1305643.089 ops/s
Iteration  22: 1305635.487 ops/s
Iteration  23: 1301972.196 ops/s
Iteration  24: 1307407.603 ops/s
Iteration  25: 1303252.871 ops/s
Iteration  26: 1304717.683 ops/s
Iteration  27: 1304110.058 ops/s
Iteration  28: 1288000.840 ops/s
Iteration  29: 1194164.377 ops/s
Iteration  30: 1211426.116 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator":
  1257562.846 ±(99.9%) 30957.913 ops/s [Average]
  (min, avg, max) = (1188488.865, 1257562.846, 1307866.486), stdev = 46336.351
  CI (99.9%): [1226604.932, 1288520.759] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator  thrpt   30  1257562.846 ± 30957.913  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 574649.373 ops/s
# Warmup Iteration   2: 1015129.731 ops/s
# Warmup Iteration   3: 1147623.923 ops/s
# Warmup Iteration   4: 1148775.940 ops/s
# Warmup Iteration   5: 1178651.949 ops/s
# Warmup Iteration   6: 983391.954 ops/s
# Warmup Iteration   7: 1245941.831 ops/s
# Warmup Iteration   8: 1213675.668 ops/s
# Warmup Iteration   9: 1200405.189 ops/s
# Warmup Iteration  10: 1207427.358 ops/s
# Warmup Iteration  11: 1195072.945 ops/s
# Warmup Iteration  12: 1191341.290 ops/s
# Warmup Iteration  13: 1176900.848 ops/s
# Warmup Iteration  14: 1167425.688 ops/s
# Warmup Iteration  15: 1203070.379 ops/s
# Warmup Iteration  16: 1195521.727 ops/s
# Warmup Iteration  17: 1164142.474 ops/s
# Warmup Iteration  18: 1182199.850 ops/s
# Warmup Iteration  19: 1178463.147 ops/s
# Warmup Iteration  20: 1228213.800 ops/s
# Warmup Iteration  21: 1193355.436 ops/s
# Warmup Iteration  22: 1170725.876 ops/s
# Warmup Iteration  23: 1217649.219 ops/s
# Warmup Iteration  24: 1159419.660 ops/s
# Warmup Iteration  25: 1169387.872 ops/s
# Warmup Iteration  26: 1165256.748 ops/s
# Warmup Iteration  27: 1153876.726 ops/s
# Warmup Iteration  28: 1179699.131 ops/s
# Warmup Iteration  29: 1204030.651 ops/s
# Warmup Iteration  30: 1187973.655 ops/s
Iteration   1: 1240779.182 ops/s
Iteration   2: 1186983.429 ops/s
Iteration   3: 1198831.635 ops/s
Iteration   4: 1192763.639 ops/s
Iteration   5: 1192205.032 ops/s
Iteration   6: 1185847.877 ops/s
Iteration   7: 1191869.625 ops/s
Iteration   8: 1167090.495 ops/s
Iteration   9: 1186050.614 ops/s
Iteration  10: 1191064.371 ops/s
Iteration  11: 1167191.416 ops/s
Iteration  12: 1150049.882 ops/s
Iteration  13: 1143045.674 ops/s
Iteration  14: 1162119.687 ops/s
Iteration  15: 1183500.393 ops/s
Iteration  16: 1151205.545 ops/s
Iteration  17: 1158414.878 ops/s
Iteration  18: 1170772.476 ops/s
Iteration  19: 1188851.425 ops/s
Iteration  20: 1200655.927 ops/s
Iteration  21: 1176148.285 ops/s
Iteration  22: 1165111.221 ops/s
Iteration  23: 1217085.677 ops/s
Iteration  24: 1152187.613 ops/s
Iteration  25: 1152696.775 ops/s
Iteration  26: 1159649.394 ops/s
Iteration  27: 1164935.255 ops/s
Iteration  28: 1190391.793 ops/s
Iteration  29: 1178301.939 ops/s
Iteration  30: 1207087.386 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toList":
  1179096.285 ±(99.9%) 14755.992 ops/s [Average]
  (min, avg, max) = (1143045.674, 1179096.285, 1240779.182), stdev = 22086.076
  CI (99.9%): [1164340.292, 1193852.277] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toList  thrpt   30  1179096.285 ± 14755.992  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 417602.592 ops/s
# Warmup Iteration   2: 844294.445 ops/s
# Warmup Iteration   3: 854884.215 ops/s
# Warmup Iteration   4: 859960.958 ops/s
# Warmup Iteration   5: 714371.500 ops/s
# Warmup Iteration   6: 855506.854 ops/s
# Warmup Iteration   7: 891966.535 ops/s
# Warmup Iteration   8: 893464.131 ops/s
# Warmup Iteration   9: 891811.099 ops/s
# Warmup Iteration  10: 892249.436 ops/s
# Warmup Iteration  11: 893444.541 ops/s
# Warmup Iteration  12: 891628.008 ops/s
# Warmup Iteration  13: 877159.933 ops/s
# Warmup Iteration  14: 838053.428 ops/s
# Warmup Iteration  15: 839824.013 ops/s
# Warmup Iteration  16: 835325.614 ops/s
# Warmup Iteration  17: 849604.484 ops/s
# Warmup Iteration  18: 886848.037 ops/s
# Warmup Iteration  19: 843471.321 ops/s
# Warmup Iteration  20: 844582.023 ops/s
# Warmup Iteration  21: 857572.428 ops/s
# Warmup Iteration  22: 843722.868 ops/s
# Warmup Iteration  23: 867671.893 ops/s
# Warmup Iteration  24: 839059.424 ops/s
# Warmup Iteration  25: 890777.318 ops/s
# Warmup Iteration  26: 895862.161 ops/s
# Warmup Iteration  27: 853774.058 ops/s
# Warmup Iteration  28: 831545.579 ops/s
# Warmup Iteration  29: 841815.155 ops/s
# Warmup Iteration  30: 846638.814 ops/s
Iteration   1: 858514.353 ops/s
Iteration   2: 814177.417 ops/s
Iteration   3: 870675.163 ops/s
Iteration   4: 857143.105 ops/s
Iteration   5: 838847.251 ops/s
Iteration   6: 855019.701 ops/s
Iteration   7: 829192.841 ops/s
Iteration   8: 838878.855 ops/s
Iteration   9: 830139.555 ops/s
Iteration  10: 823237.465 ops/s
Iteration  11: 836682.205 ops/s
Iteration  12: 825217.421 ops/s
Iteration  13: 847624.540 ops/s
Iteration  14: 865125.067 ops/s
Iteration  15: 836614.598 ops/s
Iteration  16: 836005.920 ops/s
Iteration  17: 877699.753 ops/s
Iteration  18: 874323.500 ops/s
Iteration  19: 831259.980 ops/s
Iteration  20: 830106.621 ops/s
Iteration  21: 822151.323 ops/s
Iteration  22: 890926.501 ops/s
Iteration  23: 857649.072 ops/s
Iteration  24: 854087.430 ops/s
Iteration  25: 870187.075 ops/s
Iteration  26: 849387.936 ops/s
Iteration  27: 889400.574 ops/s
Iteration  28: 893238.086 ops/s
Iteration  29: 889773.299 ops/s
Iteration  30: 892815.463 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toMap":
  852870.069 ±(99.9%) 16023.877 ops/s [Average]
  (min, avg, max) = (814177.417, 852870.069, 893238.086), stdev = 23983.786
  CI (99.9%): [836846.192, 868893.946] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toMap  thrpt   30  852870.069 ± 16023.877  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toMapOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toMapOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 625414.448 ops/s
# Warmup Iteration   2: 1210851.095 ops/s
# Warmup Iteration   3: 1366102.152 ops/s
# Warmup Iteration   4: 1341000.644 ops/s
# Warmup Iteration   5: 1101653.372 ops/s
# Warmup Iteration   6: 1309341.293 ops/s
# Warmup Iteration   7: 1289662.572 ops/s
# Warmup Iteration   8: 1319359.218 ops/s
# Warmup Iteration   9: 1301467.290 ops/s
# Warmup Iteration  10: 1305485.864 ops/s
# Warmup Iteration  11: 1276254.721 ops/s
# Warmup Iteration  12: 1323282.066 ops/s
# Warmup Iteration  13: 1343084.697 ops/s
# Warmup Iteration  14: 1311587.430 ops/s
# Warmup Iteration  15: 1351156.376 ops/s
# Warmup Iteration  16: 1372550.079 ops/s
# Warmup Iteration  17: 1316450.306 ops/s
# Warmup Iteration  18: 1273870.056 ops/s
# Warmup Iteration  19: 1266139.313 ops/s
# Warmup Iteration  20: 1292072.319 ops/s
# Warmup Iteration  21: 1374672.768 ops/s
# Warmup Iteration  22: 1317974.525 ops/s
# Warmup Iteration  23: 1376198.153 ops/s
# Warmup Iteration  24: 1374132.078 ops/s
# Warmup Iteration  25: 1367985.964 ops/s
# Warmup Iteration  26: 1377023.023 ops/s
# Warmup Iteration  27: 1373253.743 ops/s
# Warmup Iteration  28: 1301373.367 ops/s
# Warmup Iteration  29: 1322477.631 ops/s
# Warmup Iteration  30: 1304266.383 ops/s
Iteration   1: 1278322.630 ops/s
Iteration   2: 1302152.175 ops/s
Iteration   3: 1286474.000 ops/s
Iteration   4: 1300203.038 ops/s
Iteration   5: 1317773.170 ops/s
Iteration   6: 1277167.892 ops/s
Iteration   7: 1303762.012 ops/s
Iteration   8: 1289657.451 ops/s
Iteration   9: 1302328.944 ops/s
Iteration  10: 1275715.991 ops/s
Iteration  11: 1271369.112 ops/s
Iteration  12: 1265140.002 ops/s
Iteration  13: 1265716.093 ops/s
Iteration  14: 1302703.833 ops/s
Iteration  15: 1278034.572 ops/s
Iteration  16: 1271893.853 ops/s
Iteration  17: 1325157.749 ops/s
Iteration  18: 1303033.750 ops/s
Iteration  19: 1298499.866 ops/s
Iteration  20: 1311308.863 ops/s
Iteration  21: 1304712.441 ops/s
Iteration  22: 1305344.835 ops/s
Iteration  23: 1296987.378 ops/s
Iteration  24: 1325305.370 ops/s
Iteration  25: 1348821.272 ops/s
Iteration  26: 1357677.930 ops/s
Iteration  27: 1313368.222 ops/s
Iteration  28: 1290635.083 ops/s
Iteration  29: 1314151.952 ops/s
Iteration  30: 1295745.333 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toMapOfItemToCount":
  1299305.494 ±(99.9%) 14864.114 ops/s [Average]
  (min, avg, max) = (1265140.002, 1299305.494, 1357677.930), stdev = 22247.908
  CI (99.9%): [1284441.380, 1314169.608] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toMapOfItemToCount  thrpt   30  1299305.494 ± 14864.114  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toMapTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toMapTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 644832.415 ops/s
# Warmup Iteration   2: 1383746.789 ops/s
# Warmup Iteration   3: 1460627.909 ops/s
# Warmup Iteration   4: 1495487.699 ops/s
# Warmup Iteration   5: 1241861.211 ops/s
# Warmup Iteration   6: 1554344.905 ops/s
# Warmup Iteration   7: 1571270.027 ops/s
# Warmup Iteration   8: 1487059.014 ops/s
# Warmup Iteration   9: 1498280.099 ops/s
# Warmup Iteration  10: 1480584.983 ops/s
# Warmup Iteration  11: 1471651.509 ops/s
# Warmup Iteration  12: 1485895.770 ops/s
# Warmup Iteration  13: 1468333.600 ops/s
# Warmup Iteration  14: 1484085.205 ops/s
# Warmup Iteration  15: 1489582.207 ops/s
# Warmup Iteration  16: 1480466.255 ops/s
# Warmup Iteration  17: 1489164.347 ops/s
# Warmup Iteration  18: 1502345.416 ops/s
# Warmup Iteration  19: 1545494.989 ops/s
# Warmup Iteration  20: 1483012.384 ops/s
# Warmup Iteration  21: 1515591.119 ops/s
# Warmup Iteration  22: 1544969.821 ops/s
# Warmup Iteration  23: 1511305.045 ops/s
# Warmup Iteration  24: 1508524.296 ops/s
# Warmup Iteration  25: 1547337.886 ops/s
# Warmup Iteration  26: 1528051.351 ops/s
# Warmup Iteration  27: 1486008.336 ops/s
# Warmup Iteration  28: 1554810.755 ops/s
# Warmup Iteration  29: 1508479.726 ops/s
# Warmup Iteration  30: 1513375.539 ops/s
Iteration   1: 1471437.377 ops/s
Iteration   2: 1498076.070 ops/s
Iteration   3: 1523785.443 ops/s
Iteration   4: 1508599.770 ops/s
Iteration   5: 1465907.390 ops/s
Iteration   6: 1527216.111 ops/s
Iteration   7: 1559033.488 ops/s
Iteration   8: 1500809.886 ops/s
Iteration   9: 1521939.540 ops/s
Iteration  10: 1583787.578 ops/s
Iteration  11: 1581861.590 ops/s
Iteration  12: 1582532.348 ops/s
Iteration  13: 1581875.420 ops/s
Iteration  14: 1582716.339 ops/s
Iteration  15: 1585117.311 ops/s
Iteration  16: 1582442.634 ops/s
Iteration  17: 1580426.769 ops/s
Iteration  18: 1582703.384 ops/s
Iteration  19: 1575894.695 ops/s
Iteration  20: 1583454.999 ops/s
Iteration  21: 1581233.933 ops/s
Iteration  22: 1579545.311 ops/s
Iteration  23: 1578876.648 ops/s
Iteration  24: 1584335.258 ops/s
Iteration  25: 1554552.735 ops/s
Iteration  26: 1480724.009 ops/s
Iteration  27: 1492665.575 ops/s
Iteration  28: 1489606.874 ops/s
Iteration  29: 1492939.633 ops/s
Iteration  30: 1521384.385 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toMapTarget":
  1544516.083 ±(99.9%) 28375.285 ops/s [Average]
  (min, avg, max) = (1465907.390, 1544516.083, 1585117.311), stdev = 42470.795
  CI (99.9%): [1516140.798, 1572891.369] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toMapTarget  thrpt   30  1544516.083 ± 28375.285  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 461447.382 ops/s
# Warmup Iteration   2: 782624.208 ops/s
# Warmup Iteration   3: 918689.802 ops/s
# Warmup Iteration   4: 960978.480 ops/s
# Warmup Iteration   5: 921360.263 ops/s
# Warmup Iteration   6: 778809.429 ops/s
# Warmup Iteration   7: 922967.437 ops/s
# Warmup Iteration   8: 932881.216 ops/s
# Warmup Iteration   9: 930766.272 ops/s
# Warmup Iteration  10: 922952.167 ops/s
# Warmup Iteration  11: 923977.607 ops/s
# Warmup Iteration  12: 939418.418 ops/s
# Warmup Iteration  13: 945227.489 ops/s
# Warmup Iteration  14: 940536.200 ops/s
# Warmup Iteration  15: 954379.176 ops/s
# Warmup Iteration  16: 940804.609 ops/s
# Warmup Iteration  17: 937446.351 ops/s
# Warmup Iteration  18: 923131.063 ops/s
# Warmup Iteration  19: 940818.874 ops/s
# Warmup Iteration  20: 918992.019 ops/s
# Warmup Iteration  21: 939557.683 ops/s
# Warmup Iteration  22: 946284.896 ops/s
# Warmup Iteration  23: 940408.654 ops/s
# Warmup Iteration  24: 930474.082 ops/s
# Warmup Iteration  25: 914698.597 ops/s
# Warmup Iteration  26: 924359.843 ops/s
# Warmup Iteration  27: 927847.782 ops/s
# Warmup Iteration  28: 932969.822 ops/s
# Warmup Iteration  29: 938779.064 ops/s
# Warmup Iteration  30: 935472.221 ops/s
Iteration   1: 940335.819 ops/s
Iteration   2: 912215.099 ops/s
Iteration   3: 935454.728 ops/s
Iteration   4: 910493.291 ops/s
Iteration   5: 919854.427 ops/s
Iteration   6: 918944.525 ops/s
Iteration   7: 924444.532 ops/s
Iteration   8: 941585.380 ops/s
Iteration   9: 918009.184 ops/s
Iteration  10: 931273.646 ops/s
Iteration  11: 924751.384 ops/s
Iteration  12: 904463.743 ops/s
Iteration  13: 916373.358 ops/s
Iteration  14: 937871.698 ops/s
Iteration  15: 921548.522 ops/s
Iteration  16: 921626.386 ops/s
Iteration  17: 918572.279 ops/s
Iteration  18: 939012.386 ops/s
Iteration  19: 922502.330 ops/s
Iteration  20: 906107.775 ops/s
Iteration  21: 917901.005 ops/s
Iteration  22: 912463.564 ops/s
Iteration  23: 922381.680 ops/s
Iteration  24: 906297.596 ops/s
Iteration  25: 919017.738 ops/s
Iteration  26: 924276.271 ops/s
Iteration  27: 917477.965 ops/s
Iteration  28: 920542.193 ops/s
Iteration  29: 931051.758 ops/s
Iteration  30: 910120.814 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSet":
  921565.703 ±(99.9%) 6809.256 ops/s [Average]
  (min, avg, max) = (904463.743, 921565.703, 941585.380), stdev = 10191.775
  CI (99.9%): [914756.446, 928374.959] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toSet  thrpt   30  921565.703 ± 6809.256  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 125365.465 ops/s
# Warmup Iteration   2: 235137.018 ops/s
# Warmup Iteration   3: 285392.613 ops/s
# Warmup Iteration   4: 299898.296 ops/s
# Warmup Iteration   5: 295166.282 ops/s
# Warmup Iteration   6: 253344.655 ops/s
# Warmup Iteration   7: 301476.344 ops/s
# Warmup Iteration   8: 301754.009 ops/s
# Warmup Iteration   9: 301666.296 ops/s
# Warmup Iteration  10: 301714.247 ops/s
# Warmup Iteration  11: 292785.583 ops/s
# Warmup Iteration  12: 285252.737 ops/s
# Warmup Iteration  13: 287567.887 ops/s
# Warmup Iteration  14: 292218.133 ops/s
# Warmup Iteration  15: 285497.681 ops/s
# Warmup Iteration  16: 293803.589 ops/s
# Warmup Iteration  17: 290392.334 ops/s
# Warmup Iteration  18: 284904.344 ops/s
# Warmup Iteration  19: 291164.072 ops/s
# Warmup Iteration  20: 282948.207 ops/s
# Warmup Iteration  21: 287061.215 ops/s
# Warmup Iteration  22: 285468.813 ops/s
# Warmup Iteration  23: 284451.983 ops/s
# Warmup Iteration  24: 287420.600 ops/s
# Warmup Iteration  25: 282732.567 ops/s
# Warmup Iteration  26: 287228.115 ops/s
# Warmup Iteration  27: 289528.356 ops/s
# Warmup Iteration  28: 287090.847 ops/s
# Warmup Iteration  29: 288222.195 ops/s
# Warmup Iteration  30: 283205.189 ops/s
Iteration   1: 283390.107 ops/s
Iteration   2: 285774.251 ops/s
Iteration   3: 288870.464 ops/s
Iteration   4: 282809.215 ops/s
Iteration   5: 290850.196 ops/s
Iteration   6: 287086.685 ops/s
Iteration   7: 285995.394 ops/s
Iteration   8: 287112.868 ops/s
Iteration   9: 288302.444 ops/s
Iteration  10: 285973.303 ops/s
Iteration  11: 280753.486 ops/s
Iteration  12: 280566.869 ops/s
Iteration  13: 284640.430 ops/s
Iteration  14: 283541.526 ops/s
Iteration  15: 284700.106 ops/s
Iteration  16: 288277.161 ops/s
Iteration  17: 291213.462 ops/s
Iteration  18: 285013.532 ops/s
Iteration  19: 291372.089 ops/s
Iteration  20: 285869.125 ops/s
Iteration  21: 281976.565 ops/s
Iteration  22: 295963.796 ops/s
Iteration  23: 288684.746 ops/s
Iteration  24: 284483.808 ops/s
Iteration  25: 283293.177 ops/s
Iteration  26: 281961.124 ops/s
Iteration  27: 285046.587 ops/s
Iteration  28: 284959.670 ops/s
Iteration  29: 286975.465 ops/s
Iteration  30: 288274.351 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedBagBy":
  286124.400 ±(99.9%) 2293.144 ops/s [Average]
  (min, avg, max) = (280566.869, 286124.400, 295963.796), stdev = 3432.270
  CI (99.9%): [283831.256, 288417.544] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  286124.400 ± 2293.144  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 265934.809 ops/s
# Warmup Iteration   2: 478132.443 ops/s
# Warmup Iteration   3: 527027.565 ops/s
# Warmup Iteration   4: 529935.810 ops/s
# Warmup Iteration   5: 522122.892 ops/s
# Warmup Iteration   6: 435480.030 ops/s
# Warmup Iteration   7: 526745.975 ops/s
# Warmup Iteration   8: 525594.476 ops/s
# Warmup Iteration   9: 518723.876 ops/s
# Warmup Iteration  10: 521001.560 ops/s
# Warmup Iteration  11: 520775.544 ops/s
# Warmup Iteration  12: 525326.902 ops/s
# Warmup Iteration  13: 528098.719 ops/s
# Warmup Iteration  14: 529014.502 ops/s
# Warmup Iteration  15: 526343.152 ops/s
# Warmup Iteration  16: 527959.201 ops/s
# Warmup Iteration  17: 520217.477 ops/s
# Warmup Iteration  18: 537754.234 ops/s
# Warmup Iteration  19: 559569.560 ops/s
# Warmup Iteration  20: 559828.149 ops/s
# Warmup Iteration  21: 558632.277 ops/s
# Warmup Iteration  22: 558894.322 ops/s
# Warmup Iteration  23: 559026.721 ops/s
# Warmup Iteration  24: 559056.029 ops/s
# Warmup Iteration  25: 557108.799 ops/s
# Warmup Iteration  26: 523853.384 ops/s
# Warmup Iteration  27: 520550.036 ops/s
# Warmup Iteration  28: 533786.538 ops/s
# Warmup Iteration  29: 557317.915 ops/s
# Warmup Iteration  30: 530125.215 ops/s
Iteration   1: 521974.877 ops/s
Iteration   2: 533292.838 ops/s
Iteration   3: 536304.226 ops/s
Iteration   4: 530333.485 ops/s
Iteration   5: 519928.540 ops/s
Iteration   6: 524785.101 ops/s
Iteration   7: 538049.713 ops/s
Iteration   8: 524496.118 ops/s
Iteration   9: 526140.949 ops/s
Iteration  10: 540050.431 ops/s
Iteration  11: 534088.774 ops/s
Iteration  12: 528153.874 ops/s
Iteration  13: 521617.451 ops/s
Iteration  14: 527923.234 ops/s
Iteration  15: 519648.099 ops/s
Iteration  16: 530670.108 ops/s
Iteration  17: 530406.513 ops/s
Iteration  18: 532405.090 ops/s
Iteration  19: 522769.279 ops/s
Iteration  20: 529617.099 ops/s
Iteration  21: 532277.423 ops/s
Iteration  22: 522292.073 ops/s
Iteration  23: 523373.284 ops/s
Iteration  24: 522968.819 ops/s
Iteration  25: 539774.611 ops/s
Iteration  26: 530255.450 ops/s
Iteration  27: 537453.603 ops/s
Iteration  28: 537871.036 ops/s
Iteration  29: 529147.037 ops/s
Iteration  30: 536440.705 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedBag_natural_ordering":
  529483.661 ±(99.9%) 4153.321 ops/s [Average]
  (min, avg, max) = (519648.099, 529483.661, 540050.431), stdev = 6216.495
  CI (99.9%): [525330.341, 533636.982] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedBag_natural_ordering  thrpt   30  529483.661 ± 4153.321  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 355611.395 ops/s
# Warmup Iteration   2: 648781.065 ops/s
# Warmup Iteration   3: 751915.434 ops/s
# Warmup Iteration   4: 754874.881 ops/s
# Warmup Iteration   5: 760313.937 ops/s
# Warmup Iteration   6: 641031.359 ops/s
# Warmup Iteration   7: 771482.061 ops/s
# Warmup Iteration   8: 777810.067 ops/s
# Warmup Iteration   9: 767982.571 ops/s
# Warmup Iteration  10: 782761.572 ops/s
# Warmup Iteration  11: 756885.565 ops/s
# Warmup Iteration  12: 770888.489 ops/s
# Warmup Iteration  13: 776408.799 ops/s
# Warmup Iteration  14: 771265.297 ops/s
# Warmup Iteration  15: 760568.804 ops/s
# Warmup Iteration  16: 764476.684 ops/s
# Warmup Iteration  17: 760923.275 ops/s
# Warmup Iteration  18: 779230.224 ops/s
# Warmup Iteration  19: 771558.759 ops/s
# Warmup Iteration  20: 753371.858 ops/s
# Warmup Iteration  21: 768115.708 ops/s
# Warmup Iteration  22: 771268.612 ops/s
# Warmup Iteration  23: 771030.466 ops/s
# Warmup Iteration  24: 756896.504 ops/s
# Warmup Iteration  25: 760136.986 ops/s
# Warmup Iteration  26: 741141.360 ops/s
# Warmup Iteration  27: 766180.609 ops/s
# Warmup Iteration  28: 776912.777 ops/s
# Warmup Iteration  29: 753531.794 ops/s
# Warmup Iteration  30: 754542.788 ops/s
Iteration   1: 757448.087 ops/s
Iteration   2: 759710.496 ops/s
Iteration   3: 762622.022 ops/s
Iteration   4: 760438.049 ops/s
Iteration   5: 788469.875 ops/s
Iteration   6: 804311.350 ops/s
Iteration   7: 803944.440 ops/s
Iteration   8: 804445.443 ops/s
Iteration   9: 803646.361 ops/s
Iteration  10: 805102.742 ops/s
Iteration  11: 802786.923 ops/s
Iteration  12: 803811.407 ops/s
Iteration  13: 805059.474 ops/s
Iteration  14: 803633.026 ops/s
Iteration  15: 805575.575 ops/s
Iteration  16: 802857.321 ops/s
Iteration  17: 804135.627 ops/s
Iteration  18: 805039.183 ops/s
Iteration  19: 801290.760 ops/s
Iteration  20: 782581.277 ops/s
Iteration  21: 794549.813 ops/s
Iteration  22: 786826.908 ops/s
Iteration  23: 763854.337 ops/s
Iteration  24: 775988.783 ops/s
Iteration  25: 767386.488 ops/s
Iteration  26: 757300.792 ops/s
Iteration  27: 784685.049 ops/s
Iteration  28: 758480.473 ops/s
Iteration  29: 761471.272 ops/s
Iteration  30: 761625.592 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedBag_with_comparator":
  785969.298 ±(99.9%) 13043.450 ops/s [Average]
  (min, avg, max) = (757300.792, 785969.298, 805575.575), stdev = 19522.824
  CI (99.9%): [772925.848, 799012.748] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedBag_with_comparator  thrpt   30  785969.298 ± 13043.450  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedBag_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedBag_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 375881.349 ops/s
# Warmup Iteration   2: 395589.865 ops/s
# Warmup Iteration   3: 517976.032 ops/s
# Warmup Iteration   4: 517184.528 ops/s
# Warmup Iteration   5: 524682.989 ops/s
# Warmup Iteration   6: 517730.419 ops/s
# Warmup Iteration   7: 533613.546 ops/s
# Warmup Iteration   8: 520567.287 ops/s
# Warmup Iteration   9: 515306.561 ops/s
# Warmup Iteration  10: 515505.454 ops/s
# Warmup Iteration  11: 516535.347 ops/s
# Warmup Iteration  12: 470534.071 ops/s
# Warmup Iteration  13: 504638.165 ops/s
# Warmup Iteration  14: 539232.451 ops/s
# Warmup Iteration  15: 530123.136 ops/s
# Warmup Iteration  16: 524279.721 ops/s
# Warmup Iteration  17: 550288.782 ops/s
# Warmup Iteration  18: 556098.816 ops/s
# Warmup Iteration  19: 542246.422 ops/s
# Warmup Iteration  20: 543362.564 ops/s
# Warmup Iteration  21: 570439.405 ops/s
# Warmup Iteration  22: 542456.150 ops/s
# Warmup Iteration  23: 550994.704 ops/s
# Warmup Iteration  24: 545530.524 ops/s
# Warmup Iteration  25: 547895.508 ops/s
# Warmup Iteration  26: 538561.194 ops/s
# Warmup Iteration  27: 544749.038 ops/s
# Warmup Iteration  28: 543533.666 ops/s
# Warmup Iteration  29: 562834.528 ops/s
# Warmup Iteration  30: 537198.045 ops/s
Iteration   1: 549675.564 ops/s
Iteration   2: 542391.354 ops/s
Iteration   3: 552507.883 ops/s
Iteration   4: 538653.955 ops/s
Iteration   5: 535723.125 ops/s
Iteration   6: 558302.417 ops/s
Iteration   7: 544111.619 ops/s
Iteration   8: 562305.818 ops/s
Iteration   9: 538987.034 ops/s
Iteration  10: 538724.979 ops/s
Iteration  11: 535399.023 ops/s
Iteration  12: 544233.484 ops/s
Iteration  13: 543855.900 ops/s
Iteration  14: 538048.607 ops/s
Iteration  15: 548624.825 ops/s
Iteration  16: 550955.757 ops/s
Iteration  17: 561893.222 ops/s
Iteration  18: 538253.087 ops/s
Iteration  19: 544105.318 ops/s
Iteration  20: 553345.182 ops/s
Iteration  21: 547342.194 ops/s
Iteration  22: 567552.361 ops/s
Iteration  23: 570550.892 ops/s
Iteration  24: 552681.341 ops/s
Iteration  25: 566510.520 ops/s
Iteration  26: 539613.334 ops/s
Iteration  27: 538253.146 ops/s
Iteration  28: 538174.392 ops/s
Iteration  29: 538641.695 ops/s
Iteration  30: 551123.205 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedBag_with_null":
  547684.708 ±(99.9%) 6826.927 ops/s [Average]
  (min, avg, max) = (535399.023, 547684.708, 570550.892), stdev = 10218.224
  CI (99.9%): [540857.781, 554511.635] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedBag_with_null  thrpt   30  547684.708 ± 6826.927  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 321197.086 ops/s
# Warmup Iteration   2: 601217.630 ops/s
# Warmup Iteration   3: 718514.189 ops/s
# Warmup Iteration   4: 721999.191 ops/s
# Warmup Iteration   5: 723042.731 ops/s
# Warmup Iteration   6: 594982.244 ops/s
# Warmup Iteration   7: 723907.802 ops/s
# Warmup Iteration   8: 722423.711 ops/s
# Warmup Iteration   9: 698690.715 ops/s
# Warmup Iteration  10: 694582.605 ops/s
# Warmup Iteration  11: 687456.369 ops/s
# Warmup Iteration  12: 677421.608 ops/s
# Warmup Iteration  13: 683017.239 ops/s
# Warmup Iteration  14: 681906.293 ops/s
# Warmup Iteration  15: 669979.094 ops/s
# Warmup Iteration  16: 676770.494 ops/s
# Warmup Iteration  17: 673114.466 ops/s
# Warmup Iteration  18: 694258.513 ops/s
# Warmup Iteration  19: 678320.220 ops/s
# Warmup Iteration  20: 685190.964 ops/s
# Warmup Iteration  21: 682687.817 ops/s
# Warmup Iteration  22: 677394.347 ops/s
# Warmup Iteration  23: 671872.615 ops/s
# Warmup Iteration  24: 675929.066 ops/s
# Warmup Iteration  25: 673336.182 ops/s
# Warmup Iteration  26: 676394.791 ops/s
# Warmup Iteration  27: 685272.656 ops/s
# Warmup Iteration  28: 693511.658 ops/s
# Warmup Iteration  29: 721171.806 ops/s
# Warmup Iteration  30: 691848.749 ops/s
Iteration   1: 704280.517 ops/s
Iteration   2: 720355.597 ops/s
Iteration   3: 683689.504 ops/s
Iteration   4: 680275.442 ops/s
Iteration   5: 695480.558 ops/s
Iteration   6: 720315.498 ops/s
Iteration   7: 685254.777 ops/s
Iteration   8: 673985.329 ops/s
Iteration   9: 676811.297 ops/s
Iteration  10: 702141.597 ops/s
Iteration  11: 690229.243 ops/s
Iteration  12: 708532.259 ops/s
Iteration  13: 710704.259 ops/s
Iteration  14: 670565.192 ops/s
Iteration  15: 673127.297 ops/s
Iteration  16: 672065.114 ops/s
Iteration  17: 692663.834 ops/s
Iteration  18: 694888.917 ops/s
Iteration  19: 685552.409 ops/s
Iteration  20: 690346.997 ops/s
Iteration  21: 679809.090 ops/s
Iteration  22: 678175.998 ops/s
Iteration  23: 681877.538 ops/s
Iteration  24: 684465.870 ops/s
Iteration  25: 683218.826 ops/s
Iteration  26: 674508.676 ops/s
Iteration  27: 705352.872 ops/s
Iteration  28: 680814.884 ops/s
Iteration  29: 701991.257 ops/s
Iteration  30: 706265.179 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedListBy":
  690258.194 ±(99.9%) 9585.188 ops/s [Average]
  (min, avg, max) = (670565.192, 690258.194, 720355.597), stdev = 14346.659
  CI (99.9%): [680673.007, 699843.382] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedListBy  thrpt   30  690258.194 ± 9585.188  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedListBy_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedListBy_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 366530.132 ops/s
# Warmup Iteration   2: 396248.693 ops/s
# Warmup Iteration   3: 509272.322 ops/s
# Warmup Iteration   4: 515715.539 ops/s
# Warmup Iteration   5: 513952.966 ops/s
# Warmup Iteration   6: 536067.598 ops/s
# Warmup Iteration   7: 529629.511 ops/s
# Warmup Iteration   8: 554254.763 ops/s
# Warmup Iteration   9: 522495.925 ops/s
# Warmup Iteration  10: 516979.419 ops/s
# Warmup Iteration  11: 517284.892 ops/s
# Warmup Iteration  12: 466978.514 ops/s
# Warmup Iteration  13: 505967.329 ops/s
# Warmup Iteration  14: 524052.904 ops/s
# Warmup Iteration  15: 524208.656 ops/s
# Warmup Iteration  16: 530803.341 ops/s
# Warmup Iteration  17: 576363.123 ops/s
# Warmup Iteration  18: 576460.515 ops/s
# Warmup Iteration  19: 576334.273 ops/s
# Warmup Iteration  20: 576039.555 ops/s
# Warmup Iteration  21: 576178.054 ops/s
# Warmup Iteration  22: 575609.985 ops/s
# Warmup Iteration  23: 573265.740 ops/s
# Warmup Iteration  24: 539311.836 ops/s
# Warmup Iteration  25: 534790.274 ops/s
# Warmup Iteration  26: 541944.486 ops/s
# Warmup Iteration  27: 554347.216 ops/s
# Warmup Iteration  28: 539569.011 ops/s
# Warmup Iteration  29: 539977.005 ops/s
# Warmup Iteration  30: 573300.712 ops/s
Iteration   1: 571171.300 ops/s
Iteration   2: 545793.518 ops/s
Iteration   3: 532835.322 ops/s
Iteration   4: 540804.100 ops/s
Iteration   5: 547757.189 ops/s
Iteration   6: 537420.173 ops/s
Iteration   7: 546356.497 ops/s
Iteration   8: 549642.765 ops/s
Iteration   9: 540198.594 ops/s
Iteration  10: 557883.098 ops/s
Iteration  11: 558555.323 ops/s
Iteration  12: 550523.740 ops/s
Iteration  13: 535061.171 ops/s
Iteration  14: 538100.479 ops/s
Iteration  15: 543223.173 ops/s
Iteration  16: 547585.734 ops/s
Iteration  17: 532629.450 ops/s
Iteration  18: 543337.819 ops/s
Iteration  19: 546692.799 ops/s
Iteration  20: 542837.719 ops/s
Iteration  21: 543663.729 ops/s
Iteration  22: 539568.385 ops/s
Iteration  23: 566441.970 ops/s
Iteration  24: 571026.320 ops/s
Iteration  25: 539301.747 ops/s
Iteration  26: 534855.387 ops/s
Iteration  27: 539446.712 ops/s
Iteration  28: 532626.313 ops/s
Iteration  29: 539895.550 ops/s
Iteration  30: 538581.584 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedListBy_with_null":
  545127.255 ±(99.9%) 7036.777 ops/s [Average]
  (min, avg, max) = (532626.313, 545127.255, 571171.300), stdev = 10532.318
  CI (99.9%): [538090.478, 552164.033] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedListBy_with_null  thrpt   30  545127.255 ± 7036.777  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedListWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedListWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1477281.905 ops/s
# Warmup Iteration   2: 2684931.791 ops/s
# Warmup Iteration   3: 3109376.517 ops/s
# Warmup Iteration   4: 2950836.593 ops/s
# Warmup Iteration   5: 2960649.331 ops/s
# Warmup Iteration   6: 2452727.812 ops/s
# Warmup Iteration   7: 3059381.659 ops/s
# Warmup Iteration   8: 2986134.069 ops/s
# Warmup Iteration   9: 2994295.881 ops/s
# Warmup Iteration  10: 3066222.243 ops/s
# Warmup Iteration  11: 3039426.072 ops/s
# Warmup Iteration  12: 3070197.152 ops/s
# Warmup Iteration  13: 3031329.511 ops/s
# Warmup Iteration  14: 3062006.138 ops/s
# Warmup Iteration  15: 3035549.412 ops/s
# Warmup Iteration  16: 2976944.231 ops/s
# Warmup Iteration  17: 3103083.576 ops/s
# Warmup Iteration  18: 3019439.528 ops/s
# Warmup Iteration  19: 3025425.132 ops/s
# Warmup Iteration  20: 3023701.624 ops/s
# Warmup Iteration  21: 2975432.484 ops/s
# Warmup Iteration  22: 2994116.522 ops/s
# Warmup Iteration  23: 2994422.777 ops/s
# Warmup Iteration  24: 2986509.033 ops/s
# Warmup Iteration  25: 3006494.493 ops/s
# Warmup Iteration  26: 3132037.904 ops/s
# Warmup Iteration  27: 3187894.858 ops/s
# Warmup Iteration  28: 3079542.823 ops/s
# Warmup Iteration  29: 3032198.067 ops/s
# Warmup Iteration  30: 3071946.278 ops/s
Iteration   1: 3195191.784 ops/s
Iteration   2: 3198481.084 ops/s
Iteration   3: 3201159.820 ops/s
Iteration   4: 3196226.277 ops/s
Iteration   5: 3200058.464 ops/s
Iteration   6: 3196150.636 ops/s
Iteration   7: 3197221.506 ops/s
Iteration   8: 3201121.342 ops/s
Iteration   9: 3194945.394 ops/s
Iteration  10: 3202862.161 ops/s
Iteration  11: 3195991.552 ops/s
Iteration  12: 3185476.791 ops/s
Iteration  13: 3201711.644 ops/s
Iteration  14: 3196915.127 ops/s
Iteration  15: 3199055.133 ops/s
Iteration  16: 3163833.878 ops/s
Iteration  17: 3196108.022 ops/s
Iteration  18: 3197172.215 ops/s
Iteration  19: 3197850.392 ops/s
Iteration  20: 3195141.237 ops/s
Iteration  21: 3150997.030 ops/s
Iteration  22: 3160993.318 ops/s
Iteration  23: 3195122.507 ops/s
Iteration  24: 3184469.426 ops/s
Iteration  25: 3153430.530 ops/s
Iteration  26: 3182221.616 ops/s
Iteration  27: 3182106.933 ops/s
Iteration  28: 3197191.724 ops/s
Iteration  29: 3143261.322 ops/s
Iteration  30: 3199081.408 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedListWith":
  3188718.342 ±(99.9%) 11166.391 ops/s [Average]
  (min, avg, max) = (3143261.322, 3188718.342, 3202862.161), stdev = 16713.329
  CI (99.9%): [3177551.952, 3199884.733] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedListWith  thrpt   30  3188718.342 ± 11166.391  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 554337.573 ops/s
# Warmup Iteration   2: 1045599.414 ops/s
# Warmup Iteration   3: 1143307.584 ops/s
# Warmup Iteration   4: 1149208.508 ops/s
# Warmup Iteration   5: 996605.698 ops/s
# Warmup Iteration   6: 1110152.753 ops/s
# Warmup Iteration   7: 1147914.142 ops/s
# Warmup Iteration   8: 1147886.611 ops/s
# Warmup Iteration   9: 1146872.329 ops/s
# Warmup Iteration  10: 1146517.073 ops/s
# Warmup Iteration  11: 1145723.646 ops/s
# Warmup Iteration  12: 1128700.815 ops/s
# Warmup Iteration  13: 1112838.835 ops/s
# Warmup Iteration  14: 1117243.453 ops/s
# Warmup Iteration  15: 1093540.699 ops/s
# Warmup Iteration  16: 1098860.554 ops/s
# Warmup Iteration  17: 1104834.829 ops/s
# Warmup Iteration  18: 1111741.618 ops/s
# Warmup Iteration  19: 1117053.746 ops/s
# Warmup Iteration  20: 1123088.853 ops/s
# Warmup Iteration  21: 1109174.249 ops/s
# Warmup Iteration  22: 1106781.365 ops/s
# Warmup Iteration  23: 1110337.096 ops/s
# Warmup Iteration  24: 1117503.036 ops/s
# Warmup Iteration  25: 1136032.634 ops/s
# Warmup Iteration  26: 1109030.876 ops/s
# Warmup Iteration  27: 1113376.177 ops/s
# Warmup Iteration  28: 1136576.455 ops/s
# Warmup Iteration  29: 1098308.229 ops/s
# Warmup Iteration  30: 1144666.454 ops/s
Iteration   1: 1145173.496 ops/s
Iteration   2: 1134505.080 ops/s
Iteration   3: 1123504.653 ops/s
Iteration   4: 1132778.709 ops/s
Iteration   5: 1118133.376 ops/s
Iteration   6: 1099533.756 ops/s
Iteration   7: 1092621.460 ops/s
Iteration   8: 1083961.206 ops/s
Iteration   9: 1123361.818 ops/s
Iteration  10: 1122009.057 ops/s
Iteration  11: 1099613.658 ops/s
Iteration  12: 1118837.939 ops/s
Iteration  13: 1103404.064 ops/s
Iteration  14: 1127774.974 ops/s
Iteration  15: 1118499.651 ops/s
Iteration  16: 1084730.592 ops/s
Iteration  17: 1127063.199 ops/s
Iteration  18: 1095959.955 ops/s
Iteration  19: 1110449.007 ops/s
Iteration  20: 1120348.893 ops/s
Iteration  21: 1113085.861 ops/s
Iteration  22: 1120363.969 ops/s
Iteration  23: 1129516.799 ops/s
Iteration  24: 1107226.942 ops/s
Iteration  25: 1113563.241 ops/s
Iteration  26: 1109564.991 ops/s
Iteration  27: 1116368.389 ops/s
Iteration  28: 1109525.688 ops/s
Iteration  29: 1131171.235 ops/s
Iteration  30: 1111797.743 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedList_natural_ordering":
  1114814.980 ±(99.9%) 9756.575 ops/s [Average]
  (min, avg, max) = (1083961.206, 1114814.980, 1145173.496), stdev = 14603.183
  CI (99.9%): [1105058.405, 1124571.555] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedList_natural_ordering  thrpt   30  1114814.980 ± 9756.575  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 612067.015 ops/s
# Warmup Iteration   2: 1171613.885 ops/s
# Warmup Iteration   3: 1297946.050 ops/s
# Warmup Iteration   4: 1305845.675 ops/s
# Warmup Iteration   5: 1177769.080 ops/s
# Warmup Iteration   6: 1212608.250 ops/s
# Warmup Iteration   7: 1330868.805 ops/s
# Warmup Iteration   8: 1323980.595 ops/s
# Warmup Iteration   9: 1300610.578 ops/s
# Warmup Iteration  10: 1300135.576 ops/s
# Warmup Iteration  11: 1332040.718 ops/s
# Warmup Iteration  12: 1313156.048 ops/s
# Warmup Iteration  13: 1333369.729 ops/s
# Warmup Iteration  14: 1304241.434 ops/s
# Warmup Iteration  15: 1323160.978 ops/s
# Warmup Iteration  16: 1316395.544 ops/s
# Warmup Iteration  17: 1321981.867 ops/s
# Warmup Iteration  18: 1282789.548 ops/s
# Warmup Iteration  19: 1299588.928 ops/s
# Warmup Iteration  20: 1299265.797 ops/s
# Warmup Iteration  21: 1308096.268 ops/s
# Warmup Iteration  22: 1296778.635 ops/s
# Warmup Iteration  23: 1315127.719 ops/s
# Warmup Iteration  24: 1329345.843 ops/s
# Warmup Iteration  25: 1306527.224 ops/s
# Warmup Iteration  26: 1303833.232 ops/s
# Warmup Iteration  27: 1343094.606 ops/s
# Warmup Iteration  28: 1318042.167 ops/s
# Warmup Iteration  29: 1317971.127 ops/s
# Warmup Iteration  30: 1319723.900 ops/s
Iteration   1: 1293181.248 ops/s
Iteration   2: 1308355.733 ops/s
Iteration   3: 1315117.324 ops/s
Iteration   4: 1296475.714 ops/s
Iteration   5: 1312798.930 ops/s
Iteration   6: 1340610.309 ops/s
Iteration   7: 1343015.545 ops/s
Iteration   8: 1312597.293 ops/s
Iteration   9: 1305938.900 ops/s
Iteration  10: 1294957.668 ops/s
Iteration  11: 1317249.502 ops/s
Iteration  12: 1302690.992 ops/s
Iteration  13: 1295919.982 ops/s
Iteration  14: 1324742.808 ops/s
Iteration  15: 1319461.839 ops/s
Iteration  16: 1306227.071 ops/s
Iteration  17: 1304749.470 ops/s
Iteration  18: 1293370.434 ops/s
Iteration  19: 1304521.977 ops/s
Iteration  20: 1285120.353 ops/s
Iteration  21: 1319664.257 ops/s
Iteration  22: 1301658.879 ops/s
Iteration  23: 1307782.133 ops/s
Iteration  24: 1317063.645 ops/s
Iteration  25: 1329921.228 ops/s
Iteration  26: 1315854.303 ops/s
Iteration  27: 1315132.643 ops/s
Iteration  28: 1306994.144 ops/s
Iteration  29: 1300300.560 ops/s
Iteration  30: 1290789.056 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedList_with_comparator":
  1309408.798 ±(99.9%) 9196.278 ops/s [Average]
  (min, avg, max) = (1285120.353, 1309408.798, 1343015.545), stdev = 13764.557
  CI (99.9%): [1300212.520, 1318605.076] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedList_with_comparator  thrpt   30  1309408.798 ± 9196.278  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedList_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedList_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 371702.617 ops/s
# Warmup Iteration   2: 398026.817 ops/s
# Warmup Iteration   3: 514451.849 ops/s
# Warmup Iteration   4: 535266.860 ops/s
# Warmup Iteration   5: 545059.950 ops/s
# Warmup Iteration   6: 519990.846 ops/s
# Warmup Iteration   7: 525726.210 ops/s
# Warmup Iteration   8: 532404.094 ops/s
# Warmup Iteration   9: 531357.568 ops/s
# Warmup Iteration  10: 555690.358 ops/s
# Warmup Iteration  11: 542616.732 ops/s
# Warmup Iteration  12: 453218.522 ops/s
# Warmup Iteration  13: 545479.097 ops/s
# Warmup Iteration  14: 540948.076 ops/s
# Warmup Iteration  15: 549538.369 ops/s
# Warmup Iteration  16: 549010.640 ops/s
# Warmup Iteration  17: 565631.497 ops/s
# Warmup Iteration  18: 564053.019 ops/s
# Warmup Iteration  19: 564351.157 ops/s
# Warmup Iteration  20: 565408.811 ops/s
# Warmup Iteration  21: 563214.840 ops/s
# Warmup Iteration  22: 566180.480 ops/s
# Warmup Iteration  23: 574981.008 ops/s
# Warmup Iteration  24: 575752.982 ops/s
# Warmup Iteration  25: 574948.389 ops/s
# Warmup Iteration  26: 574929.987 ops/s
# Warmup Iteration  27: 577082.092 ops/s
# Warmup Iteration  28: 575755.668 ops/s
# Warmup Iteration  29: 577675.056 ops/s
# Warmup Iteration  30: 577319.592 ops/s
Iteration   1: 577708.671 ops/s
Iteration   2: 577188.120 ops/s
Iteration   3: 575863.629 ops/s
Iteration   4: 576688.302 ops/s
Iteration   5: 576347.516 ops/s
Iteration   6: 572429.926 ops/s
Iteration   7: 571806.592 ops/s
Iteration   8: 576943.463 ops/s
Iteration   9: 575120.948 ops/s
Iteration  10: 577145.224 ops/s
Iteration  11: 571540.243 ops/s
Iteration  12: 576662.804 ops/s
Iteration  13: 574539.445 ops/s
Iteration  14: 577142.949 ops/s
Iteration  15: 566874.012 ops/s
Iteration  16: 550445.681 ops/s
Iteration  17: 536145.781 ops/s
Iteration  18: 537957.429 ops/s
Iteration  19: 546118.195 ops/s
Iteration  20: 545148.454 ops/s
Iteration  21: 558414.783 ops/s
Iteration  22: 554888.537 ops/s
Iteration  23: 541936.232 ops/s
Iteration  24: 573282.733 ops/s
Iteration  25: 567115.455 ops/s
Iteration  26: 539014.969 ops/s
Iteration  27: 541260.269 ops/s
Iteration  28: 539618.913 ops/s
Iteration  29: 545582.817 ops/s
Iteration  30: 568189.453 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedList_with_null":
  562304.052 ±(99.9%) 10333.555 ops/s [Average]
  (min, avg, max) = (536145.781, 562304.052, 577708.671), stdev = 15466.780
  CI (99.9%): [551970.496, 572637.607] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedList_with_null  thrpt   30  562304.052 ± 10333.555  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 236301.978 ops/s
# Warmup Iteration   2: 436827.100 ops/s
# Warmup Iteration   3: 496743.576 ops/s
# Warmup Iteration   4: 511238.781 ops/s
# Warmup Iteration   5: 504676.276 ops/s
# Warmup Iteration   6: 431809.327 ops/s
# Warmup Iteration   7: 510468.075 ops/s
# Warmup Iteration   8: 500964.035 ops/s
# Warmup Iteration   9: 508314.012 ops/s
# Warmup Iteration  10: 524951.990 ops/s
# Warmup Iteration  11: 499990.024 ops/s
# Warmup Iteration  12: 503858.786 ops/s
# Warmup Iteration  13: 501812.512 ops/s
# Warmup Iteration  14: 500965.516 ops/s
# Warmup Iteration  15: 499908.405 ops/s
# Warmup Iteration  16: 505851.593 ops/s
# Warmup Iteration  17: 518122.416 ops/s
# Warmup Iteration  18: 513541.697 ops/s
# Warmup Iteration  19: 514792.412 ops/s
# Warmup Iteration  20: 506584.831 ops/s
# Warmup Iteration  21: 513683.516 ops/s
# Warmup Iteration  22: 503479.688 ops/s
# Warmup Iteration  23: 501402.019 ops/s
# Warmup Iteration  24: 513453.932 ops/s
# Warmup Iteration  25: 523687.682 ops/s
# Warmup Iteration  26: 503649.589 ops/s
# Warmup Iteration  27: 505029.979 ops/s
# Warmup Iteration  28: 525140.633 ops/s
# Warmup Iteration  29: 535585.377 ops/s
# Warmup Iteration  30: 536235.384 ops/s
Iteration   1: 536625.284 ops/s
Iteration   2: 535446.426 ops/s
Iteration   3: 534413.709 ops/s
Iteration   4: 536467.217 ops/s
Iteration   5: 535226.078 ops/s
Iteration   6: 537042.870 ops/s
Iteration   7: 535150.311 ops/s
Iteration   8: 535318.633 ops/s
Iteration   9: 536352.614 ops/s
Iteration  10: 536442.584 ops/s
Iteration  11: 514528.802 ops/s
Iteration  12: 499241.411 ops/s
Iteration  13: 502633.412 ops/s
Iteration  14: 503229.131 ops/s
Iteration  15: 502235.599 ops/s
Iteration  16: 501894.423 ops/s
Iteration  17: 508448.140 ops/s
Iteration  18: 505337.215 ops/s
Iteration  19: 522171.759 ops/s
Iteration  20: 509928.452 ops/s
Iteration  21: 514202.422 ops/s
Iteration  22: 513017.896 ops/s
Iteration  23: 509557.840 ops/s
Iteration  24: 508220.727 ops/s
Iteration  25: 519915.622 ops/s
Iteration  26: 516399.542 ops/s
Iteration  27: 510831.300 ops/s
Iteration  28: 506440.932 ops/s
Iteration  29: 500544.789 ops/s
Iteration  30: 511892.997 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedMap":
  517971.938 ±(99.9%) 9277.355 ops/s [Average]
  (min, avg, max) = (499241.411, 517971.938, 537042.870), stdev = 13885.910
  CI (99.9%): [508694.583, 527249.293] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedMap  thrpt   30  517971.938 ± 9277.355  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedMapBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedMapBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 203830.585 ops/s
# Warmup Iteration   2: 317295.690 ops/s
# Warmup Iteration   3: 387104.375 ops/s
# Warmup Iteration   4: 394010.189 ops/s
# Warmup Iteration   5: 387761.463 ops/s
# Warmup Iteration   6: 387485.915 ops/s
# Warmup Iteration   7: 337388.368 ops/s
# Warmup Iteration   8: 386406.752 ops/s
# Warmup Iteration   9: 395369.390 ops/s
# Warmup Iteration  10: 389175.791 ops/s
# Warmup Iteration  11: 396731.452 ops/s
# Warmup Iteration  12: 393973.065 ops/s
# Warmup Iteration  13: 400385.142 ops/s
# Warmup Iteration  14: 408861.425 ops/s
# Warmup Iteration  15: 401907.232 ops/s
# Warmup Iteration  16: 393537.582 ops/s
# Warmup Iteration  17: 394392.414 ops/s
# Warmup Iteration  18: 389600.500 ops/s
# Warmup Iteration  19: 414153.220 ops/s
# Warmup Iteration  20: 397994.879 ops/s
# Warmup Iteration  21: 399076.221 ops/s
# Warmup Iteration  22: 390482.872 ops/s
# Warmup Iteration  23: 389749.007 ops/s
# Warmup Iteration  24: 403446.510 ops/s
# Warmup Iteration  25: 395958.364 ops/s
# Warmup Iteration  26: 384107.056 ops/s
# Warmup Iteration  27: 389288.570 ops/s
# Warmup Iteration  28: 391243.568 ops/s
# Warmup Iteration  29: 411556.929 ops/s
# Warmup Iteration  30: 389620.838 ops/s
Iteration   1: 393850.267 ops/s
Iteration   2: 390301.581 ops/s
Iteration   3: 403221.706 ops/s
Iteration   4: 393965.436 ops/s
Iteration   5: 397045.352 ops/s
Iteration   6: 386932.638 ops/s
Iteration   7: 388125.140 ops/s
Iteration   8: 391541.122 ops/s
Iteration   9: 413773.803 ops/s
Iteration  10: 413184.984 ops/s
Iteration  11: 404425.231 ops/s
Iteration  12: 395330.740 ops/s
Iteration  13: 390202.751 ops/s
Iteration  14: 390778.963 ops/s
Iteration  15: 395091.861 ops/s
Iteration  16: 396964.108 ops/s
Iteration  17: 388476.384 ops/s
Iteration  18: 399878.303 ops/s
Iteration  19: 391986.457 ops/s
Iteration  20: 397880.365 ops/s
Iteration  21: 387768.716 ops/s
Iteration  22: 387405.841 ops/s
Iteration  23: 387588.499 ops/s
Iteration  24: 389793.895 ops/s
Iteration  25: 409374.121 ops/s
Iteration  26: 412875.391 ops/s
Iteration  27: 414098.249 ops/s
Iteration  28: 413469.074 ops/s
Iteration  29: 414161.755 ops/s
Iteration  30: 413308.756 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedMapBy":
  398426.716 ±(99.9%) 6675.579 ops/s [Average]
  (min, avg, max) = (386932.638, 398426.716, 414161.755), stdev = 9991.694
  CI (99.9%): [391751.137, 405102.296] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedMapBy  thrpt   30  398426.716 ± 6675.579  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedMap_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedMap_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 242370.083 ops/s
# Warmup Iteration   2: 459591.506 ops/s
# Warmup Iteration   3: 518330.436 ops/s
# Warmup Iteration   4: 521317.475 ops/s
# Warmup Iteration   5: 496192.736 ops/s
# Warmup Iteration   6: 405706.479 ops/s
# Warmup Iteration   7: 496588.510 ops/s
# Warmup Iteration   8: 506235.507 ops/s
# Warmup Iteration   9: 504142.493 ops/s
# Warmup Iteration  10: 496336.312 ops/s
# Warmup Iteration  11: 491506.823 ops/s
# Warmup Iteration  12: 483803.721 ops/s
# Warmup Iteration  13: 482781.250 ops/s
# Warmup Iteration  14: 493254.682 ops/s
# Warmup Iteration  15: 489612.193 ops/s
# Warmup Iteration  16: 506426.325 ops/s
# Warmup Iteration  17: 501938.875 ops/s
# Warmup Iteration  18: 496669.616 ops/s
# Warmup Iteration  19: 495362.860 ops/s
# Warmup Iteration  20: 504518.740 ops/s
# Warmup Iteration  21: 497292.374 ops/s
# Warmup Iteration  22: 496787.957 ops/s
# Warmup Iteration  23: 483060.945 ops/s
# Warmup Iteration  24: 492006.988 ops/s
# Warmup Iteration  25: 484100.002 ops/s
# Warmup Iteration  26: 488714.063 ops/s
# Warmup Iteration  27: 489811.018 ops/s
# Warmup Iteration  28: 493553.045 ops/s
# Warmup Iteration  29: 490582.316 ops/s
# Warmup Iteration  30: 496884.094 ops/s
Iteration   1: 500136.542 ops/s
Iteration   2: 495940.161 ops/s
Iteration   3: 503274.622 ops/s
Iteration   4: 498544.002 ops/s
Iteration   5: 498532.367 ops/s
Iteration   6: 501831.532 ops/s
Iteration   7: 485500.895 ops/s
Iteration   8: 481677.388 ops/s
Iteration   9: 490549.870 ops/s
Iteration  10: 502229.107 ops/s
Iteration  11: 493980.310 ops/s
Iteration  12: 497788.209 ops/s
Iteration  13: 483768.786 ops/s
Iteration  14: 486172.242 ops/s
Iteration  15: 488810.536 ops/s
Iteration  16: 489740.992 ops/s
Iteration  17: 511802.837 ops/s
Iteration  18: 481364.508 ops/s
Iteration  19: 482997.313 ops/s
Iteration  20: 504675.832 ops/s
Iteration  21: 485813.087 ops/s
Iteration  22: 492415.994 ops/s
Iteration  23: 498288.743 ops/s
Iteration  24: 506508.572 ops/s
Iteration  25: 522687.545 ops/s
Iteration  26: 519972.216 ops/s
Iteration  27: 501399.090 ops/s
Iteration  28: 502985.864 ops/s
Iteration  29: 504751.306 ops/s
Iteration  30: 491163.394 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedMap_with_comparator":
  496843.462 ±(99.9%) 7050.108 ops/s [Average]
  (min, avg, max) = (481364.508, 496843.462, 522687.545), stdev = 10552.271
  CI (99.9%): [489793.354, 503893.570] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedMap_with_comparator  thrpt   30  496843.462 ± 7050.108  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 76050.716 ops/s
# Warmup Iteration   2: 146163.795 ops/s
# Warmup Iteration   3: 172422.418 ops/s
# Warmup Iteration   4: 175133.797 ops/s
# Warmup Iteration   5: 172116.153 ops/s
# Warmup Iteration   6: 141552.110 ops/s
# Warmup Iteration   7: 173181.265 ops/s
# Warmup Iteration   8: 172854.571 ops/s
# Warmup Iteration   9: 174367.351 ops/s
# Warmup Iteration  10: 172172.721 ops/s
# Warmup Iteration  11: 179133.900 ops/s
# Warmup Iteration  12: 183212.891 ops/s
# Warmup Iteration  13: 184450.878 ops/s
# Warmup Iteration  14: 184286.977 ops/s
# Warmup Iteration  15: 184403.432 ops/s
# Warmup Iteration  16: 184517.459 ops/s
# Warmup Iteration  17: 184400.294 ops/s
# Warmup Iteration  18: 184102.587 ops/s
# Warmup Iteration  19: 180313.013 ops/s
# Warmup Iteration  20: 184070.494 ops/s
# Warmup Iteration  21: 177838.889 ops/s
# Warmup Iteration  22: 174545.668 ops/s
# Warmup Iteration  23: 173770.794 ops/s
# Warmup Iteration  24: 174158.376 ops/s
# Warmup Iteration  25: 172125.202 ops/s
# Warmup Iteration  26: 182486.206 ops/s
# Warmup Iteration  27: 172844.138 ops/s
# Warmup Iteration  28: 172512.829 ops/s
# Warmup Iteration  29: 173767.212 ops/s
# Warmup Iteration  30: 178505.052 ops/s
Iteration   1: 175238.945 ops/s
Iteration   2: 179022.024 ops/s
Iteration   3: 175606.538 ops/s
Iteration   4: 171786.032 ops/s
Iteration   5: 176963.672 ops/s
Iteration   6: 184204.480 ops/s
Iteration   7: 177042.852 ops/s
Iteration   8: 183700.557 ops/s
Iteration   9: 172482.636 ops/s
Iteration  10: 171127.523 ops/s
Iteration  11: 173068.360 ops/s
Iteration  12: 177006.173 ops/s
Iteration  13: 176639.124 ops/s
Iteration  14: 172562.844 ops/s
Iteration  15: 174642.249 ops/s
Iteration  16: 172720.721 ops/s
Iteration  17: 176975.865 ops/s
Iteration  18: 181401.863 ops/s
Iteration  19: 181167.200 ops/s
Iteration  20: 176879.235 ops/s
Iteration  21: 176735.894 ops/s
Iteration  22: 181366.931 ops/s
Iteration  23: 182568.723 ops/s
Iteration  24: 184182.627 ops/s
Iteration  25: 184211.167 ops/s
Iteration  26: 178179.198 ops/s
Iteration  27: 173146.498 ops/s
Iteration  28: 172675.873 ops/s
Iteration  29: 170239.808 ops/s
Iteration  30: 177133.963 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedSetBy":
  177022.653 ±(99.9%) 2824.505 ops/s [Average]
  (min, avg, max) = (170239.808, 177022.653, 184211.167), stdev = 4227.586
  CI (99.9%): [174198.148, 179847.157] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  177022.653 ± 2824.505  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 327633.282 ops/s
# Warmup Iteration   2: 676773.228 ops/s
# Warmup Iteration   3: 745006.841 ops/s
# Warmup Iteration   4: 729442.253 ops/s
# Warmup Iteration   5: 614243.622 ops/s
# Warmup Iteration   6: 747006.255 ops/s
# Warmup Iteration   7: 740823.392 ops/s
# Warmup Iteration   8: 736595.874 ops/s
# Warmup Iteration   9: 728616.150 ops/s
# Warmup Iteration  10: 727404.333 ops/s
# Warmup Iteration  11: 735238.582 ops/s
# Warmup Iteration  12: 735808.480 ops/s
# Warmup Iteration  13: 747980.116 ops/s
# Warmup Iteration  14: 734332.706 ops/s
# Warmup Iteration  15: 743392.827 ops/s
# Warmup Iteration  16: 747276.198 ops/s
# Warmup Iteration  17: 730872.124 ops/s
# Warmup Iteration  18: 726883.213 ops/s
# Warmup Iteration  19: 728133.203 ops/s
# Warmup Iteration  20: 740163.075 ops/s
# Warmup Iteration  21: 744816.110 ops/s
# Warmup Iteration  22: 727603.846 ops/s
# Warmup Iteration  23: 726507.977 ops/s
# Warmup Iteration  24: 724335.318 ops/s
# Warmup Iteration  25: 747954.465 ops/s
# Warmup Iteration  26: 755261.563 ops/s
# Warmup Iteration  27: 780765.940 ops/s
# Warmup Iteration  28: 780169.356 ops/s
# Warmup Iteration  29: 780386.572 ops/s
# Warmup Iteration  30: 779906.830 ops/s
Iteration   1: 778080.386 ops/s
Iteration   2: 778766.124 ops/s
Iteration   3: 781069.287 ops/s
Iteration   4: 780515.848 ops/s
Iteration   5: 782930.585 ops/s
Iteration   6: 776256.845 ops/s
Iteration   7: 732850.752 ops/s
Iteration   8: 759146.483 ops/s
Iteration   9: 781576.601 ops/s
Iteration  10: 739259.855 ops/s
Iteration  11: 724335.998 ops/s
Iteration  12: 739573.157 ops/s
Iteration  13: 750451.841 ops/s
Iteration  14: 741781.748 ops/s
Iteration  15: 724808.291 ops/s
Iteration  16: 745851.334 ops/s
Iteration  17: 739469.013 ops/s
Iteration  18: 730803.162 ops/s
Iteration  19: 729884.674 ops/s
Iteration  20: 725966.936 ops/s
Iteration  21: 727706.056 ops/s
Iteration  22: 780583.072 ops/s
Iteration  23: 776861.641 ops/s
Iteration  24: 778257.649 ops/s
Iteration  25: 730596.411 ops/s
Iteration  26: 720510.847 ops/s
Iteration  27: 717683.069 ops/s
Iteration  28: 718811.898 ops/s
Iteration  29: 722509.163 ops/s
Iteration  30: 720630.778 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedSet_natural_ordering":
  747917.650 ±(99.9%) 16378.947 ops/s [Average]
  (min, avg, max) = (717683.069, 747917.650, 782930.585), stdev = 24515.238
  CI (99.9%): [731538.703, 764296.597] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedSet_natural_ordering  thrpt   30  747917.650 ± 16378.947  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 304375.542 ops/s
# Warmup Iteration   2: 598860.067 ops/s
# Warmup Iteration   3: 664333.634 ops/s
# Warmup Iteration   4: 668453.016 ops/s
# Warmup Iteration   5: 588162.763 ops/s
# Warmup Iteration   6: 692821.484 ops/s
# Warmup Iteration   7: 670848.961 ops/s
# Warmup Iteration   8: 657052.391 ops/s
# Warmup Iteration   9: 652144.432 ops/s
# Warmup Iteration  10: 654754.779 ops/s
# Warmup Iteration  11: 641737.812 ops/s
# Warmup Iteration  12: 650311.460 ops/s
# Warmup Iteration  13: 685691.866 ops/s
# Warmup Iteration  14: 646062.999 ops/s
# Warmup Iteration  15: 642478.562 ops/s
# Warmup Iteration  16: 650153.049 ops/s
# Warmup Iteration  17: 673182.612 ops/s
# Warmup Iteration  18: 661152.966 ops/s
# Warmup Iteration  19: 653017.515 ops/s
# Warmup Iteration  20: 678445.633 ops/s
# Warmup Iteration  21: 668859.422 ops/s
# Warmup Iteration  22: 640156.590 ops/s
# Warmup Iteration  23: 656182.380 ops/s
# Warmup Iteration  24: 664541.551 ops/s
# Warmup Iteration  25: 681269.862 ops/s
# Warmup Iteration  26: 657951.466 ops/s
# Warmup Iteration  27: 658738.219 ops/s
# Warmup Iteration  28: 673199.753 ops/s
# Warmup Iteration  29: 698098.628 ops/s
# Warmup Iteration  30: 660854.986 ops/s
Iteration   1: 674711.601 ops/s
Iteration   2: 651716.372 ops/s
Iteration   3: 653502.787 ops/s
Iteration   4: 658430.624 ops/s
Iteration   5: 649366.131 ops/s
Iteration   6: 653191.309 ops/s
Iteration   7: 672640.426 ops/s
Iteration   8: 672957.212 ops/s
Iteration   9: 651869.814 ops/s
Iteration  10: 678080.864 ops/s
Iteration  11: 690292.013 ops/s
Iteration  12: 652455.753 ops/s
Iteration  13: 652915.424 ops/s
Iteration  14: 675971.639 ops/s
Iteration  15: 647861.988 ops/s
Iteration  16: 669287.445 ops/s
Iteration  17: 648999.856 ops/s
Iteration  18: 647219.274 ops/s
Iteration  19: 651599.166 ops/s
Iteration  20: 659729.932 ops/s
Iteration  21: 690060.057 ops/s
Iteration  22: 703949.962 ops/s
Iteration  23: 703672.901 ops/s
Iteration  24: 702002.311 ops/s
Iteration  25: 704307.249 ops/s
Iteration  26: 702629.263 ops/s
Iteration  27: 700881.959 ops/s
Iteration  28: 704119.831 ops/s
Iteration  29: 699531.759 ops/s
Iteration  30: 700340.931 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedSet_with_comparator":
  674143.195 ±(99.9%) 14769.780 ops/s [Average]
  (min, avg, max) = (647219.274, 674143.195, 704307.249), stdev = 22106.714
  CI (99.9%): [659373.415, 688912.976] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toSortedSet_with_comparator  thrpt   30  674143.195 ± 14769.780  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1663384.833 ops/s
# Warmup Iteration   2: 3367506.989 ops/s
# Warmup Iteration   3: 3329822.268 ops/s
# Warmup Iteration   4: 3377724.137 ops/s
# Warmup Iteration   5: 2888240.309 ops/s
# Warmup Iteration   6: 3418945.684 ops/s
# Warmup Iteration   7: 3396727.362 ops/s
# Warmup Iteration   8: 3308678.619 ops/s
# Warmup Iteration   9: 3477946.338 ops/s
# Warmup Iteration  10: 3441012.300 ops/s
# Warmup Iteration  11: 3507706.723 ops/s
# Warmup Iteration  12: 3389892.783 ops/s
# Warmup Iteration  13: 3373893.617 ops/s
# Warmup Iteration  14: 3429293.458 ops/s
# Warmup Iteration  15: 3458023.176 ops/s
# Warmup Iteration  16: 3577016.505 ops/s
# Warmup Iteration  17: 3614294.061 ops/s
# Warmup Iteration  18: 3609042.402 ops/s
# Warmup Iteration  19: 3608421.815 ops/s
# Warmup Iteration  20: 3604447.850 ops/s
# Warmup Iteration  21: 3609500.483 ops/s
# Warmup Iteration  22: 3615584.535 ops/s
# Warmup Iteration  23: 3614677.294 ops/s
# Warmup Iteration  24: 3612016.064 ops/s
# Warmup Iteration  25: 3562017.124 ops/s
# Warmup Iteration  26: 3550229.355 ops/s
# Warmup Iteration  27: 3551816.000 ops/s
# Warmup Iteration  28: 3573159.872 ops/s
# Warmup Iteration  29: 3529755.196 ops/s
# Warmup Iteration  30: 3514633.398 ops/s
Iteration   1: 3562581.286 ops/s
Iteration   2: 3552046.318 ops/s
Iteration   3: 3577301.527 ops/s
Iteration   4: 3572605.685 ops/s
Iteration   5: 3577443.228 ops/s
Iteration   6: 3568092.896 ops/s
Iteration   7: 3582643.532 ops/s
Iteration   8: 3582727.791 ops/s
Iteration   9: 3588826.306 ops/s
Iteration  10: 3596081.213 ops/s
Iteration  11: 3610029.971 ops/s
Iteration  12: 3583100.741 ops/s
Iteration  13: 3605045.283 ops/s
Iteration  14: 3548773.196 ops/s
Iteration  15: 3505926.370 ops/s
Iteration  16: 3479360.211 ops/s
Iteration  17: 3463403.056 ops/s
Iteration  18: 3534443.658 ops/s
Iteration  19: 3500335.727 ops/s
Iteration  20: 3517295.493 ops/s
Iteration  21: 3531285.438 ops/s
Iteration  22: 3530928.810 ops/s
Iteration  23: 3454977.276 ops/s
Iteration  24: 3529971.267 ops/s
Iteration  25: 3527158.594 ops/s
Iteration  26: 3516179.561 ops/s
Iteration  27: 3506117.688 ops/s
Iteration  28: 3528667.974 ops/s
Iteration  29: 3514319.352 ops/s
Iteration  30: 3499472.131 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toStack":
  3541571.386 ±(99.9%) 27767.663 ops/s [Average]
  (min, avg, max) = (3454977.276, 3541571.386, 3610029.971), stdev = 41561.334
  CI (99.9%): [3513803.723, 3569339.049] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toStack  thrpt   30  3541571.386 ± 27767.663  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toStringOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toStringOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 259292.040 ops/s
# Warmup Iteration   2: 558482.341 ops/s
# Warmup Iteration   3: 584448.977 ops/s
# Warmup Iteration   4: 586073.499 ops/s
# Warmup Iteration   5: 489854.522 ops/s
# Warmup Iteration   6: 585953.139 ops/s
# Warmup Iteration   7: 583952.447 ops/s
# Warmup Iteration   8: 585773.159 ops/s
# Warmup Iteration   9: 585900.130 ops/s
# Warmup Iteration  10: 589539.342 ops/s
# Warmup Iteration  11: 586108.299 ops/s
# Warmup Iteration  12: 581288.346 ops/s
# Warmup Iteration  13: 588056.053 ops/s
# Warmup Iteration  14: 586744.743 ops/s
# Warmup Iteration  15: 588688.364 ops/s
# Warmup Iteration  16: 585384.668 ops/s
# Warmup Iteration  17: 583902.622 ops/s
# Warmup Iteration  18: 587125.866 ops/s
# Warmup Iteration  19: 587302.228 ops/s
# Warmup Iteration  20: 580974.932 ops/s
# Warmup Iteration  21: 588530.007 ops/s
# Warmup Iteration  22: 584429.783 ops/s
# Warmup Iteration  23: 581124.520 ops/s
# Warmup Iteration  24: 593475.225 ops/s
# Warmup Iteration  25: 587084.408 ops/s
# Warmup Iteration  26: 591911.946 ops/s
# Warmup Iteration  27: 585502.817 ops/s
# Warmup Iteration  28: 586531.126 ops/s
# Warmup Iteration  29: 588653.302 ops/s
# Warmup Iteration  30: 586081.228 ops/s
Iteration   1: 588185.212 ops/s
Iteration   2: 598180.369 ops/s
Iteration   3: 590664.384 ops/s
Iteration   4: 596070.141 ops/s
Iteration   5: 588163.247 ops/s
Iteration   6: 584701.204 ops/s
Iteration   7: 590126.076 ops/s
Iteration   8: 587775.528 ops/s
Iteration   9: 591202.927 ops/s
Iteration  10: 587852.130 ops/s
Iteration  11: 590156.494 ops/s
Iteration  12: 588476.461 ops/s
Iteration  13: 591873.528 ops/s
Iteration  14: 587310.695 ops/s
Iteration  15: 591586.892 ops/s
Iteration  16: 587181.231 ops/s
Iteration  17: 597019.469 ops/s
Iteration  18: 596533.745 ops/s
Iteration  19: 586348.076 ops/s
Iteration  20: 586154.151 ops/s
Iteration  21: 592009.709 ops/s
Iteration  22: 584518.909 ops/s
Iteration  23: 588939.352 ops/s
Iteration  24: 591596.671 ops/s
Iteration  25: 588377.995 ops/s
Iteration  26: 584420.579 ops/s
Iteration  27: 582395.571 ops/s
Iteration  28: 583243.447 ops/s
Iteration  29: 579737.799 ops/s
Iteration  30: 577769.933 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toStringOfItemToCount":
  588619.064 ±(99.9%) 3202.450 ops/s [Average]
  (min, avg, max) = (577769.933, 588619.064, 598180.369), stdev = 4793.277
  CI (99.9%): [585416.614, 591821.514] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toStringOfItemToCount  thrpt   30  588619.064 ± 3202.450  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toString_with_collection_containing_self$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toString_with_collection_containing_self

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 614296.615 ops/s
# Warmup Iteration   2: 692034.702 ops/s
# Warmup Iteration   3: 914153.112 ops/s
# Warmup Iteration   4: 907499.655 ops/s
# Warmup Iteration   5: 905690.097 ops/s
# Warmup Iteration   6: 891213.657 ops/s
# Warmup Iteration   7: 886905.159 ops/s
# Warmup Iteration   8: 906667.229 ops/s
# Warmup Iteration   9: 894120.076 ops/s
# Warmup Iteration  10: 899740.602 ops/s
# Warmup Iteration  11: 749745.517 ops/s
# Warmup Iteration  12: 898569.931 ops/s
# Warmup Iteration  13: 900291.033 ops/s
# Warmup Iteration  14: 899806.863 ops/s
# Warmup Iteration  15: 903082.900 ops/s
# Warmup Iteration  16: 892879.805 ops/s
# Warmup Iteration  17: 944702.511 ops/s
# Warmup Iteration  18: 954287.973 ops/s
# Warmup Iteration  19: 942257.302 ops/s
# Warmup Iteration  20: 960760.005 ops/s
# Warmup Iteration  21: 974075.719 ops/s
# Warmup Iteration  22: 973556.327 ops/s
# Warmup Iteration  23: 971336.095 ops/s
# Warmup Iteration  24: 970161.938 ops/s
# Warmup Iteration  25: 972207.968 ops/s
# Warmup Iteration  26: 973817.916 ops/s
# Warmup Iteration  27: 973116.863 ops/s
# Warmup Iteration  28: 972543.056 ops/s
# Warmup Iteration  29: 974083.692 ops/s
# Warmup Iteration  30: 973988.795 ops/s
Iteration   1: 974104.326 ops/s
Iteration   2: 974354.739 ops/s
Iteration   3: 971288.353 ops/s
Iteration   4: 973356.389 ops/s
Iteration   5: 973257.934 ops/s
Iteration   6: 970770.484 ops/s
Iteration   7: 971242.661 ops/s
Iteration   8: 974435.370 ops/s
Iteration   9: 974540.353 ops/s
Iteration  10: 971902.353 ops/s
Iteration  11: 974028.104 ops/s
Iteration  12: 973562.691 ops/s
Iteration  13: 946198.509 ops/s
Iteration  14: 920935.688 ops/s
Iteration  15: 948217.304 ops/s
Iteration  16: 974756.002 ops/s
Iteration  17: 906165.951 ops/s
Iteration  18: 898354.390 ops/s
Iteration  19: 897919.398 ops/s
Iteration  20: 972287.337 ops/s
Iteration  21: 969302.928 ops/s
Iteration  22: 915672.178 ops/s
Iteration  23: 928794.948 ops/s
Iteration  24: 920183.959 ops/s
Iteration  25: 972865.907 ops/s
Iteration  26: 949197.661 ops/s
Iteration  27: 970317.689 ops/s
Iteration  28: 961453.576 ops/s
Iteration  29: 918957.466 ops/s
Iteration  30: 936892.704 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_toString_with_collection_containing_self":
  952843.912 ±(99.9%) 17776.911 ops/s [Average]
  (min, avg, max) = (897919.398, 952843.912, 974756.002), stdev = 26607.645
  CI (99.9%): [935067.001, 970620.822] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_toString_with_collection_containing_self  thrpt   30  952843.912 ± 17776.911  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_topOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_topOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 96665.520 ops/s
# Warmup Iteration   2: 159479.675 ops/s
# Warmup Iteration   3: 185843.394 ops/s
# Warmup Iteration   4: 177204.386 ops/s
# Warmup Iteration   5: 184876.822 ops/s
# Warmup Iteration   6: 180844.290 ops/s
# Warmup Iteration   7: 147976.601 ops/s
# Warmup Iteration   8: 180402.947 ops/s
# Warmup Iteration   9: 177143.954 ops/s
# Warmup Iteration  10: 180277.425 ops/s
# Warmup Iteration  11: 178748.761 ops/s
# Warmup Iteration  12: 179504.174 ops/s
# Warmup Iteration  13: 180624.138 ops/s
# Warmup Iteration  14: 176727.178 ops/s
# Warmup Iteration  15: 176717.910 ops/s
# Warmup Iteration  16: 176504.620 ops/s
# Warmup Iteration  17: 181176.590 ops/s
# Warmup Iteration  18: 188918.743 ops/s
# Warmup Iteration  19: 177670.955 ops/s
# Warmup Iteration  20: 179610.069 ops/s
# Warmup Iteration  21: 191814.145 ops/s
# Warmup Iteration  22: 191338.966 ops/s
# Warmup Iteration  23: 191970.444 ops/s
# Warmup Iteration  24: 191940.448 ops/s
# Warmup Iteration  25: 191330.188 ops/s
# Warmup Iteration  26: 191753.728 ops/s
# Warmup Iteration  27: 192027.244 ops/s
# Warmup Iteration  28: 191926.494 ops/s
# Warmup Iteration  29: 190807.602 ops/s
# Warmup Iteration  30: 192125.993 ops/s
Iteration   1: 192050.394 ops/s
Iteration   2: 190538.796 ops/s
Iteration   3: 188025.757 ops/s
Iteration   4: 186993.223 ops/s
Iteration   5: 188143.831 ops/s
Iteration   6: 189038.502 ops/s
Iteration   7: 187761.019 ops/s
Iteration   8: 188709.356 ops/s
Iteration   9: 188183.997 ops/s
Iteration  10: 188462.953 ops/s
Iteration  11: 188329.372 ops/s
Iteration  12: 187259.415 ops/s
Iteration  13: 185860.933 ops/s
Iteration  14: 189588.488 ops/s
Iteration  15: 187594.166 ops/s
Iteration  16: 188816.560 ops/s
Iteration  17: 187536.105 ops/s
Iteration  18: 188610.452 ops/s
Iteration  19: 187165.680 ops/s
Iteration  20: 188953.292 ops/s
Iteration  21: 188184.864 ops/s
Iteration  22: 188229.590 ops/s
Iteration  23: 189474.324 ops/s
Iteration  24: 185707.967 ops/s
Iteration  25: 187072.945 ops/s
Iteration  26: 187708.470 ops/s
Iteration  27: 188306.966 ops/s
Iteration  28: 188539.911 ops/s
Iteration  29: 187714.325 ops/s
Iteration  30: 187557.888 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_topOccurrences":
  188203.985 ±(99.9%) 826.931 ops/s [Average]
  (min, avg, max) = (185707.967, 188203.985, 192050.394), stdev = 1237.712
  CI (99.9%): [187377.053, 189030.916] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_topOccurrences  thrpt   30  188203.985 ± 826.931  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 479980.332 ops/s
# Warmup Iteration   2: 577153.976 ops/s
# Warmup Iteration   3: 727457.366 ops/s
# Warmup Iteration   4: 723818.983 ops/s
# Warmup Iteration   5: 725754.130 ops/s
# Warmup Iteration   6: 726230.906 ops/s
# Warmup Iteration   7: 724097.387 ops/s
# Warmup Iteration   8: 734221.424 ops/s
# Warmup Iteration   9: 633833.153 ops/s
# Warmup Iteration  10: 711049.708 ops/s
# Warmup Iteration  11: 725852.536 ops/s
# Warmup Iteration  12: 728491.474 ops/s
# Warmup Iteration  13: 727454.922 ops/s
# Warmup Iteration  14: 733503.073 ops/s
# Warmup Iteration  15: 725147.990 ops/s
# Warmup Iteration  16: 729973.033 ops/s
# Warmup Iteration  17: 761508.917 ops/s
# Warmup Iteration  18: 761882.900 ops/s
# Warmup Iteration  19: 757237.232 ops/s
# Warmup Iteration  20: 759118.332 ops/s
# Warmup Iteration  21: 763956.218 ops/s
# Warmup Iteration  22: 762340.561 ops/s
# Warmup Iteration  23: 767043.666 ops/s
# Warmup Iteration  24: 766088.357 ops/s
# Warmup Iteration  25: 768489.800 ops/s
# Warmup Iteration  26: 764110.478 ops/s
# Warmup Iteration  27: 752640.465 ops/s
# Warmup Iteration  28: 751713.078 ops/s
# Warmup Iteration  29: 759448.345 ops/s
# Warmup Iteration  30: 757191.679 ops/s
Iteration   1: 763026.069 ops/s
Iteration   2: 758345.793 ops/s
Iteration   3: 762350.248 ops/s
Iteration   4: 763104.035 ops/s
Iteration   5: 765525.704 ops/s
Iteration   6: 773763.356 ops/s
Iteration   7: 763988.687 ops/s
Iteration   8: 762074.555 ops/s
Iteration   9: 753449.894 ops/s
Iteration  10: 754006.036 ops/s
Iteration  11: 754629.091 ops/s
Iteration  12: 754100.228 ops/s
Iteration  13: 759123.442 ops/s
Iteration  14: 750423.712 ops/s
Iteration  15: 756195.159 ops/s
Iteration  16: 754724.047 ops/s
Iteration  17: 757392.170 ops/s
Iteration  18: 754201.283 ops/s
Iteration  19: 776087.388 ops/s
Iteration  20: 773456.096 ops/s
Iteration  21: 768140.396 ops/s
Iteration  22: 765236.217 ops/s
Iteration  23: 767003.679 ops/s
Iteration  24: 757327.340 ops/s
Iteration  25: 765764.566 ops/s
Iteration  26: 775251.681 ops/s
Iteration  27: 774053.569 ops/s
Iteration  28: 775771.092 ops/s
Iteration  29: 775245.261 ops/s
Iteration  30: 774449.761 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_with":
  763607.019 ±(99.9%) 5461.200 ops/s [Average]
  (min, avg, max) = (750423.712, 763607.019, 776087.388), stdev = 8174.067
  CI (99.9%): [758145.819, 769068.218] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_with  thrpt   30  763607.019 ± 5461.200  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 506254.699 ops/s
# Warmup Iteration   2: 663860.079 ops/s
# Warmup Iteration   3: 814517.708 ops/s
# Warmup Iteration   4: 810826.509 ops/s
# Warmup Iteration   5: 812517.740 ops/s
# Warmup Iteration   6: 812467.096 ops/s
# Warmup Iteration   7: 771944.999 ops/s
# Warmup Iteration   8: 705405.672 ops/s
# Warmup Iteration   9: 790682.955 ops/s
# Warmup Iteration  10: 814697.613 ops/s
# Warmup Iteration  11: 815613.224 ops/s
# Warmup Iteration  12: 815259.320 ops/s
# Warmup Iteration  13: 814767.608 ops/s
# Warmup Iteration  14: 814936.620 ops/s
# Warmup Iteration  15: 792764.093 ops/s
# Warmup Iteration  16: 763919.053 ops/s
# Warmup Iteration  17: 820365.402 ops/s
# Warmup Iteration  18: 820146.550 ops/s
# Warmup Iteration  19: 808182.716 ops/s
# Warmup Iteration  20: 835456.602 ops/s
# Warmup Iteration  21: 844345.392 ops/s
# Warmup Iteration  22: 809813.875 ops/s
# Warmup Iteration  23: 796590.522 ops/s
# Warmup Iteration  24: 807256.052 ops/s
# Warmup Iteration  25: 807138.739 ops/s
# Warmup Iteration  26: 814046.392 ops/s
# Warmup Iteration  27: 803644.243 ops/s
# Warmup Iteration  28: 805590.283 ops/s
# Warmup Iteration  29: 816559.506 ops/s
# Warmup Iteration  30: 817368.624 ops/s
Iteration   1: 807787.523 ops/s
Iteration   2: 804001.899 ops/s
Iteration   3: 802608.881 ops/s
Iteration   4: 800418.241 ops/s
Iteration   5: 801698.836 ops/s
Iteration   6: 803769.898 ops/s
Iteration   7: 825481.630 ops/s
Iteration   8: 791410.334 ops/s
Iteration   9: 814954.149 ops/s
Iteration  10: 805307.393 ops/s
Iteration  11: 802587.546 ops/s
Iteration  12: 829733.224 ops/s
Iteration  13: 797377.014 ops/s
Iteration  14: 797873.558 ops/s
Iteration  15: 806009.612 ops/s
Iteration  16: 798635.574 ops/s
Iteration  17: 802210.257 ops/s
Iteration  18: 799206.408 ops/s
Iteration  19: 792078.665 ops/s
Iteration  20: 799066.710 ops/s
Iteration  21: 805652.913 ops/s
Iteration  22: 812390.653 ops/s
Iteration  23: 846758.634 ops/s
Iteration  24: 834942.819 ops/s
Iteration  25: 820704.867 ops/s
Iteration  26: 822274.270 ops/s
Iteration  27: 817970.919 ops/s
Iteration  28: 820390.646 ops/s
Iteration  29: 852613.830 ops/s
Iteration  30: 851444.494 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_withAll":
  812245.380 ±(99.9%) 11273.990 ops/s [Average]
  (min, avg, max) = (791410.334, 812245.380, 852613.830), stdev = 16874.379
  CI (99.9%): [800971.389, 823519.370] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_withAll  thrpt   30  812245.380 ± 11273.990  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 543740.746 ops/s
# Warmup Iteration   2: 643518.511 ops/s
# Warmup Iteration   3: 844455.305 ops/s
# Warmup Iteration   4: 826750.507 ops/s
# Warmup Iteration   5: 804351.120 ops/s
# Warmup Iteration   6: 833673.051 ops/s
# Warmup Iteration   7: 837789.618 ops/s
# Warmup Iteration   8: 848457.214 ops/s
# Warmup Iteration   9: 806944.520 ops/s
# Warmup Iteration  10: 724636.529 ops/s
# Warmup Iteration  11: 782556.128 ops/s
# Warmup Iteration  12: 839772.258 ops/s
# Warmup Iteration  13: 816002.717 ops/s
# Warmup Iteration  14: 825565.910 ops/s
# Warmup Iteration  15: 813739.509 ops/s
# Warmup Iteration  16: 821928.106 ops/s
# Warmup Iteration  17: 858219.783 ops/s
# Warmup Iteration  18: 870420.161 ops/s
# Warmup Iteration  19: 852296.749 ops/s
# Warmup Iteration  20: 867455.184 ops/s
# Warmup Iteration  21: 849055.218 ops/s
# Warmup Iteration  22: 900469.166 ops/s
# Warmup Iteration  23: 912085.618 ops/s
# Warmup Iteration  24: 911360.086 ops/s
# Warmup Iteration  25: 911003.618 ops/s
# Warmup Iteration  26: 911776.880 ops/s
# Warmup Iteration  27: 912637.318 ops/s
# Warmup Iteration  28: 913354.085 ops/s
# Warmup Iteration  29: 911893.580 ops/s
# Warmup Iteration  30: 909272.484 ops/s
Iteration   1: 872927.231 ops/s
Iteration   2: 897027.468 ops/s
Iteration   3: 912794.889 ops/s
Iteration   4: 875837.814 ops/s
Iteration   5: 856734.919 ops/s
Iteration   6: 851253.187 ops/s
Iteration   7: 878046.024 ops/s
Iteration   8: 850572.391 ops/s
Iteration   9: 852270.030 ops/s
Iteration  10: 862153.643 ops/s
Iteration  11: 866292.650 ops/s
Iteration  12: 861439.046 ops/s
Iteration  13: 855954.233 ops/s
Iteration  14: 853988.581 ops/s
Iteration  15: 864658.037 ops/s
Iteration  16: 865559.032 ops/s
Iteration  17: 871746.832 ops/s
Iteration  18: 858397.175 ops/s
Iteration  19: 851599.348 ops/s
Iteration  20: 858809.254 ops/s
Iteration  21: 862730.219 ops/s
Iteration  22: 851877.291 ops/s
Iteration  23: 858845.799 ops/s
Iteration  24: 861629.728 ops/s
Iteration  25: 863264.180 ops/s
Iteration  26: 861917.599 ops/s
Iteration  27: 859072.690 ops/s
Iteration  28: 889269.203 ops/s
Iteration  29: 857810.784 ops/s
Iteration  30: 907983.459 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_without":
  866415.425 ±(99.9%) 10761.184 ops/s [Average]
  (min, avg, max) = (850572.391, 866415.425, 912794.889), stdev = 16106.835
  CI (99.9%): [855654.241, 877176.609] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_without  thrpt   30  866415.425 ± 10761.184  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 451595.140 ops/s
# Warmup Iteration   2: 585894.727 ops/s
# Warmup Iteration   3: 738518.182 ops/s
# Warmup Iteration   4: 749046.444 ops/s
# Warmup Iteration   5: 739092.617 ops/s
# Warmup Iteration   6: 731853.554 ops/s
# Warmup Iteration   7: 739511.432 ops/s
# Warmup Iteration   8: 654615.310 ops/s
# Warmup Iteration   9: 732587.978 ops/s
# Warmup Iteration  10: 716875.014 ops/s
# Warmup Iteration  11: 720737.639 ops/s
# Warmup Iteration  12: 721804.102 ops/s
# Warmup Iteration  13: 729908.124 ops/s
# Warmup Iteration  14: 732257.500 ops/s
# Warmup Iteration  15: 735616.066 ops/s
# Warmup Iteration  16: 745220.470 ops/s
# Warmup Iteration  17: 751523.824 ops/s
# Warmup Iteration  18: 785290.205 ops/s
# Warmup Iteration  19: 762241.459 ops/s
# Warmup Iteration  20: 757883.636 ops/s
# Warmup Iteration  21: 771261.152 ops/s
# Warmup Iteration  22: 768893.085 ops/s
# Warmup Iteration  23: 789593.634 ops/s
# Warmup Iteration  24: 759913.598 ops/s
# Warmup Iteration  25: 750626.815 ops/s
# Warmup Iteration  26: 754705.144 ops/s
# Warmup Iteration  27: 759508.439 ops/s
# Warmup Iteration  28: 772121.838 ops/s
# Warmup Iteration  29: 762125.704 ops/s
# Warmup Iteration  30: 756379.643 ops/s
Iteration   1: 755262.507 ops/s
Iteration   2: 768478.859 ops/s
Iteration   3: 759566.810 ops/s
Iteration   4: 773956.072 ops/s
Iteration   5: 748721.018 ops/s
Iteration   6: 759493.492 ops/s
Iteration   7: 744192.217 ops/s
Iteration   8: 748874.861 ops/s
Iteration   9: 780063.072 ops/s
Iteration  10: 768365.308 ops/s
Iteration  11: 757513.730 ops/s
Iteration  12: 768968.264 ops/s
Iteration  13: 804614.450 ops/s
Iteration  14: 805029.772 ops/s
Iteration  15: 803154.833 ops/s
Iteration  16: 804994.263 ops/s
Iteration  17: 804885.205 ops/s
Iteration  18: 805310.734 ops/s
Iteration  19: 802886.447 ops/s
Iteration  20: 803816.248 ops/s
Iteration  21: 805533.209 ops/s
Iteration  22: 803483.655 ops/s
Iteration  23: 803863.048 ops/s
Iteration  24: 802900.922 ops/s
Iteration  25: 801300.211 ops/s
Iteration  26: 804050.391 ops/s
Iteration  27: 780047.219 ops/s
Iteration  28: 752232.852 ops/s
Iteration  29: 753819.455 ops/s
Iteration  30: 764263.562 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_withoutAll":
  781321.423 ±(99.9%) 15364.369 ops/s [Average]
  (min, avg, max) = (744192.217, 781321.423, 805533.209), stdev = 22996.665
  CI (99.9%): [765957.054, 796685.791] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_withoutAll  thrpt   30  781321.423 ± 15364.369  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 58074.533 ops/s
# Warmup Iteration   2: 70336.535 ops/s
# Warmup Iteration   3: 97921.871 ops/s
# Warmup Iteration   4: 99664.322 ops/s
# Warmup Iteration   5: 99431.777 ops/s
# Warmup Iteration   6: 101013.315 ops/s
# Warmup Iteration   7: 102391.240 ops/s
# Warmup Iteration   8: 100187.143 ops/s
# Warmup Iteration   9: 100274.491 ops/s
# Warmup Iteration  10: 102337.429 ops/s
# Warmup Iteration  11: 81239.219 ops/s
# Warmup Iteration  12: 100280.944 ops/s
# Warmup Iteration  13: 99673.876 ops/s
# Warmup Iteration  14: 99307.129 ops/s
# Warmup Iteration  15: 98748.388 ops/s
# Warmup Iteration  16: 100150.789 ops/s
# Warmup Iteration  17: 100150.385 ops/s
# Warmup Iteration  18: 101341.448 ops/s
# Warmup Iteration  19: 101266.988 ops/s
# Warmup Iteration  20: 101677.079 ops/s
# Warmup Iteration  21: 98829.820 ops/s
# Warmup Iteration  22: 102128.123 ops/s
# Warmup Iteration  23: 103240.573 ops/s
# Warmup Iteration  24: 99124.076 ops/s
# Warmup Iteration  25: 99264.321 ops/s
# Warmup Iteration  26: 98992.333 ops/s
# Warmup Iteration  27: 99081.259 ops/s
# Warmup Iteration  28: 99250.922 ops/s
# Warmup Iteration  29: 99078.941 ops/s
# Warmup Iteration  30: 98170.603 ops/s
Iteration   1: 99551.502 ops/s
Iteration   2: 99456.278 ops/s
Iteration   3: 100991.957 ops/s
Iteration   4: 99519.433 ops/s
Iteration   5: 100856.031 ops/s
Iteration   6: 98770.064 ops/s
Iteration   7: 98904.183 ops/s
Iteration   8: 99861.288 ops/s
Iteration   9: 99840.230 ops/s
Iteration  10: 100680.127 ops/s
Iteration  11: 100121.075 ops/s
Iteration  12: 101330.250 ops/s
Iteration  13: 100295.825 ops/s
Iteration  14: 98400.511 ops/s
Iteration  15: 100658.411 ops/s
Iteration  16: 99465.032 ops/s
Iteration  17: 100749.849 ops/s
Iteration  18: 101452.181 ops/s
Iteration  19: 100526.227 ops/s
Iteration  20: 101852.667 ops/s
Iteration  21: 100350.564 ops/s
Iteration  22: 103631.776 ops/s
Iteration  23: 96415.511 ops/s
Iteration  24: 97936.877 ops/s
Iteration  25: 98682.790 ops/s
Iteration  26: 98717.223 ops/s
Iteration  27: 102048.133 ops/s
Iteration  28: 98399.933 ops/s
Iteration  29: 100168.121 ops/s
Iteration  30: 98406.362 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_zip":
  99934.680 ±(99.9%) 962.518 ops/s [Average]
  (min, avg, max) = (96415.511, 99934.680, 103631.776), stdev = 1440.652
  CI (99.9%): [98972.162, 100897.199] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt      Score     Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_zip  thrpt   30  99934.680 ± 962.518  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 128138.470 ops/s
# Warmup Iteration   2: 214376.212 ops/s
# Warmup Iteration   3: 276001.024 ops/s
# Warmup Iteration   4: 276851.794 ops/s
# Warmup Iteration   5: 285483.209 ops/s
# Warmup Iteration   6: 293360.670 ops/s
# Warmup Iteration   7: 245373.071 ops/s
# Warmup Iteration   8: 293815.535 ops/s
# Warmup Iteration   9: 293910.517 ops/s
# Warmup Iteration  10: 293759.525 ops/s
# Warmup Iteration  11: 293361.898 ops/s
# Warmup Iteration  12: 293427.877 ops/s
# Warmup Iteration  13: 276605.691 ops/s
# Warmup Iteration  14: 277521.019 ops/s
# Warmup Iteration  15: 274312.199 ops/s
# Warmup Iteration  16: 282566.240 ops/s
# Warmup Iteration  17: 278337.542 ops/s
# Warmup Iteration  18: 277298.443 ops/s
# Warmup Iteration  19: 274300.825 ops/s
# Warmup Iteration  20: 276660.335 ops/s
# Warmup Iteration  21: 276855.639 ops/s
# Warmup Iteration  22: 276682.473 ops/s
# Warmup Iteration  23: 279756.869 ops/s
# Warmup Iteration  24: 282732.916 ops/s
# Warmup Iteration  25: 290633.016 ops/s
# Warmup Iteration  26: 282704.565 ops/s
# Warmup Iteration  27: 288297.021 ops/s
# Warmup Iteration  28: 277294.840 ops/s
# Warmup Iteration  29: 277544.157 ops/s
# Warmup Iteration  30: 275955.438 ops/s
Iteration   1: 273225.321 ops/s
Iteration   2: 282880.204 ops/s
Iteration   3: 272777.781 ops/s
Iteration   4: 271636.556 ops/s
Iteration   5: 275484.220 ops/s
Iteration   6: 274148.384 ops/s
Iteration   7: 275927.470 ops/s
Iteration   8: 280038.869 ops/s
Iteration   9: 287434.474 ops/s
Iteration  10: 275711.985 ops/s
Iteration  11: 287870.232 ops/s
Iteration  12: 292849.845 ops/s
Iteration  13: 294394.126 ops/s
Iteration  14: 285194.568 ops/s
Iteration  15: 290463.657 ops/s
Iteration  16: 281071.768 ops/s
Iteration  17: 282082.631 ops/s
Iteration  18: 280250.545 ops/s
Iteration  19: 275795.664 ops/s
Iteration  20: 284523.014 ops/s
Iteration  21: 282463.676 ops/s
Iteration  22: 272875.157 ops/s
Iteration  23: 276937.909 ops/s
Iteration  24: 282880.090 ops/s
Iteration  25: 275813.054 ops/s
Iteration  26: 282950.779 ops/s
Iteration  27: 279472.194 ops/s
Iteration  28: 281761.537 ops/s
Iteration  29: 284573.955 ops/s
Iteration  30: 280323.806 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.UnmodifiableSortedBagTest._Benchmark.benchmark_zipWithIndex":
  280793.782 ±(99.9%) 4004.509 ops/s [Average]
  (min, avg, max) = (271636.556, 280793.782, 294394.126), stdev = 5993.761
  CI (99.9%): [276789.273, 284798.291] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
UnmodifiableSortedBagTest._Benchmark.benchmark_zipWithIndex  thrpt   30  280793.782 ± 4004.509  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5909526.916 ops/s
# Warmup Iteration   2: 13027177.648 ops/s
# Warmup Iteration   3: 10992807.824 ops/s
# Warmup Iteration   4: 13146169.698 ops/s
# Warmup Iteration   5: 13055294.767 ops/s
# Warmup Iteration   6: 13304043.901 ops/s
# Warmup Iteration   7: 13116573.387 ops/s
# Warmup Iteration   8: 13250935.082 ops/s
# Warmup Iteration   9: 13106899.857 ops/s
# Warmup Iteration  10: 13519223.275 ops/s
# Warmup Iteration  11: 13238060.594 ops/s
# Warmup Iteration  12: 12948810.440 ops/s
# Warmup Iteration  13: 13347085.222 ops/s
# Warmup Iteration  14: 12891945.354 ops/s
# Warmup Iteration  15: 13214033.162 ops/s
# Warmup Iteration  16: 12907121.052 ops/s
# Warmup Iteration  17: 12994971.988 ops/s
# Warmup Iteration  18: 13101277.379 ops/s
# Warmup Iteration  19: 13038557.395 ops/s
# Warmup Iteration  20: 13588622.444 ops/s
# Warmup Iteration  21: 13741304.005 ops/s
# Warmup Iteration  22: 13692171.432 ops/s
# Warmup Iteration  23: 13753073.306 ops/s
# Warmup Iteration  24: 13747945.175 ops/s
# Warmup Iteration  25: 13755839.419 ops/s
# Warmup Iteration  26: 13735570.220 ops/s
# Warmup Iteration  27: 13344645.835 ops/s
# Warmup Iteration  28: 13313744.669 ops/s
# Warmup Iteration  29: 13188901.602 ops/s
# Warmup Iteration  30: 13385609.585 ops/s
Iteration   1: 13022967.119 ops/s
Iteration   2: 13048286.871 ops/s
Iteration   3: 13022287.760 ops/s
Iteration   4: 13109790.378 ops/s
Iteration   5: 12845924.552 ops/s
Iteration   6: 12851700.854 ops/s
Iteration   7: 13125214.261 ops/s
Iteration   8: 13052224.016 ops/s
Iteration   9: 13179794.357 ops/s
Iteration  10: 12941553.770 ops/s
Iteration  11: 13058132.909 ops/s
Iteration  12: 13063923.163 ops/s
Iteration  13: 13417269.690 ops/s
Iteration  14: 13498103.376 ops/s
Iteration  15: 13539806.283 ops/s
Iteration  16: 13298956.297 ops/s
Iteration  17: 13227837.275 ops/s
Iteration  18: 13096002.486 ops/s
Iteration  19: 13044716.988 ops/s
Iteration  20: 13132220.741 ops/s
Iteration  21: 13110437.026 ops/s
Iteration  22: 13293412.855 ops/s
Iteration  23: 13242108.773 ops/s
Iteration  24: 12822825.833 ops/s
Iteration  25: 13317940.856 ops/s
Iteration  26: 13679010.368 ops/s
Iteration  27: 13618321.438 ops/s
Iteration  28: 13629190.940 ops/s
Iteration  29: 13032273.166 ops/s
Iteration  30: 13070768.361 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_add":
  13179766.759 ±(99.9%) 155530.581 ops/s [Average]
  (min, avg, max) = (12822825.833, 13179766.759, 13679010.368), stdev = 232790.869
  CI (99.9%): [13024236.178, 13335297.340] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_add  thrpt   30  13179766.759 ± 155530.581  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 178521.196 ops/s
# Warmup Iteration   2: 417420.391 ops/s
# Warmup Iteration   3: 428627.859 ops/s
# Warmup Iteration   4: 375841.554 ops/s
# Warmup Iteration   5: 398062.060 ops/s
# Warmup Iteration   6: 432731.553 ops/s
# Warmup Iteration   7: 430174.897 ops/s
# Warmup Iteration   8: 428089.488 ops/s
# Warmup Iteration   9: 438561.002 ops/s
# Warmup Iteration  10: 421992.592 ops/s
# Warmup Iteration  11: 434775.903 ops/s
# Warmup Iteration  12: 430111.856 ops/s
# Warmup Iteration  13: 424468.972 ops/s
# Warmup Iteration  14: 422987.953 ops/s
# Warmup Iteration  15: 426242.494 ops/s
# Warmup Iteration  16: 422918.873 ops/s
# Warmup Iteration  17: 423300.699 ops/s
# Warmup Iteration  18: 445557.675 ops/s
# Warmup Iteration  19: 431338.012 ops/s
# Warmup Iteration  20: 428892.365 ops/s
# Warmup Iteration  21: 435581.934 ops/s
# Warmup Iteration  22: 421239.781 ops/s
# Warmup Iteration  23: 423900.002 ops/s
# Warmup Iteration  24: 427815.716 ops/s
# Warmup Iteration  25: 442951.267 ops/s
# Warmup Iteration  26: 431037.694 ops/s
# Warmup Iteration  27: 434780.752 ops/s
# Warmup Iteration  28: 435712.931 ops/s
# Warmup Iteration  29: 419798.203 ops/s
# Warmup Iteration  30: 422692.331 ops/s
Iteration   1: 424510.400 ops/s
Iteration   2: 418093.170 ops/s
Iteration   3: 420526.686 ops/s
Iteration   4: 421494.610 ops/s
Iteration   5: 423796.203 ops/s
Iteration   6: 432866.377 ops/s
Iteration   7: 425080.782 ops/s
Iteration   8: 443039.689 ops/s
Iteration   9: 450178.247 ops/s
Iteration  10: 450068.767 ops/s
Iteration  11: 449574.448 ops/s
Iteration  12: 450089.495 ops/s
Iteration  13: 449215.109 ops/s
Iteration  14: 450277.737 ops/s
Iteration  15: 450625.444 ops/s
Iteration  16: 448949.129 ops/s
Iteration  17: 450345.410 ops/s
Iteration  18: 448537.657 ops/s
Iteration  19: 449424.998 ops/s
Iteration  20: 449373.969 ops/s
Iteration  21: 448722.600 ops/s
Iteration  22: 449726.312 ops/s
Iteration  23: 436124.553 ops/s
Iteration  24: 431308.151 ops/s
Iteration  25: 426365.541 ops/s
Iteration  26: 435914.874 ops/s
Iteration  27: 448165.189 ops/s
Iteration  28: 433016.704 ops/s
Iteration  29: 425302.859 ops/s
Iteration  30: 428929.521 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_addAll":
  438988.154 ±(99.9%) 7858.835 ops/s [Average]
  (min, avg, max) = (418093.170, 438988.154, 450625.444), stdev = 11762.735
  CI (99.9%): [431129.320, 446846.989] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_addAll  thrpt   30  438988.154 ± 7858.835  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 613307.927 ops/s
# Warmup Iteration   2: 1397003.417 ops/s
# Warmup Iteration   3: 1445687.920 ops/s
# Warmup Iteration   4: 1293027.281 ops/s
# Warmup Iteration   5: 1352867.685 ops/s
# Warmup Iteration   6: 1473386.341 ops/s
# Warmup Iteration   7: 1414098.057 ops/s
# Warmup Iteration   8: 1440167.791 ops/s
# Warmup Iteration   9: 1432322.429 ops/s
# Warmup Iteration  10: 1438636.153 ops/s
# Warmup Iteration  11: 1430208.927 ops/s
# Warmup Iteration  12: 1430781.574 ops/s
# Warmup Iteration  13: 1422438.782 ops/s
# Warmup Iteration  14: 1409633.473 ops/s
# Warmup Iteration  15: 1398999.751 ops/s
# Warmup Iteration  16: 1414396.263 ops/s
# Warmup Iteration  17: 1429336.989 ops/s
# Warmup Iteration  18: 1419232.359 ops/s
# Warmup Iteration  19: 1415257.483 ops/s
# Warmup Iteration  20: 1504359.760 ops/s
# Warmup Iteration  21: 1437417.374 ops/s
# Warmup Iteration  22: 1466647.101 ops/s
# Warmup Iteration  23: 1495527.455 ops/s
# Warmup Iteration  24: 1427282.188 ops/s
# Warmup Iteration  25: 1450188.046 ops/s
# Warmup Iteration  26: 1431255.386 ops/s
# Warmup Iteration  27: 1442535.245 ops/s
# Warmup Iteration  28: 1469153.119 ops/s
# Warmup Iteration  29: 1455756.114 ops/s
# Warmup Iteration  30: 1427557.587 ops/s
Iteration   1: 1459553.418 ops/s
Iteration   2: 1417296.103 ops/s
Iteration   3: 1442738.774 ops/s
Iteration   4: 1418534.091 ops/s
Iteration   5: 1419903.007 ops/s
Iteration   6: 1416413.318 ops/s
Iteration   7: 1415422.336 ops/s
Iteration   8: 1412785.709 ops/s
Iteration   9: 1418510.115 ops/s
Iteration  10: 1435349.240 ops/s
Iteration  11: 1485053.041 ops/s
Iteration  12: 1432251.896 ops/s
Iteration  13: 1437599.315 ops/s
Iteration  14: 1414599.478 ops/s
Iteration  15: 1412809.996 ops/s
Iteration  16: 1391057.229 ops/s
Iteration  17: 1418515.770 ops/s
Iteration  18: 1423805.315 ops/s
Iteration  19: 1408458.313 ops/s
Iteration  20: 1418736.561 ops/s
Iteration  21: 1436014.101 ops/s
Iteration  22: 1404689.427 ops/s
Iteration  23: 1390011.463 ops/s
Iteration  24: 1434318.581 ops/s
Iteration  25: 1427196.251 ops/s
Iteration  26: 1453597.990 ops/s
Iteration  27: 1451922.986 ops/s
Iteration  28: 1432798.046 ops/s
Iteration  29: 1443659.032 ops/s
Iteration  30: 1423479.720 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_addAllIterable":
  1426569.354 ±(99.9%) 13253.710 ops/s [Average]
  (min, avg, max) = (1390011.463, 1426569.354, 1485053.041), stdev = 19837.530
  CI (99.9%): [1413315.644, 1439823.064] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_addAllIterable  thrpt   30  1426569.354 ± 13253.710  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_addOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_addOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 313898.884 ops/s
# Warmup Iteration   2: 610552.195 ops/s
# Warmup Iteration   3: 698348.535 ops/s
# Warmup Iteration   4: 724506.929 ops/s
# Warmup Iteration   5: 617007.219 ops/s
# Warmup Iteration   6: 711464.095 ops/s
# Warmup Iteration   7: 724938.814 ops/s
# Warmup Iteration   8: 724694.214 ops/s
# Warmup Iteration   9: 723427.556 ops/s
# Warmup Iteration  10: 725005.029 ops/s
# Warmup Iteration  11: 682503.596 ops/s
# Warmup Iteration  12: 687057.541 ops/s
# Warmup Iteration  13: 681389.697 ops/s
# Warmup Iteration  14: 670251.584 ops/s
# Warmup Iteration  15: 684172.634 ops/s
# Warmup Iteration  16: 684716.009 ops/s
# Warmup Iteration  17: 694261.343 ops/s
# Warmup Iteration  18: 712192.433 ops/s
# Warmup Iteration  19: 696033.953 ops/s
# Warmup Iteration  20: 696567.814 ops/s
# Warmup Iteration  21: 690421.878 ops/s
# Warmup Iteration  22: 685166.496 ops/s
# Warmup Iteration  23: 684748.541 ops/s
# Warmup Iteration  24: 679762.869 ops/s
# Warmup Iteration  25: 686810.312 ops/s
# Warmup Iteration  26: 678194.226 ops/s
# Warmup Iteration  27: 683693.891 ops/s
# Warmup Iteration  28: 684513.194 ops/s
# Warmup Iteration  29: 673604.509 ops/s
# Warmup Iteration  30: 690939.113 ops/s
Iteration   1: 674654.134 ops/s
Iteration   2: 676364.828 ops/s
Iteration   3: 686877.410 ops/s
Iteration   4: 697791.857 ops/s
Iteration   5: 718065.001 ops/s
Iteration   6: 672771.316 ops/s
Iteration   7: 670923.599 ops/s
Iteration   8: 694880.655 ops/s
Iteration   9: 701264.130 ops/s
Iteration  10: 708364.462 ops/s
Iteration  11: 699958.458 ops/s
Iteration  12: 702061.992 ops/s
Iteration  13: 703962.210 ops/s
Iteration  14: 690530.964 ops/s
Iteration  15: 681089.082 ops/s
Iteration  16: 675314.016 ops/s
Iteration  17: 672793.314 ops/s
Iteration  18: 672683.399 ops/s
Iteration  19: 683768.272 ops/s
Iteration  20: 687414.584 ops/s
Iteration  21: 676621.446 ops/s
Iteration  22: 700307.548 ops/s
Iteration  23: 696350.808 ops/s
Iteration  24: 689369.582 ops/s
Iteration  25: 679237.834 ops/s
Iteration  26: 686195.847 ops/s
Iteration  27: 676982.335 ops/s
Iteration  28: 680187.476 ops/s
Iteration  29: 699634.741 ops/s
Iteration  30: 706146.565 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_addOccurrences":
  688752.262 ±(99.9%) 8625.426 ops/s [Average]
  (min, avg, max) = (670923.599, 688752.262, 718065.001), stdev = 12910.132
  CI (99.9%): [680126.837, 697377.688] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_addOccurrences  thrpt   30  688752.262 ± 8625.426  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_addOccurrences_occurrencesOf_with_hashing_strategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_addOccurrences_occurrencesOf_with_hashing_strategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2746315.575 ops/s
# Warmup Iteration   2: 6224107.356 ops/s
# Warmup Iteration   3: 5894538.857 ops/s
# Warmup Iteration   4: 5417108.872 ops/s
# Warmup Iteration   5: 6159942.150 ops/s
# Warmup Iteration   6: 6124142.562 ops/s
# Warmup Iteration   7: 6105553.415 ops/s
# Warmup Iteration   8: 6147916.578 ops/s
# Warmup Iteration   9: 6080520.592 ops/s
# Warmup Iteration  10: 6026596.102 ops/s
# Warmup Iteration  11: 6084953.883 ops/s
# Warmup Iteration  12: 6185156.133 ops/s
# Warmup Iteration  13: 6033321.876 ops/s
# Warmup Iteration  14: 6085008.226 ops/s
# Warmup Iteration  15: 6012144.688 ops/s
# Warmup Iteration  16: 6001117.790 ops/s
# Warmup Iteration  17: 6151716.979 ops/s
# Warmup Iteration  18: 6384734.578 ops/s
# Warmup Iteration  19: 6391008.503 ops/s
# Warmup Iteration  20: 6395508.190 ops/s
# Warmup Iteration  21: 6394248.828 ops/s
# Warmup Iteration  22: 6398903.327 ops/s
# Warmup Iteration  23: 6394310.888 ops/s
# Warmup Iteration  24: 6400814.462 ops/s
# Warmup Iteration  25: 6200603.670 ops/s
# Warmup Iteration  26: 5994137.652 ops/s
# Warmup Iteration  27: 6061884.323 ops/s
# Warmup Iteration  28: 6300666.544 ops/s
# Warmup Iteration  29: 6103940.298 ops/s
# Warmup Iteration  30: 6023454.747 ops/s
Iteration   1: 5929029.527 ops/s
Iteration   2: 6066333.815 ops/s
Iteration   3: 6399940.545 ops/s
Iteration   4: 6417105.457 ops/s
Iteration   5: 6067505.977 ops/s
Iteration   6: 5950837.591 ops/s
Iteration   7: 6247006.426 ops/s
Iteration   8: 6343318.060 ops/s
Iteration   9: 5975836.436 ops/s
Iteration  10: 6011683.573 ops/s
Iteration  11: 6226058.690 ops/s
Iteration  12: 6131824.028 ops/s
Iteration  13: 5997049.211 ops/s
Iteration  14: 6054645.044 ops/s
Iteration  15: 5990643.546 ops/s
Iteration  16: 5982438.148 ops/s
Iteration  17: 6115959.648 ops/s
Iteration  18: 5927580.075 ops/s
Iteration  19: 6032923.885 ops/s
Iteration  20: 6070145.526 ops/s
Iteration  21: 5953418.755 ops/s
Iteration  22: 6164671.662 ops/s
Iteration  23: 6038837.269 ops/s
Iteration  24: 5960199.181 ops/s
Iteration  25: 6195482.879 ops/s
Iteration  26: 6382892.648 ops/s
Iteration  27: 6322675.083 ops/s
Iteration  28: 6012692.733 ops/s
Iteration  29: 5970619.688 ops/s
Iteration  30: 6071729.857 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_addOccurrences_occurrencesOf_with_hashing_strategy":
  6100369.499 ±(99.9%) 100161.142 ops/s [Average]
  (min, avg, max) = (5927580.075, 6100369.499, 6417105.457), stdev = 149916.493
  CI (99.9%): [6000208.357, 6200530.641] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_addOccurrences_occurrencesOf_with_hashing_strategy  thrpt   30  6100369.499 ± 100161.142  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_addOccurrences_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_addOccurrences_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 702724.396 ops/s
# Warmup Iteration   2: 755732.483 ops/s
# Warmup Iteration   3: 994002.193 ops/s
# Warmup Iteration   4: 999055.269 ops/s
# Warmup Iteration   5: 998961.771 ops/s
# Warmup Iteration   6: 1018691.402 ops/s
# Warmup Iteration   7: 1043859.138 ops/s
# Warmup Iteration   8: 994774.909 ops/s
# Warmup Iteration   9: 1012735.198 ops/s
# Warmup Iteration  10: 988413.434 ops/s
# Warmup Iteration  11: 832241.544 ops/s
# Warmup Iteration  12: 988436.186 ops/s
# Warmup Iteration  13: 976156.878 ops/s
# Warmup Iteration  14: 976474.093 ops/s
# Warmup Iteration  15: 981581.871 ops/s
# Warmup Iteration  16: 976827.506 ops/s
# Warmup Iteration  17: 1069485.334 ops/s
# Warmup Iteration  18: 1063771.711 ops/s
# Warmup Iteration  19: 1068513.512 ops/s
# Warmup Iteration  20: 1045642.489 ops/s
# Warmup Iteration  21: 1044533.787 ops/s
# Warmup Iteration  22: 1030334.174 ops/s
# Warmup Iteration  23: 1042652.897 ops/s
# Warmup Iteration  24: 1050024.689 ops/s
# Warmup Iteration  25: 1062159.624 ops/s
# Warmup Iteration  26: 1069868.415 ops/s
# Warmup Iteration  27: 1074896.114 ops/s
# Warmup Iteration  28: 1059200.811 ops/s
# Warmup Iteration  29: 1055292.981 ops/s
# Warmup Iteration  30: 1058782.937 ops/s
Iteration   1: 1060061.621 ops/s
Iteration   2: 1057014.965 ops/s
Iteration   3: 1088694.714 ops/s
Iteration   4: 1110750.283 ops/s
Iteration   5: 1113100.219 ops/s
Iteration   6: 1114912.705 ops/s
Iteration   7: 1112007.548 ops/s
Iteration   8: 1113296.502 ops/s
Iteration   9: 1111877.679 ops/s
Iteration  10: 1110874.585 ops/s
Iteration  11: 1112464.621 ops/s
Iteration  12: 1114577.665 ops/s
Iteration  13: 1112496.652 ops/s
Iteration  14: 1115477.277 ops/s
Iteration  15: 1113505.028 ops/s
Iteration  16: 1114596.816 ops/s
Iteration  17: 1113105.350 ops/s
Iteration  18: 1091775.013 ops/s
Iteration  19: 1043561.723 ops/s
Iteration  20: 1049119.999 ops/s
Iteration  21: 1040508.239 ops/s
Iteration  22: 1038938.004 ops/s
Iteration  23: 1040713.186 ops/s
Iteration  24: 1069953.193 ops/s
Iteration  25: 1056857.321 ops/s
Iteration  26: 1049491.657 ops/s
Iteration  27: 1027203.285 ops/s
Iteration  28: 1079477.177 ops/s
Iteration  29: 1073311.223 ops/s
Iteration  30: 1041299.147 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_addOccurrences_throws":
  1083034.113 ±(99.9%) 21190.991 ops/s [Average]
  (min, avg, max) = (1027203.285, 1083034.113, 1115477.277), stdev = 31717.680
  CI (99.9%): [1061843.122, 1104225.104] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_addOccurrences_throws  thrpt   30  1083034.113 ± 21190.991  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1183366.996 ops/s
# Warmup Iteration   2: 2689288.861 ops/s
# Warmup Iteration   3: 2821451.570 ops/s
# Warmup Iteration   4: 2364696.208 ops/s
# Warmup Iteration   5: 2600004.600 ops/s
# Warmup Iteration   6: 2734817.376 ops/s
# Warmup Iteration   7: 2741115.344 ops/s
# Warmup Iteration   8: 2766553.330 ops/s
# Warmup Iteration   9: 2763587.482 ops/s
# Warmup Iteration  10: 2776746.508 ops/s
# Warmup Iteration  11: 2804713.642 ops/s
# Warmup Iteration  12: 2879627.675 ops/s
# Warmup Iteration  13: 2821959.160 ops/s
# Warmup Iteration  14: 2752591.922 ops/s
# Warmup Iteration  15: 2762177.301 ops/s
# Warmup Iteration  16: 2771314.693 ops/s
# Warmup Iteration  17: 2731347.098 ops/s
# Warmup Iteration  18: 2744310.452 ops/s
# Warmup Iteration  19: 2756012.876 ops/s
# Warmup Iteration  20: 2906245.492 ops/s
# Warmup Iteration  21: 2923701.527 ops/s
# Warmup Iteration  22: 2768132.688 ops/s
# Warmup Iteration  23: 2757100.903 ops/s
# Warmup Iteration  24: 2837856.402 ops/s
# Warmup Iteration  25: 2919581.200 ops/s
# Warmup Iteration  26: 2862303.456 ops/s
# Warmup Iteration  27: 2740697.852 ops/s
# Warmup Iteration  28: 2733662.928 ops/s
# Warmup Iteration  29: 2774075.626 ops/s
# Warmup Iteration  30: 2746995.138 ops/s
Iteration   1: 2775020.311 ops/s
Iteration   2: 2794037.345 ops/s
Iteration   3: 2834953.920 ops/s
Iteration   4: 2866080.923 ops/s
Iteration   5: 2844191.242 ops/s
Iteration   6: 2830575.020 ops/s
Iteration   7: 2921585.855 ops/s
Iteration   8: 2806123.993 ops/s
Iteration   9: 2758494.200 ops/s
Iteration  10: 2743631.731 ops/s
Iteration  11: 2772836.053 ops/s
Iteration  12: 2758746.126 ops/s
Iteration  13: 2743400.550 ops/s
Iteration  14: 2759553.387 ops/s
Iteration  15: 2822478.445 ops/s
Iteration  16: 2754031.521 ops/s
Iteration  17: 2742466.682 ops/s
Iteration  18: 2760070.875 ops/s
Iteration  19: 2782449.131 ops/s
Iteration  20: 2910790.987 ops/s
Iteration  21: 2914488.727 ops/s
Iteration  22: 2923368.523 ops/s
Iteration  23: 2799883.466 ops/s
Iteration  24: 2843294.273 ops/s
Iteration  25: 2725177.313 ops/s
Iteration  26: 2783690.397 ops/s
Iteration  27: 2760885.029 ops/s
Iteration  28: 2731766.769 ops/s
Iteration  29: 2733311.121 ops/s
Iteration  30: 2846304.305 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_aggregateByMutating":
  2801456.274 ±(99.9%) 40205.827 ops/s [Average]
  (min, avg, max) = (2725177.313, 2801456.274, 2923368.523), stdev = 60178.194
  CI (99.9%): [2761250.447, 2841662.101] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  2801456.274 ± 40205.827  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1078067.180 ops/s
# Warmup Iteration   2: 2392503.586 ops/s
# Warmup Iteration   3: 2470160.940 ops/s
# Warmup Iteration   4: 2326986.830 ops/s
# Warmup Iteration   5: 2201106.219 ops/s
# Warmup Iteration   6: 2479696.491 ops/s
# Warmup Iteration   7: 2478644.322 ops/s
# Warmup Iteration   8: 2452212.877 ops/s
# Warmup Iteration   9: 2407614.058 ops/s
# Warmup Iteration  10: 2329018.823 ops/s
# Warmup Iteration  11: 2340971.041 ops/s
# Warmup Iteration  12: 2331524.397 ops/s
# Warmup Iteration  13: 2385628.132 ops/s
# Warmup Iteration  14: 2343132.382 ops/s
# Warmup Iteration  15: 2333877.791 ops/s
# Warmup Iteration  16: 2460598.794 ops/s
# Warmup Iteration  17: 2327335.895 ops/s
# Warmup Iteration  18: 2350766.899 ops/s
# Warmup Iteration  19: 2343921.723 ops/s
# Warmup Iteration  20: 2356847.346 ops/s
# Warmup Iteration  21: 2356120.460 ops/s
# Warmup Iteration  22: 2337992.697 ops/s
# Warmup Iteration  23: 2355003.088 ops/s
# Warmup Iteration  24: 2348419.947 ops/s
# Warmup Iteration  25: 2365510.622 ops/s
# Warmup Iteration  26: 2418695.342 ops/s
# Warmup Iteration  27: 2358411.378 ops/s
# Warmup Iteration  28: 2389371.195 ops/s
# Warmup Iteration  29: 2469398.546 ops/s
# Warmup Iteration  30: 2328549.519 ops/s
Iteration   1: 2384461.235 ops/s
Iteration   2: 2320374.838 ops/s
Iteration   3: 2377259.339 ops/s
Iteration   4: 2376900.673 ops/s
Iteration   5: 2351108.810 ops/s
Iteration   6: 2327102.497 ops/s
Iteration   7: 2361536.516 ops/s
Iteration   8: 2391461.512 ops/s
Iteration   9: 2430827.909 ops/s
Iteration  10: 2305258.496 ops/s
Iteration  11: 2335442.369 ops/s
Iteration  12: 2347581.701 ops/s
Iteration  13: 2347473.722 ops/s
Iteration  14: 2325061.413 ops/s
Iteration  15: 2366454.469 ops/s
Iteration  16: 2347403.758 ops/s
Iteration  17: 2315860.797 ops/s
Iteration  18: 2459203.310 ops/s
Iteration  19: 2317471.195 ops/s
Iteration  20: 2302348.806 ops/s
Iteration  21: 2329988.399 ops/s
Iteration  22: 2286028.759 ops/s
Iteration  23: 2354557.499 ops/s
Iteration  24: 2330593.149 ops/s
Iteration  25: 2344611.183 ops/s
Iteration  26: 2326274.638 ops/s
Iteration  27: 2360510.979 ops/s
Iteration  28: 2337110.891 ops/s
Iteration  29: 2301224.086 ops/s
Iteration  30: 2311207.828 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_aggregateByNonMutating":
  2345756.693 ±(99.9%) 25148.967 ops/s [Average]
  (min, avg, max) = (2286028.759, 2345756.693, 2459203.310), stdev = 37641.793
  CI (99.9%): [2320607.726, 2370905.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  2345756.693 ± 25148.967  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2443169.765 ops/s
# Warmup Iteration   2: 6005320.764 ops/s
# Warmup Iteration   3: 4990491.027 ops/s
# Warmup Iteration   4: 5989344.039 ops/s
# Warmup Iteration   5: 6010892.770 ops/s
# Warmup Iteration   6: 6095512.277 ops/s
# Warmup Iteration   7: 6139937.971 ops/s
# Warmup Iteration   8: 5965468.826 ops/s
# Warmup Iteration   9: 6048017.806 ops/s
# Warmup Iteration  10: 6110492.498 ops/s
# Warmup Iteration  11: 6187594.535 ops/s
# Warmup Iteration  12: 6150704.229 ops/s
# Warmup Iteration  13: 6146815.261 ops/s
# Warmup Iteration  14: 6207659.809 ops/s
# Warmup Iteration  15: 6244244.111 ops/s
# Warmup Iteration  16: 6404439.835 ops/s
# Warmup Iteration  17: 6409141.422 ops/s
# Warmup Iteration  18: 6399989.112 ops/s
# Warmup Iteration  19: 6418556.125 ops/s
# Warmup Iteration  20: 6412271.253 ops/s
# Warmup Iteration  21: 6391369.064 ops/s
# Warmup Iteration  22: 6415163.806 ops/s
# Warmup Iteration  23: 6188533.701 ops/s
# Warmup Iteration  24: 6104276.558 ops/s
# Warmup Iteration  25: 6095281.393 ops/s
# Warmup Iteration  26: 6171207.402 ops/s
# Warmup Iteration  27: 6120839.774 ops/s
# Warmup Iteration  28: 6147232.789 ops/s
# Warmup Iteration  29: 6137481.305 ops/s
# Warmup Iteration  30: 6042799.395 ops/s
Iteration   1: 6075973.648 ops/s
Iteration   2: 6060670.527 ops/s
Iteration   3: 6020796.380 ops/s
Iteration   4: 6130088.240 ops/s
Iteration   5: 6017029.864 ops/s
Iteration   6: 6049048.914 ops/s
Iteration   7: 5934404.591 ops/s
Iteration   8: 5985846.558 ops/s
Iteration   9: 5896364.292 ops/s
Iteration  10: 6040990.200 ops/s
Iteration  11: 5958269.441 ops/s
Iteration  12: 6067430.131 ops/s
Iteration  13: 6043871.683 ops/s
Iteration  14: 6081537.221 ops/s
Iteration  15: 6067244.475 ops/s
Iteration  16: 6393369.295 ops/s
Iteration  17: 6413891.368 ops/s
Iteration  18: 6167803.247 ops/s
Iteration  19: 6071935.596 ops/s
Iteration  20: 5942923.737 ops/s
Iteration  21: 5921329.121 ops/s
Iteration  22: 6126877.367 ops/s
Iteration  23: 6272796.509 ops/s
Iteration  24: 6131550.459 ops/s
Iteration  25: 6027391.238 ops/s
Iteration  26: 6112678.927 ops/s
Iteration  27: 6168960.028 ops/s
Iteration  28: 6225737.263 ops/s
Iteration  29: 6107973.976 ops/s
Iteration  30: 6168622.701 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_allSatisfy":
  6089446.900 ±(99.9%) 81871.763 ops/s [Average]
  (min, avg, max) = (5896364.292, 6089446.900, 6413891.368), stdev = 122541.810
  CI (99.9%): [6007575.137, 6171318.663] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_allSatisfy  thrpt   30  6089446.900 ± 81871.763  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2535712.254 ops/s
# Warmup Iteration   2: 5726755.007 ops/s
# Warmup Iteration   3: 4781929.924 ops/s
# Warmup Iteration   4: 5743306.134 ops/s
# Warmup Iteration   5: 5691961.788 ops/s
# Warmup Iteration   6: 5740547.338 ops/s
# Warmup Iteration   7: 5791096.259 ops/s
# Warmup Iteration   8: 5733420.784 ops/s
# Warmup Iteration   9: 5677250.957 ops/s
# Warmup Iteration  10: 5814353.387 ops/s
# Warmup Iteration  11: 5775263.749 ops/s
# Warmup Iteration  12: 5791126.685 ops/s
# Warmup Iteration  13: 5759233.782 ops/s
# Warmup Iteration  14: 5726158.389 ops/s
# Warmup Iteration  15: 5758575.892 ops/s
# Warmup Iteration  16: 5724311.529 ops/s
# Warmup Iteration  17: 5648121.143 ops/s
# Warmup Iteration  18: 5684728.289 ops/s
# Warmup Iteration  19: 5769916.709 ops/s
# Warmup Iteration  20: 5582396.491 ops/s
# Warmup Iteration  21: 5641280.059 ops/s
# Warmup Iteration  22: 5617259.654 ops/s
# Warmup Iteration  23: 5712945.161 ops/s
# Warmup Iteration  24: 5618346.951 ops/s
# Warmup Iteration  25: 5716003.535 ops/s
# Warmup Iteration  26: 5763084.614 ops/s
# Warmup Iteration  27: 5696491.120 ops/s
# Warmup Iteration  28: 5585136.798 ops/s
# Warmup Iteration  29: 5634082.642 ops/s
# Warmup Iteration  30: 5916566.863 ops/s
Iteration   1: 6008523.029 ops/s
Iteration   2: 5993741.708 ops/s
Iteration   3: 5997590.943 ops/s
Iteration   4: 6003214.717 ops/s
Iteration   5: 6004516.528 ops/s
Iteration   6: 5998651.117 ops/s
Iteration   7: 5974123.677 ops/s
Iteration   8: 6001060.083 ops/s
Iteration   9: 5992905.532 ops/s
Iteration  10: 5993300.211 ops/s
Iteration  11: 5981259.748 ops/s
Iteration  12: 6001217.627 ops/s
Iteration  13: 5988208.856 ops/s
Iteration  14: 5829000.291 ops/s
Iteration  15: 5647848.471 ops/s
Iteration  16: 5564052.051 ops/s
Iteration  17: 5679468.757 ops/s
Iteration  18: 5655811.945 ops/s
Iteration  19: 5691769.957 ops/s
Iteration  20: 5710402.189 ops/s
Iteration  21: 5591497.182 ops/s
Iteration  22: 5585888.842 ops/s
Iteration  23: 5626988.411 ops/s
Iteration  24: 5673550.112 ops/s
Iteration  25: 5767723.227 ops/s
Iteration  26: 5616735.025 ops/s
Iteration  27: 5670487.308 ops/s
Iteration  28: 5546449.488 ops/s
Iteration  29: 5732252.080 ops/s
Iteration  30: 5671748.077 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_allSatisfyWith":
  5806666.240 ±(99.9%) 117835.359 ops/s [Average]
  (min, avg, max) = (5546449.488, 5806666.240, 6008523.029), stdev = 176370.432
  CI (99.9%): [5688830.880, 5924501.599] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  5806666.240 ± 117835.359  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_allSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_allSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1165865.318 ops/s
# Warmup Iteration   2: 2752227.022 ops/s
# Warmup Iteration   3: 2765062.781 ops/s
# Warmup Iteration   4: 2315401.931 ops/s
# Warmup Iteration   5: 2892331.182 ops/s
# Warmup Iteration   6: 2944625.623 ops/s
# Warmup Iteration   7: 2943632.352 ops/s
# Warmup Iteration   8: 2943249.734 ops/s
# Warmup Iteration   9: 2942532.317 ops/s
# Warmup Iteration  10: 2942449.380 ops/s
# Warmup Iteration  11: 2945444.903 ops/s
# Warmup Iteration  12: 2944328.189 ops/s
# Warmup Iteration  13: 2942440.892 ops/s
# Warmup Iteration  14: 2940019.324 ops/s
# Warmup Iteration  15: 2871967.818 ops/s
# Warmup Iteration  16: 2906863.319 ops/s
# Warmup Iteration  17: 2904623.457 ops/s
# Warmup Iteration  18: 2920718.086 ops/s
# Warmup Iteration  19: 2901023.800 ops/s
# Warmup Iteration  20: 2883629.489 ops/s
# Warmup Iteration  21: 2909001.363 ops/s
# Warmup Iteration  22: 2879912.097 ops/s
# Warmup Iteration  23: 2928173.526 ops/s
# Warmup Iteration  24: 2925499.456 ops/s
# Warmup Iteration  25: 2896157.291 ops/s
# Warmup Iteration  26: 2913754.034 ops/s
# Warmup Iteration  27: 2890426.237 ops/s
# Warmup Iteration  28: 2888021.563 ops/s
# Warmup Iteration  29: 2892242.149 ops/s
# Warmup Iteration  30: 2912795.232 ops/s
Iteration   1: 2893983.582 ops/s
Iteration   2: 2903920.937 ops/s
Iteration   3: 2894335.092 ops/s
Iteration   4: 2883916.780 ops/s
Iteration   5: 2888762.699 ops/s
Iteration   6: 2885515.053 ops/s
Iteration   7: 2889334.118 ops/s
Iteration   8: 2910847.963 ops/s
Iteration   9: 2897420.595 ops/s
Iteration  10: 2877201.724 ops/s
Iteration  11: 2899085.003 ops/s
Iteration  12: 2883367.539 ops/s
Iteration  13: 2881422.032 ops/s
Iteration  14: 2907474.739 ops/s
Iteration  15: 2887158.857 ops/s
Iteration  16: 2899249.892 ops/s
Iteration  17: 2909058.243 ops/s
Iteration  18: 2867579.543 ops/s
Iteration  19: 2906120.927 ops/s
Iteration  20: 2884659.298 ops/s
Iteration  21: 2888069.437 ops/s
Iteration  22: 2903253.933 ops/s
Iteration  23: 2920465.369 ops/s
Iteration  24: 2891551.555 ops/s
Iteration  25: 2921980.939 ops/s
Iteration  26: 2899413.280 ops/s
Iteration  27: 2936602.404 ops/s
Iteration  28: 2895294.543 ops/s
Iteration  29: 2904199.308 ops/s
Iteration  30: 2905437.249 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_allSatisfyWithOccurrences":
  2897222.754 ±(99.9%) 9602.446 ops/s [Average]
  (min, avg, max) = (2867579.543, 2897222.754, 2936602.404), stdev = 14372.491
  CI (99.9%): [2887620.308, 2906825.201] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_allSatisfyWithOccurrences  thrpt   30  2897222.754 ± 9602.446  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3490098.610 ops/s
# Warmup Iteration   2: 7219629.516 ops/s
# Warmup Iteration   3: 6150492.835 ops/s
# Warmup Iteration   4: 7326570.882 ops/s
# Warmup Iteration   5: 7268328.903 ops/s
# Warmup Iteration   6: 7397093.526 ops/s
# Warmup Iteration   7: 7328040.012 ops/s
# Warmup Iteration   8: 7329919.571 ops/s
# Warmup Iteration   9: 7362851.193 ops/s
# Warmup Iteration  10: 7282277.134 ops/s
# Warmup Iteration  11: 7277335.539 ops/s
# Warmup Iteration  12: 7308388.157 ops/s
# Warmup Iteration  13: 7292645.600 ops/s
# Warmup Iteration  14: 7334183.067 ops/s
# Warmup Iteration  15: 7399138.394 ops/s
# Warmup Iteration  16: 7324466.975 ops/s
# Warmup Iteration  17: 7312615.805 ops/s
# Warmup Iteration  18: 7366550.074 ops/s
# Warmup Iteration  19: 7330341.353 ops/s
# Warmup Iteration  20: 7300028.212 ops/s
# Warmup Iteration  21: 7263739.722 ops/s
# Warmup Iteration  22: 7316579.910 ops/s
# Warmup Iteration  23: 7284433.173 ops/s
# Warmup Iteration  24: 7308713.501 ops/s
# Warmup Iteration  25: 7358576.129 ops/s
# Warmup Iteration  26: 7354097.658 ops/s
# Warmup Iteration  27: 7319308.970 ops/s
# Warmup Iteration  28: 7389725.169 ops/s
# Warmup Iteration  29: 7345694.143 ops/s
# Warmup Iteration  30: 7357686.225 ops/s
Iteration   1: 7317537.331 ops/s
Iteration   2: 7383034.291 ops/s
Iteration   3: 7337844.251 ops/s
Iteration   4: 7320416.434 ops/s
Iteration   5: 7269872.934 ops/s
Iteration   6: 7279518.666 ops/s
Iteration   7: 7320304.963 ops/s
Iteration   8: 7314969.338 ops/s
Iteration   9: 7328709.227 ops/s
Iteration  10: 7354813.895 ops/s
Iteration  11: 7364851.561 ops/s
Iteration  12: 7273073.040 ops/s
Iteration  13: 7321591.542 ops/s
Iteration  14: 7395183.448 ops/s
Iteration  15: 7342568.292 ops/s
Iteration  16: 7403106.389 ops/s
Iteration  17: 7376207.838 ops/s
Iteration  18: 7341489.832 ops/s
Iteration  19: 7327496.472 ops/s
Iteration  20: 7287396.241 ops/s
Iteration  21: 7399923.585 ops/s
Iteration  22: 7445831.487 ops/s
Iteration  23: 7427929.498 ops/s
Iteration  24: 7448038.656 ops/s
Iteration  25: 7455409.794 ops/s
Iteration  26: 7423624.160 ops/s
Iteration  27: 7421959.525 ops/s
Iteration  28: 7409933.724 ops/s
Iteration  29: 7435736.489 ops/s
Iteration  30: 7434638.741 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_anySatisfy":
  7365433.722 ±(99.9%) 38082.196 ops/s [Average]
  (min, avg, max) = (7269872.934, 7365433.722, 7455409.794), stdev = 56999.642
  CI (99.9%): [7327351.526, 7403515.917] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_anySatisfy  thrpt   30  7365433.722 ± 38082.196  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2417040.916 ops/s
# Warmup Iteration   2: 5658446.226 ops/s
# Warmup Iteration   3: 4819925.168 ops/s
# Warmup Iteration   4: 5646465.744 ops/s
# Warmup Iteration   5: 5645902.543 ops/s
# Warmup Iteration   6: 5397672.204 ops/s
# Warmup Iteration   7: 5397048.573 ops/s
# Warmup Iteration   8: 5507083.035 ops/s
# Warmup Iteration   9: 5483892.545 ops/s
# Warmup Iteration  10: 5398444.370 ops/s
# Warmup Iteration  11: 5600068.249 ops/s
# Warmup Iteration  12: 5409666.014 ops/s
# Warmup Iteration  13: 5509190.874 ops/s
# Warmup Iteration  14: 5751892.173 ops/s
# Warmup Iteration  15: 5746589.414 ops/s
# Warmup Iteration  16: 5740779.527 ops/s
# Warmup Iteration  17: 5736405.456 ops/s
# Warmup Iteration  18: 5737934.282 ops/s
# Warmup Iteration  19: 5673654.006 ops/s
# Warmup Iteration  20: 5677584.895 ops/s
# Warmup Iteration  21: 5735995.700 ops/s
# Warmup Iteration  22: 5530731.089 ops/s
# Warmup Iteration  23: 5439851.422 ops/s
# Warmup Iteration  24: 5522399.537 ops/s
# Warmup Iteration  25: 5485986.846 ops/s
# Warmup Iteration  26: 5436191.250 ops/s
# Warmup Iteration  27: 5446966.182 ops/s
# Warmup Iteration  28: 5409230.654 ops/s
# Warmup Iteration  29: 5716058.927 ops/s
# Warmup Iteration  30: 5502183.884 ops/s
Iteration   1: 5411930.197 ops/s
Iteration   2: 5613687.649 ops/s
Iteration   3: 5433253.749 ops/s
Iteration   4: 5416580.485 ops/s
Iteration   5: 5511852.008 ops/s
Iteration   6: 5403638.416 ops/s
Iteration   7: 5398735.480 ops/s
Iteration   8: 5354240.298 ops/s
Iteration   9: 5404333.307 ops/s
Iteration  10: 5541083.018 ops/s
Iteration  11: 5443357.877 ops/s
Iteration  12: 5402477.581 ops/s
Iteration  13: 5384250.730 ops/s
Iteration  14: 5360360.641 ops/s
Iteration  15: 5458540.054 ops/s
Iteration  16: 5634780.950 ops/s
Iteration  17: 5721114.983 ops/s
Iteration  18: 5415813.909 ops/s
Iteration  19: 5501771.302 ops/s
Iteration  20: 5481415.655 ops/s
Iteration  21: 5696074.073 ops/s
Iteration  22: 5365633.856 ops/s
Iteration  23: 5541123.331 ops/s
Iteration  24: 5516245.978 ops/s
Iteration  25: 5676856.197 ops/s
Iteration  26: 5491550.888 ops/s
Iteration  27: 5435807.463 ops/s
Iteration  28: 5331500.156 ops/s
Iteration  29: 5381566.113 ops/s
Iteration  30: 5533767.957 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_anySatisfyWith":
  5475444.810 ±(99.9%) 70737.411 ops/s [Average]
  (min, avg, max) = (5331500.156, 5475444.810, 5721114.983), stdev = 105876.434
  CI (99.9%): [5404707.399, 5546182.221] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  5475444.810 ± 70737.411  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_anySatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_anySatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1239261.657 ops/s
# Warmup Iteration   2: 2645167.413 ops/s
# Warmup Iteration   3: 2612509.931 ops/s
# Warmup Iteration   4: 2619328.247 ops/s
# Warmup Iteration   5: 2116865.370 ops/s
# Warmup Iteration   6: 2618236.583 ops/s
# Warmup Iteration   7: 2626630.083 ops/s
# Warmup Iteration   8: 2597264.734 ops/s
# Warmup Iteration   9: 2681968.125 ops/s
# Warmup Iteration  10: 2644442.800 ops/s
# Warmup Iteration  11: 2762958.869 ops/s
# Warmup Iteration  12: 2760575.878 ops/s
# Warmup Iteration  13: 2599745.222 ops/s
# Warmup Iteration  14: 2635751.170 ops/s
# Warmup Iteration  15: 2650114.735 ops/s
# Warmup Iteration  16: 2682144.535 ops/s
# Warmup Iteration  17: 2627383.099 ops/s
# Warmup Iteration  18: 2577757.577 ops/s
# Warmup Iteration  19: 2642729.444 ops/s
# Warmup Iteration  20: 2607490.349 ops/s
# Warmup Iteration  21: 2624104.940 ops/s
# Warmup Iteration  22: 2632940.367 ops/s
# Warmup Iteration  23: 2605261.595 ops/s
# Warmup Iteration  24: 2636274.472 ops/s
# Warmup Iteration  25: 2642921.091 ops/s
# Warmup Iteration  26: 2726007.897 ops/s
# Warmup Iteration  27: 2714884.825 ops/s
# Warmup Iteration  28: 2762883.474 ops/s
# Warmup Iteration  29: 2774774.350 ops/s
# Warmup Iteration  30: 2780790.438 ops/s
Iteration   1: 2774700.684 ops/s
Iteration   2: 2777399.435 ops/s
Iteration   3: 2777752.372 ops/s
Iteration   4: 2774106.952 ops/s
Iteration   5: 2774803.212 ops/s
Iteration   6: 2768710.457 ops/s
Iteration   7: 2766990.045 ops/s
Iteration   8: 2780507.064 ops/s
Iteration   9: 2773399.073 ops/s
Iteration  10: 2639036.564 ops/s
Iteration  11: 2744771.014 ops/s
Iteration  12: 2782590.738 ops/s
Iteration  13: 2732397.494 ops/s
Iteration  14: 2644710.861 ops/s
Iteration  15: 2622910.513 ops/s
Iteration  16: 2670072.227 ops/s
Iteration  17: 2619845.197 ops/s
Iteration  18: 2601991.761 ops/s
Iteration  19: 2725476.832 ops/s
Iteration  20: 2755067.861 ops/s
Iteration  21: 2607589.985 ops/s
Iteration  22: 2616914.705 ops/s
Iteration  23: 2606110.872 ops/s
Iteration  24: 2602519.234 ops/s
Iteration  25: 2557428.199 ops/s
Iteration  26: 2592587.115 ops/s
Iteration  27: 2633030.961 ops/s
Iteration  28: 2632621.801 ops/s
Iteration  29: 2609843.875 ops/s
Iteration  30: 2604125.714 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_anySatisfyWithOccurrences":
  2685667.094 ±(99.9%) 52458.823 ops/s [Average]
  (min, avg, max) = (2557428.199, 2685667.094, 2782590.738), stdev = 78517.903
  CI (99.9%): [2633208.270, 2738125.917] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_anySatisfyWithOccurrences  thrpt   30  2685667.094 ± 52458.823  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1177779.599 ops/s
# Warmup Iteration   2: 2788469.516 ops/s
# Warmup Iteration   3: 2780775.874 ops/s
# Warmup Iteration   4: 2270514.352 ops/s
# Warmup Iteration   5: 2759270.643 ops/s
# Warmup Iteration   6: 2802273.168 ops/s
# Warmup Iteration   7: 2799193.014 ops/s
# Warmup Iteration   8: 2808177.207 ops/s
# Warmup Iteration   9: 2825847.543 ops/s
# Warmup Iteration  10: 2829991.301 ops/s
# Warmup Iteration  11: 2748479.791 ops/s
# Warmup Iteration  12: 2832048.564 ops/s
# Warmup Iteration  13: 2760355.157 ops/s
# Warmup Iteration  14: 2855493.834 ops/s
# Warmup Iteration  15: 2847266.559 ops/s
# Warmup Iteration  16: 2857271.876 ops/s
# Warmup Iteration  17: 2864436.729 ops/s
# Warmup Iteration  18: 2795859.696 ops/s
# Warmup Iteration  19: 2808716.956 ops/s
# Warmup Iteration  20: 2784869.142 ops/s
# Warmup Iteration  21: 2774925.082 ops/s
# Warmup Iteration  22: 2758455.472 ops/s
# Warmup Iteration  23: 2783753.060 ops/s
# Warmup Iteration  24: 2825526.680 ops/s
# Warmup Iteration  25: 2867844.757 ops/s
# Warmup Iteration  26: 2840438.997 ops/s
# Warmup Iteration  27: 2787366.620 ops/s
# Warmup Iteration  28: 2802528.382 ops/s
# Warmup Iteration  29: 2824243.543 ops/s
# Warmup Iteration  30: 2749446.586 ops/s
Iteration   1: 2740266.406 ops/s
Iteration   2: 2771935.321 ops/s
Iteration   3: 2752922.017 ops/s
Iteration   4: 2782265.737 ops/s
Iteration   5: 2764795.807 ops/s
Iteration   6: 2790516.784 ops/s
Iteration   7: 2807283.834 ops/s
Iteration   8: 2769906.158 ops/s
Iteration   9: 2734409.115 ops/s
Iteration  10: 2696497.326 ops/s
Iteration  11: 2779244.372 ops/s
Iteration  12: 2744933.105 ops/s
Iteration  13: 2761986.006 ops/s
Iteration  14: 2752775.186 ops/s
Iteration  15: 2826367.968 ops/s
Iteration  16: 2755019.589 ops/s
Iteration  17: 2774718.263 ops/s
Iteration  18: 2766765.548 ops/s
Iteration  19: 2732760.084 ops/s
Iteration  20: 2807423.944 ops/s
Iteration  21: 2781597.901 ops/s
Iteration  22: 2794482.908 ops/s
Iteration  23: 2771929.697 ops/s
Iteration  24: 2895017.447 ops/s
Iteration  25: 2952236.411 ops/s
Iteration  26: 2949484.073 ops/s
Iteration  27: 2949701.415 ops/s
Iteration  28: 2944525.036 ops/s
Iteration  29: 2944971.719 ops/s
Iteration  30: 2947333.887 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_appendString":
  2808135.769 ±(99.9%) 52652.524 ops/s [Average]
  (min, avg, max) = (2696497.326, 2808135.769, 2952236.411), stdev = 78807.825
  CI (99.9%): [2755483.245, 2860788.292] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_appendString  thrpt   30  2808135.769 ± 52652.524  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_appendStringThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_appendStringThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 105520.763 ops/s
# Warmup Iteration   2: 112274.751 ops/s
# Warmup Iteration   3: 131033.878 ops/s
# Warmup Iteration   4: 137899.457 ops/s
# Warmup Iteration   5: 133312.379 ops/s
# Warmup Iteration   6: 135102.803 ops/s
# Warmup Iteration   7: 136840.943 ops/s
# Warmup Iteration   8: 135085.888 ops/s
# Warmup Iteration   9: 136493.214 ops/s
# Warmup Iteration  10: 132757.356 ops/s
# Warmup Iteration  11: 131734.543 ops/s
# Warmup Iteration  12: 132461.167 ops/s
# Warmup Iteration  13: 133912.242 ops/s
# Warmup Iteration  14: 125373.595 ops/s
# Warmup Iteration  15: 119907.302 ops/s
# Warmup Iteration  16: 135219.480 ops/s
# Warmup Iteration  17: 140146.290 ops/s
# Warmup Iteration  18: 144641.550 ops/s
# Warmup Iteration  19: 139717.500 ops/s
# Warmup Iteration  20: 138756.039 ops/s
# Warmup Iteration  21: 141161.372 ops/s
# Warmup Iteration  22: 141039.423 ops/s
# Warmup Iteration  23: 138825.158 ops/s
# Warmup Iteration  24: 140460.678 ops/s
# Warmup Iteration  25: 144109.216 ops/s
# Warmup Iteration  26: 144533.756 ops/s
# Warmup Iteration  27: 139530.998 ops/s
# Warmup Iteration  28: 139350.823 ops/s
# Warmup Iteration  29: 140323.068 ops/s
# Warmup Iteration  30: 139422.634 ops/s
Iteration   1: 140115.387 ops/s
Iteration   2: 141718.620 ops/s
Iteration   3: 142436.226 ops/s
Iteration   4: 139899.593 ops/s
Iteration   5: 137533.050 ops/s
Iteration   6: 140232.153 ops/s
Iteration   7: 139147.601 ops/s
Iteration   8: 139503.442 ops/s
Iteration   9: 136873.158 ops/s
Iteration  10: 138417.885 ops/s
Iteration  11: 138877.895 ops/s
Iteration  12: 139270.420 ops/s
Iteration  13: 140355.557 ops/s
Iteration  14: 145668.429 ops/s
Iteration  15: 139803.841 ops/s
Iteration  16: 139427.549 ops/s
Iteration  17: 141440.650 ops/s
Iteration  18: 144952.076 ops/s
Iteration  19: 148871.149 ops/s
Iteration  20: 148996.191 ops/s
Iteration  21: 145765.434 ops/s
Iteration  22: 143350.985 ops/s
Iteration  23: 142497.272 ops/s
Iteration  24: 141403.450 ops/s
Iteration  25: 143683.018 ops/s
Iteration  26: 145022.384 ops/s
Iteration  27: 143270.774 ops/s
Iteration  28: 139902.451 ops/s
Iteration  29: 142308.802 ops/s
Iteration  30: 141988.741 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_appendStringThrows":
  141757.806 ±(99.9%) 2029.935 ops/s [Average]
  (min, avg, max) = (136873.158, 141757.806, 148996.191), stdev = 3038.311
  CI (99.9%): [139727.871, 143787.741] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_appendStringThrows  thrpt   30  141757.806 ± 2029.935  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_appendStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_appendStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1190242.690 ops/s
# Warmup Iteration   2: 2799507.293 ops/s
# Warmup Iteration   3: 2800956.990 ops/s
# Warmup Iteration   4: 2444331.582 ops/s
# Warmup Iteration   5: 2950875.159 ops/s
# Warmup Iteration   6: 2829014.059 ops/s
# Warmup Iteration   7: 2807819.616 ops/s
# Warmup Iteration   8: 2811116.468 ops/s
# Warmup Iteration   9: 2781655.458 ops/s
# Warmup Iteration  10: 2872042.372 ops/s
# Warmup Iteration  11: 2981331.171 ops/s
# Warmup Iteration  12: 3016153.115 ops/s
# Warmup Iteration  13: 3014480.330 ops/s
# Warmup Iteration  14: 3008590.699 ops/s
# Warmup Iteration  15: 3015669.470 ops/s
# Warmup Iteration  16: 3015224.573 ops/s
# Warmup Iteration  17: 3007657.355 ops/s
# Warmup Iteration  18: 3009900.652 ops/s
# Warmup Iteration  19: 2852861.950 ops/s
# Warmup Iteration  20: 2844108.431 ops/s
# Warmup Iteration  21: 2812153.251 ops/s
# Warmup Iteration  22: 2834258.971 ops/s
# Warmup Iteration  23: 2854233.098 ops/s
# Warmup Iteration  24: 2889962.029 ops/s
# Warmup Iteration  25: 2801708.454 ops/s
# Warmup Iteration  26: 2804023.710 ops/s
# Warmup Iteration  27: 2837132.830 ops/s
# Warmup Iteration  28: 2839867.696 ops/s
# Warmup Iteration  29: 2826795.164 ops/s
# Warmup Iteration  30: 2832370.788 ops/s
Iteration   1: 2852767.261 ops/s
Iteration   2: 2876497.463 ops/s
Iteration   3: 2887421.107 ops/s
Iteration   4: 2820829.825 ops/s
Iteration   5: 2868123.663 ops/s
Iteration   6: 2818354.147 ops/s
Iteration   7: 2845230.161 ops/s
Iteration   8: 2843139.070 ops/s
Iteration   9: 2826543.249 ops/s
Iteration  10: 2873642.540 ops/s
Iteration  11: 2886475.975 ops/s
Iteration  12: 2869130.554 ops/s
Iteration  13: 2821915.777 ops/s
Iteration  14: 2859960.413 ops/s
Iteration  15: 2832215.783 ops/s
Iteration  16: 2781529.531 ops/s
Iteration  17: 2916104.007 ops/s
Iteration  18: 2861291.060 ops/s
Iteration  19: 2846898.141 ops/s
Iteration  20: 2912729.489 ops/s
Iteration  21: 2887630.938 ops/s
Iteration  22: 2869756.301 ops/s
Iteration  23: 2833312.075 ops/s
Iteration  24: 3012571.615 ops/s
Iteration  25: 2862971.290 ops/s
Iteration  26: 2830441.140 ops/s
Iteration  27: 2844095.297 ops/s
Iteration  28: 2834128.923 ops/s
Iteration  29: 2806177.960 ops/s
Iteration  30: 2836044.058 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_appendStringWithSeparator":
  2857264.294 ±(99.9%) 28123.396 ops/s [Average]
  (min, avg, max) = (2781529.531, 2857264.294, 3012571.615), stdev = 42093.778
  CI (99.9%): [2829140.898, 2885387.689] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_appendStringWithSeparator  thrpt   30  2857264.294 ± 28123.396  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1614232.588 ops/s
# Warmup Iteration   2: 3223173.479 ops/s
# Warmup Iteration   3: 3292906.870 ops/s
# Warmup Iteration   4: 2824998.302 ops/s
# Warmup Iteration   5: 3312602.931 ops/s
# Warmup Iteration   6: 3447688.554 ops/s
# Warmup Iteration   7: 3275697.493 ops/s
# Warmup Iteration   8: 3305231.883 ops/s
# Warmup Iteration   9: 3254339.978 ops/s
# Warmup Iteration  10: 3304827.483 ops/s
# Warmup Iteration  11: 3294981.129 ops/s
# Warmup Iteration  12: 3356162.494 ops/s
# Warmup Iteration  13: 3331076.347 ops/s
# Warmup Iteration  14: 3259027.109 ops/s
# Warmup Iteration  15: 3280249.148 ops/s
# Warmup Iteration  16: 3262958.648 ops/s
# Warmup Iteration  17: 3282264.900 ops/s
# Warmup Iteration  18: 3313104.729 ops/s
# Warmup Iteration  19: 3256639.961 ops/s
# Warmup Iteration  20: 3385962.082 ops/s
# Warmup Iteration  21: 3336146.777 ops/s
# Warmup Iteration  22: 3304597.922 ops/s
# Warmup Iteration  23: 3306599.651 ops/s
# Warmup Iteration  24: 3384336.384 ops/s
# Warmup Iteration  25: 3378895.069 ops/s
# Warmup Iteration  26: 3531793.636 ops/s
# Warmup Iteration  27: 3532759.334 ops/s
# Warmup Iteration  28: 3532135.316 ops/s
# Warmup Iteration  29: 3529919.470 ops/s
# Warmup Iteration  30: 3532335.657 ops/s
Iteration   1: 3529423.340 ops/s
Iteration   2: 3525349.646 ops/s
Iteration   3: 3536260.888 ops/s
Iteration   4: 3530756.843 ops/s
Iteration   5: 3527230.679 ops/s
Iteration   6: 3388279.244 ops/s
Iteration   7: 3447518.800 ops/s
Iteration   8: 3464942.386 ops/s
Iteration   9: 3436834.720 ops/s
Iteration  10: 3393148.851 ops/s
Iteration  11: 3439610.932 ops/s
Iteration  12: 3489929.756 ops/s
Iteration  13: 3255075.340 ops/s
Iteration  14: 3268063.473 ops/s
Iteration  15: 3308944.381 ops/s
Iteration  16: 3275010.575 ops/s
Iteration  17: 3247980.180 ops/s
Iteration  18: 3243341.455 ops/s
Iteration  19: 3290496.160 ops/s
Iteration  20: 3308521.084 ops/s
Iteration  21: 3363852.348 ops/s
Iteration  22: 3303685.073 ops/s
Iteration  23: 3299723.280 ops/s
Iteration  24: 3394443.748 ops/s
Iteration  25: 3355510.728 ops/s
Iteration  26: 3325103.336 ops/s
Iteration  27: 3346984.568 ops/s
Iteration  28: 3425722.506 ops/s
Iteration  29: 3336319.196 ops/s
Iteration  30: 3504296.830 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd":
  3385412.012 ±(99.9%) 64776.268 ops/s [Average]
  (min, avg, max) = (3243341.455, 3385412.012, 3536260.888), stdev = 96954.076
  CI (99.9%): [3320635.743, 3450188.280] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd  thrpt   30  3385412.012 ± 64776.268  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13276424.878 ops/s
# Warmup Iteration   2: 23496926.550 ops/s
# Warmup Iteration   3: 28045097.427 ops/s
# Warmup Iteration   4: 28480183.977 ops/s
# Warmup Iteration   5: 28454448.656 ops/s
# Warmup Iteration   6: 28139620.144 ops/s
# Warmup Iteration   7: 28348850.908 ops/s
# Warmup Iteration   8: 28427796.100 ops/s
# Warmup Iteration   9: 28688074.074 ops/s
# Warmup Iteration  10: 28320287.266 ops/s
# Warmup Iteration  11: 28020471.726 ops/s
# Warmup Iteration  12: 28441785.601 ops/s
# Warmup Iteration  13: 28353908.001 ops/s
# Warmup Iteration  14: 28770101.548 ops/s
# Warmup Iteration  15: 29150429.876 ops/s
# Warmup Iteration  16: 28169301.851 ops/s
# Warmup Iteration  17: 28080660.584 ops/s
# Warmup Iteration  18: 27927258.444 ops/s
# Warmup Iteration  19: 27679022.544 ops/s
# Warmup Iteration  20: 28066035.820 ops/s
# Warmup Iteration  21: 28009093.128 ops/s
# Warmup Iteration  22: 28081208.326 ops/s
# Warmup Iteration  23: 28041669.497 ops/s
# Warmup Iteration  24: 27931417.675 ops/s
# Warmup Iteration  25: 27886210.312 ops/s
# Warmup Iteration  26: 28772237.013 ops/s
# Warmup Iteration  27: 28116603.172 ops/s
# Warmup Iteration  28: 27976540.358 ops/s
# Warmup Iteration  29: 28035710.522 ops/s
# Warmup Iteration  30: 27492841.943 ops/s
Iteration   1: 27907080.411 ops/s
Iteration   2: 28060613.188 ops/s
Iteration   3: 28178950.800 ops/s
Iteration   4: 28288583.902 ops/s
Iteration   5: 28886404.862 ops/s
Iteration   6: 28401112.876 ops/s
Iteration   7: 29346263.137 ops/s
Iteration   8: 29358643.573 ops/s
Iteration   9: 29328638.613 ops/s
Iteration  10: 29433661.877 ops/s
Iteration  11: 29288794.113 ops/s
Iteration  12: 29115176.911 ops/s
Iteration  13: 28949540.944 ops/s
Iteration  14: 29241975.396 ops/s
Iteration  15: 29242112.749 ops/s
Iteration  16: 28999374.284 ops/s
Iteration  17: 29227196.619 ops/s
Iteration  18: 29314418.289 ops/s
Iteration  19: 29124073.802 ops/s
Iteration  20: 28710375.340 ops/s
Iteration  21: 28517202.078 ops/s
Iteration  22: 29160459.303 ops/s
Iteration  23: 29445317.843 ops/s
Iteration  24: 29239497.175 ops/s
Iteration  25: 29090889.583 ops/s
Iteration  26: 29122911.709 ops/s
Iteration  27: 29193537.065 ops/s
Iteration  28: 29206389.003 ops/s
Iteration  29: 29394382.228 ops/s
Iteration  30: 29178955.414 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_asLazy":
  28998417.770 ±(99.9%) 289497.354 ops/s [Average]
  (min, avg, max) = (27907080.411, 28998417.770, 29445317.843), stdev = 433306.044
  CI (99.9%): [28708920.416, 29287915.124] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_asLazy  thrpt   30  28998417.770 ± 289497.354  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13495533.209 ops/s
# Warmup Iteration   2: 21634515.164 ops/s
# Warmup Iteration   3: 25717440.785 ops/s
# Warmup Iteration   4: 25692851.377 ops/s
# Warmup Iteration   5: 25691340.498 ops/s
# Warmup Iteration   6: 25703627.035 ops/s
# Warmup Iteration   7: 25791319.388 ops/s
# Warmup Iteration   8: 25578979.761 ops/s
# Warmup Iteration   9: 25189565.877 ops/s
# Warmup Iteration  10: 25267719.997 ops/s
# Warmup Iteration  11: 25424692.041 ops/s
# Warmup Iteration  12: 24962736.050 ops/s
# Warmup Iteration  13: 24832853.448 ops/s
# Warmup Iteration  14: 25260492.940 ops/s
# Warmup Iteration  15: 25382906.775 ops/s
# Warmup Iteration  16: 24704419.818 ops/s
# Warmup Iteration  17: 24657175.170 ops/s
# Warmup Iteration  18: 25030849.027 ops/s
# Warmup Iteration  19: 24892818.758 ops/s
# Warmup Iteration  20: 24925414.007 ops/s
# Warmup Iteration  21: 24711921.546 ops/s
# Warmup Iteration  22: 24830740.728 ops/s
# Warmup Iteration  23: 25220909.296 ops/s
# Warmup Iteration  24: 25190053.371 ops/s
# Warmup Iteration  25: 25403100.489 ops/s
# Warmup Iteration  26: 25644962.948 ops/s
# Warmup Iteration  27: 25344480.990 ops/s
# Warmup Iteration  28: 24805162.647 ops/s
# Warmup Iteration  29: 25148683.343 ops/s
# Warmup Iteration  30: 24597394.310 ops/s
Iteration   1: 25317924.715 ops/s
Iteration   2: 24904248.164 ops/s
Iteration   3: 24820920.727 ops/s
Iteration   4: 25051899.324 ops/s
Iteration   5: 24798411.142 ops/s
Iteration   6: 24879582.361 ops/s
Iteration   7: 24834820.822 ops/s
Iteration   8: 25000934.312 ops/s
Iteration   9: 25395628.273 ops/s
Iteration  10: 25309471.291 ops/s
Iteration  11: 25032090.969 ops/s
Iteration  12: 25799947.751 ops/s
Iteration  13: 25575725.999 ops/s
Iteration  14: 25492652.915 ops/s
Iteration  15: 25436320.261 ops/s
Iteration  16: 25404313.862 ops/s
Iteration  17: 25304492.157 ops/s
Iteration  18: 25279808.736 ops/s
Iteration  19: 25106554.442 ops/s
Iteration  20: 24924625.135 ops/s
Iteration  21: 25377096.757 ops/s
Iteration  22: 24971228.404 ops/s
Iteration  23: 24715874.404 ops/s
Iteration  24: 25303238.043 ops/s
Iteration  25: 25322840.819 ops/s
Iteration  26: 25355997.470 ops/s
Iteration  27: 25309415.504 ops/s
Iteration  28: 25391863.292 ops/s
Iteration  29: 25090550.441 ops/s
Iteration  30: 24597166.779 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_asSynchronized":
  25170188.176 ±(99.9%) 189550.188 ops/s [Average]
  (min, avg, max) = (24597166.779, 25170188.176, 25799947.751), stdev = 283709.819
  CI (99.9%): [24980637.988, 25359738.363] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_asSynchronized  thrpt   30  25170188.176 ± 189550.188  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15295950.528 ops/s
# Warmup Iteration   2: 25188051.324 ops/s
# Warmup Iteration   3: 29540461.026 ops/s
# Warmup Iteration   4: 29671021.128 ops/s
# Warmup Iteration   5: 29287806.138 ops/s
# Warmup Iteration   6: 28819556.872 ops/s
# Warmup Iteration   7: 29028017.179 ops/s
# Warmup Iteration   8: 28860342.583 ops/s
# Warmup Iteration   9: 29111882.122 ops/s
# Warmup Iteration  10: 28908043.780 ops/s
# Warmup Iteration  11: 29400410.461 ops/s
# Warmup Iteration  12: 28734396.530 ops/s
# Warmup Iteration  13: 28949746.319 ops/s
# Warmup Iteration  14: 28659589.823 ops/s
# Warmup Iteration  15: 29238860.222 ops/s
# Warmup Iteration  16: 29896048.782 ops/s
# Warmup Iteration  17: 29768269.762 ops/s
# Warmup Iteration  18: 29482296.749 ops/s
# Warmup Iteration  19: 29322076.300 ops/s
# Warmup Iteration  20: 29340604.243 ops/s
# Warmup Iteration  21: 29315758.796 ops/s
# Warmup Iteration  22: 28747695.863 ops/s
# Warmup Iteration  23: 29670086.286 ops/s
# Warmup Iteration  24: 29804961.100 ops/s
# Warmup Iteration  25: 29601012.427 ops/s
# Warmup Iteration  26: 29285254.708 ops/s
# Warmup Iteration  27: 28893397.157 ops/s
# Warmup Iteration  28: 29377991.724 ops/s
# Warmup Iteration  29: 29233203.834 ops/s
# Warmup Iteration  30: 28928607.481 ops/s
Iteration   1: 28712531.246 ops/s
Iteration   2: 28731075.865 ops/s
Iteration   3: 28726959.614 ops/s
Iteration   4: 29122053.567 ops/s
Iteration   5: 28531570.535 ops/s
Iteration   6: 28856507.226 ops/s
Iteration   7: 29510319.108 ops/s
Iteration   8: 29130650.596 ops/s
Iteration   9: 29096705.750 ops/s
Iteration  10: 28827723.227 ops/s
Iteration  11: 28767273.792 ops/s
Iteration  12: 29011933.482 ops/s
Iteration  13: 29187724.772 ops/s
Iteration  14: 28968167.789 ops/s
Iteration  15: 28867686.964 ops/s
Iteration  16: 29241822.401 ops/s
Iteration  17: 28651824.129 ops/s
Iteration  18: 29681304.034 ops/s
Iteration  19: 29175461.537 ops/s
Iteration  20: 29526165.553 ops/s
Iteration  21: 28958926.235 ops/s
Iteration  22: 29178617.685 ops/s
Iteration  23: 28683216.086 ops/s
Iteration  24: 28733047.824 ops/s
Iteration  25: 28850647.593 ops/s
Iteration  26: 28858979.841 ops/s
Iteration  27: 29260227.430 ops/s
Iteration  28: 29596850.612 ops/s
Iteration  29: 29497000.584 ops/s
Iteration  30: 29376982.824 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_asUnmodifiable":
  29043998.597 ±(99.9%) 209921.106 ops/s [Average]
  (min, avg, max) = (28531570.535, 29043998.597, 29681304.034), stdev = 314200.053
  CI (99.9%): [28834077.491, 29253919.703] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  29043998.597 ± 209921.106  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_bottomOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_bottomOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 101948.518 ops/s
# Warmup Iteration   2: 207774.156 ops/s
# Warmup Iteration   3: 223690.891 ops/s
# Warmup Iteration   4: 226742.835 ops/s
# Warmup Iteration   5: 190279.861 ops/s
# Warmup Iteration   6: 225503.192 ops/s
# Warmup Iteration   7: 225631.151 ops/s
# Warmup Iteration   8: 227745.382 ops/s
# Warmup Iteration   9: 230411.404 ops/s
# Warmup Iteration  10: 228932.293 ops/s
# Warmup Iteration  11: 227081.691 ops/s
# Warmup Iteration  12: 228713.623 ops/s
# Warmup Iteration  13: 227248.704 ops/s
# Warmup Iteration  14: 228025.154 ops/s
# Warmup Iteration  15: 231061.695 ops/s
# Warmup Iteration  16: 231500.172 ops/s
# Warmup Iteration  17: 230769.086 ops/s
# Warmup Iteration  18: 231600.121 ops/s
# Warmup Iteration  19: 229133.823 ops/s
# Warmup Iteration  20: 240762.769 ops/s
# Warmup Iteration  21: 236636.536 ops/s
# Warmup Iteration  22: 236145.204 ops/s
# Warmup Iteration  23: 234271.443 ops/s
# Warmup Iteration  24: 239429.627 ops/s
# Warmup Iteration  25: 236250.247 ops/s
# Warmup Iteration  26: 230388.768 ops/s
# Warmup Iteration  27: 233564.315 ops/s
# Warmup Iteration  28: 234447.853 ops/s
# Warmup Iteration  29: 232863.706 ops/s
# Warmup Iteration  30: 234862.775 ops/s
Iteration   1: 232531.638 ops/s
Iteration   2: 239185.962 ops/s
Iteration   3: 229917.096 ops/s
Iteration   4: 231161.303 ops/s
Iteration   5: 229725.952 ops/s
Iteration   6: 233210.245 ops/s
Iteration   7: 236576.838 ops/s
Iteration   8: 230376.592 ops/s
Iteration   9: 235280.104 ops/s
Iteration  10: 233911.208 ops/s
Iteration  11: 233594.805 ops/s
Iteration  12: 233716.814 ops/s
Iteration  13: 233438.524 ops/s
Iteration  14: 230847.659 ops/s
Iteration  15: 235809.102 ops/s
Iteration  16: 232245.064 ops/s
Iteration  17: 235026.039 ops/s
Iteration  18: 232770.544 ops/s
Iteration  19: 238009.237 ops/s
Iteration  20: 237961.671 ops/s
Iteration  21: 240516.868 ops/s
Iteration  22: 240103.505 ops/s
Iteration  23: 235109.576 ops/s
Iteration  24: 233032.042 ops/s
Iteration  25: 239049.001 ops/s
Iteration  26: 234564.076 ops/s
Iteration  27: 234123.960 ops/s
Iteration  28: 234679.505 ops/s
Iteration  29: 240597.553 ops/s
Iteration  30: 238536.910 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_bottomOccurrences":
  234853.647 ±(99.9%) 2133.407 ops/s [Average]
  (min, avg, max) = (229725.952, 234853.647, 240597.553), stdev = 3193.184
  CI (99.9%): [232720.239, 236987.054] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_bottomOccurrences  thrpt   30  234853.647 ± 2133.407  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1065164.811 ops/s
# Warmup Iteration   2: 2433846.779 ops/s
# Warmup Iteration   3: 2131893.096 ops/s
# Warmup Iteration   4: 2399190.289 ops/s
# Warmup Iteration   5: 2437266.462 ops/s
# Warmup Iteration   6: 2527518.449 ops/s
# Warmup Iteration   7: 2428818.117 ops/s
# Warmup Iteration   8: 2474219.348 ops/s
# Warmup Iteration   9: 2510101.817 ops/s
# Warmup Iteration  10: 2499319.295 ops/s
# Warmup Iteration  11: 2481989.455 ops/s
# Warmup Iteration  12: 2514248.892 ops/s
# Warmup Iteration  13: 2448579.607 ops/s
# Warmup Iteration  14: 2485506.650 ops/s
# Warmup Iteration  15: 2450008.565 ops/s
# Warmup Iteration  16: 2418217.916 ops/s
# Warmup Iteration  17: 2409318.731 ops/s
# Warmup Iteration  18: 2448563.426 ops/s
# Warmup Iteration  19: 2414214.748 ops/s
# Warmup Iteration  20: 2493411.025 ops/s
# Warmup Iteration  21: 2431674.181 ops/s
# Warmup Iteration  22: 2414189.452 ops/s
# Warmup Iteration  23: 2414247.493 ops/s
# Warmup Iteration  24: 2476384.244 ops/s
# Warmup Iteration  25: 2449856.688 ops/s
# Warmup Iteration  26: 2489545.941 ops/s
# Warmup Iteration  27: 2548151.493 ops/s
# Warmup Iteration  28: 2479363.298 ops/s
# Warmup Iteration  29: 2432473.965 ops/s
# Warmup Iteration  30: 2482155.947 ops/s
Iteration   1: 2486809.809 ops/s
Iteration   2: 2473707.251 ops/s
Iteration   3: 2538178.230 ops/s
Iteration   4: 2463501.996 ops/s
Iteration   5: 2551773.417 ops/s
Iteration   6: 2501650.120 ops/s
Iteration   7: 2507806.323 ops/s
Iteration   8: 2502030.014 ops/s
Iteration   9: 2451812.613 ops/s
Iteration  10: 2494941.192 ops/s
Iteration  11: 2544927.574 ops/s
Iteration  12: 2489147.699 ops/s
Iteration  13: 2476287.658 ops/s
Iteration  14: 2441504.256 ops/s
Iteration  15: 2457269.376 ops/s
Iteration  16: 2524785.028 ops/s
Iteration  17: 2544839.665 ops/s
Iteration  18: 2544607.108 ops/s
Iteration  19: 2550353.346 ops/s
Iteration  20: 2545589.859 ops/s
Iteration  21: 2518289.781 ops/s
Iteration  22: 2548567.175 ops/s
Iteration  23: 2545760.861 ops/s
Iteration  24: 2549145.448 ops/s
Iteration  25: 2546817.085 ops/s
Iteration  26: 2551156.231 ops/s
Iteration  27: 2489608.457 ops/s
Iteration  28: 2498173.732 ops/s
Iteration  29: 2526647.935 ops/s
Iteration  30: 2550409.953 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_chunk":
  2513869.973 ±(99.9%) 23385.057 ops/s [Average]
  (min, avg, max) = (2441504.256, 2513869.973, 2551773.417), stdev = 35001.655
  CI (99.9%): [2490484.916, 2537255.030] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_chunk  thrpt   30  2513869.973 ± 23385.057  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_chunk_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_chunk_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10115066.620 ops/s
# Warmup Iteration   2: 16340246.900 ops/s
# Warmup Iteration   3: 18968326.861 ops/s
# Warmup Iteration   4: 18943889.943 ops/s
# Warmup Iteration   5: 18530787.478 ops/s
# Warmup Iteration   6: 18608121.319 ops/s
# Warmup Iteration   7: 18932585.967 ops/s
# Warmup Iteration   8: 18681363.641 ops/s
# Warmup Iteration   9: 18442716.888 ops/s
# Warmup Iteration  10: 17697914.616 ops/s
# Warmup Iteration  11: 17791686.040 ops/s
# Warmup Iteration  12: 17784882.094 ops/s
# Warmup Iteration  13: 17348393.938 ops/s
# Warmup Iteration  14: 17783650.515 ops/s
# Warmup Iteration  15: 18010591.109 ops/s
# Warmup Iteration  16: 17586105.554 ops/s
# Warmup Iteration  17: 18647021.694 ops/s
# Warmup Iteration  18: 18577586.783 ops/s
# Warmup Iteration  19: 18232549.817 ops/s
# Warmup Iteration  20: 17533319.987 ops/s
# Warmup Iteration  21: 17704472.696 ops/s
# Warmup Iteration  22: 17565669.756 ops/s
# Warmup Iteration  23: 18642915.922 ops/s
# Warmup Iteration  24: 18610400.754 ops/s
# Warmup Iteration  25: 16761681.831 ops/s
# Warmup Iteration  26: 17590545.481 ops/s
# Warmup Iteration  27: 18159456.136 ops/s
# Warmup Iteration  28: 18607052.285 ops/s
# Warmup Iteration  29: 18235318.056 ops/s
# Warmup Iteration  30: 18328769.756 ops/s
Iteration   1: 17480458.876 ops/s
Iteration   2: 17688813.799 ops/s
Iteration   3: 18098204.019 ops/s
Iteration   4: 17766117.716 ops/s
Iteration   5: 17785448.351 ops/s
Iteration   6: 17477590.896 ops/s
Iteration   7: 17677220.422 ops/s
Iteration   8: 17865006.743 ops/s
Iteration   9: 18153990.841 ops/s
Iteration  10: 17835226.295 ops/s
Iteration  11: 17306923.576 ops/s
Iteration  12: 18004176.385 ops/s
Iteration  13: 18200965.780 ops/s
Iteration  14: 18569782.984 ops/s
Iteration  15: 15929657.788 ops/s
Iteration  16: 18438445.843 ops/s
Iteration  17: 17869145.584 ops/s
Iteration  18: 18559788.175 ops/s
Iteration  19: 18159241.278 ops/s
Iteration  20: 18473919.075 ops/s
Iteration  21: 17592124.575 ops/s
Iteration  22: 18046181.839 ops/s
Iteration  23: 18626308.396 ops/s
Iteration  24: 18016449.314 ops/s
Iteration  25: 17608563.798 ops/s
Iteration  26: 17701760.404 ops/s
Iteration  27: 17935552.789 ops/s
Iteration  28: 17880710.920 ops/s
Iteration  29: 17710395.758 ops/s
Iteration  30: 17561139.787 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_chunk_empty":
  17867310.400 ±(99.9%) 337439.364 ops/s [Average]
  (min, avg, max) = (15929657.788, 17867310.400, 18626308.396), stdev = 505063.393
  CI (99.9%): [17529871.036, 18204749.765] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_chunk_empty  thrpt   30  17867310.400 ± 337439.364  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1232293.308 ops/s
# Warmup Iteration   2: 2344952.646 ops/s
# Warmup Iteration   3: 2634702.418 ops/s
# Warmup Iteration   4: 2591599.468 ops/s
# Warmup Iteration   5: 2184993.378 ops/s
# Warmup Iteration   6: 2614346.873 ops/s
# Warmup Iteration   7: 2639552.660 ops/s
# Warmup Iteration   8: 2696656.129 ops/s
# Warmup Iteration   9: 2702077.481 ops/s
# Warmup Iteration  10: 2701546.145 ops/s
# Warmup Iteration  11: 2697826.233 ops/s
# Warmup Iteration  12: 2699822.283 ops/s
# Warmup Iteration  13: 2694999.010 ops/s
# Warmup Iteration  14: 2691835.083 ops/s
# Warmup Iteration  15: 2608471.941 ops/s
# Warmup Iteration  16: 2536250.742 ops/s
# Warmup Iteration  17: 2579605.239 ops/s
# Warmup Iteration  18: 2540767.005 ops/s
# Warmup Iteration  19: 2602631.233 ops/s
# Warmup Iteration  20: 2659289.013 ops/s
# Warmup Iteration  21: 2549896.500 ops/s
# Warmup Iteration  22: 2565617.124 ops/s
# Warmup Iteration  23: 2529810.422 ops/s
# Warmup Iteration  24: 2600090.422 ops/s
# Warmup Iteration  25: 2501196.508 ops/s
# Warmup Iteration  26: 2510526.920 ops/s
# Warmup Iteration  27: 2572108.547 ops/s
# Warmup Iteration  28: 2491517.251 ops/s
# Warmup Iteration  29: 2543183.031 ops/s
# Warmup Iteration  30: 2539886.226 ops/s
Iteration   1: 2553776.891 ops/s
Iteration   2: 2576894.532 ops/s
Iteration   3: 2537312.425 ops/s
Iteration   4: 2579907.058 ops/s
Iteration   5: 2592098.610 ops/s
Iteration   6: 2544203.532 ops/s
Iteration   7: 2535273.898 ops/s
Iteration   8: 2499493.281 ops/s
Iteration   9: 2556218.880 ops/s
Iteration  10: 2558902.863 ops/s
Iteration  11: 2514928.737 ops/s
Iteration  12: 2628248.042 ops/s
Iteration  13: 2519601.902 ops/s
Iteration  14: 2510821.682 ops/s
Iteration  15: 2550298.565 ops/s
Iteration  16: 2532771.862 ops/s
Iteration  17: 2567022.342 ops/s
Iteration  18: 2498581.596 ops/s
Iteration  19: 2533669.966 ops/s
Iteration  20: 2550142.900 ops/s
Iteration  21: 2479865.777 ops/s
Iteration  22: 2530793.598 ops/s
Iteration  23: 2546964.538 ops/s
Iteration  24: 2585864.614 ops/s
Iteration  25: 2484509.675 ops/s
Iteration  26: 2594088.236 ops/s
Iteration  27: 2469840.668 ops/s
Iteration  28: 2515072.517 ops/s
Iteration  29: 2541388.700 ops/s
Iteration  30: 2519676.592 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_chunk_large_size":
  2540274.483 ±(99.9%) 24315.249 ops/s [Average]
  (min, avg, max) = (2469840.668, 2540274.483, 2628248.042), stdev = 36393.923
  CI (99.9%): [2515959.233, 2564589.732] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_chunk_large_size  thrpt   30  2540274.483 ± 24315.249  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_chunk_single$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_chunk_single

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2338645.240 ops/s
# Warmup Iteration   2: 6154280.803 ops/s
# Warmup Iteration   3: 5098353.799 ops/s
# Warmup Iteration   4: 6174206.838 ops/s
# Warmup Iteration   5: 6027086.586 ops/s
# Warmup Iteration   6: 6050782.957 ops/s
# Warmup Iteration   7: 6064104.532 ops/s
# Warmup Iteration   8: 6171816.230 ops/s
# Warmup Iteration   9: 6139558.212 ops/s
# Warmup Iteration  10: 6366877.283 ops/s
# Warmup Iteration  11: 6055901.170 ops/s
# Warmup Iteration  12: 6056082.107 ops/s
# Warmup Iteration  13: 5992160.194 ops/s
# Warmup Iteration  14: 6181961.885 ops/s
# Warmup Iteration  15: 6172933.375 ops/s
# Warmup Iteration  16: 6454399.045 ops/s
# Warmup Iteration  17: 6155075.316 ops/s
# Warmup Iteration  18: 6032337.829 ops/s
# Warmup Iteration  19: 6015311.994 ops/s
# Warmup Iteration  20: 6020099.558 ops/s
# Warmup Iteration  21: 6290857.068 ops/s
# Warmup Iteration  22: 6510058.819 ops/s
# Warmup Iteration  23: 6510020.897 ops/s
# Warmup Iteration  24: 6497021.317 ops/s
# Warmup Iteration  25: 6509911.655 ops/s
# Warmup Iteration  26: 6497161.698 ops/s
# Warmup Iteration  27: 6501154.866 ops/s
# Warmup Iteration  28: 6510467.165 ops/s
# Warmup Iteration  29: 6176797.348 ops/s
# Warmup Iteration  30: 6013913.043 ops/s
Iteration   1: 5966840.955 ops/s
Iteration   2: 5940833.840 ops/s
Iteration   3: 6246747.117 ops/s
Iteration   4: 6021786.500 ops/s
Iteration   5: 6004742.530 ops/s
Iteration   6: 5968695.487 ops/s
Iteration   7: 6032582.982 ops/s
Iteration   8: 6358895.525 ops/s
Iteration   9: 6217707.834 ops/s
Iteration  10: 6134848.731 ops/s
Iteration  11: 6249303.733 ops/s
Iteration  12: 6197059.221 ops/s
Iteration  13: 6276113.415 ops/s
Iteration  14: 6084960.116 ops/s
Iteration  15: 6060052.039 ops/s
Iteration  16: 6109094.369 ops/s
Iteration  17: 6501749.874 ops/s
Iteration  18: 6388168.468 ops/s
Iteration  19: 6286649.616 ops/s
Iteration  20: 6096833.004 ops/s
Iteration  21: 6099974.976 ops/s
Iteration  22: 6096919.614 ops/s
Iteration  23: 6289946.395 ops/s
Iteration  24: 6182960.671 ops/s
Iteration  25: 6163970.017 ops/s
Iteration  26: 6269990.459 ops/s
Iteration  27: 6194828.942 ops/s
Iteration  28: 6170329.523 ops/s
Iteration  29: 6303678.273 ops/s
Iteration  30: 6287939.283 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_chunk_single":
  6173473.450 ±(99.9%) 90521.319 ops/s [Average]
  (min, avg, max) = (5940833.840, 6173473.450, 6501749.874), stdev = 135488.060
  CI (99.9%): [6082952.131, 6263994.770] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_chunk_single  thrpt   30  6173473.450 ± 90521.319  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 563813.192 ops/s
# Warmup Iteration   2: 570627.168 ops/s
# Warmup Iteration   3: 744121.789 ops/s
# Warmup Iteration   4: 739570.185 ops/s
# Warmup Iteration   5: 744987.243 ops/s
# Warmup Iteration   6: 750266.505 ops/s
# Warmup Iteration   7: 753132.601 ops/s
# Warmup Iteration   8: 767860.004 ops/s
# Warmup Iteration   9: 777347.899 ops/s
# Warmup Iteration  10: 767828.149 ops/s
# Warmup Iteration  11: 738322.486 ops/s
# Warmup Iteration  12: 675913.206 ops/s
# Warmup Iteration  13: 752434.113 ops/s
# Warmup Iteration  14: 761445.108 ops/s
# Warmup Iteration  15: 785825.013 ops/s
# Warmup Iteration  16: 752188.315 ops/s
# Warmup Iteration  17: 791080.132 ops/s
# Warmup Iteration  18: 805487.635 ops/s
# Warmup Iteration  19: 796426.757 ops/s
# Warmup Iteration  20: 811088.123 ops/s
# Warmup Iteration  21: 815624.609 ops/s
# Warmup Iteration  22: 832005.142 ops/s
# Warmup Iteration  23: 820614.577 ops/s
# Warmup Iteration  24: 827498.085 ops/s
# Warmup Iteration  25: 798258.876 ops/s
# Warmup Iteration  26: 784695.314 ops/s
# Warmup Iteration  27: 797200.494 ops/s
# Warmup Iteration  28: 807025.406 ops/s
# Warmup Iteration  29: 800609.439 ops/s
# Warmup Iteration  30: 818436.441 ops/s
Iteration   1: 814461.152 ops/s
Iteration   2: 792197.425 ops/s
Iteration   3: 853185.857 ops/s
Iteration   4: 853548.425 ops/s
Iteration   5: 804866.619 ops/s
Iteration   6: 813786.613 ops/s
Iteration   7: 804193.087 ops/s
Iteration   8: 850162.015 ops/s
Iteration   9: 794441.412 ops/s
Iteration  10: 792220.455 ops/s
Iteration  11: 836955.876 ops/s
Iteration  12: 854503.788 ops/s
Iteration  13: 855369.380 ops/s
Iteration  14: 854417.136 ops/s
Iteration  15: 857804.959 ops/s
Iteration  16: 854985.030 ops/s
Iteration  17: 856837.174 ops/s
Iteration  18: 857264.987 ops/s
Iteration  19: 856100.404 ops/s
Iteration  20: 851258.013 ops/s
Iteration  21: 853705.600 ops/s
Iteration  22: 853185.031 ops/s
Iteration  23: 853110.919 ops/s
Iteration  24: 853635.782 ops/s
Iteration  25: 855270.072 ops/s
Iteration  26: 818163.999 ops/s
Iteration  27: 855614.887 ops/s
Iteration  28: 852693.607 ops/s
Iteration  29: 786054.062 ops/s
Iteration  30: 794642.751 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_chunk_zero_throws":
  836154.550 ±(99.9%) 17320.884 ops/s [Average]
  (min, avg, max) = (786054.062, 836154.550, 857804.959), stdev = 25925.086
  CI (99.9%): [818833.666, 853475.435] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  836154.550 ± 17320.884  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3596796.471 ops/s
# Warmup Iteration   2: 7868649.446 ops/s
# Warmup Iteration   3: 6587650.985 ops/s
# Warmup Iteration   4: 7861459.535 ops/s
# Warmup Iteration   5: 7884041.984 ops/s
# Warmup Iteration   6: 8037977.489 ops/s
# Warmup Iteration   7: 7913356.024 ops/s
# Warmup Iteration   8: 8019247.263 ops/s
# Warmup Iteration   9: 8102631.680 ops/s
# Warmup Iteration  10: 7983763.390 ops/s
# Warmup Iteration  11: 7860784.617 ops/s
# Warmup Iteration  12: 8005859.551 ops/s
# Warmup Iteration  13: 7819707.241 ops/s
# Warmup Iteration  14: 7743681.990 ops/s
# Warmup Iteration  15: 7905567.508 ops/s
# Warmup Iteration  16: 7920231.067 ops/s
# Warmup Iteration  17: 7823831.826 ops/s
# Warmup Iteration  18: 7906255.208 ops/s
# Warmup Iteration  19: 7899265.359 ops/s
# Warmup Iteration  20: 8198320.924 ops/s
# Warmup Iteration  21: 7859168.110 ops/s
# Warmup Iteration  22: 8343199.409 ops/s
# Warmup Iteration  23: 8202141.822 ops/s
# Warmup Iteration  24: 7869258.634 ops/s
# Warmup Iteration  25: 7983357.537 ops/s
# Warmup Iteration  26: 7847593.016 ops/s
# Warmup Iteration  27: 7882518.706 ops/s
# Warmup Iteration  28: 8152979.266 ops/s
# Warmup Iteration  29: 8134122.986 ops/s
# Warmup Iteration  30: 7947021.079 ops/s
Iteration   1: 8143773.827 ops/s
Iteration   2: 7850397.746 ops/s
Iteration   3: 8197440.351 ops/s
Iteration   4: 8497364.932 ops/s
Iteration   5: 8200612.282 ops/s
Iteration   6: 7909695.534 ops/s
Iteration   7: 7846717.807 ops/s
Iteration   8: 7989389.059 ops/s
Iteration   9: 8068636.979 ops/s
Iteration  10: 7976871.781 ops/s
Iteration  11: 8018418.510 ops/s
Iteration  12: 7955002.610 ops/s
Iteration  13: 8130372.175 ops/s
Iteration  14: 7856177.201 ops/s
Iteration  15: 7858434.853 ops/s
Iteration  16: 7996160.549 ops/s
Iteration  17: 8014278.073 ops/s
Iteration  18: 8143487.692 ops/s
Iteration  19: 8034388.795 ops/s
Iteration  20: 7893722.886 ops/s
Iteration  21: 8026838.829 ops/s
Iteration  22: 7834061.172 ops/s
Iteration  23: 8505272.944 ops/s
Iteration  24: 8513896.480 ops/s
Iteration  25: 8482400.791 ops/s
Iteration  26: 8108477.148 ops/s
Iteration  27: 7893978.383 ops/s
Iteration  28: 7860798.146 ops/s
Iteration  29: 7991711.514 ops/s
Iteration  30: 8456745.965 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_clear":
  8075184.167 ±(99.9%) 144783.876 ops/s [Average]
  (min, avg, max) = (7834061.172, 8075184.167, 8513896.480), stdev = 216705.706
  CI (99.9%): [7930400.291, 8219968.043] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_clear  thrpt   30  8075184.167 ± 144783.876  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 556775.228 ops/s
# Warmup Iteration   2: 1284248.170 ops/s
# Warmup Iteration   3: 1326987.971 ops/s
# Warmup Iteration   4: 1095253.862 ops/s
# Warmup Iteration   5: 1377589.995 ops/s
# Warmup Iteration   6: 1387182.487 ops/s
# Warmup Iteration   7: 1385397.917 ops/s
# Warmup Iteration   8: 1385063.463 ops/s
# Warmup Iteration   9: 1381587.181 ops/s
# Warmup Iteration  10: 1383134.840 ops/s
# Warmup Iteration  11: 1382718.167 ops/s
# Warmup Iteration  12: 1339100.172 ops/s
# Warmup Iteration  13: 1343989.892 ops/s
# Warmup Iteration  14: 1318319.092 ops/s
# Warmup Iteration  15: 1308926.785 ops/s
# Warmup Iteration  16: 1316332.231 ops/s
# Warmup Iteration  17: 1324900.360 ops/s
# Warmup Iteration  18: 1309775.822 ops/s
# Warmup Iteration  19: 1320074.780 ops/s
# Warmup Iteration  20: 1293832.110 ops/s
# Warmup Iteration  21: 1305135.635 ops/s
# Warmup Iteration  22: 1296243.310 ops/s
# Warmup Iteration  23: 1264691.925 ops/s
# Warmup Iteration  24: 1287499.581 ops/s
# Warmup Iteration  25: 1293242.194 ops/s
# Warmup Iteration  26: 1269560.788 ops/s
# Warmup Iteration  27: 1283815.091 ops/s
# Warmup Iteration  28: 1281398.260 ops/s
# Warmup Iteration  29: 1288640.290 ops/s
# Warmup Iteration  30: 1279033.101 ops/s
Iteration   1: 1262906.554 ops/s
Iteration   2: 1301398.466 ops/s
Iteration   3: 1382031.939 ops/s
Iteration   4: 1300003.512 ops/s
Iteration   5: 1268835.685 ops/s
Iteration   6: 1279860.206 ops/s
Iteration   7: 1283405.378 ops/s
Iteration   8: 1284686.317 ops/s
Iteration   9: 1272476.099 ops/s
Iteration  10: 1247061.584 ops/s
Iteration  11: 1278616.976 ops/s
Iteration  12: 1266744.812 ops/s
Iteration  13: 1311668.658 ops/s
Iteration  14: 1329904.157 ops/s
Iteration  15: 1325284.707 ops/s
Iteration  16: 1289023.047 ops/s
Iteration  17: 1291925.845 ops/s
Iteration  18: 1285746.813 ops/s
Iteration  19: 1304489.123 ops/s
Iteration  20: 1301075.939 ops/s
Iteration  21: 1257187.285 ops/s
Iteration  22: 1275922.279 ops/s
Iteration  23: 1279690.423 ops/s
Iteration  24: 1277416.964 ops/s
Iteration  25: 1278498.165 ops/s
Iteration  26: 1302653.071 ops/s
Iteration  27: 1308725.434 ops/s
Iteration  28: 1288332.854 ops/s
Iteration  29: 1306257.971 ops/s
Iteration  30: 1361862.072 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collect":
  1293456.411 ±(99.9%) 19137.947 ops/s [Average]
  (min, avg, max) = (1247061.584, 1293456.411, 1382031.939), stdev = 28644.781
  CI (99.9%): [1274318.464, 1312594.359] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collect  thrpt   30  1293456.411 ± 19137.947  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5002688.447 ops/s
# Warmup Iteration   2: 9814274.129 ops/s
# Warmup Iteration   3: 8192083.520 ops/s
# Warmup Iteration   4: 9666781.703 ops/s
# Warmup Iteration   5: 9760885.326 ops/s
# Warmup Iteration   6: 9759282.333 ops/s
# Warmup Iteration   7: 9656642.154 ops/s
# Warmup Iteration   8: 9796440.760 ops/s
# Warmup Iteration   9: 9948676.555 ops/s
# Warmup Iteration  10: 9855549.063 ops/s
# Warmup Iteration  11: 10445578.251 ops/s
# Warmup Iteration  12: 9685442.085 ops/s
# Warmup Iteration  13: 9812226.874 ops/s
# Warmup Iteration  14: 9742289.479 ops/s
# Warmup Iteration  15: 10485125.274 ops/s
# Warmup Iteration  16: 10246079.757 ops/s
# Warmup Iteration  17: 10056732.201 ops/s
# Warmup Iteration  18: 9798997.409 ops/s
# Warmup Iteration  19: 10383311.050 ops/s
# Warmup Iteration  20: 10532368.302 ops/s
# Warmup Iteration  21: 10524107.792 ops/s
# Warmup Iteration  22: 10524272.162 ops/s
# Warmup Iteration  23: 10504654.509 ops/s
# Warmup Iteration  24: 10507492.246 ops/s
# Warmup Iteration  25: 10517787.846 ops/s
# Warmup Iteration  26: 10516540.875 ops/s
# Warmup Iteration  27: 9930545.642 ops/s
# Warmup Iteration  28: 9673454.063 ops/s
# Warmup Iteration  29: 9917275.473 ops/s
# Warmup Iteration  30: 9867259.637 ops/s
Iteration   1: 9777714.546 ops/s
Iteration   2: 10142448.064 ops/s
Iteration   3: 10150436.636 ops/s
Iteration   4: 9983970.302 ops/s
Iteration   5: 10050393.802 ops/s
Iteration   6: 10481782.333 ops/s
Iteration   7: 10358016.074 ops/s
Iteration   8: 10420684.588 ops/s
Iteration   9: 10322292.357 ops/s
Iteration  10: 9965787.909 ops/s
Iteration  11: 9757191.238 ops/s
Iteration  12: 9814959.908 ops/s
Iteration  13: 9937027.391 ops/s
Iteration  14: 9850867.866 ops/s
Iteration  15: 9884716.399 ops/s
Iteration  16: 10275177.977 ops/s
Iteration  17: 10493557.446 ops/s
Iteration  18: 10190521.211 ops/s
Iteration  19: 9699437.673 ops/s
Iteration  20: 10163361.796 ops/s
Iteration  21: 9897576.038 ops/s
Iteration  22: 10056094.476 ops/s
Iteration  23: 10525197.897 ops/s
Iteration  24: 10516532.620 ops/s
Iteration  25: 10516068.599 ops/s
Iteration  26: 10526496.531 ops/s
Iteration  27: 10525559.750 ops/s
Iteration  28: 10509623.007 ops/s
Iteration  29: 10468745.304 ops/s
Iteration  30: 10503998.468 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectBoolean":
  10192207.940 ±(99.9%) 189942.750 ops/s [Average]
  (min, avg, max) = (9699437.673, 10192207.940, 10526496.531), stdev = 284297.388
  CI (99.9%): [10002265.190, 10382150.690] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectBoolean  thrpt   30  10192207.940 ± 189942.750  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectBooleanWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectBooleanWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4356465.121 ops/s
# Warmup Iteration   2: 9419148.835 ops/s
# Warmup Iteration   3: 9038127.586 ops/s
# Warmup Iteration   4: 10758483.068 ops/s
# Warmup Iteration   5: 10760560.154 ops/s
# Warmup Iteration   6: 10503285.219 ops/s
# Warmup Iteration   7: 10662805.863 ops/s
# Warmup Iteration   8: 10643791.098 ops/s
# Warmup Iteration   9: 10674890.493 ops/s
# Warmup Iteration  10: 10610270.864 ops/s
# Warmup Iteration  11: 10638063.641 ops/s
# Warmup Iteration  12: 10636827.416 ops/s
# Warmup Iteration  13: 10592890.868 ops/s
# Warmup Iteration  14: 10666472.520 ops/s
# Warmup Iteration  15: 10535214.422 ops/s
# Warmup Iteration  16: 10530320.844 ops/s
# Warmup Iteration  17: 10580117.034 ops/s
# Warmup Iteration  18: 10707703.935 ops/s
# Warmup Iteration  19: 10624748.983 ops/s
# Warmup Iteration  20: 10599971.568 ops/s
# Warmup Iteration  21: 10506211.345 ops/s
# Warmup Iteration  22: 10532486.332 ops/s
# Warmup Iteration  23: 10586780.025 ops/s
# Warmup Iteration  24: 10550140.103 ops/s
# Warmup Iteration  25: 10676025.556 ops/s
# Warmup Iteration  26: 10573235.552 ops/s
# Warmup Iteration  27: 10544083.794 ops/s
# Warmup Iteration  28: 10603812.037 ops/s
# Warmup Iteration  29: 10497378.231 ops/s
# Warmup Iteration  30: 10517414.146 ops/s
Iteration   1: 10439277.647 ops/s
Iteration   2: 10502610.887 ops/s
Iteration   3: 10584361.819 ops/s
Iteration   4: 10417255.053 ops/s
Iteration   5: 10471500.120 ops/s
Iteration   6: 10436371.297 ops/s
Iteration   7: 10547521.311 ops/s
Iteration   8: 10574410.863 ops/s
Iteration   9: 10529328.020 ops/s
Iteration  10: 10533316.239 ops/s
Iteration  11: 10710103.407 ops/s
Iteration  12: 10761756.994 ops/s
Iteration  13: 10705305.195 ops/s
Iteration  14: 10653358.759 ops/s
Iteration  15: 10758348.692 ops/s
Iteration  16: 10756096.173 ops/s
Iteration  17: 10553986.626 ops/s
Iteration  18: 10574165.262 ops/s
Iteration  19: 10637861.178 ops/s
Iteration  20: 10493140.591 ops/s
Iteration  21: 10698008.981 ops/s
Iteration  22: 10761786.043 ops/s
Iteration  23: 10676616.081 ops/s
Iteration  24: 10612819.461 ops/s
Iteration  25: 10746429.840 ops/s
Iteration  26: 10680425.825 ops/s
Iteration  27: 10506755.458 ops/s
Iteration  28: 10511795.027 ops/s
Iteration  29: 10468980.792 ops/s
Iteration  30: 10587461.064 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectBooleanWithBagTarget":
  10596371.823 ±(99.9%) 72927.156 ops/s [Average]
  (min, avg, max) = (10417255.053, 10596371.823, 10761786.043), stdev = 109153.942
  CI (99.9%): [10523444.668, 10669298.979] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt         Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectBooleanWithBagTarget  thrpt   30  10596371.823 ± 72927.156  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2753063.682 ops/s
# Warmup Iteration   2: 6346067.898 ops/s
# Warmup Iteration   3: 6417582.280 ops/s
# Warmup Iteration   4: 5243527.606 ops/s
# Warmup Iteration   5: 6411667.527 ops/s
# Warmup Iteration   6: 6379818.399 ops/s
# Warmup Iteration   7: 6363624.544 ops/s
# Warmup Iteration   8: 6310066.050 ops/s
# Warmup Iteration   9: 6336467.338 ops/s
# Warmup Iteration  10: 6293683.376 ops/s
# Warmup Iteration  11: 6301334.260 ops/s
# Warmup Iteration  12: 6324829.176 ops/s
# Warmup Iteration  13: 6365832.747 ops/s
# Warmup Iteration  14: 6289868.063 ops/s
# Warmup Iteration  15: 6334713.135 ops/s
# Warmup Iteration  16: 6368485.908 ops/s
# Warmup Iteration  17: 6063101.652 ops/s
# Warmup Iteration  18: 6178967.368 ops/s
# Warmup Iteration  19: 6311642.814 ops/s
# Warmup Iteration  20: 6294619.315 ops/s
# Warmup Iteration  21: 6283324.687 ops/s
# Warmup Iteration  22: 6388877.188 ops/s
# Warmup Iteration  23: 6368550.379 ops/s
# Warmup Iteration  24: 6402189.199 ops/s
# Warmup Iteration  25: 6362232.925 ops/s
# Warmup Iteration  26: 6382114.274 ops/s
# Warmup Iteration  27: 6397214.610 ops/s
# Warmup Iteration  28: 6342125.833 ops/s
# Warmup Iteration  29: 6353144.633 ops/s
# Warmup Iteration  30: 6321236.725 ops/s
Iteration   1: 6286851.252 ops/s
Iteration   2: 6371045.243 ops/s
Iteration   3: 6435558.443 ops/s
Iteration   4: 6484912.107 ops/s
Iteration   5: 6486582.415 ops/s
Iteration   6: 6477531.237 ops/s
Iteration   7: 6470669.947 ops/s
Iteration   8: 6476203.526 ops/s
Iteration   9: 6484612.132 ops/s
Iteration  10: 6474040.880 ops/s
Iteration  11: 6454534.323 ops/s
Iteration  12: 6475990.486 ops/s
Iteration  13: 6485592.265 ops/s
Iteration  14: 6453727.098 ops/s
Iteration  15: 6479570.347 ops/s
Iteration  16: 6466268.503 ops/s
Iteration  17: 6477580.697 ops/s
Iteration  18: 6467621.099 ops/s
Iteration  19: 6456911.306 ops/s
Iteration  20: 6485393.141 ops/s
Iteration  21: 6473850.788 ops/s
Iteration  22: 6489363.643 ops/s
Iteration  23: 6320830.839 ops/s
Iteration  24: 6269706.908 ops/s
Iteration  25: 6107198.242 ops/s
Iteration  26: 6052110.879 ops/s
Iteration  27: 6204860.608 ops/s
Iteration  28: 6459594.059 ops/s
Iteration  29: 6309353.894 ops/s
Iteration  30: 5886059.364 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectBooleanWithTarget":
  6390804.189 ±(99.9%) 101154.143 ops/s [Average]
  (min, avg, max) = (5886059.364, 6390804.189, 6489363.643), stdev = 151402.771
  CI (99.9%): [6289650.046, 6491958.332] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  6390804.189 ± 101154.143  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 669768.125 ops/s
# Warmup Iteration   2: 1526330.393 ops/s
# Warmup Iteration   3: 1694980.505 ops/s
# Warmup Iteration   4: 1410662.718 ops/s
# Warmup Iteration   5: 1696863.962 ops/s
# Warmup Iteration   6: 1695524.138 ops/s
# Warmup Iteration   7: 1691623.804 ops/s
# Warmup Iteration   8: 1692192.931 ops/s
# Warmup Iteration   9: 1695437.771 ops/s
# Warmup Iteration  10: 1693757.859 ops/s
# Warmup Iteration  11: 1692310.622 ops/s
# Warmup Iteration  12: 1692847.251 ops/s
# Warmup Iteration  13: 1642750.924 ops/s
# Warmup Iteration  14: 1563696.569 ops/s
# Warmup Iteration  15: 1590638.357 ops/s
# Warmup Iteration  16: 1581499.486 ops/s
# Warmup Iteration  17: 1586028.315 ops/s
# Warmup Iteration  18: 1577420.518 ops/s
# Warmup Iteration  19: 1607923.607 ops/s
# Warmup Iteration  20: 1666446.714 ops/s
# Warmup Iteration  21: 1594012.130 ops/s
# Warmup Iteration  22: 1693112.243 ops/s
# Warmup Iteration  23: 1668936.023 ops/s
# Warmup Iteration  24: 1571575.377 ops/s
# Warmup Iteration  25: 1621499.718 ops/s
# Warmup Iteration  26: 1598029.608 ops/s
# Warmup Iteration  27: 1575882.715 ops/s
# Warmup Iteration  28: 1625127.653 ops/s
# Warmup Iteration  29: 1590441.409 ops/s
# Warmup Iteration  30: 1602478.018 ops/s
Iteration   1: 1582728.680 ops/s
Iteration   2: 1642626.102 ops/s
Iteration   3: 1598827.147 ops/s
Iteration   4: 1608777.881 ops/s
Iteration   5: 1617955.755 ops/s
Iteration   6: 1579240.027 ops/s
Iteration   7: 1565444.290 ops/s
Iteration   8: 1669654.515 ops/s
Iteration   9: 1694948.343 ops/s
Iteration  10: 1614107.376 ops/s
Iteration  11: 1567024.504 ops/s
Iteration  12: 1621606.369 ops/s
Iteration  13: 1694001.521 ops/s
Iteration  14: 1629397.102 ops/s
Iteration  15: 1561679.349 ops/s
Iteration  16: 1620651.082 ops/s
Iteration  17: 1578104.032 ops/s
Iteration  18: 1560454.603 ops/s
Iteration  19: 1638679.428 ops/s
Iteration  20: 1683040.012 ops/s
Iteration  21: 1640069.175 ops/s
Iteration  22: 1695817.329 ops/s
Iteration  23: 1695091.718 ops/s
Iteration  24: 1605711.294 ops/s
Iteration  25: 1584989.770 ops/s
Iteration  26: 1630044.399 ops/s
Iteration  27: 1623230.641 ops/s
Iteration  28: 1599593.547 ops/s
Iteration  29: 1570233.492 ops/s
Iteration  30: 1579592.887 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectByte":
  1618444.079 ±(99.9%) 28941.607 ops/s [Average]
  (min, avg, max) = (1560454.603, 1618444.079, 1695817.329), stdev = 43318.438
  CI (99.9%): [1589502.472, 1647385.686] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectByte  thrpt   30  1618444.079 ± 28941.607  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectByteWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectByteWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1547966.077 ops/s
# Warmup Iteration   2: 3622908.158 ops/s
# Warmup Iteration   3: 3789897.595 ops/s
# Warmup Iteration   4: 3176712.506 ops/s
# Warmup Iteration   5: 3678429.463 ops/s
# Warmup Iteration   6: 3626204.334 ops/s
# Warmup Iteration   7: 3510887.974 ops/s
# Warmup Iteration   8: 3576535.498 ops/s
# Warmup Iteration   9: 3576643.233 ops/s
# Warmup Iteration  10: 3571151.911 ops/s
# Warmup Iteration  11: 3608183.941 ops/s
# Warmup Iteration  12: 3539432.056 ops/s
# Warmup Iteration  13: 3631105.603 ops/s
# Warmup Iteration  14: 3603838.238 ops/s
# Warmup Iteration  15: 3495019.714 ops/s
# Warmup Iteration  16: 3609601.325 ops/s
# Warmup Iteration  17: 3714101.028 ops/s
# Warmup Iteration  18: 3804078.186 ops/s
# Warmup Iteration  19: 3801392.412 ops/s
# Warmup Iteration  20: 3791984.878 ops/s
# Warmup Iteration  21: 3803428.202 ops/s
# Warmup Iteration  22: 3805482.774 ops/s
# Warmup Iteration  23: 3797334.872 ops/s
# Warmup Iteration  24: 3799639.830 ops/s
# Warmup Iteration  25: 3541702.840 ops/s
# Warmup Iteration  26: 3587663.880 ops/s
# Warmup Iteration  27: 3497744.972 ops/s
# Warmup Iteration  28: 3478167.023 ops/s
# Warmup Iteration  29: 3680390.225 ops/s
# Warmup Iteration  30: 3569613.344 ops/s
Iteration   1: 3492495.111 ops/s
Iteration   2: 3489455.876 ops/s
Iteration   3: 3599186.739 ops/s
Iteration   4: 3496728.654 ops/s
Iteration   5: 3605731.129 ops/s
Iteration   6: 3455648.162 ops/s
Iteration   7: 3580431.916 ops/s
Iteration   8: 3554535.772 ops/s
Iteration   9: 3603849.162 ops/s
Iteration  10: 3548129.442 ops/s
Iteration  11: 3472414.324 ops/s
Iteration  12: 3600758.438 ops/s
Iteration  13: 3598535.310 ops/s
Iteration  14: 3596176.622 ops/s
Iteration  15: 3553496.019 ops/s
Iteration  16: 3470548.873 ops/s
Iteration  17: 3531257.287 ops/s
Iteration  18: 3524852.838 ops/s
Iteration  19: 3585814.655 ops/s
Iteration  20: 3556014.939 ops/s
Iteration  21: 3526094.901 ops/s
Iteration  22: 3550707.617 ops/s
Iteration  23: 3593401.748 ops/s
Iteration  24: 3459836.542 ops/s
Iteration  25: 3479189.654 ops/s
Iteration  26: 3521241.910 ops/s
Iteration  27: 3549206.804 ops/s
Iteration  28: 3456903.288 ops/s
Iteration  29: 3463722.974 ops/s
Iteration  30: 3662782.012 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectByteWithBagTarget":
  3539304.957 ±(99.9%) 37554.087 ops/s [Average]
  (min, avg, max) = (3455648.162, 3539304.957, 3662782.012), stdev = 56209.193
  CI (99.9%): [3501750.871, 3576859.044] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectByteWithBagTarget  thrpt   30  3539304.957 ± 37554.087  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1175276.398 ops/s
# Warmup Iteration   2: 2811980.285 ops/s
# Warmup Iteration   3: 2946208.607 ops/s
# Warmup Iteration   4: 2338829.615 ops/s
# Warmup Iteration   5: 2787212.749 ops/s
# Warmup Iteration   6: 2962022.976 ops/s
# Warmup Iteration   7: 2851129.169 ops/s
# Warmup Iteration   8: 2876526.282 ops/s
# Warmup Iteration   9: 2823165.791 ops/s
# Warmup Iteration  10: 2819478.888 ops/s
# Warmup Iteration  11: 2814509.150 ops/s
# Warmup Iteration  12: 2935818.450 ops/s
# Warmup Iteration  13: 2837119.247 ops/s
# Warmup Iteration  14: 2965420.817 ops/s
# Warmup Iteration  15: 2755532.869 ops/s
# Warmup Iteration  16: 2925702.523 ops/s
# Warmup Iteration  17: 2804708.379 ops/s
# Warmup Iteration  18: 2850082.416 ops/s
# Warmup Iteration  19: 2852504.352 ops/s
# Warmup Iteration  20: 2941846.824 ops/s
# Warmup Iteration  21: 2861059.219 ops/s
# Warmup Iteration  22: 2884089.122 ops/s
# Warmup Iteration  23: 2959858.736 ops/s
# Warmup Iteration  24: 2856231.182 ops/s
# Warmup Iteration  25: 2820086.899 ops/s
# Warmup Iteration  26: 2810154.792 ops/s
# Warmup Iteration  27: 2815508.995 ops/s
# Warmup Iteration  28: 2750293.880 ops/s
# Warmup Iteration  29: 2779662.582 ops/s
# Warmup Iteration  30: 2787484.157 ops/s
Iteration   1: 2743453.678 ops/s
Iteration   2: 2916796.279 ops/s
Iteration   3: 3014597.898 ops/s
Iteration   4: 3012499.371 ops/s
Iteration   5: 3018038.286 ops/s
Iteration   6: 3015721.922 ops/s
Iteration   7: 3011325.909 ops/s
Iteration   8: 3014358.569 ops/s
Iteration   9: 3015169.878 ops/s
Iteration  10: 3008610.071 ops/s
Iteration  11: 3007217.568 ops/s
Iteration  12: 3015376.646 ops/s
Iteration  13: 3010915.474 ops/s
Iteration  14: 3014993.466 ops/s
Iteration  15: 3010092.263 ops/s
Iteration  16: 3012646.126 ops/s
Iteration  17: 3019830.556 ops/s
Iteration  18: 2815540.189 ops/s
Iteration  19: 2783125.912 ops/s
Iteration  20: 2780708.051 ops/s
Iteration  21: 2854731.524 ops/s
Iteration  22: 2771602.188 ops/s
Iteration  23: 2816972.252 ops/s
Iteration  24: 3022356.655 ops/s
Iteration  25: 2965250.488 ops/s
Iteration  26: 2871395.540 ops/s
Iteration  27: 2935799.245 ops/s
Iteration  28: 2870245.553 ops/s
Iteration  29: 2909931.360 ops/s
Iteration  30: 2857226.991 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectByteWithTarget":
  2937217.664 ±(99.9%) 63379.795 ops/s [Average]
  (min, avg, max) = (2743453.678, 2937217.664, 3022356.655), stdev = 94863.901
  CI (99.9%): [2873837.868, 3000597.459] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  2937217.664 ± 63379.795  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 661119.241 ops/s
# Warmup Iteration   2: 1656457.984 ops/s
# Warmup Iteration   3: 1715674.929 ops/s
# Warmup Iteration   4: 1391402.670 ops/s
# Warmup Iteration   5: 1665681.260 ops/s
# Warmup Iteration   6: 1705691.782 ops/s
# Warmup Iteration   7: 1681996.058 ops/s
# Warmup Iteration   8: 1674688.880 ops/s
# Warmup Iteration   9: 1658552.845 ops/s
# Warmup Iteration  10: 1672183.400 ops/s
# Warmup Iteration  11: 1709240.269 ops/s
# Warmup Iteration  12: 1693973.941 ops/s
# Warmup Iteration  13: 1676222.681 ops/s
# Warmup Iteration  14: 1687377.449 ops/s
# Warmup Iteration  15: 1709680.472 ops/s
# Warmup Iteration  16: 1703589.097 ops/s
# Warmup Iteration  17: 1696152.583 ops/s
# Warmup Iteration  18: 1668257.407 ops/s
# Warmup Iteration  19: 1681376.508 ops/s
# Warmup Iteration  20: 1705007.427 ops/s
# Warmup Iteration  21: 1717659.145 ops/s
# Warmup Iteration  22: 1671996.758 ops/s
# Warmup Iteration  23: 1662849.086 ops/s
# Warmup Iteration  24: 1666573.928 ops/s
# Warmup Iteration  25: 1665297.439 ops/s
# Warmup Iteration  26: 1724058.152 ops/s
# Warmup Iteration  27: 1677967.777 ops/s
# Warmup Iteration  28: 1679938.618 ops/s
# Warmup Iteration  29: 1769525.473 ops/s
# Warmup Iteration  30: 1654219.344 ops/s
Iteration   1: 1705233.636 ops/s
Iteration   2: 1692498.450 ops/s
Iteration   3: 1676553.181 ops/s
Iteration   4: 1644128.684 ops/s
Iteration   5: 1647177.879 ops/s
Iteration   6: 1659430.006 ops/s
Iteration   7: 1668098.666 ops/s
Iteration   8: 1654764.284 ops/s
Iteration   9: 1668761.680 ops/s
Iteration  10: 1657471.483 ops/s
Iteration  11: 1685828.293 ops/s
Iteration  12: 1685904.351 ops/s
Iteration  13: 1654015.046 ops/s
Iteration  14: 1709638.922 ops/s
Iteration  15: 1648758.213 ops/s
Iteration  16: 1697982.662 ops/s
Iteration  17: 1686970.761 ops/s
Iteration  18: 1695032.949 ops/s
Iteration  19: 1676559.414 ops/s
Iteration  20: 1672810.314 ops/s
Iteration  21: 1695240.248 ops/s
Iteration  22: 1730453.938 ops/s
Iteration  23: 1695731.745 ops/s
Iteration  24: 1702862.721 ops/s
Iteration  25: 1717248.253 ops/s
Iteration  26: 1674552.263 ops/s
Iteration  27: 1679097.575 ops/s
Iteration  28: 1697028.951 ops/s
Iteration  29: 1706415.446 ops/s
Iteration  30: 1709228.284 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectChar":
  1683182.610 ±(99.9%) 15077.157 ops/s [Average]
  (min, avg, max) = (1644128.684, 1683182.610, 1730453.938), stdev = 22566.780
  CI (99.9%): [1668105.453, 1698259.766] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectChar  thrpt   30  1683182.610 ± 15077.157  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectCharWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectCharWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1664643.117 ops/s
# Warmup Iteration   2: 3865895.502 ops/s
# Warmup Iteration   3: 3636774.817 ops/s
# Warmup Iteration   4: 3496995.097 ops/s
# Warmup Iteration   5: 3882260.704 ops/s
# Warmup Iteration   6: 3878838.403 ops/s
# Warmup Iteration   7: 3886419.791 ops/s
# Warmup Iteration   8: 3803418.595 ops/s
# Warmup Iteration   9: 3628439.746 ops/s
# Warmup Iteration  10: 3731713.204 ops/s
# Warmup Iteration  11: 3641573.286 ops/s
# Warmup Iteration  12: 3575473.158 ops/s
# Warmup Iteration  13: 3638069.188 ops/s
# Warmup Iteration  14: 3609245.047 ops/s
# Warmup Iteration  15: 3686436.903 ops/s
# Warmup Iteration  16: 3629454.471 ops/s
# Warmup Iteration  17: 3765008.794 ops/s
# Warmup Iteration  18: 3634746.315 ops/s
# Warmup Iteration  19: 3641340.324 ops/s
# Warmup Iteration  20: 3603708.299 ops/s
# Warmup Iteration  21: 3692400.081 ops/s
# Warmup Iteration  22: 3697988.435 ops/s
# Warmup Iteration  23: 3692106.131 ops/s
# Warmup Iteration  24: 3660044.886 ops/s
# Warmup Iteration  25: 3662784.629 ops/s
# Warmup Iteration  26: 3640143.847 ops/s
# Warmup Iteration  27: 3634370.333 ops/s
# Warmup Iteration  28: 3693903.715 ops/s
# Warmup Iteration  29: 3607205.081 ops/s
# Warmup Iteration  30: 3741436.924 ops/s
Iteration   1: 3679073.505 ops/s
Iteration   2: 3764334.498 ops/s
Iteration   3: 3885278.379 ops/s
Iteration   4: 3879847.956 ops/s
Iteration   5: 3638936.673 ops/s
Iteration   6: 3704443.555 ops/s
Iteration   7: 3587412.391 ops/s
Iteration   8: 3689653.491 ops/s
Iteration   9: 3629041.682 ops/s
Iteration  10: 3649094.052 ops/s
Iteration  11: 3738484.430 ops/s
Iteration  12: 3703697.290 ops/s
Iteration  13: 3619475.332 ops/s
Iteration  14: 3613283.094 ops/s
Iteration  15: 3623481.258 ops/s
Iteration  16: 3692645.440 ops/s
Iteration  17: 3624874.208 ops/s
Iteration  18: 3643185.637 ops/s
Iteration  19: 3624040.341 ops/s
Iteration  20: 3675874.941 ops/s
Iteration  21: 3653192.153 ops/s
Iteration  22: 3733972.522 ops/s
Iteration  23: 3623930.951 ops/s
Iteration  24: 3625269.047 ops/s
Iteration  25: 3665102.733 ops/s
Iteration  26: 3718396.555 ops/s
Iteration  27: 3571037.582 ops/s
Iteration  28: 3650541.126 ops/s
Iteration  29: 3824130.293 ops/s
Iteration  30: 3728663.591 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectCharWithBagTarget":
  3682013.157 ±(99.9%) 51739.014 ops/s [Average]
  (min, avg, max) = (3571037.582, 3682013.157, 3885278.379), stdev = 77440.526
  CI (99.9%): [3630274.143, 3733752.171] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectCharWithBagTarget  thrpt   30  3682013.157 ± 51739.014  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1150652.595 ops/s
# Warmup Iteration   2: 2835592.674 ops/s
# Warmup Iteration   3: 2895741.456 ops/s
# Warmup Iteration   4: 2392972.169 ops/s
# Warmup Iteration   5: 2901433.971 ops/s
# Warmup Iteration   6: 3059025.506 ops/s
# Warmup Iteration   7: 3013272.969 ops/s
# Warmup Iteration   8: 2906977.567 ops/s
# Warmup Iteration   9: 2936607.130 ops/s
# Warmup Iteration  10: 2928864.528 ops/s
# Warmup Iteration  11: 2925356.247 ops/s
# Warmup Iteration  12: 2924648.141 ops/s
# Warmup Iteration  13: 2894429.835 ops/s
# Warmup Iteration  14: 2903352.080 ops/s
# Warmup Iteration  15: 3016375.348 ops/s
# Warmup Iteration  16: 3072594.589 ops/s
# Warmup Iteration  17: 3070354.476 ops/s
# Warmup Iteration  18: 3070819.463 ops/s
# Warmup Iteration  19: 3072670.275 ops/s
# Warmup Iteration  20: 3064558.267 ops/s
# Warmup Iteration  21: 3077221.913 ops/s
# Warmup Iteration  22: 3073175.815 ops/s
# Warmup Iteration  23: 3035117.256 ops/s
# Warmup Iteration  24: 2990165.375 ops/s
# Warmup Iteration  25: 2928594.474 ops/s
# Warmup Iteration  26: 2883005.879 ops/s
# Warmup Iteration  27: 2912970.504 ops/s
# Warmup Iteration  28: 2944646.453 ops/s
# Warmup Iteration  29: 3029818.012 ops/s
# Warmup Iteration  30: 3039932.063 ops/s
Iteration   1: 2978799.153 ops/s
Iteration   2: 2839834.072 ops/s
Iteration   3: 2936512.638 ops/s
Iteration   4: 2900528.731 ops/s
Iteration   5: 2976799.780 ops/s
Iteration   6: 2911122.894 ops/s
Iteration   7: 2956944.686 ops/s
Iteration   8: 2957166.304 ops/s
Iteration   9: 2842929.343 ops/s
Iteration  10: 2912306.423 ops/s
Iteration  11: 2927927.896 ops/s
Iteration  12: 3062896.698 ops/s
Iteration  13: 2940532.735 ops/s
Iteration  14: 3022482.408 ops/s
Iteration  15: 2935471.664 ops/s
Iteration  16: 2975290.090 ops/s
Iteration  17: 2953197.625 ops/s
Iteration  18: 2946946.955 ops/s
Iteration  19: 2859202.137 ops/s
Iteration  20: 2949911.859 ops/s
Iteration  21: 2902811.868 ops/s
Iteration  22: 2900825.467 ops/s
Iteration  23: 2891309.374 ops/s
Iteration  24: 2889077.428 ops/s
Iteration  25: 2920162.545 ops/s
Iteration  26: 3014271.280 ops/s
Iteration  27: 2943584.061 ops/s
Iteration  28: 2909983.103 ops/s
Iteration  29: 2978466.444 ops/s
Iteration  30: 2955128.377 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectCharWithTarget":
  2936414.135 ±(99.9%) 33351.231 ops/s [Average]
  (min, avg, max) = (2839834.072, 2936414.135, 3062896.698), stdev = 49918.557
  CI (99.9%): [2903062.903, 2969765.366] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  2936414.135 ± 33351.231  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 555675.573 ops/s
# Warmup Iteration   2: 1347089.154 ops/s
# Warmup Iteration   3: 1320987.540 ops/s
# Warmup Iteration   4: 1104624.949 ops/s
# Warmup Iteration   5: 1345662.349 ops/s
# Warmup Iteration   6: 1328275.615 ops/s
# Warmup Iteration   7: 1328038.581 ops/s
# Warmup Iteration   8: 1347995.312 ops/s
# Warmup Iteration   9: 1381833.410 ops/s
# Warmup Iteration  10: 1331157.690 ops/s
# Warmup Iteration  11: 1394445.897 ops/s
# Warmup Iteration  12: 1386703.612 ops/s
# Warmup Iteration  13: 1334193.139 ops/s
# Warmup Iteration  14: 1359677.995 ops/s
# Warmup Iteration  15: 1381886.531 ops/s
# Warmup Iteration  16: 1332498.925 ops/s
# Warmup Iteration  17: 1336116.163 ops/s
# Warmup Iteration  18: 1336554.250 ops/s
# Warmup Iteration  19: 1355287.330 ops/s
# Warmup Iteration  20: 1356424.052 ops/s
# Warmup Iteration  21: 1320073.971 ops/s
# Warmup Iteration  22: 1361133.856 ops/s
# Warmup Iteration  23: 1328894.271 ops/s
# Warmup Iteration  24: 1372509.210 ops/s
# Warmup Iteration  25: 1371092.348 ops/s
# Warmup Iteration  26: 1341464.049 ops/s
# Warmup Iteration  27: 1375566.358 ops/s
# Warmup Iteration  28: 1308310.809 ops/s
# Warmup Iteration  29: 1352888.393 ops/s
# Warmup Iteration  30: 1395765.120 ops/s
Iteration   1: 1395566.534 ops/s
Iteration   2: 1393665.604 ops/s
Iteration   3: 1403434.552 ops/s
Iteration   4: 1399829.821 ops/s
Iteration   5: 1395793.476 ops/s
Iteration   6: 1401547.505 ops/s
Iteration   7: 1402766.851 ops/s
Iteration   8: 1394250.212 ops/s
Iteration   9: 1391110.183 ops/s
Iteration  10: 1396705.068 ops/s
Iteration  11: 1399794.369 ops/s
Iteration  12: 1398059.502 ops/s
Iteration  13: 1375259.178 ops/s
Iteration  14: 1308496.473 ops/s
Iteration  15: 1342813.785 ops/s
Iteration  16: 1344889.830 ops/s
Iteration  17: 1326009.542 ops/s
Iteration  18: 1289671.053 ops/s
Iteration  19: 1348161.229 ops/s
Iteration  20: 1302186.897 ops/s
Iteration  21: 1323335.525 ops/s
Iteration  22: 1370018.278 ops/s
Iteration  23: 1369213.332 ops/s
Iteration  24: 1348897.407 ops/s
Iteration  25: 1322604.872 ops/s
Iteration  26: 1321508.128 ops/s
Iteration  27: 1332939.696 ops/s
Iteration  28: 1321132.075 ops/s
Iteration  29: 1332512.523 ops/s
Iteration  30: 1299625.878 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectDouble":
  1358393.313 ±(99.9%) 25219.217 ops/s [Average]
  (min, avg, max) = (1289671.053, 1358393.313, 1403434.552), stdev = 37746.939
  CI (99.9%): [1333174.096, 1383612.529] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectDouble  thrpt   30  1358393.313 ± 25219.217  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectDoubleWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectDoubleWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1321151.948 ops/s
# Warmup Iteration   2: 3009406.379 ops/s
# Warmup Iteration   3: 2743743.498 ops/s
# Warmup Iteration   4: 2730736.859 ops/s
# Warmup Iteration   5: 2996128.916 ops/s
# Warmup Iteration   6: 2966786.071 ops/s
# Warmup Iteration   7: 2953206.564 ops/s
# Warmup Iteration   8: 2969444.585 ops/s
# Warmup Iteration   9: 2945070.476 ops/s
# Warmup Iteration  10: 2970975.703 ops/s
# Warmup Iteration  11: 2968782.759 ops/s
# Warmup Iteration  12: 2951662.009 ops/s
# Warmup Iteration  13: 3049019.979 ops/s
# Warmup Iteration  14: 2973441.896 ops/s
# Warmup Iteration  15: 2990166.931 ops/s
# Warmup Iteration  16: 2951324.707 ops/s
# Warmup Iteration  17: 2951375.509 ops/s
# Warmup Iteration  18: 2955169.761 ops/s
# Warmup Iteration  19: 2988307.745 ops/s
# Warmup Iteration  20: 3071474.055 ops/s
# Warmup Iteration  21: 2982573.484 ops/s
# Warmup Iteration  22: 2968107.230 ops/s
# Warmup Iteration  23: 3086611.938 ops/s
# Warmup Iteration  24: 3088123.877 ops/s
# Warmup Iteration  25: 3007998.011 ops/s
# Warmup Iteration  26: 3015141.778 ops/s
# Warmup Iteration  27: 2962330.123 ops/s
# Warmup Iteration  28: 3038164.199 ops/s
# Warmup Iteration  29: 2968836.878 ops/s
# Warmup Iteration  30: 2966856.380 ops/s
Iteration   1: 2938170.069 ops/s
Iteration   2: 2964855.043 ops/s
Iteration   3: 3063227.705 ops/s
Iteration   4: 3001081.853 ops/s
Iteration   5: 3021521.801 ops/s
Iteration   6: 2975154.241 ops/s
Iteration   7: 3030211.025 ops/s
Iteration   8: 2960050.959 ops/s
Iteration   9: 3099930.927 ops/s
Iteration  10: 3001358.233 ops/s
Iteration  11: 3047359.490 ops/s
Iteration  12: 2931494.290 ops/s
Iteration  13: 3069797.191 ops/s
Iteration  14: 2933646.765 ops/s
Iteration  15: 2949871.616 ops/s
Iteration  16: 2989845.633 ops/s
Iteration  17: 2958802.632 ops/s
Iteration  18: 3070218.987 ops/s
Iteration  19: 3164400.138 ops/s
Iteration  20: 2996174.486 ops/s
Iteration  21: 2991816.392 ops/s
Iteration  22: 3161343.461 ops/s
Iteration  23: 3050635.951 ops/s
Iteration  24: 2892712.479 ops/s
Iteration  25: 3007760.142 ops/s
Iteration  26: 3026471.216 ops/s
Iteration  27: 3129051.317 ops/s
Iteration  28: 3173524.919 ops/s
Iteration  29: 3161114.891 ops/s
Iteration  30: 3166000.737 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectDoubleWithBagTarget":
  3030920.153 ±(99.9%) 53745.180 ops/s [Average]
  (min, avg, max) = (2892712.479, 3030920.153, 3173524.919), stdev = 80443.262
  CI (99.9%): [2977174.972, 3084665.333] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectDoubleWithBagTarget  thrpt   30  3030920.153 ± 53745.180  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 953448.382 ops/s
# Warmup Iteration   2: 2337395.069 ops/s
# Warmup Iteration   3: 2342966.579 ops/s
# Warmup Iteration   4: 1952169.332 ops/s
# Warmup Iteration   5: 2349274.380 ops/s
# Warmup Iteration   6: 2285713.349 ops/s
# Warmup Iteration   7: 2244079.999 ops/s
# Warmup Iteration   8: 2301401.795 ops/s
# Warmup Iteration   9: 2245731.572 ops/s
# Warmup Iteration  10: 2215375.787 ops/s
# Warmup Iteration  11: 2194150.736 ops/s
# Warmup Iteration  12: 2198905.447 ops/s
# Warmup Iteration  13: 2184313.015 ops/s
# Warmup Iteration  14: 2165775.623 ops/s
# Warmup Iteration  15: 2188249.134 ops/s
# Warmup Iteration  16: 2239801.017 ops/s
# Warmup Iteration  17: 2253734.759 ops/s
# Warmup Iteration  18: 2224534.761 ops/s
# Warmup Iteration  19: 2173272.470 ops/s
# Warmup Iteration  20: 2268157.759 ops/s
# Warmup Iteration  21: 2355054.739 ops/s
# Warmup Iteration  22: 2203235.667 ops/s
# Warmup Iteration  23: 2181943.817 ops/s
# Warmup Iteration  24: 2187615.778 ops/s
# Warmup Iteration  25: 2237066.993 ops/s
# Warmup Iteration  26: 2187892.597 ops/s
# Warmup Iteration  27: 2189562.211 ops/s
# Warmup Iteration  28: 2269906.152 ops/s
# Warmup Iteration  29: 2208495.537 ops/s
# Warmup Iteration  30: 2353665.627 ops/s
Iteration   1: 2216041.396 ops/s
Iteration   2: 2316492.229 ops/s
Iteration   3: 2218124.341 ops/s
Iteration   4: 2289149.040 ops/s
Iteration   5: 2283372.646 ops/s
Iteration   6: 2252245.111 ops/s
Iteration   7: 2329049.258 ops/s
Iteration   8: 2203305.538 ops/s
Iteration   9: 2248937.340 ops/s
Iteration  10: 2277711.900 ops/s
Iteration  11: 2234109.006 ops/s
Iteration  12: 2146725.299 ops/s
Iteration  13: 2259453.207 ops/s
Iteration  14: 2268980.486 ops/s
Iteration  15: 2178968.801 ops/s
Iteration  16: 2182231.600 ops/s
Iteration  17: 2211653.012 ops/s
Iteration  18: 2252308.597 ops/s
Iteration  19: 2223302.404 ops/s
Iteration  20: 2226477.199 ops/s
Iteration  21: 2184474.787 ops/s
Iteration  22: 2258491.031 ops/s
Iteration  23: 2216898.524 ops/s
Iteration  24: 2191836.773 ops/s
Iteration  25: 2308400.312 ops/s
Iteration  26: 2228700.461 ops/s
Iteration  27: 2343029.932 ops/s
Iteration  28: 2358580.690 ops/s
Iteration  29: 2351365.755 ops/s
Iteration  30: 2236307.563 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectDoubleWithTarget":
  2249890.808 ±(99.9%) 36341.412 ops/s [Average]
  (min, avg, max) = (2146725.299, 2249890.808, 2358580.690), stdev = 54394.118
  CI (99.9%): [2213549.396, 2286232.220] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  2249890.808 ± 36341.412  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 628700.158 ops/s
# Warmup Iteration   2: 1445799.176 ops/s
# Warmup Iteration   3: 1470457.002 ops/s
# Warmup Iteration   4: 1222662.687 ops/s
# Warmup Iteration   5: 1514458.249 ops/s
# Warmup Iteration   6: 1468862.030 ops/s
# Warmup Iteration   7: 1530443.068 ops/s
# Warmup Iteration   8: 1449678.388 ops/s
# Warmup Iteration   9: 1413932.613 ops/s
# Warmup Iteration  10: 1435418.802 ops/s
# Warmup Iteration  11: 1447357.517 ops/s
# Warmup Iteration  12: 1466737.391 ops/s
# Warmup Iteration  13: 1519130.837 ops/s
# Warmup Iteration  14: 1530588.645 ops/s
# Warmup Iteration  15: 1532081.535 ops/s
# Warmup Iteration  16: 1530479.770 ops/s
# Warmup Iteration  17: 1525733.900 ops/s
# Warmup Iteration  18: 1531607.304 ops/s
# Warmup Iteration  19: 1530535.163 ops/s
# Warmup Iteration  20: 1510534.542 ops/s
# Warmup Iteration  21: 1450859.274 ops/s
# Warmup Iteration  22: 1465506.727 ops/s
# Warmup Iteration  23: 1448476.757 ops/s
# Warmup Iteration  24: 1445259.156 ops/s
# Warmup Iteration  25: 1453109.417 ops/s
# Warmup Iteration  26: 1436904.790 ops/s
# Warmup Iteration  27: 1433877.912 ops/s
# Warmup Iteration  28: 1459177.846 ops/s
# Warmup Iteration  29: 1476861.229 ops/s
# Warmup Iteration  30: 1440349.791 ops/s
Iteration   1: 1446430.268 ops/s
Iteration   2: 1446252.753 ops/s
Iteration   3: 1429199.371 ops/s
Iteration   4: 1438760.885 ops/s
Iteration   5: 1435201.118 ops/s
Iteration   6: 1445737.158 ops/s
Iteration   7: 1431024.867 ops/s
Iteration   8: 1439620.223 ops/s
Iteration   9: 1445811.158 ops/s
Iteration  10: 1442033.143 ops/s
Iteration  11: 1430623.705 ops/s
Iteration  12: 1450773.225 ops/s
Iteration  13: 1441211.716 ops/s
Iteration  14: 1440524.109 ops/s
Iteration  15: 1435335.968 ops/s
Iteration  16: 1509448.148 ops/s
Iteration  17: 1444238.531 ops/s
Iteration  18: 1439368.007 ops/s
Iteration  19: 1431794.964 ops/s
Iteration  20: 1435738.226 ops/s
Iteration  21: 1424381.622 ops/s
Iteration  22: 1442185.738 ops/s
Iteration  23: 1432150.733 ops/s
Iteration  24: 1439802.763 ops/s
Iteration  25: 1465483.476 ops/s
Iteration  26: 1486987.958 ops/s
Iteration  27: 1486799.319 ops/s
Iteration  28: 1530775.819 ops/s
Iteration  29: 1531444.425 ops/s
Iteration  30: 1502986.495 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectFloat":
  1453404.196 ±(99.9%) 20029.873 ops/s [Average]
  (min, avg, max) = (1424381.622, 1453404.196, 1531444.425), stdev = 29979.773
  CI (99.9%): [1433374.323, 1473434.069] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectFloat  thrpt   30  1453404.196 ± 20029.873  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectFloatWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectFloatWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1330706.351 ops/s
# Warmup Iteration   2: 3318868.072 ops/s
# Warmup Iteration   3: 3458506.959 ops/s
# Warmup Iteration   4: 2978808.692 ops/s
# Warmup Iteration   5: 3358803.719 ops/s
# Warmup Iteration   6: 3452278.066 ops/s
# Warmup Iteration   7: 3373544.404 ops/s
# Warmup Iteration   8: 3390565.963 ops/s
# Warmup Iteration   9: 3333227.269 ops/s
# Warmup Iteration  10: 3396271.552 ops/s
# Warmup Iteration  11: 3282268.696 ops/s
# Warmup Iteration  12: 3348396.157 ops/s
# Warmup Iteration  13: 3392797.014 ops/s
# Warmup Iteration  14: 3423258.785 ops/s
# Warmup Iteration  15: 3369966.091 ops/s
# Warmup Iteration  16: 3331661.635 ops/s
# Warmup Iteration  17: 3369131.612 ops/s
# Warmup Iteration  18: 3336806.173 ops/s
# Warmup Iteration  19: 3391821.496 ops/s
# Warmup Iteration  20: 3339316.688 ops/s
# Warmup Iteration  21: 3384781.822 ops/s
# Warmup Iteration  22: 3332137.128 ops/s
# Warmup Iteration  23: 3362427.874 ops/s
# Warmup Iteration  24: 3340155.045 ops/s
# Warmup Iteration  25: 3364910.488 ops/s
# Warmup Iteration  26: 3425446.983 ops/s
# Warmup Iteration  27: 3483852.342 ops/s
# Warmup Iteration  28: 3555270.695 ops/s
# Warmup Iteration  29: 3549126.174 ops/s
# Warmup Iteration  30: 3552197.093 ops/s
Iteration   1: 3547286.195 ops/s
Iteration   2: 3552715.199 ops/s
Iteration   3: 3552903.173 ops/s
Iteration   4: 3548079.942 ops/s
Iteration   5: 3552297.774 ops/s
Iteration   6: 3542232.064 ops/s
Iteration   7: 3551773.470 ops/s
Iteration   8: 3553151.339 ops/s
Iteration   9: 3506324.010 ops/s
Iteration  10: 3355874.607 ops/s
Iteration  11: 3338959.403 ops/s
Iteration  12: 3358970.432 ops/s
Iteration  13: 3343961.246 ops/s
Iteration  14: 3429494.621 ops/s
Iteration  15: 3404409.859 ops/s
Iteration  16: 3360611.164 ops/s
Iteration  17: 3395432.595 ops/s
Iteration  18: 3541150.386 ops/s
Iteration  19: 3320064.984 ops/s
Iteration  20: 3523027.129 ops/s
Iteration  21: 3517280.925 ops/s
Iteration  22: 3536478.437 ops/s
Iteration  23: 3553543.397 ops/s
Iteration  24: 3315347.046 ops/s
Iteration  25: 3360255.824 ops/s
Iteration  26: 3355886.966 ops/s
Iteration  27: 3337574.862 ops/s
Iteration  28: 3383642.413 ops/s
Iteration  29: 3311156.074 ops/s
Iteration  30: 3438437.725 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectFloatWithBagTarget":
  3446277.442 ±(99.9%) 63490.105 ops/s [Average]
  (min, avg, max) = (3311156.074, 3446277.442, 3553543.397), stdev = 95029.007
  CI (99.9%): [3382787.337, 3509767.547] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectFloatWithBagTarget  thrpt   30  3446277.442 ± 63490.105  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1007064.687 ops/s
# Warmup Iteration   2: 2391025.870 ops/s
# Warmup Iteration   3: 2496169.627 ops/s
# Warmup Iteration   4: 2053356.882 ops/s
# Warmup Iteration   5: 2553926.839 ops/s
# Warmup Iteration   6: 2493299.666 ops/s
# Warmup Iteration   7: 2432679.128 ops/s
# Warmup Iteration   8: 2445266.461 ops/s
# Warmup Iteration   9: 2460893.058 ops/s
# Warmup Iteration  10: 2474633.600 ops/s
# Warmup Iteration  11: 2561858.694 ops/s
# Warmup Iteration  12: 2549982.038 ops/s
# Warmup Iteration  13: 2548791.048 ops/s
# Warmup Iteration  14: 2502685.270 ops/s
# Warmup Iteration  15: 2462734.821 ops/s
# Warmup Iteration  16: 2475253.192 ops/s
# Warmup Iteration  17: 2441397.569 ops/s
# Warmup Iteration  18: 2513045.423 ops/s
# Warmup Iteration  19: 2556855.081 ops/s
# Warmup Iteration  20: 2484760.620 ops/s
# Warmup Iteration  21: 2509398.791 ops/s
# Warmup Iteration  22: 2471876.684 ops/s
# Warmup Iteration  23: 2436621.063 ops/s
# Warmup Iteration  24: 2458141.760 ops/s
# Warmup Iteration  25: 2480795.262 ops/s
# Warmup Iteration  26: 2440410.988 ops/s
# Warmup Iteration  27: 2540782.850 ops/s
# Warmup Iteration  28: 2502097.534 ops/s
# Warmup Iteration  29: 2480293.565 ops/s
# Warmup Iteration  30: 2454546.270 ops/s
Iteration   1: 2455195.455 ops/s
Iteration   2: 2415955.251 ops/s
Iteration   3: 2437606.246 ops/s
Iteration   4: 2452979.753 ops/s
Iteration   5: 2472233.428 ops/s
Iteration   6: 2464695.818 ops/s
Iteration   7: 2503835.170 ops/s
Iteration   8: 2466777.984 ops/s
Iteration   9: 2464425.826 ops/s
Iteration  10: 2497692.228 ops/s
Iteration  11: 2495578.628 ops/s
Iteration  12: 2492064.359 ops/s
Iteration  13: 2479931.151 ops/s
Iteration  14: 2498568.712 ops/s
Iteration  15: 2455772.382 ops/s
Iteration  16: 2460657.099 ops/s
Iteration  17: 2482683.176 ops/s
Iteration  18: 2580180.926 ops/s
Iteration  19: 2528330.572 ops/s
Iteration  20: 2606669.332 ops/s
Iteration  21: 2454544.455 ops/s
Iteration  22: 2458774.556 ops/s
Iteration  23: 2630859.648 ops/s
Iteration  24: 2630504.366 ops/s
Iteration  25: 2633882.612 ops/s
Iteration  26: 2631649.111 ops/s
Iteration  27: 2633345.155 ops/s
Iteration  28: 2628751.679 ops/s
Iteration  29: 2636706.710 ops/s
Iteration  30: 2639352.840 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectFloatWithTarget":
  2523006.821 ±(99.9%) 51490.367 ops/s [Average]
  (min, avg, max) = (2415955.251, 2523006.821, 2639352.840), stdev = 77068.364
  CI (99.9%): [2471516.453, 2574497.188] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  2523006.821 ± 51490.367  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 591306.666 ops/s
# Warmup Iteration   2: 1403938.447 ops/s
# Warmup Iteration   3: 1406670.064 ops/s
# Warmup Iteration   4: 1167940.693 ops/s
# Warmup Iteration   5: 1333999.274 ops/s
# Warmup Iteration   6: 1328409.997 ops/s
# Warmup Iteration   7: 1392186.687 ops/s
# Warmup Iteration   8: 1359648.952 ops/s
# Warmup Iteration   9: 1305875.724 ops/s
# Warmup Iteration  10: 1322884.734 ops/s
# Warmup Iteration  11: 1350007.117 ops/s
# Warmup Iteration  12: 1342150.584 ops/s
# Warmup Iteration  13: 1318993.621 ops/s
# Warmup Iteration  14: 1359930.119 ops/s
# Warmup Iteration  15: 1308218.327 ops/s
# Warmup Iteration  16: 1305597.948 ops/s
# Warmup Iteration  17: 1333529.184 ops/s
# Warmup Iteration  18: 1323275.430 ops/s
# Warmup Iteration  19: 1323254.322 ops/s
# Warmup Iteration  20: 1318086.359 ops/s
# Warmup Iteration  21: 1340571.348 ops/s
# Warmup Iteration  22: 1341620.210 ops/s
# Warmup Iteration  23: 1368905.153 ops/s
# Warmup Iteration  24: 1355463.557 ops/s
# Warmup Iteration  25: 1344246.629 ops/s
# Warmup Iteration  26: 1339458.583 ops/s
# Warmup Iteration  27: 1393332.901 ops/s
# Warmup Iteration  28: 1379167.743 ops/s
# Warmup Iteration  29: 1356214.148 ops/s
# Warmup Iteration  30: 1379612.313 ops/s
Iteration   1: 1317846.523 ops/s
Iteration   2: 1292174.694 ops/s
Iteration   3: 1307470.929 ops/s
Iteration   4: 1339680.706 ops/s
Iteration   5: 1325054.660 ops/s
Iteration   6: 1349953.757 ops/s
Iteration   7: 1341335.438 ops/s
Iteration   8: 1346311.797 ops/s
Iteration   9: 1316576.312 ops/s
Iteration  10: 1309812.979 ops/s
Iteration  11: 1352789.443 ops/s
Iteration  12: 1397160.318 ops/s
Iteration  13: 1299856.559 ops/s
Iteration  14: 1328252.838 ops/s
Iteration  15: 1401006.104 ops/s
Iteration  16: 1349864.945 ops/s
Iteration  17: 1313005.450 ops/s
Iteration  18: 1340451.265 ops/s
Iteration  19: 1409154.847 ops/s
Iteration  20: 1414287.073 ops/s
Iteration  21: 1385453.732 ops/s
Iteration  22: 1376735.468 ops/s
Iteration  23: 1350353.144 ops/s
Iteration  24: 1347787.248 ops/s
Iteration  25: 1320692.364 ops/s
Iteration  26: 1293794.116 ops/s
Iteration  27: 1306930.616 ops/s
Iteration  28: 1336352.695 ops/s
Iteration  29: 1364828.419 ops/s
Iteration  30: 1330120.216 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectIf":
  1342169.822 ±(99.9%) 22694.281 ops/s [Average]
  (min, avg, max) = (1292174.694, 1342169.822, 1414287.073), stdev = 33967.734
  CI (99.9%): [1319475.541, 1364864.103] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectIf  thrpt   30  1342169.822 ± 22694.281  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 688265.103 ops/s
# Warmup Iteration   2: 1625095.471 ops/s
# Warmup Iteration   3: 1674877.525 ops/s
# Warmup Iteration   4: 1350192.864 ops/s
# Warmup Iteration   5: 1677855.528 ops/s
# Warmup Iteration   6: 1667040.585 ops/s
# Warmup Iteration   7: 1652574.094 ops/s
# Warmup Iteration   8: 1654402.844 ops/s
# Warmup Iteration   9: 1678329.351 ops/s
# Warmup Iteration  10: 1715544.344 ops/s
# Warmup Iteration  11: 1771069.639 ops/s
# Warmup Iteration  12: 1771316.770 ops/s
# Warmup Iteration  13: 1769172.749 ops/s
# Warmup Iteration  14: 1766485.193 ops/s
# Warmup Iteration  15: 1770611.928 ops/s
# Warmup Iteration  16: 1768962.149 ops/s
# Warmup Iteration  17: 1767941.454 ops/s
# Warmup Iteration  18: 1712958.872 ops/s
# Warmup Iteration  19: 1677233.182 ops/s
# Warmup Iteration  20: 1667274.167 ops/s
# Warmup Iteration  21: 1705999.122 ops/s
# Warmup Iteration  22: 1643713.964 ops/s
# Warmup Iteration  23: 1730142.090 ops/s
# Warmup Iteration  24: 1670457.453 ops/s
# Warmup Iteration  25: 1683564.038 ops/s
# Warmup Iteration  26: 1736600.003 ops/s
# Warmup Iteration  27: 1698475.403 ops/s
# Warmup Iteration  28: 1694278.182 ops/s
# Warmup Iteration  29: 1726047.277 ops/s
# Warmup Iteration  30: 1643270.413 ops/s
Iteration   1: 1616791.800 ops/s
Iteration   2: 1635358.089 ops/s
Iteration   3: 1708803.942 ops/s
Iteration   4: 1689359.044 ops/s
Iteration   5: 1682024.520 ops/s
Iteration   6: 1640383.769 ops/s
Iteration   7: 1652069.322 ops/s
Iteration   8: 1713242.275 ops/s
Iteration   9: 1732315.397 ops/s
Iteration  10: 1626478.575 ops/s
Iteration  11: 1645397.653 ops/s
Iteration  12: 1637246.547 ops/s
Iteration  13: 1675334.207 ops/s
Iteration  14: 1710539.836 ops/s
Iteration  15: 1767334.011 ops/s
Iteration  16: 1709663.158 ops/s
Iteration  17: 1627302.514 ops/s
Iteration  18: 1658157.437 ops/s
Iteration  19: 1657718.558 ops/s
Iteration  20: 1690449.867 ops/s
Iteration  21: 1665648.159 ops/s
Iteration  22: 1767375.460 ops/s
Iteration  23: 1651368.286 ops/s
Iteration  24: 1657101.600 ops/s
Iteration  25: 1672631.893 ops/s
Iteration  26: 1670769.502 ops/s
Iteration  27: 1685040.691 ops/s
Iteration  28: 1672157.350 ops/s
Iteration  29: 1676373.377 ops/s
Iteration  30: 1734627.376 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectInt":
  1677635.474 ±(99.9%) 26187.122 ops/s [Average]
  (min, avg, max) = (1616791.800, 1677635.474, 1767375.460), stdev = 39195.655
  CI (99.9%): [1651448.351, 1703822.596] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectInt  thrpt   30  1677635.474 ± 26187.122  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectIntWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectIntWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1497659.874 ops/s
# Warmup Iteration   2: 3437840.457 ops/s
# Warmup Iteration   3: 3410612.174 ops/s
# Warmup Iteration   4: 3027538.568 ops/s
# Warmup Iteration   5: 3407832.508 ops/s
# Warmup Iteration   6: 3460431.997 ops/s
# Warmup Iteration   7: 3465931.307 ops/s
# Warmup Iteration   8: 3424420.447 ops/s
# Warmup Iteration   9: 3479543.882 ops/s
# Warmup Iteration  10: 3493903.259 ops/s
# Warmup Iteration  11: 3438701.507 ops/s
# Warmup Iteration  12: 3383717.420 ops/s
# Warmup Iteration  13: 3500222.279 ops/s
# Warmup Iteration  14: 3443435.858 ops/s
# Warmup Iteration  15: 3461554.945 ops/s
# Warmup Iteration  16: 3442129.343 ops/s
# Warmup Iteration  17: 3550488.284 ops/s
# Warmup Iteration  18: 3467665.929 ops/s
# Warmup Iteration  19: 3470638.511 ops/s
# Warmup Iteration  20: 3490515.668 ops/s
# Warmup Iteration  21: 3417769.863 ops/s
# Warmup Iteration  22: 3425616.657 ops/s
# Warmup Iteration  23: 3425486.956 ops/s
# Warmup Iteration  24: 3444928.695 ops/s
# Warmup Iteration  25: 3644206.510 ops/s
# Warmup Iteration  26: 3657794.105 ops/s
# Warmup Iteration  27: 3661065.849 ops/s
# Warmup Iteration  28: 3657022.398 ops/s
# Warmup Iteration  29: 3674158.694 ops/s
# Warmup Iteration  30: 3645151.801 ops/s
Iteration   1: 3632956.927 ops/s
Iteration   2: 3671817.154 ops/s
Iteration   3: 3650629.563 ops/s
Iteration   4: 3670805.379 ops/s
Iteration   5: 3476358.338 ops/s
Iteration   6: 3490907.735 ops/s
Iteration   7: 3511738.616 ops/s
Iteration   8: 3429532.103 ops/s
Iteration   9: 3426546.337 ops/s
Iteration  10: 3398308.451 ops/s
Iteration  11: 3335928.845 ops/s
Iteration  12: 3388859.403 ops/s
Iteration  13: 3344199.923 ops/s
Iteration  14: 3398357.042 ops/s
Iteration  15: 3405356.614 ops/s
Iteration  16: 3516179.221 ops/s
Iteration  17: 3476968.580 ops/s
Iteration  18: 3408167.708 ops/s
Iteration  19: 3431462.304 ops/s
Iteration  20: 3374387.932 ops/s
Iteration  21: 3269333.592 ops/s
Iteration  22: 3378538.550 ops/s
Iteration  23: 3447813.754 ops/s
Iteration  24: 3377961.271 ops/s
Iteration  25: 3377364.969 ops/s
Iteration  26: 3339266.492 ops/s
Iteration  27: 3370045.325 ops/s
Iteration  28: 3401998.713 ops/s
Iteration  29: 3640402.185 ops/s
Iteration  30: 3656891.941 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectIntWithBagTarget":
  3456636.166 ±(99.9%) 75866.631 ops/s [Average]
  (min, avg, max) = (3269333.592, 3456636.166, 3671817.154), stdev = 113553.610
  CI (99.9%): [3380769.535, 3532502.796] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectIntWithBagTarget  thrpt   30  3456636.166 ± 75866.631  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1108861.689 ops/s
# Warmup Iteration   2: 2738196.540 ops/s
# Warmup Iteration   3: 2723564.630 ops/s
# Warmup Iteration   4: 2216955.227 ops/s
# Warmup Iteration   5: 2748225.000 ops/s
# Warmup Iteration   6: 2733524.145 ops/s
# Warmup Iteration   7: 2868437.639 ops/s
# Warmup Iteration   8: 2839444.203 ops/s
# Warmup Iteration   9: 2880836.399 ops/s
# Warmup Iteration  10: 2708984.072 ops/s
# Warmup Iteration  11: 2718341.638 ops/s
# Warmup Iteration  12: 2722534.907 ops/s
# Warmup Iteration  13: 2734127.401 ops/s
# Warmup Iteration  14: 2759680.704 ops/s
# Warmup Iteration  15: 2742966.235 ops/s
# Warmup Iteration  16: 2740557.581 ops/s
# Warmup Iteration  17: 2771992.455 ops/s
# Warmup Iteration  18: 2721914.518 ops/s
# Warmup Iteration  19: 2774924.462 ops/s
# Warmup Iteration  20: 2759443.544 ops/s
# Warmup Iteration  21: 2926313.256 ops/s
# Warmup Iteration  22: 2744193.165 ops/s
# Warmup Iteration  23: 2763465.580 ops/s
# Warmup Iteration  24: 2780296.121 ops/s
# Warmup Iteration  25: 2830535.173 ops/s
# Warmup Iteration  26: 2767060.201 ops/s
# Warmup Iteration  27: 2810048.981 ops/s
# Warmup Iteration  28: 2705572.976 ops/s
# Warmup Iteration  29: 2715977.592 ops/s
# Warmup Iteration  30: 2924293.513 ops/s
Iteration   1: 2849015.549 ops/s
Iteration   2: 2700595.119 ops/s
Iteration   3: 2710630.843 ops/s
Iteration   4: 2750264.221 ops/s
Iteration   5: 2794147.000 ops/s
Iteration   6: 2692056.094 ops/s
Iteration   7: 2704449.113 ops/s
Iteration   8: 2728004.458 ops/s
Iteration   9: 2767788.190 ops/s
Iteration  10: 2697880.192 ops/s
Iteration  11: 2728999.431 ops/s
Iteration  12: 2655119.468 ops/s
Iteration  13: 2730039.262 ops/s
Iteration  14: 2720802.477 ops/s
Iteration  15: 2679183.235 ops/s
Iteration  16: 2704980.050 ops/s
Iteration  17: 2780726.299 ops/s
Iteration  18: 2886119.048 ops/s
Iteration  19: 2930619.168 ops/s
Iteration  20: 2923876.011 ops/s
Iteration  21: 2932695.376 ops/s
Iteration  22: 2924733.686 ops/s
Iteration  23: 2932802.488 ops/s
Iteration  24: 2932540.370 ops/s
Iteration  25: 2930400.848 ops/s
Iteration  26: 2929392.544 ops/s
Iteration  27: 2931105.621 ops/s
Iteration  28: 2928667.523 ops/s
Iteration  29: 2930222.808 ops/s
Iteration  30: 2933286.521 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectIntWithTarget":
  2814704.767 ±(99.9%) 70763.583 ops/s [Average]
  (min, avg, max) = (2655119.468, 2814704.767, 2933286.521), stdev = 105915.608
  CI (99.9%): [2743941.184, 2885468.350] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  2814704.767 ± 70763.583  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 645713.003 ops/s
# Warmup Iteration   2: 1444203.719 ops/s
# Warmup Iteration   3: 1449103.038 ops/s
# Warmup Iteration   4: 1188295.040 ops/s
# Warmup Iteration   5: 1422698.345 ops/s
# Warmup Iteration   6: 1484835.634 ops/s
# Warmup Iteration   7: 1458049.851 ops/s
# Warmup Iteration   8: 1513059.018 ops/s
# Warmup Iteration   9: 1475104.424 ops/s
# Warmup Iteration  10: 1498313.583 ops/s
# Warmup Iteration  11: 1442003.712 ops/s
# Warmup Iteration  12: 1435006.845 ops/s
# Warmup Iteration  13: 1435418.689 ops/s
# Warmup Iteration  14: 1467937.534 ops/s
# Warmup Iteration  15: 1439104.746 ops/s
# Warmup Iteration  16: 1440691.266 ops/s
# Warmup Iteration  17: 1541772.999 ops/s
# Warmup Iteration  18: 1556693.349 ops/s
# Warmup Iteration  19: 1462106.762 ops/s
# Warmup Iteration  20: 1462456.569 ops/s
# Warmup Iteration  21: 1418220.127 ops/s
# Warmup Iteration  22: 1446111.683 ops/s
# Warmup Iteration  23: 1436277.798 ops/s
# Warmup Iteration  24: 1435562.671 ops/s
# Warmup Iteration  25: 1438434.420 ops/s
# Warmup Iteration  26: 1457687.866 ops/s
# Warmup Iteration  27: 1443655.923 ops/s
# Warmup Iteration  28: 1448023.125 ops/s
# Warmup Iteration  29: 1435047.131 ops/s
# Warmup Iteration  30: 1554823.626 ops/s
Iteration   1: 1462762.118 ops/s
Iteration   2: 1445158.605 ops/s
Iteration   3: 1468398.632 ops/s
Iteration   4: 1454572.945 ops/s
Iteration   5: 1519914.480 ops/s
Iteration   6: 1510873.618 ops/s
Iteration   7: 1529147.015 ops/s
Iteration   8: 1558179.569 ops/s
Iteration   9: 1502985.563 ops/s
Iteration  10: 1466475.703 ops/s
Iteration  11: 1425213.663 ops/s
Iteration  12: 1500841.455 ops/s
Iteration  13: 1549855.622 ops/s
Iteration  14: 1515981.454 ops/s
Iteration  15: 1457512.763 ops/s
Iteration  16: 1445221.950 ops/s
Iteration  17: 1463703.349 ops/s
Iteration  18: 1446336.603 ops/s
Iteration  19: 1535167.726 ops/s
Iteration  20: 1558341.452 ops/s
Iteration  21: 1556158.718 ops/s
Iteration  22: 1465133.035 ops/s
Iteration  23: 1477062.820 ops/s
Iteration  24: 1473482.939 ops/s
Iteration  25: 1433176.418 ops/s
Iteration  26: 1477551.697 ops/s
Iteration  27: 1472406.942 ops/s
Iteration  28: 1461824.460 ops/s
Iteration  29: 1453185.686 ops/s
Iteration  30: 1446923.365 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectLong":
  1484451.679 ±(99.9%) 26568.483 ops/s [Average]
  (min, avg, max) = (1425213.663, 1484451.679, 1558341.452), stdev = 39766.458
  CI (99.9%): [1457883.195, 1511020.162] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectLong  thrpt   30  1484451.679 ± 26568.483  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectLongWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectLongWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1321890.899 ops/s
# Warmup Iteration   2: 3254548.342 ops/s
# Warmup Iteration   3: 2925168.387 ops/s
# Warmup Iteration   4: 3313745.566 ops/s
# Warmup Iteration   5: 3304400.650 ops/s
# Warmup Iteration   6: 3455057.433 ops/s
# Warmup Iteration   7: 3326700.709 ops/s
# Warmup Iteration   8: 3316261.791 ops/s
# Warmup Iteration   9: 3536525.791 ops/s
# Warmup Iteration  10: 3530827.294 ops/s
# Warmup Iteration  11: 3527531.543 ops/s
# Warmup Iteration  12: 3535438.088 ops/s
# Warmup Iteration  13: 3531553.541 ops/s
# Warmup Iteration  14: 3529681.373 ops/s
# Warmup Iteration  15: 3525537.118 ops/s
# Warmup Iteration  16: 3431432.770 ops/s
# Warmup Iteration  17: 3299842.364 ops/s
# Warmup Iteration  18: 3321937.447 ops/s
# Warmup Iteration  19: 3339772.231 ops/s
# Warmup Iteration  20: 3227944.916 ops/s
# Warmup Iteration  21: 3324259.052 ops/s
# Warmup Iteration  22: 3262900.317 ops/s
# Warmup Iteration  23: 3325305.069 ops/s
# Warmup Iteration  24: 3372048.392 ops/s
# Warmup Iteration  25: 3309994.802 ops/s
# Warmup Iteration  26: 3337834.721 ops/s
# Warmup Iteration  27: 3319474.849 ops/s
# Warmup Iteration  28: 3226808.082 ops/s
# Warmup Iteration  29: 3453349.350 ops/s
# Warmup Iteration  30: 3521969.325 ops/s
Iteration   1: 3528358.915 ops/s
Iteration   2: 3526793.286 ops/s
Iteration   3: 3524314.283 ops/s
Iteration   4: 3528942.777 ops/s
Iteration   5: 3528866.642 ops/s
Iteration   6: 3527168.018 ops/s
Iteration   7: 3524535.218 ops/s
Iteration   8: 3522522.073 ops/s
Iteration   9: 3529141.691 ops/s
Iteration  10: 3522694.583 ops/s
Iteration  11: 3532464.025 ops/s
Iteration  12: 3531712.698 ops/s
Iteration  13: 3520749.862 ops/s
Iteration  14: 3524951.620 ops/s
Iteration  15: 3530751.693 ops/s
Iteration  16: 3530714.854 ops/s
Iteration  17: 3458205.077 ops/s
Iteration  18: 3485602.171 ops/s
Iteration  19: 3453454.251 ops/s
Iteration  20: 3486794.469 ops/s
Iteration  21: 3412082.961 ops/s
Iteration  22: 3484095.650 ops/s
Iteration  23: 3457957.269 ops/s
Iteration  24: 3445791.417 ops/s
Iteration  25: 3438586.359 ops/s
Iteration  26: 3457540.852 ops/s
Iteration  27: 3447196.787 ops/s
Iteration  28: 3463379.488 ops/s
Iteration  29: 3425805.519 ops/s
Iteration  30: 3445208.738 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectLongWithBagTarget":
  3493212.775 ±(99.9%) 26553.997 ops/s [Average]
  (min, avg, max) = (3412082.961, 3493212.775, 3532464.025), stdev = 39744.776
  CI (99.9%): [3466658.778, 3519766.772] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectLongWithBagTarget  thrpt   30  3493212.775 ± 26553.997  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1043156.767 ops/s
# Warmup Iteration   2: 2613894.871 ops/s
# Warmup Iteration   3: 2594814.251 ops/s
# Warmup Iteration   4: 2214816.429 ops/s
# Warmup Iteration   5: 2652877.962 ops/s
# Warmup Iteration   6: 2598096.371 ops/s
# Warmup Iteration   7: 2614394.541 ops/s
# Warmup Iteration   8: 2614426.299 ops/s
# Warmup Iteration   9: 2639171.083 ops/s
# Warmup Iteration  10: 2627381.503 ops/s
# Warmup Iteration  11: 2599580.648 ops/s
# Warmup Iteration  12: 2630902.446 ops/s
# Warmup Iteration  13: 2650440.600 ops/s
# Warmup Iteration  14: 2599605.604 ops/s
# Warmup Iteration  15: 2589632.855 ops/s
# Warmup Iteration  16: 2627336.714 ops/s
# Warmup Iteration  17: 2587680.836 ops/s
# Warmup Iteration  18: 2582414.728 ops/s
# Warmup Iteration  19: 2611870.048 ops/s
# Warmup Iteration  20: 2585734.816 ops/s
# Warmup Iteration  21: 2566548.947 ops/s
# Warmup Iteration  22: 2586490.169 ops/s
# Warmup Iteration  23: 2601445.982 ops/s
# Warmup Iteration  24: 2611932.760 ops/s
# Warmup Iteration  25: 2618625.916 ops/s
# Warmup Iteration  26: 2577633.357 ops/s
# Warmup Iteration  27: 2598101.428 ops/s
# Warmup Iteration  28: 2605771.417 ops/s
# Warmup Iteration  29: 2589107.386 ops/s
# Warmup Iteration  30: 2594595.706 ops/s
Iteration   1: 2614146.068 ops/s
Iteration   2: 2606695.840 ops/s
Iteration   3: 2560218.573 ops/s
Iteration   4: 2576420.135 ops/s
Iteration   5: 2583097.425 ops/s
Iteration   6: 2625334.512 ops/s
Iteration   7: 2598679.505 ops/s
Iteration   8: 2597790.368 ops/s
Iteration   9: 2542641.400 ops/s
Iteration  10: 2610881.297 ops/s
Iteration  11: 2578665.346 ops/s
Iteration  12: 2607157.171 ops/s
Iteration  13: 2579115.616 ops/s
Iteration  14: 2606815.383 ops/s
Iteration  15: 2583519.762 ops/s
Iteration  16: 2614725.762 ops/s
Iteration  17: 2591860.211 ops/s
Iteration  18: 2566160.661 ops/s
Iteration  19: 2551559.513 ops/s
Iteration  20: 2590436.518 ops/s
Iteration  21: 2568943.013 ops/s
Iteration  22: 2597759.551 ops/s
Iteration  23: 2567988.250 ops/s
Iteration  24: 2548078.494 ops/s
Iteration  25: 2541234.899 ops/s
Iteration  26: 2566576.617 ops/s
Iteration  27: 2597407.521 ops/s
Iteration  28: 2567851.412 ops/s
Iteration  29: 2572588.622 ops/s
Iteration  30: 2577090.182 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectLongWithTarget":
  2583047.988 ±(99.9%) 15097.709 ops/s [Average]
  (min, avg, max) = (2541234.899, 2583047.988, 2625334.512), stdev = 22597.542
  CI (99.9%): [2567950.278, 2598145.697] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  2583047.988 ± 15097.709  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 679578.395 ops/s
# Warmup Iteration   2: 1684312.193 ops/s
# Warmup Iteration   3: 1704402.051 ops/s
# Warmup Iteration   4: 1401188.250 ops/s
# Warmup Iteration   5: 1707820.902 ops/s
# Warmup Iteration   6: 1715577.521 ops/s
# Warmup Iteration   7: 1724929.670 ops/s
# Warmup Iteration   8: 1710660.769 ops/s
# Warmup Iteration   9: 1719996.590 ops/s
# Warmup Iteration  10: 1722992.201 ops/s
# Warmup Iteration  11: 1719716.198 ops/s
# Warmup Iteration  12: 1705527.013 ops/s
# Warmup Iteration  13: 1701760.371 ops/s
# Warmup Iteration  14: 1715430.711 ops/s
# Warmup Iteration  15: 1720772.627 ops/s
# Warmup Iteration  16: 1723290.955 ops/s
# Warmup Iteration  17: 1714975.237 ops/s
# Warmup Iteration  18: 1727437.190 ops/s
# Warmup Iteration  19: 1705614.741 ops/s
# Warmup Iteration  20: 1705846.337 ops/s
# Warmup Iteration  21: 1723491.237 ops/s
# Warmup Iteration  22: 1721700.458 ops/s
# Warmup Iteration  23: 1699878.909 ops/s
# Warmup Iteration  24: 1715367.669 ops/s
# Warmup Iteration  25: 1718969.492 ops/s
# Warmup Iteration  26: 1727652.390 ops/s
# Warmup Iteration  27: 1716089.055 ops/s
# Warmup Iteration  28: 1712441.789 ops/s
# Warmup Iteration  29: 1738485.886 ops/s
# Warmup Iteration  30: 1735310.169 ops/s
Iteration   1: 1748684.158 ops/s
Iteration   2: 1746569.616 ops/s
Iteration   3: 1746397.317 ops/s
Iteration   4: 1746440.703 ops/s
Iteration   5: 1744316.517 ops/s
Iteration   6: 1745208.702 ops/s
Iteration   7: 1745428.885 ops/s
Iteration   8: 1743819.764 ops/s
Iteration   9: 1735863.292 ops/s
Iteration  10: 1743787.181 ops/s
Iteration  11: 1745445.486 ops/s
Iteration  12: 1740208.942 ops/s
Iteration  13: 1739747.784 ops/s
Iteration  14: 1740561.258 ops/s
Iteration  15: 1746011.285 ops/s
Iteration  16: 1746963.508 ops/s
Iteration  17: 1748007.439 ops/s
Iteration  18: 1746064.467 ops/s
Iteration  19: 1745045.400 ops/s
Iteration  20: 1748854.455 ops/s
Iteration  21: 1745626.601 ops/s
Iteration  22: 1745756.726 ops/s
Iteration  23: 1747726.029 ops/s
Iteration  24: 1748040.114 ops/s
Iteration  25: 1741653.336 ops/s
Iteration  26: 1743018.277 ops/s
Iteration  27: 1746592.959 ops/s
Iteration  28: 1746511.267 ops/s
Iteration  29: 1741335.143 ops/s
Iteration  30: 1746177.570 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectShort":
  1744862.139 ±(99.9%) 1997.776 ops/s [Average]
  (min, avg, max) = (1735863.292, 1744862.139, 1748854.455), stdev = 2990.178
  CI (99.9%): [1742864.363, 1746859.916] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectShort  thrpt   30  1744862.139 ± 1997.776  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectShortWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectShortWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1725653.577 ops/s
# Warmup Iteration   2: 4021964.758 ops/s
# Warmup Iteration   3: 3497186.155 ops/s
# Warmup Iteration   4: 3537298.285 ops/s
# Warmup Iteration   5: 3813306.578 ops/s
# Warmup Iteration   6: 3854137.940 ops/s
# Warmup Iteration   7: 3821692.278 ops/s
# Warmup Iteration   8: 3798907.637 ops/s
# Warmup Iteration   9: 3894085.930 ops/s
# Warmup Iteration  10: 3826423.122 ops/s
# Warmup Iteration  11: 3825511.713 ops/s
# Warmup Iteration  12: 3773994.683 ops/s
# Warmup Iteration  13: 3766917.861 ops/s
# Warmup Iteration  14: 3823666.134 ops/s
# Warmup Iteration  15: 3818134.070 ops/s
# Warmup Iteration  16: 3795833.843 ops/s
# Warmup Iteration  17: 3811567.892 ops/s
# Warmup Iteration  18: 3847465.805 ops/s
# Warmup Iteration  19: 3811320.587 ops/s
# Warmup Iteration  20: 3896717.844 ops/s
# Warmup Iteration  21: 3925343.933 ops/s
# Warmup Iteration  22: 3817237.194 ops/s
# Warmup Iteration  23: 3824718.506 ops/s
# Warmup Iteration  24: 3881742.063 ops/s
# Warmup Iteration  25: 3912063.197 ops/s
# Warmup Iteration  26: 4012501.359 ops/s
# Warmup Iteration  27: 3865763.082 ops/s
# Warmup Iteration  28: 3801844.713 ops/s
# Warmup Iteration  29: 3916182.272 ops/s
# Warmup Iteration  30: 3990954.989 ops/s
Iteration   1: 3984693.590 ops/s
Iteration   2: 3816784.768 ops/s
Iteration   3: 3814054.922 ops/s
Iteration   4: 3804242.416 ops/s
Iteration   5: 3879525.327 ops/s
Iteration   6: 3726388.952 ops/s
Iteration   7: 3749210.714 ops/s
Iteration   8: 3833340.862 ops/s
Iteration   9: 3722809.656 ops/s
Iteration  10: 3761887.563 ops/s
Iteration  11: 3807389.410 ops/s
Iteration  12: 3764135.325 ops/s
Iteration  13: 3786496.272 ops/s
Iteration  14: 3890342.863 ops/s
Iteration  15: 3811215.947 ops/s
Iteration  16: 3798365.754 ops/s
Iteration  17: 3787230.526 ops/s
Iteration  18: 3795490.202 ops/s
Iteration  19: 3710311.219 ops/s
Iteration  20: 3741626.131 ops/s
Iteration  21: 3789143.944 ops/s
Iteration  22: 3819160.674 ops/s
Iteration  23: 3812912.792 ops/s
Iteration  24: 3736670.894 ops/s
Iteration  25: 3741864.123 ops/s
Iteration  26: 3772587.253 ops/s
Iteration  27: 3800588.266 ops/s
Iteration  28: 3715668.625 ops/s
Iteration  29: 3762231.169 ops/s
Iteration  30: 3726568.563 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectShortWithBagTarget":
  3788764.624 ±(99.9%) 38806.863 ops/s [Average]
  (min, avg, max) = (3710311.219, 3788764.624, 3984693.590), stdev = 58084.290
  CI (99.9%): [3749957.761, 3827571.487] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectShortWithBagTarget  thrpt   30  3788764.624 ± 38806.863  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1114941.704 ops/s
# Warmup Iteration   2: 2702240.036 ops/s
# Warmup Iteration   3: 2759632.492 ops/s
# Warmup Iteration   4: 2257027.272 ops/s
# Warmup Iteration   5: 2768184.404 ops/s
# Warmup Iteration   6: 2932004.669 ops/s
# Warmup Iteration   7: 2968311.778 ops/s
# Warmup Iteration   8: 2968895.584 ops/s
# Warmup Iteration   9: 2968604.114 ops/s
# Warmup Iteration  10: 2965412.409 ops/s
# Warmup Iteration  11: 2971148.943 ops/s
# Warmup Iteration  12: 2962513.959 ops/s
# Warmup Iteration  13: 2968057.480 ops/s
# Warmup Iteration  14: 2839601.890 ops/s
# Warmup Iteration  15: 2788608.798 ops/s
# Warmup Iteration  16: 2833654.191 ops/s
# Warmup Iteration  17: 2818514.731 ops/s
# Warmup Iteration  18: 2749650.515 ops/s
# Warmup Iteration  19: 2807150.397 ops/s
# Warmup Iteration  20: 2731335.698 ops/s
# Warmup Iteration  21: 2847983.707 ops/s
# Warmup Iteration  22: 2895070.368 ops/s
# Warmup Iteration  23: 2970152.294 ops/s
# Warmup Iteration  24: 2960930.998 ops/s
# Warmup Iteration  25: 2961010.072 ops/s
# Warmup Iteration  26: 2945670.263 ops/s
# Warmup Iteration  27: 2947916.675 ops/s
# Warmup Iteration  28: 2949359.333 ops/s
# Warmup Iteration  29: 2945902.930 ops/s
# Warmup Iteration  30: 2971789.763 ops/s
Iteration   1: 2971713.093 ops/s
Iteration   2: 2962277.211 ops/s
Iteration   3: 2967866.628 ops/s
Iteration   4: 2961805.277 ops/s
Iteration   5: 2932623.016 ops/s
Iteration   6: 2975775.458 ops/s
Iteration   7: 2949447.527 ops/s
Iteration   8: 2965618.673 ops/s
Iteration   9: 2957574.336 ops/s
Iteration  10: 2942222.012 ops/s
Iteration  11: 2970780.238 ops/s
Iteration  12: 2972831.807 ops/s
Iteration  13: 2969056.399 ops/s
Iteration  14: 2954435.302 ops/s
Iteration  15: 2963731.273 ops/s
Iteration  16: 2800956.143 ops/s
Iteration  17: 2737233.463 ops/s
Iteration  18: 2797027.201 ops/s
Iteration  19: 2727097.042 ops/s
Iteration  20: 2730825.884 ops/s
Iteration  21: 2811134.756 ops/s
Iteration  22: 2758466.914 ops/s
Iteration  23: 2744250.931 ops/s
Iteration  24: 2721602.542 ops/s
Iteration  25: 2766660.600 ops/s
Iteration  26: 2736143.179 ops/s
Iteration  27: 2833632.860 ops/s
Iteration  28: 2733603.827 ops/s
Iteration  29: 2790632.520 ops/s
Iteration  30: 2847624.265 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectShortWithTarget":
  2865155.012 ±(99.9%) 68252.117 ops/s [Average]
  (min, avg, max) = (2721602.542, 2865155.012, 2975775.458), stdev = 102156.563
  CI (99.9%): [2796902.895, 2933407.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  2865155.012 ± 68252.117  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 119629.071 ops/s
# Warmup Iteration   2: 209842.820 ops/s
# Warmup Iteration   3: 265347.879 ops/s
# Warmup Iteration   4: 269621.117 ops/s
# Warmup Iteration   5: 265781.403 ops/s
# Warmup Iteration   6: 218857.698 ops/s
# Warmup Iteration   7: 241353.587 ops/s
# Warmup Iteration   8: 259540.658 ops/s
# Warmup Iteration   9: 258453.125 ops/s
# Warmup Iteration  10: 261783.399 ops/s
# Warmup Iteration  11: 252968.207 ops/s
# Warmup Iteration  12: 249376.241 ops/s
# Warmup Iteration  13: 251475.893 ops/s
# Warmup Iteration  14: 251698.519 ops/s
# Warmup Iteration  15: 267285.194 ops/s
# Warmup Iteration  16: 272782.292 ops/s
# Warmup Iteration  17: 271712.282 ops/s
# Warmup Iteration  18: 252071.544 ops/s
# Warmup Iteration  19: 262570.870 ops/s
# Warmup Iteration  20: 254753.845 ops/s
# Warmup Iteration  21: 271938.796 ops/s
# Warmup Iteration  22: 273909.550 ops/s
# Warmup Iteration  23: 274157.083 ops/s
# Warmup Iteration  24: 273887.029 ops/s
# Warmup Iteration  25: 273890.738 ops/s
# Warmup Iteration  26: 273690.089 ops/s
# Warmup Iteration  27: 273253.423 ops/s
# Warmup Iteration  28: 273554.469 ops/s
# Warmup Iteration  29: 251923.765 ops/s
# Warmup Iteration  30: 255460.449 ops/s
Iteration   1: 256582.084 ops/s
Iteration   2: 258312.059 ops/s
Iteration   3: 249904.082 ops/s
Iteration   4: 260999.171 ops/s
Iteration   5: 256014.064 ops/s
Iteration   6: 250308.894 ops/s
Iteration   7: 253868.442 ops/s
Iteration   8: 249903.642 ops/s
Iteration   9: 252681.253 ops/s
Iteration  10: 249441.930 ops/s
Iteration  11: 254767.445 ops/s
Iteration  12: 249995.403 ops/s
Iteration  13: 255120.536 ops/s
Iteration  14: 255654.740 ops/s
Iteration  15: 253439.352 ops/s
Iteration  16: 253341.485 ops/s
Iteration  17: 254784.058 ops/s
Iteration  18: 252343.624 ops/s
Iteration  19: 253859.218 ops/s
Iteration  20: 255455.247 ops/s
Iteration  21: 259674.118 ops/s
Iteration  22: 256119.620 ops/s
Iteration  23: 247266.821 ops/s
Iteration  24: 255596.691 ops/s
Iteration  25: 266914.395 ops/s
Iteration  26: 252601.203 ops/s
Iteration  27: 253422.135 ops/s
Iteration  28: 252924.189 ops/s
Iteration  29: 256940.370 ops/s
Iteration  30: 254786.656 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectTarget":
  254434.098 ±(99.9%) 2582.520 ops/s [Average]
  (min, avg, max) = (247266.821, 254434.098, 266914.395), stdev = 3865.395
  CI (99.9%): [251851.577, 257016.618] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectTarget  thrpt   30  254434.098 ± 2582.520  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 731513.315 ops/s
# Warmup Iteration   2: 1496905.837 ops/s
# Warmup Iteration   3: 1642920.104 ops/s
# Warmup Iteration   4: 1583824.259 ops/s
# Warmup Iteration   5: 1291869.891 ops/s
# Warmup Iteration   6: 1514844.437 ops/s
# Warmup Iteration   7: 1535594.779 ops/s
# Warmup Iteration   8: 1532697.883 ops/s
# Warmup Iteration   9: 1516855.853 ops/s
# Warmup Iteration  10: 1534188.116 ops/s
# Warmup Iteration  11: 1544876.686 ops/s
# Warmup Iteration  12: 1580591.306 ops/s
# Warmup Iteration  13: 1576970.469 ops/s
# Warmup Iteration  14: 1565378.884 ops/s
# Warmup Iteration  15: 1582664.237 ops/s
# Warmup Iteration  16: 1575400.710 ops/s
# Warmup Iteration  17: 1583390.574 ops/s
# Warmup Iteration  18: 1583811.249 ops/s
# Warmup Iteration  19: 1556531.521 ops/s
# Warmup Iteration  20: 1545479.933 ops/s
# Warmup Iteration  21: 1565827.999 ops/s
# Warmup Iteration  22: 1593162.215 ops/s
# Warmup Iteration  23: 1534484.335 ops/s
# Warmup Iteration  24: 1549771.848 ops/s
# Warmup Iteration  25: 1550212.492 ops/s
# Warmup Iteration  26: 1540581.502 ops/s
# Warmup Iteration  27: 1611068.559 ops/s
# Warmup Iteration  28: 1608306.960 ops/s
# Warmup Iteration  29: 1610393.948 ops/s
# Warmup Iteration  30: 1582687.340 ops/s
Iteration   1: 1646103.572 ops/s
Iteration   2: 1621664.210 ops/s
Iteration   3: 1654632.842 ops/s
Iteration   4: 1655576.466 ops/s
Iteration   5: 1668315.563 ops/s
Iteration   6: 1661750.298 ops/s
Iteration   7: 1659755.741 ops/s
Iteration   8: 1653458.555 ops/s
Iteration   9: 1670018.028 ops/s
Iteration  10: 1652629.258 ops/s
Iteration  11: 1666079.498 ops/s
Iteration  12: 1670949.999 ops/s
Iteration  13: 1666389.575 ops/s
Iteration  14: 1667791.111 ops/s
Iteration  15: 1671204.953 ops/s
Iteration  16: 1669061.875 ops/s
Iteration  17: 1668906.628 ops/s
Iteration  18: 1669180.559 ops/s
Iteration  19: 1668203.867 ops/s
Iteration  20: 1662500.175 ops/s
Iteration  21: 1663779.987 ops/s
Iteration  22: 1665449.881 ops/s
Iteration  23: 1666355.859 ops/s
Iteration  24: 1667898.344 ops/s
Iteration  25: 1642190.323 ops/s
Iteration  26: 1588900.772 ops/s
Iteration  27: 1601888.424 ops/s
Iteration  28: 1596435.819 ops/s
Iteration  29: 1587507.862 ops/s
Iteration  30: 1565220.280 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectWith":
  1648993.344 ±(99.9%) 20091.104 ops/s [Average]
  (min, avg, max) = (1565220.280, 1648993.344, 1671204.953), stdev = 30071.421
  CI (99.9%): [1628902.240, 1669084.448] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectWith  thrpt   30  1648993.344 ± 20091.104  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 262292.454 ops/s
# Warmup Iteration   2: 431862.573 ops/s
# Warmup Iteration   3: 520148.334 ops/s
# Warmup Iteration   4: 517666.611 ops/s
# Warmup Iteration   5: 553382.743 ops/s
# Warmup Iteration   6: 518114.474 ops/s
# Warmup Iteration   7: 480325.125 ops/s
# Warmup Iteration   8: 529722.497 ops/s
# Warmup Iteration   9: 544738.683 ops/s
# Warmup Iteration  10: 531927.229 ops/s
# Warmup Iteration  11: 519735.291 ops/s
# Warmup Iteration  12: 521959.738 ops/s
# Warmup Iteration  13: 520640.276 ops/s
# Warmup Iteration  14: 521604.910 ops/s
# Warmup Iteration  15: 530251.985 ops/s
# Warmup Iteration  16: 522180.588 ops/s
# Warmup Iteration  17: 534182.325 ops/s
# Warmup Iteration  18: 534473.354 ops/s
# Warmup Iteration  19: 524181.228 ops/s
# Warmup Iteration  20: 522747.637 ops/s
# Warmup Iteration  21: 522510.364 ops/s
# Warmup Iteration  22: 524988.472 ops/s
# Warmup Iteration  23: 519626.633 ops/s
# Warmup Iteration  24: 526299.382 ops/s
# Warmup Iteration  25: 534271.509 ops/s
# Warmup Iteration  26: 537242.487 ops/s
# Warmup Iteration  27: 519978.747 ops/s
# Warmup Iteration  28: 518381.121 ops/s
# Warmup Iteration  29: 533511.337 ops/s
# Warmup Iteration  30: 534691.020 ops/s
Iteration   1: 528538.315 ops/s
Iteration   2: 515417.437 ops/s
Iteration   3: 537771.294 ops/s
Iteration   4: 524199.729 ops/s
Iteration   5: 546744.595 ops/s
Iteration   6: 545097.826 ops/s
Iteration   7: 533083.048 ops/s
Iteration   8: 520632.590 ops/s
Iteration   9: 533078.220 ops/s
Iteration  10: 560116.689 ops/s
Iteration  11: 561875.811 ops/s
Iteration  12: 533489.799 ops/s
Iteration  13: 562030.708 ops/s
Iteration  14: 532975.206 ops/s
Iteration  15: 521607.956 ops/s
Iteration  16: 527702.508 ops/s
Iteration  17: 523544.110 ops/s
Iteration  18: 523954.269 ops/s
Iteration  19: 527430.048 ops/s
Iteration  20: 534405.878 ops/s
Iteration  21: 531909.446 ops/s
Iteration  22: 533149.342 ops/s
Iteration  23: 522170.143 ops/s
Iteration  24: 518261.935 ops/s
Iteration  25: 517286.735 ops/s
Iteration  26: 521223.831 ops/s
Iteration  27: 527006.215 ops/s
Iteration  28: 537172.024 ops/s
Iteration  29: 526529.062 ops/s
Iteration  30: 516961.184 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectWithOccurrences":
  531512.199 ±(99.9%) 8504.654 ops/s [Average]
  (min, avg, max) = (515417.437, 531512.199, 562030.708), stdev = 12729.366
  CI (99.9%): [523007.545, 540016.852] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectWithOccurrences  thrpt   30  531512.199 ± 8504.654  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 116708.283 ops/s
# Warmup Iteration   2: 198193.934 ops/s
# Warmup Iteration   3: 251699.859 ops/s
# Warmup Iteration   4: 264717.150 ops/s
# Warmup Iteration   5: 272521.822 ops/s
# Warmup Iteration   6: 239379.258 ops/s
# Warmup Iteration   7: 258427.544 ops/s
# Warmup Iteration   8: 272148.420 ops/s
# Warmup Iteration   9: 272324.224 ops/s
# Warmup Iteration  10: 272353.244 ops/s
# Warmup Iteration  11: 272257.634 ops/s
# Warmup Iteration  12: 257314.172 ops/s
# Warmup Iteration  13: 259560.214 ops/s
# Warmup Iteration  14: 253939.069 ops/s
# Warmup Iteration  15: 267132.145 ops/s
# Warmup Iteration  16: 272067.037 ops/s
# Warmup Iteration  17: 256486.178 ops/s
# Warmup Iteration  18: 259952.336 ops/s
# Warmup Iteration  19: 253462.763 ops/s
# Warmup Iteration  20: 256337.165 ops/s
# Warmup Iteration  21: 261258.324 ops/s
# Warmup Iteration  22: 265219.986 ops/s
# Warmup Iteration  23: 260699.553 ops/s
# Warmup Iteration  24: 250529.139 ops/s
# Warmup Iteration  25: 252248.000 ops/s
# Warmup Iteration  26: 252000.930 ops/s
# Warmup Iteration  27: 251399.577 ops/s
# Warmup Iteration  28: 251982.702 ops/s
# Warmup Iteration  29: 256424.615 ops/s
# Warmup Iteration  30: 250634.834 ops/s
Iteration   1: 252310.457 ops/s
Iteration   2: 260233.154 ops/s
Iteration   3: 270928.141 ops/s
Iteration   4: 257957.588 ops/s
Iteration   5: 253653.550 ops/s
Iteration   6: 249583.859 ops/s
Iteration   7: 254703.298 ops/s
Iteration   8: 258978.271 ops/s
Iteration   9: 271591.516 ops/s
Iteration  10: 271330.605 ops/s
Iteration  11: 272345.632 ops/s
Iteration  12: 258564.310 ops/s
Iteration  13: 251154.502 ops/s
Iteration  14: 268350.684 ops/s
Iteration  15: 270390.529 ops/s
Iteration  16: 270810.415 ops/s
Iteration  17: 270288.279 ops/s
Iteration  18: 269753.510 ops/s
Iteration  19: 270652.909 ops/s
Iteration  20: 264291.834 ops/s
Iteration  21: 251549.528 ops/s
Iteration  22: 252956.171 ops/s
Iteration  23: 250676.545 ops/s
Iteration  24: 263647.576 ops/s
Iteration  25: 271627.725 ops/s
Iteration  26: 271890.048 ops/s
Iteration  27: 262306.094 ops/s
Iteration  28: 253917.819 ops/s
Iteration  29: 258110.589 ops/s
Iteration  30: 267313.887 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_collectWith_target":
  262395.634 ±(99.9%) 5420.111 ops/s [Average]
  (min, avg, max) = (249583.859, 262395.634, 272345.632), stdev = 8112.568
  CI (99.9%): [256975.523, 267815.745] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_collectWith_target  thrpt   30  262395.634 ± 5420.111  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5451187.042 ops/s
# Warmup Iteration   2: 10185952.534 ops/s
# Warmup Iteration   3: 10101260.172 ops/s
# Warmup Iteration   4: 8457603.286 ops/s
# Warmup Iteration   5: 10290248.086 ops/s
# Warmup Iteration   6: 10156169.519 ops/s
# Warmup Iteration   7: 10059293.128 ops/s
# Warmup Iteration   8: 10258680.349 ops/s
# Warmup Iteration   9: 10093667.476 ops/s
# Warmup Iteration  10: 10047320.338 ops/s
# Warmup Iteration  11: 10234093.948 ops/s
# Warmup Iteration  12: 10475416.969 ops/s
# Warmup Iteration  13: 10303377.854 ops/s
# Warmup Iteration  14: 10472341.527 ops/s
# Warmup Iteration  15: 10897341.387 ops/s
# Warmup Iteration  16: 10556931.606 ops/s
# Warmup Iteration  17: 10446856.111 ops/s
# Warmup Iteration  18: 10390489.291 ops/s
# Warmup Iteration  19: 10994943.437 ops/s
# Warmup Iteration  20: 11003874.421 ops/s
# Warmup Iteration  21: 11000693.696 ops/s
# Warmup Iteration  22: 11003624.560 ops/s
# Warmup Iteration  23: 11001893.499 ops/s
# Warmup Iteration  24: 10987557.666 ops/s
# Warmup Iteration  25: 10984487.975 ops/s
# Warmup Iteration  26: 10840021.279 ops/s
# Warmup Iteration  27: 10285505.301 ops/s
# Warmup Iteration  28: 10521894.672 ops/s
# Warmup Iteration  29: 10552371.768 ops/s
# Warmup Iteration  30: 10145372.655 ops/s
Iteration   1: 10370059.903 ops/s
Iteration   2: 10603904.589 ops/s
Iteration   3: 10017612.567 ops/s
Iteration   4: 10417382.352 ops/s
Iteration   5: 10022655.444 ops/s
Iteration   6: 10193801.202 ops/s
Iteration   7: 10136547.419 ops/s
Iteration   8: 10135336.705 ops/s
Iteration   9: 10254757.880 ops/s
Iteration  10: 10124854.696 ops/s
Iteration  11: 10303762.254 ops/s
Iteration  12: 10065236.241 ops/s
Iteration  13: 10179694.611 ops/s
Iteration  14: 10199537.673 ops/s
Iteration  15: 10121053.914 ops/s
Iteration  16: 10243284.643 ops/s
Iteration  17: 10088621.116 ops/s
Iteration  18: 10208738.637 ops/s
Iteration  19: 10087303.197 ops/s
Iteration  20: 10032284.139 ops/s
Iteration  21: 10206764.717 ops/s
Iteration  22: 10152545.657 ops/s
Iteration  23: 10357759.559 ops/s
Iteration  24: 10476186.091 ops/s
Iteration  25: 10500225.759 ops/s
Iteration  26: 10564663.586 ops/s
Iteration  27: 9995264.203 ops/s
Iteration  28: 10129660.843 ops/s
Iteration  29: 10137425.566 ops/s
Iteration  30: 10125682.144 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_contains":
  10215086.910 ±(99.9%) 110113.470 ops/s [Average]
  (min, avg, max) = (9995264.203, 10215086.910, 10603904.589), stdev = 164812.670
  CI (99.9%): [10104973.440, 10325200.380] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_contains  thrpt   30  10215086.910 ± 110113.470  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4128921.904 ops/s
# Warmup Iteration   2: 9447943.736 ops/s
# Warmup Iteration   3: 9339597.854 ops/s
# Warmup Iteration   4: 8443083.389 ops/s
# Warmup Iteration   5: 9366998.729 ops/s
# Warmup Iteration   6: 9479108.612 ops/s
# Warmup Iteration   7: 9368353.777 ops/s
# Warmup Iteration   8: 9729328.345 ops/s
# Warmup Iteration   9: 9796194.820 ops/s
# Warmup Iteration  10: 9546966.755 ops/s
# Warmup Iteration  11: 9287328.798 ops/s
# Warmup Iteration  12: 9412206.540 ops/s
# Warmup Iteration  13: 9557132.051 ops/s
# Warmup Iteration  14: 9542989.605 ops/s
# Warmup Iteration  15: 9348767.037 ops/s
# Warmup Iteration  16: 9840646.712 ops/s
# Warmup Iteration  17: 9712275.917 ops/s
# Warmup Iteration  18: 9502298.674 ops/s
# Warmup Iteration  19: 9549605.305 ops/s
# Warmup Iteration  20: 9548364.514 ops/s
# Warmup Iteration  21: 9759281.214 ops/s
# Warmup Iteration  22: 9336771.111 ops/s
# Warmup Iteration  23: 9341256.650 ops/s
# Warmup Iteration  24: 9404931.345 ops/s
# Warmup Iteration  25: 9490475.361 ops/s
# Warmup Iteration  26: 9591519.483 ops/s
# Warmup Iteration  27: 9511612.457 ops/s
# Warmup Iteration  28: 9736659.109 ops/s
# Warmup Iteration  29: 9383435.051 ops/s
# Warmup Iteration  30: 9361767.434 ops/s
Iteration   1: 9255878.606 ops/s
Iteration   2: 9533724.518 ops/s
Iteration   3: 9632733.858 ops/s
Iteration   4: 9529361.236 ops/s
Iteration   5: 9650652.413 ops/s
Iteration   6: 10117693.861 ops/s
Iteration   7: 10112124.841 ops/s
Iteration   8: 10120533.600 ops/s
Iteration   9: 10101541.785 ops/s
Iteration  10: 10113893.207 ops/s
Iteration  11: 10086361.607 ops/s
Iteration  12: 10121396.410 ops/s
Iteration  13: 10122076.779 ops/s
Iteration  14: 10111584.160 ops/s
Iteration  15: 10110613.384 ops/s
Iteration  16: 10110380.157 ops/s
Iteration  17: 10120119.968 ops/s
Iteration  18: 10096133.953 ops/s
Iteration  19: 10104092.889 ops/s
Iteration  20: 10099968.822 ops/s
Iteration  21: 9769738.589 ops/s
Iteration  22: 9384084.971 ops/s
Iteration  23: 9750388.877 ops/s
Iteration  24: 9386477.404 ops/s
Iteration  25: 9508514.092 ops/s
Iteration  26: 9405615.899 ops/s
Iteration  27: 9486452.969 ops/s
Iteration  28: 9775936.381 ops/s
Iteration  29: 10074801.349 ops/s
Iteration  30: 10118362.376 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsAllArray":
  9863707.965 ±(99.9%) 202894.375 ops/s [Average]
  (min, avg, max) = (9255878.606, 9863707.965, 10122076.779), stdev = 303682.771
  CI (99.9%): [9660813.591, 10066602.340] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_containsAllArray  thrpt   30  9863707.965 ± 202894.375  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsAllCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsAllCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2951428.755 ops/s
# Warmup Iteration   2: 6731564.917 ops/s
# Warmup Iteration   3: 6596563.720 ops/s
# Warmup Iteration   4: 5792727.011 ops/s
# Warmup Iteration   5: 6660472.851 ops/s
# Warmup Iteration   6: 6545288.682 ops/s
# Warmup Iteration   7: 6549147.814 ops/s
# Warmup Iteration   8: 6643087.323 ops/s
# Warmup Iteration   9: 6613734.541 ops/s
# Warmup Iteration  10: 6546053.679 ops/s
# Warmup Iteration  11: 6593744.784 ops/s
# Warmup Iteration  12: 6587775.149 ops/s
# Warmup Iteration  13: 6541147.334 ops/s
# Warmup Iteration  14: 6601740.520 ops/s
# Warmup Iteration  15: 6640847.039 ops/s
# Warmup Iteration  16: 6578647.779 ops/s
# Warmup Iteration  17: 6636525.279 ops/s
# Warmup Iteration  18: 6657022.040 ops/s
# Warmup Iteration  19: 6628600.587 ops/s
# Warmup Iteration  20: 6621227.753 ops/s
# Warmup Iteration  21: 6635347.781 ops/s
# Warmup Iteration  22: 6764066.618 ops/s
# Warmup Iteration  23: 6739820.621 ops/s
# Warmup Iteration  24: 6555922.243 ops/s
# Warmup Iteration  25: 6674593.273 ops/s
# Warmup Iteration  26: 6703047.029 ops/s
# Warmup Iteration  27: 6585100.121 ops/s
# Warmup Iteration  28: 6785149.364 ops/s
# Warmup Iteration  29: 6749655.289 ops/s
# Warmup Iteration  30: 6755230.322 ops/s
Iteration   1: 6840986.322 ops/s
Iteration   2: 6726865.038 ops/s
Iteration   3: 6588535.133 ops/s
Iteration   4: 6595212.860 ops/s
Iteration   5: 6600700.409 ops/s
Iteration   6: 6595790.042 ops/s
Iteration   7: 6835888.866 ops/s
Iteration   8: 7090087.960 ops/s
Iteration   9: 7089355.860 ops/s
Iteration  10: 7043271.912 ops/s
Iteration  11: 7000433.487 ops/s
Iteration  12: 6649511.914 ops/s
Iteration  13: 6613455.896 ops/s
Iteration  14: 6605049.247 ops/s
Iteration  15: 6564917.014 ops/s
Iteration  16: 6646292.898 ops/s
Iteration  17: 6589998.159 ops/s
Iteration  18: 6729142.989 ops/s
Iteration  19: 6710231.547 ops/s
Iteration  20: 6597944.099 ops/s
Iteration  21: 6639107.349 ops/s
Iteration  22: 6982824.590 ops/s
Iteration  23: 7119531.598 ops/s
Iteration  24: 6806913.963 ops/s
Iteration  25: 6648789.361 ops/s
Iteration  26: 6535783.634 ops/s
Iteration  27: 6667706.268 ops/s
Iteration  28: 6661402.627 ops/s
Iteration  29: 6640358.303 ops/s
Iteration  30: 6567992.335 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsAllCollection":
  6732802.723 ±(99.9%) 120966.554 ops/s [Average]
  (min, avg, max) = (6535783.634, 6732802.723, 7119531.598), stdev = 181057.058
  CI (99.9%): [6611836.168, 6853769.277] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_containsAllCollection  thrpt   30  6732802.723 ± 120966.554  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3652687.071 ops/s
# Warmup Iteration   2: 8779310.763 ops/s
# Warmup Iteration   3: 8008185.473 ops/s
# Warmup Iteration   4: 8678680.312 ops/s
# Warmup Iteration   5: 8997206.149 ops/s
# Warmup Iteration   6: 8995668.756 ops/s
# Warmup Iteration   7: 8998113.265 ops/s
# Warmup Iteration   8: 9023525.972 ops/s
# Warmup Iteration   9: 9002749.960 ops/s
# Warmup Iteration  10: 8604383.443 ops/s
# Warmup Iteration  11: 8597490.825 ops/s
# Warmup Iteration  12: 8399387.963 ops/s
# Warmup Iteration  13: 8350809.523 ops/s
# Warmup Iteration  14: 8381743.287 ops/s
# Warmup Iteration  15: 8417961.342 ops/s
# Warmup Iteration  16: 8482752.885 ops/s
# Warmup Iteration  17: 8700204.662 ops/s
# Warmup Iteration  18: 8990817.280 ops/s
# Warmup Iteration  19: 8648638.219 ops/s
# Warmup Iteration  20: 8447669.959 ops/s
# Warmup Iteration  21: 8414310.543 ops/s
# Warmup Iteration  22: 8883695.613 ops/s
# Warmup Iteration  23: 8524741.791 ops/s
# Warmup Iteration  24: 8588957.675 ops/s
# Warmup Iteration  25: 8905997.915 ops/s
# Warmup Iteration  26: 8934021.413 ops/s
# Warmup Iteration  27: 8452589.254 ops/s
# Warmup Iteration  28: 8652645.115 ops/s
# Warmup Iteration  29: 9028457.250 ops/s
# Warmup Iteration  30: 8533462.967 ops/s
Iteration   1: 8538833.885 ops/s
Iteration   2: 8331006.851 ops/s
Iteration   3: 8304929.261 ops/s
Iteration   4: 8414127.516 ops/s
Iteration   5: 8234093.114 ops/s
Iteration   6: 8507428.291 ops/s
Iteration   7: 8270430.813 ops/s
Iteration   8: 8555984.768 ops/s
Iteration   9: 8465394.937 ops/s
Iteration  10: 8897483.756 ops/s
Iteration  11: 8955946.791 ops/s
Iteration  12: 8342319.941 ops/s
Iteration  13: 8841850.576 ops/s
Iteration  14: 8601923.290 ops/s
Iteration  15: 8988413.034 ops/s
Iteration  16: 8455802.067 ops/s
Iteration  17: 8373936.264 ops/s
Iteration  18: 8506664.410 ops/s
Iteration  19: 8362005.519 ops/s
Iteration  20: 8325410.729 ops/s
Iteration  21: 8359786.955 ops/s
Iteration  22: 8711900.416 ops/s
Iteration  23: 8380826.501 ops/s
Iteration  24: 8794015.671 ops/s
Iteration  25: 8681331.028 ops/s
Iteration  26: 8407501.472 ops/s
Iteration  27: 8277015.175 ops/s
Iteration  28: 8454301.248 ops/s
Iteration  29: 8457615.500 ops/s
Iteration  30: 8351981.820 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsAllIterable":
  8505008.720 ±(99.9%) 141926.415 ops/s [Average]
  (min, avg, max) = (8234093.114, 8505008.720, 8988413.034), stdev = 212428.792
  CI (99.9%): [8363082.305, 8646935.135] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_containsAllIterable  thrpt   30  8505008.720 ± 141926.415  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 54490.801 ops/s
# Warmup Iteration   2: 77191.291 ops/s
# Warmup Iteration   3: 92571.261 ops/s
# Warmup Iteration   4: 94098.157 ops/s
# Warmup Iteration   5: 92534.292 ops/s
# Warmup Iteration   6: 91096.065 ops/s
# Warmup Iteration   7: 91019.742 ops/s
# Warmup Iteration   8: 77601.399 ops/s
# Warmup Iteration   9: 94579.200 ops/s
# Warmup Iteration  10: 92797.545 ops/s
# Warmup Iteration  11: 95243.582 ops/s
# Warmup Iteration  12: 95100.399 ops/s
# Warmup Iteration  13: 91627.551 ops/s
# Warmup Iteration  14: 91819.139 ops/s
# Warmup Iteration  15: 91862.305 ops/s
# Warmup Iteration  16: 94271.126 ops/s
# Warmup Iteration  17: 99564.387 ops/s
# Warmup Iteration  18: 99425.260 ops/s
# Warmup Iteration  19: 99446.420 ops/s
# Warmup Iteration  20: 99442.735 ops/s
# Warmup Iteration  21: 99485.945 ops/s
# Warmup Iteration  22: 99488.874 ops/s
# Warmup Iteration  23: 99516.304 ops/s
# Warmup Iteration  24: 98243.913 ops/s
# Warmup Iteration  25: 92014.292 ops/s
# Warmup Iteration  26: 96900.841 ops/s
# Warmup Iteration  27: 99575.961 ops/s
# Warmup Iteration  28: 94012.757 ops/s
# Warmup Iteration  29: 92246.437 ops/s
# Warmup Iteration  30: 99136.141 ops/s
Iteration   1: 95766.452 ops/s
Iteration   2: 92636.941 ops/s
Iteration   3: 90753.419 ops/s
Iteration   4: 94813.481 ops/s
Iteration   5: 91101.826 ops/s
Iteration   6: 92633.135 ops/s
Iteration   7: 93789.753 ops/s
Iteration   8: 92394.415 ops/s
Iteration   9: 92206.808 ops/s
Iteration  10: 91699.248 ops/s
Iteration  11: 92431.912 ops/s
Iteration  12: 92165.711 ops/s
Iteration  13: 90575.205 ops/s
Iteration  14: 91383.993 ops/s
Iteration  15: 94209.679 ops/s
Iteration  16: 95725.312 ops/s
Iteration  17: 98286.422 ops/s
Iteration  18: 91404.669 ops/s
Iteration  19: 91923.536 ops/s
Iteration  20: 91845.420 ops/s
Iteration  21: 93007.300 ops/s
Iteration  22: 93140.507 ops/s
Iteration  23: 91196.099 ops/s
Iteration  24: 92619.323 ops/s
Iteration  25: 92382.094 ops/s
Iteration  26: 95344.417 ops/s
Iteration  27: 99299.970 ops/s
Iteration  28: 99153.602 ops/s
Iteration  29: 96012.782 ops/s
Iteration  30: 94375.400 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsAnyCollection":
  93475.961 ±(99.9%) 1596.446 ops/s [Average]
  (min, avg, max) = (90575.205, 93475.961, 99299.970), stdev = 2389.485
  CI (99.9%): [91879.515, 95072.407] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt      Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  93475.961 ± 1596.446  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 51841.127 ops/s
# Warmup Iteration   2: 67905.211 ops/s
# Warmup Iteration   3: 84184.761 ops/s
# Warmup Iteration   4: 82198.654 ops/s
# Warmup Iteration   5: 83235.344 ops/s
# Warmup Iteration   6: 83668.808 ops/s
# Warmup Iteration   7: 88463.101 ops/s
# Warmup Iteration   8: 71792.170 ops/s
# Warmup Iteration   9: 81051.104 ops/s
# Warmup Iteration  10: 85017.089 ops/s
# Warmup Iteration  11: 90282.936 ops/s
# Warmup Iteration  12: 87546.213 ops/s
# Warmup Iteration  13: 84655.774 ops/s
# Warmup Iteration  14: 86850.791 ops/s
# Warmup Iteration  15: 90023.715 ops/s
# Warmup Iteration  16: 85407.814 ops/s
# Warmup Iteration  17: 90403.675 ops/s
# Warmup Iteration  18: 88706.998 ops/s
# Warmup Iteration  19: 86397.901 ops/s
# Warmup Iteration  20: 83820.620 ops/s
# Warmup Iteration  21: 85528.850 ops/s
# Warmup Iteration  22: 86682.988 ops/s
# Warmup Iteration  23: 85778.457 ops/s
# Warmup Iteration  24: 83424.513 ops/s
# Warmup Iteration  25: 86739.997 ops/s
# Warmup Iteration  26: 89904.238 ops/s
# Warmup Iteration  27: 90272.070 ops/s
# Warmup Iteration  28: 85051.520 ops/s
# Warmup Iteration  29: 86150.862 ops/s
# Warmup Iteration  30: 83676.330 ops/s
Iteration   1: 87144.660 ops/s
Iteration   2: 90468.934 ops/s
Iteration   3: 90195.460 ops/s
Iteration   4: 90294.616 ops/s
Iteration   5: 90212.213 ops/s
Iteration   6: 90134.088 ops/s
Iteration   7: 90424.920 ops/s
Iteration   8: 90220.238 ops/s
Iteration   9: 90383.764 ops/s
Iteration  10: 90475.607 ops/s
Iteration  11: 90022.196 ops/s
Iteration  12: 90248.393 ops/s
Iteration  13: 90448.466 ops/s
Iteration  14: 90377.998 ops/s
Iteration  15: 90318.649 ops/s
Iteration  16: 90221.441 ops/s
Iteration  17: 87941.396 ops/s
Iteration  18: 90094.093 ops/s
Iteration  19: 84913.711 ops/s
Iteration  20: 83249.486 ops/s
Iteration  21: 84167.344 ops/s
Iteration  22: 84686.363 ops/s
Iteration  23: 86779.512 ops/s
Iteration  24: 87195.774 ops/s
Iteration  25: 86422.055 ops/s
Iteration  26: 86308.538 ops/s
Iteration  27: 85343.819 ops/s
Iteration  28: 85386.901 ops/s
Iteration  29: 85101.380 ops/s
Iteration  30: 85371.178 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsAnyIterable":
  88151.773 ±(99.9%) 1656.309 ops/s [Average]
  (min, avg, max) = (83249.486, 88151.773, 90475.607), stdev = 2479.085
  CI (99.9%): [86495.465, 89808.082] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt      Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  88151.773 ± 1656.309  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 645062.204 ops/s
# Warmup Iteration   2: 693864.962 ops/s
# Warmup Iteration   3: 818136.041 ops/s
# Warmup Iteration   4: 861472.613 ops/s
# Warmup Iteration   5: 855722.603 ops/s
# Warmup Iteration   6: 857480.665 ops/s
# Warmup Iteration   7: 858925.382 ops/s
# Warmup Iteration   8: 853667.469 ops/s
# Warmup Iteration   9: 875840.338 ops/s
# Warmup Iteration  10: 894332.357 ops/s
# Warmup Iteration  11: 891130.327 ops/s
# Warmup Iteration  12: 919599.715 ops/s
# Warmup Iteration  13: 816682.539 ops/s
# Warmup Iteration  14: 720137.931 ops/s
# Warmup Iteration  15: 881399.983 ops/s
# Warmup Iteration  16: 840408.817 ops/s
# Warmup Iteration  17: 925298.201 ops/s
# Warmup Iteration  18: 891769.911 ops/s
# Warmup Iteration  19: 890541.727 ops/s
# Warmup Iteration  20: 896933.931 ops/s
# Warmup Iteration  21: 891495.544 ops/s
# Warmup Iteration  22: 903986.215 ops/s
# Warmup Iteration  23: 888905.470 ops/s
# Warmup Iteration  24: 895853.318 ops/s
# Warmup Iteration  25: 890338.229 ops/s
# Warmup Iteration  26: 891206.553 ops/s
# Warmup Iteration  27: 889295.831 ops/s
# Warmup Iteration  28: 891578.637 ops/s
# Warmup Iteration  29: 897083.196 ops/s
# Warmup Iteration  30: 913057.258 ops/s
Iteration   1: 898903.047 ops/s
Iteration   2: 898162.178 ops/s
Iteration   3: 899302.544 ops/s
Iteration   4: 886731.848 ops/s
Iteration   5: 897017.294 ops/s
Iteration   6: 881223.622 ops/s
Iteration   7: 900712.127 ops/s
Iteration   8: 898381.583 ops/s
Iteration   9: 899670.856 ops/s
Iteration  10: 893017.968 ops/s
Iteration  11: 888634.241 ops/s
Iteration  12: 889435.532 ops/s
Iteration  13: 902970.523 ops/s
Iteration  14: 891320.445 ops/s
Iteration  15: 888928.711 ops/s
Iteration  16: 894638.289 ops/s
Iteration  17: 892969.164 ops/s
Iteration  18: 903809.528 ops/s
Iteration  19: 908994.766 ops/s
Iteration  20: 932500.721 ops/s
Iteration  21: 920787.306 ops/s
Iteration  22: 929611.308 ops/s
Iteration  23: 906424.158 ops/s
Iteration  24: 911840.854 ops/s
Iteration  25: 888040.269 ops/s
Iteration  26: 893301.342 ops/s
Iteration  27: 885280.382 ops/s
Iteration  28: 891272.134 ops/s
Iteration  29: 912225.481 ops/s
Iteration  30: 936766.149 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsBy":
  900762.479 ±(99.9%) 9388.811 ops/s [Average]
  (min, avg, max) = (881223.622, 900762.479, 936766.149), stdev = 14052.731
  CI (99.9%): [891373.668, 910151.290] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_containsBy  thrpt   30  900762.479 ± 9388.811  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 56030.327 ops/s
# Warmup Iteration   2: 83781.514 ops/s
# Warmup Iteration   3: 99451.164 ops/s
# Warmup Iteration   4: 98868.531 ops/s
# Warmup Iteration   5: 99319.665 ops/s
# Warmup Iteration   6: 99121.251 ops/s
# Warmup Iteration   7: 83796.619 ops/s
# Warmup Iteration   8: 99517.901 ops/s
# Warmup Iteration   9: 92370.098 ops/s
# Warmup Iteration  10: 94573.153 ops/s
# Warmup Iteration  11: 92825.866 ops/s
# Warmup Iteration  12: 91565.247 ops/s
# Warmup Iteration  13: 91455.194 ops/s
# Warmup Iteration  14: 94374.730 ops/s
# Warmup Iteration  15: 94609.677 ops/s
# Warmup Iteration  16: 95169.206 ops/s
# Warmup Iteration  17: 96284.992 ops/s
# Warmup Iteration  18: 92541.557 ops/s
# Warmup Iteration  19: 94408.308 ops/s
# Warmup Iteration  20: 94125.062 ops/s
# Warmup Iteration  21: 93992.506 ops/s
# Warmup Iteration  22: 95309.686 ops/s
# Warmup Iteration  23: 93897.603 ops/s
# Warmup Iteration  24: 92272.115 ops/s
# Warmup Iteration  25: 92020.705 ops/s
# Warmup Iteration  26: 91883.038 ops/s
# Warmup Iteration  27: 98889.295 ops/s
# Warmup Iteration  28: 97129.339 ops/s
# Warmup Iteration  29: 95074.194 ops/s
# Warmup Iteration  30: 93166.249 ops/s
Iteration   1: 92520.980 ops/s
Iteration   2: 91020.594 ops/s
Iteration   3: 93320.264 ops/s
Iteration   4: 97330.312 ops/s
Iteration   5: 92148.726 ops/s
Iteration   6: 92110.023 ops/s
Iteration   7: 90571.724 ops/s
Iteration   8: 92204.036 ops/s
Iteration   9: 92291.690 ops/s
Iteration  10: 91521.144 ops/s
Iteration  11: 93879.866 ops/s
Iteration  12: 93941.962 ops/s
Iteration  13: 91630.896 ops/s
Iteration  14: 91234.133 ops/s
Iteration  15: 93939.262 ops/s
Iteration  16: 94048.070 ops/s
Iteration  17: 92086.371 ops/s
Iteration  18: 94847.147 ops/s
Iteration  19: 95297.478 ops/s
Iteration  20: 92100.088 ops/s
Iteration  21: 92136.236 ops/s
Iteration  22: 92651.766 ops/s
Iteration  23: 94532.030 ops/s
Iteration  24: 95579.553 ops/s
Iteration  25: 96906.491 ops/s
Iteration  26: 99376.213 ops/s
Iteration  27: 96113.474 ops/s
Iteration  28: 93967.445 ops/s
Iteration  29: 96060.513 ops/s
Iteration  30: 91694.919 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsNoneCollection":
  93568.780 ±(99.9%) 1417.209 ops/s [Average]
  (min, avg, max) = (90571.724, 93568.780, 99376.213), stdev = 2121.212
  CI (99.9%): [92151.571, 94985.989] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt      Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  93568.780 ± 1417.209  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 48834.718 ops/s
# Warmup Iteration   2: 67181.272 ops/s
# Warmup Iteration   3: 79157.313 ops/s
# Warmup Iteration   4: 77458.417 ops/s
# Warmup Iteration   5: 76307.396 ops/s
# Warmup Iteration   6: 76925.248 ops/s
# Warmup Iteration   7: 77327.778 ops/s
# Warmup Iteration   8: 76687.171 ops/s
# Warmup Iteration   9: 64190.433 ops/s
# Warmup Iteration  10: 80151.854 ops/s
# Warmup Iteration  11: 76663.934 ops/s
# Warmup Iteration  12: 78133.352 ops/s
# Warmup Iteration  13: 79996.183 ops/s
# Warmup Iteration  14: 78525.848 ops/s
# Warmup Iteration  15: 82667.095 ops/s
# Warmup Iteration  16: 82490.208 ops/s
# Warmup Iteration  17: 82713.514 ops/s
# Warmup Iteration  18: 82621.625 ops/s
# Warmup Iteration  19: 82694.559 ops/s
# Warmup Iteration  20: 82429.066 ops/s
# Warmup Iteration  21: 82596.299 ops/s
# Warmup Iteration  22: 79655.525 ops/s
# Warmup Iteration  23: 78083.462 ops/s
# Warmup Iteration  24: 80866.754 ops/s
# Warmup Iteration  25: 80454.339 ops/s
# Warmup Iteration  26: 78636.838 ops/s
# Warmup Iteration  27: 77180.723 ops/s
# Warmup Iteration  28: 76113.168 ops/s
# Warmup Iteration  29: 76471.797 ops/s
# Warmup Iteration  30: 76749.408 ops/s
Iteration   1: 75170.765 ops/s
Iteration   2: 77173.245 ops/s
Iteration   3: 75944.389 ops/s
Iteration   4: 76551.585 ops/s
Iteration   5: 76351.666 ops/s
Iteration   6: 76730.119 ops/s
Iteration   7: 79187.120 ops/s
Iteration   8: 77628.524 ops/s
Iteration   9: 76783.302 ops/s
Iteration  10: 78375.817 ops/s
Iteration  11: 77221.288 ops/s
Iteration  12: 78502.471 ops/s
Iteration  13: 78233.953 ops/s
Iteration  14: 75490.920 ops/s
Iteration  15: 77109.394 ops/s
Iteration  16: 76913.923 ops/s
Iteration  17: 76180.697 ops/s
Iteration  18: 81227.801 ops/s
Iteration  19: 80217.861 ops/s
Iteration  20: 81318.588 ops/s
Iteration  21: 82686.741 ops/s
Iteration  22: 82726.320 ops/s
Iteration  23: 82411.025 ops/s
Iteration  24: 81645.747 ops/s
Iteration  25: 78889.913 ops/s
Iteration  26: 77307.221 ops/s
Iteration  27: 79350.664 ops/s
Iteration  28: 79202.669 ops/s
Iteration  29: 76447.024 ops/s
Iteration  30: 79020.457 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_containsNoneIterable":
  78400.040 ±(99.9%) 1476.323 ops/s [Average]
  (min, avg, max) = (75170.765, 78400.040, 82726.320), stdev = 2209.691
  CI (99.9%): [76923.718, 79876.363] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt      Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  78400.040 ± 1476.323  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_contains_with_hashing_strategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_contains_with_hashing_strategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1762723.332 ops/s
# Warmup Iteration   2: 3883750.161 ops/s
# Warmup Iteration   3: 4059715.174 ops/s
# Warmup Iteration   4: 3443256.461 ops/s
# Warmup Iteration   5: 4348933.470 ops/s
# Warmup Iteration   6: 4069675.596 ops/s
# Warmup Iteration   7: 4372963.120 ops/s
# Warmup Iteration   8: 4175099.806 ops/s
# Warmup Iteration   9: 4035972.766 ops/s
# Warmup Iteration  10: 4101161.710 ops/s
# Warmup Iteration  11: 4135798.892 ops/s
# Warmup Iteration  12: 4368444.395 ops/s
# Warmup Iteration  13: 4119191.531 ops/s
# Warmup Iteration  14: 4135084.039 ops/s
# Warmup Iteration  15: 4112730.908 ops/s
# Warmup Iteration  16: 4092751.229 ops/s
# Warmup Iteration  17: 4174355.967 ops/s
# Warmup Iteration  18: 4103034.979 ops/s
# Warmup Iteration  19: 4044027.604 ops/s
# Warmup Iteration  20: 4009639.949 ops/s
# Warmup Iteration  21: 4039439.528 ops/s
# Warmup Iteration  22: 4045178.423 ops/s
# Warmup Iteration  23: 4324361.430 ops/s
# Warmup Iteration  24: 4229565.334 ops/s
# Warmup Iteration  25: 4155850.315 ops/s
# Warmup Iteration  26: 4081145.743 ops/s
# Warmup Iteration  27: 4283736.519 ops/s
# Warmup Iteration  28: 4294952.916 ops/s
# Warmup Iteration  29: 4340099.985 ops/s
# Warmup Iteration  30: 4381604.932 ops/s
Iteration   1: 4375962.058 ops/s
Iteration   2: 4374693.091 ops/s
Iteration   3: 4373412.397 ops/s
Iteration   4: 4381816.851 ops/s
Iteration   5: 4372473.003 ops/s
Iteration   6: 4376041.144 ops/s
Iteration   7: 4369979.891 ops/s
Iteration   8: 4372267.991 ops/s
Iteration   9: 4353349.134 ops/s
Iteration  10: 4377775.875 ops/s
Iteration  11: 4365125.468 ops/s
Iteration  12: 4343496.755 ops/s
Iteration  13: 4039473.238 ops/s
Iteration  14: 4079381.759 ops/s
Iteration  15: 4165962.938 ops/s
Iteration  16: 4266632.764 ops/s
Iteration  17: 4382740.214 ops/s
Iteration  18: 4229904.723 ops/s
Iteration  19: 4068027.449 ops/s
Iteration  20: 4066381.281 ops/s
Iteration  21: 4015872.858 ops/s
Iteration  22: 4054765.324 ops/s
Iteration  23: 4066752.489 ops/s
Iteration  24: 4060623.880 ops/s
Iteration  25: 3998601.397 ops/s
Iteration  26: 4040266.914 ops/s
Iteration  27: 4017492.672 ops/s
Iteration  28: 4106939.288 ops/s
Iteration  29: 4096500.794 ops/s
Iteration  30: 4037123.151 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_contains_with_hashing_strategy":
  4207661.226 ±(99.9%) 103657.504 ops/s [Average]
  (min, avg, max) = (3998601.397, 4207661.226, 4382740.214), stdev = 155149.684
  CI (99.9%): [4104003.722, 4311318.731] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_contains_with_hashing_strategy  thrpt   30  4207661.226 ± 103657.504  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3304569.143 ops/s
# Warmup Iteration   2: 7177179.760 ops/s
# Warmup Iteration   3: 7360015.097 ops/s
# Warmup Iteration   4: 6585139.111 ops/s
# Warmup Iteration   5: 6892555.060 ops/s
# Warmup Iteration   6: 7460610.909 ops/s
# Warmup Iteration   7: 7383287.312 ops/s
# Warmup Iteration   8: 7440655.650 ops/s
# Warmup Iteration   9: 7350340.854 ops/s
# Warmup Iteration  10: 7817621.542 ops/s
# Warmup Iteration  11: 7723300.172 ops/s
# Warmup Iteration  12: 7630195.325 ops/s
# Warmup Iteration  13: 7591742.263 ops/s
# Warmup Iteration  14: 7302372.957 ops/s
# Warmup Iteration  15: 7320287.292 ops/s
# Warmup Iteration  16: 7303316.347 ops/s
# Warmup Iteration  17: 7462886.038 ops/s
# Warmup Iteration  18: 7259566.407 ops/s
# Warmup Iteration  19: 7763487.836 ops/s
# Warmup Iteration  20: 7633382.978 ops/s
# Warmup Iteration  21: 7953445.269 ops/s
# Warmup Iteration  22: 7722369.802 ops/s
# Warmup Iteration  23: 7374722.253 ops/s
# Warmup Iteration  24: 7460247.871 ops/s
# Warmup Iteration  25: 7950989.869 ops/s
# Warmup Iteration  26: 7641701.064 ops/s
# Warmup Iteration  27: 7342893.609 ops/s
# Warmup Iteration  28: 7454577.772 ops/s
# Warmup Iteration  29: 7444803.812 ops/s
# Warmup Iteration  30: 7416515.369 ops/s
Iteration   1: 7285515.490 ops/s
Iteration   2: 7315591.918 ops/s
Iteration   3: 7364441.978 ops/s
Iteration   4: 7421386.629 ops/s
Iteration   5: 7948655.703 ops/s
Iteration   6: 7344775.853 ops/s
Iteration   7: 7281839.232 ops/s
Iteration   8: 7529074.973 ops/s
Iteration   9: 7721703.326 ops/s
Iteration  10: 7327149.940 ops/s
Iteration  11: 7562010.015 ops/s
Iteration  12: 7551854.801 ops/s
Iteration  13: 7555404.166 ops/s
Iteration  14: 7358268.167 ops/s
Iteration  15: 7785124.538 ops/s
Iteration  16: 7637023.761 ops/s
Iteration  17: 7420129.208 ops/s
Iteration  18: 7370290.981 ops/s
Iteration  19: 7417425.874 ops/s
Iteration  20: 7218171.939 ops/s
Iteration  21: 7426229.497 ops/s
Iteration  22: 7487543.208 ops/s
Iteration  23: 7327845.758 ops/s
Iteration  24: 7376146.955 ops/s
Iteration  25: 7375331.373 ops/s
Iteration  26: 7855671.448 ops/s
Iteration  27: 7965190.680 ops/s
Iteration  28: 7960467.098 ops/s
Iteration  29: 7976797.531 ops/s
Iteration  30: 7963740.712 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_count":
  7537693.425 ±(99.9%) 162589.755 ops/s [Average]
  (min, avg, max) = (7218171.939, 7537693.425, 7976797.531), stdev = 243356.710
  CI (99.9%): [7375103.670, 7700283.180] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_count  thrpt   30  7537693.425 ± 162589.755  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1038786.277 ops/s
# Warmup Iteration   2: 1940031.479 ops/s
# Warmup Iteration   3: 2125748.987 ops/s
# Warmup Iteration   4: 2144700.313 ops/s
# Warmup Iteration   5: 1752454.228 ops/s
# Warmup Iteration   6: 1950109.093 ops/s
# Warmup Iteration   7: 1993402.947 ops/s
# Warmup Iteration   8: 1996616.121 ops/s
# Warmup Iteration   9: 2058721.519 ops/s
# Warmup Iteration  10: 2026574.896 ops/s
# Warmup Iteration  11: 1974103.221 ops/s
# Warmup Iteration  12: 1998429.605 ops/s
# Warmup Iteration  13: 2004307.935 ops/s
# Warmup Iteration  14: 2069150.964 ops/s
# Warmup Iteration  15: 1991017.560 ops/s
# Warmup Iteration  16: 2130928.442 ops/s
# Warmup Iteration  17: 2049874.369 ops/s
# Warmup Iteration  18: 2062456.761 ops/s
# Warmup Iteration  19: 2144604.544 ops/s
# Warmup Iteration  20: 2145193.593 ops/s
# Warmup Iteration  21: 2143427.443 ops/s
# Warmup Iteration  22: 2143016.231 ops/s
# Warmup Iteration  23: 2144365.282 ops/s
# Warmup Iteration  24: 2146616.778 ops/s
# Warmup Iteration  25: 2143980.525 ops/s
# Warmup Iteration  26: 2133009.549 ops/s
# Warmup Iteration  27: 2147747.160 ops/s
# Warmup Iteration  28: 2140262.100 ops/s
# Warmup Iteration  29: 2066156.094 ops/s
# Warmup Iteration  30: 2042092.288 ops/s
Iteration   1: 2103440.858 ops/s
Iteration   2: 2028957.764 ops/s
Iteration   3: 2016831.699 ops/s
Iteration   4: 2042862.468 ops/s
Iteration   5: 2027373.889 ops/s
Iteration   6: 2052259.625 ops/s
Iteration   7: 2121629.719 ops/s
Iteration   8: 2146483.361 ops/s
Iteration   9: 2042066.143 ops/s
Iteration  10: 2024316.941 ops/s
Iteration  11: 2130849.302 ops/s
Iteration  12: 2134013.483 ops/s
Iteration  13: 2074226.754 ops/s
Iteration  14: 2102854.231 ops/s
Iteration  15: 2017490.649 ops/s
Iteration  16: 1997494.745 ops/s
Iteration  17: 2027044.446 ops/s
Iteration  18: 2022900.132 ops/s
Iteration  19: 2056412.351 ops/s
Iteration  20: 2038869.927 ops/s
Iteration  21: 2068230.838 ops/s
Iteration  22: 2079226.721 ops/s
Iteration  23: 2063397.389 ops/s
Iteration  24: 2081572.298 ops/s
Iteration  25: 2140426.625 ops/s
Iteration  26: 2088776.222 ops/s
Iteration  27: 2135452.661 ops/s
Iteration  28: 2141689.467 ops/s
Iteration  29: 2140121.828 ops/s
Iteration  30: 2131871.112 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_countBy":
  2075971.455 ±(99.9%) 31554.243 ops/s [Average]
  (min, avg, max) = (1997494.745, 2075971.455, 2146483.361), stdev = 47228.909
  CI (99.9%): [2044417.212, 2107525.698] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_countBy  thrpt   30  2075971.455 ± 31554.243  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 235219.619 ops/s
# Warmup Iteration   2: 417003.944 ops/s
# Warmup Iteration   3: 475644.928 ops/s
# Warmup Iteration   4: 479255.897 ops/s
# Warmup Iteration   5: 479742.510 ops/s
# Warmup Iteration   6: 396732.183 ops/s
# Warmup Iteration   7: 477128.715 ops/s
# Warmup Iteration   8: 478759.972 ops/s
# Warmup Iteration   9: 478508.786 ops/s
# Warmup Iteration  10: 479651.639 ops/s
# Warmup Iteration  11: 478465.097 ops/s
# Warmup Iteration  12: 478740.173 ops/s
# Warmup Iteration  13: 475277.247 ops/s
# Warmup Iteration  14: 478858.318 ops/s
# Warmup Iteration  15: 468446.013 ops/s
# Warmup Iteration  16: 453127.838 ops/s
# Warmup Iteration  17: 466984.462 ops/s
# Warmup Iteration  18: 480188.002 ops/s
# Warmup Iteration  19: 477156.539 ops/s
# Warmup Iteration  20: 462197.380 ops/s
# Warmup Iteration  21: 477588.804 ops/s
# Warmup Iteration  22: 478196.537 ops/s
# Warmup Iteration  23: 471770.416 ops/s
# Warmup Iteration  24: 477675.135 ops/s
# Warmup Iteration  25: 479886.521 ops/s
# Warmup Iteration  26: 478860.808 ops/s
# Warmup Iteration  27: 475578.862 ops/s
# Warmup Iteration  28: 477711.256 ops/s
# Warmup Iteration  29: 470272.665 ops/s
# Warmup Iteration  30: 460172.774 ops/s
Iteration   1: 458272.304 ops/s
Iteration   2: 472338.096 ops/s
Iteration   3: 473285.075 ops/s
Iteration   4: 457664.443 ops/s
Iteration   5: 458703.139 ops/s
Iteration   6: 460381.409 ops/s
Iteration   7: 463755.800 ops/s
Iteration   8: 467252.076 ops/s
Iteration   9: 471120.548 ops/s
Iteration  10: 467007.842 ops/s
Iteration  11: 463375.918 ops/s
Iteration  12: 461402.381 ops/s
Iteration  13: 463970.252 ops/s
Iteration  14: 463462.892 ops/s
Iteration  15: 455858.494 ops/s
Iteration  16: 479524.779 ops/s
Iteration  17: 464191.237 ops/s
Iteration  18: 471168.963 ops/s
Iteration  19: 465541.579 ops/s
Iteration  20: 459346.886 ops/s
Iteration  21: 457880.205 ops/s
Iteration  22: 457870.465 ops/s
Iteration  23: 456122.767 ops/s
Iteration  24: 459467.935 ops/s
Iteration  25: 455448.045 ops/s
Iteration  26: 458263.816 ops/s
Iteration  27: 463255.029 ops/s
Iteration  28: 463655.463 ops/s
Iteration  29: 478432.672 ops/s
Iteration  30: 461629.388 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_countByEach":
  463654.997 ±(99.9%) 4306.848 ops/s [Average]
  (min, avg, max) = (455448.045, 463654.997, 479524.779), stdev = 6446.287
  CI (99.9%): [459348.149, 467961.844] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_countByEach  thrpt   30  463654.997 ± 4306.848  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 972544.621 ops/s
# Warmup Iteration   2: 1659893.889 ops/s
# Warmup Iteration   3: 1909948.199 ops/s
# Warmup Iteration   4: 1882786.588 ops/s
# Warmup Iteration   5: 1869259.846 ops/s
# Warmup Iteration   6: 1607948.993 ops/s
# Warmup Iteration   7: 1933139.092 ops/s
# Warmup Iteration   8: 1908495.812 ops/s
# Warmup Iteration   9: 1935621.480 ops/s
# Warmup Iteration  10: 1908382.164 ops/s
# Warmup Iteration  11: 1903767.815 ops/s
# Warmup Iteration  12: 1928859.263 ops/s
# Warmup Iteration  13: 1933173.710 ops/s
# Warmup Iteration  14: 1876192.720 ops/s
# Warmup Iteration  15: 1875676.044 ops/s
# Warmup Iteration  16: 1970827.262 ops/s
# Warmup Iteration  17: 1974311.418 ops/s
# Warmup Iteration  18: 1974105.112 ops/s
# Warmup Iteration  19: 1973036.247 ops/s
# Warmup Iteration  20: 1974098.081 ops/s
# Warmup Iteration  21: 1972302.019 ops/s
# Warmup Iteration  22: 1974914.950 ops/s
# Warmup Iteration  23: 1973609.729 ops/s
# Warmup Iteration  24: 1966881.190 ops/s
# Warmup Iteration  25: 1969578.942 ops/s
# Warmup Iteration  26: 1953346.811 ops/s
# Warmup Iteration  27: 1975216.919 ops/s
# Warmup Iteration  28: 1974508.315 ops/s
# Warmup Iteration  29: 1975223.455 ops/s
# Warmup Iteration  30: 1970975.876 ops/s
Iteration   1: 1972622.039 ops/s
Iteration   2: 1973574.815 ops/s
Iteration   3: 1973716.069 ops/s
Iteration   4: 1969491.264 ops/s
Iteration   5: 1973991.671 ops/s
Iteration   6: 1971278.509 ops/s
Iteration   7: 1975209.486 ops/s
Iteration   8: 1906183.466 ops/s
Iteration   9: 1816589.201 ops/s
Iteration  10: 1853923.134 ops/s
Iteration  11: 1878174.651 ops/s
Iteration  12: 1885623.036 ops/s
Iteration  13: 1939372.683 ops/s
Iteration  14: 1959943.461 ops/s
Iteration  15: 1966072.227 ops/s
Iteration  16: 1971227.442 ops/s
Iteration  17: 1974386.526 ops/s
Iteration  18: 1896949.445 ops/s
Iteration  19: 1885848.145 ops/s
Iteration  20: 1881753.919 ops/s
Iteration  21: 1882776.521 ops/s
Iteration  22: 1871917.881 ops/s
Iteration  23: 1884894.167 ops/s
Iteration  24: 1894669.556 ops/s
Iteration  25: 1902439.000 ops/s
Iteration  26: 1879035.851 ops/s
Iteration  27: 1895768.775 ops/s
Iteration  28: 1867682.464 ops/s
Iteration  29: 1964361.068 ops/s
Iteration  30: 1868111.260 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_countByWith":
  1917919.591 ±(99.9%) 31872.403 ops/s [Average]
  (min, avg, max) = (1816589.201, 1917919.591, 1975209.486), stdev = 47705.117
  CI (99.9%): [1886047.188, 1949791.994] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_countByWith  thrpt   30  1917919.591 ± 31872.403  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4146155.889 ops/s
# Warmup Iteration   2: 9642179.816 ops/s
# Warmup Iteration   3: 9528370.442 ops/s
# Warmup Iteration   4: 8087543.699 ops/s
# Warmup Iteration   5: 10149580.171 ops/s
# Warmup Iteration   6: 9618293.642 ops/s
# Warmup Iteration   7: 9568596.390 ops/s
# Warmup Iteration   8: 9912416.128 ops/s
# Warmup Iteration   9: 9773269.144 ops/s
# Warmup Iteration  10: 9818252.591 ops/s
# Warmup Iteration  11: 9993489.381 ops/s
# Warmup Iteration  12: 10084707.715 ops/s
# Warmup Iteration  13: 9688421.071 ops/s
# Warmup Iteration  14: 9836646.334 ops/s
# Warmup Iteration  15: 9584781.746 ops/s
# Warmup Iteration  16: 9605078.184 ops/s
# Warmup Iteration  17: 9700214.010 ops/s
# Warmup Iteration  18: 9615609.886 ops/s
# Warmup Iteration  19: 9847047.053 ops/s
# Warmup Iteration  20: 10214284.229 ops/s
# Warmup Iteration  21: 9771872.991 ops/s
# Warmup Iteration  22: 9521679.665 ops/s
# Warmup Iteration  23: 9668185.510 ops/s
# Warmup Iteration  24: 9619006.503 ops/s
# Warmup Iteration  25: 9940303.635 ops/s
# Warmup Iteration  26: 9606702.188 ops/s
# Warmup Iteration  27: 9806881.190 ops/s
# Warmup Iteration  28: 10178269.150 ops/s
# Warmup Iteration  29: 10018073.847 ops/s
# Warmup Iteration  30: 9765733.279 ops/s
Iteration   1: 9547921.171 ops/s
Iteration   2: 9514087.206 ops/s
Iteration   3: 9583161.228 ops/s
Iteration   4: 9884358.413 ops/s
Iteration   5: 9716072.602 ops/s
Iteration   6: 10122759.687 ops/s
Iteration   7: 9777076.435 ops/s
Iteration   8: 9929561.846 ops/s
Iteration   9: 9826252.483 ops/s
Iteration  10: 10365782.618 ops/s
Iteration  11: 10374265.656 ops/s
Iteration  12: 10160473.654 ops/s
Iteration  13: 9445843.984 ops/s
Iteration  14: 9927861.087 ops/s
Iteration  15: 9748784.252 ops/s
Iteration  16: 9905350.078 ops/s
Iteration  17: 9811330.698 ops/s
Iteration  18: 9403654.903 ops/s
Iteration  19: 10068720.311 ops/s
Iteration  20: 9948624.750 ops/s
Iteration  21: 10126719.307 ops/s
Iteration  22: 10342231.199 ops/s
Iteration  23: 10363216.447 ops/s
Iteration  24: 10371639.121 ops/s
Iteration  25: 10377465.029 ops/s
Iteration  26: 10368137.627 ops/s
Iteration  27: 10370844.664 ops/s
Iteration  28: 10354045.563 ops/s
Iteration  29: 10368140.128 ops/s
Iteration  30: 10338077.105 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_countWith":
  10014748.642 ±(99.9%) 217667.231 ops/s [Average]
  (min, avg, max) = (9403654.903, 10014748.642, 10377465.029), stdev = 325794.088
  CI (99.9%): [9797081.411, 10232415.872] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_countWith  thrpt   30  10014748.642 ± 217667.231  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2446322.659 ops/s
# Warmup Iteration   2: 5181635.362 ops/s
# Warmup Iteration   3: 5019818.376 ops/s
# Warmup Iteration   4: 4493925.094 ops/s
# Warmup Iteration   5: 5054749.043 ops/s
# Warmup Iteration   6: 4951656.432 ops/s
# Warmup Iteration   7: 5083451.315 ops/s
# Warmup Iteration   8: 4885152.787 ops/s
# Warmup Iteration   9: 4981959.830 ops/s
# Warmup Iteration  10: 4951238.868 ops/s
# Warmup Iteration  11: 4971616.014 ops/s
# Warmup Iteration  12: 5106371.861 ops/s
# Warmup Iteration  13: 5052172.047 ops/s
# Warmup Iteration  14: 4907087.867 ops/s
# Warmup Iteration  15: 4921431.148 ops/s
# Warmup Iteration  16: 4898125.642 ops/s
# Warmup Iteration  17: 4901520.641 ops/s
# Warmup Iteration  18: 4864140.840 ops/s
# Warmup Iteration  19: 4968388.202 ops/s
# Warmup Iteration  20: 5002297.201 ops/s
# Warmup Iteration  21: 4872726.231 ops/s
# Warmup Iteration  22: 4866292.951 ops/s
# Warmup Iteration  23: 4874895.774 ops/s
# Warmup Iteration  24: 4863279.626 ops/s
# Warmup Iteration  25: 5111345.884 ops/s
# Warmup Iteration  26: 4948800.029 ops/s
# Warmup Iteration  27: 5098532.795 ops/s
# Warmup Iteration  28: 4968432.077 ops/s
# Warmup Iteration  29: 5181373.131 ops/s
# Warmup Iteration  30: 5038976.471 ops/s
Iteration   1: 4950161.554 ops/s
Iteration   2: 4888432.637 ops/s
Iteration   3: 5239429.972 ops/s
Iteration   4: 4847378.849 ops/s
Iteration   5: 4814166.814 ops/s
Iteration   6: 4854125.842 ops/s
Iteration   7: 4927275.818 ops/s
Iteration   8: 4881543.283 ops/s
Iteration   9: 4878995.912 ops/s
Iteration  10: 4997877.731 ops/s
Iteration  11: 4998218.589 ops/s
Iteration  12: 4976044.650 ops/s
Iteration  13: 4944697.376 ops/s
Iteration  14: 4877547.069 ops/s
Iteration  15: 4855846.041 ops/s
Iteration  16: 5033594.783 ops/s
Iteration  17: 4939448.819 ops/s
Iteration  18: 4890251.926 ops/s
Iteration  19: 4865225.231 ops/s
Iteration  20: 4900953.193 ops/s
Iteration  21: 4879357.604 ops/s
Iteration  22: 4912718.370 ops/s
Iteration  23: 4934265.358 ops/s
Iteration  24: 4957375.014 ops/s
Iteration  25: 5008722.110 ops/s
Iteration  26: 5066087.724 ops/s
Iteration  27: 5022440.106 ops/s
Iteration  28: 4987221.056 ops/s
Iteration  29: 4952243.946 ops/s
Iteration  30: 4833995.186 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_detect":
  4937188.085 ±(99.9%) 57453.901 ops/s [Average]
  (min, avg, max) = (4814166.814, 4937188.085, 5239429.972), stdev = 85994.301
  CI (99.9%): [4879734.184, 4994641.987] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_detect  thrpt   30  4937188.085 ± 57453.901  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1853301.639 ops/s
# Warmup Iteration   2: 4870651.567 ops/s
# Warmup Iteration   3: 4898356.052 ops/s
# Warmup Iteration   4: 3983832.440 ops/s
# Warmup Iteration   5: 4954604.255 ops/s
# Warmup Iteration   6: 4856635.724 ops/s
# Warmup Iteration   7: 4881653.985 ops/s
# Warmup Iteration   8: 5021783.026 ops/s
# Warmup Iteration   9: 5045563.621 ops/s
# Warmup Iteration  10: 5165573.509 ops/s
# Warmup Iteration  11: 5277757.643 ops/s
# Warmup Iteration  12: 5271568.912 ops/s
# Warmup Iteration  13: 5273106.089 ops/s
# Warmup Iteration  14: 5272948.574 ops/s
# Warmup Iteration  15: 5274367.524 ops/s
# Warmup Iteration  16: 5267886.235 ops/s
# Warmup Iteration  17: 5264615.815 ops/s
# Warmup Iteration  18: 5009678.834 ops/s
# Warmup Iteration  19: 4928882.951 ops/s
# Warmup Iteration  20: 5079495.653 ops/s
# Warmup Iteration  21: 4968926.594 ops/s
# Warmup Iteration  22: 5272766.242 ops/s
# Warmup Iteration  23: 5007439.137 ops/s
# Warmup Iteration  24: 4907236.431 ops/s
# Warmup Iteration  25: 4880982.075 ops/s
# Warmup Iteration  26: 4870322.608 ops/s
# Warmup Iteration  27: 4958639.772 ops/s
# Warmup Iteration  28: 4978170.879 ops/s
# Warmup Iteration  29: 4993349.757 ops/s
# Warmup Iteration  30: 5052514.281 ops/s
Iteration   1: 4956590.688 ops/s
Iteration   2: 5037404.149 ops/s
Iteration   3: 4944510.998 ops/s
Iteration   4: 5126812.915 ops/s
Iteration   5: 5094636.513 ops/s
Iteration   6: 4936101.200 ops/s
Iteration   7: 5043681.055 ops/s
Iteration   8: 4922559.119 ops/s
Iteration   9: 4961849.990 ops/s
Iteration  10: 4920623.669 ops/s
Iteration  11: 4905044.356 ops/s
Iteration  12: 5071585.104 ops/s
Iteration  13: 5197110.691 ops/s
Iteration  14: 4908078.341 ops/s
Iteration  15: 5051557.969 ops/s
Iteration  16: 4835004.207 ops/s
Iteration  17: 4902087.769 ops/s
Iteration  18: 4991458.997 ops/s
Iteration  19: 5077193.942 ops/s
Iteration  20: 4863755.494 ops/s
Iteration  21: 5153179.029 ops/s
Iteration  22: 5223307.839 ops/s
Iteration  23: 4994702.243 ops/s
Iteration  24: 4904151.050 ops/s
Iteration  25: 5060633.347 ops/s
Iteration  26: 4927912.127 ops/s
Iteration  27: 5064975.485 ops/s
Iteration  28: 5021393.386 ops/s
Iteration  29: 4938818.175 ops/s
Iteration  30: 5045052.046 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_detectIfNone":
  5002725.730 ±(99.9%) 65449.481 ops/s [Average]
  (min, avg, max) = (4835004.207, 5002725.730, 5223307.839), stdev = 97961.709
  CI (99.9%): [4937276.249, 5068175.211] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_detectIfNone  thrpt   30  5002725.730 ± 65449.481  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 432273.995 ops/s
# Warmup Iteration   2: 530243.439 ops/s
# Warmup Iteration   3: 713498.536 ops/s
# Warmup Iteration   4: 695404.335 ops/s
# Warmup Iteration   5: 689159.192 ops/s
# Warmup Iteration   6: 698049.776 ops/s
# Warmup Iteration   7: 682492.477 ops/s
# Warmup Iteration   8: 681271.722 ops/s
# Warmup Iteration   9: 551578.003 ops/s
# Warmup Iteration  10: 683489.689 ops/s
# Warmup Iteration  11: 676794.885 ops/s
# Warmup Iteration  12: 673104.177 ops/s
# Warmup Iteration  13: 689886.869 ops/s
# Warmup Iteration  14: 680289.565 ops/s
# Warmup Iteration  15: 679456.198 ops/s
# Warmup Iteration  16: 664711.495 ops/s
# Warmup Iteration  17: 686094.918 ops/s
# Warmup Iteration  18: 722707.618 ops/s
# Warmup Iteration  19: 702131.286 ops/s
# Warmup Iteration  20: 695207.331 ops/s
# Warmup Iteration  21: 684471.393 ops/s
# Warmup Iteration  22: 695285.002 ops/s
# Warmup Iteration  23: 693108.504 ops/s
# Warmup Iteration  24: 705650.585 ops/s
# Warmup Iteration  25: 747345.262 ops/s
# Warmup Iteration  26: 746839.237 ops/s
# Warmup Iteration  27: 744501.193 ops/s
# Warmup Iteration  28: 747487.306 ops/s
# Warmup Iteration  29: 746416.074 ops/s
# Warmup Iteration  30: 745493.458 ops/s
Iteration   1: 746373.510 ops/s
Iteration   2: 746433.000 ops/s
Iteration   3: 746466.949 ops/s
Iteration   4: 745542.351 ops/s
Iteration   5: 747066.071 ops/s
Iteration   6: 730496.008 ops/s
Iteration   7: 744913.591 ops/s
Iteration   8: 745773.381 ops/s
Iteration   9: 714122.501 ops/s
Iteration  10: 695903.769 ops/s
Iteration  11: 694346.958 ops/s
Iteration  12: 707061.363 ops/s
Iteration  13: 714849.226 ops/s
Iteration  14: 716956.492 ops/s
Iteration  15: 696802.868 ops/s
Iteration  16: 719232.386 ops/s
Iteration  17: 688548.691 ops/s
Iteration  18: 732865.267 ops/s
Iteration  19: 696929.972 ops/s
Iteration  20: 688096.244 ops/s
Iteration  21: 690377.154 ops/s
Iteration  22: 717539.465 ops/s
Iteration  23: 739350.611 ops/s
Iteration  24: 703776.975 ops/s
Iteration  25: 712992.926 ops/s
Iteration  26: 687150.346 ops/s
Iteration  27: 696684.694 ops/s
Iteration  28: 699670.910 ops/s
Iteration  29: 690990.797 ops/s
Iteration  30: 695103.290 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_detectOptional":
  715080.592 ±(99.9%) 14646.257 ops/s [Average]
  (min, avg, max) = (687150.346, 715080.592, 747066.071), stdev = 21921.830
  CI (99.9%): [700434.335, 729726.849] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_detectOptional  thrpt   30  715080.592 ± 14646.257  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1860028.280 ops/s
# Warmup Iteration   2: 4774416.928 ops/s
# Warmup Iteration   3: 4758315.018 ops/s
# Warmup Iteration   4: 3942042.355 ops/s
# Warmup Iteration   5: 5040721.127 ops/s
# Warmup Iteration   6: 5107079.934 ops/s
# Warmup Iteration   7: 4845674.356 ops/s
# Warmup Iteration   8: 4805085.863 ops/s
# Warmup Iteration   9: 4863911.555 ops/s
# Warmup Iteration  10: 4783412.780 ops/s
# Warmup Iteration  11: 4780885.782 ops/s
# Warmup Iteration  12: 4752669.324 ops/s
# Warmup Iteration  13: 4805761.752 ops/s
# Warmup Iteration  14: 4990465.279 ops/s
# Warmup Iteration  15: 5169009.490 ops/s
# Warmup Iteration  16: 4844093.703 ops/s
# Warmup Iteration  17: 4880764.709 ops/s
# Warmup Iteration  18: 5091404.694 ops/s
# Warmup Iteration  19: 4771433.762 ops/s
# Warmup Iteration  20: 4959906.311 ops/s
# Warmup Iteration  21: 5168447.340 ops/s
# Warmup Iteration  22: 5017628.333 ops/s
# Warmup Iteration  23: 5172922.858 ops/s
# Warmup Iteration  24: 4976931.823 ops/s
# Warmup Iteration  25: 5130712.646 ops/s
# Warmup Iteration  26: 4897427.765 ops/s
# Warmup Iteration  27: 4890142.432 ops/s
# Warmup Iteration  28: 4832779.868 ops/s
# Warmup Iteration  29: 4951690.983 ops/s
# Warmup Iteration  30: 4797840.251 ops/s
Iteration   1: 4807237.458 ops/s
Iteration   2: 4724327.529 ops/s
Iteration   3: 4731061.702 ops/s
Iteration   4: 4896454.224 ops/s
Iteration   5: 4802148.616 ops/s
Iteration   6: 5164166.236 ops/s
Iteration   7: 4986267.837 ops/s
Iteration   8: 4700756.935 ops/s
Iteration   9: 4738888.714 ops/s
Iteration  10: 4765554.040 ops/s
Iteration  11: 4834878.979 ops/s
Iteration  12: 4774139.626 ops/s
Iteration  13: 4850218.241 ops/s
Iteration  14: 4741629.563 ops/s
Iteration  15: 4832108.544 ops/s
Iteration  16: 4831941.112 ops/s
Iteration  17: 5169597.293 ops/s
Iteration  18: 5175257.386 ops/s
Iteration  19: 5175780.864 ops/s
Iteration  20: 5177166.359 ops/s
Iteration  21: 5163909.657 ops/s
Iteration  22: 5170935.839 ops/s
Iteration  23: 5173668.533 ops/s
Iteration  24: 5161552.086 ops/s
Iteration  25: 5180401.549 ops/s
Iteration  26: 5184052.499 ops/s
Iteration  27: 5162006.241 ops/s
Iteration  28: 5164112.665 ops/s
Iteration  29: 5183000.769 ops/s
Iteration  30: 5168964.334 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_detectWith":
  4986406.181 ±(99.9%) 130668.663 ops/s [Average]
  (min, avg, max) = (4700756.935, 4986406.181, 5184052.499), stdev = 195578.718
  CI (99.9%): [4855737.518, 5117074.844] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_detectWith  thrpt   30  4986406.181 ± 130668.663  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_detectWithIfNoneBlock$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_detectWithIfNoneBlock

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1915377.045 ops/s
# Warmup Iteration   2: 4439288.929 ops/s
# Warmup Iteration   3: 4404942.454 ops/s
# Warmup Iteration   4: 3582608.088 ops/s
# Warmup Iteration   5: 4358814.526 ops/s
# Warmup Iteration   6: 4353398.318 ops/s
# Warmup Iteration   7: 4338309.635 ops/s
# Warmup Iteration   8: 4330237.548 ops/s
# Warmup Iteration   9: 4301051.225 ops/s
# Warmup Iteration  10: 4333985.882 ops/s
# Warmup Iteration  11: 4363825.709 ops/s
# Warmup Iteration  12: 4602810.688 ops/s
# Warmup Iteration  13: 4538291.207 ops/s
# Warmup Iteration  14: 4526888.887 ops/s
# Warmup Iteration  15: 4368918.786 ops/s
# Warmup Iteration  16: 4345028.757 ops/s
# Warmup Iteration  17: 4365133.566 ops/s
# Warmup Iteration  18: 4423990.606 ops/s
# Warmup Iteration  19: 4398585.511 ops/s
# Warmup Iteration  20: 4392321.262 ops/s
# Warmup Iteration  21: 4388853.498 ops/s
# Warmup Iteration  22: 4417790.430 ops/s
# Warmup Iteration  23: 4400191.422 ops/s
# Warmup Iteration  24: 4370534.932 ops/s
# Warmup Iteration  25: 4461235.904 ops/s
# Warmup Iteration  26: 4432422.191 ops/s
# Warmup Iteration  27: 4367166.764 ops/s
# Warmup Iteration  28: 4444078.439 ops/s
# Warmup Iteration  29: 4477408.693 ops/s
# Warmup Iteration  30: 4421398.912 ops/s
Iteration   1: 4448018.590 ops/s
Iteration   2: 4344440.994 ops/s
Iteration   3: 4377788.142 ops/s
Iteration   4: 4344196.572 ops/s
Iteration   5: 4425244.531 ops/s
Iteration   6: 4532096.187 ops/s
Iteration   7: 4433098.475 ops/s
Iteration   8: 4501382.441 ops/s
Iteration   9: 4491152.982 ops/s
Iteration  10: 4326792.709 ops/s
Iteration  11: 4472465.699 ops/s
Iteration  12: 4461752.148 ops/s
Iteration  13: 4475388.816 ops/s
Iteration  14: 4573102.105 ops/s
Iteration  15: 4439836.635 ops/s
Iteration  16: 4494083.153 ops/s
Iteration  17: 4386968.789 ops/s
Iteration  18: 4459852.187 ops/s
Iteration  19: 4516236.439 ops/s
Iteration  20: 4514633.664 ops/s
Iteration  21: 4442690.188 ops/s
Iteration  22: 4484493.018 ops/s
Iteration  23: 4503174.642 ops/s
Iteration  24: 4558951.647 ops/s
Iteration  25: 4471186.829 ops/s
Iteration  26: 4592163.106 ops/s
Iteration  27: 4679690.117 ops/s
Iteration  28: 4459699.810 ops/s
Iteration  29: 4531783.114 ops/s
Iteration  30: 4505147.972 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_detectWithIfNoneBlock":
  4474917.057 ±(99.9%) 50606.931 ops/s [Average]
  (min, avg, max) = (4326792.709, 4474917.057, 4679690.117), stdev = 75746.077
  CI (99.9%): [4424310.126, 4525523.987] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_detectWithIfNoneBlock  thrpt   30  4474917.057 ± 50606.931  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_detectWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_detectWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1090425.311 ops/s
# Warmup Iteration   2: 3027324.567 ops/s
# Warmup Iteration   3: 3200438.537 ops/s
# Warmup Iteration   4: 2624906.497 ops/s
# Warmup Iteration   5: 3111253.560 ops/s
# Warmup Iteration   6: 3197077.564 ops/s
# Warmup Iteration   7: 3211023.183 ops/s
# Warmup Iteration   8: 3327736.692 ops/s
# Warmup Iteration   9: 3391146.339 ops/s
# Warmup Iteration  10: 3392538.809 ops/s
# Warmup Iteration  11: 3392171.954 ops/s
# Warmup Iteration  12: 3396159.989 ops/s
# Warmup Iteration  13: 3390803.960 ops/s
# Warmup Iteration  14: 3395987.508 ops/s
# Warmup Iteration  15: 3382575.210 ops/s
# Warmup Iteration  16: 3184221.237 ops/s
# Warmup Iteration  17: 3154900.605 ops/s
# Warmup Iteration  18: 3194714.841 ops/s
# Warmup Iteration  19: 3114905.139 ops/s
# Warmup Iteration  20: 3161115.982 ops/s
# Warmup Iteration  21: 3186294.858 ops/s
# Warmup Iteration  22: 3136965.059 ops/s
# Warmup Iteration  23: 3309820.378 ops/s
# Warmup Iteration  24: 3374776.715 ops/s
# Warmup Iteration  25: 3166038.427 ops/s
# Warmup Iteration  26: 3290135.199 ops/s
# Warmup Iteration  27: 3195003.887 ops/s
# Warmup Iteration  28: 3229147.807 ops/s
# Warmup Iteration  29: 3152559.111 ops/s
# Warmup Iteration  30: 3335415.165 ops/s
Iteration   1: 3355153.495 ops/s
Iteration   2: 3173585.723 ops/s
Iteration   3: 3395902.667 ops/s
Iteration   4: 3358189.731 ops/s
Iteration   5: 3141310.664 ops/s
Iteration   6: 3129940.875 ops/s
Iteration   7: 3212853.765 ops/s
Iteration   8: 3247055.367 ops/s
Iteration   9: 3156359.478 ops/s
Iteration  10: 3249209.787 ops/s
Iteration  11: 3391600.712 ops/s
Iteration  12: 3270012.818 ops/s
Iteration  13: 3153592.967 ops/s
Iteration  14: 3236334.459 ops/s
Iteration  15: 3150568.944 ops/s
Iteration  16: 3156544.586 ops/s
Iteration  17: 3139964.873 ops/s
Iteration  18: 3093041.669 ops/s
Iteration  19: 3149739.909 ops/s
Iteration  20: 3125671.913 ops/s
Iteration  21: 3144475.331 ops/s
Iteration  22: 3115577.574 ops/s
Iteration  23: 3148978.065 ops/s
Iteration  24: 3133436.205 ops/s
Iteration  25: 3145567.863 ops/s
Iteration  26: 3195837.120 ops/s
Iteration  27: 3166155.621 ops/s
Iteration  28: 3180066.640 ops/s
Iteration  29: 3189377.698 ops/s
Iteration  30: 3075410.553 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_detectWithOccurrences":
  3192717.236 ±(99.9%) 57064.034 ops/s [Average]
  (min, avg, max) = (3075410.553, 3192717.236, 3395902.667), stdev = 85410.767
  CI (99.9%): [3135653.201, 3249781.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_detectWithOccurrences  thrpt   30  3192717.236 ± 57064.034  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 406257.881 ops/s
# Warmup Iteration   2: 491920.149 ops/s
# Warmup Iteration   3: 662641.159 ops/s
# Warmup Iteration   4: 608039.587 ops/s
# Warmup Iteration   5: 617434.577 ops/s
# Warmup Iteration   6: 611755.723 ops/s
# Warmup Iteration   7: 625071.410 ops/s
# Warmup Iteration   8: 619614.138 ops/s
# Warmup Iteration   9: 558525.885 ops/s
# Warmup Iteration  10: 587424.296 ops/s
# Warmup Iteration  11: 613585.342 ops/s
# Warmup Iteration  12: 627517.608 ops/s
# Warmup Iteration  13: 629186.479 ops/s
# Warmup Iteration  14: 631764.236 ops/s
# Warmup Iteration  15: 630598.759 ops/s
# Warmup Iteration  16: 649756.663 ops/s
# Warmup Iteration  17: 664034.948 ops/s
# Warmup Iteration  18: 654015.525 ops/s
# Warmup Iteration  19: 658807.917 ops/s
# Warmup Iteration  20: 635577.261 ops/s
# Warmup Iteration  21: 659113.002 ops/s
# Warmup Iteration  22: 661159.901 ops/s
# Warmup Iteration  23: 690886.948 ops/s
# Warmup Iteration  24: 690896.834 ops/s
# Warmup Iteration  25: 689791.305 ops/s
# Warmup Iteration  26: 689508.932 ops/s
# Warmup Iteration  27: 690103.719 ops/s
# Warmup Iteration  28: 689399.475 ops/s
# Warmup Iteration  29: 690574.609 ops/s
# Warmup Iteration  30: 672934.818 ops/s
Iteration   1: 642080.570 ops/s
Iteration   2: 651989.262 ops/s
Iteration   3: 642464.615 ops/s
Iteration   4: 657940.817 ops/s
Iteration   5: 633546.376 ops/s
Iteration   6: 648985.330 ops/s
Iteration   7: 632217.095 ops/s
Iteration   8: 644914.004 ops/s
Iteration   9: 690477.588 ops/s
Iteration  10: 682676.229 ops/s
Iteration  11: 681115.419 ops/s
Iteration  12: 624876.087 ops/s
Iteration  13: 680690.409 ops/s
Iteration  14: 689049.745 ops/s
Iteration  15: 648685.112 ops/s
Iteration  16: 650261.317 ops/s
Iteration  17: 661928.472 ops/s
Iteration  18: 656252.236 ops/s
Iteration  19: 638820.943 ops/s
Iteration  20: 629676.402 ops/s
Iteration  21: 636608.569 ops/s
Iteration  22: 629648.546 ops/s
Iteration  23: 655458.768 ops/s
Iteration  24: 646728.913 ops/s
Iteration  25: 635187.470 ops/s
Iteration  26: 649693.680 ops/s
Iteration  27: 626989.901 ops/s
Iteration  28: 659805.996 ops/s
Iteration  29: 688576.282 ops/s
Iteration  30: 676145.201 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_detectWithOptional":
  653116.379 ±(99.9%) 13392.967 ops/s [Average]
  (min, avg, max) = (624876.087, 653116.379, 690477.588), stdev = 20045.963
  CI (99.9%): [639723.412, 666509.345] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_detectWithOptional  thrpt   30  653116.379 ± 13392.967  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_distinctView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_distinctView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1500310.824 ops/s
# Warmup Iteration   2: 2112305.123 ops/s
# Warmup Iteration   3: 2645427.416 ops/s
# Warmup Iteration   4: 2674385.739 ops/s
# Warmup Iteration   5: 2800688.752 ops/s
# Warmup Iteration   6: 2718693.109 ops/s
# Warmup Iteration   7: 2293786.141 ops/s
# Warmup Iteration   8: 2444421.139 ops/s
# Warmup Iteration   9: 2611357.683 ops/s
# Warmup Iteration  10: 2616005.882 ops/s
# Warmup Iteration  11: 2632438.299 ops/s
# Warmup Iteration  12: 2724739.515 ops/s
# Warmup Iteration  13: 2722678.394 ops/s
# Warmup Iteration  14: 2652368.584 ops/s
# Warmup Iteration  15: 2755897.694 ops/s
# Warmup Iteration  16: 2776594.828 ops/s
# Warmup Iteration  17: 2681451.327 ops/s
# Warmup Iteration  18: 2617205.432 ops/s
# Warmup Iteration  19: 2564701.963 ops/s
# Warmup Iteration  20: 2636018.178 ops/s
# Warmup Iteration  21: 2665651.860 ops/s
# Warmup Iteration  22: 2626163.078 ops/s
# Warmup Iteration  23: 2648305.759 ops/s
# Warmup Iteration  24: 2708711.323 ops/s
# Warmup Iteration  25: 2655219.025 ops/s
# Warmup Iteration  26: 2689523.289 ops/s
# Warmup Iteration  27: 2721106.295 ops/s
# Warmup Iteration  28: 2647403.537 ops/s
# Warmup Iteration  29: 2741564.240 ops/s
# Warmup Iteration  30: 2659244.852 ops/s
Iteration   1: 2647116.372 ops/s
Iteration   2: 2650514.237 ops/s
Iteration   3: 2620622.418 ops/s
Iteration   4: 2779038.901 ops/s
Iteration   5: 2777552.180 ops/s
Iteration   6: 2652868.644 ops/s
Iteration   7: 2609671.125 ops/s
Iteration   8: 2647097.717 ops/s
Iteration   9: 2581930.617 ops/s
Iteration  10: 2604455.227 ops/s
Iteration  11: 2574699.903 ops/s
Iteration  12: 2640316.914 ops/s
Iteration  13: 2729338.327 ops/s
Iteration  14: 2807408.341 ops/s
Iteration  15: 2814780.954 ops/s
Iteration  16: 2808962.310 ops/s
Iteration  17: 2815202.907 ops/s
Iteration  18: 2806482.528 ops/s
Iteration  19: 2811128.017 ops/s
Iteration  20: 2805835.993 ops/s
Iteration  21: 2804829.063 ops/s
Iteration  22: 2805715.042 ops/s
Iteration  23: 2812706.563 ops/s
Iteration  24: 2816354.095 ops/s
Iteration  25: 2808051.580 ops/s
Iteration  26: 2806512.440 ops/s
Iteration  27: 2806937.214 ops/s
Iteration  28: 2811023.588 ops/s
Iteration  29: 2653913.972 ops/s
Iteration  30: 2556102.852 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_distinctView":
  2728905.668 ±(99.9%) 63002.293 ops/s [Average]
  (min, avg, max) = (2556102.852, 2728905.668, 2816354.095), stdev = 94298.874
  CI (99.9%): [2665903.375, 2791907.961] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_distinctView  thrpt   30  2728905.668 ± 63002.293  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2744224.016 ops/s
# Warmup Iteration   2: 6474556.094 ops/s
# Warmup Iteration   3: 5139386.427 ops/s
# Warmup Iteration   4: 6223414.363 ops/s
# Warmup Iteration   5: 6366732.054 ops/s
# Warmup Iteration   6: 6261697.573 ops/s
# Warmup Iteration   7: 6262079.938 ops/s
# Warmup Iteration   8: 6330177.688 ops/s
# Warmup Iteration   9: 6434002.655 ops/s
# Warmup Iteration  10: 6220552.725 ops/s
# Warmup Iteration  11: 6321929.159 ops/s
# Warmup Iteration  12: 6222769.641 ops/s
# Warmup Iteration  13: 6597480.878 ops/s
# Warmup Iteration  14: 6642461.998 ops/s
# Warmup Iteration  15: 6477340.993 ops/s
# Warmup Iteration  16: 6494686.111 ops/s
# Warmup Iteration  17: 6509696.362 ops/s
# Warmup Iteration  18: 6487457.097 ops/s
# Warmup Iteration  19: 6659395.362 ops/s
# Warmup Iteration  20: 6645618.983 ops/s
# Warmup Iteration  21: 6341810.737 ops/s
# Warmup Iteration  22: 6508179.874 ops/s
# Warmup Iteration  23: 6267458.035 ops/s
# Warmup Iteration  24: 6532823.366 ops/s
# Warmup Iteration  25: 6282667.038 ops/s
# Warmup Iteration  26: 6372504.834 ops/s
# Warmup Iteration  27: 6190827.296 ops/s
# Warmup Iteration  28: 6324713.774 ops/s
# Warmup Iteration  29: 6486707.919 ops/s
# Warmup Iteration  30: 6371185.874 ops/s
Iteration   1: 6289923.674 ops/s
Iteration   2: 6205014.304 ops/s
Iteration   3: 6417868.680 ops/s
Iteration   4: 6151082.720 ops/s
Iteration   5: 6130486.771 ops/s
Iteration   6: 6284889.720 ops/s
Iteration   7: 6202562.245 ops/s
Iteration   8: 6391937.996 ops/s
Iteration   9: 6273747.828 ops/s
Iteration  10: 6339566.522 ops/s
Iteration  11: 6213799.833 ops/s
Iteration  12: 6204706.503 ops/s
Iteration  13: 6239494.756 ops/s
Iteration  14: 6153027.162 ops/s
Iteration  15: 6326536.790 ops/s
Iteration  16: 6230505.883 ops/s
Iteration  17: 6163818.306 ops/s
Iteration  18: 6256464.628 ops/s
Iteration  19: 6324731.693 ops/s
Iteration  20: 6245620.359 ops/s
Iteration  21: 6152054.971 ops/s
Iteration  22: 6426854.653 ops/s
Iteration  23: 6544257.802 ops/s
Iteration  24: 6579346.022 ops/s
Iteration  25: 6550214.850 ops/s
Iteration  26: 6175797.615 ops/s
Iteration  27: 6120055.791 ops/s
Iteration  28: 6271614.293 ops/s
Iteration  29: 6174691.750 ops/s
Iteration  30: 6352402.834 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_empty":
  6279769.232 ±(99.9%) 84029.874 ops/s [Average]
  (min, avg, max) = (6120055.791, 6279769.232, 6579346.022), stdev = 125771.969
  CI (99.9%): [6195739.358, 6363799.106] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_empty  thrpt   30  6279769.232 ± 84029.874  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 207913.480 ops/s
# Warmup Iteration   2: 415500.091 ops/s
# Warmup Iteration   3: 456836.169 ops/s
# Warmup Iteration   4: 476790.581 ops/s
# Warmup Iteration   5: 394526.511 ops/s
# Warmup Iteration   6: 487403.803 ops/s
# Warmup Iteration   7: 490370.728 ops/s
# Warmup Iteration   8: 490276.076 ops/s
# Warmup Iteration   9: 490478.159 ops/s
# Warmup Iteration  10: 490027.120 ops/s
# Warmup Iteration  11: 488708.694 ops/s
# Warmup Iteration  12: 488348.917 ops/s
# Warmup Iteration  13: 485929.098 ops/s
# Warmup Iteration  14: 475648.816 ops/s
# Warmup Iteration  15: 458661.889 ops/s
# Warmup Iteration  16: 457268.786 ops/s
# Warmup Iteration  17: 460922.876 ops/s
# Warmup Iteration  18: 463723.566 ops/s
# Warmup Iteration  19: 464895.845 ops/s
# Warmup Iteration  20: 473474.884 ops/s
# Warmup Iteration  21: 487480.084 ops/s
# Warmup Iteration  22: 457457.200 ops/s
# Warmup Iteration  23: 470463.318 ops/s
# Warmup Iteration  24: 464888.857 ops/s
# Warmup Iteration  25: 450267.596 ops/s
# Warmup Iteration  26: 461836.260 ops/s
# Warmup Iteration  27: 453192.387 ops/s
# Warmup Iteration  28: 462423.564 ops/s
# Warmup Iteration  29: 454211.429 ops/s
# Warmup Iteration  30: 453371.455 ops/s
Iteration   1: 454534.933 ops/s
Iteration   2: 464253.864 ops/s
Iteration   3: 452118.837 ops/s
Iteration   4: 452092.438 ops/s
Iteration   5: 451103.126 ops/s
Iteration   6: 454654.233 ops/s
Iteration   7: 457594.837 ops/s
Iteration   8: 454656.292 ops/s
Iteration   9: 464869.007 ops/s
Iteration  10: 455269.669 ops/s
Iteration  11: 453489.068 ops/s
Iteration  12: 456633.084 ops/s
Iteration  13: 464665.330 ops/s
Iteration  14: 462102.045 ops/s
Iteration  15: 455430.078 ops/s
Iteration  16: 453697.946 ops/s
Iteration  17: 453505.255 ops/s
Iteration  18: 467507.325 ops/s
Iteration  19: 489116.473 ops/s
Iteration  20: 475881.504 ops/s
Iteration  21: 453102.028 ops/s
Iteration  22: 448978.014 ops/s
Iteration  23: 454566.368 ops/s
Iteration  24: 449680.593 ops/s
Iteration  25: 455474.755 ops/s
Iteration  26: 450204.434 ops/s
Iteration  27: 463552.218 ops/s
Iteration  28: 463050.068 ops/s
Iteration  29: 487596.678 ops/s
Iteration  30: 459745.658 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_equalsAndHashCode":
  459304.205 ±(99.9%) 6670.009 ops/s [Average]
  (min, avg, max) = (448978.014, 459304.205, 489116.473), stdev = 9983.357
  CI (99.9%): [452634.196, 465974.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  459304.205 ± 6670.009  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_equals_with_hashing_strategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_equals_with_hashing_strategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 228922.167 ops/s
# Warmup Iteration   2: 461608.926 ops/s
# Warmup Iteration   3: 515360.425 ops/s
# Warmup Iteration   4: 523091.627 ops/s
# Warmup Iteration   5: 535847.414 ops/s
# Warmup Iteration   6: 439423.108 ops/s
# Warmup Iteration   7: 560003.587 ops/s
# Warmup Iteration   8: 557843.043 ops/s
# Warmup Iteration   9: 538353.855 ops/s
# Warmup Iteration  10: 532749.544 ops/s
# Warmup Iteration  11: 539844.445 ops/s
# Warmup Iteration  12: 529677.330 ops/s
# Warmup Iteration  13: 521434.822 ops/s
# Warmup Iteration  14: 525051.632 ops/s
# Warmup Iteration  15: 521215.398 ops/s
# Warmup Iteration  16: 558302.967 ops/s
# Warmup Iteration  17: 535599.779 ops/s
# Warmup Iteration  18: 519567.382 ops/s
# Warmup Iteration  19: 527741.923 ops/s
# Warmup Iteration  20: 540129.070 ops/s
# Warmup Iteration  21: 563612.500 ops/s
# Warmup Iteration  22: 563643.530 ops/s
# Warmup Iteration  23: 564342.013 ops/s
# Warmup Iteration  24: 563248.430 ops/s
# Warmup Iteration  25: 563515.917 ops/s
# Warmup Iteration  26: 563730.301 ops/s
# Warmup Iteration  27: 563962.807 ops/s
# Warmup Iteration  28: 561290.978 ops/s
# Warmup Iteration  29: 537655.295 ops/s
# Warmup Iteration  30: 536619.447 ops/s
Iteration   1: 541935.359 ops/s
Iteration   2: 531408.754 ops/s
Iteration   3: 529782.867 ops/s
Iteration   4: 539031.665 ops/s
Iteration   5: 553775.485 ops/s
Iteration   6: 527661.504 ops/s
Iteration   7: 526362.806 ops/s
Iteration   8: 518203.504 ops/s
Iteration   9: 521972.749 ops/s
Iteration  10: 522719.684 ops/s
Iteration  11: 523557.328 ops/s
Iteration  12: 521118.572 ops/s
Iteration  13: 521856.294 ops/s
Iteration  14: 536615.686 ops/s
Iteration  15: 531500.002 ops/s
Iteration  16: 528248.513 ops/s
Iteration  17: 527376.035 ops/s
Iteration  18: 523587.252 ops/s
Iteration  19: 524868.436 ops/s
Iteration  20: 529283.361 ops/s
Iteration  21: 534056.448 ops/s
Iteration  22: 549205.591 ops/s
Iteration  23: 561971.117 ops/s
Iteration  24: 542037.009 ops/s
Iteration  25: 526230.578 ops/s
Iteration  26: 510220.695 ops/s
Iteration  27: 538485.679 ops/s
Iteration  28: 532645.486 ops/s
Iteration  29: 523718.790 ops/s
Iteration  30: 522249.159 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_equals_with_hashing_strategy":
  530722.880 ±(99.9%) 7337.620 ops/s [Average]
  (min, avg, max) = (510220.695, 530722.880, 561971.117), stdev = 10982.605
  CI (99.9%): [523385.261, 538060.500] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_equals_with_hashing_strategy  thrpt   30  530722.880 ± 7337.620  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 453057.975 ops/s
# Warmup Iteration   2: 964482.556 ops/s
# Warmup Iteration   3: 1074080.822 ops/s
# Warmup Iteration   4: 1082945.870 ops/s
# Warmup Iteration   5: 890657.036 ops/s
# Warmup Iteration   6: 1138153.326 ops/s
# Warmup Iteration   7: 1066355.097 ops/s
# Warmup Iteration   8: 1070773.110 ops/s
# Warmup Iteration   9: 1075926.690 ops/s
# Warmup Iteration  10: 1092866.606 ops/s
# Warmup Iteration  11: 1088054.560 ops/s
# Warmup Iteration  12: 1099472.635 ops/s
# Warmup Iteration  13: 1104972.838 ops/s
# Warmup Iteration  14: 1121069.995 ops/s
# Warmup Iteration  15: 1079984.251 ops/s
# Warmup Iteration  16: 1090813.854 ops/s
# Warmup Iteration  17: 1070533.911 ops/s
# Warmup Iteration  18: 1103354.106 ops/s
# Warmup Iteration  19: 1146149.326 ops/s
# Warmup Iteration  20: 1075511.313 ops/s
# Warmup Iteration  21: 1076564.925 ops/s
# Warmup Iteration  22: 1093952.610 ops/s
# Warmup Iteration  23: 1141860.092 ops/s
# Warmup Iteration  24: 1077745.701 ops/s
# Warmup Iteration  25: 1067135.639 ops/s
# Warmup Iteration  26: 1102602.562 ops/s
# Warmup Iteration  27: 1066460.745 ops/s
# Warmup Iteration  28: 1076761.070 ops/s
# Warmup Iteration  29: 1098112.857 ops/s
# Warmup Iteration  30: 1091059.685 ops/s
Iteration   1: 1107653.076 ops/s
Iteration   2: 1062046.380 ops/s
Iteration   3: 1075485.133 ops/s
Iteration   4: 1073537.519 ops/s
Iteration   5: 1130517.756 ops/s
Iteration   6: 1149971.983 ops/s
Iteration   7: 1102051.532 ops/s
Iteration   8: 1088441.617 ops/s
Iteration   9: 1158446.469 ops/s
Iteration  10: 1159979.584 ops/s
Iteration  11: 1158443.342 ops/s
Iteration  12: 1160571.110 ops/s
Iteration  13: 1157074.817 ops/s
Iteration  14: 1158313.718 ops/s
Iteration  15: 1159256.318 ops/s
Iteration  16: 1160151.468 ops/s
Iteration  17: 1161512.539 ops/s
Iteration  18: 1155978.853 ops/s
Iteration  19: 1157086.456 ops/s
Iteration  20: 1156022.978 ops/s
Iteration  21: 1157880.792 ops/s
Iteration  22: 1156575.941 ops/s
Iteration  23: 1156385.260 ops/s
Iteration  24: 1157339.405 ops/s
Iteration  25: 1150397.935 ops/s
Iteration  26: 1057812.311 ops/s
Iteration  27: 1098422.346 ops/s
Iteration  28: 1071735.631 ops/s
Iteration  29: 1085922.613 ops/s
Iteration  30: 1099956.845 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollect":
  1129499.058 ±(99.9%) 24750.555 ops/s [Average]
  (min, avg, max) = (1057812.311, 1129499.058, 1161512.539), stdev = 37045.468
  CI (99.9%): [1104748.503, 1154249.612] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollect  thrpt   30  1129499.058 ± 24750.555  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1362849.775 ops/s
# Warmup Iteration   2: 3089073.253 ops/s
# Warmup Iteration   3: 3216227.138 ops/s
# Warmup Iteration   4: 3049267.310 ops/s
# Warmup Iteration   5: 2841902.816 ops/s
# Warmup Iteration   6: 3283798.002 ops/s
# Warmup Iteration   7: 3265476.745 ops/s
# Warmup Iteration   8: 3310152.155 ops/s
# Warmup Iteration   9: 3345296.598 ops/s
# Warmup Iteration  10: 3268528.370 ops/s
# Warmup Iteration  11: 3193006.164 ops/s
# Warmup Iteration  12: 3260401.598 ops/s
# Warmup Iteration  13: 3140052.935 ops/s
# Warmup Iteration  14: 3170730.084 ops/s
# Warmup Iteration  15: 3121382.258 ops/s
# Warmup Iteration  16: 3161446.618 ops/s
# Warmup Iteration  17: 3133428.662 ops/s
# Warmup Iteration  18: 3148353.824 ops/s
# Warmup Iteration  19: 3203694.583 ops/s
# Warmup Iteration  20: 3203363.363 ops/s
# Warmup Iteration  21: 3389472.494 ops/s
# Warmup Iteration  22: 3276765.686 ops/s
# Warmup Iteration  23: 3152402.599 ops/s
# Warmup Iteration  24: 3186639.227 ops/s
# Warmup Iteration  25: 3297265.843 ops/s
# Warmup Iteration  26: 3173921.314 ops/s
# Warmup Iteration  27: 3151718.154 ops/s
# Warmup Iteration  28: 3129062.578 ops/s
# Warmup Iteration  29: 3205121.746 ops/s
# Warmup Iteration  30: 3220823.566 ops/s
Iteration   1: 3111404.210 ops/s
Iteration   2: 3284282.430 ops/s
Iteration   3: 3196185.834 ops/s
Iteration   4: 3151030.400 ops/s
Iteration   5: 3318815.400 ops/s
Iteration   6: 3221454.947 ops/s
Iteration   7: 3268799.266 ops/s
Iteration   8: 3392993.102 ops/s
Iteration   9: 3397151.101 ops/s
Iteration  10: 3371773.794 ops/s
Iteration  11: 3116808.624 ops/s
Iteration  12: 3352993.911 ops/s
Iteration  13: 3267960.720 ops/s
Iteration  14: 3145541.443 ops/s
Iteration  15: 3251915.793 ops/s
Iteration  16: 3160334.110 ops/s
Iteration  17: 3121533.345 ops/s
Iteration  18: 3122252.573 ops/s
Iteration  19: 3143713.953 ops/s
Iteration  20: 3267872.937 ops/s
Iteration  21: 3256342.780 ops/s
Iteration  22: 3181632.360 ops/s
Iteration  23: 3179480.342 ops/s
Iteration  24: 3200527.135 ops/s
Iteration  25: 3164597.977 ops/s
Iteration  26: 3228654.364 ops/s
Iteration  27: 3233859.803 ops/s
Iteration  28: 3193643.272 ops/s
Iteration  29: 3223766.923 ops/s
Iteration  30: 3129298.925 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectBoolean":
  3221887.392 ±(99.9%) 55876.433 ops/s [Average]
  (min, avg, max) = (3111404.210, 3221887.392, 3397151.101), stdev = 83633.220
  CI (99.9%): [3166010.960, 3277763.825] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectBoolean  thrpt   30  3221887.392 ± 55876.433  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 616511.951 ops/s
# Warmup Iteration   2: 987032.057 ops/s
# Warmup Iteration   3: 1141196.879 ops/s
# Warmup Iteration   4: 1221877.481 ops/s
# Warmup Iteration   5: 1219888.518 ops/s
# Warmup Iteration   6: 1012571.785 ops/s
# Warmup Iteration   7: 1220202.539 ops/s
# Warmup Iteration   8: 1220927.474 ops/s
# Warmup Iteration   9: 1222455.187 ops/s
# Warmup Iteration  10: 1222440.834 ops/s
# Warmup Iteration  11: 1204935.672 ops/s
# Warmup Iteration  12: 1117236.885 ops/s
# Warmup Iteration  13: 1132318.570 ops/s
# Warmup Iteration  14: 1127470.607 ops/s
# Warmup Iteration  15: 1124982.688 ops/s
# Warmup Iteration  16: 1143250.348 ops/s
# Warmup Iteration  17: 1136807.223 ops/s
# Warmup Iteration  18: 1215771.953 ops/s
# Warmup Iteration  19: 1138634.902 ops/s
# Warmup Iteration  20: 1143624.369 ops/s
# Warmup Iteration  21: 1151868.489 ops/s
# Warmup Iteration  22: 1121999.442 ops/s
# Warmup Iteration  23: 1139583.781 ops/s
# Warmup Iteration  24: 1157891.108 ops/s
# Warmup Iteration  25: 1156547.916 ops/s
# Warmup Iteration  26: 1113595.998 ops/s
# Warmup Iteration  27: 1126370.562 ops/s
# Warmup Iteration  28: 1124295.258 ops/s
# Warmup Iteration  29: 1139979.613 ops/s
# Warmup Iteration  30: 1138658.527 ops/s
Iteration   1: 1169932.385 ops/s
Iteration   2: 1121302.793 ops/s
Iteration   3: 1115381.831 ops/s
Iteration   4: 1126905.577 ops/s
Iteration   5: 1127317.518 ops/s
Iteration   6: 1148282.017 ops/s
Iteration   7: 1145843.170 ops/s
Iteration   8: 1113653.822 ops/s
Iteration   9: 1141354.890 ops/s
Iteration  10: 1132079.050 ops/s
Iteration  11: 1135597.376 ops/s
Iteration  12: 1139909.584 ops/s
Iteration  13: 1122772.168 ops/s
Iteration  14: 1137310.951 ops/s
Iteration  15: 1150616.516 ops/s
Iteration  16: 1151395.512 ops/s
Iteration  17: 1131781.533 ops/s
Iteration  18: 1120896.006 ops/s
Iteration  19: 1129242.733 ops/s
Iteration  20: 1119191.145 ops/s
Iteration  21: 1216164.776 ops/s
Iteration  22: 1168356.179 ops/s
Iteration  23: 1123626.307 ops/s
Iteration  24: 1127739.492 ops/s
Iteration  25: 1138693.244 ops/s
Iteration  26: 1133597.153 ops/s
Iteration  27: 1139655.342 ops/s
Iteration  28: 1129841.826 ops/s
Iteration  29: 1132075.745 ops/s
Iteration  30: 1109877.269 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectByte":
  1136679.797 ±(99.9%) 13816.228 ops/s [Average]
  (min, avg, max) = (1109877.269, 1136679.797, 1216164.776), stdev = 20679.481
  CI (99.9%): [1122863.569, 1150496.024] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectByte  thrpt   30  1136679.797 ± 13816.228  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 786572.758 ops/s
# Warmup Iteration   2: 1972537.298 ops/s
# Warmup Iteration   3: 2063041.238 ops/s
# Warmup Iteration   4: 1665438.405 ops/s
# Warmup Iteration   5: 2056963.381 ops/s
# Warmup Iteration   6: 2053562.238 ops/s
# Warmup Iteration   7: 2032729.880 ops/s
# Warmup Iteration   8: 2041540.166 ops/s
# Warmup Iteration   9: 2064793.730 ops/s
# Warmup Iteration  10: 2112555.820 ops/s
# Warmup Iteration  11: 2049890.870 ops/s
# Warmup Iteration  12: 2160024.427 ops/s
# Warmup Iteration  13: 2098915.345 ops/s
# Warmup Iteration  14: 2043779.707 ops/s
# Warmup Iteration  15: 2034312.231 ops/s
# Warmup Iteration  16: 2041780.833 ops/s
# Warmup Iteration  17: 2038740.029 ops/s
# Warmup Iteration  18: 2153926.279 ops/s
# Warmup Iteration  19: 2204077.878 ops/s
# Warmup Iteration  20: 2201843.362 ops/s
# Warmup Iteration  21: 2203567.466 ops/s
# Warmup Iteration  22: 2202390.706 ops/s
# Warmup Iteration  23: 2203872.215 ops/s
# Warmup Iteration  24: 2203329.638 ops/s
# Warmup Iteration  25: 2203144.459 ops/s
# Warmup Iteration  26: 2102430.785 ops/s
# Warmup Iteration  27: 2072692.900 ops/s
# Warmup Iteration  28: 2049442.943 ops/s
# Warmup Iteration  29: 2043004.508 ops/s
# Warmup Iteration  30: 2159231.689 ops/s
Iteration   1: 2053467.114 ops/s
Iteration   2: 2085756.217 ops/s
Iteration   3: 2091378.085 ops/s
Iteration   4: 2047489.812 ops/s
Iteration   5: 2032114.650 ops/s
Iteration   6: 2068499.899 ops/s
Iteration   7: 2027905.796 ops/s
Iteration   8: 2201484.076 ops/s
Iteration   9: 2143836.991 ops/s
Iteration  10: 2110896.669 ops/s
Iteration  11: 2104138.567 ops/s
Iteration  12: 2037151.558 ops/s
Iteration  13: 2045049.358 ops/s
Iteration  14: 2110544.364 ops/s
Iteration  15: 2059668.261 ops/s
Iteration  16: 2052798.287 ops/s
Iteration  17: 2044597.273 ops/s
Iteration  18: 2002511.040 ops/s
Iteration  19: 2077647.805 ops/s
Iteration  20: 2045797.865 ops/s
Iteration  21: 2025138.460 ops/s
Iteration  22: 2086325.721 ops/s
Iteration  23: 2041563.605 ops/s
Iteration  24: 2081566.044 ops/s
Iteration  25: 2104282.878 ops/s
Iteration  26: 2097403.359 ops/s
Iteration  27: 2071114.930 ops/s
Iteration  28: 2083991.540 ops/s
Iteration  29: 2095093.700 ops/s
Iteration  30: 2100445.318 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectChar":
  2074321.975 ±(99.9%) 26668.606 ops/s [Average]
  (min, avg, max) = (2002511.040, 2074321.975, 2201484.076), stdev = 39916.316
  CI (99.9%): [2047653.369, 2100990.580] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectChar  thrpt   30  2074321.975 ± 26668.606  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 398504.939 ops/s
# Warmup Iteration   2: 874062.817 ops/s
# Warmup Iteration   3: 904877.353 ops/s
# Warmup Iteration   4: 823468.732 ops/s
# Warmup Iteration   5: 857357.398 ops/s
# Warmup Iteration   6: 940980.944 ops/s
# Warmup Iteration   7: 953189.145 ops/s
# Warmup Iteration   8: 920568.765 ops/s
# Warmup Iteration   9: 934336.286 ops/s
# Warmup Iteration  10: 909154.169 ops/s
# Warmup Iteration  11: 915305.617 ops/s
# Warmup Iteration  12: 902637.101 ops/s
# Warmup Iteration  13: 929213.890 ops/s
# Warmup Iteration  14: 893577.597 ops/s
# Warmup Iteration  15: 907872.157 ops/s
# Warmup Iteration  16: 910050.032 ops/s
# Warmup Iteration  17: 914916.529 ops/s
# Warmup Iteration  18: 925441.985 ops/s
# Warmup Iteration  19: 896801.110 ops/s
# Warmup Iteration  20: 901495.580 ops/s
# Warmup Iteration  21: 905847.589 ops/s
# Warmup Iteration  22: 942123.830 ops/s
# Warmup Iteration  23: 929540.396 ops/s
# Warmup Iteration  24: 966796.442 ops/s
# Warmup Iteration  25: 908220.019 ops/s
# Warmup Iteration  26: 909890.403 ops/s
# Warmup Iteration  27: 970627.256 ops/s
# Warmup Iteration  28: 950837.088 ops/s
# Warmup Iteration  29: 896640.742 ops/s
# Warmup Iteration  30: 942915.596 ops/s
Iteration   1: 921148.464 ops/s
Iteration   2: 919166.616 ops/s
Iteration   3: 937495.450 ops/s
Iteration   4: 943093.767 ops/s
Iteration   5: 976074.274 ops/s
Iteration   6: 977698.325 ops/s
Iteration   7: 975620.072 ops/s
Iteration   8: 975889.237 ops/s
Iteration   9: 974889.573 ops/s
Iteration  10: 974804.739 ops/s
Iteration  11: 977566.856 ops/s
Iteration  12: 977872.938 ops/s
Iteration  13: 976625.668 ops/s
Iteration  14: 975554.384 ops/s
Iteration  15: 977304.326 ops/s
Iteration  16: 971558.602 ops/s
Iteration  17: 973615.174 ops/s
Iteration  18: 971613.361 ops/s
Iteration  19: 970739.232 ops/s
Iteration  20: 953390.543 ops/s
Iteration  21: 937876.042 ops/s
Iteration  22: 922396.805 ops/s
Iteration  23: 964657.677 ops/s
Iteration  24: 960665.596 ops/s
Iteration  25: 970703.837 ops/s
Iteration  26: 931595.769 ops/s
Iteration  27: 912559.976 ops/s
Iteration  28: 931416.878 ops/s
Iteration  29: 895134.706 ops/s
Iteration  30: 894511.197 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectDouble":
  954108.003 ±(99.9%) 17938.538 ops/s [Average]
  (min, avg, max) = (894511.197, 954108.003, 977872.938), stdev = 26849.561
  CI (99.9%): [936169.465, 972046.541] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectDouble  thrpt   30  954108.003 ± 17938.538  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 699086.224 ops/s
# Warmup Iteration   2: 1547497.611 ops/s
# Warmup Iteration   3: 1615175.980 ops/s
# Warmup Iteration   4: 1497505.892 ops/s
# Warmup Iteration   5: 1416619.027 ops/s
# Warmup Iteration   6: 1608500.019 ops/s
# Warmup Iteration   7: 1665204.078 ops/s
# Warmup Iteration   8: 1697504.836 ops/s
# Warmup Iteration   9: 1698343.132 ops/s
# Warmup Iteration  10: 1698343.368 ops/s
# Warmup Iteration  11: 1696549.027 ops/s
# Warmup Iteration  12: 1700336.449 ops/s
# Warmup Iteration  13: 1697631.792 ops/s
# Warmup Iteration  14: 1693632.811 ops/s
# Warmup Iteration  15: 1695544.008 ops/s
# Warmup Iteration  16: 1682290.122 ops/s
# Warmup Iteration  17: 1698342.411 ops/s
# Warmup Iteration  18: 1669825.405 ops/s
# Warmup Iteration  19: 1693882.569 ops/s
# Warmup Iteration  20: 1669717.192 ops/s
# Warmup Iteration  21: 1686117.218 ops/s
# Warmup Iteration  22: 1676470.902 ops/s
# Warmup Iteration  23: 1661777.222 ops/s
# Warmup Iteration  24: 1666742.353 ops/s
# Warmup Iteration  25: 1664866.471 ops/s
# Warmup Iteration  26: 1681728.244 ops/s
# Warmup Iteration  27: 1664492.100 ops/s
# Warmup Iteration  28: 1659268.124 ops/s
# Warmup Iteration  29: 1662560.372 ops/s
# Warmup Iteration  30: 1689508.688 ops/s
Iteration   1: 1676820.826 ops/s
Iteration   2: 1678577.804 ops/s
Iteration   3: 1692898.394 ops/s
Iteration   4: 1683472.329 ops/s
Iteration   5: 1695095.466 ops/s
Iteration   6: 1697857.445 ops/s
Iteration   7: 1689636.708 ops/s
Iteration   8: 1693977.559 ops/s
Iteration   9: 1696079.601 ops/s
Iteration  10: 1695809.681 ops/s
Iteration  11: 1695795.105 ops/s
Iteration  12: 1698430.755 ops/s
Iteration  13: 1695229.507 ops/s
Iteration  14: 1675756.593 ops/s
Iteration  15: 1689780.222 ops/s
Iteration  16: 1694138.158 ops/s
Iteration  17: 1696725.677 ops/s
Iteration  18: 1668880.223 ops/s
Iteration  19: 1688924.110 ops/s
Iteration  20: 1670990.769 ops/s
Iteration  21: 1653159.991 ops/s
Iteration  22: 1677860.584 ops/s
Iteration  23: 1657586.536 ops/s
Iteration  24: 1683435.333 ops/s
Iteration  25: 1693461.181 ops/s
Iteration  26: 1672751.637 ops/s
Iteration  27: 1644805.963 ops/s
Iteration  28: 1664762.039 ops/s
Iteration  29: 1649943.751 ops/s
Iteration  30: 1642547.322 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectFloat":
  1680506.376 ±(99.9%) 11421.433 ops/s [Average]
  (min, avg, max) = (1642547.322, 1680506.376, 1698430.755), stdev = 17095.065
  CI (99.9%): [1669084.943, 1691927.809] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectFloat  thrpt   30  1680506.376 ± 11421.433  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 849639.283 ops/s
# Warmup Iteration   2: 2172931.635 ops/s
# Warmup Iteration   3: 2211039.934 ops/s
# Warmup Iteration   4: 1855871.856 ops/s
# Warmup Iteration   5: 2232705.777 ops/s
# Warmup Iteration   6: 2216524.166 ops/s
# Warmup Iteration   7: 2209802.195 ops/s
# Warmup Iteration   8: 2227581.078 ops/s
# Warmup Iteration   9: 2216478.284 ops/s
# Warmup Iteration  10: 2192291.842 ops/s
# Warmup Iteration  11: 2184652.691 ops/s
# Warmup Iteration  12: 2185979.461 ops/s
# Warmup Iteration  13: 2214690.779 ops/s
# Warmup Iteration  14: 2198349.175 ops/s
# Warmup Iteration  15: 2188171.211 ops/s
# Warmup Iteration  16: 2210432.863 ops/s
# Warmup Iteration  17: 2200477.739 ops/s
# Warmup Iteration  18: 2191649.645 ops/s
# Warmup Iteration  19: 2207693.995 ops/s
# Warmup Iteration  20: 2205669.792 ops/s
# Warmup Iteration  21: 2217187.057 ops/s
# Warmup Iteration  22: 2229505.442 ops/s
# Warmup Iteration  23: 2230799.658 ops/s
# Warmup Iteration  24: 2211728.819 ops/s
# Warmup Iteration  25: 2254602.645 ops/s
# Warmup Iteration  26: 2224165.070 ops/s
# Warmup Iteration  27: 2198354.178 ops/s
# Warmup Iteration  28: 2247400.294 ops/s
# Warmup Iteration  29: 2233622.304 ops/s
# Warmup Iteration  30: 2206490.381 ops/s
Iteration   1: 2180920.850 ops/s
Iteration   2: 2176138.513 ops/s
Iteration   3: 2209607.379 ops/s
Iteration   4: 2206911.897 ops/s
Iteration   5: 2174123.779 ops/s
Iteration   6: 2207788.544 ops/s
Iteration   7: 2194556.575 ops/s
Iteration   8: 2225020.786 ops/s
Iteration   9: 2209605.430 ops/s
Iteration  10: 2216138.455 ops/s
Iteration  11: 2207236.218 ops/s
Iteration  12: 2207708.118 ops/s
Iteration  13: 2211834.492 ops/s
Iteration  14: 2209456.735 ops/s
Iteration  15: 2215641.101 ops/s
Iteration  16: 2204252.449 ops/s
Iteration  17: 2197871.949 ops/s
Iteration  18: 2245859.327 ops/s
Iteration  19: 2258161.969 ops/s
Iteration  20: 2251371.083 ops/s
Iteration  21: 2259806.989 ops/s
Iteration  22: 2260964.256 ops/s
Iteration  23: 2259209.289 ops/s
Iteration  24: 2258711.720 ops/s
Iteration  25: 2249953.260 ops/s
Iteration  26: 2253443.380 ops/s
Iteration  27: 2259288.207 ops/s
Iteration  28: 2259638.661 ops/s
Iteration  29: 2258552.824 ops/s
Iteration  30: 2257382.418 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectInt":
  2226238.555 ±(99.9%) 19332.930 ops/s [Average]
  (min, avg, max) = (2174123.779, 2226238.555, 2260964.256), stdev = 28936.621
  CI (99.9%): [2206905.625, 2245571.485] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectInt  thrpt   30  2226238.555 ± 19332.930  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 697760.372 ops/s
# Warmup Iteration   2: 1801151.184 ops/s
# Warmup Iteration   3: 1664203.883 ops/s
# Warmup Iteration   4: 1640781.980 ops/s
# Warmup Iteration   5: 1700942.709 ops/s
# Warmup Iteration   6: 1711734.767 ops/s
# Warmup Iteration   7: 1759245.629 ops/s
# Warmup Iteration   8: 1709920.442 ops/s
# Warmup Iteration   9: 1753439.598 ops/s
# Warmup Iteration  10: 1712511.330 ops/s
# Warmup Iteration  11: 1704868.307 ops/s
# Warmup Iteration  12: 1793468.309 ops/s
# Warmup Iteration  13: 1709278.526 ops/s
# Warmup Iteration  14: 1723422.192 ops/s
# Warmup Iteration  15: 1710101.769 ops/s
# Warmup Iteration  16: 1787039.911 ops/s
# Warmup Iteration  17: 1824381.132 ops/s
# Warmup Iteration  18: 1823312.678 ops/s
# Warmup Iteration  19: 1818261.960 ops/s
# Warmup Iteration  20: 1822073.027 ops/s
# Warmup Iteration  21: 1821749.068 ops/s
# Warmup Iteration  22: 1824612.204 ops/s
# Warmup Iteration  23: 1820567.615 ops/s
# Warmup Iteration  24: 1738547.796 ops/s
# Warmup Iteration  25: 1695578.168 ops/s
# Warmup Iteration  26: 1703623.817 ops/s
# Warmup Iteration  27: 1699489.508 ops/s
# Warmup Iteration  28: 1695851.448 ops/s
# Warmup Iteration  29: 1728331.472 ops/s
# Warmup Iteration  30: 1708187.710 ops/s
Iteration   1: 1748019.154 ops/s
Iteration   2: 1741490.748 ops/s
Iteration   3: 1723191.365 ops/s
Iteration   4: 1731348.915 ops/s
Iteration   5: 1766979.969 ops/s
Iteration   6: 1820356.335 ops/s
Iteration   7: 1760080.040 ops/s
Iteration   8: 1716790.579 ops/s
Iteration   9: 1731603.218 ops/s
Iteration  10: 1705577.727 ops/s
Iteration  11: 1706717.936 ops/s
Iteration  12: 1683063.140 ops/s
Iteration  13: 1708662.937 ops/s
Iteration  14: 1675198.200 ops/s
Iteration  15: 1675009.090 ops/s
Iteration  16: 1707732.761 ops/s
Iteration  17: 1681251.556 ops/s
Iteration  18: 1784924.060 ops/s
Iteration  19: 1662785.405 ops/s
Iteration  20: 1745472.427 ops/s
Iteration  21: 1703030.669 ops/s
Iteration  22: 1698757.950 ops/s
Iteration  23: 1661101.099 ops/s
Iteration  24: 1663514.677 ops/s
Iteration  25: 1668715.589 ops/s
Iteration  26: 1691688.201 ops/s
Iteration  27: 1680397.912 ops/s
Iteration  28: 1704248.211 ops/s
Iteration  29: 1682178.845 ops/s
Iteration  30: 1692636.279 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectLong":
  1710750.833 ±(99.9%) 25838.275 ops/s [Average]
  (min, avg, max) = (1661101.099, 1710750.833, 1820356.335), stdev = 38673.517
  CI (99.9%): [1684912.558, 1736589.109] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectLong  thrpt   30  1710750.833 ± 25838.275  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 783592.095 ops/s
# Warmup Iteration   2: 1838165.118 ops/s
# Warmup Iteration   3: 1891229.674 ops/s
# Warmup Iteration   4: 1581994.992 ops/s
# Warmup Iteration   5: 1770644.627 ops/s
# Warmup Iteration   6: 1824377.018 ops/s
# Warmup Iteration   7: 1843983.287 ops/s
# Warmup Iteration   8: 1829357.168 ops/s
# Warmup Iteration   9: 1846100.217 ops/s
# Warmup Iteration  10: 1864293.213 ops/s
# Warmup Iteration  11: 1843130.226 ops/s
# Warmup Iteration  12: 1933449.248 ops/s
# Warmup Iteration  13: 1831739.498 ops/s
# Warmup Iteration  14: 1935802.765 ops/s
# Warmup Iteration  15: 1851761.820 ops/s
# Warmup Iteration  16: 1888217.406 ops/s
# Warmup Iteration  17: 1926588.378 ops/s
# Warmup Iteration  18: 1915541.540 ops/s
# Warmup Iteration  19: 1948837.443 ops/s
# Warmup Iteration  20: 1868331.905 ops/s
# Warmup Iteration  21: 1925619.292 ops/s
# Warmup Iteration  22: 1999040.833 ops/s
# Warmup Iteration  23: 1832912.510 ops/s
# Warmup Iteration  24: 1971844.968 ops/s
# Warmup Iteration  25: 1955609.179 ops/s
# Warmup Iteration  26: 1847162.768 ops/s
# Warmup Iteration  27: 1868365.695 ops/s
# Warmup Iteration  28: 1995871.214 ops/s
# Warmup Iteration  29: 1906718.296 ops/s
# Warmup Iteration  30: 1912360.846 ops/s
Iteration   1: 2001058.848 ops/s
Iteration   2: 1997618.986 ops/s
Iteration   3: 2001860.858 ops/s
Iteration   4: 2003297.996 ops/s
Iteration   5: 2000033.563 ops/s
Iteration   6: 1996640.694 ops/s
Iteration   7: 1996616.873 ops/s
Iteration   8: 1998244.923 ops/s
Iteration   9: 1998548.864 ops/s
Iteration  10: 1997669.158 ops/s
Iteration  11: 1998477.048 ops/s
Iteration  12: 1994844.564 ops/s
Iteration  13: 2002619.086 ops/s
Iteration  14: 1998442.546 ops/s
Iteration  15: 2000496.592 ops/s
Iteration  16: 1897330.860 ops/s
Iteration  17: 1832634.316 ops/s
Iteration  18: 1873577.087 ops/s
Iteration  19: 1859938.173 ops/s
Iteration  20: 1852902.877 ops/s
Iteration  21: 1929933.876 ops/s
Iteration  22: 1962113.298 ops/s
Iteration  23: 2000234.798 ops/s
Iteration  24: 1911447.669 ops/s
Iteration  25: 1849259.062 ops/s
Iteration  26: 1869752.483 ops/s
Iteration  27: 1843756.725 ops/s
Iteration  28: 1910153.819 ops/s
Iteration  29: 1913879.011 ops/s
Iteration  30: 1980583.329 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectShort":
  1949132.266 ±(99.9%) 41595.907 ops/s [Average]
  (min, avg, max) = (1832634.316, 1949132.266, 2003297.996), stdev = 62258.800
  CI (99.9%): [1907536.359, 1990728.173] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectShort  thrpt   30  1949132.266 ± 41595.907  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 186620.820 ops/s
# Warmup Iteration   2: 381309.663 ops/s
# Warmup Iteration   3: 439994.110 ops/s
# Warmup Iteration   4: 421309.375 ops/s
# Warmup Iteration   5: 334605.921 ops/s
# Warmup Iteration   6: 419061.021 ops/s
# Warmup Iteration   7: 435100.434 ops/s
# Warmup Iteration   8: 431077.042 ops/s
# Warmup Iteration   9: 421126.856 ops/s
# Warmup Iteration  10: 414699.912 ops/s
# Warmup Iteration  11: 411423.229 ops/s
# Warmup Iteration  12: 417799.160 ops/s
# Warmup Iteration  13: 409359.954 ops/s
# Warmup Iteration  14: 415316.979 ops/s
# Warmup Iteration  15: 417048.723 ops/s
# Warmup Iteration  16: 420556.383 ops/s
# Warmup Iteration  17: 417262.178 ops/s
# Warmup Iteration  18: 414671.691 ops/s
# Warmup Iteration  19: 418770.311 ops/s
# Warmup Iteration  20: 411910.459 ops/s
# Warmup Iteration  21: 411668.575 ops/s
# Warmup Iteration  22: 428545.441 ops/s
# Warmup Iteration  23: 416238.282 ops/s
# Warmup Iteration  24: 422861.825 ops/s
# Warmup Iteration  25: 420277.035 ops/s
# Warmup Iteration  26: 432281.042 ops/s
# Warmup Iteration  27: 426112.921 ops/s
# Warmup Iteration  28: 436708.638 ops/s
# Warmup Iteration  29: 422252.174 ops/s
# Warmup Iteration  30: 419906.941 ops/s
Iteration   1: 441088.625 ops/s
Iteration   2: 443752.310 ops/s
Iteration   3: 424449.344 ops/s
Iteration   4: 423162.179 ops/s
Iteration   5: 420526.735 ops/s
Iteration   6: 437187.019 ops/s
Iteration   7: 419305.733 ops/s
Iteration   8: 428638.248 ops/s
Iteration   9: 406153.611 ops/s
Iteration  10: 439400.554 ops/s
Iteration  11: 441171.641 ops/s
Iteration  12: 408597.624 ops/s
Iteration  13: 415233.492 ops/s
Iteration  14: 415854.161 ops/s
Iteration  15: 412666.316 ops/s
Iteration  16: 427961.831 ops/s
Iteration  17: 441658.322 ops/s
Iteration  18: 408577.824 ops/s
Iteration  19: 425224.110 ops/s
Iteration  20: 422585.617 ops/s
Iteration  21: 423729.832 ops/s
Iteration  22: 412746.598 ops/s
Iteration  23: 426133.721 ops/s
Iteration  24: 422446.512 ops/s
Iteration  25: 420397.283 ops/s
Iteration  26: 418606.653 ops/s
Iteration  27: 418625.319 ops/s
Iteration  28: 422864.847 ops/s
Iteration  29: 440526.884 ops/s
Iteration  30: 445893.517 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectWith":
  425172.215 ±(99.9%) 7605.561 ops/s [Average]
  (min, avg, max) = (406153.611, 425172.215, 445893.517), stdev = 11383.647
  CI (99.9%): [417566.654, 432777.776] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_flatCollectWith  thrpt   30  425172.215 ± 7605.561  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1093325.745 ops/s
# Warmup Iteration   2: 2309196.426 ops/s
# Warmup Iteration   3: 2484834.126 ops/s
# Warmup Iteration   4: 2500476.618 ops/s
# Warmup Iteration   5: 2068783.437 ops/s
# Warmup Iteration   6: 2502957.850 ops/s
# Warmup Iteration   7: 2504390.020 ops/s
# Warmup Iteration   8: 2493426.048 ops/s
# Warmup Iteration   9: 2481430.180 ops/s
# Warmup Iteration  10: 2416908.185 ops/s
# Warmup Iteration  11: 2381548.580 ops/s
# Warmup Iteration  12: 2308267.594 ops/s
# Warmup Iteration  13: 2390390.902 ops/s
# Warmup Iteration  14: 2312584.131 ops/s
# Warmup Iteration  15: 2282836.006 ops/s
# Warmup Iteration  16: 2328266.295 ops/s
# Warmup Iteration  17: 2371957.619 ops/s
# Warmup Iteration  18: 2341341.634 ops/s
# Warmup Iteration  19: 2323788.230 ops/s
# Warmup Iteration  20: 2310553.988 ops/s
# Warmup Iteration  21: 2296976.366 ops/s
# Warmup Iteration  22: 2314085.128 ops/s
# Warmup Iteration  23: 2347394.588 ops/s
# Warmup Iteration  24: 2355876.703 ops/s
# Warmup Iteration  25: 2328688.790 ops/s
# Warmup Iteration  26: 2354396.867 ops/s
# Warmup Iteration  27: 2390252.488 ops/s
# Warmup Iteration  28: 2385117.156 ops/s
# Warmup Iteration  29: 2457592.976 ops/s
# Warmup Iteration  30: 2396474.818 ops/s
Iteration   1: 2412310.368 ops/s
Iteration   2: 2372609.269 ops/s
Iteration   3: 2319687.523 ops/s
Iteration   4: 2370474.513 ops/s
Iteration   5: 2524234.714 ops/s
Iteration   6: 2508112.597 ops/s
Iteration   7: 2334363.861 ops/s
Iteration   8: 2437218.008 ops/s
Iteration   9: 2348303.252 ops/s
Iteration  10: 2300479.593 ops/s
Iteration  11: 2293226.720 ops/s
Iteration  12: 2321057.249 ops/s
Iteration  13: 2342354.117 ops/s
Iteration  14: 2312976.273 ops/s
Iteration  15: 2314935.595 ops/s
Iteration  16: 2377915.897 ops/s
Iteration  17: 2387180.646 ops/s
Iteration  18: 2293410.216 ops/s
Iteration  19: 2406615.079 ops/s
Iteration  20: 2374965.585 ops/s
Iteration  21: 2524619.339 ops/s
Iteration  22: 2517416.030 ops/s
Iteration  23: 2520693.704 ops/s
Iteration  24: 2426197.684 ops/s
Iteration  25: 2405369.036 ops/s
Iteration  26: 2326471.617 ops/s
Iteration  27: 2321646.274 ops/s
Iteration  28: 2354106.633 ops/s
Iteration  29: 2300730.788 ops/s
Iteration  30: 2336274.918 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_forEach":
  2379531.903 ±(99.9%) 49883.328 ops/s [Average]
  (min, avg, max) = (2293226.720, 2379531.903, 2524619.339), stdev = 74663.023
  CI (99.9%): [2329648.575, 2429415.231] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_forEach  thrpt   30  2379531.903 ± 49883.328  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1966635.661 ops/s
# Warmup Iteration   2: 5060078.205 ops/s
# Warmup Iteration   3: 4498140.361 ops/s
# Warmup Iteration   4: 4766231.482 ops/s
# Warmup Iteration   5: 5100980.873 ops/s
# Warmup Iteration   6: 5198521.031 ops/s
# Warmup Iteration   7: 5066662.849 ops/s
# Warmup Iteration   8: 5138894.414 ops/s
# Warmup Iteration   9: 5052845.495 ops/s
# Warmup Iteration  10: 5136964.320 ops/s
# Warmup Iteration  11: 5163052.365 ops/s
# Warmup Iteration  12: 5084216.635 ops/s
# Warmup Iteration  13: 5150339.293 ops/s
# Warmup Iteration  14: 5438257.099 ops/s
# Warmup Iteration  15: 5472265.918 ops/s
# Warmup Iteration  16: 5459463.890 ops/s
# Warmup Iteration  17: 5466185.589 ops/s
# Warmup Iteration  18: 5464700.503 ops/s
# Warmup Iteration  19: 5468744.307 ops/s
# Warmup Iteration  20: 5470270.062 ops/s
# Warmup Iteration  21: 5463277.582 ops/s
# Warmup Iteration  22: 5067427.653 ops/s
# Warmup Iteration  23: 5127145.826 ops/s
# Warmup Iteration  24: 5121137.079 ops/s
# Warmup Iteration  25: 5045569.724 ops/s
# Warmup Iteration  26: 5091919.628 ops/s
# Warmup Iteration  27: 4980010.204 ops/s
# Warmup Iteration  28: 5142408.887 ops/s
# Warmup Iteration  29: 5058611.163 ops/s
# Warmup Iteration  30: 5104371.027 ops/s
Iteration   1: 5093072.288 ops/s
Iteration   2: 5132417.134 ops/s
Iteration   3: 5189475.711 ops/s
Iteration   4: 5105151.424 ops/s
Iteration   5: 5109645.183 ops/s
Iteration   6: 5077659.797 ops/s
Iteration   7: 5080116.880 ops/s
Iteration   8: 5000849.909 ops/s
Iteration   9: 5092503.678 ops/s
Iteration  10: 5189139.034 ops/s
Iteration  11: 5150608.032 ops/s
Iteration  12: 5177820.269 ops/s
Iteration  13: 5148955.982 ops/s
Iteration  14: 4989551.019 ops/s
Iteration  15: 5039444.646 ops/s
Iteration  16: 5228254.032 ops/s
Iteration  17: 5142638.833 ops/s
Iteration  18: 5059187.721 ops/s
Iteration  19: 5087102.442 ops/s
Iteration  20: 5067618.954 ops/s
Iteration  21: 5427866.124 ops/s
Iteration  22: 5395130.791 ops/s
Iteration  23: 4982068.932 ops/s
Iteration  24: 5421890.353 ops/s
Iteration  25: 5050240.624 ops/s
Iteration  26: 5033712.247 ops/s
Iteration  27: 5141791.388 ops/s
Iteration  28: 5140682.212 ops/s
Iteration  29: 5471335.638 ops/s
Iteration  30: 5467388.283 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_forEachWith":
  5156443.985 ±(99.9%) 94130.990 ops/s [Average]
  (min, avg, max) = (4982068.932, 5156443.985, 5471335.638), stdev = 140890.845
  CI (99.9%): [5062312.996, 5250574.975] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_forEachWith  thrpt   30  5156443.985 ± 94130.990  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 504481.754 ops/s
# Warmup Iteration   2: 831642.112 ops/s
# Warmup Iteration   3: 978025.394 ops/s
# Warmup Iteration   4: 984002.278 ops/s
# Warmup Iteration   5: 978154.537 ops/s
# Warmup Iteration   6: 789222.826 ops/s
# Warmup Iteration   7: 986196.432 ops/s
# Warmup Iteration   8: 988548.794 ops/s
# Warmup Iteration   9: 1004793.770 ops/s
# Warmup Iteration  10: 1013927.165 ops/s
# Warmup Iteration  11: 1063170.096 ops/s
# Warmup Iteration  12: 1005729.619 ops/s
# Warmup Iteration  13: 1000742.851 ops/s
# Warmup Iteration  14: 1005483.923 ops/s
# Warmup Iteration  15: 982846.768 ops/s
# Warmup Iteration  16: 981734.997 ops/s
# Warmup Iteration  17: 993206.870 ops/s
# Warmup Iteration  18: 984930.733 ops/s
# Warmup Iteration  19: 985515.277 ops/s
# Warmup Iteration  20: 977801.807 ops/s
# Warmup Iteration  21: 984100.491 ops/s
# Warmup Iteration  22: 1010699.353 ops/s
# Warmup Iteration  23: 1016348.197 ops/s
# Warmup Iteration  24: 998514.696 ops/s
# Warmup Iteration  25: 991970.966 ops/s
# Warmup Iteration  26: 1005979.353 ops/s
# Warmup Iteration  27: 1008095.488 ops/s
# Warmup Iteration  28: 1027273.359 ops/s
# Warmup Iteration  29: 1064385.352 ops/s
# Warmup Iteration  30: 1064514.147 ops/s
Iteration   1: 1065270.084 ops/s
Iteration   2: 1063820.255 ops/s
Iteration   3: 1062371.435 ops/s
Iteration   4: 1063391.144 ops/s
Iteration   5: 1062659.941 ops/s
Iteration   6: 1064270.914 ops/s
Iteration   7: 1063806.010 ops/s
Iteration   8: 1061712.430 ops/s
Iteration   9: 1063330.051 ops/s
Iteration  10: 1061632.243 ops/s
Iteration  11: 1064526.895 ops/s
Iteration  12: 1002031.704 ops/s
Iteration  13: 988619.029 ops/s
Iteration  14: 993486.289 ops/s
Iteration  15: 988296.774 ops/s
Iteration  16: 983308.530 ops/s
Iteration  17: 987224.241 ops/s
Iteration  18: 980317.826 ops/s
Iteration  19: 983626.491 ops/s
Iteration  20: 979406.627 ops/s
Iteration  21: 978850.593 ops/s
Iteration  22: 972158.602 ops/s
Iteration  23: 972079.418 ops/s
Iteration  24: 979946.862 ops/s
Iteration  25: 993421.710 ops/s
Iteration  26: 987102.942 ops/s
Iteration  27: 989313.630 ops/s
Iteration  28: 968756.031 ops/s
Iteration  29: 1001433.308 ops/s
Iteration  30: 982959.565 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_forEachWithIndex":
  1013637.719 ±(99.9%) 26143.040 ops/s [Average]
  (min, avg, max) = (968756.031, 1013637.719, 1065270.084), stdev = 39129.674
  CI (99.9%): [987494.680, 1039780.759] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  1013637.719 ± 26143.040  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_forEachWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_forEachWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2456666.830 ops/s
# Warmup Iteration   2: 4704952.169 ops/s
# Warmup Iteration   3: 5027548.202 ops/s
# Warmup Iteration   4: 5107705.039 ops/s
# Warmup Iteration   5: 4314850.219 ops/s
# Warmup Iteration   6: 5085608.405 ops/s
# Warmup Iteration   7: 5093555.610 ops/s
# Warmup Iteration   8: 5249613.160 ops/s
# Warmup Iteration   9: 5048525.810 ops/s
# Warmup Iteration  10: 5061499.386 ops/s
# Warmup Iteration  11: 5099272.905 ops/s
# Warmup Iteration  12: 5009807.069 ops/s
# Warmup Iteration  13: 5076083.811 ops/s
# Warmup Iteration  14: 5069364.597 ops/s
# Warmup Iteration  15: 5116921.611 ops/s
# Warmup Iteration  16: 5426429.124 ops/s
# Warmup Iteration  17: 5087581.527 ops/s
# Warmup Iteration  18: 5068899.714 ops/s
# Warmup Iteration  19: 5077388.332 ops/s
# Warmup Iteration  20: 5051670.889 ops/s
# Warmup Iteration  21: 5111566.014 ops/s
# Warmup Iteration  22: 5093588.335 ops/s
# Warmup Iteration  23: 5176008.967 ops/s
# Warmup Iteration  24: 5267179.321 ops/s
# Warmup Iteration  25: 5353102.653 ops/s
# Warmup Iteration  26: 5487432.938 ops/s
# Warmup Iteration  27: 5160390.704 ops/s
# Warmup Iteration  28: 5164974.913 ops/s
# Warmup Iteration  29: 5104182.515 ops/s
# Warmup Iteration  30: 5117165.064 ops/s
Iteration   1: 5051794.374 ops/s
Iteration   2: 5215066.260 ops/s
Iteration   3: 5205875.136 ops/s
Iteration   4: 5100783.515 ops/s
Iteration   5: 5426202.708 ops/s
Iteration   6: 5503550.084 ops/s
Iteration   7: 5494694.931 ops/s
Iteration   8: 5474374.688 ops/s
Iteration   9: 5499392.162 ops/s
Iteration  10: 5074059.829 ops/s
Iteration  11: 5247446.395 ops/s
Iteration  12: 5114256.805 ops/s
Iteration  13: 5075825.225 ops/s
Iteration  14: 5489946.150 ops/s
Iteration  15: 5304501.639 ops/s
Iteration  16: 5337623.241 ops/s
Iteration  17: 5034179.314 ops/s
Iteration  18: 5231383.332 ops/s
Iteration  19: 5126811.784 ops/s
Iteration  20: 5021932.276 ops/s
Iteration  21: 5170670.768 ops/s
Iteration  22: 5345600.942 ops/s
Iteration  23: 5018529.400 ops/s
Iteration  24: 5330195.596 ops/s
Iteration  25: 5456893.157 ops/s
Iteration  26: 5507586.603 ops/s
Iteration  27: 5511137.133 ops/s
Iteration  28: 5500748.472 ops/s
Iteration  29: 5501728.609 ops/s
Iteration  30: 5489555.735 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_forEachWithOccurrences":
  5295411.542 ±(99.9%) 122132.683 ops/s [Average]
  (min, avg, max) = (5018529.400, 5295411.542, 5511137.133), stdev = 182802.465
  CI (99.9%): [5173278.859, 5417544.225] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_forEachWithOccurrences  thrpt   30  5295411.542 ± 122132.683  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_fusedCollectMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_fusedCollectMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1284532.637 ops/s
# Warmup Iteration   2: 2976616.438 ops/s
# Warmup Iteration   3: 2988775.836 ops/s
# Warmup Iteration   4: 2497416.818 ops/s
# Warmup Iteration   5: 2960022.847 ops/s
# Warmup Iteration   6: 2863016.747 ops/s
# Warmup Iteration   7: 2948889.190 ops/s
# Warmup Iteration   8: 2806090.767 ops/s
# Warmup Iteration   9: 2754560.513 ops/s
# Warmup Iteration  10: 2805618.459 ops/s
# Warmup Iteration  11: 2784168.208 ops/s
# Warmup Iteration  12: 2926158.367 ops/s
# Warmup Iteration  13: 2978419.553 ops/s
# Warmup Iteration  14: 2863828.107 ops/s
# Warmup Iteration  15: 2793425.775 ops/s
# Warmup Iteration  16: 2796243.198 ops/s
# Warmup Iteration  17: 2792364.053 ops/s
# Warmup Iteration  18: 2742366.180 ops/s
# Warmup Iteration  19: 2800957.042 ops/s
# Warmup Iteration  20: 2931734.860 ops/s
# Warmup Iteration  21: 2732684.148 ops/s
# Warmup Iteration  22: 2808496.629 ops/s
# Warmup Iteration  23: 2955020.704 ops/s
# Warmup Iteration  24: 2832395.642 ops/s
# Warmup Iteration  25: 2767132.527 ops/s
# Warmup Iteration  26: 2769801.563 ops/s
# Warmup Iteration  27: 2780921.845 ops/s
# Warmup Iteration  28: 2770179.613 ops/s
# Warmup Iteration  29: 2807558.524 ops/s
# Warmup Iteration  30: 2776353.435 ops/s
Iteration   1: 2762421.731 ops/s
Iteration   2: 2835280.099 ops/s
Iteration   3: 2789028.328 ops/s
Iteration   4: 2847292.833 ops/s
Iteration   5: 2958372.464 ops/s
Iteration   6: 2826912.719 ops/s
Iteration   7: 2814121.666 ops/s
Iteration   8: 2779948.562 ops/s
Iteration   9: 2863044.767 ops/s
Iteration  10: 2947999.562 ops/s
Iteration  11: 2890165.790 ops/s
Iteration  12: 2774889.248 ops/s
Iteration  13: 2851620.086 ops/s
Iteration  14: 2850929.989 ops/s
Iteration  15: 2830806.354 ops/s
Iteration  16: 2793270.738 ops/s
Iteration  17: 2830822.475 ops/s
Iteration  18: 2751226.883 ops/s
Iteration  19: 2757804.878 ops/s
Iteration  20: 2815364.052 ops/s
Iteration  21: 2768217.420 ops/s
Iteration  22: 2778418.185 ops/s
Iteration  23: 2822397.378 ops/s
Iteration  24: 2768823.792 ops/s
Iteration  25: 2763049.037 ops/s
Iteration  26: 2772728.026 ops/s
Iteration  27: 2867161.711 ops/s
Iteration  28: 2780156.902 ops/s
Iteration  29: 2821060.066 ops/s
Iteration  30: 2868906.480 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_fusedCollectMakeString":
  2819408.074 ±(99.9%) 35421.282 ops/s [Average]
  (min, avg, max) = (2751226.883, 2819408.074, 2958372.464), stdev = 53016.912
  CI (99.9%): [2783986.792, 2854829.357] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_fusedCollectMakeString  thrpt   30  2819408.074 ± 35421.282  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_getAny$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_getAny

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2000911.901 ops/s
# Warmup Iteration   2: 4953054.614 ops/s
# Warmup Iteration   3: 5211267.213 ops/s
# Warmup Iteration   4: 4128420.349 ops/s
# Warmup Iteration   5: 5198505.665 ops/s
# Warmup Iteration   6: 5285734.396 ops/s
# Warmup Iteration   7: 5269751.141 ops/s
# Warmup Iteration   8: 5164928.788 ops/s
# Warmup Iteration   9: 5038488.929 ops/s
# Warmup Iteration  10: 5114714.086 ops/s
# Warmup Iteration  11: 5147167.864 ops/s
# Warmup Iteration  12: 5409930.194 ops/s
# Warmup Iteration  13: 5429615.741 ops/s
# Warmup Iteration  14: 5433030.698 ops/s
# Warmup Iteration  15: 5427088.186 ops/s
# Warmup Iteration  16: 5425192.348 ops/s
# Warmup Iteration  17: 5424135.058 ops/s
# Warmup Iteration  18: 5414398.227 ops/s
# Warmup Iteration  19: 5413041.267 ops/s
# Warmup Iteration  20: 5090978.752 ops/s
# Warmup Iteration  21: 5129237.835 ops/s
# Warmup Iteration  22: 5038158.815 ops/s
# Warmup Iteration  23: 5055585.279 ops/s
# Warmup Iteration  24: 5144573.691 ops/s
# Warmup Iteration  25: 4989943.291 ops/s
# Warmup Iteration  26: 5040054.507 ops/s
# Warmup Iteration  27: 5056100.223 ops/s
# Warmup Iteration  28: 5119204.633 ops/s
# Warmup Iteration  29: 5045372.637 ops/s
# Warmup Iteration  30: 4988259.634 ops/s
Iteration   1: 5049719.031 ops/s
Iteration   2: 5147201.883 ops/s
Iteration   3: 5050085.851 ops/s
Iteration   4: 4975966.348 ops/s
Iteration   5: 5250495.113 ops/s
Iteration   6: 5034257.525 ops/s
Iteration   7: 5019110.540 ops/s
Iteration   8: 5061771.625 ops/s
Iteration   9: 5061267.566 ops/s
Iteration  10: 4997543.863 ops/s
Iteration  11: 4968332.543 ops/s
Iteration  12: 5009417.378 ops/s
Iteration  13: 5030996.359 ops/s
Iteration  14: 5064847.184 ops/s
Iteration  15: 5107605.909 ops/s
Iteration  16: 5137449.077 ops/s
Iteration  17: 5160970.726 ops/s
Iteration  18: 5175887.818 ops/s
Iteration  19: 5167796.511 ops/s
Iteration  20: 5296909.024 ops/s
Iteration  21: 5285313.775 ops/s
Iteration  22: 5210835.300 ops/s
Iteration  23: 5135374.549 ops/s
Iteration  24: 5119988.809 ops/s
Iteration  25: 5075926.483 ops/s
Iteration  26: 5176187.717 ops/s
Iteration  27: 5168829.269 ops/s
Iteration  28: 5122864.526 ops/s
Iteration  29: 5135097.588 ops/s
Iteration  30: 5117357.302 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_getAny":
  5110513.573 ±(99.9%) 57337.534 ops/s [Average]
  (min, avg, max) = (4968332.543, 5110513.573, 5296909.024), stdev = 85820.128
  CI (99.9%): [5053176.039, 5167851.107] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_getAny  thrpt   30  5110513.573 ± 57337.534  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3359164.553 ops/s
# Warmup Iteration   2: 6836105.953 ops/s
# Warmup Iteration   3: 5893919.330 ops/s
# Warmup Iteration   4: 7130058.151 ops/s
# Warmup Iteration   5: 6896198.429 ops/s
# Warmup Iteration   6: 6959734.225 ops/s
# Warmup Iteration   7: 6868023.782 ops/s
# Warmup Iteration   8: 7050678.936 ops/s
# Warmup Iteration   9: 6954532.808 ops/s
# Warmup Iteration  10: 6921237.131 ops/s
# Warmup Iteration  11: 6896446.879 ops/s
# Warmup Iteration  12: 7000948.996 ops/s
# Warmup Iteration  13: 7073152.132 ops/s
# Warmup Iteration  14: 7119984.495 ops/s
# Warmup Iteration  15: 6957793.268 ops/s
# Warmup Iteration  16: 7183494.237 ops/s
# Warmup Iteration  17: 7234389.922 ops/s
# Warmup Iteration  18: 7036652.474 ops/s
# Warmup Iteration  19: 6849133.905 ops/s
# Warmup Iteration  20: 6871072.367 ops/s
# Warmup Iteration  21: 6946851.145 ops/s
# Warmup Iteration  22: 6975671.104 ops/s
# Warmup Iteration  23: 6910998.978 ops/s
# Warmup Iteration  24: 6864563.434 ops/s
# Warmup Iteration  25: 7009051.275 ops/s
# Warmup Iteration  26: 7329210.980 ops/s
# Warmup Iteration  27: 7441891.836 ops/s
# Warmup Iteration  28: 7432534.382 ops/s
# Warmup Iteration  29: 7442017.957 ops/s
# Warmup Iteration  30: 7419732.585 ops/s
Iteration   1: 7431798.553 ops/s
Iteration   2: 7436381.362 ops/s
Iteration   3: 7422950.568 ops/s
Iteration   4: 7435837.737 ops/s
Iteration   5: 7433669.579 ops/s
Iteration   6: 7443148.170 ops/s
Iteration   7: 7433517.776 ops/s
Iteration   8: 7437534.261 ops/s
Iteration   9: 7246575.407 ops/s
Iteration  10: 7327708.348 ops/s
Iteration  11: 7213191.643 ops/s
Iteration  12: 7074025.082 ops/s
Iteration  13: 7118593.028 ops/s
Iteration  14: 7021048.980 ops/s
Iteration  15: 6845735.832 ops/s
Iteration  16: 6968980.029 ops/s
Iteration  17: 6924751.305 ops/s
Iteration  18: 6830986.094 ops/s
Iteration  19: 7045934.756 ops/s
Iteration  20: 7050015.262 ops/s
Iteration  21: 7092235.249 ops/s
Iteration  22: 7076030.688 ops/s
Iteration  23: 7111341.043 ops/s
Iteration  24: 7121612.032 ops/s
Iteration  25: 7151569.855 ops/s
Iteration  26: 6889827.670 ops/s
Iteration  27: 7083237.057 ops/s
Iteration  28: 7092486.163 ops/s
Iteration  29: 7044605.467 ops/s
Iteration  30: 6889839.154 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_getFirst":
  7156505.605 ±(99.9%) 134663.648 ops/s [Average]
  (min, avg, max) = (6830986.094, 7156505.605, 7443148.170), stdev = 201558.225
  CI (99.9%): [7021841.957, 7291169.253] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_getFirst  thrpt   30  7156505.605 ± 134663.648  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4129452.305 ops/s
# Warmup Iteration   2: 8598568.522 ops/s
# Warmup Iteration   3: 7366987.624 ops/s
# Warmup Iteration   4: 8662835.012 ops/s
# Warmup Iteration   5: 8612003.905 ops/s
# Warmup Iteration   6: 8796167.881 ops/s
# Warmup Iteration   7: 8947184.638 ops/s
# Warmup Iteration   8: 8824130.287 ops/s
# Warmup Iteration   9: 8803470.043 ops/s
# Warmup Iteration  10: 8936122.301 ops/s
# Warmup Iteration  11: 8972694.374 ops/s
# Warmup Iteration  12: 9061473.322 ops/s
# Warmup Iteration  13: 8971591.113 ops/s
# Warmup Iteration  14: 8910063.312 ops/s
# Warmup Iteration  15: 8789564.391 ops/s
# Warmup Iteration  16: 8695717.771 ops/s
# Warmup Iteration  17: 8535578.824 ops/s
# Warmup Iteration  18: 8595082.216 ops/s
# Warmup Iteration  19: 8559880.225 ops/s
# Warmup Iteration  20: 9210741.062 ops/s
# Warmup Iteration  21: 8940071.588 ops/s
# Warmup Iteration  22: 8746153.391 ops/s
# Warmup Iteration  23: 8804568.140 ops/s
# Warmup Iteration  24: 8532764.214 ops/s
# Warmup Iteration  25: 9036265.125 ops/s
# Warmup Iteration  26: 8850162.393 ops/s
# Warmup Iteration  27: 8569300.920 ops/s
# Warmup Iteration  28: 8783414.674 ops/s
# Warmup Iteration  29: 8702878.466 ops/s
# Warmup Iteration  30: 8606473.873 ops/s
Iteration   1: 8747234.262 ops/s
Iteration   2: 8671030.526 ops/s
Iteration   3: 9105946.601 ops/s
Iteration   4: 8832800.360 ops/s
Iteration   5: 8804688.827 ops/s
Iteration   6: 8707639.814 ops/s
Iteration   7: 8689805.681 ops/s
Iteration   8: 8535958.415 ops/s
Iteration   9: 8594327.039 ops/s
Iteration  10: 9180208.822 ops/s
Iteration  11: 8980425.940 ops/s
Iteration  12: 8642094.318 ops/s
Iteration  13: 8503056.838 ops/s
Iteration  14: 8738146.414 ops/s
Iteration  15: 8516391.624 ops/s
Iteration  16: 8881626.318 ops/s
Iteration  17: 8925905.910 ops/s
Iteration  18: 8736302.752 ops/s
Iteration  19: 9025360.391 ops/s
Iteration  20: 8955400.274 ops/s
Iteration  21: 9270698.427 ops/s
Iteration  22: 9240607.457 ops/s
Iteration  23: 9228749.478 ops/s
Iteration  24: 9242462.439 ops/s
Iteration  25: 9221936.701 ops/s
Iteration  26: 9238071.164 ops/s
Iteration  27: 9227661.737 ops/s
Iteration  28: 9219982.506 ops/s
Iteration  29: 9241992.189 ops/s
Iteration  30: 9232408.778 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_getLast":
  8937964.067 ±(99.9%) 178007.815 ops/s [Average]
  (min, avg, max) = (8503056.838, 8937964.067, 9270698.427), stdev = 266433.738
  CI (99.9%): [8759956.251, 9115971.882] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_getLast  thrpt   30  8937964.067 ± 178007.815  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5112659.945 ops/s
# Warmup Iteration   2: 8721450.929 ops/s
# Warmup Iteration   3: 9768400.257 ops/s
# Warmup Iteration   4: 9568608.177 ops/s
# Warmup Iteration   5: 9822188.647 ops/s
# Warmup Iteration   6: 9716837.006 ops/s
# Warmup Iteration   7: 9638538.424 ops/s
# Warmup Iteration   8: 9472194.226 ops/s
# Warmup Iteration   9: 9674461.843 ops/s
# Warmup Iteration  10: 9446825.404 ops/s
# Warmup Iteration  11: 9539123.324 ops/s
# Warmup Iteration  12: 9542887.947 ops/s
# Warmup Iteration  13: 9667550.137 ops/s
# Warmup Iteration  14: 9612316.904 ops/s
# Warmup Iteration  15: 10042768.721 ops/s
# Warmup Iteration  16: 9788589.174 ops/s
# Warmup Iteration  17: 9645378.884 ops/s
# Warmup Iteration  18: 9596751.263 ops/s
# Warmup Iteration  19: 9956684.919 ops/s
# Warmup Iteration  20: 9945819.593 ops/s
# Warmup Iteration  21: 9724933.156 ops/s
# Warmup Iteration  22: 9879285.973 ops/s
# Warmup Iteration  23: 9681576.259 ops/s
# Warmup Iteration  24: 9544727.832 ops/s
# Warmup Iteration  25: 9329896.398 ops/s
# Warmup Iteration  26: 9735380.857 ops/s
# Warmup Iteration  27: 9834314.538 ops/s
# Warmup Iteration  28: 9605168.202 ops/s
# Warmup Iteration  29: 9656926.326 ops/s
# Warmup Iteration  30: 9710065.126 ops/s
Iteration   1: 9936303.138 ops/s
Iteration   2: 9612064.319 ops/s
Iteration   3: 9137109.648 ops/s
Iteration   4: 9567688.480 ops/s
Iteration   5: 9463138.053 ops/s
Iteration   6: 9375354.028 ops/s
Iteration   7: 9556885.958 ops/s
Iteration   8: 9767254.387 ops/s
Iteration   9: 10031356.212 ops/s
Iteration  10: 10127349.468 ops/s
Iteration  11: 9678338.153 ops/s
Iteration  12: 9632737.208 ops/s
Iteration  13: 9569308.752 ops/s
Iteration  14: 9620714.515 ops/s
Iteration  15: 9888484.362 ops/s
Iteration  16: 9433575.748 ops/s
Iteration  17: 9375878.681 ops/s
Iteration  18: 9960787.548 ops/s
Iteration  19: 9669573.852 ops/s
Iteration  20: 9324232.330 ops/s
Iteration  21: 9676780.044 ops/s
Iteration  22: 9617276.225 ops/s
Iteration  23: 9397469.701 ops/s
Iteration  24: 9481737.665 ops/s
Iteration  25: 9563645.866 ops/s
Iteration  26: 9369459.313 ops/s
Iteration  27: 9540856.190 ops/s
Iteration  28: 9610946.165 ops/s
Iteration  29: 9840151.344 ops/s
Iteration  30: 9620216.027 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_getOnly":
  9614889.113 ±(99.9%) 149046.758 ops/s [Average]
  (min, avg, max) = (9137109.648, 9614889.113, 10127349.468), stdev = 223086.188
  CI (99.9%): [9465842.354, 9763935.871] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_getOnly  thrpt   30  9614889.113 ± 149046.758  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_getOnly_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_getOnly_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 713583.607 ops/s
# Warmup Iteration   2: 767006.486 ops/s
# Warmup Iteration   3: 1018476.049 ops/s
# Warmup Iteration   4: 975591.309 ops/s
# Warmup Iteration   5: 939292.027 ops/s
# Warmup Iteration   6: 974417.336 ops/s
# Warmup Iteration   7: 1000828.411 ops/s
# Warmup Iteration   8: 971689.988 ops/s
# Warmup Iteration   9: 990662.807 ops/s
# Warmup Iteration  10: 863831.805 ops/s
# Warmup Iteration  11: 1016468.771 ops/s
# Warmup Iteration  12: 1015740.168 ops/s
# Warmup Iteration  13: 1019903.014 ops/s
# Warmup Iteration  14: 1019123.241 ops/s
# Warmup Iteration  15: 1017100.455 ops/s
# Warmup Iteration  16: 1017810.337 ops/s
# Warmup Iteration  17: 1079307.356 ops/s
# Warmup Iteration  18: 1033904.748 ops/s
# Warmup Iteration  19: 998167.339 ops/s
# Warmup Iteration  20: 1016178.545 ops/s
# Warmup Iteration  21: 1022665.510 ops/s
# Warmup Iteration  22: 1004298.556 ops/s
# Warmup Iteration  23: 1026200.415 ops/s
# Warmup Iteration  24: 1004413.993 ops/s
# Warmup Iteration  25: 1005678.317 ops/s
# Warmup Iteration  26: 1020081.602 ops/s
# Warmup Iteration  27: 1013739.012 ops/s
# Warmup Iteration  28: 1065876.642 ops/s
# Warmup Iteration  29: 1057769.111 ops/s
# Warmup Iteration  30: 1023082.105 ops/s
Iteration   1: 998451.609 ops/s
Iteration   2: 1009064.596 ops/s
Iteration   3: 1008598.121 ops/s
Iteration   4: 1013078.207 ops/s
Iteration   5: 1033027.571 ops/s
Iteration   6: 1087975.797 ops/s
Iteration   7: 1089613.795 ops/s
Iteration   8: 1001742.767 ops/s
Iteration   9: 1018239.833 ops/s
Iteration  10: 1012801.442 ops/s
Iteration  11: 1006252.471 ops/s
Iteration  12: 1007590.861 ops/s
Iteration  13: 1041545.847 ops/s
Iteration  14: 1018755.102 ops/s
Iteration  15: 1012746.195 ops/s
Iteration  16: 1013152.976 ops/s
Iteration  17: 1031285.956 ops/s
Iteration  18: 1062589.134 ops/s
Iteration  19: 1087016.078 ops/s
Iteration  20: 1074432.255 ops/s
Iteration  21: 1035663.101 ops/s
Iteration  22: 1082787.128 ops/s
Iteration  23: 1007880.305 ops/s
Iteration  24: 1042309.302 ops/s
Iteration  25: 1025633.211 ops/s
Iteration  26: 1029326.590 ops/s
Iteration  27: 1042100.106 ops/s
Iteration  28: 1031120.539 ops/s
Iteration  29: 1025960.221 ops/s
Iteration  30: 1019308.174 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_getOnly_empty_throws":
  1032334.976 ±(99.9%) 18453.862 ops/s [Average]
  (min, avg, max) = (998451.609, 1032334.976, 1089613.795), stdev = 27620.875
  CI (99.9%): [1013881.114, 1050788.839] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_getOnly_empty_throws  thrpt   30  1032334.976 ± 18453.862  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_getOnly_not_only_one_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_getOnly_not_only_one_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 645533.774 ops/s
# Warmup Iteration   2: 744043.358 ops/s
# Warmup Iteration   3: 903521.201 ops/s
# Warmup Iteration   4: 922718.823 ops/s
# Warmup Iteration   5: 914119.178 ops/s
# Warmup Iteration   6: 915972.625 ops/s
# Warmup Iteration   7: 928717.487 ops/s
# Warmup Iteration   8: 926746.938 ops/s
# Warmup Iteration   9: 919968.590 ops/s
# Warmup Iteration  10: 828745.053 ops/s
# Warmup Iteration  11: 833455.806 ops/s
# Warmup Iteration  12: 902262.097 ops/s
# Warmup Iteration  13: 901871.779 ops/s
# Warmup Iteration  14: 898319.261 ops/s
# Warmup Iteration  15: 938933.496 ops/s
# Warmup Iteration  16: 968099.374 ops/s
# Warmup Iteration  17: 973900.438 ops/s
# Warmup Iteration  18: 964083.206 ops/s
# Warmup Iteration  19: 956234.102 ops/s
# Warmup Iteration  20: 962629.325 ops/s
# Warmup Iteration  21: 1000607.431 ops/s
# Warmup Iteration  22: 990437.965 ops/s
# Warmup Iteration  23: 971464.407 ops/s
# Warmup Iteration  24: 1014827.295 ops/s
# Warmup Iteration  25: 1032282.226 ops/s
# Warmup Iteration  26: 1031155.898 ops/s
# Warmup Iteration  27: 1030833.501 ops/s
# Warmup Iteration  28: 1032168.704 ops/s
# Warmup Iteration  29: 1031254.340 ops/s
# Warmup Iteration  30: 1031976.752 ops/s
Iteration   1: 1028660.160 ops/s
Iteration   2: 1033865.994 ops/s
Iteration   3: 1015243.297 ops/s
Iteration   4: 1030489.989 ops/s
Iteration   5: 981466.886 ops/s
Iteration   6: 975355.645 ops/s
Iteration   7: 947526.747 ops/s
Iteration   8: 1006100.684 ops/s
Iteration   9: 957946.487 ops/s
Iteration  10: 950039.442 ops/s
Iteration  11: 954637.300 ops/s
Iteration  12: 1033366.529 ops/s
Iteration  13: 971863.579 ops/s
Iteration  14: 944083.033 ops/s
Iteration  15: 951848.045 ops/s
Iteration  16: 974812.506 ops/s
Iteration  17: 952788.024 ops/s
Iteration  18: 954554.220 ops/s
Iteration  19: 956037.990 ops/s
Iteration  20: 961219.852 ops/s
Iteration  21: 956867.254 ops/s
Iteration  22: 957559.737 ops/s
Iteration  23: 947428.203 ops/s
Iteration  24: 975248.223 ops/s
Iteration  25: 950312.316 ops/s
Iteration  26: 960418.421 ops/s
Iteration  27: 940230.679 ops/s
Iteration  28: 961253.976 ops/s
Iteration  29: 955138.335 ops/s
Iteration  30: 951059.973 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_getOnly_not_only_one_throws":
  971247.451 ±(99.9%) 19483.944 ops/s [Average]
  (min, avg, max) = (940230.679, 971247.451, 1033865.994), stdev = 29162.652
  CI (99.9%): [951763.507, 990731.395] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_getOnly_not_only_one_throws  thrpt   30  971247.451 ± 19483.944  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 122682.215 ops/s
# Warmup Iteration   2: 175374.010 ops/s
# Warmup Iteration   3: 226608.372 ops/s
# Warmup Iteration   4: 226285.820 ops/s
# Warmup Iteration   5: 231014.403 ops/s
# Warmup Iteration   6: 232992.681 ops/s
# Warmup Iteration   7: 225363.406 ops/s
# Warmup Iteration   8: 195305.027 ops/s
# Warmup Iteration   9: 229002.644 ops/s
# Warmup Iteration  10: 234145.493 ops/s
# Warmup Iteration  11: 234104.328 ops/s
# Warmup Iteration  12: 235019.042 ops/s
# Warmup Iteration  13: 227558.145 ops/s
# Warmup Iteration  14: 223868.397 ops/s
# Warmup Iteration  15: 229702.670 ops/s
# Warmup Iteration  16: 232771.791 ops/s
# Warmup Iteration  17: 234510.029 ops/s
# Warmup Iteration  18: 228404.950 ops/s
# Warmup Iteration  19: 233266.243 ops/s
# Warmup Iteration  20: 227655.145 ops/s
# Warmup Iteration  21: 228539.268 ops/s
# Warmup Iteration  22: 228218.762 ops/s
# Warmup Iteration  23: 232217.782 ops/s
# Warmup Iteration  24: 233330.606 ops/s
# Warmup Iteration  25: 234729.248 ops/s
# Warmup Iteration  26: 232521.667 ops/s
# Warmup Iteration  27: 235857.935 ops/s
# Warmup Iteration  28: 228298.113 ops/s
# Warmup Iteration  29: 242634.808 ops/s
# Warmup Iteration  30: 234198.501 ops/s
Iteration   1: 232060.722 ops/s
Iteration   2: 236275.999 ops/s
Iteration   3: 243284.215 ops/s
Iteration   4: 227910.097 ops/s
Iteration   5: 229930.618 ops/s
Iteration   6: 231722.360 ops/s
Iteration   7: 229905.287 ops/s
Iteration   8: 224230.031 ops/s
Iteration   9: 225584.401 ops/s
Iteration  10: 229328.203 ops/s
Iteration  11: 225793.337 ops/s
Iteration  12: 237515.704 ops/s
Iteration  13: 228820.500 ops/s
Iteration  14: 234699.793 ops/s
Iteration  15: 241231.548 ops/s
Iteration  16: 239978.915 ops/s
Iteration  17: 244857.937 ops/s
Iteration  18: 245191.118 ops/s
Iteration  19: 244892.477 ops/s
Iteration  20: 245515.000 ops/s
Iteration  21: 244906.621 ops/s
Iteration  22: 245048.356 ops/s
Iteration  23: 245404.133 ops/s
Iteration  24: 244778.026 ops/s
Iteration  25: 245225.867 ops/s
Iteration  26: 244799.443 ops/s
Iteration  27: 245040.638 ops/s
Iteration  28: 244815.493 ops/s
Iteration  29: 245263.125 ops/s
Iteration  30: 245360.741 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_groupBy":
  238312.357 ±(99.9%) 5137.982 ops/s [Average]
  (min, avg, max) = (224230.031, 238312.357, 245515.000), stdev = 7690.290
  CI (99.9%): [233174.375, 243450.339] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_groupBy  thrpt   30  238312.357 ± 5137.982  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31660.030 ops/s
# Warmup Iteration   2: 43459.881 ops/s
# Warmup Iteration   3: 59512.149 ops/s
# Warmup Iteration   4: 56725.182 ops/s
# Warmup Iteration   5: 59228.099 ops/s
# Warmup Iteration   6: 58068.537 ops/s
# Warmup Iteration   7: 60394.546 ops/s
# Warmup Iteration   8: 46793.722 ops/s
# Warmup Iteration   9: 55262.917 ops/s
# Warmup Iteration  10: 58367.407 ops/s
# Warmup Iteration  11: 58616.950 ops/s
# Warmup Iteration  12: 58567.774 ops/s
# Warmup Iteration  13: 58914.881 ops/s
# Warmup Iteration  14: 57548.747 ops/s
# Warmup Iteration  15: 57192.874 ops/s
# Warmup Iteration  16: 56244.568 ops/s
# Warmup Iteration  17: 59798.002 ops/s
# Warmup Iteration  18: 60348.079 ops/s
# Warmup Iteration  19: 60494.124 ops/s
# Warmup Iteration  20: 56155.744 ops/s
# Warmup Iteration  21: 57660.371 ops/s
# Warmup Iteration  22: 57285.596 ops/s
# Warmup Iteration  23: 58650.035 ops/s
# Warmup Iteration  24: 56413.508 ops/s
# Warmup Iteration  25: 57072.257 ops/s
# Warmup Iteration  26: 56928.331 ops/s
# Warmup Iteration  27: 57761.625 ops/s
# Warmup Iteration  28: 59804.546 ops/s
# Warmup Iteration  29: 57295.282 ops/s
# Warmup Iteration  30: 57883.948 ops/s
Iteration   1: 56447.318 ops/s
Iteration   2: 55671.043 ops/s
Iteration   3: 57776.973 ops/s
Iteration   4: 57567.025 ops/s
Iteration   5: 58382.323 ops/s
Iteration   6: 59208.509 ops/s
Iteration   7: 55741.362 ops/s
Iteration   8: 56301.512 ops/s
Iteration   9: 57655.517 ops/s
Iteration  10: 58593.270 ops/s
Iteration  11: 60438.298 ops/s
Iteration  12: 60528.931 ops/s
Iteration  13: 61144.534 ops/s
Iteration  14: 60980.997 ops/s
Iteration  15: 57088.226 ops/s
Iteration  16: 56416.871 ops/s
Iteration  17: 56727.092 ops/s
Iteration  18: 56498.109 ops/s
Iteration  19: 57237.967 ops/s
Iteration  20: 55545.268 ops/s
Iteration  21: 56682.407 ops/s
Iteration  22: 56808.342 ops/s
Iteration  23: 56483.366 ops/s
Iteration  24: 56968.468 ops/s
Iteration  25: 56570.680 ops/s
Iteration  26: 56558.495 ops/s
Iteration  27: 55822.499 ops/s
Iteration  28: 57054.455 ops/s
Iteration  29: 56083.490 ops/s
Iteration  30: 58735.998 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_groupByEach":
  57457.311 ±(99.9%) 1072.482 ops/s [Average]
  (min, avg, max) = (55545.268, 57457.311, 61144.534), stdev = 1605.240
  CI (99.9%): [56384.830, 58529.793] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt      Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_groupByEach  thrpt   30  57457.311 ± 1072.482  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2045053.377 ops/s
# Warmup Iteration   2: 4712938.591 ops/s
# Warmup Iteration   3: 4636366.475 ops/s
# Warmup Iteration   4: 4680204.474 ops/s
# Warmup Iteration   5: 4150390.368 ops/s
# Warmup Iteration   6: 4902192.902 ops/s
# Warmup Iteration   7: 4992288.249 ops/s
# Warmup Iteration   8: 5094277.504 ops/s
# Warmup Iteration   9: 5099187.588 ops/s
# Warmup Iteration  10: 5093692.651 ops/s
# Warmup Iteration  11: 5095991.672 ops/s
# Warmup Iteration  12: 5094155.913 ops/s
# Warmup Iteration  13: 5091453.946 ops/s
# Warmup Iteration  14: 5087386.939 ops/s
# Warmup Iteration  15: 5005831.959 ops/s
# Warmup Iteration  16: 4791439.584 ops/s
# Warmup Iteration  17: 4863284.944 ops/s
# Warmup Iteration  18: 4752834.207 ops/s
# Warmup Iteration  19: 4841662.181 ops/s
# Warmup Iteration  20: 4849312.778 ops/s
# Warmup Iteration  21: 4796837.026 ops/s
# Warmup Iteration  22: 4713682.039 ops/s
# Warmup Iteration  23: 4783951.776 ops/s
# Warmup Iteration  24: 4834903.685 ops/s
# Warmup Iteration  25: 4757866.559 ops/s
# Warmup Iteration  26: 4738821.528 ops/s
# Warmup Iteration  27: 4716477.289 ops/s
# Warmup Iteration  28: 4820529.479 ops/s
# Warmup Iteration  29: 5084814.946 ops/s
# Warmup Iteration  30: 5057190.330 ops/s
Iteration   1: 4679881.082 ops/s
Iteration   2: 4746828.731 ops/s
Iteration   3: 4813596.328 ops/s
Iteration   4: 4652843.866 ops/s
Iteration   5: 4684522.271 ops/s
Iteration   6: 4801162.460 ops/s
Iteration   7: 4702489.792 ops/s
Iteration   8: 4774379.913 ops/s
Iteration   9: 4783759.366 ops/s
Iteration  10: 4791634.077 ops/s
Iteration  11: 4952709.240 ops/s
Iteration  12: 4720557.876 ops/s
Iteration  13: 4859239.835 ops/s
Iteration  14: 4714373.412 ops/s
Iteration  15: 4774136.667 ops/s
Iteration  16: 4738414.020 ops/s
Iteration  17: 4682832.012 ops/s
Iteration  18: 4725238.781 ops/s
Iteration  19: 4789942.154 ops/s
Iteration  20: 4730539.377 ops/s
Iteration  21: 4693944.141 ops/s
Iteration  22: 4643786.325 ops/s
Iteration  23: 4617771.865 ops/s
Iteration  24: 4739888.365 ops/s
Iteration  25: 4711923.199 ops/s
Iteration  26: 4745204.016 ops/s
Iteration  27: 4710825.805 ops/s
Iteration  28: 4737370.641 ops/s
Iteration  29: 4757195.508 ops/s
Iteration  30: 4690106.980 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_groupByUniqueKey":
  4738903.270 ±(99.9%) 44583.899 ops/s [Average]
  (min, avg, max) = (4617771.865, 4738903.270, 4952709.240), stdev = 66731.086
  CI (99.9%): [4694319.371, 4783487.169] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  4738903.270 ± 44583.899  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1473263.423 ops/s
# Warmup Iteration   2: 3239833.989 ops/s
# Warmup Iteration   3: 3422906.286 ops/s
# Warmup Iteration   4: 3529690.664 ops/s
# Warmup Iteration   5: 2844516.968 ops/s
# Warmup Iteration   6: 3518659.341 ops/s
# Warmup Iteration   7: 3446134.504 ops/s
# Warmup Iteration   8: 3413635.791 ops/s
# Warmup Iteration   9: 3488043.276 ops/s
# Warmup Iteration  10: 3618690.699 ops/s
# Warmup Iteration  11: 3452692.570 ops/s
# Warmup Iteration  12: 3454240.550 ops/s
# Warmup Iteration  13: 3464958.244 ops/s
# Warmup Iteration  14: 3371433.678 ops/s
# Warmup Iteration  15: 3419414.783 ops/s
# Warmup Iteration  16: 3475676.592 ops/s
# Warmup Iteration  17: 3458858.682 ops/s
# Warmup Iteration  18: 3377543.684 ops/s
# Warmup Iteration  19: 3450105.069 ops/s
# Warmup Iteration  20: 3576418.677 ops/s
# Warmup Iteration  21: 3413633.480 ops/s
# Warmup Iteration  22: 3623819.014 ops/s
# Warmup Iteration  23: 3642075.225 ops/s
# Warmup Iteration  24: 3646510.412 ops/s
# Warmup Iteration  25: 3639442.283 ops/s
# Warmup Iteration  26: 3637594.309 ops/s
# Warmup Iteration  27: 3641680.879 ops/s
# Warmup Iteration  28: 3643520.164 ops/s
# Warmup Iteration  29: 3638821.449 ops/s
# Warmup Iteration  30: 3462545.123 ops/s
Iteration   1: 3436277.435 ops/s
Iteration   2: 3431886.173 ops/s
Iteration   3: 3413031.037 ops/s
Iteration   4: 3559668.089 ops/s
Iteration   5: 3403602.622 ops/s
Iteration   6: 3446557.279 ops/s
Iteration   7: 3549859.676 ops/s
Iteration   8: 3387669.875 ops/s
Iteration   9: 3383080.101 ops/s
Iteration  10: 3383635.224 ops/s
Iteration  11: 3347618.217 ops/s
Iteration  12: 3460250.595 ops/s
Iteration  13: 3323925.769 ops/s
Iteration  14: 3464628.063 ops/s
Iteration  15: 3428809.791 ops/s
Iteration  16: 3345406.594 ops/s
Iteration  17: 3389049.443 ops/s
Iteration  18: 3345375.164 ops/s
Iteration  19: 3371966.601 ops/s
Iteration  20: 3492760.762 ops/s
Iteration  21: 3420054.734 ops/s
Iteration  22: 3394621.405 ops/s
Iteration  23: 3354677.860 ops/s
Iteration  24: 3608647.234 ops/s
Iteration  25: 3641800.152 ops/s
Iteration  26: 3646107.781 ops/s
Iteration  27: 3639300.129 ops/s
Iteration  28: 3637706.685 ops/s
Iteration  29: 3639293.573 ops/s
Iteration  30: 3642215.863 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_groupByUniqueKey_target":
  3466316.131 ±(99.9%) 73272.505 ops/s [Average]
  (min, avg, max) = (3323925.769, 3466316.131, 3646107.781), stdev = 109670.845
  CI (99.9%): [3393043.625, 3539588.636] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  3466316.131 ± 73272.505  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 457467.471 ops/s
# Warmup Iteration   2: 564830.151 ops/s
# Warmup Iteration   3: 724011.236 ops/s
# Warmup Iteration   4: 718783.905 ops/s
# Warmup Iteration   5: 723008.733 ops/s
# Warmup Iteration   6: 723878.152 ops/s
# Warmup Iteration   7: 704426.468 ops/s
# Warmup Iteration   8: 711710.163 ops/s
# Warmup Iteration   9: 588330.463 ops/s
# Warmup Iteration  10: 706307.372 ops/s
# Warmup Iteration  11: 703716.104 ops/s
# Warmup Iteration  12: 713269.434 ops/s
# Warmup Iteration  13: 723236.070 ops/s
# Warmup Iteration  14: 718738.293 ops/s
# Warmup Iteration  15: 675121.721 ops/s
# Warmup Iteration  16: 666329.792 ops/s
# Warmup Iteration  17: 700474.286 ops/s
# Warmup Iteration  18: 694507.922 ops/s
# Warmup Iteration  19: 722248.030 ops/s
# Warmup Iteration  20: 692140.059 ops/s
# Warmup Iteration  21: 712589.320 ops/s
# Warmup Iteration  22: 713212.035 ops/s
# Warmup Iteration  23: 709698.012 ops/s
# Warmup Iteration  24: 704402.316 ops/s
# Warmup Iteration  25: 701890.822 ops/s
# Warmup Iteration  26: 696525.972 ops/s
# Warmup Iteration  27: 703248.753 ops/s
# Warmup Iteration  28: 710775.188 ops/s
# Warmup Iteration  29: 700126.243 ops/s
# Warmup Iteration  30: 721050.731 ops/s
Iteration   1: 735916.497 ops/s
Iteration   2: 721057.199 ops/s
Iteration   3: 709032.759 ops/s
Iteration   4: 699433.712 ops/s
Iteration   5: 718845.124 ops/s
Iteration   6: 691632.691 ops/s
Iteration   7: 700310.748 ops/s
Iteration   8: 714922.904 ops/s
Iteration   9: 712798.630 ops/s
Iteration  10: 734293.893 ops/s
Iteration  11: 725806.383 ops/s
Iteration  12: 748645.358 ops/s
Iteration  13: 751743.698 ops/s
Iteration  14: 754269.194 ops/s
Iteration  15: 754719.742 ops/s
Iteration  16: 751557.265 ops/s
Iteration  17: 754883.545 ops/s
Iteration  18: 754398.240 ops/s
Iteration  19: 753367.362 ops/s
Iteration  20: 752765.047 ops/s
Iteration  21: 753727.604 ops/s
Iteration  22: 752702.168 ops/s
Iteration  23: 752115.560 ops/s
Iteration  24: 753325.953 ops/s
Iteration  25: 752076.451 ops/s
Iteration  26: 753446.828 ops/s
Iteration  27: 754012.610 ops/s
Iteration  28: 722545.436 ops/s
Iteration  29: 725972.611 ops/s
Iteration  30: 724034.327 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate":
  736145.318 ±(99.9%) 13584.895 ops/s [Average]
  (min, avg, max) = (691632.691, 736145.318, 754883.545), stdev = 20333.233
  CI (99.9%): [722560.423, 749730.213] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt       Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate  thrpt   30  736145.318 ± 13584.895  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 462068.168 ops/s
# Warmup Iteration   2: 496930.483 ops/s
# Warmup Iteration   3: 711246.600 ops/s
# Warmup Iteration   4: 672626.235 ops/s
# Warmup Iteration   5: 702273.313 ops/s
# Warmup Iteration   6: 678284.578 ops/s
# Warmup Iteration   7: 701649.569 ops/s
# Warmup Iteration   8: 695281.866 ops/s
# Warmup Iteration   9: 730919.506 ops/s
# Warmup Iteration  10: 641798.621 ops/s
# Warmup Iteration  11: 643590.349 ops/s
# Warmup Iteration  12: 681687.533 ops/s
# Warmup Iteration  13: 686109.626 ops/s
# Warmup Iteration  14: 689584.969 ops/s
# Warmup Iteration  15: 713081.302 ops/s
# Warmup Iteration  16: 703976.165 ops/s
# Warmup Iteration  17: 757709.456 ops/s
# Warmup Iteration  18: 748602.819 ops/s
# Warmup Iteration  19: 710242.624 ops/s
# Warmup Iteration  20: 721348.557 ops/s
# Warmup Iteration  21: 725279.526 ops/s
# Warmup Iteration  22: 762987.124 ops/s
# Warmup Iteration  23: 732204.373 ops/s
# Warmup Iteration  24: 714864.035 ops/s
# Warmup Iteration  25: 714558.802 ops/s
# Warmup Iteration  26: 709971.377 ops/s
# Warmup Iteration  27: 760758.369 ops/s
# Warmup Iteration  28: 706376.219 ops/s
# Warmup Iteration  29: 707936.314 ops/s
# Warmup Iteration  30: 704776.167 ops/s
Iteration   1: 718581.638 ops/s
Iteration   2: 724482.524 ops/s
Iteration   3: 734090.760 ops/s
Iteration   4: 717156.517 ops/s
Iteration   5: 711414.053 ops/s
Iteration   6: 701777.901 ops/s
Iteration   7: 711316.099 ops/s
Iteration   8: 714831.467 ops/s
Iteration   9: 705908.182 ops/s
Iteration  10: 716481.082 ops/s
Iteration  11: 699147.361 ops/s
Iteration  12: 701492.069 ops/s
Iteration  13: 715837.928 ops/s
Iteration  14: 711221.254 ops/s
Iteration  15: 704185.878 ops/s
Iteration  16: 706236.510 ops/s
Iteration  17: 708072.456 ops/s
Iteration  18: 722590.366 ops/s
Iteration  19: 722198.926 ops/s
Iteration  20: 721303.550 ops/s
Iteration  21: 720499.744 ops/s
Iteration  22: 731558.707 ops/s
Iteration  23: 753932.925 ops/s
Iteration  24: 766469.767 ops/s
Iteration  25: 763102.784 ops/s
Iteration  26: 742784.952 ops/s
Iteration  27: 730911.574 ops/s
Iteration  28: 725102.510 ops/s
Iteration  29: 710790.351 ops/s
Iteration  30: 721605.903 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate":
  721169.525 ±(99.9%) 11389.442 ops/s [Average]
  (min, avg, max) = (699147.361, 721169.525, 766469.767), stdev = 17047.182
  CI (99.9%): [709780.082, 732558.967] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate  thrpt   30  721169.525 ± 11389.442  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_hashingStrategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_hashingStrategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7659838.519 ops/s
# Warmup Iteration   2: 15996475.011 ops/s
# Warmup Iteration   3: 13047860.267 ops/s
# Warmup Iteration   4: 15920789.522 ops/s
# Warmup Iteration   5: 16572012.365 ops/s
# Warmup Iteration   6: 16770520.134 ops/s
# Warmup Iteration   7: 16753552.137 ops/s
# Warmup Iteration   8: 16640107.410 ops/s
# Warmup Iteration   9: 16772940.033 ops/s
# Warmup Iteration  10: 16750940.883 ops/s
# Warmup Iteration  11: 16752047.990 ops/s
# Warmup Iteration  12: 16753331.789 ops/s
# Warmup Iteration  13: 16293425.369 ops/s
# Warmup Iteration  14: 16186309.521 ops/s
# Warmup Iteration  15: 16134438.864 ops/s
# Warmup Iteration  16: 15685990.237 ops/s
# Warmup Iteration  17: 16040856.225 ops/s
# Warmup Iteration  18: 16872562.759 ops/s
# Warmup Iteration  19: 16803193.822 ops/s
# Warmup Iteration  20: 16740368.982 ops/s
# Warmup Iteration  21: 15683984.365 ops/s
# Warmup Iteration  22: 16133059.879 ops/s
# Warmup Iteration  23: 16501251.971 ops/s
# Warmup Iteration  24: 16045621.526 ops/s
# Warmup Iteration  25: 16496657.010 ops/s
# Warmup Iteration  26: 16264664.444 ops/s
# Warmup Iteration  27: 15777620.283 ops/s
# Warmup Iteration  28: 16369283.562 ops/s
# Warmup Iteration  29: 16066545.703 ops/s
# Warmup Iteration  30: 16132100.762 ops/s
Iteration   1: 16191226.419 ops/s
Iteration   2: 15744892.161 ops/s
Iteration   3: 15894207.727 ops/s
Iteration   4: 16445652.785 ops/s
Iteration   5: 16445113.014 ops/s
Iteration   6: 15992518.921 ops/s
Iteration   7: 15644402.128 ops/s
Iteration   8: 16464437.638 ops/s
Iteration   9: 16851697.722 ops/s
Iteration  10: 15925868.676 ops/s
Iteration  11: 16066697.986 ops/s
Iteration  12: 15759014.270 ops/s
Iteration  13: 15786978.243 ops/s
Iteration  14: 16846159.734 ops/s
Iteration  15: 16531729.146 ops/s
Iteration  16: 15601587.514 ops/s
Iteration  17: 15774988.778 ops/s
Iteration  18: 15821974.319 ops/s
Iteration  19: 15865960.816 ops/s
Iteration  20: 15853662.255 ops/s
Iteration  21: 15712634.434 ops/s
Iteration  22: 15544356.434 ops/s
Iteration  23: 15788932.390 ops/s
Iteration  24: 16210488.058 ops/s
Iteration  25: 15848407.612 ops/s
Iteration  26: 15790519.471 ops/s
Iteration  27: 15899273.005 ops/s
Iteration  28: 16179975.897 ops/s
Iteration  29: 16102538.818 ops/s
Iteration  30: 16226196.522 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_hashingStrategy":
  16027069.763 ±(99.9%) 232034.386 ops/s [Average]
  (min, avg, max) = (15544356.434, 16027069.763, 16851697.722), stdev = 347298.172
  CI (99.9%): [15795035.377, 16259104.149] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_hashingStrategy  thrpt   30  16027069.763 ± 232034.386  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3701350.601 ops/s
# Warmup Iteration   2: 8297180.037 ops/s
# Warmup Iteration   3: 8299952.569 ops/s
# Warmup Iteration   4: 6926164.327 ops/s
# Warmup Iteration   5: 8398738.523 ops/s
# Warmup Iteration   6: 8449584.724 ops/s
# Warmup Iteration   7: 8531042.176 ops/s
# Warmup Iteration   8: 9058751.860 ops/s
# Warmup Iteration   9: 8417813.121 ops/s
# Warmup Iteration  10: 8409838.672 ops/s
# Warmup Iteration  11: 8409199.261 ops/s
# Warmup Iteration  12: 8510115.908 ops/s
# Warmup Iteration  13: 8577281.562 ops/s
# Warmup Iteration  14: 8872354.583 ops/s
# Warmup Iteration  15: 8506074.382 ops/s
# Warmup Iteration  16: 8717406.365 ops/s
# Warmup Iteration  17: 8422245.011 ops/s
# Warmup Iteration  18: 8856893.568 ops/s
# Warmup Iteration  19: 8695504.990 ops/s
# Warmup Iteration  20: 9092433.524 ops/s
# Warmup Iteration  21: 9080215.612 ops/s
# Warmup Iteration  22: 9078962.408 ops/s
# Warmup Iteration  23: 9069928.221 ops/s
# Warmup Iteration  24: 9080464.147 ops/s
# Warmup Iteration  25: 9074518.181 ops/s
# Warmup Iteration  26: 9036333.155 ops/s
# Warmup Iteration  27: 9070531.237 ops/s
# Warmup Iteration  28: 8726492.521 ops/s
# Warmup Iteration  29: 8608433.649 ops/s
# Warmup Iteration  30: 9028034.226 ops/s
Iteration   1: 8588824.906 ops/s
Iteration   2: 8368489.690 ops/s
Iteration   3: 8517963.876 ops/s
Iteration   4: 8581339.999 ops/s
Iteration   5: 8969957.227 ops/s
Iteration   6: 9090546.437 ops/s
Iteration   7: 9081695.404 ops/s
Iteration   8: 8689435.590 ops/s
Iteration   9: 8537715.863 ops/s
Iteration  10: 8352471.353 ops/s
Iteration  11: 8682044.484 ops/s
Iteration  12: 8820436.054 ops/s
Iteration  13: 8610588.416 ops/s
Iteration  14: 8419616.958 ops/s
Iteration  15: 8495790.108 ops/s
Iteration  16: 8638895.280 ops/s
Iteration  17: 8295629.506 ops/s
Iteration  18: 8538875.214 ops/s
Iteration  19: 8931369.079 ops/s
Iteration  20: 8831667.843 ops/s
Iteration  21: 8426096.872 ops/s
Iteration  22: 8634517.744 ops/s
Iteration  23: 8436746.208 ops/s
Iteration  24: 8742978.640 ops/s
Iteration  25: 8595972.383 ops/s
Iteration  26: 8515285.982 ops/s
Iteration  27: 9032165.258 ops/s
Iteration  28: 8758422.976 ops/s
Iteration  29: 8883720.478 ops/s
Iteration  30: 8703179.427 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_injectInto":
  8659081.309 ±(99.9%) 146149.591 ops/s [Average]
  (min, avg, max) = (8295629.506, 8659081.309, 9090546.437), stdev = 218749.844
  CI (99.9%): [8512931.718, 8805230.900] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_injectInto  thrpt   30  8659081.309 ± 146149.591  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3091424.323 ops/s
# Warmup Iteration   2: 6797614.824 ops/s
# Warmup Iteration   3: 7004057.570 ops/s
# Warmup Iteration   4: 6376224.334 ops/s
# Warmup Iteration   5: 6244894.037 ops/s
# Warmup Iteration   6: 6922511.593 ops/s
# Warmup Iteration   7: 6972924.000 ops/s
# Warmup Iteration   8: 6708040.093 ops/s
# Warmup Iteration   9: 6887053.723 ops/s
# Warmup Iteration  10: 7298241.641 ops/s
# Warmup Iteration  11: 6994982.358 ops/s
# Warmup Iteration  12: 6947508.734 ops/s
# Warmup Iteration  13: 6731187.253 ops/s
# Warmup Iteration  14: 6773334.927 ops/s
# Warmup Iteration  15: 6661021.427 ops/s
# Warmup Iteration  16: 6797661.970 ops/s
# Warmup Iteration  17: 6699573.006 ops/s
# Warmup Iteration  18: 6741477.217 ops/s
# Warmup Iteration  19: 6760114.618 ops/s
# Warmup Iteration  20: 6853451.760 ops/s
# Warmup Iteration  21: 6832479.136 ops/s
# Warmup Iteration  22: 6882254.248 ops/s
# Warmup Iteration  23: 6930920.263 ops/s
# Warmup Iteration  24: 6964591.862 ops/s
# Warmup Iteration  25: 6853536.616 ops/s
# Warmup Iteration  26: 7126036.207 ops/s
# Warmup Iteration  27: 6948316.050 ops/s
# Warmup Iteration  28: 7244923.498 ops/s
# Warmup Iteration  29: 6835182.308 ops/s
# Warmup Iteration  30: 6848033.098 ops/s
Iteration   1: 6736700.199 ops/s
Iteration   2: 6799546.920 ops/s
Iteration   3: 6767659.361 ops/s
Iteration   4: 6803605.984 ops/s
Iteration   5: 6962451.833 ops/s
Iteration   6: 6966643.003 ops/s
Iteration   7: 7200813.059 ops/s
Iteration   8: 7301828.308 ops/s
Iteration   9: 7305252.886 ops/s
Iteration  10: 7312234.577 ops/s
Iteration  11: 7302275.448 ops/s
Iteration  12: 7309446.538 ops/s
Iteration  13: 7311909.717 ops/s
Iteration  14: 7295634.777 ops/s
Iteration  15: 7295619.906 ops/s
Iteration  16: 7316456.540 ops/s
Iteration  17: 7312726.817 ops/s
Iteration  18: 7294865.181 ops/s
Iteration  19: 7293271.581 ops/s
Iteration  20: 7293869.681 ops/s
Iteration  21: 7293776.109 ops/s
Iteration  22: 7311434.821 ops/s
Iteration  23: 7249634.412 ops/s
Iteration  24: 6893152.943 ops/s
Iteration  25: 6855775.764 ops/s
Iteration  26: 6792018.994 ops/s
Iteration  27: 6799854.482 ops/s
Iteration  28: 6805065.727 ops/s
Iteration  29: 6700796.814 ops/s
Iteration  30: 7187466.830 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_injectIntoDouble":
  7102392.974 ±(99.9%) 159481.900 ops/s [Average]
  (min, avg, max) = (6700796.814, 7102392.974, 7316456.540), stdev = 238705.018
  CI (99.9%): [6942911.074, 7261874.873] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  7102392.974 ± 159481.900  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3200166.123 ops/s
# Warmup Iteration   2: 7951845.111 ops/s
# Warmup Iteration   3: 8053466.834 ops/s
# Warmup Iteration   4: 6637988.942 ops/s
# Warmup Iteration   5: 8119384.817 ops/s
# Warmup Iteration   6: 8094984.363 ops/s
# Warmup Iteration   7: 8293433.966 ops/s
# Warmup Iteration   8: 8097101.995 ops/s
# Warmup Iteration   9: 8305832.918 ops/s
# Warmup Iteration  10: 8343998.292 ops/s
# Warmup Iteration  11: 8327736.736 ops/s
# Warmup Iteration  12: 8288456.140 ops/s
# Warmup Iteration  13: 8138198.005 ops/s
# Warmup Iteration  14: 8159839.989 ops/s
# Warmup Iteration  15: 8011513.106 ops/s
# Warmup Iteration  16: 8003065.891 ops/s
# Warmup Iteration  17: 8160391.084 ops/s
# Warmup Iteration  18: 8328443.648 ops/s
# Warmup Iteration  19: 8220333.434 ops/s
# Warmup Iteration  20: 8068994.098 ops/s
# Warmup Iteration  21: 8043242.268 ops/s
# Warmup Iteration  22: 8081523.969 ops/s
# Warmup Iteration  23: 8477838.872 ops/s
# Warmup Iteration  24: 8687045.437 ops/s
# Warmup Iteration  25: 8387198.800 ops/s
# Warmup Iteration  26: 8692806.950 ops/s
# Warmup Iteration  27: 8546045.557 ops/s
# Warmup Iteration  28: 8189708.356 ops/s
# Warmup Iteration  29: 8319375.306 ops/s
# Warmup Iteration  30: 8207735.756 ops/s
Iteration   1: 8165655.493 ops/s
Iteration   2: 8181259.873 ops/s
Iteration   3: 8175667.091 ops/s
Iteration   4: 8150236.679 ops/s
Iteration   5: 8057465.136 ops/s
Iteration   6: 8016876.154 ops/s
Iteration   7: 8150722.234 ops/s
Iteration   8: 8149538.031 ops/s
Iteration   9: 8145639.653 ops/s
Iteration  10: 7978352.855 ops/s
Iteration  11: 8274021.747 ops/s
Iteration  12: 8555252.070 ops/s
Iteration  13: 8682396.249 ops/s
Iteration  14: 8289236.848 ops/s
Iteration  15: 8136881.591 ops/s
Iteration  16: 8324106.647 ops/s
Iteration  17: 8065026.209 ops/s
Iteration  18: 8166491.121 ops/s
Iteration  19: 8255300.890 ops/s
Iteration  20: 8219821.321 ops/s
Iteration  21: 8273348.392 ops/s
Iteration  22: 8328892.717 ops/s
Iteration  23: 8227263.730 ops/s
Iteration  24: 8109299.361 ops/s
Iteration  25: 8112421.329 ops/s
Iteration  26: 8094345.904 ops/s
Iteration  27: 8185351.579 ops/s
Iteration  28: 8363322.920 ops/s
Iteration  29: 8218647.384 ops/s
Iteration  30: 8074770.769 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_injectIntoFloat":
  8204253.733 ±(99.9%) 97863.190 ops/s [Average]
  (min, avg, max) = (7978352.855, 8204253.733, 8682396.249), stdev = 146477.027
  CI (99.9%): [8106390.543, 8302116.922] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  8204253.733 ± 97863.190  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3160877.726 ops/s
# Warmup Iteration   2: 8351788.165 ops/s
# Warmup Iteration   3: 8712697.095 ops/s
# Warmup Iteration   4: 7246806.404 ops/s
# Warmup Iteration   5: 8777526.577 ops/s
# Warmup Iteration   6: 8768119.193 ops/s
# Warmup Iteration   7: 8776728.234 ops/s
# Warmup Iteration   8: 8772065.836 ops/s
# Warmup Iteration   9: 8768669.624 ops/s
# Warmup Iteration  10: 8756880.503 ops/s
# Warmup Iteration  11: 8583738.773 ops/s
# Warmup Iteration  12: 8399582.279 ops/s
# Warmup Iteration  13: 8411503.600 ops/s
# Warmup Iteration  14: 8520453.823 ops/s
# Warmup Iteration  15: 8547448.464 ops/s
# Warmup Iteration  16: 8479933.014 ops/s
# Warmup Iteration  17: 8375317.125 ops/s
# Warmup Iteration  18: 8424256.710 ops/s
# Warmup Iteration  19: 8506441.483 ops/s
# Warmup Iteration  20: 8591396.473 ops/s
# Warmup Iteration  21: 8737300.123 ops/s
# Warmup Iteration  22: 8637512.498 ops/s
# Warmup Iteration  23: 8758987.172 ops/s
# Warmup Iteration  24: 8288234.569 ops/s
# Warmup Iteration  25: 8134202.780 ops/s
# Warmup Iteration  26: 8247511.500 ops/s
# Warmup Iteration  27: 8231892.047 ops/s
# Warmup Iteration  28: 8197837.277 ops/s
# Warmup Iteration  29: 8436166.269 ops/s
# Warmup Iteration  30: 8176825.772 ops/s
Iteration   1: 8186994.858 ops/s
Iteration   2: 8292440.842 ops/s
Iteration   3: 8287735.943 ops/s
Iteration   4: 8546339.851 ops/s
Iteration   5: 8341986.262 ops/s
Iteration   6: 8169852.967 ops/s
Iteration   7: 8380851.701 ops/s
Iteration   8: 8418835.213 ops/s
Iteration   9: 8223456.076 ops/s
Iteration  10: 8168984.172 ops/s
Iteration  11: 8105430.959 ops/s
Iteration  12: 8183420.376 ops/s
Iteration  13: 8289331.345 ops/s
Iteration  14: 8733857.593 ops/s
Iteration  15: 8735809.402 ops/s
Iteration  16: 8772613.611 ops/s
Iteration  17: 8732669.303 ops/s
Iteration  18: 8692372.977 ops/s
Iteration  19: 8551994.878 ops/s
Iteration  20: 8495683.607 ops/s
Iteration  21: 8510308.156 ops/s
Iteration  22: 8645919.535 ops/s
Iteration  23: 8102176.109 ops/s
Iteration  24: 8318249.846 ops/s
Iteration  25: 8249335.070 ops/s
Iteration  26: 8135671.977 ops/s
Iteration  27: 8134176.651 ops/s
Iteration  28: 8225675.637 ops/s
Iteration  29: 8198885.073 ops/s
Iteration  30: 8212577.287 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_injectIntoInt":
  8368121.243 ±(99.9%) 145568.832 ops/s [Average]
  (min, avg, max) = (8102176.109, 8368121.243, 8772613.611), stdev = 217880.591
  CI (99.9%): [8222552.411, 8513690.074] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_injectIntoInt  thrpt   30  8368121.243 ± 145568.832  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3335491.689 ops/s
# Warmup Iteration   2: 8216207.078 ops/s
# Warmup Iteration   3: 8416138.735 ops/s
# Warmup Iteration   4: 6843057.124 ops/s
# Warmup Iteration   5: 8426480.917 ops/s
# Warmup Iteration   6: 8705756.364 ops/s
# Warmup Iteration   7: 8442796.738 ops/s
# Warmup Iteration   8: 8401515.967 ops/s
# Warmup Iteration   9: 8390505.472 ops/s
# Warmup Iteration  10: 8511004.150 ops/s
# Warmup Iteration  11: 8378161.954 ops/s
# Warmup Iteration  12: 8679046.141 ops/s
# Warmup Iteration  13: 9031648.904 ops/s
# Warmup Iteration  14: 8716465.063 ops/s
# Warmup Iteration  15: 8449802.537 ops/s
# Warmup Iteration  16: 8517812.537 ops/s
# Warmup Iteration  17: 8885207.115 ops/s
# Warmup Iteration  18: 9028332.073 ops/s
# Warmup Iteration  19: 9026833.866 ops/s
# Warmup Iteration  20: 9037481.951 ops/s
# Warmup Iteration  21: 9031842.250 ops/s
# Warmup Iteration  22: 9038296.701 ops/s
# Warmup Iteration  23: 9029894.480 ops/s
# Warmup Iteration  24: 9028599.000 ops/s
# Warmup Iteration  25: 8949248.369 ops/s
# Warmup Iteration  26: 8469689.350 ops/s
# Warmup Iteration  27: 8433278.055 ops/s
# Warmup Iteration  28: 8585566.687 ops/s
# Warmup Iteration  29: 8603529.544 ops/s
# Warmup Iteration  30: 8458215.282 ops/s
Iteration   1: 8542648.605 ops/s
Iteration   2: 8461415.116 ops/s
Iteration   3: 8649841.729 ops/s
Iteration   4: 8422586.742 ops/s
Iteration   5: 8543022.021 ops/s
Iteration   6: 8394437.533 ops/s
Iteration   7: 8632377.677 ops/s
Iteration   8: 8691204.191 ops/s
Iteration   9: 8560208.028 ops/s
Iteration  10: 8556432.696 ops/s
Iteration  11: 8645986.040 ops/s
Iteration  12: 8634123.348 ops/s
Iteration  13: 8623058.330 ops/s
Iteration  14: 8472612.759 ops/s
Iteration  15: 8453483.262 ops/s
Iteration  16: 8371199.267 ops/s
Iteration  17: 8474336.298 ops/s
Iteration  18: 8626931.322 ops/s
Iteration  19: 8567654.289 ops/s
Iteration  20: 8766236.616 ops/s
Iteration  21: 8566799.010 ops/s
Iteration  22: 8467939.336 ops/s
Iteration  23: 8501315.080 ops/s
Iteration  24: 8512298.459 ops/s
Iteration  25: 8610659.553 ops/s
Iteration  26: 8575483.753 ops/s
Iteration  27: 8692020.460 ops/s
Iteration  28: 8695601.647 ops/s
Iteration  29: 8607778.687 ops/s
Iteration  30: 8607057.835 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_injectIntoLong":
  8564224.990 ±(99.9%) 64450.457 ops/s [Average]
  (min, avg, max) = (8371199.267, 8564224.990, 8766236.616), stdev = 96466.417
  CI (99.9%): [8499774.533, 8628675.446] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_injectIntoLong  thrpt   30  8564224.990 ± 64450.457  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_injectIntoWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_injectIntoWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4365287.791 ops/s
# Warmup Iteration   2: 9748545.814 ops/s
# Warmup Iteration   3: 10181722.481 ops/s
# Warmup Iteration   4: 8315157.267 ops/s
# Warmup Iteration   5: 9517162.165 ops/s
# Warmup Iteration   6: 9607520.620 ops/s
# Warmup Iteration   7: 9655551.268 ops/s
# Warmup Iteration   8: 9836685.534 ops/s
# Warmup Iteration   9: 9655750.773 ops/s
# Warmup Iteration  10: 9808391.451 ops/s
# Warmup Iteration  11: 9530394.485 ops/s
# Warmup Iteration  12: 9414658.241 ops/s
# Warmup Iteration  13: 9451383.241 ops/s
# Warmup Iteration  14: 9455788.227 ops/s
# Warmup Iteration  15: 9447399.871 ops/s
# Warmup Iteration  16: 9603880.694 ops/s
# Warmup Iteration  17: 9448386.925 ops/s
# Warmup Iteration  18: 9562106.957 ops/s
# Warmup Iteration  19: 9531789.891 ops/s
# Warmup Iteration  20: 9609670.856 ops/s
# Warmup Iteration  21: 9607321.158 ops/s
# Warmup Iteration  22: 9532339.194 ops/s
# Warmup Iteration  23: 9481301.682 ops/s
# Warmup Iteration  24: 10239778.916 ops/s
# Warmup Iteration  25: 9505584.773 ops/s
# Warmup Iteration  26: 9925036.524 ops/s
# Warmup Iteration  27: 9418614.563 ops/s
# Warmup Iteration  28: 9713290.916 ops/s
# Warmup Iteration  29: 9814597.574 ops/s
# Warmup Iteration  30: 9443006.180 ops/s
Iteration   1: 9637072.615 ops/s
Iteration   2: 9585253.638 ops/s
Iteration   3: 10127236.850 ops/s
Iteration   4: 10245609.445 ops/s
Iteration   5: 10276599.103 ops/s
Iteration   6: 10228711.437 ops/s
Iteration   7: 10269586.009 ops/s
Iteration   8: 10275281.501 ops/s
Iteration   9: 10280737.847 ops/s
Iteration  10: 10258943.908 ops/s
Iteration  11: 10237616.265 ops/s
Iteration  12: 10266165.248 ops/s
Iteration  13: 10260730.660 ops/s
Iteration  14: 10243048.538 ops/s
Iteration  15: 10246884.148 ops/s
Iteration  16: 10260572.255 ops/s
Iteration  17: 10231698.597 ops/s
Iteration  18: 10263061.864 ops/s
Iteration  19: 10209990.057 ops/s
Iteration  20: 9621077.375 ops/s
Iteration  21: 9650151.241 ops/s
Iteration  22: 10094636.039 ops/s
Iteration  23: 9720230.133 ops/s
Iteration  24: 10027500.050 ops/s
Iteration  25: 10077105.439 ops/s
Iteration  26: 9480184.097 ops/s
Iteration  27: 9499957.672 ops/s
Iteration  28: 9581888.120 ops/s
Iteration  29: 9758559.000 ops/s
Iteration  30: 10260507.011 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_injectIntoWith":
  10039219.872 ±(99.9%) 195715.256 ops/s [Average]
  (min, avg, max) = (9480184.097, 10039219.872, 10280737.847), stdev = 292937.404
  CI (99.9%): [9843504.616, 10234935.128] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_injectIntoWith  thrpt   30  10039219.872 ± 195715.256  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2527628.500 ops/s
# Warmup Iteration   2: 4227204.278 ops/s
# Warmup Iteration   3: 4742059.031 ops/s
# Warmup Iteration   4: 4736278.896 ops/s
# Warmup Iteration   5: 4770574.266 ops/s
# Warmup Iteration   6: 5071550.799 ops/s
# Warmup Iteration   7: 4918572.976 ops/s
# Warmup Iteration   8: 4911230.390 ops/s
# Warmup Iteration   9: 4877185.248 ops/s
# Warmup Iteration  10: 5054720.266 ops/s
# Warmup Iteration  11: 4868004.434 ops/s
# Warmup Iteration  12: 4700381.235 ops/s
# Warmup Iteration  13: 4758875.451 ops/s
# Warmup Iteration  14: 5039143.201 ops/s
# Warmup Iteration  15: 4699299.200 ops/s
# Warmup Iteration  16: 4881890.517 ops/s
# Warmup Iteration  17: 4690300.819 ops/s
# Warmup Iteration  18: 4888473.918 ops/s
# Warmup Iteration  19: 4957823.666 ops/s
# Warmup Iteration  20: 4829068.081 ops/s
# Warmup Iteration  21: 4779580.293 ops/s
# Warmup Iteration  22: 4856440.241 ops/s
# Warmup Iteration  23: 4866442.143 ops/s
# Warmup Iteration  24: 4848200.685 ops/s
# Warmup Iteration  25: 4794319.436 ops/s
# Warmup Iteration  26: 4875658.230 ops/s
# Warmup Iteration  27: 4793276.542 ops/s
# Warmup Iteration  28: 4774052.090 ops/s
# Warmup Iteration  29: 4782196.106 ops/s
# Warmup Iteration  30: 4782064.403 ops/s
Iteration   1: 5027049.880 ops/s
Iteration   2: 4853895.381 ops/s
Iteration   3: 4744955.454 ops/s
Iteration   4: 4951807.660 ops/s
Iteration   5: 4826546.642 ops/s
Iteration   6: 4846254.083 ops/s
Iteration   7: 4868828.790 ops/s
Iteration   8: 4782721.229 ops/s
Iteration   9: 4796846.364 ops/s
Iteration  10: 4876245.767 ops/s
Iteration  11: 4788658.250 ops/s
Iteration  12: 4745890.025 ops/s
Iteration  13: 4755671.429 ops/s
Iteration  14: 5004705.098 ops/s
Iteration  15: 4795656.785 ops/s
Iteration  16: 5076328.667 ops/s
Iteration  17: 5058901.838 ops/s
Iteration  18: 4688243.113 ops/s
Iteration  19: 4829049.178 ops/s
Iteration  20: 4700128.237 ops/s
Iteration  21: 4717105.984 ops/s
Iteration  22: 4818348.159 ops/s
Iteration  23: 4790231.455 ops/s
Iteration  24: 4779574.209 ops/s
Iteration  25: 5002087.730 ops/s
Iteration  26: 4750491.360 ops/s
Iteration  27: 4842024.775 ops/s
Iteration  28: 4842473.510 ops/s
Iteration  29: 4845165.435 ops/s
Iteration  30: 4797887.208 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_isEmpty":
  4840125.790 ±(99.9%) 69763.931 ops/s [Average]
  (min, avg, max) = (4688243.113, 4840125.790, 5076328.667), stdev = 104419.376
  CI (99.9%): [4770361.858, 4909889.721] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_isEmpty  thrpt   30  4840125.790 ± 69763.931  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 98478.002 ops/s
# Warmup Iteration   2: 114127.158 ops/s
# Warmup Iteration   3: 135233.476 ops/s
# Warmup Iteration   4: 147411.336 ops/s
# Warmup Iteration   5: 146649.438 ops/s
# Warmup Iteration   6: 146507.718 ops/s
# Warmup Iteration   7: 147239.766 ops/s
# Warmup Iteration   8: 146963.720 ops/s
# Warmup Iteration   9: 142482.452 ops/s
# Warmup Iteration  10: 138161.329 ops/s
# Warmup Iteration  11: 138068.762 ops/s
# Warmup Iteration  12: 139796.788 ops/s
# Warmup Iteration  13: 137131.612 ops/s
# Warmup Iteration  14: 111664.634 ops/s
# Warmup Iteration  15: 139318.488 ops/s
# Warmup Iteration  16: 137402.749 ops/s
# Warmup Iteration  17: 144586.308 ops/s
# Warmup Iteration  18: 147918.307 ops/s
# Warmup Iteration  19: 143978.564 ops/s
# Warmup Iteration  20: 143620.574 ops/s
# Warmup Iteration  21: 142636.166 ops/s
# Warmup Iteration  22: 141831.646 ops/s
# Warmup Iteration  23: 144369.949 ops/s
# Warmup Iteration  24: 148459.017 ops/s
# Warmup Iteration  25: 146414.069 ops/s
# Warmup Iteration  26: 146229.126 ops/s
# Warmup Iteration  27: 146624.213 ops/s
# Warmup Iteration  28: 143849.780 ops/s
# Warmup Iteration  29: 140259.072 ops/s
# Warmup Iteration  30: 142343.255 ops/s
Iteration   1: 143091.774 ops/s
Iteration   2: 142386.043 ops/s
Iteration   3: 142899.315 ops/s
Iteration   4: 152757.600 ops/s
Iteration   5: 145918.261 ops/s
Iteration   6: 147619.358 ops/s
Iteration   7: 142806.981 ops/s
Iteration   8: 151316.299 ops/s
Iteration   9: 142037.006 ops/s
Iteration  10: 148768.295 ops/s
Iteration  11: 152444.066 ops/s
Iteration  12: 149012.357 ops/s
Iteration  13: 147715.787 ops/s
Iteration  14: 153193.544 ops/s
Iteration  15: 147393.720 ops/s
Iteration  16: 143247.890 ops/s
Iteration  17: 145007.853 ops/s
Iteration  18: 143698.813 ops/s
Iteration  19: 144946.468 ops/s
Iteration  20: 145680.015 ops/s
Iteration  21: 141314.880 ops/s
Iteration  22: 146134.021 ops/s
Iteration  23: 141671.699 ops/s
Iteration  24: 143839.767 ops/s
Iteration  25: 147447.280 ops/s
Iteration  26: 146288.665 ops/s
Iteration  27: 143434.649 ops/s
Iteration  28: 141168.538 ops/s
Iteration  29: 143454.285 ops/s
Iteration  30: 143324.567 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_iterator":
  145667.327 ±(99.9%) 2325.503 ops/s [Average]
  (min, avg, max) = (141168.538, 145667.327, 153193.544), stdev = 3480.703
  CI (99.9%): [143341.824, 147992.829] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_iterator  thrpt   30  145667.327 ± 2325.503  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2042649.961 ops/s
# Warmup Iteration   2: 3147334.413 ops/s
# Warmup Iteration   3: 3485348.828 ops/s
# Warmup Iteration   4: 3589118.232 ops/s
# Warmup Iteration   5: 3465489.005 ops/s
# Warmup Iteration   6: 3507994.027 ops/s
# Warmup Iteration   7: 2872842.458 ops/s
# Warmup Iteration   8: 3531028.750 ops/s
# Warmup Iteration   9: 3644991.870 ops/s
# Warmup Iteration  10: 3601768.343 ops/s
# Warmup Iteration  11: 3554644.640 ops/s
# Warmup Iteration  12: 3566453.553 ops/s
# Warmup Iteration  13: 3588884.386 ops/s
# Warmup Iteration  14: 3593834.784 ops/s
# Warmup Iteration  15: 3683805.339 ops/s
# Warmup Iteration  16: 3760313.894 ops/s
# Warmup Iteration  17: 3757194.410 ops/s
# Warmup Iteration  18: 3751281.832 ops/s
# Warmup Iteration  19: 3749207.559 ops/s
# Warmup Iteration  20: 3756057.729 ops/s
# Warmup Iteration  21: 3746706.943 ops/s
# Warmup Iteration  22: 3753225.285 ops/s
# Warmup Iteration  23: 3665441.625 ops/s
# Warmup Iteration  24: 3564725.701 ops/s
# Warmup Iteration  25: 3477774.806 ops/s
# Warmup Iteration  26: 3634251.575 ops/s
# Warmup Iteration  27: 3746840.836 ops/s
# Warmup Iteration  28: 3597402.704 ops/s
# Warmup Iteration  29: 3433188.807 ops/s
# Warmup Iteration  30: 3495855.773 ops/s
Iteration   1: 3552164.677 ops/s
Iteration   2: 3476379.929 ops/s
Iteration   3: 3621049.471 ops/s
Iteration   4: 3561487.181 ops/s
Iteration   5: 3758485.724 ops/s
Iteration   6: 3749469.777 ops/s
Iteration   7: 3758854.996 ops/s
Iteration   8: 3663477.092 ops/s
Iteration   9: 3499057.435 ops/s
Iteration  10: 3565581.754 ops/s
Iteration  11: 3531381.022 ops/s
Iteration  12: 3525659.805 ops/s
Iteration  13: 3507378.862 ops/s
Iteration  14: 3529455.396 ops/s
Iteration  15: 3742364.634 ops/s
Iteration  16: 3757544.777 ops/s
Iteration  17: 3733505.248 ops/s
Iteration  18: 3750780.736 ops/s
Iteration  19: 3717611.805 ops/s
Iteration  20: 3440168.475 ops/s
Iteration  21: 3482686.222 ops/s
Iteration  22: 3454103.998 ops/s
Iteration  23: 3470475.979 ops/s
Iteration  24: 3455216.423 ops/s
Iteration  25: 3418591.789 ops/s
Iteration  26: 3707911.299 ops/s
Iteration  27: 3722398.843 ops/s
Iteration  28: 3529395.567 ops/s
Iteration  29: 3679860.633 ops/s
Iteration  30: 3459436.014 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_iteratorRemove":
  3594064.519 ±(99.9%) 80288.208 ops/s [Average]
  (min, avg, max) = (3418591.789, 3594064.519, 3758854.996), stdev = 120171.618
  CI (99.9%): [3513776.311, 3674352.726] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_iteratorRemove  thrpt   30  3594064.519 ± 80288.208  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_iteratorRemove2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_iteratorRemove2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1978032.268 ops/s
# Warmup Iteration   2: 3029190.581 ops/s
# Warmup Iteration   3: 3699893.372 ops/s
# Warmup Iteration   4: 3561978.160 ops/s
# Warmup Iteration   5: 3662446.193 ops/s
# Warmup Iteration   6: 3637511.040 ops/s
# Warmup Iteration   7: 2852253.136 ops/s
# Warmup Iteration   8: 3523164.787 ops/s
# Warmup Iteration   9: 3563401.368 ops/s
# Warmup Iteration  10: 3675680.859 ops/s
# Warmup Iteration  11: 3733520.313 ops/s
# Warmup Iteration  12: 3675258.064 ops/s
# Warmup Iteration  13: 3554885.275 ops/s
# Warmup Iteration  14: 3531607.301 ops/s
# Warmup Iteration  15: 3544240.388 ops/s
# Warmup Iteration  16: 3565503.322 ops/s
# Warmup Iteration  17: 3586300.745 ops/s
# Warmup Iteration  18: 3572674.295 ops/s
# Warmup Iteration  19: 3606136.088 ops/s
# Warmup Iteration  20: 3555495.851 ops/s
# Warmup Iteration  21: 3607261.772 ops/s
# Warmup Iteration  22: 3548607.552 ops/s
# Warmup Iteration  23: 3558176.141 ops/s
# Warmup Iteration  24: 3568065.064 ops/s
# Warmup Iteration  25: 3561548.148 ops/s
# Warmup Iteration  26: 3590751.684 ops/s
# Warmup Iteration  27: 3566330.788 ops/s
# Warmup Iteration  28: 3562318.581 ops/s
# Warmup Iteration  29: 3525819.348 ops/s
# Warmup Iteration  30: 3850851.266 ops/s
Iteration   1: 3856356.270 ops/s
Iteration   2: 3848733.326 ops/s
Iteration   3: 3856023.846 ops/s
Iteration   4: 3846969.461 ops/s
Iteration   5: 3844656.757 ops/s
Iteration   6: 3852030.993 ops/s
Iteration   7: 3847961.421 ops/s
Iteration   8: 3839063.345 ops/s
Iteration   9: 3852285.930 ops/s
Iteration  10: 3849570.461 ops/s
Iteration  11: 3851914.606 ops/s
Iteration  12: 3847631.862 ops/s
Iteration  13: 3853307.633 ops/s
Iteration  14: 3845977.576 ops/s
Iteration  15: 3689024.915 ops/s
Iteration  16: 3564228.744 ops/s
Iteration  17: 3527838.658 ops/s
Iteration  18: 3580385.926 ops/s
Iteration  19: 3585238.757 ops/s
Iteration  20: 3604360.400 ops/s
Iteration  21: 3581838.685 ops/s
Iteration  22: 3618161.335 ops/s
Iteration  23: 3593502.081 ops/s
Iteration  24: 3593554.541 ops/s
Iteration  25: 3524274.125 ops/s
Iteration  26: 3591622.488 ops/s
Iteration  27: 3509163.379 ops/s
Iteration  28: 3526962.331 ops/s
Iteration  29: 3517581.488 ops/s
Iteration  30: 3526301.515 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_iteratorRemove2":
  3700884.095 ±(99.9%) 97183.044 ops/s [Average]
  (min, avg, max) = (3509163.379, 3700884.095, 3856356.270), stdev = 145459.017
  CI (99.9%): [3603701.051, 3798067.139] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_iteratorRemove2  thrpt   30  3700884.095 ± 97183.044  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 497841.853 ops/s
# Warmup Iteration   2: 523828.660 ops/s
# Warmup Iteration   3: 614789.882 ops/s
# Warmup Iteration   4: 673860.905 ops/s
# Warmup Iteration   5: 666888.372 ops/s
# Warmup Iteration   6: 683028.873 ops/s
# Warmup Iteration   7: 712593.272 ops/s
# Warmup Iteration   8: 714765.131 ops/s
# Warmup Iteration   9: 696876.580 ops/s
# Warmup Iteration  10: 661775.542 ops/s
# Warmup Iteration  11: 658668.151 ops/s
# Warmup Iteration  12: 658901.555 ops/s
# Warmup Iteration  13: 695634.472 ops/s
# Warmup Iteration  14: 579674.481 ops/s
# Warmup Iteration  15: 676086.151 ops/s
# Warmup Iteration  16: 679243.829 ops/s
# Warmup Iteration  17: 709295.999 ops/s
# Warmup Iteration  18: 729809.124 ops/s
# Warmup Iteration  19: 680934.585 ops/s
# Warmup Iteration  20: 717396.261 ops/s
# Warmup Iteration  21: 705155.597 ops/s
# Warmup Iteration  22: 736421.024 ops/s
# Warmup Iteration  23: 693886.378 ops/s
# Warmup Iteration  24: 719702.437 ops/s
# Warmup Iteration  25: 710494.615 ops/s
# Warmup Iteration  26: 700803.411 ops/s
# Warmup Iteration  27: 743226.930 ops/s
# Warmup Iteration  28: 683968.758 ops/s
# Warmup Iteration  29: 681261.834 ops/s
# Warmup Iteration  30: 688145.776 ops/s
Iteration   1: 688819.166 ops/s
Iteration   2: 730156.692 ops/s
Iteration   3: 692476.776 ops/s
Iteration   4: 682856.216 ops/s
Iteration   5: 687723.918 ops/s
Iteration   6: 691578.830 ops/s
Iteration   7: 680528.560 ops/s
Iteration   8: 682362.817 ops/s
Iteration   9: 695866.484 ops/s
Iteration  10: 702947.426 ops/s
Iteration  11: 739629.571 ops/s
Iteration  12: 743698.763 ops/s
Iteration  13: 728835.968 ops/s
Iteration  14: 681332.145 ops/s
Iteration  15: 706862.330 ops/s
Iteration  16: 701876.391 ops/s
Iteration  17: 707501.835 ops/s
Iteration  18: 712940.533 ops/s
Iteration  19: 703933.163 ops/s
Iteration  20: 713154.135 ops/s
Iteration  21: 718693.023 ops/s
Iteration  22: 688548.057 ops/s
Iteration  23: 689371.560 ops/s
Iteration  24: 735811.354 ops/s
Iteration  25: 707396.139 ops/s
Iteration  26: 704965.570 ops/s
Iteration  27: 729991.104 ops/s
Iteration  28: 744741.888 ops/s
Iteration  29: 743592.796 ops/s
Iteration  30: 746630.873 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_iterator_throws":
  709494.136 ±(99.9%) 14507.037 ops/s [Average]
  (min, avg, max) = (680528.560, 709494.136, 746630.873), stdev = 21713.452
  CI (99.9%): [694987.099, 724001.173] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_iterator_throws  thrpt   30  709494.136 ± 14507.037  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4.812 ops/s
# Warmup Iteration   2: 6.026 ops/s
# Warmup Iteration   3: 7.442 ops/s
# Warmup Iteration   4: 7.636 ops/s
# Warmup Iteration   5: 7.692 ops/s
# Warmup Iteration   6: 7.602 ops/s
# Warmup Iteration   7: 7.210 ops/s
# Warmup Iteration   8: 7.371 ops/s
# Warmup Iteration   9: 7.459 ops/s
# Warmup Iteration  10: 7.237 ops/s
# Warmup Iteration  11: 7.148 ops/s
# Warmup Iteration  12: 7.217 ops/s
# Warmup Iteration  13: 6.237 ops/s
# Warmup Iteration  14: 7.245 ops/s
# Warmup Iteration  15: 7.222 ops/s
# Warmup Iteration  16: 7.324 ops/s
# Warmup Iteration  17: 7.358 ops/s
# Warmup Iteration  18: 7.115 ops/s
# Warmup Iteration  19: 7.361 ops/s
# Warmup Iteration  20: 7.211 ops/s
# Warmup Iteration  21: 7.258 ops/s
# Warmup Iteration  22: 7.196 ops/s
# Warmup Iteration  23: 7.242 ops/s
# Warmup Iteration  24: 7.541 ops/s
# Warmup Iteration  25: 7.415 ops/s
# Warmup Iteration  26: 7.151 ops/s
# Warmup Iteration  27: 7.227 ops/s
# Warmup Iteration  28: 7.120 ops/s
# Warmup Iteration  29: 7.218 ops/s
# Warmup Iteration  30: 7.188 ops/s
Iteration   1: 7.169 ops/s
Iteration   2: 7.286 ops/s
Iteration   3: 7.266 ops/s
Iteration   4: 7.189 ops/s
Iteration   5: 7.306 ops/s
Iteration   6: 7.341 ops/s
Iteration   7: 7.207 ops/s
Iteration   8: 7.208 ops/s
Iteration   9: 7.111 ops/s
Iteration  10: 7.118 ops/s
Iteration  11: 7.263 ops/s
Iteration  12: 7.150 ops/s
Iteration  13: 7.327 ops/s
Iteration  14: 7.208 ops/s
Iteration  15: 6.962 ops/s
Iteration  16: 7.044 ops/s
Iteration  17: 7.120 ops/s
Iteration  18: 7.208 ops/s
Iteration  19: 7.087 ops/s
Iteration  20: 7.147 ops/s
Iteration  21: 7.169 ops/s
Iteration  22: 7.169 ops/s
Iteration  23: 7.188 ops/s
Iteration  24: 7.156 ops/s
Iteration  25: 7.179 ops/s
Iteration  26: 7.195 ops/s
Iteration  27: 7.160 ops/s
Iteration  28: 7.281 ops/s
Iteration  29: 7.257 ops/s
Iteration  30: 7.199 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap":
  7.189 ±(99.9%) 0.055 ops/s [Average]
  (min, avg, max) = (6.962, 7.189, 7.341), stdev = 0.082
  CI (99.9%): [7.134, 7.244] (assumes normal distribution)


# Run complete. Total time: 00:01:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt  Score   Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap  thrpt   30  7.189 ± 0.055  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1162408.123 ops/s
# Warmup Iteration   2: 2942271.467 ops/s
# Warmup Iteration   3: 2950338.361 ops/s
# Warmup Iteration   4: 2390868.137 ops/s
# Warmup Iteration   5: 2942272.411 ops/s
# Warmup Iteration   6: 2852476.914 ops/s
# Warmup Iteration   7: 2924964.975 ops/s
# Warmup Iteration   8: 3046992.240 ops/s
# Warmup Iteration   9: 2998028.030 ops/s
# Warmup Iteration  10: 3078391.480 ops/s
# Warmup Iteration  11: 3139461.575 ops/s
# Warmup Iteration  12: 3138671.944 ops/s
# Warmup Iteration  13: 3140467.559 ops/s
# Warmup Iteration  14: 3139008.555 ops/s
# Warmup Iteration  15: 3138476.540 ops/s
# Warmup Iteration  16: 3139438.901 ops/s
# Warmup Iteration  17: 3136429.032 ops/s
# Warmup Iteration  18: 3129263.929 ops/s
# Warmup Iteration  19: 2945030.162 ops/s
# Warmup Iteration  20: 2907287.639 ops/s
# Warmup Iteration  21: 2963091.563 ops/s
# Warmup Iteration  22: 2881937.188 ops/s
# Warmup Iteration  23: 3001670.815 ops/s
# Warmup Iteration  24: 2900289.255 ops/s
# Warmup Iteration  25: 2924258.628 ops/s
# Warmup Iteration  26: 2877882.344 ops/s
# Warmup Iteration  27: 2979296.968 ops/s
# Warmup Iteration  28: 2980865.530 ops/s
# Warmup Iteration  29: 2918869.459 ops/s
# Warmup Iteration  30: 2951881.326 ops/s
Iteration   1: 2872382.239 ops/s
Iteration   2: 2925275.764 ops/s
Iteration   3: 2973869.062 ops/s
Iteration   4: 3020570.015 ops/s
Iteration   5: 2937233.103 ops/s
Iteration   6: 2950713.344 ops/s
Iteration   7: 2920278.656 ops/s
Iteration   8: 2862553.233 ops/s
Iteration   9: 2911031.160 ops/s
Iteration  10: 2885007.214 ops/s
Iteration  11: 2935183.558 ops/s
Iteration  12: 2970786.861 ops/s
Iteration  13: 2948185.982 ops/s
Iteration  14: 3001935.895 ops/s
Iteration  15: 2991567.348 ops/s
Iteration  16: 2879043.010 ops/s
Iteration  17: 2910652.615 ops/s
Iteration  18: 2959902.229 ops/s
Iteration  19: 2985006.002 ops/s
Iteration  20: 2977872.316 ops/s
Iteration  21: 2943379.584 ops/s
Iteration  22: 2995699.160 ops/s
Iteration  23: 2931762.265 ops/s
Iteration  24: 2977758.355 ops/s
Iteration  25: 3016323.120 ops/s
Iteration  26: 3010260.834 ops/s
Iteration  27: 2911512.065 ops/s
Iteration  28: 2882817.053 ops/s
Iteration  29: 2994843.508 ops/s
Iteration  30: 2956197.504 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_makeString":
  2947986.768 ±(99.9%) 30281.571 ops/s [Average]
  (min, avg, max) = (2862553.233, 2947986.768, 3020570.015), stdev = 45324.034
  CI (99.9%): [2917705.197, 2978268.340] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_makeString  thrpt   30  2947986.768 ± 30281.571  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_makeStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_makeStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1264468.868 ops/s
# Warmup Iteration   2: 2980324.097 ops/s
# Warmup Iteration   3: 3018899.106 ops/s
# Warmup Iteration   4: 2493586.538 ops/s
# Warmup Iteration   5: 2972999.706 ops/s
# Warmup Iteration   6: 2974584.696 ops/s
# Warmup Iteration   7: 2987698.290 ops/s
# Warmup Iteration   8: 2970640.036 ops/s
# Warmup Iteration   9: 2957975.618 ops/s
# Warmup Iteration  10: 2952082.337 ops/s
# Warmup Iteration  11: 3001731.261 ops/s
# Warmup Iteration  12: 3004194.550 ops/s
# Warmup Iteration  13: 2965335.636 ops/s
# Warmup Iteration  14: 3016328.767 ops/s
# Warmup Iteration  15: 2929850.815 ops/s
# Warmup Iteration  16: 2961168.564 ops/s
# Warmup Iteration  17: 2995773.607 ops/s
# Warmup Iteration  18: 2919073.254 ops/s
# Warmup Iteration  19: 2955618.391 ops/s
# Warmup Iteration  20: 3021505.324 ops/s
# Warmup Iteration  21: 2964653.168 ops/s
# Warmup Iteration  22: 2968434.911 ops/s
# Warmup Iteration  23: 3001664.202 ops/s
# Warmup Iteration  24: 2983920.803 ops/s
# Warmup Iteration  25: 3169233.240 ops/s
# Warmup Iteration  26: 3195518.741 ops/s
# Warmup Iteration  27: 3190411.237 ops/s
# Warmup Iteration  28: 3190710.618 ops/s
# Warmup Iteration  29: 3192986.493 ops/s
# Warmup Iteration  30: 3191053.481 ops/s
Iteration   1: 3185605.838 ops/s
Iteration   2: 3192712.034 ops/s
Iteration   3: 3193625.742 ops/s
Iteration   4: 3190006.328 ops/s
Iteration   5: 3104755.311 ops/s
Iteration   6: 3006430.030 ops/s
Iteration   7: 3025389.858 ops/s
Iteration   8: 3017886.238 ops/s
Iteration   9: 2961931.067 ops/s
Iteration  10: 3022020.009 ops/s
Iteration  11: 2958822.422 ops/s
Iteration  12: 2924988.073 ops/s
Iteration  13: 2998435.981 ops/s
Iteration  14: 2989728.912 ops/s
Iteration  15: 2961953.356 ops/s
Iteration  16: 2903654.727 ops/s
Iteration  17: 2972715.391 ops/s
Iteration  18: 3033990.060 ops/s
Iteration  19: 2991297.324 ops/s
Iteration  20: 3013706.332 ops/s
Iteration  21: 2952196.322 ops/s
Iteration  22: 2969693.092 ops/s
Iteration  23: 2998614.061 ops/s
Iteration  24: 3025785.917 ops/s
Iteration  25: 2975082.078 ops/s
Iteration  26: 2965016.849 ops/s
Iteration  27: 2964365.710 ops/s
Iteration  28: 2949763.248 ops/s
Iteration  29: 2962441.354 ops/s
Iteration  30: 2941561.399 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_makeStringWithSeparator":
  3011805.835 ±(99.9%) 54017.836 ops/s [Average]
  (min, avg, max) = (2903654.727, 3011805.835, 3193625.742), stdev = 80851.361
  CI (99.9%): [2957787.999, 3065823.672] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_makeStringWithSeparator  thrpt   30  3011805.835 ± 54017.836  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1247679.630 ops/s
# Warmup Iteration   2: 2902453.193 ops/s
# Warmup Iteration   3: 2933570.753 ops/s
# Warmup Iteration   4: 2485936.066 ops/s
# Warmup Iteration   5: 3044767.601 ops/s
# Warmup Iteration   6: 3168680.322 ops/s
# Warmup Iteration   7: 3131586.063 ops/s
# Warmup Iteration   8: 3013463.716 ops/s
# Warmup Iteration   9: 2968667.359 ops/s
# Warmup Iteration  10: 3048913.199 ops/s
# Warmup Iteration  11: 2949182.037 ops/s
# Warmup Iteration  12: 2965922.667 ops/s
# Warmup Iteration  13: 2924609.947 ops/s
# Warmup Iteration  14: 2967769.072 ops/s
# Warmup Iteration  15: 2957185.117 ops/s
# Warmup Iteration  16: 2965765.616 ops/s
# Warmup Iteration  17: 2933400.184 ops/s
# Warmup Iteration  18: 2944767.536 ops/s
# Warmup Iteration  19: 2898166.839 ops/s
# Warmup Iteration  20: 2992936.899 ops/s
# Warmup Iteration  21: 2918534.849 ops/s
# Warmup Iteration  22: 2958978.140 ops/s
# Warmup Iteration  23: 2935748.992 ops/s
# Warmup Iteration  24: 2929600.203 ops/s
# Warmup Iteration  25: 3074115.872 ops/s
# Warmup Iteration  26: 3170174.849 ops/s
# Warmup Iteration  27: 3132657.740 ops/s
# Warmup Iteration  28: 3080560.591 ops/s
# Warmup Iteration  29: 3120196.025 ops/s
# Warmup Iteration  30: 3057274.906 ops/s
Iteration   1: 2947541.962 ops/s
Iteration   2: 3029114.159 ops/s
Iteration   3: 3032401.155 ops/s
Iteration   4: 2932946.423 ops/s
Iteration   5: 2990447.222 ops/s
Iteration   6: 2913325.551 ops/s
Iteration   7: 2953885.431 ops/s
Iteration   8: 3002144.369 ops/s
Iteration   9: 3053383.274 ops/s
Iteration  10: 2936376.796 ops/s
Iteration  11: 3033170.922 ops/s
Iteration  12: 2959685.016 ops/s
Iteration  13: 2926870.737 ops/s
Iteration  14: 2981769.098 ops/s
Iteration  15: 2968593.493 ops/s
Iteration  16: 2887855.685 ops/s
Iteration  17: 3112596.733 ops/s
Iteration  18: 3142307.154 ops/s
Iteration  19: 3176580.870 ops/s
Iteration  20: 3173469.832 ops/s
Iteration  21: 3168387.766 ops/s
Iteration  22: 3175786.316 ops/s
Iteration  23: 3172926.763 ops/s
Iteration  24: 3170407.525 ops/s
Iteration  25: 3176828.550 ops/s
Iteration  26: 3173307.803 ops/s
Iteration  27: 3172867.817 ops/s
Iteration  28: 3174385.118 ops/s
Iteration  29: 3174202.291 ops/s
Iteration  30: 3172145.218 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd":
  3062857.035 ±(99.9%) 70531.379 ops/s [Average]
  (min, avg, max) = (2887855.685, 3062857.035, 3176828.550), stdev = 105568.055
  CI (99.9%): [2992325.656, 3133388.414] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd  thrpt   30  3062857.035 ± 70531.379  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4693026.785 ops/s
# Warmup Iteration   2: 15052553.069 ops/s
# Warmup Iteration   3: 12112898.065 ops/s
# Warmup Iteration   4: 14743163.178 ops/s
# Warmup Iteration   5: 14576989.712 ops/s
# Warmup Iteration   6: 14711001.046 ops/s
# Warmup Iteration   7: 14618592.083 ops/s
# Warmup Iteration   8: 14854020.568 ops/s
# Warmup Iteration   9: 14729453.993 ops/s
# Warmup Iteration  10: 14601496.740 ops/s
# Warmup Iteration  11: 15195680.397 ops/s
# Warmup Iteration  12: 15373471.329 ops/s
# Warmup Iteration  13: 14534772.220 ops/s
# Warmup Iteration  14: 14676841.743 ops/s
# Warmup Iteration  15: 14458089.671 ops/s
# Warmup Iteration  16: 14552717.541 ops/s
# Warmup Iteration  17: 14569711.575 ops/s
# Warmup Iteration  18: 14676211.341 ops/s
# Warmup Iteration  19: 14701636.799 ops/s
# Warmup Iteration  20: 14998697.379 ops/s
# Warmup Iteration  21: 15025623.673 ops/s
# Warmup Iteration  22: 14640708.114 ops/s
# Warmup Iteration  23: 14899675.927 ops/s
# Warmup Iteration  24: 14589595.846 ops/s
# Warmup Iteration  25: 14966905.627 ops/s
# Warmup Iteration  26: 15033888.657 ops/s
# Warmup Iteration  27: 14834526.058 ops/s
# Warmup Iteration  28: 14881842.977 ops/s
# Warmup Iteration  29: 14920684.876 ops/s
# Warmup Iteration  30: 14995414.175 ops/s
Iteration   1: 15026915.427 ops/s
Iteration   2: 15050506.943 ops/s
Iteration   3: 14390786.559 ops/s
Iteration   4: 14546652.623 ops/s
Iteration   5: 15014141.349 ops/s
Iteration   6: 14867486.780 ops/s
Iteration   7: 14598118.684 ops/s
Iteration   8: 15074129.954 ops/s
Iteration   9: 14895307.940 ops/s
Iteration  10: 15416603.792 ops/s
Iteration  11: 14957658.267 ops/s
Iteration  12: 15263013.025 ops/s
Iteration  13: 15596720.813 ops/s
Iteration  14: 15708019.289 ops/s
Iteration  15: 15603588.136 ops/s
Iteration  16: 15052910.069 ops/s
Iteration  17: 15228951.914 ops/s
Iteration  18: 15706330.309 ops/s
Iteration  19: 15362343.410 ops/s
Iteration  20: 15724891.039 ops/s
Iteration  21: 15616545.968 ops/s
Iteration  22: 15031412.619 ops/s
Iteration  23: 14554003.086 ops/s
Iteration  24: 14902891.135 ops/s
Iteration  25: 14626232.737 ops/s
Iteration  26: 14467062.352 ops/s
Iteration  27: 14615788.079 ops/s
Iteration  28: 14515798.419 ops/s
Iteration  29: 14647504.206 ops/s
Iteration  30: 14351971.158 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_max":
  15013809.536 ±(99.9%) 287941.052 ops/s [Average]
  (min, avg, max) = (14351971.158, 15013809.536, 15724891.039), stdev = 430976.644
  CI (99.9%): [14725868.484, 15301750.588] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_max  thrpt   30  15013809.536 ± 287941.052  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4126850.217 ops/s
# Warmup Iteration   2: 9130978.803 ops/s
# Warmup Iteration   3: 7995959.124 ops/s
# Warmup Iteration   4: 9165313.680 ops/s
# Warmup Iteration   5: 9012174.248 ops/s
# Warmup Iteration   6: 9341963.498 ops/s
# Warmup Iteration   7: 9370451.185 ops/s
# Warmup Iteration   8: 9543886.953 ops/s
# Warmup Iteration   9: 9807727.596 ops/s
# Warmup Iteration  10: 9799152.388 ops/s
# Warmup Iteration  11: 9813016.155 ops/s
# Warmup Iteration  12: 9778905.627 ops/s
# Warmup Iteration  13: 9790749.744 ops/s
# Warmup Iteration  14: 9788716.297 ops/s
# Warmup Iteration  15: 9806470.136 ops/s
# Warmup Iteration  16: 9744902.909 ops/s
# Warmup Iteration  17: 9247379.192 ops/s
# Warmup Iteration  18: 9233904.363 ops/s
# Warmup Iteration  19: 9169612.706 ops/s
# Warmup Iteration  20: 9456963.103 ops/s
# Warmup Iteration  21: 9316050.922 ops/s
# Warmup Iteration  22: 9270593.004 ops/s
# Warmup Iteration  23: 9164431.825 ops/s
# Warmup Iteration  24: 9167865.507 ops/s
# Warmup Iteration  25: 9219798.028 ops/s
# Warmup Iteration  26: 9272634.784 ops/s
# Warmup Iteration  27: 9173610.926 ops/s
# Warmup Iteration  28: 9427082.771 ops/s
# Warmup Iteration  29: 9739420.910 ops/s
# Warmup Iteration  30: 9795113.990 ops/s
Iteration   1: 9807732.336 ops/s
Iteration   2: 9785841.126 ops/s
Iteration   3: 9803552.698 ops/s
Iteration   4: 9778373.063 ops/s
Iteration   5: 9763797.850 ops/s
Iteration   6: 9806972.710 ops/s
Iteration   7: 9789003.285 ops/s
Iteration   8: 9811057.688 ops/s
Iteration   9: 9793459.920 ops/s
Iteration  10: 9794742.096 ops/s
Iteration  11: 9809682.245 ops/s
Iteration  12: 9753744.515 ops/s
Iteration  13: 9794801.571 ops/s
Iteration  14: 9768892.158 ops/s
Iteration  15: 9773369.244 ops/s
Iteration  16: 9819520.176 ops/s
Iteration  17: 9774719.326 ops/s
Iteration  18: 9713769.670 ops/s
Iteration  19: 9751610.327 ops/s
Iteration  20: 9604376.169 ops/s
Iteration  21: 9643210.977 ops/s
Iteration  22: 9660303.783 ops/s
Iteration  23: 9789506.682 ops/s
Iteration  24: 9796620.313 ops/s
Iteration  25: 9779311.106 ops/s
Iteration  26: 9829805.456 ops/s
Iteration  27: 9711434.399 ops/s
Iteration  28: 9123020.868 ops/s
Iteration  29: 9378538.542 ops/s
Iteration  30: 9100152.961 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_maxBy":
  9710364.109 ±(99.9%) 123660.021 ops/s [Average]
  (min, avg, max) = (9100152.961, 9710364.109, 9829805.456), stdev = 185088.512
  CI (99.9%): [9586704.088, 9834024.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_maxBy  thrpt   30  9710364.109 ± 123660.021  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_maxByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_maxByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3171615.489 ops/s
# Warmup Iteration   2: 6551045.425 ops/s
# Warmup Iteration   3: 5558791.616 ops/s
# Warmup Iteration   4: 6496958.156 ops/s
# Warmup Iteration   5: 6486358.576 ops/s
# Warmup Iteration   6: 6407162.129 ops/s
# Warmup Iteration   7: 6418109.773 ops/s
# Warmup Iteration   8: 6759501.969 ops/s
# Warmup Iteration   9: 6816391.291 ops/s
# Warmup Iteration  10: 6809793.595 ops/s
# Warmup Iteration  11: 6735584.029 ops/s
# Warmup Iteration  12: 6574322.108 ops/s
# Warmup Iteration  13: 6370697.216 ops/s
# Warmup Iteration  14: 6389788.322 ops/s
# Warmup Iteration  15: 6370903.509 ops/s
# Warmup Iteration  16: 6442059.938 ops/s
# Warmup Iteration  17: 6462585.554 ops/s
# Warmup Iteration  18: 6440571.498 ops/s
# Warmup Iteration  19: 6346822.125 ops/s
# Warmup Iteration  20: 6334653.229 ops/s
# Warmup Iteration  21: 6465791.655 ops/s
# Warmup Iteration  22: 6594823.620 ops/s
# Warmup Iteration  23: 6884082.701 ops/s
# Warmup Iteration  24: 6816864.021 ops/s
# Warmup Iteration  25: 6845042.293 ops/s
# Warmup Iteration  26: 6825429.860 ops/s
# Warmup Iteration  27: 6821987.888 ops/s
# Warmup Iteration  28: 6838106.372 ops/s
# Warmup Iteration  29: 6857455.188 ops/s
# Warmup Iteration  30: 6872975.686 ops/s
Iteration   1: 6631389.600 ops/s
Iteration   2: 6527336.606 ops/s
Iteration   3: 6421289.582 ops/s
Iteration   4: 6623737.512 ops/s
Iteration   5: 6416985.971 ops/s
Iteration   6: 6461342.517 ops/s
Iteration   7: 6700330.793 ops/s
Iteration   8: 6485837.897 ops/s
Iteration   9: 6397764.178 ops/s
Iteration  10: 6455155.304 ops/s
Iteration  11: 6424417.849 ops/s
Iteration  12: 6353186.316 ops/s
Iteration  13: 6394123.510 ops/s
Iteration  14: 6349276.992 ops/s
Iteration  15: 6503058.414 ops/s
Iteration  16: 6342561.134 ops/s
Iteration  17: 6492428.301 ops/s
Iteration  18: 6417337.016 ops/s
Iteration  19: 6289841.365 ops/s
Iteration  20: 6378043.276 ops/s
Iteration  21: 6442144.924 ops/s
Iteration  22: 6330141.223 ops/s
Iteration  23: 6442993.411 ops/s
Iteration  24: 6472354.420 ops/s
Iteration  25: 6372224.845 ops/s
Iteration  26: 6336488.010 ops/s
Iteration  27: 6417300.032 ops/s
Iteration  28: 6487886.163 ops/s
Iteration  29: 6437012.216 ops/s
Iteration  30: 6483818.309 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_maxByOptional":
  6442926.923 ±(99.9%) 61458.251 ops/s [Average]
  (min, avg, max) = (6289841.365, 6442926.923, 6700330.793), stdev = 91987.823
  CI (99.9%): [6381468.672, 6504385.173] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_maxByOptional  thrpt   30  6442926.923 ± 61458.251  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_maxBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_maxBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2929895.371 ops/s
# Warmup Iteration   2: 6281759.116 ops/s
# Warmup Iteration   3: 6638989.398 ops/s
# Warmup Iteration   4: 6686500.305 ops/s
# Warmup Iteration   5: 5539038.927 ops/s
# Warmup Iteration   6: 6923245.280 ops/s
# Warmup Iteration   7: 6920214.411 ops/s
# Warmup Iteration   8: 6731445.853 ops/s
# Warmup Iteration   9: 6705899.694 ops/s
# Warmup Iteration  10: 6688914.668 ops/s
# Warmup Iteration  11: 6710428.646 ops/s
# Warmup Iteration  12: 6842215.110 ops/s
# Warmup Iteration  13: 6672724.382 ops/s
# Warmup Iteration  14: 6606646.111 ops/s
# Warmup Iteration  15: 6667389.739 ops/s
# Warmup Iteration  16: 6538614.010 ops/s
# Warmup Iteration  17: 6616870.290 ops/s
# Warmup Iteration  18: 6443883.531 ops/s
# Warmup Iteration  19: 6605180.900 ops/s
# Warmup Iteration  20: 6584726.821 ops/s
# Warmup Iteration  21: 6526786.420 ops/s
# Warmup Iteration  22: 6433510.191 ops/s
# Warmup Iteration  23: 6574717.732 ops/s
# Warmup Iteration  24: 6568240.662 ops/s
# Warmup Iteration  25: 6622850.622 ops/s
# Warmup Iteration  26: 6528339.130 ops/s
# Warmup Iteration  27: 6560509.960 ops/s
# Warmup Iteration  28: 6517835.287 ops/s
# Warmup Iteration  29: 6518157.219 ops/s
# Warmup Iteration  30: 6734410.520 ops/s
Iteration   1: 7055425.194 ops/s
Iteration   2: 6941801.548 ops/s
Iteration   3: 6794809.629 ops/s
Iteration   4: 6720578.906 ops/s
Iteration   5: 6949907.898 ops/s
Iteration   6: 6764744.533 ops/s
Iteration   7: 6795802.986 ops/s
Iteration   8: 6757068.878 ops/s
Iteration   9: 6774709.297 ops/s
Iteration  10: 7053247.399 ops/s
Iteration  11: 6927070.936 ops/s
Iteration  12: 6635900.459 ops/s
Iteration  13: 6690122.197 ops/s
Iteration  14: 7049018.656 ops/s
Iteration  15: 7058777.948 ops/s
Iteration  16: 7053824.504 ops/s
Iteration  17: 7053221.601 ops/s
Iteration  18: 7049663.505 ops/s
Iteration  19: 7027223.126 ops/s
Iteration  20: 7063066.751 ops/s
Iteration  21: 7046953.614 ops/s
Iteration  22: 7051282.719 ops/s
Iteration  23: 7061955.439 ops/s
Iteration  24: 7046765.154 ops/s
Iteration  25: 7043389.481 ops/s
Iteration  26: 7057293.317 ops/s
Iteration  27: 7042791.562 ops/s
Iteration  28: 7049592.276 ops/s
Iteration  29: 7055580.079 ops/s
Iteration  30: 6833693.200 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_maxBy_null_throws":
  6950176.093 ±(99.9%) 93508.610 ops/s [Average]
  (min, avg, max) = (6635900.459, 6950176.093, 7063066.751), stdev = 139959.296
  CI (99.9%): [6856667.483, 7043684.703] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_maxBy_null_throws  thrpt   30  6950176.093 ± 93508.610  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_maxOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_maxOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1827942.528 ops/s
# Warmup Iteration   2: 3901262.202 ops/s
# Warmup Iteration   3: 3131250.479 ops/s
# Warmup Iteration   4: 3832238.350 ops/s
# Warmup Iteration   5: 3823178.129 ops/s
# Warmup Iteration   6: 3786813.624 ops/s
# Warmup Iteration   7: 3736297.413 ops/s
# Warmup Iteration   8: 3703151.871 ops/s
# Warmup Iteration   9: 3741070.225 ops/s
# Warmup Iteration  10: 3729527.627 ops/s
# Warmup Iteration  11: 3743920.551 ops/s
# Warmup Iteration  12: 3745385.639 ops/s
# Warmup Iteration  13: 3760244.433 ops/s
# Warmup Iteration  14: 3783288.455 ops/s
# Warmup Iteration  15: 3807073.083 ops/s
# Warmup Iteration  16: 3766495.525 ops/s
# Warmup Iteration  17: 3764431.842 ops/s
# Warmup Iteration  18: 3758778.054 ops/s
# Warmup Iteration  19: 3732060.479 ops/s
# Warmup Iteration  20: 3900240.783 ops/s
# Warmup Iteration  21: 3722825.153 ops/s
# Warmup Iteration  22: 3747602.525 ops/s
# Warmup Iteration  23: 3835620.728 ops/s
# Warmup Iteration  24: 3913800.221 ops/s
# Warmup Iteration  25: 3894226.412 ops/s
# Warmup Iteration  26: 3983745.602 ops/s
# Warmup Iteration  27: 4006813.081 ops/s
# Warmup Iteration  28: 3921408.510 ops/s
# Warmup Iteration  29: 3861083.223 ops/s
# Warmup Iteration  30: 4025978.531 ops/s
Iteration   1: 4024593.179 ops/s
Iteration   2: 4034802.721 ops/s
Iteration   3: 3924822.129 ops/s
Iteration   4: 3754405.934 ops/s
Iteration   5: 3749308.427 ops/s
Iteration   6: 3704741.243 ops/s
Iteration   7: 3790809.860 ops/s
Iteration   8: 3792132.628 ops/s
Iteration   9: 3724738.779 ops/s
Iteration  10: 3834527.034 ops/s
Iteration  11: 4026827.591 ops/s
Iteration  12: 4007012.543 ops/s
Iteration  13: 3842428.769 ops/s
Iteration  14: 3802773.341 ops/s
Iteration  15: 3942086.071 ops/s
Iteration  16: 3752522.255 ops/s
Iteration  17: 3738594.609 ops/s
Iteration  18: 3876670.627 ops/s
Iteration  19: 3899880.036 ops/s
Iteration  20: 3911870.388 ops/s
Iteration  21: 3762077.252 ops/s
Iteration  22: 3804342.988 ops/s
Iteration  23: 3867807.924 ops/s
Iteration  24: 3757497.030 ops/s
Iteration  25: 3853022.690 ops/s
Iteration  26: 4026264.928 ops/s
Iteration  27: 3725206.508 ops/s
Iteration  28: 3786590.261 ops/s
Iteration  29: 3909444.927 ops/s
Iteration  30: 3691906.979 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_maxOptional":
  3843990.322 ±(99.9%) 70818.031 ops/s [Average]
  (min, avg, max) = (3691906.979, 3843990.322, 4034802.721), stdev = 105997.103
  CI (99.9%): [3773172.290, 3914808.353] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_maxOptional  thrpt   30  3843990.322 ± 70818.031  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_max_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_max_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 648998.012 ops/s
# Warmup Iteration   2: 673567.812 ops/s
# Warmup Iteration   3: 966329.407 ops/s
# Warmup Iteration   4: 924182.896 ops/s
# Warmup Iteration   5: 917307.017 ops/s
# Warmup Iteration   6: 972844.648 ops/s
# Warmup Iteration   7: 980606.971 ops/s
# Warmup Iteration   8: 979757.784 ops/s
# Warmup Iteration   9: 976950.062 ops/s
# Warmup Iteration  10: 980273.171 ops/s
# Warmup Iteration  11: 822455.691 ops/s
# Warmup Iteration  12: 979193.871 ops/s
# Warmup Iteration  13: 979634.249 ops/s
# Warmup Iteration  14: 949847.831 ops/s
# Warmup Iteration  15: 879601.124 ops/s
# Warmup Iteration  16: 932176.706 ops/s
# Warmup Iteration  17: 975387.551 ops/s
# Warmup Iteration  18: 996025.478 ops/s
# Warmup Iteration  19: 988701.904 ops/s
# Warmup Iteration  20: 959796.571 ops/s
# Warmup Iteration  21: 959676.639 ops/s
# Warmup Iteration  22: 999798.547 ops/s
# Warmup Iteration  23: 999893.366 ops/s
# Warmup Iteration  24: 986512.734 ops/s
# Warmup Iteration  25: 976437.664 ops/s
# Warmup Iteration  26: 967605.114 ops/s
# Warmup Iteration  27: 965467.275 ops/s
# Warmup Iteration  28: 957204.309 ops/s
# Warmup Iteration  29: 966297.046 ops/s
# Warmup Iteration  30: 954637.170 ops/s
Iteration   1: 897712.992 ops/s
Iteration   2: 967861.584 ops/s
Iteration   3: 965229.070 ops/s
Iteration   4: 953493.021 ops/s
Iteration   5: 1007901.977 ops/s
Iteration   6: 958987.002 ops/s
Iteration   7: 984587.778 ops/s
Iteration   8: 986351.955 ops/s
Iteration   9: 996407.023 ops/s
Iteration  10: 1008145.455 ops/s
Iteration  11: 949195.400 ops/s
Iteration  12: 943328.685 ops/s
Iteration  13: 1006948.911 ops/s
Iteration  14: 985854.609 ops/s
Iteration  15: 995180.779 ops/s
Iteration  16: 987114.436 ops/s
Iteration  17: 985068.943 ops/s
Iteration  18: 984156.630 ops/s
Iteration  19: 957280.280 ops/s
Iteration  20: 956493.162 ops/s
Iteration  21: 988837.039 ops/s
Iteration  22: 955235.741 ops/s
Iteration  23: 984142.914 ops/s
Iteration  24: 958605.197 ops/s
Iteration  25: 1001560.634 ops/s
Iteration  26: 971811.412 ops/s
Iteration  27: 958332.814 ops/s
Iteration  28: 963351.950 ops/s
Iteration  29: 991860.519 ops/s
Iteration  30: 978956.557 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_max_empty_throws":
  974333.149 ±(99.9%) 15816.426 ops/s [Average]
  (min, avg, max) = (897712.992, 974333.149, 1008145.455), stdev = 23673.284
  CI (99.9%): [958516.723, 990149.575] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_max_empty_throws  thrpt   30  974333.149 ± 15816.426  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_max_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_max_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2874949.395 ops/s
# Warmup Iteration   2: 5355133.022 ops/s
# Warmup Iteration   3: 5939244.513 ops/s
# Warmup Iteration   4: 5787119.898 ops/s
# Warmup Iteration   5: 4945575.230 ops/s
# Warmup Iteration   6: 5963224.494 ops/s
# Warmup Iteration   7: 5935723.762 ops/s
# Warmup Iteration   8: 5819017.565 ops/s
# Warmup Iteration   9: 5894891.238 ops/s
# Warmup Iteration  10: 5878239.552 ops/s
# Warmup Iteration  11: 5825300.690 ops/s
# Warmup Iteration  12: 5725860.120 ops/s
# Warmup Iteration  13: 5763441.458 ops/s
# Warmup Iteration  14: 5868452.924 ops/s
# Warmup Iteration  15: 5824688.670 ops/s
# Warmup Iteration  16: 5892949.128 ops/s
# Warmup Iteration  17: 5859555.631 ops/s
# Warmup Iteration  18: 5792890.613 ops/s
# Warmup Iteration  19: 5832171.636 ops/s
# Warmup Iteration  20: 5837194.592 ops/s
# Warmup Iteration  21: 6061040.599 ops/s
# Warmup Iteration  22: 6055614.245 ops/s
# Warmup Iteration  23: 6054778.406 ops/s
# Warmup Iteration  24: 6060806.787 ops/s
# Warmup Iteration  25: 6061114.941 ops/s
# Warmup Iteration  26: 6055004.095 ops/s
# Warmup Iteration  27: 6060507.741 ops/s
# Warmup Iteration  28: 6061210.542 ops/s
# Warmup Iteration  29: 5884694.356 ops/s
# Warmup Iteration  30: 5879955.165 ops/s
Iteration   1: 5785605.446 ops/s
Iteration   2: 5860948.632 ops/s
Iteration   3: 5781291.279 ops/s
Iteration   4: 5824023.799 ops/s
Iteration   5: 5800199.558 ops/s
Iteration   6: 5921848.785 ops/s
Iteration   7: 5906678.044 ops/s
Iteration   8: 5740729.521 ops/s
Iteration   9: 5844495.255 ops/s
Iteration  10: 5836690.792 ops/s
Iteration  11: 5774547.564 ops/s
Iteration  12: 5856285.534 ops/s
Iteration  13: 5911196.492 ops/s
Iteration  14: 5829724.035 ops/s
Iteration  15: 5880725.365 ops/s
Iteration  16: 5948629.672 ops/s
Iteration  17: 5779065.171 ops/s
Iteration  18: 5852117.344 ops/s
Iteration  19: 5873614.690 ops/s
Iteration  20: 5881780.348 ops/s
Iteration  21: 5811246.248 ops/s
Iteration  22: 5800329.857 ops/s
Iteration  23: 5904167.427 ops/s
Iteration  24: 5861289.803 ops/s
Iteration  25: 5858901.786 ops/s
Iteration  26: 5875495.052 ops/s
Iteration  27: 5850304.339 ops/s
Iteration  28: 5874541.506 ops/s
Iteration  29: 5898438.502 ops/s
Iteration  30: 5910261.518 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_max_null_safe":
  5851172.445 ±(99.9%) 33778.512 ops/s [Average]
  (min, avg, max) = (5740729.521, 5851172.445, 5948629.672), stdev = 50558.090
  CI (99.9%): [5817393.933, 5884950.957] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_max_null_safe  thrpt   30  5851172.445 ± 33778.512  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7988336.672 ops/s
# Warmup Iteration   2: 17135902.324 ops/s
# Warmup Iteration   3: 14453988.473 ops/s
# Warmup Iteration   4: 17042539.022 ops/s
# Warmup Iteration   5: 16879069.526 ops/s
# Warmup Iteration   6: 17061415.961 ops/s
# Warmup Iteration   7: 17045867.935 ops/s
# Warmup Iteration   8: 17113087.479 ops/s
# Warmup Iteration   9: 17162020.981 ops/s
# Warmup Iteration  10: 16966858.601 ops/s
# Warmup Iteration  11: 17660115.985 ops/s
# Warmup Iteration  12: 17245560.256 ops/s
# Warmup Iteration  13: 17096126.562 ops/s
# Warmup Iteration  14: 17248343.972 ops/s
# Warmup Iteration  15: 17422171.087 ops/s
# Warmup Iteration  16: 17304376.864 ops/s
# Warmup Iteration  17: 17236007.925 ops/s
# Warmup Iteration  18: 17759511.643 ops/s
# Warmup Iteration  19: 17170636.752 ops/s
# Warmup Iteration  20: 17079192.834 ops/s
# Warmup Iteration  21: 17053529.284 ops/s
# Warmup Iteration  22: 17107886.122 ops/s
# Warmup Iteration  23: 17374688.519 ops/s
# Warmup Iteration  24: 17302912.261 ops/s
# Warmup Iteration  25: 17246080.653 ops/s
# Warmup Iteration  26: 17159199.275 ops/s
# Warmup Iteration  27: 17525717.321 ops/s
# Warmup Iteration  28: 17413291.270 ops/s
# Warmup Iteration  29: 17418111.028 ops/s
# Warmup Iteration  30: 17333081.752 ops/s
Iteration   1: 16893757.143 ops/s
Iteration   2: 17075820.018 ops/s
Iteration   3: 17159443.877 ops/s
Iteration   4: 16940483.192 ops/s
Iteration   5: 17041788.676 ops/s
Iteration   6: 17435657.451 ops/s
Iteration   7: 17251269.849 ops/s
Iteration   8: 17187641.481 ops/s
Iteration   9: 17651014.658 ops/s
Iteration  10: 17807501.867 ops/s
Iteration  11: 17778475.780 ops/s
Iteration  12: 17794972.949 ops/s
Iteration  13: 17729841.410 ops/s
Iteration  14: 17737667.002 ops/s
Iteration  15: 17768886.430 ops/s
Iteration  16: 17759507.074 ops/s
Iteration  17: 17713441.268 ops/s
Iteration  18: 17717893.182 ops/s
Iteration  19: 17769275.576 ops/s
Iteration  20: 17784523.462 ops/s
Iteration  21: 17753766.430 ops/s
Iteration  22: 17757744.780 ops/s
Iteration  23: 17750369.598 ops/s
Iteration  24: 17745861.663 ops/s
Iteration  25: 17748915.476 ops/s
Iteration  26: 17152375.398 ops/s
Iteration  27: 17273974.816 ops/s
Iteration  28: 17428318.369 ops/s
Iteration  29: 17724842.878 ops/s
Iteration  30: 17451633.434 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_max_null_throws":
  17526222.173 ±(99.9%) 202065.221 ops/s [Average]
  (min, avg, max) = (16893757.143, 17526222.173, 17807501.867), stdev = 302441.733
  CI (99.9%): [17324156.952, 17728287.394] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_max_null_throws  thrpt   30  17526222.173 ± 202065.221  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3080204.267 ops/s
# Warmup Iteration   2: 6252358.686 ops/s
# Warmup Iteration   3: 6566150.608 ops/s
# Warmup Iteration   4: 6609619.734 ops/s
# Warmup Iteration   5: 5411285.508 ops/s
# Warmup Iteration   6: 6748810.766 ops/s
# Warmup Iteration   7: 6636486.088 ops/s
# Warmup Iteration   8: 6577148.827 ops/s
# Warmup Iteration   9: 6613888.986 ops/s
# Warmup Iteration  10: 6657602.177 ops/s
# Warmup Iteration  11: 6469644.093 ops/s
# Warmup Iteration  12: 6619755.426 ops/s
# Warmup Iteration  13: 6560368.893 ops/s
# Warmup Iteration  14: 6616833.742 ops/s
# Warmup Iteration  15: 6623355.844 ops/s
# Warmup Iteration  16: 6527840.984 ops/s
# Warmup Iteration  17: 6515521.189 ops/s
# Warmup Iteration  18: 6504603.176 ops/s
# Warmup Iteration  19: 6563607.051 ops/s
# Warmup Iteration  20: 6646984.624 ops/s
# Warmup Iteration  21: 6726588.388 ops/s
# Warmup Iteration  22: 6561748.554 ops/s
# Warmup Iteration  23: 6669825.254 ops/s
# Warmup Iteration  24: 6687896.598 ops/s
# Warmup Iteration  25: 6755385.354 ops/s
# Warmup Iteration  26: 6563408.969 ops/s
# Warmup Iteration  27: 6555104.023 ops/s
# Warmup Iteration  28: 6534050.336 ops/s
# Warmup Iteration  29: 6529991.267 ops/s
# Warmup Iteration  30: 6472367.541 ops/s
Iteration   1: 6501206.785 ops/s
Iteration   2: 6810784.434 ops/s
Iteration   3: 6548393.689 ops/s
Iteration   4: 6590415.987 ops/s
Iteration   5: 6551765.641 ops/s
Iteration   6: 6485845.677 ops/s
Iteration   7: 6546502.866 ops/s
Iteration   8: 6496957.676 ops/s
Iteration   9: 6485004.270 ops/s
Iteration  10: 6572930.007 ops/s
Iteration  11: 6528646.001 ops/s
Iteration  12: 6612458.679 ops/s
Iteration  13: 6509623.353 ops/s
Iteration  14: 6634582.180 ops/s
Iteration  15: 6630954.178 ops/s
Iteration  16: 6686646.968 ops/s
Iteration  17: 6656337.080 ops/s
Iteration  18: 6674559.298 ops/s
Iteration  19: 6523871.767 ops/s
Iteration  20: 6822660.615 ops/s
Iteration  21: 6805690.858 ops/s
Iteration  22: 6777127.281 ops/s
Iteration  23: 6824547.537 ops/s
Iteration  24: 6551819.989 ops/s
Iteration  25: 6650865.045 ops/s
Iteration  26: 6682226.472 ops/s
Iteration  27: 6648838.538 ops/s
Iteration  28: 6653537.993 ops/s
Iteration  29: 6453406.411 ops/s
Iteration  30: 6615286.172 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_max_null_throws_without_comparator":
  6617783.115 ±(99.9%) 72361.525 ops/s [Average]
  (min, avg, max) = (6453406.411, 6617783.115, 6824547.537), stdev = 108307.332
  CI (99.9%): [6545421.590, 6690144.640] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  6617783.115 ± 72361.525  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7085830.204 ops/s
# Warmup Iteration   2: 15088159.399 ops/s
# Warmup Iteration   3: 13054929.988 ops/s
# Warmup Iteration   4: 15697644.394 ops/s
# Warmup Iteration   5: 15852765.715 ops/s
# Warmup Iteration   6: 15835152.600 ops/s
# Warmup Iteration   7: 15858390.834 ops/s
# Warmup Iteration   8: 15839874.977 ops/s
# Warmup Iteration   9: 15835284.205 ops/s
# Warmup Iteration  10: 15896081.115 ops/s
# Warmup Iteration  11: 15882643.905 ops/s
# Warmup Iteration  12: 15644760.673 ops/s
# Warmup Iteration  13: 15652346.440 ops/s
# Warmup Iteration  14: 15550680.091 ops/s
# Warmup Iteration  15: 15520033.543 ops/s
# Warmup Iteration  16: 15612598.452 ops/s
# Warmup Iteration  17: 15363988.326 ops/s
# Warmup Iteration  18: 15599577.979 ops/s
# Warmup Iteration  19: 15436079.235 ops/s
# Warmup Iteration  20: 15381864.447 ops/s
# Warmup Iteration  21: 15497525.758 ops/s
# Warmup Iteration  22: 15521471.378 ops/s
# Warmup Iteration  23: 15392560.953 ops/s
# Warmup Iteration  24: 15219205.777 ops/s
# Warmup Iteration  25: 15272050.140 ops/s
# Warmup Iteration  26: 15323452.418 ops/s
# Warmup Iteration  27: 15682394.599 ops/s
# Warmup Iteration  28: 15478848.261 ops/s
# Warmup Iteration  29: 15220715.184 ops/s
# Warmup Iteration  30: 15527667.496 ops/s
Iteration   1: 15135379.394 ops/s
Iteration   2: 15440502.606 ops/s
Iteration   3: 14958339.350 ops/s
Iteration   4: 15235879.067 ops/s
Iteration   5: 15431686.601 ops/s
Iteration   6: 15615105.586 ops/s
Iteration   7: 15551818.340 ops/s
Iteration   8: 15057769.839 ops/s
Iteration   9: 15260017.660 ops/s
Iteration  10: 15622879.861 ops/s
Iteration  11: 15365602.210 ops/s
Iteration  12: 15885737.597 ops/s
Iteration  13: 15156381.502 ops/s
Iteration  14: 15533757.807 ops/s
Iteration  15: 15296006.488 ops/s
Iteration  16: 15500665.073 ops/s
Iteration  17: 15648476.825 ops/s
Iteration  18: 15090582.555 ops/s
Iteration  19: 15283254.544 ops/s
Iteration  20: 15721110.581 ops/s
Iteration  21: 15278794.371 ops/s
Iteration  22: 15308263.528 ops/s
Iteration  23: 15439544.136 ops/s
Iteration  24: 15280145.153 ops/s
Iteration  25: 15270265.135 ops/s
Iteration  26: 15225379.041 ops/s
Iteration  27: 15421854.864 ops/s
Iteration  28: 15661675.031 ops/s
Iteration  29: 15368546.664 ops/s
Iteration  30: 15785266.027 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_max_without_comparator":
  15394356.248 ±(99.9%) 150098.094 ops/s [Average]
  (min, avg, max) = (14958339.350, 15394356.248, 15885737.597), stdev = 224659.778
  CI (99.9%): [15244258.154, 15544454.342] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt         Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_max_without_comparator  thrpt   30  15394356.248 ± 150098.094  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4301699.313 ops/s
# Warmup Iteration   2: 9265817.331 ops/s
# Warmup Iteration   3: 9171098.928 ops/s
# Warmup Iteration   4: 7599057.870 ops/s
# Warmup Iteration   5: 9088036.255 ops/s
# Warmup Iteration   6: 9033341.050 ops/s
# Warmup Iteration   7: 9014277.025 ops/s
# Warmup Iteration   8: 9139991.826 ops/s
# Warmup Iteration   9: 8958146.959 ops/s
# Warmup Iteration  10: 9092984.303 ops/s
# Warmup Iteration  11: 9050220.913 ops/s
# Warmup Iteration  12: 8963641.776 ops/s
# Warmup Iteration  13: 9124119.296 ops/s
# Warmup Iteration  14: 9082687.023 ops/s
# Warmup Iteration  15: 9094005.797 ops/s
# Warmup Iteration  16: 9069308.544 ops/s
# Warmup Iteration  17: 9203803.263 ops/s
# Warmup Iteration  18: 9287139.402 ops/s
# Warmup Iteration  19: 9396662.991 ops/s
# Warmup Iteration  20: 9394298.409 ops/s
# Warmup Iteration  21: 9406765.402 ops/s
# Warmup Iteration  22: 9391683.509 ops/s
# Warmup Iteration  23: 9395539.407 ops/s
# Warmup Iteration  24: 9393562.653 ops/s
# Warmup Iteration  25: 9394101.306 ops/s
# Warmup Iteration  26: 9389610.528 ops/s
# Warmup Iteration  27: 9191342.264 ops/s
# Warmup Iteration  28: 9178660.640 ops/s
# Warmup Iteration  29: 9213787.669 ops/s
# Warmup Iteration  30: 9310748.704 ops/s
Iteration   1: 8986946.643 ops/s
Iteration   2: 9081862.451 ops/s
Iteration   3: 9158045.615 ops/s
Iteration   4: 9225986.974 ops/s
Iteration   5: 8984587.210 ops/s
Iteration   6: 8951059.906 ops/s
Iteration   7: 9076198.932 ops/s
Iteration   8: 9002681.215 ops/s
Iteration   9: 9033794.500 ops/s
Iteration  10: 9056398.946 ops/s
Iteration  11: 8952205.858 ops/s
Iteration  12: 9266251.910 ops/s
Iteration  13: 9295607.050 ops/s
Iteration  14: 8862479.857 ops/s
Iteration  15: 8913522.620 ops/s
Iteration  16: 8950420.838 ops/s
Iteration  17: 9226009.488 ops/s
Iteration  18: 8967169.175 ops/s
Iteration  19: 9003039.490 ops/s
Iteration  20: 9117651.987 ops/s
Iteration  21: 8940498.347 ops/s
Iteration  22: 8953177.838 ops/s
Iteration  23: 8976236.461 ops/s
Iteration  24: 8963450.325 ops/s
Iteration  25: 9252146.127 ops/s
Iteration  26: 9225237.582 ops/s
Iteration  27: 9191863.756 ops/s
Iteration  28: 9211116.906 ops/s
Iteration  29: 9408199.913 ops/s
Iteration  30: 9237420.199 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_min":
  9082375.604 ±(99.9%) 93983.429 ops/s [Average]
  (min, avg, max) = (8862479.857, 9082375.604, 9408199.913), stdev = 140669.983
  CI (99.9%): [8988392.175, 9176359.033] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_min  thrpt   30  9082375.604 ± 93983.429  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4494598.412 ops/s
# Warmup Iteration   2: 9872463.775 ops/s
# Warmup Iteration   3: 8230886.858 ops/s
# Warmup Iteration   4: 9760770.350 ops/s
# Warmup Iteration   5: 9670990.790 ops/s
# Warmup Iteration   6: 9741246.427 ops/s
# Warmup Iteration   7: 9930312.153 ops/s
# Warmup Iteration   8: 9823565.303 ops/s
# Warmup Iteration   9: 9821812.386 ops/s
# Warmup Iteration  10: 10005409.242 ops/s
# Warmup Iteration  11: 9999704.553 ops/s
# Warmup Iteration  12: 9794098.064 ops/s
# Warmup Iteration  13: 9805255.155 ops/s
# Warmup Iteration  14: 9802511.391 ops/s
# Warmup Iteration  15: 9848340.114 ops/s
# Warmup Iteration  16: 9648701.488 ops/s
# Warmup Iteration  17: 9669059.178 ops/s
# Warmup Iteration  18: 9878134.010 ops/s
# Warmup Iteration  19: 9808817.361 ops/s
# Warmup Iteration  20: 9811478.842 ops/s
# Warmup Iteration  21: 9787583.085 ops/s
# Warmup Iteration  22: 9989175.854 ops/s
# Warmup Iteration  23: 10026364.498 ops/s
# Warmup Iteration  24: 9878572.001 ops/s
# Warmup Iteration  25: 9777595.006 ops/s
# Warmup Iteration  26: 9928607.533 ops/s
# Warmup Iteration  27: 9792509.802 ops/s
# Warmup Iteration  28: 9962606.930 ops/s
# Warmup Iteration  29: 9730569.104 ops/s
# Warmup Iteration  30: 9893271.788 ops/s
Iteration   1: 9765250.564 ops/s
Iteration   2: 9610689.032 ops/s
Iteration   3: 9775902.395 ops/s
Iteration   4: 10047990.452 ops/s
Iteration   5: 10108208.242 ops/s
Iteration   6: 10178987.121 ops/s
Iteration   7: 10157716.120 ops/s
Iteration   8: 10147815.710 ops/s
Iteration   9: 10165881.727 ops/s
Iteration  10: 10149283.814 ops/s
Iteration  11: 10119872.625 ops/s
Iteration  12: 10163899.638 ops/s
Iteration  13: 10132170.260 ops/s
Iteration  14: 10151651.733 ops/s
Iteration  15: 10143457.133 ops/s
Iteration  16: 10150520.012 ops/s
Iteration  17: 10100299.804 ops/s
Iteration  18: 10164720.969 ops/s
Iteration  19: 10138988.081 ops/s
Iteration  20: 10153046.538 ops/s
Iteration  21: 10073013.695 ops/s
Iteration  22: 9754499.750 ops/s
Iteration  23: 9957813.800 ops/s
Iteration  24: 9754278.772 ops/s
Iteration  25: 9848784.080 ops/s
Iteration  26: 9825658.281 ops/s
Iteration  27: 9561698.933 ops/s
Iteration  28: 9731754.952 ops/s
Iteration  29: 9603428.921 ops/s
Iteration  30: 9686219.036 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_minBy":
  9977450.073 ±(99.9%) 140905.333 ops/s [Average]
  (min, avg, max) = (9561698.933, 9977450.073, 10178987.121), stdev = 210900.484
  CI (99.9%): [9836544.740, 10118355.406] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_minBy  thrpt   30  9977450.073 ± 140905.333  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_minByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_minByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3213248.622 ops/s
# Warmup Iteration   2: 6912277.159 ops/s
# Warmup Iteration   3: 5742342.489 ops/s
# Warmup Iteration   4: 6845061.743 ops/s
# Warmup Iteration   5: 6842704.149 ops/s
# Warmup Iteration   6: 6918641.690 ops/s
# Warmup Iteration   7: 6982667.737 ops/s
# Warmup Iteration   8: 6909352.737 ops/s
# Warmup Iteration   9: 6907612.322 ops/s
# Warmup Iteration  10: 6857280.389 ops/s
# Warmup Iteration  11: 7130352.794 ops/s
# Warmup Iteration  12: 7021669.780 ops/s
# Warmup Iteration  13: 6853104.326 ops/s
# Warmup Iteration  14: 6983382.643 ops/s
# Warmup Iteration  15: 6913574.285 ops/s
# Warmup Iteration  16: 6940340.835 ops/s
# Warmup Iteration  17: 6830143.550 ops/s
# Warmup Iteration  18: 6976243.424 ops/s
# Warmup Iteration  19: 6883209.170 ops/s
# Warmup Iteration  20: 6884143.311 ops/s
# Warmup Iteration  21: 6976172.270 ops/s
# Warmup Iteration  22: 7030034.663 ops/s
# Warmup Iteration  23: 7040622.599 ops/s
# Warmup Iteration  24: 6897862.301 ops/s
# Warmup Iteration  25: 6929794.125 ops/s
# Warmup Iteration  26: 7025519.138 ops/s
# Warmup Iteration  27: 6937413.163 ops/s
# Warmup Iteration  28: 6986521.542 ops/s
# Warmup Iteration  29: 6954143.407 ops/s
# Warmup Iteration  30: 6864051.548 ops/s
Iteration   1: 6916422.627 ops/s
Iteration   2: 6942824.947 ops/s
Iteration   3: 6908894.222 ops/s
Iteration   4: 6899862.121 ops/s
Iteration   5: 6869257.488 ops/s
Iteration   6: 6889997.649 ops/s
Iteration   7: 6908173.042 ops/s
Iteration   8: 6895540.212 ops/s
Iteration   9: 6951001.567 ops/s
Iteration  10: 6975863.206 ops/s
Iteration  11: 6919014.181 ops/s
Iteration  12: 7030098.419 ops/s
Iteration  13: 6983171.921 ops/s
Iteration  14: 6993910.823 ops/s
Iteration  15: 6962663.055 ops/s
Iteration  16: 7005010.617 ops/s
Iteration  17: 6876997.988 ops/s
Iteration  18: 6866780.882 ops/s
Iteration  19: 6871497.526 ops/s
Iteration  20: 6942530.975 ops/s
Iteration  21: 6935635.170 ops/s
Iteration  22: 6977359.401 ops/s
Iteration  23: 6870836.009 ops/s
Iteration  24: 6956977.828 ops/s
Iteration  25: 6925104.947 ops/s
Iteration  26: 6897520.502 ops/s
Iteration  27: 6932542.020 ops/s
Iteration  28: 6894964.541 ops/s
Iteration  29: 6936100.381 ops/s
Iteration  30: 6899063.445 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_minByOptional":
  6927853.924 ±(99.9%) 29096.912 ops/s [Average]
  (min, avg, max) = (6866780.882, 6927853.924, 7030098.419), stdev = 43550.891
  CI (99.9%): [6898757.012, 6956950.836] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_minByOptional  thrpt   30  6927853.924 ± 29096.912  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_minBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_minBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3105680.953 ops/s
# Warmup Iteration   2: 6933914.320 ops/s
# Warmup Iteration   3: 7068532.262 ops/s
# Warmup Iteration   4: 6271837.982 ops/s
# Warmup Iteration   5: 6731001.709 ops/s
# Warmup Iteration   6: 7082907.773 ops/s
# Warmup Iteration   7: 7094418.482 ops/s
# Warmup Iteration   8: 7086270.047 ops/s
# Warmup Iteration   9: 7075354.743 ops/s
# Warmup Iteration  10: 6741511.539 ops/s
# Warmup Iteration  11: 6687556.358 ops/s
# Warmup Iteration  12: 6632034.246 ops/s
# Warmup Iteration  13: 6552448.557 ops/s
# Warmup Iteration  14: 6565800.867 ops/s
# Warmup Iteration  15: 6619195.849 ops/s
# Warmup Iteration  16: 6591836.722 ops/s
# Warmup Iteration  17: 6652617.596 ops/s
# Warmup Iteration  18: 6660134.703 ops/s
# Warmup Iteration  19: 6640917.431 ops/s
# Warmup Iteration  20: 6682662.100 ops/s
# Warmup Iteration  21: 6596992.342 ops/s
# Warmup Iteration  22: 6647039.922 ops/s
# Warmup Iteration  23: 6707610.736 ops/s
# Warmup Iteration  24: 6697319.158 ops/s
# Warmup Iteration  25: 6506217.215 ops/s
# Warmup Iteration  26: 6527022.465 ops/s
# Warmup Iteration  27: 6613212.396 ops/s
# Warmup Iteration  28: 6598086.356 ops/s
# Warmup Iteration  29: 6495442.168 ops/s
# Warmup Iteration  30: 6557562.269 ops/s
Iteration   1: 6534818.593 ops/s
Iteration   2: 6741622.445 ops/s
Iteration   3: 6366610.068 ops/s
Iteration   4: 6449910.361 ops/s
Iteration   5: 6516899.321 ops/s
Iteration   6: 6572551.476 ops/s
Iteration   7: 6661845.423 ops/s
Iteration   8: 6530973.179 ops/s
Iteration   9: 6530194.220 ops/s
Iteration  10: 6639779.469 ops/s
Iteration  11: 6521947.132 ops/s
Iteration  12: 6558059.245 ops/s
Iteration  13: 6551165.354 ops/s
Iteration  14: 6557939.294 ops/s
Iteration  15: 6522549.280 ops/s
Iteration  16: 6590859.265 ops/s
Iteration  17: 6583124.760 ops/s
Iteration  18: 6512911.494 ops/s
Iteration  19: 6478968.377 ops/s
Iteration  20: 6344044.480 ops/s
Iteration  21: 6586121.878 ops/s
Iteration  22: 6807250.359 ops/s
Iteration  23: 6616442.640 ops/s
Iteration  24: 6665929.251 ops/s
Iteration  25: 6500017.911 ops/s
Iteration  26: 6543905.568 ops/s
Iteration  27: 6732736.141 ops/s
Iteration  28: 6774819.693 ops/s
Iteration  29: 7045028.681 ops/s
Iteration  30: 6693827.309 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_minBy_null_throws":
  6591095.089 ±(99.9%) 91479.826 ops/s [Average]
  (min, avg, max) = (6344044.480, 6591095.089, 7045028.681), stdev = 136922.707
  CI (99.9%): [6499615.263, 6682574.915] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_minBy_null_throws  thrpt   30  6591095.089 ± 91479.826  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_minOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_minOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1778082.004 ops/s
# Warmup Iteration   2: 3797119.433 ops/s
# Warmup Iteration   3: 3238904.600 ops/s
# Warmup Iteration   4: 3880272.360 ops/s
# Warmup Iteration   5: 3764265.181 ops/s
# Warmup Iteration   6: 3728914.667 ops/s
# Warmup Iteration   7: 3788918.502 ops/s
# Warmup Iteration   8: 3951854.974 ops/s
# Warmup Iteration   9: 3996646.017 ops/s
# Warmup Iteration  10: 4015430.806 ops/s
# Warmup Iteration  11: 3838894.436 ops/s
# Warmup Iteration  12: 3817252.774 ops/s
# Warmup Iteration  13: 3786255.916 ops/s
# Warmup Iteration  14: 3789707.182 ops/s
# Warmup Iteration  15: 3806020.358 ops/s
# Warmup Iteration  16: 4001597.469 ops/s
# Warmup Iteration  17: 4051553.394 ops/s
# Warmup Iteration  18: 4050626.858 ops/s
# Warmup Iteration  19: 4044822.282 ops/s
# Warmup Iteration  20: 4045844.774 ops/s
# Warmup Iteration  21: 4043369.966 ops/s
# Warmup Iteration  22: 4039316.883 ops/s
# Warmup Iteration  23: 4043605.627 ops/s
# Warmup Iteration  24: 4003696.351 ops/s
# Warmup Iteration  25: 3900374.326 ops/s
# Warmup Iteration  26: 3838974.379 ops/s
# Warmup Iteration  27: 3765925.604 ops/s
# Warmup Iteration  28: 3893762.317 ops/s
# Warmup Iteration  29: 3853754.410 ops/s
# Warmup Iteration  30: 3890243.908 ops/s
Iteration   1: 3833831.549 ops/s
Iteration   2: 4023970.181 ops/s
Iteration   3: 3932255.127 ops/s
Iteration   4: 3841701.428 ops/s
Iteration   5: 3865503.139 ops/s
Iteration   6: 3858560.844 ops/s
Iteration   7: 3721567.685 ops/s
Iteration   8: 3789364.898 ops/s
Iteration   9: 3758799.459 ops/s
Iteration  10: 3957742.191 ops/s
Iteration  11: 3880504.590 ops/s
Iteration  12: 3814329.863 ops/s
Iteration  13: 3940909.227 ops/s
Iteration  14: 3786326.355 ops/s
Iteration  15: 3813861.615 ops/s
Iteration  16: 3791789.311 ops/s
Iteration  17: 3726176.618 ops/s
Iteration  18: 3826948.236 ops/s
Iteration  19: 3880281.844 ops/s
Iteration  20: 3748103.710 ops/s
Iteration  21: 3745701.812 ops/s
Iteration  22: 3789353.497 ops/s
Iteration  23: 3763806.024 ops/s
Iteration  24: 3728516.488 ops/s
Iteration  25: 3753057.903 ops/s
Iteration  26: 3729429.799 ops/s
Iteration  27: 3783753.446 ops/s
Iteration  28: 3786698.857 ops/s
Iteration  29: 3726098.922 ops/s
Iteration  30: 3658190.425 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_minOptional":
  3808571.168 ±(99.9%) 54628.085 ops/s [Average]
  (min, avg, max) = (3658190.425, 3808571.168, 4023970.181), stdev = 81764.752
  CI (99.9%): [3753943.083, 3863199.253] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_minOptional  thrpt   30  3808571.168 ± 54628.085  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_min_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_min_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 666866.904 ops/s
# Warmup Iteration   2: 693056.566 ops/s
# Warmup Iteration   3: 946728.190 ops/s
# Warmup Iteration   4: 951048.226 ops/s
# Warmup Iteration   5: 896696.743 ops/s
# Warmup Iteration   6: 901715.346 ops/s
# Warmup Iteration   7: 912645.176 ops/s
# Warmup Iteration   8: 907805.892 ops/s
# Warmup Iteration   9: 938914.237 ops/s
# Warmup Iteration  10: 958342.419 ops/s
# Warmup Iteration  11: 803331.091 ops/s
# Warmup Iteration  12: 892180.479 ops/s
# Warmup Iteration  13: 949820.440 ops/s
# Warmup Iteration  14: 929940.163 ops/s
# Warmup Iteration  15: 911420.108 ops/s
# Warmup Iteration  16: 902244.451 ops/s
# Warmup Iteration  17: 1001291.452 ops/s
# Warmup Iteration  18: 1039896.400 ops/s
# Warmup Iteration  19: 951049.387 ops/s
# Warmup Iteration  20: 997920.040 ops/s
# Warmup Iteration  21: 973459.670 ops/s
# Warmup Iteration  22: 1024517.374 ops/s
# Warmup Iteration  23: 979973.659 ops/s
# Warmup Iteration  24: 990254.806 ops/s
# Warmup Iteration  25: 976398.254 ops/s
# Warmup Iteration  26: 968641.016 ops/s
# Warmup Iteration  27: 971419.301 ops/s
# Warmup Iteration  28: 959522.400 ops/s
# Warmup Iteration  29: 958661.287 ops/s
# Warmup Iteration  30: 984442.907 ops/s
Iteration   1: 1045082.782 ops/s
Iteration   2: 1043852.388 ops/s
Iteration   3: 1041235.581 ops/s
Iteration   4: 1039224.313 ops/s
Iteration   5: 1039782.567 ops/s
Iteration   6: 1045344.637 ops/s
Iteration   7: 1042918.071 ops/s
Iteration   8: 1041342.104 ops/s
Iteration   9: 1044324.566 ops/s
Iteration  10: 1041169.393 ops/s
Iteration  11: 1043906.540 ops/s
Iteration  12: 1043346.311 ops/s
Iteration  13: 1041334.481 ops/s
Iteration  14: 1041567.218 ops/s
Iteration  15: 1034866.464 ops/s
Iteration  16: 1035881.911 ops/s
Iteration  17: 1003821.242 ops/s
Iteration  18: 959345.834 ops/s
Iteration  19: 954904.510 ops/s
Iteration  20: 955012.676 ops/s
Iteration  21: 995477.211 ops/s
Iteration  22: 978676.524 ops/s
Iteration  23: 958120.149 ops/s
Iteration  24: 977376.822 ops/s
Iteration  25: 960026.024 ops/s
Iteration  26: 969707.252 ops/s
Iteration  27: 952042.096 ops/s
Iteration  28: 953616.722 ops/s
Iteration  29: 961780.546 ops/s
Iteration  30: 964327.427 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_min_empty_throws":
  1006980.479 ±(99.9%) 26169.942 ops/s [Average]
  (min, avg, max) = (952042.096, 1006980.479, 1045344.637), stdev = 39169.940
  CI (99.9%): [980810.537, 1033150.421] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_min_empty_throws  thrpt   30  1006980.479 ± 26169.942  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_min_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_min_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2791229.426 ops/s
# Warmup Iteration   2: 5471042.681 ops/s
# Warmup Iteration   3: 5698362.981 ops/s
# Warmup Iteration   4: 5863852.273 ops/s
# Warmup Iteration   5: 4653511.104 ops/s
# Warmup Iteration   6: 5615465.367 ops/s
# Warmup Iteration   7: 5829976.881 ops/s
# Warmup Iteration   8: 5565149.051 ops/s
# Warmup Iteration   9: 5720578.173 ops/s
# Warmup Iteration  10: 5755816.938 ops/s
# Warmup Iteration  11: 5585222.032 ops/s
# Warmup Iteration  12: 5678059.985 ops/s
# Warmup Iteration  13: 5750768.691 ops/s
# Warmup Iteration  14: 5566608.585 ops/s
# Warmup Iteration  15: 5626481.591 ops/s
# Warmup Iteration  16: 5638993.625 ops/s
# Warmup Iteration  17: 5756481.428 ops/s
# Warmup Iteration  18: 5723234.882 ops/s
# Warmup Iteration  19: 5578101.385 ops/s
# Warmup Iteration  20: 5611210.732 ops/s
# Warmup Iteration  21: 5567919.584 ops/s
# Warmup Iteration  22: 5569653.755 ops/s
# Warmup Iteration  23: 5655142.129 ops/s
# Warmup Iteration  24: 5603824.139 ops/s
# Warmup Iteration  25: 5785905.159 ops/s
# Warmup Iteration  26: 5630409.712 ops/s
# Warmup Iteration  27: 5628304.176 ops/s
# Warmup Iteration  28: 5636445.521 ops/s
# Warmup Iteration  29: 5833131.504 ops/s
# Warmup Iteration  30: 5727081.476 ops/s
Iteration   1: 5599585.566 ops/s
Iteration   2: 5996130.489 ops/s
Iteration   3: 5938869.003 ops/s
Iteration   4: 5792732.393 ops/s
Iteration   5: 5697814.534 ops/s
Iteration   6: 5608324.113 ops/s
Iteration   7: 5688528.212 ops/s
Iteration   8: 5561080.216 ops/s
Iteration   9: 5615337.965 ops/s
Iteration  10: 5609724.861 ops/s
Iteration  11: 5825736.352 ops/s
Iteration  12: 5702119.109 ops/s
Iteration  13: 5491628.440 ops/s
Iteration  14: 5903794.010 ops/s
Iteration  15: 5580647.866 ops/s
Iteration  16: 6060017.394 ops/s
Iteration  17: 5786835.531 ops/s
Iteration  18: 5659331.351 ops/s
Iteration  19: 5633091.635 ops/s
Iteration  20: 5685427.002 ops/s
Iteration  21: 5682113.111 ops/s
Iteration  22: 5847459.223 ops/s
Iteration  23: 5683382.172 ops/s
Iteration  24: 5573234.545 ops/s
Iteration  25: 5742709.363 ops/s
Iteration  26: 5702997.156 ops/s
Iteration  27: 5615888.917 ops/s
Iteration  28: 5620229.417 ops/s
Iteration  29: 5665523.850 ops/s
Iteration  30: 6065496.655 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_min_null_safe":
  5721193.015 ±(99.9%) 99258.528 ops/s [Average]
  (min, avg, max) = (5491628.440, 5721193.015, 6065496.655), stdev = 148565.503
  CI (99.9%): [5621934.487, 5820451.543] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_min_null_safe  thrpt   30  5721193.015 ± 99258.528  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8277126.826 ops/s
# Warmup Iteration   2: 17879507.369 ops/s
# Warmup Iteration   3: 15267008.651 ops/s
# Warmup Iteration   4: 17977120.664 ops/s
# Warmup Iteration   5: 17946874.581 ops/s
# Warmup Iteration   6: 17973390.682 ops/s
# Warmup Iteration   7: 17977565.561 ops/s
# Warmup Iteration   8: 17082381.922 ops/s
# Warmup Iteration   9: 16937301.061 ops/s
# Warmup Iteration  10: 17258706.754 ops/s
# Warmup Iteration  11: 17225192.888 ops/s
# Warmup Iteration  12: 17375101.910 ops/s
# Warmup Iteration  13: 16978611.411 ops/s
# Warmup Iteration  14: 16816375.587 ops/s
# Warmup Iteration  15: 17179911.433 ops/s
# Warmup Iteration  16: 16739252.058 ops/s
# Warmup Iteration  17: 16724556.328 ops/s
# Warmup Iteration  18: 16716909.381 ops/s
# Warmup Iteration  19: 16710266.662 ops/s
# Warmup Iteration  20: 17060164.851 ops/s
# Warmup Iteration  21: 16612172.772 ops/s
# Warmup Iteration  22: 16780580.594 ops/s
# Warmup Iteration  23: 17085182.198 ops/s
# Warmup Iteration  24: 16752860.896 ops/s
# Warmup Iteration  25: 17626368.433 ops/s
# Warmup Iteration  26: 17955425.739 ops/s
# Warmup Iteration  27: 16715291.389 ops/s
# Warmup Iteration  28: 16633325.999 ops/s
# Warmup Iteration  29: 16673721.177 ops/s
# Warmup Iteration  30: 17006744.278 ops/s
Iteration   1: 17631389.098 ops/s
Iteration   2: 17078357.319 ops/s
Iteration   3: 16776647.833 ops/s
Iteration   4: 16589868.794 ops/s
Iteration   5: 17021191.171 ops/s
Iteration   6: 17001559.057 ops/s
Iteration   7: 17549392.221 ops/s
Iteration   8: 17771790.312 ops/s
Iteration   9: 17984729.170 ops/s
Iteration  10: 17925041.196 ops/s
Iteration  11: 17990876.670 ops/s
Iteration  12: 17598240.177 ops/s
Iteration  13: 17169163.539 ops/s
Iteration  14: 17463787.391 ops/s
Iteration  15: 17454911.612 ops/s
Iteration  16: 16632740.008 ops/s
Iteration  17: 16785688.879 ops/s
Iteration  18: 17302304.850 ops/s
Iteration  19: 17205494.881 ops/s
Iteration  20: 17712952.301 ops/s
Iteration  21: 16816672.733 ops/s
Iteration  22: 17316610.235 ops/s
Iteration  23: 17039168.121 ops/s
Iteration  24: 17990957.512 ops/s
Iteration  25: 17913732.999 ops/s
Iteration  26: 17916063.474 ops/s
Iteration  27: 17956293.360 ops/s
Iteration  28: 18027161.653 ops/s
Iteration  29: 17890261.047 ops/s
Iteration  30: 17997604.363 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_min_null_throws":
  17450355.066 ±(99.9%) 314440.328 ops/s [Average]
  (min, avg, max) = (16589868.794, 17450355.066, 18027161.653), stdev = 470639.516
  CI (99.9%): [17135914.738, 17764795.394] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_min_null_throws  thrpt   30  17450355.066 ± 314440.328  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3147413.651 ops/s
# Warmup Iteration   2: 6492570.733 ops/s
# Warmup Iteration   3: 6468100.257 ops/s
# Warmup Iteration   4: 6482745.516 ops/s
# Warmup Iteration   5: 5453158.356 ops/s
# Warmup Iteration   6: 6492522.172 ops/s
# Warmup Iteration   7: 6480242.953 ops/s
# Warmup Iteration   8: 6475578.122 ops/s
# Warmup Iteration   9: 6456726.147 ops/s
# Warmup Iteration  10: 6476795.369 ops/s
# Warmup Iteration  11: 6508316.388 ops/s
# Warmup Iteration  12: 6471249.159 ops/s
# Warmup Iteration  13: 6498349.609 ops/s
# Warmup Iteration  14: 6502734.245 ops/s
# Warmup Iteration  15: 6512232.701 ops/s
# Warmup Iteration  16: 6513452.828 ops/s
# Warmup Iteration  17: 6476122.632 ops/s
# Warmup Iteration  18: 6477159.845 ops/s
# Warmup Iteration  19: 6476574.671 ops/s
# Warmup Iteration  20: 6476819.738 ops/s
# Warmup Iteration  21: 6478712.842 ops/s
# Warmup Iteration  22: 6436197.287 ops/s
# Warmup Iteration  23: 6161428.085 ops/s
# Warmup Iteration  24: 6063579.486 ops/s
# Warmup Iteration  25: 6165056.552 ops/s
# Warmup Iteration  26: 6085557.635 ops/s
# Warmup Iteration  27: 6117379.583 ops/s
# Warmup Iteration  28: 6318624.925 ops/s
# Warmup Iteration  29: 6309483.442 ops/s
# Warmup Iteration  30: 6329811.941 ops/s
Iteration   1: 6277198.746 ops/s
Iteration   2: 6376367.172 ops/s
Iteration   3: 6345500.505 ops/s
Iteration   4: 6202925.596 ops/s
Iteration   5: 6292441.898 ops/s
Iteration   6: 6372688.137 ops/s
Iteration   7: 6257257.615 ops/s
Iteration   8: 6264770.837 ops/s
Iteration   9: 6204454.628 ops/s
Iteration  10: 6384556.145 ops/s
Iteration  11: 6355591.599 ops/s
Iteration  12: 6358816.158 ops/s
Iteration  13: 6282081.699 ops/s
Iteration  14: 6235793.030 ops/s
Iteration  15: 6266270.403 ops/s
Iteration  16: 6284192.136 ops/s
Iteration  17: 6342900.161 ops/s
Iteration  18: 6323412.209 ops/s
Iteration  19: 6170672.778 ops/s
Iteration  20: 6277089.505 ops/s
Iteration  21: 6235121.974 ops/s
Iteration  22: 6387585.748 ops/s
Iteration  23: 6215533.293 ops/s
Iteration  24: 6160287.134 ops/s
Iteration  25: 6344495.573 ops/s
Iteration  26: 6355622.521 ops/s
Iteration  27: 6259308.728 ops/s
Iteration  28: 6211088.191 ops/s
Iteration  29: 6214227.618 ops/s
Iteration  30: 6308665.983 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_min_null_throws_without_comparator":
  6285563.924 ±(99.9%) 44543.191 ops/s [Average]
  (min, avg, max) = (6160287.134, 6285563.924, 6387585.748), stdev = 66670.157
  CI (99.9%): [6241020.733, 6330107.115] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  6285563.924 ± 44543.191  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4210710.677 ops/s
# Warmup Iteration   2: 8735488.454 ops/s
# Warmup Iteration   3: 9095710.595 ops/s
# Warmup Iteration   4: 7549549.983 ops/s
# Warmup Iteration   5: 9138905.674 ops/s
# Warmup Iteration   6: 9139273.883 ops/s
# Warmup Iteration   7: 9056188.649 ops/s
# Warmup Iteration   8: 9169960.082 ops/s
# Warmup Iteration   9: 9146458.330 ops/s
# Warmup Iteration  10: 9127782.270 ops/s
# Warmup Iteration  11: 9176194.380 ops/s
# Warmup Iteration  12: 9121438.790 ops/s
# Warmup Iteration  13: 9104996.066 ops/s
# Warmup Iteration  14: 8612832.592 ops/s
# Warmup Iteration  15: 8900134.801 ops/s
# Warmup Iteration  16: 8976351.493 ops/s
# Warmup Iteration  17: 8955013.851 ops/s
# Warmup Iteration  18: 9058743.988 ops/s
# Warmup Iteration  19: 9334535.722 ops/s
# Warmup Iteration  20: 9054616.250 ops/s
# Warmup Iteration  21: 8871340.435 ops/s
# Warmup Iteration  22: 8649054.953 ops/s
# Warmup Iteration  23: 8899730.428 ops/s
# Warmup Iteration  24: 9106728.099 ops/s
# Warmup Iteration  25: 9203722.559 ops/s
# Warmup Iteration  26: 9069312.752 ops/s
# Warmup Iteration  27: 9256221.255 ops/s
# Warmup Iteration  28: 9036594.070 ops/s
# Warmup Iteration  29: 9392769.449 ops/s
# Warmup Iteration  30: 9400859.953 ops/s
Iteration   1: 9403382.935 ops/s
Iteration   2: 9398022.379 ops/s
Iteration   3: 9389605.078 ops/s
Iteration   4: 9402180.972 ops/s
Iteration   5: 9397059.631 ops/s
Iteration   6: 9395763.585 ops/s
Iteration   7: 9383772.152 ops/s
Iteration   8: 9413497.027 ops/s
Iteration   9: 9391914.366 ops/s
Iteration  10: 9379105.075 ops/s
Iteration  11: 9380193.332 ops/s
Iteration  12: 9371772.543 ops/s
Iteration  13: 8796515.276 ops/s
Iteration  14: 8716392.746 ops/s
Iteration  15: 8824263.559 ops/s
Iteration  16: 8723036.475 ops/s
Iteration  17: 8960552.308 ops/s
Iteration  18: 8725256.343 ops/s
Iteration  19: 9125238.235 ops/s
Iteration  20: 8784761.076 ops/s
Iteration  21: 8707378.921 ops/s
Iteration  22: 8641191.106 ops/s
Iteration  23: 8715945.338 ops/s
Iteration  24: 8706084.000 ops/s
Iteration  25: 8691303.555 ops/s
Iteration  26: 8943488.522 ops/s
Iteration  27: 8810023.269 ops/s
Iteration  28: 8564581.396 ops/s
Iteration  29: 8664082.514 ops/s
Iteration  30: 8888148.084 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_min_without_comparator":
  9023150.393 ±(99.9%) 215983.507 ops/s [Average]
  (min, avg, max) = (8564581.396, 9023150.393, 9413497.027), stdev = 323273.971
  CI (99.9%): [8807166.886, 9239133.901] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_min_without_comparator  thrpt   30  9023150.393 ± 215983.507  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_newBag_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_newBag_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 131753.149 ops/s
# Warmup Iteration   2: 138947.040 ops/s
# Warmup Iteration   3: 149791.844 ops/s
# Warmup Iteration   4: 174170.184 ops/s
# Warmup Iteration   5: 176327.635 ops/s
# Warmup Iteration   6: 170411.239 ops/s
# Warmup Iteration   7: 169059.432 ops/s
# Warmup Iteration   8: 171438.479 ops/s
# Warmup Iteration   9: 169996.126 ops/s
# Warmup Iteration  10: 172090.546 ops/s
# Warmup Iteration  11: 170748.539 ops/s
# Warmup Iteration  12: 177671.474 ops/s
# Warmup Iteration  13: 173743.836 ops/s
# Warmup Iteration  14: 170731.620 ops/s
# Warmup Iteration  15: 178917.496 ops/s
# Warmup Iteration  16: 149090.010 ops/s
# Warmup Iteration  17: 177883.169 ops/s
# Warmup Iteration  18: 181802.025 ops/s
# Warmup Iteration  19: 181306.429 ops/s
# Warmup Iteration  20: 181354.214 ops/s
# Warmup Iteration  21: 181425.416 ops/s
# Warmup Iteration  22: 181869.554 ops/s
# Warmup Iteration  23: 186602.955 ops/s
# Warmup Iteration  24: 183651.851 ops/s
# Warmup Iteration  25: 184623.577 ops/s
# Warmup Iteration  26: 180893.312 ops/s
# Warmup Iteration  27: 188495.576 ops/s
# Warmup Iteration  28: 182427.996 ops/s
# Warmup Iteration  29: 182875.707 ops/s
# Warmup Iteration  30: 182806.452 ops/s
Iteration   1: 180128.660 ops/s
Iteration   2: 191311.417 ops/s
Iteration   3: 182283.693 ops/s
Iteration   4: 183860.485 ops/s
Iteration   5: 183725.768 ops/s
Iteration   6: 186602.181 ops/s
Iteration   7: 188523.916 ops/s
Iteration   8: 183136.371 ops/s
Iteration   9: 186177.866 ops/s
Iteration  10: 193914.963 ops/s
Iteration  11: 183401.861 ops/s
Iteration  12: 188200.483 ops/s
Iteration  13: 187678.175 ops/s
Iteration  14: 188732.278 ops/s
Iteration  15: 195893.782 ops/s
Iteration  16: 196835.679 ops/s
Iteration  17: 190806.185 ops/s
Iteration  18: 183362.593 ops/s
Iteration  19: 182747.642 ops/s
Iteration  20: 182957.087 ops/s
Iteration  21: 180361.654 ops/s
Iteration  22: 181990.272 ops/s
Iteration  23: 187868.100 ops/s
Iteration  24: 185390.582 ops/s
Iteration  25: 187834.740 ops/s
Iteration  26: 196753.544 ops/s
Iteration  27: 196739.408 ops/s
Iteration  28: 196534.606 ops/s
Iteration  29: 196766.205 ops/s
Iteration  30: 196755.594 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_newBag_throws":
  188242.526 ±(99.9%) 3780.833 ops/s [Average]
  (min, avg, max) = (180128.660, 188242.526, 196835.679), stdev = 5658.973
  CI (99.9%): [184461.693, 192023.359] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_newBag_throws  thrpt   30  188242.526 ± 3780.833  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5084983.355 ops/s
# Warmup Iteration   2: 8702724.951 ops/s
# Warmup Iteration   3: 10292803.610 ops/s
# Warmup Iteration   4: 10267714.465 ops/s
# Warmup Iteration   5: 10336358.579 ops/s
# Warmup Iteration   6: 9842587.820 ops/s
# Warmup Iteration   7: 9767080.295 ops/s
# Warmup Iteration   8: 9649563.519 ops/s
# Warmup Iteration   9: 9857973.840 ops/s
# Warmup Iteration  10: 9811119.096 ops/s
# Warmup Iteration  11: 9612556.765 ops/s
# Warmup Iteration  12: 9798013.620 ops/s
# Warmup Iteration  13: 9723530.186 ops/s
# Warmup Iteration  14: 9784379.686 ops/s
# Warmup Iteration  15: 9629239.363 ops/s
# Warmup Iteration  16: 9706278.594 ops/s
# Warmup Iteration  17: 9899203.172 ops/s
# Warmup Iteration  18: 10113404.234 ops/s
# Warmup Iteration  19: 10294150.495 ops/s
# Warmup Iteration  20: 10304893.897 ops/s
# Warmup Iteration  21: 10318709.436 ops/s
# Warmup Iteration  22: 10236268.053 ops/s
# Warmup Iteration  23: 10271550.040 ops/s
# Warmup Iteration  24: 10222989.436 ops/s
# Warmup Iteration  25: 10244012.189 ops/s
# Warmup Iteration  26: 10299625.490 ops/s
# Warmup Iteration  27: 10269189.221 ops/s
# Warmup Iteration  28: 10214415.513 ops/s
# Warmup Iteration  29: 10087047.773 ops/s
# Warmup Iteration  30: 10054338.055 ops/s
Iteration   1: 10047480.105 ops/s
Iteration   2: 10088419.146 ops/s
Iteration   3: 10039029.629 ops/s
Iteration   4: 10122457.425 ops/s
Iteration   5: 10211299.556 ops/s
Iteration   6: 10155731.549 ops/s
Iteration   7: 10111046.323 ops/s
Iteration   8: 10122148.779 ops/s
Iteration   9: 10134937.463 ops/s
Iteration  10: 10110333.959 ops/s
Iteration  11: 10129890.729 ops/s
Iteration  12: 10168674.290 ops/s
Iteration  13: 10116549.782 ops/s
Iteration  14: 10182333.180 ops/s
Iteration  15: 10141319.219 ops/s
Iteration  16: 10154742.641 ops/s
Iteration  17: 10000532.234 ops/s
Iteration  18: 10167977.642 ops/s
Iteration  19: 10223363.673 ops/s
Iteration  20: 10037137.019 ops/s
Iteration  21: 10080484.218 ops/s
Iteration  22: 10008944.756 ops/s
Iteration  23: 10067668.452 ops/s
Iteration  24: 10155561.233 ops/s
Iteration  25: 10203329.202 ops/s
Iteration  26: 10215078.290 ops/s
Iteration  27: 10213865.322 ops/s
Iteration  28: 10040951.142 ops/s
Iteration  29: 10239631.492 ops/s
Iteration  30: 10190502.417 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_newEmpty":
  10129380.696 ±(99.9%) 44829.780 ops/s [Average]
  (min, avg, max) = (10000532.234, 10129380.696, 10239631.492), stdev = 67099.110
  CI (99.9%): [10084550.915, 10174210.476] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_newEmpty  thrpt   30  10129380.696 ± 44829.780  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1538110.855 ops/s
# Warmup Iteration   2: 3683956.988 ops/s
# Warmup Iteration   3: 3578680.796 ops/s
# Warmup Iteration   4: 3362467.851 ops/s
# Warmup Iteration   5: 3560655.054 ops/s
# Warmup Iteration   6: 3682474.924 ops/s
# Warmup Iteration   7: 3521873.044 ops/s
# Warmup Iteration   8: 3538005.489 ops/s
# Warmup Iteration   9: 3694746.917 ops/s
# Warmup Iteration  10: 3553187.040 ops/s
# Warmup Iteration  11: 3534991.014 ops/s
# Warmup Iteration  12: 3756337.757 ops/s
# Warmup Iteration  13: 3808154.179 ops/s
# Warmup Iteration  14: 3806392.005 ops/s
# Warmup Iteration  15: 3800205.840 ops/s
# Warmup Iteration  16: 3806345.574 ops/s
# Warmup Iteration  17: 3805460.906 ops/s
# Warmup Iteration  18: 3807896.888 ops/s
# Warmup Iteration  19: 3801633.893 ops/s
# Warmup Iteration  20: 3742919.316 ops/s
# Warmup Iteration  21: 3621242.175 ops/s
# Warmup Iteration  22: 3617128.370 ops/s
# Warmup Iteration  23: 3540779.757 ops/s
# Warmup Iteration  24: 3614743.030 ops/s
# Warmup Iteration  25: 3579475.829 ops/s
# Warmup Iteration  26: 3584215.404 ops/s
# Warmup Iteration  27: 3628022.162 ops/s
# Warmup Iteration  28: 3549632.774 ops/s
# Warmup Iteration  29: 3554618.672 ops/s
# Warmup Iteration  30: 3632688.574 ops/s
Iteration   1: 3530633.228 ops/s
Iteration   2: 3654242.352 ops/s
Iteration   3: 3721620.397 ops/s
Iteration   4: 3564849.598 ops/s
Iteration   5: 3530911.231 ops/s
Iteration   6: 3539558.025 ops/s
Iteration   7: 3527141.068 ops/s
Iteration   8: 3516241.748 ops/s
Iteration   9: 3577494.917 ops/s
Iteration  10: 3570833.992 ops/s
Iteration  11: 3563643.552 ops/s
Iteration  12: 3543634.707 ops/s
Iteration  13: 3576183.557 ops/s
Iteration  14: 3587480.257 ops/s
Iteration  15: 3711693.586 ops/s
Iteration  16: 3640746.463 ops/s
Iteration  17: 3670113.982 ops/s
Iteration  18: 3532632.829 ops/s
Iteration  19: 3673829.285 ops/s
Iteration  20: 3619422.060 ops/s
Iteration  21: 3630353.796 ops/s
Iteration  22: 3701577.932 ops/s
Iteration  23: 3713312.732 ops/s
Iteration  24: 3757251.063 ops/s
Iteration  25: 3661586.675 ops/s
Iteration  26: 3645433.254 ops/s
Iteration  27: 3526126.098 ops/s
Iteration  28: 3653869.141 ops/s
Iteration  29: 3660800.745 ops/s
Iteration  30: 3500971.407 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_noneSatisfy":
  3610139.656 ±(99.9%) 48682.343 ops/s [Average]
  (min, avg, max) = (3500971.407, 3610139.656, 3757251.063), stdev = 72865.445
  CI (99.9%): [3561457.312, 3658821.999] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_noneSatisfy  thrpt   30  3610139.656 ± 48682.343  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2661096.568 ops/s
# Warmup Iteration   2: 6402432.209 ops/s
# Warmup Iteration   3: 5348257.423 ops/s
# Warmup Iteration   4: 6262551.168 ops/s
# Warmup Iteration   5: 6262143.312 ops/s
# Warmup Iteration   6: 6201322.637 ops/s
# Warmup Iteration   7: 6148503.858 ops/s
# Warmup Iteration   8: 6189293.725 ops/s
# Warmup Iteration   9: 6403399.963 ops/s
# Warmup Iteration  10: 6242572.595 ops/s
# Warmup Iteration  11: 6431564.103 ops/s
# Warmup Iteration  12: 6267987.107 ops/s
# Warmup Iteration  13: 6135279.234 ops/s
# Warmup Iteration  14: 6193155.898 ops/s
# Warmup Iteration  15: 6192576.738 ops/s
# Warmup Iteration  16: 6210822.005 ops/s
# Warmup Iteration  17: 6225131.605 ops/s
# Warmup Iteration  18: 6102746.732 ops/s
# Warmup Iteration  19: 6079770.764 ops/s
# Warmup Iteration  20: 6161305.589 ops/s
# Warmup Iteration  21: 6267572.885 ops/s
# Warmup Iteration  22: 6515050.867 ops/s
# Warmup Iteration  23: 6064513.601 ops/s
# Warmup Iteration  24: 6118737.944 ops/s
# Warmup Iteration  25: 6138065.755 ops/s
# Warmup Iteration  26: 6269415.693 ops/s
# Warmup Iteration  27: 6593030.732 ops/s
# Warmup Iteration  28: 6583312.159 ops/s
# Warmup Iteration  29: 6593400.501 ops/s
# Warmup Iteration  30: 6582813.444 ops/s
Iteration   1: 6582239.827 ops/s
Iteration   2: 6602776.971 ops/s
Iteration   3: 6603753.149 ops/s
Iteration   4: 6591453.063 ops/s
Iteration   5: 6588591.166 ops/s
Iteration   6: 6597767.614 ops/s
Iteration   7: 6608334.593 ops/s
Iteration   8: 6604679.157 ops/s
Iteration   9: 6609359.513 ops/s
Iteration  10: 6405332.492 ops/s
Iteration  11: 6612823.840 ops/s
Iteration  12: 6587301.510 ops/s
Iteration  13: 6550013.392 ops/s
Iteration  14: 6144679.769 ops/s
Iteration  15: 6208192.933 ops/s
Iteration  16: 6562475.276 ops/s
Iteration  17: 6311370.040 ops/s
Iteration  18: 6338607.264 ops/s
Iteration  19: 6140428.502 ops/s
Iteration  20: 6196023.822 ops/s
Iteration  21: 6376950.930 ops/s
Iteration  22: 6495524.314 ops/s
Iteration  23: 6601774.308 ops/s
Iteration  24: 6585065.292 ops/s
Iteration  25: 6593751.470 ops/s
Iteration  26: 6581074.607 ops/s
Iteration  27: 6578807.135 ops/s
Iteration  28: 6402565.077 ops/s
Iteration  29: 6312887.713 ops/s
Iteration  30: 6136820.317 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_noneSatisfyWith":
  6470380.835 ±(99.9%) 112576.794 ops/s [Average]
  (min, avg, max) = (6136820.317, 6470380.835, 6612823.840), stdev = 168499.658
  CI (99.9%): [6357804.042, 6582957.629] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  6470380.835 ± 112576.794  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_noneSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_noneSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1253438.017 ops/s
# Warmup Iteration   2: 2860381.911 ops/s
# Warmup Iteration   3: 2790910.498 ops/s
# Warmup Iteration   4: 2827925.963 ops/s
# Warmup Iteration   5: 2294277.139 ops/s
# Warmup Iteration   6: 2853494.400 ops/s
# Warmup Iteration   7: 2809900.320 ops/s
# Warmup Iteration   8: 2901410.544 ops/s
# Warmup Iteration   9: 2880948.359 ops/s
# Warmup Iteration  10: 2830627.674 ops/s
# Warmup Iteration  11: 2828813.316 ops/s
# Warmup Iteration  12: 2834273.389 ops/s
# Warmup Iteration  13: 2932067.257 ops/s
# Warmup Iteration  14: 2862062.970 ops/s
# Warmup Iteration  15: 2853410.392 ops/s
# Warmup Iteration  16: 2899209.872 ops/s
# Warmup Iteration  17: 2910991.298 ops/s
# Warmup Iteration  18: 3000191.016 ops/s
# Warmup Iteration  19: 2924942.276 ops/s
# Warmup Iteration  20: 2963974.752 ops/s
# Warmup Iteration  21: 2836632.353 ops/s
# Warmup Iteration  22: 2833418.127 ops/s
# Warmup Iteration  23: 2863384.205 ops/s
# Warmup Iteration  24: 2872398.859 ops/s
# Warmup Iteration  25: 2866686.812 ops/s
# Warmup Iteration  26: 2846906.782 ops/s
# Warmup Iteration  27: 2900672.198 ops/s
# Warmup Iteration  28: 3040313.813 ops/s
# Warmup Iteration  29: 2935284.222 ops/s
# Warmup Iteration  30: 2856100.830 ops/s
Iteration   1: 2991898.835 ops/s
Iteration   2: 3017496.416 ops/s
Iteration   3: 2983285.110 ops/s
Iteration   4: 2964048.321 ops/s
Iteration   5: 2813949.084 ops/s
Iteration   6: 2843900.655 ops/s
Iteration   7: 2914999.835 ops/s
Iteration   8: 3005737.520 ops/s
Iteration   9: 2870729.516 ops/s
Iteration  10: 2804362.986 ops/s
Iteration  11: 2853372.371 ops/s
Iteration  12: 2851265.277 ops/s
Iteration  13: 2879879.307 ops/s
Iteration  14: 3040608.819 ops/s
Iteration  15: 2894588.010 ops/s
Iteration  16: 2845582.335 ops/s
Iteration  17: 2816759.473 ops/s
Iteration  18: 2842476.361 ops/s
Iteration  19: 2877622.669 ops/s
Iteration  20: 2852036.635 ops/s
Iteration  21: 2931684.044 ops/s
Iteration  22: 3045470.558 ops/s
Iteration  23: 3049184.221 ops/s
Iteration  24: 3046074.081 ops/s
Iteration  25: 3043912.908 ops/s
Iteration  26: 3042081.163 ops/s
Iteration  27: 3043862.703 ops/s
Iteration  28: 3046008.274 ops/s
Iteration  29: 3046497.207 ops/s
Iteration  30: 3042611.555 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_noneSatisfyWithOccurrences":
  2943399.542 ±(99.9%) 60775.667 ops/s [Average]
  (min, avg, max) = (2804362.986, 2943399.542, 3049184.221), stdev = 90966.164
  CI (99.9%): [2882623.874, 3004175.209] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_noneSatisfyWithOccurrences  thrpt   30  2943399.542 ± 60775.667  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4146062.667 ops/s
# Warmup Iteration   2: 7890437.025 ops/s
# Warmup Iteration   3: 7912179.945 ops/s
# Warmup Iteration   4: 8135241.560 ops/s
# Warmup Iteration   5: 8096661.137 ops/s
# Warmup Iteration   6: 8057297.681 ops/s
# Warmup Iteration   7: 8170424.351 ops/s
# Warmup Iteration   8: 8202973.480 ops/s
# Warmup Iteration   9: 8177249.367 ops/s
# Warmup Iteration  10: 8108223.595 ops/s
# Warmup Iteration  11: 8297770.211 ops/s
# Warmup Iteration  12: 8070393.981 ops/s
# Warmup Iteration  13: 8048028.482 ops/s
# Warmup Iteration  14: 8044482.826 ops/s
# Warmup Iteration  15: 7990799.227 ops/s
# Warmup Iteration  16: 7921348.394 ops/s
# Warmup Iteration  17: 8080971.236 ops/s
# Warmup Iteration  18: 8541544.172 ops/s
# Warmup Iteration  19: 8271254.387 ops/s
# Warmup Iteration  20: 8325311.695 ops/s
# Warmup Iteration  21: 8301283.864 ops/s
# Warmup Iteration  22: 8384761.767 ops/s
# Warmup Iteration  23: 7982415.427 ops/s
# Warmup Iteration  24: 8060552.270 ops/s
# Warmup Iteration  25: 8222152.616 ops/s
# Warmup Iteration  26: 8064565.045 ops/s
# Warmup Iteration  27: 8060398.770 ops/s
# Warmup Iteration  28: 8037381.125 ops/s
# Warmup Iteration  29: 8335208.428 ops/s
# Warmup Iteration  30: 8155383.253 ops/s
Iteration   1: 8374182.271 ops/s
Iteration   2: 8488740.441 ops/s
Iteration   3: 8212917.725 ops/s
Iteration   4: 8017855.221 ops/s
Iteration   5: 8067177.217 ops/s
Iteration   6: 7964422.013 ops/s
Iteration   7: 8039582.040 ops/s
Iteration   8: 7980418.932 ops/s
Iteration   9: 7951471.425 ops/s
Iteration  10: 8127916.478 ops/s
Iteration  11: 8085034.952 ops/s
Iteration  12: 7926576.982 ops/s
Iteration  13: 8090047.214 ops/s
Iteration  14: 8013717.006 ops/s
Iteration  15: 7974055.962 ops/s
Iteration  16: 8010405.680 ops/s
Iteration  17: 8269988.794 ops/s
Iteration  18: 7983617.789 ops/s
Iteration  19: 7908993.579 ops/s
Iteration  20: 8003342.436 ops/s
Iteration  21: 7989997.459 ops/s
Iteration  22: 8151426.754 ops/s
Iteration  23: 8138285.731 ops/s
Iteration  24: 8085130.089 ops/s
Iteration  25: 8036899.020 ops/s
Iteration  26: 8152212.710 ops/s
Iteration  27: 8125312.871 ops/s
Iteration  28: 8057609.895 ops/s
Iteration  29: 8152528.510 ops/s
Iteration  30: 8035695.318 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_notEmpty":
  8080518.750 ±(99.9%) 85697.529 ops/s [Average]
  (min, avg, max) = (7908993.579, 8080518.750, 8488740.441), stdev = 128268.037
  CI (99.9%): [7994821.222, 8166216.279] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_notEmpty  thrpt   30  8080518.750 ± 85697.529  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_occurrencesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_occurrencesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4871832.510 ops/s
# Warmup Iteration   2: 10148621.381 ops/s
# Warmup Iteration   3: 10079123.643 ops/s
# Warmup Iteration   4: 8312447.816 ops/s
# Warmup Iteration   5: 10314238.937 ops/s
# Warmup Iteration   6: 10158377.856 ops/s
# Warmup Iteration   7: 10168086.590 ops/s
# Warmup Iteration   8: 10302237.558 ops/s
# Warmup Iteration   9: 10606106.292 ops/s
# Warmup Iteration  10: 10803151.771 ops/s
# Warmup Iteration  11: 10895217.833 ops/s
# Warmup Iteration  12: 10887334.019 ops/s
# Warmup Iteration  13: 10876427.255 ops/s
# Warmup Iteration  14: 10869483.426 ops/s
# Warmup Iteration  15: 10881080.454 ops/s
# Warmup Iteration  16: 10869081.582 ops/s
# Warmup Iteration  17: 10855872.456 ops/s
# Warmup Iteration  18: 10622180.059 ops/s
# Warmup Iteration  19: 10396701.254 ops/s
# Warmup Iteration  20: 10411381.253 ops/s
# Warmup Iteration  21: 10129311.917 ops/s
# Warmup Iteration  22: 10659844.796 ops/s
# Warmup Iteration  23: 10295721.244 ops/s
# Warmup Iteration  24: 10404429.930 ops/s
# Warmup Iteration  25: 10177991.531 ops/s
# Warmup Iteration  26: 10173380.205 ops/s
# Warmup Iteration  27: 10138532.569 ops/s
# Warmup Iteration  28: 10357426.885 ops/s
# Warmup Iteration  29: 10234029.230 ops/s
# Warmup Iteration  30: 10127401.384 ops/s
Iteration   1: 10208720.293 ops/s
Iteration   2: 10167257.325 ops/s
Iteration   3: 10194911.669 ops/s
Iteration   4: 10107085.783 ops/s
Iteration   5: 10137245.676 ops/s
Iteration   6: 10227308.220 ops/s
Iteration   7: 10089823.568 ops/s
Iteration   8: 10202424.724 ops/s
Iteration   9: 10061050.129 ops/s
Iteration  10: 10150142.907 ops/s
Iteration  11: 10247579.022 ops/s
Iteration  12: 10256690.859 ops/s
Iteration  13: 10423416.604 ops/s
Iteration  14: 10111713.466 ops/s
Iteration  15: 9974831.114 ops/s
Iteration  16: 10130344.739 ops/s
Iteration  17: 10103050.251 ops/s
Iteration  18: 10298577.511 ops/s
Iteration  19: 10433825.811 ops/s
Iteration  20: 10325164.280 ops/s
Iteration  21: 10296598.248 ops/s
Iteration  22: 10439417.120 ops/s
Iteration  23: 10209762.650 ops/s
Iteration  24: 10228693.502 ops/s
Iteration  25: 10144181.692 ops/s
Iteration  26: 10058307.236 ops/s
Iteration  27: 10061229.813 ops/s
Iteration  28: 10534993.491 ops/s
Iteration  29: 10163999.926 ops/s
Iteration  30: 10418857.704 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_occurrencesOf":
  10213573.511 ±(99.9%) 89682.591 ops/s [Average]
  (min, avg, max) = (9974831.114, 10213573.511, 10534993.491), stdev = 134232.690
  CI (99.9%): [10123890.920, 10303256.102] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_occurrencesOf  thrpt   30  10213573.511 ± 89682.591  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 206568.345 ops/s
# Warmup Iteration   2: 362278.835 ops/s
# Warmup Iteration   3: 423115.836 ops/s
# Warmup Iteration   4: 446533.187 ops/s
# Warmup Iteration   5: 447082.356 ops/s
# Warmup Iteration   6: 352120.407 ops/s
# Warmup Iteration   7: 429248.067 ops/s
# Warmup Iteration   8: 436866.911 ops/s
# Warmup Iteration   9: 437306.644 ops/s
# Warmup Iteration  10: 432595.202 ops/s
# Warmup Iteration  11: 427447.345 ops/s
# Warmup Iteration  12: 430359.945 ops/s
# Warmup Iteration  13: 443895.921 ops/s
# Warmup Iteration  14: 433352.301 ops/s
# Warmup Iteration  15: 429060.203 ops/s
# Warmup Iteration  16: 437475.353 ops/s
# Warmup Iteration  17: 425475.869 ops/s
# Warmup Iteration  18: 441027.460 ops/s
# Warmup Iteration  19: 430982.686 ops/s
# Warmup Iteration  20: 428401.635 ops/s
# Warmup Iteration  21: 429852.623 ops/s
# Warmup Iteration  22: 425533.181 ops/s
# Warmup Iteration  23: 432574.570 ops/s
# Warmup Iteration  24: 452038.401 ops/s
# Warmup Iteration  25: 459869.470 ops/s
# Warmup Iteration  26: 459641.499 ops/s
# Warmup Iteration  27: 459687.609 ops/s
# Warmup Iteration  28: 460071.591 ops/s
# Warmup Iteration  29: 459581.567 ops/s
# Warmup Iteration  30: 459235.100 ops/s
Iteration   1: 459614.807 ops/s
Iteration   2: 457862.824 ops/s
Iteration   3: 460690.932 ops/s
Iteration   4: 455663.793 ops/s
Iteration   5: 428569.926 ops/s
Iteration   6: 431607.643 ops/s
Iteration   7: 431259.896 ops/s
Iteration   8: 430981.314 ops/s
Iteration   9: 427984.795 ops/s
Iteration  10: 436099.979 ops/s
Iteration  11: 441213.589 ops/s
Iteration  12: 459396.304 ops/s
Iteration  13: 439364.620 ops/s
Iteration  14: 427520.172 ops/s
Iteration  15: 421633.448 ops/s
Iteration  16: 440825.171 ops/s
Iteration  17: 423746.143 ops/s
Iteration  18: 428852.218 ops/s
Iteration  19: 429153.808 ops/s
Iteration  20: 452327.995 ops/s
Iteration  21: 435587.820 ops/s
Iteration  22: 440925.290 ops/s
Iteration  23: 451980.386 ops/s
Iteration  24: 439710.232 ops/s
Iteration  25: 436425.010 ops/s
Iteration  26: 426601.792 ops/s
Iteration  27: 428604.982 ops/s
Iteration  28: 433184.685 ops/s
Iteration  29: 431576.202 ops/s
Iteration  30: 428302.273 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_partition":
  437908.935 ±(99.9%) 7880.594 ops/s [Average]
  (min, avg, max) = (421633.448, 437908.935, 460690.932), stdev = 11795.303
  CI (99.9%): [430028.341, 445789.529] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_partition  thrpt   30  437908.935 ± 7880.594  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 130109.045 ops/s
# Warmup Iteration   2: 165736.890 ops/s
# Warmup Iteration   3: 231768.061 ops/s
# Warmup Iteration   4: 233649.198 ops/s
# Warmup Iteration   5: 235642.609 ops/s
# Warmup Iteration   6: 231136.306 ops/s
# Warmup Iteration   7: 228559.362 ops/s
# Warmup Iteration   8: 238989.867 ops/s
# Warmup Iteration   9: 198989.949 ops/s
# Warmup Iteration  10: 219898.948 ops/s
# Warmup Iteration  11: 231500.920 ops/s
# Warmup Iteration  12: 235532.199 ops/s
# Warmup Iteration  13: 230988.509 ops/s
# Warmup Iteration  14: 231311.878 ops/s
# Warmup Iteration  15: 233374.564 ops/s
# Warmup Iteration  16: 231614.500 ops/s
# Warmup Iteration  17: 229572.341 ops/s
# Warmup Iteration  18: 230575.512 ops/s
# Warmup Iteration  19: 233945.010 ops/s
# Warmup Iteration  20: 232224.547 ops/s
# Warmup Iteration  21: 230964.947 ops/s
# Warmup Iteration  22: 232225.518 ops/s
# Warmup Iteration  23: 234802.167 ops/s
# Warmup Iteration  24: 230334.357 ops/s
# Warmup Iteration  25: 232563.571 ops/s
# Warmup Iteration  26: 230869.815 ops/s
# Warmup Iteration  27: 228595.070 ops/s
# Warmup Iteration  28: 240816.609 ops/s
# Warmup Iteration  29: 238046.973 ops/s
# Warmup Iteration  30: 230453.389 ops/s
Iteration   1: 225531.299 ops/s
Iteration   2: 228723.504 ops/s
Iteration   3: 230612.308 ops/s
Iteration   4: 233227.439 ops/s
Iteration   5: 228002.264 ops/s
Iteration   6: 232929.568 ops/s
Iteration   7: 230801.650 ops/s
Iteration   8: 228656.587 ops/s
Iteration   9: 230675.048 ops/s
Iteration  10: 228992.898 ops/s
Iteration  11: 231211.170 ops/s
Iteration  12: 233957.715 ops/s
Iteration  13: 235709.387 ops/s
Iteration  14: 229140.752 ops/s
Iteration  15: 238832.760 ops/s
Iteration  16: 242589.487 ops/s
Iteration  17: 248218.636 ops/s
Iteration  18: 248224.979 ops/s
Iteration  19: 247549.189 ops/s
Iteration  20: 248174.697 ops/s
Iteration  21: 247861.935 ops/s
Iteration  22: 247599.753 ops/s
Iteration  23: 247198.783 ops/s
Iteration  24: 247824.284 ops/s
Iteration  25: 247626.790 ops/s
Iteration  26: 248230.391 ops/s
Iteration  27: 248001.671 ops/s
Iteration  28: 247137.826 ops/s
Iteration  29: 247097.990 ops/s
Iteration  30: 247952.710 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_partitionWith":
  239276.449 ±(99.9%) 5785.238 ops/s [Average]
  (min, avg, max) = (225531.299, 239276.449, 248230.391), stdev = 8659.073
  CI (99.9%): [233491.211, 245061.687] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_partitionWith  thrpt   30  239276.449 ± 5785.238  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_reduceOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_reduceOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 401555.272 ops/s
# Warmup Iteration   2: 608876.172 ops/s
# Warmup Iteration   3: 674635.554 ops/s
# Warmup Iteration   4: 683550.140 ops/s
# Warmup Iteration   5: 672101.955 ops/s
# Warmup Iteration   6: 592100.323 ops/s
# Warmup Iteration   7: 688391.712 ops/s
# Warmup Iteration   8: 682204.883 ops/s
# Warmup Iteration   9: 686187.604 ops/s
# Warmup Iteration  10: 684772.469 ops/s
# Warmup Iteration  11: 688793.301 ops/s
# Warmup Iteration  12: 679552.219 ops/s
# Warmup Iteration  13: 679041.778 ops/s
# Warmup Iteration  14: 680243.896 ops/s
# Warmup Iteration  15: 700877.369 ops/s
# Warmup Iteration  16: 687357.418 ops/s
# Warmup Iteration  17: 678839.300 ops/s
# Warmup Iteration  18: 685167.831 ops/s
# Warmup Iteration  19: 682058.670 ops/s
# Warmup Iteration  20: 688039.123 ops/s
# Warmup Iteration  21: 687701.210 ops/s
# Warmup Iteration  22: 681003.060 ops/s
# Warmup Iteration  23: 672682.034 ops/s
# Warmup Iteration  24: 691525.169 ops/s
# Warmup Iteration  25: 678043.899 ops/s
# Warmup Iteration  26: 678998.573 ops/s
# Warmup Iteration  27: 680203.778 ops/s
# Warmup Iteration  28: 674995.673 ops/s
# Warmup Iteration  29: 709949.319 ops/s
# Warmup Iteration  30: 698357.077 ops/s
Iteration   1: 684229.174 ops/s
Iteration   2: 684276.706 ops/s
Iteration   3: 673917.407 ops/s
Iteration   4: 680671.433 ops/s
Iteration   5: 676108.543 ops/s
Iteration   6: 677899.091 ops/s
Iteration   7: 685946.837 ops/s
Iteration   8: 705623.697 ops/s
Iteration   9: 661360.891 ops/s
Iteration  10: 696655.693 ops/s
Iteration  11: 730995.343 ops/s
Iteration  12: 678583.686 ops/s
Iteration  13: 666322.513 ops/s
Iteration  14: 694665.495 ops/s
Iteration  15: 697781.647 ops/s
Iteration  16: 670280.472 ops/s
Iteration  17: 683084.058 ops/s
Iteration  18: 683220.412 ops/s
Iteration  19: 672251.029 ops/s
Iteration  20: 679727.341 ops/s
Iteration  21: 677238.681 ops/s
Iteration  22: 681618.440 ops/s
Iteration  23: 683600.695 ops/s
Iteration  24: 712439.948 ops/s
Iteration  25: 690804.136 ops/s
Iteration  26: 679199.706 ops/s
Iteration  27: 682456.567 ops/s
Iteration  28: 679018.334 ops/s
Iteration  29: 690086.211 ops/s
Iteration  30: 670054.526 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_reduceOptional":
  684337.290 ±(99.9%) 9400.772 ops/s [Average]
  (min, avg, max) = (661360.891, 684337.290, 730995.343), stdev = 14070.634
  CI (99.9%): [674936.518, 693738.062] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_reduceOptional  thrpt   30  684337.290 ± 9400.772  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 718421.860 ops/s
# Warmup Iteration   2: 1701084.474 ops/s
# Warmup Iteration   3: 1807472.649 ops/s
# Warmup Iteration   4: 1514172.314 ops/s
# Warmup Iteration   5: 1756468.668 ops/s
# Warmup Iteration   6: 1795414.251 ops/s
# Warmup Iteration   7: 1748887.783 ops/s
# Warmup Iteration   8: 1867243.410 ops/s
# Warmup Iteration   9: 1862639.127 ops/s
# Warmup Iteration  10: 1863445.809 ops/s
# Warmup Iteration  11: 1865026.901 ops/s
# Warmup Iteration  12: 1863654.161 ops/s
# Warmup Iteration  13: 1866134.501 ops/s
# Warmup Iteration  14: 1862188.500 ops/s
# Warmup Iteration  15: 1863757.604 ops/s
# Warmup Iteration  16: 1759887.939 ops/s
# Warmup Iteration  17: 1820742.761 ops/s
# Warmup Iteration  18: 1787020.971 ops/s
# Warmup Iteration  19: 1732961.438 ops/s
# Warmup Iteration  20: 1747625.191 ops/s
# Warmup Iteration  21: 1749909.777 ops/s
# Warmup Iteration  22: 1809548.338 ops/s
# Warmup Iteration  23: 1752665.596 ops/s
# Warmup Iteration  24: 1746910.910 ops/s
# Warmup Iteration  25: 1763776.749 ops/s
# Warmup Iteration  26: 1858448.711 ops/s
# Warmup Iteration  27: 1724519.658 ops/s
# Warmup Iteration  28: 1727993.341 ops/s
# Warmup Iteration  29: 1721515.623 ops/s
# Warmup Iteration  30: 1736554.840 ops/s
Iteration   1: 1729130.349 ops/s
Iteration   2: 1785976.590 ops/s
Iteration   3: 1727113.381 ops/s
Iteration   4: 1797726.061 ops/s
Iteration   5: 1782318.181 ops/s
Iteration   6: 1836766.148 ops/s
Iteration   7: 1766011.334 ops/s
Iteration   8: 1777984.804 ops/s
Iteration   9: 1831164.457 ops/s
Iteration  10: 1766785.009 ops/s
Iteration  11: 1759585.713 ops/s
Iteration  12: 1759470.448 ops/s
Iteration  13: 1757251.708 ops/s
Iteration  14: 1762337.061 ops/s
Iteration  15: 1760129.649 ops/s
Iteration  16: 1717408.046 ops/s
Iteration  17: 1762112.371 ops/s
Iteration  18: 1812973.167 ops/s
Iteration  19: 1748390.363 ops/s
Iteration  20: 1751731.970 ops/s
Iteration  21: 1742616.616 ops/s
Iteration  22: 1743571.436 ops/s
Iteration  23: 1711708.285 ops/s
Iteration  24: 1801155.400 ops/s
Iteration  25: 1730220.059 ops/s
Iteration  26: 1779735.806 ops/s
Iteration  27: 1754421.647 ops/s
Iteration  28: 1774990.936 ops/s
Iteration  29: 1780573.499 ops/s
Iteration  30: 1772224.030 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_reject":
  1766119.484 ±(99.9%) 20163.730 ops/s [Average]
  (min, avg, max) = (1711708.285, 1766119.484, 1836766.148), stdev = 30180.124
  CI (99.9%): [1745955.755, 1786283.214] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_reject  thrpt   30  1766119.484 ± 20163.730  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 723025.769 ops/s
# Warmup Iteration   2: 1727054.035 ops/s
# Warmup Iteration   3: 1784820.444 ops/s
# Warmup Iteration   4: 1439016.956 ops/s
# Warmup Iteration   5: 1813411.763 ops/s
# Warmup Iteration   6: 1776245.826 ops/s
# Warmup Iteration   7: 1801206.078 ops/s
# Warmup Iteration   8: 1803163.118 ops/s
# Warmup Iteration   9: 1875363.055 ops/s
# Warmup Iteration  10: 1783634.172 ops/s
# Warmup Iteration  11: 1773816.838 ops/s
# Warmup Iteration  12: 1784366.229 ops/s
# Warmup Iteration  13: 1788880.601 ops/s
# Warmup Iteration  14: 1813337.940 ops/s
# Warmup Iteration  15: 1810954.620 ops/s
# Warmup Iteration  16: 1800715.255 ops/s
# Warmup Iteration  17: 1837614.984 ops/s
# Warmup Iteration  18: 1771958.380 ops/s
# Warmup Iteration  19: 1785630.214 ops/s
# Warmup Iteration  20: 1785308.112 ops/s
# Warmup Iteration  21: 1796920.182 ops/s
# Warmup Iteration  22: 1849455.145 ops/s
# Warmup Iteration  23: 1888314.689 ops/s
# Warmup Iteration  24: 1888795.365 ops/s
# Warmup Iteration  25: 1887657.512 ops/s
# Warmup Iteration  26: 1888690.222 ops/s
# Warmup Iteration  27: 1888366.524 ops/s
# Warmup Iteration  28: 1885190.911 ops/s
# Warmup Iteration  29: 1889239.783 ops/s
# Warmup Iteration  30: 1874522.287 ops/s
Iteration   1: 1791494.600 ops/s
Iteration   2: 1810933.688 ops/s
Iteration   3: 1806585.161 ops/s
Iteration   4: 1775125.108 ops/s
Iteration   5: 1756015.073 ops/s
Iteration   6: 1775577.661 ops/s
Iteration   7: 1751511.246 ops/s
Iteration   8: 1751123.806 ops/s
Iteration   9: 1759274.656 ops/s
Iteration  10: 1746615.747 ops/s
Iteration  11: 1755676.814 ops/s
Iteration  12: 1755795.634 ops/s
Iteration  13: 1735886.181 ops/s
Iteration  14: 1818608.394 ops/s
Iteration  15: 1766835.849 ops/s
Iteration  16: 1793375.861 ops/s
Iteration  17: 1779753.577 ops/s
Iteration  18: 1761082.646 ops/s
Iteration  19: 1752981.651 ops/s
Iteration  20: 1731711.009 ops/s
Iteration  21: 1785683.706 ops/s
Iteration  22: 1756389.414 ops/s
Iteration  23: 1775257.381 ops/s
Iteration  24: 1755920.080 ops/s
Iteration  25: 1759724.413 ops/s
Iteration  26: 1736273.502 ops/s
Iteration  27: 1748464.447 ops/s
Iteration  28: 1747288.623 ops/s
Iteration  29: 1760632.175 ops/s
Iteration  30: 1808359.005 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_rejectWith":
  1766998.570 ±(99.9%) 15534.411 ops/s [Average]
  (min, avg, max) = (1731711.009, 1766998.570, 1818608.394), stdev = 23251.178
  CI (99.9%): [1751464.159, 1782532.982] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_rejectWith  thrpt   30  1766998.570 ± 15534.411  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 818909.867 ops/s
# Warmup Iteration   2: 2060437.750 ops/s
# Warmup Iteration   3: 2033009.882 ops/s
# Warmup Iteration   4: 1710710.219 ops/s
# Warmup Iteration   5: 2029272.483 ops/s
# Warmup Iteration   6: 2090694.664 ops/s
# Warmup Iteration   7: 2050352.839 ops/s
# Warmup Iteration   8: 2057213.543 ops/s
# Warmup Iteration   9: 2056808.372 ops/s
# Warmup Iteration  10: 2071874.377 ops/s
# Warmup Iteration  11: 2137092.084 ops/s
# Warmup Iteration  12: 2089505.309 ops/s
# Warmup Iteration  13: 2088276.597 ops/s
# Warmup Iteration  14: 2096334.387 ops/s
# Warmup Iteration  15: 2088710.388 ops/s
# Warmup Iteration  16: 2054227.691 ops/s
# Warmup Iteration  17: 2056340.291 ops/s
# Warmup Iteration  18: 2098894.495 ops/s
# Warmup Iteration  19: 2134341.073 ops/s
# Warmup Iteration  20: 2046120.206 ops/s
# Warmup Iteration  21: 2056205.915 ops/s
# Warmup Iteration  22: 2159370.146 ops/s
# Warmup Iteration  23: 2071682.062 ops/s
# Warmup Iteration  24: 2048131.597 ops/s
# Warmup Iteration  25: 2026133.905 ops/s
# Warmup Iteration  26: 2041726.121 ops/s
# Warmup Iteration  27: 2053952.269 ops/s
# Warmup Iteration  28: 2025410.032 ops/s
# Warmup Iteration  29: 2011394.251 ops/s
# Warmup Iteration  30: 2043729.800 ops/s
Iteration   1: 2044061.266 ops/s
Iteration   2: 2025720.269 ops/s
Iteration   3: 2082471.656 ops/s
Iteration   4: 2069058.190 ops/s
Iteration   5: 2097666.517 ops/s
Iteration   6: 2049612.650 ops/s
Iteration   7: 2050851.679 ops/s
Iteration   8: 2063689.768 ops/s
Iteration   9: 2072062.628 ops/s
Iteration  10: 2025835.153 ops/s
Iteration  11: 2028594.932 ops/s
Iteration  12: 2087426.735 ops/s
Iteration  13: 2197592.570 ops/s
Iteration  14: 2200113.869 ops/s
Iteration  15: 2195536.483 ops/s
Iteration  16: 2191996.843 ops/s
Iteration  17: 2179843.351 ops/s
Iteration  18: 2184823.819 ops/s
Iteration  19: 2191350.574 ops/s
Iteration  20: 2197404.727 ops/s
Iteration  21: 2194117.040 ops/s
Iteration  22: 2192885.246 ops/s
Iteration  23: 2182057.753 ops/s
Iteration  24: 2185596.584 ops/s
Iteration  25: 2191556.396 ops/s
Iteration  26: 2193815.069 ops/s
Iteration  27: 2193720.385 ops/s
Iteration  28: 2195398.073 ops/s
Iteration  29: 2188073.916 ops/s
Iteration  30: 2107897.097 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_rejectWith_target":
  2135361.041 ±(99.9%) 45277.773 ops/s [Average]
  (min, avg, max) = (2025720.269, 2135361.041, 2200113.869), stdev = 67769.645
  CI (99.9%): [2090083.268, 2180638.815] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_rejectWith_target  thrpt   30  2135361.041 ± 45277.773  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 521064.774 ops/s
# Warmup Iteration   2: 1005808.617 ops/s
# Warmup Iteration   3: 1178340.761 ops/s
# Warmup Iteration   4: 1110346.562 ops/s
# Warmup Iteration   5: 995178.160 ops/s
# Warmup Iteration   6: 995270.712 ops/s
# Warmup Iteration   7: 1135361.519 ops/s
# Warmup Iteration   8: 1110821.411 ops/s
# Warmup Iteration   9: 1106291.883 ops/s
# Warmup Iteration  10: 1103132.431 ops/s
# Warmup Iteration  11: 1103504.037 ops/s
# Warmup Iteration  12: 1119886.294 ops/s
# Warmup Iteration  13: 1121865.893 ops/s
# Warmup Iteration  14: 1114232.322 ops/s
# Warmup Iteration  15: 1103692.251 ops/s
# Warmup Iteration  16: 1134444.079 ops/s
# Warmup Iteration  17: 1150235.708 ops/s
# Warmup Iteration  18: 1114916.775 ops/s
# Warmup Iteration  19: 1122631.465 ops/s
# Warmup Iteration  20: 1148897.199 ops/s
# Warmup Iteration  21: 1113608.631 ops/s
# Warmup Iteration  22: 1134558.973 ops/s
# Warmup Iteration  23: 1135058.872 ops/s
# Warmup Iteration  24: 1123749.717 ops/s
# Warmup Iteration  25: 1129697.597 ops/s
# Warmup Iteration  26: 1099679.183 ops/s
# Warmup Iteration  27: 1106608.360 ops/s
# Warmup Iteration  28: 1137136.138 ops/s
# Warmup Iteration  29: 1117714.885 ops/s
# Warmup Iteration  30: 1132543.213 ops/s
Iteration   1: 1122112.898 ops/s
Iteration   2: 1145482.963 ops/s
Iteration   3: 1096839.905 ops/s
Iteration   4: 1140159.000 ops/s
Iteration   5: 1137092.628 ops/s
Iteration   6: 1156898.969 ops/s
Iteration   7: 1192266.673 ops/s
Iteration   8: 1191737.236 ops/s
Iteration   9: 1191647.495 ops/s
Iteration  10: 1174732.688 ops/s
Iteration  11: 1125582.367 ops/s
Iteration  12: 1139451.379 ops/s
Iteration  13: 1146849.934 ops/s
Iteration  14: 1102572.119 ops/s
Iteration  15: 1124999.261 ops/s
Iteration  16: 1193121.040 ops/s
Iteration  17: 1147738.300 ops/s
Iteration  18: 1089996.537 ops/s
Iteration  19: 1098795.778 ops/s
Iteration  20: 1101796.610 ops/s
Iteration  21: 1102446.239 ops/s
Iteration  22: 1108108.645 ops/s
Iteration  23: 1091121.625 ops/s
Iteration  24: 1109566.433 ops/s
Iteration  25: 1111790.386 ops/s
Iteration  26: 1101114.453 ops/s
Iteration  27: 1106144.397 ops/s
Iteration  28: 1092020.688 ops/s
Iteration  29: 1098864.100 ops/s
Iteration  30: 1095019.135 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_removeAll":
  1127868.996 ±(99.9%) 22540.639 ops/s [Average]
  (min, avg, max) = (1089996.537, 1127868.996, 1193121.040), stdev = 33737.769
  CI (99.9%): [1105328.357, 1150409.635] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_removeAll  thrpt   30  1127868.996 ± 22540.639  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 327762.673 ops/s
# Warmup Iteration   2: 631023.276 ops/s
# Warmup Iteration   3: 708463.301 ops/s
# Warmup Iteration   4: 713112.818 ops/s
# Warmup Iteration   5: 613663.303 ops/s
# Warmup Iteration   6: 707576.811 ops/s
# Warmup Iteration   7: 744165.134 ops/s
# Warmup Iteration   8: 744648.277 ops/s
# Warmup Iteration   9: 744327.512 ops/s
# Warmup Iteration  10: 745566.769 ops/s
# Warmup Iteration  11: 745080.191 ops/s
# Warmup Iteration  12: 744230.132 ops/s
# Warmup Iteration  13: 744996.548 ops/s
# Warmup Iteration  14: 704575.825 ops/s
# Warmup Iteration  15: 700650.902 ops/s
# Warmup Iteration  16: 703926.098 ops/s
# Warmup Iteration  17: 690867.773 ops/s
# Warmup Iteration  18: 693067.090 ops/s
# Warmup Iteration  19: 703837.048 ops/s
# Warmup Iteration  20: 708644.001 ops/s
# Warmup Iteration  21: 706380.242 ops/s
# Warmup Iteration  22: 691933.245 ops/s
# Warmup Iteration  23: 707625.167 ops/s
# Warmup Iteration  24: 688675.822 ops/s
# Warmup Iteration  25: 690660.827 ops/s
# Warmup Iteration  26: 698807.302 ops/s
# Warmup Iteration  27: 705952.613 ops/s
# Warmup Iteration  28: 702756.657 ops/s
# Warmup Iteration  29: 696895.494 ops/s
# Warmup Iteration  30: 689195.653 ops/s
Iteration   1: 690119.732 ops/s
Iteration   2: 703869.799 ops/s
Iteration   3: 716335.864 ops/s
Iteration   4: 701842.829 ops/s
Iteration   5: 687330.908 ops/s
Iteration   6: 689046.232 ops/s
Iteration   7: 683262.185 ops/s
Iteration   8: 696084.771 ops/s
Iteration   9: 713727.371 ops/s
Iteration  10: 711103.873 ops/s
Iteration  11: 697027.993 ops/s
Iteration  12: 692378.993 ops/s
Iteration  13: 718904.622 ops/s
Iteration  14: 721534.630 ops/s
Iteration  15: 741378.331 ops/s
Iteration  16: 712118.765 ops/s
Iteration  17: 699927.329 ops/s
Iteration  18: 686529.279 ops/s
Iteration  19: 691034.571 ops/s
Iteration  20: 678560.337 ops/s
Iteration  21: 691374.477 ops/s
Iteration  22: 688515.520 ops/s
Iteration  23: 731835.924 ops/s
Iteration  24: 707928.999 ops/s
Iteration  25: 688686.897 ops/s
Iteration  26: 721292.480 ops/s
Iteration  27: 720584.113 ops/s
Iteration  28: 689492.550 ops/s
Iteration  29: 731997.596 ops/s
Iteration  30: 739206.922 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_removeAllIterable":
  704767.796 ±(99.9%) 11780.577 ops/s [Average]
  (min, avg, max) = (678560.337, 704767.796, 741378.331), stdev = 17632.614
  CI (99.9%): [692987.220, 716548.373] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_removeAllIterable  thrpt   30  704767.796 ± 11780.577  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 365272.216 ops/s
# Warmup Iteration   2: 622451.756 ops/s
# Warmup Iteration   3: 733098.697 ops/s
# Warmup Iteration   4: 755019.695 ops/s
# Warmup Iteration   5: 729405.046 ops/s
# Warmup Iteration   6: 609078.100 ops/s
# Warmup Iteration   7: 722467.943 ops/s
# Warmup Iteration   8: 749998.823 ops/s
# Warmup Iteration   9: 744222.737 ops/s
# Warmup Iteration  10: 745641.692 ops/s
# Warmup Iteration  11: 718334.367 ops/s
# Warmup Iteration  12: 723872.562 ops/s
# Warmup Iteration  13: 756627.041 ops/s
# Warmup Iteration  14: 756028.139 ops/s
# Warmup Iteration  15: 774892.838 ops/s
# Warmup Iteration  16: 761203.674 ops/s
# Warmup Iteration  17: 730119.503 ops/s
# Warmup Iteration  18: 757476.017 ops/s
# Warmup Iteration  19: 728567.604 ops/s
# Warmup Iteration  20: 770257.728 ops/s
# Warmup Iteration  21: 781216.961 ops/s
# Warmup Iteration  22: 781499.647 ops/s
# Warmup Iteration  23: 780973.528 ops/s
# Warmup Iteration  24: 779484.952 ops/s
# Warmup Iteration  25: 781660.320 ops/s
# Warmup Iteration  26: 781952.730 ops/s
# Warmup Iteration  27: 780941.140 ops/s
# Warmup Iteration  28: 778360.517 ops/s
# Warmup Iteration  29: 726092.186 ops/s
# Warmup Iteration  30: 721937.920 ops/s
Iteration   1: 736634.292 ops/s
Iteration   2: 729145.960 ops/s
Iteration   3: 717405.388 ops/s
Iteration   4: 720227.870 ops/s
Iteration   5: 731763.054 ops/s
Iteration   6: 720839.790 ops/s
Iteration   7: 731804.022 ops/s
Iteration   8: 724461.435 ops/s
Iteration   9: 720971.628 ops/s
Iteration  10: 724359.450 ops/s
Iteration  11: 732892.390 ops/s
Iteration  12: 767192.642 ops/s
Iteration  13: 743745.341 ops/s
Iteration  14: 734962.328 ops/s
Iteration  15: 745082.895 ops/s
Iteration  16: 765599.727 ops/s
Iteration  17: 743147.950 ops/s
Iteration  18: 736664.045 ops/s
Iteration  19: 736689.932 ops/s
Iteration  20: 736885.051 ops/s
Iteration  21: 735013.319 ops/s
Iteration  22: 723520.894 ops/s
Iteration  23: 722346.382 ops/s
Iteration  24: 732833.990 ops/s
Iteration  25: 729168.836 ops/s
Iteration  26: 733960.781 ops/s
Iteration  27: 715566.656 ops/s
Iteration  28: 728036.214 ops/s
Iteration  29: 719281.970 ops/s
Iteration  30: 770156.099 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_removeIf":
  733678.678 ±(99.9%) 9305.994 ops/s [Average]
  (min, avg, max) = (715566.656, 733678.678, 770156.099), stdev = 13928.775
  CI (99.9%): [724372.683, 742984.672] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_removeIf  thrpt   30  733678.678 ± 9305.994  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1157257.544 ops/s
# Warmup Iteration   2: 2477574.351 ops/s
# Warmup Iteration   3: 2459733.303 ops/s
# Warmup Iteration   4: 2465287.809 ops/s
# Warmup Iteration   5: 1982744.431 ops/s
# Warmup Iteration   6: 2390883.349 ops/s
# Warmup Iteration   7: 2482337.237 ops/s
# Warmup Iteration   8: 2465710.517 ops/s
# Warmup Iteration   9: 2445635.097 ops/s
# Warmup Iteration  10: 2469548.455 ops/s
# Warmup Iteration  11: 2531618.483 ops/s
# Warmup Iteration  12: 2448046.970 ops/s
# Warmup Iteration  13: 2486039.875 ops/s
# Warmup Iteration  14: 2464216.173 ops/s
# Warmup Iteration  15: 2475218.890 ops/s
# Warmup Iteration  16: 2473321.769 ops/s
# Warmup Iteration  17: 2562592.755 ops/s
# Warmup Iteration  18: 2402952.654 ops/s
# Warmup Iteration  19: 2399100.646 ops/s
# Warmup Iteration  20: 2414857.602 ops/s
# Warmup Iteration  21: 2462925.670 ops/s
# Warmup Iteration  22: 2446956.691 ops/s
# Warmup Iteration  23: 2427955.006 ops/s
# Warmup Iteration  24: 2403788.210 ops/s
# Warmup Iteration  25: 2533369.326 ops/s
# Warmup Iteration  26: 2400750.754 ops/s
# Warmup Iteration  27: 2406379.277 ops/s
# Warmup Iteration  28: 2375666.077 ops/s
# Warmup Iteration  29: 2413672.234 ops/s
# Warmup Iteration  30: 2407165.415 ops/s
Iteration   1: 2418352.465 ops/s
Iteration   2: 2396981.846 ops/s
Iteration   3: 2405526.496 ops/s
Iteration   4: 2356290.544 ops/s
Iteration   5: 2407607.704 ops/s
Iteration   6: 2434422.668 ops/s
Iteration   7: 2408527.008 ops/s
Iteration   8: 2513495.320 ops/s
Iteration   9: 2585864.855 ops/s
Iteration  10: 2586224.433 ops/s
Iteration  11: 2585295.142 ops/s
Iteration  12: 2589603.218 ops/s
Iteration  13: 2582592.062 ops/s
Iteration  14: 2580214.679 ops/s
Iteration  15: 2580954.660 ops/s
Iteration  16: 2582600.085 ops/s
Iteration  17: 2581230.034 ops/s
Iteration  18: 2587923.966 ops/s
Iteration  19: 2579287.172 ops/s
Iteration  20: 2578334.705 ops/s
Iteration  21: 2579602.758 ops/s
Iteration  22: 2582881.845 ops/s
Iteration  23: 2580520.162 ops/s
Iteration  24: 2584074.379 ops/s
Iteration  25: 2475359.653 ops/s
Iteration  26: 2391727.859 ops/s
Iteration  27: 2398131.610 ops/s
Iteration  28: 2409037.285 ops/s
Iteration  29: 2564735.907 ops/s
Iteration  30: 2576239.510 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_removeIfWith":
  2516121.334 ±(99.9%) 57081.427 ops/s [Average]
  (min, avg, max) = (2356290.544, 2516121.334, 2589603.218), stdev = 85436.799
  CI (99.9%): [2459039.908, 2573202.761] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_removeIfWith  thrpt   30  2516121.334 ± 57081.427  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 568635.267 ops/s
# Warmup Iteration   2: 1745744.657 ops/s
# Warmup Iteration   3: 1918866.289 ops/s
# Warmup Iteration   4: 1536554.330 ops/s
# Warmup Iteration   5: 1900126.860 ops/s
# Warmup Iteration   6: 1921395.003 ops/s
# Warmup Iteration   7: 1917874.900 ops/s
# Warmup Iteration   8: 1884428.097 ops/s
# Warmup Iteration   9: 1924167.587 ops/s
# Warmup Iteration  10: 1933361.775 ops/s
# Warmup Iteration  11: 1885659.341 ops/s
# Warmup Iteration  12: 1916480.497 ops/s
# Warmup Iteration  13: 1884747.102 ops/s
# Warmup Iteration  14: 1982735.605 ops/s
# Warmup Iteration  15: 2018251.222 ops/s
# Warmup Iteration  16: 1970460.069 ops/s
# Warmup Iteration  17: 1891098.125 ops/s
# Warmup Iteration  18: 1901316.608 ops/s
# Warmup Iteration  19: 1872895.523 ops/s
# Warmup Iteration  20: 1896692.774 ops/s
# Warmup Iteration  21: 1882280.052 ops/s
# Warmup Iteration  22: 1903322.815 ops/s
# Warmup Iteration  23: 1895962.434 ops/s
# Warmup Iteration  24: 1887014.455 ops/s
# Warmup Iteration  25: 1895080.387 ops/s
# Warmup Iteration  26: 1935606.563 ops/s
# Warmup Iteration  27: 1905551.801 ops/s
# Warmup Iteration  28: 1902784.440 ops/s
# Warmup Iteration  29: 1867247.354 ops/s
# Warmup Iteration  30: 1977776.763 ops/s
Iteration   1: 1997077.253 ops/s
Iteration   2: 1942633.888 ops/s
Iteration   3: 2023633.403 ops/s
Iteration   4: 1934744.639 ops/s
Iteration   5: 1974240.530 ops/s
Iteration   6: 1919372.578 ops/s
Iteration   7: 1903782.333 ops/s
Iteration   8: 1918711.616 ops/s
Iteration   9: 1917537.723 ops/s
Iteration  10: 1922984.659 ops/s
Iteration  11: 1952112.994 ops/s
Iteration  12: 1886545.689 ops/s
Iteration  13: 1891209.459 ops/s
Iteration  14: 1865890.057 ops/s
Iteration  15: 1917810.385 ops/s
Iteration  16: 2018363.970 ops/s
Iteration  17: 1884844.752 ops/s
Iteration  18: 1932867.563 ops/s
Iteration  19: 1901378.785 ops/s
Iteration  20: 1903840.144 ops/s
Iteration  21: 1886246.223 ops/s
Iteration  22: 1909591.459 ops/s
Iteration  23: 1867189.847 ops/s
Iteration  24: 1901268.003 ops/s
Iteration  25: 1899252.869 ops/s
Iteration  26: 1926088.026 ops/s
Iteration  27: 1881869.889 ops/s
Iteration  28: 1931572.206 ops/s
Iteration  29: 1877098.972 ops/s
Iteration  30: 1976665.672 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_removeObject":
  1922214.186 ±(99.9%) 27624.167 ops/s [Average]
  (min, avg, max) = (1865890.057, 1922214.186, 2023633.403), stdev = 41346.557
  CI (99.9%): [1894590.019, 1949838.354] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_removeObject  thrpt   30  1922214.186 ± 27624.167  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_removeOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_removeOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 194922.650 ops/s
# Warmup Iteration   2: 394330.128 ops/s
# Warmup Iteration   3: 432997.951 ops/s
# Warmup Iteration   4: 451103.126 ops/s
# Warmup Iteration   5: 376796.254 ops/s
# Warmup Iteration   6: 451708.042 ops/s
# Warmup Iteration   7: 452116.377 ops/s
# Warmup Iteration   8: 451944.300 ops/s
# Warmup Iteration   9: 451089.584 ops/s
# Warmup Iteration  10: 450923.397 ops/s
# Warmup Iteration  11: 451581.987 ops/s
# Warmup Iteration  12: 421606.731 ops/s
# Warmup Iteration  13: 426334.634 ops/s
# Warmup Iteration  14: 422979.146 ops/s
# Warmup Iteration  15: 427466.691 ops/s
# Warmup Iteration  16: 416473.728 ops/s
# Warmup Iteration  17: 419096.062 ops/s
# Warmup Iteration  18: 422019.974 ops/s
# Warmup Iteration  19: 419330.443 ops/s
# Warmup Iteration  20: 426312.076 ops/s
# Warmup Iteration  21: 428076.550 ops/s
# Warmup Iteration  22: 427016.466 ops/s
# Warmup Iteration  23: 421017.073 ops/s
# Warmup Iteration  24: 419381.670 ops/s
# Warmup Iteration  25: 420189.724 ops/s
# Warmup Iteration  26: 416592.452 ops/s
# Warmup Iteration  27: 424343.726 ops/s
# Warmup Iteration  28: 431218.551 ops/s
# Warmup Iteration  29: 423751.350 ops/s
# Warmup Iteration  30: 428942.637 ops/s
Iteration   1: 415893.612 ops/s
Iteration   2: 431605.380 ops/s
Iteration   3: 426142.231 ops/s
Iteration   4: 427881.840 ops/s
Iteration   5: 441404.124 ops/s
Iteration   6: 435506.422 ops/s
Iteration   7: 424675.603 ops/s
Iteration   8: 428071.472 ops/s
Iteration   9: 429776.937 ops/s
Iteration  10: 443299.388 ops/s
Iteration  11: 423098.733 ops/s
Iteration  12: 417216.631 ops/s
Iteration  13: 431227.967 ops/s
Iteration  14: 436250.622 ops/s
Iteration  15: 434616.192 ops/s
Iteration  16: 420941.432 ops/s
Iteration  17: 422821.336 ops/s
Iteration  18: 425918.825 ops/s
Iteration  19: 449335.712 ops/s
Iteration  20: 421678.001 ops/s
Iteration  21: 420755.716 ops/s
Iteration  22: 417012.307 ops/s
Iteration  23: 430668.848 ops/s
Iteration  24: 423510.203 ops/s
Iteration  25: 429210.768 ops/s
Iteration  26: 424344.364 ops/s
Iteration  27: 413616.910 ops/s
Iteration  28: 435208.174 ops/s
Iteration  29: 436703.934 ops/s
Iteration  30: 427581.669 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_removeOccurrences":
  428199.178 ±(99.9%) 5596.643 ops/s [Average]
  (min, avg, max) = (413616.910, 428199.178, 449335.712), stdev = 8376.792
  CI (99.9%): [422602.536, 433795.821] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_removeOccurrences  thrpt   30  428199.178 ± 5596.643  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_removeOccurrences_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_removeOccurrences_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 700004.338 ops/s
# Warmup Iteration   2: 761418.521 ops/s
# Warmup Iteration   3: 1014989.055 ops/s
# Warmup Iteration   4: 1006976.658 ops/s
# Warmup Iteration   5: 987933.347 ops/s
# Warmup Iteration   6: 973222.678 ops/s
# Warmup Iteration   7: 975568.542 ops/s
# Warmup Iteration   8: 979316.762 ops/s
# Warmup Iteration   9: 966970.309 ops/s
# Warmup Iteration  10: 971372.913 ops/s
# Warmup Iteration  11: 825093.652 ops/s
# Warmup Iteration  12: 1029828.755 ops/s
# Warmup Iteration  13: 1039834.111 ops/s
# Warmup Iteration  14: 978877.296 ops/s
# Warmup Iteration  15: 965874.719 ops/s
# Warmup Iteration  16: 976510.418 ops/s
# Warmup Iteration  17: 1053750.560 ops/s
# Warmup Iteration  18: 1110059.697 ops/s
# Warmup Iteration  19: 1121190.172 ops/s
# Warmup Iteration  20: 1115930.045 ops/s
# Warmup Iteration  21: 1116618.266 ops/s
# Warmup Iteration  22: 1115604.696 ops/s
# Warmup Iteration  23: 1114747.927 ops/s
# Warmup Iteration  24: 1113791.696 ops/s
# Warmup Iteration  25: 1115845.753 ops/s
# Warmup Iteration  26: 1072627.582 ops/s
# Warmup Iteration  27: 1044682.887 ops/s
# Warmup Iteration  28: 1045964.154 ops/s
# Warmup Iteration  29: 1043930.963 ops/s
# Warmup Iteration  30: 1041994.000 ops/s
Iteration   1: 1041477.218 ops/s
Iteration   2: 1021066.508 ops/s
Iteration   3: 1026917.235 ops/s
Iteration   4: 1049938.404 ops/s
Iteration   5: 1097863.031 ops/s
Iteration   6: 1099904.763 ops/s
Iteration   7: 1019884.286 ops/s
Iteration   8: 1047640.557 ops/s
Iteration   9: 1037504.623 ops/s
Iteration  10: 1075704.046 ops/s
Iteration  11: 1071847.205 ops/s
Iteration  12: 1069391.259 ops/s
Iteration  13: 1057778.082 ops/s
Iteration  14: 1063064.494 ops/s
Iteration  15: 1087530.510 ops/s
Iteration  16: 1021353.242 ops/s
Iteration  17: 1033982.455 ops/s
Iteration  18: 1028750.538 ops/s
Iteration  19: 1067023.983 ops/s
Iteration  20: 1063698.936 ops/s
Iteration  21: 1061246.263 ops/s
Iteration  22: 1070431.923 ops/s
Iteration  23: 1067705.494 ops/s
Iteration  24: 1053296.434 ops/s
Iteration  25: 1046630.298 ops/s
Iteration  26: 1024059.479 ops/s
Iteration  27: 1053975.943 ops/s
Iteration  28: 1037540.966 ops/s
Iteration  29: 1038795.936 ops/s
Iteration  30: 1056287.065 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_removeOccurrences_throws":
  1053076.373 ±(99.9%) 14709.631 ops/s [Average]
  (min, avg, max) = (1019884.286, 1053076.373, 1099904.763), stdev = 22016.685
  CI (99.9%): [1038366.741, 1067786.004] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_removeOccurrences_throws  thrpt   30  1053076.373 ± 14709.631  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_remove_with_hashing_strategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_remove_with_hashing_strategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 681103.639 ops/s
# Warmup Iteration   2: 1401942.504 ops/s
# Warmup Iteration   3: 1482153.425 ops/s
# Warmup Iteration   4: 1511109.289 ops/s
# Warmup Iteration   5: 1246467.868 ops/s
# Warmup Iteration   6: 1511844.604 ops/s
# Warmup Iteration   7: 1502943.527 ops/s
# Warmup Iteration   8: 1507446.216 ops/s
# Warmup Iteration   9: 1494209.695 ops/s
# Warmup Iteration  10: 1480758.224 ops/s
# Warmup Iteration  11: 1518372.098 ops/s
# Warmup Iteration  12: 1523149.365 ops/s
# Warmup Iteration  13: 1530970.927 ops/s
# Warmup Iteration  14: 1529429.532 ops/s
# Warmup Iteration  15: 1507016.021 ops/s
# Warmup Iteration  16: 1466033.362 ops/s
# Warmup Iteration  17: 1487822.754 ops/s
# Warmup Iteration  18: 1500013.718 ops/s
# Warmup Iteration  19: 1517375.142 ops/s
# Warmup Iteration  20: 1512807.671 ops/s
# Warmup Iteration  21: 1496393.070 ops/s
# Warmup Iteration  22: 1523722.911 ops/s
# Warmup Iteration  23: 1497323.864 ops/s
# Warmup Iteration  24: 1520939.285 ops/s
# Warmup Iteration  25: 1488114.305 ops/s
# Warmup Iteration  26: 1477586.894 ops/s
# Warmup Iteration  27: 1495225.251 ops/s
# Warmup Iteration  28: 1486987.422 ops/s
# Warmup Iteration  29: 1468157.341 ops/s
# Warmup Iteration  30: 1486687.234 ops/s
Iteration   1: 1469955.772 ops/s
Iteration   2: 1468394.565 ops/s
Iteration   3: 1515698.477 ops/s
Iteration   4: 1597521.251 ops/s
Iteration   5: 1597609.659 ops/s
Iteration   6: 1598436.996 ops/s
Iteration   7: 1595180.730 ops/s
Iteration   8: 1597158.401 ops/s
Iteration   9: 1596664.686 ops/s
Iteration  10: 1601151.173 ops/s
Iteration  11: 1598754.806 ops/s
Iteration  12: 1596881.130 ops/s
Iteration  13: 1595667.068 ops/s
Iteration  14: 1593165.652 ops/s
Iteration  15: 1597370.047 ops/s
Iteration  16: 1595429.321 ops/s
Iteration  17: 1594730.220 ops/s
Iteration  18: 1599004.563 ops/s
Iteration  19: 1598267.868 ops/s
Iteration  20: 1594422.888 ops/s
Iteration  21: 1469979.003 ops/s
Iteration  22: 1517644.889 ops/s
Iteration  23: 1522122.804 ops/s
Iteration  24: 1526256.470 ops/s
Iteration  25: 1554603.842 ops/s
Iteration  26: 1598003.113 ops/s
Iteration  27: 1595707.891 ops/s
Iteration  28: 1572653.240 ops/s
Iteration  29: 1569374.366 ops/s
Iteration  30: 1467603.913 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_remove_with_hashing_strategy":
  1566513.827 ±(99.9%) 31487.341 ops/s [Average]
  (min, avg, max) = (1467603.913, 1566513.827, 1601151.173), stdev = 47128.774
  CI (99.9%): [1535026.485, 1598001.168] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_remove_with_hashing_strategy  thrpt   30  1566513.827 ± 31487.341  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 300102.249 ops/s
# Warmup Iteration   2: 551414.475 ops/s
# Warmup Iteration   3: 646342.920 ops/s
# Warmup Iteration   4: 656981.215 ops/s
# Warmup Iteration   5: 669307.377 ops/s
# Warmup Iteration   6: 533122.525 ops/s
# Warmup Iteration   7: 682266.610 ops/s
# Warmup Iteration   8: 701564.094 ops/s
# Warmup Iteration   9: 701206.437 ops/s
# Warmup Iteration  10: 699606.134 ops/s
# Warmup Iteration  11: 702281.487 ops/s
# Warmup Iteration  12: 701391.985 ops/s
# Warmup Iteration  13: 700804.190 ops/s
# Warmup Iteration  14: 699463.952 ops/s
# Warmup Iteration  15: 701998.755 ops/s
# Warmup Iteration  16: 700176.560 ops/s
# Warmup Iteration  17: 702069.407 ops/s
# Warmup Iteration  18: 698679.966 ops/s
# Warmup Iteration  19: 694169.259 ops/s
# Warmup Iteration  20: 687786.329 ops/s
# Warmup Iteration  21: 695458.328 ops/s
# Warmup Iteration  22: 684670.163 ops/s
# Warmup Iteration  23: 693177.899 ops/s
# Warmup Iteration  24: 685724.026 ops/s
# Warmup Iteration  25: 689777.679 ops/s
# Warmup Iteration  26: 694877.849 ops/s
# Warmup Iteration  27: 691833.959 ops/s
# Warmup Iteration  28: 695482.788 ops/s
# Warmup Iteration  29: 700751.846 ops/s
# Warmup Iteration  30: 700676.479 ops/s
Iteration   1: 680846.975 ops/s
Iteration   2: 675144.415 ops/s
Iteration   3: 685081.464 ops/s
Iteration   4: 659445.178 ops/s
Iteration   5: 659433.383 ops/s
Iteration   6: 687972.931 ops/s
Iteration   7: 688085.551 ops/s
Iteration   8: 655429.720 ops/s
Iteration   9: 665919.213 ops/s
Iteration  10: 674792.929 ops/s
Iteration  11: 650626.140 ops/s
Iteration  12: 664879.535 ops/s
Iteration  13: 656019.813 ops/s
Iteration  14: 652059.591 ops/s
Iteration  15: 656549.272 ops/s
Iteration  16: 672779.536 ops/s
Iteration  17: 670138.800 ops/s
Iteration  18: 681895.970 ops/s
Iteration  19: 643679.963 ops/s
Iteration  20: 654682.492 ops/s
Iteration  21: 677908.008 ops/s
Iteration  22: 650603.393 ops/s
Iteration  23: 661378.366 ops/s
Iteration  24: 676885.052 ops/s
Iteration  25: 659664.514 ops/s
Iteration  26: 666173.510 ops/s
Iteration  27: 656701.474 ops/s
Iteration  28: 654521.026 ops/s
Iteration  29: 647895.039 ops/s
Iteration  30: 669332.991 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_retainAll":
  665217.542 ±(99.9%) 8391.095 ops/s [Average]
  (min, avg, max) = (643679.963, 665217.542, 688085.551), stdev = 12559.397
  CI (99.9%): [656826.447, 673608.636] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_retainAll  thrpt   30  665217.542 ± 8391.095  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 528695.989 ops/s
# Warmup Iteration   2: 1004662.449 ops/s
# Warmup Iteration   3: 1179908.981 ops/s
# Warmup Iteration   4: 1184112.726 ops/s
# Warmup Iteration   5: 1184350.046 ops/s
# Warmup Iteration   6: 979529.786 ops/s
# Warmup Iteration   7: 1188578.485 ops/s
# Warmup Iteration   8: 1187144.531 ops/s
# Warmup Iteration   9: 1171866.639 ops/s
# Warmup Iteration  10: 1142303.867 ops/s
# Warmup Iteration  11: 1127503.030 ops/s
# Warmup Iteration  12: 1128146.785 ops/s
# Warmup Iteration  13: 1129943.879 ops/s
# Warmup Iteration  14: 1122305.933 ops/s
# Warmup Iteration  15: 1116282.824 ops/s
# Warmup Iteration  16: 1129964.583 ops/s
# Warmup Iteration  17: 1127329.612 ops/s
# Warmup Iteration  18: 1106118.850 ops/s
# Warmup Iteration  19: 1111027.309 ops/s
# Warmup Iteration  20: 1158952.865 ops/s
# Warmup Iteration  21: 1147453.737 ops/s
# Warmup Iteration  22: 1099423.444 ops/s
# Warmup Iteration  23: 1123871.578 ops/s
# Warmup Iteration  24: 1129282.403 ops/s
# Warmup Iteration  25: 1120646.042 ops/s
# Warmup Iteration  26: 1112895.554 ops/s
# Warmup Iteration  27: 1118329.104 ops/s
# Warmup Iteration  28: 1115360.940 ops/s
# Warmup Iteration  29: 1131974.252 ops/s
# Warmup Iteration  30: 1129668.776 ops/s
Iteration   1: 1146284.631 ops/s
Iteration   2: 1122666.814 ops/s
Iteration   3: 1100358.475 ops/s
Iteration   4: 1132704.039 ops/s
Iteration   5: 1132251.297 ops/s
Iteration   6: 1113676.080 ops/s
Iteration   7: 1145832.556 ops/s
Iteration   8: 1157125.599 ops/s
Iteration   9: 1122268.405 ops/s
Iteration  10: 1099478.876 ops/s
Iteration  11: 1124145.690 ops/s
Iteration  12: 1123797.504 ops/s
Iteration  13: 1126117.873 ops/s
Iteration  14: 1174535.346 ops/s
Iteration  15: 1156322.532 ops/s
Iteration  16: 1099248.897 ops/s
Iteration  17: 1111751.082 ops/s
Iteration  18: 1122864.936 ops/s
Iteration  19: 1142973.604 ops/s
Iteration  20: 1142399.914 ops/s
Iteration  21: 1142118.152 ops/s
Iteration  22: 1114580.194 ops/s
Iteration  23: 1118490.006 ops/s
Iteration  24: 1131103.194 ops/s
Iteration  25: 1143373.845 ops/s
Iteration  26: 1135813.503 ops/s
Iteration  27: 1166761.046 ops/s
Iteration  28: 1133634.285 ops/s
Iteration  29: 1130083.172 ops/s
Iteration  30: 1178270.903 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_retainAllIterable":
  1133034.415 ±(99.9%) 13601.645 ops/s [Average]
  (min, avg, max) = (1099248.897, 1133034.415, 1178270.903), stdev = 20358.303
  CI (99.9%): [1119432.770, 1146636.060] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_retainAllIterable  thrpt   30  1133034.415 ± 13601.645  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 436908.045 ops/s
# Warmup Iteration   2: 951549.337 ops/s
# Warmup Iteration   3: 1002336.445 ops/s
# Warmup Iteration   4: 970261.535 ops/s
# Warmup Iteration   5: 847167.388 ops/s
# Warmup Iteration   6: 1002882.049 ops/s
# Warmup Iteration   7: 975532.112 ops/s
# Warmup Iteration   8: 979716.729 ops/s
# Warmup Iteration   9: 986449.441 ops/s
# Warmup Iteration  10: 995217.280 ops/s
# Warmup Iteration  11: 995298.706 ops/s
# Warmup Iteration  12: 979163.558 ops/s
# Warmup Iteration  13: 980287.084 ops/s
# Warmup Iteration  14: 1001724.461 ops/s
# Warmup Iteration  15: 1018611.387 ops/s
# Warmup Iteration  16: 1049640.225 ops/s
# Warmup Iteration  17: 1049374.251 ops/s
# Warmup Iteration  18: 1047126.832 ops/s
# Warmup Iteration  19: 1048416.653 ops/s
# Warmup Iteration  20: 1050900.028 ops/s
# Warmup Iteration  21: 1048578.310 ops/s
# Warmup Iteration  22: 1048367.697 ops/s
# Warmup Iteration  23: 1050087.342 ops/s
# Warmup Iteration  24: 1010453.690 ops/s
# Warmup Iteration  25: 1004792.549 ops/s
# Warmup Iteration  26: 1000510.866 ops/s
# Warmup Iteration  27: 991828.163 ops/s
# Warmup Iteration  28: 978406.685 ops/s
# Warmup Iteration  29: 980797.963 ops/s
# Warmup Iteration  30: 997223.107 ops/s
Iteration   1: 1003162.656 ops/s
Iteration   2: 987977.814 ops/s
Iteration   3: 987242.288 ops/s
Iteration   4: 982644.706 ops/s
Iteration   5: 976614.059 ops/s
Iteration   6: 989626.848 ops/s
Iteration   7: 982818.949 ops/s
Iteration   8: 980971.760 ops/s
Iteration   9: 1010495.091 ops/s
Iteration  10: 992033.595 ops/s
Iteration  11: 995421.100 ops/s
Iteration  12: 979446.438 ops/s
Iteration  13: 981474.920 ops/s
Iteration  14: 1001847.796 ops/s
Iteration  15: 1037164.898 ops/s
Iteration  16: 1051736.104 ops/s
Iteration  17: 1049337.905 ops/s
Iteration  18: 1024737.581 ops/s
Iteration  19: 985441.648 ops/s
Iteration  20: 993898.864 ops/s
Iteration  21: 983483.563 ops/s
Iteration  22: 1010465.755 ops/s
Iteration  23: 1015419.258 ops/s
Iteration  24: 1000774.145 ops/s
Iteration  25: 971911.701 ops/s
Iteration  26: 982893.754 ops/s
Iteration  27: 977922.871 ops/s
Iteration  28: 998031.827 ops/s
Iteration  29: 977429.094 ops/s
Iteration  30: 975337.630 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_select":
  996258.821 ±(99.9%) 14220.736 ops/s [Average]
  (min, avg, max) = (971911.701, 996258.821, 1051736.104), stdev = 21284.930
  CI (99.9%): [982038.084, 1010479.557] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_select  thrpt   30  996258.821 ± 14220.736  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_selectAndRejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_selectAndRejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2666541.129 ops/s
# Warmup Iteration   2: 6758107.932 ops/s
# Warmup Iteration   3: 5539267.584 ops/s
# Warmup Iteration   4: 6778325.002 ops/s
# Warmup Iteration   5: 6739650.806 ops/s
# Warmup Iteration   6: 6673311.019 ops/s
# Warmup Iteration   7: 6761288.470 ops/s
# Warmup Iteration   8: 6821415.022 ops/s
# Warmup Iteration   9: 6830317.432 ops/s
# Warmup Iteration  10: 6769609.933 ops/s
# Warmup Iteration  11: 6879925.280 ops/s
# Warmup Iteration  12: 6772400.742 ops/s
# Warmup Iteration  13: 6855658.372 ops/s
# Warmup Iteration  14: 6899063.899 ops/s
# Warmup Iteration  15: 7045470.410 ops/s
# Warmup Iteration  16: 6906730.780 ops/s
# Warmup Iteration  17: 6933054.626 ops/s
# Warmup Iteration  18: 7031447.539 ops/s
# Warmup Iteration  19: 7054105.535 ops/s
# Warmup Iteration  20: 6780799.625 ops/s
# Warmup Iteration  21: 6809151.357 ops/s
# Warmup Iteration  22: 6917419.399 ops/s
# Warmup Iteration  23: 6892331.333 ops/s
# Warmup Iteration  24: 6791454.143 ops/s
# Warmup Iteration  25: 6786352.150 ops/s
# Warmup Iteration  26: 6689933.913 ops/s
# Warmup Iteration  27: 6747250.086 ops/s
# Warmup Iteration  28: 6889697.446 ops/s
# Warmup Iteration  29: 6802978.274 ops/s
# Warmup Iteration  30: 7108381.511 ops/s
Iteration   1: 7205295.094 ops/s
Iteration   2: 7214534.710 ops/s
Iteration   3: 7210328.787 ops/s
Iteration   4: 7201115.806 ops/s
Iteration   5: 7223102.371 ops/s
Iteration   6: 7211583.367 ops/s
Iteration   7: 7220006.246 ops/s
Iteration   8: 7206955.468 ops/s
Iteration   9: 7211509.734 ops/s
Iteration  10: 7209702.488 ops/s
Iteration  11: 7188298.153 ops/s
Iteration  12: 7204473.118 ops/s
Iteration  13: 7206076.497 ops/s
Iteration  14: 7199691.291 ops/s
Iteration  15: 7197862.951 ops/s
Iteration  16: 6990512.365 ops/s
Iteration  17: 6650155.796 ops/s
Iteration  18: 6683866.826 ops/s
Iteration  19: 6684790.378 ops/s
Iteration  20: 6705433.825 ops/s
Iteration  21: 7162098.466 ops/s
Iteration  22: 7105968.406 ops/s
Iteration  23: 6911446.755 ops/s
Iteration  24: 7186814.150 ops/s
Iteration  25: 6880240.774 ops/s
Iteration  26: 6712002.693 ops/s
Iteration  27: 7186634.856 ops/s
Iteration  28: 7195607.414 ops/s
Iteration  29: 7177590.671 ops/s
Iteration  30: 7200205.537 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_selectAndRejectWith":
  7084796.833 ±(99.9%) 133690.663 ops/s [Average]
  (min, avg, max) = (6650155.796, 7084796.833, 7223102.371), stdev = 200101.906
  CI (99.9%): [6951106.170, 7218487.496] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_selectAndRejectWith  thrpt   30  7084796.833 ± 133690.663  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_selectByOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_selectByOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1005421.556 ops/s
# Warmup Iteration   2: 1596077.643 ops/s
# Warmup Iteration   3: 1814373.512 ops/s
# Warmup Iteration   4: 1949073.648 ops/s
# Warmup Iteration   5: 1862817.627 ops/s
# Warmup Iteration   6: 1535231.653 ops/s
# Warmup Iteration   7: 1907129.524 ops/s
# Warmup Iteration   8: 1962347.823 ops/s
# Warmup Iteration   9: 1916968.880 ops/s
# Warmup Iteration  10: 1814888.554 ops/s
# Warmup Iteration  11: 1837163.704 ops/s
# Warmup Iteration  12: 1932821.223 ops/s
# Warmup Iteration  13: 1818836.959 ops/s
# Warmup Iteration  14: 1843489.102 ops/s
# Warmup Iteration  15: 1853943.397 ops/s
# Warmup Iteration  16: 1835087.056 ops/s
# Warmup Iteration  17: 1894637.946 ops/s
# Warmup Iteration  18: 1819018.672 ops/s
# Warmup Iteration  19: 1856842.164 ops/s
# Warmup Iteration  20: 1810711.773 ops/s
# Warmup Iteration  21: 1815080.756 ops/s
# Warmup Iteration  22: 1853202.258 ops/s
# Warmup Iteration  23: 1921791.207 ops/s
# Warmup Iteration  24: 1832738.214 ops/s
# Warmup Iteration  25: 1819920.041 ops/s
# Warmup Iteration  26: 1831179.036 ops/s
# Warmup Iteration  27: 1816273.193 ops/s
# Warmup Iteration  28: 1893625.953 ops/s
# Warmup Iteration  29: 1880208.803 ops/s
# Warmup Iteration  30: 1840866.624 ops/s
Iteration   1: 1894413.306 ops/s
Iteration   2: 1904495.842 ops/s
Iteration   3: 1853335.211 ops/s
Iteration   4: 1836270.005 ops/s
Iteration   5: 1876180.104 ops/s
Iteration   6: 1837843.362 ops/s
Iteration   7: 1855429.853 ops/s
Iteration   8: 1911864.048 ops/s
Iteration   9: 1867942.994 ops/s
Iteration  10: 1843800.051 ops/s
Iteration  11: 1801818.129 ops/s
Iteration  12: 1867237.090 ops/s
Iteration  13: 1918747.991 ops/s
Iteration  14: 1861820.692 ops/s
Iteration  15: 1843889.421 ops/s
Iteration  16: 1951472.432 ops/s
Iteration  17: 1890113.426 ops/s
Iteration  18: 1888184.111 ops/s
Iteration  19: 1940520.773 ops/s
Iteration  20: 1908488.528 ops/s
Iteration  21: 1830398.080 ops/s
Iteration  22: 1856372.258 ops/s
Iteration  23: 1956399.303 ops/s
Iteration  24: 1909796.863 ops/s
Iteration  25: 1922303.878 ops/s
Iteration  26: 1826891.639 ops/s
Iteration  27: 1873533.868 ops/s
Iteration  28: 1920902.850 ops/s
Iteration  29: 1957957.150 ops/s
Iteration  30: 1953642.359 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_selectByOccurrences":
  1885402.187 ±(99.9%) 28871.313 ops/s [Average]
  (min, avg, max) = (1801818.129, 1885402.187, 1957957.150), stdev = 43213.225
  CI (99.9%): [1856530.875, 1914273.500] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_selectByOccurrences  thrpt   30  1885402.187 ± 28871.313  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_selectDuplicates$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_selectDuplicates

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 823360.229 ops/s
# Warmup Iteration   2: 1341562.883 ops/s
# Warmup Iteration   3: 1548002.408 ops/s
# Warmup Iteration   4: 1557816.246 ops/s
# Warmup Iteration   5: 1555451.713 ops/s
# Warmup Iteration   6: 1310963.986 ops/s
# Warmup Iteration   7: 1508146.853 ops/s
# Warmup Iteration   8: 1438227.497 ops/s
# Warmup Iteration   9: 1453485.577 ops/s
# Warmup Iteration  10: 1463610.528 ops/s
# Warmup Iteration  11: 1462301.695 ops/s
# Warmup Iteration  12: 1452048.861 ops/s
# Warmup Iteration  13: 1449443.758 ops/s
# Warmup Iteration  14: 1455340.990 ops/s
# Warmup Iteration  15: 1462278.196 ops/s
# Warmup Iteration  16: 1465609.058 ops/s
# Warmup Iteration  17: 1466884.553 ops/s
# Warmup Iteration  18: 1557175.879 ops/s
# Warmup Iteration  19: 1516523.918 ops/s
# Warmup Iteration  20: 1463970.515 ops/s
# Warmup Iteration  21: 1462689.664 ops/s
# Warmup Iteration  22: 1448662.216 ops/s
# Warmup Iteration  23: 1509280.970 ops/s
# Warmup Iteration  24: 1497738.353 ops/s
# Warmup Iteration  25: 1559513.575 ops/s
# Warmup Iteration  26: 1497180.794 ops/s
# Warmup Iteration  27: 1459244.654 ops/s
# Warmup Iteration  28: 1480137.275 ops/s
# Warmup Iteration  29: 1455029.050 ops/s
# Warmup Iteration  30: 1482458.362 ops/s
Iteration   1: 1446457.499 ops/s
Iteration   2: 1468688.328 ops/s
Iteration   3: 1498352.726 ops/s
Iteration   4: 1476159.719 ops/s
Iteration   5: 1446669.157 ops/s
Iteration   6: 1455488.880 ops/s
Iteration   7: 1458977.659 ops/s
Iteration   8: 1436726.512 ops/s
Iteration   9: 1450133.534 ops/s
Iteration  10: 1447512.432 ops/s
Iteration  11: 1432651.208 ops/s
Iteration  12: 1451480.377 ops/s
Iteration  13: 1442582.438 ops/s
Iteration  14: 1465558.733 ops/s
Iteration  15: 1435948.298 ops/s
Iteration  16: 1458172.338 ops/s
Iteration  17: 1506355.589 ops/s
Iteration  18: 1495585.028 ops/s
Iteration  19: 1430490.423 ops/s
Iteration  20: 1440384.202 ops/s
Iteration  21: 1459366.450 ops/s
Iteration  22: 1464612.867 ops/s
Iteration  23: 1469231.804 ops/s
Iteration  24: 1442359.804 ops/s
Iteration  25: 1448120.948 ops/s
Iteration  26: 1455313.208 ops/s
Iteration  27: 1448039.491 ops/s
Iteration  28: 1435128.817 ops/s
Iteration  29: 1459731.694 ops/s
Iteration  30: 1463799.904 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_selectDuplicates":
  1456336.002 ±(99.9%) 12619.916 ops/s [Average]
  (min, avg, max) = (1430490.423, 1456336.002, 1506355.589), stdev = 18888.898
  CI (99.9%): [1443716.086, 1468955.918] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_selectDuplicates  thrpt   30  1456336.002 ± 12619.916  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 306717.810 ops/s
# Warmup Iteration   2: 541601.551 ops/s
# Warmup Iteration   3: 616395.683 ops/s
# Warmup Iteration   4: 615394.896 ops/s
# Warmup Iteration   5: 621245.624 ops/s
# Warmup Iteration   6: 504905.166 ops/s
# Warmup Iteration   7: 628445.508 ops/s
# Warmup Iteration   8: 628975.074 ops/s
# Warmup Iteration   9: 651145.660 ops/s
# Warmup Iteration  10: 633700.458 ops/s
# Warmup Iteration  11: 625250.691 ops/s
# Warmup Iteration  12: 640633.741 ops/s
# Warmup Iteration  13: 634077.046 ops/s
# Warmup Iteration  14: 658614.452 ops/s
# Warmup Iteration  15: 658716.085 ops/s
# Warmup Iteration  16: 658939.212 ops/s
# Warmup Iteration  17: 658426.133 ops/s
# Warmup Iteration  18: 658927.456 ops/s
# Warmup Iteration  19: 658590.156 ops/s
# Warmup Iteration  20: 658348.428 ops/s
# Warmup Iteration  21: 659092.729 ops/s
# Warmup Iteration  22: 617160.342 ops/s
# Warmup Iteration  23: 610906.887 ops/s
# Warmup Iteration  24: 620322.470 ops/s
# Warmup Iteration  25: 608092.589 ops/s
# Warmup Iteration  26: 616497.843 ops/s
# Warmup Iteration  27: 614566.040 ops/s
# Warmup Iteration  28: 642555.035 ops/s
# Warmup Iteration  29: 621149.585 ops/s
# Warmup Iteration  30: 621761.149 ops/s
Iteration   1: 617285.476 ops/s
Iteration   2: 617005.001 ops/s
Iteration   3: 628990.973 ops/s
Iteration   4: 619567.106 ops/s
Iteration   5: 622732.188 ops/s
Iteration   6: 606176.088 ops/s
Iteration   7: 651019.816 ops/s
Iteration   8: 625463.451 ops/s
Iteration   9: 607956.784 ops/s
Iteration  10: 627043.504 ops/s
Iteration  11: 624087.354 ops/s
Iteration  12: 659199.775 ops/s
Iteration  13: 659822.609 ops/s
Iteration  14: 659909.721 ops/s
Iteration  15: 657622.797 ops/s
Iteration  16: 619714.580 ops/s
Iteration  17: 656509.186 ops/s
Iteration  18: 651148.668 ops/s
Iteration  19: 641544.934 ops/s
Iteration  20: 658949.969 ops/s
Iteration  21: 629910.906 ops/s
Iteration  22: 661221.614 ops/s
Iteration  23: 654857.481 ops/s
Iteration  24: 655552.054 ops/s
Iteration  25: 638363.599 ops/s
Iteration  26: 639050.397 ops/s
Iteration  27: 616031.227 ops/s
Iteration  28: 619138.581 ops/s
Iteration  29: 616753.060 ops/s
Iteration  30: 618665.183 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_selectInstancesOf":
  635376.469 ±(99.9%) 12298.720 ops/s [Average]
  (min, avg, max) = (606176.088, 635376.469, 661221.614), stdev = 18408.146
  CI (99.9%): [623077.749, 647675.189] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  635376.469 ± 12298.720  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_selectUnique$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_selectUnique

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1050234.809 ops/s
# Warmup Iteration   2: 1892751.557 ops/s
# Warmup Iteration   3: 2132831.632 ops/s
# Warmup Iteration   4: 2171632.887 ops/s
# Warmup Iteration   5: 2142365.588 ops/s
# Warmup Iteration   6: 1744947.308 ops/s
# Warmup Iteration   7: 2144311.144 ops/s
# Warmup Iteration   8: 2144988.594 ops/s
# Warmup Iteration   9: 2200549.260 ops/s
# Warmup Iteration  10: 2168782.994 ops/s
# Warmup Iteration  11: 2242091.966 ops/s
# Warmup Iteration  12: 2172286.020 ops/s
# Warmup Iteration  13: 2200988.538 ops/s
# Warmup Iteration  14: 2187073.680 ops/s
# Warmup Iteration  15: 2272077.141 ops/s
# Warmup Iteration  16: 2246703.110 ops/s
# Warmup Iteration  17: 2154498.795 ops/s
# Warmup Iteration  18: 2214688.614 ops/s
# Warmup Iteration  19: 2199582.126 ops/s
# Warmup Iteration  20: 2199930.232 ops/s
# Warmup Iteration  21: 2207753.206 ops/s
# Warmup Iteration  22: 2237356.677 ops/s
# Warmup Iteration  23: 2190344.132 ops/s
# Warmup Iteration  24: 2186617.309 ops/s
# Warmup Iteration  25: 2171792.129 ops/s
# Warmup Iteration  26: 2169192.275 ops/s
# Warmup Iteration  27: 2234327.386 ops/s
# Warmup Iteration  28: 2286499.671 ops/s
# Warmup Iteration  29: 2306608.948 ops/s
# Warmup Iteration  30: 2318315.704 ops/s
Iteration   1: 2322315.148 ops/s
Iteration   2: 2321341.412 ops/s
Iteration   3: 2321047.002 ops/s
Iteration   4: 2319419.235 ops/s
Iteration   5: 2317699.558 ops/s
Iteration   6: 2322783.114 ops/s
Iteration   7: 2320363.612 ops/s
Iteration   8: 2321574.256 ops/s
Iteration   9: 2322154.408 ops/s
Iteration  10: 2322414.084 ops/s
Iteration  11: 2324625.044 ops/s
Iteration  12: 2186005.819 ops/s
Iteration  13: 2159664.142 ops/s
Iteration  14: 2233315.558 ops/s
Iteration  15: 2263425.416 ops/s
Iteration  16: 2162882.115 ops/s
Iteration  17: 2132397.940 ops/s
Iteration  18: 2165860.088 ops/s
Iteration  19: 2179009.191 ops/s
Iteration  20: 2116758.361 ops/s
Iteration  21: 2151449.545 ops/s
Iteration  22: 2170688.743 ops/s
Iteration  23: 2149384.512 ops/s
Iteration  24: 2133957.668 ops/s
Iteration  25: 2136441.168 ops/s
Iteration  26: 2185341.899 ops/s
Iteration  27: 2236451.932 ops/s
Iteration  28: 2325122.669 ops/s
Iteration  29: 2203639.062 ops/s
Iteration  30: 2131727.562 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_selectUnique":
  2231975.342 ±(99.9%) 53943.807 ops/s [Average]
  (min, avg, max) = (2116758.361, 2231975.342, 2325122.669), stdev = 80740.558
  CI (99.9%): [2178031.535, 2285919.149] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_selectUnique  thrpt   30  2231975.342 ± 53943.807  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 497513.902 ops/s
# Warmup Iteration   2: 1251911.460 ops/s
# Warmup Iteration   3: 1252249.445 ops/s
# Warmup Iteration   4: 991213.131 ops/s
# Warmup Iteration   5: 1227324.795 ops/s
# Warmup Iteration   6: 1216607.777 ops/s
# Warmup Iteration   7: 1231807.721 ops/s
# Warmup Iteration   8: 1216076.610 ops/s
# Warmup Iteration   9: 1212978.503 ops/s
# Warmup Iteration  10: 1243169.955 ops/s
# Warmup Iteration  11: 1234645.161 ops/s
# Warmup Iteration  12: 1225109.404 ops/s
# Warmup Iteration  13: 1227533.637 ops/s
# Warmup Iteration  14: 1257202.881 ops/s
# Warmup Iteration  15: 1264695.041 ops/s
# Warmup Iteration  16: 1270961.344 ops/s
# Warmup Iteration  17: 1299234.955 ops/s
# Warmup Iteration  18: 1246132.734 ops/s
# Warmup Iteration  19: 1259440.045 ops/s
# Warmup Iteration  20: 1227172.451 ops/s
# Warmup Iteration  21: 1237066.611 ops/s
# Warmup Iteration  22: 1258156.162 ops/s
# Warmup Iteration  23: 1206979.253 ops/s
# Warmup Iteration  24: 1219893.523 ops/s
# Warmup Iteration  25: 1222141.693 ops/s
# Warmup Iteration  26: 1266271.270 ops/s
# Warmup Iteration  27: 1253144.447 ops/s
# Warmup Iteration  28: 1239404.644 ops/s
# Warmup Iteration  29: 1272725.629 ops/s
# Warmup Iteration  30: 1233610.882 ops/s
Iteration   1: 1231194.535 ops/s
Iteration   2: 1235128.010 ops/s
Iteration   3: 1252991.832 ops/s
Iteration   4: 1232687.623 ops/s
Iteration   5: 1232861.865 ops/s
Iteration   6: 1255903.324 ops/s
Iteration   7: 1288579.284 ops/s
Iteration   8: 1275384.492 ops/s
Iteration   9: 1215129.363 ops/s
Iteration  10: 1207748.073 ops/s
Iteration  11: 1206379.791 ops/s
Iteration  12: 1209533.726 ops/s
Iteration  13: 1254772.038 ops/s
Iteration  14: 1295204.325 ops/s
Iteration  15: 1293098.498 ops/s
Iteration  16: 1300418.407 ops/s
Iteration  17: 1220288.165 ops/s
Iteration  18: 1221773.512 ops/s
Iteration  19: 1216884.455 ops/s
Iteration  20: 1282146.928 ops/s
Iteration  21: 1297350.921 ops/s
Iteration  22: 1212536.893 ops/s
Iteration  23: 1234636.888 ops/s
Iteration  24: 1281791.817 ops/s
Iteration  25: 1299095.977 ops/s
Iteration  26: 1299528.789 ops/s
Iteration  27: 1297072.079 ops/s
Iteration  28: 1297508.116 ops/s
Iteration  29: 1296992.224 ops/s
Iteration  30: 1299916.761 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_selectWith":
  1258151.290 ±(99.9%) 23895.667 ops/s [Average]
  (min, avg, max) = (1206379.791, 1258151.290, 1300418.407), stdev = 35765.912
  CI (99.9%): [1234255.624, 1282046.957] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_selectWith  thrpt   30  1258151.290 ± 23895.667  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 379645.153 ops/s
# Warmup Iteration   2: 850306.061 ops/s
# Warmup Iteration   3: 886857.993 ops/s
# Warmup Iteration   4: 866845.247 ops/s
# Warmup Iteration   5: 755383.731 ops/s
# Warmup Iteration   6: 836465.550 ops/s
# Warmup Iteration   7: 858001.881 ops/s
# Warmup Iteration   8: 831769.542 ops/s
# Warmup Iteration   9: 828476.905 ops/s
# Warmup Iteration  10: 844088.903 ops/s
# Warmup Iteration  11: 883433.162 ops/s
# Warmup Iteration  12: 829964.815 ops/s
# Warmup Iteration  13: 843604.266 ops/s
# Warmup Iteration  14: 845156.648 ops/s
# Warmup Iteration  15: 825020.408 ops/s
# Warmup Iteration  16: 830016.392 ops/s
# Warmup Iteration  17: 850469.119 ops/s
# Warmup Iteration  18: 847521.762 ops/s
# Warmup Iteration  19: 867477.201 ops/s
# Warmup Iteration  20: 893149.164 ops/s
# Warmup Iteration  21: 836880.719 ops/s
# Warmup Iteration  22: 848395.357 ops/s
# Warmup Iteration  23: 835574.517 ops/s
# Warmup Iteration  24: 848477.656 ops/s
# Warmup Iteration  25: 837082.999 ops/s
# Warmup Iteration  26: 843226.559 ops/s
# Warmup Iteration  27: 830701.972 ops/s
# Warmup Iteration  28: 839886.517 ops/s
# Warmup Iteration  29: 850977.183 ops/s
# Warmup Iteration  30: 848080.386 ops/s
Iteration   1: 846030.619 ops/s
Iteration   2: 843409.821 ops/s
Iteration   3: 859483.891 ops/s
Iteration   4: 855235.911 ops/s
Iteration   5: 854635.888 ops/s
Iteration   6: 890901.168 ops/s
Iteration   7: 826922.187 ops/s
Iteration   8: 817743.305 ops/s
Iteration   9: 867982.021 ops/s
Iteration  10: 893525.252 ops/s
Iteration  11: 869659.893 ops/s
Iteration  12: 833351.274 ops/s
Iteration  13: 853846.752 ops/s
Iteration  14: 860267.804 ops/s
Iteration  15: 834562.054 ops/s
Iteration  16: 841006.327 ops/s
Iteration  17: 860324.289 ops/s
Iteration  18: 852996.321 ops/s
Iteration  19: 847571.273 ops/s
Iteration  20: 852924.293 ops/s
Iteration  21: 820925.432 ops/s
Iteration  22: 846417.270 ops/s
Iteration  23: 832492.228 ops/s
Iteration  24: 839407.244 ops/s
Iteration  25: 893496.526 ops/s
Iteration  26: 854610.742 ops/s
Iteration  27: 855204.619 ops/s
Iteration  28: 864439.620 ops/s
Iteration  29: 850951.197 ops/s
Iteration  30: 883173.401 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_selectWith_target":
  853449.954 ±(99.9%) 13050.471 ops/s [Average]
  (min, avg, max) = (817743.305, 853449.954, 893525.252), stdev = 19533.333
  CI (99.9%): [840399.483, 866500.425] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_selectWith_target  thrpt   30  853449.954 ± 13050.471  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 41255.585 ops/s
# Warmup Iteration   2: 53702.751 ops/s
# Warmup Iteration   3: 76121.315 ops/s
# Warmup Iteration   4: 76043.411 ops/s
# Warmup Iteration   5: 74026.737 ops/s
# Warmup Iteration   6: 76540.414 ops/s
# Warmup Iteration   7: 75039.919 ops/s
# Warmup Iteration   8: 74048.980 ops/s
# Warmup Iteration   9: 75558.218 ops/s
# Warmup Iteration  10: 61762.707 ops/s
# Warmup Iteration  11: 78739.581 ops/s
# Warmup Iteration  12: 79362.114 ops/s
# Warmup Iteration  13: 79450.830 ops/s
# Warmup Iteration  14: 79144.573 ops/s
# Warmup Iteration  15: 79401.136 ops/s
# Warmup Iteration  16: 79365.779 ops/s
# Warmup Iteration  17: 79202.674 ops/s
# Warmup Iteration  18: 79165.031 ops/s
# Warmup Iteration  19: 79030.374 ops/s
# Warmup Iteration  20: 75037.601 ops/s
# Warmup Iteration  21: 75612.984 ops/s
# Warmup Iteration  22: 74212.541 ops/s
# Warmup Iteration  23: 74230.638 ops/s
# Warmup Iteration  24: 75260.470 ops/s
# Warmup Iteration  25: 74908.597 ops/s
# Warmup Iteration  26: 75603.202 ops/s
# Warmup Iteration  27: 75090.627 ops/s
# Warmup Iteration  28: 75616.820 ops/s
# Warmup Iteration  29: 74009.836 ops/s
# Warmup Iteration  30: 75006.494 ops/s
Iteration   1: 77430.080 ops/s
Iteration   2: 73372.049 ops/s
Iteration   3: 72860.386 ops/s
Iteration   4: 73785.463 ops/s
Iteration   5: 75809.923 ops/s
Iteration   6: 73198.534 ops/s
Iteration   7: 73559.361 ops/s
Iteration   8: 73470.339 ops/s
Iteration   9: 73176.652 ops/s
Iteration  10: 73147.873 ops/s
Iteration  11: 74401.884 ops/s
Iteration  12: 75579.961 ops/s
Iteration  13: 73366.867 ops/s
Iteration  14: 73308.906 ops/s
Iteration  15: 75851.706 ops/s
Iteration  16: 75644.463 ops/s
Iteration  17: 75585.935 ops/s
Iteration  18: 75772.550 ops/s
Iteration  19: 75027.109 ops/s
Iteration  20: 73914.130 ops/s
Iteration  21: 77143.956 ops/s
Iteration  22: 74703.820 ops/s
Iteration  23: 75306.157 ops/s
Iteration  24: 75575.939 ops/s
Iteration  25: 76230.924 ops/s
Iteration  26: 76146.920 ops/s
Iteration  27: 73997.690 ops/s
Iteration  28: 77768.252 ops/s
Iteration  29: 79040.445 ops/s
Iteration  30: 78252.386 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_serialization":
  75081.022 ±(99.9%) 1126.718 ops/s [Average]
  (min, avg, max) = (72860.386, 75081.022, 79040.445), stdev = 1686.419
  CI (99.9%): [73954.304, 76207.740] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt      Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_serialization  thrpt   30  75081.022 ± 1126.718  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_setOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_setOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 204391.924 ops/s
# Warmup Iteration   2: 375301.211 ops/s
# Warmup Iteration   3: 424146.184 ops/s
# Warmup Iteration   4: 419047.568 ops/s
# Warmup Iteration   5: 418289.371 ops/s
# Warmup Iteration   6: 351438.717 ops/s
# Warmup Iteration   7: 426039.616 ops/s
# Warmup Iteration   8: 433244.076 ops/s
# Warmup Iteration   9: 417225.581 ops/s
# Warmup Iteration  10: 419516.974 ops/s
# Warmup Iteration  11: 424640.946 ops/s
# Warmup Iteration  12: 437702.763 ops/s
# Warmup Iteration  13: 433434.569 ops/s
# Warmup Iteration  14: 423104.670 ops/s
# Warmup Iteration  15: 420841.286 ops/s
# Warmup Iteration  16: 422937.344 ops/s
# Warmup Iteration  17: 416625.230 ops/s
# Warmup Iteration  18: 427471.097 ops/s
# Warmup Iteration  19: 421482.338 ops/s
# Warmup Iteration  20: 421034.799 ops/s
# Warmup Iteration  21: 439286.510 ops/s
# Warmup Iteration  22: 433306.243 ops/s
# Warmup Iteration  23: 430449.403 ops/s
# Warmup Iteration  24: 433215.530 ops/s
# Warmup Iteration  25: 420786.514 ops/s
# Warmup Iteration  26: 453262.420 ops/s
# Warmup Iteration  27: 454142.979 ops/s
# Warmup Iteration  28: 454128.379 ops/s
# Warmup Iteration  29: 453581.396 ops/s
# Warmup Iteration  30: 453521.032 ops/s
Iteration   1: 453774.060 ops/s
Iteration   2: 454115.302 ops/s
Iteration   3: 454179.324 ops/s
Iteration   4: 453228.323 ops/s
Iteration   5: 453123.816 ops/s
Iteration   6: 454594.287 ops/s
Iteration   7: 452564.147 ops/s
Iteration   8: 422814.728 ops/s
Iteration   9: 417974.346 ops/s
Iteration  10: 422032.954 ops/s
Iteration  11: 422192.632 ops/s
Iteration  12: 437607.276 ops/s
Iteration  13: 421247.269 ops/s
Iteration  14: 419766.047 ops/s
Iteration  15: 447847.656 ops/s
Iteration  16: 439385.959 ops/s
Iteration  17: 429482.859 ops/s
Iteration  18: 430847.355 ops/s
Iteration  19: 451953.281 ops/s
Iteration  20: 450544.803 ops/s
Iteration  21: 445696.071 ops/s
Iteration  22: 453843.808 ops/s
Iteration  23: 454354.420 ops/s
Iteration  24: 449994.108 ops/s
Iteration  25: 424209.471 ops/s
Iteration  26: 423003.500 ops/s
Iteration  27: 432508.974 ops/s
Iteration  28: 454215.379 ops/s
Iteration  29: 452564.436 ops/s
Iteration  30: 447250.907 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_setOccurrences":
  440897.250 ±(99.9%) 9216.339 ops/s [Average]
  (min, avg, max) = (417974.346, 440897.250, 454594.287), stdev = 13794.584
  CI (99.9%): [431680.911, 450113.589] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_setOccurrences  thrpt   30  440897.250 ± 9216.339  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_setOccurrences_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_setOccurrences_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 703005.300 ops/s
# Warmup Iteration   2: 755830.683 ops/s
# Warmup Iteration   3: 981023.723 ops/s
# Warmup Iteration   4: 970098.190 ops/s
# Warmup Iteration   5: 973761.614 ops/s
# Warmup Iteration   6: 976062.674 ops/s
# Warmup Iteration   7: 981912.650 ops/s
# Warmup Iteration   8: 977929.563 ops/s
# Warmup Iteration   9: 982435.759 ops/s
# Warmup Iteration  10: 986974.292 ops/s
# Warmup Iteration  11: 810496.444 ops/s
# Warmup Iteration  12: 982417.039 ops/s
# Warmup Iteration  13: 977931.695 ops/s
# Warmup Iteration  14: 994574.107 ops/s
# Warmup Iteration  15: 988746.507 ops/s
# Warmup Iteration  16: 972194.981 ops/s
# Warmup Iteration  17: 1098219.391 ops/s
# Warmup Iteration  18: 1030273.702 ops/s
# Warmup Iteration  19: 1036692.415 ops/s
# Warmup Iteration  20: 1050694.267 ops/s
# Warmup Iteration  21: 1072764.695 ops/s
# Warmup Iteration  22: 1062641.495 ops/s
# Warmup Iteration  23: 1072417.395 ops/s
# Warmup Iteration  24: 1038061.104 ops/s
# Warmup Iteration  25: 1064447.876 ops/s
# Warmup Iteration  26: 1069423.144 ops/s
# Warmup Iteration  27: 1055826.651 ops/s
# Warmup Iteration  28: 1071585.104 ops/s
# Warmup Iteration  29: 1077374.973 ops/s
# Warmup Iteration  30: 1078243.204 ops/s
Iteration   1: 1110959.838 ops/s
Iteration   2: 1088712.252 ops/s
Iteration   3: 1043220.387 ops/s
Iteration   4: 1120600.132 ops/s
Iteration   5: 1051991.186 ops/s
Iteration   6: 1060478.670 ops/s
Iteration   7: 1096036.244 ops/s
Iteration   8: 1109917.306 ops/s
Iteration   9: 1073331.189 ops/s
Iteration  10: 1048566.486 ops/s
Iteration  11: 1066823.912 ops/s
Iteration  12: 1043719.194 ops/s
Iteration  13: 1038328.728 ops/s
Iteration  14: 1071425.705 ops/s
Iteration  15: 1060561.184 ops/s
Iteration  16: 1067260.909 ops/s
Iteration  17: 1061860.283 ops/s
Iteration  18: 1045328.222 ops/s
Iteration  19: 1079761.274 ops/s
Iteration  20: 1120769.812 ops/s
Iteration  21: 1119628.223 ops/s
Iteration  22: 1123350.312 ops/s
Iteration  23: 1121403.348 ops/s
Iteration  24: 1119309.329 ops/s
Iteration  25: 1119394.100 ops/s
Iteration  26: 1122727.240 ops/s
Iteration  27: 1120353.994 ops/s
Iteration  28: 1123169.916 ops/s
Iteration  29: 1121372.971 ops/s
Iteration  30: 1119278.452 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_setOccurrences_throws":
  1088988.027 ±(99.9%) 21065.210 ops/s [Average]
  (min, avg, max) = (1038328.728, 1088988.027, 1123350.312), stdev = 31529.417
  CI (99.9%): [1067922.817, 1110053.237] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_setOccurrences_throws  thrpt   30  1088988.027 ± 21065.210  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 762363.067 ops/s
# Warmup Iteration   2: 1154517.059 ops/s
# Warmup Iteration   3: 1308153.326 ops/s
# Warmup Iteration   4: 1285789.695 ops/s
# Warmup Iteration   5: 1293511.824 ops/s
# Warmup Iteration   6: 1309563.916 ops/s
# Warmup Iteration   7: 1063817.954 ops/s
# Warmup Iteration   8: 1289206.319 ops/s
# Warmup Iteration   9: 1276360.596 ops/s
# Warmup Iteration  10: 1300259.920 ops/s
# Warmup Iteration  11: 1278707.008 ops/s
# Warmup Iteration  12: 1297997.007 ops/s
# Warmup Iteration  13: 1278641.273 ops/s
# Warmup Iteration  14: 1266839.376 ops/s
# Warmup Iteration  15: 1288980.052 ops/s
# Warmup Iteration  16: 1312854.673 ops/s
# Warmup Iteration  17: 1302684.280 ops/s
# Warmup Iteration  18: 1350063.268 ops/s
# Warmup Iteration  19: 1310339.145 ops/s
# Warmup Iteration  20: 1301391.254 ops/s
# Warmup Iteration  21: 1354941.084 ops/s
# Warmup Iteration  22: 1298431.133 ops/s
# Warmup Iteration  23: 1315814.523 ops/s
# Warmup Iteration  24: 1296744.380 ops/s
# Warmup Iteration  25: 1285674.220 ops/s
# Warmup Iteration  26: 1303171.687 ops/s
# Warmup Iteration  27: 1330138.488 ops/s
# Warmup Iteration  28: 1306842.453 ops/s
# Warmup Iteration  29: 1313054.939 ops/s
# Warmup Iteration  30: 1327680.313 ops/s
Iteration   1: 1285441.148 ops/s
Iteration   2: 1298007.681 ops/s
Iteration   3: 1288494.688 ops/s
Iteration   4: 1297282.896 ops/s
Iteration   5: 1297952.324 ops/s
Iteration   6: 1300010.953 ops/s
Iteration   7: 1281234.802 ops/s
Iteration   8: 1300893.273 ops/s
Iteration   9: 1295403.626 ops/s
Iteration  10: 1256340.275 ops/s
Iteration  11: 1255914.212 ops/s
Iteration  12: 1246709.589 ops/s
Iteration  13: 1265831.704 ops/s
Iteration  14: 1250477.597 ops/s
Iteration  15: 1310719.021 ops/s
Iteration  16: 1296697.384 ops/s
Iteration  17: 1277676.435 ops/s
Iteration  18: 1290602.247 ops/s
Iteration  19: 1282376.321 ops/s
Iteration  20: 1289836.471 ops/s
Iteration  21: 1283292.427 ops/s
Iteration  22: 1319000.935 ops/s
Iteration  23: 1287987.690 ops/s
Iteration  24: 1279116.333 ops/s
Iteration  25: 1238291.612 ops/s
Iteration  26: 1256879.597 ops/s
Iteration  27: 1268821.887 ops/s
Iteration  28: 1283165.814 ops/s
Iteration  29: 1254993.780 ops/s
Iteration  30: 1281333.707 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByDouble":
  1280692.881 ±(99.9%) 13306.985 ops/s [Average]
  (min, avg, max) = (1238291.612, 1280692.881, 1319000.935), stdev = 19917.271
  CI (99.9%): [1267385.895, 1293999.866] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByDouble  thrpt   30  1280692.881 ± 13306.985  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 59.900 ops/s
# Warmup Iteration   2: 66.697 ops/s
# Warmup Iteration   3: 97.068 ops/s
# Warmup Iteration   4: 96.391 ops/s
# Warmup Iteration   5: 100.983 ops/s
# Warmup Iteration   6: 97.699 ops/s
# Warmup Iteration   7: 98.446 ops/s
# Warmup Iteration   8: 97.947 ops/s
# Warmup Iteration   9: 98.985 ops/s
# Warmup Iteration  10: 88.789 ops/s
# Warmup Iteration  11: 93.294 ops/s
# Warmup Iteration  12: 100.700 ops/s
# Warmup Iteration  13: 101.651 ops/s
# Warmup Iteration  14: 101.667 ops/s
# Warmup Iteration  15: 102.512 ops/s
# Warmup Iteration  16: 102.608 ops/s
# Warmup Iteration  17: 102.612 ops/s
# Warmup Iteration  18: 96.950 ops/s
# Warmup Iteration  19: 95.838 ops/s
# Warmup Iteration  20: 98.453 ops/s
# Warmup Iteration  21: 97.397 ops/s
# Warmup Iteration  22: 95.016 ops/s
# Warmup Iteration  23: 97.206 ops/s
# Warmup Iteration  24: 96.572 ops/s
# Warmup Iteration  25: 94.793 ops/s
# Warmup Iteration  26: 95.480 ops/s
# Warmup Iteration  27: 93.951 ops/s
# Warmup Iteration  28: 95.325 ops/s
# Warmup Iteration  29: 93.124 ops/s
# Warmup Iteration  30: 93.569 ops/s
Iteration   1: 94.753 ops/s
Iteration   2: 94.048 ops/s
Iteration   3: 98.302 ops/s
Iteration   4: 95.419 ops/s
Iteration   5: 102.034 ops/s
Iteration   6: 100.910 ops/s
Iteration   7: 95.729 ops/s
Iteration   8: 95.717 ops/s
Iteration   9: 94.652 ops/s
Iteration  10: 94.610 ops/s
Iteration  11: 94.199 ops/s
Iteration  12: 94.543 ops/s
Iteration  13: 94.669 ops/s
Iteration  14: 95.125 ops/s
Iteration  15: 96.796 ops/s
Iteration  16: 96.668 ops/s
Iteration  17: 95.434 ops/s
Iteration  18: 94.256 ops/s
Iteration  19: 100.530 ops/s
Iteration  20: 98.534 ops/s
Iteration  21: 95.686 ops/s
Iteration  22: 95.887 ops/s
Iteration  23: 97.618 ops/s
Iteration  24: 96.311 ops/s
Iteration  25: 95.200 ops/s
Iteration  26: 94.835 ops/s
Iteration  27: 95.152 ops/s
Iteration  28: 95.991 ops/s
Iteration  29: 95.451 ops/s
Iteration  30: 94.792 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  96.128 ±(99.9%) 1.368 ops/s [Average]
  (min, avg, max) = (94.048, 96.128, 102.034), stdev = 2.047
  CI (99.9%): [94.761, 97.496] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt   Score   Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  96.128 ± 1.368  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 709249.766 ops/s
# Warmup Iteration   2: 1009679.363 ops/s
# Warmup Iteration   3: 1254249.794 ops/s
# Warmup Iteration   4: 1288240.166 ops/s
# Warmup Iteration   5: 1288375.303 ops/s
# Warmup Iteration   6: 1312756.964 ops/s
# Warmup Iteration   7: 1070471.743 ops/s
# Warmup Iteration   8: 1283842.287 ops/s
# Warmup Iteration   9: 1283066.916 ops/s
# Warmup Iteration  10: 1260155.230 ops/s
# Warmup Iteration  11: 1273846.195 ops/s
# Warmup Iteration  12: 1263575.065 ops/s
# Warmup Iteration  13: 1289570.359 ops/s
# Warmup Iteration  14: 1292109.752 ops/s
# Warmup Iteration  15: 1284986.451 ops/s
# Warmup Iteration  16: 1267589.577 ops/s
# Warmup Iteration  17: 1347752.997 ops/s
# Warmup Iteration  18: 1340733.837 ops/s
# Warmup Iteration  19: 1352516.324 ops/s
# Warmup Iteration  20: 1282351.046 ops/s
# Warmup Iteration  21: 1281692.998 ops/s
# Warmup Iteration  22: 1297696.614 ops/s
# Warmup Iteration  23: 1292992.386 ops/s
# Warmup Iteration  24: 1354603.677 ops/s
# Warmup Iteration  25: 1353318.146 ops/s
# Warmup Iteration  26: 1352892.944 ops/s
# Warmup Iteration  27: 1350704.325 ops/s
# Warmup Iteration  28: 1353005.519 ops/s
# Warmup Iteration  29: 1351477.813 ops/s
# Warmup Iteration  30: 1350599.283 ops/s
Iteration   1: 1351042.347 ops/s
Iteration   2: 1351490.458 ops/s
Iteration   3: 1320006.243 ops/s
Iteration   4: 1259035.243 ops/s
Iteration   5: 1274237.935 ops/s
Iteration   6: 1256662.628 ops/s
Iteration   7: 1327864.717 ops/s
Iteration   8: 1352012.138 ops/s
Iteration   9: 1340427.334 ops/s
Iteration  10: 1352718.532 ops/s
Iteration  11: 1331216.579 ops/s
Iteration  12: 1271597.898 ops/s
Iteration  13: 1288604.992 ops/s
Iteration  14: 1261039.529 ops/s
Iteration  15: 1259138.776 ops/s
Iteration  16: 1276879.085 ops/s
Iteration  17: 1256436.304 ops/s
Iteration  18: 1310049.148 ops/s
Iteration  19: 1351968.636 ops/s
Iteration  20: 1284873.389 ops/s
Iteration  21: 1279589.210 ops/s
Iteration  22: 1304804.791 ops/s
Iteration  23: 1299876.829 ops/s
Iteration  24: 1289739.066 ops/s
Iteration  25: 1294725.522 ops/s
Iteration  26: 1310084.206 ops/s
Iteration  27: 1246401.556 ops/s
Iteration  28: 1303686.061 ops/s
Iteration  29: 1352468.872 ops/s
Iteration  30: 1352823.494 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByFloat":
  1303716.717 ±(99.9%) 23871.983 ops/s [Average]
  (min, avg, max) = (1246401.556, 1303716.717, 1352823.494), stdev = 35730.463
  CI (99.9%): [1279844.734, 1327588.700] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByFloat  thrpt   30  1303716.717 ± 23871.983  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 63.028 ops/s
# Warmup Iteration   2: 69.878 ops/s
# Warmup Iteration   3: 95.560 ops/s
# Warmup Iteration   4: 99.290 ops/s
# Warmup Iteration   5: 97.399 ops/s
# Warmup Iteration   6: 97.008 ops/s
# Warmup Iteration   7: 98.828 ops/s
# Warmup Iteration   8: 98.788 ops/s
# Warmup Iteration   9: 100.605 ops/s
# Warmup Iteration  10: 82.944 ops/s
# Warmup Iteration  11: 90.913 ops/s
# Warmup Iteration  12: 97.560 ops/s
# Warmup Iteration  13: 96.677 ops/s
# Warmup Iteration  14: 96.939 ops/s
# Warmup Iteration  15: 97.424 ops/s
# Warmup Iteration  16: 99.607 ops/s
# Warmup Iteration  17: 99.709 ops/s
# Warmup Iteration  18: 96.753 ops/s
# Warmup Iteration  19: 97.165 ops/s
# Warmup Iteration  20: 96.627 ops/s
# Warmup Iteration  21: 101.666 ops/s
# Warmup Iteration  22: 98.542 ops/s
# Warmup Iteration  23: 100.831 ops/s
# Warmup Iteration  24: 99.263 ops/s
# Warmup Iteration  25: 96.055 ops/s
# Warmup Iteration  26: 101.450 ops/s
# Warmup Iteration  27: 98.755 ops/s
# Warmup Iteration  28: 96.659 ops/s
# Warmup Iteration  29: 94.741 ops/s
# Warmup Iteration  30: 94.155 ops/s
Iteration   1: 94.330 ops/s
Iteration   2: 97.115 ops/s
Iteration   3: 94.933 ops/s
Iteration   4: 99.431 ops/s
Iteration   5: 97.182 ops/s
Iteration   6: 95.352 ops/s
Iteration   7: 96.629 ops/s
Iteration   8: 96.253 ops/s
Iteration   9: 93.329 ops/s
Iteration  10: 93.678 ops/s
Iteration  11: 94.939 ops/s
Iteration  12: 95.412 ops/s
Iteration  13: 94.768 ops/s
Iteration  14: 98.592 ops/s
Iteration  15: 96.307 ops/s
Iteration  16: 98.699 ops/s
Iteration  17: 99.584 ops/s
Iteration  18: 98.902 ops/s
Iteration  19: 98.061 ops/s
Iteration  20: 96.863 ops/s
Iteration  21: 98.926 ops/s
Iteration  22: 98.052 ops/s
Iteration  23: 98.449 ops/s
Iteration  24: 98.546 ops/s
Iteration  25: 98.530 ops/s
Iteration  26: 98.901 ops/s
Iteration  27: 99.659 ops/s
Iteration  28: 100.309 ops/s
Iteration  29: 100.135 ops/s
Iteration  30: 99.911 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  97.393 ±(99.9%) 1.367 ops/s [Average]
  (min, avg, max) = (93.329, 97.393, 100.309), stdev = 2.045
  CI (99.9%): [96.026, 98.759] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt   Score   Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  97.393 ± 1.367  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 979279.054 ops/s
# Warmup Iteration   2: 1610139.770 ops/s
# Warmup Iteration   3: 1902607.315 ops/s
# Warmup Iteration   4: 1842855.755 ops/s
# Warmup Iteration   5: 1860042.097 ops/s
# Warmup Iteration   6: 1691103.413 ops/s
# Warmup Iteration   7: 1901117.469 ops/s
# Warmup Iteration   8: 1860035.916 ops/s
# Warmup Iteration   9: 1909773.815 ops/s
# Warmup Iteration  10: 1935334.809 ops/s
# Warmup Iteration  11: 1893471.760 ops/s
# Warmup Iteration  12: 1938976.716 ops/s
# Warmup Iteration  13: 1880750.276 ops/s
# Warmup Iteration  14: 1875677.365 ops/s
# Warmup Iteration  15: 1965737.265 ops/s
# Warmup Iteration  16: 1983675.104 ops/s
# Warmup Iteration  17: 1946195.356 ops/s
# Warmup Iteration  18: 1911555.862 ops/s
# Warmup Iteration  19: 1969974.365 ops/s
# Warmup Iteration  20: 1871047.601 ops/s
# Warmup Iteration  21: 1871757.651 ops/s
# Warmup Iteration  22: 1946965.652 ops/s
# Warmup Iteration  23: 1989279.413 ops/s
# Warmup Iteration  24: 1928485.993 ops/s
# Warmup Iteration  25: 1895549.819 ops/s
# Warmup Iteration  26: 1845111.247 ops/s
# Warmup Iteration  27: 1884030.999 ops/s
# Warmup Iteration  28: 1861411.184 ops/s
# Warmup Iteration  29: 1859030.444 ops/s
# Warmup Iteration  30: 1880367.255 ops/s
Iteration   1: 1834451.655 ops/s
Iteration   2: 1871219.482 ops/s
Iteration   3: 1831286.608 ops/s
Iteration   4: 1872835.880 ops/s
Iteration   5: 1898099.402 ops/s
Iteration   6: 1882656.395 ops/s
Iteration   7: 1889864.020 ops/s
Iteration   8: 1908079.148 ops/s
Iteration   9: 1912270.313 ops/s
Iteration  10: 1897423.433 ops/s
Iteration  11: 1906724.389 ops/s
Iteration  12: 1907794.873 ops/s
Iteration  13: 1901217.278 ops/s
Iteration  14: 1994137.734 ops/s
Iteration  15: 1926709.224 ops/s
Iteration  16: 1879139.106 ops/s
Iteration  17: 1826325.437 ops/s
Iteration  18: 1850655.092 ops/s
Iteration  19: 1862038.156 ops/s
Iteration  20: 1871333.829 ops/s
Iteration  21: 1825954.798 ops/s
Iteration  22: 1858356.256 ops/s
Iteration  23: 1867926.177 ops/s
Iteration  24: 1848007.062 ops/s
Iteration  25: 1883232.156 ops/s
Iteration  26: 1993910.823 ops/s
Iteration  27: 1987092.849 ops/s
Iteration  28: 1842354.328 ops/s
Iteration  29: 1830792.593 ops/s
Iteration  30: 1863700.593 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByInt":
  1884186.303 ±(99.9%) 30646.977 ops/s [Average]
  (min, avg, max) = (1825954.798, 1884186.303, 1994137.734), stdev = 45870.955
  CI (99.9%): [1853539.326, 1914833.280] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByInt  thrpt   30  1884186.303 ± 30646.977  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1000408.995 ops/s
# Warmup Iteration   2: 1516786.251 ops/s
# Warmup Iteration   3: 1742257.814 ops/s
# Warmup Iteration   4: 1723771.274 ops/s
# Warmup Iteration   5: 1751940.633 ops/s
# Warmup Iteration   6: 1771902.409 ops/s
# Warmup Iteration   7: 1568033.362 ops/s
# Warmup Iteration   8: 1891982.121 ops/s
# Warmup Iteration   9: 1891402.820 ops/s
# Warmup Iteration  10: 1893415.316 ops/s
# Warmup Iteration  11: 1888163.247 ops/s
# Warmup Iteration  12: 1886076.666 ops/s
# Warmup Iteration  13: 1887456.816 ops/s
# Warmup Iteration  14: 1890260.407 ops/s
# Warmup Iteration  15: 1847989.465 ops/s
# Warmup Iteration  16: 1755909.174 ops/s
# Warmup Iteration  17: 1863336.328 ops/s
# Warmup Iteration  18: 1894852.543 ops/s
# Warmup Iteration  19: 1789293.951 ops/s
# Warmup Iteration  20: 1763441.254 ops/s
# Warmup Iteration  21: 1866975.670 ops/s
# Warmup Iteration  22: 1798069.827 ops/s
# Warmup Iteration  23: 1853884.330 ops/s
# Warmup Iteration  24: 1806970.020 ops/s
# Warmup Iteration  25: 1772730.881 ops/s
# Warmup Iteration  26: 1754953.033 ops/s
# Warmup Iteration  27: 1748085.469 ops/s
# Warmup Iteration  28: 1822768.273 ops/s
# Warmup Iteration  29: 1839495.143 ops/s
# Warmup Iteration  30: 1828366.111 ops/s
Iteration   1: 1808832.473 ops/s
Iteration   2: 1791816.693 ops/s
Iteration   3: 1742239.236 ops/s
Iteration   4: 1773411.997 ops/s
Iteration   5: 1794907.998 ops/s
Iteration   6: 1747627.816 ops/s
Iteration   7: 1721943.247 ops/s
Iteration   8: 1789432.385 ops/s
Iteration   9: 1770114.707 ops/s
Iteration  10: 1789650.088 ops/s
Iteration  11: 1778616.189 ops/s
Iteration  12: 1740743.252 ops/s
Iteration  13: 1769506.952 ops/s
Iteration  14: 1770923.650 ops/s
Iteration  15: 1790379.114 ops/s
Iteration  16: 1822031.812 ops/s
Iteration  17: 1770630.892 ops/s
Iteration  18: 1772579.356 ops/s
Iteration  19: 1774097.548 ops/s
Iteration  20: 1779548.337 ops/s
Iteration  21: 1727184.304 ops/s
Iteration  22: 1768820.479 ops/s
Iteration  23: 1758128.458 ops/s
Iteration  24: 1750068.509 ops/s
Iteration  25: 1791272.522 ops/s
Iteration  26: 1822599.587 ops/s
Iteration  27: 1887121.215 ops/s
Iteration  28: 1771201.881 ops/s
Iteration  29: 1808247.605 ops/s
Iteration  30: 1753090.990 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByLong":
  1777892.310 ±(99.9%) 21603.159 ops/s [Average]
  (min, avg, max) = (1721943.247, 1777892.310, 1887121.215), stdev = 32334.595
  CI (99.9%): [1756289.150, 1799495.469] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_sumByLong  thrpt   30  1777892.310 ± 21603.159  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3360473.197 ops/s
# Warmup Iteration   2: 7968505.261 ops/s
# Warmup Iteration   3: 7964014.969 ops/s
# Warmup Iteration   4: 6757100.595 ops/s
# Warmup Iteration   5: 8323847.632 ops/s
# Warmup Iteration   6: 8163700.373 ops/s
# Warmup Iteration   7: 8053535.937 ops/s
# Warmup Iteration   8: 8029507.080 ops/s
# Warmup Iteration   9: 8119703.490 ops/s
# Warmup Iteration  10: 7931918.926 ops/s
# Warmup Iteration  11: 8140058.242 ops/s
# Warmup Iteration  12: 7860911.464 ops/s
# Warmup Iteration  13: 8100069.071 ops/s
# Warmup Iteration  14: 8043675.308 ops/s
# Warmup Iteration  15: 8191452.565 ops/s
# Warmup Iteration  16: 8020612.523 ops/s
# Warmup Iteration  17: 7971927.834 ops/s
# Warmup Iteration  18: 8039910.400 ops/s
# Warmup Iteration  19: 7975414.193 ops/s
# Warmup Iteration  20: 8057113.947 ops/s
# Warmup Iteration  21: 8312683.158 ops/s
# Warmup Iteration  22: 8613882.358 ops/s
# Warmup Iteration  23: 8596249.870 ops/s
# Warmup Iteration  24: 8601641.411 ops/s
# Warmup Iteration  25: 8600874.354 ops/s
# Warmup Iteration  26: 8604225.649 ops/s
# Warmup Iteration  27: 8596302.173 ops/s
# Warmup Iteration  28: 8608628.396 ops/s
# Warmup Iteration  29: 8595498.212 ops/s
# Warmup Iteration  30: 8096336.029 ops/s
Iteration   1: 8171532.190 ops/s
Iteration   2: 8233884.472 ops/s
Iteration   3: 8316107.287 ops/s
Iteration   4: 7972384.680 ops/s
Iteration   5: 8293185.978 ops/s
Iteration   6: 8107976.033 ops/s
Iteration   7: 8265684.228 ops/s
Iteration   8: 7974957.043 ops/s
Iteration   9: 8155038.629 ops/s
Iteration  10: 8350794.579 ops/s
Iteration  11: 8331611.547 ops/s
Iteration  12: 8157524.206 ops/s
Iteration  13: 8533174.555 ops/s
Iteration  14: 8415873.197 ops/s
Iteration  15: 8485682.398 ops/s
Iteration  16: 8202450.128 ops/s
Iteration  17: 8137338.173 ops/s
Iteration  18: 8196841.910 ops/s
Iteration  19: 8134834.699 ops/s
Iteration  20: 8238729.699 ops/s
Iteration  21: 8168202.701 ops/s
Iteration  22: 8068107.541 ops/s
Iteration  23: 8568682.301 ops/s
Iteration  24: 8592365.021 ops/s
Iteration  25: 8600664.688 ops/s
Iteration  26: 8597242.817 ops/s
Iteration  27: 8598922.942 ops/s
Iteration  28: 8557466.474 ops/s
Iteration  29: 8611936.584 ops/s
Iteration  30: 8594410.537 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumDouble":
  8321120.241 ±(99.9%) 137642.371 ops/s [Average]
  (min, avg, max) = (7972384.680, 8321120.241, 8611936.584), stdev = 206016.636
  CI (99.9%): [8183477.871, 8458762.612] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_sumDouble  thrpt   30  8321120.241 ± 137642.371  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumDoubleConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumDoubleConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 77.659 ops/s
# Warmup Iteration   2: 84.885 ops/s
# Warmup Iteration   3: 114.381 ops/s
# Warmup Iteration   4: 114.462 ops/s
# Warmup Iteration   5: 116.826 ops/s
# Warmup Iteration   6: 116.587 ops/s
# Warmup Iteration   7: 115.279 ops/s
# Warmup Iteration   8: 114.418 ops/s
# Warmup Iteration   9: 114.662 ops/s
# Warmup Iteration  10: 113.776 ops/s
# Warmup Iteration  11: 97.399 ops/s
# Warmup Iteration  12: 115.060 ops/s
# Warmup Iteration  13: 114.424 ops/s
# Warmup Iteration  14: 114.002 ops/s
# Warmup Iteration  15: 114.450 ops/s
# Warmup Iteration  16: 114.825 ops/s
# Warmup Iteration  17: 114.171 ops/s
# Warmup Iteration  18: 114.789 ops/s
# Warmup Iteration  19: 114.134 ops/s
# Warmup Iteration  20: 114.442 ops/s
# Warmup Iteration  21: 114.631 ops/s
# Warmup Iteration  22: 115.123 ops/s
# Warmup Iteration  23: 116.971 ops/s
# Warmup Iteration  24: 116.802 ops/s
# Warmup Iteration  25: 107.780 ops/s
# Warmup Iteration  26: 106.897 ops/s
# Warmup Iteration  27: 105.500 ops/s
# Warmup Iteration  28: 106.654 ops/s
# Warmup Iteration  29: 103.379 ops/s
# Warmup Iteration  30: 103.738 ops/s
Iteration   1: 104.772 ops/s
Iteration   2: 102.272 ops/s
Iteration   3: 101.685 ops/s
Iteration   4: 100.329 ops/s
Iteration   5: 103.370 ops/s
Iteration   6: 101.579 ops/s
Iteration   7: 101.326 ops/s
Iteration   8: 104.603 ops/s
Iteration   9: 107.453 ops/s
Iteration  10: 105.545 ops/s
Iteration  11: 107.507 ops/s
Iteration  12: 107.818 ops/s
Iteration  13: 107.136 ops/s
Iteration  14: 108.491 ops/s
Iteration  15: 109.110 ops/s
Iteration  16: 108.977 ops/s
Iteration  17: 108.065 ops/s
Iteration  18: 107.236 ops/s
Iteration  19: 106.969 ops/s
Iteration  20: 107.044 ops/s
Iteration  21: 106.666 ops/s
Iteration  22: 107.628 ops/s
Iteration  23: 107.436 ops/s
Iteration  24: 107.955 ops/s
Iteration  25: 108.531 ops/s
Iteration  26: 108.868 ops/s
Iteration  27: 105.231 ops/s
Iteration  28: 105.169 ops/s
Iteration  29: 100.667 ops/s
Iteration  30: 101.401 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumDoubleConsistentRounding1":
  105.695 ±(99.9%) 1.881 ops/s [Average]
  (min, avg, max) = (100.329, 105.695, 109.110), stdev = 2.815
  CI (99.9%): [103.814, 107.576] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt    Score   Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_sumDoubleConsistentRounding1  thrpt   30  105.695 ± 1.881  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumDoubleConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumDoubleConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 80.891 ops/s
# Warmup Iteration   2: 88.269 ops/s
# Warmup Iteration   3: 114.102 ops/s
# Warmup Iteration   4: 114.979 ops/s
# Warmup Iteration   5: 115.431 ops/s
# Warmup Iteration   6: 115.820 ops/s
# Warmup Iteration   7: 118.157 ops/s
# Warmup Iteration   8: 122.638 ops/s
# Warmup Iteration   9: 116.615 ops/s
# Warmup Iteration  10: 116.247 ops/s
# Warmup Iteration  11: 97.296 ops/s
# Warmup Iteration  12: 118.346 ops/s
# Warmup Iteration  13: 120.329 ops/s
# Warmup Iteration  14: 115.070 ops/s
# Warmup Iteration  15: 118.573 ops/s
# Warmup Iteration  16: 118.764 ops/s
# Warmup Iteration  17: 114.994 ops/s
# Warmup Iteration  18: 115.252 ops/s
# Warmup Iteration  19: 116.966 ops/s
# Warmup Iteration  20: 114.806 ops/s
# Warmup Iteration  21: 115.501 ops/s
# Warmup Iteration  22: 116.654 ops/s
# Warmup Iteration  23: 115.052 ops/s
# Warmup Iteration  24: 114.138 ops/s
# Warmup Iteration  25: 119.896 ops/s
# Warmup Iteration  26: 118.419 ops/s
# Warmup Iteration  27: 116.422 ops/s
# Warmup Iteration  28: 116.680 ops/s
# Warmup Iteration  29: 111.389 ops/s
# Warmup Iteration  30: 112.714 ops/s
Iteration   1: 116.270 ops/s
Iteration   2: 116.678 ops/s
Iteration   3: 114.362 ops/s
Iteration   4: 114.309 ops/s
Iteration   5: 117.583 ops/s
Iteration   6: 116.795 ops/s
Iteration   7: 119.473 ops/s
Iteration   8: 117.558 ops/s
Iteration   9: 114.065 ops/s
Iteration  10: 113.296 ops/s
Iteration  11: 113.771 ops/s
Iteration  12: 111.310 ops/s
Iteration  13: 113.425 ops/s
Iteration  14: 113.829 ops/s
Iteration  15: 115.392 ops/s
Iteration  16: 116.266 ops/s
Iteration  17: 114.635 ops/s
Iteration  18: 116.670 ops/s
Iteration  19: 114.875 ops/s
Iteration  20: 115.829 ops/s
Iteration  21: 117.287 ops/s
Iteration  22: 116.946 ops/s
Iteration  23: 119.522 ops/s
Iteration  24: 116.136 ops/s
Iteration  25: 112.442 ops/s
Iteration  26: 114.551 ops/s
Iteration  27: 113.228 ops/s
Iteration  28: 111.070 ops/s
Iteration  29: 114.568 ops/s
Iteration  30: 113.706 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumDoubleConsistentRounding2":
  115.195 ±(99.9%) 1.396 ops/s [Average]
  (min, avg, max) = (111.070, 115.195, 119.522), stdev = 2.090
  CI (99.9%): [113.798, 116.591] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt    Score   Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_sumDoubleConsistentRounding2  thrpt   30  115.195 ± 1.396  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3122373.383 ops/s
# Warmup Iteration   2: 7535686.128 ops/s
# Warmup Iteration   3: 7758247.047 ops/s
# Warmup Iteration   4: 6579796.464 ops/s
# Warmup Iteration   5: 8191940.373 ops/s
# Warmup Iteration   6: 8197123.653 ops/s
# Warmup Iteration   7: 8192894.861 ops/s
# Warmup Iteration   8: 8190751.410 ops/s
# Warmup Iteration   9: 8183113.799 ops/s
# Warmup Iteration  10: 8199926.978 ops/s
# Warmup Iteration  11: 8185662.780 ops/s
# Warmup Iteration  12: 8189559.677 ops/s
# Warmup Iteration  13: 7698895.865 ops/s
# Warmup Iteration  14: 7949987.081 ops/s
# Warmup Iteration  15: 7743821.627 ops/s
# Warmup Iteration  16: 7622579.798 ops/s
# Warmup Iteration  17: 7743809.966 ops/s
# Warmup Iteration  18: 7612032.829 ops/s
# Warmup Iteration  19: 7674408.934 ops/s
# Warmup Iteration  20: 7634762.362 ops/s
# Warmup Iteration  21: 7674015.831 ops/s
# Warmup Iteration  22: 7964915.492 ops/s
# Warmup Iteration  23: 8175962.030 ops/s
# Warmup Iteration  24: 8151919.753 ops/s
# Warmup Iteration  25: 7795913.704 ops/s
# Warmup Iteration  26: 7827766.557 ops/s
# Warmup Iteration  27: 8062682.594 ops/s
# Warmup Iteration  28: 7707485.645 ops/s
# Warmup Iteration  29: 7810527.278 ops/s
# Warmup Iteration  30: 7896293.383 ops/s
Iteration   1: 7624117.673 ops/s
Iteration   2: 7722010.026 ops/s
Iteration   3: 7631184.585 ops/s
Iteration   4: 8042012.477 ops/s
Iteration   5: 8082479.618 ops/s
Iteration   6: 7590748.491 ops/s
Iteration   7: 7788623.683 ops/s
Iteration   8: 7809106.861 ops/s
Iteration   9: 7772272.955 ops/s
Iteration  10: 7639669.901 ops/s
Iteration  11: 8073838.902 ops/s
Iteration  12: 7912073.837 ops/s
Iteration  13: 7803759.917 ops/s
Iteration  14: 7627116.337 ops/s
Iteration  15: 7604677.486 ops/s
Iteration  16: 7635503.870 ops/s
Iteration  17: 7810804.818 ops/s
Iteration  18: 8188342.922 ops/s
Iteration  19: 7950054.582 ops/s
Iteration  20: 7839830.289 ops/s
Iteration  21: 7692648.796 ops/s
Iteration  22: 7729880.783 ops/s
Iteration  23: 7677639.059 ops/s
Iteration  24: 7558293.537 ops/s
Iteration  25: 7599282.162 ops/s
Iteration  26: 7681612.682 ops/s
Iteration  27: 8199496.057 ops/s
Iteration  28: 8194463.002 ops/s
Iteration  29: 8091850.337 ops/s
Iteration  30: 7865547.420 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumFloat":
  7814631.435 ±(99.9%) 134451.214 ops/s [Average]
  (min, avg, max) = (7558293.537, 7814631.435, 8199496.057), stdev = 201240.263
  CI (99.9%): [7680180.222, 7949082.649] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_sumFloat  thrpt   30  7814631.435 ± 134451.214  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumFloatConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumFloatConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 73.375 ops/s
# Warmup Iteration   2: 77.207 ops/s
# Warmup Iteration   3: 106.332 ops/s
# Warmup Iteration   4: 111.793 ops/s
# Warmup Iteration   5: 110.897 ops/s
# Warmup Iteration   6: 108.731 ops/s
# Warmup Iteration   7: 110.571 ops/s
# Warmup Iteration   8: 111.377 ops/s
# Warmup Iteration   9: 110.349 ops/s
# Warmup Iteration  10: 111.105 ops/s
# Warmup Iteration  11: 106.375 ops/s
# Warmup Iteration  12: 100.395 ops/s
# Warmup Iteration  13: 108.980 ops/s
# Warmup Iteration  14: 110.534 ops/s
# Warmup Iteration  15: 114.392 ops/s
# Warmup Iteration  16: 111.970 ops/s
# Warmup Iteration  17: 108.697 ops/s
# Warmup Iteration  18: 110.634 ops/s
# Warmup Iteration  19: 116.409 ops/s
# Warmup Iteration  20: 114.956 ops/s
# Warmup Iteration  21: 114.584 ops/s
# Warmup Iteration  22: 114.878 ops/s
# Warmup Iteration  23: 115.631 ops/s
# Warmup Iteration  24: 115.524 ops/s
# Warmup Iteration  25: 113.404 ops/s
# Warmup Iteration  26: 107.755 ops/s
# Warmup Iteration  27: 103.473 ops/s
# Warmup Iteration  28: 102.676 ops/s
# Warmup Iteration  29: 100.349 ops/s
# Warmup Iteration  30: 99.280 ops/s
Iteration   1: 105.331 ops/s
Iteration   2: 105.497 ops/s
Iteration   3: 98.209 ops/s
Iteration   4: 100.233 ops/s
Iteration   5: 105.914 ops/s
Iteration   6: 106.567 ops/s
Iteration   7: 99.368 ops/s
Iteration   8: 99.413 ops/s
Iteration   9: 99.895 ops/s
Iteration  10: 99.895 ops/s
Iteration  11: 98.190 ops/s
Iteration  12: 102.932 ops/s
Iteration  13: 104.401 ops/s
Iteration  14: 101.831 ops/s
Iteration  15: 101.774 ops/s
Iteration  16: 101.751 ops/s
Iteration  17: 99.017 ops/s
Iteration  18: 102.952 ops/s
Iteration  19: 105.957 ops/s
Iteration  20: 100.422 ops/s
Iteration  21: 106.055 ops/s
Iteration  22: 105.453 ops/s
Iteration  23: 100.529 ops/s
Iteration  24: 100.194 ops/s
Iteration  25: 98.693 ops/s
Iteration  26: 100.067 ops/s
Iteration  27: 99.119 ops/s
Iteration  28: 102.625 ops/s
Iteration  29: 102.209 ops/s
Iteration  30: 99.773 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumFloatConsistentRounding1":
  101.809 ±(99.9%) 1.797 ops/s [Average]
  (min, avg, max) = (98.190, 101.809, 106.567), stdev = 2.690
  CI (99.9%): [100.012, 103.606] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt    Score   Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_sumFloatConsistentRounding1  thrpt   30  101.809 ± 1.797  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumFloatConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumFloatConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 77.461 ops/s
# Warmup Iteration   2: 83.699 ops/s
# Warmup Iteration   3: 118.284 ops/s
# Warmup Iteration   4: 121.134 ops/s
# Warmup Iteration   5: 119.268 ops/s
# Warmup Iteration   6: 119.810 ops/s
# Warmup Iteration   7: 116.262 ops/s
# Warmup Iteration   8: 113.093 ops/s
# Warmup Iteration   9: 113.747 ops/s
# Warmup Iteration  10: 117.874 ops/s
# Warmup Iteration  11: 95.539 ops/s
# Warmup Iteration  12: 115.934 ops/s
# Warmup Iteration  13: 116.469 ops/s
# Warmup Iteration  14: 113.704 ops/s
# Warmup Iteration  15: 118.050 ops/s
# Warmup Iteration  16: 117.331 ops/s
# Warmup Iteration  17: 116.843 ops/s
# Warmup Iteration  18: 113.166 ops/s
# Warmup Iteration  19: 114.095 ops/s
# Warmup Iteration  20: 113.324 ops/s
# Warmup Iteration  21: 115.788 ops/s
# Warmup Iteration  22: 113.627 ops/s
# Warmup Iteration  23: 118.786 ops/s
# Warmup Iteration  24: 118.435 ops/s
# Warmup Iteration  25: 115.573 ops/s
# Warmup Iteration  26: 112.465 ops/s
# Warmup Iteration  27: 112.478 ops/s
# Warmup Iteration  28: 110.116 ops/s
# Warmup Iteration  29: 111.051 ops/s
# Warmup Iteration  30: 110.585 ops/s
Iteration   1: 111.171 ops/s
Iteration   2: 115.185 ops/s
Iteration   3: 111.060 ops/s
Iteration   4: 111.923 ops/s
Iteration   5: 116.314 ops/s
Iteration   6: 119.107 ops/s
Iteration   7: 119.220 ops/s
Iteration   8: 119.001 ops/s
Iteration   9: 118.616 ops/s
Iteration  10: 118.516 ops/s
Iteration  11: 120.054 ops/s
Iteration  12: 120.257 ops/s
Iteration  13: 120.381 ops/s
Iteration  14: 119.518 ops/s
Iteration  15: 118.428 ops/s
Iteration  16: 119.086 ops/s
Iteration  17: 118.958 ops/s
Iteration  18: 118.961 ops/s
Iteration  19: 119.172 ops/s
Iteration  20: 119.002 ops/s
Iteration  21: 118.553 ops/s
Iteration  22: 115.471 ops/s
Iteration  23: 114.921 ops/s
Iteration  24: 118.555 ops/s
Iteration  25: 111.549 ops/s
Iteration  26: 111.610 ops/s
Iteration  27: 111.030 ops/s
Iteration  28: 108.645 ops/s
Iteration  29: 110.831 ops/s
Iteration  30: 111.452 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumFloatConsistentRounding2":
  116.218 ±(99.9%) 2.493 ops/s [Average]
  (min, avg, max) = (108.645, 116.218, 120.381), stdev = 3.731
  CI (99.9%): [113.725, 118.711] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt    Score   Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_sumFloatConsistentRounding2  thrpt   30  116.218 ± 2.493  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3316452.376 ops/s
# Warmup Iteration   2: 7584804.397 ops/s
# Warmup Iteration   3: 7648446.911 ops/s
# Warmup Iteration   4: 6255442.403 ops/s
# Warmup Iteration   5: 8004355.501 ops/s
# Warmup Iteration   6: 7769480.896 ops/s
# Warmup Iteration   7: 8274852.581 ops/s
# Warmup Iteration   8: 8038320.471 ops/s
# Warmup Iteration   9: 8003978.743 ops/s
# Warmup Iteration  10: 7799208.936 ops/s
# Warmup Iteration  11: 7909862.354 ops/s
# Warmup Iteration  12: 7843313.955 ops/s
# Warmup Iteration  13: 7933915.085 ops/s
# Warmup Iteration  14: 8034416.924 ops/s
# Warmup Iteration  15: 7970980.756 ops/s
# Warmup Iteration  16: 7796146.146 ops/s
# Warmup Iteration  17: 8135242.066 ops/s
# Warmup Iteration  18: 7922754.256 ops/s
# Warmup Iteration  19: 7818086.339 ops/s
# Warmup Iteration  20: 8038810.819 ops/s
# Warmup Iteration  21: 8202257.917 ops/s
# Warmup Iteration  22: 8289954.250 ops/s
# Warmup Iteration  23: 7820372.890 ops/s
# Warmup Iteration  24: 7935460.697 ops/s
# Warmup Iteration  25: 8109334.082 ops/s
# Warmup Iteration  26: 7971599.506 ops/s
# Warmup Iteration  27: 7824416.019 ops/s
# Warmup Iteration  28: 8007706.885 ops/s
# Warmup Iteration  29: 8058707.529 ops/s
# Warmup Iteration  30: 7987956.456 ops/s
Iteration   1: 7904657.945 ops/s
Iteration   2: 8054329.060 ops/s
Iteration   3: 7778476.819 ops/s
Iteration   4: 8140136.748 ops/s
Iteration   5: 8320277.186 ops/s
Iteration   6: 8033787.331 ops/s
Iteration   7: 7936802.496 ops/s
Iteration   8: 8008321.257 ops/s
Iteration   9: 7808654.067 ops/s
Iteration  10: 7867124.100 ops/s
Iteration  11: 7994910.765 ops/s
Iteration  12: 8046762.573 ops/s
Iteration  13: 7982159.462 ops/s
Iteration  14: 7837750.618 ops/s
Iteration  15: 8034530.573 ops/s
Iteration  16: 7840466.810 ops/s
Iteration  17: 7923833.939 ops/s
Iteration  18: 8000172.681 ops/s
Iteration  19: 7958427.245 ops/s
Iteration  20: 7913397.817 ops/s
Iteration  21: 7924101.737 ops/s
Iteration  22: 7721617.212 ops/s
Iteration  23: 7867424.337 ops/s
Iteration  24: 8013025.028 ops/s
Iteration  25: 7765076.649 ops/s
Iteration  26: 8194029.531 ops/s
Iteration  27: 8295526.373 ops/s
Iteration  28: 8043242.444 ops/s
Iteration  29: 7841263.144 ops/s
Iteration  30: 7935024.548 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumInteger":
  7966177.017 ±(99.9%) 95415.739 ops/s [Average]
  (min, avg, max) = (7721617.212, 7966177.017, 8320277.186), stdev = 142813.797
  CI (99.9%): [7870761.278, 8061592.755] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_sumInteger  thrpt   30  7966177.017 ± 95415.739  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3290662.720 ops/s
# Warmup Iteration   2: 7931170.438 ops/s
# Warmup Iteration   3: 8147220.245 ops/s
# Warmup Iteration   4: 6752447.694 ops/s
# Warmup Iteration   5: 8081543.156 ops/s
# Warmup Iteration   6: 8070471.540 ops/s
# Warmup Iteration   7: 8084558.530 ops/s
# Warmup Iteration   8: 8075076.597 ops/s
# Warmup Iteration   9: 8063372.219 ops/s
# Warmup Iteration  10: 8033347.383 ops/s
# Warmup Iteration  11: 7577145.466 ops/s
# Warmup Iteration  12: 7602715.098 ops/s
# Warmup Iteration  13: 7597747.985 ops/s
# Warmup Iteration  14: 7490531.914 ops/s
# Warmup Iteration  15: 7494051.295 ops/s
# Warmup Iteration  16: 7465121.392 ops/s
# Warmup Iteration  17: 7552517.824 ops/s
# Warmup Iteration  18: 7471437.179 ops/s
# Warmup Iteration  19: 7603056.515 ops/s
# Warmup Iteration  20: 7606191.945 ops/s
# Warmup Iteration  21: 7595253.450 ops/s
# Warmup Iteration  22: 7505264.992 ops/s
# Warmup Iteration  23: 7545834.597 ops/s
# Warmup Iteration  24: 7692535.060 ops/s
# Warmup Iteration  25: 7542535.593 ops/s
# Warmup Iteration  26: 7700393.390 ops/s
# Warmup Iteration  27: 7686217.685 ops/s
# Warmup Iteration  28: 7657362.992 ops/s
# Warmup Iteration  29: 7799133.456 ops/s
# Warmup Iteration  30: 7575525.530 ops/s
Iteration   1: 7797118.926 ops/s
Iteration   2: 7733111.987 ops/s
Iteration   3: 7635367.761 ops/s
Iteration   4: 7681706.130 ops/s
Iteration   5: 7665039.679 ops/s
Iteration   6: 7483673.802 ops/s
Iteration   7: 7495992.764 ops/s
Iteration   8: 7553665.406 ops/s
Iteration   9: 7604407.750 ops/s
Iteration  10: 8055076.772 ops/s
Iteration  11: 7500441.426 ops/s
Iteration  12: 7694728.585 ops/s
Iteration  13: 7577473.409 ops/s
Iteration  14: 7733436.132 ops/s
Iteration  15: 7569357.928 ops/s
Iteration  16: 7475360.300 ops/s
Iteration  17: 7903164.403 ops/s
Iteration  18: 7744687.808 ops/s
Iteration  19: 7407152.461 ops/s
Iteration  20: 7563597.194 ops/s
Iteration  21: 7605894.581 ops/s
Iteration  22: 7588472.926 ops/s
Iteration  23: 7435333.885 ops/s
Iteration  24: 7681676.974 ops/s
Iteration  25: 7647749.038 ops/s
Iteration  26: 7643634.554 ops/s
Iteration  27: 7842620.622 ops/s
Iteration  28: 7990295.806 ops/s
Iteration  29: 7958814.568 ops/s
Iteration  30: 7871599.002 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_sumLong":
  7671355.086 ±(99.9%) 111415.565 ops/s [Average]
  (min, avg, max) = (7407152.461, 7671355.086, 8055076.772), stdev = 166761.585
  CI (99.9%): [7559939.521, 7782770.651] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_sumLong  thrpt   30  7671355.086 ± 111415.565  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_summarizeDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_summarizeDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2948341.235 ops/s
# Warmup Iteration   2: 6733192.413 ops/s
# Warmup Iteration   3: 7044611.745 ops/s
# Warmup Iteration   4: 5667724.568 ops/s
# Warmup Iteration   5: 6457510.428 ops/s
# Warmup Iteration   6: 6754876.413 ops/s
# Warmup Iteration   7: 6911103.654 ops/s
# Warmup Iteration   8: 6676355.617 ops/s
# Warmup Iteration   9: 6745314.128 ops/s
# Warmup Iteration  10: 6668365.957 ops/s
# Warmup Iteration  11: 6754037.832 ops/s
# Warmup Iteration  12: 6808047.466 ops/s
# Warmup Iteration  13: 6814529.860 ops/s
# Warmup Iteration  14: 6715019.317 ops/s
# Warmup Iteration  15: 6785150.350 ops/s
# Warmup Iteration  16: 7060936.663 ops/s
# Warmup Iteration  17: 7152770.382 ops/s
# Warmup Iteration  18: 7163134.287 ops/s
# Warmup Iteration  19: 7152256.383 ops/s
# Warmup Iteration  20: 7151567.766 ops/s
# Warmup Iteration  21: 7154050.638 ops/s
# Warmup Iteration  22: 7162980.868 ops/s
# Warmup Iteration  23: 6991957.543 ops/s
# Warmup Iteration  24: 7127021.463 ops/s
# Warmup Iteration  25: 6966408.458 ops/s
# Warmup Iteration  26: 6841111.471 ops/s
# Warmup Iteration  27: 6734517.039 ops/s
# Warmup Iteration  28: 6777757.347 ops/s
# Warmup Iteration  29: 6800975.483 ops/s
# Warmup Iteration  30: 6638325.331 ops/s
Iteration   1: 6699669.302 ops/s
Iteration   2: 6835420.341 ops/s
Iteration   3: 6801424.462 ops/s
Iteration   4: 6561468.752 ops/s
Iteration   5: 6664930.266 ops/s
Iteration   6: 6624171.420 ops/s
Iteration   7: 6584740.939 ops/s
Iteration   8: 6729575.412 ops/s
Iteration   9: 6828145.669 ops/s
Iteration  10: 6864934.249 ops/s
Iteration  11: 6940952.671 ops/s
Iteration  12: 7054130.533 ops/s
Iteration  13: 6812263.656 ops/s
Iteration  14: 6869516.111 ops/s
Iteration  15: 7095969.721 ops/s
Iteration  16: 7012719.645 ops/s
Iteration  17: 6824161.210 ops/s
Iteration  18: 6693174.771 ops/s
Iteration  19: 6838101.757 ops/s
Iteration  20: 6687161.840 ops/s
Iteration  21: 6679529.209 ops/s
Iteration  22: 6583207.953 ops/s
Iteration  23: 6734393.625 ops/s
Iteration  24: 6914839.798 ops/s
Iteration  25: 7149351.577 ops/s
Iteration  26: 6910707.194 ops/s
Iteration  27: 6801792.620 ops/s
Iteration  28: 6467525.913 ops/s
Iteration  29: 6800514.406 ops/s
Iteration  30: 6531969.009 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_summarizeDouble":
  6786548.801 ±(99.9%) 111824.651 ops/s [Average]
  (min, avg, max) = (6467525.913, 6786548.801, 7149351.577), stdev = 167373.886
  CI (99.9%): [6674724.150, 6898373.452] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_summarizeDouble  thrpt   30  6786548.801 ± 111824.651  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_summarizeFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_summarizeFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2992229.645 ops/s
# Warmup Iteration   2: 6707989.671 ops/s
# Warmup Iteration   3: 6764505.642 ops/s
# Warmup Iteration   4: 5875531.535 ops/s
# Warmup Iteration   5: 6344898.283 ops/s
# Warmup Iteration   6: 6586007.706 ops/s
# Warmup Iteration   7: 6788595.224 ops/s
# Warmup Iteration   8: 6971356.718 ops/s
# Warmup Iteration   9: 6697448.758 ops/s
# Warmup Iteration  10: 6671396.189 ops/s
# Warmup Iteration  11: 6681634.311 ops/s
# Warmup Iteration  12: 6596224.357 ops/s
# Warmup Iteration  13: 6685657.427 ops/s
# Warmup Iteration  14: 6952656.756 ops/s
# Warmup Iteration  15: 6656082.254 ops/s
# Warmup Iteration  16: 6784657.393 ops/s
# Warmup Iteration  17: 6739536.861 ops/s
# Warmup Iteration  18: 6672389.863 ops/s
# Warmup Iteration  19: 6803283.939 ops/s
# Warmup Iteration  20: 6735568.403 ops/s
# Warmup Iteration  21: 6666139.291 ops/s
# Warmup Iteration  22: 6961044.443 ops/s
# Warmup Iteration  23: 7040052.823 ops/s
# Warmup Iteration  24: 6618506.372 ops/s
# Warmup Iteration  25: 6696760.076 ops/s
# Warmup Iteration  26: 6652128.474 ops/s
# Warmup Iteration  27: 6614037.344 ops/s
# Warmup Iteration  28: 6980605.791 ops/s
# Warmup Iteration  29: 6835298.052 ops/s
# Warmup Iteration  30: 6745844.017 ops/s
Iteration   1: 7103512.673 ops/s
Iteration   2: 7114064.784 ops/s
Iteration   3: 7103305.206 ops/s
Iteration   4: 7102951.450 ops/s
Iteration   5: 7100947.062 ops/s
Iteration   6: 7109627.111 ops/s
Iteration   7: 7109714.681 ops/s
Iteration   8: 7082283.331 ops/s
Iteration   9: 7101338.689 ops/s
Iteration  10: 7100732.256 ops/s
Iteration  11: 7098188.509 ops/s
Iteration  12: 7098584.138 ops/s
Iteration  13: 7105233.932 ops/s
Iteration  14: 7108912.264 ops/s
Iteration  15: 7113652.910 ops/s
Iteration  16: 7096074.172 ops/s
Iteration  17: 7094309.485 ops/s
Iteration  18: 6695643.086 ops/s
Iteration  19: 6651223.741 ops/s
Iteration  20: 6536492.798 ops/s
Iteration  21: 6707666.762 ops/s
Iteration  22: 6670972.248 ops/s
Iteration  23: 6834479.672 ops/s
Iteration  24: 6634219.759 ops/s
Iteration  25: 6641913.852 ops/s
Iteration  26: 6677335.331 ops/s
Iteration  27: 6805969.605 ops/s
Iteration  28: 6602680.955 ops/s
Iteration  29: 6765526.240 ops/s
Iteration  30: 6640745.852 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_summarizeFloat":
  6920276.752 ±(99.9%) 146008.213 ops/s [Average]
  (min, avg, max) = (6536492.798, 6920276.752, 7114064.784), stdev = 218538.237
  CI (99.9%): [6774268.538, 7066284.965] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_summarizeFloat  thrpt   30  6920276.752 ± 146008.213  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_summarizeInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_summarizeInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3252057.985 ops/s
# Warmup Iteration   2: 7354381.431 ops/s
# Warmup Iteration   3: 7559490.007 ops/s
# Warmup Iteration   4: 6264062.126 ops/s
# Warmup Iteration   5: 7547317.709 ops/s
# Warmup Iteration   6: 7634375.347 ops/s
# Warmup Iteration   7: 7545743.720 ops/s
# Warmup Iteration   8: 7582728.784 ops/s
# Warmup Iteration   9: 7463761.341 ops/s
# Warmup Iteration  10: 7532562.813 ops/s
# Warmup Iteration  11: 7611094.216 ops/s
# Warmup Iteration  12: 7563042.471 ops/s
# Warmup Iteration  13: 7655940.241 ops/s
# Warmup Iteration  14: 7619133.491 ops/s
# Warmup Iteration  15: 7576528.536 ops/s
# Warmup Iteration  16: 7513801.408 ops/s
# Warmup Iteration  17: 7554087.652 ops/s
# Warmup Iteration  18: 7500353.909 ops/s
# Warmup Iteration  19: 7532841.557 ops/s
# Warmup Iteration  20: 7505113.703 ops/s
# Warmup Iteration  21: 7463450.164 ops/s
# Warmup Iteration  22: 7495959.746 ops/s
# Warmup Iteration  23: 7477268.478 ops/s
# Warmup Iteration  24: 7551740.615 ops/s
# Warmup Iteration  25: 7655616.199 ops/s
# Warmup Iteration  26: 7571690.526 ops/s
# Warmup Iteration  27: 7501703.291 ops/s
# Warmup Iteration  28: 7686681.569 ops/s
# Warmup Iteration  29: 7630468.926 ops/s
# Warmup Iteration  30: 7541336.266 ops/s
Iteration   1: 7666519.240 ops/s
Iteration   2: 7707592.810 ops/s
Iteration   3: 7618538.037 ops/s
Iteration   4: 7821977.079 ops/s
Iteration   5: 7846896.329 ops/s
Iteration   6: 7770530.518 ops/s
Iteration   7: 7758516.211 ops/s
Iteration   8: 7837717.551 ops/s
Iteration   9: 7747137.444 ops/s
Iteration  10: 7601673.371 ops/s
Iteration  11: 7728827.303 ops/s
Iteration  12: 7890504.345 ops/s
Iteration  13: 7801485.787 ops/s
Iteration  14: 7593137.281 ops/s
Iteration  15: 7497504.346 ops/s
Iteration  16: 7561753.923 ops/s
Iteration  17: 7502894.798 ops/s
Iteration  18: 7779298.234 ops/s
Iteration  19: 7555367.634 ops/s
Iteration  20: 7487132.853 ops/s
Iteration  21: 7401943.926 ops/s
Iteration  22: 7514133.232 ops/s
Iteration  23: 7487480.564 ops/s
Iteration  24: 7714692.583 ops/s
Iteration  25: 7650465.504 ops/s
Iteration  26: 7657727.671 ops/s
Iteration  27: 7551571.719 ops/s
Iteration  28: 7574583.055 ops/s
Iteration  29: 7784455.560 ops/s
Iteration  30: 7971773.629 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_summarizeInt":
  7669461.085 ±(99.9%) 94292.568 ops/s [Average]
  (min, avg, max) = (7401943.926, 7669461.085, 7971773.629), stdev = 141132.687
  CI (99.9%): [7575168.517, 7763753.652] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_summarizeInt  thrpt   30  7669461.085 ± 94292.568  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_summarizeLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_summarizeLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3314480.608 ops/s
# Warmup Iteration   2: 7610016.714 ops/s
# Warmup Iteration   3: 7778952.838 ops/s
# Warmup Iteration   4: 6498465.636 ops/s
# Warmup Iteration   5: 7793034.852 ops/s
# Warmup Iteration   6: 7785968.942 ops/s
# Warmup Iteration   7: 7789648.355 ops/s
# Warmup Iteration   8: 7735174.817 ops/s
# Warmup Iteration   9: 7418224.156 ops/s
# Warmup Iteration  10: 7482825.804 ops/s
# Warmup Iteration  11: 7344232.067 ops/s
# Warmup Iteration  12: 7241095.642 ops/s
# Warmup Iteration  13: 7359915.388 ops/s
# Warmup Iteration  14: 7400036.754 ops/s
# Warmup Iteration  15: 7221508.853 ops/s
# Warmup Iteration  16: 7341023.894 ops/s
# Warmup Iteration  17: 7244346.701 ops/s
# Warmup Iteration  18: 7250507.495 ops/s
# Warmup Iteration  19: 7385286.696 ops/s
# Warmup Iteration  20: 7283502.764 ops/s
# Warmup Iteration  21: 7329422.945 ops/s
# Warmup Iteration  22: 7408437.623 ops/s
# Warmup Iteration  23: 7218420.750 ops/s
# Warmup Iteration  24: 7441914.301 ops/s
# Warmup Iteration  25: 7202946.364 ops/s
# Warmup Iteration  26: 7372049.609 ops/s
# Warmup Iteration  27: 7411328.196 ops/s
# Warmup Iteration  28: 7490540.196 ops/s
# Warmup Iteration  29: 7268768.272 ops/s
# Warmup Iteration  30: 7347889.984 ops/s
Iteration   1: 7243405.211 ops/s
Iteration   2: 7259018.521 ops/s
Iteration   3: 7287522.426 ops/s
Iteration   4: 7175545.206 ops/s
Iteration   5: 7125142.461 ops/s
Iteration   6: 7353574.959 ops/s
Iteration   7: 7280760.287 ops/s
Iteration   8: 7414622.613 ops/s
Iteration   9: 7337525.885 ops/s
Iteration  10: 7237293.026 ops/s
Iteration  11: 7344369.947 ops/s
Iteration  12: 7371986.865 ops/s
Iteration  13: 7292706.965 ops/s
Iteration  14: 7226741.792 ops/s
Iteration  15: 7186858.474 ops/s
Iteration  16: 7193629.556 ops/s
Iteration  17: 7312018.724 ops/s
Iteration  18: 7274526.144 ops/s
Iteration  19: 7324325.007 ops/s
Iteration  20: 7248458.605 ops/s
Iteration  21: 7257886.155 ops/s
Iteration  22: 7159073.647 ops/s
Iteration  23: 7354594.147 ops/s
Iteration  24: 7325168.995 ops/s
Iteration  25: 7263239.128 ops/s
Iteration  26: 7236446.252 ops/s
Iteration  27: 7195490.231 ops/s
Iteration  28: 7294465.552 ops/s
Iteration  29: 7381194.001 ops/s
Iteration  30: 7240328.175 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_summarizeLong":
  7273263.965 ±(99.9%) 47054.896 ops/s [Average]
  (min, avg, max) = (7125142.461, 7273263.965, 7414622.613), stdev = 70429.559
  CI (99.9%): [7226209.069, 7320318.861] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_summarizeLong  thrpt   30  7273263.965 ± 47054.896  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2124951.171 ops/s
# Warmup Iteration   2: 4962831.710 ops/s
# Warmup Iteration   3: 5116320.687 ops/s
# Warmup Iteration   4: 4451415.579 ops/s
# Warmup Iteration   5: 5124856.042 ops/s
# Warmup Iteration   6: 5182676.021 ops/s
# Warmup Iteration   7: 5114621.722 ops/s
# Warmup Iteration   8: 5333392.294 ops/s
# Warmup Iteration   9: 5043677.441 ops/s
# Warmup Iteration  10: 5178179.215 ops/s
# Warmup Iteration  11: 5283115.004 ops/s
# Warmup Iteration  12: 5334829.766 ops/s
# Warmup Iteration  13: 5138451.884 ops/s
# Warmup Iteration  14: 5302935.129 ops/s
# Warmup Iteration  15: 5448685.173 ops/s
# Warmup Iteration  16: 5461714.517 ops/s
# Warmup Iteration  17: 5459010.097 ops/s
# Warmup Iteration  18: 5448855.657 ops/s
# Warmup Iteration  19: 5456408.745 ops/s
# Warmup Iteration  20: 5455945.822 ops/s
# Warmup Iteration  21: 5444330.351 ops/s
# Warmup Iteration  22: 5457687.218 ops/s
# Warmup Iteration  23: 5166949.674 ops/s
# Warmup Iteration  24: 5179477.517 ops/s
# Warmup Iteration  25: 5087049.865 ops/s
# Warmup Iteration  26: 4999015.657 ops/s
# Warmup Iteration  27: 5102685.325 ops/s
# Warmup Iteration  28: 5046913.288 ops/s
# Warmup Iteration  29: 5065929.381 ops/s
# Warmup Iteration  30: 5095594.403 ops/s
Iteration   1: 5104036.677 ops/s
Iteration   2: 4975324.223 ops/s
Iteration   3: 5096458.711 ops/s
Iteration   4: 5079604.196 ops/s
Iteration   5: 5104054.497 ops/s
Iteration   6: 5118806.279 ops/s
Iteration   7: 5033590.168 ops/s
Iteration   8: 5085918.134 ops/s
Iteration   9: 5148795.323 ops/s
Iteration  10: 5086552.737 ops/s
Iteration  11: 5038294.086 ops/s
Iteration  12: 5013607.033 ops/s
Iteration  13: 5106274.133 ops/s
Iteration  14: 5123455.289 ops/s
Iteration  15: 5200692.783 ops/s
Iteration  16: 5130398.211 ops/s
Iteration  17: 5186878.896 ops/s
Iteration  18: 5126651.684 ops/s
Iteration  19: 5198494.266 ops/s
Iteration  20: 5147883.899 ops/s
Iteration  21: 5091888.867 ops/s
Iteration  22: 5036812.829 ops/s
Iteration  23: 5005808.838 ops/s
Iteration  24: 5186536.216 ops/s
Iteration  25: 5210877.337 ops/s
Iteration  26: 5057090.300 ops/s
Iteration  27: 5064405.242 ops/s
Iteration  28: 5088079.010 ops/s
Iteration  29: 5095157.565 ops/s
Iteration  30: 5117254.528 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_tap":
  5101989.399 ±(99.9%) 39792.151 ops/s [Average]
  (min, avg, max) = (4975324.223, 5101989.399, 5210877.337), stdev = 59559.022
  CI (99.9%): [5062197.248, 5141781.549] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_tap  thrpt   30  5101989.399 ± 39792.151  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_testNewCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_testNewCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9277663.257 ops/s
# Warmup Iteration   2: 15150381.060 ops/s
# Warmup Iteration   3: 17627613.730 ops/s
# Warmup Iteration   4: 17561787.909 ops/s
# Warmup Iteration   5: 17970855.672 ops/s
# Warmup Iteration   6: 17842548.943 ops/s
# Warmup Iteration   7: 17731643.115 ops/s
# Warmup Iteration   8: 17614209.274 ops/s
# Warmup Iteration   9: 17841986.376 ops/s
# Warmup Iteration  10: 17600979.080 ops/s
# Warmup Iteration  11: 17709167.047 ops/s
# Warmup Iteration  12: 17561838.300 ops/s
# Warmup Iteration  13: 17587257.770 ops/s
# Warmup Iteration  14: 17419216.442 ops/s
# Warmup Iteration  15: 17647738.157 ops/s
# Warmup Iteration  16: 17628070.665 ops/s
# Warmup Iteration  17: 17725075.869 ops/s
# Warmup Iteration  18: 17730091.637 ops/s
# Warmup Iteration  19: 17626463.279 ops/s
# Warmup Iteration  20: 17627769.630 ops/s
# Warmup Iteration  21: 17403999.508 ops/s
# Warmup Iteration  22: 17448210.821 ops/s
# Warmup Iteration  23: 17540088.180 ops/s
# Warmup Iteration  24: 17452867.142 ops/s
# Warmup Iteration  25: 17732695.568 ops/s
# Warmup Iteration  26: 17529644.476 ops/s
# Warmup Iteration  27: 17877052.573 ops/s
# Warmup Iteration  28: 17874929.846 ops/s
# Warmup Iteration  29: 18396905.628 ops/s
# Warmup Iteration  30: 18285066.228 ops/s
Iteration   1: 18372089.895 ops/s
Iteration   2: 18110803.388 ops/s
Iteration   3: 18286707.994 ops/s
Iteration   4: 18468914.641 ops/s
Iteration   5: 18483414.666 ops/s
Iteration   6: 18382294.536 ops/s
Iteration   7: 18417749.427 ops/s
Iteration   8: 18266927.215 ops/s
Iteration   9: 18238767.726 ops/s
Iteration  10: 18469929.436 ops/s
Iteration  11: 18371892.664 ops/s
Iteration  12: 18256081.387 ops/s
Iteration  13: 18469314.562 ops/s
Iteration  14: 17453635.479 ops/s
Iteration  15: 17133786.623 ops/s
Iteration  16: 17311822.088 ops/s
Iteration  17: 17301664.809 ops/s
Iteration  18: 17126570.743 ops/s
Iteration  19: 16921920.569 ops/s
Iteration  20: 17075122.691 ops/s
Iteration  21: 17192286.829 ops/s
Iteration  22: 17424659.280 ops/s
Iteration  23: 17169490.262 ops/s
Iteration  24: 17352157.254 ops/s
Iteration  25: 17448454.623 ops/s
Iteration  26: 17240206.366 ops/s
Iteration  27: 17155473.459 ops/s
Iteration  28: 17625697.407 ops/s
Iteration  29: 17336494.795 ops/s
Iteration  30: 17273182.126 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_testNewCollection":
  17737917.098 ±(99.9%) 378482.774 ops/s [Average]
  (min, avg, max) = (16921920.569, 17737917.098, 18483414.666), stdev = 566495.241
  CI (99.9%): [17359434.324, 18116399.872] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_testNewCollection  thrpt   30  17737917.098 ± 378482.774  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_testNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_testNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2834863.025 ops/s
# Warmup Iteration   2: 6367615.538 ops/s
# Warmup Iteration   3: 5269687.339 ops/s
# Warmup Iteration   4: 6355776.848 ops/s
# Warmup Iteration   5: 6468638.328 ops/s
# Warmup Iteration   6: 6468476.542 ops/s
# Warmup Iteration   7: 6589351.974 ops/s
# Warmup Iteration   8: 6376842.517 ops/s
# Warmup Iteration   9: 6392481.721 ops/s
# Warmup Iteration  10: 6423080.740 ops/s
# Warmup Iteration  11: 6363656.288 ops/s
# Warmup Iteration  12: 6523288.848 ops/s
# Warmup Iteration  13: 6474458.180 ops/s
# Warmup Iteration  14: 6323276.905 ops/s
# Warmup Iteration  15: 6464429.542 ops/s
# Warmup Iteration  16: 6500758.735 ops/s
# Warmup Iteration  17: 6365188.253 ops/s
# Warmup Iteration  18: 6342101.724 ops/s
# Warmup Iteration  19: 6482591.093 ops/s
# Warmup Iteration  20: 6438884.198 ops/s
# Warmup Iteration  21: 6401918.726 ops/s
# Warmup Iteration  22: 6395745.055 ops/s
# Warmup Iteration  23: 6425234.321 ops/s
# Warmup Iteration  24: 6308815.567 ops/s
# Warmup Iteration  25: 6355386.869 ops/s
# Warmup Iteration  26: 6321778.602 ops/s
# Warmup Iteration  27: 6398636.781 ops/s
# Warmup Iteration  28: 6377657.417 ops/s
# Warmup Iteration  29: 6455142.854 ops/s
# Warmup Iteration  30: 6379086.671 ops/s
Iteration   1: 6333287.821 ops/s
Iteration   2: 6369897.002 ops/s
Iteration   3: 6428361.870 ops/s
Iteration   4: 6327455.214 ops/s
Iteration   5: 6299092.641 ops/s
Iteration   6: 6347900.578 ops/s
Iteration   7: 6328505.985 ops/s
Iteration   8: 6526432.605 ops/s
Iteration   9: 6545785.965 ops/s
Iteration  10: 6564224.591 ops/s
Iteration  11: 6564817.531 ops/s
Iteration  12: 6385695.324 ops/s
Iteration  13: 6440640.737 ops/s
Iteration  14: 6261886.281 ops/s
Iteration  15: 6366429.031 ops/s
Iteration  16: 6373247.437 ops/s
Iteration  17: 6321576.465 ops/s
Iteration  18: 6269368.966 ops/s
Iteration  19: 6393787.922 ops/s
Iteration  20: 6504983.208 ops/s
Iteration  21: 6513982.862 ops/s
Iteration  22: 6505775.803 ops/s
Iteration  23: 6457259.778 ops/s
Iteration  24: 6608259.259 ops/s
Iteration  25: 6589470.376 ops/s
Iteration  26: 6769424.966 ops/s
Iteration  27: 6739561.481 ops/s
Iteration  28: 6772048.225 ops/s
Iteration  29: 6764387.504 ops/s
Iteration  30: 6763273.271 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_testNewWith":
  6481227.357 ±(99.9%) 106839.767 ops/s [Average]
  (min, avg, max) = (6261886.281, 6481227.357, 6772048.225), stdev = 159912.746
  CI (99.9%): [6374387.590, 6588067.124] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_testNewWith  thrpt   30  6481227.357 ± 106839.767  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_testNewWithVarArgs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_testNewWithVarArgs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2157707.537 ops/s
# Warmup Iteration   2: 4652744.025 ops/s
# Warmup Iteration   3: 3950789.655 ops/s
# Warmup Iteration   4: 4703088.051 ops/s
# Warmup Iteration   5: 4707708.876 ops/s
# Warmup Iteration   6: 4523845.450 ops/s
# Warmup Iteration   7: 4491326.105 ops/s
# Warmup Iteration   8: 4440209.128 ops/s
# Warmup Iteration   9: 4447572.615 ops/s
# Warmup Iteration  10: 4499178.697 ops/s
# Warmup Iteration  11: 4433114.090 ops/s
# Warmup Iteration  12: 4402595.755 ops/s
# Warmup Iteration  13: 4484926.916 ops/s
# Warmup Iteration  14: 4441093.716 ops/s
# Warmup Iteration  15: 4436526.659 ops/s
# Warmup Iteration  16: 4396419.013 ops/s
# Warmup Iteration  17: 4405088.974 ops/s
# Warmup Iteration  18: 4492049.218 ops/s
# Warmup Iteration  19: 4446444.554 ops/s
# Warmup Iteration  20: 4521923.346 ops/s
# Warmup Iteration  21: 4453330.139 ops/s
# Warmup Iteration  22: 4390806.650 ops/s
# Warmup Iteration  23: 4444840.247 ops/s
# Warmup Iteration  24: 4435514.112 ops/s
# Warmup Iteration  25: 4485801.733 ops/s
# Warmup Iteration  26: 4441046.236 ops/s
# Warmup Iteration  27: 4504118.986 ops/s
# Warmup Iteration  28: 4460650.821 ops/s
# Warmup Iteration  29: 4551010.713 ops/s
# Warmup Iteration  30: 4495974.355 ops/s
Iteration   1: 4441010.790 ops/s
Iteration   2: 4343944.138 ops/s
Iteration   3: 4363692.163 ops/s
Iteration   4: 4352964.848 ops/s
Iteration   5: 4438078.921 ops/s
Iteration   6: 4419065.724 ops/s
Iteration   7: 4393757.110 ops/s
Iteration   8: 4425130.938 ops/s
Iteration   9: 4374056.470 ops/s
Iteration  10: 4385994.035 ops/s
Iteration  11: 4465849.632 ops/s
Iteration  12: 4400776.381 ops/s
Iteration  13: 4416404.199 ops/s
Iteration  14: 4388039.834 ops/s
Iteration  15: 4433957.593 ops/s
Iteration  16: 4407816.641 ops/s
Iteration  17: 4432852.473 ops/s
Iteration  18: 4511789.231 ops/s
Iteration  19: 4510317.331 ops/s
Iteration  20: 4361256.190 ops/s
Iteration  21: 4322713.753 ops/s
Iteration  22: 4462902.999 ops/s
Iteration  23: 4565205.706 ops/s
Iteration  24: 4514661.040 ops/s
Iteration  25: 4584230.163 ops/s
Iteration  26: 4599809.531 ops/s
Iteration  27: 4595278.459 ops/s
Iteration  28: 4388171.710 ops/s
Iteration  29: 4346096.167 ops/s
Iteration  30: 4517531.972 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_testNewWithVarArgs":
  4438778.538 ±(99.9%) 52494.875 ops/s [Average]
  (min, avg, max) = (4322713.753, 4438778.538, 4599809.531), stdev = 78571.863
  CI (99.9%): [4386283.663, 4491273.413] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_testNewWithVarArgs  thrpt   30  4438778.538 ± 52494.875  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_testNewWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_testNewWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2338783.679 ops/s
# Warmup Iteration   2: 5220245.848 ops/s
# Warmup Iteration   3: 4406666.758 ops/s
# Warmup Iteration   4: 5111368.572 ops/s
# Warmup Iteration   5: 5181076.508 ops/s
# Warmup Iteration   6: 5215200.840 ops/s
# Warmup Iteration   7: 5169983.098 ops/s
# Warmup Iteration   8: 5134895.530 ops/s
# Warmup Iteration   9: 5148232.277 ops/s
# Warmup Iteration  10: 5175522.521 ops/s
# Warmup Iteration  11: 5238668.455 ops/s
# Warmup Iteration  12: 5430201.951 ops/s
# Warmup Iteration  13: 5445774.456 ops/s
# Warmup Iteration  14: 5448379.998 ops/s
# Warmup Iteration  15: 5449555.250 ops/s
# Warmup Iteration  16: 5450179.922 ops/s
# Warmup Iteration  17: 5457657.672 ops/s
# Warmup Iteration  18: 5447671.087 ops/s
# Warmup Iteration  19: 5444954.693 ops/s
# Warmup Iteration  20: 5408639.188 ops/s
# Warmup Iteration  21: 5126525.676 ops/s
# Warmup Iteration  22: 5192894.317 ops/s
# Warmup Iteration  23: 5069827.330 ops/s
# Warmup Iteration  24: 5139310.685 ops/s
# Warmup Iteration  25: 5194313.690 ops/s
# Warmup Iteration  26: 5266245.691 ops/s
# Warmup Iteration  27: 5296847.244 ops/s
# Warmup Iteration  28: 5288832.044 ops/s
# Warmup Iteration  29: 5165616.543 ops/s
# Warmup Iteration  30: 5285845.239 ops/s
Iteration   1: 5193740.496 ops/s
Iteration   2: 5158991.918 ops/s
Iteration   3: 5060202.025 ops/s
Iteration   4: 5170555.210 ops/s
Iteration   5: 5196289.918 ops/s
Iteration   6: 5312169.742 ops/s
Iteration   7: 5364926.269 ops/s
Iteration   8: 5300884.834 ops/s
Iteration   9: 5266416.909 ops/s
Iteration  10: 5338942.327 ops/s
Iteration  11: 5339564.502 ops/s
Iteration  12: 5313847.963 ops/s
Iteration  13: 5198452.497 ops/s
Iteration  14: 5135349.541 ops/s
Iteration  15: 5156975.631 ops/s
Iteration  16: 5119619.207 ops/s
Iteration  17: 5294804.753 ops/s
Iteration  18: 5254417.194 ops/s
Iteration  19: 5246589.488 ops/s
Iteration  20: 5290732.710 ops/s
Iteration  21: 5077393.979 ops/s
Iteration  22: 5118087.033 ops/s
Iteration  23: 5287316.151 ops/s
Iteration  24: 5074271.997 ops/s
Iteration  25: 5127703.055 ops/s
Iteration  26: 5146115.536 ops/s
Iteration  27: 5057674.062 ops/s
Iteration  28: 5098245.083 ops/s
Iteration  29: 5209725.598 ops/s
Iteration  30: 5248166.171 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_testNewWithWith":
  5205272.393 ±(99.9%) 61859.177 ops/s [Average]
  (min, avg, max) = (5057674.062, 5205272.393, 5364926.269), stdev = 92587.911
  CI (99.9%): [5143413.216, 5267131.570] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_testNewWithWith  thrpt   30  5205272.393 ± 61859.177  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_testNewWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_testNewWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1989016.505 ops/s
# Warmup Iteration   2: 4496865.503 ops/s
# Warmup Iteration   3: 3644042.254 ops/s
# Warmup Iteration   4: 4415078.704 ops/s
# Warmup Iteration   5: 4408038.755 ops/s
# Warmup Iteration   6: 4420959.356 ops/s
# Warmup Iteration   7: 4433711.813 ops/s
# Warmup Iteration   8: 4472693.361 ops/s
# Warmup Iteration   9: 4473431.368 ops/s
# Warmup Iteration  10: 4537412.276 ops/s
# Warmup Iteration  11: 4511990.141 ops/s
# Warmup Iteration  12: 4398098.289 ops/s
# Warmup Iteration  13: 4478659.232 ops/s
# Warmup Iteration  14: 4625834.059 ops/s
# Warmup Iteration  15: 4514028.785 ops/s
# Warmup Iteration  16: 4448935.580 ops/s
# Warmup Iteration  17: 4602308.694 ops/s
# Warmup Iteration  18: 4570179.435 ops/s
# Warmup Iteration  19: 4524496.741 ops/s
# Warmup Iteration  20: 4455594.411 ops/s
# Warmup Iteration  21: 4480466.001 ops/s
# Warmup Iteration  22: 4508680.155 ops/s
# Warmup Iteration  23: 4554622.717 ops/s
# Warmup Iteration  24: 4713218.805 ops/s
# Warmup Iteration  25: 4676786.443 ops/s
# Warmup Iteration  26: 4580683.642 ops/s
# Warmup Iteration  27: 4715171.920 ops/s
# Warmup Iteration  28: 4720173.613 ops/s
# Warmup Iteration  29: 4709700.333 ops/s
# Warmup Iteration  30: 4707589.345 ops/s
Iteration   1: 4709292.508 ops/s
Iteration   2: 4731211.395 ops/s
Iteration   3: 4725115.784 ops/s
Iteration   4: 4728081.174 ops/s
Iteration   5: 4711585.647 ops/s
Iteration   6: 4715973.760 ops/s
Iteration   7: 4729559.790 ops/s
Iteration   8: 4712568.784 ops/s
Iteration   9: 4634586.702 ops/s
Iteration  10: 4387479.171 ops/s
Iteration  11: 4480146.908 ops/s
Iteration  12: 4570194.222 ops/s
Iteration  13: 4581967.416 ops/s
Iteration  14: 4497634.844 ops/s
Iteration  15: 4497762.117 ops/s
Iteration  16: 4632746.050 ops/s
Iteration  17: 4415962.728 ops/s
Iteration  18: 4384950.016 ops/s
Iteration  19: 4372843.585 ops/s
Iteration  20: 4370218.788 ops/s
Iteration  21: 4398166.745 ops/s
Iteration  22: 4476250.274 ops/s
Iteration  23: 4403535.633 ops/s
Iteration  24: 4377563.202 ops/s
Iteration  25: 4447085.059 ops/s
Iteration  26: 4352077.580 ops/s
Iteration  27: 4488521.551 ops/s
Iteration  28: 4566411.352 ops/s
Iteration  29: 4382739.348 ops/s
Iteration  30: 4472307.937 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_testNewWithWithWith":
  4531818.002 ±(99.9%) 92144.195 ops/s [Average]
  (min, avg, max) = (4352077.580, 4531818.002, 4731211.395), stdev = 137917.103
  CI (99.9%): [4439673.808, 4623962.197] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_testNewWithWithWith  thrpt   30  4531818.002 ± 92144.195  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2054319.908 ops/s
# Warmup Iteration   2: 4822337.985 ops/s
# Warmup Iteration   3: 4961838.333 ops/s
# Warmup Iteration   4: 4178739.596 ops/s
# Warmup Iteration   5: 4740851.653 ops/s
# Warmup Iteration   6: 4843646.675 ops/s
# Warmup Iteration   7: 4770502.747 ops/s
# Warmup Iteration   8: 4700994.783 ops/s
# Warmup Iteration   9: 4769202.484 ops/s
# Warmup Iteration  10: 4915121.022 ops/s
# Warmup Iteration  11: 4736884.349 ops/s
# Warmup Iteration  12: 4745701.725 ops/s
# Warmup Iteration  13: 4678218.902 ops/s
# Warmup Iteration  14: 4878192.766 ops/s
# Warmup Iteration  15: 4943727.467 ops/s
# Warmup Iteration  16: 4885066.264 ops/s
# Warmup Iteration  17: 4762767.247 ops/s
# Warmup Iteration  18: 4749309.630 ops/s
# Warmup Iteration  19: 4829552.440 ops/s
# Warmup Iteration  20: 4923259.668 ops/s
# Warmup Iteration  21: 4964357.526 ops/s
# Warmup Iteration  22: 4770697.684 ops/s
# Warmup Iteration  23: 4787504.675 ops/s
# Warmup Iteration  24: 4677275.089 ops/s
# Warmup Iteration  25: 4804825.731 ops/s
# Warmup Iteration  26: 4746353.862 ops/s
# Warmup Iteration  27: 4843912.657 ops/s
# Warmup Iteration  28: 5028784.091 ops/s
# Warmup Iteration  29: 4957593.921 ops/s
# Warmup Iteration  30: 4741027.330 ops/s
Iteration   1: 4681656.636 ops/s
Iteration   2: 4734716.645 ops/s
Iteration   3: 4706565.150 ops/s
Iteration   4: 4705515.690 ops/s
Iteration   5: 4620322.190 ops/s
Iteration   6: 4669710.440 ops/s
Iteration   7: 4660938.224 ops/s
Iteration   8: 4655535.926 ops/s
Iteration   9: 4721414.495 ops/s
Iteration  10: 4682696.168 ops/s
Iteration  11: 4712503.514 ops/s
Iteration  12: 4705767.719 ops/s
Iteration  13: 4678105.959 ops/s
Iteration  14: 4752228.857 ops/s
Iteration  15: 4687301.016 ops/s
Iteration  16: 4611571.710 ops/s
Iteration  17: 4750472.834 ops/s
Iteration  18: 4613600.271 ops/s
Iteration  19: 4819344.655 ops/s
Iteration  20: 5003850.632 ops/s
Iteration  21: 4859149.087 ops/s
Iteration  22: 5022174.840 ops/s
Iteration  23: 5021924.735 ops/s
Iteration  24: 5018867.409 ops/s
Iteration  25: 5023330.836 ops/s
Iteration  26: 5018910.363 ops/s
Iteration  27: 5017736.882 ops/s
Iteration  28: 5016239.238 ops/s
Iteration  29: 5021830.167 ops/s
Iteration  30: 5026472.081 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_testToString":
  4807348.479 ±(99.9%) 107242.794 ops/s [Average]
  (min, avg, max) = (4611571.710, 4807348.479, 5026472.081), stdev = 160515.978
  CI (99.9%): [4700105.685, 4914591.273] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_testToString  thrpt   30  4807348.479 ± 107242.794  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2091617.219 ops/s
# Warmup Iteration   2: 4791329.224 ops/s
# Warmup Iteration   3: 4863538.465 ops/s
# Warmup Iteration   4: 3950481.472 ops/s
# Warmup Iteration   5: 4620171.845 ops/s
# Warmup Iteration   6: 4640310.993 ops/s
# Warmup Iteration   7: 4602264.567 ops/s
# Warmup Iteration   8: 4695157.496 ops/s
# Warmup Iteration   9: 4810140.275 ops/s
# Warmup Iteration  10: 4546714.059 ops/s
# Warmup Iteration  11: 4555964.874 ops/s
# Warmup Iteration  12: 4604320.881 ops/s
# Warmup Iteration  13: 4535978.799 ops/s
# Warmup Iteration  14: 4633893.908 ops/s
# Warmup Iteration  15: 4572495.800 ops/s
# Warmup Iteration  16: 4545885.920 ops/s
# Warmup Iteration  17: 4707774.870 ops/s
# Warmup Iteration  18: 4620827.186 ops/s
# Warmup Iteration  19: 4542776.272 ops/s
# Warmup Iteration  20: 4681091.878 ops/s
# Warmup Iteration  21: 4528888.546 ops/s
# Warmup Iteration  22: 4560794.728 ops/s
# Warmup Iteration  23: 4683328.793 ops/s
# Warmup Iteration  24: 4548209.994 ops/s
# Warmup Iteration  25: 4545075.932 ops/s
# Warmup Iteration  26: 4630301.314 ops/s
# Warmup Iteration  27: 4583046.282 ops/s
# Warmup Iteration  28: 4548724.688 ops/s
# Warmup Iteration  29: 4568978.358 ops/s
# Warmup Iteration  30: 4585422.901 ops/s
Iteration   1: 4562102.093 ops/s
Iteration   2: 4689533.611 ops/s
Iteration   3: 4812365.838 ops/s
Iteration   4: 4818273.174 ops/s
Iteration   5: 4777672.713 ops/s
Iteration   6: 4559269.632 ops/s
Iteration   7: 4864278.102 ops/s
Iteration   8: 4845351.753 ops/s
Iteration   9: 4845978.660 ops/s
Iteration  10: 4605698.544 ops/s
Iteration  11: 4720641.316 ops/s
Iteration  12: 4705017.508 ops/s
Iteration  13: 4753795.253 ops/s
Iteration  14: 4577623.593 ops/s
Iteration  15: 4650159.262 ops/s
Iteration  16: 4864983.610 ops/s
Iteration  17: 4813140.612 ops/s
Iteration  18: 4873270.130 ops/s
Iteration  19: 4798629.708 ops/s
Iteration  20: 4818110.612 ops/s
Iteration  21: 4617542.445 ops/s
Iteration  22: 4576603.796 ops/s
Iteration  23: 4518233.884 ops/s
Iteration  24: 4584828.353 ops/s
Iteration  25: 4677114.747 ops/s
Iteration  26: 4562918.117 ops/s
Iteration  27: 4476822.828 ops/s
Iteration  28: 4565771.927 ops/s
Iteration  29: 4659500.455 ops/s
Iteration  30: 4626564.520 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toArray":
  4694059.893 ±(99.9%) 80963.073 ops/s [Average]
  (min, avg, max) = (4476822.828, 4694059.893, 4873270.130), stdev = 121181.726
  CI (99.9%): [4613096.820, 4775022.966] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toArray  thrpt   30  4694059.893 ± 80963.073  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 929937.854 ops/s
# Warmup Iteration   2: 1652914.006 ops/s
# Warmup Iteration   3: 1914625.762 ops/s
# Warmup Iteration   4: 1907497.318 ops/s
# Warmup Iteration   5: 1928198.402 ops/s
# Warmup Iteration   6: 1549276.162 ops/s
# Warmup Iteration   7: 1942433.974 ops/s
# Warmup Iteration   8: 1934264.837 ops/s
# Warmup Iteration   9: 1912755.698 ops/s
# Warmup Iteration  10: 2035658.644 ops/s
# Warmup Iteration  11: 2045649.091 ops/s
# Warmup Iteration  12: 2044462.871 ops/s
# Warmup Iteration  13: 2044025.523 ops/s
# Warmup Iteration  14: 2044883.703 ops/s
# Warmup Iteration  15: 2044215.570 ops/s
# Warmup Iteration  16: 2043090.855 ops/s
# Warmup Iteration  17: 2043909.099 ops/s
# Warmup Iteration  18: 2014421.285 ops/s
# Warmup Iteration  19: 1917264.977 ops/s
# Warmup Iteration  20: 1905643.889 ops/s
# Warmup Iteration  21: 1924202.267 ops/s
# Warmup Iteration  22: 1894157.958 ops/s
# Warmup Iteration  23: 1996777.136 ops/s
# Warmup Iteration  24: 1905414.516 ops/s
# Warmup Iteration  25: 1954022.143 ops/s
# Warmup Iteration  26: 1901150.792 ops/s
# Warmup Iteration  27: 2016949.973 ops/s
# Warmup Iteration  28: 1997784.946 ops/s
# Warmup Iteration  29: 1950340.918 ops/s
# Warmup Iteration  30: 1999727.446 ops/s
Iteration   1: 2041602.535 ops/s
Iteration   2: 2046526.458 ops/s
Iteration   3: 2045845.494 ops/s
Iteration   4: 2038083.143 ops/s
Iteration   5: 2043667.548 ops/s
Iteration   6: 2045276.085 ops/s
Iteration   7: 2043881.658 ops/s
Iteration   8: 2046069.418 ops/s
Iteration   9: 2041280.569 ops/s
Iteration  10: 2043104.352 ops/s
Iteration  11: 2050153.677 ops/s
Iteration  12: 2044909.709 ops/s
Iteration  13: 2044926.317 ops/s
Iteration  14: 2047604.624 ops/s
Iteration  15: 2043104.816 ops/s
Iteration  16: 2043781.112 ops/s
Iteration  17: 2047395.908 ops/s
Iteration  18: 2040130.745 ops/s
Iteration  19: 2047322.592 ops/s
Iteration  20: 2045377.830 ops/s
Iteration  21: 2044060.558 ops/s
Iteration  22: 2010832.901 ops/s
Iteration  23: 2007392.341 ops/s
Iteration  24: 2001142.989 ops/s
Iteration  25: 2012400.453 ops/s
Iteration  26: 2014351.358 ops/s
Iteration  27: 2009524.340 ops/s
Iteration  28: 2007954.553 ops/s
Iteration  29: 2039673.564 ops/s
Iteration  30: 2044510.133 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toBag":
  2036062.926 ±(99.9%) 10327.287 ops/s [Average]
  (min, avg, max) = (2001142.989, 2036062.926, 2050153.677), stdev = 15457.398
  CI (99.9%): [2025735.639, 2046390.213] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toBag  thrpt   30  2036062.926 ± 10327.287  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 102632.518 ops/s
# Warmup Iteration   2: 134851.622 ops/s
# Warmup Iteration   3: 167454.919 ops/s
# Warmup Iteration   4: 169000.049 ops/s
# Warmup Iteration   5: 171508.592 ops/s
# Warmup Iteration   6: 168108.567 ops/s
# Warmup Iteration   7: 172105.552 ops/s
# Warmup Iteration   8: 139231.757 ops/s
# Warmup Iteration   9: 171734.856 ops/s
# Warmup Iteration  10: 172732.753 ops/s
# Warmup Iteration  11: 170398.550 ops/s
# Warmup Iteration  12: 174874.441 ops/s
# Warmup Iteration  13: 170125.491 ops/s
# Warmup Iteration  14: 165431.949 ops/s
# Warmup Iteration  15: 173312.625 ops/s
# Warmup Iteration  16: 178234.204 ops/s
# Warmup Iteration  17: 177317.852 ops/s
# Warmup Iteration  18: 170882.796 ops/s
# Warmup Iteration  19: 178934.810 ops/s
# Warmup Iteration  20: 184568.421 ops/s
# Warmup Iteration  21: 176625.345 ops/s
# Warmup Iteration  22: 176652.673 ops/s
# Warmup Iteration  23: 178069.038 ops/s
# Warmup Iteration  24: 179594.103 ops/s
# Warmup Iteration  25: 185558.938 ops/s
# Warmup Iteration  26: 185303.982 ops/s
# Warmup Iteration  27: 185357.664 ops/s
# Warmup Iteration  28: 185696.600 ops/s
# Warmup Iteration  29: 185627.361 ops/s
# Warmup Iteration  30: 185276.358 ops/s
Iteration   1: 185047.468 ops/s
Iteration   2: 185093.810 ops/s
Iteration   3: 185467.713 ops/s
Iteration   4: 184944.062 ops/s
Iteration   5: 178723.756 ops/s
Iteration   6: 174871.930 ops/s
Iteration   7: 171612.957 ops/s
Iteration   8: 182810.110 ops/s
Iteration   9: 179093.388 ops/s
Iteration  10: 184355.518 ops/s
Iteration  11: 184399.955 ops/s
Iteration  12: 177222.957 ops/s
Iteration  13: 175818.453 ops/s
Iteration  14: 172397.052 ops/s
Iteration  15: 176433.437 ops/s
Iteration  16: 174621.589 ops/s
Iteration  17: 175505.949 ops/s
Iteration  18: 173522.060 ops/s
Iteration  19: 170778.447 ops/s
Iteration  20: 173647.057 ops/s
Iteration  21: 179320.095 ops/s
Iteration  22: 181179.042 ops/s
Iteration  23: 185744.402 ops/s
Iteration  24: 184837.746 ops/s
Iteration  25: 184556.925 ops/s
Iteration  26: 170066.745 ops/s
Iteration  27: 175682.813 ops/s
Iteration  28: 176269.658 ops/s
Iteration  29: 177965.372 ops/s
Iteration  30: 172200.843 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toBiMap":
  178473.044 ±(99.9%) 3439.432 ops/s [Average]
  (min, avg, max) = (170066.745, 178473.044, 185744.402), stdev = 5147.980
  CI (99.9%): [175033.612, 181912.476] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toBiMap  thrpt   30  178473.044 ± 3439.432  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1600878.924 ops/s
# Warmup Iteration   2: 3806043.299 ops/s
# Warmup Iteration   3: 4036036.376 ops/s
# Warmup Iteration   4: 3290452.459 ops/s
# Warmup Iteration   5: 3918977.991 ops/s
# Warmup Iteration   6: 3867070.641 ops/s
# Warmup Iteration   7: 3837130.933 ops/s
# Warmup Iteration   8: 3878135.802 ops/s
# Warmup Iteration   9: 3910599.196 ops/s
# Warmup Iteration  10: 3934289.144 ops/s
# Warmup Iteration  11: 3807214.587 ops/s
# Warmup Iteration  12: 3918377.623 ops/s
# Warmup Iteration  13: 3834549.255 ops/s
# Warmup Iteration  14: 3956487.211 ops/s
# Warmup Iteration  15: 3854883.449 ops/s
# Warmup Iteration  16: 3922214.407 ops/s
# Warmup Iteration  17: 3864710.336 ops/s
# Warmup Iteration  18: 3794465.007 ops/s
# Warmup Iteration  19: 3886093.285 ops/s
# Warmup Iteration  20: 3869521.512 ops/s
# Warmup Iteration  21: 3910134.145 ops/s
# Warmup Iteration  22: 3885823.306 ops/s
# Warmup Iteration  23: 3849205.048 ops/s
# Warmup Iteration  24: 3817458.541 ops/s
# Warmup Iteration  25: 3859326.480 ops/s
# Warmup Iteration  26: 3921562.333 ops/s
# Warmup Iteration  27: 3828357.192 ops/s
# Warmup Iteration  28: 3879575.943 ops/s
# Warmup Iteration  29: 3950443.585 ops/s
# Warmup Iteration  30: 3851240.879 ops/s
Iteration   1: 3981465.940 ops/s
Iteration   2: 3907090.817 ops/s
Iteration   3: 3898520.337 ops/s
Iteration   4: 3844690.844 ops/s
Iteration   5: 3806368.719 ops/s
Iteration   6: 3854742.358 ops/s
Iteration   7: 3809726.435 ops/s
Iteration   8: 3909153.688 ops/s
Iteration   9: 3831112.276 ops/s
Iteration  10: 3810538.365 ops/s
Iteration  11: 3863033.609 ops/s
Iteration  12: 3798008.714 ops/s
Iteration  13: 3866360.211 ops/s
Iteration  14: 3829326.290 ops/s
Iteration  15: 3911883.447 ops/s
Iteration  16: 4042142.035 ops/s
Iteration  17: 4095816.406 ops/s
Iteration  18: 4102696.794 ops/s
Iteration  19: 4094901.144 ops/s
Iteration  20: 4099579.672 ops/s
Iteration  21: 4099460.169 ops/s
Iteration  22: 4093017.747 ops/s
Iteration  23: 4092109.160 ops/s
Iteration  24: 4109962.435 ops/s
Iteration  25: 4094944.403 ops/s
Iteration  26: 4099243.633 ops/s
Iteration  27: 4095078.045 ops/s
Iteration  28: 4097731.785 ops/s
Iteration  29: 4104926.469 ops/s
Iteration  30: 4096047.475 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toCollection":
  3977989.314 ±(99.9%) 83029.278 ops/s [Average]
  (min, avg, max) = (3798008.714, 3977989.314, 4109962.435), stdev = 124274.323
  CI (99.9%): [3894960.036, 4061018.592] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toCollection  thrpt   30  3977989.314 ± 83029.278  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1356766.367 ops/s
# Warmup Iteration   2: 3099014.460 ops/s
# Warmup Iteration   3: 2550724.183 ops/s
# Warmup Iteration   4: 3096384.790 ops/s
# Warmup Iteration   5: 3089097.944 ops/s
# Warmup Iteration   6: 3146003.235 ops/s
# Warmup Iteration   7: 3148155.186 ops/s
# Warmup Iteration   8: 3137626.056 ops/s
# Warmup Iteration   9: 3098849.125 ops/s
# Warmup Iteration  10: 3100411.318 ops/s
# Warmup Iteration  11: 3222779.140 ops/s
# Warmup Iteration  12: 3279916.304 ops/s
# Warmup Iteration  13: 3248824.184 ops/s
# Warmup Iteration  14: 3046860.461 ops/s
# Warmup Iteration  15: 3101443.284 ops/s
# Warmup Iteration  16: 3273195.503 ops/s
# Warmup Iteration  17: 3276925.213 ops/s
# Warmup Iteration  18: 3106411.321 ops/s
# Warmup Iteration  19: 3042619.560 ops/s
# Warmup Iteration  20: 3058964.991 ops/s
# Warmup Iteration  21: 3122084.145 ops/s
# Warmup Iteration  22: 3138155.586 ops/s
# Warmup Iteration  23: 3046175.568 ops/s
# Warmup Iteration  24: 3058671.123 ops/s
# Warmup Iteration  25: 3174189.048 ops/s
# Warmup Iteration  26: 3120688.430 ops/s
# Warmup Iteration  27: 3031919.358 ops/s
# Warmup Iteration  28: 3137312.169 ops/s
# Warmup Iteration  29: 3118742.553 ops/s
# Warmup Iteration  30: 3189733.032 ops/s
Iteration   1: 3241371.633 ops/s
Iteration   2: 3090614.169 ops/s
Iteration   3: 3080083.811 ops/s
Iteration   4: 3157959.734 ops/s
Iteration   5: 3249224.743 ops/s
Iteration   6: 3258641.103 ops/s
Iteration   7: 3071735.864 ops/s
Iteration   8: 3129244.476 ops/s
Iteration   9: 3127976.303 ops/s
Iteration  10: 3153114.995 ops/s
Iteration  11: 3133572.386 ops/s
Iteration  12: 3115649.758 ops/s
Iteration  13: 3141413.634 ops/s
Iteration  14: 3115103.041 ops/s
Iteration  15: 3044518.897 ops/s
Iteration  16: 3029240.338 ops/s
Iteration  17: 2999487.371 ops/s
Iteration  18: 3099760.584 ops/s
Iteration  19: 3125126.995 ops/s
Iteration  20: 3175428.476 ops/s
Iteration  21: 3131073.953 ops/s
Iteration  22: 3099581.817 ops/s
Iteration  23: 3058583.987 ops/s
Iteration  24: 3059338.096 ops/s
Iteration  25: 3079530.934 ops/s
Iteration  26: 3209500.622 ops/s
Iteration  27: 3283352.523 ops/s
Iteration  28: 3235642.441 ops/s
Iteration  29: 3120256.490 ops/s
Iteration  30: 3128955.851 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutable":
  3131502.834 ±(99.9%) 47174.852 ops/s [Average]
  (min, avg, max) = (2999487.371, 3131502.834, 3283352.523), stdev = 70609.103
  CI (99.9%): [3084327.982, 3178677.686] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutable  thrpt   30  3131502.834 ± 47174.852  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 596570.039 ops/s
# Warmup Iteration   2: 1402897.231 ops/s
# Warmup Iteration   3: 1509394.476 ops/s
# Warmup Iteration   4: 1501800.308 ops/s
# Warmup Iteration   5: 1253073.935 ops/s
# Warmup Iteration   6: 1487924.573 ops/s
# Warmup Iteration   7: 1536935.005 ops/s
# Warmup Iteration   8: 1603951.176 ops/s
# Warmup Iteration   9: 1603852.066 ops/s
# Warmup Iteration  10: 1601068.662 ops/s
# Warmup Iteration  11: 1602596.565 ops/s
# Warmup Iteration  12: 1600653.649 ops/s
# Warmup Iteration  13: 1600505.452 ops/s
# Warmup Iteration  14: 1600975.646 ops/s
# Warmup Iteration  15: 1600856.657 ops/s
# Warmup Iteration  16: 1579922.632 ops/s
# Warmup Iteration  17: 1544833.663 ops/s
# Warmup Iteration  18: 1503004.795 ops/s
# Warmup Iteration  19: 1597670.064 ops/s
# Warmup Iteration  20: 1576364.805 ops/s
# Warmup Iteration  21: 1526910.385 ops/s
# Warmup Iteration  22: 1579620.852 ops/s
# Warmup Iteration  23: 1556830.247 ops/s
# Warmup Iteration  24: 1552823.454 ops/s
# Warmup Iteration  25: 1558967.527 ops/s
# Warmup Iteration  26: 1546233.388 ops/s
# Warmup Iteration  27: 1512851.003 ops/s
# Warmup Iteration  28: 1547468.977 ops/s
# Warmup Iteration  29: 1481828.733 ops/s
# Warmup Iteration  30: 1539435.110 ops/s
Iteration   1: 1488563.910 ops/s
Iteration   2: 1488356.669 ops/s
Iteration   3: 1543522.848 ops/s
Iteration   4: 1524536.070 ops/s
Iteration   5: 1587738.524 ops/s
Iteration   6: 1603035.417 ops/s
Iteration   7: 1564558.931 ops/s
Iteration   8: 1606828.201 ops/s
Iteration   9: 1602603.547 ops/s
Iteration  10: 1502671.786 ops/s
Iteration  11: 1603090.415 ops/s
Iteration  12: 1559082.074 ops/s
Iteration  13: 1518439.399 ops/s
Iteration  14: 1529093.701 ops/s
Iteration  15: 1517452.368 ops/s
Iteration  16: 1508205.548 ops/s
Iteration  17: 1555704.180 ops/s
Iteration  18: 1599413.985 ops/s
Iteration  19: 1606509.755 ops/s
Iteration  20: 1580349.370 ops/s
Iteration  21: 1568922.415 ops/s
Iteration  22: 1586180.319 ops/s
Iteration  23: 1563461.827 ops/s
Iteration  24: 1564432.634 ops/s
Iteration  25: 1587410.823 ops/s
Iteration  26: 1570190.283 ops/s
Iteration  27: 1506469.878 ops/s
Iteration  28: 1510322.970 ops/s
Iteration  29: 1592763.833 ops/s
Iteration  30: 1600739.496 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableBag":
  1558021.706 ±(99.9%) 26167.204 ops/s [Average]
  (min, avg, max) = (1488356.669, 1558021.706, 1606828.201), stdev = 39165.842
  CI (99.9%): [1531854.502, 1584188.910] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableBag  thrpt   30  1558021.706 ± 26167.204  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 89460.474 ops/s
# Warmup Iteration   2: 126956.273 ops/s
# Warmup Iteration   3: 154208.274 ops/s
# Warmup Iteration   4: 154882.884 ops/s
# Warmup Iteration   5: 152422.251 ops/s
# Warmup Iteration   6: 153549.333 ops/s
# Warmup Iteration   7: 151054.049 ops/s
# Warmup Iteration   8: 125194.450 ops/s
# Warmup Iteration   9: 156203.694 ops/s
# Warmup Iteration  10: 157219.156 ops/s
# Warmup Iteration  11: 150884.742 ops/s
# Warmup Iteration  12: 148340.021 ops/s
# Warmup Iteration  13: 147789.721 ops/s
# Warmup Iteration  14: 149199.822 ops/s
# Warmup Iteration  15: 149794.529 ops/s
# Warmup Iteration  16: 147740.679 ops/s
# Warmup Iteration  17: 157430.174 ops/s
# Warmup Iteration  18: 154423.237 ops/s
# Warmup Iteration  19: 153131.033 ops/s
# Warmup Iteration  20: 152395.137 ops/s
# Warmup Iteration  21: 153308.716 ops/s
# Warmup Iteration  22: 159568.361 ops/s
# Warmup Iteration  23: 163658.443 ops/s
# Warmup Iteration  24: 163418.231 ops/s
# Warmup Iteration  25: 163409.790 ops/s
# Warmup Iteration  26: 163290.387 ops/s
# Warmup Iteration  27: 163389.037 ops/s
# Warmup Iteration  28: 163389.096 ops/s
# Warmup Iteration  29: 163914.795 ops/s
# Warmup Iteration  30: 163403.715 ops/s
Iteration   1: 156304.341 ops/s
Iteration   2: 156674.430 ops/s
Iteration   3: 152975.321 ops/s
Iteration   4: 155592.308 ops/s
Iteration   5: 149899.119 ops/s
Iteration   6: 151906.054 ops/s
Iteration   7: 153311.494 ops/s
Iteration   8: 153893.612 ops/s
Iteration   9: 152397.495 ops/s
Iteration  10: 151108.892 ops/s
Iteration  11: 152197.000 ops/s
Iteration  12: 152586.849 ops/s
Iteration  13: 152985.180 ops/s
Iteration  14: 156370.334 ops/s
Iteration  15: 153246.887 ops/s
Iteration  16: 153320.017 ops/s
Iteration  17: 156114.328 ops/s
Iteration  18: 158971.346 ops/s
Iteration  19: 158474.341 ops/s
Iteration  20: 158506.367 ops/s
Iteration  21: 157993.458 ops/s
Iteration  22: 153869.378 ops/s
Iteration  23: 153856.982 ops/s
Iteration  24: 151060.064 ops/s
Iteration  25: 156121.507 ops/s
Iteration  26: 156550.521 ops/s
Iteration  27: 153945.081 ops/s
Iteration  28: 153366.598 ops/s
Iteration  29: 153996.399 ops/s
Iteration  30: 154255.676 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableBiMap":
  154395.046 ±(99.9%) 1581.634 ops/s [Average]
  (min, avg, max) = (149899.119, 154395.046, 158971.346), stdev = 2367.315
  CI (99.9%): [152813.412, 155976.680] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableBiMap  thrpt   30  154395.046 ± 1581.634  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 875235.358 ops/s
# Warmup Iteration   2: 2090987.078 ops/s
# Warmup Iteration   3: 2078738.799 ops/s
# Warmup Iteration   4: 1723330.499 ops/s
# Warmup Iteration   5: 2100778.724 ops/s
# Warmup Iteration   6: 2080617.575 ops/s
# Warmup Iteration   7: 2100429.679 ops/s
# Warmup Iteration   8: 2110821.440 ops/s
# Warmup Iteration   9: 2124362.183 ops/s
# Warmup Iteration  10: 2111031.349 ops/s
# Warmup Iteration  11: 2093367.303 ops/s
# Warmup Iteration  12: 2084430.506 ops/s
# Warmup Iteration  13: 2117837.730 ops/s
# Warmup Iteration  14: 2125443.906 ops/s
# Warmup Iteration  15: 2129240.032 ops/s
# Warmup Iteration  16: 2084794.097 ops/s
# Warmup Iteration  17: 2186697.734 ops/s
# Warmup Iteration  18: 2089230.430 ops/s
# Warmup Iteration  19: 2116882.909 ops/s
# Warmup Iteration  20: 2086725.038 ops/s
# Warmup Iteration  21: 2092801.607 ops/s
# Warmup Iteration  22: 2068210.536 ops/s
# Warmup Iteration  23: 2067253.023 ops/s
# Warmup Iteration  24: 2082465.505 ops/s
# Warmup Iteration  25: 2096314.272 ops/s
# Warmup Iteration  26: 2120313.578 ops/s
# Warmup Iteration  27: 2066167.455 ops/s
# Warmup Iteration  28: 2082341.865 ops/s
# Warmup Iteration  29: 2088857.489 ops/s
# Warmup Iteration  30: 2117873.031 ops/s
Iteration   1: 2093789.731 ops/s
Iteration   2: 2111757.295 ops/s
Iteration   3: 2088653.940 ops/s
Iteration   4: 2123055.221 ops/s
Iteration   5: 2136549.698 ops/s
Iteration   6: 2119906.674 ops/s
Iteration   7: 2097963.412 ops/s
Iteration   8: 2088103.922 ops/s
Iteration   9: 2075779.727 ops/s
Iteration  10: 2087990.962 ops/s
Iteration  11: 2114311.717 ops/s
Iteration  12: 2122664.095 ops/s
Iteration  13: 2235018.190 ops/s
Iteration  14: 2231491.899 ops/s
Iteration  15: 2232593.659 ops/s
Iteration  16: 2229517.532 ops/s
Iteration  17: 2232724.918 ops/s
Iteration  18: 2228813.348 ops/s
Iteration  19: 2237408.555 ops/s
Iteration  20: 2231983.025 ops/s
Iteration  21: 2234264.120 ops/s
Iteration  22: 2230056.440 ops/s
Iteration  23: 2231424.874 ops/s
Iteration  24: 2229217.608 ops/s
Iteration  25: 2233178.404 ops/s
Iteration  26: 2233677.464 ops/s
Iteration  27: 2232356.603 ops/s
Iteration  28: 2229797.381 ops/s
Iteration  29: 2234405.754 ops/s
Iteration  30: 2067807.390 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableList":
  2175875.452 ±(99.9%) 44701.675 ops/s [Average]
  (min, avg, max) = (2067807.390, 2175875.452, 2237408.555), stdev = 66907.368
  CI (99.9%): [2131173.777, 2220577.127] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableList  thrpt   30  2175875.452 ± 44701.675  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 661597.720 ops/s
# Warmup Iteration   2: 1685163.092 ops/s
# Warmup Iteration   3: 1696566.357 ops/s
# Warmup Iteration   4: 1393125.000 ops/s
# Warmup Iteration   5: 1678215.815 ops/s
# Warmup Iteration   6: 1697002.919 ops/s
# Warmup Iteration   7: 1688767.420 ops/s
# Warmup Iteration   8: 1710152.664 ops/s
# Warmup Iteration   9: 1692290.611 ops/s
# Warmup Iteration  10: 1706812.895 ops/s
# Warmup Iteration  11: 1689752.142 ops/s
# Warmup Iteration  12: 1695262.263 ops/s
# Warmup Iteration  13: 1688863.574 ops/s
# Warmup Iteration  14: 1692946.697 ops/s
# Warmup Iteration  15: 1721906.234 ops/s
# Warmup Iteration  16: 1703842.721 ops/s
# Warmup Iteration  17: 1692173.332 ops/s
# Warmup Iteration  18: 1695188.743 ops/s
# Warmup Iteration  19: 1683633.373 ops/s
# Warmup Iteration  20: 1676031.015 ops/s
# Warmup Iteration  21: 1675276.239 ops/s
# Warmup Iteration  22: 1703199.336 ops/s
# Warmup Iteration  23: 1690644.487 ops/s
# Warmup Iteration  24: 1730781.849 ops/s
# Warmup Iteration  25: 1692714.736 ops/s
# Warmup Iteration  26: 1693271.423 ops/s
# Warmup Iteration  27: 1709335.904 ops/s
# Warmup Iteration  28: 1682510.952 ops/s
# Warmup Iteration  29: 1700629.188 ops/s
# Warmup Iteration  30: 1694662.477 ops/s
Iteration   1: 1669472.268 ops/s
Iteration   2: 1752924.223 ops/s
Iteration   3: 1738752.294 ops/s
Iteration   4: 1728357.716 ops/s
Iteration   5: 1674034.844 ops/s
Iteration   6: 1717623.110 ops/s
Iteration   7: 1708005.403 ops/s
Iteration   8: 1688043.747 ops/s
Iteration   9: 1691227.989 ops/s
Iteration  10: 1688962.747 ops/s
Iteration  11: 1690563.193 ops/s
Iteration  12: 1699012.375 ops/s
Iteration  13: 1706657.989 ops/s
Iteration  14: 1667388.492 ops/s
Iteration  15: 1760198.122 ops/s
Iteration  16: 1685874.033 ops/s
Iteration  17: 1771217.878 ops/s
Iteration  18: 1809770.003 ops/s
Iteration  19: 1710316.476 ops/s
Iteration  20: 1657386.716 ops/s
Iteration  21: 1727774.260 ops/s
Iteration  22: 1755081.336 ops/s
Iteration  23: 1694423.402 ops/s
Iteration  24: 1704593.192 ops/s
Iteration  25: 1726206.115 ops/s
Iteration  26: 1729964.842 ops/s
Iteration  27: 1727927.827 ops/s
Iteration  28: 1697584.789 ops/s
Iteration  29: 1678812.197 ops/s
Iteration  30: 1694668.327 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableMap":
  1711760.863 ±(99.9%) 22893.418 ops/s [Average]
  (min, avg, max) = (1657386.716, 1711760.863, 1809770.003), stdev = 34265.794
  CI (99.9%): [1688867.445, 1734654.282] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableMap  thrpt   30  1711760.863 ± 22893.418  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 785672.533 ops/s
# Warmup Iteration   2: 1751170.149 ops/s
# Warmup Iteration   3: 1860711.924 ops/s
# Warmup Iteration   4: 1877947.412 ops/s
# Warmup Iteration   5: 1667154.201 ops/s
# Warmup Iteration   6: 1987774.024 ops/s
# Warmup Iteration   7: 1984406.788 ops/s
# Warmup Iteration   8: 1984158.967 ops/s
# Warmup Iteration   9: 1988445.780 ops/s
# Warmup Iteration  10: 1982654.025 ops/s
# Warmup Iteration  11: 1981129.789 ops/s
# Warmup Iteration  12: 1986961.383 ops/s
# Warmup Iteration  13: 1984485.104 ops/s
# Warmup Iteration  14: 1920312.422 ops/s
# Warmup Iteration  15: 1850782.424 ops/s
# Warmup Iteration  16: 1863892.506 ops/s
# Warmup Iteration  17: 1836275.675 ops/s
# Warmup Iteration  18: 1829408.397 ops/s
# Warmup Iteration  19: 1839200.493 ops/s
# Warmup Iteration  20: 1841744.406 ops/s
# Warmup Iteration  21: 1850713.292 ops/s
# Warmup Iteration  22: 1843520.306 ops/s
# Warmup Iteration  23: 1850332.864 ops/s
# Warmup Iteration  24: 1887751.864 ops/s
# Warmup Iteration  25: 1827282.959 ops/s
# Warmup Iteration  26: 1853553.626 ops/s
# Warmup Iteration  27: 1898312.149 ops/s
# Warmup Iteration  28: 1867073.649 ops/s
# Warmup Iteration  29: 1885119.251 ops/s
# Warmup Iteration  30: 1823269.670 ops/s
Iteration   1: 1864917.595 ops/s
Iteration   2: 1872857.084 ops/s
Iteration   3: 1845140.966 ops/s
Iteration   4: 1840317.472 ops/s
Iteration   5: 1877495.443 ops/s
Iteration   6: 1868332.577 ops/s
Iteration   7: 1834892.552 ops/s
Iteration   8: 1847186.921 ops/s
Iteration   9: 1887775.935 ops/s
Iteration  10: 1837064.352 ops/s
Iteration  11: 1823097.193 ops/s
Iteration  12: 1876892.815 ops/s
Iteration  13: 1863362.467 ops/s
Iteration  14: 1846751.894 ops/s
Iteration  15: 1838487.313 ops/s
Iteration  16: 1911937.762 ops/s
Iteration  17: 1976202.276 ops/s
Iteration  18: 1983066.852 ops/s
Iteration  19: 1978528.323 ops/s
Iteration  20: 1973632.313 ops/s
Iteration  21: 1970135.898 ops/s
Iteration  22: 1937671.721 ops/s
Iteration  23: 1850895.747 ops/s
Iteration  24: 1828228.678 ops/s
Iteration  25: 1969668.240 ops/s
Iteration  26: 1937541.859 ops/s
Iteration  27: 1893411.920 ops/s
Iteration  28: 1980976.692 ops/s
Iteration  29: 1927444.426 ops/s
Iteration  30: 1821075.582 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSet":
  1892166.362 ±(99.9%) 37618.566 ops/s [Average]
  (min, avg, max) = (1821075.582, 1892166.362, 1983066.852), stdev = 56305.703
  CI (99.9%): [1854547.796, 1929784.928] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSet  thrpt   30  1892166.362 ± 37618.566  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 576957.853 ops/s
# Warmup Iteration   2: 1347279.586 ops/s
# Warmup Iteration   3: 1477756.633 ops/s
# Warmup Iteration   4: 1355906.420 ops/s
# Warmup Iteration   5: 1293710.409 ops/s
# Warmup Iteration   6: 1411951.536 ops/s
# Warmup Iteration   7: 1421689.459 ops/s
# Warmup Iteration   8: 1422469.085 ops/s
# Warmup Iteration   9: 1421074.961 ops/s
# Warmup Iteration  10: 1398785.647 ops/s
# Warmup Iteration  11: 1438679.570 ops/s
# Warmup Iteration  12: 1468159.185 ops/s
# Warmup Iteration  13: 1405719.536 ops/s
# Warmup Iteration  14: 1462256.375 ops/s
# Warmup Iteration  15: 1502019.143 ops/s
# Warmup Iteration  16: 1499955.701 ops/s
# Warmup Iteration  17: 1411349.528 ops/s
# Warmup Iteration  18: 1476366.901 ops/s
# Warmup Iteration  19: 1416225.238 ops/s
# Warmup Iteration  20: 1485042.459 ops/s
# Warmup Iteration  21: 1503500.484 ops/s
# Warmup Iteration  22: 1500995.159 ops/s
# Warmup Iteration  23: 1500960.580 ops/s
# Warmup Iteration  24: 1503895.603 ops/s
# Warmup Iteration  25: 1502339.963 ops/s
# Warmup Iteration  26: 1500827.842 ops/s
# Warmup Iteration  27: 1504073.715 ops/s
# Warmup Iteration  28: 1500570.019 ops/s
# Warmup Iteration  29: 1413981.110 ops/s
# Warmup Iteration  30: 1407732.191 ops/s
Iteration   1: 1409719.197 ops/s
Iteration   2: 1412052.078 ops/s
Iteration   3: 1434976.670 ops/s
Iteration   4: 1440698.539 ops/s
Iteration   5: 1433789.636 ops/s
Iteration   6: 1442731.343 ops/s
Iteration   7: 1447801.228 ops/s
Iteration   8: 1432395.604 ops/s
Iteration   9: 1424133.073 ops/s
Iteration  10: 1374383.038 ops/s
Iteration  11: 1482153.699 ops/s
Iteration  12: 1455261.320 ops/s
Iteration  13: 1433631.674 ops/s
Iteration  14: 1485176.306 ops/s
Iteration  15: 1420774.740 ops/s
Iteration  16: 1391496.845 ops/s
Iteration  17: 1432095.814 ops/s
Iteration  18: 1441693.465 ops/s
Iteration  19: 1448420.358 ops/s
Iteration  20: 1501927.997 ops/s
Iteration  21: 1394757.956 ops/s
Iteration  22: 1402831.376 ops/s
Iteration  23: 1400833.134 ops/s
Iteration  24: 1466390.580 ops/s
Iteration  25: 1421430.429 ops/s
Iteration  26: 1383760.651 ops/s
Iteration  27: 1457754.711 ops/s
Iteration  28: 1405997.586 ops/s
Iteration  29: 1432572.485 ops/s
Iteration  30: 1498729.338 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering":
  1433679.029 ±(99.9%) 21551.060 ops/s [Average]
  (min, avg, max) = (1374383.038, 1433679.029, 1501927.997), stdev = 32256.615
  CI (99.9%): [1412127.969, 1455230.089] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering  thrpt   30  1433679.029 ± 21551.060  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 285055.418 ops/s
# Warmup Iteration   2: 626936.176 ops/s
# Warmup Iteration   3: 678786.229 ops/s
# Warmup Iteration   4: 698468.795 ops/s
# Warmup Iteration   5: 568571.562 ops/s
# Warmup Iteration   6: 691135.563 ops/s
# Warmup Iteration   7: 683545.621 ops/s
# Warmup Iteration   8: 686016.759 ops/s
# Warmup Iteration   9: 713760.929 ops/s
# Warmup Iteration  10: 685771.219 ops/s
# Warmup Iteration  11: 685291.102 ops/s
# Warmup Iteration  12: 682314.345 ops/s
# Warmup Iteration  13: 693709.737 ops/s
# Warmup Iteration  14: 691736.401 ops/s
# Warmup Iteration  15: 691649.731 ops/s
# Warmup Iteration  16: 693454.944 ops/s
# Warmup Iteration  17: 690451.693 ops/s
# Warmup Iteration  18: 704525.153 ops/s
# Warmup Iteration  19: 710054.644 ops/s
# Warmup Iteration  20: 712900.149 ops/s
# Warmup Iteration  21: 713501.043 ops/s
# Warmup Iteration  22: 697306.429 ops/s
# Warmup Iteration  23: 706501.036 ops/s
# Warmup Iteration  24: 700199.309 ops/s
# Warmup Iteration  25: 707788.008 ops/s
# Warmup Iteration  26: 704773.960 ops/s
# Warmup Iteration  27: 729158.080 ops/s
# Warmup Iteration  28: 714916.717 ops/s
# Warmup Iteration  29: 708686.200 ops/s
# Warmup Iteration  30: 703399.404 ops/s
Iteration   1: 723383.914 ops/s
Iteration   2: 688584.309 ops/s
Iteration   3: 683009.808 ops/s
Iteration   4: 685741.271 ops/s
Iteration   5: 706915.553 ops/s
Iteration   6: 723561.336 ops/s
Iteration   7: 730991.184 ops/s
Iteration   8: 722498.670 ops/s
Iteration   9: 739893.184 ops/s
Iteration  10: 738788.905 ops/s
Iteration  11: 737538.537 ops/s
Iteration  12: 737994.460 ops/s
Iteration  13: 738581.285 ops/s
Iteration  14: 738609.493 ops/s
Iteration  15: 739868.194 ops/s
Iteration  16: 737619.870 ops/s
Iteration  17: 737720.111 ops/s
Iteration  18: 740768.552 ops/s
Iteration  19: 739230.353 ops/s
Iteration  20: 738336.639 ops/s
Iteration  21: 740480.425 ops/s
Iteration  22: 739074.398 ops/s
Iteration  23: 739971.097 ops/s
Iteration  24: 737003.630 ops/s
Iteration  25: 738074.960 ops/s
Iteration  26: 711177.773 ops/s
Iteration  27: 702301.532 ops/s
Iteration  28: 698433.275 ops/s
Iteration  29: 698822.126 ops/s
Iteration  30: 711429.226 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedBagBy":
  724880.136 ±(99.9%) 12737.854 ops/s [Average]
  (min, avg, max) = (683009.808, 724880.136, 740768.552), stdev = 19065.421
  CI (99.9%): [712142.282, 737617.989] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedBagBy  thrpt   30  724880.136 ± 12737.854  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 304611.127 ops/s
# Warmup Iteration   2: 561403.226 ops/s
# Warmup Iteration   3: 671124.270 ops/s
# Warmup Iteration   4: 676089.551 ops/s
# Warmup Iteration   5: 657454.445 ops/s
# Warmup Iteration   6: 547800.365 ops/s
# Warmup Iteration   7: 664559.317 ops/s
# Warmup Iteration   8: 663379.339 ops/s
# Warmup Iteration   9: 656342.026 ops/s
# Warmup Iteration  10: 659518.529 ops/s
# Warmup Iteration  11: 676120.213 ops/s
# Warmup Iteration  12: 653990.730 ops/s
# Warmup Iteration  13: 675761.849 ops/s
# Warmup Iteration  14: 669971.642 ops/s
# Warmup Iteration  15: 680194.843 ops/s
# Warmup Iteration  16: 665236.331 ops/s
# Warmup Iteration  17: 672210.353 ops/s
# Warmup Iteration  18: 664728.682 ops/s
# Warmup Iteration  19: 673742.256 ops/s
# Warmup Iteration  20: 651190.588 ops/s
# Warmup Iteration  21: 683307.724 ops/s
# Warmup Iteration  22: 677027.654 ops/s
# Warmup Iteration  23: 679495.044 ops/s
# Warmup Iteration  24: 671722.248 ops/s
# Warmup Iteration  25: 686997.854 ops/s
# Warmup Iteration  26: 661782.536 ops/s
# Warmup Iteration  27: 658608.712 ops/s
# Warmup Iteration  28: 668530.552 ops/s
# Warmup Iteration  29: 674373.682 ops/s
# Warmup Iteration  30: 658742.495 ops/s
Iteration   1: 665376.625 ops/s
Iteration   2: 684417.433 ops/s
Iteration   3: 675582.235 ops/s
Iteration   4: 670819.991 ops/s
Iteration   5: 664357.465 ops/s
Iteration   6: 676313.967 ops/s
Iteration   7: 654217.347 ops/s
Iteration   8: 650477.195 ops/s
Iteration   9: 697512.828 ops/s
Iteration  10: 706602.556 ops/s
Iteration  11: 706249.942 ops/s
Iteration  12: 699613.992 ops/s
Iteration  13: 675790.124 ops/s
Iteration  14: 649149.286 ops/s
Iteration  15: 659172.626 ops/s
Iteration  16: 666901.580 ops/s
Iteration  17: 659051.812 ops/s
Iteration  18: 663717.314 ops/s
Iteration  19: 661244.790 ops/s
Iteration  20: 663904.520 ops/s
Iteration  21: 657193.271 ops/s
Iteration  22: 657639.821 ops/s
Iteration  23: 657771.637 ops/s
Iteration  24: 666107.290 ops/s
Iteration  25: 668443.624 ops/s
Iteration  26: 666743.327 ops/s
Iteration  27: 667987.625 ops/s
Iteration  28: 662750.843 ops/s
Iteration  29: 657172.969 ops/s
Iteration  30: 666539.224 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering":
  669294.109 ±(99.9%) 10254.498 ops/s [Average]
  (min, avg, max) = (649149.286, 669294.109, 706602.556), stdev = 15348.451
  CI (99.9%): [659039.611, 679548.606] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering  thrpt   30  669294.109 ± 10254.498  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 488790.451 ops/s
# Warmup Iteration   2: 957559.330 ops/s
# Warmup Iteration   3: 1162355.531 ops/s
# Warmup Iteration   4: 1180355.735 ops/s
# Warmup Iteration   5: 1171766.693 ops/s
# Warmup Iteration   6: 1002013.407 ops/s
# Warmup Iteration   7: 1186576.475 ops/s
# Warmup Iteration   8: 1185314.177 ops/s
# Warmup Iteration   9: 1187719.955 ops/s
# Warmup Iteration  10: 1187549.262 ops/s
# Warmup Iteration  11: 1183846.891 ops/s
# Warmup Iteration  12: 1144217.141 ops/s
# Warmup Iteration  13: 1118322.739 ops/s
# Warmup Iteration  14: 1132712.126 ops/s
# Warmup Iteration  15: 1110341.827 ops/s
# Warmup Iteration  16: 1131891.232 ops/s
# Warmup Iteration  17: 1125026.924 ops/s
# Warmup Iteration  18: 1118826.316 ops/s
# Warmup Iteration  19: 1137348.563 ops/s
# Warmup Iteration  20: 1119982.972 ops/s
# Warmup Iteration  21: 1121810.609 ops/s
# Warmup Iteration  22: 1113161.300 ops/s
# Warmup Iteration  23: 1122601.748 ops/s
# Warmup Iteration  24: 1102380.752 ops/s
# Warmup Iteration  25: 1098870.156 ops/s
# Warmup Iteration  26: 1143892.298 ops/s
# Warmup Iteration  27: 1116314.611 ops/s
# Warmup Iteration  28: 1128163.940 ops/s
# Warmup Iteration  29: 1128063.438 ops/s
# Warmup Iteration  30: 1122937.610 ops/s
Iteration   1: 1098001.333 ops/s
Iteration   2: 1164357.751 ops/s
Iteration   3: 1176289.548 ops/s
Iteration   4: 1118022.386 ops/s
Iteration   5: 1125789.887 ops/s
Iteration   6: 1124049.486 ops/s
Iteration   7: 1135567.848 ops/s
Iteration   8: 1122054.155 ops/s
Iteration   9: 1111082.522 ops/s
Iteration  10: 1149018.092 ops/s
Iteration  11: 1110694.657 ops/s
Iteration  12: 1112360.466 ops/s
Iteration  13: 1158196.792 ops/s
Iteration  14: 1137588.921 ops/s
Iteration  15: 1118094.971 ops/s
Iteration  16: 1176813.470 ops/s
Iteration  17: 1139605.784 ops/s
Iteration  18: 1126623.920 ops/s
Iteration  19: 1094508.580 ops/s
Iteration  20: 1104751.822 ops/s
Iteration  21: 1123835.201 ops/s
Iteration  22: 1147125.206 ops/s
Iteration  23: 1130264.938 ops/s
Iteration  24: 1131537.449 ops/s
Iteration  25: 1180890.090 ops/s
Iteration  26: 1134678.111 ops/s
Iteration  27: 1136694.692 ops/s
Iteration  28: 1104505.141 ops/s
Iteration  29: 1115179.587 ops/s
Iteration  30: 1163488.582 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator":
  1132389.046 ±(99.9%) 15711.803 ops/s [Average]
  (min, avg, max) = (1094508.580, 1132389.046, 1180890.090), stdev = 23516.688
  CI (99.9%): [1116677.244, 1148100.849] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator  thrpt   30  1132389.046 ± 15711.803  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2002776.242 ops/s
# Warmup Iteration   2: 5491319.002 ops/s
# Warmup Iteration   3: 5444813.367 ops/s
# Warmup Iteration   4: 4554093.812 ops/s
# Warmup Iteration   5: 5560594.284 ops/s
# Warmup Iteration   6: 5511650.031 ops/s
# Warmup Iteration   7: 5345469.882 ops/s
# Warmup Iteration   8: 5339710.460 ops/s
# Warmup Iteration   9: 5310944.278 ops/s
# Warmup Iteration  10: 5377314.513 ops/s
# Warmup Iteration  11: 5469653.329 ops/s
# Warmup Iteration  12: 5431572.395 ops/s
# Warmup Iteration  13: 5384135.243 ops/s
# Warmup Iteration  14: 5409965.870 ops/s
# Warmup Iteration  15: 5449923.335 ops/s
# Warmup Iteration  16: 5315130.553 ops/s
# Warmup Iteration  17: 5360707.290 ops/s
# Warmup Iteration  18: 5715685.413 ops/s
# Warmup Iteration  19: 5733695.285 ops/s
# Warmup Iteration  20: 5729566.502 ops/s
# Warmup Iteration  21: 5723565.729 ops/s
# Warmup Iteration  22: 5726678.736 ops/s
# Warmup Iteration  23: 5716549.935 ops/s
# Warmup Iteration  24: 5728149.821 ops/s
# Warmup Iteration  25: 5727865.429 ops/s
# Warmup Iteration  26: 5703509.874 ops/s
# Warmup Iteration  27: 5516501.360 ops/s
# Warmup Iteration  28: 5349711.589 ops/s
# Warmup Iteration  29: 5594400.488 ops/s
# Warmup Iteration  30: 5633404.087 ops/s
Iteration   1: 5363286.808 ops/s
Iteration   2: 5418103.115 ops/s
Iteration   3: 5734020.971 ops/s
Iteration   4: 5650902.960 ops/s
Iteration   5: 5626466.134 ops/s
Iteration   6: 5680463.696 ops/s
Iteration   7: 5609104.069 ops/s
Iteration   8: 5623945.378 ops/s
Iteration   9: 5265710.682 ops/s
Iteration  10: 5708593.807 ops/s
Iteration  11: 5518621.455 ops/s
Iteration  12: 5386104.466 ops/s
Iteration  13: 5372024.908 ops/s
Iteration  14: 5719998.936 ops/s
Iteration  15: 5436961.852 ops/s
Iteration  16: 5430046.574 ops/s
Iteration  17: 5395816.424 ops/s
Iteration  18: 5469107.265 ops/s
Iteration  19: 5715650.724 ops/s
Iteration  20: 5482565.590 ops/s
Iteration  21: 5301466.738 ops/s
Iteration  22: 5319102.571 ops/s
Iteration  23: 5353598.674 ops/s
Iteration  24: 5378865.075 ops/s
Iteration  25: 5432200.722 ops/s
Iteration  26: 5516460.576 ops/s
Iteration  27: 5457675.022 ops/s
Iteration  28: 5332142.773 ops/s
Iteration  29: 5426982.100 ops/s
Iteration  30: 5454703.073 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedListBy":
  5486023.105 ±(99.9%) 93449.408 ops/s [Average]
  (min, avg, max) = (5265710.682, 5486023.105, 5734020.971), stdev = 139870.685
  CI (99.9%): [5392573.697, 5579472.512] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedListBy  thrpt   30  5486023.105 ± 93449.408  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1025391.329 ops/s
# Warmup Iteration   2: 2377006.146 ops/s
# Warmup Iteration   3: 2526147.249 ops/s
# Warmup Iteration   4: 2194423.472 ops/s
# Warmup Iteration   5: 2244358.198 ops/s
# Warmup Iteration   6: 2515717.424 ops/s
# Warmup Iteration   7: 2499956.363 ops/s
# Warmup Iteration   8: 2576598.337 ops/s
# Warmup Iteration   9: 2491698.575 ops/s
# Warmup Iteration  10: 2503739.359 ops/s
# Warmup Iteration  11: 2427524.535 ops/s
# Warmup Iteration  12: 2455615.664 ops/s
# Warmup Iteration  13: 2477798.167 ops/s
# Warmup Iteration  14: 2597676.080 ops/s
# Warmup Iteration  15: 2440202.737 ops/s
# Warmup Iteration  16: 2450586.372 ops/s
# Warmup Iteration  17: 2478405.169 ops/s
# Warmup Iteration  18: 2459521.633 ops/s
# Warmup Iteration  19: 2485073.667 ops/s
# Warmup Iteration  20: 2473477.479 ops/s
# Warmup Iteration  21: 2480443.207 ops/s
# Warmup Iteration  22: 2478869.465 ops/s
# Warmup Iteration  23: 2517211.783 ops/s
# Warmup Iteration  24: 2452282.863 ops/s
# Warmup Iteration  25: 2497281.062 ops/s
# Warmup Iteration  26: 2472061.622 ops/s
# Warmup Iteration  27: 2442803.926 ops/s
# Warmup Iteration  28: 2455685.921 ops/s
# Warmup Iteration  29: 2502196.958 ops/s
# Warmup Iteration  30: 2588732.199 ops/s
Iteration   1: 2596783.868 ops/s
Iteration   2: 2576827.364 ops/s
Iteration   3: 2523550.937 ops/s
Iteration   4: 2633979.479 ops/s
Iteration   5: 2638022.803 ops/s
Iteration   6: 2635302.751 ops/s
Iteration   7: 2634110.086 ops/s
Iteration   8: 2639145.322 ops/s
Iteration   9: 2635056.014 ops/s
Iteration  10: 2621903.710 ops/s
Iteration  11: 2638177.846 ops/s
Iteration  12: 2632516.204 ops/s
Iteration  13: 2634503.849 ops/s
Iteration  14: 2630809.868 ops/s
Iteration  15: 2631047.198 ops/s
Iteration  16: 2634059.875 ops/s
Iteration  17: 2634553.153 ops/s
Iteration  18: 2634542.742 ops/s
Iteration  19: 2629625.212 ops/s
Iteration  20: 2637708.439 ops/s
Iteration  21: 2560566.852 ops/s
Iteration  22: 2510404.837 ops/s
Iteration  23: 2515278.998 ops/s
Iteration  24: 2422008.885 ops/s
Iteration  25: 2561889.755 ops/s
Iteration  26: 2595698.284 ops/s
Iteration  27: 2633304.174 ops/s
Iteration  28: 2492551.364 ops/s
Iteration  29: 2486214.178 ops/s
Iteration  30: 2568956.936 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering":
  2593970.033 ±(99.9%) 39524.994 ops/s [Average]
  (min, avg, max) = (2422008.885, 2593970.033, 2639145.322), stdev = 59159.155
  CI (99.9%): [2554445.039, 2633495.027] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering  thrpt   30  2593970.033 ± 39524.994  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3161256.734 ops/s
# Warmup Iteration   2: 6317545.018 ops/s
# Warmup Iteration   3: 6365859.935 ops/s
# Warmup Iteration   4: 5432642.838 ops/s
# Warmup Iteration   5: 6819282.359 ops/s
# Warmup Iteration   6: 6498312.624 ops/s
# Warmup Iteration   7: 6449658.682 ops/s
# Warmup Iteration   8: 6357952.463 ops/s
# Warmup Iteration   9: 6512681.906 ops/s
# Warmup Iteration  10: 6471961.432 ops/s
# Warmup Iteration  11: 6553475.414 ops/s
# Warmup Iteration  12: 6600893.393 ops/s
# Warmup Iteration  13: 6363393.093 ops/s
# Warmup Iteration  14: 6431560.843 ops/s
# Warmup Iteration  15: 6344991.858 ops/s
# Warmup Iteration  16: 6331544.444 ops/s
# Warmup Iteration  17: 6364314.907 ops/s
# Warmup Iteration  18: 6321249.075 ops/s
# Warmup Iteration  19: 6427137.608 ops/s
# Warmup Iteration  20: 6595798.948 ops/s
# Warmup Iteration  21: 6412601.477 ops/s
# Warmup Iteration  22: 6428879.333 ops/s
# Warmup Iteration  23: 6551306.821 ops/s
# Warmup Iteration  24: 6351708.047 ops/s
# Warmup Iteration  25: 6554747.815 ops/s
# Warmup Iteration  26: 6523695.010 ops/s
# Warmup Iteration  27: 6407989.109 ops/s
# Warmup Iteration  28: 6390673.716 ops/s
# Warmup Iteration  29: 6401843.829 ops/s
# Warmup Iteration  30: 6419452.687 ops/s
Iteration   1: 6462950.430 ops/s
Iteration   2: 6489609.353 ops/s
Iteration   3: 6483610.090 ops/s
Iteration   4: 6383026.080 ops/s
Iteration   5: 6503923.497 ops/s
Iteration   6: 6432951.293 ops/s
Iteration   7: 6378419.247 ops/s
Iteration   8: 6335811.436 ops/s
Iteration   9: 6387409.018 ops/s
Iteration  10: 6357570.032 ops/s
Iteration  11: 6363332.391 ops/s
Iteration  12: 6509320.647 ops/s
Iteration  13: 6546524.392 ops/s
Iteration  14: 6631663.413 ops/s
Iteration  15: 6420893.921 ops/s
Iteration  16: 6397631.449 ops/s
Iteration  17: 6625093.924 ops/s
Iteration  18: 6615784.075 ops/s
Iteration  19: 6367330.895 ops/s
Iteration  20: 6390602.670 ops/s
Iteration  21: 6661625.068 ops/s
Iteration  22: 6347237.151 ops/s
Iteration  23: 6656548.625 ops/s
Iteration  24: 6586229.009 ops/s
Iteration  25: 6433320.010 ops/s
Iteration  26: 6320854.012 ops/s
Iteration  27: 6348848.573 ops/s
Iteration  28: 6376109.558 ops/s
Iteration  29: 6373476.938 ops/s
Iteration  30: 6454916.700 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedList_with_comparator":
  6454754.130 ±(99.9%) 70295.209 ops/s [Average]
  (min, avg, max) = (6320854.012, 6454754.130, 6661625.068), stdev = 105214.568
  CI (99.9%): [6384458.921, 6525049.339] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedList_with_comparator  thrpt   30  6454754.130 ± 70295.209  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 602503.600 ops/s
# Warmup Iteration   2: 1432944.328 ops/s
# Warmup Iteration   3: 1524999.448 ops/s
# Warmup Iteration   4: 1333299.430 ops/s
# Warmup Iteration   5: 1458397.398 ops/s
# Warmup Iteration   6: 1526892.141 ops/s
# Warmup Iteration   7: 1527013.582 ops/s
# Warmup Iteration   8: 1527240.117 ops/s
# Warmup Iteration   9: 1524973.449 ops/s
# Warmup Iteration  10: 1457777.275 ops/s
# Warmup Iteration  11: 1442551.536 ops/s
# Warmup Iteration  12: 1428651.652 ops/s
# Warmup Iteration  13: 1430188.994 ops/s
# Warmup Iteration  14: 1423018.524 ops/s
# Warmup Iteration  15: 1429625.177 ops/s
# Warmup Iteration  16: 1420701.887 ops/s
# Warmup Iteration  17: 1433548.867 ops/s
# Warmup Iteration  18: 1437256.290 ops/s
# Warmup Iteration  19: 1423410.690 ops/s
# Warmup Iteration  20: 1431025.079 ops/s
# Warmup Iteration  21: 1427373.008 ops/s
# Warmup Iteration  22: 1420591.592 ops/s
# Warmup Iteration  23: 1434498.345 ops/s
# Warmup Iteration  24: 1430331.269 ops/s
# Warmup Iteration  25: 1457241.125 ops/s
# Warmup Iteration  26: 1460583.207 ops/s
# Warmup Iteration  27: 1434052.226 ops/s
# Warmup Iteration  28: 1440271.534 ops/s
# Warmup Iteration  29: 1425477.458 ops/s
# Warmup Iteration  30: 1437889.621 ops/s
Iteration   1: 1438758.415 ops/s
Iteration   2: 1462135.679 ops/s
Iteration   3: 1422662.027 ops/s
Iteration   4: 1445634.978 ops/s
Iteration   5: 1420790.219 ops/s
Iteration   6: 1411765.145 ops/s
Iteration   7: 1406542.499 ops/s
Iteration   8: 1425344.113 ops/s
Iteration   9: 1425744.705 ops/s
Iteration  10: 1425288.888 ops/s
Iteration  11: 1440180.362 ops/s
Iteration  12: 1459052.287 ops/s
Iteration  13: 1443013.535 ops/s
Iteration  14: 1469709.223 ops/s
Iteration  15: 1449828.409 ops/s
Iteration  16: 1412289.266 ops/s
Iteration  17: 1435669.897 ops/s
Iteration  18: 1422746.594 ops/s
Iteration  19: 1526229.607 ops/s
Iteration  20: 1446524.980 ops/s
Iteration  21: 1427263.077 ops/s
Iteration  22: 1447943.109 ops/s
Iteration  23: 1434202.919 ops/s
Iteration  24: 1416203.125 ops/s
Iteration  25: 1468098.011 ops/s
Iteration  26: 1495253.389 ops/s
Iteration  27: 1484665.569 ops/s
Iteration  28: 1475498.223 ops/s
Iteration  29: 1450440.954 ops/s
Iteration  30: 1462112.443 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedSetBy":
  1445053.055 ±(99.9%) 18154.502 ops/s [Average]
  (min, avg, max) = (1406542.499, 1445053.055, 1526229.607), stdev = 27172.805
  CI (99.9%): [1426898.553, 1463207.557] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedSetBy  thrpt   30  1445053.055 ± 18154.502  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 679286.504 ops/s
# Warmup Iteration   2: 1280297.379 ops/s
# Warmup Iteration   3: 1435870.183 ops/s
# Warmup Iteration   4: 1463240.257 ops/s
# Warmup Iteration   5: 1387007.668 ops/s
# Warmup Iteration   6: 1255534.964 ops/s
# Warmup Iteration   7: 1444168.940 ops/s
# Warmup Iteration   8: 1432899.932 ops/s
# Warmup Iteration   9: 1490156.057 ops/s
# Warmup Iteration  10: 1550971.431 ops/s
# Warmup Iteration  11: 1474452.078 ops/s
# Warmup Iteration  12: 1448027.301 ops/s
# Warmup Iteration  13: 1446930.142 ops/s
# Warmup Iteration  14: 1446753.015 ops/s
# Warmup Iteration  15: 1445616.372 ops/s
# Warmup Iteration  16: 1492514.219 ops/s
# Warmup Iteration  17: 1551839.879 ops/s
# Warmup Iteration  18: 1553616.560 ops/s
# Warmup Iteration  19: 1550473.783 ops/s
# Warmup Iteration  20: 1552223.583 ops/s
# Warmup Iteration  21: 1549603.421 ops/s
# Warmup Iteration  22: 1550848.098 ops/s
# Warmup Iteration  23: 1552128.428 ops/s
# Warmup Iteration  24: 1550964.698 ops/s
# Warmup Iteration  25: 1500666.939 ops/s
# Warmup Iteration  26: 1469965.762 ops/s
# Warmup Iteration  27: 1456135.467 ops/s
# Warmup Iteration  28: 1450615.458 ops/s
# Warmup Iteration  29: 1454391.983 ops/s
# Warmup Iteration  30: 1472850.593 ops/s
Iteration   1: 1479068.533 ops/s
Iteration   2: 1470449.633 ops/s
Iteration   3: 1448831.898 ops/s
Iteration   4: 1441337.594 ops/s
Iteration   5: 1446042.460 ops/s
Iteration   6: 1484121.502 ops/s
Iteration   7: 1511814.416 ops/s
Iteration   8: 1441166.065 ops/s
Iteration   9: 1432209.904 ops/s
Iteration  10: 1454398.635 ops/s
Iteration  11: 1431645.321 ops/s
Iteration  12: 1411940.609 ops/s
Iteration  13: 1465561.301 ops/s
Iteration  14: 1437334.390 ops/s
Iteration  15: 1475309.858 ops/s
Iteration  16: 1469100.643 ops/s
Iteration  17: 1437412.727 ops/s
Iteration  18: 1471616.803 ops/s
Iteration  19: 1479502.214 ops/s
Iteration  20: 1468236.061 ops/s
Iteration  21: 1499825.017 ops/s
Iteration  22: 1462236.348 ops/s
Iteration  23: 1454608.202 ops/s
Iteration  24: 1435464.575 ops/s
Iteration  25: 1469604.471 ops/s
Iteration  26: 1461619.225 ops/s
Iteration  27: 1430816.413 ops/s
Iteration  28: 1460253.379 ops/s
Iteration  29: 1466634.490 ops/s
Iteration  30: 1503891.359 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator":
  1460068.468 ±(99.9%) 15581.698 ops/s [Average]
  (min, avg, max) = (1411940.609, 1460068.468, 1511814.416), stdev = 23321.954
  CI (99.9%): [1444486.770, 1475650.166] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator  thrpt   30  1460068.468 ± 15581.698  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1495542.620 ops/s
# Warmup Iteration   2: 3696916.720 ops/s
# Warmup Iteration   3: 3897395.211 ops/s
# Warmup Iteration   4: 3172965.311 ops/s
# Warmup Iteration   5: 3832660.294 ops/s
# Warmup Iteration   6: 3796560.483 ops/s
# Warmup Iteration   7: 3846024.199 ops/s
# Warmup Iteration   8: 3822388.650 ops/s
# Warmup Iteration   9: 3838833.145 ops/s
# Warmup Iteration  10: 3797390.960 ops/s
# Warmup Iteration  11: 3798122.118 ops/s
# Warmup Iteration  12: 3795826.073 ops/s
# Warmup Iteration  13: 3777917.516 ops/s
# Warmup Iteration  14: 3762047.498 ops/s
# Warmup Iteration  15: 3771253.057 ops/s
# Warmup Iteration  16: 3755825.794 ops/s
# Warmup Iteration  17: 3752111.677 ops/s
# Warmup Iteration  18: 3756136.920 ops/s
# Warmup Iteration  19: 3753804.844 ops/s
# Warmup Iteration  20: 3754358.740 ops/s
# Warmup Iteration  21: 3739522.002 ops/s
# Warmup Iteration  22: 3866066.092 ops/s
# Warmup Iteration  23: 3815982.960 ops/s
# Warmup Iteration  24: 4015241.538 ops/s
# Warmup Iteration  25: 3911162.113 ops/s
# Warmup Iteration  26: 3698171.147 ops/s
# Warmup Iteration  27: 3738435.829 ops/s
# Warmup Iteration  28: 3842028.500 ops/s
# Warmup Iteration  29: 3814740.775 ops/s
# Warmup Iteration  30: 4000734.845 ops/s
Iteration   1: 4029905.547 ops/s
Iteration   2: 4030295.007 ops/s
Iteration   3: 4026237.822 ops/s
Iteration   4: 4030197.673 ops/s
Iteration   5: 4030760.131 ops/s
Iteration   6: 4028421.218 ops/s
Iteration   7: 4024774.459 ops/s
Iteration   8: 4029180.921 ops/s
Iteration   9: 4029032.939 ops/s
Iteration  10: 4027008.309 ops/s
Iteration  11: 4008947.060 ops/s
Iteration  12: 4027204.475 ops/s
Iteration  13: 4018846.265 ops/s
Iteration  14: 4028874.289 ops/s
Iteration  15: 4025077.562 ops/s
Iteration  16: 4027141.767 ops/s
Iteration  17: 3825462.620 ops/s
Iteration  18: 3814125.074 ops/s
Iteration  19: 3832383.762 ops/s
Iteration  20: 3740998.306 ops/s
Iteration  21: 3803989.367 ops/s
Iteration  22: 3969489.576 ops/s
Iteration  23: 3767938.929 ops/s
Iteration  24: 3853034.571 ops/s
Iteration  25: 3861850.633 ops/s
Iteration  26: 3832964.257 ops/s
Iteration  27: 3777359.845 ops/s
Iteration  28: 3796965.173 ops/s
Iteration  29: 3828707.114 ops/s
Iteration  30: 3845219.816 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toList":
  3932413.150 ±(99.9%) 72406.558 ops/s [Average]
  (min, avg, max) = (3740998.306, 3932413.150, 4030760.131), stdev = 108374.735
  CI (99.9%): [3860006.592, 4004819.707] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toList  thrpt   30  3932413.150 ± 72406.558  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1103476.719 ops/s
# Warmup Iteration   2: 2911559.353 ops/s
# Warmup Iteration   3: 2986825.653 ops/s
# Warmup Iteration   4: 2446693.385 ops/s
# Warmup Iteration   5: 2950487.836 ops/s
# Warmup Iteration   6: 2946866.830 ops/s
# Warmup Iteration   7: 2936778.797 ops/s
# Warmup Iteration   8: 3067421.327 ops/s
# Warmup Iteration   9: 2956519.010 ops/s
# Warmup Iteration  10: 3037236.699 ops/s
# Warmup Iteration  11: 3145968.446 ops/s
# Warmup Iteration  12: 3045221.026 ops/s
# Warmup Iteration  13: 3001217.287 ops/s
# Warmup Iteration  14: 2951864.602 ops/s
# Warmup Iteration  15: 3037536.960 ops/s
# Warmup Iteration  16: 3019089.505 ops/s
# Warmup Iteration  17: 3060520.994 ops/s
# Warmup Iteration  18: 2909802.070 ops/s
# Warmup Iteration  19: 2992247.532 ops/s
# Warmup Iteration  20: 3012007.493 ops/s
# Warmup Iteration  21: 3013039.697 ops/s
# Warmup Iteration  22: 3039812.289 ops/s
# Warmup Iteration  23: 3019768.903 ops/s
# Warmup Iteration  24: 2953636.842 ops/s
# Warmup Iteration  25: 3020627.667 ops/s
# Warmup Iteration  26: 2953459.576 ops/s
# Warmup Iteration  27: 2965522.798 ops/s
# Warmup Iteration  28: 2938708.434 ops/s
# Warmup Iteration  29: 2928821.032 ops/s
# Warmup Iteration  30: 2970997.907 ops/s
Iteration   1: 2968202.834 ops/s
Iteration   2: 3000725.935 ops/s
Iteration   3: 3035454.857 ops/s
Iteration   4: 3137951.506 ops/s
Iteration   5: 3139833.215 ops/s
Iteration   6: 3147491.549 ops/s
Iteration   7: 3080313.866 ops/s
Iteration   8: 2951455.514 ops/s
Iteration   9: 2989340.373 ops/s
Iteration  10: 2931533.942 ops/s
Iteration  11: 2907100.256 ops/s
Iteration  12: 2967586.310 ops/s
Iteration  13: 2926072.832 ops/s
Iteration  14: 2932987.088 ops/s
Iteration  15: 2893549.706 ops/s
Iteration  16: 2916551.941 ops/s
Iteration  17: 2948641.440 ops/s
Iteration  18: 2965030.641 ops/s
Iteration  19: 2997477.249 ops/s
Iteration  20: 2986698.609 ops/s
Iteration  21: 2920278.410 ops/s
Iteration  22: 3038059.951 ops/s
Iteration  23: 2995200.806 ops/s
Iteration  24: 3004129.673 ops/s
Iteration  25: 2932462.503 ops/s
Iteration  26: 2942944.168 ops/s
Iteration  27: 2977131.837 ops/s
Iteration  28: 2964500.353 ops/s
Iteration  29: 3146345.816 ops/s
Iteration  30: 3150621.782 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toMap":
  2996522.499 ±(99.9%) 52545.163 ops/s [Average]
  (min, avg, max) = (2893549.706, 2996522.499, 3150621.782), stdev = 78647.133
  CI (99.9%): [2943977.335, 3049067.662] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toMap  thrpt   30  2996522.499 ± 52545.163  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toMapOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toMapOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2178799.253 ops/s
# Warmup Iteration   2: 4405579.384 ops/s
# Warmup Iteration   3: 4461009.953 ops/s
# Warmup Iteration   4: 4469171.428 ops/s
# Warmup Iteration   5: 3660633.275 ops/s
# Warmup Iteration   6: 4462167.369 ops/s
# Warmup Iteration   7: 4463004.285 ops/s
# Warmup Iteration   8: 4330497.806 ops/s
# Warmup Iteration   9: 4411480.538 ops/s
# Warmup Iteration  10: 4462389.246 ops/s
# Warmup Iteration  11: 4260371.070 ops/s
# Warmup Iteration  12: 4284426.921 ops/s
# Warmup Iteration  13: 4150742.440 ops/s
# Warmup Iteration  14: 4216161.112 ops/s
# Warmup Iteration  15: 4203588.630 ops/s
# Warmup Iteration  16: 4183598.440 ops/s
# Warmup Iteration  17: 4189263.248 ops/s
# Warmup Iteration  18: 4268483.754 ops/s
# Warmup Iteration  19: 4316894.566 ops/s
# Warmup Iteration  20: 4492881.330 ops/s
# Warmup Iteration  21: 4486936.757 ops/s
# Warmup Iteration  22: 4492229.200 ops/s
# Warmup Iteration  23: 4491798.792 ops/s
# Warmup Iteration  24: 4484660.287 ops/s
# Warmup Iteration  25: 4489323.631 ops/s
# Warmup Iteration  26: 4491943.385 ops/s
# Warmup Iteration  27: 4486281.905 ops/s
# Warmup Iteration  28: 4484823.037 ops/s
# Warmup Iteration  29: 4494387.623 ops/s
# Warmup Iteration  30: 4487445.078 ops/s
Iteration   1: 4451834.344 ops/s
Iteration   2: 4437034.277 ops/s
Iteration   3: 4387706.007 ops/s
Iteration   4: 4479551.905 ops/s
Iteration   5: 4450470.241 ops/s
Iteration   6: 4461852.923 ops/s
Iteration   7: 4436549.202 ops/s
Iteration   8: 4484613.217 ops/s
Iteration   9: 4428469.725 ops/s
Iteration  10: 4424676.042 ops/s
Iteration  11: 4466990.648 ops/s
Iteration  12: 4460050.849 ops/s
Iteration  13: 4414060.367 ops/s
Iteration  14: 4459031.320 ops/s
Iteration  15: 4417920.394 ops/s
Iteration  16: 4398500.208 ops/s
Iteration  17: 4408873.218 ops/s
Iteration  18: 4403369.437 ops/s
Iteration  19: 4408496.931 ops/s
Iteration  20: 4458499.415 ops/s
Iteration  21: 4484718.007 ops/s
Iteration  22: 4415152.101 ops/s
Iteration  23: 4433744.989 ops/s
Iteration  24: 4467166.060 ops/s
Iteration  25: 4488484.057 ops/s
Iteration  26: 4493126.252 ops/s
Iteration  27: 4494486.717 ops/s
Iteration  28: 4491367.729 ops/s
Iteration  29: 4472914.965 ops/s
Iteration  30: 4478708.746 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toMapOfItemToCount":
  4448614.010 ±(99.9%) 21473.090 ops/s [Average]
  (min, avg, max) = (4387706.007, 4448614.010, 4494486.717), stdev = 32139.913
  CI (99.9%): [4427140.920, 4470087.100] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toMapOfItemToCount  thrpt   30  4448614.010 ± 21473.090  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toMapTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toMapTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1082882.123 ops/s
# Warmup Iteration   2: 2594105.359 ops/s
# Warmup Iteration   3: 2477647.811 ops/s
# Warmup Iteration   4: 2372635.458 ops/s
# Warmup Iteration   5: 2659208.945 ops/s
# Warmup Iteration   6: 2624026.869 ops/s
# Warmup Iteration   7: 2595010.713 ops/s
# Warmup Iteration   8: 2661470.664 ops/s
# Warmup Iteration   9: 2674390.859 ops/s
# Warmup Iteration  10: 2621086.221 ops/s
# Warmup Iteration  11: 2598238.269 ops/s
# Warmup Iteration  12: 2616907.765 ops/s
# Warmup Iteration  13: 2662751.613 ops/s
# Warmup Iteration  14: 2773874.538 ops/s
# Warmup Iteration  15: 2772939.669 ops/s
# Warmup Iteration  16: 2769555.938 ops/s
# Warmup Iteration  17: 2752203.468 ops/s
# Warmup Iteration  18: 2753330.943 ops/s
# Warmup Iteration  19: 2751702.507 ops/s
# Warmup Iteration  20: 2753521.553 ops/s
# Warmup Iteration  21: 2752309.417 ops/s
# Warmup Iteration  22: 2704596.521 ops/s
# Warmup Iteration  23: 2641922.568 ops/s
# Warmup Iteration  24: 2661173.537 ops/s
# Warmup Iteration  25: 2661905.870 ops/s
# Warmup Iteration  26: 2638433.942 ops/s
# Warmup Iteration  27: 2643114.084 ops/s
# Warmup Iteration  28: 2562259.852 ops/s
# Warmup Iteration  29: 2595435.487 ops/s
# Warmup Iteration  30: 2616145.069 ops/s
Iteration   1: 2695027.614 ops/s
Iteration   2: 2609113.739 ops/s
Iteration   3: 2729163.770 ops/s
Iteration   4: 2662808.114 ops/s
Iteration   5: 2575613.052 ops/s
Iteration   6: 2563705.873 ops/s
Iteration   7: 2657088.811 ops/s
Iteration   8: 2542430.804 ops/s
Iteration   9: 2670268.257 ops/s
Iteration  10: 2579062.597 ops/s
Iteration  11: 2549819.113 ops/s
Iteration  12: 2576099.199 ops/s
Iteration  13: 2541681.067 ops/s
Iteration  14: 2607720.306 ops/s
Iteration  15: 2628834.198 ops/s
Iteration  16: 2588123.484 ops/s
Iteration  17: 2597417.897 ops/s
Iteration  18: 2589549.018 ops/s
Iteration  19: 2649282.203 ops/s
Iteration  20: 2618002.559 ops/s
Iteration  21: 2533182.630 ops/s
Iteration  22: 2608422.967 ops/s
Iteration  23: 2531043.554 ops/s
Iteration  24: 2565154.307 ops/s
Iteration  25: 2597545.549 ops/s
Iteration  26: 2590003.557 ops/s
Iteration  27: 2579678.034 ops/s
Iteration  28: 2529298.180 ops/s
Iteration  29: 2579355.677 ops/s
Iteration  30: 2674194.933 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toMapTarget":
  2600623.035 ±(99.9%) 34188.050 ops/s [Average]
  (min, avg, max) = (2529298.180, 2600623.035, 2729163.770), stdev = 51171.068
  CI (99.9%): [2566434.985, 2634811.085] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toMapTarget  thrpt   30  2600623.035 ± 34188.050  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1078631.305 ops/s
# Warmup Iteration   2: 2229070.226 ops/s
# Warmup Iteration   3: 2420972.124 ops/s
# Warmup Iteration   4: 2409083.012 ops/s
# Warmup Iteration   5: 1956370.518 ops/s
# Warmup Iteration   6: 2420838.526 ops/s
# Warmup Iteration   7: 2448191.612 ops/s
# Warmup Iteration   8: 2428468.431 ops/s
# Warmup Iteration   9: 2414355.347 ops/s
# Warmup Iteration  10: 2394488.468 ops/s
# Warmup Iteration  11: 2387001.410 ops/s
# Warmup Iteration  12: 2402120.012 ops/s
# Warmup Iteration  13: 2405084.398 ops/s
# Warmup Iteration  14: 2409089.270 ops/s
# Warmup Iteration  15: 2414028.514 ops/s
# Warmup Iteration  16: 2398316.274 ops/s
# Warmup Iteration  17: 2391932.250 ops/s
# Warmup Iteration  18: 2440076.047 ops/s
# Warmup Iteration  19: 2451511.835 ops/s
# Warmup Iteration  20: 2428660.635 ops/s
# Warmup Iteration  21: 2438856.344 ops/s
# Warmup Iteration  22: 2485410.495 ops/s
# Warmup Iteration  23: 2421855.738 ops/s
# Warmup Iteration  24: 2491399.765 ops/s
# Warmup Iteration  25: 2464793.888 ops/s
# Warmup Iteration  26: 2566155.564 ops/s
# Warmup Iteration  27: 2418318.599 ops/s
# Warmup Iteration  28: 2525196.924 ops/s
# Warmup Iteration  29: 2568221.072 ops/s
# Warmup Iteration  30: 2565069.729 ops/s
Iteration   1: 2565497.733 ops/s
Iteration   2: 2569037.644 ops/s
Iteration   3: 2562412.654 ops/s
Iteration   4: 2563029.569 ops/s
Iteration   5: 2561300.544 ops/s
Iteration   6: 2568888.442 ops/s
Iteration   7: 2563930.580 ops/s
Iteration   8: 2567272.910 ops/s
Iteration   9: 2563911.321 ops/s
Iteration  10: 2568480.043 ops/s
Iteration  11: 2557436.574 ops/s
Iteration  12: 2563928.536 ops/s
Iteration  13: 2561252.549 ops/s
Iteration  14: 2513451.446 ops/s
Iteration  15: 2439678.727 ops/s
Iteration  16: 2501992.155 ops/s
Iteration  17: 2471286.584 ops/s
Iteration  18: 2502754.408 ops/s
Iteration  19: 2466283.017 ops/s
Iteration  20: 2442589.656 ops/s
Iteration  21: 2487828.607 ops/s
Iteration  22: 2432748.182 ops/s
Iteration  23: 2493605.353 ops/s
Iteration  24: 2427359.471 ops/s
Iteration  25: 2434069.959 ops/s
Iteration  26: 2439738.335 ops/s
Iteration  27: 2429732.058 ops/s
Iteration  28: 2423882.867 ops/s
Iteration  29: 2409228.334 ops/s
Iteration  30: 2466730.349 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSet":
  2503977.954 ±(99.9%) 39352.493 ops/s [Average]
  (min, avg, max) = (2409228.334, 2503977.954, 2569037.644), stdev = 58900.964
  CI (99.9%): [2464625.460, 2543330.447] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toSet  thrpt   30  2503977.954 ± 39352.493  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 300370.048 ops/s
# Warmup Iteration   2: 602084.015 ops/s
# Warmup Iteration   3: 702194.037 ops/s
# Warmup Iteration   4: 707116.159 ops/s
# Warmup Iteration   5: 587417.012 ops/s
# Warmup Iteration   6: 672869.310 ops/s
# Warmup Iteration   7: 687361.394 ops/s
# Warmup Iteration   8: 667029.318 ops/s
# Warmup Iteration   9: 675619.320 ops/s
# Warmup Iteration  10: 689147.883 ops/s
# Warmup Iteration  11: 672871.317 ops/s
# Warmup Iteration  12: 671754.879 ops/s
# Warmup Iteration  13: 698004.728 ops/s
# Warmup Iteration  14: 682196.172 ops/s
# Warmup Iteration  15: 675754.716 ops/s
# Warmup Iteration  16: 688740.482 ops/s
# Warmup Iteration  17: 662102.907 ops/s
# Warmup Iteration  18: 665824.240 ops/s
# Warmup Iteration  19: 673980.457 ops/s
# Warmup Iteration  20: 670836.315 ops/s
# Warmup Iteration  21: 697033.511 ops/s
# Warmup Iteration  22: 705284.571 ops/s
# Warmup Iteration  23: 682914.974 ops/s
# Warmup Iteration  24: 682312.522 ops/s
# Warmup Iteration  25: 678568.100 ops/s
# Warmup Iteration  26: 679719.084 ops/s
# Warmup Iteration  27: 678481.577 ops/s
# Warmup Iteration  28: 671186.028 ops/s
# Warmup Iteration  29: 674990.131 ops/s
# Warmup Iteration  30: 678981.514 ops/s
Iteration   1: 680740.867 ops/s
Iteration   2: 675306.746 ops/s
Iteration   3: 680156.993 ops/s
Iteration   4: 672055.904 ops/s
Iteration   5: 667244.166 ops/s
Iteration   6: 660233.764 ops/s
Iteration   7: 668107.907 ops/s
Iteration   8: 665451.003 ops/s
Iteration   9: 667269.972 ops/s
Iteration  10: 668501.293 ops/s
Iteration  11: 664390.966 ops/s
Iteration  12: 657942.485 ops/s
Iteration  13: 667206.218 ops/s
Iteration  14: 670875.893 ops/s
Iteration  15: 666950.811 ops/s
Iteration  16: 674036.315 ops/s
Iteration  17: 681602.429 ops/s
Iteration  18: 667777.395 ops/s
Iteration  19: 672894.422 ops/s
Iteration  20: 670847.408 ops/s
Iteration  21: 683625.309 ops/s
Iteration  22: 686126.764 ops/s
Iteration  23: 686293.865 ops/s
Iteration  24: 705009.334 ops/s
Iteration  25: 712600.867 ops/s
Iteration  26: 712156.501 ops/s
Iteration  27: 711807.865 ops/s
Iteration  28: 713598.626 ops/s
Iteration  29: 711986.848 ops/s
Iteration  30: 711837.273 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedBagBy":
  681154.540 ±(99.9%) 12222.601 ops/s [Average]
  (min, avg, max) = (657942.485, 681154.540, 713598.626), stdev = 18294.216
  CI (99.9%): [668931.939, 693377.142] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  681154.540 ± 12222.601  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 499609.600 ops/s
# Warmup Iteration   2: 990109.305 ops/s
# Warmup Iteration   3: 1098065.663 ops/s
# Warmup Iteration   4: 1106158.946 ops/s
# Warmup Iteration   5: 964567.705 ops/s
# Warmup Iteration   6: 1036688.271 ops/s
# Warmup Iteration   7: 1058793.195 ops/s
# Warmup Iteration   8: 1055514.056 ops/s
# Warmup Iteration   9: 1044425.938 ops/s
# Warmup Iteration  10: 1044875.543 ops/s
# Warmup Iteration  11: 1042483.428 ops/s
# Warmup Iteration  12: 1056469.628 ops/s
# Warmup Iteration  13: 1037418.095 ops/s
# Warmup Iteration  14: 1041685.801 ops/s
# Warmup Iteration  15: 1085066.962 ops/s
# Warmup Iteration  16: 1108642.023 ops/s
# Warmup Iteration  17: 1108451.187 ops/s
# Warmup Iteration  18: 1072242.082 ops/s
# Warmup Iteration  19: 1099993.977 ops/s
# Warmup Iteration  20: 1104954.049 ops/s
# Warmup Iteration  21: 1108821.251 ops/s
# Warmup Iteration  22: 1107155.968 ops/s
# Warmup Iteration  23: 1108405.943 ops/s
# Warmup Iteration  24: 1108659.969 ops/s
# Warmup Iteration  25: 1108057.745 ops/s
# Warmup Iteration  26: 1106057.111 ops/s
# Warmup Iteration  27: 1108306.625 ops/s
# Warmup Iteration  28: 1107595.241 ops/s
# Warmup Iteration  29: 1108657.763 ops/s
# Warmup Iteration  30: 1107383.053 ops/s
Iteration   1: 1109448.649 ops/s
Iteration   2: 1108099.514 ops/s
Iteration   3: 1103587.529 ops/s
Iteration   4: 1106693.401 ops/s
Iteration   5: 1105718.784 ops/s
Iteration   6: 1072600.654 ops/s
Iteration   7: 1109496.379 ops/s
Iteration   8: 1107162.954 ops/s
Iteration   9: 1101439.191 ops/s
Iteration  10: 1099089.591 ops/s
Iteration  11: 1100851.146 ops/s
Iteration  12: 1109604.165 ops/s
Iteration  13: 1105765.022 ops/s
Iteration  14: 1105034.373 ops/s
Iteration  15: 1108037.002 ops/s
Iteration  16: 1106685.966 ops/s
Iteration  17: 1107033.641 ops/s
Iteration  18: 1109519.386 ops/s
Iteration  19: 1106973.843 ops/s
Iteration  20: 1109899.866 ops/s
Iteration  21: 1106513.956 ops/s
Iteration  22: 1108484.920 ops/s
Iteration  23: 1109671.909 ops/s
Iteration  24: 1107639.979 ops/s
Iteration  25: 1108391.504 ops/s
Iteration  26: 1107458.452 ops/s
Iteration  27: 1108937.430 ops/s
Iteration  28: 1108003.834 ops/s
Iteration  29: 1109793.093 ops/s
Iteration  30: 1106610.234 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedBag_natural_ordering":
  1105808.212 ±(99.9%) 4561.506 ops/s [Average]
  (min, avg, max) = (1072600.654, 1105808.212, 1109899.866), stdev = 6827.448
  CI (99.9%): [1101246.706, 1110369.718] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedBag_natural_ordering  thrpt   30  1105808.212 ± 4561.506  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 583737.070 ops/s
# Warmup Iteration   2: 1139877.080 ops/s
# Warmup Iteration   3: 1291748.609 ops/s
# Warmup Iteration   4: 1299788.864 ops/s
# Warmup Iteration   5: 1193101.186 ops/s
# Warmup Iteration   6: 1124722.397 ops/s
# Warmup Iteration   7: 1229961.242 ops/s
# Warmup Iteration   8: 1236701.376 ops/s
# Warmup Iteration   9: 1231806.407 ops/s
# Warmup Iteration  10: 1248734.995 ops/s
# Warmup Iteration  11: 1261177.264 ops/s
# Warmup Iteration  12: 1302662.119 ops/s
# Warmup Iteration  13: 1301694.103 ops/s
# Warmup Iteration  14: 1303271.893 ops/s
# Warmup Iteration  15: 1303986.448 ops/s
# Warmup Iteration  16: 1300524.932 ops/s
# Warmup Iteration  17: 1301498.787 ops/s
# Warmup Iteration  18: 1301458.397 ops/s
# Warmup Iteration  19: 1299722.304 ops/s
# Warmup Iteration  20: 1289104.329 ops/s
# Warmup Iteration  21: 1242864.496 ops/s
# Warmup Iteration  22: 1226417.021 ops/s
# Warmup Iteration  23: 1292573.951 ops/s
# Warmup Iteration  24: 1259227.858 ops/s
# Warmup Iteration  25: 1234338.454 ops/s
# Warmup Iteration  26: 1226796.378 ops/s
# Warmup Iteration  27: 1246120.985 ops/s
# Warmup Iteration  28: 1262593.916 ops/s
# Warmup Iteration  29: 1251832.163 ops/s
# Warmup Iteration  30: 1242993.167 ops/s
Iteration   1: 1228291.171 ops/s
Iteration   2: 1225658.593 ops/s
Iteration   3: 1279100.331 ops/s
Iteration   4: 1248139.299 ops/s
Iteration   5: 1231669.291 ops/s
Iteration   6: 1248022.352 ops/s
Iteration   7: 1218491.085 ops/s
Iteration   8: 1221027.084 ops/s
Iteration   9: 1210211.737 ops/s
Iteration  10: 1206906.327 ops/s
Iteration  11: 1216515.365 ops/s
Iteration  12: 1242431.913 ops/s
Iteration  13: 1244890.032 ops/s
Iteration  14: 1231312.879 ops/s
Iteration  15: 1285384.364 ops/s
Iteration  16: 1304342.602 ops/s
Iteration  17: 1240439.932 ops/s
Iteration  18: 1220186.750 ops/s
Iteration  19: 1224722.687 ops/s
Iteration  20: 1223530.647 ops/s
Iteration  21: 1286960.449 ops/s
Iteration  22: 1234580.275 ops/s
Iteration  23: 1237458.025 ops/s
Iteration  24: 1231251.747 ops/s
Iteration  25: 1264367.567 ops/s
Iteration  26: 1227848.113 ops/s
Iteration  27: 1209583.860 ops/s
Iteration  28: 1227497.995 ops/s
Iteration  29: 1231153.804 ops/s
Iteration  30: 1238110.415 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedBag_with_comparator":
  1238002.890 ±(99.9%) 16048.809 ops/s [Average]
  (min, avg, max) = (1206906.327, 1238002.890, 1304342.602), stdev = 24021.104
  CI (99.9%): [1221954.080, 1254051.699] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedBag_with_comparator  thrpt   30  1238002.890 ± 16048.809  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedBag_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedBag_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 499548.509 ops/s
# Warmup Iteration   2: 549569.585 ops/s
# Warmup Iteration   3: 662874.379 ops/s
# Warmup Iteration   4: 733341.029 ops/s
# Warmup Iteration   5: 746974.704 ops/s
# Warmup Iteration   6: 722570.142 ops/s
# Warmup Iteration   7: 712528.859 ops/s
# Warmup Iteration   8: 707055.462 ops/s
# Warmup Iteration   9: 715668.321 ops/s
# Warmup Iteration  10: 717688.950 ops/s
# Warmup Iteration  11: 725627.461 ops/s
# Warmup Iteration  12: 728950.511 ops/s
# Warmup Iteration  13: 594986.010 ops/s
# Warmup Iteration  14: 720007.757 ops/s
# Warmup Iteration  15: 716548.722 ops/s
# Warmup Iteration  16: 726249.505 ops/s
# Warmup Iteration  17: 751689.631 ops/s
# Warmup Iteration  18: 748590.304 ops/s
# Warmup Iteration  19: 755604.565 ops/s
# Warmup Iteration  20: 752532.159 ops/s
# Warmup Iteration  21: 763524.120 ops/s
# Warmup Iteration  22: 747692.333 ops/s
# Warmup Iteration  23: 747038.721 ops/s
# Warmup Iteration  24: 745479.899 ops/s
# Warmup Iteration  25: 745004.376 ops/s
# Warmup Iteration  26: 787802.164 ops/s
# Warmup Iteration  27: 789682.853 ops/s
# Warmup Iteration  28: 789376.683 ops/s
# Warmup Iteration  29: 791577.854 ops/s
# Warmup Iteration  30: 790690.916 ops/s
Iteration   1: 787852.806 ops/s
Iteration   2: 787019.038 ops/s
Iteration   3: 792701.023 ops/s
Iteration   4: 788615.867 ops/s
Iteration   5: 790366.626 ops/s
Iteration   6: 788637.230 ops/s
Iteration   7: 789851.537 ops/s
Iteration   8: 785180.333 ops/s
Iteration   9: 756320.220 ops/s
Iteration  10: 779168.355 ops/s
Iteration  11: 768362.263 ops/s
Iteration  12: 759937.731 ops/s
Iteration  13: 752070.483 ops/s
Iteration  14: 738182.999 ops/s
Iteration  15: 738005.443 ops/s
Iteration  16: 758292.891 ops/s
Iteration  17: 741130.855 ops/s
Iteration  18: 742519.834 ops/s
Iteration  19: 734721.071 ops/s
Iteration  20: 756848.646 ops/s
Iteration  21: 760437.227 ops/s
Iteration  22: 755763.281 ops/s
Iteration  23: 772576.000 ops/s
Iteration  24: 775021.904 ops/s
Iteration  25: 747560.688 ops/s
Iteration  26: 759034.924 ops/s
Iteration  27: 755765.649 ops/s
Iteration  28: 761167.896 ops/s
Iteration  29: 757394.104 ops/s
Iteration  30: 748277.937 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedBag_with_null":
  764292.829 ±(99.9%) 12166.430 ops/s [Average]
  (min, avg, max) = (734721.071, 764292.829, 792701.023), stdev = 18210.141
  CI (99.9%): [752126.399, 776459.259] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedBag_with_null  thrpt   30  764292.829 ± 12166.430  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 994581.016 ops/s
# Warmup Iteration   2: 1571063.441 ops/s
# Warmup Iteration   3: 1897510.698 ops/s
# Warmup Iteration   4: 1872152.919 ops/s
# Warmup Iteration   5: 1908932.592 ops/s
# Warmup Iteration   6: 1877690.342 ops/s
# Warmup Iteration   7: 1537038.131 ops/s
# Warmup Iteration   8: 1888932.389 ops/s
# Warmup Iteration   9: 1933152.477 ops/s
# Warmup Iteration  10: 1916365.385 ops/s
# Warmup Iteration  11: 1920088.191 ops/s
# Warmup Iteration  12: 1932046.640 ops/s
# Warmup Iteration  13: 1891542.847 ops/s
# Warmup Iteration  14: 1928673.559 ops/s
# Warmup Iteration  15: 1897329.500 ops/s
# Warmup Iteration  16: 1936843.990 ops/s
# Warmup Iteration  17: 1980306.821 ops/s
# Warmup Iteration  18: 1964762.252 ops/s
# Warmup Iteration  19: 1935287.647 ops/s
# Warmup Iteration  20: 1934321.253 ops/s
# Warmup Iteration  21: 1902012.248 ops/s
# Warmup Iteration  22: 1931299.866 ops/s
# Warmup Iteration  23: 1949571.904 ops/s
# Warmup Iteration  24: 1947260.296 ops/s
# Warmup Iteration  25: 1900291.931 ops/s
# Warmup Iteration  26: 1941207.039 ops/s
# Warmup Iteration  27: 1919381.300 ops/s
# Warmup Iteration  28: 1895421.635 ops/s
# Warmup Iteration  29: 1903864.728 ops/s
# Warmup Iteration  30: 1889794.237 ops/s
Iteration   1: 1859493.046 ops/s
Iteration   2: 1897708.484 ops/s
Iteration   3: 1878978.060 ops/s
Iteration   4: 1879717.678 ops/s
Iteration   5: 1884124.205 ops/s
Iteration   6: 1890319.144 ops/s
Iteration   7: 1894905.926 ops/s
Iteration   8: 1902316.212 ops/s
Iteration   9: 1955876.842 ops/s
Iteration  10: 1912181.094 ops/s
Iteration  11: 1852580.760 ops/s
Iteration  12: 1897385.536 ops/s
Iteration  13: 1911349.407 ops/s
Iteration  14: 1955972.105 ops/s
Iteration  15: 1935325.334 ops/s
Iteration  16: 1912347.819 ops/s
Iteration  17: 1953400.515 ops/s
Iteration  18: 1944363.913 ops/s
Iteration  19: 1936309.045 ops/s
Iteration  20: 2002124.438 ops/s
Iteration  21: 2008769.066 ops/s
Iteration  22: 2013573.594 ops/s
Iteration  23: 2010353.747 ops/s
Iteration  24: 2011797.053 ops/s
Iteration  25: 2005790.921 ops/s
Iteration  26: 2011465.545 ops/s
Iteration  27: 2008974.287 ops/s
Iteration  28: 2012151.698 ops/s
Iteration  29: 2009052.730 ops/s
Iteration  30: 2008613.510 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedListBy":
  1945244.057 ±(99.9%) 37092.570 ops/s [Average]
  (min, avg, max) = (1852580.760, 1945244.057, 2013573.594), stdev = 55518.417
  CI (99.9%): [1908151.487, 1982336.627] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedListBy  thrpt   30  1945244.057 ± 37092.570  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedListBy_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedListBy_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1479477.540 ops/s
# Warmup Iteration   2: 2333561.616 ops/s
# Warmup Iteration   3: 2712612.645 ops/s
# Warmup Iteration   4: 2623214.869 ops/s
# Warmup Iteration   5: 2599984.778 ops/s
# Warmup Iteration   6: 2627045.252 ops/s
# Warmup Iteration   7: 2196384.205 ops/s
# Warmup Iteration   8: 2665986.073 ops/s
# Warmup Iteration   9: 2666578.521 ops/s
# Warmup Iteration  10: 2635750.684 ops/s
# Warmup Iteration  11: 2648203.539 ops/s
# Warmup Iteration  12: 2634478.350 ops/s
# Warmup Iteration  13: 2661526.960 ops/s
# Warmup Iteration  14: 2600912.571 ops/s
# Warmup Iteration  15: 2666923.841 ops/s
# Warmup Iteration  16: 2640165.090 ops/s
# Warmup Iteration  17: 2651487.616 ops/s
# Warmup Iteration  18: 2629814.465 ops/s
# Warmup Iteration  19: 2627295.270 ops/s
# Warmup Iteration  20: 2572186.369 ops/s
# Warmup Iteration  21: 2611297.316 ops/s
# Warmup Iteration  22: 2596277.147 ops/s
# Warmup Iteration  23: 2624917.138 ops/s
# Warmup Iteration  24: 2650019.904 ops/s
# Warmup Iteration  25: 2647258.049 ops/s
# Warmup Iteration  26: 2689837.539 ops/s
# Warmup Iteration  27: 2632021.387 ops/s
# Warmup Iteration  28: 2588774.307 ops/s
# Warmup Iteration  29: 2581472.087 ops/s
# Warmup Iteration  30: 2561429.485 ops/s
Iteration   1: 2572407.087 ops/s
Iteration   2: 2673953.914 ops/s
Iteration   3: 2656391.447 ops/s
Iteration   4: 2608991.666 ops/s
Iteration   5: 2634807.697 ops/s
Iteration   6: 2618555.461 ops/s
Iteration   7: 2609806.384 ops/s
Iteration   8: 2576500.240 ops/s
Iteration   9: 2634858.795 ops/s
Iteration  10: 2628993.254 ops/s
Iteration  11: 2641036.121 ops/s
Iteration  12: 2593896.599 ops/s
Iteration  13: 2667216.619 ops/s
Iteration  14: 2536907.726 ops/s
Iteration  15: 2598565.090 ops/s
Iteration  16: 2610266.334 ops/s
Iteration  17: 2662671.785 ops/s
Iteration  18: 2611559.055 ops/s
Iteration  19: 2619558.197 ops/s
Iteration  20: 2581288.891 ops/s
Iteration  21: 2595060.579 ops/s
Iteration  22: 2640415.664 ops/s
Iteration  23: 2629153.124 ops/s
Iteration  24: 2616496.963 ops/s
Iteration  25: 2641796.028 ops/s
Iteration  26: 2650611.574 ops/s
Iteration  27: 2614371.844 ops/s
Iteration  28: 2595293.228 ops/s
Iteration  29: 2568308.695 ops/s
Iteration  30: 2564110.969 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedListBy_with_null":
  2615128.368 ±(99.9%) 22059.994 ops/s [Average]
  (min, avg, max) = (2536907.726, 2615128.368, 2673953.914), stdev = 33018.362
  CI (99.9%): [2593068.374, 2637188.361] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedListBy_with_null  thrpt   30  2615128.368 ± 22059.994  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedListWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedListWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2236608.475 ops/s
# Warmup Iteration   2: 4474963.636 ops/s
# Warmup Iteration   3: 5062249.530 ops/s
# Warmup Iteration   4: 4869907.279 ops/s
# Warmup Iteration   5: 4077904.057 ops/s
# Warmup Iteration   6: 5103069.275 ops/s
# Warmup Iteration   7: 5012538.943 ops/s
# Warmup Iteration   8: 5128549.091 ops/s
# Warmup Iteration   9: 5226244.485 ops/s
# Warmup Iteration  10: 5281974.521 ops/s
# Warmup Iteration  11: 5284852.258 ops/s
# Warmup Iteration  12: 5288361.191 ops/s
# Warmup Iteration  13: 5292485.969 ops/s
# Warmup Iteration  14: 5248631.320 ops/s
# Warmup Iteration  15: 5274312.971 ops/s
# Warmup Iteration  16: 5260083.055 ops/s
# Warmup Iteration  17: 5290900.244 ops/s
# Warmup Iteration  18: 5124992.589 ops/s
# Warmup Iteration  19: 5152662.629 ops/s
# Warmup Iteration  20: 5134241.506 ops/s
# Warmup Iteration  21: 4953885.778 ops/s
# Warmup Iteration  22: 5040667.864 ops/s
# Warmup Iteration  23: 5105056.359 ops/s
# Warmup Iteration  24: 4937834.307 ops/s
# Warmup Iteration  25: 4932792.868 ops/s
# Warmup Iteration  26: 5031608.225 ops/s
# Warmup Iteration  27: 5056951.817 ops/s
# Warmup Iteration  28: 5098409.236 ops/s
# Warmup Iteration  29: 5013948.162 ops/s
# Warmup Iteration  30: 4916628.706 ops/s
Iteration   1: 4995359.707 ops/s
Iteration   2: 4966260.335 ops/s
Iteration   3: 5059821.890 ops/s
Iteration   4: 5021216.489 ops/s
Iteration   5: 5095862.252 ops/s
Iteration   6: 5113986.922 ops/s
Iteration   7: 5041630.687 ops/s
Iteration   8: 4935385.404 ops/s
Iteration   9: 5080094.243 ops/s
Iteration  10: 5011047.999 ops/s
Iteration  11: 4918184.093 ops/s
Iteration  12: 4996069.879 ops/s
Iteration  13: 5022470.767 ops/s
Iteration  14: 5013628.081 ops/s
Iteration  15: 4975197.731 ops/s
Iteration  16: 4944198.388 ops/s
Iteration  17: 5001389.760 ops/s
Iteration  18: 4957633.650 ops/s
Iteration  19: 4976577.785 ops/s
Iteration  20: 4904182.011 ops/s
Iteration  21: 4977793.525 ops/s
Iteration  22: 4972313.712 ops/s
Iteration  23: 5066327.746 ops/s
Iteration  24: 5032736.829 ops/s
Iteration  25: 5035593.657 ops/s
Iteration  26: 5051356.134 ops/s
Iteration  27: 5077034.628 ops/s
Iteration  28: 5053462.179 ops/s
Iteration  29: 4914716.510 ops/s
Iteration  30: 4939553.411 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedListWith":
  5005036.213 ±(99.9%) 37644.374 ops/s [Average]
  (min, avg, max) = (4904182.011, 5005036.213, 5113986.922), stdev = 56344.331
  CI (99.9%): [4967391.839, 5042680.587] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedListWith  thrpt   30  5005036.213 ± 37644.374  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1683219.065 ops/s
# Warmup Iteration   2: 4228783.205 ops/s
# Warmup Iteration   3: 3514539.550 ops/s
# Warmup Iteration   4: 4255420.073 ops/s
# Warmup Iteration   5: 4195903.610 ops/s
# Warmup Iteration   6: 4202843.973 ops/s
# Warmup Iteration   7: 4215954.479 ops/s
# Warmup Iteration   8: 4195687.342 ops/s
# Warmup Iteration   9: 4180516.455 ops/s
# Warmup Iteration  10: 4237763.986 ops/s
# Warmup Iteration  11: 4212910.659 ops/s
# Warmup Iteration  12: 4207040.649 ops/s
# Warmup Iteration  13: 4204274.294 ops/s
# Warmup Iteration  14: 4176587.584 ops/s
# Warmup Iteration  15: 4242585.644 ops/s
# Warmup Iteration  16: 4282202.302 ops/s
# Warmup Iteration  17: 4214887.898 ops/s
# Warmup Iteration  18: 4247951.048 ops/s
# Warmup Iteration  19: 4208564.112 ops/s
# Warmup Iteration  20: 4270988.623 ops/s
# Warmup Iteration  21: 4259169.581 ops/s
# Warmup Iteration  22: 4243940.659 ops/s
# Warmup Iteration  23: 4280425.716 ops/s
# Warmup Iteration  24: 4486470.860 ops/s
# Warmup Iteration  25: 4482576.177 ops/s
# Warmup Iteration  26: 4482425.055 ops/s
# Warmup Iteration  27: 4475934.184 ops/s
# Warmup Iteration  28: 4483622.227 ops/s
# Warmup Iteration  29: 4472145.118 ops/s
# Warmup Iteration  30: 4484283.591 ops/s
Iteration   1: 4484557.323 ops/s
Iteration   2: 4471037.094 ops/s
Iteration   3: 4479448.553 ops/s
Iteration   4: 4429995.792 ops/s
Iteration   5: 4250573.777 ops/s
Iteration   6: 4163077.229 ops/s
Iteration   7: 4322299.422 ops/s
Iteration   8: 4308360.625 ops/s
Iteration   9: 4375645.148 ops/s
Iteration  10: 4284036.524 ops/s
Iteration  11: 4214695.430 ops/s
Iteration  12: 4342754.227 ops/s
Iteration  13: 4441334.296 ops/s
Iteration  14: 4322604.372 ops/s
Iteration  15: 4339163.187 ops/s
Iteration  16: 4419715.596 ops/s
Iteration  17: 4461391.553 ops/s
Iteration  18: 4244696.384 ops/s
Iteration  19: 4291028.578 ops/s
Iteration  20: 4297687.318 ops/s
Iteration  21: 4205862.109 ops/s
Iteration  22: 4275427.848 ops/s
Iteration  23: 4425214.673 ops/s
Iteration  24: 4306886.922 ops/s
Iteration  25: 4204389.963 ops/s
Iteration  26: 4246190.705 ops/s
Iteration  27: 4212437.397 ops/s
Iteration  28: 4194758.058 ops/s
Iteration  29: 4305729.284 ops/s
Iteration  30: 4473657.604 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedList_natural_ordering":
  4326488.566 ±(99.9%) 65638.851 ops/s [Average]
  (min, avg, max) = (4163077.229, 4326488.566, 4484557.323), stdev = 98245.149
  CI (99.9%): [4260849.715, 4392127.417] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedList_natural_ordering  thrpt   30  4326488.566 ± 65638.851  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2265649.463 ops/s
# Warmup Iteration   2: 5757217.685 ops/s
# Warmup Iteration   3: 5409592.634 ops/s
# Warmup Iteration   4: 5078655.170 ops/s
# Warmup Iteration   5: 5635943.224 ops/s
# Warmup Iteration   6: 5510208.616 ops/s
# Warmup Iteration   7: 5769405.389 ops/s
# Warmup Iteration   8: 5800635.240 ops/s
# Warmup Iteration   9: 5525656.430 ops/s
# Warmup Iteration  10: 5476719.498 ops/s
# Warmup Iteration  11: 5425226.778 ops/s
# Warmup Iteration  12: 5490572.762 ops/s
# Warmup Iteration  13: 5538221.474 ops/s
# Warmup Iteration  14: 5434451.552 ops/s
# Warmup Iteration  15: 5428693.216 ops/s
# Warmup Iteration  16: 5525170.339 ops/s
# Warmup Iteration  17: 5442029.406 ops/s
# Warmup Iteration  18: 5495551.191 ops/s
# Warmup Iteration  19: 5588441.593 ops/s
# Warmup Iteration  20: 5604171.050 ops/s
# Warmup Iteration  21: 5473820.555 ops/s
# Warmup Iteration  22: 5455503.438 ops/s
# Warmup Iteration  23: 5468311.230 ops/s
# Warmup Iteration  24: 5536789.200 ops/s
# Warmup Iteration  25: 5541586.963 ops/s
# Warmup Iteration  26: 5439824.164 ops/s
# Warmup Iteration  27: 5460570.235 ops/s
# Warmup Iteration  28: 5600800.114 ops/s
# Warmup Iteration  29: 5808365.902 ops/s
# Warmup Iteration  30: 5807278.823 ops/s
Iteration   1: 5556335.517 ops/s
Iteration   2: 5667708.612 ops/s
Iteration   3: 5804294.482 ops/s
Iteration   4: 5542084.295 ops/s
Iteration   5: 5482952.157 ops/s
Iteration   6: 5678861.594 ops/s
Iteration   7: 5496093.982 ops/s
Iteration   8: 5422438.858 ops/s
Iteration   9: 5391672.659 ops/s
Iteration  10: 5454324.147 ops/s
Iteration  11: 5548915.140 ops/s
Iteration  12: 5488913.208 ops/s
Iteration  13: 5374364.704 ops/s
Iteration  14: 5481253.731 ops/s
Iteration  15: 5730960.468 ops/s
Iteration  16: 5803570.995 ops/s
Iteration  17: 5819301.172 ops/s
Iteration  18: 5792245.683 ops/s
Iteration  19: 5803226.608 ops/s
Iteration  20: 5801941.027 ops/s
Iteration  21: 5817753.469 ops/s
Iteration  22: 5808482.284 ops/s
Iteration  23: 5808708.559 ops/s
Iteration  24: 5802304.175 ops/s
Iteration  25: 5787253.083 ops/s
Iteration  26: 5801821.270 ops/s
Iteration  27: 5794150.741 ops/s
Iteration  28: 5797639.805 ops/s
Iteration  29: 5744988.294 ops/s
Iteration  30: 5713254.115 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedList_with_comparator":
  5667260.495 ±(99.9%) 104552.763 ops/s [Average]
  (min, avg, max) = (5374364.704, 5667260.495, 5819301.172), stdev = 156489.665
  CI (99.9%): [5562707.732, 5771813.257] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score        Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedList_with_comparator  thrpt   30  5667260.495 ± 104552.763  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedList_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedList_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2318250.280 ops/s
# Warmup Iteration   2: 4002318.872 ops/s
# Warmup Iteration   3: 4537514.286 ops/s
# Warmup Iteration   4: 4602233.031 ops/s
# Warmup Iteration   5: 4609965.420 ops/s
# Warmup Iteration   6: 3710263.072 ops/s
# Warmup Iteration   7: 4440085.265 ops/s
# Warmup Iteration   8: 4431158.359 ops/s
# Warmup Iteration   9: 4391228.370 ops/s
# Warmup Iteration  10: 4401237.106 ops/s
# Warmup Iteration  11: 4435195.474 ops/s
# Warmup Iteration  12: 4449641.805 ops/s
# Warmup Iteration  13: 4368125.686 ops/s
# Warmup Iteration  14: 4377833.315 ops/s
# Warmup Iteration  15: 4421481.392 ops/s
# Warmup Iteration  16: 4351406.729 ops/s
# Warmup Iteration  17: 4374617.832 ops/s
# Warmup Iteration  18: 4367284.463 ops/s
# Warmup Iteration  19: 4451662.087 ops/s
# Warmup Iteration  20: 4368768.851 ops/s
# Warmup Iteration  21: 4370943.122 ops/s
# Warmup Iteration  22: 4417803.068 ops/s
# Warmup Iteration  23: 4315058.211 ops/s
# Warmup Iteration  24: 4422354.455 ops/s
# Warmup Iteration  25: 4336528.720 ops/s
# Warmup Iteration  26: 4464844.648 ops/s
# Warmup Iteration  27: 4418107.274 ops/s
# Warmup Iteration  28: 4444142.064 ops/s
# Warmup Iteration  29: 4395679.314 ops/s
# Warmup Iteration  30: 4299385.587 ops/s
Iteration   1: 4388748.873 ops/s
Iteration   2: 4330070.904 ops/s
Iteration   3: 4393529.428 ops/s
Iteration   4: 4406815.157 ops/s
Iteration   5: 4445158.926 ops/s
Iteration   6: 4296926.303 ops/s
Iteration   7: 4593545.359 ops/s
Iteration   8: 4625968.190 ops/s
Iteration   9: 4438364.623 ops/s
Iteration  10: 4375093.994 ops/s
Iteration  11: 4388334.703 ops/s
Iteration  12: 4380688.933 ops/s
Iteration  13: 4288465.473 ops/s
Iteration  14: 4341658.435 ops/s
Iteration  15: 4590908.176 ops/s
Iteration  16: 4478596.852 ops/s
Iteration  17: 4483600.867 ops/s
Iteration  18: 4614163.999 ops/s
Iteration  19: 4625761.365 ops/s
Iteration  20: 4435553.532 ops/s
Iteration  21: 4340811.435 ops/s
Iteration  22: 4405838.653 ops/s
Iteration  23: 4392642.050 ops/s
Iteration  24: 4295862.700 ops/s
Iteration  25: 4452163.420 ops/s
Iteration  26: 4456098.651 ops/s
Iteration  27: 4443418.651 ops/s
Iteration  28: 4572120.891 ops/s
Iteration  29: 4614202.566 ops/s
Iteration  30: 4432529.738 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedList_with_null":
  4444254.762 ±(99.9%) 69348.823 ops/s [Average]
  (min, avg, max) = (4288465.473, 4444254.762, 4625968.190), stdev = 103798.062
  CI (99.9%): [4374905.938, 4513603.585] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedList_with_null  thrpt   30  4444254.762 ± 69348.823  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 536112.653 ops/s
# Warmup Iteration   2: 1190724.108 ops/s
# Warmup Iteration   3: 1312591.197 ops/s
# Warmup Iteration   4: 1241187.996 ops/s
# Warmup Iteration   5: 1031189.335 ops/s
# Warmup Iteration   6: 1266822.549 ops/s
# Warmup Iteration   7: 1319669.386 ops/s
# Warmup Iteration   8: 1335835.896 ops/s
# Warmup Iteration   9: 1333907.498 ops/s
# Warmup Iteration  10: 1335230.527 ops/s
# Warmup Iteration  11: 1334066.445 ops/s
# Warmup Iteration  12: 1335367.399 ops/s
# Warmup Iteration  13: 1335050.159 ops/s
# Warmup Iteration  14: 1330722.761 ops/s
# Warmup Iteration  15: 1329182.212 ops/s
# Warmup Iteration  16: 1284887.099 ops/s
# Warmup Iteration  17: 1318354.009 ops/s
# Warmup Iteration  18: 1257124.417 ops/s
# Warmup Iteration  19: 1320182.953 ops/s
# Warmup Iteration  20: 1283578.968 ops/s
# Warmup Iteration  21: 1280265.391 ops/s
# Warmup Iteration  22: 1254606.595 ops/s
# Warmup Iteration  23: 1282346.830 ops/s
# Warmup Iteration  24: 1255539.576 ops/s
# Warmup Iteration  25: 1284527.773 ops/s
# Warmup Iteration  26: 1263315.835 ops/s
# Warmup Iteration  27: 1259815.394 ops/s
# Warmup Iteration  28: 1247050.137 ops/s
# Warmup Iteration  29: 1253451.409 ops/s
# Warmup Iteration  30: 1305532.042 ops/s
Iteration   1: 1267230.353 ops/s
Iteration   2: 1243028.281 ops/s
Iteration   3: 1256622.085 ops/s
Iteration   4: 1280946.702 ops/s
Iteration   5: 1243848.610 ops/s
Iteration   6: 1293704.522 ops/s
Iteration   7: 1298925.643 ops/s
Iteration   8: 1267476.950 ops/s
Iteration   9: 1285325.448 ops/s
Iteration  10: 1281640.498 ops/s
Iteration  11: 1277356.513 ops/s
Iteration  12: 1292078.312 ops/s
Iteration  13: 1287434.116 ops/s
Iteration  14: 1256745.499 ops/s
Iteration  15: 1232628.067 ops/s
Iteration  16: 1278006.820 ops/s
Iteration  17: 1273047.496 ops/s
Iteration  18: 1316717.103 ops/s
Iteration  19: 1294158.514 ops/s
Iteration  20: 1268597.133 ops/s
Iteration  21: 1277381.210 ops/s
Iteration  22: 1293055.503 ops/s
Iteration  23: 1287810.475 ops/s
Iteration  24: 1302141.100 ops/s
Iteration  25: 1274690.690 ops/s
Iteration  26: 1262578.585 ops/s
Iteration  27: 1295766.728 ops/s
Iteration  28: 1336716.820 ops/s
Iteration  29: 1332671.631 ops/s
Iteration  30: 1329444.025 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedMap":
  1282925.848 ±(99.9%) 16796.995 ops/s [Average]
  (min, avg, max) = (1232628.067, 1282925.848, 1336716.820), stdev = 25140.954
  CI (99.9%): [1266128.852, 1299722.843] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedMap  thrpt   30  1282925.848 ± 16796.995  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedMapBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedMapBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 458175.449 ops/s
# Warmup Iteration   2: 843026.153 ops/s
# Warmup Iteration   3: 944894.990 ops/s
# Warmup Iteration   4: 972167.181 ops/s
# Warmup Iteration   5: 939888.626 ops/s
# Warmup Iteration   6: 796658.926 ops/s
# Warmup Iteration   7: 935094.337 ops/s
# Warmup Iteration   8: 963300.715 ops/s
# Warmup Iteration   9: 987162.414 ops/s
# Warmup Iteration  10: 964057.033 ops/s
# Warmup Iteration  11: 972172.032 ops/s
# Warmup Iteration  12: 940656.369 ops/s
# Warmup Iteration  13: 961927.535 ops/s
# Warmup Iteration  14: 922852.096 ops/s
# Warmup Iteration  15: 936095.547 ops/s
# Warmup Iteration  16: 949112.601 ops/s
# Warmup Iteration  17: 951492.897 ops/s
# Warmup Iteration  18: 953483.036 ops/s
# Warmup Iteration  19: 928360.197 ops/s
# Warmup Iteration  20: 944770.231 ops/s
# Warmup Iteration  21: 968857.139 ops/s
# Warmup Iteration  22: 989408.089 ops/s
# Warmup Iteration  23: 988654.072 ops/s
# Warmup Iteration  24: 987534.671 ops/s
# Warmup Iteration  25: 986329.563 ops/s
# Warmup Iteration  26: 986014.121 ops/s
# Warmup Iteration  27: 987250.515 ops/s
# Warmup Iteration  28: 988142.484 ops/s
# Warmup Iteration  29: 987016.363 ops/s
# Warmup Iteration  30: 955153.874 ops/s
Iteration   1: 940317.679 ops/s
Iteration   2: 943194.713 ops/s
Iteration   3: 929543.867 ops/s
Iteration   4: 935426.263 ops/s
Iteration   5: 953186.895 ops/s
Iteration   6: 980550.863 ops/s
Iteration   7: 970179.906 ops/s
Iteration   8: 956997.760 ops/s
Iteration   9: 963684.763 ops/s
Iteration  10: 951447.040 ops/s
Iteration  11: 947358.046 ops/s
Iteration  12: 943361.712 ops/s
Iteration  13: 989028.298 ops/s
Iteration  14: 986869.319 ops/s
Iteration  15: 958336.376 ops/s
Iteration  16: 942319.464 ops/s
Iteration  17: 934911.210 ops/s
Iteration  18: 932430.672 ops/s
Iteration  19: 931493.402 ops/s
Iteration  20: 932592.159 ops/s
Iteration  21: 932093.884 ops/s
Iteration  22: 925061.251 ops/s
Iteration  23: 976082.557 ops/s
Iteration  24: 952533.431 ops/s
Iteration  25: 917667.156 ops/s
Iteration  26: 975142.998 ops/s
Iteration  27: 948680.414 ops/s
Iteration  28: 976200.761 ops/s
Iteration  29: 984424.302 ops/s
Iteration  30: 952485.338 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedMapBy":
  952120.083 ±(99.9%) 13394.133 ops/s [Average]
  (min, avg, max) = (917667.156, 952120.083, 989028.298), stdev = 20047.709
  CI (99.9%): [938725.950, 965514.216] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedMapBy  thrpt   30  952120.083 ± 13394.133  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedMap_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedMap_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 510745.184 ops/s
# Warmup Iteration   2: 1104315.990 ops/s
# Warmup Iteration   3: 1222251.596 ops/s
# Warmup Iteration   4: 1217423.385 ops/s
# Warmup Iteration   5: 1011692.363 ops/s
# Warmup Iteration   6: 1237300.215 ops/s
# Warmup Iteration   7: 1250906.128 ops/s
# Warmup Iteration   8: 1230966.079 ops/s
# Warmup Iteration   9: 1262158.805 ops/s
# Warmup Iteration  10: 1230062.404 ops/s
# Warmup Iteration  11: 1245148.348 ops/s
# Warmup Iteration  12: 1220415.324 ops/s
# Warmup Iteration  13: 1236828.244 ops/s
# Warmup Iteration  14: 1255168.135 ops/s
# Warmup Iteration  15: 1246329.713 ops/s
# Warmup Iteration  16: 1238060.098 ops/s
# Warmup Iteration  17: 1237133.655 ops/s
# Warmup Iteration  18: 1261270.201 ops/s
# Warmup Iteration  19: 1233292.214 ops/s
# Warmup Iteration  20: 1223251.441 ops/s
# Warmup Iteration  21: 1218263.937 ops/s
# Warmup Iteration  22: 1221370.251 ops/s
# Warmup Iteration  23: 1229672.642 ops/s
# Warmup Iteration  24: 1250813.007 ops/s
# Warmup Iteration  25: 1217820.813 ops/s
# Warmup Iteration  26: 1290053.962 ops/s
# Warmup Iteration  27: 1266049.940 ops/s
# Warmup Iteration  28: 1225733.589 ops/s
# Warmup Iteration  29: 1225675.371 ops/s
# Warmup Iteration  30: 1277219.688 ops/s
Iteration   1: 1294144.001 ops/s
Iteration   2: 1293684.209 ops/s
Iteration   3: 1294298.641 ops/s
Iteration   4: 1295024.985 ops/s
Iteration   5: 1233136.431 ops/s
Iteration   6: 1228753.963 ops/s
Iteration   7: 1206894.597 ops/s
Iteration   8: 1222658.513 ops/s
Iteration   9: 1197572.114 ops/s
Iteration  10: 1231069.092 ops/s
Iteration  11: 1275105.428 ops/s
Iteration  12: 1295328.920 ops/s
Iteration  13: 1296008.268 ops/s
Iteration  14: 1296550.949 ops/s
Iteration  15: 1294480.045 ops/s
Iteration  16: 1296205.988 ops/s
Iteration  17: 1293061.184 ops/s
Iteration  18: 1294338.291 ops/s
Iteration  19: 1294500.504 ops/s
Iteration  20: 1290244.024 ops/s
Iteration  21: 1291591.648 ops/s
Iteration  22: 1294117.713 ops/s
Iteration  23: 1294722.034 ops/s
Iteration  24: 1294196.306 ops/s
Iteration  25: 1295491.138 ops/s
Iteration  26: 1290863.390 ops/s
Iteration  27: 1292989.185 ops/s
Iteration  28: 1294915.828 ops/s
Iteration  29: 1235480.234 ops/s
Iteration  30: 1239833.354 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedMap_with_comparator":
  1274908.699 ±(99.9%) 21392.779 ops/s [Average]
  (min, avg, max) = (1197572.114, 1274908.699, 1296550.949), stdev = 32019.708
  CI (99.9%): [1253515.920, 1296301.479] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedMap_with_comparator  thrpt   30  1274908.699 ± 21392.779  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 602515.150 ops/s
# Warmup Iteration   2: 1220470.838 ops/s
# Warmup Iteration   3: 1316526.692 ops/s
# Warmup Iteration   4: 1296304.343 ops/s
# Warmup Iteration   5: 1101993.106 ops/s
# Warmup Iteration   6: 1340930.008 ops/s
# Warmup Iteration   7: 1331180.340 ops/s
# Warmup Iteration   8: 1344001.106 ops/s
# Warmup Iteration   9: 1357771.338 ops/s
# Warmup Iteration  10: 1382965.062 ops/s
# Warmup Iteration  11: 1338610.782 ops/s
# Warmup Iteration  12: 1330831.749 ops/s
# Warmup Iteration  13: 1352041.801 ops/s
# Warmup Iteration  14: 1291048.544 ops/s
# Warmup Iteration  15: 1324785.951 ops/s
# Warmup Iteration  16: 1308413.743 ops/s
# Warmup Iteration  17: 1319949.224 ops/s
# Warmup Iteration  18: 1334819.679 ops/s
# Warmup Iteration  19: 1318056.652 ops/s
# Warmup Iteration  20: 1353086.568 ops/s
# Warmup Iteration  21: 1313201.398 ops/s
# Warmup Iteration  22: 1296484.710 ops/s
# Warmup Iteration  23: 1303272.837 ops/s
# Warmup Iteration  24: 1307993.549 ops/s
# Warmup Iteration  25: 1304581.720 ops/s
# Warmup Iteration  26: 1334745.606 ops/s
# Warmup Iteration  27: 1294639.453 ops/s
# Warmup Iteration  28: 1323265.885 ops/s
# Warmup Iteration  29: 1297389.912 ops/s
# Warmup Iteration  30: 1328298.157 ops/s
Iteration   1: 1381810.539 ops/s
Iteration   2: 1353394.124 ops/s
Iteration   3: 1304364.383 ops/s
Iteration   4: 1357551.436 ops/s
Iteration   5: 1322377.105 ops/s
Iteration   6: 1370636.851 ops/s
Iteration   7: 1380010.452 ops/s
Iteration   8: 1386027.231 ops/s
Iteration   9: 1329589.487 ops/s
Iteration  10: 1292683.063 ops/s
Iteration  11: 1302514.471 ops/s
Iteration  12: 1314832.371 ops/s
Iteration  13: 1321602.074 ops/s
Iteration  14: 1326039.160 ops/s
Iteration  15: 1317950.269 ops/s
Iteration  16: 1330820.620 ops/s
Iteration  17: 1320375.939 ops/s
Iteration  18: 1305800.673 ops/s
Iteration  19: 1302513.476 ops/s
Iteration  20: 1289019.385 ops/s
Iteration  21: 1315490.430 ops/s
Iteration  22: 1304939.044 ops/s
Iteration  23: 1321037.546 ops/s
Iteration  24: 1294613.420 ops/s
Iteration  25: 1305691.574 ops/s
Iteration  26: 1310598.503 ops/s
Iteration  27: 1278695.633 ops/s
Iteration  28: 1298051.440 ops/s
Iteration  29: 1299890.599 ops/s
Iteration  30: 1301873.462 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedSetBy":
  1321359.825 ±(99.9%) 19208.236 ops/s [Average]
  (min, avg, max) = (1278695.633, 1321359.825, 1386027.231), stdev = 28749.986
  CI (99.9%): [1302151.589, 1340568.061] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1321359.825 ± 19208.236  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 809322.166 ops/s
# Warmup Iteration   2: 1940593.115 ops/s
# Warmup Iteration   3: 1940724.757 ops/s
# Warmup Iteration   4: 1647292.673 ops/s
# Warmup Iteration   5: 2055222.093 ops/s
# Warmup Iteration   6: 2060033.215 ops/s
# Warmup Iteration   7: 2058828.600 ops/s
# Warmup Iteration   8: 2056560.375 ops/s
# Warmup Iteration   9: 2058179.912 ops/s
# Warmup Iteration  10: 2057450.809 ops/s
# Warmup Iteration  11: 2058873.864 ops/s
# Warmup Iteration  12: 2057584.509 ops/s
# Warmup Iteration  13: 2057858.359 ops/s
# Warmup Iteration  14: 1981321.679 ops/s
# Warmup Iteration  15: 1984238.542 ops/s
# Warmup Iteration  16: 1963154.830 ops/s
# Warmup Iteration  17: 1976400.494 ops/s
# Warmup Iteration  18: 1983742.777 ops/s
# Warmup Iteration  19: 1982907.203 ops/s
# Warmup Iteration  20: 1938117.143 ops/s
# Warmup Iteration  21: 1955593.546 ops/s
# Warmup Iteration  22: 1955094.406 ops/s
# Warmup Iteration  23: 1973515.519 ops/s
# Warmup Iteration  24: 1934245.821 ops/s
# Warmup Iteration  25: 1961754.098 ops/s
# Warmup Iteration  26: 2008764.979 ops/s
# Warmup Iteration  27: 1956102.915 ops/s
# Warmup Iteration  28: 1956040.228 ops/s
# Warmup Iteration  29: 1990689.012 ops/s
# Warmup Iteration  30: 1935857.842 ops/s
Iteration   1: 1968870.058 ops/s
Iteration   2: 1938333.352 ops/s
Iteration   3: 1917368.098 ops/s
Iteration   4: 1923214.373 ops/s
Iteration   5: 1924412.652 ops/s
Iteration   6: 1934459.620 ops/s
Iteration   7: 1959564.641 ops/s
Iteration   8: 1959404.051 ops/s
Iteration   9: 1932020.458 ops/s
Iteration  10: 1939647.371 ops/s
Iteration  11: 1926779.922 ops/s
Iteration  12: 1938444.634 ops/s
Iteration  13: 1944080.653 ops/s
Iteration  14: 1921330.395 ops/s
Iteration  15: 1898787.152 ops/s
Iteration  16: 1935600.266 ops/s
Iteration  17: 1941121.341 ops/s
Iteration  18: 1922176.142 ops/s
Iteration  19: 2005725.796 ops/s
Iteration  20: 2044293.816 ops/s
Iteration  21: 2058415.880 ops/s
Iteration  22: 2054828.417 ops/s
Iteration  23: 1911632.649 ops/s
Iteration  24: 1931280.150 ops/s
Iteration  25: 1925635.943 ops/s
Iteration  26: 1957083.846 ops/s
Iteration  27: 1920605.457 ops/s
Iteration  28: 1936536.200 ops/s
Iteration  29: 1970339.266 ops/s
Iteration  30: 1947150.464 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedSet_natural_ordering":
  1949638.102 ±(99.9%) 27085.797 ops/s [Average]
  (min, avg, max) = (1898787.152, 1949638.102, 2058415.880), stdev = 40540.749
  CI (99.9%): [1922552.305, 1976723.899] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedSet_natural_ordering  thrpt   30  1949638.102 ± 27085.797  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 774447.849 ops/s
# Warmup Iteration   2: 1785140.843 ops/s
# Warmup Iteration   3: 1904314.530 ops/s
# Warmup Iteration   4: 1618898.977 ops/s
# Warmup Iteration   5: 1862259.066 ops/s
# Warmup Iteration   6: 1884835.493 ops/s
# Warmup Iteration   7: 1911210.463 ops/s
# Warmup Iteration   8: 1927005.505 ops/s
# Warmup Iteration   9: 1944268.666 ops/s
# Warmup Iteration  10: 1908023.016 ops/s
# Warmup Iteration  11: 1937610.451 ops/s
# Warmup Iteration  12: 1874859.209 ops/s
# Warmup Iteration  13: 1940586.106 ops/s
# Warmup Iteration  14: 1863509.098 ops/s
# Warmup Iteration  15: 1868611.779 ops/s
# Warmup Iteration  16: 1860680.808 ops/s
# Warmup Iteration  17: 1946337.725 ops/s
# Warmup Iteration  18: 1878958.792 ops/s
# Warmup Iteration  19: 1928542.828 ops/s
# Warmup Iteration  20: 1979557.994 ops/s
# Warmup Iteration  21: 1982096.629 ops/s
# Warmup Iteration  22: 1982828.979 ops/s
# Warmup Iteration  23: 1981393.480 ops/s
# Warmup Iteration  24: 1981443.978 ops/s
# Warmup Iteration  25: 1981822.381 ops/s
# Warmup Iteration  26: 1983732.938 ops/s
# Warmup Iteration  27: 1977958.171 ops/s
# Warmup Iteration  28: 1950932.958 ops/s
# Warmup Iteration  29: 1937865.224 ops/s
# Warmup Iteration  30: 1950802.460 ops/s
Iteration   1: 1979266.128 ops/s
Iteration   2: 1978596.683 ops/s
Iteration   3: 1962113.041 ops/s
Iteration   4: 1850086.539 ops/s
Iteration   5: 1882961.573 ops/s
Iteration   6: 1882392.767 ops/s
Iteration   7: 1918733.904 ops/s
Iteration   8: 1868915.583 ops/s
Iteration   9: 1882009.006 ops/s
Iteration  10: 1890376.283 ops/s
Iteration  11: 1878200.886 ops/s
Iteration  12: 1869323.114 ops/s
Iteration  13: 1982379.805 ops/s
Iteration  14: 1877749.909 ops/s
Iteration  15: 1894490.803 ops/s
Iteration  16: 1979700.118 ops/s
Iteration  17: 1977349.578 ops/s
Iteration  18: 1980963.775 ops/s
Iteration  19: 1977777.818 ops/s
Iteration  20: 1826946.169 ops/s
Iteration  21: 1912108.922 ops/s
Iteration  22: 1863642.476 ops/s
Iteration  23: 1877218.908 ops/s
Iteration  24: 1890637.704 ops/s
Iteration  25: 1892641.093 ops/s
Iteration  26: 1878810.762 ops/s
Iteration  27: 1883373.217 ops/s
Iteration  28: 1878872.034 ops/s
Iteration  29: 1887503.210 ops/s
Iteration  30: 1910933.318 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedSet_with_comparator":
  1907202.504 ±(99.9%) 30934.087 ops/s [Average]
  (min, avg, max) = (1826946.169, 1907202.504, 1982379.805), stdev = 46300.688
  CI (99.9%): [1876268.418, 1938136.591] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toSortedSet_with_comparator  thrpt   30  1907202.504 ± 30934.087  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toStringOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toStringOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 738170.639 ops/s
# Warmup Iteration   2: 1657681.515 ops/s
# Warmup Iteration   3: 1635842.036 ops/s
# Warmup Iteration   4: 1322517.103 ops/s
# Warmup Iteration   5: 1632157.697 ops/s
# Warmup Iteration   6: 1624533.324 ops/s
# Warmup Iteration   7: 1639481.272 ops/s
# Warmup Iteration   8: 1634387.671 ops/s
# Warmup Iteration   9: 1620480.237 ops/s
# Warmup Iteration  10: 1644579.217 ops/s
# Warmup Iteration  11: 1620092.783 ops/s
# Warmup Iteration  12: 1680400.451 ops/s
# Warmup Iteration  13: 1638431.778 ops/s
# Warmup Iteration  14: 1649516.078 ops/s
# Warmup Iteration  15: 1660267.313 ops/s
# Warmup Iteration  16: 1660896.394 ops/s
# Warmup Iteration  17: 1626456.675 ops/s
# Warmup Iteration  18: 1658781.177 ops/s
# Warmup Iteration  19: 1677770.595 ops/s
# Warmup Iteration  20: 1664575.328 ops/s
# Warmup Iteration  21: 1609480.314 ops/s
# Warmup Iteration  22: 1628782.297 ops/s
# Warmup Iteration  23: 1630047.772 ops/s
# Warmup Iteration  24: 1661954.978 ops/s
# Warmup Iteration  25: 1725894.151 ops/s
# Warmup Iteration  26: 1706644.861 ops/s
# Warmup Iteration  27: 1687820.244 ops/s
# Warmup Iteration  28: 1727803.178 ops/s
# Warmup Iteration  29: 1638983.661 ops/s
# Warmup Iteration  30: 1635177.358 ops/s
Iteration   1: 1614969.805 ops/s
Iteration   2: 1685376.018 ops/s
Iteration   3: 1700360.328 ops/s
Iteration   4: 1658562.221 ops/s
Iteration   5: 1624001.847 ops/s
Iteration   6: 1682238.314 ops/s
Iteration   7: 1681521.780 ops/s
Iteration   8: 1728307.062 ops/s
Iteration   9: 1732184.438 ops/s
Iteration  10: 1730526.935 ops/s
Iteration  11: 1728711.012 ops/s
Iteration  12: 1731413.965 ops/s
Iteration  13: 1727087.714 ops/s
Iteration  14: 1730358.874 ops/s
Iteration  15: 1730461.426 ops/s
Iteration  16: 1732294.303 ops/s
Iteration  17: 1728928.049 ops/s
Iteration  18: 1730693.065 ops/s
Iteration  19: 1730751.045 ops/s
Iteration  20: 1729585.005 ops/s
Iteration  21: 1730152.898 ops/s
Iteration  22: 1730362.975 ops/s
Iteration  23: 1724959.837 ops/s
Iteration  24: 1731282.500 ops/s
Iteration  25: 1677948.172 ops/s
Iteration  26: 1651197.032 ops/s
Iteration  27: 1650781.377 ops/s
Iteration  28: 1648061.438 ops/s
Iteration  29: 1636818.195 ops/s
Iteration  30: 1637565.958 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_toStringOfItemToCount":
  1698582.120 ±(99.9%) 26796.555 ops/s [Average]
  (min, avg, max) = (1614969.805, 1698582.120, 1732294.303), stdev = 40107.825
  CI (99.9%): [1671785.564, 1725378.675] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_toStringOfItemToCount  thrpt   30  1698582.120 ± 26796.555  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_topOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_topOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 99647.601 ops/s
# Warmup Iteration   2: 188986.639 ops/s
# Warmup Iteration   3: 216973.021 ops/s
# Warmup Iteration   4: 210567.795 ops/s
# Warmup Iteration   5: 186299.871 ops/s
# Warmup Iteration   6: 196789.823 ops/s
# Warmup Iteration   7: 207713.670 ops/s
# Warmup Iteration   8: 207681.974 ops/s
# Warmup Iteration   9: 214347.863 ops/s
# Warmup Iteration  10: 219131.187 ops/s
# Warmup Iteration  11: 219420.995 ops/s
# Warmup Iteration  12: 219525.616 ops/s
# Warmup Iteration  13: 219575.550 ops/s
# Warmup Iteration  14: 219306.746 ops/s
# Warmup Iteration  15: 216343.774 ops/s
# Warmup Iteration  16: 219234.689 ops/s
# Warmup Iteration  17: 221055.755 ops/s
# Warmup Iteration  18: 221016.616 ops/s
# Warmup Iteration  19: 221351.077 ops/s
# Warmup Iteration  20: 218940.062 ops/s
# Warmup Iteration  21: 216975.504 ops/s
# Warmup Iteration  22: 217758.468 ops/s
# Warmup Iteration  23: 218591.711 ops/s
# Warmup Iteration  24: 218131.190 ops/s
# Warmup Iteration  25: 218259.104 ops/s
# Warmup Iteration  26: 219418.129 ops/s
# Warmup Iteration  27: 220743.920 ops/s
# Warmup Iteration  28: 221882.882 ops/s
# Warmup Iteration  29: 211848.744 ops/s
# Warmup Iteration  30: 208316.927 ops/s
Iteration   1: 211312.159 ops/s
Iteration   2: 210739.247 ops/s
Iteration   3: 208462.228 ops/s
Iteration   4: 213201.932 ops/s
Iteration   5: 213990.111 ops/s
Iteration   6: 207110.860 ops/s
Iteration   7: 206455.078 ops/s
Iteration   8: 210966.888 ops/s
Iteration   9: 210394.733 ops/s
Iteration  10: 209889.534 ops/s
Iteration  11: 207856.443 ops/s
Iteration  12: 208143.860 ops/s
Iteration  13: 205442.313 ops/s
Iteration  14: 209890.239 ops/s
Iteration  15: 206154.186 ops/s
Iteration  16: 213094.070 ops/s
Iteration  17: 207795.703 ops/s
Iteration  18: 212734.703 ops/s
Iteration  19: 210008.759 ops/s
Iteration  20: 207980.526 ops/s
Iteration  21: 207980.105 ops/s
Iteration  22: 208447.391 ops/s
Iteration  23: 207879.979 ops/s
Iteration  24: 206666.455 ops/s
Iteration  25: 214368.798 ops/s
Iteration  26: 222075.662 ops/s
Iteration  27: 221049.177 ops/s
Iteration  28: 218095.465 ops/s
Iteration  29: 209901.475 ops/s
Iteration  30: 209185.653 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_topOccurrences":
  210575.791 ±(99.9%) 2740.078 ops/s [Average]
  (min, avg, max) = (205442.313, 210575.791, 222075.662), stdev = 4101.220
  CI (99.9%): [207835.713, 213315.869] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_topOccurrences  thrpt   30  210575.791 ± 2740.078  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1702416.554 ops/s
# Warmup Iteration   2: 4249960.665 ops/s
# Warmup Iteration   3: 4482991.198 ops/s
# Warmup Iteration   4: 3717331.526 ops/s
# Warmup Iteration   5: 4490389.306 ops/s
# Warmup Iteration   6: 4480122.017 ops/s
# Warmup Iteration   7: 4490863.108 ops/s
# Warmup Iteration   8: 4498060.412 ops/s
# Warmup Iteration   9: 4497871.098 ops/s
# Warmup Iteration  10: 4495808.924 ops/s
# Warmup Iteration  11: 4491830.867 ops/s
# Warmup Iteration  12: 4373146.635 ops/s
# Warmup Iteration  13: 4487717.087 ops/s
# Warmup Iteration  14: 4490594.148 ops/s
# Warmup Iteration  15: 4420178.710 ops/s
# Warmup Iteration  16: 4247820.357 ops/s
# Warmup Iteration  17: 4387020.866 ops/s
# Warmup Iteration  18: 4282640.361 ops/s
# Warmup Iteration  19: 4329702.887 ops/s
# Warmup Iteration  20: 4320064.481 ops/s
# Warmup Iteration  21: 4237953.489 ops/s
# Warmup Iteration  22: 4423900.668 ops/s
# Warmup Iteration  23: 4354758.031 ops/s
# Warmup Iteration  24: 4255418.534 ops/s
# Warmup Iteration  25: 4213509.415 ops/s
# Warmup Iteration  26: 4234168.934 ops/s
# Warmup Iteration  27: 4240443.152 ops/s
# Warmup Iteration  28: 4284465.503 ops/s
# Warmup Iteration  29: 4326278.056 ops/s
# Warmup Iteration  30: 4232945.792 ops/s
Iteration   1: 4197097.981 ops/s
Iteration   2: 4315713.055 ops/s
Iteration   3: 4220203.974 ops/s
Iteration   4: 4269600.832 ops/s
Iteration   5: 4442221.172 ops/s
Iteration   6: 4369980.040 ops/s
Iteration   7: 4160477.962 ops/s
Iteration   8: 4166316.499 ops/s
Iteration   9: 4252170.288 ops/s
Iteration  10: 4170729.399 ops/s
Iteration  11: 4263062.469 ops/s
Iteration  12: 4228710.140 ops/s
Iteration  13: 4497823.097 ops/s
Iteration  14: 4482982.372 ops/s
Iteration  15: 4429199.197 ops/s
Iteration  16: 4311376.589 ops/s
Iteration  17: 4310812.626 ops/s
Iteration  18: 4279202.305 ops/s
Iteration  19: 4194560.815 ops/s
Iteration  20: 4174616.445 ops/s
Iteration  21: 4482855.585 ops/s
Iteration  22: 4493143.779 ops/s
Iteration  23: 4498898.795 ops/s
Iteration  24: 4461299.583 ops/s
Iteration  25: 4214436.954 ops/s
Iteration  26: 4253157.211 ops/s
Iteration  27: 4242509.567 ops/s
Iteration  28: 4219543.196 ops/s
Iteration  29: 4278388.040 ops/s
Iteration  30: 4246817.941 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_with":
  4304263.597 ±(99.9%) 76602.076 ops/s [Average]
  (min, avg, max) = (4160477.962, 4304263.597, 4498898.795), stdev = 114654.389
  CI (99.9%): [4227661.521, 4380865.673] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_with  thrpt   30  4304263.597 ± 76602.076  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1413979.381 ops/s
# Warmup Iteration   2: 3220378.967 ops/s
# Warmup Iteration   3: 3395869.472 ops/s
# Warmup Iteration   4: 3302375.549 ops/s
# Warmup Iteration   5: 2747516.861 ops/s
# Warmup Iteration   6: 3410408.651 ops/s
# Warmup Iteration   7: 3296873.373 ops/s
# Warmup Iteration   8: 3456254.325 ops/s
# Warmup Iteration   9: 3388138.426 ops/s
# Warmup Iteration  10: 3363041.086 ops/s
# Warmup Iteration  11: 3528783.856 ops/s
# Warmup Iteration  12: 3510831.169 ops/s
# Warmup Iteration  13: 3282429.501 ops/s
# Warmup Iteration  14: 3366357.842 ops/s
# Warmup Iteration  15: 3385370.219 ops/s
# Warmup Iteration  16: 3307744.045 ops/s
# Warmup Iteration  17: 3504600.005 ops/s
# Warmup Iteration  18: 3534690.992 ops/s
# Warmup Iteration  19: 3523521.729 ops/s
# Warmup Iteration  20: 3525772.054 ops/s
# Warmup Iteration  21: 3527994.875 ops/s
# Warmup Iteration  22: 3529970.390 ops/s
# Warmup Iteration  23: 3529599.655 ops/s
# Warmup Iteration  24: 3532647.543 ops/s
# Warmup Iteration  25: 3538458.930 ops/s
# Warmup Iteration  26: 3453796.554 ops/s
# Warmup Iteration  27: 3468053.282 ops/s
# Warmup Iteration  28: 3399142.048 ops/s
# Warmup Iteration  29: 3401980.736 ops/s
# Warmup Iteration  30: 3386092.949 ops/s
Iteration   1: 3351952.147 ops/s
Iteration   2: 3262794.540 ops/s
Iteration   3: 3356585.491 ops/s
Iteration   4: 3417077.888 ops/s
Iteration   5: 3386722.297 ops/s
Iteration   6: 3365675.915 ops/s
Iteration   7: 3305872.821 ops/s
Iteration   8: 3384838.277 ops/s
Iteration   9: 3327283.138 ops/s
Iteration  10: 3373729.977 ops/s
Iteration  11: 3262805.667 ops/s
Iteration  12: 3334766.186 ops/s
Iteration  13: 3347574.581 ops/s
Iteration  14: 3366669.587 ops/s
Iteration  15: 3366765.876 ops/s
Iteration  16: 3403717.553 ops/s
Iteration  17: 3323064.007 ops/s
Iteration  18: 3351521.852 ops/s
Iteration  19: 3388477.655 ops/s
Iteration  20: 3409501.431 ops/s
Iteration  21: 3390159.133 ops/s
Iteration  22: 3368061.634 ops/s
Iteration  23: 3378212.020 ops/s
Iteration  24: 3372980.381 ops/s
Iteration  25: 3388258.073 ops/s
Iteration  26: 3338490.475 ops/s
Iteration  27: 3338362.023 ops/s
Iteration  28: 3348734.273 ops/s
Iteration  29: 3348090.002 ops/s
Iteration  30: 3321181.167 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_withAll":
  3355997.535 ±(99.9%) 24742.013 ops/s [Average]
  (min, avg, max) = (3262794.540, 3355997.535, 3417077.888), stdev = 37032.683
  CI (99.9%): [3331255.522, 3380739.548] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_withAll  thrpt   30  3355997.535 ± 24742.013  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1921665.620 ops/s
# Warmup Iteration   2: 4642496.208 ops/s
# Warmup Iteration   3: 4563095.447 ops/s
# Warmup Iteration   4: 3793256.655 ops/s
# Warmup Iteration   5: 4611960.331 ops/s
# Warmup Iteration   6: 4618424.829 ops/s
# Warmup Iteration   7: 4545473.642 ops/s
# Warmup Iteration   8: 4518024.806 ops/s
# Warmup Iteration   9: 4467218.450 ops/s
# Warmup Iteration  10: 4509074.969 ops/s
# Warmup Iteration  11: 4585358.015 ops/s
# Warmup Iteration  12: 4534561.896 ops/s
# Warmup Iteration  13: 4507995.534 ops/s
# Warmup Iteration  14: 4509529.162 ops/s
# Warmup Iteration  15: 4597141.512 ops/s
# Warmup Iteration  16: 4634702.580 ops/s
# Warmup Iteration  17: 4565873.987 ops/s
# Warmup Iteration  18: 4557476.432 ops/s
# Warmup Iteration  19: 4554531.100 ops/s
# Warmup Iteration  20: 4609380.197 ops/s
# Warmup Iteration  21: 4650448.769 ops/s
# Warmup Iteration  22: 4509680.535 ops/s
# Warmup Iteration  23: 4569000.877 ops/s
# Warmup Iteration  24: 4475742.885 ops/s
# Warmup Iteration  25: 4569680.336 ops/s
# Warmup Iteration  26: 4478144.542 ops/s
# Warmup Iteration  27: 4516914.486 ops/s
# Warmup Iteration  28: 4574764.598 ops/s
# Warmup Iteration  29: 4567771.447 ops/s
# Warmup Iteration  30: 4498513.817 ops/s
Iteration   1: 4543177.272 ops/s
Iteration   2: 4710229.630 ops/s
Iteration   3: 4792923.957 ops/s
Iteration   4: 4797302.810 ops/s
Iteration   5: 4788821.600 ops/s
Iteration   6: 4786984.007 ops/s
Iteration   7: 4797064.711 ops/s
Iteration   8: 4777349.373 ops/s
Iteration   9: 4780374.407 ops/s
Iteration  10: 4785695.103 ops/s
Iteration  11: 4780902.287 ops/s
Iteration  12: 4788264.899 ops/s
Iteration  13: 4794840.960 ops/s
Iteration  14: 4787296.040 ops/s
Iteration  15: 4785562.256 ops/s
Iteration  16: 4790790.062 ops/s
Iteration  17: 4785856.366 ops/s
Iteration  18: 4785929.080 ops/s
Iteration  19: 4787575.467 ops/s
Iteration  20: 4738869.057 ops/s
Iteration  21: 4596425.349 ops/s
Iteration  22: 4653340.499 ops/s
Iteration  23: 4801966.364 ops/s
Iteration  24: 4726615.482 ops/s
Iteration  25: 4549358.797 ops/s
Iteration  26: 4660718.753 ops/s
Iteration  27: 4737315.532 ops/s
Iteration  28: 4655732.449 ops/s
Iteration  29: 4469113.608 ops/s
Iteration  30: 4604095.944 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_without":
  4728016.404 ±(99.9%) 61842.804 ops/s [Average]
  (min, avg, max) = (4469113.608, 4728016.404, 4801966.364), stdev = 92563.404
  CI (99.9%): [4666173.600, 4789859.208] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_without  thrpt   30  4728016.404 ± 61842.804  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1466957.145 ops/s
# Warmup Iteration   2: 3295754.535 ops/s
# Warmup Iteration   3: 3502374.508 ops/s
# Warmup Iteration   4: 3257824.728 ops/s
# Warmup Iteration   5: 3362507.717 ops/s
# Warmup Iteration   6: 3643591.142 ops/s
# Warmup Iteration   7: 3578383.747 ops/s
# Warmup Iteration   8: 3618915.555 ops/s
# Warmup Iteration   9: 3479645.575 ops/s
# Warmup Iteration  10: 3567655.020 ops/s
# Warmup Iteration  11: 3490582.834 ops/s
# Warmup Iteration  12: 3458057.874 ops/s
# Warmup Iteration  13: 3501190.659 ops/s
# Warmup Iteration  14: 3525824.935 ops/s
# Warmup Iteration  15: 3564749.897 ops/s
# Warmup Iteration  16: 3561440.858 ops/s
# Warmup Iteration  17: 3612368.622 ops/s
# Warmup Iteration  18: 3543045.310 ops/s
# Warmup Iteration  19: 3562662.841 ops/s
# Warmup Iteration  20: 3516178.121 ops/s
# Warmup Iteration  21: 3655928.806 ops/s
# Warmup Iteration  22: 3681553.466 ops/s
# Warmup Iteration  23: 3570993.277 ops/s
# Warmup Iteration  24: 3535721.336 ops/s
# Warmup Iteration  25: 3594289.734 ops/s
# Warmup Iteration  26: 3529580.585 ops/s
# Warmup Iteration  27: 3458692.418 ops/s
# Warmup Iteration  28: 3515743.787 ops/s
# Warmup Iteration  29: 3510249.079 ops/s
# Warmup Iteration  30: 3472827.185 ops/s
Iteration   1: 3487277.488 ops/s
Iteration   2: 3545836.471 ops/s
Iteration   3: 3568355.106 ops/s
Iteration   4: 3485109.399 ops/s
Iteration   5: 3629133.898 ops/s
Iteration   6: 3461629.213 ops/s
Iteration   7: 3541004.811 ops/s
Iteration   8: 3541988.002 ops/s
Iteration   9: 3590576.773 ops/s
Iteration  10: 3559896.662 ops/s
Iteration  11: 3459154.574 ops/s
Iteration  12: 3540882.370 ops/s
Iteration  13: 3464816.673 ops/s
Iteration  14: 3557396.466 ops/s
Iteration  15: 3455714.054 ops/s
Iteration  16: 3483452.904 ops/s
Iteration  17: 3504513.838 ops/s
Iteration  18: 3514778.049 ops/s
Iteration  19: 3441562.935 ops/s
Iteration  20: 3548134.411 ops/s
Iteration  21: 3477453.158 ops/s
Iteration  22: 3503618.523 ops/s
Iteration  23: 3556299.034 ops/s
Iteration  24: 3470061.113 ops/s
Iteration  25: 3560470.926 ops/s
Iteration  26: 3518960.277 ops/s
Iteration  27: 3535556.822 ops/s
Iteration  28: 3493036.593 ops/s
Iteration  29: 3513191.137 ops/s
Iteration  30: 3499221.807 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_withoutAll":
  3516969.449 ±(99.9%) 29897.125 ops/s [Average]
  (min, avg, max) = (3441562.935, 3516969.449, 3629133.898), stdev = 44748.612
  CI (99.9%): [3487072.325, 3546866.574] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_withoutAll  thrpt   30  3516969.449 ± 29897.125  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 81117.065 ops/s
# Warmup Iteration   2: 104353.676 ops/s
# Warmup Iteration   3: 139699.834 ops/s
# Warmup Iteration   4: 139923.019 ops/s
# Warmup Iteration   5: 138781.615 ops/s
# Warmup Iteration   6: 139756.916 ops/s
# Warmup Iteration   7: 139734.814 ops/s
# Warmup Iteration   8: 139563.869 ops/s
# Warmup Iteration   9: 126421.289 ops/s
# Warmup Iteration  10: 121536.866 ops/s
# Warmup Iteration  11: 134362.931 ops/s
# Warmup Iteration  12: 132258.127 ops/s
# Warmup Iteration  13: 129709.953 ops/s
# Warmup Iteration  14: 133370.128 ops/s
# Warmup Iteration  15: 135797.614 ops/s
# Warmup Iteration  16: 132433.175 ops/s
# Warmup Iteration  17: 133258.686 ops/s
# Warmup Iteration  18: 133107.682 ops/s
# Warmup Iteration  19: 131801.296 ops/s
# Warmup Iteration  20: 133096.103 ops/s
# Warmup Iteration  21: 130535.673 ops/s
# Warmup Iteration  22: 132677.805 ops/s
# Warmup Iteration  23: 130790.791 ops/s
# Warmup Iteration  24: 137272.476 ops/s
# Warmup Iteration  25: 132533.218 ops/s
# Warmup Iteration  26: 129792.801 ops/s
# Warmup Iteration  27: 131587.803 ops/s
# Warmup Iteration  28: 132795.655 ops/s
# Warmup Iteration  29: 132608.109 ops/s
# Warmup Iteration  30: 131217.306 ops/s
Iteration   1: 130210.197 ops/s
Iteration   2: 132166.088 ops/s
Iteration   3: 129964.493 ops/s
Iteration   4: 131450.938 ops/s
Iteration   5: 131720.731 ops/s
Iteration   6: 131235.506 ops/s
Iteration   7: 130735.803 ops/s
Iteration   8: 131253.174 ops/s
Iteration   9: 132394.093 ops/s
Iteration  10: 139241.074 ops/s
Iteration  11: 132794.648 ops/s
Iteration  12: 130699.123 ops/s
Iteration  13: 130801.524 ops/s
Iteration  14: 131085.222 ops/s
Iteration  15: 131352.740 ops/s
Iteration  16: 132889.396 ops/s
Iteration  17: 134262.562 ops/s
Iteration  18: 129450.529 ops/s
Iteration  19: 131881.650 ops/s
Iteration  20: 131544.722 ops/s
Iteration  21: 134688.798 ops/s
Iteration  22: 130020.538 ops/s
Iteration  23: 129712.813 ops/s
Iteration  24: 133199.410 ops/s
Iteration  25: 132336.663 ops/s
Iteration  26: 135154.378 ops/s
Iteration  27: 134977.985 ops/s
Iteration  28: 130664.979 ops/s
Iteration  29: 137115.050 ops/s
Iteration  30: 132168.455 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_zip":
  132239.109 ±(99.9%) 1487.433 ops/s [Average]
  (min, avg, max) = (129450.529, 132239.109, 139241.074), stdev = 2226.320
  CI (99.9%): [130751.677, 133726.542] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_zip  thrpt   30  132239.109 ± 1487.433  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 316095.003 ops/s
# Warmup Iteration   2: 475203.313 ops/s
# Warmup Iteration   3: 559443.036 ops/s
# Warmup Iteration   4: 553806.698 ops/s
# Warmup Iteration   5: 557056.261 ops/s
# Warmup Iteration   6: 566152.925 ops/s
# Warmup Iteration   7: 485246.624 ops/s
# Warmup Iteration   8: 569925.840 ops/s
# Warmup Iteration   9: 593331.845 ops/s
# Warmup Iteration  10: 571189.018 ops/s
# Warmup Iteration  11: 573489.918 ops/s
# Warmup Iteration  12: 570273.573 ops/s
# Warmup Iteration  13: 558042.290 ops/s
# Warmup Iteration  14: 562063.493 ops/s
# Warmup Iteration  15: 585379.057 ops/s
# Warmup Iteration  16: 600256.451 ops/s
# Warmup Iteration  17: 599349.628 ops/s
# Warmup Iteration  18: 599938.836 ops/s
# Warmup Iteration  19: 599290.915 ops/s
# Warmup Iteration  20: 599594.049 ops/s
# Warmup Iteration  21: 598567.015 ops/s
# Warmup Iteration  22: 598923.941 ops/s
# Warmup Iteration  23: 599546.266 ops/s
# Warmup Iteration  24: 577396.978 ops/s
# Warmup Iteration  25: 564210.121 ops/s
# Warmup Iteration  26: 562746.819 ops/s
# Warmup Iteration  27: 563138.259 ops/s
# Warmup Iteration  28: 567244.138 ops/s
# Warmup Iteration  29: 559171.492 ops/s
# Warmup Iteration  30: 561939.979 ops/s
Iteration   1: 560579.060 ops/s
Iteration   2: 577577.839 ops/s
Iteration   3: 568573.624 ops/s
Iteration   4: 562289.517 ops/s
Iteration   5: 562866.824 ops/s
Iteration   6: 562816.658 ops/s
Iteration   7: 559094.058 ops/s
Iteration   8: 567197.799 ops/s
Iteration   9: 556926.869 ops/s
Iteration  10: 557995.191 ops/s
Iteration  11: 557469.674 ops/s
Iteration  12: 564034.356 ops/s
Iteration  13: 554857.998 ops/s
Iteration  14: 562123.121 ops/s
Iteration  15: 587257.332 ops/s
Iteration  16: 587892.975 ops/s
Iteration  17: 573819.878 ops/s
Iteration  18: 573925.433 ops/s
Iteration  19: 569104.259 ops/s
Iteration  20: 574177.796 ops/s
Iteration  21: 566734.320 ops/s
Iteration  22: 561331.712 ops/s
Iteration  23: 561982.941 ops/s
Iteration  24: 566110.919 ops/s
Iteration  25: 584772.259 ops/s
Iteration  26: 557622.999 ops/s
Iteration  27: 565500.545 ops/s
Iteration  28: 579164.574 ops/s
Iteration  29: 567610.248 ops/s
Iteration  30: 566200.614 ops/s


Result "org.eclipse.collections.impl.bag.strategy.mutable.HashBagWithHashingStrategyTest._Benchmark.benchmark_zipWithIndex":
  567253.713 ±(99.9%) 5997.438 ops/s [Average]
  (min, avg, max) = (554857.998, 567253.713, 587892.975), stdev = 8976.684
  CI (99.9%): [561256.275, 573251.151] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
HashBagWithHashingStrategyTest._Benchmark.benchmark_zipWithIndex  thrpt   30  567253.713 ± 5997.438  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 644473.560 ops/s
# Warmup Iteration   2: 697632.280 ops/s
# Warmup Iteration   3: 926791.504 ops/s
# Warmup Iteration   4: 926301.503 ops/s
# Warmup Iteration   5: 902105.759 ops/s
# Warmup Iteration   6: 909233.986 ops/s
# Warmup Iteration   7: 890461.280 ops/s
# Warmup Iteration   8: 930980.607 ops/s
# Warmup Iteration   9: 908414.488 ops/s
# Warmup Iteration  10: 902425.649 ops/s
# Warmup Iteration  11: 877522.249 ops/s
# Warmup Iteration  12: 754716.313 ops/s
# Warmup Iteration  13: 886860.484 ops/s
# Warmup Iteration  14: 849722.363 ops/s
# Warmup Iteration  15: 892348.616 ops/s
# Warmup Iteration  16: 908761.834 ops/s
# Warmup Iteration  17: 947995.241 ops/s
# Warmup Iteration  18: 942251.458 ops/s
# Warmup Iteration  19: 965581.642 ops/s
# Warmup Iteration  20: 994890.106 ops/s
# Warmup Iteration  21: 1001841.595 ops/s
# Warmup Iteration  22: 969903.724 ops/s
# Warmup Iteration  23: 980639.654 ops/s
# Warmup Iteration  24: 988887.865 ops/s
# Warmup Iteration  25: 939251.108 ops/s
# Warmup Iteration  26: 949723.458 ops/s
# Warmup Iteration  27: 943592.101 ops/s
# Warmup Iteration  28: 942721.065 ops/s
# Warmup Iteration  29: 984776.567 ops/s
# Warmup Iteration  30: 1006281.845 ops/s
Iteration   1: 1005140.390 ops/s
Iteration   2: 1004703.240 ops/s
Iteration   3: 1008405.951 ops/s
Iteration   4: 1006449.526 ops/s
Iteration   5: 1003981.197 ops/s
Iteration   6: 1003733.346 ops/s
Iteration   7: 1004581.981 ops/s
Iteration   8: 1005647.482 ops/s
Iteration   9: 1003827.460 ops/s
Iteration  10: 1004571.779 ops/s
Iteration  11: 994458.333 ops/s
Iteration  12: 1006974.029 ops/s
Iteration  13: 1005823.210 ops/s
Iteration  14: 1003723.489 ops/s
Iteration  15: 1007444.715 ops/s
Iteration  16: 985720.957 ops/s
Iteration  17: 952527.323 ops/s
Iteration  18: 987072.645 ops/s
Iteration  19: 960774.416 ops/s
Iteration  20: 969672.539 ops/s
Iteration  21: 946731.368 ops/s
Iteration  22: 958736.460 ops/s
Iteration  23: 943075.232 ops/s
Iteration  24: 951360.180 ops/s
Iteration  25: 958670.877 ops/s
Iteration  26: 961715.277 ops/s
Iteration  27: 963492.176 ops/s
Iteration  28: 947667.508 ops/s
Iteration  29: 962185.478 ops/s
Iteration  30: 960466.265 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_clear":
  982644.494 ±(99.9%) 16125.120 ops/s [Average]
  (min, avg, max) = (943075.232, 982644.494, 1008405.951), stdev = 24135.322
  CI (99.9%): [966519.375, 998769.614] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_clear  thrpt   30  982644.494 ± 16125.120  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_containsKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_containsKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6031880.963 ops/s
# Warmup Iteration   2: 12567414.809 ops/s
# Warmup Iteration   3: 11039245.782 ops/s
# Warmup Iteration   4: 12743988.933 ops/s
# Warmup Iteration   5: 12768091.919 ops/s
# Warmup Iteration   6: 13175315.906 ops/s
# Warmup Iteration   7: 13161593.916 ops/s
# Warmup Iteration   8: 12919454.914 ops/s
# Warmup Iteration   9: 12795796.540 ops/s
# Warmup Iteration  10: 13436792.660 ops/s
# Warmup Iteration  11: 12712145.763 ops/s
# Warmup Iteration  12: 12672962.675 ops/s
# Warmup Iteration  13: 13059672.166 ops/s
# Warmup Iteration  14: 12947592.366 ops/s
# Warmup Iteration  15: 12872162.068 ops/s
# Warmup Iteration  16: 12839268.758 ops/s
# Warmup Iteration  17: 12835329.225 ops/s
# Warmup Iteration  18: 12807289.804 ops/s
# Warmup Iteration  19: 12766153.107 ops/s
# Warmup Iteration  20: 12863981.041 ops/s
# Warmup Iteration  21: 12709202.056 ops/s
# Warmup Iteration  22: 12995714.874 ops/s
# Warmup Iteration  23: 12790262.411 ops/s
# Warmup Iteration  24: 12869648.003 ops/s
# Warmup Iteration  25: 12892137.263 ops/s
# Warmup Iteration  26: 12681370.364 ops/s
# Warmup Iteration  27: 12842113.448 ops/s
# Warmup Iteration  28: 12863809.124 ops/s
# Warmup Iteration  29: 12806236.294 ops/s
# Warmup Iteration  30: 12768727.516 ops/s
Iteration   1: 13032088.472 ops/s
Iteration   2: 12724145.243 ops/s
Iteration   3: 12763104.313 ops/s
Iteration   4: 12674589.817 ops/s
Iteration   5: 12782666.541 ops/s
Iteration   6: 12989017.364 ops/s
Iteration   7: 12842712.381 ops/s
Iteration   8: 12758216.124 ops/s
Iteration   9: 13050135.980 ops/s
Iteration  10: 12981759.425 ops/s
Iteration  11: 12708997.749 ops/s
Iteration  12: 12831853.378 ops/s
Iteration  13: 12900047.679 ops/s
Iteration  14: 12948817.981 ops/s
Iteration  15: 13115832.547 ops/s
Iteration  16: 12964280.561 ops/s
Iteration  17: 12863063.088 ops/s
Iteration  18: 12814745.397 ops/s
Iteration  19: 12713104.174 ops/s
Iteration  20: 12633991.803 ops/s
Iteration  21: 12806935.490 ops/s
Iteration  22: 12561649.167 ops/s
Iteration  23: 12702632.420 ops/s
Iteration  24: 12664051.099 ops/s
Iteration  25: 12869992.809 ops/s
Iteration  26: 13275921.205 ops/s
Iteration  27: 13226655.620 ops/s
Iteration  28: 13522864.170 ops/s
Iteration  29: 13502269.527 ops/s
Iteration  30: 13503114.391 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_containsKey":
  12924308.531 ±(99.9%) 173876.248 ops/s [Average]
  (min, avg, max) = (12561649.167, 12924308.531, 13522864.170), stdev = 260249.802
  CI (99.9%): [12750432.283, 13098184.778] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_containsKey  thrpt   30  12924308.531 ± 173876.248  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 39522.456 ops/s
# Warmup Iteration   2: 61321.370 ops/s
# Warmup Iteration   3: 86422.198 ops/s
# Warmup Iteration   4: 86297.331 ops/s
# Warmup Iteration   5: 86958.515 ops/s
# Warmup Iteration   6: 87028.975 ops/s
# Warmup Iteration   7: 85824.237 ops/s
# Warmup Iteration   8: 69504.666 ops/s
# Warmup Iteration   9: 81801.989 ops/s
# Warmup Iteration  10: 81833.762 ops/s
# Warmup Iteration  11: 81288.365 ops/s
# Warmup Iteration  12: 81420.461 ops/s
# Warmup Iteration  13: 81152.453 ops/s
# Warmup Iteration  14: 80508.391 ops/s
# Warmup Iteration  15: 82991.249 ops/s
# Warmup Iteration  16: 84486.329 ops/s
# Warmup Iteration  17: 82996.762 ops/s
# Warmup Iteration  18: 84753.790 ops/s
# Warmup Iteration  19: 83499.669 ops/s
# Warmup Iteration  20: 82650.018 ops/s
# Warmup Iteration  21: 82685.475 ops/s
# Warmup Iteration  22: 81720.769 ops/s
# Warmup Iteration  23: 83564.420 ops/s
# Warmup Iteration  24: 84415.810 ops/s
# Warmup Iteration  25: 83394.988 ops/s
# Warmup Iteration  26: 84355.655 ops/s
# Warmup Iteration  27: 85333.191 ops/s
# Warmup Iteration  28: 82328.411 ops/s
# Warmup Iteration  29: 86615.775 ops/s
# Warmup Iteration  30: 84200.675 ops/s
Iteration   1: 81596.912 ops/s
Iteration   2: 81113.508 ops/s
Iteration   3: 80928.325 ops/s
Iteration   4: 82243.720 ops/s
Iteration   5: 81845.889 ops/s
Iteration   6: 80365.229 ops/s
Iteration   7: 81605.718 ops/s
Iteration   8: 82013.258 ops/s
Iteration   9: 83658.556 ops/s
Iteration  10: 82656.320 ops/s
Iteration  11: 81734.154 ops/s
Iteration  12: 82516.817 ops/s
Iteration  13: 85445.194 ops/s
Iteration  14: 87067.595 ops/s
Iteration  15: 81333.558 ops/s
Iteration  16: 81286.523 ops/s
Iteration  17: 82391.656 ops/s
Iteration  18: 82962.028 ops/s
Iteration  19: 82453.909 ops/s
Iteration  20: 83301.595 ops/s
Iteration  21: 85883.933 ops/s
Iteration  22: 82349.107 ops/s
Iteration  23: 83645.658 ops/s
Iteration  24: 84862.434 ops/s
Iteration  25: 84423.577 ops/s
Iteration  26: 82750.652 ops/s
Iteration  27: 80622.163 ops/s
Iteration  28: 81730.649 ops/s
Iteration  29: 82990.978 ops/s
Iteration  30: 83428.911 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_equalsAndHashCode":
  82706.951 ±(99.9%) 1056.793 ops/s [Average]
  (min, avg, max) = (80365.229, 82706.951, 87067.595), stdev = 1581.757
  CI (99.9%): [81650.158, 83763.743] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt      Score      Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  82706.951 ± 1056.793  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_flipUniqueValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_flipUniqueValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2003548.970 ops/s
# Warmup Iteration   2: 4889421.847 ops/s
# Warmup Iteration   3: 4927112.327 ops/s
# Warmup Iteration   4: 3914244.769 ops/s
# Warmup Iteration   5: 4716007.200 ops/s
# Warmup Iteration   6: 4768315.201 ops/s
# Warmup Iteration   7: 4787053.021 ops/s
# Warmup Iteration   8: 4808672.322 ops/s
# Warmup Iteration   9: 4929639.953 ops/s
# Warmup Iteration  10: 4727011.653 ops/s
# Warmup Iteration  11: 4744909.428 ops/s
# Warmup Iteration  12: 4722574.747 ops/s
# Warmup Iteration  13: 4863179.189 ops/s
# Warmup Iteration  14: 4964761.257 ops/s
# Warmup Iteration  15: 4970506.867 ops/s
# Warmup Iteration  16: 4965617.292 ops/s
# Warmup Iteration  17: 4977480.993 ops/s
# Warmup Iteration  18: 4966265.193 ops/s
# Warmup Iteration  19: 4969751.937 ops/s
# Warmup Iteration  20: 4972005.839 ops/s
# Warmup Iteration  21: 4970438.880 ops/s
# Warmup Iteration  22: 4795933.449 ops/s
# Warmup Iteration  23: 4981289.893 ops/s
# Warmup Iteration  24: 4820152.359 ops/s
# Warmup Iteration  25: 4840618.385 ops/s
# Warmup Iteration  26: 4804693.716 ops/s
# Warmup Iteration  27: 4706820.605 ops/s
# Warmup Iteration  28: 4702883.611 ops/s
# Warmup Iteration  29: 4821868.960 ops/s
# Warmup Iteration  30: 4739309.203 ops/s
Iteration   1: 4722735.265 ops/s
Iteration   2: 4915617.026 ops/s
Iteration   3: 4728652.533 ops/s
Iteration   4: 4887972.636 ops/s
Iteration   5: 4862335.519 ops/s
Iteration   6: 4958791.444 ops/s
Iteration   7: 4685603.132 ops/s
Iteration   8: 4669901.639 ops/s
Iteration   9: 4963375.149 ops/s
Iteration  10: 4982639.743 ops/s
Iteration  11: 4677886.966 ops/s
Iteration  12: 4746362.375 ops/s
Iteration  13: 4750302.164 ops/s
Iteration  14: 4795839.657 ops/s
Iteration  15: 4765303.166 ops/s
Iteration  16: 4724673.155 ops/s
Iteration  17: 4590110.800 ops/s
Iteration  18: 4676282.119 ops/s
Iteration  19: 4702209.079 ops/s
Iteration  20: 4770697.242 ops/s
Iteration  21: 4832823.821 ops/s
Iteration  22: 4722970.514 ops/s
Iteration  23: 4700962.956 ops/s
Iteration  24: 4797564.590 ops/s
Iteration  25: 4683808.002 ops/s
Iteration  26: 4780634.607 ops/s
Iteration  27: 4810589.693 ops/s
Iteration  28: 4796950.225 ops/s
Iteration  29: 4809450.938 ops/s
Iteration  30: 4731771.271 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_flipUniqueValues":
  4774827.248 ±(99.9%) 63844.899 ops/s [Average]
  (min, avg, max) = (4590110.800, 4774827.248, 4982639.743), stdev = 95560.047
  CI (99.9%): [4710982.348, 4838672.147] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_flipUniqueValues  thrpt   30  4774827.248 ± 63844.899  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1500065.779 ops/s
# Warmup Iteration   2: 3924735.225 ops/s
# Warmup Iteration   3: 3834564.108 ops/s
# Warmup Iteration   4: 3312494.723 ops/s
# Warmup Iteration   5: 3881710.857 ops/s
# Warmup Iteration   6: 3856335.598 ops/s
# Warmup Iteration   7: 3847632.127 ops/s
# Warmup Iteration   8: 3878175.261 ops/s
# Warmup Iteration   9: 3945412.688 ops/s
# Warmup Iteration  10: 4067151.932 ops/s
# Warmup Iteration  11: 3979976.670 ops/s
# Warmup Iteration  12: 3847875.103 ops/s
# Warmup Iteration  13: 3801753.530 ops/s
# Warmup Iteration  14: 3917889.461 ops/s
# Warmup Iteration  15: 3892546.740 ops/s
# Warmup Iteration  16: 3895804.058 ops/s
# Warmup Iteration  17: 3908146.774 ops/s
# Warmup Iteration  18: 3801683.662 ops/s
# Warmup Iteration  19: 3821382.521 ops/s
# Warmup Iteration  20: 3805431.284 ops/s
# Warmup Iteration  21: 3816766.799 ops/s
# Warmup Iteration  22: 3841850.360 ops/s
# Warmup Iteration  23: 3808838.214 ops/s
# Warmup Iteration  24: 3841849.252 ops/s
# Warmup Iteration  25: 3848938.656 ops/s
# Warmup Iteration  26: 3854468.449 ops/s
# Warmup Iteration  27: 3911636.864 ops/s
# Warmup Iteration  28: 4065885.871 ops/s
# Warmup Iteration  29: 4069023.789 ops/s
# Warmup Iteration  30: 4063574.093 ops/s
Iteration   1: 4064396.810 ops/s
Iteration   2: 4078778.090 ops/s
Iteration   3: 4064537.593 ops/s
Iteration   4: 4073755.092 ops/s
Iteration   5: 4067508.924 ops/s
Iteration   6: 4051886.114 ops/s
Iteration   7: 4064853.686 ops/s
Iteration   8: 4060551.484 ops/s
Iteration   9: 4069785.496 ops/s
Iteration  10: 4058565.260 ops/s
Iteration  11: 4066521.517 ops/s
Iteration  12: 3961424.823 ops/s
Iteration  13: 3852787.174 ops/s
Iteration  14: 3895807.334 ops/s
Iteration  15: 3825738.542 ops/s
Iteration  16: 3904680.113 ops/s
Iteration  17: 3817895.497 ops/s
Iteration  18: 3845994.992 ops/s
Iteration  19: 3824703.851 ops/s
Iteration  20: 3912678.245 ops/s
Iteration  21: 3865431.775 ops/s
Iteration  22: 3782908.096 ops/s
Iteration  23: 3892608.272 ops/s
Iteration  24: 3896389.326 ops/s
Iteration  25: 3767854.078 ops/s
Iteration  26: 3810706.891 ops/s
Iteration  27: 3831378.549 ops/s
Iteration  28: 3884879.808 ops/s
Iteration  29: 3887807.341 ops/s
Iteration  30: 3974196.515 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEach":
  3938567.043 ±(99.9%) 71856.818 ops/s [Average]
  (min, avg, max) = (3767854.078, 3938567.043, 4078778.090), stdev = 107551.911
  CI (99.9%): [3866710.225, 4010423.861] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEach  thrpt   30  3938567.043 ± 71856.818  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEachKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEachKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2534798.749 ops/s
# Warmup Iteration   2: 5434593.842 ops/s
# Warmup Iteration   3: 5796780.981 ops/s
# Warmup Iteration   4: 5896573.754 ops/s
# Warmup Iteration   5: 4839501.650 ops/s
# Warmup Iteration   6: 5870278.053 ops/s
# Warmup Iteration   7: 5922501.512 ops/s
# Warmup Iteration   8: 5938669.791 ops/s
# Warmup Iteration   9: 5861227.748 ops/s
# Warmup Iteration  10: 5825873.744 ops/s
# Warmup Iteration  11: 5895046.780 ops/s
# Warmup Iteration  12: 5932251.912 ops/s
# Warmup Iteration  13: 6042291.762 ops/s
# Warmup Iteration  14: 6032550.851 ops/s
# Warmup Iteration  15: 5892614.173 ops/s
# Warmup Iteration  16: 6055860.395 ops/s
# Warmup Iteration  17: 5889147.638 ops/s
# Warmup Iteration  18: 5960840.707 ops/s
# Warmup Iteration  19: 6110380.698 ops/s
# Warmup Iteration  20: 5953174.742 ops/s
# Warmup Iteration  21: 5838823.354 ops/s
# Warmup Iteration  22: 6037800.986 ops/s
# Warmup Iteration  23: 5839151.923 ops/s
# Warmup Iteration  24: 5949837.935 ops/s
# Warmup Iteration  25: 5814900.366 ops/s
# Warmup Iteration  26: 5899842.667 ops/s
# Warmup Iteration  27: 5905847.336 ops/s
# Warmup Iteration  28: 6101132.456 ops/s
# Warmup Iteration  29: 6240389.998 ops/s
# Warmup Iteration  30: 5968748.377 ops/s
Iteration   1: 5991139.788 ops/s
Iteration   2: 6239919.765 ops/s
Iteration   3: 6111342.984 ops/s
Iteration   4: 5946207.320 ops/s
Iteration   5: 5976272.445 ops/s
Iteration   6: 6019009.272 ops/s
Iteration   7: 5913775.119 ops/s
Iteration   8: 5778693.229 ops/s
Iteration   9: 5859710.876 ops/s
Iteration  10: 5930541.605 ops/s
Iteration  11: 5814982.788 ops/s
Iteration  12: 5811192.852 ops/s
Iteration  13: 5882149.502 ops/s
Iteration  14: 6129240.361 ops/s
Iteration  15: 6201662.625 ops/s
Iteration  16: 5912675.187 ops/s
Iteration  17: 5886254.876 ops/s
Iteration  18: 5930832.868 ops/s
Iteration  19: 5961572.648 ops/s
Iteration  20: 6240037.105 ops/s
Iteration  21: 5938112.734 ops/s
Iteration  22: 6115193.025 ops/s
Iteration  23: 6064584.567 ops/s
Iteration  24: 6225993.621 ops/s
Iteration  25: 6227384.670 ops/s
Iteration  26: 6251015.616 ops/s
Iteration  27: 6244661.154 ops/s
Iteration  28: 6254279.730 ops/s
Iteration  29: 6232161.439 ops/s
Iteration  30: 6241022.864 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEachKey":
  6044387.421 ±(99.9%) 107071.484 ops/s [Average]
  (min, avg, max) = (5778693.229, 6044387.421, 6254279.730), stdev = 160259.569
  CI (99.9%): [5937315.937, 6151458.905] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEachKey  thrpt   30  6044387.421 ± 107071.484  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEachKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEachKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1250061.423 ops/s
# Warmup Iteration   2: 3125825.907 ops/s
# Warmup Iteration   3: 3148123.514 ops/s
# Warmup Iteration   4: 2628319.812 ops/s
# Warmup Iteration   5: 3140006.864 ops/s
# Warmup Iteration   6: 3057118.710 ops/s
# Warmup Iteration   7: 3003394.990 ops/s
# Warmup Iteration   8: 3093561.371 ops/s
# Warmup Iteration   9: 2963443.181 ops/s
# Warmup Iteration  10: 2919292.461 ops/s
# Warmup Iteration  11: 2980927.049 ops/s
# Warmup Iteration  12: 2925828.585 ops/s
# Warmup Iteration  13: 2962837.696 ops/s
# Warmup Iteration  14: 3090656.271 ops/s
# Warmup Iteration  15: 3053441.829 ops/s
# Warmup Iteration  16: 2955651.387 ops/s
# Warmup Iteration  17: 2978024.542 ops/s
# Warmup Iteration  18: 2943713.196 ops/s
# Warmup Iteration  19: 2946056.941 ops/s
# Warmup Iteration  20: 2942729.354 ops/s
# Warmup Iteration  21: 2946592.177 ops/s
# Warmup Iteration  22: 2959279.409 ops/s
# Warmup Iteration  23: 3074491.383 ops/s
# Warmup Iteration  24: 3013136.839 ops/s
# Warmup Iteration  25: 3052734.735 ops/s
# Warmup Iteration  26: 2983732.877 ops/s
# Warmup Iteration  27: 3044728.987 ops/s
# Warmup Iteration  28: 3026043.560 ops/s
# Warmup Iteration  29: 2999957.847 ops/s
# Warmup Iteration  30: 2986994.162 ops/s
Iteration   1: 3046511.489 ops/s
Iteration   2: 2961658.856 ops/s
Iteration   3: 3039916.901 ops/s
Iteration   4: 3010169.526 ops/s
Iteration   5: 3004666.205 ops/s
Iteration   6: 2919498.947 ops/s
Iteration   7: 2952019.797 ops/s
Iteration   8: 2980353.914 ops/s
Iteration   9: 2984993.321 ops/s
Iteration  10: 2953895.351 ops/s
Iteration  11: 3006499.904 ops/s
Iteration  12: 2931621.385 ops/s
Iteration  13: 2995853.580 ops/s
Iteration  14: 3024269.995 ops/s
Iteration  15: 2956346.936 ops/s
Iteration  16: 3024410.699 ops/s
Iteration  17: 2997141.141 ops/s
Iteration  18: 3021187.418 ops/s
Iteration  19: 3039402.800 ops/s
Iteration  20: 3021355.613 ops/s
Iteration  21: 2979761.653 ops/s
Iteration  22: 2993072.232 ops/s
Iteration  23: 3019363.859 ops/s
Iteration  24: 3036830.477 ops/s
Iteration  25: 2984413.082 ops/s
Iteration  26: 2995261.816 ops/s
Iteration  27: 3056012.806 ops/s
Iteration  28: 3025481.394 ops/s
Iteration  29: 3056344.087 ops/s
Iteration  30: 3052287.905 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEachKeyValue":
  3002353.436 ±(99.9%) 24546.854 ops/s [Average]
  (min, avg, max) = (2919498.947, 3002353.436, 3056344.087), stdev = 36740.578
  CI (99.9%): [2977806.582, 3026900.290] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEachKeyValue  thrpt   30  3002353.436 ± 24546.854  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEachValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEachValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1446606.282 ops/s
# Warmup Iteration   2: 3800549.044 ops/s
# Warmup Iteration   3: 3815188.244 ops/s
# Warmup Iteration   4: 3162538.977 ops/s
# Warmup Iteration   5: 3795246.401 ops/s
# Warmup Iteration   6: 3762722.916 ops/s
# Warmup Iteration   7: 3750630.645 ops/s
# Warmup Iteration   8: 3722938.967 ops/s
# Warmup Iteration   9: 3711179.382 ops/s
# Warmup Iteration  10: 3784569.248 ops/s
# Warmup Iteration  11: 3937468.014 ops/s
# Warmup Iteration  12: 4003286.207 ops/s
# Warmup Iteration  13: 3999843.042 ops/s
# Warmup Iteration  14: 3991400.674 ops/s
# Warmup Iteration  15: 3998011.994 ops/s
# Warmup Iteration  16: 3999882.812 ops/s
# Warmup Iteration  17: 4005658.327 ops/s
# Warmup Iteration  18: 4001129.588 ops/s
# Warmup Iteration  19: 3998579.557 ops/s
# Warmup Iteration  20: 3901943.661 ops/s
# Warmup Iteration  21: 3866193.225 ops/s
# Warmup Iteration  22: 3784435.654 ops/s
# Warmup Iteration  23: 3706213.192 ops/s
# Warmup Iteration  24: 3853637.872 ops/s
# Warmup Iteration  25: 3834343.571 ops/s
# Warmup Iteration  26: 3812606.255 ops/s
# Warmup Iteration  27: 3761238.344 ops/s
# Warmup Iteration  28: 3732871.460 ops/s
# Warmup Iteration  29: 3802521.252 ops/s
# Warmup Iteration  30: 3836911.334 ops/s
Iteration   1: 3869839.054 ops/s
Iteration   2: 3911787.697 ops/s
Iteration   3: 3710146.813 ops/s
Iteration   4: 3784029.814 ops/s
Iteration   5: 3923651.448 ops/s
Iteration   6: 3830923.762 ops/s
Iteration   7: 3948277.178 ops/s
Iteration   8: 3964373.778 ops/s
Iteration   9: 3979034.005 ops/s
Iteration  10: 3988283.294 ops/s
Iteration  11: 3841983.900 ops/s
Iteration  12: 4007525.868 ops/s
Iteration  13: 3895788.411 ops/s
Iteration  14: 3974212.098 ops/s
Iteration  15: 3954935.153 ops/s
Iteration  16: 3918703.015 ops/s
Iteration  17: 3914536.268 ops/s
Iteration  18: 3960106.727 ops/s
Iteration  19: 3925069.223 ops/s
Iteration  20: 3948407.534 ops/s
Iteration  21: 3975823.954 ops/s
Iteration  22: 3937225.823 ops/s
Iteration  23: 3941961.958 ops/s
Iteration  24: 3944147.404 ops/s
Iteration  25: 3974116.152 ops/s
Iteration  26: 3904632.838 ops/s
Iteration  27: 3920838.784 ops/s
Iteration  28: 3969320.244 ops/s
Iteration  29: 3923267.822 ops/s
Iteration  30: 3947310.004 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEachValue":
  3923008.667 ±(99.9%) 42164.181 ops/s [Average]
  (min, avg, max) = (3710146.813, 3923008.667, 4007525.868), stdev = 63109.366
  CI (99.9%): [3880844.486, 3965172.848] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEachValue  thrpt   30  3923008.667 ± 42164.181  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1276069.373 ops/s
# Warmup Iteration   2: 3330815.403 ops/s
# Warmup Iteration   3: 3118163.928 ops/s
# Warmup Iteration   4: 2651489.200 ops/s
# Warmup Iteration   5: 3220030.284 ops/s
# Warmup Iteration   6: 3180586.100 ops/s
# Warmup Iteration   7: 3202328.632 ops/s
# Warmup Iteration   8: 3192236.363 ops/s
# Warmup Iteration   9: 3208985.269 ops/s
# Warmup Iteration  10: 3311687.945 ops/s
# Warmup Iteration  11: 3239828.752 ops/s
# Warmup Iteration  12: 3148491.213 ops/s
# Warmup Iteration  13: 3194520.624 ops/s
# Warmup Iteration  14: 3200492.150 ops/s
# Warmup Iteration  15: 3161214.874 ops/s
# Warmup Iteration  16: 3207360.717 ops/s
# Warmup Iteration  17: 3182185.160 ops/s
# Warmup Iteration  18: 3231599.521 ops/s
# Warmup Iteration  19: 3221122.944 ops/s
# Warmup Iteration  20: 3278747.835 ops/s
# Warmup Iteration  21: 3259751.614 ops/s
# Warmup Iteration  22: 3277660.966 ops/s
# Warmup Iteration  23: 3315379.566 ops/s
# Warmup Iteration  24: 3283978.446 ops/s
# Warmup Iteration  25: 3314614.665 ops/s
# Warmup Iteration  26: 3307441.598 ops/s
# Warmup Iteration  27: 3306425.960 ops/s
# Warmup Iteration  28: 3319116.349 ops/s
# Warmup Iteration  29: 3313521.188 ops/s
# Warmup Iteration  30: 3324539.237 ops/s
Iteration   1: 3325409.051 ops/s
Iteration   2: 3331042.431 ops/s
Iteration   3: 3316118.164 ops/s
Iteration   4: 3324242.847 ops/s
Iteration   5: 3323287.438 ops/s
Iteration   6: 3326436.714 ops/s
Iteration   7: 3334557.892 ops/s
Iteration   8: 3268501.963 ops/s
Iteration   9: 3159964.687 ops/s
Iteration  10: 3171261.442 ops/s
Iteration  11: 3228539.493 ops/s
Iteration  12: 3185501.807 ops/s
Iteration  13: 3203354.670 ops/s
Iteration  14: 3129618.467 ops/s
Iteration  15: 3130486.196 ops/s
Iteration  16: 3164905.099 ops/s
Iteration  17: 3158927.293 ops/s
Iteration  18: 3147676.205 ops/s
Iteration  19: 3105500.075 ops/s
Iteration  20: 3195521.563 ops/s
Iteration  21: 3263393.188 ops/s
Iteration  22: 3150399.435 ops/s
Iteration  23: 3215626.468 ops/s
Iteration  24: 3198096.974 ops/s
Iteration  25: 3203377.129 ops/s
Iteration  26: 3230368.419 ops/s
Iteration  27: 3174182.989 ops/s
Iteration  28: 3187946.971 ops/s
Iteration  29: 3270388.580 ops/s
Iteration  30: 3217086.206 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEachWith":
  3221390.662 ±(99.9%) 47022.702 ops/s [Average]
  (min, avg, max) = (3105500.075, 3221390.662, 3334557.892), stdev = 70381.371
  CI (99.9%): [3174367.960, 3268413.363] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEachWith  thrpt   30  3221390.662 ± 47022.702  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1284843.601 ops/s
# Warmup Iteration   2: 3244025.411 ops/s
# Warmup Iteration   3: 3370483.010 ops/s
# Warmup Iteration   4: 2740693.820 ops/s
# Warmup Iteration   5: 3349397.723 ops/s
# Warmup Iteration   6: 3336091.103 ops/s
# Warmup Iteration   7: 3362370.722 ops/s
# Warmup Iteration   8: 3315891.527 ops/s
# Warmup Iteration   9: 3384045.097 ops/s
# Warmup Iteration  10: 3412721.776 ops/s
# Warmup Iteration  11: 3414481.583 ops/s
# Warmup Iteration  12: 3353729.475 ops/s
# Warmup Iteration  13: 3352623.771 ops/s
# Warmup Iteration  14: 3427873.762 ops/s
# Warmup Iteration  15: 3386879.605 ops/s
# Warmup Iteration  16: 3432926.846 ops/s
# Warmup Iteration  17: 3405183.559 ops/s
# Warmup Iteration  18: 3382153.100 ops/s
# Warmup Iteration  19: 3353166.850 ops/s
# Warmup Iteration  20: 3431618.279 ops/s
# Warmup Iteration  21: 3372082.167 ops/s
# Warmup Iteration  22: 3342862.128 ops/s
# Warmup Iteration  23: 3369543.502 ops/s
# Warmup Iteration  24: 3397907.084 ops/s
# Warmup Iteration  25: 3378738.299 ops/s
# Warmup Iteration  26: 3347668.181 ops/s
# Warmup Iteration  27: 3368844.283 ops/s
# Warmup Iteration  28: 3295571.403 ops/s
# Warmup Iteration  29: 3380778.676 ops/s
# Warmup Iteration  30: 3432036.304 ops/s
Iteration   1: 3444195.890 ops/s
Iteration   2: 3430701.778 ops/s
Iteration   3: 3445220.806 ops/s
Iteration   4: 3444792.040 ops/s
Iteration   5: 3441287.992 ops/s
Iteration   6: 3433708.028 ops/s
Iteration   7: 3414890.279 ops/s
Iteration   8: 3444336.868 ops/s
Iteration   9: 3443089.801 ops/s
Iteration  10: 3442251.945 ops/s
Iteration  11: 3431330.570 ops/s
Iteration  12: 3452930.819 ops/s
Iteration  13: 3408297.434 ops/s
Iteration  14: 3434160.058 ops/s
Iteration  15: 3438746.512 ops/s
Iteration  16: 3442196.316 ops/s
Iteration  17: 3444517.601 ops/s
Iteration  18: 3443319.010 ops/s
Iteration  19: 3450914.509 ops/s
Iteration  20: 3436529.015 ops/s
Iteration  21: 3440388.125 ops/s
Iteration  22: 3435390.033 ops/s
Iteration  23: 3428533.084 ops/s
Iteration  24: 3416467.404 ops/s
Iteration  25: 3406908.292 ops/s
Iteration  26: 3440310.177 ops/s
Iteration  27: 3429750.777 ops/s
Iteration  28: 3425078.370 ops/s
Iteration  29: 3435172.844 ops/s
Iteration  30: 3432418.342 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEachWithIndex":
  3435261.157 ±(99.9%) 7694.649 ops/s [Average]
  (min, avg, max) = (3406908.292, 3435261.157, 3452930.819), stdev = 11516.990
  CI (99.9%): [3427566.508, 3442955.807] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  3435261.157 ± 7694.649  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2465157.191 ops/s
# Warmup Iteration   2: 5412029.476 ops/s
# Warmup Iteration   3: 5381467.265 ops/s
# Warmup Iteration   4: 4520889.989 ops/s
# Warmup Iteration   5: 5391697.572 ops/s
# Warmup Iteration   6: 5391867.981 ops/s
# Warmup Iteration   7: 5406527.760 ops/s
# Warmup Iteration   8: 5385616.754 ops/s
# Warmup Iteration   9: 5390847.470 ops/s
# Warmup Iteration  10: 5376319.041 ops/s
# Warmup Iteration  11: 5333286.634 ops/s
# Warmup Iteration  12: 5268583.225 ops/s
# Warmup Iteration  13: 5142629.809 ops/s
# Warmup Iteration  14: 5212163.796 ops/s
# Warmup Iteration  15: 5319718.381 ops/s
# Warmup Iteration  16: 5391266.994 ops/s
# Warmup Iteration  17: 5330189.015 ops/s
# Warmup Iteration  18: 5157709.979 ops/s
# Warmup Iteration  19: 5174252.438 ops/s
# Warmup Iteration  20: 5123725.282 ops/s
# Warmup Iteration  21: 5152820.939 ops/s
# Warmup Iteration  22: 5192935.894 ops/s
# Warmup Iteration  23: 5119398.267 ops/s
# Warmup Iteration  24: 5149817.866 ops/s
# Warmup Iteration  25: 5141072.060 ops/s
# Warmup Iteration  26: 5186974.174 ops/s
# Warmup Iteration  27: 5152580.636 ops/s
# Warmup Iteration  28: 5224667.076 ops/s
# Warmup Iteration  29: 5196983.929 ops/s
# Warmup Iteration  30: 5127564.347 ops/s
Iteration   1: 5234319.164 ops/s
Iteration   2: 5204030.205 ops/s
Iteration   3: 5281431.234 ops/s
Iteration   4: 5188668.959 ops/s
Iteration   5: 5093238.502 ops/s
Iteration   6: 5144263.379 ops/s
Iteration   7: 5232114.694 ops/s
Iteration   8: 5131219.088 ops/s
Iteration   9: 5119393.477 ops/s
Iteration  10: 5039903.013 ops/s
Iteration  11: 5098274.815 ops/s
Iteration  12: 5177319.697 ops/s
Iteration  13: 5140186.291 ops/s
Iteration  14: 5157373.266 ops/s
Iteration  15: 5164860.611 ops/s
Iteration  16: 5190203.070 ops/s
Iteration  17: 5188559.881 ops/s
Iteration  18: 5222869.146 ops/s
Iteration  19: 5292784.995 ops/s
Iteration  20: 5312308.848 ops/s
Iteration  21: 5328294.167 ops/s
Iteration  22: 5173133.534 ops/s
Iteration  23: 5096909.465 ops/s
Iteration  24: 5213895.213 ops/s
Iteration  25: 5262180.815 ops/s
Iteration  26: 5246958.548 ops/s
Iteration  27: 5204464.848 ops/s
Iteration  28: 5320323.818 ops/s
Iteration  29: 5231041.548 ops/s
Iteration  30: 5253835.778 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_get":
  5198145.336 ±(99.9%) 48392.319 ops/s [Average]
  (min, avg, max) = (5039903.013, 5198145.336, 5328294.167), stdev = 72431.350
  CI (99.9%): [5149753.017, 5246537.655] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_get  thrpt   30  5198145.336 ± 48392.319  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_getIfAbsent$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_getIfAbsent

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2061657.832 ops/s
# Warmup Iteration   2: 4571793.615 ops/s
# Warmup Iteration   3: 4607211.107 ops/s
# Warmup Iteration   4: 3900245.596 ops/s
# Warmup Iteration   5: 4486953.871 ops/s
# Warmup Iteration   6: 4576217.214 ops/s
# Warmup Iteration   7: 4406077.733 ops/s
# Warmup Iteration   8: 4168869.691 ops/s
# Warmup Iteration   9: 4713135.600 ops/s
# Warmup Iteration  10: 4649575.161 ops/s
# Warmup Iteration  11: 4591076.211 ops/s
# Warmup Iteration  12: 4623889.415 ops/s
# Warmup Iteration  13: 4688466.703 ops/s
# Warmup Iteration  14: 4729772.530 ops/s
# Warmup Iteration  15: 4691531.104 ops/s
# Warmup Iteration  16: 4654378.365 ops/s
# Warmup Iteration  17: 4583260.087 ops/s
# Warmup Iteration  18: 4753742.378 ops/s
# Warmup Iteration  19: 4492605.825 ops/s
# Warmup Iteration  20: 4488014.564 ops/s
# Warmup Iteration  21: 4585281.022 ops/s
# Warmup Iteration  22: 4475106.630 ops/s
# Warmup Iteration  23: 4511730.888 ops/s
# Warmup Iteration  24: 4335306.798 ops/s
# Warmup Iteration  25: 4382533.005 ops/s
# Warmup Iteration  26: 4469803.624 ops/s
# Warmup Iteration  27: 4526238.370 ops/s
# Warmup Iteration  28: 4504759.361 ops/s
# Warmup Iteration  29: 4561306.296 ops/s
# Warmup Iteration  30: 4036016.006 ops/s
Iteration   1: 4617992.545 ops/s
Iteration   2: 4499698.401 ops/s
Iteration   3: 4554033.356 ops/s
Iteration   4: 4338528.963 ops/s
Iteration   5: 4519682.342 ops/s
Iteration   6: 4445302.802 ops/s
Iteration   7: 4466568.439 ops/s
Iteration   8: 4551978.439 ops/s
Iteration   9: 4484791.484 ops/s
Iteration  10: 4557537.978 ops/s
Iteration  11: 4410134.621 ops/s
Iteration  12: 4402749.358 ops/s
Iteration  13: 4449976.164 ops/s
Iteration  14: 4329674.467 ops/s
Iteration  15: 4491402.690 ops/s
Iteration  16: 4543489.918 ops/s
Iteration  17: 4493067.924 ops/s
Iteration  18: 4326655.277 ops/s
Iteration  19: 4583064.934 ops/s
Iteration  20: 4348148.541 ops/s
Iteration  21: 4374438.360 ops/s
Iteration  22: 4437095.062 ops/s
Iteration  23: 4496059.440 ops/s
Iteration  24: 4444392.449 ops/s
Iteration  25: 4380881.979 ops/s
Iteration  26: 4391861.960 ops/s
Iteration  27: 4291534.252 ops/s
Iteration  28: 4395314.296 ops/s
Iteration  29: 4502842.506 ops/s
Iteration  30: 4590402.185 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_getIfAbsent":
  4457310.038 ±(99.9%) 58371.511 ops/s [Average]
  (min, avg, max) = (4291534.252, 4457310.038, 4617992.545), stdev = 87367.736
  CI (99.9%): [4398938.527, 4515681.549] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_getIfAbsent  thrpt   30  4457310.038 ± 58371.511  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_getIfAbsentWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_getIfAbsentWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2057868.700 ops/s
# Warmup Iteration   2: 4711904.386 ops/s
# Warmup Iteration   3: 4813056.968 ops/s
# Warmup Iteration   4: 3978899.652 ops/s
# Warmup Iteration   5: 4825774.234 ops/s
# Warmup Iteration   6: 4762950.118 ops/s
# Warmup Iteration   7: 4767304.116 ops/s
# Warmup Iteration   8: 4748010.952 ops/s
# Warmup Iteration   9: 4802757.228 ops/s
# Warmup Iteration  10: 4796130.921 ops/s
# Warmup Iteration  11: 4882427.897 ops/s
# Warmup Iteration  12: 4703227.995 ops/s
# Warmup Iteration  13: 4713686.862 ops/s
# Warmup Iteration  14: 4832738.747 ops/s
# Warmup Iteration  15: 4718236.591 ops/s
# Warmup Iteration  16: 4798800.939 ops/s
# Warmup Iteration  17: 4604981.638 ops/s
# Warmup Iteration  18: 4748577.691 ops/s
# Warmup Iteration  19: 4660708.733 ops/s
# Warmup Iteration  20: 4503227.518 ops/s
# Warmup Iteration  21: 4823362.255 ops/s
# Warmup Iteration  22: 4808339.245 ops/s
# Warmup Iteration  23: 4801022.910 ops/s
# Warmup Iteration  24: 4775408.370 ops/s
# Warmup Iteration  25: 4819517.006 ops/s
# Warmup Iteration  26: 4800119.358 ops/s
# Warmup Iteration  27: 4735244.754 ops/s
# Warmup Iteration  28: 4751184.038 ops/s
# Warmup Iteration  29: 4740833.719 ops/s
# Warmup Iteration  30: 4825170.891 ops/s
Iteration   1: 4821322.156 ops/s
Iteration   2: 4768165.741 ops/s
Iteration   3: 4795106.173 ops/s
Iteration   4: 4809980.608 ops/s
Iteration   5: 4718594.717 ops/s
Iteration   6: 4842569.179 ops/s
Iteration   7: 4777425.026 ops/s
Iteration   8: 4755006.651 ops/s
Iteration   9: 4713445.146 ops/s
Iteration  10: 4695894.492 ops/s
Iteration  11: 4757166.401 ops/s
Iteration  12: 4682889.772 ops/s
Iteration  13: 4764631.871 ops/s
Iteration  14: 4656526.136 ops/s
Iteration  15: 4820268.389 ops/s
Iteration  16: 4750204.209 ops/s
Iteration  17: 4737306.368 ops/s
Iteration  18: 4723753.292 ops/s
Iteration  19: 4754596.447 ops/s
Iteration  20: 4777976.533 ops/s
Iteration  21: 4811221.419 ops/s
Iteration  22: 4882655.347 ops/s
Iteration  23: 4958542.335 ops/s
Iteration  24: 4874545.540 ops/s
Iteration  25: 4789791.216 ops/s
Iteration  26: 4888488.964 ops/s
Iteration  27: 4980516.137 ops/s
Iteration  28: 4674412.646 ops/s
Iteration  29: 4985147.706 ops/s
Iteration  30: 4952732.484 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_getIfAbsentWith":
  4797362.770 ±(99.9%) 60117.619 ops/s [Average]
  (min, avg, max) = (4656526.136, 4797362.770, 4985147.706), stdev = 89981.228
  CI (99.9%): [4737245.151, 4857480.389] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_getIfAbsentWith  thrpt   30  4797362.770 ± 60117.619  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_getIfAbsent_function$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_getIfAbsent_function

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2212805.390 ops/s
# Warmup Iteration   2: 4901903.557 ops/s
# Warmup Iteration   3: 4903642.341 ops/s
# Warmup Iteration   4: 4096065.390 ops/s
# Warmup Iteration   5: 4896548.204 ops/s
# Warmup Iteration   6: 4904120.355 ops/s
# Warmup Iteration   7: 4908880.614 ops/s
# Warmup Iteration   8: 4881750.129 ops/s
# Warmup Iteration   9: 4863139.126 ops/s
# Warmup Iteration  10: 4752257.620 ops/s
# Warmup Iteration  11: 4763338.282 ops/s
# Warmup Iteration  12: 4846630.716 ops/s
# Warmup Iteration  13: 4862864.343 ops/s
# Warmup Iteration  14: 4868271.517 ops/s
# Warmup Iteration  15: 4828371.777 ops/s
# Warmup Iteration  16: 4838917.951 ops/s
# Warmup Iteration  17: 4889780.064 ops/s
# Warmup Iteration  18: 4874521.403 ops/s
# Warmup Iteration  19: 4862325.439 ops/s
# Warmup Iteration  20: 4845394.052 ops/s
# Warmup Iteration  21: 4869402.558 ops/s
# Warmup Iteration  22: 4802153.164 ops/s
# Warmup Iteration  23: 4856834.661 ops/s
# Warmup Iteration  24: 4789395.843 ops/s
# Warmup Iteration  25: 4799069.009 ops/s
# Warmup Iteration  26: 4824828.198 ops/s
# Warmup Iteration  27: 4854019.407 ops/s
# Warmup Iteration  28: 4849654.051 ops/s
# Warmup Iteration  29: 4858357.981 ops/s
# Warmup Iteration  30: 4787946.969 ops/s
Iteration   1: 4801064.317 ops/s
Iteration   2: 4805299.801 ops/s
Iteration   3: 4827166.550 ops/s
Iteration   4: 4864045.336 ops/s
Iteration   5: 4792573.462 ops/s
Iteration   6: 4845923.088 ops/s
Iteration   7: 4911529.371 ops/s
Iteration   8: 4870358.476 ops/s
Iteration   9: 4837135.919 ops/s
Iteration  10: 4822053.412 ops/s
Iteration  11: 4836521.873 ops/s
Iteration  12: 4851726.169 ops/s
Iteration  13: 4842702.073 ops/s
Iteration  14: 4866755.861 ops/s
Iteration  15: 4873318.520 ops/s
Iteration  16: 4801280.980 ops/s
Iteration  17: 4860450.747 ops/s
Iteration  18: 4831183.166 ops/s
Iteration  19: 4853855.545 ops/s
Iteration  20: 4861938.936 ops/s
Iteration  21: 4856141.917 ops/s
Iteration  22: 4867332.348 ops/s
Iteration  23: 4849768.149 ops/s
Iteration  24: 4874736.413 ops/s
Iteration  25: 4822979.063 ops/s
Iteration  26: 4866315.063 ops/s
Iteration  27: 4873449.845 ops/s
Iteration  28: 4836022.345 ops/s
Iteration  29: 4888117.701 ops/s
Iteration  30: 4816837.615 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_getIfAbsent_function":
  4846952.802 ±(99.9%) 18649.126 ops/s [Average]
  (min, avg, max) = (4792573.462, 4846952.802, 4911529.371), stdev = 27913.136
  CI (99.9%): [4828303.676, 4865601.928] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_getIfAbsent_function  thrpt   30  4846952.802 ± 18649.126  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_getOrDefault$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_getOrDefault

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2187876.417 ops/s
# Warmup Iteration   2: 4903227.842 ops/s
# Warmup Iteration   3: 4992734.571 ops/s
# Warmup Iteration   4: 4155801.281 ops/s
# Warmup Iteration   5: 4924476.301 ops/s
# Warmup Iteration   6: 4939666.971 ops/s
# Warmup Iteration   7: 5009495.376 ops/s
# Warmup Iteration   8: 5054265.307 ops/s
# Warmup Iteration   9: 4933116.721 ops/s
# Warmup Iteration  10: 4823931.876 ops/s
# Warmup Iteration  11: 4707606.725 ops/s
# Warmup Iteration  12: 4742344.061 ops/s
# Warmup Iteration  13: 4878736.579 ops/s
# Warmup Iteration  14: 4980381.913 ops/s
# Warmup Iteration  15: 4835187.544 ops/s
# Warmup Iteration  16: 4735246.560 ops/s
# Warmup Iteration  17: 4704570.798 ops/s
# Warmup Iteration  18: 4868522.989 ops/s
# Warmup Iteration  19: 4903634.857 ops/s
# Warmup Iteration  20: 4715318.806 ops/s
# Warmup Iteration  21: 4803940.983 ops/s
# Warmup Iteration  22: 4773928.539 ops/s
# Warmup Iteration  23: 4877097.785 ops/s
# Warmup Iteration  24: 4742970.740 ops/s
# Warmup Iteration  25: 4848289.901 ops/s
# Warmup Iteration  26: 4766886.929 ops/s
# Warmup Iteration  27: 4745302.691 ops/s
# Warmup Iteration  28: 4867932.405 ops/s
# Warmup Iteration  29: 4785032.850 ops/s
# Warmup Iteration  30: 4763888.647 ops/s
Iteration   1: 4881720.216 ops/s
Iteration   2: 4652177.907 ops/s
Iteration   3: 4731642.546 ops/s
Iteration   4: 4862246.782 ops/s
Iteration   5: 4740271.001 ops/s
Iteration   6: 4853071.053 ops/s
Iteration   7: 4824488.979 ops/s
Iteration   8: 4806973.849 ops/s
Iteration   9: 4772260.626 ops/s
Iteration  10: 4766393.780 ops/s
Iteration  11: 4793414.657 ops/s
Iteration  12: 4851087.552 ops/s
Iteration  13: 4839224.264 ops/s
Iteration  14: 4917993.362 ops/s
Iteration  15: 4706536.888 ops/s
Iteration  16: 4821249.088 ops/s
Iteration  17: 4811331.251 ops/s
Iteration  18: 4824042.490 ops/s
Iteration  19: 4784260.807 ops/s
Iteration  20: 4784915.114 ops/s
Iteration  21: 4825318.925 ops/s
Iteration  22: 4699834.787 ops/s
Iteration  23: 4761003.008 ops/s
Iteration  24: 4829427.404 ops/s
Iteration  25: 4741472.226 ops/s
Iteration  26: 4889001.355 ops/s
Iteration  27: 4823625.512 ops/s
Iteration  28: 4775603.342 ops/s
Iteration  29: 4742676.533 ops/s
Iteration  30: 4760781.347 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_getOrDefault":
  4795801.555 ±(99.9%) 40076.666 ops/s [Average]
  (min, avg, max) = (4652177.907, 4795801.555, 4917993.362), stdev = 59984.872
  CI (99.9%): [4755724.889, 4835878.221] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_getOrDefault  thrpt   30  4795801.555 ± 40076.666  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_ifPresentApply$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_ifPresentApply

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6135236.630 ops/s
# Warmup Iteration   2: 12095866.861 ops/s
# Warmup Iteration   3: 12650930.158 ops/s
# Warmup Iteration   4: 12576740.179 ops/s
# Warmup Iteration   5: 10567779.734 ops/s
# Warmup Iteration   6: 12819719.475 ops/s
# Warmup Iteration   7: 12741447.923 ops/s
# Warmup Iteration   8: 12598361.677 ops/s
# Warmup Iteration   9: 12963504.119 ops/s
# Warmup Iteration  10: 12876182.274 ops/s
# Warmup Iteration  11: 12870866.734 ops/s
# Warmup Iteration  12: 12826573.133 ops/s
# Warmup Iteration  13: 12689054.305 ops/s
# Warmup Iteration  14: 12606699.151 ops/s
# Warmup Iteration  15: 12597147.341 ops/s
# Warmup Iteration  16: 12537490.489 ops/s
# Warmup Iteration  17: 12768515.514 ops/s
# Warmup Iteration  18: 12774277.813 ops/s
# Warmup Iteration  19: 12629403.861 ops/s
# Warmup Iteration  20: 12550255.792 ops/s
# Warmup Iteration  21: 12641685.869 ops/s
# Warmup Iteration  22: 12604660.578 ops/s
# Warmup Iteration  23: 12567439.135 ops/s
# Warmup Iteration  24: 12872839.678 ops/s
# Warmup Iteration  25: 12652820.363 ops/s
# Warmup Iteration  26: 12848492.937 ops/s
# Warmup Iteration  27: 13110916.010 ops/s
# Warmup Iteration  28: 13122027.869 ops/s
# Warmup Iteration  29: 13193332.358 ops/s
# Warmup Iteration  30: 13227091.577 ops/s
Iteration   1: 13232218.574 ops/s
Iteration   2: 13219612.417 ops/s
Iteration   3: 13201707.453 ops/s
Iteration   4: 13139403.682 ops/s
Iteration   5: 13205138.557 ops/s
Iteration   6: 13215242.645 ops/s
Iteration   7: 13198411.858 ops/s
Iteration   8: 13174868.342 ops/s
Iteration   9: 13239807.127 ops/s
Iteration  10: 13142830.669 ops/s
Iteration  11: 13209883.145 ops/s
Iteration  12: 13210053.326 ops/s
Iteration  13: 13196146.276 ops/s
Iteration  14: 13201544.062 ops/s
Iteration  15: 13019253.529 ops/s
Iteration  16: 12836247.688 ops/s
Iteration  17: 13169442.033 ops/s
Iteration  18: 13224526.053 ops/s
Iteration  19: 13216738.467 ops/s
Iteration  20: 13141063.250 ops/s
Iteration  21: 13220054.608 ops/s
Iteration  22: 13203872.638 ops/s
Iteration  23: 13213084.138 ops/s
Iteration  24: 13168481.669 ops/s
Iteration  25: 13124912.116 ops/s
Iteration  26: 13198031.931 ops/s
Iteration  27: 13217169.553 ops/s
Iteration  28: 13169063.367 ops/s
Iteration  29: 13218799.351 ops/s
Iteration  30: 13147871.359 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_ifPresentApply":
  13175849.329 ±(99.9%) 51956.952 ops/s [Average]
  (min, avg, max) = (12836247.688, 13175849.329, 13239807.127), stdev = 77766.726
  CI (99.9%): [13123892.377, 13227806.281] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_ifPresentApply  thrpt   30  13175849.329 ± 51956.952  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1505880.047 ops/s
# Warmup Iteration   2: 4193240.349 ops/s
# Warmup Iteration   3: 4306866.138 ops/s
# Warmup Iteration   4: 3581387.555 ops/s
# Warmup Iteration   5: 4305467.321 ops/s
# Warmup Iteration   6: 4310244.859 ops/s
# Warmup Iteration   7: 4310062.792 ops/s
# Warmup Iteration   8: 4295624.478 ops/s
# Warmup Iteration   9: 4290764.586 ops/s
# Warmup Iteration  10: 4302728.274 ops/s
# Warmup Iteration  11: 4320136.331 ops/s
# Warmup Iteration  12: 4304533.198 ops/s
# Warmup Iteration  13: 4316668.924 ops/s
# Warmup Iteration  14: 4292498.669 ops/s
# Warmup Iteration  15: 4176685.780 ops/s
# Warmup Iteration  16: 4153488.471 ops/s
# Warmup Iteration  17: 4107378.341 ops/s
# Warmup Iteration  18: 4211196.800 ops/s
# Warmup Iteration  19: 4203055.354 ops/s
# Warmup Iteration  20: 4183173.571 ops/s
# Warmup Iteration  21: 4137289.974 ops/s
# Warmup Iteration  22: 4117788.978 ops/s
# Warmup Iteration  23: 4207032.793 ops/s
# Warmup Iteration  24: 4210948.384 ops/s
# Warmup Iteration  25: 4185739.924 ops/s
# Warmup Iteration  26: 4171501.733 ops/s
# Warmup Iteration  27: 4182539.213 ops/s
# Warmup Iteration  28: 4105722.570 ops/s
# Warmup Iteration  29: 4177604.024 ops/s
# Warmup Iteration  30: 4131448.411 ops/s
Iteration   1: 4253939.769 ops/s
Iteration   2: 4243023.653 ops/s
Iteration   3: 4222761.316 ops/s
Iteration   4: 4156298.007 ops/s
Iteration   5: 4211786.680 ops/s
Iteration   6: 4217983.173 ops/s
Iteration   7: 4240915.456 ops/s
Iteration   8: 4199865.681 ops/s
Iteration   9: 4071135.856 ops/s
Iteration  10: 4080374.209 ops/s
Iteration  11: 4237214.233 ops/s
Iteration  12: 4170694.280 ops/s
Iteration  13: 4252474.206 ops/s
Iteration  14: 4211717.058 ops/s
Iteration  15: 4157318.167 ops/s
Iteration  16: 4129382.031 ops/s
Iteration  17: 4103487.141 ops/s
Iteration  18: 4133870.341 ops/s
Iteration  19: 4173838.555 ops/s
Iteration  20: 4177930.716 ops/s
Iteration  21: 4196921.652 ops/s
Iteration  22: 4149139.488 ops/s
Iteration  23: 4133718.405 ops/s
Iteration  24: 4063895.733 ops/s
Iteration  25: 4065667.301 ops/s
Iteration  26: 4161754.865 ops/s
Iteration  27: 4214784.629 ops/s
Iteration  28: 4107295.919 ops/s
Iteration  29: 4105054.443 ops/s
Iteration  30: 4150695.226 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_iterator":
  4166497.940 ±(99.9%) 38967.648 ops/s [Average]
  (min, avg, max) = (4063895.733, 4166497.940, 4253939.769), stdev = 58324.946
  CI (99.9%): [4127530.291, 4205465.588] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_iterator  thrpt   30  4166497.940 ± 38967.648  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_iteratorThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_iteratorThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 576826.151 ops/s
# Warmup Iteration   2: 636785.892 ops/s
# Warmup Iteration   3: 867247.065 ops/s
# Warmup Iteration   4: 859130.662 ops/s
# Warmup Iteration   5: 867361.789 ops/s
# Warmup Iteration   6: 868853.468 ops/s
# Warmup Iteration   7: 884784.754 ops/s
# Warmup Iteration   8: 871390.073 ops/s
# Warmup Iteration   9: 872911.207 ops/s
# Warmup Iteration  10: 865281.419 ops/s
# Warmup Iteration  11: 714225.468 ops/s
# Warmup Iteration  12: 873590.746 ops/s
# Warmup Iteration  13: 867391.199 ops/s
# Warmup Iteration  14: 865977.165 ops/s
# Warmup Iteration  15: 864516.100 ops/s
# Warmup Iteration  16: 883942.602 ops/s
# Warmup Iteration  17: 918966.933 ops/s
# Warmup Iteration  18: 921032.843 ops/s
# Warmup Iteration  19: 918384.724 ops/s
# Warmup Iteration  20: 914916.577 ops/s
# Warmup Iteration  21: 916794.898 ops/s
# Warmup Iteration  22: 925155.843 ops/s
# Warmup Iteration  23: 917391.675 ops/s
# Warmup Iteration  24: 923140.987 ops/s
# Warmup Iteration  25: 926066.206 ops/s
# Warmup Iteration  26: 913330.288 ops/s
# Warmup Iteration  27: 894181.693 ops/s
# Warmup Iteration  28: 925174.458 ops/s
# Warmup Iteration  29: 917162.167 ops/s
# Warmup Iteration  30: 927205.880 ops/s
Iteration   1: 913875.190 ops/s
Iteration   2: 946641.280 ops/s
Iteration   3: 931946.093 ops/s
Iteration   4: 935929.345 ops/s
Iteration   5: 924021.294 ops/s
Iteration   6: 929359.139 ops/s
Iteration   7: 943166.414 ops/s
Iteration   8: 931345.481 ops/s
Iteration   9: 935487.685 ops/s
Iteration  10: 922789.642 ops/s
Iteration  11: 915202.234 ops/s
Iteration  12: 910025.904 ops/s
Iteration  13: 917714.092 ops/s
Iteration  14: 917687.860 ops/s
Iteration  15: 943680.657 ops/s
Iteration  16: 914235.692 ops/s
Iteration  17: 935071.686 ops/s
Iteration  18: 916914.796 ops/s
Iteration  19: 936648.160 ops/s
Iteration  20: 913122.734 ops/s
Iteration  21: 913619.473 ops/s
Iteration  22: 920666.018 ops/s
Iteration  23: 920008.313 ops/s
Iteration  24: 924024.674 ops/s
Iteration  25: 935287.251 ops/s
Iteration  26: 947346.673 ops/s
Iteration  27: 938816.352 ops/s
Iteration  28: 920988.081 ops/s
Iteration  29: 926568.528 ops/s
Iteration  30: 924787.649 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_iteratorThrows":
  926899.280 ±(99.9%) 7319.585 ops/s [Average]
  (min, avg, max) = (910025.904, 926899.280, 947346.673), stdev = 10955.612
  CI (99.9%): [919579.694, 934218.865] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_iteratorThrows  thrpt   30  926899.280 ± 7319.585  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_keyValuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_keyValuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1083952.733 ops/s
# Warmup Iteration   2: 3030412.540 ops/s
# Warmup Iteration   3: 2968260.876 ops/s
# Warmup Iteration   4: 2429877.866 ops/s
# Warmup Iteration   5: 2969988.246 ops/s
# Warmup Iteration   6: 2951057.531 ops/s
# Warmup Iteration   7: 2955256.379 ops/s
# Warmup Iteration   8: 2970698.904 ops/s
# Warmup Iteration   9: 2991129.587 ops/s
# Warmup Iteration  10: 2981017.515 ops/s
# Warmup Iteration  11: 2948744.135 ops/s
# Warmup Iteration  12: 2962084.074 ops/s
# Warmup Iteration  13: 2960452.252 ops/s
# Warmup Iteration  14: 2989349.636 ops/s
# Warmup Iteration  15: 2945921.624 ops/s
# Warmup Iteration  16: 2930983.441 ops/s
# Warmup Iteration  17: 2956462.395 ops/s
# Warmup Iteration  18: 2979203.178 ops/s
# Warmup Iteration  19: 2944484.821 ops/s
# Warmup Iteration  20: 2933447.014 ops/s
# Warmup Iteration  21: 2962591.144 ops/s
# Warmup Iteration  22: 2969633.546 ops/s
# Warmup Iteration  23: 2931084.692 ops/s
# Warmup Iteration  24: 2956826.595 ops/s
# Warmup Iteration  25: 2941306.469 ops/s
# Warmup Iteration  26: 2964744.024 ops/s
# Warmup Iteration  27: 2950270.496 ops/s
# Warmup Iteration  28: 2943838.424 ops/s
# Warmup Iteration  29: 2956193.767 ops/s
# Warmup Iteration  30: 2919897.281 ops/s
Iteration   1: 2994966.365 ops/s
Iteration   2: 2980069.697 ops/s
Iteration   3: 3003776.944 ops/s
Iteration   4: 2978834.473 ops/s
Iteration   5: 2993811.536 ops/s
Iteration   6: 2963161.850 ops/s
Iteration   7: 3004757.583 ops/s
Iteration   8: 3001187.606 ops/s
Iteration   9: 2912381.156 ops/s
Iteration  10: 2939778.978 ops/s
Iteration  11: 2976441.958 ops/s
Iteration  12: 2897860.241 ops/s
Iteration  13: 2960433.564 ops/s
Iteration  14: 2903442.922 ops/s
Iteration  15: 2915857.781 ops/s
Iteration  16: 2959456.833 ops/s
Iteration  17: 2941934.986 ops/s
Iteration  18: 2966479.988 ops/s
Iteration  19: 2975961.848 ops/s
Iteration  20: 2968261.759 ops/s
Iteration  21: 2961025.584 ops/s
Iteration  22: 2887015.909 ops/s
Iteration  23: 2941041.616 ops/s
Iteration  24: 2915058.761 ops/s
Iteration  25: 2902385.291 ops/s
Iteration  26: 3001871.625 ops/s
Iteration  27: 2908326.993 ops/s
Iteration  28: 2966794.685 ops/s
Iteration  29: 2931913.813 ops/s
Iteration  30: 2984501.779 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_keyValuesView":
  2954626.471 ±(99.9%) 23998.070 ops/s [Average]
  (min, avg, max) = (2887015.909, 2954626.471, 3004757.583), stdev = 35919.185
  CI (99.9%): [2930628.401, 2978624.541] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_keyValuesView  thrpt   30  2954626.471 ± 23998.070  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_keysView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_keysView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2394274.167 ops/s
# Warmup Iteration   2: 6719965.338 ops/s
# Warmup Iteration   3: 6766378.483 ops/s
# Warmup Iteration   4: 5613065.747 ops/s
# Warmup Iteration   5: 6746604.898 ops/s
# Warmup Iteration   6: 6745365.462 ops/s
# Warmup Iteration   7: 6737998.822 ops/s
# Warmup Iteration   8: 6798169.431 ops/s
# Warmup Iteration   9: 6848678.582 ops/s
# Warmup Iteration  10: 6794455.769 ops/s
# Warmup Iteration  11: 6870604.243 ops/s
# Warmup Iteration  12: 6937652.397 ops/s
# Warmup Iteration  13: 6767783.605 ops/s
# Warmup Iteration  14: 6829830.355 ops/s
# Warmup Iteration  15: 6816504.069 ops/s
# Warmup Iteration  16: 6793507.655 ops/s
# Warmup Iteration  17: 6782027.524 ops/s
# Warmup Iteration  18: 6825831.446 ops/s
# Warmup Iteration  19: 6855896.114 ops/s
# Warmup Iteration  20: 6879403.443 ops/s
# Warmup Iteration  21: 6800659.575 ops/s
# Warmup Iteration  22: 6935988.289 ops/s
# Warmup Iteration  23: 6908583.682 ops/s
# Warmup Iteration  24: 6951095.867 ops/s
# Warmup Iteration  25: 6827884.545 ops/s
# Warmup Iteration  26: 6806193.306 ops/s
# Warmup Iteration  27: 6952846.194 ops/s
# Warmup Iteration  28: 6912027.216 ops/s
# Warmup Iteration  29: 6847439.902 ops/s
# Warmup Iteration  30: 6824794.923 ops/s
Iteration   1: 6786480.509 ops/s
Iteration   2: 6910111.216 ops/s
Iteration   3: 6900968.431 ops/s
Iteration   4: 6955633.687 ops/s
Iteration   5: 6923658.084 ops/s
Iteration   6: 6734254.972 ops/s
Iteration   7: 6893278.744 ops/s
Iteration   8: 6842149.993 ops/s
Iteration   9: 6803859.815 ops/s
Iteration  10: 6750549.045 ops/s
Iteration  11: 6704752.868 ops/s
Iteration  12: 6820269.297 ops/s
Iteration  13: 6763279.916 ops/s
Iteration  14: 6818034.859 ops/s
Iteration  15: 6598459.823 ops/s
Iteration  16: 6839581.281 ops/s
Iteration  17: 6867984.248 ops/s
Iteration  18: 6871153.112 ops/s
Iteration  19: 6832299.859 ops/s
Iteration  20: 6713069.189 ops/s
Iteration  21: 6799993.036 ops/s
Iteration  22: 6803253.310 ops/s
Iteration  23: 6859508.013 ops/s
Iteration  24: 7020362.326 ops/s
Iteration  25: 6944963.630 ops/s
Iteration  26: 6700891.020 ops/s
Iteration  27: 6978224.200 ops/s
Iteration  28: 6996949.903 ops/s
Iteration  29: 6831863.959 ops/s
Iteration  30: 6694548.517 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_keysView":
  6832012.895 ±(99.9%) 66325.005 ops/s [Average]
  (min, avg, max) = (6598459.823, 6832012.895, 7020362.326), stdev = 99272.152
  CI (99.9%): [6765687.891, 6898337.900] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_keysView  thrpt   30  6832012.895 ± 66325.005  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithAllKeyValuePairs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithAllKeyValuePairs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 435460.559 ops/s
# Warmup Iteration   2: 867130.961 ops/s
# Warmup Iteration   3: 961696.180 ops/s
# Warmup Iteration   4: 947038.258 ops/s
# Warmup Iteration   5: 784325.615 ops/s
# Warmup Iteration   6: 972322.614 ops/s
# Warmup Iteration   7: 955506.365 ops/s
# Warmup Iteration   8: 975911.740 ops/s
# Warmup Iteration   9: 978214.697 ops/s
# Warmup Iteration  10: 971408.240 ops/s
# Warmup Iteration  11: 967165.361 ops/s
# Warmup Iteration  12: 970567.871 ops/s
# Warmup Iteration  13: 983635.899 ops/s
# Warmup Iteration  14: 972839.836 ops/s
# Warmup Iteration  15: 968879.641 ops/s
# Warmup Iteration  16: 981089.626 ops/s
# Warmup Iteration  17: 978778.961 ops/s
# Warmup Iteration  18: 977581.210 ops/s
# Warmup Iteration  19: 973368.812 ops/s
# Warmup Iteration  20: 976718.810 ops/s
# Warmup Iteration  21: 977703.785 ops/s
# Warmup Iteration  22: 967916.177 ops/s
# Warmup Iteration  23: 978033.297 ops/s
# Warmup Iteration  24: 961574.894 ops/s
# Warmup Iteration  25: 969440.722 ops/s
# Warmup Iteration  26: 965483.042 ops/s
# Warmup Iteration  27: 956865.028 ops/s
# Warmup Iteration  28: 985311.206 ops/s
# Warmup Iteration  29: 987916.837 ops/s
# Warmup Iteration  30: 970058.860 ops/s
Iteration   1: 986863.482 ops/s
Iteration   2: 974046.122 ops/s
Iteration   3: 967456.875 ops/s
Iteration   4: 970244.005 ops/s
Iteration   5: 955244.515 ops/s
Iteration   6: 973312.188 ops/s
Iteration   7: 960241.508 ops/s
Iteration   8: 949279.955 ops/s
Iteration   9: 961312.551 ops/s
Iteration  10: 969739.214 ops/s
Iteration  11: 965563.140 ops/s
Iteration  12: 956940.119 ops/s
Iteration  13: 981191.847 ops/s
Iteration  14: 964439.883 ops/s
Iteration  15: 975712.359 ops/s
Iteration  16: 960272.522 ops/s
Iteration  17: 964940.512 ops/s
Iteration  18: 966689.514 ops/s
Iteration  19: 957644.975 ops/s
Iteration  20: 959705.483 ops/s
Iteration  21: 968187.266 ops/s
Iteration  22: 956769.368 ops/s
Iteration  23: 959976.469 ops/s
Iteration  24: 995276.877 ops/s
Iteration  25: 982514.340 ops/s
Iteration  26: 955881.389 ops/s
Iteration  27: 973777.660 ops/s
Iteration  28: 983920.526 ops/s
Iteration  29: 970353.130 ops/s
Iteration  30: 965685.910 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithAllKeyValuePairs":
  967772.790 ±(99.9%) 7079.951 ops/s [Average]
  (min, avg, max) = (949279.955, 967772.790, 995276.877), stdev = 10596.939
  CI (99.9%): [960692.839, 974852.742] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithAllKeyValuePairs  thrpt   30  967772.790 ± 7079.951  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithAllKeyValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithAllKeyValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 427656.692 ops/s
# Warmup Iteration   2: 868094.870 ops/s
# Warmup Iteration   3: 1002794.627 ops/s
# Warmup Iteration   4: 1002727.251 ops/s
# Warmup Iteration   5: 845139.710 ops/s
# Warmup Iteration   6: 1008031.394 ops/s
# Warmup Iteration   7: 1006810.320 ops/s
# Warmup Iteration   8: 1007065.800 ops/s
# Warmup Iteration   9: 997158.766 ops/s
# Warmup Iteration  10: 1004654.441 ops/s
# Warmup Iteration  11: 1006326.362 ops/s
# Warmup Iteration  12: 1010223.957 ops/s
# Warmup Iteration  13: 991148.774 ops/s
# Warmup Iteration  14: 993233.023 ops/s
# Warmup Iteration  15: 978727.266 ops/s
# Warmup Iteration  16: 975876.564 ops/s
# Warmup Iteration  17: 964894.392 ops/s
# Warmup Iteration  18: 980291.977 ops/s
# Warmup Iteration  19: 973695.097 ops/s
# Warmup Iteration  20: 970216.702 ops/s
# Warmup Iteration  21: 978471.682 ops/s
# Warmup Iteration  22: 996231.739 ops/s
# Warmup Iteration  23: 992178.079 ops/s
# Warmup Iteration  24: 994425.210 ops/s
# Warmup Iteration  25: 966406.039 ops/s
# Warmup Iteration  26: 1001575.865 ops/s
# Warmup Iteration  27: 1007138.955 ops/s
# Warmup Iteration  28: 986494.815 ops/s
# Warmup Iteration  29: 983944.120 ops/s
# Warmup Iteration  30: 969812.842 ops/s
Iteration   1: 985138.311 ops/s
Iteration   2: 963898.484 ops/s
Iteration   3: 967761.984 ops/s
Iteration   4: 982203.161 ops/s
Iteration   5: 987399.998 ops/s
Iteration   6: 975809.966 ops/s
Iteration   7: 969111.006 ops/s
Iteration   8: 1013349.406 ops/s
Iteration   9: 1006071.260 ops/s
Iteration  10: 1009990.213 ops/s
Iteration  11: 995581.108 ops/s
Iteration  12: 1001978.482 ops/s
Iteration  13: 999119.494 ops/s
Iteration  14: 972243.494 ops/s
Iteration  15: 992921.472 ops/s
Iteration  16: 989796.838 ops/s
Iteration  17: 1012737.731 ops/s
Iteration  18: 997239.317 ops/s
Iteration  19: 987865.622 ops/s
Iteration  20: 982143.257 ops/s
Iteration  21: 992259.153 ops/s
Iteration  22: 993833.214 ops/s
Iteration  23: 1002145.087 ops/s
Iteration  24: 992067.943 ops/s
Iteration  25: 1003009.413 ops/s
Iteration  26: 992555.615 ops/s
Iteration  27: 979203.146 ops/s
Iteration  28: 1001409.647 ops/s
Iteration  29: 981913.169 ops/s
Iteration  30: 999299.483 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithAllKeyValues":
  991001.883 ±(99.9%) 8808.677 ops/s [Average]
  (min, avg, max) = (963898.484, 991001.883, 1013349.406), stdev = 13184.413
  CI (99.9%): [982193.206, 999810.559] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithAllKeyValues  thrpt   30  991001.883 ± 8808.677  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 492333.313 ops/s
# Warmup Iteration   2: 997528.977 ops/s
# Warmup Iteration   3: 1071327.015 ops/s
# Warmup Iteration   4: 1052594.479 ops/s
# Warmup Iteration   5: 870775.994 ops/s
# Warmup Iteration   6: 1051959.959 ops/s
# Warmup Iteration   7: 1060036.768 ops/s
# Warmup Iteration   8: 1063778.549 ops/s
# Warmup Iteration   9: 1065960.389 ops/s
# Warmup Iteration  10: 1053824.458 ops/s
# Warmup Iteration  11: 1066152.010 ops/s
# Warmup Iteration  12: 1059806.149 ops/s
# Warmup Iteration  13: 1047396.110 ops/s
# Warmup Iteration  14: 1050251.937 ops/s
# Warmup Iteration  15: 1060187.808 ops/s
# Warmup Iteration  16: 1051920.279 ops/s
# Warmup Iteration  17: 1062558.155 ops/s
# Warmup Iteration  18: 1059380.821 ops/s
# Warmup Iteration  19: 1055987.981 ops/s
# Warmup Iteration  20: 1049216.497 ops/s
# Warmup Iteration  21: 1066758.300 ops/s
# Warmup Iteration  22: 1063152.014 ops/s
# Warmup Iteration  23: 1070853.216 ops/s
# Warmup Iteration  24: 1064632.954 ops/s
# Warmup Iteration  25: 1064937.040 ops/s
# Warmup Iteration  26: 1056045.419 ops/s
# Warmup Iteration  27: 1049749.211 ops/s
# Warmup Iteration  28: 1053810.950 ops/s
# Warmup Iteration  29: 1063644.513 ops/s
# Warmup Iteration  30: 1058134.756 ops/s
Iteration   1: 1085063.997 ops/s
Iteration   2: 1068671.636 ops/s
Iteration   3: 1069995.783 ops/s
Iteration   4: 1059973.037 ops/s
Iteration   5: 1064836.091 ops/s
Iteration   6: 1036621.455 ops/s
Iteration   7: 1052308.866 ops/s
Iteration   8: 1054200.736 ops/s
Iteration   9: 1047990.647 ops/s
Iteration  10: 1060639.280 ops/s
Iteration  11: 1052255.653 ops/s
Iteration  12: 1060726.541 ops/s
Iteration  13: 1047652.087 ops/s
Iteration  14: 1060686.953 ops/s
Iteration  15: 1055104.202 ops/s
Iteration  16: 1056146.871 ops/s
Iteration  17: 1051671.948 ops/s
Iteration  18: 1065860.921 ops/s
Iteration  19: 1056005.294 ops/s
Iteration  20: 1063432.438 ops/s
Iteration  21: 1052342.237 ops/s
Iteration  22: 1045375.667 ops/s
Iteration  23: 1058422.589 ops/s
Iteration  24: 1065048.882 ops/s
Iteration  25: 1053784.616 ops/s
Iteration  26: 1037845.965 ops/s
Iteration  27: 1045594.785 ops/s
Iteration  28: 1067068.248 ops/s
Iteration  29: 1053353.448 ops/s
Iteration  30: 1053443.744 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithKeyValue":
  1056737.487 ±(99.9%) 6622.845 ops/s [Average]
  (min, avg, max) = (1036621.455, 1056737.487, 1085063.997), stdev = 9912.763
  CI (99.9%): [1050114.643, 1063360.332] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithKeyValue  thrpt   30  1056737.487 ± 6622.845  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithMap1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithMap1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 159391.980 ops/s
# Warmup Iteration   2: 319296.227 ops/s
# Warmup Iteration   3: 370589.191 ops/s
# Warmup Iteration   4: 374655.822 ops/s
# Warmup Iteration   5: 374781.046 ops/s
# Warmup Iteration   6: 326682.872 ops/s
# Warmup Iteration   7: 364941.217 ops/s
# Warmup Iteration   8: 376456.653 ops/s
# Warmup Iteration   9: 375124.972 ops/s
# Warmup Iteration  10: 375130.223 ops/s
# Warmup Iteration  11: 379601.638 ops/s
# Warmup Iteration  12: 376604.341 ops/s
# Warmup Iteration  13: 376758.759 ops/s
# Warmup Iteration  14: 371391.498 ops/s
# Warmup Iteration  15: 373456.764 ops/s
# Warmup Iteration  16: 377272.749 ops/s
# Warmup Iteration  17: 378042.974 ops/s
# Warmup Iteration  18: 378059.510 ops/s
# Warmup Iteration  19: 375888.878 ops/s
# Warmup Iteration  20: 377939.038 ops/s
# Warmup Iteration  21: 375780.492 ops/s
# Warmup Iteration  22: 377284.545 ops/s
# Warmup Iteration  23: 378917.088 ops/s
# Warmup Iteration  24: 372401.340 ops/s
# Warmup Iteration  25: 370590.345 ops/s
# Warmup Iteration  26: 374288.735 ops/s
# Warmup Iteration  27: 378584.027 ops/s
# Warmup Iteration  28: 375524.796 ops/s
# Warmup Iteration  29: 373057.745 ops/s
# Warmup Iteration  30: 378515.412 ops/s
Iteration   1: 375610.893 ops/s
Iteration   2: 370867.408 ops/s
Iteration   3: 377875.324 ops/s
Iteration   4: 374018.973 ops/s
Iteration   5: 371586.979 ops/s
Iteration   6: 374080.026 ops/s
Iteration   7: 373871.686 ops/s
Iteration   8: 376350.217 ops/s
Iteration   9: 376006.551 ops/s
Iteration  10: 369331.466 ops/s
Iteration  11: 379240.792 ops/s
Iteration  12: 376531.331 ops/s
Iteration  13: 376892.472 ops/s
Iteration  14: 379600.971 ops/s
Iteration  15: 379788.061 ops/s
Iteration  16: 375797.050 ops/s
Iteration  17: 378521.969 ops/s
Iteration  18: 376082.284 ops/s
Iteration  19: 378854.849 ops/s
Iteration  20: 376853.143 ops/s
Iteration  21: 375108.127 ops/s
Iteration  22: 380645.776 ops/s
Iteration  23: 378507.132 ops/s
Iteration  24: 374426.553 ops/s
Iteration  25: 378420.449 ops/s
Iteration  26: 378207.848 ops/s
Iteration  27: 377808.676 ops/s
Iteration  28: 375508.750 ops/s
Iteration  29: 377280.152 ops/s
Iteration  30: 372211.313 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithMap1":
  376196.241 ±(99.9%) 1842.808 ops/s [Average]
  (min, avg, max) = (369331.466, 376196.241, 380645.776), stdev = 2758.228
  CI (99.9%): [374353.433, 378039.048] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithMap1  thrpt   30  376196.241 ± 1842.808  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithMapEmptyAndTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithMapEmptyAndTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1681217.558 ops/s
# Warmup Iteration   2: 3906750.860 ops/s
# Warmup Iteration   3: 3247914.301 ops/s
# Warmup Iteration   4: 3847829.635 ops/s
# Warmup Iteration   5: 3910693.490 ops/s
# Warmup Iteration   6: 3887892.103 ops/s
# Warmup Iteration   7: 3904490.350 ops/s
# Warmup Iteration   8: 3889332.461 ops/s
# Warmup Iteration   9: 3881915.459 ops/s
# Warmup Iteration  10: 3862202.001 ops/s
# Warmup Iteration  11: 3889228.688 ops/s
# Warmup Iteration  12: 3931017.188 ops/s
# Warmup Iteration  13: 3847028.337 ops/s
# Warmup Iteration  14: 3866376.800 ops/s
# Warmup Iteration  15: 3879221.523 ops/s
# Warmup Iteration  16: 3885582.616 ops/s
# Warmup Iteration  17: 3911801.882 ops/s
# Warmup Iteration  18: 3866956.578 ops/s
# Warmup Iteration  19: 3868955.116 ops/s
# Warmup Iteration  20: 3881368.580 ops/s
# Warmup Iteration  21: 3877899.093 ops/s
# Warmup Iteration  22: 3901054.299 ops/s
# Warmup Iteration  23: 3919448.375 ops/s
# Warmup Iteration  24: 3885081.377 ops/s
# Warmup Iteration  25: 3891484.041 ops/s
# Warmup Iteration  26: 3876155.366 ops/s
# Warmup Iteration  27: 3897212.521 ops/s
# Warmup Iteration  28: 3856281.095 ops/s
# Warmup Iteration  29: 3896288.494 ops/s
# Warmup Iteration  30: 3858565.076 ops/s
Iteration   1: 3883579.605 ops/s
Iteration   2: 3926134.134 ops/s
Iteration   3: 3899295.235 ops/s
Iteration   4: 3830681.987 ops/s
Iteration   5: 3861711.702 ops/s
Iteration   6: 3837078.349 ops/s
Iteration   7: 3877207.262 ops/s
Iteration   8: 3842724.756 ops/s
Iteration   9: 3881753.800 ops/s
Iteration  10: 3896191.037 ops/s
Iteration  11: 3891635.592 ops/s
Iteration  12: 3942276.545 ops/s
Iteration  13: 3888001.319 ops/s
Iteration  14: 3863501.356 ops/s
Iteration  15: 3929867.813 ops/s
Iteration  16: 3880745.173 ops/s
Iteration  17: 3887447.098 ops/s
Iteration  18: 3840690.504 ops/s
Iteration  19: 3876559.683 ops/s
Iteration  20: 3898693.558 ops/s
Iteration  21: 3800206.241 ops/s
Iteration  22: 3891947.600 ops/s
Iteration  23: 3902763.228 ops/s
Iteration  24: 3913409.621 ops/s
Iteration  25: 3905673.905 ops/s
Iteration  26: 3926064.032 ops/s
Iteration  27: 3864980.237 ops/s
Iteration  28: 3876885.316 ops/s
Iteration  29: 3900286.832 ops/s
Iteration  30: 3891271.856 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithMapEmptyAndTargetEmpty":
  3883642.179 ±(99.9%) 21085.799 ops/s [Average]
  (min, avg, max) = (3800206.241, 3883642.179, 3942276.545), stdev = 31560.233
  CI (99.9%): [3862556.381, 3904727.978] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithMapEmptyAndTargetEmpty  thrpt   30  3883642.179 ± 21085.799  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithMapIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithMapIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 178556.697 ops/s
# Warmup Iteration   2: 334631.354 ops/s
# Warmup Iteration   3: 400607.591 ops/s
# Warmup Iteration   4: 396869.463 ops/s
# Warmup Iteration   5: 403858.549 ops/s
# Warmup Iteration   6: 386110.347 ops/s
# Warmup Iteration   7: 351345.904 ops/s
# Warmup Iteration   8: 400902.540 ops/s
# Warmup Iteration   9: 396507.077 ops/s
# Warmup Iteration  10: 403116.022 ops/s
# Warmup Iteration  11: 400766.882 ops/s
# Warmup Iteration  12: 405756.902 ops/s
# Warmup Iteration  13: 401961.550 ops/s
# Warmup Iteration  14: 400672.210 ops/s
# Warmup Iteration  15: 400207.534 ops/s
# Warmup Iteration  16: 396695.094 ops/s
# Warmup Iteration  17: 397940.691 ops/s
# Warmup Iteration  18: 402752.139 ops/s
# Warmup Iteration  19: 396875.253 ops/s
# Warmup Iteration  20: 401480.135 ops/s
# Warmup Iteration  21: 402032.875 ops/s
# Warmup Iteration  22: 404868.857 ops/s
# Warmup Iteration  23: 402340.688 ops/s
# Warmup Iteration  24: 401358.108 ops/s
# Warmup Iteration  25: 398758.058 ops/s
# Warmup Iteration  26: 402740.775 ops/s
# Warmup Iteration  27: 404888.143 ops/s
# Warmup Iteration  28: 400684.158 ops/s
# Warmup Iteration  29: 402030.525 ops/s
# Warmup Iteration  30: 401404.221 ops/s
Iteration   1: 403894.751 ops/s
Iteration   2: 408254.523 ops/s
Iteration   3: 398361.969 ops/s
Iteration   4: 395564.240 ops/s
Iteration   5: 394797.714 ops/s
Iteration   6: 399733.888 ops/s
Iteration   7: 400730.919 ops/s
Iteration   8: 398377.639 ops/s
Iteration   9: 401168.574 ops/s
Iteration  10: 397685.203 ops/s
Iteration  11: 399086.322 ops/s
Iteration  12: 402038.969 ops/s
Iteration  13: 402039.199 ops/s
Iteration  14: 400836.214 ops/s
Iteration  15: 402476.642 ops/s
Iteration  16: 399803.373 ops/s
Iteration  17: 394349.580 ops/s
Iteration  18: 400271.927 ops/s
Iteration  19: 397972.785 ops/s
Iteration  20: 400592.240 ops/s
Iteration  21: 398165.481 ops/s
Iteration  22: 405290.051 ops/s
Iteration  23: 402996.291 ops/s
Iteration  24: 406473.030 ops/s
Iteration  25: 398338.151 ops/s
Iteration  26: 408910.998 ops/s
Iteration  27: 413466.154 ops/s
Iteration  28: 411400.292 ops/s
Iteration  29: 408517.587 ops/s
Iteration  30: 404985.388 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithMapIterable":
  401886.003 ±(99.9%) 3191.080 ops/s [Average]
  (min, avg, max) = (394349.580, 401886.003, 413466.154), stdev = 4776.258
  CI (99.9%): [398694.924, 405077.083] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithMapIterable  thrpt   30  401886.003 ± 3191.080  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithMapIterableTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithMapIterableTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 235577.115 ops/s
# Warmup Iteration   2: 450800.404 ops/s
# Warmup Iteration   3: 525357.666 ops/s
# Warmup Iteration   4: 518109.080 ops/s
# Warmup Iteration   5: 467967.470 ops/s
# Warmup Iteration   6: 483806.942 ops/s
# Warmup Iteration   7: 518540.567 ops/s
# Warmup Iteration   8: 513035.072 ops/s
# Warmup Iteration   9: 518893.397 ops/s
# Warmup Iteration  10: 518800.163 ops/s
# Warmup Iteration  11: 519259.172 ops/s
# Warmup Iteration  12: 516246.447 ops/s
# Warmup Iteration  13: 518525.795 ops/s
# Warmup Iteration  14: 517663.240 ops/s
# Warmup Iteration  15: 521726.871 ops/s
# Warmup Iteration  16: 517078.612 ops/s
# Warmup Iteration  17: 511845.063 ops/s
# Warmup Iteration  18: 512745.046 ops/s
# Warmup Iteration  19: 513111.198 ops/s
# Warmup Iteration  20: 519068.732 ops/s
# Warmup Iteration  21: 517657.201 ops/s
# Warmup Iteration  22: 517028.076 ops/s
# Warmup Iteration  23: 508389.899 ops/s
# Warmup Iteration  24: 512170.919 ops/s
# Warmup Iteration  25: 517360.975 ops/s
# Warmup Iteration  26: 517676.018 ops/s
# Warmup Iteration  27: 509690.648 ops/s
# Warmup Iteration  28: 507564.348 ops/s
# Warmup Iteration  29: 514391.944 ops/s
# Warmup Iteration  30: 521831.309 ops/s
Iteration   1: 517859.950 ops/s
Iteration   2: 510125.438 ops/s
Iteration   3: 509339.519 ops/s
Iteration   4: 517032.364 ops/s
Iteration   5: 512298.019 ops/s
Iteration   6: 512018.268 ops/s
Iteration   7: 508886.894 ops/s
Iteration   8: 510268.851 ops/s
Iteration   9: 517266.805 ops/s
Iteration  10: 512790.475 ops/s
Iteration  11: 515587.916 ops/s
Iteration  12: 515845.481 ops/s
Iteration  13: 518899.794 ops/s
Iteration  14: 514286.043 ops/s
Iteration  15: 511365.593 ops/s
Iteration  16: 515469.463 ops/s
Iteration  17: 510737.983 ops/s
Iteration  18: 519142.978 ops/s
Iteration  19: 508846.920 ops/s
Iteration  20: 513770.158 ops/s
Iteration  21: 517701.223 ops/s
Iteration  22: 514563.234 ops/s
Iteration  23: 526823.371 ops/s
Iteration  24: 516194.338 ops/s
Iteration  25: 508917.775 ops/s
Iteration  26: 513152.442 ops/s
Iteration  27: 510234.160 ops/s
Iteration  28: 513912.769 ops/s
Iteration  29: 516639.802 ops/s
Iteration  30: 513498.479 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithMapIterableTargetEmpty":
  514115.883 ±(99.9%) 2642.010 ops/s [Average]
  (min, avg, max) = (508846.920, 514115.883, 526823.371), stdev = 3954.437
  CI (99.9%): [511473.873, 516757.894] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithMapIterableTargetEmpty  thrpt   30  514115.883 ± 2642.010  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithMapTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithMapTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 218221.045 ops/s
# Warmup Iteration   2: 451889.881 ops/s
# Warmup Iteration   3: 495131.815 ops/s
# Warmup Iteration   4: 503958.867 ops/s
# Warmup Iteration   5: 438099.474 ops/s
# Warmup Iteration   6: 482916.117 ops/s
# Warmup Iteration   7: 500064.565 ops/s
# Warmup Iteration   8: 498155.672 ops/s
# Warmup Iteration   9: 497366.539 ops/s
# Warmup Iteration  10: 500528.235 ops/s
# Warmup Iteration  11: 500482.566 ops/s
# Warmup Iteration  12: 499391.824 ops/s
# Warmup Iteration  13: 499372.312 ops/s
# Warmup Iteration  14: 499990.638 ops/s
# Warmup Iteration  15: 501208.698 ops/s
# Warmup Iteration  16: 499206.406 ops/s
# Warmup Iteration  17: 496833.141 ops/s
# Warmup Iteration  18: 500752.219 ops/s
# Warmup Iteration  19: 500066.360 ops/s
# Warmup Iteration  20: 499269.191 ops/s
# Warmup Iteration  21: 497656.415 ops/s
# Warmup Iteration  22: 504803.271 ops/s
# Warmup Iteration  23: 497209.460 ops/s
# Warmup Iteration  24: 500386.597 ops/s
# Warmup Iteration  25: 505562.603 ops/s
# Warmup Iteration  26: 504741.721 ops/s
# Warmup Iteration  27: 496829.708 ops/s
# Warmup Iteration  28: 500033.162 ops/s
# Warmup Iteration  29: 496924.104 ops/s
# Warmup Iteration  30: 505341.974 ops/s
Iteration   1: 499649.766 ops/s
Iteration   2: 495420.583 ops/s
Iteration   3: 492519.380 ops/s
Iteration   4: 496937.883 ops/s
Iteration   5: 496092.087 ops/s
Iteration   6: 501769.984 ops/s
Iteration   7: 497381.946 ops/s
Iteration   8: 494692.955 ops/s
Iteration   9: 498068.992 ops/s
Iteration  10: 508781.834 ops/s
Iteration  11: 496381.818 ops/s
Iteration  12: 506011.784 ops/s
Iteration  13: 502552.598 ops/s
Iteration  14: 501749.020 ops/s
Iteration  15: 496012.115 ops/s
Iteration  16: 499300.053 ops/s
Iteration  17: 496528.005 ops/s
Iteration  18: 502229.241 ops/s
Iteration  19: 509612.584 ops/s
Iteration  20: 500448.558 ops/s
Iteration  21: 499104.877 ops/s
Iteration  22: 506224.969 ops/s
Iteration  23: 503199.282 ops/s
Iteration  24: 498873.340 ops/s
Iteration  25: 505381.152 ops/s
Iteration  26: 500981.626 ops/s
Iteration  27: 500200.230 ops/s
Iteration  28: 502711.136 ops/s
Iteration  29: 491464.990 ops/s
Iteration  30: 497517.871 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithMapTargetEmpty":
  499926.689 ±(99.9%) 2969.143 ops/s [Average]
  (min, avg, max) = (491464.990, 499926.689, 509612.584), stdev = 4444.074
  CI (99.9%): [496957.546, 502895.832] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithMapTargetEmpty  thrpt   30  499926.689 ± 2969.143  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithoutKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithoutKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 504545.361 ops/s
# Warmup Iteration   2: 1092540.476 ops/s
# Warmup Iteration   3: 1172424.423 ops/s
# Warmup Iteration   4: 1164470.013 ops/s
# Warmup Iteration   5: 962002.936 ops/s
# Warmup Iteration   6: 1177206.122 ops/s
# Warmup Iteration   7: 1179275.085 ops/s
# Warmup Iteration   8: 1158762.950 ops/s
# Warmup Iteration   9: 1172195.034 ops/s
# Warmup Iteration  10: 1180236.516 ops/s
# Warmup Iteration  11: 1189342.889 ops/s
# Warmup Iteration  12: 1184395.558 ops/s
# Warmup Iteration  13: 1177835.603 ops/s
# Warmup Iteration  14: 1175164.915 ops/s
# Warmup Iteration  15: 1169796.983 ops/s
# Warmup Iteration  16: 1178798.663 ops/s
# Warmup Iteration  17: 1171462.238 ops/s
# Warmup Iteration  18: 1171596.964 ops/s
# Warmup Iteration  19: 1173819.950 ops/s
# Warmup Iteration  20: 1175640.098 ops/s
# Warmup Iteration  21: 1165759.118 ops/s
# Warmup Iteration  22: 1172119.090 ops/s
# Warmup Iteration  23: 1172964.344 ops/s
# Warmup Iteration  24: 1178141.857 ops/s
# Warmup Iteration  25: 1167280.629 ops/s
# Warmup Iteration  26: 1176150.034 ops/s
# Warmup Iteration  27: 1172106.192 ops/s
# Warmup Iteration  28: 1166805.769 ops/s
# Warmup Iteration  29: 1164617.558 ops/s
# Warmup Iteration  30: 1178286.677 ops/s
Iteration   1: 1158056.177 ops/s
Iteration   2: 1165584.414 ops/s
Iteration   3: 1157980.079 ops/s
Iteration   4: 1157077.649 ops/s
Iteration   5: 1158005.832 ops/s
Iteration   6: 1171234.505 ops/s
Iteration   7: 1178855.659 ops/s
Iteration   8: 1168124.257 ops/s
Iteration   9: 1164503.440 ops/s
Iteration  10: 1160649.646 ops/s
Iteration  11: 1174023.695 ops/s
Iteration  12: 1167964.896 ops/s
Iteration  13: 1164876.738 ops/s
Iteration  14: 1167498.149 ops/s
Iteration  15: 1159701.716 ops/s
Iteration  16: 1156811.385 ops/s
Iteration  17: 1161168.150 ops/s
Iteration  18: 1161862.908 ops/s
Iteration  19: 1157256.046 ops/s
Iteration  20: 1154517.320 ops/s
Iteration  21: 1161329.533 ops/s
Iteration  22: 1180189.313 ops/s
Iteration  23: 1148708.540 ops/s
Iteration  24: 1141494.808 ops/s
Iteration  25: 1153668.879 ops/s
Iteration  26: 1162239.512 ops/s
Iteration  27: 1157395.607 ops/s
Iteration  28: 1151971.954 ops/s
Iteration  29: 1168148.171 ops/s
Iteration  30: 1160315.617 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithoutKey":
  1161707.153 ±(99.9%) 5531.029 ops/s [Average]
  (min, avg, max) = (1141494.808, 1161707.153, 1180189.313), stdev = 8278.584
  CI (99.9%): [1156176.125, 1167238.182] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithoutKey  thrpt   30  1161707.153 ± 5531.029  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithoutKeys$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithoutKeys

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 307902.054 ops/s
# Warmup Iteration   2: 654654.073 ops/s
# Warmup Iteration   3: 720646.604 ops/s
# Warmup Iteration   4: 725107.739 ops/s
# Warmup Iteration   5: 593728.109 ops/s
# Warmup Iteration   6: 724157.636 ops/s
# Warmup Iteration   7: 722958.531 ops/s
# Warmup Iteration   8: 709259.036 ops/s
# Warmup Iteration   9: 718796.060 ops/s
# Warmup Iteration  10: 718659.741 ops/s
# Warmup Iteration  11: 722513.714 ops/s
# Warmup Iteration  12: 724971.638 ops/s
# Warmup Iteration  13: 710858.930 ops/s
# Warmup Iteration  14: 718374.883 ops/s
# Warmup Iteration  15: 727699.257 ops/s
# Warmup Iteration  16: 728864.222 ops/s
# Warmup Iteration  17: 726282.831 ops/s
# Warmup Iteration  18: 722217.171 ops/s
# Warmup Iteration  19: 723123.476 ops/s
# Warmup Iteration  20: 715858.382 ops/s
# Warmup Iteration  21: 725696.641 ops/s
# Warmup Iteration  22: 718738.327 ops/s
# Warmup Iteration  23: 709853.846 ops/s
# Warmup Iteration  24: 713683.942 ops/s
# Warmup Iteration  25: 720381.055 ops/s
# Warmup Iteration  26: 728606.582 ops/s
# Warmup Iteration  27: 711979.364 ops/s
# Warmup Iteration  28: 720087.644 ops/s
# Warmup Iteration  29: 729022.430 ops/s
# Warmup Iteration  30: 716604.088 ops/s
Iteration   1: 717911.967 ops/s
Iteration   2: 731607.346 ops/s
Iteration   3: 725660.029 ops/s
Iteration   4: 716244.492 ops/s
Iteration   5: 726508.256 ops/s
Iteration   6: 725696.613 ops/s
Iteration   7: 726918.187 ops/s
Iteration   8: 721787.967 ops/s
Iteration   9: 720478.044 ops/s
Iteration  10: 711830.753 ops/s
Iteration  11: 709939.789 ops/s
Iteration  12: 719134.676 ops/s
Iteration  13: 721928.750 ops/s
Iteration  14: 723656.854 ops/s
Iteration  15: 708950.900 ops/s
Iteration  16: 723541.074 ops/s
Iteration  17: 715791.633 ops/s
Iteration  18: 717910.408 ops/s
Iteration  19: 712028.531 ops/s
Iteration  20: 719602.529 ops/s
Iteration  21: 722463.342 ops/s
Iteration  22: 712474.849 ops/s
Iteration  23: 722046.102 ops/s
Iteration  24: 713957.371 ops/s
Iteration  25: 725273.369 ops/s
Iteration  26: 723518.168 ops/s
Iteration  27: 719954.982 ops/s
Iteration  28: 726098.125 ops/s
Iteration  29: 712974.689 ops/s
Iteration  30: 723600.014 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithoutKeys":
  719982.994 ±(99.9%) 3845.208 ops/s [Average]
  (min, avg, max) = (708950.900, 719982.994, 731607.346), stdev = 5755.326
  CI (99.9%): [716137.786, 723828.201] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_newWithoutKeys  thrpt   30  719982.994 ± 3845.208  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13788392.832 ops/s
# Warmup Iteration   2: 28187002.131 ops/s
# Warmup Iteration   3: 24010689.880 ops/s
# Warmup Iteration   4: 28165758.536 ops/s
# Warmup Iteration   5: 27964078.982 ops/s
# Warmup Iteration   6: 28061165.016 ops/s
# Warmup Iteration   7: 27754250.928 ops/s
# Warmup Iteration   8: 28269255.977 ops/s
# Warmup Iteration   9: 28112643.219 ops/s
# Warmup Iteration  10: 27991165.762 ops/s
# Warmup Iteration  11: 28008802.237 ops/s
# Warmup Iteration  12: 27801378.458 ops/s
# Warmup Iteration  13: 28136548.100 ops/s
# Warmup Iteration  14: 28090816.405 ops/s
# Warmup Iteration  15: 28139300.786 ops/s
# Warmup Iteration  16: 27950977.800 ops/s
# Warmup Iteration  17: 28311341.305 ops/s
# Warmup Iteration  18: 28208883.491 ops/s
# Warmup Iteration  19: 28341813.502 ops/s
# Warmup Iteration  20: 27768297.337 ops/s
# Warmup Iteration  21: 28116527.516 ops/s
# Warmup Iteration  22: 27840134.308 ops/s
# Warmup Iteration  23: 27993268.264 ops/s
# Warmup Iteration  24: 27760786.862 ops/s
# Warmup Iteration  25: 28250156.480 ops/s
# Warmup Iteration  26: 28259551.852 ops/s
# Warmup Iteration  27: 27818882.570 ops/s
# Warmup Iteration  28: 28132804.527 ops/s
# Warmup Iteration  29: 28203795.966 ops/s
# Warmup Iteration  30: 28369397.531 ops/s
Iteration   1: 28193499.849 ops/s
Iteration   2: 27843116.142 ops/s
Iteration   3: 28200847.362 ops/s
Iteration   4: 27910151.094 ops/s
Iteration   5: 28183692.797 ops/s
Iteration   6: 28187743.202 ops/s
Iteration   7: 28068880.130 ops/s
Iteration   8: 28206554.743 ops/s
Iteration   9: 28193747.126 ops/s
Iteration  10: 28191678.371 ops/s
Iteration  11: 28025353.467 ops/s
Iteration  12: 28140676.323 ops/s
Iteration  13: 28007387.332 ops/s
Iteration  14: 27918043.262 ops/s
Iteration  15: 28077460.814 ops/s
Iteration  16: 28304583.207 ops/s
Iteration  17: 28115478.654 ops/s
Iteration  18: 27864055.986 ops/s
Iteration  19: 28133907.275 ops/s
Iteration  20: 28475783.584 ops/s
Iteration  21: 27984674.877 ops/s
Iteration  22: 28064177.408 ops/s
Iteration  23: 27652804.662 ops/s
Iteration  24: 28119295.014 ops/s
Iteration  25: 28615679.924 ops/s
Iteration  26: 28518543.799 ops/s
Iteration  27: 28020705.356 ops/s
Iteration  28: 28291243.552 ops/s
Iteration  29: 27994762.965 ops/s
Iteration  30: 28650463.737 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_notEmpty":
  28138499.734 ±(99.9%) 148009.292 ops/s [Average]
  (min, avg, max) = (27652804.662, 28138499.734, 28650463.737), stdev = 221533.357
  CI (99.9%): [27990490.442, 28286509.026] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_notEmpty  thrpt   30  28138499.734 ± 148009.292  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_put$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_put

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 665183.245 ops/s
# Warmup Iteration   2: 706456.648 ops/s
# Warmup Iteration   3: 919582.343 ops/s
# Warmup Iteration   4: 911238.568 ops/s
# Warmup Iteration   5: 918508.803 ops/s
# Warmup Iteration   6: 924950.848 ops/s
# Warmup Iteration   7: 911619.372 ops/s
# Warmup Iteration   8: 918559.627 ops/s
# Warmup Iteration   9: 923825.691 ops/s
# Warmup Iteration  10: 923456.330 ops/s
# Warmup Iteration  11: 895869.572 ops/s
# Warmup Iteration  12: 783741.809 ops/s
# Warmup Iteration  13: 925852.784 ops/s
# Warmup Iteration  14: 920902.871 ops/s
# Warmup Iteration  15: 915548.525 ops/s
# Warmup Iteration  16: 908917.108 ops/s
# Warmup Iteration  17: 969886.054 ops/s
# Warmup Iteration  18: 978455.501 ops/s
# Warmup Iteration  19: 958281.387 ops/s
# Warmup Iteration  20: 972954.428 ops/s
# Warmup Iteration  21: 974459.515 ops/s
# Warmup Iteration  22: 958954.866 ops/s
# Warmup Iteration  23: 969410.671 ops/s
# Warmup Iteration  24: 971026.706 ops/s
# Warmup Iteration  25: 964101.251 ops/s
# Warmup Iteration  26: 969890.028 ops/s
# Warmup Iteration  27: 973826.657 ops/s
# Warmup Iteration  28: 964835.812 ops/s
# Warmup Iteration  29: 963867.295 ops/s
# Warmup Iteration  30: 976909.879 ops/s
Iteration   1: 966549.897 ops/s
Iteration   2: 959756.958 ops/s
Iteration   3: 974383.212 ops/s
Iteration   4: 950901.400 ops/s
Iteration   5: 965669.123 ops/s
Iteration   6: 965825.302 ops/s
Iteration   7: 974258.662 ops/s
Iteration   8: 976742.221 ops/s
Iteration   9: 973672.965 ops/s
Iteration  10: 969048.002 ops/s
Iteration  11: 968197.353 ops/s
Iteration  12: 976122.034 ops/s
Iteration  13: 984124.328 ops/s
Iteration  14: 982891.455 ops/s
Iteration  15: 962866.602 ops/s
Iteration  16: 975043.289 ops/s
Iteration  17: 964340.282 ops/s
Iteration  18: 988845.327 ops/s
Iteration  19: 970103.270 ops/s
Iteration  20: 980756.235 ops/s
Iteration  21: 972946.732 ops/s
Iteration  22: 981372.189 ops/s
Iteration  23: 977138.835 ops/s
Iteration  24: 981825.320 ops/s
Iteration  25: 961449.704 ops/s
Iteration  26: 965045.424 ops/s
Iteration  27: 956851.865 ops/s
Iteration  28: 977370.669 ops/s
Iteration  29: 973730.687 ops/s
Iteration  30: 969201.532 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_put":
  971567.696 ±(99.9%) 5812.676 ops/s [Average]
  (min, avg, max) = (950901.400, 971567.696, 988845.327), stdev = 8700.140
  CI (99.9%): [965755.020, 977380.372] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_put  thrpt   30  971567.696 ± 5812.676  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_putAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_putAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 662569.817 ops/s
# Warmup Iteration   2: 688251.750 ops/s
# Warmup Iteration   3: 912629.012 ops/s
# Warmup Iteration   4: 912555.790 ops/s
# Warmup Iteration   5: 922801.335 ops/s
# Warmup Iteration   6: 916002.835 ops/s
# Warmup Iteration   7: 912755.001 ops/s
# Warmup Iteration   8: 905082.934 ops/s
# Warmup Iteration   9: 907825.484 ops/s
# Warmup Iteration  10: 910911.591 ops/s
# Warmup Iteration  11: 886212.289 ops/s
# Warmup Iteration  12: 793619.075 ops/s
# Warmup Iteration  13: 910743.240 ops/s
# Warmup Iteration  14: 914270.864 ops/s
# Warmup Iteration  15: 921598.516 ops/s
# Warmup Iteration  16: 910937.255 ops/s
# Warmup Iteration  17: 975661.490 ops/s
# Warmup Iteration  18: 975092.608 ops/s
# Warmup Iteration  19: 972489.179 ops/s
# Warmup Iteration  20: 973380.764 ops/s
# Warmup Iteration  21: 959159.579 ops/s
# Warmup Iteration  22: 972472.124 ops/s
# Warmup Iteration  23: 969915.983 ops/s
# Warmup Iteration  24: 975344.217 ops/s
# Warmup Iteration  25: 966471.565 ops/s
# Warmup Iteration  26: 966294.873 ops/s
# Warmup Iteration  27: 979280.406 ops/s
# Warmup Iteration  28: 975714.812 ops/s
# Warmup Iteration  29: 968699.664 ops/s
# Warmup Iteration  30: 971503.754 ops/s
Iteration   1: 967891.195 ops/s
Iteration   2: 958073.238 ops/s
Iteration   3: 968637.242 ops/s
Iteration   4: 960629.444 ops/s
Iteration   5: 964177.162 ops/s
Iteration   6: 971285.694 ops/s
Iteration   7: 980235.027 ops/s
Iteration   8: 995760.009 ops/s
Iteration   9: 993962.571 ops/s
Iteration  10: 996134.109 ops/s
Iteration  11: 998132.057 ops/s
Iteration  12: 997540.656 ops/s
Iteration  13: 993778.348 ops/s
Iteration  14: 994371.816 ops/s
Iteration  15: 997051.022 ops/s
Iteration  16: 994284.874 ops/s
Iteration  17: 996442.757 ops/s
Iteration  18: 991105.302 ops/s
Iteration  19: 992846.184 ops/s
Iteration  20: 992601.767 ops/s
Iteration  21: 998029.793 ops/s
Iteration  22: 998609.016 ops/s
Iteration  23: 995796.157 ops/s
Iteration  24: 995879.805 ops/s
Iteration  25: 990431.010 ops/s
Iteration  26: 991685.767 ops/s
Iteration  27: 991301.919 ops/s
Iteration  28: 994483.324 ops/s
Iteration  29: 998178.248 ops/s
Iteration  30: 1000240.010 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_putAll":
  988652.517 ±(99.9%) 8466.439 ops/s [Average]
  (min, avg, max) = (958073.238, 988652.517, 1000240.010), stdev = 12672.169
  CI (99.9%): [980186.078, 997118.957] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_putAll  thrpt   30  988652.517 ± 8466.439  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 681112.082 ops/s
# Warmup Iteration   2: 715859.784 ops/s
# Warmup Iteration   3: 934008.642 ops/s
# Warmup Iteration   4: 935557.744 ops/s
# Warmup Iteration   5: 936583.466 ops/s
# Warmup Iteration   6: 934996.395 ops/s
# Warmup Iteration   7: 941164.561 ops/s
# Warmup Iteration   8: 935250.863 ops/s
# Warmup Iteration   9: 939487.692 ops/s
# Warmup Iteration  10: 927508.328 ops/s
# Warmup Iteration  11: 844568.148 ops/s
# Warmup Iteration  12: 869758.310 ops/s
# Warmup Iteration  13: 926306.240 ops/s
# Warmup Iteration  14: 932033.627 ops/s
# Warmup Iteration  15: 935112.856 ops/s
# Warmup Iteration  16: 927444.092 ops/s
# Warmup Iteration  17: 991520.630 ops/s
# Warmup Iteration  18: 991595.999 ops/s
# Warmup Iteration  19: 996626.678 ops/s
# Warmup Iteration  20: 996688.279 ops/s
# Warmup Iteration  21: 994951.314 ops/s
# Warmup Iteration  22: 993743.611 ops/s
# Warmup Iteration  23: 991814.794 ops/s
# Warmup Iteration  24: 996115.717 ops/s
# Warmup Iteration  25: 997692.653 ops/s
# Warmup Iteration  26: 996607.582 ops/s
# Warmup Iteration  27: 991652.081 ops/s
# Warmup Iteration  28: 982318.769 ops/s
# Warmup Iteration  29: 991744.267 ops/s
# Warmup Iteration  30: 992794.570 ops/s
Iteration   1: 993968.243 ops/s
Iteration   2: 990184.331 ops/s
Iteration   3: 989666.930 ops/s
Iteration   4: 988331.159 ops/s
Iteration   5: 993951.424 ops/s
Iteration   6: 991079.497 ops/s
Iteration   7: 988649.214 ops/s
Iteration   8: 991053.149 ops/s
Iteration   9: 991451.595 ops/s
Iteration  10: 997600.696 ops/s
Iteration  11: 989622.279 ops/s
Iteration  12: 994211.095 ops/s
Iteration  13: 997164.168 ops/s
Iteration  14: 986257.628 ops/s
Iteration  15: 988317.075 ops/s
Iteration  16: 997859.417 ops/s
Iteration  17: 992313.185 ops/s
Iteration  18: 991702.331 ops/s
Iteration  19: 995649.127 ops/s
Iteration  20: 986996.307 ops/s
Iteration  21: 1001080.567 ops/s
Iteration  22: 987787.307 ops/s
Iteration  23: 991880.008 ops/s
Iteration  24: 992122.319 ops/s
Iteration  25: 995864.546 ops/s
Iteration  26: 998327.365 ops/s
Iteration  27: 998504.171 ops/s
Iteration  28: 999823.034 ops/s
Iteration  29: 1000494.126 ops/s
Iteration  30: 977893.449 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_remove":
  992660.191 ±(99.9%) 3392.961 ops/s [Average]
  (min, avg, max) = (977893.449, 992660.191, 1001080.567), stdev = 5078.425
  CI (99.9%): [989267.230, 996053.152] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_remove  thrpt   30  992660.191 ± 3392.961  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6156126.201 ops/s
# Warmup Iteration   2: 13880510.079 ops/s
# Warmup Iteration   3: 11651675.037 ops/s
# Warmup Iteration   4: 13912623.232 ops/s
# Warmup Iteration   5: 14015435.565 ops/s
# Warmup Iteration   6: 13939236.090 ops/s
# Warmup Iteration   7: 14127423.501 ops/s
# Warmup Iteration   8: 13882126.925 ops/s
# Warmup Iteration   9: 14134019.086 ops/s
# Warmup Iteration  10: 14079648.485 ops/s
# Warmup Iteration  11: 14006096.731 ops/s
# Warmup Iteration  12: 13852922.022 ops/s
# Warmup Iteration  13: 13985207.768 ops/s
# Warmup Iteration  14: 14028813.374 ops/s
# Warmup Iteration  15: 13990428.783 ops/s
# Warmup Iteration  16: 13917391.738 ops/s
# Warmup Iteration  17: 13946326.830 ops/s
# Warmup Iteration  18: 13875345.269 ops/s
# Warmup Iteration  19: 13988278.831 ops/s
# Warmup Iteration  20: 13905366.924 ops/s
# Warmup Iteration  21: 13996367.973 ops/s
# Warmup Iteration  22: 13890109.639 ops/s
# Warmup Iteration  23: 13937038.723 ops/s
# Warmup Iteration  24: 13870091.120 ops/s
# Warmup Iteration  25: 13937996.188 ops/s
# Warmup Iteration  26: 13955487.022 ops/s
# Warmup Iteration  27: 13815541.924 ops/s
# Warmup Iteration  28: 13900694.278 ops/s
# Warmup Iteration  29: 14065472.710 ops/s
# Warmup Iteration  30: 14055183.950 ops/s
Iteration   1: 14011204.158 ops/s
Iteration   2: 14087946.869 ops/s
Iteration   3: 14092082.134 ops/s
Iteration   4: 13978562.256 ops/s
Iteration   5: 14122635.887 ops/s
Iteration   6: 13958800.657 ops/s
Iteration   7: 13918785.686 ops/s
Iteration   8: 14042149.932 ops/s
Iteration   9: 13924623.843 ops/s
Iteration  10: 13790321.065 ops/s
Iteration  11: 13756916.433 ops/s
Iteration  12: 13936356.940 ops/s
Iteration  13: 13923736.376 ops/s
Iteration  14: 13984974.749 ops/s
Iteration  15: 14007983.861 ops/s
Iteration  16: 14027010.992 ops/s
Iteration  17: 13879156.166 ops/s
Iteration  18: 13883045.831 ops/s
Iteration  19: 13925326.960 ops/s
Iteration  20: 14243739.276 ops/s
Iteration  21: 14141485.525 ops/s
Iteration  22: 14053271.590 ops/s
Iteration  23: 14112427.205 ops/s
Iteration  24: 14235587.569 ops/s
Iteration  25: 13992887.257 ops/s
Iteration  26: 14214163.960 ops/s
Iteration  27: 14074156.611 ops/s
Iteration  28: 14113177.912 ops/s
Iteration  29: 13739356.756 ops/s
Iteration  30: 13978602.126 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_tap":
  14005015.886 ±(99.9%) 85745.056 ops/s [Average]
  (min, avg, max) = (13739356.756, 14005015.886, 14243739.276), stdev = 128339.173
  CI (99.9%): [13919270.830, 14090760.942] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_tap  thrpt   30  14005015.886 ± 85745.056  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_testNewEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_testNewEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 139863210.600 ops/s
# Warmup Iteration   2: 269102345.353 ops/s
# Warmup Iteration   3: 223379755.041 ops/s
# Warmup Iteration   4: 261333745.463 ops/s
# Warmup Iteration   5: 265264117.278 ops/s
# Warmup Iteration   6: 263114553.933 ops/s
# Warmup Iteration   7: 266978890.432 ops/s
# Warmup Iteration   8: 265089700.519 ops/s
# Warmup Iteration   9: 262671893.324 ops/s
# Warmup Iteration  10: 267526799.585 ops/s
# Warmup Iteration  11: 266980943.662 ops/s
# Warmup Iteration  12: 260481089.010 ops/s
# Warmup Iteration  13: 264688291.673 ops/s
# Warmup Iteration  14: 262871099.334 ops/s
# Warmup Iteration  15: 264055788.651 ops/s
# Warmup Iteration  16: 263540080.004 ops/s
# Warmup Iteration  17: 262877059.710 ops/s
# Warmup Iteration  18: 263778387.082 ops/s
# Warmup Iteration  19: 263452759.788 ops/s
# Warmup Iteration  20: 261540049.082 ops/s
# Warmup Iteration  21: 264499020.445 ops/s
# Warmup Iteration  22: 264838317.071 ops/s
# Warmup Iteration  23: 268048050.828 ops/s
# Warmup Iteration  24: 264878249.723 ops/s
# Warmup Iteration  25: 267970356.308 ops/s
# Warmup Iteration  26: 266796187.758 ops/s
# Warmup Iteration  27: 264809984.611 ops/s
# Warmup Iteration  28: 265011742.812 ops/s
# Warmup Iteration  29: 263888487.750 ops/s
# Warmup Iteration  30: 261342105.858 ops/s
Iteration   1: 261170901.407 ops/s
Iteration   2: 262974668.562 ops/s
Iteration   3: 266927570.639 ops/s
Iteration   4: 265418492.306 ops/s
Iteration   5: 262005052.760 ops/s
Iteration   6: 263918582.706 ops/s
Iteration   7: 264907621.068 ops/s
Iteration   8: 266636279.081 ops/s
Iteration   9: 264207997.279 ops/s
Iteration  10: 268050133.398 ops/s
Iteration  11: 265361591.606 ops/s
Iteration  12: 264592120.226 ops/s
Iteration  13: 266578445.224 ops/s
Iteration  14: 266456830.626 ops/s
Iteration  15: 267942863.235 ops/s
Iteration  16: 271031552.831 ops/s
Iteration  17: 269709318.126 ops/s
Iteration  18: 267801056.599 ops/s
Iteration  19: 270758181.632 ops/s
Iteration  20: 270508241.328 ops/s
Iteration  21: 271666009.360 ops/s
Iteration  22: 271073332.308 ops/s
Iteration  23: 266569135.884 ops/s
Iteration  24: 261735516.728 ops/s
Iteration  25: 265730237.573 ops/s
Iteration  26: 261318815.686 ops/s
Iteration  27: 269532216.086 ops/s
Iteration  28: 265443353.737 ops/s
Iteration  29: 269934122.922 ops/s
Iteration  30: 270287946.984 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_testNewEmpty":
  266674939.597 ±(99.9%) 2099199.133 ops/s [Average]
  (min, avg, max) = (261170901.407, 266674939.597, 271666009.360), stdev = 3141982.676
  CI (99.9%): [264575740.464, 268774138.729] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt          Score         Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_testNewEmpty  thrpt   30  266674939.597 ± 2099199.133  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_testNewWithHashBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_testNewWithHashBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 706498.368 ops/s
# Warmup Iteration   2: 1726377.878 ops/s
# Warmup Iteration   3: 1776792.932 ops/s
# Warmup Iteration   4: 1470684.576 ops/s
# Warmup Iteration   5: 1752800.288 ops/s
# Warmup Iteration   6: 1751079.394 ops/s
# Warmup Iteration   7: 1737933.224 ops/s
# Warmup Iteration   8: 1724405.026 ops/s
# Warmup Iteration   9: 1727513.738 ops/s
# Warmup Iteration  10: 1745045.436 ops/s
# Warmup Iteration  11: 1749712.761 ops/s
# Warmup Iteration  12: 1756475.059 ops/s
# Warmup Iteration  13: 1734384.348 ops/s
# Warmup Iteration  14: 1771372.777 ops/s
# Warmup Iteration  15: 1724789.107 ops/s
# Warmup Iteration  16: 1714434.795 ops/s
# Warmup Iteration  17: 1709069.804 ops/s
# Warmup Iteration  18: 1728765.273 ops/s
# Warmup Iteration  19: 1729331.810 ops/s
# Warmup Iteration  20: 1750892.008 ops/s
# Warmup Iteration  21: 1734532.274 ops/s
# Warmup Iteration  22: 1705587.838 ops/s
# Warmup Iteration  23: 1723746.482 ops/s
# Warmup Iteration  24: 1719772.902 ops/s
# Warmup Iteration  25: 1745925.866 ops/s
# Warmup Iteration  26: 1752824.764 ops/s
# Warmup Iteration  27: 1724887.521 ops/s
# Warmup Iteration  28: 1757674.537 ops/s
# Warmup Iteration  29: 1776453.158 ops/s
# Warmup Iteration  30: 1756216.784 ops/s
Iteration   1: 1774079.961 ops/s
Iteration   2: 1729434.155 ops/s
Iteration   3: 1756791.197 ops/s
Iteration   4: 1739934.859 ops/s
Iteration   5: 1741074.421 ops/s
Iteration   6: 1714200.927 ops/s
Iteration   7: 1751568.541 ops/s
Iteration   8: 1741634.086 ops/s
Iteration   9: 1739387.796 ops/s
Iteration  10: 1774298.490 ops/s
Iteration  11: 1767659.182 ops/s
Iteration  12: 1779257.340 ops/s
Iteration  13: 1793384.471 ops/s
Iteration  14: 1800063.580 ops/s
Iteration  15: 1792118.034 ops/s
Iteration  16: 1796132.955 ops/s
Iteration  17: 1803187.545 ops/s
Iteration  18: 1805247.241 ops/s
Iteration  19: 1796873.559 ops/s
Iteration  20: 1793771.648 ops/s
Iteration  21: 1786011.757 ops/s
Iteration  22: 1793594.847 ops/s
Iteration  23: 1791739.615 ops/s
Iteration  24: 1793332.809 ops/s
Iteration  25: 1787257.175 ops/s
Iteration  26: 1793196.314 ops/s
Iteration  27: 1789350.882 ops/s
Iteration  28: 1796089.925 ops/s
Iteration  29: 1795291.432 ops/s
Iteration  30: 1800803.004 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_testNewWithHashBiMap":
  1777225.592 ±(99.9%) 17046.770 ops/s [Average]
  (min, avg, max) = (1714200.927, 1777225.592, 1805247.241), stdev = 25514.805
  CI (99.9%): [1760178.822, 1794272.361] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_testNewWithHashBiMap  thrpt   30  1777225.592 ± 17046.770  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_testNewWithImmutableMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_testNewWithImmutableMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3268203.567 ops/s
# Warmup Iteration   2: 6193899.307 ops/s
# Warmup Iteration   3: 6243955.707 ops/s
# Warmup Iteration   4: 6299947.732 ops/s
# Warmup Iteration   5: 5311891.383 ops/s
# Warmup Iteration   6: 6232410.114 ops/s
# Warmup Iteration   7: 6042803.057 ops/s
# Warmup Iteration   8: 6005685.675 ops/s
# Warmup Iteration   9: 6097605.195 ops/s
# Warmup Iteration  10: 6043675.070 ops/s
# Warmup Iteration  11: 6125749.976 ops/s
# Warmup Iteration  12: 5892988.733 ops/s
# Warmup Iteration  13: 5920617.121 ops/s
# Warmup Iteration  14: 6059626.743 ops/s
# Warmup Iteration  15: 5991806.673 ops/s
# Warmup Iteration  16: 6003091.184 ops/s
# Warmup Iteration  17: 6068387.433 ops/s
# Warmup Iteration  18: 6028629.669 ops/s
# Warmup Iteration  19: 6115673.513 ops/s
# Warmup Iteration  20: 6038150.292 ops/s
# Warmup Iteration  21: 6060204.674 ops/s
# Warmup Iteration  22: 6055830.987 ops/s
# Warmup Iteration  23: 6123867.871 ops/s
# Warmup Iteration  24: 6056735.793 ops/s
# Warmup Iteration  25: 6161341.849 ops/s
# Warmup Iteration  26: 6193883.603 ops/s
# Warmup Iteration  27: 6158192.197 ops/s
# Warmup Iteration  28: 6105630.613 ops/s
# Warmup Iteration  29: 6121432.150 ops/s
# Warmup Iteration  30: 6135393.399 ops/s
Iteration   1: 6200384.600 ops/s
Iteration   2: 6004149.123 ops/s
Iteration   3: 6065169.458 ops/s
Iteration   4: 6039577.572 ops/s
Iteration   5: 6018596.438 ops/s
Iteration   6: 5974860.622 ops/s
Iteration   7: 6133454.577 ops/s
Iteration   8: 6067261.467 ops/s
Iteration   9: 6160409.429 ops/s
Iteration  10: 5969244.481 ops/s
Iteration  11: 6079421.411 ops/s
Iteration  12: 6144242.223 ops/s
Iteration  13: 6008789.392 ops/s
Iteration  14: 6102525.834 ops/s
Iteration  15: 6063079.537 ops/s
Iteration  16: 6026982.010 ops/s
Iteration  17: 6099290.063 ops/s
Iteration  18: 5953897.709 ops/s
Iteration  19: 6055813.549 ops/s
Iteration  20: 6033933.851 ops/s
Iteration  21: 5997649.753 ops/s
Iteration  22: 6172403.299 ops/s
Iteration  23: 5975300.875 ops/s
Iteration  24: 6054101.720 ops/s
Iteration  25: 6096628.436 ops/s
Iteration  26: 5958930.966 ops/s
Iteration  27: 6142179.041 ops/s
Iteration  28: 6159411.727 ops/s
Iteration  29: 6134068.499 ops/s
Iteration  30: 6106410.000 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_testNewWithImmutableMap":
  6066605.589 ±(99.9%) 46546.587 ops/s [Average]
  (min, avg, max) = (5953897.709, 6066605.589, 6200384.600), stdev = 69668.746
  CI (99.9%): [6020059.001, 6113152.176] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_testNewWithImmutableMap  thrpt   30  6066605.589 ± 46546.587  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_testNewWithMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_testNewWithMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 975788.158 ops/s
# Warmup Iteration   2: 2131363.889 ops/s
# Warmup Iteration   3: 2184241.965 ops/s
# Warmup Iteration   4: 2075855.157 ops/s
# Warmup Iteration   5: 2015539.352 ops/s
# Warmup Iteration   6: 2221856.758 ops/s
# Warmup Iteration   7: 2215953.812 ops/s
# Warmup Iteration   8: 2204472.559 ops/s
# Warmup Iteration   9: 2214691.668 ops/s
# Warmup Iteration  10: 2178948.749 ops/s
# Warmup Iteration  11: 2221894.756 ops/s
# Warmup Iteration  12: 2210819.699 ops/s
# Warmup Iteration  13: 2210906.074 ops/s
# Warmup Iteration  14: 2230488.946 ops/s
# Warmup Iteration  15: 2218409.685 ops/s
# Warmup Iteration  16: 2235714.671 ops/s
# Warmup Iteration  17: 2190702.653 ops/s
# Warmup Iteration  18: 2220067.358 ops/s
# Warmup Iteration  19: 2189149.174 ops/s
# Warmup Iteration  20: 2215068.008 ops/s
# Warmup Iteration  21: 2197666.055 ops/s
# Warmup Iteration  22: 2202284.081 ops/s
# Warmup Iteration  23: 2239095.751 ops/s
# Warmup Iteration  24: 2191680.472 ops/s
# Warmup Iteration  25: 2213700.017 ops/s
# Warmup Iteration  26: 2215920.083 ops/s
# Warmup Iteration  27: 2176844.126 ops/s
# Warmup Iteration  28: 2198789.345 ops/s
# Warmup Iteration  29: 2197591.281 ops/s
# Warmup Iteration  30: 2202329.620 ops/s
Iteration   1: 2159995.278 ops/s
Iteration   2: 2216948.435 ops/s
Iteration   3: 2177872.253 ops/s
Iteration   4: 2190788.033 ops/s
Iteration   5: 2203110.345 ops/s
Iteration   6: 2212139.396 ops/s
Iteration   7: 2185886.744 ops/s
Iteration   8: 2219890.673 ops/s
Iteration   9: 2223502.510 ops/s
Iteration  10: 2185679.704 ops/s
Iteration  11: 2181649.312 ops/s
Iteration  12: 2244249.587 ops/s
Iteration  13: 2188834.017 ops/s
Iteration  14: 2174855.636 ops/s
Iteration  15: 2164204.484 ops/s
Iteration  16: 2221181.752 ops/s
Iteration  17: 2218025.250 ops/s
Iteration  18: 2244061.834 ops/s
Iteration  19: 2262165.732 ops/s
Iteration  20: 2269007.259 ops/s
Iteration  21: 2273222.873 ops/s
Iteration  22: 2286866.584 ops/s
Iteration  23: 2282291.057 ops/s
Iteration  24: 2278940.242 ops/s
Iteration  25: 2273687.856 ops/s
Iteration  26: 2278551.669 ops/s
Iteration  27: 2278823.858 ops/s
Iteration  28: 2273528.629 ops/s
Iteration  29: 2286664.842 ops/s
Iteration  30: 2286004.760 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_testNewWithMap":
  2231421.020 ±(99.9%) 28847.801 ops/s [Average]
  (min, avg, max) = (2159995.278, 2231421.020, 2286866.584), stdev = 43178.033
  CI (99.9%): [2202573.220, 2260268.821] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_testNewWithMap  thrpt   30  2231421.020 ± 28847.801  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2022667.820 ops/s
# Warmup Iteration   2: 4745022.165 ops/s
# Warmup Iteration   3: 4597851.024 ops/s
# Warmup Iteration   4: 3776614.983 ops/s
# Warmup Iteration   5: 4570063.279 ops/s
# Warmup Iteration   6: 4571415.108 ops/s
# Warmup Iteration   7: 4576958.453 ops/s
# Warmup Iteration   8: 4605134.092 ops/s
# Warmup Iteration   9: 4595774.313 ops/s
# Warmup Iteration  10: 4640679.580 ops/s
# Warmup Iteration  11: 4602967.588 ops/s
# Warmup Iteration  12: 4649920.540 ops/s
# Warmup Iteration  13: 4570143.137 ops/s
# Warmup Iteration  14: 4630684.770 ops/s
# Warmup Iteration  15: 4578415.586 ops/s
# Warmup Iteration  16: 4616839.652 ops/s
# Warmup Iteration  17: 4653376.837 ops/s
# Warmup Iteration  18: 4727773.192 ops/s
# Warmup Iteration  19: 4682170.020 ops/s
# Warmup Iteration  20: 4701925.711 ops/s
# Warmup Iteration  21: 4713532.313 ops/s
# Warmup Iteration  22: 4736123.284 ops/s
# Warmup Iteration  23: 4694773.012 ops/s
# Warmup Iteration  24: 4693637.878 ops/s
# Warmup Iteration  25: 4667479.118 ops/s
# Warmup Iteration  26: 4723739.365 ops/s
# Warmup Iteration  27: 4708685.478 ops/s
# Warmup Iteration  28: 4673681.576 ops/s
# Warmup Iteration  29: 4666471.044 ops/s
# Warmup Iteration  30: 4692270.928 ops/s
Iteration   1: 4685863.238 ops/s
Iteration   2: 4759920.538 ops/s
Iteration   3: 4739032.608 ops/s
Iteration   4: 4708971.118 ops/s
Iteration   5: 4693899.867 ops/s
Iteration   6: 4684419.188 ops/s
Iteration   7: 4732269.820 ops/s
Iteration   8: 4694898.726 ops/s
Iteration   9: 4711516.065 ops/s
Iteration  10: 4696254.160 ops/s
Iteration  11: 4712179.916 ops/s
Iteration  12: 4697874.577 ops/s
Iteration  13: 4751388.167 ops/s
Iteration  14: 4734957.538 ops/s
Iteration  15: 4704757.941 ops/s
Iteration  16: 4696845.138 ops/s
Iteration  17: 4728982.785 ops/s
Iteration  18: 4719794.073 ops/s
Iteration  19: 4730778.426 ops/s
Iteration  20: 4665925.518 ops/s
Iteration  21: 4711728.411 ops/s
Iteration  22: 4711276.656 ops/s
Iteration  23: 4725028.151 ops/s
Iteration  24: 4750037.388 ops/s
Iteration  25: 4721930.441 ops/s
Iteration  26: 4710457.935 ops/s
Iteration  27: 4671715.795 ops/s
Iteration  28: 4694123.980 ops/s
Iteration  29: 4706542.633 ops/s
Iteration  30: 4715089.403 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_testToString":
  4712282.007 ±(99.9%) 15114.371 ops/s [Average]
  (min, avg, max) = (4665925.518, 4712282.007, 4759920.538), stdev = 22622.481
  CI (99.9%): [4697167.635, 4727396.378] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_testToString  thrpt   30  4712282.007 ± 15114.371  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3778988.865 ops/s
# Warmup Iteration   2: 7760083.645 ops/s
# Warmup Iteration   3: 7760056.515 ops/s
# Warmup Iteration   4: 6508977.491 ops/s
# Warmup Iteration   5: 7780598.485 ops/s
# Warmup Iteration   6: 7809262.149 ops/s
# Warmup Iteration   7: 7759025.624 ops/s
# Warmup Iteration   8: 7789840.724 ops/s
# Warmup Iteration   9: 7747213.181 ops/s
# Warmup Iteration  10: 7755252.252 ops/s
# Warmup Iteration  11: 7735191.868 ops/s
# Warmup Iteration  12: 7806326.546 ops/s
# Warmup Iteration  13: 7711753.059 ops/s
# Warmup Iteration  14: 7732326.404 ops/s
# Warmup Iteration  15: 7749797.092 ops/s
# Warmup Iteration  16: 7799889.825 ops/s
# Warmup Iteration  17: 7742684.244 ops/s
# Warmup Iteration  18: 7810820.734 ops/s
# Warmup Iteration  19: 7776846.099 ops/s
# Warmup Iteration  20: 7739898.737 ops/s
# Warmup Iteration  21: 7776099.358 ops/s
# Warmup Iteration  22: 7637425.292 ops/s
# Warmup Iteration  23: 7753957.950 ops/s
# Warmup Iteration  24: 7763726.722 ops/s
# Warmup Iteration  25: 7793079.261 ops/s
# Warmup Iteration  26: 7713510.531 ops/s
# Warmup Iteration  27: 7740824.329 ops/s
# Warmup Iteration  28: 7783444.677 ops/s
# Warmup Iteration  29: 7750350.459 ops/s
# Warmup Iteration  30: 7698063.090 ops/s
Iteration   1: 7765870.934 ops/s
Iteration   2: 7708418.673 ops/s
Iteration   3: 7757413.788 ops/s
Iteration   4: 7743288.716 ops/s
Iteration   5: 7748172.228 ops/s
Iteration   6: 7709369.103 ops/s
Iteration   7: 7719625.814 ops/s
Iteration   8: 7819594.541 ops/s
Iteration   9: 7831257.767 ops/s
Iteration  10: 7726954.836 ops/s
Iteration  11: 7777558.525 ops/s
Iteration  12: 7776749.777 ops/s
Iteration  13: 7680036.985 ops/s
Iteration  14: 7848698.387 ops/s
Iteration  15: 7802439.323 ops/s
Iteration  16: 7694860.044 ops/s
Iteration  17: 7712327.117 ops/s
Iteration  18: 7800963.855 ops/s
Iteration  19: 7755149.709 ops/s
Iteration  20: 7782208.005 ops/s
Iteration  21: 7751553.317 ops/s
Iteration  22: 7739210.706 ops/s
Iteration  23: 7752586.849 ops/s
Iteration  24: 7748152.639 ops/s
Iteration  25: 7789706.523 ops/s
Iteration  26: 7690591.544 ops/s
Iteration  27: 7644515.997 ops/s
Iteration  28: 7674278.744 ops/s
Iteration  29: 7741801.370 ops/s
Iteration  30: 7669433.969 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_toImmutable":
  7745426.326 ±(99.9%) 33207.616 ops/s [Average]
  (min, avg, max) = (7644515.997, 7745426.326, 7848698.387), stdev = 49703.599
  CI (99.9%): [7712218.711, 7778633.942] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_toImmutable  thrpt   30  7745426.326 ± 33207.616  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_toMapTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_toMapTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3718320.533 ops/s
# Warmup Iteration   2: 7479120.879 ops/s
# Warmup Iteration   3: 7022235.257 ops/s
# Warmup Iteration   4: 6881856.645 ops/s
# Warmup Iteration   5: 7557213.752 ops/s
# Warmup Iteration   6: 7550599.537 ops/s
# Warmup Iteration   7: 7491748.648 ops/s
# Warmup Iteration   8: 7598668.792 ops/s
# Warmup Iteration   9: 7573793.692 ops/s
# Warmup Iteration  10: 7523717.356 ops/s
# Warmup Iteration  11: 7468302.991 ops/s
# Warmup Iteration  12: 7552849.364 ops/s
# Warmup Iteration  13: 7570338.520 ops/s
# Warmup Iteration  14: 7522661.123 ops/s
# Warmup Iteration  15: 7565500.030 ops/s
# Warmup Iteration  16: 7469296.966 ops/s
# Warmup Iteration  17: 7638568.531 ops/s
# Warmup Iteration  18: 7586355.384 ops/s
# Warmup Iteration  19: 7561076.734 ops/s
# Warmup Iteration  20: 7569566.556 ops/s
# Warmup Iteration  21: 7434028.707 ops/s
# Warmup Iteration  22: 7583544.021 ops/s
# Warmup Iteration  23: 7452765.682 ops/s
# Warmup Iteration  24: 7461333.866 ops/s
# Warmup Iteration  25: 7529061.872 ops/s
# Warmup Iteration  26: 7571203.304 ops/s
# Warmup Iteration  27: 7633522.390 ops/s
# Warmup Iteration  28: 7498054.573 ops/s
# Warmup Iteration  29: 7596713.232 ops/s
# Warmup Iteration  30: 7544498.787 ops/s
Iteration   1: 7295771.617 ops/s
Iteration   2: 7631989.044 ops/s
Iteration   3: 7588079.572 ops/s
Iteration   4: 7630393.031 ops/s
Iteration   5: 7614362.708 ops/s
Iteration   6: 7584886.366 ops/s
Iteration   7: 7618278.603 ops/s
Iteration   8: 7590598.618 ops/s
Iteration   9: 7523897.254 ops/s
Iteration  10: 7485954.940 ops/s
Iteration  11: 7469582.299 ops/s
Iteration  12: 7408888.845 ops/s
Iteration  13: 7511628.291 ops/s
Iteration  14: 7305986.412 ops/s
Iteration  15: 7619358.711 ops/s
Iteration  16: 7641010.047 ops/s
Iteration  17: 7634895.837 ops/s
Iteration  18: 7590715.131 ops/s
Iteration  19: 7608560.750 ops/s
Iteration  20: 7568526.272 ops/s
Iteration  21: 7498691.947 ops/s
Iteration  22: 7653328.657 ops/s
Iteration  23: 7436250.854 ops/s
Iteration  24: 7638773.874 ops/s
Iteration  25: 7719147.007 ops/s
Iteration  26: 7509896.166 ops/s
Iteration  27: 7387439.008 ops/s
Iteration  28: 7552511.695 ops/s
Iteration  29: 7490544.389 ops/s
Iteration  30: 7638873.682 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_toMapTarget":
  7548294.054 ±(99.9%) 69184.970 ops/s [Average]
  (min, avg, max) = (7295771.617, 7548294.054, 7719147.007), stdev = 103552.815
  CI (99.9%): [7479109.084, 7617479.025] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_toMapTarget  thrpt   30  7548294.054 ± 69184.970  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_valuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_valuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1412678.615 ops/s
# Warmup Iteration   2: 3789870.081 ops/s
# Warmup Iteration   3: 3746691.386 ops/s
# Warmup Iteration   4: 3080318.253 ops/s
# Warmup Iteration   5: 3709633.471 ops/s
# Warmup Iteration   6: 3745608.884 ops/s
# Warmup Iteration   7: 3752466.919 ops/s
# Warmup Iteration   8: 3736449.171 ops/s
# Warmup Iteration   9: 3770359.983 ops/s
# Warmup Iteration  10: 3749859.581 ops/s
# Warmup Iteration  11: 3717193.822 ops/s
# Warmup Iteration  12: 3741857.339 ops/s
# Warmup Iteration  13: 3762824.030 ops/s
# Warmup Iteration  14: 3743315.447 ops/s
# Warmup Iteration  15: 3714087.188 ops/s
# Warmup Iteration  16: 3719407.453 ops/s
# Warmup Iteration  17: 3751852.087 ops/s
# Warmup Iteration  18: 3716536.216 ops/s
# Warmup Iteration  19: 3766015.820 ops/s
# Warmup Iteration  20: 3723963.573 ops/s
# Warmup Iteration  21: 3767603.127 ops/s
# Warmup Iteration  22: 3787759.813 ops/s
# Warmup Iteration  23: 3741019.334 ops/s
# Warmup Iteration  24: 3770424.194 ops/s
# Warmup Iteration  25: 3761070.415 ops/s
# Warmup Iteration  26: 3739409.372 ops/s
# Warmup Iteration  27: 3767165.876 ops/s
# Warmup Iteration  28: 3758955.372 ops/s
# Warmup Iteration  29: 3763166.294 ops/s
# Warmup Iteration  30: 3747955.288 ops/s
Iteration   1: 3741201.638 ops/s
Iteration   2: 3717009.413 ops/s
Iteration   3: 3719325.186 ops/s
Iteration   4: 3738506.426 ops/s
Iteration   5: 3711230.954 ops/s
Iteration   6: 3759193.445 ops/s
Iteration   7: 3734488.399 ops/s
Iteration   8: 3727436.368 ops/s
Iteration   9: 3721007.361 ops/s
Iteration  10: 3753152.697 ops/s
Iteration  11: 3796371.745 ops/s
Iteration  12: 3765252.166 ops/s
Iteration  13: 3784858.403 ops/s
Iteration  14: 3758635.627 ops/s
Iteration  15: 3751366.761 ops/s
Iteration  16: 3757874.151 ops/s
Iteration  17: 3748238.618 ops/s
Iteration  18: 3747785.334 ops/s
Iteration  19: 3720871.615 ops/s
Iteration  20: 3760403.556 ops/s
Iteration  21: 3737841.014 ops/s
Iteration  22: 3771464.549 ops/s
Iteration  23: 3761908.515 ops/s
Iteration  24: 3758097.680 ops/s
Iteration  25: 3802149.360 ops/s
Iteration  26: 3769525.345 ops/s
Iteration  27: 3738456.139 ops/s
Iteration  28: 3767304.996 ops/s
Iteration  29: 3747322.321 ops/s
Iteration  30: 3728634.293 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_valuesView":
  3749897.136 ±(99.9%) 15164.775 ops/s [Average]
  (min, avg, max) = (3711230.954, 3749897.136, 3802149.360), stdev = 22697.923
  CI (99.9%): [3734732.361, 3765061.911] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_valuesView  thrpt   30  3749897.136 ± 15164.775  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 228594.128 ops/s
# Warmup Iteration   2: 461778.059 ops/s
# Warmup Iteration   3: 518695.779 ops/s
# Warmup Iteration   4: 520302.473 ops/s
# Warmup Iteration   5: 506139.005 ops/s
# Warmup Iteration   6: 457193.969 ops/s
# Warmup Iteration   7: 520173.818 ops/s
# Warmup Iteration   8: 521819.772 ops/s
# Warmup Iteration   9: 519904.243 ops/s
# Warmup Iteration  10: 518756.845 ops/s
# Warmup Iteration  11: 518791.235 ops/s
# Warmup Iteration  12: 519180.069 ops/s
# Warmup Iteration  13: 522583.301 ops/s
# Warmup Iteration  14: 521938.828 ops/s
# Warmup Iteration  15: 522851.056 ops/s
# Warmup Iteration  16: 517291.584 ops/s
# Warmup Iteration  17: 521135.283 ops/s
# Warmup Iteration  18: 520404.808 ops/s
# Warmup Iteration  19: 520184.251 ops/s
# Warmup Iteration  20: 521761.340 ops/s
# Warmup Iteration  21: 523357.444 ops/s
# Warmup Iteration  22: 518800.058 ops/s
# Warmup Iteration  23: 519455.106 ops/s
# Warmup Iteration  24: 524492.990 ops/s
# Warmup Iteration  25: 520410.124 ops/s
# Warmup Iteration  26: 524399.955 ops/s
# Warmup Iteration  27: 522812.375 ops/s
# Warmup Iteration  28: 522819.791 ops/s
# Warmup Iteration  29: 519304.789 ops/s
# Warmup Iteration  30: 515927.251 ops/s
Iteration   1: 524919.468 ops/s
Iteration   2: 523091.378 ops/s
Iteration   3: 522275.034 ops/s
Iteration   4: 514985.680 ops/s
Iteration   5: 518883.893 ops/s
Iteration   6: 512775.122 ops/s
Iteration   7: 517365.352 ops/s
Iteration   8: 524158.189 ops/s
Iteration   9: 524720.481 ops/s
Iteration  10: 521230.710 ops/s
Iteration  11: 520095.665 ops/s
Iteration  12: 517745.312 ops/s
Iteration  13: 521461.517 ops/s
Iteration  14: 517539.287 ops/s
Iteration  15: 518866.309 ops/s
Iteration  16: 525293.916 ops/s
Iteration  17: 522861.458 ops/s
Iteration  18: 525816.069 ops/s
Iteration  19: 522508.282 ops/s
Iteration  20: 519744.565 ops/s
Iteration  21: 521623.315 ops/s
Iteration  22: 525726.349 ops/s
Iteration  23: 521398.655 ops/s
Iteration  24: 520735.057 ops/s
Iteration  25: 523626.382 ops/s
Iteration  26: 520704.354 ops/s
Iteration  27: 521831.118 ops/s
Iteration  28: 517033.983 ops/s
Iteration  29: 519513.295 ops/s
Iteration  30: 521008.287 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty":
  520984.616 ±(99.9%) 2121.506 ops/s [Average]
  (min, avg, max) = (512775.122, 520984.616, 525816.069), stdev = 3175.370
  CI (99.9%): [518863.110, 523106.122] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score      Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty  thrpt   30  520984.616 ± 2121.506  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_withMapIterableNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_withMapIterableNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 46428.829 ops/s
# Warmup Iteration   2: 48175.775 ops/s
# Warmup Iteration   3: 48190.086 ops/s
# Warmup Iteration   4: 48092.745 ops/s
# Warmup Iteration   5: 47816.812 ops/s
# Warmup Iteration   6: 48455.949 ops/s
# Warmup Iteration   7: 47928.589 ops/s
# Warmup Iteration   8: 48562.108 ops/s
# Warmup Iteration   9: 48170.464 ops/s
# Warmup Iteration  10: 48330.237 ops/s
# Warmup Iteration  11: 48340.012 ops/s
# Warmup Iteration  12: 48492.878 ops/s
# Warmup Iteration  13: 48347.170 ops/s
# Warmup Iteration  14: 48378.098 ops/s
# Warmup Iteration  15: 49608.784 ops/s
# Warmup Iteration  16: 49966.109 ops/s
# Warmup Iteration  17: 50418.990 ops/s
# Warmup Iteration  18: 50462.142 ops/s
# Warmup Iteration  19: 49805.798 ops/s
# Warmup Iteration  20: 50499.434 ops/s
# Warmup Iteration  21: 49975.926 ops/s
# Warmup Iteration  22: 49989.363 ops/s
# Warmup Iteration  23: 49879.672 ops/s
# Warmup Iteration  24: 50395.776 ops/s
# Warmup Iteration  25: 49937.607 ops/s
# Warmup Iteration  26: 50099.015 ops/s
# Warmup Iteration  27: 50226.586 ops/s
# Warmup Iteration  28: 49909.906 ops/s
# Warmup Iteration  29: 50145.683 ops/s
# Warmup Iteration  30: 50155.946 ops/s
Iteration   1: 50388.269 ops/s
Iteration   2: 49866.266 ops/s
Iteration   3: 49933.316 ops/s
Iteration   4: 49878.734 ops/s
Iteration   5: 50466.617 ops/s
Iteration   6: 50191.156 ops/s
Iteration   7: 50138.643 ops/s
Iteration   8: 50223.652 ops/s
Iteration   9: 50587.838 ops/s
Iteration  10: 50492.151 ops/s
Iteration  11: 50367.609 ops/s
Iteration  12: 50243.349 ops/s
Iteration  13: 50068.444 ops/s
Iteration  14: 50238.045 ops/s
Iteration  15: 50265.435 ops/s
Iteration  16: 50146.147 ops/s
Iteration  17: 50058.077 ops/s
Iteration  18: 50109.729 ops/s
Iteration  19: 50163.774 ops/s
Iteration  20: 50550.818 ops/s
Iteration  21: 50607.848 ops/s
Iteration  22: 50404.425 ops/s
Iteration  23: 50319.104 ops/s
Iteration  24: 50100.453 ops/s
Iteration  25: 49846.339 ops/s
Iteration  26: 50233.251 ops/s
Iteration  27: 49180.352 ops/s
Iteration  28: 50282.000 ops/s
Iteration  29: 50208.223 ops/s
Iteration  30: 50210.481 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_withMapIterableNull":
  50192.352 ±(99.9%) 185.860 ops/s [Average]
  (min, avg, max) = (49180.352, 50192.352, 50607.848), stdev = 278.186
  CI (99.9%): [50006.492, 50378.211] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt      Score     Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_withMapIterableNull  thrpt   30  50192.352 ± 185.860  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_withMapNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_withMapNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 843782.303 ops/s
# Warmup Iteration   2: 1662403.196 ops/s
# Warmup Iteration   3: 1817290.094 ops/s
# Warmup Iteration   4: 1836290.954 ops/s
# Warmup Iteration   5: 1508593.166 ops/s
# Warmup Iteration   6: 1831607.474 ops/s
# Warmup Iteration   7: 1834091.876 ops/s
# Warmup Iteration   8: 1838088.955 ops/s
# Warmup Iteration   9: 1823913.151 ops/s
# Warmup Iteration  10: 1824140.728 ops/s
# Warmup Iteration  11: 1824130.288 ops/s
# Warmup Iteration  12: 1818003.133 ops/s
# Warmup Iteration  13: 1824074.282 ops/s
# Warmup Iteration  14: 1832695.309 ops/s
# Warmup Iteration  15: 1830853.683 ops/s
# Warmup Iteration  16: 1835460.587 ops/s
# Warmup Iteration  17: 1809841.418 ops/s
# Warmup Iteration  18: 1834571.031 ops/s
# Warmup Iteration  19: 1834254.770 ops/s
# Warmup Iteration  20: 1825529.759 ops/s
# Warmup Iteration  21: 1828593.395 ops/s
# Warmup Iteration  22: 1801884.434 ops/s
# Warmup Iteration  23: 1839589.835 ops/s
# Warmup Iteration  24: 1823965.523 ops/s
# Warmup Iteration  25: 1832093.761 ops/s
# Warmup Iteration  26: 1835917.428 ops/s
# Warmup Iteration  27: 1814655.036 ops/s
# Warmup Iteration  28: 1816776.456 ops/s
# Warmup Iteration  29: 1821406.027 ops/s
# Warmup Iteration  30: 1812057.173 ops/s
Iteration   1: 1836603.060 ops/s
Iteration   2: 1836758.414 ops/s
Iteration   3: 1843157.859 ops/s
Iteration   4: 1836317.735 ops/s
Iteration   5: 1828866.272 ops/s
Iteration   6: 1853753.147 ops/s
Iteration   7: 1845496.249 ops/s
Iteration   8: 1851100.108 ops/s
Iteration   9: 1856472.315 ops/s
Iteration  10: 1844782.594 ops/s
Iteration  11: 1830340.183 ops/s
Iteration  12: 1843981.508 ops/s
Iteration  13: 1824997.818 ops/s
Iteration  14: 1826809.865 ops/s
Iteration  15: 1846794.680 ops/s
Iteration  16: 1830051.631 ops/s
Iteration  17: 1821269.198 ops/s
Iteration  18: 1827312.411 ops/s
Iteration  19: 1806404.856 ops/s
Iteration  20: 1839838.660 ops/s
Iteration  21: 1838943.355 ops/s
Iteration  22: 1834851.189 ops/s
Iteration  23: 1821477.373 ops/s
Iteration  24: 1822831.266 ops/s
Iteration  25: 1823507.279 ops/s
Iteration  26: 1846588.672 ops/s
Iteration  27: 1840272.274 ops/s
Iteration  28: 1838445.381 ops/s
Iteration  29: 1826200.944 ops/s
Iteration  30: 1830786.416 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapInverseTest._Benchmark.benchmark_withMapNull":
  1835167.090 ±(99.9%) 7503.784 ops/s [Average]
  (min, avg, max) = (1806404.856, 1835167.090, 1856472.315), stdev = 11231.312
  CI (99.9%): [1827663.306, 1842670.875] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableHashBiMapInverseTest._Benchmark.benchmark_withMapNull  thrpt   30  1835167.090 ± 7503.784  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 676020.805 ops/s
# Warmup Iteration   2: 721293.744 ops/s
# Warmup Iteration   3: 931100.551 ops/s
# Warmup Iteration   4: 932450.334 ops/s
# Warmup Iteration   5: 921820.709 ops/s
# Warmup Iteration   6: 927070.338 ops/s
# Warmup Iteration   7: 925913.198 ops/s
# Warmup Iteration   8: 930652.984 ops/s
# Warmup Iteration   9: 930242.187 ops/s
# Warmup Iteration  10: 924009.021 ops/s
# Warmup Iteration  11: 778718.467 ops/s
# Warmup Iteration  12: 923640.150 ops/s
# Warmup Iteration  13: 934408.098 ops/s
# Warmup Iteration  14: 930738.895 ops/s
# Warmup Iteration  15: 933518.213 ops/s
# Warmup Iteration  16: 936272.303 ops/s
# Warmup Iteration  17: 984440.958 ops/s
# Warmup Iteration  18: 983942.765 ops/s
# Warmup Iteration  19: 982595.324 ops/s
# Warmup Iteration  20: 986322.230 ops/s
# Warmup Iteration  21: 983203.657 ops/s
# Warmup Iteration  22: 984472.596 ops/s
# Warmup Iteration  23: 989052.827 ops/s
# Warmup Iteration  24: 982059.282 ops/s
# Warmup Iteration  25: 983101.899 ops/s
# Warmup Iteration  26: 981303.940 ops/s
# Warmup Iteration  27: 977345.233 ops/s
# Warmup Iteration  28: 977506.480 ops/s
# Warmup Iteration  29: 984991.771 ops/s
# Warmup Iteration  30: 985306.197 ops/s
Iteration   1: 972360.367 ops/s
Iteration   2: 982517.218 ops/s
Iteration   3: 983864.920 ops/s
Iteration   4: 987813.260 ops/s
Iteration   5: 987652.853 ops/s
Iteration   6: 980528.725 ops/s
Iteration   7: 979694.890 ops/s
Iteration   8: 981291.171 ops/s
Iteration   9: 979726.565 ops/s
Iteration  10: 987314.959 ops/s
Iteration  11: 980591.470 ops/s
Iteration  12: 979298.130 ops/s
Iteration  13: 974129.114 ops/s
Iteration  14: 987201.501 ops/s
Iteration  15: 981630.800 ops/s
Iteration  16: 980914.646 ops/s
Iteration  17: 981987.938 ops/s
Iteration  18: 985928.276 ops/s
Iteration  19: 986963.035 ops/s
Iteration  20: 986719.116 ops/s
Iteration  21: 975310.980 ops/s
Iteration  22: 979956.158 ops/s
Iteration  23: 981619.677 ops/s
Iteration  24: 975101.711 ops/s
Iteration  25: 981483.032 ops/s
Iteration  26: 986065.005 ops/s
Iteration  27: 987789.637 ops/s
Iteration  28: 988749.153 ops/s
Iteration  29: 988295.389 ops/s
Iteration  30: 983762.413 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_clear":
  982542.070 ±(99.9%) 3019.125 ops/s [Average]
  (min, avg, max) = (972360.367, 982542.070, 988749.153), stdev = 4518.885
  CI (99.9%): [979522.945, 985561.196] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_clear  thrpt   30  982542.070 ± 3019.125  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_containsKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_containsKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6458338.267 ops/s
# Warmup Iteration   2: 13391202.170 ops/s
# Warmup Iteration   3: 11312403.386 ops/s
# Warmup Iteration   4: 13440994.282 ops/s
# Warmup Iteration   5: 13381247.594 ops/s
# Warmup Iteration   6: 13484021.148 ops/s
# Warmup Iteration   7: 13440633.674 ops/s
# Warmup Iteration   8: 13486679.781 ops/s
# Warmup Iteration   9: 13533648.324 ops/s
# Warmup Iteration  10: 13568224.567 ops/s
# Warmup Iteration  11: 13528688.980 ops/s
# Warmup Iteration  12: 13533866.951 ops/s
# Warmup Iteration  13: 13580380.486 ops/s
# Warmup Iteration  14: 13466911.043 ops/s
# Warmup Iteration  15: 13523155.239 ops/s
# Warmup Iteration  16: 13579014.745 ops/s
# Warmup Iteration  17: 13450042.226 ops/s
# Warmup Iteration  18: 13448630.083 ops/s
# Warmup Iteration  19: 13484104.767 ops/s
# Warmup Iteration  20: 13488802.290 ops/s
# Warmup Iteration  21: 13447282.368 ops/s
# Warmup Iteration  22: 13476286.332 ops/s
# Warmup Iteration  23: 13431516.212 ops/s
# Warmup Iteration  24: 13420293.176 ops/s
# Warmup Iteration  25: 13450876.289 ops/s
# Warmup Iteration  26: 13576579.301 ops/s
# Warmup Iteration  27: 13559956.520 ops/s
# Warmup Iteration  28: 13561428.671 ops/s
# Warmup Iteration  29: 13548066.964 ops/s
# Warmup Iteration  30: 13606920.709 ops/s
Iteration   1: 13484267.909 ops/s
Iteration   2: 13341932.178 ops/s
Iteration   3: 13502458.177 ops/s
Iteration   4: 13482677.268 ops/s
Iteration   5: 13473081.115 ops/s
Iteration   6: 13564459.563 ops/s
Iteration   7: 13493585.195 ops/s
Iteration   8: 13415858.572 ops/s
Iteration   9: 13488968.623 ops/s
Iteration  10: 13405656.927 ops/s
Iteration  11: 13474506.841 ops/s
Iteration  12: 13480198.645 ops/s
Iteration  13: 13579420.374 ops/s
Iteration  14: 13543665.564 ops/s
Iteration  15: 13443684.425 ops/s
Iteration  16: 13500080.379 ops/s
Iteration  17: 13387685.264 ops/s
Iteration  18: 13504871.583 ops/s
Iteration  19: 13583458.329 ops/s
Iteration  20: 13371654.656 ops/s
Iteration  21: 13419800.825 ops/s
Iteration  22: 13506567.752 ops/s
Iteration  23: 13491519.808 ops/s
Iteration  24: 13530790.606 ops/s
Iteration  25: 13476900.126 ops/s
Iteration  26: 13520145.033 ops/s
Iteration  27: 13601236.978 ops/s
Iteration  28: 13603135.756 ops/s
Iteration  29: 13546577.820 ops/s
Iteration  30: 13543947.795 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_containsKey":
  13492093.136 ±(99.9%) 44145.606 ops/s [Average]
  (min, avg, max) = (13341932.178, 13492093.136, 13603135.756), stdev = 66075.069
  CI (99.9%): [13447947.531, 13536238.742] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_containsKey  thrpt   30  13492093.136 ± 44145.606  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 40427.162 ops/s
# Warmup Iteration   2: 60894.532 ops/s
# Warmup Iteration   3: 87396.188 ops/s
# Warmup Iteration   4: 87138.670 ops/s
# Warmup Iteration   5: 86878.930 ops/s
# Warmup Iteration   6: 87057.651 ops/s
# Warmup Iteration   7: 87411.890 ops/s
# Warmup Iteration   8: 73575.363 ops/s
# Warmup Iteration   9: 87847.073 ops/s
# Warmup Iteration  10: 87303.133 ops/s
# Warmup Iteration  11: 86857.693 ops/s
# Warmup Iteration  12: 86722.008 ops/s
# Warmup Iteration  13: 87240.924 ops/s
# Warmup Iteration  14: 87125.103 ops/s
# Warmup Iteration  15: 87685.821 ops/s
# Warmup Iteration  16: 87601.883 ops/s
# Warmup Iteration  17: 87411.677 ops/s
# Warmup Iteration  18: 87155.709 ops/s
# Warmup Iteration  19: 87764.654 ops/s
# Warmup Iteration  20: 87661.375 ops/s
# Warmup Iteration  21: 86985.464 ops/s
# Warmup Iteration  22: 87907.686 ops/s
# Warmup Iteration  23: 87056.037 ops/s
# Warmup Iteration  24: 86596.354 ops/s
# Warmup Iteration  25: 87820.617 ops/s
# Warmup Iteration  26: 87071.003 ops/s
# Warmup Iteration  27: 87189.278 ops/s
# Warmup Iteration  28: 86846.839 ops/s
# Warmup Iteration  29: 87649.680 ops/s
# Warmup Iteration  30: 87654.184 ops/s
Iteration   1: 86856.642 ops/s
Iteration   2: 87649.645 ops/s
Iteration   3: 86965.718 ops/s
Iteration   4: 87289.264 ops/s
Iteration   5: 87672.072 ops/s
Iteration   6: 86005.240 ops/s
Iteration   7: 87493.828 ops/s
Iteration   8: 86553.296 ops/s
Iteration   9: 87390.632 ops/s
Iteration  10: 87053.197 ops/s
Iteration  11: 87640.624 ops/s
Iteration  12: 87417.548 ops/s
Iteration  13: 87424.487 ops/s
Iteration  14: 87790.125 ops/s
Iteration  15: 87869.104 ops/s
Iteration  16: 87953.991 ops/s
Iteration  17: 88830.706 ops/s
Iteration  18: 87560.977 ops/s
Iteration  19: 87991.804 ops/s
Iteration  20: 88246.912 ops/s
Iteration  21: 87338.306 ops/s
Iteration  22: 87367.467 ops/s
Iteration  23: 87581.807 ops/s
Iteration  24: 88980.596 ops/s
Iteration  25: 88537.160 ops/s
Iteration  26: 88974.579 ops/s
Iteration  27: 87743.779 ops/s
Iteration  28: 88507.468 ops/s
Iteration  29: 87902.021 ops/s
Iteration  30: 88639.033 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_equalsAndHashCode":
  87707.601 ±(99.9%) 462.619 ops/s [Average]
  (min, avg, max) = (86005.240, 87707.601, 88980.596), stdev = 692.426
  CI (99.9%): [87244.982, 88170.219] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt      Score     Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  87707.601 ± 462.619  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_flipUniqueValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_flipUniqueValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2070504.010 ops/s
# Warmup Iteration   2: 4968911.238 ops/s
# Warmup Iteration   3: 5128383.428 ops/s
# Warmup Iteration   4: 4283919.360 ops/s
# Warmup Iteration   5: 5080425.164 ops/s
# Warmup Iteration   6: 5164685.618 ops/s
# Warmup Iteration   7: 5132111.413 ops/s
# Warmup Iteration   8: 5122457.464 ops/s
# Warmup Iteration   9: 5127833.540 ops/s
# Warmup Iteration  10: 5148573.361 ops/s
# Warmup Iteration  11: 5145396.112 ops/s
# Warmup Iteration  12: 5126545.256 ops/s
# Warmup Iteration  13: 5150291.023 ops/s
# Warmup Iteration  14: 5160162.719 ops/s
# Warmup Iteration  15: 5142935.441 ops/s
# Warmup Iteration  16: 5152353.294 ops/s
# Warmup Iteration  17: 5127590.876 ops/s
# Warmup Iteration  18: 5126586.912 ops/s
# Warmup Iteration  19: 5138998.647 ops/s
# Warmup Iteration  20: 5139496.188 ops/s
# Warmup Iteration  21: 5145814.178 ops/s
# Warmup Iteration  22: 5132554.186 ops/s
# Warmup Iteration  23: 5144871.749 ops/s
# Warmup Iteration  24: 5137223.343 ops/s
# Warmup Iteration  25: 5121154.695 ops/s
# Warmup Iteration  26: 5127387.455 ops/s
# Warmup Iteration  27: 5112205.607 ops/s
# Warmup Iteration  28: 5101320.480 ops/s
# Warmup Iteration  29: 5077151.285 ops/s
# Warmup Iteration  30: 5119954.842 ops/s
Iteration   1: 5115994.698 ops/s
Iteration   2: 5095555.773 ops/s
Iteration   3: 5160251.244 ops/s
Iteration   4: 5151710.726 ops/s
Iteration   5: 5095940.197 ops/s
Iteration   6: 5154616.823 ops/s
Iteration   7: 5136579.321 ops/s
Iteration   8: 5159016.834 ops/s
Iteration   9: 5153046.228 ops/s
Iteration  10: 5101725.706 ops/s
Iteration  11: 5129819.161 ops/s
Iteration  12: 5129916.418 ops/s
Iteration  13: 5129897.900 ops/s
Iteration  14: 5072057.107 ops/s
Iteration  15: 5138855.191 ops/s
Iteration  16: 5149882.037 ops/s
Iteration  17: 5163547.309 ops/s
Iteration  18: 5104276.988 ops/s
Iteration  19: 5105292.921 ops/s
Iteration  20: 5163218.451 ops/s
Iteration  21: 5172566.710 ops/s
Iteration  22: 5184506.731 ops/s
Iteration  23: 5116933.659 ops/s
Iteration  24: 5135879.482 ops/s
Iteration  25: 5171034.540 ops/s
Iteration  26: 5116030.141 ops/s
Iteration  27: 5141857.166 ops/s
Iteration  28: 5171527.164 ops/s
Iteration  29: 5115492.862 ops/s
Iteration  30: 5174837.818 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_flipUniqueValues":
  5137062.244 ±(99.9%) 19035.051 ops/s [Average]
  (min, avg, max) = (5072057.107, 5137062.244, 5184506.731), stdev = 28490.770
  CI (99.9%): [5118027.193, 5156097.294] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_flipUniqueValues  thrpt   30  5137062.244 ± 19035.051  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1531020.076 ops/s
# Warmup Iteration   2: 3583293.611 ops/s
# Warmup Iteration   3: 3704501.594 ops/s
# Warmup Iteration   4: 3079570.663 ops/s
# Warmup Iteration   5: 3651495.716 ops/s
# Warmup Iteration   6: 3637953.503 ops/s
# Warmup Iteration   7: 3702236.631 ops/s
# Warmup Iteration   8: 3683639.419 ops/s
# Warmup Iteration   9: 3703949.891 ops/s
# Warmup Iteration  10: 3708065.822 ops/s
# Warmup Iteration  11: 3679209.918 ops/s
# Warmup Iteration  12: 3690584.141 ops/s
# Warmup Iteration  13: 3704552.293 ops/s
# Warmup Iteration  14: 3692809.200 ops/s
# Warmup Iteration  15: 3693638.146 ops/s
# Warmup Iteration  16: 3694117.857 ops/s
# Warmup Iteration  17: 3712230.277 ops/s
# Warmup Iteration  18: 3705912.425 ops/s
# Warmup Iteration  19: 3669632.919 ops/s
# Warmup Iteration  20: 3698950.959 ops/s
# Warmup Iteration  21: 3697462.767 ops/s
# Warmup Iteration  22: 3706240.003 ops/s
# Warmup Iteration  23: 3680611.551 ops/s
# Warmup Iteration  24: 3633338.643 ops/s
# Warmup Iteration  25: 3642571.501 ops/s
# Warmup Iteration  26: 3667973.401 ops/s
# Warmup Iteration  27: 3653521.770 ops/s
# Warmup Iteration  28: 3692250.061 ops/s
# Warmup Iteration  29: 3706878.321 ops/s
# Warmup Iteration  30: 3682137.543 ops/s
Iteration   1: 3683800.048 ops/s
Iteration   2: 3708256.549 ops/s
Iteration   3: 3692438.222 ops/s
Iteration   4: 3696954.849 ops/s
Iteration   5: 3699523.054 ops/s
Iteration   6: 3708558.853 ops/s
Iteration   7: 3681762.387 ops/s
Iteration   8: 3693599.099 ops/s
Iteration   9: 3673087.293 ops/s
Iteration  10: 3682761.413 ops/s
Iteration  11: 3658683.495 ops/s
Iteration  12: 3660939.864 ops/s
Iteration  13: 3706515.293 ops/s
Iteration  14: 3702075.026 ops/s
Iteration  15: 3706894.854 ops/s
Iteration  16: 3695127.369 ops/s
Iteration  17: 3694963.804 ops/s
Iteration  18: 3708943.960 ops/s
Iteration  19: 3719407.278 ops/s
Iteration  20: 3677101.632 ops/s
Iteration  21: 3638780.860 ops/s
Iteration  22: 3733878.339 ops/s
Iteration  23: 3702422.451 ops/s
Iteration  24: 3649979.769 ops/s
Iteration  25: 3686194.183 ops/s
Iteration  26: 3630687.904 ops/s
Iteration  27: 3666952.875 ops/s
Iteration  28: 3678976.462 ops/s
Iteration  29: 3676751.599 ops/s
Iteration  30: 3706771.870 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_forEach":
  3687426.355 ±(99.9%) 15692.413 ops/s [Average]
  (min, avg, max) = (3630687.904, 3687426.355, 3733878.339), stdev = 23487.666
  CI (99.9%): [3671733.942, 3703118.768] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_forEach  thrpt   30  3687426.355 ± 15692.413  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_forEachKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_forEachKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2625252.182 ops/s
# Warmup Iteration   2: 5802850.063 ops/s
# Warmup Iteration   3: 6273517.016 ops/s
# Warmup Iteration   4: 5865414.909 ops/s
# Warmup Iteration   5: 5725182.544 ops/s
# Warmup Iteration   6: 6392866.306 ops/s
# Warmup Iteration   7: 6322653.445 ops/s
# Warmup Iteration   8: 6341367.337 ops/s
# Warmup Iteration   9: 6339718.705 ops/s
# Warmup Iteration  10: 6320881.159 ops/s
# Warmup Iteration  11: 6326314.990 ops/s
# Warmup Iteration  12: 6349278.870 ops/s
# Warmup Iteration  13: 6342306.141 ops/s
# Warmup Iteration  14: 6357812.231 ops/s
# Warmup Iteration  15: 6347998.606 ops/s
# Warmup Iteration  16: 6373318.420 ops/s
# Warmup Iteration  17: 6357607.130 ops/s
# Warmup Iteration  18: 6333027.296 ops/s
# Warmup Iteration  19: 6300705.143 ops/s
# Warmup Iteration  20: 6331766.205 ops/s
# Warmup Iteration  21: 6362784.968 ops/s
# Warmup Iteration  22: 6349456.399 ops/s
# Warmup Iteration  23: 6338260.931 ops/s
# Warmup Iteration  24: 6347281.014 ops/s
# Warmup Iteration  25: 6362373.474 ops/s
# Warmup Iteration  26: 6357180.991 ops/s
# Warmup Iteration  27: 6359259.388 ops/s
# Warmup Iteration  28: 6338383.309 ops/s
# Warmup Iteration  29: 6376465.995 ops/s
# Warmup Iteration  30: 6345359.374 ops/s
Iteration   1: 6340913.096 ops/s
Iteration   2: 6362655.437 ops/s
Iteration   3: 6375766.060 ops/s
Iteration   4: 6357543.495 ops/s
Iteration   5: 6357364.283 ops/s
Iteration   6: 6410230.222 ops/s
Iteration   7: 6381992.781 ops/s
Iteration   8: 6351723.091 ops/s
Iteration   9: 6390808.436 ops/s
Iteration  10: 6370157.581 ops/s
Iteration  11: 6295463.253 ops/s
Iteration  12: 6355246.433 ops/s
Iteration  13: 6332455.814 ops/s
Iteration  14: 6382548.063 ops/s
Iteration  15: 6406760.858 ops/s
Iteration  16: 6352171.290 ops/s
Iteration  17: 6333614.151 ops/s
Iteration  18: 6301708.384 ops/s
Iteration  19: 6346085.740 ops/s
Iteration  20: 6378738.075 ops/s
Iteration  21: 6399326.172 ops/s
Iteration  22: 6364647.808 ops/s
Iteration  23: 6373085.288 ops/s
Iteration  24: 6432974.098 ops/s
Iteration  25: 6177162.765 ops/s
Iteration  26: 6334712.695 ops/s
Iteration  27: 6384753.887 ops/s
Iteration  28: 6302682.338 ops/s
Iteration  29: 6105188.509 ops/s
Iteration  30: 6365649.393 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_forEachKey":
  6347470.983 ±(99.9%) 43402.521 ops/s [Average]
  (min, avg, max) = (6105188.509, 6347470.983, 6432974.098), stdev = 64962.854
  CI (99.9%): [6304068.463, 6390873.504] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_forEachKey  thrpt   30  6347470.983 ± 43402.521  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_forEachKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_forEachKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1253356.440 ops/s
# Warmup Iteration   2: 3156484.186 ops/s
# Warmup Iteration   3: 3179362.220 ops/s
# Warmup Iteration   4: 2654441.019 ops/s
# Warmup Iteration   5: 3195210.473 ops/s
# Warmup Iteration   6: 3192043.346 ops/s
# Warmup Iteration   7: 3188668.412 ops/s
# Warmup Iteration   8: 3197527.208 ops/s
# Warmup Iteration   9: 3189446.419 ops/s
# Warmup Iteration  10: 3174019.641 ops/s
# Warmup Iteration  11: 3200557.429 ops/s
# Warmup Iteration  12: 3197677.871 ops/s
# Warmup Iteration  13: 3206712.614 ops/s
# Warmup Iteration  14: 3167443.907 ops/s
# Warmup Iteration  15: 3201744.426 ops/s
# Warmup Iteration  16: 3205742.999 ops/s
# Warmup Iteration  17: 3197668.605 ops/s
# Warmup Iteration  18: 3189198.265 ops/s
# Warmup Iteration  19: 3211707.818 ops/s
# Warmup Iteration  20: 3222088.673 ops/s
# Warmup Iteration  21: 3209824.659 ops/s
# Warmup Iteration  22: 3201245.080 ops/s
# Warmup Iteration  23: 3194405.552 ops/s
# Warmup Iteration  24: 3215457.180 ops/s
# Warmup Iteration  25: 3196113.386 ops/s
# Warmup Iteration  26: 3216335.949 ops/s
# Warmup Iteration  27: 3206432.628 ops/s
# Warmup Iteration  28: 3217393.665 ops/s
# Warmup Iteration  29: 3220732.217 ops/s
# Warmup Iteration  30: 3227475.297 ops/s
Iteration   1: 3210129.000 ops/s
Iteration   2: 3205036.215 ops/s
Iteration   3: 3211729.238 ops/s
Iteration   4: 3225196.147 ops/s
Iteration   5: 3213875.159 ops/s
Iteration   6: 3216983.200 ops/s
Iteration   7: 3219060.931 ops/s
Iteration   8: 3224845.688 ops/s
Iteration   9: 3213891.198 ops/s
Iteration  10: 3213931.246 ops/s
Iteration  11: 3199320.779 ops/s
Iteration  12: 3191782.548 ops/s
Iteration  13: 3158055.261 ops/s
Iteration  14: 3206493.705 ops/s
Iteration  15: 3221270.010 ops/s
Iteration  16: 3192738.650 ops/s
Iteration  17: 3209093.220 ops/s
Iteration  18: 3219394.042 ops/s
Iteration  19: 3225825.233 ops/s
Iteration  20: 3214594.389 ops/s
Iteration  21: 3203963.748 ops/s
Iteration  22: 3196472.615 ops/s
Iteration  23: 3215668.585 ops/s
Iteration  24: 3219219.118 ops/s
Iteration  25: 3202263.532 ops/s
Iteration  26: 3204111.307 ops/s
Iteration  27: 3209493.092 ops/s
Iteration  28: 3204825.971 ops/s
Iteration  29: 3208236.143 ops/s
Iteration  30: 3218697.540 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_forEachKeyValue":
  3209206.584 ±(99.9%) 8873.481 ops/s [Average]
  (min, avg, max) = (3158055.261, 3209206.584, 3225825.233), stdev = 13281.409
  CI (99.9%): [3200333.103, 3218080.064] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_forEachKeyValue  thrpt   30  3209206.584 ± 8873.481  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_forEachValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_forEachValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1519801.605 ops/s
# Warmup Iteration   2: 3572451.523 ops/s
# Warmup Iteration   3: 3652214.602 ops/s
# Warmup Iteration   4: 3029576.929 ops/s
# Warmup Iteration   5: 3657344.278 ops/s
# Warmup Iteration   6: 3650869.965 ops/s
# Warmup Iteration   7: 3642059.526 ops/s
# Warmup Iteration   8: 3663719.553 ops/s
# Warmup Iteration   9: 3661570.146 ops/s
# Warmup Iteration  10: 3644245.878 ops/s
# Warmup Iteration  11: 3661636.569 ops/s
# Warmup Iteration  12: 3649405.196 ops/s
# Warmup Iteration  13: 3667833.668 ops/s
# Warmup Iteration  14: 3655729.965 ops/s
# Warmup Iteration  15: 3669515.060 ops/s
# Warmup Iteration  16: 3646333.645 ops/s
# Warmup Iteration  17: 3579371.228 ops/s
# Warmup Iteration  18: 3621104.435 ops/s
# Warmup Iteration  19: 3628319.605 ops/s
# Warmup Iteration  20: 3631988.616 ops/s
# Warmup Iteration  21: 3640247.893 ops/s
# Warmup Iteration  22: 3643960.802 ops/s
# Warmup Iteration  23: 3634127.288 ops/s
# Warmup Iteration  24: 3657659.793 ops/s
# Warmup Iteration  25: 3657838.515 ops/s
# Warmup Iteration  26: 3657406.017 ops/s
# Warmup Iteration  27: 3651160.872 ops/s
# Warmup Iteration  28: 3651645.757 ops/s
# Warmup Iteration  29: 3656346.706 ops/s
# Warmup Iteration  30: 3653541.024 ops/s
Iteration   1: 3654281.892 ops/s
Iteration   2: 3666198.055 ops/s
Iteration   3: 3663278.063 ops/s
Iteration   4: 3649598.387 ops/s
Iteration   5: 3661917.281 ops/s
Iteration   6: 3651590.076 ops/s
Iteration   7: 3665999.125 ops/s
Iteration   8: 3639822.204 ops/s
Iteration   9: 3663552.983 ops/s
Iteration  10: 3655225.744 ops/s
Iteration  11: 3649883.098 ops/s
Iteration  12: 3629308.807 ops/s
Iteration  13: 3657850.976 ops/s
Iteration  14: 3686709.100 ops/s
Iteration  15: 3653981.020 ops/s
Iteration  16: 3651168.086 ops/s
Iteration  17: 3648017.553 ops/s
Iteration  18: 3645453.352 ops/s
Iteration  19: 3648719.613 ops/s
Iteration  20: 3675102.754 ops/s
Iteration  21: 3645582.784 ops/s
Iteration  22: 3676223.863 ops/s
Iteration  23: 3603543.971 ops/s
Iteration  24: 3644001.542 ops/s
Iteration  25: 3640853.076 ops/s
Iteration  26: 3642261.197 ops/s
Iteration  27: 3654276.440 ops/s
Iteration  28: 3657894.035 ops/s
Iteration  29: 3637819.055 ops/s
Iteration  30: 3641521.178 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_forEachValue":
  3652054.510 ±(99.9%) 10307.413 ops/s [Average]
  (min, avg, max) = (3603543.971, 3652054.510, 3686709.100), stdev = 15427.651
  CI (99.9%): [3641747.098, 3662361.923] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_forEachValue  thrpt   30  3652054.510 ± 10307.413  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1309211.799 ops/s
# Warmup Iteration   2: 3507672.000 ops/s
# Warmup Iteration   3: 3514459.391 ops/s
# Warmup Iteration   4: 2965182.526 ops/s
# Warmup Iteration   5: 3538644.992 ops/s
# Warmup Iteration   6: 3526337.953 ops/s
# Warmup Iteration   7: 3532580.083 ops/s
# Warmup Iteration   8: 3535034.131 ops/s
# Warmup Iteration   9: 3532953.468 ops/s
# Warmup Iteration  10: 3554108.758 ops/s
# Warmup Iteration  11: 3540330.542 ops/s
# Warmup Iteration  12: 3543911.022 ops/s
# Warmup Iteration  13: 3547466.248 ops/s
# Warmup Iteration  14: 3513708.661 ops/s
# Warmup Iteration  15: 3529995.541 ops/s
# Warmup Iteration  16: 3505275.267 ops/s
# Warmup Iteration  17: 3534368.976 ops/s
# Warmup Iteration  18: 3509005.078 ops/s
# Warmup Iteration  19: 3496761.955 ops/s
# Warmup Iteration  20: 3520108.211 ops/s
# Warmup Iteration  21: 3527447.239 ops/s
# Warmup Iteration  22: 3532845.773 ops/s
# Warmup Iteration  23: 3548301.593 ops/s
# Warmup Iteration  24: 3526433.703 ops/s
# Warmup Iteration  25: 3533551.576 ops/s
# Warmup Iteration  26: 3540476.543 ops/s
# Warmup Iteration  27: 3514976.271 ops/s
# Warmup Iteration  28: 3514766.111 ops/s
# Warmup Iteration  29: 3514311.571 ops/s
# Warmup Iteration  30: 3521662.227 ops/s
Iteration   1: 3543884.964 ops/s
Iteration   2: 3528984.147 ops/s
Iteration   3: 3543965.122 ops/s
Iteration   4: 3508502.483 ops/s
Iteration   5: 3527241.824 ops/s
Iteration   6: 3556722.451 ops/s
Iteration   7: 3530952.513 ops/s
Iteration   8: 3532445.453 ops/s
Iteration   9: 3551461.885 ops/s
Iteration  10: 3550207.850 ops/s
Iteration  11: 3543860.751 ops/s
Iteration  12: 3495597.797 ops/s
Iteration  13: 3510658.994 ops/s
Iteration  14: 3514524.004 ops/s
Iteration  15: 3529647.727 ops/s
Iteration  16: 3533057.841 ops/s
Iteration  17: 3525670.602 ops/s
Iteration  18: 3519575.380 ops/s
Iteration  19: 3517968.246 ops/s
Iteration  20: 3549253.268 ops/s
Iteration  21: 3550032.512 ops/s
Iteration  22: 3520966.494 ops/s
Iteration  23: 3499996.781 ops/s
Iteration  24: 3554310.213 ops/s
Iteration  25: 3515789.740 ops/s
Iteration  26: 3565161.920 ops/s
Iteration  27: 3512474.543 ops/s
Iteration  28: 3507639.426 ops/s
Iteration  29: 3543793.549 ops/s
Iteration  30: 3522773.609 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_forEachWith":
  3530237.403 ±(99.9%) 12124.443 ops/s [Average]
  (min, avg, max) = (3495597.797, 3530237.403, 3565161.920), stdev = 18147.297
  CI (99.9%): [3518112.960, 3542361.846] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_forEachWith  thrpt   30  3530237.403 ± 12124.443  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1248582.618 ops/s
# Warmup Iteration   2: 3293371.892 ops/s
# Warmup Iteration   3: 3375429.769 ops/s
# Warmup Iteration   4: 2806640.891 ops/s
# Warmup Iteration   5: 3365048.426 ops/s
# Warmup Iteration   6: 3348550.843 ops/s
# Warmup Iteration   7: 3391309.623 ops/s
# Warmup Iteration   8: 3395435.609 ops/s
# Warmup Iteration   9: 3364533.977 ops/s
# Warmup Iteration  10: 3380542.584 ops/s
# Warmup Iteration  11: 3380431.057 ops/s
# Warmup Iteration  12: 3396347.730 ops/s
# Warmup Iteration  13: 3406832.641 ops/s
# Warmup Iteration  14: 3412336.553 ops/s
# Warmup Iteration  15: 3379690.056 ops/s
# Warmup Iteration  16: 3361126.914 ops/s
# Warmup Iteration  17: 3381132.954 ops/s
# Warmup Iteration  18: 3383327.487 ops/s
# Warmup Iteration  19: 3380616.431 ops/s
# Warmup Iteration  20: 3376561.711 ops/s
# Warmup Iteration  21: 3393358.722 ops/s
# Warmup Iteration  22: 3375799.399 ops/s
# Warmup Iteration  23: 3369463.233 ops/s
# Warmup Iteration  24: 3378657.403 ops/s
# Warmup Iteration  25: 3399773.428 ops/s
# Warmup Iteration  26: 3364007.721 ops/s
# Warmup Iteration  27: 3406687.090 ops/s
# Warmup Iteration  28: 3390777.171 ops/s
# Warmup Iteration  29: 3406026.544 ops/s
# Warmup Iteration  30: 3416236.170 ops/s
Iteration   1: 3402908.969 ops/s
Iteration   2: 3366729.321 ops/s
Iteration   3: 3364231.443 ops/s
Iteration   4: 3386985.917 ops/s
Iteration   5: 3371532.485 ops/s
Iteration   6: 3351814.090 ops/s
Iteration   7: 3378833.698 ops/s
Iteration   8: 3397351.454 ops/s
Iteration   9: 3390126.373 ops/s
Iteration  10: 3378787.225 ops/s
Iteration  11: 3371873.731 ops/s
Iteration  12: 3385297.784 ops/s
Iteration  13: 3388357.568 ops/s
Iteration  14: 3377109.314 ops/s
Iteration  15: 3376947.701 ops/s
Iteration  16: 3339155.538 ops/s
Iteration  17: 3322995.433 ops/s
Iteration  18: 3381172.379 ops/s
Iteration  19: 3369757.405 ops/s
Iteration  20: 3405561.962 ops/s
Iteration  21: 3368617.060 ops/s
Iteration  22: 3386303.149 ops/s
Iteration  23: 3395703.717 ops/s
Iteration  24: 3371758.500 ops/s
Iteration  25: 3393075.945 ops/s
Iteration  26: 3317617.451 ops/s
Iteration  27: 3393617.013 ops/s
Iteration  28: 3401192.834 ops/s
Iteration  29: 3373343.121 ops/s
Iteration  30: 3381970.645 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_forEachWithIndex":
  3376357.641 ±(99.9%) 14124.531 ops/s [Average]
  (min, avg, max) = (3317617.451, 3376357.641, 3405561.962), stdev = 21140.935
  CI (99.9%): [3362233.110, 3390482.172] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  3376357.641 ± 14124.531  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2290123.368 ops/s
# Warmup Iteration   2: 5140954.451 ops/s
# Warmup Iteration   3: 5129003.234 ops/s
# Warmup Iteration   4: 4263392.991 ops/s
# Warmup Iteration   5: 5153891.753 ops/s
# Warmup Iteration   6: 5146594.252 ops/s
# Warmup Iteration   7: 5124843.862 ops/s
# Warmup Iteration   8: 5122639.407 ops/s
# Warmup Iteration   9: 5159960.709 ops/s
# Warmup Iteration  10: 5126634.012 ops/s
# Warmup Iteration  11: 5132119.408 ops/s
# Warmup Iteration  12: 5150246.245 ops/s
# Warmup Iteration  13: 5144253.935 ops/s
# Warmup Iteration  14: 5148180.513 ops/s
# Warmup Iteration  15: 5132340.355 ops/s
# Warmup Iteration  16: 5124469.808 ops/s
# Warmup Iteration  17: 5143084.407 ops/s
# Warmup Iteration  18: 5139366.125 ops/s
# Warmup Iteration  19: 5157476.537 ops/s
# Warmup Iteration  20: 5162659.435 ops/s
# Warmup Iteration  21: 5117274.682 ops/s
# Warmup Iteration  22: 5113924.706 ops/s
# Warmup Iteration  23: 5101868.221 ops/s
# Warmup Iteration  24: 5163674.579 ops/s
# Warmup Iteration  25: 5153616.998 ops/s
# Warmup Iteration  26: 5086607.262 ops/s
# Warmup Iteration  27: 5153292.292 ops/s
# Warmup Iteration  28: 5132577.482 ops/s
# Warmup Iteration  29: 5143766.070 ops/s
# Warmup Iteration  30: 5096702.980 ops/s
Iteration   1: 5138158.374 ops/s
Iteration   2: 5122964.882 ops/s
Iteration   3: 5078248.737 ops/s
Iteration   4: 5104558.765 ops/s
Iteration   5: 5095056.829 ops/s
Iteration   6: 5113025.806 ops/s
Iteration   7: 5108270.024 ops/s
Iteration   8: 5102716.771 ops/s
Iteration   9: 5117246.814 ops/s
Iteration  10: 5103183.995 ops/s
Iteration  11: 5152661.087 ops/s
Iteration  12: 5162667.195 ops/s
Iteration  13: 5110944.509 ops/s
Iteration  14: 5128423.653 ops/s
Iteration  15: 5091671.591 ops/s
Iteration  16: 5116465.200 ops/s
Iteration  17: 5177954.650 ops/s
Iteration  18: 5131480.101 ops/s
Iteration  19: 5132945.758 ops/s
Iteration  20: 5106709.695 ops/s
Iteration  21: 5111118.904 ops/s
Iteration  22: 5083594.731 ops/s
Iteration  23: 5144954.769 ops/s
Iteration  24: 5090177.949 ops/s
Iteration  25: 5161135.730 ops/s
Iteration  26: 5125012.751 ops/s
Iteration  27: 5132179.605 ops/s
Iteration  28: 5156667.189 ops/s
Iteration  29: 5157041.860 ops/s
Iteration  30: 5129831.414 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_get":
  5122902.311 ±(99.9%) 16988.359 ops/s [Average]
  (min, avg, max) = (5078248.737, 5122902.311, 5177954.650), stdev = 25427.378
  CI (99.9%): [5105913.952, 5139890.670] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_get  thrpt   30  5122902.311 ± 16988.359  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_getIfAbsent$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_getIfAbsent

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2146893.240 ops/s
# Warmup Iteration   2: 4532197.523 ops/s
# Warmup Iteration   3: 4277628.784 ops/s
# Warmup Iteration   4: 3721700.412 ops/s
# Warmup Iteration   5: 4423874.162 ops/s
# Warmup Iteration   6: 4430055.445 ops/s
# Warmup Iteration   7: 4413709.091 ops/s
# Warmup Iteration   8: 4440604.313 ops/s
# Warmup Iteration   9: 4396811.307 ops/s
# Warmup Iteration  10: 4371729.081 ops/s
# Warmup Iteration  11: 4369308.620 ops/s
# Warmup Iteration  12: 4390532.947 ops/s
# Warmup Iteration  13: 4424805.430 ops/s
# Warmup Iteration  14: 4388256.901 ops/s
# Warmup Iteration  15: 4399360.239 ops/s
# Warmup Iteration  16: 4433101.366 ops/s
# Warmup Iteration  17: 4430525.095 ops/s
# Warmup Iteration  18: 4481307.622 ops/s
# Warmup Iteration  19: 4365104.630 ops/s
# Warmup Iteration  20: 4313777.091 ops/s
# Warmup Iteration  21: 4511898.318 ops/s
# Warmup Iteration  22: 4430717.277 ops/s
# Warmup Iteration  23: 4405487.887 ops/s
# Warmup Iteration  24: 4428670.674 ops/s
# Warmup Iteration  25: 4395331.099 ops/s
# Warmup Iteration  26: 4474402.460 ops/s
# Warmup Iteration  27: 4403492.240 ops/s
# Warmup Iteration  28: 4602545.810 ops/s
# Warmup Iteration  29: 4477892.869 ops/s
# Warmup Iteration  30: 4433399.525 ops/s
Iteration   1: 4314222.626 ops/s
Iteration   2: 4341853.808 ops/s
Iteration   3: 4373491.007 ops/s
Iteration   4: 4393270.984 ops/s
Iteration   5: 4477587.829 ops/s
Iteration   6: 4460481.117 ops/s
Iteration   7: 4337004.867 ops/s
Iteration   8: 4392495.353 ops/s
Iteration   9: 4444712.703 ops/s
Iteration  10: 4345613.576 ops/s
Iteration  11: 4427748.036 ops/s
Iteration  12: 4440436.897 ops/s
Iteration  13: 4358943.259 ops/s
Iteration  14: 4455004.931 ops/s
Iteration  15: 4408590.390 ops/s
Iteration  16: 4421122.340 ops/s
Iteration  17: 4667804.817 ops/s
Iteration  18: 4515187.577 ops/s
Iteration  19: 4479755.942 ops/s
Iteration  20: 4332259.373 ops/s
Iteration  21: 4390244.876 ops/s
Iteration  22: 4329911.012 ops/s
Iteration  23: 4235620.731 ops/s
Iteration  24: 4425434.002 ops/s
Iteration  25: 4211338.969 ops/s
Iteration  26: 4423449.190 ops/s
Iteration  27: 4404055.902 ops/s
Iteration  28: 4439545.088 ops/s
Iteration  29: 4314990.035 ops/s
Iteration  30: 4451722.907 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_getIfAbsent":
  4400463.338 ±(99.9%) 57394.684 ops/s [Average]
  (min, avg, max) = (4211338.969, 4400463.338, 4667804.817), stdev = 85905.667
  CI (99.9%): [4343068.654, 4457858.022] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_getIfAbsent  thrpt   30  4400463.338 ± 57394.684  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_getIfAbsentWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_getIfAbsentWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2205732.226 ops/s
# Warmup Iteration   2: 4796536.578 ops/s
# Warmup Iteration   3: 4836694.887 ops/s
# Warmup Iteration   4: 4015086.795 ops/s
# Warmup Iteration   5: 4848451.171 ops/s
# Warmup Iteration   6: 4807785.295 ops/s
# Warmup Iteration   7: 4831903.781 ops/s
# Warmup Iteration   8: 4785654.661 ops/s
# Warmup Iteration   9: 4797274.628 ops/s
# Warmup Iteration  10: 4868580.210 ops/s
# Warmup Iteration  11: 4856149.674 ops/s
# Warmup Iteration  12: 4794618.589 ops/s
# Warmup Iteration  13: 4843533.534 ops/s
# Warmup Iteration  14: 4897529.839 ops/s
# Warmup Iteration  15: 4854609.012 ops/s
# Warmup Iteration  16: 4789051.534 ops/s
# Warmup Iteration  17: 4885412.889 ops/s
# Warmup Iteration  18: 4859648.061 ops/s
# Warmup Iteration  19: 4839006.026 ops/s
# Warmup Iteration  20: 4810354.756 ops/s
# Warmup Iteration  21: 4851246.706 ops/s
# Warmup Iteration  22: 4847540.986 ops/s
# Warmup Iteration  23: 4838195.181 ops/s
# Warmup Iteration  24: 4848273.145 ops/s
# Warmup Iteration  25: 4841901.684 ops/s
# Warmup Iteration  26: 4805971.517 ops/s
# Warmup Iteration  27: 4875372.737 ops/s
# Warmup Iteration  28: 4887439.527 ops/s
# Warmup Iteration  29: 4816790.968 ops/s
# Warmup Iteration  30: 4812045.383 ops/s
Iteration   1: 4862158.701 ops/s
Iteration   2: 4858312.839 ops/s
Iteration   3: 4763368.544 ops/s
Iteration   4: 4782649.789 ops/s
Iteration   5: 4829545.480 ops/s
Iteration   6: 4868480.410 ops/s
Iteration   7: 4838615.147 ops/s
Iteration   8: 4822618.087 ops/s
Iteration   9: 4729655.828 ops/s
Iteration  10: 4841039.580 ops/s
Iteration  11: 4873678.723 ops/s
Iteration  12: 4865514.153 ops/s
Iteration  13: 4805110.586 ops/s
Iteration  14: 4872069.794 ops/s
Iteration  15: 4904300.767 ops/s
Iteration  16: 4890358.356 ops/s
Iteration  17: 4871245.531 ops/s
Iteration  18: 4920442.293 ops/s
Iteration  19: 4810875.784 ops/s
Iteration  20: 4831609.361 ops/s
Iteration  21: 4809795.274 ops/s
Iteration  22: 4833269.837 ops/s
Iteration  23: 4889687.676 ops/s
Iteration  24: 4769628.215 ops/s
Iteration  25: 4827843.844 ops/s
Iteration  26: 4873998.669 ops/s
Iteration  27: 4856490.252 ops/s
Iteration  28: 4841017.262 ops/s
Iteration  29: 4911607.923 ops/s
Iteration  30: 4889735.393 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_getIfAbsentWith":
  4844824.137 ±(99.9%) 30215.742 ops/s [Average]
  (min, avg, max) = (4729655.828, 4844824.137, 4920442.293), stdev = 45225.503
  CI (99.9%): [4814608.395, 4875039.878] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_getIfAbsentWith  thrpt   30  4844824.137 ± 30215.742  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_getIfAbsent_function$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_getIfAbsent_function

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2230744.446 ops/s
# Warmup Iteration   2: 4515141.051 ops/s
# Warmup Iteration   3: 4719460.347 ops/s
# Warmup Iteration   4: 3985078.764 ops/s
# Warmup Iteration   5: 4582806.845 ops/s
# Warmup Iteration   6: 4684255.682 ops/s
# Warmup Iteration   7: 4581158.483 ops/s
# Warmup Iteration   8: 4777064.115 ops/s
# Warmup Iteration   9: 4722110.069 ops/s
# Warmup Iteration  10: 4581690.998 ops/s
# Warmup Iteration  11: 4565557.613 ops/s
# Warmup Iteration  12: 4676772.161 ops/s
# Warmup Iteration  13: 4698405.624 ops/s
# Warmup Iteration  14: 4602923.686 ops/s
# Warmup Iteration  15: 4648404.905 ops/s
# Warmup Iteration  16: 4525933.430 ops/s
# Warmup Iteration  17: 4598023.768 ops/s
# Warmup Iteration  18: 4581128.294 ops/s
# Warmup Iteration  19: 4621406.194 ops/s
# Warmup Iteration  20: 4631009.836 ops/s
# Warmup Iteration  21: 4657570.022 ops/s
# Warmup Iteration  22: 4579330.552 ops/s
# Warmup Iteration  23: 4665585.760 ops/s
# Warmup Iteration  24: 4549953.205 ops/s
# Warmup Iteration  25: 4665365.216 ops/s
# Warmup Iteration  26: 4758723.076 ops/s
# Warmup Iteration  27: 4624516.012 ops/s
# Warmup Iteration  28: 4608352.872 ops/s
# Warmup Iteration  29: 4636001.826 ops/s
# Warmup Iteration  30: 4574538.139 ops/s
Iteration   1: 4658115.291 ops/s
Iteration   2: 4647019.687 ops/s
Iteration   3: 4611198.599 ops/s
Iteration   4: 4586370.263 ops/s
Iteration   5: 4680836.580 ops/s
Iteration   6: 4650955.656 ops/s
Iteration   7: 4764931.810 ops/s
Iteration   8: 4768655.648 ops/s
Iteration   9: 4646487.511 ops/s
Iteration  10: 4630808.409 ops/s
Iteration  11: 4636338.440 ops/s
Iteration  12: 4581223.499 ops/s
Iteration  13: 4598514.786 ops/s
Iteration  14: 4584287.046 ops/s
Iteration  15: 4532890.769 ops/s
Iteration  16: 4669182.590 ops/s
Iteration  17: 4607721.333 ops/s
Iteration  18: 4658031.283 ops/s
Iteration  19: 4647455.522 ops/s
Iteration  20: 4593560.117 ops/s
Iteration  21: 4812846.545 ops/s
Iteration  22: 4653776.007 ops/s
Iteration  23: 4679767.623 ops/s
Iteration  24: 4392106.777 ops/s
Iteration  25: 4602946.996 ops/s
Iteration  26: 4511351.363 ops/s
Iteration  27: 4627604.653 ops/s
Iteration  28: 4602081.441 ops/s
Iteration  29: 4510116.147 ops/s
Iteration  30: 4637858.975 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_getIfAbsent_function":
  4626168.045 ±(99.9%) 53521.222 ops/s [Average]
  (min, avg, max) = (4392106.777, 4626168.045, 4812846.545), stdev = 80108.051
  CI (99.9%): [4572646.824, 4679689.267] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_getIfAbsent_function  thrpt   30  4626168.045 ± 53521.222  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_getOrDefault$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_getOrDefault

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2205880.161 ops/s
# Warmup Iteration   2: 4655974.243 ops/s
# Warmup Iteration   3: 4832036.453 ops/s
# Warmup Iteration   4: 4098833.711 ops/s
# Warmup Iteration   5: 4821629.750 ops/s
# Warmup Iteration   6: 4762967.672 ops/s
# Warmup Iteration   7: 4846657.706 ops/s
# Warmup Iteration   8: 4721550.028 ops/s
# Warmup Iteration   9: 4758132.091 ops/s
# Warmup Iteration  10: 4770341.004 ops/s
# Warmup Iteration  11: 4762408.938 ops/s
# Warmup Iteration  12: 4754530.565 ops/s
# Warmup Iteration  13: 4809988.305 ops/s
# Warmup Iteration  14: 4850903.352 ops/s
# Warmup Iteration  15: 4763901.449 ops/s
# Warmup Iteration  16: 4764952.908 ops/s
# Warmup Iteration  17: 4792231.796 ops/s
# Warmup Iteration  18: 4711276.230 ops/s
# Warmup Iteration  19: 4774891.653 ops/s
# Warmup Iteration  20: 4859115.485 ops/s
# Warmup Iteration  21: 4814057.679 ops/s
# Warmup Iteration  22: 4786571.160 ops/s
# Warmup Iteration  23: 4823476.889 ops/s
# Warmup Iteration  24: 4755696.698 ops/s
# Warmup Iteration  25: 4823092.074 ops/s
# Warmup Iteration  26: 4835766.749 ops/s
# Warmup Iteration  27: 4804990.057 ops/s
# Warmup Iteration  28: 4809133.406 ops/s
# Warmup Iteration  29: 4813116.952 ops/s
# Warmup Iteration  30: 4754545.682 ops/s
Iteration   1: 4816901.485 ops/s
Iteration   2: 4731526.198 ops/s
Iteration   3: 4803478.895 ops/s
Iteration   4: 4794709.238 ops/s
Iteration   5: 4814044.737 ops/s
Iteration   6: 4739018.275 ops/s
Iteration   7: 4772205.105 ops/s
Iteration   8: 4830560.108 ops/s
Iteration   9: 4844779.255 ops/s
Iteration  10: 4832371.471 ops/s
Iteration  11: 4814831.873 ops/s
Iteration  12: 4823741.151 ops/s
Iteration  13: 4768746.914 ops/s
Iteration  14: 4854998.644 ops/s
Iteration  15: 4770159.913 ops/s
Iteration  16: 4823878.841 ops/s
Iteration  17: 4698088.650 ops/s
Iteration  18: 4844043.778 ops/s
Iteration  19: 4814191.997 ops/s
Iteration  20: 4794271.269 ops/s
Iteration  21: 4851919.055 ops/s
Iteration  22: 4815914.694 ops/s
Iteration  23: 4801414.978 ops/s
Iteration  24: 4808954.738 ops/s
Iteration  25: 4759223.068 ops/s
Iteration  26: 4806568.783 ops/s
Iteration  27: 4770153.368 ops/s
Iteration  28: 4823910.755 ops/s
Iteration  29: 4794494.406 ops/s
Iteration  30: 4833107.179 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_getOrDefault":
  4801740.294 ±(99.9%) 24729.493 ops/s [Average]
  (min, avg, max) = (4698088.650, 4801740.294, 4854998.644), stdev = 37013.944
  CI (99.9%): [4777010.801, 4826469.787] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_getOrDefault  thrpt   30  4801740.294 ± 24729.493  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_ifPresentApply$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_ifPresentApply

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6467342.838 ops/s
# Warmup Iteration   2: 13526694.314 ops/s
# Warmup Iteration   3: 13836990.600 ops/s
# Warmup Iteration   4: 13147754.373 ops/s
# Warmup Iteration   5: 12249519.748 ops/s
# Warmup Iteration   6: 13693033.496 ops/s
# Warmup Iteration   7: 13834316.426 ops/s
# Warmup Iteration   8: 13795318.237 ops/s
# Warmup Iteration   9: 13808031.046 ops/s
# Warmup Iteration  10: 13926297.911 ops/s
# Warmup Iteration  11: 13911267.586 ops/s
# Warmup Iteration  12: 13974803.526 ops/s
# Warmup Iteration  13: 13905466.321 ops/s
# Warmup Iteration  14: 13796557.192 ops/s
# Warmup Iteration  15: 13838432.385 ops/s
# Warmup Iteration  16: 13813106.579 ops/s
# Warmup Iteration  17: 13837908.038 ops/s
# Warmup Iteration  18: 13806643.980 ops/s
# Warmup Iteration  19: 13877837.582 ops/s
# Warmup Iteration  20: 13870302.525 ops/s
# Warmup Iteration  21: 13832663.872 ops/s
# Warmup Iteration  22: 13912137.277 ops/s
# Warmup Iteration  23: 13846170.529 ops/s
# Warmup Iteration  24: 13852149.108 ops/s
# Warmup Iteration  25: 13805063.786 ops/s
# Warmup Iteration  26: 13829855.886 ops/s
# Warmup Iteration  27: 13985483.227 ops/s
# Warmup Iteration  28: 13785311.453 ops/s
# Warmup Iteration  29: 13828490.582 ops/s
# Warmup Iteration  30: 13869377.444 ops/s
Iteration   1: 13977043.954 ops/s
Iteration   2: 13865606.206 ops/s
Iteration   3: 13929023.875 ops/s
Iteration   4: 13981224.833 ops/s
Iteration   5: 13995761.034 ops/s
Iteration   6: 13934747.337 ops/s
Iteration   7: 13822319.613 ops/s
Iteration   8: 13813823.266 ops/s
Iteration   9: 13913998.127 ops/s
Iteration  10: 13750713.392 ops/s
Iteration  11: 13889905.934 ops/s
Iteration  12: 13795045.729 ops/s
Iteration  13: 13876362.457 ops/s
Iteration  14: 13829200.394 ops/s
Iteration  15: 13750182.491 ops/s
Iteration  16: 13815761.044 ops/s
Iteration  17: 13835109.871 ops/s
Iteration  18: 13774460.546 ops/s
Iteration  19: 13878518.286 ops/s
Iteration  20: 13926236.601 ops/s
Iteration  21: 13878595.985 ops/s
Iteration  22: 13809983.424 ops/s
Iteration  23: 13855974.872 ops/s
Iteration  24: 13992377.033 ops/s
Iteration  25: 13809388.495 ops/s
Iteration  26: 13741229.667 ops/s
Iteration  27: 13796487.753 ops/s
Iteration  28: 13903514.958 ops/s
Iteration  29: 13771577.069 ops/s
Iteration  30: 13798274.057 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_ifPresentApply":
  13857081.610 ±(99.9%) 50087.643 ops/s [Average]
  (min, avg, max) = (13741229.667, 13857081.610, 13995761.034), stdev = 74968.832
  CI (99.9%): [13806993.967, 13907169.253] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_ifPresentApply  thrpt   30  13857081.610 ± 50087.643  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1557791.710 ops/s
# Warmup Iteration   2: 4312142.440 ops/s
# Warmup Iteration   3: 4311293.696 ops/s
# Warmup Iteration   4: 3559850.626 ops/s
# Warmup Iteration   5: 4332832.649 ops/s
# Warmup Iteration   6: 4311711.428 ops/s
# Warmup Iteration   7: 4318130.752 ops/s
# Warmup Iteration   8: 4292801.489 ops/s
# Warmup Iteration   9: 4329009.307 ops/s
# Warmup Iteration  10: 4257688.029 ops/s
# Warmup Iteration  11: 4306060.161 ops/s
# Warmup Iteration  12: 4260275.029 ops/s
# Warmup Iteration  13: 4249916.119 ops/s
# Warmup Iteration  14: 4245443.645 ops/s
# Warmup Iteration  15: 4240342.175 ops/s
# Warmup Iteration  16: 4269340.703 ops/s
# Warmup Iteration  17: 4247812.866 ops/s
# Warmup Iteration  18: 4282960.659 ops/s
# Warmup Iteration  19: 4285734.983 ops/s
# Warmup Iteration  20: 4268982.053 ops/s
# Warmup Iteration  21: 4239358.444 ops/s
# Warmup Iteration  22: 4294332.734 ops/s
# Warmup Iteration  23: 4203781.999 ops/s
# Warmup Iteration  24: 4224470.551 ops/s
# Warmup Iteration  25: 4233741.813 ops/s
# Warmup Iteration  26: 4243033.433 ops/s
# Warmup Iteration  27: 4201390.964 ops/s
# Warmup Iteration  28: 4259555.846 ops/s
# Warmup Iteration  29: 4268932.562 ops/s
# Warmup Iteration  30: 4326169.838 ops/s
Iteration   1: 4301431.054 ops/s
Iteration   2: 4205890.862 ops/s
Iteration   3: 4258564.101 ops/s
Iteration   4: 4256124.158 ops/s
Iteration   5: 4260373.809 ops/s
Iteration   6: 4274335.364 ops/s
Iteration   7: 4317397.597 ops/s
Iteration   8: 4249206.588 ops/s
Iteration   9: 4286824.399 ops/s
Iteration  10: 4340936.633 ops/s
Iteration  11: 4272914.168 ops/s
Iteration  12: 4274890.469 ops/s
Iteration  13: 4297576.327 ops/s
Iteration  14: 4269953.377 ops/s
Iteration  15: 4197786.519 ops/s
Iteration  16: 4231250.471 ops/s
Iteration  17: 4303569.631 ops/s
Iteration  18: 4315856.081 ops/s
Iteration  19: 4240177.891 ops/s
Iteration  20: 4238987.807 ops/s
Iteration  21: 4236666.874 ops/s
Iteration  22: 4248700.872 ops/s
Iteration  23: 4324867.788 ops/s
Iteration  24: 4294537.644 ops/s
Iteration  25: 4283835.345 ops/s
Iteration  26: 4244922.302 ops/s
Iteration  27: 4199004.924 ops/s
Iteration  28: 4225254.971 ops/s
Iteration  29: 4265808.290 ops/s
Iteration  30: 4223911.237 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_iterator":
  4264718.585 ±(99.9%) 24955.856 ops/s [Average]
  (min, avg, max) = (4197786.519, 4264718.585, 4340936.633), stdev = 37352.754
  CI (99.9%): [4239762.729, 4289674.441] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_iterator  thrpt   30  4264718.585 ± 24955.856  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_iteratorThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_iteratorThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 586097.623 ops/s
# Warmup Iteration   2: 655214.586 ops/s
# Warmup Iteration   3: 897731.795 ops/s
# Warmup Iteration   4: 882895.140 ops/s
# Warmup Iteration   5: 873337.215 ops/s
# Warmup Iteration   6: 890606.613 ops/s
# Warmup Iteration   7: 882394.830 ops/s
# Warmup Iteration   8: 890587.590 ops/s
# Warmup Iteration   9: 889178.414 ops/s
# Warmup Iteration  10: 871816.683 ops/s
# Warmup Iteration  11: 761091.473 ops/s
# Warmup Iteration  12: 894607.065 ops/s
# Warmup Iteration  13: 886148.691 ops/s
# Warmup Iteration  14: 886348.935 ops/s
# Warmup Iteration  15: 892183.299 ops/s
# Warmup Iteration  16: 883763.765 ops/s
# Warmup Iteration  17: 947387.442 ops/s
# Warmup Iteration  18: 946433.700 ops/s
# Warmup Iteration  19: 906231.661 ops/s
# Warmup Iteration  20: 936032.538 ops/s
# Warmup Iteration  21: 939682.506 ops/s
# Warmup Iteration  22: 931531.127 ops/s
# Warmup Iteration  23: 930129.337 ops/s
# Warmup Iteration  24: 935402.478 ops/s
# Warmup Iteration  25: 923980.371 ops/s
# Warmup Iteration  26: 925956.053 ops/s
# Warmup Iteration  27: 934130.440 ops/s
# Warmup Iteration  28: 929645.123 ops/s
# Warmup Iteration  29: 920161.888 ops/s
# Warmup Iteration  30: 926760.769 ops/s
Iteration   1: 937708.051 ops/s
Iteration   2: 942499.421 ops/s
Iteration   3: 931935.140 ops/s
Iteration   4: 935407.170 ops/s
Iteration   5: 924791.691 ops/s
Iteration   6: 939504.556 ops/s
Iteration   7: 930140.968 ops/s
Iteration   8: 936841.327 ops/s
Iteration   9: 929893.931 ops/s
Iteration  10: 936593.125 ops/s
Iteration  11: 936572.866 ops/s
Iteration  12: 949233.524 ops/s
Iteration  13: 942095.475 ops/s
Iteration  14: 930250.398 ops/s
Iteration  15: 943200.963 ops/s
Iteration  16: 933918.597 ops/s
Iteration  17: 943653.427 ops/s
Iteration  18: 934844.181 ops/s
Iteration  19: 940933.353 ops/s
Iteration  20: 942424.590 ops/s
Iteration  21: 927405.800 ops/s
Iteration  22: 929523.334 ops/s
Iteration  23: 931416.308 ops/s
Iteration  24: 920322.981 ops/s
Iteration  25: 922750.326 ops/s
Iteration  26: 930715.652 ops/s
Iteration  27: 936528.325 ops/s
Iteration  28: 928344.307 ops/s
Iteration  29: 932535.194 ops/s
Iteration  30: 946098.603 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_iteratorThrows":
  934936.120 ±(99.9%) 4683.330 ops/s [Average]
  (min, avg, max) = (920322.981, 934936.120, 949233.524), stdev = 7009.788
  CI (99.9%): [930252.790, 939619.450] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_iteratorThrows  thrpt   30  934936.120 ± 4683.330  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_keySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_keySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2970223.716 ops/s
# Warmup Iteration   2: 7090000.988 ops/s
# Warmup Iteration   3: 7312097.905 ops/s
# Warmup Iteration   4: 5968974.508 ops/s
# Warmup Iteration   5: 7314441.278 ops/s
# Warmup Iteration   6: 7302917.697 ops/s
# Warmup Iteration   7: 7339550.658 ops/s
# Warmup Iteration   8: 7359284.697 ops/s
# Warmup Iteration   9: 7295331.400 ops/s
# Warmup Iteration  10: 7279878.813 ops/s
# Warmup Iteration  11: 7322010.499 ops/s
# Warmup Iteration  12: 7266978.143 ops/s
# Warmup Iteration  13: 7267373.102 ops/s
# Warmup Iteration  14: 7260009.401 ops/s
# Warmup Iteration  15: 7319169.632 ops/s
# Warmup Iteration  16: 7303264.309 ops/s
# Warmup Iteration  17: 7281028.923 ops/s
# Warmup Iteration  18: 7314535.473 ops/s
# Warmup Iteration  19: 7248140.561 ops/s
# Warmup Iteration  20: 7289043.972 ops/s
# Warmup Iteration  21: 7255760.599 ops/s
# Warmup Iteration  22: 7303522.017 ops/s
# Warmup Iteration  23: 7306417.162 ops/s
# Warmup Iteration  24: 7261688.145 ops/s
# Warmup Iteration  25: 7299316.236 ops/s
# Warmup Iteration  26: 7302273.234 ops/s
# Warmup Iteration  27: 7340657.563 ops/s
# Warmup Iteration  28: 7381861.298 ops/s
# Warmup Iteration  29: 7286296.557 ops/s
# Warmup Iteration  30: 7318906.847 ops/s
Iteration   1: 7296243.059 ops/s
Iteration   2: 7358766.522 ops/s
Iteration   3: 7381649.521 ops/s
Iteration   4: 7222133.620 ops/s
Iteration   5: 7287409.674 ops/s
Iteration   6: 7295714.488 ops/s
Iteration   7: 7247501.745 ops/s
Iteration   8: 7350957.484 ops/s
Iteration   9: 7338865.649 ops/s
Iteration  10: 7310296.932 ops/s
Iteration  11: 7227697.643 ops/s
Iteration  12: 7170805.181 ops/s
Iteration  13: 7349710.186 ops/s
Iteration  14: 7370938.079 ops/s
Iteration  15: 7273833.039 ops/s
Iteration  16: 7262993.644 ops/s
Iteration  17: 7324382.795 ops/s
Iteration  18: 7251996.776 ops/s
Iteration  19: 7297148.525 ops/s
Iteration  20: 7359759.293 ops/s
Iteration  21: 7323213.007 ops/s
Iteration  22: 7165857.890 ops/s
Iteration  23: 7411201.581 ops/s
Iteration  24: 7239297.709 ops/s
Iteration  25: 7306684.867 ops/s
Iteration  26: 7361706.329 ops/s
Iteration  27: 7312530.926 ops/s
Iteration  28: 7302027.091 ops/s
Iteration  29: 7368203.229 ops/s
Iteration  30: 7292345.477 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_keySet":
  7302062.399 ±(99.9%) 40101.716 ops/s [Average]
  (min, avg, max) = (7165857.890, 7302062.399, 7411201.581), stdev = 60022.365
  CI (99.9%): [7261960.683, 7342164.114] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_keySet  thrpt   30  7302062.399 ± 40101.716  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_keyValuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_keyValuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1058149.304 ops/s
# Warmup Iteration   2: 2881090.255 ops/s
# Warmup Iteration   3: 2948913.610 ops/s
# Warmup Iteration   4: 2411421.137 ops/s
# Warmup Iteration   5: 2893122.488 ops/s
# Warmup Iteration   6: 2902665.575 ops/s
# Warmup Iteration   7: 2947957.171 ops/s
# Warmup Iteration   8: 2967534.674 ops/s
# Warmup Iteration   9: 2899741.272 ops/s
# Warmup Iteration  10: 2955860.823 ops/s
# Warmup Iteration  11: 2927386.648 ops/s
# Warmup Iteration  12: 2917212.960 ops/s
# Warmup Iteration  13: 2931516.955 ops/s
# Warmup Iteration  14: 2922477.566 ops/s
# Warmup Iteration  15: 2920545.263 ops/s
# Warmup Iteration  16: 2934474.631 ops/s
# Warmup Iteration  17: 2898013.354 ops/s
# Warmup Iteration  18: 2926218.247 ops/s
# Warmup Iteration  19: 2894367.651 ops/s
# Warmup Iteration  20: 2966807.815 ops/s
# Warmup Iteration  21: 2920109.415 ops/s
# Warmup Iteration  22: 2929367.646 ops/s
# Warmup Iteration  23: 3005305.494 ops/s
# Warmup Iteration  24: 2976844.370 ops/s
# Warmup Iteration  25: 2990517.059 ops/s
# Warmup Iteration  26: 2935574.918 ops/s
# Warmup Iteration  27: 2945444.954 ops/s
# Warmup Iteration  28: 2920033.425 ops/s
# Warmup Iteration  29: 2941469.060 ops/s
# Warmup Iteration  30: 2906217.354 ops/s
Iteration   1: 2938001.881 ops/s
Iteration   2: 2959059.967 ops/s
Iteration   3: 2948782.593 ops/s
Iteration   4: 2947787.188 ops/s
Iteration   5: 2963992.826 ops/s
Iteration   6: 2990057.831 ops/s
Iteration   7: 2879523.000 ops/s
Iteration   8: 2950143.614 ops/s
Iteration   9: 2956224.968 ops/s
Iteration  10: 2976143.207 ops/s
Iteration  11: 2986399.106 ops/s
Iteration  12: 2953500.937 ops/s
Iteration  13: 2912077.460 ops/s
Iteration  14: 2932088.705 ops/s
Iteration  15: 2958427.100 ops/s
Iteration  16: 2950090.512 ops/s
Iteration  17: 2901855.246 ops/s
Iteration  18: 2917412.444 ops/s
Iteration  19: 2978779.915 ops/s
Iteration  20: 2925201.607 ops/s
Iteration  21: 2920146.504 ops/s
Iteration  22: 2938593.486 ops/s
Iteration  23: 2933013.302 ops/s
Iteration  24: 2969074.758 ops/s
Iteration  25: 2979748.761 ops/s
Iteration  26: 2931039.344 ops/s
Iteration  27: 2897150.358 ops/s
Iteration  28: 2923845.758 ops/s
Iteration  29: 2915927.309 ops/s
Iteration  30: 2937339.731 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_keyValuesView":
  2942380.981 ±(99.9%) 18270.682 ops/s [Average]
  (min, avg, max) = (2879523.000, 2942380.981, 2990057.831), stdev = 27346.699
  CI (99.9%): [2924110.299, 2960651.662] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_keyValuesView  thrpt   30  2942380.981 ± 18270.682  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_keysView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_keysView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2259738.214 ops/s
# Warmup Iteration   2: 5287251.430 ops/s
# Warmup Iteration   3: 5725605.344 ops/s
# Warmup Iteration   4: 4951625.538 ops/s
# Warmup Iteration   5: 5629400.127 ops/s
# Warmup Iteration   6: 5796004.860 ops/s
# Warmup Iteration   7: 5717622.780 ops/s
# Warmup Iteration   8: 5741058.844 ops/s
# Warmup Iteration   9: 5725396.455 ops/s
# Warmup Iteration  10: 5720330.195 ops/s
# Warmup Iteration  11: 5793846.566 ops/s
# Warmup Iteration  12: 5718519.786 ops/s
# Warmup Iteration  13: 5683924.834 ops/s
# Warmup Iteration  14: 5710433.845 ops/s
# Warmup Iteration  15: 5748313.495 ops/s
# Warmup Iteration  16: 5715455.032 ops/s
# Warmup Iteration  17: 5736021.831 ops/s
# Warmup Iteration  18: 5746233.534 ops/s
# Warmup Iteration  19: 5686146.671 ops/s
# Warmup Iteration  20: 5702079.991 ops/s
# Warmup Iteration  21: 5773579.516 ops/s
# Warmup Iteration  22: 5780181.619 ops/s
# Warmup Iteration  23: 5714395.652 ops/s
# Warmup Iteration  24: 5705292.782 ops/s
# Warmup Iteration  25: 5706613.536 ops/s
# Warmup Iteration  26: 5768474.928 ops/s
# Warmup Iteration  27: 5724672.553 ops/s
# Warmup Iteration  28: 5719753.208 ops/s
# Warmup Iteration  29: 5751519.883 ops/s
# Warmup Iteration  30: 5681326.199 ops/s
Iteration   1: 5742894.385 ops/s
Iteration   2: 5756747.031 ops/s
Iteration   3: 5715238.460 ops/s
Iteration   4: 5766133.108 ops/s
Iteration   5: 5737592.031 ops/s
Iteration   6: 5796915.861 ops/s
Iteration   7: 5764719.761 ops/s
Iteration   8: 5720559.169 ops/s
Iteration   9: 5811980.162 ops/s
Iteration  10: 5768188.487 ops/s
Iteration  11: 5770192.782 ops/s
Iteration  12: 5819783.399 ops/s
Iteration  13: 5782726.033 ops/s
Iteration  14: 5788514.829 ops/s
Iteration  15: 5839619.430 ops/s
Iteration  16: 5787257.350 ops/s
Iteration  17: 5781649.036 ops/s
Iteration  18: 5765413.298 ops/s
Iteration  19: 5725576.638 ops/s
Iteration  20: 5767287.348 ops/s
Iteration  21: 5803970.235 ops/s
Iteration  22: 5733244.197 ops/s
Iteration  23: 5727136.945 ops/s
Iteration  24: 5741954.937 ops/s
Iteration  25: 5721550.610 ops/s
Iteration  26: 5788807.833 ops/s
Iteration  27: 5719619.415 ops/s
Iteration  28: 5714849.493 ops/s
Iteration  29: 5828958.770 ops/s
Iteration  30: 5708293.484 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_keysView":
  5763245.817 ±(99.9%) 24665.949 ops/s [Average]
  (min, avg, max) = (5708293.484, 5763245.817, 5839619.430), stdev = 36918.834
  CI (99.9%): [5738579.869, 5787911.766] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_keysView  thrpt   30  5763245.817 ± 24665.949  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithAllKeyValuePairs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithAllKeyValuePairs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 444673.782 ops/s
# Warmup Iteration   2: 904015.401 ops/s
# Warmup Iteration   3: 978526.672 ops/s
# Warmup Iteration   4: 1004865.762 ops/s
# Warmup Iteration   5: 843540.972 ops/s
# Warmup Iteration   6: 997928.436 ops/s
# Warmup Iteration   7: 1005614.945 ops/s
# Warmup Iteration   8: 995964.982 ops/s
# Warmup Iteration   9: 1002978.432 ops/s
# Warmup Iteration  10: 1007559.857 ops/s
# Warmup Iteration  11: 993453.376 ops/s
# Warmup Iteration  12: 986981.040 ops/s
# Warmup Iteration  13: 985543.033 ops/s
# Warmup Iteration  14: 1005657.736 ops/s
# Warmup Iteration  15: 1002343.187 ops/s
# Warmup Iteration  16: 994741.460 ops/s
# Warmup Iteration  17: 994437.872 ops/s
# Warmup Iteration  18: 1005261.527 ops/s
# Warmup Iteration  19: 994694.637 ops/s
# Warmup Iteration  20: 1007564.146 ops/s
# Warmup Iteration  21: 1005552.092 ops/s
# Warmup Iteration  22: 998481.094 ops/s
# Warmup Iteration  23: 990114.190 ops/s
# Warmup Iteration  24: 990687.526 ops/s
# Warmup Iteration  25: 1000322.575 ops/s
# Warmup Iteration  26: 998102.209 ops/s
# Warmup Iteration  27: 997388.957 ops/s
# Warmup Iteration  28: 999614.609 ops/s
# Warmup Iteration  29: 998955.560 ops/s
# Warmup Iteration  30: 992400.586 ops/s
Iteration   1: 1007158.134 ops/s
Iteration   2: 982910.797 ops/s
Iteration   3: 979837.782 ops/s
Iteration   4: 994581.524 ops/s
Iteration   5: 992609.241 ops/s
Iteration   6: 999744.038 ops/s
Iteration   7: 1012302.651 ops/s
Iteration   8: 990217.058 ops/s
Iteration   9: 1014751.348 ops/s
Iteration  10: 1005091.519 ops/s
Iteration  11: 998827.509 ops/s
Iteration  12: 986696.648 ops/s
Iteration  13: 996244.482 ops/s
Iteration  14: 1009178.020 ops/s
Iteration  15: 996013.029 ops/s
Iteration  16: 996790.342 ops/s
Iteration  17: 1013588.027 ops/s
Iteration  18: 995267.906 ops/s
Iteration  19: 997834.214 ops/s
Iteration  20: 998725.019 ops/s
Iteration  21: 1008091.003 ops/s
Iteration  22: 1006831.905 ops/s
Iteration  23: 996136.341 ops/s
Iteration  24: 994685.429 ops/s
Iteration  25: 1017204.838 ops/s
Iteration  26: 1003082.036 ops/s
Iteration  27: 997638.966 ops/s
Iteration  28: 994641.225 ops/s
Iteration  29: 1013718.811 ops/s
Iteration  30: 998666.523 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithAllKeyValuePairs":
  999968.879 ±(99.9%) 6235.111 ops/s [Average]
  (min, avg, max) = (979837.782, 999968.879, 1017204.838), stdev = 9332.421
  CI (99.9%): [993733.768, 1006203.990] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_newWithAllKeyValuePairs  thrpt   30  999968.879 ± 6235.111  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithAllKeyValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithAllKeyValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 440864.184 ops/s
# Warmup Iteration   2: 838391.504 ops/s
# Warmup Iteration   3: 930612.210 ops/s
# Warmup Iteration   4: 928291.189 ops/s
# Warmup Iteration   5: 809874.695 ops/s
# Warmup Iteration   6: 877168.062 ops/s
# Warmup Iteration   7: 924844.604 ops/s
# Warmup Iteration   8: 935827.115 ops/s
# Warmup Iteration   9: 927839.749 ops/s
# Warmup Iteration  10: 922884.920 ops/s
# Warmup Iteration  11: 935868.055 ops/s
# Warmup Iteration  12: 936646.967 ops/s
# Warmup Iteration  13: 923038.386 ops/s
# Warmup Iteration  14: 934214.472 ops/s
# Warmup Iteration  15: 933608.962 ops/s
# Warmup Iteration  16: 921414.755 ops/s
# Warmup Iteration  17: 930792.558 ops/s
# Warmup Iteration  18: 935353.200 ops/s
# Warmup Iteration  19: 935991.376 ops/s
# Warmup Iteration  20: 934366.131 ops/s
# Warmup Iteration  21: 930192.704 ops/s
# Warmup Iteration  22: 939661.209 ops/s
# Warmup Iteration  23: 928714.997 ops/s
# Warmup Iteration  24: 928389.591 ops/s
# Warmup Iteration  25: 936399.986 ops/s
# Warmup Iteration  26: 919903.657 ops/s
# Warmup Iteration  27: 922014.109 ops/s
# Warmup Iteration  28: 925753.544 ops/s
# Warmup Iteration  29: 935394.648 ops/s
# Warmup Iteration  30: 931427.376 ops/s
Iteration   1: 922711.917 ops/s
Iteration   2: 932501.208 ops/s
Iteration   3: 906886.113 ops/s
Iteration   4: 919212.688 ops/s
Iteration   5: 925373.430 ops/s
Iteration   6: 914855.348 ops/s
Iteration   7: 922510.017 ops/s
Iteration   8: 927335.981 ops/s
Iteration   9: 918049.378 ops/s
Iteration  10: 917696.459 ops/s
Iteration  11: 910388.074 ops/s
Iteration  12: 916376.546 ops/s
Iteration  13: 922938.124 ops/s
Iteration  14: 926233.463 ops/s
Iteration  15: 925948.407 ops/s
Iteration  16: 928344.241 ops/s
Iteration  17: 930188.731 ops/s
Iteration  18: 938112.573 ops/s
Iteration  19: 919556.709 ops/s
Iteration  20: 916571.720 ops/s
Iteration  21: 938532.306 ops/s
Iteration  22: 910238.213 ops/s
Iteration  23: 915451.633 ops/s
Iteration  24: 920509.687 ops/s
Iteration  25: 928311.373 ops/s
Iteration  26: 930489.782 ops/s
Iteration  27: 928706.635 ops/s
Iteration  28: 920529.629 ops/s
Iteration  29: 934842.581 ops/s
Iteration  30: 933995.717 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithAllKeyValues":
  923446.623 ±(99.9%) 5460.758 ops/s [Average]
  (min, avg, max) = (906886.113, 923446.623, 938532.306), stdev = 8173.407
  CI (99.9%): [917985.864, 928907.381] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_newWithAllKeyValues  thrpt   30  923446.623 ± 5460.758  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 488984.211 ops/s
# Warmup Iteration   2: 955336.775 ops/s
# Warmup Iteration   3: 1029191.084 ops/s
# Warmup Iteration   4: 1050360.493 ops/s
# Warmup Iteration   5: 868811.863 ops/s
# Warmup Iteration   6: 1039669.620 ops/s
# Warmup Iteration   7: 1038084.107 ops/s
# Warmup Iteration   8: 1056429.201 ops/s
# Warmup Iteration   9: 1047794.464 ops/s
# Warmup Iteration  10: 1045243.521 ops/s
# Warmup Iteration  11: 1050632.615 ops/s
# Warmup Iteration  12: 1049676.233 ops/s
# Warmup Iteration  13: 1055657.318 ops/s
# Warmup Iteration  14: 1046951.378 ops/s
# Warmup Iteration  15: 1051357.835 ops/s
# Warmup Iteration  16: 1061351.979 ops/s
# Warmup Iteration  17: 1058441.178 ops/s
# Warmup Iteration  18: 1046738.733 ops/s
# Warmup Iteration  19: 1058538.308 ops/s
# Warmup Iteration  20: 1060521.901 ops/s
# Warmup Iteration  21: 1046769.929 ops/s
# Warmup Iteration  22: 1039367.827 ops/s
# Warmup Iteration  23: 1053843.087 ops/s
# Warmup Iteration  24: 1045611.795 ops/s
# Warmup Iteration  25: 1038244.423 ops/s
# Warmup Iteration  26: 1049304.475 ops/s
# Warmup Iteration  27: 1045795.212 ops/s
# Warmup Iteration  28: 1050927.326 ops/s
# Warmup Iteration  29: 1052535.710 ops/s
# Warmup Iteration  30: 1052823.991 ops/s
Iteration   1: 1050786.787 ops/s
Iteration   2: 1059313.676 ops/s
Iteration   3: 1035430.658 ops/s
Iteration   4: 1045524.581 ops/s
Iteration   5: 1049889.410 ops/s
Iteration   6: 1034412.150 ops/s
Iteration   7: 1039656.800 ops/s
Iteration   8: 1066543.572 ops/s
Iteration   9: 1055298.888 ops/s
Iteration  10: 1066726.261 ops/s
Iteration  11: 1036751.503 ops/s
Iteration  12: 1053320.455 ops/s
Iteration  13: 1042738.882 ops/s
Iteration  14: 1034105.815 ops/s
Iteration  15: 1038405.663 ops/s
Iteration  16: 1050122.768 ops/s
Iteration  17: 1047161.594 ops/s
Iteration  18: 1038624.947 ops/s
Iteration  19: 1046513.310 ops/s
Iteration  20: 1058743.018 ops/s
Iteration  21: 1061943.925 ops/s
Iteration  22: 1055749.808 ops/s
Iteration  23: 1065752.932 ops/s
Iteration  24: 1049012.967 ops/s
Iteration  25: 1052653.904 ops/s
Iteration  26: 1061091.088 ops/s
Iteration  27: 1068039.188 ops/s
Iteration  28: 1062512.945 ops/s
Iteration  29: 1046198.080 ops/s
Iteration  30: 1054378.227 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithKeyValue":
  1050913.460 ±(99.9%) 6962.090 ops/s [Average]
  (min, avg, max) = (1034105.815, 1050913.460, 1068039.188), stdev = 10420.529
  CI (99.9%): [1043951.370, 1057875.550] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_newWithKeyValue  thrpt   30  1050913.460 ± 6962.090  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithMap1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithMap1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 176237.916 ops/s
# Warmup Iteration   2: 323581.228 ops/s
# Warmup Iteration   3: 378635.516 ops/s
# Warmup Iteration   4: 380956.571 ops/s
# Warmup Iteration   5: 379562.017 ops/s
# Warmup Iteration   6: 314193.975 ops/s
# Warmup Iteration   7: 381995.815 ops/s
# Warmup Iteration   8: 378757.254 ops/s
# Warmup Iteration   9: 382875.743 ops/s
# Warmup Iteration  10: 381463.317 ops/s
# Warmup Iteration  11: 377771.927 ops/s
# Warmup Iteration  12: 378343.140 ops/s
# Warmup Iteration  13: 378376.525 ops/s
# Warmup Iteration  14: 377642.349 ops/s
# Warmup Iteration  15: 376969.785 ops/s
# Warmup Iteration  16: 379409.441 ops/s
# Warmup Iteration  17: 377992.807 ops/s
# Warmup Iteration  18: 378049.281 ops/s
# Warmup Iteration  19: 376863.168 ops/s
# Warmup Iteration  20: 379327.303 ops/s
# Warmup Iteration  21: 382084.198 ops/s
# Warmup Iteration  22: 378587.917 ops/s
# Warmup Iteration  23: 383021.621 ops/s
# Warmup Iteration  24: 380014.582 ops/s
# Warmup Iteration  25: 383569.874 ops/s
# Warmup Iteration  26: 378198.398 ops/s
# Warmup Iteration  27: 378097.865 ops/s
# Warmup Iteration  28: 381507.628 ops/s
# Warmup Iteration  29: 380054.479 ops/s
# Warmup Iteration  30: 378788.580 ops/s
Iteration   1: 383352.248 ops/s
Iteration   2: 375174.921 ops/s
Iteration   3: 382236.620 ops/s
Iteration   4: 381341.136 ops/s
Iteration   5: 382256.514 ops/s
Iteration   6: 380533.784 ops/s
Iteration   7: 386219.053 ops/s
Iteration   8: 381377.814 ops/s
Iteration   9: 379878.578 ops/s
Iteration  10: 379165.024 ops/s
Iteration  11: 378479.632 ops/s
Iteration  12: 379958.494 ops/s
Iteration  13: 380520.943 ops/s
Iteration  14: 379219.246 ops/s
Iteration  15: 379260.063 ops/s
Iteration  16: 390256.047 ops/s
Iteration  17: 385135.054 ops/s
Iteration  18: 382063.823 ops/s
Iteration  19: 379700.799 ops/s
Iteration  20: 380958.953 ops/s
Iteration  21: 381795.046 ops/s
Iteration  22: 379438.218 ops/s
Iteration  23: 378686.015 ops/s
Iteration  24: 381301.387 ops/s
Iteration  25: 384868.754 ops/s
Iteration  26: 384294.126 ops/s
Iteration  27: 378100.421 ops/s
Iteration  28: 383283.107 ops/s
Iteration  29: 382432.688 ops/s
Iteration  30: 376223.041 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithMap1":
  381250.385 ±(99.9%) 2020.851 ops/s [Average]
  (min, avg, max) = (375174.921, 381250.385, 390256.047), stdev = 3024.715
  CI (99.9%): [379229.534, 383271.236] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_newWithMap1  thrpt   30  381250.385 ± 2020.851  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithMapEmptyAndTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithMapEmptyAndTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1679421.709 ops/s
# Warmup Iteration   2: 3965012.670 ops/s
# Warmup Iteration   3: 3216710.119 ops/s
# Warmup Iteration   4: 3866981.347 ops/s
# Warmup Iteration   5: 3882967.778 ops/s
# Warmup Iteration   6: 3818745.269 ops/s
# Warmup Iteration   7: 3863493.652 ops/s
# Warmup Iteration   8: 3860450.812 ops/s
# Warmup Iteration   9: 3854308.467 ops/s
# Warmup Iteration  10: 3868791.889 ops/s
# Warmup Iteration  11: 3862148.314 ops/s
# Warmup Iteration  12: 3870324.145 ops/s
# Warmup Iteration  13: 3873589.638 ops/s
# Warmup Iteration  14: 3858941.783 ops/s
# Warmup Iteration  15: 3835423.188 ops/s
# Warmup Iteration  16: 3857539.817 ops/s
# Warmup Iteration  17: 3886271.638 ops/s
# Warmup Iteration  18: 3869790.839 ops/s
# Warmup Iteration  19: 3847670.413 ops/s
# Warmup Iteration  20: 3892496.162 ops/s
# Warmup Iteration  21: 3848413.130 ops/s
# Warmup Iteration  22: 3850901.523 ops/s
# Warmup Iteration  23: 3856761.614 ops/s
# Warmup Iteration  24: 3820014.538 ops/s
# Warmup Iteration  25: 3866162.251 ops/s
# Warmup Iteration  26: 3826884.356 ops/s
# Warmup Iteration  27: 3925880.440 ops/s
# Warmup Iteration  28: 3867340.982 ops/s
# Warmup Iteration  29: 3872408.507 ops/s
# Warmup Iteration  30: 3878475.827 ops/s
Iteration   1: 3851528.645 ops/s
Iteration   2: 3915919.130 ops/s
Iteration   3: 3772101.604 ops/s
Iteration   4: 3856711.087 ops/s
Iteration   5: 3854128.216 ops/s
Iteration   6: 3845169.917 ops/s
Iteration   7: 3806375.772 ops/s
Iteration   8: 3839480.325 ops/s
Iteration   9: 3807717.108 ops/s
Iteration  10: 3862303.388 ops/s
Iteration  11: 3858528.460 ops/s
Iteration  12: 3864187.440 ops/s
Iteration  13: 3812038.012 ops/s
Iteration  14: 3873326.348 ops/s
Iteration  15: 3827124.973 ops/s
Iteration  16: 3810190.181 ops/s
Iteration  17: 3796755.402 ops/s
Iteration  18: 3855534.364 ops/s
Iteration  19: 3932892.022 ops/s
Iteration  20: 3912903.003 ops/s
Iteration  21: 3882128.534 ops/s
Iteration  22: 3912001.730 ops/s
Iteration  23: 3886226.119 ops/s
Iteration  24: 3926131.967 ops/s
Iteration  25: 3835315.501 ops/s
Iteration  26: 3854356.749 ops/s
Iteration  27: 3844817.781 ops/s
Iteration  28: 3885921.383 ops/s
Iteration  29: 3877801.545 ops/s
Iteration  30: 3860994.568 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithMapEmptyAndTargetEmpty":
  3857353.709 ±(99.9%) 26412.599 ops/s [Average]
  (min, avg, max) = (3772101.604, 3857353.709, 3932892.022), stdev = 39533.137
  CI (99.9%): [3830941.111, 3883766.308] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_newWithMapEmptyAndTargetEmpty  thrpt   30  3857353.709 ± 26412.599  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithMapIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithMapIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 187789.560 ops/s
# Warmup Iteration   2: 341753.197 ops/s
# Warmup Iteration   3: 414712.493 ops/s
# Warmup Iteration   4: 416885.237 ops/s
# Warmup Iteration   5: 411350.232 ops/s
# Warmup Iteration   6: 372493.471 ops/s
# Warmup Iteration   7: 381921.105 ops/s
# Warmup Iteration   8: 410620.278 ops/s
# Warmup Iteration   9: 416521.926 ops/s
# Warmup Iteration  10: 413798.912 ops/s
# Warmup Iteration  11: 411681.733 ops/s
# Warmup Iteration  12: 416233.301 ops/s
# Warmup Iteration  13: 419558.792 ops/s
# Warmup Iteration  14: 423993.762 ops/s
# Warmup Iteration  15: 424482.267 ops/s
# Warmup Iteration  16: 424456.160 ops/s
# Warmup Iteration  17: 424964.257 ops/s
# Warmup Iteration  18: 424104.194 ops/s
# Warmup Iteration  19: 424511.624 ops/s
# Warmup Iteration  20: 424032.869 ops/s
# Warmup Iteration  21: 423142.474 ops/s
# Warmup Iteration  22: 422458.126 ops/s
# Warmup Iteration  23: 424929.319 ops/s
# Warmup Iteration  24: 424717.157 ops/s
# Warmup Iteration  25: 422383.211 ops/s
# Warmup Iteration  26: 423729.720 ops/s
# Warmup Iteration  27: 420801.000 ops/s
# Warmup Iteration  28: 421303.682 ops/s
# Warmup Iteration  29: 418675.672 ops/s
# Warmup Iteration  30: 420287.923 ops/s
Iteration   1: 422718.243 ops/s
Iteration   2: 422994.959 ops/s
Iteration   3: 419533.719 ops/s
Iteration   4: 419487.155 ops/s
Iteration   5: 423075.377 ops/s
Iteration   6: 420517.376 ops/s
Iteration   7: 421417.578 ops/s
Iteration   8: 423295.714 ops/s
Iteration   9: 421796.475 ops/s
Iteration  10: 423513.519 ops/s
Iteration  11: 423107.229 ops/s
Iteration  12: 422884.560 ops/s
Iteration  13: 423623.149 ops/s
Iteration  14: 422458.100 ops/s
Iteration  15: 421563.277 ops/s
Iteration  16: 419387.568 ops/s
Iteration  17: 423715.206 ops/s
Iteration  18: 422314.605 ops/s
Iteration  19: 422678.385 ops/s
Iteration  20: 420699.484 ops/s
Iteration  21: 420112.761 ops/s
Iteration  22: 421442.667 ops/s
Iteration  23: 418973.277 ops/s
Iteration  24: 422267.046 ops/s
Iteration  25: 423342.240 ops/s
Iteration  26: 422448.227 ops/s
Iteration  27: 423623.070 ops/s
Iteration  28: 420432.003 ops/s
Iteration  29: 419980.012 ops/s
Iteration  30: 423307.821 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithMapIterable":
  421890.360 ±(99.9%) 994.837 ops/s [Average]
  (min, avg, max) = (418973.277, 421890.360, 423715.206), stdev = 1489.026
  CI (99.9%): [420895.523, 422885.197] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_newWithMapIterable  thrpt   30  421890.360 ± 994.837  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithMapIterableTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithMapIterableTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 233329.528 ops/s
# Warmup Iteration   2: 471373.603 ops/s
# Warmup Iteration   3: 523955.020 ops/s
# Warmup Iteration   4: 526277.970 ops/s
# Warmup Iteration   5: 491658.504 ops/s
# Warmup Iteration   6: 482824.730 ops/s
# Warmup Iteration   7: 530779.727 ops/s
# Warmup Iteration   8: 529059.555 ops/s
# Warmup Iteration   9: 531052.907 ops/s
# Warmup Iteration  10: 532278.002 ops/s
# Warmup Iteration  11: 533271.928 ops/s
# Warmup Iteration  12: 530520.391 ops/s
# Warmup Iteration  13: 523152.863 ops/s
# Warmup Iteration  14: 517150.981 ops/s
# Warmup Iteration  15: 519598.049 ops/s
# Warmup Iteration  16: 521239.203 ops/s
# Warmup Iteration  17: 521159.021 ops/s
# Warmup Iteration  18: 523352.522 ops/s
# Warmup Iteration  19: 519417.727 ops/s
# Warmup Iteration  20: 520356.984 ops/s
# Warmup Iteration  21: 515579.624 ops/s
# Warmup Iteration  22: 520641.544 ops/s
# Warmup Iteration  23: 519577.844 ops/s
# Warmup Iteration  24: 517484.495 ops/s
# Warmup Iteration  25: 517251.618 ops/s
# Warmup Iteration  26: 518893.718 ops/s
# Warmup Iteration  27: 513933.050 ops/s
# Warmup Iteration  28: 520450.612 ops/s
# Warmup Iteration  29: 519815.806 ops/s
# Warmup Iteration  30: 516678.181 ops/s
Iteration   1: 518144.383 ops/s
Iteration   2: 527822.907 ops/s
Iteration   3: 526650.899 ops/s
Iteration   4: 520962.320 ops/s
Iteration   5: 522482.138 ops/s
Iteration   6: 517007.750 ops/s
Iteration   7: 525630.389 ops/s
Iteration   8: 518772.614 ops/s
Iteration   9: 520967.912 ops/s
Iteration  10: 520069.250 ops/s
Iteration  11: 514057.656 ops/s
Iteration  12: 520729.754 ops/s
Iteration  13: 510704.415 ops/s
Iteration  14: 515812.635 ops/s
Iteration  15: 524558.270 ops/s
Iteration  16: 516299.649 ops/s
Iteration  17: 514386.928 ops/s
Iteration  18: 525135.660 ops/s
Iteration  19: 521768.609 ops/s
Iteration  20: 519222.347 ops/s
Iteration  21: 514102.132 ops/s
Iteration  22: 522069.496 ops/s
Iteration  23: 522708.293 ops/s
Iteration  24: 531272.532 ops/s
Iteration  25: 521162.498 ops/s
Iteration  26: 515678.878 ops/s
Iteration  27: 516879.426 ops/s
Iteration  28: 515155.109 ops/s
Iteration  29: 520587.523 ops/s
Iteration  30: 516618.635 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithMapIterableTargetEmpty":
  519914.034 ±(99.9%) 3121.918 ops/s [Average]
  (min, avg, max) = (510704.415, 519914.034, 531272.532), stdev = 4672.740
  CI (99.9%): [516792.116, 523035.951] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_newWithMapIterableTargetEmpty  thrpt   30  519914.034 ± 3121.918  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithMapTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithMapTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 220712.562 ops/s
# Warmup Iteration   2: 453010.190 ops/s
# Warmup Iteration   3: 506445.122 ops/s
# Warmup Iteration   4: 511798.022 ops/s
# Warmup Iteration   5: 435406.730 ops/s
# Warmup Iteration   6: 509119.941 ops/s
# Warmup Iteration   7: 509691.009 ops/s
# Warmup Iteration   8: 507192.853 ops/s
# Warmup Iteration   9: 510730.746 ops/s
# Warmup Iteration  10: 510997.243 ops/s
# Warmup Iteration  11: 511003.690 ops/s
# Warmup Iteration  12: 506720.033 ops/s
# Warmup Iteration  13: 512333.606 ops/s
# Warmup Iteration  14: 508328.736 ops/s
# Warmup Iteration  15: 513522.407 ops/s
# Warmup Iteration  16: 514242.215 ops/s
# Warmup Iteration  17: 515972.964 ops/s
# Warmup Iteration  18: 510241.272 ops/s
# Warmup Iteration  19: 506348.778 ops/s
# Warmup Iteration  20: 511030.801 ops/s
# Warmup Iteration  21: 517141.561 ops/s
# Warmup Iteration  22: 511639.306 ops/s
# Warmup Iteration  23: 515738.172 ops/s
# Warmup Iteration  24: 521944.484 ops/s
# Warmup Iteration  25: 514741.298 ops/s
# Warmup Iteration  26: 514339.587 ops/s
# Warmup Iteration  27: 510755.560 ops/s
# Warmup Iteration  28: 510170.533 ops/s
# Warmup Iteration  29: 506014.207 ops/s
# Warmup Iteration  30: 513544.766 ops/s
Iteration   1: 508549.702 ops/s
Iteration   2: 511773.498 ops/s
Iteration   3: 512353.570 ops/s
Iteration   4: 511080.444 ops/s
Iteration   5: 516186.259 ops/s
Iteration   6: 513084.752 ops/s
Iteration   7: 513083.947 ops/s
Iteration   8: 511407.663 ops/s
Iteration   9: 515177.218 ops/s
Iteration  10: 506449.067 ops/s
Iteration  11: 513100.953 ops/s
Iteration  12: 517733.863 ops/s
Iteration  13: 510696.839 ops/s
Iteration  14: 506745.199 ops/s
Iteration  15: 516022.849 ops/s
Iteration  16: 507117.381 ops/s
Iteration  17: 513067.767 ops/s
Iteration  18: 512034.609 ops/s
Iteration  19: 498748.689 ops/s
Iteration  20: 510157.388 ops/s
Iteration  21: 513118.778 ops/s
Iteration  22: 512941.062 ops/s
Iteration  23: 508471.393 ops/s
Iteration  24: 511328.259 ops/s
Iteration  25: 504489.979 ops/s
Iteration  26: 504516.656 ops/s
Iteration  27: 503448.527 ops/s
Iteration  28: 510767.892 ops/s
Iteration  29: 505766.817 ops/s
Iteration  30: 515490.294 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithMapTargetEmpty":
  510497.044 ±(99.9%) 2890.947 ops/s [Average]
  (min, avg, max) = (498748.689, 510497.044, 517733.863), stdev = 4327.034
  CI (99.9%): [507606.097, 513387.991] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_newWithMapTargetEmpty  thrpt   30  510497.044 ± 2890.947  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithoutKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithoutKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 506044.459 ops/s
# Warmup Iteration   2: 1115314.031 ops/s
# Warmup Iteration   3: 1148491.473 ops/s
# Warmup Iteration   4: 1169436.531 ops/s
# Warmup Iteration   5: 971270.397 ops/s
# Warmup Iteration   6: 1170107.362 ops/s
# Warmup Iteration   7: 1174285.035 ops/s
# Warmup Iteration   8: 1203604.552 ops/s
# Warmup Iteration   9: 1179524.945 ops/s
# Warmup Iteration  10: 1187019.280 ops/s
# Warmup Iteration  11: 1193526.114 ops/s
# Warmup Iteration  12: 1176059.971 ops/s
# Warmup Iteration  13: 1185469.658 ops/s
# Warmup Iteration  14: 1189680.572 ops/s
# Warmup Iteration  15: 1174304.010 ops/s
# Warmup Iteration  16: 1186689.615 ops/s
# Warmup Iteration  17: 1184188.419 ops/s
# Warmup Iteration  18: 1193651.029 ops/s
# Warmup Iteration  19: 1206774.051 ops/s
# Warmup Iteration  20: 1213541.720 ops/s
# Warmup Iteration  21: 1186541.409 ops/s
# Warmup Iteration  22: 1178383.798 ops/s
# Warmup Iteration  23: 1178910.566 ops/s
# Warmup Iteration  24: 1185415.357 ops/s
# Warmup Iteration  25: 1179356.893 ops/s
# Warmup Iteration  26: 1180735.054 ops/s
# Warmup Iteration  27: 1182340.594 ops/s
# Warmup Iteration  28: 1181108.163 ops/s
# Warmup Iteration  29: 1175136.308 ops/s
# Warmup Iteration  30: 1167327.776 ops/s
Iteration   1: 1183191.984 ops/s
Iteration   2: 1171981.446 ops/s
Iteration   3: 1179005.122 ops/s
Iteration   4: 1174631.002 ops/s
Iteration   5: 1177337.809 ops/s
Iteration   6: 1193982.712 ops/s
Iteration   7: 1177951.275 ops/s
Iteration   8: 1173945.632 ops/s
Iteration   9: 1166928.995 ops/s
Iteration  10: 1176123.340 ops/s
Iteration  11: 1171984.658 ops/s
Iteration  12: 1179331.751 ops/s
Iteration  13: 1178511.747 ops/s
Iteration  14: 1191019.589 ops/s
Iteration  15: 1184730.580 ops/s
Iteration  16: 1179565.508 ops/s
Iteration  17: 1195199.805 ops/s
Iteration  18: 1184902.302 ops/s
Iteration  19: 1189670.645 ops/s
Iteration  20: 1192155.331 ops/s
Iteration  21: 1163984.596 ops/s
Iteration  22: 1173080.260 ops/s
Iteration  23: 1196662.818 ops/s
Iteration  24: 1177656.498 ops/s
Iteration  25: 1194213.941 ops/s
Iteration  26: 1181757.907 ops/s
Iteration  27: 1172299.584 ops/s
Iteration  28: 1160856.355 ops/s
Iteration  29: 1187138.062 ops/s
Iteration  30: 1180274.184 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithoutKey":
  1180335.848 ±(99.9%) 6211.884 ops/s [Average]
  (min, avg, max) = (1160856.355, 1180335.848, 1196662.818), stdev = 9297.657
  CI (99.9%): [1174123.964, 1186547.732] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_newWithoutKey  thrpt   30  1180335.848 ± 6211.884  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithoutKeys$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithoutKeys

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 310949.935 ops/s
# Warmup Iteration   2: 647615.598 ops/s
# Warmup Iteration   3: 712037.297 ops/s
# Warmup Iteration   4: 710316.783 ops/s
# Warmup Iteration   5: 592831.624 ops/s
# Warmup Iteration   6: 703395.803 ops/s
# Warmup Iteration   7: 711549.148 ops/s
# Warmup Iteration   8: 705535.139 ops/s
# Warmup Iteration   9: 706114.665 ops/s
# Warmup Iteration  10: 705234.865 ops/s
# Warmup Iteration  11: 707878.519 ops/s
# Warmup Iteration  12: 708102.284 ops/s
# Warmup Iteration  13: 711916.211 ops/s
# Warmup Iteration  14: 714896.932 ops/s
# Warmup Iteration  15: 710263.073 ops/s
# Warmup Iteration  16: 709213.335 ops/s
# Warmup Iteration  17: 701199.628 ops/s
# Warmup Iteration  18: 703287.963 ops/s
# Warmup Iteration  19: 705470.280 ops/s
# Warmup Iteration  20: 709450.303 ops/s
# Warmup Iteration  21: 708137.770 ops/s
# Warmup Iteration  22: 708977.966 ops/s
# Warmup Iteration  23: 713915.992 ops/s
# Warmup Iteration  24: 710092.430 ops/s
# Warmup Iteration  25: 718155.814 ops/s
# Warmup Iteration  26: 712772.912 ops/s
# Warmup Iteration  27: 713121.389 ops/s
# Warmup Iteration  28: 711181.875 ops/s
# Warmup Iteration  29: 716112.608 ops/s
# Warmup Iteration  30: 716461.249 ops/s
Iteration   1: 717542.332 ops/s
Iteration   2: 709266.364 ops/s
Iteration   3: 714168.711 ops/s
Iteration   4: 703516.283 ops/s
Iteration   5: 727367.112 ops/s
Iteration   6: 717692.672 ops/s
Iteration   7: 724388.060 ops/s
Iteration   8: 718077.192 ops/s
Iteration   9: 725207.810 ops/s
Iteration  10: 708209.288 ops/s
Iteration  11: 708787.778 ops/s
Iteration  12: 708786.171 ops/s
Iteration  13: 712967.845 ops/s
Iteration  14: 709992.717 ops/s
Iteration  15: 716106.256 ops/s
Iteration  16: 708276.057 ops/s
Iteration  17: 697503.393 ops/s
Iteration  18: 700703.758 ops/s
Iteration  19: 711272.813 ops/s
Iteration  20: 712057.971 ops/s
Iteration  21: 713600.346 ops/s
Iteration  22: 717297.922 ops/s
Iteration  23: 709957.704 ops/s
Iteration  24: 711524.282 ops/s
Iteration  25: 713746.915 ops/s
Iteration  26: 707988.996 ops/s
Iteration  27: 711686.098 ops/s
Iteration  28: 716213.038 ops/s
Iteration  29: 698421.858 ops/s
Iteration  30: 714007.493 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_newWithoutKeys":
  712211.174 ±(99.9%) 4669.111 ops/s [Average]
  (min, avg, max) = (697503.393, 712211.174, 727367.112), stdev = 6988.506
  CI (99.9%): [707542.064, 716880.285] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_newWithoutKeys  thrpt   30  712211.174 ± 4669.111  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7459827.313 ops/s
# Warmup Iteration   2: 16650891.669 ops/s
# Warmup Iteration   3: 18096175.909 ops/s
# Warmup Iteration   4: 15122612.867 ops/s
# Warmup Iteration   5: 18084692.707 ops/s
# Warmup Iteration   6: 18356321.533 ops/s
# Warmup Iteration   7: 18277606.232 ops/s
# Warmup Iteration   8: 18094261.187 ops/s
# Warmup Iteration   9: 18205659.389 ops/s
# Warmup Iteration  10: 18136142.402 ops/s
# Warmup Iteration  11: 18128738.965 ops/s
# Warmup Iteration  12: 17963746.138 ops/s
# Warmup Iteration  13: 18007897.921 ops/s
# Warmup Iteration  14: 18309002.663 ops/s
# Warmup Iteration  15: 18102773.010 ops/s
# Warmup Iteration  16: 18185465.748 ops/s
# Warmup Iteration  17: 18200479.223 ops/s
# Warmup Iteration  18: 18012233.334 ops/s
# Warmup Iteration  19: 18168968.538 ops/s
# Warmup Iteration  20: 18258681.415 ops/s
# Warmup Iteration  21: 18310611.156 ops/s
# Warmup Iteration  22: 18269249.750 ops/s
# Warmup Iteration  23: 18427615.457 ops/s
# Warmup Iteration  24: 18059296.953 ops/s
# Warmup Iteration  25: 18455494.678 ops/s
# Warmup Iteration  26: 18263488.192 ops/s
# Warmup Iteration  27: 18086434.677 ops/s
# Warmup Iteration  28: 18184686.621 ops/s
# Warmup Iteration  29: 18290756.011 ops/s
# Warmup Iteration  30: 18187036.972 ops/s
Iteration   1: 18341564.989 ops/s
Iteration   2: 17901552.239 ops/s
Iteration   3: 18225779.906 ops/s
Iteration   4: 18152916.926 ops/s
Iteration   5: 18209769.539 ops/s
Iteration   6: 18442232.967 ops/s
Iteration   7: 18501361.596 ops/s
Iteration   8: 18106570.335 ops/s
Iteration   9: 17946367.691 ops/s
Iteration  10: 18241943.989 ops/s
Iteration  11: 18232728.683 ops/s
Iteration  12: 18271553.850 ops/s
Iteration  13: 18607809.702 ops/s
Iteration  14: 18191853.055 ops/s
Iteration  15: 18333874.806 ops/s
Iteration  16: 18111485.863 ops/s
Iteration  17: 18101444.424 ops/s
Iteration  18: 18107398.531 ops/s
Iteration  19: 18252681.507 ops/s
Iteration  20: 18325895.757 ops/s
Iteration  21: 18294806.397 ops/s
Iteration  22: 18333515.075 ops/s
Iteration  23: 18266327.633 ops/s
Iteration  24: 18395992.488 ops/s
Iteration  25: 18138214.637 ops/s
Iteration  26: 18294588.494 ops/s
Iteration  27: 18034511.518 ops/s
Iteration  28: 18287988.974 ops/s
Iteration  29: 18357706.720 ops/s
Iteration  30: 18265137.729 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_notEmpty":
  18242519.201 ±(99.9%) 101098.988 ops/s [Average]
  (min, avg, max) = (17901552.239, 18242519.201, 18607809.702), stdev = 151320.217
  CI (99.9%): [18141420.213, 18343618.189] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score        Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_notEmpty  thrpt   30  18242519.201 ± 101098.988  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_put$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_put

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 662099.440 ops/s
# Warmup Iteration   2: 710386.522 ops/s
# Warmup Iteration   3: 923606.687 ops/s
# Warmup Iteration   4: 911901.539 ops/s
# Warmup Iteration   5: 912851.595 ops/s
# Warmup Iteration   6: 923430.481 ops/s
# Warmup Iteration   7: 909408.098 ops/s
# Warmup Iteration   8: 915843.499 ops/s
# Warmup Iteration   9: 915237.809 ops/s
# Warmup Iteration  10: 918232.842 ops/s
# Warmup Iteration  11: 826548.418 ops/s
# Warmup Iteration  12: 846168.110 ops/s
# Warmup Iteration  13: 910610.157 ops/s
# Warmup Iteration  14: 910565.498 ops/s
# Warmup Iteration  15: 921717.102 ops/s
# Warmup Iteration  16: 915659.335 ops/s
# Warmup Iteration  17: 973076.958 ops/s
# Warmup Iteration  18: 970987.185 ops/s
# Warmup Iteration  19: 973006.193 ops/s
# Warmup Iteration  20: 977421.128 ops/s
# Warmup Iteration  21: 979098.940 ops/s
# Warmup Iteration  22: 974311.512 ops/s
# Warmup Iteration  23: 979635.704 ops/s
# Warmup Iteration  24: 986741.939 ops/s
# Warmup Iteration  25: 970126.997 ops/s
# Warmup Iteration  26: 974409.083 ops/s
# Warmup Iteration  27: 979581.622 ops/s
# Warmup Iteration  28: 968128.734 ops/s
# Warmup Iteration  29: 975645.748 ops/s
# Warmup Iteration  30: 977106.894 ops/s
Iteration   1: 977000.868 ops/s
Iteration   2: 955572.458 ops/s
Iteration   3: 982342.214 ops/s
Iteration   4: 984109.923 ops/s
Iteration   5: 975422.096 ops/s
Iteration   6: 964108.441 ops/s
Iteration   7: 961223.362 ops/s
Iteration   8: 969639.864 ops/s
Iteration   9: 982297.903 ops/s
Iteration  10: 972286.456 ops/s
Iteration  11: 973128.625 ops/s
Iteration  12: 970738.716 ops/s
Iteration  13: 971456.624 ops/s
Iteration  14: 976296.202 ops/s
Iteration  15: 969714.263 ops/s
Iteration  16: 973132.167 ops/s
Iteration  17: 983378.162 ops/s
Iteration  18: 984662.020 ops/s
Iteration  19: 987767.559 ops/s
Iteration  20: 995632.472 ops/s
Iteration  21: 972893.778 ops/s
Iteration  22: 974591.888 ops/s
Iteration  23: 973510.453 ops/s
Iteration  24: 977557.332 ops/s
Iteration  25: 972715.005 ops/s
Iteration  26: 966625.108 ops/s
Iteration  27: 976522.594 ops/s
Iteration  28: 963671.058 ops/s
Iteration  29: 973237.433 ops/s
Iteration  30: 972402.553 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_put":
  974454.587 ±(99.9%) 5487.258 ops/s [Average]
  (min, avg, max) = (955572.458, 974454.587, 995632.472), stdev = 8213.070
  CI (99.9%): [968967.329, 979941.844] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_put  thrpt   30  974454.587 ± 5487.258  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_putAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_putAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 669875.547 ops/s
# Warmup Iteration   2: 703763.304 ops/s
# Warmup Iteration   3: 926992.913 ops/s
# Warmup Iteration   4: 920345.650 ops/s
# Warmup Iteration   5: 912362.078 ops/s
# Warmup Iteration   6: 913826.227 ops/s
# Warmup Iteration   7: 901953.553 ops/s
# Warmup Iteration   8: 916070.144 ops/s
# Warmup Iteration   9: 915068.790 ops/s
# Warmup Iteration  10: 912880.492 ops/s
# Warmup Iteration  11: 797120.280 ops/s
# Warmup Iteration  12: 864697.394 ops/s
# Warmup Iteration  13: 914049.473 ops/s
# Warmup Iteration  14: 915880.089 ops/s
# Warmup Iteration  15: 913618.170 ops/s
# Warmup Iteration  16: 915327.950 ops/s
# Warmup Iteration  17: 973353.255 ops/s
# Warmup Iteration  18: 967087.034 ops/s
# Warmup Iteration  19: 969055.203 ops/s
# Warmup Iteration  20: 969295.644 ops/s
# Warmup Iteration  21: 962880.542 ops/s
# Warmup Iteration  22: 974132.026 ops/s
# Warmup Iteration  23: 962712.800 ops/s
# Warmup Iteration  24: 970469.557 ops/s
# Warmup Iteration  25: 970914.998 ops/s
# Warmup Iteration  26: 971218.820 ops/s
# Warmup Iteration  27: 970988.804 ops/s
# Warmup Iteration  28: 962857.245 ops/s
# Warmup Iteration  29: 977450.599 ops/s
# Warmup Iteration  30: 973072.619 ops/s
Iteration   1: 971227.700 ops/s
Iteration   2: 964561.762 ops/s
Iteration   3: 966339.421 ops/s
Iteration   4: 975628.526 ops/s
Iteration   5: 969313.129 ops/s
Iteration   6: 971898.189 ops/s
Iteration   7: 966325.779 ops/s
Iteration   8: 951549.662 ops/s
Iteration   9: 970401.822 ops/s
Iteration  10: 977554.797 ops/s
Iteration  11: 982513.262 ops/s
Iteration  12: 971760.937 ops/s
Iteration  13: 981878.922 ops/s
Iteration  14: 987651.758 ops/s
Iteration  15: 995232.405 ops/s
Iteration  16: 975873.871 ops/s
Iteration  17: 974426.530 ops/s
Iteration  18: 979763.539 ops/s
Iteration  19: 984024.682 ops/s
Iteration  20: 972332.671 ops/s
Iteration  21: 977418.999 ops/s
Iteration  22: 978623.102 ops/s
Iteration  23: 963662.354 ops/s
Iteration  24: 967997.437 ops/s
Iteration  25: 980140.477 ops/s
Iteration  26: 966621.298 ops/s
Iteration  27: 966853.311 ops/s
Iteration  28: 971565.178 ops/s
Iteration  29: 964157.660 ops/s
Iteration  30: 963617.693 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_putAll":
  973030.562 ±(99.9%) 5807.938 ops/s [Average]
  (min, avg, max) = (951549.662, 973030.562, 995232.405), stdev = 8693.049
  CI (99.9%): [967222.624, 978838.500] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_putAll  thrpt   30  973030.562 ± 5807.938  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 667830.142 ops/s
# Warmup Iteration   2: 712751.910 ops/s
# Warmup Iteration   3: 907310.249 ops/s
# Warmup Iteration   4: 902374.315 ops/s
# Warmup Iteration   5: 906414.722 ops/s
# Warmup Iteration   6: 891132.580 ops/s
# Warmup Iteration   7: 893502.318 ops/s
# Warmup Iteration   8: 897432.012 ops/s
# Warmup Iteration   9: 897686.468 ops/s
# Warmup Iteration  10: 897377.908 ops/s
# Warmup Iteration  11: 828698.098 ops/s
# Warmup Iteration  12: 842965.467 ops/s
# Warmup Iteration  13: 902260.405 ops/s
# Warmup Iteration  14: 904838.866 ops/s
# Warmup Iteration  15: 904765.279 ops/s
# Warmup Iteration  16: 902702.436 ops/s
# Warmup Iteration  17: 954298.603 ops/s
# Warmup Iteration  18: 897756.573 ops/s
# Warmup Iteration  19: 961393.414 ops/s
# Warmup Iteration  20: 952063.639 ops/s
# Warmup Iteration  21: 956853.359 ops/s
# Warmup Iteration  22: 947556.025 ops/s
# Warmup Iteration  23: 951859.440 ops/s
# Warmup Iteration  24: 953012.975 ops/s
# Warmup Iteration  25: 959370.922 ops/s
# Warmup Iteration  26: 938293.974 ops/s
# Warmup Iteration  27: 942276.832 ops/s
# Warmup Iteration  28: 954003.066 ops/s
# Warmup Iteration  29: 945955.536 ops/s
# Warmup Iteration  30: 945575.494 ops/s
Iteration   1: 943371.942 ops/s
Iteration   2: 940848.598 ops/s
Iteration   3: 950301.757 ops/s
Iteration   4: 963667.852 ops/s
Iteration   5: 949495.645 ops/s
Iteration   6: 944473.442 ops/s
Iteration   7: 947942.260 ops/s
Iteration   8: 950023.294 ops/s
Iteration   9: 959592.258 ops/s
Iteration  10: 944393.924 ops/s
Iteration  11: 947911.875 ops/s
Iteration  12: 949470.155 ops/s
Iteration  13: 957691.719 ops/s
Iteration  14: 945876.369 ops/s
Iteration  15: 956743.304 ops/s
Iteration  16: 958265.649 ops/s
Iteration  17: 961751.336 ops/s
Iteration  18: 954533.253 ops/s
Iteration  19: 960028.741 ops/s
Iteration  20: 950538.606 ops/s
Iteration  21: 944716.378 ops/s
Iteration  22: 957990.871 ops/s
Iteration  23: 955469.821 ops/s
Iteration  24: 959125.212 ops/s
Iteration  25: 952776.719 ops/s
Iteration  26: 956799.754 ops/s
Iteration  27: 955674.371 ops/s
Iteration  28: 957454.095 ops/s
Iteration  29: 964946.408 ops/s
Iteration  30: 963724.462 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_remove":
  953520.002 ±(99.9%) 4497.051 ops/s [Average]
  (min, avg, max) = (940848.598, 953520.002, 964946.408), stdev = 6730.975
  CI (99.9%): [949022.951, 958017.053] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_remove  thrpt   30  953520.002 ± 4497.051  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5773895.779 ops/s
# Warmup Iteration   2: 13141870.808 ops/s
# Warmup Iteration   3: 10987866.283 ops/s
# Warmup Iteration   4: 13290420.110 ops/s
# Warmup Iteration   5: 13172844.956 ops/s
# Warmup Iteration   6: 13197892.272 ops/s
# Warmup Iteration   7: 13318152.571 ops/s
# Warmup Iteration   8: 13237359.709 ops/s
# Warmup Iteration   9: 13315781.898 ops/s
# Warmup Iteration  10: 13250565.518 ops/s
# Warmup Iteration  11: 13224322.892 ops/s
# Warmup Iteration  12: 13224900.237 ops/s
# Warmup Iteration  13: 13278541.538 ops/s
# Warmup Iteration  14: 13266964.838 ops/s
# Warmup Iteration  15: 13347478.892 ops/s
# Warmup Iteration  16: 13299503.664 ops/s
# Warmup Iteration  17: 13343783.669 ops/s
# Warmup Iteration  18: 13187382.886 ops/s
# Warmup Iteration  19: 13332891.229 ops/s
# Warmup Iteration  20: 13221435.678 ops/s
# Warmup Iteration  21: 13180719.809 ops/s
# Warmup Iteration  22: 13280778.259 ops/s
# Warmup Iteration  23: 13178321.085 ops/s
# Warmup Iteration  24: 13216689.456 ops/s
# Warmup Iteration  25: 13194185.832 ops/s
# Warmup Iteration  26: 13153940.282 ops/s
# Warmup Iteration  27: 13215040.820 ops/s
# Warmup Iteration  28: 13216486.372 ops/s
# Warmup Iteration  29: 13235310.716 ops/s
# Warmup Iteration  30: 13190580.075 ops/s
Iteration   1: 13328891.827 ops/s
Iteration   2: 13300361.899 ops/s
Iteration   3: 13303783.089 ops/s
Iteration   4: 13254848.189 ops/s
Iteration   5: 13141493.763 ops/s
Iteration   6: 13307888.756 ops/s
Iteration   7: 13087058.037 ops/s
Iteration   8: 13314359.537 ops/s
Iteration   9: 13076509.137 ops/s
Iteration  10: 13182150.580 ops/s
Iteration  11: 13143952.401 ops/s
Iteration  12: 13369871.564 ops/s
Iteration  13: 13271086.358 ops/s
Iteration  14: 13278603.329 ops/s
Iteration  15: 13287483.778 ops/s
Iteration  16: 13306318.677 ops/s
Iteration  17: 13189252.937 ops/s
Iteration  18: 13380024.125 ops/s
Iteration  19: 13245702.006 ops/s
Iteration  20: 13104031.452 ops/s
Iteration  21: 13174318.184 ops/s
Iteration  22: 13238880.764 ops/s
Iteration  23: 13199307.655 ops/s
Iteration  24: 13370318.483 ops/s
Iteration  25: 13316498.629 ops/s
Iteration  26: 13216987.500 ops/s
Iteration  27: 13340806.921 ops/s
Iteration  28: 13398108.199 ops/s
Iteration  29: 13172375.521 ops/s
Iteration  30: 13388135.967 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_tap":
  13256313.642 ±(99.9%) 61793.474 ops/s [Average]
  (min, avg, max) = (13076509.137, 13256313.642, 13398108.199), stdev = 92489.570
  CI (99.9%): [13194520.168, 13318107.116] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_tap  thrpt   30  13256313.642 ± 61793.474  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_testNewEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_testNewEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 160812211.873 ops/s
# Warmup Iteration   2: 300879478.042 ops/s
# Warmup Iteration   3: 248594440.949 ops/s
# Warmup Iteration   4: 289540160.280 ops/s
# Warmup Iteration   5: 288846743.247 ops/s
# Warmup Iteration   6: 292770361.072 ops/s
# Warmup Iteration   7: 288996236.191 ops/s
# Warmup Iteration   8: 289552714.413 ops/s
# Warmup Iteration   9: 290518449.831 ops/s
# Warmup Iteration  10: 291203992.727 ops/s
# Warmup Iteration  11: 290743800.775 ops/s
# Warmup Iteration  12: 289713812.446 ops/s
# Warmup Iteration  13: 288322497.128 ops/s
# Warmup Iteration  14: 288892486.837 ops/s
# Warmup Iteration  15: 288228637.587 ops/s
# Warmup Iteration  16: 288638058.763 ops/s
# Warmup Iteration  17: 290225435.629 ops/s
# Warmup Iteration  18: 286776965.797 ops/s
# Warmup Iteration  19: 293114631.363 ops/s
# Warmup Iteration  20: 291322023.613 ops/s
# Warmup Iteration  21: 287324895.343 ops/s
# Warmup Iteration  22: 289170609.843 ops/s
# Warmup Iteration  23: 291717728.942 ops/s
# Warmup Iteration  24: 288760270.643 ops/s
# Warmup Iteration  25: 290485873.909 ops/s
# Warmup Iteration  26: 289386236.381 ops/s
# Warmup Iteration  27: 290134683.204 ops/s
# Warmup Iteration  28: 292029854.990 ops/s
# Warmup Iteration  29: 291886032.023 ops/s
# Warmup Iteration  30: 288849946.914 ops/s
Iteration   1: 288910899.850 ops/s
Iteration   2: 288399602.044 ops/s
Iteration   3: 293433084.022 ops/s
Iteration   4: 290105571.031 ops/s
Iteration   5: 292077198.160 ops/s
Iteration   6: 289913627.118 ops/s
Iteration   7: 292071860.684 ops/s
Iteration   8: 292001667.566 ops/s
Iteration   9: 288702682.108 ops/s
Iteration  10: 289096040.412 ops/s
Iteration  11: 290451592.048 ops/s
Iteration  12: 289885477.007 ops/s
Iteration  13: 294014069.737 ops/s
Iteration  14: 293211899.186 ops/s
Iteration  15: 292366448.673 ops/s
Iteration  16: 290111218.326 ops/s
Iteration  17: 291462864.236 ops/s
Iteration  18: 292210392.181 ops/s
Iteration  19: 290792561.944 ops/s
Iteration  20: 290408292.499 ops/s
Iteration  21: 288472330.936 ops/s
Iteration  22: 293528233.197 ops/s
Iteration  23: 294207216.175 ops/s
Iteration  24: 293287111.200 ops/s
Iteration  25: 285109183.883 ops/s
Iteration  26: 289362453.063 ops/s
Iteration  27: 287617206.869 ops/s
Iteration  28: 292617511.634 ops/s
Iteration  29: 291236933.251 ops/s
Iteration  30: 289661124.275 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_testNewEmpty":
  290824211.777 ±(99.9%) 1426235.735 ops/s [Average]
  (min, avg, max) = (285109183.883, 290824211.777, 294207216.175), stdev = 2134722.668
  CI (99.9%): [289397976.042, 292250447.513] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt          Score         Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_testNewEmpty  thrpt   30  290824211.777 ± 1426235.735  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_testNewWithHashBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_testNewWithHashBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 713302.779 ops/s
# Warmup Iteration   2: 1792207.457 ops/s
# Warmup Iteration   3: 1822572.865 ops/s
# Warmup Iteration   4: 1501405.028 ops/s
# Warmup Iteration   5: 1840133.981 ops/s
# Warmup Iteration   6: 1844490.309 ops/s
# Warmup Iteration   7: 1836586.462 ops/s
# Warmup Iteration   8: 1793357.484 ops/s
# Warmup Iteration   9: 1812138.922 ops/s
# Warmup Iteration  10: 1808641.343 ops/s
# Warmup Iteration  11: 1829222.071 ops/s
# Warmup Iteration  12: 1837866.521 ops/s
# Warmup Iteration  13: 1793244.559 ops/s
# Warmup Iteration  14: 1801872.026 ops/s
# Warmup Iteration  15: 1801939.764 ops/s
# Warmup Iteration  16: 1826291.976 ops/s
# Warmup Iteration  17: 1811000.438 ops/s
# Warmup Iteration  18: 1822943.712 ops/s
# Warmup Iteration  19: 1822024.947 ops/s
# Warmup Iteration  20: 1814659.315 ops/s
# Warmup Iteration  21: 1842734.350 ops/s
# Warmup Iteration  22: 1816820.782 ops/s
# Warmup Iteration  23: 1823015.672 ops/s
# Warmup Iteration  24: 1823527.726 ops/s
# Warmup Iteration  25: 1786073.880 ops/s
# Warmup Iteration  26: 1831276.863 ops/s
# Warmup Iteration  27: 1828691.160 ops/s
# Warmup Iteration  28: 1792571.145 ops/s
# Warmup Iteration  29: 1812728.502 ops/s
# Warmup Iteration  30: 1780950.539 ops/s
Iteration   1: 1862871.234 ops/s
Iteration   2: 1835005.664 ops/s
Iteration   3: 1824773.903 ops/s
Iteration   4: 1825778.803 ops/s
Iteration   5: 1779512.100 ops/s
Iteration   6: 1827892.405 ops/s
Iteration   7: 1836596.136 ops/s
Iteration   8: 1826402.376 ops/s
Iteration   9: 1805301.275 ops/s
Iteration  10: 1798042.575 ops/s
Iteration  11: 1835213.708 ops/s
Iteration  12: 1826467.123 ops/s
Iteration  13: 1784909.140 ops/s
Iteration  14: 1855413.579 ops/s
Iteration  15: 1823243.398 ops/s
Iteration  16: 1802185.675 ops/s
Iteration  17: 1786075.047 ops/s
Iteration  18: 1788118.621 ops/s
Iteration  19: 1819381.528 ops/s
Iteration  20: 1823273.529 ops/s
Iteration  21: 1819538.178 ops/s
Iteration  22: 1840222.446 ops/s
Iteration  23: 1831469.405 ops/s
Iteration  24: 1838099.258 ops/s
Iteration  25: 1828976.116 ops/s
Iteration  26: 1821631.206 ops/s
Iteration  27: 1830474.466 ops/s
Iteration  28: 1809852.721 ops/s
Iteration  29: 1810869.268 ops/s
Iteration  30: 1839609.351 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_testNewWithHashBiMap":
  1821240.008 ±(99.9%) 13411.984 ops/s [Average]
  (min, avg, max) = (1779512.100, 1821240.008, 1862871.234), stdev = 20074.428
  CI (99.9%): [1807828.024, 1834651.992] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_testNewWithHashBiMap  thrpt   30  1821240.008 ± 13411.984  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_testNewWithImmutableMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_testNewWithImmutableMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3150793.226 ops/s
# Warmup Iteration   2: 5904300.394 ops/s
# Warmup Iteration   3: 6169460.280 ops/s
# Warmup Iteration   4: 6178859.693 ops/s
# Warmup Iteration   5: 5133675.293 ops/s
# Warmup Iteration   6: 6208110.129 ops/s
# Warmup Iteration   7: 6064634.526 ops/s
# Warmup Iteration   8: 6121323.641 ops/s
# Warmup Iteration   9: 6124670.683 ops/s
# Warmup Iteration  10: 6183808.328 ops/s
# Warmup Iteration  11: 6192647.894 ops/s
# Warmup Iteration  12: 6172961.226 ops/s
# Warmup Iteration  13: 6200612.554 ops/s
# Warmup Iteration  14: 6156111.959 ops/s
# Warmup Iteration  15: 6147616.692 ops/s
# Warmup Iteration  16: 6172365.940 ops/s
# Warmup Iteration  17: 6195602.314 ops/s
# Warmup Iteration  18: 6176757.936 ops/s
# Warmup Iteration  19: 6206279.432 ops/s
# Warmup Iteration  20: 6213782.617 ops/s
# Warmup Iteration  21: 6192950.009 ops/s
# Warmup Iteration  22: 6173273.497 ops/s
# Warmup Iteration  23: 6188406.043 ops/s
# Warmup Iteration  24: 6236513.015 ops/s
# Warmup Iteration  25: 6148131.471 ops/s
# Warmup Iteration  26: 6170407.915 ops/s
# Warmup Iteration  27: 6199619.167 ops/s
# Warmup Iteration  28: 6148742.651 ops/s
# Warmup Iteration  29: 6191242.568 ops/s
# Warmup Iteration  30: 6131352.015 ops/s
Iteration   1: 6220688.948 ops/s
Iteration   2: 6316427.219 ops/s
Iteration   3: 6235493.548 ops/s
Iteration   4: 6219659.969 ops/s
Iteration   5: 6185000.040 ops/s
Iteration   6: 6203087.513 ops/s
Iteration   7: 6228004.456 ops/s
Iteration   8: 6198114.302 ops/s
Iteration   9: 6223764.814 ops/s
Iteration  10: 6233039.882 ops/s
Iteration  11: 6166370.892 ops/s
Iteration  12: 6118511.554 ops/s
Iteration  13: 6191136.202 ops/s
Iteration  14: 6220253.695 ops/s
Iteration  15: 6232283.318 ops/s
Iteration  16: 6123918.439 ops/s
Iteration  17: 6192976.301 ops/s
Iteration  18: 6231731.986 ops/s
Iteration  19: 6185603.638 ops/s
Iteration  20: 6147221.836 ops/s
Iteration  21: 6214725.876 ops/s
Iteration  22: 6153284.485 ops/s
Iteration  23: 6156312.790 ops/s
Iteration  24: 6044372.605 ops/s
Iteration  25: 6118199.372 ops/s
Iteration  26: 6175726.578 ops/s
Iteration  27: 6222035.023 ops/s
Iteration  28: 6224479.053 ops/s
Iteration  29: 6159195.267 ops/s
Iteration  30: 6085852.300 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_testNewWithImmutableMap":
  6187582.397 ±(99.9%) 36045.202 ops/s [Average]
  (min, avg, max) = (6044372.605, 6187582.397, 6316427.219), stdev = 53950.766
  CI (99.9%): [6151537.195, 6223627.599] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_testNewWithImmutableMap  thrpt   30  6187582.397 ± 36045.202  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_testNewWithMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_testNewWithMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1018406.308 ops/s
# Warmup Iteration   2: 2227596.226 ops/s
# Warmup Iteration   3: 2277607.980 ops/s
# Warmup Iteration   4: 1983782.326 ops/s
# Warmup Iteration   5: 2190230.769 ops/s
# Warmup Iteration   6: 2302828.433 ops/s
# Warmup Iteration   7: 2298150.662 ops/s
# Warmup Iteration   8: 2262432.334 ops/s
# Warmup Iteration   9: 2264725.102 ops/s
# Warmup Iteration  10: 2273596.086 ops/s
# Warmup Iteration  11: 2294569.286 ops/s
# Warmup Iteration  12: 2303661.479 ops/s
# Warmup Iteration  13: 2339549.884 ops/s
# Warmup Iteration  14: 2321308.907 ops/s
# Warmup Iteration  15: 2333449.172 ops/s
# Warmup Iteration  16: 2308242.079 ops/s
# Warmup Iteration  17: 2290310.494 ops/s
# Warmup Iteration  18: 2289103.077 ops/s
# Warmup Iteration  19: 2277678.866 ops/s
# Warmup Iteration  20: 2298835.938 ops/s
# Warmup Iteration  21: 2285296.537 ops/s
# Warmup Iteration  22: 2273316.273 ops/s
# Warmup Iteration  23: 2288218.549 ops/s
# Warmup Iteration  24: 2279405.827 ops/s
# Warmup Iteration  25: 2266304.546 ops/s
# Warmup Iteration  26: 2279905.822 ops/s
# Warmup Iteration  27: 2313758.098 ops/s
# Warmup Iteration  28: 2293808.560 ops/s
# Warmup Iteration  29: 2296774.492 ops/s
# Warmup Iteration  30: 2290881.784 ops/s
Iteration   1: 2320701.077 ops/s
Iteration   2: 2248572.630 ops/s
Iteration   3: 2279212.570 ops/s
Iteration   4: 2265342.983 ops/s
Iteration   5: 2297375.617 ops/s
Iteration   6: 2267602.571 ops/s
Iteration   7: 2286704.929 ops/s
Iteration   8: 2295153.732 ops/s
Iteration   9: 2299332.102 ops/s
Iteration  10: 2259516.519 ops/s
Iteration  11: 2303014.684 ops/s
Iteration  12: 2306958.136 ops/s
Iteration  13: 2282092.994 ops/s
Iteration  14: 2282220.606 ops/s
Iteration  15: 2296846.556 ops/s
Iteration  16: 2281480.877 ops/s
Iteration  17: 2282579.737 ops/s
Iteration  18: 2273910.498 ops/s
Iteration  19: 2269668.416 ops/s
Iteration  20: 2289996.253 ops/s
Iteration  21: 2253778.755 ops/s
Iteration  22: 2261924.985 ops/s
Iteration  23: 2275554.920 ops/s
Iteration  24: 2304026.920 ops/s
Iteration  25: 2260930.006 ops/s
Iteration  26: 2268180.879 ops/s
Iteration  27: 2273375.416 ops/s
Iteration  28: 2275170.929 ops/s
Iteration  29: 2266561.582 ops/s
Iteration  30: 2277462.405 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_testNewWithMap":
  2280175.009 ±(99.9%) 11474.092 ops/s [Average]
  (min, avg, max) = (2248572.630, 2280175.009, 2320701.077), stdev = 17173.882
  CI (99.9%): [2268700.917, 2291649.102] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_testNewWithMap  thrpt   30  2280175.009 ± 11474.092  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1948981.175 ops/s
# Warmup Iteration   2: 4418580.094 ops/s
# Warmup Iteration   3: 4407383.733 ops/s
# Warmup Iteration   4: 3692019.971 ops/s
# Warmup Iteration   5: 4499390.390 ops/s
# Warmup Iteration   6: 4466026.083 ops/s
# Warmup Iteration   7: 4441536.130 ops/s
# Warmup Iteration   8: 4441803.251 ops/s
# Warmup Iteration   9: 4489005.917 ops/s
# Warmup Iteration  10: 4490173.135 ops/s
# Warmup Iteration  11: 4459404.292 ops/s
# Warmup Iteration  12: 4414719.706 ops/s
# Warmup Iteration  13: 4469613.423 ops/s
# Warmup Iteration  14: 4447495.309 ops/s
# Warmup Iteration  15: 4496169.495 ops/s
# Warmup Iteration  16: 4483115.762 ops/s
# Warmup Iteration  17: 4534354.987 ops/s
# Warmup Iteration  18: 4487821.044 ops/s
# Warmup Iteration  19: 4473685.056 ops/s
# Warmup Iteration  20: 4502313.863 ops/s
# Warmup Iteration  21: 4520584.196 ops/s
# Warmup Iteration  22: 4415542.500 ops/s
# Warmup Iteration  23: 4464569.559 ops/s
# Warmup Iteration  24: 4498321.989 ops/s
# Warmup Iteration  25: 4436359.857 ops/s
# Warmup Iteration  26: 4494576.591 ops/s
# Warmup Iteration  27: 4524836.547 ops/s
# Warmup Iteration  28: 4487099.366 ops/s
# Warmup Iteration  29: 4458334.387 ops/s
# Warmup Iteration  30: 4472077.090 ops/s
Iteration   1: 4535490.517 ops/s
Iteration   2: 4480633.346 ops/s
Iteration   3: 4502957.236 ops/s
Iteration   4: 4457766.648 ops/s
Iteration   5: 4503369.481 ops/s
Iteration   6: 4415304.011 ops/s
Iteration   7: 4442527.536 ops/s
Iteration   8: 4506705.272 ops/s
Iteration   9: 4529808.289 ops/s
Iteration  10: 4524133.617 ops/s
Iteration  11: 4465203.604 ops/s
Iteration  12: 4499396.432 ops/s
Iteration  13: 4487769.560 ops/s
Iteration  14: 4476911.493 ops/s
Iteration  15: 4486887.408 ops/s
Iteration  16: 4495621.370 ops/s
Iteration  17: 4493076.175 ops/s
Iteration  18: 4517169.846 ops/s
Iteration  19: 4432169.255 ops/s
Iteration  20: 4429460.972 ops/s
Iteration  21: 4439547.433 ops/s
Iteration  22: 4466103.165 ops/s
Iteration  23: 4489492.115 ops/s
Iteration  24: 4488385.949 ops/s
Iteration  25: 4418453.642 ops/s
Iteration  26: 4502531.944 ops/s
Iteration  27: 4422597.430 ops/s
Iteration  28: 4480024.972 ops/s
Iteration  29: 4472132.425 ops/s
Iteration  30: 4454673.731 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_testToString":
  4477210.162 ±(99.9%) 22462.431 ops/s [Average]
  (min, avg, max) = (4415304.011, 4477210.162, 4535490.517), stdev = 33620.712
  CI (99.9%): [4454747.731, 4499672.594] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_testToString  thrpt   30  4477210.162 ± 22462.431  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3675877.604 ops/s
# Warmup Iteration   2: 8117822.509 ops/s
# Warmup Iteration   3: 8183873.312 ops/s
# Warmup Iteration   4: 6853820.114 ops/s
# Warmup Iteration   5: 8166674.776 ops/s
# Warmup Iteration   6: 8097375.099 ops/s
# Warmup Iteration   7: 8257504.707 ops/s
# Warmup Iteration   8: 8094409.767 ops/s
# Warmup Iteration   9: 8103729.547 ops/s
# Warmup Iteration  10: 8150969.357 ops/s
# Warmup Iteration  11: 8193348.752 ops/s
# Warmup Iteration  12: 8244659.043 ops/s
# Warmup Iteration  13: 8224246.015 ops/s
# Warmup Iteration  14: 8208281.853 ops/s
# Warmup Iteration  15: 8117549.408 ops/s
# Warmup Iteration  16: 8219734.452 ops/s
# Warmup Iteration  17: 8214064.788 ops/s
# Warmup Iteration  18: 8246227.822 ops/s
# Warmup Iteration  19: 8170574.713 ops/s
# Warmup Iteration  20: 8219692.070 ops/s
# Warmup Iteration  21: 8121269.337 ops/s
# Warmup Iteration  22: 8163651.788 ops/s
# Warmup Iteration  23: 8171212.453 ops/s
# Warmup Iteration  24: 8226290.817 ops/s
# Warmup Iteration  25: 8143559.438 ops/s
# Warmup Iteration  26: 8221006.789 ops/s
# Warmup Iteration  27: 8099403.926 ops/s
# Warmup Iteration  28: 8200883.908 ops/s
# Warmup Iteration  29: 8313945.906 ops/s
# Warmup Iteration  30: 8152194.674 ops/s
Iteration   1: 8152038.766 ops/s
Iteration   2: 8042051.418 ops/s
Iteration   3: 8172127.687 ops/s
Iteration   4: 8052261.173 ops/s
Iteration   5: 8225064.541 ops/s
Iteration   6: 8208731.765 ops/s
Iteration   7: 8160660.061 ops/s
Iteration   8: 8131189.252 ops/s
Iteration   9: 7993299.143 ops/s
Iteration  10: 8086082.432 ops/s
Iteration  11: 8202478.145 ops/s
Iteration  12: 8194390.052 ops/s
Iteration  13: 8134026.413 ops/s
Iteration  14: 8134258.220 ops/s
Iteration  15: 8116775.873 ops/s
Iteration  16: 8077158.225 ops/s
Iteration  17: 8268231.079 ops/s
Iteration  18: 8102864.747 ops/s
Iteration  19: 8233480.913 ops/s
Iteration  20: 8062765.450 ops/s
Iteration  21: 8098637.534 ops/s
Iteration  22: 8017882.810 ops/s
Iteration  23: 8095360.997 ops/s
Iteration  24: 8258385.607 ops/s
Iteration  25: 8210381.273 ops/s
Iteration  26: 8144784.747 ops/s
Iteration  27: 8171180.345 ops/s
Iteration  28: 7996620.541 ops/s
Iteration  29: 8023854.462 ops/s
Iteration  30: 8013832.940 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_toImmutable":
  8126028.554 ±(99.9%) 52927.593 ops/s [Average]
  (min, avg, max) = (7993299.143, 8126028.554, 8268231.079), stdev = 79219.536
  CI (99.9%): [8073100.961, 8178956.147] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_toImmutable  thrpt   30  8126028.554 ± 52927.593  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_toMapTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_toMapTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3325644.023 ops/s
# Warmup Iteration   2: 7284857.801 ops/s
# Warmup Iteration   3: 7336543.941 ops/s
# Warmup Iteration   4: 6473330.933 ops/s
# Warmup Iteration   5: 7297535.345 ops/s
# Warmup Iteration   6: 7460948.012 ops/s
# Warmup Iteration   7: 7331958.249 ops/s
# Warmup Iteration   8: 7421861.570 ops/s
# Warmup Iteration   9: 7521613.553 ops/s
# Warmup Iteration  10: 7506203.640 ops/s
# Warmup Iteration  11: 7462832.468 ops/s
# Warmup Iteration  12: 7514151.969 ops/s
# Warmup Iteration  13: 7419232.944 ops/s
# Warmup Iteration  14: 7399353.321 ops/s
# Warmup Iteration  15: 7441883.800 ops/s
# Warmup Iteration  16: 7481844.002 ops/s
# Warmup Iteration  17: 7405532.532 ops/s
# Warmup Iteration  18: 7337073.299 ops/s
# Warmup Iteration  19: 7383032.953 ops/s
# Warmup Iteration  20: 7407703.352 ops/s
# Warmup Iteration  21: 7447296.970 ops/s
# Warmup Iteration  22: 7425855.335 ops/s
# Warmup Iteration  23: 7336973.340 ops/s
# Warmup Iteration  24: 7359587.502 ops/s
# Warmup Iteration  25: 7456771.163 ops/s
# Warmup Iteration  26: 7387865.226 ops/s
# Warmup Iteration  27: 7553280.162 ops/s
# Warmup Iteration  28: 7436167.222 ops/s
# Warmup Iteration  29: 7368459.720 ops/s
# Warmup Iteration  30: 7418115.378 ops/s
Iteration   1: 7290139.201 ops/s
Iteration   2: 7369254.349 ops/s
Iteration   3: 7363582.269 ops/s
Iteration   4: 7699462.222 ops/s
Iteration   5: 7728276.996 ops/s
Iteration   6: 7607587.103 ops/s
Iteration   7: 7285322.396 ops/s
Iteration   8: 7457890.976 ops/s
Iteration   9: 7351682.620 ops/s
Iteration  10: 7348345.520 ops/s
Iteration  11: 7266629.510 ops/s
Iteration  12: 7468454.089 ops/s
Iteration  13: 7534763.537 ops/s
Iteration  14: 7446495.899 ops/s
Iteration  15: 7474071.501 ops/s
Iteration  16: 7369532.327 ops/s
Iteration  17: 7401530.268 ops/s
Iteration  18: 7306505.780 ops/s
Iteration  19: 7441317.218 ops/s
Iteration  20: 7385421.598 ops/s
Iteration  21: 7485744.839 ops/s
Iteration  22: 7241315.808 ops/s
Iteration  23: 7517572.264 ops/s
Iteration  24: 7531910.767 ops/s
Iteration  25: 7371732.098 ops/s
Iteration  26: 7286218.334 ops/s
Iteration  27: 7514417.482 ops/s
Iteration  28: 7395521.639 ops/s
Iteration  29: 7189515.300 ops/s
Iteration  30: 7294401.439 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_toMapTarget":
  7414153.845 ±(99.9%) 85624.469 ops/s [Average]
  (min, avg, max) = (7189515.300, 7414153.845, 7728276.996), stdev = 128158.684
  CI (99.9%): [7328529.376, 7499778.314] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_toMapTarget  thrpt   30  7414153.845 ± 85624.469  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_valuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_valuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1343578.231 ops/s
# Warmup Iteration   2: 3812428.144 ops/s
# Warmup Iteration   3: 3692996.811 ops/s
# Warmup Iteration   4: 3064077.316 ops/s
# Warmup Iteration   5: 3735643.919 ops/s
# Warmup Iteration   6: 3710884.229 ops/s
# Warmup Iteration   7: 3703236.229 ops/s
# Warmup Iteration   8: 3714737.824 ops/s
# Warmup Iteration   9: 3727918.524 ops/s
# Warmup Iteration  10: 3701122.261 ops/s
# Warmup Iteration  11: 3692142.284 ops/s
# Warmup Iteration  12: 3783526.772 ops/s
# Warmup Iteration  13: 3742533.092 ops/s
# Warmup Iteration  14: 3726718.507 ops/s
# Warmup Iteration  15: 3769494.524 ops/s
# Warmup Iteration  16: 3765566.716 ops/s
# Warmup Iteration  17: 3712505.793 ops/s
# Warmup Iteration  18: 3751727.310 ops/s
# Warmup Iteration  19: 3755051.816 ops/s
# Warmup Iteration  20: 3705845.053 ops/s
# Warmup Iteration  21: 3690680.957 ops/s
# Warmup Iteration  22: 3716641.678 ops/s
# Warmup Iteration  23: 3750444.788 ops/s
# Warmup Iteration  24: 3784834.731 ops/s
# Warmup Iteration  25: 3740130.962 ops/s
# Warmup Iteration  26: 3726994.766 ops/s
# Warmup Iteration  27: 3750085.708 ops/s
# Warmup Iteration  28: 3764327.289 ops/s
# Warmup Iteration  29: 3721433.619 ops/s
# Warmup Iteration  30: 3747836.243 ops/s
Iteration   1: 3757207.418 ops/s
Iteration   2: 3728473.944 ops/s
Iteration   3: 3752332.338 ops/s
Iteration   4: 3781661.624 ops/s
Iteration   5: 3727693.413 ops/s
Iteration   6: 3760839.479 ops/s
Iteration   7: 3735797.797 ops/s
Iteration   8: 3707839.361 ops/s
Iteration   9: 3788061.169 ops/s
Iteration  10: 3729950.172 ops/s
Iteration  11: 3744763.064 ops/s
Iteration  12: 3753467.146 ops/s
Iteration  13: 3747199.443 ops/s
Iteration  14: 3771376.972 ops/s
Iteration  15: 3756231.548 ops/s
Iteration  16: 3712751.147 ops/s
Iteration  17: 3741992.776 ops/s
Iteration  18: 3741667.519 ops/s
Iteration  19: 3712059.875 ops/s
Iteration  20: 3716881.349 ops/s
Iteration  21: 3750845.683 ops/s
Iteration  22: 3682700.894 ops/s
Iteration  23: 3745818.156 ops/s
Iteration  24: 3726401.301 ops/s
Iteration  25: 3694504.864 ops/s
Iteration  26: 3742732.245 ops/s
Iteration  27: 3723284.453 ops/s
Iteration  28: 3730370.039 ops/s
Iteration  29: 3745979.771 ops/s
Iteration  30: 3807758.996 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_valuesView":
  3740621.465 ±(99.9%) 17814.518 ops/s [Average]
  (min, avg, max) = (3682700.894, 3740621.465, 3807758.996), stdev = 26663.934
  CI (99.9%): [3722806.947, 3758435.984] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_valuesView  thrpt   30  3740621.465 ± 17814.518  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 236558.043 ops/s
# Warmup Iteration   2: 466459.021 ops/s
# Warmup Iteration   3: 520594.208 ops/s
# Warmup Iteration   4: 524208.715 ops/s
# Warmup Iteration   5: 496613.272 ops/s
# Warmup Iteration   6: 466854.277 ops/s
# Warmup Iteration   7: 526609.977 ops/s
# Warmup Iteration   8: 523765.519 ops/s
# Warmup Iteration   9: 523525.797 ops/s
# Warmup Iteration  10: 520830.388 ops/s
# Warmup Iteration  11: 518669.781 ops/s
# Warmup Iteration  12: 521773.313 ops/s
# Warmup Iteration  13: 523364.772 ops/s
# Warmup Iteration  14: 518644.381 ops/s
# Warmup Iteration  15: 526578.959 ops/s
# Warmup Iteration  16: 523721.313 ops/s
# Warmup Iteration  17: 526449.644 ops/s
# Warmup Iteration  18: 517712.713 ops/s
# Warmup Iteration  19: 521890.537 ops/s
# Warmup Iteration  20: 522509.881 ops/s
# Warmup Iteration  21: 520693.879 ops/s
# Warmup Iteration  22: 526616.648 ops/s
# Warmup Iteration  23: 516682.720 ops/s
# Warmup Iteration  24: 527514.961 ops/s
# Warmup Iteration  25: 520044.552 ops/s
# Warmup Iteration  26: 517043.492 ops/s
# Warmup Iteration  27: 529486.495 ops/s
# Warmup Iteration  28: 521352.944 ops/s
# Warmup Iteration  29: 518103.654 ops/s
# Warmup Iteration  30: 523631.987 ops/s
Iteration   1: 525842.469 ops/s
Iteration   2: 525793.338 ops/s
Iteration   3: 527158.916 ops/s
Iteration   4: 528726.510 ops/s
Iteration   5: 522114.854 ops/s
Iteration   6: 523493.576 ops/s
Iteration   7: 520929.171 ops/s
Iteration   8: 532482.633 ops/s
Iteration   9: 535216.687 ops/s
Iteration  10: 521554.149 ops/s
Iteration  11: 523163.644 ops/s
Iteration  12: 522295.555 ops/s
Iteration  13: 520361.823 ops/s
Iteration  14: 522453.996 ops/s
Iteration  15: 522838.481 ops/s
Iteration  16: 524071.014 ops/s
Iteration  17: 526124.110 ops/s
Iteration  18: 516797.364 ops/s
Iteration  19: 520934.916 ops/s
Iteration  20: 527034.468 ops/s
Iteration  21: 529323.208 ops/s
Iteration  22: 521475.103 ops/s
Iteration  23: 527495.113 ops/s
Iteration  24: 525311.092 ops/s
Iteration  25: 530453.826 ops/s
Iteration  26: 523593.212 ops/s
Iteration  27: 522368.377 ops/s
Iteration  28: 522725.584 ops/s
Iteration  29: 520480.438 ops/s
Iteration  30: 519444.102 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty":
  524401.924 ±(99.9%) 2702.651 ops/s [Average]
  (min, avg, max) = (516797.364, 524401.924, 535216.687), stdev = 4045.202
  CI (99.9%): [521699.273, 527104.576] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty  thrpt   30  524401.924 ± 2702.651  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_withMapIterableNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_withMapIterableNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 45610.122 ops/s
# Warmup Iteration   2: 47605.459 ops/s
# Warmup Iteration   3: 47606.511 ops/s
# Warmup Iteration   4: 47161.489 ops/s
# Warmup Iteration   5: 48100.673 ops/s
# Warmup Iteration   6: 46489.889 ops/s
# Warmup Iteration   7: 46792.271 ops/s
# Warmup Iteration   8: 47579.908 ops/s
# Warmup Iteration   9: 46943.795 ops/s
# Warmup Iteration  10: 46631.978 ops/s
# Warmup Iteration  11: 46756.059 ops/s
# Warmup Iteration  12: 46816.623 ops/s
# Warmup Iteration  13: 47029.312 ops/s
# Warmup Iteration  14: 46664.798 ops/s
# Warmup Iteration  15: 48760.016 ops/s
# Warmup Iteration  16: 48812.991 ops/s
# Warmup Iteration  17: 49027.289 ops/s
# Warmup Iteration  18: 48932.092 ops/s
# Warmup Iteration  19: 48963.609 ops/s
# Warmup Iteration  20: 48591.532 ops/s
# Warmup Iteration  21: 48651.280 ops/s
# Warmup Iteration  22: 48601.523 ops/s
# Warmup Iteration  23: 48554.326 ops/s
# Warmup Iteration  24: 48664.992 ops/s
# Warmup Iteration  25: 49275.885 ops/s
# Warmup Iteration  26: 49531.760 ops/s
# Warmup Iteration  27: 49340.782 ops/s
# Warmup Iteration  28: 49286.680 ops/s
# Warmup Iteration  29: 49724.489 ops/s
# Warmup Iteration  30: 49566.198 ops/s
Iteration   1: 49131.499 ops/s
Iteration   2: 48792.671 ops/s
Iteration   3: 48915.839 ops/s
Iteration   4: 48910.733 ops/s
Iteration   5: 49563.373 ops/s
Iteration   6: 49152.014 ops/s
Iteration   7: 49550.572 ops/s
Iteration   8: 49049.989 ops/s
Iteration   9: 49189.644 ops/s
Iteration  10: 49048.451 ops/s
Iteration  11: 49270.223 ops/s
Iteration  12: 49355.312 ops/s
Iteration  13: 49276.273 ops/s
Iteration  14: 49247.077 ops/s
Iteration  15: 48622.477 ops/s
Iteration  16: 49495.282 ops/s
Iteration  17: 49394.149 ops/s
Iteration  18: 49198.038 ops/s
Iteration  19: 48637.125 ops/s
Iteration  20: 49136.220 ops/s
Iteration  21: 49684.640 ops/s
Iteration  22: 49733.606 ops/s
Iteration  23: 49478.858 ops/s
Iteration  24: 48437.946 ops/s
Iteration  25: 49533.028 ops/s
Iteration  26: 49908.066 ops/s
Iteration  27: 49885.651 ops/s
Iteration  28: 49879.919 ops/s
Iteration  29: 50036.623 ops/s
Iteration  30: 49550.716 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_withMapIterableNull":
  49302.200 ±(99.9%) 268.584 ops/s [Average]
  (min, avg, max) = (48437.946, 49302.200, 50036.623), stdev = 402.004
  CI (99.9%): [49033.616, 49570.785] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt      Score     Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_withMapIterableNull  thrpt   30  49302.200 ± 268.584  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_withMapNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_withMapNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 853280.764 ops/s
# Warmup Iteration   2: 1650945.286 ops/s
# Warmup Iteration   3: 1842967.889 ops/s
# Warmup Iteration   4: 1857476.113 ops/s
# Warmup Iteration   5: 1546471.348 ops/s
# Warmup Iteration   6: 1860573.217 ops/s
# Warmup Iteration   7: 1864414.084 ops/s
# Warmup Iteration   8: 1859599.545 ops/s
# Warmup Iteration   9: 1858094.329 ops/s
# Warmup Iteration  10: 1862803.525 ops/s
# Warmup Iteration  11: 1860698.144 ops/s
# Warmup Iteration  12: 1853575.818 ops/s
# Warmup Iteration  13: 1861712.659 ops/s
# Warmup Iteration  14: 1839964.107 ops/s
# Warmup Iteration  15: 1843778.886 ops/s
# Warmup Iteration  16: 1855223.247 ops/s
# Warmup Iteration  17: 1846113.659 ops/s
# Warmup Iteration  18: 1851574.880 ops/s
# Warmup Iteration  19: 1855805.249 ops/s
# Warmup Iteration  20: 1831388.753 ops/s
# Warmup Iteration  21: 1839755.715 ops/s
# Warmup Iteration  22: 1836924.977 ops/s
# Warmup Iteration  23: 1840407.398 ops/s
# Warmup Iteration  24: 1840092.886 ops/s
# Warmup Iteration  25: 1842451.157 ops/s
# Warmup Iteration  26: 1841284.877 ops/s
# Warmup Iteration  27: 1843196.197 ops/s
# Warmup Iteration  28: 1849586.328 ops/s
# Warmup Iteration  29: 1852389.633 ops/s
# Warmup Iteration  30: 1850026.545 ops/s
Iteration   1: 1845014.509 ops/s
Iteration   2: 1855844.724 ops/s
Iteration   3: 1839299.786 ops/s
Iteration   4: 1852356.672 ops/s
Iteration   5: 1848097.537 ops/s
Iteration   6: 1855465.473 ops/s
Iteration   7: 1859265.494 ops/s
Iteration   8: 1837570.850 ops/s
Iteration   9: 1838501.899 ops/s
Iteration  10: 1848074.740 ops/s
Iteration  11: 1856365.179 ops/s
Iteration  12: 1846894.358 ops/s
Iteration  13: 1846526.657 ops/s
Iteration  14: 1826739.125 ops/s
Iteration  15: 1846198.748 ops/s
Iteration  16: 1854648.723 ops/s
Iteration  17: 1849150.393 ops/s
Iteration  18: 1851524.697 ops/s
Iteration  19: 1834917.296 ops/s
Iteration  20: 1847028.259 ops/s
Iteration  21: 1833820.944 ops/s
Iteration  22: 1848185.222 ops/s
Iteration  23: 1848679.708 ops/s
Iteration  24: 1855851.956 ops/s
Iteration  25: 1849671.786 ops/s
Iteration  26: 1843188.293 ops/s
Iteration  27: 1832449.598 ops/s
Iteration  28: 1841234.630 ops/s
Iteration  29: 1855623.425 ops/s
Iteration  30: 1843199.832 ops/s


Result "org.eclipse.collections.impl.bimap.immutable.ImmutableHashBiMapTest._Benchmark.benchmark_withMapNull":
  1846379.684 ±(99.9%) 5385.904 ops/s [Average]
  (min, avg, max) = (1826739.125, 1846379.684, 1859265.494), stdev = 8061.368
  CI (99.9%): [1840993.780, 1851765.587] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableHashBiMapTest._Benchmark.benchmark_withMapNull  thrpt   30  1846379.684 ± 5385.904  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 565764.641 ops/s
# Warmup Iteration   2: 721235.397 ops/s
# Warmup Iteration   3: 877540.689 ops/s
# Warmup Iteration   4: 880594.645 ops/s
# Warmup Iteration   5: 880105.987 ops/s
# Warmup Iteration   6: 873324.904 ops/s
# Warmup Iteration   7: 858867.775 ops/s
# Warmup Iteration   8: 781157.644 ops/s
# Warmup Iteration   9: 839096.416 ops/s
# Warmup Iteration  10: 880039.325 ops/s
# Warmup Iteration  11: 879933.707 ops/s
# Warmup Iteration  12: 881325.044 ops/s
# Warmup Iteration  13: 880631.254 ops/s
# Warmup Iteration  14: 882033.132 ops/s
# Warmup Iteration  15: 877300.441 ops/s
# Warmup Iteration  16: 879424.069 ops/s
# Warmup Iteration  17: 932779.506 ops/s
# Warmup Iteration  18: 929398.130 ops/s
# Warmup Iteration  19: 932300.751 ops/s
# Warmup Iteration  20: 932243.162 ops/s
# Warmup Iteration  21: 928898.104 ops/s
# Warmup Iteration  22: 923786.909 ops/s
# Warmup Iteration  23: 930459.217 ops/s
# Warmup Iteration  24: 925494.217 ops/s
# Warmup Iteration  25: 929268.697 ops/s
# Warmup Iteration  26: 923808.812 ops/s
# Warmup Iteration  27: 932796.515 ops/s
# Warmup Iteration  28: 931361.064 ops/s
# Warmup Iteration  29: 929955.303 ops/s
# Warmup Iteration  30: 927942.919 ops/s
Iteration   1: 932893.758 ops/s
Iteration   2: 928187.915 ops/s
Iteration   3: 936176.949 ops/s
Iteration   4: 929679.033 ops/s
Iteration   5: 928845.913 ops/s
Iteration   6: 935657.654 ops/s
Iteration   7: 931611.832 ops/s
Iteration   8: 930118.856 ops/s
Iteration   9: 930543.810 ops/s
Iteration  10: 935204.443 ops/s
Iteration  11: 935823.539 ops/s
Iteration  12: 935004.572 ops/s
Iteration  13: 938151.819 ops/s
Iteration  14: 936408.180 ops/s
Iteration  15: 937678.246 ops/s
Iteration  16: 938783.182 ops/s
Iteration  17: 924173.916 ops/s
Iteration  18: 916478.453 ops/s
Iteration  19: 918282.223 ops/s
Iteration  20: 902121.171 ops/s
Iteration  21: 914517.335 ops/s
Iteration  22: 916685.717 ops/s
Iteration  23: 919094.618 ops/s
Iteration  24: 903645.474 ops/s
Iteration  25: 919178.547 ops/s
Iteration  26: 917329.415 ops/s
Iteration  27: 914832.859 ops/s
Iteration  28: 917019.102 ops/s
Iteration  29: 919307.593 ops/s
Iteration  30: 907037.554 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_add":
  925015.789 ±(99.9%) 7180.949 ops/s [Average]
  (min, avg, max) = (902121.171, 925015.789, 938783.182), stdev = 10748.108
  CI (99.9%): [917834.840, 932196.739] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
HashBiMapInverseKeySetTest._Benchmark.benchmark_add  thrpt   30  925015.789 ± 7180.949  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 503683.926 ops/s
# Warmup Iteration   2: 598281.833 ops/s
# Warmup Iteration   3: 755471.639 ops/s
# Warmup Iteration   4: 753381.018 ops/s
# Warmup Iteration   5: 755433.581 ops/s
# Warmup Iteration   6: 754284.133 ops/s
# Warmup Iteration   7: 751479.755 ops/s
# Warmup Iteration   8: 767234.066 ops/s
# Warmup Iteration   9: 652486.251 ops/s
# Warmup Iteration  10: 731296.132 ops/s
# Warmup Iteration  11: 765232.948 ops/s
# Warmup Iteration  12: 760764.765 ops/s
# Warmup Iteration  13: 753384.156 ops/s
# Warmup Iteration  14: 744914.555 ops/s
# Warmup Iteration  15: 758438.926 ops/s
# Warmup Iteration  16: 770660.897 ops/s
# Warmup Iteration  17: 795895.077 ops/s
# Warmup Iteration  18: 794438.095 ops/s
# Warmup Iteration  19: 792639.641 ops/s
# Warmup Iteration  20: 791908.524 ops/s
# Warmup Iteration  21: 797337.161 ops/s
# Warmup Iteration  22: 799408.263 ops/s
# Warmup Iteration  23: 796375.981 ops/s
# Warmup Iteration  24: 799780.798 ops/s
# Warmup Iteration  25: 801446.781 ops/s
# Warmup Iteration  26: 798027.093 ops/s
# Warmup Iteration  27: 797857.218 ops/s
# Warmup Iteration  28: 805822.112 ops/s
# Warmup Iteration  29: 802235.749 ops/s
# Warmup Iteration  30: 797999.228 ops/s
Iteration   1: 814138.685 ops/s
Iteration   2: 800645.585 ops/s
Iteration   3: 800118.622 ops/s
Iteration   4: 781679.427 ops/s
Iteration   5: 799367.303 ops/s
Iteration   6: 784998.830 ops/s
Iteration   7: 782734.509 ops/s
Iteration   8: 791808.706 ops/s
Iteration   9: 784087.170 ops/s
Iteration  10: 791231.997 ops/s
Iteration  11: 785678.327 ops/s
Iteration  12: 794565.862 ops/s
Iteration  13: 807765.027 ops/s
Iteration  14: 793517.817 ops/s
Iteration  15: 786239.412 ops/s
Iteration  16: 800962.812 ops/s
Iteration  17: 800766.992 ops/s
Iteration  18: 791565.883 ops/s
Iteration  19: 819450.614 ops/s
Iteration  20: 818195.768 ops/s
Iteration  21: 814128.863 ops/s
Iteration  22: 820030.096 ops/s
Iteration  23: 820134.276 ops/s
Iteration  24: 798029.913 ops/s
Iteration  25: 795678.448 ops/s
Iteration  26: 796953.675 ops/s
Iteration  27: 784837.113 ops/s
Iteration  28: 802194.945 ops/s
Iteration  29: 789140.324 ops/s
Iteration  30: 799377.518 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_addAll":
  798334.151 ±(99.9%) 7917.794 ops/s [Average]
  (min, avg, max) = (781679.427, 798334.151, 820134.276), stdev = 11850.983
  CI (99.9%): [790416.356, 806251.945] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
HashBiMapInverseKeySetTest._Benchmark.benchmark_addAll  thrpt   30  798334.151 ± 7917.794  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_clearKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_clearKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1361983.167 ops/s
# Warmup Iteration   2: 3139819.226 ops/s
# Warmup Iteration   3: 3098141.795 ops/s
# Warmup Iteration   4: 2586611.856 ops/s
# Warmup Iteration   5: 3123286.294 ops/s
# Warmup Iteration   6: 3089309.835 ops/s
# Warmup Iteration   7: 3118862.236 ops/s
# Warmup Iteration   8: 3137484.242 ops/s
# Warmup Iteration   9: 3178582.868 ops/s
# Warmup Iteration  10: 3168571.576 ops/s
# Warmup Iteration  11: 3089989.703 ops/s
# Warmup Iteration  12: 3081054.621 ops/s
# Warmup Iteration  13: 3112686.882 ops/s
# Warmup Iteration  14: 3117335.561 ops/s
# Warmup Iteration  15: 3084441.790 ops/s
# Warmup Iteration  16: 3117169.435 ops/s
# Warmup Iteration  17: 3103289.045 ops/s
# Warmup Iteration  18: 3099309.537 ops/s
# Warmup Iteration  19: 3108175.576 ops/s
# Warmup Iteration  20: 3179622.080 ops/s
# Warmup Iteration  21: 3166478.945 ops/s
# Warmup Iteration  22: 3126734.640 ops/s
# Warmup Iteration  23: 3098558.810 ops/s
# Warmup Iteration  24: 3093186.990 ops/s
# Warmup Iteration  25: 3147745.325 ops/s
# Warmup Iteration  26: 3177761.412 ops/s
# Warmup Iteration  27: 3126215.979 ops/s
# Warmup Iteration  28: 3106203.157 ops/s
# Warmup Iteration  29: 3137662.995 ops/s
# Warmup Iteration  30: 3125457.465 ops/s
Iteration   1: 3059628.458 ops/s
Iteration   2: 3149083.170 ops/s
Iteration   3: 3135814.389 ops/s
Iteration   4: 3054901.760 ops/s
Iteration   5: 3124965.854 ops/s
Iteration   6: 3115785.262 ops/s
Iteration   7: 3078901.831 ops/s
Iteration   8: 3089055.509 ops/s
Iteration   9: 3104549.330 ops/s
Iteration  10: 3118334.550 ops/s
Iteration  11: 3135093.349 ops/s
Iteration  12: 3103106.208 ops/s
Iteration  13: 3109032.370 ops/s
Iteration  14: 3094510.737 ops/s
Iteration  15: 3098718.900 ops/s
Iteration  16: 3098888.692 ops/s
Iteration  17: 3070743.232 ops/s
Iteration  18: 3105993.489 ops/s
Iteration  19: 3104741.015 ops/s
Iteration  20: 3083219.615 ops/s
Iteration  21: 3088566.701 ops/s
Iteration  22: 3117961.915 ops/s
Iteration  23: 3112102.706 ops/s
Iteration  24: 3114618.152 ops/s
Iteration  25: 3105656.477 ops/s
Iteration  26: 3130756.032 ops/s
Iteration  27: 3139548.820 ops/s
Iteration  28: 3133183.292 ops/s
Iteration  29: 3103760.128 ops/s
Iteration  30: 3134568.667 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_clearKeySet":
  3107193.020 ±(99.9%) 15602.250 ops/s [Average]
  (min, avg, max) = (3054901.760, 3107193.020, 3149083.170), stdev = 23352.715
  CI (99.9%): [3091590.771, 3122795.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
HashBiMapInverseKeySetTest._Benchmark.benchmark_clearKeySet  thrpt   30  3107193.020 ± 15602.250  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1790556.951 ops/s
# Warmup Iteration   2: 4173873.776 ops/s
# Warmup Iteration   3: 4221615.232 ops/s
# Warmup Iteration   4: 3458230.468 ops/s
# Warmup Iteration   5: 4198912.729 ops/s
# Warmup Iteration   6: 4157258.770 ops/s
# Warmup Iteration   7: 4184502.066 ops/s
# Warmup Iteration   8: 4242484.773 ops/s
# Warmup Iteration   9: 4176038.617 ops/s
# Warmup Iteration  10: 4214466.806 ops/s
# Warmup Iteration  11: 4127001.075 ops/s
# Warmup Iteration  12: 4234144.871 ops/s
# Warmup Iteration  13: 4205974.789 ops/s
# Warmup Iteration  14: 4169046.191 ops/s
# Warmup Iteration  15: 4221008.882 ops/s
# Warmup Iteration  16: 4234496.591 ops/s
# Warmup Iteration  17: 4201107.647 ops/s
# Warmup Iteration  18: 4224174.818 ops/s
# Warmup Iteration  19: 4225138.273 ops/s
# Warmup Iteration  20: 4228443.014 ops/s
# Warmup Iteration  21: 4177971.832 ops/s
# Warmup Iteration  22: 4187522.126 ops/s
# Warmup Iteration  23: 4223971.300 ops/s
# Warmup Iteration  24: 4188627.938 ops/s
# Warmup Iteration  25: 4207998.065 ops/s
# Warmup Iteration  26: 4246568.919 ops/s
# Warmup Iteration  27: 4206063.886 ops/s
# Warmup Iteration  28: 4172666.952 ops/s
# Warmup Iteration  29: 4202885.479 ops/s
# Warmup Iteration  30: 4230747.063 ops/s
Iteration   1: 4252497.779 ops/s
Iteration   2: 4162618.773 ops/s
Iteration   3: 4258637.742 ops/s
Iteration   4: 4206374.448 ops/s
Iteration   5: 4203712.264 ops/s
Iteration   6: 4176943.204 ops/s
Iteration   7: 4171968.856 ops/s
Iteration   8: 4191039.100 ops/s
Iteration   9: 4197723.339 ops/s
Iteration  10: 4204029.794 ops/s
Iteration  11: 4148372.803 ops/s
Iteration  12: 4157494.552 ops/s
Iteration  13: 4199713.805 ops/s
Iteration  14: 4150573.718 ops/s
Iteration  15: 4208271.886 ops/s
Iteration  16: 4161876.344 ops/s
Iteration  17: 4233051.108 ops/s
Iteration  18: 4195135.847 ops/s
Iteration  19: 4142536.276 ops/s
Iteration  20: 4196775.348 ops/s
Iteration  21: 4197479.228 ops/s
Iteration  22: 4229516.869 ops/s
Iteration  23: 4183119.871 ops/s
Iteration  24: 4191194.291 ops/s
Iteration  25: 4175740.125 ops/s
Iteration  26: 4230788.158 ops/s
Iteration  27: 4227497.395 ops/s
Iteration  28: 4229971.026 ops/s
Iteration  29: 4199876.466 ops/s
Iteration  30: 4207287.904 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_contains":
  4196393.944 ±(99.9%) 20014.431 ops/s [Average]
  (min, avg, max) = (4142536.276, 4196393.944, 4258637.742), stdev = 29956.661
  CI (99.9%): [4176379.513, 4216408.375] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
HashBiMapInverseKeySetTest._Benchmark.benchmark_contains  thrpt   30  4196393.944 ± 20014.431  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 900759.937 ops/s
# Warmup Iteration   2: 2519335.621 ops/s
# Warmup Iteration   3: 2631275.669 ops/s
# Warmup Iteration   4: 2174585.834 ops/s
# Warmup Iteration   5: 2644810.012 ops/s
# Warmup Iteration   6: 2628734.354 ops/s
# Warmup Iteration   7: 2618576.641 ops/s
# Warmup Iteration   8: 2628539.235 ops/s
# Warmup Iteration   9: 2610362.752 ops/s
# Warmup Iteration  10: 2629356.852 ops/s
# Warmup Iteration  11: 2618918.871 ops/s
# Warmup Iteration  12: 2626148.237 ops/s
# Warmup Iteration  13: 2604455.608 ops/s
# Warmup Iteration  14: 2625375.284 ops/s
# Warmup Iteration  15: 2644389.796 ops/s
# Warmup Iteration  16: 2622361.823 ops/s
# Warmup Iteration  17: 2609115.465 ops/s
# Warmup Iteration  18: 2610642.428 ops/s
# Warmup Iteration  19: 2597680.302 ops/s
# Warmup Iteration  20: 2625037.168 ops/s
# Warmup Iteration  21: 2627621.136 ops/s
# Warmup Iteration  22: 2601083.727 ops/s
# Warmup Iteration  23: 2587752.417 ops/s
# Warmup Iteration  24: 2594528.801 ops/s
# Warmup Iteration  25: 2588076.700 ops/s
# Warmup Iteration  26: 2593553.759 ops/s
# Warmup Iteration  27: 2595662.856 ops/s
# Warmup Iteration  28: 2618080.339 ops/s
# Warmup Iteration  29: 2629465.050 ops/s
# Warmup Iteration  30: 2654311.301 ops/s
Iteration   1: 2617219.820 ops/s
Iteration   2: 2620474.827 ops/s
Iteration   3: 2597769.894 ops/s
Iteration   4: 2631768.647 ops/s
Iteration   5: 2597458.114 ops/s
Iteration   6: 2607986.782 ops/s
Iteration   7: 2555985.905 ops/s
Iteration   8: 2627930.339 ops/s
Iteration   9: 2625424.577 ops/s
Iteration  10: 2660134.187 ops/s
Iteration  11: 2628298.956 ops/s
Iteration  12: 2609819.715 ops/s
Iteration  13: 2628003.601 ops/s
Iteration  14: 2619675.380 ops/s
Iteration  15: 2626411.584 ops/s
Iteration  16: 2622536.473 ops/s
Iteration  17: 2629878.162 ops/s
Iteration  18: 2589064.523 ops/s
Iteration  19: 2621676.577 ops/s
Iteration  20: 2630203.515 ops/s
Iteration  21: 2619377.092 ops/s
Iteration  22: 2647288.070 ops/s
Iteration  23: 2626357.445 ops/s
Iteration  24: 2638831.735 ops/s
Iteration  25: 2628698.153 ops/s
Iteration  26: 2596337.254 ops/s
Iteration  27: 2662917.220 ops/s
Iteration  28: 2627532.072 ops/s
Iteration  29: 2618802.395 ops/s
Iteration  30: 2575063.711 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_containsAll":
  2619630.891 ±(99.9%) 14800.015 ops/s [Average]
  (min, avg, max) = (2555985.905, 2619630.891, 2662917.220), stdev = 22151.967
  CI (99.9%): [2604830.876, 2634430.906] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
HashBiMapInverseKeySetTest._Benchmark.benchmark_containsAll  thrpt   30  2619630.891 ± 14800.015  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1412472.066 ops/s
# Warmup Iteration   2: 3078458.061 ops/s
# Warmup Iteration   3: 2567624.174 ops/s
# Warmup Iteration   4: 3099993.296 ops/s
# Warmup Iteration   5: 3098324.911 ops/s
# Warmup Iteration   6: 3089263.092 ops/s
# Warmup Iteration   7: 3097594.217 ops/s
# Warmup Iteration   8: 3122800.130 ops/s
# Warmup Iteration   9: 3097089.312 ops/s
# Warmup Iteration  10: 3150126.773 ops/s
# Warmup Iteration  11: 3135594.638 ops/s
# Warmup Iteration  12: 3105305.075 ops/s
# Warmup Iteration  13: 3071132.494 ops/s
# Warmup Iteration  14: 3089219.717 ops/s
# Warmup Iteration  15: 3091099.874 ops/s
# Warmup Iteration  16: 3090300.776 ops/s
# Warmup Iteration  17: 3100732.950 ops/s
# Warmup Iteration  18: 3141181.803 ops/s
# Warmup Iteration  19: 3094398.789 ops/s
# Warmup Iteration  20: 3122462.584 ops/s
# Warmup Iteration  21: 3095623.631 ops/s
# Warmup Iteration  22: 3105514.219 ops/s
# Warmup Iteration  23: 3117347.678 ops/s
# Warmup Iteration  24: 3106170.651 ops/s
# Warmup Iteration  25: 3077842.867 ops/s
# Warmup Iteration  26: 3086123.346 ops/s
# Warmup Iteration  27: 3030744.095 ops/s
# Warmup Iteration  28: 3099582.357 ops/s
# Warmup Iteration  29: 3097024.383 ops/s
# Warmup Iteration  30: 3099281.654 ops/s
Iteration   1: 3068051.508 ops/s
Iteration   2: 3088639.359 ops/s
Iteration   3: 3084461.479 ops/s
Iteration   4: 3051578.931 ops/s
Iteration   5: 3080187.435 ops/s
Iteration   6: 3106094.926 ops/s
Iteration   7: 3087541.903 ops/s
Iteration   8: 3096802.377 ops/s
Iteration   9: 3110949.932 ops/s
Iteration  10: 3109731.138 ops/s
Iteration  11: 3121289.804 ops/s
Iteration  12: 3078619.306 ops/s
Iteration  13: 3090113.876 ops/s
Iteration  14: 3085259.723 ops/s
Iteration  15: 3083799.108 ops/s
Iteration  16: 3081340.602 ops/s
Iteration  17: 3111487.465 ops/s
Iteration  18: 3100025.030 ops/s
Iteration  19: 3109311.490 ops/s
Iteration  20: 3114326.947 ops/s
Iteration  21: 3104326.942 ops/s
Iteration  22: 3113185.527 ops/s
Iteration  23: 3105946.686 ops/s
Iteration  24: 3107834.456 ops/s
Iteration  25: 3067046.400 ops/s
Iteration  26: 3091060.872 ops/s
Iteration  27: 3110959.339 ops/s
Iteration  28: 3103610.870 ops/s
Iteration  29: 3122198.708 ops/s
Iteration  30: 3048545.890 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_isEmpty":
  3094477.601 ±(99.9%) 12784.892 ops/s [Average]
  (min, avg, max) = (3048545.890, 3094477.601, 3122198.708), stdev = 19135.825
  CI (99.9%): [3081692.709, 3107262.492] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
HashBiMapInverseKeySetTest._Benchmark.benchmark_isEmpty  thrpt   30  3094477.601 ± 12784.892  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 78540.516 ops/s
# Warmup Iteration   2: 98810.576 ops/s
# Warmup Iteration   3: 130607.722 ops/s
# Warmup Iteration   4: 133318.453 ops/s
# Warmup Iteration   5: 131772.833 ops/s
# Warmup Iteration   6: 134640.262 ops/s
# Warmup Iteration   7: 135158.968 ops/s
# Warmup Iteration   8: 135019.848 ops/s
# Warmup Iteration   9: 132676.181 ops/s
# Warmup Iteration  10: 133309.350 ops/s
# Warmup Iteration  11: 118422.904 ops/s
# Warmup Iteration  12: 127058.805 ops/s
# Warmup Iteration  13: 135098.344 ops/s
# Warmup Iteration  14: 134012.566 ops/s
# Warmup Iteration  15: 132118.842 ops/s
# Warmup Iteration  16: 133537.112 ops/s
# Warmup Iteration  17: 138905.420 ops/s
# Warmup Iteration  18: 139601.034 ops/s
# Warmup Iteration  19: 139130.769 ops/s
# Warmup Iteration  20: 139730.721 ops/s
# Warmup Iteration  21: 139049.489 ops/s
# Warmup Iteration  22: 139566.655 ops/s
# Warmup Iteration  23: 139876.698 ops/s
# Warmup Iteration  24: 138269.298 ops/s
# Warmup Iteration  25: 141364.354 ops/s
# Warmup Iteration  26: 140171.125 ops/s
# Warmup Iteration  27: 140836.871 ops/s
# Warmup Iteration  28: 139850.687 ops/s
# Warmup Iteration  29: 140937.627 ops/s
# Warmup Iteration  30: 140093.148 ops/s
Iteration   1: 140452.438 ops/s
Iteration   2: 137199.528 ops/s
Iteration   3: 139796.048 ops/s
Iteration   4: 139710.789 ops/s
Iteration   5: 140034.311 ops/s
Iteration   6: 137629.202 ops/s
Iteration   7: 140126.865 ops/s
Iteration   8: 141449.285 ops/s
Iteration   9: 138965.665 ops/s
Iteration  10: 139733.451 ops/s
Iteration  11: 138224.777 ops/s
Iteration  12: 139291.512 ops/s
Iteration  13: 140010.906 ops/s
Iteration  14: 140987.124 ops/s
Iteration  15: 140610.258 ops/s
Iteration  16: 140306.877 ops/s
Iteration  17: 140448.883 ops/s
Iteration  18: 139476.743 ops/s
Iteration  19: 142182.877 ops/s
Iteration  20: 140073.856 ops/s
Iteration  21: 138571.767 ops/s
Iteration  22: 140690.009 ops/s
Iteration  23: 141442.063 ops/s
Iteration  24: 138643.395 ops/s
Iteration  25: 141542.053 ops/s
Iteration  26: 140300.531 ops/s
Iteration  27: 142621.630 ops/s
Iteration  28: 140652.408 ops/s
Iteration  29: 141652.301 ops/s
Iteration  30: 141445.375 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_iterator":
  140142.431 ±(99.9%) 857.806 ops/s [Average]
  (min, avg, max) = (137199.528, 140142.431, 142621.630), stdev = 1283.924
  CI (99.9%): [139284.625, 141000.237] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
HashBiMapInverseKeySetTest._Benchmark.benchmark_iterator  thrpt   30  140142.431 ± 857.806  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_keySetEqualsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_keySetEqualsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 559701.011 ops/s
# Warmup Iteration   2: 1214451.569 ops/s
# Warmup Iteration   3: 1279812.852 ops/s
# Warmup Iteration   4: 1290335.548 ops/s
# Warmup Iteration   5: 1069692.347 ops/s
# Warmup Iteration   6: 1332010.959 ops/s
# Warmup Iteration   7: 1333449.663 ops/s
# Warmup Iteration   8: 1314335.526 ops/s
# Warmup Iteration   9: 1308134.627 ops/s
# Warmup Iteration  10: 1298292.252 ops/s
# Warmup Iteration  11: 1283737.660 ops/s
# Warmup Iteration  12: 1291770.644 ops/s
# Warmup Iteration  13: 1296879.391 ops/s
# Warmup Iteration  14: 1297729.486 ops/s
# Warmup Iteration  15: 1318186.311 ops/s
# Warmup Iteration  16: 1289854.687 ops/s
# Warmup Iteration  17: 1293616.899 ops/s
# Warmup Iteration  18: 1305873.624 ops/s
# Warmup Iteration  19: 1302233.049 ops/s
# Warmup Iteration  20: 1290772.402 ops/s
# Warmup Iteration  21: 1317420.117 ops/s
# Warmup Iteration  22: 1294554.106 ops/s
# Warmup Iteration  23: 1300861.955 ops/s
# Warmup Iteration  24: 1311011.562 ops/s
# Warmup Iteration  25: 1306689.650 ops/s
# Warmup Iteration  26: 1288653.991 ops/s
# Warmup Iteration  27: 1320021.089 ops/s
# Warmup Iteration  28: 1304807.210 ops/s
# Warmup Iteration  29: 1306011.662 ops/s
# Warmup Iteration  30: 1293558.228 ops/s
Iteration   1: 1288688.130 ops/s
Iteration   2: 1321451.909 ops/s
Iteration   3: 1310207.976 ops/s
Iteration   4: 1284169.831 ops/s
Iteration   5: 1297365.696 ops/s
Iteration   6: 1284712.978 ops/s
Iteration   7: 1276510.649 ops/s
Iteration   8: 1284623.902 ops/s
Iteration   9: 1296165.484 ops/s
Iteration  10: 1271361.461 ops/s
Iteration  11: 1297139.623 ops/s
Iteration  12: 1317343.415 ops/s
Iteration  13: 1284838.880 ops/s
Iteration  14: 1301067.255 ops/s
Iteration  15: 1290819.302 ops/s
Iteration  16: 1308752.299 ops/s
Iteration  17: 1295103.393 ops/s
Iteration  18: 1294617.064 ops/s
Iteration  19: 1301932.260 ops/s
Iteration  20: 1295910.864 ops/s
Iteration  21: 1308032.939 ops/s
Iteration  22: 1297149.859 ops/s
Iteration  23: 1297128.570 ops/s
Iteration  24: 1298054.655 ops/s
Iteration  25: 1309710.834 ops/s
Iteration  26: 1315180.296 ops/s
Iteration  27: 1287164.143 ops/s
Iteration  28: 1299476.067 ops/s
Iteration  29: 1295065.650 ops/s
Iteration  30: 1331770.746 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_keySetEqualsAndHashCode":
  1298050.538 ±(99.9%) 8838.353 ops/s [Average]
  (min, avg, max) = (1271361.461, 1298050.538, 1331770.746), stdev = 13228.832
  CI (99.9%): [1289212.184, 1306888.891] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
HashBiMapInverseKeySetTest._Benchmark.benchmark_keySetEqualsAndHashCode  thrpt   30  1298050.538 ± 8838.353  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_keySetToArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_keySetToArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 332227.616 ops/s
# Warmup Iteration   2: 554500.126 ops/s
# Warmup Iteration   3: 650829.642 ops/s
# Warmup Iteration   4: 654047.086 ops/s
# Warmup Iteration   5: 651565.891 ops/s
# Warmup Iteration   6: 533579.944 ops/s
# Warmup Iteration   7: 644657.713 ops/s
# Warmup Iteration   8: 650570.461 ops/s
# Warmup Iteration   9: 660461.821 ops/s
# Warmup Iteration  10: 643596.302 ops/s
# Warmup Iteration  11: 651761.280 ops/s
# Warmup Iteration  12: 656090.556 ops/s
# Warmup Iteration  13: 651160.812 ops/s
# Warmup Iteration  14: 641280.320 ops/s
# Warmup Iteration  15: 652158.899 ops/s
# Warmup Iteration  16: 650891.844 ops/s
# Warmup Iteration  17: 652015.983 ops/s
# Warmup Iteration  18: 647699.991 ops/s
# Warmup Iteration  19: 645340.036 ops/s
# Warmup Iteration  20: 648822.096 ops/s
# Warmup Iteration  21: 653645.595 ops/s
# Warmup Iteration  22: 654241.471 ops/s
# Warmup Iteration  23: 644501.178 ops/s
# Warmup Iteration  24: 647808.575 ops/s
# Warmup Iteration  25: 646818.360 ops/s
# Warmup Iteration  26: 649023.940 ops/s
# Warmup Iteration  27: 650013.148 ops/s
# Warmup Iteration  28: 647621.647 ops/s
# Warmup Iteration  29: 646202.742 ops/s
# Warmup Iteration  30: 652971.411 ops/s
Iteration   1: 644118.869 ops/s
Iteration   2: 650976.693 ops/s
Iteration   3: 643051.761 ops/s
Iteration   4: 657722.532 ops/s
Iteration   5: 652872.419 ops/s
Iteration   6: 656414.188 ops/s
Iteration   7: 649670.625 ops/s
Iteration   8: 655158.069 ops/s
Iteration   9: 647324.154 ops/s
Iteration  10: 647401.567 ops/s
Iteration  11: 653685.637 ops/s
Iteration  12: 654557.829 ops/s
Iteration  13: 653828.251 ops/s
Iteration  14: 650927.809 ops/s
Iteration  15: 656840.951 ops/s
Iteration  16: 647061.088 ops/s
Iteration  17: 654600.163 ops/s
Iteration  18: 638604.640 ops/s
Iteration  19: 648843.277 ops/s
Iteration  20: 647119.499 ops/s
Iteration  21: 659279.882 ops/s
Iteration  22: 643447.970 ops/s
Iteration  23: 654819.246 ops/s
Iteration  24: 647265.540 ops/s
Iteration  25: 653378.072 ops/s
Iteration  26: 654514.808 ops/s
Iteration  27: 657432.685 ops/s
Iteration  28: 645577.313 ops/s
Iteration  29: 651338.407 ops/s
Iteration  30: 652571.124 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_keySetToArray":
  651013.502 ±(99.9%) 3382.623 ops/s [Average]
  (min, avg, max) = (638604.640, 651013.502, 659279.882), stdev = 5062.951
  CI (99.9%): [647630.879, 654396.125] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
HashBiMapInverseKeySetTest._Benchmark.benchmark_keySetToArray  thrpt   30  651013.502 ± 3382.623  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_removeAllFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_removeAllFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 474329.280 ops/s
# Warmup Iteration   2: 1082771.021 ops/s
# Warmup Iteration   3: 1123337.693 ops/s
# Warmup Iteration   4: 1026359.629 ops/s
# Warmup Iteration   5: 1044241.384 ops/s
# Warmup Iteration   6: 1139567.654 ops/s
# Warmup Iteration   7: 1126745.323 ops/s
# Warmup Iteration   8: 1138203.013 ops/s
# Warmup Iteration   9: 1127385.411 ops/s
# Warmup Iteration  10: 1129028.229 ops/s
# Warmup Iteration  11: 1131710.481 ops/s
# Warmup Iteration  12: 1134513.638 ops/s
# Warmup Iteration  13: 1126427.055 ops/s
# Warmup Iteration  14: 1135600.126 ops/s
# Warmup Iteration  15: 1134198.683 ops/s
# Warmup Iteration  16: 1130109.950 ops/s
# Warmup Iteration  17: 1127984.596 ops/s
# Warmup Iteration  18: 1127191.902 ops/s
# Warmup Iteration  19: 1137163.278 ops/s
# Warmup Iteration  20: 1133783.680 ops/s
# Warmup Iteration  21: 1118803.109 ops/s
# Warmup Iteration  22: 1131056.610 ops/s
# Warmup Iteration  23: 1126434.613 ops/s
# Warmup Iteration  24: 1117750.792 ops/s
# Warmup Iteration  25: 1124767.655 ops/s
# Warmup Iteration  26: 1132488.905 ops/s
# Warmup Iteration  27: 1125691.494 ops/s
# Warmup Iteration  28: 1140119.508 ops/s
# Warmup Iteration  29: 1129166.740 ops/s
# Warmup Iteration  30: 1137704.521 ops/s
Iteration   1: 1130624.899 ops/s
Iteration   2: 1127445.248 ops/s
Iteration   3: 1127445.262 ops/s
Iteration   4: 1131464.638 ops/s
Iteration   5: 1135307.706 ops/s
Iteration   6: 1110939.581 ops/s
Iteration   7: 1123658.386 ops/s
Iteration   8: 1135059.114 ops/s
Iteration   9: 1109947.497 ops/s
Iteration  10: 1110110.574 ops/s
Iteration  11: 1133722.445 ops/s
Iteration  12: 1120437.093 ops/s
Iteration  13: 1115809.369 ops/s
Iteration  14: 1141168.443 ops/s
Iteration  15: 1132576.401 ops/s
Iteration  16: 1134004.243 ops/s
Iteration  17: 1135937.656 ops/s
Iteration  18: 1142317.955 ops/s
Iteration  19: 1121672.114 ops/s
Iteration  20: 1127720.597 ops/s
Iteration  21: 1127045.211 ops/s
Iteration  22: 1133816.938 ops/s
Iteration  23: 1144630.645 ops/s
Iteration  24: 1138114.829 ops/s
Iteration  25: 1135573.856 ops/s
Iteration  26: 1119361.009 ops/s
Iteration  27: 1137260.989 ops/s
Iteration  28: 1120174.887 ops/s
Iteration  29: 1118898.852 ops/s
Iteration  30: 1137202.546 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_removeAllFromKeySet":
  1128648.299 ±(99.9%) 6450.452 ops/s [Average]
  (min, avg, max) = (1109947.497, 1128648.299, 1144630.645), stdev = 9654.733
  CI (99.9%): [1122197.848, 1135098.751] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
HashBiMapInverseKeySetTest._Benchmark.benchmark_removeAllFromKeySet  thrpt   30  1128648.299 ± 6450.452  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_removeFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_removeFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 551264.501 ops/s
# Warmup Iteration   2: 1342808.755 ops/s
# Warmup Iteration   3: 1366089.642 ops/s
# Warmup Iteration   4: 1115283.861 ops/s
# Warmup Iteration   5: 1364538.363 ops/s
# Warmup Iteration   6: 1343744.754 ops/s
# Warmup Iteration   7: 1364955.311 ops/s
# Warmup Iteration   8: 1352097.974 ops/s
# Warmup Iteration   9: 1351615.826 ops/s
# Warmup Iteration  10: 1364334.437 ops/s
# Warmup Iteration  11: 1356770.044 ops/s
# Warmup Iteration  12: 1366205.598 ops/s
# Warmup Iteration  13: 1366994.444 ops/s
# Warmup Iteration  14: 1354986.342 ops/s
# Warmup Iteration  15: 1360358.897 ops/s
# Warmup Iteration  16: 1352325.674 ops/s
# Warmup Iteration  17: 1368502.955 ops/s
# Warmup Iteration  18: 1353859.084 ops/s
# Warmup Iteration  19: 1355218.568 ops/s
# Warmup Iteration  20: 1363910.595 ops/s
# Warmup Iteration  21: 1345342.450 ops/s
# Warmup Iteration  22: 1364069.935 ops/s
# Warmup Iteration  23: 1372408.385 ops/s
# Warmup Iteration  24: 1354335.862 ops/s
# Warmup Iteration  25: 1354623.380 ops/s
# Warmup Iteration  26: 1350927.767 ops/s
# Warmup Iteration  27: 1360726.888 ops/s
# Warmup Iteration  28: 1360316.184 ops/s
# Warmup Iteration  29: 1360941.629 ops/s
# Warmup Iteration  30: 1355218.747 ops/s
Iteration   1: 1355740.370 ops/s
Iteration   2: 1359129.150 ops/s
Iteration   3: 1362150.209 ops/s
Iteration   4: 1355298.914 ops/s
Iteration   5: 1366515.781 ops/s
Iteration   6: 1363507.143 ops/s
Iteration   7: 1355963.378 ops/s
Iteration   8: 1362021.037 ops/s
Iteration   9: 1355306.105 ops/s
Iteration  10: 1354340.741 ops/s
Iteration  11: 1355981.437 ops/s
Iteration  12: 1353924.564 ops/s
Iteration  13: 1369802.460 ops/s
Iteration  14: 1380094.591 ops/s
Iteration  15: 1361488.352 ops/s
Iteration  16: 1367958.273 ops/s
Iteration  17: 1348490.326 ops/s
Iteration  18: 1349227.675 ops/s
Iteration  19: 1363164.175 ops/s
Iteration  20: 1347769.689 ops/s
Iteration  21: 1347093.997 ops/s
Iteration  22: 1349999.143 ops/s
Iteration  23: 1365306.160 ops/s
Iteration  24: 1358646.453 ops/s
Iteration  25: 1387401.008 ops/s
Iteration  26: 1364744.531 ops/s
Iteration  27: 1359995.116 ops/s
Iteration  28: 1370312.426 ops/s
Iteration  29: 1372331.226 ops/s
Iteration  30: 1378649.222 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_removeFromKeySet":
  1361411.788 ±(99.9%) 6585.665 ops/s [Average]
  (min, avg, max) = (1347093.997, 1361411.788, 1387401.008), stdev = 9857.114
  CI (99.9%): [1354826.123, 1367997.453] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
HashBiMapInverseKeySetTest._Benchmark.benchmark_removeFromKeySet  thrpt   30  1361411.788 ± 6585.665  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_removeNullFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_removeNullFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 270373.491 ops/s
# Warmup Iteration   2: 557486.272 ops/s
# Warmup Iteration   3: 577336.542 ops/s
# Warmup Iteration   4: 578412.687 ops/s
# Warmup Iteration   5: 488138.563 ops/s
# Warmup Iteration   6: 583890.261 ops/s
# Warmup Iteration   7: 578303.610 ops/s
# Warmup Iteration   8: 580321.579 ops/s
# Warmup Iteration   9: 579271.766 ops/s
# Warmup Iteration  10: 586914.939 ops/s
# Warmup Iteration  11: 580182.912 ops/s
# Warmup Iteration  12: 578447.159 ops/s
# Warmup Iteration  13: 579770.718 ops/s
# Warmup Iteration  14: 581002.730 ops/s
# Warmup Iteration  15: 582650.225 ops/s
# Warmup Iteration  16: 587422.387 ops/s
# Warmup Iteration  17: 586374.212 ops/s
# Warmup Iteration  18: 584644.802 ops/s
# Warmup Iteration  19: 583619.843 ops/s
# Warmup Iteration  20: 583482.310 ops/s
# Warmup Iteration  21: 583108.268 ops/s
# Warmup Iteration  22: 579399.559 ops/s
# Warmup Iteration  23: 582295.585 ops/s
# Warmup Iteration  24: 589806.907 ops/s
# Warmup Iteration  25: 583852.849 ops/s
# Warmup Iteration  26: 580929.839 ops/s
# Warmup Iteration  27: 586739.156 ops/s
# Warmup Iteration  28: 581703.037 ops/s
# Warmup Iteration  29: 577804.241 ops/s
# Warmup Iteration  30: 585447.140 ops/s
Iteration   1: 576901.446 ops/s
Iteration   2: 590882.618 ops/s
Iteration   3: 579104.695 ops/s
Iteration   4: 586450.416 ops/s
Iteration   5: 584712.426 ops/s
Iteration   6: 585792.658 ops/s
Iteration   7: 584623.179 ops/s
Iteration   8: 580287.088 ops/s
Iteration   9: 583377.543 ops/s
Iteration  10: 591106.557 ops/s
Iteration  11: 581091.280 ops/s
Iteration  12: 580272.331 ops/s
Iteration  13: 570871.183 ops/s
Iteration  14: 576610.468 ops/s
Iteration  15: 589322.053 ops/s
Iteration  16: 584453.680 ops/s
Iteration  17: 584223.478 ops/s
Iteration  18: 583709.799 ops/s
Iteration  19: 585473.109 ops/s
Iteration  20: 578916.830 ops/s
Iteration  21: 589665.000 ops/s
Iteration  22: 584708.798 ops/s
Iteration  23: 580385.921 ops/s
Iteration  24: 579139.924 ops/s
Iteration  25: 575126.007 ops/s
Iteration  26: 581345.172 ops/s
Iteration  27: 586105.045 ops/s
Iteration  28: 586384.814 ops/s
Iteration  29: 580892.716 ops/s
Iteration  30: 590769.562 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_removeNullFromKeySet":
  583090.193 ±(99.9%) 3278.604 ops/s [Average]
  (min, avg, max) = (570871.183, 583090.193, 591106.557), stdev = 4907.261
  CI (99.9%): [579811.589, 586368.797] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
HashBiMapInverseKeySetTest._Benchmark.benchmark_removeNullFromKeySet  thrpt   30  583090.193 ± 3278.604  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_retainAllFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_retainAllFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 445892.384 ops/s
# Warmup Iteration   2: 1009396.236 ops/s
# Warmup Iteration   3: 1057309.376 ops/s
# Warmup Iteration   4: 990610.949 ops/s
# Warmup Iteration   5: 931977.008 ops/s
# Warmup Iteration   6: 1043347.253 ops/s
# Warmup Iteration   7: 1040779.902 ops/s
# Warmup Iteration   8: 1034226.858 ops/s
# Warmup Iteration   9: 1036266.619 ops/s
# Warmup Iteration  10: 1046445.855 ops/s
# Warmup Iteration  11: 1047991.458 ops/s
# Warmup Iteration  12: 1045712.658 ops/s
# Warmup Iteration  13: 1038349.670 ops/s
# Warmup Iteration  14: 1043061.609 ops/s
# Warmup Iteration  15: 1039107.019 ops/s
# Warmup Iteration  16: 1038734.333 ops/s
# Warmup Iteration  17: 1036807.408 ops/s
# Warmup Iteration  18: 1038221.121 ops/s
# Warmup Iteration  19: 1037326.512 ops/s
# Warmup Iteration  20: 1047218.692 ops/s
# Warmup Iteration  21: 1053541.286 ops/s
# Warmup Iteration  22: 1043053.817 ops/s
# Warmup Iteration  23: 1044892.778 ops/s
# Warmup Iteration  24: 1045687.682 ops/s
# Warmup Iteration  25: 1052216.352 ops/s
# Warmup Iteration  26: 1048295.830 ops/s
# Warmup Iteration  27: 1040158.312 ops/s
# Warmup Iteration  28: 1037545.440 ops/s
# Warmup Iteration  29: 1042813.324 ops/s
# Warmup Iteration  30: 1043527.355 ops/s
Iteration   1: 1044130.356 ops/s
Iteration   2: 1046993.357 ops/s
Iteration   3: 1056058.927 ops/s
Iteration   4: 1043941.261 ops/s
Iteration   5: 1053211.737 ops/s
Iteration   6: 1058079.452 ops/s
Iteration   7: 1049026.672 ops/s
Iteration   8: 1042031.369 ops/s
Iteration   9: 1044084.792 ops/s
Iteration  10: 1044488.567 ops/s
Iteration  11: 1036266.430 ops/s
Iteration  12: 1044678.926 ops/s
Iteration  13: 1050568.097 ops/s
Iteration  14: 1038007.713 ops/s
Iteration  15: 1025004.491 ops/s
Iteration  16: 1034302.669 ops/s
Iteration  17: 1031571.666 ops/s
Iteration  18: 1040067.011 ops/s
Iteration  19: 1048452.516 ops/s
Iteration  20: 1051780.155 ops/s
Iteration  21: 1053523.901 ops/s
Iteration  22: 1053577.558 ops/s
Iteration  23: 1046148.281 ops/s
Iteration  24: 1050465.685 ops/s
Iteration  25: 1051340.305 ops/s
Iteration  26: 1036823.709 ops/s
Iteration  27: 1051683.216 ops/s
Iteration  28: 1033504.048 ops/s
Iteration  29: 1027929.811 ops/s
Iteration  30: 1056129.311 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_retainAllFromKeySet":
  1044795.733 ±(99.9%) 5820.709 ops/s [Average]
  (min, avg, max) = (1025004.491, 1044795.733, 1058079.452), stdev = 8712.163
  CI (99.9%): [1038975.024, 1050616.442] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
HashBiMapInverseKeySetTest._Benchmark.benchmark_retainAllFromKeySet  thrpt   30  1044795.733 ± 5820.709  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 48935.200 ops/s
# Warmup Iteration   2: 71975.648 ops/s
# Warmup Iteration   3: 98707.134 ops/s
# Warmup Iteration   4: 99843.937 ops/s
# Warmup Iteration   5: 99081.247 ops/s
# Warmup Iteration   6: 98957.490 ops/s
# Warmup Iteration   7: 99700.588 ops/s
# Warmup Iteration   8: 84297.932 ops/s
# Warmup Iteration   9: 100154.509 ops/s
# Warmup Iteration  10: 98034.898 ops/s
# Warmup Iteration  11: 99029.632 ops/s
# Warmup Iteration  12: 98964.144 ops/s
# Warmup Iteration  13: 98722.922 ops/s
# Warmup Iteration  14: 98266.628 ops/s
# Warmup Iteration  15: 98527.720 ops/s
# Warmup Iteration  16: 98407.026 ops/s
# Warmup Iteration  17: 97656.941 ops/s
# Warmup Iteration  18: 98012.263 ops/s
# Warmup Iteration  19: 98107.737 ops/s
# Warmup Iteration  20: 97962.648 ops/s
# Warmup Iteration  21: 96514.031 ops/s
# Warmup Iteration  22: 98358.885 ops/s
# Warmup Iteration  23: 97050.765 ops/s
# Warmup Iteration  24: 97616.130 ops/s
# Warmup Iteration  25: 97941.201 ops/s
# Warmup Iteration  26: 97347.250 ops/s
# Warmup Iteration  27: 98036.297 ops/s
# Warmup Iteration  28: 97682.144 ops/s
# Warmup Iteration  29: 97593.366 ops/s
# Warmup Iteration  30: 97888.867 ops/s
Iteration   1: 96911.423 ops/s
Iteration   2: 97940.398 ops/s
Iteration   3: 97646.349 ops/s
Iteration   4: 99006.027 ops/s
Iteration   5: 99998.413 ops/s
Iteration   6: 99880.835 ops/s
Iteration   7: 99579.217 ops/s
Iteration   8: 99025.740 ops/s
Iteration   9: 99188.371 ops/s
Iteration  10: 98053.566 ops/s
Iteration  11: 97317.106 ops/s
Iteration  12: 96172.689 ops/s
Iteration  13: 97642.681 ops/s
Iteration  14: 96279.791 ops/s
Iteration  15: 96475.970 ops/s
Iteration  16: 100042.999 ops/s
Iteration  17: 97605.405 ops/s
Iteration  18: 98015.339 ops/s
Iteration  19: 98269.002 ops/s
Iteration  20: 97500.091 ops/s
Iteration  21: 98558.987 ops/s
Iteration  22: 98566.524 ops/s
Iteration  23: 98201.720 ops/s
Iteration  24: 99411.607 ops/s
Iteration  25: 97180.169 ops/s
Iteration  26: 97766.002 ops/s
Iteration  27: 97014.104 ops/s
Iteration  28: 97406.672 ops/s
Iteration  29: 98330.459 ops/s
Iteration  30: 98938.829 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_serialization":
  98130.883 ±(99.9%) 722.135 ops/s [Average]
  (min, avg, max) = (96172.689, 98130.883, 100042.999), stdev = 1080.858
  CI (99.9%): [97408.748, 98853.018] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt      Score     Error  Units
HashBiMapInverseKeySetTest._Benchmark.benchmark_serialization  thrpt   30  98130.883 ± 722.135  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 902097.134 ops/s
# Warmup Iteration   2: 2012173.180 ops/s
# Warmup Iteration   3: 1676286.574 ops/s
# Warmup Iteration   4: 2015563.485 ops/s
# Warmup Iteration   5: 1997608.119 ops/s
# Warmup Iteration   6: 2023586.168 ops/s
# Warmup Iteration   7: 2012623.254 ops/s
# Warmup Iteration   8: 2024931.167 ops/s
# Warmup Iteration   9: 1999658.184 ops/s
# Warmup Iteration  10: 1999364.679 ops/s
# Warmup Iteration  11: 2005875.813 ops/s
# Warmup Iteration  12: 2025941.206 ops/s
# Warmup Iteration  13: 2028520.166 ops/s
# Warmup Iteration  14: 2018303.525 ops/s
# Warmup Iteration  15: 1999696.189 ops/s
# Warmup Iteration  16: 2016557.547 ops/s
# Warmup Iteration  17: 2019020.234 ops/s
# Warmup Iteration  18: 2017684.880 ops/s
# Warmup Iteration  19: 2008395.856 ops/s
# Warmup Iteration  20: 2010586.153 ops/s
# Warmup Iteration  21: 2027978.770 ops/s
# Warmup Iteration  22: 2014549.502 ops/s
# Warmup Iteration  23: 2021469.844 ops/s
# Warmup Iteration  24: 2018168.603 ops/s
# Warmup Iteration  25: 2025830.184 ops/s
# Warmup Iteration  26: 2018590.062 ops/s
# Warmup Iteration  27: 2025088.382 ops/s
# Warmup Iteration  28: 2010179.975 ops/s
# Warmup Iteration  29: 2014661.735 ops/s
# Warmup Iteration  30: 2020593.943 ops/s
Iteration   1: 2025779.165 ops/s
Iteration   2: 2031237.290 ops/s
Iteration   3: 2025107.485 ops/s
Iteration   4: 2010775.614 ops/s
Iteration   5: 1993137.791 ops/s
Iteration   6: 2003118.868 ops/s
Iteration   7: 2019986.730 ops/s
Iteration   8: 1993929.532 ops/s
Iteration   9: 2014885.142 ops/s
Iteration  10: 2000678.494 ops/s
Iteration  11: 2018291.260 ops/s
Iteration  12: 2025090.685 ops/s
Iteration  13: 2031332.487 ops/s
Iteration  14: 2005633.543 ops/s
Iteration  15: 1998212.590 ops/s
Iteration  16: 2011185.816 ops/s
Iteration  17: 2031755.661 ops/s
Iteration  18: 2030732.905 ops/s
Iteration  19: 2037963.141 ops/s
Iteration  20: 2020724.714 ops/s
Iteration  21: 2024063.942 ops/s
Iteration  22: 2012280.296 ops/s
Iteration  23: 2024309.289 ops/s
Iteration  24: 2040898.371 ops/s
Iteration  25: 2027094.098 ops/s
Iteration  26: 2010170.611 ops/s
Iteration  27: 2011991.980 ops/s
Iteration  28: 2031270.934 ops/s
Iteration  29: 2034071.359 ops/s
Iteration  30: 2028999.184 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseKeySetTest._Benchmark.benchmark_size":
  2019156.966 ±(99.9%) 8752.002 ops/s [Average]
  (min, avg, max) = (1993137.791, 2019156.966, 2040898.371), stdev = 13099.585
  CI (99.9%): [2010404.964, 2027908.968] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
HashBiMapInverseKeySetTest._Benchmark.benchmark_size  thrpt   30  2019156.966 ± 8752.002  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1109764.136 ops/s
# Warmup Iteration   2: 2869279.053 ops/s
# Warmup Iteration   3: 2352598.105 ops/s
# Warmup Iteration   4: 2826613.311 ops/s
# Warmup Iteration   5: 2847417.344 ops/s
# Warmup Iteration   6: 2849030.081 ops/s
# Warmup Iteration   7: 2827986.147 ops/s
# Warmup Iteration   8: 2806039.191 ops/s
# Warmup Iteration   9: 2844795.941 ops/s
# Warmup Iteration  10: 2817881.923 ops/s
# Warmup Iteration  11: 2824287.703 ops/s
# Warmup Iteration  12: 2813390.033 ops/s
# Warmup Iteration  13: 2827309.959 ops/s
# Warmup Iteration  14: 2814052.644 ops/s
# Warmup Iteration  15: 2837942.980 ops/s
# Warmup Iteration  16: 2827898.737 ops/s
# Warmup Iteration  17: 2840572.417 ops/s
# Warmup Iteration  18: 2844980.888 ops/s
# Warmup Iteration  19: 2826086.808 ops/s
# Warmup Iteration  20: 2814007.041 ops/s
# Warmup Iteration  21: 2811925.718 ops/s
# Warmup Iteration  22: 2869422.395 ops/s
# Warmup Iteration  23: 2844520.541 ops/s
# Warmup Iteration  24: 2830066.106 ops/s
# Warmup Iteration  25: 2829166.995 ops/s
# Warmup Iteration  26: 2804900.089 ops/s
# Warmup Iteration  27: 2826001.437 ops/s
# Warmup Iteration  28: 2838629.498 ops/s
# Warmup Iteration  29: 2821842.928 ops/s
# Warmup Iteration  30: 2826382.379 ops/s
Iteration   1: 2837739.108 ops/s
Iteration   2: 2817981.126 ops/s
Iteration   3: 2884431.343 ops/s
Iteration   4: 2857169.118 ops/s
Iteration   5: 2841587.342 ops/s
Iteration   6: 2813117.272 ops/s
Iteration   7: 2833971.344 ops/s
Iteration   8: 2802173.066 ops/s
Iteration   9: 2829428.891 ops/s
Iteration  10: 2848937.614 ops/s
Iteration  11: 2844847.969 ops/s
Iteration  12: 2841747.080 ops/s
Iteration  13: 2814410.977 ops/s
Iteration  14: 2871459.843 ops/s
Iteration  15: 2828484.791 ops/s
Iteration  16: 2877488.757 ops/s
Iteration  17: 2831370.584 ops/s
Iteration  18: 2835592.948 ops/s
Iteration  19: 2799862.470 ops/s
Iteration  20: 2844228.720 ops/s
Iteration  21: 2826317.803 ops/s
Iteration  22: 2812382.395 ops/s
Iteration  23: 2803618.051 ops/s
Iteration  24: 2807455.500 ops/s
Iteration  25: 2849425.358 ops/s
Iteration  26: 2851584.836 ops/s
Iteration  27: 2804926.497 ops/s
Iteration  28: 2802732.848 ops/s
Iteration  29: 2830266.783 ops/s
Iteration  30: 2822721.538 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_add":
  2832248.732 ±(99.9%) 15113.784 ops/s [Average]
  (min, avg, max) = (2799862.470, 2832248.732, 2884431.343), stdev = 22621.602
  CI (99.9%): [2817134.948, 2847362.517] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_add  thrpt   30  2832248.732 ± 15113.784  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1166949.991 ops/s
# Warmup Iteration   2: 2807963.969 ops/s
# Warmup Iteration   3: 2810615.144 ops/s
# Warmup Iteration   4: 2327459.981 ops/s
# Warmup Iteration   5: 2827844.939 ops/s
# Warmup Iteration   6: 2793869.385 ops/s
# Warmup Iteration   7: 2813166.853 ops/s
# Warmup Iteration   8: 2809353.383 ops/s
# Warmup Iteration   9: 2828039.108 ops/s
# Warmup Iteration  10: 2811317.807 ops/s
# Warmup Iteration  11: 2842640.758 ops/s
# Warmup Iteration  12: 2839187.755 ops/s
# Warmup Iteration  13: 2802074.235 ops/s
# Warmup Iteration  14: 2830900.573 ops/s
# Warmup Iteration  15: 2864545.238 ops/s
# Warmup Iteration  16: 2814236.086 ops/s
# Warmup Iteration  17: 2820815.265 ops/s
# Warmup Iteration  18: 2818994.206 ops/s
# Warmup Iteration  19: 2828026.167 ops/s
# Warmup Iteration  20: 2823407.772 ops/s
# Warmup Iteration  21: 2837099.609 ops/s
# Warmup Iteration  22: 2813497.547 ops/s
# Warmup Iteration  23: 2802168.539 ops/s
# Warmup Iteration  24: 2825216.505 ops/s
# Warmup Iteration  25: 2796133.507 ops/s
# Warmup Iteration  26: 2788578.177 ops/s
# Warmup Iteration  27: 2790627.016 ops/s
# Warmup Iteration  28: 2846397.083 ops/s
# Warmup Iteration  29: 2824840.753 ops/s
# Warmup Iteration  30: 2792339.623 ops/s
Iteration   1: 2829193.074 ops/s
Iteration   2: 2815956.678 ops/s
Iteration   3: 2819171.181 ops/s
Iteration   4: 2840870.319 ops/s
Iteration   5: 2787799.057 ops/s
Iteration   6: 2837499.452 ops/s
Iteration   7: 2803820.169 ops/s
Iteration   8: 2766822.700 ops/s
Iteration   9: 2804896.318 ops/s
Iteration  10: 2800379.922 ops/s
Iteration  11: 2821625.804 ops/s
Iteration  12: 2786205.541 ops/s
Iteration  13: 2800767.487 ops/s
Iteration  14: 2802654.768 ops/s
Iteration  15: 2836800.109 ops/s
Iteration  16: 2835422.710 ops/s
Iteration  17: 2788609.113 ops/s
Iteration  18: 2816205.917 ops/s
Iteration  19: 2799443.447 ops/s
Iteration  20: 2812399.298 ops/s
Iteration  21: 2830334.514 ops/s
Iteration  22: 2806696.644 ops/s
Iteration  23: 2791656.859 ops/s
Iteration  24: 2803307.971 ops/s
Iteration  25: 2824931.310 ops/s
Iteration  26: 2824284.621 ops/s
Iteration  27: 2820481.891 ops/s
Iteration  28: 2803909.817 ops/s
Iteration  29: 2843947.593 ops/s
Iteration  30: 2796524.403 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_aggregateByMutating":
  2811753.956 ±(99.9%) 12499.758 ops/s [Average]
  (min, avg, max) = (2766822.700, 2811753.956, 2843947.593), stdev = 18709.051
  CI (99.9%): [2799254.198, 2824253.715] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  2811753.956 ± 12499.758  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1686985.393 ops/s
# Warmup Iteration   2: 4000626.349 ops/s
# Warmup Iteration   3: 3281030.561 ops/s
# Warmup Iteration   4: 3968476.155 ops/s
# Warmup Iteration   5: 4000463.925 ops/s
# Warmup Iteration   6: 3992034.261 ops/s
# Warmup Iteration   7: 4027117.007 ops/s
# Warmup Iteration   8: 3997494.699 ops/s
# Warmup Iteration   9: 4000356.830 ops/s
# Warmup Iteration  10: 3978723.465 ops/s
# Warmup Iteration  11: 3990632.550 ops/s
# Warmup Iteration  12: 4027594.491 ops/s
# Warmup Iteration  13: 3963312.912 ops/s
# Warmup Iteration  14: 3966270.597 ops/s
# Warmup Iteration  15: 4020263.994 ops/s
# Warmup Iteration  16: 3971865.243 ops/s
# Warmup Iteration  17: 3957289.782 ops/s
# Warmup Iteration  18: 3998766.805 ops/s
# Warmup Iteration  19: 4003211.301 ops/s
# Warmup Iteration  20: 3962163.751 ops/s
# Warmup Iteration  21: 3995380.946 ops/s
# Warmup Iteration  22: 4024507.594 ops/s
# Warmup Iteration  23: 3960646.879 ops/s
# Warmup Iteration  24: 4014666.418 ops/s
# Warmup Iteration  25: 4025560.487 ops/s
# Warmup Iteration  26: 4011421.690 ops/s
# Warmup Iteration  27: 3997954.407 ops/s
# Warmup Iteration  28: 3976700.015 ops/s
# Warmup Iteration  29: 4003483.878 ops/s
# Warmup Iteration  30: 4002729.885 ops/s
Iteration   1: 3952869.492 ops/s
Iteration   2: 3993725.727 ops/s
Iteration   3: 3952085.218 ops/s
Iteration   4: 4003581.186 ops/s
Iteration   5: 4007330.480 ops/s
Iteration   6: 3993381.045 ops/s
Iteration   7: 4061131.341 ops/s
Iteration   8: 4069822.324 ops/s
Iteration   9: 4054918.030 ops/s
Iteration  10: 4068498.458 ops/s
Iteration  11: 3998041.321 ops/s
Iteration  12: 4033222.220 ops/s
Iteration  13: 3960417.355 ops/s
Iteration  14: 4029674.740 ops/s
Iteration  15: 3994045.830 ops/s
Iteration  16: 4014622.794 ops/s
Iteration  17: 4004405.941 ops/s
Iteration  18: 3971364.995 ops/s
Iteration  19: 4010553.832 ops/s
Iteration  20: 3998690.580 ops/s
Iteration  21: 4017983.389 ops/s
Iteration  22: 3963223.757 ops/s
Iteration  23: 3998817.112 ops/s
Iteration  24: 4022174.661 ops/s
Iteration  25: 4040664.819 ops/s
Iteration  26: 3941016.675 ops/s
Iteration  27: 3981542.953 ops/s
Iteration  28: 3987832.635 ops/s
Iteration  29: 4004788.536 ops/s
Iteration  30: 4006720.822 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_aggregateByNonMutating":
  4004571.609 ±(99.9%) 22529.153 ops/s [Average]
  (min, avg, max) = (3941016.675, 4004571.609, 4069822.324), stdev = 33720.578
  CI (99.9%): [3982042.456, 4027100.762] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  4004571.609 ± 22529.153  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1714787.210 ops/s
# Warmup Iteration   2: 4189141.828 ops/s
# Warmup Iteration   3: 4200930.614 ops/s
# Warmup Iteration   4: 3517561.808 ops/s
# Warmup Iteration   5: 4169377.902 ops/s
# Warmup Iteration   6: 4216582.356 ops/s
# Warmup Iteration   7: 4295994.801 ops/s
# Warmup Iteration   8: 4262927.385 ops/s
# Warmup Iteration   9: 4199089.101 ops/s
# Warmup Iteration  10: 4255251.954 ops/s
# Warmup Iteration  11: 4236783.546 ops/s
# Warmup Iteration  12: 4222384.422 ops/s
# Warmup Iteration  13: 4238891.753 ops/s
# Warmup Iteration  14: 4223651.598 ops/s
# Warmup Iteration  15: 4159851.973 ops/s
# Warmup Iteration  16: 4195381.564 ops/s
# Warmup Iteration  17: 4207289.507 ops/s
# Warmup Iteration  18: 4219945.110 ops/s
# Warmup Iteration  19: 4207946.608 ops/s
# Warmup Iteration  20: 4209409.824 ops/s
# Warmup Iteration  21: 4227931.851 ops/s
# Warmup Iteration  22: 4191624.491 ops/s
# Warmup Iteration  23: 4187237.548 ops/s
# Warmup Iteration  24: 4149612.746 ops/s
# Warmup Iteration  25: 4207503.723 ops/s
# Warmup Iteration  26: 4187554.692 ops/s
# Warmup Iteration  27: 4225401.180 ops/s
# Warmup Iteration  28: 4185849.037 ops/s
# Warmup Iteration  29: 4209873.070 ops/s
# Warmup Iteration  30: 4264980.676 ops/s
Iteration   1: 4216115.318 ops/s
Iteration   2: 4159261.731 ops/s
Iteration   3: 4170020.742 ops/s
Iteration   4: 4151165.146 ops/s
Iteration   5: 4174400.379 ops/s
Iteration   6: 4204937.794 ops/s
Iteration   7: 4124713.149 ops/s
Iteration   8: 4166385.348 ops/s
Iteration   9: 4214197.001 ops/s
Iteration  10: 4194916.887 ops/s
Iteration  11: 4135902.757 ops/s
Iteration  12: 4088735.807 ops/s
Iteration  13: 4217569.064 ops/s
Iteration  14: 4246675.644 ops/s
Iteration  15: 4195017.129 ops/s
Iteration  16: 4293016.813 ops/s
Iteration  17: 4301747.930 ops/s
Iteration  18: 4290106.568 ops/s
Iteration  19: 4301779.949 ops/s
Iteration  20: 4301452.848 ops/s
Iteration  21: 4310203.680 ops/s
Iteration  22: 4301880.520 ops/s
Iteration  23: 4301843.742 ops/s
Iteration  24: 4305058.038 ops/s
Iteration  25: 4306998.271 ops/s
Iteration  26: 4308701.894 ops/s
Iteration  27: 4304173.318 ops/s
Iteration  28: 4298601.710 ops/s
Iteration  29: 4305361.773 ops/s
Iteration  30: 4314260.905 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_allSatisfy":
  4240173.395 ±(99.9%) 46948.032 ops/s [Average]
  (min, avg, max) = (4088735.807, 4240173.395, 4314260.905), stdev = 70269.609
  CI (99.9%): [4193225.363, 4287121.427] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_allSatisfy  thrpt   30  4240173.395 ± 46948.032  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2639974.472 ops/s
# Warmup Iteration   2: 5102766.690 ops/s
# Warmup Iteration   3: 5267984.427 ops/s
# Warmup Iteration   4: 4763107.832 ops/s
# Warmup Iteration   5: 5447099.902 ops/s
# Warmup Iteration   6: 5551406.467 ops/s
# Warmup Iteration   7: 5483832.109 ops/s
# Warmup Iteration   8: 5454476.276 ops/s
# Warmup Iteration   9: 5421764.312 ops/s
# Warmup Iteration  10: 5354588.267 ops/s
# Warmup Iteration  11: 5455140.098 ops/s
# Warmup Iteration  12: 5472071.614 ops/s
# Warmup Iteration  13: 5603618.752 ops/s
# Warmup Iteration  14: 5465641.987 ops/s
# Warmup Iteration  15: 5480552.051 ops/s
# Warmup Iteration  16: 5430663.188 ops/s
# Warmup Iteration  17: 5487694.359 ops/s
# Warmup Iteration  18: 5496245.967 ops/s
# Warmup Iteration  19: 5471836.694 ops/s
# Warmup Iteration  20: 5439745.394 ops/s
# Warmup Iteration  21: 5505755.924 ops/s
# Warmup Iteration  22: 5403733.504 ops/s
# Warmup Iteration  23: 5454794.200 ops/s
# Warmup Iteration  24: 5402179.129 ops/s
# Warmup Iteration  25: 5431937.825 ops/s
# Warmup Iteration  26: 5380731.897 ops/s
# Warmup Iteration  27: 5539162.638 ops/s
# Warmup Iteration  28: 5363975.282 ops/s
# Warmup Iteration  29: 5443074.606 ops/s
# Warmup Iteration  30: 5488610.931 ops/s
Iteration   1: 5443817.196 ops/s
Iteration   2: 5385808.340 ops/s
Iteration   3: 5506957.043 ops/s
Iteration   4: 5446796.398 ops/s
Iteration   5: 5533249.986 ops/s
Iteration   6: 5432419.911 ops/s
Iteration   7: 5392414.730 ops/s
Iteration   8: 5258657.541 ops/s
Iteration   9: 5412402.817 ops/s
Iteration  10: 5015715.463 ops/s
Iteration  11: 5390682.660 ops/s
Iteration  12: 5182699.883 ops/s
Iteration  13: 5371272.525 ops/s
Iteration  14: 5411256.867 ops/s
Iteration  15: 5434493.006 ops/s
Iteration  16: 5355900.068 ops/s
Iteration  17: 5415634.516 ops/s
Iteration  18: 5537523.480 ops/s
Iteration  19: 5317505.766 ops/s
Iteration  20: 5389465.538 ops/s
Iteration  21: 5425458.098 ops/s
Iteration  22: 5385905.075 ops/s
Iteration  23: 5337335.391 ops/s
Iteration  24: 5412046.530 ops/s
Iteration  25: 5535467.308 ops/s
Iteration  26: 5528371.920 ops/s
Iteration  27: 5481541.306 ops/s
Iteration  28: 5436362.763 ops/s
Iteration  29: 5459326.472 ops/s
Iteration  30: 5457208.050 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_allSatisfyWith":
  5403123.222 ±(99.9%) 71712.400 ops/s [Average]
  (min, avg, max) = (5015715.463, 5403123.222, 5537523.480), stdev = 107335.752
  CI (99.9%): [5331410.822, 5474835.622] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  5403123.222 ± 71712.400  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1694416.310 ops/s
# Warmup Iteration   2: 3972734.816 ops/s
# Warmup Iteration   3: 3980489.871 ops/s
# Warmup Iteration   4: 3275379.389 ops/s
# Warmup Iteration   5: 3994674.875 ops/s
# Warmup Iteration   6: 4008067.089 ops/s
# Warmup Iteration   7: 3973655.696 ops/s
# Warmup Iteration   8: 4000161.759 ops/s
# Warmup Iteration   9: 4017755.887 ops/s
# Warmup Iteration  10: 4007417.677 ops/s
# Warmup Iteration  11: 4012476.075 ops/s
# Warmup Iteration  12: 4008987.251 ops/s
# Warmup Iteration  13: 3983620.201 ops/s
# Warmup Iteration  14: 4011983.454 ops/s
# Warmup Iteration  15: 3967038.049 ops/s
# Warmup Iteration  16: 3989151.577 ops/s
# Warmup Iteration  17: 4012387.644 ops/s
# Warmup Iteration  18: 3983872.531 ops/s
# Warmup Iteration  19: 3989192.112 ops/s
# Warmup Iteration  20: 4016046.329 ops/s
# Warmup Iteration  21: 4003706.250 ops/s
# Warmup Iteration  22: 3998494.437 ops/s
# Warmup Iteration  23: 3986323.111 ops/s
# Warmup Iteration  24: 4006484.409 ops/s
# Warmup Iteration  25: 3975414.116 ops/s
# Warmup Iteration  26: 4028489.520 ops/s
# Warmup Iteration  27: 4025714.244 ops/s
# Warmup Iteration  28: 4023341.797 ops/s
# Warmup Iteration  29: 3937782.967 ops/s
# Warmup Iteration  30: 3919420.848 ops/s
Iteration   1: 3902206.058 ops/s
Iteration   2: 3963811.041 ops/s
Iteration   3: 3941874.669 ops/s
Iteration   4: 3957507.300 ops/s
Iteration   5: 3922891.967 ops/s
Iteration   6: 3916430.506 ops/s
Iteration   7: 3942955.154 ops/s
Iteration   8: 3931905.928 ops/s
Iteration   9: 3943978.880 ops/s
Iteration  10: 3924813.909 ops/s
Iteration  11: 3971660.602 ops/s
Iteration  12: 3912253.115 ops/s
Iteration  13: 3934485.357 ops/s
Iteration  14: 3995296.910 ops/s
Iteration  15: 3965603.119 ops/s
Iteration  16: 3913685.335 ops/s
Iteration  17: 3894247.676 ops/s
Iteration  18: 3922525.549 ops/s
Iteration  19: 3908981.599 ops/s
Iteration  20: 3948683.032 ops/s
Iteration  21: 3982001.158 ops/s
Iteration  22: 3950869.093 ops/s
Iteration  23: 3951591.057 ops/s
Iteration  24: 3954406.726 ops/s
Iteration  25: 3951300.872 ops/s
Iteration  26: 3933376.057 ops/s
Iteration  27: 3907457.664 ops/s
Iteration  28: 3979613.375 ops/s
Iteration  29: 3963897.848 ops/s
Iteration  30: 3934858.082 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_anySatisfy":
  3940838.988 ±(99.9%) 16974.421 ops/s [Average]
  (min, avg, max) = (3894247.676, 3940838.988, 3995296.910), stdev = 25406.516
  CI (99.9%): [3923864.567, 3957813.409] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_anySatisfy  thrpt   30  3940838.988 ± 16974.421  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2673840.665 ops/s
# Warmup Iteration   2: 5602919.675 ops/s
# Warmup Iteration   3: 4970265.909 ops/s
# Warmup Iteration   4: 5202059.125 ops/s
# Warmup Iteration   5: 5526542.224 ops/s
# Warmup Iteration   6: 5567896.422 ops/s
# Warmup Iteration   7: 5530918.297 ops/s
# Warmup Iteration   8: 5567020.793 ops/s
# Warmup Iteration   9: 5546149.593 ops/s
# Warmup Iteration  10: 5554129.149 ops/s
# Warmup Iteration  11: 5621069.468 ops/s
# Warmup Iteration  12: 5562822.245 ops/s
# Warmup Iteration  13: 5575900.253 ops/s
# Warmup Iteration  14: 5563767.580 ops/s
# Warmup Iteration  15: 5546402.098 ops/s
# Warmup Iteration  16: 5593390.881 ops/s
# Warmup Iteration  17: 5584752.164 ops/s
# Warmup Iteration  18: 5544401.189 ops/s
# Warmup Iteration  19: 5546779.717 ops/s
# Warmup Iteration  20: 5508546.843 ops/s
# Warmup Iteration  21: 5526147.685 ops/s
# Warmup Iteration  22: 5507830.285 ops/s
# Warmup Iteration  23: 5470692.806 ops/s
# Warmup Iteration  24: 5549167.046 ops/s
# Warmup Iteration  25: 5622490.481 ops/s
# Warmup Iteration  26: 5574294.845 ops/s
# Warmup Iteration  27: 5550491.378 ops/s
# Warmup Iteration  28: 5571463.305 ops/s
# Warmup Iteration  29: 5635193.241 ops/s
# Warmup Iteration  30: 5572690.680 ops/s
Iteration   1: 5614876.750 ops/s
Iteration   2: 5564352.998 ops/s
Iteration   3: 5532464.645 ops/s
Iteration   4: 5629421.140 ops/s
Iteration   5: 5592661.479 ops/s
Iteration   6: 5389033.744 ops/s
Iteration   7: 5531012.831 ops/s
Iteration   8: 5625003.206 ops/s
Iteration   9: 5666895.146 ops/s
Iteration  10: 5618696.660 ops/s
Iteration  11: 5521379.096 ops/s
Iteration  12: 5513245.484 ops/s
Iteration  13: 5376895.591 ops/s
Iteration  14: 5490811.381 ops/s
Iteration  15: 5463308.282 ops/s
Iteration  16: 5527699.257 ops/s
Iteration  17: 5582262.094 ops/s
Iteration  18: 5556399.208 ops/s
Iteration  19: 5466517.535 ops/s
Iteration  20: 5470515.679 ops/s
Iteration  21: 5519516.528 ops/s
Iteration  22: 5596946.405 ops/s
Iteration  23: 5619597.800 ops/s
Iteration  24: 5606914.359 ops/s
Iteration  25: 5654181.273 ops/s
Iteration  26: 5589929.636 ops/s
Iteration  27: 5690406.971 ops/s
Iteration  28: 5561470.004 ops/s
Iteration  29: 5606857.358 ops/s
Iteration  30: 5537468.224 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_anySatisfyWith":
  5557224.692 ±(99.9%) 50621.773 ops/s [Average]
  (min, avg, max) = (5376895.591, 5557224.692, 5690406.971), stdev = 75768.292
  CI (99.9%): [5506602.919, 5607846.465] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  5557224.692 ± 50621.773  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1047276.796 ops/s
# Warmup Iteration   2: 2393218.428 ops/s
# Warmup Iteration   3: 2380554.860 ops/s
# Warmup Iteration   4: 2016360.198 ops/s
# Warmup Iteration   5: 2422233.786 ops/s
# Warmup Iteration   6: 2389096.175 ops/s
# Warmup Iteration   7: 2350785.795 ops/s
# Warmup Iteration   8: 2375079.076 ops/s
# Warmup Iteration   9: 2373013.643 ops/s
# Warmup Iteration  10: 2394231.110 ops/s
# Warmup Iteration  11: 2403618.538 ops/s
# Warmup Iteration  12: 2355292.972 ops/s
# Warmup Iteration  13: 2368032.274 ops/s
# Warmup Iteration  14: 2378510.644 ops/s
# Warmup Iteration  15: 2368699.133 ops/s
# Warmup Iteration  16: 2377080.431 ops/s
# Warmup Iteration  17: 2384539.587 ops/s
# Warmup Iteration  18: 2372680.704 ops/s
# Warmup Iteration  19: 2393954.895 ops/s
# Warmup Iteration  20: 2395275.780 ops/s
# Warmup Iteration  21: 2390510.141 ops/s
# Warmup Iteration  22: 2385696.204 ops/s
# Warmup Iteration  23: 2363555.822 ops/s
# Warmup Iteration  24: 2344220.941 ops/s
# Warmup Iteration  25: 2356384.801 ops/s
# Warmup Iteration  26: 2339704.124 ops/s
# Warmup Iteration  27: 2360357.992 ops/s
# Warmup Iteration  28: 2377400.088 ops/s
# Warmup Iteration  29: 2384942.046 ops/s
# Warmup Iteration  30: 2337432.559 ops/s
Iteration   1: 2342149.457 ops/s
Iteration   2: 2351441.309 ops/s
Iteration   3: 2376660.611 ops/s
Iteration   4: 2392015.284 ops/s
Iteration   5: 2368432.466 ops/s
Iteration   6: 2379851.835 ops/s
Iteration   7: 2374203.251 ops/s
Iteration   8: 2339142.448 ops/s
Iteration   9: 2365792.013 ops/s
Iteration  10: 2368728.090 ops/s
Iteration  11: 2378701.144 ops/s
Iteration  12: 2390796.966 ops/s
Iteration  13: 2373040.712 ops/s
Iteration  14: 2346349.527 ops/s
Iteration  15: 2392502.620 ops/s
Iteration  16: 2352200.507 ops/s
Iteration  17: 2384457.188 ops/s
Iteration  18: 2368382.237 ops/s
Iteration  19: 2360847.391 ops/s
Iteration  20: 2380728.452 ops/s
Iteration  21: 2382723.483 ops/s
Iteration  22: 2335409.666 ops/s
Iteration  23: 2365141.400 ops/s
Iteration  24: 2373941.118 ops/s
Iteration  25: 2360105.311 ops/s
Iteration  26: 2378371.159 ops/s
Iteration  27: 2373766.533 ops/s
Iteration  28: 2339119.222 ops/s
Iteration  29: 2347865.126 ops/s
Iteration  30: 2371590.471 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_appendString":
  2367148.567 ±(99.9%) 10978.342 ops/s [Average]
  (min, avg, max) = (2335409.666, 2367148.567, 2392502.620), stdev = 16431.867
  CI (99.9%): [2356170.224, 2378126.909] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_appendString  thrpt   30  2367148.567 ± 10978.342  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1326928.291 ops/s
# Warmup Iteration   2: 3359797.206 ops/s
# Warmup Iteration   3: 3329106.314 ops/s
# Warmup Iteration   4: 2859687.832 ops/s
# Warmup Iteration   5: 3378366.102 ops/s
# Warmup Iteration   6: 3367723.041 ops/s
# Warmup Iteration   7: 3380470.341 ops/s
# Warmup Iteration   8: 3382150.222 ops/s
# Warmup Iteration   9: 3350977.555 ops/s
# Warmup Iteration  10: 3395284.091 ops/s
# Warmup Iteration  11: 3388220.159 ops/s
# Warmup Iteration  12: 3374390.617 ops/s
# Warmup Iteration  13: 3377309.528 ops/s
# Warmup Iteration  14: 3355153.793 ops/s
# Warmup Iteration  15: 3371298.080 ops/s
# Warmup Iteration  16: 3401886.774 ops/s
# Warmup Iteration  17: 3391926.369 ops/s
# Warmup Iteration  18: 3349953.405 ops/s
# Warmup Iteration  19: 3392458.037 ops/s
# Warmup Iteration  20: 3344575.426 ops/s
# Warmup Iteration  21: 3371583.485 ops/s
# Warmup Iteration  22: 3358895.228 ops/s
# Warmup Iteration  23: 3357554.304 ops/s
# Warmup Iteration  24: 3389607.667 ops/s
# Warmup Iteration  25: 3395479.002 ops/s
# Warmup Iteration  26: 3404181.419 ops/s
# Warmup Iteration  27: 3381719.115 ops/s
# Warmup Iteration  28: 3395307.299 ops/s
# Warmup Iteration  29: 3387736.105 ops/s
# Warmup Iteration  30: 3355562.696 ops/s
Iteration   1: 3321969.938 ops/s
Iteration   2: 3386549.264 ops/s
Iteration   3: 3372759.647 ops/s
Iteration   4: 3384711.967 ops/s
Iteration   5: 3380920.514 ops/s
Iteration   6: 3443921.652 ops/s
Iteration   7: 3406178.925 ops/s
Iteration   8: 3343256.875 ops/s
Iteration   9: 3345343.707 ops/s
Iteration  10: 3374678.040 ops/s
Iteration  11: 3374841.045 ops/s
Iteration  12: 3418290.579 ops/s
Iteration  13: 3342211.028 ops/s
Iteration  14: 3357573.989 ops/s
Iteration  15: 3344749.703 ops/s
Iteration  16: 3378876.206 ops/s
Iteration  17: 3360364.996 ops/s
Iteration  18: 3407881.211 ops/s
Iteration  19: 3366394.869 ops/s
Iteration  20: 3374277.888 ops/s
Iteration  21: 3388028.580 ops/s
Iteration  22: 3309571.355 ops/s
Iteration  23: 3359684.254 ops/s
Iteration  24: 3389244.398 ops/s
Iteration  25: 3416836.837 ops/s
Iteration  26: 3348819.182 ops/s
Iteration  27: 3330191.265 ops/s
Iteration  28: 3319382.115 ops/s
Iteration  29: 3363084.429 ops/s
Iteration  30: 3342635.585 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_asLazy":
  3368441.001 ±(99.9%) 20969.007 ops/s [Average]
  (min, avg, max) = (3309571.355, 3368441.001, 3443921.652), stdev = 31385.426
  CI (99.9%): [3347471.994, 3389410.009] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_asLazy  thrpt   30  3368441.001 ± 20969.007  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2685345.738 ops/s
# Warmup Iteration   2: 6147672.868 ops/s
# Warmup Iteration   3: 5204539.789 ops/s
# Warmup Iteration   4: 6203179.861 ops/s
# Warmup Iteration   5: 6193904.825 ops/s
# Warmup Iteration   6: 6256983.483 ops/s
# Warmup Iteration   7: 6176788.620 ops/s
# Warmup Iteration   8: 6209122.400 ops/s
# Warmup Iteration   9: 6226727.482 ops/s
# Warmup Iteration  10: 6289965.739 ops/s
# Warmup Iteration  11: 6252328.549 ops/s
# Warmup Iteration  12: 6177439.166 ops/s
# Warmup Iteration  13: 6231348.053 ops/s
# Warmup Iteration  14: 6222448.977 ops/s
# Warmup Iteration  15: 6180435.874 ops/s
# Warmup Iteration  16: 6165577.058 ops/s
# Warmup Iteration  17: 6212667.364 ops/s
# Warmup Iteration  18: 6200300.101 ops/s
# Warmup Iteration  19: 6217543.102 ops/s
# Warmup Iteration  20: 6181373.669 ops/s
# Warmup Iteration  21: 6159318.965 ops/s
# Warmup Iteration  22: 6144699.150 ops/s
# Warmup Iteration  23: 6237491.862 ops/s
# Warmup Iteration  24: 6248351.779 ops/s
# Warmup Iteration  25: 6236656.005 ops/s
# Warmup Iteration  26: 6194427.054 ops/s
# Warmup Iteration  27: 6222541.595 ops/s
# Warmup Iteration  28: 6243540.861 ops/s
# Warmup Iteration  29: 6201438.043 ops/s
# Warmup Iteration  30: 6260846.435 ops/s
Iteration   1: 6294331.379 ops/s
Iteration   2: 6359540.087 ops/s
Iteration   3: 6342790.988 ops/s
Iteration   4: 6230299.078 ops/s
Iteration   5: 6172976.010 ops/s
Iteration   6: 6281741.361 ops/s
Iteration   7: 6201989.129 ops/s
Iteration   8: 6211139.380 ops/s
Iteration   9: 6244870.966 ops/s
Iteration  10: 6208136.162 ops/s
Iteration  11: 6105877.182 ops/s
Iteration  12: 6186910.073 ops/s
Iteration  13: 6184822.876 ops/s
Iteration  14: 6196014.603 ops/s
Iteration  15: 6176200.975 ops/s
Iteration  16: 6188623.969 ops/s
Iteration  17: 6205154.825 ops/s
Iteration  18: 6261414.793 ops/s
Iteration  19: 6215065.864 ops/s
Iteration  20: 6280279.426 ops/s
Iteration  21: 6276325.763 ops/s
Iteration  22: 6207903.513 ops/s
Iteration  23: 6120050.556 ops/s
Iteration  24: 6160368.294 ops/s
Iteration  25: 6227926.431 ops/s
Iteration  26: 6204447.315 ops/s
Iteration  27: 6257605.291 ops/s
Iteration  28: 6165289.014 ops/s
Iteration  29: 6202383.797 ops/s
Iteration  30: 6156542.599 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_asSynchronized":
  6217567.390 ±(99.9%) 38745.450 ops/s [Average]
  (min, avg, max) = (6105877.182, 6217567.390, 6359540.087), stdev = 57992.370
  CI (99.9%): [6178821.940, 6256312.840] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_asSynchronized  thrpt   30  6217567.390 ± 38745.450  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 534325.102 ops/s
# Warmup Iteration   2: 659257.833 ops/s
# Warmup Iteration   3: 822823.501 ops/s
# Warmup Iteration   4: 820891.792 ops/s
# Warmup Iteration   5: 829324.844 ops/s
# Warmup Iteration   6: 830880.384 ops/s
# Warmup Iteration   7: 830586.367 ops/s
# Warmup Iteration   8: 785401.399 ops/s
# Warmup Iteration   9: 721009.312 ops/s
# Warmup Iteration  10: 828057.950 ops/s
# Warmup Iteration  11: 826141.242 ops/s
# Warmup Iteration  12: 823554.800 ops/s
# Warmup Iteration  13: 828744.047 ops/s
# Warmup Iteration  14: 821238.578 ops/s
# Warmup Iteration  15: 828091.949 ops/s
# Warmup Iteration  16: 824225.077 ops/s
# Warmup Iteration  17: 851933.659 ops/s
# Warmup Iteration  18: 874405.897 ops/s
# Warmup Iteration  19: 860589.232 ops/s
# Warmup Iteration  20: 866755.209 ops/s
# Warmup Iteration  21: 863054.042 ops/s
# Warmup Iteration  22: 857942.884 ops/s
# Warmup Iteration  23: 856674.618 ops/s
# Warmup Iteration  24: 852382.376 ops/s
# Warmup Iteration  25: 866651.599 ops/s
# Warmup Iteration  26: 855260.629 ops/s
# Warmup Iteration  27: 870169.645 ops/s
# Warmup Iteration  28: 863854.992 ops/s
# Warmup Iteration  29: 861014.030 ops/s
# Warmup Iteration  30: 861530.681 ops/s
Iteration   1: 860599.611 ops/s
Iteration   2: 865737.007 ops/s
Iteration   3: 865411.744 ops/s
Iteration   4: 867469.363 ops/s
Iteration   5: 875723.468 ops/s
Iteration   6: 870724.408 ops/s
Iteration   7: 867379.166 ops/s
Iteration   8: 877819.612 ops/s
Iteration   9: 864530.322 ops/s
Iteration  10: 869070.153 ops/s
Iteration  11: 868689.528 ops/s
Iteration  12: 860623.019 ops/s
Iteration  13: 862736.829 ops/s
Iteration  14: 861736.677 ops/s
Iteration  15: 861028.849 ops/s
Iteration  16: 859083.342 ops/s
Iteration  17: 865304.133 ops/s
Iteration  18: 853879.977 ops/s
Iteration  19: 867947.586 ops/s
Iteration  20: 855689.661 ops/s
Iteration  21: 872204.670 ops/s
Iteration  22: 857579.296 ops/s
Iteration  23: 871959.413 ops/s
Iteration  24: 862809.238 ops/s
Iteration  25: 846644.969 ops/s
Iteration  26: 860106.482 ops/s
Iteration  27: 861792.913 ops/s
Iteration  28: 856173.666 ops/s
Iteration  29: 858870.844 ops/s
Iteration  30: 867608.733 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_asUnmodifiable":
  863897.823 ±(99.9%) 4466.943 ops/s [Average]
  (min, avg, max) = (846644.969, 863897.823, 877819.612), stdev = 6685.910
  CI (99.9%): [859430.880, 868364.765] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  863897.823 ± 4466.943  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1258273.407 ops/s
# Warmup Iteration   2: 3232106.747 ops/s
# Warmup Iteration   3: 2879341.340 ops/s
# Warmup Iteration   4: 3070346.108 ops/s
# Warmup Iteration   5: 3234514.663 ops/s
# Warmup Iteration   6: 3250707.569 ops/s
# Warmup Iteration   7: 3252540.706 ops/s
# Warmup Iteration   8: 3230942.558 ops/s
# Warmup Iteration   9: 3235197.586 ops/s
# Warmup Iteration  10: 3251053.814 ops/s
# Warmup Iteration  11: 3260230.666 ops/s
# Warmup Iteration  12: 3266545.366 ops/s
# Warmup Iteration  13: 3263521.044 ops/s
# Warmup Iteration  14: 3269180.127 ops/s
# Warmup Iteration  15: 3259774.903 ops/s
# Warmup Iteration  16: 3271769.539 ops/s
# Warmup Iteration  17: 3255829.216 ops/s
# Warmup Iteration  18: 3259340.859 ops/s
# Warmup Iteration  19: 3252507.971 ops/s
# Warmup Iteration  20: 3293543.673 ops/s
# Warmup Iteration  21: 3235141.249 ops/s
# Warmup Iteration  22: 3239577.768 ops/s
# Warmup Iteration  23: 3265689.172 ops/s
# Warmup Iteration  24: 3288908.100 ops/s
# Warmup Iteration  25: 3258433.291 ops/s
# Warmup Iteration  26: 3249571.660 ops/s
# Warmup Iteration  27: 3268390.042 ops/s
# Warmup Iteration  28: 3251170.752 ops/s
# Warmup Iteration  29: 3216101.909 ops/s
# Warmup Iteration  30: 3283685.517 ops/s
Iteration   1: 3203117.840 ops/s
Iteration   2: 3237141.394 ops/s
Iteration   3: 3233067.991 ops/s
Iteration   4: 3282202.893 ops/s
Iteration   5: 3265723.087 ops/s
Iteration   6: 3215721.890 ops/s
Iteration   7: 3233723.688 ops/s
Iteration   8: 3269730.454 ops/s
Iteration   9: 3202609.762 ops/s
Iteration  10: 3268857.834 ops/s
Iteration  11: 3211772.023 ops/s
Iteration  12: 3253830.879 ops/s
Iteration  13: 3242429.704 ops/s
Iteration  14: 3280325.666 ops/s
Iteration  15: 3290636.584 ops/s
Iteration  16: 3286348.795 ops/s
Iteration  17: 3261977.334 ops/s
Iteration  18: 3253263.150 ops/s
Iteration  19: 3319286.697 ops/s
Iteration  20: 3244415.337 ops/s
Iteration  21: 3213337.091 ops/s
Iteration  22: 3236627.523 ops/s
Iteration  23: 3291089.759 ops/s
Iteration  24: 3264727.439 ops/s
Iteration  25: 3290154.634 ops/s
Iteration  26: 3242650.769 ops/s
Iteration  27: 3225592.469 ops/s
Iteration  28: 3254520.297 ops/s
Iteration  29: 3280453.353 ops/s
Iteration  30: 3242993.872 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_chunk":
  3253277.674 ±(99.9%) 19671.869 ops/s [Average]
  (min, avg, max) = (3202609.762, 3253277.674, 3319286.697), stdev = 29443.929
  CI (99.9%): [3233605.805, 3272949.542] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_chunk  thrpt   30  3253277.674 ± 19671.869  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1264595.782 ops/s
# Warmup Iteration   2: 2837977.929 ops/s
# Warmup Iteration   3: 2342415.519 ops/s
# Warmup Iteration   4: 2834638.466 ops/s
# Warmup Iteration   5: 2778822.333 ops/s
# Warmup Iteration   6: 2820526.357 ops/s
# Warmup Iteration   7: 2819091.631 ops/s
# Warmup Iteration   8: 2825220.813 ops/s
# Warmup Iteration   9: 2815282.347 ops/s
# Warmup Iteration  10: 2818255.713 ops/s
# Warmup Iteration  11: 2826399.594 ops/s
# Warmup Iteration  12: 2828866.057 ops/s
# Warmup Iteration  13: 2818274.047 ops/s
# Warmup Iteration  14: 2829011.221 ops/s
# Warmup Iteration  15: 2810247.915 ops/s
# Warmup Iteration  16: 2813432.455 ops/s
# Warmup Iteration  17: 2825012.474 ops/s
# Warmup Iteration  18: 2796359.470 ops/s
# Warmup Iteration  19: 2842671.975 ops/s
# Warmup Iteration  20: 2792166.606 ops/s
# Warmup Iteration  21: 2810532.477 ops/s
# Warmup Iteration  22: 2789270.298 ops/s
# Warmup Iteration  23: 2824848.626 ops/s
# Warmup Iteration  24: 2845900.903 ops/s
# Warmup Iteration  25: 2819828.672 ops/s
# Warmup Iteration  26: 2800597.381 ops/s
# Warmup Iteration  27: 2805410.273 ops/s
# Warmup Iteration  28: 2836946.011 ops/s
# Warmup Iteration  29: 2838600.024 ops/s
# Warmup Iteration  30: 2804915.092 ops/s
Iteration   1: 2821054.952 ops/s
Iteration   2: 2847627.786 ops/s
Iteration   3: 2868071.437 ops/s
Iteration   4: 2817715.726 ops/s
Iteration   5: 2856864.791 ops/s
Iteration   6: 2797739.449 ops/s
Iteration   7: 2848293.189 ops/s
Iteration   8: 2870870.730 ops/s
Iteration   9: 2832803.027 ops/s
Iteration  10: 2805557.327 ops/s
Iteration  11: 2835732.023 ops/s
Iteration  12: 2808762.895 ops/s
Iteration  13: 2811126.815 ops/s
Iteration  14: 2791890.495 ops/s
Iteration  15: 2831658.391 ops/s
Iteration  16: 2839666.600 ops/s
Iteration  17: 2806923.281 ops/s
Iteration  18: 2846305.584 ops/s
Iteration  19: 2829284.345 ops/s
Iteration  20: 2857847.208 ops/s
Iteration  21: 2830169.103 ops/s
Iteration  22: 2811611.536 ops/s
Iteration  23: 2813705.481 ops/s
Iteration  24: 2808963.864 ops/s
Iteration  25: 2834389.449 ops/s
Iteration  26: 2840719.333 ops/s
Iteration  27: 2789186.620 ops/s
Iteration  28: 2844561.601 ops/s
Iteration  29: 2816521.280 ops/s
Iteration  30: 2849018.009 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_clear":
  2828821.411 ±(99.9%) 14620.110 ops/s [Average]
  (min, avg, max) = (2789186.620, 2828821.411, 2870870.730), stdev = 21882.695
  CI (99.9%): [2814201.300, 2843441.521] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_clear  thrpt   30  2828821.411 ± 14620.110  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_clearEntrySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_clearEntrySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2187797.720 ops/s
# Warmup Iteration   2: 5029342.132 ops/s
# Warmup Iteration   3: 4299265.879 ops/s
# Warmup Iteration   4: 4980047.791 ops/s
# Warmup Iteration   5: 5128108.054 ops/s
# Warmup Iteration   6: 5066191.151 ops/s
# Warmup Iteration   7: 5092228.245 ops/s
# Warmup Iteration   8: 5067717.082 ops/s
# Warmup Iteration   9: 5105166.111 ops/s
# Warmup Iteration  10: 5081936.169 ops/s
# Warmup Iteration  11: 5060539.324 ops/s
# Warmup Iteration  12: 5100243.175 ops/s
# Warmup Iteration  13: 5025597.336 ops/s
# Warmup Iteration  14: 5046039.055 ops/s
# Warmup Iteration  15: 5071244.682 ops/s
# Warmup Iteration  16: 5133818.493 ops/s
# Warmup Iteration  17: 5065223.469 ops/s
# Warmup Iteration  18: 5087690.773 ops/s
# Warmup Iteration  19: 5113398.841 ops/s
# Warmup Iteration  20: 5051876.597 ops/s
# Warmup Iteration  21: 5006776.258 ops/s
# Warmup Iteration  22: 5056188.818 ops/s
# Warmup Iteration  23: 5054822.403 ops/s
# Warmup Iteration  24: 5038957.877 ops/s
# Warmup Iteration  25: 5092080.992 ops/s
# Warmup Iteration  26: 5056069.614 ops/s
# Warmup Iteration  27: 5037734.995 ops/s
# Warmup Iteration  28: 5139793.706 ops/s
# Warmup Iteration  29: 5108269.062 ops/s
# Warmup Iteration  30: 5034952.107 ops/s
Iteration   1: 5103274.127 ops/s
Iteration   2: 5147300.633 ops/s
Iteration   3: 5081709.195 ops/s
Iteration   4: 5123904.171 ops/s
Iteration   5: 5116542.818 ops/s
Iteration   6: 5122724.339 ops/s
Iteration   7: 5163045.316 ops/s
Iteration   8: 5112813.550 ops/s
Iteration   9: 5020565.962 ops/s
Iteration  10: 5045708.474 ops/s
Iteration  11: 5138823.232 ops/s
Iteration  12: 5026800.222 ops/s
Iteration  13: 5137984.894 ops/s
Iteration  14: 5045758.466 ops/s
Iteration  15: 4969136.071 ops/s
Iteration  16: 5029194.743 ops/s
Iteration  17: 5018294.403 ops/s
Iteration  18: 5093188.296 ops/s
Iteration  19: 5079877.369 ops/s
Iteration  20: 5069361.817 ops/s
Iteration  21: 5038343.924 ops/s
Iteration  22: 5082874.857 ops/s
Iteration  23: 5092105.072 ops/s
Iteration  24: 5036990.892 ops/s
Iteration  25: 5133105.853 ops/s
Iteration  26: 5106278.189 ops/s
Iteration  27: 5091094.068 ops/s
Iteration  28: 5095298.840 ops/s
Iteration  29: 5077807.725 ops/s
Iteration  30: 5085478.761 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_clearEntrySet":
  5082846.209 ±(99.9%) 30398.614 ops/s [Average]
  (min, avg, max) = (4969136.071, 5082846.209, 5163045.316), stdev = 45499.218
  CI (99.9%): [5052447.595, 5113244.824] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_clearEntrySet  thrpt   30  5082846.209 ± 30398.614  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_clearKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_clearKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2184339.409 ops/s
# Warmup Iteration   2: 5032538.806 ops/s
# Warmup Iteration   3: 4275645.633 ops/s
# Warmup Iteration   4: 4851394.632 ops/s
# Warmup Iteration   5: 5072985.519 ops/s
# Warmup Iteration   6: 5048272.582 ops/s
# Warmup Iteration   7: 5067378.231 ops/s
# Warmup Iteration   8: 5017135.184 ops/s
# Warmup Iteration   9: 4967131.198 ops/s
# Warmup Iteration  10: 5039328.177 ops/s
# Warmup Iteration  11: 5090763.754 ops/s
# Warmup Iteration  12: 5044676.388 ops/s
# Warmup Iteration  13: 5034349.196 ops/s
# Warmup Iteration  14: 4984918.798 ops/s
# Warmup Iteration  15: 5010482.119 ops/s
# Warmup Iteration  16: 5049723.141 ops/s
# Warmup Iteration  17: 4986587.023 ops/s
# Warmup Iteration  18: 5102352.374 ops/s
# Warmup Iteration  19: 4998441.688 ops/s
# Warmup Iteration  20: 5036570.173 ops/s
# Warmup Iteration  21: 5009021.810 ops/s
# Warmup Iteration  22: 5035504.814 ops/s
# Warmup Iteration  23: 5048128.993 ops/s
# Warmup Iteration  24: 5072316.750 ops/s
# Warmup Iteration  25: 5026663.201 ops/s
# Warmup Iteration  26: 5018647.928 ops/s
# Warmup Iteration  27: 5050796.570 ops/s
# Warmup Iteration  28: 5014043.023 ops/s
# Warmup Iteration  29: 5016215.877 ops/s
# Warmup Iteration  30: 5017664.594 ops/s
Iteration   1: 5024141.971 ops/s
Iteration   2: 5089470.977 ops/s
Iteration   3: 5106246.774 ops/s
Iteration   4: 5130705.781 ops/s
Iteration   5: 5064339.253 ops/s
Iteration   6: 5092015.252 ops/s
Iteration   7: 5035404.504 ops/s
Iteration   8: 5038926.903 ops/s
Iteration   9: 5017461.135 ops/s
Iteration  10: 5028483.231 ops/s
Iteration  11: 5076747.015 ops/s
Iteration  12: 5024380.230 ops/s
Iteration  13: 4957197.459 ops/s
Iteration  14: 5071982.535 ops/s
Iteration  15: 5034804.681 ops/s
Iteration  16: 5063694.660 ops/s
Iteration  17: 5021721.416 ops/s
Iteration  18: 4998684.683 ops/s
Iteration  19: 4972466.304 ops/s
Iteration  20: 5064658.943 ops/s
Iteration  21: 4999327.746 ops/s
Iteration  22: 5039992.448 ops/s
Iteration  23: 5076642.754 ops/s
Iteration  24: 5021768.873 ops/s
Iteration  25: 5067528.740 ops/s
Iteration  26: 5031738.574 ops/s
Iteration  27: 5053424.742 ops/s
Iteration  28: 5039540.441 ops/s
Iteration  29: 4954402.416 ops/s
Iteration  30: 5002466.470 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_clearKeySet":
  5040012.230 ±(99.9%) 27636.052 ops/s [Average]
  (min, avg, max) = (4954402.416, 5040012.230, 5130705.781), stdev = 41364.345
  CI (99.9%): [5012376.178, 5067648.282] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_clearKeySet  thrpt   30  5040012.230 ± 27636.052  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 527838.893 ops/s
# Warmup Iteration   2: 1020230.877 ops/s
# Warmup Iteration   3: 1136797.334 ops/s
# Warmup Iteration   4: 1158282.577 ops/s
# Warmup Iteration   5: 932840.197 ops/s
# Warmup Iteration   6: 1142385.605 ops/s
# Warmup Iteration   7: 1168166.723 ops/s
# Warmup Iteration   8: 1164853.736 ops/s
# Warmup Iteration   9: 1153248.248 ops/s
# Warmup Iteration  10: 1149941.633 ops/s
# Warmup Iteration  11: 1155074.648 ops/s
# Warmup Iteration  12: 1139207.453 ops/s
# Warmup Iteration  13: 1143423.812 ops/s
# Warmup Iteration  14: 1127788.880 ops/s
# Warmup Iteration  15: 1147684.164 ops/s
# Warmup Iteration  16: 1130814.481 ops/s
# Warmup Iteration  17: 1142248.939 ops/s
# Warmup Iteration  18: 1131832.442 ops/s
# Warmup Iteration  19: 1131951.681 ops/s
# Warmup Iteration  20: 1129756.051 ops/s
# Warmup Iteration  21: 1147848.873 ops/s
# Warmup Iteration  22: 1143816.132 ops/s
# Warmup Iteration  23: 1140783.898 ops/s
# Warmup Iteration  24: 1143478.201 ops/s
# Warmup Iteration  25: 1136490.408 ops/s
# Warmup Iteration  26: 1136205.741 ops/s
# Warmup Iteration  27: 1150804.301 ops/s
# Warmup Iteration  28: 1149886.438 ops/s
# Warmup Iteration  29: 1134720.874 ops/s
# Warmup Iteration  30: 1144296.053 ops/s
Iteration   1: 1145777.619 ops/s
Iteration   2: 1146208.614 ops/s
Iteration   3: 1140890.501 ops/s
Iteration   4: 1149078.122 ops/s
Iteration   5: 1132473.291 ops/s
Iteration   6: 1157313.161 ops/s
Iteration   7: 1157018.877 ops/s
Iteration   8: 1147781.165 ops/s
Iteration   9: 1142411.751 ops/s
Iteration  10: 1145227.176 ops/s
Iteration  11: 1151701.133 ops/s
Iteration  12: 1147420.025 ops/s
Iteration  13: 1132985.116 ops/s
Iteration  14: 1139593.006 ops/s
Iteration  15: 1132844.462 ops/s
Iteration  16: 1140899.094 ops/s
Iteration  17: 1163011.594 ops/s
Iteration  18: 1132483.603 ops/s
Iteration  19: 1138652.577 ops/s
Iteration  20: 1142803.993 ops/s
Iteration  21: 1137711.773 ops/s
Iteration  22: 1145546.906 ops/s
Iteration  23: 1139812.568 ops/s
Iteration  24: 1141954.847 ops/s
Iteration  25: 1153886.215 ops/s
Iteration  26: 1149206.803 ops/s
Iteration  27: 1122253.205 ops/s
Iteration  28: 1148802.291 ops/s
Iteration  29: 1128719.725 ops/s
Iteration  30: 1141376.983 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collect":
  1143194.873 ±(99.9%) 5971.571 ops/s [Average]
  (min, avg, max) = (1122253.205, 1143194.873, 1163011.594), stdev = 8937.966
  CI (99.9%): [1137223.303, 1149166.444] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collect  thrpt   30  1143194.873 ± 5971.571  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1932353.518 ops/s
# Warmup Iteration   2: 4651900.319 ops/s
# Warmup Iteration   3: 4648050.109 ops/s
# Warmup Iteration   4: 3836534.257 ops/s
# Warmup Iteration   5: 4745068.799 ops/s
# Warmup Iteration   6: 4684583.721 ops/s
# Warmup Iteration   7: 4663507.888 ops/s
# Warmup Iteration   8: 4704361.013 ops/s
# Warmup Iteration   9: 4721094.651 ops/s
# Warmup Iteration  10: 4765311.169 ops/s
# Warmup Iteration  11: 4719938.495 ops/s
# Warmup Iteration  12: 4707373.988 ops/s
# Warmup Iteration  13: 4711338.908 ops/s
# Warmup Iteration  14: 4704548.392 ops/s
# Warmup Iteration  15: 4715402.900 ops/s
# Warmup Iteration  16: 4659028.462 ops/s
# Warmup Iteration  17: 4729311.972 ops/s
# Warmup Iteration  18: 4704000.737 ops/s
# Warmup Iteration  19: 4703301.358 ops/s
# Warmup Iteration  20: 4687603.810 ops/s
# Warmup Iteration  21: 4699100.423 ops/s
# Warmup Iteration  22: 4682887.553 ops/s
# Warmup Iteration  23: 4750173.439 ops/s
# Warmup Iteration  24: 4701970.485 ops/s
# Warmup Iteration  25: 4697717.744 ops/s
# Warmup Iteration  26: 4705695.450 ops/s
# Warmup Iteration  27: 4712942.045 ops/s
# Warmup Iteration  28: 4667662.359 ops/s
# Warmup Iteration  29: 4717190.483 ops/s
# Warmup Iteration  30: 4741635.662 ops/s
Iteration   1: 4702581.748 ops/s
Iteration   2: 4736327.966 ops/s
Iteration   3: 4704154.433 ops/s
Iteration   4: 4738286.631 ops/s
Iteration   5: 4746339.371 ops/s
Iteration   6: 4724466.594 ops/s
Iteration   7: 4693451.675 ops/s
Iteration   8: 4767638.373 ops/s
Iteration   9: 4767065.276 ops/s
Iteration  10: 4712284.775 ops/s
Iteration  11: 4705366.010 ops/s
Iteration  12: 4710796.714 ops/s
Iteration  13: 4686867.285 ops/s
Iteration  14: 4789646.825 ops/s
Iteration  15: 4742977.669 ops/s
Iteration  16: 4794965.894 ops/s
Iteration  17: 4824577.018 ops/s
Iteration  18: 4813948.624 ops/s
Iteration  19: 4799684.702 ops/s
Iteration  20: 4689470.380 ops/s
Iteration  21: 4673812.309 ops/s
Iteration  22: 4678967.035 ops/s
Iteration  23: 4773292.680 ops/s
Iteration  24: 4704561.463 ops/s
Iteration  25: 4744116.189 ops/s
Iteration  26: 4730041.698 ops/s
Iteration  27: 4739477.777 ops/s
Iteration  28: 4748544.261 ops/s
Iteration  29: 4731386.704 ops/s
Iteration  30: 4731212.430 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectBoolean":
  4736877.017 ±(99.9%) 26908.214 ops/s [Average]
  (min, avg, max) = (4673812.309, 4736877.017, 4824577.018), stdev = 40274.950
  CI (99.9%): [4709968.803, 4763785.231] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collectBoolean  thrpt   30  4736877.017 ± 26908.214  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2250220.608 ops/s
# Warmup Iteration   2: 5366560.895 ops/s
# Warmup Iteration   3: 4445010.276 ops/s
# Warmup Iteration   4: 5351996.432 ops/s
# Warmup Iteration   5: 5355764.207 ops/s
# Warmup Iteration   6: 5375546.269 ops/s
# Warmup Iteration   7: 5367020.962 ops/s
# Warmup Iteration   8: 5373794.871 ops/s
# Warmup Iteration   9: 5477932.182 ops/s
# Warmup Iteration  10: 5458109.338 ops/s
# Warmup Iteration  11: 5425397.639 ops/s
# Warmup Iteration  12: 5360372.425 ops/s
# Warmup Iteration  13: 5361423.706 ops/s
# Warmup Iteration  14: 5383631.729 ops/s
# Warmup Iteration  15: 5376169.461 ops/s
# Warmup Iteration  16: 5334362.039 ops/s
# Warmup Iteration  17: 5342801.671 ops/s
# Warmup Iteration  18: 5386497.390 ops/s
# Warmup Iteration  19: 5368717.740 ops/s
# Warmup Iteration  20: 5378282.779 ops/s
# Warmup Iteration  21: 5340661.556 ops/s
# Warmup Iteration  22: 5390506.511 ops/s
# Warmup Iteration  23: 5340861.983 ops/s
# Warmup Iteration  24: 5378035.638 ops/s
# Warmup Iteration  25: 5378708.241 ops/s
# Warmup Iteration  26: 5422444.311 ops/s
# Warmup Iteration  27: 5390001.357 ops/s
# Warmup Iteration  28: 5379660.466 ops/s
# Warmup Iteration  29: 5319588.075 ops/s
# Warmup Iteration  30: 5335759.677 ops/s
Iteration   1: 5389319.684 ops/s
Iteration   2: 5305202.969 ops/s
Iteration   3: 5358493.265 ops/s
Iteration   4: 5352895.382 ops/s
Iteration   5: 5397717.929 ops/s
Iteration   6: 5340923.185 ops/s
Iteration   7: 5413436.393 ops/s
Iteration   8: 5355396.270 ops/s
Iteration   9: 5401143.653 ops/s
Iteration  10: 5362491.548 ops/s
Iteration  11: 5397711.617 ops/s
Iteration  12: 5429948.777 ops/s
Iteration  13: 5338713.460 ops/s
Iteration  14: 5345219.708 ops/s
Iteration  15: 5350545.727 ops/s
Iteration  16: 5461509.497 ops/s
Iteration  17: 5371966.504 ops/s
Iteration  18: 5388573.681 ops/s
Iteration  19: 5405844.970 ops/s
Iteration  20: 5349882.684 ops/s
Iteration  21: 5410891.112 ops/s
Iteration  22: 5318248.958 ops/s
Iteration  23: 5406214.695 ops/s
Iteration  24: 5413278.994 ops/s
Iteration  25: 5339547.450 ops/s
Iteration  26: 5385828.195 ops/s
Iteration  27: 5335306.856 ops/s
Iteration  28: 5312328.423 ops/s
Iteration  29: 5341777.691 ops/s
Iteration  30: 5383231.020 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectBooleanWithTarget":
  5372119.677 ±(99.9%) 24986.671 ops/s [Average]
  (min, avg, max) = (5305202.969, 5372119.677, 5461509.497), stdev = 37398.876
  CI (99.9%): [5347133.006, 5397106.348] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  5372119.677 ± 24986.671  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 959968.092 ops/s
# Warmup Iteration   2: 2365411.762 ops/s
# Warmup Iteration   3: 2330895.708 ops/s
# Warmup Iteration   4: 2051746.258 ops/s
# Warmup Iteration   5: 2404572.759 ops/s
# Warmup Iteration   6: 2409201.097 ops/s
# Warmup Iteration   7: 2371482.668 ops/s
# Warmup Iteration   8: 2400348.514 ops/s
# Warmup Iteration   9: 2380797.830 ops/s
# Warmup Iteration  10: 2397085.504 ops/s
# Warmup Iteration  11: 2396093.156 ops/s
# Warmup Iteration  12: 2393021.134 ops/s
# Warmup Iteration  13: 2407856.242 ops/s
# Warmup Iteration  14: 2383397.249 ops/s
# Warmup Iteration  15: 2391282.067 ops/s
# Warmup Iteration  16: 2397620.485 ops/s
# Warmup Iteration  17: 2399025.320 ops/s
# Warmup Iteration  18: 2394730.191 ops/s
# Warmup Iteration  19: 2430507.166 ops/s
# Warmup Iteration  20: 2397765.219 ops/s
# Warmup Iteration  21: 2396105.815 ops/s
# Warmup Iteration  22: 2400319.924 ops/s
# Warmup Iteration  23: 2405246.317 ops/s
# Warmup Iteration  24: 2392673.411 ops/s
# Warmup Iteration  25: 2405077.905 ops/s
# Warmup Iteration  26: 2405162.178 ops/s
# Warmup Iteration  27: 2392538.049 ops/s
# Warmup Iteration  28: 2404857.832 ops/s
# Warmup Iteration  29: 2399606.691 ops/s
# Warmup Iteration  30: 2421719.005 ops/s
Iteration   1: 2400012.216 ops/s
Iteration   2: 2348898.306 ops/s
Iteration   3: 2359142.955 ops/s
Iteration   4: 2396972.432 ops/s
Iteration   5: 2372767.224 ops/s
Iteration   6: 2394690.871 ops/s
Iteration   7: 2375678.392 ops/s
Iteration   8: 2399382.503 ops/s
Iteration   9: 2430130.654 ops/s
Iteration  10: 2441472.480 ops/s
Iteration  11: 2406627.065 ops/s
Iteration  12: 2394973.312 ops/s
Iteration  13: 2403574.415 ops/s
Iteration  14: 2415335.364 ops/s
Iteration  15: 2422262.398 ops/s
Iteration  16: 2406289.211 ops/s
Iteration  17: 2358655.963 ops/s
Iteration  18: 2389552.805 ops/s
Iteration  19: 2392438.484 ops/s
Iteration  20: 2396344.179 ops/s
Iteration  21: 2381272.299 ops/s
Iteration  22: 2381638.355 ops/s
Iteration  23: 2378634.308 ops/s
Iteration  24: 2383237.331 ops/s
Iteration  25: 2392342.869 ops/s
Iteration  26: 2399202.728 ops/s
Iteration  27: 2387065.320 ops/s
Iteration  28: 2397705.270 ops/s
Iteration  29: 2404315.424 ops/s
Iteration  30: 2408030.292 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectByte":
  2393954.848 ±(99.9%) 13399.476 ops/s [Average]
  (min, avg, max) = (2348898.306, 2393954.848, 2441472.480), stdev = 20055.707
  CI (99.9%): [2380555.371, 2407354.324] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collectByte  thrpt   30  2393954.848 ± 13399.476  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 943192.518 ops/s
# Warmup Iteration   2: 2321269.858 ops/s
# Warmup Iteration   3: 2353687.428 ops/s
# Warmup Iteration   4: 1955782.962 ops/s
# Warmup Iteration   5: 2365083.750 ops/s
# Warmup Iteration   6: 2354191.753 ops/s
# Warmup Iteration   7: 2378211.822 ops/s
# Warmup Iteration   8: 2374564.545 ops/s
# Warmup Iteration   9: 2419753.805 ops/s
# Warmup Iteration  10: 2368908.989 ops/s
# Warmup Iteration  11: 2374462.625 ops/s
# Warmup Iteration  12: 2358791.725 ops/s
# Warmup Iteration  13: 2382067.672 ops/s
# Warmup Iteration  14: 2367832.929 ops/s
# Warmup Iteration  15: 2384291.579 ops/s
# Warmup Iteration  16: 2328637.511 ops/s
# Warmup Iteration  17: 2345822.868 ops/s
# Warmup Iteration  18: 2373659.431 ops/s
# Warmup Iteration  19: 2374286.313 ops/s
# Warmup Iteration  20: 2365226.162 ops/s
# Warmup Iteration  21: 2354428.252 ops/s
# Warmup Iteration  22: 2363415.846 ops/s
# Warmup Iteration  23: 2362200.189 ops/s
# Warmup Iteration  24: 2354637.237 ops/s
# Warmup Iteration  25: 2370842.982 ops/s
# Warmup Iteration  26: 2345887.602 ops/s
# Warmup Iteration  27: 2377497.808 ops/s
# Warmup Iteration  28: 2377328.535 ops/s
# Warmup Iteration  29: 2378601.386 ops/s
# Warmup Iteration  30: 2368349.102 ops/s
Iteration   1: 2392349.872 ops/s
Iteration   2: 2385401.217 ops/s
Iteration   3: 2350314.908 ops/s
Iteration   4: 2353650.122 ops/s
Iteration   5: 2316134.981 ops/s
Iteration   6: 2380381.601 ops/s
Iteration   7: 2349217.166 ops/s
Iteration   8: 2351020.833 ops/s
Iteration   9: 2377384.776 ops/s
Iteration  10: 2356439.838 ops/s
Iteration  11: 2366825.707 ops/s
Iteration  12: 2345850.470 ops/s
Iteration  13: 2382527.239 ops/s
Iteration  14: 2349356.524 ops/s
Iteration  15: 2385350.395 ops/s
Iteration  16: 2383823.787 ops/s
Iteration  17: 2385619.957 ops/s
Iteration  18: 2362125.626 ops/s
Iteration  19: 2357922.754 ops/s
Iteration  20: 2377142.385 ops/s
Iteration  21: 2363208.192 ops/s
Iteration  22: 2340620.338 ops/s
Iteration  23: 2331434.242 ops/s
Iteration  24: 2353804.394 ops/s
Iteration  25: 2388554.404 ops/s
Iteration  26: 2357859.586 ops/s
Iteration  27: 2356733.900 ops/s
Iteration  28: 2389720.666 ops/s
Iteration  29: 2376313.865 ops/s
Iteration  30: 2373378.626 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectByteWithTarget":
  2364682.279 ±(99.9%) 12686.048 ops/s [Average]
  (min, avg, max) = (2316134.981, 2364682.279, 2392349.872), stdev = 18987.881
  CI (99.9%): [2351996.231, 2377368.327] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  2364682.279 ± 12686.048  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 986587.397 ops/s
# Warmup Iteration   2: 2339579.287 ops/s
# Warmup Iteration   3: 2362503.162 ops/s
# Warmup Iteration   4: 1951783.635 ops/s
# Warmup Iteration   5: 2369680.377 ops/s
# Warmup Iteration   6: 2390522.665 ops/s
# Warmup Iteration   7: 2366367.402 ops/s
# Warmup Iteration   8: 2374932.560 ops/s
# Warmup Iteration   9: 2375306.858 ops/s
# Warmup Iteration  10: 2355441.438 ops/s
# Warmup Iteration  11: 2372171.819 ops/s
# Warmup Iteration  12: 2365292.950 ops/s
# Warmup Iteration  13: 2387809.327 ops/s
# Warmup Iteration  14: 2375177.555 ops/s
# Warmup Iteration  15: 2355972.306 ops/s
# Warmup Iteration  16: 2344013.607 ops/s
# Warmup Iteration  17: 2348925.922 ops/s
# Warmup Iteration  18: 2357104.755 ops/s
# Warmup Iteration  19: 2358368.222 ops/s
# Warmup Iteration  20: 2366237.412 ops/s
# Warmup Iteration  21: 2350226.403 ops/s
# Warmup Iteration  22: 2354914.869 ops/s
# Warmup Iteration  23: 2370251.657 ops/s
# Warmup Iteration  24: 2367210.350 ops/s
# Warmup Iteration  25: 2373268.878 ops/s
# Warmup Iteration  26: 2368850.023 ops/s
# Warmup Iteration  27: 2365750.966 ops/s
# Warmup Iteration  28: 2373469.070 ops/s
# Warmup Iteration  29: 2378958.542 ops/s
# Warmup Iteration  30: 2372478.650 ops/s
Iteration   1: 2333134.228 ops/s
Iteration   2: 2360290.551 ops/s
Iteration   3: 2358302.777 ops/s
Iteration   4: 2361850.348 ops/s
Iteration   5: 2356496.937 ops/s
Iteration   6: 2358182.379 ops/s
Iteration   7: 2378321.204 ops/s
Iteration   8: 2380853.499 ops/s
Iteration   9: 2364001.576 ops/s
Iteration  10: 2354339.565 ops/s
Iteration  11: 2345247.787 ops/s
Iteration  12: 2341291.933 ops/s
Iteration  13: 2353264.510 ops/s
Iteration  14: 2367531.587 ops/s
Iteration  15: 2361561.733 ops/s
Iteration  16: 2375744.160 ops/s
Iteration  17: 2343804.018 ops/s
Iteration  18: 2327446.168 ops/s
Iteration  19: 2359069.632 ops/s
Iteration  20: 2355861.216 ops/s
Iteration  21: 2333036.244 ops/s
Iteration  22: 2387218.258 ops/s
Iteration  23: 2376063.506 ops/s
Iteration  24: 2320906.431 ops/s
Iteration  25: 2352882.209 ops/s
Iteration  26: 2352333.733 ops/s
Iteration  27: 2372172.980 ops/s
Iteration  28: 2344051.404 ops/s
Iteration  29: 2361310.031 ops/s
Iteration  30: 2341985.737 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectChar":
  2355951.878 ±(99.9%) 10689.240 ops/s [Average]
  (min, avg, max) = (2320906.431, 2355951.878, 2387218.258), stdev = 15999.152
  CI (99.9%): [2345262.638, 2366641.118] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collectChar  thrpt   30  2355951.878 ± 10689.240  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 986806.114 ops/s
# Warmup Iteration   2: 2422169.973 ops/s
# Warmup Iteration   3: 2391742.990 ops/s
# Warmup Iteration   4: 2106043.343 ops/s
# Warmup Iteration   5: 2421377.322 ops/s
# Warmup Iteration   6: 2433810.014 ops/s
# Warmup Iteration   7: 2434527.728 ops/s
# Warmup Iteration   8: 2432701.485 ops/s
# Warmup Iteration   9: 2432327.337 ops/s
# Warmup Iteration  10: 2422375.169 ops/s
# Warmup Iteration  11: 2413219.680 ops/s
# Warmup Iteration  12: 2438208.803 ops/s
# Warmup Iteration  13: 2434680.064 ops/s
# Warmup Iteration  14: 2404056.640 ops/s
# Warmup Iteration  15: 2494983.581 ops/s
# Warmup Iteration  16: 2444463.326 ops/s
# Warmup Iteration  17: 2432382.268 ops/s
# Warmup Iteration  18: 2413103.972 ops/s
# Warmup Iteration  19: 2414786.304 ops/s
# Warmup Iteration  20: 2429084.337 ops/s
# Warmup Iteration  21: 2424812.368 ops/s
# Warmup Iteration  22: 2423661.930 ops/s
# Warmup Iteration  23: 2402916.268 ops/s
# Warmup Iteration  24: 2421556.389 ops/s
# Warmup Iteration  25: 2413588.464 ops/s
# Warmup Iteration  26: 2398039.253 ops/s
# Warmup Iteration  27: 2438389.213 ops/s
# Warmup Iteration  28: 2434231.302 ops/s
# Warmup Iteration  29: 2438070.426 ops/s
# Warmup Iteration  30: 2427835.489 ops/s
Iteration   1: 2412997.763 ops/s
Iteration   2: 2439771.398 ops/s
Iteration   3: 2411072.322 ops/s
Iteration   4: 2418802.990 ops/s
Iteration   5: 2416326.233 ops/s
Iteration   6: 2459057.593 ops/s
Iteration   7: 2428975.954 ops/s
Iteration   8: 2438370.341 ops/s
Iteration   9: 2430264.686 ops/s
Iteration  10: 2434919.304 ops/s
Iteration  11: 2430458.969 ops/s
Iteration  12: 2409194.894 ops/s
Iteration  13: 2441479.198 ops/s
Iteration  14: 2397031.390 ops/s
Iteration  15: 2457922.992 ops/s
Iteration  16: 2398559.829 ops/s
Iteration  17: 2424936.447 ops/s
Iteration  18: 2451542.187 ops/s
Iteration  19: 2456716.764 ops/s
Iteration  20: 2451903.042 ops/s
Iteration  21: 2389608.477 ops/s
Iteration  22: 2443366.079 ops/s
Iteration  23: 2459346.599 ops/s
Iteration  24: 2440793.543 ops/s
Iteration  25: 2423819.143 ops/s
Iteration  26: 2430455.817 ops/s
Iteration  27: 2442715.968 ops/s
Iteration  28: 2441802.649 ops/s
Iteration  29: 2431207.367 ops/s
Iteration  30: 2426987.965 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectCharWithTarget":
  2431346.930 ±(99.9%) 12518.580 ops/s [Average]
  (min, avg, max) = (2389608.477, 2431346.930, 2459346.599), stdev = 18737.223
  CI (99.9%): [2418828.350, 2443865.510] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  2431346.930 ± 12518.580  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 647649.681 ops/s
# Warmup Iteration   2: 1639475.479 ops/s
# Warmup Iteration   3: 1659511.832 ops/s
# Warmup Iteration   4: 1382182.389 ops/s
# Warmup Iteration   5: 1672685.717 ops/s
# Warmup Iteration   6: 1661734.412 ops/s
# Warmup Iteration   7: 1665881.362 ops/s
# Warmup Iteration   8: 1660769.884 ops/s
# Warmup Iteration   9: 1654792.547 ops/s
# Warmup Iteration  10: 1645185.133 ops/s
# Warmup Iteration  11: 1656215.940 ops/s
# Warmup Iteration  12: 1659241.017 ops/s
# Warmup Iteration  13: 1645367.714 ops/s
# Warmup Iteration  14: 1650245.161 ops/s
# Warmup Iteration  15: 1664703.147 ops/s
# Warmup Iteration  16: 1647201.911 ops/s
# Warmup Iteration  17: 1654655.757 ops/s
# Warmup Iteration  18: 1640794.266 ops/s
# Warmup Iteration  19: 1655380.638 ops/s
# Warmup Iteration  20: 1665098.631 ops/s
# Warmup Iteration  21: 1670350.999 ops/s
# Warmup Iteration  22: 1674612.724 ops/s
# Warmup Iteration  23: 1676829.922 ops/s
# Warmup Iteration  24: 1708073.691 ops/s
# Warmup Iteration  25: 1681279.034 ops/s
# Warmup Iteration  26: 1667919.197 ops/s
# Warmup Iteration  27: 1658958.604 ops/s
# Warmup Iteration  28: 1665333.848 ops/s
# Warmup Iteration  29: 1650957.199 ops/s
# Warmup Iteration  30: 1665341.979 ops/s
Iteration   1: 1657887.165 ops/s
Iteration   2: 1641701.457 ops/s
Iteration   3: 1634875.290 ops/s
Iteration   4: 1617691.931 ops/s
Iteration   5: 1675675.574 ops/s
Iteration   6: 1678017.979 ops/s
Iteration   7: 1661925.555 ops/s
Iteration   8: 1657598.825 ops/s
Iteration   9: 1657068.067 ops/s
Iteration  10: 1651982.654 ops/s
Iteration  11: 1667420.605 ops/s
Iteration  12: 1658921.038 ops/s
Iteration  13: 1654736.062 ops/s
Iteration  14: 1654414.766 ops/s
Iteration  15: 1664563.392 ops/s
Iteration  16: 1673601.457 ops/s
Iteration  17: 1646862.926 ops/s
Iteration  18: 1656864.010 ops/s
Iteration  19: 1653176.436 ops/s
Iteration  20: 1669945.983 ops/s
Iteration  21: 1643694.137 ops/s
Iteration  22: 1665312.233 ops/s
Iteration  23: 1667093.221 ops/s
Iteration  24: 1636545.771 ops/s
Iteration  25: 1651636.609 ops/s
Iteration  26: 1664285.527 ops/s
Iteration  27: 1650509.017 ops/s
Iteration  28: 1670580.742 ops/s
Iteration  29: 1656668.058 ops/s
Iteration  30: 1665523.139 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectDouble":
  1656892.654 ±(99.9%) 8771.786 ops/s [Average]
  (min, avg, max) = (1617691.931, 1656892.654, 1678017.979), stdev = 13129.198
  CI (99.9%): [1648120.868, 1665664.440] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collectDouble  thrpt   30  1656892.654 ± 8771.786  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 654033.074 ops/s
# Warmup Iteration   2: 1658518.069 ops/s
# Warmup Iteration   3: 1702641.842 ops/s
# Warmup Iteration   4: 1398133.326 ops/s
# Warmup Iteration   5: 1674325.054 ops/s
# Warmup Iteration   6: 1696664.973 ops/s
# Warmup Iteration   7: 1686942.319 ops/s
# Warmup Iteration   8: 1672664.645 ops/s
# Warmup Iteration   9: 1693424.730 ops/s
# Warmup Iteration  10: 1676738.335 ops/s
# Warmup Iteration  11: 1680863.679 ops/s
# Warmup Iteration  12: 1678169.353 ops/s
# Warmup Iteration  13: 1689248.438 ops/s
# Warmup Iteration  14: 1665397.962 ops/s
# Warmup Iteration  15: 1705277.670 ops/s
# Warmup Iteration  16: 1669535.239 ops/s
# Warmup Iteration  17: 1687643.006 ops/s
# Warmup Iteration  18: 1682938.551 ops/s
# Warmup Iteration  19: 1680648.745 ops/s
# Warmup Iteration  20: 1677282.159 ops/s
# Warmup Iteration  21: 1682283.595 ops/s
# Warmup Iteration  22: 1683119.741 ops/s
# Warmup Iteration  23: 1691333.296 ops/s
# Warmup Iteration  24: 1671080.588 ops/s
# Warmup Iteration  25: 1675078.017 ops/s
# Warmup Iteration  26: 1685090.837 ops/s
# Warmup Iteration  27: 1679286.312 ops/s
# Warmup Iteration  28: 1716725.387 ops/s
# Warmup Iteration  29: 1719059.117 ops/s
# Warmup Iteration  30: 1723516.969 ops/s
Iteration   1: 1717712.925 ops/s
Iteration   2: 1710630.222 ops/s
Iteration   3: 1707295.271 ops/s
Iteration   4: 1723720.658 ops/s
Iteration   5: 1727059.794 ops/s
Iteration   6: 1721766.636 ops/s
Iteration   7: 1719920.037 ops/s
Iteration   8: 1720323.806 ops/s
Iteration   9: 1723972.029 ops/s
Iteration  10: 1726024.774 ops/s
Iteration  11: 1715934.354 ops/s
Iteration  12: 1713045.444 ops/s
Iteration  13: 1713579.850 ops/s
Iteration  14: 1715735.217 ops/s
Iteration  15: 1717027.204 ops/s
Iteration  16: 1705541.943 ops/s
Iteration  17: 1721643.439 ops/s
Iteration  18: 1695295.920 ops/s
Iteration  19: 1707402.063 ops/s
Iteration  20: 1686512.040 ops/s
Iteration  21: 1709067.057 ops/s
Iteration  22: 1712618.413 ops/s
Iteration  23: 1703014.341 ops/s
Iteration  24: 1714653.761 ops/s
Iteration  25: 1721965.302 ops/s
Iteration  26: 1720571.452 ops/s
Iteration  27: 1720548.198 ops/s
Iteration  28: 1713554.892 ops/s
Iteration  29: 1710319.415 ops/s
Iteration  30: 1698781.279 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectDoubleWithTarget":
  1713841.258 ±(99.9%) 6267.368 ops/s [Average]
  (min, avg, max) = (1686512.040, 1713841.258, 1727059.794), stdev = 9380.701
  CI (99.9%): [1707573.890, 1720108.625] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  1713841.258 ± 6267.368  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 752254.088 ops/s
# Warmup Iteration   2: 1839443.925 ops/s
# Warmup Iteration   3: 1848072.054 ops/s
# Warmup Iteration   4: 1536209.090 ops/s
# Warmup Iteration   5: 1824951.113 ops/s
# Warmup Iteration   6: 1847994.563 ops/s
# Warmup Iteration   7: 1850460.371 ops/s
# Warmup Iteration   8: 1844882.377 ops/s
# Warmup Iteration   9: 1854188.249 ops/s
# Warmup Iteration  10: 1842260.261 ops/s
# Warmup Iteration  11: 1847278.532 ops/s
# Warmup Iteration  12: 1846396.857 ops/s
# Warmup Iteration  13: 1854244.733 ops/s
# Warmup Iteration  14: 1833448.531 ops/s
# Warmup Iteration  15: 1845730.951 ops/s
# Warmup Iteration  16: 1852659.851 ops/s
# Warmup Iteration  17: 1849455.251 ops/s
# Warmup Iteration  18: 1849631.244 ops/s
# Warmup Iteration  19: 1848292.635 ops/s
# Warmup Iteration  20: 1847027.816 ops/s
# Warmup Iteration  21: 1849757.835 ops/s
# Warmup Iteration  22: 1854005.395 ops/s
# Warmup Iteration  23: 1843909.706 ops/s
# Warmup Iteration  24: 1850537.274 ops/s
# Warmup Iteration  25: 1850247.955 ops/s
# Warmup Iteration  26: 1847145.460 ops/s
# Warmup Iteration  27: 1849888.914 ops/s
# Warmup Iteration  28: 1847963.806 ops/s
# Warmup Iteration  29: 1851821.458 ops/s
# Warmup Iteration  30: 1847313.172 ops/s
Iteration   1: 1852182.844 ops/s
Iteration   2: 1845486.792 ops/s
Iteration   3: 1851629.485 ops/s
Iteration   4: 1845009.976 ops/s
Iteration   5: 1858650.533 ops/s
Iteration   6: 1821899.977 ops/s
Iteration   7: 1851930.642 ops/s
Iteration   8: 1851173.954 ops/s
Iteration   9: 1847867.230 ops/s
Iteration  10: 1841234.533 ops/s
Iteration  11: 1861574.039 ops/s
Iteration  12: 1847787.279 ops/s
Iteration  13: 1851602.292 ops/s
Iteration  14: 1845781.371 ops/s
Iteration  15: 1826758.661 ops/s
Iteration  16: 1850461.309 ops/s
Iteration  17: 1848873.473 ops/s
Iteration  18: 1842411.141 ops/s
Iteration  19: 1857540.429 ops/s
Iteration  20: 1856419.793 ops/s
Iteration  21: 1845322.968 ops/s
Iteration  22: 1849388.926 ops/s
Iteration  23: 1854423.364 ops/s
Iteration  24: 1830329.217 ops/s
Iteration  25: 1846780.647 ops/s
Iteration  26: 1857199.571 ops/s
Iteration  27: 1856923.301 ops/s
Iteration  28: 1859298.797 ops/s
Iteration  29: 1848899.749 ops/s
Iteration  30: 1829587.454 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectFloat":
  1847814.325 ±(99.9%) 6517.939 ops/s [Average]
  (min, avg, max) = (1821899.977, 1847814.325, 1861574.039), stdev = 9755.745
  CI (99.9%): [1841296.386, 1854332.264] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collectFloat  thrpt   30  1847814.325 ± 6517.939  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 749899.946 ops/s
# Warmup Iteration   2: 1820392.056 ops/s
# Warmup Iteration   3: 1821061.945 ops/s
# Warmup Iteration   4: 1516258.441 ops/s
# Warmup Iteration   5: 1813306.663 ops/s
# Warmup Iteration   6: 1819537.707 ops/s
# Warmup Iteration   7: 1824795.331 ops/s
# Warmup Iteration   8: 1826830.935 ops/s
# Warmup Iteration   9: 1809587.425 ops/s
# Warmup Iteration  10: 1812759.613 ops/s
# Warmup Iteration  11: 1824611.008 ops/s
# Warmup Iteration  12: 1828776.827 ops/s
# Warmup Iteration  13: 1819123.668 ops/s
# Warmup Iteration  14: 1825880.488 ops/s
# Warmup Iteration  15: 1818327.402 ops/s
# Warmup Iteration  16: 1813868.277 ops/s
# Warmup Iteration  17: 1818967.150 ops/s
# Warmup Iteration  18: 1815075.214 ops/s
# Warmup Iteration  19: 1819202.138 ops/s
# Warmup Iteration  20: 1802794.355 ops/s
# Warmup Iteration  21: 1808954.013 ops/s
# Warmup Iteration  22: 1817538.263 ops/s
# Warmup Iteration  23: 1803846.876 ops/s
# Warmup Iteration  24: 1826391.705 ops/s
# Warmup Iteration  25: 1825814.394 ops/s
# Warmup Iteration  26: 1820325.432 ops/s
# Warmup Iteration  27: 1780281.000 ops/s
# Warmup Iteration  28: 1781022.694 ops/s
# Warmup Iteration  29: 1757396.394 ops/s
# Warmup Iteration  30: 1790703.877 ops/s
Iteration   1: 1757016.956 ops/s
Iteration   2: 1783707.613 ops/s
Iteration   3: 1772994.396 ops/s
Iteration   4: 1813386.058 ops/s
Iteration   5: 1813523.268 ops/s
Iteration   6: 1789566.695 ops/s
Iteration   7: 1789583.985 ops/s
Iteration   8: 1798579.341 ops/s
Iteration   9: 1793455.480 ops/s
Iteration  10: 1796573.383 ops/s
Iteration  11: 1778343.118 ops/s
Iteration  12: 1772138.773 ops/s
Iteration  13: 1815138.601 ops/s
Iteration  14: 1777698.208 ops/s
Iteration  15: 1788085.120 ops/s
Iteration  16: 1797601.765 ops/s
Iteration  17: 1808158.234 ops/s
Iteration  18: 1796433.511 ops/s
Iteration  19: 1806348.190 ops/s
Iteration  20: 1811550.920 ops/s
Iteration  21: 1813179.701 ops/s
Iteration  22: 1819950.532 ops/s
Iteration  23: 1805047.181 ops/s
Iteration  24: 1771265.227 ops/s
Iteration  25: 1759476.734 ops/s
Iteration  26: 1759529.631 ops/s
Iteration  27: 1779725.315 ops/s
Iteration  28: 1774114.474 ops/s
Iteration  29: 1789509.962 ops/s
Iteration  30: 1787511.584 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectFloatWithTarget":
  1790639.799 ±(99.9%) 11946.685 ops/s [Average]
  (min, avg, max) = (1757016.956, 1790639.799, 1819950.532), stdev = 17881.237
  CI (99.9%): [1778693.114, 1802586.483] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  1790639.799 ± 11946.685  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 486742.553 ops/s
# Warmup Iteration   2: 1052134.100 ops/s
# Warmup Iteration   3: 1139796.387 ops/s
# Warmup Iteration   4: 1134586.211 ops/s
# Warmup Iteration   5: 943678.020 ops/s
# Warmup Iteration   6: 1124548.839 ops/s
# Warmup Iteration   7: 1123920.603 ops/s
# Warmup Iteration   8: 1118985.894 ops/s
# Warmup Iteration   9: 1142979.416 ops/s
# Warmup Iteration  10: 1125397.248 ops/s
# Warmup Iteration  11: 1133058.924 ops/s
# Warmup Iteration  12: 1127928.756 ops/s
# Warmup Iteration  13: 1137168.706 ops/s
# Warmup Iteration  14: 1138063.958 ops/s
# Warmup Iteration  15: 1126902.277 ops/s
# Warmup Iteration  16: 1131382.503 ops/s
# Warmup Iteration  17: 1134040.213 ops/s
# Warmup Iteration  18: 1138674.697 ops/s
# Warmup Iteration  19: 1134372.396 ops/s
# Warmup Iteration  20: 1132842.266 ops/s
# Warmup Iteration  21: 1155940.723 ops/s
# Warmup Iteration  22: 1161307.421 ops/s
# Warmup Iteration  23: 1161846.411 ops/s
# Warmup Iteration  24: 1141168.081 ops/s
# Warmup Iteration  25: 1122623.288 ops/s
# Warmup Iteration  26: 1135750.106 ops/s
# Warmup Iteration  27: 1143922.749 ops/s
# Warmup Iteration  28: 1139760.702 ops/s
# Warmup Iteration  29: 1134108.417 ops/s
# Warmup Iteration  30: 1127785.599 ops/s
Iteration   1: 1144580.780 ops/s
Iteration   2: 1119333.294 ops/s
Iteration   3: 1158242.602 ops/s
Iteration   4: 1159718.865 ops/s
Iteration   5: 1146640.313 ops/s
Iteration   6: 1143035.948 ops/s
Iteration   7: 1143176.852 ops/s
Iteration   8: 1146274.680 ops/s
Iteration   9: 1115074.357 ops/s
Iteration  10: 1119749.789 ops/s
Iteration  11: 1113052.054 ops/s
Iteration  12: 1149946.155 ops/s
Iteration  13: 1130716.279 ops/s
Iteration  14: 1137463.262 ops/s
Iteration  15: 1112867.901 ops/s
Iteration  16: 1135077.030 ops/s
Iteration  17: 1126328.005 ops/s
Iteration  18: 1136206.784 ops/s
Iteration  19: 1130973.507 ops/s
Iteration  20: 1118802.612 ops/s
Iteration  21: 1137414.897 ops/s
Iteration  22: 1145089.337 ops/s
Iteration  23: 1125606.351 ops/s
Iteration  24: 1132067.131 ops/s
Iteration  25: 1132745.215 ops/s
Iteration  26: 1129748.462 ops/s
Iteration  27: 1121744.233 ops/s
Iteration  28: 1122680.675 ops/s
Iteration  29: 1123530.263 ops/s
Iteration  30: 1129080.083 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectIf":
  1132898.924 ±(99.9%) 8492.359 ops/s [Average]
  (min, avg, max) = (1112867.901, 1132898.924, 1159718.865), stdev = 12710.964
  CI (99.9%): [1124406.565, 1141391.283] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collectIf  thrpt   30  1132898.924 ± 8492.359  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 966710.991 ops/s
# Warmup Iteration   2: 2304430.039 ops/s
# Warmup Iteration   3: 2212202.750 ops/s
# Warmup Iteration   4: 2103220.678 ops/s
# Warmup Iteration   5: 2353494.825 ops/s
# Warmup Iteration   6: 2387774.080 ops/s
# Warmup Iteration   7: 2337215.802 ops/s
# Warmup Iteration   8: 2373444.277 ops/s
# Warmup Iteration   9: 2371321.872 ops/s
# Warmup Iteration  10: 2379059.563 ops/s
# Warmup Iteration  11: 2356222.494 ops/s
# Warmup Iteration  12: 2346239.971 ops/s
# Warmup Iteration  13: 2355775.787 ops/s
# Warmup Iteration  14: 2364874.824 ops/s
# Warmup Iteration  15: 2357393.052 ops/s
# Warmup Iteration  16: 2360831.763 ops/s
# Warmup Iteration  17: 2367217.973 ops/s
# Warmup Iteration  18: 2377128.741 ops/s
# Warmup Iteration  19: 2375761.887 ops/s
# Warmup Iteration  20: 2344328.750 ops/s
# Warmup Iteration  21: 2369877.373 ops/s
# Warmup Iteration  22: 2343239.882 ops/s
# Warmup Iteration  23: 2354808.970 ops/s
# Warmup Iteration  24: 2339435.281 ops/s
# Warmup Iteration  25: 2352346.484 ops/s
# Warmup Iteration  26: 2356477.580 ops/s
# Warmup Iteration  27: 2354123.458 ops/s
# Warmup Iteration  28: 2349758.066 ops/s
# Warmup Iteration  29: 2372182.917 ops/s
# Warmup Iteration  30: 2336616.219 ops/s
Iteration   1: 2362569.345 ops/s
Iteration   2: 2339404.826 ops/s
Iteration   3: 2361128.765 ops/s
Iteration   4: 2364304.583 ops/s
Iteration   5: 2333839.223 ops/s
Iteration   6: 2372409.630 ops/s
Iteration   7: 2329254.059 ops/s
Iteration   8: 2339452.057 ops/s
Iteration   9: 2339633.883 ops/s
Iteration  10: 2343559.342 ops/s
Iteration  11: 2371690.269 ops/s
Iteration  12: 2379043.282 ops/s
Iteration  13: 2376525.668 ops/s
Iteration  14: 2370604.840 ops/s
Iteration  15: 2348242.573 ops/s
Iteration  16: 2381798.882 ops/s
Iteration  17: 2379129.992 ops/s
Iteration  18: 2366191.841 ops/s
Iteration  19: 2357426.850 ops/s
Iteration  20: 2380880.682 ops/s
Iteration  21: 2357472.326 ops/s
Iteration  22: 2354325.771 ops/s
Iteration  23: 2370822.108 ops/s
Iteration  24: 2328386.272 ops/s
Iteration  25: 2374758.543 ops/s
Iteration  26: 2339579.235 ops/s
Iteration  27: 2355563.720 ops/s
Iteration  28: 2362827.929 ops/s
Iteration  29: 2379968.735 ops/s
Iteration  30: 2366715.561 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectInt":
  2359583.693 ±(99.9%) 11057.187 ops/s [Average]
  (min, avg, max) = (2328386.272, 2359583.693, 2381798.882), stdev = 16549.878
  CI (99.9%): [2348526.507, 2370640.880] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collectInt  thrpt   30  2359583.693 ± 11057.187  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 957078.091 ops/s
# Warmup Iteration   2: 2272795.512 ops/s
# Warmup Iteration   3: 2229840.704 ops/s
# Warmup Iteration   4: 2035154.710 ops/s
# Warmup Iteration   5: 2343283.014 ops/s
# Warmup Iteration   6: 2327793.943 ops/s
# Warmup Iteration   7: 2320529.790 ops/s
# Warmup Iteration   8: 2329672.596 ops/s
# Warmup Iteration   9: 2335971.306 ops/s
# Warmup Iteration  10: 2315800.203 ops/s
# Warmup Iteration  11: 2331608.306 ops/s
# Warmup Iteration  12: 2346920.970 ops/s
# Warmup Iteration  13: 2316715.058 ops/s
# Warmup Iteration  14: 2341430.363 ops/s
# Warmup Iteration  15: 2320408.246 ops/s
# Warmup Iteration  16: 2326036.893 ops/s
# Warmup Iteration  17: 2315894.437 ops/s
# Warmup Iteration  18: 2326388.265 ops/s
# Warmup Iteration  19: 2318000.225 ops/s
# Warmup Iteration  20: 2321723.895 ops/s
# Warmup Iteration  21: 2348146.742 ops/s
# Warmup Iteration  22: 2324128.559 ops/s
# Warmup Iteration  23: 2342639.758 ops/s
# Warmup Iteration  24: 2309634.761 ops/s
# Warmup Iteration  25: 2326201.782 ops/s
# Warmup Iteration  26: 2345427.439 ops/s
# Warmup Iteration  27: 2343376.575 ops/s
# Warmup Iteration  28: 2331978.084 ops/s
# Warmup Iteration  29: 2297596.545 ops/s
# Warmup Iteration  30: 2302740.809 ops/s
Iteration   1: 2328426.435 ops/s
Iteration   2: 2340964.971 ops/s
Iteration   3: 2325157.341 ops/s
Iteration   4: 2306370.700 ops/s
Iteration   5: 2323877.340 ops/s
Iteration   6: 2327250.053 ops/s
Iteration   7: 2323937.139 ops/s
Iteration   8: 2306651.209 ops/s
Iteration   9: 2299219.573 ops/s
Iteration  10: 2334024.150 ops/s
Iteration  11: 2337959.053 ops/s
Iteration  12: 2343360.208 ops/s
Iteration  13: 2328757.246 ops/s
Iteration  14: 2314113.111 ops/s
Iteration  15: 2322322.609 ops/s
Iteration  16: 2354278.939 ops/s
Iteration  17: 2310718.420 ops/s
Iteration  18: 2304275.646 ops/s
Iteration  19: 2349523.448 ops/s
Iteration  20: 2315583.090 ops/s
Iteration  21: 2321154.021 ops/s
Iteration  22: 2337212.667 ops/s
Iteration  23: 2322179.749 ops/s
Iteration  24: 2327667.987 ops/s
Iteration  25: 2318888.050 ops/s
Iteration  26: 2310667.603 ops/s
Iteration  27: 2337946.099 ops/s
Iteration  28: 2297159.721 ops/s
Iteration  29: 2323855.518 ops/s
Iteration  30: 2313059.658 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectIntWithTarget":
  2323552.059 ±(99.9%) 9590.017 ops/s [Average]
  (min, avg, max) = (2297159.721, 2323552.059, 2354278.939), stdev = 14353.887
  CI (99.9%): [2313962.042, 2333142.075] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  2323552.059 ± 9590.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 876780.579 ops/s
# Warmup Iteration   2: 2120777.201 ops/s
# Warmup Iteration   3: 1771373.748 ops/s
# Warmup Iteration   4: 2055354.874 ops/s
# Warmup Iteration   5: 2105962.194 ops/s
# Warmup Iteration   6: 2092914.316 ops/s
# Warmup Iteration   7: 2095978.844 ops/s
# Warmup Iteration   8: 2099144.285 ops/s
# Warmup Iteration   9: 2092111.597 ops/s
# Warmup Iteration  10: 2106020.831 ops/s
# Warmup Iteration  11: 2100701.789 ops/s
# Warmup Iteration  12: 2113290.003 ops/s
# Warmup Iteration  13: 2089965.108 ops/s
# Warmup Iteration  14: 2096236.725 ops/s
# Warmup Iteration  15: 2088353.821 ops/s
# Warmup Iteration  16: 2106560.259 ops/s
# Warmup Iteration  17: 2094073.801 ops/s
# Warmup Iteration  18: 2089600.190 ops/s
# Warmup Iteration  19: 2104043.352 ops/s
# Warmup Iteration  20: 2095500.388 ops/s
# Warmup Iteration  21: 2097709.906 ops/s
# Warmup Iteration  22: 2111704.224 ops/s
# Warmup Iteration  23: 2106921.960 ops/s
# Warmup Iteration  24: 2105275.263 ops/s
# Warmup Iteration  25: 2115306.533 ops/s
# Warmup Iteration  26: 2097870.210 ops/s
# Warmup Iteration  27: 2087238.796 ops/s
# Warmup Iteration  28: 2080617.062 ops/s
# Warmup Iteration  29: 2108579.537 ops/s
# Warmup Iteration  30: 2095754.983 ops/s
Iteration   1: 2109236.099 ops/s
Iteration   2: 2100631.557 ops/s
Iteration   3: 2104363.016 ops/s
Iteration   4: 2129698.492 ops/s
Iteration   5: 2121530.030 ops/s
Iteration   6: 2101558.963 ops/s
Iteration   7: 2109741.341 ops/s
Iteration   8: 2121883.849 ops/s
Iteration   9: 2131530.997 ops/s
Iteration  10: 2128024.372 ops/s
Iteration  11: 2108723.519 ops/s
Iteration  12: 2127556.601 ops/s
Iteration  13: 2118108.416 ops/s
Iteration  14: 2099846.430 ops/s
Iteration  15: 2106804.322 ops/s
Iteration  16: 2099105.135 ops/s
Iteration  17: 2096348.598 ops/s
Iteration  18: 2122529.592 ops/s
Iteration  19: 2110659.479 ops/s
Iteration  20: 2122043.325 ops/s
Iteration  21: 2120306.155 ops/s
Iteration  22: 2102142.704 ops/s
Iteration  23: 2122118.827 ops/s
Iteration  24: 2078507.654 ops/s
Iteration  25: 2092731.960 ops/s
Iteration  26: 2097013.872 ops/s
Iteration  27: 2091195.965 ops/s
Iteration  28: 2078412.988 ops/s
Iteration  29: 2084219.683 ops/s
Iteration  30: 2082115.584 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectLong":
  2107289.651 ±(99.9%) 10442.949 ops/s [Average]
  (min, avg, max) = (2078412.988, 2107289.651, 2131530.997), stdev = 15630.516
  CI (99.9%): [2096846.702, 2117732.600] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collectLong  thrpt   30  2107289.651 ± 10442.949  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 899039.156 ops/s
# Warmup Iteration   2: 2164316.179 ops/s
# Warmup Iteration   3: 1792844.400 ops/s
# Warmup Iteration   4: 2174020.306 ops/s
# Warmup Iteration   5: 2157094.821 ops/s
# Warmup Iteration   6: 2175065.327 ops/s
# Warmup Iteration   7: 2157501.895 ops/s
# Warmup Iteration   8: 2169708.099 ops/s
# Warmup Iteration   9: 2175121.034 ops/s
# Warmup Iteration  10: 2155200.629 ops/s
# Warmup Iteration  11: 2155319.907 ops/s
# Warmup Iteration  12: 2143568.378 ops/s
# Warmup Iteration  13: 2169134.775 ops/s
# Warmup Iteration  14: 2160877.548 ops/s
# Warmup Iteration  15: 2143857.804 ops/s
# Warmup Iteration  16: 2169546.285 ops/s
# Warmup Iteration  17: 2158515.209 ops/s
# Warmup Iteration  18: 2172867.193 ops/s
# Warmup Iteration  19: 2184027.970 ops/s
# Warmup Iteration  20: 2174885.852 ops/s
# Warmup Iteration  21: 2167097.822 ops/s
# Warmup Iteration  22: 2164625.565 ops/s
# Warmup Iteration  23: 2164419.091 ops/s
# Warmup Iteration  24: 2178597.514 ops/s
# Warmup Iteration  25: 2163502.158 ops/s
# Warmup Iteration  26: 2150453.896 ops/s
# Warmup Iteration  27: 2165092.495 ops/s
# Warmup Iteration  28: 2168424.663 ops/s
# Warmup Iteration  29: 2152312.213 ops/s
# Warmup Iteration  30: 2163634.513 ops/s
Iteration   1: 2155955.900 ops/s
Iteration   2: 2152032.453 ops/s
Iteration   3: 2139913.519 ops/s
Iteration   4: 2158903.990 ops/s
Iteration   5: 2162942.082 ops/s
Iteration   6: 2159212.762 ops/s
Iteration   7: 2167240.592 ops/s
Iteration   8: 2158081.786 ops/s
Iteration   9: 2166545.822 ops/s
Iteration  10: 2184174.469 ops/s
Iteration  11: 2157004.651 ops/s
Iteration  12: 2138668.249 ops/s
Iteration  13: 2174709.242 ops/s
Iteration  14: 2183763.767 ops/s
Iteration  15: 2192130.521 ops/s
Iteration  16: 2155512.699 ops/s
Iteration  17: 2148368.330 ops/s
Iteration  18: 2163050.261 ops/s
Iteration  19: 2123370.592 ops/s
Iteration  20: 2171525.579 ops/s
Iteration  21: 2142664.629 ops/s
Iteration  22: 2163874.527 ops/s
Iteration  23: 2162578.709 ops/s
Iteration  24: 2136708.212 ops/s
Iteration  25: 2156751.748 ops/s
Iteration  26: 2188236.164 ops/s
Iteration  27: 2154896.235 ops/s
Iteration  28: 2159524.304 ops/s
Iteration  29: 2150943.406 ops/s
Iteration  30: 2152612.485 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectLongWithTarget":
  2159396.589 ±(99.9%) 10319.349 ops/s [Average]
  (min, avg, max) = (2123370.592, 2159396.589, 2192130.521), stdev = 15445.518
  CI (99.9%): [2149077.240, 2169715.939] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  2159396.589 ± 10319.349  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 610078.713 ops/s
# Warmup Iteration   2: 1374527.773 ops/s
# Warmup Iteration   3: 1350076.002 ops/s
# Warmup Iteration   4: 1143398.475 ops/s
# Warmup Iteration   5: 1363397.489 ops/s
# Warmup Iteration   6: 1346137.597 ops/s
# Warmup Iteration   7: 1359946.533 ops/s
# Warmup Iteration   8: 1361285.525 ops/s
# Warmup Iteration   9: 1359253.132 ops/s
# Warmup Iteration  10: 1372413.922 ops/s
# Warmup Iteration  11: 1374514.181 ops/s
# Warmup Iteration  12: 1366704.803 ops/s
# Warmup Iteration  13: 1368266.531 ops/s
# Warmup Iteration  14: 1362682.953 ops/s
# Warmup Iteration  15: 1357898.661 ops/s
# Warmup Iteration  16: 1370797.617 ops/s
# Warmup Iteration  17: 1362422.138 ops/s
# Warmup Iteration  18: 1362691.076 ops/s
# Warmup Iteration  19: 1361759.409 ops/s
# Warmup Iteration  20: 1345738.186 ops/s
# Warmup Iteration  21: 1358488.674 ops/s
# Warmup Iteration  22: 1365713.648 ops/s
# Warmup Iteration  23: 1355043.521 ops/s
# Warmup Iteration  24: 1352942.129 ops/s
# Warmup Iteration  25: 1361257.688 ops/s
# Warmup Iteration  26: 1352767.992 ops/s
# Warmup Iteration  27: 1362969.469 ops/s
# Warmup Iteration  28: 1369101.909 ops/s
# Warmup Iteration  29: 1359081.894 ops/s
# Warmup Iteration  30: 1362046.880 ops/s
Iteration   1: 1371232.209 ops/s
Iteration   2: 1357940.947 ops/s
Iteration   3: 1367345.020 ops/s
Iteration   4: 1371232.317 ops/s
Iteration   5: 1359618.443 ops/s
Iteration   6: 1340641.208 ops/s
Iteration   7: 1352055.840 ops/s
Iteration   8: 1372669.344 ops/s
Iteration   9: 1358135.669 ops/s
Iteration  10: 1372020.327 ops/s
Iteration  11: 1358811.075 ops/s
Iteration  12: 1347060.936 ops/s
Iteration  13: 1341360.567 ops/s
Iteration  14: 1379877.783 ops/s
Iteration  15: 1365434.267 ops/s
Iteration  16: 1355585.465 ops/s
Iteration  17: 1355693.211 ops/s
Iteration  18: 1365353.197 ops/s
Iteration  19: 1360190.261 ops/s
Iteration  20: 1360511.868 ops/s
Iteration  21: 1365753.632 ops/s
Iteration  22: 1350494.163 ops/s
Iteration  23: 1354046.128 ops/s
Iteration  24: 1356375.105 ops/s
Iteration  25: 1343995.405 ops/s
Iteration  26: 1359307.950 ops/s
Iteration  27: 1355388.030 ops/s
Iteration  28: 1373451.191 ops/s
Iteration  29: 1351601.571 ops/s
Iteration  30: 1376573.270 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectMap":
  1359991.880 ±(99.9%) 6841.634 ops/s [Average]
  (min, avg, max) = (1340641.208, 1359991.880, 1379877.783), stdev = 10240.236
  CI (99.9%): [1353150.246, 1366833.514] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collectMap  thrpt   30  1359991.880 ± 6841.634  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 961636.188 ops/s
# Warmup Iteration   2: 2335673.513 ops/s
# Warmup Iteration   3: 2228996.403 ops/s
# Warmup Iteration   4: 2068485.243 ops/s
# Warmup Iteration   5: 2371045.374 ops/s
# Warmup Iteration   6: 2368728.161 ops/s
# Warmup Iteration   7: 2380323.702 ops/s
# Warmup Iteration   8: 2351573.481 ops/s
# Warmup Iteration   9: 2359282.495 ops/s
# Warmup Iteration  10: 2395784.811 ops/s
# Warmup Iteration  11: 2372400.674 ops/s
# Warmup Iteration  12: 2389978.875 ops/s
# Warmup Iteration  13: 2362412.466 ops/s
# Warmup Iteration  14: 2363351.906 ops/s
# Warmup Iteration  15: 2390947.178 ops/s
# Warmup Iteration  16: 2348705.454 ops/s
# Warmup Iteration  17: 2372685.787 ops/s
# Warmup Iteration  18: 2385193.690 ops/s
# Warmup Iteration  19: 2374693.545 ops/s
# Warmup Iteration  20: 2389043.837 ops/s
# Warmup Iteration  21: 2348771.821 ops/s
# Warmup Iteration  22: 2358627.959 ops/s
# Warmup Iteration  23: 2378082.809 ops/s
# Warmup Iteration  24: 2331835.913 ops/s
# Warmup Iteration  25: 2343798.754 ops/s
# Warmup Iteration  26: 2390070.981 ops/s
# Warmup Iteration  27: 2387196.959 ops/s
# Warmup Iteration  28: 2369839.020 ops/s
# Warmup Iteration  29: 2369772.059 ops/s
# Warmup Iteration  30: 2361611.292 ops/s
Iteration   1: 2368821.785 ops/s
Iteration   2: 2354949.304 ops/s
Iteration   3: 2355947.993 ops/s
Iteration   4: 2359367.193 ops/s
Iteration   5: 2367491.300 ops/s
Iteration   6: 2382934.044 ops/s
Iteration   7: 2371086.962 ops/s
Iteration   8: 2369812.587 ops/s
Iteration   9: 2342157.160 ops/s
Iteration  10: 2373340.351 ops/s
Iteration  11: 2384920.649 ops/s
Iteration  12: 2374565.026 ops/s
Iteration  13: 2365948.345 ops/s
Iteration  14: 2373898.303 ops/s
Iteration  15: 2354879.916 ops/s
Iteration  16: 2350255.805 ops/s
Iteration  17: 2349096.836 ops/s
Iteration  18: 2358809.351 ops/s
Iteration  19: 2357718.469 ops/s
Iteration  20: 2369420.969 ops/s
Iteration  21: 2372371.068 ops/s
Iteration  22: 2375904.935 ops/s
Iteration  23: 2351668.178 ops/s
Iteration  24: 2367784.251 ops/s
Iteration  25: 2359890.686 ops/s
Iteration  26: 2346535.524 ops/s
Iteration  27: 2336344.830 ops/s
Iteration  28: 2346694.682 ops/s
Iteration  29: 2331433.077 ops/s
Iteration  30: 2389322.385 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectShort":
  2362112.399 ±(99.9%) 9457.384 ops/s [Average]
  (min, avg, max) = (2331433.077, 2362112.399, 2389322.385), stdev = 14155.368
  CI (99.9%): [2352655.015, 2371569.783] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collectShort  thrpt   30  2362112.399 ± 9457.384  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 974988.470 ops/s
# Warmup Iteration   2: 2340414.813 ops/s
# Warmup Iteration   3: 2240571.359 ops/s
# Warmup Iteration   4: 2099590.104 ops/s
# Warmup Iteration   5: 2383498.677 ops/s
# Warmup Iteration   6: 2391141.689 ops/s
# Warmup Iteration   7: 2361963.166 ops/s
# Warmup Iteration   8: 2358862.893 ops/s
# Warmup Iteration   9: 2360630.810 ops/s
# Warmup Iteration  10: 2371619.594 ops/s
# Warmup Iteration  11: 2357898.615 ops/s
# Warmup Iteration  12: 2375457.198 ops/s
# Warmup Iteration  13: 2377793.729 ops/s
# Warmup Iteration  14: 2384268.874 ops/s
# Warmup Iteration  15: 2364580.513 ops/s
# Warmup Iteration  16: 2337923.435 ops/s
# Warmup Iteration  17: 2372274.439 ops/s
# Warmup Iteration  18: 2373069.090 ops/s
# Warmup Iteration  19: 2358738.278 ops/s
# Warmup Iteration  20: 2381071.799 ops/s
# Warmup Iteration  21: 2419189.510 ops/s
# Warmup Iteration  22: 2416186.706 ops/s
# Warmup Iteration  23: 2421821.398 ops/s
# Warmup Iteration  24: 2390935.800 ops/s
# Warmup Iteration  25: 2425393.251 ops/s
# Warmup Iteration  26: 2411371.338 ops/s
# Warmup Iteration  27: 2404550.098 ops/s
# Warmup Iteration  28: 2381042.377 ops/s
# Warmup Iteration  29: 2369203.295 ops/s
# Warmup Iteration  30: 2365404.637 ops/s
Iteration   1: 2371391.439 ops/s
Iteration   2: 2363316.283 ops/s
Iteration   3: 2355711.629 ops/s
Iteration   4: 2354593.512 ops/s
Iteration   5: 2384777.035 ops/s
Iteration   6: 2352596.628 ops/s
Iteration   7: 2338959.949 ops/s
Iteration   8: 2331911.102 ops/s
Iteration   9: 2327401.462 ops/s
Iteration  10: 2387532.240 ops/s
Iteration  11: 2348921.039 ops/s
Iteration  12: 2343769.818 ops/s
Iteration  13: 2379104.116 ops/s
Iteration  14: 2381121.311 ops/s
Iteration  15: 2391278.973 ops/s
Iteration  16: 2355597.628 ops/s
Iteration  17: 2373517.637 ops/s
Iteration  18: 2366778.318 ops/s
Iteration  19: 2377496.268 ops/s
Iteration  20: 2376515.742 ops/s
Iteration  21: 2367027.158 ops/s
Iteration  22: 2333159.295 ops/s
Iteration  23: 2414056.530 ops/s
Iteration  24: 2364455.570 ops/s
Iteration  25: 2352200.935 ops/s
Iteration  26: 2338664.675 ops/s
Iteration  27: 2383943.096 ops/s
Iteration  28: 2374936.059 ops/s
Iteration  29: 2407300.240 ops/s
Iteration  30: 2374741.663 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectShortWithTarget":
  2365759.245 ±(99.9%) 14359.318 ops/s [Average]
  (min, avg, max) = (2327401.462, 2365759.245, 2414056.530), stdev = 21492.352
  CI (99.9%): [2351399.927, 2380118.563] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  2365759.245 ± 14359.318  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 720195.924 ops/s
# Warmup Iteration   2: 1657743.587 ops/s
# Warmup Iteration   3: 1655517.652 ops/s
# Warmup Iteration   4: 1366356.385 ops/s
# Warmup Iteration   5: 1649393.533 ops/s
# Warmup Iteration   6: 1657762.709 ops/s
# Warmup Iteration   7: 1657673.002 ops/s
# Warmup Iteration   8: 1650607.232 ops/s
# Warmup Iteration   9: 1651891.211 ops/s
# Warmup Iteration  10: 1646665.581 ops/s
# Warmup Iteration  11: 1654332.453 ops/s
# Warmup Iteration  12: 1674102.399 ops/s
# Warmup Iteration  13: 1679936.069 ops/s
# Warmup Iteration  14: 1692030.557 ops/s
# Warmup Iteration  15: 1664915.837 ops/s
# Warmup Iteration  16: 1662942.412 ops/s
# Warmup Iteration  17: 1654398.181 ops/s
# Warmup Iteration  18: 1661064.656 ops/s
# Warmup Iteration  19: 1653470.151 ops/s
# Warmup Iteration  20: 1679017.917 ops/s
# Warmup Iteration  21: 1652765.814 ops/s
# Warmup Iteration  22: 1642616.838 ops/s
# Warmup Iteration  23: 1655234.598 ops/s
# Warmup Iteration  24: 1647451.909 ops/s
# Warmup Iteration  25: 1658653.173 ops/s
# Warmup Iteration  26: 1661282.766 ops/s
# Warmup Iteration  27: 1654977.798 ops/s
# Warmup Iteration  28: 1658633.794 ops/s
# Warmup Iteration  29: 1663950.295 ops/s
# Warmup Iteration  30: 1651363.789 ops/s
Iteration   1: 1659970.653 ops/s
Iteration   2: 1645231.733 ops/s
Iteration   3: 1645489.732 ops/s
Iteration   4: 1650324.396 ops/s
Iteration   5: 1626970.892 ops/s
Iteration   6: 1655105.010 ops/s
Iteration   7: 1650827.429 ops/s
Iteration   8: 1653114.168 ops/s
Iteration   9: 1665136.496 ops/s
Iteration  10: 1643425.193 ops/s
Iteration  11: 1667376.250 ops/s
Iteration  12: 1653572.593 ops/s
Iteration  13: 1666695.895 ops/s
Iteration  14: 1648791.203 ops/s
Iteration  15: 1634338.248 ops/s
Iteration  16: 1644308.267 ops/s
Iteration  17: 1629364.925 ops/s
Iteration  18: 1632060.743 ops/s
Iteration  19: 1655714.868 ops/s
Iteration  20: 1659255.912 ops/s
Iteration  21: 1659898.128 ops/s
Iteration  22: 1656153.769 ops/s
Iteration  23: 1654645.467 ops/s
Iteration  24: 1642075.186 ops/s
Iteration  25: 1661672.425 ops/s
Iteration  26: 1639870.691 ops/s
Iteration  27: 1641096.934 ops/s
Iteration  28: 1669691.197 ops/s
Iteration  29: 1650400.111 ops/s
Iteration  30: 1644586.231 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectValues":
  1650238.825 ±(99.9%) 7520.162 ops/s [Average]
  (min, avg, max) = (1626970.892, 1650238.825, 1669691.197), stdev = 11255.826
  CI (99.9%): [1642718.662, 1657758.987] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collectValues  thrpt   30  1650238.825 ± 7520.162  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 859961.344 ops/s
# Warmup Iteration   2: 2009525.658 ops/s
# Warmup Iteration   3: 2078567.227 ops/s
# Warmup Iteration   4: 1713474.584 ops/s
# Warmup Iteration   5: 2078861.437 ops/s
# Warmup Iteration   6: 2071469.717 ops/s
# Warmup Iteration   7: 2051822.439 ops/s
# Warmup Iteration   8: 2069582.090 ops/s
# Warmup Iteration   9: 2078894.088 ops/s
# Warmup Iteration  10: 2064082.957 ops/s
# Warmup Iteration  11: 2066129.681 ops/s
# Warmup Iteration  12: 2054359.512 ops/s
# Warmup Iteration  13: 2057959.282 ops/s
# Warmup Iteration  14: 2060671.151 ops/s
# Warmup Iteration  15: 2052207.944 ops/s
# Warmup Iteration  16: 2074064.326 ops/s
# Warmup Iteration  17: 2043736.698 ops/s
# Warmup Iteration  18: 2060911.826 ops/s
# Warmup Iteration  19: 2056767.740 ops/s
# Warmup Iteration  20: 2086562.472 ops/s
# Warmup Iteration  21: 2089005.015 ops/s
# Warmup Iteration  22: 2065041.251 ops/s
# Warmup Iteration  23: 2063885.183 ops/s
# Warmup Iteration  24: 2076139.843 ops/s
# Warmup Iteration  25: 2029233.413 ops/s
# Warmup Iteration  26: 2065885.421 ops/s
# Warmup Iteration  27: 2059918.126 ops/s
# Warmup Iteration  28: 2064868.096 ops/s
# Warmup Iteration  29: 2083266.430 ops/s
# Warmup Iteration  30: 2083964.675 ops/s
Iteration   1: 2048097.076 ops/s
Iteration   2: 2078724.630 ops/s
Iteration   3: 2062360.247 ops/s
Iteration   4: 2070331.864 ops/s
Iteration   5: 2066518.897 ops/s
Iteration   6: 2053951.569 ops/s
Iteration   7: 2062674.382 ops/s
Iteration   8: 2062583.724 ops/s
Iteration   9: 2089029.940 ops/s
Iteration  10: 2058841.680 ops/s
Iteration  11: 2077686.289 ops/s
Iteration  12: 2107882.068 ops/s
Iteration  13: 2051263.961 ops/s
Iteration  14: 2009829.983 ops/s
Iteration  15: 2039549.310 ops/s
Iteration  16: 2057742.195 ops/s
Iteration  17: 2080708.787 ops/s
Iteration  18: 2038602.870 ops/s
Iteration  19: 2070938.404 ops/s
Iteration  20: 2063564.019 ops/s
Iteration  21: 2081246.823 ops/s
Iteration  22: 2065626.336 ops/s
Iteration  23: 2051035.636 ops/s
Iteration  24: 2059049.588 ops/s
Iteration  25: 2104052.447 ops/s
Iteration  26: 2066249.594 ops/s
Iteration  27: 2058295.248 ops/s
Iteration  28: 2040113.686 ops/s
Iteration  29: 2063470.194 ops/s
Iteration  30: 2072926.404 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectWith":
  2063764.928 ±(99.9%) 12940.389 ops/s [Average]
  (min, avg, max) = (2009829.983, 2063764.928, 2107882.068), stdev = 19368.567
  CI (99.9%): [2050824.539, 2076705.317] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collectWith  thrpt   30  2063764.928 ± 12940.389  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectWithToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectWithToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1525228.115 ops/s
# Warmup Iteration   2: 3575173.929 ops/s
# Warmup Iteration   3: 2962083.472 ops/s
# Warmup Iteration   4: 3567706.078 ops/s
# Warmup Iteration   5: 3520702.650 ops/s
# Warmup Iteration   6: 3520955.818 ops/s
# Warmup Iteration   7: 3577597.543 ops/s
# Warmup Iteration   8: 3575926.979 ops/s
# Warmup Iteration   9: 3579354.441 ops/s
# Warmup Iteration  10: 3583033.772 ops/s
# Warmup Iteration  11: 3569878.386 ops/s
# Warmup Iteration  12: 3574293.943 ops/s
# Warmup Iteration  13: 3590058.966 ops/s
# Warmup Iteration  14: 3552833.054 ops/s
# Warmup Iteration  15: 3575579.291 ops/s
# Warmup Iteration  16: 3591323.359 ops/s
# Warmup Iteration  17: 3592888.598 ops/s
# Warmup Iteration  18: 3535913.172 ops/s
# Warmup Iteration  19: 3588988.581 ops/s
# Warmup Iteration  20: 3611708.189 ops/s
# Warmup Iteration  21: 3556971.823 ops/s
# Warmup Iteration  22: 3562136.384 ops/s
# Warmup Iteration  23: 3592200.971 ops/s
# Warmup Iteration  24: 3631773.143 ops/s
# Warmup Iteration  25: 3611657.961 ops/s
# Warmup Iteration  26: 3599989.145 ops/s
# Warmup Iteration  27: 3648869.243 ops/s
# Warmup Iteration  28: 3664537.602 ops/s
# Warmup Iteration  29: 3606296.983 ops/s
# Warmup Iteration  30: 3559821.322 ops/s
Iteration   1: 3608351.637 ops/s
Iteration   2: 3572936.716 ops/s
Iteration   3: 3564634.379 ops/s
Iteration   4: 3595071.059 ops/s
Iteration   5: 3586446.914 ops/s
Iteration   6: 3569610.647 ops/s
Iteration   7: 3607608.277 ops/s
Iteration   8: 3564740.539 ops/s
Iteration   9: 3597950.870 ops/s
Iteration  10: 3588977.699 ops/s
Iteration  11: 3584387.818 ops/s
Iteration  12: 3577861.522 ops/s
Iteration  13: 3579361.874 ops/s
Iteration  14: 3575282.548 ops/s
Iteration  15: 3639099.415 ops/s
Iteration  16: 3608614.363 ops/s
Iteration  17: 3654011.540 ops/s
Iteration  18: 3589948.308 ops/s
Iteration  19: 3606550.187 ops/s
Iteration  20: 3618713.386 ops/s
Iteration  21: 3626819.159 ops/s
Iteration  22: 3590848.424 ops/s
Iteration  23: 3512761.352 ops/s
Iteration  24: 3569276.014 ops/s
Iteration  25: 3591140.613 ops/s
Iteration  26: 3617780.558 ops/s
Iteration  27: 3627988.885 ops/s
Iteration  28: 3624768.146 ops/s
Iteration  29: 3601452.053 ops/s
Iteration  30: 3616012.703 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collectWithToTarget":
  3595633.587 ±(99.9%) 18498.600 ops/s [Average]
  (min, avg, max) = (3512761.352, 3595633.587, 3654011.540), stdev = 27687.836
  CI (99.9%): [3577134.986, 3614132.187] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collectWithToTarget  thrpt   30  3595633.587 ± 18498.600  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collect_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collect_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 524938.072 ops/s
# Warmup Iteration   2: 1329034.844 ops/s
# Warmup Iteration   3: 1355923.163 ops/s
# Warmup Iteration   4: 1121779.644 ops/s
# Warmup Iteration   5: 1344982.221 ops/s
# Warmup Iteration   6: 1348878.317 ops/s
# Warmup Iteration   7: 1348702.445 ops/s
# Warmup Iteration   8: 1342760.249 ops/s
# Warmup Iteration   9: 1350997.318 ops/s
# Warmup Iteration  10: 1354412.839 ops/s
# Warmup Iteration  11: 1356395.994 ops/s
# Warmup Iteration  12: 1354952.812 ops/s
# Warmup Iteration  13: 1356706.452 ops/s
# Warmup Iteration  14: 1356762.859 ops/s
# Warmup Iteration  15: 1352496.835 ops/s
# Warmup Iteration  16: 1350674.104 ops/s
# Warmup Iteration  17: 1350744.324 ops/s
# Warmup Iteration  18: 1358551.702 ops/s
# Warmup Iteration  19: 1365778.289 ops/s
# Warmup Iteration  20: 1353853.979 ops/s
# Warmup Iteration  21: 1336522.106 ops/s
# Warmup Iteration  22: 1369090.788 ops/s
# Warmup Iteration  23: 1351964.053 ops/s
# Warmup Iteration  24: 1340249.120 ops/s
# Warmup Iteration  25: 1341750.773 ops/s
# Warmup Iteration  26: 1355275.998 ops/s
# Warmup Iteration  27: 1352812.277 ops/s
# Warmup Iteration  28: 1353830.114 ops/s
# Warmup Iteration  29: 1360566.629 ops/s
# Warmup Iteration  30: 1346077.955 ops/s
Iteration   1: 1349975.636 ops/s
Iteration   2: 1355238.946 ops/s
Iteration   3: 1346168.897 ops/s
Iteration   4: 1337431.913 ops/s
Iteration   5: 1338942.627 ops/s
Iteration   6: 1360203.069 ops/s
Iteration   7: 1349983.751 ops/s
Iteration   8: 1357534.024 ops/s
Iteration   9: 1371487.981 ops/s
Iteration  10: 1339864.874 ops/s
Iteration  11: 1336349.779 ops/s
Iteration  12: 1353106.527 ops/s
Iteration  13: 1358165.204 ops/s
Iteration  14: 1370056.372 ops/s
Iteration  15: 1360154.091 ops/s
Iteration  16: 1357476.197 ops/s
Iteration  17: 1366698.035 ops/s
Iteration  18: 1364297.030 ops/s
Iteration  19: 1354710.615 ops/s
Iteration  20: 1337176.374 ops/s
Iteration  21: 1347904.472 ops/s
Iteration  22: 1368200.202 ops/s
Iteration  23: 1338646.831 ops/s
Iteration  24: 1369262.841 ops/s
Iteration  25: 1346410.438 ops/s
Iteration  26: 1352574.657 ops/s
Iteration  27: 1374085.763 ops/s
Iteration  28: 1368558.466 ops/s
Iteration  29: 1359616.780 ops/s
Iteration  30: 1368527.000 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_collect_value":
  1355293.646 ±(99.9%) 7763.893 ops/s [Average]
  (min, avg, max) = (1336349.779, 1355293.646, 1374085.763), stdev = 11620.631
  CI (99.9%): [1347529.753, 1363057.540] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_collect_value  thrpt   30  1355293.646 ± 7763.893  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2701610.263 ops/s
# Warmup Iteration   2: 5381057.627 ops/s
# Warmup Iteration   3: 5015456.120 ops/s
# Warmup Iteration   4: 4803736.749 ops/s
# Warmup Iteration   5: 5281573.411 ops/s
# Warmup Iteration   6: 5279116.395 ops/s
# Warmup Iteration   7: 5223837.723 ops/s
# Warmup Iteration   8: 5305882.444 ops/s
# Warmup Iteration   9: 5275961.041 ops/s
# Warmup Iteration  10: 5262291.503 ops/s
# Warmup Iteration  11: 5295709.638 ops/s
# Warmup Iteration  12: 5253375.889 ops/s
# Warmup Iteration  13: 5329224.779 ops/s
# Warmup Iteration  14: 5266434.441 ops/s
# Warmup Iteration  15: 5296754.782 ops/s
# Warmup Iteration  16: 5260361.288 ops/s
# Warmup Iteration  17: 5599299.476 ops/s
# Warmup Iteration  18: 5580948.638 ops/s
# Warmup Iteration  19: 5550803.162 ops/s
# Warmup Iteration  20: 5547743.516 ops/s
# Warmup Iteration  21: 5501926.761 ops/s
# Warmup Iteration  22: 5520893.726 ops/s
# Warmup Iteration  23: 5572848.234 ops/s
# Warmup Iteration  24: 5557953.990 ops/s
# Warmup Iteration  25: 5601073.592 ops/s
# Warmup Iteration  26: 5715285.742 ops/s
# Warmup Iteration  27: 5616595.911 ops/s
# Warmup Iteration  28: 5511725.101 ops/s
# Warmup Iteration  29: 5618883.262 ops/s
# Warmup Iteration  30: 5532125.604 ops/s
Iteration   1: 5661952.983 ops/s
Iteration   2: 5628147.498 ops/s
Iteration   3: 5445699.184 ops/s
Iteration   4: 5555270.036 ops/s
Iteration   5: 5620835.464 ops/s
Iteration   6: 5459985.716 ops/s
Iteration   7: 5511318.381 ops/s
Iteration   8: 5619537.772 ops/s
Iteration   9: 5607251.176 ops/s
Iteration  10: 5564789.252 ops/s
Iteration  11: 5572857.985 ops/s
Iteration  12: 5676545.062 ops/s
Iteration  13: 5611093.718 ops/s
Iteration  14: 5647043.163 ops/s
Iteration  15: 5342508.932 ops/s
Iteration  16: 5567088.263 ops/s
Iteration  17: 5527557.590 ops/s
Iteration  18: 5494979.035 ops/s
Iteration  19: 5379444.346 ops/s
Iteration  20: 5625352.958 ops/s
Iteration  21: 5421051.761 ops/s
Iteration  22: 5545320.726 ops/s
Iteration  23: 5565991.910 ops/s
Iteration  24: 5588213.617 ops/s
Iteration  25: 5596041.696 ops/s
Iteration  26: 5414900.545 ops/s
Iteration  27: 5470188.270 ops/s
Iteration  28: 5476248.082 ops/s
Iteration  29: 5604880.376 ops/s
Iteration  30: 5524321.158 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_contains":
  5544213.888 ±(99.9%) 57798.729 ops/s [Average]
  (min, avg, max) = (5342508.932, 5544213.888, 5676545.062), stdev = 86510.423
  CI (99.9%): [5486415.159, 5602012.617] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_contains  thrpt   30  5544213.888 ± 57798.729  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 524207.177 ops/s
# Warmup Iteration   2: 639638.285 ops/s
# Warmup Iteration   3: 820700.028 ops/s
# Warmup Iteration   4: 826321.380 ops/s
# Warmup Iteration   5: 816252.898 ops/s
# Warmup Iteration   6: 820229.906 ops/s
# Warmup Iteration   7: 824070.824 ops/s
# Warmup Iteration   8: 824956.630 ops/s
# Warmup Iteration   9: 730011.416 ops/s
# Warmup Iteration  10: 762857.888 ops/s
# Warmup Iteration  11: 823971.892 ops/s
# Warmup Iteration  12: 814269.527 ops/s
# Warmup Iteration  13: 825873.883 ops/s
# Warmup Iteration  14: 815319.552 ops/s
# Warmup Iteration  15: 810389.203 ops/s
# Warmup Iteration  16: 828009.027 ops/s
# Warmup Iteration  17: 832942.199 ops/s
# Warmup Iteration  18: 830054.510 ops/s
# Warmup Iteration  19: 832620.956 ops/s
# Warmup Iteration  20: 829488.803 ops/s
# Warmup Iteration  21: 833306.493 ops/s
# Warmup Iteration  22: 826692.841 ops/s
# Warmup Iteration  23: 824033.237 ops/s
# Warmup Iteration  24: 832446.955 ops/s
# Warmup Iteration  25: 826582.680 ops/s
# Warmup Iteration  26: 824546.877 ops/s
# Warmup Iteration  27: 825462.090 ops/s
# Warmup Iteration  28: 824385.383 ops/s
# Warmup Iteration  29: 829347.260 ops/s
# Warmup Iteration  30: 834314.071 ops/s
Iteration   1: 824891.128 ops/s
Iteration   2: 820585.700 ops/s
Iteration   3: 843375.517 ops/s
Iteration   4: 841455.353 ops/s
Iteration   5: 841542.759 ops/s
Iteration   6: 831481.146 ops/s
Iteration   7: 840705.803 ops/s
Iteration   8: 836409.829 ops/s
Iteration   9: 819762.353 ops/s
Iteration  10: 832012.768 ops/s
Iteration  11: 826371.083 ops/s
Iteration  12: 833656.728 ops/s
Iteration  13: 832525.226 ops/s
Iteration  14: 825038.891 ops/s
Iteration  15: 836040.630 ops/s
Iteration  16: 844667.090 ops/s
Iteration  17: 842948.303 ops/s
Iteration  18: 840503.197 ops/s
Iteration  19: 839308.423 ops/s
Iteration  20: 825742.741 ops/s
Iteration  21: 847525.632 ops/s
Iteration  22: 832968.834 ops/s
Iteration  23: 843223.033 ops/s
Iteration  24: 840822.398 ops/s
Iteration  25: 838067.172 ops/s
Iteration  26: 836173.887 ops/s
Iteration  27: 836824.948 ops/s
Iteration  28: 834476.131 ops/s
Iteration  29: 827657.660 ops/s
Iteration  30: 845075.029 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsAll":
  835394.646 ±(99.9%) 5045.914 ops/s [Average]
  (min, avg, max) = (819762.353, 835394.646, 847525.632), stdev = 7552.487
  CI (99.9%): [830348.732, 840440.560] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_containsAll  thrpt   30  835394.646 ± 5045.914  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsAllArguments$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsAllArguments

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 909466.921 ops/s
# Warmup Iteration   2: 1413152.899 ops/s
# Warmup Iteration   3: 1625119.821 ops/s
# Warmup Iteration   4: 1616038.189 ops/s
# Warmup Iteration   5: 1628592.252 ops/s
# Warmup Iteration   6: 1599856.263 ops/s
# Warmup Iteration   7: 1398235.727 ops/s
# Warmup Iteration   8: 1626951.098 ops/s
# Warmup Iteration   9: 1638108.454 ops/s
# Warmup Iteration  10: 1641675.158 ops/s
# Warmup Iteration  11: 1627547.010 ops/s
# Warmup Iteration  12: 1637027.168 ops/s
# Warmup Iteration  13: 1644992.264 ops/s
# Warmup Iteration  14: 1643370.230 ops/s
# Warmup Iteration  15: 1636214.286 ops/s
# Warmup Iteration  16: 1625894.677 ops/s
# Warmup Iteration  17: 1635806.667 ops/s
# Warmup Iteration  18: 1636214.567 ops/s
# Warmup Iteration  19: 1632627.216 ops/s
# Warmup Iteration  20: 1620746.595 ops/s
# Warmup Iteration  21: 1630763.761 ops/s
# Warmup Iteration  22: 1625864.487 ops/s
# Warmup Iteration  23: 1641174.860 ops/s
# Warmup Iteration  24: 1631825.547 ops/s
# Warmup Iteration  25: 1628468.123 ops/s
# Warmup Iteration  26: 1629156.369 ops/s
# Warmup Iteration  27: 1633457.475 ops/s
# Warmup Iteration  28: 1625430.688 ops/s
# Warmup Iteration  29: 1645999.900 ops/s
# Warmup Iteration  30: 1625910.825 ops/s
Iteration   1: 1626344.652 ops/s
Iteration   2: 1643160.630 ops/s
Iteration   3: 1644817.740 ops/s
Iteration   4: 1641130.934 ops/s
Iteration   5: 1630762.997 ops/s
Iteration   6: 1645747.230 ops/s
Iteration   7: 1610975.207 ops/s
Iteration   8: 1633649.403 ops/s
Iteration   9: 1621847.951 ops/s
Iteration  10: 1627037.559 ops/s
Iteration  11: 1634147.881 ops/s
Iteration  12: 1624629.997 ops/s
Iteration  13: 1628275.437 ops/s
Iteration  14: 1640637.846 ops/s
Iteration  15: 1633209.168 ops/s
Iteration  16: 1643438.066 ops/s
Iteration  17: 1625117.274 ops/s
Iteration  18: 1636020.660 ops/s
Iteration  19: 1634963.142 ops/s
Iteration  20: 1632818.216 ops/s
Iteration  21: 1630455.905 ops/s
Iteration  22: 1615204.095 ops/s
Iteration  23: 1622220.150 ops/s
Iteration  24: 1633577.894 ops/s
Iteration  25: 1629276.949 ops/s
Iteration  26: 1616925.834 ops/s
Iteration  27: 1628456.283 ops/s
Iteration  28: 1630973.686 ops/s
Iteration  29: 1603914.031 ops/s
Iteration  30: 1634206.238 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsAllArguments":
  1630131.435 ±(99.9%) 6611.298 ops/s [Average]
  (min, avg, max) = (1603914.031, 1630131.435, 1645747.230), stdev = 9895.480
  CI (99.9%): [1623520.137, 1636742.733] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_containsAllArguments  thrpt   30  1630131.435 ± 6611.298  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 877831.926 ops/s
# Warmup Iteration   2: 1376183.532 ops/s
# Warmup Iteration   3: 1596589.274 ops/s
# Warmup Iteration   4: 1608502.581 ops/s
# Warmup Iteration   5: 1593072.246 ops/s
# Warmup Iteration   6: 1612940.836 ops/s
# Warmup Iteration   7: 1336907.244 ops/s
# Warmup Iteration   8: 1601910.215 ops/s
# Warmup Iteration   9: 1594988.922 ops/s
# Warmup Iteration  10: 1604076.840 ops/s
# Warmup Iteration  11: 1594971.118 ops/s
# Warmup Iteration  12: 1604059.052 ops/s
# Warmup Iteration  13: 1607673.941 ops/s
# Warmup Iteration  14: 1608812.283 ops/s
# Warmup Iteration  15: 1609879.946 ops/s
# Warmup Iteration  16: 1609481.721 ops/s
# Warmup Iteration  17: 1633975.820 ops/s
# Warmup Iteration  18: 1629861.467 ops/s
# Warmup Iteration  19: 1627200.793 ops/s
# Warmup Iteration  20: 1632626.021 ops/s
# Warmup Iteration  21: 1628833.019 ops/s
# Warmup Iteration  22: 1621130.109 ops/s
# Warmup Iteration  23: 1629678.107 ops/s
# Warmup Iteration  24: 1631629.010 ops/s
# Warmup Iteration  25: 1628146.050 ops/s
# Warmup Iteration  26: 1631883.809 ops/s
# Warmup Iteration  27: 1624047.466 ops/s
# Warmup Iteration  28: 1623338.586 ops/s
# Warmup Iteration  29: 1636415.089 ops/s
# Warmup Iteration  30: 1628061.966 ops/s
Iteration   1: 1618961.284 ops/s
Iteration   2: 1625795.190 ops/s
Iteration   3: 1616615.811 ops/s
Iteration   4: 1633578.018 ops/s
Iteration   5: 1612428.722 ops/s
Iteration   6: 1643757.143 ops/s
Iteration   7: 1631548.835 ops/s
Iteration   8: 1636948.014 ops/s
Iteration   9: 1618870.106 ops/s
Iteration  10: 1628122.486 ops/s
Iteration  11: 1627789.137 ops/s
Iteration  12: 1627948.628 ops/s
Iteration  13: 1632298.122 ops/s
Iteration  14: 1641313.069 ops/s
Iteration  15: 1627581.059 ops/s
Iteration  16: 1632282.254 ops/s
Iteration  17: 1630041.141 ops/s
Iteration  18: 1637952.724 ops/s
Iteration  19: 1636097.951 ops/s
Iteration  20: 1627243.906 ops/s
Iteration  21: 1633769.725 ops/s
Iteration  22: 1627787.416 ops/s
Iteration  23: 1620404.542 ops/s
Iteration  24: 1630575.155 ops/s
Iteration  25: 1620671.004 ops/s
Iteration  26: 1630938.796 ops/s
Iteration  27: 1627950.436 ops/s
Iteration  28: 1630784.816 ops/s
Iteration  29: 1617643.359 ops/s
Iteration  30: 1606587.404 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsAllIterable":
  1627809.542 ±(99.9%) 5590.022 ops/s [Average]
  (min, avg, max) = (1606587.404, 1627809.542, 1643757.143), stdev = 8366.883
  CI (99.9%): [1622219.519, 1633399.564] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_containsAllIterable  thrpt   30  1627809.542 ± 5590.022  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 497178.586 ops/s
# Warmup Iteration   2: 632756.081 ops/s
# Warmup Iteration   3: 817745.162 ops/s
# Warmup Iteration   4: 808034.431 ops/s
# Warmup Iteration   5: 815684.930 ops/s
# Warmup Iteration   6: 811383.883 ops/s
# Warmup Iteration   7: 818073.960 ops/s
# Warmup Iteration   8: 816501.636 ops/s
# Warmup Iteration   9: 675871.437 ops/s
# Warmup Iteration  10: 815730.974 ops/s
# Warmup Iteration  11: 812403.283 ops/s
# Warmup Iteration  12: 815541.566 ops/s
# Warmup Iteration  13: 811110.352 ops/s
# Warmup Iteration  14: 815136.658 ops/s
# Warmup Iteration  15: 813323.168 ops/s
# Warmup Iteration  16: 812697.368 ops/s
# Warmup Iteration  17: 814103.481 ops/s
# Warmup Iteration  18: 819513.290 ops/s
# Warmup Iteration  19: 814194.303 ops/s
# Warmup Iteration  20: 813295.553 ops/s
# Warmup Iteration  21: 809748.657 ops/s
# Warmup Iteration  22: 817088.157 ops/s
# Warmup Iteration  23: 813950.535 ops/s
# Warmup Iteration  24: 814411.456 ops/s
# Warmup Iteration  25: 813095.535 ops/s
# Warmup Iteration  26: 817637.374 ops/s
# Warmup Iteration  27: 816069.096 ops/s
# Warmup Iteration  28: 816994.126 ops/s
# Warmup Iteration  29: 814829.858 ops/s
# Warmup Iteration  30: 815545.165 ops/s
Iteration   1: 814980.365 ops/s
Iteration   2: 810292.882 ops/s
Iteration   3: 814621.404 ops/s
Iteration   4: 816955.598 ops/s
Iteration   5: 815486.560 ops/s
Iteration   6: 814486.830 ops/s
Iteration   7: 813563.144 ops/s
Iteration   8: 818598.122 ops/s
Iteration   9: 817087.181 ops/s
Iteration  10: 818366.854 ops/s
Iteration  11: 818905.205 ops/s
Iteration  12: 814063.312 ops/s
Iteration  13: 814652.554 ops/s
Iteration  14: 821118.768 ops/s
Iteration  15: 816506.025 ops/s
Iteration  16: 812200.325 ops/s
Iteration  17: 821242.225 ops/s
Iteration  18: 816433.736 ops/s
Iteration  19: 812638.216 ops/s
Iteration  20: 814255.833 ops/s
Iteration  21: 817773.546 ops/s
Iteration  22: 814149.532 ops/s
Iteration  23: 817476.857 ops/s
Iteration  24: 812264.738 ops/s
Iteration  25: 811211.539 ops/s
Iteration  26: 819152.232 ops/s
Iteration  27: 818917.289 ops/s
Iteration  28: 814756.242 ops/s
Iteration  29: 817806.723 ops/s
Iteration  30: 814330.304 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsAnyCollection":
  815809.805 ±(99.9%) 1864.941 ops/s [Average]
  (min, avg, max) = (810292.882, 815809.805, 821242.225), stdev = 2791.356
  CI (99.9%): [813944.864, 817674.746] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  815809.805 ± 1864.941  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 405497.311 ops/s
# Warmup Iteration   2: 459545.436 ops/s
# Warmup Iteration   3: 585585.896 ops/s
# Warmup Iteration   4: 584173.346 ops/s
# Warmup Iteration   5: 581673.347 ops/s
# Warmup Iteration   6: 588239.837 ops/s
# Warmup Iteration   7: 581706.939 ops/s
# Warmup Iteration   8: 586447.431 ops/s
# Warmup Iteration   9: 584775.649 ops/s
# Warmup Iteration  10: 587255.815 ops/s
# Warmup Iteration  11: 502077.793 ops/s
# Warmup Iteration  12: 583599.518 ops/s
# Warmup Iteration  13: 586364.236 ops/s
# Warmup Iteration  14: 582273.905 ops/s
# Warmup Iteration  15: 584179.167 ops/s
# Warmup Iteration  16: 589515.298 ops/s
# Warmup Iteration  17: 589719.450 ops/s
# Warmup Iteration  18: 590660.681 ops/s
# Warmup Iteration  19: 589960.672 ops/s
# Warmup Iteration  20: 589618.804 ops/s
# Warmup Iteration  21: 589881.334 ops/s
# Warmup Iteration  22: 589797.868 ops/s
# Warmup Iteration  23: 591026.019 ops/s
# Warmup Iteration  24: 589350.543 ops/s
# Warmup Iteration  25: 589430.804 ops/s
# Warmup Iteration  26: 590807.177 ops/s
# Warmup Iteration  27: 590446.652 ops/s
# Warmup Iteration  28: 589925.170 ops/s
# Warmup Iteration  29: 589777.943 ops/s
# Warmup Iteration  30: 587857.873 ops/s
Iteration   1: 588540.485 ops/s
Iteration   2: 591808.674 ops/s
Iteration   3: 588196.136 ops/s
Iteration   4: 590772.576 ops/s
Iteration   5: 587969.550 ops/s
Iteration   6: 587706.095 ops/s
Iteration   7: 589622.472 ops/s
Iteration   8: 589278.920 ops/s
Iteration   9: 588775.867 ops/s
Iteration  10: 589919.139 ops/s
Iteration  11: 592025.360 ops/s
Iteration  12: 592087.062 ops/s
Iteration  13: 591840.367 ops/s
Iteration  14: 586367.340 ops/s
Iteration  15: 590820.928 ops/s
Iteration  16: 590411.290 ops/s
Iteration  17: 588280.779 ops/s
Iteration  18: 592688.078 ops/s
Iteration  19: 590277.869 ops/s
Iteration  20: 589784.824 ops/s
Iteration  21: 590768.732 ops/s
Iteration  22: 590787.864 ops/s
Iteration  23: 590930.879 ops/s
Iteration  24: 589858.944 ops/s
Iteration  25: 590825.455 ops/s
Iteration  26: 591841.531 ops/s
Iteration  27: 589418.739 ops/s
Iteration  28: 588399.090 ops/s
Iteration  29: 590867.069 ops/s
Iteration  30: 590110.803 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsAnyIterable":
  590032.764 ±(99.9%) 1013.980 ops/s [Average]
  (min, avg, max) = (586367.340, 590032.764, 592688.078), stdev = 1517.678
  CI (99.9%): [589018.783, 591046.744] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  590032.764 ± 1013.980  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 491085.546 ops/s
# Warmup Iteration   2: 960818.676 ops/s
# Warmup Iteration   3: 985401.601 ops/s
# Warmup Iteration   4: 998824.310 ops/s
# Warmup Iteration   5: 834993.156 ops/s
# Warmup Iteration   6: 998423.500 ops/s
# Warmup Iteration   7: 996501.940 ops/s
# Warmup Iteration   8: 993295.174 ops/s
# Warmup Iteration   9: 997180.911 ops/s
# Warmup Iteration  10: 996637.593 ops/s
# Warmup Iteration  11: 1001323.405 ops/s
# Warmup Iteration  12: 998715.913 ops/s
# Warmup Iteration  13: 1001104.337 ops/s
# Warmup Iteration  14: 997560.223 ops/s
# Warmup Iteration  15: 996628.930 ops/s
# Warmup Iteration  16: 999146.350 ops/s
# Warmup Iteration  17: 998213.652 ops/s
# Warmup Iteration  18: 996065.374 ops/s
# Warmup Iteration  19: 997641.915 ops/s
# Warmup Iteration  20: 996556.454 ops/s
# Warmup Iteration  21: 1001680.647 ops/s
# Warmup Iteration  22: 995843.525 ops/s
# Warmup Iteration  23: 993659.112 ops/s
# Warmup Iteration  24: 996961.869 ops/s
# Warmup Iteration  25: 994953.719 ops/s
# Warmup Iteration  26: 999186.977 ops/s
# Warmup Iteration  27: 1001655.938 ops/s
# Warmup Iteration  28: 999200.700 ops/s
# Warmup Iteration  29: 998491.412 ops/s
# Warmup Iteration  30: 996993.856 ops/s
Iteration   1: 998526.376 ops/s
Iteration   2: 997722.448 ops/s
Iteration   3: 993647.634 ops/s
Iteration   4: 997607.106 ops/s
Iteration   5: 1003115.505 ops/s
Iteration   6: 998145.075 ops/s
Iteration   7: 994843.745 ops/s
Iteration   8: 997248.709 ops/s
Iteration   9: 993360.721 ops/s
Iteration  10: 997368.385 ops/s
Iteration  11: 1000140.275 ops/s
Iteration  12: 997228.533 ops/s
Iteration  13: 997205.671 ops/s
Iteration  14: 1000091.016 ops/s
Iteration  15: 995688.977 ops/s
Iteration  16: 999787.346 ops/s
Iteration  17: 1002495.543 ops/s
Iteration  18: 1000068.254 ops/s
Iteration  19: 1000031.405 ops/s
Iteration  20: 1001220.774 ops/s
Iteration  21: 1002513.840 ops/s
Iteration  22: 998778.858 ops/s
Iteration  23: 999568.437 ops/s
Iteration  24: 994940.333 ops/s
Iteration  25: 995654.487 ops/s
Iteration  26: 1000827.839 ops/s
Iteration  27: 1004362.184 ops/s
Iteration  28: 1002480.348 ops/s
Iteration  29: 1000034.448 ops/s
Iteration  30: 1001796.342 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsKey":
  998883.354 ±(99.9%) 1913.125 ops/s [Average]
  (min, avg, max) = (993360.721, 998883.354, 1004362.184), stdev = 2863.475
  CI (99.9%): [996970.229, 1000796.478] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_containsKey  thrpt   30  998883.354 ± 1913.125  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 524490.623 ops/s
# Warmup Iteration   2: 716459.527 ops/s
# Warmup Iteration   3: 859117.813 ops/s
# Warmup Iteration   4: 858337.206 ops/s
# Warmup Iteration   5: 864011.559 ops/s
# Warmup Iteration   6: 863668.603 ops/s
# Warmup Iteration   7: 862389.902 ops/s
# Warmup Iteration   8: 726683.468 ops/s
# Warmup Iteration   9: 861826.575 ops/s
# Warmup Iteration  10: 864232.902 ops/s
# Warmup Iteration  11: 862455.758 ops/s
# Warmup Iteration  12: 861304.586 ops/s
# Warmup Iteration  13: 859925.600 ops/s
# Warmup Iteration  14: 865741.453 ops/s
# Warmup Iteration  15: 864883.489 ops/s
# Warmup Iteration  16: 862866.771 ops/s
# Warmup Iteration  17: 862312.401 ops/s
# Warmup Iteration  18: 863905.055 ops/s
# Warmup Iteration  19: 862606.148 ops/s
# Warmup Iteration  20: 859559.788 ops/s
# Warmup Iteration  21: 859459.153 ops/s
# Warmup Iteration  22: 863107.552 ops/s
# Warmup Iteration  23: 863439.349 ops/s
# Warmup Iteration  24: 859073.989 ops/s
# Warmup Iteration  25: 860565.180 ops/s
# Warmup Iteration  26: 863830.224 ops/s
# Warmup Iteration  27: 863623.305 ops/s
# Warmup Iteration  28: 865614.856 ops/s
# Warmup Iteration  29: 863259.248 ops/s
# Warmup Iteration  30: 863888.675 ops/s
Iteration   1: 863757.030 ops/s
Iteration   2: 863372.795 ops/s
Iteration   3: 867238.058 ops/s
Iteration   4: 864447.078 ops/s
Iteration   5: 866866.596 ops/s
Iteration   6: 867390.793 ops/s
Iteration   7: 865402.122 ops/s
Iteration   8: 867255.943 ops/s
Iteration   9: 863571.873 ops/s
Iteration  10: 870209.669 ops/s
Iteration  11: 866510.341 ops/s
Iteration  12: 862885.345 ops/s
Iteration  13: 863820.341 ops/s
Iteration  14: 865225.480 ops/s
Iteration  15: 861974.595 ops/s
Iteration  16: 865995.699 ops/s
Iteration  17: 862121.347 ops/s
Iteration  18: 863713.604 ops/s
Iteration  19: 866251.757 ops/s
Iteration  20: 860637.754 ops/s
Iteration  21: 862816.048 ops/s
Iteration  22: 861087.541 ops/s
Iteration  23: 860782.343 ops/s
Iteration  24: 864914.379 ops/s
Iteration  25: 863688.183 ops/s
Iteration  26: 866180.905 ops/s
Iteration  27: 863455.797 ops/s
Iteration  28: 867062.918 ops/s
Iteration  29: 856511.185 ops/s
Iteration  30: 860647.011 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsNoneCollection":
  864193.151 ±(99.9%) 1844.878 ops/s [Average]
  (min, avg, max) = (856511.185, 864193.151, 870209.669), stdev = 2761.327
  CI (99.9%): [862348.273, 866038.029] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  864193.151 ± 1844.878  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 372253.185 ops/s
# Warmup Iteration   2: 427314.137 ops/s
# Warmup Iteration   3: 556712.602 ops/s
# Warmup Iteration   4: 557931.490 ops/s
# Warmup Iteration   5: 557657.375 ops/s
# Warmup Iteration   6: 559515.753 ops/s
# Warmup Iteration   7: 560680.188 ops/s
# Warmup Iteration   8: 557771.185 ops/s
# Warmup Iteration   9: 558762.637 ops/s
# Warmup Iteration  10: 526342.049 ops/s
# Warmup Iteration  11: 503296.464 ops/s
# Warmup Iteration  12: 560941.795 ops/s
# Warmup Iteration  13: 559740.402 ops/s
# Warmup Iteration  14: 560159.282 ops/s
# Warmup Iteration  15: 559459.686 ops/s
# Warmup Iteration  16: 560045.636 ops/s
# Warmup Iteration  17: 560498.923 ops/s
# Warmup Iteration  18: 559327.421 ops/s
# Warmup Iteration  19: 558346.580 ops/s
# Warmup Iteration  20: 561259.179 ops/s
# Warmup Iteration  21: 561001.249 ops/s
# Warmup Iteration  22: 561604.291 ops/s
# Warmup Iteration  23: 556299.123 ops/s
# Warmup Iteration  24: 559199.411 ops/s
# Warmup Iteration  25: 559378.432 ops/s
# Warmup Iteration  26: 560305.701 ops/s
# Warmup Iteration  27: 562739.377 ops/s
# Warmup Iteration  28: 559508.280 ops/s
# Warmup Iteration  29: 558795.232 ops/s
# Warmup Iteration  30: 560192.886 ops/s
Iteration   1: 562772.238 ops/s
Iteration   2: 561129.214 ops/s
Iteration   3: 562473.241 ops/s
Iteration   4: 561742.531 ops/s
Iteration   5: 560692.725 ops/s
Iteration   6: 564091.372 ops/s
Iteration   7: 558141.086 ops/s
Iteration   8: 560406.237 ops/s
Iteration   9: 559883.438 ops/s
Iteration  10: 561048.091 ops/s
Iteration  11: 560560.425 ops/s
Iteration  12: 560166.274 ops/s
Iteration  13: 561664.357 ops/s
Iteration  14: 560864.012 ops/s
Iteration  15: 560342.625 ops/s
Iteration  16: 560431.978 ops/s
Iteration  17: 561284.875 ops/s
Iteration  18: 559399.717 ops/s
Iteration  19: 561174.941 ops/s
Iteration  20: 560476.469 ops/s
Iteration  21: 555465.056 ops/s
Iteration  22: 556063.239 ops/s
Iteration  23: 559185.336 ops/s
Iteration  24: 562313.325 ops/s
Iteration  25: 560401.625 ops/s
Iteration  26: 560164.723 ops/s
Iteration  27: 562646.636 ops/s
Iteration  28: 562238.696 ops/s
Iteration  29: 562294.732 ops/s
Iteration  30: 561987.462 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsNoneIterable":
  560716.889 ±(99.9%) 1215.135 ops/s [Average]
  (min, avg, max) = (555465.056, 560716.889, 564091.372), stdev = 1818.757
  CI (99.9%): [559501.754, 561932.024] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  560716.889 ± 1215.135  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 388297.336 ops/s
# Warmup Iteration   2: 781671.167 ops/s
# Warmup Iteration   3: 810294.887 ops/s
# Warmup Iteration   4: 810831.640 ops/s
# Warmup Iteration   5: 675356.744 ops/s
# Warmup Iteration   6: 813547.145 ops/s
# Warmup Iteration   7: 809935.944 ops/s
# Warmup Iteration   8: 808758.768 ops/s
# Warmup Iteration   9: 811297.700 ops/s
# Warmup Iteration  10: 808357.699 ops/s
# Warmup Iteration  11: 811188.492 ops/s
# Warmup Iteration  12: 805970.338 ops/s
# Warmup Iteration  13: 808179.250 ops/s
# Warmup Iteration  14: 807122.179 ops/s
# Warmup Iteration  15: 807648.710 ops/s
# Warmup Iteration  16: 809157.119 ops/s
# Warmup Iteration  17: 807289.442 ops/s
# Warmup Iteration  18: 812740.143 ops/s
# Warmup Iteration  19: 810129.634 ops/s
# Warmup Iteration  20: 808781.519 ops/s
# Warmup Iteration  21: 812607.663 ops/s
# Warmup Iteration  22: 807736.591 ops/s
# Warmup Iteration  23: 808397.730 ops/s
# Warmup Iteration  24: 810414.212 ops/s
# Warmup Iteration  25: 809177.239 ops/s
# Warmup Iteration  26: 806457.496 ops/s
# Warmup Iteration  27: 809769.204 ops/s
# Warmup Iteration  28: 813432.578 ops/s
# Warmup Iteration  29: 810429.105 ops/s
# Warmup Iteration  30: 810099.713 ops/s
Iteration   1: 809240.204 ops/s
Iteration   2: 806143.845 ops/s
Iteration   3: 811546.851 ops/s
Iteration   4: 810494.182 ops/s
Iteration   5: 808521.098 ops/s
Iteration   6: 808803.412 ops/s
Iteration   7: 810334.171 ops/s
Iteration   8: 806266.911 ops/s
Iteration   9: 808963.851 ops/s
Iteration  10: 813685.844 ops/s
Iteration  11: 809693.694 ops/s
Iteration  12: 807497.109 ops/s
Iteration  13: 806285.924 ops/s
Iteration  14: 805576.260 ops/s
Iteration  15: 807726.280 ops/s
Iteration  16: 808252.783 ops/s
Iteration  17: 810601.110 ops/s
Iteration  18: 811629.700 ops/s
Iteration  19: 806424.071 ops/s
Iteration  20: 807646.325 ops/s
Iteration  21: 806005.655 ops/s
Iteration  22: 808364.862 ops/s
Iteration  23: 810033.507 ops/s
Iteration  24: 809588.443 ops/s
Iteration  25: 809596.561 ops/s
Iteration  26: 805615.143 ops/s
Iteration  27: 809057.580 ops/s
Iteration  28: 812196.408 ops/s
Iteration  29: 809961.741 ops/s
Iteration  30: 805309.901 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_containsValue":
  808702.114 ±(99.9%) 1441.847 ops/s [Average]
  (min, avg, max) = (805309.901, 808702.114, 813685.844), stdev = 2158.089
  CI (99.9%): [807260.267, 810143.962] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_containsValue  thrpt   30  808702.114 ± 1441.847  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2637571.055 ops/s
# Warmup Iteration   2: 5459749.623 ops/s
# Warmup Iteration   3: 4612341.766 ops/s
# Warmup Iteration   4: 5528062.121 ops/s
# Warmup Iteration   5: 5508981.670 ops/s
# Warmup Iteration   6: 5480264.983 ops/s
# Warmup Iteration   7: 5496342.931 ops/s
# Warmup Iteration   8: 5508813.335 ops/s
# Warmup Iteration   9: 5524463.722 ops/s
# Warmup Iteration  10: 5516855.348 ops/s
# Warmup Iteration  11: 5511101.567 ops/s
# Warmup Iteration  12: 5512943.012 ops/s
# Warmup Iteration  13: 5512204.522 ops/s
# Warmup Iteration  14: 5505215.529 ops/s
# Warmup Iteration  15: 5507977.690 ops/s
# Warmup Iteration  16: 5517634.311 ops/s
# Warmup Iteration  17: 5508839.407 ops/s
# Warmup Iteration  18: 5497938.060 ops/s
# Warmup Iteration  19: 5509638.522 ops/s
# Warmup Iteration  20: 5507632.613 ops/s
# Warmup Iteration  21: 5520538.689 ops/s
# Warmup Iteration  22: 5469280.465 ops/s
# Warmup Iteration  23: 5516014.109 ops/s
# Warmup Iteration  24: 5515498.146 ops/s
# Warmup Iteration  25: 5501464.936 ops/s
# Warmup Iteration  26: 5508753.719 ops/s
# Warmup Iteration  27: 5488919.853 ops/s
# Warmup Iteration  28: 5514438.515 ops/s
# Warmup Iteration  29: 5486813.361 ops/s
# Warmup Iteration  30: 5523118.076 ops/s
Iteration   1: 5523572.800 ops/s
Iteration   2: 5508294.194 ops/s
Iteration   3: 5516981.095 ops/s
Iteration   4: 5501557.203 ops/s
Iteration   5: 5513266.677 ops/s
Iteration   6: 5512954.172 ops/s
Iteration   7: 5522696.512 ops/s
Iteration   8: 5518964.623 ops/s
Iteration   9: 5488394.411 ops/s
Iteration  10: 5515337.909 ops/s
Iteration  11: 5530485.222 ops/s
Iteration  12: 5511479.102 ops/s
Iteration  13: 5470723.711 ops/s
Iteration  14: 5480647.572 ops/s
Iteration  15: 5485929.793 ops/s
Iteration  16: 5488644.016 ops/s
Iteration  17: 5510767.373 ops/s
Iteration  18: 5531877.268 ops/s
Iteration  19: 5525558.800 ops/s
Iteration  20: 5530095.689 ops/s
Iteration  21: 5505503.909 ops/s
Iteration  22: 5509924.474 ops/s
Iteration  23: 5497470.012 ops/s
Iteration  24: 5506784.343 ops/s
Iteration  25: 5515801.072 ops/s
Iteration  26: 5516040.917 ops/s
Iteration  27: 5522601.159 ops/s
Iteration  28: 5491585.129 ops/s
Iteration  29: 5527670.029 ops/s
Iteration  30: 5530711.457 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_count":
  5510410.688 ±(99.9%) 10774.238 ops/s [Average]
  (min, avg, max) = (5470723.711, 5510410.688, 5531877.268), stdev = 16126.373
  CI (99.9%): [5499636.450, 5521184.926] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_count  thrpt   30  5510410.688 ± 10774.238  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 825424.266 ops/s
# Warmup Iteration   2: 1713303.032 ops/s
# Warmup Iteration   3: 1848332.327 ops/s
# Warmup Iteration   4: 1857838.344 ops/s
# Warmup Iteration   5: 1551215.026 ops/s
# Warmup Iteration   6: 1864367.443 ops/s
# Warmup Iteration   7: 1859250.189 ops/s
# Warmup Iteration   8: 1861503.065 ops/s
# Warmup Iteration   9: 1860350.332 ops/s
# Warmup Iteration  10: 1860671.484 ops/s
# Warmup Iteration  11: 1860945.430 ops/s
# Warmup Iteration  12: 1857349.834 ops/s
# Warmup Iteration  13: 1863079.377 ops/s
# Warmup Iteration  14: 1862381.951 ops/s
# Warmup Iteration  15: 1861555.605 ops/s
# Warmup Iteration  16: 1857048.554 ops/s
# Warmup Iteration  17: 1860254.717 ops/s
# Warmup Iteration  18: 1862168.080 ops/s
# Warmup Iteration  19: 1859575.973 ops/s
# Warmup Iteration  20: 1854847.271 ops/s
# Warmup Iteration  21: 1861353.692 ops/s
# Warmup Iteration  22: 1855527.620 ops/s
# Warmup Iteration  23: 1863045.889 ops/s
# Warmup Iteration  24: 1859523.514 ops/s
# Warmup Iteration  25: 1859152.598 ops/s
# Warmup Iteration  26: 1859350.791 ops/s
# Warmup Iteration  27: 1859305.057 ops/s
# Warmup Iteration  28: 1860376.826 ops/s
# Warmup Iteration  29: 1862831.278 ops/s
# Warmup Iteration  30: 1860549.266 ops/s
Iteration   1: 1857622.021 ops/s
Iteration   2: 1864809.984 ops/s
Iteration   3: 1857625.008 ops/s
Iteration   4: 1857333.610 ops/s
Iteration   5: 1867730.773 ops/s
Iteration   6: 1854828.185 ops/s
Iteration   7: 1858718.113 ops/s
Iteration   8: 1863382.054 ops/s
Iteration   9: 1862876.623 ops/s
Iteration  10: 1858119.089 ops/s
Iteration  11: 1856096.099 ops/s
Iteration  12: 1856021.837 ops/s
Iteration  13: 1840232.679 ops/s
Iteration  14: 1833537.932 ops/s
Iteration  15: 1840788.918 ops/s
Iteration  16: 1856478.719 ops/s
Iteration  17: 1848981.002 ops/s
Iteration  18: 1860610.001 ops/s
Iteration  19: 1852216.484 ops/s
Iteration  20: 1841341.008 ops/s
Iteration  21: 1848737.534 ops/s
Iteration  22: 1844966.850 ops/s
Iteration  23: 1837597.642 ops/s
Iteration  24: 1848782.912 ops/s
Iteration  25: 1856944.542 ops/s
Iteration  26: 1848642.828 ops/s
Iteration  27: 1842434.151 ops/s
Iteration  28: 1851187.026 ops/s
Iteration  29: 1845489.773 ops/s
Iteration  30: 1847182.090 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_countBy":
  1852043.850 ±(99.9%) 5776.590 ops/s [Average]
  (min, avg, max) = (1833537.932, 1852043.850, 1867730.773), stdev = 8646.128
  CI (99.9%): [1846267.260, 1857820.439] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_countBy  thrpt   30  1852043.850 ± 5776.590  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 232678.057 ops/s
# Warmup Iteration   2: 385385.150 ops/s
# Warmup Iteration   3: 453168.423 ops/s
# Warmup Iteration   4: 454876.666 ops/s
# Warmup Iteration   5: 458097.470 ops/s
# Warmup Iteration   6: 404789.950 ops/s
# Warmup Iteration   7: 427279.868 ops/s
# Warmup Iteration   8: 455604.897 ops/s
# Warmup Iteration   9: 452048.720 ops/s
# Warmup Iteration  10: 456009.577 ops/s
# Warmup Iteration  11: 452702.193 ops/s
# Warmup Iteration  12: 454461.417 ops/s
# Warmup Iteration  13: 455027.916 ops/s
# Warmup Iteration  14: 454992.788 ops/s
# Warmup Iteration  15: 453784.876 ops/s
# Warmup Iteration  16: 453354.226 ops/s
# Warmup Iteration  17: 452391.918 ops/s
# Warmup Iteration  18: 456599.690 ops/s
# Warmup Iteration  19: 456044.383 ops/s
# Warmup Iteration  20: 456188.752 ops/s
# Warmup Iteration  21: 451807.948 ops/s
# Warmup Iteration  22: 455575.421 ops/s
# Warmup Iteration  23: 457842.836 ops/s
# Warmup Iteration  24: 457212.569 ops/s
# Warmup Iteration  25: 458445.030 ops/s
# Warmup Iteration  26: 457756.698 ops/s
# Warmup Iteration  27: 457054.456 ops/s
# Warmup Iteration  28: 453695.509 ops/s
# Warmup Iteration  29: 455205.547 ops/s
# Warmup Iteration  30: 458175.779 ops/s
Iteration   1: 456746.139 ops/s
Iteration   2: 454657.682 ops/s
Iteration   3: 457397.848 ops/s
Iteration   4: 460279.363 ops/s
Iteration   5: 457714.072 ops/s
Iteration   6: 455642.490 ops/s
Iteration   7: 457913.970 ops/s
Iteration   8: 457509.237 ops/s
Iteration   9: 457152.574 ops/s
Iteration  10: 458168.887 ops/s
Iteration  11: 458233.724 ops/s
Iteration  12: 454449.371 ops/s
Iteration  13: 459612.579 ops/s
Iteration  14: 453801.298 ops/s
Iteration  15: 457260.777 ops/s
Iteration  16: 452950.520 ops/s
Iteration  17: 456521.114 ops/s
Iteration  18: 455948.777 ops/s
Iteration  19: 457771.398 ops/s
Iteration  20: 458724.034 ops/s
Iteration  21: 457980.204 ops/s
Iteration  22: 455171.662 ops/s
Iteration  23: 456465.423 ops/s
Iteration  24: 454522.394 ops/s
Iteration  25: 453791.216 ops/s
Iteration  26: 457495.481 ops/s
Iteration  27: 455051.314 ops/s
Iteration  28: 458410.450 ops/s
Iteration  29: 456840.052 ops/s
Iteration  30: 458582.106 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_countByEach":
  456758.872 ±(99.9%) 1213.017 ops/s [Average]
  (min, avg, max) = (452950.520, 456758.872, 460279.363), stdev = 1815.587
  CI (99.9%): [455545.855, 457971.889] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_countByEach  thrpt   30  456758.872 ± 1213.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 808918.446 ops/s
# Warmup Iteration   2: 1674856.682 ops/s
# Warmup Iteration   3: 1813112.281 ops/s
# Warmup Iteration   4: 1828943.123 ops/s
# Warmup Iteration   5: 1526808.972 ops/s
# Warmup Iteration   6: 1838338.155 ops/s
# Warmup Iteration   7: 1830303.865 ops/s
# Warmup Iteration   8: 1831471.676 ops/s
# Warmup Iteration   9: 1817464.545 ops/s
# Warmup Iteration  10: 1822208.306 ops/s
# Warmup Iteration  11: 1827184.110 ops/s
# Warmup Iteration  12: 1829108.298 ops/s
# Warmup Iteration  13: 1835478.781 ops/s
# Warmup Iteration  14: 1822573.126 ops/s
# Warmup Iteration  15: 1825770.561 ops/s
# Warmup Iteration  16: 1840027.067 ops/s
# Warmup Iteration  17: 1838190.723 ops/s
# Warmup Iteration  18: 1834438.389 ops/s
# Warmup Iteration  19: 1838347.371 ops/s
# Warmup Iteration  20: 1823043.313 ops/s
# Warmup Iteration  21: 1841322.814 ops/s
# Warmup Iteration  22: 1835859.022 ops/s
# Warmup Iteration  23: 1829392.666 ops/s
# Warmup Iteration  24: 1834342.343 ops/s
# Warmup Iteration  25: 1844043.719 ops/s
# Warmup Iteration  26: 1841647.846 ops/s
# Warmup Iteration  27: 1837128.140 ops/s
# Warmup Iteration  28: 1838916.335 ops/s
# Warmup Iteration  29: 1821093.658 ops/s
# Warmup Iteration  30: 1838613.030 ops/s
Iteration   1: 1827566.172 ops/s
Iteration   2: 1839338.146 ops/s
Iteration   3: 1825550.387 ops/s
Iteration   4: 1837134.982 ops/s
Iteration   5: 1836293.558 ops/s
Iteration   6: 1823183.980 ops/s
Iteration   7: 1852793.209 ops/s
Iteration   8: 1836758.826 ops/s
Iteration   9: 1822725.422 ops/s
Iteration  10: 1849923.697 ops/s
Iteration  11: 1846272.957 ops/s
Iteration  12: 1836592.155 ops/s
Iteration  13: 1834577.966 ops/s
Iteration  14: 1830138.215 ops/s
Iteration  15: 1840565.745 ops/s
Iteration  16: 1849430.679 ops/s
Iteration  17: 1849389.356 ops/s
Iteration  18: 1845920.087 ops/s
Iteration  19: 1835089.678 ops/s
Iteration  20: 1851500.669 ops/s
Iteration  21: 1826002.818 ops/s
Iteration  22: 1851408.287 ops/s
Iteration  23: 1840016.053 ops/s
Iteration  24: 1838158.472 ops/s
Iteration  25: 1838187.740 ops/s
Iteration  26: 1834301.303 ops/s
Iteration  27: 1835761.347 ops/s
Iteration  28: 1837397.648 ops/s
Iteration  29: 1817978.449 ops/s
Iteration  30: 1828299.043 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_countByWith":
  1837275.235 ±(99.9%) 6295.836 ops/s [Average]
  (min, avg, max) = (1817978.449, 1837275.235, 1852793.209), stdev = 9423.311
  CI (99.9%): [1830979.399, 1843571.070] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_countByWith  thrpt   30  1837275.235 ± 6295.836  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2473682.865 ops/s
# Warmup Iteration   2: 5447845.533 ops/s
# Warmup Iteration   3: 4853567.097 ops/s
# Warmup Iteration   4: 5200577.462 ops/s
# Warmup Iteration   5: 5445282.633 ops/s
# Warmup Iteration   6: 5510735.998 ops/s
# Warmup Iteration   7: 5515921.416 ops/s
# Warmup Iteration   8: 5506560.660 ops/s
# Warmup Iteration   9: 5541883.928 ops/s
# Warmup Iteration  10: 5493756.562 ops/s
# Warmup Iteration  11: 5504477.644 ops/s
# Warmup Iteration  12: 5527644.586 ops/s
# Warmup Iteration  13: 5474689.808 ops/s
# Warmup Iteration  14: 5497751.111 ops/s
# Warmup Iteration  15: 5458330.439 ops/s
# Warmup Iteration  16: 5543497.443 ops/s
# Warmup Iteration  17: 5517354.741 ops/s
# Warmup Iteration  18: 5501973.291 ops/s
# Warmup Iteration  19: 5474767.622 ops/s
# Warmup Iteration  20: 5497282.693 ops/s
# Warmup Iteration  21: 5486266.954 ops/s
# Warmup Iteration  22: 5502052.175 ops/s
# Warmup Iteration  23: 5487058.066 ops/s
# Warmup Iteration  24: 5503730.289 ops/s
# Warmup Iteration  25: 5479659.879 ops/s
# Warmup Iteration  26: 5479081.806 ops/s
# Warmup Iteration  27: 5482673.435 ops/s
# Warmup Iteration  28: 5495097.206 ops/s
# Warmup Iteration  29: 5450367.284 ops/s
# Warmup Iteration  30: 5479487.907 ops/s
Iteration   1: 5513877.010 ops/s
Iteration   2: 5495575.154 ops/s
Iteration   3: 5487159.417 ops/s
Iteration   4: 5542086.848 ops/s
Iteration   5: 5535653.029 ops/s
Iteration   6: 5490788.892 ops/s
Iteration   7: 5518162.576 ops/s
Iteration   8: 5512444.301 ops/s
Iteration   9: 5505507.621 ops/s
Iteration  10: 5538446.778 ops/s
Iteration  11: 5471587.460 ops/s
Iteration  12: 5451450.827 ops/s
Iteration  13: 5474798.024 ops/s
Iteration  14: 5493657.015 ops/s
Iteration  15: 5510946.887 ops/s
Iteration  16: 5429065.059 ops/s
Iteration  17: 5485858.374 ops/s
Iteration  18: 5492166.302 ops/s
Iteration  19: 5462560.344 ops/s
Iteration  20: 5503378.431 ops/s
Iteration  21: 5506703.629 ops/s
Iteration  22: 5531310.514 ops/s
Iteration  23: 5555042.569 ops/s
Iteration  24: 5522832.210 ops/s
Iteration  25: 5540000.754 ops/s
Iteration  26: 5501320.138 ops/s
Iteration  27: 5516370.514 ops/s
Iteration  28: 5463806.997 ops/s
Iteration  29: 5505905.437 ops/s
Iteration  30: 5532982.482 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_countWith":
  5503048.186 ±(99.9%) 19523.382 ops/s [Average]
  (min, avg, max) = (5429065.059, 5503048.186, 5555042.569), stdev = 29221.682
  CI (99.9%): [5483524.804, 5522571.569] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_countWith  thrpt   30  5503048.186 ± 19523.382  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1972254.153 ops/s
# Warmup Iteration   2: 4666059.462 ops/s
# Warmup Iteration   3: 4745654.314 ops/s
# Warmup Iteration   4: 3949023.647 ops/s
# Warmup Iteration   5: 4749576.420 ops/s
# Warmup Iteration   6: 4761175.768 ops/s
# Warmup Iteration   7: 4757628.227 ops/s
# Warmup Iteration   8: 4754448.797 ops/s
# Warmup Iteration   9: 4736599.107 ops/s
# Warmup Iteration  10: 4761911.363 ops/s
# Warmup Iteration  11: 4728033.846 ops/s
# Warmup Iteration  12: 4797805.940 ops/s
# Warmup Iteration  13: 4720769.799 ops/s
# Warmup Iteration  14: 4764446.168 ops/s
# Warmup Iteration  15: 4770077.836 ops/s
# Warmup Iteration  16: 4759751.939 ops/s
# Warmup Iteration  17: 4708550.973 ops/s
# Warmup Iteration  18: 4740032.626 ops/s
# Warmup Iteration  19: 4775674.896 ops/s
# Warmup Iteration  20: 4788372.289 ops/s
# Warmup Iteration  21: 4729846.339 ops/s
# Warmup Iteration  22: 4739314.397 ops/s
# Warmup Iteration  23: 4787178.738 ops/s
# Warmup Iteration  24: 4751227.153 ops/s
# Warmup Iteration  25: 4755663.688 ops/s
# Warmup Iteration  26: 4742021.462 ops/s
# Warmup Iteration  27: 4729108.832 ops/s
# Warmup Iteration  28: 4781076.267 ops/s
# Warmup Iteration  29: 4754436.990 ops/s
# Warmup Iteration  30: 4770103.026 ops/s
Iteration   1: 4772709.960 ops/s
Iteration   2: 4789615.085 ops/s
Iteration   3: 4808125.513 ops/s
Iteration   4: 4755715.745 ops/s
Iteration   5: 4740679.092 ops/s
Iteration   6: 4796460.700 ops/s
Iteration   7: 4803314.297 ops/s
Iteration   8: 4707030.903 ops/s
Iteration   9: 4717940.949 ops/s
Iteration  10: 4794834.233 ops/s
Iteration  11: 4755149.818 ops/s
Iteration  12: 4758226.594 ops/s
Iteration  13: 4762000.690 ops/s
Iteration  14: 4801820.972 ops/s
Iteration  15: 4737811.756 ops/s
Iteration  16: 4744236.975 ops/s
Iteration  17: 4777881.831 ops/s
Iteration  18: 4745628.424 ops/s
Iteration  19: 4722643.719 ops/s
Iteration  20: 4691499.814 ops/s
Iteration  21: 4776232.144 ops/s
Iteration  22: 4738986.330 ops/s
Iteration  23: 4751703.045 ops/s
Iteration  24: 4790435.462 ops/s
Iteration  25: 4744100.825 ops/s
Iteration  26: 4770721.056 ops/s
Iteration  27: 4774372.207 ops/s
Iteration  28: 4744527.967 ops/s
Iteration  29: 4726494.966 ops/s
Iteration  30: 4748879.787 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detect":
  4758326.029 ±(99.9%) 19831.282 ops/s [Average]
  (min, avg, max) = (4691499.814, 4758326.029, 4808125.513), stdev = 29682.531
  CI (99.9%): [4738494.747, 4778157.310] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_detect  thrpt   30  4758326.029 ± 19831.282  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detectIfNone_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detectIfNone_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2455846.896 ops/s
# Warmup Iteration   2: 5375059.455 ops/s
# Warmup Iteration   3: 4760259.956 ops/s
# Warmup Iteration   4: 5082309.802 ops/s
# Warmup Iteration   5: 5370734.113 ops/s
# Warmup Iteration   6: 5371121.001 ops/s
# Warmup Iteration   7: 5367815.602 ops/s
# Warmup Iteration   8: 5369689.974 ops/s
# Warmup Iteration   9: 5345203.944 ops/s
# Warmup Iteration  10: 5329242.001 ops/s
# Warmup Iteration  11: 5336924.690 ops/s
# Warmup Iteration  12: 5341514.915 ops/s
# Warmup Iteration  13: 5383675.233 ops/s
# Warmup Iteration  14: 5322123.932 ops/s
# Warmup Iteration  15: 5331413.822 ops/s
# Warmup Iteration  16: 5361127.031 ops/s
# Warmup Iteration  17: 5350228.206 ops/s
# Warmup Iteration  18: 5363546.649 ops/s
# Warmup Iteration  19: 5332526.511 ops/s
# Warmup Iteration  20: 5341594.512 ops/s
# Warmup Iteration  21: 5376334.672 ops/s
# Warmup Iteration  22: 5347190.017 ops/s
# Warmup Iteration  23: 5318026.241 ops/s
# Warmup Iteration  24: 5389203.759 ops/s
# Warmup Iteration  25: 5347935.731 ops/s
# Warmup Iteration  26: 5317330.532 ops/s
# Warmup Iteration  27: 5337287.645 ops/s
# Warmup Iteration  28: 5276452.239 ops/s
# Warmup Iteration  29: 5373689.412 ops/s
# Warmup Iteration  30: 5335312.911 ops/s
Iteration   1: 5286938.998 ops/s
Iteration   2: 5333277.467 ops/s
Iteration   3: 5362454.844 ops/s
Iteration   4: 5354427.720 ops/s
Iteration   5: 5372365.020 ops/s
Iteration   6: 5331643.191 ops/s
Iteration   7: 5402643.738 ops/s
Iteration   8: 5334219.372 ops/s
Iteration   9: 5398905.429 ops/s
Iteration  10: 5380948.527 ops/s
Iteration  11: 5409181.285 ops/s
Iteration  12: 5399632.543 ops/s
Iteration  13: 5357045.000 ops/s
Iteration  14: 5348757.810 ops/s
Iteration  15: 5298739.085 ops/s
Iteration  16: 5371216.393 ops/s
Iteration  17: 5384146.042 ops/s
Iteration  18: 5379662.987 ops/s
Iteration  19: 5374998.664 ops/s
Iteration  20: 5327164.630 ops/s
Iteration  21: 5367127.220 ops/s
Iteration  22: 5354109.245 ops/s
Iteration  23: 5375603.566 ops/s
Iteration  24: 5300138.852 ops/s
Iteration  25: 5364641.813 ops/s
Iteration  26: 5374606.378 ops/s
Iteration  27: 5392643.696 ops/s
Iteration  28: 5405989.864 ops/s
Iteration  29: 5398807.862 ops/s
Iteration  30: 5411608.898 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detectIfNone_value":
  5365121.538 ±(99.9%) 22355.326 ops/s [Average]
  (min, avg, max) = (5286938.998, 5365121.538, 5411608.898), stdev = 33460.402
  CI (99.9%): [5342766.212, 5387476.864] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_detectIfNone_value  thrpt   30  5365121.538 ± 22355.326  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2278758.902 ops/s
# Warmup Iteration   2: 4965368.939 ops/s
# Warmup Iteration   3: 4423787.047 ops/s
# Warmup Iteration   4: 4672767.744 ops/s
# Warmup Iteration   5: 4962921.105 ops/s
# Warmup Iteration   6: 4990071.486 ops/s
# Warmup Iteration   7: 4964613.721 ops/s
# Warmup Iteration   8: 4959643.265 ops/s
# Warmup Iteration   9: 4958150.089 ops/s
# Warmup Iteration  10: 4965937.833 ops/s
# Warmup Iteration  11: 4961066.823 ops/s
# Warmup Iteration  12: 4997855.432 ops/s
# Warmup Iteration  13: 4943372.686 ops/s
# Warmup Iteration  14: 4965288.047 ops/s
# Warmup Iteration  15: 4987171.312 ops/s
# Warmup Iteration  16: 4956788.133 ops/s
# Warmup Iteration  17: 4960548.940 ops/s
# Warmup Iteration  18: 4997680.497 ops/s
# Warmup Iteration  19: 4961649.226 ops/s
# Warmup Iteration  20: 4973279.685 ops/s
# Warmup Iteration  21: 4979899.540 ops/s
# Warmup Iteration  22: 4974464.818 ops/s
# Warmup Iteration  23: 4953863.193 ops/s
# Warmup Iteration  24: 4941779.490 ops/s
# Warmup Iteration  25: 4944550.582 ops/s
# Warmup Iteration  26: 4942916.225 ops/s
# Warmup Iteration  27: 4972404.283 ops/s
# Warmup Iteration  28: 4987134.660 ops/s
# Warmup Iteration  29: 4975030.122 ops/s
# Warmup Iteration  30: 4976873.966 ops/s
Iteration   1: 4959995.048 ops/s
Iteration   2: 4960710.624 ops/s
Iteration   3: 4969660.137 ops/s
Iteration   4: 4899557.172 ops/s
Iteration   5: 4866399.286 ops/s
Iteration   6: 4991372.344 ops/s
Iteration   7: 4963098.733 ops/s
Iteration   8: 4956179.089 ops/s
Iteration   9: 4990879.656 ops/s
Iteration  10: 4984365.925 ops/s
Iteration  11: 4947151.903 ops/s
Iteration  12: 4962661.089 ops/s
Iteration  13: 4992468.024 ops/s
Iteration  14: 5000419.606 ops/s
Iteration  15: 4951767.451 ops/s
Iteration  16: 4985823.075 ops/s
Iteration  17: 5010149.103 ops/s
Iteration  18: 4951688.319 ops/s
Iteration  19: 4956552.264 ops/s
Iteration  20: 4966543.618 ops/s
Iteration  21: 4953329.268 ops/s
Iteration  22: 4916414.645 ops/s
Iteration  23: 4961169.835 ops/s
Iteration  24: 4977439.132 ops/s
Iteration  25: 4997591.546 ops/s
Iteration  26: 4957303.754 ops/s
Iteration  27: 4938674.975 ops/s
Iteration  28: 4961039.247 ops/s
Iteration  29: 4989971.269 ops/s
Iteration  30: 4939460.582 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detectOptional":
  4961994.557 ±(99.9%) 20243.601 ops/s [Average]
  (min, avg, max) = (4866399.286, 4961994.557, 5010149.103), stdev = 30299.671
  CI (99.9%): [4941750.957, 4982238.158] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_detectOptional  thrpt   30  4961994.557 ± 20243.601  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detectOptional_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detectOptional_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2498442.319 ops/s
# Warmup Iteration   2: 5461705.837 ops/s
# Warmup Iteration   3: 4555846.262 ops/s
# Warmup Iteration   4: 5486776.240 ops/s
# Warmup Iteration   5: 5488965.777 ops/s
# Warmup Iteration   6: 5427629.073 ops/s
# Warmup Iteration   7: 5453298.656 ops/s
# Warmup Iteration   8: 5436869.406 ops/s
# Warmup Iteration   9: 5465224.476 ops/s
# Warmup Iteration  10: 5474968.386 ops/s
# Warmup Iteration  11: 5438149.412 ops/s
# Warmup Iteration  12: 5475892.090 ops/s
# Warmup Iteration  13: 5456170.202 ops/s
# Warmup Iteration  14: 5493896.198 ops/s
# Warmup Iteration  15: 5507842.152 ops/s
# Warmup Iteration  16: 5478178.752 ops/s
# Warmup Iteration  17: 5504453.130 ops/s
# Warmup Iteration  18: 5480613.881 ops/s
# Warmup Iteration  19: 5473211.550 ops/s
# Warmup Iteration  20: 5462616.847 ops/s
# Warmup Iteration  21: 5482498.501 ops/s
# Warmup Iteration  22: 5444720.161 ops/s
# Warmup Iteration  23: 5501955.676 ops/s
# Warmup Iteration  24: 5464680.732 ops/s
# Warmup Iteration  25: 5454104.276 ops/s
# Warmup Iteration  26: 5449811.167 ops/s
# Warmup Iteration  27: 5431472.903 ops/s
# Warmup Iteration  28: 5451668.203 ops/s
# Warmup Iteration  29: 5442942.388 ops/s
# Warmup Iteration  30: 5507213.295 ops/s
Iteration   1: 5482106.500 ops/s
Iteration   2: 5460493.278 ops/s
Iteration   3: 5438428.116 ops/s
Iteration   4: 5486170.141 ops/s
Iteration   5: 5462540.855 ops/s
Iteration   6: 5474615.322 ops/s
Iteration   7: 5454402.864 ops/s
Iteration   8: 5465290.546 ops/s
Iteration   9: 5356359.117 ops/s
Iteration  10: 5468415.356 ops/s
Iteration  11: 5486762.197 ops/s
Iteration  12: 5484889.520 ops/s
Iteration  13: 5411940.446 ops/s
Iteration  14: 5508186.478 ops/s
Iteration  15: 5504476.055 ops/s
Iteration  16: 5407983.407 ops/s
Iteration  17: 5454660.283 ops/s
Iteration  18: 5454940.847 ops/s
Iteration  19: 5450124.402 ops/s
Iteration  20: 5425418.464 ops/s
Iteration  21: 5481601.430 ops/s
Iteration  22: 5473132.413 ops/s
Iteration  23: 5454991.708 ops/s
Iteration  24: 5450651.388 ops/s
Iteration  25: 5471942.055 ops/s
Iteration  26: 5436203.612 ops/s
Iteration  27: 5432966.441 ops/s
Iteration  28: 5371906.344 ops/s
Iteration  29: 5480439.532 ops/s
Iteration  30: 5479674.422 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detectOptional_value":
  5455723.785 ±(99.9%) 23189.802 ops/s [Average]
  (min, avg, max) = (5356359.117, 5455723.785, 5508186.478), stdev = 34709.406
  CI (99.9%): [5432533.983, 5478913.586] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_detectOptional_value  thrpt   30  5455723.785 ± 23189.802  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2342342.826 ops/s
# Warmup Iteration   2: 5133862.816 ops/s
# Warmup Iteration   3: 5153315.372 ops/s
# Warmup Iteration   4: 4246748.270 ops/s
# Warmup Iteration   5: 5142583.948 ops/s
# Warmup Iteration   6: 5163977.793 ops/s
# Warmup Iteration   7: 5137200.611 ops/s
# Warmup Iteration   8: 5160199.241 ops/s
# Warmup Iteration   9: 5154983.264 ops/s
# Warmup Iteration  10: 5148410.550 ops/s
# Warmup Iteration  11: 5154537.409 ops/s
# Warmup Iteration  12: 5164865.629 ops/s
# Warmup Iteration  13: 5166057.949 ops/s
# Warmup Iteration  14: 5158556.863 ops/s
# Warmup Iteration  15: 5107549.892 ops/s
# Warmup Iteration  16: 5166082.059 ops/s
# Warmup Iteration  17: 5143317.695 ops/s
# Warmup Iteration  18: 5152730.322 ops/s
# Warmup Iteration  19: 5181921.079 ops/s
# Warmup Iteration  20: 5173022.117 ops/s
# Warmup Iteration  21: 5181784.128 ops/s
# Warmup Iteration  22: 5152272.362 ops/s
# Warmup Iteration  23: 5150932.762 ops/s
# Warmup Iteration  24: 5140729.747 ops/s
# Warmup Iteration  25: 5131586.451 ops/s
# Warmup Iteration  26: 5130383.195 ops/s
# Warmup Iteration  27: 5159227.626 ops/s
# Warmup Iteration  28: 5169938.389 ops/s
# Warmup Iteration  29: 5184658.929 ops/s
# Warmup Iteration  30: 5150032.650 ops/s
Iteration   1: 5114590.083 ops/s
Iteration   2: 5147007.426 ops/s
Iteration   3: 5151368.924 ops/s
Iteration   4: 5168101.136 ops/s
Iteration   5: 5158022.785 ops/s
Iteration   6: 5115157.437 ops/s
Iteration   7: 5195174.555 ops/s
Iteration   8: 5165950.677 ops/s
Iteration   9: 5180231.486 ops/s
Iteration  10: 5153656.777 ops/s
Iteration  11: 5125973.850 ops/s
Iteration  12: 5163953.207 ops/s
Iteration  13: 5181333.461 ops/s
Iteration  14: 5159134.994 ops/s
Iteration  15: 5114043.398 ops/s
Iteration  16: 5121520.537 ops/s
Iteration  17: 5202594.716 ops/s
Iteration  18: 5190741.575 ops/s
Iteration  19: 5190834.336 ops/s
Iteration  20: 5157053.007 ops/s
Iteration  21: 5125756.506 ops/s
Iteration  22: 5138485.339 ops/s
Iteration  23: 5156254.025 ops/s
Iteration  24: 5194135.073 ops/s
Iteration  25: 5144990.057 ops/s
Iteration  26: 5136604.440 ops/s
Iteration  27: 5189568.832 ops/s
Iteration  28: 5185922.914 ops/s
Iteration  29: 5161732.815 ops/s
Iteration  30: 5132620.798 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detectWith":
  5157417.172 ±(99.9%) 17864.951 ops/s [Average]
  (min, avg, max) = (5114043.398, 5157417.172, 5202594.716), stdev = 26739.420
  CI (99.9%): [5139552.221, 5175282.124] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_detectWith  thrpt   30  5157417.172 ± 17864.951  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2232374.297 ops/s
# Warmup Iteration   2: 4996389.018 ops/s
# Warmup Iteration   3: 4938110.650 ops/s
# Warmup Iteration   4: 4173892.625 ops/s
# Warmup Iteration   5: 5059889.852 ops/s
# Warmup Iteration   6: 5043695.327 ops/s
# Warmup Iteration   7: 5041848.061 ops/s
# Warmup Iteration   8: 5055322.856 ops/s
# Warmup Iteration   9: 5044994.147 ops/s
# Warmup Iteration  10: 5043873.322 ops/s
# Warmup Iteration  11: 5041308.834 ops/s
# Warmup Iteration  12: 5027236.166 ops/s
# Warmup Iteration  13: 5069063.103 ops/s
# Warmup Iteration  14: 5045771.893 ops/s
# Warmup Iteration  15: 5067340.713 ops/s
# Warmup Iteration  16: 5079022.554 ops/s
# Warmup Iteration  17: 5055903.831 ops/s
# Warmup Iteration  18: 5043529.220 ops/s
# Warmup Iteration  19: 5052426.471 ops/s
# Warmup Iteration  20: 5081212.914 ops/s
# Warmup Iteration  21: 5042334.398 ops/s
# Warmup Iteration  22: 5065426.965 ops/s
# Warmup Iteration  23: 5013739.365 ops/s
# Warmup Iteration  24: 5018081.475 ops/s
# Warmup Iteration  25: 4997352.109 ops/s
# Warmup Iteration  26: 5015318.117 ops/s
# Warmup Iteration  27: 5058277.809 ops/s
# Warmup Iteration  28: 5040079.984 ops/s
# Warmup Iteration  29: 5075122.217 ops/s
# Warmup Iteration  30: 5086342.304 ops/s
Iteration   1: 5036510.476 ops/s
Iteration   2: 5000555.063 ops/s
Iteration   3: 5073053.440 ops/s
Iteration   4: 5065466.778 ops/s
Iteration   5: 5019051.414 ops/s
Iteration   6: 5084903.477 ops/s
Iteration   7: 5052949.234 ops/s
Iteration   8: 5032268.476 ops/s
Iteration   9: 5031493.616 ops/s
Iteration  10: 5054331.993 ops/s
Iteration  11: 5043783.748 ops/s
Iteration  12: 5053461.313 ops/s
Iteration  13: 5054151.517 ops/s
Iteration  14: 5061516.162 ops/s
Iteration  15: 5023339.075 ops/s
Iteration  16: 5036719.458 ops/s
Iteration  17: 5032233.896 ops/s
Iteration  18: 5007527.971 ops/s
Iteration  19: 5014226.448 ops/s
Iteration  20: 5032339.818 ops/s
Iteration  21: 5011326.795 ops/s
Iteration  22: 5080975.984 ops/s
Iteration  23: 5070629.045 ops/s
Iteration  24: 5032447.443 ops/s
Iteration  25: 5032676.671 ops/s
Iteration  26: 5059023.986 ops/s
Iteration  27: 5029486.150 ops/s
Iteration  28: 5079570.325 ops/s
Iteration  29: 5071794.833 ops/s
Iteration  30: 5073145.607 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detectWithIfNone":
  5045032.007 ±(99.9%) 15787.301 ops/s [Average]
  (min, avg, max) = (5000555.063, 5045032.007, 5084903.477), stdev = 23629.691
  CI (99.9%): [5029244.706, 5060819.308] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  5045032.007 ± 15787.301  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2495609.014 ops/s
# Warmup Iteration   2: 5469492.825 ops/s
# Warmup Iteration   3: 4937595.578 ops/s
# Warmup Iteration   4: 5036718.866 ops/s
# Warmup Iteration   5: 5419122.380 ops/s
# Warmup Iteration   6: 5461577.304 ops/s
# Warmup Iteration   7: 5470184.571 ops/s
# Warmup Iteration   8: 5464104.703 ops/s
# Warmup Iteration   9: 5476489.827 ops/s
# Warmup Iteration  10: 5462757.395 ops/s
# Warmup Iteration  11: 5477541.390 ops/s
# Warmup Iteration  12: 5467705.094 ops/s
# Warmup Iteration  13: 5477990.782 ops/s
# Warmup Iteration  14: 5479894.172 ops/s
# Warmup Iteration  15: 5463435.897 ops/s
# Warmup Iteration  16: 5446371.565 ops/s
# Warmup Iteration  17: 5334508.917 ops/s
# Warmup Iteration  18: 5476142.267 ops/s
# Warmup Iteration  19: 5473201.146 ops/s
# Warmup Iteration  20: 5506060.867 ops/s
# Warmup Iteration  21: 5490029.044 ops/s
# Warmup Iteration  22: 5473296.983 ops/s
# Warmup Iteration  23: 5433053.633 ops/s
# Warmup Iteration  24: 5482160.741 ops/s
# Warmup Iteration  25: 5440617.531 ops/s
# Warmup Iteration  26: 5474435.893 ops/s
# Warmup Iteration  27: 5436947.574 ops/s
# Warmup Iteration  28: 5451367.101 ops/s
# Warmup Iteration  29: 5469654.610 ops/s
# Warmup Iteration  30: 5465460.325 ops/s
Iteration   1: 5488377.039 ops/s
Iteration   2: 5480628.074 ops/s
Iteration   3: 5518152.901 ops/s
Iteration   4: 5436064.316 ops/s
Iteration   5: 5500983.666 ops/s
Iteration   6: 5479706.466 ops/s
Iteration   7: 5488884.408 ops/s
Iteration   8: 5448954.261 ops/s
Iteration   9: 5468522.675 ops/s
Iteration  10: 5469701.381 ops/s
Iteration  11: 5505032.311 ops/s
Iteration  12: 5519795.437 ops/s
Iteration  13: 5483687.901 ops/s
Iteration  14: 5512676.856 ops/s
Iteration  15: 5507751.921 ops/s
Iteration  16: 5486046.203 ops/s
Iteration  17: 5458148.125 ops/s
Iteration  18: 5453279.714 ops/s
Iteration  19: 5421409.254 ops/s
Iteration  20: 5479935.418 ops/s
Iteration  21: 5446218.380 ops/s
Iteration  22: 5475951.539 ops/s
Iteration  23: 5471587.327 ops/s
Iteration  24: 5444223.710 ops/s
Iteration  25: 5485024.118 ops/s
Iteration  26: 5420383.579 ops/s
Iteration  27: 5458724.677 ops/s
Iteration  28: 5418788.095 ops/s
Iteration  29: 5444859.413 ops/s
Iteration  30: 5495303.713 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detectWithOptional":
  5472293.429 ±(99.9%) 19169.939 ops/s [Average]
  (min, avg, max) = (5418788.095, 5472293.429, 5519795.437), stdev = 28692.664
  CI (99.9%): [5453123.490, 5491463.368] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_detectWithOptional  thrpt   30  5472293.429 ± 19169.939  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detect_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detect_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2491972.575 ops/s
# Warmup Iteration   2: 5342115.718 ops/s
# Warmup Iteration   3: 4744834.262 ops/s
# Warmup Iteration   4: 4886619.298 ops/s
# Warmup Iteration   5: 5233054.435 ops/s
# Warmup Iteration   6: 5246864.601 ops/s
# Warmup Iteration   7: 5258471.010 ops/s
# Warmup Iteration   8: 5245965.369 ops/s
# Warmup Iteration   9: 5236453.970 ops/s
# Warmup Iteration  10: 5238926.481 ops/s
# Warmup Iteration  11: 5232114.928 ops/s
# Warmup Iteration  12: 5243243.633 ops/s
# Warmup Iteration  13: 5213310.724 ops/s
# Warmup Iteration  14: 5272823.917 ops/s
# Warmup Iteration  15: 5241236.934 ops/s
# Warmup Iteration  16: 5268140.786 ops/s
# Warmup Iteration  17: 5253080.288 ops/s
# Warmup Iteration  18: 5223363.834 ops/s
# Warmup Iteration  19: 5275424.642 ops/s
# Warmup Iteration  20: 5225592.070 ops/s
# Warmup Iteration  21: 5212971.296 ops/s
# Warmup Iteration  22: 5233640.311 ops/s
# Warmup Iteration  23: 5252609.301 ops/s
# Warmup Iteration  24: 5273069.169 ops/s
# Warmup Iteration  25: 5252093.887 ops/s
# Warmup Iteration  26: 5254585.531 ops/s
# Warmup Iteration  27: 5249303.513 ops/s
# Warmup Iteration  28: 5254937.552 ops/s
# Warmup Iteration  29: 5228682.370 ops/s
# Warmup Iteration  30: 5255041.284 ops/s
Iteration   1: 5243838.441 ops/s
Iteration   2: 5257075.145 ops/s
Iteration   3: 5246560.887 ops/s
Iteration   4: 5197067.851 ops/s
Iteration   5: 5179959.985 ops/s
Iteration   6: 5177427.776 ops/s
Iteration   7: 5241785.161 ops/s
Iteration   8: 5290364.363 ops/s
Iteration   9: 5257056.159 ops/s
Iteration  10: 5244623.638 ops/s
Iteration  11: 5197449.259 ops/s
Iteration  12: 5261714.611 ops/s
Iteration  13: 5251956.335 ops/s
Iteration  14: 5244311.075 ops/s
Iteration  15: 5269772.808 ops/s
Iteration  16: 5232995.489 ops/s
Iteration  17: 5237951.892 ops/s
Iteration  18: 5255487.322 ops/s
Iteration  19: 5256258.546 ops/s
Iteration  20: 5242877.920 ops/s
Iteration  21: 5246201.609 ops/s
Iteration  22: 5216014.282 ops/s
Iteration  23: 5241034.637 ops/s
Iteration  24: 5226456.265 ops/s
Iteration  25: 5227299.212 ops/s
Iteration  26: 5243977.906 ops/s
Iteration  27: 5197691.188 ops/s
Iteration  28: 5260884.678 ops/s
Iteration  29: 5242125.157 ops/s
Iteration  30: 5207991.348 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_detect_value":
  5236540.365 ±(99.9%) 17690.552 ops/s [Average]
  (min, avg, max) = (5177427.776, 5236540.365, 5290364.363), stdev = 26478.387
  CI (99.9%): [5218849.813, 5254230.916] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_detect_value  thrpt   30  5236540.365 ± 17690.552  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_entrySetEqualsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_entrySetEqualsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 555530.229 ops/s
# Warmup Iteration   2: 1230923.755 ops/s
# Warmup Iteration   3: 1275398.004 ops/s
# Warmup Iteration   4: 1276417.926 ops/s
# Warmup Iteration   5: 1058206.272 ops/s
# Warmup Iteration   6: 1273496.539 ops/s
# Warmup Iteration   7: 1281194.469 ops/s
# Warmup Iteration   8: 1267981.842 ops/s
# Warmup Iteration   9: 1267989.059 ops/s
# Warmup Iteration  10: 1278158.326 ops/s
# Warmup Iteration  11: 1270387.568 ops/s
# Warmup Iteration  12: 1271968.879 ops/s
# Warmup Iteration  13: 1277047.748 ops/s
# Warmup Iteration  14: 1279318.035 ops/s
# Warmup Iteration  15: 1279601.723 ops/s
# Warmup Iteration  16: 1271175.277 ops/s
# Warmup Iteration  17: 1274929.392 ops/s
# Warmup Iteration  18: 1277313.701 ops/s
# Warmup Iteration  19: 1274184.876 ops/s
# Warmup Iteration  20: 1268959.344 ops/s
# Warmup Iteration  21: 1270114.142 ops/s
# Warmup Iteration  22: 1282419.511 ops/s
# Warmup Iteration  23: 1282196.866 ops/s
# Warmup Iteration  24: 1276869.992 ops/s
# Warmup Iteration  25: 1268980.614 ops/s
# Warmup Iteration  26: 1268095.829 ops/s
# Warmup Iteration  27: 1274071.098 ops/s
# Warmup Iteration  28: 1277724.858 ops/s
# Warmup Iteration  29: 1281116.914 ops/s
# Warmup Iteration  30: 1283244.137 ops/s
Iteration   1: 1278329.429 ops/s
Iteration   2: 1275867.903 ops/s
Iteration   3: 1270331.545 ops/s
Iteration   4: 1276683.362 ops/s
Iteration   5: 1279136.284 ops/s
Iteration   6: 1279557.961 ops/s
Iteration   7: 1279106.389 ops/s
Iteration   8: 1274732.833 ops/s
Iteration   9: 1283708.216 ops/s
Iteration  10: 1267448.214 ops/s
Iteration  11: 1280079.285 ops/s
Iteration  12: 1278005.736 ops/s
Iteration  13: 1276393.345 ops/s
Iteration  14: 1275378.757 ops/s
Iteration  15: 1278737.958 ops/s
Iteration  16: 1275983.010 ops/s
Iteration  17: 1282711.362 ops/s
Iteration  18: 1276033.302 ops/s
Iteration  19: 1274384.083 ops/s
Iteration  20: 1278118.344 ops/s
Iteration  21: 1287267.640 ops/s
Iteration  22: 1268068.632 ops/s
Iteration  23: 1278059.308 ops/s
Iteration  24: 1266583.983 ops/s
Iteration  25: 1285444.671 ops/s
Iteration  26: 1269022.076 ops/s
Iteration  27: 1272813.102 ops/s
Iteration  28: 1268113.260 ops/s
Iteration  29: 1277827.149 ops/s
Iteration  30: 1267978.092 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_entrySetEqualsAndHashCode":
  1276063.508 ±(99.9%) 3608.092 ops/s [Average]
  (min, avg, max) = (1266583.983, 1276063.508, 1287267.640), stdev = 5400.423
  CI (99.9%): [1272455.415, 1279671.600] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_entrySetEqualsAndHashCode  thrpt   30  1276063.508 ± 3608.092  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 29532.536 ops/s
# Warmup Iteration   2: 48763.726 ops/s
# Warmup Iteration   3: 62243.042 ops/s
# Warmup Iteration   4: 61799.077 ops/s
# Warmup Iteration   5: 62041.463 ops/s
# Warmup Iteration   6: 61937.980 ops/s
# Warmup Iteration   7: 52413.619 ops/s
# Warmup Iteration   8: 62227.298 ops/s
# Warmup Iteration   9: 61834.589 ops/s
# Warmup Iteration  10: 62284.938 ops/s
# Warmup Iteration  11: 62284.222 ops/s
# Warmup Iteration  12: 62139.775 ops/s
# Warmup Iteration  13: 62477.256 ops/s
# Warmup Iteration  14: 62162.725 ops/s
# Warmup Iteration  15: 61795.421 ops/s
# Warmup Iteration  16: 62167.644 ops/s
# Warmup Iteration  17: 62536.637 ops/s
# Warmup Iteration  18: 62319.287 ops/s
# Warmup Iteration  19: 62167.292 ops/s
# Warmup Iteration  20: 62495.245 ops/s
# Warmup Iteration  21: 62276.653 ops/s
# Warmup Iteration  22: 62184.029 ops/s
# Warmup Iteration  23: 62226.851 ops/s
# Warmup Iteration  24: 62497.544 ops/s
# Warmup Iteration  25: 62222.504 ops/s
# Warmup Iteration  26: 62313.896 ops/s
# Warmup Iteration  27: 62023.474 ops/s
# Warmup Iteration  28: 62221.829 ops/s
# Warmup Iteration  29: 62399.060 ops/s
# Warmup Iteration  30: 62228.827 ops/s
Iteration   1: 61902.548 ops/s
Iteration   2: 62175.788 ops/s
Iteration   3: 62125.886 ops/s
Iteration   4: 62763.971 ops/s
Iteration   5: 61881.460 ops/s
Iteration   6: 62422.660 ops/s
Iteration   7: 62487.353 ops/s
Iteration   8: 61913.098 ops/s
Iteration   9: 61882.906 ops/s
Iteration  10: 62375.822 ops/s
Iteration  11: 62005.975 ops/s
Iteration  12: 62220.940 ops/s
Iteration  13: 62269.665 ops/s
Iteration  14: 62624.528 ops/s
Iteration  15: 62703.147 ops/s
Iteration  16: 62832.343 ops/s
Iteration  17: 62363.364 ops/s
Iteration  18: 62610.472 ops/s
Iteration  19: 62474.967 ops/s
Iteration  20: 62938.593 ops/s
Iteration  21: 62250.506 ops/s
Iteration  22: 63025.200 ops/s
Iteration  23: 63031.905 ops/s
Iteration  24: 62860.432 ops/s
Iteration  25: 62677.621 ops/s
Iteration  26: 62553.290 ops/s
Iteration  27: 62676.376 ops/s
Iteration  28: 62575.783 ops/s
Iteration  29: 62722.374 ops/s
Iteration  30: 62463.840 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_equalsAndHashCode":
  62460.427 ±(99.9%) 228.534 ops/s [Average]
  (min, avg, max) = (61881.460, 62460.427, 63031.905), stdev = 342.059
  CI (99.9%): [62231.893, 62688.961] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt      Score     Error  Units
HashBiMapInverseTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  62460.427 ± 228.534  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 430553.755 ops/s
# Warmup Iteration   2: 805793.720 ops/s
# Warmup Iteration   3: 911452.942 ops/s
# Warmup Iteration   4: 920417.008 ops/s
# Warmup Iteration   5: 924797.478 ops/s
# Warmup Iteration   6: 776786.425 ops/s
# Warmup Iteration   7: 928329.515 ops/s
# Warmup Iteration   8: 928375.033 ops/s
# Warmup Iteration   9: 930226.005 ops/s
# Warmup Iteration  10: 926936.047 ops/s
# Warmup Iteration  11: 932260.771 ops/s
# Warmup Iteration  12: 928769.443 ops/s
# Warmup Iteration  13: 931899.705 ops/s
# Warmup Iteration  14: 922119.137 ops/s
# Warmup Iteration  15: 929478.518 ops/s
# Warmup Iteration  16: 930572.514 ops/s
# Warmup Iteration  17: 930415.554 ops/s
# Warmup Iteration  18: 927069.731 ops/s
# Warmup Iteration  19: 930125.299 ops/s
# Warmup Iteration  20: 928405.688 ops/s
# Warmup Iteration  21: 928316.389 ops/s
# Warmup Iteration  22: 926616.386 ops/s
# Warmup Iteration  23: 929092.187 ops/s
# Warmup Iteration  24: 929559.781 ops/s
# Warmup Iteration  25: 929680.992 ops/s
# Warmup Iteration  26: 928394.344 ops/s
# Warmup Iteration  27: 930197.230 ops/s
# Warmup Iteration  28: 927952.229 ops/s
# Warmup Iteration  29: 927282.242 ops/s
# Warmup Iteration  30: 930753.918 ops/s
Iteration   1: 932556.340 ops/s
Iteration   2: 931847.541 ops/s
Iteration   3: 930027.264 ops/s
Iteration   4: 926136.039 ops/s
Iteration   5: 932452.912 ops/s
Iteration   6: 928517.533 ops/s
Iteration   7: 926881.637 ops/s
Iteration   8: 931891.816 ops/s
Iteration   9: 928783.477 ops/s
Iteration  10: 931260.545 ops/s
Iteration  11: 930269.505 ops/s
Iteration  12: 927984.021 ops/s
Iteration  13: 934803.801 ops/s
Iteration  14: 925805.220 ops/s
Iteration  15: 925800.434 ops/s
Iteration  16: 929393.085 ops/s
Iteration  17: 928231.076 ops/s
Iteration  18: 931213.885 ops/s
Iteration  19: 928928.501 ops/s
Iteration  20: 926496.120 ops/s
Iteration  21: 930128.748 ops/s
Iteration  22: 928882.536 ops/s
Iteration  23: 931785.916 ops/s
Iteration  24: 928941.225 ops/s
Iteration  25: 933388.581 ops/s
Iteration  26: 929937.132 ops/s
Iteration  27: 929818.592 ops/s
Iteration  28: 930005.891 ops/s
Iteration  29: 929680.626 ops/s
Iteration  30: 925851.027 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_flatCollect":
  929590.034 ±(99.9%) 1567.732 ops/s [Average]
  (min, avg, max) = (925800.434, 929590.034, 934803.801), stdev = 2346.508
  CI (99.9%): [928022.302, 931157.766] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_flatCollect  thrpt   30  929590.034 ± 1567.732  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 204010.675 ops/s
# Warmup Iteration   2: 365171.293 ops/s
# Warmup Iteration   3: 419611.284 ops/s
# Warmup Iteration   4: 420974.977 ops/s
# Warmup Iteration   5: 420061.758 ops/s
# Warmup Iteration   6: 347705.757 ops/s
# Warmup Iteration   7: 422085.332 ops/s
# Warmup Iteration   8: 421246.675 ops/s
# Warmup Iteration   9: 422564.150 ops/s
# Warmup Iteration  10: 421772.488 ops/s
# Warmup Iteration  11: 421311.806 ops/s
# Warmup Iteration  12: 420448.356 ops/s
# Warmup Iteration  13: 420963.398 ops/s
# Warmup Iteration  14: 420980.960 ops/s
# Warmup Iteration  15: 421443.844 ops/s
# Warmup Iteration  16: 420657.484 ops/s
# Warmup Iteration  17: 421948.956 ops/s
# Warmup Iteration  18: 421618.058 ops/s
# Warmup Iteration  19: 421013.929 ops/s
# Warmup Iteration  20: 421552.400 ops/s
# Warmup Iteration  21: 421261.342 ops/s
# Warmup Iteration  22: 421589.147 ops/s
# Warmup Iteration  23: 421598.557 ops/s
# Warmup Iteration  24: 421800.386 ops/s
# Warmup Iteration  25: 422691.357 ops/s
# Warmup Iteration  26: 422267.534 ops/s
# Warmup Iteration  27: 421256.574 ops/s
# Warmup Iteration  28: 422158.268 ops/s
# Warmup Iteration  29: 421493.663 ops/s
# Warmup Iteration  30: 422043.985 ops/s
Iteration   1: 421288.319 ops/s
Iteration   2: 421847.095 ops/s
Iteration   3: 420651.047 ops/s
Iteration   4: 422380.433 ops/s
Iteration   5: 421297.989 ops/s
Iteration   6: 421866.412 ops/s
Iteration   7: 421614.473 ops/s
Iteration   8: 422194.764 ops/s
Iteration   9: 421686.568 ops/s
Iteration  10: 421068.128 ops/s
Iteration  11: 422191.153 ops/s
Iteration  12: 420528.463 ops/s
Iteration  13: 421043.923 ops/s
Iteration  14: 418492.063 ops/s
Iteration  15: 422922.209 ops/s
Iteration  16: 422119.336 ops/s
Iteration  17: 422387.857 ops/s
Iteration  18: 420303.225 ops/s
Iteration  19: 420655.606 ops/s
Iteration  20: 420908.223 ops/s
Iteration  21: 419576.220 ops/s
Iteration  22: 421948.280 ops/s
Iteration  23: 421286.000 ops/s
Iteration  24: 422643.592 ops/s
Iteration  25: 422494.388 ops/s
Iteration  26: 423085.394 ops/s
Iteration  27: 420801.947 ops/s
Iteration  28: 420444.012 ops/s
Iteration  29: 422191.156 ops/s
Iteration  30: 421084.676 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_flatCollectWith":
  421433.432 ±(99.9%) 677.243 ops/s [Average]
  (min, avg, max) = (418492.063, 421433.432, 423085.394), stdev = 1013.666
  CI (99.9%): [420756.188, 422110.675] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
HashBiMapInverseTest._Benchmark.benchmark_flatCollectWith  thrpt   30  421433.432 ± 677.243  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_flatten_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_flatten_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 339275.187 ops/s
# Warmup Iteration   2: 395650.787 ops/s
# Warmup Iteration   3: 531867.058 ops/s
# Warmup Iteration   4: 531092.039 ops/s
# Warmup Iteration   5: 527395.293 ops/s
# Warmup Iteration   6: 529334.306 ops/s
# Warmup Iteration   7: 532516.299 ops/s
# Warmup Iteration   8: 529608.677 ops/s
# Warmup Iteration   9: 530765.031 ops/s
# Warmup Iteration  10: 438750.062 ops/s
# Warmup Iteration  11: 531123.902 ops/s
# Warmup Iteration  12: 526725.396 ops/s
# Warmup Iteration  13: 530130.269 ops/s
# Warmup Iteration  14: 527222.050 ops/s
# Warmup Iteration  15: 526116.036 ops/s
# Warmup Iteration  16: 530568.469 ops/s
# Warmup Iteration  17: 534450.099 ops/s
# Warmup Iteration  18: 529904.674 ops/s
# Warmup Iteration  19: 533564.849 ops/s
# Warmup Iteration  20: 528336.020 ops/s
# Warmup Iteration  21: 530104.334 ops/s
# Warmup Iteration  22: 529981.338 ops/s
# Warmup Iteration  23: 530403.398 ops/s
# Warmup Iteration  24: 533851.413 ops/s
# Warmup Iteration  25: 530581.190 ops/s
# Warmup Iteration  26: 533435.857 ops/s
# Warmup Iteration  27: 530604.763 ops/s
# Warmup Iteration  28: 531992.991 ops/s
# Warmup Iteration  29: 528121.279 ops/s
# Warmup Iteration  30: 530681.021 ops/s
Iteration   1: 528699.863 ops/s
Iteration   2: 530299.588 ops/s
Iteration   3: 526534.707 ops/s
Iteration   4: 529115.693 ops/s
Iteration   5: 533690.802 ops/s
Iteration   6: 531811.684 ops/s
Iteration   7: 532422.937 ops/s
Iteration   8: 529429.336 ops/s
Iteration   9: 530087.603 ops/s
Iteration  10: 527168.592 ops/s
Iteration  11: 529167.269 ops/s
Iteration  12: 528334.816 ops/s
Iteration  13: 529138.667 ops/s
Iteration  14: 527886.618 ops/s
Iteration  15: 530779.769 ops/s
Iteration  16: 530136.484 ops/s
Iteration  17: 530289.276 ops/s
Iteration  18: 527987.853 ops/s
Iteration  19: 528715.941 ops/s
Iteration  20: 526634.990 ops/s
Iteration  21: 524477.469 ops/s
Iteration  22: 525660.537 ops/s
Iteration  23: 529387.279 ops/s
Iteration  24: 531666.626 ops/s
Iteration  25: 533708.690 ops/s
Iteration  26: 529651.859 ops/s
Iteration  27: 530442.925 ops/s
Iteration  28: 527150.290 ops/s
Iteration  29: 531247.230 ops/s
Iteration  30: 529724.250 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_flatten_value":
  529381.655 ±(99.9%) 1451.816 ops/s [Average]
  (min, avg, max) = (524477.469, 529381.655, 533708.690), stdev = 2173.010
  CI (99.9%): [527929.839, 530833.471] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_flatten_value  thrpt   30  529381.655 ± 1451.816  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_flip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_flip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 240813.078 ops/s
# Warmup Iteration   2: 633640.152 ops/s
# Warmup Iteration   3: 642522.258 ops/s
# Warmup Iteration   4: 544196.016 ops/s
# Warmup Iteration   5: 643848.339 ops/s
# Warmup Iteration   6: 644587.759 ops/s
# Warmup Iteration   7: 637866.433 ops/s
# Warmup Iteration   8: 644430.599 ops/s
# Warmup Iteration   9: 636342.010 ops/s
# Warmup Iteration  10: 648920.370 ops/s
# Warmup Iteration  11: 645432.440 ops/s
# Warmup Iteration  12: 647602.393 ops/s
# Warmup Iteration  13: 644727.214 ops/s
# Warmup Iteration  14: 641395.768 ops/s
# Warmup Iteration  15: 640225.930 ops/s
# Warmup Iteration  16: 646269.570 ops/s
# Warmup Iteration  17: 633856.265 ops/s
# Warmup Iteration  18: 641839.680 ops/s
# Warmup Iteration  19: 646151.294 ops/s
# Warmup Iteration  20: 645831.470 ops/s
# Warmup Iteration  21: 642797.819 ops/s
# Warmup Iteration  22: 640526.691 ops/s
# Warmup Iteration  23: 640994.878 ops/s
# Warmup Iteration  24: 637747.489 ops/s
# Warmup Iteration  25: 645519.536 ops/s
# Warmup Iteration  26: 637077.831 ops/s
# Warmup Iteration  27: 638702.881 ops/s
# Warmup Iteration  28: 640479.343 ops/s
# Warmup Iteration  29: 639841.925 ops/s
# Warmup Iteration  30: 641672.996 ops/s
Iteration   1: 645244.416 ops/s
Iteration   2: 652513.264 ops/s
Iteration   3: 646901.202 ops/s
Iteration   4: 636708.767 ops/s
Iteration   5: 642585.077 ops/s
Iteration   6: 650480.417 ops/s
Iteration   7: 635550.507 ops/s
Iteration   8: 638744.024 ops/s
Iteration   9: 641157.910 ops/s
Iteration  10: 636945.903 ops/s
Iteration  11: 641252.598 ops/s
Iteration  12: 641261.290 ops/s
Iteration  13: 643340.309 ops/s
Iteration  14: 636424.315 ops/s
Iteration  15: 643455.176 ops/s
Iteration  16: 638264.127 ops/s
Iteration  17: 643529.170 ops/s
Iteration  18: 639358.395 ops/s
Iteration  19: 644951.302 ops/s
Iteration  20: 640594.539 ops/s
Iteration  21: 648760.734 ops/s
Iteration  22: 653299.570 ops/s
Iteration  23: 634866.209 ops/s
Iteration  24: 643198.207 ops/s
Iteration  25: 642369.049 ops/s
Iteration  26: 639931.142 ops/s
Iteration  27: 638979.039 ops/s
Iteration  28: 637616.890 ops/s
Iteration  29: 649480.449 ops/s
Iteration  30: 644062.464 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_flip":
  642394.215 ±(99.9%) 3300.856 ops/s [Average]
  (min, avg, max) = (634866.209, 642394.215, 653299.570), stdev = 4940.566
  CI (99.9%): [639093.359, 645695.071] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_flip  thrpt   30  642394.215 ± 3300.856  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_flipUniqueValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_flipUniqueValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 625069.961 ops/s
# Warmup Iteration   2: 1322524.869 ops/s
# Warmup Iteration   3: 1272471.173 ops/s
# Warmup Iteration   4: 1225220.986 ops/s
# Warmup Iteration   5: 1351036.938 ops/s
# Warmup Iteration   6: 1353894.565 ops/s
# Warmup Iteration   7: 1362187.910 ops/s
# Warmup Iteration   8: 1349101.146 ops/s
# Warmup Iteration   9: 1350937.619 ops/s
# Warmup Iteration  10: 1345362.959 ops/s
# Warmup Iteration  11: 1363723.300 ops/s
# Warmup Iteration  12: 1356867.772 ops/s
# Warmup Iteration  13: 1349732.524 ops/s
# Warmup Iteration  14: 1344812.908 ops/s
# Warmup Iteration  15: 1355850.885 ops/s
# Warmup Iteration  16: 1348038.876 ops/s
# Warmup Iteration  17: 1352608.450 ops/s
# Warmup Iteration  18: 1344850.486 ops/s
# Warmup Iteration  19: 1343607.863 ops/s
# Warmup Iteration  20: 1352507.836 ops/s
# Warmup Iteration  21: 1350767.934 ops/s
# Warmup Iteration  22: 1351039.279 ops/s
# Warmup Iteration  23: 1346489.186 ops/s
# Warmup Iteration  24: 1343738.458 ops/s
# Warmup Iteration  25: 1352120.296 ops/s
# Warmup Iteration  26: 1347595.567 ops/s
# Warmup Iteration  27: 1330576.799 ops/s
# Warmup Iteration  28: 1339269.963 ops/s
# Warmup Iteration  29: 1348986.766 ops/s
# Warmup Iteration  30: 1347978.404 ops/s
Iteration   1: 1354612.829 ops/s
Iteration   2: 1351079.218 ops/s
Iteration   3: 1357632.255 ops/s
Iteration   4: 1343353.242 ops/s
Iteration   5: 1338956.013 ops/s
Iteration   6: 1332118.745 ops/s
Iteration   7: 1320224.924 ops/s
Iteration   8: 1348374.992 ops/s
Iteration   9: 1342443.334 ops/s
Iteration  10: 1357965.506 ops/s
Iteration  11: 1353063.517 ops/s
Iteration  12: 1353844.492 ops/s
Iteration  13: 1351148.434 ops/s
Iteration  14: 1348048.293 ops/s
Iteration  15: 1337402.575 ops/s
Iteration  16: 1353201.695 ops/s
Iteration  17: 1347048.041 ops/s
Iteration  18: 1352003.247 ops/s
Iteration  19: 1357437.110 ops/s
Iteration  20: 1349887.566 ops/s
Iteration  21: 1356376.376 ops/s
Iteration  22: 1362240.094 ops/s
Iteration  23: 1362806.830 ops/s
Iteration  24: 1350667.530 ops/s
Iteration  25: 1354428.244 ops/s
Iteration  26: 1351140.945 ops/s
Iteration  27: 1347715.018 ops/s
Iteration  28: 1359654.596 ops/s
Iteration  29: 1354868.328 ops/s
Iteration  30: 1358138.933 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_flipUniqueValues":
  1350262.764 ±(99.9%) 6083.983 ops/s [Average]
  (min, avg, max) = (1320224.924, 1350262.764, 1362806.830), stdev = 9106.220
  CI (99.9%): [1344178.781, 1356346.747] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_flipUniqueValues  thrpt   30  1350262.764 ± 6083.983  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 615856.701 ops/s
# Warmup Iteration   2: 1126023.717 ops/s
# Warmup Iteration   3: 1288223.256 ops/s
# Warmup Iteration   4: 1283905.975 ops/s
# Warmup Iteration   5: 1287350.372 ops/s
# Warmup Iteration   6: 1069064.835 ops/s
# Warmup Iteration   7: 1288855.905 ops/s
# Warmup Iteration   8: 1289433.172 ops/s
# Warmup Iteration   9: 1284736.153 ops/s
# Warmup Iteration  10: 1286374.441 ops/s
# Warmup Iteration  11: 1285936.297 ops/s
# Warmup Iteration  12: 1286855.012 ops/s
# Warmup Iteration  13: 1293621.680 ops/s
# Warmup Iteration  14: 1289798.611 ops/s
# Warmup Iteration  15: 1284612.178 ops/s
# Warmup Iteration  16: 1294239.233 ops/s
# Warmup Iteration  17: 1292749.506 ops/s
# Warmup Iteration  18: 1288977.062 ops/s
# Warmup Iteration  19: 1290028.774 ops/s
# Warmup Iteration  20: 1287704.924 ops/s
# Warmup Iteration  21: 1292535.202 ops/s
# Warmup Iteration  22: 1291352.625 ops/s
# Warmup Iteration  23: 1292596.571 ops/s
# Warmup Iteration  24: 1296459.888 ops/s
# Warmup Iteration  25: 1289474.130 ops/s
# Warmup Iteration  26: 1291599.496 ops/s
# Warmup Iteration  27: 1290243.140 ops/s
# Warmup Iteration  28: 1292389.271 ops/s
# Warmup Iteration  29: 1293874.414 ops/s
# Warmup Iteration  30: 1283649.396 ops/s
Iteration   1: 1295819.761 ops/s
Iteration   2: 1292346.406 ops/s
Iteration   3: 1285164.684 ops/s
Iteration   4: 1289122.149 ops/s
Iteration   5: 1278816.646 ops/s
Iteration   6: 1278446.838 ops/s
Iteration   7: 1292754.749 ops/s
Iteration   8: 1284982.526 ops/s
Iteration   9: 1285789.730 ops/s
Iteration  10: 1266801.003 ops/s
Iteration  11: 1288059.212 ops/s
Iteration  12: 1289227.071 ops/s
Iteration  13: 1290189.793 ops/s
Iteration  14: 1276389.249 ops/s
Iteration  15: 1287912.669 ops/s
Iteration  16: 1282135.221 ops/s
Iteration  17: 1295902.134 ops/s
Iteration  18: 1290118.275 ops/s
Iteration  19: 1291443.872 ops/s
Iteration  20: 1290854.949 ops/s
Iteration  21: 1295306.416 ops/s
Iteration  22: 1297397.011 ops/s
Iteration  23: 1287137.937 ops/s
Iteration  24: 1292953.009 ops/s
Iteration  25: 1296871.917 ops/s
Iteration  26: 1290412.220 ops/s
Iteration  27: 1297126.486 ops/s
Iteration  28: 1288931.502 ops/s
Iteration  29: 1289944.071 ops/s
Iteration  30: 1288925.876 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_forEach":
  1288576.113 ±(99.9%) 4547.844 ops/s [Average]
  (min, avg, max) = (1266801.003, 1288576.113, 1297397.011), stdev = 6807.000
  CI (99.9%): [1284028.268, 1293123.957] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_forEach  thrpt   30  1288576.113 ± 4547.844  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_forEachKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_forEachKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1686304.513 ops/s
# Warmup Iteration   2: 3915693.965 ops/s
# Warmup Iteration   3: 3352574.401 ops/s
# Warmup Iteration   4: 3993674.482 ops/s
# Warmup Iteration   5: 4016275.680 ops/s
# Warmup Iteration   6: 3989279.276 ops/s
# Warmup Iteration   7: 3992237.227 ops/s
# Warmup Iteration   8: 4003935.135 ops/s
# Warmup Iteration   9: 4010714.484 ops/s
# Warmup Iteration  10: 4002083.973 ops/s
# Warmup Iteration  11: 4018090.810 ops/s
# Warmup Iteration  12: 4001951.669 ops/s
# Warmup Iteration  13: 4026913.960 ops/s
# Warmup Iteration  14: 3985032.537 ops/s
# Warmup Iteration  15: 3973047.723 ops/s
# Warmup Iteration  16: 4009610.707 ops/s
# Warmup Iteration  17: 4016484.903 ops/s
# Warmup Iteration  18: 4034521.358 ops/s
# Warmup Iteration  19: 4023224.529 ops/s
# Warmup Iteration  20: 4026502.537 ops/s
# Warmup Iteration  21: 4028744.917 ops/s
# Warmup Iteration  22: 4040237.408 ops/s
# Warmup Iteration  23: 4043220.684 ops/s
# Warmup Iteration  24: 4013278.644 ops/s
# Warmup Iteration  25: 3987128.434 ops/s
# Warmup Iteration  26: 4028402.746 ops/s
# Warmup Iteration  27: 4048263.681 ops/s
# Warmup Iteration  28: 4026895.608 ops/s
# Warmup Iteration  29: 4021663.769 ops/s
# Warmup Iteration  30: 4022083.174 ops/s
Iteration   1: 4038369.180 ops/s
Iteration   2: 4027808.959 ops/s
Iteration   3: 4032251.235 ops/s
Iteration   4: 4017700.674 ops/s
Iteration   5: 4046462.013 ops/s
Iteration   6: 4010163.470 ops/s
Iteration   7: 4061691.289 ops/s
Iteration   8: 4046424.893 ops/s
Iteration   9: 4003663.397 ops/s
Iteration  10: 4033378.963 ops/s
Iteration  11: 4020177.265 ops/s
Iteration  12: 4031944.309 ops/s
Iteration  13: 4036432.128 ops/s
Iteration  14: 4008114.315 ops/s
Iteration  15: 4042838.843 ops/s
Iteration  16: 4013476.747 ops/s
Iteration  17: 4029993.053 ops/s
Iteration  18: 4021238.740 ops/s
Iteration  19: 4028178.131 ops/s
Iteration  20: 3996985.622 ops/s
Iteration  21: 4046345.167 ops/s
Iteration  22: 4025259.539 ops/s
Iteration  23: 4045629.812 ops/s
Iteration  24: 3988303.143 ops/s
Iteration  25: 4019582.221 ops/s
Iteration  26: 4026842.820 ops/s
Iteration  27: 4045366.178 ops/s
Iteration  28: 4025150.308 ops/s
Iteration  29: 3989501.603 ops/s
Iteration  30: 4014002.469 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_forEachKey":
  4025775.883 ±(99.9%) 11844.685 ops/s [Average]
  (min, avg, max) = (3988303.143, 4025775.883, 4061691.289), stdev = 17728.569
  CI (99.9%): [4013931.198, 4037620.568] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_forEachKey  thrpt   30  4025775.883 ± 11844.685  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_forEachKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_forEachKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 384125.074 ops/s
# Warmup Iteration   2: 833303.506 ops/s
# Warmup Iteration   3: 885368.180 ops/s
# Warmup Iteration   4: 888968.460 ops/s
# Warmup Iteration   5: 740404.664 ops/s
# Warmup Iteration   6: 882941.046 ops/s
# Warmup Iteration   7: 872512.702 ops/s
# Warmup Iteration   8: 888025.211 ops/s
# Warmup Iteration   9: 882909.264 ops/s
# Warmup Iteration  10: 885267.548 ops/s
# Warmup Iteration  11: 888548.075 ops/s
# Warmup Iteration  12: 885589.201 ops/s
# Warmup Iteration  13: 886250.597 ops/s
# Warmup Iteration  14: 889828.523 ops/s
# Warmup Iteration  15: 883816.291 ops/s
# Warmup Iteration  16: 888291.830 ops/s
# Warmup Iteration  17: 879221.587 ops/s
# Warmup Iteration  18: 881103.209 ops/s
# Warmup Iteration  19: 886848.283 ops/s
# Warmup Iteration  20: 880391.753 ops/s
# Warmup Iteration  21: 886855.952 ops/s
# Warmup Iteration  22: 884303.792 ops/s
# Warmup Iteration  23: 886245.372 ops/s
# Warmup Iteration  24: 887842.072 ops/s
# Warmup Iteration  25: 879013.852 ops/s
# Warmup Iteration  26: 889876.428 ops/s
# Warmup Iteration  27: 881195.145 ops/s
# Warmup Iteration  28: 890394.803 ops/s
# Warmup Iteration  29: 885738.138 ops/s
# Warmup Iteration  30: 885648.332 ops/s
Iteration   1: 885736.063 ops/s
Iteration   2: 881390.880 ops/s
Iteration   3: 874493.778 ops/s
Iteration   4: 882678.271 ops/s
Iteration   5: 879005.658 ops/s
Iteration   6: 888330.661 ops/s
Iteration   7: 877959.061 ops/s
Iteration   8: 892817.722 ops/s
Iteration   9: 888648.134 ops/s
Iteration  10: 884402.329 ops/s
Iteration  11: 872445.412 ops/s
Iteration  12: 883385.598 ops/s
Iteration  13: 886699.891 ops/s
Iteration  14: 880812.029 ops/s
Iteration  15: 880016.688 ops/s
Iteration  16: 877229.162 ops/s
Iteration  17: 883514.622 ops/s
Iteration  18: 886944.212 ops/s
Iteration  19: 883391.519 ops/s
Iteration  20: 883517.327 ops/s
Iteration  21: 884363.388 ops/s
Iteration  22: 881250.403 ops/s
Iteration  23: 878572.607 ops/s
Iteration  24: 891084.870 ops/s
Iteration  25: 888813.434 ops/s
Iteration  26: 891352.976 ops/s
Iteration  27: 880467.251 ops/s
Iteration  28: 883546.701 ops/s
Iteration  29: 882655.428 ops/s
Iteration  30: 887361.832 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_forEachKeyValue":
  883429.597 ±(99.9%) 3246.673 ops/s [Average]
  (min, avg, max) = (872445.412, 883429.597, 892817.722), stdev = 4859.467
  CI (99.9%): [880182.924, 886676.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_forEachKeyValue  thrpt   30  883429.597 ± 3246.673  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_forEachValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_forEachValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1636973.208 ops/s
# Warmup Iteration   2: 3954359.809 ops/s
# Warmup Iteration   3: 3221123.772 ops/s
# Warmup Iteration   4: 3914290.104 ops/s
# Warmup Iteration   5: 3925687.286 ops/s
# Warmup Iteration   6: 3921419.896 ops/s
# Warmup Iteration   7: 3930902.962 ops/s
# Warmup Iteration   8: 3920536.653 ops/s
# Warmup Iteration   9: 3913562.476 ops/s
# Warmup Iteration  10: 3904021.507 ops/s
# Warmup Iteration  11: 3907316.689 ops/s
# Warmup Iteration  12: 3932233.074 ops/s
# Warmup Iteration  13: 3918369.223 ops/s
# Warmup Iteration  14: 3917267.980 ops/s
# Warmup Iteration  15: 3924941.288 ops/s
# Warmup Iteration  16: 3891811.301 ops/s
# Warmup Iteration  17: 3922975.927 ops/s
# Warmup Iteration  18: 3894715.251 ops/s
# Warmup Iteration  19: 3899950.024 ops/s
# Warmup Iteration  20: 3921262.837 ops/s
# Warmup Iteration  21: 3928363.608 ops/s
# Warmup Iteration  22: 3920361.157 ops/s
# Warmup Iteration  23: 3939030.473 ops/s
# Warmup Iteration  24: 3925470.132 ops/s
# Warmup Iteration  25: 3924422.830 ops/s
# Warmup Iteration  26: 3924976.285 ops/s
# Warmup Iteration  27: 3941944.079 ops/s
# Warmup Iteration  28: 3910222.780 ops/s
# Warmup Iteration  29: 3919972.504 ops/s
# Warmup Iteration  30: 3906415.427 ops/s
Iteration   1: 3943989.732 ops/s
Iteration   2: 3930431.216 ops/s
Iteration   3: 3913174.776 ops/s
Iteration   4: 3903430.803 ops/s
Iteration   5: 3916169.341 ops/s
Iteration   6: 3912149.709 ops/s
Iteration   7: 3944691.510 ops/s
Iteration   8: 3939250.652 ops/s
Iteration   9: 3900622.018 ops/s
Iteration  10: 3932572.666 ops/s
Iteration  11: 3893430.338 ops/s
Iteration  12: 3915680.617 ops/s
Iteration  13: 3915239.165 ops/s
Iteration  14: 3917003.860 ops/s
Iteration  15: 3921589.330 ops/s
Iteration  16: 3938896.832 ops/s
Iteration  17: 3917547.363 ops/s
Iteration  18: 3888092.766 ops/s
Iteration  19: 3879246.109 ops/s
Iteration  20: 3930035.375 ops/s
Iteration  21: 3904338.575 ops/s
Iteration  22: 3929252.116 ops/s
Iteration  23: 3925969.144 ops/s
Iteration  24: 3916498.353 ops/s
Iteration  25: 3914088.043 ops/s
Iteration  26: 3910935.204 ops/s
Iteration  27: 3903339.310 ops/s
Iteration  28: 3924690.037 ops/s
Iteration  29: 3904971.037 ops/s
Iteration  30: 3927577.567 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_forEachValue":
  3917163.452 ±(99.9%) 10625.172 ops/s [Average]
  (min, avg, max) = (3879246.109, 3917163.452, 3944691.510), stdev = 15903.258
  CI (99.9%): [3906538.280, 3927788.624] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_forEachValue  thrpt   30  3917163.452 ± 10625.172  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1290584.714 ops/s
# Warmup Iteration   2: 3063648.833 ops/s
# Warmup Iteration   3: 2948337.463 ops/s
# Warmup Iteration   4: 2673321.996 ops/s
# Warmup Iteration   5: 3068326.601 ops/s
# Warmup Iteration   6: 3061185.806 ops/s
# Warmup Iteration   7: 3039857.046 ops/s
# Warmup Iteration   8: 3051985.752 ops/s
# Warmup Iteration   9: 3069989.440 ops/s
# Warmup Iteration  10: 3057357.631 ops/s
# Warmup Iteration  11: 3066611.504 ops/s
# Warmup Iteration  12: 3070655.356 ops/s
# Warmup Iteration  13: 3072414.161 ops/s
# Warmup Iteration  14: 3051783.276 ops/s
# Warmup Iteration  15: 3075594.689 ops/s
# Warmup Iteration  16: 3077746.625 ops/s
# Warmup Iteration  17: 3034973.946 ops/s
# Warmup Iteration  18: 3059874.732 ops/s
# Warmup Iteration  19: 3085409.100 ops/s
# Warmup Iteration  20: 3085077.045 ops/s
# Warmup Iteration  21: 3049982.901 ops/s
# Warmup Iteration  22: 3054338.221 ops/s
# Warmup Iteration  23: 3079767.911 ops/s
# Warmup Iteration  24: 3070077.674 ops/s
# Warmup Iteration  25: 3056243.995 ops/s
# Warmup Iteration  26: 3054024.408 ops/s
# Warmup Iteration  27: 3071256.360 ops/s
# Warmup Iteration  28: 3072069.205 ops/s
# Warmup Iteration  29: 3025031.140 ops/s
# Warmup Iteration  30: 3048484.550 ops/s
Iteration   1: 3060729.388 ops/s
Iteration   2: 3061266.856 ops/s
Iteration   3: 3059662.727 ops/s
Iteration   4: 3081002.157 ops/s
Iteration   5: 3061250.594 ops/s
Iteration   6: 3034960.163 ops/s
Iteration   7: 3051189.726 ops/s
Iteration   8: 3035447.952 ops/s
Iteration   9: 3053296.088 ops/s
Iteration  10: 3064318.062 ops/s
Iteration  11: 3099357.807 ops/s
Iteration  12: 3082358.062 ops/s
Iteration  13: 3073610.792 ops/s
Iteration  14: 3081910.916 ops/s
Iteration  15: 3031308.295 ops/s
Iteration  16: 3080895.351 ops/s
Iteration  17: 3071903.676 ops/s
Iteration  18: 3075696.077 ops/s
Iteration  19: 3051903.976 ops/s
Iteration  20: 3073941.351 ops/s
Iteration  21: 3038829.382 ops/s
Iteration  22: 3062836.303 ops/s
Iteration  23: 3022135.334 ops/s
Iteration  24: 3077372.008 ops/s
Iteration  25: 3088070.867 ops/s
Iteration  26: 3097507.175 ops/s
Iteration  27: 3089693.233 ops/s
Iteration  28: 3084812.525 ops/s
Iteration  29: 3085410.244 ops/s
Iteration  30: 3052683.372 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_forEachWith":
  3066178.682 ±(99.9%) 13520.160 ops/s [Average]
  (min, avg, max) = (3022135.334, 3066178.682, 3099357.807), stdev = 20236.340
  CI (99.9%): [3052658.523, 3079698.842] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_forEachWith  thrpt   30  3066178.682 ± 13520.160  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 872046.012 ops/s
# Warmup Iteration   2: 2066577.132 ops/s
# Warmup Iteration   3: 2115148.051 ops/s
# Warmup Iteration   4: 1756745.672 ops/s
# Warmup Iteration   5: 2100656.359 ops/s
# Warmup Iteration   6: 2125641.903 ops/s
# Warmup Iteration   7: 2119350.037 ops/s
# Warmup Iteration   8: 2120200.472 ops/s
# Warmup Iteration   9: 2132459.236 ops/s
# Warmup Iteration  10: 2126006.981 ops/s
# Warmup Iteration  11: 2118786.334 ops/s
# Warmup Iteration  12: 2115283.825 ops/s
# Warmup Iteration  13: 2139753.198 ops/s
# Warmup Iteration  14: 2128447.676 ops/s
# Warmup Iteration  15: 2121671.987 ops/s
# Warmup Iteration  16: 2114095.512 ops/s
# Warmup Iteration  17: 2103488.680 ops/s
# Warmup Iteration  18: 2126863.991 ops/s
# Warmup Iteration  19: 2103824.411 ops/s
# Warmup Iteration  20: 2129243.894 ops/s
# Warmup Iteration  21: 2130532.701 ops/s
# Warmup Iteration  22: 2100841.793 ops/s
# Warmup Iteration  23: 2098681.465 ops/s
# Warmup Iteration  24: 2103086.295 ops/s
# Warmup Iteration  25: 2107872.349 ops/s
# Warmup Iteration  26: 2113368.886 ops/s
# Warmup Iteration  27: 2117741.970 ops/s
# Warmup Iteration  28: 2116779.355 ops/s
# Warmup Iteration  29: 2133475.944 ops/s
# Warmup Iteration  30: 2117780.760 ops/s
Iteration   1: 2108501.107 ops/s
Iteration   2: 2092932.630 ops/s
Iteration   3: 2128108.048 ops/s
Iteration   4: 2094141.573 ops/s
Iteration   5: 2099261.679 ops/s
Iteration   6: 2139417.353 ops/s
Iteration   7: 2121141.260 ops/s
Iteration   8: 2119773.937 ops/s
Iteration   9: 2119476.554 ops/s
Iteration  10: 2108296.315 ops/s
Iteration  11: 2123504.220 ops/s
Iteration  12: 2115323.491 ops/s
Iteration  13: 2136735.745 ops/s
Iteration  14: 2112274.574 ops/s
Iteration  15: 2110529.167 ops/s
Iteration  16: 2114569.417 ops/s
Iteration  17: 2112429.539 ops/s
Iteration  18: 2109081.954 ops/s
Iteration  19: 2115378.435 ops/s
Iteration  20: 2128855.117 ops/s
Iteration  21: 2115292.483 ops/s
Iteration  22: 2110135.177 ops/s
Iteration  23: 2143142.258 ops/s
Iteration  24: 2119009.099 ops/s
Iteration  25: 2130515.113 ops/s
Iteration  26: 2133007.010 ops/s
Iteration  27: 2140229.172 ops/s
Iteration  28: 2102239.118 ops/s
Iteration  29: 2099591.181 ops/s
Iteration  30: 2137673.651 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_forEachWithIndex":
  2118018.879 ±(99.9%) 9272.550 ops/s [Average]
  (min, avg, max) = (2092932.630, 2118018.879, 2143142.258), stdev = 13878.718
  CI (99.9%): [2108746.329, 2127291.430] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  2118018.879 ± 9272.550  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_forcePut$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_forcePut

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 217740.214 ops/s
# Warmup Iteration   2: 465128.969 ops/s
# Warmup Iteration   3: 469284.938 ops/s
# Warmup Iteration   4: 442656.010 ops/s
# Warmup Iteration   5: 428507.047 ops/s
# Warmup Iteration   6: 475904.457 ops/s
# Warmup Iteration   7: 472369.330 ops/s
# Warmup Iteration   8: 473581.543 ops/s
# Warmup Iteration   9: 471495.906 ops/s
# Warmup Iteration  10: 469391.765 ops/s
# Warmup Iteration  11: 474121.217 ops/s
# Warmup Iteration  12: 472808.582 ops/s
# Warmup Iteration  13: 477104.410 ops/s
# Warmup Iteration  14: 473287.470 ops/s
# Warmup Iteration  15: 473330.268 ops/s
# Warmup Iteration  16: 476204.687 ops/s
# Warmup Iteration  17: 472180.880 ops/s
# Warmup Iteration  18: 473807.984 ops/s
# Warmup Iteration  19: 473676.530 ops/s
# Warmup Iteration  20: 475344.019 ops/s
# Warmup Iteration  21: 471327.911 ops/s
# Warmup Iteration  22: 470393.866 ops/s
# Warmup Iteration  23: 473905.262 ops/s
# Warmup Iteration  24: 472923.619 ops/s
# Warmup Iteration  25: 472653.900 ops/s
# Warmup Iteration  26: 474935.244 ops/s
# Warmup Iteration  27: 473818.751 ops/s
# Warmup Iteration  28: 472535.702 ops/s
# Warmup Iteration  29: 470112.163 ops/s
# Warmup Iteration  30: 474515.097 ops/s
Iteration   1: 473474.823 ops/s
Iteration   2: 474336.522 ops/s
Iteration   3: 474368.917 ops/s
Iteration   4: 472735.089 ops/s
Iteration   5: 476856.963 ops/s
Iteration   6: 474127.227 ops/s
Iteration   7: 466457.660 ops/s
Iteration   8: 472066.196 ops/s
Iteration   9: 471515.469 ops/s
Iteration  10: 470006.510 ops/s
Iteration  11: 473351.096 ops/s
Iteration  12: 469332.152 ops/s
Iteration  13: 472573.370 ops/s
Iteration  14: 472165.945 ops/s
Iteration  15: 476688.003 ops/s
Iteration  16: 475694.197 ops/s
Iteration  17: 476803.131 ops/s
Iteration  18: 464958.891 ops/s
Iteration  19: 466580.758 ops/s
Iteration  20: 473651.470 ops/s
Iteration  21: 471720.014 ops/s
Iteration  22: 474956.882 ops/s
Iteration  23: 473906.266 ops/s
Iteration  24: 468925.314 ops/s
Iteration  25: 472485.493 ops/s
Iteration  26: 471371.984 ops/s
Iteration  27: 469743.683 ops/s
Iteration  28: 473745.559 ops/s
Iteration  29: 470861.197 ops/s
Iteration  30: 473617.583 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_forcePut":
  472302.612 ±(99.9%) 1994.107 ops/s [Average]
  (min, avg, max) = (464958.891, 472302.612, 476856.963), stdev = 2984.686
  CI (99.9%): [470308.505, 474296.720] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_forcePut  thrpt   30  472302.612 ± 1994.107  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 722590.253 ops/s
# Warmup Iteration   2: 1673196.032 ops/s
# Warmup Iteration   3: 1685905.245 ops/s
# Warmup Iteration   4: 1398656.974 ops/s
# Warmup Iteration   5: 1683916.274 ops/s
# Warmup Iteration   6: 1699687.301 ops/s
# Warmup Iteration   7: 1688230.835 ops/s
# Warmup Iteration   8: 1682749.360 ops/s
# Warmup Iteration   9: 1693016.917 ops/s
# Warmup Iteration  10: 1695095.641 ops/s
# Warmup Iteration  11: 1683092.971 ops/s
# Warmup Iteration  12: 1682637.038 ops/s
# Warmup Iteration  13: 1697017.722 ops/s
# Warmup Iteration  14: 1684716.537 ops/s
# Warmup Iteration  15: 1693114.809 ops/s
# Warmup Iteration  16: 1692689.770 ops/s
# Warmup Iteration  17: 1689544.317 ops/s
# Warmup Iteration  18: 1689478.885 ops/s
# Warmup Iteration  19: 1693004.659 ops/s
# Warmup Iteration  20: 1691678.291 ops/s
# Warmup Iteration  21: 1693256.533 ops/s
# Warmup Iteration  22: 1679884.284 ops/s
# Warmup Iteration  23: 1690925.087 ops/s
# Warmup Iteration  24: 1694609.988 ops/s
# Warmup Iteration  25: 1684818.346 ops/s
# Warmup Iteration  26: 1690046.848 ops/s
# Warmup Iteration  27: 1689679.969 ops/s
# Warmup Iteration  28: 1695111.390 ops/s
# Warmup Iteration  29: 1679886.923 ops/s
# Warmup Iteration  30: 1684260.153 ops/s
Iteration   1: 1666630.647 ops/s
Iteration   2: 1681512.328 ops/s
Iteration   3: 1695403.072 ops/s
Iteration   4: 1694041.957 ops/s
Iteration   5: 1702952.599 ops/s
Iteration   6: 1679616.719 ops/s
Iteration   7: 1696831.552 ops/s
Iteration   8: 1675367.112 ops/s
Iteration   9: 1698731.787 ops/s
Iteration  10: 1689323.012 ops/s
Iteration  11: 1683727.196 ops/s
Iteration  12: 1691983.992 ops/s
Iteration  13: 1660461.031 ops/s
Iteration  14: 1678303.651 ops/s
Iteration  15: 1689314.918 ops/s
Iteration  16: 1682410.630 ops/s
Iteration  17: 1682299.210 ops/s
Iteration  18: 1688089.044 ops/s
Iteration  19: 1696464.364 ops/s
Iteration  20: 1685068.241 ops/s
Iteration  21: 1697497.124 ops/s
Iteration  22: 1690458.828 ops/s
Iteration  23: 1688325.188 ops/s
Iteration  24: 1698326.444 ops/s
Iteration  25: 1701179.028 ops/s
Iteration  26: 1679501.720 ops/s
Iteration  27: 1690850.423 ops/s
Iteration  28: 1689238.790 ops/s
Iteration  29: 1688492.471 ops/s
Iteration  30: 1675147.640 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_get":
  1687251.691 ±(99.9%) 6655.570 ops/s [Average]
  (min, avg, max) = (1660461.031, 1687251.691, 1702952.599), stdev = 9961.744
  CI (99.9%): [1680596.121, 1693907.260] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_get  thrpt   30  1687251.691 ± 6655.570  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1199306.961 ops/s
# Warmup Iteration   2: 2965352.691 ops/s
# Warmup Iteration   3: 2442475.830 ops/s
# Warmup Iteration   4: 2953866.638 ops/s
# Warmup Iteration   5: 2958389.021 ops/s
# Warmup Iteration   6: 2976633.960 ops/s
# Warmup Iteration   7: 2958956.970 ops/s
# Warmup Iteration   8: 2949672.603 ops/s
# Warmup Iteration   9: 2968766.095 ops/s
# Warmup Iteration  10: 2950238.552 ops/s
# Warmup Iteration  11: 2955585.377 ops/s
# Warmup Iteration  12: 2968988.633 ops/s
# Warmup Iteration  13: 2937031.801 ops/s
# Warmup Iteration  14: 2957615.032 ops/s
# Warmup Iteration  15: 2954485.425 ops/s
# Warmup Iteration  16: 2949109.676 ops/s
# Warmup Iteration  17: 2946202.624 ops/s
# Warmup Iteration  18: 2956114.743 ops/s
# Warmup Iteration  19: 2948823.719 ops/s
# Warmup Iteration  20: 2952697.418 ops/s
# Warmup Iteration  21: 2942482.095 ops/s
# Warmup Iteration  22: 2962765.185 ops/s
# Warmup Iteration  23: 2963181.494 ops/s
# Warmup Iteration  24: 2973022.752 ops/s
# Warmup Iteration  25: 2943726.406 ops/s
# Warmup Iteration  26: 2926091.605 ops/s
# Warmup Iteration  27: 2956459.203 ops/s
# Warmup Iteration  28: 2958778.908 ops/s
# Warmup Iteration  29: 2935366.309 ops/s
# Warmup Iteration  30: 2977668.736 ops/s
Iteration   1: 2981799.613 ops/s
Iteration   2: 2933144.712 ops/s
Iteration   3: 2923128.025 ops/s
Iteration   4: 2962332.303 ops/s
Iteration   5: 2946104.229 ops/s
Iteration   6: 2910422.022 ops/s
Iteration   7: 2933785.189 ops/s
Iteration   8: 2957136.533 ops/s
Iteration   9: 2955070.365 ops/s
Iteration  10: 2978502.171 ops/s
Iteration  11: 2965232.532 ops/s
Iteration  12: 2957955.488 ops/s
Iteration  13: 2976260.412 ops/s
Iteration  14: 2969102.884 ops/s
Iteration  15: 2930092.060 ops/s
Iteration  16: 2938989.763 ops/s
Iteration  17: 2947781.788 ops/s
Iteration  18: 2964945.895 ops/s
Iteration  19: 2910355.068 ops/s
Iteration  20: 2958473.147 ops/s
Iteration  21: 2953851.697 ops/s
Iteration  22: 2947546.321 ops/s
Iteration  23: 2964651.388 ops/s
Iteration  24: 2983441.891 ops/s
Iteration  25: 2947111.135 ops/s
Iteration  26: 2960721.040 ops/s
Iteration  27: 2956929.516 ops/s
Iteration  28: 2946369.296 ops/s
Iteration  29: 2955958.250 ops/s
Iteration  30: 2896378.859 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getFirst":
  2950452.453 ±(99.9%) 14191.915 ops/s [Average]
  (min, avg, max) = (2896378.859, 2950452.453, 2983441.891), stdev = 21241.792
  CI (99.9%): [2936260.538, 2964644.368] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_getFirst  thrpt   30  2950452.453 ± 14191.915  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsent$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsent

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3184950.008 ops/s
# Warmup Iteration   2: 6871885.486 ops/s
# Warmup Iteration   3: 5789617.554 ops/s
# Warmup Iteration   4: 6860444.221 ops/s
# Warmup Iteration   5: 6936830.487 ops/s
# Warmup Iteration   6: 6883757.963 ops/s
# Warmup Iteration   7: 6867324.810 ops/s
# Warmup Iteration   8: 6859298.634 ops/s
# Warmup Iteration   9: 6900226.363 ops/s
# Warmup Iteration  10: 6877344.153 ops/s
# Warmup Iteration  11: 6938713.103 ops/s
# Warmup Iteration  12: 6897409.603 ops/s
# Warmup Iteration  13: 6884963.183 ops/s
# Warmup Iteration  14: 6882118.877 ops/s
# Warmup Iteration  15: 6859508.730 ops/s
# Warmup Iteration  16: 6890341.251 ops/s
# Warmup Iteration  17: 6825367.552 ops/s
# Warmup Iteration  18: 6809118.137 ops/s
# Warmup Iteration  19: 6779814.379 ops/s
# Warmup Iteration  20: 6805846.664 ops/s
# Warmup Iteration  21: 6865416.815 ops/s
# Warmup Iteration  22: 6799480.814 ops/s
# Warmup Iteration  23: 6772943.296 ops/s
# Warmup Iteration  24: 6775113.264 ops/s
# Warmup Iteration  25: 6815607.418 ops/s
# Warmup Iteration  26: 6784299.227 ops/s
# Warmup Iteration  27: 6786807.836 ops/s
# Warmup Iteration  28: 6832619.813 ops/s
# Warmup Iteration  29: 6813884.355 ops/s
# Warmup Iteration  30: 6787659.792 ops/s
Iteration   1: 6828128.314 ops/s
Iteration   2: 6787871.815 ops/s
Iteration   3: 6794461.164 ops/s
Iteration   4: 6827262.263 ops/s
Iteration   5: 6807045.897 ops/s
Iteration   6: 6851955.811 ops/s
Iteration   7: 6722117.000 ops/s
Iteration   8: 6849735.958 ops/s
Iteration   9: 6855495.109 ops/s
Iteration  10: 6734862.009 ops/s
Iteration  11: 6839951.759 ops/s
Iteration  12: 6818271.079 ops/s
Iteration  13: 6767075.371 ops/s
Iteration  14: 6832873.547 ops/s
Iteration  15: 6844132.286 ops/s
Iteration  16: 6818872.244 ops/s
Iteration  17: 6772188.699 ops/s
Iteration  18: 6751393.347 ops/s
Iteration  19: 6818442.795 ops/s
Iteration  20: 6786077.419 ops/s
Iteration  21: 6812514.667 ops/s
Iteration  22: 6804129.595 ops/s
Iteration  23: 6810402.444 ops/s
Iteration  24: 6822420.244 ops/s
Iteration  25: 6857362.706 ops/s
Iteration  26: 6846305.904 ops/s
Iteration  27: 6753869.533 ops/s
Iteration  28: 6849287.333 ops/s
Iteration  29: 6810226.583 ops/s
Iteration  30: 6841573.268 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsent":
  6810543.539 ±(99.9%) 24709.389 ops/s [Average]
  (min, avg, max) = (6722117.000, 6810543.539, 6857362.706), stdev = 36983.852
  CI (99.9%): [6785834.150, 6835252.927] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_getIfAbsent  thrpt   30  6810543.539 ± 24709.389  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPut$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPut

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2672272.366 ops/s
# Warmup Iteration   2: 5506942.408 ops/s
# Warmup Iteration   3: 5084404.887 ops/s
# Warmup Iteration   4: 5305034.394 ops/s
# Warmup Iteration   5: 5549085.956 ops/s
# Warmup Iteration   6: 5667004.968 ops/s
# Warmup Iteration   7: 5693524.223 ops/s
# Warmup Iteration   8: 5621984.534 ops/s
# Warmup Iteration   9: 5697567.205 ops/s
# Warmup Iteration  10: 5651057.003 ops/s
# Warmup Iteration  11: 5676395.431 ops/s
# Warmup Iteration  12: 5721828.418 ops/s
# Warmup Iteration  13: 5603814.449 ops/s
# Warmup Iteration  14: 5624907.681 ops/s
# Warmup Iteration  15: 5821691.847 ops/s
# Warmup Iteration  16: 5740433.996 ops/s
# Warmup Iteration  17: 5665409.457 ops/s
# Warmup Iteration  18: 5639376.028 ops/s
# Warmup Iteration  19: 5592892.219 ops/s
# Warmup Iteration  20: 5655824.844 ops/s
# Warmup Iteration  21: 5609394.760 ops/s
# Warmup Iteration  22: 5624601.162 ops/s
# Warmup Iteration  23: 5521649.720 ops/s
# Warmup Iteration  24: 5611904.806 ops/s
# Warmup Iteration  25: 5638026.176 ops/s
# Warmup Iteration  26: 5542897.762 ops/s
# Warmup Iteration  27: 5631551.308 ops/s
# Warmup Iteration  28: 5602289.233 ops/s
# Warmup Iteration  29: 5513711.608 ops/s
# Warmup Iteration  30: 5610610.716 ops/s
Iteration   1: 5698292.367 ops/s
Iteration   2: 5650777.334 ops/s
Iteration   3: 5626997.372 ops/s
Iteration   4: 5569915.807 ops/s
Iteration   5: 5666302.156 ops/s
Iteration   6: 5526098.426 ops/s
Iteration   7: 5600126.369 ops/s
Iteration   8: 5698265.104 ops/s
Iteration   9: 5744004.954 ops/s
Iteration  10: 5845051.051 ops/s
Iteration  11: 5580825.778 ops/s
Iteration  12: 5453216.713 ops/s
Iteration  13: 5638098.430 ops/s
Iteration  14: 5760276.990 ops/s
Iteration  15: 5722915.765 ops/s
Iteration  16: 5665121.846 ops/s
Iteration  17: 5592414.538 ops/s
Iteration  18: 5647450.702 ops/s
Iteration  19: 5578182.597 ops/s
Iteration  20: 5571115.343 ops/s
Iteration  21: 5540044.511 ops/s
Iteration  22: 5627989.095 ops/s
Iteration  23: 5648335.446 ops/s
Iteration  24: 5790888.853 ops/s
Iteration  25: 5648684.151 ops/s
Iteration  26: 5668470.448 ops/s
Iteration  27: 5526370.653 ops/s
Iteration  28: 5689993.046 ops/s
Iteration  29: 5682382.845 ops/s
Iteration  30: 5679652.296 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPut":
  5644608.700 ±(99.9%) 55948.009 ops/s [Average]
  (min, avg, max) = (5453216.713, 5644608.700, 5845051.051), stdev = 83740.352
  CI (99.9%): [5588660.691, 5700556.708] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPut  thrpt   30  5644608.700 ± 55948.009  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPutValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPutValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1704916.589 ops/s
# Warmup Iteration   2: 5587660.048 ops/s
# Warmup Iteration   3: 5708459.975 ops/s
# Warmup Iteration   4: 5026848.653 ops/s
# Warmup Iteration   5: 5820353.849 ops/s
# Warmup Iteration   6: 5747528.117 ops/s
# Warmup Iteration   7: 5866445.529 ops/s
# Warmup Iteration   8: 5852672.313 ops/s
# Warmup Iteration   9: 5845551.017 ops/s
# Warmup Iteration  10: 5844089.397 ops/s
# Warmup Iteration  11: 5870996.564 ops/s
# Warmup Iteration  12: 5857486.745 ops/s
# Warmup Iteration  13: 5830565.097 ops/s
# Warmup Iteration  14: 5838944.153 ops/s
# Warmup Iteration  15: 5851205.282 ops/s
# Warmup Iteration  16: 5875492.106 ops/s
# Warmup Iteration  17: 5818470.041 ops/s
# Warmup Iteration  18: 5834053.845 ops/s
# Warmup Iteration  19: 5866964.226 ops/s
# Warmup Iteration  20: 5832101.737 ops/s
# Warmup Iteration  21: 5848975.665 ops/s
# Warmup Iteration  22: 5851958.849 ops/s
# Warmup Iteration  23: 5839708.207 ops/s
# Warmup Iteration  24: 5868626.765 ops/s
# Warmup Iteration  25: 5854900.714 ops/s
# Warmup Iteration  26: 5841053.870 ops/s
# Warmup Iteration  27: 5857599.647 ops/s
# Warmup Iteration  28: 5836240.541 ops/s
# Warmup Iteration  29: 5879109.822 ops/s
# Warmup Iteration  30: 5826630.863 ops/s
Iteration   1: 5813383.653 ops/s
Iteration   2: 5880427.886 ops/s
Iteration   3: 5795599.723 ops/s
Iteration   4: 5880112.379 ops/s
Iteration   5: 5825414.643 ops/s
Iteration   6: 5829932.498 ops/s
Iteration   7: 5863857.857 ops/s
Iteration   8: 5860947.089 ops/s
Iteration   9: 5822071.923 ops/s
Iteration  10: 5813597.497 ops/s
Iteration  11: 5787330.394 ops/s
Iteration  12: 5839019.168 ops/s
Iteration  13: 5841594.575 ops/s
Iteration  14: 5830763.735 ops/s
Iteration  15: 5890542.786 ops/s
Iteration  16: 5876315.679 ops/s
Iteration  17: 5860164.644 ops/s
Iteration  18: 5847566.655 ops/s
Iteration  19: 5863941.272 ops/s
Iteration  20: 5823690.070 ops/s
Iteration  21: 5879473.332 ops/s
Iteration  22: 5872450.793 ops/s
Iteration  23: 5804809.486 ops/s
Iteration  24: 5840348.301 ops/s
Iteration  25: 5806285.006 ops/s
Iteration  26: 5706855.679 ops/s
Iteration  27: 5764302.900 ops/s
Iteration  28: 5741324.259 ops/s
Iteration  29: 5777453.974 ops/s
Iteration  30: 5835733.271 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPutValue":
  5829177.038 ±(99.9%) 29069.475 ops/s [Average]
  (min, avg, max) = (5706855.679, 5829177.038, 5890542.786), stdev = 43509.826
  CI (99.9%): [5800107.562, 5858246.513] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPutValue  thrpt   30  5829177.038 ± 29069.475  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPutWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPutWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1950227.834 ops/s
# Warmup Iteration   2: 4791973.646 ops/s
# Warmup Iteration   3: 4770935.149 ops/s
# Warmup Iteration   4: 3919356.430 ops/s
# Warmup Iteration   5: 4760390.081 ops/s
# Warmup Iteration   6: 4769270.450 ops/s
# Warmup Iteration   7: 4760377.104 ops/s
# Warmup Iteration   8: 4745843.071 ops/s
# Warmup Iteration   9: 4806996.317 ops/s
# Warmup Iteration  10: 4775226.467 ops/s
# Warmup Iteration  11: 4806744.073 ops/s
# Warmup Iteration  12: 4774663.523 ops/s
# Warmup Iteration  13: 4788957.154 ops/s
# Warmup Iteration  14: 4749237.023 ops/s
# Warmup Iteration  15: 4728570.287 ops/s
# Warmup Iteration  16: 4767409.904 ops/s
# Warmup Iteration  17: 4743925.208 ops/s
# Warmup Iteration  18: 4779384.926 ops/s
# Warmup Iteration  19: 4772215.474 ops/s
# Warmup Iteration  20: 4792076.476 ops/s
# Warmup Iteration  21: 4759695.687 ops/s
# Warmup Iteration  22: 4760000.409 ops/s
# Warmup Iteration  23: 4780049.526 ops/s
# Warmup Iteration  24: 4767855.699 ops/s
# Warmup Iteration  25: 4745164.877 ops/s
# Warmup Iteration  26: 4749616.165 ops/s
# Warmup Iteration  27: 4752775.356 ops/s
# Warmup Iteration  28: 4785072.795 ops/s
# Warmup Iteration  29: 4746388.847 ops/s
# Warmup Iteration  30: 4733515.125 ops/s
Iteration   1: 4786017.148 ops/s
Iteration   2: 4756256.936 ops/s
Iteration   3: 4769995.514 ops/s
Iteration   4: 4724401.166 ops/s
Iteration   5: 4737374.914 ops/s
Iteration   6: 4823261.006 ops/s
Iteration   7: 4796560.599 ops/s
Iteration   8: 4764990.189 ops/s
Iteration   9: 4778230.036 ops/s
Iteration  10: 4764411.262 ops/s
Iteration  11: 4786571.055 ops/s
Iteration  12: 4757371.771 ops/s
Iteration  13: 4749955.359 ops/s
Iteration  14: 4768461.360 ops/s
Iteration  15: 4793533.001 ops/s
Iteration  16: 4798601.689 ops/s
Iteration  17: 4700841.808 ops/s
Iteration  18: 4832473.495 ops/s
Iteration  19: 4749688.479 ops/s
Iteration  20: 4756424.163 ops/s
Iteration  21: 4798318.591 ops/s
Iteration  22: 4761135.521 ops/s
Iteration  23: 4814736.743 ops/s
Iteration  24: 4722402.982 ops/s
Iteration  25: 4772942.327 ops/s
Iteration  26: 4774519.553 ops/s
Iteration  27: 4783117.379 ops/s
Iteration  28: 4768667.745 ops/s
Iteration  29: 4711900.628 ops/s
Iteration  30: 4783589.749 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPutWith":
  4769558.406 ±(99.9%) 20630.985 ops/s [Average]
  (min, avg, max) = (4700841.808, 4769558.406, 4832473.495), stdev = 30879.489
  CI (99.9%): [4748927.421, 4790189.391] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPutWith  thrpt   30  4769558.406 ± 20630.985  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPutWithKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPutWithKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2995227.860 ops/s
# Warmup Iteration   2: 5421195.994 ops/s
# Warmup Iteration   3: 4856730.615 ops/s
# Warmup Iteration   4: 5117669.193 ops/s
# Warmup Iteration   5: 5319681.448 ops/s
# Warmup Iteration   6: 5368902.310 ops/s
# Warmup Iteration   7: 5355342.958 ops/s
# Warmup Iteration   8: 5426686.897 ops/s
# Warmup Iteration   9: 5481919.952 ops/s
# Warmup Iteration  10: 5328789.771 ops/s
# Warmup Iteration  11: 5443667.506 ops/s
# Warmup Iteration  12: 5377846.825 ops/s
# Warmup Iteration  13: 5370851.750 ops/s
# Warmup Iteration  14: 5423327.837 ops/s
# Warmup Iteration  15: 5372349.817 ops/s
# Warmup Iteration  16: 5381375.308 ops/s
# Warmup Iteration  17: 5483828.062 ops/s
# Warmup Iteration  18: 5362676.787 ops/s
# Warmup Iteration  19: 5439968.211 ops/s
# Warmup Iteration  20: 5445136.870 ops/s
# Warmup Iteration  21: 5461985.728 ops/s
# Warmup Iteration  22: 5430899.477 ops/s
# Warmup Iteration  23: 5345234.140 ops/s
# Warmup Iteration  24: 5457466.115 ops/s
# Warmup Iteration  25: 5420270.431 ops/s
# Warmup Iteration  26: 5456517.903 ops/s
# Warmup Iteration  27: 5538954.486 ops/s
# Warmup Iteration  28: 5468072.571 ops/s
# Warmup Iteration  29: 5530874.806 ops/s
# Warmup Iteration  30: 5378498.665 ops/s
Iteration   1: 5264416.145 ops/s
Iteration   2: 5434070.151 ops/s
Iteration   3: 5452938.638 ops/s
Iteration   4: 5431217.010 ops/s
Iteration   5: 5378976.344 ops/s
Iteration   6: 5228730.801 ops/s
Iteration   7: 5468210.120 ops/s
Iteration   8: 5607512.231 ops/s
Iteration   9: 5565524.573 ops/s
Iteration  10: 5459230.348 ops/s
Iteration  11: 5561004.016 ops/s
Iteration  12: 5448474.514 ops/s
Iteration  13: 5621060.001 ops/s
Iteration  14: 5351177.182 ops/s
Iteration  15: 5398455.904 ops/s
Iteration  16: 5422864.743 ops/s
Iteration  17: 5368820.585 ops/s
Iteration  18: 5539394.270 ops/s
Iteration  19: 5240624.646 ops/s
Iteration  20: 5531371.564 ops/s
Iteration  21: 5466538.435 ops/s
Iteration  22: 5555942.070 ops/s
Iteration  23: 5397248.448 ops/s
Iteration  24: 5454935.504 ops/s
Iteration  25: 5453837.833 ops/s
Iteration  26: 5529675.720 ops/s
Iteration  27: 5505594.659 ops/s
Iteration  28: 5452892.189 ops/s
Iteration  29: 5430241.652 ops/s
Iteration  30: 5415582.967 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPutWithKey":
  5447885.442 ±(99.9%) 64779.111 ops/s [Average]
  (min, avg, max) = (5228730.801, 5447885.442, 5621060.001), stdev = 96958.331
  CI (99.9%): [5383106.331, 5512664.553] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPutWithKey  thrpt   30  5447885.442 ± 64779.111  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPutWith_block_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPutWith_block_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 531426.670 ops/s
# Warmup Iteration   2: 615377.848 ops/s
# Warmup Iteration   3: 797723.730 ops/s
# Warmup Iteration   4: 796738.090 ops/s
# Warmup Iteration   5: 797245.884 ops/s
# Warmup Iteration   6: 794660.002 ops/s
# Warmup Iteration   7: 797937.109 ops/s
# Warmup Iteration   8: 794778.655 ops/s
# Warmup Iteration   9: 720151.792 ops/s
# Warmup Iteration  10: 729650.798 ops/s
# Warmup Iteration  11: 794925.209 ops/s
# Warmup Iteration  12: 797058.352 ops/s
# Warmup Iteration  13: 793366.640 ops/s
# Warmup Iteration  14: 798337.475 ops/s
# Warmup Iteration  15: 791679.523 ops/s
# Warmup Iteration  16: 792175.152 ops/s
# Warmup Iteration  17: 832850.031 ops/s
# Warmup Iteration  18: 833823.239 ops/s
# Warmup Iteration  19: 832643.954 ops/s
# Warmup Iteration  20: 831916.507 ops/s
# Warmup Iteration  21: 832335.174 ops/s
# Warmup Iteration  22: 829106.767 ops/s
# Warmup Iteration  23: 829864.036 ops/s
# Warmup Iteration  24: 828774.161 ops/s
# Warmup Iteration  25: 827096.089 ops/s
# Warmup Iteration  26: 827389.443 ops/s
# Warmup Iteration  27: 831756.830 ops/s
# Warmup Iteration  28: 828270.494 ops/s
# Warmup Iteration  29: 830075.620 ops/s
# Warmup Iteration  30: 825391.888 ops/s
Iteration   1: 834519.845 ops/s
Iteration   2: 831267.471 ops/s
Iteration   3: 837046.929 ops/s
Iteration   4: 821622.859 ops/s
Iteration   5: 833353.269 ops/s
Iteration   6: 822874.984 ops/s
Iteration   7: 829634.409 ops/s
Iteration   8: 826247.241 ops/s
Iteration   9: 829348.446 ops/s
Iteration  10: 831119.531 ops/s
Iteration  11: 832279.249 ops/s
Iteration  12: 824698.576 ops/s
Iteration  13: 835118.642 ops/s
Iteration  14: 832854.188 ops/s
Iteration  15: 823827.119 ops/s
Iteration  16: 830768.781 ops/s
Iteration  17: 831948.513 ops/s
Iteration  18: 832253.673 ops/s
Iteration  19: 835466.878 ops/s
Iteration  20: 835764.935 ops/s
Iteration  21: 836905.203 ops/s
Iteration  22: 837242.337 ops/s
Iteration  23: 835682.702 ops/s
Iteration  24: 838543.090 ops/s
Iteration  25: 837956.833 ops/s
Iteration  26: 835398.547 ops/s
Iteration  27: 838988.243 ops/s
Iteration  28: 838939.146 ops/s
Iteration  29: 835011.543 ops/s
Iteration  30: 842179.396 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPutWith_block_throws":
  832962.086 ±(99.9%) 3435.769 ops/s [Average]
  (min, avg, max) = (821622.859, 832962.086, 842179.396), stdev = 5142.498
  CI (99.9%): [829526.317, 836397.855] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPutWith_block_throws  thrpt   30  832962.086 ± 3435.769  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPut_block_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPut_block_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 530797.446 ops/s
# Warmup Iteration   2: 628814.412 ops/s
# Warmup Iteration   3: 812661.096 ops/s
# Warmup Iteration   4: 812662.430 ops/s
# Warmup Iteration   5: 813525.059 ops/s
# Warmup Iteration   6: 812564.741 ops/s
# Warmup Iteration   7: 810266.328 ops/s
# Warmup Iteration   8: 809212.560 ops/s
# Warmup Iteration   9: 705757.889 ops/s
# Warmup Iteration  10: 780241.564 ops/s
# Warmup Iteration  11: 810983.998 ops/s
# Warmup Iteration  12: 814006.365 ops/s
# Warmup Iteration  13: 811098.527 ops/s
# Warmup Iteration  14: 812957.203 ops/s
# Warmup Iteration  15: 811106.926 ops/s
# Warmup Iteration  16: 810688.156 ops/s
# Warmup Iteration  17: 852684.527 ops/s
# Warmup Iteration  18: 851777.980 ops/s
# Warmup Iteration  19: 852864.914 ops/s
# Warmup Iteration  20: 850969.159 ops/s
# Warmup Iteration  21: 852333.579 ops/s
# Warmup Iteration  22: 851868.455 ops/s
# Warmup Iteration  23: 852154.212 ops/s
# Warmup Iteration  24: 852149.236 ops/s
# Warmup Iteration  25: 852948.478 ops/s
# Warmup Iteration  26: 852839.538 ops/s
# Warmup Iteration  27: 852598.038 ops/s
# Warmup Iteration  28: 851019.100 ops/s
# Warmup Iteration  29: 848072.304 ops/s
# Warmup Iteration  30: 849951.245 ops/s
Iteration   1: 850696.279 ops/s
Iteration   2: 852581.452 ops/s
Iteration   3: 850811.804 ops/s
Iteration   4: 854300.767 ops/s
Iteration   5: 853227.308 ops/s
Iteration   6: 850176.921 ops/s
Iteration   7: 851713.429 ops/s
Iteration   8: 849339.188 ops/s
Iteration   9: 848243.448 ops/s
Iteration  10: 854235.778 ops/s
Iteration  11: 852001.991 ops/s
Iteration  12: 852664.971 ops/s
Iteration  13: 850215.640 ops/s
Iteration  14: 853154.364 ops/s
Iteration  15: 847952.498 ops/s
Iteration  16: 852455.369 ops/s
Iteration  17: 851371.018 ops/s
Iteration  18: 851441.624 ops/s
Iteration  19: 853852.414 ops/s
Iteration  20: 850743.547 ops/s
Iteration  21: 853096.353 ops/s
Iteration  22: 852111.864 ops/s
Iteration  23: 854996.601 ops/s
Iteration  24: 852822.065 ops/s
Iteration  25: 853869.745 ops/s
Iteration  26: 850309.531 ops/s
Iteration  27: 852967.260 ops/s
Iteration  28: 853602.738 ops/s
Iteration  29: 855565.089 ops/s
Iteration  30: 849879.206 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPut_block_throws":
  852013.342 ±(99.9%) 1271.544 ops/s [Average]
  (min, avg, max) = (847952.498, 852013.342, 855565.089), stdev = 1903.187
  CI (99.9%): [850741.798, 853284.886] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentPut_block_throws  thrpt   30  852013.342 ± 1271.544  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2620504.093 ops/s
# Warmup Iteration   2: 5811151.146 ops/s
# Warmup Iteration   3: 4827907.964 ops/s
# Warmup Iteration   4: 5771537.099 ops/s
# Warmup Iteration   5: 5764736.771 ops/s
# Warmup Iteration   6: 5768657.128 ops/s
# Warmup Iteration   7: 5757297.429 ops/s
# Warmup Iteration   8: 5745452.916 ops/s
# Warmup Iteration   9: 5771297.995 ops/s
# Warmup Iteration  10: 5768721.004 ops/s
# Warmup Iteration  11: 5797800.164 ops/s
# Warmup Iteration  12: 5777904.259 ops/s
# Warmup Iteration  13: 5803345.549 ops/s
# Warmup Iteration  14: 5754329.598 ops/s
# Warmup Iteration  15: 5773397.526 ops/s
# Warmup Iteration  16: 5774652.493 ops/s
# Warmup Iteration  17: 5776605.605 ops/s
# Warmup Iteration  18: 5733541.692 ops/s
# Warmup Iteration  19: 5781151.814 ops/s
# Warmup Iteration  20: 5729302.525 ops/s
# Warmup Iteration  21: 5774043.300 ops/s
# Warmup Iteration  22: 5704777.389 ops/s
# Warmup Iteration  23: 5759270.300 ops/s
# Warmup Iteration  24: 5753840.040 ops/s
# Warmup Iteration  25: 5738486.192 ops/s
# Warmup Iteration  26: 5762258.805 ops/s
# Warmup Iteration  27: 5791305.696 ops/s
# Warmup Iteration  28: 5682262.684 ops/s
# Warmup Iteration  29: 5758089.100 ops/s
# Warmup Iteration  30: 5738626.979 ops/s
Iteration   1: 5772375.736 ops/s
Iteration   2: 5750174.743 ops/s
Iteration   3: 5708335.725 ops/s
Iteration   4: 5772812.073 ops/s
Iteration   5: 5747514.719 ops/s
Iteration   6: 5747192.415 ops/s
Iteration   7: 5771118.203 ops/s
Iteration   8: 5700175.164 ops/s
Iteration   9: 5736886.738 ops/s
Iteration  10: 5725652.969 ops/s
Iteration  11: 5788156.315 ops/s
Iteration  12: 5806074.626 ops/s
Iteration  13: 5710106.752 ops/s
Iteration  14: 5706369.496 ops/s
Iteration  15: 5756482.845 ops/s
Iteration  16: 5755644.244 ops/s
Iteration  17: 5797791.814 ops/s
Iteration  18: 5770648.367 ops/s
Iteration  19: 5761225.524 ops/s
Iteration  20: 5744999.440 ops/s
Iteration  21: 5760057.433 ops/s
Iteration  22: 5775324.089 ops/s
Iteration  23: 5762308.498 ops/s
Iteration  24: 5744986.369 ops/s
Iteration  25: 5711849.061 ops/s
Iteration  26: 5753154.518 ops/s
Iteration  27: 5760249.614 ops/s
Iteration  28: 5727421.955 ops/s
Iteration  29: 5763270.472 ops/s
Iteration  30: 5742407.179 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentWith":
  5751025.570 ±(99.9%) 17848.417 ops/s [Average]
  (min, avg, max) = (5700175.164, 5751025.570, 5806074.626), stdev = 26714.672
  CI (99.9%): [5733177.153, 5768873.987] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_getIfAbsentWith  thrpt   30  5751025.570 ± 17848.417  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsent_function$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsent_function

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3133116.215 ops/s
# Warmup Iteration   2: 6568914.254 ops/s
# Warmup Iteration   3: 5706668.949 ops/s
# Warmup Iteration   4: 6786826.622 ops/s
# Warmup Iteration   5: 6829627.653 ops/s
# Warmup Iteration   6: 6837225.348 ops/s
# Warmup Iteration   7: 6836763.519 ops/s
# Warmup Iteration   8: 6817384.623 ops/s
# Warmup Iteration   9: 6795067.264 ops/s
# Warmup Iteration  10: 6838511.999 ops/s
# Warmup Iteration  11: 6821549.759 ops/s
# Warmup Iteration  12: 6786176.222 ops/s
# Warmup Iteration  13: 6814123.486 ops/s
# Warmup Iteration  14: 6828683.507 ops/s
# Warmup Iteration  15: 6813784.271 ops/s
# Warmup Iteration  16: 6797558.899 ops/s
# Warmup Iteration  17: 6731129.943 ops/s
# Warmup Iteration  18: 6829810.780 ops/s
# Warmup Iteration  19: 6785585.821 ops/s
# Warmup Iteration  20: 6803061.401 ops/s
# Warmup Iteration  21: 6778465.195 ops/s
# Warmup Iteration  22: 6789280.135 ops/s
# Warmup Iteration  23: 6743905.950 ops/s
# Warmup Iteration  24: 6802102.848 ops/s
# Warmup Iteration  25: 6812634.130 ops/s
# Warmup Iteration  26: 6809218.551 ops/s
# Warmup Iteration  27: 6828241.737 ops/s
# Warmup Iteration  28: 6819040.960 ops/s
# Warmup Iteration  29: 6794724.678 ops/s
# Warmup Iteration  30: 6849319.342 ops/s
Iteration   1: 6790109.310 ops/s
Iteration   2: 6740335.814 ops/s
Iteration   3: 6823330.046 ops/s
Iteration   4: 6793972.537 ops/s
Iteration   5: 6741245.903 ops/s
Iteration   6: 6772743.964 ops/s
Iteration   7: 6763156.578 ops/s
Iteration   8: 6854340.374 ops/s
Iteration   9: 6755297.361 ops/s
Iteration  10: 6807377.431 ops/s
Iteration  11: 6868138.354 ops/s
Iteration  12: 6770205.530 ops/s
Iteration  13: 6850764.501 ops/s
Iteration  14: 6821761.276 ops/s
Iteration  15: 6787524.540 ops/s
Iteration  16: 6748074.136 ops/s
Iteration  17: 6796475.786 ops/s
Iteration  18: 6775515.130 ops/s
Iteration  19: 6797916.369 ops/s
Iteration  20: 6807148.507 ops/s
Iteration  21: 6784894.065 ops/s
Iteration  22: 6812651.449 ops/s
Iteration  23: 6741376.948 ops/s
Iteration  24: 6370291.799 ops/s
Iteration  25: 6790992.174 ops/s
Iteration  26: 6763475.317 ops/s
Iteration  27: 6754421.414 ops/s
Iteration  28: 6853490.374 ops/s
Iteration  29: 6864322.937 ops/s
Iteration  30: 6871749.384 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getIfAbsent_function":
  6782436.644 ±(99.9%) 58423.610 ops/s [Average]
  (min, avg, max) = (6370291.799, 6782436.644, 6871749.384), stdev = 87445.715
  CI (99.9%): [6724013.034, 6840860.253] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_getIfAbsent_function  thrpt   30  6782436.644 ± 58423.610  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getKeysAndGetValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getKeysAndGetValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1641351.718 ops/s
# Warmup Iteration   2: 3648510.876 ops/s
# Warmup Iteration   3: 3054291.152 ops/s
# Warmup Iteration   4: 3640024.813 ops/s
# Warmup Iteration   5: 3670986.503 ops/s
# Warmup Iteration   6: 3664809.917 ops/s
# Warmup Iteration   7: 3659250.956 ops/s
# Warmup Iteration   8: 3661062.303 ops/s
# Warmup Iteration   9: 3646651.812 ops/s
# Warmup Iteration  10: 3667798.584 ops/s
# Warmup Iteration  11: 3641784.072 ops/s
# Warmup Iteration  12: 3638537.953 ops/s
# Warmup Iteration  13: 3654240.420 ops/s
# Warmup Iteration  14: 3647183.725 ops/s
# Warmup Iteration  15: 3658937.487 ops/s
# Warmup Iteration  16: 3672495.542 ops/s
# Warmup Iteration  17: 3647185.502 ops/s
# Warmup Iteration  18: 3656630.137 ops/s
# Warmup Iteration  19: 3642201.588 ops/s
# Warmup Iteration  20: 3592309.057 ops/s
# Warmup Iteration  21: 3652488.178 ops/s
# Warmup Iteration  22: 3666859.674 ops/s
# Warmup Iteration  23: 3642676.090 ops/s
# Warmup Iteration  24: 3620604.248 ops/s
# Warmup Iteration  25: 3652346.383 ops/s
# Warmup Iteration  26: 3638061.710 ops/s
# Warmup Iteration  27: 3636760.470 ops/s
# Warmup Iteration  28: 3659022.711 ops/s
# Warmup Iteration  29: 3649351.379 ops/s
# Warmup Iteration  30: 3629679.324 ops/s
Iteration   1: 3632605.211 ops/s
Iteration   2: 3684615.819 ops/s
Iteration   3: 3666999.520 ops/s
Iteration   4: 3698802.049 ops/s
Iteration   5: 3692993.488 ops/s
Iteration   6: 3638161.155 ops/s
Iteration   7: 3618318.120 ops/s
Iteration   8: 3660364.845 ops/s
Iteration   9: 3628684.203 ops/s
Iteration  10: 3663136.419 ops/s
Iteration  11: 3633956.566 ops/s
Iteration  12: 3664045.694 ops/s
Iteration  13: 3621579.839 ops/s
Iteration  14: 3645135.065 ops/s
Iteration  15: 3662687.630 ops/s
Iteration  16: 3619033.430 ops/s
Iteration  17: 3656650.276 ops/s
Iteration  18: 3649877.869 ops/s
Iteration  19: 3687530.028 ops/s
Iteration  20: 3651013.728 ops/s
Iteration  21: 3662497.906 ops/s
Iteration  22: 3641943.064 ops/s
Iteration  23: 3630437.522 ops/s
Iteration  24: 3568166.161 ops/s
Iteration  25: 3626841.034 ops/s
Iteration  26: 3641216.497 ops/s
Iteration  27: 3645589.300 ops/s
Iteration  28: 3644150.284 ops/s
Iteration  29: 3639090.027 ops/s
Iteration  30: 3669896.927 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getKeysAndGetValues":
  3648200.656 ±(99.9%) 17608.295 ops/s [Average]
  (min, avg, max) = (3568166.161, 3648200.656, 3698802.049), stdev = 26355.269
  CI (99.9%): [3630592.361, 3665808.951] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_getKeysAndGetValues  thrpt   30  3648200.656 ± 17608.295  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 761291.618 ops/s
# Warmup Iteration   2: 1859554.571 ops/s
# Warmup Iteration   3: 1868559.393 ops/s
# Warmup Iteration   4: 1542774.697 ops/s
# Warmup Iteration   5: 1882362.527 ops/s
# Warmup Iteration   6: 1882387.726 ops/s
# Warmup Iteration   7: 1877653.642 ops/s
# Warmup Iteration   8: 1873472.874 ops/s
# Warmup Iteration   9: 1866399.569 ops/s
# Warmup Iteration  10: 1863585.020 ops/s
# Warmup Iteration  11: 1867514.969 ops/s
# Warmup Iteration  12: 1875221.574 ops/s
# Warmup Iteration  13: 1869729.853 ops/s
# Warmup Iteration  14: 1863987.923 ops/s
# Warmup Iteration  15: 1859217.293 ops/s
# Warmup Iteration  16: 1872111.522 ops/s
# Warmup Iteration  17: 1868681.760 ops/s
# Warmup Iteration  18: 1868739.136 ops/s
# Warmup Iteration  19: 1855692.846 ops/s
# Warmup Iteration  20: 1870850.539 ops/s
# Warmup Iteration  21: 1857627.185 ops/s
# Warmup Iteration  22: 1873080.948 ops/s
# Warmup Iteration  23: 1858865.615 ops/s
# Warmup Iteration  24: 1881251.607 ops/s
# Warmup Iteration  25: 1869966.355 ops/s
# Warmup Iteration  26: 1865579.556 ops/s
# Warmup Iteration  27: 1869154.660 ops/s
# Warmup Iteration  28: 1876766.343 ops/s
# Warmup Iteration  29: 1860925.091 ops/s
# Warmup Iteration  30: 1862780.760 ops/s
Iteration   1: 1867098.071 ops/s
Iteration   2: 1882349.880 ops/s
Iteration   3: 1874240.549 ops/s
Iteration   4: 1865996.336 ops/s
Iteration   5: 1880517.423 ops/s
Iteration   6: 1860077.886 ops/s
Iteration   7: 1875275.565 ops/s
Iteration   8: 1852564.659 ops/s
Iteration   9: 1876812.797 ops/s
Iteration  10: 1870073.143 ops/s
Iteration  11: 1879269.429 ops/s
Iteration  12: 1876110.797 ops/s
Iteration  13: 1858745.717 ops/s
Iteration  14: 1869562.931 ops/s
Iteration  15: 1853856.698 ops/s
Iteration  16: 1851525.779 ops/s
Iteration  17: 1867221.016 ops/s
Iteration  18: 1872671.217 ops/s
Iteration  19: 1874779.189 ops/s
Iteration  20: 1871752.196 ops/s
Iteration  21: 1877006.508 ops/s
Iteration  22: 1869009.297 ops/s
Iteration  23: 1882812.873 ops/s
Iteration  24: 1878583.106 ops/s
Iteration  25: 1881621.124 ops/s
Iteration  26: 1863197.993 ops/s
Iteration  27: 1876445.099 ops/s
Iteration  28: 1870284.888 ops/s
Iteration  29: 1857131.058 ops/s
Iteration  30: 1865779.570 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getLast":
  1870079.093 ±(99.9%) 6038.725 ops/s [Average]
  (min, avg, max) = (1851525.779, 1870079.093, 1882812.873), stdev = 9038.480
  CI (99.9%): [1864040.368, 1876117.818] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_getLast  thrpt   30  1870079.093 ± 6038.725  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3712023.017 ops/s
# Warmup Iteration   2: 8646716.281 ops/s
# Warmup Iteration   3: 7241203.171 ops/s
# Warmup Iteration   4: 8747864.579 ops/s
# Warmup Iteration   5: 8678373.110 ops/s
# Warmup Iteration   6: 8715220.648 ops/s
# Warmup Iteration   7: 8689643.838 ops/s
# Warmup Iteration   8: 8723561.367 ops/s
# Warmup Iteration   9: 8716655.202 ops/s
# Warmup Iteration  10: 8653457.638 ops/s
# Warmup Iteration  11: 8679306.147 ops/s
# Warmup Iteration  12: 8721818.733 ops/s
# Warmup Iteration  13: 8665430.792 ops/s
# Warmup Iteration  14: 8662085.128 ops/s
# Warmup Iteration  15: 8539866.850 ops/s
# Warmup Iteration  16: 8657329.157 ops/s
# Warmup Iteration  17: 8702569.450 ops/s
# Warmup Iteration  18: 8682489.613 ops/s
# Warmup Iteration  19: 8702755.418 ops/s
# Warmup Iteration  20: 8714104.749 ops/s
# Warmup Iteration  21: 8722313.253 ops/s
# Warmup Iteration  22: 8727902.919 ops/s
# Warmup Iteration  23: 8694449.253 ops/s
# Warmup Iteration  24: 8660594.334 ops/s
# Warmup Iteration  25: 8682694.803 ops/s
# Warmup Iteration  26: 8680596.902 ops/s
# Warmup Iteration  27: 8752595.806 ops/s
# Warmup Iteration  28: 8724137.831 ops/s
# Warmup Iteration  29: 8649152.334 ops/s
# Warmup Iteration  30: 8733147.302 ops/s
Iteration   1: 8696608.202 ops/s
Iteration   2: 8599736.544 ops/s
Iteration   3: 8600395.461 ops/s
Iteration   4: 8638985.181 ops/s
Iteration   5: 8694361.675 ops/s
Iteration   6: 8718789.350 ops/s
Iteration   7: 8747584.498 ops/s
Iteration   8: 8713225.057 ops/s
Iteration   9: 8738516.400 ops/s
Iteration  10: 8613620.507 ops/s
Iteration  11: 8713721.283 ops/s
Iteration  12: 8759828.881 ops/s
Iteration  13: 8658487.158 ops/s
Iteration  14: 8707860.887 ops/s
Iteration  15: 8734674.555 ops/s
Iteration  16: 8712523.345 ops/s
Iteration  17: 8687950.389 ops/s
Iteration  18: 8682527.638 ops/s
Iteration  19: 8697164.916 ops/s
Iteration  20: 8712651.881 ops/s
Iteration  21: 8749524.642 ops/s
Iteration  22: 8722180.146 ops/s
Iteration  23: 8713596.683 ops/s
Iteration  24: 8700139.816 ops/s
Iteration  25: 8755294.259 ops/s
Iteration  26: 8729136.737 ops/s
Iteration  27: 8699314.839 ops/s
Iteration  28: 8638768.380 ops/s
Iteration  29: 8714669.408 ops/s
Iteration  30: 8715650.652 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getOnly":
  8698916.312 ±(99.9%) 28888.429 ops/s [Average]
  (min, avg, max) = (8599736.544, 8698916.312, 8759828.881), stdev = 43238.844
  CI (99.9%): [8670027.883, 8727804.742] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_getOnly  thrpt   30  8698916.312 ± 28888.429  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getOnly_throws_when_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getOnly_throws_when_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 532185.606 ops/s
# Warmup Iteration   2: 746793.565 ops/s
# Warmup Iteration   3: 886727.637 ops/s
# Warmup Iteration   4: 882243.025 ops/s
# Warmup Iteration   5: 896140.522 ops/s
# Warmup Iteration   6: 884764.158 ops/s
# Warmup Iteration   7: 814047.777 ops/s
# Warmup Iteration   8: 813426.673 ops/s
# Warmup Iteration   9: 894776.251 ops/s
# Warmup Iteration  10: 893378.388 ops/s
# Warmup Iteration  11: 888660.505 ops/s
# Warmup Iteration  12: 892816.540 ops/s
# Warmup Iteration  13: 891135.877 ops/s
# Warmup Iteration  14: 886207.976 ops/s
# Warmup Iteration  15: 883779.861 ops/s
# Warmup Iteration  16: 890782.277 ops/s
# Warmup Iteration  17: 941471.063 ops/s
# Warmup Iteration  18: 946692.401 ops/s
# Warmup Iteration  19: 939262.439 ops/s
# Warmup Iteration  20: 938727.712 ops/s
# Warmup Iteration  21: 940721.285 ops/s
# Warmup Iteration  22: 942817.478 ops/s
# Warmup Iteration  23: 947186.478 ops/s
# Warmup Iteration  24: 932824.875 ops/s
# Warmup Iteration  25: 932466.835 ops/s
# Warmup Iteration  26: 946058.730 ops/s
# Warmup Iteration  27: 940511.653 ops/s
# Warmup Iteration  28: 938437.630 ops/s
# Warmup Iteration  29: 945049.082 ops/s
# Warmup Iteration  30: 939847.560 ops/s
Iteration   1: 946807.984 ops/s
Iteration   2: 946355.863 ops/s
Iteration   3: 945126.059 ops/s
Iteration   4: 946644.762 ops/s
Iteration   5: 942709.578 ops/s
Iteration   6: 943311.282 ops/s
Iteration   7: 934148.636 ops/s
Iteration   8: 933059.808 ops/s
Iteration   9: 933332.007 ops/s
Iteration  10: 929413.987 ops/s
Iteration  11: 934834.650 ops/s
Iteration  12: 934183.280 ops/s
Iteration  13: 936548.547 ops/s
Iteration  14: 943432.234 ops/s
Iteration  15: 931083.960 ops/s
Iteration  16: 946752.589 ops/s
Iteration  17: 943703.384 ops/s
Iteration  18: 947392.637 ops/s
Iteration  19: 944748.746 ops/s
Iteration  20: 949022.115 ops/s
Iteration  21: 945642.630 ops/s
Iteration  22: 938034.453 ops/s
Iteration  23: 931502.255 ops/s
Iteration  24: 925078.608 ops/s
Iteration  25: 938715.247 ops/s
Iteration  26: 944502.988 ops/s
Iteration  27: 940547.558 ops/s
Iteration  28: 937925.195 ops/s
Iteration  29: 944962.982 ops/s
Iteration  30: 944163.892 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getOnly_throws_when_empty":
  940122.931 ±(99.9%) 4288.141 ops/s [Average]
  (min, avg, max) = (925078.608, 940122.931, 949022.115), stdev = 6418.289
  CI (99.9%): [935834.789, 944411.072] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_getOnly_throws_when_empty  thrpt   30  940122.931 ± 4288.141  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getOnly_throws_when_multiple_values$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getOnly_throws_when_multiple_values

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 539641.123 ops/s
# Warmup Iteration   2: 671406.299 ops/s
# Warmup Iteration   3: 844844.499 ops/s
# Warmup Iteration   4: 834178.830 ops/s
# Warmup Iteration   5: 849318.507 ops/s
# Warmup Iteration   6: 844801.015 ops/s
# Warmup Iteration   7: 846486.418 ops/s
# Warmup Iteration   8: 846264.300 ops/s
# Warmup Iteration   9: 706409.648 ops/s
# Warmup Iteration  10: 845414.181 ops/s
# Warmup Iteration  11: 852301.781 ops/s
# Warmup Iteration  12: 844985.316 ops/s
# Warmup Iteration  13: 850198.394 ops/s
# Warmup Iteration  14: 846954.742 ops/s
# Warmup Iteration  15: 847529.546 ops/s
# Warmup Iteration  16: 843812.972 ops/s
# Warmup Iteration  17: 894283.378 ops/s
# Warmup Iteration  18: 894872.177 ops/s
# Warmup Iteration  19: 895769.193 ops/s
# Warmup Iteration  20: 900729.099 ops/s
# Warmup Iteration  21: 895750.199 ops/s
# Warmup Iteration  22: 897601.922 ops/s
# Warmup Iteration  23: 888164.432 ops/s
# Warmup Iteration  24: 901274.746 ops/s
# Warmup Iteration  25: 897390.240 ops/s
# Warmup Iteration  26: 877920.179 ops/s
# Warmup Iteration  27: 902169.753 ops/s
# Warmup Iteration  28: 901156.615 ops/s
# Warmup Iteration  29: 895471.462 ops/s
# Warmup Iteration  30: 902007.477 ops/s
Iteration   1: 900902.095 ops/s
Iteration   2: 903183.492 ops/s
Iteration   3: 903526.102 ops/s
Iteration   4: 904767.126 ops/s
Iteration   5: 899951.673 ops/s
Iteration   6: 890800.557 ops/s
Iteration   7: 902954.427 ops/s
Iteration   8: 893239.189 ops/s
Iteration   9: 895291.033 ops/s
Iteration  10: 902295.770 ops/s
Iteration  11: 888278.475 ops/s
Iteration  12: 904198.971 ops/s
Iteration  13: 888985.006 ops/s
Iteration  14: 890534.901 ops/s
Iteration  15: 889329.739 ops/s
Iteration  16: 896135.462 ops/s
Iteration  17: 886726.731 ops/s
Iteration  18: 897480.585 ops/s
Iteration  19: 902448.363 ops/s
Iteration  20: 901704.163 ops/s
Iteration  21: 893814.600 ops/s
Iteration  22: 887133.867 ops/s
Iteration  23: 898000.802 ops/s
Iteration  24: 893316.495 ops/s
Iteration  25: 884694.949 ops/s
Iteration  26: 902682.458 ops/s
Iteration  27: 894696.277 ops/s
Iteration  28: 904004.832 ops/s
Iteration  29: 897197.772 ops/s
Iteration  30: 889815.157 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getOnly_throws_when_multiple_values":
  896269.702 ±(99.9%) 4172.328 ops/s [Average]
  (min, avg, max) = (884694.949, 896269.702, 904767.126), stdev = 6244.945
  CI (99.9%): [892097.374, 900442.031] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_getOnly_throws_when_multiple_values  thrpt   30  896269.702 ± 4172.328  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getOrDefault$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getOrDefault

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3231950.873 ops/s
# Warmup Iteration   2: 6849773.083 ops/s
# Warmup Iteration   3: 5732492.266 ops/s
# Warmup Iteration   4: 6862129.236 ops/s
# Warmup Iteration   5: 6855619.923 ops/s
# Warmup Iteration   6: 6869454.012 ops/s
# Warmup Iteration   7: 6869957.137 ops/s
# Warmup Iteration   8: 6833765.789 ops/s
# Warmup Iteration   9: 6894939.096 ops/s
# Warmup Iteration  10: 6878773.868 ops/s
# Warmup Iteration  11: 6854897.231 ops/s
# Warmup Iteration  12: 6908797.075 ops/s
# Warmup Iteration  13: 6904280.289 ops/s
# Warmup Iteration  14: 6845667.807 ops/s
# Warmup Iteration  15: 6842099.479 ops/s
# Warmup Iteration  16: 6871706.103 ops/s
# Warmup Iteration  17: 6875381.318 ops/s
# Warmup Iteration  18: 6848836.318 ops/s
# Warmup Iteration  19: 6879889.413 ops/s
# Warmup Iteration  20: 6899516.330 ops/s
# Warmup Iteration  21: 6886172.574 ops/s
# Warmup Iteration  22: 6859676.305 ops/s
# Warmup Iteration  23: 6898629.978 ops/s
# Warmup Iteration  24: 6871451.819 ops/s
# Warmup Iteration  25: 6902739.885 ops/s
# Warmup Iteration  26: 6875916.401 ops/s
# Warmup Iteration  27: 6866323.508 ops/s
# Warmup Iteration  28: 6896467.157 ops/s
# Warmup Iteration  29: 6936841.202 ops/s
# Warmup Iteration  30: 6820433.425 ops/s
Iteration   1: 6892315.074 ops/s
Iteration   2: 6946006.867 ops/s
Iteration   3: 6822674.779 ops/s
Iteration   4: 6891126.849 ops/s
Iteration   5: 6898989.262 ops/s
Iteration   6: 6872405.941 ops/s
Iteration   7: 6900839.072 ops/s
Iteration   8: 6861225.735 ops/s
Iteration   9: 6852261.314 ops/s
Iteration  10: 6911067.541 ops/s
Iteration  11: 6884867.807 ops/s
Iteration  12: 6902816.375 ops/s
Iteration  13: 6876436.379 ops/s
Iteration  14: 6894702.404 ops/s
Iteration  15: 6895492.554 ops/s
Iteration  16: 6917094.179 ops/s
Iteration  17: 6843539.974 ops/s
Iteration  18: 6869215.419 ops/s
Iteration  19: 6907289.715 ops/s
Iteration  20: 6863992.407 ops/s
Iteration  21: 6886441.850 ops/s
Iteration  22: 6845035.155 ops/s
Iteration  23: 6876423.827 ops/s
Iteration  24: 6943318.307 ops/s
Iteration  25: 6927163.082 ops/s
Iteration  26: 6919249.260 ops/s
Iteration  27: 6903990.815 ops/s
Iteration  28: 6839789.671 ops/s
Iteration  29: 6921764.668 ops/s
Iteration  30: 6863870.859 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_getOrDefault":
  6887713.571 ±(99.9%) 20445.114 ops/s [Average]
  (min, avg, max) = (6822674.779, 6887713.571, 6946006.867), stdev = 30601.286
  CI (99.9%): [6867268.458, 6908158.685] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_getOrDefault  thrpt   30  6887713.571 ± 20445.114  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 251709.526 ops/s
# Warmup Iteration   2: 585336.373 ops/s
# Warmup Iteration   3: 611992.809 ops/s
# Warmup Iteration   4: 560822.556 ops/s
# Warmup Iteration   5: 574712.998 ops/s
# Warmup Iteration   6: 613737.870 ops/s
# Warmup Iteration   7: 615948.487 ops/s
# Warmup Iteration   8: 618646.738 ops/s
# Warmup Iteration   9: 620539.005 ops/s
# Warmup Iteration  10: 613141.488 ops/s
# Warmup Iteration  11: 618735.048 ops/s
# Warmup Iteration  12: 618910.550 ops/s
# Warmup Iteration  13: 618241.877 ops/s
# Warmup Iteration  14: 616738.287 ops/s
# Warmup Iteration  15: 621202.998 ops/s
# Warmup Iteration  16: 615839.786 ops/s
# Warmup Iteration  17: 616100.866 ops/s
# Warmup Iteration  18: 619040.826 ops/s
# Warmup Iteration  19: 614915.098 ops/s
# Warmup Iteration  20: 615894.797 ops/s
# Warmup Iteration  21: 612959.391 ops/s
# Warmup Iteration  22: 611416.551 ops/s
# Warmup Iteration  23: 615124.927 ops/s
# Warmup Iteration  24: 615843.923 ops/s
# Warmup Iteration  25: 615329.208 ops/s
# Warmup Iteration  26: 617130.107 ops/s
# Warmup Iteration  27: 618959.020 ops/s
# Warmup Iteration  28: 614732.461 ops/s
# Warmup Iteration  29: 610452.333 ops/s
# Warmup Iteration  30: 616138.263 ops/s
Iteration   1: 616200.249 ops/s
Iteration   2: 615097.955 ops/s
Iteration   3: 612502.613 ops/s
Iteration   4: 615683.505 ops/s
Iteration   5: 617888.708 ops/s
Iteration   6: 615962.236 ops/s
Iteration   7: 622039.250 ops/s
Iteration   8: 619802.111 ops/s
Iteration   9: 618070.148 ops/s
Iteration  10: 618727.964 ops/s
Iteration  11: 616976.206 ops/s
Iteration  12: 615437.083 ops/s
Iteration  13: 617373.408 ops/s
Iteration  14: 617708.346 ops/s
Iteration  15: 622154.621 ops/s
Iteration  16: 615274.722 ops/s
Iteration  17: 621034.863 ops/s
Iteration  18: 616826.582 ops/s
Iteration  19: 611666.146 ops/s
Iteration  20: 613602.511 ops/s
Iteration  21: 619661.691 ops/s
Iteration  22: 617293.536 ops/s
Iteration  23: 617613.338 ops/s
Iteration  24: 608955.838 ops/s
Iteration  25: 617589.259 ops/s
Iteration  26: 618586.386 ops/s
Iteration  27: 614784.303 ops/s
Iteration  28: 618581.368 ops/s
Iteration  29: 617294.245 ops/s
Iteration  30: 614903.718 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_groupBy":
  616843.097 ±(99.9%) 1924.682 ops/s [Average]
  (min, avg, max) = (608955.838, 616843.097, 622154.621), stdev = 2880.773
  CI (99.9%): [614918.415, 618767.779] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_groupBy  thrpt   30  616843.097 ± 1924.682  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 144795.092 ops/s
# Warmup Iteration   2: 305976.945 ops/s
# Warmup Iteration   3: 334400.367 ops/s
# Warmup Iteration   4: 335778.499 ops/s
# Warmup Iteration   5: 283581.693 ops/s
# Warmup Iteration   6: 336713.425 ops/s
# Warmup Iteration   7: 335846.675 ops/s
# Warmup Iteration   8: 336049.369 ops/s
# Warmup Iteration   9: 338941.677 ops/s
# Warmup Iteration  10: 333888.002 ops/s
# Warmup Iteration  11: 335180.368 ops/s
# Warmup Iteration  12: 338771.006 ops/s
# Warmup Iteration  13: 337719.328 ops/s
# Warmup Iteration  14: 336631.566 ops/s
# Warmup Iteration  15: 336642.344 ops/s
# Warmup Iteration  16: 336231.407 ops/s
# Warmup Iteration  17: 334900.576 ops/s
# Warmup Iteration  18: 337953.966 ops/s
# Warmup Iteration  19: 338528.414 ops/s
# Warmup Iteration  20: 337636.307 ops/s
# Warmup Iteration  21: 336923.231 ops/s
# Warmup Iteration  22: 335424.551 ops/s
# Warmup Iteration  23: 336736.434 ops/s
# Warmup Iteration  24: 336810.900 ops/s
# Warmup Iteration  25: 338142.815 ops/s
# Warmup Iteration  26: 339139.982 ops/s
# Warmup Iteration  27: 335132.410 ops/s
# Warmup Iteration  28: 337812.402 ops/s
# Warmup Iteration  29: 337300.842 ops/s
# Warmup Iteration  30: 334205.600 ops/s
Iteration   1: 338915.226 ops/s
Iteration   2: 335766.334 ops/s
Iteration   3: 336963.535 ops/s
Iteration   4: 338733.364 ops/s
Iteration   5: 338639.352 ops/s
Iteration   6: 338330.507 ops/s
Iteration   7: 340630.713 ops/s
Iteration   8: 337866.586 ops/s
Iteration   9: 338119.083 ops/s
Iteration  10: 337616.021 ops/s
Iteration  11: 337761.839 ops/s
Iteration  12: 336459.251 ops/s
Iteration  13: 334133.901 ops/s
Iteration  14: 339236.967 ops/s
Iteration  15: 338020.865 ops/s
Iteration  16: 336932.072 ops/s
Iteration  17: 335860.915 ops/s
Iteration  18: 337721.461 ops/s
Iteration  19: 336766.960 ops/s
Iteration  20: 336923.372 ops/s
Iteration  21: 338156.096 ops/s
Iteration  22: 330329.799 ops/s
Iteration  23: 334297.501 ops/s
Iteration  24: 338441.646 ops/s
Iteration  25: 338521.599 ops/s
Iteration  26: 338731.823 ops/s
Iteration  27: 335356.011 ops/s
Iteration  28: 336948.605 ops/s
Iteration  29: 337561.132 ops/s
Iteration  30: 338040.297 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_groupByEach":
  337259.428 ±(99.9%) 1288.386 ops/s [Average]
  (min, avg, max) = (330329.799, 337259.428, 340630.713), stdev = 1928.396
  CI (99.9%): [335971.041, 338547.814] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_groupByEach  thrpt   30  337259.428 ± 1288.386  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 965765.838 ops/s
# Warmup Iteration   2: 2189328.645 ops/s
# Warmup Iteration   3: 2190095.351 ops/s
# Warmup Iteration   4: 1824577.513 ops/s
# Warmup Iteration   5: 2202703.951 ops/s
# Warmup Iteration   6: 2177265.600 ops/s
# Warmup Iteration   7: 2208444.998 ops/s
# Warmup Iteration   8: 2192609.844 ops/s
# Warmup Iteration   9: 2190439.762 ops/s
# Warmup Iteration  10: 2209300.981 ops/s
# Warmup Iteration  11: 2213703.288 ops/s
# Warmup Iteration  12: 2206246.791 ops/s
# Warmup Iteration  13: 2204784.319 ops/s
# Warmup Iteration  14: 2206129.652 ops/s
# Warmup Iteration  15: 2201198.471 ops/s
# Warmup Iteration  16: 2191540.497 ops/s
# Warmup Iteration  17: 2206322.873 ops/s
# Warmup Iteration  18: 2194610.239 ops/s
# Warmup Iteration  19: 2188570.624 ops/s
# Warmup Iteration  20: 2206805.060 ops/s
# Warmup Iteration  21: 2189249.883 ops/s
# Warmup Iteration  22: 2190598.418 ops/s
# Warmup Iteration  23: 2206853.151 ops/s
# Warmup Iteration  24: 2192183.627 ops/s
# Warmup Iteration  25: 2193369.740 ops/s
# Warmup Iteration  26: 2203292.113 ops/s
# Warmup Iteration  27: 2197686.675 ops/s
# Warmup Iteration  28: 2188233.205 ops/s
# Warmup Iteration  29: 2188498.145 ops/s
# Warmup Iteration  30: 2203379.371 ops/s
Iteration   1: 2184618.704 ops/s
Iteration   2: 2192088.554 ops/s
Iteration   3: 2185903.623 ops/s
Iteration   4: 2194605.514 ops/s
Iteration   5: 2200611.549 ops/s
Iteration   6: 2184469.384 ops/s
Iteration   7: 2189428.941 ops/s
Iteration   8: 2201627.697 ops/s
Iteration   9: 2196351.951 ops/s
Iteration  10: 2198076.281 ops/s
Iteration  11: 2186736.549 ops/s
Iteration  12: 2212804.383 ops/s
Iteration  13: 2206611.710 ops/s
Iteration  14: 2208283.270 ops/s
Iteration  15: 2194303.775 ops/s
Iteration  16: 2195575.539 ops/s
Iteration  17: 2216066.757 ops/s
Iteration  18: 2212613.046 ops/s
Iteration  19: 2216446.620 ops/s
Iteration  20: 2208130.989 ops/s
Iteration  21: 2195927.478 ops/s
Iteration  22: 2208457.188 ops/s
Iteration  23: 2199348.004 ops/s
Iteration  24: 2208160.716 ops/s
Iteration  25: 2191070.235 ops/s
Iteration  26: 2214251.774 ops/s
Iteration  27: 2190334.200 ops/s
Iteration  28: 2216940.477 ops/s
Iteration  29: 2205763.712 ops/s
Iteration  30: 2210395.375 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_groupByUniqueKey":
  2200866.800 ±(99.9%) 6902.272 ops/s [Average]
  (min, avg, max) = (2184469.384, 2200866.800, 2216940.477), stdev = 10330.997
  CI (99.9%): [2193964.527, 2207769.072] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  2200866.800 ± 6902.272  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1226750.068 ops/s
# Warmup Iteration   2: 2752904.959 ops/s
# Warmup Iteration   3: 2726206.508 ops/s
# Warmup Iteration   4: 2315333.051 ops/s
# Warmup Iteration   5: 2762084.267 ops/s
# Warmup Iteration   6: 2785121.076 ops/s
# Warmup Iteration   7: 2767573.533 ops/s
# Warmup Iteration   8: 2800550.758 ops/s
# Warmup Iteration   9: 2762447.457 ops/s
# Warmup Iteration  10: 2777521.671 ops/s
# Warmup Iteration  11: 2782796.887 ops/s
# Warmup Iteration  12: 2791979.600 ops/s
# Warmup Iteration  13: 2765033.159 ops/s
# Warmup Iteration  14: 2794562.254 ops/s
# Warmup Iteration  15: 2760429.225 ops/s
# Warmup Iteration  16: 2755722.306 ops/s
# Warmup Iteration  17: 2764630.651 ops/s
# Warmup Iteration  18: 2780327.917 ops/s
# Warmup Iteration  19: 2753746.592 ops/s
# Warmup Iteration  20: 2766493.204 ops/s
# Warmup Iteration  21: 2769026.790 ops/s
# Warmup Iteration  22: 2772339.271 ops/s
# Warmup Iteration  23: 2792577.879 ops/s
# Warmup Iteration  24: 2773171.185 ops/s
# Warmup Iteration  25: 2772945.847 ops/s
# Warmup Iteration  26: 2762475.357 ops/s
# Warmup Iteration  27: 2743640.915 ops/s
# Warmup Iteration  28: 2762344.333 ops/s
# Warmup Iteration  29: 2770599.183 ops/s
# Warmup Iteration  30: 2777271.610 ops/s
Iteration   1: 2788477.677 ops/s
Iteration   2: 2787390.240 ops/s
Iteration   3: 2769152.148 ops/s
Iteration   4: 2784494.755 ops/s
Iteration   5: 2750397.211 ops/s
Iteration   6: 2795199.633 ops/s
Iteration   7: 2793692.355 ops/s
Iteration   8: 2738495.440 ops/s
Iteration   9: 2781889.680 ops/s
Iteration  10: 2750863.410 ops/s
Iteration  11: 2758657.709 ops/s
Iteration  12: 2779737.696 ops/s
Iteration  13: 2787351.134 ops/s
Iteration  14: 2760081.904 ops/s
Iteration  15: 2760819.080 ops/s
Iteration  16: 2772009.307 ops/s
Iteration  17: 2773206.570 ops/s
Iteration  18: 2742718.702 ops/s
Iteration  19: 2771811.534 ops/s
Iteration  20: 2801732.536 ops/s
Iteration  21: 2806481.461 ops/s
Iteration  22: 2792484.016 ops/s
Iteration  23: 2796997.825 ops/s
Iteration  24: 2769936.019 ops/s
Iteration  25: 2753928.585 ops/s
Iteration  26: 2772336.342 ops/s
Iteration  27: 2755496.829 ops/s
Iteration  28: 2740652.058 ops/s
Iteration  29: 2773329.187 ops/s
Iteration  30: 2785497.857 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_groupByUniqueKey_target":
  2773177.297 ±(99.9%) 12567.116 ops/s [Average]
  (min, avg, max) = (2738495.440, 2773177.297, 2806481.461), stdev = 18809.868
  CI (99.9%): [2760610.181, 2785744.412] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  2773177.297 ± 12567.116  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_groupByUniqueKey_target_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_groupByUniqueKey_target_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 431742.293 ops/s
# Warmup Iteration   2: 529449.318 ops/s
# Warmup Iteration   3: 670726.198 ops/s
# Warmup Iteration   4: 673817.346 ops/s
# Warmup Iteration   5: 667093.497 ops/s
# Warmup Iteration   6: 671570.596 ops/s
# Warmup Iteration   7: 673722.976 ops/s
# Warmup Iteration   8: 668044.529 ops/s
# Warmup Iteration   9: 557422.953 ops/s
# Warmup Iteration  10: 668401.894 ops/s
# Warmup Iteration  11: 671666.078 ops/s
# Warmup Iteration  12: 672279.070 ops/s
# Warmup Iteration  13: 666190.833 ops/s
# Warmup Iteration  14: 671808.880 ops/s
# Warmup Iteration  15: 667985.106 ops/s
# Warmup Iteration  16: 663977.572 ops/s
# Warmup Iteration  17: 698165.160 ops/s
# Warmup Iteration  18: 701238.128 ops/s
# Warmup Iteration  19: 695582.999 ops/s
# Warmup Iteration  20: 698505.370 ops/s
# Warmup Iteration  21: 694526.935 ops/s
# Warmup Iteration  22: 696940.110 ops/s
# Warmup Iteration  23: 696636.863 ops/s
# Warmup Iteration  24: 694562.612 ops/s
# Warmup Iteration  25: 697308.434 ops/s
# Warmup Iteration  26: 696345.102 ops/s
# Warmup Iteration  27: 689468.460 ops/s
# Warmup Iteration  28: 698323.334 ops/s
# Warmup Iteration  29: 695838.335 ops/s
# Warmup Iteration  30: 698005.933 ops/s
Iteration   1: 696214.486 ops/s
Iteration   2: 693305.078 ops/s
Iteration   3: 695724.753 ops/s
Iteration   4: 701775.638 ops/s
Iteration   5: 697816.337 ops/s
Iteration   6: 697999.629 ops/s
Iteration   7: 700001.153 ops/s
Iteration   8: 685409.829 ops/s
Iteration   9: 695757.561 ops/s
Iteration  10: 698587.819 ops/s
Iteration  11: 692157.352 ops/s
Iteration  12: 693748.882 ops/s
Iteration  13: 690819.978 ops/s
Iteration  14: 701985.912 ops/s
Iteration  15: 701794.831 ops/s
Iteration  16: 699157.534 ops/s
Iteration  17: 697245.510 ops/s
Iteration  18: 699385.872 ops/s
Iteration  19: 699165.457 ops/s
Iteration  20: 698251.211 ops/s
Iteration  21: 694055.995 ops/s
Iteration  22: 700489.507 ops/s
Iteration  23: 696114.143 ops/s
Iteration  24: 697746.530 ops/s
Iteration  25: 700147.284 ops/s
Iteration  26: 695545.821 ops/s
Iteration  27: 695088.966 ops/s
Iteration  28: 695454.911 ops/s
Iteration  29: 698081.382 ops/s
Iteration  30: 700151.752 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_groupByUniqueKey_target_throws":
  696972.704 ±(99.9%) 2405.154 ops/s [Average]
  (min, avg, max) = (685409.829, 696972.704, 701985.912), stdev = 3599.921
  CI (99.9%): [694567.550, 699377.857] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_groupByUniqueKey_target_throws  thrpt   30  696972.704 ± 2405.154  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_groupByUniqueKey_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_groupByUniqueKey_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 423286.011 ops/s
# Warmup Iteration   2: 518370.738 ops/s
# Warmup Iteration   3: 656665.696 ops/s
# Warmup Iteration   4: 649744.080 ops/s
# Warmup Iteration   5: 654921.382 ops/s
# Warmup Iteration   6: 652830.093 ops/s
# Warmup Iteration   7: 654831.782 ops/s
# Warmup Iteration   8: 652746.650 ops/s
# Warmup Iteration   9: 544359.752 ops/s
# Warmup Iteration  10: 652105.399 ops/s
# Warmup Iteration  11: 652547.735 ops/s
# Warmup Iteration  12: 657137.383 ops/s
# Warmup Iteration  13: 657884.315 ops/s
# Warmup Iteration  14: 652886.514 ops/s
# Warmup Iteration  15: 656502.313 ops/s
# Warmup Iteration  16: 653435.258 ops/s
# Warmup Iteration  17: 682117.477 ops/s
# Warmup Iteration  18: 676192.861 ops/s
# Warmup Iteration  19: 682182.013 ops/s
# Warmup Iteration  20: 680282.871 ops/s
# Warmup Iteration  21: 679601.224 ops/s
# Warmup Iteration  22: 681296.245 ops/s
# Warmup Iteration  23: 685129.111 ops/s
# Warmup Iteration  24: 682650.713 ops/s
# Warmup Iteration  25: 677354.165 ops/s
# Warmup Iteration  26: 683059.395 ops/s
# Warmup Iteration  27: 682448.908 ops/s
# Warmup Iteration  28: 677565.886 ops/s
# Warmup Iteration  29: 684438.925 ops/s
# Warmup Iteration  30: 680096.294 ops/s
Iteration   1: 675199.877 ops/s
Iteration   2: 687368.038 ops/s
Iteration   3: 687316.194 ops/s
Iteration   4: 679996.510 ops/s
Iteration   5: 680972.262 ops/s
Iteration   6: 688993.085 ops/s
Iteration   7: 681940.391 ops/s
Iteration   8: 684381.670 ops/s
Iteration   9: 680680.588 ops/s
Iteration  10: 684493.960 ops/s
Iteration  11: 685771.998 ops/s
Iteration  12: 687118.604 ops/s
Iteration  13: 686840.106 ops/s
Iteration  14: 680272.666 ops/s
Iteration  15: 686034.317 ops/s
Iteration  16: 680528.364 ops/s
Iteration  17: 679993.296 ops/s
Iteration  18: 679275.085 ops/s
Iteration  19: 686316.891 ops/s
Iteration  20: 688947.965 ops/s
Iteration  21: 681984.184 ops/s
Iteration  22: 677432.618 ops/s
Iteration  23: 677082.394 ops/s
Iteration  24: 679219.057 ops/s
Iteration  25: 681023.687 ops/s
Iteration  26: 680702.924 ops/s
Iteration  27: 681779.209 ops/s
Iteration  28: 682183.000 ops/s
Iteration  29: 684853.511 ops/s
Iteration  30: 682004.338 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_groupByUniqueKey_throws":
  682690.226 ±(99.9%) 2430.913 ops/s [Average]
  (min, avg, max) = (675199.877, 682690.226, 688993.085), stdev = 3638.476
  CI (99.9%): [680259.313, 685121.139] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_groupByUniqueKey_throws  thrpt   30  682690.226 ± 2430.913  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_ifPresentApply$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_ifPresentApply

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2911768.720 ops/s
# Warmup Iteration   2: 6140259.642 ops/s
# Warmup Iteration   3: 5072816.604 ops/s
# Warmup Iteration   4: 6205383.992 ops/s
# Warmup Iteration   5: 6197934.159 ops/s
# Warmup Iteration   6: 6196921.117 ops/s
# Warmup Iteration   7: 6159365.250 ops/s
# Warmup Iteration   8: 6183939.027 ops/s
# Warmup Iteration   9: 6184571.025 ops/s
# Warmup Iteration  10: 6182244.932 ops/s
# Warmup Iteration  11: 6158633.645 ops/s
# Warmup Iteration  12: 6234399.601 ops/s
# Warmup Iteration  13: 6198223.275 ops/s
# Warmup Iteration  14: 6218523.736 ops/s
# Warmup Iteration  15: 6140264.795 ops/s
# Warmup Iteration  16: 6105431.642 ops/s
# Warmup Iteration  17: 6216665.278 ops/s
# Warmup Iteration  18: 6151677.703 ops/s
# Warmup Iteration  19: 6172362.521 ops/s
# Warmup Iteration  20: 6204550.296 ops/s
# Warmup Iteration  21: 6190655.025 ops/s
# Warmup Iteration  22: 6172982.417 ops/s
# Warmup Iteration  23: 6230181.788 ops/s
# Warmup Iteration  24: 6194234.819 ops/s
# Warmup Iteration  25: 6106457.360 ops/s
# Warmup Iteration  26: 6170962.714 ops/s
# Warmup Iteration  27: 6183743.260 ops/s
# Warmup Iteration  28: 6169875.630 ops/s
# Warmup Iteration  29: 6229090.149 ops/s
# Warmup Iteration  30: 6192067.950 ops/s
Iteration   1: 6214935.606 ops/s
Iteration   2: 6174059.843 ops/s
Iteration   3: 6187584.961 ops/s
Iteration   4: 6203645.971 ops/s
Iteration   5: 6191272.536 ops/s
Iteration   6: 6161797.700 ops/s
Iteration   7: 6185645.390 ops/s
Iteration   8: 6206567.424 ops/s
Iteration   9: 6225163.991 ops/s
Iteration  10: 6184036.232 ops/s
Iteration  11: 6162136.396 ops/s
Iteration  12: 6257259.690 ops/s
Iteration  13: 6193744.183 ops/s
Iteration  14: 6195944.170 ops/s
Iteration  15: 6151686.564 ops/s
Iteration  16: 6233804.785 ops/s
Iteration  17: 6192407.757 ops/s
Iteration  18: 6188779.195 ops/s
Iteration  19: 6148970.578 ops/s
Iteration  20: 6217957.767 ops/s
Iteration  21: 6115146.190 ops/s
Iteration  22: 6114415.374 ops/s
Iteration  23: 6147623.094 ops/s
Iteration  24: 6072274.563 ops/s
Iteration  25: 6254003.338 ops/s
Iteration  26: 6201320.955 ops/s
Iteration  27: 6178698.112 ops/s
Iteration  28: 6188832.342 ops/s
Iteration  29: 6189592.306 ops/s
Iteration  30: 6157049.226 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_ifPresentApply":
  6183211.875 ±(99.9%) 26512.759 ops/s [Average]
  (min, avg, max) = (6072274.563, 6183211.875, 6257259.690), stdev = 39683.052
  CI (99.9%): [6156699.116, 6209724.633] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_ifPresentApply  thrpt   30  6183211.875 ± 26512.759  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1822736.680 ops/s
# Warmup Iteration   2: 4270983.446 ops/s
# Warmup Iteration   3: 4244652.711 ops/s
# Warmup Iteration   4: 3521600.492 ops/s
# Warmup Iteration   5: 4261155.379 ops/s
# Warmup Iteration   6: 4273283.223 ops/s
# Warmup Iteration   7: 4209788.304 ops/s
# Warmup Iteration   8: 4216846.450 ops/s
# Warmup Iteration   9: 4225449.896 ops/s
# Warmup Iteration  10: 4259782.466 ops/s
# Warmup Iteration  11: 4253693.329 ops/s
# Warmup Iteration  12: 4252031.054 ops/s
# Warmup Iteration  13: 4252896.375 ops/s
# Warmup Iteration  14: 4268809.561 ops/s
# Warmup Iteration  15: 4258133.305 ops/s
# Warmup Iteration  16: 4257372.815 ops/s
# Warmup Iteration  17: 4276321.354 ops/s
# Warmup Iteration  18: 4262743.039 ops/s
# Warmup Iteration  19: 4275611.619 ops/s
# Warmup Iteration  20: 4260836.906 ops/s
# Warmup Iteration  21: 4295834.679 ops/s
# Warmup Iteration  22: 4273551.940 ops/s
# Warmup Iteration  23: 4271849.376 ops/s
# Warmup Iteration  24: 4268430.927 ops/s
# Warmup Iteration  25: 4263151.799 ops/s
# Warmup Iteration  26: 4237546.420 ops/s
# Warmup Iteration  27: 4283115.084 ops/s
# Warmup Iteration  28: 4291228.724 ops/s
# Warmup Iteration  29: 4274218.404 ops/s
# Warmup Iteration  30: 4240336.397 ops/s
Iteration   1: 4296140.915 ops/s
Iteration   2: 4229760.074 ops/s
Iteration   3: 4225291.869 ops/s
Iteration   4: 4274854.626 ops/s
Iteration   5: 4246337.424 ops/s
Iteration   6: 4287218.965 ops/s
Iteration   7: 4275753.948 ops/s
Iteration   8: 4276994.536 ops/s
Iteration   9: 4264329.813 ops/s
Iteration  10: 4281380.676 ops/s
Iteration  11: 4254474.845 ops/s
Iteration  12: 4289214.653 ops/s
Iteration  13: 4243014.293 ops/s
Iteration  14: 4228170.186 ops/s
Iteration  15: 4203870.029 ops/s
Iteration  16: 4291095.219 ops/s
Iteration  17: 4228281.081 ops/s
Iteration  18: 4245842.675 ops/s
Iteration  19: 4248798.903 ops/s
Iteration  20: 4262354.980 ops/s
Iteration  21: 4247653.438 ops/s
Iteration  22: 4267680.215 ops/s
Iteration  23: 4232359.037 ops/s
Iteration  24: 4244300.944 ops/s
Iteration  25: 4264036.933 ops/s
Iteration  26: 4238841.014 ops/s
Iteration  27: 4230085.274 ops/s
Iteration  28: 4218681.884 ops/s
Iteration  29: 4259658.181 ops/s
Iteration  30: 4304383.128 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_injectInto":
  4255361.992 ±(99.9%) 17028.937 ops/s [Average]
  (min, avg, max) = (4203870.029, 4255361.992, 4304383.128), stdev = 25488.113
  CI (99.9%): [4238333.055, 4272390.929] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_injectInto  thrpt   30  4255361.992 ± 17028.937  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2452865.597 ops/s
# Warmup Iteration   2: 5467268.990 ops/s
# Warmup Iteration   3: 4517788.595 ops/s
# Warmup Iteration   4: 5518742.609 ops/s
# Warmup Iteration   5: 5505151.857 ops/s
# Warmup Iteration   6: 5536616.560 ops/s
# Warmup Iteration   7: 5489881.304 ops/s
# Warmup Iteration   8: 5505567.288 ops/s
# Warmup Iteration   9: 5526464.348 ops/s
# Warmup Iteration  10: 5517780.138 ops/s
# Warmup Iteration  11: 5490456.033 ops/s
# Warmup Iteration  12: 5504976.266 ops/s
# Warmup Iteration  13: 5488587.554 ops/s
# Warmup Iteration  14: 5504180.149 ops/s
# Warmup Iteration  15: 5476206.825 ops/s
# Warmup Iteration  16: 5496139.288 ops/s
# Warmup Iteration  17: 5441462.260 ops/s
# Warmup Iteration  18: 5515411.848 ops/s
# Warmup Iteration  19: 5511724.775 ops/s
# Warmup Iteration  20: 5498744.499 ops/s
# Warmup Iteration  21: 5490665.405 ops/s
# Warmup Iteration  22: 5521199.346 ops/s
# Warmup Iteration  23: 5477144.658 ops/s
# Warmup Iteration  24: 5479375.214 ops/s
# Warmup Iteration  25: 5497892.914 ops/s
# Warmup Iteration  26: 5507294.554 ops/s
# Warmup Iteration  27: 5479823.424 ops/s
# Warmup Iteration  28: 5487328.921 ops/s
# Warmup Iteration  29: 5484138.500 ops/s
# Warmup Iteration  30: 5515542.876 ops/s
Iteration   1: 5525020.964 ops/s
Iteration   2: 5509232.005 ops/s
Iteration   3: 5476472.757 ops/s
Iteration   4: 5492667.963 ops/s
Iteration   5: 5531764.907 ops/s
Iteration   6: 5474288.414 ops/s
Iteration   7: 5478572.473 ops/s
Iteration   8: 5320191.036 ops/s
Iteration   9: 5203128.794 ops/s
Iteration  10: 5513596.148 ops/s
Iteration  11: 5476480.083 ops/s
Iteration  12: 5526998.957 ops/s
Iteration  13: 5520679.347 ops/s
Iteration  14: 5489193.461 ops/s
Iteration  15: 5498058.854 ops/s
Iteration  16: 5533567.073 ops/s
Iteration  17: 5497170.912 ops/s
Iteration  18: 5470080.698 ops/s
Iteration  19: 5455996.533 ops/s
Iteration  20: 5514333.375 ops/s
Iteration  21: 5518894.489 ops/s
Iteration  22: 5524686.608 ops/s
Iteration  23: 5479791.227 ops/s
Iteration  24: 5535310.715 ops/s
Iteration  25: 5551665.666 ops/s
Iteration  26: 5489956.101 ops/s
Iteration  27: 5499907.881 ops/s
Iteration  28: 5513554.140 ops/s
Iteration  29: 5516102.459 ops/s
Iteration  30: 5491397.606 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_injectIntoDouble":
  5487625.388 ±(99.9%) 44974.948 ops/s [Average]
  (min, avg, max) = (5203128.794, 5487625.388, 5551665.666), stdev = 67316.389
  CI (99.9%): [5442650.441, 5532600.336] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  5487625.388 ± 44974.948  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2639425.920 ops/s
# Warmup Iteration   2: 5625703.421 ops/s
# Warmup Iteration   3: 4756272.850 ops/s
# Warmup Iteration   4: 5678127.132 ops/s
# Warmup Iteration   5: 5667111.169 ops/s
# Warmup Iteration   6: 5671335.670 ops/s
# Warmup Iteration   7: 5677216.487 ops/s
# Warmup Iteration   8: 5672089.697 ops/s
# Warmup Iteration   9: 5674888.069 ops/s
# Warmup Iteration  10: 5694000.059 ops/s
# Warmup Iteration  11: 5678183.883 ops/s
# Warmup Iteration  12: 5637859.301 ops/s
# Warmup Iteration  13: 5673648.243 ops/s
# Warmup Iteration  14: 5639929.162 ops/s
# Warmup Iteration  15: 5657352.580 ops/s
# Warmup Iteration  16: 5698762.073 ops/s
# Warmup Iteration  17: 5674911.651 ops/s
# Warmup Iteration  18: 5664476.378 ops/s
# Warmup Iteration  19: 5671211.456 ops/s
# Warmup Iteration  20: 5699751.635 ops/s
# Warmup Iteration  21: 5698630.473 ops/s
# Warmup Iteration  22: 5703984.187 ops/s
# Warmup Iteration  23: 5721470.437 ops/s
# Warmup Iteration  24: 5680166.241 ops/s
# Warmup Iteration  25: 5687980.227 ops/s
# Warmup Iteration  26: 5679606.728 ops/s
# Warmup Iteration  27: 5657336.837 ops/s
# Warmup Iteration  28: 5696896.589 ops/s
# Warmup Iteration  29: 5678140.780 ops/s
# Warmup Iteration  30: 5678823.449 ops/s
Iteration   1: 5684792.628 ops/s
Iteration   2: 5617240.511 ops/s
Iteration   3: 5663621.316 ops/s
Iteration   4: 5686020.376 ops/s
Iteration   5: 5693973.714 ops/s
Iteration   6: 5661347.687 ops/s
Iteration   7: 5686843.194 ops/s
Iteration   8: 5675478.194 ops/s
Iteration   9: 5703484.530 ops/s
Iteration  10: 5705033.865 ops/s
Iteration  11: 5697561.560 ops/s
Iteration  12: 5712889.261 ops/s
Iteration  13: 5643923.285 ops/s
Iteration  14: 5681250.701 ops/s
Iteration  15: 5698795.161 ops/s
Iteration  16: 5680626.688 ops/s
Iteration  17: 5666480.496 ops/s
Iteration  18: 5689571.130 ops/s
Iteration  19: 5728976.909 ops/s
Iteration  20: 5681998.233 ops/s
Iteration  21: 5687569.325 ops/s
Iteration  22: 5586459.329 ops/s
Iteration  23: 5619886.483 ops/s
Iteration  24: 5667208.195 ops/s
Iteration  25: 5712986.336 ops/s
Iteration  26: 5707218.383 ops/s
Iteration  27: 5703715.198 ops/s
Iteration  28: 5739744.328 ops/s
Iteration  29: 5668917.752 ops/s
Iteration  30: 5528893.720 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_injectIntoFloat":
  5676083.616 ±(99.9%) 28513.415 ops/s [Average]
  (min, avg, max) = (5528893.720, 5676083.616, 5739744.328), stdev = 42677.540
  CI (99.9%): [5647570.202, 5704597.031] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  5676083.616 ± 28513.415  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2622804.293 ops/s
# Warmup Iteration   2: 5593871.048 ops/s
# Warmup Iteration   3: 4726936.613 ops/s
# Warmup Iteration   4: 5606728.042 ops/s
# Warmup Iteration   5: 5617761.354 ops/s
# Warmup Iteration   6: 5616886.042 ops/s
# Warmup Iteration   7: 5633314.572 ops/s
# Warmup Iteration   8: 5588283.806 ops/s
# Warmup Iteration   9: 5572179.435 ops/s
# Warmup Iteration  10: 5637574.701 ops/s
# Warmup Iteration  11: 5570582.047 ops/s
# Warmup Iteration  12: 5609378.255 ops/s
# Warmup Iteration  13: 5603094.785 ops/s
# Warmup Iteration  14: 5582005.526 ops/s
# Warmup Iteration  15: 5579667.614 ops/s
# Warmup Iteration  16: 5590203.241 ops/s
# Warmup Iteration  17: 5631552.228 ops/s
# Warmup Iteration  18: 5635401.508 ops/s
# Warmup Iteration  19: 5627448.343 ops/s
# Warmup Iteration  20: 5590563.980 ops/s
# Warmup Iteration  21: 5562092.442 ops/s
# Warmup Iteration  22: 5619040.206 ops/s
# Warmup Iteration  23: 5614962.863 ops/s
# Warmup Iteration  24: 5611316.253 ops/s
# Warmup Iteration  25: 5663359.115 ops/s
# Warmup Iteration  26: 5611608.060 ops/s
# Warmup Iteration  27: 5596921.984 ops/s
# Warmup Iteration  28: 5596088.943 ops/s
# Warmup Iteration  29: 5616552.885 ops/s
# Warmup Iteration  30: 5672640.899 ops/s
Iteration   1: 5648934.566 ops/s
Iteration   2: 5660466.628 ops/s
Iteration   3: 5642217.238 ops/s
Iteration   4: 5647658.097 ops/s
Iteration   5: 5665506.713 ops/s
Iteration   6: 5661073.517 ops/s
Iteration   7: 5667840.729 ops/s
Iteration   8: 5676547.001 ops/s
Iteration   9: 5676743.998 ops/s
Iteration  10: 5681907.945 ops/s
Iteration  11: 5658322.391 ops/s
Iteration  12: 5669799.433 ops/s
Iteration  13: 5666003.606 ops/s
Iteration  14: 5645681.679 ops/s
Iteration  15: 5632071.566 ops/s
Iteration  16: 5654880.057 ops/s
Iteration  17: 5677995.236 ops/s
Iteration  18: 5659130.403 ops/s
Iteration  19: 5666239.028 ops/s
Iteration  20: 5658968.672 ops/s
Iteration  21: 5659466.249 ops/s
Iteration  22: 5651836.190 ops/s
Iteration  23: 5672762.819 ops/s
Iteration  24: 5679008.125 ops/s
Iteration  25: 5656311.639 ops/s
Iteration  26: 5635967.073 ops/s
Iteration  27: 5632514.676 ops/s
Iteration  28: 5681812.577 ops/s
Iteration  29: 5671759.809 ops/s
Iteration  30: 5658007.789 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_injectIntoInt":
  5660581.182 ±(99.9%) 9427.872 ops/s [Average]
  (min, avg, max) = (5632071.566, 5660581.182, 5681907.945), stdev = 14111.196
  CI (99.9%): [5651153.309, 5670009.054] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_injectIntoInt  thrpt   30  5660581.182 ± 9427.872  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_injectIntoKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_injectIntoKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1114994.663 ops/s
# Warmup Iteration   2: 2478279.536 ops/s
# Warmup Iteration   3: 2475164.960 ops/s
# Warmup Iteration   4: 2078496.751 ops/s
# Warmup Iteration   5: 2491630.772 ops/s
# Warmup Iteration   6: 2479570.348 ops/s
# Warmup Iteration   7: 2482062.065 ops/s
# Warmup Iteration   8: 2485137.649 ops/s
# Warmup Iteration   9: 2481415.775 ops/s
# Warmup Iteration  10: 2481752.831 ops/s
# Warmup Iteration  11: 2482982.756 ops/s
# Warmup Iteration  12: 2486486.748 ops/s
# Warmup Iteration  13: 2484869.899 ops/s
# Warmup Iteration  14: 2494143.417 ops/s
# Warmup Iteration  15: 2489414.513 ops/s
# Warmup Iteration  16: 2476442.959 ops/s
# Warmup Iteration  17: 2484550.311 ops/s
# Warmup Iteration  18: 2483134.743 ops/s
# Warmup Iteration  19: 2486400.254 ops/s
# Warmup Iteration  20: 2473948.364 ops/s
# Warmup Iteration  21: 2476152.437 ops/s
# Warmup Iteration  22: 2482316.154 ops/s
# Warmup Iteration  23: 2491340.311 ops/s
# Warmup Iteration  24: 2483041.984 ops/s
# Warmup Iteration  25: 2487525.794 ops/s
# Warmup Iteration  26: 2487657.701 ops/s
# Warmup Iteration  27: 2490831.337 ops/s
# Warmup Iteration  28: 2488723.587 ops/s
# Warmup Iteration  29: 2457920.940 ops/s
# Warmup Iteration  30: 2484010.178 ops/s
Iteration   1: 2478846.940 ops/s
Iteration   2: 2499490.137 ops/s
Iteration   3: 2500621.680 ops/s
Iteration   4: 2476283.467 ops/s
Iteration   5: 2458267.569 ops/s
Iteration   6: 2488643.875 ops/s
Iteration   7: 2488898.542 ops/s
Iteration   8: 2445868.284 ops/s
Iteration   9: 2476484.457 ops/s
Iteration  10: 2485855.623 ops/s
Iteration  11: 2488416.807 ops/s
Iteration  12: 2470803.236 ops/s
Iteration  13: 2484711.425 ops/s
Iteration  14: 2463872.428 ops/s
Iteration  15: 2451612.217 ops/s
Iteration  16: 2501092.609 ops/s
Iteration  17: 2488090.940 ops/s
Iteration  18: 2481743.527 ops/s
Iteration  19: 2474795.152 ops/s
Iteration  20: 2485284.322 ops/s
Iteration  21: 2474398.481 ops/s
Iteration  22: 2473989.803 ops/s
Iteration  23: 2489252.520 ops/s
Iteration  24: 2488883.736 ops/s
Iteration  25: 2492441.016 ops/s
Iteration  26: 2437455.791 ops/s
Iteration  27: 2483957.306 ops/s
Iteration  28: 2474978.252 ops/s
Iteration  29: 2469731.700 ops/s
Iteration  30: 2478603.254 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_injectIntoKeyValue":
  2478445.836 ±(99.9%) 10187.508 ops/s [Average]
  (min, avg, max) = (2437455.791, 2478445.836, 2501092.609), stdev = 15248.183
  CI (99.9%): [2468258.329, 2488633.344] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_injectIntoKeyValue  thrpt   30  2478445.836 ± 10187.508  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2520898.157 ops/s
# Warmup Iteration   2: 5509907.698 ops/s
# Warmup Iteration   3: 4607198.479 ops/s
# Warmup Iteration   4: 5553693.800 ops/s
# Warmup Iteration   5: 5546991.910 ops/s
# Warmup Iteration   6: 5521996.413 ops/s
# Warmup Iteration   7: 5534188.578 ops/s
# Warmup Iteration   8: 5525669.218 ops/s
# Warmup Iteration   9: 5534304.305 ops/s
# Warmup Iteration  10: 5504177.563 ops/s
# Warmup Iteration  11: 5515954.219 ops/s
# Warmup Iteration  12: 5487569.109 ops/s
# Warmup Iteration  13: 5507873.909 ops/s
# Warmup Iteration  14: 5534745.118 ops/s
# Warmup Iteration  15: 5477550.496 ops/s
# Warmup Iteration  16: 5503197.623 ops/s
# Warmup Iteration  17: 5516690.335 ops/s
# Warmup Iteration  18: 5474296.510 ops/s
# Warmup Iteration  19: 5537118.415 ops/s
# Warmup Iteration  20: 5493004.471 ops/s
# Warmup Iteration  21: 5519475.657 ops/s
# Warmup Iteration  22: 5478279.025 ops/s
# Warmup Iteration  23: 5495810.012 ops/s
# Warmup Iteration  24: 5475558.321 ops/s
# Warmup Iteration  25: 5493573.161 ops/s
# Warmup Iteration  26: 5510836.669 ops/s
# Warmup Iteration  27: 5521957.888 ops/s
# Warmup Iteration  28: 5464648.357 ops/s
# Warmup Iteration  29: 5493996.813 ops/s
# Warmup Iteration  30: 5528527.458 ops/s
Iteration   1: 5456446.124 ops/s
Iteration   2: 5470245.762 ops/s
Iteration   3: 5473617.966 ops/s
Iteration   4: 5537688.477 ops/s
Iteration   5: 5447236.143 ops/s
Iteration   6: 5464323.024 ops/s
Iteration   7: 5487035.674 ops/s
Iteration   8: 5459031.735 ops/s
Iteration   9: 5414557.115 ops/s
Iteration  10: 5523143.671 ops/s
Iteration  11: 5423546.807 ops/s
Iteration  12: 5512748.181 ops/s
Iteration  13: 5507973.646 ops/s
Iteration  14: 5450075.828 ops/s
Iteration  15: 5497062.221 ops/s
Iteration  16: 5497184.119 ops/s
Iteration  17: 5519425.335 ops/s
Iteration  18: 5479239.290 ops/s
Iteration  19: 5464905.004 ops/s
Iteration  20: 5472254.326 ops/s
Iteration  21: 5547521.076 ops/s
Iteration  22: 5514411.974 ops/s
Iteration  23: 5520143.357 ops/s
Iteration  24: 5498750.661 ops/s
Iteration  25: 5517246.082 ops/s
Iteration  26: 5510733.653 ops/s
Iteration  27: 5484495.728 ops/s
Iteration  28: 5482035.690 ops/s
Iteration  29: 5541937.776 ops/s
Iteration  30: 5472336.040 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_injectIntoLong":
  5488245.083 ±(99.9%) 22282.061 ops/s [Average]
  (min, avg, max) = (5414557.115, 5488245.083, 5547521.076), stdev = 33350.742
  CI (99.9%): [5465963.022, 5510527.144] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_injectIntoLong  thrpt   30  5488245.083 ± 22282.061  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_into$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_into

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1119822.951 ops/s
# Warmup Iteration   2: 2778307.119 ops/s
# Warmup Iteration   3: 2819107.012 ops/s
# Warmup Iteration   4: 2360196.543 ops/s
# Warmup Iteration   5: 2809408.063 ops/s
# Warmup Iteration   6: 2827990.192 ops/s
# Warmup Iteration   7: 2825310.050 ops/s
# Warmup Iteration   8: 2823913.414 ops/s
# Warmup Iteration   9: 2837897.585 ops/s
# Warmup Iteration  10: 2827021.867 ops/s
# Warmup Iteration  11: 2807316.118 ops/s
# Warmup Iteration  12: 2817498.620 ops/s
# Warmup Iteration  13: 2836125.725 ops/s
# Warmup Iteration  14: 2813306.289 ops/s
# Warmup Iteration  15: 2815161.981 ops/s
# Warmup Iteration  16: 2813745.007 ops/s
# Warmup Iteration  17: 2798936.923 ops/s
# Warmup Iteration  18: 2826113.218 ops/s
# Warmup Iteration  19: 2791307.238 ops/s
# Warmup Iteration  20: 2825391.768 ops/s
# Warmup Iteration  21: 2805024.173 ops/s
# Warmup Iteration  22: 2795921.787 ops/s
# Warmup Iteration  23: 2782579.110 ops/s
# Warmup Iteration  24: 2825144.217 ops/s
# Warmup Iteration  25: 2817763.312 ops/s
# Warmup Iteration  26: 2800796.306 ops/s
# Warmup Iteration  27: 2818262.129 ops/s
# Warmup Iteration  28: 2817810.470 ops/s
# Warmup Iteration  29: 2837759.000 ops/s
# Warmup Iteration  30: 2838039.984 ops/s
Iteration   1: 2829847.826 ops/s
Iteration   2: 2800309.358 ops/s
Iteration   3: 2786649.594 ops/s
Iteration   4: 2814083.565 ops/s
Iteration   5: 2784740.570 ops/s
Iteration   6: 2810374.149 ops/s
Iteration   7: 2836270.224 ops/s
Iteration   8: 2836223.687 ops/s
Iteration   9: 2820469.827 ops/s
Iteration  10: 2816894.879 ops/s
Iteration  11: 2834920.348 ops/s
Iteration  12: 2836563.352 ops/s
Iteration  13: 2816724.701 ops/s
Iteration  14: 2837317.037 ops/s
Iteration  15: 2812374.172 ops/s
Iteration  16: 2802498.869 ops/s
Iteration  17: 2790807.039 ops/s
Iteration  18: 2832282.674 ops/s
Iteration  19: 2787768.622 ops/s
Iteration  20: 2818978.167 ops/s
Iteration  21: 2815325.581 ops/s
Iteration  22: 2825488.652 ops/s
Iteration  23: 2816745.334 ops/s
Iteration  24: 2796109.862 ops/s
Iteration  25: 2802548.646 ops/s
Iteration  26: 2820627.699 ops/s
Iteration  27: 2786396.503 ops/s
Iteration  28: 2794099.371 ops/s
Iteration  29: 2812951.277 ops/s
Iteration  30: 2779567.931 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_into":
  2811865.317 ±(99.9%) 11872.858 ops/s [Average]
  (min, avg, max) = (2779567.931, 2811865.317, 2837317.037), stdev = 17770.737
  CI (99.9%): [2799992.459, 2823738.176] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_into  thrpt   30  2811865.317 ± 11872.858  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1676823.904 ops/s
# Warmup Iteration   2: 3549557.962 ops/s
# Warmup Iteration   3: 2987543.928 ops/s
# Warmup Iteration   4: 3605180.976 ops/s
# Warmup Iteration   5: 3600237.190 ops/s
# Warmup Iteration   6: 3563564.728 ops/s
# Warmup Iteration   7: 3553775.724 ops/s
# Warmup Iteration   8: 3577396.226 ops/s
# Warmup Iteration   9: 3581627.869 ops/s
# Warmup Iteration  10: 3598168.985 ops/s
# Warmup Iteration  11: 3571695.536 ops/s
# Warmup Iteration  12: 3565081.560 ops/s
# Warmup Iteration  13: 3588897.785 ops/s
# Warmup Iteration  14: 3576127.388 ops/s
# Warmup Iteration  15: 3572259.116 ops/s
# Warmup Iteration  16: 3606945.417 ops/s
# Warmup Iteration  17: 3571660.336 ops/s
# Warmup Iteration  18: 3562076.723 ops/s
# Warmup Iteration  19: 3602922.870 ops/s
# Warmup Iteration  20: 3564049.213 ops/s
# Warmup Iteration  21: 3581905.068 ops/s
# Warmup Iteration  22: 3583929.894 ops/s
# Warmup Iteration  23: 3597936.112 ops/s
# Warmup Iteration  24: 3567048.526 ops/s
# Warmup Iteration  25: 3563997.804 ops/s
# Warmup Iteration  26: 3607710.664 ops/s
# Warmup Iteration  27: 3587704.040 ops/s
# Warmup Iteration  28: 3580040.453 ops/s
# Warmup Iteration  29: 3592131.911 ops/s
# Warmup Iteration  30: 3565396.151 ops/s
Iteration   1: 3568059.683 ops/s
Iteration   2: 3598281.102 ops/s
Iteration   3: 3583922.709 ops/s
Iteration   4: 3603578.762 ops/s
Iteration   5: 3580037.882 ops/s
Iteration   6: 3560727.507 ops/s
Iteration   7: 3603882.387 ops/s
Iteration   8: 3523425.787 ops/s
Iteration   9: 3596292.144 ops/s
Iteration  10: 3552426.964 ops/s
Iteration  11: 3573764.000 ops/s
Iteration  12: 3495470.115 ops/s
Iteration  13: 3568829.682 ops/s
Iteration  14: 3573235.678 ops/s
Iteration  15: 3562711.406 ops/s
Iteration  16: 3556689.740 ops/s
Iteration  17: 3583458.766 ops/s
Iteration  18: 3587271.203 ops/s
Iteration  19: 3589306.124 ops/s
Iteration  20: 3600704.261 ops/s
Iteration  21: 3602858.825 ops/s
Iteration  22: 3602255.787 ops/s
Iteration  23: 3613369.444 ops/s
Iteration  24: 3590576.465 ops/s
Iteration  25: 3592755.495 ops/s
Iteration  26: 3584825.181 ops/s
Iteration  27: 3583069.306 ops/s
Iteration  28: 3546775.810 ops/s
Iteration  29: 3589248.861 ops/s
Iteration  30: 3558891.312 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_isEmpty":
  3577556.746 ±(99.9%) 17050.703 ops/s [Average]
  (min, avg, max) = (3495470.115, 3577556.746, 3613369.444), stdev = 25520.691
  CI (99.9%): [3560506.044, 3594607.449] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_isEmpty  thrpt   30  3577556.746 ± 17050.703  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 134618.709 ops/s
# Warmup Iteration   2: 155735.854 ops/s
# Warmup Iteration   3: 207086.828 ops/s
# Warmup Iteration   4: 205360.934 ops/s
# Warmup Iteration   5: 206217.760 ops/s
# Warmup Iteration   6: 205859.866 ops/s
# Warmup Iteration   7: 207954.969 ops/s
# Warmup Iteration   8: 206777.052 ops/s
# Warmup Iteration   9: 207049.312 ops/s
# Warmup Iteration  10: 185147.670 ops/s
# Warmup Iteration  11: 194086.258 ops/s
# Warmup Iteration  12: 206602.026 ops/s
# Warmup Iteration  13: 206144.445 ops/s
# Warmup Iteration  14: 206225.268 ops/s
# Warmup Iteration  15: 206890.185 ops/s
# Warmup Iteration  16: 205970.968 ops/s
# Warmup Iteration  17: 213657.503 ops/s
# Warmup Iteration  18: 213366.630 ops/s
# Warmup Iteration  19: 215489.391 ops/s
# Warmup Iteration  20: 215563.870 ops/s
# Warmup Iteration  21: 213718.517 ops/s
# Warmup Iteration  22: 215120.078 ops/s
# Warmup Iteration  23: 214872.310 ops/s
# Warmup Iteration  24: 214692.118 ops/s
# Warmup Iteration  25: 214139.238 ops/s
# Warmup Iteration  26: 214706.501 ops/s
# Warmup Iteration  27: 215123.079 ops/s
# Warmup Iteration  28: 215428.731 ops/s
# Warmup Iteration  29: 213535.298 ops/s
# Warmup Iteration  30: 213433.877 ops/s
Iteration   1: 212766.492 ops/s
Iteration   2: 214050.068 ops/s
Iteration   3: 215976.609 ops/s
Iteration   4: 215227.452 ops/s
Iteration   5: 212903.486 ops/s
Iteration   6: 213839.040 ops/s
Iteration   7: 215352.048 ops/s
Iteration   8: 215005.382 ops/s
Iteration   9: 215604.905 ops/s
Iteration  10: 214653.131 ops/s
Iteration  11: 215603.202 ops/s
Iteration  12: 214725.070 ops/s
Iteration  13: 214670.228 ops/s
Iteration  14: 215660.040 ops/s
Iteration  15: 215312.146 ops/s
Iteration  16: 214809.622 ops/s
Iteration  17: 213698.298 ops/s
Iteration  18: 214226.352 ops/s
Iteration  19: 215072.659 ops/s
Iteration  20: 213157.575 ops/s
Iteration  21: 215682.609 ops/s
Iteration  22: 214974.416 ops/s
Iteration  23: 215365.915 ops/s
Iteration  24: 215568.658 ops/s
Iteration  25: 214295.882 ops/s
Iteration  26: 215457.680 ops/s
Iteration  27: 213146.309 ops/s
Iteration  28: 214963.323 ops/s
Iteration  29: 214108.566 ops/s
Iteration  30: 216253.625 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_iterator":
  214737.693 ±(99.9%) 625.625 ops/s [Average]
  (min, avg, max) = (212766.492, 214737.693, 216253.625), stdev = 936.406
  CI (99.9%): [214112.068, 215363.318] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
HashBiMapInverseTest._Benchmark.benchmark_iterator  thrpt   30  214737.693 ± 625.625  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_keyPreservation$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_keyPreservation

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1054587.987 ops/s
# Warmup Iteration   2: 2461595.675 ops/s
# Warmup Iteration   3: 2462082.271 ops/s
# Warmup Iteration   4: 2023314.871 ops/s
# Warmup Iteration   5: 2442117.781 ops/s
# Warmup Iteration   6: 2478906.047 ops/s
# Warmup Iteration   7: 2463469.701 ops/s
# Warmup Iteration   8: 2464715.954 ops/s
# Warmup Iteration   9: 2458841.512 ops/s
# Warmup Iteration  10: 2476343.759 ops/s
# Warmup Iteration  11: 2450645.767 ops/s
# Warmup Iteration  12: 2478154.437 ops/s
# Warmup Iteration  13: 2484936.822 ops/s
# Warmup Iteration  14: 2463256.054 ops/s
# Warmup Iteration  15: 2463276.426 ops/s
# Warmup Iteration  16: 2463424.055 ops/s
# Warmup Iteration  17: 2459478.077 ops/s
# Warmup Iteration  18: 2475738.808 ops/s
# Warmup Iteration  19: 2478298.822 ops/s
# Warmup Iteration  20: 2471260.413 ops/s
# Warmup Iteration  21: 2459213.614 ops/s
# Warmup Iteration  22: 2471690.807 ops/s
# Warmup Iteration  23: 2459082.539 ops/s
# Warmup Iteration  24: 2454041.259 ops/s
# Warmup Iteration  25: 2466098.483 ops/s
# Warmup Iteration  26: 2418467.806 ops/s
# Warmup Iteration  27: 2459633.982 ops/s
# Warmup Iteration  28: 2470513.058 ops/s
# Warmup Iteration  29: 2466075.052 ops/s
# Warmup Iteration  30: 2466352.085 ops/s
Iteration   1: 2456771.710 ops/s
Iteration   2: 2443731.762 ops/s
Iteration   3: 2460504.080 ops/s
Iteration   4: 2474466.798 ops/s
Iteration   5: 2451511.344 ops/s
Iteration   6: 2479781.001 ops/s
Iteration   7: 2469568.545 ops/s
Iteration   8: 2471299.121 ops/s
Iteration   9: 2465113.463 ops/s
Iteration  10: 2468800.955 ops/s
Iteration  11: 2460903.095 ops/s
Iteration  12: 2438307.050 ops/s
Iteration  13: 2452217.108 ops/s
Iteration  14: 2468203.036 ops/s
Iteration  15: 2458487.259 ops/s
Iteration  16: 2436502.121 ops/s
Iteration  17: 2481440.324 ops/s
Iteration  18: 2496274.876 ops/s
Iteration  19: 2486013.661 ops/s
Iteration  20: 2469752.544 ops/s
Iteration  21: 2477056.554 ops/s
Iteration  22: 2479984.723 ops/s
Iteration  23: 2462376.548 ops/s
Iteration  24: 2433845.501 ops/s
Iteration  25: 2453382.682 ops/s
Iteration  26: 2478361.183 ops/s
Iteration  27: 2466333.306 ops/s
Iteration  28: 2459010.706 ops/s
Iteration  29: 2465750.267 ops/s
Iteration  30: 2470291.796 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_keyPreservation":
  2464534.771 ±(99.9%) 9844.239 ops/s [Average]
  (min, avg, max) = (2433845.501, 2464534.771, 2496274.876), stdev = 14734.395
  CI (99.9%): [2454690.531, 2474379.010] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_keyPreservation  thrpt   30  2464534.771 ± 9844.239  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_keySetEqualsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_keySetEqualsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 688021.412 ops/s
# Warmup Iteration   2: 1589519.359 ops/s
# Warmup Iteration   3: 1644280.069 ops/s
# Warmup Iteration   4: 1442087.385 ops/s
# Warmup Iteration   5: 1564326.582 ops/s
# Warmup Iteration   6: 1629654.279 ops/s
# Warmup Iteration   7: 1638411.014 ops/s
# Warmup Iteration   8: 1623577.370 ops/s
# Warmup Iteration   9: 1645229.758 ops/s
# Warmup Iteration  10: 1641760.839 ops/s
# Warmup Iteration  11: 1634889.067 ops/s
# Warmup Iteration  12: 1639713.104 ops/s
# Warmup Iteration  13: 1643257.060 ops/s
# Warmup Iteration  14: 1640527.332 ops/s
# Warmup Iteration  15: 1650215.228 ops/s
# Warmup Iteration  16: 1644513.448 ops/s
# Warmup Iteration  17: 1643057.166 ops/s
# Warmup Iteration  18: 1628309.708 ops/s
# Warmup Iteration  19: 1645225.151 ops/s
# Warmup Iteration  20: 1635103.970 ops/s
# Warmup Iteration  21: 1643516.897 ops/s
# Warmup Iteration  22: 1629730.234 ops/s
# Warmup Iteration  23: 1637236.659 ops/s
# Warmup Iteration  24: 1634017.405 ops/s
# Warmup Iteration  25: 1640210.412 ops/s
# Warmup Iteration  26: 1630372.792 ops/s
# Warmup Iteration  27: 1636157.660 ops/s
# Warmup Iteration  28: 1629901.578 ops/s
# Warmup Iteration  29: 1645920.290 ops/s
# Warmup Iteration  30: 1625950.938 ops/s
Iteration   1: 1638226.372 ops/s
Iteration   2: 1652456.178 ops/s
Iteration   3: 1644518.652 ops/s
Iteration   4: 1618960.496 ops/s
Iteration   5: 1620235.534 ops/s
Iteration   6: 1645608.286 ops/s
Iteration   7: 1651135.555 ops/s
Iteration   8: 1623166.435 ops/s
Iteration   9: 1635523.770 ops/s
Iteration  10: 1631798.212 ops/s
Iteration  11: 1645166.961 ops/s
Iteration  12: 1644721.086 ops/s
Iteration  13: 1641076.455 ops/s
Iteration  14: 1646287.413 ops/s
Iteration  15: 1631476.775 ops/s
Iteration  16: 1615517.422 ops/s
Iteration  17: 1618499.857 ops/s
Iteration  18: 1622854.406 ops/s
Iteration  19: 1626779.578 ops/s
Iteration  20: 1618655.199 ops/s
Iteration  21: 1643632.521 ops/s
Iteration  22: 1620977.458 ops/s
Iteration  23: 1628888.375 ops/s
Iteration  24: 1638261.274 ops/s
Iteration  25: 1634271.912 ops/s
Iteration  26: 1648036.300 ops/s
Iteration  27: 1633969.482 ops/s
Iteration  28: 1644587.488 ops/s
Iteration  29: 1641671.392 ops/s
Iteration  30: 1644785.973 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_keySetEqualsAndHashCode":
  1635058.227 ±(99.9%) 7480.935 ops/s [Average]
  (min, avg, max) = (1615517.422, 1635058.227, 1652456.178), stdev = 11197.112
  CI (99.9%): [1627577.292, 1642539.162] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_keySetEqualsAndHashCode  thrpt   30  1635058.227 ± 7480.935  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_keySetToArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_keySetToArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1251435.290 ops/s
# Warmup Iteration   2: 2945944.282 ops/s
# Warmup Iteration   3: 3002715.091 ops/s
# Warmup Iteration   4: 2479722.859 ops/s
# Warmup Iteration   5: 2994088.597 ops/s
# Warmup Iteration   6: 3014380.826 ops/s
# Warmup Iteration   7: 3013154.866 ops/s
# Warmup Iteration   8: 3015463.031 ops/s
# Warmup Iteration   9: 3000348.950 ops/s
# Warmup Iteration  10: 3018933.945 ops/s
# Warmup Iteration  11: 3007222.839 ops/s
# Warmup Iteration  12: 3012136.160 ops/s
# Warmup Iteration  13: 3019011.797 ops/s
# Warmup Iteration  14: 2999097.732 ops/s
# Warmup Iteration  15: 3012466.057 ops/s
# Warmup Iteration  16: 2997188.038 ops/s
# Warmup Iteration  17: 2987769.577 ops/s
# Warmup Iteration  18: 3020697.120 ops/s
# Warmup Iteration  19: 3017183.107 ops/s
# Warmup Iteration  20: 2993303.515 ops/s
# Warmup Iteration  21: 3000196.640 ops/s
# Warmup Iteration  22: 2994271.377 ops/s
# Warmup Iteration  23: 3003943.422 ops/s
# Warmup Iteration  24: 3007713.213 ops/s
# Warmup Iteration  25: 3012954.953 ops/s
# Warmup Iteration  26: 3010062.566 ops/s
# Warmup Iteration  27: 3003734.321 ops/s
# Warmup Iteration  28: 3020446.404 ops/s
# Warmup Iteration  29: 3019166.940 ops/s
# Warmup Iteration  30: 3013352.700 ops/s
Iteration   1: 3008762.807 ops/s
Iteration   2: 3013070.658 ops/s
Iteration   3: 3006776.858 ops/s
Iteration   4: 3000400.726 ops/s
Iteration   5: 2988932.483 ops/s
Iteration   6: 3012493.643 ops/s
Iteration   7: 3015284.570 ops/s
Iteration   8: 3014103.307 ops/s
Iteration   9: 3005996.741 ops/s
Iteration  10: 3012031.240 ops/s
Iteration  11: 3035859.290 ops/s
Iteration  12: 2961264.702 ops/s
Iteration  13: 2994857.551 ops/s
Iteration  14: 3009178.232 ops/s
Iteration  15: 3014206.306 ops/s
Iteration  16: 3017807.934 ops/s
Iteration  17: 3008461.089 ops/s
Iteration  18: 3006136.963 ops/s
Iteration  19: 3009494.823 ops/s
Iteration  20: 3018529.189 ops/s
Iteration  21: 3001698.937 ops/s
Iteration  22: 3035352.670 ops/s
Iteration  23: 3020060.973 ops/s
Iteration  24: 3003798.814 ops/s
Iteration  25: 3029348.385 ops/s
Iteration  26: 2981863.130 ops/s
Iteration  27: 3011565.142 ops/s
Iteration  28: 3000250.637 ops/s
Iteration  29: 3018346.806 ops/s
Iteration  30: 2981112.010 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_keySetToArray":
  3007901.554 ±(99.9%) 10349.013 ops/s [Average]
  (min, avg, max) = (2961264.702, 3007901.554, 3035859.290), stdev = 15489.916
  CI (99.9%): [2997552.541, 3018250.567] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_keySetToArray  thrpt   30  3007901.554 ± 10349.013  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_keyValuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_keyValuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 747253.101 ops/s
# Warmup Iteration   2: 1991259.615 ops/s
# Warmup Iteration   3: 2021284.767 ops/s
# Warmup Iteration   4: 1677874.363 ops/s
# Warmup Iteration   5: 2015952.769 ops/s
# Warmup Iteration   6: 2035777.012 ops/s
# Warmup Iteration   7: 2028703.200 ops/s
# Warmup Iteration   8: 2027082.839 ops/s
# Warmup Iteration   9: 2020675.038 ops/s
# Warmup Iteration  10: 2024636.925 ops/s
# Warmup Iteration  11: 2026675.514 ops/s
# Warmup Iteration  12: 2016280.982 ops/s
# Warmup Iteration  13: 2029019.837 ops/s
# Warmup Iteration  14: 2031612.164 ops/s
# Warmup Iteration  15: 2012669.166 ops/s
# Warmup Iteration  16: 2030817.626 ops/s
# Warmup Iteration  17: 2030717.019 ops/s
# Warmup Iteration  18: 2021687.312 ops/s
# Warmup Iteration  19: 2029608.309 ops/s
# Warmup Iteration  20: 2020822.940 ops/s
# Warmup Iteration  21: 2027475.499 ops/s
# Warmup Iteration  22: 1991047.546 ops/s
# Warmup Iteration  23: 2028105.562 ops/s
# Warmup Iteration  24: 2038235.086 ops/s
# Warmup Iteration  25: 2021982.621 ops/s
# Warmup Iteration  26: 2018297.532 ops/s
# Warmup Iteration  27: 2025452.639 ops/s
# Warmup Iteration  28: 2027480.765 ops/s
# Warmup Iteration  29: 2016494.344 ops/s
# Warmup Iteration  30: 2006783.469 ops/s
Iteration   1: 2020089.336 ops/s
Iteration   2: 2020509.981 ops/s
Iteration   3: 2035338.836 ops/s
Iteration   4: 2038206.186 ops/s
Iteration   5: 2040125.529 ops/s
Iteration   6: 2022293.314 ops/s
Iteration   7: 2020562.094 ops/s
Iteration   8: 2030190.880 ops/s
Iteration   9: 2025511.415 ops/s
Iteration  10: 2033168.172 ops/s
Iteration  11: 2035716.817 ops/s
Iteration  12: 2008862.832 ops/s
Iteration  13: 2036415.677 ops/s
Iteration  14: 2036684.574 ops/s
Iteration  15: 2023392.771 ops/s
Iteration  16: 2007354.239 ops/s
Iteration  17: 2046855.182 ops/s
Iteration  18: 2025754.670 ops/s
Iteration  19: 2030637.534 ops/s
Iteration  20: 2012323.226 ops/s
Iteration  21: 2006167.323 ops/s
Iteration  22: 2027249.901 ops/s
Iteration  23: 2019159.727 ops/s
Iteration  24: 2011919.504 ops/s
Iteration  25: 2026616.987 ops/s
Iteration  26: 2034481.521 ops/s
Iteration  27: 2029607.031 ops/s
Iteration  28: 2030146.609 ops/s
Iteration  29: 2047541.601 ops/s
Iteration  30: 2037188.745 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_keyValuesView":
  2027335.741 ±(99.9%) 7340.068 ops/s [Average]
  (min, avg, max) = (2006167.323, 2027335.741, 2047541.601), stdev = 10986.270
  CI (99.9%): [2019995.672, 2034675.809] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_keyValuesView  thrpt   30  2027335.741 ± 7340.068  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_keysAndValues_toString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_keysAndValues_toString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 664827.107 ops/s
# Warmup Iteration   2: 1611431.807 ops/s
# Warmup Iteration   3: 1615808.075 ops/s
# Warmup Iteration   4: 1350016.901 ops/s
# Warmup Iteration   5: 1608284.901 ops/s
# Warmup Iteration   6: 1600280.212 ops/s
# Warmup Iteration   7: 1616362.448 ops/s
# Warmup Iteration   8: 1618828.726 ops/s
# Warmup Iteration   9: 1617828.460 ops/s
# Warmup Iteration  10: 1611271.224 ops/s
# Warmup Iteration  11: 1620960.723 ops/s
# Warmup Iteration  12: 1610592.802 ops/s
# Warmup Iteration  13: 1610193.785 ops/s
# Warmup Iteration  14: 1607220.103 ops/s
# Warmup Iteration  15: 1615160.706 ops/s
# Warmup Iteration  16: 1622815.776 ops/s
# Warmup Iteration  17: 1605666.675 ops/s
# Warmup Iteration  18: 1607932.372 ops/s
# Warmup Iteration  19: 1614372.558 ops/s
# Warmup Iteration  20: 1609383.105 ops/s
# Warmup Iteration  21: 1615426.077 ops/s
# Warmup Iteration  22: 1605581.407 ops/s
# Warmup Iteration  23: 1615955.330 ops/s
# Warmup Iteration  24: 1613806.734 ops/s
# Warmup Iteration  25: 1616029.171 ops/s
# Warmup Iteration  26: 1618776.327 ops/s
# Warmup Iteration  27: 1614045.714 ops/s
# Warmup Iteration  28: 1615413.092 ops/s
# Warmup Iteration  29: 1607475.755 ops/s
# Warmup Iteration  30: 1612122.320 ops/s
Iteration   1: 1604392.943 ops/s
Iteration   2: 1616575.838 ops/s
Iteration   3: 1606547.936 ops/s
Iteration   4: 1611234.692 ops/s
Iteration   5: 1619994.737 ops/s
Iteration   6: 1616320.455 ops/s
Iteration   7: 1615126.835 ops/s
Iteration   8: 1602673.215 ops/s
Iteration   9: 1612291.946 ops/s
Iteration  10: 1594444.675 ops/s
Iteration  11: 1598529.315 ops/s
Iteration  12: 1618892.620 ops/s
Iteration  13: 1617846.902 ops/s
Iteration  14: 1618669.396 ops/s
Iteration  15: 1612474.064 ops/s
Iteration  16: 1613663.895 ops/s
Iteration  17: 1614900.842 ops/s
Iteration  18: 1618419.166 ops/s
Iteration  19: 1617527.994 ops/s
Iteration  20: 1619540.475 ops/s
Iteration  21: 1620173.892 ops/s
Iteration  22: 1595467.434 ops/s
Iteration  23: 1615874.360 ops/s
Iteration  24: 1607439.732 ops/s
Iteration  25: 1614849.657 ops/s
Iteration  26: 1615787.893 ops/s
Iteration  27: 1610625.936 ops/s
Iteration  28: 1611672.608 ops/s
Iteration  29: 1600801.280 ops/s
Iteration  30: 1610744.747 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_keysAndValues_toString":
  1611783.516 ±(99.9%) 4916.492 ops/s [Average]
  (min, avg, max) = (1594444.675, 1611783.516, 1620173.892), stdev = 7358.774
  CI (99.9%): [1606867.024, 1616700.008] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_keysAndValues_toString  thrpt   30  1611783.516 ± 4916.492  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_keysView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_keysView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1865702.619 ops/s
# Warmup Iteration   2: 4513705.883 ops/s
# Warmup Iteration   3: 4368459.614 ops/s
# Warmup Iteration   4: 3990953.094 ops/s
# Warmup Iteration   5: 4578990.946 ops/s
# Warmup Iteration   6: 4557206.989 ops/s
# Warmup Iteration   7: 4555259.428 ops/s
# Warmup Iteration   8: 4555771.478 ops/s
# Warmup Iteration   9: 4566897.130 ops/s
# Warmup Iteration  10: 4575978.890 ops/s
# Warmup Iteration  11: 4555435.231 ops/s
# Warmup Iteration  12: 4577035.495 ops/s
# Warmup Iteration  13: 4567782.464 ops/s
# Warmup Iteration  14: 4579630.185 ops/s
# Warmup Iteration  15: 4535410.154 ops/s
# Warmup Iteration  16: 4565798.417 ops/s
# Warmup Iteration  17: 4538595.144 ops/s
# Warmup Iteration  18: 4569026.739 ops/s
# Warmup Iteration  19: 4565806.288 ops/s
# Warmup Iteration  20: 4566037.275 ops/s
# Warmup Iteration  21: 4550631.569 ops/s
# Warmup Iteration  22: 4594586.475 ops/s
# Warmup Iteration  23: 4558736.144 ops/s
# Warmup Iteration  24: 4554063.900 ops/s
# Warmup Iteration  25: 4550449.547 ops/s
# Warmup Iteration  26: 4534680.474 ops/s
# Warmup Iteration  27: 4579290.531 ops/s
# Warmup Iteration  28: 4567023.161 ops/s
# Warmup Iteration  29: 4495517.867 ops/s
# Warmup Iteration  30: 4497765.518 ops/s
Iteration   1: 4539718.676 ops/s
Iteration   2: 4595895.699 ops/s
Iteration   3: 4511626.520 ops/s
Iteration   4: 4515548.427 ops/s
Iteration   5: 4579091.080 ops/s
Iteration   6: 4570736.263 ops/s
Iteration   7: 4565603.460 ops/s
Iteration   8: 4543719.874 ops/s
Iteration   9: 4550869.064 ops/s
Iteration  10: 4544595.748 ops/s
Iteration  11: 4531709.289 ops/s
Iteration  12: 4593163.826 ops/s
Iteration  13: 4544306.081 ops/s
Iteration  14: 4580139.456 ops/s
Iteration  15: 4605269.845 ops/s
Iteration  16: 4600860.377 ops/s
Iteration  17: 4588015.307 ops/s
Iteration  18: 4586909.000 ops/s
Iteration  19: 4556234.710 ops/s
Iteration  20: 4536529.705 ops/s
Iteration  21: 4592390.043 ops/s
Iteration  22: 4560149.052 ops/s
Iteration  23: 4556190.508 ops/s
Iteration  24: 4564172.703 ops/s
Iteration  25: 4577037.114 ops/s
Iteration  26: 4567547.823 ops/s
Iteration  27: 4577215.800 ops/s
Iteration  28: 4552467.568 ops/s
Iteration  29: 4546865.598 ops/s
Iteration  30: 4528481.771 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_keysView":
  4562102.013 ±(99.9%) 16770.601 ops/s [Average]
  (min, avg, max) = (4511626.520, 4562102.013, 4605269.845), stdev = 25101.448
  CI (99.9%): [4545331.412, 4578872.614] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_keysView  thrpt   30  4562102.013 ± 16770.601  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1008342.004 ops/s
# Warmup Iteration   2: 2302472.530 ops/s
# Warmup Iteration   3: 2308404.453 ops/s
# Warmup Iteration   4: 1916018.320 ops/s
# Warmup Iteration   5: 2298438.460 ops/s
# Warmup Iteration   6: 2325906.344 ops/s
# Warmup Iteration   7: 2310920.016 ops/s
# Warmup Iteration   8: 2307882.791 ops/s
# Warmup Iteration   9: 2306301.946 ops/s
# Warmup Iteration  10: 2319497.090 ops/s
# Warmup Iteration  11: 2307175.059 ops/s
# Warmup Iteration  12: 2305195.635 ops/s
# Warmup Iteration  13: 2314240.355 ops/s
# Warmup Iteration  14: 2309389.877 ops/s
# Warmup Iteration  15: 2316467.989 ops/s
# Warmup Iteration  16: 2315840.802 ops/s
# Warmup Iteration  17: 2315554.615 ops/s
# Warmup Iteration  18: 2305749.167 ops/s
# Warmup Iteration  19: 2309396.788 ops/s
# Warmup Iteration  20: 2321488.883 ops/s
# Warmup Iteration  21: 2285380.897 ops/s
# Warmup Iteration  22: 2298463.138 ops/s
# Warmup Iteration  23: 2294413.196 ops/s
# Warmup Iteration  24: 2304427.563 ops/s
# Warmup Iteration  25: 2301897.353 ops/s
# Warmup Iteration  26: 2312147.057 ops/s
# Warmup Iteration  27: 2308304.263 ops/s
# Warmup Iteration  28: 2303673.656 ops/s
# Warmup Iteration  29: 2294917.894 ops/s
# Warmup Iteration  30: 2302627.781 ops/s
Iteration   1: 2316438.180 ops/s
Iteration   2: 2310345.670 ops/s
Iteration   3: 2314348.911 ops/s
Iteration   4: 2308666.846 ops/s
Iteration   5: 2298802.599 ops/s
Iteration   6: 2320208.211 ops/s
Iteration   7: 2292065.711 ops/s
Iteration   8: 2311796.189 ops/s
Iteration   9: 2322183.519 ops/s
Iteration  10: 2284884.217 ops/s
Iteration  11: 2305860.572 ops/s
Iteration  12: 2308707.684 ops/s
Iteration  13: 2314649.664 ops/s
Iteration  14: 2319698.120 ops/s
Iteration  15: 2300782.669 ops/s
Iteration  16: 2296754.750 ops/s
Iteration  17: 2289331.863 ops/s
Iteration  18: 2312113.695 ops/s
Iteration  19: 2318084.558 ops/s
Iteration  20: 2308490.927 ops/s
Iteration  21: 2303533.143 ops/s
Iteration  22: 2280637.092 ops/s
Iteration  23: 2266135.912 ops/s
Iteration  24: 2294588.453 ops/s
Iteration  25: 2316189.818 ops/s
Iteration  26: 2294669.817 ops/s
Iteration  27: 2294828.111 ops/s
Iteration  28: 2323258.720 ops/s
Iteration  29: 2322395.752 ops/s
Iteration  30: 2290398.566 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_makeString":
  2304694.998 ±(99.9%) 9390.179 ops/s [Average]
  (min, avg, max) = (2266135.912, 2304694.998, 2323258.720), stdev = 14054.780
  CI (99.9%): [2295304.819, 2314085.177] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_makeString  thrpt   30  2304694.998 ± 9390.179  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2185686.103 ops/s
# Warmup Iteration   2: 4782821.038 ops/s
# Warmup Iteration   3: 4201352.908 ops/s
# Warmup Iteration   4: 4535693.701 ops/s
# Warmup Iteration   5: 4807544.469 ops/s
# Warmup Iteration   6: 4796574.609 ops/s
# Warmup Iteration   7: 4761992.636 ops/s
# Warmup Iteration   8: 4799807.666 ops/s
# Warmup Iteration   9: 4776559.426 ops/s
# Warmup Iteration  10: 4807876.361 ops/s
# Warmup Iteration  11: 4784092.130 ops/s
# Warmup Iteration  12: 4786432.086 ops/s
# Warmup Iteration  13: 4772793.471 ops/s
# Warmup Iteration  14: 4794005.622 ops/s
# Warmup Iteration  15: 4787446.729 ops/s
# Warmup Iteration  16: 4793112.142 ops/s
# Warmup Iteration  17: 4802100.090 ops/s
# Warmup Iteration  18: 4818330.958 ops/s
# Warmup Iteration  19: 4787265.801 ops/s
# Warmup Iteration  20: 4724060.263 ops/s
# Warmup Iteration  21: 4802479.649 ops/s
# Warmup Iteration  22: 4810132.584 ops/s
# Warmup Iteration  23: 4799230.826 ops/s
# Warmup Iteration  24: 4794988.188 ops/s
# Warmup Iteration  25: 4775167.073 ops/s
# Warmup Iteration  26: 4809182.100 ops/s
# Warmup Iteration  27: 4798499.113 ops/s
# Warmup Iteration  28: 4801745.490 ops/s
# Warmup Iteration  29: 4852969.529 ops/s
# Warmup Iteration  30: 4840788.200 ops/s
Iteration   1: 4817601.118 ops/s
Iteration   2: 4723633.473 ops/s
Iteration   3: 4738861.444 ops/s
Iteration   4: 4778497.416 ops/s
Iteration   5: 4806299.901 ops/s
Iteration   6: 4807981.763 ops/s
Iteration   7: 4795180.815 ops/s
Iteration   8: 4721521.734 ops/s
Iteration   9: 4786200.613 ops/s
Iteration  10: 4782199.665 ops/s
Iteration  11: 4806372.802 ops/s
Iteration  12: 4783130.950 ops/s
Iteration  13: 4786730.793 ops/s
Iteration  14: 4743257.991 ops/s
Iteration  15: 4810449.972 ops/s
Iteration  16: 4822274.375 ops/s
Iteration  17: 4804513.792 ops/s
Iteration  18: 4776217.407 ops/s
Iteration  19: 4731746.582 ops/s
Iteration  20: 4730196.555 ops/s
Iteration  21: 4754022.388 ops/s
Iteration  22: 4760913.383 ops/s
Iteration  23: 4832286.188 ops/s
Iteration  24: 4752035.987 ops/s
Iteration  25: 4773530.432 ops/s
Iteration  26: 4792157.376 ops/s
Iteration  27: 4770904.657 ops/s
Iteration  28: 4787475.824 ops/s
Iteration  29: 4812706.732 ops/s
Iteration  30: 4773209.151 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_max":
  4778737.043 ±(99.9%) 20627.706 ops/s [Average]
  (min, avg, max) = (4721521.734, 4778737.043, 4832286.188), stdev = 30874.581
  CI (99.9%): [4758109.337, 4799364.748] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_max  thrpt   30  4778737.043 ± 20627.706  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1946173.043 ops/s
# Warmup Iteration   2: 4093590.238 ops/s
# Warmup Iteration   3: 3372390.149 ops/s
# Warmup Iteration   4: 4069404.363 ops/s
# Warmup Iteration   5: 4039525.478 ops/s
# Warmup Iteration   6: 4028457.251 ops/s
# Warmup Iteration   7: 4020004.700 ops/s
# Warmup Iteration   8: 4012285.787 ops/s
# Warmup Iteration   9: 4013893.128 ops/s
# Warmup Iteration  10: 4015786.798 ops/s
# Warmup Iteration  11: 4028589.103 ops/s
# Warmup Iteration  12: 4051810.018 ops/s
# Warmup Iteration  13: 4026907.727 ops/s
# Warmup Iteration  14: 4039549.274 ops/s
# Warmup Iteration  15: 4053006.154 ops/s
# Warmup Iteration  16: 4042788.753 ops/s
# Warmup Iteration  17: 3998079.571 ops/s
# Warmup Iteration  18: 4030348.521 ops/s
# Warmup Iteration  19: 3991169.251 ops/s
# Warmup Iteration  20: 4022258.159 ops/s
# Warmup Iteration  21: 4034596.354 ops/s
# Warmup Iteration  22: 4030587.555 ops/s
# Warmup Iteration  23: 4036553.789 ops/s
# Warmup Iteration  24: 4025784.708 ops/s
# Warmup Iteration  25: 4020200.117 ops/s
# Warmup Iteration  26: 4056848.226 ops/s
# Warmup Iteration  27: 4039375.894 ops/s
# Warmup Iteration  28: 4015580.058 ops/s
# Warmup Iteration  29: 4042962.454 ops/s
# Warmup Iteration  30: 4035852.522 ops/s
Iteration   1: 4022666.304 ops/s
Iteration   2: 4063138.300 ops/s
Iteration   3: 4054668.448 ops/s
Iteration   4: 3986607.886 ops/s
Iteration   5: 4049686.610 ops/s
Iteration   6: 4023576.140 ops/s
Iteration   7: 4046414.562 ops/s
Iteration   8: 4035137.902 ops/s
Iteration   9: 4037147.581 ops/s
Iteration  10: 4058280.730 ops/s
Iteration  11: 4036576.019 ops/s
Iteration  12: 4003771.322 ops/s
Iteration  13: 4006023.978 ops/s
Iteration  14: 4011937.073 ops/s
Iteration  15: 4026728.864 ops/s
Iteration  16: 4030894.104 ops/s
Iteration  17: 4050432.795 ops/s
Iteration  18: 4039128.651 ops/s
Iteration  19: 4051950.752 ops/s
Iteration  20: 4027631.783 ops/s
Iteration  21: 4032317.379 ops/s
Iteration  22: 4005628.036 ops/s
Iteration  23: 4040268.192 ops/s
Iteration  24: 4028176.483 ops/s
Iteration  25: 4020646.713 ops/s
Iteration  26: 4031475.819 ops/s
Iteration  27: 4058458.012 ops/s
Iteration  28: 4025787.298 ops/s
Iteration  29: 4006599.941 ops/s
Iteration  30: 4069669.851 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_maxBy":
  4032714.251 ±(99.9%) 13232.968 ops/s [Average]
  (min, avg, max) = (3986607.886, 4032714.251, 4069669.851), stdev = 19806.484
  CI (99.9%): [4019481.283, 4045947.218] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_maxBy  thrpt   30  4032714.251 ± 13232.968  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1930795.421 ops/s
# Warmup Iteration   2: 4360662.239 ops/s
# Warmup Iteration   3: 4400486.153 ops/s
# Warmup Iteration   4: 3653947.860 ops/s
# Warmup Iteration   5: 4396977.483 ops/s
# Warmup Iteration   6: 4422690.786 ops/s
# Warmup Iteration   7: 4397418.986 ops/s
# Warmup Iteration   8: 4394231.696 ops/s
# Warmup Iteration   9: 4378703.183 ops/s
# Warmup Iteration  10: 4415854.026 ops/s
# Warmup Iteration  11: 4403229.870 ops/s
# Warmup Iteration  12: 4401101.042 ops/s
# Warmup Iteration  13: 4380582.129 ops/s
# Warmup Iteration  14: 4377144.546 ops/s
# Warmup Iteration  15: 4398880.889 ops/s
# Warmup Iteration  16: 4394709.326 ops/s
# Warmup Iteration  17: 4364308.220 ops/s
# Warmup Iteration  18: 4410264.050 ops/s
# Warmup Iteration  19: 4392622.781 ops/s
# Warmup Iteration  20: 4397568.503 ops/s
# Warmup Iteration  21: 4393188.412 ops/s
# Warmup Iteration  22: 4383782.882 ops/s
# Warmup Iteration  23: 4394458.503 ops/s
# Warmup Iteration  24: 4392813.555 ops/s
# Warmup Iteration  25: 4374581.568 ops/s
# Warmup Iteration  26: 4402374.359 ops/s
# Warmup Iteration  27: 4414985.853 ops/s
# Warmup Iteration  28: 4371117.680 ops/s
# Warmup Iteration  29: 4420007.761 ops/s
# Warmup Iteration  30: 4394141.486 ops/s
Iteration   1: 4435779.413 ops/s
Iteration   2: 4398071.905 ops/s
Iteration   3: 4425320.162 ops/s
Iteration   4: 4415232.028 ops/s
Iteration   5: 4388922.517 ops/s
Iteration   6: 4390518.521 ops/s
Iteration   7: 4406021.992 ops/s
Iteration   8: 4423044.872 ops/s
Iteration   9: 4413552.205 ops/s
Iteration  10: 4413436.006 ops/s
Iteration  11: 4371367.329 ops/s
Iteration  12: 4396975.943 ops/s
Iteration  13: 4368069.778 ops/s
Iteration  14: 4404613.728 ops/s
Iteration  15: 4399856.590 ops/s
Iteration  16: 4390874.036 ops/s
Iteration  17: 4355236.748 ops/s
Iteration  18: 4356401.778 ops/s
Iteration  19: 4382928.579 ops/s
Iteration  20: 4407663.151 ops/s
Iteration  21: 4369775.248 ops/s
Iteration  22: 4404626.833 ops/s
Iteration  23: 4398695.891 ops/s
Iteration  24: 4378156.102 ops/s
Iteration  25: 4352350.663 ops/s
Iteration  26: 4429435.147 ops/s
Iteration  27: 4392357.146 ops/s
Iteration  28: 4433285.011 ops/s
Iteration  29: 4403142.963 ops/s
Iteration  30: 4449673.860 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_min":
  4398512.872 ±(99.9%) 16476.419 ops/s [Average]
  (min, avg, max) = (4352350.663, 4398512.872, 4449673.860), stdev = 24661.130
  CI (99.9%): [4382036.453, 4414989.290] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_min  thrpt   30  4398512.872 ± 16476.419  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1949015.899 ops/s
# Warmup Iteration   2: 4186143.698 ops/s
# Warmup Iteration   3: 3497993.235 ops/s
# Warmup Iteration   4: 4163562.108 ops/s
# Warmup Iteration   5: 4165212.407 ops/s
# Warmup Iteration   6: 4173844.747 ops/s
# Warmup Iteration   7: 4170110.516 ops/s
# Warmup Iteration   8: 4175698.600 ops/s
# Warmup Iteration   9: 4191178.318 ops/s
# Warmup Iteration  10: 4181513.509 ops/s
# Warmup Iteration  11: 4206190.066 ops/s
# Warmup Iteration  12: 4204563.318 ops/s
# Warmup Iteration  13: 4164869.564 ops/s
# Warmup Iteration  14: 4195975.867 ops/s
# Warmup Iteration  15: 4191297.886 ops/s
# Warmup Iteration  16: 4191555.484 ops/s
# Warmup Iteration  17: 4173595.033 ops/s
# Warmup Iteration  18: 4170083.131 ops/s
# Warmup Iteration  19: 4193344.111 ops/s
# Warmup Iteration  20: 4166124.917 ops/s
# Warmup Iteration  21: 4181187.886 ops/s
# Warmup Iteration  22: 4184340.592 ops/s
# Warmup Iteration  23: 4162917.401 ops/s
# Warmup Iteration  24: 4195485.759 ops/s
# Warmup Iteration  25: 4146383.568 ops/s
# Warmup Iteration  26: 4150393.748 ops/s
# Warmup Iteration  27: 4163396.470 ops/s
# Warmup Iteration  28: 4197038.067 ops/s
# Warmup Iteration  29: 4179213.374 ops/s
# Warmup Iteration  30: 4115978.989 ops/s
Iteration   1: 4116561.586 ops/s
Iteration   2: 4082022.120 ops/s
Iteration   3: 4149272.212 ops/s
Iteration   4: 4174783.596 ops/s
Iteration   5: 4079305.481 ops/s
Iteration   6: 4017477.967 ops/s
Iteration   7: 4025558.126 ops/s
Iteration   8: 4089358.981 ops/s
Iteration   9: 4188856.073 ops/s
Iteration  10: 4149119.082 ops/s
Iteration  11: 4196001.625 ops/s
Iteration  12: 4056578.462 ops/s
Iteration  13: 4042546.311 ops/s
Iteration  14: 4164189.650 ops/s
Iteration  15: 4137952.400 ops/s
Iteration  16: 4186594.698 ops/s
Iteration  17: 4160210.478 ops/s
Iteration  18: 4168091.062 ops/s
Iteration  19: 4141414.621 ops/s
Iteration  20: 4184255.312 ops/s
Iteration  21: 4163864.340 ops/s
Iteration  22: 4157583.940 ops/s
Iteration  23: 4206404.061 ops/s
Iteration  24: 4182925.655 ops/s
Iteration  25: 4210951.450 ops/s
Iteration  26: 4225865.151 ops/s
Iteration  27: 4173031.006 ops/s
Iteration  28: 4192627.382 ops/s
Iteration  29: 4203742.612 ops/s
Iteration  30: 4180772.912 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_minBy":
  4146930.612 ±(99.9%) 38285.342 ops/s [Average]
  (min, avg, max) = (4017477.967, 4146930.612, 4225865.151), stdev = 57303.701
  CI (99.9%): [4108645.270, 4185215.953] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_minBy  thrpt   30  4146930.612 ± 38285.342  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1530629.747 ops/s
# Warmup Iteration   2: 3306308.608 ops/s
# Warmup Iteration   3: 2791790.307 ops/s
# Warmup Iteration   4: 3308366.294 ops/s
# Warmup Iteration   5: 3302845.022 ops/s
# Warmup Iteration   6: 3324336.153 ops/s
# Warmup Iteration   7: 3316961.666 ops/s
# Warmup Iteration   8: 3341713.446 ops/s
# Warmup Iteration   9: 3314776.415 ops/s
# Warmup Iteration  10: 3316876.681 ops/s
# Warmup Iteration  11: 3334904.610 ops/s
# Warmup Iteration  12: 3332680.751 ops/s
# Warmup Iteration  13: 3318057.679 ops/s
# Warmup Iteration  14: 3333538.012 ops/s
# Warmup Iteration  15: 3321993.601 ops/s
# Warmup Iteration  16: 3308805.200 ops/s
# Warmup Iteration  17: 3309520.503 ops/s
# Warmup Iteration  18: 3317676.397 ops/s
# Warmup Iteration  19: 3316455.955 ops/s
# Warmup Iteration  20: 3328252.336 ops/s
# Warmup Iteration  21: 3294972.923 ops/s
# Warmup Iteration  22: 3298797.466 ops/s
# Warmup Iteration  23: 3299807.942 ops/s
# Warmup Iteration  24: 3311496.236 ops/s
# Warmup Iteration  25: 3323838.466 ops/s
# Warmup Iteration  26: 3326243.380 ops/s
# Warmup Iteration  27: 3298234.444 ops/s
# Warmup Iteration  28: 3287270.589 ops/s
# Warmup Iteration  29: 3305911.657 ops/s
# Warmup Iteration  30: 3295252.369 ops/s
Iteration   1: 3322243.784 ops/s
Iteration   2: 3296638.540 ops/s
Iteration   3: 3273974.852 ops/s
Iteration   4: 3334280.881 ops/s
Iteration   5: 3314557.192 ops/s
Iteration   6: 3322167.037 ops/s
Iteration   7: 3310556.621 ops/s
Iteration   8: 3303179.372 ops/s
Iteration   9: 3307617.206 ops/s
Iteration  10: 3319159.479 ops/s
Iteration  11: 3319296.865 ops/s
Iteration  12: 3295531.626 ops/s
Iteration  13: 3336885.124 ops/s
Iteration  14: 3336724.972 ops/s
Iteration  15: 3341802.221 ops/s
Iteration  16: 3329947.807 ops/s
Iteration  17: 3343003.606 ops/s
Iteration  18: 3324099.431 ops/s
Iteration  19: 3341995.654 ops/s
Iteration  20: 3327349.330 ops/s
Iteration  21: 3298079.130 ops/s
Iteration  22: 3342366.553 ops/s
Iteration  23: 3330151.736 ops/s
Iteration  24: 3329791.181 ops/s
Iteration  25: 3323833.022 ops/s
Iteration  26: 3303676.449 ops/s
Iteration  27: 3275816.069 ops/s
Iteration  28: 3288450.809 ops/s
Iteration  29: 3323479.941 ops/s
Iteration  30: 3341952.251 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_newEmpty":
  3318620.291 ±(99.9%) 13071.680 ops/s [Average]
  (min, avg, max) = (3273974.852, 3318620.291, 3343003.606), stdev = 19565.077
  CI (99.9%): [3305548.611, 3331691.972] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_newEmpty  thrpt   30  3318620.291 ± 13071.680  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_newMapWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_newMapWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 429704.711 ops/s
# Warmup Iteration   2: 1036689.058 ops/s
# Warmup Iteration   3: 1042602.855 ops/s
# Warmup Iteration   4: 861898.472 ops/s
# Warmup Iteration   5: 1044494.461 ops/s
# Warmup Iteration   6: 1046943.904 ops/s
# Warmup Iteration   7: 1046424.120 ops/s
# Warmup Iteration   8: 1012235.307 ops/s
# Warmup Iteration   9: 999468.836 ops/s
# Warmup Iteration  10: 993891.106 ops/s
# Warmup Iteration  11: 1021689.970 ops/s
# Warmup Iteration  12: 1008911.151 ops/s
# Warmup Iteration  13: 983008.958 ops/s
# Warmup Iteration  14: 985870.291 ops/s
# Warmup Iteration  15: 995448.646 ops/s
# Warmup Iteration  16: 980438.396 ops/s
# Warmup Iteration  17: 994510.225 ops/s
# Warmup Iteration  18: 996380.687 ops/s
# Warmup Iteration  19: 1007568.615 ops/s
# Warmup Iteration  20: 1013316.071 ops/s
# Warmup Iteration  21: 985922.704 ops/s
# Warmup Iteration  22: 992681.765 ops/s
# Warmup Iteration  23: 985664.643 ops/s
# Warmup Iteration  24: 977865.202 ops/s
# Warmup Iteration  25: 995274.801 ops/s
# Warmup Iteration  26: 986514.072 ops/s
# Warmup Iteration  27: 974536.137 ops/s
# Warmup Iteration  28: 1007513.611 ops/s
# Warmup Iteration  29: 1003112.467 ops/s
# Warmup Iteration  30: 985875.034 ops/s
Iteration   1: 991643.914 ops/s
Iteration   2: 990572.148 ops/s
Iteration   3: 1012711.603 ops/s
Iteration   4: 975728.954 ops/s
Iteration   5: 996359.243 ops/s
Iteration   6: 998046.169 ops/s
Iteration   7: 1013624.644 ops/s
Iteration   8: 1002700.045 ops/s
Iteration   9: 998239.441 ops/s
Iteration  10: 998444.440 ops/s
Iteration  11: 990174.508 ops/s
Iteration  12: 952031.261 ops/s
Iteration  13: 964370.926 ops/s
Iteration  14: 942502.356 ops/s
Iteration  15: 995784.361 ops/s
Iteration  16: 997848.472 ops/s
Iteration  17: 1002254.750 ops/s
Iteration  18: 1008307.534 ops/s
Iteration  19: 989629.025 ops/s
Iteration  20: 986508.876 ops/s
Iteration  21: 1009310.328 ops/s
Iteration  22: 1028277.956 ops/s
Iteration  23: 1052697.764 ops/s
Iteration  24: 1051961.860 ops/s
Iteration  25: 1053621.441 ops/s
Iteration  26: 1034166.021 ops/s
Iteration  27: 1055107.169 ops/s
Iteration  28: 1034026.540 ops/s
Iteration  29: 994546.860 ops/s
Iteration  30: 989999.134 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_newMapWithWith":
  1003706.591 ±(99.9%) 18734.332 ops/s [Average]
  (min, avg, max) = (942502.356, 1003706.591, 1055107.169), stdev = 28040.668
  CI (99.9%): [984972.260, 1022440.923] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_newMapWithWith  thrpt   30  1003706.591 ± 18734.332  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_newMapWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_newMapWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 359228.456 ops/s
# Warmup Iteration   2: 749382.128 ops/s
# Warmup Iteration   3: 794979.676 ops/s
# Warmup Iteration   4: 819678.408 ops/s
# Warmup Iteration   5: 672548.566 ops/s
# Warmup Iteration   6: 815111.704 ops/s
# Warmup Iteration   7: 810926.330 ops/s
# Warmup Iteration   8: 808026.134 ops/s
# Warmup Iteration   9: 807563.397 ops/s
# Warmup Iteration  10: 806847.192 ops/s
# Warmup Iteration  11: 804419.446 ops/s
# Warmup Iteration  12: 824072.906 ops/s
# Warmup Iteration  13: 812862.173 ops/s
# Warmup Iteration  14: 805825.828 ops/s
# Warmup Iteration  15: 802950.559 ops/s
# Warmup Iteration  16: 827386.615 ops/s
# Warmup Iteration  17: 823252.645 ops/s
# Warmup Iteration  18: 805010.505 ops/s
# Warmup Iteration  19: 829903.776 ops/s
# Warmup Iteration  20: 826601.806 ops/s
# Warmup Iteration  21: 810807.258 ops/s
# Warmup Iteration  22: 809288.023 ops/s
# Warmup Iteration  23: 800618.120 ops/s
# Warmup Iteration  24: 816494.628 ops/s
# Warmup Iteration  25: 815069.918 ops/s
# Warmup Iteration  26: 796543.198 ops/s
# Warmup Iteration  27: 804453.677 ops/s
# Warmup Iteration  28: 808562.061 ops/s
# Warmup Iteration  29: 842661.297 ops/s
# Warmup Iteration  30: 830358.251 ops/s
Iteration   1: 799666.996 ops/s
Iteration   2: 808349.000 ops/s
Iteration   3: 805079.978 ops/s
Iteration   4: 804342.845 ops/s
Iteration   5: 805760.054 ops/s
Iteration   6: 806093.470 ops/s
Iteration   7: 794282.854 ops/s
Iteration   8: 803510.078 ops/s
Iteration   9: 796674.346 ops/s
Iteration  10: 811196.626 ops/s
Iteration  11: 805935.904 ops/s
Iteration  12: 796748.456 ops/s
Iteration  13: 803875.868 ops/s
Iteration  14: 807020.725 ops/s
Iteration  15: 799162.663 ops/s
Iteration  16: 811763.296 ops/s
Iteration  17: 802310.309 ops/s
Iteration  18: 807665.995 ops/s
Iteration  19: 811863.621 ops/s
Iteration  20: 818953.292 ops/s
Iteration  21: 794533.965 ops/s
Iteration  22: 808869.822 ops/s
Iteration  23: 804072.133 ops/s
Iteration  24: 810263.796 ops/s
Iteration  25: 845249.935 ops/s
Iteration  26: 858181.052 ops/s
Iteration  27: 856523.204 ops/s
Iteration  28: 855507.239 ops/s
Iteration  29: 854398.475 ops/s
Iteration  30: 856513.762 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_newMapWithWithWith":
  814812.325 ±(99.9%) 13975.599 ops/s [Average]
  (min, avg, max) = (794282.854, 814812.325, 858181.052), stdev = 20918.020
  CI (99.9%): [800836.726, 828787.924] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_newMapWithWithWith  thrpt   30  814812.325 ± 13975.599  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_newMapWithWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_newMapWithWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 332091.036 ops/s
# Warmup Iteration   2: 633861.748 ops/s
# Warmup Iteration   3: 680113.397 ops/s
# Warmup Iteration   4: 685102.222 ops/s
# Warmup Iteration   5: 577184.278 ops/s
# Warmup Iteration   6: 673417.515 ops/s
# Warmup Iteration   7: 687905.158 ops/s
# Warmup Iteration   8: 683155.096 ops/s
# Warmup Iteration   9: 687807.923 ops/s
# Warmup Iteration  10: 686174.803 ops/s
# Warmup Iteration  11: 683100.817 ops/s
# Warmup Iteration  12: 687373.315 ops/s
# Warmup Iteration  13: 650512.316 ops/s
# Warmup Iteration  14: 651002.458 ops/s
# Warmup Iteration  15: 652731.269 ops/s
# Warmup Iteration  16: 645898.458 ops/s
# Warmup Iteration  17: 653427.395 ops/s
# Warmup Iteration  18: 671043.284 ops/s
# Warmup Iteration  19: 686695.261 ops/s
# Warmup Iteration  20: 687647.517 ops/s
# Warmup Iteration  21: 687057.219 ops/s
# Warmup Iteration  22: 687772.280 ops/s
# Warmup Iteration  23: 686495.101 ops/s
# Warmup Iteration  24: 687346.366 ops/s
# Warmup Iteration  25: 685175.969 ops/s
# Warmup Iteration  26: 686668.263 ops/s
# Warmup Iteration  27: 687396.093 ops/s
# Warmup Iteration  28: 684703.063 ops/s
# Warmup Iteration  29: 687163.024 ops/s
# Warmup Iteration  30: 682989.000 ops/s
Iteration   1: 684030.086 ops/s
Iteration   2: 683524.865 ops/s
Iteration   3: 683309.116 ops/s
Iteration   4: 683493.502 ops/s
Iteration   5: 683887.315 ops/s
Iteration   6: 678843.430 ops/s
Iteration   7: 683962.201 ops/s
Iteration   8: 683178.796 ops/s
Iteration   9: 686611.452 ops/s
Iteration  10: 681175.628 ops/s
Iteration  11: 672567.292 ops/s
Iteration  12: 679867.921 ops/s
Iteration  13: 674057.682 ops/s
Iteration  14: 675955.807 ops/s
Iteration  15: 669706.704 ops/s
Iteration  16: 686332.771 ops/s
Iteration  17: 677190.761 ops/s
Iteration  18: 669126.463 ops/s
Iteration  19: 678139.353 ops/s
Iteration  20: 669372.152 ops/s
Iteration  21: 684036.090 ops/s
Iteration  22: 673990.195 ops/s
Iteration  23: 673775.638 ops/s
Iteration  24: 679324.249 ops/s
Iteration  25: 665674.776 ops/s
Iteration  26: 677395.751 ops/s
Iteration  27: 674992.924 ops/s
Iteration  28: 679610.901 ops/s
Iteration  29: 668505.872 ops/s
Iteration  30: 666917.022 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_newMapWithWithWithWith":
  677618.557 ±(99.9%) 4108.526 ops/s [Average]
  (min, avg, max) = (665674.776, 677618.557, 686611.452), stdev = 6149.448
  CI (99.9%): [673510.031, 681727.083] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_newMapWithWithWithWith  thrpt   30  677618.557 ± 4108.526  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1474496.522 ops/s
# Warmup Iteration   2: 3629340.855 ops/s
# Warmup Iteration   3: 3628943.855 ops/s
# Warmup Iteration   4: 3002596.158 ops/s
# Warmup Iteration   5: 3659673.434 ops/s
# Warmup Iteration   6: 3622399.381 ops/s
# Warmup Iteration   7: 3676454.104 ops/s
# Warmup Iteration   8: 3629637.660 ops/s
# Warmup Iteration   9: 3624076.402 ops/s
# Warmup Iteration  10: 3671635.387 ops/s
# Warmup Iteration  11: 3642091.686 ops/s
# Warmup Iteration  12: 3675978.319 ops/s
# Warmup Iteration  13: 3674316.070 ops/s
# Warmup Iteration  14: 3660440.768 ops/s
# Warmup Iteration  15: 3659683.827 ops/s
# Warmup Iteration  16: 3682320.289 ops/s
# Warmup Iteration  17: 3666375.652 ops/s
# Warmup Iteration  18: 3692168.513 ops/s
# Warmup Iteration  19: 3706983.070 ops/s
# Warmup Iteration  20: 3720780.649 ops/s
# Warmup Iteration  21: 3725103.926 ops/s
# Warmup Iteration  22: 3483118.692 ops/s
# Warmup Iteration  23: 3485574.971 ops/s
# Warmup Iteration  24: 3445200.484 ops/s
# Warmup Iteration  25: 3506934.105 ops/s
# Warmup Iteration  26: 3470499.545 ops/s
# Warmup Iteration  27: 3516040.146 ops/s
# Warmup Iteration  28: 3513684.210 ops/s
# Warmup Iteration  29: 3457422.239 ops/s
# Warmup Iteration  30: 3489411.451 ops/s
Iteration   1: 3509583.008 ops/s
Iteration   2: 3665773.238 ops/s
Iteration   3: 3440645.306 ops/s
Iteration   4: 3487062.027 ops/s
Iteration   5: 3530303.265 ops/s
Iteration   6: 3610204.174 ops/s
Iteration   7: 3705404.874 ops/s
Iteration   8: 3508867.824 ops/s
Iteration   9: 3425956.472 ops/s
Iteration  10: 3458788.562 ops/s
Iteration  11: 3446970.323 ops/s
Iteration  12: 3546128.029 ops/s
Iteration  13: 3460069.740 ops/s
Iteration  14: 3471170.224 ops/s
Iteration  15: 3564223.869 ops/s
Iteration  16: 3503786.627 ops/s
Iteration  17: 3451250.726 ops/s
Iteration  18: 3429461.874 ops/s
Iteration  19: 3463809.709 ops/s
Iteration  20: 3458953.134 ops/s
Iteration  21: 3572439.714 ops/s
Iteration  22: 3675582.457 ops/s
Iteration  23: 3564346.701 ops/s
Iteration  24: 3520810.553 ops/s
Iteration  25: 3432090.867 ops/s
Iteration  26: 3499927.637 ops/s
Iteration  27: 3473376.621 ops/s
Iteration  28: 3451497.702 ops/s
Iteration  29: 3470021.430 ops/s
Iteration  30: 3491227.728 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_noneSatisfy":
  3509657.814 ±(99.9%) 49955.227 ops/s [Average]
  (min, avg, max) = (3425956.472, 3509657.814, 3705404.874), stdev = 74770.638
  CI (99.9%): [3459702.587, 3559613.041] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_noneSatisfy  thrpt   30  3509657.814 ± 49955.227  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2538103.698 ops/s
# Warmup Iteration   2: 5336780.707 ops/s
# Warmup Iteration   3: 5163071.838 ops/s
# Warmup Iteration   4: 4725239.471 ops/s
# Warmup Iteration   5: 5517934.206 ops/s
# Warmup Iteration   6: 5397684.740 ops/s
# Warmup Iteration   7: 5598377.987 ops/s
# Warmup Iteration   8: 5333691.280 ops/s
# Warmup Iteration   9: 5415049.511 ops/s
# Warmup Iteration  10: 5355139.461 ops/s
# Warmup Iteration  11: 5431040.500 ops/s
# Warmup Iteration  12: 5374431.476 ops/s
# Warmup Iteration  13: 5661530.899 ops/s
# Warmup Iteration  14: 5627266.125 ops/s
# Warmup Iteration  15: 5458107.552 ops/s
# Warmup Iteration  16: 5309366.863 ops/s
# Warmup Iteration  17: 5331541.153 ops/s
# Warmup Iteration  18: 5612995.114 ops/s
# Warmup Iteration  19: 5505275.433 ops/s
# Warmup Iteration  20: 5326160.353 ops/s
# Warmup Iteration  21: 5333867.078 ops/s
# Warmup Iteration  22: 5338295.025 ops/s
# Warmup Iteration  23: 5317921.011 ops/s
# Warmup Iteration  24: 5419382.500 ops/s
# Warmup Iteration  25: 5341991.479 ops/s
# Warmup Iteration  26: 5641569.976 ops/s
# Warmup Iteration  27: 5347241.324 ops/s
# Warmup Iteration  28: 5372241.517 ops/s
# Warmup Iteration  29: 5375969.139 ops/s
# Warmup Iteration  30: 5446639.876 ops/s
Iteration   1: 5490654.818 ops/s
Iteration   2: 5601932.478 ops/s
Iteration   3: 5496790.447 ops/s
Iteration   4: 5402044.829 ops/s
Iteration   5: 5378023.422 ops/s
Iteration   6: 5378057.681 ops/s
Iteration   7: 5385596.883 ops/s
Iteration   8: 5314760.095 ops/s
Iteration   9: 5367310.415 ops/s
Iteration  10: 5392426.426 ops/s
Iteration  11: 5426745.193 ops/s
Iteration  12: 5385313.278 ops/s
Iteration  13: 5370498.513 ops/s
Iteration  14: 5743780.487 ops/s
Iteration  15: 5680918.848 ops/s
Iteration  16: 5320786.630 ops/s
Iteration  17: 5452709.493 ops/s
Iteration  18: 5325172.442 ops/s
Iteration  19: 5357676.412 ops/s
Iteration  20: 5380155.733 ops/s
Iteration  21: 5384421.899 ops/s
Iteration  22: 5509267.628 ops/s
Iteration  23: 5340297.186 ops/s
Iteration  24: 5439976.092 ops/s
Iteration  25: 5495527.922 ops/s
Iteration  26: 5411394.425 ops/s
Iteration  27: 5486187.788 ops/s
Iteration  28: 5366789.718 ops/s
Iteration  29: 5482080.658 ops/s
Iteration  30: 5736305.756 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_noneSatisfyWith":
  5443453.453 ±(99.9%) 76679.508 ops/s [Average]
  (min, avg, max) = (5314760.095, 5443453.453, 5743780.487), stdev = 114770.287
  CI (99.9%): [5366773.945, 5520132.962] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  5443453.453 ± 76679.508  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1579039.071 ops/s
# Warmup Iteration   2: 3457697.562 ops/s
# Warmup Iteration   3: 2901551.410 ops/s
# Warmup Iteration   4: 3453628.959 ops/s
# Warmup Iteration   5: 3579425.776 ops/s
# Warmup Iteration   6: 3539774.601 ops/s
# Warmup Iteration   7: 3539782.134 ops/s
# Warmup Iteration   8: 3545498.440 ops/s
# Warmup Iteration   9: 3532669.554 ops/s
# Warmup Iteration  10: 3626985.873 ops/s
# Warmup Iteration  11: 3565416.412 ops/s
# Warmup Iteration  12: 3603426.347 ops/s
# Warmup Iteration  13: 3564077.089 ops/s
# Warmup Iteration  14: 3497927.725 ops/s
# Warmup Iteration  15: 3492564.065 ops/s
# Warmup Iteration  16: 3545737.894 ops/s
# Warmup Iteration  17: 3535330.956 ops/s
# Warmup Iteration  18: 3499793.344 ops/s
# Warmup Iteration  19: 3480328.526 ops/s
# Warmup Iteration  20: 3507222.864 ops/s
# Warmup Iteration  21: 3562129.165 ops/s
# Warmup Iteration  22: 3520344.669 ops/s
# Warmup Iteration  23: 3498902.750 ops/s
# Warmup Iteration  24: 3508332.443 ops/s
# Warmup Iteration  25: 3523981.378 ops/s
# Warmup Iteration  26: 3548916.646 ops/s
# Warmup Iteration  27: 3554884.212 ops/s
# Warmup Iteration  28: 3516231.274 ops/s
# Warmup Iteration  29: 3500663.624 ops/s
# Warmup Iteration  30: 3518154.910 ops/s
Iteration   1: 3574150.366 ops/s
Iteration   2: 3515370.169 ops/s
Iteration   3: 3492909.076 ops/s
Iteration   4: 3502898.212 ops/s
Iteration   5: 3502817.018 ops/s
Iteration   6: 3617613.690 ops/s
Iteration   7: 3534093.208 ops/s
Iteration   8: 3516341.873 ops/s
Iteration   9: 3487051.957 ops/s
Iteration  10: 3530204.297 ops/s
Iteration  11: 3728467.114 ops/s
Iteration  12: 3543031.036 ops/s
Iteration  13: 3715608.752 ops/s
Iteration  14: 3617938.226 ops/s
Iteration  15: 3529037.820 ops/s
Iteration  16: 3524035.132 ops/s
Iteration  17: 3513106.692 ops/s
Iteration  18: 3503076.538 ops/s
Iteration  19: 3488033.536 ops/s
Iteration  20: 3578749.937 ops/s
Iteration  21: 3604674.836 ops/s
Iteration  22: 3525092.445 ops/s
Iteration  23: 3526301.056 ops/s
Iteration  24: 3535300.008 ops/s
Iteration  25: 3513223.820 ops/s
Iteration  26: 3497834.085 ops/s
Iteration  27: 3505707.311 ops/s
Iteration  28: 3501415.051 ops/s
Iteration  29: 3447914.779 ops/s
Iteration  30: 3538472.704 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_notEmpty":
  3540349.025 ±(99.9%) 41820.535 ops/s [Average]
  (min, avg, max) = (3447914.779, 3540349.025, 3728467.114), stdev = 62595.013
  CI (99.9%): [3498528.490, 3582169.560] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_notEmpty  thrpt   30  3540349.025 ± 41820.535  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_nullCollisionWithCastInEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_nullCollisionWithCastInEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 939847.577 ops/s
# Warmup Iteration   2: 2206956.832 ops/s
# Warmup Iteration   3: 2078413.053 ops/s
# Warmup Iteration   4: 1831811.625 ops/s
# Warmup Iteration   5: 2095003.291 ops/s
# Warmup Iteration   6: 2096717.454 ops/s
# Warmup Iteration   7: 2080450.717 ops/s
# Warmup Iteration   8: 2138081.886 ops/s
# Warmup Iteration   9: 2099317.216 ops/s
# Warmup Iteration  10: 2088086.168 ops/s
# Warmup Iteration  11: 2081095.936 ops/s
# Warmup Iteration  12: 2123765.329 ops/s
# Warmup Iteration  13: 2083982.220 ops/s
# Warmup Iteration  14: 2101390.364 ops/s
# Warmup Iteration  15: 2151708.718 ops/s
# Warmup Iteration  16: 2104579.802 ops/s
# Warmup Iteration  17: 2076337.979 ops/s
# Warmup Iteration  18: 2063614.357 ops/s
# Warmup Iteration  19: 2089640.560 ops/s
# Warmup Iteration  20: 2098563.861 ops/s
# Warmup Iteration  21: 2054630.035 ops/s
# Warmup Iteration  22: 2090744.192 ops/s
# Warmup Iteration  23: 2104729.374 ops/s
# Warmup Iteration  24: 2184309.653 ops/s
# Warmup Iteration  25: 2114788.170 ops/s
# Warmup Iteration  26: 2140951.113 ops/s
# Warmup Iteration  27: 2076965.808 ops/s
# Warmup Iteration  28: 2128765.766 ops/s
# Warmup Iteration  29: 2087831.554 ops/s
# Warmup Iteration  30: 2098858.659 ops/s
Iteration   1: 2174143.740 ops/s
Iteration   2: 2086984.424 ops/s
Iteration   3: 2099077.125 ops/s
Iteration   4: 2061857.863 ops/s
Iteration   5: 2103240.187 ops/s
Iteration   6: 2128717.702 ops/s
Iteration   7: 2082394.818 ops/s
Iteration   8: 2070094.412 ops/s
Iteration   9: 2075627.663 ops/s
Iteration  10: 2118577.083 ops/s
Iteration  11: 2095503.516 ops/s
Iteration  12: 2055262.973 ops/s
Iteration  13: 2098204.193 ops/s
Iteration  14: 2087845.169 ops/s
Iteration  15: 2098909.398 ops/s
Iteration  16: 2081463.021 ops/s
Iteration  17: 2165800.129 ops/s
Iteration  18: 2137515.992 ops/s
Iteration  19: 2218738.162 ops/s
Iteration  20: 2122051.115 ops/s
Iteration  21: 2087963.046 ops/s
Iteration  22: 2103569.804 ops/s
Iteration  23: 2113071.700 ops/s
Iteration  24: 2042920.167 ops/s
Iteration  25: 2132936.862 ops/s
Iteration  26: 2226536.781 ops/s
Iteration  27: 2223991.814 ops/s
Iteration  28: 2084652.155 ops/s
Iteration  29: 2116128.127 ops/s
Iteration  30: 2088102.168 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_nullCollisionWithCastInEquals":
  2112729.377 ±(99.9%) 31575.468 ops/s [Average]
  (min, avg, max) = (2042920.167, 2112729.377, 2226536.781), stdev = 47260.678
  CI (99.9%): [2081153.909, 2144304.846] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_nullCollisionWithCastInEquals  thrpt   30  2112729.377 ± 31575.468  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_parallelStream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_parallelStream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 618624.080 ops/s
# Warmup Iteration   2: 1420553.457 ops/s
# Warmup Iteration   3: 1475458.317 ops/s
# Warmup Iteration   4: 1300753.082 ops/s
# Warmup Iteration   5: 1428628.337 ops/s
# Warmup Iteration   6: 1464556.274 ops/s
# Warmup Iteration   7: 1462557.207 ops/s
# Warmup Iteration   8: 1483888.406 ops/s
# Warmup Iteration   9: 1510928.141 ops/s
# Warmup Iteration  10: 1485875.205 ops/s
# Warmup Iteration  11: 1513833.202 ops/s
# Warmup Iteration  12: 1505362.787 ops/s
# Warmup Iteration  13: 1489685.329 ops/s
# Warmup Iteration  14: 1484278.296 ops/s
# Warmup Iteration  15: 1508998.377 ops/s
# Warmup Iteration  16: 1470256.719 ops/s
# Warmup Iteration  17: 1496473.713 ops/s
# Warmup Iteration  18: 1499455.673 ops/s
# Warmup Iteration  19: 1485947.084 ops/s
# Warmup Iteration  20: 1485981.288 ops/s
# Warmup Iteration  21: 1480980.605 ops/s
# Warmup Iteration  22: 1484211.788 ops/s
# Warmup Iteration  23: 1478599.656 ops/s
# Warmup Iteration  24: 1475925.271 ops/s
# Warmup Iteration  25: 1494357.861 ops/s
# Warmup Iteration  26: 1486877.724 ops/s
# Warmup Iteration  27: 1529740.810 ops/s
# Warmup Iteration  28: 1486863.614 ops/s
# Warmup Iteration  29: 1477526.979 ops/s
# Warmup Iteration  30: 1472899.323 ops/s
Iteration   1: 1467622.669 ops/s
Iteration   2: 1481078.154 ops/s
Iteration   3: 1497237.086 ops/s
Iteration   4: 1471179.251 ops/s
Iteration   5: 1501732.485 ops/s
Iteration   6: 1494418.827 ops/s
Iteration   7: 1468577.267 ops/s
Iteration   8: 1486642.676 ops/s
Iteration   9: 1507284.744 ops/s
Iteration  10: 1499162.166 ops/s
Iteration  11: 1487421.608 ops/s
Iteration  12: 1493090.200 ops/s
Iteration  13: 1492089.373 ops/s
Iteration  14: 1505965.338 ops/s
Iteration  15: 1486635.201 ops/s
Iteration  16: 1498732.083 ops/s
Iteration  17: 1514510.575 ops/s
Iteration  18: 1487757.038 ops/s
Iteration  19: 1492957.404 ops/s
Iteration  20: 1455521.504 ops/s
Iteration  21: 1477281.630 ops/s
Iteration  22: 1485517.501 ops/s
Iteration  23: 1498108.865 ops/s
Iteration  24: 1480804.976 ops/s
Iteration  25: 1482211.911 ops/s
Iteration  26: 1479559.875 ops/s
Iteration  27: 1485055.688 ops/s
Iteration  28: 1481446.981 ops/s
Iteration  29: 1518518.640 ops/s
Iteration  30: 1524786.488 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_parallelStream":
  1490096.940 ±(99.9%) 10220.088 ops/s [Average]
  (min, avg, max) = (1455521.504, 1490096.940, 1524786.488), stdev = 15296.948
  CI (99.9%): [1479876.852, 1500317.028] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_parallelStream  thrpt   30  1490096.940 ± 10220.088  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_partitionWith_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_partitionWith_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 985064.496 ops/s
# Warmup Iteration   2: 2521809.776 ops/s
# Warmup Iteration   3: 2347050.979 ops/s
# Warmup Iteration   4: 2345951.719 ops/s
# Warmup Iteration   5: 2612916.892 ops/s
# Warmup Iteration   6: 2538038.325 ops/s
# Warmup Iteration   7: 2536913.832 ops/s
# Warmup Iteration   8: 2548931.328 ops/s
# Warmup Iteration   9: 2545531.853 ops/s
# Warmup Iteration  10: 2482545.070 ops/s
# Warmup Iteration  11: 2535101.285 ops/s
# Warmup Iteration  12: 2524609.040 ops/s
# Warmup Iteration  13: 2472496.879 ops/s
# Warmup Iteration  14: 2501225.291 ops/s
# Warmup Iteration  15: 2518728.561 ops/s
# Warmup Iteration  16: 2504896.005 ops/s
# Warmup Iteration  17: 2631059.482 ops/s
# Warmup Iteration  18: 2470943.677 ops/s
# Warmup Iteration  19: 2531242.032 ops/s
# Warmup Iteration  20: 2586907.537 ops/s
# Warmup Iteration  21: 2568419.836 ops/s
# Warmup Iteration  22: 2510941.889 ops/s
# Warmup Iteration  23: 2477257.052 ops/s
# Warmup Iteration  24: 2526725.765 ops/s
# Warmup Iteration  25: 2503098.775 ops/s
# Warmup Iteration  26: 2561609.376 ops/s
# Warmup Iteration  27: 2508261.363 ops/s
# Warmup Iteration  28: 2510681.575 ops/s
# Warmup Iteration  29: 2496803.673 ops/s
# Warmup Iteration  30: 2503966.844 ops/s
Iteration   1: 2479411.757 ops/s
Iteration   2: 2534099.468 ops/s
Iteration   3: 2463149.894 ops/s
Iteration   4: 2546193.386 ops/s
Iteration   5: 2592894.469 ops/s
Iteration   6: 2516745.927 ops/s
Iteration   7: 2576277.272 ops/s
Iteration   8: 2519502.427 ops/s
Iteration   9: 2614369.530 ops/s
Iteration  10: 2543265.562 ops/s
Iteration  11: 2487436.307 ops/s
Iteration  12: 2512859.491 ops/s
Iteration  13: 2616841.226 ops/s
Iteration  14: 2471976.207 ops/s
Iteration  15: 2486837.819 ops/s
Iteration  16: 2497542.877 ops/s
Iteration  17: 2489484.880 ops/s
Iteration  18: 2476610.422 ops/s
Iteration  19: 2611810.062 ops/s
Iteration  20: 2606091.988 ops/s
Iteration  21: 2460548.228 ops/s
Iteration  22: 2519703.692 ops/s
Iteration  23: 2490482.413 ops/s
Iteration  24: 2534710.315 ops/s
Iteration  25: 2466969.719 ops/s
Iteration  26: 2481462.903 ops/s
Iteration  27: 2518401.048 ops/s
Iteration  28: 2528257.346 ops/s
Iteration  29: 2526935.328 ops/s
Iteration  30: 2448911.556 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_partitionWith_value":
  2520659.451 ±(99.9%) 33020.141 ops/s [Average]
  (min, avg, max) = (2448911.556, 2520659.451, 2616841.226), stdev = 49422.996
  CI (99.9%): [2487639.310, 2553679.591] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_partitionWith_value  thrpt   30  2520659.451 ± 33020.141  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_partition_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_partition_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1081430.077 ops/s
# Warmup Iteration   2: 2853553.484 ops/s
# Warmup Iteration   3: 2711082.088 ops/s
# Warmup Iteration   4: 2609636.498 ops/s
# Warmup Iteration   5: 2927049.037 ops/s
# Warmup Iteration   6: 2917502.886 ops/s
# Warmup Iteration   7: 2923932.464 ops/s
# Warmup Iteration   8: 3049547.927 ops/s
# Warmup Iteration   9: 2924883.654 ops/s
# Warmup Iteration  10: 2910266.515 ops/s
# Warmup Iteration  11: 2932324.121 ops/s
# Warmup Iteration  12: 2906429.240 ops/s
# Warmup Iteration  13: 2921672.411 ops/s
# Warmup Iteration  14: 2933592.161 ops/s
# Warmup Iteration  15: 3009574.067 ops/s
# Warmup Iteration  16: 2932931.192 ops/s
# Warmup Iteration  17: 2898035.761 ops/s
# Warmup Iteration  18: 2931392.111 ops/s
# Warmup Iteration  19: 2950113.718 ops/s
# Warmup Iteration  20: 2916433.629 ops/s
# Warmup Iteration  21: 2962970.668 ops/s
# Warmup Iteration  22: 2930645.723 ops/s
# Warmup Iteration  23: 3003518.552 ops/s
# Warmup Iteration  24: 2979092.017 ops/s
# Warmup Iteration  25: 2913602.480 ops/s
# Warmup Iteration  26: 2934431.564 ops/s
# Warmup Iteration  27: 2934280.867 ops/s
# Warmup Iteration  28: 2931776.614 ops/s
# Warmup Iteration  29: 2919801.278 ops/s
# Warmup Iteration  30: 2938782.288 ops/s
Iteration   1: 2926857.042 ops/s
Iteration   2: 3048616.778 ops/s
Iteration   3: 2998130.551 ops/s
Iteration   4: 2916506.647 ops/s
Iteration   5: 2945952.440 ops/s
Iteration   6: 2930932.831 ops/s
Iteration   7: 2979076.330 ops/s
Iteration   8: 3096553.018 ops/s
Iteration   9: 2964210.823 ops/s
Iteration  10: 2956302.242 ops/s
Iteration  11: 2959067.883 ops/s
Iteration  12: 3017805.459 ops/s
Iteration  13: 3077670.048 ops/s
Iteration  14: 2977953.950 ops/s
Iteration  15: 2964015.393 ops/s
Iteration  16: 2996483.435 ops/s
Iteration  17: 3038036.853 ops/s
Iteration  18: 2954304.256 ops/s
Iteration  19: 2930266.883 ops/s
Iteration  20: 2952859.058 ops/s
Iteration  21: 2998297.405 ops/s
Iteration  22: 2934567.517 ops/s
Iteration  23: 3036225.682 ops/s
Iteration  24: 3095521.583 ops/s
Iteration  25: 3079851.226 ops/s
Iteration  26: 3043384.898 ops/s
Iteration  27: 2972536.604 ops/s
Iteration  28: 3014820.593 ops/s
Iteration  29: 2951557.692 ops/s
Iteration  30: 3055008.936 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_partition_value":
  2993779.135 ±(99.9%) 35943.337 ops/s [Average]
  (min, avg, max) = (2916506.647, 2993779.135, 3096553.018), stdev = 53798.299
  CI (99.9%): [2957835.798, 3029722.472] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
HashBiMapInverseTest._Benchmark.benchmark_partition_value  thrpt   30  2993779.135 ± 35943.337  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_put$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_put

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 119919.303 ops/s
# Warmup Iteration   2: 172222.587 ops/s
# Warmup Iteration   3: 204475.079 ops/s
# Warmup Iteration   4: 201575.033 ops/s
# Warmup Iteration   5: 200415.129 ops/s
# Warmup Iteration   6: 197552.122 ops/s
# Warmup Iteration   7: 163520.357 ops/s
# Warmup Iteration   8: 205527.302 ops/s
# Warmup Iteration   9: 201127.001 ops/s
# Warmup Iteration  10: 204635.042 ops/s
# Warmup Iteration  11: 201748.729 ops/s
# Warmup Iteration  12: 204897.452 ops/s
# Warmup Iteration  13: 201654.391 ops/s
# Warmup Iteration  14: 202497.589 ops/s
# Warmup Iteration  15: 204509.203 ops/s
# Warmup Iteration  16: 200989.518 ops/s
# Warmup Iteration  17: 205109.407 ops/s
# Warmup Iteration  18: 203141.664 ops/s
# Warmup Iteration  19: 204320.570 ops/s
# Warmup Iteration  20: 207353.667 ops/s
# Warmup Iteration  21: 207500.263 ops/s
# Warmup Iteration  22: 204973.420 ops/s
# Warmup Iteration  23: 203582.440 ops/s
# Warmup Iteration  24: 207657.403 ops/s
# Warmup Iteration  25: 203038.621 ops/s
# Warmup Iteration  26: 203876.092 ops/s
# Warmup Iteration  27: 206992.529 ops/s
# Warmup Iteration  28: 210236.080 ops/s
# Warmup Iteration  29: 206359.373 ops/s
# Warmup Iteration  30: 205330.178 ops/s
Iteration   1: 208781.986 ops/s
Iteration   2: 214067.410 ops/s
Iteration   3: 204175.335 ops/s
Iteration   4: 201449.914 ops/s
Iteration   5: 203146.856 ops/s
Iteration   6: 205037.510 ops/s
Iteration   7: 208573.505 ops/s
Iteration   8: 199872.522 ops/s
Iteration   9: 208788.603 ops/s
Iteration  10: 200795.329 ops/s
Iteration  11: 204496.484 ops/s
Iteration  12: 202644.695 ops/s
Iteration  13: 200608.448 ops/s
Iteration  14: 201594.675 ops/s
Iteration  15: 204641.872 ops/s
Iteration  16: 206804.039 ops/s
Iteration  17: 208747.113 ops/s
Iteration  18: 205053.089 ops/s
Iteration  19: 203853.464 ops/s
Iteration  20: 202972.466 ops/s
Iteration  21: 204060.065 ops/s
Iteration  22: 202852.280 ops/s
Iteration  23: 204676.601 ops/s
Iteration  24: 199586.171 ops/s
Iteration  25: 209780.133 ops/s
Iteration  26: 205512.216 ops/s
Iteration  27: 202947.326 ops/s
Iteration  28: 205734.912 ops/s
Iteration  29: 212344.978 ops/s
Iteration  30: 201466.652 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_put":
  204835.555 ±(99.9%) 2393.745 ops/s [Average]
  (min, avg, max) = (199586.171, 204835.555, 214067.410), stdev = 3582.845
  CI (99.9%): [202441.810, 207229.300] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_put  thrpt   30  204835.555 ± 2393.745  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_putAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_putAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 405758.304 ops/s
# Warmup Iteration   2: 775607.551 ops/s
# Warmup Iteration   3: 824701.800 ops/s
# Warmup Iteration   4: 819674.360 ops/s
# Warmup Iteration   5: 686491.979 ops/s
# Warmup Iteration   6: 824256.619 ops/s
# Warmup Iteration   7: 841789.548 ops/s
# Warmup Iteration   8: 829327.450 ops/s
# Warmup Iteration   9: 821683.248 ops/s
# Warmup Iteration  10: 838386.621 ops/s
# Warmup Iteration  11: 824205.863 ops/s
# Warmup Iteration  12: 821738.184 ops/s
# Warmup Iteration  13: 825807.021 ops/s
# Warmup Iteration  14: 860327.240 ops/s
# Warmup Iteration  15: 867823.928 ops/s
# Warmup Iteration  16: 818593.351 ops/s
# Warmup Iteration  17: 833287.143 ops/s
# Warmup Iteration  18: 846692.224 ops/s
# Warmup Iteration  19: 833423.618 ops/s
# Warmup Iteration  20: 834060.821 ops/s
# Warmup Iteration  21: 830127.824 ops/s
# Warmup Iteration  22: 839090.032 ops/s
# Warmup Iteration  23: 839031.590 ops/s
# Warmup Iteration  24: 842570.668 ops/s
# Warmup Iteration  25: 851779.346 ops/s
# Warmup Iteration  26: 867268.474 ops/s
# Warmup Iteration  27: 845434.031 ops/s
# Warmup Iteration  28: 852624.952 ops/s
# Warmup Iteration  29: 864404.152 ops/s
# Warmup Iteration  30: 821480.151 ops/s
Iteration   1: 819587.387 ops/s
Iteration   2: 831965.081 ops/s
Iteration   3: 839884.881 ops/s
Iteration   4: 819367.168 ops/s
Iteration   5: 844276.270 ops/s
Iteration   6: 811998.881 ops/s
Iteration   7: 813996.888 ops/s
Iteration   8: 837103.603 ops/s
Iteration   9: 819806.088 ops/s
Iteration  10: 814118.059 ops/s
Iteration  11: 816731.517 ops/s
Iteration  12: 824633.815 ops/s
Iteration  13: 835198.040 ops/s
Iteration  14: 854315.546 ops/s
Iteration  15: 860289.841 ops/s
Iteration  16: 867344.983 ops/s
Iteration  17: 861549.574 ops/s
Iteration  18: 833423.148 ops/s
Iteration  19: 822102.687 ops/s
Iteration  20: 827224.358 ops/s
Iteration  21: 832549.472 ops/s
Iteration  22: 843124.342 ops/s
Iteration  23: 827051.610 ops/s
Iteration  24: 827127.783 ops/s
Iteration  25: 820114.864 ops/s
Iteration  26: 822842.287 ops/s
Iteration  27: 823059.966 ops/s
Iteration  28: 827846.487 ops/s
Iteration  29: 842093.600 ops/s
Iteration  30: 832837.491 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.HashBiMapInverseTest._Benchmark.benchmark_putAll":
  831785.524 ±(99.9%) 9754.830 ops/s [Average]
  (min, avg, max) = (811998.881, 831785.524, 867344.983), stdev = 14600.571
  CI (99.9%): [822030.694, 841540.353] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
HashBiMapInverseTest._Benchmark.benchmark_putAll  thrpt   30  831785.524 ± 9754.830  ops/s
----------------------------------------
