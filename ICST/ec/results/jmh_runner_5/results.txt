=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1063630.399 ops/s
# Warmup Iteration   2: 2238253.688 ops/s
# Warmup Iteration   3: 2476049.410 ops/s
# Warmup Iteration   4: 2464618.527 ops/s
# Warmup Iteration   5: 2047737.889 ops/s
# Warmup Iteration   6: 2477213.179 ops/s
# Warmup Iteration   7: 2474576.735 ops/s
# Warmup Iteration   8: 2481181.356 ops/s
# Warmup Iteration   9: 2481073.281 ops/s
# Warmup Iteration  10: 2481632.363 ops/s
# Warmup Iteration  11: 2477327.621 ops/s
# Warmup Iteration  12: 2482884.726 ops/s
# Warmup Iteration  13: 2481735.335 ops/s
# Warmup Iteration  14: 2480029.417 ops/s
# Warmup Iteration  15: 2483232.700 ops/s
# Warmup Iteration  16: 2470749.195 ops/s
# Warmup Iteration  17: 2476530.538 ops/s
# Warmup Iteration  18: 2467961.858 ops/s
# Warmup Iteration  19: 2470490.593 ops/s
# Warmup Iteration  20: 2481270.839 ops/s
# Warmup Iteration  21: 2473257.503 ops/s
# Warmup Iteration  22: 2471740.475 ops/s
# Warmup Iteration  23: 2472871.136 ops/s
# Warmup Iteration  24: 2482418.120 ops/s
# Warmup Iteration  25: 2465639.356 ops/s
# Warmup Iteration  26: 2481788.830 ops/s
# Warmup Iteration  27: 2481197.326 ops/s
# Warmup Iteration  28: 2478643.344 ops/s
# Warmup Iteration  29: 2472975.900 ops/s
# Warmup Iteration  30: 2471645.875 ops/s
Iteration   1: 2469622.522 ops/s
Iteration   2: 2476156.958 ops/s
Iteration   3: 2478540.383 ops/s
Iteration   4: 2480807.676 ops/s
Iteration   5: 2483259.738 ops/s
Iteration   6: 2475100.123 ops/s
Iteration   7: 2473740.127 ops/s
Iteration   8: 2484734.820 ops/s
Iteration   9: 2478798.053 ops/s
Iteration  10: 2478585.291 ops/s
Iteration  11: 2474425.838 ops/s
Iteration  12: 2487753.318 ops/s
Iteration  13: 2482104.662 ops/s
Iteration  14: 2467824.468 ops/s
Iteration  15: 2480529.704 ops/s
Iteration  16: 2478628.820 ops/s
Iteration  17: 2479345.152 ops/s
Iteration  18: 2482568.698 ops/s
Iteration  19: 2485034.828 ops/s
Iteration  20: 2475912.691 ops/s
Iteration  21: 2471984.861 ops/s
Iteration  22: 2485013.447 ops/s
Iteration  23: 2475526.572 ops/s
Iteration  24: 2481636.297 ops/s
Iteration  25: 2465279.494 ops/s
Iteration  26: 2478903.435 ops/s
Iteration  27: 2477606.524 ops/s
Iteration  28: 2472768.696 ops/s
Iteration  29: 2486189.803 ops/s
Iteration  30: 2471207.408 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectWithIndex":
  2477986.347 ±(99.9%) 3726.081 ops/s [Average]
  (min, avg, max) = (2465279.494, 2477986.347, 2487753.318), stdev = 5577.024
  CI (99.9%): [2474260.265, 2481712.428] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectWithIndex  thrpt   30  2477986.347 ± 3726.081  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1204778.627 ops/s
# Warmup Iteration   2: 2743213.992 ops/s
# Warmup Iteration   3: 2875127.186 ops/s
# Warmup Iteration   4: 2696615.461 ops/s
# Warmup Iteration   5: 2557261.976 ops/s
# Warmup Iteration   6: 2868391.028 ops/s
# Warmup Iteration   7: 2861782.902 ops/s
# Warmup Iteration   8: 2853852.493 ops/s
# Warmup Iteration   9: 2836896.968 ops/s
# Warmup Iteration  10: 2857088.404 ops/s
# Warmup Iteration  11: 2861545.596 ops/s
# Warmup Iteration  12: 2866033.418 ops/s
# Warmup Iteration  13: 2864190.807 ops/s
# Warmup Iteration  14: 2860754.928 ops/s
# Warmup Iteration  15: 2863968.579 ops/s
# Warmup Iteration  16: 2865021.362 ops/s
# Warmup Iteration  17: 2858708.422 ops/s
# Warmup Iteration  18: 2869084.022 ops/s
# Warmup Iteration  19: 2843788.928 ops/s
# Warmup Iteration  20: 2845515.162 ops/s
# Warmup Iteration  21: 2856941.075 ops/s
# Warmup Iteration  22: 2861368.837 ops/s
# Warmup Iteration  23: 2854934.865 ops/s
# Warmup Iteration  24: 2862864.069 ops/s
# Warmup Iteration  25: 2852079.820 ops/s
# Warmup Iteration  26: 2860609.020 ops/s
# Warmup Iteration  27: 2863114.742 ops/s
# Warmup Iteration  28: 2856305.473 ops/s
# Warmup Iteration  29: 2865490.500 ops/s
# Warmup Iteration  30: 2862033.243 ops/s
Iteration   1: 2863952.317 ops/s
Iteration   2: 2862008.497 ops/s
Iteration   3: 2858677.186 ops/s
Iteration   4: 2857277.398 ops/s
Iteration   5: 2863443.625 ops/s
Iteration   6: 2858415.094 ops/s
Iteration   7: 2861705.678 ops/s
Iteration   8: 2866931.894 ops/s
Iteration   9: 2863025.089 ops/s
Iteration  10: 2868147.091 ops/s
Iteration  11: 2854046.046 ops/s
Iteration  12: 2859241.256 ops/s
Iteration  13: 2852167.113 ops/s
Iteration  14: 2860112.965 ops/s
Iteration  15: 2850346.233 ops/s
Iteration  16: 2848458.537 ops/s
Iteration  17: 2859454.316 ops/s
Iteration  18: 2851816.425 ops/s
Iteration  19: 2855591.921 ops/s
Iteration  20: 2862873.735 ops/s
Iteration  21: 2862842.513 ops/s
Iteration  22: 2863046.743 ops/s
Iteration  23: 2865289.451 ops/s
Iteration  24: 2867151.036 ops/s
Iteration  25: 2855687.074 ops/s
Iteration  26: 2858347.324 ops/s
Iteration  27: 2861202.827 ops/s
Iteration  28: 2862989.068 ops/s
Iteration  29: 2866662.443 ops/s
Iteration  30: 2862567.828 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectWithIndexWithTarget":
  2860115.957 ±(99.9%) 3436.402 ops/s [Average]
  (min, avg, max) = (2848458.537, 2860115.957, 2868147.091), stdev = 5143.446
  CI (99.9%): [2856679.555, 2863552.360] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  2860115.957 ± 3436.402  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 445532.587 ops/s
# Warmup Iteration   2: 823095.638 ops/s
# Warmup Iteration   3: 952797.876 ops/s
# Warmup Iteration   4: 951443.930 ops/s
# Warmup Iteration   5: 951999.057 ops/s
# Warmup Iteration   6: 791083.961 ops/s
# Warmup Iteration   7: 947606.587 ops/s
# Warmup Iteration   8: 949610.335 ops/s
# Warmup Iteration   9: 950973.198 ops/s
# Warmup Iteration  10: 951346.365 ops/s
# Warmup Iteration  11: 950886.214 ops/s
# Warmup Iteration  12: 950276.372 ops/s
# Warmup Iteration  13: 950160.530 ops/s
# Warmup Iteration  14: 949374.396 ops/s
# Warmup Iteration  15: 951535.971 ops/s
# Warmup Iteration  16: 950453.553 ops/s
# Warmup Iteration  17: 949461.935 ops/s
# Warmup Iteration  18: 949916.073 ops/s
# Warmup Iteration  19: 950765.486 ops/s
# Warmup Iteration  20: 950001.181 ops/s
# Warmup Iteration  21: 951086.752 ops/s
# Warmup Iteration  22: 946301.880 ops/s
# Warmup Iteration  23: 947423.297 ops/s
# Warmup Iteration  24: 948969.590 ops/s
# Warmup Iteration  25: 951302.419 ops/s
# Warmup Iteration  26: 949698.470 ops/s
# Warmup Iteration  27: 946891.072 ops/s
# Warmup Iteration  28: 949133.993 ops/s
# Warmup Iteration  29: 949292.228 ops/s
# Warmup Iteration  30: 951206.744 ops/s
Iteration   1: 947253.914 ops/s
Iteration   2: 947919.435 ops/s
Iteration   3: 942337.083 ops/s
Iteration   4: 941732.619 ops/s
Iteration   5: 938260.014 ops/s
Iteration   6: 949051.537 ops/s
Iteration   7: 950412.476 ops/s
Iteration   8: 949864.886 ops/s
Iteration   9: 952186.168 ops/s
Iteration  10: 950212.978 ops/s
Iteration  11: 951618.097 ops/s
Iteration  12: 949894.339 ops/s
Iteration  13: 948822.533 ops/s
Iteration  14: 951545.463 ops/s
Iteration  15: 949670.193 ops/s
Iteration  16: 951317.638 ops/s
Iteration  17: 952562.844 ops/s
Iteration  18: 949168.046 ops/s
Iteration  19: 951422.613 ops/s
Iteration  20: 949760.662 ops/s
Iteration  21: 948556.096 ops/s
Iteration  22: 952324.958 ops/s
Iteration  23: 949263.578 ops/s
Iteration  24: 950020.236 ops/s
Iteration  25: 948956.214 ops/s
Iteration  26: 947745.780 ops/s
Iteration  27: 950381.460 ops/s
Iteration  28: 946212.133 ops/s
Iteration  29: 951176.274 ops/s
Iteration  30: 950699.550 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectWith_target":
  949011.661 ±(99.9%) 2154.372 ops/s [Average]
  (min, avg, max) = (938260.014, 949011.661, 952562.844), stdev = 3224.562
  CI (99.9%): [946857.289, 951166.032] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectWith_target  thrpt   30  949011.661 ± 2154.372  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collect_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collect_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 645012.050 ops/s
# Warmup Iteration   2: 1382757.861 ops/s
# Warmup Iteration   3: 1493131.651 ops/s
# Warmup Iteration   4: 1503218.308 ops/s
# Warmup Iteration   5: 1248031.016 ops/s
# Warmup Iteration   6: 1499785.528 ops/s
# Warmup Iteration   7: 1501805.526 ops/s
# Warmup Iteration   8: 1496975.839 ops/s
# Warmup Iteration   9: 1502813.120 ops/s
# Warmup Iteration  10: 1499687.834 ops/s
# Warmup Iteration  11: 1499133.153 ops/s
# Warmup Iteration  12: 1501384.624 ops/s
# Warmup Iteration  13: 1502161.270 ops/s
# Warmup Iteration  14: 1500139.011 ops/s
# Warmup Iteration  15: 1497821.517 ops/s
# Warmup Iteration  16: 1501420.067 ops/s
# Warmup Iteration  17: 1501827.046 ops/s
# Warmup Iteration  18: 1506896.603 ops/s
# Warmup Iteration  19: 1502822.266 ops/s
# Warmup Iteration  20: 1506873.446 ops/s
# Warmup Iteration  21: 1508311.489 ops/s
# Warmup Iteration  22: 1506230.461 ops/s
# Warmup Iteration  23: 1506367.244 ops/s
# Warmup Iteration  24: 1505990.093 ops/s
# Warmup Iteration  25: 1503670.222 ops/s
# Warmup Iteration  26: 1503681.422 ops/s
# Warmup Iteration  27: 1501256.590 ops/s
# Warmup Iteration  28: 1495880.208 ops/s
# Warmup Iteration  29: 1504583.034 ops/s
# Warmup Iteration  30: 1505600.211 ops/s
Iteration   1: 1499216.895 ops/s
Iteration   2: 1502096.374 ops/s
Iteration   3: 1501789.746 ops/s
Iteration   4: 1508632.694 ops/s
Iteration   5: 1508335.893 ops/s
Iteration   6: 1498066.840 ops/s
Iteration   7: 1497423.084 ops/s
Iteration   8: 1507044.675 ops/s
Iteration   9: 1504766.621 ops/s
Iteration  10: 1505977.551 ops/s
Iteration  11: 1507214.348 ops/s
Iteration  12: 1508631.450 ops/s
Iteration  13: 1504072.980 ops/s
Iteration  14: 1504689.893 ops/s
Iteration  15: 1508140.591 ops/s
Iteration  16: 1505487.232 ops/s
Iteration  17: 1504151.254 ops/s
Iteration  18: 1504889.293 ops/s
Iteration  19: 1505418.319 ops/s
Iteration  20: 1503442.654 ops/s
Iteration  21: 1503973.488 ops/s
Iteration  22: 1505100.707 ops/s
Iteration  23: 1504370.191 ops/s
Iteration  24: 1506181.665 ops/s
Iteration  25: 1501918.774 ops/s
Iteration  26: 1504716.698 ops/s
Iteration  27: 1502794.383 ops/s
Iteration  28: 1496651.151 ops/s
Iteration  29: 1500229.243 ops/s
Iteration  30: 1503247.704 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collect_target":
  1503955.746 ±(99.9%) 2148.055 ops/s [Average]
  (min, avg, max) = (1496651.151, 1503955.746, 1508632.694), stdev = 3215.108
  CI (99.9%): [1501807.691, 1506103.801] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collect_target  thrpt   30  1503955.746 ± 2148.055  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_compareTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_compareTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 89360.141 ops/s
# Warmup Iteration   2: 153208.372 ops/s
# Warmup Iteration   3: 178159.663 ops/s
# Warmup Iteration   4: 179399.401 ops/s
# Warmup Iteration   5: 179201.793 ops/s
# Warmup Iteration   6: 148520.307 ops/s
# Warmup Iteration   7: 179475.760 ops/s
# Warmup Iteration   8: 179247.667 ops/s
# Warmup Iteration   9: 179703.407 ops/s
# Warmup Iteration  10: 179240.999 ops/s
# Warmup Iteration  11: 179538.445 ops/s
# Warmup Iteration  12: 179382.234 ops/s
# Warmup Iteration  13: 178995.793 ops/s
# Warmup Iteration  14: 178829.242 ops/s
# Warmup Iteration  15: 179495.245 ops/s
# Warmup Iteration  16: 179503.973 ops/s
# Warmup Iteration  17: 179606.381 ops/s
# Warmup Iteration  18: 179544.035 ops/s
# Warmup Iteration  19: 179632.201 ops/s
# Warmup Iteration  20: 179509.364 ops/s
# Warmup Iteration  21: 179573.911 ops/s
# Warmup Iteration  22: 179385.444 ops/s
# Warmup Iteration  23: 178931.139 ops/s
# Warmup Iteration  24: 179358.700 ops/s
# Warmup Iteration  25: 179544.225 ops/s
# Warmup Iteration  26: 179279.824 ops/s
# Warmup Iteration  27: 179640.372 ops/s
# Warmup Iteration  28: 179615.483 ops/s
# Warmup Iteration  29: 179522.271 ops/s
# Warmup Iteration  30: 179466.094 ops/s
Iteration   1: 179590.699 ops/s
Iteration   2: 178775.892 ops/s
Iteration   3: 178931.305 ops/s
Iteration   4: 179593.566 ops/s
Iteration   5: 179937.129 ops/s
Iteration   6: 179743.847 ops/s
Iteration   7: 179446.828 ops/s
Iteration   8: 179723.453 ops/s
Iteration   9: 179560.561 ops/s
Iteration  10: 179676.871 ops/s
Iteration  11: 179374.057 ops/s
Iteration  12: 179779.886 ops/s
Iteration  13: 179409.520 ops/s
Iteration  14: 179911.818 ops/s
Iteration  15: 179511.575 ops/s
Iteration  16: 179602.456 ops/s
Iteration  17: 179261.600 ops/s
Iteration  18: 179628.568 ops/s
Iteration  19: 179337.540 ops/s
Iteration  20: 179889.953 ops/s
Iteration  21: 179321.122 ops/s
Iteration  22: 179510.349 ops/s
Iteration  23: 179362.317 ops/s
Iteration  24: 179401.006 ops/s
Iteration  25: 179227.639 ops/s
Iteration  26: 179090.352 ops/s
Iteration  27: 179867.925 ops/s
Iteration  28: 179286.511 ops/s
Iteration  29: 180150.847 ops/s
Iteration  30: 178697.432 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_compareTo":
  179486.754 ±(99.9%) 224.818 ops/s [Average]
  (min, avg, max) = (178697.432, 179486.754, 180150.847), stdev = 336.496
  CI (99.9%): [179261.937, 179711.572] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_compareTo  thrpt   30  179486.754 ± 224.818  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1059633.361 ops/s
# Warmup Iteration   2: 2685272.827 ops/s
# Warmup Iteration   3: 2696249.777 ops/s
# Warmup Iteration   4: 2242455.300 ops/s
# Warmup Iteration   5: 2706314.034 ops/s
# Warmup Iteration   6: 2712566.575 ops/s
# Warmup Iteration   7: 2705253.167 ops/s
# Warmup Iteration   8: 2707962.357 ops/s
# Warmup Iteration   9: 2701459.937 ops/s
# Warmup Iteration  10: 2709564.112 ops/s
# Warmup Iteration  11: 2710186.215 ops/s
# Warmup Iteration  12: 2707340.372 ops/s
# Warmup Iteration  13: 2708522.893 ops/s
# Warmup Iteration  14: 2702078.306 ops/s
# Warmup Iteration  15: 2711741.856 ops/s
# Warmup Iteration  16: 2711496.046 ops/s
# Warmup Iteration  17: 2705654.896 ops/s
# Warmup Iteration  18: 2710218.323 ops/s
# Warmup Iteration  19: 2706355.072 ops/s
# Warmup Iteration  20: 2704333.578 ops/s
# Warmup Iteration  21: 2704851.227 ops/s
# Warmup Iteration  22: 2710175.020 ops/s
# Warmup Iteration  23: 2706367.074 ops/s
# Warmup Iteration  24: 2709903.703 ops/s
# Warmup Iteration  25: 2713855.785 ops/s
# Warmup Iteration  26: 2712785.938 ops/s
# Warmup Iteration  27: 2710470.708 ops/s
# Warmup Iteration  28: 2713138.501 ops/s
# Warmup Iteration  29: 2707517.896 ops/s
# Warmup Iteration  30: 2700340.471 ops/s
Iteration   1: 2711253.260 ops/s
Iteration   2: 2706673.311 ops/s
Iteration   3: 2711275.524 ops/s
Iteration   4: 2708436.339 ops/s
Iteration   5: 2705074.706 ops/s
Iteration   6: 2708897.305 ops/s
Iteration   7: 2706717.222 ops/s
Iteration   8: 2708028.589 ops/s
Iteration   9: 2701006.083 ops/s
Iteration  10: 2711302.249 ops/s
Iteration  11: 2709869.043 ops/s
Iteration  12: 2703072.601 ops/s
Iteration  13: 2707001.201 ops/s
Iteration  14: 2701338.820 ops/s
Iteration  15: 2707286.264 ops/s
Iteration  16: 2714950.581 ops/s
Iteration  17: 2702566.384 ops/s
Iteration  18: 2710668.623 ops/s
Iteration  19: 2707876.381 ops/s
Iteration  20: 2707505.087 ops/s
Iteration  21: 2705221.730 ops/s
Iteration  22: 2702455.652 ops/s
Iteration  23: 2707375.482 ops/s
Iteration  24: 2707227.334 ops/s
Iteration  25: 2697437.404 ops/s
Iteration  26: 2704492.784 ops/s
Iteration  27: 2712904.785 ops/s
Iteration  28: 2710395.636 ops/s
Iteration  29: 2706455.268 ops/s
Iteration  30: 2705197.323 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_contains":
  2706998.766 ±(99.9%) 2561.394 ops/s [Average]
  (min, avg, max) = (2697437.404, 2706998.766, 2714950.581), stdev = 3833.774
  CI (99.9%): [2704437.372, 2709560.160] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_contains  thrpt   30  2706998.766 ± 2561.394  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1488873.438 ops/s
# Warmup Iteration   2: 2848914.963 ops/s
# Warmup Iteration   3: 3175695.267 ops/s
# Warmup Iteration   4: 3179169.579 ops/s
# Warmup Iteration   5: 2714387.246 ops/s
# Warmup Iteration   6: 3077950.650 ops/s
# Warmup Iteration   7: 3181904.045 ops/s
# Warmup Iteration   8: 3178426.340 ops/s
# Warmup Iteration   9: 3178162.615 ops/s
# Warmup Iteration  10: 3178763.857 ops/s
# Warmup Iteration  11: 3180047.725 ops/s
# Warmup Iteration  12: 3180244.622 ops/s
# Warmup Iteration  13: 3181967.001 ops/s
# Warmup Iteration  14: 3176379.883 ops/s
# Warmup Iteration  15: 3181438.735 ops/s
# Warmup Iteration  16: 3178778.732 ops/s
# Warmup Iteration  17: 3181125.178 ops/s
# Warmup Iteration  18: 3178237.115 ops/s
# Warmup Iteration  19: 3178549.286 ops/s
# Warmup Iteration  20: 3168339.367 ops/s
# Warmup Iteration  21: 3181461.006 ops/s
# Warmup Iteration  22: 3182537.547 ops/s
# Warmup Iteration  23: 3183889.971 ops/s
# Warmup Iteration  24: 3178358.232 ops/s
# Warmup Iteration  25: 3179994.708 ops/s
# Warmup Iteration  26: 3180485.818 ops/s
# Warmup Iteration  27: 3179990.673 ops/s
# Warmup Iteration  28: 3177511.789 ops/s
# Warmup Iteration  29: 3182258.571 ops/s
# Warmup Iteration  30: 3167617.533 ops/s
Iteration   1: 3178003.438 ops/s
Iteration   2: 3180902.662 ops/s
Iteration   3: 3186964.359 ops/s
Iteration   4: 3167922.111 ops/s
Iteration   5: 3173926.601 ops/s
Iteration   6: 3186058.903 ops/s
Iteration   7: 3181965.916 ops/s
Iteration   8: 3163661.241 ops/s
Iteration   9: 3179301.407 ops/s
Iteration  10: 3180411.390 ops/s
Iteration  11: 3184526.552 ops/s
Iteration  12: 3172733.790 ops/s
Iteration  13: 3175491.003 ops/s
Iteration  14: 3183632.737 ops/s
Iteration  15: 3165550.950 ops/s
Iteration  16: 3180839.009 ops/s
Iteration  17: 3186254.819 ops/s
Iteration  18: 3180094.313 ops/s
Iteration  19: 3167343.896 ops/s
Iteration  20: 3167441.600 ops/s
Iteration  21: 3160587.139 ops/s
Iteration  22: 3156301.277 ops/s
Iteration  23: 3162577.814 ops/s
Iteration  24: 3160205.747 ops/s
Iteration  25: 3181680.551 ops/s
Iteration  26: 3178436.730 ops/s
Iteration  27: 3181397.656 ops/s
Iteration  28: 3182300.541 ops/s
Iteration  29: 3177944.151 ops/s
Iteration  30: 3184105.458 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_containsAll":
  3175618.792 ±(99.9%) 5961.791 ops/s [Average]
  (min, avg, max) = (3156301.277, 3175618.792, 3186964.359), stdev = 8923.329
  CI (99.9%): [3169657.001, 3181580.583] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_containsAll  thrpt   30  3175618.792 ± 5961.791  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1495048.112 ops/s
# Warmup Iteration   2: 2748729.977 ops/s
# Warmup Iteration   3: 3148896.710 ops/s
# Warmup Iteration   4: 3154355.857 ops/s
# Warmup Iteration   5: 3123728.295 ops/s
# Warmup Iteration   6: 2620471.782 ops/s
# Warmup Iteration   7: 3173526.242 ops/s
# Warmup Iteration   8: 3172130.745 ops/s
# Warmup Iteration   9: 3169083.796 ops/s
# Warmup Iteration  10: 3173593.142 ops/s
# Warmup Iteration  11: 3173022.349 ops/s
# Warmup Iteration  12: 3170582.975 ops/s
# Warmup Iteration  13: 3155884.309 ops/s
# Warmup Iteration  14: 3167177.321 ops/s
# Warmup Iteration  15: 3163903.723 ops/s
# Warmup Iteration  16: 3161796.882 ops/s
# Warmup Iteration  17: 3118700.732 ops/s
# Warmup Iteration  18: 3164217.953 ops/s
# Warmup Iteration  19: 3169602.224 ops/s
# Warmup Iteration  20: 3174870.348 ops/s
# Warmup Iteration  21: 3171977.779 ops/s
# Warmup Iteration  22: 3173492.131 ops/s
# Warmup Iteration  23: 3173008.921 ops/s
# Warmup Iteration  24: 3177032.689 ops/s
# Warmup Iteration  25: 3173054.793 ops/s
# Warmup Iteration  26: 3171782.339 ops/s
# Warmup Iteration  27: 3168728.882 ops/s
# Warmup Iteration  28: 3175685.789 ops/s
# Warmup Iteration  29: 3174394.332 ops/s
# Warmup Iteration  30: 3176084.364 ops/s
Iteration   1: 3176369.851 ops/s
Iteration   2: 3177736.305 ops/s
Iteration   3: 3167783.609 ops/s
Iteration   4: 3173552.507 ops/s
Iteration   5: 3181154.618 ops/s
Iteration   6: 3170095.277 ops/s
Iteration   7: 3180423.167 ops/s
Iteration   8: 3171573.533 ops/s
Iteration   9: 3172702.044 ops/s
Iteration  10: 3170956.976 ops/s
Iteration  11: 3167482.137 ops/s
Iteration  12: 3174279.016 ops/s
Iteration  13: 3169491.216 ops/s
Iteration  14: 3163722.876 ops/s
Iteration  15: 3163745.771 ops/s
Iteration  16: 3155087.780 ops/s
Iteration  17: 3173473.730 ops/s
Iteration  18: 3173505.376 ops/s
Iteration  19: 3161402.641 ops/s
Iteration  20: 3126896.541 ops/s
Iteration  21: 3167827.085 ops/s
Iteration  22: 3169207.828 ops/s
Iteration  23: 3173429.048 ops/s
Iteration  24: 3171900.341 ops/s
Iteration  25: 3180329.548 ops/s
Iteration  26: 3174120.796 ops/s
Iteration  27: 3168416.803 ops/s
Iteration  28: 3175822.505 ops/s
Iteration  29: 3145375.269 ops/s
Iteration  30: 3164228.564 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_containsAllArray":
  3168736.425 ±(99.9%) 7251.518 ops/s [Average]
  (min, avg, max) = (3126896.541, 3168736.425, 3181154.618), stdev = 10853.732
  CI (99.9%): [3161484.907, 3175987.943] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_containsAllArray  thrpt   30  3168736.425 ± 7251.518  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1504924.551 ops/s
# Warmup Iteration   2: 2905468.433 ops/s
# Warmup Iteration   3: 3206764.884 ops/s
# Warmup Iteration   4: 3234874.775 ops/s
# Warmup Iteration   5: 2652896.969 ops/s
# Warmup Iteration   6: 3222241.096 ops/s
# Warmup Iteration   7: 3234259.281 ops/s
# Warmup Iteration   8: 3234575.822 ops/s
# Warmup Iteration   9: 3221283.887 ops/s
# Warmup Iteration  10: 3232050.782 ops/s
# Warmup Iteration  11: 3234380.078 ops/s
# Warmup Iteration  12: 3224842.389 ops/s
# Warmup Iteration  13: 3228581.888 ops/s
# Warmup Iteration  14: 3235294.053 ops/s
# Warmup Iteration  15: 3233144.359 ops/s
# Warmup Iteration  16: 3235922.453 ops/s
# Warmup Iteration  17: 3238636.812 ops/s
# Warmup Iteration  18: 3236152.676 ops/s
# Warmup Iteration  19: 3234581.310 ops/s
# Warmup Iteration  20: 3236688.924 ops/s
# Warmup Iteration  21: 3228074.598 ops/s
# Warmup Iteration  22: 3234693.445 ops/s
# Warmup Iteration  23: 3235576.847 ops/s
# Warmup Iteration  24: 3235380.116 ops/s
# Warmup Iteration  25: 3228740.439 ops/s
# Warmup Iteration  26: 3234330.514 ops/s
# Warmup Iteration  27: 3235477.820 ops/s
# Warmup Iteration  28: 3229940.691 ops/s
# Warmup Iteration  29: 3226999.526 ops/s
# Warmup Iteration  30: 3230507.349 ops/s
Iteration   1: 3234957.262 ops/s
Iteration   2: 3238515.642 ops/s
Iteration   3: 3228285.649 ops/s
Iteration   4: 3229507.614 ops/s
Iteration   5: 3239185.363 ops/s
Iteration   6: 3224265.659 ops/s
Iteration   7: 3228161.979 ops/s
Iteration   8: 3243038.837 ops/s
Iteration   9: 3228264.342 ops/s
Iteration  10: 3230079.120 ops/s
Iteration  11: 3242015.758 ops/s
Iteration  12: 3235062.536 ops/s
Iteration  13: 3235720.333 ops/s
Iteration  14: 3237635.215 ops/s
Iteration  15: 3232135.649 ops/s
Iteration  16: 3230876.197 ops/s
Iteration  17: 3234740.175 ops/s
Iteration  18: 3227304.644 ops/s
Iteration  19: 3237468.795 ops/s
Iteration  20: 3237842.468 ops/s
Iteration  21: 3230383.014 ops/s
Iteration  22: 3239724.391 ops/s
Iteration  23: 3224827.210 ops/s
Iteration  24: 3229289.259 ops/s
Iteration  25: 3240202.716 ops/s
Iteration  26: 3235274.699 ops/s
Iteration  27: 3233068.223 ops/s
Iteration  28: 3236975.727 ops/s
Iteration  29: 3228670.292 ops/s
Iteration  30: 3234204.429 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_containsAllIterable":
  3233589.440 ±(99.9%) 3402.651 ops/s [Average]
  (min, avg, max) = (3224265.659, 3233589.440, 3243038.837), stdev = 5092.928
  CI (99.9%): [3230186.789, 3236992.091] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_containsAllIterable  thrpt   30  3233589.440 ± 3402.651  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 258852.796 ops/s
# Warmup Iteration   2: 447085.402 ops/s
# Warmup Iteration   3: 517810.137 ops/s
# Warmup Iteration   4: 519824.928 ops/s
# Warmup Iteration   5: 519833.749 ops/s
# Warmup Iteration   6: 430790.200 ops/s
# Warmup Iteration   7: 519652.746 ops/s
# Warmup Iteration   8: 519614.206 ops/s
# Warmup Iteration   9: 518304.282 ops/s
# Warmup Iteration  10: 520171.208 ops/s
# Warmup Iteration  11: 519043.786 ops/s
# Warmup Iteration  12: 519670.924 ops/s
# Warmup Iteration  13: 519859.271 ops/s
# Warmup Iteration  14: 515661.737 ops/s
# Warmup Iteration  15: 519016.415 ops/s
# Warmup Iteration  16: 519033.945 ops/s
# Warmup Iteration  17: 518380.390 ops/s
# Warmup Iteration  18: 518535.353 ops/s
# Warmup Iteration  19: 519534.966 ops/s
# Warmup Iteration  20: 519250.546 ops/s
# Warmup Iteration  21: 519612.071 ops/s
# Warmup Iteration  22: 520228.577 ops/s
# Warmup Iteration  23: 519810.826 ops/s
# Warmup Iteration  24: 519207.906 ops/s
# Warmup Iteration  25: 519501.479 ops/s
# Warmup Iteration  26: 520653.575 ops/s
# Warmup Iteration  27: 519384.333 ops/s
# Warmup Iteration  28: 519196.615 ops/s
# Warmup Iteration  29: 519953.260 ops/s
# Warmup Iteration  30: 519146.718 ops/s
Iteration   1: 520710.284 ops/s
Iteration   2: 518645.320 ops/s
Iteration   3: 519577.616 ops/s
Iteration   4: 517488.635 ops/s
Iteration   5: 520326.373 ops/s
Iteration   6: 518228.483 ops/s
Iteration   7: 519367.630 ops/s
Iteration   8: 519403.221 ops/s
Iteration   9: 518343.192 ops/s
Iteration  10: 517975.323 ops/s
Iteration  11: 517121.608 ops/s
Iteration  12: 519916.077 ops/s
Iteration  13: 519210.750 ops/s
Iteration  14: 519996.684 ops/s
Iteration  15: 516589.261 ops/s
Iteration  16: 519473.521 ops/s
Iteration  17: 517799.050 ops/s
Iteration  18: 517197.158 ops/s
Iteration  19: 516887.452 ops/s
Iteration  20: 518223.329 ops/s
Iteration  21: 520103.103 ops/s
Iteration  22: 519357.317 ops/s
Iteration  23: 520061.832 ops/s
Iteration  24: 519020.161 ops/s
Iteration  25: 519778.055 ops/s
Iteration  26: 518447.819 ops/s
Iteration  27: 520146.858 ops/s
Iteration  28: 518960.860 ops/s
Iteration  29: 516936.556 ops/s
Iteration  30: 517513.240 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_corresponds":
  518760.226 ±(99.9%) 789.013 ops/s [Average]
  (min, avg, max) = (516589.261, 518760.226, 520710.284), stdev = 1180.958
  CI (99.9%): [517971.213, 519549.239] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_corresponds  thrpt   30  518760.226 ± 789.013  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1546022.115 ops/s
# Warmup Iteration   2: 3135423.561 ops/s
# Warmup Iteration   3: 3442364.230 ops/s
# Warmup Iteration   4: 3466063.708 ops/s
# Warmup Iteration   5: 2858074.132 ops/s
# Warmup Iteration   6: 3482256.314 ops/s
# Warmup Iteration   7: 3479044.703 ops/s
# Warmup Iteration   8: 3475459.424 ops/s
# Warmup Iteration   9: 3475535.910 ops/s
# Warmup Iteration  10: 3475149.905 ops/s
# Warmup Iteration  11: 3470949.487 ops/s
# Warmup Iteration  12: 3468605.993 ops/s
# Warmup Iteration  13: 3477230.353 ops/s
# Warmup Iteration  14: 3473461.795 ops/s
# Warmup Iteration  15: 3479468.268 ops/s
# Warmup Iteration  16: 3472245.764 ops/s
# Warmup Iteration  17: 3470421.739 ops/s
# Warmup Iteration  18: 3481728.975 ops/s
# Warmup Iteration  19: 3473528.015 ops/s
# Warmup Iteration  20: 3467339.993 ops/s
# Warmup Iteration  21: 3471122.003 ops/s
# Warmup Iteration  22: 3456265.071 ops/s
# Warmup Iteration  23: 3470754.247 ops/s
# Warmup Iteration  24: 3473142.212 ops/s
# Warmup Iteration  25: 3480734.269 ops/s
# Warmup Iteration  26: 3479634.298 ops/s
# Warmup Iteration  27: 3478315.925 ops/s
# Warmup Iteration  28: 3482599.298 ops/s
# Warmup Iteration  29: 3475116.300 ops/s
# Warmup Iteration  30: 3476036.216 ops/s
Iteration   1: 3466756.903 ops/s
Iteration   2: 3463614.721 ops/s
Iteration   3: 3461655.586 ops/s
Iteration   4: 3471524.278 ops/s
Iteration   5: 3470730.320 ops/s
Iteration   6: 3472640.529 ops/s
Iteration   7: 3475337.114 ops/s
Iteration   8: 3470564.223 ops/s
Iteration   9: 3459352.618 ops/s
Iteration  10: 3453300.616 ops/s
Iteration  11: 3464738.670 ops/s
Iteration  12: 3486144.918 ops/s
Iteration  13: 3472705.643 ops/s
Iteration  14: 3477249.148 ops/s
Iteration  15: 3483472.591 ops/s
Iteration  16: 3478254.751 ops/s
Iteration  17: 3468868.546 ops/s
Iteration  18: 3478261.292 ops/s
Iteration  19: 3467211.493 ops/s
Iteration  20: 3466999.174 ops/s
Iteration  21: 3473416.271 ops/s
Iteration  22: 3485861.407 ops/s
Iteration  23: 3476609.443 ops/s
Iteration  24: 3459337.210 ops/s
Iteration  25: 3476227.206 ops/s
Iteration  26: 3495905.274 ops/s
Iteration  27: 3474808.765 ops/s
Iteration  28: 3460961.536 ops/s
Iteration  29: 3485415.268 ops/s
Iteration  30: 3474860.648 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_count":
  3472426.205 ±(99.9%) 6272.286 ops/s [Average]
  (min, avg, max) = (3453300.616, 3472426.205, 3495905.274), stdev = 9388.063
  CI (99.9%): [3466153.920, 3478698.491] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_count  thrpt   30  3472426.205 ± 6272.286  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 677343.477 ops/s
# Warmup Iteration   2: 1277375.844 ops/s
# Warmup Iteration   3: 1475626.534 ops/s
# Warmup Iteration   4: 1474170.978 ops/s
# Warmup Iteration   5: 1447130.678 ops/s
# Warmup Iteration   6: 1245712.290 ops/s
# Warmup Iteration   7: 1469279.416 ops/s
# Warmup Iteration   8: 1474046.459 ops/s
# Warmup Iteration   9: 1473314.996 ops/s
# Warmup Iteration  10: 1472216.279 ops/s
# Warmup Iteration  11: 1472917.169 ops/s
# Warmup Iteration  12: 1471621.215 ops/s
# Warmup Iteration  13: 1471712.277 ops/s
# Warmup Iteration  14: 1473264.232 ops/s
# Warmup Iteration  15: 1470539.509 ops/s
# Warmup Iteration  16: 1473213.371 ops/s
# Warmup Iteration  17: 1465626.000 ops/s
# Warmup Iteration  18: 1472172.428 ops/s
# Warmup Iteration  19: 1464155.852 ops/s
# Warmup Iteration  20: 1471639.602 ops/s
# Warmup Iteration  21: 1469709.644 ops/s
# Warmup Iteration  22: 1469349.255 ops/s
# Warmup Iteration  23: 1471687.889 ops/s
# Warmup Iteration  24: 1470902.877 ops/s
# Warmup Iteration  25: 1472426.109 ops/s
# Warmup Iteration  26: 1471808.097 ops/s
# Warmup Iteration  27: 1472747.279 ops/s
# Warmup Iteration  28: 1471134.041 ops/s
# Warmup Iteration  29: 1467276.556 ops/s
# Warmup Iteration  30: 1471263.736 ops/s
Iteration   1: 1469830.852 ops/s
Iteration   2: 1471974.040 ops/s
Iteration   3: 1470372.759 ops/s
Iteration   4: 1470023.592 ops/s
Iteration   5: 1473984.950 ops/s
Iteration   6: 1466757.440 ops/s
Iteration   7: 1468937.034 ops/s
Iteration   8: 1474760.991 ops/s
Iteration   9: 1468829.755 ops/s
Iteration  10: 1476536.996 ops/s
Iteration  11: 1468159.641 ops/s
Iteration  12: 1472915.441 ops/s
Iteration  13: 1471456.357 ops/s
Iteration  14: 1469160.690 ops/s
Iteration  15: 1471018.737 ops/s
Iteration  16: 1462880.807 ops/s
Iteration  17: 1471887.650 ops/s
Iteration  18: 1456917.621 ops/s
Iteration  19: 1470751.078 ops/s
Iteration  20: 1468350.888 ops/s
Iteration  21: 1473091.288 ops/s
Iteration  22: 1470833.618 ops/s
Iteration  23: 1473463.259 ops/s
Iteration  24: 1470478.768 ops/s
Iteration  25: 1474067.306 ops/s
Iteration  26: 1477349.466 ops/s
Iteration  27: 1471626.799 ops/s
Iteration  28: 1474219.093 ops/s
Iteration  29: 1465681.507 ops/s
Iteration  30: 1470336.312 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_countBy":
  1470555.158 ±(99.9%) 2677.578 ops/s [Average]
  (min, avg, max) = (1456917.621, 1470555.158, 1477349.466), stdev = 4007.673
  CI (99.9%): [1467877.580, 1473232.736] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_countBy  thrpt   30  1470555.158 ± 2677.578  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 275422.675 ops/s
# Warmup Iteration   2: 525308.444 ops/s
# Warmup Iteration   3: 606288.974 ops/s
# Warmup Iteration   4: 610384.516 ops/s
# Warmup Iteration   5: 611555.244 ops/s
# Warmup Iteration   6: 508859.778 ops/s
# Warmup Iteration   7: 611357.259 ops/s
# Warmup Iteration   8: 610608.428 ops/s
# Warmup Iteration   9: 609698.171 ops/s
# Warmup Iteration  10: 611066.754 ops/s
# Warmup Iteration  11: 608941.488 ops/s
# Warmup Iteration  12: 611223.585 ops/s
# Warmup Iteration  13: 608961.423 ops/s
# Warmup Iteration  14: 609401.459 ops/s
# Warmup Iteration  15: 611223.990 ops/s
# Warmup Iteration  16: 609305.413 ops/s
# Warmup Iteration  17: 609772.941 ops/s
# Warmup Iteration  18: 607590.658 ops/s
# Warmup Iteration  19: 607388.640 ops/s
# Warmup Iteration  20: 609805.898 ops/s
# Warmup Iteration  21: 608405.451 ops/s
# Warmup Iteration  22: 608375.136 ops/s
# Warmup Iteration  23: 610242.531 ops/s
# Warmup Iteration  24: 609983.963 ops/s
# Warmup Iteration  25: 610273.799 ops/s
# Warmup Iteration  26: 609689.542 ops/s
# Warmup Iteration  27: 609701.833 ops/s
# Warmup Iteration  28: 611229.746 ops/s
# Warmup Iteration  29: 610118.036 ops/s
# Warmup Iteration  30: 608344.485 ops/s
Iteration   1: 611062.690 ops/s
Iteration   2: 609758.099 ops/s
Iteration   3: 610246.398 ops/s
Iteration   4: 611451.740 ops/s
Iteration   5: 610329.862 ops/s
Iteration   6: 611472.110 ops/s
Iteration   7: 610146.244 ops/s
Iteration   8: 612016.179 ops/s
Iteration   9: 609804.978 ops/s
Iteration  10: 609408.379 ops/s
Iteration  11: 609726.027 ops/s
Iteration  12: 608440.449 ops/s
Iteration  13: 610495.135 ops/s
Iteration  14: 609251.373 ops/s
Iteration  15: 610229.040 ops/s
Iteration  16: 610978.215 ops/s
Iteration  17: 610257.164 ops/s
Iteration  18: 609553.121 ops/s
Iteration  19: 608988.035 ops/s
Iteration  20: 610331.618 ops/s
Iteration  21: 611183.807 ops/s
Iteration  22: 610204.905 ops/s
Iteration  23: 611657.157 ops/s
Iteration  24: 610516.772 ops/s
Iteration  25: 610974.631 ops/s
Iteration  26: 610545.777 ops/s
Iteration  27: 610200.699 ops/s
Iteration  28: 611628.331 ops/s
Iteration  29: 610094.686 ops/s
Iteration  30: 611655.518 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_countByEach":
  610420.305 ±(99.9%) 577.600 ops/s [Average]
  (min, avg, max) = (608440.449, 610420.305, 612016.179), stdev = 864.524
  CI (99.9%): [609842.705, 610997.905] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_countByEach  thrpt   30  610420.305 ± 577.600  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 669076.124 ops/s
# Warmup Iteration   2: 1284813.038 ops/s
# Warmup Iteration   3: 1467736.665 ops/s
# Warmup Iteration   4: 1476176.593 ops/s
# Warmup Iteration   5: 1364414.658 ops/s
# Warmup Iteration   6: 1331175.047 ops/s
# Warmup Iteration   7: 1480294.563 ops/s
# Warmup Iteration   8: 1478738.560 ops/s
# Warmup Iteration   9: 1479718.564 ops/s
# Warmup Iteration  10: 1472809.278 ops/s
# Warmup Iteration  11: 1476797.985 ops/s
# Warmup Iteration  12: 1476736.667 ops/s
# Warmup Iteration  13: 1478637.337 ops/s
# Warmup Iteration  14: 1477658.160 ops/s
# Warmup Iteration  15: 1471367.947 ops/s
# Warmup Iteration  16: 1473503.324 ops/s
# Warmup Iteration  17: 1474176.125 ops/s
# Warmup Iteration  18: 1476257.235 ops/s
# Warmup Iteration  19: 1474038.096 ops/s
# Warmup Iteration  20: 1479916.470 ops/s
# Warmup Iteration  21: 1473800.214 ops/s
# Warmup Iteration  22: 1468711.937 ops/s
# Warmup Iteration  23: 1476359.226 ops/s
# Warmup Iteration  24: 1471850.203 ops/s
# Warmup Iteration  25: 1480790.624 ops/s
# Warmup Iteration  26: 1476664.730 ops/s
# Warmup Iteration  27: 1473297.770 ops/s
# Warmup Iteration  28: 1476485.755 ops/s
# Warmup Iteration  29: 1477738.869 ops/s
# Warmup Iteration  30: 1479837.736 ops/s
Iteration   1: 1476568.680 ops/s
Iteration   2: 1477942.823 ops/s
Iteration   3: 1479259.755 ops/s
Iteration   4: 1476578.892 ops/s
Iteration   5: 1474199.037 ops/s
Iteration   6: 1474122.543 ops/s
Iteration   7: 1478526.090 ops/s
Iteration   8: 1480776.586 ops/s
Iteration   9: 1478203.002 ops/s
Iteration  10: 1479333.808 ops/s
Iteration  11: 1480178.565 ops/s
Iteration  12: 1476418.958 ops/s
Iteration  13: 1476805.881 ops/s
Iteration  14: 1480843.603 ops/s
Iteration  15: 1477647.819 ops/s
Iteration  16: 1477091.069 ops/s
Iteration  17: 1470458.662 ops/s
Iteration  18: 1469718.999 ops/s
Iteration  19: 1478145.591 ops/s
Iteration  20: 1477661.314 ops/s
Iteration  21: 1476789.471 ops/s
Iteration  22: 1479768.669 ops/s
Iteration  23: 1468895.483 ops/s
Iteration  24: 1479710.889 ops/s
Iteration  25: 1477716.881 ops/s
Iteration  26: 1477650.315 ops/s
Iteration  27: 1478335.979 ops/s
Iteration  28: 1476842.011 ops/s
Iteration  29: 1479221.944 ops/s
Iteration  30: 1478039.953 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_countByWith":
  1477115.109 ±(99.9%) 1993.985 ops/s [Average]
  (min, avg, max) = (1468895.483, 1477115.109, 1480843.603), stdev = 2984.504
  CI (99.9%): [1475121.124, 1479109.095] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_countByWith  thrpt   30  1477115.109 ± 1993.985  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1508611.768 ops/s
# Warmup Iteration   2: 3080371.691 ops/s
# Warmup Iteration   3: 3364062.856 ops/s
# Warmup Iteration   4: 3382669.139 ops/s
# Warmup Iteration   5: 2787375.268 ops/s
# Warmup Iteration   6: 3388671.646 ops/s
# Warmup Iteration   7: 3381594.214 ops/s
# Warmup Iteration   8: 3390971.385 ops/s
# Warmup Iteration   9: 3386735.386 ops/s
# Warmup Iteration  10: 3382049.566 ops/s
# Warmup Iteration  11: 3385240.935 ops/s
# Warmup Iteration  12: 3383784.242 ops/s
# Warmup Iteration  13: 3386317.202 ops/s
# Warmup Iteration  14: 3384498.429 ops/s
# Warmup Iteration  15: 3386635.788 ops/s
# Warmup Iteration  16: 3387277.051 ops/s
# Warmup Iteration  17: 3385859.468 ops/s
# Warmup Iteration  18: 3378581.469 ops/s
# Warmup Iteration  19: 3379888.263 ops/s
# Warmup Iteration  20: 3385137.671 ops/s
# Warmup Iteration  21: 3385298.963 ops/s
# Warmup Iteration  22: 3382561.470 ops/s
# Warmup Iteration  23: 3385001.733 ops/s
# Warmup Iteration  24: 3380373.593 ops/s
# Warmup Iteration  25: 3386737.110 ops/s
# Warmup Iteration  26: 3386983.779 ops/s
# Warmup Iteration  27: 3377028.435 ops/s
# Warmup Iteration  28: 3385014.256 ops/s
# Warmup Iteration  29: 3376747.029 ops/s
# Warmup Iteration  30: 3383282.493 ops/s
Iteration   1: 3384149.264 ops/s
Iteration   2: 3378266.017 ops/s
Iteration   3: 3373475.235 ops/s
Iteration   4: 3386333.987 ops/s
Iteration   5: 3385023.442 ops/s
Iteration   6: 3394009.757 ops/s
Iteration   7: 3389741.263 ops/s
Iteration   8: 3391650.057 ops/s
Iteration   9: 3392816.029 ops/s
Iteration  10: 3387760.290 ops/s
Iteration  11: 3385395.180 ops/s
Iteration  12: 3390335.070 ops/s
Iteration  13: 3386034.473 ops/s
Iteration  14: 3384240.102 ops/s
Iteration  15: 3388007.405 ops/s
Iteration  16: 3381950.224 ops/s
Iteration  17: 3370164.163 ops/s
Iteration  18: 3383303.096 ops/s
Iteration  19: 3390830.046 ops/s
Iteration  20: 3388347.337 ops/s
Iteration  21: 3382756.394 ops/s
Iteration  22: 3400431.423 ops/s
Iteration  23: 3389354.392 ops/s
Iteration  24: 3383272.061 ops/s
Iteration  25: 3384579.623 ops/s
Iteration  26: 3392340.714 ops/s
Iteration  27: 3380248.352 ops/s
Iteration  28: 3377007.380 ops/s
Iteration  29: 3389362.765 ops/s
Iteration  30: 3387653.177 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_countWith":
  3385961.291 ±(99.9%) 4148.370 ops/s [Average]
  (min, avg, max) = (3370164.163, 3385961.291, 3400431.423), stdev = 6209.085
  CI (99.9%): [3381812.921, 3390109.660] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_countWith  thrpt   30  3385961.291 ± 4148.370  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1607106.124 ops/s
# Warmup Iteration   2: 3174968.757 ops/s
# Warmup Iteration   3: 3496708.977 ops/s
# Warmup Iteration   4: 3508016.718 ops/s
# Warmup Iteration   5: 2904946.487 ops/s
# Warmup Iteration   6: 3528015.219 ops/s
# Warmup Iteration   7: 3524630.526 ops/s
# Warmup Iteration   8: 3512116.825 ops/s
# Warmup Iteration   9: 3522702.291 ops/s
# Warmup Iteration  10: 3514301.516 ops/s
# Warmup Iteration  11: 3515493.198 ops/s
# Warmup Iteration  12: 3512584.808 ops/s
# Warmup Iteration  13: 3518654.075 ops/s
# Warmup Iteration  14: 3522969.564 ops/s
# Warmup Iteration  15: 3520769.057 ops/s
# Warmup Iteration  16: 3518848.869 ops/s
# Warmup Iteration  17: 3519356.108 ops/s
# Warmup Iteration  18: 3527811.670 ops/s
# Warmup Iteration  19: 3517344.184 ops/s
# Warmup Iteration  20: 3524969.288 ops/s
# Warmup Iteration  21: 3529386.533 ops/s
# Warmup Iteration  22: 3528939.024 ops/s
# Warmup Iteration  23: 3523045.453 ops/s
# Warmup Iteration  24: 3528469.405 ops/s
# Warmup Iteration  25: 3518650.049 ops/s
# Warmup Iteration  26: 3518387.890 ops/s
# Warmup Iteration  27: 3526567.971 ops/s
# Warmup Iteration  28: 3513492.512 ops/s
# Warmup Iteration  29: 3522387.272 ops/s
# Warmup Iteration  30: 3523620.167 ops/s
Iteration   1: 3519717.095 ops/s
Iteration   2: 3517745.158 ops/s
Iteration   3: 3527101.241 ops/s
Iteration   4: 3516010.323 ops/s
Iteration   5: 3517940.568 ops/s
Iteration   6: 3530250.680 ops/s
Iteration   7: 3519729.103 ops/s
Iteration   8: 3504718.779 ops/s
Iteration   9: 3509355.096 ops/s
Iteration  10: 3511134.715 ops/s
Iteration  11: 3527797.514 ops/s
Iteration  12: 3529734.928 ops/s
Iteration  13: 3515530.410 ops/s
Iteration  14: 3507352.869 ops/s
Iteration  15: 3486627.531 ops/s
Iteration  16: 3515310.714 ops/s
Iteration  17: 3500371.746 ops/s
Iteration  18: 3526596.652 ops/s
Iteration  19: 3525709.431 ops/s
Iteration  20: 3528528.036 ops/s
Iteration  21: 3529117.201 ops/s
Iteration  22: 3520584.355 ops/s
Iteration  23: 3520345.922 ops/s
Iteration  24: 3527394.598 ops/s
Iteration  25: 3519365.250 ops/s
Iteration  26: 3521814.748 ops/s
Iteration  27: 3525425.063 ops/s
Iteration  28: 3526519.175 ops/s
Iteration  29: 3526043.454 ops/s
Iteration  30: 3517711.714 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detect":
  3519052.802 ±(99.9%) 6612.091 ops/s [Average]
  (min, avg, max) = (3486627.531, 3519052.802, 3530250.680), stdev = 9896.668
  CI (99.9%): [3512440.711, 3525664.894] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detect  thrpt   30  3519052.802 ± 6612.091  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1596904.102 ops/s
# Warmup Iteration   2: 3061925.685 ops/s
# Warmup Iteration   3: 3456064.721 ops/s
# Warmup Iteration   4: 3468929.706 ops/s
# Warmup Iteration   5: 2844898.260 ops/s
# Warmup Iteration   6: 3466924.848 ops/s
# Warmup Iteration   7: 3457916.100 ops/s
# Warmup Iteration   8: 3461179.932 ops/s
# Warmup Iteration   9: 3447160.834 ops/s
# Warmup Iteration  10: 3464915.285 ops/s
# Warmup Iteration  11: 3460351.645 ops/s
# Warmup Iteration  12: 3460542.632 ops/s
# Warmup Iteration  13: 3467232.415 ops/s
# Warmup Iteration  14: 3469280.722 ops/s
# Warmup Iteration  15: 3462830.467 ops/s
# Warmup Iteration  16: 3466402.527 ops/s
# Warmup Iteration  17: 3465828.887 ops/s
# Warmup Iteration  18: 3464639.537 ops/s
# Warmup Iteration  19: 3465757.262 ops/s
# Warmup Iteration  20: 3451877.125 ops/s
# Warmup Iteration  21: 3457070.958 ops/s
# Warmup Iteration  22: 3469713.172 ops/s
# Warmup Iteration  23: 3466371.928 ops/s
# Warmup Iteration  24: 3458260.106 ops/s
# Warmup Iteration  25: 3464871.387 ops/s
# Warmup Iteration  26: 3467182.484 ops/s
# Warmup Iteration  27: 3460052.176 ops/s
# Warmup Iteration  28: 3469668.489 ops/s
# Warmup Iteration  29: 3467337.828 ops/s
# Warmup Iteration  30: 3463664.124 ops/s
Iteration   1: 3474077.360 ops/s
Iteration   2: 3462317.733 ops/s
Iteration   3: 3462679.648 ops/s
Iteration   4: 3469128.558 ops/s
Iteration   5: 3470792.228 ops/s
Iteration   6: 3466403.812 ops/s
Iteration   7: 3463510.756 ops/s
Iteration   8: 3450941.974 ops/s
Iteration   9: 3475651.561 ops/s
Iteration  10: 3457748.240 ops/s
Iteration  11: 3466602.474 ops/s
Iteration  12: 3473560.918 ops/s
Iteration  13: 3456631.649 ops/s
Iteration  14: 3467200.543 ops/s
Iteration  15: 3476683.018 ops/s
Iteration  16: 3457567.994 ops/s
Iteration  17: 3468475.537 ops/s
Iteration  18: 3477445.049 ops/s
Iteration  19: 3465418.127 ops/s
Iteration  20: 3468471.207 ops/s
Iteration  21: 3446407.923 ops/s
Iteration  22: 3463324.907 ops/s
Iteration  23: 3462936.067 ops/s
Iteration  24: 3474034.900 ops/s
Iteration  25: 3464931.408 ops/s
Iteration  26: 3466950.098 ops/s
Iteration  27: 3478461.387 ops/s
Iteration  28: 3465532.498 ops/s
Iteration  29: 3471241.406 ops/s
Iteration  30: 3469520.025 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detectIfNone":
  3466488.300 ±(99.9%) 5035.998 ops/s [Average]
  (min, avg, max) = (3446407.923, 3466488.300, 3478461.387), stdev = 7537.645
  CI (99.9%): [3461452.302, 3471524.298] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detectIfNone  thrpt   30  3466488.300 ± 5035.998  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 832004.856 ops/s
# Warmup Iteration   2: 1549815.971 ops/s
# Warmup Iteration   3: 1730394.208 ops/s
# Warmup Iteration   4: 1737351.426 ops/s
# Warmup Iteration   5: 1631495.937 ops/s
# Warmup Iteration   6: 1547925.818 ops/s
# Warmup Iteration   7: 1743044.405 ops/s
# Warmup Iteration   8: 1740681.591 ops/s
# Warmup Iteration   9: 1742538.359 ops/s
# Warmup Iteration  10: 1743352.059 ops/s
# Warmup Iteration  11: 1742034.312 ops/s
# Warmup Iteration  12: 1745171.124 ops/s
# Warmup Iteration  13: 1746469.977 ops/s
# Warmup Iteration  14: 1743448.195 ops/s
# Warmup Iteration  15: 1742929.528 ops/s
# Warmup Iteration  16: 1743557.026 ops/s
# Warmup Iteration  17: 1744272.820 ops/s
# Warmup Iteration  18: 1739814.504 ops/s
# Warmup Iteration  19: 1741467.679 ops/s
# Warmup Iteration  20: 1738775.985 ops/s
# Warmup Iteration  21: 1741883.375 ops/s
# Warmup Iteration  22: 1741175.215 ops/s
# Warmup Iteration  23: 1740773.711 ops/s
# Warmup Iteration  24: 1740014.689 ops/s
# Warmup Iteration  25: 1736350.457 ops/s
# Warmup Iteration  26: 1740020.065 ops/s
# Warmup Iteration  27: 1736220.787 ops/s
# Warmup Iteration  28: 1732361.445 ops/s
# Warmup Iteration  29: 1739562.015 ops/s
# Warmup Iteration  30: 1737035.176 ops/s
Iteration   1: 1739538.574 ops/s
Iteration   2: 1742167.252 ops/s
Iteration   3: 1740633.852 ops/s
Iteration   4: 1738889.722 ops/s
Iteration   5: 1739630.361 ops/s
Iteration   6: 1738212.756 ops/s
Iteration   7: 1743493.369 ops/s
Iteration   8: 1740521.064 ops/s
Iteration   9: 1743746.761 ops/s
Iteration  10: 1740265.201 ops/s
Iteration  11: 1739239.105 ops/s
Iteration  12: 1741442.975 ops/s
Iteration  13: 1738398.848 ops/s
Iteration  14: 1742025.105 ops/s
Iteration  15: 1741538.541 ops/s
Iteration  16: 1739909.058 ops/s
Iteration  17: 1741850.660 ops/s
Iteration  18: 1741058.893 ops/s
Iteration  19: 1738036.670 ops/s
Iteration  20: 1741903.524 ops/s
Iteration  21: 1740668.282 ops/s
Iteration  22: 1745583.920 ops/s
Iteration  23: 1731920.068 ops/s
Iteration  24: 1732979.370 ops/s
Iteration  25: 1742870.655 ops/s
Iteration  26: 1742015.651 ops/s
Iteration  27: 1742685.033 ops/s
Iteration  28: 1732572.891 ops/s
Iteration  29: 1734819.887 ops/s
Iteration  30: 1744236.902 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detectIndex":
  1740095.165 ±(99.9%) 2238.595 ops/s [Average]
  (min, avg, max) = (1731920.068, 1740095.165, 1745583.920), stdev = 3350.624
  CI (99.9%): [1737856.570, 1742333.760] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detectIndex  thrpt   30  1740095.165 ± 2238.595  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1666486.600 ops/s
# Warmup Iteration   2: 3165880.884 ops/s
# Warmup Iteration   3: 3551636.887 ops/s
# Warmup Iteration   4: 3576555.348 ops/s
# Warmup Iteration   5: 3046005.475 ops/s
# Warmup Iteration   6: 3430686.013 ops/s
# Warmup Iteration   7: 3579968.150 ops/s
# Warmup Iteration   8: 3584330.873 ops/s
# Warmup Iteration   9: 3582838.144 ops/s
# Warmup Iteration  10: 3585021.320 ops/s
# Warmup Iteration  11: 3575352.225 ops/s
# Warmup Iteration  12: 3579758.745 ops/s
# Warmup Iteration  13: 3580807.276 ops/s
# Warmup Iteration  14: 3573170.980 ops/s
# Warmup Iteration  15: 3583355.746 ops/s
# Warmup Iteration  16: 3582018.616 ops/s
# Warmup Iteration  17: 3585066.665 ops/s
# Warmup Iteration  18: 3586943.821 ops/s
# Warmup Iteration  19: 3587391.204 ops/s
# Warmup Iteration  20: 3581537.834 ops/s
# Warmup Iteration  21: 3587427.774 ops/s
# Warmup Iteration  22: 3580738.294 ops/s
# Warmup Iteration  23: 3566063.343 ops/s
# Warmup Iteration  24: 3590174.078 ops/s
# Warmup Iteration  25: 3577955.315 ops/s
# Warmup Iteration  26: 3589953.448 ops/s
# Warmup Iteration  27: 3588706.806 ops/s
# Warmup Iteration  28: 3579542.965 ops/s
# Warmup Iteration  29: 3579854.033 ops/s
# Warmup Iteration  30: 3563793.900 ops/s
Iteration   1: 3555458.099 ops/s
Iteration   2: 3586297.551 ops/s
Iteration   3: 3591058.783 ops/s
Iteration   4: 3584119.127 ops/s
Iteration   5: 3572724.184 ops/s
Iteration   6: 3580269.470 ops/s
Iteration   7: 3557531.011 ops/s
Iteration   8: 3542990.967 ops/s
Iteration   9: 3593453.245 ops/s
Iteration  10: 3583201.147 ops/s
Iteration  11: 3585292.888 ops/s
Iteration  12: 3573210.675 ops/s
Iteration  13: 3591726.742 ops/s
Iteration  14: 3588984.456 ops/s
Iteration  15: 3577322.924 ops/s
Iteration  16: 3586892.158 ops/s
Iteration  17: 3586565.060 ops/s
Iteration  18: 3587748.314 ops/s
Iteration  19: 3583002.882 ops/s
Iteration  20: 3588925.566 ops/s
Iteration  21: 3577247.928 ops/s
Iteration  22: 3583977.031 ops/s
Iteration  23: 3585137.107 ops/s
Iteration  24: 3585895.937 ops/s
Iteration  25: 3593882.484 ops/s
Iteration  26: 3586612.657 ops/s
Iteration  27: 3585311.842 ops/s
Iteration  28: 3593525.321 ops/s
Iteration  29: 3570042.530 ops/s
Iteration  30: 3582476.628 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detectWith":
  3581362.824 ±(99.9%) 7866.711 ops/s [Average]
  (min, avg, max) = (3542990.967, 3581362.824, 3593882.484), stdev = 11774.524
  CI (99.9%): [3573496.112, 3589229.535] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detectWith  thrpt   30  3581362.824 ± 7866.711  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1641947.517 ops/s
# Warmup Iteration   2: 3161740.930 ops/s
# Warmup Iteration   3: 3509896.714 ops/s
# Warmup Iteration   4: 3533722.444 ops/s
# Warmup Iteration   5: 3100695.043 ops/s
# Warmup Iteration   6: 3350243.559 ops/s
# Warmup Iteration   7: 3536643.110 ops/s
# Warmup Iteration   8: 3536964.408 ops/s
# Warmup Iteration   9: 3536465.605 ops/s
# Warmup Iteration  10: 3530011.079 ops/s
# Warmup Iteration  11: 3533431.686 ops/s
# Warmup Iteration  12: 3541039.525 ops/s
# Warmup Iteration  13: 3531801.729 ops/s
# Warmup Iteration  14: 3536961.364 ops/s
# Warmup Iteration  15: 3530932.535 ops/s
# Warmup Iteration  16: 3540187.874 ops/s
# Warmup Iteration  17: 3538766.978 ops/s
# Warmup Iteration  18: 3526752.851 ops/s
# Warmup Iteration  19: 3536301.276 ops/s
# Warmup Iteration  20: 3540737.245 ops/s
# Warmup Iteration  21: 3532438.658 ops/s
# Warmup Iteration  22: 3539243.311 ops/s
# Warmup Iteration  23: 3525290.819 ops/s
# Warmup Iteration  24: 3537835.244 ops/s
# Warmup Iteration  25: 3535779.979 ops/s
# Warmup Iteration  26: 3540918.161 ops/s
# Warmup Iteration  27: 3531894.528 ops/s
# Warmup Iteration  28: 3531749.502 ops/s
# Warmup Iteration  29: 3538782.681 ops/s
# Warmup Iteration  30: 3525314.418 ops/s
Iteration   1: 3533406.126 ops/s
Iteration   2: 3537104.921 ops/s
Iteration   3: 3535793.729 ops/s
Iteration   4: 3535565.219 ops/s
Iteration   5: 3546665.347 ops/s
Iteration   6: 3534354.224 ops/s
Iteration   7: 3533714.985 ops/s
Iteration   8: 3541044.616 ops/s
Iteration   9: 3536669.296 ops/s
Iteration  10: 3533544.419 ops/s
Iteration  11: 3527709.375 ops/s
Iteration  12: 3539628.727 ops/s
Iteration  13: 3543063.401 ops/s
Iteration  14: 3541036.713 ops/s
Iteration  15: 3538378.435 ops/s
Iteration  16: 3541226.085 ops/s
Iteration  17: 3536587.306 ops/s
Iteration  18: 3536901.893 ops/s
Iteration  19: 3527920.042 ops/s
Iteration  20: 3538965.756 ops/s
Iteration  21: 3538440.042 ops/s
Iteration  22: 3537047.230 ops/s
Iteration  23: 3518468.388 ops/s
Iteration  24: 3537095.925 ops/s
Iteration  25: 3531499.855 ops/s
Iteration  26: 3530423.906 ops/s
Iteration  27: 3536362.019 ops/s
Iteration  28: 3532554.187 ops/s
Iteration  29: 3538825.076 ops/s
Iteration  30: 3529525.575 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detectWithIfNone":
  3535650.761 ±(99.9%) 3622.106 ops/s [Average]
  (min, avg, max) = (3518468.388, 3535650.761, 3546665.347), stdev = 5421.398
  CI (99.9%): [3532028.655, 3539272.866] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  3535650.761 ± 3622.106  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detectWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detectWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1692254.866 ops/s
# Warmup Iteration   2: 3279123.992 ops/s
# Warmup Iteration   3: 3619505.546 ops/s
# Warmup Iteration   4: 3639737.318 ops/s
# Warmup Iteration   5: 3005332.013 ops/s
# Warmup Iteration   6: 3651992.107 ops/s
# Warmup Iteration   7: 3654896.498 ops/s
# Warmup Iteration   8: 3647792.585 ops/s
# Warmup Iteration   9: 3649896.848 ops/s
# Warmup Iteration  10: 3651508.362 ops/s
# Warmup Iteration  11: 3650458.981 ops/s
# Warmup Iteration  12: 3650027.828 ops/s
# Warmup Iteration  13: 3618763.895 ops/s
# Warmup Iteration  14: 3641269.057 ops/s
# Warmup Iteration  15: 3641664.264 ops/s
# Warmup Iteration  16: 3647050.980 ops/s
# Warmup Iteration  17: 3644363.566 ops/s
# Warmup Iteration  18: 3641445.000 ops/s
# Warmup Iteration  19: 3647325.637 ops/s
# Warmup Iteration  20: 3655426.197 ops/s
# Warmup Iteration  21: 3652781.753 ops/s
# Warmup Iteration  22: 3648468.921 ops/s
# Warmup Iteration  23: 3641503.861 ops/s
# Warmup Iteration  24: 3627721.720 ops/s
# Warmup Iteration  25: 3651459.802 ops/s
# Warmup Iteration  26: 3653577.193 ops/s
# Warmup Iteration  27: 3655466.227 ops/s
# Warmup Iteration  28: 3646440.004 ops/s
# Warmup Iteration  29: 3653767.971 ops/s
# Warmup Iteration  30: 3650999.178 ops/s
Iteration   1: 3649952.555 ops/s
Iteration   2: 3650143.361 ops/s
Iteration   3: 3658965.721 ops/s
Iteration   4: 3653510.059 ops/s
Iteration   5: 3656471.770 ops/s
Iteration   6: 3660263.524 ops/s
Iteration   7: 3651145.988 ops/s
Iteration   8: 3646671.801 ops/s
Iteration   9: 3644492.946 ops/s
Iteration  10: 3649110.351 ops/s
Iteration  11: 3652562.323 ops/s
Iteration  12: 3638741.153 ops/s
Iteration  13: 3631902.903 ops/s
Iteration  14: 3631927.824 ops/s
Iteration  15: 3642251.443 ops/s
Iteration  16: 3616484.128 ops/s
Iteration  17: 3641054.737 ops/s
Iteration  18: 3634772.290 ops/s
Iteration  19: 3639348.262 ops/s
Iteration  20: 3651423.578 ops/s
Iteration  21: 3648276.638 ops/s
Iteration  22: 3646660.380 ops/s
Iteration  23: 3655114.827 ops/s
Iteration  24: 3655277.626 ops/s
Iteration  25: 3648611.081 ops/s
Iteration  26: 3650620.341 ops/s
Iteration  27: 3648464.554 ops/s
Iteration  28: 3645805.769 ops/s
Iteration  29: 3653780.250 ops/s
Iteration  30: 3653808.557 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detectWithOccurrences":
  3646920.558 ±(99.9%) 6223.517 ops/s [Average]
  (min, avg, max) = (3616484.128, 3646920.558, 3660263.524), stdev = 9315.068
  CI (99.9%): [3640697.041, 3653144.075] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_detectWithOccurrences  thrpt   30  3646920.558 ± 6223.517  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 491094.130 ops/s
# Warmup Iteration   2: 849055.470 ops/s
# Warmup Iteration   3: 1015464.091 ops/s
# Warmup Iteration   4: 1021904.677 ops/s
# Warmup Iteration   5: 1017894.384 ops/s
# Warmup Iteration   6: 852688.722 ops/s
# Warmup Iteration   7: 1001242.120 ops/s
# Warmup Iteration   8: 1020955.399 ops/s
# Warmup Iteration   9: 1017662.519 ops/s
# Warmup Iteration  10: 1021596.876 ops/s
# Warmup Iteration  11: 1022809.447 ops/s
# Warmup Iteration  12: 1021531.606 ops/s
# Warmup Iteration  13: 1021959.858 ops/s
# Warmup Iteration  14: 1018313.497 ops/s
# Warmup Iteration  15: 1018941.124 ops/s
# Warmup Iteration  16: 1021954.145 ops/s
# Warmup Iteration  17: 1022074.835 ops/s
# Warmup Iteration  18: 1021009.204 ops/s
# Warmup Iteration  19: 1019475.770 ops/s
# Warmup Iteration  20: 1022317.529 ops/s
# Warmup Iteration  21: 1021891.371 ops/s
# Warmup Iteration  22: 1021753.205 ops/s
# Warmup Iteration  23: 1017670.503 ops/s
# Warmup Iteration  24: 1022642.621 ops/s
# Warmup Iteration  25: 1023381.860 ops/s
# Warmup Iteration  26: 1022177.719 ops/s
# Warmup Iteration  27: 1022080.431 ops/s
# Warmup Iteration  28: 1021099.175 ops/s
# Warmup Iteration  29: 1022514.712 ops/s
# Warmup Iteration  30: 1019352.781 ops/s
Iteration   1: 1016333.600 ops/s
Iteration   2: 1017660.142 ops/s
Iteration   3: 1020474.000 ops/s
Iteration   4: 1019586.002 ops/s
Iteration   5: 1023621.978 ops/s
Iteration   6: 1020527.786 ops/s
Iteration   7: 1023294.364 ops/s
Iteration   8: 1022443.452 ops/s
Iteration   9: 1023549.899 ops/s
Iteration  10: 1021639.186 ops/s
Iteration  11: 1021142.153 ops/s
Iteration  12: 1023919.681 ops/s
Iteration  13: 1021512.330 ops/s
Iteration  14: 1020563.394 ops/s
Iteration  15: 1021048.682 ops/s
Iteration  16: 1022667.666 ops/s
Iteration  17: 1021336.689 ops/s
Iteration  18: 1023269.785 ops/s
Iteration  19: 1020610.167 ops/s
Iteration  20: 1020248.360 ops/s
Iteration  21: 1021192.717 ops/s
Iteration  22: 1023441.143 ops/s
Iteration  23: 1018976.804 ops/s
Iteration  24: 1023324.913 ops/s
Iteration  25: 1018464.545 ops/s
Iteration  26: 1018457.806 ops/s
Iteration  27: 1021875.554 ops/s
Iteration  28: 1023482.538 ops/s
Iteration  29: 1022947.733 ops/s
Iteration  30: 1021784.635 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_distinct":
  1021313.257 ±(99.9%) 1307.739 ops/s [Average]
  (min, avg, max) = (1016333.600, 1021313.257, 1023919.681), stdev = 1957.362
  CI (99.9%): [1020005.518, 1022620.995] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_distinct  thrpt   30  1021313.257 ± 1307.739  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_distinctView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_distinctView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 910543.751 ops/s
# Warmup Iteration   2: 2263136.720 ops/s
# Warmup Iteration   3: 2355535.231 ops/s
# Warmup Iteration   4: 1943445.559 ops/s
# Warmup Iteration   5: 2359968.179 ops/s
# Warmup Iteration   6: 2358630.608 ops/s
# Warmup Iteration   7: 2363350.450 ops/s
# Warmup Iteration   8: 2358789.394 ops/s
# Warmup Iteration   9: 2357266.847 ops/s
# Warmup Iteration  10: 2362358.431 ops/s
# Warmup Iteration  11: 2361178.201 ops/s
# Warmup Iteration  12: 2351183.956 ops/s
# Warmup Iteration  13: 2364845.925 ops/s
# Warmup Iteration  14: 2355744.526 ops/s
# Warmup Iteration  15: 2349289.547 ops/s
# Warmup Iteration  16: 2362548.903 ops/s
# Warmup Iteration  17: 2361657.940 ops/s
# Warmup Iteration  18: 2364319.594 ops/s
# Warmup Iteration  19: 2363228.034 ops/s
# Warmup Iteration  20: 2364300.663 ops/s
# Warmup Iteration  21: 2351894.167 ops/s
# Warmup Iteration  22: 2345815.170 ops/s
# Warmup Iteration  23: 2347614.066 ops/s
# Warmup Iteration  24: 2354105.097 ops/s
# Warmup Iteration  25: 2363006.836 ops/s
# Warmup Iteration  26: 2363993.367 ops/s
# Warmup Iteration  27: 2360543.769 ops/s
# Warmup Iteration  28: 2359802.474 ops/s
# Warmup Iteration  29: 2362986.774 ops/s
# Warmup Iteration  30: 2365335.575 ops/s
Iteration   1: 2363673.598 ops/s
Iteration   2: 2360665.306 ops/s
Iteration   3: 2366175.162 ops/s
Iteration   4: 2363590.435 ops/s
Iteration   5: 2348702.595 ops/s
Iteration   6: 2346663.081 ops/s
Iteration   7: 2360235.990 ops/s
Iteration   8: 2361207.412 ops/s
Iteration   9: 2365287.911 ops/s
Iteration  10: 2357030.113 ops/s
Iteration  11: 2362376.318 ops/s
Iteration  12: 2360296.966 ops/s
Iteration  13: 2360056.806 ops/s
Iteration  14: 2368764.862 ops/s
Iteration  15: 2362434.405 ops/s
Iteration  16: 2366785.530 ops/s
Iteration  17: 2361365.698 ops/s
Iteration  18: 2359603.942 ops/s
Iteration  19: 2361919.330 ops/s
Iteration  20: 2363623.478 ops/s
Iteration  21: 2361042.266 ops/s
Iteration  22: 2365072.570 ops/s
Iteration  23: 2358774.566 ops/s
Iteration  24: 2365157.802 ops/s
Iteration  25: 2360312.645 ops/s
Iteration  26: 2357193.456 ops/s
Iteration  27: 2360811.715 ops/s
Iteration  28: 2364817.233 ops/s
Iteration  29: 2363335.792 ops/s
Iteration  30: 2366622.071 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_distinctView":
  2361453.302 ±(99.9%) 3139.876 ops/s [Average]
  (min, avg, max) = (2346663.081, 2361453.302, 2368764.862), stdev = 4699.620
  CI (99.9%): [2358313.425, 2364593.178] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_distinctView  thrpt   30  2361453.302 ± 3139.876  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 428305.792 ops/s
# Warmup Iteration   2: 843707.034 ops/s
# Warmup Iteration   3: 920693.312 ops/s
# Warmup Iteration   4: 926603.457 ops/s
# Warmup Iteration   5: 767459.888 ops/s
# Warmup Iteration   6: 927308.958 ops/s
# Warmup Iteration   7: 925449.271 ops/s
# Warmup Iteration   8: 925754.929 ops/s
# Warmup Iteration   9: 928079.008 ops/s
# Warmup Iteration  10: 924180.285 ops/s
# Warmup Iteration  11: 926944.047 ops/s
# Warmup Iteration  12: 922420.059 ops/s
# Warmup Iteration  13: 924527.813 ops/s
# Warmup Iteration  14: 920520.957 ops/s
# Warmup Iteration  15: 926054.669 ops/s
# Warmup Iteration  16: 926539.227 ops/s
# Warmup Iteration  17: 927085.291 ops/s
# Warmup Iteration  18: 932003.593 ops/s
# Warmup Iteration  19: 929259.837 ops/s
# Warmup Iteration  20: 930274.229 ops/s
# Warmup Iteration  21: 928316.492 ops/s
# Warmup Iteration  22: 928634.799 ops/s
# Warmup Iteration  23: 928455.273 ops/s
# Warmup Iteration  24: 932427.677 ops/s
# Warmup Iteration  25: 932425.823 ops/s
# Warmup Iteration  26: 931844.694 ops/s
# Warmup Iteration  27: 930910.244 ops/s
# Warmup Iteration  28: 930583.026 ops/s
# Warmup Iteration  29: 932029.508 ops/s
# Warmup Iteration  30: 932310.967 ops/s
Iteration   1: 931533.627 ops/s
Iteration   2: 929808.321 ops/s
Iteration   3: 930823.254 ops/s
Iteration   4: 931662.109 ops/s
Iteration   5: 931234.801 ops/s
Iteration   6: 933412.841 ops/s
Iteration   7: 933349.237 ops/s
Iteration   8: 931705.925 ops/s
Iteration   9: 932620.896 ops/s
Iteration  10: 933851.661 ops/s
Iteration  11: 933345.210 ops/s
Iteration  12: 933523.865 ops/s
Iteration  13: 933038.932 ops/s
Iteration  14: 933161.465 ops/s
Iteration  15: 920840.011 ops/s
Iteration  16: 931682.636 ops/s
Iteration  17: 927443.455 ops/s
Iteration  18: 929463.731 ops/s
Iteration  19: 932564.987 ops/s
Iteration  20: 931592.907 ops/s
Iteration  21: 931067.164 ops/s
Iteration  22: 928758.425 ops/s
Iteration  23: 930252.297 ops/s
Iteration  24: 933232.334 ops/s
Iteration  25: 934533.418 ops/s
Iteration  26: 932371.064 ops/s
Iteration  27: 933398.150 ops/s
Iteration  28: 933867.499 ops/s
Iteration  29: 932598.819 ops/s
Iteration  30: 933428.598 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_drop":
  931672.255 ±(99.9%) 1758.209 ops/s [Average]
  (min, avg, max) = (920840.011, 931672.255, 934533.418), stdev = 2631.604
  CI (99.9%): [929914.046, 933430.463] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_drop  thrpt   30  931672.255 ± 1758.209  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 811894.222 ops/s
# Warmup Iteration   2: 1606571.003 ops/s
# Warmup Iteration   3: 1760898.756 ops/s
# Warmup Iteration   4: 1775406.411 ops/s
# Warmup Iteration   5: 1467017.496 ops/s
# Warmup Iteration   6: 1776807.317 ops/s
# Warmup Iteration   7: 1771395.973 ops/s
# Warmup Iteration   8: 1774281.937 ops/s
# Warmup Iteration   9: 1771414.596 ops/s
# Warmup Iteration  10: 1775600.887 ops/s
# Warmup Iteration  11: 1775449.412 ops/s
# Warmup Iteration  12: 1775946.845 ops/s
# Warmup Iteration  13: 1772207.213 ops/s
# Warmup Iteration  14: 1776685.073 ops/s
# Warmup Iteration  15: 1772927.113 ops/s
# Warmup Iteration  16: 1772666.631 ops/s
# Warmup Iteration  17: 1779112.044 ops/s
# Warmup Iteration  18: 1780563.339 ops/s
# Warmup Iteration  19: 1779591.535 ops/s
# Warmup Iteration  20: 1781167.040 ops/s
# Warmup Iteration  21: 1777773.106 ops/s
# Warmup Iteration  22: 1776210.555 ops/s
# Warmup Iteration  23: 1781884.922 ops/s
# Warmup Iteration  24: 1779890.465 ops/s
# Warmup Iteration  25: 1776879.453 ops/s
# Warmup Iteration  26: 1779630.840 ops/s
# Warmup Iteration  27: 1771754.082 ops/s
# Warmup Iteration  28: 1780105.113 ops/s
# Warmup Iteration  29: 1781360.181 ops/s
# Warmup Iteration  30: 1777359.514 ops/s
Iteration   1: 1780331.825 ops/s
Iteration   2: 1778286.042 ops/s
Iteration   3: 1784490.281 ops/s
Iteration   4: 1780141.188 ops/s
Iteration   5: 1774652.125 ops/s
Iteration   6: 1775408.409 ops/s
Iteration   7: 1773341.089 ops/s
Iteration   8: 1782108.773 ops/s
Iteration   9: 1781929.533 ops/s
Iteration  10: 1779613.410 ops/s
Iteration  11: 1781692.454 ops/s
Iteration  12: 1778736.361 ops/s
Iteration  13: 1778917.957 ops/s
Iteration  14: 1777676.317 ops/s
Iteration  15: 1779244.202 ops/s
Iteration  16: 1780329.096 ops/s
Iteration  17: 1776944.314 ops/s
Iteration  18: 1783148.880 ops/s
Iteration  19: 1777481.651 ops/s
Iteration  20: 1784502.946 ops/s
Iteration  21: 1785064.464 ops/s
Iteration  22: 1776326.456 ops/s
Iteration  23: 1775031.753 ops/s
Iteration  24: 1783162.431 ops/s
Iteration  25: 1780994.107 ops/s
Iteration  26: 1779669.524 ops/s
Iteration  27: 1784533.094 ops/s
Iteration  28: 1779837.503 ops/s
Iteration  29: 1783025.863 ops/s
Iteration  30: 1781487.770 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_dropWhile":
  1779936.994 ±(99.9%) 2112.419 ops/s [Average]
  (min, avg, max) = (1773341.089, 1779936.994, 1785064.464), stdev = 3161.770
  CI (99.9%): [1777824.575, 1782049.413] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_dropWhile  thrpt   30  1779936.994 ± 2112.419  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 496339.154 ops/s
# Warmup Iteration   2: 598447.626 ops/s
# Warmup Iteration   3: 781511.084 ops/s
# Warmup Iteration   4: 786628.336 ops/s
# Warmup Iteration   5: 784550.613 ops/s
# Warmup Iteration   6: 782745.581 ops/s
# Warmup Iteration   7: 782825.814 ops/s
# Warmup Iteration   8: 782790.701 ops/s
# Warmup Iteration   9: 730932.853 ops/s
# Warmup Iteration  10: 707198.116 ops/s
# Warmup Iteration  11: 776594.693 ops/s
# Warmup Iteration  12: 783047.520 ops/s
# Warmup Iteration  13: 783614.791 ops/s
# Warmup Iteration  14: 784953.564 ops/s
# Warmup Iteration  15: 784310.499 ops/s
# Warmup Iteration  16: 784083.640 ops/s
# Warmup Iteration  17: 824597.041 ops/s
# Warmup Iteration  18: 817148.925 ops/s
# Warmup Iteration  19: 817150.488 ops/s
# Warmup Iteration  20: 818682.394 ops/s
# Warmup Iteration  21: 818593.002 ops/s
# Warmup Iteration  22: 823360.661 ops/s
# Warmup Iteration  23: 822375.543 ops/s
# Warmup Iteration  24: 820546.098 ops/s
# Warmup Iteration  25: 822016.260 ops/s
# Warmup Iteration  26: 821330.892 ops/s
# Warmup Iteration  27: 823293.212 ops/s
# Warmup Iteration  28: 822474.433 ops/s
# Warmup Iteration  29: 824121.246 ops/s
# Warmup Iteration  30: 823185.466 ops/s
Iteration   1: 824468.741 ops/s
Iteration   2: 823121.171 ops/s
Iteration   3: 823398.917 ops/s
Iteration   4: 824689.625 ops/s
Iteration   5: 822050.408 ops/s
Iteration   6: 824915.192 ops/s
Iteration   7: 823880.254 ops/s
Iteration   8: 820990.312 ops/s
Iteration   9: 820699.714 ops/s
Iteration  10: 820547.807 ops/s
Iteration  11: 820640.284 ops/s
Iteration  12: 823345.952 ops/s
Iteration  13: 823881.546 ops/s
Iteration  14: 822347.749 ops/s
Iteration  15: 822778.071 ops/s
Iteration  16: 823597.298 ops/s
Iteration  17: 821155.290 ops/s
Iteration  18: 822701.058 ops/s
Iteration  19: 822992.173 ops/s
Iteration  20: 821355.088 ops/s
Iteration  21: 823034.436 ops/s
Iteration  22: 821615.895 ops/s
Iteration  23: 822183.718 ops/s
Iteration  24: 822798.277 ops/s
Iteration  25: 823934.905 ops/s
Iteration  26: 821410.528 ops/s
Iteration  27: 823605.152 ops/s
Iteration  28: 824065.815 ops/s
Iteration  29: 822421.992 ops/s
Iteration  30: 823581.686 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_drop_throws":
  822740.302 ±(99.9%) 837.273 ops/s [Average]
  (min, avg, max) = (820547.807, 822740.302, 824915.192), stdev = 1253.191
  CI (99.9%): [821903.029, 823577.575] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_drop_throws  thrpt   30  822740.302 ± 837.273  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 42967.386 ops/s
# Warmup Iteration   2: 68283.438 ops/s
# Warmup Iteration   3: 94088.772 ops/s
# Warmup Iteration   4: 93709.292 ops/s
# Warmup Iteration   5: 94006.633 ops/s
# Warmup Iteration   6: 93930.973 ops/s
# Warmup Iteration   7: 94201.940 ops/s
# Warmup Iteration   8: 80061.338 ops/s
# Warmup Iteration   9: 94229.575 ops/s
# Warmup Iteration  10: 94097.636 ops/s
# Warmup Iteration  11: 94456.241 ops/s
# Warmup Iteration  12: 94451.169 ops/s
# Warmup Iteration  13: 94643.444 ops/s
# Warmup Iteration  14: 94424.364 ops/s
# Warmup Iteration  15: 94559.491 ops/s
# Warmup Iteration  16: 94537.350 ops/s
# Warmup Iteration  17: 94242.225 ops/s
# Warmup Iteration  18: 94639.257 ops/s
# Warmup Iteration  19: 94584.563 ops/s
# Warmup Iteration  20: 94457.141 ops/s
# Warmup Iteration  21: 94161.824 ops/s
# Warmup Iteration  22: 94287.056 ops/s
# Warmup Iteration  23: 94431.605 ops/s
# Warmup Iteration  24: 94301.840 ops/s
# Warmup Iteration  25: 94447.452 ops/s
# Warmup Iteration  26: 94257.217 ops/s
# Warmup Iteration  27: 94133.030 ops/s
# Warmup Iteration  28: 94070.388 ops/s
# Warmup Iteration  29: 94348.616 ops/s
# Warmup Iteration  30: 94576.970 ops/s
Iteration   1: 94528.487 ops/s
Iteration   2: 94309.692 ops/s
Iteration   3: 94086.911 ops/s
Iteration   4: 93976.030 ops/s
Iteration   5: 93471.231 ops/s
Iteration   6: 94012.441 ops/s
Iteration   7: 94057.868 ops/s
Iteration   8: 93596.947 ops/s
Iteration   9: 94233.976 ops/s
Iteration  10: 94184.786 ops/s
Iteration  11: 93536.980 ops/s
Iteration  12: 94233.942 ops/s
Iteration  13: 94131.281 ops/s
Iteration  14: 94422.221 ops/s
Iteration  15: 93910.531 ops/s
Iteration  16: 94557.140 ops/s
Iteration  17: 94593.896 ops/s
Iteration  18: 94523.721 ops/s
Iteration  19: 94773.762 ops/s
Iteration  20: 94771.386 ops/s
Iteration  21: 94444.118 ops/s
Iteration  22: 94753.965 ops/s
Iteration  23: 94627.043 ops/s
Iteration  24: 94383.400 ops/s
Iteration  25: 94652.654 ops/s
Iteration  26: 94048.914 ops/s
Iteration  27: 94849.907 ops/s
Iteration  28: 95015.355 ops/s
Iteration  29: 94813.720 ops/s
Iteration  30: 94998.939 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_equalsAndHashCode":
  94350.041 ±(99.9%) 277.231 ops/s [Average]
  (min, avg, max) = (93471.231, 94350.041, 95015.355), stdev = 414.946
  CI (99.9%): [94072.811, 94627.272] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt      Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  94350.041 ± 277.231  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 492883.223 ops/s
# Warmup Iteration   2: 903308.209 ops/s
# Warmup Iteration   3: 1017445.341 ops/s
# Warmup Iteration   4: 1021927.030 ops/s
# Warmup Iteration   5: 1021701.124 ops/s
# Warmup Iteration   6: 852809.281 ops/s
# Warmup Iteration   7: 1025066.887 ops/s
# Warmup Iteration   8: 1020755.466 ops/s
# Warmup Iteration   9: 1024183.850 ops/s
# Warmup Iteration  10: 1024716.764 ops/s
# Warmup Iteration  11: 1023896.296 ops/s
# Warmup Iteration  12: 1023760.201 ops/s
# Warmup Iteration  13: 1024781.038 ops/s
# Warmup Iteration  14: 1025145.522 ops/s
# Warmup Iteration  15: 1024206.778 ops/s
# Warmup Iteration  16: 1024538.541 ops/s
# Warmup Iteration  17: 1023229.925 ops/s
# Warmup Iteration  18: 1020588.267 ops/s
# Warmup Iteration  19: 1023062.340 ops/s
# Warmup Iteration  20: 1022955.079 ops/s
# Warmup Iteration  21: 1024533.219 ops/s
# Warmup Iteration  22: 1024258.010 ops/s
# Warmup Iteration  23: 1022147.938 ops/s
# Warmup Iteration  24: 1022665.283 ops/s
# Warmup Iteration  25: 1022762.834 ops/s
# Warmup Iteration  26: 1021765.252 ops/s
# Warmup Iteration  27: 1023774.415 ops/s
# Warmup Iteration  28: 1024232.420 ops/s
# Warmup Iteration  29: 1021952.833 ops/s
# Warmup Iteration  30: 1024265.108 ops/s
Iteration   1: 1025438.542 ops/s
Iteration   2: 1023936.447 ops/s
Iteration   3: 1022529.992 ops/s
Iteration   4: 1023900.455 ops/s
Iteration   5: 1022500.244 ops/s
Iteration   6: 1024209.047 ops/s
Iteration   7: 1021316.805 ops/s
Iteration   8: 1025632.471 ops/s
Iteration   9: 1017061.417 ops/s
Iteration  10: 1020783.549 ops/s
Iteration  11: 1024142.099 ops/s
Iteration  12: 1024120.127 ops/s
Iteration  13: 1024270.953 ops/s
Iteration  14: 1023192.338 ops/s
Iteration  15: 1012257.486 ops/s
Iteration  16: 1018190.493 ops/s
Iteration  17: 1015495.037 ops/s
Iteration  18: 1024515.047 ops/s
Iteration  19: 1023771.030 ops/s
Iteration  20: 1021604.765 ops/s
Iteration  21: 1026072.200 ops/s
Iteration  22: 1020203.107 ops/s
Iteration  23: 1024000.349 ops/s
Iteration  24: 1022942.308 ops/s
Iteration  25: 1022339.185 ops/s
Iteration  26: 1025316.751 ops/s
Iteration  27: 1018623.774 ops/s
Iteration  28: 1024607.768 ops/s
Iteration  29: 1021346.967 ops/s
Iteration  30: 1022407.410 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_flatCollect":
  1022224.272 ±(99.9%) 2128.187 ops/s [Average]
  (min, avg, max) = (1012257.486, 1022224.272, 1026072.200), stdev = 3185.370
  CI (99.9%): [1020096.085, 1024352.459] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_flatCollect  thrpt   30  1022224.272 ± 2128.187  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 533512.472 ops/s
# Warmup Iteration   2: 1030560.025 ops/s
# Warmup Iteration   3: 1153435.884 ops/s
# Warmup Iteration   4: 1157120.454 ops/s
# Warmup Iteration   5: 1050979.660 ops/s
# Warmup Iteration   6: 1064437.523 ops/s
# Warmup Iteration   7: 1160730.422 ops/s
# Warmup Iteration   8: 1159990.920 ops/s
# Warmup Iteration   9: 1159923.428 ops/s
# Warmup Iteration  10: 1158495.812 ops/s
# Warmup Iteration  11: 1159859.067 ops/s
# Warmup Iteration  12: 1161148.153 ops/s
# Warmup Iteration  13: 1160817.758 ops/s
# Warmup Iteration  14: 1157928.226 ops/s
# Warmup Iteration  15: 1161196.628 ops/s
# Warmup Iteration  16: 1158920.179 ops/s
# Warmup Iteration  17: 1154286.530 ops/s
# Warmup Iteration  18: 1154172.632 ops/s
# Warmup Iteration  19: 1149383.361 ops/s
# Warmup Iteration  20: 1156083.403 ops/s
# Warmup Iteration  21: 1155573.774 ops/s
# Warmup Iteration  22: 1148850.650 ops/s
# Warmup Iteration  23: 1155809.663 ops/s
# Warmup Iteration  24: 1155294.561 ops/s
# Warmup Iteration  25: 1157132.037 ops/s
# Warmup Iteration  26: 1156161.955 ops/s
# Warmup Iteration  27: 1149654.119 ops/s
# Warmup Iteration  28: 1156934.384 ops/s
# Warmup Iteration  29: 1153635.973 ops/s
# Warmup Iteration  30: 1155423.214 ops/s
Iteration   1: 1156949.038 ops/s
Iteration   2: 1154939.442 ops/s
Iteration   3: 1157258.731 ops/s
Iteration   4: 1154780.925 ops/s
Iteration   5: 1152483.323 ops/s
Iteration   6: 1157555.606 ops/s
Iteration   7: 1152128.019 ops/s
Iteration   8: 1154635.716 ops/s
Iteration   9: 1158378.488 ops/s
Iteration  10: 1155300.027 ops/s
Iteration  11: 1157706.140 ops/s
Iteration  12: 1155219.161 ops/s
Iteration  13: 1154478.189 ops/s
Iteration  14: 1158401.160 ops/s
Iteration  15: 1155242.149 ops/s
Iteration  16: 1155335.160 ops/s
Iteration  17: 1157714.117 ops/s
Iteration  18: 1152400.239 ops/s
Iteration  19: 1157848.638 ops/s
Iteration  20: 1154995.817 ops/s
Iteration  21: 1155484.231 ops/s
Iteration  22: 1156079.286 ops/s
Iteration  23: 1154538.138 ops/s
Iteration  24: 1155455.058 ops/s
Iteration  25: 1156722.957 ops/s
Iteration  26: 1152290.977 ops/s
Iteration  27: 1157521.964 ops/s
Iteration  28: 1155365.857 ops/s
Iteration  29: 1154510.878 ops/s
Iteration  30: 1157455.518 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_flatCollectWith":
  1155639.165 ±(99.9%) 1215.327 ops/s [Average]
  (min, avg, max) = (1152128.019, 1155639.165, 1158401.160), stdev = 1819.044
  CI (99.9%): [1154423.838, 1156854.491] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_flatCollectWith  thrpt   30  1155639.165 ± 1215.327  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_flatCollectWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_flatCollectWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 425006.188 ops/s
# Warmup Iteration   2: 794732.726 ops/s
# Warmup Iteration   3: 934503.434 ops/s
# Warmup Iteration   4: 938507.800 ops/s
# Warmup Iteration   5: 939283.737 ops/s
# Warmup Iteration   6: 776256.173 ops/s
# Warmup Iteration   7: 937700.474 ops/s
# Warmup Iteration   8: 938308.685 ops/s
# Warmup Iteration   9: 938504.034 ops/s
# Warmup Iteration  10: 938858.102 ops/s
# Warmup Iteration  11: 940076.427 ops/s
# Warmup Iteration  12: 939651.645 ops/s
# Warmup Iteration  13: 940065.382 ops/s
# Warmup Iteration  14: 938494.013 ops/s
# Warmup Iteration  15: 939060.295 ops/s
# Warmup Iteration  16: 940934.731 ops/s
# Warmup Iteration  17: 938651.229 ops/s
# Warmup Iteration  18: 938115.077 ops/s
# Warmup Iteration  19: 939537.464 ops/s
# Warmup Iteration  20: 939505.886 ops/s
# Warmup Iteration  21: 937160.016 ops/s
# Warmup Iteration  22: 938003.197 ops/s
# Warmup Iteration  23: 940461.826 ops/s
# Warmup Iteration  24: 939871.969 ops/s
# Warmup Iteration  25: 940013.842 ops/s
# Warmup Iteration  26: 938268.231 ops/s
# Warmup Iteration  27: 938931.677 ops/s
# Warmup Iteration  28: 938032.407 ops/s
# Warmup Iteration  29: 939461.994 ops/s
# Warmup Iteration  30: 939382.709 ops/s
Iteration   1: 939005.052 ops/s
Iteration   2: 940262.097 ops/s
Iteration   3: 937962.105 ops/s
Iteration   4: 941014.394 ops/s
Iteration   5: 939733.167 ops/s
Iteration   6: 941050.202 ops/s
Iteration   7: 939046.480 ops/s
Iteration   8: 937958.496 ops/s
Iteration   9: 940178.367 ops/s
Iteration  10: 935227.021 ops/s
Iteration  11: 934353.374 ops/s
Iteration  12: 934022.681 ops/s
Iteration  13: 933134.289 ops/s
Iteration  14: 931925.298 ops/s
Iteration  15: 937296.170 ops/s
Iteration  16: 938331.838 ops/s
Iteration  17: 937018.596 ops/s
Iteration  18: 939059.219 ops/s
Iteration  19: 940041.189 ops/s
Iteration  20: 937655.512 ops/s
Iteration  21: 938193.709 ops/s
Iteration  22: 935525.252 ops/s
Iteration  23: 938074.543 ops/s
Iteration  24: 939512.643 ops/s
Iteration  25: 941137.044 ops/s
Iteration  26: 939444.829 ops/s
Iteration  27: 938475.460 ops/s
Iteration  28: 941519.807 ops/s
Iteration  29: 939484.314 ops/s
Iteration  30: 941404.339 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_flatCollectWithTarget":
  938234.916 ±(99.9%) 1677.687 ops/s [Average]
  (min, avg, max) = (931925.298, 938234.916, 941519.807), stdev = 2511.083
  CI (99.9%): [936557.230, 939912.603] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_flatCollectWithTarget  thrpt   30  938234.916 ± 1677.687  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1074455.820 ops/s
# Warmup Iteration   2: 1986321.723 ops/s
# Warmup Iteration   3: 2265406.537 ops/s
# Warmup Iteration   4: 2273963.680 ops/s
# Warmup Iteration   5: 2278951.043 ops/s
# Warmup Iteration   6: 1876947.102 ops/s
# Warmup Iteration   7: 2278749.184 ops/s
# Warmup Iteration   8: 2273171.070 ops/s
# Warmup Iteration   9: 2276319.878 ops/s
# Warmup Iteration  10: 2278124.297 ops/s
# Warmup Iteration  11: 2276261.230 ops/s
# Warmup Iteration  12: 2274035.745 ops/s
# Warmup Iteration  13: 2271231.996 ops/s
# Warmup Iteration  14: 2277194.249 ops/s
# Warmup Iteration  15: 2275827.555 ops/s
# Warmup Iteration  16: 2277330.850 ops/s
# Warmup Iteration  17: 2277622.914 ops/s
# Warmup Iteration  18: 2278263.520 ops/s
# Warmup Iteration  19: 2273934.417 ops/s
# Warmup Iteration  20: 2277849.470 ops/s
# Warmup Iteration  21: 2276801.121 ops/s
# Warmup Iteration  22: 2276039.281 ops/s
# Warmup Iteration  23: 2278292.932 ops/s
# Warmup Iteration  24: 2277712.644 ops/s
# Warmup Iteration  25: 2278525.445 ops/s
# Warmup Iteration  26: 2278588.455 ops/s
# Warmup Iteration  27: 2280053.915 ops/s
# Warmup Iteration  28: 2279821.295 ops/s
# Warmup Iteration  29: 2275894.064 ops/s
# Warmup Iteration  30: 2277843.230 ops/s
Iteration   1: 2283122.343 ops/s
Iteration   2: 2274940.591 ops/s
Iteration   3: 2279762.197 ops/s
Iteration   4: 2267106.906 ops/s
Iteration   5: 2274590.047 ops/s
Iteration   6: 2272197.355 ops/s
Iteration   7: 2265795.344 ops/s
Iteration   8: 2279239.666 ops/s
Iteration   9: 2272185.917 ops/s
Iteration  10: 2268150.992 ops/s
Iteration  11: 2280393.448 ops/s
Iteration  12: 2273814.942 ops/s
Iteration  13: 2272539.475 ops/s
Iteration  14: 2277295.211 ops/s
Iteration  15: 2262785.861 ops/s
Iteration  16: 2276482.379 ops/s
Iteration  17: 2274237.982 ops/s
Iteration  18: 2280256.212 ops/s
Iteration  19: 2278486.508 ops/s
Iteration  20: 2275160.107 ops/s
Iteration  21: 2275270.126 ops/s
Iteration  22: 2266260.806 ops/s
Iteration  23: 2270161.818 ops/s
Iteration  24: 2266884.592 ops/s
Iteration  25: 2280427.749 ops/s
Iteration  26: 2275454.846 ops/s
Iteration  27: 2275734.223 ops/s
Iteration  28: 2282666.106 ops/s
Iteration  29: 2278013.613 ops/s
Iteration  30: 2279496.350 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forEach":
  2274630.457 ±(99.9%) 3574.263 ops/s [Average]
  (min, avg, max) = (2262785.861, 2274630.457, 2283122.343), stdev = 5349.789
  CI (99.9%): [2271056.194, 2278204.720] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forEach  thrpt   30  2274630.457 ± 3574.263  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 121021.615 ops/s
# Warmup Iteration   2: 143180.190 ops/s
# Warmup Iteration   3: 190406.949 ops/s
# Warmup Iteration   4: 194695.663 ops/s
# Warmup Iteration   5: 194337.142 ops/s
# Warmup Iteration   6: 195373.988 ops/s
# Warmup Iteration   7: 195126.282 ops/s
# Warmup Iteration   8: 195034.597 ops/s
# Warmup Iteration   9: 194903.025 ops/s
# Warmup Iteration  10: 195096.948 ops/s
# Warmup Iteration  11: 177413.406 ops/s
# Warmup Iteration  12: 181201.077 ops/s
# Warmup Iteration  13: 195607.814 ops/s
# Warmup Iteration  14: 194290.130 ops/s
# Warmup Iteration  15: 195407.914 ops/s
# Warmup Iteration  16: 195268.783 ops/s
# Warmup Iteration  17: 202200.178 ops/s
# Warmup Iteration  18: 202274.559 ops/s
# Warmup Iteration  19: 202128.064 ops/s
# Warmup Iteration  20: 202664.111 ops/s
# Warmup Iteration  21: 202527.838 ops/s
# Warmup Iteration  22: 202355.460 ops/s
# Warmup Iteration  23: 201976.654 ops/s
# Warmup Iteration  24: 202567.122 ops/s
# Warmup Iteration  25: 202405.850 ops/s
# Warmup Iteration  26: 202699.061 ops/s
# Warmup Iteration  27: 201988.457 ops/s
# Warmup Iteration  28: 202550.182 ops/s
# Warmup Iteration  29: 202060.080 ops/s
# Warmup Iteration  30: 202548.050 ops/s
Iteration   1: 202765.501 ops/s
Iteration   2: 202667.287 ops/s
Iteration   3: 202618.325 ops/s
Iteration   4: 202352.633 ops/s
Iteration   5: 202398.103 ops/s
Iteration   6: 202531.262 ops/s
Iteration   7: 201887.136 ops/s
Iteration   8: 202292.934 ops/s
Iteration   9: 202664.566 ops/s
Iteration  10: 202530.930 ops/s
Iteration  11: 202510.524 ops/s
Iteration  12: 201024.449 ops/s
Iteration  13: 201463.569 ops/s
Iteration  14: 201178.219 ops/s
Iteration  15: 202249.359 ops/s
Iteration  16: 201071.539 ops/s
Iteration  17: 202511.820 ops/s
Iteration  18: 202473.960 ops/s
Iteration  19: 202140.917 ops/s
Iteration  20: 202072.547 ops/s
Iteration  21: 202727.405 ops/s
Iteration  22: 202663.762 ops/s
Iteration  23: 202469.839 ops/s
Iteration  24: 202895.600 ops/s
Iteration  25: 202855.592 ops/s
Iteration  26: 202601.288 ops/s
Iteration  27: 201035.370 ops/s
Iteration  28: 201426.634 ops/s
Iteration  29: 199135.403 ops/s
Iteration  30: 199492.958 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forEachFromTo":
  202023.648 ±(99.9%) 623.198 ops/s [Average]
  (min, avg, max) = (199135.403, 202023.648, 202895.600), stdev = 932.773
  CI (99.9%): [201400.450, 202646.845] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forEachFromTo  thrpt   30  202023.648 ± 623.198  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1189649.308 ops/s
# Warmup Iteration   2: 2428427.934 ops/s
# Warmup Iteration   3: 2665762.220 ops/s
# Warmup Iteration   4: 2677424.925 ops/s
# Warmup Iteration   5: 2216109.236 ops/s
# Warmup Iteration   6: 2673472.777 ops/s
# Warmup Iteration   7: 2657410.705 ops/s
# Warmup Iteration   8: 2667006.479 ops/s
# Warmup Iteration   9: 2674746.056 ops/s
# Warmup Iteration  10: 2673012.188 ops/s
# Warmup Iteration  11: 2674835.405 ops/s
# Warmup Iteration  12: 2668037.541 ops/s
# Warmup Iteration  13: 2675266.847 ops/s
# Warmup Iteration  14: 2674555.575 ops/s
# Warmup Iteration  15: 2674757.586 ops/s
# Warmup Iteration  16: 2674031.638 ops/s
# Warmup Iteration  17: 2671859.544 ops/s
# Warmup Iteration  18: 2669557.842 ops/s
# Warmup Iteration  19: 2673981.813 ops/s
# Warmup Iteration  20: 2675271.042 ops/s
# Warmup Iteration  21: 2672166.302 ops/s
# Warmup Iteration  22: 2669154.626 ops/s
# Warmup Iteration  23: 2667574.996 ops/s
# Warmup Iteration  24: 2649642.822 ops/s
# Warmup Iteration  25: 2668337.726 ops/s
# Warmup Iteration  26: 2672103.903 ops/s
# Warmup Iteration  27: 2667330.637 ops/s
# Warmup Iteration  28: 2671471.657 ops/s
# Warmup Iteration  29: 2671386.583 ops/s
# Warmup Iteration  30: 2673664.989 ops/s
Iteration   1: 2667011.894 ops/s
Iteration   2: 2666048.662 ops/s
Iteration   3: 2674125.054 ops/s
Iteration   4: 2673767.015 ops/s
Iteration   5: 2680359.424 ops/s
Iteration   6: 2673677.032 ops/s
Iteration   7: 2670858.448 ops/s
Iteration   8: 2680089.933 ops/s
Iteration   9: 2671744.181 ops/s
Iteration  10: 2671922.792 ops/s
Iteration  11: 2678544.818 ops/s
Iteration  12: 2674485.661 ops/s
Iteration  13: 2671312.416 ops/s
Iteration  14: 2675842.792 ops/s
Iteration  15: 2674811.416 ops/s
Iteration  16: 2671902.151 ops/s
Iteration  17: 2678146.764 ops/s
Iteration  18: 2676027.121 ops/s
Iteration  19: 2674615.552 ops/s
Iteration  20: 2679881.098 ops/s
Iteration  21: 2669831.735 ops/s
Iteration  22: 2671941.998 ops/s
Iteration  23: 2680041.152 ops/s
Iteration  24: 2672709.398 ops/s
Iteration  25: 2672523.776 ops/s
Iteration  26: 2672428.218 ops/s
Iteration  27: 2680063.470 ops/s
Iteration  28: 2672654.425 ops/s
Iteration  29: 2661567.188 ops/s
Iteration  30: 2680159.876 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forEachWith":
  2673969.849 ±(99.9%) 3032.286 ops/s [Average]
  (min, avg, max) = (2661567.188, 2673969.849, 2680359.424), stdev = 4538.583
  CI (99.9%): [2670937.563, 2677002.134] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forEachWith  thrpt   30  2673969.849 ± 3032.286  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1264789.886 ops/s
# Warmup Iteration   2: 2575563.732 ops/s
# Warmup Iteration   3: 2832721.107 ops/s
# Warmup Iteration   4: 2844691.723 ops/s
# Warmup Iteration   5: 2341918.658 ops/s
# Warmup Iteration   6: 2858036.666 ops/s
# Warmup Iteration   7: 2857912.592 ops/s
# Warmup Iteration   8: 2854231.459 ops/s
# Warmup Iteration   9: 2855579.490 ops/s
# Warmup Iteration  10: 2855294.167 ops/s
# Warmup Iteration  11: 2858747.956 ops/s
# Warmup Iteration  12: 2855273.693 ops/s
# Warmup Iteration  13: 2855615.369 ops/s
# Warmup Iteration  14: 2859752.935 ops/s
# Warmup Iteration  15: 2851924.051 ops/s
# Warmup Iteration  16: 2866897.833 ops/s
# Warmup Iteration  17: 2856085.612 ops/s
# Warmup Iteration  18: 2853492.546 ops/s
# Warmup Iteration  19: 2849281.763 ops/s
# Warmup Iteration  20: 2850534.646 ops/s
# Warmup Iteration  21: 2854005.666 ops/s
# Warmup Iteration  22: 2858126.907 ops/s
# Warmup Iteration  23: 2853797.384 ops/s
# Warmup Iteration  24: 2852124.838 ops/s
# Warmup Iteration  25: 2857814.706 ops/s
# Warmup Iteration  26: 2851304.630 ops/s
# Warmup Iteration  27: 2853121.583 ops/s
# Warmup Iteration  28: 2854358.959 ops/s
# Warmup Iteration  29: 2853271.809 ops/s
# Warmup Iteration  30: 2856298.502 ops/s
Iteration   1: 2854045.641 ops/s
Iteration   2: 2854215.542 ops/s
Iteration   3: 2858571.989 ops/s
Iteration   4: 2848233.085 ops/s
Iteration   5: 2850136.914 ops/s
Iteration   6: 2854443.096 ops/s
Iteration   7: 2854218.377 ops/s
Iteration   8: 2853823.255 ops/s
Iteration   9: 2858286.005 ops/s
Iteration  10: 2854743.347 ops/s
Iteration  11: 2843579.541 ops/s
Iteration  12: 2864112.564 ops/s
Iteration  13: 2856080.026 ops/s
Iteration  14: 2858784.596 ops/s
Iteration  15: 2854417.198 ops/s
Iteration  16: 2860109.517 ops/s
Iteration  17: 2854622.369 ops/s
Iteration  18: 2855847.483 ops/s
Iteration  19: 2858638.134 ops/s
Iteration  20: 2854004.844 ops/s
Iteration  21: 2849599.843 ops/s
Iteration  22: 2860857.931 ops/s
Iteration  23: 2829301.752 ops/s
Iteration  24: 2833676.074 ops/s
Iteration  25: 2849056.703 ops/s
Iteration  26: 2853212.000 ops/s
Iteration  27: 2855046.090 ops/s
Iteration  28: 2858251.480 ops/s
Iteration  29: 2853418.927 ops/s
Iteration  30: 2832035.658 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forEachWithIndex":
  2852512.333 ±(99.9%) 5463.491 ops/s [Average]
  (min, avg, max) = (2829301.752, 2852512.333, 2864112.564), stdev = 8177.496
  CI (99.9%): [2847048.842, 2857975.823] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  2852512.333 ± 5463.491  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forEachWithIndexWithFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forEachWithIndexWithFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 124165.967 ops/s
# Warmup Iteration   2: 144303.494 ops/s
# Warmup Iteration   3: 192690.994 ops/s
# Warmup Iteration   4: 191981.243 ops/s
# Warmup Iteration   5: 192160.138 ops/s
# Warmup Iteration   6: 193212.044 ops/s
# Warmup Iteration   7: 193679.836 ops/s
# Warmup Iteration   8: 193402.947 ops/s
# Warmup Iteration   9: 193282.883 ops/s
# Warmup Iteration  10: 193811.549 ops/s
# Warmup Iteration  11: 161916.992 ops/s
# Warmup Iteration  12: 193670.913 ops/s
# Warmup Iteration  13: 193511.298 ops/s
# Warmup Iteration  14: 193244.382 ops/s
# Warmup Iteration  15: 193233.898 ops/s
# Warmup Iteration  16: 193092.532 ops/s
# Warmup Iteration  17: 199939.869 ops/s
# Warmup Iteration  18: 199411.012 ops/s
# Warmup Iteration  19: 199676.712 ops/s
# Warmup Iteration  20: 200090.704 ops/s
# Warmup Iteration  21: 198751.495 ops/s
# Warmup Iteration  22: 198859.963 ops/s
# Warmup Iteration  23: 199678.861 ops/s
# Warmup Iteration  24: 199584.076 ops/s
# Warmup Iteration  25: 199824.837 ops/s
# Warmup Iteration  26: 199693.359 ops/s
# Warmup Iteration  27: 199938.890 ops/s
# Warmup Iteration  28: 199988.029 ops/s
# Warmup Iteration  29: 200335.516 ops/s
# Warmup Iteration  30: 199869.747 ops/s
Iteration   1: 199703.497 ops/s
Iteration   2: 200285.417 ops/s
Iteration   3: 197863.991 ops/s
Iteration   4: 199438.573 ops/s
Iteration   5: 199894.946 ops/s
Iteration   6: 199642.962 ops/s
Iteration   7: 199863.296 ops/s
Iteration   8: 200163.550 ops/s
Iteration   9: 200073.455 ops/s
Iteration  10: 199495.488 ops/s
Iteration  11: 198719.603 ops/s
Iteration  12: 199227.743 ops/s
Iteration  13: 199857.120 ops/s
Iteration  14: 199333.204 ops/s
Iteration  15: 200198.210 ops/s
Iteration  16: 200393.892 ops/s
Iteration  17: 200177.915 ops/s
Iteration  18: 199936.778 ops/s
Iteration  19: 200075.443 ops/s
Iteration  20: 199861.253 ops/s
Iteration  21: 199801.095 ops/s
Iteration  22: 200173.917 ops/s
Iteration  23: 200218.838 ops/s
Iteration  24: 200062.213 ops/s
Iteration  25: 199801.328 ops/s
Iteration  26: 199876.513 ops/s
Iteration  27: 200087.830 ops/s
Iteration  28: 199512.313 ops/s
Iteration  29: 200049.875 ops/s
Iteration  30: 199883.352 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forEachWithIndexWithFromTo":
  199789.120 ±(99.9%) 340.913 ops/s [Average]
  (min, avg, max) = (197863.991, 199789.120, 200393.892), stdev = 510.263
  CI (99.9%): [199448.207, 200130.034] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forEachWithIndexWithFromTo  thrpt   30  199789.120 ± 340.913  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forLoop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forLoop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 172042199.725 ops/s
# Warmup Iteration   2: 298657437.107 ops/s
# Warmup Iteration   3: 288790193.203 ops/s
# Warmup Iteration   4: 322522208.533 ops/s
# Warmup Iteration   5: 323169905.039 ops/s
# Warmup Iteration   6: 322897043.502 ops/s
# Warmup Iteration   7: 322161716.564 ops/s
# Warmup Iteration   8: 324231173.110 ops/s
# Warmup Iteration   9: 322281297.611 ops/s
# Warmup Iteration  10: 322926279.330 ops/s
# Warmup Iteration  11: 323675487.719 ops/s
# Warmup Iteration  12: 323563492.520 ops/s
# Warmup Iteration  13: 323184226.438 ops/s
# Warmup Iteration  14: 323652176.022 ops/s
# Warmup Iteration  15: 322708922.450 ops/s
# Warmup Iteration  16: 322624672.891 ops/s
# Warmup Iteration  17: 321248238.402 ops/s
# Warmup Iteration  18: 322671051.715 ops/s
# Warmup Iteration  19: 323672730.797 ops/s
# Warmup Iteration  20: 322561782.473 ops/s
# Warmup Iteration  21: 321440776.395 ops/s
# Warmup Iteration  22: 320650768.917 ops/s
# Warmup Iteration  23: 319249963.557 ops/s
# Warmup Iteration  24: 320743133.830 ops/s
# Warmup Iteration  25: 320393777.127 ops/s
# Warmup Iteration  26: 320503430.778 ops/s
# Warmup Iteration  27: 318899219.070 ops/s
# Warmup Iteration  28: 320699313.804 ops/s
# Warmup Iteration  29: 319855888.341 ops/s
# Warmup Iteration  30: 322028150.737 ops/s
Iteration   1: 321329645.857 ops/s
Iteration   2: 322682764.936 ops/s
Iteration   3: 322660123.180 ops/s
Iteration   4: 321352427.248 ops/s
Iteration   5: 320567309.418 ops/s
Iteration   6: 321259471.310 ops/s
Iteration   7: 322360454.772 ops/s
Iteration   8: 319908360.371 ops/s
Iteration   9: 321235763.142 ops/s
Iteration  10: 320531475.325 ops/s
Iteration  11: 320902767.747 ops/s
Iteration  12: 321268700.494 ops/s
Iteration  13: 322142126.080 ops/s
Iteration  14: 321160186.603 ops/s
Iteration  15: 321033016.619 ops/s
Iteration  16: 322448193.992 ops/s
Iteration  17: 319005199.612 ops/s
Iteration  18: 322520211.891 ops/s
Iteration  19: 320551563.277 ops/s
Iteration  20: 321249589.095 ops/s
Iteration  21: 317978986.535 ops/s
Iteration  22: 322429956.994 ops/s
Iteration  23: 320330777.301 ops/s
Iteration  24: 320085706.726 ops/s
Iteration  25: 320917433.171 ops/s
Iteration  26: 318614014.830 ops/s
Iteration  27: 318690601.222 ops/s
Iteration  28: 319530746.042 ops/s
Iteration  29: 319012956.321 ops/s
Iteration  30: 320967398.109 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forLoop":
  320824264.274 ±(99.9%) 860680.754 ops/s [Average]
  (min, avg, max) = (317978986.535, 320824264.274, 322682764.936), stdev = 1288226.533
  CI (99.9%): [319963583.520, 321684945.028] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt          Score        Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_forLoop  thrpt   30  320824264.274 ± 860680.754  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 843261.321 ops/s
# Warmup Iteration   2: 1595615.528 ops/s
# Warmup Iteration   3: 1785270.706 ops/s
# Warmup Iteration   4: 1798848.746 ops/s
# Warmup Iteration   5: 1573689.730 ops/s
# Warmup Iteration   6: 1687663.466 ops/s
# Warmup Iteration   7: 1799914.735 ops/s
# Warmup Iteration   8: 1799386.777 ops/s
# Warmup Iteration   9: 1799283.499 ops/s
# Warmup Iteration  10: 1792997.059 ops/s
# Warmup Iteration  11: 1798874.718 ops/s
# Warmup Iteration  12: 1799270.224 ops/s
# Warmup Iteration  13: 1799114.530 ops/s
# Warmup Iteration  14: 1795970.625 ops/s
# Warmup Iteration  15: 1800516.891 ops/s
# Warmup Iteration  16: 1799950.707 ops/s
# Warmup Iteration  17: 1798105.581 ops/s
# Warmup Iteration  18: 1786101.026 ops/s
# Warmup Iteration  19: 1797700.936 ops/s
# Warmup Iteration  20: 1798243.555 ops/s
# Warmup Iteration  21: 1792486.349 ops/s
# Warmup Iteration  22: 1797318.529 ops/s
# Warmup Iteration  23: 1796224.610 ops/s
# Warmup Iteration  24: 1799013.295 ops/s
# Warmup Iteration  25: 1798331.245 ops/s
# Warmup Iteration  26: 1797866.809 ops/s
# Warmup Iteration  27: 1796495.553 ops/s
# Warmup Iteration  28: 1797529.537 ops/s
# Warmup Iteration  29: 1799673.640 ops/s
# Warmup Iteration  30: 1796080.228 ops/s
Iteration   1: 1792596.564 ops/s
Iteration   2: 1789400.627 ops/s
Iteration   3: 1793069.710 ops/s
Iteration   4: 1798287.436 ops/s
Iteration   5: 1791296.796 ops/s
Iteration   6: 1798286.755 ops/s
Iteration   7: 1786787.911 ops/s
Iteration   8: 1801231.947 ops/s
Iteration   9: 1795293.386 ops/s
Iteration  10: 1797079.144 ops/s
Iteration  11: 1794666.521 ops/s
Iteration  12: 1797737.574 ops/s
Iteration  13: 1800711.199 ops/s
Iteration  14: 1799255.313 ops/s
Iteration  15: 1799287.559 ops/s
Iteration  16: 1800199.555 ops/s
Iteration  17: 1793992.702 ops/s
Iteration  18: 1798994.693 ops/s
Iteration  19: 1795164.817 ops/s
Iteration  20: 1797138.472 ops/s
Iteration  21: 1800243.347 ops/s
Iteration  22: 1792578.174 ops/s
Iteration  23: 1792329.583 ops/s
Iteration  24: 1798204.606 ops/s
Iteration  25: 1795673.826 ops/s
Iteration  26: 1792112.986 ops/s
Iteration  27: 1801164.270 ops/s
Iteration  28: 1794186.385 ops/s
Iteration  29: 1801371.673 ops/s
Iteration  30: 1794921.196 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_getFirst":
  1796108.824 ±(99.9%) 2524.703 ops/s [Average]
  (min, avg, max) = (1786787.911, 1796108.824, 1801371.673), stdev = 3778.857
  CI (99.9%): [1793584.121, 1798633.527] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_getFirst  thrpt   30  1796108.824 ± 2524.703  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 839968.407 ops/s
# Warmup Iteration   2: 1581674.480 ops/s
# Warmup Iteration   3: 1765337.199 ops/s
# Warmup Iteration   4: 1786266.167 ops/s
# Warmup Iteration   5: 1591267.678 ops/s
# Warmup Iteration   6: 1651371.230 ops/s
# Warmup Iteration   7: 1784798.512 ops/s
# Warmup Iteration   8: 1781628.047 ops/s
# Warmup Iteration   9: 1784625.424 ops/s
# Warmup Iteration  10: 1787260.481 ops/s
# Warmup Iteration  11: 1787475.254 ops/s
# Warmup Iteration  12: 1788094.309 ops/s
# Warmup Iteration  13: 1787750.934 ops/s
# Warmup Iteration  14: 1768938.881 ops/s
# Warmup Iteration  15: 1775929.442 ops/s
# Warmup Iteration  16: 1779837.547 ops/s
# Warmup Iteration  17: 1787567.948 ops/s
# Warmup Iteration  18: 1781028.327 ops/s
# Warmup Iteration  19: 1788080.577 ops/s
# Warmup Iteration  20: 1782184.879 ops/s
# Warmup Iteration  21: 1789613.697 ops/s
# Warmup Iteration  22: 1786082.309 ops/s
# Warmup Iteration  23: 1787145.996 ops/s
# Warmup Iteration  24: 1789038.803 ops/s
# Warmup Iteration  25: 1779978.630 ops/s
# Warmup Iteration  26: 1782417.010 ops/s
# Warmup Iteration  27: 1788738.753 ops/s
# Warmup Iteration  28: 1785524.914 ops/s
# Warmup Iteration  29: 1787750.019 ops/s
# Warmup Iteration  30: 1788883.425 ops/s
Iteration   1: 1789603.204 ops/s
Iteration   2: 1785618.414 ops/s
Iteration   3: 1783591.305 ops/s
Iteration   4: 1789484.778 ops/s
Iteration   5: 1782643.785 ops/s
Iteration   6: 1786935.024 ops/s
Iteration   7: 1787920.064 ops/s
Iteration   8: 1789350.525 ops/s
Iteration   9: 1770945.379 ops/s
Iteration  10: 1788861.930 ops/s
Iteration  11: 1788806.394 ops/s
Iteration  12: 1784333.992 ops/s
Iteration  13: 1788789.015 ops/s
Iteration  14: 1780761.530 ops/s
Iteration  15: 1788788.148 ops/s
Iteration  16: 1787475.717 ops/s
Iteration  17: 1785807.582 ops/s
Iteration  18: 1786720.955 ops/s
Iteration  19: 1782194.223 ops/s
Iteration  20: 1790098.191 ops/s
Iteration  21: 1786435.108 ops/s
Iteration  22: 1781197.918 ops/s
Iteration  23: 1778838.604 ops/s
Iteration  24: 1785419.272 ops/s
Iteration  25: 1786715.121 ops/s
Iteration  26: 1790631.938 ops/s
Iteration  27: 1786656.675 ops/s
Iteration  28: 1788979.126 ops/s
Iteration  29: 1788731.278 ops/s
Iteration  30: 1783520.079 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_getLast":
  1785861.843 ±(99.9%) 2773.629 ops/s [Average]
  (min, avg, max) = (1770945.379, 1785861.843, 1790631.938), stdev = 4151.438
  CI (99.9%): [1783088.213, 1788635.472] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_getLast  thrpt   30  1785861.843 ± 2773.629  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 214372.880 ops/s
# Warmup Iteration   2: 378953.402 ops/s
# Warmup Iteration   3: 431264.150 ops/s
# Warmup Iteration   4: 432444.077 ops/s
# Warmup Iteration   5: 433702.911 ops/s
# Warmup Iteration   6: 365150.026 ops/s
# Warmup Iteration   7: 433162.136 ops/s
# Warmup Iteration   8: 433699.740 ops/s
# Warmup Iteration   9: 432408.826 ops/s
# Warmup Iteration  10: 430798.252 ops/s
# Warmup Iteration  11: 432931.466 ops/s
# Warmup Iteration  12: 433023.438 ops/s
# Warmup Iteration  13: 432254.107 ops/s
# Warmup Iteration  14: 431785.870 ops/s
# Warmup Iteration  15: 433543.448 ops/s
# Warmup Iteration  16: 432316.867 ops/s
# Warmup Iteration  17: 433538.623 ops/s
# Warmup Iteration  18: 432895.475 ops/s
# Warmup Iteration  19: 433118.339 ops/s
# Warmup Iteration  20: 433315.349 ops/s
# Warmup Iteration  21: 432944.519 ops/s
# Warmup Iteration  22: 433970.081 ops/s
# Warmup Iteration  23: 433511.293 ops/s
# Warmup Iteration  24: 432676.174 ops/s
# Warmup Iteration  25: 432007.477 ops/s
# Warmup Iteration  26: 432683.915 ops/s
# Warmup Iteration  27: 433196.353 ops/s
# Warmup Iteration  28: 433166.989 ops/s
# Warmup Iteration  29: 433992.725 ops/s
# Warmup Iteration  30: 434883.971 ops/s
Iteration   1: 434291.574 ops/s
Iteration   2: 433839.856 ops/s
Iteration   3: 434061.029 ops/s
Iteration   4: 434532.505 ops/s
Iteration   5: 433579.655 ops/s
Iteration   6: 432069.305 ops/s
Iteration   7: 432733.118 ops/s
Iteration   8: 433092.397 ops/s
Iteration   9: 432464.532 ops/s
Iteration  10: 434367.787 ops/s
Iteration  11: 432506.460 ops/s
Iteration  12: 433749.894 ops/s
Iteration  13: 432486.493 ops/s
Iteration  14: 433338.682 ops/s
Iteration  15: 434822.163 ops/s
Iteration  16: 434108.327 ops/s
Iteration  17: 434836.262 ops/s
Iteration  18: 433374.258 ops/s
Iteration  19: 433866.625 ops/s
Iteration  20: 433132.262 ops/s
Iteration  21: 434209.851 ops/s
Iteration  22: 434680.909 ops/s
Iteration  23: 434041.049 ops/s
Iteration  24: 434960.847 ops/s
Iteration  25: 434061.523 ops/s
Iteration  26: 434476.767 ops/s
Iteration  27: 433413.350 ops/s
Iteration  28: 434706.786 ops/s
Iteration  29: 431927.041 ops/s
Iteration  30: 431295.334 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupBy":
  433634.221 ±(99.9%) 643.473 ops/s [Average]
  (min, avg, max) = (431295.334, 433634.221, 434960.847), stdev = 963.120
  CI (99.9%): [432990.748, 434277.694] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupBy  thrpt   30  433634.221 ± 643.473  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 192520.027 ops/s
# Warmup Iteration   2: 341666.426 ops/s
# Warmup Iteration   3: 393449.051 ops/s
# Warmup Iteration   4: 393818.899 ops/s
# Warmup Iteration   5: 392159.935 ops/s
# Warmup Iteration   6: 332889.421 ops/s
# Warmup Iteration   7: 394381.638 ops/s
# Warmup Iteration   8: 394075.745 ops/s
# Warmup Iteration   9: 392318.368 ops/s
# Warmup Iteration  10: 392573.300 ops/s
# Warmup Iteration  11: 394055.111 ops/s
# Warmup Iteration  12: 394140.014 ops/s
# Warmup Iteration  13: 394757.833 ops/s
# Warmup Iteration  14: 394351.160 ops/s
# Warmup Iteration  15: 395306.111 ops/s
# Warmup Iteration  16: 394052.760 ops/s
# Warmup Iteration  17: 392358.486 ops/s
# Warmup Iteration  18: 393931.990 ops/s
# Warmup Iteration  19: 393953.432 ops/s
# Warmup Iteration  20: 394046.494 ops/s
# Warmup Iteration  21: 393672.198 ops/s
# Warmup Iteration  22: 391814.873 ops/s
# Warmup Iteration  23: 393307.379 ops/s
# Warmup Iteration  24: 393693.421 ops/s
# Warmup Iteration  25: 394638.419 ops/s
# Warmup Iteration  26: 394741.094 ops/s
# Warmup Iteration  27: 392352.049 ops/s
# Warmup Iteration  28: 391957.128 ops/s
# Warmup Iteration  29: 393730.155 ops/s
# Warmup Iteration  30: 393081.684 ops/s
Iteration   1: 392403.271 ops/s
Iteration   2: 395121.916 ops/s
Iteration   3: 394707.645 ops/s
Iteration   4: 394929.739 ops/s
Iteration   5: 393166.648 ops/s
Iteration   6: 393213.120 ops/s
Iteration   7: 389184.422 ops/s
Iteration   8: 392789.979 ops/s
Iteration   9: 392798.970 ops/s
Iteration  10: 392089.093 ops/s
Iteration  11: 394293.122 ops/s
Iteration  12: 394000.494 ops/s
Iteration  13: 394562.923 ops/s
Iteration  14: 394167.485 ops/s
Iteration  15: 390813.739 ops/s
Iteration  16: 392477.473 ops/s
Iteration  17: 394430.211 ops/s
Iteration  18: 392978.202 ops/s
Iteration  19: 392641.838 ops/s
Iteration  20: 393995.000 ops/s
Iteration  21: 393859.328 ops/s
Iteration  22: 393657.077 ops/s
Iteration  23: 393460.580 ops/s
Iteration  24: 393763.478 ops/s
Iteration  25: 393635.396 ops/s
Iteration  26: 394377.944 ops/s
Iteration  27: 393107.820 ops/s
Iteration  28: 393962.111 ops/s
Iteration  29: 394240.296 ops/s
Iteration  30: 393471.370 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupByEach":
  393410.023 ±(99.9%) 819.795 ops/s [Average]
  (min, avg, max) = (389184.422, 393410.023, 395121.916), stdev = 1227.031
  CI (99.9%): [392590.228, 394229.818] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupByEach  thrpt   30  393410.023 ± 819.795  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupByEachWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupByEachWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 203445.893 ops/s
# Warmup Iteration   2: 320983.234 ops/s
# Warmup Iteration   3: 382560.937 ops/s
# Warmup Iteration   4: 380677.927 ops/s
# Warmup Iteration   5: 382315.323 ops/s
# Warmup Iteration   6: 382610.590 ops/s
# Warmup Iteration   7: 325069.575 ops/s
# Warmup Iteration   8: 381748.928 ops/s
# Warmup Iteration   9: 382421.956 ops/s
# Warmup Iteration  10: 383797.206 ops/s
# Warmup Iteration  11: 381723.805 ops/s
# Warmup Iteration  12: 383126.212 ops/s
# Warmup Iteration  13: 383435.813 ops/s
# Warmup Iteration  14: 381172.558 ops/s
# Warmup Iteration  15: 382833.895 ops/s
# Warmup Iteration  16: 380839.463 ops/s
# Warmup Iteration  17: 396186.371 ops/s
# Warmup Iteration  18: 395318.873 ops/s
# Warmup Iteration  19: 394810.508 ops/s
# Warmup Iteration  20: 396039.445 ops/s
# Warmup Iteration  21: 395433.420 ops/s
# Warmup Iteration  22: 394762.729 ops/s
# Warmup Iteration  23: 394968.746 ops/s
# Warmup Iteration  24: 395772.415 ops/s
# Warmup Iteration  25: 395707.007 ops/s
# Warmup Iteration  26: 396651.080 ops/s
# Warmup Iteration  27: 395850.544 ops/s
# Warmup Iteration  28: 395263.971 ops/s
# Warmup Iteration  29: 394427.632 ops/s
# Warmup Iteration  30: 395445.166 ops/s
Iteration   1: 397510.885 ops/s
Iteration   2: 396365.386 ops/s
Iteration   3: 395365.075 ops/s
Iteration   4: 393861.580 ops/s
Iteration   5: 396900.687 ops/s
Iteration   6: 395611.744 ops/s
Iteration   7: 395316.222 ops/s
Iteration   8: 395498.542 ops/s
Iteration   9: 396517.681 ops/s
Iteration  10: 394848.117 ops/s
Iteration  11: 396438.955 ops/s
Iteration  12: 395030.999 ops/s
Iteration  13: 395469.755 ops/s
Iteration  14: 395333.121 ops/s
Iteration  15: 397157.736 ops/s
Iteration  16: 394432.805 ops/s
Iteration  17: 395823.468 ops/s
Iteration  18: 396431.284 ops/s
Iteration  19: 395326.395 ops/s
Iteration  20: 396624.936 ops/s
Iteration  21: 396164.717 ops/s
Iteration  22: 396804.908 ops/s
Iteration  23: 395770.371 ops/s
Iteration  24: 393396.343 ops/s
Iteration  25: 395365.622 ops/s
Iteration  26: 395103.618 ops/s
Iteration  27: 395878.071 ops/s
Iteration  28: 396227.513 ops/s
Iteration  29: 396602.293 ops/s
Iteration  30: 395198.298 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupByEachWithTarget":
  395745.904 ±(99.9%) 623.191 ops/s [Average]
  (min, avg, max) = (393396.343, 395745.904, 397510.885), stdev = 932.764
  CI (99.9%): [395122.713, 396369.096] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupByEachWithTarget  thrpt   30  395745.904 ± 623.191  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 241563.382 ops/s
# Warmup Iteration   2: 315896.020 ops/s
# Warmup Iteration   3: 406760.058 ops/s
# Warmup Iteration   4: 405705.668 ops/s
# Warmup Iteration   5: 408356.850 ops/s
# Warmup Iteration   6: 408224.598 ops/s
# Warmup Iteration   7: 408468.095 ops/s
# Warmup Iteration   8: 408354.305 ops/s
# Warmup Iteration   9: 339191.383 ops/s
# Warmup Iteration  10: 407242.286 ops/s
# Warmup Iteration  11: 406374.472 ops/s
# Warmup Iteration  12: 406474.721 ops/s
# Warmup Iteration  13: 406370.231 ops/s
# Warmup Iteration  14: 406049.774 ops/s
# Warmup Iteration  15: 405870.006 ops/s
# Warmup Iteration  16: 406118.898 ops/s
# Warmup Iteration  17: 417876.445 ops/s
# Warmup Iteration  18: 418073.308 ops/s
# Warmup Iteration  19: 419374.607 ops/s
# Warmup Iteration  20: 419455.556 ops/s
# Warmup Iteration  21: 418165.006 ops/s
# Warmup Iteration  22: 418223.878 ops/s
# Warmup Iteration  23: 418082.416 ops/s
# Warmup Iteration  24: 418429.503 ops/s
# Warmup Iteration  25: 418324.303 ops/s
# Warmup Iteration  26: 418393.909 ops/s
# Warmup Iteration  27: 418754.523 ops/s
# Warmup Iteration  28: 418230.244 ops/s
# Warmup Iteration  29: 418213.224 ops/s
# Warmup Iteration  30: 418409.676 ops/s
Iteration   1: 418542.612 ops/s
Iteration   2: 417183.690 ops/s
Iteration   3: 417954.602 ops/s
Iteration   4: 418208.538 ops/s
Iteration   5: 418632.813 ops/s
Iteration   6: 417537.736 ops/s
Iteration   7: 418687.627 ops/s
Iteration   8: 418291.575 ops/s
Iteration   9: 417717.500 ops/s
Iteration  10: 418738.581 ops/s
Iteration  11: 418788.962 ops/s
Iteration  12: 418293.703 ops/s
Iteration  13: 419116.302 ops/s
Iteration  14: 418638.672 ops/s
Iteration  15: 419052.105 ops/s
Iteration  16: 417905.998 ops/s
Iteration  17: 418181.204 ops/s
Iteration  18: 419038.453 ops/s
Iteration  19: 418339.527 ops/s
Iteration  20: 418278.088 ops/s
Iteration  21: 417658.497 ops/s
Iteration  22: 418617.338 ops/s
Iteration  23: 417570.152 ops/s
Iteration  24: 419335.802 ops/s
Iteration  25: 418955.399 ops/s
Iteration  26: 417743.928 ops/s
Iteration  27: 418208.572 ops/s
Iteration  28: 418822.965 ops/s
Iteration  29: 417723.134 ops/s
Iteration  30: 418776.319 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupByUniqueKey":
  418351.346 ±(99.9%) 366.528 ops/s [Average]
  (min, avg, max) = (417183.690, 418351.346, 419335.802), stdev = 548.603
  CI (99.9%): [417984.818, 418717.875] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  418351.346 ± 366.528  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 257028.744 ops/s
# Warmup Iteration   2: 347059.551 ops/s
# Warmup Iteration   3: 436150.274 ops/s
# Warmup Iteration   4: 434473.434 ops/s
# Warmup Iteration   5: 436506.524 ops/s
# Warmup Iteration   6: 435370.581 ops/s
# Warmup Iteration   7: 436404.151 ops/s
# Warmup Iteration   8: 403069.098 ops/s
# Warmup Iteration   9: 401846.134 ops/s
# Warmup Iteration  10: 437349.817 ops/s
# Warmup Iteration  11: 436971.128 ops/s
# Warmup Iteration  12: 437282.186 ops/s
# Warmup Iteration  13: 436083.015 ops/s
# Warmup Iteration  14: 436745.520 ops/s
# Warmup Iteration  15: 436877.540 ops/s
# Warmup Iteration  16: 436003.734 ops/s
# Warmup Iteration  17: 448949.341 ops/s
# Warmup Iteration  18: 448480.301 ops/s
# Warmup Iteration  19: 449396.562 ops/s
# Warmup Iteration  20: 448947.234 ops/s
# Warmup Iteration  21: 448477.801 ops/s
# Warmup Iteration  22: 448430.538 ops/s
# Warmup Iteration  23: 446318.144 ops/s
# Warmup Iteration  24: 448892.657 ops/s
# Warmup Iteration  25: 448510.746 ops/s
# Warmup Iteration  26: 449422.741 ops/s
# Warmup Iteration  27: 448885.108 ops/s
# Warmup Iteration  28: 448061.684 ops/s
# Warmup Iteration  29: 448265.558 ops/s
# Warmup Iteration  30: 448638.006 ops/s
Iteration   1: 449063.538 ops/s
Iteration   2: 448974.810 ops/s
Iteration   3: 447818.745 ops/s
Iteration   4: 449656.891 ops/s
Iteration   5: 449679.501 ops/s
Iteration   6: 447273.527 ops/s
Iteration   7: 449934.882 ops/s
Iteration   8: 448398.353 ops/s
Iteration   9: 449684.445 ops/s
Iteration  10: 449712.671 ops/s
Iteration  11: 449132.906 ops/s
Iteration  12: 449076.478 ops/s
Iteration  13: 449549.201 ops/s
Iteration  14: 448526.767 ops/s
Iteration  15: 449830.843 ops/s
Iteration  16: 448015.102 ops/s
Iteration  17: 449521.639 ops/s
Iteration  18: 449738.639 ops/s
Iteration  19: 449047.056 ops/s
Iteration  20: 450034.223 ops/s
Iteration  21: 449284.731 ops/s
Iteration  22: 449201.508 ops/s
Iteration  23: 450077.758 ops/s
Iteration  24: 448206.820 ops/s
Iteration  25: 449491.621 ops/s
Iteration  26: 449125.149 ops/s
Iteration  27: 448800.873 ops/s
Iteration  28: 449902.310 ops/s
Iteration  29: 449748.697 ops/s
Iteration  30: 447866.408 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupByUniqueKey_target":
  449145.870 ±(99.9%) 493.401 ops/s [Average]
  (min, avg, max) = (447273.527, 449145.870, 450077.758), stdev = 738.499
  CI (99.9%): [448652.469, 449639.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  449145.870 ± 493.401  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupByWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupByWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 244197.633 ops/s
# Warmup Iteration   2: 397880.609 ops/s
# Warmup Iteration   3: 477743.450 ops/s
# Warmup Iteration   4: 478717.522 ops/s
# Warmup Iteration   5: 476771.953 ops/s
# Warmup Iteration   6: 479773.972 ops/s
# Warmup Iteration   7: 402743.831 ops/s
# Warmup Iteration   8: 480102.790 ops/s
# Warmup Iteration   9: 478433.059 ops/s
# Warmup Iteration  10: 479526.736 ops/s
# Warmup Iteration  11: 479490.056 ops/s
# Warmup Iteration  12: 479184.468 ops/s
# Warmup Iteration  13: 478798.021 ops/s
# Warmup Iteration  14: 478191.039 ops/s
# Warmup Iteration  15: 478417.406 ops/s
# Warmup Iteration  16: 477010.714 ops/s
# Warmup Iteration  17: 480943.619 ops/s
# Warmup Iteration  18: 479604.620 ops/s
# Warmup Iteration  19: 478304.845 ops/s
# Warmup Iteration  20: 479297.984 ops/s
# Warmup Iteration  21: 479785.290 ops/s
# Warmup Iteration  22: 478406.131 ops/s
# Warmup Iteration  23: 477447.594 ops/s
# Warmup Iteration  24: 478221.623 ops/s
# Warmup Iteration  25: 478178.334 ops/s
# Warmup Iteration  26: 480449.878 ops/s
# Warmup Iteration  27: 479565.816 ops/s
# Warmup Iteration  28: 480363.432 ops/s
# Warmup Iteration  29: 481204.980 ops/s
# Warmup Iteration  30: 480024.297 ops/s
Iteration   1: 481493.377 ops/s
Iteration   2: 479574.609 ops/s
Iteration   3: 479579.135 ops/s
Iteration   4: 478470.944 ops/s
Iteration   5: 478362.685 ops/s
Iteration   6: 479271.615 ops/s
Iteration   7: 480436.594 ops/s
Iteration   8: 477705.139 ops/s
Iteration   9: 478501.857 ops/s
Iteration  10: 481021.081 ops/s
Iteration  11: 479543.851 ops/s
Iteration  12: 480604.152 ops/s
Iteration  13: 480177.890 ops/s
Iteration  14: 479972.827 ops/s
Iteration  15: 479382.182 ops/s
Iteration  16: 479892.658 ops/s
Iteration  17: 479464.371 ops/s
Iteration  18: 481083.304 ops/s
Iteration  19: 479668.917 ops/s
Iteration  20: 480578.303 ops/s
Iteration  21: 478546.234 ops/s
Iteration  22: 480736.357 ops/s
Iteration  23: 480101.408 ops/s
Iteration  24: 479834.617 ops/s
Iteration  25: 481107.296 ops/s
Iteration  26: 478619.661 ops/s
Iteration  27: 478008.271 ops/s
Iteration  28: 479898.097 ops/s
Iteration  29: 479401.291 ops/s
Iteration  30: 481155.475 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupByWithTarget":
  479739.807 ±(99.9%) 670.981 ops/s [Average]
  (min, avg, max) = (477705.139, 479739.807, 481493.377), stdev = 1004.292
  CI (99.9%): [479068.826, 480410.787] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_groupByWithTarget  thrpt   30  479739.807 ± 670.981  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1601517.848 ops/s
# Warmup Iteration   2: 2842817.207 ops/s
# Warmup Iteration   3: 3205424.405 ops/s
# Warmup Iteration   4: 3234956.515 ops/s
# Warmup Iteration   5: 3221046.552 ops/s
# Warmup Iteration   6: 2687662.664 ops/s
# Warmup Iteration   7: 3236994.833 ops/s
# Warmup Iteration   8: 3248590.372 ops/s
# Warmup Iteration   9: 3242366.964 ops/s
# Warmup Iteration  10: 3249750.521 ops/s
# Warmup Iteration  11: 3254063.395 ops/s
# Warmup Iteration  12: 3250510.376 ops/s
# Warmup Iteration  13: 3249306.992 ops/s
# Warmup Iteration  14: 3248732.845 ops/s
# Warmup Iteration  15: 3230110.342 ops/s
# Warmup Iteration  16: 3238520.542 ops/s
# Warmup Iteration  17: 3241284.246 ops/s
# Warmup Iteration  18: 3234613.413 ops/s
# Warmup Iteration  19: 3245483.955 ops/s
# Warmup Iteration  20: 3247198.174 ops/s
# Warmup Iteration  21: 3242624.822 ops/s
# Warmup Iteration  22: 3247043.468 ops/s
# Warmup Iteration  23: 3242542.688 ops/s
# Warmup Iteration  24: 3237042.949 ops/s
# Warmup Iteration  25: 3247760.536 ops/s
# Warmup Iteration  26: 3245081.857 ops/s
# Warmup Iteration  27: 3239270.252 ops/s
# Warmup Iteration  28: 3242148.949 ops/s
# Warmup Iteration  29: 3225064.846 ops/s
# Warmup Iteration  30: 3238000.521 ops/s
Iteration   1: 3248986.853 ops/s
Iteration   2: 3246942.533 ops/s
Iteration   3: 3230013.482 ops/s
Iteration   4: 3238100.120 ops/s
Iteration   5: 3243829.985 ops/s
Iteration   6: 3248217.721 ops/s
Iteration   7: 3249402.160 ops/s
Iteration   8: 3244727.643 ops/s
Iteration   9: 3245974.054 ops/s
Iteration  10: 3243234.210 ops/s
Iteration  11: 3239932.887 ops/s
Iteration  12: 3246835.853 ops/s
Iteration  13: 3248023.830 ops/s
Iteration  14: 3252538.320 ops/s
Iteration  15: 3238523.305 ops/s
Iteration  16: 3249159.928 ops/s
Iteration  17: 3243619.982 ops/s
Iteration  18: 3251791.377 ops/s
Iteration  19: 3246138.584 ops/s
Iteration  20: 3241283.214 ops/s
Iteration  21: 3250799.952 ops/s
Iteration  22: 3239473.609 ops/s
Iteration  23: 3233104.539 ops/s
Iteration  24: 3235164.722 ops/s
Iteration  25: 3242087.653 ops/s
Iteration  26: 3254617.556 ops/s
Iteration  27: 3243503.753 ops/s
Iteration  28: 3247298.892 ops/s
Iteration  29: 3244349.612 ops/s
Iteration  30: 3251664.112 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_indexOf":
  3244644.681 ±(99.9%) 3916.394 ops/s [Average]
  (min, avg, max) = (3230013.482, 3244644.681, 3254617.556), stdev = 5861.874
  CI (99.9%): [3240728.288, 3248561.075] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_indexOf  thrpt   30  3244644.681 ± 3916.394  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1455346.966 ops/s
# Warmup Iteration   2: 2762611.527 ops/s
# Warmup Iteration   3: 3127686.584 ops/s
# Warmup Iteration   4: 3156709.653 ops/s
# Warmup Iteration   5: 2862856.824 ops/s
# Warmup Iteration   6: 2871661.312 ops/s
# Warmup Iteration   7: 3162043.435 ops/s
# Warmup Iteration   8: 3155686.154 ops/s
# Warmup Iteration   9: 3158845.588 ops/s
# Warmup Iteration  10: 3153973.001 ops/s
# Warmup Iteration  11: 3158139.613 ops/s
# Warmup Iteration  12: 3157659.316 ops/s
# Warmup Iteration  13: 3156265.126 ops/s
# Warmup Iteration  14: 3149252.794 ops/s
# Warmup Iteration  15: 3156674.588 ops/s
# Warmup Iteration  16: 3160370.621 ops/s
# Warmup Iteration  17: 3158017.681 ops/s
# Warmup Iteration  18: 3155606.403 ops/s
# Warmup Iteration  19: 3155047.049 ops/s
# Warmup Iteration  20: 3156071.796 ops/s
# Warmup Iteration  21: 3159272.354 ops/s
# Warmup Iteration  22: 3156825.391 ops/s
# Warmup Iteration  23: 3161498.361 ops/s
# Warmup Iteration  24: 3159396.082 ops/s
# Warmup Iteration  25: 3157721.644 ops/s
# Warmup Iteration  26: 3157092.076 ops/s
# Warmup Iteration  27: 3146772.694 ops/s
# Warmup Iteration  28: 3134622.468 ops/s
# Warmup Iteration  29: 3147047.043 ops/s
# Warmup Iteration  30: 3146453.344 ops/s
Iteration   1: 3162859.068 ops/s
Iteration   2: 3154055.829 ops/s
Iteration   3: 3151157.593 ops/s
Iteration   4: 3161544.924 ops/s
Iteration   5: 3150697.247 ops/s
Iteration   6: 3154721.084 ops/s
Iteration   7: 3144169.445 ops/s
Iteration   8: 3147963.638 ops/s
Iteration   9: 3163082.002 ops/s
Iteration  10: 3158069.898 ops/s
Iteration  11: 3145593.046 ops/s
Iteration  12: 3163435.775 ops/s
Iteration  13: 3144075.457 ops/s
Iteration  14: 3159915.735 ops/s
Iteration  15: 3153554.246 ops/s
Iteration  16: 3157832.113 ops/s
Iteration  17: 3159728.694 ops/s
Iteration  18: 3157700.438 ops/s
Iteration  19: 3151638.353 ops/s
Iteration  20: 3165230.000 ops/s
Iteration  21: 3151626.918 ops/s
Iteration  22: 3161737.659 ops/s
Iteration  23: 3157606.108 ops/s
Iteration  24: 3150764.911 ops/s
Iteration  25: 3153438.532 ops/s
Iteration  26: 3153647.207 ops/s
Iteration  27: 3158499.649 ops/s
Iteration  28: 3162083.751 ops/s
Iteration  29: 3158698.030 ops/s
Iteration  30: 3167374.784 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_injectInto":
  3156083.404 ±(99.9%) 4150.314 ops/s [Average]
  (min, avg, max) = (3144075.457, 3156083.404, 3167374.784), stdev = 6211.995
  CI (99.9%): [3151933.090, 3160233.719] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_injectInto  thrpt   30  3156083.404 ± 4150.314  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 767178.019 ops/s
# Warmup Iteration   2: 1491944.803 ops/s
# Warmup Iteration   3: 1643877.547 ops/s
# Warmup Iteration   4: 1652644.553 ops/s
# Warmup Iteration   5: 1364494.645 ops/s
# Warmup Iteration   6: 1640977.033 ops/s
# Warmup Iteration   7: 1647190.435 ops/s
# Warmup Iteration   8: 1649670.451 ops/s
# Warmup Iteration   9: 1648381.528 ops/s
# Warmup Iteration  10: 1650492.094 ops/s
# Warmup Iteration  11: 1648641.999 ops/s
# Warmup Iteration  12: 1637287.561 ops/s
# Warmup Iteration  13: 1651960.701 ops/s
# Warmup Iteration  14: 1639749.307 ops/s
# Warmup Iteration  15: 1647081.002 ops/s
# Warmup Iteration  16: 1646516.806 ops/s
# Warmup Iteration  17: 1648298.446 ops/s
# Warmup Iteration  18: 1649339.522 ops/s
# Warmup Iteration  19: 1647034.067 ops/s
# Warmup Iteration  20: 1652347.019 ops/s
# Warmup Iteration  21: 1648983.025 ops/s
# Warmup Iteration  22: 1649670.169 ops/s
# Warmup Iteration  23: 1646168.350 ops/s
# Warmup Iteration  24: 1655026.372 ops/s
# Warmup Iteration  25: 1649756.095 ops/s
# Warmup Iteration  26: 1647772.375 ops/s
# Warmup Iteration  27: 1652143.774 ops/s
# Warmup Iteration  28: 1650463.523 ops/s
# Warmup Iteration  29: 1645786.589 ops/s
# Warmup Iteration  30: 1650518.614 ops/s
Iteration   1: 1650359.398 ops/s
Iteration   2: 1643432.483 ops/s
Iteration   3: 1643217.720 ops/s
Iteration   4: 1648242.590 ops/s
Iteration   5: 1641012.859 ops/s
Iteration   6: 1650752.941 ops/s
Iteration   7: 1653671.026 ops/s
Iteration   8: 1647847.374 ops/s
Iteration   9: 1649625.101 ops/s
Iteration  10: 1655869.936 ops/s
Iteration  11: 1649364.519 ops/s
Iteration  12: 1651248.630 ops/s
Iteration  13: 1649911.140 ops/s
Iteration  14: 1644496.010 ops/s
Iteration  15: 1652997.243 ops/s
Iteration  16: 1655982.595 ops/s
Iteration  17: 1649361.033 ops/s
Iteration  18: 1649029.467 ops/s
Iteration  19: 1645630.279 ops/s
Iteration  20: 1653076.968 ops/s
Iteration  21: 1655124.414 ops/s
Iteration  22: 1648359.623 ops/s
Iteration  23: 1651674.329 ops/s
Iteration  24: 1654263.966 ops/s
Iteration  25: 1648700.895 ops/s
Iteration  26: 1650594.755 ops/s
Iteration  27: 1649042.559 ops/s
Iteration  28: 1650529.590 ops/s
Iteration  29: 1653971.489 ops/s
Iteration  30: 1656267.016 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_injectIntoDouble":
  1650121.932 ±(99.9%) 2605.728 ops/s [Average]
  (min, avg, max) = (1641012.859, 1650121.932, 1656267.016), stdev = 3900.132
  CI (99.9%): [1647516.203, 1652727.660] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  1650121.932 ± 2605.728  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 807587.320 ops/s
# Warmup Iteration   2: 1517402.874 ops/s
# Warmup Iteration   3: 1676347.873 ops/s
# Warmup Iteration   4: 1684140.262 ops/s
# Warmup Iteration   5: 1517698.785 ops/s
# Warmup Iteration   6: 1552351.870 ops/s
# Warmup Iteration   7: 1690176.863 ops/s
# Warmup Iteration   8: 1679064.267 ops/s
# Warmup Iteration   9: 1679129.676 ops/s
# Warmup Iteration  10: 1680620.599 ops/s
# Warmup Iteration  11: 1683659.837 ops/s
# Warmup Iteration  12: 1686454.814 ops/s
# Warmup Iteration  13: 1688083.095 ops/s
# Warmup Iteration  14: 1683909.944 ops/s
# Warmup Iteration  15: 1683827.104 ops/s
# Warmup Iteration  16: 1687970.039 ops/s
# Warmup Iteration  17: 1688546.817 ops/s
# Warmup Iteration  18: 1677659.428 ops/s
# Warmup Iteration  19: 1684029.087 ops/s
# Warmup Iteration  20: 1684445.614 ops/s
# Warmup Iteration  21: 1686106.734 ops/s
# Warmup Iteration  22: 1688156.601 ops/s
# Warmup Iteration  23: 1684481.392 ops/s
# Warmup Iteration  24: 1690074.272 ops/s
# Warmup Iteration  25: 1687848.007 ops/s
# Warmup Iteration  26: 1689142.905 ops/s
# Warmup Iteration  27: 1688482.688 ops/s
# Warmup Iteration  28: 1690504.049 ops/s
# Warmup Iteration  29: 1674360.060 ops/s
# Warmup Iteration  30: 1682713.449 ops/s
Iteration   1: 1668955.549 ops/s
Iteration   2: 1687820.304 ops/s
Iteration   3: 1690403.701 ops/s
Iteration   4: 1685308.974 ops/s
Iteration   5: 1688494.704 ops/s
Iteration   6: 1690188.266 ops/s
Iteration   7: 1689416.711 ops/s
Iteration   8: 1693167.101 ops/s
Iteration   9: 1687472.085 ops/s
Iteration  10: 1689305.958 ops/s
Iteration  11: 1691839.560 ops/s
Iteration  12: 1688656.836 ops/s
Iteration  13: 1689027.669 ops/s
Iteration  14: 1689876.722 ops/s
Iteration  15: 1688165.333 ops/s
Iteration  16: 1690992.885 ops/s
Iteration  17: 1682915.479 ops/s
Iteration  18: 1689567.495 ops/s
Iteration  19: 1689422.100 ops/s
Iteration  20: 1684951.284 ops/s
Iteration  21: 1687224.994 ops/s
Iteration  22: 1691232.826 ops/s
Iteration  23: 1689699.630 ops/s
Iteration  24: 1687819.167 ops/s
Iteration  25: 1689287.628 ops/s
Iteration  26: 1688735.832 ops/s
Iteration  27: 1692681.319 ops/s
Iteration  28: 1684597.657 ops/s
Iteration  29: 1689734.247 ops/s
Iteration  30: 1693466.809 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_injectIntoFloat":
  1688347.628 ±(99.9%) 2932.674 ops/s [Average]
  (min, avg, max) = (1668955.549, 1688347.628, 1693466.809), stdev = 4389.489
  CI (99.9%): [1685414.953, 1691280.302] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  1688347.628 ± 2932.674  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 809896.080 ops/s
# Warmup Iteration   2: 1547922.249 ops/s
# Warmup Iteration   3: 1712575.868 ops/s
# Warmup Iteration   4: 1722702.276 ops/s
# Warmup Iteration   5: 1484838.535 ops/s
# Warmup Iteration   6: 1653644.323 ops/s
# Warmup Iteration   7: 1723925.765 ops/s
# Warmup Iteration   8: 1724438.221 ops/s
# Warmup Iteration   9: 1721852.068 ops/s
# Warmup Iteration  10: 1723192.116 ops/s
# Warmup Iteration  11: 1723545.713 ops/s
# Warmup Iteration  12: 1721999.700 ops/s
# Warmup Iteration  13: 1722107.957 ops/s
# Warmup Iteration  14: 1723999.122 ops/s
# Warmup Iteration  15: 1722832.727 ops/s
# Warmup Iteration  16: 1723944.472 ops/s
# Warmup Iteration  17: 1716290.693 ops/s
# Warmup Iteration  18: 1722759.458 ops/s
# Warmup Iteration  19: 1725137.021 ops/s
# Warmup Iteration  20: 1723105.897 ops/s
# Warmup Iteration  21: 1723038.381 ops/s
# Warmup Iteration  22: 1722189.530 ops/s
# Warmup Iteration  23: 1722124.182 ops/s
# Warmup Iteration  24: 1722555.652 ops/s
# Warmup Iteration  25: 1720177.688 ops/s
# Warmup Iteration  26: 1718700.610 ops/s
# Warmup Iteration  27: 1723152.773 ops/s
# Warmup Iteration  28: 1709725.230 ops/s
# Warmup Iteration  29: 1723208.450 ops/s
# Warmup Iteration  30: 1722066.321 ops/s
Iteration   1: 1721458.258 ops/s
Iteration   2: 1724723.305 ops/s
Iteration   3: 1724180.485 ops/s
Iteration   4: 1722052.048 ops/s
Iteration   5: 1723914.307 ops/s
Iteration   6: 1716697.358 ops/s
Iteration   7: 1722211.289 ops/s
Iteration   8: 1673660.453 ops/s
Iteration   9: 1664374.534 ops/s
Iteration  10: 1675288.259 ops/s
Iteration  11: 1722105.309 ops/s
Iteration  12: 1721997.817 ops/s
Iteration  13: 1723789.788 ops/s
Iteration  14: 1720046.239 ops/s
Iteration  15: 1721573.304 ops/s
Iteration  16: 1721184.939 ops/s
Iteration  17: 1720738.136 ops/s
Iteration  18: 1720183.306 ops/s
Iteration  19: 1720887.170 ops/s
Iteration  20: 1716221.650 ops/s
Iteration  21: 1721752.804 ops/s
Iteration  22: 1724558.019 ops/s
Iteration  23: 1719352.401 ops/s
Iteration  24: 1723838.554 ops/s
Iteration  25: 1720316.305 ops/s
Iteration  26: 1716525.203 ops/s
Iteration  27: 1718863.655 ops/s
Iteration  28: 1719589.716 ops/s
Iteration  29: 1721694.329 ops/s
Iteration  30: 1725592.269 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_injectIntoInt":
  1716312.374 ±(99.9%) 10408.980 ops/s [Average]
  (min, avg, max) = (1664374.534, 1716312.374, 1725592.269), stdev = 15579.672
  CI (99.9%): [1705903.394, 1726721.354] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_injectIntoInt  thrpt   30  1716312.374 ± 10408.980  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 812366.065 ops/s
# Warmup Iteration   2: 1545686.146 ops/s
# Warmup Iteration   3: 1717840.220 ops/s
# Warmup Iteration   4: 1720013.661 ops/s
# Warmup Iteration   5: 1486704.491 ops/s
# Warmup Iteration   6: 1660517.605 ops/s
# Warmup Iteration   7: 1727384.533 ops/s
# Warmup Iteration   8: 1725831.631 ops/s
# Warmup Iteration   9: 1723953.067 ops/s
# Warmup Iteration  10: 1727806.730 ops/s
# Warmup Iteration  11: 1727752.057 ops/s
# Warmup Iteration  12: 1724612.069 ops/s
# Warmup Iteration  13: 1728709.088 ops/s
# Warmup Iteration  14: 1728127.263 ops/s
# Warmup Iteration  15: 1730287.143 ops/s
# Warmup Iteration  16: 1729683.827 ops/s
# Warmup Iteration  17: 1726393.498 ops/s
# Warmup Iteration  18: 1728724.974 ops/s
# Warmup Iteration  19: 1726071.555 ops/s
# Warmup Iteration  20: 1726981.748 ops/s
# Warmup Iteration  21: 1729457.723 ops/s
# Warmup Iteration  22: 1729360.713 ops/s
# Warmup Iteration  23: 1728835.599 ops/s
# Warmup Iteration  24: 1727945.127 ops/s
# Warmup Iteration  25: 1729020.810 ops/s
# Warmup Iteration  26: 1729313.899 ops/s
# Warmup Iteration  27: 1728511.167 ops/s
# Warmup Iteration  28: 1726528.880 ops/s
# Warmup Iteration  29: 1726525.970 ops/s
# Warmup Iteration  30: 1725396.078 ops/s
Iteration   1: 1726492.030 ops/s
Iteration   2: 1727028.162 ops/s
Iteration   3: 1725031.633 ops/s
Iteration   4: 1721867.271 ops/s
Iteration   5: 1727950.571 ops/s
Iteration   6: 1731643.129 ops/s
Iteration   7: 1729144.283 ops/s
Iteration   8: 1730671.097 ops/s
Iteration   9: 1730391.539 ops/s
Iteration  10: 1726015.523 ops/s
Iteration  11: 1731858.072 ops/s
Iteration  12: 1726824.482 ops/s
Iteration  13: 1727616.896 ops/s
Iteration  14: 1732880.347 ops/s
Iteration  15: 1729900.396 ops/s
Iteration  16: 1725904.304 ops/s
Iteration  17: 1731451.256 ops/s
Iteration  18: 1726888.836 ops/s
Iteration  19: 1728829.573 ops/s
Iteration  20: 1721622.032 ops/s
Iteration  21: 1728998.133 ops/s
Iteration  22: 1732851.664 ops/s
Iteration  23: 1728039.109 ops/s
Iteration  24: 1725954.720 ops/s
Iteration  25: 1730753.365 ops/s
Iteration  26: 1724947.736 ops/s
Iteration  27: 1726233.527 ops/s
Iteration  28: 1728827.110 ops/s
Iteration  29: 1722002.054 ops/s
Iteration  30: 1727610.091 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_injectIntoLong":
  1727874.298 ±(99.9%) 2034.214 ops/s [Average]
  (min, avg, max) = (1721622.032, 1727874.298, 1732880.347), stdev = 3044.716
  CI (99.9%): [1725840.084, 1729908.512] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_injectIntoLong  thrpt   30  1727874.298 ± 2034.214  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1719558.143 ops/s
# Warmup Iteration   2: 3320136.807 ops/s
# Warmup Iteration   3: 3636581.619 ops/s
# Warmup Iteration   4: 3662891.926 ops/s
# Warmup Iteration   5: 2976129.656 ops/s
# Warmup Iteration   6: 3665884.676 ops/s
# Warmup Iteration   7: 3668059.916 ops/s
# Warmup Iteration   8: 3663890.701 ops/s
# Warmup Iteration   9: 3665729.769 ops/s
# Warmup Iteration  10: 3665112.377 ops/s
# Warmup Iteration  11: 3671198.016 ops/s
# Warmup Iteration  12: 3662219.092 ops/s
# Warmup Iteration  13: 3660007.915 ops/s
# Warmup Iteration  14: 3666900.835 ops/s
# Warmup Iteration  15: 3665852.092 ops/s
# Warmup Iteration  16: 3664869.997 ops/s
# Warmup Iteration  17: 3671710.028 ops/s
# Warmup Iteration  18: 3666488.170 ops/s
# Warmup Iteration  19: 3666318.838 ops/s
# Warmup Iteration  20: 3668017.980 ops/s
# Warmup Iteration  21: 3653490.475 ops/s
# Warmup Iteration  22: 3666900.698 ops/s
# Warmup Iteration  23: 3657454.349 ops/s
# Warmup Iteration  24: 3657706.503 ops/s
# Warmup Iteration  25: 3665674.704 ops/s
# Warmup Iteration  26: 3665405.780 ops/s
# Warmup Iteration  27: 3661533.240 ops/s
# Warmup Iteration  28: 3666149.331 ops/s
# Warmup Iteration  29: 3665069.132 ops/s
# Warmup Iteration  30: 3661402.990 ops/s
Iteration   1: 3652915.559 ops/s
Iteration   2: 3664006.525 ops/s
Iteration   3: 3671450.713 ops/s
Iteration   4: 3662891.210 ops/s
Iteration   5: 3662686.458 ops/s
Iteration   6: 3668622.011 ops/s
Iteration   7: 3648149.593 ops/s
Iteration   8: 3655987.316 ops/s
Iteration   9: 3669168.833 ops/s
Iteration  10: 3666595.258 ops/s
Iteration  11: 3658286.451 ops/s
Iteration  12: 3671708.566 ops/s
Iteration  13: 3659920.354 ops/s
Iteration  14: 3655476.501 ops/s
Iteration  15: 3673190.789 ops/s
Iteration  16: 3646386.483 ops/s
Iteration  17: 3662244.646 ops/s
Iteration  18: 3672992.342 ops/s
Iteration  19: 3662836.175 ops/s
Iteration  20: 3665315.899 ops/s
Iteration  21: 3662747.781 ops/s
Iteration  22: 3656972.148 ops/s
Iteration  23: 3666889.593 ops/s
Iteration  24: 3670869.585 ops/s
Iteration  25: 3663714.215 ops/s
Iteration  26: 3670136.723 ops/s
Iteration  27: 3665763.377 ops/s
Iteration  28: 3661869.873 ops/s
Iteration  29: 3668170.384 ops/s
Iteration  30: 3664146.441 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_isEmpty":
  3663403.727 ±(99.9%) 4597.655 ops/s [Average]
  (min, avg, max) = (3646386.483, 3663403.727, 3673190.789), stdev = 6881.554
  CI (99.9%): [3658806.072, 3668001.382] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_isEmpty  thrpt   30  3663403.727 ± 4597.655  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 263831.654 ops/s
# Warmup Iteration   2: 309212.505 ops/s
# Warmup Iteration   3: 400497.044 ops/s
# Warmup Iteration   4: 399518.785 ops/s
# Warmup Iteration   5: 396306.234 ops/s
# Warmup Iteration   6: 398168.165 ops/s
# Warmup Iteration   7: 398348.709 ops/s
# Warmup Iteration   8: 398532.809 ops/s
# Warmup Iteration   9: 398888.936 ops/s
# Warmup Iteration  10: 337901.160 ops/s
# Warmup Iteration  11: 400249.255 ops/s
# Warmup Iteration  12: 399682.799 ops/s
# Warmup Iteration  13: 399430.804 ops/s
# Warmup Iteration  14: 399407.040 ops/s
# Warmup Iteration  15: 399179.986 ops/s
# Warmup Iteration  16: 398842.837 ops/s
# Warmup Iteration  17: 417879.658 ops/s
# Warmup Iteration  18: 416958.620 ops/s
# Warmup Iteration  19: 416790.791 ops/s
# Warmup Iteration  20: 414829.215 ops/s
# Warmup Iteration  21: 412168.147 ops/s
# Warmup Iteration  22: 412637.102 ops/s
# Warmup Iteration  23: 417851.344 ops/s
# Warmup Iteration  24: 417541.961 ops/s
# Warmup Iteration  25: 417574.333 ops/s
# Warmup Iteration  26: 416855.659 ops/s
# Warmup Iteration  27: 417689.151 ops/s
# Warmup Iteration  28: 419853.797 ops/s
# Warmup Iteration  29: 417636.103 ops/s
# Warmup Iteration  30: 417270.916 ops/s
Iteration   1: 417968.843 ops/s
Iteration   2: 417882.738 ops/s
Iteration   3: 415650.724 ops/s
Iteration   4: 417468.271 ops/s
Iteration   5: 417387.919 ops/s
Iteration   6: 416392.305 ops/s
Iteration   7: 417403.800 ops/s
Iteration   8: 417843.385 ops/s
Iteration   9: 417734.639 ops/s
Iteration  10: 418036.624 ops/s
Iteration  11: 417763.505 ops/s
Iteration  12: 418806.786 ops/s
Iteration  13: 416804.824 ops/s
Iteration  14: 417259.086 ops/s
Iteration  15: 417095.675 ops/s
Iteration  16: 416222.177 ops/s
Iteration  17: 417261.593 ops/s
Iteration  18: 417123.807 ops/s
Iteration  19: 417679.506 ops/s
Iteration  20: 417957.078 ops/s
Iteration  21: 417871.842 ops/s
Iteration  22: 418067.614 ops/s
Iteration  23: 417019.034 ops/s
Iteration  24: 417519.486 ops/s
Iteration  25: 417673.593 ops/s
Iteration  26: 416786.623 ops/s
Iteration  27: 417344.319 ops/s
Iteration  28: 417501.634 ops/s
Iteration  29: 414898.713 ops/s
Iteration  30: 416255.945 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_iterator":
  417289.403 ±(99.9%) 530.594 ops/s [Average]
  (min, avg, max) = (414898.713, 417289.403, 418806.786), stdev = 794.168
  CI (99.9%): [416758.809, 417819.997] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_iterator  thrpt   30  417289.403 ± 530.594  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 170224747.057 ops/s
# Warmup Iteration   2: 299503473.499 ops/s
# Warmup Iteration   3: 287469587.408 ops/s
# Warmup Iteration   4: 322720336.641 ops/s
# Warmup Iteration   5: 322333009.785 ops/s
# Warmup Iteration   6: 322869754.171 ops/s
# Warmup Iteration   7: 321986963.695 ops/s
# Warmup Iteration   8: 323221828.724 ops/s
# Warmup Iteration   9: 322767912.748 ops/s
# Warmup Iteration  10: 322413852.530 ops/s
# Warmup Iteration  11: 324245109.950 ops/s
# Warmup Iteration  12: 322461597.184 ops/s
# Warmup Iteration  13: 321500045.125 ops/s
# Warmup Iteration  14: 323475473.490 ops/s
# Warmup Iteration  15: 323016993.464 ops/s
# Warmup Iteration  16: 322119122.127 ops/s
# Warmup Iteration  17: 319971596.593 ops/s
# Warmup Iteration  18: 320327415.928 ops/s
# Warmup Iteration  19: 321420033.579 ops/s
# Warmup Iteration  20: 322341579.143 ops/s
# Warmup Iteration  21: 322080104.400 ops/s
# Warmup Iteration  22: 323128751.673 ops/s
# Warmup Iteration  23: 321127682.837 ops/s
# Warmup Iteration  24: 322235416.238 ops/s
# Warmup Iteration  25: 319897873.673 ops/s
# Warmup Iteration  26: 321291594.589 ops/s
# Warmup Iteration  27: 321496403.109 ops/s
# Warmup Iteration  28: 321411349.918 ops/s
# Warmup Iteration  29: 321104795.402 ops/s
# Warmup Iteration  30: 320867829.885 ops/s
Iteration   1: 321054602.060 ops/s
Iteration   2: 320920210.306 ops/s
Iteration   3: 321540038.648 ops/s
Iteration   4: 321738365.282 ops/s
Iteration   5: 320753914.638 ops/s
Iteration   6: 320666663.411 ops/s
Iteration   7: 322379849.872 ops/s
Iteration   8: 322970454.649 ops/s
Iteration   9: 321807416.548 ops/s
Iteration  10: 320225237.593 ops/s
Iteration  11: 320453797.155 ops/s
Iteration  12: 321066061.534 ops/s
Iteration  13: 321800885.640 ops/s
Iteration  14: 323080345.559 ops/s
Iteration  15: 321743445.285 ops/s
Iteration  16: 322684244.470 ops/s
Iteration  17: 322198553.006 ops/s
Iteration  18: 322548132.954 ops/s
Iteration  19: 320963062.702 ops/s
Iteration  20: 320487882.706 ops/s
Iteration  21: 322217227.174 ops/s
Iteration  22: 320713186.763 ops/s
Iteration  23: 320967996.420 ops/s
Iteration  24: 322200078.500 ops/s
Iteration  25: 322393188.658 ops/s
Iteration  26: 322010113.071 ops/s
Iteration  27: 321499292.503 ops/s
Iteration  28: 319865728.665 ops/s
Iteration  29: 321258856.457 ops/s
Iteration  30: 321006934.449 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_iteratorRemove":
  321507192.223 ±(99.9%) 564012.786 ops/s [Average]
  (min, avg, max) = (319865728.665, 321507192.223, 323080345.559), stdev = 844187.850
  CI (99.9%): [320943179.437, 322071205.009] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt          Score        Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_iteratorRemove  thrpt   30  321507192.223 ± 564012.786  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 508239.942 ops/s
# Warmup Iteration   2: 1029515.812 ops/s
# Warmup Iteration   3: 1112088.525 ops/s
# Warmup Iteration   4: 1114629.903 ops/s
# Warmup Iteration   5: 929259.267 ops/s
# Warmup Iteration   6: 1115667.173 ops/s
# Warmup Iteration   7: 1115292.938 ops/s
# Warmup Iteration   8: 1113635.110 ops/s
# Warmup Iteration   9: 1116429.189 ops/s
# Warmup Iteration  10: 1115225.503 ops/s
# Warmup Iteration  11: 1114852.771 ops/s
# Warmup Iteration  12: 1113999.321 ops/s
# Warmup Iteration  13: 1116054.108 ops/s
# Warmup Iteration  14: 1113760.752 ops/s
# Warmup Iteration  15: 1108808.154 ops/s
# Warmup Iteration  16: 1116308.216 ops/s
# Warmup Iteration  17: 1116259.714 ops/s
# Warmup Iteration  18: 1114303.497 ops/s
# Warmup Iteration  19: 1114538.015 ops/s
# Warmup Iteration  20: 1110813.072 ops/s
# Warmup Iteration  21: 1115383.411 ops/s
# Warmup Iteration  22: 1115757.034 ops/s
# Warmup Iteration  23: 1114954.069 ops/s
# Warmup Iteration  24: 1114613.366 ops/s
# Warmup Iteration  25: 1111468.684 ops/s
# Warmup Iteration  26: 1114912.681 ops/s
# Warmup Iteration  27: 1116602.833 ops/s
# Warmup Iteration  28: 1115119.315 ops/s
# Warmup Iteration  29: 1114944.390 ops/s
# Warmup Iteration  30: 1115389.816 ops/s
Iteration   1: 1113915.131 ops/s
Iteration   2: 1114714.448 ops/s
Iteration   3: 1116233.463 ops/s
Iteration   4: 1111473.389 ops/s
Iteration   5: 1115801.273 ops/s
Iteration   6: 1114978.551 ops/s
Iteration   7: 1116416.937 ops/s
Iteration   8: 1115382.781 ops/s
Iteration   9: 1115632.157 ops/s
Iteration  10: 1116428.126 ops/s
Iteration  11: 1115539.802 ops/s
Iteration  12: 1116745.991 ops/s
Iteration  13: 1117998.668 ops/s
Iteration  14: 1114548.589 ops/s
Iteration  15: 1116068.613 ops/s
Iteration  16: 1117985.505 ops/s
Iteration  17: 1115082.215 ops/s
Iteration  18: 1114264.720 ops/s
Iteration  19: 1112967.962 ops/s
Iteration  20: 1117729.591 ops/s
Iteration  21: 1115527.734 ops/s
Iteration  22: 1116238.631 ops/s
Iteration  23: 1118181.184 ops/s
Iteration  24: 1116536.158 ops/s
Iteration  25: 1115010.919 ops/s
Iteration  26: 1115108.900 ops/s
Iteration  27: 1115728.926 ops/s
Iteration  28: 1115194.211 ops/s
Iteration  29: 1116487.275 ops/s
Iteration  30: 1116682.103 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_makeString":
  1115686.798 ±(99.9%) 968.466 ops/s [Average]
  (min, avg, max) = (1111473.389, 1115686.798, 1118181.184), stdev = 1449.554
  CI (99.9%): [1114718.333, 1116655.264] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_makeString  thrpt   30  1115686.798 ± 968.466  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1680708.043 ops/s
# Warmup Iteration   2: 3179828.159 ops/s
# Warmup Iteration   3: 3574954.058 ops/s
# Warmup Iteration   4: 3600567.674 ops/s
# Warmup Iteration   5: 3032425.553 ops/s
# Warmup Iteration   6: 3445327.289 ops/s
# Warmup Iteration   7: 3542554.289 ops/s
# Warmup Iteration   8: 3537784.139 ops/s
# Warmup Iteration   9: 3540375.917 ops/s
# Warmup Iteration  10: 3535303.466 ops/s
# Warmup Iteration  11: 3535525.151 ops/s
# Warmup Iteration  12: 3527582.228 ops/s
# Warmup Iteration  13: 3541028.166 ops/s
# Warmup Iteration  14: 3539008.807 ops/s
# Warmup Iteration  15: 3540059.290 ops/s
# Warmup Iteration  16: 3544718.970 ops/s
# Warmup Iteration  17: 3535690.734 ops/s
# Warmup Iteration  18: 3535694.435 ops/s
# Warmup Iteration  19: 3533972.221 ops/s
# Warmup Iteration  20: 3536768.353 ops/s
# Warmup Iteration  21: 3530821.930 ops/s
# Warmup Iteration  22: 3535573.077 ops/s
# Warmup Iteration  23: 3536750.699 ops/s
# Warmup Iteration  24: 3535278.599 ops/s
# Warmup Iteration  25: 3526609.213 ops/s
# Warmup Iteration  26: 3532026.469 ops/s
# Warmup Iteration  27: 3534285.362 ops/s
# Warmup Iteration  28: 3519902.396 ops/s
# Warmup Iteration  29: 3510533.192 ops/s
# Warmup Iteration  30: 3522991.641 ops/s
Iteration   1: 3522075.174 ops/s
Iteration   2: 3521194.767 ops/s
Iteration   3: 3534711.116 ops/s
Iteration   4: 3533634.397 ops/s
Iteration   5: 3536100.855 ops/s
Iteration   6: 3529236.312 ops/s
Iteration   7: 3533603.735 ops/s
Iteration   8: 3542572.808 ops/s
Iteration   9: 3532951.548 ops/s
Iteration  10: 3536146.721 ops/s
Iteration  11: 3536725.328 ops/s
Iteration  12: 3540618.631 ops/s
Iteration  13: 3545732.536 ops/s
Iteration  14: 3533219.957 ops/s
Iteration  15: 3529497.588 ops/s
Iteration  16: 3540415.141 ops/s
Iteration  17: 3534167.065 ops/s
Iteration  18: 3532884.387 ops/s
Iteration  19: 3538247.988 ops/s
Iteration  20: 3534565.840 ops/s
Iteration  21: 3541756.718 ops/s
Iteration  22: 3537106.875 ops/s
Iteration  23: 3539493.433 ops/s
Iteration  24: 3527846.143 ops/s
Iteration  25: 3538114.904 ops/s
Iteration  26: 3515248.658 ops/s
Iteration  27: 3541919.336 ops/s
Iteration  28: 3537814.144 ops/s
Iteration  29: 3541030.908 ops/s
Iteration  30: 3540721.370 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_max":
  3534978.479 ±(99.9%) 4530.345 ops/s [Average]
  (min, avg, max) = (3515248.658, 3534978.479, 3545732.536), stdev = 6780.807
  CI (99.9%): [3530448.135, 3539508.824] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_max  thrpt   30  3534978.479 ± 4530.345  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1529692.760 ops/s
# Warmup Iteration   2: 3243551.197 ops/s
# Warmup Iteration   3: 3438091.611 ops/s
# Warmup Iteration   4: 3452002.892 ops/s
# Warmup Iteration   5: 2845706.020 ops/s
# Warmup Iteration   6: 3449186.966 ops/s
# Warmup Iteration   7: 3446310.815 ops/s
# Warmup Iteration   8: 3444713.813 ops/s
# Warmup Iteration   9: 3444646.922 ops/s
# Warmup Iteration  10: 3445632.411 ops/s
# Warmup Iteration  11: 3446720.303 ops/s
# Warmup Iteration  12: 3434357.529 ops/s
# Warmup Iteration  13: 3446766.855 ops/s
# Warmup Iteration  14: 3444647.368 ops/s
# Warmup Iteration  15: 3449071.841 ops/s
# Warmup Iteration  16: 3441326.644 ops/s
# Warmup Iteration  17: 3444799.720 ops/s
# Warmup Iteration  18: 3447215.046 ops/s
# Warmup Iteration  19: 3442945.610 ops/s
# Warmup Iteration  20: 3452527.023 ops/s
# Warmup Iteration  21: 3448156.562 ops/s
# Warmup Iteration  22: 3432818.314 ops/s
# Warmup Iteration  23: 3427115.107 ops/s
# Warmup Iteration  24: 3446891.303 ops/s
# Warmup Iteration  25: 3450303.466 ops/s
# Warmup Iteration  26: 3448192.864 ops/s
# Warmup Iteration  27: 3442377.684 ops/s
# Warmup Iteration  28: 3448278.975 ops/s
# Warmup Iteration  29: 3444808.064 ops/s
# Warmup Iteration  30: 3447547.865 ops/s
Iteration   1: 3437332.959 ops/s
Iteration   2: 3455827.579 ops/s
Iteration   3: 3448864.116 ops/s
Iteration   4: 3451493.340 ops/s
Iteration   5: 3449605.740 ops/s
Iteration   6: 3453116.265 ops/s
Iteration   7: 3448034.877 ops/s
Iteration   8: 3444210.936 ops/s
Iteration   9: 3442629.476 ops/s
Iteration  10: 3449083.625 ops/s
Iteration  11: 3438359.016 ops/s
Iteration  12: 3441635.284 ops/s
Iteration  13: 3454383.230 ops/s
Iteration  14: 3443076.892 ops/s
Iteration  15: 3439936.309 ops/s
Iteration  16: 3451687.563 ops/s
Iteration  17: 3452416.555 ops/s
Iteration  18: 3433028.208 ops/s
Iteration  19: 3434827.137 ops/s
Iteration  20: 3448255.868 ops/s
Iteration  21: 3451244.567 ops/s
Iteration  22: 3446644.946 ops/s
Iteration  23: 3447800.502 ops/s
Iteration  24: 3446442.776 ops/s
Iteration  25: 3451279.612 ops/s
Iteration  26: 3442668.730 ops/s
Iteration  27: 3444287.495 ops/s
Iteration  28: 3448676.099 ops/s
Iteration  29: 3444405.603 ops/s
Iteration  30: 3445626.590 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_maxBy":
  3446229.396 ±(99.9%) 3820.323 ops/s [Average]
  (min, avg, max) = (3433028.208, 3446229.396, 3455827.579), stdev = 5718.080
  CI (99.9%): [3442409.074, 3450049.719] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_maxBy  thrpt   30  3446229.396 ± 3820.323  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1037319.391 ops/s
# Warmup Iteration   2: 2080520.451 ops/s
# Warmup Iteration   3: 2306859.368 ops/s
# Warmup Iteration   4: 2295401.859 ops/s
# Warmup Iteration   5: 1891718.528 ops/s
# Warmup Iteration   6: 2295449.819 ops/s
# Warmup Iteration   7: 2297240.746 ops/s
# Warmup Iteration   8: 2294766.069 ops/s
# Warmup Iteration   9: 2293921.715 ops/s
# Warmup Iteration  10: 2292890.838 ops/s
# Warmup Iteration  11: 2285412.149 ops/s
# Warmup Iteration  12: 2296455.709 ops/s
# Warmup Iteration  13: 2293838.891 ops/s
# Warmup Iteration  14: 2294514.057 ops/s
# Warmup Iteration  15: 2287605.600 ops/s
# Warmup Iteration  16: 2296511.517 ops/s
# Warmup Iteration  17: 2289703.886 ops/s
# Warmup Iteration  18: 2296723.939 ops/s
# Warmup Iteration  19: 2295380.936 ops/s
# Warmup Iteration  20: 2280155.575 ops/s
# Warmup Iteration  21: 2291619.963 ops/s
# Warmup Iteration  22: 2294704.896 ops/s
# Warmup Iteration  23: 2293165.558 ops/s
# Warmup Iteration  24: 2294714.653 ops/s
# Warmup Iteration  25: 2295464.173 ops/s
# Warmup Iteration  26: 2291445.383 ops/s
# Warmup Iteration  27: 2295334.470 ops/s
# Warmup Iteration  28: 2296505.285 ops/s
# Warmup Iteration  29: 2292114.571 ops/s
# Warmup Iteration  30: 2294599.430 ops/s
Iteration   1: 2290323.963 ops/s
Iteration   2: 2300648.473 ops/s
Iteration   3: 2296928.391 ops/s
Iteration   4: 2294538.627 ops/s
Iteration   5: 2295489.941 ops/s
Iteration   6: 2290775.320 ops/s
Iteration   7: 2288056.416 ops/s
Iteration   8: 2296144.385 ops/s
Iteration   9: 2293766.975 ops/s
Iteration  10: 2294771.996 ops/s
Iteration  11: 2296792.616 ops/s
Iteration  12: 2289805.639 ops/s
Iteration  13: 2291002.687 ops/s
Iteration  14: 2298270.033 ops/s
Iteration  15: 2293784.568 ops/s
Iteration  16: 2291650.615 ops/s
Iteration  17: 2287318.065 ops/s
Iteration  18: 2290304.629 ops/s
Iteration  19: 2293844.139 ops/s
Iteration  20: 2297004.351 ops/s
Iteration  21: 2294915.794 ops/s
Iteration  22: 2292293.186 ops/s
Iteration  23: 2289307.668 ops/s
Iteration  24: 2290625.860 ops/s
Iteration  25: 2288572.639 ops/s
Iteration  26: 2293690.940 ops/s
Iteration  27: 2287002.723 ops/s
Iteration  28: 2290369.558 ops/s
Iteration  29: 2296758.512 ops/s
Iteration  30: 2289649.008 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_max_null_throws":
  2292813.591 ±(99.9%) 2348.953 ops/s [Average]
  (min, avg, max) = (2287002.723, 2292813.591, 2300648.473), stdev = 3515.803
  CI (99.9%): [2290464.637, 2295162.544] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_max_null_throws  thrpt   30  2292813.591 ± 2348.953  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1032901.004 ops/s
# Warmup Iteration   2: 2070053.675 ops/s
# Warmup Iteration   3: 2274136.374 ops/s
# Warmup Iteration   4: 2282831.157 ops/s
# Warmup Iteration   5: 1888599.154 ops/s
# Warmup Iteration   6: 2290416.004 ops/s
# Warmup Iteration   7: 2287948.302 ops/s
# Warmup Iteration   8: 2287186.908 ops/s
# Warmup Iteration   9: 2291016.435 ops/s
# Warmup Iteration  10: 2289878.949 ops/s
# Warmup Iteration  11: 2279153.418 ops/s
# Warmup Iteration  12: 2289913.722 ops/s
# Warmup Iteration  13: 2286080.132 ops/s
# Warmup Iteration  14: 2285889.457 ops/s
# Warmup Iteration  15: 2286574.960 ops/s
# Warmup Iteration  16: 2292131.200 ops/s
# Warmup Iteration  17: 2297943.044 ops/s
# Warmup Iteration  18: 2299432.242 ops/s
# Warmup Iteration  19: 2299603.469 ops/s
# Warmup Iteration  20: 2299971.565 ops/s
# Warmup Iteration  21: 2300534.678 ops/s
# Warmup Iteration  22: 2298730.753 ops/s
# Warmup Iteration  23: 2297299.580 ops/s
# Warmup Iteration  24: 2297853.439 ops/s
# Warmup Iteration  25: 2299763.069 ops/s
# Warmup Iteration  26: 2299000.654 ops/s
# Warmup Iteration  27: 2294425.226 ops/s
# Warmup Iteration  28: 2302462.788 ops/s
# Warmup Iteration  29: 2295301.821 ops/s
# Warmup Iteration  30: 2301269.811 ops/s
Iteration   1: 2298240.723 ops/s
Iteration   2: 2303594.792 ops/s
Iteration   3: 2297467.307 ops/s
Iteration   4: 2299970.850 ops/s
Iteration   5: 2303692.256 ops/s
Iteration   6: 2296657.710 ops/s
Iteration   7: 2296222.244 ops/s
Iteration   8: 2302496.390 ops/s
Iteration   9: 2298488.590 ops/s
Iteration  10: 2296819.861 ops/s
Iteration  11: 2303006.379 ops/s
Iteration  12: 2296100.249 ops/s
Iteration  13: 2300958.931 ops/s
Iteration  14: 2303710.038 ops/s
Iteration  15: 2297886.516 ops/s
Iteration  16: 2298178.236 ops/s
Iteration  17: 2301688.068 ops/s
Iteration  18: 2297178.340 ops/s
Iteration  19: 2295474.808 ops/s
Iteration  20: 2304129.226 ops/s
Iteration  21: 2300275.534 ops/s
Iteration  22: 2293961.771 ops/s
Iteration  23: 2301543.802 ops/s
Iteration  24: 2302042.875 ops/s
Iteration  25: 2286779.309 ops/s
Iteration  26: 2296482.845 ops/s
Iteration  27: 2299068.058 ops/s
Iteration  28: 2294676.916 ops/s
Iteration  29: 2289738.504 ops/s
Iteration  30: 2287145.182 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_max_null_throws_without_comparator":
  2298122.544 ±(99.9%) 3037.567 ops/s [Average]
  (min, avg, max) = (2286779.309, 2298122.544, 2304129.226), stdev = 4546.487
  CI (99.9%): [2295084.977, 2301160.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                      Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  2298122.544 ± 3037.567  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1709563.821 ops/s
# Warmup Iteration   2: 3293338.955 ops/s
# Warmup Iteration   3: 3603299.020 ops/s
# Warmup Iteration   4: 3626954.583 ops/s
# Warmup Iteration   5: 2971180.886 ops/s
# Warmup Iteration   6: 3631094.636 ops/s
# Warmup Iteration   7: 3633821.547 ops/s
# Warmup Iteration   8: 3631731.499 ops/s
# Warmup Iteration   9: 3627782.106 ops/s
# Warmup Iteration  10: 3624149.682 ops/s
# Warmup Iteration  11: 3622927.779 ops/s
# Warmup Iteration  12: 3627312.186 ops/s
# Warmup Iteration  13: 3625483.537 ops/s
# Warmup Iteration  14: 3633891.166 ops/s
# Warmup Iteration  15: 3620248.993 ops/s
# Warmup Iteration  16: 3631743.171 ops/s
# Warmup Iteration  17: 3631313.417 ops/s
# Warmup Iteration  18: 3628892.704 ops/s
# Warmup Iteration  19: 3626116.368 ops/s
# Warmup Iteration  20: 3630344.430 ops/s
# Warmup Iteration  21: 3623569.893 ops/s
# Warmup Iteration  22: 3626302.725 ops/s
# Warmup Iteration  23: 3632410.436 ops/s
# Warmup Iteration  24: 3629720.482 ops/s
# Warmup Iteration  25: 3630932.628 ops/s
# Warmup Iteration  26: 3636835.372 ops/s
# Warmup Iteration  27: 3612556.583 ops/s
# Warmup Iteration  28: 3633343.611 ops/s
# Warmup Iteration  29: 3628350.315 ops/s
# Warmup Iteration  30: 3631467.029 ops/s
Iteration   1: 3626643.710 ops/s
Iteration   2: 3630904.561 ops/s
Iteration   3: 3617002.029 ops/s
Iteration   4: 3625629.302 ops/s
Iteration   5: 3638926.373 ops/s
Iteration   6: 3635866.459 ops/s
Iteration   7: 3629338.731 ops/s
Iteration   8: 3626693.833 ops/s
Iteration   9: 3629536.799 ops/s
Iteration  10: 3622147.464 ops/s
Iteration  11: 3633215.867 ops/s
Iteration  12: 3624244.578 ops/s
Iteration  13: 3619870.537 ops/s
Iteration  14: 3635227.789 ops/s
Iteration  15: 3632603.370 ops/s
Iteration  16: 3633313.555 ops/s
Iteration  17: 3632686.660 ops/s
Iteration  18: 3628428.880 ops/s
Iteration  19: 3638040.212 ops/s
Iteration  20: 3629489.731 ops/s
Iteration  21: 3626302.560 ops/s
Iteration  22: 3633480.287 ops/s
Iteration  23: 3625099.958 ops/s
Iteration  24: 3624173.169 ops/s
Iteration  25: 3632801.707 ops/s
Iteration  26: 3614283.037 ops/s
Iteration  27: 3613885.447 ops/s
Iteration  28: 3624545.087 ops/s
Iteration  29: 3628461.508 ops/s
Iteration  30: 3626895.252 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_max_without_comparator":
  3627991.282 ±(99.9%) 4247.745 ops/s [Average]
  (min, avg, max) = (3613885.447, 3627991.282, 3638926.373), stdev = 6357.825
  CI (99.9%): [3623743.537, 3632239.027] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_max_without_comparator  thrpt   30  3627991.282 ± 4247.745  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1690051.977 ops/s
# Warmup Iteration   2: 3292125.649 ops/s
# Warmup Iteration   3: 3610579.593 ops/s
# Warmup Iteration   4: 3626537.113 ops/s
# Warmup Iteration   5: 2989661.510 ops/s
# Warmup Iteration   6: 3632244.550 ops/s
# Warmup Iteration   7: 3640620.567 ops/s
# Warmup Iteration   8: 3638735.498 ops/s
# Warmup Iteration   9: 3633847.767 ops/s
# Warmup Iteration  10: 3634096.222 ops/s
# Warmup Iteration  11: 3625109.420 ops/s
# Warmup Iteration  12: 3613352.061 ops/s
# Warmup Iteration  13: 3639193.335 ops/s
# Warmup Iteration  14: 3641239.432 ops/s
# Warmup Iteration  15: 3628436.953 ops/s
# Warmup Iteration  16: 3633382.216 ops/s
# Warmup Iteration  17: 3635118.713 ops/s
# Warmup Iteration  18: 3638673.810 ops/s
# Warmup Iteration  19: 3639493.020 ops/s
# Warmup Iteration  20: 3629043.141 ops/s
# Warmup Iteration  21: 3625021.519 ops/s
# Warmup Iteration  22: 3640814.578 ops/s
# Warmup Iteration  23: 3639767.463 ops/s
# Warmup Iteration  24: 3634932.281 ops/s
# Warmup Iteration  25: 3641473.376 ops/s
# Warmup Iteration  26: 3635580.261 ops/s
# Warmup Iteration  27: 3637132.609 ops/s
# Warmup Iteration  28: 3640051.811 ops/s
# Warmup Iteration  29: 3644324.428 ops/s
# Warmup Iteration  30: 3631736.755 ops/s
Iteration   1: 3621375.134 ops/s
Iteration   2: 3645606.373 ops/s
Iteration   3: 3637242.230 ops/s
Iteration   4: 3637020.221 ops/s
Iteration   5: 3644043.753 ops/s
Iteration   6: 3638359.187 ops/s
Iteration   7: 3640455.945 ops/s
Iteration   8: 3643974.792 ops/s
Iteration   9: 3638254.475 ops/s
Iteration  10: 3646966.430 ops/s
Iteration  11: 3647831.546 ops/s
Iteration  12: 3636606.263 ops/s
Iteration  13: 3633279.666 ops/s
Iteration  14: 3635140.318 ops/s
Iteration  15: 3634616.044 ops/s
Iteration  16: 3635911.066 ops/s
Iteration  17: 3641048.175 ops/s
Iteration  18: 3638448.802 ops/s
Iteration  19: 3644740.154 ops/s
Iteration  20: 3649414.881 ops/s
Iteration  21: 3637177.499 ops/s
Iteration  22: 3646944.061 ops/s
Iteration  23: 3640373.657 ops/s
Iteration  24: 3645037.400 ops/s
Iteration  25: 3648852.915 ops/s
Iteration  26: 3644918.036 ops/s
Iteration  27: 3635381.848 ops/s
Iteration  28: 3649510.069 ops/s
Iteration  29: 3644346.426 ops/s
Iteration  30: 3652613.265 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_min":
  3641183.021 ±(99.9%) 4325.264 ops/s [Average]
  (min, avg, max) = (3621375.134, 3641183.021, 3652613.265), stdev = 6473.852
  CI (99.9%): [3636857.757, 3645508.285] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_min  thrpt   30  3641183.021 ± 4325.264  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 737374.363 ops/s
# Warmup Iteration   2: 1454473.809 ops/s
# Warmup Iteration   3: 1592362.937 ops/s
# Warmup Iteration   4: 1601627.928 ops/s
# Warmup Iteration   5: 1318011.595 ops/s
# Warmup Iteration   6: 1599669.209 ops/s
# Warmup Iteration   7: 1600857.580 ops/s
# Warmup Iteration   8: 1602622.088 ops/s
# Warmup Iteration   9: 1601135.395 ops/s
# Warmup Iteration  10: 1601851.446 ops/s
# Warmup Iteration  11: 1596974.175 ops/s
# Warmup Iteration  12: 1601852.049 ops/s
# Warmup Iteration  13: 1601611.632 ops/s
# Warmup Iteration  14: 1602653.945 ops/s
# Warmup Iteration  15: 1604473.291 ops/s
# Warmup Iteration  16: 1600862.950 ops/s
# Warmup Iteration  17: 1603994.752 ops/s
# Warmup Iteration  18: 1599865.187 ops/s
# Warmup Iteration  19: 1596458.464 ops/s
# Warmup Iteration  20: 1599400.841 ops/s
# Warmup Iteration  21: 1593947.097 ops/s
# Warmup Iteration  22: 1597576.976 ops/s
# Warmup Iteration  23: 1597248.851 ops/s
# Warmup Iteration  24: 1600443.304 ops/s
# Warmup Iteration  25: 1599600.233 ops/s
# Warmup Iteration  26: 1603665.923 ops/s
# Warmup Iteration  27: 1600826.119 ops/s
# Warmup Iteration  28: 1601601.260 ops/s
# Warmup Iteration  29: 1601712.694 ops/s
# Warmup Iteration  30: 1603822.115 ops/s
Iteration   1: 1601519.185 ops/s
Iteration   2: 1597769.802 ops/s
Iteration   3: 1604389.685 ops/s
Iteration   4: 1599079.818 ops/s
Iteration   5: 1599741.185 ops/s
Iteration   6: 1604754.604 ops/s
Iteration   7: 1601247.328 ops/s
Iteration   8: 1601144.826 ops/s
Iteration   9: 1605614.419 ops/s
Iteration  10: 1598567.599 ops/s
Iteration  11: 1602322.591 ops/s
Iteration  12: 1606261.384 ops/s
Iteration  13: 1599583.264 ops/s
Iteration  14: 1603421.224 ops/s
Iteration  15: 1605696.645 ops/s
Iteration  16: 1601370.727 ops/s
Iteration  17: 1603514.987 ops/s
Iteration  18: 1605893.330 ops/s
Iteration  19: 1602400.272 ops/s
Iteration  20: 1603561.582 ops/s
Iteration  21: 1607133.819 ops/s
Iteration  22: 1603077.550 ops/s
Iteration  23: 1602215.870 ops/s
Iteration  24: 1605641.733 ops/s
Iteration  25: 1596211.696 ops/s
Iteration  26: 1601493.143 ops/s
Iteration  27: 1605167.975 ops/s
Iteration  28: 1601140.907 ops/s
Iteration  29: 1605739.815 ops/s
Iteration  30: 1604037.462 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_minBy":
  1602657.148 ±(99.9%) 1848.442 ops/s [Average]
  (min, avg, max) = (1596211.696, 1602657.148, 1607133.819), stdev = 2766.661
  CI (99.9%): [1600808.706, 1604505.589] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_minBy  thrpt   30  1602657.148 ± 1848.442  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1022308.328 ops/s
# Warmup Iteration   2: 2046505.459 ops/s
# Warmup Iteration   3: 2235018.561 ops/s
# Warmup Iteration   4: 2250402.362 ops/s
# Warmup Iteration   5: 1836025.617 ops/s
# Warmup Iteration   6: 2243039.924 ops/s
# Warmup Iteration   7: 2244740.699 ops/s
# Warmup Iteration   8: 2249052.828 ops/s
# Warmup Iteration   9: 2245069.109 ops/s
# Warmup Iteration  10: 2247994.167 ops/s
# Warmup Iteration  11: 2245459.247 ops/s
# Warmup Iteration  12: 2245973.251 ops/s
# Warmup Iteration  13: 2247794.771 ops/s
# Warmup Iteration  14: 2254129.009 ops/s
# Warmup Iteration  15: 2246715.046 ops/s
# Warmup Iteration  16: 2247017.956 ops/s
# Warmup Iteration  17: 2241357.670 ops/s
# Warmup Iteration  18: 2241215.190 ops/s
# Warmup Iteration  19: 2242744.356 ops/s
# Warmup Iteration  20: 2245534.526 ops/s
# Warmup Iteration  21: 2244776.769 ops/s
# Warmup Iteration  22: 2248111.326 ops/s
# Warmup Iteration  23: 2246932.438 ops/s
# Warmup Iteration  24: 2250209.907 ops/s
# Warmup Iteration  25: 2247425.465 ops/s
# Warmup Iteration  26: 2245157.491 ops/s
# Warmup Iteration  27: 2246255.521 ops/s
# Warmup Iteration  28: 2239801.956 ops/s
# Warmup Iteration  29: 2246676.406 ops/s
# Warmup Iteration  30: 2243123.501 ops/s
Iteration   1: 2238687.720 ops/s
Iteration   2: 2244748.746 ops/s
Iteration   3: 2249859.411 ops/s
Iteration   4: 2247475.927 ops/s
Iteration   5: 2245835.626 ops/s
Iteration   6: 2246440.903 ops/s
Iteration   7: 2239825.825 ops/s
Iteration   8: 2230431.953 ops/s
Iteration   9: 2240854.918 ops/s
Iteration  10: 2242146.499 ops/s
Iteration  11: 2249240.626 ops/s
Iteration  12: 2247111.907 ops/s
Iteration  13: 2248663.888 ops/s
Iteration  14: 2251017.739 ops/s
Iteration  15: 2244166.428 ops/s
Iteration  16: 2249407.750 ops/s
Iteration  17: 2249805.584 ops/s
Iteration  18: 2243822.468 ops/s
Iteration  19: 2247026.326 ops/s
Iteration  20: 2249653.481 ops/s
Iteration  21: 2246321.294 ops/s
Iteration  22: 2235535.644 ops/s
Iteration  23: 2249307.174 ops/s
Iteration  24: 2239464.007 ops/s
Iteration  25: 2245365.107 ops/s
Iteration  26: 2250293.434 ops/s
Iteration  27: 2246792.167 ops/s
Iteration  28: 2247941.222 ops/s
Iteration  29: 2249515.557 ops/s
Iteration  30: 2245851.677 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_min_null_throws":
  2245420.367 ±(99.9%) 3224.616 ops/s [Average]
  (min, avg, max) = (2230431.953, 2245420.367, 2251017.739), stdev = 4826.453
  CI (99.9%): [2242195.751, 2248644.983] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_min_null_throws  thrpt   30  2245420.367 ± 3224.616  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1043767.489 ops/s
# Warmup Iteration   2: 2079682.310 ops/s
# Warmup Iteration   3: 2311714.689 ops/s
# Warmup Iteration   4: 2308535.277 ops/s
# Warmup Iteration   5: 1900496.103 ops/s
# Warmup Iteration   6: 2314019.151 ops/s
# Warmup Iteration   7: 2313021.418 ops/s
# Warmup Iteration   8: 2308547.165 ops/s
# Warmup Iteration   9: 2315645.520 ops/s
# Warmup Iteration  10: 2313073.873 ops/s
# Warmup Iteration  11: 2312148.847 ops/s
# Warmup Iteration  12: 2318114.788 ops/s
# Warmup Iteration  13: 2316180.986 ops/s
# Warmup Iteration  14: 2314115.642 ops/s
# Warmup Iteration  15: 2317690.545 ops/s
# Warmup Iteration  16: 2313604.291 ops/s
# Warmup Iteration  17: 2316380.839 ops/s
# Warmup Iteration  18: 2318061.110 ops/s
# Warmup Iteration  19: 2314284.336 ops/s
# Warmup Iteration  20: 2315544.157 ops/s
# Warmup Iteration  21: 2317397.398 ops/s
# Warmup Iteration  22: 2314258.699 ops/s
# Warmup Iteration  23: 2318035.348 ops/s
# Warmup Iteration  24: 2314351.197 ops/s
# Warmup Iteration  25: 2311006.537 ops/s
# Warmup Iteration  26: 2315191.900 ops/s
# Warmup Iteration  27: 2317045.438 ops/s
# Warmup Iteration  28: 2316008.630 ops/s
# Warmup Iteration  29: 2315282.369 ops/s
# Warmup Iteration  30: 2316750.552 ops/s
Iteration   1: 2312542.082 ops/s
Iteration   2: 2316287.784 ops/s
Iteration   3: 2318350.976 ops/s
Iteration   4: 2313624.254 ops/s
Iteration   5: 2312385.805 ops/s
Iteration   6: 2318060.951 ops/s
Iteration   7: 2312057.575 ops/s
Iteration   8: 2312046.527 ops/s
Iteration   9: 2321820.715 ops/s
Iteration  10: 2306343.255 ops/s
Iteration  11: 2310997.724 ops/s
Iteration  12: 2320034.227 ops/s
Iteration  13: 2310874.569 ops/s
Iteration  14: 2300491.340 ops/s
Iteration  15: 2313247.781 ops/s
Iteration  16: 2317889.458 ops/s
Iteration  17: 2312749.147 ops/s
Iteration  18: 2316288.712 ops/s
Iteration  19: 2321099.465 ops/s
Iteration  20: 2306411.040 ops/s
Iteration  21: 2313575.234 ops/s
Iteration  22: 2316555.471 ops/s
Iteration  23: 2314951.806 ops/s
Iteration  24: 2315961.434 ops/s
Iteration  25: 2313252.524 ops/s
Iteration  26: 2314410.757 ops/s
Iteration  27: 2314357.004 ops/s
Iteration  28: 2316031.363 ops/s
Iteration  29: 2311320.227 ops/s
Iteration  30: 2315786.971 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_min_null_throws_without_comparator":
  2313993.539 ±(99.9%) 2956.547 ops/s [Average]
  (min, avg, max) = (2300491.340, 2313993.539, 2321820.715), stdev = 4425.220
  CI (99.9%): [2311036.993, 2316950.086] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                      Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  2313993.539 ± 2956.547  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1698485.471 ops/s
# Warmup Iteration   2: 3252098.272 ops/s
# Warmup Iteration   3: 3611961.477 ops/s
# Warmup Iteration   4: 3646560.146 ops/s
# Warmup Iteration   5: 2978175.953 ops/s
# Warmup Iteration   6: 3653095.218 ops/s
# Warmup Iteration   7: 3652717.027 ops/s
# Warmup Iteration   8: 3649932.638 ops/s
# Warmup Iteration   9: 3647799.267 ops/s
# Warmup Iteration  10: 3654067.296 ops/s
# Warmup Iteration  11: 3653315.679 ops/s
# Warmup Iteration  12: 3650112.781 ops/s
# Warmup Iteration  13: 3654681.903 ops/s
# Warmup Iteration  14: 3649521.995 ops/s
# Warmup Iteration  15: 3649766.087 ops/s
# Warmup Iteration  16: 3654883.080 ops/s
# Warmup Iteration  17: 3646437.994 ops/s
# Warmup Iteration  18: 3641776.808 ops/s
# Warmup Iteration  19: 3644271.558 ops/s
# Warmup Iteration  20: 3644466.047 ops/s
# Warmup Iteration  21: 3641706.788 ops/s
# Warmup Iteration  22: 3631017.209 ops/s
# Warmup Iteration  23: 3628121.652 ops/s
# Warmup Iteration  24: 3624378.963 ops/s
# Warmup Iteration  25: 3636398.523 ops/s
# Warmup Iteration  26: 3641568.652 ops/s
# Warmup Iteration  27: 3645700.013 ops/s
# Warmup Iteration  28: 3646865.543 ops/s
# Warmup Iteration  29: 3645404.002 ops/s
# Warmup Iteration  30: 3631286.529 ops/s
Iteration   1: 3642257.434 ops/s
Iteration   2: 3643076.490 ops/s
Iteration   3: 3648600.495 ops/s
Iteration   4: 3643298.355 ops/s
Iteration   5: 3645856.580 ops/s
Iteration   6: 3641840.899 ops/s
Iteration   7: 3634978.218 ops/s
Iteration   8: 3646717.119 ops/s
Iteration   9: 3644354.199 ops/s
Iteration  10: 3642816.309 ops/s
Iteration  11: 3630282.928 ops/s
Iteration  12: 3621251.069 ops/s
Iteration  13: 3626527.212 ops/s
Iteration  14: 3651615.750 ops/s
Iteration  15: 3640424.073 ops/s
Iteration  16: 3642944.691 ops/s
Iteration  17: 3638864.499 ops/s
Iteration  18: 3641499.420 ops/s
Iteration  19: 3640378.618 ops/s
Iteration  20: 3646740.938 ops/s
Iteration  21: 3633994.674 ops/s
Iteration  22: 3631825.136 ops/s
Iteration  23: 3647474.812 ops/s
Iteration  24: 3636457.445 ops/s
Iteration  25: 3645603.315 ops/s
Iteration  26: 3650964.932 ops/s
Iteration  27: 3633905.432 ops/s
Iteration  28: 3650279.268 ops/s
Iteration  29: 3643091.410 ops/s
Iteration  30: 3638325.040 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_min_without_comparator":
  3640874.892 ±(99.9%) 4820.755 ops/s [Average]
  (min, avg, max) = (3621251.069, 3640874.892, 3651615.750), stdev = 7215.480
  CI (99.9%): [3636054.137, 3645695.647] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_min_without_comparator  thrpt   30  3640874.892 ± 4820.755  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_newWithAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_newWithAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 335387.364 ops/s
# Warmup Iteration   2: 576575.182 ops/s
# Warmup Iteration   3: 693322.229 ops/s
# Warmup Iteration   4: 695359.690 ops/s
# Warmup Iteration   5: 696519.751 ops/s
# Warmup Iteration   6: 648609.536 ops/s
# Warmup Iteration   7: 630807.148 ops/s
# Warmup Iteration   8: 696171.160 ops/s
# Warmup Iteration   9: 694510.308 ops/s
# Warmup Iteration  10: 697172.833 ops/s
# Warmup Iteration  11: 697504.773 ops/s
# Warmup Iteration  12: 696729.753 ops/s
# Warmup Iteration  13: 697623.366 ops/s
# Warmup Iteration  14: 695589.257 ops/s
# Warmup Iteration  15: 695436.707 ops/s
# Warmup Iteration  16: 695689.343 ops/s
# Warmup Iteration  17: 694975.599 ops/s
# Warmup Iteration  18: 695086.111 ops/s
# Warmup Iteration  19: 695893.289 ops/s
# Warmup Iteration  20: 694958.444 ops/s
# Warmup Iteration  21: 694775.208 ops/s
# Warmup Iteration  22: 694383.789 ops/s
# Warmup Iteration  23: 696257.296 ops/s
# Warmup Iteration  24: 696013.755 ops/s
# Warmup Iteration  25: 695943.638 ops/s
# Warmup Iteration  26: 692676.368 ops/s
# Warmup Iteration  27: 695829.617 ops/s
# Warmup Iteration  28: 694665.343 ops/s
# Warmup Iteration  29: 696208.278 ops/s
# Warmup Iteration  30: 695624.834 ops/s
Iteration   1: 696492.086 ops/s
Iteration   2: 695644.876 ops/s
Iteration   3: 695442.295 ops/s
Iteration   4: 695101.806 ops/s
Iteration   5: 697252.114 ops/s
Iteration   6: 693821.391 ops/s
Iteration   7: 696283.323 ops/s
Iteration   8: 695865.935 ops/s
Iteration   9: 696616.393 ops/s
Iteration  10: 695415.416 ops/s
Iteration  11: 697039.790 ops/s
Iteration  12: 696197.839 ops/s
Iteration  13: 696996.207 ops/s
Iteration  14: 695684.242 ops/s
Iteration  15: 694398.618 ops/s
Iteration  16: 694069.577 ops/s
Iteration  17: 695169.226 ops/s
Iteration  18: 694635.932 ops/s
Iteration  19: 696082.399 ops/s
Iteration  20: 695379.998 ops/s
Iteration  21: 693426.280 ops/s
Iteration  22: 696105.376 ops/s
Iteration  23: 695975.959 ops/s
Iteration  24: 694390.449 ops/s
Iteration  25: 694590.858 ops/s
Iteration  26: 691189.643 ops/s
Iteration  27: 690774.090 ops/s
Iteration  28: 694263.842 ops/s
Iteration  29: 696150.122 ops/s
Iteration  30: 695894.436 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_newWithAll":
  695211.684 ±(99.9%) 1008.919 ops/s [Average]
  (min, avg, max) = (690774.090, 695211.684, 697252.114), stdev = 1510.103
  CI (99.9%): [694202.765, 696220.603] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_newWithAll  thrpt   30  695211.684 ± 1008.919  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_newWithTest$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_newWithTest

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 121945.501 ops/s
# Warmup Iteration   2: 218080.846 ops/s
# Warmup Iteration   3: 252815.376 ops/s
# Warmup Iteration   4: 254390.289 ops/s
# Warmup Iteration   5: 253912.814 ops/s
# Warmup Iteration   6: 212202.734 ops/s
# Warmup Iteration   7: 254318.809 ops/s
# Warmup Iteration   8: 254418.870 ops/s
# Warmup Iteration   9: 253937.686 ops/s
# Warmup Iteration  10: 252805.204 ops/s
# Warmup Iteration  11: 254096.353 ops/s
# Warmup Iteration  12: 254128.759 ops/s
# Warmup Iteration  13: 254994.458 ops/s
# Warmup Iteration  14: 254994.408 ops/s
# Warmup Iteration  15: 254711.789 ops/s
# Warmup Iteration  16: 254575.444 ops/s
# Warmup Iteration  17: 254888.061 ops/s
# Warmup Iteration  18: 255247.864 ops/s
# Warmup Iteration  19: 254786.077 ops/s
# Warmup Iteration  20: 254880.514 ops/s
# Warmup Iteration  21: 254596.437 ops/s
# Warmup Iteration  22: 254964.509 ops/s
# Warmup Iteration  23: 254456.515 ops/s
# Warmup Iteration  24: 254755.468 ops/s
# Warmup Iteration  25: 253793.482 ops/s
# Warmup Iteration  26: 254859.708 ops/s
# Warmup Iteration  27: 254944.484 ops/s
# Warmup Iteration  28: 254548.147 ops/s
# Warmup Iteration  29: 254376.219 ops/s
# Warmup Iteration  30: 254431.793 ops/s
Iteration   1: 255089.270 ops/s
Iteration   2: 254698.946 ops/s
Iteration   3: 254579.278 ops/s
Iteration   4: 254461.231 ops/s
Iteration   5: 254238.504 ops/s
Iteration   6: 253790.862 ops/s
Iteration   7: 254514.586 ops/s
Iteration   8: 254912.786 ops/s
Iteration   9: 254222.183 ops/s
Iteration  10: 254767.255 ops/s
Iteration  11: 254604.793 ops/s
Iteration  12: 254793.354 ops/s
Iteration  13: 254429.715 ops/s
Iteration  14: 254684.040 ops/s
Iteration  15: 254426.459 ops/s
Iteration  16: 255058.365 ops/s
Iteration  17: 254561.816 ops/s
Iteration  18: 254252.433 ops/s
Iteration  19: 255077.251 ops/s
Iteration  20: 254946.527 ops/s
Iteration  21: 255078.744 ops/s
Iteration  22: 254512.370 ops/s
Iteration  23: 254655.115 ops/s
Iteration  24: 254317.280 ops/s
Iteration  25: 254933.610 ops/s
Iteration  26: 254290.469 ops/s
Iteration  27: 254043.660 ops/s
Iteration  28: 254760.424 ops/s
Iteration  29: 254494.670 ops/s
Iteration  30: 255143.055 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_newWithTest":
  254611.302 ±(99.9%) 224.632 ops/s [Average]
  (min, avg, max) = (253790.862, 254611.302, 255143.055), stdev = 336.219
  CI (99.9%): [254386.669, 254835.934] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_newWithTest  thrpt   30  254611.302 ± 224.632  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_newWithout$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_newWithout

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 242128.813 ops/s
# Warmup Iteration   2: 432353.065 ops/s
# Warmup Iteration   3: 500082.342 ops/s
# Warmup Iteration   4: 502886.004 ops/s
# Warmup Iteration   5: 503854.341 ops/s
# Warmup Iteration   6: 420625.509 ops/s
# Warmup Iteration   7: 503931.498 ops/s
# Warmup Iteration   8: 503318.390 ops/s
# Warmup Iteration   9: 502726.704 ops/s
# Warmup Iteration  10: 501768.056 ops/s
# Warmup Iteration  11: 505548.318 ops/s
# Warmup Iteration  12: 502781.265 ops/s
# Warmup Iteration  13: 500314.238 ops/s
# Warmup Iteration  14: 503959.208 ops/s
# Warmup Iteration  15: 503508.631 ops/s
# Warmup Iteration  16: 503765.930 ops/s
# Warmup Iteration  17: 503725.576 ops/s
# Warmup Iteration  18: 503742.090 ops/s
# Warmup Iteration  19: 503229.796 ops/s
# Warmup Iteration  20: 503565.899 ops/s
# Warmup Iteration  21: 503355.963 ops/s
# Warmup Iteration  22: 502699.455 ops/s
# Warmup Iteration  23: 503303.422 ops/s
# Warmup Iteration  24: 503000.967 ops/s
# Warmup Iteration  25: 503298.583 ops/s
# Warmup Iteration  26: 504438.584 ops/s
# Warmup Iteration  27: 503851.628 ops/s
# Warmup Iteration  28: 504012.231 ops/s
# Warmup Iteration  29: 503839.650 ops/s
# Warmup Iteration  30: 503817.351 ops/s
Iteration   1: 504703.710 ops/s
Iteration   2: 501420.948 ops/s
Iteration   3: 504310.888 ops/s
Iteration   4: 500455.406 ops/s
Iteration   5: 503705.325 ops/s
Iteration   6: 502688.726 ops/s
Iteration   7: 503969.432 ops/s
Iteration   8: 503021.147 ops/s
Iteration   9: 503061.402 ops/s
Iteration  10: 503926.368 ops/s
Iteration  11: 503369.581 ops/s
Iteration  12: 503100.680 ops/s
Iteration  13: 501566.520 ops/s
Iteration  14: 504257.462 ops/s
Iteration  15: 503374.274 ops/s
Iteration  16: 504189.643 ops/s
Iteration  17: 503178.164 ops/s
Iteration  18: 503104.275 ops/s
Iteration  19: 504154.737 ops/s
Iteration  20: 503041.290 ops/s
Iteration  21: 503398.020 ops/s
Iteration  22: 503710.787 ops/s
Iteration  23: 502565.065 ops/s
Iteration  24: 503027.028 ops/s
Iteration  25: 504286.277 ops/s
Iteration  26: 503870.511 ops/s
Iteration  27: 502595.469 ops/s
Iteration  28: 503242.695 ops/s
Iteration  29: 503751.990 ops/s
Iteration  30: 503422.316 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_newWithout":
  503282.338 ±(99.9%) 614.627 ops/s [Average]
  (min, avg, max) = (500455.406, 503282.338, 504703.710), stdev = 919.944
  CI (99.9%): [502667.711, 503896.964] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_newWithout  thrpt   30  503282.338 ± 614.627  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_newWithoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_newWithoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 115943.299 ops/s
# Warmup Iteration   2: 190110.695 ops/s
# Warmup Iteration   3: 221970.222 ops/s
# Warmup Iteration   4: 223304.045 ops/s
# Warmup Iteration   5: 223244.587 ops/s
# Warmup Iteration   6: 219019.533 ops/s
# Warmup Iteration   7: 192782.803 ops/s
# Warmup Iteration   8: 222888.136 ops/s
# Warmup Iteration   9: 223918.942 ops/s
# Warmup Iteration  10: 223236.187 ops/s
# Warmup Iteration  11: 223081.241 ops/s
# Warmup Iteration  12: 223715.324 ops/s
# Warmup Iteration  13: 222944.335 ops/s
# Warmup Iteration  14: 217694.280 ops/s
# Warmup Iteration  15: 222874.801 ops/s
# Warmup Iteration  16: 223212.392 ops/s
# Warmup Iteration  17: 223147.165 ops/s
# Warmup Iteration  18: 223676.942 ops/s
# Warmup Iteration  19: 223643.097 ops/s
# Warmup Iteration  20: 222779.488 ops/s
# Warmup Iteration  21: 223352.627 ops/s
# Warmup Iteration  22: 223399.451 ops/s
# Warmup Iteration  23: 223224.289 ops/s
# Warmup Iteration  24: 223049.786 ops/s
# Warmup Iteration  25: 223435.628 ops/s
# Warmup Iteration  26: 223350.759 ops/s
# Warmup Iteration  27: 222901.024 ops/s
# Warmup Iteration  28: 223183.700 ops/s
# Warmup Iteration  29: 222648.678 ops/s
# Warmup Iteration  30: 223185.877 ops/s
Iteration   1: 223477.908 ops/s
Iteration   2: 222512.234 ops/s
Iteration   3: 223167.626 ops/s
Iteration   4: 223203.587 ops/s
Iteration   5: 223922.556 ops/s
Iteration   6: 222825.653 ops/s
Iteration   7: 223696.757 ops/s
Iteration   8: 223441.952 ops/s
Iteration   9: 222770.815 ops/s
Iteration  10: 222741.727 ops/s
Iteration  11: 221443.451 ops/s
Iteration  12: 223919.644 ops/s
Iteration  13: 222923.151 ops/s
Iteration  14: 223509.513 ops/s
Iteration  15: 223131.635 ops/s
Iteration  16: 222900.200 ops/s
Iteration  17: 223314.874 ops/s
Iteration  18: 223660.248 ops/s
Iteration  19: 223068.333 ops/s
Iteration  20: 223637.041 ops/s
Iteration  21: 223112.479 ops/s
Iteration  22: 223273.137 ops/s
Iteration  23: 223261.545 ops/s
Iteration  24: 224061.954 ops/s
Iteration  25: 223513.088 ops/s
Iteration  26: 223607.304 ops/s
Iteration  27: 222942.545 ops/s
Iteration  28: 223772.215 ops/s
Iteration  29: 223771.081 ops/s
Iteration  30: 223799.094 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_newWithoutAll":
  223279.445 ±(99.9%) 353.747 ops/s [Average]
  (min, avg, max) = (221443.451, 223279.445, 224061.954), stdev = 529.472
  CI (99.9%): [222925.698, 223633.192] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_newWithoutAll  thrpt   30  223279.445 ± 353.747  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_noSupportForNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_noSupportForNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1685238.472 ops/s
# Warmup Iteration   2: 3263134.637 ops/s
# Warmup Iteration   3: 3587708.311 ops/s
# Warmup Iteration   4: 3609882.062 ops/s
# Warmup Iteration   5: 2992801.569 ops/s
# Warmup Iteration   6: 3593568.518 ops/s
# Warmup Iteration   7: 3611474.796 ops/s
# Warmup Iteration   8: 3613109.917 ops/s
# Warmup Iteration   9: 3606228.804 ops/s
# Warmup Iteration  10: 3613132.915 ops/s
# Warmup Iteration  11: 3618513.418 ops/s
# Warmup Iteration  12: 3611969.406 ops/s
# Warmup Iteration  13: 3609042.326 ops/s
# Warmup Iteration  14: 3603265.178 ops/s
# Warmup Iteration  15: 3600465.688 ops/s
# Warmup Iteration  16: 3608200.022 ops/s
# Warmup Iteration  17: 3611675.222 ops/s
# Warmup Iteration  18: 3612674.081 ops/s
# Warmup Iteration  19: 3600480.765 ops/s
# Warmup Iteration  20: 3614135.352 ops/s
# Warmup Iteration  21: 3614051.782 ops/s
# Warmup Iteration  22: 3615657.566 ops/s
# Warmup Iteration  23: 3617961.174 ops/s
# Warmup Iteration  24: 3615813.388 ops/s
# Warmup Iteration  25: 3612711.503 ops/s
# Warmup Iteration  26: 3610852.688 ops/s
# Warmup Iteration  27: 3612993.649 ops/s
# Warmup Iteration  28: 3615753.564 ops/s
# Warmup Iteration  29: 3612366.664 ops/s
# Warmup Iteration  30: 3615630.460 ops/s
Iteration   1: 3611569.411 ops/s
Iteration   2: 3613257.475 ops/s
Iteration   3: 3611686.495 ops/s
Iteration   4: 3620371.502 ops/s
Iteration   5: 3616332.528 ops/s
Iteration   6: 3614012.071 ops/s
Iteration   7: 3613572.136 ops/s
Iteration   8: 3611078.894 ops/s
Iteration   9: 3610573.554 ops/s
Iteration  10: 3616548.093 ops/s
Iteration  11: 3597213.810 ops/s
Iteration  12: 3612594.090 ops/s
Iteration  13: 3603686.100 ops/s
Iteration  14: 3617953.650 ops/s
Iteration  15: 3612828.668 ops/s
Iteration  16: 3616267.012 ops/s
Iteration  17: 3612174.219 ops/s
Iteration  18: 3609381.430 ops/s
Iteration  19: 3613748.254 ops/s
Iteration  20: 3626215.226 ops/s
Iteration  21: 3610629.023 ops/s
Iteration  22: 3604174.430 ops/s
Iteration  23: 3609304.891 ops/s
Iteration  24: 3623793.829 ops/s
Iteration  25: 3616294.659 ops/s
Iteration  26: 3601689.306 ops/s
Iteration  27: 3615514.297 ops/s
Iteration  28: 3593930.267 ops/s
Iteration  29: 3607724.030 ops/s
Iteration  30: 3619118.518 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_noSupportForNull":
  3612107.929 ±(99.9%) 4670.158 ops/s [Average]
  (min, avg, max) = (3593930.267, 3612107.929, 3626215.226), stdev = 6990.074
  CI (99.9%): [3607437.771, 3616778.087] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_noSupportForNull  thrpt   30  3612107.929 ± 4670.158  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1680937.658 ops/s
# Warmup Iteration   2: 3194483.329 ops/s
# Warmup Iteration   3: 3546900.069 ops/s
# Warmup Iteration   4: 3545559.807 ops/s
# Warmup Iteration   5: 3081550.231 ops/s
# Warmup Iteration   6: 3377978.181 ops/s
# Warmup Iteration   7: 3537025.328 ops/s
# Warmup Iteration   8: 3535826.219 ops/s
# Warmup Iteration   9: 3546340.085 ops/s
# Warmup Iteration  10: 3549059.549 ops/s
# Warmup Iteration  11: 3551460.982 ops/s
# Warmup Iteration  12: 3553577.487 ops/s
# Warmup Iteration  13: 3544256.234 ops/s
# Warmup Iteration  14: 3543269.079 ops/s
# Warmup Iteration  15: 3546059.155 ops/s
# Warmup Iteration  16: 3547166.329 ops/s
# Warmup Iteration  17: 3543749.427 ops/s
# Warmup Iteration  18: 3549510.221 ops/s
# Warmup Iteration  19: 3551586.162 ops/s
# Warmup Iteration  20: 3550982.595 ops/s
# Warmup Iteration  21: 3544408.845 ops/s
# Warmup Iteration  22: 3548796.981 ops/s
# Warmup Iteration  23: 3547180.629 ops/s
# Warmup Iteration  24: 3546692.108 ops/s
# Warmup Iteration  25: 3533098.740 ops/s
# Warmup Iteration  26: 3532501.363 ops/s
# Warmup Iteration  27: 3545713.425 ops/s
# Warmup Iteration  28: 3548380.667 ops/s
# Warmup Iteration  29: 3551349.860 ops/s
# Warmup Iteration  30: 3549268.784 ops/s
Iteration   1: 3547128.595 ops/s
Iteration   2: 3555269.034 ops/s
Iteration   3: 3548033.020 ops/s
Iteration   4: 3542360.937 ops/s
Iteration   5: 3552749.795 ops/s
Iteration   6: 3546462.880 ops/s
Iteration   7: 3541051.840 ops/s
Iteration   8: 3556479.564 ops/s
Iteration   9: 3551581.665 ops/s
Iteration  10: 3550807.967 ops/s
Iteration  11: 3556392.217 ops/s
Iteration  12: 3542560.308 ops/s
Iteration  13: 3551547.755 ops/s
Iteration  14: 3552137.835 ops/s
Iteration  15: 3551570.029 ops/s
Iteration  16: 3557427.369 ops/s
Iteration  17: 3536988.320 ops/s
Iteration  18: 3535293.764 ops/s
Iteration  19: 3551134.090 ops/s
Iteration  20: 3545439.759 ops/s
Iteration  21: 3548618.696 ops/s
Iteration  22: 3552717.309 ops/s
Iteration  23: 3549449.492 ops/s
Iteration  24: 3558570.380 ops/s
Iteration  25: 3547314.357 ops/s
Iteration  26: 3554306.620 ops/s
Iteration  27: 3558074.837 ops/s
Iteration  28: 3547523.546 ops/s
Iteration  29: 3545586.008 ops/s
Iteration  30: 3547167.858 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_noneSatisfy":
  3549391.528 ±(99.9%) 3939.967 ops/s [Average]
  (min, avg, max) = (3535293.764, 3549391.528, 3558570.380), stdev = 5897.158
  CI (99.9%): [3545451.561, 3553331.495] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_noneSatisfy  thrpt   30  3549391.528 ± 3939.967  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1663194.034 ops/s
# Warmup Iteration   2: 3103233.091 ops/s
# Warmup Iteration   3: 3509047.655 ops/s
# Warmup Iteration   4: 3532455.502 ops/s
# Warmup Iteration   5: 3130986.013 ops/s
# Warmup Iteration   6: 3305477.662 ops/s
# Warmup Iteration   7: 3534073.872 ops/s
# Warmup Iteration   8: 3531212.063 ops/s
# Warmup Iteration   9: 3534026.572 ops/s
# Warmup Iteration  10: 3527342.626 ops/s
# Warmup Iteration  11: 3531855.491 ops/s
# Warmup Iteration  12: 3530841.907 ops/s
# Warmup Iteration  13: 3531134.987 ops/s
# Warmup Iteration  14: 3515239.871 ops/s
# Warmup Iteration  15: 3522081.544 ops/s
# Warmup Iteration  16: 3531206.644 ops/s
# Warmup Iteration  17: 3528686.066 ops/s
# Warmup Iteration  18: 3532321.706 ops/s
# Warmup Iteration  19: 3534021.017 ops/s
# Warmup Iteration  20: 3532323.446 ops/s
# Warmup Iteration  21: 3526643.057 ops/s
# Warmup Iteration  22: 3520427.222 ops/s
# Warmup Iteration  23: 3520741.456 ops/s
# Warmup Iteration  24: 3525126.671 ops/s
# Warmup Iteration  25: 3531453.878 ops/s
# Warmup Iteration  26: 3531103.949 ops/s
# Warmup Iteration  27: 3536022.483 ops/s
# Warmup Iteration  28: 3531326.500 ops/s
# Warmup Iteration  29: 3523345.459 ops/s
# Warmup Iteration  30: 3533755.106 ops/s
Iteration   1: 3525487.944 ops/s
Iteration   2: 3534408.461 ops/s
Iteration   3: 3532771.946 ops/s
Iteration   4: 3527927.625 ops/s
Iteration   5: 3535508.867 ops/s
Iteration   6: 3529740.469 ops/s
Iteration   7: 3535433.870 ops/s
Iteration   8: 3529448.377 ops/s
Iteration   9: 3528524.115 ops/s
Iteration  10: 3536424.365 ops/s
Iteration  11: 3525928.812 ops/s
Iteration  12: 3530292.526 ops/s
Iteration  13: 3536596.863 ops/s
Iteration  14: 3529450.060 ops/s
Iteration  15: 3538250.092 ops/s
Iteration  16: 3533467.574 ops/s
Iteration  17: 3530262.292 ops/s
Iteration  18: 3537776.411 ops/s
Iteration  19: 3532411.630 ops/s
Iteration  20: 3513244.734 ops/s
Iteration  21: 3539448.718 ops/s
Iteration  22: 3521066.130 ops/s
Iteration  23: 3524943.775 ops/s
Iteration  24: 3535052.546 ops/s
Iteration  25: 3508484.940 ops/s
Iteration  26: 3531280.526 ops/s
Iteration  27: 3531075.732 ops/s
Iteration  28: 3530804.799 ops/s
Iteration  29: 3536549.270 ops/s
Iteration  30: 3533161.541 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_noneSatisfyWith":
  3530507.500 ±(99.9%) 4600.176 ops/s [Average]
  (min, avg, max) = (3508484.940, 3530507.500, 3539448.718), stdev = 6885.327
  CI (99.9%): [3525907.325, 3535107.676] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  3530507.500 ± 4600.176  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_noneSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_noneSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1708993.378 ops/s
# Warmup Iteration   2: 3272507.157 ops/s
# Warmup Iteration   3: 3607947.614 ops/s
# Warmup Iteration   4: 3578391.971 ops/s
# Warmup Iteration   5: 2973809.991 ops/s
# Warmup Iteration   6: 3616056.259 ops/s
# Warmup Iteration   7: 3625015.641 ops/s
# Warmup Iteration   8: 3618985.597 ops/s
# Warmup Iteration   9: 3624364.814 ops/s
# Warmup Iteration  10: 3617706.693 ops/s
# Warmup Iteration  11: 3603175.572 ops/s
# Warmup Iteration  12: 3618280.397 ops/s
# Warmup Iteration  13: 3631536.399 ops/s
# Warmup Iteration  14: 3628978.114 ops/s
# Warmup Iteration  15: 3624461.991 ops/s
# Warmup Iteration  16: 3616775.908 ops/s
# Warmup Iteration  17: 3622868.733 ops/s
# Warmup Iteration  18: 3627895.144 ops/s
# Warmup Iteration  19: 3624883.284 ops/s
# Warmup Iteration  20: 3624323.867 ops/s
# Warmup Iteration  21: 3622288.338 ops/s
# Warmup Iteration  22: 3628266.024 ops/s
# Warmup Iteration  23: 3613494.323 ops/s
# Warmup Iteration  24: 3630834.132 ops/s
# Warmup Iteration  25: 3611128.985 ops/s
# Warmup Iteration  26: 3621681.724 ops/s
# Warmup Iteration  27: 3629774.511 ops/s
# Warmup Iteration  28: 3626868.591 ops/s
# Warmup Iteration  29: 3624558.942 ops/s
# Warmup Iteration  30: 3605525.654 ops/s
Iteration   1: 3602809.358 ops/s
Iteration   2: 3633324.077 ops/s
Iteration   3: 3625997.707 ops/s
Iteration   4: 3611511.060 ops/s
Iteration   5: 3628385.759 ops/s
Iteration   6: 3625269.731 ops/s
Iteration   7: 3627658.985 ops/s
Iteration   8: 3632271.577 ops/s
Iteration   9: 3629417.841 ops/s
Iteration  10: 3628113.023 ops/s
Iteration  11: 3627657.732 ops/s
Iteration  12: 3622296.508 ops/s
Iteration  13: 3631775.992 ops/s
Iteration  14: 3625403.295 ops/s
Iteration  15: 3628087.059 ops/s
Iteration  16: 3634279.408 ops/s
Iteration  17: 3614704.102 ops/s
Iteration  18: 3627382.582 ops/s
Iteration  19: 3626322.010 ops/s
Iteration  20: 3604749.723 ops/s
Iteration  21: 3629097.704 ops/s
Iteration  22: 3627094.433 ops/s
Iteration  23: 3624682.181 ops/s
Iteration  24: 3624556.148 ops/s
Iteration  25: 3633272.814 ops/s
Iteration  26: 3625273.657 ops/s
Iteration  27: 3623534.400 ops/s
Iteration  28: 3629273.044 ops/s
Iteration  29: 3604465.410 ops/s
Iteration  30: 3615784.629 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_noneSatisfyWithOccurrences":
  3624148.398 ±(99.9%) 5712.638 ops/s [Average]
  (min, avg, max) = (3602809.358, 3624148.398, 3634279.408), stdev = 8550.408
  CI (99.9%): [3618435.760, 3629861.036] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_noneSatisfyWithOccurrences  thrpt   30  3624148.398 ± 5712.638  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_occurrencesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_occurrencesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1660680.972 ops/s
# Warmup Iteration   2: 3103027.783 ops/s
# Warmup Iteration   3: 3409100.044 ops/s
# Warmup Iteration   4: 3425526.984 ops/s
# Warmup Iteration   5: 3161557.707 ops/s
# Warmup Iteration   6: 3068846.929 ops/s
# Warmup Iteration   7: 3410650.657 ops/s
# Warmup Iteration   8: 3419149.779 ops/s
# Warmup Iteration   9: 3416705.358 ops/s
# Warmup Iteration  10: 3419993.412 ops/s
# Warmup Iteration  11: 3416761.527 ops/s
# Warmup Iteration  12: 3419005.016 ops/s
# Warmup Iteration  13: 3416835.439 ops/s
# Warmup Iteration  14: 3420311.848 ops/s
# Warmup Iteration  15: 3411547.168 ops/s
# Warmup Iteration  16: 3420144.070 ops/s
# Warmup Iteration  17: 3421148.489 ops/s
# Warmup Iteration  18: 3421389.630 ops/s
# Warmup Iteration  19: 3423982.915 ops/s
# Warmup Iteration  20: 3414669.819 ops/s
# Warmup Iteration  21: 3422024.042 ops/s
# Warmup Iteration  22: 3422882.363 ops/s
# Warmup Iteration  23: 3425884.467 ops/s
# Warmup Iteration  24: 3413732.435 ops/s
# Warmup Iteration  25: 3415470.343 ops/s
# Warmup Iteration  26: 3417925.022 ops/s
# Warmup Iteration  27: 3401030.911 ops/s
# Warmup Iteration  28: 3407006.078 ops/s
# Warmup Iteration  29: 3413478.702 ops/s
# Warmup Iteration  30: 3419404.762 ops/s
Iteration   1: 3425336.895 ops/s
Iteration   2: 3418035.035 ops/s
Iteration   3: 3413237.785 ops/s
Iteration   4: 3407626.885 ops/s
Iteration   5: 3422265.579 ops/s
Iteration   6: 3416704.443 ops/s
Iteration   7: 3423629.528 ops/s
Iteration   8: 3411467.736 ops/s
Iteration   9: 3426397.392 ops/s
Iteration  10: 3415159.749 ops/s
Iteration  11: 3414065.164 ops/s
Iteration  12: 3426742.084 ops/s
Iteration  13: 3412322.228 ops/s
Iteration  14: 3426334.884 ops/s
Iteration  15: 3419856.922 ops/s
Iteration  16: 3421288.065 ops/s
Iteration  17: 3424729.817 ops/s
Iteration  18: 3421021.211 ops/s
Iteration  19: 3409986.494 ops/s
Iteration  20: 3421851.125 ops/s
Iteration  21: 3411714.082 ops/s
Iteration  22: 3421752.609 ops/s
Iteration  23: 3413608.044 ops/s
Iteration  24: 3418567.019 ops/s
Iteration  25: 3417744.384 ops/s
Iteration  26: 3410391.444 ops/s
Iteration  27: 3416253.336 ops/s
Iteration  28: 3408977.036 ops/s
Iteration  29: 3405050.073 ops/s
Iteration  30: 3408056.504 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_occurrencesOf":
  3417005.785 ±(99.9%) 4208.756 ops/s [Average]
  (min, avg, max) = (3405050.073, 3417005.785, 3426742.084), stdev = 6299.468
  CI (99.9%): [3412797.030, 3421214.541] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_occurrencesOf  thrpt   30  3417005.785 ± 4208.756  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_parallelStream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_parallelStream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 172486648.578 ops/s
# Warmup Iteration   2: 300184837.382 ops/s
# Warmup Iteration   3: 290018767.361 ops/s
# Warmup Iteration   4: 320073335.373 ops/s
# Warmup Iteration   5: 319380885.366 ops/s
# Warmup Iteration   6: 318082519.023 ops/s
# Warmup Iteration   7: 318317245.512 ops/s
# Warmup Iteration   8: 320351329.983 ops/s
# Warmup Iteration   9: 320991335.230 ops/s
# Warmup Iteration  10: 320475012.409 ops/s
# Warmup Iteration  11: 319541199.934 ops/s
# Warmup Iteration  12: 319954536.760 ops/s
# Warmup Iteration  13: 321000530.090 ops/s
# Warmup Iteration  14: 319901022.873 ops/s
# Warmup Iteration  15: 319932927.161 ops/s
# Warmup Iteration  16: 321231560.218 ops/s
# Warmup Iteration  17: 320838535.365 ops/s
# Warmup Iteration  18: 321189423.349 ops/s
# Warmup Iteration  19: 321133595.610 ops/s
# Warmup Iteration  20: 321228503.518 ops/s
# Warmup Iteration  21: 317993203.882 ops/s
# Warmup Iteration  22: 321045709.029 ops/s
# Warmup Iteration  23: 321967965.835 ops/s
# Warmup Iteration  24: 320093936.718 ops/s
# Warmup Iteration  25: 320594641.661 ops/s
# Warmup Iteration  26: 321599555.716 ops/s
# Warmup Iteration  27: 320941404.592 ops/s
# Warmup Iteration  28: 317875892.937 ops/s
# Warmup Iteration  29: 319690208.403 ops/s
# Warmup Iteration  30: 321235444.122 ops/s
Iteration   1: 320864637.980 ops/s
Iteration   2: 321447154.631 ops/s
Iteration   3: 321069054.378 ops/s
Iteration   4: 320599725.976 ops/s
Iteration   5: 321442763.504 ops/s
Iteration   6: 321941011.914 ops/s
Iteration   7: 319281219.759 ops/s
Iteration   8: 321993907.646 ops/s
Iteration   9: 320393112.756 ops/s
Iteration  10: 321516911.521 ops/s
Iteration  11: 318520103.587 ops/s
Iteration  12: 316741450.594 ops/s
Iteration  13: 317610535.079 ops/s
Iteration  14: 317961859.559 ops/s
Iteration  15: 319137609.396 ops/s
Iteration  16: 321252773.574 ops/s
Iteration  17: 320242587.690 ops/s
Iteration  18: 320792753.627 ops/s
Iteration  19: 320363168.370 ops/s
Iteration  20: 319461644.664 ops/s
Iteration  21: 320386509.178 ops/s
Iteration  22: 319164587.829 ops/s
Iteration  23: 319350223.448 ops/s
Iteration  24: 316449997.780 ops/s
Iteration  25: 320239140.188 ops/s
Iteration  26: 320012736.860 ops/s
Iteration  27: 319637451.551 ops/s
Iteration  28: 320259915.056 ops/s
Iteration  29: 319216157.880 ops/s
Iteration  30: 319215739.442 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_parallelStream":
  319885548.181 ±(99.9%) 946483.771 ops/s [Average]
  (min, avg, max) = (316449997.780, 319885548.181, 321993907.646), stdev = 1416652.458
  CI (99.9%): [318939064.409, 320832031.952] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt          Score        Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_parallelStream  thrpt   30  319885548.181 ± 946483.771  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 321712.673 ops/s
# Warmup Iteration   2: 701671.751 ops/s
# Warmup Iteration   3: 751800.284 ops/s
# Warmup Iteration   4: 754985.438 ops/s
# Warmup Iteration   5: 628933.080 ops/s
# Warmup Iteration   6: 756032.223 ops/s
# Warmup Iteration   7: 757006.256 ops/s
# Warmup Iteration   8: 757087.850 ops/s
# Warmup Iteration   9: 758162.601 ops/s
# Warmup Iteration  10: 756188.464 ops/s
# Warmup Iteration  11: 753366.448 ops/s
# Warmup Iteration  12: 756519.323 ops/s
# Warmup Iteration  13: 756334.087 ops/s
# Warmup Iteration  14: 755912.563 ops/s
# Warmup Iteration  15: 758162.611 ops/s
# Warmup Iteration  16: 756200.541 ops/s
# Warmup Iteration  17: 754944.202 ops/s
# Warmup Iteration  18: 753973.537 ops/s
# Warmup Iteration  19: 756652.186 ops/s
# Warmup Iteration  20: 756159.083 ops/s
# Warmup Iteration  21: 756646.663 ops/s
# Warmup Iteration  22: 757008.506 ops/s
# Warmup Iteration  23: 756106.571 ops/s
# Warmup Iteration  24: 757288.613 ops/s
# Warmup Iteration  25: 756283.531 ops/s
# Warmup Iteration  26: 757134.753 ops/s
# Warmup Iteration  27: 756919.755 ops/s
# Warmup Iteration  28: 757005.342 ops/s
# Warmup Iteration  29: 754513.540 ops/s
# Warmup Iteration  30: 757338.147 ops/s
Iteration   1: 757007.733 ops/s
Iteration   2: 756641.596 ops/s
Iteration   3: 757858.214 ops/s
Iteration   4: 757956.731 ops/s
Iteration   5: 755735.879 ops/s
Iteration   6: 755565.591 ops/s
Iteration   7: 757127.380 ops/s
Iteration   8: 755865.400 ops/s
Iteration   9: 756085.749 ops/s
Iteration  10: 756902.103 ops/s
Iteration  11: 755858.963 ops/s
Iteration  12: 756225.792 ops/s
Iteration  13: 757273.348 ops/s
Iteration  14: 756492.078 ops/s
Iteration  15: 755092.794 ops/s
Iteration  16: 756057.931 ops/s
Iteration  17: 756045.591 ops/s
Iteration  18: 758854.228 ops/s
Iteration  19: 756165.772 ops/s
Iteration  20: 757089.508 ops/s
Iteration  21: 755579.563 ops/s
Iteration  22: 756046.227 ops/s
Iteration  23: 756627.102 ops/s
Iteration  24: 754308.630 ops/s
Iteration  25: 756635.003 ops/s
Iteration  26: 755585.284 ops/s
Iteration  27: 756639.478 ops/s
Iteration  28: 756408.777 ops/s
Iteration  29: 757479.457 ops/s
Iteration  30: 756894.533 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_partition":
  756470.215 ±(99.9%) 609.586 ops/s [Average]
  (min, avg, max) = (754308.630, 756470.215, 758854.228), stdev = 912.400
  CI (99.9%): [755860.628, 757079.801] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_partition  thrpt   30  756470.215 ± 609.586  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 530739.586 ops/s
# Warmup Iteration   2: 1053389.695 ops/s
# Warmup Iteration   3: 1149409.731 ops/s
# Warmup Iteration   4: 1157244.619 ops/s
# Warmup Iteration   5: 961386.971 ops/s
# Warmup Iteration   6: 1156973.797 ops/s
# Warmup Iteration   7: 1154814.435 ops/s
# Warmup Iteration   8: 1148642.291 ops/s
# Warmup Iteration   9: 1153957.117 ops/s
# Warmup Iteration  10: 1155607.497 ops/s
# Warmup Iteration  11: 1157812.354 ops/s
# Warmup Iteration  12: 1157900.651 ops/s
# Warmup Iteration  13: 1155557.255 ops/s
# Warmup Iteration  14: 1156111.109 ops/s
# Warmup Iteration  15: 1147661.137 ops/s
# Warmup Iteration  16: 1151066.602 ops/s
# Warmup Iteration  17: 1157106.133 ops/s
# Warmup Iteration  18: 1154541.892 ops/s
# Warmup Iteration  19: 1155151.300 ops/s
# Warmup Iteration  20: 1156799.928 ops/s
# Warmup Iteration  21: 1156236.033 ops/s
# Warmup Iteration  22: 1157062.689 ops/s
# Warmup Iteration  23: 1156565.552 ops/s
# Warmup Iteration  24: 1156462.119 ops/s
# Warmup Iteration  25: 1157379.174 ops/s
# Warmup Iteration  26: 1158304.429 ops/s
# Warmup Iteration  27: 1153509.747 ops/s
# Warmup Iteration  28: 1158013.640 ops/s
# Warmup Iteration  29: 1157015.530 ops/s
# Warmup Iteration  30: 1155164.387 ops/s
Iteration   1: 1157788.541 ops/s
Iteration   2: 1155416.121 ops/s
Iteration   3: 1153605.662 ops/s
Iteration   4: 1157652.905 ops/s
Iteration   5: 1154119.255 ops/s
Iteration   6: 1157197.864 ops/s
Iteration   7: 1158352.178 ops/s
Iteration   8: 1158300.210 ops/s
Iteration   9: 1157236.352 ops/s
Iteration  10: 1155369.591 ops/s
Iteration  11: 1154317.445 ops/s
Iteration  12: 1155942.213 ops/s
Iteration  13: 1156275.521 ops/s
Iteration  14: 1157943.999 ops/s
Iteration  15: 1157601.033 ops/s
Iteration  16: 1155583.249 ops/s
Iteration  17: 1158363.672 ops/s
Iteration  18: 1157043.470 ops/s
Iteration  19: 1157866.987 ops/s
Iteration  20: 1159292.788 ops/s
Iteration  21: 1156168.326 ops/s
Iteration  22: 1157011.035 ops/s
Iteration  23: 1159354.102 ops/s
Iteration  24: 1155965.472 ops/s
Iteration  25: 1156498.152 ops/s
Iteration  26: 1157276.478 ops/s
Iteration  27: 1155780.094 ops/s
Iteration  28: 1157996.936 ops/s
Iteration  29: 1158275.129 ops/s
Iteration  30: 1159381.954 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_partitionWhile":
  1156965.891 ±(99.9%) 1015.501 ops/s [Average]
  (min, avg, max) = (1153605.662, 1156965.891, 1159381.954), stdev = 1519.954
  CI (99.9%): [1155950.390, 1157981.392] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_partitionWhile  thrpt   30  1156965.891 ± 1015.501  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 310769.586 ops/s
# Warmup Iteration   2: 680519.320 ops/s
# Warmup Iteration   3: 732503.674 ops/s
# Warmup Iteration   4: 737147.500 ops/s
# Warmup Iteration   5: 613987.983 ops/s
# Warmup Iteration   6: 737675.041 ops/s
# Warmup Iteration   7: 738061.509 ops/s
# Warmup Iteration   8: 736518.976 ops/s
# Warmup Iteration   9: 737134.480 ops/s
# Warmup Iteration  10: 735686.375 ops/s
# Warmup Iteration  11: 737884.683 ops/s
# Warmup Iteration  12: 736901.936 ops/s
# Warmup Iteration  13: 736295.952 ops/s
# Warmup Iteration  14: 736244.009 ops/s
# Warmup Iteration  15: 734356.277 ops/s
# Warmup Iteration  16: 738287.690 ops/s
# Warmup Iteration  17: 735670.594 ops/s
# Warmup Iteration  18: 733299.850 ops/s
# Warmup Iteration  19: 736706.795 ops/s
# Warmup Iteration  20: 737690.128 ops/s
# Warmup Iteration  21: 735985.800 ops/s
# Warmup Iteration  22: 734852.347 ops/s
# Warmup Iteration  23: 736126.309 ops/s
# Warmup Iteration  24: 736598.653 ops/s
# Warmup Iteration  25: 735285.230 ops/s
# Warmup Iteration  26: 734971.334 ops/s
# Warmup Iteration  27: 735118.760 ops/s
# Warmup Iteration  28: 735879.439 ops/s
# Warmup Iteration  29: 735941.422 ops/s
# Warmup Iteration  30: 736546.890 ops/s
Iteration   1: 735599.547 ops/s
Iteration   2: 735219.069 ops/s
Iteration   3: 737561.956 ops/s
Iteration   4: 736572.223 ops/s
Iteration   5: 736584.573 ops/s
Iteration   6: 735597.238 ops/s
Iteration   7: 736686.662 ops/s
Iteration   8: 735233.853 ops/s
Iteration   9: 735443.295 ops/s
Iteration  10: 736338.496 ops/s
Iteration  11: 736688.062 ops/s
Iteration  12: 736462.260 ops/s
Iteration  13: 736154.494 ops/s
Iteration  14: 736232.488 ops/s
Iteration  15: 737597.844 ops/s
Iteration  16: 736438.615 ops/s
Iteration  17: 735748.502 ops/s
Iteration  18: 735881.113 ops/s
Iteration  19: 735204.759 ops/s
Iteration  20: 734853.880 ops/s
Iteration  21: 735643.243 ops/s
Iteration  22: 736344.955 ops/s
Iteration  23: 738389.670 ops/s
Iteration  24: 734323.650 ops/s
Iteration  25: 735340.708 ops/s
Iteration  26: 736343.247 ops/s
Iteration  27: 737564.231 ops/s
Iteration  28: 735904.468 ops/s
Iteration  29: 734643.999 ops/s
Iteration  30: 735153.443 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_partitionWith":
  736058.351 ±(99.9%) 623.876 ops/s [Average]
  (min, avg, max) = (734323.650, 736058.351, 738389.670), stdev = 933.788
  CI (99.9%): [735434.476, 736682.227] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_partitionWith  thrpt   30  736058.351 ± 623.876  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 649888.469 ops/s
# Warmup Iteration   2: 1485800.393 ops/s
# Warmup Iteration   3: 1567118.536 ops/s
# Warmup Iteration   4: 1564371.400 ops/s
# Warmup Iteration   5: 1319432.265 ops/s
# Warmup Iteration   6: 1577909.759 ops/s
# Warmup Iteration   7: 1576155.924 ops/s
# Warmup Iteration   8: 1580137.976 ops/s
# Warmup Iteration   9: 1576335.915 ops/s
# Warmup Iteration  10: 1579251.060 ops/s
# Warmup Iteration  11: 1579132.431 ops/s
# Warmup Iteration  12: 1580705.521 ops/s
# Warmup Iteration  13: 1576914.440 ops/s
# Warmup Iteration  14: 1576583.604 ops/s
# Warmup Iteration  15: 1578472.602 ops/s
# Warmup Iteration  16: 1577092.876 ops/s
# Warmup Iteration  17: 1576792.637 ops/s
# Warmup Iteration  18: 1578065.172 ops/s
# Warmup Iteration  19: 1577915.945 ops/s
# Warmup Iteration  20: 1577666.040 ops/s
# Warmup Iteration  21: 1579435.542 ops/s
# Warmup Iteration  22: 1577251.732 ops/s
# Warmup Iteration  23: 1577570.513 ops/s
# Warmup Iteration  24: 1575484.004 ops/s
# Warmup Iteration  25: 1577523.557 ops/s
# Warmup Iteration  26: 1579721.229 ops/s
# Warmup Iteration  27: 1579110.564 ops/s
# Warmup Iteration  28: 1579304.216 ops/s
# Warmup Iteration  29: 1575940.438 ops/s
# Warmup Iteration  30: 1579060.611 ops/s
Iteration   1: 1577959.615 ops/s
Iteration   2: 1577798.426 ops/s
Iteration   3: 1579015.587 ops/s
Iteration   4: 1578297.785 ops/s
Iteration   5: 1580099.985 ops/s
Iteration   6: 1576494.328 ops/s
Iteration   7: 1577679.804 ops/s
Iteration   8: 1579056.561 ops/s
Iteration   9: 1581404.163 ops/s
Iteration  10: 1576874.656 ops/s
Iteration  11: 1577812.233 ops/s
Iteration  12: 1577992.912 ops/s
Iteration  13: 1578002.955 ops/s
Iteration  14: 1578310.574 ops/s
Iteration  15: 1579745.842 ops/s
Iteration  16: 1578344.263 ops/s
Iteration  17: 1580326.930 ops/s
Iteration  18: 1579060.953 ops/s
Iteration  19: 1575757.644 ops/s
Iteration  20: 1576851.272 ops/s
Iteration  21: 1571668.331 ops/s
Iteration  22: 1567584.117 ops/s
Iteration  23: 1570094.188 ops/s
Iteration  24: 1567195.432 ops/s
Iteration  25: 1581037.113 ops/s
Iteration  26: 1578867.517 ops/s
Iteration  27: 1580783.542 ops/s
Iteration  28: 1578548.886 ops/s
Iteration  29: 1579365.134 ops/s
Iteration  30: 1578667.258 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_reject":
  1577356.600 ±(99.9%) 2398.786 ops/s [Average]
  (min, avg, max) = (1567195.432, 1577356.600, 1581404.163), stdev = 3590.391
  CI (99.9%): [1574957.814, 1579755.387] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_reject  thrpt   30  1577356.600 ± 2398.786  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_rejectToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_rejectToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 430753.035 ops/s
# Warmup Iteration   2: 818265.325 ops/s
# Warmup Iteration   3: 958953.962 ops/s
# Warmup Iteration   4: 962554.587 ops/s
# Warmup Iteration   5: 965100.653 ops/s
# Warmup Iteration   6: 795185.273 ops/s
# Warmup Iteration   7: 965048.175 ops/s
# Warmup Iteration   8: 966406.931 ops/s
# Warmup Iteration   9: 962949.388 ops/s
# Warmup Iteration  10: 965225.976 ops/s
# Warmup Iteration  11: 963592.869 ops/s
# Warmup Iteration  12: 965147.572 ops/s
# Warmup Iteration  13: 963825.436 ops/s
# Warmup Iteration  14: 961525.895 ops/s
# Warmup Iteration  15: 961546.525 ops/s
# Warmup Iteration  16: 964400.542 ops/s
# Warmup Iteration  17: 964043.549 ops/s
# Warmup Iteration  18: 962827.379 ops/s
# Warmup Iteration  19: 962416.327 ops/s
# Warmup Iteration  20: 960204.700 ops/s
# Warmup Iteration  21: 962711.951 ops/s
# Warmup Iteration  22: 963592.191 ops/s
# Warmup Iteration  23: 963349.098 ops/s
# Warmup Iteration  24: 963272.917 ops/s
# Warmup Iteration  25: 963255.945 ops/s
# Warmup Iteration  26: 962539.713 ops/s
# Warmup Iteration  27: 961621.725 ops/s
# Warmup Iteration  28: 963933.281 ops/s
# Warmup Iteration  29: 963149.514 ops/s
# Warmup Iteration  30: 963577.963 ops/s
Iteration   1: 962022.166 ops/s
Iteration   2: 962842.847 ops/s
Iteration   3: 964367.754 ops/s
Iteration   4: 962451.002 ops/s
Iteration   5: 963177.125 ops/s
Iteration   6: 959213.750 ops/s
Iteration   7: 964233.512 ops/s
Iteration   8: 961562.680 ops/s
Iteration   9: 963021.942 ops/s
Iteration  10: 954500.367 ops/s
Iteration  11: 958036.336 ops/s
Iteration  12: 965625.835 ops/s
Iteration  13: 962208.554 ops/s
Iteration  14: 962630.531 ops/s
Iteration  15: 961934.512 ops/s
Iteration  16: 962099.017 ops/s
Iteration  17: 965647.203 ops/s
Iteration  18: 960982.089 ops/s
Iteration  19: 962953.874 ops/s
Iteration  20: 964480.114 ops/s
Iteration  21: 962167.584 ops/s
Iteration  22: 964691.481 ops/s
Iteration  23: 959180.036 ops/s
Iteration  24: 965730.882 ops/s
Iteration  25: 961562.440 ops/s
Iteration  26: 962899.510 ops/s
Iteration  27: 964759.021 ops/s
Iteration  28: 961562.769 ops/s
Iteration  29: 962322.791 ops/s
Iteration  30: 961800.509 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_rejectToTarget":
  962355.608 ±(99.9%) 1584.679 ops/s [Average]
  (min, avg, max) = (954500.367, 962355.608, 965730.882), stdev = 2371.873
  CI (99.9%): [960770.929, 963940.287] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_rejectToTarget  thrpt   30  962355.608 ± 1584.679  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 448632.940 ops/s
# Warmup Iteration   2: 876695.769 ops/s
# Warmup Iteration   3: 997401.816 ops/s
# Warmup Iteration   4: 1000586.953 ops/s
# Warmup Iteration   5: 971766.198 ops/s
# Warmup Iteration   6: 867485.747 ops/s
# Warmup Iteration   7: 1002506.081 ops/s
# Warmup Iteration   8: 1002464.605 ops/s
# Warmup Iteration   9: 1003134.468 ops/s
# Warmup Iteration  10: 1001065.187 ops/s
# Warmup Iteration  11: 999529.782 ops/s
# Warmup Iteration  12: 1000672.160 ops/s
# Warmup Iteration  13: 1000457.459 ops/s
# Warmup Iteration  14: 1002349.282 ops/s
# Warmup Iteration  15: 1002376.152 ops/s
# Warmup Iteration  16: 1000303.577 ops/s
# Warmup Iteration  17: 1002991.402 ops/s
# Warmup Iteration  18: 1002712.931 ops/s
# Warmup Iteration  19: 1002361.902 ops/s
# Warmup Iteration  20: 1003712.407 ops/s
# Warmup Iteration  21: 1001050.739 ops/s
# Warmup Iteration  22: 1003682.841 ops/s
# Warmup Iteration  23: 1001011.726 ops/s
# Warmup Iteration  24: 1003606.730 ops/s
# Warmup Iteration  25: 1000274.123 ops/s
# Warmup Iteration  26: 998474.639 ops/s
# Warmup Iteration  27: 998749.008 ops/s
# Warmup Iteration  28: 1002257.950 ops/s
# Warmup Iteration  29: 1002685.404 ops/s
# Warmup Iteration  30: 1002464.317 ops/s
Iteration   1: 1001051.196 ops/s
Iteration   2: 1004131.694 ops/s
Iteration   3: 1004341.949 ops/s
Iteration   4: 1002700.678 ops/s
Iteration   5: 1000627.952 ops/s
Iteration   6: 1004662.437 ops/s
Iteration   7: 1003002.466 ops/s
Iteration   8: 1004629.986 ops/s
Iteration   9: 1002921.829 ops/s
Iteration  10: 1001911.666 ops/s
Iteration  11: 1004910.442 ops/s
Iteration  12: 1001154.202 ops/s
Iteration  13: 999474.818 ops/s
Iteration  14: 1000531.113 ops/s
Iteration  15: 999498.477 ops/s
Iteration  16: 1004362.670 ops/s
Iteration  17: 1000632.521 ops/s
Iteration  18: 1002730.197 ops/s
Iteration  19: 1004220.979 ops/s
Iteration  20: 1001835.938 ops/s
Iteration  21: 1004183.132 ops/s
Iteration  22: 1002467.848 ops/s
Iteration  23: 1002091.138 ops/s
Iteration  24: 1004334.591 ops/s
Iteration  25: 1002927.228 ops/s
Iteration  26: 1002860.038 ops/s
Iteration  27: 1000509.268 ops/s
Iteration  28: 1002593.779 ops/s
Iteration  29: 1004291.361 ops/s
Iteration  30: 1002976.341 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_rejectWith":
  1002618.931 ±(99.9%) 1077.460 ops/s [Average]
  (min, avg, max) = (999474.818, 1002618.931, 1004910.442), stdev = 1612.692
  CI (99.9%): [1001541.471, 1003696.391] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_rejectWith  thrpt   30  1002618.931 ± 1077.460  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 566290.017 ops/s
# Warmup Iteration   2: 1174613.550 ops/s
# Warmup Iteration   3: 1298199.015 ops/s
# Warmup Iteration   4: 1303943.032 ops/s
# Warmup Iteration   5: 1087219.040 ops/s
# Warmup Iteration   6: 1305397.147 ops/s
# Warmup Iteration   7: 1303612.300 ops/s
# Warmup Iteration   8: 1299828.406 ops/s
# Warmup Iteration   9: 1305835.616 ops/s
# Warmup Iteration  10: 1303279.494 ops/s
# Warmup Iteration  11: 1302143.691 ops/s
# Warmup Iteration  12: 1302892.451 ops/s
# Warmup Iteration  13: 1304203.020 ops/s
# Warmup Iteration  14: 1304374.269 ops/s
# Warmup Iteration  15: 1304773.125 ops/s
# Warmup Iteration  16: 1303975.732 ops/s
# Warmup Iteration  17: 1301795.943 ops/s
# Warmup Iteration  18: 1304617.452 ops/s
# Warmup Iteration  19: 1306137.580 ops/s
# Warmup Iteration  20: 1306586.244 ops/s
# Warmup Iteration  21: 1306526.789 ops/s
# Warmup Iteration  22: 1306091.231 ops/s
# Warmup Iteration  23: 1305617.641 ops/s
# Warmup Iteration  24: 1301146.396 ops/s
# Warmup Iteration  25: 1304624.377 ops/s
# Warmup Iteration  26: 1307046.593 ops/s
# Warmup Iteration  27: 1306063.602 ops/s
# Warmup Iteration  28: 1305326.060 ops/s
# Warmup Iteration  29: 1304957.205 ops/s
# Warmup Iteration  30: 1306291.636 ops/s
Iteration   1: 1304012.223 ops/s
Iteration   2: 1306048.143 ops/s
Iteration   3: 1303827.999 ops/s
Iteration   4: 1304968.023 ops/s
Iteration   5: 1307163.635 ops/s
Iteration   6: 1306214.012 ops/s
Iteration   7: 1305360.851 ops/s
Iteration   8: 1309054.036 ops/s
Iteration   9: 1303630.126 ops/s
Iteration  10: 1305799.037 ops/s
Iteration  11: 1307732.027 ops/s
Iteration  12: 1305793.883 ops/s
Iteration  13: 1305712.860 ops/s
Iteration  14: 1304537.092 ops/s
Iteration  15: 1307473.501 ops/s
Iteration  16: 1302527.338 ops/s
Iteration  17: 1304789.733 ops/s
Iteration  18: 1307722.148 ops/s
Iteration  19: 1305710.888 ops/s
Iteration  20: 1304442.593 ops/s
Iteration  21: 1308058.999 ops/s
Iteration  22: 1305740.432 ops/s
Iteration  23: 1304232.397 ops/s
Iteration  24: 1306492.975 ops/s
Iteration  25: 1305743.626 ops/s
Iteration  26: 1305001.899 ops/s
Iteration  27: 1308913.778 ops/s
Iteration  28: 1305037.182 ops/s
Iteration  29: 1306757.903 ops/s
Iteration  30: 1308732.068 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_rejectWith_target":
  1305907.713 ±(99.9%) 1102.019 ops/s [Average]
  (min, avg, max) = (1302527.338, 1305907.713, 1309054.036), stdev = 1649.451
  CI (99.9%): [1304805.694, 1307009.733] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_rejectWith_target  thrpt   30  1305907.713 ± 1102.019  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 432828.207 ops/s
# Warmup Iteration   2: 567861.997 ops/s
# Warmup Iteration   3: 708984.157 ops/s
# Warmup Iteration   4: 706624.762 ops/s
# Warmup Iteration   5: 709482.858 ops/s
# Warmup Iteration   6: 708783.952 ops/s
# Warmup Iteration   7: 709229.743 ops/s
# Warmup Iteration   8: 627556.569 ops/s
# Warmup Iteration   9: 674697.116 ops/s
# Warmup Iteration  10: 709474.866 ops/s
# Warmup Iteration  11: 705178.061 ops/s
# Warmup Iteration  12: 705729.997 ops/s
# Warmup Iteration  13: 707061.549 ops/s
# Warmup Iteration  14: 710102.487 ops/s
# Warmup Iteration  15: 709872.880 ops/s
# Warmup Iteration  16: 705254.844 ops/s
# Warmup Iteration  17: 736265.691 ops/s
# Warmup Iteration  18: 735237.545 ops/s
# Warmup Iteration  19: 736674.340 ops/s
# Warmup Iteration  20: 736618.644 ops/s
# Warmup Iteration  21: 740566.258 ops/s
# Warmup Iteration  22: 740988.293 ops/s
# Warmup Iteration  23: 739530.149 ops/s
# Warmup Iteration  24: 739797.791 ops/s
# Warmup Iteration  25: 740315.893 ops/s
# Warmup Iteration  26: 740473.655 ops/s
# Warmup Iteration  27: 740314.863 ops/s
# Warmup Iteration  28: 739684.150 ops/s
# Warmup Iteration  29: 739977.682 ops/s
# Warmup Iteration  30: 740238.885 ops/s
Iteration   1: 741260.910 ops/s
Iteration   2: 741832.241 ops/s
Iteration   3: 739656.294 ops/s
Iteration   4: 740624.386 ops/s
Iteration   5: 741565.187 ops/s
Iteration   6: 741716.764 ops/s
Iteration   7: 740893.791 ops/s
Iteration   8: 741892.104 ops/s
Iteration   9: 742233.168 ops/s
Iteration  10: 741571.363 ops/s
Iteration  11: 741488.266 ops/s
Iteration  12: 740706.147 ops/s
Iteration  13: 741430.179 ops/s
Iteration  14: 740976.488 ops/s
Iteration  15: 739087.291 ops/s
Iteration  16: 741085.791 ops/s
Iteration  17: 740994.754 ops/s
Iteration  18: 741818.500 ops/s
Iteration  19: 742097.592 ops/s
Iteration  20: 740950.683 ops/s
Iteration  21: 741672.782 ops/s
Iteration  22: 742283.635 ops/s
Iteration  23: 741431.855 ops/s
Iteration  24: 741597.885 ops/s
Iteration  25: 740855.135 ops/s
Iteration  26: 741738.026 ops/s
Iteration  27: 743151.087 ops/s
Iteration  28: 740792.927 ops/s
Iteration  29: 742704.885 ops/s
Iteration  30: 741295.209 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_remove":
  741380.178 ±(99.9%) 537.733 ops/s [Average]
  (min, avg, max) = (739087.291, 741380.178, 743151.087), stdev = 804.853
  CI (99.9%): [740842.445, 741917.910] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_remove  thrpt   30  741380.178 ± 537.733  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 489218.616 ops/s
# Warmup Iteration   2: 598554.246 ops/s
# Warmup Iteration   3: 772179.998 ops/s
# Warmup Iteration   4: 767004.830 ops/s
# Warmup Iteration   5: 763964.581 ops/s
# Warmup Iteration   6: 767557.432 ops/s
# Warmup Iteration   7: 767006.613 ops/s
# Warmup Iteration   8: 766656.778 ops/s
# Warmup Iteration   9: 732080.476 ops/s
# Warmup Iteration  10: 676334.272 ops/s
# Warmup Iteration  11: 764442.805 ops/s
# Warmup Iteration  12: 767461.270 ops/s
# Warmup Iteration  13: 766304.374 ops/s
# Warmup Iteration  14: 766739.721 ops/s
# Warmup Iteration  15: 765257.383 ops/s
# Warmup Iteration  16: 766295.427 ops/s
# Warmup Iteration  17: 804658.881 ops/s
# Warmup Iteration  18: 802760.147 ops/s
# Warmup Iteration  19: 803700.809 ops/s
# Warmup Iteration  20: 805076.380 ops/s
# Warmup Iteration  21: 805867.983 ops/s
# Warmup Iteration  22: 803434.078 ops/s
# Warmup Iteration  23: 803159.914 ops/s
# Warmup Iteration  24: 805680.287 ops/s
# Warmup Iteration  25: 802722.331 ops/s
# Warmup Iteration  26: 805965.015 ops/s
# Warmup Iteration  27: 804254.313 ops/s
# Warmup Iteration  28: 803901.784 ops/s
# Warmup Iteration  29: 807686.447 ops/s
# Warmup Iteration  30: 802218.723 ops/s
Iteration   1: 802477.211 ops/s
Iteration   2: 802946.560 ops/s
Iteration   3: 804854.571 ops/s
Iteration   4: 804996.180 ops/s
Iteration   5: 804121.844 ops/s
Iteration   6: 807836.702 ops/s
Iteration   7: 805603.660 ops/s
Iteration   8: 802280.102 ops/s
Iteration   9: 805459.780 ops/s
Iteration  10: 805008.482 ops/s
Iteration  11: 805236.589 ops/s
Iteration  12: 803816.300 ops/s
Iteration  13: 805017.089 ops/s
Iteration  14: 800836.254 ops/s
Iteration  15: 801036.787 ops/s
Iteration  16: 806108.011 ops/s
Iteration  17: 804685.693 ops/s
Iteration  18: 804851.024 ops/s
Iteration  19: 803616.750 ops/s
Iteration  20: 801891.097 ops/s
Iteration  21: 801149.188 ops/s
Iteration  22: 801679.181 ops/s
Iteration  23: 801810.378 ops/s
Iteration  24: 801907.330 ops/s
Iteration  25: 800772.973 ops/s
Iteration  26: 805223.319 ops/s
Iteration  27: 805515.595 ops/s
Iteration  28: 804239.673 ops/s
Iteration  29: 807228.108 ops/s
Iteration  30: 804991.123 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_removeAll":
  803906.585 ±(99.9%) 1290.978 ops/s [Average]
  (min, avg, max) = (800772.973, 803906.585, 807836.702), stdev = 1932.275
  CI (99.9%): [802615.607, 805197.563] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_removeAll  thrpt   30  803906.585 ± 1290.978  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 423060.893 ops/s
# Warmup Iteration   2: 555807.066 ops/s
# Warmup Iteration   3: 697640.036 ops/s
# Warmup Iteration   4: 693405.627 ops/s
# Warmup Iteration   5: 697313.278 ops/s
# Warmup Iteration   6: 695722.817 ops/s
# Warmup Iteration   7: 696660.460 ops/s
# Warmup Iteration   8: 639198.074 ops/s
# Warmup Iteration   9: 642513.239 ops/s
# Warmup Iteration  10: 696928.675 ops/s
# Warmup Iteration  11: 692866.032 ops/s
# Warmup Iteration  12: 697585.375 ops/s
# Warmup Iteration  13: 698015.812 ops/s
# Warmup Iteration  14: 696626.783 ops/s
# Warmup Iteration  15: 697361.031 ops/s
# Warmup Iteration  16: 697155.306 ops/s
# Warmup Iteration  17: 727668.086 ops/s
# Warmup Iteration  18: 725039.439 ops/s
# Warmup Iteration  19: 728224.247 ops/s
# Warmup Iteration  20: 727877.091 ops/s
# Warmup Iteration  21: 726944.651 ops/s
# Warmup Iteration  22: 726243.223 ops/s
# Warmup Iteration  23: 725942.369 ops/s
# Warmup Iteration  24: 726380.688 ops/s
# Warmup Iteration  25: 724330.651 ops/s
# Warmup Iteration  26: 726455.722 ops/s
# Warmup Iteration  27: 727693.991 ops/s
# Warmup Iteration  28: 726249.700 ops/s
# Warmup Iteration  29: 725696.044 ops/s
# Warmup Iteration  30: 726302.633 ops/s
Iteration   1: 725308.971 ops/s
Iteration   2: 720081.704 ops/s
Iteration   3: 724180.703 ops/s
Iteration   4: 724989.622 ops/s
Iteration   5: 723757.870 ops/s
Iteration   6: 725992.915 ops/s
Iteration   7: 725865.878 ops/s
Iteration   8: 726106.428 ops/s
Iteration   9: 727805.015 ops/s
Iteration  10: 726607.648 ops/s
Iteration  11: 727992.271 ops/s
Iteration  12: 727805.039 ops/s
Iteration  13: 725939.395 ops/s
Iteration  14: 725440.588 ops/s
Iteration  15: 727300.339 ops/s
Iteration  16: 726815.655 ops/s
Iteration  17: 727689.765 ops/s
Iteration  18: 726507.927 ops/s
Iteration  19: 727372.015 ops/s
Iteration  20: 726291.025 ops/s
Iteration  21: 725799.114 ops/s
Iteration  22: 727343.129 ops/s
Iteration  23: 726942.248 ops/s
Iteration  24: 726607.136 ops/s
Iteration  25: 727284.062 ops/s
Iteration  26: 726577.985 ops/s
Iteration  27: 726780.720 ops/s
Iteration  28: 726420.771 ops/s
Iteration  29: 726913.936 ops/s
Iteration  30: 726400.387 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_retainAll":
  726230.675 ±(99.9%) 1028.833 ops/s [Average]
  (min, avg, max) = (720081.704, 726230.675, 727992.271), stdev = 1539.909
  CI (99.9%): [725201.842, 727259.509] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_retainAll  thrpt   30  726230.675 ± 1028.833  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 443061.399 ops/s
# Warmup Iteration   2: 861328.891 ops/s
# Warmup Iteration   3: 981015.476 ops/s
# Warmup Iteration   4: 983120.154 ops/s
# Warmup Iteration   5: 953407.509 ops/s
# Warmup Iteration   6: 855689.436 ops/s
# Warmup Iteration   7: 985426.358 ops/s
# Warmup Iteration   8: 983388.548 ops/s
# Warmup Iteration   9: 987441.437 ops/s
# Warmup Iteration  10: 987179.248 ops/s
# Warmup Iteration  11: 986126.086 ops/s
# Warmup Iteration  12: 984571.072 ops/s
# Warmup Iteration  13: 987106.886 ops/s
# Warmup Iteration  14: 987136.900 ops/s
# Warmup Iteration  15: 984731.481 ops/s
# Warmup Iteration  16: 986924.526 ops/s
# Warmup Iteration  17: 986001.314 ops/s
# Warmup Iteration  18: 986317.628 ops/s
# Warmup Iteration  19: 985496.701 ops/s
# Warmup Iteration  20: 983568.426 ops/s
# Warmup Iteration  21: 983672.837 ops/s
# Warmup Iteration  22: 982466.156 ops/s
# Warmup Iteration  23: 984371.685 ops/s
# Warmup Iteration  24: 985881.450 ops/s
# Warmup Iteration  25: 985437.664 ops/s
# Warmup Iteration  26: 980970.552 ops/s
# Warmup Iteration  27: 984898.154 ops/s
# Warmup Iteration  28: 984161.631 ops/s
# Warmup Iteration  29: 985868.164 ops/s
# Warmup Iteration  30: 983920.905 ops/s
Iteration   1: 983367.295 ops/s
Iteration   2: 984420.385 ops/s
Iteration   3: 986877.759 ops/s
Iteration   4: 984958.816 ops/s
Iteration   5: 986479.063 ops/s
Iteration   6: 987514.004 ops/s
Iteration   7: 986495.899 ops/s
Iteration   8: 988689.815 ops/s
Iteration   9: 987178.218 ops/s
Iteration  10: 983044.509 ops/s
Iteration  11: 988075.373 ops/s
Iteration  12: 985244.604 ops/s
Iteration  13: 986308.167 ops/s
Iteration  14: 986324.975 ops/s
Iteration  15: 985849.326 ops/s
Iteration  16: 985943.854 ops/s
Iteration  17: 978786.174 ops/s
Iteration  18: 984390.726 ops/s
Iteration  19: 984929.674 ops/s
Iteration  20: 984586.927 ops/s
Iteration  21: 986593.758 ops/s
Iteration  22: 981798.147 ops/s
Iteration  23: 984295.149 ops/s
Iteration  24: 979700.727 ops/s
Iteration  25: 985476.500 ops/s
Iteration  26: 986340.950 ops/s
Iteration  27: 988204.947 ops/s
Iteration  28: 985349.620 ops/s
Iteration  29: 987142.816 ops/s
Iteration  30: 983650.728 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_select":
  985267.297 ±(99.9%) 1525.916 ops/s [Average]
  (min, avg, max) = (978786.174, 985267.297, 988689.815), stdev = 2283.920
  CI (99.9%): [983741.381, 986793.213] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_select  thrpt   30  985267.297 ± 1525.916  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectByOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectByOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 415033.822 ops/s
# Warmup Iteration   2: 756456.390 ops/s
# Warmup Iteration   3: 860920.001 ops/s
# Warmup Iteration   4: 863471.130 ops/s
# Warmup Iteration   5: 861721.515 ops/s
# Warmup Iteration   6: 711854.598 ops/s
# Warmup Iteration   7: 861608.741 ops/s
# Warmup Iteration   8: 864849.222 ops/s
# Warmup Iteration   9: 865693.884 ops/s
# Warmup Iteration  10: 858672.971 ops/s
# Warmup Iteration  11: 865836.964 ops/s
# Warmup Iteration  12: 864390.852 ops/s
# Warmup Iteration  13: 865734.854 ops/s
# Warmup Iteration  14: 864402.437 ops/s
# Warmup Iteration  15: 866182.632 ops/s
# Warmup Iteration  16: 865527.023 ops/s
# Warmup Iteration  17: 860806.867 ops/s
# Warmup Iteration  18: 862464.161 ops/s
# Warmup Iteration  19: 862569.912 ops/s
# Warmup Iteration  20: 862396.372 ops/s
# Warmup Iteration  21: 862257.568 ops/s
# Warmup Iteration  22: 863869.449 ops/s
# Warmup Iteration  23: 859187.193 ops/s
# Warmup Iteration  24: 861051.353 ops/s
# Warmup Iteration  25: 861284.215 ops/s
# Warmup Iteration  26: 862566.583 ops/s
# Warmup Iteration  27: 861216.206 ops/s
# Warmup Iteration  28: 863091.225 ops/s
# Warmup Iteration  29: 864121.199 ops/s
# Warmup Iteration  30: 862593.881 ops/s
Iteration   1: 862552.403 ops/s
Iteration   2: 861686.821 ops/s
Iteration   3: 863413.968 ops/s
Iteration   4: 863424.954 ops/s
Iteration   5: 863412.755 ops/s
Iteration   6: 861597.313 ops/s
Iteration   7: 863899.324 ops/s
Iteration   8: 865540.985 ops/s
Iteration   9: 863509.886 ops/s
Iteration  10: 864289.308 ops/s
Iteration  11: 863559.653 ops/s
Iteration  12: 861734.010 ops/s
Iteration  13: 864961.803 ops/s
Iteration  14: 862691.014 ops/s
Iteration  15: 863246.686 ops/s
Iteration  16: 862288.852 ops/s
Iteration  17: 862872.041 ops/s
Iteration  18: 864906.051 ops/s
Iteration  19: 862852.145 ops/s
Iteration  20: 863893.851 ops/s
Iteration  21: 862855.383 ops/s
Iteration  22: 862049.195 ops/s
Iteration  23: 862208.708 ops/s
Iteration  24: 861955.528 ops/s
Iteration  25: 864515.702 ops/s
Iteration  26: 859979.807 ops/s
Iteration  27: 864971.477 ops/s
Iteration  28: 862129.381 ops/s
Iteration  29: 862886.582 ops/s
Iteration  30: 860183.278 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectByOccurrences":
  863002.296 ±(99.9%) 887.319 ops/s [Average]
  (min, avg, max) = (859979.807, 863002.296, 865540.985), stdev = 1328.098
  CI (99.9%): [862114.976, 863889.615] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectByOccurrences  thrpt   30  863002.296 ± 887.319  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectDuplicates$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectDuplicates

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 767643.403 ops/s
# Warmup Iteration   2: 1523578.135 ops/s
# Warmup Iteration   3: 1726191.605 ops/s
# Warmup Iteration   4: 1737647.779 ops/s
# Warmup Iteration   5: 1479709.980 ops/s
# Warmup Iteration   6: 1674485.745 ops/s
# Warmup Iteration   7: 1728755.521 ops/s
# Warmup Iteration   8: 1728474.485 ops/s
# Warmup Iteration   9: 1727616.567 ops/s
# Warmup Iteration  10: 1733932.968 ops/s
# Warmup Iteration  11: 1733003.015 ops/s
# Warmup Iteration  12: 1733460.041 ops/s
# Warmup Iteration  13: 1732414.373 ops/s
# Warmup Iteration  14: 1732530.753 ops/s
# Warmup Iteration  15: 1729291.059 ops/s
# Warmup Iteration  16: 1730949.088 ops/s
# Warmup Iteration  17: 1726497.488 ops/s
# Warmup Iteration  18: 1726629.908 ops/s
# Warmup Iteration  19: 1730462.284 ops/s
# Warmup Iteration  20: 1728315.494 ops/s
# Warmup Iteration  21: 1732282.659 ops/s
# Warmup Iteration  22: 1732185.165 ops/s
# Warmup Iteration  23: 1732182.936 ops/s
# Warmup Iteration  24: 1732580.003 ops/s
# Warmup Iteration  25: 1729341.010 ops/s
# Warmup Iteration  26: 1731696.464 ops/s
# Warmup Iteration  27: 1732471.071 ops/s
# Warmup Iteration  28: 1723464.106 ops/s
# Warmup Iteration  29: 1727711.773 ops/s
# Warmup Iteration  30: 1726793.188 ops/s
Iteration   1: 1728808.388 ops/s
Iteration   2: 1730415.657 ops/s
Iteration   3: 1729467.512 ops/s
Iteration   4: 1734152.364 ops/s
Iteration   5: 1730730.240 ops/s
Iteration   6: 1731458.762 ops/s
Iteration   7: 1735070.345 ops/s
Iteration   8: 1733794.950 ops/s
Iteration   9: 1734513.847 ops/s
Iteration  10: 1731232.008 ops/s
Iteration  11: 1730027.158 ops/s
Iteration  12: 1732846.434 ops/s
Iteration  13: 1729229.387 ops/s
Iteration  14: 1732502.944 ops/s
Iteration  15: 1733059.861 ops/s
Iteration  16: 1730773.481 ops/s
Iteration  17: 1727853.945 ops/s
Iteration  18: 1735350.771 ops/s
Iteration  19: 1730649.799 ops/s
Iteration  20: 1732702.982 ops/s
Iteration  21: 1736074.183 ops/s
Iteration  22: 1734174.865 ops/s
Iteration  23: 1734484.303 ops/s
Iteration  24: 1734140.448 ops/s
Iteration  25: 1732589.785 ops/s
Iteration  26: 1734308.524 ops/s
Iteration  27: 1722885.441 ops/s
Iteration  28: 1726399.424 ops/s
Iteration  29: 1725332.095 ops/s
Iteration  30: 1726128.015 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectDuplicates":
  1731371.931 ±(99.9%) 2185.857 ops/s [Average]
  (min, avg, max) = (1722885.441, 1731371.931, 1736074.183), stdev = 3271.688
  CI (99.9%): [1729186.074, 1733557.787] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectDuplicates  thrpt   30  1731371.931 ± 2185.857  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 564760.762 ops/s
# Warmup Iteration   2: 1108689.779 ops/s
# Warmup Iteration   3: 1207515.293 ops/s
# Warmup Iteration   4: 1216529.212 ops/s
# Warmup Iteration   5: 1012216.238 ops/s
# Warmup Iteration   6: 1215868.383 ops/s
# Warmup Iteration   7: 1218351.391 ops/s
# Warmup Iteration   8: 1215502.572 ops/s
# Warmup Iteration   9: 1214089.251 ops/s
# Warmup Iteration  10: 1215070.645 ops/s
# Warmup Iteration  11: 1215203.650 ops/s
# Warmup Iteration  12: 1218168.402 ops/s
# Warmup Iteration  13: 1217400.465 ops/s
# Warmup Iteration  14: 1217643.515 ops/s
# Warmup Iteration  15: 1209282.699 ops/s
# Warmup Iteration  16: 1204700.197 ops/s
# Warmup Iteration  17: 1215862.755 ops/s
# Warmup Iteration  18: 1215912.782 ops/s
# Warmup Iteration  19: 1216436.404 ops/s
# Warmup Iteration  20: 1215017.981 ops/s
# Warmup Iteration  21: 1215208.623 ops/s
# Warmup Iteration  22: 1215399.257 ops/s
# Warmup Iteration  23: 1216716.796 ops/s
# Warmup Iteration  24: 1216705.094 ops/s
# Warmup Iteration  25: 1217133.995 ops/s
# Warmup Iteration  26: 1213699.482 ops/s
# Warmup Iteration  27: 1215499.492 ops/s
# Warmup Iteration  28: 1218764.192 ops/s
# Warmup Iteration  29: 1217549.557 ops/s
# Warmup Iteration  30: 1218030.162 ops/s
Iteration   1: 1210194.277 ops/s
Iteration   2: 1218290.140 ops/s
Iteration   3: 1218270.052 ops/s
Iteration   4: 1216575.268 ops/s
Iteration   5: 1220778.073 ops/s
Iteration   6: 1218544.240 ops/s
Iteration   7: 1216854.677 ops/s
Iteration   8: 1218395.650 ops/s
Iteration   9: 1216279.923 ops/s
Iteration  10: 1216242.921 ops/s
Iteration  11: 1218850.940 ops/s
Iteration  12: 1215010.147 ops/s
Iteration  13: 1215476.109 ops/s
Iteration  14: 1214342.932 ops/s
Iteration  15: 1214054.885 ops/s
Iteration  16: 1220238.854 ops/s
Iteration  17: 1216615.697 ops/s
Iteration  18: 1216238.532 ops/s
Iteration  19: 1218886.109 ops/s
Iteration  20: 1215663.682 ops/s
Iteration  21: 1211637.413 ops/s
Iteration  22: 1218277.632 ops/s
Iteration  23: 1216607.359 ops/s
Iteration  24: 1215440.811 ops/s
Iteration  25: 1217060.069 ops/s
Iteration  26: 1216859.109 ops/s
Iteration  27: 1216111.120 ops/s
Iteration  28: 1219888.750 ops/s
Iteration  29: 1216285.172 ops/s
Iteration  30: 1218305.573 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectInstancesOf":
  1216742.537 ±(99.9%) 1538.899 ops/s [Average]
  (min, avg, max) = (1210194.277, 1216742.537, 1220778.073), stdev = 2303.352
  CI (99.9%): [1215203.638, 1218281.436] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  1216742.537 ± 1538.899  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1001298.245 ops/s
# Warmup Iteration   2: 1975524.113 ops/s
# Warmup Iteration   3: 2227079.910 ops/s
# Warmup Iteration   4: 2229003.189 ops/s
# Warmup Iteration   5: 1949635.848 ops/s
# Warmup Iteration   6: 2128085.855 ops/s
# Warmup Iteration   7: 2238694.585 ops/s
# Warmup Iteration   8: 2242422.746 ops/s
# Warmup Iteration   9: 2234200.512 ops/s
# Warmup Iteration  10: 2241566.809 ops/s
# Warmup Iteration  11: 2242124.481 ops/s
# Warmup Iteration  12: 2238025.876 ops/s
# Warmup Iteration  13: 2238763.193 ops/s
# Warmup Iteration  14: 2241418.157 ops/s
# Warmup Iteration  15: 2242295.941 ops/s
# Warmup Iteration  16: 2239023.832 ops/s
# Warmup Iteration  17: 2237827.252 ops/s
# Warmup Iteration  18: 2241163.623 ops/s
# Warmup Iteration  19: 2242970.808 ops/s
# Warmup Iteration  20: 2240070.263 ops/s
# Warmup Iteration  21: 2236105.555 ops/s
# Warmup Iteration  22: 2241371.919 ops/s
# Warmup Iteration  23: 2235286.677 ops/s
# Warmup Iteration  24: 2236826.760 ops/s
# Warmup Iteration  25: 2236609.055 ops/s
# Warmup Iteration  26: 2228912.248 ops/s
# Warmup Iteration  27: 2241427.731 ops/s
# Warmup Iteration  28: 2241796.714 ops/s
# Warmup Iteration  29: 2235865.390 ops/s
# Warmup Iteration  30: 2244583.684 ops/s
Iteration   1: 2241423.687 ops/s
Iteration   2: 2236812.641 ops/s
Iteration   3: 2244534.178 ops/s
Iteration   4: 2237249.771 ops/s
Iteration   5: 2238096.374 ops/s
Iteration   6: 2245629.547 ops/s
Iteration   7: 2239408.944 ops/s
Iteration   8: 2245259.777 ops/s
Iteration   9: 2241865.866 ops/s
Iteration  10: 2236793.813 ops/s
Iteration  11: 2245358.601 ops/s
Iteration  12: 2240839.916 ops/s
Iteration  13: 2240833.995 ops/s
Iteration  14: 2232510.576 ops/s
Iteration  15: 2235489.466 ops/s
Iteration  16: 2239666.917 ops/s
Iteration  17: 2238419.856 ops/s
Iteration  18: 2238366.434 ops/s
Iteration  19: 2238034.110 ops/s
Iteration  20: 2239510.822 ops/s
Iteration  21: 2241618.937 ops/s
Iteration  22: 2243395.877 ops/s
Iteration  23: 2243015.982 ops/s
Iteration  24: 2238389.324 ops/s
Iteration  25: 2242096.579 ops/s
Iteration  26: 2241010.636 ops/s
Iteration  27: 2244401.886 ops/s
Iteration  28: 2237437.484 ops/s
Iteration  29: 2233753.098 ops/s
Iteration  30: 2229892.280 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectToTarget":
  2239703.912 ±(99.9%) 2569.969 ops/s [Average]
  (min, avg, max) = (2229892.280, 2239703.912, 2245629.547), stdev = 3846.609
  CI (99.9%): [2237133.944, 2242273.881] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectToTarget  thrpt   30  2239703.912 ± 2569.969  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectUnique$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectUnique

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 343190.096 ops/s
# Warmup Iteration   2: 572539.227 ops/s
# Warmup Iteration   3: 678242.872 ops/s
# Warmup Iteration   4: 683025.956 ops/s
# Warmup Iteration   5: 684322.115 ops/s
# Warmup Iteration   6: 622094.782 ops/s
# Warmup Iteration   7: 631153.051 ops/s
# Warmup Iteration   8: 683403.692 ops/s
# Warmup Iteration   9: 681673.593 ops/s
# Warmup Iteration  10: 684232.403 ops/s
# Warmup Iteration  11: 683510.477 ops/s
# Warmup Iteration  12: 684174.825 ops/s
# Warmup Iteration  13: 683552.032 ops/s
# Warmup Iteration  14: 684044.670 ops/s
# Warmup Iteration  15: 683418.985 ops/s
# Warmup Iteration  16: 683239.828 ops/s
# Warmup Iteration  17: 683184.047 ops/s
# Warmup Iteration  18: 683112.323 ops/s
# Warmup Iteration  19: 683502.237 ops/s
# Warmup Iteration  20: 683827.961 ops/s
# Warmup Iteration  21: 683758.569 ops/s
# Warmup Iteration  22: 683019.888 ops/s
# Warmup Iteration  23: 683339.579 ops/s
# Warmup Iteration  24: 682891.328 ops/s
# Warmup Iteration  25: 680328.690 ops/s
# Warmup Iteration  26: 684052.067 ops/s
# Warmup Iteration  27: 683588.280 ops/s
# Warmup Iteration  28: 683470.085 ops/s
# Warmup Iteration  29: 682732.673 ops/s
# Warmup Iteration  30: 683359.820 ops/s
Iteration   1: 685312.920 ops/s
Iteration   2: 683303.535 ops/s
Iteration   3: 682985.492 ops/s
Iteration   4: 683961.104 ops/s
Iteration   5: 684726.067 ops/s
Iteration   6: 683094.922 ops/s
Iteration   7: 682886.938 ops/s
Iteration   8: 683105.909 ops/s
Iteration   9: 683765.895 ops/s
Iteration  10: 682633.092 ops/s
Iteration  11: 684118.536 ops/s
Iteration  12: 683483.886 ops/s
Iteration  13: 683912.035 ops/s
Iteration  14: 682982.661 ops/s
Iteration  15: 684690.718 ops/s
Iteration  16: 684019.923 ops/s
Iteration  17: 684682.475 ops/s
Iteration  18: 684048.204 ops/s
Iteration  19: 684926.407 ops/s
Iteration  20: 681226.136 ops/s
Iteration  21: 679580.174 ops/s
Iteration  22: 678467.194 ops/s
Iteration  23: 678923.375 ops/s
Iteration  24: 681692.014 ops/s
Iteration  25: 681675.920 ops/s
Iteration  26: 679447.578 ops/s
Iteration  27: 680499.346 ops/s
Iteration  28: 681725.008 ops/s
Iteration  29: 685951.223 ops/s
Iteration  30: 683921.408 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectUnique":
  682858.337 ±(99.9%) 1294.581 ops/s [Average]
  (min, avg, max) = (678467.194, 682858.337, 685951.223), stdev = 1937.667
  CI (99.9%): [681563.756, 684152.917] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectUnique  thrpt   30  682858.337 ± 1294.581  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 449429.769 ops/s
# Warmup Iteration   2: 870392.518 ops/s
# Warmup Iteration   3: 992042.514 ops/s
# Warmup Iteration   4: 994154.087 ops/s
# Warmup Iteration   5: 977386.868 ops/s
# Warmup Iteration   6: 851318.447 ops/s
# Warmup Iteration   7: 988990.697 ops/s
# Warmup Iteration   8: 987578.687 ops/s
# Warmup Iteration   9: 989974.206 ops/s
# Warmup Iteration  10: 993770.253 ops/s
# Warmup Iteration  11: 994130.874 ops/s
# Warmup Iteration  12: 994099.023 ops/s
# Warmup Iteration  13: 995104.912 ops/s
# Warmup Iteration  14: 995207.649 ops/s
# Warmup Iteration  15: 996006.272 ops/s
# Warmup Iteration  16: 994720.186 ops/s
# Warmup Iteration  17: 995610.837 ops/s
# Warmup Iteration  18: 997547.155 ops/s
# Warmup Iteration  19: 997412.054 ops/s
# Warmup Iteration  20: 996960.749 ops/s
# Warmup Iteration  21: 997374.442 ops/s
# Warmup Iteration  22: 996601.073 ops/s
# Warmup Iteration  23: 995937.293 ops/s
# Warmup Iteration  24: 998274.651 ops/s
# Warmup Iteration  25: 997797.205 ops/s
# Warmup Iteration  26: 995715.427 ops/s
# Warmup Iteration  27: 998289.484 ops/s
# Warmup Iteration  28: 997865.396 ops/s
# Warmup Iteration  29: 997931.073 ops/s
# Warmup Iteration  30: 997292.870 ops/s
Iteration   1: 993742.104 ops/s
Iteration   2: 995480.165 ops/s
Iteration   3: 994820.418 ops/s
Iteration   4: 997494.174 ops/s
Iteration   5: 999486.372 ops/s
Iteration   6: 997327.312 ops/s
Iteration   7: 997391.513 ops/s
Iteration   8: 998496.567 ops/s
Iteration   9: 995807.642 ops/s
Iteration  10: 998247.688 ops/s
Iteration  11: 996648.975 ops/s
Iteration  12: 995864.364 ops/s
Iteration  13: 996929.261 ops/s
Iteration  14: 996114.744 ops/s
Iteration  15: 998251.362 ops/s
Iteration  16: 995912.111 ops/s
Iteration  17: 998215.688 ops/s
Iteration  18: 998093.770 ops/s
Iteration  19: 996666.832 ops/s
Iteration  20: 997373.463 ops/s
Iteration  21: 996704.992 ops/s
Iteration  22: 995496.252 ops/s
Iteration  23: 998649.544 ops/s
Iteration  24: 993204.241 ops/s
Iteration  25: 992015.894 ops/s
Iteration  26: 997925.171 ops/s
Iteration  27: 996139.206 ops/s
Iteration  28: 998391.976 ops/s
Iteration  29: 996574.847 ops/s
Iteration  30: 996795.676 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectWith":
  996675.411 ±(99.9%) 1125.989 ops/s [Average]
  (min, avg, max) = (992015.894, 996675.411, 999486.372), stdev = 1685.327
  CI (99.9%): [995549.422, 997801.400] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectWith  thrpt   30  996675.411 ± 1125.989  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 584336.245 ops/s
# Warmup Iteration   2: 1193422.517 ops/s
# Warmup Iteration   3: 1319142.190 ops/s
# Warmup Iteration   4: 1328143.221 ops/s
# Warmup Iteration   5: 1109607.027 ops/s
# Warmup Iteration   6: 1331225.179 ops/s
# Warmup Iteration   7: 1329946.761 ops/s
# Warmup Iteration   8: 1329897.173 ops/s
# Warmup Iteration   9: 1330551.900 ops/s
# Warmup Iteration  10: 1329572.365 ops/s
# Warmup Iteration  11: 1330428.084 ops/s
# Warmup Iteration  12: 1330880.801 ops/s
# Warmup Iteration  13: 1330753.865 ops/s
# Warmup Iteration  14: 1330559.783 ops/s
# Warmup Iteration  15: 1331115.886 ops/s
# Warmup Iteration  16: 1328240.260 ops/s
# Warmup Iteration  17: 1324303.593 ops/s
# Warmup Iteration  18: 1324205.377 ops/s
# Warmup Iteration  19: 1327768.395 ops/s
# Warmup Iteration  20: 1328921.733 ops/s
# Warmup Iteration  21: 1318377.793 ops/s
# Warmup Iteration  22: 1326829.092 ops/s
# Warmup Iteration  23: 1327599.861 ops/s
# Warmup Iteration  24: 1330037.594 ops/s
# Warmup Iteration  25: 1326818.220 ops/s
# Warmup Iteration  26: 1329368.549 ops/s
# Warmup Iteration  27: 1327412.366 ops/s
# Warmup Iteration  28: 1329010.753 ops/s
# Warmup Iteration  29: 1331060.179 ops/s
# Warmup Iteration  30: 1325237.576 ops/s
Iteration   1: 1327198.737 ops/s
Iteration   2: 1326998.664 ops/s
Iteration   3: 1325123.197 ops/s
Iteration   4: 1326322.325 ops/s
Iteration   5: 1326654.743 ops/s
Iteration   6: 1327718.711 ops/s
Iteration   7: 1328695.321 ops/s
Iteration   8: 1324963.659 ops/s
Iteration   9: 1323761.583 ops/s
Iteration  10: 1327720.322 ops/s
Iteration  11: 1327692.524 ops/s
Iteration  12: 1329133.096 ops/s
Iteration  13: 1331063.302 ops/s
Iteration  14: 1322724.082 ops/s
Iteration  15: 1322736.028 ops/s
Iteration  16: 1329910.422 ops/s
Iteration  17: 1322250.538 ops/s
Iteration  18: 1327930.558 ops/s
Iteration  19: 1331346.016 ops/s
Iteration  20: 1328936.817 ops/s
Iteration  21: 1326878.947 ops/s
Iteration  22: 1329242.435 ops/s
Iteration  23: 1328442.399 ops/s
Iteration  24: 1325707.048 ops/s
Iteration  25: 1329795.628 ops/s
Iteration  26: 1330630.654 ops/s
Iteration  27: 1328006.235 ops/s
Iteration  28: 1327193.159 ops/s
Iteration  29: 1330178.555 ops/s
Iteration  30: 1328836.999 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectWith_target":
  1327459.757 ±(99.9%) 1632.773 ops/s [Average]
  (min, avg, max) = (1322250.538, 1327459.757, 1331346.016), stdev = 2443.858
  CI (99.9%): [1325826.984, 1329092.530] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_selectWith_target  thrpt   30  1327459.757 ± 1632.773  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 784982.239 ops/s
# Warmup Iteration   2: 1405062.208 ops/s
# Warmup Iteration   3: 1566312.335 ops/s
# Warmup Iteration   4: 1571496.547 ops/s
# Warmup Iteration   5: 1570700.777 ops/s
# Warmup Iteration   6: 1312219.170 ops/s
# Warmup Iteration   7: 1573391.518 ops/s
# Warmup Iteration   8: 1569361.065 ops/s
# Warmup Iteration   9: 1575515.253 ops/s
# Warmup Iteration  10: 1575716.059 ops/s
# Warmup Iteration  11: 1573953.006 ops/s
# Warmup Iteration  12: 1572006.854 ops/s
# Warmup Iteration  13: 1564446.552 ops/s
# Warmup Iteration  14: 1571372.834 ops/s
# Warmup Iteration  15: 1573945.932 ops/s
# Warmup Iteration  16: 1573906.480 ops/s
# Warmup Iteration  17: 1573429.019 ops/s
# Warmup Iteration  18: 1570527.801 ops/s
# Warmup Iteration  19: 1562115.415 ops/s
# Warmup Iteration  20: 1560744.611 ops/s
# Warmup Iteration  21: 1564502.897 ops/s
# Warmup Iteration  22: 1570820.036 ops/s
# Warmup Iteration  23: 1573872.738 ops/s
# Warmup Iteration  24: 1567510.897 ops/s
# Warmup Iteration  25: 1572380.168 ops/s
# Warmup Iteration  26: 1573691.624 ops/s
# Warmup Iteration  27: 1575054.361 ops/s
# Warmup Iteration  28: 1574695.757 ops/s
# Warmup Iteration  29: 1572103.015 ops/s
# Warmup Iteration  30: 1573249.219 ops/s
Iteration   1: 1575850.018 ops/s
Iteration   2: 1572156.424 ops/s
Iteration   3: 1576793.637 ops/s
Iteration   4: 1575318.831 ops/s
Iteration   5: 1566160.820 ops/s
Iteration   6: 1574942.558 ops/s
Iteration   7: 1572482.779 ops/s
Iteration   8: 1571243.029 ops/s
Iteration   9: 1564587.755 ops/s
Iteration  10: 1574132.719 ops/s
Iteration  11: 1572562.798 ops/s
Iteration  12: 1573567.919 ops/s
Iteration  13: 1572548.170 ops/s
Iteration  14: 1573799.980 ops/s
Iteration  15: 1575523.692 ops/s
Iteration  16: 1572079.121 ops/s
Iteration  17: 1570231.793 ops/s
Iteration  18: 1575446.244 ops/s
Iteration  19: 1574230.731 ops/s
Iteration  20: 1572157.115 ops/s
Iteration  21: 1563445.620 ops/s
Iteration  22: 1569572.825 ops/s
Iteration  23: 1575046.022 ops/s
Iteration  24: 1574383.053 ops/s
Iteration  25: 1576213.064 ops/s
Iteration  26: 1572870.493 ops/s
Iteration  27: 1573961.459 ops/s
Iteration  28: 1574672.636 ops/s
Iteration  29: 1572139.398 ops/s
Iteration  30: 1576152.027 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_size":
  1572809.091 ±(99.9%) 2190.650 ops/s [Average]
  (min, avg, max) = (1563445.620, 1572809.091, 1576793.637), stdev = 3278.862
  CI (99.9%): [1570618.441, 1574999.741] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_size  thrpt   30  1572809.091 ± 2190.650  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_stream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_stream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 174615167.177 ops/s
# Warmup Iteration   2: 298810297.247 ops/s
# Warmup Iteration   3: 102878241.519 ops/s
# Warmup Iteration   4: 103493775.026 ops/s
# Warmup Iteration   5: 103538803.684 ops/s
# Warmup Iteration   6: 103444996.947 ops/s
# Warmup Iteration   7: 103409126.379 ops/s
# Warmup Iteration   8: 103249363.182 ops/s
# Warmup Iteration   9: 103524451.679 ops/s
# Warmup Iteration  10: 103484384.513 ops/s
# Warmup Iteration  11: 103495205.303 ops/s
# Warmup Iteration  12: 103435227.986 ops/s
# Warmup Iteration  13: 103582902.233 ops/s
# Warmup Iteration  14: 103459328.400 ops/s
# Warmup Iteration  15: 103434304.822 ops/s
# Warmup Iteration  16: 103337581.565 ops/s
# Warmup Iteration  17: 103395608.540 ops/s
# Warmup Iteration  18: 103478906.514 ops/s
# Warmup Iteration  19: 103523622.922 ops/s
# Warmup Iteration  20: 103460454.065 ops/s
# Warmup Iteration  21: 103500437.474 ops/s
# Warmup Iteration  22: 103342944.583 ops/s
# Warmup Iteration  23: 103493136.386 ops/s
# Warmup Iteration  24: 103322635.675 ops/s
# Warmup Iteration  25: 103437449.949 ops/s
# Warmup Iteration  26: 103498740.216 ops/s
# Warmup Iteration  27: 103522444.577 ops/s
# Warmup Iteration  28: 103434878.211 ops/s
# Warmup Iteration  29: 103225633.812 ops/s
# Warmup Iteration  30: 103273260.145 ops/s
Iteration   1: 103355740.426 ops/s
Iteration   2: 103377053.207 ops/s
Iteration   3: 103333465.446 ops/s
Iteration   4: 103579903.892 ops/s
Iteration   5: 103452152.646 ops/s
Iteration   6: 103629679.531 ops/s
Iteration   7: 103502821.184 ops/s
Iteration   8: 103578467.548 ops/s
Iteration   9: 103394348.634 ops/s
Iteration  10: 103320276.108 ops/s
Iteration  11: 103639851.505 ops/s
Iteration  12: 103563864.578 ops/s
Iteration  13: 103634233.741 ops/s
Iteration  14: 103505432.971 ops/s
Iteration  15: 103619908.540 ops/s
Iteration  16: 103484134.752 ops/s
Iteration  17: 103404683.339 ops/s
Iteration  18: 103622931.127 ops/s
Iteration  19: 103447503.772 ops/s
Iteration  20: 103622882.290 ops/s
Iteration  21: 103289213.677 ops/s
Iteration  22: 103400733.127 ops/s
Iteration  23: 103626579.440 ops/s
Iteration  24: 103679047.833 ops/s
Iteration  25: 103543713.201 ops/s
Iteration  26: 103329961.101 ops/s
Iteration  27: 103558855.342 ops/s
Iteration  28: 103383493.934 ops/s
Iteration  29: 103406291.425 ops/s
Iteration  30: 103497191.294 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_stream":
  103492813.854 ±(99.9%) 77935.872 ops/s [Average]
  (min, avg, max) = (103289213.677, 103492813.854, 103679047.833), stdev = 116650.753
  CI (99.9%): [103414877.982, 103570749.725] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt          Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_stream  thrpt   30  103492813.854 ± 77935.872  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 496635.540 ops/s
# Warmup Iteration   2: 892268.455 ops/s
# Warmup Iteration   3: 1010590.110 ops/s
# Warmup Iteration   4: 1022083.823 ops/s
# Warmup Iteration   5: 1024334.655 ops/s
# Warmup Iteration   6: 842746.378 ops/s
# Warmup Iteration   7: 1018638.135 ops/s
# Warmup Iteration   8: 1020542.834 ops/s
# Warmup Iteration   9: 1019018.583 ops/s
# Warmup Iteration  10: 1020349.930 ops/s
# Warmup Iteration  11: 1018085.817 ops/s
# Warmup Iteration  12: 1022618.214 ops/s
# Warmup Iteration  13: 1019848.348 ops/s
# Warmup Iteration  14: 1020839.614 ops/s
# Warmup Iteration  15: 1019960.707 ops/s
# Warmup Iteration  16: 1016882.455 ops/s
# Warmup Iteration  17: 1017071.051 ops/s
# Warmup Iteration  18: 1017433.081 ops/s
# Warmup Iteration  19: 1016753.352 ops/s
# Warmup Iteration  20: 1017790.511 ops/s
# Warmup Iteration  21: 1019790.558 ops/s
# Warmup Iteration  22: 1017627.094 ops/s
# Warmup Iteration  23: 1020141.550 ops/s
# Warmup Iteration  24: 1020888.407 ops/s
# Warmup Iteration  25: 1020147.788 ops/s
# Warmup Iteration  26: 1020617.182 ops/s
# Warmup Iteration  27: 1020693.322 ops/s
# Warmup Iteration  28: 1019707.720 ops/s
# Warmup Iteration  29: 1019241.758 ops/s
# Warmup Iteration  30: 1019900.810 ops/s
Iteration   1: 1022328.329 ops/s
Iteration   2: 1020017.545 ops/s
Iteration   3: 1018410.990 ops/s
Iteration   4: 1020222.282 ops/s
Iteration   5: 1018855.964 ops/s
Iteration   6: 1018136.388 ops/s
Iteration   7: 1019739.655 ops/s
Iteration   8: 1011496.033 ops/s
Iteration   9: 1016013.832 ops/s
Iteration  10: 1016512.022 ops/s
Iteration  11: 1021235.149 ops/s
Iteration  12: 1012631.166 ops/s
Iteration  13: 1018665.443 ops/s
Iteration  14: 1020058.948 ops/s
Iteration  15: 1013714.139 ops/s
Iteration  16: 1012306.942 ops/s
Iteration  17: 1018353.949 ops/s
Iteration  18: 1021621.042 ops/s
Iteration  19: 1019742.193 ops/s
Iteration  20: 1020490.923 ops/s
Iteration  21: 1014490.051 ops/s
Iteration  22: 1019931.952 ops/s
Iteration  23: 1020544.013 ops/s
Iteration  24: 1016441.380 ops/s
Iteration  25: 1021933.322 ops/s
Iteration  26: 1019645.604 ops/s
Iteration  27: 1018892.016 ops/s
Iteration  28: 1017918.135 ops/s
Iteration  29: 1019176.370 ops/s
Iteration  30: 1018148.345 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByDouble":
  1018255.804 ±(99.9%) 1925.045 ops/s [Average]
  (min, avg, max) = (1011496.033, 1018255.804, 1022328.329), stdev = 2881.317
  CI (99.9%): [1016330.759, 1020180.849] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByDouble  thrpt   30  1018255.804 ± 1925.045  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62.696 ops/s
# Warmup Iteration   2: 75.788 ops/s
# Warmup Iteration   3: 100.329 ops/s
# Warmup Iteration   4: 101.533 ops/s
# Warmup Iteration   5: 101.914 ops/s
# Warmup Iteration   6: 102.970 ops/s
# Warmup Iteration   7: 102.628 ops/s
# Warmup Iteration   8: 102.803 ops/s
# Warmup Iteration   9: 85.479 ops/s
# Warmup Iteration  10: 100.466 ops/s
# Warmup Iteration  11: 101.914 ops/s
# Warmup Iteration  12: 100.158 ops/s
# Warmup Iteration  13: 100.982 ops/s
# Warmup Iteration  14: 100.202 ops/s
# Warmup Iteration  15: 99.633 ops/s
# Warmup Iteration  16: 100.440 ops/s
# Warmup Iteration  17: 102.429 ops/s
# Warmup Iteration  18: 102.725 ops/s
# Warmup Iteration  19: 100.300 ops/s
# Warmup Iteration  20: 99.841 ops/s
# Warmup Iteration  21: 100.371 ops/s
# Warmup Iteration  22: 100.519 ops/s
# Warmup Iteration  23: 100.138 ops/s
# Warmup Iteration  24: 100.089 ops/s
# Warmup Iteration  25: 100.442 ops/s
# Warmup Iteration  26: 98.679 ops/s
# Warmup Iteration  27: 101.957 ops/s
# Warmup Iteration  28: 99.715 ops/s
# Warmup Iteration  29: 98.117 ops/s
# Warmup Iteration  30: 99.566 ops/s
Iteration   1: 98.511 ops/s
Iteration   2: 101.098 ops/s
Iteration   3: 100.185 ops/s
Iteration   4: 100.417 ops/s
Iteration   5: 99.724 ops/s
Iteration   6: 100.412 ops/s
Iteration   7: 97.423 ops/s
Iteration   8: 100.630 ops/s
Iteration   9: 99.983 ops/s
Iteration  10: 98.023 ops/s
Iteration  11: 98.956 ops/s
Iteration  12: 101.591 ops/s
Iteration  13: 100.041 ops/s
Iteration  14: 99.575 ops/s
Iteration  15: 99.768 ops/s
Iteration  16: 100.796 ops/s
Iteration  17: 98.719 ops/s
Iteration  18: 100.237 ops/s
Iteration  19: 99.898 ops/s
Iteration  20: 99.870 ops/s
Iteration  21: 101.030 ops/s
Iteration  22: 100.952 ops/s
Iteration  23: 101.167 ops/s
Iteration  24: 100.593 ops/s
Iteration  25: 99.678 ops/s
Iteration  26: 99.191 ops/s
Iteration  27: 100.774 ops/s
Iteration  28: 100.159 ops/s
Iteration  29: 98.308 ops/s
Iteration  30: 99.270 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  99.899 ±(99.9%) 0.670 ops/s [Average]
  (min, avg, max) = (97.423, 99.899, 101.591), stdev = 1.003
  CI (99.9%): [99.229, 100.570] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt   Score   Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  99.899 ± 0.670  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 489331.872 ops/s
# Warmup Iteration   2: 863442.870 ops/s
# Warmup Iteration   3: 993599.122 ops/s
# Warmup Iteration   4: 997190.800 ops/s
# Warmup Iteration   5: 998047.732 ops/s
# Warmup Iteration   6: 822857.839 ops/s
# Warmup Iteration   7: 998774.717 ops/s
# Warmup Iteration   8: 999857.450 ops/s
# Warmup Iteration   9: 998729.837 ops/s
# Warmup Iteration  10: 998649.540 ops/s
# Warmup Iteration  11: 1000173.369 ops/s
# Warmup Iteration  12: 998720.360 ops/s
# Warmup Iteration  13: 1001377.204 ops/s
# Warmup Iteration  14: 1000431.429 ops/s
# Warmup Iteration  15: 1000649.535 ops/s
# Warmup Iteration  16: 1000530.942 ops/s
# Warmup Iteration  17: 1000507.570 ops/s
# Warmup Iteration  18: 999995.629 ops/s
# Warmup Iteration  19: 1001276.032 ops/s
# Warmup Iteration  20: 1000586.259 ops/s
# Warmup Iteration  21: 999066.631 ops/s
# Warmup Iteration  22: 1000311.503 ops/s
# Warmup Iteration  23: 1000263.122 ops/s
# Warmup Iteration  24: 1001100.646 ops/s
# Warmup Iteration  25: 997497.569 ops/s
# Warmup Iteration  26: 997939.129 ops/s
# Warmup Iteration  27: 998049.388 ops/s
# Warmup Iteration  28: 1000671.798 ops/s
# Warmup Iteration  29: 999923.822 ops/s
# Warmup Iteration  30: 1000834.520 ops/s
Iteration   1: 998892.007 ops/s
Iteration   2: 1000898.195 ops/s
Iteration   3: 997905.764 ops/s
Iteration   4: 1001955.294 ops/s
Iteration   5: 997712.960 ops/s
Iteration   6: 1000483.594 ops/s
Iteration   7: 997699.600 ops/s
Iteration   8: 1000689.759 ops/s
Iteration   9: 1000991.911 ops/s
Iteration  10: 1000275.581 ops/s
Iteration  11: 1001292.114 ops/s
Iteration  12: 999153.654 ops/s
Iteration  13: 1000895.274 ops/s
Iteration  14: 999799.195 ops/s
Iteration  15: 1000562.282 ops/s
Iteration  16: 1002065.072 ops/s
Iteration  17: 999429.926 ops/s
Iteration  18: 1002180.893 ops/s
Iteration  19: 997851.033 ops/s
Iteration  20: 1002021.381 ops/s
Iteration  21: 998375.842 ops/s
Iteration  22: 1000874.575 ops/s
Iteration  23: 1000912.252 ops/s
Iteration  24: 998990.049 ops/s
Iteration  25: 1001429.386 ops/s
Iteration  26: 1000674.304 ops/s
Iteration  27: 1002342.513 ops/s
Iteration  28: 1001236.199 ops/s
Iteration  29: 1000573.388 ops/s
Iteration  30: 999927.936 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByFloat":
  1000269.731 ±(99.9%) 937.073 ops/s [Average]
  (min, avg, max) = (997699.600, 1000269.731, 1002342.513), stdev = 1402.567
  CI (99.9%): [999332.658, 1001206.804] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByFloat  thrpt   30  1000269.731 ± 937.073  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 60.751 ops/s
# Warmup Iteration   2: 70.739 ops/s
# Warmup Iteration   3: 98.284 ops/s
# Warmup Iteration   4: 98.853 ops/s
# Warmup Iteration   5: 96.076 ops/s
# Warmup Iteration   6: 98.933 ops/s
# Warmup Iteration   7: 102.275 ops/s
# Warmup Iteration   8: 101.149 ops/s
# Warmup Iteration   9: 91.124 ops/s
# Warmup Iteration  10: 88.164 ops/s
# Warmup Iteration  11: 98.438 ops/s
# Warmup Iteration  12: 97.041 ops/s
# Warmup Iteration  13: 96.659 ops/s
# Warmup Iteration  14: 96.185 ops/s
# Warmup Iteration  15: 100.574 ops/s
# Warmup Iteration  16: 99.088 ops/s
# Warmup Iteration  17: 97.393 ops/s
# Warmup Iteration  18: 97.201 ops/s
# Warmup Iteration  19: 99.226 ops/s
# Warmup Iteration  20: 101.178 ops/s
# Warmup Iteration  21: 101.588 ops/s
# Warmup Iteration  22: 100.691 ops/s
# Warmup Iteration  23: 100.832 ops/s
# Warmup Iteration  24: 100.612 ops/s
# Warmup Iteration  25: 100.937 ops/s
# Warmup Iteration  26: 100.124 ops/s
# Warmup Iteration  27: 100.182 ops/s
# Warmup Iteration  28: 100.591 ops/s
# Warmup Iteration  29: 98.007 ops/s
# Warmup Iteration  30: 95.480 ops/s
Iteration   1: 95.315 ops/s
Iteration   2: 95.622 ops/s
Iteration   3: 93.877 ops/s
Iteration   4: 93.243 ops/s
Iteration   5: 93.443 ops/s
Iteration   6: 93.192 ops/s
Iteration   7: 93.507 ops/s
Iteration   8: 93.470 ops/s
Iteration   9: 95.517 ops/s
Iteration  10: 95.223 ops/s
Iteration  11: 95.742 ops/s
Iteration  12: 95.495 ops/s
Iteration  13: 98.499 ops/s
Iteration  14: 97.976 ops/s
Iteration  15: 96.525 ops/s
Iteration  16: 98.825 ops/s
Iteration  17: 98.226 ops/s
Iteration  18: 97.300 ops/s
Iteration  19: 98.132 ops/s
Iteration  20: 97.993 ops/s
Iteration  21: 97.909 ops/s
Iteration  22: 98.208 ops/s
Iteration  23: 97.904 ops/s
Iteration  24: 97.424 ops/s
Iteration  25: 97.699 ops/s
Iteration  26: 98.289 ops/s
Iteration  27: 97.285 ops/s
Iteration  28: 97.060 ops/s
Iteration  29: 98.579 ops/s
Iteration  30: 97.100 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  96.486 ±(99.9%) 1.243 ops/s [Average]
  (min, avg, max) = (93.192, 96.486, 98.825), stdev = 1.860
  CI (99.9%): [95.243, 97.729] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt   Score   Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  96.486 ± 1.243  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 601313.676 ops/s
# Warmup Iteration   2: 1178222.447 ops/s
# Warmup Iteration   3: 1309097.010 ops/s
# Warmup Iteration   4: 1311329.536 ops/s
# Warmup Iteration   5: 1087218.346 ops/s
# Warmup Iteration   6: 1318538.266 ops/s
# Warmup Iteration   7: 1316491.247 ops/s
# Warmup Iteration   8: 1317202.575 ops/s
# Warmup Iteration   9: 1316961.237 ops/s
# Warmup Iteration  10: 1319048.190 ops/s
# Warmup Iteration  11: 1318333.275 ops/s
# Warmup Iteration  12: 1309432.254 ops/s
# Warmup Iteration  13: 1317220.985 ops/s
# Warmup Iteration  14: 1318001.496 ops/s
# Warmup Iteration  15: 1318012.731 ops/s
# Warmup Iteration  16: 1318678.105 ops/s
# Warmup Iteration  17: 1316943.240 ops/s
# Warmup Iteration  18: 1316052.374 ops/s
# Warmup Iteration  19: 1317464.668 ops/s
# Warmup Iteration  20: 1315510.493 ops/s
# Warmup Iteration  21: 1311949.508 ops/s
# Warmup Iteration  22: 1316382.796 ops/s
# Warmup Iteration  23: 1317840.513 ops/s
# Warmup Iteration  24: 1315146.296 ops/s
# Warmup Iteration  25: 1318565.577 ops/s
# Warmup Iteration  26: 1318563.462 ops/s
# Warmup Iteration  27: 1316985.032 ops/s
# Warmup Iteration  28: 1316841.103 ops/s
# Warmup Iteration  29: 1318179.046 ops/s
# Warmup Iteration  30: 1318696.431 ops/s
Iteration   1: 1316328.730 ops/s
Iteration   2: 1318167.867 ops/s
Iteration   3: 1320295.724 ops/s
Iteration   4: 1317557.547 ops/s
Iteration   5: 1311345.006 ops/s
Iteration   6: 1319293.265 ops/s
Iteration   7: 1317159.722 ops/s
Iteration   8: 1317723.520 ops/s
Iteration   9: 1320086.909 ops/s
Iteration  10: 1317233.150 ops/s
Iteration  11: 1315801.526 ops/s
Iteration  12: 1318117.394 ops/s
Iteration  13: 1317238.812 ops/s
Iteration  14: 1317213.968 ops/s
Iteration  15: 1316435.951 ops/s
Iteration  16: 1318044.598 ops/s
Iteration  17: 1316490.056 ops/s
Iteration  18: 1318266.681 ops/s
Iteration  19: 1315514.849 ops/s
Iteration  20: 1316657.695 ops/s
Iteration  21: 1316565.917 ops/s
Iteration  22: 1318291.856 ops/s
Iteration  23: 1320767.079 ops/s
Iteration  24: 1314425.980 ops/s
Iteration  25: 1318619.779 ops/s
Iteration  26: 1319421.586 ops/s
Iteration  27: 1317430.980 ops/s
Iteration  28: 1318594.657 ops/s
Iteration  29: 1316299.536 ops/s
Iteration  30: 1315263.915 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByInt":
  1317355.142 ±(99.9%) 1255.166 ops/s [Average]
  (min, avg, max) = (1311345.006, 1317355.142, 1320767.079), stdev = 1878.674
  CI (99.9%): [1316099.975, 1318610.308] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByInt  thrpt   30  1317355.142 ± 1255.166  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 617483.776 ops/s
# Warmup Iteration   2: 1218264.062 ops/s
# Warmup Iteration   3: 1352224.365 ops/s
# Warmup Iteration   4: 1361427.123 ops/s
# Warmup Iteration   5: 1120356.724 ops/s
# Warmup Iteration   6: 1362051.604 ops/s
# Warmup Iteration   7: 1363501.803 ops/s
# Warmup Iteration   8: 1363625.798 ops/s
# Warmup Iteration   9: 1362901.839 ops/s
# Warmup Iteration  10: 1361661.251 ops/s
# Warmup Iteration  11: 1360402.340 ops/s
# Warmup Iteration  12: 1365178.074 ops/s
# Warmup Iteration  13: 1361890.511 ops/s
# Warmup Iteration  14: 1363599.589 ops/s
# Warmup Iteration  15: 1359849.800 ops/s
# Warmup Iteration  16: 1359865.168 ops/s
# Warmup Iteration  17: 1362710.108 ops/s
# Warmup Iteration  18: 1361394.500 ops/s
# Warmup Iteration  19: 1362483.840 ops/s
# Warmup Iteration  20: 1363144.161 ops/s
# Warmup Iteration  21: 1356555.007 ops/s
# Warmup Iteration  22: 1363480.480 ops/s
# Warmup Iteration  23: 1361233.881 ops/s
# Warmup Iteration  24: 1359208.290 ops/s
# Warmup Iteration  25: 1362894.328 ops/s
# Warmup Iteration  26: 1363862.891 ops/s
# Warmup Iteration  27: 1363646.400 ops/s
# Warmup Iteration  28: 1364260.881 ops/s
# Warmup Iteration  29: 1365824.445 ops/s
# Warmup Iteration  30: 1362635.180 ops/s
Iteration   1: 1365558.135 ops/s
Iteration   2: 1362534.188 ops/s
Iteration   3: 1362453.747 ops/s
Iteration   4: 1362399.035 ops/s
Iteration   5: 1360996.759 ops/s
Iteration   6: 1363467.671 ops/s
Iteration   7: 1365240.593 ops/s
Iteration   8: 1364174.811 ops/s
Iteration   9: 1361433.385 ops/s
Iteration  10: 1364590.011 ops/s
Iteration  11: 1362860.848 ops/s
Iteration  12: 1361392.484 ops/s
Iteration  13: 1365726.826 ops/s
Iteration  14: 1363030.558 ops/s
Iteration  15: 1365064.125 ops/s
Iteration  16: 1365677.048 ops/s
Iteration  17: 1364553.170 ops/s
Iteration  18: 1366085.197 ops/s
Iteration  19: 1363993.290 ops/s
Iteration  20: 1363612.136 ops/s
Iteration  21: 1365008.456 ops/s
Iteration  22: 1364724.452 ops/s
Iteration  23: 1363017.275 ops/s
Iteration  24: 1367492.224 ops/s
Iteration  25: 1364228.791 ops/s
Iteration  26: 1361594.328 ops/s
Iteration  27: 1363302.780 ops/s
Iteration  28: 1364514.701 ops/s
Iteration  29: 1363909.939 ops/s
Iteration  30: 1365946.163 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByLong":
  1363952.771 ±(99.9%) 1060.952 ops/s [Average]
  (min, avg, max) = (1360996.759, 1363952.771, 1367492.224), stdev = 1587.983
  CI (99.9%): [1362891.819, 1365013.722] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumByLong  thrpt   30  1363952.771 ± 1060.952  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 777908.441 ops/s
# Warmup Iteration   2: 1433176.288 ops/s
# Warmup Iteration   3: 1636909.940 ops/s
# Warmup Iteration   4: 1636653.988 ops/s
# Warmup Iteration   5: 1516073.808 ops/s
# Warmup Iteration   6: 1472679.903 ops/s
# Warmup Iteration   7: 1638179.317 ops/s
# Warmup Iteration   8: 1640482.707 ops/s
# Warmup Iteration   9: 1640335.252 ops/s
# Warmup Iteration  10: 1640250.409 ops/s
# Warmup Iteration  11: 1640879.571 ops/s
# Warmup Iteration  12: 1638690.216 ops/s
# Warmup Iteration  13: 1637421.510 ops/s
# Warmup Iteration  14: 1639320.927 ops/s
# Warmup Iteration  15: 1618486.006 ops/s
# Warmup Iteration  16: 1635578.788 ops/s
# Warmup Iteration  17: 1636320.957 ops/s
# Warmup Iteration  18: 1636394.747 ops/s
# Warmup Iteration  19: 1634827.558 ops/s
# Warmup Iteration  20: 1631201.772 ops/s
# Warmup Iteration  21: 1634676.686 ops/s
# Warmup Iteration  22: 1637212.727 ops/s
# Warmup Iteration  23: 1633969.198 ops/s
# Warmup Iteration  24: 1637141.254 ops/s
# Warmup Iteration  25: 1633812.987 ops/s
# Warmup Iteration  26: 1635182.924 ops/s
# Warmup Iteration  27: 1637553.472 ops/s
# Warmup Iteration  28: 1633995.562 ops/s
# Warmup Iteration  29: 1635582.114 ops/s
# Warmup Iteration  30: 1633971.916 ops/s
Iteration   1: 1633454.656 ops/s
Iteration   2: 1635216.538 ops/s
Iteration   3: 1627126.684 ops/s
Iteration   4: 1630207.424 ops/s
Iteration   5: 1637694.884 ops/s
Iteration   6: 1634217.007 ops/s
Iteration   7: 1634735.363 ops/s
Iteration   8: 1636546.327 ops/s
Iteration   9: 1634833.689 ops/s
Iteration  10: 1636677.005 ops/s
Iteration  11: 1635940.357 ops/s
Iteration  12: 1628624.963 ops/s
Iteration  13: 1625653.441 ops/s
Iteration  14: 1633856.340 ops/s
Iteration  15: 1634640.372 ops/s
Iteration  16: 1632216.315 ops/s
Iteration  17: 1628526.364 ops/s
Iteration  18: 1637093.876 ops/s
Iteration  19: 1630978.796 ops/s
Iteration  20: 1630792.377 ops/s
Iteration  21: 1633259.379 ops/s
Iteration  22: 1633897.527 ops/s
Iteration  23: 1634415.432 ops/s
Iteration  24: 1633761.037 ops/s
Iteration  25: 1633736.839 ops/s
Iteration  26: 1638958.105 ops/s
Iteration  27: 1635840.011 ops/s
Iteration  28: 1632741.407 ops/s
Iteration  29: 1635423.863 ops/s
Iteration  30: 1635274.124 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumDouble":
  1633544.683 ±(99.9%) 2093.411 ops/s [Average]
  (min, avg, max) = (1625653.441, 1633544.683, 1638958.105), stdev = 3133.320
  CI (99.9%): [1631451.272, 1635638.095] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumDouble  thrpt   30  1633544.683 ± 2093.411  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 758728.649 ops/s
# Warmup Iteration   2: 1453620.380 ops/s
# Warmup Iteration   3: 1626124.908 ops/s
# Warmup Iteration   4: 1635832.203 ops/s
# Warmup Iteration   5: 1349914.565 ops/s
# Warmup Iteration   6: 1637089.245 ops/s
# Warmup Iteration   7: 1641685.791 ops/s
# Warmup Iteration   8: 1642463.091 ops/s
# Warmup Iteration   9: 1640290.985 ops/s
# Warmup Iteration  10: 1644063.019 ops/s
# Warmup Iteration  11: 1643677.285 ops/s
# Warmup Iteration  12: 1640478.278 ops/s
# Warmup Iteration  13: 1639460.008 ops/s
# Warmup Iteration  14: 1639728.135 ops/s
# Warmup Iteration  15: 1642706.848 ops/s
# Warmup Iteration  16: 1642134.504 ops/s
# Warmup Iteration  17: 1642308.873 ops/s
# Warmup Iteration  18: 1638542.024 ops/s
# Warmup Iteration  19: 1638607.754 ops/s
# Warmup Iteration  20: 1638914.050 ops/s
# Warmup Iteration  21: 1636156.451 ops/s
# Warmup Iteration  22: 1643336.940 ops/s
# Warmup Iteration  23: 1640625.044 ops/s
# Warmup Iteration  24: 1640584.457 ops/s
# Warmup Iteration  25: 1642931.108 ops/s
# Warmup Iteration  26: 1641237.983 ops/s
# Warmup Iteration  27: 1636542.760 ops/s
# Warmup Iteration  28: 1637273.724 ops/s
# Warmup Iteration  29: 1644249.375 ops/s
# Warmup Iteration  30: 1642082.462 ops/s
Iteration   1: 1642459.241 ops/s
Iteration   2: 1630447.019 ops/s
Iteration   3: 1645680.056 ops/s
Iteration   4: 1642917.000 ops/s
Iteration   5: 1640005.455 ops/s
Iteration   6: 1635436.814 ops/s
Iteration   7: 1635668.479 ops/s
Iteration   8: 1638259.527 ops/s
Iteration   9: 1643614.808 ops/s
Iteration  10: 1642216.937 ops/s
Iteration  11: 1642726.928 ops/s
Iteration  12: 1644051.729 ops/s
Iteration  13: 1643770.721 ops/s
Iteration  14: 1642514.459 ops/s
Iteration  15: 1644610.360 ops/s
Iteration  16: 1640986.080 ops/s
Iteration  17: 1641366.514 ops/s
Iteration  18: 1639947.925 ops/s
Iteration  19: 1639383.092 ops/s
Iteration  20: 1641857.731 ops/s
Iteration  21: 1645711.809 ops/s
Iteration  22: 1641470.288 ops/s
Iteration  23: 1639918.495 ops/s
Iteration  24: 1645142.447 ops/s
Iteration  25: 1637464.668 ops/s
Iteration  26: 1638757.331 ops/s
Iteration  27: 1638842.940 ops/s
Iteration  28: 1641259.638 ops/s
Iteration  29: 1644957.322 ops/s
Iteration  30: 1642641.119 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumFloat":
  1641136.231 ±(99.9%) 2274.000 ops/s [Average]
  (min, avg, max) = (1630447.019, 1641136.231, 1645711.809), stdev = 3403.616
  CI (99.9%): [1638862.231, 1643410.231] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumFloat  thrpt   30  1641136.231 ± 2274.000  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 799572.161 ops/s
# Warmup Iteration   2: 1502096.702 ops/s
# Warmup Iteration   3: 1693894.380 ops/s
# Warmup Iteration   4: 1706949.375 ops/s
# Warmup Iteration   5: 1519880.698 ops/s
# Warmup Iteration   6: 1581181.977 ops/s
# Warmup Iteration   7: 1708623.879 ops/s
# Warmup Iteration   8: 1706530.762 ops/s
# Warmup Iteration   9: 1709762.421 ops/s
# Warmup Iteration  10: 1707716.613 ops/s
# Warmup Iteration  11: 1709579.747 ops/s
# Warmup Iteration  12: 1709883.728 ops/s
# Warmup Iteration  13: 1706446.717 ops/s
# Warmup Iteration  14: 1702612.059 ops/s
# Warmup Iteration  15: 1708727.785 ops/s
# Warmup Iteration  16: 1709999.069 ops/s
# Warmup Iteration  17: 1703423.017 ops/s
# Warmup Iteration  18: 1704341.826 ops/s
# Warmup Iteration  19: 1704241.432 ops/s
# Warmup Iteration  20: 1705824.931 ops/s
# Warmup Iteration  21: 1705318.784 ops/s
# Warmup Iteration  22: 1706547.695 ops/s
# Warmup Iteration  23: 1708797.401 ops/s
# Warmup Iteration  24: 1707532.653 ops/s
# Warmup Iteration  25: 1705032.819 ops/s
# Warmup Iteration  26: 1707716.144 ops/s
# Warmup Iteration  27: 1708147.583 ops/s
# Warmup Iteration  28: 1704655.508 ops/s
# Warmup Iteration  29: 1699863.643 ops/s
# Warmup Iteration  30: 1705945.439 ops/s
Iteration   1: 1707195.366 ops/s
Iteration   2: 1711555.718 ops/s
Iteration   3: 1705973.541 ops/s
Iteration   4: 1709283.320 ops/s
Iteration   5: 1678851.079 ops/s
Iteration   6: 1706463.228 ops/s
Iteration   7: 1709250.584 ops/s
Iteration   8: 1708634.291 ops/s
Iteration   9: 1707549.695 ops/s
Iteration  10: 1710736.946 ops/s
Iteration  11: 1707091.334 ops/s
Iteration  12: 1711552.913 ops/s
Iteration  13: 1701689.927 ops/s
Iteration  14: 1703722.028 ops/s
Iteration  15: 1710687.365 ops/s
Iteration  16: 1706572.050 ops/s
Iteration  17: 1708920.566 ops/s
Iteration  18: 1709312.416 ops/s
Iteration  19: 1707569.401 ops/s
Iteration  20: 1711086.708 ops/s
Iteration  21: 1701940.422 ops/s
Iteration  22: 1708841.542 ops/s
Iteration  23: 1710393.315 ops/s
Iteration  24: 1708073.300 ops/s
Iteration  25: 1709466.338 ops/s
Iteration  26: 1711031.754 ops/s
Iteration  27: 1708184.473 ops/s
Iteration  28: 1707446.021 ops/s
Iteration  29: 1711056.113 ops/s
Iteration  30: 1706225.085 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumInteger":
  1707211.895 ±(99.9%) 3967.255 ops/s [Average]
  (min, avg, max) = (1678851.079, 1707211.895, 1711555.718), stdev = 5938.000
  CI (99.9%): [1703244.640, 1711179.149] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumInteger  thrpt   30  1707211.895 ± 3967.255  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 819767.537 ops/s
# Warmup Iteration   2: 1587494.593 ops/s
# Warmup Iteration   3: 1727381.411 ops/s
# Warmup Iteration   4: 1737496.310 ops/s
# Warmup Iteration   5: 1451949.183 ops/s
# Warmup Iteration   6: 1706856.849 ops/s
# Warmup Iteration   7: 1733745.277 ops/s
# Warmup Iteration   8: 1732415.657 ops/s
# Warmup Iteration   9: 1729030.963 ops/s
# Warmup Iteration  10: 1733478.444 ops/s
# Warmup Iteration  11: 1733473.333 ops/s
# Warmup Iteration  12: 1735081.348 ops/s
# Warmup Iteration  13: 1732461.001 ops/s
# Warmup Iteration  14: 1733964.027 ops/s
# Warmup Iteration  15: 1733863.152 ops/s
# Warmup Iteration  16: 1732426.550 ops/s
# Warmup Iteration  17: 1737913.483 ops/s
# Warmup Iteration  18: 1729004.303 ops/s
# Warmup Iteration  19: 1736483.276 ops/s
# Warmup Iteration  20: 1736547.613 ops/s
# Warmup Iteration  21: 1735675.086 ops/s
# Warmup Iteration  22: 1735989.921 ops/s
# Warmup Iteration  23: 1736079.974 ops/s
# Warmup Iteration  24: 1735058.438 ops/s
# Warmup Iteration  25: 1736750.858 ops/s
# Warmup Iteration  26: 1737638.689 ops/s
# Warmup Iteration  27: 1735727.907 ops/s
# Warmup Iteration  28: 1738240.206 ops/s
# Warmup Iteration  29: 1737244.323 ops/s
# Warmup Iteration  30: 1736046.828 ops/s
Iteration   1: 1740427.567 ops/s
Iteration   2: 1736693.593 ops/s
Iteration   3: 1740133.421 ops/s
Iteration   4: 1736110.065 ops/s
Iteration   5: 1736289.821 ops/s
Iteration   6: 1741252.586 ops/s
Iteration   7: 1731087.951 ops/s
Iteration   8: 1736921.181 ops/s
Iteration   9: 1739314.181 ops/s
Iteration  10: 1734986.823 ops/s
Iteration  11: 1737387.833 ops/s
Iteration  12: 1737709.016 ops/s
Iteration  13: 1734671.702 ops/s
Iteration  14: 1737956.294 ops/s
Iteration  15: 1738358.449 ops/s
Iteration  16: 1738193.098 ops/s
Iteration  17: 1739896.204 ops/s
Iteration  18: 1737009.143 ops/s
Iteration  19: 1735445.293 ops/s
Iteration  20: 1737660.620 ops/s
Iteration  21: 1735482.167 ops/s
Iteration  22: 1737271.698 ops/s
Iteration  23: 1739846.526 ops/s
Iteration  24: 1736142.271 ops/s
Iteration  25: 1736736.713 ops/s
Iteration  26: 1738378.510 ops/s
Iteration  27: 1735157.279 ops/s
Iteration  28: 1738121.992 ops/s
Iteration  29: 1740191.413 ops/s
Iteration  30: 1735939.993 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumLong":
  1737359.113 ±(99.9%) 1426.414 ops/s [Average]
  (min, avg, max) = (1731087.951, 1737359.113, 1741252.586), stdev = 2134.989
  CI (99.9%): [1735932.700, 1738785.527] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_sumLong  thrpt   30  1737359.113 ± 1426.414  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 280196.474 ops/s
# Warmup Iteration   2: 520088.563 ops/s
# Warmup Iteration   3: 580266.805 ops/s
# Warmup Iteration   4: 582566.146 ops/s
# Warmup Iteration   5: 548597.275 ops/s
# Warmup Iteration   6: 517671.626 ops/s
# Warmup Iteration   7: 583312.167 ops/s
# Warmup Iteration   8: 584501.281 ops/s
# Warmup Iteration   9: 584478.880 ops/s
# Warmup Iteration  10: 584459.554 ops/s
# Warmup Iteration  11: 583555.088 ops/s
# Warmup Iteration  12: 584076.285 ops/s
# Warmup Iteration  13: 584695.701 ops/s
# Warmup Iteration  14: 584177.936 ops/s
# Warmup Iteration  15: 583701.149 ops/s
# Warmup Iteration  16: 583071.196 ops/s
# Warmup Iteration  17: 583403.079 ops/s
# Warmup Iteration  18: 583647.989 ops/s
# Warmup Iteration  19: 583732.715 ops/s
# Warmup Iteration  20: 583573.127 ops/s
# Warmup Iteration  21: 582743.888 ops/s
# Warmup Iteration  22: 583722.562 ops/s
# Warmup Iteration  23: 583925.517 ops/s
# Warmup Iteration  24: 583087.109 ops/s
# Warmup Iteration  25: 583688.302 ops/s
# Warmup Iteration  26: 583578.217 ops/s
# Warmup Iteration  27: 583363.978 ops/s
# Warmup Iteration  28: 583480.459 ops/s
# Warmup Iteration  29: 583151.970 ops/s
# Warmup Iteration  30: 584176.925 ops/s
Iteration   1: 584630.389 ops/s
Iteration   2: 583797.066 ops/s
Iteration   3: 583603.836 ops/s
Iteration   4: 583997.928 ops/s
Iteration   5: 583988.995 ops/s
Iteration   6: 582328.303 ops/s
Iteration   7: 584710.400 ops/s
Iteration   8: 583828.934 ops/s
Iteration   9: 584966.029 ops/s
Iteration  10: 583707.905 ops/s
Iteration  11: 583914.122 ops/s
Iteration  12: 584571.734 ops/s
Iteration  13: 582917.038 ops/s
Iteration  14: 584929.039 ops/s
Iteration  15: 583996.910 ops/s
Iteration  16: 583450.834 ops/s
Iteration  17: 584710.734 ops/s
Iteration  18: 582623.127 ops/s
Iteration  19: 583740.044 ops/s
Iteration  20: 584639.728 ops/s
Iteration  21: 582854.402 ops/s
Iteration  22: 583349.477 ops/s
Iteration  23: 584009.097 ops/s
Iteration  24: 582592.658 ops/s
Iteration  25: 585043.524 ops/s
Iteration  26: 584291.859 ops/s
Iteration  27: 584766.139 ops/s
Iteration  28: 582618.804 ops/s
Iteration  29: 583584.991 ops/s
Iteration  30: 582514.490 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_take":
  583822.618 ±(99.9%) 545.215 ops/s [Average]
  (min, avg, max) = (582328.303, 583822.618, 585043.524), stdev = 816.052
  CI (99.9%): [583277.403, 584367.833] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_take  thrpt   30  583822.618 ± 545.215  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 815572.925 ops/s
# Warmup Iteration   2: 1581255.080 ops/s
# Warmup Iteration   3: 1754501.934 ops/s
# Warmup Iteration   4: 1762240.632 ops/s
# Warmup Iteration   5: 1453324.764 ops/s
# Warmup Iteration   6: 1750775.813 ops/s
# Warmup Iteration   7: 1749698.454 ops/s
# Warmup Iteration   8: 1750927.594 ops/s
# Warmup Iteration   9: 1747803.966 ops/s
# Warmup Iteration  10: 1753650.491 ops/s
# Warmup Iteration  11: 1751941.519 ops/s
# Warmup Iteration  12: 1752022.115 ops/s
# Warmup Iteration  13: 1749412.655 ops/s
# Warmup Iteration  14: 1750740.679 ops/s
# Warmup Iteration  15: 1750228.410 ops/s
# Warmup Iteration  16: 1749303.879 ops/s
# Warmup Iteration  17: 1747981.674 ops/s
# Warmup Iteration  18: 1752418.445 ops/s
# Warmup Iteration  19: 1749447.904 ops/s
# Warmup Iteration  20: 1751220.321 ops/s
# Warmup Iteration  21: 1751770.254 ops/s
# Warmup Iteration  22: 1750678.832 ops/s
# Warmup Iteration  23: 1747794.417 ops/s
# Warmup Iteration  24: 1752564.535 ops/s
# Warmup Iteration  25: 1752065.174 ops/s
# Warmup Iteration  26: 1750411.166 ops/s
# Warmup Iteration  27: 1750365.273 ops/s
# Warmup Iteration  28: 1752207.154 ops/s
# Warmup Iteration  29: 1753402.821 ops/s
# Warmup Iteration  30: 1750229.249 ops/s
Iteration   1: 1752788.500 ops/s
Iteration   2: 1753521.302 ops/s
Iteration   3: 1751447.584 ops/s
Iteration   4: 1751830.498 ops/s
Iteration   5: 1750611.498 ops/s
Iteration   6: 1751308.273 ops/s
Iteration   7: 1755147.926 ops/s
Iteration   8: 1751481.911 ops/s
Iteration   9: 1751284.677 ops/s
Iteration  10: 1754868.954 ops/s
Iteration  11: 1755004.021 ops/s
Iteration  12: 1751253.792 ops/s
Iteration  13: 1746945.877 ops/s
Iteration  14: 1752824.129 ops/s
Iteration  15: 1750308.007 ops/s
Iteration  16: 1749655.099 ops/s
Iteration  17: 1753243.253 ops/s
Iteration  18: 1751467.715 ops/s
Iteration  19: 1754669.865 ops/s
Iteration  20: 1751954.790 ops/s
Iteration  21: 1755153.006 ops/s
Iteration  22: 1751373.754 ops/s
Iteration  23: 1748821.977 ops/s
Iteration  24: 1736929.088 ops/s
Iteration  25: 1751048.339 ops/s
Iteration  26: 1752322.800 ops/s
Iteration  27: 1752147.298 ops/s
Iteration  28: 1748810.878 ops/s
Iteration  29: 1750955.678 ops/s
Iteration  30: 1753534.910 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_takeWhile":
  1751423.847 ±(99.9%) 2253.685 ops/s [Average]
  (min, avg, max) = (1736929.088, 1751423.847, 1755153.006), stdev = 3373.209
  CI (99.9%): [1749170.162, 1753677.531] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_takeWhile  thrpt   30  1751423.847 ± 2253.685  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 497534.687 ops/s
# Warmup Iteration   2: 602374.636 ops/s
# Warmup Iteration   3: 785161.613 ops/s
# Warmup Iteration   4: 785174.395 ops/s
# Warmup Iteration   5: 778970.670 ops/s
# Warmup Iteration   6: 784081.482 ops/s
# Warmup Iteration   7: 785556.985 ops/s
# Warmup Iteration   8: 783793.528 ops/s
# Warmup Iteration   9: 721419.586 ops/s
# Warmup Iteration  10: 709986.026 ops/s
# Warmup Iteration  11: 785926.347 ops/s
# Warmup Iteration  12: 785612.169 ops/s
# Warmup Iteration  13: 786411.275 ops/s
# Warmup Iteration  14: 785863.294 ops/s
# Warmup Iteration  15: 786035.378 ops/s
# Warmup Iteration  16: 786620.737 ops/s
# Warmup Iteration  17: 825187.941 ops/s
# Warmup Iteration  18: 822528.512 ops/s
# Warmup Iteration  19: 824104.315 ops/s
# Warmup Iteration  20: 822104.908 ops/s
# Warmup Iteration  21: 821513.644 ops/s
# Warmup Iteration  22: 821922.803 ops/s
# Warmup Iteration  23: 824469.891 ops/s
# Warmup Iteration  24: 822109.801 ops/s
# Warmup Iteration  25: 822650.151 ops/s
# Warmup Iteration  26: 823773.605 ops/s
# Warmup Iteration  27: 824307.079 ops/s
# Warmup Iteration  28: 823231.984 ops/s
# Warmup Iteration  29: 823522.956 ops/s
# Warmup Iteration  30: 822745.110 ops/s
Iteration   1: 822974.779 ops/s
Iteration   2: 824018.160 ops/s
Iteration   3: 824072.903 ops/s
Iteration   4: 821930.901 ops/s
Iteration   5: 823654.461 ops/s
Iteration   6: 823275.987 ops/s
Iteration   7: 820966.591 ops/s
Iteration   8: 825411.918 ops/s
Iteration   9: 824735.083 ops/s
Iteration  10: 823470.268 ops/s
Iteration  11: 825215.013 ops/s
Iteration  12: 824526.538 ops/s
Iteration  13: 823624.667 ops/s
Iteration  14: 824224.974 ops/s
Iteration  15: 820489.122 ops/s
Iteration  16: 824622.166 ops/s
Iteration  17: 824410.540 ops/s
Iteration  18: 822043.490 ops/s
Iteration  19: 823123.168 ops/s
Iteration  20: 824298.770 ops/s
Iteration  21: 823366.323 ops/s
Iteration  22: 820831.932 ops/s
Iteration  23: 824303.446 ops/s
Iteration  24: 823305.649 ops/s
Iteration  25: 820162.203 ops/s
Iteration  26: 825139.639 ops/s
Iteration  27: 822807.314 ops/s
Iteration  28: 823354.202 ops/s
Iteration  29: 824788.368 ops/s
Iteration  30: 821790.426 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_take_throws":
  823364.633 ±(99.9%) 959.267 ops/s [Average]
  (min, avg, max) = (820162.203, 823364.633, 825411.918), stdev = 1435.785
  CI (99.9%): [822405.367, 824323.900] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_take_throws  thrpt   30  823364.633 ± 959.267  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1319843.567 ops/s
# Warmup Iteration   2: 2625262.232 ops/s
# Warmup Iteration   3: 2876391.531 ops/s
# Warmup Iteration   4: 2897297.149 ops/s
# Warmup Iteration   5: 2376998.841 ops/s
# Warmup Iteration   6: 2882140.762 ops/s
# Warmup Iteration   7: 2882890.601 ops/s
# Warmup Iteration   8: 2871001.362 ops/s
# Warmup Iteration   9: 2882619.204 ops/s
# Warmup Iteration  10: 2882612.268 ops/s
# Warmup Iteration  11: 2868749.443 ops/s
# Warmup Iteration  12: 2869959.130 ops/s
# Warmup Iteration  13: 2882268.643 ops/s
# Warmup Iteration  14: 2883688.712 ops/s
# Warmup Iteration  15: 2879607.290 ops/s
# Warmup Iteration  16: 2885652.243 ops/s
# Warmup Iteration  17: 2919585.349 ops/s
# Warmup Iteration  18: 2914833.171 ops/s
# Warmup Iteration  19: 2915383.658 ops/s
# Warmup Iteration  20: 2918801.813 ops/s
# Warmup Iteration  21: 2918016.632 ops/s
# Warmup Iteration  22: 2926177.493 ops/s
# Warmup Iteration  23: 2923304.220 ops/s
# Warmup Iteration  24: 2918932.202 ops/s
# Warmup Iteration  25: 2926569.753 ops/s
# Warmup Iteration  26: 2920252.313 ops/s
# Warmup Iteration  27: 2917124.682 ops/s
# Warmup Iteration  28: 2926193.587 ops/s
# Warmup Iteration  29: 2924304.249 ops/s
# Warmup Iteration  30: 2912959.425 ops/s
Iteration   1: 2926697.034 ops/s
Iteration   2: 2917130.262 ops/s
Iteration   3: 2927862.970 ops/s
Iteration   4: 2909203.744 ops/s
Iteration   5: 2920078.500 ops/s
Iteration   6: 2931780.670 ops/s
Iteration   7: 2913428.078 ops/s
Iteration   8: 2919814.806 ops/s
Iteration   9: 2932141.351 ops/s
Iteration  10: 2909985.424 ops/s
Iteration  11: 2922088.860 ops/s
Iteration  12: 2933660.212 ops/s
Iteration  13: 2915193.052 ops/s
Iteration  14: 2918881.823 ops/s
Iteration  15: 2933437.693 ops/s
Iteration  16: 2915658.466 ops/s
Iteration  17: 2922779.288 ops/s
Iteration  18: 2929697.618 ops/s
Iteration  19: 2917967.117 ops/s
Iteration  20: 2916558.683 ops/s
Iteration  21: 2919642.125 ops/s
Iteration  22: 2897713.035 ops/s
Iteration  23: 2923630.279 ops/s
Iteration  24: 2935778.758 ops/s
Iteration  25: 2916472.055 ops/s
Iteration  26: 2923493.799 ops/s
Iteration  27: 2928239.986 ops/s
Iteration  28: 2918024.025 ops/s
Iteration  29: 2924116.857 ops/s
Iteration  30: 2935689.725 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_tap":
  2921894.877 ±(99.9%) 5825.154 ops/s [Average]
  (min, avg, max) = (2897713.035, 2921894.877, 2935778.758), stdev = 8718.816
  CI (99.9%): [2916069.723, 2927720.030] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_tap  thrpt   30  2921894.877 ± 5825.154  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 520081.323 ops/s
# Warmup Iteration   2: 1077862.192 ops/s
# Warmup Iteration   3: 1147847.981 ops/s
# Warmup Iteration   4: 1154751.760 ops/s
# Warmup Iteration   5: 961352.187 ops/s
# Warmup Iteration   6: 1156119.444 ops/s
# Warmup Iteration   7: 1156169.202 ops/s
# Warmup Iteration   8: 1156035.635 ops/s
# Warmup Iteration   9: 1155018.253 ops/s
# Warmup Iteration  10: 1156288.765 ops/s
# Warmup Iteration  11: 1154571.177 ops/s
# Warmup Iteration  12: 1154813.427 ops/s
# Warmup Iteration  13: 1153587.731 ops/s
# Warmup Iteration  14: 1154180.375 ops/s
# Warmup Iteration  15: 1154512.328 ops/s
# Warmup Iteration  16: 1150984.661 ops/s
# Warmup Iteration  17: 1150804.743 ops/s
# Warmup Iteration  18: 1129457.195 ops/s
# Warmup Iteration  19: 1153186.938 ops/s
# Warmup Iteration  20: 1155693.387 ops/s
# Warmup Iteration  21: 1155139.761 ops/s
# Warmup Iteration  22: 1154676.310 ops/s
# Warmup Iteration  23: 1155380.487 ops/s
# Warmup Iteration  24: 1155176.476 ops/s
# Warmup Iteration  25: 1155022.844 ops/s
# Warmup Iteration  26: 1155557.437 ops/s
# Warmup Iteration  27: 1154755.661 ops/s
# Warmup Iteration  28: 1152627.948 ops/s
# Warmup Iteration  29: 1146518.973 ops/s
# Warmup Iteration  30: 1153588.423 ops/s
Iteration   1: 1153455.036 ops/s
Iteration   2: 1154583.249 ops/s
Iteration   3: 1154651.366 ops/s
Iteration   4: 1155136.177 ops/s
Iteration   5: 1156782.123 ops/s
Iteration   6: 1153918.138 ops/s
Iteration   7: 1146541.832 ops/s
Iteration   8: 1156762.432 ops/s
Iteration   9: 1156352.832 ops/s
Iteration  10: 1155022.962 ops/s
Iteration  11: 1154788.544 ops/s
Iteration  12: 1156688.876 ops/s
Iteration  13: 1154988.418 ops/s
Iteration  14: 1155291.814 ops/s
Iteration  15: 1154959.615 ops/s
Iteration  16: 1158030.363 ops/s
Iteration  17: 1154193.524 ops/s
Iteration  18: 1156298.310 ops/s
Iteration  19: 1156697.521 ops/s
Iteration  20: 1149453.069 ops/s
Iteration  21: 1156446.713 ops/s
Iteration  22: 1153156.928 ops/s
Iteration  23: 1157272.215 ops/s
Iteration  24: 1155473.692 ops/s
Iteration  25: 1154407.919 ops/s
Iteration  26: 1153077.815 ops/s
Iteration  27: 1152398.561 ops/s
Iteration  28: 1155312.125 ops/s
Iteration  29: 1153763.295 ops/s
Iteration  30: 1154227.769 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_testToString":
  1154671.108 ±(99.9%) 1531.320 ops/s [Average]
  (min, avg, max) = (1146541.832, 1154671.108, 1158030.363), stdev = 2292.008
  CI (99.9%): [1153139.787, 1156202.428] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_testToString  thrpt   30  1154671.108 ± 1531.320  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 728125.119 ops/s
# Warmup Iteration   2: 1256222.443 ops/s
# Warmup Iteration   3: 1488188.830 ops/s
# Warmup Iteration   4: 1500034.346 ops/s
# Warmup Iteration   5: 1496451.849 ops/s
# Warmup Iteration   6: 1209822.923 ops/s
# Warmup Iteration   7: 1499584.177 ops/s
# Warmup Iteration   8: 1501230.980 ops/s
# Warmup Iteration   9: 1499785.076 ops/s
# Warmup Iteration  10: 1500284.420 ops/s
# Warmup Iteration  11: 1500785.817 ops/s
# Warmup Iteration  12: 1500522.539 ops/s
# Warmup Iteration  13: 1498685.662 ops/s
# Warmup Iteration  14: 1500168.262 ops/s
# Warmup Iteration  15: 1498192.370 ops/s
# Warmup Iteration  16: 1498541.448 ops/s
# Warmup Iteration  17: 1499281.659 ops/s
# Warmup Iteration  18: 1500404.374 ops/s
# Warmup Iteration  19: 1499150.004 ops/s
# Warmup Iteration  20: 1499580.396 ops/s
# Warmup Iteration  21: 1498840.278 ops/s
# Warmup Iteration  22: 1498152.760 ops/s
# Warmup Iteration  23: 1499835.540 ops/s
# Warmup Iteration  24: 1498185.862 ops/s
# Warmup Iteration  25: 1498754.689 ops/s
# Warmup Iteration  26: 1498451.084 ops/s
# Warmup Iteration  27: 1498773.093 ops/s
# Warmup Iteration  28: 1499256.485 ops/s
# Warmup Iteration  29: 1500210.657 ops/s
# Warmup Iteration  30: 1499844.835 ops/s
Iteration   1: 1501083.615 ops/s
Iteration   2: 1499613.549 ops/s
Iteration   3: 1493997.697 ops/s
Iteration   4: 1501670.543 ops/s
Iteration   5: 1493150.004 ops/s
Iteration   6: 1500289.325 ops/s
Iteration   7: 1496234.202 ops/s
Iteration   8: 1495643.958 ops/s
Iteration   9: 1495736.598 ops/s
Iteration  10: 1492735.789 ops/s
Iteration  11: 1495225.106 ops/s
Iteration  12: 1504632.959 ops/s
Iteration  13: 1490201.565 ops/s
Iteration  14: 1488458.217 ops/s
Iteration  15: 1486751.108 ops/s
Iteration  16: 1499507.673 ops/s
Iteration  17: 1496918.395 ops/s
Iteration  18: 1495333.171 ops/s
Iteration  19: 1499229.501 ops/s
Iteration  20: 1498055.390 ops/s
Iteration  21: 1500984.668 ops/s
Iteration  22: 1499741.625 ops/s
Iteration  23: 1499949.326 ops/s
Iteration  24: 1497939.893 ops/s
Iteration  25: 1493802.760 ops/s
Iteration  26: 1496622.101 ops/s
Iteration  27: 1498240.489 ops/s
Iteration  28: 1500125.255 ops/s
Iteration  29: 1496199.170 ops/s
Iteration  30: 1500982.271 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toArray":
  1496968.531 ±(99.9%) 2701.351 ops/s [Average]
  (min, avg, max) = (1486751.108, 1496968.531, 1504632.959), stdev = 4043.256
  CI (99.9%): [1494267.180, 1499669.882] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toArray  thrpt   30  1496968.531 ± 2701.351  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1650222.156 ops/s
# Warmup Iteration   2: 3155189.173 ops/s
# Warmup Iteration   3: 3462844.341 ops/s
# Warmup Iteration   4: 3459968.585 ops/s
# Warmup Iteration   5: 3161421.303 ops/s
# Warmup Iteration   6: 3242358.995 ops/s
# Warmup Iteration   7: 3528101.672 ops/s
# Warmup Iteration   8: 3526363.301 ops/s
# Warmup Iteration   9: 3519256.883 ops/s
# Warmup Iteration  10: 3525992.980 ops/s
# Warmup Iteration  11: 3523289.574 ops/s
# Warmup Iteration  12: 3529265.846 ops/s
# Warmup Iteration  13: 3523638.209 ops/s
# Warmup Iteration  14: 3517096.790 ops/s
# Warmup Iteration  15: 3524286.069 ops/s
# Warmup Iteration  16: 3517655.839 ops/s
# Warmup Iteration  17: 3521497.116 ops/s
# Warmup Iteration  18: 3524353.290 ops/s
# Warmup Iteration  19: 3526973.815 ops/s
# Warmup Iteration  20: 3522192.954 ops/s
# Warmup Iteration  21: 3520946.031 ops/s
# Warmup Iteration  22: 3521901.079 ops/s
# Warmup Iteration  23: 3532146.942 ops/s
# Warmup Iteration  24: 3530068.049 ops/s
# Warmup Iteration  25: 3529414.206 ops/s
# Warmup Iteration  26: 3524757.307 ops/s
# Warmup Iteration  27: 3530464.685 ops/s
# Warmup Iteration  28: 3534817.142 ops/s
# Warmup Iteration  29: 3531979.128 ops/s
# Warmup Iteration  30: 3533596.294 ops/s
Iteration   1: 3529843.971 ops/s
Iteration   2: 3532849.476 ops/s
Iteration   3: 3525524.134 ops/s
Iteration   4: 3529771.542 ops/s
Iteration   5: 3526710.348 ops/s
Iteration   6: 3520087.815 ops/s
Iteration   7: 3536490.044 ops/s
Iteration   8: 3531600.741 ops/s
Iteration   9: 3521403.513 ops/s
Iteration  10: 3513315.053 ops/s
Iteration  11: 3519563.240 ops/s
Iteration  12: 3533324.545 ops/s
Iteration  13: 3535549.648 ops/s
Iteration  14: 3523098.096 ops/s
Iteration  15: 3530328.284 ops/s
Iteration  16: 3528634.877 ops/s
Iteration  17: 3530872.319 ops/s
Iteration  18: 3535092.818 ops/s
Iteration  19: 3530140.672 ops/s
Iteration  20: 3531213.323 ops/s
Iteration  21: 3534943.235 ops/s
Iteration  22: 3533725.000 ops/s
Iteration  23: 3534761.133 ops/s
Iteration  24: 3534605.744 ops/s
Iteration  25: 3532688.125 ops/s
Iteration  26: 3537227.235 ops/s
Iteration  27: 3530273.023 ops/s
Iteration  28: 3528201.370 ops/s
Iteration  29: 3535666.224 ops/s
Iteration  30: 3530107.977 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toImmutable":
  3529920.451 ±(99.9%) 3803.241 ops/s [Average]
  (min, avg, max) = (3513315.053, 3529920.451, 3537227.235), stdev = 5692.512
  CI (99.9%): [3526117.210, 3533723.692] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toImmutable  thrpt   30  3529920.451 ± 3803.241  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 890438.561 ops/s
# Warmup Iteration   2: 2042380.585 ops/s
# Warmup Iteration   3: 2139398.570 ops/s
# Warmup Iteration   4: 2115670.322 ops/s
# Warmup Iteration   5: 1833740.058 ops/s
# Warmup Iteration   6: 2157610.407 ops/s
# Warmup Iteration   7: 2150591.936 ops/s
# Warmup Iteration   8: 2155204.817 ops/s
# Warmup Iteration   9: 2153397.158 ops/s
# Warmup Iteration  10: 2156904.206 ops/s
# Warmup Iteration  11: 2156508.668 ops/s
# Warmup Iteration  12: 2155508.148 ops/s
# Warmup Iteration  13: 2158661.914 ops/s
# Warmup Iteration  14: 2158416.038 ops/s
# Warmup Iteration  15: 2160512.388 ops/s
# Warmup Iteration  16: 2153610.875 ops/s
# Warmup Iteration  17: 2138244.977 ops/s
# Warmup Iteration  18: 2143548.293 ops/s
# Warmup Iteration  19: 2156708.428 ops/s
# Warmup Iteration  20: 2156034.266 ops/s
# Warmup Iteration  21: 2138276.281 ops/s
# Warmup Iteration  22: 2169305.680 ops/s
# Warmup Iteration  23: 2149100.777 ops/s
# Warmup Iteration  24: 2161926.319 ops/s
# Warmup Iteration  25: 2156992.181 ops/s
# Warmup Iteration  26: 2158153.346 ops/s
# Warmup Iteration  27: 2153795.785 ops/s
# Warmup Iteration  28: 2153230.172 ops/s
# Warmup Iteration  29: 2154670.993 ops/s
# Warmup Iteration  30: 2152076.479 ops/s
Iteration   1: 2181591.416 ops/s
Iteration   2: 2144399.348 ops/s
Iteration   3: 2139578.195 ops/s
Iteration   4: 2169600.298 ops/s
Iteration   5: 2187334.328 ops/s
Iteration   6: 2137498.661 ops/s
Iteration   7: 2139276.618 ops/s
Iteration   8: 2170565.073 ops/s
Iteration   9: 2182197.336 ops/s
Iteration  10: 2186905.750 ops/s
Iteration  11: 2139482.459 ops/s
Iteration  12: 2137501.453 ops/s
Iteration  13: 2174888.232 ops/s
Iteration  14: 2190825.912 ops/s
Iteration  15: 2140302.696 ops/s
Iteration  16: 2156898.785 ops/s
Iteration  17: 2166238.837 ops/s
Iteration  18: 2140862.281 ops/s
Iteration  19: 2178855.471 ops/s
Iteration  20: 2134795.040 ops/s
Iteration  21: 2149905.189 ops/s
Iteration  22: 2163845.295 ops/s
Iteration  23: 2179633.832 ops/s
Iteration  24: 2138537.971 ops/s
Iteration  25: 2151910.502 ops/s
Iteration  26: 2168016.976 ops/s
Iteration  27: 2139944.656 ops/s
Iteration  28: 2190532.259 ops/s
Iteration  29: 2149450.189 ops/s
Iteration  30: 2160683.597 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toList":
  2159735.289 ±(99.9%) 12808.961 ops/s [Average]
  (min, avg, max) = (2134795.040, 2159735.289, 2190825.912), stdev = 19171.851
  CI (99.9%): [2146926.328, 2172544.249] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toList  thrpt   30  2159735.289 ± 12808.961  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toMapOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toMapOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1006088.957 ops/s
# Warmup Iteration   2: 2098684.506 ops/s
# Warmup Iteration   3: 2194766.604 ops/s
# Warmup Iteration   4: 2208773.338 ops/s
# Warmup Iteration   5: 1851567.806 ops/s
# Warmup Iteration   6: 2197896.907 ops/s
# Warmup Iteration   7: 2214708.779 ops/s
# Warmup Iteration   8: 2210684.601 ops/s
# Warmup Iteration   9: 2215249.570 ops/s
# Warmup Iteration  10: 2212173.104 ops/s
# Warmup Iteration  11: 2210537.831 ops/s
# Warmup Iteration  12: 2211403.330 ops/s
# Warmup Iteration  13: 2206510.097 ops/s
# Warmup Iteration  14: 2213227.120 ops/s
# Warmup Iteration  15: 2212631.113 ops/s
# Warmup Iteration  16: 2210674.604 ops/s
# Warmup Iteration  17: 2206582.138 ops/s
# Warmup Iteration  18: 2213928.099 ops/s
# Warmup Iteration  19: 2208446.703 ops/s
# Warmup Iteration  20: 2214684.539 ops/s
# Warmup Iteration  21: 2209960.484 ops/s
# Warmup Iteration  22: 2214261.302 ops/s
# Warmup Iteration  23: 2209110.388 ops/s
# Warmup Iteration  24: 2214309.187 ops/s
# Warmup Iteration  25: 2214226.608 ops/s
# Warmup Iteration  26: 2213155.712 ops/s
# Warmup Iteration  27: 2204072.425 ops/s
# Warmup Iteration  28: 2206798.581 ops/s
# Warmup Iteration  29: 2208583.568 ops/s
# Warmup Iteration  30: 2209218.823 ops/s
Iteration   1: 2207556.228 ops/s
Iteration   2: 2208191.784 ops/s
Iteration   3: 2210526.932 ops/s
Iteration   4: 2209453.378 ops/s
Iteration   5: 2137881.880 ops/s
Iteration   6: 2142266.916 ops/s
Iteration   7: 2216394.486 ops/s
Iteration   8: 2207667.817 ops/s
Iteration   9: 2202910.241 ops/s
Iteration  10: 2208128.972 ops/s
Iteration  11: 2214656.444 ops/s
Iteration  12: 2209746.163 ops/s
Iteration  13: 2211561.778 ops/s
Iteration  14: 2213634.688 ops/s
Iteration  15: 2213270.370 ops/s
Iteration  16: 2211639.786 ops/s
Iteration  17: 2210415.964 ops/s
Iteration  18: 2216191.639 ops/s
Iteration  19: 2213483.774 ops/s
Iteration  20: 2211624.601 ops/s
Iteration  21: 2209035.351 ops/s
Iteration  22: 2211603.796 ops/s
Iteration  23: 2213399.007 ops/s
Iteration  24: 2208967.396 ops/s
Iteration  25: 2203446.360 ops/s
Iteration  26: 2205517.852 ops/s
Iteration  27: 2210114.919 ops/s
Iteration  28: 2207197.133 ops/s
Iteration  29: 2215084.761 ops/s
Iteration  30: 2210354.881 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toMapOfItemToCount":
  2205730.843 ±(99.9%) 12136.248 ops/s [Average]
  (min, avg, max) = (2137881.880, 2205730.843, 2216394.486), stdev = 18164.966
  CI (99.9%): [2193594.595, 2217867.091] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toMapOfItemToCount  thrpt   30  2205730.843 ± 12136.248  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 549113.322 ops/s
# Warmup Iteration   2: 1066182.330 ops/s
# Warmup Iteration   3: 1185835.028 ops/s
# Warmup Iteration   4: 1193964.499 ops/s
# Warmup Iteration   5: 1087674.342 ops/s
# Warmup Iteration   6: 1108562.154 ops/s
# Warmup Iteration   7: 1199138.935 ops/s
# Warmup Iteration   8: 1193170.358 ops/s
# Warmup Iteration   9: 1196048.861 ops/s
# Warmup Iteration  10: 1200070.426 ops/s
# Warmup Iteration  11: 1197081.192 ops/s
# Warmup Iteration  12: 1198399.818 ops/s
# Warmup Iteration  13: 1199094.537 ops/s
# Warmup Iteration  14: 1196181.511 ops/s
# Warmup Iteration  15: 1200556.787 ops/s
# Warmup Iteration  16: 1198497.563 ops/s
# Warmup Iteration  17: 1190626.617 ops/s
# Warmup Iteration  18: 1194791.832 ops/s
# Warmup Iteration  19: 1197365.261 ops/s
# Warmup Iteration  20: 1194805.115 ops/s
# Warmup Iteration  21: 1197603.085 ops/s
# Warmup Iteration  22: 1190864.893 ops/s
# Warmup Iteration  23: 1190557.406 ops/s
# Warmup Iteration  24: 1188550.839 ops/s
# Warmup Iteration  25: 1192576.563 ops/s
# Warmup Iteration  26: 1192455.065 ops/s
# Warmup Iteration  27: 1194442.256 ops/s
# Warmup Iteration  28: 1194347.938 ops/s
# Warmup Iteration  29: 1193346.427 ops/s
# Warmup Iteration  30: 1193612.784 ops/s
Iteration   1: 1196570.127 ops/s
Iteration   2: 1193702.652 ops/s
Iteration   3: 1195966.798 ops/s
Iteration   4: 1193549.175 ops/s
Iteration   5: 1195720.709 ops/s
Iteration   6: 1197726.952 ops/s
Iteration   7: 1190889.680 ops/s
Iteration   8: 1192197.735 ops/s
Iteration   9: 1195182.830 ops/s
Iteration  10: 1193389.398 ops/s
Iteration  11: 1195106.458 ops/s
Iteration  12: 1194889.226 ops/s
Iteration  13: 1189206.586 ops/s
Iteration  14: 1191743.554 ops/s
Iteration  15: 1192850.635 ops/s
Iteration  16: 1195121.149 ops/s
Iteration  17: 1198748.219 ops/s
Iteration  18: 1196087.422 ops/s
Iteration  19: 1198100.042 ops/s
Iteration  20: 1198232.676 ops/s
Iteration  21: 1194879.906 ops/s
Iteration  22: 1197686.705 ops/s
Iteration  23: 1195207.162 ops/s
Iteration  24: 1194102.057 ops/s
Iteration  25: 1197487.130 ops/s
Iteration  26: 1193917.918 ops/s
Iteration  27: 1192020.007 ops/s
Iteration  28: 1194628.519 ops/s
Iteration  29: 1194802.106 ops/s
Iteration  30: 1198294.804 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedBag":
  1194933.611 ±(99.9%) 1578.396 ops/s [Average]
  (min, avg, max) = (1189206.586, 1194933.611, 1198748.219), stdev = 2362.469
  CI (99.9%): [1193355.215, 1196512.007] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedBag  thrpt   30  1194933.611 ± 1578.396  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 442476.998 ops/s
# Warmup Iteration   2: 838075.061 ops/s
# Warmup Iteration   3: 949241.790 ops/s
# Warmup Iteration   4: 954546.091 ops/s
# Warmup Iteration   5: 943611.672 ops/s
# Warmup Iteration   6: 808187.737 ops/s
# Warmup Iteration   7: 952925.047 ops/s
# Warmup Iteration   8: 953477.293 ops/s
# Warmup Iteration   9: 953333.371 ops/s
# Warmup Iteration  10: 953361.259 ops/s
# Warmup Iteration  11: 952915.597 ops/s
# Warmup Iteration  12: 952436.988 ops/s
# Warmup Iteration  13: 953955.482 ops/s
# Warmup Iteration  14: 953419.391 ops/s
# Warmup Iteration  15: 953394.185 ops/s
# Warmup Iteration  16: 953114.673 ops/s
# Warmup Iteration  17: 952427.831 ops/s
# Warmup Iteration  18: 954505.969 ops/s
# Warmup Iteration  19: 952327.184 ops/s
# Warmup Iteration  20: 952125.048 ops/s
# Warmup Iteration  21: 951849.346 ops/s
# Warmup Iteration  22: 952297.777 ops/s
# Warmup Iteration  23: 952847.699 ops/s
# Warmup Iteration  24: 951087.004 ops/s
# Warmup Iteration  25: 953498.569 ops/s
# Warmup Iteration  26: 952623.875 ops/s
# Warmup Iteration  27: 950438.572 ops/s
# Warmup Iteration  28: 953703.242 ops/s
# Warmup Iteration  29: 954556.017 ops/s
# Warmup Iteration  30: 953443.409 ops/s
Iteration   1: 951302.852 ops/s
Iteration   2: 950597.850 ops/s
Iteration   3: 950668.933 ops/s
Iteration   4: 953289.166 ops/s
Iteration   5: 955202.872 ops/s
Iteration   6: 952214.452 ops/s
Iteration   7: 955341.463 ops/s
Iteration   8: 952226.118 ops/s
Iteration   9: 954431.849 ops/s
Iteration  10: 955527.291 ops/s
Iteration  11: 952722.940 ops/s
Iteration  12: 956659.141 ops/s
Iteration  13: 951840.569 ops/s
Iteration  14: 952512.254 ops/s
Iteration  15: 952881.130 ops/s
Iteration  16: 953892.673 ops/s
Iteration  17: 954479.943 ops/s
Iteration  18: 952358.492 ops/s
Iteration  19: 954291.465 ops/s
Iteration  20: 955084.878 ops/s
Iteration  21: 953817.748 ops/s
Iteration  22: 956759.724 ops/s
Iteration  23: 952434.927 ops/s
Iteration  24: 953247.801 ops/s
Iteration  25: 952992.498 ops/s
Iteration  26: 951415.446 ops/s
Iteration  27: 955780.238 ops/s
Iteration  28: 951503.983 ops/s
Iteration  29: 952193.942 ops/s
Iteration  30: 955723.164 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedBagBy":
  953446.527 ±(99.9%) 1166.344 ops/s [Average]
  (min, avg, max) = (950597.850, 953446.527, 956759.724), stdev = 1745.730
  CI (99.9%): [952280.182, 954612.871] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  953446.527 ± 1166.344  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedBagWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedBagWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 673645.328 ops/s
# Warmup Iteration   2: 1350157.207 ops/s
# Warmup Iteration   3: 1554783.903 ops/s
# Warmup Iteration   4: 1566825.774 ops/s
# Warmup Iteration   5: 1430507.507 ops/s
# Warmup Iteration   6: 1426567.587 ops/s
# Warmup Iteration   7: 1566027.160 ops/s
# Warmup Iteration   8: 1567707.561 ops/s
# Warmup Iteration   9: 1570751.142 ops/s
# Warmup Iteration  10: 1568817.284 ops/s
# Warmup Iteration  11: 1569238.341 ops/s
# Warmup Iteration  12: 1567645.731 ops/s
# Warmup Iteration  13: 1569394.329 ops/s
# Warmup Iteration  14: 1566804.722 ops/s
# Warmup Iteration  15: 1567536.808 ops/s
# Warmup Iteration  16: 1568150.216 ops/s
# Warmup Iteration  17: 1566152.488 ops/s
# Warmup Iteration  18: 1567372.016 ops/s
# Warmup Iteration  19: 1571776.273 ops/s
# Warmup Iteration  20: 1570775.155 ops/s
# Warmup Iteration  21: 1567306.113 ops/s
# Warmup Iteration  22: 1568974.398 ops/s
# Warmup Iteration  23: 1570998.554 ops/s
# Warmup Iteration  24: 1571001.744 ops/s
# Warmup Iteration  25: 1569715.175 ops/s
# Warmup Iteration  26: 1569530.556 ops/s
# Warmup Iteration  27: 1569707.473 ops/s
# Warmup Iteration  28: 1561257.386 ops/s
# Warmup Iteration  29: 1566825.754 ops/s
# Warmup Iteration  30: 1570627.231 ops/s
Iteration   1: 1568773.379 ops/s
Iteration   2: 1572082.823 ops/s
Iteration   3: 1572105.565 ops/s
Iteration   4: 1572210.593 ops/s
Iteration   5: 1563122.559 ops/s
Iteration   6: 1568552.217 ops/s
Iteration   7: 1571590.489 ops/s
Iteration   8: 1568912.795 ops/s
Iteration   9: 1567875.103 ops/s
Iteration  10: 1572610.962 ops/s
Iteration  11: 1568392.532 ops/s
Iteration  12: 1568602.542 ops/s
Iteration  13: 1571904.163 ops/s
Iteration  14: 1568721.101 ops/s
Iteration  15: 1571164.512 ops/s
Iteration  16: 1570492.567 ops/s
Iteration  17: 1567515.870 ops/s
Iteration  18: 1570850.268 ops/s
Iteration  19: 1567422.643 ops/s
Iteration  20: 1569192.067 ops/s
Iteration  21: 1573137.733 ops/s
Iteration  22: 1566710.821 ops/s
Iteration  23: 1572928.023 ops/s
Iteration  24: 1571508.937 ops/s
Iteration  25: 1570285.860 ops/s
Iteration  26: 1572256.198 ops/s
Iteration  27: 1567693.836 ops/s
Iteration  28: 1569673.003 ops/s
Iteration  29: 1572221.934 ops/s
Iteration  30: 1567713.584 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedBagWithComparator":
  1569874.156 ±(99.9%) 1554.485 ops/s [Average]
  (min, avg, max) = (1563122.559, 1569874.156, 1573137.733), stdev = 2326.680
  CI (99.9%): [1568319.671, 1571428.641] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedBagWithComparator  thrpt   30  1569874.156 ± 1554.485  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 830476.832 ops/s
# Warmup Iteration   2: 1564947.596 ops/s
# Warmup Iteration   3: 1810396.935 ops/s
# Warmup Iteration   4: 1818935.838 ops/s
# Warmup Iteration   5: 1817537.241 ops/s
# Warmup Iteration   6: 1496992.970 ops/s
# Warmup Iteration   7: 1818389.702 ops/s
# Warmup Iteration   8: 1821289.206 ops/s
# Warmup Iteration   9: 1820603.770 ops/s
# Warmup Iteration  10: 1821901.678 ops/s
# Warmup Iteration  11: 1822102.694 ops/s
# Warmup Iteration  12: 1821924.649 ops/s
# Warmup Iteration  13: 1818516.834 ops/s
# Warmup Iteration  14: 1818212.839 ops/s
# Warmup Iteration  15: 1801411.359 ops/s
# Warmup Iteration  16: 1817603.507 ops/s
# Warmup Iteration  17: 1814314.597 ops/s
# Warmup Iteration  18: 1819455.825 ops/s
# Warmup Iteration  19: 1819911.468 ops/s
# Warmup Iteration  20: 1816595.988 ops/s
# Warmup Iteration  21: 1820321.814 ops/s
# Warmup Iteration  22: 1818412.957 ops/s
# Warmup Iteration  23: 1819454.904 ops/s
# Warmup Iteration  24: 1821081.547 ops/s
# Warmup Iteration  25: 1821307.870 ops/s
# Warmup Iteration  26: 1820440.309 ops/s
# Warmup Iteration  27: 1816733.402 ops/s
# Warmup Iteration  28: 1819049.299 ops/s
# Warmup Iteration  29: 1822507.919 ops/s
# Warmup Iteration  30: 1821698.377 ops/s
Iteration   1: 1821057.991 ops/s
Iteration   2: 1823037.578 ops/s
Iteration   3: 1817744.731 ops/s
Iteration   4: 1820549.870 ops/s
Iteration   5: 1821803.505 ops/s
Iteration   6: 1818213.093 ops/s
Iteration   7: 1822764.336 ops/s
Iteration   8: 1815340.012 ops/s
Iteration   9: 1817793.639 ops/s
Iteration  10: 1825124.596 ops/s
Iteration  11: 1819841.046 ops/s
Iteration  12: 1823411.799 ops/s
Iteration  13: 1820853.820 ops/s
Iteration  14: 1819568.404 ops/s
Iteration  15: 1824039.642 ops/s
Iteration  16: 1821875.571 ops/s
Iteration  17: 1816141.384 ops/s
Iteration  18: 1819729.419 ops/s
Iteration  19: 1819747.310 ops/s
Iteration  20: 1822354.722 ops/s
Iteration  21: 1820357.157 ops/s
Iteration  22: 1822963.774 ops/s
Iteration  23: 1819328.058 ops/s
Iteration  24: 1819457.917 ops/s
Iteration  25: 1823482.647 ops/s
Iteration  26: 1821105.621 ops/s
Iteration  27: 1822980.710 ops/s
Iteration  28: 1820572.123 ops/s
Iteration  29: 1818821.323 ops/s
Iteration  30: 1822645.625 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedList":
  1820756.914 ±(99.9%) 1564.781 ops/s [Average]
  (min, avg, max) = (1815340.012, 1820756.914, 1825124.596), stdev = 2342.090
  CI (99.9%): [1819192.133, 1822321.695] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedList  thrpt   30  1820756.914 ± 1564.781  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 882535.284 ops/s
# Warmup Iteration   2: 1389354.629 ops/s
# Warmup Iteration   3: 1697292.429 ops/s
# Warmup Iteration   4: 1686282.451 ops/s
# Warmup Iteration   5: 1693146.214 ops/s
# Warmup Iteration   6: 1692952.911 ops/s
# Warmup Iteration   7: 1392445.441 ops/s
# Warmup Iteration   8: 1698232.436 ops/s
# Warmup Iteration   9: 1697550.806 ops/s
# Warmup Iteration  10: 1698171.356 ops/s
# Warmup Iteration  11: 1699487.894 ops/s
# Warmup Iteration  12: 1698820.981 ops/s
# Warmup Iteration  13: 1698257.523 ops/s
# Warmup Iteration  14: 1692015.282 ops/s
# Warmup Iteration  15: 1690289.794 ops/s
# Warmup Iteration  16: 1698789.856 ops/s
# Warmup Iteration  17: 1696862.897 ops/s
# Warmup Iteration  18: 1695629.750 ops/s
# Warmup Iteration  19: 1696572.569 ops/s
# Warmup Iteration  20: 1699563.313 ops/s
# Warmup Iteration  21: 1700129.432 ops/s
# Warmup Iteration  22: 1694823.536 ops/s
# Warmup Iteration  23: 1686714.869 ops/s
# Warmup Iteration  24: 1699577.540 ops/s
# Warmup Iteration  25: 1698554.351 ops/s
# Warmup Iteration  26: 1699208.393 ops/s
# Warmup Iteration  27: 1699252.260 ops/s
# Warmup Iteration  28: 1699607.424 ops/s
# Warmup Iteration  29: 1700883.111 ops/s
# Warmup Iteration  30: 1695608.756 ops/s
Iteration   1: 1701101.762 ops/s
Iteration   2: 1699175.025 ops/s
Iteration   3: 1697973.157 ops/s
Iteration   4: 1700165.205 ops/s
Iteration   5: 1696916.481 ops/s
Iteration   6: 1699938.263 ops/s
Iteration   7: 1696811.878 ops/s
Iteration   8: 1691696.123 ops/s
Iteration   9: 1696378.952 ops/s
Iteration  10: 1701132.527 ops/s
Iteration  11: 1697133.061 ops/s
Iteration  12: 1703054.483 ops/s
Iteration  13: 1699199.076 ops/s
Iteration  14: 1701066.494 ops/s
Iteration  15: 1697427.676 ops/s
Iteration  16: 1699981.139 ops/s
Iteration  17: 1696412.963 ops/s
Iteration  18: 1693577.002 ops/s
Iteration  19: 1698707.374 ops/s
Iteration  20: 1695360.487 ops/s
Iteration  21: 1698289.513 ops/s
Iteration  22: 1696388.813 ops/s
Iteration  23: 1701242.877 ops/s
Iteration  24: 1696932.370 ops/s
Iteration  25: 1700400.347 ops/s
Iteration  26: 1697244.358 ops/s
Iteration  27: 1700474.558 ops/s
Iteration  28: 1699255.035 ops/s
Iteration  29: 1701284.612 ops/s
Iteration  30: 1697808.339 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedListBy":
  1698417.665 ±(99.9%) 1660.409 ops/s [Average]
  (min, avg, max) = (1691696.123, 1698417.665, 1703054.483), stdev = 2485.222
  CI (99.9%): [1696757.256, 1700078.074] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedListBy  thrpt   30  1698417.665 ± 1660.409  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 423394.903 ops/s
# Warmup Iteration   2: 946084.685 ops/s
# Warmup Iteration   3: 994678.143 ops/s
# Warmup Iteration   4: 988739.723 ops/s
# Warmup Iteration   5: 857201.653 ops/s
# Warmup Iteration   6: 1004349.911 ops/s
# Warmup Iteration   7: 1005538.396 ops/s
# Warmup Iteration   8: 1003219.056 ops/s
# Warmup Iteration   9: 1002143.747 ops/s
# Warmup Iteration  10: 1001381.685 ops/s
# Warmup Iteration  11: 999918.617 ops/s
# Warmup Iteration  12: 1003369.628 ops/s
# Warmup Iteration  13: 1004240.947 ops/s
# Warmup Iteration  14: 1004879.539 ops/s
# Warmup Iteration  15: 1005087.343 ops/s
# Warmup Iteration  16: 1002908.849 ops/s
# Warmup Iteration  17: 1001191.149 ops/s
# Warmup Iteration  18: 1003513.252 ops/s
# Warmup Iteration  19: 1004302.468 ops/s
# Warmup Iteration  20: 1003233.972 ops/s
# Warmup Iteration  21: 999429.718 ops/s
# Warmup Iteration  22: 1005437.827 ops/s
# Warmup Iteration  23: 1003064.803 ops/s
# Warmup Iteration  24: 1004436.721 ops/s
# Warmup Iteration  25: 1002214.890 ops/s
# Warmup Iteration  26: 1001180.112 ops/s
# Warmup Iteration  27: 1002241.493 ops/s
# Warmup Iteration  28: 1005630.484 ops/s
# Warmup Iteration  29: 1002012.645 ops/s
# Warmup Iteration  30: 1002849.380 ops/s
Iteration   1: 1004441.542 ops/s
Iteration   2: 1001907.782 ops/s
Iteration   3: 1003888.752 ops/s
Iteration   4: 1003906.736 ops/s
Iteration   5: 1004520.646 ops/s
Iteration   6: 1003432.252 ops/s
Iteration   7: 1004121.062 ops/s
Iteration   8: 1003744.460 ops/s
Iteration   9: 1005725.664 ops/s
Iteration  10: 1005248.630 ops/s
Iteration  11: 1003163.011 ops/s
Iteration  12: 1006435.318 ops/s
Iteration  13: 1004099.544 ops/s
Iteration  14: 1002614.758 ops/s
Iteration  15: 1006253.853 ops/s
Iteration  16: 1003749.398 ops/s
Iteration  17: 1003368.118 ops/s
Iteration  18: 1003231.678 ops/s
Iteration  19: 1003418.923 ops/s
Iteration  20: 998294.113 ops/s
Iteration  21: 999883.257 ops/s
Iteration  22: 1004322.880 ops/s
Iteration  23: 1005447.372 ops/s
Iteration  24: 1002992.624 ops/s
Iteration  25: 1001862.304 ops/s
Iteration  26: 1004475.327 ops/s
Iteration  27: 1004213.676 ops/s
Iteration  28: 1009299.650 ops/s
Iteration  29: 1004016.074 ops/s
Iteration  30: 1001861.504 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedMap":
  1003798.030 ±(99.9%) 1323.667 ops/s [Average]
  (min, avg, max) = (998294.113, 1003798.030, 1009299.650), stdev = 1981.203
  CI (99.9%): [1002474.363, 1005121.697] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedMap  thrpt   30  1003798.030 ± 1323.667  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedMapBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedMapBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 358482.193 ops/s
# Warmup Iteration   2: 692356.508 ops/s
# Warmup Iteration   3: 773306.230 ops/s
# Warmup Iteration   4: 777778.614 ops/s
# Warmup Iteration   5: 745277.567 ops/s
# Warmup Iteration   6: 691205.807 ops/s
# Warmup Iteration   7: 779030.064 ops/s
# Warmup Iteration   8: 779832.584 ops/s
# Warmup Iteration   9: 781537.475 ops/s
# Warmup Iteration  10: 783363.171 ops/s
# Warmup Iteration  11: 773638.663 ops/s
# Warmup Iteration  12: 782595.357 ops/s
# Warmup Iteration  13: 776634.057 ops/s
# Warmup Iteration  14: 774614.201 ops/s
# Warmup Iteration  15: 781086.495 ops/s
# Warmup Iteration  16: 782641.786 ops/s
# Warmup Iteration  17: 781410.625 ops/s
# Warmup Iteration  18: 778366.702 ops/s
# Warmup Iteration  19: 778944.290 ops/s
# Warmup Iteration  20: 781231.164 ops/s
# Warmup Iteration  21: 776688.761 ops/s
# Warmup Iteration  22: 780351.051 ops/s
# Warmup Iteration  23: 779840.254 ops/s
# Warmup Iteration  24: 780220.618 ops/s
# Warmup Iteration  25: 778102.206 ops/s
# Warmup Iteration  26: 781163.344 ops/s
# Warmup Iteration  27: 780437.033 ops/s
# Warmup Iteration  28: 780490.976 ops/s
# Warmup Iteration  29: 777629.075 ops/s
# Warmup Iteration  30: 779543.779 ops/s
Iteration   1: 780354.663 ops/s
Iteration   2: 780873.006 ops/s
Iteration   3: 774000.607 ops/s
Iteration   4: 779202.816 ops/s
Iteration   5: 773613.607 ops/s
Iteration   6: 773256.244 ops/s
Iteration   7: 774839.336 ops/s
Iteration   8: 778590.586 ops/s
Iteration   9: 783110.374 ops/s
Iteration  10: 778488.208 ops/s
Iteration  11: 781578.775 ops/s
Iteration  12: 776498.264 ops/s
Iteration  13: 777168.982 ops/s
Iteration  14: 778363.509 ops/s
Iteration  15: 779954.223 ops/s
Iteration  16: 778563.980 ops/s
Iteration  17: 780670.881 ops/s
Iteration  18: 777498.137 ops/s
Iteration  19: 779245.489 ops/s
Iteration  20: 777332.625 ops/s
Iteration  21: 771950.455 ops/s
Iteration  22: 783564.982 ops/s
Iteration  23: 777922.391 ops/s
Iteration  24: 781333.800 ops/s
Iteration  25: 778463.929 ops/s
Iteration  26: 779702.894 ops/s
Iteration  27: 777433.400 ops/s
Iteration  28: 780536.194 ops/s
Iteration  29: 781741.835 ops/s
Iteration  30: 777485.020 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedMapBy":
  778444.640 ±(99.9%) 1905.816 ops/s [Average]
  (min, avg, max) = (771950.455, 778444.640, 783564.982), stdev = 2852.536
  CI (99.9%): [776538.825, 780350.456] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedMapBy  thrpt   30  778444.640 ± 1905.816  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedMap_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedMap_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 409236.361 ops/s
# Warmup Iteration   2: 908968.203 ops/s
# Warmup Iteration   3: 987624.557 ops/s
# Warmup Iteration   4: 988096.945 ops/s
# Warmup Iteration   5: 830494.857 ops/s
# Warmup Iteration   6: 984492.983 ops/s
# Warmup Iteration   7: 986743.819 ops/s
# Warmup Iteration   8: 985010.699 ops/s
# Warmup Iteration   9: 987349.856 ops/s
# Warmup Iteration  10: 985119.050 ops/s
# Warmup Iteration  11: 987806.188 ops/s
# Warmup Iteration  12: 984318.342 ops/s
# Warmup Iteration  13: 987056.982 ops/s
# Warmup Iteration  14: 983518.620 ops/s
# Warmup Iteration  15: 981693.457 ops/s
# Warmup Iteration  16: 981105.413 ops/s
# Warmup Iteration  17: 987102.540 ops/s
# Warmup Iteration  18: 981424.805 ops/s
# Warmup Iteration  19: 984751.914 ops/s
# Warmup Iteration  20: 984066.133 ops/s
# Warmup Iteration  21: 982657.541 ops/s
# Warmup Iteration  22: 985379.774 ops/s
# Warmup Iteration  23: 987698.252 ops/s
# Warmup Iteration  24: 984865.506 ops/s
# Warmup Iteration  25: 985537.251 ops/s
# Warmup Iteration  26: 987196.449 ops/s
# Warmup Iteration  27: 988174.175 ops/s
# Warmup Iteration  28: 987843.707 ops/s
# Warmup Iteration  29: 986796.255 ops/s
# Warmup Iteration  30: 986220.409 ops/s
Iteration   1: 987555.667 ops/s
Iteration   2: 987429.247 ops/s
Iteration   3: 987474.987 ops/s
Iteration   4: 987805.672 ops/s
Iteration   5: 991315.511 ops/s
Iteration   6: 987872.833 ops/s
Iteration   7: 989655.906 ops/s
Iteration   8: 984542.845 ops/s
Iteration   9: 987349.519 ops/s
Iteration  10: 985134.712 ops/s
Iteration  11: 988262.009 ops/s
Iteration  12: 985657.410 ops/s
Iteration  13: 986238.453 ops/s
Iteration  14: 987415.451 ops/s
Iteration  15: 986090.633 ops/s
Iteration  16: 985372.473 ops/s
Iteration  17: 988367.220 ops/s
Iteration  18: 988342.968 ops/s
Iteration  19: 986998.873 ops/s
Iteration  20: 986032.007 ops/s
Iteration  21: 988193.564 ops/s
Iteration  22: 987971.264 ops/s
Iteration  23: 986212.073 ops/s
Iteration  24: 988245.371 ops/s
Iteration  25: 989238.276 ops/s
Iteration  26: 985879.676 ops/s
Iteration  27: 984349.674 ops/s
Iteration  28: 985995.207 ops/s
Iteration  29: 986831.632 ops/s
Iteration  30: 983570.484 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedMap_with_comparator":
  987046.720 ±(99.9%) 1111.356 ops/s [Average]
  (min, avg, max) = (983570.484, 987046.720, 991315.511), stdev = 1663.426
  CI (99.9%): [985935.364, 988158.077] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedMap_with_comparator  thrpt   30  987046.720 ± 1111.356  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1151192.304 ops/s
# Warmup Iteration   2: 2511319.101 ops/s
# Warmup Iteration   3: 2724440.134 ops/s
# Warmup Iteration   4: 2734156.947 ops/s
# Warmup Iteration   5: 2262958.064 ops/s
# Warmup Iteration   6: 2742835.319 ops/s
# Warmup Iteration   7: 2746214.864 ops/s
# Warmup Iteration   8: 2740485.541 ops/s
# Warmup Iteration   9: 2745247.125 ops/s
# Warmup Iteration  10: 2741595.456 ops/s
# Warmup Iteration  11: 2742206.955 ops/s
# Warmup Iteration  12: 2738542.504 ops/s
# Warmup Iteration  13: 2743709.647 ops/s
# Warmup Iteration  14: 2738711.802 ops/s
# Warmup Iteration  15: 2746521.579 ops/s
# Warmup Iteration  16: 2742972.244 ops/s
# Warmup Iteration  17: 2744190.014 ops/s
# Warmup Iteration  18: 2739268.724 ops/s
# Warmup Iteration  19: 2743521.181 ops/s
# Warmup Iteration  20: 2737426.843 ops/s
# Warmup Iteration  21: 2746017.191 ops/s
# Warmup Iteration  22: 2738339.202 ops/s
# Warmup Iteration  23: 2739190.015 ops/s
# Warmup Iteration  24: 2740381.107 ops/s
# Warmup Iteration  25: 2744270.681 ops/s
# Warmup Iteration  26: 2745424.426 ops/s
# Warmup Iteration  27: 2744788.986 ops/s
# Warmup Iteration  28: 2742554.177 ops/s
# Warmup Iteration  29: 2746378.410 ops/s
# Warmup Iteration  30: 2744604.221 ops/s
Iteration   1: 2743383.570 ops/s
Iteration   2: 2747964.853 ops/s
Iteration   3: 2743643.657 ops/s
Iteration   4: 2738300.397 ops/s
Iteration   5: 2738097.078 ops/s
Iteration   6: 2744534.128 ops/s
Iteration   7: 2721423.540 ops/s
Iteration   8: 2739486.409 ops/s
Iteration   9: 2738421.967 ops/s
Iteration  10: 2744759.981 ops/s
Iteration  11: 2727555.918 ops/s
Iteration  12: 2740961.845 ops/s
Iteration  13: 2739584.843 ops/s
Iteration  14: 2748205.876 ops/s
Iteration  15: 2746948.089 ops/s
Iteration  16: 2741347.865 ops/s
Iteration  17: 2741164.161 ops/s
Iteration  18: 2743940.510 ops/s
Iteration  19: 2747751.361 ops/s
Iteration  20: 2744327.999 ops/s
Iteration  21: 2735708.118 ops/s
Iteration  22: 2733200.630 ops/s
Iteration  23: 2742989.912 ops/s
Iteration  24: 2736589.963 ops/s
Iteration  25: 2739280.283 ops/s
Iteration  26: 2740642.560 ops/s
Iteration  27: 2744168.652 ops/s
Iteration  28: 2730988.294 ops/s
Iteration  29: 2734168.261 ops/s
Iteration  30: 2736568.859 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedSet":
  2739870.319 ±(99.9%) 4086.303 ops/s [Average]
  (min, avg, max) = (2721423.540, 2739870.319, 2748205.876), stdev = 6116.186
  CI (99.9%): [2735784.017, 2743956.622] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedSet  thrpt   30  2739870.319 ± 4086.303  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 592348.882 ops/s
# Warmup Iteration   2: 1106200.090 ops/s
# Warmup Iteration   3: 1238110.578 ops/s
# Warmup Iteration   4: 1243658.793 ops/s
# Warmup Iteration   5: 1184317.611 ops/s
# Warmup Iteration   6: 1095996.114 ops/s
# Warmup Iteration   7: 1242540.696 ops/s
# Warmup Iteration   8: 1243397.019 ops/s
# Warmup Iteration   9: 1244828.973 ops/s
# Warmup Iteration  10: 1239208.054 ops/s
# Warmup Iteration  11: 1243484.996 ops/s
# Warmup Iteration  12: 1245993.844 ops/s
# Warmup Iteration  13: 1245009.282 ops/s
# Warmup Iteration  14: 1245138.477 ops/s
# Warmup Iteration  15: 1242627.063 ops/s
# Warmup Iteration  16: 1243958.853 ops/s
# Warmup Iteration  17: 1243102.972 ops/s
# Warmup Iteration  18: 1236449.628 ops/s
# Warmup Iteration  19: 1239944.273 ops/s
# Warmup Iteration  20: 1241805.706 ops/s
# Warmup Iteration  21: 1242374.658 ops/s
# Warmup Iteration  22: 1244891.505 ops/s
# Warmup Iteration  23: 1244104.103 ops/s
# Warmup Iteration  24: 1245047.665 ops/s
# Warmup Iteration  25: 1244386.553 ops/s
# Warmup Iteration  26: 1242835.987 ops/s
# Warmup Iteration  27: 1239916.469 ops/s
# Warmup Iteration  28: 1235252.290 ops/s
# Warmup Iteration  29: 1238681.980 ops/s
# Warmup Iteration  30: 1244166.989 ops/s
Iteration   1: 1245177.644 ops/s
Iteration   2: 1239552.741 ops/s
Iteration   3: 1241202.548 ops/s
Iteration   4: 1243849.499 ops/s
Iteration   5: 1244145.011 ops/s
Iteration   6: 1247755.746 ops/s
Iteration   7: 1243547.473 ops/s
Iteration   8: 1236430.273 ops/s
Iteration   9: 1240987.945 ops/s
Iteration  10: 1244489.107 ops/s
Iteration  11: 1243704.741 ops/s
Iteration  12: 1240591.145 ops/s
Iteration  13: 1240374.426 ops/s
Iteration  14: 1242611.998 ops/s
Iteration  15: 1243044.137 ops/s
Iteration  16: 1235694.623 ops/s
Iteration  17: 1232321.775 ops/s
Iteration  18: 1244098.609 ops/s
Iteration  19: 1245331.932 ops/s
Iteration  20: 1237473.601 ops/s
Iteration  21: 1240682.213 ops/s
Iteration  22: 1243511.400 ops/s
Iteration  23: 1242209.250 ops/s
Iteration  24: 1245259.386 ops/s
Iteration  25: 1241270.191 ops/s
Iteration  26: 1243687.765 ops/s
Iteration  27: 1240728.881 ops/s
Iteration  28: 1241031.350 ops/s
Iteration  29: 1247046.524 ops/s
Iteration  30: 1243911.689 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedSetBy":
  1242057.454 ±(99.9%) 2242.031 ops/s [Average]
  (min, avg, max) = (1232321.775, 1242057.454, 1247755.746), stdev = 3355.767
  CI (99.9%): [1239815.423, 1244299.485] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1242057.454 ± 2242.031  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedSetWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedSetWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 539128.561 ops/s
# Warmup Iteration   2: 1139841.396 ops/s
# Warmup Iteration   3: 1257672.013 ops/s
# Warmup Iteration   4: 1259352.315 ops/s
# Warmup Iteration   5: 1046335.539 ops/s
# Warmup Iteration   6: 1261838.401 ops/s
# Warmup Iteration   7: 1260971.086 ops/s
# Warmup Iteration   8: 1261864.136 ops/s
# Warmup Iteration   9: 1260460.931 ops/s
# Warmup Iteration  10: 1255538.068 ops/s
# Warmup Iteration  11: 1260257.972 ops/s
# Warmup Iteration  12: 1261953.346 ops/s
# Warmup Iteration  13: 1260253.575 ops/s
# Warmup Iteration  14: 1261524.144 ops/s
# Warmup Iteration  15: 1260884.027 ops/s
# Warmup Iteration  16: 1257154.070 ops/s
# Warmup Iteration  17: 1257351.196 ops/s
# Warmup Iteration  18: 1258750.596 ops/s
# Warmup Iteration  19: 1258962.226 ops/s
# Warmup Iteration  20: 1254395.937 ops/s
# Warmup Iteration  21: 1255974.315 ops/s
# Warmup Iteration  22: 1252632.487 ops/s
# Warmup Iteration  23: 1250657.709 ops/s
# Warmup Iteration  24: 1258758.212 ops/s
# Warmup Iteration  25: 1252664.914 ops/s
# Warmup Iteration  26: 1256475.717 ops/s
# Warmup Iteration  27: 1256643.477 ops/s
# Warmup Iteration  28: 1255181.904 ops/s
# Warmup Iteration  29: 1257349.599 ops/s
# Warmup Iteration  30: 1257496.782 ops/s
Iteration   1: 1258523.741 ops/s
Iteration   2: 1257972.052 ops/s
Iteration   3: 1255230.336 ops/s
Iteration   4: 1255406.185 ops/s
Iteration   5: 1258046.909 ops/s
Iteration   6: 1260131.451 ops/s
Iteration   7: 1258857.524 ops/s
Iteration   8: 1254747.710 ops/s
Iteration   9: 1260014.557 ops/s
Iteration  10: 1257550.967 ops/s
Iteration  11: 1257854.987 ops/s
Iteration  12: 1256618.593 ops/s
Iteration  13: 1257710.535 ops/s
Iteration  14: 1258163.638 ops/s
Iteration  15: 1257985.164 ops/s
Iteration  16: 1259716.341 ops/s
Iteration  17: 1260118.108 ops/s
Iteration  18: 1257978.698 ops/s
Iteration  19: 1254553.385 ops/s
Iteration  20: 1253417.290 ops/s
Iteration  21: 1252475.305 ops/s
Iteration  22: 1254066.883 ops/s
Iteration  23: 1256004.307 ops/s
Iteration  24: 1258482.156 ops/s
Iteration  25: 1257587.401 ops/s
Iteration  26: 1256225.361 ops/s
Iteration  27: 1257805.955 ops/s
Iteration  28: 1247803.211 ops/s
Iteration  29: 1255445.619 ops/s
Iteration  30: 1259127.710 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedSetWithComparator":
  1256854.069 ±(99.9%) 1768.034 ops/s [Average]
  (min, avg, max) = (1247803.211, 1256854.069, 1260131.451), stdev = 2646.310
  CI (99.9%): [1255086.035, 1258622.103] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toSortedSetWithComparator  thrpt   30  1256854.069 ± 1768.034  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1359526.217 ops/s
# Warmup Iteration   2: 2822352.944 ops/s
# Warmup Iteration   3: 3049426.816 ops/s
# Warmup Iteration   4: 3064571.492 ops/s
# Warmup Iteration   5: 2536309.866 ops/s
# Warmup Iteration   6: 3076661.860 ops/s
# Warmup Iteration   7: 3064651.615 ops/s
# Warmup Iteration   8: 3078474.607 ops/s
# Warmup Iteration   9: 3077418.798 ops/s
# Warmup Iteration  10: 3076096.818 ops/s
# Warmup Iteration  11: 3076382.896 ops/s
# Warmup Iteration  12: 3067626.370 ops/s
# Warmup Iteration  13: 3075266.316 ops/s
# Warmup Iteration  14: 3073277.740 ops/s
# Warmup Iteration  15: 3075764.519 ops/s
# Warmup Iteration  16: 3061420.550 ops/s
# Warmup Iteration  17: 3048959.788 ops/s
# Warmup Iteration  18: 3045853.928 ops/s
# Warmup Iteration  19: 3045102.776 ops/s
# Warmup Iteration  20: 3069700.426 ops/s
# Warmup Iteration  21: 3069535.231 ops/s
# Warmup Iteration  22: 3072049.151 ops/s
# Warmup Iteration  23: 3070720.393 ops/s
# Warmup Iteration  24: 3067264.031 ops/s
# Warmup Iteration  25: 3072864.614 ops/s
# Warmup Iteration  26: 3067704.718 ops/s
# Warmup Iteration  27: 3068815.418 ops/s
# Warmup Iteration  28: 3070918.989 ops/s
# Warmup Iteration  29: 3065301.739 ops/s
# Warmup Iteration  30: 3071809.681 ops/s
Iteration   1: 3070869.965 ops/s
Iteration   2: 3067492.296 ops/s
Iteration   3: 3074090.915 ops/s
Iteration   4: 3073321.449 ops/s
Iteration   5: 3074460.446 ops/s
Iteration   6: 3077582.460 ops/s
Iteration   7: 3071959.792 ops/s
Iteration   8: 3061337.749 ops/s
Iteration   9: 3055053.128 ops/s
Iteration  10: 3070115.864 ops/s
Iteration  11: 3072080.209 ops/s
Iteration  12: 3063121.161 ops/s
Iteration  13: 3070405.099 ops/s
Iteration  14: 3064840.769 ops/s
Iteration  15: 3062776.421 ops/s
Iteration  16: 3058610.188 ops/s
Iteration  17: 3070886.537 ops/s
Iteration  18: 3055629.584 ops/s
Iteration  19: 3072859.446 ops/s
Iteration  20: 3060938.551 ops/s
Iteration  21: 3070817.473 ops/s
Iteration  22: 3064830.273 ops/s
Iteration  23: 3068117.126 ops/s
Iteration  24: 3071090.870 ops/s
Iteration  25: 3075422.278 ops/s
Iteration  26: 3073535.740 ops/s
Iteration  27: 3067400.387 ops/s
Iteration  28: 3073755.980 ops/s
Iteration  29: 3070865.876 ops/s
Iteration  30: 3074027.561 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toStack":
  3068609.853 ±(99.9%) 3974.569 ops/s [Average]
  (min, avg, max) = (3055053.128, 3068609.853, 3077582.460), stdev = 5948.949
  CI (99.9%): [3064635.284, 3072584.423] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toStack  thrpt   30  3068609.853 ± 3974.569  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toStringOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toStringOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 445663.436 ops/s
# Warmup Iteration   2: 896340.167 ops/s
# Warmup Iteration   3: 957194.338 ops/s
# Warmup Iteration   4: 962076.290 ops/s
# Warmup Iteration   5: 804033.705 ops/s
# Warmup Iteration   6: 959116.994 ops/s
# Warmup Iteration   7: 957248.274 ops/s
# Warmup Iteration   8: 958733.291 ops/s
# Warmup Iteration   9: 957890.921 ops/s
# Warmup Iteration  10: 959127.308 ops/s
# Warmup Iteration  11: 959274.874 ops/s
# Warmup Iteration  12: 952221.727 ops/s
# Warmup Iteration  13: 948598.664 ops/s
# Warmup Iteration  14: 957434.152 ops/s
# Warmup Iteration  15: 958971.532 ops/s
# Warmup Iteration  16: 959563.909 ops/s
# Warmup Iteration  17: 954174.170 ops/s
# Warmup Iteration  18: 952721.465 ops/s
# Warmup Iteration  19: 957735.119 ops/s
# Warmup Iteration  20: 958126.368 ops/s
# Warmup Iteration  21: 957126.380 ops/s
# Warmup Iteration  22: 949152.236 ops/s
# Warmup Iteration  23: 958220.382 ops/s
# Warmup Iteration  24: 957835.932 ops/s
# Warmup Iteration  25: 958978.819 ops/s
# Warmup Iteration  26: 957865.529 ops/s
# Warmup Iteration  27: 955594.939 ops/s
# Warmup Iteration  28: 958954.703 ops/s
# Warmup Iteration  29: 959188.014 ops/s
# Warmup Iteration  30: 958809.550 ops/s
Iteration   1: 958349.478 ops/s
Iteration   2: 956800.413 ops/s
Iteration   3: 961250.764 ops/s
Iteration   4: 958540.439 ops/s
Iteration   5: 957703.917 ops/s
Iteration   6: 961108.704 ops/s
Iteration   7: 958437.493 ops/s
Iteration   8: 954784.698 ops/s
Iteration   9: 948881.221 ops/s
Iteration  10: 949240.272 ops/s
Iteration  11: 949655.349 ops/s
Iteration  12: 948143.905 ops/s
Iteration  13: 959935.697 ops/s
Iteration  14: 958518.884 ops/s
Iteration  15: 958214.779 ops/s
Iteration  16: 957979.513 ops/s
Iteration  17: 956058.547 ops/s
Iteration  18: 956680.019 ops/s
Iteration  19: 957027.236 ops/s
Iteration  20: 958167.976 ops/s
Iteration  21: 956704.500 ops/s
Iteration  22: 958032.545 ops/s
Iteration  23: 949775.405 ops/s
Iteration  24: 952117.901 ops/s
Iteration  25: 957894.900 ops/s
Iteration  26: 957579.539 ops/s
Iteration  27: 958048.605 ops/s
Iteration  28: 957853.695 ops/s
Iteration  29: 959989.683 ops/s
Iteration  30: 953844.971 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toStringOfItemToCount":
  956244.035 ±(99.9%) 2489.874 ops/s [Average]
  (min, avg, max) = (948143.905, 956244.035, 961250.764), stdev = 3726.727
  CI (99.9%): [953754.161, 958733.909] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_toStringOfItemToCount  thrpt   30  956244.035 ± 2489.874  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_topOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_topOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 87853.704 ops/s
# Warmup Iteration   2: 138870.022 ops/s
# Warmup Iteration   3: 170064.322 ops/s
# Warmup Iteration   4: 168651.093 ops/s
# Warmup Iteration   5: 169605.451 ops/s
# Warmup Iteration   6: 170175.873 ops/s
# Warmup Iteration   7: 142017.374 ops/s
# Warmup Iteration   8: 170156.087 ops/s
# Warmup Iteration   9: 170140.763 ops/s
# Warmup Iteration  10: 170269.829 ops/s
# Warmup Iteration  11: 170219.189 ops/s
# Warmup Iteration  12: 170276.529 ops/s
# Warmup Iteration  13: 170266.527 ops/s
# Warmup Iteration  14: 170219.568 ops/s
# Warmup Iteration  15: 169942.543 ops/s
# Warmup Iteration  16: 170231.458 ops/s
# Warmup Iteration  17: 171933.029 ops/s
# Warmup Iteration  18: 172358.880 ops/s
# Warmup Iteration  19: 172350.838 ops/s
# Warmup Iteration  20: 172364.461 ops/s
# Warmup Iteration  21: 172440.209 ops/s
# Warmup Iteration  22: 172396.379 ops/s
# Warmup Iteration  23: 172429.725 ops/s
# Warmup Iteration  24: 172127.805 ops/s
# Warmup Iteration  25: 172183.392 ops/s
# Warmup Iteration  26: 172351.542 ops/s
# Warmup Iteration  27: 172375.859 ops/s
# Warmup Iteration  28: 171896.573 ops/s
# Warmup Iteration  29: 172172.974 ops/s
# Warmup Iteration  30: 172480.056 ops/s
Iteration   1: 171922.004 ops/s
Iteration   2: 171416.177 ops/s
Iteration   3: 172497.393 ops/s
Iteration   4: 172455.650 ops/s
Iteration   5: 172549.382 ops/s
Iteration   6: 172492.363 ops/s
Iteration   7: 172446.865 ops/s
Iteration   8: 172378.566 ops/s
Iteration   9: 172084.981 ops/s
Iteration  10: 171955.799 ops/s
Iteration  11: 171645.757 ops/s
Iteration  12: 172137.388 ops/s
Iteration  13: 172582.687 ops/s
Iteration  14: 171792.656 ops/s
Iteration  15: 172449.614 ops/s
Iteration  16: 172599.646 ops/s
Iteration  17: 172367.125 ops/s
Iteration  18: 172499.427 ops/s
Iteration  19: 172542.876 ops/s
Iteration  20: 172004.854 ops/s
Iteration  21: 171836.508 ops/s
Iteration  22: 171889.804 ops/s
Iteration  23: 170253.217 ops/s
Iteration  24: 171482.425 ops/s
Iteration  25: 172239.834 ops/s
Iteration  26: 172416.573 ops/s
Iteration  27: 172290.319 ops/s
Iteration  28: 172531.665 ops/s
Iteration  29: 172804.206 ops/s
Iteration  30: 172373.888 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_topOccurrences":
  172164.655 ±(99.9%) 337.384 ops/s [Average]
  (min, avg, max) = (170253.217, 172164.655, 172804.206), stdev = 504.980
  CI (99.9%): [171827.271, 172502.039] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_topOccurrences  thrpt   30  172164.655 ± 337.384  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 142144.471 ops/s
# Warmup Iteration   2: 280511.199 ops/s
# Warmup Iteration   3: 334006.964 ops/s
# Warmup Iteration   4: 335058.266 ops/s
# Warmup Iteration   5: 335257.679 ops/s
# Warmup Iteration   6: 279581.767 ops/s
# Warmup Iteration   7: 335064.987 ops/s
# Warmup Iteration   8: 335118.559 ops/s
# Warmup Iteration   9: 335511.045 ops/s
# Warmup Iteration  10: 335022.623 ops/s
# Warmup Iteration  11: 335075.961 ops/s
# Warmup Iteration  12: 335376.558 ops/s
# Warmup Iteration  13: 335289.989 ops/s
# Warmup Iteration  14: 334895.819 ops/s
# Warmup Iteration  15: 335274.224 ops/s
# Warmup Iteration  16: 334648.896 ops/s
# Warmup Iteration  17: 334306.980 ops/s
# Warmup Iteration  18: 334536.283 ops/s
# Warmup Iteration  19: 334024.468 ops/s
# Warmup Iteration  20: 334835.570 ops/s
# Warmup Iteration  21: 334421.867 ops/s
# Warmup Iteration  22: 334862.004 ops/s
# Warmup Iteration  23: 333883.518 ops/s
# Warmup Iteration  24: 334185.961 ops/s
# Warmup Iteration  25: 334283.476 ops/s
# Warmup Iteration  26: 333983.655 ops/s
# Warmup Iteration  27: 334901.902 ops/s
# Warmup Iteration  28: 334069.416 ops/s
# Warmup Iteration  29: 334472.012 ops/s
# Warmup Iteration  30: 333957.255 ops/s
Iteration   1: 334318.003 ops/s
Iteration   2: 334420.311 ops/s
Iteration   3: 334592.031 ops/s
Iteration   4: 334182.822 ops/s
Iteration   5: 335124.207 ops/s
Iteration   6: 334283.832 ops/s
Iteration   7: 334432.578 ops/s
Iteration   8: 334794.218 ops/s
Iteration   9: 334288.691 ops/s
Iteration  10: 334756.085 ops/s
Iteration  11: 333993.613 ops/s
Iteration  12: 334192.008 ops/s
Iteration  13: 334884.406 ops/s
Iteration  14: 334199.123 ops/s
Iteration  15: 334413.366 ops/s
Iteration  16: 334661.677 ops/s
Iteration  17: 334962.983 ops/s
Iteration  18: 333790.414 ops/s
Iteration  19: 334288.846 ops/s
Iteration  20: 334842.348 ops/s
Iteration  21: 334421.001 ops/s
Iteration  22: 334475.053 ops/s
Iteration  23: 334327.660 ops/s
Iteration  24: 334740.338 ops/s
Iteration  25: 334346.017 ops/s
Iteration  26: 333757.160 ops/s
Iteration  27: 334239.329 ops/s
Iteration  28: 334137.978 ops/s
Iteration  29: 334968.617 ops/s
Iteration  30: 332215.741 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_zip":
  334368.348 ±(99.9%) 352.561 ops/s [Average]
  (min, avg, max) = (332215.741, 334368.348, 335124.207), stdev = 527.697
  CI (99.9%): [334015.787, 334720.910] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_zip  thrpt   30  334368.348 ± 352.561  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 158317.075 ops/s
# Warmup Iteration   2: 242560.474 ops/s
# Warmup Iteration   3: 295975.514 ops/s
# Warmup Iteration   4: 293604.306 ops/s
# Warmup Iteration   5: 295962.086 ops/s
# Warmup Iteration   6: 295972.799 ops/s
# Warmup Iteration   7: 248324.775 ops/s
# Warmup Iteration   8: 294440.500 ops/s
# Warmup Iteration   9: 293879.870 ops/s
# Warmup Iteration  10: 295837.325 ops/s
# Warmup Iteration  11: 295323.958 ops/s
# Warmup Iteration  12: 295744.522 ops/s
# Warmup Iteration  13: 296064.432 ops/s
# Warmup Iteration  14: 295752.520 ops/s
# Warmup Iteration  15: 295659.872 ops/s
# Warmup Iteration  16: 295925.655 ops/s
# Warmup Iteration  17: 295669.998 ops/s
# Warmup Iteration  18: 295398.143 ops/s
# Warmup Iteration  19: 295176.880 ops/s
# Warmup Iteration  20: 295775.791 ops/s
# Warmup Iteration  21: 295507.201 ops/s
# Warmup Iteration  22: 295911.484 ops/s
# Warmup Iteration  23: 295528.370 ops/s
# Warmup Iteration  24: 296033.560 ops/s
# Warmup Iteration  25: 295440.526 ops/s
# Warmup Iteration  26: 295785.218 ops/s
# Warmup Iteration  27: 295788.542 ops/s
# Warmup Iteration  28: 295864.227 ops/s
# Warmup Iteration  29: 295927.100 ops/s
# Warmup Iteration  30: 295298.758 ops/s
Iteration   1: 296182.443 ops/s
Iteration   2: 294588.448 ops/s
Iteration   3: 296021.169 ops/s
Iteration   4: 295653.009 ops/s
Iteration   5: 295471.183 ops/s
Iteration   6: 295842.537 ops/s
Iteration   7: 295837.176 ops/s
Iteration   8: 296030.933 ops/s
Iteration   9: 295455.610 ops/s
Iteration  10: 296201.101 ops/s
Iteration  11: 295704.905 ops/s
Iteration  12: 295446.449 ops/s
Iteration  13: 296466.802 ops/s
Iteration  14: 295373.867 ops/s
Iteration  15: 296312.642 ops/s
Iteration  16: 295435.399 ops/s
Iteration  17: 295397.579 ops/s
Iteration  18: 294602.754 ops/s
Iteration  19: 295335.485 ops/s
Iteration  20: 295918.669 ops/s
Iteration  21: 295959.914 ops/s
Iteration  22: 295924.256 ops/s
Iteration  23: 295521.367 ops/s
Iteration  24: 295808.470 ops/s
Iteration  25: 295119.056 ops/s
Iteration  26: 295415.315 ops/s
Iteration  27: 294809.185 ops/s
Iteration  28: 296222.887 ops/s
Iteration  29: 295953.471 ops/s
Iteration  30: 295759.603 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_zipWithIndex":
  295659.056 ±(99.9%) 314.601 ops/s [Average]
  (min, avg, max) = (294588.448, 295659.056, 296466.802), stdev = 470.880
  CI (99.9%): [295344.455, 295973.657] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_zipWithIndex  thrpt   30  295659.056 ± 314.601  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 514067.248 ops/s
# Warmup Iteration   2: 591171.079 ops/s
# Warmup Iteration   3: 779726.081 ops/s
# Warmup Iteration   4: 777899.766 ops/s
# Warmup Iteration   5: 772722.742 ops/s
# Warmup Iteration   6: 777462.393 ops/s
# Warmup Iteration   7: 777729.821 ops/s
# Warmup Iteration   8: 777685.518 ops/s
# Warmup Iteration   9: 775832.038 ops/s
# Warmup Iteration  10: 691822.265 ops/s
# Warmup Iteration  11: 732566.960 ops/s
# Warmup Iteration  12: 776289.871 ops/s
# Warmup Iteration  13: 779127.825 ops/s
# Warmup Iteration  14: 777522.214 ops/s
# Warmup Iteration  15: 777958.935 ops/s
# Warmup Iteration  16: 778950.919 ops/s
# Warmup Iteration  17: 816663.924 ops/s
# Warmup Iteration  18: 813454.863 ops/s
# Warmup Iteration  19: 815971.522 ops/s
# Warmup Iteration  20: 816141.337 ops/s
# Warmup Iteration  21: 815116.719 ops/s
# Warmup Iteration  22: 815824.485 ops/s
# Warmup Iteration  23: 812887.428 ops/s
# Warmup Iteration  24: 813238.381 ops/s
# Warmup Iteration  25: 812974.171 ops/s
# Warmup Iteration  26: 818833.859 ops/s
# Warmup Iteration  27: 817346.473 ops/s
# Warmup Iteration  28: 812886.241 ops/s
# Warmup Iteration  29: 814059.159 ops/s
# Warmup Iteration  30: 815415.186 ops/s
Iteration   1: 813637.268 ops/s
Iteration   2: 813020.795 ops/s
Iteration   3: 816420.968 ops/s
Iteration   4: 816821.310 ops/s
Iteration   5: 816861.226 ops/s
Iteration   6: 816103.931 ops/s
Iteration   7: 813925.112 ops/s
Iteration   8: 810863.666 ops/s
Iteration   9: 814858.258 ops/s
Iteration  10: 814499.359 ops/s
Iteration  11: 815769.569 ops/s
Iteration  12: 816470.534 ops/s
Iteration  13: 817059.792 ops/s
Iteration  14: 814741.397 ops/s
Iteration  15: 816575.974 ops/s
Iteration  16: 817525.274 ops/s
Iteration  17: 817564.312 ops/s
Iteration  18: 816058.433 ops/s
Iteration  19: 817393.376 ops/s
Iteration  20: 817801.963 ops/s
Iteration  21: 814936.794 ops/s
Iteration  22: 818415.236 ops/s
Iteration  23: 818839.336 ops/s
Iteration  24: 817545.175 ops/s
Iteration  25: 816570.602 ops/s
Iteration  26: 816794.752 ops/s
Iteration  27: 817512.777 ops/s
Iteration  28: 816187.712 ops/s
Iteration  29: 818170.392 ops/s
Iteration  30: 818231.731 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_add":
  816239.234 ±(99.9%) 1191.625 ops/s [Average]
  (min, avg, max) = (810863.666, 816239.234, 818839.336), stdev = 1783.568
  CI (99.9%): [815047.609, 817430.859] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_add  thrpt   30  816239.234 ± 1191.625  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 505443.727 ops/s
# Warmup Iteration   2: 555183.533 ops/s
# Warmup Iteration   3: 788495.909 ops/s
# Warmup Iteration   4: 787992.373 ops/s
# Warmup Iteration   5: 784827.275 ops/s
# Warmup Iteration   6: 787562.635 ops/s
# Warmup Iteration   7: 788871.088 ops/s
# Warmup Iteration   8: 788215.366 ops/s
# Warmup Iteration   9: 788344.080 ops/s
# Warmup Iteration  10: 675602.888 ops/s
# Warmup Iteration  11: 773856.778 ops/s
# Warmup Iteration  12: 789696.206 ops/s
# Warmup Iteration  13: 789977.096 ops/s
# Warmup Iteration  14: 787415.265 ops/s
# Warmup Iteration  15: 789366.369 ops/s
# Warmup Iteration  16: 789434.250 ops/s
# Warmup Iteration  17: 828158.457 ops/s
# Warmup Iteration  18: 826716.325 ops/s
# Warmup Iteration  19: 826782.583 ops/s
# Warmup Iteration  20: 827074.292 ops/s
# Warmup Iteration  21: 826221.478 ops/s
# Warmup Iteration  22: 824322.142 ops/s
# Warmup Iteration  23: 826489.116 ops/s
# Warmup Iteration  24: 823007.998 ops/s
# Warmup Iteration  25: 827280.154 ops/s
# Warmup Iteration  26: 825831.490 ops/s
# Warmup Iteration  27: 825465.922 ops/s
# Warmup Iteration  28: 826724.945 ops/s
# Warmup Iteration  29: 826402.221 ops/s
# Warmup Iteration  30: 826553.369 ops/s
Iteration   1: 824582.790 ops/s
Iteration   2: 824032.248 ops/s
Iteration   3: 825911.682 ops/s
Iteration   4: 825877.808 ops/s
Iteration   5: 827921.219 ops/s
Iteration   6: 827586.778 ops/s
Iteration   7: 824239.474 ops/s
Iteration   8: 823980.421 ops/s
Iteration   9: 826357.518 ops/s
Iteration  10: 827643.170 ops/s
Iteration  11: 827280.560 ops/s
Iteration  12: 828547.026 ops/s
Iteration  13: 826776.067 ops/s
Iteration  14: 827265.253 ops/s
Iteration  15: 829342.685 ops/s
Iteration  16: 825038.168 ops/s
Iteration  17: 827912.665 ops/s
Iteration  18: 827990.159 ops/s
Iteration  19: 828199.353 ops/s
Iteration  20: 827733.155 ops/s
Iteration  21: 827776.636 ops/s
Iteration  22: 827979.710 ops/s
Iteration  23: 827299.473 ops/s
Iteration  24: 828756.984 ops/s
Iteration  25: 828865.895 ops/s
Iteration  26: 826318.828 ops/s
Iteration  27: 827557.928 ops/s
Iteration  28: 827600.953 ops/s
Iteration  29: 826421.815 ops/s
Iteration  30: 828398.125 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_addAll":
  827039.818 ±(99.9%) 986.066 ops/s [Average]
  (min, avg, max) = (823980.421, 827039.818, 829342.685), stdev = 1475.897
  CI (99.9%): [826053.752, 828025.884] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_addAll  thrpt   30  827039.818 ± 986.066  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 453300.605 ops/s
# Warmup Iteration   2: 999102.849 ops/s
# Warmup Iteration   3: 1064631.039 ops/s
# Warmup Iteration   4: 1068540.510 ops/s
# Warmup Iteration   5: 894701.412 ops/s
# Warmup Iteration   6: 1072729.269 ops/s
# Warmup Iteration   7: 1068835.849 ops/s
# Warmup Iteration   8: 1073486.369 ops/s
# Warmup Iteration   9: 1065623.009 ops/s
# Warmup Iteration  10: 1068162.507 ops/s
# Warmup Iteration  11: 1071086.030 ops/s
# Warmup Iteration  12: 1069294.278 ops/s
# Warmup Iteration  13: 1072876.818 ops/s
# Warmup Iteration  14: 1070218.241 ops/s
# Warmup Iteration  15: 1070016.314 ops/s
# Warmup Iteration  16: 1066665.998 ops/s
# Warmup Iteration  17: 1069286.427 ops/s
# Warmup Iteration  18: 1052628.465 ops/s
# Warmup Iteration  19: 1056777.753 ops/s
# Warmup Iteration  20: 1063316.556 ops/s
# Warmup Iteration  21: 1066475.362 ops/s
# Warmup Iteration  22: 1059245.912 ops/s
# Warmup Iteration  23: 1071182.476 ops/s
# Warmup Iteration  24: 1068464.319 ops/s
# Warmup Iteration  25: 1068238.369 ops/s
# Warmup Iteration  26: 1067208.396 ops/s
# Warmup Iteration  27: 1067438.698 ops/s
# Warmup Iteration  28: 1063404.066 ops/s
# Warmup Iteration  29: 1064978.057 ops/s
# Warmup Iteration  30: 1064746.861 ops/s
Iteration   1: 1067355.129 ops/s
Iteration   2: 1071715.723 ops/s
Iteration   3: 1067764.642 ops/s
Iteration   4: 1064232.899 ops/s
Iteration   5: 1064343.686 ops/s
Iteration   6: 1062341.393 ops/s
Iteration   7: 1058696.804 ops/s
Iteration   8: 1062839.128 ops/s
Iteration   9: 1077560.579 ops/s
Iteration  10: 1078126.059 ops/s
Iteration  11: 1062384.804 ops/s
Iteration  12: 1071724.390 ops/s
Iteration  13: 1073248.741 ops/s
Iteration  14: 1070309.556 ops/s
Iteration  15: 1064897.143 ops/s
Iteration  16: 1067603.200 ops/s
Iteration  17: 1066616.844 ops/s
Iteration  18: 1067542.878 ops/s
Iteration  19: 1059065.666 ops/s
Iteration  20: 1058840.332 ops/s
Iteration  21: 1060469.386 ops/s
Iteration  22: 1070702.973 ops/s
Iteration  23: 1069849.744 ops/s
Iteration  24: 1065327.689 ops/s
Iteration  25: 1062932.054 ops/s
Iteration  26: 1076299.032 ops/s
Iteration  27: 1066735.472 ops/s
Iteration  28: 1070967.088 ops/s
Iteration  29: 1064674.481 ops/s
Iteration  30: 1070612.253 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_aggregateByMutating":
  1067192.659 ±(99.9%) 3536.988 ops/s [Average]
  (min, avg, max) = (1058696.804, 1067192.659, 1078126.059), stdev = 5293.997
  CI (99.9%): [1063655.671, 1070729.647] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  1067192.659 ± 3536.988  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 489197.080 ops/s
# Warmup Iteration   2: 1037246.295 ops/s
# Warmup Iteration   3: 1128892.570 ops/s
# Warmup Iteration   4: 1123171.205 ops/s
# Warmup Iteration   5: 936900.513 ops/s
# Warmup Iteration   6: 1127666.194 ops/s
# Warmup Iteration   7: 1131088.186 ops/s
# Warmup Iteration   8: 1131020.728 ops/s
# Warmup Iteration   9: 1130631.523 ops/s
# Warmup Iteration  10: 1127342.041 ops/s
# Warmup Iteration  11: 1128488.630 ops/s
# Warmup Iteration  12: 1130783.581 ops/s
# Warmup Iteration  13: 1130570.999 ops/s
# Warmup Iteration  14: 1129091.104 ops/s
# Warmup Iteration  15: 1127833.988 ops/s
# Warmup Iteration  16: 1129211.196 ops/s
# Warmup Iteration  17: 1129125.894 ops/s
# Warmup Iteration  18: 1131172.403 ops/s
# Warmup Iteration  19: 1130957.313 ops/s
# Warmup Iteration  20: 1129531.663 ops/s
# Warmup Iteration  21: 1121913.477 ops/s
# Warmup Iteration  22: 1121226.204 ops/s
# Warmup Iteration  23: 1131175.278 ops/s
# Warmup Iteration  24: 1129377.067 ops/s
# Warmup Iteration  25: 1126241.062 ops/s
# Warmup Iteration  26: 1125386.623 ops/s
# Warmup Iteration  27: 1125942.918 ops/s
# Warmup Iteration  28: 1125216.294 ops/s
# Warmup Iteration  29: 1130526.584 ops/s
# Warmup Iteration  30: 1130059.835 ops/s
Iteration   1: 1129206.808 ops/s
Iteration   2: 1128349.473 ops/s
Iteration   3: 1131846.081 ops/s
Iteration   4: 1128129.449 ops/s
Iteration   5: 1130698.497 ops/s
Iteration   6: 1129207.642 ops/s
Iteration   7: 1123932.811 ops/s
Iteration   8: 1131201.736 ops/s
Iteration   9: 1131953.447 ops/s
Iteration  10: 1130464.367 ops/s
Iteration  11: 1134149.606 ops/s
Iteration  12: 1127466.939 ops/s
Iteration  13: 1127782.242 ops/s
Iteration  14: 1133921.226 ops/s
Iteration  15: 1126094.855 ops/s
Iteration  16: 1129872.475 ops/s
Iteration  17: 1130121.667 ops/s
Iteration  18: 1132592.829 ops/s
Iteration  19: 1130996.146 ops/s
Iteration  20: 1131251.392 ops/s
Iteration  21: 1131232.430 ops/s
Iteration  22: 1130537.270 ops/s
Iteration  23: 1129867.873 ops/s
Iteration  24: 1130707.109 ops/s
Iteration  25: 1127368.983 ops/s
Iteration  26: 1131418.181 ops/s
Iteration  27: 1130925.119 ops/s
Iteration  28: 1131036.753 ops/s
Iteration  29: 1131391.152 ops/s
Iteration  30: 1129930.987 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_aggregateByNonMutating":
  1130121.851 ±(99.9%) 1451.294 ops/s [Average]
  (min, avg, max) = (1123932.811, 1130121.851, 1134149.606), stdev = 2172.229
  CI (99.9%): [1128670.557, 1131573.146] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  1130121.851 ± 1451.294  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1954540.062 ops/s
# Warmup Iteration   2: 3887895.903 ops/s
# Warmup Iteration   3: 4182313.389 ops/s
# Warmup Iteration   4: 4201655.315 ops/s
# Warmup Iteration   5: 3484342.066 ops/s
# Warmup Iteration   6: 4198212.880 ops/s
# Warmup Iteration   7: 4208567.126 ops/s
# Warmup Iteration   8: 4205172.946 ops/s
# Warmup Iteration   9: 4152439.681 ops/s
# Warmup Iteration  10: 4208868.661 ops/s
# Warmup Iteration  11: 4206043.159 ops/s
# Warmup Iteration  12: 4209522.163 ops/s
# Warmup Iteration  13: 4205344.075 ops/s
# Warmup Iteration  14: 4200641.955 ops/s
# Warmup Iteration  15: 4206680.981 ops/s
# Warmup Iteration  16: 4206464.295 ops/s
# Warmup Iteration  17: 4168126.924 ops/s
# Warmup Iteration  18: 4168073.811 ops/s
# Warmup Iteration  19: 4168711.068 ops/s
# Warmup Iteration  20: 4171507.235 ops/s
# Warmup Iteration  21: 4182712.783 ops/s
# Warmup Iteration  22: 4160016.687 ops/s
# Warmup Iteration  23: 4158975.143 ops/s
# Warmup Iteration  24: 4180210.624 ops/s
# Warmup Iteration  25: 4168698.973 ops/s
# Warmup Iteration  26: 4160808.094 ops/s
# Warmup Iteration  27: 4152522.779 ops/s
# Warmup Iteration  28: 4173300.006 ops/s
# Warmup Iteration  29: 4165527.142 ops/s
# Warmup Iteration  30: 4166308.611 ops/s
Iteration   1: 4166029.762 ops/s
Iteration   2: 4173889.230 ops/s
Iteration   3: 4169113.716 ops/s
Iteration   4: 4168265.913 ops/s
Iteration   5: 4173965.074 ops/s
Iteration   6: 4165312.474 ops/s
Iteration   7: 4158269.298 ops/s
Iteration   8: 4171960.093 ops/s
Iteration   9: 4164193.676 ops/s
Iteration  10: 4165046.020 ops/s
Iteration  11: 4165173.868 ops/s
Iteration  12: 4164317.791 ops/s
Iteration  13: 4171082.726 ops/s
Iteration  14: 4174702.083 ops/s
Iteration  15: 4168947.629 ops/s
Iteration  16: 4173749.325 ops/s
Iteration  17: 4174905.468 ops/s
Iteration  18: 4168079.443 ops/s
Iteration  19: 4165563.903 ops/s
Iteration  20: 4175198.458 ops/s
Iteration  21: 4159242.217 ops/s
Iteration  22: 4166266.813 ops/s
Iteration  23: 4176597.556 ops/s
Iteration  24: 4165200.111 ops/s
Iteration  25: 4170592.062 ops/s
Iteration  26: 4177394.246 ops/s
Iteration  27: 4168670.373 ops/s
Iteration  28: 4165132.392 ops/s
Iteration  29: 4178413.550 ops/s
Iteration  30: 4165505.596 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_allSatisfy":
  4169026.029 ±(99.9%) 3464.544 ops/s [Average]
  (min, avg, max) = (4158269.298, 4169026.029, 4178413.550), stdev = 5185.566
  CI (99.9%): [4165561.485, 4172490.572] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_allSatisfy  thrpt   30  4169026.029 ± 3464.544  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1945038.144 ops/s
# Warmup Iteration   2: 3740708.024 ops/s
# Warmup Iteration   3: 4091423.970 ops/s
# Warmup Iteration   4: 4120995.494 ops/s
# Warmup Iteration   5: 3406387.973 ops/s
# Warmup Iteration   6: 4126381.423 ops/s
# Warmup Iteration   7: 4103432.483 ops/s
# Warmup Iteration   8: 4122217.909 ops/s
# Warmup Iteration   9: 4121750.543 ops/s
# Warmup Iteration  10: 4108522.546 ops/s
# Warmup Iteration  11: 4105769.229 ops/s
# Warmup Iteration  12: 4116377.062 ops/s
# Warmup Iteration  13: 4124203.409 ops/s
# Warmup Iteration  14: 4119711.574 ops/s
# Warmup Iteration  15: 4114027.124 ops/s
# Warmup Iteration  16: 4126018.756 ops/s
# Warmup Iteration  17: 4124604.351 ops/s
# Warmup Iteration  18: 4106919.211 ops/s
# Warmup Iteration  19: 4126847.470 ops/s
# Warmup Iteration  20: 4120738.515 ops/s
# Warmup Iteration  21: 4119536.040 ops/s
# Warmup Iteration  22: 4126382.855 ops/s
# Warmup Iteration  23: 4124634.106 ops/s
# Warmup Iteration  24: 4122443.433 ops/s
# Warmup Iteration  25: 4128707.391 ops/s
# Warmup Iteration  26: 4124744.995 ops/s
# Warmup Iteration  27: 4111841.047 ops/s
# Warmup Iteration  28: 4126147.459 ops/s
# Warmup Iteration  29: 4125660.740 ops/s
# Warmup Iteration  30: 4118931.895 ops/s
Iteration   1: 4130053.878 ops/s
Iteration   2: 4123899.482 ops/s
Iteration   3: 4134136.390 ops/s
Iteration   4: 4124209.838 ops/s
Iteration   5: 4124271.586 ops/s
Iteration   6: 4136222.367 ops/s
Iteration   7: 4117678.826 ops/s
Iteration   8: 4125421.303 ops/s
Iteration   9: 4131558.522 ops/s
Iteration  10: 4120645.695 ops/s
Iteration  11: 4129362.089 ops/s
Iteration  12: 4133359.685 ops/s
Iteration  13: 4120456.847 ops/s
Iteration  14: 4119432.362 ops/s
Iteration  15: 4133251.812 ops/s
Iteration  16: 4129717.018 ops/s
Iteration  17: 4126498.255 ops/s
Iteration  18: 4137945.394 ops/s
Iteration  19: 4126130.895 ops/s
Iteration  20: 4119272.211 ops/s
Iteration  21: 4109633.652 ops/s
Iteration  22: 4108501.623 ops/s
Iteration  23: 4101422.548 ops/s
Iteration  24: 4137020.498 ops/s
Iteration  25: 4129914.229 ops/s
Iteration  26: 4133525.478 ops/s
Iteration  27: 4136258.461 ops/s
Iteration  28: 4128876.127 ops/s
Iteration  29: 4128849.756 ops/s
Iteration  30: 4134267.869 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_allSatisfyWith":
  4126393.157 ±(99.9%) 5921.043 ops/s [Average]
  (min, avg, max) = (4101422.548, 4126393.157, 4137945.394), stdev = 8862.338
  CI (99.9%): [4120472.114, 4132314.199] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  4126393.157 ± 5921.043  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_allSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_allSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1976387.117 ops/s
# Warmup Iteration   2: 3882551.774 ops/s
# Warmup Iteration   3: 4136744.499 ops/s
# Warmup Iteration   4: 4146433.138 ops/s
# Warmup Iteration   5: 3461868.315 ops/s
# Warmup Iteration   6: 4153681.923 ops/s
# Warmup Iteration   7: 4153279.443 ops/s
# Warmup Iteration   8: 4156615.224 ops/s
# Warmup Iteration   9: 4172418.565 ops/s
# Warmup Iteration  10: 4168039.440 ops/s
# Warmup Iteration  11: 4150935.392 ops/s
# Warmup Iteration  12: 4151405.658 ops/s
# Warmup Iteration  13: 4169566.975 ops/s
# Warmup Iteration  14: 4170005.405 ops/s
# Warmup Iteration  15: 4172001.568 ops/s
# Warmup Iteration  16: 4164894.358 ops/s
# Warmup Iteration  17: 4161791.803 ops/s
# Warmup Iteration  18: 4169775.948 ops/s
# Warmup Iteration  19: 4167835.911 ops/s
# Warmup Iteration  20: 4167404.472 ops/s
# Warmup Iteration  21: 4175245.367 ops/s
# Warmup Iteration  22: 4168361.104 ops/s
# Warmup Iteration  23: 4170341.627 ops/s
# Warmup Iteration  24: 4174892.694 ops/s
# Warmup Iteration  25: 4171904.324 ops/s
# Warmup Iteration  26: 4170933.230 ops/s
# Warmup Iteration  27: 4161328.229 ops/s
# Warmup Iteration  28: 4171345.111 ops/s
# Warmup Iteration  29: 4154151.378 ops/s
# Warmup Iteration  30: 4154283.259 ops/s
Iteration   1: 4167284.070 ops/s
Iteration   2: 4177746.950 ops/s
Iteration   3: 4172064.985 ops/s
Iteration   4: 4170410.542 ops/s
Iteration   5: 4177836.238 ops/s
Iteration   6: 4164852.670 ops/s
Iteration   7: 4167146.697 ops/s
Iteration   8: 4175186.794 ops/s
Iteration   9: 4173754.777 ops/s
Iteration  10: 4173409.200 ops/s
Iteration  11: 4179969.828 ops/s
Iteration  12: 4170753.315 ops/s
Iteration  13: 4165973.106 ops/s
Iteration  14: 4176649.876 ops/s
Iteration  15: 4149955.211 ops/s
Iteration  16: 4136155.481 ops/s
Iteration  17: 4179808.306 ops/s
Iteration  18: 4172258.817 ops/s
Iteration  19: 4155962.650 ops/s
Iteration  20: 4172258.536 ops/s
Iteration  21: 4166675.377 ops/s
Iteration  22: 4157769.348 ops/s
Iteration  23: 4176388.868 ops/s
Iteration  24: 4160577.346 ops/s
Iteration  25: 4167345.859 ops/s
Iteration  26: 4153526.852 ops/s
Iteration  27: 4167815.101 ops/s
Iteration  28: 4167945.182 ops/s
Iteration  29: 4172596.612 ops/s
Iteration  30: 4164042.949 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_allSatisfyWithOccurrences":
  4167804.051 ±(99.9%) 6454.749 ops/s [Average]
  (min, avg, max) = (4136155.481, 4167804.051, 4179969.828), stdev = 9661.165
  CI (99.9%): [4161349.302, 4174258.800] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_allSatisfyWithOccurrences  thrpt   30  4167804.051 ± 6454.749  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1944836.655 ops/s
# Warmup Iteration   2: 3796441.389 ops/s
# Warmup Iteration   3: 4130532.944 ops/s
# Warmup Iteration   4: 4156651.154 ops/s
# Warmup Iteration   5: 3441596.723 ops/s
# Warmup Iteration   6: 4150322.757 ops/s
# Warmup Iteration   7: 4165741.083 ops/s
# Warmup Iteration   8: 4153041.609 ops/s
# Warmup Iteration   9: 4165312.894 ops/s
# Warmup Iteration  10: 4146652.943 ops/s
# Warmup Iteration  11: 4158377.729 ops/s
# Warmup Iteration  12: 4158707.798 ops/s
# Warmup Iteration  13: 4157563.396 ops/s
# Warmup Iteration  14: 4161007.250 ops/s
# Warmup Iteration  15: 4167344.308 ops/s
# Warmup Iteration  16: 4166203.453 ops/s
# Warmup Iteration  17: 4123245.011 ops/s
# Warmup Iteration  18: 4143332.343 ops/s
# Warmup Iteration  19: 4157530.858 ops/s
# Warmup Iteration  20: 4159084.991 ops/s
# Warmup Iteration  21: 4160715.974 ops/s
# Warmup Iteration  22: 4156884.019 ops/s
# Warmup Iteration  23: 4141778.861 ops/s
# Warmup Iteration  24: 4167235.143 ops/s
# Warmup Iteration  25: 4162843.202 ops/s
# Warmup Iteration  26: 4162974.977 ops/s
# Warmup Iteration  27: 4164579.963 ops/s
# Warmup Iteration  28: 4159740.820 ops/s
# Warmup Iteration  29: 4160983.514 ops/s
# Warmup Iteration  30: 4163019.022 ops/s
Iteration   1: 4159603.923 ops/s
Iteration   2: 4165864.734 ops/s
Iteration   3: 4160045.774 ops/s
Iteration   4: 4138084.254 ops/s
Iteration   5: 4144952.000 ops/s
Iteration   6: 4165040.985 ops/s
Iteration   7: 4168864.361 ops/s
Iteration   8: 4164227.877 ops/s
Iteration   9: 4162769.673 ops/s
Iteration  10: 4170320.201 ops/s
Iteration  11: 4162941.428 ops/s
Iteration  12: 4151214.291 ops/s
Iteration  13: 4149859.188 ops/s
Iteration  14: 4156006.057 ops/s
Iteration  15: 4155352.190 ops/s
Iteration  16: 4171885.320 ops/s
Iteration  17: 4161121.868 ops/s
Iteration  18: 4162545.558 ops/s
Iteration  19: 4163727.020 ops/s
Iteration  20: 4166856.064 ops/s
Iteration  21: 4162917.582 ops/s
Iteration  22: 4171511.586 ops/s
Iteration  23: 4160476.410 ops/s
Iteration  24: 4161172.296 ops/s
Iteration  25: 4171965.849 ops/s
Iteration  26: 4161418.696 ops/s
Iteration  27: 4166084.186 ops/s
Iteration  28: 4157293.276 ops/s
Iteration  29: 4148385.668 ops/s
Iteration  30: 4158581.919 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_anySatisfy":
  4160703.008 ±(99.9%) 5361.736 ops/s [Average]
  (min, avg, max) = (4138084.254, 4160703.008, 4171965.849), stdev = 8025.194
  CI (99.9%): [4155341.272, 4166064.743] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_anySatisfy  thrpt   30  4160703.008 ± 5361.736  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1936999.898 ops/s
# Warmup Iteration   2: 3734993.427 ops/s
# Warmup Iteration   3: 4056883.107 ops/s
# Warmup Iteration   4: 4087822.627 ops/s
# Warmup Iteration   5: 3383607.415 ops/s
# Warmup Iteration   6: 4101854.692 ops/s
# Warmup Iteration   7: 4097983.146 ops/s
# Warmup Iteration   8: 4090634.098 ops/s
# Warmup Iteration   9: 4070733.392 ops/s
# Warmup Iteration  10: 4098966.579 ops/s
# Warmup Iteration  11: 4098637.945 ops/s
# Warmup Iteration  12: 4093464.854 ops/s
# Warmup Iteration  13: 4092541.449 ops/s
# Warmup Iteration  14: 4090903.522 ops/s
# Warmup Iteration  15: 4094375.708 ops/s
# Warmup Iteration  16: 4092048.700 ops/s
# Warmup Iteration  17: 4100094.040 ops/s
# Warmup Iteration  18: 4090213.370 ops/s
# Warmup Iteration  19: 4101913.685 ops/s
# Warmup Iteration  20: 4098108.328 ops/s
# Warmup Iteration  21: 4076784.674 ops/s
# Warmup Iteration  22: 4096285.471 ops/s
# Warmup Iteration  23: 4097078.114 ops/s
# Warmup Iteration  24: 4078155.605 ops/s
# Warmup Iteration  25: 4080917.466 ops/s
# Warmup Iteration  26: 4089735.651 ops/s
# Warmup Iteration  27: 4096942.613 ops/s
# Warmup Iteration  28: 4095920.418 ops/s
# Warmup Iteration  29: 4093783.109 ops/s
# Warmup Iteration  30: 4059578.106 ops/s
Iteration   1: 4060853.001 ops/s
Iteration   2: 4089167.817 ops/s
Iteration   3: 4097814.074 ops/s
Iteration   4: 4093215.307 ops/s
Iteration   5: 4097980.121 ops/s
Iteration   6: 4104216.869 ops/s
Iteration   7: 4085436.209 ops/s
Iteration   8: 4094058.692 ops/s
Iteration   9: 4095992.131 ops/s
Iteration  10: 4096207.255 ops/s
Iteration  11: 4103977.741 ops/s
Iteration  12: 4094654.943 ops/s
Iteration  13: 4095691.833 ops/s
Iteration  14: 4103315.543 ops/s
Iteration  15: 4082445.577 ops/s
Iteration  16: 4079253.660 ops/s
Iteration  17: 4095488.412 ops/s
Iteration  18: 4089271.497 ops/s
Iteration  19: 4087910.942 ops/s
Iteration  20: 4067149.158 ops/s
Iteration  21: 4058508.512 ops/s
Iteration  22: 4049007.899 ops/s
Iteration  23: 4062078.229 ops/s
Iteration  24: 4087871.178 ops/s
Iteration  25: 4074556.546 ops/s
Iteration  26: 4095660.995 ops/s
Iteration  27: 4089167.765 ops/s
Iteration  28: 4087521.546 ops/s
Iteration  29: 4086864.063 ops/s
Iteration  30: 4091740.469 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_anySatisfyWith":
  4086569.266 ±(99.9%) 9488.392 ops/s [Average]
  (min, avg, max) = (4049007.899, 4086569.266, 4104216.869), stdev = 14201.780
  CI (99.9%): [4077080.874, 4096057.658] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  4086569.266 ± 9488.392  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_anySatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_anySatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1949217.218 ops/s
# Warmup Iteration   2: 3805226.490 ops/s
# Warmup Iteration   3: 4135503.345 ops/s
# Warmup Iteration   4: 4160827.986 ops/s
# Warmup Iteration   5: 3453471.392 ops/s
# Warmup Iteration   6: 4156735.440 ops/s
# Warmup Iteration   7: 4167196.151 ops/s
# Warmup Iteration   8: 4166463.722 ops/s
# Warmup Iteration   9: 4163907.143 ops/s
# Warmup Iteration  10: 4166635.034 ops/s
# Warmup Iteration  11: 4163903.947 ops/s
# Warmup Iteration  12: 4165049.506 ops/s
# Warmup Iteration  13: 4163010.265 ops/s
# Warmup Iteration  14: 4167044.367 ops/s
# Warmup Iteration  15: 4169066.015 ops/s
# Warmup Iteration  16: 4166537.520 ops/s
# Warmup Iteration  17: 4161713.250 ops/s
# Warmup Iteration  18: 4170410.301 ops/s
# Warmup Iteration  19: 4171158.335 ops/s
# Warmup Iteration  20: 4167511.821 ops/s
# Warmup Iteration  21: 4156561.335 ops/s
# Warmup Iteration  22: 4169414.100 ops/s
# Warmup Iteration  23: 4148370.555 ops/s
# Warmup Iteration  24: 4172954.074 ops/s
# Warmup Iteration  25: 4170749.800 ops/s
# Warmup Iteration  26: 4162389.062 ops/s
# Warmup Iteration  27: 4170950.839 ops/s
# Warmup Iteration  28: 4172324.549 ops/s
# Warmup Iteration  29: 4167361.767 ops/s
# Warmup Iteration  30: 4163722.636 ops/s
Iteration   1: 4165667.100 ops/s
Iteration   2: 4173308.189 ops/s
Iteration   3: 4157611.364 ops/s
Iteration   4: 4134995.638 ops/s
Iteration   5: 4166040.270 ops/s
Iteration   6: 4158568.667 ops/s
Iteration   7: 4171382.729 ops/s
Iteration   8: 4169178.587 ops/s
Iteration   9: 4164413.462 ops/s
Iteration  10: 4166670.601 ops/s
Iteration  11: 4176764.092 ops/s
Iteration  12: 4163255.402 ops/s
Iteration  13: 4166627.162 ops/s
Iteration  14: 4172762.985 ops/s
Iteration  15: 4167722.532 ops/s
Iteration  16: 4162297.062 ops/s
Iteration  17: 4175190.145 ops/s
Iteration  18: 4168545.748 ops/s
Iteration  19: 4166228.821 ops/s
Iteration  20: 4178623.545 ops/s
Iteration  21: 4164574.921 ops/s
Iteration  22: 4169055.379 ops/s
Iteration  23: 4175664.954 ops/s
Iteration  24: 4168673.475 ops/s
Iteration  25: 4161954.610 ops/s
Iteration  26: 4160222.956 ops/s
Iteration  27: 4166497.405 ops/s
Iteration  28: 4164469.433 ops/s
Iteration  29: 4175391.112 ops/s
Iteration  30: 4161205.221 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_anySatisfyWithOccurrences":
  4166452.119 ±(99.9%) 5391.197 ops/s [Average]
  (min, avg, max) = (4134995.638, 4166452.119, 4178623.545), stdev = 8069.290
  CI (99.9%): [4161060.922, 4171843.316] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_anySatisfyWithOccurrences  thrpt   30  4166452.119 ± 5391.197  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 604925.459 ops/s
# Warmup Iteration   2: 1244350.188 ops/s
# Warmup Iteration   3: 1325496.543 ops/s
# Warmup Iteration   4: 1327780.398 ops/s
# Warmup Iteration   5: 1109199.183 ops/s
# Warmup Iteration   6: 1329292.034 ops/s
# Warmup Iteration   7: 1329150.184 ops/s
# Warmup Iteration   8: 1328127.723 ops/s
# Warmup Iteration   9: 1327193.853 ops/s
# Warmup Iteration  10: 1328164.091 ops/s
# Warmup Iteration  11: 1330177.994 ops/s
# Warmup Iteration  12: 1329323.022 ops/s
# Warmup Iteration  13: 1335583.867 ops/s
# Warmup Iteration  14: 1334563.703 ops/s
# Warmup Iteration  15: 1334815.449 ops/s
# Warmup Iteration  16: 1334693.360 ops/s
# Warmup Iteration  17: 1336299.322 ops/s
# Warmup Iteration  18: 1335278.599 ops/s
# Warmup Iteration  19: 1334388.102 ops/s
# Warmup Iteration  20: 1335699.518 ops/s
# Warmup Iteration  21: 1329785.278 ops/s
# Warmup Iteration  22: 1333926.318 ops/s
# Warmup Iteration  23: 1336202.146 ops/s
# Warmup Iteration  24: 1333352.152 ops/s
# Warmup Iteration  25: 1334525.733 ops/s
# Warmup Iteration  26: 1326770.919 ops/s
# Warmup Iteration  27: 1335167.486 ops/s
# Warmup Iteration  28: 1335870.268 ops/s
# Warmup Iteration  29: 1335686.395 ops/s
# Warmup Iteration  30: 1336141.755 ops/s
Iteration   1: 1334239.539 ops/s
Iteration   2: 1332070.591 ops/s
Iteration   3: 1337135.809 ops/s
Iteration   4: 1332617.751 ops/s
Iteration   5: 1337358.491 ops/s
Iteration   6: 1334947.528 ops/s
Iteration   7: 1330079.506 ops/s
Iteration   8: 1334023.930 ops/s
Iteration   9: 1334754.143 ops/s
Iteration  10: 1334951.488 ops/s
Iteration  11: 1332061.203 ops/s
Iteration  12: 1334354.580 ops/s
Iteration  13: 1333768.645 ops/s
Iteration  14: 1334147.389 ops/s
Iteration  15: 1335751.403 ops/s
Iteration  16: 1333380.160 ops/s
Iteration  17: 1336291.412 ops/s
Iteration  18: 1334168.479 ops/s
Iteration  19: 1334873.725 ops/s
Iteration  20: 1338219.245 ops/s
Iteration  21: 1336456.327 ops/s
Iteration  22: 1335498.714 ops/s
Iteration  23: 1331454.350 ops/s
Iteration  24: 1334091.107 ops/s
Iteration  25: 1333112.746 ops/s
Iteration  26: 1334193.555 ops/s
Iteration  27: 1337760.300 ops/s
Iteration  28: 1334233.665 ops/s
Iteration  29: 1335399.038 ops/s
Iteration  30: 1335978.350 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_appendString":
  1334579.106 ±(99.9%) 1249.307 ops/s [Average]
  (min, avg, max) = (1330079.506, 1334579.106, 1338219.245), stdev = 1869.904
  CI (99.9%): [1333329.798, 1335828.413] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_appendString  thrpt   30  1334579.106 ± 1249.307  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_bottomOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_bottomOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 96251.758 ops/s
# Warmup Iteration   2: 148588.427 ops/s
# Warmup Iteration   3: 183548.739 ops/s
# Warmup Iteration   4: 182110.990 ops/s
# Warmup Iteration   5: 183541.209 ops/s
# Warmup Iteration   6: 183236.080 ops/s
# Warmup Iteration   7: 152710.413 ops/s
# Warmup Iteration   8: 183741.844 ops/s
# Warmup Iteration   9: 183174.449 ops/s
# Warmup Iteration  10: 183690.843 ops/s
# Warmup Iteration  11: 183704.380 ops/s
# Warmup Iteration  12: 183832.519 ops/s
# Warmup Iteration  13: 183397.909 ops/s
# Warmup Iteration  14: 183634.073 ops/s
# Warmup Iteration  15: 183337.859 ops/s
# Warmup Iteration  16: 183596.552 ops/s
# Warmup Iteration  17: 184992.808 ops/s
# Warmup Iteration  18: 185268.971 ops/s
# Warmup Iteration  19: 185341.145 ops/s
# Warmup Iteration  20: 185278.591 ops/s
# Warmup Iteration  21: 185057.692 ops/s
# Warmup Iteration  22: 185528.110 ops/s
# Warmup Iteration  23: 185323.955 ops/s
# Warmup Iteration  24: 185250.228 ops/s
# Warmup Iteration  25: 185142.364 ops/s
# Warmup Iteration  26: 185583.907 ops/s
# Warmup Iteration  27: 185379.765 ops/s
# Warmup Iteration  28: 185100.792 ops/s
# Warmup Iteration  29: 185201.831 ops/s
# Warmup Iteration  30: 185381.448 ops/s
Iteration   1: 185562.431 ops/s
Iteration   2: 185236.587 ops/s
Iteration   3: 185449.472 ops/s
Iteration   4: 185110.394 ops/s
Iteration   5: 185357.899 ops/s
Iteration   6: 185482.438 ops/s
Iteration   7: 185650.354 ops/s
Iteration   8: 185312.383 ops/s
Iteration   9: 185564.524 ops/s
Iteration  10: 185755.904 ops/s
Iteration  11: 185285.343 ops/s
Iteration  12: 185423.872 ops/s
Iteration  13: 185306.180 ops/s
Iteration  14: 185205.660 ops/s
Iteration  15: 185582.855 ops/s
Iteration  16: 185729.679 ops/s
Iteration  17: 185531.553 ops/s
Iteration  18: 185475.656 ops/s
Iteration  19: 185377.257 ops/s
Iteration  20: 185169.372 ops/s
Iteration  21: 185505.951 ops/s
Iteration  22: 185450.417 ops/s
Iteration  23: 185724.170 ops/s
Iteration  24: 185435.622 ops/s
Iteration  25: 185277.326 ops/s
Iteration  26: 184326.237 ops/s
Iteration  27: 184722.395 ops/s
Iteration  28: 185633.015 ops/s
Iteration  29: 185619.021 ops/s
Iteration  30: 185669.751 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_bottomOccurrences":
  185397.791 ±(99.9%) 199.023 ops/s [Average]
  (min, avg, max) = (184326.237, 185397.791, 185755.904), stdev = 297.888
  CI (99.9%): [185198.768, 185596.814] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_bottomOccurrences  thrpt   30  185397.791 ± 199.023  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_castToCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_castToCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 519156.903 ops/s
# Warmup Iteration   2: 622993.237 ops/s
# Warmup Iteration   3: 802477.305 ops/s
# Warmup Iteration   4: 803538.164 ops/s
# Warmup Iteration   5: 797826.673 ops/s
# Warmup Iteration   6: 803659.372 ops/s
# Warmup Iteration   7: 802528.941 ops/s
# Warmup Iteration   8: 800002.310 ops/s
# Warmup Iteration   9: 790016.498 ops/s
# Warmup Iteration  10: 683996.977 ops/s
# Warmup Iteration  11: 802268.540 ops/s
# Warmup Iteration  12: 798742.813 ops/s
# Warmup Iteration  13: 801673.364 ops/s
# Warmup Iteration  14: 799088.653 ops/s
# Warmup Iteration  15: 798194.196 ops/s
# Warmup Iteration  16: 797371.482 ops/s
# Warmup Iteration  17: 840260.818 ops/s
# Warmup Iteration  18: 838468.487 ops/s
# Warmup Iteration  19: 838734.440 ops/s
# Warmup Iteration  20: 837467.031 ops/s
# Warmup Iteration  21: 839864.973 ops/s
# Warmup Iteration  22: 839519.435 ops/s
# Warmup Iteration  23: 835316.565 ops/s
# Warmup Iteration  24: 838260.412 ops/s
# Warmup Iteration  25: 837698.226 ops/s
# Warmup Iteration  26: 840136.553 ops/s
# Warmup Iteration  27: 839546.948 ops/s
# Warmup Iteration  28: 837962.868 ops/s
# Warmup Iteration  29: 834404.199 ops/s
# Warmup Iteration  30: 840340.955 ops/s
Iteration   1: 842123.288 ops/s
Iteration   2: 841722.950 ops/s
Iteration   3: 839572.155 ops/s
Iteration   4: 840513.965 ops/s
Iteration   5: 835978.620 ops/s
Iteration   6: 838734.646 ops/s
Iteration   7: 840131.466 ops/s
Iteration   8: 839930.165 ops/s
Iteration   9: 839752.982 ops/s
Iteration  10: 840717.576 ops/s
Iteration  11: 840884.569 ops/s
Iteration  12: 837657.944 ops/s
Iteration  13: 837249.243 ops/s
Iteration  14: 840858.574 ops/s
Iteration  15: 837795.181 ops/s
Iteration  16: 838993.629 ops/s
Iteration  17: 839635.556 ops/s
Iteration  18: 839695.066 ops/s
Iteration  19: 838120.889 ops/s
Iteration  20: 839227.123 ops/s
Iteration  21: 841678.124 ops/s
Iteration  22: 839550.035 ops/s
Iteration  23: 841327.408 ops/s
Iteration  24: 836559.583 ops/s
Iteration  25: 839067.347 ops/s
Iteration  26: 841098.709 ops/s
Iteration  27: 840764.712 ops/s
Iteration  28: 840174.341 ops/s
Iteration  29: 839463.098 ops/s
Iteration  30: 837271.098 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_castToCollection":
  839541.668 ±(99.9%) 1051.537 ops/s [Average]
  (min, avg, max) = (835978.620, 839541.668, 842123.288), stdev = 1573.892
  CI (99.9%): [838490.131, 840593.205] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_castToCollection  thrpt   30  839541.668 ± 1051.537  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 396231.268 ops/s
# Warmup Iteration   2: 732043.004 ops/s
# Warmup Iteration   3: 829772.712 ops/s
# Warmup Iteration   4: 828316.130 ops/s
# Warmup Iteration   5: 779179.960 ops/s
# Warmup Iteration   6: 738815.660 ops/s
# Warmup Iteration   7: 827295.242 ops/s
# Warmup Iteration   8: 828786.371 ops/s
# Warmup Iteration   9: 827954.707 ops/s
# Warmup Iteration  10: 829492.012 ops/s
# Warmup Iteration  11: 829784.386 ops/s
# Warmup Iteration  12: 830146.669 ops/s
# Warmup Iteration  13: 829014.693 ops/s
# Warmup Iteration  14: 830462.807 ops/s
# Warmup Iteration  15: 829649.316 ops/s
# Warmup Iteration  16: 829783.035 ops/s
# Warmup Iteration  17: 826742.490 ops/s
# Warmup Iteration  18: 829659.102 ops/s
# Warmup Iteration  19: 830063.662 ops/s
# Warmup Iteration  20: 829711.179 ops/s
# Warmup Iteration  21: 831180.939 ops/s
# Warmup Iteration  22: 828793.309 ops/s
# Warmup Iteration  23: 829531.904 ops/s
# Warmup Iteration  24: 829012.402 ops/s
# Warmup Iteration  25: 832094.897 ops/s
# Warmup Iteration  26: 831127.212 ops/s
# Warmup Iteration  27: 831217.188 ops/s
# Warmup Iteration  28: 830864.699 ops/s
# Warmup Iteration  29: 831699.234 ops/s
# Warmup Iteration  30: 828820.401 ops/s
Iteration   1: 830269.618 ops/s
Iteration   2: 832765.838 ops/s
Iteration   3: 828734.648 ops/s
Iteration   4: 831895.136 ops/s
Iteration   5: 830420.081 ops/s
Iteration   6: 828367.185 ops/s
Iteration   7: 828287.585 ops/s
Iteration   8: 830094.147 ops/s
Iteration   9: 831515.980 ops/s
Iteration  10: 832349.113 ops/s
Iteration  11: 831609.968 ops/s
Iteration  12: 832866.578 ops/s
Iteration  13: 831537.521 ops/s
Iteration  14: 831794.500 ops/s
Iteration  15: 829853.420 ops/s
Iteration  16: 829796.084 ops/s
Iteration  17: 831041.899 ops/s
Iteration  18: 829695.639 ops/s
Iteration  19: 827644.841 ops/s
Iteration  20: 828721.986 ops/s
Iteration  21: 830133.725 ops/s
Iteration  22: 829603.315 ops/s
Iteration  23: 832500.260 ops/s
Iteration  24: 831118.214 ops/s
Iteration  25: 832393.193 ops/s
Iteration  26: 830612.134 ops/s
Iteration  27: 827998.973 ops/s
Iteration  28: 830723.966 ops/s
Iteration  29: 828991.898 ops/s
Iteration  30: 831458.990 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_chunk_large_size":
  830493.215 ±(99.9%) 1003.970 ops/s [Average]
  (min, avg, max) = (827644.841, 830493.215, 832866.578), stdev = 1502.695
  CI (99.9%): [829489.244, 831497.185] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_chunk_large_size  thrpt   30  830493.215 ± 1003.970  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 532910.647 ops/s
# Warmup Iteration   2: 633536.326 ops/s
# Warmup Iteration   3: 825144.236 ops/s
# Warmup Iteration   4: 826960.487 ops/s
# Warmup Iteration   5: 821493.112 ops/s
# Warmup Iteration   6: 824659.534 ops/s
# Warmup Iteration   7: 820268.689 ops/s
# Warmup Iteration   8: 825060.778 ops/s
# Warmup Iteration   9: 826702.172 ops/s
# Warmup Iteration  10: 691655.920 ops/s
# Warmup Iteration  11: 826475.997 ops/s
# Warmup Iteration  12: 825225.661 ops/s
# Warmup Iteration  13: 825142.267 ops/s
# Warmup Iteration  14: 824413.766 ops/s
# Warmup Iteration  15: 827292.384 ops/s
# Warmup Iteration  16: 826151.762 ops/s
# Warmup Iteration  17: 867842.232 ops/s
# Warmup Iteration  18: 868025.616 ops/s
# Warmup Iteration  19: 866487.197 ops/s
# Warmup Iteration  20: 866352.162 ops/s
# Warmup Iteration  21: 867348.648 ops/s
# Warmup Iteration  22: 864382.359 ops/s
# Warmup Iteration  23: 864393.481 ops/s
# Warmup Iteration  24: 860827.318 ops/s
# Warmup Iteration  25: 868059.044 ops/s
# Warmup Iteration  26: 867303.241 ops/s
# Warmup Iteration  27: 869504.454 ops/s
# Warmup Iteration  28: 868744.515 ops/s
# Warmup Iteration  29: 867854.253 ops/s
# Warmup Iteration  30: 868528.892 ops/s
Iteration   1: 867895.467 ops/s
Iteration   2: 868172.826 ops/s
Iteration   3: 868130.953 ops/s
Iteration   4: 868640.094 ops/s
Iteration   5: 868144.283 ops/s
Iteration   6: 869322.472 ops/s
Iteration   7: 867269.831 ops/s
Iteration   8: 868759.869 ops/s
Iteration   9: 868552.909 ops/s
Iteration  10: 863402.348 ops/s
Iteration  11: 864974.334 ops/s
Iteration  12: 865300.745 ops/s
Iteration  13: 865919.224 ops/s
Iteration  14: 867809.331 ops/s
Iteration  15: 867018.855 ops/s
Iteration  16: 865671.702 ops/s
Iteration  17: 865184.056 ops/s
Iteration  18: 866094.965 ops/s
Iteration  19: 863293.765 ops/s
Iteration  20: 865310.243 ops/s
Iteration  21: 865724.832 ops/s
Iteration  22: 864242.196 ops/s
Iteration  23: 864154.166 ops/s
Iteration  24: 864014.186 ops/s
Iteration  25: 864841.595 ops/s
Iteration  26: 868605.393 ops/s
Iteration  27: 866608.930 ops/s
Iteration  28: 865155.270 ops/s
Iteration  29: 866361.751 ops/s
Iteration  30: 868837.292 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_chunk_zero_throws":
  866447.129 ±(99.9%) 1204.850 ops/s [Average]
  (min, avg, max) = (863293.765, 866447.129, 869322.472), stdev = 1803.363
  CI (99.9%): [865242.280, 867651.979] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  866447.129 ± 1204.850  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 504957.458 ops/s
# Warmup Iteration   2: 585825.417 ops/s
# Warmup Iteration   3: 787319.058 ops/s
# Warmup Iteration   4: 788301.245 ops/s
# Warmup Iteration   5: 783192.707 ops/s
# Warmup Iteration   6: 787355.346 ops/s
# Warmup Iteration   7: 787211.439 ops/s
# Warmup Iteration   8: 785490.021 ops/s
# Warmup Iteration   9: 786586.234 ops/s
# Warmup Iteration  10: 668565.492 ops/s
# Warmup Iteration  11: 777684.891 ops/s
# Warmup Iteration  12: 787341.009 ops/s
# Warmup Iteration  13: 788117.676 ops/s
# Warmup Iteration  14: 788455.038 ops/s
# Warmup Iteration  15: 787508.375 ops/s
# Warmup Iteration  16: 783557.345 ops/s
# Warmup Iteration  17: 826593.098 ops/s
# Warmup Iteration  18: 826711.784 ops/s
# Warmup Iteration  19: 826569.406 ops/s
# Warmup Iteration  20: 825423.246 ops/s
# Warmup Iteration  21: 820016.237 ops/s
# Warmup Iteration  22: 825114.784 ops/s
# Warmup Iteration  23: 828027.426 ops/s
# Warmup Iteration  24: 824098.013 ops/s
# Warmup Iteration  25: 826464.367 ops/s
# Warmup Iteration  26: 823797.433 ops/s
# Warmup Iteration  27: 826782.239 ops/s
# Warmup Iteration  28: 824139.826 ops/s
# Warmup Iteration  29: 826807.554 ops/s
# Warmup Iteration  30: 825559.888 ops/s
Iteration   1: 827434.588 ops/s
Iteration   2: 823626.777 ops/s
Iteration   3: 827382.552 ops/s
Iteration   4: 828005.323 ops/s
Iteration   5: 828769.773 ops/s
Iteration   6: 827247.783 ops/s
Iteration   7: 821989.201 ops/s
Iteration   8: 828480.354 ops/s
Iteration   9: 827355.917 ops/s
Iteration  10: 825675.979 ops/s
Iteration  11: 827417.735 ops/s
Iteration  12: 825530.219 ops/s
Iteration  13: 826508.432 ops/s
Iteration  14: 827501.216 ops/s
Iteration  15: 822793.782 ops/s
Iteration  16: 822185.304 ops/s
Iteration  17: 827821.466 ops/s
Iteration  18: 827606.115 ops/s
Iteration  19: 828068.800 ops/s
Iteration  20: 823648.035 ops/s
Iteration  21: 827704.231 ops/s
Iteration  22: 827023.219 ops/s
Iteration  23: 825549.566 ops/s
Iteration  24: 827517.321 ops/s
Iteration  25: 826057.783 ops/s
Iteration  26: 823873.815 ops/s
Iteration  27: 825322.516 ops/s
Iteration  28: 825819.733 ops/s
Iteration  29: 825722.947 ops/s
Iteration  30: 827825.595 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_clear":
  826248.869 ±(99.9%) 1273.354 ops/s [Average]
  (min, avg, max) = (821989.201, 826248.869, 828769.773), stdev = 1905.897
  CI (99.9%): [824975.515, 827522.224] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_clear  thrpt   30  826248.869 ± 1273.354  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1337965.960 ops/s
# Warmup Iteration   2: 2622290.071 ops/s
# Warmup Iteration   3: 2909271.158 ops/s
# Warmup Iteration   4: 2926210.175 ops/s
# Warmup Iteration   5: 2451150.245 ops/s
# Warmup Iteration   6: 2884831.274 ops/s
# Warmup Iteration   7: 2924026.834 ops/s
# Warmup Iteration   8: 2924625.199 ops/s
# Warmup Iteration   9: 2917177.060 ops/s
# Warmup Iteration  10: 2907222.262 ops/s
# Warmup Iteration  11: 2924459.541 ops/s
# Warmup Iteration  12: 2924811.061 ops/s
# Warmup Iteration  13: 2925593.421 ops/s
# Warmup Iteration  14: 2919238.994 ops/s
# Warmup Iteration  15: 2927733.285 ops/s
# Warmup Iteration  16: 2908411.465 ops/s
# Warmup Iteration  17: 2910888.931 ops/s
# Warmup Iteration  18: 2924563.421 ops/s
# Warmup Iteration  19: 2921139.962 ops/s
# Warmup Iteration  20: 2924229.582 ops/s
# Warmup Iteration  21: 2926756.039 ops/s
# Warmup Iteration  22: 2922281.620 ops/s
# Warmup Iteration  23: 2926954.756 ops/s
# Warmup Iteration  24: 2925083.990 ops/s
# Warmup Iteration  25: 2927463.226 ops/s
# Warmup Iteration  26: 2917831.472 ops/s
# Warmup Iteration  27: 2923713.353 ops/s
# Warmup Iteration  28: 2925054.036 ops/s
# Warmup Iteration  29: 2921820.757 ops/s
# Warmup Iteration  30: 2924301.766 ops/s
Iteration   1: 2927802.271 ops/s
Iteration   2: 2925012.353 ops/s
Iteration   3: 2923128.609 ops/s
Iteration   4: 2930157.602 ops/s
Iteration   5: 2892557.645 ops/s
Iteration   6: 2923923.259 ops/s
Iteration   7: 2928149.384 ops/s
Iteration   8: 2923087.984 ops/s
Iteration   9: 2925568.380 ops/s
Iteration  10: 2923762.801 ops/s
Iteration  11: 2927978.057 ops/s
Iteration  12: 2924032.619 ops/s
Iteration  13: 2931572.987 ops/s
Iteration  14: 2925098.125 ops/s
Iteration  15: 2925553.368 ops/s
Iteration  16: 2912123.445 ops/s
Iteration  17: 2912615.937 ops/s
Iteration  18: 2928683.267 ops/s
Iteration  19: 2901713.865 ops/s
Iteration  20: 2924267.239 ops/s
Iteration  21: 2930087.196 ops/s
Iteration  22: 2927180.125 ops/s
Iteration  23: 2919092.377 ops/s
Iteration  24: 2927828.048 ops/s
Iteration  25: 2925227.058 ops/s
Iteration  26: 2924098.620 ops/s
Iteration  27: 2930082.009 ops/s
Iteration  28: 2927835.287 ops/s
Iteration  29: 2925016.368 ops/s
Iteration  30: 2930447.449 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collect":
  2923456.124 ±(99.9%) 5688.534 ops/s [Average]
  (min, avg, max) = (2892557.645, 2923456.124, 2931572.987), stdev = 8514.331
  CI (99.9%): [2917767.590, 2929144.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collect  thrpt   30  2923456.124 ± 5688.534  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1037256.131 ops/s
# Warmup Iteration   2: 1976919.781 ops/s
# Warmup Iteration   3: 2198671.065 ops/s
# Warmup Iteration   4: 2212728.140 ops/s
# Warmup Iteration   5: 1947715.979 ops/s
# Warmup Iteration   6: 2087575.741 ops/s
# Warmup Iteration   7: 2210751.629 ops/s
# Warmup Iteration   8: 2211539.366 ops/s
# Warmup Iteration   9: 2212203.565 ops/s
# Warmup Iteration  10: 2212285.394 ops/s
# Warmup Iteration  11: 2209404.785 ops/s
# Warmup Iteration  12: 2209312.236 ops/s
# Warmup Iteration  13: 2211633.708 ops/s
# Warmup Iteration  14: 2209394.420 ops/s
# Warmup Iteration  15: 2211911.745 ops/s
# Warmup Iteration  16: 2213923.952 ops/s
# Warmup Iteration  17: 2206064.960 ops/s
# Warmup Iteration  18: 2209930.551 ops/s
# Warmup Iteration  19: 2213050.457 ops/s
# Warmup Iteration  20: 2208891.520 ops/s
# Warmup Iteration  21: 2211371.381 ops/s
# Warmup Iteration  22: 2211834.490 ops/s
# Warmup Iteration  23: 2213510.752 ops/s
# Warmup Iteration  24: 2210541.706 ops/s
# Warmup Iteration  25: 2213623.805 ops/s
# Warmup Iteration  26: 2210377.266 ops/s
# Warmup Iteration  27: 2212016.525 ops/s
# Warmup Iteration  28: 2210019.865 ops/s
# Warmup Iteration  29: 2205847.912 ops/s
# Warmup Iteration  30: 2205465.873 ops/s
Iteration   1: 2213755.512 ops/s
Iteration   2: 2215411.492 ops/s
Iteration   3: 2203752.573 ops/s
Iteration   4: 2217148.366 ops/s
Iteration   5: 2210621.231 ops/s
Iteration   6: 2214501.252 ops/s
Iteration   7: 2217383.639 ops/s
Iteration   8: 2211407.998 ops/s
Iteration   9: 2213272.865 ops/s
Iteration  10: 2217198.704 ops/s
Iteration  11: 2212343.906 ops/s
Iteration  12: 2204265.530 ops/s
Iteration  13: 2201497.600 ops/s
Iteration  14: 2199721.099 ops/s
Iteration  15: 2200972.557 ops/s
Iteration  16: 2208582.735 ops/s
Iteration  17: 2209565.584 ops/s
Iteration  18: 2215007.009 ops/s
Iteration  19: 2212520.445 ops/s
Iteration  20: 2211471.185 ops/s
Iteration  21: 2213572.935 ops/s
Iteration  22: 2210442.751 ops/s
Iteration  23: 2214060.981 ops/s
Iteration  24: 2210385.599 ops/s
Iteration  25: 2211869.589 ops/s
Iteration  26: 2216036.757 ops/s
Iteration  27: 2210725.955 ops/s
Iteration  28: 2212568.107 ops/s
Iteration  29: 2208432.081 ops/s
Iteration  30: 2210433.834 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectBoolean":
  2210964.329 ±(99.9%) 3182.981 ops/s [Average]
  (min, avg, max) = (2199721.099, 2210964.329, 2217383.639), stdev = 4764.137
  CI (99.9%): [2207781.348, 2214147.310] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectBoolean  thrpt   30  2210964.329 ± 3182.981  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectBoolean_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectBoolean_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 712906.913 ops/s
# Warmup Iteration   2: 1311779.127 ops/s
# Warmup Iteration   3: 1457309.861 ops/s
# Warmup Iteration   4: 1462356.665 ops/s
# Warmup Iteration   5: 1395817.743 ops/s
# Warmup Iteration   6: 1273167.577 ops/s
# Warmup Iteration   7: 1463972.621 ops/s
# Warmup Iteration   8: 1464950.510 ops/s
# Warmup Iteration   9: 1464602.366 ops/s
# Warmup Iteration  10: 1459725.949 ops/s
# Warmup Iteration  11: 1462595.684 ops/s
# Warmup Iteration  12: 1461181.220 ops/s
# Warmup Iteration  13: 1464784.904 ops/s
# Warmup Iteration  14: 1458118.747 ops/s
# Warmup Iteration  15: 1463781.737 ops/s
# Warmup Iteration  16: 1462370.903 ops/s
# Warmup Iteration  17: 1448450.458 ops/s
# Warmup Iteration  18: 1451735.720 ops/s
# Warmup Iteration  19: 1449587.876 ops/s
# Warmup Iteration  20: 1451606.311 ops/s
# Warmup Iteration  21: 1445427.974 ops/s
# Warmup Iteration  22: 1448713.662 ops/s
# Warmup Iteration  23: 1449888.448 ops/s
# Warmup Iteration  24: 1451055.024 ops/s
# Warmup Iteration  25: 1447355.908 ops/s
# Warmup Iteration  26: 1446062.169 ops/s
# Warmup Iteration  27: 1451430.523 ops/s
# Warmup Iteration  28: 1450715.765 ops/s
# Warmup Iteration  29: 1449611.402 ops/s
# Warmup Iteration  30: 1447339.384 ops/s
Iteration   1: 1448944.973 ops/s
Iteration   2: 1448008.667 ops/s
Iteration   3: 1452979.238 ops/s
Iteration   4: 1448266.399 ops/s
Iteration   5: 1446659.164 ops/s
Iteration   6: 1450430.267 ops/s
Iteration   7: 1447538.683 ops/s
Iteration   8: 1453934.978 ops/s
Iteration   9: 1448419.238 ops/s
Iteration  10: 1447106.062 ops/s
Iteration  11: 1449357.905 ops/s
Iteration  12: 1450866.501 ops/s
Iteration  13: 1453519.440 ops/s
Iteration  14: 1450695.264 ops/s
Iteration  15: 1449620.618 ops/s
Iteration  16: 1449801.909 ops/s
Iteration  17: 1450651.540 ops/s
Iteration  18: 1452864.071 ops/s
Iteration  19: 1450583.186 ops/s
Iteration  20: 1454362.426 ops/s
Iteration  21: 1448348.696 ops/s
Iteration  22: 1445464.047 ops/s
Iteration  23: 1452822.067 ops/s
Iteration  24: 1450659.092 ops/s
Iteration  25: 1451185.538 ops/s
Iteration  26: 1450218.433 ops/s
Iteration  27: 1450087.806 ops/s
Iteration  28: 1451295.782 ops/s
Iteration  29: 1447815.488 ops/s
Iteration  30: 1450219.710 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectBoolean_target":
  1450090.906 ±(99.9%) 1480.225 ops/s [Average]
  (min, avg, max) = (1445464.047, 1450090.906, 1454362.426), stdev = 2215.532
  CI (99.9%): [1448610.681, 1451571.131] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectBoolean_target  thrpt   30  1450090.906 ± 1480.225  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1210601.900 ops/s
# Warmup Iteration   2: 2049290.885 ops/s
# Warmup Iteration   3: 2387312.483 ops/s
# Warmup Iteration   4: 2406932.027 ops/s
# Warmup Iteration   5: 2401649.834 ops/s
# Warmup Iteration   6: 1982798.251 ops/s
# Warmup Iteration   7: 2418814.363 ops/s
# Warmup Iteration   8: 2418735.785 ops/s
# Warmup Iteration   9: 2418071.754 ops/s
# Warmup Iteration  10: 2413182.894 ops/s
# Warmup Iteration  11: 2418370.724 ops/s
# Warmup Iteration  12: 2415950.344 ops/s
# Warmup Iteration  13: 2420383.692 ops/s
# Warmup Iteration  14: 2416417.829 ops/s
# Warmup Iteration  15: 2418179.140 ops/s
# Warmup Iteration  16: 2417673.071 ops/s
# Warmup Iteration  17: 2416460.800 ops/s
# Warmup Iteration  18: 2417485.234 ops/s
# Warmup Iteration  19: 2416978.841 ops/s
# Warmup Iteration  20: 2420115.851 ops/s
# Warmup Iteration  21: 2409005.760 ops/s
# Warmup Iteration  22: 2416794.185 ops/s
# Warmup Iteration  23: 2417331.210 ops/s
# Warmup Iteration  24: 2418471.713 ops/s
# Warmup Iteration  25: 2419511.588 ops/s
# Warmup Iteration  26: 2418812.318 ops/s
# Warmup Iteration  27: 2418554.853 ops/s
# Warmup Iteration  28: 2420075.816 ops/s
# Warmup Iteration  29: 2418725.347 ops/s
# Warmup Iteration  30: 2419389.326 ops/s
Iteration   1: 2418777.089 ops/s
Iteration   2: 2422596.011 ops/s
Iteration   3: 2413356.059 ops/s
Iteration   4: 2420822.938 ops/s
Iteration   5: 2418238.372 ops/s
Iteration   6: 2417021.831 ops/s
Iteration   7: 2419994.560 ops/s
Iteration   8: 2421206.972 ops/s
Iteration   9: 2424343.864 ops/s
Iteration  10: 2416940.596 ops/s
Iteration  11: 2424246.342 ops/s
Iteration  12: 2409825.155 ops/s
Iteration  13: 2419782.140 ops/s
Iteration  14: 2421688.709 ops/s
Iteration  15: 2421537.806 ops/s
Iteration  16: 2413443.912 ops/s
Iteration  17: 2420704.986 ops/s
Iteration  18: 2414571.334 ops/s
Iteration  19: 2421017.234 ops/s
Iteration  20: 2420922.139 ops/s
Iteration  21: 2415611.418 ops/s
Iteration  22: 2417635.641 ops/s
Iteration  23: 2403188.631 ops/s
Iteration  24: 2406168.704 ops/s
Iteration  25: 2406276.236 ops/s
Iteration  26: 2410269.031 ops/s
Iteration  27: 2404468.038 ops/s
Iteration  28: 2417944.460 ops/s
Iteration  29: 2414182.558 ops/s
Iteration  30: 2419799.665 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectByte":
  2416552.748 ±(99.9%) 3925.302 ops/s [Average]
  (min, avg, max) = (2403188.631, 2416552.748, 2424343.864), stdev = 5875.208
  CI (99.9%): [2412627.445, 2420478.050] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectByte  thrpt   30  2416552.748 ± 3925.302  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectByte_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectByte_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 517596.235 ops/s
# Warmup Iteration   2: 1081916.532 ops/s
# Warmup Iteration   3: 1181203.770 ops/s
# Warmup Iteration   4: 1184256.106 ops/s
# Warmup Iteration   5: 988661.102 ops/s
# Warmup Iteration   6: 1185979.815 ops/s
# Warmup Iteration   7: 1186144.924 ops/s
# Warmup Iteration   8: 1186924.311 ops/s
# Warmup Iteration   9: 1177567.755 ops/s
# Warmup Iteration  10: 1186769.573 ops/s
# Warmup Iteration  11: 1188107.933 ops/s
# Warmup Iteration  12: 1186176.852 ops/s
# Warmup Iteration  13: 1187199.331 ops/s
# Warmup Iteration  14: 1187344.503 ops/s
# Warmup Iteration  15: 1187357.101 ops/s
# Warmup Iteration  16: 1187368.721 ops/s
# Warmup Iteration  17: 1186883.650 ops/s
# Warmup Iteration  18: 1189289.982 ops/s
# Warmup Iteration  19: 1187317.453 ops/s
# Warmup Iteration  20: 1189207.199 ops/s
# Warmup Iteration  21: 1189360.947 ops/s
# Warmup Iteration  22: 1189460.407 ops/s
# Warmup Iteration  23: 1189443.941 ops/s
# Warmup Iteration  24: 1187729.504 ops/s
# Warmup Iteration  25: 1189002.275 ops/s
# Warmup Iteration  26: 1187402.807 ops/s
# Warmup Iteration  27: 1189882.777 ops/s
# Warmup Iteration  28: 1191422.896 ops/s
# Warmup Iteration  29: 1188666.820 ops/s
# Warmup Iteration  30: 1182911.269 ops/s
Iteration   1: 1188965.634 ops/s
Iteration   2: 1189198.155 ops/s
Iteration   3: 1190410.472 ops/s
Iteration   4: 1187899.767 ops/s
Iteration   5: 1187158.350 ops/s
Iteration   6: 1192839.606 ops/s
Iteration   7: 1189579.932 ops/s
Iteration   8: 1187709.553 ops/s
Iteration   9: 1190142.307 ops/s
Iteration  10: 1192149.187 ops/s
Iteration  11: 1188369.441 ops/s
Iteration  12: 1183812.629 ops/s
Iteration  13: 1188464.893 ops/s
Iteration  14: 1183349.888 ops/s
Iteration  15: 1189297.909 ops/s
Iteration  16: 1191452.035 ops/s
Iteration  17: 1192405.747 ops/s
Iteration  18: 1189859.864 ops/s
Iteration  19: 1186613.747 ops/s
Iteration  20: 1191774.722 ops/s
Iteration  21: 1187744.302 ops/s
Iteration  22: 1189708.824 ops/s
Iteration  23: 1191495.483 ops/s
Iteration  24: 1187695.078 ops/s
Iteration  25: 1187736.858 ops/s
Iteration  26: 1188163.481 ops/s
Iteration  27: 1193220.682 ops/s
Iteration  28: 1188825.787 ops/s
Iteration  29: 1188895.491 ops/s
Iteration  30: 1188690.885 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectByte_target":
  1189121.024 ±(99.9%) 1548.406 ops/s [Average]
  (min, avg, max) = (1183349.888, 1189121.024, 1193220.682), stdev = 2317.581
  CI (99.9%): [1187572.618, 1190669.430] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectByte_target  thrpt   30  1189121.024 ± 1548.406  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1186958.720 ops/s
# Warmup Iteration   2: 2039084.801 ops/s
# Warmup Iteration   3: 2369956.850 ops/s
# Warmup Iteration   4: 2373864.268 ops/s
# Warmup Iteration   5: 2374128.489 ops/s
# Warmup Iteration   6: 1959393.665 ops/s
# Warmup Iteration   7: 2369672.844 ops/s
# Warmup Iteration   8: 2384919.928 ops/s
# Warmup Iteration   9: 2382482.882 ops/s
# Warmup Iteration  10: 2384916.899 ops/s
# Warmup Iteration  11: 2384783.471 ops/s
# Warmup Iteration  12: 2384227.957 ops/s
# Warmup Iteration  13: 2379747.222 ops/s
# Warmup Iteration  14: 2374042.788 ops/s
# Warmup Iteration  15: 2373091.858 ops/s
# Warmup Iteration  16: 2379185.637 ops/s
# Warmup Iteration  17: 2384548.649 ops/s
# Warmup Iteration  18: 2379261.997 ops/s
# Warmup Iteration  19: 2385418.810 ops/s
# Warmup Iteration  20: 2386456.905 ops/s
# Warmup Iteration  21: 2381228.101 ops/s
# Warmup Iteration  22: 2373361.390 ops/s
# Warmup Iteration  23: 2382698.525 ops/s
# Warmup Iteration  24: 2386289.695 ops/s
# Warmup Iteration  25: 2382138.872 ops/s
# Warmup Iteration  26: 2387321.307 ops/s
# Warmup Iteration  27: 2385633.472 ops/s
# Warmup Iteration  28: 2382926.827 ops/s
# Warmup Iteration  29: 2385968.746 ops/s
# Warmup Iteration  30: 2379674.519 ops/s
Iteration   1: 2377683.114 ops/s
Iteration   2: 2385490.221 ops/s
Iteration   3: 2382793.978 ops/s
Iteration   4: 2377612.436 ops/s
Iteration   5: 2381135.316 ops/s
Iteration   6: 2386811.518 ops/s
Iteration   7: 2381347.085 ops/s
Iteration   8: 2387425.857 ops/s
Iteration   9: 2382108.870 ops/s
Iteration  10: 2386348.272 ops/s
Iteration  11: 2380081.160 ops/s
Iteration  12: 2382701.973 ops/s
Iteration  13: 2387830.088 ops/s
Iteration  14: 2382866.474 ops/s
Iteration  15: 2388914.314 ops/s
Iteration  16: 2373984.873 ops/s
Iteration  17: 2380110.543 ops/s
Iteration  18: 2385259.471 ops/s
Iteration  19: 2387979.369 ops/s
Iteration  20: 2384590.721 ops/s
Iteration  21: 2388161.526 ops/s
Iteration  22: 2381823.941 ops/s
Iteration  23: 2385607.308 ops/s
Iteration  24: 2383635.301 ops/s
Iteration  25: 2381440.582 ops/s
Iteration  26: 2384689.193 ops/s
Iteration  27: 2382149.299 ops/s
Iteration  28: 2385586.006 ops/s
Iteration  29: 2383954.805 ops/s
Iteration  30: 2388802.767 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectChar":
  2383630.879 ±(99.9%) 2403.866 ops/s [Average]
  (min, avg, max) = (2373984.873, 2383630.879, 2388914.314), stdev = 3597.993
  CI (99.9%): [2381227.014, 2386034.745] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectChar  thrpt   30  2383630.879 ± 2403.866  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectChar_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectChar_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 514157.220 ops/s
# Warmup Iteration   2: 1108866.653 ops/s
# Warmup Iteration   3: 1191957.908 ops/s
# Warmup Iteration   4: 1199736.816 ops/s
# Warmup Iteration   5: 998797.755 ops/s
# Warmup Iteration   6: 1203969.670 ops/s
# Warmup Iteration   7: 1198139.625 ops/s
# Warmup Iteration   8: 1197798.035 ops/s
# Warmup Iteration   9: 1196044.434 ops/s
# Warmup Iteration  10: 1203199.228 ops/s
# Warmup Iteration  11: 1201955.817 ops/s
# Warmup Iteration  12: 1198726.794 ops/s
# Warmup Iteration  13: 1201240.499 ops/s
# Warmup Iteration  14: 1203585.655 ops/s
# Warmup Iteration  15: 1202983.677 ops/s
# Warmup Iteration  16: 1189469.372 ops/s
# Warmup Iteration  17: 1197706.768 ops/s
# Warmup Iteration  18: 1198786.852 ops/s
# Warmup Iteration  19: 1199960.613 ops/s
# Warmup Iteration  20: 1199979.744 ops/s
# Warmup Iteration  21: 1200016.934 ops/s
# Warmup Iteration  22: 1204024.961 ops/s
# Warmup Iteration  23: 1200335.383 ops/s
# Warmup Iteration  24: 1201925.674 ops/s
# Warmup Iteration  25: 1200845.262 ops/s
# Warmup Iteration  26: 1198727.815 ops/s
# Warmup Iteration  27: 1200157.346 ops/s
# Warmup Iteration  28: 1192571.875 ops/s
# Warmup Iteration  29: 1198625.504 ops/s
# Warmup Iteration  30: 1201393.134 ops/s
Iteration   1: 1196322.111 ops/s
Iteration   2: 1202316.126 ops/s
Iteration   3: 1201627.766 ops/s
Iteration   4: 1201366.335 ops/s
Iteration   5: 1200823.983 ops/s
Iteration   6: 1201273.067 ops/s
Iteration   7: 1200358.206 ops/s
Iteration   8: 1199367.975 ops/s
Iteration   9: 1199954.434 ops/s
Iteration  10: 1201399.798 ops/s
Iteration  11: 1200949.245 ops/s
Iteration  12: 1203265.040 ops/s
Iteration  13: 1201420.797 ops/s
Iteration  14: 1202659.457 ops/s
Iteration  15: 1198524.211 ops/s
Iteration  16: 1197850.928 ops/s
Iteration  17: 1201066.451 ops/s
Iteration  18: 1204395.001 ops/s
Iteration  19: 1201383.773 ops/s
Iteration  20: 1201447.449 ops/s
Iteration  21: 1203050.260 ops/s
Iteration  22: 1200147.689 ops/s
Iteration  23: 1203453.163 ops/s
Iteration  24: 1202783.245 ops/s
Iteration  25: 1202879.747 ops/s
Iteration  26: 1199836.197 ops/s
Iteration  27: 1200085.549 ops/s
Iteration  28: 1199834.335 ops/s
Iteration  29: 1202272.541 ops/s
Iteration  30: 1201056.214 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectChar_target":
  1201105.703 ±(99.9%) 1157.626 ops/s [Average]
  (min, avg, max) = (1196322.111, 1201105.703, 1204395.001), stdev = 1732.681
  CI (99.9%): [1199948.077, 1202263.329] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectChar_target  thrpt   30  1201105.703 ± 1157.626  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1129956.160 ops/s
# Warmup Iteration   2: 2058881.828 ops/s
# Warmup Iteration   3: 2326646.894 ops/s
# Warmup Iteration   4: 2336672.450 ops/s
# Warmup Iteration   5: 2334943.960 ops/s
# Warmup Iteration   6: 1942825.918 ops/s
# Warmup Iteration   7: 2333901.093 ops/s
# Warmup Iteration   8: 2334929.808 ops/s
# Warmup Iteration   9: 2340564.557 ops/s
# Warmup Iteration  10: 2341738.997 ops/s
# Warmup Iteration  11: 2338079.776 ops/s
# Warmup Iteration  12: 2339710.484 ops/s
# Warmup Iteration  13: 2339930.877 ops/s
# Warmup Iteration  14: 2342327.564 ops/s
# Warmup Iteration  15: 2337815.218 ops/s
# Warmup Iteration  16: 2337459.505 ops/s
# Warmup Iteration  17: 2339862.098 ops/s
# Warmup Iteration  18: 2337002.156 ops/s
# Warmup Iteration  19: 2338421.315 ops/s
# Warmup Iteration  20: 2333923.600 ops/s
# Warmup Iteration  21: 2336612.900 ops/s
# Warmup Iteration  22: 2341650.696 ops/s
# Warmup Iteration  23: 2335739.926 ops/s
# Warmup Iteration  24: 2340333.399 ops/s
# Warmup Iteration  25: 2341656.574 ops/s
# Warmup Iteration  26: 2342228.917 ops/s
# Warmup Iteration  27: 2341896.026 ops/s
# Warmup Iteration  28: 2338055.743 ops/s
# Warmup Iteration  29: 2342670.053 ops/s
# Warmup Iteration  30: 2338649.692 ops/s
Iteration   1: 2333766.169 ops/s
Iteration   2: 2340505.192 ops/s
Iteration   3: 2337511.736 ops/s
Iteration   4: 2341380.153 ops/s
Iteration   5: 2333612.495 ops/s
Iteration   6: 2339742.437 ops/s
Iteration   7: 2316130.935 ops/s
Iteration   8: 2338002.645 ops/s
Iteration   9: 2345302.936 ops/s
Iteration  10: 2337899.703 ops/s
Iteration  11: 2343532.768 ops/s
Iteration  12: 2339963.437 ops/s
Iteration  13: 2339785.389 ops/s
Iteration  14: 2343700.164 ops/s
Iteration  15: 2338625.726 ops/s
Iteration  16: 2342137.987 ops/s
Iteration  17: 2334274.183 ops/s
Iteration  18: 2337214.078 ops/s
Iteration  19: 2338065.240 ops/s
Iteration  20: 2335897.318 ops/s
Iteration  21: 2340801.835 ops/s
Iteration  22: 2337724.768 ops/s
Iteration  23: 2338345.117 ops/s
Iteration  24: 2340789.778 ops/s
Iteration  25: 2336869.594 ops/s
Iteration  26: 2343772.963 ops/s
Iteration  27: 2340439.374 ops/s
Iteration  28: 2321851.467 ops/s
Iteration  29: 2342497.391 ops/s
Iteration  30: 2337740.373 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectDouble":
  2337929.445 ±(99.9%) 3988.736 ops/s [Average]
  (min, avg, max) = (2316130.935, 2337929.445, 2345302.936), stdev = 5970.153
  CI (99.9%): [2333940.709, 2341918.181] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectDouble  thrpt   30  2337929.445 ± 3988.736  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectDouble_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectDouble_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 454539.226 ops/s
# Warmup Iteration   2: 980424.003 ops/s
# Warmup Iteration   3: 1053258.923 ops/s
# Warmup Iteration   4: 1061689.673 ops/s
# Warmup Iteration   5: 887627.458 ops/s
# Warmup Iteration   6: 1060415.145 ops/s
# Warmup Iteration   7: 1060445.391 ops/s
# Warmup Iteration   8: 1060786.289 ops/s
# Warmup Iteration   9: 1060791.254 ops/s
# Warmup Iteration  10: 1057259.837 ops/s
# Warmup Iteration  11: 1057515.354 ops/s
# Warmup Iteration  12: 1055749.196 ops/s
# Warmup Iteration  13: 1057597.712 ops/s
# Warmup Iteration  14: 1059777.097 ops/s
# Warmup Iteration  15: 1058973.575 ops/s
# Warmup Iteration  16: 1057206.554 ops/s
# Warmup Iteration  17: 1059130.611 ops/s
# Warmup Iteration  18: 1059327.173 ops/s
# Warmup Iteration  19: 1056916.753 ops/s
# Warmup Iteration  20: 1059295.244 ops/s
# Warmup Iteration  21: 1057030.964 ops/s
# Warmup Iteration  22: 1059474.204 ops/s
# Warmup Iteration  23: 1059864.534 ops/s
# Warmup Iteration  24: 1058626.778 ops/s
# Warmup Iteration  25: 1057444.143 ops/s
# Warmup Iteration  26: 1059474.593 ops/s
# Warmup Iteration  27: 1059418.409 ops/s
# Warmup Iteration  28: 1052833.300 ops/s
# Warmup Iteration  29: 1054012.004 ops/s
# Warmup Iteration  30: 1058052.917 ops/s
Iteration   1: 1058187.971 ops/s
Iteration   2: 1059660.942 ops/s
Iteration   3: 1057521.555 ops/s
Iteration   4: 1056888.910 ops/s
Iteration   5: 1057091.704 ops/s
Iteration   6: 1059018.885 ops/s
Iteration   7: 1057642.691 ops/s
Iteration   8: 1054892.383 ops/s
Iteration   9: 1059739.723 ops/s
Iteration  10: 1056673.857 ops/s
Iteration  11: 1058511.490 ops/s
Iteration  12: 1059959.861 ops/s
Iteration  13: 1062304.677 ops/s
Iteration  14: 1058037.157 ops/s
Iteration  15: 1059329.274 ops/s
Iteration  16: 1058266.698 ops/s
Iteration  17: 1058806.431 ops/s
Iteration  18: 1059199.073 ops/s
Iteration  19: 1059459.581 ops/s
Iteration  20: 1062215.313 ops/s
Iteration  21: 1057952.905 ops/s
Iteration  22: 1057237.584 ops/s
Iteration  23: 1059196.752 ops/s
Iteration  24: 1058328.245 ops/s
Iteration  25: 1060261.609 ops/s
Iteration  26: 1053760.285 ops/s
Iteration  27: 1059869.451 ops/s
Iteration  28: 1052005.769 ops/s
Iteration  29: 1053723.404 ops/s
Iteration  30: 1054899.037 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectDouble_target":
  1058021.441 ±(99.9%) 1567.754 ops/s [Average]
  (min, avg, max) = (1052005.769, 1058021.441, 1062304.677), stdev = 2346.540
  CI (99.9%): [1056453.687, 1059589.194] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectDouble_target  thrpt   30  1058021.441 ± 1567.754  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1156458.499 ops/s
# Warmup Iteration   2: 2025225.281 ops/s
# Warmup Iteration   3: 2336754.417 ops/s
# Warmup Iteration   4: 2346052.007 ops/s
# Warmup Iteration   5: 2312284.854 ops/s
# Warmup Iteration   6: 1902013.623 ops/s
# Warmup Iteration   7: 2303613.130 ops/s
# Warmup Iteration   8: 2339276.004 ops/s
# Warmup Iteration   9: 2340733.470 ops/s
# Warmup Iteration  10: 2338601.993 ops/s
# Warmup Iteration  11: 2334907.885 ops/s
# Warmup Iteration  12: 2329064.200 ops/s
# Warmup Iteration  13: 2328331.580 ops/s
# Warmup Iteration  14: 2338540.379 ops/s
# Warmup Iteration  15: 2338143.505 ops/s
# Warmup Iteration  16: 2341082.964 ops/s
# Warmup Iteration  17: 2349062.459 ops/s
# Warmup Iteration  18: 2342854.804 ops/s
# Warmup Iteration  19: 2348865.881 ops/s
# Warmup Iteration  20: 2347132.924 ops/s
# Warmup Iteration  21: 2338058.042 ops/s
# Warmup Iteration  22: 2347723.029 ops/s
# Warmup Iteration  23: 2351452.266 ops/s
# Warmup Iteration  24: 2352686.205 ops/s
# Warmup Iteration  25: 2350491.456 ops/s
# Warmup Iteration  26: 2349810.704 ops/s
# Warmup Iteration  27: 2336750.276 ops/s
# Warmup Iteration  28: 2351096.794 ops/s
# Warmup Iteration  29: 2348450.787 ops/s
# Warmup Iteration  30: 2348383.405 ops/s
Iteration   1: 2353146.394 ops/s
Iteration   2: 2347118.806 ops/s
Iteration   3: 2340349.951 ops/s
Iteration   4: 2334435.240 ops/s
Iteration   5: 2342505.638 ops/s
Iteration   6: 2334890.866 ops/s
Iteration   7: 2346951.110 ops/s
Iteration   8: 2353631.852 ops/s
Iteration   9: 2350635.150 ops/s
Iteration  10: 2353082.650 ops/s
Iteration  11: 2349996.205 ops/s
Iteration  12: 2354771.747 ops/s
Iteration  13: 2348524.910 ops/s
Iteration  14: 2345961.016 ops/s
Iteration  15: 2351302.821 ops/s
Iteration  16: 2351478.174 ops/s
Iteration  17: 2357500.071 ops/s
Iteration  18: 2350862.073 ops/s
Iteration  19: 2352947.267 ops/s
Iteration  20: 2358299.035 ops/s
Iteration  21: 2334506.362 ops/s
Iteration  22: 2347656.431 ops/s
Iteration  23: 2337710.379 ops/s
Iteration  24: 2346542.317 ops/s
Iteration  25: 2349096.772 ops/s
Iteration  26: 2352790.549 ops/s
Iteration  27: 2351073.759 ops/s
Iteration  28: 2355444.928 ops/s
Iteration  29: 2349592.277 ops/s
Iteration  30: 2351974.826 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectFloat":
  2348492.653 ±(99.9%) 4358.156 ops/s [Average]
  (min, avg, max) = (2334435.240, 2348492.653, 2358299.035), stdev = 6523.083
  CI (99.9%): [2344134.497, 2352850.808] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectFloat  thrpt   30  2348492.653 ± 4358.156  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectFloat_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectFloat_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 510948.207 ops/s
# Warmup Iteration   2: 1084786.593 ops/s
# Warmup Iteration   3: 1163018.017 ops/s
# Warmup Iteration   4: 1167959.424 ops/s
# Warmup Iteration   5: 976567.953 ops/s
# Warmup Iteration   6: 1170836.656 ops/s
# Warmup Iteration   7: 1170199.855 ops/s
# Warmup Iteration   8: 1170033.104 ops/s
# Warmup Iteration   9: 1171233.120 ops/s
# Warmup Iteration  10: 1169805.586 ops/s
# Warmup Iteration  11: 1169099.819 ops/s
# Warmup Iteration  12: 1170010.233 ops/s
# Warmup Iteration  13: 1171371.525 ops/s
# Warmup Iteration  14: 1171667.210 ops/s
# Warmup Iteration  15: 1170268.228 ops/s
# Warmup Iteration  16: 1171471.701 ops/s
# Warmup Iteration  17: 1168760.771 ops/s
# Warmup Iteration  18: 1166565.434 ops/s
# Warmup Iteration  19: 1169023.585 ops/s
# Warmup Iteration  20: 1166027.735 ops/s
# Warmup Iteration  21: 1168820.053 ops/s
# Warmup Iteration  22: 1160230.475 ops/s
# Warmup Iteration  23: 1165469.320 ops/s
# Warmup Iteration  24: 1169143.878 ops/s
# Warmup Iteration  25: 1168954.270 ops/s
# Warmup Iteration  26: 1169074.304 ops/s
# Warmup Iteration  27: 1167657.057 ops/s
# Warmup Iteration  28: 1163225.157 ops/s
# Warmup Iteration  29: 1165045.865 ops/s
# Warmup Iteration  30: 1164224.696 ops/s
Iteration   1: 1169303.341 ops/s
Iteration   2: 1170491.000 ops/s
Iteration   3: 1168610.824 ops/s
Iteration   4: 1167622.978 ops/s
Iteration   5: 1169736.613 ops/s
Iteration   6: 1172544.039 ops/s
Iteration   7: 1169021.507 ops/s
Iteration   8: 1168496.595 ops/s
Iteration   9: 1171881.235 ops/s
Iteration  10: 1168854.429 ops/s
Iteration  11: 1167699.042 ops/s
Iteration  12: 1164355.593 ops/s
Iteration  13: 1166281.028 ops/s
Iteration  14: 1167783.818 ops/s
Iteration  15: 1169578.872 ops/s
Iteration  16: 1167551.547 ops/s
Iteration  17: 1170986.808 ops/s
Iteration  18: 1170697.837 ops/s
Iteration  19: 1168880.599 ops/s
Iteration  20: 1170919.811 ops/s
Iteration  21: 1168069.313 ops/s
Iteration  22: 1167671.928 ops/s
Iteration  23: 1170574.638 ops/s
Iteration  24: 1167760.102 ops/s
Iteration  25: 1167793.924 ops/s
Iteration  26: 1165174.780 ops/s
Iteration  27: 1161025.209 ops/s
Iteration  28: 1160422.199 ops/s
Iteration  29: 1165957.180 ops/s
Iteration  30: 1145501.791 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectFloat_target":
  1167374.953 ±(99.9%) 3313.386 ops/s [Average]
  (min, avg, max) = (1145501.791, 1167374.953, 1172544.039), stdev = 4959.321
  CI (99.9%): [1164061.566, 1170688.339] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectFloat_target  thrpt   30  1167374.953 ± 3313.386  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1137274.858 ops/s
# Warmup Iteration   2: 2171653.327 ops/s
# Warmup Iteration   3: 2418945.290 ops/s
# Warmup Iteration   4: 2432503.855 ops/s
# Warmup Iteration   5: 2190495.623 ops/s
# Warmup Iteration   6: 2264578.990 ops/s
# Warmup Iteration   7: 2437904.211 ops/s
# Warmup Iteration   8: 2437910.426 ops/s
# Warmup Iteration   9: 2439802.427 ops/s
# Warmup Iteration  10: 2426938.357 ops/s
# Warmup Iteration  11: 2437178.965 ops/s
# Warmup Iteration  12: 2435492.089 ops/s
# Warmup Iteration  13: 2426481.589 ops/s
# Warmup Iteration  14: 2434276.336 ops/s
# Warmup Iteration  15: 2428950.975 ops/s
# Warmup Iteration  16: 2434728.520 ops/s
# Warmup Iteration  17: 2434907.948 ops/s
# Warmup Iteration  18: 2435838.909 ops/s
# Warmup Iteration  19: 2436864.481 ops/s
# Warmup Iteration  20: 2438167.182 ops/s
# Warmup Iteration  21: 2437642.989 ops/s
# Warmup Iteration  22: 2433847.127 ops/s
# Warmup Iteration  23: 2437225.051 ops/s
# Warmup Iteration  24: 2440468.482 ops/s
# Warmup Iteration  25: 2438618.109 ops/s
# Warmup Iteration  26: 2435293.528 ops/s
# Warmup Iteration  27: 2434828.412 ops/s
# Warmup Iteration  28: 2437786.220 ops/s
# Warmup Iteration  29: 2436513.954 ops/s
# Warmup Iteration  30: 2436762.987 ops/s
Iteration   1: 2438838.112 ops/s
Iteration   2: 2431645.841 ops/s
Iteration   3: 2431048.247 ops/s
Iteration   4: 2442420.748 ops/s
Iteration   5: 2435637.130 ops/s
Iteration   6: 2441461.428 ops/s
Iteration   7: 2433639.034 ops/s
Iteration   8: 2439684.105 ops/s
Iteration   9: 2433978.049 ops/s
Iteration  10: 2430497.275 ops/s
Iteration  11: 2427420.079 ops/s
Iteration  12: 2436078.359 ops/s
Iteration  13: 2433091.708 ops/s
Iteration  14: 2436352.876 ops/s
Iteration  15: 2421889.847 ops/s
Iteration  16: 2429964.629 ops/s
Iteration  17: 2440479.538 ops/s
Iteration  18: 2433508.192 ops/s
Iteration  19: 2435870.837 ops/s
Iteration  20: 2438377.308 ops/s
Iteration  21: 2430355.594 ops/s
Iteration  22: 2436133.811 ops/s
Iteration  23: 2440375.653 ops/s
Iteration  24: 2434726.926 ops/s
Iteration  25: 2438721.404 ops/s
Iteration  26: 2428287.239 ops/s
Iteration  27: 2416924.815 ops/s
Iteration  28: 2423222.790 ops/s
Iteration  29: 2433132.437 ops/s
Iteration  30: 2432603.470 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectIf":
  2433545.583 ±(99.9%) 3945.972 ops/s [Average]
  (min, avg, max) = (2416924.815, 2433545.583, 2442420.748), stdev = 5906.146
  CI (99.9%): [2429599.610, 2437491.555] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectIf  thrpt   30  2433545.583 ± 3945.972  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectIfToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectIfToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 927886.070 ops/s
# Warmup Iteration   2: 1970168.093 ops/s
# Warmup Iteration   3: 2182845.047 ops/s
# Warmup Iteration   4: 2187411.003 ops/s
# Warmup Iteration   5: 1801764.337 ops/s
# Warmup Iteration   6: 2177843.821 ops/s
# Warmup Iteration   7: 2190967.774 ops/s
# Warmup Iteration   8: 2193936.249 ops/s
# Warmup Iteration   9: 2195691.348 ops/s
# Warmup Iteration  10: 2191971.242 ops/s
# Warmup Iteration  11: 2187285.110 ops/s
# Warmup Iteration  12: 2189966.952 ops/s
# Warmup Iteration  13: 2193399.832 ops/s
# Warmup Iteration  14: 2187981.277 ops/s
# Warmup Iteration  15: 2194785.172 ops/s
# Warmup Iteration  16: 2188856.590 ops/s
# Warmup Iteration  17: 2192408.565 ops/s
# Warmup Iteration  18: 2190786.806 ops/s
# Warmup Iteration  19: 2178254.929 ops/s
# Warmup Iteration  20: 2191736.528 ops/s
# Warmup Iteration  21: 2188570.850 ops/s
# Warmup Iteration  22: 2180195.644 ops/s
# Warmup Iteration  23: 2189888.562 ops/s
# Warmup Iteration  24: 2197438.679 ops/s
# Warmup Iteration  25: 2192463.620 ops/s
# Warmup Iteration  26: 2191509.845 ops/s
# Warmup Iteration  27: 2182285.652 ops/s
# Warmup Iteration  28: 2187991.808 ops/s
# Warmup Iteration  29: 2189843.491 ops/s
# Warmup Iteration  30: 2192406.088 ops/s
Iteration   1: 2184460.842 ops/s
Iteration   2: 2189900.636 ops/s
Iteration   3: 2189718.394 ops/s
Iteration   4: 2187160.772 ops/s
Iteration   5: 2189609.701 ops/s
Iteration   6: 2187649.405 ops/s
Iteration   7: 2182755.051 ops/s
Iteration   8: 2195008.466 ops/s
Iteration   9: 2184984.436 ops/s
Iteration  10: 2184811.939 ops/s
Iteration  11: 2191466.647 ops/s
Iteration  12: 2189794.792 ops/s
Iteration  13: 2189894.362 ops/s
Iteration  14: 2187397.406 ops/s
Iteration  15: 2195663.010 ops/s
Iteration  16: 2191413.197 ops/s
Iteration  17: 2188932.862 ops/s
Iteration  18: 2185890.115 ops/s
Iteration  19: 2187821.260 ops/s
Iteration  20: 2179978.475 ops/s
Iteration  21: 2190119.168 ops/s
Iteration  22: 2177710.109 ops/s
Iteration  23: 2184052.511 ops/s
Iteration  24: 2187967.797 ops/s
Iteration  25: 2188920.411 ops/s
Iteration  26: 2186769.653 ops/s
Iteration  27: 2192082.866 ops/s
Iteration  28: 2193619.898 ops/s
Iteration  29: 2190848.065 ops/s
Iteration  30: 2184212.882 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectIfToTarget":
  2188020.504 ±(99.9%) 2708.685 ops/s [Average]
  (min, avg, max) = (2177710.109, 2188020.504, 2195663.010), stdev = 4054.232
  CI (99.9%): [2185311.819, 2190729.189] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectIfToTarget  thrpt   30  2188020.504 ± 2708.685  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1250764.728 ops/s
# Warmup Iteration   2: 2220258.308 ops/s
# Warmup Iteration   3: 2538673.497 ops/s
# Warmup Iteration   4: 2553155.487 ops/s
# Warmup Iteration   5: 2550436.182 ops/s
# Warmup Iteration   6: 2104774.260 ops/s
# Warmup Iteration   7: 2548853.583 ops/s
# Warmup Iteration   8: 2545732.008 ops/s
# Warmup Iteration   9: 2545351.488 ops/s
# Warmup Iteration  10: 2555809.515 ops/s
# Warmup Iteration  11: 2553671.063 ops/s
# Warmup Iteration  12: 2555245.405 ops/s
# Warmup Iteration  13: 2553210.854 ops/s
# Warmup Iteration  14: 2555845.214 ops/s
# Warmup Iteration  15: 2555934.813 ops/s
# Warmup Iteration  16: 2553389.484 ops/s
# Warmup Iteration  17: 2555937.896 ops/s
# Warmup Iteration  18: 2554010.789 ops/s
# Warmup Iteration  19: 2554337.479 ops/s
# Warmup Iteration  20: 2554756.103 ops/s
# Warmup Iteration  21: 2555120.956 ops/s
# Warmup Iteration  22: 2554611.082 ops/s
# Warmup Iteration  23: 2557556.368 ops/s
# Warmup Iteration  24: 2555558.032 ops/s
# Warmup Iteration  25: 2557457.798 ops/s
# Warmup Iteration  26: 2554078.960 ops/s
# Warmup Iteration  27: 2554250.047 ops/s
# Warmup Iteration  28: 2553251.740 ops/s
# Warmup Iteration  29: 2552883.596 ops/s
# Warmup Iteration  30: 2556164.898 ops/s
Iteration   1: 2553346.672 ops/s
Iteration   2: 2556134.854 ops/s
Iteration   3: 2552046.560 ops/s
Iteration   4: 2555717.153 ops/s
Iteration   5: 2553084.723 ops/s
Iteration   6: 2556904.999 ops/s
Iteration   7: 2551689.500 ops/s
Iteration   8: 2552540.267 ops/s
Iteration   9: 2554491.810 ops/s
Iteration  10: 2549763.790 ops/s
Iteration  11: 2556599.058 ops/s
Iteration  12: 2548543.433 ops/s
Iteration  13: 2557267.738 ops/s
Iteration  14: 2552212.344 ops/s
Iteration  15: 2550325.081 ops/s
Iteration  16: 2555027.295 ops/s
Iteration  17: 2550121.129 ops/s
Iteration  18: 2552346.448 ops/s
Iteration  19: 2552796.734 ops/s
Iteration  20: 2557558.610 ops/s
Iteration  21: 2552824.621 ops/s
Iteration  22: 2557744.613 ops/s
Iteration  23: 2539309.105 ops/s
Iteration  24: 2553862.307 ops/s
Iteration  25: 2557661.590 ops/s
Iteration  26: 2553693.116 ops/s
Iteration  27: 2559729.426 ops/s
Iteration  28: 2553177.080 ops/s
Iteration  29: 2557276.532 ops/s
Iteration  30: 2555313.874 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectInt":
  2553637.015 ±(99.9%) 2573.562 ops/s [Average]
  (min, avg, max) = (2539309.105, 2553637.015, 2559729.426), stdev = 3851.987
  CI (99.9%): [2551063.453, 2556210.578] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectInt  thrpt   30  2553637.015 ± 2573.562  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectInt_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectInt_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 530913.113 ops/s
# Warmup Iteration   2: 1138841.081 ops/s
# Warmup Iteration   3: 1219956.057 ops/s
# Warmup Iteration   4: 1226839.070 ops/s
# Warmup Iteration   5: 1016663.962 ops/s
# Warmup Iteration   6: 1210714.724 ops/s
# Warmup Iteration   7: 1207665.383 ops/s
# Warmup Iteration   8: 1212068.462 ops/s
# Warmup Iteration   9: 1210086.444 ops/s
# Warmup Iteration  10: 1209626.531 ops/s
# Warmup Iteration  11: 1209338.955 ops/s
# Warmup Iteration  12: 1210597.682 ops/s
# Warmup Iteration  13: 1209135.839 ops/s
# Warmup Iteration  14: 1213579.993 ops/s
# Warmup Iteration  15: 1211972.783 ops/s
# Warmup Iteration  16: 1212600.244 ops/s
# Warmup Iteration  17: 1210073.097 ops/s
# Warmup Iteration  18: 1213389.753 ops/s
# Warmup Iteration  19: 1213341.747 ops/s
# Warmup Iteration  20: 1212484.421 ops/s
# Warmup Iteration  21: 1213270.312 ops/s
# Warmup Iteration  22: 1209850.586 ops/s
# Warmup Iteration  23: 1210678.948 ops/s
# Warmup Iteration  24: 1207852.713 ops/s
# Warmup Iteration  25: 1211084.187 ops/s
# Warmup Iteration  26: 1212120.129 ops/s
# Warmup Iteration  27: 1210665.956 ops/s
# Warmup Iteration  28: 1213612.645 ops/s
# Warmup Iteration  29: 1209298.426 ops/s
# Warmup Iteration  30: 1213384.247 ops/s
Iteration   1: 1211987.533 ops/s
Iteration   2: 1210555.082 ops/s
Iteration   3: 1210275.781 ops/s
Iteration   4: 1211034.994 ops/s
Iteration   5: 1211862.787 ops/s
Iteration   6: 1207895.722 ops/s
Iteration   7: 1213126.200 ops/s
Iteration   8: 1205165.554 ops/s
Iteration   9: 1204953.194 ops/s
Iteration  10: 1210576.866 ops/s
Iteration  11: 1211648.911 ops/s
Iteration  12: 1210897.316 ops/s
Iteration  13: 1213338.628 ops/s
Iteration  14: 1212056.348 ops/s
Iteration  15: 1215354.428 ops/s
Iteration  16: 1205884.238 ops/s
Iteration  17: 1211165.885 ops/s
Iteration  18: 1210325.189 ops/s
Iteration  19: 1213686.044 ops/s
Iteration  20: 1211305.787 ops/s
Iteration  21: 1213380.260 ops/s
Iteration  22: 1208142.129 ops/s
Iteration  23: 1206792.295 ops/s
Iteration  24: 1210777.553 ops/s
Iteration  25: 1215017.182 ops/s
Iteration  26: 1212226.171 ops/s
Iteration  27: 1210194.254 ops/s
Iteration  28: 1209942.279 ops/s
Iteration  29: 1211640.956 ops/s
Iteration  30: 1208533.184 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectInt_target":
  1210658.092 ±(99.9%) 1760.286 ops/s [Average]
  (min, avg, max) = (1204953.194, 1210658.092, 1215354.428), stdev = 2634.713
  CI (99.9%): [1208897.806, 1212418.378] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectInt_target  thrpt   30  1210658.092 ± 1760.286  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1140314.270 ops/s
# Warmup Iteration   2: 2110516.410 ops/s
# Warmup Iteration   3: 2366682.557 ops/s
# Warmup Iteration   4: 2357776.623 ops/s
# Warmup Iteration   5: 2300773.384 ops/s
# Warmup Iteration   6: 2052515.178 ops/s
# Warmup Iteration   7: 2379043.852 ops/s
# Warmup Iteration   8: 2379317.829 ops/s
# Warmup Iteration   9: 2385630.737 ops/s
# Warmup Iteration  10: 2382989.568 ops/s
# Warmup Iteration  11: 2254693.658 ops/s
# Warmup Iteration  12: 2351989.220 ops/s
# Warmup Iteration  13: 2369080.500 ops/s
# Warmup Iteration  14: 2376369.952 ops/s
# Warmup Iteration  15: 2380945.292 ops/s
# Warmup Iteration  16: 2381206.305 ops/s
# Warmup Iteration  17: 2386493.899 ops/s
# Warmup Iteration  18: 2391587.607 ops/s
# Warmup Iteration  19: 2385543.453 ops/s
# Warmup Iteration  20: 2389734.720 ops/s
# Warmup Iteration  21: 2386783.238 ops/s
# Warmup Iteration  22: 2388614.452 ops/s
# Warmup Iteration  23: 2383782.487 ops/s
# Warmup Iteration  24: 2379882.795 ops/s
# Warmup Iteration  25: 2376227.745 ops/s
# Warmup Iteration  26: 2385862.708 ops/s
# Warmup Iteration  27: 2390442.743 ops/s
# Warmup Iteration  28: 2388785.262 ops/s
# Warmup Iteration  29: 2390710.818 ops/s
# Warmup Iteration  30: 2389104.454 ops/s
Iteration   1: 2384975.749 ops/s
Iteration   2: 2387628.482 ops/s
Iteration   3: 2392498.301 ops/s
Iteration   4: 2389093.486 ops/s
Iteration   5: 2389020.099 ops/s
Iteration   6: 2391322.411 ops/s
Iteration   7: 2385453.826 ops/s
Iteration   8: 2393654.645 ops/s
Iteration   9: 2387437.863 ops/s
Iteration  10: 2386743.379 ops/s
Iteration  11: 2392196.439 ops/s
Iteration  12: 2387220.524 ops/s
Iteration  13: 2393046.899 ops/s
Iteration  14: 2387449.697 ops/s
Iteration  15: 2390224.031 ops/s
Iteration  16: 2394377.590 ops/s
Iteration  17: 2385239.553 ops/s
Iteration  18: 2393546.990 ops/s
Iteration  19: 2388868.711 ops/s
Iteration  20: 2387285.648 ops/s
Iteration  21: 2392508.843 ops/s
Iteration  22: 2386455.926 ops/s
Iteration  23: 2393489.200 ops/s
Iteration  24: 2382081.974 ops/s
Iteration  25: 2376775.246 ops/s
Iteration  26: 2389673.377 ops/s
Iteration  27: 2385485.148 ops/s
Iteration  28: 2391273.146 ops/s
Iteration  29: 2387479.356 ops/s
Iteration  30: 2390321.913 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectLong":
  2388760.948 ±(99.9%) 2585.820 ops/s [Average]
  (min, avg, max) = (2376775.246, 2388760.948, 2394377.590), stdev = 3870.333
  CI (99.9%): [2386175.129, 2391346.768] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectLong  thrpt   30  2388760.948 ± 2585.820  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectLong_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectLong_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 494882.422 ops/s
# Warmup Iteration   2: 1152279.375 ops/s
# Warmup Iteration   3: 1208552.611 ops/s
# Warmup Iteration   4: 1060430.421 ops/s
# Warmup Iteration   5: 1157557.322 ops/s
# Warmup Iteration   6: 1209444.686 ops/s
# Warmup Iteration   7: 1211404.060 ops/s
# Warmup Iteration   8: 1214363.855 ops/s
# Warmup Iteration   9: 1209935.178 ops/s
# Warmup Iteration  10: 1207777.175 ops/s
# Warmup Iteration  11: 1213297.143 ops/s
# Warmup Iteration  12: 1208032.960 ops/s
# Warmup Iteration  13: 1211530.424 ops/s
# Warmup Iteration  14: 1213351.368 ops/s
# Warmup Iteration  15: 1209561.172 ops/s
# Warmup Iteration  16: 1211929.785 ops/s
# Warmup Iteration  17: 1210077.484 ops/s
# Warmup Iteration  18: 1210051.861 ops/s
# Warmup Iteration  19: 1210338.311 ops/s
# Warmup Iteration  20: 1211893.962 ops/s
# Warmup Iteration  21: 1211084.060 ops/s
# Warmup Iteration  22: 1212169.103 ops/s
# Warmup Iteration  23: 1210575.870 ops/s
# Warmup Iteration  24: 1211645.644 ops/s
# Warmup Iteration  25: 1211857.149 ops/s
# Warmup Iteration  26: 1210321.992 ops/s
# Warmup Iteration  27: 1204637.838 ops/s
# Warmup Iteration  28: 1210387.907 ops/s
# Warmup Iteration  29: 1213016.028 ops/s
# Warmup Iteration  30: 1209881.546 ops/s
Iteration   1: 1211141.107 ops/s
Iteration   2: 1211401.211 ops/s
Iteration   3: 1212498.820 ops/s
Iteration   4: 1211329.428 ops/s
Iteration   5: 1214795.853 ops/s
Iteration   6: 1212215.803 ops/s
Iteration   7: 1217084.675 ops/s
Iteration   8: 1215043.997 ops/s
Iteration   9: 1213390.313 ops/s
Iteration  10: 1212304.660 ops/s
Iteration  11: 1214393.208 ops/s
Iteration  12: 1211914.478 ops/s
Iteration  13: 1215543.928 ops/s
Iteration  14: 1212322.421 ops/s
Iteration  15: 1215348.897 ops/s
Iteration  16: 1215743.269 ops/s
Iteration  17: 1214001.026 ops/s
Iteration  18: 1212968.508 ops/s
Iteration  19: 1214710.517 ops/s
Iteration  20: 1210494.372 ops/s
Iteration  21: 1212131.224 ops/s
Iteration  22: 1212965.000 ops/s
Iteration  23: 1210285.061 ops/s
Iteration  24: 1213499.287 ops/s
Iteration  25: 1215439.758 ops/s
Iteration  26: 1207168.287 ops/s
Iteration  27: 1209094.210 ops/s
Iteration  28: 1214116.769 ops/s
Iteration  29: 1211991.943 ops/s
Iteration  30: 1210674.170 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectLong_target":
  1212867.073 ±(99.9%) 1459.694 ops/s [Average]
  (min, avg, max) = (1207168.287, 1212867.073, 1217084.675), stdev = 2184.802
  CI (99.9%): [1211407.379, 1214326.768] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectLong_target  thrpt   30  1212867.073 ± 1459.694  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1193912.194 ops/s
# Warmup Iteration   2: 2056872.042 ops/s
# Warmup Iteration   3: 2386948.878 ops/s
# Warmup Iteration   4: 2383810.173 ops/s
# Warmup Iteration   5: 2387804.137 ops/s
# Warmup Iteration   6: 1981529.524 ops/s
# Warmup Iteration   7: 2405979.340 ops/s
# Warmup Iteration   8: 2402483.793 ops/s
# Warmup Iteration   9: 2403766.204 ops/s
# Warmup Iteration  10: 2402288.543 ops/s
# Warmup Iteration  11: 2401531.249 ops/s
# Warmup Iteration  12: 2397885.803 ops/s
# Warmup Iteration  13: 2395348.336 ops/s
# Warmup Iteration  14: 2404305.743 ops/s
# Warmup Iteration  15: 2406560.099 ops/s
# Warmup Iteration  16: 2402066.712 ops/s
# Warmup Iteration  17: 2404803.472 ops/s
# Warmup Iteration  18: 2407937.853 ops/s
# Warmup Iteration  19: 2409302.558 ops/s
# Warmup Iteration  20: 2407688.197 ops/s
# Warmup Iteration  21: 2367053.227 ops/s
# Warmup Iteration  22: 2405347.453 ops/s
# Warmup Iteration  23: 2403421.083 ops/s
# Warmup Iteration  24: 2408077.246 ops/s
# Warmup Iteration  25: 2407622.926 ops/s
# Warmup Iteration  26: 2409691.976 ops/s
# Warmup Iteration  27: 2383189.646 ops/s
# Warmup Iteration  28: 2406308.403 ops/s
# Warmup Iteration  29: 2407068.680 ops/s
# Warmup Iteration  30: 2409916.792 ops/s
Iteration   1: 2395709.325 ops/s
Iteration   2: 2411196.951 ops/s
Iteration   3: 2406545.618 ops/s
Iteration   4: 2410746.691 ops/s
Iteration   5: 2401984.588 ops/s
Iteration   6: 2400578.967 ops/s
Iteration   7: 2410120.042 ops/s
Iteration   8: 2406407.715 ops/s
Iteration   9: 2413988.766 ops/s
Iteration  10: 2405458.222 ops/s
Iteration  11: 2410218.005 ops/s
Iteration  12: 2401425.422 ops/s
Iteration  13: 2408014.918 ops/s
Iteration  14: 2404595.527 ops/s
Iteration  15: 2403442.755 ops/s
Iteration  16: 2409238.401 ops/s
Iteration  17: 2405895.902 ops/s
Iteration  18: 2410145.458 ops/s
Iteration  19: 2408123.329 ops/s
Iteration  20: 2408780.651 ops/s
Iteration  21: 2405173.001 ops/s
Iteration  22: 2412493.479 ops/s
Iteration  23: 2405376.415 ops/s
Iteration  24: 2407194.615 ops/s
Iteration  25: 2404652.670 ops/s
Iteration  26: 2402652.033 ops/s
Iteration  27: 2405265.148 ops/s
Iteration  28: 2400445.946 ops/s
Iteration  29: 2405750.092 ops/s
Iteration  30: 2397198.197 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectShort":
  2405960.628 ±(99.9%) 2883.766 ops/s [Average]
  (min, avg, max) = (2395709.325, 2405960.628, 2413988.766), stdev = 4316.286
  CI (99.9%): [2403076.862, 2408844.394] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectShort  thrpt   30  2405960.628 ± 2883.766  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectShort_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectShort_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 544855.338 ops/s
# Warmup Iteration   2: 1182783.010 ops/s
# Warmup Iteration   3: 1270228.146 ops/s
# Warmup Iteration   4: 1273663.549 ops/s
# Warmup Iteration   5: 1069102.433 ops/s
# Warmup Iteration   6: 1272103.884 ops/s
# Warmup Iteration   7: 1276139.204 ops/s
# Warmup Iteration   8: 1278502.407 ops/s
# Warmup Iteration   9: 1280823.709 ops/s
# Warmup Iteration  10: 1276948.358 ops/s
# Warmup Iteration  11: 1279539.095 ops/s
# Warmup Iteration  12: 1277612.702 ops/s
# Warmup Iteration  13: 1276209.248 ops/s
# Warmup Iteration  14: 1279484.866 ops/s
# Warmup Iteration  15: 1281262.938 ops/s
# Warmup Iteration  16: 1271339.291 ops/s
# Warmup Iteration  17: 1280790.000 ops/s
# Warmup Iteration  18: 1283122.309 ops/s
# Warmup Iteration  19: 1283781.248 ops/s
# Warmup Iteration  20: 1282939.116 ops/s
# Warmup Iteration  21: 1284238.088 ops/s
# Warmup Iteration  22: 1279924.682 ops/s
# Warmup Iteration  23: 1282274.338 ops/s
# Warmup Iteration  24: 1282006.461 ops/s
# Warmup Iteration  25: 1282978.604 ops/s
# Warmup Iteration  26: 1281571.967 ops/s
# Warmup Iteration  27: 1281958.628 ops/s
# Warmup Iteration  28: 1279101.439 ops/s
# Warmup Iteration  29: 1282392.352 ops/s
# Warmup Iteration  30: 1283659.282 ops/s
Iteration   1: 1282222.053 ops/s
Iteration   2: 1283411.732 ops/s
Iteration   3: 1282698.406 ops/s
Iteration   4: 1282219.349 ops/s
Iteration   5: 1281768.630 ops/s
Iteration   6: 1281394.487 ops/s
Iteration   7: 1279311.000 ops/s
Iteration   8: 1265787.578 ops/s
Iteration   9: 1278421.007 ops/s
Iteration  10: 1285224.682 ops/s
Iteration  11: 1280705.267 ops/s
Iteration  12: 1284608.516 ops/s
Iteration  13: 1283457.390 ops/s
Iteration  14: 1283158.034 ops/s
Iteration  15: 1281727.768 ops/s
Iteration  16: 1282624.593 ops/s
Iteration  17: 1282148.247 ops/s
Iteration  18: 1283363.644 ops/s
Iteration  19: 1284849.855 ops/s
Iteration  20: 1283681.476 ops/s
Iteration  21: 1281675.161 ops/s
Iteration  22: 1280444.983 ops/s
Iteration  23: 1283409.916 ops/s
Iteration  24: 1282832.346 ops/s
Iteration  25: 1281366.326 ops/s
Iteration  26: 1273894.921 ops/s
Iteration  27: 1273330.294 ops/s
Iteration  28: 1270706.686 ops/s
Iteration  29: 1276467.789 ops/s
Iteration  30: 1278684.235 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectShort_target":
  1280519.879 ±(99.9%) 2965.651 ops/s [Average]
  (min, avg, max) = (1265787.578, 1280519.879, 1285224.682), stdev = 4438.848
  CI (99.9%): [1277554.228, 1283485.530] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectShort_target  thrpt   30  1280519.879 ± 2965.651  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 770014.830 ops/s
# Warmup Iteration   2: 1567351.438 ops/s
# Warmup Iteration   3: 1786417.516 ops/s
# Warmup Iteration   4: 1799892.347 ops/s
# Warmup Iteration   5: 1510767.884 ops/s
# Warmup Iteration   6: 1760015.818 ops/s
# Warmup Iteration   7: 1784037.966 ops/s
# Warmup Iteration   8: 1789296.519 ops/s
# Warmup Iteration   9: 1790559.089 ops/s
# Warmup Iteration  10: 1793814.301 ops/s
# Warmup Iteration  11: 1793458.833 ops/s
# Warmup Iteration  12: 1790833.523 ops/s
# Warmup Iteration  13: 1793747.044 ops/s
# Warmup Iteration  14: 1789696.599 ops/s
# Warmup Iteration  15: 1787662.491 ops/s
# Warmup Iteration  16: 1792897.938 ops/s
# Warmup Iteration  17: 1794700.855 ops/s
# Warmup Iteration  18: 1792569.422 ops/s
# Warmup Iteration  19: 1790102.298 ops/s
# Warmup Iteration  20: 1792824.539 ops/s
# Warmup Iteration  21: 1794281.401 ops/s
# Warmup Iteration  22: 1793220.426 ops/s
# Warmup Iteration  23: 1789799.175 ops/s
# Warmup Iteration  24: 1792257.129 ops/s
# Warmup Iteration  25: 1792373.605 ops/s
# Warmup Iteration  26: 1793480.641 ops/s
# Warmup Iteration  27: 1793330.576 ops/s
# Warmup Iteration  28: 1794193.213 ops/s
# Warmup Iteration  29: 1794655.134 ops/s
# Warmup Iteration  30: 1793083.097 ops/s
Iteration   1: 1793898.142 ops/s
Iteration   2: 1794814.208 ops/s
Iteration   3: 1793607.305 ops/s
Iteration   4: 1791348.600 ops/s
Iteration   5: 1795813.557 ops/s
Iteration   6: 1791771.083 ops/s
Iteration   7: 1789540.080 ops/s
Iteration   8: 1796213.909 ops/s
Iteration   9: 1793652.912 ops/s
Iteration  10: 1791513.426 ops/s
Iteration  11: 1795327.415 ops/s
Iteration  12: 1792714.095 ops/s
Iteration  13: 1790252.181 ops/s
Iteration  14: 1796265.650 ops/s
Iteration  15: 1793114.874 ops/s
Iteration  16: 1795375.857 ops/s
Iteration  17: 1784327.479 ops/s
Iteration  18: 1795625.139 ops/s
Iteration  19: 1791661.223 ops/s
Iteration  20: 1796329.418 ops/s
Iteration  21: 1790152.834 ops/s
Iteration  22: 1786531.607 ops/s
Iteration  23: 1794082.905 ops/s
Iteration  24: 1789716.646 ops/s
Iteration  25: 1796777.584 ops/s
Iteration  26: 1792726.254 ops/s
Iteration  27: 1791822.188 ops/s
Iteration  28: 1795280.281 ops/s
Iteration  29: 1793251.350 ops/s
Iteration  30: 1786071.407 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectToTarget":
  1792652.654 ±(99.9%) 2124.348 ops/s [Average]
  (min, avg, max) = (1784327.479, 1792652.654, 1796777.584), stdev = 3179.624
  CI (99.9%): [1790528.306, 1794777.001] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectToTarget  thrpt   30  1792652.654 ± 2124.348  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1210057.839 ops/s
# Warmup Iteration   2: 2382236.957 ops/s
# Warmup Iteration   3: 2642148.041 ops/s
# Warmup Iteration   4: 2650218.588 ops/s
# Warmup Iteration   5: 2198366.697 ops/s
# Warmup Iteration   6: 2643605.287 ops/s
# Warmup Iteration   7: 2644758.742 ops/s
# Warmup Iteration   8: 2641320.483 ops/s
# Warmup Iteration   9: 2635350.822 ops/s
# Warmup Iteration  10: 2639772.891 ops/s
# Warmup Iteration  11: 2635028.500 ops/s
# Warmup Iteration  12: 2618651.363 ops/s
# Warmup Iteration  13: 2635687.478 ops/s
# Warmup Iteration  14: 2640786.519 ops/s
# Warmup Iteration  15: 2634354.374 ops/s
# Warmup Iteration  16: 2641288.026 ops/s
# Warmup Iteration  17: 2652116.198 ops/s
# Warmup Iteration  18: 2647560.340 ops/s
# Warmup Iteration  19: 2646101.351 ops/s
# Warmup Iteration  20: 2651204.782 ops/s
# Warmup Iteration  21: 2648122.138 ops/s
# Warmup Iteration  22: 2646385.859 ops/s
# Warmup Iteration  23: 2651099.111 ops/s
# Warmup Iteration  24: 2624872.299 ops/s
# Warmup Iteration  25: 2641894.931 ops/s
# Warmup Iteration  26: 2612975.416 ops/s
# Warmup Iteration  27: 2649065.865 ops/s
# Warmup Iteration  28: 2651564.066 ops/s
# Warmup Iteration  29: 2645360.368 ops/s
# Warmup Iteration  30: 2651987.216 ops/s
Iteration   1: 2650411.755 ops/s
Iteration   2: 2658944.238 ops/s
Iteration   3: 2643053.273 ops/s
Iteration   4: 2647627.443 ops/s
Iteration   5: 2653131.966 ops/s
Iteration   6: 2644229.349 ops/s
Iteration   7: 2645699.528 ops/s
Iteration   8: 2646302.694 ops/s
Iteration   9: 2643097.265 ops/s
Iteration  10: 2650266.258 ops/s
Iteration  11: 2652876.298 ops/s
Iteration  12: 2649107.764 ops/s
Iteration  13: 2650637.382 ops/s
Iteration  14: 2658866.998 ops/s
Iteration  15: 2645712.679 ops/s
Iteration  16: 2654384.155 ops/s
Iteration  17: 2649126.552 ops/s
Iteration  18: 2629134.403 ops/s
Iteration  19: 2655488.904 ops/s
Iteration  20: 2638257.783 ops/s
Iteration  21: 2653830.617 ops/s
Iteration  22: 2656353.104 ops/s
Iteration  23: 2646199.197 ops/s
Iteration  24: 2646404.731 ops/s
Iteration  25: 2646064.524 ops/s
Iteration  26: 2645880.172 ops/s
Iteration  27: 2646135.589 ops/s
Iteration  28: 2652264.923 ops/s
Iteration  29: 2643041.489 ops/s
Iteration  30: 2640143.154 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectWith":
  2648089.140 ±(99.9%) 4221.619 ops/s [Average]
  (min, avg, max) = (2629134.403, 2648089.140, 2658944.238), stdev = 6318.721
  CI (99.9%): [2643867.520, 2652310.759] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectWith  thrpt   30  2648089.140 ± 4221.619  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1264982.888 ops/s
# Warmup Iteration   2: 2734195.629 ops/s
# Warmup Iteration   3: 2954448.902 ops/s
# Warmup Iteration   4: 2961990.593 ops/s
# Warmup Iteration   5: 2461759.975 ops/s
# Warmup Iteration   6: 2967678.642 ops/s
# Warmup Iteration   7: 2972948.087 ops/s
# Warmup Iteration   8: 2968136.494 ops/s
# Warmup Iteration   9: 2962321.477 ops/s
# Warmup Iteration  10: 2972997.806 ops/s
# Warmup Iteration  11: 2965953.827 ops/s
# Warmup Iteration  12: 2966786.195 ops/s
# Warmup Iteration  13: 2967916.767 ops/s
# Warmup Iteration  14: 2969077.783 ops/s
# Warmup Iteration  15: 2965661.971 ops/s
# Warmup Iteration  16: 2963012.125 ops/s
# Warmup Iteration  17: 2968954.883 ops/s
# Warmup Iteration  18: 2968703.307 ops/s
# Warmup Iteration  19: 2981635.779 ops/s
# Warmup Iteration  20: 2969397.292 ops/s
# Warmup Iteration  21: 2965524.250 ops/s
# Warmup Iteration  22: 2968760.850 ops/s
# Warmup Iteration  23: 2977011.703 ops/s
# Warmup Iteration  24: 2970419.690 ops/s
# Warmup Iteration  25: 2966570.571 ops/s
# Warmup Iteration  26: 2967654.751 ops/s
# Warmup Iteration  27: 2974080.031 ops/s
# Warmup Iteration  28: 2967758.996 ops/s
# Warmup Iteration  29: 2978046.710 ops/s
# Warmup Iteration  30: 2971632.611 ops/s
Iteration   1: 2969019.462 ops/s
Iteration   2: 2972412.665 ops/s
Iteration   3: 2967687.719 ops/s
Iteration   4: 2973192.165 ops/s
Iteration   5: 2973983.522 ops/s
Iteration   6: 2969777.078 ops/s
Iteration   7: 2972933.313 ops/s
Iteration   8: 2969213.498 ops/s
Iteration   9: 2979441.369 ops/s
Iteration  10: 2968017.883 ops/s
Iteration  11: 2969910.035 ops/s
Iteration  12: 2968352.812 ops/s
Iteration  13: 2977480.255 ops/s
Iteration  14: 2978281.168 ops/s
Iteration  15: 2968296.228 ops/s
Iteration  16: 2971738.474 ops/s
Iteration  17: 2970493.987 ops/s
Iteration  18: 2947643.802 ops/s
Iteration  19: 2963094.380 ops/s
Iteration  20: 2960914.318 ops/s
Iteration  21: 2976707.462 ops/s
Iteration  22: 2972021.206 ops/s
Iteration  23: 2957706.807 ops/s
Iteration  24: 2968302.119 ops/s
Iteration  25: 2974200.945 ops/s
Iteration  26: 2968696.032 ops/s
Iteration  27: 2969937.740 ops/s
Iteration  28: 2958850.330 ops/s
Iteration  29: 2976064.481 ops/s
Iteration  30: 2971775.679 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectWithIndex":
  2969538.231 ±(99.9%) 4446.097 ops/s [Average]
  (min, avg, max) = (2947643.802, 2969538.231, 2979441.369), stdev = 6654.709
  CI (99.9%): [2965092.134, 2973984.328] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectWithIndex  thrpt   30  2969538.231 ± 4446.097  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1403304.618 ops/s
# Warmup Iteration   2: 3258328.377 ops/s
# Warmup Iteration   3: 3411747.130 ops/s
# Warmup Iteration   4: 3042442.119 ops/s
# Warmup Iteration   5: 3226194.158 ops/s
# Warmup Iteration   6: 3409898.905 ops/s
# Warmup Iteration   7: 3417907.349 ops/s
# Warmup Iteration   8: 3414993.500 ops/s
# Warmup Iteration   9: 3412459.242 ops/s
# Warmup Iteration  10: 3413279.899 ops/s
# Warmup Iteration  11: 3410435.978 ops/s
# Warmup Iteration  12: 3409289.286 ops/s
# Warmup Iteration  13: 3411445.289 ops/s
# Warmup Iteration  14: 3417062.347 ops/s
# Warmup Iteration  15: 3419213.624 ops/s
# Warmup Iteration  16: 3418237.847 ops/s
# Warmup Iteration  17: 3415591.459 ops/s
# Warmup Iteration  18: 3423321.833 ops/s
# Warmup Iteration  19: 3399783.261 ops/s
# Warmup Iteration  20: 3401977.040 ops/s
# Warmup Iteration  21: 3420139.646 ops/s
# Warmup Iteration  22: 3416250.841 ops/s
# Warmup Iteration  23: 3392966.291 ops/s
# Warmup Iteration  24: 3415912.897 ops/s
# Warmup Iteration  25: 3413603.513 ops/s
# Warmup Iteration  26: 3399524.284 ops/s
# Warmup Iteration  27: 3405702.238 ops/s
# Warmup Iteration  28: 3414986.086 ops/s
# Warmup Iteration  29: 3418135.358 ops/s
# Warmup Iteration  30: 3398680.492 ops/s
Iteration   1: 3409560.167 ops/s
Iteration   2: 3411111.746 ops/s
Iteration   3: 3419490.525 ops/s
Iteration   4: 3423281.583 ops/s
Iteration   5: 3415541.739 ops/s
Iteration   6: 3419262.591 ops/s
Iteration   7: 3415163.500 ops/s
Iteration   8: 3411653.312 ops/s
Iteration   9: 3424841.605 ops/s
Iteration  10: 3415051.667 ops/s
Iteration  11: 3417105.597 ops/s
Iteration  12: 3418212.763 ops/s
Iteration  13: 3419155.599 ops/s
Iteration  14: 3410963.296 ops/s
Iteration  15: 3425788.413 ops/s
Iteration  16: 3412753.780 ops/s
Iteration  17: 3414326.298 ops/s
Iteration  18: 3416168.566 ops/s
Iteration  19: 3415046.230 ops/s
Iteration  20: 3417584.714 ops/s
Iteration  21: 3421979.931 ops/s
Iteration  22: 3416471.330 ops/s
Iteration  23: 3411822.428 ops/s
Iteration  24: 3417212.856 ops/s
Iteration  25: 3420538.818 ops/s
Iteration  26: 3422573.979 ops/s
Iteration  27: 3415010.137 ops/s
Iteration  28: 3407163.975 ops/s
Iteration  29: 3405348.926 ops/s
Iteration  30: 3405609.286 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectWithIndexWithTarget":
  3415859.845 ±(99.9%) 3536.933 ops/s [Average]
  (min, avg, max) = (3405348.926, 3415859.845, 3425788.413), stdev = 5293.915
  CI (99.9%): [3412322.912, 3419396.778] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  3415859.845 ± 3536.933  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 478814.828 ops/s
# Warmup Iteration   2: 904289.102 ops/s
# Warmup Iteration   3: 1019450.206 ops/s
# Warmup Iteration   4: 1027153.713 ops/s
# Warmup Iteration   5: 1017713.649 ops/s
# Warmup Iteration   6: 870591.187 ops/s
# Warmup Iteration   7: 1026402.246 ops/s
# Warmup Iteration   8: 1026113.025 ops/s
# Warmup Iteration   9: 1026536.599 ops/s
# Warmup Iteration  10: 1028131.693 ops/s
# Warmup Iteration  11: 1028253.357 ops/s
# Warmup Iteration  12: 1025212.088 ops/s
# Warmup Iteration  13: 1026594.952 ops/s
# Warmup Iteration  14: 1025744.001 ops/s
# Warmup Iteration  15: 1027817.339 ops/s
# Warmup Iteration  16: 1026966.851 ops/s
# Warmup Iteration  17: 1022728.660 ops/s
# Warmup Iteration  18: 1022832.925 ops/s
# Warmup Iteration  19: 1024844.497 ops/s
# Warmup Iteration  20: 1021538.158 ops/s
# Warmup Iteration  21: 1026642.564 ops/s
# Warmup Iteration  22: 1026784.100 ops/s
# Warmup Iteration  23: 1020650.952 ops/s
# Warmup Iteration  24: 1027411.762 ops/s
# Warmup Iteration  25: 1028339.150 ops/s
# Warmup Iteration  26: 1029109.269 ops/s
# Warmup Iteration  27: 1028192.142 ops/s
# Warmup Iteration  28: 1028882.349 ops/s
# Warmup Iteration  29: 1027518.299 ops/s
# Warmup Iteration  30: 1026269.097 ops/s
Iteration   1: 1027133.363 ops/s
Iteration   2: 1028031.204 ops/s
Iteration   3: 1025799.333 ops/s
Iteration   4: 1025173.563 ops/s
Iteration   5: 1027364.334 ops/s
Iteration   6: 1027136.826 ops/s
Iteration   7: 1028626.868 ops/s
Iteration   8: 1027390.231 ops/s
Iteration   9: 1028435.412 ops/s
Iteration  10: 1029372.889 ops/s
Iteration  11: 1027082.103 ops/s
Iteration  12: 1028030.803 ops/s
Iteration  13: 1027184.138 ops/s
Iteration  14: 1028348.117 ops/s
Iteration  15: 1029790.605 ops/s
Iteration  16: 1029364.393 ops/s
Iteration  17: 1030479.286 ops/s
Iteration  18: 1028146.058 ops/s
Iteration  19: 1027486.018 ops/s
Iteration  20: 1029358.050 ops/s
Iteration  21: 1028462.689 ops/s
Iteration  22: 1030824.664 ops/s
Iteration  23: 1028975.633 ops/s
Iteration  24: 1023285.698 ops/s
Iteration  25: 1029706.498 ops/s
Iteration  26: 1025847.615 ops/s
Iteration  27: 1029733.572 ops/s
Iteration  28: 1026301.877 ops/s
Iteration  29: 1027490.128 ops/s
Iteration  30: 1027641.798 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collectWith_target":
  1027933.459 ±(99.9%) 1092.941 ops/s [Average]
  (min, avg, max) = (1023285.698, 1027933.459, 1030824.664), stdev = 1635.863
  CI (99.9%): [1026840.518, 1029026.400] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collectWith_target  thrpt   30  1027933.459 ± 1092.941  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collect_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collect_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 705793.233 ops/s
# Warmup Iteration   2: 1593841.032 ops/s
# Warmup Iteration   3: 1686478.286 ops/s
# Warmup Iteration   4: 1692166.552 ops/s
# Warmup Iteration   5: 1410157.353 ops/s
# Warmup Iteration   6: 1692960.235 ops/s
# Warmup Iteration   7: 1688497.817 ops/s
# Warmup Iteration   8: 1693138.766 ops/s
# Warmup Iteration   9: 1691421.027 ops/s
# Warmup Iteration  10: 1692909.220 ops/s
# Warmup Iteration  11: 1689922.259 ops/s
# Warmup Iteration  12: 1694640.594 ops/s
# Warmup Iteration  13: 1691049.162 ops/s
# Warmup Iteration  14: 1694287.371 ops/s
# Warmup Iteration  15: 1691835.062 ops/s
# Warmup Iteration  16: 1690820.264 ops/s
# Warmup Iteration  17: 1685645.906 ops/s
# Warmup Iteration  18: 1683243.555 ops/s
# Warmup Iteration  19: 1692607.005 ops/s
# Warmup Iteration  20: 1693217.627 ops/s
# Warmup Iteration  21: 1694753.797 ops/s
# Warmup Iteration  22: 1692689.542 ops/s
# Warmup Iteration  23: 1692303.379 ops/s
# Warmup Iteration  24: 1690018.258 ops/s
# Warmup Iteration  25: 1690674.736 ops/s
# Warmup Iteration  26: 1687797.732 ops/s
# Warmup Iteration  27: 1689906.254 ops/s
# Warmup Iteration  28: 1692850.685 ops/s
# Warmup Iteration  29: 1685104.737 ops/s
# Warmup Iteration  30: 1689454.264 ops/s
Iteration   1: 1690188.869 ops/s
Iteration   2: 1690697.296 ops/s
Iteration   3: 1695022.938 ops/s
Iteration   4: 1692747.661 ops/s
Iteration   5: 1693949.039 ops/s
Iteration   6: 1690989.226 ops/s
Iteration   7: 1692522.600 ops/s
Iteration   8: 1695964.672 ops/s
Iteration   9: 1690712.245 ops/s
Iteration  10: 1685853.016 ops/s
Iteration  11: 1692233.503 ops/s
Iteration  12: 1697097.926 ops/s
Iteration  13: 1694043.642 ops/s
Iteration  14: 1692263.694 ops/s
Iteration  15: 1691883.985 ops/s
Iteration  16: 1693106.280 ops/s
Iteration  17: 1695546.054 ops/s
Iteration  18: 1693455.105 ops/s
Iteration  19: 1691257.958 ops/s
Iteration  20: 1693230.292 ops/s
Iteration  21: 1696637.584 ops/s
Iteration  22: 1693269.920 ops/s
Iteration  23: 1694852.541 ops/s
Iteration  24: 1688975.494 ops/s
Iteration  25: 1688596.539 ops/s
Iteration  26: 1690891.537 ops/s
Iteration  27: 1691982.364 ops/s
Iteration  28: 1691855.996 ops/s
Iteration  29: 1693949.032 ops/s
Iteration  30: 1693620.282 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_collect_target":
  1692579.910 ±(99.9%) 1630.817 ops/s [Average]
  (min, avg, max) = (1685853.016, 1692579.910, 1697097.926), stdev = 2440.930
  CI (99.9%): [1690949.093, 1694210.726] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_collect_target  thrpt   30  1692579.910 ± 1630.817  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_compareTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_compareTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 88793.082 ops/s
# Warmup Iteration   2: 152030.024 ops/s
# Warmup Iteration   3: 177375.155 ops/s
# Warmup Iteration   4: 178843.376 ops/s
# Warmup Iteration   5: 178613.430 ops/s
# Warmup Iteration   6: 148209.814 ops/s
# Warmup Iteration   7: 178848.769 ops/s
# Warmup Iteration   8: 178784.475 ops/s
# Warmup Iteration   9: 179057.943 ops/s
# Warmup Iteration  10: 179102.942 ops/s
# Warmup Iteration  11: 178842.469 ops/s
# Warmup Iteration  12: 178878.233 ops/s
# Warmup Iteration  13: 178850.982 ops/s
# Warmup Iteration  14: 178824.813 ops/s
# Warmup Iteration  15: 178656.470 ops/s
# Warmup Iteration  16: 178878.838 ops/s
# Warmup Iteration  17: 179156.663 ops/s
# Warmup Iteration  18: 178896.693 ops/s
# Warmup Iteration  19: 178905.416 ops/s
# Warmup Iteration  20: 179125.477 ops/s
# Warmup Iteration  21: 179122.147 ops/s
# Warmup Iteration  22: 179035.946 ops/s
# Warmup Iteration  23: 179012.312 ops/s
# Warmup Iteration  24: 178617.607 ops/s
# Warmup Iteration  25: 178491.677 ops/s
# Warmup Iteration  26: 179259.544 ops/s
# Warmup Iteration  27: 178903.669 ops/s
# Warmup Iteration  28: 178940.368 ops/s
# Warmup Iteration  29: 179078.983 ops/s
# Warmup Iteration  30: 179196.831 ops/s
Iteration   1: 179421.708 ops/s
Iteration   2: 178880.123 ops/s
Iteration   3: 179099.215 ops/s
Iteration   4: 178812.505 ops/s
Iteration   5: 179234.403 ops/s
Iteration   6: 179117.250 ops/s
Iteration   7: 179239.109 ops/s
Iteration   8: 179247.581 ops/s
Iteration   9: 178826.772 ops/s
Iteration  10: 178867.457 ops/s
Iteration  11: 178904.224 ops/s
Iteration  12: 179273.861 ops/s
Iteration  13: 178941.676 ops/s
Iteration  14: 179082.457 ops/s
Iteration  15: 178944.865 ops/s
Iteration  16: 179408.439 ops/s
Iteration  17: 178806.273 ops/s
Iteration  18: 179268.024 ops/s
Iteration  19: 179058.067 ops/s
Iteration  20: 179383.842 ops/s
Iteration  21: 179190.593 ops/s
Iteration  22: 179238.759 ops/s
Iteration  23: 179129.269 ops/s
Iteration  24: 179409.114 ops/s
Iteration  25: 179059.490 ops/s
Iteration  26: 179269.287 ops/s
Iteration  27: 178808.135 ops/s
Iteration  28: 179460.975 ops/s
Iteration  29: 179053.076 ops/s
Iteration  30: 178997.539 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_compareTo":
  179114.470 ±(99.9%) 136.402 ops/s [Average]
  (min, avg, max) = (178806.273, 179114.470, 179460.975), stdev = 204.160
  CI (99.9%): [178978.068, 179250.872] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_compareTo  thrpt   30  179114.470 ± 136.402  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1181260.111 ops/s
# Warmup Iteration   2: 3017302.100 ops/s
# Warmup Iteration   3: 3047835.751 ops/s
# Warmup Iteration   4: 2541028.947 ops/s
# Warmup Iteration   5: 3057834.756 ops/s
# Warmup Iteration   6: 3045587.875 ops/s
# Warmup Iteration   7: 3053293.953 ops/s
# Warmup Iteration   8: 3056789.973 ops/s
# Warmup Iteration   9: 3046298.580 ops/s
# Warmup Iteration  10: 3054183.186 ops/s
# Warmup Iteration  11: 3050114.218 ops/s
# Warmup Iteration  12: 3040168.011 ops/s
# Warmup Iteration  13: 3047801.212 ops/s
# Warmup Iteration  14: 3058879.034 ops/s
# Warmup Iteration  15: 3044949.962 ops/s
# Warmup Iteration  16: 3050198.199 ops/s
# Warmup Iteration  17: 3056437.793 ops/s
# Warmup Iteration  18: 3035084.632 ops/s
# Warmup Iteration  19: 3015976.536 ops/s
# Warmup Iteration  20: 3048044.808 ops/s
# Warmup Iteration  21: 3050441.758 ops/s
# Warmup Iteration  22: 3048137.866 ops/s
# Warmup Iteration  23: 3037295.745 ops/s
# Warmup Iteration  24: 3060105.577 ops/s
# Warmup Iteration  25: 3029401.281 ops/s
# Warmup Iteration  26: 3054014.198 ops/s
# Warmup Iteration  27: 3055321.113 ops/s
# Warmup Iteration  28: 3049535.484 ops/s
# Warmup Iteration  29: 3036358.848 ops/s
# Warmup Iteration  30: 3041786.602 ops/s
Iteration   1: 3041287.431 ops/s
Iteration   2: 3043110.315 ops/s
Iteration   3: 3046546.586 ops/s
Iteration   4: 3045540.332 ops/s
Iteration   5: 3048191.570 ops/s
Iteration   6: 3051928.693 ops/s
Iteration   7: 3056819.823 ops/s
Iteration   8: 3043185.519 ops/s
Iteration   9: 3032159.873 ops/s
Iteration  10: 3036206.674 ops/s
Iteration  11: 3048472.412 ops/s
Iteration  12: 3004945.269 ops/s
Iteration  13: 3030301.528 ops/s
Iteration  14: 3038831.002 ops/s
Iteration  15: 3031923.460 ops/s
Iteration  16: 3042511.251 ops/s
Iteration  17: 3046827.389 ops/s
Iteration  18: 3038530.310 ops/s
Iteration  19: 3033107.524 ops/s
Iteration  20: 3025775.712 ops/s
Iteration  21: 3023469.610 ops/s
Iteration  22: 3036042.117 ops/s
Iteration  23: 3037420.746 ops/s
Iteration  24: 3028786.320 ops/s
Iteration  25: 3040108.549 ops/s
Iteration  26: 3044142.188 ops/s
Iteration  27: 3050551.819 ops/s
Iteration  28: 3047292.134 ops/s
Iteration  29: 3045984.440 ops/s
Iteration  30: 3054538.318 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_contains":
  3039817.964 ±(99.9%) 7103.834 ops/s [Average]
  (min, avg, max) = (3004945.269, 3039817.964, 3056819.823), stdev = 10632.686
  CI (99.9%): [3032714.129, 3046921.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_contains  thrpt   30  3039817.964 ± 7103.834  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1700419.268 ops/s
# Warmup Iteration   2: 3350979.992 ops/s
# Warmup Iteration   3: 3664555.538 ops/s
# Warmup Iteration   4: 3680032.308 ops/s
# Warmup Iteration   5: 3047551.375 ops/s
# Warmup Iteration   6: 3690367.265 ops/s
# Warmup Iteration   7: 3685486.618 ops/s
# Warmup Iteration   8: 3690249.789 ops/s
# Warmup Iteration   9: 3692476.408 ops/s
# Warmup Iteration  10: 3677948.496 ops/s
# Warmup Iteration  11: 3686099.436 ops/s
# Warmup Iteration  12: 3690259.933 ops/s
# Warmup Iteration  13: 3693295.935 ops/s
# Warmup Iteration  14: 3691340.871 ops/s
# Warmup Iteration  15: 3692164.291 ops/s
# Warmup Iteration  16: 3689633.226 ops/s
# Warmup Iteration  17: 3690330.830 ops/s
# Warmup Iteration  18: 3691618.912 ops/s
# Warmup Iteration  19: 3689475.817 ops/s
# Warmup Iteration  20: 3685989.460 ops/s
# Warmup Iteration  21: 3686973.976 ops/s
# Warmup Iteration  22: 3684878.086 ops/s
# Warmup Iteration  23: 3689228.859 ops/s
# Warmup Iteration  24: 3672727.620 ops/s
# Warmup Iteration  25: 3686562.534 ops/s
# Warmup Iteration  26: 3686159.208 ops/s
# Warmup Iteration  27: 3686967.998 ops/s
# Warmup Iteration  28: 3672713.564 ops/s
# Warmup Iteration  29: 3691410.804 ops/s
# Warmup Iteration  30: 3690407.851 ops/s
Iteration   1: 3678491.200 ops/s
Iteration   2: 3683037.896 ops/s
Iteration   3: 3572750.184 ops/s
Iteration   4: 3685260.955 ops/s
Iteration   5: 3675011.820 ops/s
Iteration   6: 3668123.508 ops/s
Iteration   7: 3657703.531 ops/s
Iteration   8: 3659163.152 ops/s
Iteration   9: 3662089.334 ops/s
Iteration  10: 3676310.949 ops/s
Iteration  11: 3684550.953 ops/s
Iteration  12: 3690832.269 ops/s
Iteration  13: 3684941.156 ops/s
Iteration  14: 3689692.680 ops/s
Iteration  15: 3691560.113 ops/s
Iteration  16: 3683704.137 ops/s
Iteration  17: 3686618.324 ops/s
Iteration  18: 3678331.983 ops/s
Iteration  19: 3684195.443 ops/s
Iteration  20: 3687130.958 ops/s
Iteration  21: 3693914.433 ops/s
Iteration  22: 3683177.357 ops/s
Iteration  23: 3684572.326 ops/s
Iteration  24: 3692632.444 ops/s
Iteration  25: 3682938.641 ops/s
Iteration  26: 3681083.686 ops/s
Iteration  27: 3689681.017 ops/s
Iteration  28: 3689766.038 ops/s
Iteration  29: 3663327.660 ops/s
Iteration  30: 3672375.804 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_containsAll":
  3677098.998 ±(99.9%) 14762.680 ops/s [Average]
  (min, avg, max) = (3572750.184, 3677098.998, 3693914.433), stdev = 22096.086
  CI (99.9%): [3662336.319, 3691861.678] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_containsAll  thrpt   30  3677098.998 ± 14762.680  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1714529.091 ops/s
# Warmup Iteration   2: 3159114.153 ops/s
# Warmup Iteration   3: 3543363.226 ops/s
# Warmup Iteration   4: 3556444.936 ops/s
# Warmup Iteration   5: 3401190.388 ops/s
# Warmup Iteration   6: 3085288.717 ops/s
# Warmup Iteration   7: 3560482.479 ops/s
# Warmup Iteration   8: 3562749.626 ops/s
# Warmup Iteration   9: 3565391.928 ops/s
# Warmup Iteration  10: 3564347.717 ops/s
# Warmup Iteration  11: 3558122.052 ops/s
# Warmup Iteration  12: 3563309.201 ops/s
# Warmup Iteration  13: 3565649.523 ops/s
# Warmup Iteration  14: 3558984.213 ops/s
# Warmup Iteration  15: 3540609.246 ops/s
# Warmup Iteration  16: 3560072.981 ops/s
# Warmup Iteration  17: 3556801.925 ops/s
# Warmup Iteration  18: 3561935.035 ops/s
# Warmup Iteration  19: 3551600.888 ops/s
# Warmup Iteration  20: 3564949.079 ops/s
# Warmup Iteration  21: 3560521.952 ops/s
# Warmup Iteration  22: 3568074.661 ops/s
# Warmup Iteration  23: 3566654.027 ops/s
# Warmup Iteration  24: 3551314.368 ops/s
# Warmup Iteration  25: 3563315.159 ops/s
# Warmup Iteration  26: 3565954.004 ops/s
# Warmup Iteration  27: 3566349.270 ops/s
# Warmup Iteration  28: 3563817.533 ops/s
# Warmup Iteration  29: 3563769.692 ops/s
# Warmup Iteration  30: 3563922.839 ops/s
Iteration   1: 3570221.693 ops/s
Iteration   2: 3551853.383 ops/s
Iteration   3: 3566877.806 ops/s
Iteration   4: 3565056.960 ops/s
Iteration   5: 3564583.584 ops/s
Iteration   6: 3569836.222 ops/s
Iteration   7: 3564377.750 ops/s
Iteration   8: 3570406.149 ops/s
Iteration   9: 3566401.352 ops/s
Iteration  10: 3564722.501 ops/s
Iteration  11: 3566394.853 ops/s
Iteration  12: 3562660.722 ops/s
Iteration  13: 3567975.920 ops/s
Iteration  14: 3567908.715 ops/s
Iteration  15: 3556962.022 ops/s
Iteration  16: 3551361.361 ops/s
Iteration  17: 3552948.868 ops/s
Iteration  18: 3416960.383 ops/s
Iteration  19: 3513440.684 ops/s
Iteration  20: 3560441.180 ops/s
Iteration  21: 3544486.855 ops/s
Iteration  22: 3561885.624 ops/s
Iteration  23: 3560353.943 ops/s
Iteration  24: 3567166.516 ops/s
Iteration  25: 3558319.461 ops/s
Iteration  26: 3570364.008 ops/s
Iteration  27: 3561352.730 ops/s
Iteration  28: 3530066.776 ops/s
Iteration  29: 3559639.755 ops/s
Iteration  30: 3563786.592 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_containsAllArray":
  3554960.479 ±(99.9%) 19237.969 ops/s [Average]
  (min, avg, max) = (3416960.383, 3554960.479, 3570406.149), stdev = 28794.488
  CI (99.9%): [3535722.510, 3574198.448] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_containsAllArray  thrpt   30  3554960.479 ± 19237.969  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1660985.583 ops/s
# Warmup Iteration   2: 3175459.986 ops/s
# Warmup Iteration   3: 3469949.132 ops/s
# Warmup Iteration   4: 3494497.977 ops/s
# Warmup Iteration   5: 3007287.029 ops/s
# Warmup Iteration   6: 3386628.536 ops/s
# Warmup Iteration   7: 3496194.675 ops/s
# Warmup Iteration   8: 3484465.669 ops/s
# Warmup Iteration   9: 3489595.764 ops/s
# Warmup Iteration  10: 3495150.255 ops/s
# Warmup Iteration  11: 3493079.299 ops/s
# Warmup Iteration  12: 3486464.998 ops/s
# Warmup Iteration  13: 3479182.256 ops/s
# Warmup Iteration  14: 3475687.808 ops/s
# Warmup Iteration  15: 3434621.730 ops/s
# Warmup Iteration  16: 3492101.106 ops/s
# Warmup Iteration  17: 3493649.043 ops/s
# Warmup Iteration  18: 3485643.796 ops/s
# Warmup Iteration  19: 3487078.738 ops/s
# Warmup Iteration  20: 3488673.405 ops/s
# Warmup Iteration  21: 3483738.340 ops/s
# Warmup Iteration  22: 3494829.454 ops/s
# Warmup Iteration  23: 3489289.515 ops/s
# Warmup Iteration  24: 3490689.400 ops/s
# Warmup Iteration  25: 3495730.572 ops/s
# Warmup Iteration  26: 3494989.353 ops/s
# Warmup Iteration  27: 3496752.514 ops/s
# Warmup Iteration  28: 3491323.477 ops/s
# Warmup Iteration  29: 3496500.755 ops/s
# Warmup Iteration  30: 3497166.763 ops/s
Iteration   1: 3494036.894 ops/s
Iteration   2: 3481604.735 ops/s
Iteration   3: 3493924.316 ops/s
Iteration   4: 3492411.858 ops/s
Iteration   5: 3500291.923 ops/s
Iteration   6: 3495021.513 ops/s
Iteration   7: 3490040.320 ops/s
Iteration   8: 3494983.510 ops/s
Iteration   9: 3488430.161 ops/s
Iteration  10: 3493452.593 ops/s
Iteration  11: 3503596.708 ops/s
Iteration  12: 3496407.997 ops/s
Iteration  13: 3495251.128 ops/s
Iteration  14: 3477836.761 ops/s
Iteration  15: 3484730.456 ops/s
Iteration  16: 3497194.916 ops/s
Iteration  17: 3492299.632 ops/s
Iteration  18: 3491903.088 ops/s
Iteration  19: 3498121.431 ops/s
Iteration  20: 3492042.971 ops/s
Iteration  21: 3493249.776 ops/s
Iteration  22: 3488101.091 ops/s
Iteration  23: 3467916.646 ops/s
Iteration  24: 3494076.704 ops/s
Iteration  25: 3492277.247 ops/s
Iteration  26: 3488131.540 ops/s
Iteration  27: 3496579.269 ops/s
Iteration  28: 3475755.941 ops/s
Iteration  29: 3486742.460 ops/s
Iteration  30: 3479914.771 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_containsAllIterable":
  3490544.278 ±(99.9%) 5138.074 ops/s [Average]
  (min, avg, max) = (3467916.646, 3490544.278, 3503596.708), stdev = 7690.427
  CI (99.9%): [3485406.205, 3495682.352] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_containsAllIterable  thrpt   30  3490544.278 ± 5138.074  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 298830.647 ops/s
# Warmup Iteration   2: 503681.358 ops/s
# Warmup Iteration   3: 580933.414 ops/s
# Warmup Iteration   4: 585076.663 ops/s
# Warmup Iteration   5: 584211.567 ops/s
# Warmup Iteration   6: 484674.936 ops/s
# Warmup Iteration   7: 584965.099 ops/s
# Warmup Iteration   8: 584848.106 ops/s
# Warmup Iteration   9: 585236.458 ops/s
# Warmup Iteration  10: 585183.892 ops/s
# Warmup Iteration  11: 584872.383 ops/s
# Warmup Iteration  12: 585177.959 ops/s
# Warmup Iteration  13: 584951.181 ops/s
# Warmup Iteration  14: 584935.545 ops/s
# Warmup Iteration  15: 584882.894 ops/s
# Warmup Iteration  16: 584179.307 ops/s
# Warmup Iteration  17: 584758.777 ops/s
# Warmup Iteration  18: 584523.478 ops/s
# Warmup Iteration  19: 585392.945 ops/s
# Warmup Iteration  20: 585715.940 ops/s
# Warmup Iteration  21: 585532.485 ops/s
# Warmup Iteration  22: 585047.977 ops/s
# Warmup Iteration  23: 585026.447 ops/s
# Warmup Iteration  24: 585506.690 ops/s
# Warmup Iteration  25: 585691.417 ops/s
# Warmup Iteration  26: 585769.751 ops/s
# Warmup Iteration  27: 584602.699 ops/s
# Warmup Iteration  28: 586078.210 ops/s
# Warmup Iteration  29: 586790.745 ops/s
# Warmup Iteration  30: 585194.966 ops/s
Iteration   1: 585465.733 ops/s
Iteration   2: 586130.502 ops/s
Iteration   3: 584451.256 ops/s
Iteration   4: 586307.735 ops/s
Iteration   5: 585140.395 ops/s
Iteration   6: 585861.391 ops/s
Iteration   7: 585660.097 ops/s
Iteration   8: 586135.447 ops/s
Iteration   9: 584812.880 ops/s
Iteration  10: 585903.655 ops/s
Iteration  11: 585004.276 ops/s
Iteration  12: 583285.650 ops/s
Iteration  13: 582415.588 ops/s
Iteration  14: 587275.488 ops/s
Iteration  15: 585591.102 ops/s
Iteration  16: 586650.065 ops/s
Iteration  17: 584580.560 ops/s
Iteration  18: 585456.907 ops/s
Iteration  19: 586106.983 ops/s
Iteration  20: 585847.356 ops/s
Iteration  21: 586972.975 ops/s
Iteration  22: 585564.535 ops/s
Iteration  23: 586514.192 ops/s
Iteration  24: 584055.790 ops/s
Iteration  25: 585433.623 ops/s
Iteration  26: 584930.374 ops/s
Iteration  27: 586807.093 ops/s
Iteration  28: 584962.406 ops/s
Iteration  29: 586789.808 ops/s
Iteration  30: 584061.522 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_corresponds":
  585472.513 ±(99.9%) 736.936 ops/s [Average]
  (min, avg, max) = (582415.588, 585472.513, 587275.488), stdev = 1103.012
  CI (99.9%): [584735.576, 586209.449] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_corresponds  thrpt   30  585472.513 ± 736.936  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1784161.127 ops/s
# Warmup Iteration   2: 3682941.847 ops/s
# Warmup Iteration   3: 3873898.620 ops/s
# Warmup Iteration   4: 3885515.522 ops/s
# Warmup Iteration   5: 3255338.060 ops/s
# Warmup Iteration   6: 3895323.445 ops/s
# Warmup Iteration   7: 3894396.249 ops/s
# Warmup Iteration   8: 3902274.384 ops/s
# Warmup Iteration   9: 3900715.559 ops/s
# Warmup Iteration  10: 3896017.050 ops/s
# Warmup Iteration  11: 3898948.446 ops/s
# Warmup Iteration  12: 3899356.324 ops/s
# Warmup Iteration  13: 3891683.387 ops/s
# Warmup Iteration  14: 3888609.422 ops/s
# Warmup Iteration  15: 3896543.235 ops/s
# Warmup Iteration  16: 3898575.419 ops/s
# Warmup Iteration  17: 3898451.243 ops/s
# Warmup Iteration  18: 3890598.396 ops/s
# Warmup Iteration  19: 3900021.410 ops/s
# Warmup Iteration  20: 3899008.149 ops/s
# Warmup Iteration  21: 3891476.208 ops/s
# Warmup Iteration  22: 3882749.770 ops/s
# Warmup Iteration  23: 3869351.817 ops/s
# Warmup Iteration  24: 3900735.978 ops/s
# Warmup Iteration  25: 3901923.911 ops/s
# Warmup Iteration  26: 3896772.255 ops/s
# Warmup Iteration  27: 3897672.447 ops/s
# Warmup Iteration  28: 3897638.707 ops/s
# Warmup Iteration  29: 3898784.592 ops/s
# Warmup Iteration  30: 3900466.737 ops/s
Iteration   1: 3907803.582 ops/s
Iteration   2: 3903933.165 ops/s
Iteration   3: 3896685.086 ops/s
Iteration   4: 3907589.995 ops/s
Iteration   5: 3875291.779 ops/s
Iteration   6: 3896285.801 ops/s
Iteration   7: 3887568.149 ops/s
Iteration   8: 3902468.411 ops/s
Iteration   9: 3889928.345 ops/s
Iteration  10: 3895818.135 ops/s
Iteration  11: 3906131.632 ops/s
Iteration  12: 3898839.801 ops/s
Iteration  13: 3898679.072 ops/s
Iteration  14: 3890748.964 ops/s
Iteration  15: 3895235.685 ops/s
Iteration  16: 3898593.739 ops/s
Iteration  17: 3900501.552 ops/s
Iteration  18: 3902961.931 ops/s
Iteration  19: 3900906.311 ops/s
Iteration  20: 3896119.046 ops/s
Iteration  21: 3905924.706 ops/s
Iteration  22: 3899954.348 ops/s
Iteration  23: 3901348.400 ops/s
Iteration  24: 3899730.233 ops/s
Iteration  25: 3896034.485 ops/s
Iteration  26: 3877521.220 ops/s
Iteration  27: 3905218.474 ops/s
Iteration  28: 3898355.749 ops/s
Iteration  29: 3885987.893 ops/s
Iteration  30: 3901265.577 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_count":
  3897447.709 ±(99.9%) 5285.748 ops/s [Average]
  (min, avg, max) = (3875291.779, 3897447.709, 3907803.582), stdev = 7911.460
  CI (99.9%): [3892161.960, 3902733.457] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_count  thrpt   30  3897447.709 ± 5285.748  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 739003.742 ops/s
# Warmup Iteration   2: 1436833.900 ops/s
# Warmup Iteration   3: 1607726.064 ops/s
# Warmup Iteration   4: 1618505.732 ops/s
# Warmup Iteration   5: 1426083.763 ops/s
# Warmup Iteration   6: 1521638.613 ops/s
# Warmup Iteration   7: 1618252.228 ops/s
# Warmup Iteration   8: 1617282.121 ops/s
# Warmup Iteration   9: 1619064.450 ops/s
# Warmup Iteration  10: 1616623.750 ops/s
# Warmup Iteration  11: 1619153.186 ops/s
# Warmup Iteration  12: 1618990.502 ops/s
# Warmup Iteration  13: 1618741.602 ops/s
# Warmup Iteration  14: 1618924.604 ops/s
# Warmup Iteration  15: 1618811.331 ops/s
# Warmup Iteration  16: 1618797.132 ops/s
# Warmup Iteration  17: 1622457.532 ops/s
# Warmup Iteration  18: 1622972.691 ops/s
# Warmup Iteration  19: 1623366.274 ops/s
# Warmup Iteration  20: 1625461.226 ops/s
# Warmup Iteration  21: 1616453.520 ops/s
# Warmup Iteration  22: 1623591.945 ops/s
# Warmup Iteration  23: 1625406.852 ops/s
# Warmup Iteration  24: 1624685.690 ops/s
# Warmup Iteration  25: 1624933.245 ops/s
# Warmup Iteration  26: 1625065.389 ops/s
# Warmup Iteration  27: 1620958.553 ops/s
# Warmup Iteration  28: 1616342.660 ops/s
# Warmup Iteration  29: 1619368.259 ops/s
# Warmup Iteration  30: 1625557.312 ops/s
Iteration   1: 1623143.197 ops/s
Iteration   2: 1624540.562 ops/s
Iteration   3: 1624677.705 ops/s
Iteration   4: 1622058.394 ops/s
Iteration   5: 1626162.993 ops/s
Iteration   6: 1624227.195 ops/s
Iteration   7: 1622927.974 ops/s
Iteration   8: 1622061.460 ops/s
Iteration   9: 1624582.343 ops/s
Iteration  10: 1623021.822 ops/s
Iteration  11: 1626072.331 ops/s
Iteration  12: 1622171.611 ops/s
Iteration  13: 1622218.550 ops/s
Iteration  14: 1621142.732 ops/s
Iteration  15: 1614707.725 ops/s
Iteration  16: 1625086.030 ops/s
Iteration  17: 1621718.459 ops/s
Iteration  18: 1624840.446 ops/s
Iteration  19: 1627846.463 ops/s
Iteration  20: 1622549.330 ops/s
Iteration  21: 1621155.940 ops/s
Iteration  22: 1625659.337 ops/s
Iteration  23: 1620251.299 ops/s
Iteration  24: 1625705.596 ops/s
Iteration  25: 1622918.005 ops/s
Iteration  26: 1623249.362 ops/s
Iteration  27: 1625692.494 ops/s
Iteration  28: 1623495.061 ops/s
Iteration  29: 1624022.257 ops/s
Iteration  30: 1625341.365 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_countBy":
  1623441.601 ±(99.9%) 1620.488 ops/s [Average]
  (min, avg, max) = (1614707.725, 1623441.601, 1627846.463), stdev = 2425.470
  CI (99.9%): [1621821.114, 1625062.089] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_countBy  thrpt   30  1623441.601 ± 1620.488  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 278287.060 ops/s
# Warmup Iteration   2: 538514.623 ops/s
# Warmup Iteration   3: 623550.801 ops/s
# Warmup Iteration   4: 626590.214 ops/s
# Warmup Iteration   5: 627492.042 ops/s
# Warmup Iteration   6: 524111.072 ops/s
# Warmup Iteration   7: 628031.245 ops/s
# Warmup Iteration   8: 627869.451 ops/s
# Warmup Iteration   9: 628409.179 ops/s
# Warmup Iteration  10: 627384.736 ops/s
# Warmup Iteration  11: 627316.593 ops/s
# Warmup Iteration  12: 628746.740 ops/s
# Warmup Iteration  13: 626357.439 ops/s
# Warmup Iteration  14: 628442.361 ops/s
# Warmup Iteration  15: 628872.495 ops/s
# Warmup Iteration  16: 628862.334 ops/s
# Warmup Iteration  17: 627878.906 ops/s
# Warmup Iteration  18: 627465.066 ops/s
# Warmup Iteration  19: 627182.542 ops/s
# Warmup Iteration  20: 627323.949 ops/s
# Warmup Iteration  21: 627028.499 ops/s
# Warmup Iteration  22: 627415.943 ops/s
# Warmup Iteration  23: 626455.955 ops/s
# Warmup Iteration  24: 627555.556 ops/s
# Warmup Iteration  25: 628087.713 ops/s
# Warmup Iteration  26: 627890.693 ops/s
# Warmup Iteration  27: 627963.441 ops/s
# Warmup Iteration  28: 626939.432 ops/s
# Warmup Iteration  29: 627995.029 ops/s
# Warmup Iteration  30: 627703.292 ops/s
Iteration   1: 626361.795 ops/s
Iteration   2: 628639.738 ops/s
Iteration   3: 627425.484 ops/s
Iteration   4: 628434.104 ops/s
Iteration   5: 627141.382 ops/s
Iteration   6: 625977.079 ops/s
Iteration   7: 626262.974 ops/s
Iteration   8: 627816.593 ops/s
Iteration   9: 628185.508 ops/s
Iteration  10: 625475.094 ops/s
Iteration  11: 628002.811 ops/s
Iteration  12: 625890.698 ops/s
Iteration  13: 626035.331 ops/s
Iteration  14: 626813.114 ops/s
Iteration  15: 622246.085 ops/s
Iteration  16: 627795.886 ops/s
Iteration  17: 626939.230 ops/s
Iteration  18: 625317.729 ops/s
Iteration  19: 628911.383 ops/s
Iteration  20: 627354.185 ops/s
Iteration  21: 625374.763 ops/s
Iteration  22: 624463.496 ops/s
Iteration  23: 624330.492 ops/s
Iteration  24: 623474.508 ops/s
Iteration  25: 623933.352 ops/s
Iteration  26: 622215.901 ops/s
Iteration  27: 626341.274 ops/s
Iteration  28: 625051.081 ops/s
Iteration  29: 626016.147 ops/s
Iteration  30: 627139.645 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_countByEach":
  626178.895 ±(99.9%) 1178.975 ops/s [Average]
  (min, avg, max) = (622215.901, 626178.895, 628911.383), stdev = 1764.635
  CI (99.9%): [624999.920, 627357.870] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_countByEach  thrpt   30  626178.895 ± 1178.975  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 763398.738 ops/s
# Warmup Iteration   2: 1455239.381 ops/s
# Warmup Iteration   3: 1630925.426 ops/s
# Warmup Iteration   4: 1638494.784 ops/s
# Warmup Iteration   5: 1538709.768 ops/s
# Warmup Iteration   6: 1457408.733 ops/s
# Warmup Iteration   7: 1638616.799 ops/s
# Warmup Iteration   8: 1637814.247 ops/s
# Warmup Iteration   9: 1639972.064 ops/s
# Warmup Iteration  10: 1635055.437 ops/s
# Warmup Iteration  11: 1638669.310 ops/s
# Warmup Iteration  12: 1639103.723 ops/s
# Warmup Iteration  13: 1639776.960 ops/s
# Warmup Iteration  14: 1639144.536 ops/s
# Warmup Iteration  15: 1636438.589 ops/s
# Warmup Iteration  16: 1640313.450 ops/s
# Warmup Iteration  17: 1647172.979 ops/s
# Warmup Iteration  18: 1645151.982 ops/s
# Warmup Iteration  19: 1646451.855 ops/s
# Warmup Iteration  20: 1643634.598 ops/s
# Warmup Iteration  21: 1644641.179 ops/s
# Warmup Iteration  22: 1646746.540 ops/s
# Warmup Iteration  23: 1645063.471 ops/s
# Warmup Iteration  24: 1644333.416 ops/s
# Warmup Iteration  25: 1646463.771 ops/s
# Warmup Iteration  26: 1646036.432 ops/s
# Warmup Iteration  27: 1647005.244 ops/s
# Warmup Iteration  28: 1640047.448 ops/s
# Warmup Iteration  29: 1642741.493 ops/s
# Warmup Iteration  30: 1644545.873 ops/s
Iteration   1: 1644228.626 ops/s
Iteration   2: 1648300.668 ops/s
Iteration   3: 1642308.998 ops/s
Iteration   4: 1642713.167 ops/s
Iteration   5: 1646707.670 ops/s
Iteration   6: 1644870.898 ops/s
Iteration   7: 1647837.056 ops/s
Iteration   8: 1645367.504 ops/s
Iteration   9: 1645400.903 ops/s
Iteration  10: 1642915.868 ops/s
Iteration  11: 1643913.589 ops/s
Iteration  12: 1648185.813 ops/s
Iteration  13: 1642142.713 ops/s
Iteration  14: 1644746.478 ops/s
Iteration  15: 1643680.964 ops/s
Iteration  16: 1643067.329 ops/s
Iteration  17: 1645410.268 ops/s
Iteration  18: 1648076.113 ops/s
Iteration  19: 1642870.606 ops/s
Iteration  20: 1644099.803 ops/s
Iteration  21: 1642345.771 ops/s
Iteration  22: 1637310.513 ops/s
Iteration  23: 1649068.870 ops/s
Iteration  24: 1646304.322 ops/s
Iteration  25: 1647893.417 ops/s
Iteration  26: 1643562.973 ops/s
Iteration  27: 1639991.092 ops/s
Iteration  28: 1648417.782 ops/s
Iteration  29: 1646290.300 ops/s
Iteration  30: 1645168.790 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_countByWith":
  1644773.295 ±(99.9%) 1803.773 ops/s [Average]
  (min, avg, max) = (1637310.513, 1644773.295, 1649068.870), stdev = 2699.803
  CI (99.9%): [1642969.522, 1646577.069] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_countByWith  thrpt   30  1644773.295 ± 1803.773  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1732826.688 ops/s
# Warmup Iteration   2: 3377268.636 ops/s
# Warmup Iteration   3: 3640601.120 ops/s
# Warmup Iteration   4: 3663968.808 ops/s
# Warmup Iteration   5: 3043603.527 ops/s
# Warmup Iteration   6: 3652439.539 ops/s
# Warmup Iteration   7: 3662897.997 ops/s
# Warmup Iteration   8: 3659215.544 ops/s
# Warmup Iteration   9: 3652388.603 ops/s
# Warmup Iteration  10: 3663314.732 ops/s
# Warmup Iteration  11: 3658849.147 ops/s
# Warmup Iteration  12: 3665537.022 ops/s
# Warmup Iteration  13: 3659503.377 ops/s
# Warmup Iteration  14: 3660624.555 ops/s
# Warmup Iteration  15: 3646384.102 ops/s
# Warmup Iteration  16: 3639966.587 ops/s
# Warmup Iteration  17: 3660343.560 ops/s
# Warmup Iteration  18: 3649663.129 ops/s
# Warmup Iteration  19: 3657265.157 ops/s
# Warmup Iteration  20: 3645531.716 ops/s
# Warmup Iteration  21: 3652485.833 ops/s
# Warmup Iteration  22: 3662224.652 ops/s
# Warmup Iteration  23: 3662135.637 ops/s
# Warmup Iteration  24: 3655087.988 ops/s
# Warmup Iteration  25: 3667192.373 ops/s
# Warmup Iteration  26: 3642990.997 ops/s
# Warmup Iteration  27: 3662284.661 ops/s
# Warmup Iteration  28: 3664831.951 ops/s
# Warmup Iteration  29: 3660007.217 ops/s
# Warmup Iteration  30: 3647032.049 ops/s
Iteration   1: 3653234.629 ops/s
Iteration   2: 3668663.596 ops/s
Iteration   3: 3663490.932 ops/s
Iteration   4: 3660639.561 ops/s
Iteration   5: 3666329.243 ops/s
Iteration   6: 3666536.426 ops/s
Iteration   7: 3653286.829 ops/s
Iteration   8: 3670346.647 ops/s
Iteration   9: 3657591.678 ops/s
Iteration  10: 3658541.887 ops/s
Iteration  11: 3664433.383 ops/s
Iteration  12: 3651693.593 ops/s
Iteration  13: 3660416.110 ops/s
Iteration  14: 3644419.815 ops/s
Iteration  15: 3660924.138 ops/s
Iteration  16: 3660152.841 ops/s
Iteration  17: 3668790.253 ops/s
Iteration  18: 3666366.016 ops/s
Iteration  19: 3663730.128 ops/s
Iteration  20: 3673470.606 ops/s
Iteration  21: 3659589.759 ops/s
Iteration  22: 3671808.153 ops/s
Iteration  23: 3669046.584 ops/s
Iteration  24: 3663845.640 ops/s
Iteration  25: 3666661.332 ops/s
Iteration  26: 3670580.559 ops/s
Iteration  27: 3674976.545 ops/s
Iteration  28: 3664398.284 ops/s
Iteration  29: 3670403.405 ops/s
Iteration  30: 3665722.677 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_countWith":
  3663669.708 ±(99.9%) 4633.864 ops/s [Average]
  (min, avg, max) = (3644419.815, 3663669.708, 3674976.545), stdev = 6935.751
  CI (99.9%): [3659035.844, 3668303.573] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_countWith  thrpt   30  3663669.708 ± 4633.864  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1947605.933 ops/s
# Warmup Iteration   2: 3800522.664 ops/s
# Warmup Iteration   3: 4112383.945 ops/s
# Warmup Iteration   4: 4133707.372 ops/s
# Warmup Iteration   5: 3441651.734 ops/s
# Warmup Iteration   6: 4162654.663 ops/s
# Warmup Iteration   7: 4153937.338 ops/s
# Warmup Iteration   8: 4155515.053 ops/s
# Warmup Iteration   9: 4162360.833 ops/s
# Warmup Iteration  10: 4157628.031 ops/s
# Warmup Iteration  11: 4152437.078 ops/s
# Warmup Iteration  12: 4161687.050 ops/s
# Warmup Iteration  13: 4160157.654 ops/s
# Warmup Iteration  14: 4158003.044 ops/s
# Warmup Iteration  15: 4161977.788 ops/s
# Warmup Iteration  16: 4161768.277 ops/s
# Warmup Iteration  17: 4157692.325 ops/s
# Warmup Iteration  18: 4155723.013 ops/s
# Warmup Iteration  19: 4162701.791 ops/s
# Warmup Iteration  20: 4158607.836 ops/s
# Warmup Iteration  21: 4163509.294 ops/s
# Warmup Iteration  22: 4163394.202 ops/s
# Warmup Iteration  23: 4147811.389 ops/s
# Warmup Iteration  24: 4162610.580 ops/s
# Warmup Iteration  25: 4155091.975 ops/s
# Warmup Iteration  26: 4157014.563 ops/s
# Warmup Iteration  27: 4160383.757 ops/s
# Warmup Iteration  28: 4160801.507 ops/s
# Warmup Iteration  29: 4141591.114 ops/s
# Warmup Iteration  30: 4164821.177 ops/s
Iteration   1: 4157617.733 ops/s
Iteration   2: 4158235.264 ops/s
Iteration   3: 4144485.108 ops/s
Iteration   4: 4155593.000 ops/s
Iteration   5: 4157254.930 ops/s
Iteration   6: 4160276.155 ops/s
Iteration   7: 4166261.128 ops/s
Iteration   8: 4154669.666 ops/s
Iteration   9: 4157570.063 ops/s
Iteration  10: 4148934.369 ops/s
Iteration  11: 4158570.200 ops/s
Iteration  12: 4163190.126 ops/s
Iteration  13: 4165661.129 ops/s
Iteration  14: 4158913.328 ops/s
Iteration  15: 4156295.406 ops/s
Iteration  16: 4161091.507 ops/s
Iteration  17: 4165451.430 ops/s
Iteration  18: 4159109.418 ops/s
Iteration  19: 4164169.378 ops/s
Iteration  20: 4151419.933 ops/s
Iteration  21: 4145653.793 ops/s
Iteration  22: 4153231.453 ops/s
Iteration  23: 4154713.399 ops/s
Iteration  24: 4160970.430 ops/s
Iteration  25: 4161742.709 ops/s
Iteration  26: 4153938.992 ops/s
Iteration  27: 4154598.089 ops/s
Iteration  28: 4159000.665 ops/s
Iteration  29: 4160553.339 ops/s
Iteration  30: 4159202.394 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_detect":
  4157612.484 ±(99.9%) 3584.578 ops/s [Average]
  (min, avg, max) = (4144485.108, 4157612.484, 4166261.128), stdev = 5365.228
  CI (99.9%): [4154027.907, 4161197.062] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_detect  thrpt   30  4157612.484 ± 3584.578  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1840719.527 ops/s
# Warmup Iteration   2: 3649464.046 ops/s
# Warmup Iteration   3: 3928793.197 ops/s
# Warmup Iteration   4: 3949503.278 ops/s
# Warmup Iteration   5: 3288285.967 ops/s
# Warmup Iteration   6: 3960772.525 ops/s
# Warmup Iteration   7: 3959115.422 ops/s
# Warmup Iteration   8: 3949564.680 ops/s
# Warmup Iteration   9: 3958072.356 ops/s
# Warmup Iteration  10: 3955942.568 ops/s
# Warmup Iteration  11: 3961728.165 ops/s
# Warmup Iteration  12: 3945373.027 ops/s
# Warmup Iteration  13: 3930099.060 ops/s
# Warmup Iteration  14: 3958460.007 ops/s
# Warmup Iteration  15: 3952288.512 ops/s
# Warmup Iteration  16: 3950781.578 ops/s
# Warmup Iteration  17: 3933587.013 ops/s
# Warmup Iteration  18: 3944837.200 ops/s
# Warmup Iteration  19: 3952175.586 ops/s
# Warmup Iteration  20: 3943349.119 ops/s
# Warmup Iteration  21: 3952825.455 ops/s
# Warmup Iteration  22: 3951714.402 ops/s
# Warmup Iteration  23: 3955733.281 ops/s
# Warmup Iteration  24: 3954603.660 ops/s
# Warmup Iteration  25: 3953200.328 ops/s
# Warmup Iteration  26: 3946598.673 ops/s
# Warmup Iteration  27: 3955127.246 ops/s
# Warmup Iteration  28: 3951519.470 ops/s
# Warmup Iteration  29: 3959023.022 ops/s
# Warmup Iteration  30: 3943167.746 ops/s
Iteration   1: 3952576.037 ops/s
Iteration   2: 3955081.201 ops/s
Iteration   3: 3954992.623 ops/s
Iteration   4: 3960201.153 ops/s
Iteration   5: 3947515.779 ops/s
Iteration   6: 3947785.093 ops/s
Iteration   7: 3953444.617 ops/s
Iteration   8: 3953209.344 ops/s
Iteration   9: 3944068.059 ops/s
Iteration  10: 3946149.245 ops/s
Iteration  11: 3918483.077 ops/s
Iteration  12: 3933630.498 ops/s
Iteration  13: 3956614.902 ops/s
Iteration  14: 3949030.959 ops/s
Iteration  15: 3949048.091 ops/s
Iteration  16: 3960228.312 ops/s
Iteration  17: 3953251.431 ops/s
Iteration  18: 3951177.430 ops/s
Iteration  19: 3958663.988 ops/s
Iteration  20: 3949760.599 ops/s
Iteration  21: 3951464.925 ops/s
Iteration  22: 3953585.429 ops/s
Iteration  23: 3947261.267 ops/s
Iteration  24: 3951976.128 ops/s
Iteration  25: 3962586.623 ops/s
Iteration  26: 3949257.637 ops/s
Iteration  27: 3949651.233 ops/s
Iteration  28: 3963209.460 ops/s
Iteration  29: 3950001.381 ops/s
Iteration  30: 3956030.776 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_detectIfNone":
  3950997.910 ±(99.9%) 5698.602 ops/s [Average]
  (min, avg, max) = (3918483.077, 3950997.910, 3963209.460), stdev = 8529.399
  CI (99.9%): [3945299.308, 3956696.512] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_detectIfNone  thrpt   30  3950997.910 ± 5698.602  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1059104.456 ops/s
# Warmup Iteration   2: 1927608.575 ops/s
# Warmup Iteration   3: 2135092.802 ops/s
# Warmup Iteration   4: 2146704.805 ops/s
# Warmup Iteration   5: 2078899.428 ops/s
# Warmup Iteration   6: 1848920.915 ops/s
# Warmup Iteration   7: 2146666.656 ops/s
# Warmup Iteration   8: 2148163.352 ops/s
# Warmup Iteration   9: 2148720.024 ops/s
# Warmup Iteration  10: 2150362.236 ops/s
# Warmup Iteration  11: 2150015.391 ops/s
# Warmup Iteration  12: 2139472.663 ops/s
# Warmup Iteration  13: 2149477.857 ops/s
# Warmup Iteration  14: 2149159.373 ops/s
# Warmup Iteration  15: 2147732.206 ops/s
# Warmup Iteration  16: 2145344.978 ops/s
# Warmup Iteration  17: 2146682.361 ops/s
# Warmup Iteration  18: 2147208.874 ops/s
# Warmup Iteration  19: 2146169.203 ops/s
# Warmup Iteration  20: 2145643.358 ops/s
# Warmup Iteration  21: 2149398.564 ops/s
# Warmup Iteration  22: 2147371.541 ops/s
# Warmup Iteration  23: 2149005.349 ops/s
# Warmup Iteration  24: 2149590.933 ops/s
# Warmup Iteration  25: 2148727.007 ops/s
# Warmup Iteration  26: 2148923.566 ops/s
# Warmup Iteration  27: 2148828.864 ops/s
# Warmup Iteration  28: 2149580.440 ops/s
# Warmup Iteration  29: 2148543.470 ops/s
# Warmup Iteration  30: 2145276.788 ops/s
Iteration   1: 2146844.326 ops/s
Iteration   2: 2150550.920 ops/s
Iteration   3: 2147830.501 ops/s
Iteration   4: 2147837.290 ops/s
Iteration   5: 2150226.751 ops/s
Iteration   6: 2146070.858 ops/s
Iteration   7: 2139670.932 ops/s
Iteration   8: 2138806.437 ops/s
Iteration   9: 2145640.712 ops/s
Iteration  10: 2149171.205 ops/s
Iteration  11: 2139415.708 ops/s
Iteration  12: 2137481.940 ops/s
Iteration  13: 2145790.577 ops/s
Iteration  14: 2144081.876 ops/s
Iteration  15: 2152639.726 ops/s
Iteration  16: 2143432.226 ops/s
Iteration  17: 2147876.710 ops/s
Iteration  18: 2147355.486 ops/s
Iteration  19: 2144595.513 ops/s
Iteration  20: 2151109.362 ops/s
Iteration  21: 2142672.303 ops/s
Iteration  22: 2151641.417 ops/s
Iteration  23: 2141508.043 ops/s
Iteration  24: 2148699.519 ops/s
Iteration  25: 2147094.396 ops/s
Iteration  26: 2143482.887 ops/s
Iteration  27: 2150048.943 ops/s
Iteration  28: 2148872.739 ops/s
Iteration  29: 2147446.799 ops/s
Iteration  30: 2151957.641 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_detectIndex":
  2146328.458 ±(99.9%) 2742.535 ops/s [Average]
  (min, avg, max) = (2137481.940, 2146328.458, 2152639.726), stdev = 4104.898
  CI (99.9%): [2143585.923, 2149070.993] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_detectIndex  thrpt   30  2146328.458 ± 2742.535  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1907701.726 ops/s
# Warmup Iteration   2: 3683045.633 ops/s
# Warmup Iteration   3: 4043868.688 ops/s
# Warmup Iteration   4: 4071259.207 ops/s
# Warmup Iteration   5: 3359551.761 ops/s
# Warmup Iteration   6: 4074992.846 ops/s
# Warmup Iteration   7: 4069210.255 ops/s
# Warmup Iteration   8: 4077341.875 ops/s
# Warmup Iteration   9: 4074098.796 ops/s
# Warmup Iteration  10: 4072617.320 ops/s
# Warmup Iteration  11: 4042965.581 ops/s
# Warmup Iteration  12: 4068720.922 ops/s
# Warmup Iteration  13: 4074996.650 ops/s
# Warmup Iteration  14: 4073555.616 ops/s
# Warmup Iteration  15: 4072281.836 ops/s
# Warmup Iteration  16: 4069665.361 ops/s
# Warmup Iteration  17: 4071153.680 ops/s
# Warmup Iteration  18: 4065711.102 ops/s
# Warmup Iteration  19: 4074543.873 ops/s
# Warmup Iteration  20: 4072829.056 ops/s
# Warmup Iteration  21: 4073848.494 ops/s
# Warmup Iteration  22: 4073365.196 ops/s
# Warmup Iteration  23: 4074730.085 ops/s
# Warmup Iteration  24: 4060272.968 ops/s
# Warmup Iteration  25: 4072494.036 ops/s
# Warmup Iteration  26: 4057294.406 ops/s
# Warmup Iteration  27: 4058662.103 ops/s
# Warmup Iteration  28: 4073388.962 ops/s
# Warmup Iteration  29: 4073333.142 ops/s
# Warmup Iteration  30: 4076041.739 ops/s
Iteration   1: 4067749.371 ops/s
Iteration   2: 4078875.447 ops/s
Iteration   3: 4069051.956 ops/s
Iteration   4: 4063607.507 ops/s
Iteration   5: 4083548.262 ops/s
Iteration   6: 4073405.898 ops/s
Iteration   7: 4080954.953 ops/s
Iteration   8: 4083139.629 ops/s
Iteration   9: 4063917.095 ops/s
Iteration  10: 4063043.971 ops/s
Iteration  11: 4074998.987 ops/s
Iteration  12: 4064947.449 ops/s
Iteration  13: 4075110.930 ops/s
Iteration  14: 4074117.907 ops/s
Iteration  15: 4076040.937 ops/s
Iteration  16: 4080441.978 ops/s
Iteration  17: 4071074.100 ops/s
Iteration  18: 4094489.740 ops/s
Iteration  19: 4077032.857 ops/s
Iteration  20: 4074370.157 ops/s
Iteration  21: 4065986.361 ops/s
Iteration  22: 4085753.146 ops/s
Iteration  23: 4088032.675 ops/s
Iteration  24: 4075383.038 ops/s
Iteration  25: 4069705.236 ops/s
Iteration  26: 4068801.359 ops/s
Iteration  27: 4069035.283 ops/s
Iteration  28: 4087690.754 ops/s
Iteration  29: 4073126.093 ops/s
Iteration  30: 4069192.744 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_detectWith":
  4074754.194 ±(99.9%) 5370.167 ops/s [Average]
  (min, avg, max) = (4063043.971, 4074754.194, 4094489.740), stdev = 8037.814
  CI (99.9%): [4069384.027, 4080124.361] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_detectWith  thrpt   30  4074754.194 ± 5370.167  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1878277.146 ops/s
# Warmup Iteration   2: 3673224.402 ops/s
# Warmup Iteration   3: 4099915.965 ops/s
# Warmup Iteration   4: 4122729.282 ops/s
# Warmup Iteration   5: 3414764.519 ops/s
# Warmup Iteration   6: 4133778.264 ops/s
# Warmup Iteration   7: 4134235.702 ops/s
# Warmup Iteration   8: 4122201.270 ops/s
# Warmup Iteration   9: 4133354.900 ops/s
# Warmup Iteration  10: 4132917.269 ops/s
# Warmup Iteration  11: 4132485.546 ops/s
# Warmup Iteration  12: 4127421.272 ops/s
# Warmup Iteration  13: 4128778.861 ops/s
# Warmup Iteration  14: 4134719.642 ops/s
# Warmup Iteration  15: 4125705.545 ops/s
# Warmup Iteration  16: 4128136.797 ops/s
# Warmup Iteration  17: 4120902.663 ops/s
# Warmup Iteration  18: 4131817.097 ops/s
# Warmup Iteration  19: 4127800.911 ops/s
# Warmup Iteration  20: 4134555.746 ops/s
# Warmup Iteration  21: 4115611.182 ops/s
# Warmup Iteration  22: 4138233.540 ops/s
# Warmup Iteration  23: 4132396.146 ops/s
# Warmup Iteration  24: 4133481.223 ops/s
# Warmup Iteration  25: 4135172.843 ops/s
# Warmup Iteration  26: 4131570.966 ops/s
# Warmup Iteration  27: 4132835.390 ops/s
# Warmup Iteration  28: 4135782.304 ops/s
# Warmup Iteration  29: 4129930.117 ops/s
# Warmup Iteration  30: 4131405.658 ops/s
Iteration   1: 4140253.994 ops/s
Iteration   2: 4127265.927 ops/s
Iteration   3: 4124421.652 ops/s
Iteration   4: 4139327.163 ops/s
Iteration   5: 4126334.207 ops/s
Iteration   6: 4125413.465 ops/s
Iteration   7: 4125052.700 ops/s
Iteration   8: 4127681.909 ops/s
Iteration   9: 4118879.109 ops/s
Iteration  10: 4130557.356 ops/s
Iteration  11: 4126317.553 ops/s
Iteration  12: 4140393.323 ops/s
Iteration  13: 4131519.599 ops/s
Iteration  14: 4126201.519 ops/s
Iteration  15: 4133920.517 ops/s
Iteration  16: 4134957.988 ops/s
Iteration  17: 4129849.497 ops/s
Iteration  18: 4131680.707 ops/s
Iteration  19: 4132914.689 ops/s
Iteration  20: 4135907.300 ops/s
Iteration  21: 4138628.766 ops/s
Iteration  22: 4133685.228 ops/s
Iteration  23: 4136014.959 ops/s
Iteration  24: 4135742.792 ops/s
Iteration  25: 4129359.510 ops/s
Iteration  26: 4128456.247 ops/s
Iteration  27: 4137307.896 ops/s
Iteration  28: 4130387.442 ops/s
Iteration  29: 4128833.911 ops/s
Iteration  30: 4114105.405 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_detectWithIfNone":
  4130712.411 ±(99.9%) 4107.052 ops/s [Average]
  (min, avg, max) = (4114105.405, 4130712.411, 4140393.323), stdev = 6147.243
  CI (99.9%): [4126605.359, 4134819.463] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  4130712.411 ± 4107.052  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_detectWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_detectWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2082994.666 ops/s
# Warmup Iteration   2: 3760511.867 ops/s
# Warmup Iteration   3: 4150287.467 ops/s
# Warmup Iteration   4: 4176985.299 ops/s
# Warmup Iteration   5: 4095067.652 ops/s
# Warmup Iteration   6: 3549898.675 ops/s
# Warmup Iteration   7: 4188681.765 ops/s
# Warmup Iteration   8: 4186913.016 ops/s
# Warmup Iteration   9: 4177437.552 ops/s
# Warmup Iteration  10: 4190161.673 ops/s
# Warmup Iteration  11: 4191373.364 ops/s
# Warmup Iteration  12: 4182618.300 ops/s
# Warmup Iteration  13: 4183765.059 ops/s
# Warmup Iteration  14: 4176935.918 ops/s
# Warmup Iteration  15: 4171347.705 ops/s
# Warmup Iteration  16: 4181153.799 ops/s
# Warmup Iteration  17: 4186754.792 ops/s
# Warmup Iteration  18: 4186058.658 ops/s
# Warmup Iteration  19: 4188438.001 ops/s
# Warmup Iteration  20: 4191279.571 ops/s
# Warmup Iteration  21: 4191089.081 ops/s
# Warmup Iteration  22: 4190629.104 ops/s
# Warmup Iteration  23: 4186452.978 ops/s
# Warmup Iteration  24: 4188827.730 ops/s
# Warmup Iteration  25: 4180336.849 ops/s
# Warmup Iteration  26: 4185859.467 ops/s
# Warmup Iteration  27: 4185186.974 ops/s
# Warmup Iteration  28: 4186927.765 ops/s
# Warmup Iteration  29: 4179940.670 ops/s
# Warmup Iteration  30: 4190906.516 ops/s
Iteration   1: 4186181.659 ops/s
Iteration   2: 4192814.640 ops/s
Iteration   3: 4188769.147 ops/s
Iteration   4: 4194214.250 ops/s
Iteration   5: 4185356.582 ops/s
Iteration   6: 4185854.019 ops/s
Iteration   7: 4192235.128 ops/s
Iteration   8: 4172149.184 ops/s
Iteration   9: 4164562.113 ops/s
Iteration  10: 4181800.532 ops/s
Iteration  11: 4182897.582 ops/s
Iteration  12: 4191404.403 ops/s
Iteration  13: 4181411.184 ops/s
Iteration  14: 4194606.904 ops/s
Iteration  15: 4188607.176 ops/s
Iteration  16: 4192657.575 ops/s
Iteration  17: 4194997.568 ops/s
Iteration  18: 4190522.748 ops/s
Iteration  19: 4197353.117 ops/s
Iteration  20: 4190632.482 ops/s
Iteration  21: 4188141.436 ops/s
Iteration  22: 4193883.245 ops/s
Iteration  23: 4186227.257 ops/s
Iteration  24: 4191908.255 ops/s
Iteration  25: 4184399.550 ops/s
Iteration  26: 4188355.844 ops/s
Iteration  27: 4193814.711 ops/s
Iteration  28: 4188702.298 ops/s
Iteration  29: 4199546.594 ops/s
Iteration  30: 4187737.966 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_detectWithOccurrences":
  4188391.505 ±(99.9%) 4740.485 ops/s [Average]
  (min, avg, max) = (4164562.113, 4188391.505, 4199546.594), stdev = 7095.336
  CI (99.9%): [4183651.020, 4193131.990] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_detectWithOccurrences  thrpt   30  4188391.505 ± 4740.485  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 578146.986 ops/s
# Warmup Iteration   2: 984203.840 ops/s
# Warmup Iteration   3: 1174741.116 ops/s
# Warmup Iteration   4: 1179487.927 ops/s
# Warmup Iteration   5: 1174887.029 ops/s
# Warmup Iteration   6: 1010649.975 ops/s
# Warmup Iteration   7: 1142669.247 ops/s
# Warmup Iteration   8: 1182502.734 ops/s
# Warmup Iteration   9: 1181055.498 ops/s
# Warmup Iteration  10: 1183765.710 ops/s
# Warmup Iteration  11: 1183460.533 ops/s
# Warmup Iteration  12: 1182863.524 ops/s
# Warmup Iteration  13: 1178757.692 ops/s
# Warmup Iteration  14: 1175938.594 ops/s
# Warmup Iteration  15: 1183229.372 ops/s
# Warmup Iteration  16: 1180889.122 ops/s
# Warmup Iteration  17: 1181823.767 ops/s
# Warmup Iteration  18: 1183180.583 ops/s
# Warmup Iteration  19: 1183668.846 ops/s
# Warmup Iteration  20: 1184453.233 ops/s
# Warmup Iteration  21: 1182245.000 ops/s
# Warmup Iteration  22: 1181472.988 ops/s
# Warmup Iteration  23: 1185839.179 ops/s
# Warmup Iteration  24: 1180487.676 ops/s
# Warmup Iteration  25: 1177679.420 ops/s
# Warmup Iteration  26: 1184537.182 ops/s
# Warmup Iteration  27: 1185168.487 ops/s
# Warmup Iteration  28: 1184967.481 ops/s
# Warmup Iteration  29: 1183154.908 ops/s
# Warmup Iteration  30: 1183416.502 ops/s
Iteration   1: 1185669.769 ops/s
Iteration   2: 1182994.184 ops/s
Iteration   3: 1175943.930 ops/s
Iteration   4: 1184072.446 ops/s
Iteration   5: 1185603.427 ops/s
Iteration   6: 1181897.667 ops/s
Iteration   7: 1186090.674 ops/s
Iteration   8: 1183107.070 ops/s
Iteration   9: 1185108.492 ops/s
Iteration  10: 1183331.536 ops/s
Iteration  11: 1184232.750 ops/s
Iteration  12: 1182270.901 ops/s
Iteration  13: 1183895.331 ops/s
Iteration  14: 1181792.288 ops/s
Iteration  15: 1185839.749 ops/s
Iteration  16: 1184124.299 ops/s
Iteration  17: 1185233.658 ops/s
Iteration  18: 1182543.886 ops/s
Iteration  19: 1180907.265 ops/s
Iteration  20: 1184521.874 ops/s
Iteration  21: 1182889.337 ops/s
Iteration  22: 1183924.817 ops/s
Iteration  23: 1184417.212 ops/s
Iteration  24: 1185684.871 ops/s
Iteration  25: 1178938.205 ops/s
Iteration  26: 1185589.665 ops/s
Iteration  27: 1183365.552 ops/s
Iteration  28: 1184470.952 ops/s
Iteration  29: 1184178.843 ops/s
Iteration  30: 1184785.719 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_distinct":
  1183580.879 ±(99.9%) 1445.526 ops/s [Average]
  (min, avg, max) = (1175943.930, 1183580.879, 1186090.674), stdev = 2163.595
  CI (99.9%): [1182135.353, 1185026.405] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_distinct  thrpt   30  1183580.879 ± 1445.526  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_distinctView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_distinctView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1032232.655 ops/s
# Warmup Iteration   2: 2611033.838 ops/s
# Warmup Iteration   3: 2652677.995 ops/s
# Warmup Iteration   4: 2230681.385 ops/s
# Warmup Iteration   5: 2671295.531 ops/s
# Warmup Iteration   6: 2659256.822 ops/s
# Warmup Iteration   7: 2657185.050 ops/s
# Warmup Iteration   8: 2658483.172 ops/s
# Warmup Iteration   9: 2672499.697 ops/s
# Warmup Iteration  10: 2666995.103 ops/s
# Warmup Iteration  11: 2662578.198 ops/s
# Warmup Iteration  12: 2667365.179 ops/s
# Warmup Iteration  13: 2670371.051 ops/s
# Warmup Iteration  14: 2670007.940 ops/s
# Warmup Iteration  15: 2668247.924 ops/s
# Warmup Iteration  16: 2668079.355 ops/s
# Warmup Iteration  17: 2662587.081 ops/s
# Warmup Iteration  18: 2669967.120 ops/s
# Warmup Iteration  19: 2660036.418 ops/s
# Warmup Iteration  20: 2664139.523 ops/s
# Warmup Iteration  21: 2670209.654 ops/s
# Warmup Iteration  22: 2667563.741 ops/s
# Warmup Iteration  23: 2666522.664 ops/s
# Warmup Iteration  24: 2654610.006 ops/s
# Warmup Iteration  25: 2665474.043 ops/s
# Warmup Iteration  26: 2670577.060 ops/s
# Warmup Iteration  27: 2664328.709 ops/s
# Warmup Iteration  28: 2670374.181 ops/s
# Warmup Iteration  29: 2673678.188 ops/s
# Warmup Iteration  30: 2666354.189 ops/s
Iteration   1: 2668182.662 ops/s
Iteration   2: 2665291.871 ops/s
Iteration   3: 2669507.085 ops/s
Iteration   4: 2667678.925 ops/s
Iteration   5: 2669981.281 ops/s
Iteration   6: 2669012.344 ops/s
Iteration   7: 2666147.338 ops/s
Iteration   8: 2672516.309 ops/s
Iteration   9: 2672906.952 ops/s
Iteration  10: 2665236.218 ops/s
Iteration  11: 2671057.512 ops/s
Iteration  12: 2658436.287 ops/s
Iteration  13: 2670637.869 ops/s
Iteration  14: 2679093.196 ops/s
Iteration  15: 2668549.340 ops/s
Iteration  16: 2671253.129 ops/s
Iteration  17: 2668580.622 ops/s
Iteration  18: 2654147.484 ops/s
Iteration  19: 2667408.002 ops/s
Iteration  20: 2675671.099 ops/s
Iteration  21: 2670335.024 ops/s
Iteration  22: 2665318.067 ops/s
Iteration  23: 2671799.145 ops/s
Iteration  24: 2672322.605 ops/s
Iteration  25: 2670833.790 ops/s
Iteration  26: 2668538.863 ops/s
Iteration  27: 2670402.926 ops/s
Iteration  28: 2666551.291 ops/s
Iteration  29: 2668586.552 ops/s
Iteration  30: 2664751.320 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_distinctView":
  2668691.170 ±(99.9%) 3093.940 ops/s [Average]
  (min, avg, max) = (2654147.484, 2668691.170, 2679093.196), stdev = 4630.864
  CI (99.9%): [2665597.230, 2671785.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_distinctView  thrpt   30  2668691.170 ± 3093.940  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 518512.734 ops/s
# Warmup Iteration   2: 1029326.934 ops/s
# Warmup Iteration   3: 1122369.541 ops/s
# Warmup Iteration   4: 1125210.308 ops/s
# Warmup Iteration   5: 935282.455 ops/s
# Warmup Iteration   6: 1129666.447 ops/s
# Warmup Iteration   7: 1129501.711 ops/s
# Warmup Iteration   8: 1129681.136 ops/s
# Warmup Iteration   9: 1130425.712 ops/s
# Warmup Iteration  10: 1129350.606 ops/s
# Warmup Iteration  11: 1127192.155 ops/s
# Warmup Iteration  12: 1128781.123 ops/s
# Warmup Iteration  13: 1127651.799 ops/s
# Warmup Iteration  14: 1129053.769 ops/s
# Warmup Iteration  15: 1130300.096 ops/s
# Warmup Iteration  16: 1128842.018 ops/s
# Warmup Iteration  17: 1127798.011 ops/s
# Warmup Iteration  18: 1129982.197 ops/s
# Warmup Iteration  19: 1127790.045 ops/s
# Warmup Iteration  20: 1129396.016 ops/s
# Warmup Iteration  21: 1128728.454 ops/s
# Warmup Iteration  22: 1129903.072 ops/s
# Warmup Iteration  23: 1129923.316 ops/s
# Warmup Iteration  24: 1124062.953 ops/s
# Warmup Iteration  25: 1129250.397 ops/s
# Warmup Iteration  26: 1130545.801 ops/s
# Warmup Iteration  27: 1129708.638 ops/s
# Warmup Iteration  28: 1130418.194 ops/s
# Warmup Iteration  29: 1130130.902 ops/s
# Warmup Iteration  30: 1129248.717 ops/s
Iteration   1: 1131727.837 ops/s
Iteration   2: 1131396.829 ops/s
Iteration   3: 1127675.783 ops/s
Iteration   4: 1125660.406 ops/s
Iteration   5: 1122466.698 ops/s
Iteration   6: 1120885.721 ops/s
Iteration   7: 1122153.410 ops/s
Iteration   8: 1127162.967 ops/s
Iteration   9: 1124211.980 ops/s
Iteration  10: 1126395.091 ops/s
Iteration  11: 1127123.045 ops/s
Iteration  12: 1127971.529 ops/s
Iteration  13: 1128360.995 ops/s
Iteration  14: 1124875.333 ops/s
Iteration  15: 1125937.148 ops/s
Iteration  16: 1129068.024 ops/s
Iteration  17: 1130831.188 ops/s
Iteration  18: 1127866.380 ops/s
Iteration  19: 1128663.597 ops/s
Iteration  20: 1130478.385 ops/s
Iteration  21: 1128331.090 ops/s
Iteration  22: 1128382.103 ops/s
Iteration  23: 1131390.033 ops/s
Iteration  24: 1129770.508 ops/s
Iteration  25: 1130493.270 ops/s
Iteration  26: 1131583.319 ops/s
Iteration  27: 1129570.249 ops/s
Iteration  28: 1130038.130 ops/s
Iteration  29: 1130870.864 ops/s
Iteration  30: 1128048.535 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_drop":
  1127979.682 ±(99.9%) 1936.054 ops/s [Average]
  (min, avg, max) = (1120885.721, 1127979.682, 1131727.837), stdev = 2897.795
  CI (99.9%): [1126043.628, 1129915.736] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_drop  thrpt   30  1127979.682 ± 1936.054  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 903656.542 ops/s
# Warmup Iteration   2: 1772188.295 ops/s
# Warmup Iteration   3: 1951373.222 ops/s
# Warmup Iteration   4: 1967561.680 ops/s
# Warmup Iteration   5: 1630524.163 ops/s
# Warmup Iteration   6: 1971992.519 ops/s
# Warmup Iteration   7: 1965705.424 ops/s
# Warmup Iteration   8: 1967811.493 ops/s
# Warmup Iteration   9: 1966746.509 ops/s
# Warmup Iteration  10: 1967582.159 ops/s
# Warmup Iteration  11: 1969762.394 ops/s
# Warmup Iteration  12: 1967810.166 ops/s
# Warmup Iteration  13: 1970034.691 ops/s
# Warmup Iteration  14: 1969880.809 ops/s
# Warmup Iteration  15: 1967550.713 ops/s
# Warmup Iteration  16: 1968105.167 ops/s
# Warmup Iteration  17: 1967957.034 ops/s
# Warmup Iteration  18: 1962798.883 ops/s
# Warmup Iteration  19: 1967457.562 ops/s
# Warmup Iteration  20: 1968320.431 ops/s
# Warmup Iteration  21: 1968026.120 ops/s
# Warmup Iteration  22: 1969574.666 ops/s
# Warmup Iteration  23: 1967291.272 ops/s
# Warmup Iteration  24: 1968531.421 ops/s
# Warmup Iteration  25: 1970631.409 ops/s
# Warmup Iteration  26: 1969118.787 ops/s
# Warmup Iteration  27: 1966022.791 ops/s
# Warmup Iteration  28: 1969357.026 ops/s
# Warmup Iteration  29: 1966014.488 ops/s
# Warmup Iteration  30: 1966467.042 ops/s
Iteration   1: 1969528.760 ops/s
Iteration   2: 1967559.848 ops/s
Iteration   3: 1968184.756 ops/s
Iteration   4: 1966230.350 ops/s
Iteration   5: 1969861.174 ops/s
Iteration   6: 1969553.072 ops/s
Iteration   7: 1966918.034 ops/s
Iteration   8: 1968687.062 ops/s
Iteration   9: 1971639.445 ops/s
Iteration  10: 1966846.337 ops/s
Iteration  11: 1966010.786 ops/s
Iteration  12: 1970923.907 ops/s
Iteration  13: 1970579.710 ops/s
Iteration  14: 1968032.137 ops/s
Iteration  15: 1970940.123 ops/s
Iteration  16: 1962135.597 ops/s
Iteration  17: 1957834.227 ops/s
Iteration  18: 1970052.400 ops/s
Iteration  19: 1968225.918 ops/s
Iteration  20: 1972138.884 ops/s
Iteration  21: 1970497.491 ops/s
Iteration  22: 1969272.348 ops/s
Iteration  23: 1971875.157 ops/s
Iteration  24: 1969910.487 ops/s
Iteration  25: 1968887.889 ops/s
Iteration  26: 1971618.380 ops/s
Iteration  27: 1967524.282 ops/s
Iteration  28: 1969828.560 ops/s
Iteration  29: 1971215.236 ops/s
Iteration  30: 1969917.727 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_dropWhile":
  1968747.670 ±(99.9%) 1984.836 ops/s [Average]
  (min, avg, max) = (1957834.227, 1968747.670, 1972138.884), stdev = 2970.809
  CI (99.9%): [1966762.834, 1970732.505] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_dropWhile  thrpt   30  1968747.670 ± 1984.836  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 501238.941 ops/s
# Warmup Iteration   2: 568490.518 ops/s
# Warmup Iteration   3: 753392.649 ops/s
# Warmup Iteration   4: 752598.422 ops/s
# Warmup Iteration   5: 749076.346 ops/s
# Warmup Iteration   6: 753141.947 ops/s
# Warmup Iteration   7: 755032.612 ops/s
# Warmup Iteration   8: 753008.975 ops/s
# Warmup Iteration   9: 753534.488 ops/s
# Warmup Iteration  10: 732235.424 ops/s
# Warmup Iteration  11: 650385.313 ops/s
# Warmup Iteration  12: 750738.568 ops/s
# Warmup Iteration  13: 752312.683 ops/s
# Warmup Iteration  14: 753666.111 ops/s
# Warmup Iteration  15: 752140.675 ops/s
# Warmup Iteration  16: 751469.611 ops/s
# Warmup Iteration  17: 791197.353 ops/s
# Warmup Iteration  18: 788817.266 ops/s
# Warmup Iteration  19: 790390.593 ops/s
# Warmup Iteration  20: 789143.551 ops/s
# Warmup Iteration  21: 789151.075 ops/s
# Warmup Iteration  22: 789893.624 ops/s
# Warmup Iteration  23: 789965.593 ops/s
# Warmup Iteration  24: 791414.062 ops/s
# Warmup Iteration  25: 786503.298 ops/s
# Warmup Iteration  26: 787455.583 ops/s
# Warmup Iteration  27: 787606.326 ops/s
# Warmup Iteration  28: 788603.711 ops/s
# Warmup Iteration  29: 790558.322 ops/s
# Warmup Iteration  30: 789721.494 ops/s
Iteration   1: 790066.360 ops/s
Iteration   2: 790293.177 ops/s
Iteration   3: 788620.816 ops/s
Iteration   4: 789956.619 ops/s
Iteration   5: 791992.200 ops/s
Iteration   6: 789337.500 ops/s
Iteration   7: 789593.574 ops/s
Iteration   8: 790839.759 ops/s
Iteration   9: 791965.371 ops/s
Iteration  10: 789453.073 ops/s
Iteration  11: 792092.829 ops/s
Iteration  12: 789393.920 ops/s
Iteration  13: 788448.923 ops/s
Iteration  14: 789640.233 ops/s
Iteration  15: 791834.487 ops/s
Iteration  16: 790218.600 ops/s
Iteration  17: 788286.379 ops/s
Iteration  18: 789332.774 ops/s
Iteration  19: 790612.356 ops/s
Iteration  20: 786302.278 ops/s
Iteration  21: 789021.985 ops/s
Iteration  22: 788834.358 ops/s
Iteration  23: 789207.087 ops/s
Iteration  24: 788834.021 ops/s
Iteration  25: 787878.935 ops/s
Iteration  26: 787280.238 ops/s
Iteration  27: 789844.718 ops/s
Iteration  28: 791782.983 ops/s
Iteration  29: 791988.248 ops/s
Iteration  30: 789165.064 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_drop_throws":
  789737.295 ±(99.9%) 973.280 ops/s [Average]
  (min, avg, max) = (786302.278, 789737.295, 792092.829), stdev = 1456.759
  CI (99.9%): [788764.016, 790710.575] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_drop_throws  thrpt   30  789737.295 ± 973.280  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 42513.537 ops/s
# Warmup Iteration   2: 68716.622 ops/s
# Warmup Iteration   3: 95189.467 ops/s
# Warmup Iteration   4: 94585.872 ops/s
# Warmup Iteration   5: 95494.516 ops/s
# Warmup Iteration   6: 95456.924 ops/s
# Warmup Iteration   7: 95509.709 ops/s
# Warmup Iteration   8: 81344.690 ops/s
# Warmup Iteration   9: 95166.651 ops/s
# Warmup Iteration  10: 95388.941 ops/s
# Warmup Iteration  11: 95194.470 ops/s
# Warmup Iteration  12: 95134.900 ops/s
# Warmup Iteration  13: 95391.718 ops/s
# Warmup Iteration  14: 95382.769 ops/s
# Warmup Iteration  15: 94954.071 ops/s
# Warmup Iteration  16: 95256.880 ops/s
# Warmup Iteration  17: 95690.440 ops/s
# Warmup Iteration  18: 95347.579 ops/s
# Warmup Iteration  19: 95511.951 ops/s
# Warmup Iteration  20: 95315.691 ops/s
# Warmup Iteration  21: 95217.579 ops/s
# Warmup Iteration  22: 95372.322 ops/s
# Warmup Iteration  23: 95579.566 ops/s
# Warmup Iteration  24: 95669.707 ops/s
# Warmup Iteration  25: 95762.008 ops/s
# Warmup Iteration  26: 95674.749 ops/s
# Warmup Iteration  27: 95696.684 ops/s
# Warmup Iteration  28: 95414.793 ops/s
# Warmup Iteration  29: 95222.529 ops/s
# Warmup Iteration  30: 95109.351 ops/s
Iteration   1: 95732.508 ops/s
Iteration   2: 95409.809 ops/s
Iteration   3: 95355.308 ops/s
Iteration   4: 95471.565 ops/s
Iteration   5: 95123.991 ops/s
Iteration   6: 95514.087 ops/s
Iteration   7: 95636.058 ops/s
Iteration   8: 95377.575 ops/s
Iteration   9: 95723.281 ops/s
Iteration  10: 95505.584 ops/s
Iteration  11: 95200.181 ops/s
Iteration  12: 95398.217 ops/s
Iteration  13: 95216.420 ops/s
Iteration  14: 95665.563 ops/s
Iteration  15: 95261.075 ops/s
Iteration  16: 96008.319 ops/s
Iteration  17: 96082.528 ops/s
Iteration  18: 95995.415 ops/s
Iteration  19: 96170.434 ops/s
Iteration  20: 96044.939 ops/s
Iteration  21: 96121.719 ops/s
Iteration  22: 95400.733 ops/s
Iteration  23: 95551.496 ops/s
Iteration  24: 95564.593 ops/s
Iteration  25: 96414.168 ops/s
Iteration  26: 95827.043 ops/s
Iteration  27: 95730.053 ops/s
Iteration  28: 95911.516 ops/s
Iteration  29: 96122.408 ops/s
Iteration  30: 96117.710 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_equalsAndHashCode":
  95688.477 ±(99.9%) 229.942 ops/s [Average]
  (min, avg, max) = (95123.991, 95688.477, 96414.168), stdev = 344.167
  CI (99.9%): [95458.534, 95918.419] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt      Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  95688.477 ± 229.942  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 586048.832 ops/s
# Warmup Iteration   2: 1131605.596 ops/s
# Warmup Iteration   3: 1243589.413 ops/s
# Warmup Iteration   4: 1254020.615 ops/s
# Warmup Iteration   5: 1090681.255 ops/s
# Warmup Iteration   6: 1205499.945 ops/s
# Warmup Iteration   7: 1254506.165 ops/s
# Warmup Iteration   8: 1254355.535 ops/s
# Warmup Iteration   9: 1254468.858 ops/s
# Warmup Iteration  10: 1255275.946 ops/s
# Warmup Iteration  11: 1252428.350 ops/s
# Warmup Iteration  12: 1256028.533 ops/s
# Warmup Iteration  13: 1256029.930 ops/s
# Warmup Iteration  14: 1256018.645 ops/s
# Warmup Iteration  15: 1255768.453 ops/s
# Warmup Iteration  16: 1255612.246 ops/s
# Warmup Iteration  17: 1255830.762 ops/s
# Warmup Iteration  18: 1255675.444 ops/s
# Warmup Iteration  19: 1258092.960 ops/s
# Warmup Iteration  20: 1255470.601 ops/s
# Warmup Iteration  21: 1256383.935 ops/s
# Warmup Iteration  22: 1256827.058 ops/s
# Warmup Iteration  23: 1254007.811 ops/s
# Warmup Iteration  24: 1256016.112 ops/s
# Warmup Iteration  25: 1257017.760 ops/s
# Warmup Iteration  26: 1254069.600 ops/s
# Warmup Iteration  27: 1250646.936 ops/s
# Warmup Iteration  28: 1253905.037 ops/s
# Warmup Iteration  29: 1255079.139 ops/s
# Warmup Iteration  30: 1257864.862 ops/s
Iteration   1: 1256466.137 ops/s
Iteration   2: 1257280.257 ops/s
Iteration   3: 1259434.578 ops/s
Iteration   4: 1256920.915 ops/s
Iteration   5: 1259847.373 ops/s
Iteration   6: 1257172.630 ops/s
Iteration   7: 1258536.869 ops/s
Iteration   8: 1257591.394 ops/s
Iteration   9: 1255222.342 ops/s
Iteration  10: 1255529.571 ops/s
Iteration  11: 1259191.843 ops/s
Iteration  12: 1254881.638 ops/s
Iteration  13: 1256954.324 ops/s
Iteration  14: 1253839.704 ops/s
Iteration  15: 1252798.849 ops/s
Iteration  16: 1258412.789 ops/s
Iteration  17: 1253204.998 ops/s
Iteration  18: 1253336.492 ops/s
Iteration  19: 1256687.622 ops/s
Iteration  20: 1255904.797 ops/s
Iteration  21: 1254841.065 ops/s
Iteration  22: 1256913.723 ops/s
Iteration  23: 1252769.992 ops/s
Iteration  24: 1256566.976 ops/s
Iteration  25: 1259023.808 ops/s
Iteration  26: 1253766.591 ops/s
Iteration  27: 1258980.957 ops/s
Iteration  28: 1256340.758 ops/s
Iteration  29: 1255841.678 ops/s
Iteration  30: 1254173.243 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_flatCollect":
  1256281.130 ±(99.9%) 1392.648 ops/s [Average]
  (min, avg, max) = (1252769.992, 1256281.130, 1259847.373), stdev = 2084.450
  CI (99.9%): [1254888.483, 1257673.778] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_flatCollect  thrpt   30  1256281.130 ± 1392.648  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 589003.482 ops/s
# Warmup Iteration   2: 1107437.213 ops/s
# Warmup Iteration   3: 1258898.747 ops/s
# Warmup Iteration   4: 1257044.617 ops/s
# Warmup Iteration   5: 1211352.115 ops/s
# Warmup Iteration   6: 1085690.771 ops/s
# Warmup Iteration   7: 1255971.375 ops/s
# Warmup Iteration   8: 1256511.781 ops/s
# Warmup Iteration   9: 1259088.456 ops/s
# Warmup Iteration  10: 1260976.482 ops/s
# Warmup Iteration  11: 1259760.786 ops/s
# Warmup Iteration  12: 1259416.336 ops/s
# Warmup Iteration  13: 1257132.931 ops/s
# Warmup Iteration  14: 1256333.448 ops/s
# Warmup Iteration  15: 1257111.769 ops/s
# Warmup Iteration  16: 1255923.166 ops/s
# Warmup Iteration  17: 1257402.899 ops/s
# Warmup Iteration  18: 1260482.316 ops/s
# Warmup Iteration  19: 1262770.494 ops/s
# Warmup Iteration  20: 1257385.781 ops/s
# Warmup Iteration  21: 1256968.376 ops/s
# Warmup Iteration  22: 1259005.434 ops/s
# Warmup Iteration  23: 1258810.667 ops/s
# Warmup Iteration  24: 1258952.528 ops/s
# Warmup Iteration  25: 1253540.102 ops/s
# Warmup Iteration  26: 1258485.676 ops/s
# Warmup Iteration  27: 1257448.132 ops/s
# Warmup Iteration  28: 1254372.896 ops/s
# Warmup Iteration  29: 1259207.222 ops/s
# Warmup Iteration  30: 1258402.278 ops/s
Iteration   1: 1259799.520 ops/s
Iteration   2: 1256745.468 ops/s
Iteration   3: 1258769.269 ops/s
Iteration   4: 1258671.652 ops/s
Iteration   5: 1257836.057 ops/s
Iteration   6: 1254564.477 ops/s
Iteration   7: 1255017.863 ops/s
Iteration   8: 1254247.354 ops/s
Iteration   9: 1258423.849 ops/s
Iteration  10: 1256659.578 ops/s
Iteration  11: 1258642.466 ops/s
Iteration  12: 1257573.869 ops/s
Iteration  13: 1257109.512 ops/s
Iteration  14: 1260872.468 ops/s
Iteration  15: 1259215.291 ops/s
Iteration  16: 1259817.072 ops/s
Iteration  17: 1258363.433 ops/s
Iteration  18: 1259684.131 ops/s
Iteration  19: 1259782.135 ops/s
Iteration  20: 1256970.494 ops/s
Iteration  21: 1261505.452 ops/s
Iteration  22: 1258780.780 ops/s
Iteration  23: 1256930.934 ops/s
Iteration  24: 1258943.692 ops/s
Iteration  25: 1257067.845 ops/s
Iteration  26: 1258770.940 ops/s
Iteration  27: 1257818.632 ops/s
Iteration  28: 1259597.232 ops/s
Iteration  29: 1258796.437 ops/s
Iteration  30: 1259488.347 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_flatCollectWith":
  1258215.542 ±(99.9%) 1141.754 ops/s [Average]
  (min, avg, max) = (1254247.354, 1258215.542, 1261505.452), stdev = 1708.924
  CI (99.9%): [1257073.787, 1259357.296] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_flatCollectWith  thrpt   30  1258215.542 ± 1141.754  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_flatCollectWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_flatCollectWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 480051.407 ops/s
# Warmup Iteration   2: 931639.646 ops/s
# Warmup Iteration   3: 1068307.544 ops/s
# Warmup Iteration   4: 1071543.667 ops/s
# Warmup Iteration   5: 1065935.472 ops/s
# Warmup Iteration   6: 901203.438 ops/s
# Warmup Iteration   7: 1075673.112 ops/s
# Warmup Iteration   8: 1075789.893 ops/s
# Warmup Iteration   9: 1074427.196 ops/s
# Warmup Iteration  10: 1075654.678 ops/s
# Warmup Iteration  11: 1075182.606 ops/s
# Warmup Iteration  12: 1072734.473 ops/s
# Warmup Iteration  13: 1076282.837 ops/s
# Warmup Iteration  14: 1074994.818 ops/s
# Warmup Iteration  15: 1074235.684 ops/s
# Warmup Iteration  16: 1074920.545 ops/s
# Warmup Iteration  17: 1083614.978 ops/s
# Warmup Iteration  18: 1083136.922 ops/s
# Warmup Iteration  19: 1086252.570 ops/s
# Warmup Iteration  20: 1084177.660 ops/s
# Warmup Iteration  21: 1082643.842 ops/s
# Warmup Iteration  22: 1081435.787 ops/s
# Warmup Iteration  23: 1084456.580 ops/s
# Warmup Iteration  24: 1082973.274 ops/s
# Warmup Iteration  25: 1084926.275 ops/s
# Warmup Iteration  26: 1084276.398 ops/s
# Warmup Iteration  27: 1081756.563 ops/s
# Warmup Iteration  28: 1084037.570 ops/s
# Warmup Iteration  29: 1085008.151 ops/s
# Warmup Iteration  30: 1083231.295 ops/s
Iteration   1: 1080191.197 ops/s
Iteration   2: 1084517.495 ops/s
Iteration   3: 1085805.088 ops/s
Iteration   4: 1083867.197 ops/s
Iteration   5: 1084778.953 ops/s
Iteration   6: 1086211.016 ops/s
Iteration   7: 1086234.733 ops/s
Iteration   8: 1083471.891 ops/s
Iteration   9: 1081006.417 ops/s
Iteration  10: 1083308.864 ops/s
Iteration  11: 1083484.530 ops/s
Iteration  12: 1079831.917 ops/s
Iteration  13: 1082579.501 ops/s
Iteration  14: 1084064.279 ops/s
Iteration  15: 1084648.313 ops/s
Iteration  16: 1083632.714 ops/s
Iteration  17: 1084460.390 ops/s
Iteration  18: 1085968.241 ops/s
Iteration  19: 1084356.356 ops/s
Iteration  20: 1080963.329 ops/s
Iteration  21: 1084295.918 ops/s
Iteration  22: 1083939.412 ops/s
Iteration  23: 1083914.433 ops/s
Iteration  24: 1085886.832 ops/s
Iteration  25: 1084276.393 ops/s
Iteration  26: 1085910.055 ops/s
Iteration  27: 1084548.410 ops/s
Iteration  28: 1083621.409 ops/s
Iteration  29: 1080318.479 ops/s
Iteration  30: 1079941.278 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_flatCollectWithTarget":
  1083667.835 ±(99.9%) 1280.056 ops/s [Average]
  (min, avg, max) = (1079831.917, 1083667.835, 1086234.733), stdev = 1915.928
  CI (99.9%): [1082387.778, 1084947.891] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_flatCollectWithTarget  thrpt   30  1083667.835 ± 1280.056  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1264513.936 ops/s
# Warmup Iteration   2: 2353727.048 ops/s
# Warmup Iteration   3: 2649671.355 ops/s
# Warmup Iteration   4: 2660495.957 ops/s
# Warmup Iteration   5: 2659382.611 ops/s
# Warmup Iteration   6: 2205361.163 ops/s
# Warmup Iteration   7: 2658131.426 ops/s
# Warmup Iteration   8: 2659954.690 ops/s
# Warmup Iteration   9: 2660297.170 ops/s
# Warmup Iteration  10: 2659807.035 ops/s
# Warmup Iteration  11: 2659084.719 ops/s
# Warmup Iteration  12: 2643092.910 ops/s
# Warmup Iteration  13: 2658136.750 ops/s
# Warmup Iteration  14: 2659084.054 ops/s
# Warmup Iteration  15: 2655708.362 ops/s
# Warmup Iteration  16: 2659903.377 ops/s
# Warmup Iteration  17: 2654648.530 ops/s
# Warmup Iteration  18: 2661676.186 ops/s
# Warmup Iteration  19: 2658873.064 ops/s
# Warmup Iteration  20: 2661826.993 ops/s
# Warmup Iteration  21: 2664521.465 ops/s
# Warmup Iteration  22: 2658702.438 ops/s
# Warmup Iteration  23: 2651181.523 ops/s
# Warmup Iteration  24: 2664204.198 ops/s
# Warmup Iteration  25: 2660168.735 ops/s
# Warmup Iteration  26: 2659944.779 ops/s
# Warmup Iteration  27: 2661602.293 ops/s
# Warmup Iteration  28: 2650492.700 ops/s
# Warmup Iteration  29: 2646680.696 ops/s
# Warmup Iteration  30: 2664109.203 ops/s
Iteration   1: 2667821.225 ops/s
Iteration   2: 2662705.780 ops/s
Iteration   3: 2664028.403 ops/s
Iteration   4: 2664870.984 ops/s
Iteration   5: 2661695.600 ops/s
Iteration   6: 2668543.596 ops/s
Iteration   7: 2660766.932 ops/s
Iteration   8: 2657427.819 ops/s
Iteration   9: 2662527.527 ops/s
Iteration  10: 2663262.631 ops/s
Iteration  11: 2662556.233 ops/s
Iteration  12: 2656220.216 ops/s
Iteration  13: 2655651.652 ops/s
Iteration  14: 2658948.950 ops/s
Iteration  15: 2657569.668 ops/s
Iteration  16: 2665809.177 ops/s
Iteration  17: 2657855.173 ops/s
Iteration  18: 2659182.282 ops/s
Iteration  19: 2663331.184 ops/s
Iteration  20: 2648789.785 ops/s
Iteration  21: 2656813.849 ops/s
Iteration  22: 2662455.203 ops/s
Iteration  23: 2661314.683 ops/s
Iteration  24: 2655559.714 ops/s
Iteration  25: 2646938.210 ops/s
Iteration  26: 2647360.636 ops/s
Iteration  27: 2636754.305 ops/s
Iteration  28: 2635814.807 ops/s
Iteration  29: 2651655.484 ops/s
Iteration  30: 2650178.388 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_forEach":
  2657480.337 ±(99.9%) 5407.862 ops/s [Average]
  (min, avg, max) = (2635814.807, 2657480.337, 2668543.596), stdev = 8094.234
  CI (99.9%): [2652072.474, 2662888.199] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_forEach  thrpt   30  2657480.337 ± 5407.862  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 126272.660 ops/s
# Warmup Iteration   2: 146818.909 ops/s
# Warmup Iteration   3: 191355.756 ops/s
# Warmup Iteration   4: 198132.816 ops/s
# Warmup Iteration   5: 197949.214 ops/s
# Warmup Iteration   6: 196711.118 ops/s
# Warmup Iteration   7: 197466.396 ops/s
# Warmup Iteration   8: 197522.711 ops/s
# Warmup Iteration   9: 197409.378 ops/s
# Warmup Iteration  10: 197408.274 ops/s
# Warmup Iteration  11: 198140.114 ops/s
# Warmup Iteration  12: 164812.093 ops/s
# Warmup Iteration  13: 198428.013 ops/s
# Warmup Iteration  14: 198121.080 ops/s
# Warmup Iteration  15: 198223.505 ops/s
# Warmup Iteration  16: 197876.239 ops/s
# Warmup Iteration  17: 204448.038 ops/s
# Warmup Iteration  18: 204549.100 ops/s
# Warmup Iteration  19: 204246.641 ops/s
# Warmup Iteration  20: 203653.883 ops/s
# Warmup Iteration  21: 204223.364 ops/s
# Warmup Iteration  22: 204069.881 ops/s
# Warmup Iteration  23: 204442.858 ops/s
# Warmup Iteration  24: 204148.903 ops/s
# Warmup Iteration  25: 204092.084 ops/s
# Warmup Iteration  26: 204258.496 ops/s
# Warmup Iteration  27: 204430.873 ops/s
# Warmup Iteration  28: 204124.398 ops/s
# Warmup Iteration  29: 204596.657 ops/s
# Warmup Iteration  30: 204239.353 ops/s
Iteration   1: 204558.912 ops/s
Iteration   2: 203782.702 ops/s
Iteration   3: 202742.759 ops/s
Iteration   4: 203265.580 ops/s
Iteration   5: 203700.193 ops/s
Iteration   6: 204548.748 ops/s
Iteration   7: 204025.352 ops/s
Iteration   8: 203910.115 ops/s
Iteration   9: 204434.016 ops/s
Iteration  10: 204456.522 ops/s
Iteration  11: 204278.030 ops/s
Iteration  12: 204382.688 ops/s
Iteration  13: 203762.632 ops/s
Iteration  14: 204121.028 ops/s
Iteration  15: 204129.621 ops/s
Iteration  16: 204260.175 ops/s
Iteration  17: 203741.960 ops/s
Iteration  18: 202719.017 ops/s
Iteration  19: 204363.438 ops/s
Iteration  20: 203793.724 ops/s
Iteration  21: 204617.577 ops/s
Iteration  22: 204149.812 ops/s
Iteration  23: 204670.708 ops/s
Iteration  24: 204876.633 ops/s
Iteration  25: 204394.721 ops/s
Iteration  26: 203798.833 ops/s
Iteration  27: 204790.840 ops/s
Iteration  28: 204485.836 ops/s
Iteration  29: 204453.559 ops/s
Iteration  30: 204047.570 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_forEachFromTo":
  204108.777 ±(99.9%) 352.452 ops/s [Average]
  (min, avg, max) = (202719.017, 204108.777, 204876.633), stdev = 527.533
  CI (99.9%): [203756.325, 204461.228] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_forEachFromTo  thrpt   30  204108.777 ± 352.452  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1317026.633 ops/s
# Warmup Iteration   2: 2706462.275 ops/s
# Warmup Iteration   3: 2966701.964 ops/s
# Warmup Iteration   4: 2976852.830 ops/s
# Warmup Iteration   5: 2467881.774 ops/s
# Warmup Iteration   6: 2979607.548 ops/s
# Warmup Iteration   7: 2983195.598 ops/s
# Warmup Iteration   8: 2982667.821 ops/s
# Warmup Iteration   9: 2980464.295 ops/s
# Warmup Iteration  10: 2984720.471 ops/s
# Warmup Iteration  11: 2979121.808 ops/s
# Warmup Iteration  12: 2982820.019 ops/s
# Warmup Iteration  13: 2981715.261 ops/s
# Warmup Iteration  14: 2982015.724 ops/s
# Warmup Iteration  15: 2983772.712 ops/s
# Warmup Iteration  16: 2982700.937 ops/s
# Warmup Iteration  17: 2979879.660 ops/s
# Warmup Iteration  18: 2977272.182 ops/s
# Warmup Iteration  19: 2975961.867 ops/s
# Warmup Iteration  20: 2978828.279 ops/s
# Warmup Iteration  21: 2976970.217 ops/s
# Warmup Iteration  22: 2977593.241 ops/s
# Warmup Iteration  23: 2979226.342 ops/s
# Warmup Iteration  24: 2978626.377 ops/s
# Warmup Iteration  25: 2980390.750 ops/s
# Warmup Iteration  26: 2982695.227 ops/s
# Warmup Iteration  27: 2981846.631 ops/s
# Warmup Iteration  28: 2977441.900 ops/s
# Warmup Iteration  29: 2977571.019 ops/s
# Warmup Iteration  30: 2981690.574 ops/s
Iteration   1: 2982171.220 ops/s
Iteration   2: 2982530.900 ops/s
Iteration   3: 2978573.178 ops/s
Iteration   4: 2982763.449 ops/s
Iteration   5: 2979125.273 ops/s
Iteration   6: 2983450.303 ops/s
Iteration   7: 2980830.700 ops/s
Iteration   8: 2977642.767 ops/s
Iteration   9: 2976302.088 ops/s
Iteration  10: 2979203.262 ops/s
Iteration  11: 2982647.939 ops/s
Iteration  12: 2986576.404 ops/s
Iteration  13: 2974354.340 ops/s
Iteration  14: 2971177.354 ops/s
Iteration  15: 2976891.061 ops/s
Iteration  16: 2976813.069 ops/s
Iteration  17: 2978343.748 ops/s
Iteration  18: 2981697.594 ops/s
Iteration  19: 2982725.930 ops/s
Iteration  20: 2976727.762 ops/s
Iteration  21: 2976390.529 ops/s
Iteration  22: 2982549.945 ops/s
Iteration  23: 2980209.354 ops/s
Iteration  24: 2982032.534 ops/s
Iteration  25: 2981945.942 ops/s
Iteration  26: 2983969.005 ops/s
Iteration  27: 2980025.657 ops/s
Iteration  28: 2982489.144 ops/s
Iteration  29: 2984629.510 ops/s
Iteration  30: 2975927.025 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_forEachWith":
  2980023.900 ±(99.9%) 2304.488 ops/s [Average]
  (min, avg, max) = (2971177.354, 2980023.900, 2986576.404), stdev = 3449.250
  CI (99.9%): [2977719.411, 2982328.388] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_forEachWith  thrpt   30  2980023.900 ± 2304.488  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1397889.008 ops/s
# Warmup Iteration   2: 2838948.115 ops/s
# Warmup Iteration   3: 3135531.899 ops/s
# Warmup Iteration   4: 3157339.195 ops/s
# Warmup Iteration   5: 2629328.534 ops/s
# Warmup Iteration   6: 3175679.542 ops/s
# Warmup Iteration   7: 3166361.411 ops/s
# Warmup Iteration   8: 3173877.242 ops/s
# Warmup Iteration   9: 3171002.335 ops/s
# Warmup Iteration  10: 3171437.031 ops/s
# Warmup Iteration  11: 3172495.128 ops/s
# Warmup Iteration  12: 3165931.517 ops/s
# Warmup Iteration  13: 3172521.880 ops/s
# Warmup Iteration  14: 3171570.997 ops/s
# Warmup Iteration  15: 3171330.337 ops/s
# Warmup Iteration  16: 3172136.952 ops/s
# Warmup Iteration  17: 3184676.669 ops/s
# Warmup Iteration  18: 3185481.097 ops/s
# Warmup Iteration  19: 3182497.115 ops/s
# Warmup Iteration  20: 3189240.660 ops/s
# Warmup Iteration  21: 3189432.682 ops/s
# Warmup Iteration  22: 3184797.133 ops/s
# Warmup Iteration  23: 3189428.457 ops/s
# Warmup Iteration  24: 3177257.231 ops/s
# Warmup Iteration  25: 3188690.189 ops/s
# Warmup Iteration  26: 3188205.867 ops/s
# Warmup Iteration  27: 3188718.583 ops/s
# Warmup Iteration  28: 3189655.969 ops/s
# Warmup Iteration  29: 3182387.020 ops/s
# Warmup Iteration  30: 3191207.783 ops/s
Iteration   1: 3185781.839 ops/s
Iteration   2: 3179827.163 ops/s
Iteration   3: 3180226.073 ops/s
Iteration   4: 3183603.559 ops/s
Iteration   5: 3174534.595 ops/s
Iteration   6: 3184614.763 ops/s
Iteration   7: 3184344.674 ops/s
Iteration   8: 3179276.167 ops/s
Iteration   9: 3191841.662 ops/s
Iteration  10: 3186230.810 ops/s
Iteration  11: 3186110.277 ops/s
Iteration  12: 3185972.329 ops/s
Iteration  13: 3188039.194 ops/s
Iteration  14: 3185928.507 ops/s
Iteration  15: 3187919.323 ops/s
Iteration  16: 3190010.724 ops/s
Iteration  17: 3183455.848 ops/s
Iteration  18: 3178398.676 ops/s
Iteration  19: 3195904.621 ops/s
Iteration  20: 3181320.612 ops/s
Iteration  21: 3179495.379 ops/s
Iteration  22: 3189915.277 ops/s
Iteration  23: 3195031.008 ops/s
Iteration  24: 3182486.101 ops/s
Iteration  25: 3186879.762 ops/s
Iteration  26: 3196202.051 ops/s
Iteration  27: 3182506.629 ops/s
Iteration  28: 3186700.656 ops/s
Iteration  29: 3189896.519 ops/s
Iteration  30: 3192817.743 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_forEachWithIndex":
  3185842.418 ±(99.9%) 3576.333 ops/s [Average]
  (min, avg, max) = (3174534.595, 3185842.418, 3196202.051), stdev = 5352.887
  CI (99.9%): [3182266.085, 3189418.751] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  3185842.418 ± 3576.333  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_forEachWithIndexWithFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_forEachWithIndexWithFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 117640.702 ops/s
# Warmup Iteration   2: 135172.150 ops/s
# Warmup Iteration   3: 187372.918 ops/s
# Warmup Iteration   4: 187492.186 ops/s
# Warmup Iteration   5: 186389.030 ops/s
# Warmup Iteration   6: 187563.856 ops/s
# Warmup Iteration   7: 187414.113 ops/s
# Warmup Iteration   8: 187408.482 ops/s
# Warmup Iteration   9: 187098.869 ops/s
# Warmup Iteration  10: 187044.874 ops/s
# Warmup Iteration  11: 155638.896 ops/s
# Warmup Iteration  12: 187415.906 ops/s
# Warmup Iteration  13: 187262.035 ops/s
# Warmup Iteration  14: 187687.912 ops/s
# Warmup Iteration  15: 187215.069 ops/s
# Warmup Iteration  16: 187472.148 ops/s
# Warmup Iteration  17: 193773.124 ops/s
# Warmup Iteration  18: 194077.723 ops/s
# Warmup Iteration  19: 193674.513 ops/s
# Warmup Iteration  20: 193998.512 ops/s
# Warmup Iteration  21: 194295.431 ops/s
# Warmup Iteration  22: 194122.739 ops/s
# Warmup Iteration  23: 193279.049 ops/s
# Warmup Iteration  24: 192668.662 ops/s
# Warmup Iteration  25: 193199.566 ops/s
# Warmup Iteration  26: 193859.711 ops/s
# Warmup Iteration  27: 193899.024 ops/s
# Warmup Iteration  28: 193866.460 ops/s
# Warmup Iteration  29: 193324.341 ops/s
# Warmup Iteration  30: 194481.727 ops/s
Iteration   1: 193855.162 ops/s
Iteration   2: 194277.194 ops/s
Iteration   3: 193828.746 ops/s
Iteration   4: 193948.401 ops/s
Iteration   5: 193410.054 ops/s
Iteration   6: 193640.243 ops/s
Iteration   7: 193753.361 ops/s
Iteration   8: 193605.240 ops/s
Iteration   9: 194189.991 ops/s
Iteration  10: 194333.745 ops/s
Iteration  11: 194069.748 ops/s
Iteration  12: 193826.584 ops/s
Iteration  13: 193858.906 ops/s
Iteration  14: 193984.646 ops/s
Iteration  15: 193533.906 ops/s
Iteration  16: 194271.375 ops/s
Iteration  17: 194020.103 ops/s
Iteration  18: 194117.453 ops/s
Iteration  19: 193556.091 ops/s
Iteration  20: 193481.709 ops/s
Iteration  21: 194070.538 ops/s
Iteration  22: 194130.569 ops/s
Iteration  23: 193055.962 ops/s
Iteration  24: 193761.759 ops/s
Iteration  25: 193829.222 ops/s
Iteration  26: 193142.458 ops/s
Iteration  27: 193908.589 ops/s
Iteration  28: 193563.580 ops/s
Iteration  29: 193080.564 ops/s
Iteration  30: 193507.116 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_forEachWithIndexWithFromTo":
  193787.101 ±(99.9%) 230.746 ops/s [Average]
  (min, avg, max) = (193055.962, 193787.101, 194333.745), stdev = 345.370
  CI (99.9%): [193556.355, 194017.846] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_forEachWithIndexWithFromTo  thrpt   30  193787.101 ± 230.746  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_forLoop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_forLoop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1996637.922 ops/s
# Warmup Iteration   2: 3755762.209 ops/s
# Warmup Iteration   3: 4137557.454 ops/s
# Warmup Iteration   4: 4164389.046 ops/s
# Warmup Iteration   5: 3520478.093 ops/s
# Warmup Iteration   6: 4110053.873 ops/s
# Warmup Iteration   7: 4173224.140 ops/s
# Warmup Iteration   8: 4171303.020 ops/s
# Warmup Iteration   9: 4157959.159 ops/s
# Warmup Iteration  10: 4162101.523 ops/s
# Warmup Iteration  11: 4172812.310 ops/s
# Warmup Iteration  12: 4164486.658 ops/s
# Warmup Iteration  13: 4158128.367 ops/s
# Warmup Iteration  14: 4167496.604 ops/s
# Warmup Iteration  15: 4161515.798 ops/s
# Warmup Iteration  16: 4165297.836 ops/s
# Warmup Iteration  17: 4172559.035 ops/s
# Warmup Iteration  18: 4164159.708 ops/s
# Warmup Iteration  19: 4173036.832 ops/s
# Warmup Iteration  20: 4159910.092 ops/s
# Warmup Iteration  21: 4156130.648 ops/s
# Warmup Iteration  22: 4169920.296 ops/s
# Warmup Iteration  23: 4169901.621 ops/s
# Warmup Iteration  24: 4170100.511 ops/s
# Warmup Iteration  25: 4172586.945 ops/s
# Warmup Iteration  26: 4172409.203 ops/s
# Warmup Iteration  27: 4170747.772 ops/s
# Warmup Iteration  28: 4175101.859 ops/s
# Warmup Iteration  29: 4176472.957 ops/s
# Warmup Iteration  30: 4160659.977 ops/s
Iteration   1: 4168344.914 ops/s
Iteration   2: 4171131.314 ops/s
Iteration   3: 4164097.781 ops/s
Iteration   4: 4175866.049 ops/s
Iteration   5: 4164424.819 ops/s
Iteration   6: 4173843.059 ops/s
Iteration   7: 4168500.999 ops/s
Iteration   8: 4167970.096 ops/s
Iteration   9: 4177959.358 ops/s
Iteration  10: 4157363.794 ops/s
Iteration  11: 4136145.381 ops/s
Iteration  12: 4165073.556 ops/s
Iteration  13: 4161884.568 ops/s
Iteration  14: 4156224.311 ops/s
Iteration  15: 4172914.504 ops/s
Iteration  16: 4165690.491 ops/s
Iteration  17: 4171295.630 ops/s
Iteration  18: 4162385.138 ops/s
Iteration  19: 4165504.484 ops/s
Iteration  20: 4175246.614 ops/s
Iteration  21: 4150582.076 ops/s
Iteration  22: 4148447.529 ops/s
Iteration  23: 4168616.574 ops/s
Iteration  24: 4167196.804 ops/s
Iteration  25: 4134219.402 ops/s
Iteration  26: 4163085.353 ops/s
Iteration  27: 4165594.560 ops/s
Iteration  28: 4168807.500 ops/s
Iteration  29: 4176771.236 ops/s
Iteration  30: 4177935.507 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_forLoop":
  4164770.780 ±(99.9%) 7231.773 ops/s [Average]
  (min, avg, max) = (4134219.402, 4164770.780, 4177959.358), stdev = 10824.179
  CI (99.9%): [4157539.007, 4172002.553] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_forLoop  thrpt   30  4164770.780 ± 7231.773  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1052745.875 ops/s
# Warmup Iteration   2: 1931930.150 ops/s
# Warmup Iteration   3: 2143855.012 ops/s
# Warmup Iteration   4: 2152728.197 ops/s
# Warmup Iteration   5: 2075371.296 ops/s
# Warmup Iteration   6: 1853747.677 ops/s
# Warmup Iteration   7: 2156631.109 ops/s
# Warmup Iteration   8: 2157314.729 ops/s
# Warmup Iteration   9: 2155193.416 ops/s
# Warmup Iteration  10: 2157601.235 ops/s
# Warmup Iteration  11: 2159731.246 ops/s
# Warmup Iteration  12: 2157466.953 ops/s
# Warmup Iteration  13: 2153836.503 ops/s
# Warmup Iteration  14: 2151537.244 ops/s
# Warmup Iteration  15: 2151815.843 ops/s
# Warmup Iteration  16: 2149571.634 ops/s
# Warmup Iteration  17: 2156950.504 ops/s
# Warmup Iteration  18: 2158977.694 ops/s
# Warmup Iteration  19: 2159378.923 ops/s
# Warmup Iteration  20: 2158912.976 ops/s
# Warmup Iteration  21: 2156472.344 ops/s
# Warmup Iteration  22: 2155093.017 ops/s
# Warmup Iteration  23: 2157385.447 ops/s
# Warmup Iteration  24: 2155521.687 ops/s
# Warmup Iteration  25: 2150333.150 ops/s
# Warmup Iteration  26: 2150129.728 ops/s
# Warmup Iteration  27: 2158171.190 ops/s
# Warmup Iteration  28: 2157612.448 ops/s
# Warmup Iteration  29: 2157611.417 ops/s
# Warmup Iteration  30: 2150306.555 ops/s
Iteration   1: 2158735.775 ops/s
Iteration   2: 2147006.046 ops/s
Iteration   3: 2158457.186 ops/s
Iteration   4: 2155997.516 ops/s
Iteration   5: 2161810.156 ops/s
Iteration   6: 2156819.677 ops/s
Iteration   7: 2156419.545 ops/s
Iteration   8: 2159547.433 ops/s
Iteration   9: 2153309.680 ops/s
Iteration  10: 2161078.687 ops/s
Iteration  11: 2155365.198 ops/s
Iteration  12: 2151013.317 ops/s
Iteration  13: 2161889.295 ops/s
Iteration  14: 2159943.714 ops/s
Iteration  15: 2162150.484 ops/s
Iteration  16: 2151975.777 ops/s
Iteration  17: 2157636.936 ops/s
Iteration  18: 2162518.003 ops/s
Iteration  19: 2158163.715 ops/s
Iteration  20: 2160285.374 ops/s
Iteration  21: 2158733.044 ops/s
Iteration  22: 2160246.315 ops/s
Iteration  23: 2162197.234 ops/s
Iteration  24: 2158101.585 ops/s
Iteration  25: 2162484.895 ops/s
Iteration  26: 2157550.550 ops/s
Iteration  27: 2157397.841 ops/s
Iteration  28: 2161120.366 ops/s
Iteration  29: 2155900.150 ops/s
Iteration  30: 2163412.330 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_getFirst":
  2158242.261 ±(99.9%) 2534.848 ops/s [Average]
  (min, avg, max) = (2147006.046, 2158242.261, 2163412.330), stdev = 3794.041
  CI (99.9%): [2155707.413, 2160777.109] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_getFirst  thrpt   30  2158242.261 ± 2534.848  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1051192.508 ops/s
# Warmup Iteration   2: 1918372.261 ops/s
# Warmup Iteration   3: 2131793.760 ops/s
# Warmup Iteration   4: 2129852.957 ops/s
# Warmup Iteration   5: 2091393.901 ops/s
# Warmup Iteration   6: 1816571.228 ops/s
# Warmup Iteration   7: 2141708.060 ops/s
# Warmup Iteration   8: 2142506.227 ops/s
# Warmup Iteration   9: 2143908.287 ops/s
# Warmup Iteration  10: 2145436.769 ops/s
# Warmup Iteration  11: 2143830.902 ops/s
# Warmup Iteration  12: 2136055.562 ops/s
# Warmup Iteration  13: 2145067.213 ops/s
# Warmup Iteration  14: 2144882.127 ops/s
# Warmup Iteration  15: 2149299.855 ops/s
# Warmup Iteration  16: 2141912.113 ops/s
# Warmup Iteration  17: 2137979.418 ops/s
# Warmup Iteration  18: 2137931.982 ops/s
# Warmup Iteration  19: 2134689.569 ops/s
# Warmup Iteration  20: 2134833.777 ops/s
# Warmup Iteration  21: 2136150.488 ops/s
# Warmup Iteration  22: 2132382.855 ops/s
# Warmup Iteration  23: 2137764.391 ops/s
# Warmup Iteration  24: 2137619.204 ops/s
# Warmup Iteration  25: 2136850.471 ops/s
# Warmup Iteration  26: 2132341.291 ops/s
# Warmup Iteration  27: 2135820.647 ops/s
# Warmup Iteration  28: 2133974.499 ops/s
# Warmup Iteration  29: 2137400.828 ops/s
# Warmup Iteration  30: 2137691.970 ops/s
Iteration   1: 2135341.724 ops/s
Iteration   2: 2138225.730 ops/s
Iteration   3: 2137052.474 ops/s
Iteration   4: 2138812.543 ops/s
Iteration   5: 2135521.899 ops/s
Iteration   6: 2135462.206 ops/s
Iteration   7: 2139312.984 ops/s
Iteration   8: 2128534.772 ops/s
Iteration   9: 2132756.749 ops/s
Iteration  10: 2134763.222 ops/s
Iteration  11: 2131961.275 ops/s
Iteration  12: 2135897.511 ops/s
Iteration  13: 2136655.279 ops/s
Iteration  14: 2138654.602 ops/s
Iteration  15: 2136856.945 ops/s
Iteration  16: 2138921.413 ops/s
Iteration  17: 2139764.968 ops/s
Iteration  18: 2138193.548 ops/s
Iteration  19: 2137343.876 ops/s
Iteration  20: 2129659.200 ops/s
Iteration  21: 2135896.767 ops/s
Iteration  22: 2132034.909 ops/s
Iteration  23: 2133072.978 ops/s
Iteration  24: 2138836.229 ops/s
Iteration  25: 2133937.212 ops/s
Iteration  26: 2136724.391 ops/s
Iteration  27: 2139629.403 ops/s
Iteration  28: 2132926.752 ops/s
Iteration  29: 2139479.832 ops/s
Iteration  30: 2135283.346 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_getLast":
  2135917.158 ±(99.9%) 2000.114 ops/s [Average]
  (min, avg, max) = (2128534.772, 2135917.158, 2139764.968), stdev = 2993.676
  CI (99.9%): [2133917.044, 2137917.272] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_getLast  thrpt   30  2135917.158 ± 2000.114  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 223432.439 ops/s
# Warmup Iteration   2: 397756.516 ops/s
# Warmup Iteration   3: 452697.617 ops/s
# Warmup Iteration   4: 454437.666 ops/s
# Warmup Iteration   5: 455169.802 ops/s
# Warmup Iteration   6: 379099.738 ops/s
# Warmup Iteration   7: 454295.109 ops/s
# Warmup Iteration   8: 454548.886 ops/s
# Warmup Iteration   9: 453797.719 ops/s
# Warmup Iteration  10: 455303.018 ops/s
# Warmup Iteration  11: 454815.431 ops/s
# Warmup Iteration  12: 454268.170 ops/s
# Warmup Iteration  13: 454519.487 ops/s
# Warmup Iteration  14: 451645.354 ops/s
# Warmup Iteration  15: 453028.056 ops/s
# Warmup Iteration  16: 453878.857 ops/s
# Warmup Iteration  17: 453798.942 ops/s
# Warmup Iteration  18: 452916.544 ops/s
# Warmup Iteration  19: 454610.167 ops/s
# Warmup Iteration  20: 454701.246 ops/s
# Warmup Iteration  21: 454294.791 ops/s
# Warmup Iteration  22: 453357.663 ops/s
# Warmup Iteration  23: 454150.776 ops/s
# Warmup Iteration  24: 455383.252 ops/s
# Warmup Iteration  25: 454212.930 ops/s
# Warmup Iteration  26: 455016.466 ops/s
# Warmup Iteration  27: 455211.385 ops/s
# Warmup Iteration  28: 455161.402 ops/s
# Warmup Iteration  29: 453996.826 ops/s
# Warmup Iteration  30: 454193.364 ops/s
Iteration   1: 453850.700 ops/s
Iteration   2: 455272.138 ops/s
Iteration   3: 454490.202 ops/s
Iteration   4: 454341.509 ops/s
Iteration   5: 453998.699 ops/s
Iteration   6: 454354.423 ops/s
Iteration   7: 454518.991 ops/s
Iteration   8: 453375.631 ops/s
Iteration   9: 456236.729 ops/s
Iteration  10: 454540.446 ops/s
Iteration  11: 455385.480 ops/s
Iteration  12: 456237.734 ops/s
Iteration  13: 455122.145 ops/s
Iteration  14: 454838.108 ops/s
Iteration  15: 455158.056 ops/s
Iteration  16: 455299.643 ops/s
Iteration  17: 454222.571 ops/s
Iteration  18: 453720.471 ops/s
Iteration  19: 454125.461 ops/s
Iteration  20: 455440.649 ops/s
Iteration  21: 451956.971 ops/s
Iteration  22: 452798.479 ops/s
Iteration  23: 453788.820 ops/s
Iteration  24: 453558.251 ops/s
Iteration  25: 456223.768 ops/s
Iteration  26: 455126.959 ops/s
Iteration  27: 455664.267 ops/s
Iteration  28: 454575.811 ops/s
Iteration  29: 455820.738 ops/s
Iteration  30: 454030.725 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_groupBy":
  454602.486 ±(99.9%) 677.440 ops/s [Average]
  (min, avg, max) = (451956.971, 454602.486, 456237.734), stdev = 1013.960
  CI (99.9%): [453925.046, 455279.926] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_groupBy  thrpt   30  454602.486 ± 677.440  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 201012.169 ops/s
# Warmup Iteration   2: 358225.927 ops/s
# Warmup Iteration   3: 408130.555 ops/s
# Warmup Iteration   4: 408718.477 ops/s
# Warmup Iteration   5: 409533.204 ops/s
# Warmup Iteration   6: 343992.328 ops/s
# Warmup Iteration   7: 409780.443 ops/s
# Warmup Iteration   8: 410045.732 ops/s
# Warmup Iteration   9: 409436.441 ops/s
# Warmup Iteration  10: 410346.362 ops/s
# Warmup Iteration  11: 410180.775 ops/s
# Warmup Iteration  12: 409403.362 ops/s
# Warmup Iteration  13: 410045.242 ops/s
# Warmup Iteration  14: 409225.913 ops/s
# Warmup Iteration  15: 409130.864 ops/s
# Warmup Iteration  16: 408650.334 ops/s
# Warmup Iteration  17: 407988.375 ops/s
# Warmup Iteration  18: 409095.248 ops/s
# Warmup Iteration  19: 406714.994 ops/s
# Warmup Iteration  20: 407765.524 ops/s
# Warmup Iteration  21: 407077.978 ops/s
# Warmup Iteration  22: 409269.411 ops/s
# Warmup Iteration  23: 409160.630 ops/s
# Warmup Iteration  24: 408502.704 ops/s
# Warmup Iteration  25: 408084.696 ops/s
# Warmup Iteration  26: 407195.082 ops/s
# Warmup Iteration  27: 408673.441 ops/s
# Warmup Iteration  28: 408979.458 ops/s
# Warmup Iteration  29: 406974.925 ops/s
# Warmup Iteration  30: 408380.114 ops/s
Iteration   1: 407271.729 ops/s
Iteration   2: 406292.565 ops/s
Iteration   3: 406703.881 ops/s
Iteration   4: 409112.524 ops/s
Iteration   5: 409324.511 ops/s
Iteration   6: 408406.941 ops/s
Iteration   7: 408603.159 ops/s
Iteration   8: 407487.505 ops/s
Iteration   9: 406719.342 ops/s
Iteration  10: 408603.544 ops/s
Iteration  11: 407566.866 ops/s
Iteration  12: 407078.755 ops/s
Iteration  13: 407610.638 ops/s
Iteration  14: 407960.720 ops/s
Iteration  15: 407555.512 ops/s
Iteration  16: 408383.260 ops/s
Iteration  17: 407750.797 ops/s
Iteration  18: 407708.415 ops/s
Iteration  19: 407882.343 ops/s
Iteration  20: 409133.108 ops/s
Iteration  21: 409535.219 ops/s
Iteration  22: 408538.120 ops/s
Iteration  23: 408329.785 ops/s
Iteration  24: 409049.250 ops/s
Iteration  25: 409625.332 ops/s
Iteration  26: 409261.486 ops/s
Iteration  27: 408638.361 ops/s
Iteration  28: 408400.965 ops/s
Iteration  29: 408286.559 ops/s
Iteration  30: 409316.128 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_groupByEach":
  408204.577 ±(99.9%) 596.407 ops/s [Average]
  (min, avg, max) = (406292.565, 408204.577, 409625.332), stdev = 892.674
  CI (99.9%): [407608.171, 408800.984] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_groupByEach  thrpt   30  408204.577 ± 596.407  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_groupByEachWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_groupByEachWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 208201.627 ops/s
# Warmup Iteration   2: 331557.364 ops/s
# Warmup Iteration   3: 399155.802 ops/s
# Warmup Iteration   4: 396772.926 ops/s
# Warmup Iteration   5: 399496.576 ops/s
# Warmup Iteration   6: 397464.124 ops/s
# Warmup Iteration   7: 332726.219 ops/s
# Warmup Iteration   8: 395810.575 ops/s
# Warmup Iteration   9: 395673.457 ops/s
# Warmup Iteration  10: 399874.643 ops/s
# Warmup Iteration  11: 400153.416 ops/s
# Warmup Iteration  12: 399535.899 ops/s
# Warmup Iteration  13: 398963.328 ops/s
# Warmup Iteration  14: 398926.046 ops/s
# Warmup Iteration  15: 398684.341 ops/s
# Warmup Iteration  16: 398219.049 ops/s
# Warmup Iteration  17: 399187.875 ops/s
# Warmup Iteration  18: 400179.065 ops/s
# Warmup Iteration  19: 399025.802 ops/s
# Warmup Iteration  20: 399530.799 ops/s
# Warmup Iteration  21: 398955.221 ops/s
# Warmup Iteration  22: 398714.805 ops/s
# Warmup Iteration  23: 398677.912 ops/s
# Warmup Iteration  24: 398710.865 ops/s
# Warmup Iteration  25: 398444.497 ops/s
# Warmup Iteration  26: 399075.180 ops/s
# Warmup Iteration  27: 398806.662 ops/s
# Warmup Iteration  28: 399540.963 ops/s
# Warmup Iteration  29: 398585.764 ops/s
# Warmup Iteration  30: 398710.443 ops/s
Iteration   1: 399364.558 ops/s
Iteration   2: 399096.943 ops/s
Iteration   3: 398026.606 ops/s
Iteration   4: 398863.869 ops/s
Iteration   5: 399512.426 ops/s
Iteration   6: 398447.629 ops/s
Iteration   7: 399556.402 ops/s
Iteration   8: 398410.489 ops/s
Iteration   9: 399102.899 ops/s
Iteration  10: 398588.807 ops/s
Iteration  11: 399492.794 ops/s
Iteration  12: 398727.783 ops/s
Iteration  13: 399648.108 ops/s
Iteration  14: 397783.812 ops/s
Iteration  15: 399277.682 ops/s
Iteration  16: 399426.249 ops/s
Iteration  17: 398103.041 ops/s
Iteration  18: 399471.929 ops/s
Iteration  19: 398821.514 ops/s
Iteration  20: 398732.830 ops/s
Iteration  21: 398027.034 ops/s
Iteration  22: 398558.702 ops/s
Iteration  23: 398191.973 ops/s
Iteration  24: 399447.431 ops/s
Iteration  25: 399351.967 ops/s
Iteration  26: 398623.274 ops/s
Iteration  27: 399238.614 ops/s
Iteration  28: 398951.589 ops/s
Iteration  29: 399383.975 ops/s
Iteration  30: 398866.065 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_groupByEachWithTarget":
  398903.233 ±(99.9%) 357.908 ops/s [Average]
  (min, avg, max) = (397783.812, 398903.233, 399648.108), stdev = 535.699
  CI (99.9%): [398545.325, 399261.141] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_groupByEachWithTarget  thrpt   30  398903.233 ± 357.908  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 263660.812 ops/s
# Warmup Iteration   2: 336202.321 ops/s
# Warmup Iteration   3: 434937.884 ops/s
# Warmup Iteration   4: 431970.764 ops/s
# Warmup Iteration   5: 434928.518 ops/s
# Warmup Iteration   6: 435287.367 ops/s
# Warmup Iteration   7: 432776.072 ops/s
# Warmup Iteration   8: 433571.284 ops/s
# Warmup Iteration   9: 364437.127 ops/s
# Warmup Iteration  10: 435330.727 ops/s
# Warmup Iteration  11: 433806.007 ops/s
# Warmup Iteration  12: 432047.388 ops/s
# Warmup Iteration  13: 434453.597 ops/s
# Warmup Iteration  14: 434622.865 ops/s
# Warmup Iteration  15: 435097.264 ops/s
# Warmup Iteration  16: 435392.780 ops/s
# Warmup Iteration  17: 445167.077 ops/s
# Warmup Iteration  18: 446938.123 ops/s
# Warmup Iteration  19: 446947.705 ops/s
# Warmup Iteration  20: 446793.284 ops/s
# Warmup Iteration  21: 446767.917 ops/s
# Warmup Iteration  22: 447051.826 ops/s
# Warmup Iteration  23: 447296.422 ops/s
# Warmup Iteration  24: 447066.685 ops/s
# Warmup Iteration  25: 447971.689 ops/s
# Warmup Iteration  26: 447845.592 ops/s
# Warmup Iteration  27: 446976.966 ops/s
# Warmup Iteration  28: 447446.640 ops/s
# Warmup Iteration  29: 447694.186 ops/s
# Warmup Iteration  30: 447059.708 ops/s
Iteration   1: 447634.041 ops/s
Iteration   2: 445074.584 ops/s
Iteration   3: 446404.562 ops/s
Iteration   4: 445772.493 ops/s
Iteration   5: 446309.569 ops/s
Iteration   6: 447566.664 ops/s
Iteration   7: 446563.192 ops/s
Iteration   8: 446427.851 ops/s
Iteration   9: 447149.882 ops/s
Iteration  10: 447518.465 ops/s
Iteration  11: 445552.744 ops/s
Iteration  12: 448429.375 ops/s
Iteration  13: 447869.859 ops/s
Iteration  14: 447306.485 ops/s
Iteration  15: 447048.622 ops/s
Iteration  16: 448091.254 ops/s
Iteration  17: 446684.111 ops/s
Iteration  18: 447897.360 ops/s
Iteration  19: 447290.440 ops/s
Iteration  20: 446809.448 ops/s
Iteration  21: 448050.347 ops/s
Iteration  22: 447533.302 ops/s
Iteration  23: 447543.933 ops/s
Iteration  24: 447445.986 ops/s
Iteration  25: 446323.437 ops/s
Iteration  26: 447729.708 ops/s
Iteration  27: 447310.518 ops/s
Iteration  28: 445264.098 ops/s
Iteration  29: 447382.221 ops/s
Iteration  30: 448037.506 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_groupByUniqueKey":
  447067.402 ±(99.9%) 579.979 ops/s [Average]
  (min, avg, max) = (445074.584, 447067.402, 448429.375), stdev = 868.085
  CI (99.9%): [446487.423, 447647.380] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  447067.402 ± 579.979  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 279469.640 ops/s
# Warmup Iteration   2: 360099.169 ops/s
# Warmup Iteration   3: 449910.029 ops/s
# Warmup Iteration   4: 449457.139 ops/s
# Warmup Iteration   5: 451073.955 ops/s
# Warmup Iteration   6: 450849.062 ops/s
# Warmup Iteration   7: 451382.755 ops/s
# Warmup Iteration   8: 450648.289 ops/s
# Warmup Iteration   9: 381101.205 ops/s
# Warmup Iteration  10: 451633.844 ops/s
# Warmup Iteration  11: 451100.510 ops/s
# Warmup Iteration  12: 451306.131 ops/s
# Warmup Iteration  13: 450586.017 ops/s
# Warmup Iteration  14: 450399.870 ops/s
# Warmup Iteration  15: 451304.820 ops/s
# Warmup Iteration  16: 451568.541 ops/s
# Warmup Iteration  17: 463120.415 ops/s
# Warmup Iteration  18: 463304.992 ops/s
# Warmup Iteration  19: 463684.182 ops/s
# Warmup Iteration  20: 464258.522 ops/s
# Warmup Iteration  21: 463705.560 ops/s
# Warmup Iteration  22: 463857.608 ops/s
# Warmup Iteration  23: 463082.576 ops/s
# Warmup Iteration  24: 464061.291 ops/s
# Warmup Iteration  25: 463481.894 ops/s
# Warmup Iteration  26: 463202.017 ops/s
# Warmup Iteration  27: 464218.585 ops/s
# Warmup Iteration  28: 463617.775 ops/s
# Warmup Iteration  29: 462988.955 ops/s
# Warmup Iteration  30: 462882.672 ops/s
Iteration   1: 464381.724 ops/s
Iteration   2: 463777.627 ops/s
Iteration   3: 463233.286 ops/s
Iteration   4: 463095.818 ops/s
Iteration   5: 463182.022 ops/s
Iteration   6: 462942.512 ops/s
Iteration   7: 462865.361 ops/s
Iteration   8: 463476.037 ops/s
Iteration   9: 461546.803 ops/s
Iteration  10: 463139.549 ops/s
Iteration  11: 463322.014 ops/s
Iteration  12: 462708.478 ops/s
Iteration  13: 462355.266 ops/s
Iteration  14: 460892.815 ops/s
Iteration  15: 463495.314 ops/s
Iteration  16: 462394.769 ops/s
Iteration  17: 461060.578 ops/s
Iteration  18: 464084.847 ops/s
Iteration  19: 463549.347 ops/s
Iteration  20: 462694.540 ops/s
Iteration  21: 463701.377 ops/s
Iteration  22: 463613.417 ops/s
Iteration  23: 463750.309 ops/s
Iteration  24: 464009.087 ops/s
Iteration  25: 463543.173 ops/s
Iteration  26: 461934.217 ops/s
Iteration  27: 463525.164 ops/s
Iteration  28: 463161.918 ops/s
Iteration  29: 461998.187 ops/s
Iteration  30: 463849.707 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_groupByUniqueKey_target":
  463042.842 ±(99.9%) 579.698 ops/s [Average]
  (min, avg, max) = (460892.815, 463042.842, 464381.724), stdev = 867.664
  CI (99.9%): [462463.144, 463622.540] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  463042.842 ± 579.698  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_groupByWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_groupByWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 250953.340 ops/s
# Warmup Iteration   2: 407503.406 ops/s
# Warmup Iteration   3: 484885.742 ops/s
# Warmup Iteration   4: 487718.092 ops/s
# Warmup Iteration   5: 486872.878 ops/s
# Warmup Iteration   6: 486846.571 ops/s
# Warmup Iteration   7: 409676.432 ops/s
# Warmup Iteration   8: 486878.081 ops/s
# Warmup Iteration   9: 486892.177 ops/s
# Warmup Iteration  10: 486561.571 ops/s
# Warmup Iteration  11: 486382.692 ops/s
# Warmup Iteration  12: 486442.790 ops/s
# Warmup Iteration  13: 486212.520 ops/s
# Warmup Iteration  14: 487236.275 ops/s
# Warmup Iteration  15: 487318.219 ops/s
# Warmup Iteration  16: 486727.104 ops/s
# Warmup Iteration  17: 487201.558 ops/s
# Warmup Iteration  18: 487038.307 ops/s
# Warmup Iteration  19: 486700.941 ops/s
# Warmup Iteration  20: 486245.979 ops/s
# Warmup Iteration  21: 486529.391 ops/s
# Warmup Iteration  22: 486179.233 ops/s
# Warmup Iteration  23: 486717.773 ops/s
# Warmup Iteration  24: 486692.480 ops/s
# Warmup Iteration  25: 487342.602 ops/s
# Warmup Iteration  26: 486698.153 ops/s
# Warmup Iteration  27: 486264.919 ops/s
# Warmup Iteration  28: 486414.934 ops/s
# Warmup Iteration  29: 486256.460 ops/s
# Warmup Iteration  30: 486922.807 ops/s
Iteration   1: 488027.882 ops/s
Iteration   2: 487152.104 ops/s
Iteration   3: 487556.633 ops/s
Iteration   4: 486478.225 ops/s
Iteration   5: 487659.355 ops/s
Iteration   6: 486077.185 ops/s
Iteration   7: 487663.041 ops/s
Iteration   8: 486084.306 ops/s
Iteration   9: 487397.863 ops/s
Iteration  10: 485900.041 ops/s
Iteration  11: 487498.454 ops/s
Iteration  12: 485661.837 ops/s
Iteration  13: 487529.395 ops/s
Iteration  14: 485381.126 ops/s
Iteration  15: 485196.653 ops/s
Iteration  16: 486895.643 ops/s
Iteration  17: 486643.898 ops/s
Iteration  18: 487385.485 ops/s
Iteration  19: 485777.146 ops/s
Iteration  20: 487321.812 ops/s
Iteration  21: 485628.241 ops/s
Iteration  22: 488243.579 ops/s
Iteration  23: 485886.521 ops/s
Iteration  24: 485808.601 ops/s
Iteration  25: 486265.057 ops/s
Iteration  26: 484714.265 ops/s
Iteration  27: 486011.679 ops/s
Iteration  28: 487579.120 ops/s
Iteration  29: 485448.865 ops/s
Iteration  30: 485641.491 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_groupByWithTarget":
  486550.517 ±(99.9%) 644.982 ops/s [Average]
  (min, avg, max) = (484714.265, 486550.517, 488243.579), stdev = 965.379
  CI (99.9%): [485905.535, 487195.499] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_groupByWithTarget  thrpt   30  486550.517 ± 644.982  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1833069.346 ops/s
# Warmup Iteration   2: 3255728.771 ops/s
# Warmup Iteration   3: 3666098.296 ops/s
# Warmup Iteration   4: 3702507.071 ops/s
# Warmup Iteration   5: 3709226.011 ops/s
# Warmup Iteration   6: 3076592.644 ops/s
# Warmup Iteration   7: 3717499.898 ops/s
# Warmup Iteration   8: 3708320.156 ops/s
# Warmup Iteration   9: 3713304.101 ops/s
# Warmup Iteration  10: 3714251.481 ops/s
# Warmup Iteration  11: 3715092.974 ops/s
# Warmup Iteration  12: 3712547.866 ops/s
# Warmup Iteration  13: 3711036.308 ops/s
# Warmup Iteration  14: 3713299.372 ops/s
# Warmup Iteration  15: 3714174.499 ops/s
# Warmup Iteration  16: 3714480.794 ops/s
# Warmup Iteration  17: 3711493.589 ops/s
# Warmup Iteration  18: 3701488.086 ops/s
# Warmup Iteration  19: 3712119.350 ops/s
# Warmup Iteration  20: 3715609.612 ops/s
# Warmup Iteration  21: 3715315.710 ops/s
# Warmup Iteration  22: 3714256.783 ops/s
# Warmup Iteration  23: 3714221.829 ops/s
# Warmup Iteration  24: 3709914.565 ops/s
# Warmup Iteration  25: 3712725.999 ops/s
# Warmup Iteration  26: 3709302.003 ops/s
# Warmup Iteration  27: 3712359.200 ops/s
# Warmup Iteration  28: 3714261.394 ops/s
# Warmup Iteration  29: 3715201.043 ops/s
# Warmup Iteration  30: 3715812.692 ops/s
Iteration   1: 3721638.881 ops/s
Iteration   2: 3690797.934 ops/s
Iteration   3: 3693238.435 ops/s
Iteration   4: 3709174.639 ops/s
Iteration   5: 3708987.300 ops/s
Iteration   6: 3716445.301 ops/s
Iteration   7: 3713041.119 ops/s
Iteration   8: 3716580.951 ops/s
Iteration   9: 3710756.569 ops/s
Iteration  10: 3710299.965 ops/s
Iteration  11: 3707818.748 ops/s
Iteration  12: 3707829.622 ops/s
Iteration  13: 3722047.518 ops/s
Iteration  14: 3716975.569 ops/s
Iteration  15: 3716323.581 ops/s
Iteration  16: 3719368.264 ops/s
Iteration  17: 3715198.955 ops/s
Iteration  18: 3719976.513 ops/s
Iteration  19: 3710387.477 ops/s
Iteration  20: 3704237.946 ops/s
Iteration  21: 3715796.943 ops/s
Iteration  22: 3708270.827 ops/s
Iteration  23: 3700856.703 ops/s
Iteration  24: 3683795.409 ops/s
Iteration  25: 3678122.548 ops/s
Iteration  26: 3687410.894 ops/s
Iteration  27: 3699896.383 ops/s
Iteration  28: 3718495.137 ops/s
Iteration  29: 3698979.884 ops/s
Iteration  30: 3716940.150 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_indexOf":
  3707989.672 ±(99.9%) 7776.109 ops/s [Average]
  (min, avg, max) = (3678122.548, 3707989.672, 3722047.518), stdev = 11638.915
  CI (99.9%): [3700213.563, 3715765.781] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_indexOf  thrpt   30  3707989.672 ± 7776.109  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1668933.157 ops/s
# Warmup Iteration   2: 3218206.621 ops/s
# Warmup Iteration   3: 3536607.763 ops/s
# Warmup Iteration   4: 3558816.161 ops/s
# Warmup Iteration   5: 3048398.927 ops/s
# Warmup Iteration   6: 3448465.255 ops/s
# Warmup Iteration   7: 3555379.005 ops/s
# Warmup Iteration   8: 3562203.095 ops/s
# Warmup Iteration   9: 3562946.020 ops/s
# Warmup Iteration  10: 3560475.223 ops/s
# Warmup Iteration  11: 3557315.950 ops/s
# Warmup Iteration  12: 3560418.483 ops/s
# Warmup Iteration  13: 3553549.627 ops/s
# Warmup Iteration  14: 3564622.360 ops/s
# Warmup Iteration  15: 3559307.194 ops/s
# Warmup Iteration  16: 3564108.947 ops/s
# Warmup Iteration  17: 3560741.768 ops/s
# Warmup Iteration  18: 3562123.677 ops/s
# Warmup Iteration  19: 3562682.333 ops/s
# Warmup Iteration  20: 3560089.515 ops/s
# Warmup Iteration  21: 3562113.421 ops/s
# Warmup Iteration  22: 3566074.639 ops/s
# Warmup Iteration  23: 3562345.058 ops/s
# Warmup Iteration  24: 3562525.907 ops/s
# Warmup Iteration  25: 3565689.616 ops/s
# Warmup Iteration  26: 3561049.923 ops/s
# Warmup Iteration  27: 3560761.279 ops/s
# Warmup Iteration  28: 3564921.446 ops/s
# Warmup Iteration  29: 3563280.732 ops/s
# Warmup Iteration  30: 3565733.597 ops/s
Iteration   1: 3557667.910 ops/s
Iteration   2: 3555359.571 ops/s
Iteration   3: 3564284.583 ops/s
Iteration   4: 3553863.957 ops/s
Iteration   5: 3554276.904 ops/s
Iteration   6: 3566349.539 ops/s
Iteration   7: 3560864.665 ops/s
Iteration   8: 3564092.449 ops/s
Iteration   9: 3557406.952 ops/s
Iteration  10: 3556695.826 ops/s
Iteration  11: 3562285.678 ops/s
Iteration  12: 3562251.981 ops/s
Iteration  13: 3562297.075 ops/s
Iteration  14: 3560777.693 ops/s
Iteration  15: 3555519.432 ops/s
Iteration  16: 3555118.542 ops/s
Iteration  17: 3562485.605 ops/s
Iteration  18: 3553369.873 ops/s
Iteration  19: 3554546.715 ops/s
Iteration  20: 3547185.221 ops/s
Iteration  21: 3550708.845 ops/s
Iteration  22: 3556106.252 ops/s
Iteration  23: 3560808.922 ops/s
Iteration  24: 3553613.827 ops/s
Iteration  25: 3559898.608 ops/s
Iteration  26: 3557679.543 ops/s
Iteration  27: 3564845.925 ops/s
Iteration  28: 3569047.190 ops/s
Iteration  29: 3553060.997 ops/s
Iteration  30: 3568624.695 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_injectInto":
  3558703.166 ±(99.9%) 3555.074 ops/s [Average]
  (min, avg, max) = (3547185.221, 3558703.166, 3569047.190), stdev = 5321.068
  CI (99.9%): [3555148.092, 3562258.240] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_injectInto  thrpt   30  3558703.166 ± 3555.074  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 954132.818 ops/s
# Warmup Iteration   2: 1803015.754 ops/s
# Warmup Iteration   3: 1967555.533 ops/s
# Warmup Iteration   4: 1973539.339 ops/s
# Warmup Iteration   5: 1722404.009 ops/s
# Warmup Iteration   6: 1902537.869 ops/s
# Warmup Iteration   7: 1985064.721 ops/s
# Warmup Iteration   8: 1984100.146 ops/s
# Warmup Iteration   9: 1983106.634 ops/s
# Warmup Iteration  10: 1981296.741 ops/s
# Warmup Iteration  11: 1983474.721 ops/s
# Warmup Iteration  12: 1977885.567 ops/s
# Warmup Iteration  13: 1981677.425 ops/s
# Warmup Iteration  14: 1983128.704 ops/s
# Warmup Iteration  15: 1983193.159 ops/s
# Warmup Iteration  16: 1983740.594 ops/s
# Warmup Iteration  17: 1977923.430 ops/s
# Warmup Iteration  18: 1982973.166 ops/s
# Warmup Iteration  19: 1983964.567 ops/s
# Warmup Iteration  20: 1984288.720 ops/s
# Warmup Iteration  21: 1982690.854 ops/s
# Warmup Iteration  22: 1984983.763 ops/s
# Warmup Iteration  23: 1983822.801 ops/s
# Warmup Iteration  24: 1985150.359 ops/s
# Warmup Iteration  25: 1983310.665 ops/s
# Warmup Iteration  26: 1986017.222 ops/s
# Warmup Iteration  27: 1980534.002 ops/s
# Warmup Iteration  28: 1984199.650 ops/s
# Warmup Iteration  29: 1986411.376 ops/s
# Warmup Iteration  30: 1987279.968 ops/s
Iteration   1: 1985943.338 ops/s
Iteration   2: 1986845.822 ops/s
Iteration   3: 1983911.187 ops/s
Iteration   4: 1977255.541 ops/s
Iteration   5: 1986835.141 ops/s
Iteration   6: 1982732.943 ops/s
Iteration   7: 1984536.814 ops/s
Iteration   8: 1987786.110 ops/s
Iteration   9: 1979248.198 ops/s
Iteration  10: 1984839.357 ops/s
Iteration  11: 1983066.684 ops/s
Iteration  12: 1984629.277 ops/s
Iteration  13: 1987336.972 ops/s
Iteration  14: 1980861.282 ops/s
Iteration  15: 1983910.042 ops/s
Iteration  16: 1987719.049 ops/s
Iteration  17: 1986123.560 ops/s
Iteration  18: 1986077.531 ops/s
Iteration  19: 1983100.864 ops/s
Iteration  20: 1981445.185 ops/s
Iteration  21: 1986337.961 ops/s
Iteration  22: 1985913.506 ops/s
Iteration  23: 1982348.089 ops/s
Iteration  24: 1987027.711 ops/s
Iteration  25: 1984793.226 ops/s
Iteration  26: 1980490.114 ops/s
Iteration  27: 1986320.116 ops/s
Iteration  28: 1983893.871 ops/s
Iteration  29: 1984705.822 ops/s
Iteration  30: 1981595.516 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_injectIntoDouble":
  1984254.361 ±(99.9%) 1758.409 ops/s [Average]
  (min, avg, max) = (1977255.541, 1984254.361, 1987786.110), stdev = 2631.905
  CI (99.9%): [1982495.952, 1986012.770] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  1984254.361 ± 1758.409  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 949019.525 ops/s
# Warmup Iteration   2: 1776490.303 ops/s
# Warmup Iteration   3: 1939092.913 ops/s
# Warmup Iteration   4: 1951327.858 ops/s
# Warmup Iteration   5: 1746327.375 ops/s
# Warmup Iteration   6: 1817481.546 ops/s
# Warmup Iteration   7: 1946615.065 ops/s
# Warmup Iteration   8: 1952703.757 ops/s
# Warmup Iteration   9: 1951817.032 ops/s
# Warmup Iteration  10: 1952159.403 ops/s
# Warmup Iteration  11: 1951034.980 ops/s
# Warmup Iteration  12: 1941631.232 ops/s
# Warmup Iteration  13: 1951019.869 ops/s
# Warmup Iteration  14: 1949238.774 ops/s
# Warmup Iteration  15: 1952316.352 ops/s
# Warmup Iteration  16: 1950999.295 ops/s
# Warmup Iteration  17: 1951865.530 ops/s
# Warmup Iteration  18: 1953663.307 ops/s
# Warmup Iteration  19: 1954902.481 ops/s
# Warmup Iteration  20: 1953979.860 ops/s
# Warmup Iteration  21: 1948512.563 ops/s
# Warmup Iteration  22: 1951155.634 ops/s
# Warmup Iteration  23: 1953042.641 ops/s
# Warmup Iteration  24: 1953499.632 ops/s
# Warmup Iteration  25: 1953797.505 ops/s
# Warmup Iteration  26: 1951849.727 ops/s
# Warmup Iteration  27: 1956007.810 ops/s
# Warmup Iteration  28: 1954700.075 ops/s
# Warmup Iteration  29: 1954816.013 ops/s
# Warmup Iteration  30: 1948858.349 ops/s
Iteration   1: 1953890.814 ops/s
Iteration   2: 1950650.748 ops/s
Iteration   3: 1955465.620 ops/s
Iteration   4: 1953164.322 ops/s
Iteration   5: 1950246.957 ops/s
Iteration   6: 1954687.155 ops/s
Iteration   7: 1950497.592 ops/s
Iteration   8: 1955862.724 ops/s
Iteration   9: 1950330.194 ops/s
Iteration  10: 1952781.014 ops/s
Iteration  11: 1957177.759 ops/s
Iteration  12: 1953047.799 ops/s
Iteration  13: 1952609.173 ops/s
Iteration  14: 1953890.813 ops/s
Iteration  15: 1950339.773 ops/s
Iteration  16: 1956498.237 ops/s
Iteration  17: 1955179.031 ops/s
Iteration  18: 1954257.737 ops/s
Iteration  19: 1957064.610 ops/s
Iteration  20: 1948672.938 ops/s
Iteration  21: 1950230.974 ops/s
Iteration  22: 1954079.632 ops/s
Iteration  23: 1943699.235 ops/s
Iteration  24: 1955235.594 ops/s
Iteration  25: 1953008.104 ops/s
Iteration  26: 1953482.302 ops/s
Iteration  27: 1955979.773 ops/s
Iteration  28: 1953602.205 ops/s
Iteration  29: 1953299.787 ops/s
Iteration  30: 1956508.950 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_injectIntoFloat":
  1953181.386 ±(99.9%) 1941.908 ops/s [Average]
  (min, avg, max) = (1943699.235, 1953181.386, 1957177.759), stdev = 2906.557
  CI (99.9%): [1951239.477, 1955123.294] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  1953181.386 ± 1941.908  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 955238.971 ops/s
# Warmup Iteration   2: 1815627.962 ops/s
# Warmup Iteration   3: 1989580.152 ops/s
# Warmup Iteration   4: 2005777.858 ops/s
# Warmup Iteration   5: 1700632.826 ops/s
# Warmup Iteration   6: 1963078.666 ops/s
# Warmup Iteration   7: 2002577.485 ops/s
# Warmup Iteration   8: 2000079.668 ops/s
# Warmup Iteration   9: 2006411.643 ops/s
# Warmup Iteration  10: 2005113.225 ops/s
# Warmup Iteration  11: 2004759.612 ops/s
# Warmup Iteration  12: 2004689.823 ops/s
# Warmup Iteration  13: 1996221.990 ops/s
# Warmup Iteration  14: 2006025.092 ops/s
# Warmup Iteration  15: 2005010.523 ops/s
# Warmup Iteration  16: 2004578.693 ops/s
# Warmup Iteration  17: 2006493.860 ops/s
# Warmup Iteration  18: 2005889.462 ops/s
# Warmup Iteration  19: 2008036.579 ops/s
# Warmup Iteration  20: 2003419.479 ops/s
# Warmup Iteration  21: 2004750.107 ops/s
# Warmup Iteration  22: 2004630.980 ops/s
# Warmup Iteration  23: 2003810.470 ops/s
# Warmup Iteration  24: 2001809.433 ops/s
# Warmup Iteration  25: 1996814.412 ops/s
# Warmup Iteration  26: 2000963.966 ops/s
# Warmup Iteration  27: 2003060.511 ops/s
# Warmup Iteration  28: 1999820.197 ops/s
# Warmup Iteration  29: 2006757.930 ops/s
# Warmup Iteration  30: 2005496.979 ops/s
Iteration   1: 2005166.469 ops/s
Iteration   2: 2004940.784 ops/s
Iteration   3: 2008820.495 ops/s
Iteration   4: 2002528.474 ops/s
Iteration   5: 2005750.470 ops/s
Iteration   6: 1998137.457 ops/s
Iteration   7: 1991042.953 ops/s
Iteration   8: 2006126.060 ops/s
Iteration   9: 2007519.206 ops/s
Iteration  10: 2006052.971 ops/s
Iteration  11: 2008043.284 ops/s
Iteration  12: 2002242.782 ops/s
Iteration  13: 1999542.521 ops/s
Iteration  14: 2006426.498 ops/s
Iteration  15: 1988964.356 ops/s
Iteration  16: 2001802.223 ops/s
Iteration  17: 2007111.370 ops/s
Iteration  18: 2004715.673 ops/s
Iteration  19: 1998738.477 ops/s
Iteration  20: 2005239.250 ops/s
Iteration  21: 1999582.387 ops/s
Iteration  22: 2002538.756 ops/s
Iteration  23: 2008054.478 ops/s
Iteration  24: 1995735.058 ops/s
Iteration  25: 1997110.961 ops/s
Iteration  26: 2002909.544 ops/s
Iteration  27: 2003938.645 ops/s
Iteration  28: 1994112.010 ops/s
Iteration  29: 1998827.743 ops/s
Iteration  30: 2002166.688 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_injectIntoInt":
  2002129.601 ±(99.9%) 3392.179 ops/s [Average]
  (min, avg, max) = (1988964.356, 2002129.601, 2008820.495), stdev = 5077.254
  CI (99.9%): [1998737.423, 2005521.780] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_injectIntoInt  thrpt   30  2002129.601 ± 3392.179  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1010887.928 ops/s
# Warmup Iteration   2: 1926661.470 ops/s
# Warmup Iteration   3: 2077609.786 ops/s
# Warmup Iteration   4: 2092853.730 ops/s
# Warmup Iteration   5: 1874435.629 ops/s
# Warmup Iteration   6: 1944637.170 ops/s
# Warmup Iteration   7: 2094549.956 ops/s
# Warmup Iteration   8: 2096422.742 ops/s
# Warmup Iteration   9: 2092880.635 ops/s
# Warmup Iteration  10: 2087808.093 ops/s
# Warmup Iteration  11: 2087673.752 ops/s
# Warmup Iteration  12: 2090097.252 ops/s
# Warmup Iteration  13: 2092159.214 ops/s
# Warmup Iteration  14: 2089951.186 ops/s
# Warmup Iteration  15: 2093548.293 ops/s
# Warmup Iteration  16: 2094732.272 ops/s
# Warmup Iteration  17: 2095524.528 ops/s
# Warmup Iteration  18: 2092234.494 ops/s
# Warmup Iteration  19: 2091438.340 ops/s
# Warmup Iteration  20: 2090435.156 ops/s
# Warmup Iteration  21: 2093954.712 ops/s
# Warmup Iteration  22: 2094574.319 ops/s
# Warmup Iteration  23: 2092773.401 ops/s
# Warmup Iteration  24: 2094520.619 ops/s
# Warmup Iteration  25: 2091515.033 ops/s
# Warmup Iteration  26: 2094511.319 ops/s
# Warmup Iteration  27: 2093994.486 ops/s
# Warmup Iteration  28: 2088676.907 ops/s
# Warmup Iteration  29: 2091607.106 ops/s
# Warmup Iteration  30: 2094521.589 ops/s
Iteration   1: 2091751.838 ops/s
Iteration   2: 2093416.523 ops/s
Iteration   3: 2093687.405 ops/s
Iteration   4: 2090579.163 ops/s
Iteration   5: 2090673.072 ops/s
Iteration   6: 2093548.592 ops/s
Iteration   7: 2091122.755 ops/s
Iteration   8: 2094017.243 ops/s
Iteration   9: 2084977.443 ops/s
Iteration  10: 2084268.988 ops/s
Iteration  11: 2095545.725 ops/s
Iteration  12: 2093412.688 ops/s
Iteration  13: 2096426.266 ops/s
Iteration  14: 2092933.953 ops/s
Iteration  15: 2089333.447 ops/s
Iteration  16: 2089444.225 ops/s
Iteration  17: 2093227.539 ops/s
Iteration  18: 2091722.242 ops/s
Iteration  19: 2091934.762 ops/s
Iteration  20: 2090347.567 ops/s
Iteration  21: 2095432.374 ops/s
Iteration  22: 2088969.836 ops/s
Iteration  23: 2091003.196 ops/s
Iteration  24: 2093514.096 ops/s
Iteration  25: 2090375.417 ops/s
Iteration  26: 2087117.223 ops/s
Iteration  27: 2094390.139 ops/s
Iteration  28: 2089934.281 ops/s
Iteration  29: 2095169.974 ops/s
Iteration  30: 2088631.315 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_injectIntoLong":
  2091563.643 ±(99.9%) 1978.852 ops/s [Average]
  (min, avg, max) = (2084268.988, 2091563.643, 2096426.266), stdev = 2961.852
  CI (99.9%): [2089584.791, 2093542.495] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_injectIntoLong  thrpt   30  2091563.643 ± 1978.852  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2123261.511 ops/s
# Warmup Iteration   2: 3893393.852 ops/s
# Warmup Iteration   3: 4256186.559 ops/s
# Warmup Iteration   4: 4274730.674 ops/s
# Warmup Iteration   5: 3981540.955 ops/s
# Warmup Iteration   6: 3849181.516 ops/s
# Warmup Iteration   7: 4268396.422 ops/s
# Warmup Iteration   8: 4242490.119 ops/s
# Warmup Iteration   9: 4255435.166 ops/s
# Warmup Iteration  10: 4270956.362 ops/s
# Warmup Iteration  11: 4269845.459 ops/s
# Warmup Iteration  12: 4277103.554 ops/s
# Warmup Iteration  13: 4275140.907 ops/s
# Warmup Iteration  14: 4268860.433 ops/s
# Warmup Iteration  15: 4273249.610 ops/s
# Warmup Iteration  16: 4276574.259 ops/s
# Warmup Iteration  17: 4274093.986 ops/s
# Warmup Iteration  18: 4274838.647 ops/s
# Warmup Iteration  19: 4277075.802 ops/s
# Warmup Iteration  20: 4275259.878 ops/s
# Warmup Iteration  21: 4278866.936 ops/s
# Warmup Iteration  22: 4259680.251 ops/s
# Warmup Iteration  23: 4277880.339 ops/s
# Warmup Iteration  24: 4276628.534 ops/s
# Warmup Iteration  25: 4271815.633 ops/s
# Warmup Iteration  26: 4277767.093 ops/s
# Warmup Iteration  27: 4278406.982 ops/s
# Warmup Iteration  28: 4277385.131 ops/s
# Warmup Iteration  29: 4268995.988 ops/s
# Warmup Iteration  30: 4277581.550 ops/s
Iteration   1: 4278958.228 ops/s
Iteration   2: 4268425.482 ops/s
Iteration   3: 4272874.522 ops/s
Iteration   4: 4280915.753 ops/s
Iteration   5: 4275460.768 ops/s
Iteration   6: 4280219.676 ops/s
Iteration   7: 4277809.806 ops/s
Iteration   8: 4271792.988 ops/s
Iteration   9: 4284024.626 ops/s
Iteration  10: 4273743.250 ops/s
Iteration  11: 4284463.878 ops/s
Iteration  12: 4272606.029 ops/s
Iteration  13: 4271255.042 ops/s
Iteration  14: 4281274.984 ops/s
Iteration  15: 4271298.462 ops/s
Iteration  16: 4272386.560 ops/s
Iteration  17: 4263298.141 ops/s
Iteration  18: 4274432.945 ops/s
Iteration  19: 4278314.082 ops/s
Iteration  20: 4226773.895 ops/s
Iteration  21: 4275639.419 ops/s
Iteration  22: 4280885.720 ops/s
Iteration  23: 4268360.916 ops/s
Iteration  24: 4280478.399 ops/s
Iteration  25: 4276778.669 ops/s
Iteration  26: 4277770.595 ops/s
Iteration  27: 4273452.447 ops/s
Iteration  28: 4277448.965 ops/s
Iteration  29: 4279589.425 ops/s
Iteration  30: 4273609.596 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_isEmpty":
  4274144.776 ±(99.9%) 6795.023 ops/s [Average]
  (min, avg, max) = (4226773.895, 4274144.776, 4284463.878), stdev = 10170.471
  CI (99.9%): [4267349.753, 4280939.799] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_isEmpty  thrpt   30  4274144.776 ± 6795.023  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 263085.262 ops/s
# Warmup Iteration   2: 307667.713 ops/s
# Warmup Iteration   3: 398687.241 ops/s
# Warmup Iteration   4: 398272.875 ops/s
# Warmup Iteration   5: 395610.313 ops/s
# Warmup Iteration   6: 398965.776 ops/s
# Warmup Iteration   7: 398537.657 ops/s
# Warmup Iteration   8: 398742.382 ops/s
# Warmup Iteration   9: 398656.472 ops/s
# Warmup Iteration  10: 338607.503 ops/s
# Warmup Iteration  11: 399283.516 ops/s
# Warmup Iteration  12: 399410.610 ops/s
# Warmup Iteration  13: 396015.551 ops/s
# Warmup Iteration  14: 396234.069 ops/s
# Warmup Iteration  15: 397006.913 ops/s
# Warmup Iteration  16: 396883.720 ops/s
# Warmup Iteration  17: 417343.371 ops/s
# Warmup Iteration  18: 418838.880 ops/s
# Warmup Iteration  19: 417508.534 ops/s
# Warmup Iteration  20: 418494.693 ops/s
# Warmup Iteration  21: 417724.285 ops/s
# Warmup Iteration  22: 417819.901 ops/s
# Warmup Iteration  23: 417552.811 ops/s
# Warmup Iteration  24: 416403.931 ops/s
# Warmup Iteration  25: 417618.240 ops/s
# Warmup Iteration  26: 416610.787 ops/s
# Warmup Iteration  27: 419096.242 ops/s
# Warmup Iteration  28: 418589.017 ops/s
# Warmup Iteration  29: 418639.181 ops/s
# Warmup Iteration  30: 415071.037 ops/s
Iteration   1: 416936.516 ops/s
Iteration   2: 413936.279 ops/s
Iteration   3: 418708.273 ops/s
Iteration   4: 418451.331 ops/s
Iteration   5: 418721.507 ops/s
Iteration   6: 417865.948 ops/s
Iteration   7: 417303.394 ops/s
Iteration   8: 418765.870 ops/s
Iteration   9: 418472.559 ops/s
Iteration  10: 418852.423 ops/s
Iteration  11: 419549.155 ops/s
Iteration  12: 418732.683 ops/s
Iteration  13: 418817.423 ops/s
Iteration  14: 420569.784 ops/s
Iteration  15: 418076.087 ops/s
Iteration  16: 418351.523 ops/s
Iteration  17: 419392.829 ops/s
Iteration  18: 419122.924 ops/s
Iteration  19: 419980.622 ops/s
Iteration  20: 418282.107 ops/s
Iteration  21: 417487.771 ops/s
Iteration  22: 417528.608 ops/s
Iteration  23: 418872.190 ops/s
Iteration  24: 418745.728 ops/s
Iteration  25: 418414.304 ops/s
Iteration  26: 417633.274 ops/s
Iteration  27: 418739.273 ops/s
Iteration  28: 418021.093 ops/s
Iteration  29: 418403.261 ops/s
Iteration  30: 419007.711 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_iterator":
  418391.415 ±(99.9%) 761.648 ops/s [Average]
  (min, avg, max) = (413936.279, 418391.415, 420569.784), stdev = 1139.999
  CI (99.9%): [417629.767, 419153.063] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_iterator  thrpt   30  418391.415 ± 761.648  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 464426.577 ops/s
# Warmup Iteration   2: 601803.970 ops/s
# Warmup Iteration   3: 751881.894 ops/s
# Warmup Iteration   4: 746914.401 ops/s
# Warmup Iteration   5: 751966.034 ops/s
# Warmup Iteration   6: 750207.765 ops/s
# Warmup Iteration   7: 749496.943 ops/s
# Warmup Iteration   8: 732969.634 ops/s
# Warmup Iteration   9: 646557.634 ops/s
# Warmup Iteration  10: 749855.538 ops/s
# Warmup Iteration  11: 750452.697 ops/s
# Warmup Iteration  12: 752061.296 ops/s
# Warmup Iteration  13: 750539.980 ops/s
# Warmup Iteration  14: 751251.359 ops/s
# Warmup Iteration  15: 751552.068 ops/s
# Warmup Iteration  16: 750878.889 ops/s
# Warmup Iteration  17: 783361.161 ops/s
# Warmup Iteration  18: 788373.206 ops/s
# Warmup Iteration  19: 787256.285 ops/s
# Warmup Iteration  20: 785787.698 ops/s
# Warmup Iteration  21: 787103.879 ops/s
# Warmup Iteration  22: 788026.556 ops/s
# Warmup Iteration  23: 786589.256 ops/s
# Warmup Iteration  24: 784891.195 ops/s
# Warmup Iteration  25: 787382.063 ops/s
# Warmup Iteration  26: 789237.012 ops/s
# Warmup Iteration  27: 788175.166 ops/s
# Warmup Iteration  28: 784954.583 ops/s
# Warmup Iteration  29: 787112.802 ops/s
# Warmup Iteration  30: 787557.638 ops/s
Iteration   1: 786273.974 ops/s
Iteration   2: 789920.099 ops/s
Iteration   3: 786055.280 ops/s
Iteration   4: 787358.391 ops/s
Iteration   5: 785719.630 ops/s
Iteration   6: 786943.122 ops/s
Iteration   7: 787758.774 ops/s
Iteration   8: 788251.704 ops/s
Iteration   9: 786449.797 ops/s
Iteration  10: 787481.740 ops/s
Iteration  11: 789329.317 ops/s
Iteration  12: 787253.464 ops/s
Iteration  13: 786672.176 ops/s
Iteration  14: 787368.986 ops/s
Iteration  15: 789103.309 ops/s
Iteration  16: 791302.027 ops/s
Iteration  17: 787392.733 ops/s
Iteration  18: 789113.173 ops/s
Iteration  19: 790037.922 ops/s
Iteration  20: 787288.714 ops/s
Iteration  21: 789292.249 ops/s
Iteration  22: 788441.123 ops/s
Iteration  23: 787870.487 ops/s
Iteration  24: 789354.353 ops/s
Iteration  25: 783180.020 ops/s
Iteration  26: 786583.194 ops/s
Iteration  27: 787549.756 ops/s
Iteration  28: 785260.334 ops/s
Iteration  29: 789209.764 ops/s
Iteration  30: 789812.665 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_iteratorRemove":
  787787.609 ±(99.9%) 1129.628 ops/s [Average]
  (min, avg, max) = (783180.020, 787787.609, 791302.027), stdev = 1690.774
  CI (99.9%): [786657.981, 788917.237] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_iteratorRemove  thrpt   30  787787.609 ± 1129.628  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 584741.292 ops/s
# Warmup Iteration   2: 1170308.715 ops/s
# Warmup Iteration   3: 1245169.219 ops/s
# Warmup Iteration   4: 1252334.110 ops/s
# Warmup Iteration   5: 1046117.265 ops/s
# Warmup Iteration   6: 1252441.626 ops/s
# Warmup Iteration   7: 1249683.426 ops/s
# Warmup Iteration   8: 1251203.111 ops/s
# Warmup Iteration   9: 1250967.163 ops/s
# Warmup Iteration  10: 1251136.039 ops/s
# Warmup Iteration  11: 1251151.370 ops/s
# Warmup Iteration  12: 1251925.414 ops/s
# Warmup Iteration  13: 1249637.122 ops/s
# Warmup Iteration  14: 1251060.464 ops/s
# Warmup Iteration  15: 1250291.791 ops/s
# Warmup Iteration  16: 1252726.155 ops/s
# Warmup Iteration  17: 1261829.624 ops/s
# Warmup Iteration  18: 1261515.346 ops/s
# Warmup Iteration  19: 1262496.710 ops/s
# Warmup Iteration  20: 1262605.781 ops/s
# Warmup Iteration  21: 1261438.203 ops/s
# Warmup Iteration  22: 1262375.108 ops/s
# Warmup Iteration  23: 1261052.302 ops/s
# Warmup Iteration  24: 1263699.279 ops/s
# Warmup Iteration  25: 1264475.914 ops/s
# Warmup Iteration  26: 1262041.765 ops/s
# Warmup Iteration  27: 1263227.074 ops/s
# Warmup Iteration  28: 1263294.662 ops/s
# Warmup Iteration  29: 1262306.250 ops/s
# Warmup Iteration  30: 1260687.185 ops/s
Iteration   1: 1262943.922 ops/s
Iteration   2: 1217437.720 ops/s
Iteration   3: 1263428.757 ops/s
Iteration   4: 1262410.030 ops/s
Iteration   5: 1260225.229 ops/s
Iteration   6: 1263796.212 ops/s
Iteration   7: 1261905.079 ops/s
Iteration   8: 1261273.156 ops/s
Iteration   9: 1254482.151 ops/s
Iteration  10: 1258109.282 ops/s
Iteration  11: 1256903.378 ops/s
Iteration  12: 1259929.901 ops/s
Iteration  13: 1262975.371 ops/s
Iteration  14: 1263091.781 ops/s
Iteration  15: 1261660.414 ops/s
Iteration  16: 1263656.489 ops/s
Iteration  17: 1262499.158 ops/s
Iteration  18: 1262992.091 ops/s
Iteration  19: 1264167.152 ops/s
Iteration  20: 1261786.876 ops/s
Iteration  21: 1263811.951 ops/s
Iteration  22: 1264582.985 ops/s
Iteration  23: 1262762.759 ops/s
Iteration  24: 1255237.069 ops/s
Iteration  25: 1245631.824 ops/s
Iteration  26: 1259742.175 ops/s
Iteration  27: 1261852.445 ops/s
Iteration  28: 1265415.536 ops/s
Iteration  29: 1261148.284 ops/s
Iteration  30: 1261451.201 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_makeString":
  1259577.013 ±(99.9%) 5917.002 ops/s [Average]
  (min, avg, max) = (1217437.720, 1259577.013, 1265415.536), stdev = 8856.290
  CI (99.9%): [1253660.011, 1265494.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_makeString  thrpt   30  1259577.013 ± 5917.002  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1948992.664 ops/s
# Warmup Iteration   2: 3836559.573 ops/s
# Warmup Iteration   3: 4160717.869 ops/s
# Warmup Iteration   4: 4193344.515 ops/s
# Warmup Iteration   5: 3465520.728 ops/s
# Warmup Iteration   6: 4206090.853 ops/s
# Warmup Iteration   7: 4206804.971 ops/s
# Warmup Iteration   8: 4202429.521 ops/s
# Warmup Iteration   9: 4201760.901 ops/s
# Warmup Iteration  10: 4185441.989 ops/s
# Warmup Iteration  11: 4200774.641 ops/s
# Warmup Iteration  12: 4206306.769 ops/s
# Warmup Iteration  13: 4204897.712 ops/s
# Warmup Iteration  14: 4201624.019 ops/s
# Warmup Iteration  15: 4211303.327 ops/s
# Warmup Iteration  16: 4207514.571 ops/s
# Warmup Iteration  17: 4205458.021 ops/s
# Warmup Iteration  18: 4211773.960 ops/s
# Warmup Iteration  19: 4210981.460 ops/s
# Warmup Iteration  20: 4214360.750 ops/s
# Warmup Iteration  21: 4203348.676 ops/s
# Warmup Iteration  22: 4206093.883 ops/s
# Warmup Iteration  23: 4209482.698 ops/s
# Warmup Iteration  24: 4210312.328 ops/s
# Warmup Iteration  25: 4205369.299 ops/s
# Warmup Iteration  26: 4207433.823 ops/s
# Warmup Iteration  27: 4210251.828 ops/s
# Warmup Iteration  28: 4202524.126 ops/s
# Warmup Iteration  29: 4198237.251 ops/s
# Warmup Iteration  30: 4211844.907 ops/s
Iteration   1: 4201718.167 ops/s
Iteration   2: 4210998.895 ops/s
Iteration   3: 4214265.044 ops/s
Iteration   4: 4203991.479 ops/s
Iteration   5: 4200184.570 ops/s
Iteration   6: 4211527.948 ops/s
Iteration   7: 4204251.502 ops/s
Iteration   8: 4201123.231 ops/s
Iteration   9: 4213577.469 ops/s
Iteration  10: 4204723.521 ops/s
Iteration  11: 4210235.356 ops/s
Iteration  12: 4207705.257 ops/s
Iteration  13: 4203277.778 ops/s
Iteration  14: 4193756.807 ops/s
Iteration  15: 4220787.808 ops/s
Iteration  16: 4201878.928 ops/s
Iteration  17: 4209778.743 ops/s
Iteration  18: 4216613.878 ops/s
Iteration  19: 4209143.052 ops/s
Iteration  20: 4206676.765 ops/s
Iteration  21: 4213394.212 ops/s
Iteration  22: 4209903.231 ops/s
Iteration  23: 4207953.106 ops/s
Iteration  24: 4221157.093 ops/s
Iteration  25: 4213647.481 ops/s
Iteration  26: 4206890.443 ops/s
Iteration  27: 4215081.720 ops/s
Iteration  28: 4211393.110 ops/s
Iteration  29: 4207332.797 ops/s
Iteration  30: 4209293.646 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_max":
  4208742.101 ±(99.9%) 4074.130 ops/s [Average]
  (min, avg, max) = (4193756.807, 4208742.101, 4221157.093), stdev = 6097.967
  CI (99.9%): [4204667.971, 4212816.232] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_max  thrpt   30  4208742.101 ± 4074.130  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1741696.636 ops/s
# Warmup Iteration   2: 3761011.118 ops/s
# Warmup Iteration   3: 3902902.359 ops/s
# Warmup Iteration   4: 3920454.779 ops/s
# Warmup Iteration   5: 3271802.370 ops/s
# Warmup Iteration   6: 3937508.855 ops/s
# Warmup Iteration   7: 3937326.293 ops/s
# Warmup Iteration   8: 3934647.180 ops/s
# Warmup Iteration   9: 3937545.651 ops/s
# Warmup Iteration  10: 3929017.587 ops/s
# Warmup Iteration  11: 3926618.748 ops/s
# Warmup Iteration  12: 3933074.922 ops/s
# Warmup Iteration  13: 3929518.402 ops/s
# Warmup Iteration  14: 3938487.082 ops/s
# Warmup Iteration  15: 3937931.451 ops/s
# Warmup Iteration  16: 3936751.806 ops/s
# Warmup Iteration  17: 3935236.182 ops/s
# Warmup Iteration  18: 3939688.087 ops/s
# Warmup Iteration  19: 3932009.633 ops/s
# Warmup Iteration  20: 3930688.291 ops/s
# Warmup Iteration  21: 3935374.356 ops/s
# Warmup Iteration  22: 3940730.563 ops/s
# Warmup Iteration  23: 3937481.579 ops/s
# Warmup Iteration  24: 3936491.928 ops/s
# Warmup Iteration  25: 3933782.492 ops/s
# Warmup Iteration  26: 3940445.103 ops/s
# Warmup Iteration  27: 3932345.973 ops/s
# Warmup Iteration  28: 3936288.027 ops/s
# Warmup Iteration  29: 3936586.038 ops/s
# Warmup Iteration  30: 3935950.309 ops/s
Iteration   1: 3942981.031 ops/s
Iteration   2: 3939685.382 ops/s
Iteration   3: 3937046.339 ops/s
Iteration   4: 3928618.772 ops/s
Iteration   5: 3939341.747 ops/s
Iteration   6: 3932588.938 ops/s
Iteration   7: 3934660.318 ops/s
Iteration   8: 3936636.217 ops/s
Iteration   9: 3943614.754 ops/s
Iteration  10: 3951480.637 ops/s
Iteration  11: 3935993.979 ops/s
Iteration  12: 3919370.324 ops/s
Iteration  13: 3944444.471 ops/s
Iteration  14: 3936917.222 ops/s
Iteration  15: 3935892.191 ops/s
Iteration  16: 3937206.367 ops/s
Iteration  17: 3943878.663 ops/s
Iteration  18: 3935488.484 ops/s
Iteration  19: 3938125.653 ops/s
Iteration  20: 3935318.613 ops/s
Iteration  21: 3946015.225 ops/s
Iteration  22: 3943365.193 ops/s
Iteration  23: 3935421.389 ops/s
Iteration  24: 3932675.580 ops/s
Iteration  25: 3942299.096 ops/s
Iteration  26: 3940066.515 ops/s
Iteration  27: 3939152.698 ops/s
Iteration  28: 3901429.802 ops/s
Iteration  29: 3928769.925 ops/s
Iteration  30: 3944768.489 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_maxBy":
  3936775.134 ±(99.9%) 6073.302 ops/s [Average]
  (min, avg, max) = (3901429.802, 3936775.134, 3951480.637), stdev = 9090.234
  CI (99.9%): [3930701.831, 3942848.436] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_maxBy  thrpt   30  3936775.134 ± 6073.302  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1212526.329 ops/s
# Warmup Iteration   2: 2446775.788 ops/s
# Warmup Iteration   3: 2694166.033 ops/s
# Warmup Iteration   4: 2707957.344 ops/s
# Warmup Iteration   5: 2231987.497 ops/s
# Warmup Iteration   6: 2713741.689 ops/s
# Warmup Iteration   7: 2709044.646 ops/s
# Warmup Iteration   8: 2701950.212 ops/s
# Warmup Iteration   9: 2712250.205 ops/s
# Warmup Iteration  10: 2712959.697 ops/s
# Warmup Iteration  11: 2714706.204 ops/s
# Warmup Iteration  12: 2713846.669 ops/s
# Warmup Iteration  13: 2716530.765 ops/s
# Warmup Iteration  14: 2715535.028 ops/s
# Warmup Iteration  15: 2710219.652 ops/s
# Warmup Iteration  16: 2713979.578 ops/s
# Warmup Iteration  17: 2712024.664 ops/s
# Warmup Iteration  18: 2713044.600 ops/s
# Warmup Iteration  19: 2713535.185 ops/s
# Warmup Iteration  20: 2711364.429 ops/s
# Warmup Iteration  21: 2709719.715 ops/s
# Warmup Iteration  22: 2709170.225 ops/s
# Warmup Iteration  23: 2702315.654 ops/s
# Warmup Iteration  24: 2707030.602 ops/s
# Warmup Iteration  25: 2710945.240 ops/s
# Warmup Iteration  26: 2708740.784 ops/s
# Warmup Iteration  27: 2713060.902 ops/s
# Warmup Iteration  28: 2703877.319 ops/s
# Warmup Iteration  29: 2713315.266 ops/s
# Warmup Iteration  30: 2713887.262 ops/s
Iteration   1: 2713490.192 ops/s
Iteration   2: 2709884.706 ops/s
Iteration   3: 2719032.200 ops/s
Iteration   4: 2713230.475 ops/s
Iteration   5: 2712119.772 ops/s
Iteration   6: 2710837.274 ops/s
Iteration   7: 2693813.380 ops/s
Iteration   8: 2713784.694 ops/s
Iteration   9: 2710777.740 ops/s
Iteration  10: 2716534.204 ops/s
Iteration  11: 2705026.539 ops/s
Iteration  12: 2713609.095 ops/s
Iteration  13: 2715344.901 ops/s
Iteration  14: 2709578.552 ops/s
Iteration  15: 2707838.943 ops/s
Iteration  16: 2715821.064 ops/s
Iteration  17: 2712037.635 ops/s
Iteration  18: 2710151.973 ops/s
Iteration  19: 2692289.111 ops/s
Iteration  20: 2715034.617 ops/s
Iteration  21: 2709943.531 ops/s
Iteration  22: 2714869.012 ops/s
Iteration  23: 2714561.870 ops/s
Iteration  24: 2709183.750 ops/s
Iteration  25: 2710508.298 ops/s
Iteration  26: 2714584.786 ops/s
Iteration  27: 2709052.006 ops/s
Iteration  28: 2706408.046 ops/s
Iteration  29: 2714056.870 ops/s
Iteration  30: 2704525.997 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_max_null_throws":
  2710597.708 ±(99.9%) 3910.067 ops/s [Average]
  (min, avg, max) = (2692289.111, 2710597.708, 2719032.200), stdev = 5852.405
  CI (99.9%): [2706687.641, 2714507.775] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_max_null_throws  thrpt   30  2710597.708 ± 3910.067  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1210232.705 ops/s
# Warmup Iteration   2: 2459684.074 ops/s
# Warmup Iteration   3: 2678285.210 ops/s
# Warmup Iteration   4: 2698969.758 ops/s
# Warmup Iteration   5: 2236816.198 ops/s
# Warmup Iteration   6: 2712134.681 ops/s
# Warmup Iteration   7: 2708280.893 ops/s
# Warmup Iteration   8: 2705261.514 ops/s
# Warmup Iteration   9: 2709620.329 ops/s
# Warmup Iteration  10: 2709049.081 ops/s
# Warmup Iteration  11: 2710368.123 ops/s
# Warmup Iteration  12: 2711252.227 ops/s
# Warmup Iteration  13: 2711238.011 ops/s
# Warmup Iteration  14: 2707407.725 ops/s
# Warmup Iteration  15: 2697383.261 ops/s
# Warmup Iteration  16: 2711637.582 ops/s
# Warmup Iteration  17: 2709748.731 ops/s
# Warmup Iteration  18: 2697717.402 ops/s
# Warmup Iteration  19: 2709258.088 ops/s
# Warmup Iteration  20: 2709040.599 ops/s
# Warmup Iteration  21: 2706194.147 ops/s
# Warmup Iteration  22: 2704287.995 ops/s
# Warmup Iteration  23: 2704313.152 ops/s
# Warmup Iteration  24: 2708904.820 ops/s
# Warmup Iteration  25: 2709349.553 ops/s
# Warmup Iteration  26: 2708846.881 ops/s
# Warmup Iteration  27: 2706481.763 ops/s
# Warmup Iteration  28: 2696975.217 ops/s
# Warmup Iteration  29: 2711283.535 ops/s
# Warmup Iteration  30: 2710662.152 ops/s
Iteration   1: 2709052.053 ops/s
Iteration   2: 2704847.775 ops/s
Iteration   3: 2712167.161 ops/s
Iteration   4: 2706117.170 ops/s
Iteration   5: 2707402.294 ops/s
Iteration   6: 2710510.547 ops/s
Iteration   7: 2705625.349 ops/s
Iteration   8: 2705781.913 ops/s
Iteration   9: 2707332.100 ops/s
Iteration  10: 2711317.212 ops/s
Iteration  11: 2706553.123 ops/s
Iteration  12: 2707085.649 ops/s
Iteration  13: 2713105.802 ops/s
Iteration  14: 2711422.804 ops/s
Iteration  15: 2704308.617 ops/s
Iteration  16: 2710689.698 ops/s
Iteration  17: 2711001.656 ops/s
Iteration  18: 2707414.163 ops/s
Iteration  19: 2714015.357 ops/s
Iteration  20: 2709982.124 ops/s
Iteration  21: 2708011.643 ops/s
Iteration  22: 2708435.827 ops/s
Iteration  23: 2709658.592 ops/s
Iteration  24: 2704778.014 ops/s
Iteration  25: 2703334.761 ops/s
Iteration  26: 2709923.563 ops/s
Iteration  27: 2699606.060 ops/s
Iteration  28: 2702680.397 ops/s
Iteration  29: 2710549.155 ops/s
Iteration  30: 2710297.609 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_max_null_throws_without_comparator":
  2708100.273 ±(99.9%) 2221.717 ops/s [Average]
  (min, avg, max) = (2699606.060, 2708100.273, 2714015.357), stdev = 3325.362
  CI (99.9%): [2705878.556, 2710321.990] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  2708100.273 ± 2221.717  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2160861.020 ops/s
# Warmup Iteration   2: 4126358.683 ops/s
# Warmup Iteration   3: 4488941.088 ops/s
# Warmup Iteration   4: 4519657.639 ops/s
# Warmup Iteration   5: 3732262.871 ops/s
# Warmup Iteration   6: 4524462.399 ops/s
# Warmup Iteration   7: 4523910.862 ops/s
# Warmup Iteration   8: 4519416.947 ops/s
# Warmup Iteration   9: 4505369.886 ops/s
# Warmup Iteration  10: 4424596.610 ops/s
# Warmup Iteration  11: 4468507.880 ops/s
# Warmup Iteration  12: 4451242.342 ops/s
# Warmup Iteration  13: 4366104.756 ops/s
# Warmup Iteration  14: 4446294.835 ops/s
# Warmup Iteration  15: 4501531.637 ops/s
# Warmup Iteration  16: 4500538.582 ops/s
# Warmup Iteration  17: 4501003.975 ops/s
# Warmup Iteration  18: 4502645.294 ops/s
# Warmup Iteration  19: 4519977.508 ops/s
# Warmup Iteration  20: 4524431.649 ops/s
# Warmup Iteration  21: 4522273.357 ops/s
# Warmup Iteration  22: 4521407.976 ops/s
# Warmup Iteration  23: 4516250.805 ops/s
# Warmup Iteration  24: 4521148.285 ops/s
# Warmup Iteration  25: 4521734.253 ops/s
# Warmup Iteration  26: 4517323.731 ops/s
# Warmup Iteration  27: 4527595.996 ops/s
# Warmup Iteration  28: 4520349.493 ops/s
# Warmup Iteration  29: 4524944.932 ops/s
# Warmup Iteration  30: 4430189.827 ops/s
Iteration   1: 4522953.845 ops/s
Iteration   2: 4520832.637 ops/s
Iteration   3: 4511823.620 ops/s
Iteration   4: 4523134.024 ops/s
Iteration   5: 4521872.633 ops/s
Iteration   6: 4511420.636 ops/s
Iteration   7: 4518899.826 ops/s
Iteration   8: 4512655.116 ops/s
Iteration   9: 4504434.452 ops/s
Iteration  10: 4497642.505 ops/s
Iteration  11: 4509300.675 ops/s
Iteration  12: 4526416.031 ops/s
Iteration  13: 4518952.597 ops/s
Iteration  14: 4522748.535 ops/s
Iteration  15: 4526976.202 ops/s
Iteration  16: 4516337.768 ops/s
Iteration  17: 4513716.152 ops/s
Iteration  18: 4529888.517 ops/s
Iteration  19: 4523051.478 ops/s
Iteration  20: 4520326.697 ops/s
Iteration  21: 4530348.669 ops/s
Iteration  22: 4516651.162 ops/s
Iteration  23: 4522910.092 ops/s
Iteration  24: 4500141.915 ops/s
Iteration  25: 4508227.938 ops/s
Iteration  26: 4529729.862 ops/s
Iteration  27: 4519231.815 ops/s
Iteration  28: 4516192.513 ops/s
Iteration  29: 4526073.260 ops/s
Iteration  30: 4516760.126 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_max_without_comparator":
  4517988.377 ±(99.9%) 5588.471 ops/s [Average]
  (min, avg, max) = (4497642.505, 4517988.377, 4530348.669), stdev = 8364.560
  CI (99.9%): [4512399.906, 4523576.847] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_max_without_comparator  thrpt   30  4517988.377 ± 5588.471  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1960112.058 ops/s
# Warmup Iteration   2: 3840098.605 ops/s
# Warmup Iteration   3: 4170866.060 ops/s
# Warmup Iteration   4: 4187534.562 ops/s
# Warmup Iteration   5: 3481407.525 ops/s
# Warmup Iteration   6: 4195956.561 ops/s
# Warmup Iteration   7: 4195436.213 ops/s
# Warmup Iteration   8: 4190359.432 ops/s
# Warmup Iteration   9: 4193706.882 ops/s
# Warmup Iteration  10: 4191374.769 ops/s
# Warmup Iteration  11: 4184090.476 ops/s
# Warmup Iteration  12: 4187014.875 ops/s
# Warmup Iteration  13: 4189117.161 ops/s
# Warmup Iteration  14: 4190989.507 ops/s
# Warmup Iteration  15: 4192282.819 ops/s
# Warmup Iteration  16: 4194042.119 ops/s
# Warmup Iteration  17: 4182491.515 ops/s
# Warmup Iteration  18: 4181695.045 ops/s
# Warmup Iteration  19: 4183562.304 ops/s
# Warmup Iteration  20: 4180354.108 ops/s
# Warmup Iteration  21: 4184798.582 ops/s
# Warmup Iteration  22: 4184574.608 ops/s
# Warmup Iteration  23: 4178420.117 ops/s
# Warmup Iteration  24: 4181629.019 ops/s
# Warmup Iteration  25: 4169417.013 ops/s
# Warmup Iteration  26: 4174589.082 ops/s
# Warmup Iteration  27: 4186598.475 ops/s
# Warmup Iteration  28: 4183832.738 ops/s
# Warmup Iteration  29: 4179021.551 ops/s
# Warmup Iteration  30: 4184909.917 ops/s
Iteration   1: 4179333.659 ops/s
Iteration   2: 4148294.714 ops/s
Iteration   3: 4181629.972 ops/s
Iteration   4: 4163008.527 ops/s
Iteration   5: 4197695.369 ops/s
Iteration   6: 4180406.404 ops/s
Iteration   7: 4175202.014 ops/s
Iteration   8: 4185528.792 ops/s
Iteration   9: 4177578.370 ops/s
Iteration  10: 4185895.909 ops/s
Iteration  11: 4186152.155 ops/s
Iteration  12: 4177300.115 ops/s
Iteration  13: 4180674.707 ops/s
Iteration  14: 4177990.322 ops/s
Iteration  15: 4159335.332 ops/s
Iteration  16: 4177933.541 ops/s
Iteration  17: 4186145.155 ops/s
Iteration  18: 4178129.372 ops/s
Iteration  19: 4175484.515 ops/s
Iteration  20: 4186618.699 ops/s
Iteration  21: 4164715.427 ops/s
Iteration  22: 4051488.210 ops/s
Iteration  23: 4188465.758 ops/s
Iteration  24: 4181637.172 ops/s
Iteration  25: 4175646.905 ops/s
Iteration  26: 4176316.087 ops/s
Iteration  27: 4184167.280 ops/s
Iteration  28: 4179076.658 ops/s
Iteration  29: 4188629.792 ops/s
Iteration  30: 4171249.168 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_min":
  4174057.670 ±(99.9%) 16763.364 ops/s [Average]
  (min, avg, max) = (4051488.210, 4174057.670, 4197695.369), stdev = 25090.615
  CI (99.9%): [4157294.306, 4190821.034] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_min  thrpt   30  4174057.670 ± 16763.364  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 902985.881 ops/s
# Warmup Iteration   2: 1759550.673 ops/s
# Warmup Iteration   3: 1898365.135 ops/s
# Warmup Iteration   4: 1913272.417 ops/s
# Warmup Iteration   5: 1598590.328 ops/s
# Warmup Iteration   6: 1923581.034 ops/s
# Warmup Iteration   7: 1923896.271 ops/s
# Warmup Iteration   8: 1923881.218 ops/s
# Warmup Iteration   9: 1924119.648 ops/s
# Warmup Iteration  10: 1922993.451 ops/s
# Warmup Iteration  11: 1922603.381 ops/s
# Warmup Iteration  12: 1922457.699 ops/s
# Warmup Iteration  13: 1924282.395 ops/s
# Warmup Iteration  14: 1922652.954 ops/s
# Warmup Iteration  15: 1923558.309 ops/s
# Warmup Iteration  16: 1922255.491 ops/s
# Warmup Iteration  17: 1928624.008 ops/s
# Warmup Iteration  18: 1932469.100 ops/s
# Warmup Iteration  19: 1931908.234 ops/s
# Warmup Iteration  20: 1928720.867 ops/s
# Warmup Iteration  21: 1929921.641 ops/s
# Warmup Iteration  22: 1932021.123 ops/s
# Warmup Iteration  23: 1929811.489 ops/s
# Warmup Iteration  24: 1931577.487 ops/s
# Warmup Iteration  25: 1933216.888 ops/s
# Warmup Iteration  26: 1930387.849 ops/s
# Warmup Iteration  27: 1932867.744 ops/s
# Warmup Iteration  28: 1932375.609 ops/s
# Warmup Iteration  29: 1929211.470 ops/s
# Warmup Iteration  30: 1930822.947 ops/s
Iteration   1: 1931881.271 ops/s
Iteration   2: 1921644.316 ops/s
Iteration   3: 1930872.846 ops/s
Iteration   4: 1924504.590 ops/s
Iteration   5: 1925425.997 ops/s
Iteration   6: 1928832.083 ops/s
Iteration   7: 1931040.766 ops/s
Iteration   8: 1928773.592 ops/s
Iteration   9: 1929315.884 ops/s
Iteration  10: 1928888.311 ops/s
Iteration  11: 1927875.480 ops/s
Iteration  12: 1933336.342 ops/s
Iteration  13: 1923957.477 ops/s
Iteration  14: 1927572.568 ops/s
Iteration  15: 1933473.965 ops/s
Iteration  16: 1928876.620 ops/s
Iteration  17: 1927537.383 ops/s
Iteration  18: 1914801.744 ops/s
Iteration  19: 1920004.378 ops/s
Iteration  20: 1927640.503 ops/s
Iteration  21: 1933571.162 ops/s
Iteration  22: 1930559.827 ops/s
Iteration  23: 1929832.578 ops/s
Iteration  24: 1934694.706 ops/s
Iteration  25: 1929959.944 ops/s
Iteration  26: 1929587.977 ops/s
Iteration  27: 1934879.846 ops/s
Iteration  28: 1927647.854 ops/s
Iteration  29: 1932368.093 ops/s
Iteration  30: 1934052.196 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_minBy":
  1928780.343 ±(99.9%) 3005.506 ops/s [Average]
  (min, avg, max) = (1914801.744, 1928780.343, 1934879.846), stdev = 4498.500
  CI (99.9%): [1925774.837, 1931785.849] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_minBy  thrpt   30  1928780.343 ± 3005.506  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1229339.952 ops/s
# Warmup Iteration   2: 2487889.309 ops/s
# Warmup Iteration   3: 2691239.853 ops/s
# Warmup Iteration   4: 2706503.205 ops/s
# Warmup Iteration   5: 2242228.169 ops/s
# Warmup Iteration   6: 2716339.715 ops/s
# Warmup Iteration   7: 2712766.034 ops/s
# Warmup Iteration   8: 2714969.789 ops/s
# Warmup Iteration   9: 2712819.594 ops/s
# Warmup Iteration  10: 2710642.670 ops/s
# Warmup Iteration  11: 2714190.033 ops/s
# Warmup Iteration  12: 2708308.493 ops/s
# Warmup Iteration  13: 2717127.148 ops/s
# Warmup Iteration  14: 2713055.272 ops/s
# Warmup Iteration  15: 2710281.292 ops/s
# Warmup Iteration  16: 2708986.659 ops/s
# Warmup Iteration  17: 2711228.679 ops/s
# Warmup Iteration  18: 2707208.410 ops/s
# Warmup Iteration  19: 2717155.198 ops/s
# Warmup Iteration  20: 2714102.136 ops/s
# Warmup Iteration  21: 2715991.511 ops/s
# Warmup Iteration  22: 2715759.881 ops/s
# Warmup Iteration  23: 2710557.984 ops/s
# Warmup Iteration  24: 2714682.954 ops/s
# Warmup Iteration  25: 2712391.692 ops/s
# Warmup Iteration  26: 2704090.360 ops/s
# Warmup Iteration  27: 2715948.483 ops/s
# Warmup Iteration  28: 2714680.997 ops/s
# Warmup Iteration  29: 2717239.691 ops/s
# Warmup Iteration  30: 2717464.277 ops/s
Iteration   1: 2711056.979 ops/s
Iteration   2: 2714252.974 ops/s
Iteration   3: 2712734.539 ops/s
Iteration   4: 2719027.201 ops/s
Iteration   5: 2716230.534 ops/s
Iteration   6: 2710296.412 ops/s
Iteration   7: 2711897.887 ops/s
Iteration   8: 2712608.763 ops/s
Iteration   9: 2713399.642 ops/s
Iteration  10: 2719866.408 ops/s
Iteration  11: 2714788.443 ops/s
Iteration  12: 2714390.230 ops/s
Iteration  13: 2718094.484 ops/s
Iteration  14: 2712070.616 ops/s
Iteration  15: 2717021.968 ops/s
Iteration  16: 2715373.153 ops/s
Iteration  17: 2719606.783 ops/s
Iteration  18: 2712426.058 ops/s
Iteration  19: 2712142.578 ops/s
Iteration  20: 2717666.029 ops/s
Iteration  21: 2713615.355 ops/s
Iteration  22: 2712063.850 ops/s
Iteration  23: 2715370.953 ops/s
Iteration  24: 2714234.188 ops/s
Iteration  25: 2711389.346 ops/s
Iteration  26: 2718048.990 ops/s
Iteration  27: 2714333.304 ops/s
Iteration  28: 2712176.694 ops/s
Iteration  29: 2719953.509 ops/s
Iteration  30: 2722596.344 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_min_null_throws":
  2714957.807 ±(99.9%) 2122.930 ops/s [Average]
  (min, avg, max) = (2710296.412, 2714957.807, 2722596.344), stdev = 3177.502
  CI (99.9%): [2712834.877, 2717080.737] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_min_null_throws  thrpt   30  2714957.807 ± 2122.930  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1211173.102 ops/s
# Warmup Iteration   2: 2441073.216 ops/s
# Warmup Iteration   3: 2695029.474 ops/s
# Warmup Iteration   4: 2712237.031 ops/s
# Warmup Iteration   5: 2234648.211 ops/s
# Warmup Iteration   6: 2718153.113 ops/s
# Warmup Iteration   7: 2716865.025 ops/s
# Warmup Iteration   8: 2703617.726 ops/s
# Warmup Iteration   9: 2713150.727 ops/s
# Warmup Iteration  10: 2710687.820 ops/s
# Warmup Iteration  11: 2712036.585 ops/s
# Warmup Iteration  12: 2710295.090 ops/s
# Warmup Iteration  13: 2720198.443 ops/s
# Warmup Iteration  14: 2714718.898 ops/s
# Warmup Iteration  15: 2713316.596 ops/s
# Warmup Iteration  16: 2714749.902 ops/s
# Warmup Iteration  17: 2713564.822 ops/s
# Warmup Iteration  18: 2717377.902 ops/s
# Warmup Iteration  19: 2722704.539 ops/s
# Warmup Iteration  20: 2713889.155 ops/s
# Warmup Iteration  21: 2718601.725 ops/s
# Warmup Iteration  22: 2719004.902 ops/s
# Warmup Iteration  23: 2717702.214 ops/s
# Warmup Iteration  24: 2720592.318 ops/s
# Warmup Iteration  25: 2712688.591 ops/s
# Warmup Iteration  26: 2712952.378 ops/s
# Warmup Iteration  27: 2716878.670 ops/s
# Warmup Iteration  28: 2716192.443 ops/s
# Warmup Iteration  29: 2717421.806 ops/s
# Warmup Iteration  30: 2719521.182 ops/s
Iteration   1: 2714613.595 ops/s
Iteration   2: 2717387.675 ops/s
Iteration   3: 2716580.605 ops/s
Iteration   4: 2721490.571 ops/s
Iteration   5: 2706805.017 ops/s
Iteration   6: 2718621.030 ops/s
Iteration   7: 2716884.997 ops/s
Iteration   8: 2721327.823 ops/s
Iteration   9: 2711866.503 ops/s
Iteration  10: 2721096.832 ops/s
Iteration  11: 2716861.454 ops/s
Iteration  12: 2718084.470 ops/s
Iteration  13: 2720335.342 ops/s
Iteration  14: 2715469.670 ops/s
Iteration  15: 2717839.853 ops/s
Iteration  16: 2684177.590 ops/s
Iteration  17: 2717956.269 ops/s
Iteration  18: 2715856.762 ops/s
Iteration  19: 2716378.626 ops/s
Iteration  20: 2723339.455 ops/s
Iteration  21: 2718081.804 ops/s
Iteration  22: 2705049.000 ops/s
Iteration  23: 2721128.664 ops/s
Iteration  24: 2716313.458 ops/s
Iteration  25: 2720506.713 ops/s
Iteration  26: 2721949.778 ops/s
Iteration  27: 2714492.685 ops/s
Iteration  28: 2715453.326 ops/s
Iteration  29: 2714635.081 ops/s
Iteration  30: 2721873.459 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_min_null_throws_without_comparator":
  2716081.937 ±(99.9%) 4870.504 ops/s [Average]
  (min, avg, max) = (2684177.590, 2716081.937, 2723339.455), stdev = 7289.941
  CI (99.9%): [2711211.433, 2720952.441] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  2716081.937 ± 4870.504  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1971189.002 ops/s
# Warmup Iteration   2: 3907256.799 ops/s
# Warmup Iteration   3: 4206235.465 ops/s
# Warmup Iteration   4: 4250677.806 ops/s
# Warmup Iteration   5: 3514369.728 ops/s
# Warmup Iteration   6: 4228501.160 ops/s
# Warmup Iteration   7: 4224416.905 ops/s
# Warmup Iteration   8: 4220396.249 ops/s
# Warmup Iteration   9: 4222899.817 ops/s
# Warmup Iteration  10: 4217471.318 ops/s
# Warmup Iteration  11: 4215580.476 ops/s
# Warmup Iteration  12: 4225486.934 ops/s
# Warmup Iteration  13: 4217407.814 ops/s
# Warmup Iteration  14: 4223075.595 ops/s
# Warmup Iteration  15: 4226162.195 ops/s
# Warmup Iteration  16: 4220541.920 ops/s
# Warmup Iteration  17: 4228125.832 ops/s
# Warmup Iteration  18: 4226677.952 ops/s
# Warmup Iteration  19: 4219601.636 ops/s
# Warmup Iteration  20: 4214928.663 ops/s
# Warmup Iteration  21: 4220590.181 ops/s
# Warmup Iteration  22: 4209387.552 ops/s
# Warmup Iteration  23: 4222473.490 ops/s
# Warmup Iteration  24: 4230156.330 ops/s
# Warmup Iteration  25: 4219563.671 ops/s
# Warmup Iteration  26: 4227303.590 ops/s
# Warmup Iteration  27: 4232061.731 ops/s
# Warmup Iteration  28: 4223409.744 ops/s
# Warmup Iteration  29: 4231098.774 ops/s
# Warmup Iteration  30: 4220667.528 ops/s
Iteration   1: 4235637.985 ops/s
Iteration   2: 4225449.281 ops/s
Iteration   3: 4222213.025 ops/s
Iteration   4: 4231177.717 ops/s
Iteration   5: 4228137.433 ops/s
Iteration   6: 4228975.690 ops/s
Iteration   7: 4233887.355 ops/s
Iteration   8: 4227092.660 ops/s
Iteration   9: 4226875.682 ops/s
Iteration  10: 4234195.612 ops/s
Iteration  11: 4229429.344 ops/s
Iteration  12: 4218405.426 ops/s
Iteration  13: 4234972.462 ops/s
Iteration  14: 4224650.708 ops/s
Iteration  15: 4225891.920 ops/s
Iteration  16: 4228432.647 ops/s
Iteration  17: 4221604.273 ops/s
Iteration  18: 4219845.829 ops/s
Iteration  19: 4228606.532 ops/s
Iteration  20: 4222428.876 ops/s
Iteration  21: 4221684.361 ops/s
Iteration  22: 4236372.065 ops/s
Iteration  23: 4232371.743 ops/s
Iteration  24: 4215599.347 ops/s
Iteration  25: 4234662.471 ops/s
Iteration  26: 4230179.411 ops/s
Iteration  27: 4225462.791 ops/s
Iteration  28: 4231632.376 ops/s
Iteration  29: 4224735.591 ops/s
Iteration  30: 4225651.385 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_min_without_comparator":
  4227542.067 ±(99.9%) 3603.069 ops/s [Average]
  (min, avg, max) = (4215599.347, 4227542.067, 4236372.065), stdev = 5392.905
  CI (99.9%): [4223938.998, 4231145.136] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_min_without_comparator  thrpt   30  4227542.067 ± 3603.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_newWithAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_newWithAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 354280.880 ops/s
# Warmup Iteration   2: 605084.737 ops/s
# Warmup Iteration   3: 736256.860 ops/s
# Warmup Iteration   4: 741522.120 ops/s
# Warmup Iteration   5: 741223.126 ops/s
# Warmup Iteration   6: 726682.551 ops/s
# Warmup Iteration   7: 629821.240 ops/s
# Warmup Iteration   8: 740343.752 ops/s
# Warmup Iteration   9: 741926.313 ops/s
# Warmup Iteration  10: 742123.246 ops/s
# Warmup Iteration  11: 742134.238 ops/s
# Warmup Iteration  12: 740385.629 ops/s
# Warmup Iteration  13: 739633.535 ops/s
# Warmup Iteration  14: 740536.797 ops/s
# Warmup Iteration  15: 741616.627 ops/s
# Warmup Iteration  16: 741830.823 ops/s
# Warmup Iteration  17: 740071.279 ops/s
# Warmup Iteration  18: 740981.993 ops/s
# Warmup Iteration  19: 741162.177 ops/s
# Warmup Iteration  20: 740843.681 ops/s
# Warmup Iteration  21: 740960.254 ops/s
# Warmup Iteration  22: 740711.858 ops/s
# Warmup Iteration  23: 741650.616 ops/s
# Warmup Iteration  24: 740881.835 ops/s
# Warmup Iteration  25: 740249.383 ops/s
# Warmup Iteration  26: 741086.618 ops/s
# Warmup Iteration  27: 741343.493 ops/s
# Warmup Iteration  28: 742252.469 ops/s
# Warmup Iteration  29: 741937.175 ops/s
# Warmup Iteration  30: 741784.500 ops/s
Iteration   1: 742156.337 ops/s
Iteration   2: 740503.620 ops/s
Iteration   3: 742117.225 ops/s
Iteration   4: 740744.193 ops/s
Iteration   5: 741138.601 ops/s
Iteration   6: 741135.844 ops/s
Iteration   7: 741438.192 ops/s
Iteration   8: 740917.651 ops/s
Iteration   9: 741898.831 ops/s
Iteration  10: 739899.766 ops/s
Iteration  11: 740349.872 ops/s
Iteration  12: 740116.095 ops/s
Iteration  13: 741861.918 ops/s
Iteration  14: 737941.929 ops/s
Iteration  15: 742017.802 ops/s
Iteration  16: 740534.965 ops/s
Iteration  17: 742389.724 ops/s
Iteration  18: 739918.578 ops/s
Iteration  19: 741037.971 ops/s
Iteration  20: 740311.923 ops/s
Iteration  21: 741641.940 ops/s
Iteration  22: 739568.692 ops/s
Iteration  23: 740541.426 ops/s
Iteration  24: 741019.438 ops/s
Iteration  25: 741511.525 ops/s
Iteration  26: 740113.714 ops/s
Iteration  27: 741689.811 ops/s
Iteration  28: 739383.516 ops/s
Iteration  29: 741496.380 ops/s
Iteration  30: 741790.673 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_newWithAll":
  740906.272 ±(99.9%) 664.578 ops/s [Average]
  (min, avg, max) = (737941.929, 740906.272, 742389.724), stdev = 994.710
  CI (99.9%): [740241.693, 741570.850] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_newWithAll  thrpt   30  740906.272 ± 664.578  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_newWithTest$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_newWithTest

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 126517.636 ops/s
# Warmup Iteration   2: 228087.408 ops/s
# Warmup Iteration   3: 260998.266 ops/s
# Warmup Iteration   4: 262171.442 ops/s
# Warmup Iteration   5: 262317.485 ops/s
# Warmup Iteration   6: 219772.117 ops/s
# Warmup Iteration   7: 262536.546 ops/s
# Warmup Iteration   8: 262458.741 ops/s
# Warmup Iteration   9: 262521.294 ops/s
# Warmup Iteration  10: 262649.539 ops/s
# Warmup Iteration  11: 262303.330 ops/s
# Warmup Iteration  12: 262569.241 ops/s
# Warmup Iteration  13: 261074.208 ops/s
# Warmup Iteration  14: 262229.304 ops/s
# Warmup Iteration  15: 261731.357 ops/s
# Warmup Iteration  16: 262442.290 ops/s
# Warmup Iteration  17: 262043.304 ops/s
# Warmup Iteration  18: 261655.923 ops/s
# Warmup Iteration  19: 262135.242 ops/s
# Warmup Iteration  20: 260342.029 ops/s
# Warmup Iteration  21: 262216.109 ops/s
# Warmup Iteration  22: 261490.453 ops/s
# Warmup Iteration  23: 262394.387 ops/s
# Warmup Iteration  24: 262308.141 ops/s
# Warmup Iteration  25: 261840.263 ops/s
# Warmup Iteration  26: 262445.685 ops/s
# Warmup Iteration  27: 262101.718 ops/s
# Warmup Iteration  28: 262410.563 ops/s
# Warmup Iteration  29: 261723.768 ops/s
# Warmup Iteration  30: 262434.590 ops/s
Iteration   1: 262775.971 ops/s
Iteration   2: 262184.987 ops/s
Iteration   3: 262171.852 ops/s
Iteration   4: 262685.177 ops/s
Iteration   5: 262170.997 ops/s
Iteration   6: 262737.212 ops/s
Iteration   7: 261343.713 ops/s
Iteration   8: 262837.132 ops/s
Iteration   9: 262035.316 ops/s
Iteration  10: 262063.833 ops/s
Iteration  11: 262873.590 ops/s
Iteration  12: 262267.073 ops/s
Iteration  13: 262880.239 ops/s
Iteration  14: 262073.505 ops/s
Iteration  15: 262799.847 ops/s
Iteration  16: 262197.431 ops/s
Iteration  17: 262751.870 ops/s
Iteration  18: 262178.466 ops/s
Iteration  19: 262105.977 ops/s
Iteration  20: 262544.824 ops/s
Iteration  21: 261886.887 ops/s
Iteration  22: 262448.862 ops/s
Iteration  23: 261207.538 ops/s
Iteration  24: 260879.157 ops/s
Iteration  25: 260161.752 ops/s
Iteration  26: 262863.306 ops/s
Iteration  27: 262259.168 ops/s
Iteration  28: 262445.757 ops/s
Iteration  29: 262754.497 ops/s
Iteration  30: 262059.553 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_newWithTest":
  262221.516 ±(99.9%) 423.155 ops/s [Average]
  (min, avg, max) = (260161.752, 262221.516, 262880.239), stdev = 633.359
  CI (99.9%): [261798.361, 262644.672] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_newWithTest  thrpt   30  262221.516 ± 423.155  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_newWithout$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_newWithout

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 260400.980 ops/s
# Warmup Iteration   2: 451935.224 ops/s
# Warmup Iteration   3: 523863.766 ops/s
# Warmup Iteration   4: 527635.153 ops/s
# Warmup Iteration   5: 527381.331 ops/s
# Warmup Iteration   6: 441033.779 ops/s
# Warmup Iteration   7: 528415.144 ops/s
# Warmup Iteration   8: 528655.875 ops/s
# Warmup Iteration   9: 527569.526 ops/s
# Warmup Iteration  10: 527693.529 ops/s
# Warmup Iteration  11: 528229.000 ops/s
# Warmup Iteration  12: 528456.540 ops/s
# Warmup Iteration  13: 528346.380 ops/s
# Warmup Iteration  14: 524854.765 ops/s
# Warmup Iteration  15: 524330.250 ops/s
# Warmup Iteration  16: 527417.697 ops/s
# Warmup Iteration  17: 528899.861 ops/s
# Warmup Iteration  18: 527579.368 ops/s
# Warmup Iteration  19: 527641.508 ops/s
# Warmup Iteration  20: 528175.025 ops/s
# Warmup Iteration  21: 529286.051 ops/s
# Warmup Iteration  22: 529151.605 ops/s
# Warmup Iteration  23: 528449.778 ops/s
# Warmup Iteration  24: 529499.911 ops/s
# Warmup Iteration  25: 527757.164 ops/s
# Warmup Iteration  26: 529057.455 ops/s
# Warmup Iteration  27: 528731.274 ops/s
# Warmup Iteration  28: 528761.520 ops/s
# Warmup Iteration  29: 529408.015 ops/s
# Warmup Iteration  30: 529144.367 ops/s
Iteration   1: 528842.636 ops/s
Iteration   2: 528519.053 ops/s
Iteration   3: 526909.923 ops/s
Iteration   4: 528215.435 ops/s
Iteration   5: 527852.261 ops/s
Iteration   6: 529229.877 ops/s
Iteration   7: 528310.597 ops/s
Iteration   8: 529345.425 ops/s
Iteration   9: 527187.662 ops/s
Iteration  10: 525237.271 ops/s
Iteration  11: 528275.267 ops/s
Iteration  12: 529350.789 ops/s
Iteration  13: 527873.950 ops/s
Iteration  14: 526869.905 ops/s
Iteration  15: 528057.018 ops/s
Iteration  16: 528103.419 ops/s
Iteration  17: 526711.705 ops/s
Iteration  18: 527164.779 ops/s
Iteration  19: 529568.030 ops/s
Iteration  20: 529037.902 ops/s
Iteration  21: 528095.998 ops/s
Iteration  22: 528186.355 ops/s
Iteration  23: 529076.158 ops/s
Iteration  24: 527720.849 ops/s
Iteration  25: 528995.646 ops/s
Iteration  26: 528027.400 ops/s
Iteration  27: 529162.805 ops/s
Iteration  28: 528073.465 ops/s
Iteration  29: 529629.761 ops/s
Iteration  30: 527942.464 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_newWithout":
  528185.793 ±(99.9%) 660.021 ops/s [Average]
  (min, avg, max) = (525237.271, 528185.793, 529629.761), stdev = 987.888
  CI (99.9%): [527525.772, 528845.814] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_newWithout  thrpt   30  528185.793 ± 660.021  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_newWithoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_newWithoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 121263.891 ops/s
# Warmup Iteration   2: 212709.830 ops/s
# Warmup Iteration   3: 247065.976 ops/s
# Warmup Iteration   4: 248586.701 ops/s
# Warmup Iteration   5: 248342.950 ops/s
# Warmup Iteration   6: 208761.198 ops/s
# Warmup Iteration   7: 247274.084 ops/s
# Warmup Iteration   8: 247404.759 ops/s
# Warmup Iteration   9: 248064.635 ops/s
# Warmup Iteration  10: 249233.294 ops/s
# Warmup Iteration  11: 249026.658 ops/s
# Warmup Iteration  12: 248555.923 ops/s
# Warmup Iteration  13: 247439.864 ops/s
# Warmup Iteration  14: 248098.976 ops/s
# Warmup Iteration  15: 248671.051 ops/s
# Warmup Iteration  16: 248273.683 ops/s
# Warmup Iteration  17: 248557.302 ops/s
# Warmup Iteration  18: 248255.048 ops/s
# Warmup Iteration  19: 249285.526 ops/s
# Warmup Iteration  20: 248263.595 ops/s
# Warmup Iteration  21: 248718.924 ops/s
# Warmup Iteration  22: 248396.622 ops/s
# Warmup Iteration  23: 248526.856 ops/s
# Warmup Iteration  24: 248434.128 ops/s
# Warmup Iteration  25: 248804.254 ops/s
# Warmup Iteration  26: 248447.677 ops/s
# Warmup Iteration  27: 249093.896 ops/s
# Warmup Iteration  28: 248750.128 ops/s
# Warmup Iteration  29: 248500.713 ops/s
# Warmup Iteration  30: 249158.245 ops/s
Iteration   1: 248619.334 ops/s
Iteration   2: 249197.793 ops/s
Iteration   3: 248168.380 ops/s
Iteration   4: 248423.673 ops/s
Iteration   5: 248960.008 ops/s
Iteration   6: 248340.746 ops/s
Iteration   7: 248907.520 ops/s
Iteration   8: 248203.800 ops/s
Iteration   9: 248791.673 ops/s
Iteration  10: 248242.518 ops/s
Iteration  11: 248990.657 ops/s
Iteration  12: 248462.033 ops/s
Iteration  13: 248643.280 ops/s
Iteration  14: 248974.097 ops/s
Iteration  15: 248599.201 ops/s
Iteration  16: 248110.798 ops/s
Iteration  17: 248721.876 ops/s
Iteration  18: 249283.040 ops/s
Iteration  19: 247854.659 ops/s
Iteration  20: 249404.907 ops/s
Iteration  21: 248372.093 ops/s
Iteration  22: 249030.506 ops/s
Iteration  23: 248851.262 ops/s
Iteration  24: 249025.052 ops/s
Iteration  25: 248341.772 ops/s
Iteration  26: 248491.903 ops/s
Iteration  27: 247179.353 ops/s
Iteration  28: 246247.398 ops/s
Iteration  29: 246829.782 ops/s
Iteration  30: 248782.232 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_newWithoutAll":
  248468.378 ±(99.9%) 467.270 ops/s [Average]
  (min, avg, max) = (246247.398, 248468.378, 249404.907), stdev = 699.388
  CI (99.9%): [248001.108, 248935.649] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_newWithoutAll  thrpt   30  248468.378 ± 467.270  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_noSupportForNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_noSupportForNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1922553.524 ops/s
# Warmup Iteration   2: 3712747.811 ops/s
# Warmup Iteration   3: 4039471.304 ops/s
# Warmup Iteration   4: 4065355.268 ops/s
# Warmup Iteration   5: 3359488.300 ops/s
# Warmup Iteration   6: 4069198.243 ops/s
# Warmup Iteration   7: 4059899.465 ops/s
# Warmup Iteration   8: 4061938.367 ops/s
# Warmup Iteration   9: 4056553.003 ops/s
# Warmup Iteration  10: 4065466.165 ops/s
# Warmup Iteration  11: 4063582.077 ops/s
# Warmup Iteration  12: 4060441.548 ops/s
# Warmup Iteration  13: 4061560.842 ops/s
# Warmup Iteration  14: 4063087.076 ops/s
# Warmup Iteration  15: 4061206.728 ops/s
# Warmup Iteration  16: 4065791.625 ops/s
# Warmup Iteration  17: 4063828.972 ops/s
# Warmup Iteration  18: 4062385.793 ops/s
# Warmup Iteration  19: 4059093.470 ops/s
# Warmup Iteration  20: 4066768.684 ops/s
# Warmup Iteration  21: 4060792.119 ops/s
# Warmup Iteration  22: 4058825.684 ops/s
# Warmup Iteration  23: 4064058.520 ops/s
# Warmup Iteration  24: 4063942.092 ops/s
# Warmup Iteration  25: 4062631.533 ops/s
# Warmup Iteration  26: 4061704.500 ops/s
# Warmup Iteration  27: 4058357.629 ops/s
# Warmup Iteration  28: 4063735.404 ops/s
# Warmup Iteration  29: 4062003.365 ops/s
# Warmup Iteration  30: 4063253.507 ops/s
Iteration   1: 4058305.781 ops/s
Iteration   2: 4071357.552 ops/s
Iteration   3: 4056668.704 ops/s
Iteration   4: 4065500.313 ops/s
Iteration   5: 4069417.939 ops/s
Iteration   6: 4062174.019 ops/s
Iteration   7: 4067035.581 ops/s
Iteration   8: 4073790.216 ops/s
Iteration   9: 4065340.597 ops/s
Iteration  10: 4071110.907 ops/s
Iteration  11: 4063835.029 ops/s
Iteration  12: 4065320.390 ops/s
Iteration  13: 4074606.174 ops/s
Iteration  14: 4060438.910 ops/s
Iteration  15: 4055386.889 ops/s
Iteration  16: 4069145.014 ops/s
Iteration  17: 4055110.367 ops/s
Iteration  18: 4060722.764 ops/s
Iteration  19: 4068904.481 ops/s
Iteration  20: 4061014.680 ops/s
Iteration  21: 4047391.766 ops/s
Iteration  22: 4068464.794 ops/s
Iteration  23: 4057365.660 ops/s
Iteration  24: 4062507.549 ops/s
Iteration  25: 4070094.364 ops/s
Iteration  26: 4061609.099 ops/s
Iteration  27: 4068171.364 ops/s
Iteration  28: 4056036.796 ops/s
Iteration  29: 4063256.001 ops/s
Iteration  30: 4068873.979 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_noSupportForNull":
  4063965.256 ±(99.9%) 4249.047 ops/s [Average]
  (min, avg, max) = (4047391.766, 4063965.256, 4074606.174), stdev = 6359.774
  CI (99.9%): [4059716.209, 4068214.303] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_noSupportForNull  thrpt   30  4063965.256 ± 4249.047  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1918909.655 ops/s
# Warmup Iteration   2: 3680320.098 ops/s
# Warmup Iteration   3: 4049622.512 ops/s
# Warmup Iteration   4: 4086222.635 ops/s
# Warmup Iteration   5: 3381291.918 ops/s
# Warmup Iteration   6: 4070612.714 ops/s
# Warmup Iteration   7: 4091458.793 ops/s
# Warmup Iteration   8: 4101131.447 ops/s
# Warmup Iteration   9: 4089763.995 ops/s
# Warmup Iteration  10: 3969275.468 ops/s
# Warmup Iteration  11: 4017543.186 ops/s
# Warmup Iteration  12: 4065216.336 ops/s
# Warmup Iteration  13: 4096885.325 ops/s
# Warmup Iteration  14: 4095386.795 ops/s
# Warmup Iteration  15: 4097227.895 ops/s
# Warmup Iteration  16: 4090115.543 ops/s
# Warmup Iteration  17: 4088226.996 ops/s
# Warmup Iteration  18: 4096399.912 ops/s
# Warmup Iteration  19: 4058549.887 ops/s
# Warmup Iteration  20: 4100625.424 ops/s
# Warmup Iteration  21: 4099634.181 ops/s
# Warmup Iteration  22: 4098018.734 ops/s
# Warmup Iteration  23: 4095189.000 ops/s
# Warmup Iteration  24: 4087758.697 ops/s
# Warmup Iteration  25: 4098285.998 ops/s
# Warmup Iteration  26: 4096431.850 ops/s
# Warmup Iteration  27: 4096563.504 ops/s
# Warmup Iteration  28: 4097204.974 ops/s
# Warmup Iteration  29: 4099754.541 ops/s
# Warmup Iteration  30: 4098115.049 ops/s
Iteration   1: 4099943.784 ops/s
Iteration   2: 4102306.323 ops/s
Iteration   3: 4097478.173 ops/s
Iteration   4: 4094589.954 ops/s
Iteration   5: 4107815.472 ops/s
Iteration   6: 4098237.695 ops/s
Iteration   7: 4099247.419 ops/s
Iteration   8: 4105255.142 ops/s
Iteration   9: 4079273.367 ops/s
Iteration  10: 4091398.139 ops/s
Iteration  11: 4102239.614 ops/s
Iteration  12: 4091650.306 ops/s
Iteration  13: 4055041.135 ops/s
Iteration  14: 4105069.412 ops/s
Iteration  15: 4090239.206 ops/s
Iteration  16: 4099012.457 ops/s
Iteration  17: 4100195.031 ops/s
Iteration  18: 4091876.058 ops/s
Iteration  19: 4089425.568 ops/s
Iteration  20: 4098974.157 ops/s
Iteration  21: 4094300.298 ops/s
Iteration  22: 4085659.887 ops/s
Iteration  23: 4088693.924 ops/s
Iteration  24: 4083312.127 ops/s
Iteration  25: 4096974.401 ops/s
Iteration  26: 4087469.077 ops/s
Iteration  27: 4088711.326 ops/s
Iteration  28: 4095947.644 ops/s
Iteration  29: 4079382.089 ops/s
Iteration  30: 4086284.598 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_noneSatisfy":
  4092866.793 ±(99.9%) 6879.758 ops/s [Average]
  (min, avg, max) = (4055041.135, 4092866.793, 4107815.472), stdev = 10297.299
  CI (99.9%): [4085987.035, 4099746.551] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_noneSatisfy  thrpt   30  4092866.793 ± 6879.758  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1930885.222 ops/s
# Warmup Iteration   2: 3723842.182 ops/s
# Warmup Iteration   3: 4109985.218 ops/s
# Warmup Iteration   4: 4121301.017 ops/s
# Warmup Iteration   5: 3426701.936 ops/s
# Warmup Iteration   6: 4139389.844 ops/s
# Warmup Iteration   7: 4142961.479 ops/s
# Warmup Iteration   8: 4134560.697 ops/s
# Warmup Iteration   9: 4136758.609 ops/s
# Warmup Iteration  10: 4140988.538 ops/s
# Warmup Iteration  11: 4135539.764 ops/s
# Warmup Iteration  12: 4144731.586 ops/s
# Warmup Iteration  13: 4131212.016 ops/s
# Warmup Iteration  14: 4132927.875 ops/s
# Warmup Iteration  15: 4139243.306 ops/s
# Warmup Iteration  16: 4135628.176 ops/s
# Warmup Iteration  17: 4140579.340 ops/s
# Warmup Iteration  18: 4136269.706 ops/s
# Warmup Iteration  19: 4131026.519 ops/s
# Warmup Iteration  20: 4137422.206 ops/s
# Warmup Iteration  21: 4135222.554 ops/s
# Warmup Iteration  22: 4104874.955 ops/s
# Warmup Iteration  23: 4120623.496 ops/s
# Warmup Iteration  24: 4131971.432 ops/s
# Warmup Iteration  25: 4138259.605 ops/s
# Warmup Iteration  26: 4132778.389 ops/s
# Warmup Iteration  27: 4132608.483 ops/s
# Warmup Iteration  28: 4136585.110 ops/s
# Warmup Iteration  29: 4127265.340 ops/s
# Warmup Iteration  30: 4135395.135 ops/s
Iteration   1: 4139960.328 ops/s
Iteration   2: 4135973.714 ops/s
Iteration   3: 4135195.810 ops/s
Iteration   4: 4142410.689 ops/s
Iteration   5: 4137601.139 ops/s
Iteration   6: 4134922.008 ops/s
Iteration   7: 4144512.949 ops/s
Iteration   8: 4133280.628 ops/s
Iteration   9: 4136059.089 ops/s
Iteration  10: 4143260.527 ops/s
Iteration  11: 4131449.449 ops/s
Iteration  12: 4138022.886 ops/s
Iteration  13: 4133603.809 ops/s
Iteration  14: 4134412.441 ops/s
Iteration  15: 4134874.846 ops/s
Iteration  16: 4139240.917 ops/s
Iteration  17: 4134023.078 ops/s
Iteration  18: 4133293.831 ops/s
Iteration  19: 4137317.204 ops/s
Iteration  20: 4126526.784 ops/s
Iteration  21: 4136382.072 ops/s
Iteration  22: 4129050.205 ops/s
Iteration  23: 4128652.835 ops/s
Iteration  24: 4135236.885 ops/s
Iteration  25: 4130272.726 ops/s
Iteration  26: 4124114.544 ops/s
Iteration  27: 4134648.313 ops/s
Iteration  28: 4118407.586 ops/s
Iteration  29: 4127758.069 ops/s
Iteration  30: 4140405.963 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_noneSatisfyWith":
  4134362.377 ±(99.9%) 3796.809 ops/s [Average]
  (min, avg, max) = (4118407.586, 4134362.377, 4144512.949), stdev = 5682.885
  CI (99.9%): [4130565.569, 4138159.186] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  4134362.377 ± 3796.809  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_noneSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_noneSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1956888.245 ops/s
# Warmup Iteration   2: 3903412.309 ops/s
# Warmup Iteration   3: 4204663.086 ops/s
# Warmup Iteration   4: 4227826.364 ops/s
# Warmup Iteration   5: 3494860.441 ops/s
# Warmup Iteration   6: 4233893.030 ops/s
# Warmup Iteration   7: 4235715.733 ops/s
# Warmup Iteration   8: 4231678.607 ops/s
# Warmup Iteration   9: 4234575.851 ops/s
# Warmup Iteration  10: 4232937.630 ops/s
# Warmup Iteration  11: 4228503.551 ops/s
# Warmup Iteration  12: 4231613.535 ops/s
# Warmup Iteration  13: 4229566.123 ops/s
# Warmup Iteration  14: 4228962.916 ops/s
# Warmup Iteration  15: 4232316.761 ops/s
# Warmup Iteration  16: 4231970.099 ops/s
# Warmup Iteration  17: 4234188.168 ops/s
# Warmup Iteration  18: 4236036.472 ops/s
# Warmup Iteration  19: 4229872.547 ops/s
# Warmup Iteration  20: 4227274.699 ops/s
# Warmup Iteration  21: 4238198.287 ops/s
# Warmup Iteration  22: 4232705.681 ops/s
# Warmup Iteration  23: 4229278.499 ops/s
# Warmup Iteration  24: 4236602.432 ops/s
# Warmup Iteration  25: 4229081.920 ops/s
# Warmup Iteration  26: 4235025.564 ops/s
# Warmup Iteration  27: 4236658.300 ops/s
# Warmup Iteration  28: 4222328.957 ops/s
# Warmup Iteration  29: 4230245.212 ops/s
# Warmup Iteration  30: 4226025.296 ops/s
Iteration   1: 4240856.035 ops/s
Iteration   2: 4231263.907 ops/s
Iteration   3: 4226739.177 ops/s
Iteration   4: 4230295.163 ops/s
Iteration   5: 4225545.173 ops/s
Iteration   6: 4226551.272 ops/s
Iteration   7: 4233067.844 ops/s
Iteration   8: 4229535.967 ops/s
Iteration   9: 4233352.182 ops/s
Iteration  10: 4233747.798 ops/s
Iteration  11: 4230591.553 ops/s
Iteration  12: 4226280.700 ops/s
Iteration  13: 4232625.572 ops/s
Iteration  14: 4234650.244 ops/s
Iteration  15: 4225387.465 ops/s
Iteration  16: 4236222.926 ops/s
Iteration  17: 4215656.669 ops/s
Iteration  18: 4216501.290 ops/s
Iteration  19: 4231793.409 ops/s
Iteration  20: 4231947.408 ops/s
Iteration  21: 4229910.811 ops/s
Iteration  22: 4236618.215 ops/s
Iteration  23: 4234513.582 ops/s
Iteration  24: 4233660.707 ops/s
Iteration  25: 4242077.106 ops/s
Iteration  26: 4235723.696 ops/s
Iteration  27: 4234756.966 ops/s
Iteration  28: 4236056.498 ops/s
Iteration  29: 4232970.780 ops/s
Iteration  30: 4233316.848 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_noneSatisfyWithOccurrences":
  4231407.232 ±(99.9%) 3864.801 ops/s [Average]
  (min, avg, max) = (4215656.669, 4231407.232, 4242077.106), stdev = 5784.653
  CI (99.9%): [4227542.431, 4235272.034] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_noneSatisfyWithOccurrences  thrpt   30  4231407.232 ± 3864.801  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_occurrencesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_occurrencesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1973614.529 ops/s
# Warmup Iteration   2: 3361079.347 ops/s
# Warmup Iteration   3: 3855459.288 ops/s
# Warmup Iteration   4: 3871138.891 ops/s
# Warmup Iteration   5: 3881017.996 ops/s
# Warmup Iteration   6: 3214187.228 ops/s
# Warmup Iteration   7: 3883559.805 ops/s
# Warmup Iteration   8: 3880271.258 ops/s
# Warmup Iteration   9: 3881390.080 ops/s
# Warmup Iteration  10: 3881019.236 ops/s
# Warmup Iteration  11: 3873579.952 ops/s
# Warmup Iteration  12: 3881220.153 ops/s
# Warmup Iteration  13: 3872664.408 ops/s
# Warmup Iteration  14: 3878832.576 ops/s
# Warmup Iteration  15: 3877614.657 ops/s
# Warmup Iteration  16: 3879357.788 ops/s
# Warmup Iteration  17: 3879212.953 ops/s
# Warmup Iteration  18: 3864377.242 ops/s
# Warmup Iteration  19: 3874167.517 ops/s
# Warmup Iteration  20: 3876897.557 ops/s
# Warmup Iteration  21: 3877727.367 ops/s
# Warmup Iteration  22: 3872774.908 ops/s
# Warmup Iteration  23: 3877549.146 ops/s
# Warmup Iteration  24: 3860377.426 ops/s
# Warmup Iteration  25: 3878645.799 ops/s
# Warmup Iteration  26: 3876733.576 ops/s
# Warmup Iteration  27: 3873744.270 ops/s
# Warmup Iteration  28: 3879650.342 ops/s
# Warmup Iteration  29: 3873807.324 ops/s
# Warmup Iteration  30: 3880944.921 ops/s
Iteration   1: 3878527.012 ops/s
Iteration   2: 3877900.622 ops/s
Iteration   3: 3882496.722 ops/s
Iteration   4: 3869879.291 ops/s
Iteration   5: 3879051.022 ops/s
Iteration   6: 3875876.034 ops/s
Iteration   7: 3885084.172 ops/s
Iteration   8: 3871433.719 ops/s
Iteration   9: 3882078.870 ops/s
Iteration  10: 3878684.465 ops/s
Iteration  11: 3875625.104 ops/s
Iteration  12: 3872355.378 ops/s
Iteration  13: 3873702.853 ops/s
Iteration  14: 3887503.234 ops/s
Iteration  15: 3874232.817 ops/s
Iteration  16: 3869579.180 ops/s
Iteration  17: 3869600.366 ops/s
Iteration  18: 3881885.435 ops/s
Iteration  19: 3873351.628 ops/s
Iteration  20: 3872862.609 ops/s
Iteration  21: 3882747.452 ops/s
Iteration  22: 3881715.696 ops/s
Iteration  23: 3877184.104 ops/s
Iteration  24: 3872690.055 ops/s
Iteration  25: 3887068.022 ops/s
Iteration  26: 3880378.637 ops/s
Iteration  27: 3881017.551 ops/s
Iteration  28: 3865198.593 ops/s
Iteration  29: 3872318.352 ops/s
Iteration  30: 3874627.395 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_occurrencesOf":
  3876888.546 ±(99.9%) 3722.333 ops/s [Average]
  (min, avg, max) = (3865198.593, 3876888.546, 3887503.234), stdev = 5571.413
  CI (99.9%): [3873166.214, 3880610.879] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_occurrencesOf  thrpt   30  3876888.546 ± 3722.333  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_parallelStream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_parallelStream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13093.880 ops/s
# Warmup Iteration   2: 16904.685 ops/s
# Warmup Iteration   3: 15769.954 ops/s
# Warmup Iteration   4: 16425.682 ops/s
# Warmup Iteration   5: 16502.504 ops/s
# Warmup Iteration   6: 18144.078 ops/s
# Warmup Iteration   7: 27474.671 ops/s
# Warmup Iteration   8: 28233.704 ops/s
# Warmup Iteration   9: 25861.913 ops/s
# Warmup Iteration  10: 26913.348 ops/s
# Warmup Iteration  11: 27907.548 ops/s
# Warmup Iteration  12: 28304.617 ops/s
# Warmup Iteration  13: 27887.401 ops/s
# Warmup Iteration  14: 27596.230 ops/s
# Warmup Iteration  15: 28843.003 ops/s
# Warmup Iteration  16: 28433.315 ops/s
# Warmup Iteration  17: 28137.529 ops/s
# Warmup Iteration  18: 27855.000 ops/s
# Warmup Iteration  19: 28141.812 ops/s
# Warmup Iteration  20: 27636.771 ops/s
# Warmup Iteration  21: 27568.593 ops/s
# Warmup Iteration  22: 27768.698 ops/s
# Warmup Iteration  23: 27579.228 ops/s
# Warmup Iteration  24: 28597.254 ops/s
# Warmup Iteration  25: 28563.438 ops/s
# Warmup Iteration  26: 28563.892 ops/s
# Warmup Iteration  27: 24726.929 ops/s
# Warmup Iteration  28: 16362.721 ops/s
# Warmup Iteration  29: 21998.653 ops/s
# Warmup Iteration  30: 28340.621 ops/s
Iteration   1: 28537.529 ops/s
Iteration   2: 28590.818 ops/s
Iteration   3: 28723.326 ops/s
Iteration   4: 29605.556 ops/s
Iteration   5: 28438.553 ops/s
Iteration   6: 29552.088 ops/s
Iteration   7: 26026.491 ops/s
Iteration   8: 28300.340 ops/s
Iteration   9: 29359.992 ops/s
Iteration  10: 28752.694 ops/s
Iteration  11: 28720.573 ops/s
Iteration  12: 28342.044 ops/s
Iteration  13: 28992.156 ops/s
Iteration  14: 29205.219 ops/s
Iteration  15: 29446.496 ops/s
Iteration  16: 29802.242 ops/s
Iteration  17: 29708.218 ops/s
Iteration  18: 29958.186 ops/s
Iteration  19: 28845.433 ops/s
Iteration  20: 29258.560 ops/s
Iteration  21: 28027.606 ops/s
Iteration  22: 28280.660 ops/s
Iteration  23: 28929.562 ops/s
Iteration  24: 29523.311 ops/s
Iteration  25: 27945.485 ops/s
Iteration  26: 28642.900 ops/s
Iteration  27: 28647.476 ops/s
Iteration  28: 28291.391 ops/s
Iteration  29: 28272.897 ops/s
Iteration  30: 28478.818 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_parallelStream":
  28773.554 ±(99.9%) 507.652 ops/s [Average]
  (min, avg, max) = (26026.491, 28773.554, 29958.186), stdev = 759.829
  CI (99.9%): [28265.902, 29281.206] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt      Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_parallelStream  thrpt   30  28773.554 ± 507.652  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 322081.251 ops/s
# Warmup Iteration   2: 713278.581 ops/s
# Warmup Iteration   3: 761010.063 ops/s
# Warmup Iteration   4: 763824.852 ops/s
# Warmup Iteration   5: 636177.405 ops/s
# Warmup Iteration   6: 764194.270 ops/s
# Warmup Iteration   7: 764045.208 ops/s
# Warmup Iteration   8: 765069.807 ops/s
# Warmup Iteration   9: 765052.672 ops/s
# Warmup Iteration  10: 765983.175 ops/s
# Warmup Iteration  11: 760554.891 ops/s
# Warmup Iteration  12: 766330.266 ops/s
# Warmup Iteration  13: 764445.896 ops/s
# Warmup Iteration  14: 763861.647 ops/s
# Warmup Iteration  15: 765153.701 ops/s
# Warmup Iteration  16: 765872.509 ops/s
# Warmup Iteration  17: 764636.352 ops/s
# Warmup Iteration  18: 765235.724 ops/s
# Warmup Iteration  19: 764158.699 ops/s
# Warmup Iteration  20: 764859.975 ops/s
# Warmup Iteration  21: 763230.557 ops/s
# Warmup Iteration  22: 765694.673 ops/s
# Warmup Iteration  23: 764629.070 ops/s
# Warmup Iteration  24: 763879.674 ops/s
# Warmup Iteration  25: 760538.643 ops/s
# Warmup Iteration  26: 761730.940 ops/s
# Warmup Iteration  27: 762681.843 ops/s
# Warmup Iteration  28: 763846.536 ops/s
# Warmup Iteration  29: 762207.245 ops/s
# Warmup Iteration  30: 754467.059 ops/s
Iteration   1: 756702.605 ops/s
Iteration   2: 761043.214 ops/s
Iteration   3: 762709.186 ops/s
Iteration   4: 762337.999 ops/s
Iteration   5: 760915.561 ops/s
Iteration   6: 763608.541 ops/s
Iteration   7: 764939.298 ops/s
Iteration   8: 766654.148 ops/s
Iteration   9: 765366.186 ops/s
Iteration  10: 764590.090 ops/s
Iteration  11: 765422.008 ops/s
Iteration  12: 765519.587 ops/s
Iteration  13: 767084.713 ops/s
Iteration  14: 764666.338 ops/s
Iteration  15: 764396.578 ops/s
Iteration  16: 765442.243 ops/s
Iteration  17: 766761.027 ops/s
Iteration  18: 766581.589 ops/s
Iteration  19: 763825.076 ops/s
Iteration  20: 764273.533 ops/s
Iteration  21: 765361.960 ops/s
Iteration  22: 761017.657 ops/s
Iteration  23: 761558.910 ops/s
Iteration  24: 763852.670 ops/s
Iteration  25: 766252.077 ops/s
Iteration  26: 764222.768 ops/s
Iteration  27: 764849.726 ops/s
Iteration  28: 763373.021 ops/s
Iteration  29: 763854.698 ops/s
Iteration  30: 764361.341 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_partition":
  764051.478 ±(99.9%) 1468.966 ops/s [Average]
  (min, avg, max) = (756702.605, 764051.478, 767084.713), stdev = 2198.679
  CI (99.9%): [762582.512, 765520.444] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_partition  thrpt   30  764051.478 ± 1468.966  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 563307.517 ops/s
# Warmup Iteration   2: 1129581.850 ops/s
# Warmup Iteration   3: 1240074.256 ops/s
# Warmup Iteration   4: 1247484.843 ops/s
# Warmup Iteration   5: 1037682.907 ops/s
# Warmup Iteration   6: 1250022.428 ops/s
# Warmup Iteration   7: 1249016.064 ops/s
# Warmup Iteration   8: 1250552.265 ops/s
# Warmup Iteration   9: 1249809.314 ops/s
# Warmup Iteration  10: 1249839.963 ops/s
# Warmup Iteration  11: 1250887.810 ops/s
# Warmup Iteration  12: 1249455.805 ops/s
# Warmup Iteration  13: 1251019.415 ops/s
# Warmup Iteration  14: 1251391.768 ops/s
# Warmup Iteration  15: 1250099.004 ops/s
# Warmup Iteration  16: 1250248.283 ops/s
# Warmup Iteration  17: 1253871.857 ops/s
# Warmup Iteration  18: 1253881.166 ops/s
# Warmup Iteration  19: 1254210.272 ops/s
# Warmup Iteration  20: 1252526.104 ops/s
# Warmup Iteration  21: 1252470.268 ops/s
# Warmup Iteration  22: 1253576.368 ops/s
# Warmup Iteration  23: 1254704.694 ops/s
# Warmup Iteration  24: 1254943.482 ops/s
# Warmup Iteration  25: 1254158.528 ops/s
# Warmup Iteration  26: 1252512.244 ops/s
# Warmup Iteration  27: 1253351.622 ops/s
# Warmup Iteration  28: 1253374.421 ops/s
# Warmup Iteration  29: 1252356.641 ops/s
# Warmup Iteration  30: 1253247.670 ops/s
Iteration   1: 1253210.849 ops/s
Iteration   2: 1251682.180 ops/s
Iteration   3: 1254467.799 ops/s
Iteration   4: 1252255.909 ops/s
Iteration   5: 1251559.241 ops/s
Iteration   6: 1252252.025 ops/s
Iteration   7: 1255354.829 ops/s
Iteration   8: 1249904.573 ops/s
Iteration   9: 1252333.461 ops/s
Iteration  10: 1255039.823 ops/s
Iteration  11: 1251882.146 ops/s
Iteration  12: 1253098.696 ops/s
Iteration  13: 1254368.184 ops/s
Iteration  14: 1250230.948 ops/s
Iteration  15: 1241103.696 ops/s
Iteration  16: 1255334.171 ops/s
Iteration  17: 1250554.228 ops/s
Iteration  18: 1257591.685 ops/s
Iteration  19: 1252070.720 ops/s
Iteration  20: 1256008.860 ops/s
Iteration  21: 1253950.541 ops/s
Iteration  22: 1252122.078 ops/s
Iteration  23: 1254814.400 ops/s
Iteration  24: 1253704.215 ops/s
Iteration  25: 1253453.047 ops/s
Iteration  26: 1256087.423 ops/s
Iteration  27: 1253521.771 ops/s
Iteration  28: 1249881.659 ops/s
Iteration  29: 1252213.296 ops/s
Iteration  30: 1252866.357 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_partitionWhile":
  1252763.960 ±(99.9%) 1944.978 ops/s [Average]
  (min, avg, max) = (1241103.696, 1252763.960, 1257591.685), stdev = 2911.151
  CI (99.9%): [1250818.983, 1254708.938] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_partitionWhile  thrpt   30  1252763.960 ± 1944.978  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 334587.063 ops/s
# Warmup Iteration   2: 729107.407 ops/s
# Warmup Iteration   3: 785278.694 ops/s
# Warmup Iteration   4: 788853.864 ops/s
# Warmup Iteration   5: 654236.877 ops/s
# Warmup Iteration   6: 782000.366 ops/s
# Warmup Iteration   7: 782977.732 ops/s
# Warmup Iteration   8: 782234.930 ops/s
# Warmup Iteration   9: 782724.525 ops/s
# Warmup Iteration  10: 782143.336 ops/s
# Warmup Iteration  11: 777453.453 ops/s
# Warmup Iteration  12: 782662.001 ops/s
# Warmup Iteration  13: 781220.473 ops/s
# Warmup Iteration  14: 781779.616 ops/s
# Warmup Iteration  15: 782115.760 ops/s
# Warmup Iteration  16: 781436.227 ops/s
# Warmup Iteration  17: 791035.350 ops/s
# Warmup Iteration  18: 792601.691 ops/s
# Warmup Iteration  19: 790649.481 ops/s
# Warmup Iteration  20: 789891.597 ops/s
# Warmup Iteration  21: 790806.015 ops/s
# Warmup Iteration  22: 793167.898 ops/s
# Warmup Iteration  23: 791866.757 ops/s
# Warmup Iteration  24: 791149.139 ops/s
# Warmup Iteration  25: 791401.449 ops/s
# Warmup Iteration  26: 791835.308 ops/s
# Warmup Iteration  27: 790996.652 ops/s
# Warmup Iteration  28: 791418.227 ops/s
# Warmup Iteration  29: 789743.626 ops/s
# Warmup Iteration  30: 787173.480 ops/s
Iteration   1: 789641.090 ops/s
Iteration   2: 792620.608 ops/s
Iteration   3: 790678.976 ops/s
Iteration   4: 789774.587 ops/s
Iteration   5: 790043.506 ops/s
Iteration   6: 792514.742 ops/s
Iteration   7: 789541.018 ops/s
Iteration   8: 789330.657 ops/s
Iteration   9: 789640.815 ops/s
Iteration  10: 791962.571 ops/s
Iteration  11: 791382.517 ops/s
Iteration  12: 791073.279 ops/s
Iteration  13: 791045.663 ops/s
Iteration  14: 793788.366 ops/s
Iteration  15: 792324.471 ops/s
Iteration  16: 791847.183 ops/s
Iteration  17: 793261.409 ops/s
Iteration  18: 791678.398 ops/s
Iteration  19: 792200.198 ops/s
Iteration  20: 792857.529 ops/s
Iteration  21: 793516.981 ops/s
Iteration  22: 791964.993 ops/s
Iteration  23: 792743.992 ops/s
Iteration  24: 791895.703 ops/s
Iteration  25: 792012.303 ops/s
Iteration  26: 791860.233 ops/s
Iteration  27: 790592.314 ops/s
Iteration  28: 789299.810 ops/s
Iteration  29: 793538.159 ops/s
Iteration  30: 791571.326 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_partitionWith":
  791540.113 ±(99.9%) 892.848 ops/s [Average]
  (min, avg, max) = (789299.810, 791540.113, 793788.366), stdev = 1336.373
  CI (99.9%): [790647.265, 792432.961] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_partitionWith  thrpt   30  791540.113 ± 892.848  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 700438.238 ops/s
# Warmup Iteration   2: 1562880.210 ops/s
# Warmup Iteration   3: 1656196.989 ops/s
# Warmup Iteration   4: 1659240.638 ops/s
# Warmup Iteration   5: 1382782.114 ops/s
# Warmup Iteration   6: 1667216.288 ops/s
# Warmup Iteration   7: 1669782.942 ops/s
# Warmup Iteration   8: 1666439.090 ops/s
# Warmup Iteration   9: 1667176.835 ops/s
# Warmup Iteration  10: 1666856.883 ops/s
# Warmup Iteration  11: 1666450.294 ops/s
# Warmup Iteration  12: 1668588.555 ops/s
# Warmup Iteration  13: 1667623.717 ops/s
# Warmup Iteration  14: 1667171.443 ops/s
# Warmup Iteration  15: 1666444.202 ops/s
# Warmup Iteration  16: 1668693.814 ops/s
# Warmup Iteration  17: 1667070.137 ops/s
# Warmup Iteration  18: 1668338.814 ops/s
# Warmup Iteration  19: 1668933.393 ops/s
# Warmup Iteration  20: 1667633.443 ops/s
# Warmup Iteration  21: 1666137.580 ops/s
# Warmup Iteration  22: 1669552.507 ops/s
# Warmup Iteration  23: 1667741.182 ops/s
# Warmup Iteration  24: 1669002.801 ops/s
# Warmup Iteration  25: 1668604.195 ops/s
# Warmup Iteration  26: 1668595.975 ops/s
# Warmup Iteration  27: 1668061.306 ops/s
# Warmup Iteration  28: 1662609.303 ops/s
# Warmup Iteration  29: 1665153.581 ops/s
# Warmup Iteration  30: 1667283.078 ops/s
Iteration   1: 1668878.958 ops/s
Iteration   2: 1667463.897 ops/s
Iteration   3: 1665859.320 ops/s
Iteration   4: 1667716.298 ops/s
Iteration   5: 1661006.423 ops/s
Iteration   6: 1666952.528 ops/s
Iteration   7: 1668674.584 ops/s
Iteration   8: 1667608.187 ops/s
Iteration   9: 1671688.981 ops/s
Iteration  10: 1669118.107 ops/s
Iteration  11: 1665539.903 ops/s
Iteration  12: 1668244.558 ops/s
Iteration  13: 1668275.675 ops/s
Iteration  14: 1666827.858 ops/s
Iteration  15: 1664754.404 ops/s
Iteration  16: 1666240.169 ops/s
Iteration  17: 1669058.770 ops/s
Iteration  18: 1668350.477 ops/s
Iteration  19: 1668911.292 ops/s
Iteration  20: 1667985.635 ops/s
Iteration  21: 1669276.792 ops/s
Iteration  22: 1668292.115 ops/s
Iteration  23: 1667037.222 ops/s
Iteration  24: 1667189.442 ops/s
Iteration  25: 1665362.976 ops/s
Iteration  26: 1670801.088 ops/s
Iteration  27: 1666481.279 ops/s
Iteration  28: 1666160.541 ops/s
Iteration  29: 1662079.393 ops/s
Iteration  30: 1669733.355 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_reject":
  1667385.674 ±(99.9%) 1493.898 ops/s [Average]
  (min, avg, max) = (1661006.423, 1667385.674, 1671688.981), stdev = 2235.996
  CI (99.9%): [1665891.777, 1668879.572] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_reject  thrpt   30  1667385.674 ± 1493.898  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_rejectToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_rejectToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 496533.646 ops/s
# Warmup Iteration   2: 912159.815 ops/s
# Warmup Iteration   3: 1071988.243 ops/s
# Warmup Iteration   4: 1075032.112 ops/s
# Warmup Iteration   5: 1076553.659 ops/s
# Warmup Iteration   6: 894806.955 ops/s
# Warmup Iteration   7: 1077491.713 ops/s
# Warmup Iteration   8: 1075735.904 ops/s
# Warmup Iteration   9: 1076617.894 ops/s
# Warmup Iteration  10: 1076002.922 ops/s
# Warmup Iteration  11: 1073527.092 ops/s
# Warmup Iteration  12: 1077436.711 ops/s
# Warmup Iteration  13: 1076650.247 ops/s
# Warmup Iteration  14: 1074151.249 ops/s
# Warmup Iteration  15: 1075933.809 ops/s
# Warmup Iteration  16: 1072376.766 ops/s
# Warmup Iteration  17: 1070402.636 ops/s
# Warmup Iteration  18: 1071854.387 ops/s
# Warmup Iteration  19: 1073906.434 ops/s
# Warmup Iteration  20: 1073096.847 ops/s
# Warmup Iteration  21: 1074997.904 ops/s
# Warmup Iteration  22: 1075809.252 ops/s
# Warmup Iteration  23: 1076461.427 ops/s
# Warmup Iteration  24: 1074801.933 ops/s
# Warmup Iteration  25: 1074128.195 ops/s
# Warmup Iteration  26: 1075464.334 ops/s
# Warmup Iteration  27: 1074276.465 ops/s
# Warmup Iteration  28: 1075684.515 ops/s
# Warmup Iteration  29: 1075757.611 ops/s
# Warmup Iteration  30: 1074962.487 ops/s
Iteration   1: 1072159.726 ops/s
Iteration   2: 1076226.494 ops/s
Iteration   3: 1075414.854 ops/s
Iteration   4: 1071176.481 ops/s
Iteration   5: 1076516.761 ops/s
Iteration   6: 1072628.057 ops/s
Iteration   7: 1077674.053 ops/s
Iteration   8: 1074667.501 ops/s
Iteration   9: 1077614.309 ops/s
Iteration  10: 1075449.846 ops/s
Iteration  11: 1076270.942 ops/s
Iteration  12: 1075087.250 ops/s
Iteration  13: 1075437.845 ops/s
Iteration  14: 1077319.741 ops/s
Iteration  15: 1075099.442 ops/s
Iteration  16: 1077905.669 ops/s
Iteration  17: 1075408.162 ops/s
Iteration  18: 1074905.769 ops/s
Iteration  19: 1078274.372 ops/s
Iteration  20: 1077472.709 ops/s
Iteration  21: 1078268.207 ops/s
Iteration  22: 1076492.712 ops/s
Iteration  23: 1078519.455 ops/s
Iteration  24: 1077140.136 ops/s
Iteration  25: 1075474.315 ops/s
Iteration  26: 1070023.227 ops/s
Iteration  27: 1074180.460 ops/s
Iteration  28: 1075128.032 ops/s
Iteration  29: 1074456.491 ops/s
Iteration  30: 1078075.434 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_rejectToTarget":
  1075682.282 ±(99.9%) 1417.788 ops/s [Average]
  (min, avg, max) = (1070023.227, 1075682.282, 1078519.455), stdev = 2122.079
  CI (99.9%): [1074264.493, 1077100.070] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_rejectToTarget  thrpt   30  1075682.282 ± 1417.788  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 496064.501 ops/s
# Warmup Iteration   2: 992091.418 ops/s
# Warmup Iteration   3: 1117872.299 ops/s
# Warmup Iteration   4: 1125105.936 ops/s
# Warmup Iteration   5: 1007515.543 ops/s
# Warmup Iteration   6: 1055033.569 ops/s
# Warmup Iteration   7: 1124219.208 ops/s
# Warmup Iteration   8: 1123209.150 ops/s
# Warmup Iteration   9: 1124015.463 ops/s
# Warmup Iteration  10: 1123107.806 ops/s
# Warmup Iteration  11: 1124703.340 ops/s
# Warmup Iteration  12: 1124361.899 ops/s
# Warmup Iteration  13: 1124559.433 ops/s
# Warmup Iteration  14: 1122584.383 ops/s
# Warmup Iteration  15: 1121881.935 ops/s
# Warmup Iteration  16: 1124711.080 ops/s
# Warmup Iteration  17: 1123045.241 ops/s
# Warmup Iteration  18: 1123218.680 ops/s
# Warmup Iteration  19: 1123912.656 ops/s
# Warmup Iteration  20: 1124086.583 ops/s
# Warmup Iteration  21: 1123592.031 ops/s
# Warmup Iteration  22: 1126100.657 ops/s
# Warmup Iteration  23: 1125159.280 ops/s
# Warmup Iteration  24: 1125039.239 ops/s
# Warmup Iteration  25: 1124047.315 ops/s
# Warmup Iteration  26: 1124439.513 ops/s
# Warmup Iteration  27: 1124057.555 ops/s
# Warmup Iteration  28: 1124998.290 ops/s
# Warmup Iteration  29: 1122231.969 ops/s
# Warmup Iteration  30: 1124327.198 ops/s
Iteration   1: 1125757.156 ops/s
Iteration   2: 1126196.756 ops/s
Iteration   3: 1124035.073 ops/s
Iteration   4: 1123029.079 ops/s
Iteration   5: 1126110.597 ops/s
Iteration   6: 1123466.442 ops/s
Iteration   7: 1126486.566 ops/s
Iteration   8: 1125399.224 ops/s
Iteration   9: 1122789.555 ops/s
Iteration  10: 1126822.409 ops/s
Iteration  11: 1124384.396 ops/s
Iteration  12: 1121394.142 ops/s
Iteration  13: 1122095.468 ops/s
Iteration  14: 1119047.793 ops/s
Iteration  15: 1119009.375 ops/s
Iteration  16: 1126824.173 ops/s
Iteration  17: 1123444.157 ops/s
Iteration  18: 1125855.756 ops/s
Iteration  19: 1125491.942 ops/s
Iteration  20: 1123548.935 ops/s
Iteration  21: 1122534.740 ops/s
Iteration  22: 1124128.686 ops/s
Iteration  23: 1118635.256 ops/s
Iteration  24: 1123645.236 ops/s
Iteration  25: 1123794.333 ops/s
Iteration  26: 1125620.889 ops/s
Iteration  27: 1124981.898 ops/s
Iteration  28: 1122997.766 ops/s
Iteration  29: 1125468.975 ops/s
Iteration  30: 1124712.473 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_rejectWith":
  1123923.642 ±(99.9%) 1486.310 ops/s [Average]
  (min, avg, max) = (1118635.256, 1123923.642, 1126824.173), stdev = 2224.639
  CI (99.9%): [1122437.332, 1125409.951] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_rejectWith  thrpt   30  1123923.642 ± 1486.310  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 620241.481 ops/s
# Warmup Iteration   2: 1297178.267 ops/s
# Warmup Iteration   3: 1414878.364 ops/s
# Warmup Iteration   4: 1425506.719 ops/s
# Warmup Iteration   5: 1193431.624 ops/s
# Warmup Iteration   6: 1426330.691 ops/s
# Warmup Iteration   7: 1424431.091 ops/s
# Warmup Iteration   8: 1425191.027 ops/s
# Warmup Iteration   9: 1426557.864 ops/s
# Warmup Iteration  10: 1423889.115 ops/s
# Warmup Iteration  11: 1423932.213 ops/s
# Warmup Iteration  12: 1423529.392 ops/s
# Warmup Iteration  13: 1425619.379 ops/s
# Warmup Iteration  14: 1425915.496 ops/s
# Warmup Iteration  15: 1424061.590 ops/s
# Warmup Iteration  16: 1420035.127 ops/s
# Warmup Iteration  17: 1424807.512 ops/s
# Warmup Iteration  18: 1427629.417 ops/s
# Warmup Iteration  19: 1428069.102 ops/s
# Warmup Iteration  20: 1427564.977 ops/s
# Warmup Iteration  21: 1426955.213 ops/s
# Warmup Iteration  22: 1425609.362 ops/s
# Warmup Iteration  23: 1427079.368 ops/s
# Warmup Iteration  24: 1429523.639 ops/s
# Warmup Iteration  25: 1425271.167 ops/s
# Warmup Iteration  26: 1429963.678 ops/s
# Warmup Iteration  27: 1429135.646 ops/s
# Warmup Iteration  28: 1428274.238 ops/s
# Warmup Iteration  29: 1428353.661 ops/s
# Warmup Iteration  30: 1423008.492 ops/s
Iteration   1: 1423471.664 ops/s
Iteration   2: 1419244.878 ops/s
Iteration   3: 1421585.678 ops/s
Iteration   4: 1426045.677 ops/s
Iteration   5: 1425599.428 ops/s
Iteration   6: 1426833.103 ops/s
Iteration   7: 1429096.698 ops/s
Iteration   8: 1431677.044 ops/s
Iteration   9: 1429113.659 ops/s
Iteration  10: 1428138.316 ops/s
Iteration  11: 1432269.934 ops/s
Iteration  12: 1427195.958 ops/s
Iteration  13: 1425434.827 ops/s
Iteration  14: 1427783.674 ops/s
Iteration  15: 1425301.377 ops/s
Iteration  16: 1428967.394 ops/s
Iteration  17: 1429202.683 ops/s
Iteration  18: 1429166.800 ops/s
Iteration  19: 1422339.024 ops/s
Iteration  20: 1424939.576 ops/s
Iteration  21: 1431190.160 ops/s
Iteration  22: 1426900.957 ops/s
Iteration  23: 1427734.681 ops/s
Iteration  24: 1429233.008 ops/s
Iteration  25: 1427215.684 ops/s
Iteration  26: 1427147.129 ops/s
Iteration  27: 1429586.692 ops/s
Iteration  28: 1427700.076 ops/s
Iteration  29: 1428075.965 ops/s
Iteration  30: 1431023.447 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_rejectWith_target":
  1427307.173 ±(99.9%) 1980.566 ops/s [Average]
  (min, avg, max) = (1419244.878, 1427307.173, 1432269.934), stdev = 2964.418
  CI (99.9%): [1425326.607, 1429287.739] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_rejectWith_target  thrpt   30  1427307.173 ± 1980.566  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 515273.518 ops/s
# Warmup Iteration   2: 596368.237 ops/s
# Warmup Iteration   3: 788212.747 ops/s
# Warmup Iteration   4: 786281.453 ops/s
# Warmup Iteration   5: 782959.694 ops/s
# Warmup Iteration   6: 784877.719 ops/s
# Warmup Iteration   7: 786736.446 ops/s
# Warmup Iteration   8: 786570.154 ops/s
# Warmup Iteration   9: 786615.997 ops/s
# Warmup Iteration  10: 663579.573 ops/s
# Warmup Iteration  11: 780516.085 ops/s
# Warmup Iteration  12: 784164.672 ops/s
# Warmup Iteration  13: 784314.828 ops/s
# Warmup Iteration  14: 783888.144 ops/s
# Warmup Iteration  15: 785567.107 ops/s
# Warmup Iteration  16: 785393.141 ops/s
# Warmup Iteration  17: 825370.581 ops/s
# Warmup Iteration  18: 826748.035 ops/s
# Warmup Iteration  19: 824323.606 ops/s
# Warmup Iteration  20: 825890.318 ops/s
# Warmup Iteration  21: 824011.018 ops/s
# Warmup Iteration  22: 824711.771 ops/s
# Warmup Iteration  23: 824799.518 ops/s
# Warmup Iteration  24: 824209.303 ops/s
# Warmup Iteration  25: 824527.614 ops/s
# Warmup Iteration  26: 823885.554 ops/s
# Warmup Iteration  27: 822730.608 ops/s
# Warmup Iteration  28: 823467.426 ops/s
# Warmup Iteration  29: 824043.088 ops/s
# Warmup Iteration  30: 824022.968 ops/s
Iteration   1: 824896.567 ops/s
Iteration   2: 824334.682 ops/s
Iteration   3: 822383.643 ops/s
Iteration   4: 825523.356 ops/s
Iteration   5: 825120.665 ops/s
Iteration   6: 824952.910 ops/s
Iteration   7: 823049.809 ops/s
Iteration   8: 824108.440 ops/s
Iteration   9: 825311.981 ops/s
Iteration  10: 823953.794 ops/s
Iteration  11: 825933.191 ops/s
Iteration  12: 824291.803 ops/s
Iteration  13: 824316.645 ops/s
Iteration  14: 825784.321 ops/s
Iteration  15: 825709.191 ops/s
Iteration  16: 824226.109 ops/s
Iteration  17: 823691.364 ops/s
Iteration  18: 824324.073 ops/s
Iteration  19: 824219.190 ops/s
Iteration  20: 822200.018 ops/s
Iteration  21: 825101.653 ops/s
Iteration  22: 824891.096 ops/s
Iteration  23: 823501.529 ops/s
Iteration  24: 825010.607 ops/s
Iteration  25: 823535.011 ops/s
Iteration  26: 822158.482 ops/s
Iteration  27: 823847.447 ops/s
Iteration  28: 824179.189 ops/s
Iteration  29: 823083.490 ops/s
Iteration  30: 824558.096 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_remove":
  824273.278 ±(99.9%) 680.321 ops/s [Average]
  (min, avg, max) = (822158.482, 824273.278, 825933.191), stdev = 1018.273
  CI (99.9%): [823592.957, 824953.600] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_remove  thrpt   30  824273.278 ± 680.321  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 499208.090 ops/s
# Warmup Iteration   2: 581848.276 ops/s
# Warmup Iteration   3: 775380.916 ops/s
# Warmup Iteration   4: 773759.691 ops/s
# Warmup Iteration   5: 770956.843 ops/s
# Warmup Iteration   6: 773584.773 ops/s
# Warmup Iteration   7: 772102.801 ops/s
# Warmup Iteration   8: 775234.894 ops/s
# Warmup Iteration   9: 774616.100 ops/s
# Warmup Iteration  10: 672839.716 ops/s
# Warmup Iteration  11: 748237.049 ops/s
# Warmup Iteration  12: 774702.532 ops/s
# Warmup Iteration  13: 775477.032 ops/s
# Warmup Iteration  14: 774647.196 ops/s
# Warmup Iteration  15: 776049.359 ops/s
# Warmup Iteration  16: 774771.158 ops/s
# Warmup Iteration  17: 811436.105 ops/s
# Warmup Iteration  18: 812874.611 ops/s
# Warmup Iteration  19: 811187.844 ops/s
# Warmup Iteration  20: 811409.089 ops/s
# Warmup Iteration  21: 808869.617 ops/s
# Warmup Iteration  22: 809772.609 ops/s
# Warmup Iteration  23: 809417.199 ops/s
# Warmup Iteration  24: 810027.618 ops/s
# Warmup Iteration  25: 812186.237 ops/s
# Warmup Iteration  26: 813116.784 ops/s
# Warmup Iteration  27: 809778.069 ops/s
# Warmup Iteration  28: 809890.325 ops/s
# Warmup Iteration  29: 810150.372 ops/s
# Warmup Iteration  30: 809598.381 ops/s
Iteration   1: 807657.536 ops/s
Iteration   2: 810808.537 ops/s
Iteration   3: 812271.911 ops/s
Iteration   4: 810091.644 ops/s
Iteration   5: 812020.743 ops/s
Iteration   6: 808571.196 ops/s
Iteration   7: 807032.354 ops/s
Iteration   8: 811575.576 ops/s
Iteration   9: 812364.806 ops/s
Iteration  10: 811113.747 ops/s
Iteration  11: 811676.049 ops/s
Iteration  12: 812081.805 ops/s
Iteration  13: 811630.240 ops/s
Iteration  14: 810149.146 ops/s
Iteration  15: 812211.249 ops/s
Iteration  16: 812569.884 ops/s
Iteration  17: 812655.500 ops/s
Iteration  18: 813191.266 ops/s
Iteration  19: 812823.299 ops/s
Iteration  20: 810654.257 ops/s
Iteration  21: 811780.981 ops/s
Iteration  22: 810011.055 ops/s
Iteration  23: 809698.239 ops/s
Iteration  24: 809372.240 ops/s
Iteration  25: 811802.518 ops/s
Iteration  26: 811308.822 ops/s
Iteration  27: 810389.895 ops/s
Iteration  28: 811637.872 ops/s
Iteration  29: 811987.776 ops/s
Iteration  30: 810326.096 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_removeAll":
  811048.875 ±(99.9%) 1000.378 ops/s [Average]
  (min, avg, max) = (807032.354, 811048.875, 813191.266), stdev = 1497.320
  CI (99.9%): [810048.496, 812049.253] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_removeAll  thrpt   30  811048.875 ± 1000.378  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 453439.027 ops/s
# Warmup Iteration   2: 596362.644 ops/s
# Warmup Iteration   3: 746281.148 ops/s
# Warmup Iteration   4: 742135.430 ops/s
# Warmup Iteration   5: 745674.702 ops/s
# Warmup Iteration   6: 744725.591 ops/s
# Warmup Iteration   7: 744471.008 ops/s
# Warmup Iteration   8: 711500.676 ops/s
# Warmup Iteration   9: 659222.920 ops/s
# Warmup Iteration  10: 746815.293 ops/s
# Warmup Iteration  11: 743300.322 ops/s
# Warmup Iteration  12: 744080.284 ops/s
# Warmup Iteration  13: 746039.513 ops/s
# Warmup Iteration  14: 747680.011 ops/s
# Warmup Iteration  15: 746393.356 ops/s
# Warmup Iteration  16: 745709.969 ops/s
# Warmup Iteration  17: 776853.255 ops/s
# Warmup Iteration  18: 778587.268 ops/s
# Warmup Iteration  19: 778139.333 ops/s
# Warmup Iteration  20: 779497.190 ops/s
# Warmup Iteration  21: 779357.567 ops/s
# Warmup Iteration  22: 780126.784 ops/s
# Warmup Iteration  23: 779109.047 ops/s
# Warmup Iteration  24: 780500.062 ops/s
# Warmup Iteration  25: 779368.912 ops/s
# Warmup Iteration  26: 778870.345 ops/s
# Warmup Iteration  27: 779391.065 ops/s
# Warmup Iteration  28: 780088.879 ops/s
# Warmup Iteration  29: 779583.800 ops/s
# Warmup Iteration  30: 780240.075 ops/s
Iteration   1: 779269.768 ops/s
Iteration   2: 779589.854 ops/s
Iteration   3: 778267.603 ops/s
Iteration   4: 779266.156 ops/s
Iteration   5: 781588.560 ops/s
Iteration   6: 779128.333 ops/s
Iteration   7: 780503.533 ops/s
Iteration   8: 779132.628 ops/s
Iteration   9: 776506.346 ops/s
Iteration  10: 783577.701 ops/s
Iteration  11: 779251.058 ops/s
Iteration  12: 778464.379 ops/s
Iteration  13: 776868.097 ops/s
Iteration  14: 777823.228 ops/s
Iteration  15: 780343.509 ops/s
Iteration  16: 780233.642 ops/s
Iteration  17: 779192.408 ops/s
Iteration  18: 778960.075 ops/s
Iteration  19: 777246.878 ops/s
Iteration  20: 780230.915 ops/s
Iteration  21: 780910.559 ops/s
Iteration  22: 777838.076 ops/s
Iteration  23: 779943.687 ops/s
Iteration  24: 779350.645 ops/s
Iteration  25: 779446.311 ops/s
Iteration  26: 781417.338 ops/s
Iteration  27: 778367.677 ops/s
Iteration  28: 778338.498 ops/s
Iteration  29: 778965.453 ops/s
Iteration  30: 778903.149 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_retainAll":
  779297.536 ±(99.9%) 974.363 ops/s [Average]
  (min, avg, max) = (776506.346, 779297.536, 783577.701), stdev = 1458.381
  CI (99.9%): [778323.172, 780271.899] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_retainAll  thrpt   30  779297.536 ± 974.363  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 475477.079 ops/s
# Warmup Iteration   2: 951286.369 ops/s
# Warmup Iteration   3: 1069752.226 ops/s
# Warmup Iteration   4: 1073795.391 ops/s
# Warmup Iteration   5: 982538.617 ops/s
# Warmup Iteration   6: 990613.381 ops/s
# Warmup Iteration   7: 1072058.804 ops/s
# Warmup Iteration   8: 1068583.729 ops/s
# Warmup Iteration   9: 1073638.623 ops/s
# Warmup Iteration  10: 1070004.107 ops/s
# Warmup Iteration  11: 1067730.146 ops/s
# Warmup Iteration  12: 1070282.264 ops/s
# Warmup Iteration  13: 1074921.613 ops/s
# Warmup Iteration  14: 1072945.829 ops/s
# Warmup Iteration  15: 1076312.791 ops/s
# Warmup Iteration  16: 1075469.693 ops/s
# Warmup Iteration  17: 1072758.688 ops/s
# Warmup Iteration  18: 1072867.404 ops/s
# Warmup Iteration  19: 1074264.287 ops/s
# Warmup Iteration  20: 1074804.314 ops/s
# Warmup Iteration  21: 1070764.473 ops/s
# Warmup Iteration  22: 1073340.493 ops/s
# Warmup Iteration  23: 1076078.401 ops/s
# Warmup Iteration  24: 1074286.291 ops/s
# Warmup Iteration  25: 1073471.511 ops/s
# Warmup Iteration  26: 1074180.461 ops/s
# Warmup Iteration  27: 1073572.715 ops/s
# Warmup Iteration  28: 1074980.370 ops/s
# Warmup Iteration  29: 1070389.993 ops/s
# Warmup Iteration  30: 1076563.064 ops/s
Iteration   1: 1070461.964 ops/s
Iteration   2: 1073415.946 ops/s
Iteration   3: 1075685.447 ops/s
Iteration   4: 1073015.861 ops/s
Iteration   5: 1074022.577 ops/s
Iteration   6: 1076785.254 ops/s
Iteration   7: 1074313.209 ops/s
Iteration   8: 1075587.871 ops/s
Iteration   9: 1076222.524 ops/s
Iteration  10: 1073198.258 ops/s
Iteration  11: 1073619.740 ops/s
Iteration  12: 1072458.248 ops/s
Iteration  13: 1072775.930 ops/s
Iteration  14: 1074367.391 ops/s
Iteration  15: 1074153.780 ops/s
Iteration  16: 1073136.191 ops/s
Iteration  17: 1077256.463 ops/s
Iteration  18: 1072379.742 ops/s
Iteration  19: 1075912.110 ops/s
Iteration  20: 1073512.541 ops/s
Iteration  21: 1072825.882 ops/s
Iteration  22: 1076967.071 ops/s
Iteration  23: 1073830.139 ops/s
Iteration  24: 1066522.643 ops/s
Iteration  25: 1074677.809 ops/s
Iteration  26: 1072837.918 ops/s
Iteration  27: 1074022.081 ops/s
Iteration  28: 1073776.241 ops/s
Iteration  29: 1074695.089 ops/s
Iteration  30: 1073837.565 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_select":
  1073875.783 ±(99.9%) 1374.302 ops/s [Average]
  (min, avg, max) = (1066522.643, 1073875.783, 1077256.463), stdev = 2056.991
  CI (99.9%): [1072501.480, 1075250.085] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_select  thrpt   30  1073875.783 ± 1374.302  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_selectByOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_selectByOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 495926.651 ops/s
# Warmup Iteration   2: 913269.420 ops/s
# Warmup Iteration   3: 1031164.987 ops/s
# Warmup Iteration   4: 1035819.915 ops/s
# Warmup Iteration   5: 1037560.338 ops/s
# Warmup Iteration   6: 862306.563 ops/s
# Warmup Iteration   7: 1036869.805 ops/s
# Warmup Iteration   8: 1034990.852 ops/s
# Warmup Iteration   9: 1034627.181 ops/s
# Warmup Iteration  10: 1034266.587 ops/s
# Warmup Iteration  11: 1036739.203 ops/s
# Warmup Iteration  12: 1037669.137 ops/s
# Warmup Iteration  13: 1036058.198 ops/s
# Warmup Iteration  14: 1037576.056 ops/s
# Warmup Iteration  15: 1037911.049 ops/s
# Warmup Iteration  16: 1034140.975 ops/s
# Warmup Iteration  17: 1033938.600 ops/s
# Warmup Iteration  18: 1037391.418 ops/s
# Warmup Iteration  19: 1033773.815 ops/s
# Warmup Iteration  20: 1034579.134 ops/s
# Warmup Iteration  21: 1035527.722 ops/s
# Warmup Iteration  22: 1036607.642 ops/s
# Warmup Iteration  23: 1034354.621 ops/s
# Warmup Iteration  24: 1034653.364 ops/s
# Warmup Iteration  25: 1035651.945 ops/s
# Warmup Iteration  26: 1033549.442 ops/s
# Warmup Iteration  27: 1034892.763 ops/s
# Warmup Iteration  28: 1036618.383 ops/s
# Warmup Iteration  29: 1036094.705 ops/s
# Warmup Iteration  30: 1038378.684 ops/s
Iteration   1: 1036322.572 ops/s
Iteration   2: 1036758.782 ops/s
Iteration   3: 1037024.213 ops/s
Iteration   4: 1039145.585 ops/s
Iteration   5: 1036937.531 ops/s
Iteration   6: 1037938.800 ops/s
Iteration   7: 1035513.697 ops/s
Iteration   8: 1035909.104 ops/s
Iteration   9: 1038818.969 ops/s
Iteration  10: 1036961.362 ops/s
Iteration  11: 1037777.970 ops/s
Iteration  12: 1035865.349 ops/s
Iteration  13: 1036184.148 ops/s
Iteration  14: 1039088.331 ops/s
Iteration  15: 1035399.196 ops/s
Iteration  16: 1038842.139 ops/s
Iteration  17: 1037219.807 ops/s
Iteration  18: 1036727.138 ops/s
Iteration  19: 1039018.987 ops/s
Iteration  20: 1035294.818 ops/s
Iteration  21: 1038257.587 ops/s
Iteration  22: 1038906.645 ops/s
Iteration  23: 1037033.394 ops/s
Iteration  24: 1039738.473 ops/s
Iteration  25: 1036002.086 ops/s
Iteration  26: 1039470.587 ops/s
Iteration  27: 1036729.364 ops/s
Iteration  28: 1039991.000 ops/s
Iteration  29: 1037034.389 ops/s
Iteration  30: 1037518.844 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_selectByOccurrences":
  1037447.696 ±(99.9%) 926.691 ops/s [Average]
  (min, avg, max) = (1035294.818, 1037447.696, 1039991.000), stdev = 1387.028
  CI (99.9%): [1036521.005, 1038374.387] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_selectByOccurrences  thrpt   30  1037447.696 ± 926.691  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_selectDuplicates$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_selectDuplicates

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 859920.313 ops/s
# Warmup Iteration   2: 1718539.216 ops/s
# Warmup Iteration   3: 1907248.890 ops/s
# Warmup Iteration   4: 1915792.222 ops/s
# Warmup Iteration   5: 1568828.508 ops/s
# Warmup Iteration   6: 1919027.011 ops/s
# Warmup Iteration   7: 1919249.679 ops/s
# Warmup Iteration   8: 1917373.040 ops/s
# Warmup Iteration   9: 1909826.029 ops/s
# Warmup Iteration  10: 1921216.680 ops/s
# Warmup Iteration  11: 1917843.528 ops/s
# Warmup Iteration  12: 1919261.748 ops/s
# Warmup Iteration  13: 1919745.920 ops/s
# Warmup Iteration  14: 1917816.987 ops/s
# Warmup Iteration  15: 1915517.964 ops/s
# Warmup Iteration  16: 1920826.859 ops/s
# Warmup Iteration  17: 1919722.448 ops/s
# Warmup Iteration  18: 1917530.688 ops/s
# Warmup Iteration  19: 1920981.506 ops/s
# Warmup Iteration  20: 1919660.272 ops/s
# Warmup Iteration  21: 1917071.002 ops/s
# Warmup Iteration  22: 1918471.328 ops/s
# Warmup Iteration  23: 1920053.178 ops/s
# Warmup Iteration  24: 1916947.463 ops/s
# Warmup Iteration  25: 1921178.785 ops/s
# Warmup Iteration  26: 1918736.616 ops/s
# Warmup Iteration  27: 1916022.077 ops/s
# Warmup Iteration  28: 1919030.321 ops/s
# Warmup Iteration  29: 1920595.019 ops/s
# Warmup Iteration  30: 1917046.147 ops/s
Iteration   1: 1915191.885 ops/s
Iteration   2: 1914533.014 ops/s
Iteration   3: 1918462.531 ops/s
Iteration   4: 1913379.150 ops/s
Iteration   5: 1918366.125 ops/s
Iteration   6: 1916860.483 ops/s
Iteration   7: 1914338.508 ops/s
Iteration   8: 1917056.415 ops/s
Iteration   9: 1919586.953 ops/s
Iteration  10: 1921902.995 ops/s
Iteration  11: 1918639.049 ops/s
Iteration  12: 1920413.645 ops/s
Iteration  13: 1922944.861 ops/s
Iteration  14: 1915046.201 ops/s
Iteration  15: 1919903.959 ops/s
Iteration  16: 1918398.341 ops/s
Iteration  17: 1919131.016 ops/s
Iteration  18: 1915214.711 ops/s
Iteration  19: 1922065.033 ops/s
Iteration  20: 1915991.392 ops/s
Iteration  21: 1921952.929 ops/s
Iteration  22: 1920029.024 ops/s
Iteration  23: 1915534.445 ops/s
Iteration  24: 1921527.670 ops/s
Iteration  25: 1912816.822 ops/s
Iteration  26: 1916384.266 ops/s
Iteration  27: 1913875.199 ops/s
Iteration  28: 1918012.984 ops/s
Iteration  29: 1912585.761 ops/s
Iteration  30: 1920383.263 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_selectDuplicates":
  1917684.288 ±(99.9%) 2017.745 ops/s [Average]
  (min, avg, max) = (1912585.761, 1917684.288, 1922944.861), stdev = 3020.066
  CI (99.9%): [1915666.543, 1919702.033] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_selectDuplicates  thrpt   30  1917684.288 ± 2017.745  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 583808.896 ops/s
# Warmup Iteration   2: 1184690.991 ops/s
# Warmup Iteration   3: 1259927.614 ops/s
# Warmup Iteration   4: 1263520.365 ops/s
# Warmup Iteration   5: 1059090.040 ops/s
# Warmup Iteration   6: 1274137.078 ops/s
# Warmup Iteration   7: 1270308.891 ops/s
# Warmup Iteration   8: 1268932.544 ops/s
# Warmup Iteration   9: 1271662.673 ops/s
# Warmup Iteration  10: 1257802.147 ops/s
# Warmup Iteration  11: 1269176.704 ops/s
# Warmup Iteration  12: 1272590.706 ops/s
# Warmup Iteration  13: 1273218.762 ops/s
# Warmup Iteration  14: 1270442.085 ops/s
# Warmup Iteration  15: 1267728.092 ops/s
# Warmup Iteration  16: 1272211.280 ops/s
# Warmup Iteration  17: 1274273.708 ops/s
# Warmup Iteration  18: 1272062.849 ops/s
# Warmup Iteration  19: 1274273.738 ops/s
# Warmup Iteration  20: 1272186.380 ops/s
# Warmup Iteration  21: 1274571.916 ops/s
# Warmup Iteration  22: 1272785.880 ops/s
# Warmup Iteration  23: 1272166.696 ops/s
# Warmup Iteration  24: 1272408.620 ops/s
# Warmup Iteration  25: 1263702.132 ops/s
# Warmup Iteration  26: 1274945.260 ops/s
# Warmup Iteration  27: 1273227.805 ops/s
# Warmup Iteration  28: 1275350.098 ops/s
# Warmup Iteration  29: 1273170.223 ops/s
# Warmup Iteration  30: 1273796.596 ops/s
Iteration   1: 1272494.395 ops/s
Iteration   2: 1272245.882 ops/s
Iteration   3: 1272186.734 ops/s
Iteration   4: 1278755.494 ops/s
Iteration   5: 1274310.055 ops/s
Iteration   6: 1271154.948 ops/s
Iteration   7: 1270603.237 ops/s
Iteration   8: 1263023.223 ops/s
Iteration   9: 1272720.653 ops/s
Iteration  10: 1278453.509 ops/s
Iteration  11: 1274350.330 ops/s
Iteration  12: 1275113.629 ops/s
Iteration  13: 1274018.086 ops/s
Iteration  14: 1270326.699 ops/s
Iteration  15: 1272297.107 ops/s
Iteration  16: 1274248.722 ops/s
Iteration  17: 1274681.272 ops/s
Iteration  18: 1271588.612 ops/s
Iteration  19: 1270742.450 ops/s
Iteration  20: 1257611.932 ops/s
Iteration  21: 1272058.350 ops/s
Iteration  22: 1277305.173 ops/s
Iteration  23: 1274527.794 ops/s
Iteration  24: 1273233.293 ops/s
Iteration  25: 1273975.926 ops/s
Iteration  26: 1273986.837 ops/s
Iteration  27: 1272032.939 ops/s
Iteration  28: 1272325.637 ops/s
Iteration  29: 1274784.297 ops/s
Iteration  30: 1268457.118 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_selectInstancesOf":
  1272453.811 ±(99.9%) 2712.651 ops/s [Average]
  (min, avg, max) = (1257611.932, 1272453.811, 1278755.494), stdev = 4060.169
  CI (99.9%): [1269741.160, 1275166.462] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  1272453.811 ± 2712.651  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_selectToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_selectToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1072270.389 ops/s
# Warmup Iteration   2: 2198109.345 ops/s
# Warmup Iteration   3: 2425089.137 ops/s
# Warmup Iteration   4: 2426558.907 ops/s
# Warmup Iteration   5: 2014955.675 ops/s
# Warmup Iteration   6: 2445540.458 ops/s
# Warmup Iteration   7: 2442415.272 ops/s
# Warmup Iteration   8: 2443046.997 ops/s
# Warmup Iteration   9: 2440447.476 ops/s
# Warmup Iteration  10: 2442451.257 ops/s
# Warmup Iteration  11: 2443549.090 ops/s
# Warmup Iteration  12: 2435996.455 ops/s
# Warmup Iteration  13: 2442592.156 ops/s
# Warmup Iteration  14: 2436675.648 ops/s
# Warmup Iteration  15: 2443411.572 ops/s
# Warmup Iteration  16: 2442516.548 ops/s
# Warmup Iteration  17: 2440717.435 ops/s
# Warmup Iteration  18: 2444411.278 ops/s
# Warmup Iteration  19: 2442671.096 ops/s
# Warmup Iteration  20: 2444855.505 ops/s
# Warmup Iteration  21: 2443840.744 ops/s
# Warmup Iteration  22: 2444203.603 ops/s
# Warmup Iteration  23: 2445804.483 ops/s
# Warmup Iteration  24: 2440714.521 ops/s
# Warmup Iteration  25: 2440254.375 ops/s
# Warmup Iteration  26: 2443867.897 ops/s
# Warmup Iteration  27: 2445358.677 ops/s
# Warmup Iteration  28: 2447741.105 ops/s
# Warmup Iteration  29: 2443939.377 ops/s
# Warmup Iteration  30: 2441121.826 ops/s
Iteration   1: 2439816.470 ops/s
Iteration   2: 2445636.997 ops/s
Iteration   3: 2446376.140 ops/s
Iteration   4: 2440881.404 ops/s
Iteration   5: 2438046.052 ops/s
Iteration   6: 2444069.398 ops/s
Iteration   7: 2439723.912 ops/s
Iteration   8: 2439121.634 ops/s
Iteration   9: 2444746.227 ops/s
Iteration  10: 2435385.183 ops/s
Iteration  11: 2442291.640 ops/s
Iteration  12: 2439795.547 ops/s
Iteration  13: 2446958.896 ops/s
Iteration  14: 2440410.626 ops/s
Iteration  15: 2437526.677 ops/s
Iteration  16: 2449294.945 ops/s
Iteration  17: 2443895.479 ops/s
Iteration  18: 2445116.345 ops/s
Iteration  19: 2443141.659 ops/s
Iteration  20: 2436280.212 ops/s
Iteration  21: 2436458.067 ops/s
Iteration  22: 2443360.799 ops/s
Iteration  23: 2448857.262 ops/s
Iteration  24: 2443927.921 ops/s
Iteration  25: 2442035.577 ops/s
Iteration  26: 2436258.515 ops/s
Iteration  27: 2444962.293 ops/s
Iteration  28: 2444193.980 ops/s
Iteration  29: 2443334.248 ops/s
Iteration  30: 2448685.401 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_selectToTarget":
  2442352.983 ±(99.9%) 2626.803 ops/s [Average]
  (min, avg, max) = (2435385.183, 2442352.983, 2449294.945), stdev = 3931.675
  CI (99.9%): [2439726.181, 2444979.786] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_selectToTarget  thrpt   30  2442352.983 ± 2626.803  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_selectUnique$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_selectUnique

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 360209.952 ops/s
# Warmup Iteration   2: 604283.542 ops/s
# Warmup Iteration   3: 715791.454 ops/s
# Warmup Iteration   4: 720122.734 ops/s
# Warmup Iteration   5: 716814.753 ops/s
# Warmup Iteration   6: 636684.318 ops/s
# Warmup Iteration   7: 650508.399 ops/s
# Warmup Iteration   8: 713113.132 ops/s
# Warmup Iteration   9: 713432.077 ops/s
# Warmup Iteration  10: 714059.988 ops/s
# Warmup Iteration  11: 713799.533 ops/s
# Warmup Iteration  12: 714022.541 ops/s
# Warmup Iteration  13: 713932.619 ops/s
# Warmup Iteration  14: 708831.229 ops/s
# Warmup Iteration  15: 708157.392 ops/s
# Warmup Iteration  16: 710912.032 ops/s
# Warmup Iteration  17: 712774.928 ops/s
# Warmup Iteration  18: 715128.459 ops/s
# Warmup Iteration  19: 711012.905 ops/s
# Warmup Iteration  20: 712254.970 ops/s
# Warmup Iteration  21: 714717.237 ops/s
# Warmup Iteration  22: 714557.723 ops/s
# Warmup Iteration  23: 714821.645 ops/s
# Warmup Iteration  24: 714351.079 ops/s
# Warmup Iteration  25: 714182.718 ops/s
# Warmup Iteration  26: 715310.436 ops/s
# Warmup Iteration  27: 714719.019 ops/s
# Warmup Iteration  28: 714013.204 ops/s
# Warmup Iteration  29: 713175.953 ops/s
# Warmup Iteration  30: 713539.781 ops/s
Iteration   1: 714516.254 ops/s
Iteration   2: 715311.286 ops/s
Iteration   3: 713154.645 ops/s
Iteration   4: 713920.755 ops/s
Iteration   5: 712529.117 ops/s
Iteration   6: 712778.138 ops/s
Iteration   7: 714220.822 ops/s
Iteration   8: 712522.559 ops/s
Iteration   9: 715365.244 ops/s
Iteration  10: 715222.002 ops/s
Iteration  11: 715807.395 ops/s
Iteration  12: 714480.654 ops/s
Iteration  13: 715408.946 ops/s
Iteration  14: 714525.143 ops/s
Iteration  15: 715283.897 ops/s
Iteration  16: 714050.796 ops/s
Iteration  17: 716731.286 ops/s
Iteration  18: 714187.864 ops/s
Iteration  19: 712818.647 ops/s
Iteration  20: 713382.421 ops/s
Iteration  21: 716184.484 ops/s
Iteration  22: 714716.204 ops/s
Iteration  23: 715466.868 ops/s
Iteration  24: 714339.051 ops/s
Iteration  25: 715725.656 ops/s
Iteration  26: 714595.731 ops/s
Iteration  27: 715867.264 ops/s
Iteration  28: 715739.250 ops/s
Iteration  29: 715156.764 ops/s
Iteration  30: 714225.710 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_selectUnique":
  714607.828 ±(99.9%) 747.851 ops/s [Average]
  (min, avg, max) = (712522.559, 714607.828, 716731.286), stdev = 1119.349
  CI (99.9%): [713859.977, 715355.680] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_selectUnique  thrpt   30  714607.828 ± 747.851  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 477686.773 ops/s
# Warmup Iteration   2: 950901.573 ops/s
# Warmup Iteration   3: 1078070.634 ops/s
# Warmup Iteration   4: 1081810.791 ops/s
# Warmup Iteration   5: 1016785.600 ops/s
# Warmup Iteration   6: 968517.448 ops/s
# Warmup Iteration   7: 1078065.474 ops/s
# Warmup Iteration   8: 1076821.601 ops/s
# Warmup Iteration   9: 1079609.694 ops/s
# Warmup Iteration  10: 1079894.366 ops/s
# Warmup Iteration  11: 1076651.696 ops/s
# Warmup Iteration  12: 1075010.617 ops/s
# Warmup Iteration  13: 1082717.345 ops/s
# Warmup Iteration  14: 1079781.310 ops/s
# Warmup Iteration  15: 1085007.837 ops/s
# Warmup Iteration  16: 1075350.362 ops/s
# Warmup Iteration  17: 1075892.016 ops/s
# Warmup Iteration  18: 1078997.781 ops/s
# Warmup Iteration  19: 1080346.863 ops/s
# Warmup Iteration  20: 1077813.495 ops/s
# Warmup Iteration  21: 1078917.497 ops/s
# Warmup Iteration  22: 1080223.189 ops/s
# Warmup Iteration  23: 1082802.619 ops/s
# Warmup Iteration  24: 1078997.230 ops/s
# Warmup Iteration  25: 1080823.737 ops/s
# Warmup Iteration  26: 1080338.166 ops/s
# Warmup Iteration  27: 1078788.254 ops/s
# Warmup Iteration  28: 1078862.855 ops/s
# Warmup Iteration  29: 1079233.756 ops/s
# Warmup Iteration  30: 1077859.993 ops/s
Iteration   1: 1077521.061 ops/s
Iteration   2: 1080861.054 ops/s
Iteration   3: 1077924.092 ops/s
Iteration   4: 1077108.635 ops/s
Iteration   5: 1082726.798 ops/s
Iteration   6: 1081146.760 ops/s
Iteration   7: 1082864.096 ops/s
Iteration   8: 1082217.172 ops/s
Iteration   9: 1080942.641 ops/s
Iteration  10: 1080611.370 ops/s
Iteration  11: 1077000.060 ops/s
Iteration  12: 1084581.743 ops/s
Iteration  13: 1078978.158 ops/s
Iteration  14: 1081500.845 ops/s
Iteration  15: 1082905.932 ops/s
Iteration  16: 1082735.458 ops/s
Iteration  17: 1080953.215 ops/s
Iteration  18: 1080797.103 ops/s
Iteration  19: 1078263.627 ops/s
Iteration  20: 1078032.722 ops/s
Iteration  21: 1077466.502 ops/s
Iteration  22: 1063900.139 ops/s
Iteration  23: 1066218.462 ops/s
Iteration  24: 1064374.114 ops/s
Iteration  25: 1064908.291 ops/s
Iteration  26: 1061572.421 ops/s
Iteration  27: 1071258.115 ops/s
Iteration  28: 1081759.756 ops/s
Iteration  29: 1082337.524 ops/s
Iteration  30: 1080942.229 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_selectWith":
  1077480.336 ±(99.9%) 4408.776 ops/s [Average]
  (min, avg, max) = (1061572.421, 1077480.336, 1084581.743), stdev = 6598.849
  CI (99.9%): [1073071.561, 1081889.112] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_selectWith  thrpt   30  1077480.336 ± 4408.776  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 638245.891 ops/s
# Warmup Iteration   2: 1318980.488 ops/s
# Warmup Iteration   3: 1430685.833 ops/s
# Warmup Iteration   4: 1438292.968 ops/s
# Warmup Iteration   5: 1207501.414 ops/s
# Warmup Iteration   6: 1441310.903 ops/s
# Warmup Iteration   7: 1440370.986 ops/s
# Warmup Iteration   8: 1436658.018 ops/s
# Warmup Iteration   9: 1440518.720 ops/s
# Warmup Iteration  10: 1438980.649 ops/s
# Warmup Iteration  11: 1436675.701 ops/s
# Warmup Iteration  12: 1436740.691 ops/s
# Warmup Iteration  13: 1438526.133 ops/s
# Warmup Iteration  14: 1439895.774 ops/s
# Warmup Iteration  15: 1438517.539 ops/s
# Warmup Iteration  16: 1439243.602 ops/s
# Warmup Iteration  17: 1439074.357 ops/s
# Warmup Iteration  18: 1440015.009 ops/s
# Warmup Iteration  19: 1441443.589 ops/s
# Warmup Iteration  20: 1440563.861 ops/s
# Warmup Iteration  21: 1441057.926 ops/s
# Warmup Iteration  22: 1440791.135 ops/s
# Warmup Iteration  23: 1438919.150 ops/s
# Warmup Iteration  24: 1439444.663 ops/s
# Warmup Iteration  25: 1439087.275 ops/s
# Warmup Iteration  26: 1440697.576 ops/s
# Warmup Iteration  27: 1441530.266 ops/s
# Warmup Iteration  28: 1418417.364 ops/s
# Warmup Iteration  29: 1417770.801 ops/s
# Warmup Iteration  30: 1439015.484 ops/s
Iteration   1: 1439920.569 ops/s
Iteration   2: 1430052.669 ops/s
Iteration   3: 1438292.859 ops/s
Iteration   4: 1435576.283 ops/s
Iteration   5: 1436694.722 ops/s
Iteration   6: 1442963.642 ops/s
Iteration   7: 1440852.650 ops/s
Iteration   8: 1441769.121 ops/s
Iteration   9: 1433432.066 ops/s
Iteration  10: 1440693.300 ops/s
Iteration  11: 1436259.829 ops/s
Iteration  12: 1438790.302 ops/s
Iteration  13: 1441906.567 ops/s
Iteration  14: 1439929.224 ops/s
Iteration  15: 1438608.590 ops/s
Iteration  16: 1439669.061 ops/s
Iteration  17: 1439138.801 ops/s
Iteration  18: 1440379.174 ops/s
Iteration  19: 1442906.708 ops/s
Iteration  20: 1438931.073 ops/s
Iteration  21: 1435771.137 ops/s
Iteration  22: 1443165.322 ops/s
Iteration  23: 1439533.726 ops/s
Iteration  24: 1438343.034 ops/s
Iteration  25: 1439566.284 ops/s
Iteration  26: 1443040.608 ops/s
Iteration  27: 1439052.203 ops/s
Iteration  28: 1438532.419 ops/s
Iteration  29: 1443874.579 ops/s
Iteration  30: 1438732.139 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_selectWith_target":
  1439212.622 ±(99.9%) 2006.677 ops/s [Average]
  (min, avg, max) = (1430052.669, 1439212.622, 1443874.579), stdev = 3003.500
  CI (99.9%): [1437205.945, 1441219.299] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_selectWith_target  thrpt   30  1439212.622 ± 2006.677  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 771011.598 ops/s
# Warmup Iteration   2: 1361405.252 ops/s
# Warmup Iteration   3: 1526974.279 ops/s
# Warmup Iteration   4: 1549104.644 ops/s
# Warmup Iteration   5: 1551647.224 ops/s
# Warmup Iteration   6: 1282402.184 ops/s
# Warmup Iteration   7: 1541734.493 ops/s
# Warmup Iteration   8: 1546123.341 ops/s
# Warmup Iteration   9: 1546218.962 ops/s
# Warmup Iteration  10: 1545379.373 ops/s
# Warmup Iteration  11: 1544409.820 ops/s
# Warmup Iteration  12: 1546163.981 ops/s
# Warmup Iteration  13: 1543963.800 ops/s
# Warmup Iteration  14: 1546566.225 ops/s
# Warmup Iteration  15: 1523619.193 ops/s
# Warmup Iteration  16: 1545449.967 ops/s
# Warmup Iteration  17: 1543955.051 ops/s
# Warmup Iteration  18: 1541384.059 ops/s
# Warmup Iteration  19: 1542954.841 ops/s
# Warmup Iteration  20: 1541888.771 ops/s
# Warmup Iteration  21: 1541080.563 ops/s
# Warmup Iteration  22: 1541907.740 ops/s
# Warmup Iteration  23: 1541923.934 ops/s
# Warmup Iteration  24: 1541752.587 ops/s
# Warmup Iteration  25: 1538207.838 ops/s
# Warmup Iteration  26: 1542102.236 ops/s
# Warmup Iteration  27: 1543569.641 ops/s
# Warmup Iteration  28: 1541258.328 ops/s
# Warmup Iteration  29: 1542320.280 ops/s
# Warmup Iteration  30: 1542916.279 ops/s
Iteration   1: 1543532.699 ops/s
Iteration   2: 1541361.379 ops/s
Iteration   3: 1535703.090 ops/s
Iteration   4: 1544386.367 ops/s
Iteration   5: 1544420.370 ops/s
Iteration   6: 1545284.668 ops/s
Iteration   7: 1542675.936 ops/s
Iteration   8: 1539103.576 ops/s
Iteration   9: 1544261.123 ops/s
Iteration  10: 1542793.852 ops/s
Iteration  11: 1545850.616 ops/s
Iteration  12: 1541075.686 ops/s
Iteration  13: 1543520.910 ops/s
Iteration  14: 1542623.636 ops/s
Iteration  15: 1540514.926 ops/s
Iteration  16: 1543434.797 ops/s
Iteration  17: 1541244.116 ops/s
Iteration  18: 1544997.660 ops/s
Iteration  19: 1540708.998 ops/s
Iteration  20: 1544946.397 ops/s
Iteration  21: 1540673.997 ops/s
Iteration  22: 1543651.876 ops/s
Iteration  23: 1544684.415 ops/s
Iteration  24: 1538781.321 ops/s
Iteration  25: 1544807.286 ops/s
Iteration  26: 1540078.209 ops/s
Iteration  27: 1542364.654 ops/s
Iteration  28: 1545283.421 ops/s
Iteration  29: 1543927.425 ops/s
Iteration  30: 1547692.009 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_size":
  1542812.847 ±(99.9%) 1677.067 ops/s [Average]
  (min, avg, max) = (1535703.090, 1542812.847, 1547692.009), stdev = 2510.154
  CI (99.9%): [1541135.781, 1544489.914] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_size  thrpt   30  1542812.847 ± 1677.067  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_stream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_stream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 132194.398 ops/s
# Warmup Iteration   2: 258925.561 ops/s
# Warmup Iteration   3: 309647.192 ops/s
# Warmup Iteration   4: 310689.232 ops/s
# Warmup Iteration   5: 310405.774 ops/s
# Warmup Iteration   6: 258828.981 ops/s
# Warmup Iteration   7: 311433.671 ops/s
# Warmup Iteration   8: 311469.502 ops/s
# Warmup Iteration   9: 311183.195 ops/s
# Warmup Iteration  10: 311618.856 ops/s
# Warmup Iteration  11: 311470.266 ops/s
# Warmup Iteration  12: 311446.454 ops/s
# Warmup Iteration  13: 311434.037 ops/s
# Warmup Iteration  14: 311282.338 ops/s
# Warmup Iteration  15: 311180.533 ops/s
# Warmup Iteration  16: 311421.787 ops/s
# Warmup Iteration  17: 314669.179 ops/s
# Warmup Iteration  18: 313820.315 ops/s
# Warmup Iteration  19: 315119.837 ops/s
# Warmup Iteration  20: 314870.332 ops/s
# Warmup Iteration  21: 314625.838 ops/s
# Warmup Iteration  22: 315119.140 ops/s
# Warmup Iteration  23: 314787.782 ops/s
# Warmup Iteration  24: 314881.685 ops/s
# Warmup Iteration  25: 314979.044 ops/s
# Warmup Iteration  26: 314590.576 ops/s
# Warmup Iteration  27: 314980.181 ops/s
# Warmup Iteration  28: 314982.856 ops/s
# Warmup Iteration  29: 314969.254 ops/s
# Warmup Iteration  30: 315007.123 ops/s
Iteration   1: 314630.558 ops/s
Iteration   2: 315276.579 ops/s
Iteration   3: 314305.264 ops/s
Iteration   4: 314642.535 ops/s
Iteration   5: 315275.344 ops/s
Iteration   6: 314687.044 ops/s
Iteration   7: 315436.110 ops/s
Iteration   8: 314454.153 ops/s
Iteration   9: 314792.799 ops/s
Iteration  10: 315072.395 ops/s
Iteration  11: 315016.513 ops/s
Iteration  12: 315393.916 ops/s
Iteration  13: 314932.281 ops/s
Iteration  14: 314462.325 ops/s
Iteration  15: 315132.885 ops/s
Iteration  16: 314768.640 ops/s
Iteration  17: 315412.031 ops/s
Iteration  18: 314186.435 ops/s
Iteration  19: 315031.131 ops/s
Iteration  20: 315290.486 ops/s
Iteration  21: 314649.158 ops/s
Iteration  22: 314775.110 ops/s
Iteration  23: 314694.811 ops/s
Iteration  24: 315409.507 ops/s
Iteration  25: 315235.362 ops/s
Iteration  26: 314311.665 ops/s
Iteration  27: 315189.847 ops/s
Iteration  28: 314951.390 ops/s
Iteration  29: 315448.892 ops/s
Iteration  30: 314499.338 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_stream":
  314912.150 ±(99.9%) 254.063 ops/s [Average]
  (min, avg, max) = (314186.435, 314912.150, 315448.892), stdev = 380.270
  CI (99.9%): [314658.087, 315166.213] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_stream  thrpt   30  314912.150 ± 254.063  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 489979.489 ops/s
# Warmup Iteration   2: 873754.286 ops/s
# Warmup Iteration   3: 996849.437 ops/s
# Warmup Iteration   4: 1001344.920 ops/s
# Warmup Iteration   5: 995381.797 ops/s
# Warmup Iteration   6: 823736.164 ops/s
# Warmup Iteration   7: 973550.172 ops/s
# Warmup Iteration   8: 1002798.845 ops/s
# Warmup Iteration   9: 1001095.049 ops/s
# Warmup Iteration  10: 1003404.707 ops/s
# Warmup Iteration  11: 1002777.941 ops/s
# Warmup Iteration  12: 1003952.520 ops/s
# Warmup Iteration  13: 1003334.873 ops/s
# Warmup Iteration  14: 1004001.865 ops/s
# Warmup Iteration  15: 1003999.755 ops/s
# Warmup Iteration  16: 1002616.777 ops/s
# Warmup Iteration  17: 1003734.556 ops/s
# Warmup Iteration  18: 1002833.301 ops/s
# Warmup Iteration  19: 1002385.207 ops/s
# Warmup Iteration  20: 1002760.430 ops/s
# Warmup Iteration  21: 1002515.141 ops/s
# Warmup Iteration  22: 1002724.270 ops/s
# Warmup Iteration  23: 1003379.564 ops/s
# Warmup Iteration  24: 1002309.526 ops/s
# Warmup Iteration  25: 1002939.522 ops/s
# Warmup Iteration  26: 1002265.302 ops/s
# Warmup Iteration  27: 1003534.619 ops/s
# Warmup Iteration  28: 1002582.092 ops/s
# Warmup Iteration  29: 1002835.177 ops/s
# Warmup Iteration  30: 1001788.285 ops/s
Iteration   1: 1000191.952 ops/s
Iteration   2: 1003324.017 ops/s
Iteration   3: 1001595.488 ops/s
Iteration   4: 1004283.496 ops/s
Iteration   5: 1002710.585 ops/s
Iteration   6: 1002849.887 ops/s
Iteration   7: 1004113.435 ops/s
Iteration   8: 1003559.862 ops/s
Iteration   9: 1003937.629 ops/s
Iteration  10: 1003767.001 ops/s
Iteration  11: 1003821.393 ops/s
Iteration  12: 1002886.594 ops/s
Iteration  13: 1003152.928 ops/s
Iteration  14: 1004876.217 ops/s
Iteration  15: 967821.839 ops/s
Iteration  16: 1002778.647 ops/s
Iteration  17: 1001277.196 ops/s
Iteration  18: 1004842.268 ops/s
Iteration  19: 1002844.720 ops/s
Iteration  20: 1004758.462 ops/s
Iteration  21: 1001833.706 ops/s
Iteration  22: 1001961.926 ops/s
Iteration  23: 1003851.366 ops/s
Iteration  24: 1001100.616 ops/s
Iteration  25: 1003282.150 ops/s
Iteration  26: 1001195.333 ops/s
Iteration  27: 1002787.457 ops/s
Iteration  28: 1001314.642 ops/s
Iteration  29: 1000479.344 ops/s
Iteration  30: 1004842.677 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumByDouble":
  1001734.761 ±(99.9%) 4370.055 ops/s [Average]
  (min, avg, max) = (967821.839, 1001734.761, 1004876.217), stdev = 6540.893
  CI (99.9%): [997364.706, 1006104.816] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_sumByDouble  thrpt   30  1001734.761 ± 4370.055  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62.451 ops/s
# Warmup Iteration   2: 69.944 ops/s
# Warmup Iteration   3: 99.538 ops/s
# Warmup Iteration   4: 101.606 ops/s
# Warmup Iteration   5: 99.723 ops/s
# Warmup Iteration   6: 100.147 ops/s
# Warmup Iteration   7: 101.481 ops/s
# Warmup Iteration   8: 100.902 ops/s
# Warmup Iteration   9: 90.182 ops/s
# Warmup Iteration  10: 94.836 ops/s
# Warmup Iteration  11: 101.090 ops/s
# Warmup Iteration  12: 101.709 ops/s
# Warmup Iteration  13: 100.632 ops/s
# Warmup Iteration  14: 100.893 ops/s
# Warmup Iteration  15: 101.855 ops/s
# Warmup Iteration  16: 102.196 ops/s
# Warmup Iteration  17: 101.301 ops/s
# Warmup Iteration  18: 101.195 ops/s
# Warmup Iteration  19: 101.261 ops/s
# Warmup Iteration  20: 100.056 ops/s
# Warmup Iteration  21: 99.582 ops/s
# Warmup Iteration  22: 99.204 ops/s
# Warmup Iteration  23: 98.130 ops/s
# Warmup Iteration  24: 97.446 ops/s
# Warmup Iteration  25: 99.174 ops/s
# Warmup Iteration  26: 100.289 ops/s
# Warmup Iteration  27: 98.096 ops/s
# Warmup Iteration  28: 98.742 ops/s
# Warmup Iteration  29: 100.999 ops/s
# Warmup Iteration  30: 97.283 ops/s
Iteration   1: 96.986 ops/s
Iteration   2: 98.981 ops/s
Iteration   3: 100.389 ops/s
Iteration   4: 99.182 ops/s
Iteration   5: 98.402 ops/s
Iteration   6: 100.687 ops/s
Iteration   7: 99.832 ops/s
Iteration   8: 98.172 ops/s
Iteration   9: 99.422 ops/s
Iteration  10: 98.539 ops/s
Iteration  11: 97.196 ops/s
Iteration  12: 97.641 ops/s
Iteration  13: 98.167 ops/s
Iteration  14: 96.269 ops/s
Iteration  15: 96.602 ops/s
Iteration  16: 97.621 ops/s
Iteration  17: 96.089 ops/s
Iteration  18: 97.381 ops/s
Iteration  19: 97.830 ops/s
Iteration  20: 96.540 ops/s
Iteration  21: 95.830 ops/s
Iteration  22: 98.397 ops/s
Iteration  23: 96.805 ops/s
Iteration  24: 96.780 ops/s
Iteration  25: 97.753 ops/s
Iteration  26: 96.195 ops/s
Iteration  27: 98.356 ops/s
Iteration  28: 100.558 ops/s
Iteration  29: 100.737 ops/s
Iteration  30: 100.192 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  98.118 ±(99.9%) 0.992 ops/s [Average]
  (min, avg, max) = (95.830, 98.118, 100.737), stdev = 1.485
  CI (99.9%): [97.126, 99.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt   Score   Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  98.118 ± 0.992  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 501680.027 ops/s
# Warmup Iteration   2: 897465.315 ops/s
# Warmup Iteration   3: 1020351.713 ops/s
# Warmup Iteration   4: 1024399.605 ops/s
# Warmup Iteration   5: 1023297.191 ops/s
# Warmup Iteration   6: 851177.017 ops/s
# Warmup Iteration   7: 1026292.778 ops/s
# Warmup Iteration   8: 1026261.508 ops/s
# Warmup Iteration   9: 1025179.493 ops/s
# Warmup Iteration  10: 1025057.881 ops/s
# Warmup Iteration  11: 1026027.361 ops/s
# Warmup Iteration  12: 1024767.412 ops/s
# Warmup Iteration  13: 1025286.464 ops/s
# Warmup Iteration  14: 1026602.579 ops/s
# Warmup Iteration  15: 1024163.932 ops/s
# Warmup Iteration  16: 1027341.284 ops/s
# Warmup Iteration  17: 1025535.429 ops/s
# Warmup Iteration  18: 1023697.992 ops/s
# Warmup Iteration  19: 1023863.497 ops/s
# Warmup Iteration  20: 1022111.762 ops/s
# Warmup Iteration  21: 1021036.729 ops/s
# Warmup Iteration  22: 1025054.597 ops/s
# Warmup Iteration  23: 1022347.163 ops/s
# Warmup Iteration  24: 1021564.154 ops/s
# Warmup Iteration  25: 1023995.108 ops/s
# Warmup Iteration  26: 1023637.533 ops/s
# Warmup Iteration  27: 1023557.208 ops/s
# Warmup Iteration  28: 1025652.850 ops/s
# Warmup Iteration  29: 1023379.367 ops/s
# Warmup Iteration  30: 1024064.943 ops/s
Iteration   1: 1023884.886 ops/s
Iteration   2: 1025596.785 ops/s
Iteration   3: 1023997.837 ops/s
Iteration   4: 1025400.904 ops/s
Iteration   5: 1024143.507 ops/s
Iteration   6: 1025411.318 ops/s
Iteration   7: 1024230.389 ops/s
Iteration   8: 1024835.361 ops/s
Iteration   9: 1025920.802 ops/s
Iteration  10: 1017576.490 ops/s
Iteration  11: 1026603.097 ops/s
Iteration  12: 1022162.586 ops/s
Iteration  13: 1025977.657 ops/s
Iteration  14: 1023877.908 ops/s
Iteration  15: 1022374.604 ops/s
Iteration  16: 1025426.954 ops/s
Iteration  17: 1022567.897 ops/s
Iteration  18: 1026630.345 ops/s
Iteration  19: 1021459.148 ops/s
Iteration  20: 1025015.100 ops/s
Iteration  21: 1026032.986 ops/s
Iteration  22: 1025226.274 ops/s
Iteration  23: 1026593.397 ops/s
Iteration  24: 1022316.139 ops/s
Iteration  25: 1026575.162 ops/s
Iteration  26: 1025410.045 ops/s
Iteration  27: 1020123.575 ops/s
Iteration  28: 990172.524 ops/s
Iteration  29: 1020786.085 ops/s
Iteration  30: 1024544.255 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumByFloat":
  1023029.134 ±(99.9%) 4391.536 ops/s [Average]
  (min, avg, max) = (990172.524, 1023029.134, 1026630.345), stdev = 6573.045
  CI (99.9%): [1018637.598, 1027420.670] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_sumByFloat  thrpt   30  1023029.134 ± 4391.536  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62.640 ops/s
# Warmup Iteration   2: 75.212 ops/s
# Warmup Iteration   3: 101.530 ops/s
# Warmup Iteration   4: 100.356 ops/s
# Warmup Iteration   5: 100.279 ops/s
# Warmup Iteration   6: 100.320 ops/s
# Warmup Iteration   7: 101.161 ops/s
# Warmup Iteration   8: 102.346 ops/s
# Warmup Iteration   9: 87.506 ops/s
# Warmup Iteration  10: 98.489 ops/s
# Warmup Iteration  11: 100.905 ops/s
# Warmup Iteration  12: 101.519 ops/s
# Warmup Iteration  13: 101.209 ops/s
# Warmup Iteration  14: 100.440 ops/s
# Warmup Iteration  15: 99.429 ops/s
# Warmup Iteration  16: 101.060 ops/s
# Warmup Iteration  17: 98.405 ops/s
# Warmup Iteration  18: 99.407 ops/s
# Warmup Iteration  19: 99.635 ops/s
# Warmup Iteration  20: 98.541 ops/s
# Warmup Iteration  21: 98.089 ops/s
# Warmup Iteration  22: 97.899 ops/s
# Warmup Iteration  23: 97.881 ops/s
# Warmup Iteration  24: 98.688 ops/s
# Warmup Iteration  25: 97.235 ops/s
# Warmup Iteration  26: 98.446 ops/s
# Warmup Iteration  27: 97.990 ops/s
# Warmup Iteration  28: 97.306 ops/s
# Warmup Iteration  29: 97.927 ops/s
# Warmup Iteration  30: 98.763 ops/s
Iteration   1: 98.755 ops/s
Iteration   2: 98.341 ops/s
Iteration   3: 99.553 ops/s
Iteration   4: 98.313 ops/s
Iteration   5: 97.896 ops/s
Iteration   6: 99.686 ops/s
Iteration   7: 99.236 ops/s
Iteration   8: 98.419 ops/s
Iteration   9: 97.443 ops/s
Iteration  10: 97.506 ops/s
Iteration  11: 95.932 ops/s
Iteration  12: 97.307 ops/s
Iteration  13: 91.949 ops/s
Iteration  14: 90.734 ops/s
Iteration  15: 95.520 ops/s
Iteration  16: 99.551 ops/s
Iteration  17: 98.807 ops/s
Iteration  18: 96.581 ops/s
Iteration  19: 98.189 ops/s
Iteration  20: 98.701 ops/s
Iteration  21: 97.521 ops/s
Iteration  22: 98.749 ops/s
Iteration  23: 98.277 ops/s
Iteration  24: 97.422 ops/s
Iteration  25: 98.629 ops/s
Iteration  26: 98.602 ops/s
Iteration  27: 97.074 ops/s
Iteration  28: 98.738 ops/s
Iteration  29: 98.325 ops/s
Iteration  30: 98.038 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  97.660 ±(99.9%) 1.326 ops/s [Average]
  (min, avg, max) = (90.734, 97.660, 99.686), stdev = 1.985
  CI (99.9%): [96.334, 98.986] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt   Score   Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  97.660 ± 1.326  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 590668.235 ops/s
# Warmup Iteration   2: 1118196.082 ops/s
# Warmup Iteration   3: 1238459.002 ops/s
# Warmup Iteration   4: 1243503.179 ops/s
# Warmup Iteration   5: 1137313.704 ops/s
# Warmup Iteration   6: 1141588.051 ops/s
# Warmup Iteration   7: 1247731.296 ops/s
# Warmup Iteration   8: 1249289.789 ops/s
# Warmup Iteration   9: 1243284.238 ops/s
# Warmup Iteration  10: 1245115.808 ops/s
# Warmup Iteration  11: 1244557.631 ops/s
# Warmup Iteration  12: 1245449.900 ops/s
# Warmup Iteration  13: 1247565.821 ops/s
# Warmup Iteration  14: 1246950.234 ops/s
# Warmup Iteration  15: 1246609.250 ops/s
# Warmup Iteration  16: 1248198.207 ops/s
# Warmup Iteration  17: 1255507.352 ops/s
# Warmup Iteration  18: 1255938.947 ops/s
# Warmup Iteration  19: 1254268.346 ops/s
# Warmup Iteration  20: 1254588.795 ops/s
# Warmup Iteration  21: 1252926.142 ops/s
# Warmup Iteration  22: 1255243.639 ops/s
# Warmup Iteration  23: 1253865.166 ops/s
# Warmup Iteration  24: 1252457.279 ops/s
# Warmup Iteration  25: 1256232.414 ops/s
# Warmup Iteration  26: 1256158.189 ops/s
# Warmup Iteration  27: 1254234.734 ops/s
# Warmup Iteration  28: 1255691.172 ops/s
# Warmup Iteration  29: 1253941.985 ops/s
# Warmup Iteration  30: 1256099.718 ops/s
Iteration   1: 1253563.910 ops/s
Iteration   2: 1254402.803 ops/s
Iteration   3: 1257002.231 ops/s
Iteration   4: 1254815.592 ops/s
Iteration   5: 1255769.999 ops/s
Iteration   6: 1255830.402 ops/s
Iteration   7: 1251055.704 ops/s
Iteration   8: 1253631.828 ops/s
Iteration   9: 1251480.848 ops/s
Iteration  10: 1250346.658 ops/s
Iteration  11: 1252866.620 ops/s
Iteration  12: 1252634.269 ops/s
Iteration  13: 1252503.656 ops/s
Iteration  14: 1256299.794 ops/s
Iteration  15: 1253584.781 ops/s
Iteration  16: 1257513.961 ops/s
Iteration  17: 1255786.826 ops/s
Iteration  18: 1254884.529 ops/s
Iteration  19: 1256163.478 ops/s
Iteration  20: 1255330.505 ops/s
Iteration  21: 1254865.850 ops/s
Iteration  22: 1256666.051 ops/s
Iteration  23: 1255504.217 ops/s
Iteration  24: 1256937.929 ops/s
Iteration  25: 1258185.238 ops/s
Iteration  26: 1255125.681 ops/s
Iteration  27: 1257136.448 ops/s
Iteration  28: 1254028.292 ops/s
Iteration  29: 1250469.556 ops/s
Iteration  30: 1251716.418 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumByInt":
  1254536.802 ±(99.9%) 1441.741 ops/s [Average]
  (min, avg, max) = (1250346.658, 1254536.802, 1258185.238), stdev = 2157.930
  CI (99.9%): [1253095.062, 1255978.543] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_sumByInt  thrpt   30  1254536.802 ± 1441.741  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 600384.392 ops/s
# Warmup Iteration   2: 1189565.613 ops/s
# Warmup Iteration   3: 1309370.186 ops/s
# Warmup Iteration   4: 1316772.758 ops/s
# Warmup Iteration   5: 1089382.450 ops/s
# Warmup Iteration   6: 1320079.645 ops/s
# Warmup Iteration   7: 1319792.187 ops/s
# Warmup Iteration   8: 1318408.637 ops/s
# Warmup Iteration   9: 1319543.881 ops/s
# Warmup Iteration  10: 1319222.197 ops/s
# Warmup Iteration  11: 1320734.462 ops/s
# Warmup Iteration  12: 1316220.884 ops/s
# Warmup Iteration  13: 1318179.872 ops/s
# Warmup Iteration  14: 1318202.776 ops/s
# Warmup Iteration  15: 1318163.581 ops/s
# Warmup Iteration  16: 1319610.355 ops/s
# Warmup Iteration  17: 1322973.701 ops/s
# Warmup Iteration  18: 1320658.335 ops/s
# Warmup Iteration  19: 1322787.921 ops/s
# Warmup Iteration  20: 1323072.719 ops/s
# Warmup Iteration  21: 1322021.817 ops/s
# Warmup Iteration  22: 1323498.426 ops/s
# Warmup Iteration  23: 1324023.353 ops/s
# Warmup Iteration  24: 1323413.838 ops/s
# Warmup Iteration  25: 1323878.781 ops/s
# Warmup Iteration  26: 1324011.790 ops/s
# Warmup Iteration  27: 1322842.823 ops/s
# Warmup Iteration  28: 1324938.779 ops/s
# Warmup Iteration  29: 1318789.880 ops/s
# Warmup Iteration  30: 1320424.136 ops/s
Iteration   1: 1323510.102 ops/s
Iteration   2: 1319999.337 ops/s
Iteration   3: 1324790.650 ops/s
Iteration   4: 1320303.263 ops/s
Iteration   5: 1322749.443 ops/s
Iteration   6: 1327805.815 ops/s
Iteration   7: 1322994.074 ops/s
Iteration   8: 1322837.513 ops/s
Iteration   9: 1324474.336 ops/s
Iteration  10: 1324791.845 ops/s
Iteration  11: 1321975.221 ops/s
Iteration  12: 1327633.539 ops/s
Iteration  13: 1322373.346 ops/s
Iteration  14: 1324412.753 ops/s
Iteration  15: 1323983.429 ops/s
Iteration  16: 1319031.482 ops/s
Iteration  17: 1320319.372 ops/s
Iteration  18: 1323648.618 ops/s
Iteration  19: 1322250.155 ops/s
Iteration  20: 1324880.315 ops/s
Iteration  21: 1324444.627 ops/s
Iteration  22: 1324069.134 ops/s
Iteration  23: 1321887.909 ops/s
Iteration  24: 1325657.984 ops/s
Iteration  25: 1324522.237 ops/s
Iteration  26: 1322905.214 ops/s
Iteration  27: 1325221.415 ops/s
Iteration  28: 1320564.944 ops/s
Iteration  29: 1325101.183 ops/s
Iteration  30: 1325916.924 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumByLong":
  1323501.873 ±(99.9%) 1423.948 ops/s [Average]
  (min, avg, max) = (1319031.482, 1323501.873, 1327805.815), stdev = 2131.299
  CI (99.9%): [1322077.925, 1324925.821] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_sumByLong  thrpt   30  1323501.873 ± 1423.948  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 979301.852 ops/s
# Warmup Iteration   2: 1779754.298 ops/s
# Warmup Iteration   3: 1975794.156 ops/s
# Warmup Iteration   4: 1983721.788 ops/s
# Warmup Iteration   5: 1894977.093 ops/s
# Warmup Iteration   6: 1743152.299 ops/s
# Warmup Iteration   7: 1986040.968 ops/s
# Warmup Iteration   8: 1987798.587 ops/s
# Warmup Iteration   9: 1986009.701 ops/s
# Warmup Iteration  10: 1987787.062 ops/s
# Warmup Iteration  11: 1980833.757 ops/s
# Warmup Iteration  12: 1985422.762 ops/s
# Warmup Iteration  13: 1986904.673 ops/s
# Warmup Iteration  14: 1985810.735 ops/s
# Warmup Iteration  15: 1985621.480 ops/s
# Warmup Iteration  16: 1985211.047 ops/s
# Warmup Iteration  17: 1983261.333 ops/s
# Warmup Iteration  18: 1978733.290 ops/s
# Warmup Iteration  19: 1986320.435 ops/s
# Warmup Iteration  20: 1985583.190 ops/s
# Warmup Iteration  21: 1981632.672 ops/s
# Warmup Iteration  22: 1985580.617 ops/s
# Warmup Iteration  23: 1986756.654 ops/s
# Warmup Iteration  24: 1985782.012 ops/s
# Warmup Iteration  25: 1986997.518 ops/s
# Warmup Iteration  26: 1984084.464 ops/s
# Warmup Iteration  27: 1985719.554 ops/s
# Warmup Iteration  28: 1985391.010 ops/s
# Warmup Iteration  29: 1986222.057 ops/s
# Warmup Iteration  30: 1984335.675 ops/s
Iteration   1: 1988865.437 ops/s
Iteration   2: 1984661.370 ops/s
Iteration   3: 1984585.623 ops/s
Iteration   4: 1983984.806 ops/s
Iteration   5: 1976547.886 ops/s
Iteration   6: 1958498.343 ops/s
Iteration   7: 1970077.908 ops/s
Iteration   8: 1990556.559 ops/s
Iteration   9: 1984450.499 ops/s
Iteration  10: 1983419.683 ops/s
Iteration  11: 1987657.202 ops/s
Iteration  12: 1983262.404 ops/s
Iteration  13: 1985884.516 ops/s
Iteration  14: 1981179.694 ops/s
Iteration  15: 1984884.682 ops/s
Iteration  16: 1987067.553 ops/s
Iteration  17: 1982339.909 ops/s
Iteration  18: 1983123.416 ops/s
Iteration  19: 1981442.240 ops/s
Iteration  20: 1977422.117 ops/s
Iteration  21: 1989342.826 ops/s
Iteration  22: 1985973.769 ops/s
Iteration  23: 1988670.736 ops/s
Iteration  24: 1984739.926 ops/s
Iteration  25: 1980738.212 ops/s
Iteration  26: 1985968.054 ops/s
Iteration  27: 1984358.562 ops/s
Iteration  28: 1985725.113 ops/s
Iteration  29: 1981403.899 ops/s
Iteration  30: 1983587.529 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumDouble":
  1983014.016 ±(99.9%) 4127.472 ops/s [Average]
  (min, avg, max) = (1958498.343, 1983014.016, 1990556.559), stdev = 6177.806
  CI (99.9%): [1978886.544, 1987141.488] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_sumDouble  thrpt   30  1983014.016 ± 4127.472  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 937816.519 ops/s
# Warmup Iteration   2: 1778719.809 ops/s
# Warmup Iteration   3: 1950161.841 ops/s
# Warmup Iteration   4: 1959414.340 ops/s
# Warmup Iteration   5: 1648021.347 ops/s
# Warmup Iteration   6: 1935611.167 ops/s
# Warmup Iteration   7: 1962330.102 ops/s
# Warmup Iteration   8: 1962080.939 ops/s
# Warmup Iteration   9: 1961189.818 ops/s
# Warmup Iteration  10: 1961653.410 ops/s
# Warmup Iteration  11: 1960409.847 ops/s
# Warmup Iteration  12: 1962912.379 ops/s
# Warmup Iteration  13: 1959983.840 ops/s
# Warmup Iteration  14: 1961958.458 ops/s
# Warmup Iteration  15: 1961861.626 ops/s
# Warmup Iteration  16: 1959322.301 ops/s
# Warmup Iteration  17: 1962679.125 ops/s
# Warmup Iteration  18: 1961027.242 ops/s
# Warmup Iteration  19: 1962908.232 ops/s
# Warmup Iteration  20: 1947018.181 ops/s
# Warmup Iteration  21: 1957504.174 ops/s
# Warmup Iteration  22: 1956313.206 ops/s
# Warmup Iteration  23: 1960179.647 ops/s
# Warmup Iteration  24: 1961449.796 ops/s
# Warmup Iteration  25: 1963108.854 ops/s
# Warmup Iteration  26: 1962950.155 ops/s
# Warmup Iteration  27: 1959915.047 ops/s
# Warmup Iteration  28: 1960451.208 ops/s
# Warmup Iteration  29: 1962413.201 ops/s
# Warmup Iteration  30: 1959242.047 ops/s
Iteration   1: 1961447.159 ops/s
Iteration   2: 1962207.285 ops/s
Iteration   3: 1959267.868 ops/s
Iteration   4: 1963587.929 ops/s
Iteration   5: 1960000.046 ops/s
Iteration   6: 1965596.365 ops/s
Iteration   7: 1954991.726 ops/s
Iteration   8: 1959893.105 ops/s
Iteration   9: 1964278.142 ops/s
Iteration  10: 1956502.668 ops/s
Iteration  11: 1953999.505 ops/s
Iteration  12: 1955901.690 ops/s
Iteration  13: 1954313.246 ops/s
Iteration  14: 1961432.726 ops/s
Iteration  15: 1962700.232 ops/s
Iteration  16: 1958196.308 ops/s
Iteration  17: 1957914.931 ops/s
Iteration  18: 1963358.048 ops/s
Iteration  19: 1959920.879 ops/s
Iteration  20: 1969625.392 ops/s
Iteration  21: 1958933.261 ops/s
Iteration  22: 1961469.592 ops/s
Iteration  23: 1962189.610 ops/s
Iteration  24: 1959863.581 ops/s
Iteration  25: 1959231.252 ops/s
Iteration  26: 1964479.581 ops/s
Iteration  27: 1957888.378 ops/s
Iteration  28: 1958682.899 ops/s
Iteration  29: 1963833.710 ops/s
Iteration  30: 1959544.522 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumFloat":
  1960375.055 ±(99.9%) 2350.661 ops/s [Average]
  (min, avg, max) = (1953999.505, 1960375.055, 1969625.392), stdev = 3518.359
  CI (99.9%): [1958024.393, 1962725.716] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_sumFloat  thrpt   30  1960375.055 ± 2350.661  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 976354.859 ops/s
# Warmup Iteration   2: 1884840.657 ops/s
# Warmup Iteration   3: 2079672.067 ops/s
# Warmup Iteration   4: 2093673.548 ops/s
# Warmup Iteration   5: 1734489.048 ops/s
# Warmup Iteration   6: 2096000.732 ops/s
# Warmup Iteration   7: 2098051.180 ops/s
# Warmup Iteration   8: 2095102.124 ops/s
# Warmup Iteration   9: 2095809.965 ops/s
# Warmup Iteration  10: 2096921.167 ops/s
# Warmup Iteration  11: 2096359.538 ops/s
# Warmup Iteration  12: 2094256.213 ops/s
# Warmup Iteration  13: 2097498.082 ops/s
# Warmup Iteration  14: 2094807.869 ops/s
# Warmup Iteration  15: 2097521.929 ops/s
# Warmup Iteration  16: 2098318.496 ops/s
# Warmup Iteration  17: 2096208.117 ops/s
# Warmup Iteration  18: 2098255.873 ops/s
# Warmup Iteration  19: 2096813.509 ops/s
# Warmup Iteration  20: 2096987.455 ops/s
# Warmup Iteration  21: 2098743.236 ops/s
# Warmup Iteration  22: 2096340.912 ops/s
# Warmup Iteration  23: 2096003.938 ops/s
# Warmup Iteration  24: 2098225.101 ops/s
# Warmup Iteration  25: 2099630.268 ops/s
# Warmup Iteration  26: 2094853.002 ops/s
# Warmup Iteration  27: 2096019.902 ops/s
# Warmup Iteration  28: 2094703.896 ops/s
# Warmup Iteration  29: 2095457.584 ops/s
# Warmup Iteration  30: 2098452.670 ops/s
Iteration   1: 2097700.454 ops/s
Iteration   2: 2097479.179 ops/s
Iteration   3: 2100800.125 ops/s
Iteration   4: 2096648.089 ops/s
Iteration   5: 2096459.513 ops/s
Iteration   6: 2096357.646 ops/s
Iteration   7: 2085404.381 ops/s
Iteration   8: 2095322.765 ops/s
Iteration   9: 2099357.457 ops/s
Iteration  10: 2094480.712 ops/s
Iteration  11: 2094026.694 ops/s
Iteration  12: 2098967.308 ops/s
Iteration  13: 2095026.847 ops/s
Iteration  14: 2097540.833 ops/s
Iteration  15: 2100258.801 ops/s
Iteration  16: 2095828.245 ops/s
Iteration  17: 2091813.160 ops/s
Iteration  18: 2100135.076 ops/s
Iteration  19: 2096850.560 ops/s
Iteration  20: 2092546.778 ops/s
Iteration  21: 2098202.552 ops/s
Iteration  22: 2097330.186 ops/s
Iteration  23: 2093320.529 ops/s
Iteration  24: 2098545.868 ops/s
Iteration  25: 2096854.598 ops/s
Iteration  26: 2093493.961 ops/s
Iteration  27: 2099936.484 ops/s
Iteration  28: 2094825.175 ops/s
Iteration  29: 2097253.402 ops/s
Iteration  30: 2101880.468 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumInteger":
  2096488.262 ±(99.9%) 2183.754 ops/s [Average]
  (min, avg, max) = (2085404.381, 2096488.262, 2101880.468), stdev = 3268.540
  CI (99.9%): [2094304.508, 2098672.015] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_sumInteger  thrpt   30  2096488.262 ± 2183.754  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 939452.378 ops/s
# Warmup Iteration   2: 1786015.709 ops/s
# Warmup Iteration   3: 2024661.709 ops/s
# Warmup Iteration   4: 2037857.851 ops/s
# Warmup Iteration   5: 1705405.113 ops/s
# Warmup Iteration   6: 2016527.834 ops/s
# Warmup Iteration   7: 2041743.180 ops/s
# Warmup Iteration   8: 2046130.951 ops/s
# Warmup Iteration   9: 2043680.485 ops/s
# Warmup Iteration  10: 2043795.418 ops/s
# Warmup Iteration  11: 2045345.866 ops/s
# Warmup Iteration  12: 2043885.254 ops/s
# Warmup Iteration  13: 2044552.425 ops/s
# Warmup Iteration  14: 2043362.972 ops/s
# Warmup Iteration  15: 2041372.234 ops/s
# Warmup Iteration  16: 2044555.944 ops/s
# Warmup Iteration  17: 2044864.024 ops/s
# Warmup Iteration  18: 2041825.303 ops/s
# Warmup Iteration  19: 2037331.814 ops/s
# Warmup Iteration  20: 2045865.949 ops/s
# Warmup Iteration  21: 2044311.768 ops/s
# Warmup Iteration  22: 2027638.403 ops/s
# Warmup Iteration  23: 2045833.908 ops/s
# Warmup Iteration  24: 2044289.811 ops/s
# Warmup Iteration  25: 2041702.800 ops/s
# Warmup Iteration  26: 2045068.696 ops/s
# Warmup Iteration  27: 2041864.923 ops/s
# Warmup Iteration  28: 2042626.955 ops/s
# Warmup Iteration  29: 2044452.012 ops/s
# Warmup Iteration  30: 2043957.250 ops/s
Iteration   1: 2044857.604 ops/s
Iteration   2: 2047960.972 ops/s
Iteration   3: 2042046.830 ops/s
Iteration   4: 2042386.663 ops/s
Iteration   5: 2049184.536 ops/s
Iteration   6: 2041358.358 ops/s
Iteration   7: 2045197.448 ops/s
Iteration   8: 2047993.902 ops/s
Iteration   9: 2045962.499 ops/s
Iteration  10: 2039730.296 ops/s
Iteration  11: 2048274.193 ops/s
Iteration  12: 2041340.723 ops/s
Iteration  13: 2045776.059 ops/s
Iteration  14: 2042674.789 ops/s
Iteration  15: 2039041.992 ops/s
Iteration  16: 2044839.531 ops/s
Iteration  17: 2046617.865 ops/s
Iteration  18: 2044402.107 ops/s
Iteration  19: 2047589.490 ops/s
Iteration  20: 2046370.443 ops/s
Iteration  21: 2041469.612 ops/s
Iteration  22: 2047264.748 ops/s
Iteration  23: 2044089.394 ops/s
Iteration  24: 2047072.610 ops/s
Iteration  25: 2048090.430 ops/s
Iteration  26: 2043614.881 ops/s
Iteration  27: 2044636.597 ops/s
Iteration  28: 2047321.764 ops/s
Iteration  29: 2044683.706 ops/s
Iteration  30: 2045507.980 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_sumLong":
  2044911.934 ±(99.9%) 1797.218 ops/s [Average]
  (min, avg, max) = (2039041.992, 2044911.934, 2049184.536), stdev = 2689.992
  CI (99.9%): [2043114.716, 2046709.152] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_sumLong  thrpt   30  2044911.934 ± 1797.218  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 330370.198 ops/s
# Warmup Iteration   2: 605301.896 ops/s
# Warmup Iteration   3: 666817.179 ops/s
# Warmup Iteration   4: 669920.522 ops/s
# Warmup Iteration   5: 643788.482 ops/s
# Warmup Iteration   6: 576767.772 ops/s
# Warmup Iteration   7: 666078.201 ops/s
# Warmup Iteration   8: 671194.800 ops/s
# Warmup Iteration   9: 671113.668 ops/s
# Warmup Iteration  10: 671458.232 ops/s
# Warmup Iteration  11: 670571.911 ops/s
# Warmup Iteration  12: 670176.420 ops/s
# Warmup Iteration  13: 670876.455 ops/s
# Warmup Iteration  14: 670856.035 ops/s
# Warmup Iteration  15: 671974.316 ops/s
# Warmup Iteration  16: 671724.368 ops/s
# Warmup Iteration  17: 671120.125 ops/s
# Warmup Iteration  18: 669404.815 ops/s
# Warmup Iteration  19: 672156.791 ops/s
# Warmup Iteration  20: 671651.885 ops/s
# Warmup Iteration  21: 671209.477 ops/s
# Warmup Iteration  22: 671244.088 ops/s
# Warmup Iteration  23: 665530.041 ops/s
# Warmup Iteration  24: 663520.236 ops/s
# Warmup Iteration  25: 672055.746 ops/s
# Warmup Iteration  26: 671024.577 ops/s
# Warmup Iteration  27: 671236.178 ops/s
# Warmup Iteration  28: 671516.506 ops/s
# Warmup Iteration  29: 671527.796 ops/s
# Warmup Iteration  30: 671815.364 ops/s
Iteration   1: 671485.512 ops/s
Iteration   2: 670823.244 ops/s
Iteration   3: 671133.444 ops/s
Iteration   4: 670960.817 ops/s
Iteration   5: 672347.878 ops/s
Iteration   6: 670283.538 ops/s
Iteration   7: 670889.138 ops/s
Iteration   8: 672455.900 ops/s
Iteration   9: 670279.709 ops/s
Iteration  10: 672040.519 ops/s
Iteration  11: 670870.927 ops/s
Iteration  12: 669494.435 ops/s
Iteration  13: 671497.468 ops/s
Iteration  14: 669839.658 ops/s
Iteration  15: 671491.458 ops/s
Iteration  16: 669181.435 ops/s
Iteration  17: 671180.234 ops/s
Iteration  18: 672674.090 ops/s
Iteration  19: 670826.440 ops/s
Iteration  20: 672709.952 ops/s
Iteration  21: 670919.923 ops/s
Iteration  22: 671593.754 ops/s
Iteration  23: 672109.280 ops/s
Iteration  24: 669958.766 ops/s
Iteration  25: 672587.330 ops/s
Iteration  26: 670541.137 ops/s
Iteration  27: 671558.536 ops/s
Iteration  28: 672111.045 ops/s
Iteration  29: 669824.179 ops/s
Iteration  30: 671646.813 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_take":
  671177.219 ±(99.9%) 649.110 ops/s [Average]
  (min, avg, max) = (669181.435, 671177.219, 672709.952), stdev = 971.558
  CI (99.9%): [670528.108, 671826.329] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_take  thrpt   30  671177.219 ± 649.110  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 913780.323 ops/s
# Warmup Iteration   2: 1758815.821 ops/s
# Warmup Iteration   3: 1918237.242 ops/s
# Warmup Iteration   4: 1937189.401 ops/s
# Warmup Iteration   5: 1612803.554 ops/s
# Warmup Iteration   6: 1935670.055 ops/s
# Warmup Iteration   7: 1920370.140 ops/s
# Warmup Iteration   8: 1920196.154 ops/s
# Warmup Iteration   9: 1914925.191 ops/s
# Warmup Iteration  10: 1928710.064 ops/s
# Warmup Iteration  11: 1923412.909 ops/s
# Warmup Iteration  12: 1925112.930 ops/s
# Warmup Iteration  13: 1941971.637 ops/s
# Warmup Iteration  14: 1942926.649 ops/s
# Warmup Iteration  15: 1936625.626 ops/s
# Warmup Iteration  16: 1936099.290 ops/s
# Warmup Iteration  17: 1944408.394 ops/s
# Warmup Iteration  18: 1943378.910 ops/s
# Warmup Iteration  19: 1943902.318 ops/s
# Warmup Iteration  20: 1933632.865 ops/s
# Warmup Iteration  21: 1945609.878 ops/s
# Warmup Iteration  22: 1946909.452 ops/s
# Warmup Iteration  23: 1944355.794 ops/s
# Warmup Iteration  24: 1946453.924 ops/s
# Warmup Iteration  25: 1945785.383 ops/s
# Warmup Iteration  26: 1939875.751 ops/s
# Warmup Iteration  27: 1946128.947 ops/s
# Warmup Iteration  28: 1946641.542 ops/s
# Warmup Iteration  29: 1943876.618 ops/s
# Warmup Iteration  30: 1946840.696 ops/s
Iteration   1: 1946241.981 ops/s
Iteration   2: 1945263.588 ops/s
Iteration   3: 1942569.974 ops/s
Iteration   4: 1947155.732 ops/s
Iteration   5: 1944735.858 ops/s
Iteration   6: 1942374.237 ops/s
Iteration   7: 1946437.072 ops/s
Iteration   8: 1946131.343 ops/s
Iteration   9: 1944373.087 ops/s
Iteration  10: 1947279.800 ops/s
Iteration  11: 1944780.410 ops/s
Iteration  12: 1945950.097 ops/s
Iteration  13: 1948428.174 ops/s
Iteration  14: 1943327.966 ops/s
Iteration  15: 1942357.986 ops/s
Iteration  16: 1949274.884 ops/s
Iteration  17: 1942234.505 ops/s
Iteration  18: 1945737.615 ops/s
Iteration  19: 1943585.282 ops/s
Iteration  20: 1946069.123 ops/s
Iteration  21: 1948765.096 ops/s
Iteration  22: 1944175.493 ops/s
Iteration  23: 1946669.719 ops/s
Iteration  24: 1949157.447 ops/s
Iteration  25: 1946458.215 ops/s
Iteration  26: 1946546.266 ops/s
Iteration  27: 1949045.532 ops/s
Iteration  28: 1942069.780 ops/s
Iteration  29: 1945160.959 ops/s
Iteration  30: 1945770.099 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_takeWhile":
  1945604.244 ±(99.9%) 1437.330 ops/s [Average]
  (min, avg, max) = (1942069.780, 1945604.244, 1949274.884), stdev = 2151.328
  CI (99.9%): [1944166.914, 1947041.574] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_takeWhile  thrpt   30  1945604.244 ± 1437.330  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 519105.958 ops/s
# Warmup Iteration   2: 616884.456 ops/s
# Warmup Iteration   3: 800803.465 ops/s
# Warmup Iteration   4: 803846.332 ops/s
# Warmup Iteration   5: 797158.371 ops/s
# Warmup Iteration   6: 802574.602 ops/s
# Warmup Iteration   7: 803874.781 ops/s
# Warmup Iteration   8: 803167.720 ops/s
# Warmup Iteration   9: 790564.069 ops/s
# Warmup Iteration  10: 680719.960 ops/s
# Warmup Iteration  11: 799939.428 ops/s
# Warmup Iteration  12: 803582.331 ops/s
# Warmup Iteration  13: 801681.410 ops/s
# Warmup Iteration  14: 803973.612 ops/s
# Warmup Iteration  15: 802195.595 ops/s
# Warmup Iteration  16: 802606.414 ops/s
# Warmup Iteration  17: 843032.320 ops/s
# Warmup Iteration  18: 843578.391 ops/s
# Warmup Iteration  19: 843711.428 ops/s
# Warmup Iteration  20: 843691.755 ops/s
# Warmup Iteration  21: 843489.787 ops/s
# Warmup Iteration  22: 844513.234 ops/s
# Warmup Iteration  23: 843235.594 ops/s
# Warmup Iteration  24: 843636.732 ops/s
# Warmup Iteration  25: 843783.256 ops/s
# Warmup Iteration  26: 842645.378 ops/s
# Warmup Iteration  27: 842525.386 ops/s
# Warmup Iteration  28: 842414.962 ops/s
# Warmup Iteration  29: 840536.129 ops/s
# Warmup Iteration  30: 843579.146 ops/s
Iteration   1: 843885.372 ops/s
Iteration   2: 844091.935 ops/s
Iteration   3: 840315.466 ops/s
Iteration   4: 843346.450 ops/s
Iteration   5: 844102.532 ops/s
Iteration   6: 842469.322 ops/s
Iteration   7: 841305.890 ops/s
Iteration   8: 842665.592 ops/s
Iteration   9: 840656.291 ops/s
Iteration  10: 841795.687 ops/s
Iteration  11: 844010.554 ops/s
Iteration  12: 842343.224 ops/s
Iteration  13: 838631.068 ops/s
Iteration  14: 844577.746 ops/s
Iteration  15: 839397.030 ops/s
Iteration  16: 844004.175 ops/s
Iteration  17: 843557.509 ops/s
Iteration  18: 841853.648 ops/s
Iteration  19: 841985.475 ops/s
Iteration  20: 843321.488 ops/s
Iteration  21: 835658.372 ops/s
Iteration  22: 836505.425 ops/s
Iteration  23: 835593.536 ops/s
Iteration  24: 836298.595 ops/s
Iteration  25: 840043.948 ops/s
Iteration  26: 841055.515 ops/s
Iteration  27: 842646.229 ops/s
Iteration  28: 841531.092 ops/s
Iteration  29: 840972.505 ops/s
Iteration  30: 843524.675 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_take_throws":
  841404.878 ±(99.9%) 1751.044 ops/s [Average]
  (min, avg, max) = (835593.536, 841404.878, 844577.746), stdev = 2620.880
  CI (99.9%): [839653.835, 843155.922] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_take_throws  thrpt   30  841404.878 ± 1751.044  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1497058.012 ops/s
# Warmup Iteration   2: 3019777.932 ops/s
# Warmup Iteration   3: 3279516.793 ops/s
# Warmup Iteration   4: 3313390.604 ops/s
# Warmup Iteration   5: 2744861.412 ops/s
# Warmup Iteration   6: 3314520.300 ops/s
# Warmup Iteration   7: 3326715.673 ops/s
# Warmup Iteration   8: 3326326.531 ops/s
# Warmup Iteration   9: 3329063.578 ops/s
# Warmup Iteration  10: 3322422.920 ops/s
# Warmup Iteration  11: 3325968.178 ops/s
# Warmup Iteration  12: 3324226.696 ops/s
# Warmup Iteration  13: 3322614.963 ops/s
# Warmup Iteration  14: 3322524.118 ops/s
# Warmup Iteration  15: 3322128.196 ops/s
# Warmup Iteration  16: 3327787.075 ops/s
# Warmup Iteration  17: 3280028.443 ops/s
# Warmup Iteration  18: 3278250.791 ops/s
# Warmup Iteration  19: 3279137.857 ops/s
# Warmup Iteration  20: 3280410.985 ops/s
# Warmup Iteration  21: 3278604.498 ops/s
# Warmup Iteration  22: 3282730.699 ops/s
# Warmup Iteration  23: 3278635.719 ops/s
# Warmup Iteration  24: 3276833.116 ops/s
# Warmup Iteration  25: 3277806.173 ops/s
# Warmup Iteration  26: 3276432.715 ops/s
# Warmup Iteration  27: 3280468.822 ops/s
# Warmup Iteration  28: 3278891.994 ops/s
# Warmup Iteration  29: 3274613.235 ops/s
# Warmup Iteration  30: 3278130.776 ops/s
Iteration   1: 3276521.255 ops/s
Iteration   2: 3282582.431 ops/s
Iteration   3: 3273048.561 ops/s
Iteration   4: 3275277.031 ops/s
Iteration   5: 3283003.902 ops/s
Iteration   6: 3276418.429 ops/s
Iteration   7: 3272669.559 ops/s
Iteration   8: 3286729.272 ops/s
Iteration   9: 3275257.416 ops/s
Iteration  10: 3276730.238 ops/s
Iteration  11: 3281553.033 ops/s
Iteration  12: 3275634.601 ops/s
Iteration  13: 3278238.525 ops/s
Iteration  14: 3272658.911 ops/s
Iteration  15: 3281091.928 ops/s
Iteration  16: 3272843.622 ops/s
Iteration  17: 3273447.076 ops/s
Iteration  18: 3281660.130 ops/s
Iteration  19: 3278970.958 ops/s
Iteration  20: 3282171.967 ops/s
Iteration  21: 3286604.094 ops/s
Iteration  22: 3277871.795 ops/s
Iteration  23: 3278371.456 ops/s
Iteration  24: 3281485.034 ops/s
Iteration  25: 3277572.055 ops/s
Iteration  26: 3283163.251 ops/s
Iteration  27: 3282235.529 ops/s
Iteration  28: 3275277.156 ops/s
Iteration  29: 3277331.620 ops/s
Iteration  30: 3282573.235 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_tap":
  3278633.136 ±(99.9%) 2717.265 ops/s [Average]
  (min, avg, max) = (3272658.911, 3278633.136, 3286729.272), stdev = 4067.074
  CI (99.9%): [3275915.871, 3281350.401] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_tap  thrpt   30  3278633.136 ± 2717.265  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 592187.633 ops/s
# Warmup Iteration   2: 1211376.937 ops/s
# Warmup Iteration   3: 1272535.302 ops/s
# Warmup Iteration   4: 1275924.293 ops/s
# Warmup Iteration   5: 1068739.938 ops/s
# Warmup Iteration   6: 1278123.821 ops/s
# Warmup Iteration   7: 1276499.953 ops/s
# Warmup Iteration   8: 1277076.188 ops/s
# Warmup Iteration   9: 1275858.456 ops/s
# Warmup Iteration  10: 1277366.070 ops/s
# Warmup Iteration  11: 1277147.853 ops/s
# Warmup Iteration  12: 1276404.150 ops/s
# Warmup Iteration  13: 1273806.982 ops/s
# Warmup Iteration  14: 1276318.335 ops/s
# Warmup Iteration  15: 1278979.830 ops/s
# Warmup Iteration  16: 1272215.503 ops/s
# Warmup Iteration  17: 1263084.361 ops/s
# Warmup Iteration  18: 1266371.718 ops/s
# Warmup Iteration  19: 1266059.398 ops/s
# Warmup Iteration  20: 1265907.169 ops/s
# Warmup Iteration  21: 1265490.116 ops/s
# Warmup Iteration  22: 1264662.832 ops/s
# Warmup Iteration  23: 1266546.520 ops/s
# Warmup Iteration  24: 1265900.266 ops/s
# Warmup Iteration  25: 1267171.204 ops/s
# Warmup Iteration  26: 1267556.857 ops/s
# Warmup Iteration  27: 1263761.817 ops/s
# Warmup Iteration  28: 1266113.883 ops/s
# Warmup Iteration  29: 1264889.430 ops/s
# Warmup Iteration  30: 1265022.028 ops/s
Iteration   1: 1268698.649 ops/s
Iteration   2: 1266224.698 ops/s
Iteration   3: 1263573.477 ops/s
Iteration   4: 1266922.673 ops/s
Iteration   5: 1263334.110 ops/s
Iteration   6: 1264240.836 ops/s
Iteration   7: 1264420.706 ops/s
Iteration   8: 1267156.636 ops/s
Iteration   9: 1265064.672 ops/s
Iteration  10: 1263878.823 ops/s
Iteration  11: 1267003.632 ops/s
Iteration  12: 1265760.472 ops/s
Iteration  13: 1264388.280 ops/s
Iteration  14: 1268266.171 ops/s
Iteration  15: 1263906.566 ops/s
Iteration  16: 1264775.888 ops/s
Iteration  17: 1265418.090 ops/s
Iteration  18: 1262240.154 ops/s
Iteration  19: 1264858.597 ops/s
Iteration  20: 1261555.474 ops/s
Iteration  21: 1266438.252 ops/s
Iteration  22: 1264227.556 ops/s
Iteration  23: 1263507.718 ops/s
Iteration  24: 1265983.354 ops/s
Iteration  25: 1264233.483 ops/s
Iteration  26: 1264543.533 ops/s
Iteration  27: 1267149.525 ops/s
Iteration  28: 1265882.150 ops/s
Iteration  29: 1265951.465 ops/s
Iteration  30: 1266271.658 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_testToString":
  1265195.910 ±(99.9%) 1113.087 ops/s [Average]
  (min, avg, max) = (1261555.474, 1265195.910, 1268698.649), stdev = 1666.016
  CI (99.9%): [1264082.823, 1266308.997] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_testToString  thrpt   30  1265195.910 ± 1113.087  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 801176.047 ops/s
# Warmup Iteration   2: 1385527.587 ops/s
# Warmup Iteration   3: 1656601.372 ops/s
# Warmup Iteration   4: 1669154.228 ops/s
# Warmup Iteration   5: 1665141.165 ops/s
# Warmup Iteration   6: 1348431.259 ops/s
# Warmup Iteration   7: 1665075.508 ops/s
# Warmup Iteration   8: 1666708.976 ops/s
# Warmup Iteration   9: 1666807.827 ops/s
# Warmup Iteration  10: 1664980.336 ops/s
# Warmup Iteration  11: 1668011.488 ops/s
# Warmup Iteration  12: 1667626.847 ops/s
# Warmup Iteration  13: 1666865.501 ops/s
# Warmup Iteration  14: 1666718.257 ops/s
# Warmup Iteration  15: 1660868.387 ops/s
# Warmup Iteration  16: 1665538.176 ops/s
# Warmup Iteration  17: 1669567.683 ops/s
# Warmup Iteration  18: 1669691.539 ops/s
# Warmup Iteration  19: 1669199.272 ops/s
# Warmup Iteration  20: 1668809.030 ops/s
# Warmup Iteration  21: 1669119.707 ops/s
# Warmup Iteration  22: 1669494.513 ops/s
# Warmup Iteration  23: 1668248.426 ops/s
# Warmup Iteration  24: 1669491.091 ops/s
# Warmup Iteration  25: 1668777.059 ops/s
# Warmup Iteration  26: 1668970.870 ops/s
# Warmup Iteration  27: 1670252.302 ops/s
# Warmup Iteration  28: 1667170.139 ops/s
# Warmup Iteration  29: 1669952.625 ops/s
# Warmup Iteration  30: 1669262.397 ops/s
Iteration   1: 1671612.786 ops/s
Iteration   2: 1668031.582 ops/s
Iteration   3: 1666869.637 ops/s
Iteration   4: 1670087.811 ops/s
Iteration   5: 1669319.599 ops/s
Iteration   6: 1670806.814 ops/s
Iteration   7: 1668764.394 ops/s
Iteration   8: 1672206.539 ops/s
Iteration   9: 1668443.797 ops/s
Iteration  10: 1670687.736 ops/s
Iteration  11: 1666690.788 ops/s
Iteration  12: 1673396.675 ops/s
Iteration  13: 1669402.320 ops/s
Iteration  14: 1668764.923 ops/s
Iteration  15: 1671978.733 ops/s
Iteration  16: 1669010.781 ops/s
Iteration  17: 1670121.506 ops/s
Iteration  18: 1665816.621 ops/s
Iteration  19: 1671002.373 ops/s
Iteration  20: 1668021.122 ops/s
Iteration  21: 1670683.828 ops/s
Iteration  22: 1669816.846 ops/s
Iteration  23: 1672276.068 ops/s
Iteration  24: 1668314.861 ops/s
Iteration  25: 1668321.713 ops/s
Iteration  26: 1671080.102 ops/s
Iteration  27: 1668496.522 ops/s
Iteration  28: 1670598.476 ops/s
Iteration  29: 1667183.105 ops/s
Iteration  30: 1669911.851 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toArray":
  1669590.664 ±(99.9%) 1218.289 ops/s [Average]
  (min, avg, max) = (1665816.621, 1669590.664, 1673396.675), stdev = 1823.477
  CI (99.9%): [1668372.375, 1670808.952] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_toArray  thrpt   30  1669590.664 ± 1218.289  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1977390.663 ops/s
# Warmup Iteration   2: 3798369.437 ops/s
# Warmup Iteration   3: 4146026.675 ops/s
# Warmup Iteration   4: 4141882.589 ops/s
# Warmup Iteration   5: 3454233.636 ops/s
# Warmup Iteration   6: 4155381.041 ops/s
# Warmup Iteration   7: 4153098.280 ops/s
# Warmup Iteration   8: 4151771.645 ops/s
# Warmup Iteration   9: 4151997.797 ops/s
# Warmup Iteration  10: 4142410.829 ops/s
# Warmup Iteration  11: 4147805.793 ops/s
# Warmup Iteration  12: 4152488.963 ops/s
# Warmup Iteration  13: 4151884.411 ops/s
# Warmup Iteration  14: 4146205.836 ops/s
# Warmup Iteration  15: 4152512.960 ops/s
# Warmup Iteration  16: 4150472.001 ops/s
# Warmup Iteration  17: 4130150.716 ops/s
# Warmup Iteration  18: 4149214.847 ops/s
# Warmup Iteration  19: 4145210.304 ops/s
# Warmup Iteration  20: 4145331.467 ops/s
# Warmup Iteration  21: 4152211.927 ops/s
# Warmup Iteration  22: 4152625.426 ops/s
# Warmup Iteration  23: 4147407.447 ops/s
# Warmup Iteration  24: 4152652.100 ops/s
# Warmup Iteration  25: 4149164.650 ops/s
# Warmup Iteration  26: 4152160.569 ops/s
# Warmup Iteration  27: 4147908.033 ops/s
# Warmup Iteration  28: 4151137.395 ops/s
# Warmup Iteration  29: 4149927.209 ops/s
# Warmup Iteration  30: 4143425.959 ops/s
Iteration   1: 4139249.408 ops/s
Iteration   2: 4150027.435 ops/s
Iteration   3: 4147300.664 ops/s
Iteration   4: 4151233.106 ops/s
Iteration   5: 4145023.100 ops/s
Iteration   6: 4147393.859 ops/s
Iteration   7: 4152944.019 ops/s
Iteration   8: 4150989.403 ops/s
Iteration   9: 4150320.471 ops/s
Iteration  10: 4158856.346 ops/s
Iteration  11: 4145777.572 ops/s
Iteration  12: 4152614.934 ops/s
Iteration  13: 4156441.565 ops/s
Iteration  14: 4147844.833 ops/s
Iteration  15: 4150862.153 ops/s
Iteration  16: 4159942.959 ops/s
Iteration  17: 4150410.692 ops/s
Iteration  18: 4152682.809 ops/s
Iteration  19: 4155558.853 ops/s
Iteration  20: 4150282.701 ops/s
Iteration  21: 4151253.320 ops/s
Iteration  22: 4154791.628 ops/s
Iteration  23: 4144684.996 ops/s
Iteration  24: 4103335.296 ops/s
Iteration  25: 4135211.756 ops/s
Iteration  26: 4152602.736 ops/s
Iteration  27: 4133373.442 ops/s
Iteration  28: 4155320.613 ops/s
Iteration  29: 4146204.366 ops/s
Iteration  30: 4143718.113 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toImmutable":
  4147875.105 ±(99.9%) 6943.113 ops/s [Average]
  (min, avg, max) = (4103335.296, 4147875.105, 4159942.959), stdev = 10392.125
  CI (99.9%): [4140931.992, 4154818.218] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_toImmutable  thrpt   30  4147875.105 ± 6943.113  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1009130.654 ops/s
# Warmup Iteration   2: 2362795.636 ops/s
# Warmup Iteration   3: 2465280.933 ops/s
# Warmup Iteration   4: 2293121.365 ops/s
# Warmup Iteration   5: 2257456.088 ops/s
# Warmup Iteration   6: 2480305.278 ops/s
# Warmup Iteration   7: 2475936.122 ops/s
# Warmup Iteration   8: 2480493.971 ops/s
# Warmup Iteration   9: 2481530.042 ops/s
# Warmup Iteration  10: 2478899.361 ops/s
# Warmup Iteration  11: 2476306.684 ops/s
# Warmup Iteration  12: 2481448.481 ops/s
# Warmup Iteration  13: 2478017.982 ops/s
# Warmup Iteration  14: 2480610.119 ops/s
# Warmup Iteration  15: 2479856.842 ops/s
# Warmup Iteration  16: 2477991.325 ops/s
# Warmup Iteration  17: 2494723.782 ops/s
# Warmup Iteration  18: 2480170.695 ops/s
# Warmup Iteration  19: 2488684.874 ops/s
# Warmup Iteration  20: 2485414.736 ops/s
# Warmup Iteration  21: 2486593.691 ops/s
# Warmup Iteration  22: 2498083.963 ops/s
# Warmup Iteration  23: 2514520.796 ops/s
# Warmup Iteration  24: 2489564.504 ops/s
# Warmup Iteration  25: 2497829.537 ops/s
# Warmup Iteration  26: 2488066.539 ops/s
# Warmup Iteration  27: 2488657.920 ops/s
# Warmup Iteration  28: 2474819.565 ops/s
# Warmup Iteration  29: 2484245.626 ops/s
# Warmup Iteration  30: 2499868.631 ops/s
Iteration   1: 2484060.555 ops/s
Iteration   2: 2491722.069 ops/s
Iteration   3: 2501583.170 ops/s
Iteration   4: 2511350.907 ops/s
Iteration   5: 2482285.946 ops/s
Iteration   6: 2483850.083 ops/s
Iteration   7: 2487162.987 ops/s
Iteration   8: 2502741.163 ops/s
Iteration   9: 2510459.222 ops/s
Iteration  10: 2515541.960 ops/s
Iteration  11: 2482252.834 ops/s
Iteration  12: 2474547.092 ops/s
Iteration  13: 2500624.447 ops/s
Iteration  14: 2508661.575 ops/s
Iteration  15: 2518046.729 ops/s
Iteration  16: 2483168.424 ops/s
Iteration  17: 2488202.655 ops/s
Iteration  18: 2473343.559 ops/s
Iteration  19: 2506766.372 ops/s
Iteration  20: 2510706.998 ops/s
Iteration  21: 2474208.984 ops/s
Iteration  22: 2489168.150 ops/s
Iteration  23: 2487117.547 ops/s
Iteration  24: 2490255.549 ops/s
Iteration  25: 2467076.640 ops/s
Iteration  26: 2480862.843 ops/s
Iteration  27: 2487446.529 ops/s
Iteration  28: 2487723.770 ops/s
Iteration  29: 2463209.763 ops/s
Iteration  30: 2497289.130 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toList":
  2491381.255 ±(99.9%) 9724.274 ops/s [Average]
  (min, avg, max) = (2463209.763, 2491381.255, 2518046.729), stdev = 14554.837
  CI (99.9%): [2481656.981, 2501105.529] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_toList  thrpt   30  2491381.255 ± 9724.274  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toMapOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toMapOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 994305.186 ops/s
# Warmup Iteration   2: 2077526.725 ops/s
# Warmup Iteration   3: 2190196.022 ops/s
# Warmup Iteration   4: 2197066.774 ops/s
# Warmup Iteration   5: 1840344.972 ops/s
# Warmup Iteration   6: 2205951.901 ops/s
# Warmup Iteration   7: 2207324.619 ops/s
# Warmup Iteration   8: 2208464.987 ops/s
# Warmup Iteration   9: 2207225.134 ops/s
# Warmup Iteration  10: 2203783.568 ops/s
# Warmup Iteration  11: 2208242.555 ops/s
# Warmup Iteration  12: 2196747.482 ops/s
# Warmup Iteration  13: 2192266.219 ops/s
# Warmup Iteration  14: 2206793.727 ops/s
# Warmup Iteration  15: 2209428.204 ops/s
# Warmup Iteration  16: 2208336.082 ops/s
# Warmup Iteration  17: 2207117.694 ops/s
# Warmup Iteration  18: 2205924.064 ops/s
# Warmup Iteration  19: 2201904.232 ops/s
# Warmup Iteration  20: 2200562.935 ops/s
# Warmup Iteration  21: 2195217.094 ops/s
# Warmup Iteration  22: 2202617.080 ops/s
# Warmup Iteration  23: 2208280.409 ops/s
# Warmup Iteration  24: 2208661.577 ops/s
# Warmup Iteration  25: 2206396.939 ops/s
# Warmup Iteration  26: 2207424.950 ops/s
# Warmup Iteration  27: 2206425.078 ops/s
# Warmup Iteration  28: 2206872.125 ops/s
# Warmup Iteration  29: 2204588.517 ops/s
# Warmup Iteration  30: 2208546.284 ops/s
Iteration   1: 2206549.407 ops/s
Iteration   2: 2202272.778 ops/s
Iteration   3: 2207999.133 ops/s
Iteration   4: 2209000.955 ops/s
Iteration   5: 2208686.630 ops/s
Iteration   6: 2211470.588 ops/s
Iteration   7: 2207681.929 ops/s
Iteration   8: 2205008.464 ops/s
Iteration   9: 2198075.080 ops/s
Iteration  10: 2209868.431 ops/s
Iteration  11: 2204509.004 ops/s
Iteration  12: 2207836.143 ops/s
Iteration  13: 2200716.634 ops/s
Iteration  14: 2210962.654 ops/s
Iteration  15: 2206692.476 ops/s
Iteration  16: 2205432.491 ops/s
Iteration  17: 2205556.149 ops/s
Iteration  18: 2211368.414 ops/s
Iteration  19: 2205803.330 ops/s
Iteration  20: 2207245.764 ops/s
Iteration  21: 2210988.237 ops/s
Iteration  22: 2201163.010 ops/s
Iteration  23: 2203994.225 ops/s
Iteration  24: 2206371.985 ops/s
Iteration  25: 2210970.208 ops/s
Iteration  26: 2204629.524 ops/s
Iteration  27: 2209049.129 ops/s
Iteration  28: 2202856.517 ops/s
Iteration  29: 2209974.574 ops/s
Iteration  30: 2207434.574 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toMapOfItemToCount":
  2206672.281 ±(99.9%) 2280.797 ops/s [Average]
  (min, avg, max) = (2198075.080, 2206672.281, 2211470.588), stdev = 3413.790
  CI (99.9%): [2204391.484, 2208953.078] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_toMapOfItemToCount  thrpt   30  2206672.281 ± 2280.797  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 601488.607 ops/s
# Warmup Iteration   2: 1174760.931 ops/s
# Warmup Iteration   3: 1313252.384 ops/s
# Warmup Iteration   4: 1321489.075 ops/s
# Warmup Iteration   5: 1174346.697 ops/s
# Warmup Iteration   6: 1251153.824 ops/s
# Warmup Iteration   7: 1321715.989 ops/s
# Warmup Iteration   8: 1323740.156 ops/s
# Warmup Iteration   9: 1322366.817 ops/s
# Warmup Iteration  10: 1322205.933 ops/s
# Warmup Iteration  11: 1319482.587 ops/s
# Warmup Iteration  12: 1322395.006 ops/s
# Warmup Iteration  13: 1322172.186 ops/s
# Warmup Iteration  14: 1323974.701 ops/s
# Warmup Iteration  15: 1323737.652 ops/s
# Warmup Iteration  16: 1323835.001 ops/s
# Warmup Iteration  17: 1319542.422 ops/s
# Warmup Iteration  18: 1323157.798 ops/s
# Warmup Iteration  19: 1323374.402 ops/s
# Warmup Iteration  20: 1322705.136 ops/s
# Warmup Iteration  21: 1322949.215 ops/s
# Warmup Iteration  22: 1323569.476 ops/s
# Warmup Iteration  23: 1322191.599 ops/s
# Warmup Iteration  24: 1323067.916 ops/s
# Warmup Iteration  25: 1322473.726 ops/s
# Warmup Iteration  26: 1321785.205 ops/s
# Warmup Iteration  27: 1321855.089 ops/s
# Warmup Iteration  28: 1320535.950 ops/s
# Warmup Iteration  29: 1322865.949 ops/s
# Warmup Iteration  30: 1322975.163 ops/s
Iteration   1: 1321022.120 ops/s
Iteration   2: 1324735.828 ops/s
Iteration   3: 1321951.711 ops/s
Iteration   4: 1321141.614 ops/s
Iteration   5: 1325349.301 ops/s
Iteration   6: 1323045.233 ops/s
Iteration   7: 1328759.698 ops/s
Iteration   8: 1322649.243 ops/s
Iteration   9: 1322795.304 ops/s
Iteration  10: 1323603.632 ops/s
Iteration  11: 1321378.118 ops/s
Iteration  12: 1322782.534 ops/s
Iteration  13: 1324091.687 ops/s
Iteration  14: 1321733.918 ops/s
Iteration  15: 1321880.506 ops/s
Iteration  16: 1324899.714 ops/s
Iteration  17: 1321160.875 ops/s
Iteration  18: 1324471.100 ops/s
Iteration  19: 1322659.276 ops/s
Iteration  20: 1323019.720 ops/s
Iteration  21: 1324192.329 ops/s
Iteration  22: 1322688.200 ops/s
Iteration  23: 1321777.086 ops/s
Iteration  24: 1322787.302 ops/s
Iteration  25: 1324715.568 ops/s
Iteration  26: 1322932.789 ops/s
Iteration  27: 1324027.237 ops/s
Iteration  28: 1322334.469 ops/s
Iteration  29: 1324800.406 ops/s
Iteration  30: 1322177.273 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedBag":
  1323185.460 ±(99.9%) 1089.320 ops/s [Average]
  (min, avg, max) = (1321022.120, 1323185.460, 1328759.698), stdev = 1630.443
  CI (99.9%): [1322096.140, 1324274.779] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedBag  thrpt   30  1323185.460 ± 1089.320  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 476013.161 ops/s
# Warmup Iteration   2: 922531.244 ops/s
# Warmup Iteration   3: 1037309.935 ops/s
# Warmup Iteration   4: 1041434.122 ops/s
# Warmup Iteration   5: 971424.079 ops/s
# Warmup Iteration   6: 941792.602 ops/s
# Warmup Iteration   7: 1042734.577 ops/s
# Warmup Iteration   8: 1036804.383 ops/s
# Warmup Iteration   9: 1043947.024 ops/s
# Warmup Iteration  10: 1044030.470 ops/s
# Warmup Iteration  11: 1043487.589 ops/s
# Warmup Iteration  12: 1044275.481 ops/s
# Warmup Iteration  13: 1044128.777 ops/s
# Warmup Iteration  14: 1043513.547 ops/s
# Warmup Iteration  15: 1043881.064 ops/s
# Warmup Iteration  16: 1043348.514 ops/s
# Warmup Iteration  17: 1041928.627 ops/s
# Warmup Iteration  18: 1043470.616 ops/s
# Warmup Iteration  19: 1041403.242 ops/s
# Warmup Iteration  20: 1043315.602 ops/s
# Warmup Iteration  21: 1043957.324 ops/s
# Warmup Iteration  22: 1042306.645 ops/s
# Warmup Iteration  23: 1038002.985 ops/s
# Warmup Iteration  24: 1042852.559 ops/s
# Warmup Iteration  25: 1042942.677 ops/s
# Warmup Iteration  26: 1041616.515 ops/s
# Warmup Iteration  27: 1043217.472 ops/s
# Warmup Iteration  28: 1041991.533 ops/s
# Warmup Iteration  29: 1042197.690 ops/s
# Warmup Iteration  30: 1041976.932 ops/s
Iteration   1: 1041364.155 ops/s
Iteration   2: 1044368.269 ops/s
Iteration   3: 1042210.965 ops/s
Iteration   4: 1036432.502 ops/s
Iteration   5: 1041858.868 ops/s
Iteration   6: 1039859.066 ops/s
Iteration   7: 1042538.409 ops/s
Iteration   8: 1042758.083 ops/s
Iteration   9: 1040771.075 ops/s
Iteration  10: 1041791.224 ops/s
Iteration  11: 1042701.391 ops/s
Iteration  12: 1041728.041 ops/s
Iteration  13: 1045133.278 ops/s
Iteration  14: 1042824.605 ops/s
Iteration  15: 1044694.489 ops/s
Iteration  16: 1039390.351 ops/s
Iteration  17: 1041486.015 ops/s
Iteration  18: 1044776.689 ops/s
Iteration  19: 1041255.977 ops/s
Iteration  20: 1041538.619 ops/s
Iteration  21: 1045571.179 ops/s
Iteration  22: 1041148.202 ops/s
Iteration  23: 1044572.489 ops/s
Iteration  24: 1042889.967 ops/s
Iteration  25: 1040882.605 ops/s
Iteration  26: 1043510.262 ops/s
Iteration  27: 1042815.200 ops/s
Iteration  28: 1043096.435 ops/s
Iteration  29: 1043716.891 ops/s
Iteration  30: 1043274.608 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedBagBy":
  1042365.330 ±(99.9%) 1270.106 ops/s [Average]
  (min, avg, max) = (1036432.502, 1042365.330, 1045571.179), stdev = 1901.035
  CI (99.9%): [1041095.224, 1043635.436] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  1042365.330 ± 1270.106  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedBagWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedBagWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 740643.920 ops/s
# Warmup Iteration   2: 1476841.392 ops/s
# Warmup Iteration   3: 1679832.970 ops/s
# Warmup Iteration   4: 1690408.838 ops/s
# Warmup Iteration   5: 1495661.865 ops/s
# Warmup Iteration   6: 1598233.729 ops/s
# Warmup Iteration   7: 1691742.318 ops/s
# Warmup Iteration   8: 1693356.173 ops/s
# Warmup Iteration   9: 1691960.321 ops/s
# Warmup Iteration  10: 1689665.742 ops/s
# Warmup Iteration  11: 1690715.073 ops/s
# Warmup Iteration  12: 1691519.638 ops/s
# Warmup Iteration  13: 1688890.974 ops/s
# Warmup Iteration  14: 1692651.559 ops/s
# Warmup Iteration  15: 1692528.651 ops/s
# Warmup Iteration  16: 1692497.525 ops/s
# Warmup Iteration  17: 1677928.605 ops/s
# Warmup Iteration  18: 1687452.247 ops/s
# Warmup Iteration  19: 1690227.768 ops/s
# Warmup Iteration  20: 1683749.797 ops/s
# Warmup Iteration  21: 1690610.403 ops/s
# Warmup Iteration  22: 1689933.202 ops/s
# Warmup Iteration  23: 1690919.132 ops/s
# Warmup Iteration  24: 1689148.287 ops/s
# Warmup Iteration  25: 1689963.848 ops/s
# Warmup Iteration  26: 1689861.384 ops/s
# Warmup Iteration  27: 1687636.716 ops/s
# Warmup Iteration  28: 1690261.735 ops/s
# Warmup Iteration  29: 1689791.098 ops/s
# Warmup Iteration  30: 1690484.194 ops/s
Iteration   1: 1687948.340 ops/s
Iteration   2: 1690225.543 ops/s
Iteration   3: 1690668.761 ops/s
Iteration   4: 1688482.349 ops/s
Iteration   5: 1687134.950 ops/s
Iteration   6: 1687002.265 ops/s
Iteration   7: 1688936.912 ops/s
Iteration   8: 1692950.765 ops/s
Iteration   9: 1688303.823 ops/s
Iteration  10: 1688307.745 ops/s
Iteration  11: 1692196.509 ops/s
Iteration  12: 1689670.698 ops/s
Iteration  13: 1690133.784 ops/s
Iteration  14: 1691876.731 ops/s
Iteration  15: 1689428.487 ops/s
Iteration  16: 1690103.672 ops/s
Iteration  17: 1691942.471 ops/s
Iteration  18: 1689501.596 ops/s
Iteration  19: 1692152.275 ops/s
Iteration  20: 1686695.182 ops/s
Iteration  21: 1688069.930 ops/s
Iteration  22: 1686766.231 ops/s
Iteration  23: 1689674.495 ops/s
Iteration  24: 1689965.142 ops/s
Iteration  25: 1691443.825 ops/s
Iteration  26: 1687517.382 ops/s
Iteration  27: 1687974.527 ops/s
Iteration  28: 1691577.567 ops/s
Iteration  29: 1689201.652 ops/s
Iteration  30: 1691224.885 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedBagWithComparator":
  1689569.283 ±(99.9%) 1202.032 ops/s [Average]
  (min, avg, max) = (1686695.182, 1689569.283, 1692950.765), stdev = 1799.145
  CI (99.9%): [1688367.251, 1690771.315] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedBagWithComparator  thrpt   30  1689569.283 ± 1202.032  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 897554.541 ops/s
# Warmup Iteration   2: 1697348.415 ops/s
# Warmup Iteration   3: 1946051.409 ops/s
# Warmup Iteration   4: 1954388.614 ops/s
# Warmup Iteration   5: 1905858.887 ops/s
# Warmup Iteration   6: 1662734.977 ops/s
# Warmup Iteration   7: 1950531.637 ops/s
# Warmup Iteration   8: 1950240.362 ops/s
# Warmup Iteration   9: 1952558.653 ops/s
# Warmup Iteration  10: 1954110.722 ops/s
# Warmup Iteration  11: 1951083.824 ops/s
# Warmup Iteration  12: 1948942.356 ops/s
# Warmup Iteration  13: 1953050.322 ops/s
# Warmup Iteration  14: 1953812.367 ops/s
# Warmup Iteration  15: 1954074.448 ops/s
# Warmup Iteration  16: 1952828.528 ops/s
# Warmup Iteration  17: 1951484.435 ops/s
# Warmup Iteration  18: 1950869.605 ops/s
# Warmup Iteration  19: 1951590.570 ops/s
# Warmup Iteration  20: 1952179.761 ops/s
# Warmup Iteration  21: 1944364.132 ops/s
# Warmup Iteration  22: 1952445.882 ops/s
# Warmup Iteration  23: 1953734.285 ops/s
# Warmup Iteration  24: 1952407.076 ops/s
# Warmup Iteration  25: 1952803.379 ops/s
# Warmup Iteration  26: 1949837.916 ops/s
# Warmup Iteration  27: 1954243.691 ops/s
# Warmup Iteration  28: 1953553.158 ops/s
# Warmup Iteration  29: 1952093.151 ops/s
# Warmup Iteration  30: 1951378.764 ops/s
Iteration   1: 1940360.668 ops/s
Iteration   2: 1951225.256 ops/s
Iteration   3: 1953782.133 ops/s
Iteration   4: 1950811.716 ops/s
Iteration   5: 1953715.259 ops/s
Iteration   6: 1945394.547 ops/s
Iteration   7: 1948933.074 ops/s
Iteration   8: 1954810.610 ops/s
Iteration   9: 1950033.669 ops/s
Iteration  10: 1951442.479 ops/s
Iteration  11: 1952535.052 ops/s
Iteration  12: 1941892.965 ops/s
Iteration  13: 1953397.071 ops/s
Iteration  14: 1951747.772 ops/s
Iteration  15: 1949103.232 ops/s
Iteration  16: 1953554.041 ops/s
Iteration  17: 1951460.487 ops/s
Iteration  18: 1955474.000 ops/s
Iteration  19: 1951372.480 ops/s
Iteration  20: 1952038.033 ops/s
Iteration  21: 1955199.634 ops/s
Iteration  22: 1952234.399 ops/s
Iteration  23: 1955650.707 ops/s
Iteration  24: 1952606.596 ops/s
Iteration  25: 1951209.696 ops/s
Iteration  26: 1955765.102 ops/s
Iteration  27: 1951349.759 ops/s
Iteration  28: 1953271.095 ops/s
Iteration  29: 1952077.677 ops/s
Iteration  30: 1951136.179 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedList":
  1951452.846 ±(99.9%) 2384.293 ops/s [Average]
  (min, avg, max) = (1940360.668, 1951452.846, 1955765.102), stdev = 3568.698
  CI (99.9%): [1949068.553, 1953837.140] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedList  thrpt   30  1951452.846 ± 2384.293  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 983904.033 ops/s
# Warmup Iteration   2: 1523965.105 ops/s
# Warmup Iteration   3: 1856267.243 ops/s
# Warmup Iteration   4: 1848305.454 ops/s
# Warmup Iteration   5: 1862234.639 ops/s
# Warmup Iteration   6: 1858104.919 ops/s
# Warmup Iteration   7: 1530563.906 ops/s
# Warmup Iteration   8: 1868199.949 ops/s
# Warmup Iteration   9: 1867673.486 ops/s
# Warmup Iteration  10: 1869174.294 ops/s
# Warmup Iteration  11: 1868586.209 ops/s
# Warmup Iteration  12: 1868346.214 ops/s
# Warmup Iteration  13: 1868044.810 ops/s
# Warmup Iteration  14: 1863265.204 ops/s
# Warmup Iteration  15: 1867632.473 ops/s
# Warmup Iteration  16: 1868091.888 ops/s
# Warmup Iteration  17: 1860011.073 ops/s
# Warmup Iteration  18: 1859954.124 ops/s
# Warmup Iteration  19: 1849177.594 ops/s
# Warmup Iteration  20: 1848422.307 ops/s
# Warmup Iteration  21: 1861151.938 ops/s
# Warmup Iteration  22: 1847904.641 ops/s
# Warmup Iteration  23: 1869725.658 ops/s
# Warmup Iteration  24: 1868618.125 ops/s
# Warmup Iteration  25: 1868463.630 ops/s
# Warmup Iteration  26: 1863089.038 ops/s
# Warmup Iteration  27: 1859146.460 ops/s
# Warmup Iteration  28: 1867233.434 ops/s
# Warmup Iteration  29: 1868115.905 ops/s
# Warmup Iteration  30: 1866060.521 ops/s
Iteration   1: 1867767.866 ops/s
Iteration   2: 1862656.531 ops/s
Iteration   3: 1869627.338 ops/s
Iteration   4: 1869313.785 ops/s
Iteration   5: 1867077.917 ops/s
Iteration   6: 1866792.481 ops/s
Iteration   7: 1870770.082 ops/s
Iteration   8: 1867238.331 ops/s
Iteration   9: 1866484.447 ops/s
Iteration  10: 1870738.732 ops/s
Iteration  11: 1866112.339 ops/s
Iteration  12: 1870772.057 ops/s
Iteration  13: 1864751.685 ops/s
Iteration  14: 1853484.316 ops/s
Iteration  15: 1859246.672 ops/s
Iteration  16: 1869621.575 ops/s
Iteration  17: 1858374.365 ops/s
Iteration  18: 1870064.621 ops/s
Iteration  19: 1865120.455 ops/s
Iteration  20: 1869230.310 ops/s
Iteration  21: 1866382.602 ops/s
Iteration  22: 1869197.534 ops/s
Iteration  23: 1870183.403 ops/s
Iteration  24: 1868922.433 ops/s
Iteration  25: 1871686.628 ops/s
Iteration  26: 1866415.795 ops/s
Iteration  27: 1869652.935 ops/s
Iteration  28: 1868636.487 ops/s
Iteration  29: 1870231.460 ops/s
Iteration  30: 1867324.787 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedListBy":
  1867129.332 ±(99.9%) 2727.791 ops/s [Average]
  (min, avg, max) = (1853484.316, 1867129.332, 1871686.628), stdev = 4082.830
  CI (99.9%): [1864401.541, 1869857.124] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedListBy  thrpt   30  1867129.332 ± 2727.791  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 435651.673 ops/s
# Warmup Iteration   2: 1004889.908 ops/s
# Warmup Iteration   3: 1046494.921 ops/s
# Warmup Iteration   4: 994907.632 ops/s
# Warmup Iteration   5: 952797.354 ops/s
# Warmup Iteration   6: 1055880.469 ops/s
# Warmup Iteration   7: 1053903.163 ops/s
# Warmup Iteration   8: 1054612.529 ops/s
# Warmup Iteration   9: 1055920.042 ops/s
# Warmup Iteration  10: 1052704.524 ops/s
# Warmup Iteration  11: 1048376.050 ops/s
# Warmup Iteration  12: 1056297.543 ops/s
# Warmup Iteration  13: 1054378.510 ops/s
# Warmup Iteration  14: 1057567.096 ops/s
# Warmup Iteration  15: 1054469.544 ops/s
# Warmup Iteration  16: 1057234.510 ops/s
# Warmup Iteration  17: 1052632.885 ops/s
# Warmup Iteration  18: 1050801.211 ops/s
# Warmup Iteration  19: 1054707.744 ops/s
# Warmup Iteration  20: 1053131.495 ops/s
# Warmup Iteration  21: 1055706.264 ops/s
# Warmup Iteration  22: 1052544.204 ops/s
# Warmup Iteration  23: 1053281.936 ops/s
# Warmup Iteration  24: 1056715.801 ops/s
# Warmup Iteration  25: 1050936.053 ops/s
# Warmup Iteration  26: 1054690.981 ops/s
# Warmup Iteration  27: 1052537.749 ops/s
# Warmup Iteration  28: 1056172.479 ops/s
# Warmup Iteration  29: 1056401.693 ops/s
# Warmup Iteration  30: 1055283.944 ops/s
Iteration   1: 1055906.960 ops/s
Iteration   2: 1052649.488 ops/s
Iteration   3: 1052585.400 ops/s
Iteration   4: 1050534.845 ops/s
Iteration   5: 1052927.121 ops/s
Iteration   6: 1054941.686 ops/s
Iteration   7: 1057125.488 ops/s
Iteration   8: 1058244.310 ops/s
Iteration   9: 1057435.777 ops/s
Iteration  10: 1055582.233 ops/s
Iteration  11: 1058693.082 ops/s
Iteration  12: 1054434.066 ops/s
Iteration  13: 1052320.199 ops/s
Iteration  14: 1054472.760 ops/s
Iteration  15: 1054260.719 ops/s
Iteration  16: 1055842.225 ops/s
Iteration  17: 1053312.155 ops/s
Iteration  18: 1052127.862 ops/s
Iteration  19: 1055873.635 ops/s
Iteration  20: 1058151.648 ops/s
Iteration  21: 1057970.859 ops/s
Iteration  22: 1055809.010 ops/s
Iteration  23: 1056049.895 ops/s
Iteration  24: 1055764.235 ops/s
Iteration  25: 1056510.129 ops/s
Iteration  26: 1060169.824 ops/s
Iteration  27: 1056670.825 ops/s
Iteration  28: 1054875.897 ops/s
Iteration  29: 1056610.359 ops/s
Iteration  30: 1056482.735 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedMap":
  1055477.848 ±(99.9%) 1484.242 ops/s [Average]
  (min, avg, max) = (1050534.845, 1055477.848, 1060169.824), stdev = 2221.543
  CI (99.9%): [1053993.606, 1056962.089] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedMap  thrpt   30  1055477.848 ± 1484.242  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedMapBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedMapBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 362412.889 ops/s
# Warmup Iteration   2: 700755.199 ops/s
# Warmup Iteration   3: 786895.634 ops/s
# Warmup Iteration   4: 787368.816 ops/s
# Warmup Iteration   5: 771025.872 ops/s
# Warmup Iteration   6: 682409.121 ops/s
# Warmup Iteration   7: 788891.985 ops/s
# Warmup Iteration   8: 790888.549 ops/s
# Warmup Iteration   9: 788254.565 ops/s
# Warmup Iteration  10: 789882.188 ops/s
# Warmup Iteration  11: 789033.146 ops/s
# Warmup Iteration  12: 788843.646 ops/s
# Warmup Iteration  13: 788570.179 ops/s
# Warmup Iteration  14: 789273.909 ops/s
# Warmup Iteration  15: 790076.015 ops/s
# Warmup Iteration  16: 788448.033 ops/s
# Warmup Iteration  17: 788526.475 ops/s
# Warmup Iteration  18: 791934.145 ops/s
# Warmup Iteration  19: 792161.021 ops/s
# Warmup Iteration  20: 792190.858 ops/s
# Warmup Iteration  21: 791286.359 ops/s
# Warmup Iteration  22: 788914.969 ops/s
# Warmup Iteration  23: 790675.858 ops/s
# Warmup Iteration  24: 791818.596 ops/s
# Warmup Iteration  25: 791588.516 ops/s
# Warmup Iteration  26: 791886.183 ops/s
# Warmup Iteration  27: 792717.325 ops/s
# Warmup Iteration  28: 790668.022 ops/s
# Warmup Iteration  29: 790600.931 ops/s
# Warmup Iteration  30: 791481.039 ops/s
Iteration   1: 789800.623 ops/s
Iteration   2: 789645.694 ops/s
Iteration   3: 790877.637 ops/s
Iteration   4: 789837.968 ops/s
Iteration   5: 788458.087 ops/s
Iteration   6: 790413.677 ops/s
Iteration   7: 790258.258 ops/s
Iteration   8: 791543.762 ops/s
Iteration   9: 790800.871 ops/s
Iteration  10: 790020.100 ops/s
Iteration  11: 789382.044 ops/s
Iteration  12: 791279.929 ops/s
Iteration  13: 792237.245 ops/s
Iteration  14: 790830.928 ops/s
Iteration  15: 792805.809 ops/s
Iteration  16: 792486.411 ops/s
Iteration  17: 791389.922 ops/s
Iteration  18: 792419.365 ops/s
Iteration  19: 792150.563 ops/s
Iteration  20: 791462.663 ops/s
Iteration  21: 791404.193 ops/s
Iteration  22: 790643.508 ops/s
Iteration  23: 790504.499 ops/s
Iteration  24: 788573.358 ops/s
Iteration  25: 790669.429 ops/s
Iteration  26: 791478.113 ops/s
Iteration  27: 791514.489 ops/s
Iteration  28: 791743.938 ops/s
Iteration  29: 791816.257 ops/s
Iteration  30: 790532.745 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedMapBy":
  790899.403 ±(99.9%) 732.729 ops/s [Average]
  (min, avg, max) = (788458.087, 790899.403, 792805.809), stdev = 1096.714
  CI (99.9%): [790166.674, 791632.132] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedMapBy  thrpt   30  790899.403 ± 732.729  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedMap_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedMap_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 422787.853 ops/s
# Warmup Iteration   2: 937137.206 ops/s
# Warmup Iteration   3: 996497.895 ops/s
# Warmup Iteration   4: 1001526.074 ops/s
# Warmup Iteration   5: 850277.959 ops/s
# Warmup Iteration   6: 1006699.200 ops/s
# Warmup Iteration   7: 1005307.008 ops/s
# Warmup Iteration   8: 1003757.184 ops/s
# Warmup Iteration   9: 1009560.642 ops/s
# Warmup Iteration  10: 1004534.283 ops/s
# Warmup Iteration  11: 1006886.815 ops/s
# Warmup Iteration  12: 1006119.934 ops/s
# Warmup Iteration  13: 1008457.385 ops/s
# Warmup Iteration  14: 1006828.371 ops/s
# Warmup Iteration  15: 1008731.488 ops/s
# Warmup Iteration  16: 1008724.825 ops/s
# Warmup Iteration  17: 1006018.949 ops/s
# Warmup Iteration  18: 1007377.286 ops/s
# Warmup Iteration  19: 1008877.668 ops/s
# Warmup Iteration  20: 1010009.084 ops/s
# Warmup Iteration  21: 1005908.181 ops/s
# Warmup Iteration  22: 1004426.832 ops/s
# Warmup Iteration  23: 1008788.311 ops/s
# Warmup Iteration  24: 1007600.696 ops/s
# Warmup Iteration  25: 1010119.522 ops/s
# Warmup Iteration  26: 1007835.335 ops/s
# Warmup Iteration  27: 1010623.126 ops/s
# Warmup Iteration  28: 999476.044 ops/s
# Warmup Iteration  29: 1002802.393 ops/s
# Warmup Iteration  30: 1002773.787 ops/s
Iteration   1: 1008597.880 ops/s
Iteration   2: 1006874.186 ops/s
Iteration   3: 1006993.540 ops/s
Iteration   4: 1004273.024 ops/s
Iteration   5: 1009076.791 ops/s
Iteration   6: 998427.481 ops/s
Iteration   7: 991354.315 ops/s
Iteration   8: 1010029.709 ops/s
Iteration   9: 1015283.292 ops/s
Iteration  10: 1011581.179 ops/s
Iteration  11: 1009032.486 ops/s
Iteration  12: 1010003.084 ops/s
Iteration  13: 1002987.955 ops/s
Iteration  14: 1006133.320 ops/s
Iteration  15: 999129.165 ops/s
Iteration  16: 1001978.574 ops/s
Iteration  17: 1003727.724 ops/s
Iteration  18: 1005758.279 ops/s
Iteration  19: 1005403.878 ops/s
Iteration  20: 1007344.753 ops/s
Iteration  21: 1002052.125 ops/s
Iteration  22: 1005418.860 ops/s
Iteration  23: 1002447.392 ops/s
Iteration  24: 1006285.097 ops/s
Iteration  25: 1007437.099 ops/s
Iteration  26: 1006659.997 ops/s
Iteration  27: 1004308.676 ops/s
Iteration  28: 1007743.407 ops/s
Iteration  29: 1004950.406 ops/s
Iteration  30: 1004565.533 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedMap_with_comparator":
  1005528.640 ±(99.9%) 2948.880 ops/s [Average]
  (min, avg, max) = (991354.315, 1005528.640, 1015283.292), stdev = 4413.745
  CI (99.9%): [1002579.760, 1008477.520] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedMap_with_comparator  thrpt   30  1005528.640 ± 2948.880  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1313146.243 ops/s
# Warmup Iteration   2: 2982618.825 ops/s
# Warmup Iteration   3: 3117538.931 ops/s
# Warmup Iteration   4: 2943523.132 ops/s
# Warmup Iteration   5: 2812717.907 ops/s
# Warmup Iteration   6: 3145295.984 ops/s
# Warmup Iteration   7: 3136783.642 ops/s
# Warmup Iteration   8: 3137493.398 ops/s
# Warmup Iteration   9: 3142166.690 ops/s
# Warmup Iteration  10: 3136247.618 ops/s
# Warmup Iteration  11: 3142642.354 ops/s
# Warmup Iteration  12: 3139634.577 ops/s
# Warmup Iteration  13: 3140332.449 ops/s
# Warmup Iteration  14: 3143822.699 ops/s
# Warmup Iteration  15: 3140907.403 ops/s
# Warmup Iteration  16: 3140526.370 ops/s
# Warmup Iteration  17: 3140269.230 ops/s
# Warmup Iteration  18: 3142882.820 ops/s
# Warmup Iteration  19: 3142165.901 ops/s
# Warmup Iteration  20: 3140672.799 ops/s
# Warmup Iteration  21: 3142956.367 ops/s
# Warmup Iteration  22: 3139882.391 ops/s
# Warmup Iteration  23: 3139926.528 ops/s
# Warmup Iteration  24: 3143895.497 ops/s
# Warmup Iteration  25: 3142942.288 ops/s
# Warmup Iteration  26: 3140549.428 ops/s
# Warmup Iteration  27: 3143086.678 ops/s
# Warmup Iteration  28: 3134713.149 ops/s
# Warmup Iteration  29: 3134145.462 ops/s
# Warmup Iteration  30: 3142224.259 ops/s
Iteration   1: 3143640.390 ops/s
Iteration   2: 3146947.133 ops/s
Iteration   3: 3138985.230 ops/s
Iteration   4: 3149230.445 ops/s
Iteration   5: 3140769.086 ops/s
Iteration   6: 3139271.123 ops/s
Iteration   7: 3144146.011 ops/s
Iteration   8: 3142455.930 ops/s
Iteration   9: 3142813.367 ops/s
Iteration  10: 3144324.438 ops/s
Iteration  11: 3140934.272 ops/s
Iteration  12: 3148135.481 ops/s
Iteration  13: 3139564.744 ops/s
Iteration  14: 3143202.866 ops/s
Iteration  15: 3140435.238 ops/s
Iteration  16: 3145412.491 ops/s
Iteration  17: 3149605.062 ops/s
Iteration  18: 3139733.920 ops/s
Iteration  19: 3142351.188 ops/s
Iteration  20: 3144085.589 ops/s
Iteration  21: 3143690.851 ops/s
Iteration  22: 3148724.373 ops/s
Iteration  23: 3140716.845 ops/s
Iteration  24: 3140058.827 ops/s
Iteration  25: 3143414.980 ops/s
Iteration  26: 3145086.703 ops/s
Iteration  27: 3150435.014 ops/s
Iteration  28: 3142822.012 ops/s
Iteration  29: 3135783.252 ops/s
Iteration  30: 3137854.836 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedSet":
  3143154.390 ±(99.9%) 2446.219 ops/s [Average]
  (min, avg, max) = (3135783.252, 3143154.390, 3150435.014), stdev = 3661.386
  CI (99.9%): [3140708.171, 3145600.609] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedSet  thrpt   30  3143154.390 ± 2446.219  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 655261.990 ops/s
# Warmup Iteration   2: 1281428.535 ops/s
# Warmup Iteration   3: 1404960.568 ops/s
# Warmup Iteration   4: 1415966.030 ops/s
# Warmup Iteration   5: 1202354.616 ops/s
# Warmup Iteration   6: 1395401.903 ops/s
# Warmup Iteration   7: 1418465.067 ops/s
# Warmup Iteration   8: 1418173.528 ops/s
# Warmup Iteration   9: 1414350.071 ops/s
# Warmup Iteration  10: 1415473.875 ops/s
# Warmup Iteration  11: 1418188.737 ops/s
# Warmup Iteration  12: 1415103.737 ops/s
# Warmup Iteration  13: 1413270.860 ops/s
# Warmup Iteration  14: 1414685.365 ops/s
# Warmup Iteration  15: 1417267.387 ops/s
# Warmup Iteration  16: 1413130.802 ops/s
# Warmup Iteration  17: 1412545.994 ops/s
# Warmup Iteration  18: 1414630.160 ops/s
# Warmup Iteration  19: 1415146.352 ops/s
# Warmup Iteration  20: 1415834.191 ops/s
# Warmup Iteration  21: 1415764.316 ops/s
# Warmup Iteration  22: 1415918.856 ops/s
# Warmup Iteration  23: 1414401.387 ops/s
# Warmup Iteration  24: 1415828.609 ops/s
# Warmup Iteration  25: 1416729.193 ops/s
# Warmup Iteration  26: 1414648.630 ops/s
# Warmup Iteration  27: 1415611.943 ops/s
# Warmup Iteration  28: 1415735.006 ops/s
# Warmup Iteration  29: 1417397.752 ops/s
# Warmup Iteration  30: 1415873.398 ops/s
Iteration   1: 1420908.897 ops/s
Iteration   2: 1414602.065 ops/s
Iteration   3: 1416183.457 ops/s
Iteration   4: 1417289.887 ops/s
Iteration   5: 1416016.160 ops/s
Iteration   6: 1417692.812 ops/s
Iteration   7: 1416846.055 ops/s
Iteration   8: 1412055.188 ops/s
Iteration   9: 1418726.842 ops/s
Iteration  10: 1414794.496 ops/s
Iteration  11: 1415735.595 ops/s
Iteration  12: 1418535.436 ops/s
Iteration  13: 1416687.601 ops/s
Iteration  14: 1417905.433 ops/s
Iteration  15: 1418008.002 ops/s
Iteration  16: 1416017.178 ops/s
Iteration  17: 1415245.416 ops/s
Iteration  18: 1418837.056 ops/s
Iteration  19: 1413096.047 ops/s
Iteration  20: 1419142.717 ops/s
Iteration  21: 1416544.331 ops/s
Iteration  22: 1416736.838 ops/s
Iteration  23: 1419254.583 ops/s
Iteration  24: 1416015.675 ops/s
Iteration  25: 1414327.022 ops/s
Iteration  26: 1417870.221 ops/s
Iteration  27: 1415681.033 ops/s
Iteration  28: 1417160.574 ops/s
Iteration  29: 1417781.065 ops/s
Iteration  30: 1415911.238 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedSetBy":
  1416720.297 ±(99.9%) 1266.048 ops/s [Average]
  (min, avg, max) = (1412055.188, 1416720.297, 1420908.897), stdev = 1894.961
  CI (99.9%): [1415454.249, 1417986.345] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1416720.297 ± 1266.048  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedSetWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedSetWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 646040.177 ops/s
# Warmup Iteration   2: 1359038.509 ops/s
# Warmup Iteration   3: 1461829.830 ops/s
# Warmup Iteration   4: 1473990.227 ops/s
# Warmup Iteration   5: 1234423.402 ops/s
# Warmup Iteration   6: 1475315.608 ops/s
# Warmup Iteration   7: 1473288.678 ops/s
# Warmup Iteration   8: 1473853.531 ops/s
# Warmup Iteration   9: 1475253.851 ops/s
# Warmup Iteration  10: 1474774.334 ops/s
# Warmup Iteration  11: 1468991.098 ops/s
# Warmup Iteration  12: 1475834.326 ops/s
# Warmup Iteration  13: 1475975.721 ops/s
# Warmup Iteration  14: 1474560.575 ops/s
# Warmup Iteration  15: 1474972.085 ops/s
# Warmup Iteration  16: 1473633.626 ops/s
# Warmup Iteration  17: 1478052.562 ops/s
# Warmup Iteration  18: 1476830.711 ops/s
# Warmup Iteration  19: 1474642.786 ops/s
# Warmup Iteration  20: 1475757.146 ops/s
# Warmup Iteration  21: 1473174.987 ops/s
# Warmup Iteration  22: 1474829.419 ops/s
# Warmup Iteration  23: 1474374.831 ops/s
# Warmup Iteration  24: 1478439.353 ops/s
# Warmup Iteration  25: 1476976.049 ops/s
# Warmup Iteration  26: 1476522.349 ops/s
# Warmup Iteration  27: 1476832.972 ops/s
# Warmup Iteration  28: 1478305.674 ops/s
# Warmup Iteration  29: 1476312.432 ops/s
# Warmup Iteration  30: 1478098.750 ops/s
Iteration   1: 1479207.112 ops/s
Iteration   2: 1473833.480 ops/s
Iteration   3: 1476834.661 ops/s
Iteration   4: 1478899.632 ops/s
Iteration   5: 1477612.072 ops/s
Iteration   6: 1476556.094 ops/s
Iteration   7: 1479106.675 ops/s
Iteration   8: 1472702.713 ops/s
Iteration   9: 1475642.999 ops/s
Iteration  10: 1477937.251 ops/s
Iteration  11: 1479557.874 ops/s
Iteration  12: 1477227.173 ops/s
Iteration  13: 1477066.832 ops/s
Iteration  14: 1477029.308 ops/s
Iteration  15: 1480221.646 ops/s
Iteration  16: 1477508.871 ops/s
Iteration  17: 1478058.978 ops/s
Iteration  18: 1473885.634 ops/s
Iteration  19: 1477661.948 ops/s
Iteration  20: 1479362.255 ops/s
Iteration  21: 1478569.388 ops/s
Iteration  22: 1480077.201 ops/s
Iteration  23: 1478933.610 ops/s
Iteration  24: 1474374.580 ops/s
Iteration  25: 1482144.819 ops/s
Iteration  26: 1474632.335 ops/s
Iteration  27: 1477207.452 ops/s
Iteration  28: 1481414.190 ops/s
Iteration  29: 1481480.377 ops/s
Iteration  30: 1477675.906 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedSetWithComparator":
  1477747.436 ±(99.9%) 1553.272 ops/s [Average]
  (min, avg, max) = (1472702.713, 1477747.436, 1482144.819), stdev = 2324.865
  CI (99.9%): [1476194.163, 1479300.708] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_toSortedSetWithComparator  thrpt   30  1477747.436 ± 1553.272  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1542799.834 ops/s
# Warmup Iteration   2: 3293257.910 ops/s
# Warmup Iteration   3: 3506335.100 ops/s
# Warmup Iteration   4: 3519451.590 ops/s
# Warmup Iteration   5: 2917963.569 ops/s
# Warmup Iteration   6: 3514412.401 ops/s
# Warmup Iteration   7: 3519719.836 ops/s
# Warmup Iteration   8: 3512239.985 ops/s
# Warmup Iteration   9: 3512117.412 ops/s
# Warmup Iteration  10: 3509721.512 ops/s
# Warmup Iteration  11: 3508946.238 ops/s
# Warmup Iteration  12: 3512050.667 ops/s
# Warmup Iteration  13: 3515427.249 ops/s
# Warmup Iteration  14: 3503110.171 ops/s
# Warmup Iteration  15: 3513234.164 ops/s
# Warmup Iteration  16: 3507339.379 ops/s
# Warmup Iteration  17: 3532986.826 ops/s
# Warmup Iteration  18: 3531084.520 ops/s
# Warmup Iteration  19: 3532958.111 ops/s
# Warmup Iteration  20: 3534149.794 ops/s
# Warmup Iteration  21: 3532336.043 ops/s
# Warmup Iteration  22: 3535005.331 ops/s
# Warmup Iteration  23: 3523559.658 ops/s
# Warmup Iteration  24: 3523334.105 ops/s
# Warmup Iteration  25: 3523731.067 ops/s
# Warmup Iteration  26: 3528432.877 ops/s
# Warmup Iteration  27: 3527178.643 ops/s
# Warmup Iteration  28: 3530646.320 ops/s
# Warmup Iteration  29: 3528650.608 ops/s
# Warmup Iteration  30: 3531696.666 ops/s
Iteration   1: 3527294.517 ops/s
Iteration   2: 3520322.801 ops/s
Iteration   3: 3519972.108 ops/s
Iteration   4: 3527995.873 ops/s
Iteration   5: 3528142.219 ops/s
Iteration   6: 3531610.478 ops/s
Iteration   7: 3535982.878 ops/s
Iteration   8: 3529268.447 ops/s
Iteration   9: 3528745.187 ops/s
Iteration  10: 3534997.014 ops/s
Iteration  11: 3536057.908 ops/s
Iteration  12: 3530279.720 ops/s
Iteration  13: 3532117.208 ops/s
Iteration  14: 3531570.668 ops/s
Iteration  15: 3536327.258 ops/s
Iteration  16: 3529772.649 ops/s
Iteration  17: 3521915.715 ops/s
Iteration  18: 3530361.852 ops/s
Iteration  19: 3540043.209 ops/s
Iteration  20: 3535922.482 ops/s
Iteration  21: 3520670.427 ops/s
Iteration  22: 3524071.738 ops/s
Iteration  23: 3536227.015 ops/s
Iteration  24: 3535598.506 ops/s
Iteration  25: 3528113.475 ops/s
Iteration  26: 3532194.479 ops/s
Iteration  27: 3515963.290 ops/s
Iteration  28: 3528648.304 ops/s
Iteration  29: 3529998.205 ops/s
Iteration  30: 3538968.918 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toStack":
  3529971.818 ±(99.9%) 4000.329 ops/s [Average]
  (min, avg, max) = (3515963.290, 3529971.818, 3540043.209), stdev = 5987.504
  CI (99.9%): [3525971.490, 3533972.147] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_toStack  thrpt   30  3529971.818 ± 4000.329  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toStringOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toStringOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 521563.853 ops/s
# Warmup Iteration   2: 1142806.086 ops/s
# Warmup Iteration   3: 1196756.721 ops/s
# Warmup Iteration   4: 1205396.030 ops/s
# Warmup Iteration   5: 1004797.092 ops/s
# Warmup Iteration   6: 1206204.765 ops/s
# Warmup Iteration   7: 1207022.222 ops/s
# Warmup Iteration   8: 1204545.576 ops/s
# Warmup Iteration   9: 1204090.379 ops/s
# Warmup Iteration  10: 1207984.702 ops/s
# Warmup Iteration  11: 1207309.551 ops/s
# Warmup Iteration  12: 1207059.990 ops/s
# Warmup Iteration  13: 1205483.371 ops/s
# Warmup Iteration  14: 1207171.244 ops/s
# Warmup Iteration  15: 1202966.574 ops/s
# Warmup Iteration  16: 1206712.005 ops/s
# Warmup Iteration  17: 1206067.753 ops/s
# Warmup Iteration  18: 1205939.599 ops/s
# Warmup Iteration  19: 1205631.588 ops/s
# Warmup Iteration  20: 1207539.343 ops/s
# Warmup Iteration  21: 1206414.948 ops/s
# Warmup Iteration  22: 1208550.698 ops/s
# Warmup Iteration  23: 1205815.571 ops/s
# Warmup Iteration  24: 1207505.220 ops/s
# Warmup Iteration  25: 1206866.352 ops/s
# Warmup Iteration  26: 1205338.272 ops/s
# Warmup Iteration  27: 1198531.299 ops/s
# Warmup Iteration  28: 1207636.348 ops/s
# Warmup Iteration  29: 1205448.885 ops/s
# Warmup Iteration  30: 1207559.390 ops/s
Iteration   1: 1206370.181 ops/s
Iteration   2: 1199086.345 ops/s
Iteration   3: 1204611.905 ops/s
Iteration   4: 1207780.975 ops/s
Iteration   5: 1206030.473 ops/s
Iteration   6: 1205698.059 ops/s
Iteration   7: 1206352.459 ops/s
Iteration   8: 1208353.129 ops/s
Iteration   9: 1207681.891 ops/s
Iteration  10: 1206809.701 ops/s
Iteration  11: 1206055.185 ops/s
Iteration  12: 1207894.096 ops/s
Iteration  13: 1204975.227 ops/s
Iteration  14: 1205855.208 ops/s
Iteration  15: 1203626.952 ops/s
Iteration  16: 1208611.891 ops/s
Iteration  17: 1205383.173 ops/s
Iteration  18: 1203984.152 ops/s
Iteration  19: 1205040.642 ops/s
Iteration  20: 1201974.020 ops/s
Iteration  21: 1194603.329 ops/s
Iteration  22: 1195260.476 ops/s
Iteration  23: 1203880.836 ops/s
Iteration  24: 1208670.636 ops/s
Iteration  25: 1206666.649 ops/s
Iteration  26: 1207824.073 ops/s
Iteration  27: 1203792.117 ops/s
Iteration  28: 1208785.453 ops/s
Iteration  29: 1204584.479 ops/s
Iteration  30: 1207616.477 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_toStringOfItemToCount":
  1205128.673 ±(99.9%) 2341.028 ops/s [Average]
  (min, avg, max) = (1194603.329, 1205128.673, 1208785.453), stdev = 3503.941
  CI (99.9%): [1202787.645, 1207469.701] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_toStringOfItemToCount  thrpt   30  1205128.673 ± 2341.028  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_topOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_topOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 96645.589 ops/s
# Warmup Iteration   2: 149091.028 ops/s
# Warmup Iteration   3: 184660.076 ops/s
# Warmup Iteration   4: 183462.325 ops/s
# Warmup Iteration   5: 184801.418 ops/s
# Warmup Iteration   6: 184781.230 ops/s
# Warmup Iteration   7: 154052.346 ops/s
# Warmup Iteration   8: 184646.432 ops/s
# Warmup Iteration   9: 184665.588 ops/s
# Warmup Iteration  10: 184421.779 ops/s
# Warmup Iteration  11: 184335.955 ops/s
# Warmup Iteration  12: 184350.154 ops/s
# Warmup Iteration  13: 184681.891 ops/s
# Warmup Iteration  14: 184605.604 ops/s
# Warmup Iteration  15: 184571.403 ops/s
# Warmup Iteration  16: 184625.512 ops/s
# Warmup Iteration  17: 186885.001 ops/s
# Warmup Iteration  18: 186761.271 ops/s
# Warmup Iteration  19: 186611.169 ops/s
# Warmup Iteration  20: 186491.113 ops/s
# Warmup Iteration  21: 186548.032 ops/s
# Warmup Iteration  22: 186507.942 ops/s
# Warmup Iteration  23: 186592.827 ops/s
# Warmup Iteration  24: 186492.895 ops/s
# Warmup Iteration  25: 186826.508 ops/s
# Warmup Iteration  26: 186951.481 ops/s
# Warmup Iteration  27: 186562.120 ops/s
# Warmup Iteration  28: 186586.617 ops/s
# Warmup Iteration  29: 186699.298 ops/s
# Warmup Iteration  30: 186484.430 ops/s
Iteration   1: 186590.090 ops/s
Iteration   2: 186737.449 ops/s
Iteration   3: 186756.711 ops/s
Iteration   4: 186490.631 ops/s
Iteration   5: 186773.362 ops/s
Iteration   6: 186208.374 ops/s
Iteration   7: 186252.816 ops/s
Iteration   8: 186527.649 ops/s
Iteration   9: 186729.998 ops/s
Iteration  10: 186382.823 ops/s
Iteration  11: 186906.965 ops/s
Iteration  12: 187114.259 ops/s
Iteration  13: 186246.666 ops/s
Iteration  14: 187047.957 ops/s
Iteration  15: 186620.319 ops/s
Iteration  16: 186988.916 ops/s
Iteration  17: 186319.109 ops/s
Iteration  18: 187028.998 ops/s
Iteration  19: 186681.996 ops/s
Iteration  20: 186977.789 ops/s
Iteration  21: 186898.726 ops/s
Iteration  22: 186670.917 ops/s
Iteration  23: 186723.133 ops/s
Iteration  24: 186494.086 ops/s
Iteration  25: 186376.414 ops/s
Iteration  26: 186513.560 ops/s
Iteration  27: 179394.705 ops/s
Iteration  28: 179214.020 ops/s
Iteration  29: 186948.868 ops/s
Iteration  30: 186793.736 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_topOccurrences":
  186180.368 ±(99.9%) 1260.352 ops/s [Average]
  (min, avg, max) = (179214.020, 186180.368, 187114.259), stdev = 1886.436
  CI (99.9%): [184920.016, 187440.720] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_topOccurrences  thrpt   30  186180.368 ± 1260.352  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 150394.732 ops/s
# Warmup Iteration   2: 292919.548 ops/s
# Warmup Iteration   3: 347607.993 ops/s
# Warmup Iteration   4: 348869.398 ops/s
# Warmup Iteration   5: 349436.686 ops/s
# Warmup Iteration   6: 291416.473 ops/s
# Warmup Iteration   7: 349447.889 ops/s
# Warmup Iteration   8: 349348.368 ops/s
# Warmup Iteration   9: 349589.130 ops/s
# Warmup Iteration  10: 349214.557 ops/s
# Warmup Iteration  11: 349889.934 ops/s
# Warmup Iteration  12: 349627.646 ops/s
# Warmup Iteration  13: 349765.594 ops/s
# Warmup Iteration  14: 349852.983 ops/s
# Warmup Iteration  15: 349606.908 ops/s
# Warmup Iteration  16: 349423.430 ops/s
# Warmup Iteration  17: 349186.504 ops/s
# Warmup Iteration  18: 349515.476 ops/s
# Warmup Iteration  19: 349720.796 ops/s
# Warmup Iteration  20: 349705.618 ops/s
# Warmup Iteration  21: 349076.810 ops/s
# Warmup Iteration  22: 349114.349 ops/s
# Warmup Iteration  23: 349338.969 ops/s
# Warmup Iteration  24: 349746.772 ops/s
# Warmup Iteration  25: 349857.124 ops/s
# Warmup Iteration  26: 349401.051 ops/s
# Warmup Iteration  27: 349154.398 ops/s
# Warmup Iteration  28: 349384.558 ops/s
# Warmup Iteration  29: 348996.435 ops/s
# Warmup Iteration  30: 349581.159 ops/s
Iteration   1: 349883.505 ops/s
Iteration   2: 349139.867 ops/s
Iteration   3: 349019.138 ops/s
Iteration   4: 348896.823 ops/s
Iteration   5: 349954.406 ops/s
Iteration   6: 349624.469 ops/s
Iteration   7: 349584.450 ops/s
Iteration   8: 349296.478 ops/s
Iteration   9: 349166.311 ops/s
Iteration  10: 350001.840 ops/s
Iteration  11: 349364.445 ops/s
Iteration  12: 348999.590 ops/s
Iteration  13: 349969.421 ops/s
Iteration  14: 346915.701 ops/s
Iteration  15: 350188.307 ops/s
Iteration  16: 349412.856 ops/s
Iteration  17: 349971.612 ops/s
Iteration  18: 349280.560 ops/s
Iteration  19: 349228.853 ops/s
Iteration  20: 348641.706 ops/s
Iteration  21: 349429.994 ops/s
Iteration  22: 350010.845 ops/s
Iteration  23: 349361.487 ops/s
Iteration  24: 350154.610 ops/s
Iteration  25: 349325.237 ops/s
Iteration  26: 349537.041 ops/s
Iteration  27: 348606.292 ops/s
Iteration  28: 348852.444 ops/s
Iteration  29: 349921.706 ops/s
Iteration  30: 349775.473 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_zip":
  349383.849 ±(99.9%) 430.633 ops/s [Average]
  (min, avg, max) = (346915.701, 349383.849, 350188.307), stdev = 644.551
  CI (99.9%): [348953.216, 349814.481] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_zip  thrpt   30  349383.849 ± 430.633  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 159996.243 ops/s
# Warmup Iteration   2: 247528.167 ops/s
# Warmup Iteration   3: 299524.617 ops/s
# Warmup Iteration   4: 300468.958 ops/s
# Warmup Iteration   5: 301176.922 ops/s
# Warmup Iteration   6: 301042.571 ops/s
# Warmup Iteration   7: 252077.890 ops/s
# Warmup Iteration   8: 301011.205 ops/s
# Warmup Iteration   9: 300538.352 ops/s
# Warmup Iteration  10: 299021.634 ops/s
# Warmup Iteration  11: 301531.234 ops/s
# Warmup Iteration  12: 300976.411 ops/s
# Warmup Iteration  13: 301080.954 ops/s
# Warmup Iteration  14: 300933.116 ops/s
# Warmup Iteration  15: 301055.643 ops/s
# Warmup Iteration  16: 301076.102 ops/s
# Warmup Iteration  17: 300989.260 ops/s
# Warmup Iteration  18: 301514.945 ops/s
# Warmup Iteration  19: 300840.409 ops/s
# Warmup Iteration  20: 300430.725 ops/s
# Warmup Iteration  21: 300777.713 ops/s
# Warmup Iteration  22: 301072.703 ops/s
# Warmup Iteration  23: 300964.105 ops/s
# Warmup Iteration  24: 300983.476 ops/s
# Warmup Iteration  25: 300967.837 ops/s
# Warmup Iteration  26: 301031.769 ops/s
# Warmup Iteration  27: 301457.281 ops/s
# Warmup Iteration  28: 301020.007 ops/s
# Warmup Iteration  29: 301034.288 ops/s
# Warmup Iteration  30: 301087.315 ops/s
Iteration   1: 300605.865 ops/s
Iteration   2: 300964.974 ops/s
Iteration   3: 301235.456 ops/s
Iteration   4: 300804.835 ops/s
Iteration   5: 300391.127 ops/s
Iteration   6: 300565.624 ops/s
Iteration   7: 300758.780 ops/s
Iteration   8: 300325.450 ops/s
Iteration   9: 300555.676 ops/s
Iteration  10: 300127.727 ops/s
Iteration  11: 301597.390 ops/s
Iteration  12: 301330.245 ops/s
Iteration  13: 301166.002 ops/s
Iteration  14: 301335.093 ops/s
Iteration  15: 301182.091 ops/s
Iteration  16: 300463.202 ops/s
Iteration  17: 300464.023 ops/s
Iteration  18: 301301.222 ops/s
Iteration  19: 300865.292 ops/s
Iteration  20: 300845.183 ops/s
Iteration  21: 299648.191 ops/s
Iteration  22: 299141.338 ops/s
Iteration  23: 299345.676 ops/s
Iteration  24: 299036.724 ops/s
Iteration  25: 297709.931 ops/s
Iteration  26: 299021.401 ops/s
Iteration  27: 299321.240 ops/s
Iteration  28: 300767.239 ops/s
Iteration  29: 301210.073 ops/s
Iteration  30: 301458.954 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplTest._Benchmark.benchmark_zipWithIndex":
  300451.534 ±(99.9%) 612.129 ops/s [Average]
  (min, avg, max) = (297709.931, 300451.534, 301597.390), stdev = 916.207
  CI (99.9%): [299839.405, 301063.664] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableSortedBagImplTest._Benchmark.benchmark_zipWithIndex  thrpt   30  300451.534 ± 612.129  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 178978.302 ops/s
# Warmup Iteration   2: 333310.357 ops/s
# Warmup Iteration   3: 413884.510 ops/s
# Warmup Iteration   4: 419825.381 ops/s
# Warmup Iteration   5: 420205.646 ops/s
# Warmup Iteration   6: 354480.464 ops/s
# Warmup Iteration   7: 421070.678 ops/s
# Warmup Iteration   8: 420424.505 ops/s
# Warmup Iteration   9: 418866.191 ops/s
# Warmup Iteration  10: 419033.699 ops/s
# Warmup Iteration  11: 419518.241 ops/s
# Warmup Iteration  12: 420163.649 ops/s
# Warmup Iteration  13: 419948.536 ops/s
# Warmup Iteration  14: 420383.594 ops/s
# Warmup Iteration  15: 420221.293 ops/s
# Warmup Iteration  16: 420058.827 ops/s
# Warmup Iteration  17: 420183.272 ops/s
# Warmup Iteration  18: 419228.130 ops/s
# Warmup Iteration  19: 420292.245 ops/s
# Warmup Iteration  20: 419240.832 ops/s
# Warmup Iteration  21: 419996.304 ops/s
# Warmup Iteration  22: 420092.319 ops/s
# Warmup Iteration  23: 420206.084 ops/s
# Warmup Iteration  24: 419764.188 ops/s
# Warmup Iteration  25: 420115.168 ops/s
# Warmup Iteration  26: 421277.982 ops/s
# Warmup Iteration  27: 420183.381 ops/s
# Warmup Iteration  28: 420013.436 ops/s
# Warmup Iteration  29: 419230.103 ops/s
# Warmup Iteration  30: 417766.970 ops/s
Iteration   1: 420206.476 ops/s
Iteration   2: 420007.011 ops/s
Iteration   3: 418802.714 ops/s
Iteration   4: 419231.762 ops/s
Iteration   5: 420677.267 ops/s
Iteration   6: 419643.441 ops/s
Iteration   7: 420230.365 ops/s
Iteration   8: 419961.229 ops/s
Iteration   9: 420472.365 ops/s
Iteration  10: 419514.090 ops/s
Iteration  11: 419669.241 ops/s
Iteration  12: 419097.524 ops/s
Iteration  13: 419106.624 ops/s
Iteration  14: 420802.425 ops/s
Iteration  15: 419562.547 ops/s
Iteration  16: 420167.435 ops/s
Iteration  17: 419933.789 ops/s
Iteration  18: 419688.207 ops/s
Iteration  19: 420231.749 ops/s
Iteration  20: 419737.800 ops/s
Iteration  21: 420347.449 ops/s
Iteration  22: 419478.719 ops/s
Iteration  23: 420520.180 ops/s
Iteration  24: 419552.785 ops/s
Iteration  25: 419262.187 ops/s
Iteration  26: 420078.253 ops/s
Iteration  27: 420323.878 ops/s
Iteration  28: 419841.038 ops/s
Iteration  29: 419017.491 ops/s
Iteration  30: 420130.874 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_add":
  419843.231 ±(99.9%) 345.699 ops/s [Average]
  (min, avg, max) = (418802.714, 419843.231, 420802.425), stdev = 517.427
  CI (99.9%): [419497.531, 420188.930] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_add  thrpt   30  419843.231 ± 345.699  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 307579.796 ops/s
# Warmup Iteration   2: 494386.943 ops/s
# Warmup Iteration   3: 654530.375 ops/s
# Warmup Iteration   4: 650172.486 ops/s
# Warmup Iteration   5: 654987.631 ops/s
# Warmup Iteration   6: 654632.985 ops/s
# Warmup Iteration   7: 549773.326 ops/s
# Warmup Iteration   8: 654608.575 ops/s
# Warmup Iteration   9: 654300.549 ops/s
# Warmup Iteration  10: 654351.368 ops/s
# Warmup Iteration  11: 654293.231 ops/s
# Warmup Iteration  12: 653332.882 ops/s
# Warmup Iteration  13: 653429.518 ops/s
# Warmup Iteration  14: 654940.721 ops/s
# Warmup Iteration  15: 653285.477 ops/s
# Warmup Iteration  16: 654246.460 ops/s
# Warmup Iteration  17: 654130.495 ops/s
# Warmup Iteration  18: 654917.388 ops/s
# Warmup Iteration  19: 653685.010 ops/s
# Warmup Iteration  20: 653997.933 ops/s
# Warmup Iteration  21: 654884.094 ops/s
# Warmup Iteration  22: 653899.800 ops/s
# Warmup Iteration  23: 654195.737 ops/s
# Warmup Iteration  24: 654845.008 ops/s
# Warmup Iteration  25: 655154.852 ops/s
# Warmup Iteration  26: 654502.559 ops/s
# Warmup Iteration  27: 655291.442 ops/s
# Warmup Iteration  28: 654845.702 ops/s
# Warmup Iteration  29: 654930.826 ops/s
# Warmup Iteration  30: 654323.221 ops/s
Iteration   1: 653840.015 ops/s
Iteration   2: 641076.069 ops/s
Iteration   3: 641508.778 ops/s
Iteration   4: 640514.343 ops/s
Iteration   5: 652741.202 ops/s
Iteration   6: 654974.858 ops/s
Iteration   7: 655288.778 ops/s
Iteration   8: 654735.125 ops/s
Iteration   9: 655637.731 ops/s
Iteration  10: 654680.539 ops/s
Iteration  11: 654776.561 ops/s
Iteration  12: 654484.863 ops/s
Iteration  13: 655038.445 ops/s
Iteration  14: 653830.039 ops/s
Iteration  15: 655663.516 ops/s
Iteration  16: 653884.589 ops/s
Iteration  17: 655316.806 ops/s
Iteration  18: 654098.905 ops/s
Iteration  19: 656022.143 ops/s
Iteration  20: 654182.877 ops/s
Iteration  21: 654628.543 ops/s
Iteration  22: 654216.963 ops/s
Iteration  23: 656011.563 ops/s
Iteration  24: 655167.238 ops/s
Iteration  25: 656295.941 ops/s
Iteration  26: 654278.422 ops/s
Iteration  27: 654638.689 ops/s
Iteration  28: 656520.684 ops/s
Iteration  29: 654756.167 ops/s
Iteration  30: 655695.467 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_addAll":
  653483.529 ±(99.9%) 2874.537 ops/s [Average]
  (min, avg, max) = (640514.343, 653483.529, 656520.684), stdev = 4302.472
  CI (99.9%): [650608.992, 656358.066] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_addAll  thrpt   30  653483.529 ± 2874.537  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 238424.361 ops/s
# Warmup Iteration   2: 428982.751 ops/s
# Warmup Iteration   3: 552581.974 ops/s
# Warmup Iteration   4: 556400.677 ops/s
# Warmup Iteration   5: 557199.032 ops/s
# Warmup Iteration   6: 468633.254 ops/s
# Warmup Iteration   7: 557615.098 ops/s
# Warmup Iteration   8: 557288.602 ops/s
# Warmup Iteration   9: 557556.363 ops/s
# Warmup Iteration  10: 558502.332 ops/s
# Warmup Iteration  11: 557380.920 ops/s
# Warmup Iteration  12: 550619.823 ops/s
# Warmup Iteration  13: 552329.699 ops/s
# Warmup Iteration  14: 554810.887 ops/s
# Warmup Iteration  15: 557546.327 ops/s
# Warmup Iteration  16: 556832.999 ops/s
# Warmup Iteration  17: 556733.388 ops/s
# Warmup Iteration  18: 555974.325 ops/s
# Warmup Iteration  19: 556588.860 ops/s
# Warmup Iteration  20: 556115.440 ops/s
# Warmup Iteration  21: 557249.294 ops/s
# Warmup Iteration  22: 557258.153 ops/s
# Warmup Iteration  23: 555755.051 ops/s
# Warmup Iteration  24: 556477.604 ops/s
# Warmup Iteration  25: 554982.377 ops/s
# Warmup Iteration  26: 556875.297 ops/s
# Warmup Iteration  27: 556757.152 ops/s
# Warmup Iteration  28: 557066.720 ops/s
# Warmup Iteration  29: 557088.730 ops/s
# Warmup Iteration  30: 557296.813 ops/s
Iteration   1: 556761.610 ops/s
Iteration   2: 556278.673 ops/s
Iteration   3: 554741.226 ops/s
Iteration   4: 554945.697 ops/s
Iteration   5: 556568.050 ops/s
Iteration   6: 555719.576 ops/s
Iteration   7: 556809.962 ops/s
Iteration   8: 555783.052 ops/s
Iteration   9: 556513.345 ops/s
Iteration  10: 556597.547 ops/s
Iteration  11: 556673.434 ops/s
Iteration  12: 555078.664 ops/s
Iteration  13: 556782.949 ops/s
Iteration  14: 555266.673 ops/s
Iteration  15: 557991.561 ops/s
Iteration  16: 556781.578 ops/s
Iteration  17: 557579.485 ops/s
Iteration  18: 556646.204 ops/s
Iteration  19: 556951.193 ops/s
Iteration  20: 557469.542 ops/s
Iteration  21: 556599.524 ops/s
Iteration  22: 557588.096 ops/s
Iteration  23: 554399.364 ops/s
Iteration  24: 552727.693 ops/s
Iteration  25: 557489.933 ops/s
Iteration  26: 556637.314 ops/s
Iteration  27: 558008.643 ops/s
Iteration  28: 556834.300 ops/s
Iteration  29: 554984.950 ops/s
Iteration  30: 558230.187 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_addAllIterable":
  556381.334 ±(99.9%) 815.778 ops/s [Average]
  (min, avg, max) = (552727.693, 556381.334, 558230.187), stdev = 1221.018
  CI (99.9%): [555565.556, 557197.112] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_addAllIterable  thrpt   30  556381.334 ± 815.778  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_addOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_addOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 93133.754 ops/s
# Warmup Iteration   2: 149655.579 ops/s
# Warmup Iteration   3: 202179.595 ops/s
# Warmup Iteration   4: 201035.960 ops/s
# Warmup Iteration   5: 201417.390 ops/s
# Warmup Iteration   6: 202006.525 ops/s
# Warmup Iteration   7: 174597.892 ops/s
# Warmup Iteration   8: 198115.880 ops/s
# Warmup Iteration   9: 202129.792 ops/s
# Warmup Iteration  10: 201916.281 ops/s
# Warmup Iteration  11: 201868.853 ops/s
# Warmup Iteration  12: 201546.386 ops/s
# Warmup Iteration  13: 201838.684 ops/s
# Warmup Iteration  14: 201828.693 ops/s
# Warmup Iteration  15: 202004.431 ops/s
# Warmup Iteration  16: 201781.635 ops/s
# Warmup Iteration  17: 201395.500 ops/s
# Warmup Iteration  18: 201314.444 ops/s
# Warmup Iteration  19: 201287.680 ops/s
# Warmup Iteration  20: 201415.323 ops/s
# Warmup Iteration  21: 201725.214 ops/s
# Warmup Iteration  22: 201632.368 ops/s
# Warmup Iteration  23: 201644.165 ops/s
# Warmup Iteration  24: 201550.386 ops/s
# Warmup Iteration  25: 201899.143 ops/s
# Warmup Iteration  26: 201595.763 ops/s
# Warmup Iteration  27: 201721.955 ops/s
# Warmup Iteration  28: 201463.460 ops/s
# Warmup Iteration  29: 201722.388 ops/s
# Warmup Iteration  30: 201578.274 ops/s
Iteration   1: 201728.342 ops/s
Iteration   2: 201243.223 ops/s
Iteration   3: 201900.749 ops/s
Iteration   4: 201501.633 ops/s
Iteration   5: 200620.905 ops/s
Iteration   6: 199571.043 ops/s
Iteration   7: 201855.841 ops/s
Iteration   8: 201646.505 ops/s
Iteration   9: 201454.982 ops/s
Iteration  10: 201766.731 ops/s
Iteration  11: 201533.459 ops/s
Iteration  12: 201691.137 ops/s
Iteration  13: 201487.528 ops/s
Iteration  14: 201718.411 ops/s
Iteration  15: 201188.785 ops/s
Iteration  16: 201630.827 ops/s
Iteration  17: 201534.465 ops/s
Iteration  18: 201588.041 ops/s
Iteration  19: 201595.245 ops/s
Iteration  20: 201380.848 ops/s
Iteration  21: 201899.737 ops/s
Iteration  22: 201337.565 ops/s
Iteration  23: 201949.320 ops/s
Iteration  24: 201491.001 ops/s
Iteration  25: 202014.523 ops/s
Iteration  26: 201843.487 ops/s
Iteration  27: 201740.681 ops/s
Iteration  28: 201974.092 ops/s
Iteration  29: 201863.161 ops/s
Iteration  30: 202026.890 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_addOccurrences":
  201559.305 ±(99.9%) 318.315 ops/s [Average]
  (min, avg, max) = (199571.043, 201559.305, 202026.890), stdev = 476.440
  CI (99.9%): [201240.990, 201877.621] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_addOccurrences  thrpt   30  201559.305 ± 318.315  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_addOccurrences_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_addOccurrences_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 693515.758 ops/s
# Warmup Iteration   2: 733345.746 ops/s
# Warmup Iteration   3: 925218.489 ops/s
# Warmup Iteration   4: 949467.986 ops/s
# Warmup Iteration   5: 950419.134 ops/s
# Warmup Iteration   6: 945197.357 ops/s
# Warmup Iteration   7: 950163.291 ops/s
# Warmup Iteration   8: 951835.924 ops/s
# Warmup Iteration   9: 952019.348 ops/s
# Warmup Iteration  10: 951780.343 ops/s
# Warmup Iteration  11: 950317.145 ops/s
# Warmup Iteration  12: 920349.823 ops/s
# Warmup Iteration  13: 832990.165 ops/s
# Warmup Iteration  14: 951008.290 ops/s
# Warmup Iteration  15: 949799.341 ops/s
# Warmup Iteration  16: 951498.517 ops/s
# Warmup Iteration  17: 1009095.543 ops/s
# Warmup Iteration  18: 1009118.348 ops/s
# Warmup Iteration  19: 1007205.042 ops/s
# Warmup Iteration  20: 1008208.019 ops/s
# Warmup Iteration  21: 1007893.989 ops/s
# Warmup Iteration  22: 1009218.891 ops/s
# Warmup Iteration  23: 1011072.408 ops/s
# Warmup Iteration  24: 1004835.767 ops/s
# Warmup Iteration  25: 1006462.035 ops/s
# Warmup Iteration  26: 1005827.290 ops/s
# Warmup Iteration  27: 1008218.472 ops/s
# Warmup Iteration  28: 1007494.800 ops/s
# Warmup Iteration  29: 1007482.324 ops/s
# Warmup Iteration  30: 1007412.554 ops/s
Iteration   1: 1006480.013 ops/s
Iteration   2: 1007186.763 ops/s
Iteration   3: 1007423.053 ops/s
Iteration   4: 1005830.319 ops/s
Iteration   5: 1008331.488 ops/s
Iteration   6: 1009701.413 ops/s
Iteration   7: 1005030.648 ops/s
Iteration   8: 1007679.689 ops/s
Iteration   9: 1007417.640 ops/s
Iteration  10: 1007614.543 ops/s
Iteration  11: 1006981.696 ops/s
Iteration  12: 1010287.745 ops/s
Iteration  13: 1008671.162 ops/s
Iteration  14: 1009499.932 ops/s
Iteration  15: 1006375.507 ops/s
Iteration  16: 1009941.175 ops/s
Iteration  17: 1007809.843 ops/s
Iteration  18: 1008549.769 ops/s
Iteration  19: 1005769.482 ops/s
Iteration  20: 1007412.494 ops/s
Iteration  21: 1007540.180 ops/s
Iteration  22: 1006917.400 ops/s
Iteration  23: 1007495.887 ops/s
Iteration  24: 1007227.055 ops/s
Iteration  25: 1005119.848 ops/s
Iteration  26: 1005768.647 ops/s
Iteration  27: 1006909.780 ops/s
Iteration  28: 1007734.397 ops/s
Iteration  29: 1010099.847 ops/s
Iteration  30: 1009831.265 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_addOccurrences_throws":
  1007621.289 ±(99.9%) 974.444 ops/s [Average]
  (min, avg, max) = (1005030.648, 1007621.289, 1010287.745), stdev = 1458.502
  CI (99.9%): [1006646.845, 1008595.734] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_addOccurrences_throws  thrpt   30  1007621.289 ± 974.444  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 490516.511 ops/s
# Warmup Iteration   2: 906790.052 ops/s
# Warmup Iteration   3: 975825.567 ops/s
# Warmup Iteration   4: 974856.916 ops/s
# Warmup Iteration   5: 855756.946 ops/s
# Warmup Iteration   6: 948263.695 ops/s
# Warmup Iteration   7: 977976.125 ops/s
# Warmup Iteration   8: 973309.991 ops/s
# Warmup Iteration   9: 986164.198 ops/s
# Warmup Iteration  10: 969051.402 ops/s
# Warmup Iteration  11: 979188.549 ops/s
# Warmup Iteration  12: 982569.171 ops/s
# Warmup Iteration  13: 981783.576 ops/s
# Warmup Iteration  14: 981140.586 ops/s
# Warmup Iteration  15: 980631.188 ops/s
# Warmup Iteration  16: 982705.747 ops/s
# Warmup Iteration  17: 974385.936 ops/s
# Warmup Iteration  18: 969992.228 ops/s
# Warmup Iteration  19: 975361.623 ops/s
# Warmup Iteration  20: 975501.581 ops/s
# Warmup Iteration  21: 970498.978 ops/s
# Warmup Iteration  22: 977243.379 ops/s
# Warmup Iteration  23: 977747.918 ops/s
# Warmup Iteration  24: 970261.851 ops/s
# Warmup Iteration  25: 983430.553 ops/s
# Warmup Iteration  26: 969079.571 ops/s
# Warmup Iteration  27: 973690.060 ops/s
# Warmup Iteration  28: 981595.570 ops/s
# Warmup Iteration  29: 978375.494 ops/s
# Warmup Iteration  30: 980333.719 ops/s
Iteration   1: 969431.755 ops/s
Iteration   2: 982207.179 ops/s
Iteration   3: 970261.673 ops/s
Iteration   4: 970579.314 ops/s
Iteration   5: 969569.921 ops/s
Iteration   6: 971576.990 ops/s
Iteration   7: 969559.657 ops/s
Iteration   8: 973255.011 ops/s
Iteration   9: 974275.706 ops/s
Iteration  10: 978808.809 ops/s
Iteration  11: 972288.908 ops/s
Iteration  12: 979684.382 ops/s
Iteration  13: 979851.264 ops/s
Iteration  14: 975471.236 ops/s
Iteration  15: 969886.953 ops/s
Iteration  16: 971922.230 ops/s
Iteration  17: 980846.995 ops/s
Iteration  18: 981040.908 ops/s
Iteration  19: 975432.167 ops/s
Iteration  20: 986572.320 ops/s
Iteration  21: 981326.018 ops/s
Iteration  22: 980432.454 ops/s
Iteration  23: 985186.704 ops/s
Iteration  24: 976999.210 ops/s
Iteration  25: 984027.594 ops/s
Iteration  26: 979826.653 ops/s
Iteration  27: 980218.973 ops/s
Iteration  28: 981310.079 ops/s
Iteration  29: 986645.359 ops/s
Iteration  30: 985253.090 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_aggregateByMutating":
  977458.317 ±(99.9%) 3754.607 ops/s [Average]
  (min, avg, max) = (969431.755, 977458.317, 986645.359), stdev = 5619.720
  CI (99.9%): [973703.710, 981212.924] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  977458.317 ± 3754.607  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 459727.861 ops/s
# Warmup Iteration   2: 804248.202 ops/s
# Warmup Iteration   3: 899846.223 ops/s
# Warmup Iteration   4: 903016.928 ops/s
# Warmup Iteration   5: 905946.344 ops/s
# Warmup Iteration   6: 760458.242 ops/s
# Warmup Iteration   7: 906115.073 ops/s
# Warmup Iteration   8: 906670.701 ops/s
# Warmup Iteration   9: 907521.788 ops/s
# Warmup Iteration  10: 905763.389 ops/s
# Warmup Iteration  11: 908730.060 ops/s
# Warmup Iteration  12: 907479.129 ops/s
# Warmup Iteration  13: 908595.948 ops/s
# Warmup Iteration  14: 906974.833 ops/s
# Warmup Iteration  15: 904540.972 ops/s
# Warmup Iteration  16: 905797.276 ops/s
# Warmup Iteration  17: 906978.356 ops/s
# Warmup Iteration  18: 908179.507 ops/s
# Warmup Iteration  19: 908656.535 ops/s
# Warmup Iteration  20: 907853.756 ops/s
# Warmup Iteration  21: 909113.912 ops/s
# Warmup Iteration  22: 907300.910 ops/s
# Warmup Iteration  23: 906833.543 ops/s
# Warmup Iteration  24: 908542.789 ops/s
# Warmup Iteration  25: 907616.772 ops/s
# Warmup Iteration  26: 906810.831 ops/s
# Warmup Iteration  27: 907742.358 ops/s
# Warmup Iteration  28: 908466.565 ops/s
# Warmup Iteration  29: 910274.797 ops/s
# Warmup Iteration  30: 909699.967 ops/s
Iteration   1: 909730.428 ops/s
Iteration   2: 909091.691 ops/s
Iteration   3: 908748.531 ops/s
Iteration   4: 906509.897 ops/s
Iteration   5: 910323.141 ops/s
Iteration   6: 907295.674 ops/s
Iteration   7: 910114.769 ops/s
Iteration   8: 908139.954 ops/s
Iteration   9: 910494.251 ops/s
Iteration  10: 908664.548 ops/s
Iteration  11: 907763.078 ops/s
Iteration  12: 914064.702 ops/s
Iteration  13: 907756.629 ops/s
Iteration  14: 909336.752 ops/s
Iteration  15: 910030.484 ops/s
Iteration  16: 908746.181 ops/s
Iteration  17: 908474.123 ops/s
Iteration  18: 906945.568 ops/s
Iteration  19: 909991.275 ops/s
Iteration  20: 908224.057 ops/s
Iteration  21: 907583.556 ops/s
Iteration  22: 905638.124 ops/s
Iteration  23: 909546.188 ops/s
Iteration  24: 909438.292 ops/s
Iteration  25: 908115.073 ops/s
Iteration  26: 910668.027 ops/s
Iteration  27: 907584.951 ops/s
Iteration  28: 908682.773 ops/s
Iteration  29: 907254.646 ops/s
Iteration  30: 907358.435 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_aggregateByNonMutating":
  908743.860 ±(99.9%) 1074.996 ops/s [Average]
  (min, avg, max) = (905638.124, 908743.860, 914064.702), stdev = 1609.003
  CI (99.9%): [907668.864, 909818.856] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  908743.860 ± 1074.996  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 528444.667 ops/s
# Warmup Iteration   2: 734651.744 ops/s
# Warmup Iteration   3: 910076.569 ops/s
# Warmup Iteration   4: 917010.850 ops/s
# Warmup Iteration   5: 917638.831 ops/s
# Warmup Iteration   6: 914104.987 ops/s
# Warmup Iteration   7: 916709.833 ops/s
# Warmup Iteration   8: 768369.050 ops/s
# Warmup Iteration   9: 915813.075 ops/s
# Warmup Iteration  10: 915747.213 ops/s
# Warmup Iteration  11: 915924.059 ops/s
# Warmup Iteration  12: 916013.606 ops/s
# Warmup Iteration  13: 917137.084 ops/s
# Warmup Iteration  14: 916452.805 ops/s
# Warmup Iteration  15: 916938.241 ops/s
# Warmup Iteration  16: 916930.303 ops/s
# Warmup Iteration  17: 915939.841 ops/s
# Warmup Iteration  18: 917076.774 ops/s
# Warmup Iteration  19: 916450.953 ops/s
# Warmup Iteration  20: 916616.474 ops/s
# Warmup Iteration  21: 916328.192 ops/s
# Warmup Iteration  22: 917336.739 ops/s
# Warmup Iteration  23: 916297.707 ops/s
# Warmup Iteration  24: 916873.349 ops/s
# Warmup Iteration  25: 917234.743 ops/s
# Warmup Iteration  26: 917362.678 ops/s
# Warmup Iteration  27: 916032.895 ops/s
# Warmup Iteration  28: 916571.824 ops/s
# Warmup Iteration  29: 916180.855 ops/s
# Warmup Iteration  30: 917501.768 ops/s
Iteration   1: 915043.986 ops/s
Iteration   2: 917697.576 ops/s
Iteration   3: 916559.201 ops/s
Iteration   4: 916934.994 ops/s
Iteration   5: 917799.679 ops/s
Iteration   6: 914819.574 ops/s
Iteration   7: 917009.869 ops/s
Iteration   8: 915157.973 ops/s
Iteration   9: 917674.106 ops/s
Iteration  10: 916767.840 ops/s
Iteration  11: 915961.401 ops/s
Iteration  12: 917591.454 ops/s
Iteration  13: 917218.030 ops/s
Iteration  14: 915009.402 ops/s
Iteration  15: 917913.878 ops/s
Iteration  16: 916245.608 ops/s
Iteration  17: 918324.122 ops/s
Iteration  18: 917540.666 ops/s
Iteration  19: 916871.468 ops/s
Iteration  20: 917545.633 ops/s
Iteration  21: 918826.562 ops/s
Iteration  22: 915791.081 ops/s
Iteration  23: 917572.175 ops/s
Iteration  24: 916263.673 ops/s
Iteration  25: 917401.784 ops/s
Iteration  26: 917236.484 ops/s
Iteration  27: 916457.318 ops/s
Iteration  28: 917293.935 ops/s
Iteration  29: 915094.979 ops/s
Iteration  30: 917671.028 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_allSatisfy":
  916843.183 ±(99.9%) 708.546 ops/s [Average]
  (min, avg, max) = (914819.574, 916843.183, 918826.562), stdev = 1060.518
  CI (99.9%): [916134.637, 917551.729] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_allSatisfy  thrpt   30  916843.183 ± 708.546  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 526787.451 ops/s
# Warmup Iteration   2: 701339.300 ops/s
# Warmup Iteration   3: 890964.388 ops/s
# Warmup Iteration   4: 887074.735 ops/s
# Warmup Iteration   5: 891255.954 ops/s
# Warmup Iteration   6: 891438.734 ops/s
# Warmup Iteration   7: 889743.771 ops/s
# Warmup Iteration   8: 859846.939 ops/s
# Warmup Iteration   9: 774521.061 ops/s
# Warmup Iteration  10: 892317.543 ops/s
# Warmup Iteration  11: 893138.634 ops/s
# Warmup Iteration  12: 892477.643 ops/s
# Warmup Iteration  13: 892412.803 ops/s
# Warmup Iteration  14: 892542.217 ops/s
# Warmup Iteration  15: 892723.062 ops/s
# Warmup Iteration  16: 892038.553 ops/s
# Warmup Iteration  17: 891122.882 ops/s
# Warmup Iteration  18: 892487.702 ops/s
# Warmup Iteration  19: 892817.957 ops/s
# Warmup Iteration  20: 892574.784 ops/s
# Warmup Iteration  21: 893173.237 ops/s
# Warmup Iteration  22: 893190.090 ops/s
# Warmup Iteration  23: 892168.137 ops/s
# Warmup Iteration  24: 891783.403 ops/s
# Warmup Iteration  25: 892785.378 ops/s
# Warmup Iteration  26: 890582.697 ops/s
# Warmup Iteration  27: 890373.796 ops/s
# Warmup Iteration  28: 890121.628 ops/s
# Warmup Iteration  29: 892837.920 ops/s
# Warmup Iteration  30: 892530.669 ops/s
Iteration   1: 892825.553 ops/s
Iteration   2: 890616.310 ops/s
Iteration   3: 892849.779 ops/s
Iteration   4: 892349.168 ops/s
Iteration   5: 891169.286 ops/s
Iteration   6: 892600.997 ops/s
Iteration   7: 893139.260 ops/s
Iteration   8: 891692.389 ops/s
Iteration   9: 892895.484 ops/s
Iteration  10: 890426.772 ops/s
Iteration  11: 893439.169 ops/s
Iteration  12: 896762.777 ops/s
Iteration  13: 890793.262 ops/s
Iteration  14: 892488.237 ops/s
Iteration  15: 893123.109 ops/s
Iteration  16: 890465.408 ops/s
Iteration  17: 893414.077 ops/s
Iteration  18: 892241.765 ops/s
Iteration  19: 891076.617 ops/s
Iteration  20: 893104.197 ops/s
Iteration  21: 893234.855 ops/s
Iteration  22: 890975.343 ops/s
Iteration  23: 892915.689 ops/s
Iteration  24: 891625.872 ops/s
Iteration  25: 893107.263 ops/s
Iteration  26: 893496.179 ops/s
Iteration  27: 892162.644 ops/s
Iteration  28: 893532.497 ops/s
Iteration  29: 893884.937 ops/s
Iteration  30: 892106.219 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_allSatisfyWith":
  892483.837 ±(99.9%) 871.035 ops/s [Average]
  (min, avg, max) = (890426.772, 892483.837, 896762.777), stdev = 1303.724
  CI (99.9%): [891612.802, 893354.872] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  892483.837 ± 871.035  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_allSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_allSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 532125.543 ops/s
# Warmup Iteration   2: 720748.153 ops/s
# Warmup Iteration   3: 904960.506 ops/s
# Warmup Iteration   4: 900343.429 ops/s
# Warmup Iteration   5: 904656.016 ops/s
# Warmup Iteration   6: 904886.379 ops/s
# Warmup Iteration   7: 903661.495 ops/s
# Warmup Iteration   8: 810049.094 ops/s
# Warmup Iteration   9: 856137.465 ops/s
# Warmup Iteration  10: 904946.987 ops/s
# Warmup Iteration  11: 904978.403 ops/s
# Warmup Iteration  12: 906117.619 ops/s
# Warmup Iteration  13: 904720.177 ops/s
# Warmup Iteration  14: 905251.304 ops/s
# Warmup Iteration  15: 904872.563 ops/s
# Warmup Iteration  16: 906000.924 ops/s
# Warmup Iteration  17: 905327.606 ops/s
# Warmup Iteration  18: 905408.638 ops/s
# Warmup Iteration  19: 905813.094 ops/s
# Warmup Iteration  20: 904966.484 ops/s
# Warmup Iteration  21: 904900.880 ops/s
# Warmup Iteration  22: 904403.631 ops/s
# Warmup Iteration  23: 905845.613 ops/s
# Warmup Iteration  24: 905545.788 ops/s
# Warmup Iteration  25: 905282.553 ops/s
# Warmup Iteration  26: 905197.832 ops/s
# Warmup Iteration  27: 901377.631 ops/s
# Warmup Iteration  28: 902145.520 ops/s
# Warmup Iteration  29: 900752.180 ops/s
# Warmup Iteration  30: 901622.978 ops/s
Iteration   1: 903244.820 ops/s
Iteration   2: 905133.228 ops/s
Iteration   3: 904307.686 ops/s
Iteration   4: 906287.406 ops/s
Iteration   5: 905800.913 ops/s
Iteration   6: 904021.038 ops/s
Iteration   7: 906314.778 ops/s
Iteration   8: 904992.948 ops/s
Iteration   9: 905774.281 ops/s
Iteration  10: 906439.023 ops/s
Iteration  11: 906775.274 ops/s
Iteration  12: 904130.716 ops/s
Iteration  13: 906157.563 ops/s
Iteration  14: 904611.438 ops/s
Iteration  15: 905922.671 ops/s
Iteration  16: 906198.878 ops/s
Iteration  17: 905357.230 ops/s
Iteration  18: 905580.234 ops/s
Iteration  19: 904409.242 ops/s
Iteration  20: 902971.991 ops/s
Iteration  21: 905711.585 ops/s
Iteration  22: 905744.403 ops/s
Iteration  23: 905902.015 ops/s
Iteration  24: 906646.522 ops/s
Iteration  25: 905264.672 ops/s
Iteration  26: 904266.500 ops/s
Iteration  27: 905426.092 ops/s
Iteration  28: 905754.457 ops/s
Iteration  29: 906293.012 ops/s
Iteration  30: 904795.794 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_allSatisfyWithOccurrences":
  905341.214 ±(99.9%) 656.629 ops/s [Average]
  (min, avg, max) = (902971.991, 905341.214, 906775.274), stdev = 982.811
  CI (99.9%): [904684.585, 905997.843] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_allSatisfyWithOccurrences  thrpt   30  905341.214 ± 656.629  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 524471.277 ops/s
# Warmup Iteration   2: 726578.187 ops/s
# Warmup Iteration   3: 903979.767 ops/s
# Warmup Iteration   4: 899753.536 ops/s
# Warmup Iteration   5: 904896.139 ops/s
# Warmup Iteration   6: 903409.635 ops/s
# Warmup Iteration   7: 904893.263 ops/s
# Warmup Iteration   8: 761991.536 ops/s
# Warmup Iteration   9: 905114.965 ops/s
# Warmup Iteration  10: 904083.622 ops/s
# Warmup Iteration  11: 907033.492 ops/s
# Warmup Iteration  12: 906468.644 ops/s
# Warmup Iteration  13: 907028.211 ops/s
# Warmup Iteration  14: 905277.508 ops/s
# Warmup Iteration  15: 906887.566 ops/s
# Warmup Iteration  16: 906980.148 ops/s
# Warmup Iteration  17: 904264.956 ops/s
# Warmup Iteration  18: 897292.043 ops/s
# Warmup Iteration  19: 899180.897 ops/s
# Warmup Iteration  20: 904363.137 ops/s
# Warmup Iteration  21: 904876.789 ops/s
# Warmup Iteration  22: 903764.959 ops/s
# Warmup Iteration  23: 903415.074 ops/s
# Warmup Iteration  24: 904059.968 ops/s
# Warmup Iteration  25: 904551.222 ops/s
# Warmup Iteration  26: 904321.416 ops/s
# Warmup Iteration  27: 903790.277 ops/s
# Warmup Iteration  28: 904448.207 ops/s
# Warmup Iteration  29: 904885.198 ops/s
# Warmup Iteration  30: 903674.999 ops/s
Iteration   1: 903233.296 ops/s
Iteration   2: 902645.741 ops/s
Iteration   3: 904850.067 ops/s
Iteration   4: 903784.887 ops/s
Iteration   5: 904708.578 ops/s
Iteration   6: 904422.286 ops/s
Iteration   7: 903169.517 ops/s
Iteration   8: 904465.051 ops/s
Iteration   9: 903672.585 ops/s
Iteration  10: 903378.700 ops/s
Iteration  11: 904493.181 ops/s
Iteration  12: 903239.339 ops/s
Iteration  13: 904424.225 ops/s
Iteration  14: 904249.323 ops/s
Iteration  15: 902852.690 ops/s
Iteration  16: 904641.759 ops/s
Iteration  17: 903530.126 ops/s
Iteration  18: 904524.725 ops/s
Iteration  19: 903893.319 ops/s
Iteration  20: 901793.894 ops/s
Iteration  21: 904142.634 ops/s
Iteration  22: 903897.255 ops/s
Iteration  23: 901840.920 ops/s
Iteration  24: 904257.467 ops/s
Iteration  25: 902525.896 ops/s
Iteration  26: 904302.762 ops/s
Iteration  27: 904077.902 ops/s
Iteration  28: 903086.000 ops/s
Iteration  29: 902228.402 ops/s
Iteration  30: 900478.727 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_anySatisfy":
  903560.375 ±(99.9%) 691.231 ops/s [Average]
  (min, avg, max) = (900478.727, 903560.375, 904850.067), stdev = 1034.602
  CI (99.9%): [902869.144, 904251.606] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_anySatisfy  thrpt   30  903560.375 ± 691.231  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 528439.890 ops/s
# Warmup Iteration   2: 691852.558 ops/s
# Warmup Iteration   3: 883373.889 ops/s
# Warmup Iteration   4: 875582.574 ops/s
# Warmup Iteration   5: 881623.542 ops/s
# Warmup Iteration   6: 881444.572 ops/s
# Warmup Iteration   7: 881857.156 ops/s
# Warmup Iteration   8: 873972.056 ops/s
# Warmup Iteration   9: 757394.215 ops/s
# Warmup Iteration  10: 885631.518 ops/s
# Warmup Iteration  11: 887993.502 ops/s
# Warmup Iteration  12: 886950.879 ops/s
# Warmup Iteration  13: 886740.140 ops/s
# Warmup Iteration  14: 887599.109 ops/s
# Warmup Iteration  15: 887034.257 ops/s
# Warmup Iteration  16: 886380.476 ops/s
# Warmup Iteration  17: 885834.699 ops/s
# Warmup Iteration  18: 886742.267 ops/s
# Warmup Iteration  19: 885024.019 ops/s
# Warmup Iteration  20: 885178.990 ops/s
# Warmup Iteration  21: 885385.402 ops/s
# Warmup Iteration  22: 885507.850 ops/s
# Warmup Iteration  23: 884085.801 ops/s
# Warmup Iteration  24: 885353.061 ops/s
# Warmup Iteration  25: 886802.756 ops/s
# Warmup Iteration  26: 874333.624 ops/s
# Warmup Iteration  27: 875465.005 ops/s
# Warmup Iteration  28: 873212.106 ops/s
# Warmup Iteration  29: 879862.322 ops/s
# Warmup Iteration  30: 885051.502 ops/s
Iteration   1: 886523.961 ops/s
Iteration   2: 884746.775 ops/s
Iteration   3: 886378.714 ops/s
Iteration   4: 886214.468 ops/s
Iteration   5: 885340.651 ops/s
Iteration   6: 884998.294 ops/s
Iteration   7: 885700.067 ops/s
Iteration   8: 883946.825 ops/s
Iteration   9: 885833.846 ops/s
Iteration  10: 885881.228 ops/s
Iteration  11: 885855.315 ops/s
Iteration  12: 885852.051 ops/s
Iteration  13: 886939.788 ops/s
Iteration  14: 882630.508 ops/s
Iteration  15: 886031.454 ops/s
Iteration  16: 886583.212 ops/s
Iteration  17: 881865.083 ops/s
Iteration  18: 886444.397 ops/s
Iteration  19: 885331.832 ops/s
Iteration  20: 886093.403 ops/s
Iteration  21: 885866.106 ops/s
Iteration  22: 884266.780 ops/s
Iteration  23: 886415.740 ops/s
Iteration  24: 886479.927 ops/s
Iteration  25: 884454.219 ops/s
Iteration  26: 883572.720 ops/s
Iteration  27: 886083.184 ops/s
Iteration  28: 885019.856 ops/s
Iteration  29: 886056.511 ops/s
Iteration  30: 886523.243 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_anySatisfyWith":
  885464.339 ±(99.9%) 809.127 ops/s [Average]
  (min, avg, max) = (881865.083, 885464.339, 886939.788), stdev = 1211.064
  CI (99.9%): [884655.211, 886273.466] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  885464.339 ± 809.127  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_anySatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_anySatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 572948.733 ops/s
# Warmup Iteration   2: 803183.058 ops/s
# Warmup Iteration   3: 992158.727 ops/s
# Warmup Iteration   4: 987081.526 ops/s
# Warmup Iteration   5: 993131.857 ops/s
# Warmup Iteration   6: 991819.200 ops/s
# Warmup Iteration   7: 992505.774 ops/s
# Warmup Iteration   8: 833424.423 ops/s
# Warmup Iteration   9: 994274.152 ops/s
# Warmup Iteration  10: 993222.064 ops/s
# Warmup Iteration  11: 992666.772 ops/s
# Warmup Iteration  12: 993790.342 ops/s
# Warmup Iteration  13: 993413.665 ops/s
# Warmup Iteration  14: 994377.917 ops/s
# Warmup Iteration  15: 992751.644 ops/s
# Warmup Iteration  16: 992722.679 ops/s
# Warmup Iteration  17: 993660.805 ops/s
# Warmup Iteration  18: 993629.858 ops/s
# Warmup Iteration  19: 995348.939 ops/s
# Warmup Iteration  20: 993028.841 ops/s
# Warmup Iteration  21: 992844.897 ops/s
# Warmup Iteration  22: 993122.974 ops/s
# Warmup Iteration  23: 994121.950 ops/s
# Warmup Iteration  24: 993678.042 ops/s
# Warmup Iteration  25: 991201.051 ops/s
# Warmup Iteration  26: 992838.258 ops/s
# Warmup Iteration  27: 993453.620 ops/s
# Warmup Iteration  28: 993304.475 ops/s
# Warmup Iteration  29: 991895.594 ops/s
# Warmup Iteration  30: 992091.017 ops/s
Iteration   1: 994915.556 ops/s
Iteration   2: 992701.251 ops/s
Iteration   3: 993949.197 ops/s
Iteration   4: 993974.488 ops/s
Iteration   5: 993050.931 ops/s
Iteration   6: 995035.101 ops/s
Iteration   7: 992360.779 ops/s
Iteration   8: 994717.587 ops/s
Iteration   9: 994450.725 ops/s
Iteration  10: 993287.107 ops/s
Iteration  11: 994958.189 ops/s
Iteration  12: 992493.188 ops/s
Iteration  13: 995268.894 ops/s
Iteration  14: 994739.828 ops/s
Iteration  15: 994190.064 ops/s
Iteration  16: 995753.720 ops/s
Iteration  17: 995585.216 ops/s
Iteration  18: 995330.500 ops/s
Iteration  19: 993753.364 ops/s
Iteration  20: 993558.371 ops/s
Iteration  21: 995157.786 ops/s
Iteration  22: 994630.622 ops/s
Iteration  23: 994079.230 ops/s
Iteration  24: 994242.603 ops/s
Iteration  25: 993253.614 ops/s
Iteration  26: 993912.216 ops/s
Iteration  27: 994328.902 ops/s
Iteration  28: 993424.457 ops/s
Iteration  29: 995222.332 ops/s
Iteration  30: 994343.342 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_anySatisfyWithOccurrences":
  994222.305 ±(99.9%) 612.176 ops/s [Average]
  (min, avg, max) = (992360.779, 994222.305, 995753.720), stdev = 916.277
  CI (99.9%): [993610.129, 994834.482] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_anySatisfyWithOccurrences  thrpt   30  994222.305 ± 612.176  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 362310.690 ops/s
# Warmup Iteration   2: 744976.492 ops/s
# Warmup Iteration   3: 795735.422 ops/s
# Warmup Iteration   4: 800551.749 ops/s
# Warmup Iteration   5: 670723.672 ops/s
# Warmup Iteration   6: 798511.649 ops/s
# Warmup Iteration   7: 798683.874 ops/s
# Warmup Iteration   8: 798732.101 ops/s
# Warmup Iteration   9: 799557.870 ops/s
# Warmup Iteration  10: 799042.896 ops/s
# Warmup Iteration  11: 797252.379 ops/s
# Warmup Iteration  12: 800013.736 ops/s
# Warmup Iteration  13: 800107.434 ops/s
# Warmup Iteration  14: 800027.015 ops/s
# Warmup Iteration  15: 793632.267 ops/s
# Warmup Iteration  16: 800046.065 ops/s
# Warmup Iteration  17: 797328.645 ops/s
# Warmup Iteration  18: 796737.193 ops/s
# Warmup Iteration  19: 790078.350 ops/s
# Warmup Iteration  20: 795458.307 ops/s
# Warmup Iteration  21: 800586.391 ops/s
# Warmup Iteration  22: 801020.671 ops/s
# Warmup Iteration  23: 801062.815 ops/s
# Warmup Iteration  24: 799583.720 ops/s
# Warmup Iteration  25: 800397.868 ops/s
# Warmup Iteration  26: 800063.631 ops/s
# Warmup Iteration  27: 798955.527 ops/s
# Warmup Iteration  28: 799566.665 ops/s
# Warmup Iteration  29: 801414.855 ops/s
# Warmup Iteration  30: 800925.610 ops/s
Iteration   1: 802728.376 ops/s
Iteration   2: 800688.106 ops/s
Iteration   3: 801738.592 ops/s
Iteration   4: 799893.890 ops/s
Iteration   5: 802137.231 ops/s
Iteration   6: 799674.308 ops/s
Iteration   7: 802580.453 ops/s
Iteration   8: 799639.918 ops/s
Iteration   9: 801599.503 ops/s
Iteration  10: 800528.435 ops/s
Iteration  11: 801050.405 ops/s
Iteration  12: 802263.635 ops/s
Iteration  13: 799621.308 ops/s
Iteration  14: 799773.389 ops/s
Iteration  15: 801348.279 ops/s
Iteration  16: 800644.116 ops/s
Iteration  17: 799812.898 ops/s
Iteration  18: 798747.609 ops/s
Iteration  19: 799217.437 ops/s
Iteration  20: 802122.538 ops/s
Iteration  21: 800570.843 ops/s
Iteration  22: 798622.673 ops/s
Iteration  23: 799162.481 ops/s
Iteration  24: 802530.678 ops/s
Iteration  25: 797311.259 ops/s
Iteration  26: 800567.364 ops/s
Iteration  27: 801034.265 ops/s
Iteration  28: 799208.825 ops/s
Iteration  29: 799304.921 ops/s
Iteration  30: 800474.777 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_appendString":
  800486.617 ±(99.9%) 901.569 ops/s [Average]
  (min, avg, max) = (797311.259, 800486.617, 802728.376), stdev = 1349.426
  CI (99.9%): [799585.048, 801388.186] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_appendString  thrpt   30  800486.617 ± 901.569  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_appendStringThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_appendStringThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 79447.125 ops/s
# Warmup Iteration   2: 88589.927 ops/s
# Warmup Iteration   3: 113763.840 ops/s
# Warmup Iteration   4: 117478.908 ops/s
# Warmup Iteration   5: 117441.871 ops/s
# Warmup Iteration   6: 116841.257 ops/s
# Warmup Iteration   7: 117206.836 ops/s
# Warmup Iteration   8: 117211.335 ops/s
# Warmup Iteration   9: 117326.342 ops/s
# Warmup Iteration  10: 117091.668 ops/s
# Warmup Iteration  11: 117482.661 ops/s
# Warmup Iteration  12: 98571.893 ops/s
# Warmup Iteration  13: 117306.495 ops/s
# Warmup Iteration  14: 117598.859 ops/s
# Warmup Iteration  15: 117695.370 ops/s
# Warmup Iteration  16: 117637.747 ops/s
# Warmup Iteration  17: 127110.354 ops/s
# Warmup Iteration  18: 126812.255 ops/s
# Warmup Iteration  19: 127262.283 ops/s
# Warmup Iteration  20: 126487.012 ops/s
# Warmup Iteration  21: 126628.863 ops/s
# Warmup Iteration  22: 126544.254 ops/s
# Warmup Iteration  23: 126553.626 ops/s
# Warmup Iteration  24: 127096.176 ops/s
# Warmup Iteration  25: 127328.379 ops/s
# Warmup Iteration  26: 127258.183 ops/s
# Warmup Iteration  27: 127021.190 ops/s
# Warmup Iteration  28: 127259.912 ops/s
# Warmup Iteration  29: 127485.977 ops/s
# Warmup Iteration  30: 127160.670 ops/s
Iteration   1: 126943.187 ops/s
Iteration   2: 126996.654 ops/s
Iteration   3: 127437.147 ops/s
Iteration   4: 127228.982 ops/s
Iteration   5: 127117.599 ops/s
Iteration   6: 127103.812 ops/s
Iteration   7: 127297.990 ops/s
Iteration   8: 127173.923 ops/s
Iteration   9: 127070.898 ops/s
Iteration  10: 126880.453 ops/s
Iteration  11: 127401.993 ops/s
Iteration  12: 127252.561 ops/s
Iteration  13: 127267.577 ops/s
Iteration  14: 127022.215 ops/s
Iteration  15: 127444.393 ops/s
Iteration  16: 127232.892 ops/s
Iteration  17: 127183.902 ops/s
Iteration  18: 127263.311 ops/s
Iteration  19: 126855.522 ops/s
Iteration  20: 127109.090 ops/s
Iteration  21: 126997.969 ops/s
Iteration  22: 126995.051 ops/s
Iteration  23: 126969.245 ops/s
Iteration  24: 127355.574 ops/s
Iteration  25: 127251.687 ops/s
Iteration  26: 127105.778 ops/s
Iteration  27: 127159.390 ops/s
Iteration  28: 126969.570 ops/s
Iteration  29: 127098.997 ops/s
Iteration  30: 127007.876 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_appendStringThrows":
  127139.841 ±(99.9%) 107.181 ops/s [Average]
  (min, avg, max) = (126855.522, 127139.841, 127444.393), stdev = 160.424
  CI (99.9%): [127032.660, 127247.022] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_appendStringThrows  thrpt   30  127139.841 ± 107.181  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_appendStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_appendStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 371327.236 ops/s
# Warmup Iteration   2: 744431.856 ops/s
# Warmup Iteration   3: 798387.384 ops/s
# Warmup Iteration   4: 801381.374 ops/s
# Warmup Iteration   5: 672792.262 ops/s
# Warmup Iteration   6: 797283.250 ops/s
# Warmup Iteration   7: 797203.567 ops/s
# Warmup Iteration   8: 800213.112 ops/s
# Warmup Iteration   9: 799318.073 ops/s
# Warmup Iteration  10: 786982.399 ops/s
# Warmup Iteration  11: 796605.003 ops/s
# Warmup Iteration  12: 801126.620 ops/s
# Warmup Iteration  13: 800747.958 ops/s
# Warmup Iteration  14: 799288.745 ops/s
# Warmup Iteration  15: 799435.220 ops/s
# Warmup Iteration  16: 799518.257 ops/s
# Warmup Iteration  17: 799426.123 ops/s
# Warmup Iteration  18: 799841.960 ops/s
# Warmup Iteration  19: 799355.561 ops/s
# Warmup Iteration  20: 800405.175 ops/s
# Warmup Iteration  21: 800286.892 ops/s
# Warmup Iteration  22: 800256.314 ops/s
# Warmup Iteration  23: 800215.199 ops/s
# Warmup Iteration  24: 799161.021 ops/s
# Warmup Iteration  25: 800122.356 ops/s
# Warmup Iteration  26: 797111.037 ops/s
# Warmup Iteration  27: 791646.178 ops/s
# Warmup Iteration  28: 793016.963 ops/s
# Warmup Iteration  29: 798876.186 ops/s
# Warmup Iteration  30: 799737.150 ops/s
Iteration   1: 798505.018 ops/s
Iteration   2: 799017.371 ops/s
Iteration   3: 800993.327 ops/s
Iteration   4: 799520.832 ops/s
Iteration   5: 800628.870 ops/s
Iteration   6: 800404.455 ops/s
Iteration   7: 800582.804 ops/s
Iteration   8: 800999.366 ops/s
Iteration   9: 800211.860 ops/s
Iteration  10: 800996.787 ops/s
Iteration  11: 800332.801 ops/s
Iteration  12: 800947.676 ops/s
Iteration  13: 801915.697 ops/s
Iteration  14: 801325.235 ops/s
Iteration  15: 799769.525 ops/s
Iteration  16: 801035.439 ops/s
Iteration  17: 801592.208 ops/s
Iteration  18: 801905.232 ops/s
Iteration  19: 791271.372 ops/s
Iteration  20: 766732.492 ops/s
Iteration  21: 792476.738 ops/s
Iteration  22: 800614.531 ops/s
Iteration  23: 801052.002 ops/s
Iteration  24: 800313.235 ops/s
Iteration  25: 800513.912 ops/s
Iteration  26: 799769.290 ops/s
Iteration  27: 801487.423 ops/s
Iteration  28: 801136.071 ops/s
Iteration  29: 799402.978 ops/s
Iteration  30: 799719.635 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_appendStringWithSeparator":
  798839.139 ±(99.9%) 4344.069 ops/s [Average]
  (min, avg, max) = (766732.492, 798839.139, 801915.697), stdev = 6501.998
  CI (99.9%): [794495.070, 803183.208] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_appendStringWithSeparator  thrpt   30  798839.139 ± 4344.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 394682.059 ops/s
# Warmup Iteration   2: 760728.551 ops/s
# Warmup Iteration   3: 830364.754 ops/s
# Warmup Iteration   4: 827533.364 ops/s
# Warmup Iteration   5: 698690.771 ops/s
# Warmup Iteration   6: 831414.258 ops/s
# Warmup Iteration   7: 829973.363 ops/s
# Warmup Iteration   8: 830642.311 ops/s
# Warmup Iteration   9: 831284.168 ops/s
# Warmup Iteration  10: 830015.713 ops/s
# Warmup Iteration  11: 831021.637 ops/s
# Warmup Iteration  12: 831097.978 ops/s
# Warmup Iteration  13: 830250.722 ops/s
# Warmup Iteration  14: 830777.375 ops/s
# Warmup Iteration  15: 832270.744 ops/s
# Warmup Iteration  16: 830859.639 ops/s
# Warmup Iteration  17: 831807.672 ops/s
# Warmup Iteration  18: 830560.656 ops/s
# Warmup Iteration  19: 828655.710 ops/s
# Warmup Iteration  20: 829161.583 ops/s
# Warmup Iteration  21: 831635.486 ops/s
# Warmup Iteration  22: 831625.146 ops/s
# Warmup Iteration  23: 830858.739 ops/s
# Warmup Iteration  24: 830448.461 ops/s
# Warmup Iteration  25: 830933.797 ops/s
# Warmup Iteration  26: 832933.049 ops/s
# Warmup Iteration  27: 831077.414 ops/s
# Warmup Iteration  28: 831049.704 ops/s
# Warmup Iteration  29: 831688.174 ops/s
# Warmup Iteration  30: 830808.833 ops/s
Iteration   1: 832464.216 ops/s
Iteration   2: 832073.096 ops/s
Iteration   3: 830734.371 ops/s
Iteration   4: 830729.033 ops/s
Iteration   5: 827895.626 ops/s
Iteration   6: 831213.832 ops/s
Iteration   7: 829264.338 ops/s
Iteration   8: 832100.767 ops/s
Iteration   9: 831381.840 ops/s
Iteration  10: 831190.086 ops/s
Iteration  11: 831419.831 ops/s
Iteration  12: 829842.210 ops/s
Iteration  13: 831142.624 ops/s
Iteration  14: 832751.548 ops/s
Iteration  15: 829311.001 ops/s
Iteration  16: 832551.599 ops/s
Iteration  17: 831870.468 ops/s
Iteration  18: 831596.462 ops/s
Iteration  19: 831240.391 ops/s
Iteration  20: 828990.390 ops/s
Iteration  21: 833377.227 ops/s
Iteration  22: 831448.295 ops/s
Iteration  23: 832014.410 ops/s
Iteration  24: 832468.014 ops/s
Iteration  25: 830532.342 ops/s
Iteration  26: 831041.161 ops/s
Iteration  27: 832620.375 ops/s
Iteration  28: 830856.590 ops/s
Iteration  29: 829843.550 ops/s
Iteration  30: 832358.428 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd":
  831210.804 ±(99.9%) 844.701 ops/s [Average]
  (min, avg, max) = (827895.626, 831210.804, 833377.227), stdev = 1264.309
  CI (99.9%): [830366.103, 832055.505] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd  thrpt   30  831210.804 ± 844.701  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_appendString_with_collection_containing_self$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_appendString_with_collection_containing_self

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1652584.419 ops/s
# Warmup Iteration   2: 1944832.705 ops/s
# Warmup Iteration   3: 2580547.467 ops/s
# Warmup Iteration   4: 2583371.948 ops/s
# Warmup Iteration   5: 2568445.340 ops/s
# Warmup Iteration   6: 2582020.518 ops/s
# Warmup Iteration   7: 2581897.502 ops/s
# Warmup Iteration   8: 2580570.738 ops/s
# Warmup Iteration   9: 2382699.597 ops/s
# Warmup Iteration  10: 2360641.662 ops/s
# Warmup Iteration  11: 2581258.856 ops/s
# Warmup Iteration  12: 2583852.946 ops/s
# Warmup Iteration  13: 2580225.062 ops/s
# Warmup Iteration  14: 2581056.478 ops/s
# Warmup Iteration  15: 2583218.293 ops/s
# Warmup Iteration  16: 2580430.042 ops/s
# Warmup Iteration  17: 2556941.454 ops/s
# Warmup Iteration  18: 2555184.535 ops/s
# Warmup Iteration  19: 2537654.247 ops/s
# Warmup Iteration  20: 2556468.783 ops/s
# Warmup Iteration  21: 2549408.228 ops/s
# Warmup Iteration  22: 2554651.780 ops/s
# Warmup Iteration  23: 2556902.744 ops/s
# Warmup Iteration  24: 2557271.499 ops/s
# Warmup Iteration  25: 2559608.138 ops/s
# Warmup Iteration  26: 2553296.310 ops/s
# Warmup Iteration  27: 2548553.418 ops/s
# Warmup Iteration  28: 2558489.765 ops/s
# Warmup Iteration  29: 2555744.669 ops/s
# Warmup Iteration  30: 2557241.969 ops/s
Iteration   1: 2557592.465 ops/s
Iteration   2: 2561033.014 ops/s
Iteration   3: 2548600.150 ops/s
Iteration   4: 2555630.186 ops/s
Iteration   5: 2551848.063 ops/s
Iteration   6: 2544863.488 ops/s
Iteration   7: 2552965.925 ops/s
Iteration   8: 2556235.730 ops/s
Iteration   9: 2557339.416 ops/s
Iteration  10: 2552748.326 ops/s
Iteration  11: 2556251.497 ops/s
Iteration  12: 2558655.478 ops/s
Iteration  13: 2555937.032 ops/s
Iteration  14: 2555618.869 ops/s
Iteration  15: 2558608.371 ops/s
Iteration  16: 2555033.754 ops/s
Iteration  17: 2558543.825 ops/s
Iteration  18: 2543180.736 ops/s
Iteration  19: 2551435.868 ops/s
Iteration  20: 2557490.690 ops/s
Iteration  21: 2557487.211 ops/s
Iteration  22: 2550788.514 ops/s
Iteration  23: 2553085.198 ops/s
Iteration  24: 2557006.864 ops/s
Iteration  25: 2556687.149 ops/s
Iteration  26: 2551751.372 ops/s
Iteration  27: 2556613.840 ops/s
Iteration  28: 2557418.503 ops/s
Iteration  29: 2555569.505 ops/s
Iteration  30: 2558175.951 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_appendString_with_collection_containing_self":
  2554806.566 ±(99.9%) 2708.195 ops/s [Average]
  (min, avg, max) = (2543180.736, 2554806.566, 2561033.014), stdev = 4053.499
  CI (99.9%): [2552098.371, 2557514.762] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_appendString_with_collection_containing_self  thrpt   30  2554806.566 ± 2708.195  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5039276.167 ops/s
# Warmup Iteration   2: 8470456.390 ops/s
# Warmup Iteration   3: 9384188.819 ops/s
# Warmup Iteration   4: 9423542.314 ops/s
# Warmup Iteration   5: 9427419.468 ops/s
# Warmup Iteration   6: 7927291.253 ops/s
# Warmup Iteration   7: 9433776.835 ops/s
# Warmup Iteration   8: 9430361.073 ops/s
# Warmup Iteration   9: 9438577.954 ops/s
# Warmup Iteration  10: 9426907.685 ops/s
# Warmup Iteration  11: 9427571.429 ops/s
# Warmup Iteration  12: 9422465.144 ops/s
# Warmup Iteration  13: 9438213.241 ops/s
# Warmup Iteration  14: 9440023.794 ops/s
# Warmup Iteration  15: 9439184.147 ops/s
# Warmup Iteration  16: 9421409.035 ops/s
# Warmup Iteration  17: 9437987.069 ops/s
# Warmup Iteration  18: 9429642.764 ops/s
# Warmup Iteration  19: 9433464.784 ops/s
# Warmup Iteration  20: 9438448.573 ops/s
# Warmup Iteration  21: 9425433.981 ops/s
# Warmup Iteration  22: 9432586.910 ops/s
# Warmup Iteration  23: 9433459.021 ops/s
# Warmup Iteration  24: 9427704.165 ops/s
# Warmup Iteration  25: 9416842.411 ops/s
# Warmup Iteration  26: 9436437.962 ops/s
# Warmup Iteration  27: 9435585.383 ops/s
# Warmup Iteration  28: 9424162.531 ops/s
# Warmup Iteration  29: 9432465.055 ops/s
# Warmup Iteration  30: 9421806.169 ops/s
Iteration   1: 9453723.650 ops/s
Iteration   2: 9421180.020 ops/s
Iteration   3: 9441143.907 ops/s
Iteration   4: 9422465.108 ops/s
Iteration   5: 9437897.353 ops/s
Iteration   6: 9432518.689 ops/s
Iteration   7: 9444673.232 ops/s
Iteration   8: 9433381.078 ops/s
Iteration   9: 9429916.612 ops/s
Iteration  10: 9456281.715 ops/s
Iteration  11: 9432463.631 ops/s
Iteration  12: 9446454.798 ops/s
Iteration  13: 9422031.538 ops/s
Iteration  14: 9448960.744 ops/s
Iteration  15: 9434891.633 ops/s
Iteration  16: 9445700.271 ops/s
Iteration  17: 9427034.338 ops/s
Iteration  18: 9424422.024 ops/s
Iteration  19: 9458179.227 ops/s
Iteration  20: 9426700.321 ops/s
Iteration  21: 9450988.497 ops/s
Iteration  22: 9437757.703 ops/s
Iteration  23: 9445975.873 ops/s
Iteration  24: 9421365.987 ops/s
Iteration  25: 9441888.482 ops/s
Iteration  26: 9429748.195 ops/s
Iteration  27: 9437486.848 ops/s
Iteration  28: 9439215.796 ops/s
Iteration  29: 9424276.963 ops/s
Iteration  30: 9442493.461 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_asLazy":
  9437040.590 ±(99.9%) 7273.956 ops/s [Average]
  (min, avg, max) = (9421180.020, 9437040.590, 9458179.227), stdev = 10887.316
  CI (99.9%): [9429766.634, 9444314.546] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_asLazy  thrpt   30  9437040.590 ± 7273.956  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5294657.828 ops/s
# Warmup Iteration   2: 9041688.644 ops/s
# Warmup Iteration   3: 9651239.212 ops/s
# Warmup Iteration   4: 9680475.922 ops/s
# Warmup Iteration   5: 9708208.429 ops/s
# Warmup Iteration   6: 8188810.028 ops/s
# Warmup Iteration   7: 9702819.334 ops/s
# Warmup Iteration   8: 9707851.910 ops/s
# Warmup Iteration   9: 9698075.028 ops/s
# Warmup Iteration  10: 9697125.825 ops/s
# Warmup Iteration  11: 9684170.158 ops/s
# Warmup Iteration  12: 9705786.712 ops/s
# Warmup Iteration  13: 9715004.613 ops/s
# Warmup Iteration  14: 9700030.402 ops/s
# Warmup Iteration  15: 9708639.052 ops/s
# Warmup Iteration  16: 9695793.754 ops/s
# Warmup Iteration  17: 9710745.350 ops/s
# Warmup Iteration  18: 9703425.306 ops/s
# Warmup Iteration  19: 9703771.732 ops/s
# Warmup Iteration  20: 9696269.018 ops/s
# Warmup Iteration  21: 9704840.528 ops/s
# Warmup Iteration  22: 9708662.483 ops/s
# Warmup Iteration  23: 9696963.513 ops/s
# Warmup Iteration  24: 9705416.058 ops/s
# Warmup Iteration  25: 9712904.312 ops/s
# Warmup Iteration  26: 9708532.065 ops/s
# Warmup Iteration  27: 9711545.499 ops/s
# Warmup Iteration  28: 9712491.591 ops/s
# Warmup Iteration  29: 9718740.625 ops/s
# Warmup Iteration  30: 9696295.403 ops/s
Iteration   1: 9695499.141 ops/s
Iteration   2: 9710123.873 ops/s
Iteration   3: 9711713.274 ops/s
Iteration   4: 9696545.839 ops/s
Iteration   5: 9671256.850 ops/s
Iteration   6: 9697190.476 ops/s
Iteration   7: 9697354.998 ops/s
Iteration   8: 9723589.492 ops/s
Iteration   9: 9702565.255 ops/s
Iteration  10: 9732250.385 ops/s
Iteration  11: 9690099.656 ops/s
Iteration  12: 9722575.740 ops/s
Iteration  13: 9708652.537 ops/s
Iteration  14: 9695521.810 ops/s
Iteration  15: 9716898.998 ops/s
Iteration  16: 9706427.456 ops/s
Iteration  17: 9718724.547 ops/s
Iteration  18: 9709948.914 ops/s
Iteration  19: 9707743.601 ops/s
Iteration  20: 9703632.288 ops/s
Iteration  21: 9697282.690 ops/s
Iteration  22: 9721020.585 ops/s
Iteration  23: 9697852.434 ops/s
Iteration  24: 9713146.534 ops/s
Iteration  25: 9703675.834 ops/s
Iteration  26: 9706005.783 ops/s
Iteration  27: 9703488.401 ops/s
Iteration  28: 9686729.249 ops/s
Iteration  29: 9706089.896 ops/s
Iteration  30: 9689358.196 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_asSynchronized":
  9704765.491 ±(99.9%) 8416.267 ops/s [Average]
  (min, avg, max) = (9671256.850, 9704765.491, 9732250.385), stdev = 12597.074
  CI (99.9%): [9696349.224, 9713181.758] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_asSynchronized  thrpt   30  9704765.491 ± 8416.267  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 972461.280 ops/s
# Warmup Iteration   2: 1756614.700 ops/s
# Warmup Iteration   3: 2089480.409 ops/s
# Warmup Iteration   4: 2097167.737 ops/s
# Warmup Iteration   5: 2083408.820 ops/s
# Warmup Iteration   6: 1773056.915 ops/s
# Warmup Iteration   7: 2098604.645 ops/s
# Warmup Iteration   8: 2098562.952 ops/s
# Warmup Iteration   9: 2097996.877 ops/s
# Warmup Iteration  10: 2100646.002 ops/s
# Warmup Iteration  11: 2101550.074 ops/s
# Warmup Iteration  12: 2099974.581 ops/s
# Warmup Iteration  13: 2096799.891 ops/s
# Warmup Iteration  14: 2097247.558 ops/s
# Warmup Iteration  15: 2102329.571 ops/s
# Warmup Iteration  16: 2099668.791 ops/s
# Warmup Iteration  17: 2097951.468 ops/s
# Warmup Iteration  18: 2100189.557 ops/s
# Warmup Iteration  19: 2100447.555 ops/s
# Warmup Iteration  20: 2102336.530 ops/s
# Warmup Iteration  21: 2101581.173 ops/s
# Warmup Iteration  22: 2098854.615 ops/s
# Warmup Iteration  23: 2101680.283 ops/s
# Warmup Iteration  24: 2100769.293 ops/s
# Warmup Iteration  25: 2098560.760 ops/s
# Warmup Iteration  26: 2072760.255 ops/s
# Warmup Iteration  27: 2073397.649 ops/s
# Warmup Iteration  28: 2102359.916 ops/s
# Warmup Iteration  29: 2102382.796 ops/s
# Warmup Iteration  30: 2102396.450 ops/s
Iteration   1: 2101000.086 ops/s
Iteration   2: 2098642.633 ops/s
Iteration   3: 2102014.064 ops/s
Iteration   4: 2095177.244 ops/s
Iteration   5: 2104453.599 ops/s
Iteration   6: 2097597.397 ops/s
Iteration   7: 2098542.945 ops/s
Iteration   8: 2102621.639 ops/s
Iteration   9: 2096037.749 ops/s
Iteration  10: 2096198.369 ops/s
Iteration  11: 2096732.281 ops/s
Iteration  12: 2099623.247 ops/s
Iteration  13: 2102965.922 ops/s
Iteration  14: 2098247.932 ops/s
Iteration  15: 2103543.704 ops/s
Iteration  16: 2099635.704 ops/s
Iteration  17: 2097361.029 ops/s
Iteration  18: 2093946.629 ops/s
Iteration  19: 2099284.477 ops/s
Iteration  20: 2102874.929 ops/s
Iteration  21: 2100425.943 ops/s
Iteration  22: 2097202.907 ops/s
Iteration  23: 2102733.349 ops/s
Iteration  24: 2095955.127 ops/s
Iteration  25: 2090046.230 ops/s
Iteration  26: 2102921.867 ops/s
Iteration  27: 2099432.788 ops/s
Iteration  28: 2103023.746 ops/s
Iteration  29: 2099226.426 ops/s
Iteration  30: 2100067.880 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_asUnmodifiable":
  2099251.262 ±(99.9%) 2203.258 ops/s [Average]
  (min, avg, max) = (2090046.230, 2099251.262, 2104453.599), stdev = 3297.733
  CI (99.9%): [2097048.004, 2101454.519] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  2099251.262 ± 2203.258  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_bottomOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_bottomOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 80230.132 ops/s
# Warmup Iteration   2: 126792.325 ops/s
# Warmup Iteration   3: 153035.084 ops/s
# Warmup Iteration   4: 153832.324 ops/s
# Warmup Iteration   5: 154012.310 ops/s
# Warmup Iteration   6: 154113.597 ops/s
# Warmup Iteration   7: 128859.919 ops/s
# Warmup Iteration   8: 154183.402 ops/s
# Warmup Iteration   9: 154141.502 ops/s
# Warmup Iteration  10: 154020.506 ops/s
# Warmup Iteration  11: 154075.245 ops/s
# Warmup Iteration  12: 154164.232 ops/s
# Warmup Iteration  13: 154174.108 ops/s
# Warmup Iteration  14: 154095.433 ops/s
# Warmup Iteration  15: 154080.196 ops/s
# Warmup Iteration  16: 153968.526 ops/s
# Warmup Iteration  17: 155292.429 ops/s
# Warmup Iteration  18: 155555.195 ops/s
# Warmup Iteration  19: 155315.719 ops/s
# Warmup Iteration  20: 155154.965 ops/s
# Warmup Iteration  21: 155188.691 ops/s
# Warmup Iteration  22: 155164.471 ops/s
# Warmup Iteration  23: 155205.888 ops/s
# Warmup Iteration  24: 155193.181 ops/s
# Warmup Iteration  25: 155383.632 ops/s
# Warmup Iteration  26: 155379.138 ops/s
# Warmup Iteration  27: 155494.062 ops/s
# Warmup Iteration  28: 155434.641 ops/s
# Warmup Iteration  29: 155498.667 ops/s
# Warmup Iteration  30: 155246.817 ops/s
Iteration   1: 155435.956 ops/s
Iteration   2: 155278.027 ops/s
Iteration   3: 155039.757 ops/s
Iteration   4: 155370.749 ops/s
Iteration   5: 155516.342 ops/s
Iteration   6: 155388.531 ops/s
Iteration   7: 155535.596 ops/s
Iteration   8: 155114.735 ops/s
Iteration   9: 155508.743 ops/s
Iteration  10: 155241.053 ops/s
Iteration  11: 155455.228 ops/s
Iteration  12: 155145.665 ops/s
Iteration  13: 155513.979 ops/s
Iteration  14: 155080.372 ops/s
Iteration  15: 155430.471 ops/s
Iteration  16: 154970.141 ops/s
Iteration  17: 155444.057 ops/s
Iteration  18: 155472.574 ops/s
Iteration  19: 155536.244 ops/s
Iteration  20: 155159.892 ops/s
Iteration  21: 155394.736 ops/s
Iteration  22: 155444.837 ops/s
Iteration  23: 155081.615 ops/s
Iteration  24: 155491.656 ops/s
Iteration  25: 155120.149 ops/s
Iteration  26: 155567.979 ops/s
Iteration  27: 155099.826 ops/s
Iteration  28: 155425.285 ops/s
Iteration  29: 155384.073 ops/s
Iteration  30: 155510.326 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_bottomOccurrences":
  155338.620 ±(99.9%) 121.421 ops/s [Average]
  (min, avg, max) = (154970.141, 155338.620, 155567.979), stdev = 181.737
  CI (99.9%): [155217.199, 155460.041] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_bottomOccurrences  thrpt   30  155338.620 ± 121.421  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 186628.308 ops/s
# Warmup Iteration   2: 364079.691 ops/s
# Warmup Iteration   3: 401832.523 ops/s
# Warmup Iteration   4: 403737.603 ops/s
# Warmup Iteration   5: 348566.469 ops/s
# Warmup Iteration   6: 393769.494 ops/s
# Warmup Iteration   7: 403933.529 ops/s
# Warmup Iteration   8: 404006.562 ops/s
# Warmup Iteration   9: 403600.279 ops/s
# Warmup Iteration  10: 403739.750 ops/s
# Warmup Iteration  11: 403797.088 ops/s
# Warmup Iteration  12: 403928.088 ops/s
# Warmup Iteration  13: 402851.114 ops/s
# Warmup Iteration  14: 404453.838 ops/s
# Warmup Iteration  15: 403174.282 ops/s
# Warmup Iteration  16: 403610.673 ops/s
# Warmup Iteration  17: 403570.226 ops/s
# Warmup Iteration  18: 404161.157 ops/s
# Warmup Iteration  19: 403749.524 ops/s
# Warmup Iteration  20: 403641.642 ops/s
# Warmup Iteration  21: 404141.710 ops/s
# Warmup Iteration  22: 402852.804 ops/s
# Warmup Iteration  23: 404037.576 ops/s
# Warmup Iteration  24: 403680.604 ops/s
# Warmup Iteration  25: 403285.688 ops/s
# Warmup Iteration  26: 403458.030 ops/s
# Warmup Iteration  27: 403247.535 ops/s
# Warmup Iteration  28: 403774.265 ops/s
# Warmup Iteration  29: 404113.735 ops/s
# Warmup Iteration  30: 403725.995 ops/s
Iteration   1: 403503.720 ops/s
Iteration   2: 403725.030 ops/s
Iteration   3: 404131.270 ops/s
Iteration   4: 403491.170 ops/s
Iteration   5: 404003.364 ops/s
Iteration   6: 404413.273 ops/s
Iteration   7: 403379.701 ops/s
Iteration   8: 403694.425 ops/s
Iteration   9: 403884.627 ops/s
Iteration  10: 402422.566 ops/s
Iteration  11: 404024.267 ops/s
Iteration  12: 403448.531 ops/s
Iteration  13: 403007.709 ops/s
Iteration  14: 404732.553 ops/s
Iteration  15: 403909.787 ops/s
Iteration  16: 403574.625 ops/s
Iteration  17: 404180.634 ops/s
Iteration  18: 403894.900 ops/s
Iteration  19: 404038.906 ops/s
Iteration  20: 404415.012 ops/s
Iteration  21: 403917.811 ops/s
Iteration  22: 404414.260 ops/s
Iteration  23: 403492.645 ops/s
Iteration  24: 403380.963 ops/s
Iteration  25: 405076.233 ops/s
Iteration  26: 403350.254 ops/s
Iteration  27: 404341.254 ops/s
Iteration  28: 403206.884 ops/s
Iteration  29: 403192.246 ops/s
Iteration  30: 404143.865 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_chunk":
  403813.083 ±(99.9%) 367.012 ops/s [Average]
  (min, avg, max) = (402422.566, 403813.083, 405076.233), stdev = 549.327
  CI (99.9%): [403446.071, 404180.095] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_chunk  thrpt   30  403813.083 ± 367.012  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_chunk_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_chunk_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3282609.617 ops/s
# Warmup Iteration   2: 5671246.561 ops/s
# Warmup Iteration   3: 6107140.288 ops/s
# Warmup Iteration   4: 6128534.613 ops/s
# Warmup Iteration   5: 6145342.144 ops/s
# Warmup Iteration   6: 5181737.560 ops/s
# Warmup Iteration   7: 6144385.194 ops/s
# Warmup Iteration   8: 6143934.030 ops/s
# Warmup Iteration   9: 6143753.743 ops/s
# Warmup Iteration  10: 6138186.518 ops/s
# Warmup Iteration  11: 6142019.501 ops/s
# Warmup Iteration  12: 6137822.308 ops/s
# Warmup Iteration  13: 6139475.766 ops/s
# Warmup Iteration  14: 6140075.456 ops/s
# Warmup Iteration  15: 6144203.259 ops/s
# Warmup Iteration  16: 6142969.487 ops/s
# Warmup Iteration  17: 6103149.285 ops/s
# Warmup Iteration  18: 6141083.244 ops/s
# Warmup Iteration  19: 6140842.845 ops/s
# Warmup Iteration  20: 6140075.291 ops/s
# Warmup Iteration  21: 6140389.682 ops/s
# Warmup Iteration  22: 6126365.353 ops/s
# Warmup Iteration  23: 6130884.728 ops/s
# Warmup Iteration  24: 6136937.611 ops/s
# Warmup Iteration  25: 6143632.942 ops/s
# Warmup Iteration  26: 6122652.643 ops/s
# Warmup Iteration  27: 6137002.901 ops/s
# Warmup Iteration  28: 6142941.444 ops/s
# Warmup Iteration  29: 6141770.730 ops/s
# Warmup Iteration  30: 6141555.475 ops/s
Iteration   1: 6145652.825 ops/s
Iteration   2: 6148020.020 ops/s
Iteration   3: 6133589.702 ops/s
Iteration   4: 6139936.907 ops/s
Iteration   5: 6147221.093 ops/s
Iteration   6: 6144340.772 ops/s
Iteration   7: 6143748.079 ops/s
Iteration   8: 6137444.913 ops/s
Iteration   9: 6149105.492 ops/s
Iteration  10: 6133186.002 ops/s
Iteration  11: 6148494.301 ops/s
Iteration  12: 6125351.872 ops/s
Iteration  13: 6149740.456 ops/s
Iteration  14: 6135012.031 ops/s
Iteration  15: 6130422.819 ops/s
Iteration  16: 6146015.398 ops/s
Iteration  17: 6135208.922 ops/s
Iteration  18: 6149005.501 ops/s
Iteration  19: 6132064.742 ops/s
Iteration  20: 6151303.076 ops/s
Iteration  21: 6144481.062 ops/s
Iteration  22: 6148149.026 ops/s
Iteration  23: 6134855.596 ops/s
Iteration  24: 6134321.076 ops/s
Iteration  25: 6148102.462 ops/s
Iteration  26: 6132744.723 ops/s
Iteration  27: 6144971.162 ops/s
Iteration  28: 6126313.847 ops/s
Iteration  29: 6112980.204 ops/s
Iteration  30: 6114024.176 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_chunk_empty":
  6138860.275 ±(99.9%) 6827.882 ops/s [Average]
  (min, avg, max) = (6112980.204, 6138860.275, 6151303.076), stdev = 10219.653
  CI (99.9%): [6132032.393, 6145688.157] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_chunk_empty  thrpt   30  6138860.275 ± 6827.882  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 541005.596 ops/s
# Warmup Iteration   2: 869366.631 ops/s
# Warmup Iteration   3: 1029473.217 ops/s
# Warmup Iteration   4: 1032728.729 ops/s
# Warmup Iteration   5: 1022841.744 ops/s
# Warmup Iteration   6: 998865.887 ops/s
# Warmup Iteration   7: 898130.430 ops/s
# Warmup Iteration   8: 1035984.748 ops/s
# Warmup Iteration   9: 1037488.422 ops/s
# Warmup Iteration  10: 1037123.129 ops/s
# Warmup Iteration  11: 1037297.341 ops/s
# Warmup Iteration  12: 1038065.510 ops/s
# Warmup Iteration  13: 1036084.566 ops/s
# Warmup Iteration  14: 1037150.334 ops/s
# Warmup Iteration  15: 1037241.411 ops/s
# Warmup Iteration  16: 1038002.391 ops/s
# Warmup Iteration  17: 1037628.028 ops/s
# Warmup Iteration  18: 1038350.168 ops/s
# Warmup Iteration  19: 1038113.509 ops/s
# Warmup Iteration  20: 1037892.109 ops/s
# Warmup Iteration  21: 1037002.797 ops/s
# Warmup Iteration  22: 1038085.616 ops/s
# Warmup Iteration  23: 1037538.780 ops/s
# Warmup Iteration  24: 1032718.657 ops/s
# Warmup Iteration  25: 1037433.126 ops/s
# Warmup Iteration  26: 1038703.381 ops/s
# Warmup Iteration  27: 1037517.753 ops/s
# Warmup Iteration  28: 1038037.093 ops/s
# Warmup Iteration  29: 1035000.191 ops/s
# Warmup Iteration  30: 1038472.037 ops/s
Iteration   1: 1038696.234 ops/s
Iteration   2: 1036654.671 ops/s
Iteration   3: 1039187.450 ops/s
Iteration   4: 1037880.924 ops/s
Iteration   5: 1038769.286 ops/s
Iteration   6: 1037074.174 ops/s
Iteration   7: 1038324.777 ops/s
Iteration   8: 1033881.282 ops/s
Iteration   9: 1039086.029 ops/s
Iteration  10: 1037444.116 ops/s
Iteration  11: 1036220.622 ops/s
Iteration  12: 1036870.807 ops/s
Iteration  13: 1039931.007 ops/s
Iteration  14: 1037520.964 ops/s
Iteration  15: 1034835.892 ops/s
Iteration  16: 1037604.440 ops/s
Iteration  17: 1038794.054 ops/s
Iteration  18: 1036904.714 ops/s
Iteration  19: 1039275.031 ops/s
Iteration  20: 1038174.258 ops/s
Iteration  21: 1039642.361 ops/s
Iteration  22: 1038470.089 ops/s
Iteration  23: 1039680.265 ops/s
Iteration  24: 1037173.436 ops/s
Iteration  25: 1033156.935 ops/s
Iteration  26: 1037367.668 ops/s
Iteration  27: 1036351.036 ops/s
Iteration  28: 1036204.863 ops/s
Iteration  29: 1038227.034 ops/s
Iteration  30: 1036459.412 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_chunk_large_size":
  1037528.794 ±(99.9%) 1094.064 ops/s [Average]
  (min, avg, max) = (1033156.935, 1037528.794, 1039931.007), stdev = 1637.543
  CI (99.9%): [1036434.731, 1038622.858] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_chunk_large_size  thrpt   30  1037528.794 ± 1094.064  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_chunk_single$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_chunk_single

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1936516.226 ops/s
# Warmup Iteration   2: 4847931.229 ops/s
# Warmup Iteration   3: 4926305.253 ops/s
# Warmup Iteration   4: 4117756.558 ops/s
# Warmup Iteration   5: 4937617.638 ops/s
# Warmup Iteration   6: 4926328.769 ops/s
# Warmup Iteration   7: 4938507.573 ops/s
# Warmup Iteration   8: 4937242.533 ops/s
# Warmup Iteration   9: 4929468.458 ops/s
# Warmup Iteration  10: 4932972.842 ops/s
# Warmup Iteration  11: 4932844.030 ops/s
# Warmup Iteration  12: 4936258.613 ops/s
# Warmup Iteration  13: 4935548.166 ops/s
# Warmup Iteration  14: 4928343.221 ops/s
# Warmup Iteration  15: 4928408.542 ops/s
# Warmup Iteration  16: 4927314.345 ops/s
# Warmup Iteration  17: 4939465.317 ops/s
# Warmup Iteration  18: 4930637.527 ops/s
# Warmup Iteration  19: 4937920.412 ops/s
# Warmup Iteration  20: 4936354.472 ops/s
# Warmup Iteration  21: 4938854.013 ops/s
# Warmup Iteration  22: 4941616.236 ops/s
# Warmup Iteration  23: 4929786.795 ops/s
# Warmup Iteration  24: 4937773.240 ops/s
# Warmup Iteration  25: 4934657.618 ops/s
# Warmup Iteration  26: 4938970.698 ops/s
# Warmup Iteration  27: 4944010.229 ops/s
# Warmup Iteration  28: 4930315.644 ops/s
# Warmup Iteration  29: 4938834.779 ops/s
# Warmup Iteration  30: 4938827.409 ops/s
Iteration   1: 4918264.221 ops/s
Iteration   2: 4946323.306 ops/s
Iteration   3: 4954326.084 ops/s
Iteration   4: 4939295.010 ops/s
Iteration   5: 4936516.814 ops/s
Iteration   6: 4912098.452 ops/s
Iteration   7: 4925330.429 ops/s
Iteration   8: 4925229.792 ops/s
Iteration   9: 4924242.655 ops/s
Iteration  10: 4930870.713 ops/s
Iteration  11: 4932129.845 ops/s
Iteration  12: 4940291.422 ops/s
Iteration  13: 4938880.482 ops/s
Iteration  14: 4942750.905 ops/s
Iteration  15: 4932407.426 ops/s
Iteration  16: 4938448.223 ops/s
Iteration  17: 4935877.920 ops/s
Iteration  18: 4937572.749 ops/s
Iteration  19: 4941818.532 ops/s
Iteration  20: 4933162.465 ops/s
Iteration  21: 4933965.449 ops/s
Iteration  22: 4934335.182 ops/s
Iteration  23: 4941143.506 ops/s
Iteration  24: 4938737.532 ops/s
Iteration  25: 4941615.998 ops/s
Iteration  26: 4931912.733 ops/s
Iteration  27: 4927669.522 ops/s
Iteration  28: 4933698.026 ops/s
Iteration  29: 4929784.477 ops/s
Iteration  30: 4934357.475 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_chunk_single":
  4934435.245 ±(99.9%) 5570.531 ops/s [Average]
  (min, avg, max) = (4912098.452, 4934435.245, 4954326.084), stdev = 8337.710
  CI (99.9%): [4928864.713, 4940005.776] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_chunk_single  thrpt   30  4934435.245 ± 5570.531  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 482438.182 ops/s
# Warmup Iteration   2: 572994.490 ops/s
# Warmup Iteration   3: 716915.874 ops/s
# Warmup Iteration   4: 718834.167 ops/s
# Warmup Iteration   5: 714554.420 ops/s
# Warmup Iteration   6: 718418.336 ops/s
# Warmup Iteration   7: 717693.971 ops/s
# Warmup Iteration   8: 718820.990 ops/s
# Warmup Iteration   9: 688354.785 ops/s
# Warmup Iteration  10: 639147.380 ops/s
# Warmup Iteration  11: 717948.324 ops/s
# Warmup Iteration  12: 718947.303 ops/s
# Warmup Iteration  13: 717982.574 ops/s
# Warmup Iteration  14: 718504.635 ops/s
# Warmup Iteration  15: 717884.584 ops/s
# Warmup Iteration  16: 716885.334 ops/s
# Warmup Iteration  17: 750695.299 ops/s
# Warmup Iteration  18: 752981.102 ops/s
# Warmup Iteration  19: 752634.819 ops/s
# Warmup Iteration  20: 753215.941 ops/s
# Warmup Iteration  21: 752378.272 ops/s
# Warmup Iteration  22: 750916.620 ops/s
# Warmup Iteration  23: 751514.854 ops/s
# Warmup Iteration  24: 750824.541 ops/s
# Warmup Iteration  25: 751126.567 ops/s
# Warmup Iteration  26: 751634.985 ops/s
# Warmup Iteration  27: 751702.792 ops/s
# Warmup Iteration  28: 752316.611 ops/s
# Warmup Iteration  29: 749428.442 ops/s
# Warmup Iteration  30: 750251.795 ops/s
Iteration   1: 752923.731 ops/s
Iteration   2: 751250.447 ops/s
Iteration   3: 750115.514 ops/s
Iteration   4: 752924.211 ops/s
Iteration   5: 747423.393 ops/s
Iteration   6: 749381.157 ops/s
Iteration   7: 752087.192 ops/s
Iteration   8: 751792.425 ops/s
Iteration   9: 750727.917 ops/s
Iteration  10: 753725.571 ops/s
Iteration  11: 753211.916 ops/s
Iteration  12: 751775.043 ops/s
Iteration  13: 753575.881 ops/s
Iteration  14: 752512.352 ops/s
Iteration  15: 751544.832 ops/s
Iteration  16: 753239.887 ops/s
Iteration  17: 751474.201 ops/s
Iteration  18: 749399.613 ops/s
Iteration  19: 750131.451 ops/s
Iteration  20: 750299.797 ops/s
Iteration  21: 750313.591 ops/s
Iteration  22: 752987.410 ops/s
Iteration  23: 755013.947 ops/s
Iteration  24: 751368.056 ops/s
Iteration  25: 751807.809 ops/s
Iteration  26: 753114.082 ops/s
Iteration  27: 751736.634 ops/s
Iteration  28: 752328.133 ops/s
Iteration  29: 752719.502 ops/s
Iteration  30: 749268.120 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_chunk_zero_throws":
  751672.460 ±(99.9%) 1090.230 ops/s [Average]
  (min, avg, max) = (747423.393, 751672.460, 755013.947), stdev = 1631.805
  CI (99.9%): [750582.231, 752762.690] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  751672.460 ± 1090.230  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1394920.386 ops/s
# Warmup Iteration   2: 2554213.287 ops/s
# Warmup Iteration   3: 4760369.979 ops/s
# Warmup Iteration   4: 4537425.472 ops/s
# Warmup Iteration   5: 4269088.722 ops/s
# Warmup Iteration   6: 4788561.654 ops/s
# Warmup Iteration   7: 4772890.684 ops/s
# Warmup Iteration   8: 4760919.546 ops/s
# Warmup Iteration   9: 4736520.778 ops/s
# Warmup Iteration  10: 4719263.589 ops/s
# Warmup Iteration  11: 4774899.117 ops/s
# Warmup Iteration  12: 4784283.232 ops/s
# Warmup Iteration  13: 4789080.654 ops/s
# Warmup Iteration  14: 4788438.816 ops/s
# Warmup Iteration  15: 4778654.143 ops/s
# Warmup Iteration  16: 4787924.719 ops/s
# Warmup Iteration  17: 4787121.657 ops/s
# Warmup Iteration  18: 4781546.943 ops/s
# Warmup Iteration  19: 4761716.502 ops/s
# Warmup Iteration  20: 4785428.973 ops/s
# Warmup Iteration  21: 4792546.024 ops/s
# Warmup Iteration  22: 4777970.128 ops/s
# Warmup Iteration  23: 4787515.720 ops/s
# Warmup Iteration  24: 4785108.018 ops/s
# Warmup Iteration  25: 4785804.929 ops/s
# Warmup Iteration  26: 4786193.724 ops/s
# Warmup Iteration  27: 4783950.472 ops/s
# Warmup Iteration  28: 4760435.615 ops/s
# Warmup Iteration  29: 4789179.104 ops/s
# Warmup Iteration  30: 4792891.721 ops/s
Iteration   1: 4805082.286 ops/s
Iteration   2: 4792840.890 ops/s
Iteration   3: 4778031.357 ops/s
Iteration   4: 4792123.388 ops/s
Iteration   5: 4791032.703 ops/s
Iteration   6: 4787988.832 ops/s
Iteration   7: 4787249.842 ops/s
Iteration   8: 4782896.881 ops/s
Iteration   9: 4790363.260 ops/s
Iteration  10: 4785903.508 ops/s
Iteration  11: 4790091.621 ops/s
Iteration  12: 4789233.432 ops/s
Iteration  13: 4793347.704 ops/s
Iteration  14: 4785064.950 ops/s
Iteration  15: 4778809.248 ops/s
Iteration  16: 4787551.882 ops/s
Iteration  17: 4778247.246 ops/s
Iteration  18: 4789590.332 ops/s
Iteration  19: 4781394.041 ops/s
Iteration  20: 4785542.917 ops/s
Iteration  21: 4788341.914 ops/s
Iteration  22: 4803240.950 ops/s
Iteration  23: 4779895.328 ops/s
Iteration  24: 4771654.573 ops/s
Iteration  25: 4783279.235 ops/s
Iteration  26: 4782416.947 ops/s
Iteration  27: 4783246.526 ops/s
Iteration  28: 4786862.340 ops/s
Iteration  29: 4788906.198 ops/s
Iteration  30: 4780168.251 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_clear":
  4786679.953 ±(99.9%) 4650.366 ops/s [Average]
  (min, avg, max) = (4771654.573, 4786679.953, 4805082.286), stdev = 6960.449
  CI (99.9%): [4782029.587, 4791330.318] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_clear  thrpt   30  4786679.953 ± 4650.366  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 344832.653 ops/s
# Warmup Iteration   2: 684531.913 ops/s
# Warmup Iteration   3: 748681.524 ops/s
# Warmup Iteration   4: 751686.410 ops/s
# Warmup Iteration   5: 634420.878 ops/s
# Warmup Iteration   6: 754265.869 ops/s
# Warmup Iteration   7: 753256.016 ops/s
# Warmup Iteration   8: 755084.149 ops/s
# Warmup Iteration   9: 752522.346 ops/s
# Warmup Iteration  10: 753281.303 ops/s
# Warmup Iteration  11: 755759.267 ops/s
# Warmup Iteration  12: 755102.131 ops/s
# Warmup Iteration  13: 755805.784 ops/s
# Warmup Iteration  14: 752926.842 ops/s
# Warmup Iteration  15: 755362.375 ops/s
# Warmup Iteration  16: 752903.687 ops/s
# Warmup Iteration  17: 753936.599 ops/s
# Warmup Iteration  18: 753612.105 ops/s
# Warmup Iteration  19: 754382.603 ops/s
# Warmup Iteration  20: 753084.576 ops/s
# Warmup Iteration  21: 755725.281 ops/s
# Warmup Iteration  22: 753852.179 ops/s
# Warmup Iteration  23: 752832.646 ops/s
# Warmup Iteration  24: 753515.027 ops/s
# Warmup Iteration  25: 754795.397 ops/s
# Warmup Iteration  26: 752985.215 ops/s
# Warmup Iteration  27: 752515.885 ops/s
# Warmup Iteration  28: 743830.355 ops/s
# Warmup Iteration  29: 754601.599 ops/s
# Warmup Iteration  30: 754261.962 ops/s
Iteration   1: 754085.956 ops/s
Iteration   2: 752715.962 ops/s
Iteration   3: 754265.993 ops/s
Iteration   4: 753351.251 ops/s
Iteration   5: 756029.231 ops/s
Iteration   6: 751185.472 ops/s
Iteration   7: 752513.777 ops/s
Iteration   8: 755990.248 ops/s
Iteration   9: 752055.977 ops/s
Iteration  10: 754429.552 ops/s
Iteration  11: 757095.372 ops/s
Iteration  12: 754234.734 ops/s
Iteration  13: 756154.893 ops/s
Iteration  14: 756220.965 ops/s
Iteration  15: 755391.336 ops/s
Iteration  16: 755974.531 ops/s
Iteration  17: 755989.786 ops/s
Iteration  18: 754430.316 ops/s
Iteration  19: 756750.952 ops/s
Iteration  20: 757548.686 ops/s
Iteration  21: 755378.224 ops/s
Iteration  22: 754500.968 ops/s
Iteration  23: 757767.949 ops/s
Iteration  24: 755198.422 ops/s
Iteration  25: 754781.591 ops/s
Iteration  26: 756265.957 ops/s
Iteration  27: 754093.775 ops/s
Iteration  28: 756032.401 ops/s
Iteration  29: 754897.183 ops/s
Iteration  30: 755002.120 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collect":
  755011.119 ±(99.9%) 1056.239 ops/s [Average]
  (min, avg, max) = (751185.472, 755011.119, 757767.949), stdev = 1580.929
  CI (99.9%): [753954.880, 756067.358] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collect  thrpt   30  755011.119 ± 1056.239  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 709992.233 ops/s
# Warmup Iteration   2: 1232711.133 ops/s
# Warmup Iteration   3: 1416353.464 ops/s
# Warmup Iteration   4: 1426458.768 ops/s
# Warmup Iteration   5: 1423451.199 ops/s
# Warmup Iteration   6: 1194668.381 ops/s
# Warmup Iteration   7: 1425738.811 ops/s
# Warmup Iteration   8: 1424088.660 ops/s
# Warmup Iteration   9: 1423982.694 ops/s
# Warmup Iteration  10: 1424194.325 ops/s
# Warmup Iteration  11: 1424534.031 ops/s
# Warmup Iteration  12: 1425391.676 ops/s
# Warmup Iteration  13: 1424937.757 ops/s
# Warmup Iteration  14: 1422303.484 ops/s
# Warmup Iteration  15: 1423850.349 ops/s
# Warmup Iteration  16: 1423825.659 ops/s
# Warmup Iteration  17: 1423484.120 ops/s
# Warmup Iteration  18: 1425692.212 ops/s
# Warmup Iteration  19: 1422872.368 ops/s
# Warmup Iteration  20: 1422211.436 ops/s
# Warmup Iteration  21: 1414862.925 ops/s
# Warmup Iteration  22: 1425036.947 ops/s
# Warmup Iteration  23: 1423753.936 ops/s
# Warmup Iteration  24: 1425136.615 ops/s
# Warmup Iteration  25: 1426504.349 ops/s
# Warmup Iteration  26: 1424363.624 ops/s
# Warmup Iteration  27: 1424426.440 ops/s
# Warmup Iteration  28: 1425234.110 ops/s
# Warmup Iteration  29: 1425521.438 ops/s
# Warmup Iteration  30: 1424252.180 ops/s
Iteration   1: 1426189.546 ops/s
Iteration   2: 1422995.232 ops/s
Iteration   3: 1424944.237 ops/s
Iteration   4: 1419125.228 ops/s
Iteration   5: 1417489.465 ops/s
Iteration   6: 1423640.043 ops/s
Iteration   7: 1422832.318 ops/s
Iteration   8: 1422177.454 ops/s
Iteration   9: 1421713.124 ops/s
Iteration  10: 1422015.195 ops/s
Iteration  11: 1424948.871 ops/s
Iteration  12: 1422643.066 ops/s
Iteration  13: 1421712.547 ops/s
Iteration  14: 1426120.131 ops/s
Iteration  15: 1421825.610 ops/s
Iteration  16: 1424539.765 ops/s
Iteration  17: 1421923.531 ops/s
Iteration  18: 1425340.826 ops/s
Iteration  19: 1420876.048 ops/s
Iteration  20: 1413627.316 ops/s
Iteration  21: 1413367.158 ops/s
Iteration  22: 1413559.773 ops/s
Iteration  23: 1410821.480 ops/s
Iteration  24: 1414444.793 ops/s
Iteration  25: 1422996.353 ops/s
Iteration  26: 1421819.694 ops/s
Iteration  27: 1423517.135 ops/s
Iteration  28: 1421183.172 ops/s
Iteration  29: 1425470.795 ops/s
Iteration  30: 1421313.462 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectBoolean":
  1421172.446 ±(99.9%) 2769.378 ops/s [Average]
  (min, avg, max) = (1410821.480, 1421172.446, 1426189.546), stdev = 4145.075
  CI (99.9%): [1418403.067, 1423941.824] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectBoolean  thrpt   30  1421172.446 ± 2769.378  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectBooleanWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectBooleanWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2161218.280 ops/s
# Warmup Iteration   2: 4349957.760 ops/s
# Warmup Iteration   3: 4583246.681 ops/s
# Warmup Iteration   4: 4606475.147 ops/s
# Warmup Iteration   5: 3837276.828 ops/s
# Warmup Iteration   6: 4620979.972 ops/s
# Warmup Iteration   7: 4616618.277 ops/s
# Warmup Iteration   8: 4620056.565 ops/s
# Warmup Iteration   9: 4622519.476 ops/s
# Warmup Iteration  10: 4619277.708 ops/s
# Warmup Iteration  11: 4618870.714 ops/s
# Warmup Iteration  12: 4622630.673 ops/s
# Warmup Iteration  13: 4614484.014 ops/s
# Warmup Iteration  14: 4589819.360 ops/s
# Warmup Iteration  15: 4601483.478 ops/s
# Warmup Iteration  16: 4604069.773 ops/s
# Warmup Iteration  17: 4566771.484 ops/s
# Warmup Iteration  18: 4565135.804 ops/s
# Warmup Iteration  19: 4573189.593 ops/s
# Warmup Iteration  20: 4570035.990 ops/s
# Warmup Iteration  21: 4557736.737 ops/s
# Warmup Iteration  22: 4570039.225 ops/s
# Warmup Iteration  23: 4566765.233 ops/s
# Warmup Iteration  24: 4550297.332 ops/s
# Warmup Iteration  25: 4561591.121 ops/s
# Warmup Iteration  26: 4567668.909 ops/s
# Warmup Iteration  27: 4569340.402 ops/s
# Warmup Iteration  28: 4572578.124 ops/s
# Warmup Iteration  29: 4570226.365 ops/s
# Warmup Iteration  30: 4573292.574 ops/s
Iteration   1: 4563495.376 ops/s
Iteration   2: 4581128.807 ops/s
Iteration   3: 4568840.997 ops/s
Iteration   4: 4566515.691 ops/s
Iteration   5: 4575785.336 ops/s
Iteration   6: 4571059.776 ops/s
Iteration   7: 4567951.883 ops/s
Iteration   8: 4569609.027 ops/s
Iteration   9: 4560749.423 ops/s
Iteration  10: 4567168.895 ops/s
Iteration  11: 4550694.659 ops/s
Iteration  12: 4564672.137 ops/s
Iteration  13: 4570756.647 ops/s
Iteration  14: 4577792.376 ops/s
Iteration  15: 4563873.337 ops/s
Iteration  16: 4565872.107 ops/s
Iteration  17: 4577216.360 ops/s
Iteration  18: 4577103.361 ops/s
Iteration  19: 4568139.148 ops/s
Iteration  20: 4573971.679 ops/s
Iteration  21: 4570918.953 ops/s
Iteration  22: 4550927.476 ops/s
Iteration  23: 4586113.630 ops/s
Iteration  24: 4570702.080 ops/s
Iteration  25: 4567889.832 ops/s
Iteration  26: 4566742.386 ops/s
Iteration  27: 4574402.567 ops/s
Iteration  28: 4565319.037 ops/s
Iteration  29: 4565497.060 ops/s
Iteration  30: 4572323.357 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectBooleanWithBagTarget":
  4569107.780 ±(99.9%) 5014.754 ops/s [Average]
  (min, avg, max) = (4550694.659, 4569107.780, 4586113.630), stdev = 7505.848
  CI (99.9%): [4564093.026, 4574122.533] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectBooleanWithBagTarget  thrpt   30  4569107.780 ± 5014.754  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1760231.656 ops/s
# Warmup Iteration   2: 3304450.139 ops/s
# Warmup Iteration   3: 3629989.014 ops/s
# Warmup Iteration   4: 3657375.102 ops/s
# Warmup Iteration   5: 3277813.714 ops/s
# Warmup Iteration   6: 3417971.054 ops/s
# Warmup Iteration   7: 3650990.251 ops/s
# Warmup Iteration   8: 3648202.385 ops/s
# Warmup Iteration   9: 3650742.230 ops/s
# Warmup Iteration  10: 3646560.428 ops/s
# Warmup Iteration  11: 3657116.110 ops/s
# Warmup Iteration  12: 3670431.038 ops/s
# Warmup Iteration  13: 3667353.100 ops/s
# Warmup Iteration  14: 3662899.904 ops/s
# Warmup Iteration  15: 3664995.347 ops/s
# Warmup Iteration  16: 3664580.567 ops/s
# Warmup Iteration  17: 3662609.672 ops/s
# Warmup Iteration  18: 3654528.364 ops/s
# Warmup Iteration  19: 3662080.657 ops/s
# Warmup Iteration  20: 3665056.263 ops/s
# Warmup Iteration  21: 3666788.658 ops/s
# Warmup Iteration  22: 3665405.305 ops/s
# Warmup Iteration  23: 3672299.417 ops/s
# Warmup Iteration  24: 3668751.233 ops/s
# Warmup Iteration  25: 3665221.427 ops/s
# Warmup Iteration  26: 3666913.135 ops/s
# Warmup Iteration  27: 3670310.853 ops/s
# Warmup Iteration  28: 3660352.251 ops/s
# Warmup Iteration  29: 3666509.053 ops/s
# Warmup Iteration  30: 3658105.877 ops/s
Iteration   1: 3670763.016 ops/s
Iteration   2: 3663593.274 ops/s
Iteration   3: 3662132.994 ops/s
Iteration   4: 3671372.651 ops/s
Iteration   5: 3659472.162 ops/s
Iteration   6: 3670049.674 ops/s
Iteration   7: 3663035.000 ops/s
Iteration   8: 3663024.358 ops/s
Iteration   9: 3669599.088 ops/s
Iteration  10: 3659835.624 ops/s
Iteration  11: 3659501.738 ops/s
Iteration  12: 3652354.987 ops/s
Iteration  13: 3652278.615 ops/s
Iteration  14: 3665895.621 ops/s
Iteration  15: 3662142.279 ops/s
Iteration  16: 3661149.336 ops/s
Iteration  17: 3671760.994 ops/s
Iteration  18: 3663346.626 ops/s
Iteration  19: 3659880.948 ops/s
Iteration  20: 3671290.242 ops/s
Iteration  21: 3662148.012 ops/s
Iteration  22: 3670720.113 ops/s
Iteration  23: 3664637.104 ops/s
Iteration  24: 3662840.122 ops/s
Iteration  25: 3674123.818 ops/s
Iteration  26: 3665977.024 ops/s
Iteration  27: 3664686.744 ops/s
Iteration  28: 3673646.893 ops/s
Iteration  29: 3665575.176 ops/s
Iteration  30: 3670933.966 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectBooleanWithTarget":
  3664925.607 ±(99.9%) 3774.794 ops/s [Average]
  (min, avg, max) = (3652278.615, 3664925.607, 3674123.818), stdev = 5649.934
  CI (99.9%): [3661150.813, 3668700.400] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  3664925.607 ± 3774.794  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 420038.196 ops/s
# Warmup Iteration   2: 792665.159 ops/s
# Warmup Iteration   3: 871952.195 ops/s
# Warmup Iteration   4: 872867.497 ops/s
# Warmup Iteration   5: 763910.486 ops/s
# Warmup Iteration   6: 842377.411 ops/s
# Warmup Iteration   7: 869769.612 ops/s
# Warmup Iteration   8: 869957.859 ops/s
# Warmup Iteration   9: 869511.186 ops/s
# Warmup Iteration  10: 870657.066 ops/s
# Warmup Iteration  11: 871074.892 ops/s
# Warmup Iteration  12: 869852.561 ops/s
# Warmup Iteration  13: 869804.612 ops/s
# Warmup Iteration  14: 868713.120 ops/s
# Warmup Iteration  15: 869134.050 ops/s
# Warmup Iteration  16: 869771.834 ops/s
# Warmup Iteration  17: 870380.407 ops/s
# Warmup Iteration  18: 871316.503 ops/s
# Warmup Iteration  19: 870856.717 ops/s
# Warmup Iteration  20: 869130.400 ops/s
# Warmup Iteration  21: 866462.644 ops/s
# Warmup Iteration  22: 868720.699 ops/s
# Warmup Iteration  23: 869205.593 ops/s
# Warmup Iteration  24: 868139.990 ops/s
# Warmup Iteration  25: 870129.464 ops/s
# Warmup Iteration  26: 871719.259 ops/s
# Warmup Iteration  27: 869206.279 ops/s
# Warmup Iteration  28: 868230.034 ops/s
# Warmup Iteration  29: 869546.340 ops/s
# Warmup Iteration  30: 870568.601 ops/s
Iteration   1: 868967.106 ops/s
Iteration   2: 871755.166 ops/s
Iteration   3: 870116.827 ops/s
Iteration   4: 870170.439 ops/s
Iteration   5: 873542.237 ops/s
Iteration   6: 871479.690 ops/s
Iteration   7: 872906.594 ops/s
Iteration   8: 870694.013 ops/s
Iteration   9: 869494.718 ops/s
Iteration  10: 869674.072 ops/s
Iteration  11: 869629.753 ops/s
Iteration  12: 871903.186 ops/s
Iteration  13: 872179.174 ops/s
Iteration  14: 866469.971 ops/s
Iteration  15: 869640.893 ops/s
Iteration  16: 868499.025 ops/s
Iteration  17: 870948.001 ops/s
Iteration  18: 868122.976 ops/s
Iteration  19: 869379.189 ops/s
Iteration  20: 867094.707 ops/s
Iteration  21: 870266.406 ops/s
Iteration  22: 869357.560 ops/s
Iteration  23: 870292.176 ops/s
Iteration  24: 869308.488 ops/s
Iteration  25: 867518.987 ops/s
Iteration  26: 872608.236 ops/s
Iteration  27: 871067.112 ops/s
Iteration  28: 871637.295 ops/s
Iteration  29: 873696.700 ops/s
Iteration  30: 871656.370 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectByte":
  870335.902 ±(99.9%) 1213.477 ops/s [Average]
  (min, avg, max) = (866469.971, 870335.902, 873696.700), stdev = 1816.276
  CI (99.9%): [869122.425, 871549.380] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectByte  thrpt   30  870335.902 ± 1213.477  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectByteWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectByteWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1029395.419 ops/s
# Warmup Iteration   2: 2542436.026 ops/s
# Warmup Iteration   3: 2583562.422 ops/s
# Warmup Iteration   4: 2166378.999 ops/s
# Warmup Iteration   5: 2583508.448 ops/s
# Warmup Iteration   6: 2583575.780 ops/s
# Warmup Iteration   7: 2586801.279 ops/s
# Warmup Iteration   8: 2583767.337 ops/s
# Warmup Iteration   9: 2582332.895 ops/s
# Warmup Iteration  10: 2583070.992 ops/s
# Warmup Iteration  11: 2584892.478 ops/s
# Warmup Iteration  12: 2585606.294 ops/s
# Warmup Iteration  13: 2586398.199 ops/s
# Warmup Iteration  14: 2586328.464 ops/s
# Warmup Iteration  15: 2587318.960 ops/s
# Warmup Iteration  16: 2572606.818 ops/s
# Warmup Iteration  17: 2585545.880 ops/s
# Warmup Iteration  18: 2586907.349 ops/s
# Warmup Iteration  19: 2589039.902 ops/s
# Warmup Iteration  20: 2587344.041 ops/s
# Warmup Iteration  21: 2585818.123 ops/s
# Warmup Iteration  22: 2579894.077 ops/s
# Warmup Iteration  23: 2580821.799 ops/s
# Warmup Iteration  24: 2587092.531 ops/s
# Warmup Iteration  25: 2581977.000 ops/s
# Warmup Iteration  26: 2582582.886 ops/s
# Warmup Iteration  27: 2581808.983 ops/s
# Warmup Iteration  28: 2583802.712 ops/s
# Warmup Iteration  29: 2586719.086 ops/s
# Warmup Iteration  30: 2586046.798 ops/s
Iteration   1: 2586826.930 ops/s
Iteration   2: 2584627.664 ops/s
Iteration   3: 2577940.115 ops/s
Iteration   4: 2579433.217 ops/s
Iteration   5: 2570016.627 ops/s
Iteration   6: 2573379.120 ops/s
Iteration   7: 2587198.011 ops/s
Iteration   8: 2588216.495 ops/s
Iteration   9: 2590690.333 ops/s
Iteration  10: 2592864.483 ops/s
Iteration  11: 2570008.543 ops/s
Iteration  12: 2588581.444 ops/s
Iteration  13: 2585717.101 ops/s
Iteration  14: 2582189.865 ops/s
Iteration  15: 2585469.775 ops/s
Iteration  16: 2587673.729 ops/s
Iteration  17: 2586711.258 ops/s
Iteration  18: 2588407.227 ops/s
Iteration  19: 2588047.131 ops/s
Iteration  20: 2586280.627 ops/s
Iteration  21: 2585841.529 ops/s
Iteration  22: 2590847.097 ops/s
Iteration  23: 2588603.151 ops/s
Iteration  24: 2586383.794 ops/s
Iteration  25: 2581920.099 ops/s
Iteration  26: 2585682.117 ops/s
Iteration  27: 2587085.813 ops/s
Iteration  28: 2585710.478 ops/s
Iteration  29: 2586122.954 ops/s
Iteration  30: 2587499.537 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectByteWithBagTarget":
  2584865.875 ±(99.9%) 3729.491 ops/s [Average]
  (min, avg, max) = (2570008.543, 2584865.875, 2592864.483), stdev = 5582.128
  CI (99.9%): [2581136.384, 2588595.367] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectByteWithBagTarget  thrpt   30  2584865.875 ± 3729.491  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 890014.440 ops/s
# Warmup Iteration   2: 1968351.472 ops/s
# Warmup Iteration   3: 2053983.241 ops/s
# Warmup Iteration   4: 1984205.236 ops/s
# Warmup Iteration   5: 1808807.793 ops/s
# Warmup Iteration   6: 2065166.001 ops/s
# Warmup Iteration   7: 2062772.884 ops/s
# Warmup Iteration   8: 2064680.386 ops/s
# Warmup Iteration   9: 2061217.041 ops/s
# Warmup Iteration  10: 2060193.248 ops/s
# Warmup Iteration  11: 2065296.331 ops/s
# Warmup Iteration  12: 2062560.886 ops/s
# Warmup Iteration  13: 2057922.436 ops/s
# Warmup Iteration  14: 2060125.323 ops/s
# Warmup Iteration  15: 2065247.790 ops/s
# Warmup Iteration  16: 2060855.605 ops/s
# Warmup Iteration  17: 2058070.303 ops/s
# Warmup Iteration  18: 2063694.863 ops/s
# Warmup Iteration  19: 2059810.780 ops/s
# Warmup Iteration  20: 2064402.538 ops/s
# Warmup Iteration  21: 2059585.795 ops/s
# Warmup Iteration  22: 2063620.962 ops/s
# Warmup Iteration  23: 2060678.731 ops/s
# Warmup Iteration  24: 2060669.738 ops/s
# Warmup Iteration  25: 2063213.400 ops/s
# Warmup Iteration  26: 2060985.578 ops/s
# Warmup Iteration  27: 2063226.132 ops/s
# Warmup Iteration  28: 2061927.619 ops/s
# Warmup Iteration  29: 2057329.777 ops/s
# Warmup Iteration  30: 2062227.278 ops/s
Iteration   1: 2060900.301 ops/s
Iteration   2: 2058658.382 ops/s
Iteration   3: 2066330.094 ops/s
Iteration   4: 2062590.208 ops/s
Iteration   5: 2061350.335 ops/s
Iteration   6: 2062280.424 ops/s
Iteration   7: 2065949.548 ops/s
Iteration   8: 2062947.277 ops/s
Iteration   9: 2058520.275 ops/s
Iteration  10: 2063711.723 ops/s
Iteration  11: 2064810.975 ops/s
Iteration  12: 2064870.302 ops/s
Iteration  13: 2063365.183 ops/s
Iteration  14: 2060764.083 ops/s
Iteration  15: 2059600.164 ops/s
Iteration  16: 2061467.719 ops/s
Iteration  17: 2066307.422 ops/s
Iteration  18: 2064407.952 ops/s
Iteration  19: 2058558.784 ops/s
Iteration  20: 2060796.982 ops/s
Iteration  21: 2064070.701 ops/s
Iteration  22: 2059810.330 ops/s
Iteration  23: 2061629.858 ops/s
Iteration  24: 2063573.187 ops/s
Iteration  25: 2050773.184 ops/s
Iteration  26: 2064271.869 ops/s
Iteration  27: 2062584.477 ops/s
Iteration  28: 2062286.405 ops/s
Iteration  29: 2060392.443 ops/s
Iteration  30: 2060298.899 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectByteWithTarget":
  2061929.316 ±(99.9%) 2058.789 ops/s [Average]
  (min, avg, max) = (2050773.184, 2061929.316, 2066330.094), stdev = 3081.499
  CI (99.9%): [2059870.527, 2063988.106] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  2061929.316 ± 2058.789  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 403906.244 ops/s
# Warmup Iteration   2: 750766.733 ops/s
# Warmup Iteration   3: 838174.949 ops/s
# Warmup Iteration   4: 836528.697 ops/s
# Warmup Iteration   5: 796134.061 ops/s
# Warmup Iteration   6: 748814.117 ops/s
# Warmup Iteration   7: 836439.922 ops/s
# Warmup Iteration   8: 837752.392 ops/s
# Warmup Iteration   9: 839978.389 ops/s
# Warmup Iteration  10: 837226.152 ops/s
# Warmup Iteration  11: 834435.004 ops/s
# Warmup Iteration  12: 837789.735 ops/s
# Warmup Iteration  13: 836820.267 ops/s
# Warmup Iteration  14: 837135.036 ops/s
# Warmup Iteration  15: 836299.251 ops/s
# Warmup Iteration  16: 837522.892 ops/s
# Warmup Iteration  17: 838416.948 ops/s
# Warmup Iteration  18: 838379.946 ops/s
# Warmup Iteration  19: 840298.711 ops/s
# Warmup Iteration  20: 839042.263 ops/s
# Warmup Iteration  21: 839445.947 ops/s
# Warmup Iteration  22: 839271.304 ops/s
# Warmup Iteration  23: 838547.283 ops/s
# Warmup Iteration  24: 837912.003 ops/s
# Warmup Iteration  25: 838379.599 ops/s
# Warmup Iteration  26: 834499.934 ops/s
# Warmup Iteration  27: 836755.612 ops/s
# Warmup Iteration  28: 829774.165 ops/s
# Warmup Iteration  29: 835332.534 ops/s
# Warmup Iteration  30: 839526.277 ops/s
Iteration   1: 839280.520 ops/s
Iteration   2: 836799.767 ops/s
Iteration   3: 835865.371 ops/s
Iteration   4: 842232.118 ops/s
Iteration   5: 835007.774 ops/s
Iteration   6: 838872.196 ops/s
Iteration   7: 836557.583 ops/s
Iteration   8: 836541.921 ops/s
Iteration   9: 838387.635 ops/s
Iteration  10: 837538.642 ops/s
Iteration  11: 837459.507 ops/s
Iteration  12: 836730.259 ops/s
Iteration  13: 838076.714 ops/s
Iteration  14: 842015.160 ops/s
Iteration  15: 841824.092 ops/s
Iteration  16: 839705.191 ops/s
Iteration  17: 841137.344 ops/s
Iteration  18: 838843.855 ops/s
Iteration  19: 839556.264 ops/s
Iteration  20: 839683.291 ops/s
Iteration  21: 838974.310 ops/s
Iteration  22: 840990.484 ops/s
Iteration  23: 838115.870 ops/s
Iteration  24: 835607.521 ops/s
Iteration  25: 839055.446 ops/s
Iteration  26: 838624.833 ops/s
Iteration  27: 841042.970 ops/s
Iteration  28: 837612.793 ops/s
Iteration  29: 837579.315 ops/s
Iteration  30: 838959.265 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectChar":
  838622.600 ±(99.9%) 1284.644 ops/s [Average]
  (min, avg, max) = (835007.774, 838622.600, 842232.118), stdev = 1922.794
  CI (99.9%): [837337.957, 839907.244] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectChar  thrpt   30  838622.600 ± 1284.644  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectCharWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectCharWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1028670.252 ops/s
# Warmup Iteration   2: 2589513.475 ops/s
# Warmup Iteration   3: 2611971.309 ops/s
# Warmup Iteration   4: 2190493.840 ops/s
# Warmup Iteration   5: 2617499.607 ops/s
# Warmup Iteration   6: 2617196.405 ops/s
# Warmup Iteration   7: 2617118.247 ops/s
# Warmup Iteration   8: 2587571.655 ops/s
# Warmup Iteration   9: 2619622.768 ops/s
# Warmup Iteration  10: 2616589.877 ops/s
# Warmup Iteration  11: 2616543.022 ops/s
# Warmup Iteration  12: 2621720.662 ops/s
# Warmup Iteration  13: 2617606.327 ops/s
# Warmup Iteration  14: 2616259.876 ops/s
# Warmup Iteration  15: 2613450.438 ops/s
# Warmup Iteration  16: 2614210.014 ops/s
# Warmup Iteration  17: 2615093.680 ops/s
# Warmup Iteration  18: 2619343.812 ops/s
# Warmup Iteration  19: 2620741.136 ops/s
# Warmup Iteration  20: 2618591.252 ops/s
# Warmup Iteration  21: 2623767.747 ops/s
# Warmup Iteration  22: 2616882.761 ops/s
# Warmup Iteration  23: 2620329.555 ops/s
# Warmup Iteration  24: 2600442.368 ops/s
# Warmup Iteration  25: 2615550.088 ops/s
# Warmup Iteration  26: 2573372.525 ops/s
# Warmup Iteration  27: 2616781.108 ops/s
# Warmup Iteration  28: 2620864.382 ops/s
# Warmup Iteration  29: 2615741.428 ops/s
# Warmup Iteration  30: 2620451.545 ops/s
Iteration   1: 2621341.102 ops/s
Iteration   2: 2619020.357 ops/s
Iteration   3: 2618541.607 ops/s
Iteration   4: 2622104.969 ops/s
Iteration   5: 2625225.270 ops/s
Iteration   6: 2616358.221 ops/s
Iteration   7: 2610916.925 ops/s
Iteration   8: 2593043.179 ops/s
Iteration   9: 2599969.280 ops/s
Iteration  10: 2620303.644 ops/s
Iteration  11: 2623106.945 ops/s
Iteration  12: 2620745.035 ops/s
Iteration  13: 2617771.865 ops/s
Iteration  14: 2615726.088 ops/s
Iteration  15: 2617951.728 ops/s
Iteration  16: 2618263.828 ops/s
Iteration  17: 2618627.135 ops/s
Iteration  18: 2622406.910 ops/s
Iteration  19: 2616569.358 ops/s
Iteration  20: 2616140.452 ops/s
Iteration  21: 2614515.794 ops/s
Iteration  22: 2612408.272 ops/s
Iteration  23: 2593646.327 ops/s
Iteration  24: 2599756.655 ops/s
Iteration  25: 2606840.744 ops/s
Iteration  26: 2597088.324 ops/s
Iteration  27: 2601738.013 ops/s
Iteration  28: 2594870.537 ops/s
Iteration  29: 2592833.005 ops/s
Iteration  30: 2595210.821 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectCharWithBagTarget":
  2611434.746 ±(99.9%) 7172.369 ops/s [Average]
  (min, avg, max) = (2592833.005, 2611434.746, 2625225.270), stdev = 10735.265
  CI (99.9%): [2604262.378, 2618607.115] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectCharWithBagTarget  thrpt   30  2611434.746 ± 7172.369  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 865532.175 ops/s
# Warmup Iteration   2: 1991466.822 ops/s
# Warmup Iteration   3: 2086433.285 ops/s
# Warmup Iteration   4: 1851805.738 ops/s
# Warmup Iteration   5: 1917005.195 ops/s
# Warmup Iteration   6: 2051207.243 ops/s
# Warmup Iteration   7: 2029959.724 ops/s
# Warmup Iteration   8: 2072772.350 ops/s
# Warmup Iteration   9: 2055893.927 ops/s
# Warmup Iteration  10: 2080145.540 ops/s
# Warmup Iteration  11: 2076664.433 ops/s
# Warmup Iteration  12: 2082250.089 ops/s
# Warmup Iteration  13: 2080429.774 ops/s
# Warmup Iteration  14: 2081609.614 ops/s
# Warmup Iteration  15: 2078958.261 ops/s
# Warmup Iteration  16: 2073117.798 ops/s
# Warmup Iteration  17: 2071903.739 ops/s
# Warmup Iteration  18: 2059215.771 ops/s
# Warmup Iteration  19: 2053631.478 ops/s
# Warmup Iteration  20: 2074301.615 ops/s
# Warmup Iteration  21: 2074551.298 ops/s
# Warmup Iteration  22: 2067966.186 ops/s
# Warmup Iteration  23: 2073239.220 ops/s
# Warmup Iteration  24: 2068561.536 ops/s
# Warmup Iteration  25: 2071778.110 ops/s
# Warmup Iteration  26: 2072647.953 ops/s
# Warmup Iteration  27: 2071637.836 ops/s
# Warmup Iteration  28: 2067202.748 ops/s
# Warmup Iteration  29: 2074675.261 ops/s
# Warmup Iteration  30: 2072087.364 ops/s
Iteration   1: 2072790.942 ops/s
Iteration   2: 2077744.328 ops/s
Iteration   3: 2069405.651 ops/s
Iteration   4: 2070548.041 ops/s
Iteration   5: 2076168.264 ops/s
Iteration   6: 2071810.423 ops/s
Iteration   7: 2068860.542 ops/s
Iteration   8: 2075261.067 ops/s
Iteration   9: 2071069.950 ops/s
Iteration  10: 2065241.494 ops/s
Iteration  11: 2068765.795 ops/s
Iteration  12: 2068067.176 ops/s
Iteration  13: 2072959.176 ops/s
Iteration  14: 2063750.620 ops/s
Iteration  15: 2065544.821 ops/s
Iteration  16: 2070198.389 ops/s
Iteration  17: 2067262.215 ops/s
Iteration  18: 2059564.962 ops/s
Iteration  19: 2078214.206 ops/s
Iteration  20: 2074412.994 ops/s
Iteration  21: 2072889.655 ops/s
Iteration  22: 2071942.034 ops/s
Iteration  23: 2070217.097 ops/s
Iteration  24: 2075653.829 ops/s
Iteration  25: 2071878.428 ops/s
Iteration  26: 2073445.676 ops/s
Iteration  27: 2073502.457 ops/s
Iteration  28: 2073884.491 ops/s
Iteration  29: 2070738.982 ops/s
Iteration  30: 2076945.259 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectCharWithTarget":
  2071291.299 ±(99.9%) 2841.210 ops/s [Average]
  (min, avg, max) = (2059564.962, 2071291.299, 2078214.206), stdev = 4252.590
  CI (99.9%): [2068450.089, 2074132.509] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  2071291.299 ± 2841.210  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 331362.828 ops/s
# Warmup Iteration   2: 666993.622 ops/s
# Warmup Iteration   3: 714335.322 ops/s
# Warmup Iteration   4: 716183.794 ops/s
# Warmup Iteration   5: 607780.462 ops/s
# Warmup Iteration   6: 716544.241 ops/s
# Warmup Iteration   7: 715781.971 ops/s
# Warmup Iteration   8: 715458.219 ops/s
# Warmup Iteration   9: 715699.712 ops/s
# Warmup Iteration  10: 712374.361 ops/s
# Warmup Iteration  11: 712948.486 ops/s
# Warmup Iteration  12: 715853.787 ops/s
# Warmup Iteration  13: 716977.022 ops/s
# Warmup Iteration  14: 714626.708 ops/s
# Warmup Iteration  15: 713361.224 ops/s
# Warmup Iteration  16: 715936.313 ops/s
# Warmup Iteration  17: 716519.279 ops/s
# Warmup Iteration  18: 711901.202 ops/s
# Warmup Iteration  19: 715839.523 ops/s
# Warmup Iteration  20: 713414.085 ops/s
# Warmup Iteration  21: 713974.423 ops/s
# Warmup Iteration  22: 713892.191 ops/s
# Warmup Iteration  23: 717099.742 ops/s
# Warmup Iteration  24: 716801.702 ops/s
# Warmup Iteration  25: 715738.597 ops/s
# Warmup Iteration  26: 711560.337 ops/s
# Warmup Iteration  27: 710443.335 ops/s
# Warmup Iteration  28: 714025.767 ops/s
# Warmup Iteration  29: 712889.912 ops/s
# Warmup Iteration  30: 712765.312 ops/s
Iteration   1: 715539.287 ops/s
Iteration   2: 713090.684 ops/s
Iteration   3: 717088.422 ops/s
Iteration   4: 716579.697 ops/s
Iteration   5: 714895.285 ops/s
Iteration   6: 717550.711 ops/s
Iteration   7: 711720.802 ops/s
Iteration   8: 714445.152 ops/s
Iteration   9: 714494.561 ops/s
Iteration  10: 716251.570 ops/s
Iteration  11: 713434.968 ops/s
Iteration  12: 713094.983 ops/s
Iteration  13: 711086.027 ops/s
Iteration  14: 711213.832 ops/s
Iteration  15: 713922.654 ops/s
Iteration  16: 715012.891 ops/s
Iteration  17: 713620.310 ops/s
Iteration  18: 717062.018 ops/s
Iteration  19: 716278.437 ops/s
Iteration  20: 714823.952 ops/s
Iteration  21: 713989.732 ops/s
Iteration  22: 715918.639 ops/s
Iteration  23: 714638.034 ops/s
Iteration  24: 713521.162 ops/s
Iteration  25: 711922.839 ops/s
Iteration  26: 711351.350 ops/s
Iteration  27: 711874.904 ops/s
Iteration  28: 711224.723 ops/s
Iteration  29: 712438.799 ops/s
Iteration  30: 712256.002 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectDouble":
  714011.414 ±(99.9%) 1305.112 ops/s [Average]
  (min, avg, max) = (711086.027, 714011.414, 717550.711), stdev = 1953.431
  CI (99.9%): [712706.302, 715316.527] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectDouble  thrpt   30  714011.414 ± 1305.112  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectDoubleWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectDoubleWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 810120.280 ops/s
# Warmup Iteration   2: 1983174.738 ops/s
# Warmup Iteration   3: 2029055.994 ops/s
# Warmup Iteration   4: 1701011.008 ops/s
# Warmup Iteration   5: 2037931.637 ops/s
# Warmup Iteration   6: 2041671.781 ops/s
# Warmup Iteration   7: 2038971.688 ops/s
# Warmup Iteration   8: 2034319.321 ops/s
# Warmup Iteration   9: 2041783.350 ops/s
# Warmup Iteration  10: 2036275.078 ops/s
# Warmup Iteration  11: 2038637.349 ops/s
# Warmup Iteration  12: 2037178.567 ops/s
# Warmup Iteration  13: 2037440.399 ops/s
# Warmup Iteration  14: 2038963.915 ops/s
# Warmup Iteration  15: 2038308.560 ops/s
# Warmup Iteration  16: 2039515.549 ops/s
# Warmup Iteration  17: 2040287.501 ops/s
# Warmup Iteration  18: 2032678.546 ops/s
# Warmup Iteration  19: 2035914.668 ops/s
# Warmup Iteration  20: 2037910.662 ops/s
# Warmup Iteration  21: 2032065.720 ops/s
# Warmup Iteration  22: 2040576.648 ops/s
# Warmup Iteration  23: 2037229.812 ops/s
# Warmup Iteration  24: 2037478.311 ops/s
# Warmup Iteration  25: 2037092.659 ops/s
# Warmup Iteration  26: 2037358.994 ops/s
# Warmup Iteration  27: 2039712.190 ops/s
# Warmup Iteration  28: 2036354.828 ops/s
# Warmup Iteration  29: 2034355.641 ops/s
# Warmup Iteration  30: 2038051.350 ops/s
Iteration   1: 2030857.908 ops/s
Iteration   2: 2038555.549 ops/s
Iteration   3: 2035392.491 ops/s
Iteration   4: 2030776.300 ops/s
Iteration   5: 2038870.831 ops/s
Iteration   6: 2033055.983 ops/s
Iteration   7: 2040645.999 ops/s
Iteration   8: 2038684.957 ops/s
Iteration   9: 2038716.563 ops/s
Iteration  10: 2039348.518 ops/s
Iteration  11: 2035413.254 ops/s
Iteration  12: 2037633.040 ops/s
Iteration  13: 2041194.941 ops/s
Iteration  14: 2038916.657 ops/s
Iteration  15: 2037831.456 ops/s
Iteration  16: 2036907.594 ops/s
Iteration  17: 2039361.505 ops/s
Iteration  18: 2037873.493 ops/s
Iteration  19: 2036023.375 ops/s
Iteration  20: 2038219.855 ops/s
Iteration  21: 2033473.888 ops/s
Iteration  22: 2039290.483 ops/s
Iteration  23: 2043989.711 ops/s
Iteration  24: 2039135.026 ops/s
Iteration  25: 2037839.185 ops/s
Iteration  26: 2041144.024 ops/s
Iteration  27: 2037595.263 ops/s
Iteration  28: 2035608.576 ops/s
Iteration  29: 2039163.109 ops/s
Iteration  30: 2040213.922 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectDoubleWithBagTarget":
  2037724.449 ±(99.9%) 1958.937 ops/s [Average]
  (min, avg, max) = (2030776.300, 2037724.449, 2043989.711), stdev = 2932.044
  CI (99.9%): [2035765.512, 2039683.385] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectDoubleWithBagTarget  thrpt   30  2037724.449 ± 1958.937  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 696852.221 ops/s
# Warmup Iteration   2: 1571804.282 ops/s
# Warmup Iteration   3: 1640203.595 ops/s
# Warmup Iteration   4: 1497507.079 ops/s
# Warmup Iteration   5: 1526466.104 ops/s
# Warmup Iteration   6: 1641514.432 ops/s
# Warmup Iteration   7: 1646157.952 ops/s
# Warmup Iteration   8: 1642894.637 ops/s
# Warmup Iteration   9: 1640787.386 ops/s
# Warmup Iteration  10: 1645515.092 ops/s
# Warmup Iteration  11: 1644986.693 ops/s
# Warmup Iteration  12: 1644715.070 ops/s
# Warmup Iteration  13: 1643845.891 ops/s
# Warmup Iteration  14: 1642430.959 ops/s
# Warmup Iteration  15: 1643500.952 ops/s
# Warmup Iteration  16: 1617209.039 ops/s
# Warmup Iteration  17: 1636679.010 ops/s
# Warmup Iteration  18: 1635172.546 ops/s
# Warmup Iteration  19: 1635312.276 ops/s
# Warmup Iteration  20: 1636278.387 ops/s
# Warmup Iteration  21: 1633661.934 ops/s
# Warmup Iteration  22: 1635753.418 ops/s
# Warmup Iteration  23: 1641883.265 ops/s
# Warmup Iteration  24: 1637093.380 ops/s
# Warmup Iteration  25: 1642992.287 ops/s
# Warmup Iteration  26: 1640011.452 ops/s
# Warmup Iteration  27: 1642469.055 ops/s
# Warmup Iteration  28: 1638741.376 ops/s
# Warmup Iteration  29: 1642830.029 ops/s
# Warmup Iteration  30: 1639731.014 ops/s
Iteration   1: 1640450.068 ops/s
Iteration   2: 1640205.366 ops/s
Iteration   3: 1639845.400 ops/s
Iteration   4: 1637983.303 ops/s
Iteration   5: 1645340.096 ops/s
Iteration   6: 1639946.913 ops/s
Iteration   7: 1641311.172 ops/s
Iteration   8: 1643439.414 ops/s
Iteration   9: 1642899.752 ops/s
Iteration  10: 1645281.533 ops/s
Iteration  11: 1639799.991 ops/s
Iteration  12: 1637239.788 ops/s
Iteration  13: 1640213.321 ops/s
Iteration  14: 1639100.740 ops/s
Iteration  15: 1639545.345 ops/s
Iteration  16: 1641233.353 ops/s
Iteration  17: 1640147.528 ops/s
Iteration  18: 1635909.094 ops/s
Iteration  19: 1640606.534 ops/s
Iteration  20: 1644376.286 ops/s
Iteration  21: 1642604.380 ops/s
Iteration  22: 1634717.327 ops/s
Iteration  23: 1641463.202 ops/s
Iteration  24: 1637765.977 ops/s
Iteration  25: 1642537.083 ops/s
Iteration  26: 1642781.862 ops/s
Iteration  27: 1641707.997 ops/s
Iteration  28: 1643587.575 ops/s
Iteration  29: 1640336.890 ops/s
Iteration  30: 1640648.632 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectDoubleWithTarget":
  1640767.531 ±(99.9%) 1682.314 ops/s [Average]
  (min, avg, max) = (1634717.327, 1640767.531, 1645340.096), stdev = 2518.009
  CI (99.9%): [1639085.216, 1642449.845] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  1640767.531 ± 1682.314  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 381766.501 ops/s
# Warmup Iteration   2: 743176.809 ops/s
# Warmup Iteration   3: 800433.667 ops/s
# Warmup Iteration   4: 803468.261 ops/s
# Warmup Iteration   5: 682276.221 ops/s
# Warmup Iteration   6: 806049.921 ops/s
# Warmup Iteration   7: 805725.739 ops/s
# Warmup Iteration   8: 806010.257 ops/s
# Warmup Iteration   9: 806381.476 ops/s
# Warmup Iteration  10: 803530.363 ops/s
# Warmup Iteration  11: 804047.417 ops/s
# Warmup Iteration  12: 806213.679 ops/s
# Warmup Iteration  13: 806171.057 ops/s
# Warmup Iteration  14: 805228.844 ops/s
# Warmup Iteration  15: 805289.123 ops/s
# Warmup Iteration  16: 806474.400 ops/s
# Warmup Iteration  17: 799399.805 ops/s
# Warmup Iteration  18: 802840.239 ops/s
# Warmup Iteration  19: 800310.229 ops/s
# Warmup Iteration  20: 801232.604 ops/s
# Warmup Iteration  21: 801038.783 ops/s
# Warmup Iteration  22: 801384.077 ops/s
# Warmup Iteration  23: 801619.285 ops/s
# Warmup Iteration  24: 799526.141 ops/s
# Warmup Iteration  25: 801734.045 ops/s
# Warmup Iteration  26: 800417.230 ops/s
# Warmup Iteration  27: 800282.613 ops/s
# Warmup Iteration  28: 801401.459 ops/s
# Warmup Iteration  29: 801874.952 ops/s
# Warmup Iteration  30: 800949.295 ops/s
Iteration   1: 802689.546 ops/s
Iteration   2: 801172.456 ops/s
Iteration   3: 800622.417 ops/s
Iteration   4: 803194.441 ops/s
Iteration   5: 801360.120 ops/s
Iteration   6: 801183.383 ops/s
Iteration   7: 803129.392 ops/s
Iteration   8: 801525.850 ops/s
Iteration   9: 800953.671 ops/s
Iteration  10: 802905.900 ops/s
Iteration  11: 801371.004 ops/s
Iteration  12: 802208.255 ops/s
Iteration  13: 802598.990 ops/s
Iteration  14: 801388.751 ops/s
Iteration  15: 798429.987 ops/s
Iteration  16: 802509.429 ops/s
Iteration  17: 802647.589 ops/s
Iteration  18: 803633.221 ops/s
Iteration  19: 801795.907 ops/s
Iteration  20: 801533.089 ops/s
Iteration  21: 803024.151 ops/s
Iteration  22: 801931.529 ops/s
Iteration  23: 801550.410 ops/s
Iteration  24: 802818.845 ops/s
Iteration  25: 800489.513 ops/s
Iteration  26: 800138.963 ops/s
Iteration  27: 801557.853 ops/s
Iteration  28: 799570.570 ops/s
Iteration  29: 799184.206 ops/s
Iteration  30: 803259.049 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectFloat":
  801679.283 ±(99.9%) 847.796 ops/s [Average]
  (min, avg, max) = (798429.987, 801679.283, 803633.221), stdev = 1268.942
  CI (99.9%): [800831.486, 802527.079] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectFloat  thrpt   30  801679.283 ± 847.796  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectFloatWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectFloatWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 938538.700 ops/s
# Warmup Iteration   2: 2261751.906 ops/s
# Warmup Iteration   3: 2308868.973 ops/s
# Warmup Iteration   4: 1931419.496 ops/s
# Warmup Iteration   5: 2307119.640 ops/s
# Warmup Iteration   6: 2312476.676 ops/s
# Warmup Iteration   7: 2307728.048 ops/s
# Warmup Iteration   8: 2310416.034 ops/s
# Warmup Iteration   9: 2309714.076 ops/s
# Warmup Iteration  10: 2311943.018 ops/s
# Warmup Iteration  11: 2309017.403 ops/s
# Warmup Iteration  12: 2305461.090 ops/s
# Warmup Iteration  13: 2276910.075 ops/s
# Warmup Iteration  14: 2296104.713 ops/s
# Warmup Iteration  15: 2310729.956 ops/s
# Warmup Iteration  16: 2306410.087 ops/s
# Warmup Iteration  17: 2300018.769 ops/s
# Warmup Iteration  18: 2301783.772 ops/s
# Warmup Iteration  19: 2302318.504 ops/s
# Warmup Iteration  20: 2301184.723 ops/s
# Warmup Iteration  21: 2299106.269 ops/s
# Warmup Iteration  22: 2302403.178 ops/s
# Warmup Iteration  23: 2301771.380 ops/s
# Warmup Iteration  24: 2301872.481 ops/s
# Warmup Iteration  25: 2303375.740 ops/s
# Warmup Iteration  26: 2300932.600 ops/s
# Warmup Iteration  27: 2303091.189 ops/s
# Warmup Iteration  28: 2302068.945 ops/s
# Warmup Iteration  29: 2298991.453 ops/s
# Warmup Iteration  30: 2301762.614 ops/s
Iteration   1: 2300474.328 ops/s
Iteration   2: 2302118.376 ops/s
Iteration   3: 2302652.990 ops/s
Iteration   4: 2298033.292 ops/s
Iteration   5: 2301767.608 ops/s
Iteration   6: 2291806.965 ops/s
Iteration   7: 2284498.031 ops/s
Iteration   8: 2287744.820 ops/s
Iteration   9: 2285756.157 ops/s
Iteration  10: 2301642.166 ops/s
Iteration  11: 2304312.916 ops/s
Iteration  12: 2301568.619 ops/s
Iteration  13: 2301920.870 ops/s
Iteration  14: 2299674.590 ops/s
Iteration  15: 2302813.868 ops/s
Iteration  16: 2303741.759 ops/s
Iteration  17: 2299978.628 ops/s
Iteration  18: 2299417.653 ops/s
Iteration  19: 2305586.198 ops/s
Iteration  20: 2297928.645 ops/s
Iteration  21: 2297210.166 ops/s
Iteration  22: 2297992.768 ops/s
Iteration  23: 2301914.710 ops/s
Iteration  24: 2299399.735 ops/s
Iteration  25: 2300418.642 ops/s
Iteration  26: 2301714.934 ops/s
Iteration  27: 2301025.897 ops/s
Iteration  28: 2305958.377 ops/s
Iteration  29: 2297964.924 ops/s
Iteration  30: 2298908.244 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectFloatWithBagTarget":
  2299198.229 ±(99.9%) 3522.504 ops/s [Average]
  (min, avg, max) = (2284498.031, 2299198.229, 2305958.377), stdev = 5272.319
  CI (99.9%): [2295675.725, 2302720.733] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectFloatWithBagTarget  thrpt   30  2299198.229 ± 3522.504  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 783243.415 ops/s
# Warmup Iteration   2: 1738379.714 ops/s
# Warmup Iteration   3: 1820996.197 ops/s
# Warmup Iteration   4: 1791737.401 ops/s
# Warmup Iteration   5: 1558610.752 ops/s
# Warmup Iteration   6: 1825369.696 ops/s
# Warmup Iteration   7: 1822529.439 ops/s
# Warmup Iteration   8: 1821670.947 ops/s
# Warmup Iteration   9: 1820527.430 ops/s
# Warmup Iteration  10: 1824265.664 ops/s
# Warmup Iteration  11: 1820033.676 ops/s
# Warmup Iteration  12: 1819290.910 ops/s
# Warmup Iteration  13: 1823243.172 ops/s
# Warmup Iteration  14: 1820652.542 ops/s
# Warmup Iteration  15: 1821458.997 ops/s
# Warmup Iteration  16: 1820656.249 ops/s
# Warmup Iteration  17: 1819696.046 ops/s
# Warmup Iteration  18: 1814177.115 ops/s
# Warmup Iteration  19: 1817490.706 ops/s
# Warmup Iteration  20: 1812268.230 ops/s
# Warmup Iteration  21: 1821588.793 ops/s
# Warmup Iteration  22: 1818331.270 ops/s
# Warmup Iteration  23: 1820818.310 ops/s
# Warmup Iteration  24: 1822398.576 ops/s
# Warmup Iteration  25: 1819242.194 ops/s
# Warmup Iteration  26: 1820801.879 ops/s
# Warmup Iteration  27: 1814136.757 ops/s
# Warmup Iteration  28: 1820339.332 ops/s
# Warmup Iteration  29: 1819995.175 ops/s
# Warmup Iteration  30: 1821249.545 ops/s
Iteration   1: 1820041.726 ops/s
Iteration   2: 1820013.102 ops/s
Iteration   3: 1820620.420 ops/s
Iteration   4: 1815190.466 ops/s
Iteration   5: 1803218.097 ops/s
Iteration   6: 1815958.299 ops/s
Iteration   7: 1823450.405 ops/s
Iteration   8: 1815829.412 ops/s
Iteration   9: 1821605.360 ops/s
Iteration  10: 1820870.821 ops/s
Iteration  11: 1822041.973 ops/s
Iteration  12: 1816099.340 ops/s
Iteration  13: 1816766.053 ops/s
Iteration  14: 1814141.320 ops/s
Iteration  15: 1817465.302 ops/s
Iteration  16: 1818095.799 ops/s
Iteration  17: 1817295.019 ops/s
Iteration  18: 1823889.614 ops/s
Iteration  19: 1819851.603 ops/s
Iteration  20: 1819572.925 ops/s
Iteration  21: 1818575.543 ops/s
Iteration  22: 1817161.913 ops/s
Iteration  23: 1816819.540 ops/s
Iteration  24: 1820523.616 ops/s
Iteration  25: 1820824.952 ops/s
Iteration  26: 1825768.933 ops/s
Iteration  27: 1812484.564 ops/s
Iteration  28: 1819909.389 ops/s
Iteration  29: 1820125.939 ops/s
Iteration  30: 1822416.295 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectFloatWithTarget":
  1818554.258 ±(99.9%) 2788.198 ops/s [Average]
  (min, avg, max) = (1803218.097, 1818554.258, 1825768.933), stdev = 4173.243
  CI (99.9%): [1815766.060, 1821342.456] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  1818554.258 ± 2788.198  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 323359.621 ops/s
# Warmup Iteration   2: 610633.538 ops/s
# Warmup Iteration   3: 682771.658 ops/s
# Warmup Iteration   4: 684294.749 ops/s
# Warmup Iteration   5: 656099.786 ops/s
# Warmup Iteration   6: 605380.309 ops/s
# Warmup Iteration   7: 683056.754 ops/s
# Warmup Iteration   8: 685267.106 ops/s
# Warmup Iteration   9: 684809.236 ops/s
# Warmup Iteration  10: 683786.936 ops/s
# Warmup Iteration  11: 682059.451 ops/s
# Warmup Iteration  12: 682456.150 ops/s
# Warmup Iteration  13: 685214.257 ops/s
# Warmup Iteration  14: 685034.719 ops/s
# Warmup Iteration  15: 685355.693 ops/s
# Warmup Iteration  16: 684122.907 ops/s
# Warmup Iteration  17: 683497.512 ops/s
# Warmup Iteration  18: 684332.973 ops/s
# Warmup Iteration  19: 684067.875 ops/s
# Warmup Iteration  20: 682707.625 ops/s
# Warmup Iteration  21: 684065.791 ops/s
# Warmup Iteration  22: 684857.436 ops/s
# Warmup Iteration  23: 684574.923 ops/s
# Warmup Iteration  24: 684611.299 ops/s
# Warmup Iteration  25: 682929.863 ops/s
# Warmup Iteration  26: 683844.186 ops/s
# Warmup Iteration  27: 683656.980 ops/s
# Warmup Iteration  28: 683190.585 ops/s
# Warmup Iteration  29: 683617.016 ops/s
# Warmup Iteration  30: 682199.516 ops/s
Iteration   1: 684343.357 ops/s
Iteration   2: 682759.127 ops/s
Iteration   3: 683864.806 ops/s
Iteration   4: 681383.170 ops/s
Iteration   5: 681906.255 ops/s
Iteration   6: 685380.191 ops/s
Iteration   7: 684262.499 ops/s
Iteration   8: 683586.029 ops/s
Iteration   9: 683177.160 ops/s
Iteration  10: 683718.480 ops/s
Iteration  11: 684432.119 ops/s
Iteration  12: 683893.318 ops/s
Iteration  13: 685322.164 ops/s
Iteration  14: 683810.354 ops/s
Iteration  15: 682637.678 ops/s
Iteration  16: 684229.481 ops/s
Iteration  17: 683676.942 ops/s
Iteration  18: 683795.536 ops/s
Iteration  19: 685272.420 ops/s
Iteration  20: 683092.221 ops/s
Iteration  21: 685015.874 ops/s
Iteration  22: 682337.312 ops/s
Iteration  23: 684177.922 ops/s
Iteration  24: 683237.307 ops/s
Iteration  25: 682676.454 ops/s
Iteration  26: 685176.401 ops/s
Iteration  27: 685033.924 ops/s
Iteration  28: 683444.920 ops/s
Iteration  29: 685430.343 ops/s
Iteration  30: 684007.758 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectIf":
  683836.051 ±(99.9%) 706.752 ops/s [Average]
  (min, avg, max) = (681383.170, 683836.051, 685430.343), stdev = 1057.834
  CI (99.9%): [683129.298, 684542.803] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectIf  thrpt   30  683836.051 ± 706.752  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 397334.210 ops/s
# Warmup Iteration   2: 749722.300 ops/s
# Warmup Iteration   3: 812364.943 ops/s
# Warmup Iteration   4: 818431.068 ops/s
# Warmup Iteration   5: 739566.749 ops/s
# Warmup Iteration   6: 759175.757 ops/s
# Warmup Iteration   7: 817288.990 ops/s
# Warmup Iteration   8: 817330.983 ops/s
# Warmup Iteration   9: 819927.738 ops/s
# Warmup Iteration  10: 817412.900 ops/s
# Warmup Iteration  11: 816923.757 ops/s
# Warmup Iteration  12: 817156.343 ops/s
# Warmup Iteration  13: 818386.974 ops/s
# Warmup Iteration  14: 816469.263 ops/s
# Warmup Iteration  15: 817895.429 ops/s
# Warmup Iteration  16: 821213.931 ops/s
# Warmup Iteration  17: 819786.297 ops/s
# Warmup Iteration  18: 818794.647 ops/s
# Warmup Iteration  19: 819904.664 ops/s
# Warmup Iteration  20: 818160.534 ops/s
# Warmup Iteration  21: 816946.650 ops/s
# Warmup Iteration  22: 819808.212 ops/s
# Warmup Iteration  23: 818292.603 ops/s
# Warmup Iteration  24: 818220.960 ops/s
# Warmup Iteration  25: 820449.113 ops/s
# Warmup Iteration  26: 819790.980 ops/s
# Warmup Iteration  27: 819293.162 ops/s
# Warmup Iteration  28: 816752.069 ops/s
# Warmup Iteration  29: 817383.047 ops/s
# Warmup Iteration  30: 820022.282 ops/s
Iteration   1: 816102.254 ops/s
Iteration   2: 818836.449 ops/s
Iteration   3: 821750.261 ops/s
Iteration   4: 821710.469 ops/s
Iteration   5: 819173.613 ops/s
Iteration   6: 818284.051 ops/s
Iteration   7: 817699.134 ops/s
Iteration   8: 818839.896 ops/s
Iteration   9: 818049.116 ops/s
Iteration  10: 817971.688 ops/s
Iteration  11: 818869.427 ops/s
Iteration  12: 816313.247 ops/s
Iteration  13: 818790.264 ops/s
Iteration  14: 820255.857 ops/s
Iteration  15: 816247.832 ops/s
Iteration  16: 818137.995 ops/s
Iteration  17: 815160.585 ops/s
Iteration  18: 816887.158 ops/s
Iteration  19: 817286.927 ops/s
Iteration  20: 817066.446 ops/s
Iteration  21: 818524.111 ops/s
Iteration  22: 820008.400 ops/s
Iteration  23: 819900.933 ops/s
Iteration  24: 819338.880 ops/s
Iteration  25: 820767.964 ops/s
Iteration  26: 821290.122 ops/s
Iteration  27: 822292.376 ops/s
Iteration  28: 819840.919 ops/s
Iteration  29: 821958.562 ops/s
Iteration  30: 822176.641 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectInt":
  818984.386 ±(99.9%) 1310.246 ops/s [Average]
  (min, avg, max) = (815160.585, 818984.386, 822292.376), stdev = 1961.115
  CI (99.9%): [817674.140, 820294.632] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectInt  thrpt   30  818984.386 ± 1310.246  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectIntWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectIntWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 970433.522 ops/s
# Warmup Iteration   2: 2371925.760 ops/s
# Warmup Iteration   3: 2405797.533 ops/s
# Warmup Iteration   4: 2010928.840 ops/s
# Warmup Iteration   5: 2414887.961 ops/s
# Warmup Iteration   6: 2417330.121 ops/s
# Warmup Iteration   7: 2413755.880 ops/s
# Warmup Iteration   8: 2414688.506 ops/s
# Warmup Iteration   9: 2409480.978 ops/s
# Warmup Iteration  10: 2413774.999 ops/s
# Warmup Iteration  11: 2415376.746 ops/s
# Warmup Iteration  12: 2414704.739 ops/s
# Warmup Iteration  13: 2406748.515 ops/s
# Warmup Iteration  14: 2414911.841 ops/s
# Warmup Iteration  15: 2411468.124 ops/s
# Warmup Iteration  16: 2416966.143 ops/s
# Warmup Iteration  17: 2414359.531 ops/s
# Warmup Iteration  18: 2413446.533 ops/s
# Warmup Iteration  19: 2410801.275 ops/s
# Warmup Iteration  20: 2410845.278 ops/s
# Warmup Iteration  21: 2419876.534 ops/s
# Warmup Iteration  22: 2418446.670 ops/s
# Warmup Iteration  23: 2408008.765 ops/s
# Warmup Iteration  24: 2416796.830 ops/s
# Warmup Iteration  25: 2414838.783 ops/s
# Warmup Iteration  26: 2417180.557 ops/s
# Warmup Iteration  27: 2416307.843 ops/s
# Warmup Iteration  28: 2418081.745 ops/s
# Warmup Iteration  29: 2415885.620 ops/s
# Warmup Iteration  30: 2414485.916 ops/s
Iteration   1: 2420403.556 ops/s
Iteration   2: 2391348.135 ops/s
Iteration   3: 2418481.821 ops/s
Iteration   4: 2415473.263 ops/s
Iteration   5: 2425921.629 ops/s
Iteration   6: 2416276.885 ops/s
Iteration   7: 2420427.504 ops/s
Iteration   8: 2416302.616 ops/s
Iteration   9: 2419240.034 ops/s
Iteration  10: 2418939.246 ops/s
Iteration  11: 2414976.394 ops/s
Iteration  12: 2388582.965 ops/s
Iteration  13: 2403242.071 ops/s
Iteration  14: 2416693.110 ops/s
Iteration  15: 2417652.749 ops/s
Iteration  16: 2401725.503 ops/s
Iteration  17: 2406507.681 ops/s
Iteration  18: 2411638.744 ops/s
Iteration  19: 2413938.702 ops/s
Iteration  20: 2412636.723 ops/s
Iteration  21: 2416900.185 ops/s
Iteration  22: 2414172.967 ops/s
Iteration  23: 2418174.733 ops/s
Iteration  24: 2419595.446 ops/s
Iteration  25: 2415668.497 ops/s
Iteration  26: 2416860.948 ops/s
Iteration  27: 2408910.901 ops/s
Iteration  28: 2412777.869 ops/s
Iteration  29: 2417983.262 ops/s
Iteration  30: 2414498.698 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectIntWithBagTarget":
  2413531.761 ±(99.9%) 5443.023 ops/s [Average]
  (min, avg, max) = (2388582.965, 2413531.761, 2425921.629), stdev = 8146.861
  CI (99.9%): [2408088.738, 2418974.784] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectIntWithBagTarget  thrpt   30  2413531.761 ± 5443.023  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 839288.871 ops/s
# Warmup Iteration   2: 1924718.505 ops/s
# Warmup Iteration   3: 2018155.231 ops/s
# Warmup Iteration   4: 1780258.874 ops/s
# Warmup Iteration   5: 1923401.733 ops/s
# Warmup Iteration   6: 2018549.287 ops/s
# Warmup Iteration   7: 2021701.623 ops/s
# Warmup Iteration   8: 2018577.681 ops/s
# Warmup Iteration   9: 2019362.139 ops/s
# Warmup Iteration  10: 2021220.034 ops/s
# Warmup Iteration  11: 2019830.852 ops/s
# Warmup Iteration  12: 2017857.773 ops/s
# Warmup Iteration  13: 2020376.307 ops/s
# Warmup Iteration  14: 2018084.847 ops/s
# Warmup Iteration  15: 2018194.420 ops/s
# Warmup Iteration  16: 2021350.234 ops/s
# Warmup Iteration  17: 2022840.356 ops/s
# Warmup Iteration  18: 2021007.510 ops/s
# Warmup Iteration  19: 2022539.667 ops/s
# Warmup Iteration  20: 2023101.985 ops/s
# Warmup Iteration  21: 2023534.055 ops/s
# Warmup Iteration  22: 2021001.421 ops/s
# Warmup Iteration  23: 2020756.733 ops/s
# Warmup Iteration  24: 2016517.234 ops/s
# Warmup Iteration  25: 2020014.356 ops/s
# Warmup Iteration  26: 2020459.909 ops/s
# Warmup Iteration  27: 2023203.227 ops/s
# Warmup Iteration  28: 2021577.740 ops/s
# Warmup Iteration  29: 2022893.789 ops/s
# Warmup Iteration  30: 2025584.352 ops/s
Iteration   1: 2019076.701 ops/s
Iteration   2: 2014898.343 ops/s
Iteration   3: 2019006.188 ops/s
Iteration   4: 2021687.690 ops/s
Iteration   5: 2023136.814 ops/s
Iteration   6: 2017773.721 ops/s
Iteration   7: 2021845.255 ops/s
Iteration   8: 2021850.574 ops/s
Iteration   9: 2024024.665 ops/s
Iteration  10: 2023471.923 ops/s
Iteration  11: 2025466.986 ops/s
Iteration  12: 2023919.304 ops/s
Iteration  13: 2017212.804 ops/s
Iteration  14: 2022615.600 ops/s
Iteration  15: 2021853.148 ops/s
Iteration  16: 2023715.940 ops/s
Iteration  17: 2026911.091 ops/s
Iteration  18: 2020899.200 ops/s
Iteration  19: 2013558.179 ops/s
Iteration  20: 2020079.748 ops/s
Iteration  21: 2020000.301 ops/s
Iteration  22: 2023101.118 ops/s
Iteration  23: 2022708.855 ops/s
Iteration  24: 2018425.075 ops/s
Iteration  25: 2021597.824 ops/s
Iteration  26: 2018133.627 ops/s
Iteration  27: 2018994.632 ops/s
Iteration  28: 2021425.638 ops/s
Iteration  29: 2020203.592 ops/s
Iteration  30: 2009273.776 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectIntWithTarget":
  2020562.277 ±(99.9%) 2424.497 ops/s [Average]
  (min, avg, max) = (2009273.776, 2020562.277, 2026911.091), stdev = 3628.873
  CI (99.9%): [2018137.780, 2022986.773] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  2020562.277 ± 2424.497  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 361911.381 ops/s
# Warmup Iteration   2: 794640.240 ops/s
# Warmup Iteration   3: 821546.746 ops/s
# Warmup Iteration   4: 773165.079 ops/s
# Warmup Iteration   5: 749643.886 ops/s
# Warmup Iteration   6: 824495.761 ops/s
# Warmup Iteration   7: 822765.642 ops/s
# Warmup Iteration   8: 820105.706 ops/s
# Warmup Iteration   9: 822849.701 ops/s
# Warmup Iteration  10: 823078.290 ops/s
# Warmup Iteration  11: 822714.647 ops/s
# Warmup Iteration  12: 821347.219 ops/s
# Warmup Iteration  13: 823537.181 ops/s
# Warmup Iteration  14: 821370.187 ops/s
# Warmup Iteration  15: 815923.622 ops/s
# Warmup Iteration  16: 822244.770 ops/s
# Warmup Iteration  17: 823504.938 ops/s
# Warmup Iteration  18: 822478.883 ops/s
# Warmup Iteration  19: 824186.811 ops/s
# Warmup Iteration  20: 822641.298 ops/s
# Warmup Iteration  21: 823284.353 ops/s
# Warmup Iteration  22: 820958.557 ops/s
# Warmup Iteration  23: 821424.852 ops/s
# Warmup Iteration  24: 821408.273 ops/s
# Warmup Iteration  25: 822617.446 ops/s
# Warmup Iteration  26: 819720.836 ops/s
# Warmup Iteration  27: 819793.939 ops/s
# Warmup Iteration  28: 820686.365 ops/s
# Warmup Iteration  29: 823390.677 ops/s
# Warmup Iteration  30: 819644.941 ops/s
Iteration   1: 821967.828 ops/s
Iteration   2: 822323.979 ops/s
Iteration   3: 820420.390 ops/s
Iteration   4: 820793.155 ops/s
Iteration   5: 821165.502 ops/s
Iteration   6: 822604.939 ops/s
Iteration   7: 819975.129 ops/s
Iteration   8: 818091.804 ops/s
Iteration   9: 820203.818 ops/s
Iteration  10: 821374.427 ops/s
Iteration  11: 820734.654 ops/s
Iteration  12: 821860.268 ops/s
Iteration  13: 820610.799 ops/s
Iteration  14: 823010.605 ops/s
Iteration  15: 821166.431 ops/s
Iteration  16: 822452.701 ops/s
Iteration  17: 821885.791 ops/s
Iteration  18: 823518.487 ops/s
Iteration  19: 821788.036 ops/s
Iteration  20: 821324.539 ops/s
Iteration  21: 821382.437 ops/s
Iteration  22: 821343.739 ops/s
Iteration  23: 820093.939 ops/s
Iteration  24: 817146.430 ops/s
Iteration  25: 815503.289 ops/s
Iteration  26: 817728.293 ops/s
Iteration  27: 818069.756 ops/s
Iteration  28: 819701.339 ops/s
Iteration  29: 817530.316 ops/s
Iteration  30: 819416.930 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectLong":
  820506.325 ±(99.9%) 1273.164 ops/s [Average]
  (min, avg, max) = (815503.289, 820506.325, 823518.487), stdev = 1905.612
  CI (99.9%): [819233.161, 821779.489] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectLong  thrpt   30  820506.325 ± 1273.164  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectLongWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectLongWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 896526.825 ops/s
# Warmup Iteration   2: 2329868.811 ops/s
# Warmup Iteration   3: 2320316.205 ops/s
# Warmup Iteration   4: 1948473.380 ops/s
# Warmup Iteration   5: 2320344.736 ops/s
# Warmup Iteration   6: 2327901.537 ops/s
# Warmup Iteration   7: 2326524.902 ops/s
# Warmup Iteration   8: 2330933.079 ops/s
# Warmup Iteration   9: 2330891.377 ops/s
# Warmup Iteration  10: 2328524.204 ops/s
# Warmup Iteration  11: 2327141.776 ops/s
# Warmup Iteration  12: 2329631.908 ops/s
# Warmup Iteration  13: 2328209.323 ops/s
# Warmup Iteration  14: 2332703.349 ops/s
# Warmup Iteration  15: 2329292.827 ops/s
# Warmup Iteration  16: 2332049.234 ops/s
# Warmup Iteration  17: 2307407.948 ops/s
# Warmup Iteration  18: 2325508.425 ops/s
# Warmup Iteration  19: 2326248.006 ops/s
# Warmup Iteration  20: 2326035.333 ops/s
# Warmup Iteration  21: 2326713.268 ops/s
# Warmup Iteration  22: 2326038.925 ops/s
# Warmup Iteration  23: 2318462.100 ops/s
# Warmup Iteration  24: 2326820.873 ops/s
# Warmup Iteration  25: 2314907.657 ops/s
# Warmup Iteration  26: 2305478.410 ops/s
# Warmup Iteration  27: 2325517.462 ops/s
# Warmup Iteration  28: 2324627.320 ops/s
# Warmup Iteration  29: 2326644.296 ops/s
# Warmup Iteration  30: 2313499.457 ops/s
Iteration   1: 2315377.893 ops/s
Iteration   2: 2318030.341 ops/s
Iteration   3: 2327762.509 ops/s
Iteration   4: 2330963.430 ops/s
Iteration   5: 2329701.502 ops/s
Iteration   6: 2327281.756 ops/s
Iteration   7: 2329287.093 ops/s
Iteration   8: 2326322.709 ops/s
Iteration   9: 2325145.171 ops/s
Iteration  10: 2323590.339 ops/s
Iteration  11: 2327445.310 ops/s
Iteration  12: 2324969.982 ops/s
Iteration  13: 2326283.341 ops/s
Iteration  14: 2322807.097 ops/s
Iteration  15: 2324167.485 ops/s
Iteration  16: 2329710.527 ops/s
Iteration  17: 2326683.551 ops/s
Iteration  18: 2326640.342 ops/s
Iteration  19: 2329509.825 ops/s
Iteration  20: 2326361.115 ops/s
Iteration  21: 2328864.329 ops/s
Iteration  22: 2327600.564 ops/s
Iteration  23: 2325345.081 ops/s
Iteration  24: 2325337.061 ops/s
Iteration  25: 2328135.530 ops/s
Iteration  26: 2320545.435 ops/s
Iteration  27: 2319538.868 ops/s
Iteration  28: 2318760.260 ops/s
Iteration  29: 2324837.331 ops/s
Iteration  30: 2326205.035 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectLongWithBagTarget":
  2325440.360 ±(99.9%) 2520.880 ops/s [Average]
  (min, avg, max) = (2315377.893, 2325440.360, 2330963.430), stdev = 3773.135
  CI (99.9%): [2322919.480, 2327961.240] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectLongWithBagTarget  thrpt   30  2325440.360 ± 2520.880  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 731510.917 ops/s
# Warmup Iteration   2: 1827027.308 ops/s
# Warmup Iteration   3: 1845136.927 ops/s
# Warmup Iteration   4: 1551715.795 ops/s
# Warmup Iteration   5: 1856623.429 ops/s
# Warmup Iteration   6: 1850931.189 ops/s
# Warmup Iteration   7: 1856335.899 ops/s
# Warmup Iteration   8: 1848494.019 ops/s
# Warmup Iteration   9: 1847038.223 ops/s
# Warmup Iteration  10: 1857728.778 ops/s
# Warmup Iteration  11: 1856820.489 ops/s
# Warmup Iteration  12: 1855686.116 ops/s
# Warmup Iteration  13: 1853288.223 ops/s
# Warmup Iteration  14: 1855847.383 ops/s
# Warmup Iteration  15: 1858665.220 ops/s
# Warmup Iteration  16: 1856003.525 ops/s
# Warmup Iteration  17: 1855415.349 ops/s
# Warmup Iteration  18: 1854733.901 ops/s
# Warmup Iteration  19: 1854828.349 ops/s
# Warmup Iteration  20: 1853154.235 ops/s
# Warmup Iteration  21: 1853118.654 ops/s
# Warmup Iteration  22: 1858086.230 ops/s
# Warmup Iteration  23: 1857448.464 ops/s
# Warmup Iteration  24: 1854420.619 ops/s
# Warmup Iteration  25: 1855250.549 ops/s
# Warmup Iteration  26: 1835597.185 ops/s
# Warmup Iteration  27: 1856325.186 ops/s
# Warmup Iteration  28: 1855057.454 ops/s
# Warmup Iteration  29: 1846532.336 ops/s
# Warmup Iteration  30: 1854728.868 ops/s
Iteration   1: 1854801.151 ops/s
Iteration   2: 1859006.968 ops/s
Iteration   3: 1858776.332 ops/s
Iteration   4: 1857729.681 ops/s
Iteration   5: 1851590.983 ops/s
Iteration   6: 1853097.154 ops/s
Iteration   7: 1853776.454 ops/s
Iteration   8: 1855729.277 ops/s
Iteration   9: 1856805.231 ops/s
Iteration  10: 1861185.973 ops/s
Iteration  11: 1858565.502 ops/s
Iteration  12: 1859925.264 ops/s
Iteration  13: 1850976.758 ops/s
Iteration  14: 1857938.970 ops/s
Iteration  15: 1858546.401 ops/s
Iteration  16: 1843915.246 ops/s
Iteration  17: 1844536.574 ops/s
Iteration  18: 1857980.406 ops/s
Iteration  19: 1855853.324 ops/s
Iteration  20: 1854252.654 ops/s
Iteration  21: 1857849.464 ops/s
Iteration  22: 1854522.859 ops/s
Iteration  23: 1859100.316 ops/s
Iteration  24: 1855039.762 ops/s
Iteration  25: 1850440.185 ops/s
Iteration  26: 1848419.196 ops/s
Iteration  27: 1853418.817 ops/s
Iteration  28: 1858015.037 ops/s
Iteration  29: 1856007.708 ops/s
Iteration  30: 1856244.295 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectLongWithTarget":
  1855134.931 ±(99.9%) 2819.231 ops/s [Average]
  (min, avg, max) = (1843915.246, 1855134.931, 1861185.973), stdev = 4219.692
  CI (99.9%): [1852315.700, 1857954.162] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  1855134.931 ± 2819.231  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 416295.442 ops/s
# Warmup Iteration   2: 820925.852 ops/s
# Warmup Iteration   3: 881891.666 ops/s
# Warmup Iteration   4: 889720.089 ops/s
# Warmup Iteration   5: 755332.888 ops/s
# Warmup Iteration   6: 891761.646 ops/s
# Warmup Iteration   7: 892165.822 ops/s
# Warmup Iteration   8: 893335.324 ops/s
# Warmup Iteration   9: 891136.983 ops/s
# Warmup Iteration  10: 892336.414 ops/s
# Warmup Iteration  11: 890064.035 ops/s
# Warmup Iteration  12: 889431.915 ops/s
# Warmup Iteration  13: 889706.040 ops/s
# Warmup Iteration  14: 886175.355 ops/s
# Warmup Iteration  15: 885764.603 ops/s
# Warmup Iteration  16: 888318.360 ops/s
# Warmup Iteration  17: 891182.776 ops/s
# Warmup Iteration  18: 890750.658 ops/s
# Warmup Iteration  19: 887527.141 ops/s
# Warmup Iteration  20: 888697.065 ops/s
# Warmup Iteration  21: 886627.338 ops/s
# Warmup Iteration  22: 890307.764 ops/s
# Warmup Iteration  23: 889601.612 ops/s
# Warmup Iteration  24: 890137.553 ops/s
# Warmup Iteration  25: 888381.577 ops/s
# Warmup Iteration  26: 890138.498 ops/s
# Warmup Iteration  27: 889093.816 ops/s
# Warmup Iteration  28: 890603.386 ops/s
# Warmup Iteration  29: 890263.151 ops/s
# Warmup Iteration  30: 889144.068 ops/s
Iteration   1: 888398.774 ops/s
Iteration   2: 888050.732 ops/s
Iteration   3: 892479.221 ops/s
Iteration   4: 890899.825 ops/s
Iteration   5: 889534.513 ops/s
Iteration   6: 890947.493 ops/s
Iteration   7: 891852.736 ops/s
Iteration   8: 891605.400 ops/s
Iteration   9: 893093.081 ops/s
Iteration  10: 890225.015 ops/s
Iteration  11: 888591.203 ops/s
Iteration  12: 892634.436 ops/s
Iteration  13: 893394.235 ops/s
Iteration  14: 889937.287 ops/s
Iteration  15: 890064.409 ops/s
Iteration  16: 893714.347 ops/s
Iteration  17: 886777.999 ops/s
Iteration  18: 890668.284 ops/s
Iteration  19: 890618.633 ops/s
Iteration  20: 891178.656 ops/s
Iteration  21: 890440.059 ops/s
Iteration  22: 880127.441 ops/s
Iteration  23: 886485.213 ops/s
Iteration  24: 888108.496 ops/s
Iteration  25: 890202.252 ops/s
Iteration  26: 889155.071 ops/s
Iteration  27: 888100.851 ops/s
Iteration  28: 889637.768 ops/s
Iteration  29: 886500.875 ops/s
Iteration  30: 890851.194 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectShort":
  889809.183 ±(99.9%) 1784.445 ops/s [Average]
  (min, avg, max) = (880127.441, 889809.183, 893714.347), stdev = 2670.874
  CI (99.9%): [888024.738, 891593.629] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectShort  thrpt   30  889809.183 ± 1784.445  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectShortWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectShortWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1001843.465 ops/s
# Warmup Iteration   2: 2593618.981 ops/s
# Warmup Iteration   3: 2611586.422 ops/s
# Warmup Iteration   4: 2184934.427 ops/s
# Warmup Iteration   5: 2601071.490 ops/s
# Warmup Iteration   6: 2601248.107 ops/s
# Warmup Iteration   7: 2598289.864 ops/s
# Warmup Iteration   8: 2599420.991 ops/s
# Warmup Iteration   9: 2572356.648 ops/s
# Warmup Iteration  10: 2594422.482 ops/s
# Warmup Iteration  11: 2604865.006 ops/s
# Warmup Iteration  12: 2600479.018 ops/s
# Warmup Iteration  13: 2590118.385 ops/s
# Warmup Iteration  14: 2592842.175 ops/s
# Warmup Iteration  15: 2599214.183 ops/s
# Warmup Iteration  16: 2597292.516 ops/s
# Warmup Iteration  17: 2588410.380 ops/s
# Warmup Iteration  18: 2601379.720 ops/s
# Warmup Iteration  19: 2594591.108 ops/s
# Warmup Iteration  20: 2595258.045 ops/s
# Warmup Iteration  21: 2590173.750 ops/s
# Warmup Iteration  22: 2594830.037 ops/s
# Warmup Iteration  23: 2570372.808 ops/s
# Warmup Iteration  24: 2595534.331 ops/s
# Warmup Iteration  25: 2598953.240 ops/s
# Warmup Iteration  26: 2586776.491 ops/s
# Warmup Iteration  27: 2603252.884 ops/s
# Warmup Iteration  28: 2601613.775 ops/s
# Warmup Iteration  29: 2601456.352 ops/s
# Warmup Iteration  30: 2601979.992 ops/s
Iteration   1: 2603812.506 ops/s
Iteration   2: 2600822.556 ops/s
Iteration   3: 2602228.638 ops/s
Iteration   4: 2600845.241 ops/s
Iteration   5: 2597812.242 ops/s
Iteration   6: 2599453.468 ops/s
Iteration   7: 2602411.196 ops/s
Iteration   8: 2602487.372 ops/s
Iteration   9: 2580978.265 ops/s
Iteration  10: 2573469.462 ops/s
Iteration  11: 2601298.294 ops/s
Iteration  12: 2596764.056 ops/s
Iteration  13: 2598794.096 ops/s
Iteration  14: 2599002.468 ops/s
Iteration  15: 2603506.179 ops/s
Iteration  16: 2606010.118 ops/s
Iteration  17: 2602266.921 ops/s
Iteration  18: 2600083.976 ops/s
Iteration  19: 2596860.889 ops/s
Iteration  20: 2602591.741 ops/s
Iteration  21: 2604332.743 ops/s
Iteration  22: 2601177.423 ops/s
Iteration  23: 2601365.457 ops/s
Iteration  24: 2605071.392 ops/s
Iteration  25: 2604737.855 ops/s
Iteration  26: 2600380.275 ops/s
Iteration  27: 2601801.990 ops/s
Iteration  28: 2604410.957 ops/s
Iteration  29: 2600052.155 ops/s
Iteration  30: 2597141.770 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectShortWithBagTarget":
  2599732.390 ±(99.9%) 4451.642 ops/s [Average]
  (min, avg, max) = (2573469.462, 2599732.390, 2606010.118), stdev = 6663.008
  CI (99.9%): [2595280.748, 2604184.032] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectShortWithBagTarget  thrpt   30  2599732.390 ± 4451.642  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 870502.437 ops/s
# Warmup Iteration   2: 1959304.453 ops/s
# Warmup Iteration   3: 2047503.097 ops/s
# Warmup Iteration   4: 1865140.439 ops/s
# Warmup Iteration   5: 1906991.180 ops/s
# Warmup Iteration   6: 2060645.445 ops/s
# Warmup Iteration   7: 2064416.927 ops/s
# Warmup Iteration   8: 2058452.105 ops/s
# Warmup Iteration   9: 2066196.893 ops/s
# Warmup Iteration  10: 2064156.980 ops/s
# Warmup Iteration  11: 2062286.226 ops/s
# Warmup Iteration  12: 2064106.987 ops/s
# Warmup Iteration  13: 2058864.614 ops/s
# Warmup Iteration  14: 2058210.917 ops/s
# Warmup Iteration  15: 2063797.164 ops/s
# Warmup Iteration  16: 2058989.480 ops/s
# Warmup Iteration  17: 2041282.834 ops/s
# Warmup Iteration  18: 2041017.034 ops/s
# Warmup Iteration  19: 2043100.402 ops/s
# Warmup Iteration  20: 2046483.556 ops/s
# Warmup Iteration  21: 2043467.547 ops/s
# Warmup Iteration  22: 2041916.890 ops/s
# Warmup Iteration  23: 2039693.466 ops/s
# Warmup Iteration  24: 2043904.870 ops/s
# Warmup Iteration  25: 2045471.271 ops/s
# Warmup Iteration  26: 2044635.675 ops/s
# Warmup Iteration  27: 2042928.370 ops/s
# Warmup Iteration  28: 2045641.892 ops/s
# Warmup Iteration  29: 2044283.241 ops/s
# Warmup Iteration  30: 2042709.181 ops/s
Iteration   1: 2043523.200 ops/s
Iteration   2: 2041361.772 ops/s
Iteration   3: 2044359.332 ops/s
Iteration   4: 2042826.316 ops/s
Iteration   5: 2046218.266 ops/s
Iteration   6: 2040193.603 ops/s
Iteration   7: 2041832.656 ops/s
Iteration   8: 2045031.743 ops/s
Iteration   9: 2041853.345 ops/s
Iteration  10: 2048623.161 ops/s
Iteration  11: 2042171.004 ops/s
Iteration  12: 2046515.686 ops/s
Iteration  13: 2041500.691 ops/s
Iteration  14: 2040978.839 ops/s
Iteration  15: 2045234.635 ops/s
Iteration  16: 2044849.269 ops/s
Iteration  17: 2042420.576 ops/s
Iteration  18: 2039921.631 ops/s
Iteration  19: 2037194.586 ops/s
Iteration  20: 2041561.750 ops/s
Iteration  21: 2047671.667 ops/s
Iteration  22: 2042890.288 ops/s
Iteration  23: 2045514.317 ops/s
Iteration  24: 2045345.776 ops/s
Iteration  25: 2042642.593 ops/s
Iteration  26: 2046900.204 ops/s
Iteration  27: 2042891.396 ops/s
Iteration  28: 2044423.702 ops/s
Iteration  29: 2043007.522 ops/s
Iteration  30: 2040504.231 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectShortWithTarget":
  2043332.125 ±(99.9%) 1704.850 ops/s [Average]
  (min, avg, max) = (2037194.586, 2043332.125, 2048623.161), stdev = 2551.740
  CI (99.9%): [2041627.275, 2045036.976] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  2043332.125 ± 1704.850  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 98569.445 ops/s
# Warmup Iteration   2: 166035.121 ops/s
# Warmup Iteration   3: 206120.984 ops/s
# Warmup Iteration   4: 204997.624 ops/s
# Warmup Iteration   5: 206558.516 ops/s
# Warmup Iteration   6: 206282.894 ops/s
# Warmup Iteration   7: 171903.377 ops/s
# Warmup Iteration   8: 206021.481 ops/s
# Warmup Iteration   9: 206430.083 ops/s
# Warmup Iteration  10: 206321.998 ops/s
# Warmup Iteration  11: 206398.879 ops/s
# Warmup Iteration  12: 206417.348 ops/s
# Warmup Iteration  13: 206390.067 ops/s
# Warmup Iteration  14: 206294.466 ops/s
# Warmup Iteration  15: 206453.378 ops/s
# Warmup Iteration  16: 206316.449 ops/s
# Warmup Iteration  17: 206632.280 ops/s
# Warmup Iteration  18: 206644.783 ops/s
# Warmup Iteration  19: 206612.172 ops/s
# Warmup Iteration  20: 206497.796 ops/s
# Warmup Iteration  21: 206463.492 ops/s
# Warmup Iteration  22: 206739.333 ops/s
# Warmup Iteration  23: 206547.600 ops/s
# Warmup Iteration  24: 206640.821 ops/s
# Warmup Iteration  25: 206075.799 ops/s
# Warmup Iteration  26: 206663.640 ops/s
# Warmup Iteration  27: 206502.414 ops/s
# Warmup Iteration  28: 206268.564 ops/s
# Warmup Iteration  29: 206442.493 ops/s
# Warmup Iteration  30: 206430.927 ops/s
Iteration   1: 206938.712 ops/s
Iteration   2: 206275.989 ops/s
Iteration   3: 206732.820 ops/s
Iteration   4: 206280.798 ops/s
Iteration   5: 206938.901 ops/s
Iteration   6: 205796.257 ops/s
Iteration   7: 206988.369 ops/s
Iteration   8: 206545.456 ops/s
Iteration   9: 206902.434 ops/s
Iteration  10: 206165.339 ops/s
Iteration  11: 206912.390 ops/s
Iteration  12: 206766.135 ops/s
Iteration  13: 206381.084 ops/s
Iteration  14: 206865.231 ops/s
Iteration  15: 206517.261 ops/s
Iteration  16: 206845.271 ops/s
Iteration  17: 206294.464 ops/s
Iteration  18: 206938.216 ops/s
Iteration  19: 206327.589 ops/s
Iteration  20: 206861.815 ops/s
Iteration  21: 206213.487 ops/s
Iteration  22: 206825.595 ops/s
Iteration  23: 206388.546 ops/s
Iteration  24: 206804.799 ops/s
Iteration  25: 206333.568 ops/s
Iteration  26: 206772.458 ops/s
Iteration  27: 206326.913 ops/s
Iteration  28: 206750.926 ops/s
Iteration  29: 206614.758 ops/s
Iteration  30: 206819.715 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectTarget":
  206604.177 ±(99.9%) 204.924 ops/s [Average]
  (min, avg, max) = (205796.257, 206604.177, 206988.369), stdev = 306.721
  CI (99.9%): [206399.252, 206809.101] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectTarget  thrpt   30  206604.177 ± 204.924  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 434227.791 ops/s
# Warmup Iteration   2: 780132.148 ops/s
# Warmup Iteration   3: 891282.092 ops/s
# Warmup Iteration   4: 895851.100 ops/s
# Warmup Iteration   5: 880853.604 ops/s
# Warmup Iteration   6: 749050.592 ops/s
# Warmup Iteration   7: 896248.467 ops/s
# Warmup Iteration   8: 896089.253 ops/s
# Warmup Iteration   9: 893757.195 ops/s
# Warmup Iteration  10: 896423.498 ops/s
# Warmup Iteration  11: 896185.900 ops/s
# Warmup Iteration  12: 896003.340 ops/s
# Warmup Iteration  13: 889660.876 ops/s
# Warmup Iteration  14: 892681.646 ops/s
# Warmup Iteration  15: 895366.809 ops/s
# Warmup Iteration  16: 895731.420 ops/s
# Warmup Iteration  17: 894868.450 ops/s
# Warmup Iteration  18: 895591.847 ops/s
# Warmup Iteration  19: 895104.660 ops/s
# Warmup Iteration  20: 894462.791 ops/s
# Warmup Iteration  21: 896830.628 ops/s
# Warmup Iteration  22: 895573.948 ops/s
# Warmup Iteration  23: 896576.009 ops/s
# Warmup Iteration  24: 895773.085 ops/s
# Warmup Iteration  25: 895771.650 ops/s
# Warmup Iteration  26: 895758.250 ops/s
# Warmup Iteration  27: 895099.819 ops/s
# Warmup Iteration  28: 897093.779 ops/s
# Warmup Iteration  29: 895791.796 ops/s
# Warmup Iteration  30: 896904.883 ops/s
Iteration   1: 897732.279 ops/s
Iteration   2: 895201.551 ops/s
Iteration   3: 896401.539 ops/s
Iteration   4: 893581.819 ops/s
Iteration   5: 895462.445 ops/s
Iteration   6: 897568.801 ops/s
Iteration   7: 895791.357 ops/s
Iteration   8: 897074.843 ops/s
Iteration   9: 894907.862 ops/s
Iteration  10: 895940.571 ops/s
Iteration  11: 898027.500 ops/s
Iteration  12: 896418.066 ops/s
Iteration  13: 897551.422 ops/s
Iteration  14: 895413.123 ops/s
Iteration  15: 897103.395 ops/s
Iteration  16: 895460.970 ops/s
Iteration  17: 895515.035 ops/s
Iteration  18: 894368.291 ops/s
Iteration  19: 896249.535 ops/s
Iteration  20: 896500.409 ops/s
Iteration  21: 896559.519 ops/s
Iteration  22: 896607.852 ops/s
Iteration  23: 893295.864 ops/s
Iteration  24: 894266.712 ops/s
Iteration  25: 895292.186 ops/s
Iteration  26: 896622.428 ops/s
Iteration  27: 896357.365 ops/s
Iteration  28: 896265.563 ops/s
Iteration  29: 896462.236 ops/s
Iteration  30: 896399.164 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectWith":
  896013.323 ±(99.9%) 774.799 ops/s [Average]
  (min, avg, max) = (893295.864, 896013.323, 898027.500), stdev = 1159.683
  CI (99.9%): [895238.524, 896788.123] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectWith  thrpt   30  896013.323 ± 774.799  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1505667.465 ops/s
# Warmup Iteration   2: 3787644.891 ops/s
# Warmup Iteration   3: 3774749.070 ops/s
# Warmup Iteration   4: 3159274.094 ops/s
# Warmup Iteration   5: 3771786.537 ops/s
# Warmup Iteration   6: 3773034.739 ops/s
# Warmup Iteration   7: 3776956.328 ops/s
# Warmup Iteration   8: 3783678.457 ops/s
# Warmup Iteration   9: 3778664.449 ops/s
# Warmup Iteration  10: 3775028.621 ops/s
# Warmup Iteration  11: 3779039.449 ops/s
# Warmup Iteration  12: 3774721.555 ops/s
# Warmup Iteration  13: 3778839.084 ops/s
# Warmup Iteration  14: 3782588.699 ops/s
# Warmup Iteration  15: 3777965.193 ops/s
# Warmup Iteration  16: 3773704.547 ops/s
# Warmup Iteration  17: 3801396.572 ops/s
# Warmup Iteration  18: 3803315.111 ops/s
# Warmup Iteration  19: 3810296.145 ops/s
# Warmup Iteration  20: 3778056.584 ops/s
# Warmup Iteration  21: 3804896.982 ops/s
# Warmup Iteration  22: 3808993.185 ops/s
# Warmup Iteration  23: 3809226.193 ops/s
# Warmup Iteration  24: 3802583.004 ops/s
# Warmup Iteration  25: 3808890.693 ops/s
# Warmup Iteration  26: 3809250.259 ops/s
# Warmup Iteration  27: 3805583.375 ops/s
# Warmup Iteration  28: 3808683.660 ops/s
# Warmup Iteration  29: 3807430.776 ops/s
# Warmup Iteration  30: 3809615.424 ops/s
Iteration   1: 3777159.517 ops/s
Iteration   2: 3808584.512 ops/s
Iteration   3: 3808433.532 ops/s
Iteration   4: 3815448.026 ops/s
Iteration   5: 3805578.155 ops/s
Iteration   6: 3800346.972 ops/s
Iteration   7: 3805779.956 ops/s
Iteration   8: 3813264.857 ops/s
Iteration   9: 3810678.250 ops/s
Iteration  10: 3804494.936 ops/s
Iteration  11: 3801904.924 ops/s
Iteration  12: 3808305.969 ops/s
Iteration  13: 3811228.690 ops/s
Iteration  14: 3810124.065 ops/s
Iteration  15: 3813084.341 ops/s
Iteration  16: 3807649.238 ops/s
Iteration  17: 3807113.397 ops/s
Iteration  18: 3799883.914 ops/s
Iteration  19: 3809197.171 ops/s
Iteration  20: 3801491.039 ops/s
Iteration  21: 3809200.228 ops/s
Iteration  22: 3747053.621 ops/s
Iteration  23: 3814069.709 ops/s
Iteration  24: 3809797.553 ops/s
Iteration  25: 3810246.137 ops/s
Iteration  26: 3800896.626 ops/s
Iteration  27: 3811814.651 ops/s
Iteration  28: 3809888.375 ops/s
Iteration  29: 3807251.775 ops/s
Iteration  30: 3764492.594 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectWithIndex":
  3803482.091 ±(99.9%) 9943.048 ops/s [Average]
  (min, avg, max) = (3747053.621, 3803482.091, 3815448.026), stdev = 14882.287
  CI (99.9%): [3793539.043, 3813425.139] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectWithIndex  thrpt   30  3803482.091 ± 9943.048  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1659060.653 ops/s
# Warmup Iteration   2: 4095473.829 ops/s
# Warmup Iteration   3: 4153818.344 ops/s
# Warmup Iteration   4: 3478475.359 ops/s
# Warmup Iteration   5: 4152721.109 ops/s
# Warmup Iteration   6: 4153109.396 ops/s
# Warmup Iteration   7: 4155482.686 ops/s
# Warmup Iteration   8: 4164297.876 ops/s
# Warmup Iteration   9: 4163988.279 ops/s
# Warmup Iteration  10: 4163822.878 ops/s
# Warmup Iteration  11: 4154210.083 ops/s
# Warmup Iteration  12: 4169286.705 ops/s
# Warmup Iteration  13: 4167783.887 ops/s
# Warmup Iteration  14: 4171153.899 ops/s
# Warmup Iteration  15: 4164372.843 ops/s
# Warmup Iteration  16: 4169100.717 ops/s
# Warmup Iteration  17: 4157680.106 ops/s
# Warmup Iteration  18: 4164159.233 ops/s
# Warmup Iteration  19: 4165635.523 ops/s
# Warmup Iteration  20: 4164817.599 ops/s
# Warmup Iteration  21: 4163923.625 ops/s
# Warmup Iteration  22: 4164335.428 ops/s
# Warmup Iteration  23: 4162656.519 ops/s
# Warmup Iteration  24: 4160740.626 ops/s
# Warmup Iteration  25: 4171829.220 ops/s
# Warmup Iteration  26: 4157737.205 ops/s
# Warmup Iteration  27: 4164647.984 ops/s
# Warmup Iteration  28: 4160111.024 ops/s
# Warmup Iteration  29: 4157892.535 ops/s
# Warmup Iteration  30: 4166937.859 ops/s
Iteration   1: 4144379.501 ops/s
Iteration   2: 4159815.722 ops/s
Iteration   3: 4170527.557 ops/s
Iteration   4: 4169856.773 ops/s
Iteration   5: 4163267.548 ops/s
Iteration   6: 4161517.122 ops/s
Iteration   7: 4169420.555 ops/s
Iteration   8: 4158424.788 ops/s
Iteration   9: 4162840.036 ops/s
Iteration  10: 4161544.175 ops/s
Iteration  11: 4154898.304 ops/s
Iteration  12: 4169029.043 ops/s
Iteration  13: 4167068.808 ops/s
Iteration  14: 4161204.822 ops/s
Iteration  15: 4150666.002 ops/s
Iteration  16: 4139388.349 ops/s
Iteration  17: 4158795.028 ops/s
Iteration  18: 4167028.339 ops/s
Iteration  19: 4167587.181 ops/s
Iteration  20: 4168559.086 ops/s
Iteration  21: 4166656.265 ops/s
Iteration  22: 4164605.914 ops/s
Iteration  23: 4164512.323 ops/s
Iteration  24: 4164015.191 ops/s
Iteration  25: 4166189.727 ops/s
Iteration  26: 4158732.841 ops/s
Iteration  27: 4158570.317 ops/s
Iteration  28: 4163698.283 ops/s
Iteration  29: 4166596.594 ops/s
Iteration  30: 4165109.627 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectWithIndexWithTarget":
  4162150.194 ±(99.9%) 4817.590 ops/s [Average]
  (min, avg, max) = (4139388.349, 4162150.194, 4170527.557), stdev = 7210.743
  CI (99.9%): [4157332.604, 4166967.784] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  4162150.194 ± 4817.590  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 248446.011 ops/s
# Warmup Iteration   2: 448144.932 ops/s
# Warmup Iteration   3: 543960.413 ops/s
# Warmup Iteration   4: 548024.061 ops/s
# Warmup Iteration   5: 547127.471 ops/s
# Warmup Iteration   6: 478704.951 ops/s
# Warmup Iteration   7: 527010.381 ops/s
# Warmup Iteration   8: 548252.512 ops/s
# Warmup Iteration   9: 547945.960 ops/s
# Warmup Iteration  10: 547706.967 ops/s
# Warmup Iteration  11: 548287.258 ops/s
# Warmup Iteration  12: 548264.732 ops/s
# Warmup Iteration  13: 548040.078 ops/s
# Warmup Iteration  14: 548237.946 ops/s
# Warmup Iteration  15: 548201.865 ops/s
# Warmup Iteration  16: 548275.587 ops/s
# Warmup Iteration  17: 549163.382 ops/s
# Warmup Iteration  18: 547320.401 ops/s
# Warmup Iteration  19: 548426.783 ops/s
# Warmup Iteration  20: 548231.344 ops/s
# Warmup Iteration  21: 548780.394 ops/s
# Warmup Iteration  22: 548416.905 ops/s
# Warmup Iteration  23: 548836.552 ops/s
# Warmup Iteration  24: 548524.761 ops/s
# Warmup Iteration  25: 548894.494 ops/s
# Warmup Iteration  26: 547814.923 ops/s
# Warmup Iteration  27: 548905.510 ops/s
# Warmup Iteration  28: 548209.273 ops/s
# Warmup Iteration  29: 547901.843 ops/s
# Warmup Iteration  30: 548741.429 ops/s
Iteration   1: 548931.252 ops/s
Iteration   2: 546696.970 ops/s
Iteration   3: 548366.491 ops/s
Iteration   4: 548304.480 ops/s
Iteration   5: 549280.171 ops/s
Iteration   6: 547915.875 ops/s
Iteration   7: 548028.308 ops/s
Iteration   8: 544782.259 ops/s
Iteration   9: 548432.037 ops/s
Iteration  10: 547249.980 ops/s
Iteration  11: 549006.322 ops/s
Iteration  12: 548284.716 ops/s
Iteration  13: 549671.234 ops/s
Iteration  14: 548428.365 ops/s
Iteration  15: 549127.210 ops/s
Iteration  16: 547887.970 ops/s
Iteration  17: 548896.949 ops/s
Iteration  18: 547625.549 ops/s
Iteration  19: 547132.144 ops/s
Iteration  20: 549326.073 ops/s
Iteration  21: 547954.856 ops/s
Iteration  22: 549329.226 ops/s
Iteration  23: 549679.143 ops/s
Iteration  24: 549751.700 ops/s
Iteration  25: 548337.056 ops/s
Iteration  26: 537663.886 ops/s
Iteration  27: 536410.075 ops/s
Iteration  28: 537896.755 ops/s
Iteration  29: 541823.858 ops/s
Iteration  30: 549296.356 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectWithOccurrences":
  547050.576 ±(99.9%) 2444.254 ops/s [Average]
  (min, avg, max) = (536410.075, 547050.576, 549751.700), stdev = 3658.445
  CI (99.9%): [544606.321, 549494.830] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectWithOccurrences  thrpt   30  547050.576 ± 2444.254  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 77849.393 ops/s
# Warmup Iteration   2: 134728.998 ops/s
# Warmup Iteration   3: 169098.650 ops/s
# Warmup Iteration   4: 168327.280 ops/s
# Warmup Iteration   5: 169518.606 ops/s
# Warmup Iteration   6: 169402.272 ops/s
# Warmup Iteration   7: 141243.662 ops/s
# Warmup Iteration   8: 169622.299 ops/s
# Warmup Iteration   9: 169713.079 ops/s
# Warmup Iteration  10: 169209.948 ops/s
# Warmup Iteration  11: 169529.134 ops/s
# Warmup Iteration  12: 169761.642 ops/s
# Warmup Iteration  13: 169529.336 ops/s
# Warmup Iteration  14: 169544.407 ops/s
# Warmup Iteration  15: 169429.625 ops/s
# Warmup Iteration  16: 169515.096 ops/s
# Warmup Iteration  17: 169686.315 ops/s
# Warmup Iteration  18: 169583.578 ops/s
# Warmup Iteration  19: 169755.264 ops/s
# Warmup Iteration  20: 169588.825 ops/s
# Warmup Iteration  21: 169707.643 ops/s
# Warmup Iteration  22: 169535.496 ops/s
# Warmup Iteration  23: 169540.768 ops/s
# Warmup Iteration  24: 169449.148 ops/s
# Warmup Iteration  25: 169227.388 ops/s
# Warmup Iteration  26: 169326.025 ops/s
# Warmup Iteration  27: 169783.604 ops/s
# Warmup Iteration  28: 169726.829 ops/s
# Warmup Iteration  29: 169634.256 ops/s
# Warmup Iteration  30: 169584.755 ops/s
Iteration   1: 169911.459 ops/s
Iteration   2: 169226.672 ops/s
Iteration   3: 169623.621 ops/s
Iteration   4: 169488.766 ops/s
Iteration   5: 169804.915 ops/s
Iteration   6: 169642.131 ops/s
Iteration   7: 169663.884 ops/s
Iteration   8: 169536.698 ops/s
Iteration   9: 169745.289 ops/s
Iteration  10: 169442.564 ops/s
Iteration  11: 169921.691 ops/s
Iteration  12: 169310.312 ops/s
Iteration  13: 169845.275 ops/s
Iteration  14: 169747.849 ops/s
Iteration  15: 169852.795 ops/s
Iteration  16: 169731.238 ops/s
Iteration  17: 169642.978 ops/s
Iteration  18: 169688.076 ops/s
Iteration  19: 169625.901 ops/s
Iteration  20: 169537.531 ops/s
Iteration  21: 169360.806 ops/s
Iteration  22: 169714.669 ops/s
Iteration  23: 169502.649 ops/s
Iteration  24: 169895.072 ops/s
Iteration  25: 169326.668 ops/s
Iteration  26: 169701.733 ops/s
Iteration  27: 169651.642 ops/s
Iteration  28: 169776.445 ops/s
Iteration  29: 169648.641 ops/s
Iteration  30: 168805.044 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_collectWith_target":
  169612.434 ±(99.9%) 158.262 ops/s [Average]
  (min, avg, max) = (168805.044, 169612.434, 169921.691), stdev = 236.879
  CI (99.9%): [169454.172, 169770.696] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_collectWith_target  thrpt   30  169612.434 ± 158.262  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_compareTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_compareTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 101439.644 ops/s
# Warmup Iteration   2: 153504.244 ops/s
# Warmup Iteration   3: 182741.657 ops/s
# Warmup Iteration   4: 184018.699 ops/s
# Warmup Iteration   5: 183936.068 ops/s
# Warmup Iteration   6: 183812.813 ops/s
# Warmup Iteration   7: 153308.102 ops/s
# Warmup Iteration   8: 184049.584 ops/s
# Warmup Iteration   9: 184055.470 ops/s
# Warmup Iteration  10: 183789.423 ops/s
# Warmup Iteration  11: 183397.242 ops/s
# Warmup Iteration  12: 183833.108 ops/s
# Warmup Iteration  13: 184171.679 ops/s
# Warmup Iteration  14: 182625.492 ops/s
# Warmup Iteration  15: 183155.107 ops/s
# Warmup Iteration  16: 184206.801 ops/s
# Warmup Iteration  17: 184066.572 ops/s
# Warmup Iteration  18: 184138.106 ops/s
# Warmup Iteration  19: 184141.693 ops/s
# Warmup Iteration  20: 184261.050 ops/s
# Warmup Iteration  21: 183916.212 ops/s
# Warmup Iteration  22: 184185.861 ops/s
# Warmup Iteration  23: 183955.621 ops/s
# Warmup Iteration  24: 184057.871 ops/s
# Warmup Iteration  25: 183495.489 ops/s
# Warmup Iteration  26: 184392.430 ops/s
# Warmup Iteration  27: 184412.471 ops/s
# Warmup Iteration  28: 184268.412 ops/s
# Warmup Iteration  29: 184411.431 ops/s
# Warmup Iteration  30: 184009.959 ops/s
Iteration   1: 184512.015 ops/s
Iteration   2: 184146.635 ops/s
Iteration   3: 184439.389 ops/s
Iteration   4: 184306.582 ops/s
Iteration   5: 184383.752 ops/s
Iteration   6: 184280.243 ops/s
Iteration   7: 184545.432 ops/s
Iteration   8: 184578.805 ops/s
Iteration   9: 184211.095 ops/s
Iteration  10: 184400.658 ops/s
Iteration  11: 184201.315 ops/s
Iteration  12: 184461.501 ops/s
Iteration  13: 184093.351 ops/s
Iteration  14: 184412.637 ops/s
Iteration  15: 184128.262 ops/s
Iteration  16: 184644.083 ops/s
Iteration  17: 183961.122 ops/s
Iteration  18: 184038.478 ops/s
Iteration  19: 184035.724 ops/s
Iteration  20: 184463.611 ops/s
Iteration  21: 184421.106 ops/s
Iteration  22: 184491.873 ops/s
Iteration  23: 183929.574 ops/s
Iteration  24: 184263.103 ops/s
Iteration  25: 183235.682 ops/s
Iteration  26: 184404.920 ops/s
Iteration  27: 184407.318 ops/s
Iteration  28: 182936.896 ops/s
Iteration  29: 183565.110 ops/s
Iteration  30: 183263.953 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_compareTo":
  184172.141 ±(99.9%) 280.089 ops/s [Average]
  (min, avg, max) = (182936.896, 184172.141, 184644.083), stdev = 419.224
  CI (99.9%): [183892.052, 184452.230] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_compareTo  thrpt   30  184172.141 ± 280.089  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2307740.086 ops/s
# Warmup Iteration   2: 4397485.186 ops/s
# Warmup Iteration   3: 4633498.959 ops/s
# Warmup Iteration   4: 4658661.210 ops/s
# Warmup Iteration   5: 3908193.327 ops/s
# Warmup Iteration   6: 4673882.137 ops/s
# Warmup Iteration   7: 4665499.108 ops/s
# Warmup Iteration   8: 4666261.772 ops/s
# Warmup Iteration   9: 4654326.056 ops/s
# Warmup Iteration  10: 4677755.041 ops/s
# Warmup Iteration  11: 4673435.871 ops/s
# Warmup Iteration  12: 4661264.836 ops/s
# Warmup Iteration  13: 4673907.061 ops/s
# Warmup Iteration  14: 4667882.599 ops/s
# Warmup Iteration  15: 4671717.757 ops/s
# Warmup Iteration  16: 4670728.600 ops/s
# Warmup Iteration  17: 4671041.849 ops/s
# Warmup Iteration  18: 4672002.459 ops/s
# Warmup Iteration  19: 4672576.592 ops/s
# Warmup Iteration  20: 4667035.919 ops/s
# Warmup Iteration  21: 4677313.498 ops/s
# Warmup Iteration  22: 4672493.148 ops/s
# Warmup Iteration  23: 4678808.671 ops/s
# Warmup Iteration  24: 4673110.529 ops/s
# Warmup Iteration  25: 4677313.928 ops/s
# Warmup Iteration  26: 4656075.268 ops/s
# Warmup Iteration  27: 4672928.785 ops/s
# Warmup Iteration  28: 4678071.599 ops/s
# Warmup Iteration  29: 4651584.757 ops/s
# Warmup Iteration  30: 4673793.870 ops/s
Iteration   1: 4673513.883 ops/s
Iteration   2: 4675490.967 ops/s
Iteration   3: 4675211.170 ops/s
Iteration   4: 4674854.118 ops/s
Iteration   5: 4676793.231 ops/s
Iteration   6: 4677474.758 ops/s
Iteration   7: 4668250.505 ops/s
Iteration   8: 4676100.779 ops/s
Iteration   9: 4668846.172 ops/s
Iteration  10: 4672843.005 ops/s
Iteration  11: 4677830.459 ops/s
Iteration  12: 4668794.179 ops/s
Iteration  13: 4663016.677 ops/s
Iteration  14: 4673760.221 ops/s
Iteration  15: 4670228.927 ops/s
Iteration  16: 4671459.956 ops/s
Iteration  17: 4654165.585 ops/s
Iteration  18: 4671952.998 ops/s
Iteration  19: 4674186.780 ops/s
Iteration  20: 4680693.471 ops/s
Iteration  21: 4668823.501 ops/s
Iteration  22: 4679346.020 ops/s
Iteration  23: 4669753.765 ops/s
Iteration  24: 4666040.062 ops/s
Iteration  25: 4672548.003 ops/s
Iteration  26: 4675306.302 ops/s
Iteration  27: 4654330.004 ops/s
Iteration  28: 4669924.654 ops/s
Iteration  29: 4674241.443 ops/s
Iteration  30: 4673771.137 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_contains":
  4671651.758 ±(99.9%) 4104.023 ops/s [Average]
  (min, avg, max) = (4654165.585, 4671651.758, 4680693.471), stdev = 6142.709
  CI (99.9%): [4667547.735, 4675755.781] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_contains  thrpt   30  4671651.758 ± 4104.023  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 989980.339 ops/s
# Warmup Iteration   2: 1808520.034 ops/s
# Warmup Iteration   3: 1957093.288 ops/s
# Warmup Iteration   4: 1959923.131 ops/s
# Warmup Iteration   5: 1853375.306 ops/s
# Warmup Iteration   6: 1740669.356 ops/s
# Warmup Iteration   7: 1941919.277 ops/s
# Warmup Iteration   8: 1944568.590 ops/s
# Warmup Iteration   9: 1944387.658 ops/s
# Warmup Iteration  10: 1941735.701 ops/s
# Warmup Iteration  11: 1942641.098 ops/s
# Warmup Iteration  12: 1940110.459 ops/s
# Warmup Iteration  13: 1945281.396 ops/s
# Warmup Iteration  14: 1940625.739 ops/s
# Warmup Iteration  15: 1944300.273 ops/s
# Warmup Iteration  16: 1941311.687 ops/s
# Warmup Iteration  17: 1963606.502 ops/s
# Warmup Iteration  18: 1963824.363 ops/s
# Warmup Iteration  19: 1966215.751 ops/s
# Warmup Iteration  20: 1965758.643 ops/s
# Warmup Iteration  21: 1965543.211 ops/s
# Warmup Iteration  22: 1962994.860 ops/s
# Warmup Iteration  23: 1963811.783 ops/s
# Warmup Iteration  24: 1964883.530 ops/s
# Warmup Iteration  25: 1965521.639 ops/s
# Warmup Iteration  26: 1965170.622 ops/s
# Warmup Iteration  27: 1967830.118 ops/s
# Warmup Iteration  28: 1966701.930 ops/s
# Warmup Iteration  29: 1965582.825 ops/s
# Warmup Iteration  30: 1965382.864 ops/s
Iteration   1: 1964909.576 ops/s
Iteration   2: 1964724.812 ops/s
Iteration   3: 1967699.019 ops/s
Iteration   4: 1965898.231 ops/s
Iteration   5: 1966818.691 ops/s
Iteration   6: 1966155.371 ops/s
Iteration   7: 1965396.494 ops/s
Iteration   8: 1968569.908 ops/s
Iteration   9: 1963884.287 ops/s
Iteration  10: 1968683.281 ops/s
Iteration  11: 1964502.152 ops/s
Iteration  12: 1967553.182 ops/s
Iteration  13: 1966437.799 ops/s
Iteration  14: 1966806.607 ops/s
Iteration  15: 1968352.856 ops/s
Iteration  16: 1966814.083 ops/s
Iteration  17: 1964215.746 ops/s
Iteration  18: 1969225.896 ops/s
Iteration  19: 1963479.744 ops/s
Iteration  20: 1966405.016 ops/s
Iteration  21: 1965547.747 ops/s
Iteration  22: 1962015.267 ops/s
Iteration  23: 1969474.969 ops/s
Iteration  24: 1965111.098 ops/s
Iteration  25: 1963109.682 ops/s
Iteration  26: 1968914.863 ops/s
Iteration  27: 1963073.235 ops/s
Iteration  28: 1963453.321 ops/s
Iteration  29: 1964152.596 ops/s
Iteration  30: 1964151.826 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsAllArray":
  1965851.245 ±(99.9%) 1380.804 ops/s [Average]
  (min, avg, max) = (1962015.267, 1965851.245, 1969474.969), stdev = 2066.722
  CI (99.9%): [1964470.441, 1967232.049] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_containsAllArray  thrpt   30  1965851.245 ± 1380.804  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsAllCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsAllCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2160270.768 ops/s
# Warmup Iteration   2: 4538657.143 ops/s
# Warmup Iteration   3: 4690418.047 ops/s
# Warmup Iteration   4: 4706741.446 ops/s
# Warmup Iteration   5: 3971656.841 ops/s
# Warmup Iteration   6: 4713278.188 ops/s
# Warmup Iteration   7: 4713227.300 ops/s
# Warmup Iteration   8: 4712623.809 ops/s
# Warmup Iteration   9: 4691454.177 ops/s
# Warmup Iteration  10: 4712750.995 ops/s
# Warmup Iteration  11: 4714590.391 ops/s
# Warmup Iteration  12: 4721112.676 ops/s
# Warmup Iteration  13: 4710941.372 ops/s
# Warmup Iteration  14: 4715126.591 ops/s
# Warmup Iteration  15: 4714746.160 ops/s
# Warmup Iteration  16: 4716138.164 ops/s
# Warmup Iteration  17: 4714235.446 ops/s
# Warmup Iteration  18: 4708175.186 ops/s
# Warmup Iteration  19: 4715206.613 ops/s
# Warmup Iteration  20: 4715037.635 ops/s
# Warmup Iteration  21: 4718295.306 ops/s
# Warmup Iteration  22: 4724026.243 ops/s
# Warmup Iteration  23: 4722820.504 ops/s
# Warmup Iteration  24: 4712753.115 ops/s
# Warmup Iteration  25: 4713784.336 ops/s
# Warmup Iteration  26: 4724361.481 ops/s
# Warmup Iteration  27: 4722080.113 ops/s
# Warmup Iteration  28: 4722410.618 ops/s
# Warmup Iteration  29: 4701089.693 ops/s
# Warmup Iteration  30: 4715373.487 ops/s
Iteration   1: 4689461.229 ops/s
Iteration   2: 4722705.735 ops/s
Iteration   3: 4710319.840 ops/s
Iteration   4: 4715420.338 ops/s
Iteration   5: 4720447.236 ops/s
Iteration   6: 4725397.463 ops/s
Iteration   7: 4726169.038 ops/s
Iteration   8: 4723856.921 ops/s
Iteration   9: 4705019.901 ops/s
Iteration  10: 4712233.984 ops/s
Iteration  11: 4729530.461 ops/s
Iteration  12: 4735563.940 ops/s
Iteration  13: 4728632.467 ops/s
Iteration  14: 4716453.326 ops/s
Iteration  15: 4729347.744 ops/s
Iteration  16: 4707447.665 ops/s
Iteration  17: 4708349.885 ops/s
Iteration  18: 4715018.287 ops/s
Iteration  19: 4728174.401 ops/s
Iteration  20: 4719201.926 ops/s
Iteration  21: 4724287.484 ops/s
Iteration  22: 4717295.031 ops/s
Iteration  23: 4728243.078 ops/s
Iteration  24: 4726385.262 ops/s
Iteration  25: 4727472.172 ops/s
Iteration  26: 4724458.421 ops/s
Iteration  27: 4709611.163 ops/s
Iteration  28: 4715652.092 ops/s
Iteration  29: 4716429.082 ops/s
Iteration  30: 4715818.055 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsAllCollection":
  4719146.788 ±(99.9%) 6398.778 ops/s [Average]
  (min, avg, max) = (4689461.229, 4719146.788, 4735563.940), stdev = 9577.390
  CI (99.9%): [4712748.010, 4725545.565] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_containsAllCollection  thrpt   30  4719146.788 ± 6398.778  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 945256.743 ops/s
# Warmup Iteration   2: 1757517.465 ops/s
# Warmup Iteration   3: 1911282.505 ops/s
# Warmup Iteration   4: 1923097.248 ops/s
# Warmup Iteration   5: 1740006.722 ops/s
# Warmup Iteration   6: 1795006.856 ops/s
# Warmup Iteration   7: 1917684.196 ops/s
# Warmup Iteration   8: 1917394.048 ops/s
# Warmup Iteration   9: 1925152.328 ops/s
# Warmup Iteration  10: 1924052.046 ops/s
# Warmup Iteration  11: 1924634.520 ops/s
# Warmup Iteration  12: 1923172.494 ops/s
# Warmup Iteration  13: 1922689.590 ops/s
# Warmup Iteration  14: 1924872.227 ops/s
# Warmup Iteration  15: 1922355.415 ops/s
# Warmup Iteration  16: 1925723.170 ops/s
# Warmup Iteration  17: 1923492.509 ops/s
# Warmup Iteration  18: 1923091.490 ops/s
# Warmup Iteration  19: 1921827.962 ops/s
# Warmup Iteration  20: 1921635.484 ops/s
# Warmup Iteration  21: 1919372.080 ops/s
# Warmup Iteration  22: 1923034.080 ops/s
# Warmup Iteration  23: 1922308.482 ops/s
# Warmup Iteration  24: 1919113.492 ops/s
# Warmup Iteration  25: 1917634.414 ops/s
# Warmup Iteration  26: 1925127.537 ops/s
# Warmup Iteration  27: 1918321.679 ops/s
# Warmup Iteration  28: 1918860.235 ops/s
# Warmup Iteration  29: 1915914.304 ops/s
# Warmup Iteration  30: 1922120.485 ops/s
Iteration   1: 1920519.619 ops/s
Iteration   2: 1922556.331 ops/s
Iteration   3: 1921832.976 ops/s
Iteration   4: 1919886.839 ops/s
Iteration   5: 1926570.660 ops/s
Iteration   6: 1917287.157 ops/s
Iteration   7: 1921441.209 ops/s
Iteration   8: 1927560.863 ops/s
Iteration   9: 1922891.891 ops/s
Iteration  10: 1925819.395 ops/s
Iteration  11: 1919423.647 ops/s
Iteration  12: 1922024.674 ops/s
Iteration  13: 1925579.003 ops/s
Iteration  14: 1923928.442 ops/s
Iteration  15: 1922210.714 ops/s
Iteration  16: 1926541.020 ops/s
Iteration  17: 1922807.060 ops/s
Iteration  18: 1926707.136 ops/s
Iteration  19: 1921209.124 ops/s
Iteration  20: 1919707.281 ops/s
Iteration  21: 1925688.133 ops/s
Iteration  22: 1922117.029 ops/s
Iteration  23: 1923835.166 ops/s
Iteration  24: 1926522.186 ops/s
Iteration  25: 1923779.945 ops/s
Iteration  26: 1925843.676 ops/s
Iteration  27: 1923837.671 ops/s
Iteration  28: 1923116.728 ops/s
Iteration  29: 1923773.885 ops/s
Iteration  30: 1910199.879 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsAllIterable":
  1922840.645 ±(99.9%) 2322.465 ops/s [Average]
  (min, avg, max) = (1910199.879, 1922840.645, 1927560.863), stdev = 3476.156
  CI (99.9%): [1920518.180, 1925163.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_containsAllIterable  thrpt   30  1922840.645 ± 2322.465  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 35637.310 ops/s
# Warmup Iteration   2: 45454.536 ops/s
# Warmup Iteration   3: 59402.477 ops/s
# Warmup Iteration   4: 59533.271 ops/s
# Warmup Iteration   5: 59221.016 ops/s
# Warmup Iteration   6: 59376.185 ops/s
# Warmup Iteration   7: 59416.455 ops/s
# Warmup Iteration   8: 59404.750 ops/s
# Warmup Iteration   9: 53944.518 ops/s
# Warmup Iteration  10: 55390.347 ops/s
# Warmup Iteration  11: 59465.757 ops/s
# Warmup Iteration  12: 59497.538 ops/s
# Warmup Iteration  13: 59464.636 ops/s
# Warmup Iteration  14: 59476.475 ops/s
# Warmup Iteration  15: 59496.926 ops/s
# Warmup Iteration  16: 59405.591 ops/s
# Warmup Iteration  17: 59365.574 ops/s
# Warmup Iteration  18: 59415.608 ops/s
# Warmup Iteration  19: 59413.698 ops/s
# Warmup Iteration  20: 59406.328 ops/s
# Warmup Iteration  21: 59406.048 ops/s
# Warmup Iteration  22: 59366.409 ops/s
# Warmup Iteration  23: 59470.166 ops/s
# Warmup Iteration  24: 59401.266 ops/s
# Warmup Iteration  25: 59318.605 ops/s
# Warmup Iteration  26: 59440.586 ops/s
# Warmup Iteration  27: 59309.855 ops/s
# Warmup Iteration  28: 59342.818 ops/s
# Warmup Iteration  29: 59469.641 ops/s
# Warmup Iteration  30: 59405.463 ops/s
Iteration   1: 59492.888 ops/s
Iteration   2: 59371.835 ops/s
Iteration   3: 59447.128 ops/s
Iteration   4: 59529.159 ops/s
Iteration   5: 59503.143 ops/s
Iteration   6: 59479.314 ops/s
Iteration   7: 59508.363 ops/s
Iteration   8: 59521.220 ops/s
Iteration   9: 59357.569 ops/s
Iteration  10: 59503.751 ops/s
Iteration  11: 59524.477 ops/s
Iteration  12: 59407.591 ops/s
Iteration  13: 59386.920 ops/s
Iteration  14: 59528.017 ops/s
Iteration  15: 59414.884 ops/s
Iteration  16: 59474.297 ops/s
Iteration  17: 59404.738 ops/s
Iteration  18: 59351.711 ops/s
Iteration  19: 59428.309 ops/s
Iteration  20: 59526.115 ops/s
Iteration  21: 59349.942 ops/s
Iteration  22: 59490.010 ops/s
Iteration  23: 59491.646 ops/s
Iteration  24: 59319.790 ops/s
Iteration  25: 59414.989 ops/s
Iteration  26: 59413.994 ops/s
Iteration  27: 59333.394 ops/s
Iteration  28: 59472.187 ops/s
Iteration  29: 59432.175 ops/s
Iteration  30: 59334.481 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsAnyCollection":
  59440.468 ±(99.9%) 45.224 ops/s [Average]
  (min, avg, max) = (59319.790, 59440.468, 59529.159), stdev = 67.690
  CI (99.9%): [59395.243, 59485.692] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt      Score    Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  59440.468 ± 45.224  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 32198.908 ops/s
# Warmup Iteration   2: 38908.510 ops/s
# Warmup Iteration   3: 55701.897 ops/s
# Warmup Iteration   4: 55538.577 ops/s
# Warmup Iteration   5: 55316.987 ops/s
# Warmup Iteration   6: 55561.371 ops/s
# Warmup Iteration   7: 55692.180 ops/s
# Warmup Iteration   8: 55732.532 ops/s
# Warmup Iteration   9: 55599.163 ops/s
# Warmup Iteration  10: 46613.639 ops/s
# Warmup Iteration  11: 55697.235 ops/s
# Warmup Iteration  12: 55667.191 ops/s
# Warmup Iteration  13: 55707.601 ops/s
# Warmup Iteration  14: 55669.375 ops/s
# Warmup Iteration  15: 55696.373 ops/s
# Warmup Iteration  16: 55757.685 ops/s
# Warmup Iteration  17: 55665.051 ops/s
# Warmup Iteration  18: 55538.073 ops/s
# Warmup Iteration  19: 55676.061 ops/s
# Warmup Iteration  20: 55701.720 ops/s
# Warmup Iteration  21: 55737.816 ops/s
# Warmup Iteration  22: 55790.505 ops/s
# Warmup Iteration  23: 55671.990 ops/s
# Warmup Iteration  24: 55667.233 ops/s
# Warmup Iteration  25: 55687.129 ops/s
# Warmup Iteration  26: 55733.652 ops/s
# Warmup Iteration  27: 55647.828 ops/s
# Warmup Iteration  28: 55705.837 ops/s
# Warmup Iteration  29: 55703.725 ops/s
# Warmup Iteration  30: 55681.325 ops/s
Iteration   1: 55759.163 ops/s
Iteration   2: 55665.653 ops/s
Iteration   3: 55590.708 ops/s
Iteration   4: 55660.632 ops/s
Iteration   5: 55717.011 ops/s
Iteration   6: 55585.146 ops/s
Iteration   7: 55747.789 ops/s
Iteration   8: 55757.889 ops/s
Iteration   9: 55650.517 ops/s
Iteration  10: 55744.658 ops/s
Iteration  11: 55781.462 ops/s
Iteration  12: 55762.534 ops/s
Iteration  13: 55554.982 ops/s
Iteration  14: 55759.484 ops/s
Iteration  15: 55730.568 ops/s
Iteration  16: 55623.829 ops/s
Iteration  17: 55716.265 ops/s
Iteration  18: 55713.291 ops/s
Iteration  19: 55569.876 ops/s
Iteration  20: 55723.526 ops/s
Iteration  21: 55782.981 ops/s
Iteration  22: 55627.091 ops/s
Iteration  23: 55714.997 ops/s
Iteration  24: 55745.578 ops/s
Iteration  25: 55742.155 ops/s
Iteration  26: 55578.034 ops/s
Iteration  27: 55747.664 ops/s
Iteration  28: 55743.470 ops/s
Iteration  29: 55656.070 ops/s
Iteration  30: 55772.441 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsAnyIterable":
  55697.515 ±(99.9%) 47.050 ops/s [Average]
  (min, avg, max) = (55554.982, 55697.515, 55782.981), stdev = 70.423
  CI (99.9%): [55650.465, 55744.566] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt      Score    Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  55697.515 ± 47.050  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 672096.607 ops/s
# Warmup Iteration   2: 714804.529 ops/s
# Warmup Iteration   3: 875317.391 ops/s
# Warmup Iteration   4: 925231.583 ops/s
# Warmup Iteration   5: 926376.238 ops/s
# Warmup Iteration   6: 925700.689 ops/s
# Warmup Iteration   7: 924761.420 ops/s
# Warmup Iteration   8: 924735.058 ops/s
# Warmup Iteration   9: 924655.661 ops/s
# Warmup Iteration  10: 925252.677 ops/s
# Warmup Iteration  11: 926237.600 ops/s
# Warmup Iteration  12: 925636.802 ops/s
# Warmup Iteration  13: 772094.844 ops/s
# Warmup Iteration  14: 927077.741 ops/s
# Warmup Iteration  15: 926702.305 ops/s
# Warmup Iteration  16: 927010.138 ops/s
# Warmup Iteration  17: 974480.210 ops/s
# Warmup Iteration  18: 972443.128 ops/s
# Warmup Iteration  19: 972282.933 ops/s
# Warmup Iteration  20: 973040.313 ops/s
# Warmup Iteration  21: 975012.911 ops/s
# Warmup Iteration  22: 971696.095 ops/s
# Warmup Iteration  23: 972959.472 ops/s
# Warmup Iteration  24: 972763.109 ops/s
# Warmup Iteration  25: 974788.511 ops/s
# Warmup Iteration  26: 973046.684 ops/s
# Warmup Iteration  27: 971660.132 ops/s
# Warmup Iteration  28: 973121.495 ops/s
# Warmup Iteration  29: 975819.891 ops/s
# Warmup Iteration  30: 974738.191 ops/s
Iteration   1: 972166.604 ops/s
Iteration   2: 967748.719 ops/s
Iteration   3: 963589.085 ops/s
Iteration   4: 968470.960 ops/s
Iteration   5: 969442.557 ops/s
Iteration   6: 974028.979 ops/s
Iteration   7: 969602.152 ops/s
Iteration   8: 973311.111 ops/s
Iteration   9: 968344.158 ops/s
Iteration  10: 973779.361 ops/s
Iteration  11: 974329.758 ops/s
Iteration  12: 974188.852 ops/s
Iteration  13: 970017.758 ops/s
Iteration  14: 970385.075 ops/s
Iteration  15: 969144.172 ops/s
Iteration  16: 969228.982 ops/s
Iteration  17: 973870.592 ops/s
Iteration  18: 971503.978 ops/s
Iteration  19: 972064.842 ops/s
Iteration  20: 973483.140 ops/s
Iteration  21: 973634.862 ops/s
Iteration  22: 970882.802 ops/s
Iteration  23: 973177.147 ops/s
Iteration  24: 968341.672 ops/s
Iteration  25: 973694.589 ops/s
Iteration  26: 967224.059 ops/s
Iteration  27: 973247.666 ops/s
Iteration  28: 973700.123 ops/s
Iteration  29: 973900.608 ops/s
Iteration  30: 972098.318 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsBy":
  971286.756 ±(99.9%) 1805.032 ops/s [Average]
  (min, avg, max) = (963589.085, 971286.756, 974329.758), stdev = 2701.687
  CI (99.9%): [969481.724, 973091.788] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_containsBy  thrpt   30  971286.756 ± 1805.032  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 35359.204 ops/s
# Warmup Iteration   2: 45416.436 ops/s
# Warmup Iteration   3: 59107.859 ops/s
# Warmup Iteration   4: 59188.032 ops/s
# Warmup Iteration   5: 58890.077 ops/s
# Warmup Iteration   6: 59065.049 ops/s
# Warmup Iteration   7: 58986.053 ops/s
# Warmup Iteration   8: 59012.485 ops/s
# Warmup Iteration   9: 54264.486 ops/s
# Warmup Iteration  10: 54535.789 ops/s
# Warmup Iteration  11: 59049.904 ops/s
# Warmup Iteration  12: 59121.795 ops/s
# Warmup Iteration  13: 59123.027 ops/s
# Warmup Iteration  14: 59140.692 ops/s
# Warmup Iteration  15: 59108.130 ops/s
# Warmup Iteration  16: 59132.308 ops/s
# Warmup Iteration  17: 59210.953 ops/s
# Warmup Iteration  18: 59171.368 ops/s
# Warmup Iteration  19: 59187.889 ops/s
# Warmup Iteration  20: 59207.230 ops/s
# Warmup Iteration  21: 59209.482 ops/s
# Warmup Iteration  22: 59152.575 ops/s
# Warmup Iteration  23: 59153.120 ops/s
# Warmup Iteration  24: 58945.945 ops/s
# Warmup Iteration  25: 59103.539 ops/s
# Warmup Iteration  26: 59126.073 ops/s
# Warmup Iteration  27: 59133.876 ops/s
# Warmup Iteration  28: 59106.177 ops/s
# Warmup Iteration  29: 59206.059 ops/s
# Warmup Iteration  30: 59123.259 ops/s
Iteration   1: 59166.331 ops/s
Iteration   2: 59038.835 ops/s
Iteration   3: 59224.003 ops/s
Iteration   4: 59236.706 ops/s
Iteration   5: 59190.868 ops/s
Iteration   6: 59026.610 ops/s
Iteration   7: 59182.853 ops/s
Iteration   8: 59216.455 ops/s
Iteration   9: 59145.696 ops/s
Iteration  10: 59174.010 ops/s
Iteration  11: 59033.378 ops/s
Iteration  12: 59002.732 ops/s
Iteration  13: 59104.271 ops/s
Iteration  14: 59162.178 ops/s
Iteration  15: 59161.932 ops/s
Iteration  16: 59147.718 ops/s
Iteration  17: 59182.723 ops/s
Iteration  18: 59055.536 ops/s
Iteration  19: 59169.060 ops/s
Iteration  20: 59125.621 ops/s
Iteration  21: 59008.940 ops/s
Iteration  22: 59210.575 ops/s
Iteration  23: 59165.893 ops/s
Iteration  24: 59080.838 ops/s
Iteration  25: 59096.705 ops/s
Iteration  26: 59051.126 ops/s
Iteration  27: 59044.386 ops/s
Iteration  28: 59149.821 ops/s
Iteration  29: 58906.934 ops/s
Iteration  30: 58787.477 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsNoneCollection":
  59108.340 ±(99.9%) 66.586 ops/s [Average]
  (min, avg, max) = (58787.477, 59108.340, 59236.706), stdev = 99.662
  CI (99.9%): [59041.755, 59174.926] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt      Score    Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  59108.340 ± 66.586  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 32207.725 ops/s
# Warmup Iteration   2: 38685.664 ops/s
# Warmup Iteration   3: 54746.406 ops/s
# Warmup Iteration   4: 54552.653 ops/s
# Warmup Iteration   5: 54087.383 ops/s
# Warmup Iteration   6: 54380.217 ops/s
# Warmup Iteration   7: 54548.582 ops/s
# Warmup Iteration   8: 54524.982 ops/s
# Warmup Iteration   9: 54548.234 ops/s
# Warmup Iteration  10: 45893.360 ops/s
# Warmup Iteration  11: 54694.825 ops/s
# Warmup Iteration  12: 54628.308 ops/s
# Warmup Iteration  13: 54648.209 ops/s
# Warmup Iteration  14: 54654.697 ops/s
# Warmup Iteration  15: 54612.116 ops/s
# Warmup Iteration  16: 54666.570 ops/s
# Warmup Iteration  17: 54631.978 ops/s
# Warmup Iteration  18: 54661.100 ops/s
# Warmup Iteration  19: 54669.509 ops/s
# Warmup Iteration  20: 54559.457 ops/s
# Warmup Iteration  21: 54726.131 ops/s
# Warmup Iteration  22: 54634.016 ops/s
# Warmup Iteration  23: 54709.832 ops/s
# Warmup Iteration  24: 54572.028 ops/s
# Warmup Iteration  25: 53009.404 ops/s
# Warmup Iteration  26: 54710.794 ops/s
# Warmup Iteration  27: 54625.426 ops/s
# Warmup Iteration  28: 54727.530 ops/s
# Warmup Iteration  29: 54656.829 ops/s
# Warmup Iteration  30: 54643.726 ops/s
Iteration   1: 54728.827 ops/s
Iteration   2: 54664.698 ops/s
Iteration   3: 54576.769 ops/s
Iteration   4: 54648.666 ops/s
Iteration   5: 54652.665 ops/s
Iteration   6: 54665.047 ops/s
Iteration   7: 54549.677 ops/s
Iteration   8: 54673.430 ops/s
Iteration   9: 54655.511 ops/s
Iteration  10: 54657.440 ops/s
Iteration  11: 54705.856 ops/s
Iteration  12: 54787.150 ops/s
Iteration  13: 54633.607 ops/s
Iteration  14: 54734.503 ops/s
Iteration  15: 54662.308 ops/s
Iteration  16: 54730.130 ops/s
Iteration  17: 54607.440 ops/s
Iteration  18: 54663.436 ops/s
Iteration  19: 54659.820 ops/s
Iteration  20: 54648.885 ops/s
Iteration  21: 54693.076 ops/s
Iteration  22: 54698.173 ops/s
Iteration  23: 54607.535 ops/s
Iteration  24: 54728.327 ops/s
Iteration  25: 54712.312 ops/s
Iteration  26: 54741.597 ops/s
Iteration  27: 54583.677 ops/s
Iteration  28: 54733.362 ops/s
Iteration  29: 54704.340 ops/s
Iteration  30: 54618.293 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_containsNoneIterable":
  54670.885 ±(99.9%) 36.665 ops/s [Average]
  (min, avg, max) = (54549.677, 54670.885, 54787.150), stdev = 54.878
  CI (99.9%): [54634.221, 54707.550] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt      Score    Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  54670.885 ± 36.665  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 281240.827 ops/s
# Warmup Iteration   2: 406061.728 ops/s
# Warmup Iteration   3: 497892.865 ops/s
# Warmup Iteration   4: 494672.570 ops/s
# Warmup Iteration   5: 498370.845 ops/s
# Warmup Iteration   6: 497891.702 ops/s
# Warmup Iteration   7: 418646.250 ops/s
# Warmup Iteration   8: 498546.334 ops/s
# Warmup Iteration   9: 497902.415 ops/s
# Warmup Iteration  10: 497649.931 ops/s
# Warmup Iteration  11: 497864.486 ops/s
# Warmup Iteration  12: 497898.642 ops/s
# Warmup Iteration  13: 498056.826 ops/s
# Warmup Iteration  14: 498103.312 ops/s
# Warmup Iteration  15: 492509.663 ops/s
# Warmup Iteration  16: 498776.493 ops/s
# Warmup Iteration  17: 497612.699 ops/s
# Warmup Iteration  18: 498885.303 ops/s
# Warmup Iteration  19: 498115.547 ops/s
# Warmup Iteration  20: 497579.625 ops/s
# Warmup Iteration  21: 498396.467 ops/s
# Warmup Iteration  22: 498272.290 ops/s
# Warmup Iteration  23: 498416.375 ops/s
# Warmup Iteration  24: 498997.992 ops/s
# Warmup Iteration  25: 498458.154 ops/s
# Warmup Iteration  26: 497518.617 ops/s
# Warmup Iteration  27: 498232.947 ops/s
# Warmup Iteration  28: 497954.276 ops/s
# Warmup Iteration  29: 498086.073 ops/s
# Warmup Iteration  30: 498229.990 ops/s
Iteration   1: 498827.331 ops/s
Iteration   2: 497083.966 ops/s
Iteration   3: 498570.565 ops/s
Iteration   4: 497606.208 ops/s
Iteration   5: 498521.610 ops/s
Iteration   6: 498497.254 ops/s
Iteration   7: 496103.748 ops/s
Iteration   8: 499001.480 ops/s
Iteration   9: 498244.828 ops/s
Iteration  10: 498885.205 ops/s
Iteration  11: 498634.567 ops/s
Iteration  12: 498887.216 ops/s
Iteration  13: 499340.185 ops/s
Iteration  14: 497836.507 ops/s
Iteration  15: 498311.132 ops/s
Iteration  16: 497641.158 ops/s
Iteration  17: 498521.878 ops/s
Iteration  18: 498018.879 ops/s
Iteration  19: 499016.938 ops/s
Iteration  20: 497470.368 ops/s
Iteration  21: 499265.218 ops/s
Iteration  22: 498880.894 ops/s
Iteration  23: 498336.841 ops/s
Iteration  24: 498937.215 ops/s
Iteration  25: 498124.643 ops/s
Iteration  26: 498404.142 ops/s
Iteration  27: 497682.380 ops/s
Iteration  28: 498797.227 ops/s
Iteration  29: 497880.941 ops/s
Iteration  30: 499048.851 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_corresponds":
  498345.979 ±(99.9%) 474.030 ops/s [Average]
  (min, avg, max) = (496103.748, 498345.979, 499340.185), stdev = 709.505
  CI (99.9%): [497871.949, 498820.009] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_corresponds  thrpt   30  498345.979 ± 474.030  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 743237.927 ops/s
# Warmup Iteration   2: 1320807.643 ops/s
# Warmup Iteration   3: 1464623.127 ops/s
# Warmup Iteration   4: 1466960.975 ops/s
# Warmup Iteration   5: 1477571.972 ops/s
# Warmup Iteration   6: 1238412.247 ops/s
# Warmup Iteration   7: 1479628.200 ops/s
# Warmup Iteration   8: 1476436.037 ops/s
# Warmup Iteration   9: 1479321.328 ops/s
# Warmup Iteration  10: 1470411.390 ops/s
# Warmup Iteration  11: 1477952.331 ops/s
# Warmup Iteration  12: 1426903.686 ops/s
# Warmup Iteration  13: 1478615.579 ops/s
# Warmup Iteration  14: 1476166.632 ops/s
# Warmup Iteration  15: 1472895.339 ops/s
# Warmup Iteration  16: 1468508.569 ops/s
# Warmup Iteration  17: 1479942.461 ops/s
# Warmup Iteration  18: 1478370.104 ops/s
# Warmup Iteration  19: 1477858.404 ops/s
# Warmup Iteration  20: 1476377.347 ops/s
# Warmup Iteration  21: 1477990.238 ops/s
# Warmup Iteration  22: 1478755.413 ops/s
# Warmup Iteration  23: 1478809.686 ops/s
# Warmup Iteration  24: 1478731.214 ops/s
# Warmup Iteration  25: 1477439.317 ops/s
# Warmup Iteration  26: 1478201.289 ops/s
# Warmup Iteration  27: 1480368.438 ops/s
# Warmup Iteration  28: 1479984.038 ops/s
# Warmup Iteration  29: 1480292.812 ops/s
# Warmup Iteration  30: 1480584.886 ops/s
Iteration   1: 1479679.372 ops/s
Iteration   2: 1477220.456 ops/s
Iteration   3: 1480703.185 ops/s
Iteration   4: 1481702.528 ops/s
Iteration   5: 1478792.706 ops/s
Iteration   6: 1478844.470 ops/s
Iteration   7: 1476657.287 ops/s
Iteration   8: 1480190.076 ops/s
Iteration   9: 1478186.113 ops/s
Iteration  10: 1481291.854 ops/s
Iteration  11: 1478157.094 ops/s
Iteration  12: 1481081.207 ops/s
Iteration  13: 1475622.261 ops/s
Iteration  14: 1478642.515 ops/s
Iteration  15: 1481239.085 ops/s
Iteration  16: 1478974.956 ops/s
Iteration  17: 1481407.881 ops/s
Iteration  18: 1480104.636 ops/s
Iteration  19: 1477757.670 ops/s
Iteration  20: 1479839.633 ops/s
Iteration  21: 1478911.317 ops/s
Iteration  22: 1478538.710 ops/s
Iteration  23: 1474904.539 ops/s
Iteration  24: 1475595.066 ops/s
Iteration  25: 1478189.259 ops/s
Iteration  26: 1476714.645 ops/s
Iteration  27: 1480002.909 ops/s
Iteration  28: 1471708.203 ops/s
Iteration  29: 1468479.613 ops/s
Iteration  30: 1467027.020 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_count":
  1477872.209 ±(99.9%) 2360.818 ops/s [Average]
  (min, avg, max) = (1467027.020, 1477872.209, 1481702.528), stdev = 3533.562
  CI (99.9%): [1475511.391, 1480233.027] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_count  thrpt   30  1477872.209 ± 2360.818  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 637896.666 ops/s
# Warmup Iteration   2: 1121379.262 ops/s
# Warmup Iteration   3: 1296848.488 ops/s
# Warmup Iteration   4: 1301224.765 ops/s
# Warmup Iteration   5: 1302643.022 ops/s
# Warmup Iteration   6: 1083677.880 ops/s
# Warmup Iteration   7: 1305705.535 ops/s
# Warmup Iteration   8: 1306083.217 ops/s
# Warmup Iteration   9: 1307550.959 ops/s
# Warmup Iteration  10: 1302223.328 ops/s
# Warmup Iteration  11: 1305457.243 ops/s
# Warmup Iteration  12: 1305896.615 ops/s
# Warmup Iteration  13: 1305095.688 ops/s
# Warmup Iteration  14: 1307236.483 ops/s
# Warmup Iteration  15: 1305826.962 ops/s
# Warmup Iteration  16: 1307108.099 ops/s
# Warmup Iteration  17: 1304582.324 ops/s
# Warmup Iteration  18: 1305108.267 ops/s
# Warmup Iteration  19: 1304140.389 ops/s
# Warmup Iteration  20: 1304631.251 ops/s
# Warmup Iteration  21: 1303770.168 ops/s
# Warmup Iteration  22: 1305443.801 ops/s
# Warmup Iteration  23: 1305203.612 ops/s
# Warmup Iteration  24: 1303995.846 ops/s
# Warmup Iteration  25: 1303935.818 ops/s
# Warmup Iteration  26: 1299334.689 ops/s
# Warmup Iteration  27: 1305313.821 ops/s
# Warmup Iteration  28: 1305727.216 ops/s
# Warmup Iteration  29: 1305493.384 ops/s
# Warmup Iteration  30: 1304648.524 ops/s
Iteration   1: 1307469.359 ops/s
Iteration   2: 1304195.485 ops/s
Iteration   3: 1305480.741 ops/s
Iteration   4: 1303603.564 ops/s
Iteration   5: 1305554.615 ops/s
Iteration   6: 1303441.253 ops/s
Iteration   7: 1306442.305 ops/s
Iteration   8: 1303700.253 ops/s
Iteration   9: 1304780.601 ops/s
Iteration  10: 1306655.007 ops/s
Iteration  11: 1303398.117 ops/s
Iteration  12: 1305859.124 ops/s
Iteration  13: 1302458.942 ops/s
Iteration  14: 1306757.798 ops/s
Iteration  15: 1302373.213 ops/s
Iteration  16: 1306056.233 ops/s
Iteration  17: 1305022.253 ops/s
Iteration  18: 1304947.327 ops/s
Iteration  19: 1307739.349 ops/s
Iteration  20: 1304172.170 ops/s
Iteration  21: 1306336.599 ops/s
Iteration  22: 1303939.632 ops/s
Iteration  23: 1307079.844 ops/s
Iteration  24: 1301164.569 ops/s
Iteration  25: 1303407.978 ops/s
Iteration  26: 1300854.945 ops/s
Iteration  27: 1301844.346 ops/s
Iteration  28: 1302059.712 ops/s
Iteration  29: 1300978.363 ops/s
Iteration  30: 1305237.947 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_countBy":
  1304433.722 ±(99.9%) 1325.563 ops/s [Average]
  (min, avg, max) = (1300854.945, 1304433.722, 1307739.349), stdev = 1984.040
  CI (99.9%): [1303108.159, 1305759.284] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_countBy  thrpt   30  1304433.722 ± 1325.563  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 224955.011 ops/s
# Warmup Iteration   2: 442043.712 ops/s
# Warmup Iteration   3: 493481.828 ops/s
# Warmup Iteration   4: 496583.669 ops/s
# Warmup Iteration   5: 435445.636 ops/s
# Warmup Iteration   6: 474905.543 ops/s
# Warmup Iteration   7: 498344.151 ops/s
# Warmup Iteration   8: 498112.517 ops/s
# Warmup Iteration   9: 497806.046 ops/s
# Warmup Iteration  10: 498308.797 ops/s
# Warmup Iteration  11: 497580.466 ops/s
# Warmup Iteration  12: 498380.665 ops/s
# Warmup Iteration  13: 498070.619 ops/s
# Warmup Iteration  14: 496717.020 ops/s
# Warmup Iteration  15: 497551.602 ops/s
# Warmup Iteration  16: 498568.088 ops/s
# Warmup Iteration  17: 497786.604 ops/s
# Warmup Iteration  18: 498292.865 ops/s
# Warmup Iteration  19: 498200.538 ops/s
# Warmup Iteration  20: 497825.442 ops/s
# Warmup Iteration  21: 498483.947 ops/s
# Warmup Iteration  22: 498600.872 ops/s
# Warmup Iteration  23: 497952.498 ops/s
# Warmup Iteration  24: 496979.953 ops/s
# Warmup Iteration  25: 498493.907 ops/s
# Warmup Iteration  26: 498189.296 ops/s
# Warmup Iteration  27: 498027.072 ops/s
# Warmup Iteration  28: 498562.015 ops/s
# Warmup Iteration  29: 498466.496 ops/s
# Warmup Iteration  30: 498640.913 ops/s
Iteration   1: 496568.368 ops/s
Iteration   2: 497655.044 ops/s
Iteration   3: 496788.106 ops/s
Iteration   4: 497105.356 ops/s
Iteration   5: 496861.084 ops/s
Iteration   6: 498096.007 ops/s
Iteration   7: 498181.495 ops/s
Iteration   8: 498531.860 ops/s
Iteration   9: 496317.392 ops/s
Iteration  10: 497505.791 ops/s
Iteration  11: 499116.435 ops/s
Iteration  12: 498132.761 ops/s
Iteration  13: 496380.413 ops/s
Iteration  14: 499335.655 ops/s
Iteration  15: 497257.373 ops/s
Iteration  16: 496964.444 ops/s
Iteration  17: 496771.942 ops/s
Iteration  18: 496648.317 ops/s
Iteration  19: 498644.700 ops/s
Iteration  20: 497336.959 ops/s
Iteration  21: 497186.267 ops/s
Iteration  22: 498170.250 ops/s
Iteration  23: 497578.852 ops/s
Iteration  24: 497633.353 ops/s
Iteration  25: 498384.862 ops/s
Iteration  26: 497518.635 ops/s
Iteration  27: 497783.263 ops/s
Iteration  28: 497978.848 ops/s
Iteration  29: 496950.969 ops/s
Iteration  30: 497047.104 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_countByEach":
  497547.730 ±(99.9%) 525.236 ops/s [Average]
  (min, avg, max) = (496317.392, 497547.730, 499335.655), stdev = 786.148
  CI (99.9%): [497022.494, 498072.966] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_countByEach  thrpt   30  497547.730 ± 525.236  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 650918.344 ops/s
# Warmup Iteration   2: 1111413.124 ops/s
# Warmup Iteration   3: 1305615.609 ops/s
# Warmup Iteration   4: 1309998.278 ops/s
# Warmup Iteration   5: 1313240.010 ops/s
# Warmup Iteration   6: 1084291.194 ops/s
# Warmup Iteration   7: 1305390.681 ops/s
# Warmup Iteration   8: 1308230.802 ops/s
# Warmup Iteration   9: 1315568.387 ops/s
# Warmup Iteration  10: 1316308.510 ops/s
# Warmup Iteration  11: 1314013.403 ops/s
# Warmup Iteration  12: 1314519.504 ops/s
# Warmup Iteration  13: 1312288.309 ops/s
# Warmup Iteration  14: 1312854.829 ops/s
# Warmup Iteration  15: 1315110.080 ops/s
# Warmup Iteration  16: 1314560.874 ops/s
# Warmup Iteration  17: 1313713.598 ops/s
# Warmup Iteration  18: 1316407.654 ops/s
# Warmup Iteration  19: 1313973.530 ops/s
# Warmup Iteration  20: 1316050.450 ops/s
# Warmup Iteration  21: 1315432.711 ops/s
# Warmup Iteration  22: 1316051.117 ops/s
# Warmup Iteration  23: 1311711.296 ops/s
# Warmup Iteration  24: 1312945.996 ops/s
# Warmup Iteration  25: 1314146.289 ops/s
# Warmup Iteration  26: 1315665.313 ops/s
# Warmup Iteration  27: 1314253.669 ops/s
# Warmup Iteration  28: 1311534.739 ops/s
# Warmup Iteration  29: 1315576.893 ops/s
# Warmup Iteration  30: 1317073.357 ops/s
Iteration   1: 1317139.218 ops/s
Iteration   2: 1313554.858 ops/s
Iteration   3: 1312022.536 ops/s
Iteration   4: 1317983.483 ops/s
Iteration   5: 1315852.140 ops/s
Iteration   6: 1312856.672 ops/s
Iteration   7: 1315782.674 ops/s
Iteration   8: 1317539.146 ops/s
Iteration   9: 1316123.999 ops/s
Iteration  10: 1315146.922 ops/s
Iteration  11: 1314609.123 ops/s
Iteration  12: 1315350.977 ops/s
Iteration  13: 1315008.055 ops/s
Iteration  14: 1317968.188 ops/s
Iteration  15: 1313997.349 ops/s
Iteration  16: 1316899.255 ops/s
Iteration  17: 1316495.557 ops/s
Iteration  18: 1311445.246 ops/s
Iteration  19: 1316829.208 ops/s
Iteration  20: 1314436.226 ops/s
Iteration  21: 1316619.600 ops/s
Iteration  22: 1313455.282 ops/s
Iteration  23: 1317045.589 ops/s
Iteration  24: 1314186.878 ops/s
Iteration  25: 1315864.577 ops/s
Iteration  26: 1311540.040 ops/s
Iteration  27: 1314375.634 ops/s
Iteration  28: 1317331.073 ops/s
Iteration  29: 1313876.519 ops/s
Iteration  30: 1315727.828 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_countByWith":
  1315235.462 ±(99.9%) 1233.547 ops/s [Average]
  (min, avg, max) = (1311445.246, 1315235.462, 1317983.483), stdev = 1846.315
  CI (99.9%): [1314001.915, 1316469.009] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_countByWith  thrpt   30  1315235.462 ± 1233.547  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 780055.944 ops/s
# Warmup Iteration   2: 1301921.510 ops/s
# Warmup Iteration   3: 1526559.199 ops/s
# Warmup Iteration   4: 1516094.311 ops/s
# Warmup Iteration   5: 1533212.909 ops/s
# Warmup Iteration   6: 1285919.155 ops/s
# Warmup Iteration   7: 1535728.655 ops/s
# Warmup Iteration   8: 1535175.241 ops/s
# Warmup Iteration   9: 1534634.533 ops/s
# Warmup Iteration  10: 1534605.808 ops/s
# Warmup Iteration  11: 1536511.799 ops/s
# Warmup Iteration  12: 1533955.483 ops/s
# Warmup Iteration  13: 1526883.201 ops/s
# Warmup Iteration  14: 1532819.220 ops/s
# Warmup Iteration  15: 1536599.274 ops/s
# Warmup Iteration  16: 1533303.150 ops/s
# Warmup Iteration  17: 1534901.473 ops/s
# Warmup Iteration  18: 1534748.486 ops/s
# Warmup Iteration  19: 1530429.444 ops/s
# Warmup Iteration  20: 1533257.102 ops/s
# Warmup Iteration  21: 1535161.232 ops/s
# Warmup Iteration  22: 1535026.922 ops/s
# Warmup Iteration  23: 1528753.954 ops/s
# Warmup Iteration  24: 1524903.740 ops/s
# Warmup Iteration  25: 1534614.440 ops/s
# Warmup Iteration  26: 1533701.640 ops/s
# Warmup Iteration  27: 1534592.464 ops/s
# Warmup Iteration  28: 1535283.263 ops/s
# Warmup Iteration  29: 1535143.672 ops/s
# Warmup Iteration  30: 1532936.672 ops/s
Iteration   1: 1533734.048 ops/s
Iteration   2: 1536735.202 ops/s
Iteration   3: 1532335.161 ops/s
Iteration   4: 1536007.193 ops/s
Iteration   5: 1535183.518 ops/s
Iteration   6: 1534699.407 ops/s
Iteration   7: 1534891.748 ops/s
Iteration   8: 1534466.387 ops/s
Iteration   9: 1538605.656 ops/s
Iteration  10: 1534847.036 ops/s
Iteration  11: 1534409.448 ops/s
Iteration  12: 1533322.954 ops/s
Iteration  13: 1532638.842 ops/s
Iteration  14: 1533480.529 ops/s
Iteration  15: 1536100.846 ops/s
Iteration  16: 1532957.744 ops/s
Iteration  17: 1530140.683 ops/s
Iteration  18: 1538473.910 ops/s
Iteration  19: 1529588.504 ops/s
Iteration  20: 1535479.924 ops/s
Iteration  21: 1534072.257 ops/s
Iteration  22: 1537161.665 ops/s
Iteration  23: 1533237.634 ops/s
Iteration  24: 1533335.061 ops/s
Iteration  25: 1531540.555 ops/s
Iteration  26: 1537302.462 ops/s
Iteration  27: 1531758.084 ops/s
Iteration  28: 1533409.000 ops/s
Iteration  29: 1535019.655 ops/s
Iteration  30: 1536494.803 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_countWith":
  1534380.997 ±(99.9%) 1469.320 ops/s [Average]
  (min, avg, max) = (1529588.504, 1534380.997, 1538605.656), stdev = 2199.209
  CI (99.9%): [1532911.677, 1535850.317] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_countWith  thrpt   30  1534380.997 ± 1469.320  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 437567.751 ops/s
# Warmup Iteration   2: 656810.281 ops/s
# Warmup Iteration   3: 802404.093 ops/s
# Warmup Iteration   4: 797984.749 ops/s
# Warmup Iteration   5: 802498.602 ops/s
# Warmup Iteration   6: 799858.770 ops/s
# Warmup Iteration   7: 669429.998 ops/s
# Warmup Iteration   8: 803337.049 ops/s
# Warmup Iteration   9: 803124.083 ops/s
# Warmup Iteration  10: 802524.590 ops/s
# Warmup Iteration  11: 801545.126 ops/s
# Warmup Iteration  12: 802450.109 ops/s
# Warmup Iteration  13: 802849.424 ops/s
# Warmup Iteration  14: 801546.353 ops/s
# Warmup Iteration  15: 802461.075 ops/s
# Warmup Iteration  16: 802343.132 ops/s
# Warmup Iteration  17: 803189.988 ops/s
# Warmup Iteration  18: 802869.407 ops/s
# Warmup Iteration  19: 803049.676 ops/s
# Warmup Iteration  20: 803095.229 ops/s
# Warmup Iteration  21: 803548.474 ops/s
# Warmup Iteration  22: 802788.280 ops/s
# Warmup Iteration  23: 802315.441 ops/s
# Warmup Iteration  24: 802584.653 ops/s
# Warmup Iteration  25: 801864.949 ops/s
# Warmup Iteration  26: 802373.507 ops/s
# Warmup Iteration  27: 802489.517 ops/s
# Warmup Iteration  28: 802843.595 ops/s
# Warmup Iteration  29: 802552.058 ops/s
# Warmup Iteration  30: 802454.884 ops/s
Iteration   1: 802092.996 ops/s
Iteration   2: 802662.463 ops/s
Iteration   3: 802109.320 ops/s
Iteration   4: 801197.858 ops/s
Iteration   5: 803108.943 ops/s
Iteration   6: 803849.081 ops/s
Iteration   7: 803732.632 ops/s
Iteration   8: 802889.981 ops/s
Iteration   9: 804216.417 ops/s
Iteration  10: 802543.515 ops/s
Iteration  11: 802478.446 ops/s
Iteration  12: 803906.867 ops/s
Iteration  13: 801846.467 ops/s
Iteration  14: 804002.846 ops/s
Iteration  15: 802278.568 ops/s
Iteration  16: 805278.067 ops/s
Iteration  17: 804052.342 ops/s
Iteration  18: 803442.360 ops/s
Iteration  19: 804619.920 ops/s
Iteration  20: 802742.753 ops/s
Iteration  21: 804409.222 ops/s
Iteration  22: 801141.775 ops/s
Iteration  23: 803612.876 ops/s
Iteration  24: 802066.686 ops/s
Iteration  25: 803831.973 ops/s
Iteration  26: 804402.942 ops/s
Iteration  27: 792865.629 ops/s
Iteration  28: 805875.191 ops/s
Iteration  29: 799278.048 ops/s
Iteration  30: 803779.320 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detect":
  802810.517 ±(99.9%) 1543.520 ops/s [Average]
  (min, avg, max) = (792865.629, 802810.517, 805875.191), stdev = 2310.269
  CI (99.9%): [801266.996, 804354.037] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_detect  thrpt   30  802810.517 ± 1543.520  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 286103.156 ops/s
# Warmup Iteration   2: 442372.058 ops/s
# Warmup Iteration   3: 527487.414 ops/s
# Warmup Iteration   4: 526065.611 ops/s
# Warmup Iteration   5: 528624.531 ops/s
# Warmup Iteration   6: 528855.052 ops/s
# Warmup Iteration   7: 444130.867 ops/s
# Warmup Iteration   8: 528933.491 ops/s
# Warmup Iteration   9: 529157.596 ops/s
# Warmup Iteration  10: 528811.540 ops/s
# Warmup Iteration  11: 528555.665 ops/s
# Warmup Iteration  12: 528463.845 ops/s
# Warmup Iteration  13: 527546.040 ops/s
# Warmup Iteration  14: 527332.269 ops/s
# Warmup Iteration  15: 527640.311 ops/s
# Warmup Iteration  16: 528675.776 ops/s
# Warmup Iteration  17: 526722.618 ops/s
# Warmup Iteration  18: 526626.140 ops/s
# Warmup Iteration  19: 527699.449 ops/s
# Warmup Iteration  20: 528243.261 ops/s
# Warmup Iteration  21: 529540.331 ops/s
# Warmup Iteration  22: 528650.249 ops/s
# Warmup Iteration  23: 528655.921 ops/s
# Warmup Iteration  24: 528355.230 ops/s
# Warmup Iteration  25: 529103.925 ops/s
# Warmup Iteration  26: 529150.323 ops/s
# Warmup Iteration  27: 524773.848 ops/s
# Warmup Iteration  28: 528820.906 ops/s
# Warmup Iteration  29: 526020.177 ops/s
# Warmup Iteration  30: 527998.542 ops/s
Iteration   1: 527673.946 ops/s
Iteration   2: 529108.021 ops/s
Iteration   3: 528580.286 ops/s
Iteration   4: 529559.476 ops/s
Iteration   5: 529656.600 ops/s
Iteration   6: 529052.517 ops/s
Iteration   7: 530037.377 ops/s
Iteration   8: 524087.932 ops/s
Iteration   9: 530124.093 ops/s
Iteration  10: 529159.054 ops/s
Iteration  11: 529908.913 ops/s
Iteration  12: 527806.352 ops/s
Iteration  13: 526432.861 ops/s
Iteration  14: 527641.696 ops/s
Iteration  15: 527680.156 ops/s
Iteration  16: 527888.905 ops/s
Iteration  17: 527850.646 ops/s
Iteration  18: 527548.947 ops/s
Iteration  19: 528810.455 ops/s
Iteration  20: 530208.897 ops/s
Iteration  21: 528931.205 ops/s
Iteration  22: 529687.876 ops/s
Iteration  23: 529284.805 ops/s
Iteration  24: 528832.814 ops/s
Iteration  25: 525993.524 ops/s
Iteration  26: 529037.141 ops/s
Iteration  27: 528292.925 ops/s
Iteration  28: 529606.638 ops/s
Iteration  29: 528658.722 ops/s
Iteration  30: 529688.156 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detectIfNone":
  528561.031 ±(99.9%) 903.871 ops/s [Average]
  (min, avg, max) = (524087.932, 528561.031, 530208.897), stdev = 1352.872
  CI (99.9%): [527657.160, 529464.902] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_detectIfNone  thrpt   30  528561.031 ± 903.871  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 349323.301 ops/s
# Warmup Iteration   2: 386531.607 ops/s
# Warmup Iteration   3: 539949.631 ops/s
# Warmup Iteration   4: 547520.368 ops/s
# Warmup Iteration   5: 544535.271 ops/s
# Warmup Iteration   6: 545825.940 ops/s
# Warmup Iteration   7: 546625.826 ops/s
# Warmup Iteration   8: 546429.826 ops/s
# Warmup Iteration   9: 546529.157 ops/s
# Warmup Iteration  10: 548198.843 ops/s
# Warmup Iteration  11: 468637.377 ops/s
# Warmup Iteration  12: 535542.659 ops/s
# Warmup Iteration  13: 548780.991 ops/s
# Warmup Iteration  14: 547285.840 ops/s
# Warmup Iteration  15: 548708.028 ops/s
# Warmup Iteration  16: 547083.243 ops/s
# Warmup Iteration  17: 546053.989 ops/s
# Warmup Iteration  18: 545976.711 ops/s
# Warmup Iteration  19: 545144.964 ops/s
# Warmup Iteration  20: 544750.715 ops/s
# Warmup Iteration  21: 546232.479 ops/s
# Warmup Iteration  22: 546851.231 ops/s
# Warmup Iteration  23: 546337.252 ops/s
# Warmup Iteration  24: 546224.640 ops/s
# Warmup Iteration  25: 545909.611 ops/s
# Warmup Iteration  26: 546560.629 ops/s
# Warmup Iteration  27: 546260.270 ops/s
# Warmup Iteration  28: 544535.140 ops/s
# Warmup Iteration  29: 544536.803 ops/s
# Warmup Iteration  30: 546283.065 ops/s
Iteration   1: 547231.910 ops/s
Iteration   2: 546624.053 ops/s
Iteration   3: 545736.313 ops/s
Iteration   4: 546343.244 ops/s
Iteration   5: 547268.589 ops/s
Iteration   6: 547160.455 ops/s
Iteration   7: 546944.393 ops/s
Iteration   8: 546178.398 ops/s
Iteration   9: 547498.718 ops/s
Iteration  10: 547492.979 ops/s
Iteration  11: 547562.505 ops/s
Iteration  12: 546322.565 ops/s
Iteration  13: 547278.139 ops/s
Iteration  14: 547723.164 ops/s
Iteration  15: 545871.225 ops/s
Iteration  16: 547235.428 ops/s
Iteration  17: 546896.709 ops/s
Iteration  18: 545220.695 ops/s
Iteration  19: 545360.659 ops/s
Iteration  20: 545914.664 ops/s
Iteration  21: 545911.929 ops/s
Iteration  22: 546392.646 ops/s
Iteration  23: 544906.058 ops/s
Iteration  24: 547687.312 ops/s
Iteration  25: 547889.613 ops/s
Iteration  26: 547861.045 ops/s
Iteration  27: 546886.843 ops/s
Iteration  28: 547087.428 ops/s
Iteration  29: 547888.489 ops/s
Iteration  30: 546319.410 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detectIndex":
  546756.519 ±(99.9%) 564.129 ops/s [Average]
  (min, avg, max) = (544906.058, 546756.519, 547889.613), stdev = 844.362
  CI (99.9%): [546192.390, 547320.648] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_detectIndex  thrpt   30  546756.519 ± 564.129  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 281580.368 ops/s
# Warmup Iteration   2: 353911.780 ops/s
# Warmup Iteration   3: 439221.467 ops/s
# Warmup Iteration   4: 438830.716 ops/s
# Warmup Iteration   5: 442508.327 ops/s
# Warmup Iteration   6: 439729.683 ops/s
# Warmup Iteration   7: 440987.295 ops/s
# Warmup Iteration   8: 441003.800 ops/s
# Warmup Iteration   9: 397836.010 ops/s
# Warmup Iteration  10: 420693.495 ops/s
# Warmup Iteration  11: 441492.194 ops/s
# Warmup Iteration  12: 440609.345 ops/s
# Warmup Iteration  13: 440823.883 ops/s
# Warmup Iteration  14: 440344.417 ops/s
# Warmup Iteration  15: 442036.674 ops/s
# Warmup Iteration  16: 439800.530 ops/s
# Warmup Iteration  17: 455380.933 ops/s
# Warmup Iteration  18: 455104.284 ops/s
# Warmup Iteration  19: 455067.392 ops/s
# Warmup Iteration  20: 454410.419 ops/s
# Warmup Iteration  21: 455371.061 ops/s
# Warmup Iteration  22: 452923.488 ops/s
# Warmup Iteration  23: 454877.729 ops/s
# Warmup Iteration  24: 455075.814 ops/s
# Warmup Iteration  25: 455506.028 ops/s
# Warmup Iteration  26: 454495.039 ops/s
# Warmup Iteration  27: 454072.127 ops/s
# Warmup Iteration  28: 456049.966 ops/s
# Warmup Iteration  29: 456486.567 ops/s
# Warmup Iteration  30: 455069.943 ops/s
Iteration   1: 452819.952 ops/s
Iteration   2: 454765.674 ops/s
Iteration   3: 455220.281 ops/s
Iteration   4: 453528.411 ops/s
Iteration   5: 454653.712 ops/s
Iteration   6: 456137.046 ops/s
Iteration   7: 453914.333 ops/s
Iteration   8: 454974.556 ops/s
Iteration   9: 456383.874 ops/s
Iteration  10: 454437.797 ops/s
Iteration  11: 455869.943 ops/s
Iteration  12: 455081.810 ops/s
Iteration  13: 454100.907 ops/s
Iteration  14: 453722.827 ops/s
Iteration  15: 454144.985 ops/s
Iteration  16: 453042.387 ops/s
Iteration  17: 455003.133 ops/s
Iteration  18: 454172.738 ops/s
Iteration  19: 456797.498 ops/s
Iteration  20: 455822.587 ops/s
Iteration  21: 456526.746 ops/s
Iteration  22: 455915.348 ops/s
Iteration  23: 457062.341 ops/s
Iteration  24: 455250.784 ops/s
Iteration  25: 455488.141 ops/s
Iteration  26: 454708.700 ops/s
Iteration  27: 454403.844 ops/s
Iteration  28: 454533.531 ops/s
Iteration  29: 455226.785 ops/s
Iteration  30: 450703.979 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detectOptional":
  454813.822 ±(99.9%) 877.729 ops/s [Average]
  (min, avg, max) = (450703.979, 454813.822, 457062.341), stdev = 1313.743
  CI (99.9%): [453936.093, 455691.550] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_detectOptional  thrpt   30  454813.822 ± 877.729  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 323498.026 ops/s
# Warmup Iteration   2: 475309.794 ops/s
# Warmup Iteration   3: 580450.171 ops/s
# Warmup Iteration   4: 578329.884 ops/s
# Warmup Iteration   5: 578813.802 ops/s
# Warmup Iteration   6: 578291.176 ops/s
# Warmup Iteration   7: 509082.516 ops/s
# Warmup Iteration   8: 562035.830 ops/s
# Warmup Iteration   9: 581524.178 ops/s
# Warmup Iteration  10: 582380.050 ops/s
# Warmup Iteration  11: 581771.805 ops/s
# Warmup Iteration  12: 582379.989 ops/s
# Warmup Iteration  13: 582160.506 ops/s
# Warmup Iteration  14: 582530.624 ops/s
# Warmup Iteration  15: 581642.521 ops/s
# Warmup Iteration  16: 582123.520 ops/s
# Warmup Iteration  17: 581676.618 ops/s
# Warmup Iteration  18: 581456.715 ops/s
# Warmup Iteration  19: 581334.568 ops/s
# Warmup Iteration  20: 581625.036 ops/s
# Warmup Iteration  21: 580015.471 ops/s
# Warmup Iteration  22: 580680.333 ops/s
# Warmup Iteration  23: 580757.839 ops/s
# Warmup Iteration  24: 582050.966 ops/s
# Warmup Iteration  25: 581337.989 ops/s
# Warmup Iteration  26: 579987.563 ops/s
# Warmup Iteration  27: 581805.632 ops/s
# Warmup Iteration  28: 582376.626 ops/s
# Warmup Iteration  29: 582413.012 ops/s
# Warmup Iteration  30: 581624.533 ops/s
Iteration   1: 580684.774 ops/s
Iteration   2: 581339.227 ops/s
Iteration   3: 581366.080 ops/s
Iteration   4: 581079.784 ops/s
Iteration   5: 581699.059 ops/s
Iteration   6: 579266.364 ops/s
Iteration   7: 579487.832 ops/s
Iteration   8: 581300.242 ops/s
Iteration   9: 582021.338 ops/s
Iteration  10: 581636.501 ops/s
Iteration  11: 581313.873 ops/s
Iteration  12: 582360.791 ops/s
Iteration  13: 581406.256 ops/s
Iteration  14: 582743.060 ops/s
Iteration  15: 581281.308 ops/s
Iteration  16: 582237.447 ops/s
Iteration  17: 581722.856 ops/s
Iteration  18: 578469.543 ops/s
Iteration  19: 581404.100 ops/s
Iteration  20: 580795.604 ops/s
Iteration  21: 582188.028 ops/s
Iteration  22: 581325.163 ops/s
Iteration  23: 582103.280 ops/s
Iteration  24: 583826.354 ops/s
Iteration  25: 581958.451 ops/s
Iteration  26: 579007.669 ops/s
Iteration  27: 582260.380 ops/s
Iteration  28: 582480.572 ops/s
Iteration  29: 579168.874 ops/s
Iteration  30: 582729.851 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detectWith":
  581355.489 ±(99.9%) 818.403 ops/s [Average]
  (min, avg, max) = (578469.543, 581355.489, 583826.354), stdev = 1224.948
  CI (99.9%): [580537.085, 582173.892] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_detectWith  thrpt   30  581355.489 ± 818.403  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detectWithIfNoneBlock$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detectWithIfNoneBlock

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 337550.585 ops/s
# Warmup Iteration   2: 505933.143 ops/s
# Warmup Iteration   3: 600986.718 ops/s
# Warmup Iteration   4: 598492.240 ops/s
# Warmup Iteration   5: 601669.956 ops/s
# Warmup Iteration   6: 601984.843 ops/s
# Warmup Iteration   7: 507592.430 ops/s
# Warmup Iteration   8: 601098.286 ops/s
# Warmup Iteration   9: 602337.824 ops/s
# Warmup Iteration  10: 603269.828 ops/s
# Warmup Iteration  11: 602103.978 ops/s
# Warmup Iteration  12: 601602.239 ops/s
# Warmup Iteration  13: 601691.019 ops/s
# Warmup Iteration  14: 602490.266 ops/s
# Warmup Iteration  15: 603518.994 ops/s
# Warmup Iteration  16: 601613.661 ops/s
# Warmup Iteration  17: 602612.234 ops/s
# Warmup Iteration  18: 602336.962 ops/s
# Warmup Iteration  19: 599450.454 ops/s
# Warmup Iteration  20: 602851.381 ops/s
# Warmup Iteration  21: 601152.369 ops/s
# Warmup Iteration  22: 603553.868 ops/s
# Warmup Iteration  23: 602937.045 ops/s
# Warmup Iteration  24: 602588.947 ops/s
# Warmup Iteration  25: 602718.778 ops/s
# Warmup Iteration  26: 598747.505 ops/s
# Warmup Iteration  27: 599947.225 ops/s
# Warmup Iteration  28: 601557.868 ops/s
# Warmup Iteration  29: 602743.250 ops/s
# Warmup Iteration  30: 602287.114 ops/s
Iteration   1: 602612.441 ops/s
Iteration   2: 602762.131 ops/s
Iteration   3: 600806.322 ops/s
Iteration   4: 601895.484 ops/s
Iteration   5: 603219.654 ops/s
Iteration   6: 602409.026 ops/s
Iteration   7: 601234.659 ops/s
Iteration   8: 603556.884 ops/s
Iteration   9: 603052.136 ops/s
Iteration  10: 602349.183 ops/s
Iteration  11: 603327.804 ops/s
Iteration  12: 601400.037 ops/s
Iteration  13: 603200.307 ops/s
Iteration  14: 601074.597 ops/s
Iteration  15: 603720.597 ops/s
Iteration  16: 601684.151 ops/s
Iteration  17: 603109.695 ops/s
Iteration  18: 603685.888 ops/s
Iteration  19: 602308.338 ops/s
Iteration  20: 600780.507 ops/s
Iteration  21: 602405.717 ops/s
Iteration  22: 603126.959 ops/s
Iteration  23: 601983.000 ops/s
Iteration  24: 603489.804 ops/s
Iteration  25: 603895.009 ops/s
Iteration  26: 601960.568 ops/s
Iteration  27: 603427.288 ops/s
Iteration  28: 602031.959 ops/s
Iteration  29: 602492.136 ops/s
Iteration  30: 600058.130 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detectWithIfNoneBlock":
  602435.347 ±(99.9%) 668.503 ops/s [Average]
  (min, avg, max) = (600058.130, 602435.347, 603895.009), stdev = 1000.583
  CI (99.9%): [601766.845, 603103.850] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_detectWithIfNoneBlock  thrpt   30  602435.347 ± 668.503  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detectWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detectWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 569521.804 ops/s
# Warmup Iteration   2: 774060.018 ops/s
# Warmup Iteration   3: 966678.444 ops/s
# Warmup Iteration   4: 964551.133 ops/s
# Warmup Iteration   5: 971484.664 ops/s
# Warmup Iteration   6: 968479.438 ops/s
# Warmup Iteration   7: 970451.888 ops/s
# Warmup Iteration   8: 839993.759 ops/s
# Warmup Iteration   9: 947425.862 ops/s
# Warmup Iteration  10: 972036.341 ops/s
# Warmup Iteration  11: 972712.764 ops/s
# Warmup Iteration  12: 972364.750 ops/s
# Warmup Iteration  13: 968384.691 ops/s
# Warmup Iteration  14: 970893.259 ops/s
# Warmup Iteration  15: 971024.126 ops/s
# Warmup Iteration  16: 972649.036 ops/s
# Warmup Iteration  17: 970010.366 ops/s
# Warmup Iteration  18: 967624.465 ops/s
# Warmup Iteration  19: 970137.730 ops/s
# Warmup Iteration  20: 972948.058 ops/s
# Warmup Iteration  21: 972559.190 ops/s
# Warmup Iteration  22: 971938.338 ops/s
# Warmup Iteration  23: 971053.509 ops/s
# Warmup Iteration  24: 967954.556 ops/s
# Warmup Iteration  25: 971220.993 ops/s
# Warmup Iteration  26: 971308.652 ops/s
# Warmup Iteration  27: 971354.450 ops/s
# Warmup Iteration  28: 971258.477 ops/s
# Warmup Iteration  29: 970810.781 ops/s
# Warmup Iteration  30: 969123.351 ops/s
Iteration   1: 968446.494 ops/s
Iteration   2: 967581.765 ops/s
Iteration   3: 970299.247 ops/s
Iteration   4: 969567.232 ops/s
Iteration   5: 970140.796 ops/s
Iteration   6: 970150.600 ops/s
Iteration   7: 970773.904 ops/s
Iteration   8: 969638.045 ops/s
Iteration   9: 970490.381 ops/s
Iteration  10: 969268.744 ops/s
Iteration  11: 969768.739 ops/s
Iteration  12: 971799.511 ops/s
Iteration  13: 969303.743 ops/s
Iteration  14: 972392.449 ops/s
Iteration  15: 973021.227 ops/s
Iteration  16: 964872.089 ops/s
Iteration  17: 971215.870 ops/s
Iteration  18: 970175.032 ops/s
Iteration  19: 972068.642 ops/s
Iteration  20: 971800.882 ops/s
Iteration  21: 969521.145 ops/s
Iteration  22: 972780.399 ops/s
Iteration  23: 971763.627 ops/s
Iteration  24: 971591.247 ops/s
Iteration  25: 973372.745 ops/s
Iteration  26: 971251.804 ops/s
Iteration  27: 972248.765 ops/s
Iteration  28: 972999.473 ops/s
Iteration  29: 970692.141 ops/s
Iteration  30: 972582.359 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detectWithOccurrences":
  970719.303 ±(99.9%) 1217.265 ops/s [Average]
  (min, avg, max) = (964872.089, 970719.303, 973372.745), stdev = 1821.945
  CI (99.9%): [969502.038, 971936.568] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_detectWithOccurrences  thrpt   30  970719.303 ± 1217.265  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 274982.719 ops/s
# Warmup Iteration   2: 347086.462 ops/s
# Warmup Iteration   3: 437000.603 ops/s
# Warmup Iteration   4: 437270.990 ops/s
# Warmup Iteration   5: 433224.101 ops/s
# Warmup Iteration   6: 436463.893 ops/s
# Warmup Iteration   7: 435885.720 ops/s
# Warmup Iteration   8: 435991.220 ops/s
# Warmup Iteration   9: 429279.616 ops/s
# Warmup Iteration  10: 383275.690 ops/s
# Warmup Iteration  11: 438499.005 ops/s
# Warmup Iteration  12: 437045.100 ops/s
# Warmup Iteration  13: 436796.974 ops/s
# Warmup Iteration  14: 437717.009 ops/s
# Warmup Iteration  15: 439179.893 ops/s
# Warmup Iteration  16: 437678.090 ops/s
# Warmup Iteration  17: 451351.189 ops/s
# Warmup Iteration  18: 450459.771 ops/s
# Warmup Iteration  19: 450407.645 ops/s
# Warmup Iteration  20: 450369.932 ops/s
# Warmup Iteration  21: 450371.794 ops/s
# Warmup Iteration  22: 450213.427 ops/s
# Warmup Iteration  23: 449291.318 ops/s
# Warmup Iteration  24: 449975.918 ops/s
# Warmup Iteration  25: 450842.144 ops/s
# Warmup Iteration  26: 450876.463 ops/s
# Warmup Iteration  27: 450781.001 ops/s
# Warmup Iteration  28: 450753.939 ops/s
# Warmup Iteration  29: 451504.103 ops/s
# Warmup Iteration  30: 450871.569 ops/s
Iteration   1: 451391.818 ops/s
Iteration   2: 449028.929 ops/s
Iteration   3: 449134.017 ops/s
Iteration   4: 449308.301 ops/s
Iteration   5: 449502.834 ops/s
Iteration   6: 449378.634 ops/s
Iteration   7: 451321.925 ops/s
Iteration   8: 451035.585 ops/s
Iteration   9: 450929.148 ops/s
Iteration  10: 450789.766 ops/s
Iteration  11: 451410.188 ops/s
Iteration  12: 449010.985 ops/s
Iteration  13: 449292.149 ops/s
Iteration  14: 450696.599 ops/s
Iteration  15: 451025.761 ops/s
Iteration  16: 449146.339 ops/s
Iteration  17: 451919.790 ops/s
Iteration  18: 450706.499 ops/s
Iteration  19: 449630.299 ops/s
Iteration  20: 452031.667 ops/s
Iteration  21: 450518.869 ops/s
Iteration  22: 449954.253 ops/s
Iteration  23: 451054.794 ops/s
Iteration  24: 451282.805 ops/s
Iteration  25: 450803.648 ops/s
Iteration  26: 452662.224 ops/s
Iteration  27: 451305.507 ops/s
Iteration  28: 450558.232 ops/s
Iteration  29: 452260.756 ops/s
Iteration  30: 450843.915 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_detectWithOptional":
  450597.875 ±(99.9%) 691.994 ops/s [Average]
  (min, avg, max) = (449010.985, 450597.875, 452662.224), stdev = 1035.744
  CI (99.9%): [449905.881, 451289.868] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_detectWithOptional  thrpt   30  450597.875 ± 691.994  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 592998.450 ops/s
# Warmup Iteration   2: 1140157.394 ops/s
# Warmup Iteration   3: 1279555.127 ops/s
# Warmup Iteration   4: 1286308.705 ops/s
# Warmup Iteration   5: 1210527.548 ops/s
# Warmup Iteration   6: 1159141.568 ops/s
# Warmup Iteration   7: 1283959.039 ops/s
# Warmup Iteration   8: 1283191.305 ops/s
# Warmup Iteration   9: 1288917.749 ops/s
# Warmup Iteration  10: 1286797.146 ops/s
# Warmup Iteration  11: 1287898.419 ops/s
# Warmup Iteration  12: 1281626.935 ops/s
# Warmup Iteration  13: 1289144.362 ops/s
# Warmup Iteration  14: 1289544.954 ops/s
# Warmup Iteration  15: 1286713.537 ops/s
# Warmup Iteration  16: 1278514.343 ops/s
# Warmup Iteration  17: 1286895.221 ops/s
# Warmup Iteration  18: 1287591.598 ops/s
# Warmup Iteration  19: 1288853.262 ops/s
# Warmup Iteration  20: 1282213.829 ops/s
# Warmup Iteration  21: 1287338.863 ops/s
# Warmup Iteration  22: 1283853.103 ops/s
# Warmup Iteration  23: 1289097.468 ops/s
# Warmup Iteration  24: 1288027.157 ops/s
# Warmup Iteration  25: 1285665.607 ops/s
# Warmup Iteration  26: 1286655.442 ops/s
# Warmup Iteration  27: 1287781.647 ops/s
# Warmup Iteration  28: 1287442.412 ops/s
# Warmup Iteration  29: 1283537.481 ops/s
# Warmup Iteration  30: 1284803.313 ops/s
Iteration   1: 1288487.422 ops/s
Iteration   2: 1289262.261 ops/s
Iteration   3: 1283384.934 ops/s
Iteration   4: 1283232.883 ops/s
Iteration   5: 1288721.301 ops/s
Iteration   6: 1282889.844 ops/s
Iteration   7: 1288154.170 ops/s
Iteration   8: 1283846.473 ops/s
Iteration   9: 1285705.240 ops/s
Iteration  10: 1289035.974 ops/s
Iteration  11: 1287927.302 ops/s
Iteration  12: 1286224.657 ops/s
Iteration  13: 1287344.526 ops/s
Iteration  14: 1286791.685 ops/s
Iteration  15: 1292387.906 ops/s
Iteration  16: 1287463.028 ops/s
Iteration  17: 1282899.310 ops/s
Iteration  18: 1288995.000 ops/s
Iteration  19: 1283883.342 ops/s
Iteration  20: 1288015.771 ops/s
Iteration  21: 1284795.219 ops/s
Iteration  22: 1286704.415 ops/s
Iteration  23: 1284140.827 ops/s
Iteration  24: 1284310.149 ops/s
Iteration  25: 1284019.240 ops/s
Iteration  26: 1272687.394 ops/s
Iteration  27: 1285363.380 ops/s
Iteration  28: 1287375.009 ops/s
Iteration  29: 1286794.644 ops/s
Iteration  30: 1284078.971 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_distinct":
  1285830.743 ±(99.9%) 2282.352 ops/s [Average]
  (min, avg, max) = (1272687.394, 1285830.743, 1292387.906), stdev = 3416.118
  CI (99.9%): [1283548.390, 1288113.095] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_distinct  thrpt   30  1285830.743 ± 2282.352  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_distinctView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_distinctView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 557122.424 ops/s
# Warmup Iteration   2: 927624.202 ops/s
# Warmup Iteration   3: 1116892.094 ops/s
# Warmup Iteration   4: 1124692.805 ops/s
# Warmup Iteration   5: 1121950.530 ops/s
# Warmup Iteration   6: 930630.026 ops/s
# Warmup Iteration   7: 1123476.675 ops/s
# Warmup Iteration   8: 1124747.309 ops/s
# Warmup Iteration   9: 1125818.640 ops/s
# Warmup Iteration  10: 1126486.314 ops/s
# Warmup Iteration  11: 1125732.667 ops/s
# Warmup Iteration  12: 1123749.082 ops/s
# Warmup Iteration  13: 1123714.711 ops/s
# Warmup Iteration  14: 1119366.476 ops/s
# Warmup Iteration  15: 1124807.149 ops/s
# Warmup Iteration  16: 1123254.112 ops/s
# Warmup Iteration  17: 1123462.991 ops/s
# Warmup Iteration  18: 1123729.131 ops/s
# Warmup Iteration  19: 1118944.328 ops/s
# Warmup Iteration  20: 1126966.913 ops/s
# Warmup Iteration  21: 1125045.821 ops/s
# Warmup Iteration  22: 1125607.340 ops/s
# Warmup Iteration  23: 1125017.714 ops/s
# Warmup Iteration  24: 1124108.523 ops/s
# Warmup Iteration  25: 1126220.250 ops/s
# Warmup Iteration  26: 1125105.918 ops/s
# Warmup Iteration  27: 1123496.043 ops/s
# Warmup Iteration  28: 1124227.540 ops/s
# Warmup Iteration  29: 1124593.607 ops/s
# Warmup Iteration  30: 1123725.200 ops/s
Iteration   1: 1125004.276 ops/s
Iteration   2: 1119843.066 ops/s
Iteration   3: 1123043.279 ops/s
Iteration   4: 1124898.294 ops/s
Iteration   5: 1124921.118 ops/s
Iteration   6: 1125751.967 ops/s
Iteration   7: 1127205.778 ops/s
Iteration   8: 1126146.957 ops/s
Iteration   9: 1127480.957 ops/s
Iteration  10: 1124222.883 ops/s
Iteration  11: 1127027.602 ops/s
Iteration  12: 1121534.355 ops/s
Iteration  13: 1120878.605 ops/s
Iteration  14: 1118973.680 ops/s
Iteration  15: 1125774.144 ops/s
Iteration  16: 1124528.108 ops/s
Iteration  17: 1124676.891 ops/s
Iteration  18: 1122966.611 ops/s
Iteration  19: 1125717.425 ops/s
Iteration  20: 1124701.196 ops/s
Iteration  21: 1118860.371 ops/s
Iteration  22: 1122810.659 ops/s
Iteration  23: 1122094.406 ops/s
Iteration  24: 1127058.617 ops/s
Iteration  25: 1125857.026 ops/s
Iteration  26: 1123885.579 ops/s
Iteration  27: 1123030.091 ops/s
Iteration  28: 1125151.943 ops/s
Iteration  29: 1126772.298 ops/s
Iteration  30: 1124941.984 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_distinctView":
  1124192.006 ±(99.9%) 1587.076 ops/s [Average]
  (min, avg, max) = (1118860.371, 1124192.006, 1127480.957), stdev = 2375.461
  CI (99.9%): [1122604.930, 1125779.081] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_distinctView  thrpt   30  1124192.006 ± 1587.076  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 265729.510 ops/s
# Warmup Iteration   2: 448379.730 ops/s
# Warmup Iteration   3: 558627.123 ops/s
# Warmup Iteration   4: 562058.490 ops/s
# Warmup Iteration   5: 560190.748 ops/s
# Warmup Iteration   6: 472779.933 ops/s
# Warmup Iteration   7: 562231.965 ops/s
# Warmup Iteration   8: 562019.187 ops/s
# Warmup Iteration   9: 564044.270 ops/s
# Warmup Iteration  10: 562433.913 ops/s
# Warmup Iteration  11: 564229.600 ops/s
# Warmup Iteration  12: 562176.485 ops/s
# Warmup Iteration  13: 563959.702 ops/s
# Warmup Iteration  14: 563418.936 ops/s
# Warmup Iteration  15: 562834.536 ops/s
# Warmup Iteration  16: 562274.608 ops/s
# Warmup Iteration  17: 556048.937 ops/s
# Warmup Iteration  18: 558693.137 ops/s
# Warmup Iteration  19: 556910.221 ops/s
# Warmup Iteration  20: 557563.407 ops/s
# Warmup Iteration  21: 559058.878 ops/s
# Warmup Iteration  22: 558349.189 ops/s
# Warmup Iteration  23: 558041.912 ops/s
# Warmup Iteration  24: 557297.584 ops/s
# Warmup Iteration  25: 558385.147 ops/s
# Warmup Iteration  26: 557599.541 ops/s
# Warmup Iteration  27: 558090.220 ops/s
# Warmup Iteration  28: 558615.314 ops/s
# Warmup Iteration  29: 557714.579 ops/s
# Warmup Iteration  30: 556834.028 ops/s
Iteration   1: 557707.233 ops/s
Iteration   2: 557359.209 ops/s
Iteration   3: 559461.382 ops/s
Iteration   4: 558451.513 ops/s
Iteration   5: 557678.928 ops/s
Iteration   6: 558503.161 ops/s
Iteration   7: 559831.114 ops/s
Iteration   8: 556479.565 ops/s
Iteration   9: 557342.531 ops/s
Iteration  10: 557377.116 ops/s
Iteration  11: 557276.433 ops/s
Iteration  12: 559283.761 ops/s
Iteration  13: 557457.320 ops/s
Iteration  14: 558902.937 ops/s
Iteration  15: 557991.881 ops/s
Iteration  16: 557586.395 ops/s
Iteration  17: 558035.586 ops/s
Iteration  18: 557696.049 ops/s
Iteration  19: 557059.891 ops/s
Iteration  20: 555889.739 ops/s
Iteration  21: 557276.704 ops/s
Iteration  22: 557432.794 ops/s
Iteration  23: 557529.211 ops/s
Iteration  24: 558409.311 ops/s
Iteration  25: 556085.994 ops/s
Iteration  26: 559207.478 ops/s
Iteration  27: 556654.019 ops/s
Iteration  28: 558024.612 ops/s
Iteration  29: 558850.889 ops/s
Iteration  30: 559391.928 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_drop":
  557874.489 ±(99.9%) 667.154 ops/s [Average]
  (min, avg, max) = (555889.739, 557874.489, 559831.114), stdev = 998.566
  CI (99.9%): [557207.335, 558541.644] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_drop  thrpt   30  557874.489 ± 667.154  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 163211.221 ops/s
# Warmup Iteration   2: 276748.879 ops/s
# Warmup Iteration   3: 330939.490 ops/s
# Warmup Iteration   4: 333780.352 ops/s
# Warmup Iteration   5: 333910.453 ops/s
# Warmup Iteration   6: 322864.067 ops/s
# Warmup Iteration   7: 288683.569 ops/s
# Warmup Iteration   8: 333416.512 ops/s
# Warmup Iteration   9: 334027.549 ops/s
# Warmup Iteration  10: 334940.857 ops/s
# Warmup Iteration  11: 334240.842 ops/s
# Warmup Iteration  12: 334076.679 ops/s
# Warmup Iteration  13: 333959.310 ops/s
# Warmup Iteration  14: 334779.496 ops/s
# Warmup Iteration  15: 334043.096 ops/s
# Warmup Iteration  16: 334536.948 ops/s
# Warmup Iteration  17: 334445.612 ops/s
# Warmup Iteration  18: 334486.233 ops/s
# Warmup Iteration  19: 333336.832 ops/s
# Warmup Iteration  20: 334388.882 ops/s
# Warmup Iteration  21: 333835.817 ops/s
# Warmup Iteration  22: 334321.741 ops/s
# Warmup Iteration  23: 334241.276 ops/s
# Warmup Iteration  24: 334520.581 ops/s
# Warmup Iteration  25: 334297.168 ops/s
# Warmup Iteration  26: 333133.329 ops/s
# Warmup Iteration  27: 333620.476 ops/s
# Warmup Iteration  28: 334590.425 ops/s
# Warmup Iteration  29: 334310.377 ops/s
# Warmup Iteration  30: 334094.471 ops/s
Iteration   1: 334286.857 ops/s
Iteration   2: 333630.555 ops/s
Iteration   3: 333515.563 ops/s
Iteration   4: 334419.111 ops/s
Iteration   5: 334091.459 ops/s
Iteration   6: 334470.072 ops/s
Iteration   7: 333837.978 ops/s
Iteration   8: 334143.026 ops/s
Iteration   9: 334479.301 ops/s
Iteration  10: 332021.137 ops/s
Iteration  11: 332384.593 ops/s
Iteration  12: 333660.369 ops/s
Iteration  13: 333411.466 ops/s
Iteration  14: 333238.484 ops/s
Iteration  15: 333231.857 ops/s
Iteration  16: 333256.047 ops/s
Iteration  17: 333501.510 ops/s
Iteration  18: 333929.753 ops/s
Iteration  19: 334056.166 ops/s
Iteration  20: 333145.474 ops/s
Iteration  21: 333528.142 ops/s
Iteration  22: 332828.687 ops/s
Iteration  23: 334431.409 ops/s
Iteration  24: 332513.803 ops/s
Iteration  25: 333619.141 ops/s
Iteration  26: 334145.489 ops/s
Iteration  27: 334489.769 ops/s
Iteration  28: 333809.856 ops/s
Iteration  29: 334049.201 ops/s
Iteration  30: 333637.009 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_dropWhile":
  333658.776 ±(99.9%) 428.074 ops/s [Average]
  (min, avg, max) = (332021.137, 333658.776, 334489.769), stdev = 640.721
  CI (99.9%): [333230.702, 334086.850] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_dropWhile  thrpt   30  333658.776 ± 428.074  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 575543.074 ops/s
# Warmup Iteration   2: 678616.077 ops/s
# Warmup Iteration   3: 867031.286 ops/s
# Warmup Iteration   4: 864009.071 ops/s
# Warmup Iteration   5: 864084.708 ops/s
# Warmup Iteration   6: 871414.107 ops/s
# Warmup Iteration   7: 868417.876 ops/s
# Warmup Iteration   8: 869692.033 ops/s
# Warmup Iteration   9: 869887.285 ops/s
# Warmup Iteration  10: 729867.425 ops/s
# Warmup Iteration  11: 870064.593 ops/s
# Warmup Iteration  12: 868723.669 ops/s
# Warmup Iteration  13: 867564.167 ops/s
# Warmup Iteration  14: 867640.479 ops/s
# Warmup Iteration  15: 865363.635 ops/s
# Warmup Iteration  16: 869172.410 ops/s
# Warmup Iteration  17: 915332.581 ops/s
# Warmup Iteration  18: 916701.628 ops/s
# Warmup Iteration  19: 913776.036 ops/s
# Warmup Iteration  20: 916860.361 ops/s
# Warmup Iteration  21: 918258.467 ops/s
# Warmup Iteration  22: 918159.194 ops/s
# Warmup Iteration  23: 915963.396 ops/s
# Warmup Iteration  24: 915717.180 ops/s
# Warmup Iteration  25: 918087.150 ops/s
# Warmup Iteration  26: 916029.744 ops/s
# Warmup Iteration  27: 914953.600 ops/s
# Warmup Iteration  28: 915482.688 ops/s
# Warmup Iteration  29: 910792.473 ops/s
# Warmup Iteration  30: 916559.519 ops/s
Iteration   1: 914190.876 ops/s
Iteration   2: 916977.418 ops/s
Iteration   3: 917960.480 ops/s
Iteration   4: 913107.644 ops/s
Iteration   5: 916191.286 ops/s
Iteration   6: 916975.288 ops/s
Iteration   7: 914438.594 ops/s
Iteration   8: 919024.138 ops/s
Iteration   9: 917942.619 ops/s
Iteration  10: 915057.907 ops/s
Iteration  11: 919000.263 ops/s
Iteration  12: 918895.312 ops/s
Iteration  13: 912571.493 ops/s
Iteration  14: 909689.099 ops/s
Iteration  15: 920086.155 ops/s
Iteration  16: 913100.283 ops/s
Iteration  17: 919589.235 ops/s
Iteration  18: 919718.108 ops/s
Iteration  19: 919002.780 ops/s
Iteration  20: 917027.768 ops/s
Iteration  21: 918021.955 ops/s
Iteration  22: 912537.052 ops/s
Iteration  23: 907289.723 ops/s
Iteration  24: 915488.978 ops/s
Iteration  25: 917213.591 ops/s
Iteration  26: 916932.302 ops/s
Iteration  27: 916826.258 ops/s
Iteration  28: 918817.372 ops/s
Iteration  29: 915527.192 ops/s
Iteration  30: 916933.373 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_drop_throws":
  916204.485 ±(99.9%) 2029.274 ops/s [Average]
  (min, avg, max) = (907289.723, 916204.485, 920086.155), stdev = 3037.322
  CI (99.9%): [914175.211, 918233.759] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_drop_throws  thrpt   30  916204.485 ± 2029.274  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1652779.748 ops/s
# Warmup Iteration   2: 2952848.027 ops/s
# Warmup Iteration   3: 3225956.726 ops/s
# Warmup Iteration   4: 3214376.355 ops/s
# Warmup Iteration   5: 2948745.153 ops/s
# Warmup Iteration   6: 2959497.323 ops/s
# Warmup Iteration   7: 3221272.998 ops/s
# Warmup Iteration   8: 3221297.049 ops/s
# Warmup Iteration   9: 3224471.393 ops/s
# Warmup Iteration  10: 3221793.853 ops/s
# Warmup Iteration  11: 3212049.776 ops/s
# Warmup Iteration  12: 3228896.926 ops/s
# Warmup Iteration  13: 3227387.378 ops/s
# Warmup Iteration  14: 3224112.161 ops/s
# Warmup Iteration  15: 3220424.465 ops/s
# Warmup Iteration  16: 3231911.187 ops/s
# Warmup Iteration  17: 3115821.603 ops/s
# Warmup Iteration  18: 3116982.742 ops/s
# Warmup Iteration  19: 3119029.835 ops/s
# Warmup Iteration  20: 3114190.162 ops/s
# Warmup Iteration  21: 3120666.487 ops/s
# Warmup Iteration  22: 3108221.668 ops/s
# Warmup Iteration  23: 3123209.951 ops/s
# Warmup Iteration  24: 3118197.320 ops/s
# Warmup Iteration  25: 3109145.236 ops/s
# Warmup Iteration  26: 3112513.081 ops/s
# Warmup Iteration  27: 3120019.941 ops/s
# Warmup Iteration  28: 3115467.567 ops/s
# Warmup Iteration  29: 3120273.871 ops/s
# Warmup Iteration  30: 3121723.707 ops/s
Iteration   1: 3121494.325 ops/s
Iteration   2: 3111097.336 ops/s
Iteration   3: 3110336.848 ops/s
Iteration   4: 3111874.037 ops/s
Iteration   5: 3123151.563 ops/s
Iteration   6: 3118825.991 ops/s
Iteration   7: 3110108.023 ops/s
Iteration   8: 3124614.740 ops/s
Iteration   9: 3115001.351 ops/s
Iteration  10: 3116007.038 ops/s
Iteration  11: 3110141.789 ops/s
Iteration  12: 3101501.732 ops/s
Iteration  13: 3119618.823 ops/s
Iteration  14: 3113901.680 ops/s
Iteration  15: 3118592.854 ops/s
Iteration  16: 3123024.926 ops/s
Iteration  17: 3113631.696 ops/s
Iteration  18: 3123652.653 ops/s
Iteration  19: 3118473.030 ops/s
Iteration  20: 3108051.714 ops/s
Iteration  21: 3114716.122 ops/s
Iteration  22: 3111684.559 ops/s
Iteration  23: 3088594.312 ops/s
Iteration  24: 3115938.044 ops/s
Iteration  25: 3125082.186 ops/s
Iteration  26: 3116301.403 ops/s
Iteration  27: 3122106.144 ops/s
Iteration  28: 3118740.332 ops/s
Iteration  29: 3118136.695 ops/s
Iteration  30: 3126923.494 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_empty":
  3115710.848 ±(99.9%) 5181.166 ops/s [Average]
  (min, avg, max) = (3088594.312, 3115710.848, 3126923.494), stdev = 7754.925
  CI (99.9%): [3110529.682, 3120892.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_empty  thrpt   30  3115710.848 ± 5181.166  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19105.915 ops/s
# Warmup Iteration   2: 29134.608 ops/s
# Warmup Iteration   3: 40212.145 ops/s
# Warmup Iteration   4: 42096.450 ops/s
# Warmup Iteration   5: 41952.891 ops/s
# Warmup Iteration   6: 42076.081 ops/s
# Warmup Iteration   7: 42135.733 ops/s
# Warmup Iteration   8: 42125.900 ops/s
# Warmup Iteration   9: 42065.479 ops/s
# Warmup Iteration  10: 41488.780 ops/s
# Warmup Iteration  11: 36118.148 ops/s
# Warmup Iteration  12: 42095.994 ops/s
# Warmup Iteration  13: 42042.919 ops/s
# Warmup Iteration  14: 42024.937 ops/s
# Warmup Iteration  15: 41970.613 ops/s
# Warmup Iteration  16: 41983.437 ops/s
# Warmup Iteration  17: 42191.254 ops/s
# Warmup Iteration  18: 42026.156 ops/s
# Warmup Iteration  19: 42129.382 ops/s
# Warmup Iteration  20: 42124.570 ops/s
# Warmup Iteration  21: 42035.594 ops/s
# Warmup Iteration  22: 41804.768 ops/s
# Warmup Iteration  23: 42023.986 ops/s
# Warmup Iteration  24: 42232.043 ops/s
# Warmup Iteration  25: 42118.489 ops/s
# Warmup Iteration  26: 42251.408 ops/s
# Warmup Iteration  27: 41980.860 ops/s
# Warmup Iteration  28: 41962.428 ops/s
# Warmup Iteration  29: 42117.450 ops/s
# Warmup Iteration  30: 42118.456 ops/s
Iteration   1: 41815.365 ops/s
Iteration   2: 42131.588 ops/s
Iteration   3: 42095.660 ops/s
Iteration   4: 42098.126 ops/s
Iteration   5: 42250.578 ops/s
Iteration   6: 42232.994 ops/s
Iteration   7: 42226.473 ops/s
Iteration   8: 42151.789 ops/s
Iteration   9: 41944.140 ops/s
Iteration  10: 42067.862 ops/s
Iteration  11: 42279.736 ops/s
Iteration  12: 42183.073 ops/s
Iteration  13: 41855.641 ops/s
Iteration  14: 42063.979 ops/s
Iteration  15: 41642.841 ops/s
Iteration  16: 42257.051 ops/s
Iteration  17: 42106.304 ops/s
Iteration  18: 42288.187 ops/s
Iteration  19: 42235.596 ops/s
Iteration  20: 42276.494 ops/s
Iteration  21: 42134.976 ops/s
Iteration  22: 42375.167 ops/s
Iteration  23: 42272.638 ops/s
Iteration  24: 42167.889 ops/s
Iteration  25: 42314.569 ops/s
Iteration  26: 42198.085 ops/s
Iteration  27: 42220.687 ops/s
Iteration  28: 42184.520 ops/s
Iteration  29: 42062.004 ops/s
Iteration  30: 42223.753 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_equalsAndHashCode":
  42145.259 ±(99.9%) 105.950 ops/s [Average]
  (min, avg, max) = (41642.841, 42145.259, 42375.167), stdev = 158.582
  CI (99.9%): [42039.308, 42251.209] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt      Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  42145.259 ± 105.950  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 317929.646 ops/s
# Warmup Iteration   2: 697409.462 ops/s
# Warmup Iteration   3: 752576.984 ops/s
# Warmup Iteration   4: 756117.624 ops/s
# Warmup Iteration   5: 635384.215 ops/s
# Warmup Iteration   6: 757504.762 ops/s
# Warmup Iteration   7: 760117.245 ops/s
# Warmup Iteration   8: 756206.709 ops/s
# Warmup Iteration   9: 756563.002 ops/s
# Warmup Iteration  10: 752068.221 ops/s
# Warmup Iteration  11: 750018.265 ops/s
# Warmup Iteration  12: 750762.326 ops/s
# Warmup Iteration  13: 757970.627 ops/s
# Warmup Iteration  14: 758843.611 ops/s
# Warmup Iteration  15: 752792.111 ops/s
# Warmup Iteration  16: 753974.489 ops/s
# Warmup Iteration  17: 754158.475 ops/s
# Warmup Iteration  18: 752056.335 ops/s
# Warmup Iteration  19: 755818.535 ops/s
# Warmup Iteration  20: 757364.870 ops/s
# Warmup Iteration  21: 753970.845 ops/s
# Warmup Iteration  22: 757671.996 ops/s
# Warmup Iteration  23: 757350.340 ops/s
# Warmup Iteration  24: 752561.334 ops/s
# Warmup Iteration  25: 755366.086 ops/s
# Warmup Iteration  26: 755632.127 ops/s
# Warmup Iteration  27: 756142.926 ops/s
# Warmup Iteration  28: 757111.489 ops/s
# Warmup Iteration  29: 752535.752 ops/s
# Warmup Iteration  30: 758341.711 ops/s
Iteration   1: 756450.937 ops/s
Iteration   2: 758319.032 ops/s
Iteration   3: 757270.070 ops/s
Iteration   4: 756534.678 ops/s
Iteration   5: 751310.235 ops/s
Iteration   6: 756059.493 ops/s
Iteration   7: 755750.090 ops/s
Iteration   8: 756996.880 ops/s
Iteration   9: 757352.395 ops/s
Iteration  10: 759076.093 ops/s
Iteration  11: 756233.498 ops/s
Iteration  12: 757779.936 ops/s
Iteration  13: 758596.150 ops/s
Iteration  14: 759231.480 ops/s
Iteration  15: 755966.576 ops/s
Iteration  16: 757176.061 ops/s
Iteration  17: 758470.336 ops/s
Iteration  18: 758524.960 ops/s
Iteration  19: 757063.322 ops/s
Iteration  20: 757135.271 ops/s
Iteration  21: 756454.789 ops/s
Iteration  22: 758196.375 ops/s
Iteration  23: 754142.271 ops/s
Iteration  24: 757546.580 ops/s
Iteration  25: 754336.933 ops/s
Iteration  26: 755822.631 ops/s
Iteration  27: 755849.044 ops/s
Iteration  28: 756476.438 ops/s
Iteration  29: 756758.026 ops/s
Iteration  30: 757007.347 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollect":
  756796.264 ±(99.9%) 1074.448 ops/s [Average]
  (min, avg, max) = (751310.235, 756796.264, 759231.480), stdev = 1608.183
  CI (99.9%): [755721.817, 757870.712] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_flatCollect  thrpt   30  756796.264 ± 1074.448  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 921401.541 ops/s
# Warmup Iteration   2: 2053696.174 ops/s
# Warmup Iteration   3: 2175727.014 ops/s
# Warmup Iteration   4: 2189845.272 ops/s
# Warmup Iteration   5: 1814666.834 ops/s
# Warmup Iteration   6: 2195653.761 ops/s
# Warmup Iteration   7: 2191200.460 ops/s
# Warmup Iteration   8: 2195166.221 ops/s
# Warmup Iteration   9: 2192447.356 ops/s
# Warmup Iteration  10: 2193802.926 ops/s
# Warmup Iteration  11: 2188232.376 ops/s
# Warmup Iteration  12: 2189518.436 ops/s
# Warmup Iteration  13: 2181376.195 ops/s
# Warmup Iteration  14: 2190626.514 ops/s
# Warmup Iteration  15: 2184162.473 ops/s
# Warmup Iteration  16: 2175530.190 ops/s
# Warmup Iteration  17: 2188405.807 ops/s
# Warmup Iteration  18: 2191571.447 ops/s
# Warmup Iteration  19: 2190491.511 ops/s
# Warmup Iteration  20: 2187764.779 ops/s
# Warmup Iteration  21: 2189710.070 ops/s
# Warmup Iteration  22: 2186538.949 ops/s
# Warmup Iteration  23: 2173393.437 ops/s
# Warmup Iteration  24: 2185286.360 ops/s
# Warmup Iteration  25: 2186694.689 ops/s
# Warmup Iteration  26: 2182961.724 ops/s
# Warmup Iteration  27: 2184584.753 ops/s
# Warmup Iteration  28: 2190775.394 ops/s
# Warmup Iteration  29: 2189582.241 ops/s
# Warmup Iteration  30: 2183873.310 ops/s
Iteration   1: 2192884.176 ops/s
Iteration   2: 2189077.924 ops/s
Iteration   3: 2196214.925 ops/s
Iteration   4: 2186134.323 ops/s
Iteration   5: 2185229.864 ops/s
Iteration   6: 2189854.654 ops/s
Iteration   7: 2190706.935 ops/s
Iteration   8: 2194419.551 ops/s
Iteration   9: 2189069.064 ops/s
Iteration  10: 2195778.769 ops/s
Iteration  11: 2182790.268 ops/s
Iteration  12: 2186548.636 ops/s
Iteration  13: 2190078.920 ops/s
Iteration  14: 2190569.076 ops/s
Iteration  15: 2191602.671 ops/s
Iteration  16: 2189730.241 ops/s
Iteration  17: 2187317.441 ops/s
Iteration  18: 2189818.836 ops/s
Iteration  19: 2189619.983 ops/s
Iteration  20: 2187257.852 ops/s
Iteration  21: 2192649.360 ops/s
Iteration  22: 2182022.182 ops/s
Iteration  23: 2193693.945 ops/s
Iteration  24: 2191132.579 ops/s
Iteration  25: 2195290.385 ops/s
Iteration  26: 2189917.627 ops/s
Iteration  27: 2187247.988 ops/s
Iteration  28: 2187525.740 ops/s
Iteration  29: 2181996.978 ops/s
Iteration  30: 2194541.291 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectBoolean":
  2189690.739 ±(99.9%) 2574.613 ops/s [Average]
  (min, avg, max) = (2181996.978, 2189690.739, 2196214.925), stdev = 3853.559
  CI (99.9%): [2187116.127, 2192265.352] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectBoolean  thrpt   30  2189690.739 ± 2574.613  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 546550.537 ops/s
# Warmup Iteration   2: 954548.072 ops/s
# Warmup Iteration   3: 1125090.156 ops/s
# Warmup Iteration   4: 1131053.103 ops/s
# Warmup Iteration   5: 1129808.748 ops/s
# Warmup Iteration   6: 944283.685 ops/s
# Warmup Iteration   7: 1131325.929 ops/s
# Warmup Iteration   8: 1131886.621 ops/s
# Warmup Iteration   9: 1131395.373 ops/s
# Warmup Iteration  10: 1131117.523 ops/s
# Warmup Iteration  11: 1131643.799 ops/s
# Warmup Iteration  12: 1131481.876 ops/s
# Warmup Iteration  13: 1130497.475 ops/s
# Warmup Iteration  14: 1131089.162 ops/s
# Warmup Iteration  15: 1131122.042 ops/s
# Warmup Iteration  16: 1127666.747 ops/s
# Warmup Iteration  17: 1130788.518 ops/s
# Warmup Iteration  18: 1127820.443 ops/s
# Warmup Iteration  19: 1130865.835 ops/s
# Warmup Iteration  20: 1130490.225 ops/s
# Warmup Iteration  21: 1129459.899 ops/s
# Warmup Iteration  22: 1128645.538 ops/s
# Warmup Iteration  23: 1131567.095 ops/s
# Warmup Iteration  24: 1127190.670 ops/s
# Warmup Iteration  25: 1130576.839 ops/s
# Warmup Iteration  26: 1132638.052 ops/s
# Warmup Iteration  27: 1131980.474 ops/s
# Warmup Iteration  28: 1129164.002 ops/s
# Warmup Iteration  29: 1132642.526 ops/s
# Warmup Iteration  30: 1130452.754 ops/s
Iteration   1: 1131889.550 ops/s
Iteration   2: 1129511.334 ops/s
Iteration   3: 1132577.618 ops/s
Iteration   4: 1131519.722 ops/s
Iteration   5: 1128175.216 ops/s
Iteration   6: 1130188.268 ops/s
Iteration   7: 1133862.323 ops/s
Iteration   8: 1130575.573 ops/s
Iteration   9: 1132283.559 ops/s
Iteration  10: 1128715.771 ops/s
Iteration  11: 1133750.802 ops/s
Iteration  12: 1129904.537 ops/s
Iteration  13: 1130841.438 ops/s
Iteration  14: 1130091.294 ops/s
Iteration  15: 1127799.692 ops/s
Iteration  16: 1128784.803 ops/s
Iteration  17: 1124141.166 ops/s
Iteration  18: 1129442.194 ops/s
Iteration  19: 1129456.466 ops/s
Iteration  20: 1133042.240 ops/s
Iteration  21: 1126906.363 ops/s
Iteration  22: 1132553.062 ops/s
Iteration  23: 1124063.658 ops/s
Iteration  24: 1132225.679 ops/s
Iteration  25: 1130502.825 ops/s
Iteration  26: 1133720.427 ops/s
Iteration  27: 1132428.851 ops/s
Iteration  28: 1130120.351 ops/s
Iteration  29: 1128161.607 ops/s
Iteration  30: 1129483.234 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectByte":
  1130223.987 ±(99.9%) 1673.610 ops/s [Average]
  (min, avg, max) = (1124063.658, 1130223.987, 1133862.323), stdev = 2504.981
  CI (99.9%): [1128550.377, 1131897.598] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectByte  thrpt   30  1130223.987 ± 1673.610  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 687617.070 ops/s
# Warmup Iteration   2: 1640410.718 ops/s
# Warmup Iteration   3: 1717069.305 ops/s
# Warmup Iteration   4: 1437824.879 ops/s
# Warmup Iteration   5: 1722561.648 ops/s
# Warmup Iteration   6: 1720233.912 ops/s
# Warmup Iteration   7: 1719039.091 ops/s
# Warmup Iteration   8: 1721334.934 ops/s
# Warmup Iteration   9: 1718632.400 ops/s
# Warmup Iteration  10: 1720240.456 ops/s
# Warmup Iteration  11: 1716197.762 ops/s
# Warmup Iteration  12: 1712011.254 ops/s
# Warmup Iteration  13: 1715934.155 ops/s
# Warmup Iteration  14: 1714158.052 ops/s
# Warmup Iteration  15: 1716073.217 ops/s
# Warmup Iteration  16: 1715066.744 ops/s
# Warmup Iteration  17: 1718645.087 ops/s
# Warmup Iteration  18: 1720981.960 ops/s
# Warmup Iteration  19: 1719386.288 ops/s
# Warmup Iteration  20: 1716062.987 ops/s
# Warmup Iteration  21: 1722903.058 ops/s
# Warmup Iteration  22: 1715307.609 ops/s
# Warmup Iteration  23: 1720449.070 ops/s
# Warmup Iteration  24: 1715143.300 ops/s
# Warmup Iteration  25: 1720429.573 ops/s
# Warmup Iteration  26: 1713423.842 ops/s
# Warmup Iteration  27: 1719138.053 ops/s
# Warmup Iteration  28: 1721573.354 ops/s
# Warmup Iteration  29: 1719961.297 ops/s
# Warmup Iteration  30: 1718802.575 ops/s
Iteration   1: 1721912.795 ops/s
Iteration   2: 1716496.307 ops/s
Iteration   3: 1719635.784 ops/s
Iteration   4: 1721777.576 ops/s
Iteration   5: 1717347.002 ops/s
Iteration   6: 1717572.846 ops/s
Iteration   7: 1719281.922 ops/s
Iteration   8: 1716825.081 ops/s
Iteration   9: 1719070.689 ops/s
Iteration  10: 1722508.260 ops/s
Iteration  11: 1713445.009 ops/s
Iteration  12: 1711884.033 ops/s
Iteration  13: 1709873.259 ops/s
Iteration  14: 1717733.809 ops/s
Iteration  15: 1717751.435 ops/s
Iteration  16: 1721387.430 ops/s
Iteration  17: 1720579.283 ops/s
Iteration  18: 1715748.496 ops/s
Iteration  19: 1719398.063 ops/s
Iteration  20: 1717153.474 ops/s
Iteration  21: 1723484.743 ops/s
Iteration  22: 1718534.734 ops/s
Iteration  23: 1724389.200 ops/s
Iteration  24: 1720977.756 ops/s
Iteration  25: 1723129.287 ops/s
Iteration  26: 1721315.572 ops/s
Iteration  27: 1721408.938 ops/s
Iteration  28: 1721061.783 ops/s
Iteration  29: 1723136.159 ops/s
Iteration  30: 1724744.059 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectChar":
  1719318.826 ±(99.9%) 2379.523 ops/s [Average]
  (min, avg, max) = (1709873.259, 1719318.826, 1724744.059), stdev = 3561.559
  CI (99.9%): [1716939.303, 1721698.349] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectChar  thrpt   30  1719318.826 ± 2379.523  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 354869.617 ops/s
# Warmup Iteration   2: 792203.414 ops/s
# Warmup Iteration   3: 837886.086 ops/s
# Warmup Iteration   4: 840665.978 ops/s
# Warmup Iteration   5: 707154.428 ops/s
# Warmup Iteration   6: 843520.817 ops/s
# Warmup Iteration   7: 842875.082 ops/s
# Warmup Iteration   8: 844223.116 ops/s
# Warmup Iteration   9: 842727.006 ops/s
# Warmup Iteration  10: 843375.831 ops/s
# Warmup Iteration  11: 840102.888 ops/s
# Warmup Iteration  12: 843600.561 ops/s
# Warmup Iteration  13: 840724.302 ops/s
# Warmup Iteration  14: 842075.653 ops/s
# Warmup Iteration  15: 843195.436 ops/s
# Warmup Iteration  16: 841223.125 ops/s
# Warmup Iteration  17: 843097.488 ops/s
# Warmup Iteration  18: 842610.210 ops/s
# Warmup Iteration  19: 844357.971 ops/s
# Warmup Iteration  20: 840381.501 ops/s
# Warmup Iteration  21: 843863.263 ops/s
# Warmup Iteration  22: 842950.304 ops/s
# Warmup Iteration  23: 842690.085 ops/s
# Warmup Iteration  24: 840025.572 ops/s
# Warmup Iteration  25: 842301.804 ops/s
# Warmup Iteration  26: 841290.395 ops/s
# Warmup Iteration  27: 841476.140 ops/s
# Warmup Iteration  28: 843498.756 ops/s
# Warmup Iteration  29: 843493.172 ops/s
# Warmup Iteration  30: 843069.197 ops/s
Iteration   1: 845617.641 ops/s
Iteration   2: 842307.911 ops/s
Iteration   3: 838784.334 ops/s
Iteration   4: 844126.665 ops/s
Iteration   5: 843792.065 ops/s
Iteration   6: 844250.568 ops/s
Iteration   7: 842285.564 ops/s
Iteration   8: 846023.084 ops/s
Iteration   9: 843719.267 ops/s
Iteration  10: 844093.119 ops/s
Iteration  11: 839465.155 ops/s
Iteration  12: 842436.573 ops/s
Iteration  13: 842251.316 ops/s
Iteration  14: 844527.222 ops/s
Iteration  15: 842318.732 ops/s
Iteration  16: 840245.202 ops/s
Iteration  17: 842909.145 ops/s
Iteration  18: 842031.729 ops/s
Iteration  19: 842517.347 ops/s
Iteration  20: 840019.835 ops/s
Iteration  21: 841876.106 ops/s
Iteration  22: 841120.374 ops/s
Iteration  23: 839631.450 ops/s
Iteration  24: 837447.626 ops/s
Iteration  25: 841848.007 ops/s
Iteration  26: 844238.449 ops/s
Iteration  27: 840694.689 ops/s
Iteration  28: 839479.859 ops/s
Iteration  29: 844021.982 ops/s
Iteration  30: 846373.159 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectDouble":
  842348.472 ±(99.9%) 1473.043 ops/s [Average]
  (min, avg, max) = (837447.626, 842348.472, 846373.159), stdev = 2204.781
  CI (99.9%): [840875.430, 843821.515] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectDouble  thrpt   30  842348.472 ± 1473.043  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 520862.152 ops/s
# Warmup Iteration   2: 1123240.783 ops/s
# Warmup Iteration   3: 1190199.307 ops/s
# Warmup Iteration   4: 1198017.030 ops/s
# Warmup Iteration   5: 1013543.770 ops/s
# Warmup Iteration   6: 1206087.347 ops/s
# Warmup Iteration   7: 1202482.374 ops/s
# Warmup Iteration   8: 1204992.151 ops/s
# Warmup Iteration   9: 1203147.787 ops/s
# Warmup Iteration  10: 1203354.657 ops/s
# Warmup Iteration  11: 1203952.822 ops/s
# Warmup Iteration  12: 1203154.078 ops/s
# Warmup Iteration  13: 1205277.265 ops/s
# Warmup Iteration  14: 1203971.702 ops/s
# Warmup Iteration  15: 1203640.792 ops/s
# Warmup Iteration  16: 1202551.443 ops/s
# Warmup Iteration  17: 1205186.647 ops/s
# Warmup Iteration  18: 1203353.526 ops/s
# Warmup Iteration  19: 1206178.011 ops/s
# Warmup Iteration  20: 1205945.907 ops/s
# Warmup Iteration  21: 1206678.021 ops/s
# Warmup Iteration  22: 1206359.485 ops/s
# Warmup Iteration  23: 1197002.865 ops/s
# Warmup Iteration  24: 1202755.419 ops/s
# Warmup Iteration  25: 1204374.369 ops/s
# Warmup Iteration  26: 1206733.738 ops/s
# Warmup Iteration  27: 1200380.673 ops/s
# Warmup Iteration  28: 1202060.848 ops/s
# Warmup Iteration  29: 1205383.865 ops/s
# Warmup Iteration  30: 1201866.983 ops/s
Iteration   1: 1198598.752 ops/s
Iteration   2: 1205592.154 ops/s
Iteration   3: 1206505.576 ops/s
Iteration   4: 1197771.854 ops/s
Iteration   5: 1206440.730 ops/s
Iteration   6: 1187383.431 ops/s
Iteration   7: 1203724.707 ops/s
Iteration   8: 1206099.730 ops/s
Iteration   9: 1205026.256 ops/s
Iteration  10: 1201756.992 ops/s
Iteration  11: 1193989.531 ops/s
Iteration  12: 1202578.608 ops/s
Iteration  13: 1206369.929 ops/s
Iteration  14: 1203180.229 ops/s
Iteration  15: 1202043.015 ops/s
Iteration  16: 1204039.797 ops/s
Iteration  17: 1199404.599 ops/s
Iteration  18: 1202967.481 ops/s
Iteration  19: 1199733.350 ops/s
Iteration  20: 1205013.784 ops/s
Iteration  21: 1199931.560 ops/s
Iteration  22: 1196364.822 ops/s
Iteration  23: 1201421.655 ops/s
Iteration  24: 1209159.662 ops/s
Iteration  25: 1206664.822 ops/s
Iteration  26: 1202646.199 ops/s
Iteration  27: 1205686.754 ops/s
Iteration  28: 1208745.501 ops/s
Iteration  29: 1204142.841 ops/s
Iteration  30: 1203250.981 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectFloat":
  1202541.177 ±(99.9%) 3044.870 ops/s [Average]
  (min, avg, max) = (1187383.431, 1202541.177, 1209159.662), stdev = 4557.419
  CI (99.9%): [1199496.307, 1205586.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectFloat  thrpt   30  1202541.177 ± 3044.870  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 668947.480 ops/s
# Warmup Iteration   2: 1559932.897 ops/s
# Warmup Iteration   3: 1686876.395 ops/s
# Warmup Iteration   4: 1458757.422 ops/s
# Warmup Iteration   5: 1630935.792 ops/s
# Warmup Iteration   6: 1687527.706 ops/s
# Warmup Iteration   7: 1686380.818 ops/s
# Warmup Iteration   8: 1686017.281 ops/s
# Warmup Iteration   9: 1688040.742 ops/s
# Warmup Iteration  10: 1684919.081 ops/s
# Warmup Iteration  11: 1684735.574 ops/s
# Warmup Iteration  12: 1686104.598 ops/s
# Warmup Iteration  13: 1687632.482 ops/s
# Warmup Iteration  14: 1686471.111 ops/s
# Warmup Iteration  15: 1690073.542 ops/s
# Warmup Iteration  16: 1688894.176 ops/s
# Warmup Iteration  17: 1690609.075 ops/s
# Warmup Iteration  18: 1692164.760 ops/s
# Warmup Iteration  19: 1692265.848 ops/s
# Warmup Iteration  20: 1687723.249 ops/s
# Warmup Iteration  21: 1689565.849 ops/s
# Warmup Iteration  22: 1688816.205 ops/s
# Warmup Iteration  23: 1689748.026 ops/s
# Warmup Iteration  24: 1690713.587 ops/s
# Warmup Iteration  25: 1687947.624 ops/s
# Warmup Iteration  26: 1689286.554 ops/s
# Warmup Iteration  27: 1688035.309 ops/s
# Warmup Iteration  28: 1690297.007 ops/s
# Warmup Iteration  29: 1690343.283 ops/s
# Warmup Iteration  30: 1687121.814 ops/s
Iteration   1: 1690991.070 ops/s
Iteration   2: 1692791.932 ops/s
Iteration   3: 1688835.534 ops/s
Iteration   4: 1686390.140 ops/s
Iteration   5: 1686272.253 ops/s
Iteration   6: 1691532.621 ops/s
Iteration   7: 1693701.653 ops/s
Iteration   8: 1689717.625 ops/s
Iteration   9: 1692420.089 ops/s
Iteration  10: 1691016.529 ops/s
Iteration  11: 1691084.842 ops/s
Iteration  12: 1689860.717 ops/s
Iteration  13: 1693933.768 ops/s
Iteration  14: 1692583.629 ops/s
Iteration  15: 1677440.526 ops/s
Iteration  16: 1690077.408 ops/s
Iteration  17: 1692360.075 ops/s
Iteration  18: 1688188.132 ops/s
Iteration  19: 1677594.693 ops/s
Iteration  20: 1692230.911 ops/s
Iteration  21: 1691603.223 ops/s
Iteration  22: 1689652.613 ops/s
Iteration  23: 1683687.513 ops/s
Iteration  24: 1691759.549 ops/s
Iteration  25: 1689677.882 ops/s
Iteration  26: 1696159.417 ops/s
Iteration  27: 1674743.048 ops/s
Iteration  28: 1689009.417 ops/s
Iteration  29: 1689577.355 ops/s
Iteration  30: 1688789.004 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectInt":
  1689122.772 ±(99.9%) 3293.901 ops/s [Average]
  (min, avg, max) = (1674743.048, 1689122.772, 1696159.417), stdev = 4930.157
  CI (99.9%): [1685828.871, 1692416.674] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectInt  thrpt   30  1689122.772 ± 3293.901  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 552839.923 ops/s
# Warmup Iteration   2: 1563179.550 ops/s
# Warmup Iteration   3: 1571826.342 ops/s
# Warmup Iteration   4: 1318043.378 ops/s
# Warmup Iteration   5: 1580089.491 ops/s
# Warmup Iteration   6: 1574816.770 ops/s
# Warmup Iteration   7: 1576999.185 ops/s
# Warmup Iteration   8: 1576462.077 ops/s
# Warmup Iteration   9: 1577954.466 ops/s
# Warmup Iteration  10: 1577566.226 ops/s
# Warmup Iteration  11: 1565330.753 ops/s
# Warmup Iteration  12: 1576694.829 ops/s
# Warmup Iteration  13: 1576120.181 ops/s
# Warmup Iteration  14: 1580967.940 ops/s
# Warmup Iteration  15: 1578130.747 ops/s
# Warmup Iteration  16: 1580077.564 ops/s
# Warmup Iteration  17: 1568672.359 ops/s
# Warmup Iteration  18: 1566607.220 ops/s
# Warmup Iteration  19: 1562626.083 ops/s
# Warmup Iteration  20: 1568891.025 ops/s
# Warmup Iteration  21: 1571586.565 ops/s
# Warmup Iteration  22: 1570572.228 ops/s
# Warmup Iteration  23: 1565994.662 ops/s
# Warmup Iteration  24: 1568336.496 ops/s
# Warmup Iteration  25: 1565438.502 ops/s
# Warmup Iteration  26: 1569285.527 ops/s
# Warmup Iteration  27: 1568060.392 ops/s
# Warmup Iteration  28: 1565673.077 ops/s
# Warmup Iteration  29: 1568544.849 ops/s
# Warmup Iteration  30: 1571852.027 ops/s
Iteration   1: 1571784.009 ops/s
Iteration   2: 1568189.702 ops/s
Iteration   3: 1568683.609 ops/s
Iteration   4: 1570663.230 ops/s
Iteration   5: 1567003.323 ops/s
Iteration   6: 1567979.089 ops/s
Iteration   7: 1568429.488 ops/s
Iteration   8: 1570083.084 ops/s
Iteration   9: 1571193.990 ops/s
Iteration  10: 1564616.427 ops/s
Iteration  11: 1557202.407 ops/s
Iteration  12: 1566020.749 ops/s
Iteration  13: 1570242.060 ops/s
Iteration  14: 1568998.873 ops/s
Iteration  15: 1568875.860 ops/s
Iteration  16: 1563060.889 ops/s
Iteration  17: 1570502.198 ops/s
Iteration  18: 1570069.027 ops/s
Iteration  19: 1560593.591 ops/s
Iteration  20: 1557827.731 ops/s
Iteration  21: 1565989.439 ops/s
Iteration  22: 1557931.887 ops/s
Iteration  23: 1560066.386 ops/s
Iteration  24: 1573226.484 ops/s
Iteration  25: 1565308.038 ops/s
Iteration  26: 1565890.084 ops/s
Iteration  27: 1569775.305 ops/s
Iteration  28: 1568373.871 ops/s
Iteration  29: 1571308.181 ops/s
Iteration  30: 1567923.949 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectLong":
  1566927.099 ±(99.9%) 2927.314 ops/s [Average]
  (min, avg, max) = (1557202.407, 1566927.099, 1573226.484), stdev = 4381.466
  CI (99.9%): [1563999.785, 1569854.413] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectLong  thrpt   30  1566927.099 ± 2927.314  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 719691.427 ops/s
# Warmup Iteration   2: 1591834.899 ops/s
# Warmup Iteration   3: 1717474.302 ops/s
# Warmup Iteration   4: 1726127.747 ops/s
# Warmup Iteration   5: 1440670.095 ops/s
# Warmup Iteration   6: 1727936.291 ops/s
# Warmup Iteration   7: 1722212.402 ops/s
# Warmup Iteration   8: 1727140.428 ops/s
# Warmup Iteration   9: 1723664.612 ops/s
# Warmup Iteration  10: 1725274.040 ops/s
# Warmup Iteration  11: 1730331.923 ops/s
# Warmup Iteration  12: 1728985.676 ops/s
# Warmup Iteration  13: 1726957.672 ops/s
# Warmup Iteration  14: 1730944.001 ops/s
# Warmup Iteration  15: 1726055.307 ops/s
# Warmup Iteration  16: 1728050.335 ops/s
# Warmup Iteration  17: 1733884.714 ops/s
# Warmup Iteration  18: 1728998.248 ops/s
# Warmup Iteration  19: 1731568.389 ops/s
# Warmup Iteration  20: 1728551.414 ops/s
# Warmup Iteration  21: 1731094.994 ops/s
# Warmup Iteration  22: 1727244.488 ops/s
# Warmup Iteration  23: 1727460.255 ops/s
# Warmup Iteration  24: 1725933.958 ops/s
# Warmup Iteration  25: 1728269.258 ops/s
# Warmup Iteration  26: 1724511.643 ops/s
# Warmup Iteration  27: 1727748.688 ops/s
# Warmup Iteration  28: 1727383.806 ops/s
# Warmup Iteration  29: 1725125.893 ops/s
# Warmup Iteration  30: 1728450.521 ops/s
Iteration   1: 1730415.746 ops/s
Iteration   2: 1729153.201 ops/s
Iteration   3: 1732221.183 ops/s
Iteration   4: 1733108.450 ops/s
Iteration   5: 1731374.389 ops/s
Iteration   6: 1730998.627 ops/s
Iteration   7: 1727150.563 ops/s
Iteration   8: 1733039.241 ops/s
Iteration   9: 1727832.003 ops/s
Iteration  10: 1731802.725 ops/s
Iteration  11: 1728218.777 ops/s
Iteration  12: 1727960.265 ops/s
Iteration  13: 1732310.162 ops/s
Iteration  14: 1729593.874 ops/s
Iteration  15: 1727613.970 ops/s
Iteration  16: 1730686.437 ops/s
Iteration  17: 1733371.264 ops/s
Iteration  18: 1721781.473 ops/s
Iteration  19: 1729078.017 ops/s
Iteration  20: 1729861.576 ops/s
Iteration  21: 1725838.358 ops/s
Iteration  22: 1729329.956 ops/s
Iteration  23: 1724730.712 ops/s
Iteration  24: 1724269.307 ops/s
Iteration  25: 1728493.582 ops/s
Iteration  26: 1727150.619 ops/s
Iteration  27: 1727690.010 ops/s
Iteration  28: 1730184.378 ops/s
Iteration  29: 1730662.057 ops/s
Iteration  30: 1735172.129 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectShort":
  1729369.768 ±(99.9%) 1968.943 ops/s [Average]
  (min, avg, max) = (1721781.473, 1729369.768, 1735172.129), stdev = 2947.021
  CI (99.9%): [1727400.826, 1731338.711] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectShort  thrpt   30  1729369.768 ± 1968.943  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 169207.369 ops/s
# Warmup Iteration   2: 293730.821 ops/s
# Warmup Iteration   3: 349771.782 ops/s
# Warmup Iteration   4: 352355.331 ops/s
# Warmup Iteration   5: 351015.259 ops/s
# Warmup Iteration   6: 313266.806 ops/s
# Warmup Iteration   7: 331215.842 ops/s
# Warmup Iteration   8: 351741.487 ops/s
# Warmup Iteration   9: 352147.392 ops/s
# Warmup Iteration  10: 351810.513 ops/s
# Warmup Iteration  11: 350926.423 ops/s
# Warmup Iteration  12: 351509.595 ops/s
# Warmup Iteration  13: 352094.262 ops/s
# Warmup Iteration  14: 351936.507 ops/s
# Warmup Iteration  15: 351105.403 ops/s
# Warmup Iteration  16: 352151.671 ops/s
# Warmup Iteration  17: 352706.915 ops/s
# Warmup Iteration  18: 352493.783 ops/s
# Warmup Iteration  19: 351233.709 ops/s
# Warmup Iteration  20: 352283.653 ops/s
# Warmup Iteration  21: 352080.429 ops/s
# Warmup Iteration  22: 351286.032 ops/s
# Warmup Iteration  23: 352068.538 ops/s
# Warmup Iteration  24: 352064.783 ops/s
# Warmup Iteration  25: 351811.931 ops/s
# Warmup Iteration  26: 352023.881 ops/s
# Warmup Iteration  27: 351667.859 ops/s
# Warmup Iteration  28: 351822.037 ops/s
# Warmup Iteration  29: 351705.292 ops/s
# Warmup Iteration  30: 352147.326 ops/s
Iteration   1: 352859.561 ops/s
Iteration   2: 351194.091 ops/s
Iteration   3: 352114.495 ops/s
Iteration   4: 352197.063 ops/s
Iteration   5: 351660.145 ops/s
Iteration   6: 352440.182 ops/s
Iteration   7: 351844.887 ops/s
Iteration   8: 351619.404 ops/s
Iteration   9: 351555.335 ops/s
Iteration  10: 352788.949 ops/s
Iteration  11: 351897.499 ops/s
Iteration  12: 352226.591 ops/s
Iteration  13: 351783.279 ops/s
Iteration  14: 352983.076 ops/s
Iteration  15: 351565.770 ops/s
Iteration  16: 352660.007 ops/s
Iteration  17: 352070.956 ops/s
Iteration  18: 352574.351 ops/s
Iteration  19: 351721.501 ops/s
Iteration  20: 352315.354 ops/s
Iteration  21: 351152.056 ops/s
Iteration  22: 352864.708 ops/s
Iteration  23: 352207.247 ops/s
Iteration  24: 352814.858 ops/s
Iteration  25: 351405.471 ops/s
Iteration  26: 351976.214 ops/s
Iteration  27: 352385.115 ops/s
Iteration  28: 352569.867 ops/s
Iteration  29: 351690.594 ops/s
Iteration  30: 352670.512 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectWith":
  352126.971 ±(99.9%) 351.182 ops/s [Average]
  (min, avg, max) = (351152.056, 352126.971, 352983.076), stdev = 525.632
  CI (99.9%): [351775.789, 352478.153] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_flatCollectWith  thrpt   30  352126.971 ± 351.182  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 614411.155 ops/s
# Warmup Iteration   2: 1181792.042 ops/s
# Warmup Iteration   3: 1339526.996 ops/s
# Warmup Iteration   4: 1347776.335 ops/s
# Warmup Iteration   5: 1263424.036 ops/s
# Warmup Iteration   6: 1196548.828 ops/s
# Warmup Iteration   7: 1336008.380 ops/s
# Warmup Iteration   8: 1338316.042 ops/s
# Warmup Iteration   9: 1339600.838 ops/s
# Warmup Iteration  10: 1337720.246 ops/s
# Warmup Iteration  11: 1333820.687 ops/s
# Warmup Iteration  12: 1338532.805 ops/s
# Warmup Iteration  13: 1339522.131 ops/s
# Warmup Iteration  14: 1339587.292 ops/s
# Warmup Iteration  15: 1335280.513 ops/s
# Warmup Iteration  16: 1339122.910 ops/s
# Warmup Iteration  17: 1339231.864 ops/s
# Warmup Iteration  18: 1339642.832 ops/s
# Warmup Iteration  19: 1339274.497 ops/s
# Warmup Iteration  20: 1338394.257 ops/s
# Warmup Iteration  21: 1339426.080 ops/s
# Warmup Iteration  22: 1338638.366 ops/s
# Warmup Iteration  23: 1338267.872 ops/s
# Warmup Iteration  24: 1336703.254 ops/s
# Warmup Iteration  25: 1335958.595 ops/s
# Warmup Iteration  26: 1337033.089 ops/s
# Warmup Iteration  27: 1339576.906 ops/s
# Warmup Iteration  28: 1338339.071 ops/s
# Warmup Iteration  29: 1340254.424 ops/s
# Warmup Iteration  30: 1335000.853 ops/s
Iteration   1: 1334860.994 ops/s
Iteration   2: 1336634.808 ops/s
Iteration   3: 1338818.447 ops/s
Iteration   4: 1336347.701 ops/s
Iteration   5: 1330815.257 ops/s
Iteration   6: 1334317.883 ops/s
Iteration   7: 1339918.206 ops/s
Iteration   8: 1336439.358 ops/s
Iteration   9: 1338445.401 ops/s
Iteration  10: 1341976.779 ops/s
Iteration  11: 1330027.157 ops/s
Iteration  12: 1333894.536 ops/s
Iteration  13: 1336374.411 ops/s
Iteration  14: 1338361.300 ops/s
Iteration  15: 1339217.086 ops/s
Iteration  16: 1338963.967 ops/s
Iteration  17: 1338716.236 ops/s
Iteration  18: 1335644.839 ops/s
Iteration  19: 1336102.216 ops/s
Iteration  20: 1334441.548 ops/s
Iteration  21: 1336109.393 ops/s
Iteration  22: 1340519.914 ops/s
Iteration  23: 1337293.229 ops/s
Iteration  24: 1338679.657 ops/s
Iteration  25: 1339622.570 ops/s
Iteration  26: 1334116.501 ops/s
Iteration  27: 1336202.281 ops/s
Iteration  28: 1340813.574 ops/s
Iteration  29: 1340600.682 ops/s
Iteration  30: 1337857.847 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_forEach":
  1337071.126 ±(99.9%) 1885.632 ops/s [Average]
  (min, avg, max) = (1330027.157, 1337071.126, 1341976.779), stdev = 2822.325
  CI (99.9%): [1335185.494, 1338956.758] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_forEach  thrpt   30  1337071.126 ± 1885.632  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 158120.305 ops/s
# Warmup Iteration   2: 177395.658 ops/s
# Warmup Iteration   3: 203400.733 ops/s
# Warmup Iteration   4: 222737.870 ops/s
# Warmup Iteration   5: 222557.882 ops/s
# Warmup Iteration   6: 222315.861 ops/s
# Warmup Iteration   7: 221562.478 ops/s
# Warmup Iteration   8: 222106.776 ops/s
# Warmup Iteration   9: 222570.735 ops/s
# Warmup Iteration  10: 221978.937 ops/s
# Warmup Iteration  11: 223029.235 ops/s
# Warmup Iteration  12: 222478.178 ops/s
# Warmup Iteration  13: 222626.970 ops/s
# Warmup Iteration  14: 205963.132 ops/s
# Warmup Iteration  15: 205273.876 ops/s
# Warmup Iteration  16: 221893.303 ops/s
# Warmup Iteration  17: 230516.864 ops/s
# Warmup Iteration  18: 230640.416 ops/s
# Warmup Iteration  19: 230662.538 ops/s
# Warmup Iteration  20: 229909.064 ops/s
# Warmup Iteration  21: 229388.078 ops/s
# Warmup Iteration  22: 230301.379 ops/s
# Warmup Iteration  23: 230816.299 ops/s
# Warmup Iteration  24: 230226.845 ops/s
# Warmup Iteration  25: 230322.079 ops/s
# Warmup Iteration  26: 230533.658 ops/s
# Warmup Iteration  27: 230197.927 ops/s
# Warmup Iteration  28: 230202.307 ops/s
# Warmup Iteration  29: 230035.586 ops/s
# Warmup Iteration  30: 230696.658 ops/s
Iteration   1: 229169.125 ops/s
Iteration   2: 229970.115 ops/s
Iteration   3: 229707.150 ops/s
Iteration   4: 230608.813 ops/s
Iteration   5: 230494.490 ops/s
Iteration   6: 230597.933 ops/s
Iteration   7: 230994.732 ops/s
Iteration   8: 230524.957 ops/s
Iteration   9: 230506.000 ops/s
Iteration  10: 229928.768 ops/s
Iteration  11: 230703.234 ops/s
Iteration  12: 230604.595 ops/s
Iteration  13: 229865.936 ops/s
Iteration  14: 230777.755 ops/s
Iteration  15: 230540.623 ops/s
Iteration  16: 229807.554 ops/s
Iteration  17: 231002.709 ops/s
Iteration  18: 229981.949 ops/s
Iteration  19: 230774.422 ops/s
Iteration  20: 230701.568 ops/s
Iteration  21: 230697.777 ops/s
Iteration  22: 230832.155 ops/s
Iteration  23: 229684.105 ops/s
Iteration  24: 230357.315 ops/s
Iteration  25: 230076.856 ops/s
Iteration  26: 230789.521 ops/s
Iteration  27: 230198.504 ops/s
Iteration  28: 230709.170 ops/s
Iteration  29: 230375.144 ops/s
Iteration  30: 230423.451 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_forEachFromTo":
  230380.214 ±(99.9%) 297.431 ops/s [Average]
  (min, avg, max) = (229169.125, 230380.214, 231002.709), stdev = 445.181
  CI (99.9%): [230082.783, 230677.645] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_forEachFromTo  thrpt   30  230380.214 ± 297.431  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 580307.559 ops/s
# Warmup Iteration   2: 1158806.889 ops/s
# Warmup Iteration   3: 1264074.887 ops/s
# Warmup Iteration   4: 1267275.456 ops/s
# Warmup Iteration   5: 1066559.433 ops/s
# Warmup Iteration   6: 1269870.614 ops/s
# Warmup Iteration   7: 1274326.109 ops/s
# Warmup Iteration   8: 1271228.349 ops/s
# Warmup Iteration   9: 1272103.366 ops/s
# Warmup Iteration  10: 1272215.546 ops/s
# Warmup Iteration  11: 1262417.523 ops/s
# Warmup Iteration  12: 1270266.503 ops/s
# Warmup Iteration  13: 1273265.054 ops/s
# Warmup Iteration  14: 1271340.423 ops/s
# Warmup Iteration  15: 1272480.208 ops/s
# Warmup Iteration  16: 1272487.984 ops/s
# Warmup Iteration  17: 1272451.458 ops/s
# Warmup Iteration  18: 1275827.268 ops/s
# Warmup Iteration  19: 1274648.929 ops/s
# Warmup Iteration  20: 1269252.679 ops/s
# Warmup Iteration  21: 1275158.721 ops/s
# Warmup Iteration  22: 1270955.329 ops/s
# Warmup Iteration  23: 1272278.829 ops/s
# Warmup Iteration  24: 1274360.507 ops/s
# Warmup Iteration  25: 1274097.720 ops/s
# Warmup Iteration  26: 1271169.120 ops/s
# Warmup Iteration  27: 1272391.055 ops/s
# Warmup Iteration  28: 1270907.738 ops/s
# Warmup Iteration  29: 1271746.235 ops/s
# Warmup Iteration  30: 1271615.250 ops/s
Iteration   1: 1267963.077 ops/s
Iteration   2: 1273933.985 ops/s
Iteration   3: 1269357.732 ops/s
Iteration   4: 1270233.358 ops/s
Iteration   5: 1273262.187 ops/s
Iteration   6: 1273236.394 ops/s
Iteration   7: 1272700.637 ops/s
Iteration   8: 1273851.277 ops/s
Iteration   9: 1271746.043 ops/s
Iteration  10: 1271673.327 ops/s
Iteration  11: 1267038.862 ops/s
Iteration  12: 1274481.613 ops/s
Iteration  13: 1273071.410 ops/s
Iteration  14: 1271435.027 ops/s
Iteration  15: 1272930.536 ops/s
Iteration  16: 1270776.785 ops/s
Iteration  17: 1270664.644 ops/s
Iteration  18: 1274713.060 ops/s
Iteration  19: 1274405.126 ops/s
Iteration  20: 1274120.469 ops/s
Iteration  21: 1272315.461 ops/s
Iteration  22: 1273911.450 ops/s
Iteration  23: 1274054.956 ops/s
Iteration  24: 1271076.677 ops/s
Iteration  25: 1274014.654 ops/s
Iteration  26: 1275241.614 ops/s
Iteration  27: 1272547.983 ops/s
Iteration  28: 1269491.411 ops/s
Iteration  29: 1274407.829 ops/s
Iteration  30: 1269021.504 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_forEachWith":
  1272255.970 ±(99.9%) 1436.528 ops/s [Average]
  (min, avg, max) = (1267038.862, 1272255.970, 1275241.614), stdev = 2150.127
  CI (99.9%): [1270819.442, 1273692.498] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_forEachWith  thrpt   30  1272255.970 ± 1436.528  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 328502.253 ops/s
# Warmup Iteration   2: 562988.082 ops/s
# Warmup Iteration   3: 659531.038 ops/s
# Warmup Iteration   4: 662679.427 ops/s
# Warmup Iteration   5: 661448.304 ops/s
# Warmup Iteration   6: 547521.574 ops/s
# Warmup Iteration   7: 665137.050 ops/s
# Warmup Iteration   8: 662477.814 ops/s
# Warmup Iteration   9: 662544.157 ops/s
# Warmup Iteration  10: 662953.977 ops/s
# Warmup Iteration  11: 663546.725 ops/s
# Warmup Iteration  12: 663988.315 ops/s
# Warmup Iteration  13: 665668.639 ops/s
# Warmup Iteration  14: 665364.187 ops/s
# Warmup Iteration  15: 665254.520 ops/s
# Warmup Iteration  16: 664656.763 ops/s
# Warmup Iteration  17: 665456.207 ops/s
# Warmup Iteration  18: 664992.417 ops/s
# Warmup Iteration  19: 664307.039 ops/s
# Warmup Iteration  20: 662920.452 ops/s
# Warmup Iteration  21: 664426.287 ops/s
# Warmup Iteration  22: 663969.427 ops/s
# Warmup Iteration  23: 664280.673 ops/s
# Warmup Iteration  24: 664616.433 ops/s
# Warmup Iteration  25: 661977.679 ops/s
# Warmup Iteration  26: 663380.082 ops/s
# Warmup Iteration  27: 662636.867 ops/s
# Warmup Iteration  28: 665084.339 ops/s
# Warmup Iteration  29: 664229.162 ops/s
# Warmup Iteration  30: 661119.184 ops/s
Iteration   1: 663218.182 ops/s
Iteration   2: 664984.772 ops/s
Iteration   3: 662012.001 ops/s
Iteration   4: 660516.264 ops/s
Iteration   5: 661085.780 ops/s
Iteration   6: 664948.014 ops/s
Iteration   7: 664120.357 ops/s
Iteration   8: 663542.660 ops/s
Iteration   9: 663963.212 ops/s
Iteration  10: 665731.878 ops/s
Iteration  11: 665832.722 ops/s
Iteration  12: 666103.843 ops/s
Iteration  13: 664776.786 ops/s
Iteration  14: 664489.400 ops/s
Iteration  15: 664953.519 ops/s
Iteration  16: 666023.627 ops/s
Iteration  17: 664548.818 ops/s
Iteration  18: 664385.544 ops/s
Iteration  19: 665160.052 ops/s
Iteration  20: 659461.886 ops/s
Iteration  21: 665454.624 ops/s
Iteration  22: 662050.182 ops/s
Iteration  23: 663707.016 ops/s
Iteration  24: 664928.922 ops/s
Iteration  25: 666089.562 ops/s
Iteration  26: 664043.985 ops/s
Iteration  27: 665848.380 ops/s
Iteration  28: 665432.678 ops/s
Iteration  29: 666653.876 ops/s
Iteration  30: 664288.898 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_forEachWithIndex":
  664278.581 ±(99.9%) 1162.578 ops/s [Average]
  (min, avg, max) = (659461.886, 664278.581, 666653.876), stdev = 1740.092
  CI (99.9%): [663116.004, 665441.159] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  664278.581 ± 1162.578  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_forEachWithIndexWithFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_forEachWithIndexWithFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 143504.839 ops/s
# Warmup Iteration   2: 163504.665 ops/s
# Warmup Iteration   3: 198992.561 ops/s
# Warmup Iteration   4: 211648.795 ops/s
# Warmup Iteration   5: 211478.030 ops/s
# Warmup Iteration   6: 211772.163 ops/s
# Warmup Iteration   7: 212743.735 ops/s
# Warmup Iteration   8: 212748.789 ops/s
# Warmup Iteration   9: 212318.276 ops/s
# Warmup Iteration  10: 212699.672 ops/s
# Warmup Iteration  11: 212151.444 ops/s
# Warmup Iteration  12: 212538.846 ops/s
# Warmup Iteration  13: 180228.427 ops/s
# Warmup Iteration  14: 211220.524 ops/s
# Warmup Iteration  15: 212555.106 ops/s
# Warmup Iteration  16: 212674.574 ops/s
# Warmup Iteration  17: 220605.810 ops/s
# Warmup Iteration  18: 218637.244 ops/s
# Warmup Iteration  19: 219945.777 ops/s
# Warmup Iteration  20: 220346.544 ops/s
# Warmup Iteration  21: 220113.740 ops/s
# Warmup Iteration  22: 220033.669 ops/s
# Warmup Iteration  23: 220043.549 ops/s
# Warmup Iteration  24: 220212.916 ops/s
# Warmup Iteration  25: 220253.927 ops/s
# Warmup Iteration  26: 219623.421 ops/s
# Warmup Iteration  27: 219938.173 ops/s
# Warmup Iteration  28: 220279.776 ops/s
# Warmup Iteration  29: 220308.652 ops/s
# Warmup Iteration  30: 220601.412 ops/s
Iteration   1: 220172.791 ops/s
Iteration   2: 220761.466 ops/s
Iteration   3: 219953.468 ops/s
Iteration   4: 220305.720 ops/s
Iteration   5: 220283.249 ops/s
Iteration   6: 220008.704 ops/s
Iteration   7: 220391.234 ops/s
Iteration   8: 220146.027 ops/s
Iteration   9: 219816.736 ops/s
Iteration  10: 219338.274 ops/s
Iteration  11: 219662.726 ops/s
Iteration  12: 219260.338 ops/s
Iteration  13: 219763.346 ops/s
Iteration  14: 218642.702 ops/s
Iteration  15: 219664.267 ops/s
Iteration  16: 220291.759 ops/s
Iteration  17: 220548.985 ops/s
Iteration  18: 219918.959 ops/s
Iteration  19: 220468.728 ops/s
Iteration  20: 218910.501 ops/s
Iteration  21: 219999.302 ops/s
Iteration  22: 219673.080 ops/s
Iteration  23: 219209.875 ops/s
Iteration  24: 220833.707 ops/s
Iteration  25: 219905.430 ops/s
Iteration  26: 219745.343 ops/s
Iteration  27: 219657.128 ops/s
Iteration  28: 219610.212 ops/s
Iteration  29: 219593.562 ops/s
Iteration  30: 219727.198 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_forEachWithIndexWithFromTo":
  219875.494 ±(99.9%) 338.569 ops/s [Average]
  (min, avg, max) = (218642.702, 219875.494, 220833.707), stdev = 506.754
  CI (99.9%): [219536.925, 220214.063] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_forEachWithIndexWithFromTo  thrpt   30  219875.494 ± 338.569  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_forEachWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_forEachWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 438279.800 ops/s
# Warmup Iteration   2: 663112.012 ops/s
# Warmup Iteration   3: 905304.193 ops/s
# Warmup Iteration   4: 908488.138 ops/s
# Warmup Iteration   5: 911319.929 ops/s
# Warmup Iteration   6: 867428.561 ops/s
# Warmup Iteration   7: 800476.164 ops/s
# Warmup Iteration   8: 899359.439 ops/s
# Warmup Iteration   9: 901570.577 ops/s
# Warmup Iteration  10: 897967.083 ops/s
# Warmup Iteration  11: 902878.251 ops/s
# Warmup Iteration  12: 902130.523 ops/s
# Warmup Iteration  13: 902371.467 ops/s
# Warmup Iteration  14: 901973.427 ops/s
# Warmup Iteration  15: 900723.175 ops/s
# Warmup Iteration  16: 901630.318 ops/s
# Warmup Iteration  17: 901138.382 ops/s
# Warmup Iteration  18: 899966.617 ops/s
# Warmup Iteration  19: 899955.865 ops/s
# Warmup Iteration  20: 901387.581 ops/s
# Warmup Iteration  21: 900995.716 ops/s
# Warmup Iteration  22: 899712.280 ops/s
# Warmup Iteration  23: 901335.309 ops/s
# Warmup Iteration  24: 902363.562 ops/s
# Warmup Iteration  25: 901772.130 ops/s
# Warmup Iteration  26: 902194.251 ops/s
# Warmup Iteration  27: 901220.003 ops/s
# Warmup Iteration  28: 902430.570 ops/s
# Warmup Iteration  29: 902020.511 ops/s
# Warmup Iteration  30: 902746.700 ops/s
Iteration   1: 899461.389 ops/s
Iteration   2: 901898.354 ops/s
Iteration   3: 901204.761 ops/s
Iteration   4: 901834.471 ops/s
Iteration   5: 903323.718 ops/s
Iteration   6: 901580.876 ops/s
Iteration   7: 901413.269 ops/s
Iteration   8: 901422.668 ops/s
Iteration   9: 903483.561 ops/s
Iteration  10: 900772.182 ops/s
Iteration  11: 898420.960 ops/s
Iteration  12: 899828.871 ops/s
Iteration  13: 902934.831 ops/s
Iteration  14: 901452.973 ops/s
Iteration  15: 902186.786 ops/s
Iteration  16: 897295.059 ops/s
Iteration  17: 901326.353 ops/s
Iteration  18: 900601.030 ops/s
Iteration  19: 903182.643 ops/s
Iteration  20: 901598.251 ops/s
Iteration  21: 902782.307 ops/s
Iteration  22: 901536.547 ops/s
Iteration  23: 896319.500 ops/s
Iteration  24: 896835.766 ops/s
Iteration  25: 902101.324 ops/s
Iteration  26: 901910.807 ops/s
Iteration  27: 902807.069 ops/s
Iteration  28: 900980.938 ops/s
Iteration  29: 903193.975 ops/s
Iteration  30: 899146.123 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_forEachWithOccurrences":
  901094.579 ±(99.9%) 1269.574 ops/s [Average]
  (min, avg, max) = (896319.500, 901094.579, 903483.561), stdev = 1900.238
  CI (99.9%): [899825.005, 902364.152] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_forEachWithOccurrences  thrpt   30  901094.579 ± 1269.574  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_fusedCollectMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_fusedCollectMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 812611.105 ops/s
# Warmup Iteration   2: 1748767.797 ops/s
# Warmup Iteration   3: 1860121.145 ops/s
# Warmup Iteration   4: 1865633.580 ops/s
# Warmup Iteration   5: 1569332.584 ops/s
# Warmup Iteration   6: 1875591.484 ops/s
# Warmup Iteration   7: 1877030.431 ops/s
# Warmup Iteration   8: 1875309.377 ops/s
# Warmup Iteration   9: 1877710.069 ops/s
# Warmup Iteration  10: 1869968.616 ops/s
# Warmup Iteration  11: 1876700.191 ops/s
# Warmup Iteration  12: 1861150.743 ops/s
# Warmup Iteration  13: 1876724.637 ops/s
# Warmup Iteration  14: 1878431.480 ops/s
# Warmup Iteration  15: 1877679.772 ops/s
# Warmup Iteration  16: 1874369.382 ops/s
# Warmup Iteration  17: 1879571.437 ops/s
# Warmup Iteration  18: 1880806.537 ops/s
# Warmup Iteration  19: 1865512.249 ops/s
# Warmup Iteration  20: 1874943.857 ops/s
# Warmup Iteration  21: 1862173.213 ops/s
# Warmup Iteration  22: 1868442.763 ops/s
# Warmup Iteration  23: 1875738.829 ops/s
# Warmup Iteration  24: 1877630.057 ops/s
# Warmup Iteration  25: 1873301.271 ops/s
# Warmup Iteration  26: 1879128.691 ops/s
# Warmup Iteration  27: 1878600.559 ops/s
# Warmup Iteration  28: 1879848.115 ops/s
# Warmup Iteration  29: 1876075.196 ops/s
# Warmup Iteration  30: 1875462.907 ops/s
Iteration   1: 1879523.233 ops/s
Iteration   2: 1877288.158 ops/s
Iteration   3: 1879898.129 ops/s
Iteration   4: 1883576.248 ops/s
Iteration   5: 1884606.548 ops/s
Iteration   6: 1882025.101 ops/s
Iteration   7: 1877742.201 ops/s
Iteration   8: 1883213.180 ops/s
Iteration   9: 1863240.515 ops/s
Iteration  10: 1880096.862 ops/s
Iteration  11: 1878201.032 ops/s
Iteration  12: 1882430.664 ops/s
Iteration  13: 1868872.296 ops/s
Iteration  14: 1881392.516 ops/s
Iteration  15: 1880636.556 ops/s
Iteration  16: 1881362.877 ops/s
Iteration  17: 1883942.059 ops/s
Iteration  18: 1883984.390 ops/s
Iteration  19: 1888324.530 ops/s
Iteration  20: 1890273.092 ops/s
Iteration  21: 1886231.672 ops/s
Iteration  22: 1885197.143 ops/s
Iteration  23: 1890346.273 ops/s
Iteration  24: 1879717.215 ops/s
Iteration  25: 1886199.109 ops/s
Iteration  26: 1884980.894 ops/s
Iteration  27: 1882579.072 ops/s
Iteration  28: 1870468.505 ops/s
Iteration  29: 1888032.648 ops/s
Iteration  30: 1891453.210 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_fusedCollectMakeString":
  1881861.198 ±(99.9%) 4135.164 ops/s [Average]
  (min, avg, max) = (1863240.515, 1881861.198, 1891453.210), stdev = 6189.319
  CI (99.9%): [1877726.034, 1885996.361] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_fusedCollectMakeString  thrpt   30  1881861.198 ± 4135.164  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_getAny$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_getAny

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1004474.225 ops/s
# Warmup Iteration   2: 1488137.766 ops/s
# Warmup Iteration   3: 1881704.081 ops/s
# Warmup Iteration   4: 1861822.335 ops/s
# Warmup Iteration   5: 1881474.748 ops/s
# Warmup Iteration   6: 1883241.708 ops/s
# Warmup Iteration   7: 1571819.580 ops/s
# Warmup Iteration   8: 1868352.318 ops/s
# Warmup Iteration   9: 1873898.441 ops/s
# Warmup Iteration  10: 1868254.781 ops/s
# Warmup Iteration  11: 1870862.501 ops/s
# Warmup Iteration  12: 1871933.521 ops/s
# Warmup Iteration  13: 1875267.347 ops/s
# Warmup Iteration  14: 1869545.764 ops/s
# Warmup Iteration  15: 1872035.664 ops/s
# Warmup Iteration  16: 1870506.854 ops/s
# Warmup Iteration  17: 1873050.115 ops/s
# Warmup Iteration  18: 1873067.057 ops/s
# Warmup Iteration  19: 1872913.344 ops/s
# Warmup Iteration  20: 1873264.661 ops/s
# Warmup Iteration  21: 1871027.584 ops/s
# Warmup Iteration  22: 1871084.778 ops/s
# Warmup Iteration  23: 1865154.705 ops/s
# Warmup Iteration  24: 1874509.038 ops/s
# Warmup Iteration  25: 1873158.334 ops/s
# Warmup Iteration  26: 1866370.201 ops/s
# Warmup Iteration  27: 1871345.920 ops/s
# Warmup Iteration  28: 1873025.318 ops/s
# Warmup Iteration  29: 1871753.440 ops/s
# Warmup Iteration  30: 1867953.287 ops/s
Iteration   1: 1874543.007 ops/s
Iteration   2: 1867827.209 ops/s
Iteration   3: 1859756.637 ops/s
Iteration   4: 1869595.564 ops/s
Iteration   5: 1874536.636 ops/s
Iteration   6: 1869474.703 ops/s
Iteration   7: 1872762.407 ops/s
Iteration   8: 1874690.461 ops/s
Iteration   9: 1872222.552 ops/s
Iteration  10: 1873210.289 ops/s
Iteration  11: 1871211.041 ops/s
Iteration  12: 1872194.711 ops/s
Iteration  13: 1866999.819 ops/s
Iteration  14: 1869761.861 ops/s
Iteration  15: 1870946.807 ops/s
Iteration  16: 1870557.488 ops/s
Iteration  17: 1873551.357 ops/s
Iteration  18: 1871152.543 ops/s
Iteration  19: 1864938.659 ops/s
Iteration  20: 1865801.690 ops/s
Iteration  21: 1868683.433 ops/s
Iteration  22: 1868308.528 ops/s
Iteration  23: 1870126.180 ops/s
Iteration  24: 1871382.458 ops/s
Iteration  25: 1875353.139 ops/s
Iteration  26: 1873372.239 ops/s
Iteration  27: 1874265.059 ops/s
Iteration  28: 1873689.031 ops/s
Iteration  29: 1872790.546 ops/s
Iteration  30: 1872710.624 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_getAny":
  1870880.556 ±(99.9%) 2288.120 ops/s [Average]
  (min, avg, max) = (1859756.637, 1870880.556, 1875353.139), stdev = 3424.750
  CI (99.9%): [1868592.436, 1873168.676] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_getAny  thrpt   30  1870880.556 ± 2288.120  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 334120.488 ops/s
# Warmup Iteration   2: 504205.389 ops/s
# Warmup Iteration   3: 597194.607 ops/s
# Warmup Iteration   4: 591013.884 ops/s
# Warmup Iteration   5: 595942.718 ops/s
# Warmup Iteration   6: 595609.128 ops/s
# Warmup Iteration   7: 502985.059 ops/s
# Warmup Iteration   8: 597559.796 ops/s
# Warmup Iteration   9: 597174.841 ops/s
# Warmup Iteration  10: 598147.255 ops/s
# Warmup Iteration  11: 596343.364 ops/s
# Warmup Iteration  12: 597189.163 ops/s
# Warmup Iteration  13: 597841.618 ops/s
# Warmup Iteration  14: 598182.513 ops/s
# Warmup Iteration  15: 598457.900 ops/s
# Warmup Iteration  16: 597361.872 ops/s
# Warmup Iteration  17: 585921.218 ops/s
# Warmup Iteration  18: 585121.249 ops/s
# Warmup Iteration  19: 585866.528 ops/s
# Warmup Iteration  20: 586436.524 ops/s
# Warmup Iteration  21: 586211.294 ops/s
# Warmup Iteration  22: 585641.938 ops/s
# Warmup Iteration  23: 583906.407 ops/s
# Warmup Iteration  24: 585944.082 ops/s
# Warmup Iteration  25: 585530.972 ops/s
# Warmup Iteration  26: 585980.160 ops/s
# Warmup Iteration  27: 583777.487 ops/s
# Warmup Iteration  28: 586600.075 ops/s
# Warmup Iteration  29: 584823.158 ops/s
# Warmup Iteration  30: 586962.351 ops/s
Iteration   1: 585266.886 ops/s
Iteration   2: 586091.038 ops/s
Iteration   3: 584350.727 ops/s
Iteration   4: 584898.699 ops/s
Iteration   5: 585770.017 ops/s
Iteration   6: 584969.480 ops/s
Iteration   7: 586596.031 ops/s
Iteration   8: 584943.207 ops/s
Iteration   9: 585834.600 ops/s
Iteration  10: 584418.909 ops/s
Iteration  11: 584466.036 ops/s
Iteration  12: 587109.581 ops/s
Iteration  13: 586954.632 ops/s
Iteration  14: 586161.822 ops/s
Iteration  15: 581542.812 ops/s
Iteration  16: 586885.985 ops/s
Iteration  17: 586017.372 ops/s
Iteration  18: 585566.006 ops/s
Iteration  19: 586355.398 ops/s
Iteration  20: 585120.116 ops/s
Iteration  21: 586338.121 ops/s
Iteration  22: 584727.755 ops/s
Iteration  23: 587109.923 ops/s
Iteration  24: 585559.239 ops/s
Iteration  25: 585005.276 ops/s
Iteration  26: 585306.920 ops/s
Iteration  27: 583768.125 ops/s
Iteration  28: 585215.392 ops/s
Iteration  29: 586988.508 ops/s
Iteration  30: 586653.851 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_getFirst":
  585533.082 ±(99.9%) 793.877 ops/s [Average]
  (min, avg, max) = (581542.812, 585533.082, 587109.923), stdev = 1188.238
  CI (99.9%): [584739.205, 586326.959] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_getFirst  thrpt   30  585533.082 ± 793.877  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 370347.290 ops/s
# Warmup Iteration   2: 533822.110 ops/s
# Warmup Iteration   3: 648410.846 ops/s
# Warmup Iteration   4: 642490.510 ops/s
# Warmup Iteration   5: 648906.475 ops/s
# Warmup Iteration   6: 648398.808 ops/s
# Warmup Iteration   7: 596023.944 ops/s
# Warmup Iteration   8: 596479.850 ops/s
# Warmup Iteration   9: 648380.175 ops/s
# Warmup Iteration  10: 649005.839 ops/s
# Warmup Iteration  11: 650778.418 ops/s
# Warmup Iteration  12: 649441.831 ops/s
# Warmup Iteration  13: 649147.307 ops/s
# Warmup Iteration  14: 648522.254 ops/s
# Warmup Iteration  15: 649504.001 ops/s
# Warmup Iteration  16: 649591.672 ops/s
# Warmup Iteration  17: 648773.913 ops/s
# Warmup Iteration  18: 648799.441 ops/s
# Warmup Iteration  19: 648448.428 ops/s
# Warmup Iteration  20: 648714.769 ops/s
# Warmup Iteration  21: 648973.536 ops/s
# Warmup Iteration  22: 649485.357 ops/s
# Warmup Iteration  23: 649513.336 ops/s
# Warmup Iteration  24: 649488.411 ops/s
# Warmup Iteration  25: 650924.731 ops/s
# Warmup Iteration  26: 650274.802 ops/s
# Warmup Iteration  27: 648528.062 ops/s
# Warmup Iteration  28: 650187.093 ops/s
# Warmup Iteration  29: 649252.677 ops/s
# Warmup Iteration  30: 648395.583 ops/s
Iteration   1: 650771.411 ops/s
Iteration   2: 649477.420 ops/s
Iteration   3: 651326.837 ops/s
Iteration   4: 649659.994 ops/s
Iteration   5: 650095.276 ops/s
Iteration   6: 650701.357 ops/s
Iteration   7: 647682.261 ops/s
Iteration   8: 648502.187 ops/s
Iteration   9: 646025.015 ops/s
Iteration  10: 649143.515 ops/s
Iteration  11: 650107.964 ops/s
Iteration  12: 649205.232 ops/s
Iteration  13: 650575.565 ops/s
Iteration  14: 649176.199 ops/s
Iteration  15: 649649.435 ops/s
Iteration  16: 647821.517 ops/s
Iteration  17: 648549.925 ops/s
Iteration  18: 645954.798 ops/s
Iteration  19: 648724.132 ops/s
Iteration  20: 648650.892 ops/s
Iteration  21: 648780.167 ops/s
Iteration  22: 649532.694 ops/s
Iteration  23: 647808.391 ops/s
Iteration  24: 647566.085 ops/s
Iteration  25: 647923.580 ops/s
Iteration  26: 646431.765 ops/s
Iteration  27: 650351.135 ops/s
Iteration  28: 648559.050 ops/s
Iteration  29: 647505.200 ops/s
Iteration  30: 650823.473 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_getLast":
  648902.749 ±(99.9%) 947.223 ops/s [Average]
  (min, avg, max) = (645954.798, 648902.749, 651326.837), stdev = 1417.759
  CI (99.9%): [647955.526, 649849.972] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_getLast  thrpt   30  648902.749 ± 947.223  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1349699.212 ops/s
# Warmup Iteration   2: 1932268.229 ops/s
# Warmup Iteration   3: 2333868.971 ops/s
# Warmup Iteration   4: 2347847.742 ops/s
# Warmup Iteration   5: 2347936.214 ops/s
# Warmup Iteration   6: 2350165.446 ops/s
# Warmup Iteration   7: 2165408.090 ops/s
# Warmup Iteration   8: 2150887.250 ops/s
# Warmup Iteration   9: 2353423.865 ops/s
# Warmup Iteration  10: 2347876.638 ops/s
# Warmup Iteration  11: 2356689.650 ops/s
# Warmup Iteration  12: 2351042.177 ops/s
# Warmup Iteration  13: 2359338.112 ops/s
# Warmup Iteration  14: 2348431.970 ops/s
# Warmup Iteration  15: 2348180.824 ops/s
# Warmup Iteration  16: 2350389.606 ops/s
# Warmup Iteration  17: 2351986.426 ops/s
# Warmup Iteration  18: 2355107.924 ops/s
# Warmup Iteration  19: 2353023.873 ops/s
# Warmup Iteration  20: 2351810.563 ops/s
# Warmup Iteration  21: 2346716.940 ops/s
# Warmup Iteration  22: 2353723.610 ops/s
# Warmup Iteration  23: 2353175.029 ops/s
# Warmup Iteration  24: 2353138.301 ops/s
# Warmup Iteration  25: 2353444.502 ops/s
# Warmup Iteration  26: 2355409.486 ops/s
# Warmup Iteration  27: 2351902.213 ops/s
# Warmup Iteration  28: 2350640.181 ops/s
# Warmup Iteration  29: 2351548.649 ops/s
# Warmup Iteration  30: 2353868.121 ops/s
Iteration   1: 2357815.171 ops/s
Iteration   2: 2338898.661 ops/s
Iteration   3: 2357444.095 ops/s
Iteration   4: 2360738.766 ops/s
Iteration   5: 2355910.612 ops/s
Iteration   6: 2354706.604 ops/s
Iteration   7: 2351141.321 ops/s
Iteration   8: 2351002.928 ops/s
Iteration   9: 2337191.272 ops/s
Iteration  10: 2360128.592 ops/s
Iteration  11: 2356173.199 ops/s
Iteration  12: 2347210.920 ops/s
Iteration  13: 2349048.072 ops/s
Iteration  14: 2344025.550 ops/s
Iteration  15: 2355474.386 ops/s
Iteration  16: 2355414.417 ops/s
Iteration  17: 2349309.719 ops/s
Iteration  18: 2357712.693 ops/s
Iteration  19: 2347859.707 ops/s
Iteration  20: 2353561.614 ops/s
Iteration  21: 2351467.346 ops/s
Iteration  22: 2352557.749 ops/s
Iteration  23: 2344664.949 ops/s
Iteration  24: 2348944.719 ops/s
Iteration  25: 2354315.813 ops/s
Iteration  26: 2351932.291 ops/s
Iteration  27: 2354880.221 ops/s
Iteration  28: 2348412.872 ops/s
Iteration  29: 2355324.274 ops/s
Iteration  30: 2355392.768 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_getOnly":
  2351955.377 ±(99.9%) 3783.066 ops/s [Average]
  (min, avg, max) = (2337191.272, 2351955.377, 2360738.766), stdev = 5662.315
  CI (99.9%): [2348172.311, 2355738.442] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_getOnly  thrpt   30  2351955.377 ± 3783.066  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_getOnly_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_getOnly_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 646287.933 ops/s
# Warmup Iteration   2: 687248.391 ops/s
# Warmup Iteration   3: 913859.301 ops/s
# Warmup Iteration   4: 903038.912 ops/s
# Warmup Iteration   5: 916198.223 ops/s
# Warmup Iteration   6: 918270.773 ops/s
# Warmup Iteration   7: 915743.624 ops/s
# Warmup Iteration   8: 914920.030 ops/s
# Warmup Iteration   9: 916086.920 ops/s
# Warmup Iteration  10: 916449.009 ops/s
# Warmup Iteration  11: 915997.813 ops/s
# Warmup Iteration  12: 768786.997 ops/s
# Warmup Iteration  13: 917486.137 ops/s
# Warmup Iteration  14: 914128.115 ops/s
# Warmup Iteration  15: 916878.359 ops/s
# Warmup Iteration  16: 913626.250 ops/s
# Warmup Iteration  17: 966399.442 ops/s
# Warmup Iteration  18: 965745.762 ops/s
# Warmup Iteration  19: 967947.128 ops/s
# Warmup Iteration  20: 966058.566 ops/s
# Warmup Iteration  21: 965438.061 ops/s
# Warmup Iteration  22: 963782.738 ops/s
# Warmup Iteration  23: 964316.113 ops/s
# Warmup Iteration  24: 968331.408 ops/s
# Warmup Iteration  25: 963883.067 ops/s
# Warmup Iteration  26: 964690.026 ops/s
# Warmup Iteration  27: 965231.419 ops/s
# Warmup Iteration  28: 962959.491 ops/s
# Warmup Iteration  29: 964184.025 ops/s
# Warmup Iteration  30: 968653.324 ops/s
Iteration   1: 964355.601 ops/s
Iteration   2: 963052.682 ops/s
Iteration   3: 967881.808 ops/s
Iteration   4: 966219.718 ops/s
Iteration   5: 965813.050 ops/s
Iteration   6: 966510.227 ops/s
Iteration   7: 967718.401 ops/s
Iteration   8: 969095.454 ops/s
Iteration   9: 969516.133 ops/s
Iteration  10: 961147.616 ops/s
Iteration  11: 964965.226 ops/s
Iteration  12: 967168.865 ops/s
Iteration  13: 967782.801 ops/s
Iteration  14: 963922.021 ops/s
Iteration  15: 966918.086 ops/s
Iteration  16: 968923.121 ops/s
Iteration  17: 965452.355 ops/s
Iteration  18: 966579.277 ops/s
Iteration  19: 967992.654 ops/s
Iteration  20: 966929.982 ops/s
Iteration  21: 966339.857 ops/s
Iteration  22: 968880.133 ops/s
Iteration  23: 966381.083 ops/s
Iteration  24: 962194.094 ops/s
Iteration  25: 963823.385 ops/s
Iteration  26: 959280.491 ops/s
Iteration  27: 965216.393 ops/s
Iteration  28: 964193.761 ops/s
Iteration  29: 965359.920 ops/s
Iteration  30: 964931.290 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_getOnly_empty_throws":
  965818.183 ±(99.9%) 1597.883 ops/s [Average]
  (min, avg, max) = (959280.491, 965818.183, 969516.133), stdev = 2391.637
  CI (99.9%): [964220.299, 967416.066] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_getOnly_empty_throws  thrpt   30  965818.183 ± 1597.883  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_getOnly_not_only_one_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_getOnly_not_only_one_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 603939.997 ops/s
# Warmup Iteration   2: 673520.790 ops/s
# Warmup Iteration   3: 886588.418 ops/s
# Warmup Iteration   4: 883072.565 ops/s
# Warmup Iteration   5: 883059.757 ops/s
# Warmup Iteration   6: 886150.484 ops/s
# Warmup Iteration   7: 885925.636 ops/s
# Warmup Iteration   8: 883858.828 ops/s
# Warmup Iteration   9: 885807.870 ops/s
# Warmup Iteration  10: 861280.962 ops/s
# Warmup Iteration  11: 765817.731 ops/s
# Warmup Iteration  12: 886687.117 ops/s
# Warmup Iteration  13: 884552.939 ops/s
# Warmup Iteration  14: 886107.506 ops/s
# Warmup Iteration  15: 881986.526 ops/s
# Warmup Iteration  16: 884210.714 ops/s
# Warmup Iteration  17: 934861.228 ops/s
# Warmup Iteration  18: 930139.219 ops/s
# Warmup Iteration  19: 931039.413 ops/s
# Warmup Iteration  20: 931237.635 ops/s
# Warmup Iteration  21: 934410.273 ops/s
# Warmup Iteration  22: 933796.888 ops/s
# Warmup Iteration  23: 933580.533 ops/s
# Warmup Iteration  24: 928680.375 ops/s
# Warmup Iteration  25: 934407.628 ops/s
# Warmup Iteration  26: 936142.242 ops/s
# Warmup Iteration  27: 936825.824 ops/s
# Warmup Iteration  28: 933319.791 ops/s
# Warmup Iteration  29: 931261.900 ops/s
# Warmup Iteration  30: 932366.317 ops/s
Iteration   1: 933908.733 ops/s
Iteration   2: 935620.785 ops/s
Iteration   3: 932338.288 ops/s
Iteration   4: 930580.810 ops/s
Iteration   5: 935567.492 ops/s
Iteration   6: 935136.262 ops/s
Iteration   7: 934580.836 ops/s
Iteration   8: 933442.284 ops/s
Iteration   9: 934415.943 ops/s
Iteration  10: 932712.748 ops/s
Iteration  11: 933733.364 ops/s
Iteration  12: 935352.333 ops/s
Iteration  13: 934331.434 ops/s
Iteration  14: 933198.150 ops/s
Iteration  15: 934989.444 ops/s
Iteration  16: 932133.460 ops/s
Iteration  17: 932350.514 ops/s
Iteration  18: 932068.734 ops/s
Iteration  19: 930928.779 ops/s
Iteration  20: 932429.403 ops/s
Iteration  21: 934080.387 ops/s
Iteration  22: 935362.976 ops/s
Iteration  23: 931366.519 ops/s
Iteration  24: 932583.313 ops/s
Iteration  25: 932433.568 ops/s
Iteration  26: 935407.846 ops/s
Iteration  27: 933678.897 ops/s
Iteration  28: 934894.226 ops/s
Iteration  29: 936305.741 ops/s
Iteration  30: 929197.038 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_getOnly_not_only_one_throws":
  933504.344 ±(99.9%) 1150.127 ops/s [Average]
  (min, avg, max) = (929197.038, 933504.344, 936305.741), stdev = 1721.456
  CI (99.9%): [932354.216, 934654.471] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_getOnly_not_only_one_throws  thrpt   30  933504.344 ± 1150.127  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 55502.729 ops/s
# Warmup Iteration   2: 82827.593 ops/s
# Warmup Iteration   3: 108264.798 ops/s
# Warmup Iteration   4: 108010.480 ops/s
# Warmup Iteration   5: 108524.221 ops/s
# Warmup Iteration   6: 108653.627 ops/s
# Warmup Iteration   7: 108639.658 ops/s
# Warmup Iteration   8: 97502.467 ops/s
# Warmup Iteration   9: 102635.958 ops/s
# Warmup Iteration  10: 108436.161 ops/s
# Warmup Iteration  11: 108684.402 ops/s
# Warmup Iteration  12: 108746.885 ops/s
# Warmup Iteration  13: 108724.079 ops/s
# Warmup Iteration  14: 108500.580 ops/s
# Warmup Iteration  15: 108541.253 ops/s
# Warmup Iteration  16: 108777.745 ops/s
# Warmup Iteration  17: 108704.589 ops/s
# Warmup Iteration  18: 108779.246 ops/s
# Warmup Iteration  19: 108916.570 ops/s
# Warmup Iteration  20: 108933.726 ops/s
# Warmup Iteration  21: 108745.428 ops/s
# Warmup Iteration  22: 108848.151 ops/s
# Warmup Iteration  23: 108695.742 ops/s
# Warmup Iteration  24: 108661.892 ops/s
# Warmup Iteration  25: 108805.720 ops/s
# Warmup Iteration  26: 108780.727 ops/s
# Warmup Iteration  27: 108603.172 ops/s
# Warmup Iteration  28: 108844.011 ops/s
# Warmup Iteration  29: 108495.456 ops/s
# Warmup Iteration  30: 108876.991 ops/s
Iteration   1: 108785.581 ops/s
Iteration   2: 107731.489 ops/s
Iteration   3: 108729.126 ops/s
Iteration   4: 108629.598 ops/s
Iteration   5: 108650.300 ops/s
Iteration   6: 109036.206 ops/s
Iteration   7: 108991.553 ops/s
Iteration   8: 108773.065 ops/s
Iteration   9: 108803.944 ops/s
Iteration  10: 109019.907 ops/s
Iteration  11: 109308.402 ops/s
Iteration  12: 108978.564 ops/s
Iteration  13: 108543.910 ops/s
Iteration  14: 108654.020 ops/s
Iteration  15: 108898.654 ops/s
Iteration  16: 108758.542 ops/s
Iteration  17: 108904.499 ops/s
Iteration  18: 108357.601 ops/s
Iteration  19: 109008.730 ops/s
Iteration  20: 108905.880 ops/s
Iteration  21: 108754.908 ops/s
Iteration  22: 108893.356 ops/s
Iteration  23: 109088.240 ops/s
Iteration  24: 108640.015 ops/s
Iteration  25: 108334.096 ops/s
Iteration  26: 108588.864 ops/s
Iteration  27: 108752.778 ops/s
Iteration  28: 108727.724 ops/s
Iteration  29: 108652.366 ops/s
Iteration  30: 108815.887 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_groupBy":
  108757.260 ±(99.9%) 190.022 ops/s [Average]
  (min, avg, max) = (107731.489, 108757.260, 109308.402), stdev = 284.415
  CI (99.9%): [108567.239, 108947.282] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_groupBy  thrpt   30  108757.260 ± 190.022  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9324.777 ops/s
# Warmup Iteration   2: 11655.204 ops/s
# Warmup Iteration   3: 15289.223 ops/s
# Warmup Iteration   4: 15680.832 ops/s
# Warmup Iteration   5: 15600.359 ops/s
# Warmup Iteration   6: 15731.274 ops/s
# Warmup Iteration   7: 15686.496 ops/s
# Warmup Iteration   8: 15725.961 ops/s
# Warmup Iteration   9: 15741.637 ops/s
# Warmup Iteration  10: 15703.072 ops/s
# Warmup Iteration  11: 14467.299 ops/s
# Warmup Iteration  12: 14393.108 ops/s
# Warmup Iteration  13: 15723.876 ops/s
# Warmup Iteration  14: 15750.707 ops/s
# Warmup Iteration  15: 15741.883 ops/s
# Warmup Iteration  16: 15672.438 ops/s
# Warmup Iteration  17: 15725.976 ops/s
# Warmup Iteration  18: 15762.156 ops/s
# Warmup Iteration  19: 15734.256 ops/s
# Warmup Iteration  20: 15722.055 ops/s
# Warmup Iteration  21: 15743.004 ops/s
# Warmup Iteration  22: 15758.387 ops/s
# Warmup Iteration  23: 15722.717 ops/s
# Warmup Iteration  24: 15756.202 ops/s
# Warmup Iteration  25: 15706.919 ops/s
# Warmup Iteration  26: 15717.432 ops/s
# Warmup Iteration  27: 15673.778 ops/s
# Warmup Iteration  28: 15754.746 ops/s
# Warmup Iteration  29: 15722.158 ops/s
# Warmup Iteration  30: 15773.292 ops/s
Iteration   1: 15669.374 ops/s
Iteration   2: 15722.516 ops/s
Iteration   3: 15719.199 ops/s
Iteration   4: 15753.228 ops/s
Iteration   5: 15726.636 ops/s
Iteration   6: 15720.591 ops/s
Iteration   7: 15724.930 ops/s
Iteration   8: 15758.528 ops/s
Iteration   9: 15705.349 ops/s
Iteration  10: 15763.671 ops/s
Iteration  11: 15740.820 ops/s
Iteration  12: 15722.204 ops/s
Iteration  13: 15757.190 ops/s
Iteration  14: 15763.464 ops/s
Iteration  15: 15718.476 ops/s
Iteration  16: 15712.954 ops/s
Iteration  17: 15689.027 ops/s
Iteration  18: 15692.632 ops/s
Iteration  19: 15744.621 ops/s
Iteration  20: 15759.721 ops/s
Iteration  21: 15704.082 ops/s
Iteration  22: 15659.201 ops/s
Iteration  23: 15671.706 ops/s
Iteration  24: 15750.719 ops/s
Iteration  25: 15686.530 ops/s
Iteration  26: 15753.765 ops/s
Iteration  27: 15743.947 ops/s
Iteration  28: 15729.922 ops/s
Iteration  29: 15734.239 ops/s
Iteration  30: 15755.692 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_groupByEach":
  15725.165 ±(99.9%) 19.943 ops/s [Average]
  (min, avg, max) = (15659.201, 15725.165, 15763.671), stdev = 29.849
  CI (99.9%): [15705.222, 15745.107] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt      Score    Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_groupByEach  thrpt   30  15725.165 ± 19.943  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1583356.757 ops/s
# Warmup Iteration   2: 3098623.047 ops/s
# Warmup Iteration   3: 3309199.247 ops/s
# Warmup Iteration   4: 3320669.313 ops/s
# Warmup Iteration   5: 2777384.446 ops/s
# Warmup Iteration   6: 3334121.137 ops/s
# Warmup Iteration   7: 3332636.564 ops/s
# Warmup Iteration   8: 3329774.712 ops/s
# Warmup Iteration   9: 3329107.577 ops/s
# Warmup Iteration  10: 3304657.934 ops/s
# Warmup Iteration  11: 3330540.220 ops/s
# Warmup Iteration  12: 3325360.680 ops/s
# Warmup Iteration  13: 3327261.735 ops/s
# Warmup Iteration  14: 3318627.225 ops/s
# Warmup Iteration  15: 3314666.241 ops/s
# Warmup Iteration  16: 3325021.410 ops/s
# Warmup Iteration  17: 3317062.687 ops/s
# Warmup Iteration  18: 3329440.786 ops/s
# Warmup Iteration  19: 3328178.143 ops/s
# Warmup Iteration  20: 3315798.001 ops/s
# Warmup Iteration  21: 3324688.601 ops/s
# Warmup Iteration  22: 3326562.323 ops/s
# Warmup Iteration  23: 3330560.330 ops/s
# Warmup Iteration  24: 3331364.656 ops/s
# Warmup Iteration  25: 3329347.148 ops/s
# Warmup Iteration  26: 3333170.100 ops/s
# Warmup Iteration  27: 3322956.206 ops/s
# Warmup Iteration  28: 3310549.550 ops/s
# Warmup Iteration  29: 3328115.391 ops/s
# Warmup Iteration  30: 3320455.392 ops/s
Iteration   1: 3326745.497 ops/s
Iteration   2: 3324041.075 ops/s
Iteration   3: 3325222.615 ops/s
Iteration   4: 3310732.244 ops/s
Iteration   5: 3324250.791 ops/s
Iteration   6: 3326909.818 ops/s
Iteration   7: 3327296.419 ops/s
Iteration   8: 3328904.045 ops/s
Iteration   9: 3328968.953 ops/s
Iteration  10: 3339167.248 ops/s
Iteration  11: 3334332.597 ops/s
Iteration  12: 3328834.241 ops/s
Iteration  13: 3333189.421 ops/s
Iteration  14: 3329166.517 ops/s
Iteration  15: 3331881.864 ops/s
Iteration  16: 3324728.322 ops/s
Iteration  17: 3317697.057 ops/s
Iteration  18: 3321917.411 ops/s
Iteration  19: 3332389.928 ops/s
Iteration  20: 3327022.211 ops/s
Iteration  21: 3322581.465 ops/s
Iteration  22: 3310397.580 ops/s
Iteration  23: 3325500.300 ops/s
Iteration  24: 3323427.356 ops/s
Iteration  25: 3329028.206 ops/s
Iteration  26: 3323493.591 ops/s
Iteration  27: 3311780.348 ops/s
Iteration  28: 3337562.925 ops/s
Iteration  29: 3315887.826 ops/s
Iteration  30: 3319126.729 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_groupByUniqueKey":
  3325406.153 ±(99.9%) 4788.075 ops/s [Average]
  (min, avg, max) = (3310397.580, 3325406.153, 3339167.248), stdev = 7166.566
  CI (99.9%): [3320618.078, 3330194.229] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  3325406.153 ± 4788.075  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1156656.859 ops/s
# Warmup Iteration   2: 2192125.000 ops/s
# Warmup Iteration   3: 2424970.620 ops/s
# Warmup Iteration   4: 2429710.197 ops/s
# Warmup Iteration   5: 2023477.705 ops/s
# Warmup Iteration   6: 2409412.755 ops/s
# Warmup Iteration   7: 2425288.651 ops/s
# Warmup Iteration   8: 2424488.543 ops/s
# Warmup Iteration   9: 2421203.405 ops/s
# Warmup Iteration  10: 2423642.764 ops/s
# Warmup Iteration  11: 2421943.487 ops/s
# Warmup Iteration  12: 2420858.826 ops/s
# Warmup Iteration  13: 2419501.751 ops/s
# Warmup Iteration  14: 2415354.693 ops/s
# Warmup Iteration  15: 2418653.136 ops/s
# Warmup Iteration  16: 2415885.032 ops/s
# Warmup Iteration  17: 2423470.717 ops/s
# Warmup Iteration  18: 2420017.846 ops/s
# Warmup Iteration  19: 2421440.957 ops/s
# Warmup Iteration  20: 2424228.155 ops/s
# Warmup Iteration  21: 2423984.817 ops/s
# Warmup Iteration  22: 2424583.279 ops/s
# Warmup Iteration  23: 2411148.678 ops/s
# Warmup Iteration  24: 2423672.049 ops/s
# Warmup Iteration  25: 2423558.906 ops/s
# Warmup Iteration  26: 2418774.590 ops/s
# Warmup Iteration  27: 2421665.151 ops/s
# Warmup Iteration  28: 2422281.145 ops/s
# Warmup Iteration  29: 2418513.532 ops/s
# Warmup Iteration  30: 2420575.017 ops/s
Iteration   1: 2422510.879 ops/s
Iteration   2: 2418978.454 ops/s
Iteration   3: 2416174.613 ops/s
Iteration   4: 2411308.769 ops/s
Iteration   5: 2419592.618 ops/s
Iteration   6: 2420619.460 ops/s
Iteration   7: 2427396.335 ops/s
Iteration   8: 2416719.870 ops/s
Iteration   9: 2421562.853 ops/s
Iteration  10: 2428040.457 ops/s
Iteration  11: 2416979.541 ops/s
Iteration  12: 2421478.077 ops/s
Iteration  13: 2418421.297 ops/s
Iteration  14: 2420611.449 ops/s
Iteration  15: 2427265.594 ops/s
Iteration  16: 2423420.854 ops/s
Iteration  17: 2408815.193 ops/s
Iteration  18: 2426304.252 ops/s
Iteration  19: 2417791.321 ops/s
Iteration  20: 2421264.183 ops/s
Iteration  21: 2411634.983 ops/s
Iteration  22: 2413280.933 ops/s
Iteration  23: 2414116.724 ops/s
Iteration  24: 2400630.214 ops/s
Iteration  25: 2408093.247 ops/s
Iteration  26: 2415861.197 ops/s
Iteration  27: 2422257.242 ops/s
Iteration  28: 2420481.309 ops/s
Iteration  29: 2424962.228 ops/s
Iteration  30: 2414222.371 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_groupByUniqueKey_target":
  2418359.884 ±(99.9%) 4201.890 ops/s [Average]
  (min, avg, max) = (2400630.214, 2418359.884, 2428040.457), stdev = 6289.191
  CI (99.9%): [2414157.994, 2422561.774] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  2418359.884 ± 4201.890  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 340466.669 ops/s
# Warmup Iteration   2: 379452.926 ops/s
# Warmup Iteration   3: 519195.409 ops/s
# Warmup Iteration   4: 519666.644 ops/s
# Warmup Iteration   5: 516216.404 ops/s
# Warmup Iteration   6: 516500.663 ops/s
# Warmup Iteration   7: 519769.064 ops/s
# Warmup Iteration   8: 517504.716 ops/s
# Warmup Iteration   9: 519804.860 ops/s
# Warmup Iteration  10: 520312.104 ops/s
# Warmup Iteration  11: 440210.934 ops/s
# Warmup Iteration  12: 512296.743 ops/s
# Warmup Iteration  13: 519400.431 ops/s
# Warmup Iteration  14: 519671.392 ops/s
# Warmup Iteration  15: 519939.017 ops/s
# Warmup Iteration  16: 518441.386 ops/s
# Warmup Iteration  17: 535162.416 ops/s
# Warmup Iteration  18: 534865.040 ops/s
# Warmup Iteration  19: 531894.797 ops/s
# Warmup Iteration  20: 535100.583 ops/s
# Warmup Iteration  21: 534192.544 ops/s
# Warmup Iteration  22: 534925.566 ops/s
# Warmup Iteration  23: 533757.741 ops/s
# Warmup Iteration  24: 534563.298 ops/s
# Warmup Iteration  25: 535183.758 ops/s
# Warmup Iteration  26: 534003.062 ops/s
# Warmup Iteration  27: 533661.307 ops/s
# Warmup Iteration  28: 533033.607 ops/s
# Warmup Iteration  29: 535377.004 ops/s
# Warmup Iteration  30: 533772.864 ops/s
Iteration   1: 534017.971 ops/s
Iteration   2: 535199.083 ops/s
Iteration   3: 535164.524 ops/s
Iteration   4: 532575.953 ops/s
Iteration   5: 535223.403 ops/s
Iteration   6: 531679.929 ops/s
Iteration   7: 531981.125 ops/s
Iteration   8: 534958.645 ops/s
Iteration   9: 534738.500 ops/s
Iteration  10: 532686.380 ops/s
Iteration  11: 533483.659 ops/s
Iteration  12: 535600.286 ops/s
Iteration  13: 535053.508 ops/s
Iteration  14: 533005.408 ops/s
Iteration  15: 535321.414 ops/s
Iteration  16: 535313.860 ops/s
Iteration  17: 534846.896 ops/s
Iteration  18: 529564.608 ops/s
Iteration  19: 533984.915 ops/s
Iteration  20: 535038.166 ops/s
Iteration  21: 533372.012 ops/s
Iteration  22: 535115.799 ops/s
Iteration  23: 534544.619 ops/s
Iteration  24: 535136.500 ops/s
Iteration  25: 534251.442 ops/s
Iteration  26: 534055.913 ops/s
Iteration  27: 534369.940 ops/s
Iteration  28: 533389.165 ops/s
Iteration  29: 532418.409 ops/s
Iteration  30: 533747.813 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate":
  533994.661 ±(99.9%) 921.786 ops/s [Average]
  (min, avg, max) = (529564.608, 533994.661, 535600.286), stdev = 1379.686
  CI (99.9%): [533072.875, 534916.447] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate  thrpt   30  533994.661 ± 921.786  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 376794.057 ops/s
# Warmup Iteration   2: 415100.487 ops/s
# Warmup Iteration   3: 546596.547 ops/s
# Warmup Iteration   4: 556380.481 ops/s
# Warmup Iteration   5: 559414.701 ops/s
# Warmup Iteration   6: 557343.490 ops/s
# Warmup Iteration   7: 558936.643 ops/s
# Warmup Iteration   8: 558696.896 ops/s
# Warmup Iteration   9: 560519.390 ops/s
# Warmup Iteration  10: 558808.330 ops/s
# Warmup Iteration  11: 549274.316 ops/s
# Warmup Iteration  12: 466950.572 ops/s
# Warmup Iteration  13: 559069.446 ops/s
# Warmup Iteration  14: 557475.433 ops/s
# Warmup Iteration  15: 558854.449 ops/s
# Warmup Iteration  16: 559542.479 ops/s
# Warmup Iteration  17: 577418.528 ops/s
# Warmup Iteration  18: 577272.042 ops/s
# Warmup Iteration  19: 578218.949 ops/s
# Warmup Iteration  20: 577387.712 ops/s
# Warmup Iteration  21: 580492.979 ops/s
# Warmup Iteration  22: 577991.077 ops/s
# Warmup Iteration  23: 575974.733 ops/s
# Warmup Iteration  24: 578005.609 ops/s
# Warmup Iteration  25: 578688.771 ops/s
# Warmup Iteration  26: 576523.681 ops/s
# Warmup Iteration  27: 577789.055 ops/s
# Warmup Iteration  28: 578197.043 ops/s
# Warmup Iteration  29: 578193.889 ops/s
# Warmup Iteration  30: 578461.107 ops/s
Iteration   1: 573616.244 ops/s
Iteration   2: 580173.459 ops/s
Iteration   3: 577488.307 ops/s
Iteration   4: 578691.493 ops/s
Iteration   5: 579535.191 ops/s
Iteration   6: 577818.072 ops/s
Iteration   7: 577956.024 ops/s
Iteration   8: 578830.146 ops/s
Iteration   9: 579287.221 ops/s
Iteration  10: 577579.538 ops/s
Iteration  11: 578951.802 ops/s
Iteration  12: 579591.066 ops/s
Iteration  13: 577817.187 ops/s
Iteration  14: 579734.234 ops/s
Iteration  15: 579423.934 ops/s
Iteration  16: 577666.994 ops/s
Iteration  17: 579813.206 ops/s
Iteration  18: 578493.126 ops/s
Iteration  19: 579521.633 ops/s
Iteration  20: 579247.973 ops/s
Iteration  21: 574666.493 ops/s
Iteration  22: 577247.990 ops/s
Iteration  23: 579772.355 ops/s
Iteration  24: 578943.858 ops/s
Iteration  25: 578352.939 ops/s
Iteration  26: 577176.779 ops/s
Iteration  27: 577186.726 ops/s
Iteration  28: 579618.234 ops/s
Iteration  29: 578541.260 ops/s
Iteration  30: 572078.435 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate":
  578160.731 ±(99.9%) 1240.603 ops/s [Average]
  (min, avg, max) = (572078.435, 578160.731, 580173.459), stdev = 1856.876
  CI (99.9%): [576920.128, 579401.333] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate  thrpt   30  578160.731 ± 1240.603  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 576863.040 ops/s
# Warmup Iteration   2: 671997.951 ops/s
# Warmup Iteration   3: 905648.254 ops/s
# Warmup Iteration   4: 907328.528 ops/s
# Warmup Iteration   5: 901200.898 ops/s
# Warmup Iteration   6: 906113.150 ops/s
# Warmup Iteration   7: 907968.638 ops/s
# Warmup Iteration   8: 906284.227 ops/s
# Warmup Iteration   9: 907501.175 ops/s
# Warmup Iteration  10: 755702.998 ops/s
# Warmup Iteration  11: 903324.826 ops/s
# Warmup Iteration  12: 905168.716 ops/s
# Warmup Iteration  13: 905712.751 ops/s
# Warmup Iteration  14: 906894.323 ops/s
# Warmup Iteration  15: 905787.744 ops/s
# Warmup Iteration  16: 907090.885 ops/s
# Warmup Iteration  17: 908132.533 ops/s
# Warmup Iteration  18: 907291.992 ops/s
# Warmup Iteration  19: 906086.969 ops/s
# Warmup Iteration  20: 908070.904 ops/s
# Warmup Iteration  21: 907846.003 ops/s
# Warmup Iteration  22: 904589.608 ops/s
# Warmup Iteration  23: 907439.179 ops/s
# Warmup Iteration  24: 904887.952 ops/s
# Warmup Iteration  25: 906379.982 ops/s
# Warmup Iteration  26: 907554.234 ops/s
# Warmup Iteration  27: 908017.043 ops/s
# Warmup Iteration  28: 903889.881 ops/s
# Warmup Iteration  29: 907380.941 ops/s
# Warmup Iteration  30: 907066.382 ops/s
Iteration   1: 907485.160 ops/s
Iteration   2: 908494.306 ops/s
Iteration   3: 905584.484 ops/s
Iteration   4: 907502.857 ops/s
Iteration   5: 908708.889 ops/s
Iteration   6: 903703.775 ops/s
Iteration   7: 907064.245 ops/s
Iteration   8: 906629.411 ops/s
Iteration   9: 907268.315 ops/s
Iteration  10: 903755.522 ops/s
Iteration  11: 907933.994 ops/s
Iteration  12: 907604.691 ops/s
Iteration  13: 906824.421 ops/s
Iteration  14: 908327.575 ops/s
Iteration  15: 898832.511 ops/s
Iteration  16: 906048.336 ops/s
Iteration  17: 908854.076 ops/s
Iteration  18: 905844.397 ops/s
Iteration  19: 907067.996 ops/s
Iteration  20: 907270.547 ops/s
Iteration  21: 908178.139 ops/s
Iteration  22: 905524.212 ops/s
Iteration  23: 905679.824 ops/s
Iteration  24: 907065.525 ops/s
Iteration  25: 909540.581 ops/s
Iteration  26: 908342.364 ops/s
Iteration  27: 908934.876 ops/s
Iteration  28: 909375.986 ops/s
Iteration  29: 905815.909 ops/s
Iteration  30: 909641.291 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_indexOf":
  906963.474 ±(99.9%) 1447.069 ops/s [Average]
  (min, avg, max) = (898832.511, 906963.474, 909641.291), stdev = 2165.905
  CI (99.9%): [905516.405, 908410.543] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_indexOf  thrpt   30  906963.474 ± 1447.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 760232.980 ops/s
# Warmup Iteration   2: 1343312.257 ops/s
# Warmup Iteration   3: 1502186.942 ops/s
# Warmup Iteration   4: 1507315.448 ops/s
# Warmup Iteration   5: 1511669.541 ops/s
# Warmup Iteration   6: 1260641.707 ops/s
# Warmup Iteration   7: 1506091.161 ops/s
# Warmup Iteration   8: 1499891.304 ops/s
# Warmup Iteration   9: 1502879.655 ops/s
# Warmup Iteration  10: 1509944.298 ops/s
# Warmup Iteration  11: 1507860.265 ops/s
# Warmup Iteration  12: 1508196.419 ops/s
# Warmup Iteration  13: 1502704.835 ops/s
# Warmup Iteration  14: 1508303.432 ops/s
# Warmup Iteration  15: 1500834.668 ops/s
# Warmup Iteration  16: 1507754.000 ops/s
# Warmup Iteration  17: 1497609.758 ops/s
# Warmup Iteration  18: 1499561.690 ops/s
# Warmup Iteration  19: 1497461.775 ops/s
# Warmup Iteration  20: 1499175.152 ops/s
# Warmup Iteration  21: 1497397.719 ops/s
# Warmup Iteration  22: 1502781.607 ops/s
# Warmup Iteration  23: 1500101.165 ops/s
# Warmup Iteration  24: 1502177.924 ops/s
# Warmup Iteration  25: 1502144.206 ops/s
# Warmup Iteration  26: 1502802.957 ops/s
# Warmup Iteration  27: 1500468.731 ops/s
# Warmup Iteration  28: 1503420.643 ops/s
# Warmup Iteration  29: 1501398.314 ops/s
# Warmup Iteration  30: 1492224.234 ops/s
Iteration   1: 1502720.765 ops/s
Iteration   2: 1500996.110 ops/s
Iteration   3: 1500332.101 ops/s
Iteration   4: 1502824.600 ops/s
Iteration   5: 1498771.104 ops/s
Iteration   6: 1500129.900 ops/s
Iteration   7: 1498150.557 ops/s
Iteration   8: 1497636.045 ops/s
Iteration   9: 1501941.296 ops/s
Iteration  10: 1495344.663 ops/s
Iteration  11: 1501578.343 ops/s
Iteration  12: 1494475.198 ops/s
Iteration  13: 1506851.224 ops/s
Iteration  14: 1498594.531 ops/s
Iteration  15: 1499565.453 ops/s
Iteration  16: 1501534.433 ops/s
Iteration  17: 1500584.395 ops/s
Iteration  18: 1503868.300 ops/s
Iteration  19: 1499500.716 ops/s
Iteration  20: 1495637.329 ops/s
Iteration  21: 1504514.856 ops/s
Iteration  22: 1494015.304 ops/s
Iteration  23: 1502314.722 ops/s
Iteration  24: 1493983.111 ops/s
Iteration  25: 1501963.769 ops/s
Iteration  26: 1501291.803 ops/s
Iteration  27: 1497399.540 ops/s
Iteration  28: 1502857.557 ops/s
Iteration  29: 1497825.607 ops/s
Iteration  30: 1499153.964 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_injectInto":
  1499878.577 ±(99.9%) 2129.940 ops/s [Average]
  (min, avg, max) = (1493983.111, 1499878.577, 1506851.224), stdev = 3187.995
  CI (99.9%): [1497748.636, 1502008.517] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_injectInto  thrpt   30  1499878.577 ± 2129.940  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 881319.567 ops/s
# Warmup Iteration   2: 1590731.771 ops/s
# Warmup Iteration   3: 1791793.612 ops/s
# Warmup Iteration   4: 1796119.654 ops/s
# Warmup Iteration   5: 1655046.591 ops/s
# Warmup Iteration   6: 1652664.657 ops/s
# Warmup Iteration   7: 1804691.868 ops/s
# Warmup Iteration   8: 1804371.920 ops/s
# Warmup Iteration   9: 1801929.365 ops/s
# Warmup Iteration  10: 1800279.125 ops/s
# Warmup Iteration  11: 1799134.682 ops/s
# Warmup Iteration  12: 1798065.255 ops/s
# Warmup Iteration  13: 1796843.916 ops/s
# Warmup Iteration  14: 1802986.104 ops/s
# Warmup Iteration  15: 1799635.255 ops/s
# Warmup Iteration  16: 1797608.974 ops/s
# Warmup Iteration  17: 1795804.405 ops/s
# Warmup Iteration  18: 1798900.858 ops/s
# Warmup Iteration  19: 1798548.627 ops/s
# Warmup Iteration  20: 1801485.179 ops/s
# Warmup Iteration  21: 1799868.153 ops/s
# Warmup Iteration  22: 1798269.140 ops/s
# Warmup Iteration  23: 1800535.389 ops/s
# Warmup Iteration  24: 1800377.884 ops/s
# Warmup Iteration  25: 1800450.120 ops/s
# Warmup Iteration  26: 1802083.371 ops/s
# Warmup Iteration  27: 1800610.240 ops/s
# Warmup Iteration  28: 1801731.417 ops/s
# Warmup Iteration  29: 1801013.467 ops/s
# Warmup Iteration  30: 1800471.337 ops/s
Iteration   1: 1798897.592 ops/s
Iteration   2: 1788462.277 ops/s
Iteration   3: 1786190.944 ops/s
Iteration   4: 1789407.384 ops/s
Iteration   5: 1797785.768 ops/s
Iteration   6: 1802479.666 ops/s
Iteration   7: 1799819.048 ops/s
Iteration   8: 1802972.648 ops/s
Iteration   9: 1796520.441 ops/s
Iteration  10: 1801585.801 ops/s
Iteration  11: 1803618.571 ops/s
Iteration  12: 1799525.768 ops/s
Iteration  13: 1802525.637 ops/s
Iteration  14: 1797326.730 ops/s
Iteration  15: 1800004.781 ops/s
Iteration  16: 1804288.658 ops/s
Iteration  17: 1797607.609 ops/s
Iteration  18: 1801537.666 ops/s
Iteration  19: 1800105.619 ops/s
Iteration  20: 1796760.473 ops/s
Iteration  21: 1804690.523 ops/s
Iteration  22: 1791553.306 ops/s
Iteration  23: 1784549.168 ops/s
Iteration  24: 1801075.458 ops/s
Iteration  25: 1799732.574 ops/s
Iteration  26: 1803359.192 ops/s
Iteration  27: 1799048.209 ops/s
Iteration  28: 1793269.532 ops/s
Iteration  29: 1798917.114 ops/s
Iteration  30: 1800218.651 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_injectIntoDouble":
  1798127.894 ±(99.9%) 3558.044 ops/s [Average]
  (min, avg, max) = (1784549.168, 1798127.894, 1804690.523), stdev = 5325.513
  CI (99.9%): [1794569.850, 1801685.937] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  1798127.894 ± 3558.044  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 948912.094 ops/s
# Warmup Iteration   2: 1665433.982 ops/s
# Warmup Iteration   3: 1908966.175 ops/s
# Warmup Iteration   4: 1910632.137 ops/s
# Warmup Iteration   5: 1913562.311 ops/s
# Warmup Iteration   6: 1606152.991 ops/s
# Warmup Iteration   7: 1902170.282 ops/s
# Warmup Iteration   8: 1907476.887 ops/s
# Warmup Iteration   9: 1907585.127 ops/s
# Warmup Iteration  10: 1906417.828 ops/s
# Warmup Iteration  11: 1906006.239 ops/s
# Warmup Iteration  12: 1902780.036 ops/s
# Warmup Iteration  13: 1905284.535 ops/s
# Warmup Iteration  14: 1906166.579 ops/s
# Warmup Iteration  15: 1903523.525 ops/s
# Warmup Iteration  16: 1904689.083 ops/s
# Warmup Iteration  17: 1926439.916 ops/s
# Warmup Iteration  18: 1925032.276 ops/s
# Warmup Iteration  19: 1921093.705 ops/s
# Warmup Iteration  20: 1923245.077 ops/s
# Warmup Iteration  21: 1922551.453 ops/s
# Warmup Iteration  22: 1921267.137 ops/s
# Warmup Iteration  23: 1920279.968 ops/s
# Warmup Iteration  24: 1914531.764 ops/s
# Warmup Iteration  25: 1922809.232 ops/s
# Warmup Iteration  26: 1917961.727 ops/s
# Warmup Iteration  27: 1917680.684 ops/s
# Warmup Iteration  28: 1921815.958 ops/s
# Warmup Iteration  29: 1920592.226 ops/s
# Warmup Iteration  30: 1919530.364 ops/s
Iteration   1: 1921147.688 ops/s
Iteration   2: 1919933.261 ops/s
Iteration   3: 1916795.953 ops/s
Iteration   4: 1922800.303 ops/s
Iteration   5: 1921376.347 ops/s
Iteration   6: 1925050.391 ops/s
Iteration   7: 1923902.464 ops/s
Iteration   8: 1917486.509 ops/s
Iteration   9: 1909913.348 ops/s
Iteration  10: 1922920.580 ops/s
Iteration  11: 1925181.396 ops/s
Iteration  12: 1921576.829 ops/s
Iteration  13: 1926449.384 ops/s
Iteration  14: 1924245.131 ops/s
Iteration  15: 1921494.937 ops/s
Iteration  16: 1922043.417 ops/s
Iteration  17: 1914073.670 ops/s
Iteration  18: 1922128.836 ops/s
Iteration  19: 1921353.063 ops/s
Iteration  20: 1922938.435 ops/s
Iteration  21: 1922942.689 ops/s
Iteration  22: 1914388.196 ops/s
Iteration  23: 1915496.286 ops/s
Iteration  24: 1926001.486 ops/s
Iteration  25: 1915205.798 ops/s
Iteration  26: 1922602.304 ops/s
Iteration  27: 1924940.156 ops/s
Iteration  28: 1919129.665 ops/s
Iteration  29: 1928063.769 ops/s
Iteration  30: 1923100.135 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_injectIntoFloat":
  1921156.081 ±(99.9%) 2801.893 ops/s [Average]
  (min, avg, max) = (1909913.348, 1921156.081, 1928063.769), stdev = 4193.742
  CI (99.9%): [1918354.188, 1923957.974] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  1921156.081 ± 2801.893  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 855738.788 ops/s
# Warmup Iteration   2: 1483205.379 ops/s
# Warmup Iteration   3: 1695251.351 ops/s
# Warmup Iteration   4: 1696181.826 ops/s
# Warmup Iteration   5: 1701944.446 ops/s
# Warmup Iteration   6: 1420931.169 ops/s
# Warmup Iteration   7: 1702100.736 ops/s
# Warmup Iteration   8: 1707187.222 ops/s
# Warmup Iteration   9: 1707084.111 ops/s
# Warmup Iteration  10: 1708698.366 ops/s
# Warmup Iteration  11: 1706405.209 ops/s
# Warmup Iteration  12: 1708216.767 ops/s
# Warmup Iteration  13: 1709332.220 ops/s
# Warmup Iteration  14: 1707200.681 ops/s
# Warmup Iteration  15: 1705511.821 ops/s
# Warmup Iteration  16: 1705345.816 ops/s
# Warmup Iteration  17: 1707055.859 ops/s
# Warmup Iteration  18: 1709726.681 ops/s
# Warmup Iteration  19: 1705923.447 ops/s
# Warmup Iteration  20: 1706194.400 ops/s
# Warmup Iteration  21: 1703325.091 ops/s
# Warmup Iteration  22: 1706481.664 ops/s
# Warmup Iteration  23: 1707582.488 ops/s
# Warmup Iteration  24: 1703523.749 ops/s
# Warmup Iteration  25: 1708147.021 ops/s
# Warmup Iteration  26: 1703660.569 ops/s
# Warmup Iteration  27: 1705386.708 ops/s
# Warmup Iteration  28: 1705233.088 ops/s
# Warmup Iteration  29: 1706587.047 ops/s
# Warmup Iteration  30: 1701803.969 ops/s
Iteration   1: 1707374.869 ops/s
Iteration   2: 1706450.783 ops/s
Iteration   3: 1702869.321 ops/s
Iteration   4: 1706871.017 ops/s
Iteration   5: 1702663.366 ops/s
Iteration   6: 1701038.499 ops/s
Iteration   7: 1704699.792 ops/s
Iteration   8: 1703507.400 ops/s
Iteration   9: 1707659.194 ops/s
Iteration  10: 1700299.084 ops/s
Iteration  11: 1706074.118 ops/s
Iteration  12: 1710402.835 ops/s
Iteration  13: 1707546.761 ops/s
Iteration  14: 1693721.288 ops/s
Iteration  15: 1707770.298 ops/s
Iteration  16: 1712781.673 ops/s
Iteration  17: 1707369.303 ops/s
Iteration  18: 1708091.007 ops/s
Iteration  19: 1708831.930 ops/s
Iteration  20: 1704620.612 ops/s
Iteration  21: 1708029.623 ops/s
Iteration  22: 1705157.440 ops/s
Iteration  23: 1708403.535 ops/s
Iteration  24: 1708818.200 ops/s
Iteration  25: 1707638.263 ops/s
Iteration  26: 1702606.344 ops/s
Iteration  27: 1701134.710 ops/s
Iteration  28: 1686177.340 ops/s
Iteration  29: 1701024.526 ops/s
Iteration  30: 1702198.769 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_injectIntoInt":
  1704727.730 ±(99.9%) 3441.351 ops/s [Average]
  (min, avg, max) = (1686177.340, 1704727.730, 1712781.673), stdev = 5150.853
  CI (99.9%): [1701286.379, 1708169.081] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_injectIntoInt  thrpt   30  1704727.730 ± 3441.351  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 911024.668 ops/s
# Warmup Iteration   2: 1570258.060 ops/s
# Warmup Iteration   3: 1798731.609 ops/s
# Warmup Iteration   4: 1807771.971 ops/s
# Warmup Iteration   5: 1809852.047 ops/s
# Warmup Iteration   6: 1513006.557 ops/s
# Warmup Iteration   7: 1807081.854 ops/s
# Warmup Iteration   8: 1811241.753 ops/s
# Warmup Iteration   9: 1808675.817 ops/s
# Warmup Iteration  10: 1811625.045 ops/s
# Warmup Iteration  11: 1805430.332 ops/s
# Warmup Iteration  12: 1807876.869 ops/s
# Warmup Iteration  13: 1806748.991 ops/s
# Warmup Iteration  14: 1807181.204 ops/s
# Warmup Iteration  15: 1802499.280 ops/s
# Warmup Iteration  16: 1801347.780 ops/s
# Warmup Iteration  17: 1810044.421 ops/s
# Warmup Iteration  18: 1808749.876 ops/s
# Warmup Iteration  19: 1807912.390 ops/s
# Warmup Iteration  20: 1810319.966 ops/s
# Warmup Iteration  21: 1810118.139 ops/s
# Warmup Iteration  22: 1802040.967 ops/s
# Warmup Iteration  23: 1805498.808 ops/s
# Warmup Iteration  24: 1810633.259 ops/s
# Warmup Iteration  25: 1810291.957 ops/s
# Warmup Iteration  26: 1805372.044 ops/s
# Warmup Iteration  27: 1809942.370 ops/s
# Warmup Iteration  28: 1806723.728 ops/s
# Warmup Iteration  29: 1808358.829 ops/s
# Warmup Iteration  30: 1805270.214 ops/s
Iteration   1: 1812610.439 ops/s
Iteration   2: 1811230.450 ops/s
Iteration   3: 1800512.800 ops/s
Iteration   4: 1816382.632 ops/s
Iteration   5: 1808909.981 ops/s
Iteration   6: 1806915.109 ops/s
Iteration   7: 1812181.806 ops/s
Iteration   8: 1812849.386 ops/s
Iteration   9: 1815365.387 ops/s
Iteration  10: 1811657.329 ops/s
Iteration  11: 1809999.561 ops/s
Iteration  12: 1802525.663 ops/s
Iteration  13: 1812915.832 ops/s
Iteration  14: 1807859.072 ops/s
Iteration  15: 1805240.811 ops/s
Iteration  16: 1804496.893 ops/s
Iteration  17: 1806508.098 ops/s
Iteration  18: 1809668.635 ops/s
Iteration  19: 1803832.971 ops/s
Iteration  20: 1811344.145 ops/s
Iteration  21: 1807951.928 ops/s
Iteration  22: 1808151.435 ops/s
Iteration  23: 1814763.628 ops/s
Iteration  24: 1803756.955 ops/s
Iteration  25: 1796172.061 ops/s
Iteration  26: 1807984.552 ops/s
Iteration  27: 1808350.639 ops/s
Iteration  28: 1809602.746 ops/s
Iteration  29: 1809844.488 ops/s
Iteration  30: 1815238.447 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_injectIntoLong":
  1808827.463 ±(99.9%) 3093.862 ops/s [Average]
  (min, avg, max) = (1796172.061, 1808827.463, 1816382.632), stdev = 4630.748
  CI (99.9%): [1805733.600, 1811921.325] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_injectIntoLong  thrpt   30  1808827.463 ± 3093.862  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_injectIntoWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_injectIntoWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1020763.192 ops/s
# Warmup Iteration   2: 1782581.195 ops/s
# Warmup Iteration   3: 2005359.576 ops/s
# Warmup Iteration   4: 2015437.566 ops/s
# Warmup Iteration   5: 2016591.828 ops/s
# Warmup Iteration   6: 1680610.421 ops/s
# Warmup Iteration   7: 2015477.012 ops/s
# Warmup Iteration   8: 2016687.935 ops/s
# Warmup Iteration   9: 2016865.398 ops/s
# Warmup Iteration  10: 2014570.242 ops/s
# Warmup Iteration  11: 2019555.228 ops/s
# Warmup Iteration  12: 2016466.428 ops/s
# Warmup Iteration  13: 2018746.558 ops/s
# Warmup Iteration  14: 2016954.699 ops/s
# Warmup Iteration  15: 2010328.828 ops/s
# Warmup Iteration  16: 2013078.461 ops/s
# Warmup Iteration  17: 2018263.968 ops/s
# Warmup Iteration  18: 2021898.953 ops/s
# Warmup Iteration  19: 2023925.611 ops/s
# Warmup Iteration  20: 2016967.896 ops/s
# Warmup Iteration  21: 2018500.785 ops/s
# Warmup Iteration  22: 2000534.025 ops/s
# Warmup Iteration  23: 2023267.079 ops/s
# Warmup Iteration  24: 2024638.459 ops/s
# Warmup Iteration  25: 2022131.315 ops/s
# Warmup Iteration  26: 2019843.442 ops/s
# Warmup Iteration  27: 2020206.474 ops/s
# Warmup Iteration  28: 2021864.894 ops/s
# Warmup Iteration  29: 2019660.042 ops/s
# Warmup Iteration  30: 2018600.807 ops/s
Iteration   1: 2015064.449 ops/s
Iteration   2: 2022336.725 ops/s
Iteration   3: 2017802.647 ops/s
Iteration   4: 2023901.044 ops/s
Iteration   5: 2023489.949 ops/s
Iteration   6: 2018696.985 ops/s
Iteration   7: 2023812.060 ops/s
Iteration   8: 2023403.099 ops/s
Iteration   9: 2018460.826 ops/s
Iteration  10: 2023168.983 ops/s
Iteration  11: 2011204.144 ops/s
Iteration  12: 2026919.386 ops/s
Iteration  13: 2022667.149 ops/s
Iteration  14: 2017245.193 ops/s
Iteration  15: 2017691.339 ops/s
Iteration  16: 2010606.866 ops/s
Iteration  17: 2015453.333 ops/s
Iteration  18: 2020477.324 ops/s
Iteration  19: 2024042.821 ops/s
Iteration  20: 2023334.700 ops/s
Iteration  21: 2027488.108 ops/s
Iteration  22: 2021655.243 ops/s
Iteration  23: 2019481.174 ops/s
Iteration  24: 2019644.461 ops/s
Iteration  25: 2019635.296 ops/s
Iteration  26: 2028104.448 ops/s
Iteration  27: 2020530.070 ops/s
Iteration  28: 2025186.026 ops/s
Iteration  29: 2018784.261 ops/s
Iteration  30: 2021369.289 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_injectIntoWith":
  2020721.913 ±(99.9%) 2840.145 ops/s [Average]
  (min, avg, max) = (2010606.866, 2020721.913, 2028104.448), stdev = 4250.996
  CI (99.9%): [2017881.768, 2023562.058] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_injectIntoWith  thrpt   30  2020721.913 ± 2840.145  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 923373.322 ops/s
# Warmup Iteration   2: 2106687.836 ops/s
# Warmup Iteration   3: 2293702.727 ops/s
# Warmup Iteration   4: 1926095.169 ops/s
# Warmup Iteration   5: 2308403.805 ops/s
# Warmup Iteration   6: 2306952.560 ops/s
# Warmup Iteration   7: 2302542.419 ops/s
# Warmup Iteration   8: 2300582.221 ops/s
# Warmup Iteration   9: 2310267.992 ops/s
# Warmup Iteration  10: 2306061.991 ops/s
# Warmup Iteration  11: 2300911.237 ops/s
# Warmup Iteration  12: 2298763.809 ops/s
# Warmup Iteration  13: 2297530.650 ops/s
# Warmup Iteration  14: 2305797.353 ops/s
# Warmup Iteration  15: 2307006.422 ops/s
# Warmup Iteration  16: 2301804.604 ops/s
# Warmup Iteration  17: 2303517.724 ops/s
# Warmup Iteration  18: 2309551.572 ops/s
# Warmup Iteration  19: 2301502.042 ops/s
# Warmup Iteration  20: 2303876.856 ops/s
# Warmup Iteration  21: 2307539.881 ops/s
# Warmup Iteration  22: 2309706.067 ops/s
# Warmup Iteration  23: 2307160.831 ops/s
# Warmup Iteration  24: 2306439.157 ops/s
# Warmup Iteration  25: 2304009.275 ops/s
# Warmup Iteration  26: 2309138.699 ops/s
# Warmup Iteration  27: 2300570.722 ops/s
# Warmup Iteration  28: 2309791.041 ops/s
# Warmup Iteration  29: 2308780.627 ops/s
# Warmup Iteration  30: 2302587.625 ops/s
Iteration   1: 2302758.399 ops/s
Iteration   2: 2313056.394 ops/s
Iteration   3: 2302849.601 ops/s
Iteration   4: 2286366.959 ops/s
Iteration   5: 2309801.562 ops/s
Iteration   6: 2306750.293 ops/s
Iteration   7: 2303166.921 ops/s
Iteration   8: 2309872.497 ops/s
Iteration   9: 2318036.624 ops/s
Iteration  10: 2305645.796 ops/s
Iteration  11: 2307650.661 ops/s
Iteration  12: 2310594.996 ops/s
Iteration  13: 2310944.546 ops/s
Iteration  14: 2307977.908 ops/s
Iteration  15: 2302604.350 ops/s
Iteration  16: 2306620.932 ops/s
Iteration  17: 2304604.552 ops/s
Iteration  18: 2309539.912 ops/s
Iteration  19: 2310971.545 ops/s
Iteration  20: 2307282.122 ops/s
Iteration  21: 2306335.595 ops/s
Iteration  22: 2308530.270 ops/s
Iteration  23: 2312723.014 ops/s
Iteration  24: 2307822.195 ops/s
Iteration  25: 2306936.041 ops/s
Iteration  26: 2306036.801 ops/s
Iteration  27: 2311399.328 ops/s
Iteration  28: 2312595.067 ops/s
Iteration  29: 2303658.929 ops/s
Iteration  30: 2307295.495 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_isEmpty":
  2307347.643 ±(99.9%) 3563.320 ops/s [Average]
  (min, avg, max) = (2286366.959, 2307347.643, 2318036.624), stdev = 5333.411
  CI (99.9%): [2303784.323, 2310910.964] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_isEmpty  thrpt   30  2307347.643 ± 3563.320  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27147.830 ops/s
# Warmup Iteration   2: 35152.858 ops/s
# Warmup Iteration   3: 40231.836 ops/s
# Warmup Iteration   4: 46048.135 ops/s
# Warmup Iteration   5: 45834.270 ops/s
# Warmup Iteration   6: 46159.808 ops/s
# Warmup Iteration   7: 45624.280 ops/s
# Warmup Iteration   8: 45999.702 ops/s
# Warmup Iteration   9: 46166.774 ops/s
# Warmup Iteration  10: 45935.247 ops/s
# Warmup Iteration  11: 46109.411 ops/s
# Warmup Iteration  12: 46107.410 ops/s
# Warmup Iteration  13: 46091.480 ops/s
# Warmup Iteration  14: 38869.095 ops/s
# Warmup Iteration  15: 46096.291 ops/s
# Warmup Iteration  16: 46187.498 ops/s
# Warmup Iteration  17: 47260.832 ops/s
# Warmup Iteration  18: 47633.170 ops/s
# Warmup Iteration  19: 47531.187 ops/s
# Warmup Iteration  20: 47487.559 ops/s
# Warmup Iteration  21: 47692.517 ops/s
# Warmup Iteration  22: 47628.142 ops/s
# Warmup Iteration  23: 47608.137 ops/s
# Warmup Iteration  24: 47532.375 ops/s
# Warmup Iteration  25: 47710.529 ops/s
# Warmup Iteration  26: 47561.368 ops/s
# Warmup Iteration  27: 47622.325 ops/s
# Warmup Iteration  28: 47461.897 ops/s
# Warmup Iteration  29: 47687.731 ops/s
# Warmup Iteration  30: 47556.433 ops/s
Iteration   1: 47598.967 ops/s
Iteration   2: 47620.969 ops/s
Iteration   3: 47596.950 ops/s
Iteration   4: 47630.566 ops/s
Iteration   5: 47676.609 ops/s
Iteration   6: 47498.825 ops/s
Iteration   7: 47564.543 ops/s
Iteration   8: 47670.397 ops/s
Iteration   9: 47617.604 ops/s
Iteration  10: 47563.628 ops/s
Iteration  11: 47702.532 ops/s
Iteration  12: 47718.403 ops/s
Iteration  13: 47625.049 ops/s
Iteration  14: 47660.230 ops/s
Iteration  15: 47652.235 ops/s
Iteration  16: 47575.806 ops/s
Iteration  17: 47732.374 ops/s
Iteration  18: 47650.199 ops/s
Iteration  19: 47660.963 ops/s
Iteration  20: 47442.824 ops/s
Iteration  21: 47580.111 ops/s
Iteration  22: 47564.845 ops/s
Iteration  23: 47641.634 ops/s
Iteration  24: 47626.894 ops/s
Iteration  25: 47731.755 ops/s
Iteration  26: 47687.134 ops/s
Iteration  27: 47711.898 ops/s
Iteration  28: 47663.658 ops/s
Iteration  29: 47606.778 ops/s
Iteration  30: 47476.561 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_iterator":
  47625.031 ±(99.9%) 47.729 ops/s [Average]
  (min, avg, max) = (47442.824, 47625.031, 47732.374), stdev = 71.438
  CI (99.9%): [47577.302, 47672.760] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt      Score    Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_iterator  thrpt   30  47625.031 ± 47.729  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1498787.853 ops/s
# Warmup Iteration   2: 2502138.086 ops/s
# Warmup Iteration   3: 2863571.431 ops/s
# Warmup Iteration   4: 2877153.026 ops/s
# Warmup Iteration   5: 2864412.134 ops/s
# Warmup Iteration   6: 2408267.599 ops/s
# Warmup Iteration   7: 2883099.940 ops/s
# Warmup Iteration   8: 2873067.078 ops/s
# Warmup Iteration   9: 2873143.441 ops/s
# Warmup Iteration  10: 2872690.830 ops/s
# Warmup Iteration  11: 2876702.635 ops/s
# Warmup Iteration  12: 2876062.485 ops/s
# Warmup Iteration  13: 2877156.187 ops/s
# Warmup Iteration  14: 2875514.212 ops/s
# Warmup Iteration  15: 2872661.064 ops/s
# Warmup Iteration  16: 2879959.995 ops/s
# Warmup Iteration  17: 2881608.690 ops/s
# Warmup Iteration  18: 2870688.309 ops/s
# Warmup Iteration  19: 2862298.886 ops/s
# Warmup Iteration  20: 2865381.648 ops/s
# Warmup Iteration  21: 2879258.544 ops/s
# Warmup Iteration  22: 2871548.811 ops/s
# Warmup Iteration  23: 2879020.828 ops/s
# Warmup Iteration  24: 2874794.393 ops/s
# Warmup Iteration  25: 2875114.138 ops/s
# Warmup Iteration  26: 2875421.481 ops/s
# Warmup Iteration  27: 2876093.513 ops/s
# Warmup Iteration  28: 2880230.811 ops/s
# Warmup Iteration  29: 2879405.261 ops/s
# Warmup Iteration  30: 2885381.840 ops/s
Iteration   1: 2871880.551 ops/s
Iteration   2: 2869576.570 ops/s
Iteration   3: 2883859.929 ops/s
Iteration   4: 2874376.420 ops/s
Iteration   5: 2875965.433 ops/s
Iteration   6: 2858432.260 ops/s
Iteration   7: 2876717.903 ops/s
Iteration   8: 2874798.235 ops/s
Iteration   9: 2877717.819 ops/s
Iteration  10: 2876519.409 ops/s
Iteration  11: 2877334.505 ops/s
Iteration  12: 2872828.245 ops/s
Iteration  13: 2874304.401 ops/s
Iteration  14: 2874468.206 ops/s
Iteration  15: 2870612.839 ops/s
Iteration  16: 2883818.766 ops/s
Iteration  17: 2876775.738 ops/s
Iteration  18: 2884956.207 ops/s
Iteration  19: 2865390.828 ops/s
Iteration  20: 2875417.816 ops/s
Iteration  21: 2876386.117 ops/s
Iteration  22: 2884970.137 ops/s
Iteration  23: 2877882.574 ops/s
Iteration  24: 2880904.622 ops/s
Iteration  25: 2883777.453 ops/s
Iteration  26: 2882942.784 ops/s
Iteration  27: 2876564.097 ops/s
Iteration  28: 2879169.185 ops/s
Iteration  29: 2867315.028 ops/s
Iteration  30: 2877078.404 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_iteratorRemove":
  2876091.416 ±(99.9%) 4002.882 ops/s [Average]
  (min, avg, max) = (2858432.260, 2876091.416, 2884970.137), stdev = 5991.326
  CI (99.9%): [2872088.534, 2880094.298] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_iteratorRemove  thrpt   30  2876091.416 ± 4002.882  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_iteratorRemove2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_iteratorRemove2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1499250.521 ops/s
# Warmup Iteration   2: 2498933.883 ops/s
# Warmup Iteration   3: 2867076.500 ops/s
# Warmup Iteration   4: 2878367.308 ops/s
# Warmup Iteration   5: 2836416.188 ops/s
# Warmup Iteration   6: 2368305.428 ops/s
# Warmup Iteration   7: 2877576.748 ops/s
# Warmup Iteration   8: 2882484.209 ops/s
# Warmup Iteration   9: 2875049.987 ops/s
# Warmup Iteration  10: 2884501.112 ops/s
# Warmup Iteration  11: 2882808.096 ops/s
# Warmup Iteration  12: 2882825.492 ops/s
# Warmup Iteration  13: 2883053.088 ops/s
# Warmup Iteration  14: 2871512.333 ops/s
# Warmup Iteration  15: 2870535.298 ops/s
# Warmup Iteration  16: 2881024.152 ops/s
# Warmup Iteration  17: 2875959.622 ops/s
# Warmup Iteration  18: 2873370.157 ops/s
# Warmup Iteration  19: 2872741.480 ops/s
# Warmup Iteration  20: 2869648.011 ops/s
# Warmup Iteration  21: 2878072.528 ops/s
# Warmup Iteration  22: 2876636.062 ops/s
# Warmup Iteration  23: 2865851.508 ops/s
# Warmup Iteration  24: 2875169.207 ops/s
# Warmup Iteration  25: 2851711.052 ops/s
# Warmup Iteration  26: 2869635.804 ops/s
# Warmup Iteration  27: 2869947.439 ops/s
# Warmup Iteration  28: 2875995.105 ops/s
# Warmup Iteration  29: 2876727.107 ops/s
# Warmup Iteration  30: 2872206.214 ops/s
Iteration   1: 2868540.592 ops/s
Iteration   2: 2873959.941 ops/s
Iteration   3: 2876827.054 ops/s
Iteration   4: 2873444.241 ops/s
Iteration   5: 2881392.902 ops/s
Iteration   6: 2845379.632 ops/s
Iteration   7: 2879172.612 ops/s
Iteration   8: 2869458.758 ops/s
Iteration   9: 2878467.545 ops/s
Iteration  10: 2860805.234 ops/s
Iteration  11: 2872231.298 ops/s
Iteration  12: 2866431.521 ops/s
Iteration  13: 2876392.061 ops/s
Iteration  14: 2875302.468 ops/s
Iteration  15: 2862597.565 ops/s
Iteration  16: 2873378.680 ops/s
Iteration  17: 2870334.550 ops/s
Iteration  18: 2878372.891 ops/s
Iteration  19: 2869465.127 ops/s
Iteration  20: 2875237.437 ops/s
Iteration  21: 2870900.836 ops/s
Iteration  22: 2865386.356 ops/s
Iteration  23: 2852087.252 ops/s
Iteration  24: 2871252.888 ops/s
Iteration  25: 2859522.274 ops/s
Iteration  26: 2877821.812 ops/s
Iteration  27: 2869307.417 ops/s
Iteration  28: 2874696.196 ops/s
Iteration  29: 2877732.075 ops/s
Iteration  30: 2879956.456 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_iteratorRemove2":
  2870861.856 ±(99.9%) 5518.350 ops/s [Average]
  (min, avg, max) = (2845379.632, 2870861.856, 2881392.902), stdev = 8259.607
  CI (99.9%): [2865343.506, 2876380.205] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_iteratorRemove2  thrpt   30  2870861.856 ± 5518.350  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 498842.760 ops/s
# Warmup Iteration   2: 551439.846 ops/s
# Warmup Iteration   3: 701019.690 ops/s
# Warmup Iteration   4: 721467.350 ops/s
# Warmup Iteration   5: 718904.242 ops/s
# Warmup Iteration   6: 716004.686 ops/s
# Warmup Iteration   7: 719850.497 ops/s
# Warmup Iteration   8: 719960.583 ops/s
# Warmup Iteration   9: 719223.229 ops/s
# Warmup Iteration  10: 712837.705 ops/s
# Warmup Iteration  11: 720186.458 ops/s
# Warmup Iteration  12: 614917.896 ops/s
# Warmup Iteration  13: 697212.866 ops/s
# Warmup Iteration  14: 712460.647 ops/s
# Warmup Iteration  15: 713383.988 ops/s
# Warmup Iteration  16: 712604.580 ops/s
# Warmup Iteration  17: 745054.595 ops/s
# Warmup Iteration  18: 743634.761 ops/s
# Warmup Iteration  19: 743697.466 ops/s
# Warmup Iteration  20: 744723.399 ops/s
# Warmup Iteration  21: 742900.504 ops/s
# Warmup Iteration  22: 744919.284 ops/s
# Warmup Iteration  23: 744407.239 ops/s
# Warmup Iteration  24: 746397.027 ops/s
# Warmup Iteration  25: 746683.608 ops/s
# Warmup Iteration  26: 747040.266 ops/s
# Warmup Iteration  27: 745281.579 ops/s
# Warmup Iteration  28: 744526.274 ops/s
# Warmup Iteration  29: 745422.243 ops/s
# Warmup Iteration  30: 746295.589 ops/s
Iteration   1: 743125.552 ops/s
Iteration   2: 744731.598 ops/s
Iteration   3: 747703.147 ops/s
Iteration   4: 745802.638 ops/s
Iteration   5: 744686.061 ops/s
Iteration   6: 745024.103 ops/s
Iteration   7: 746040.104 ops/s
Iteration   8: 746032.440 ops/s
Iteration   9: 746969.686 ops/s
Iteration  10: 744037.200 ops/s
Iteration  11: 741774.708 ops/s
Iteration  12: 745448.975 ops/s
Iteration  13: 745186.113 ops/s
Iteration  14: 745350.300 ops/s
Iteration  15: 739929.283 ops/s
Iteration  16: 745963.784 ops/s
Iteration  17: 742933.317 ops/s
Iteration  18: 747156.983 ops/s
Iteration  19: 744958.699 ops/s
Iteration  20: 745029.302 ops/s
Iteration  21: 746572.050 ops/s
Iteration  22: 747186.351 ops/s
Iteration  23: 747442.218 ops/s
Iteration  24: 744785.785 ops/s
Iteration  25: 743975.224 ops/s
Iteration  26: 746434.219 ops/s
Iteration  27: 747123.809 ops/s
Iteration  28: 741759.958 ops/s
Iteration  29: 744502.332 ops/s
Iteration  30: 742582.086 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_iterator_throws":
  745008.267 ±(99.9%) 1255.383 ops/s [Average]
  (min, avg, max) = (739929.283, 745008.267, 747703.147), stdev = 1878.999
  CI (99.9%): [743752.884, 746263.651] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_iterator_throws  thrpt   30  745008.267 ± 1255.383  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3.753 ops/s
# Warmup Iteration   2: 4.739 ops/s
# Warmup Iteration   3: 4.929 ops/s
# Warmup Iteration   4: 5.630 ops/s
# Warmup Iteration   5: 5.498 ops/s
# Warmup Iteration   6: 5.632 ops/s
# Warmup Iteration   7: 5.630 ops/s
# Warmup Iteration   8: 5.557 ops/s
# Warmup Iteration   9: 5.657 ops/s
# Warmup Iteration  10: 5.615 ops/s
# Warmup Iteration  11: 5.595 ops/s
# Warmup Iteration  12: 5.593 ops/s
# Warmup Iteration  13: 5.654 ops/s
# Warmup Iteration  14: 5.628 ops/s
# Warmup Iteration  15: 5.624 ops/s
# Warmup Iteration  16: 5.575 ops/s
# Warmup Iteration  17: 5.066 ops/s
# Warmup Iteration  18: 5.627 ops/s
# Warmup Iteration  19: 5.630 ops/s
# Warmup Iteration  20: 5.580 ops/s
# Warmup Iteration  21: 5.626 ops/s
# Warmup Iteration  22: 5.601 ops/s
# Warmup Iteration  23: 5.611 ops/s
# Warmup Iteration  24: 5.662 ops/s
# Warmup Iteration  25: 5.601 ops/s
# Warmup Iteration  26: 5.592 ops/s
# Warmup Iteration  27: 5.631 ops/s
# Warmup Iteration  28: 5.616 ops/s
# Warmup Iteration  29: 5.612 ops/s
# Warmup Iteration  30: 5.573 ops/s
Iteration   1: 5.587 ops/s
Iteration   2: 5.611 ops/s
Iteration   3: 5.532 ops/s
Iteration   4: 5.600 ops/s
Iteration   5: 5.686 ops/s
Iteration   6: 5.635 ops/s
Iteration   7: 5.663 ops/s
Iteration   8: 5.572 ops/s
Iteration   9: 5.661 ops/s
Iteration  10: 5.634 ops/s
Iteration  11: 5.619 ops/s
Iteration  12: 5.645 ops/s
Iteration  13: 5.614 ops/s
Iteration  14: 5.611 ops/s
Iteration  15: 5.608 ops/s
Iteration  16: 5.636 ops/s
Iteration  17: 5.624 ops/s
Iteration  18: 5.601 ops/s
Iteration  19: 5.618 ops/s
Iteration  20: 5.603 ops/s
Iteration  21: 5.621 ops/s
Iteration  22: 5.635 ops/s
Iteration  23: 5.626 ops/s
Iteration  24: 5.617 ops/s
Iteration  25: 5.607 ops/s
Iteration  26: 5.607 ops/s
Iteration  27: 5.651 ops/s
Iteration  28: 5.580 ops/s
Iteration  29: 5.658 ops/s
Iteration  30: 5.604 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap":
  5.619 ±(99.9%) 0.020 ops/s [Average]
  (min, avg, max) = (5.532, 5.619, 5.686), stdev = 0.030
  CI (99.9%): [5.599, 5.639] (assumes normal distribution)


# Run complete. Total time: 00:01:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt  Score   Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap  thrpt   30  5.619 ± 0.020  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 590328.601 ops/s
# Warmup Iteration   2: 1299458.511 ops/s
# Warmup Iteration   3: 1343597.804 ops/s
# Warmup Iteration   4: 1276263.371 ops/s
# Warmup Iteration   5: 1199195.849 ops/s
# Warmup Iteration   6: 1341588.306 ops/s
# Warmup Iteration   7: 1341262.924 ops/s
# Warmup Iteration   8: 1343133.861 ops/s
# Warmup Iteration   9: 1340929.420 ops/s
# Warmup Iteration  10: 1344935.897 ops/s
# Warmup Iteration  11: 1341223.101 ops/s
# Warmup Iteration  12: 1344411.854 ops/s
# Warmup Iteration  13: 1347833.032 ops/s
# Warmup Iteration  14: 1345774.852 ops/s
# Warmup Iteration  15: 1340312.393 ops/s
# Warmup Iteration  16: 1345123.381 ops/s
# Warmup Iteration  17: 1344871.085 ops/s
# Warmup Iteration  18: 1345331.159 ops/s
# Warmup Iteration  19: 1342992.743 ops/s
# Warmup Iteration  20: 1347518.885 ops/s
# Warmup Iteration  21: 1334159.170 ops/s
# Warmup Iteration  22: 1341372.340 ops/s
# Warmup Iteration  23: 1345657.249 ops/s
# Warmup Iteration  24: 1345689.441 ops/s
# Warmup Iteration  25: 1346535.170 ops/s
# Warmup Iteration  26: 1336896.190 ops/s
# Warmup Iteration  27: 1346627.772 ops/s
# Warmup Iteration  28: 1340673.201 ops/s
# Warmup Iteration  29: 1345847.818 ops/s
# Warmup Iteration  30: 1346381.212 ops/s
Iteration   1: 1346809.553 ops/s
Iteration   2: 1348547.322 ops/s
Iteration   3: 1348569.784 ops/s
Iteration   4: 1347682.237 ops/s
Iteration   5: 1342634.345 ops/s
Iteration   6: 1345262.098 ops/s
Iteration   7: 1347900.206 ops/s
Iteration   8: 1346654.279 ops/s
Iteration   9: 1346355.882 ops/s
Iteration  10: 1342179.543 ops/s
Iteration  11: 1342829.508 ops/s
Iteration  12: 1347871.233 ops/s
Iteration  13: 1337253.997 ops/s
Iteration  14: 1341990.526 ops/s
Iteration  15: 1341452.927 ops/s
Iteration  16: 1345126.960 ops/s
Iteration  17: 1341938.450 ops/s
Iteration  18: 1341924.437 ops/s
Iteration  19: 1346082.931 ops/s
Iteration  20: 1333229.325 ops/s
Iteration  21: 1347253.654 ops/s
Iteration  22: 1349832.149 ops/s
Iteration  23: 1333351.012 ops/s
Iteration  24: 1347381.156 ops/s
Iteration  25: 1348121.759 ops/s
Iteration  26: 1348181.234 ops/s
Iteration  27: 1349580.812 ops/s
Iteration  28: 1346160.736 ops/s
Iteration  29: 1346876.476 ops/s
Iteration  30: 1344496.719 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_makeString":
  1344784.375 ±(99.9%) 2856.039 ops/s [Average]
  (min, avg, max) = (1333229.325, 1344784.375, 1349832.149), stdev = 4274.785
  CI (99.9%): [1341928.336, 1347640.414] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_makeString  thrpt   30  1344784.375 ± 2856.039  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_makeStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_makeStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 562116.385 ops/s
# Warmup Iteration   2: 1218294.339 ops/s
# Warmup Iteration   3: 1270199.905 ops/s
# Warmup Iteration   4: 1258274.554 ops/s
# Warmup Iteration   5: 1083931.523 ops/s
# Warmup Iteration   6: 1276356.367 ops/s
# Warmup Iteration   7: 1267025.997 ops/s
# Warmup Iteration   8: 1278121.091 ops/s
# Warmup Iteration   9: 1275491.289 ops/s
# Warmup Iteration  10: 1278681.962 ops/s
# Warmup Iteration  11: 1277239.034 ops/s
# Warmup Iteration  12: 1276375.590 ops/s
# Warmup Iteration  13: 1272668.280 ops/s
# Warmup Iteration  14: 1277593.140 ops/s
# Warmup Iteration  15: 1278088.759 ops/s
# Warmup Iteration  16: 1277462.405 ops/s
# Warmup Iteration  17: 1265256.454 ops/s
# Warmup Iteration  18: 1268362.600 ops/s
# Warmup Iteration  19: 1263638.451 ops/s
# Warmup Iteration  20: 1259236.345 ops/s
# Warmup Iteration  21: 1263832.754 ops/s
# Warmup Iteration  22: 1265301.758 ops/s
# Warmup Iteration  23: 1268698.905 ops/s
# Warmup Iteration  24: 1265082.552 ops/s
# Warmup Iteration  25: 1265898.438 ops/s
# Warmup Iteration  26: 1258519.288 ops/s
# Warmup Iteration  27: 1260740.088 ops/s
# Warmup Iteration  28: 1265054.626 ops/s
# Warmup Iteration  29: 1267465.303 ops/s
# Warmup Iteration  30: 1254363.390 ops/s
Iteration   1: 1246580.520 ops/s
Iteration   2: 1264494.911 ops/s
Iteration   3: 1271093.285 ops/s
Iteration   4: 1267805.668 ops/s
Iteration   5: 1269341.600 ops/s
Iteration   6: 1265893.948 ops/s
Iteration   7: 1265806.189 ops/s
Iteration   8: 1264667.622 ops/s
Iteration   9: 1265156.015 ops/s
Iteration  10: 1264347.659 ops/s
Iteration  11: 1260621.410 ops/s
Iteration  12: 1262360.133 ops/s
Iteration  13: 1265944.072 ops/s
Iteration  14: 1266911.487 ops/s
Iteration  15: 1266823.970 ops/s
Iteration  16: 1262020.059 ops/s
Iteration  17: 1255972.865 ops/s
Iteration  18: 1238427.349 ops/s
Iteration  19: 1271710.535 ops/s
Iteration  20: 1260729.502 ops/s
Iteration  21: 1267116.447 ops/s
Iteration  22: 1268003.433 ops/s
Iteration  23: 1264602.680 ops/s
Iteration  24: 1266208.082 ops/s
Iteration  25: 1265573.545 ops/s
Iteration  26: 1262583.618 ops/s
Iteration  27: 1266731.448 ops/s
Iteration  28: 1260570.965 ops/s
Iteration  29: 1267416.734 ops/s
Iteration  30: 1253373.034 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_makeStringWithSeparator":
  1263296.293 ±(99.9%) 4637.120 ops/s [Average]
  (min, avg, max) = (1238427.349, 1263296.293, 1271710.535), stdev = 6940.623
  CI (99.9%): [1258659.173, 1267933.413] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_makeStringWithSeparator  thrpt   30  1263296.293 ± 4637.120  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 581778.296 ops/s
# Warmup Iteration   2: 1235354.451 ops/s
# Warmup Iteration   3: 1278513.449 ops/s
# Warmup Iteration   4: 1285336.481 ops/s
# Warmup Iteration   5: 1070645.790 ops/s
# Warmup Iteration   6: 1279436.036 ops/s
# Warmup Iteration   7: 1279856.813 ops/s
# Warmup Iteration   8: 1275364.936 ops/s
# Warmup Iteration   9: 1279279.223 ops/s
# Warmup Iteration  10: 1273614.850 ops/s
# Warmup Iteration  11: 1277934.405 ops/s
# Warmup Iteration  12: 1277276.914 ops/s
# Warmup Iteration  13: 1279319.869 ops/s
# Warmup Iteration  14: 1273429.320 ops/s
# Warmup Iteration  15: 1276196.182 ops/s
# Warmup Iteration  16: 1265214.743 ops/s
# Warmup Iteration  17: 1277145.405 ops/s
# Warmup Iteration  18: 1278773.448 ops/s
# Warmup Iteration  19: 1277271.097 ops/s
# Warmup Iteration  20: 1276613.690 ops/s
# Warmup Iteration  21: 1267419.253 ops/s
# Warmup Iteration  22: 1277253.735 ops/s
# Warmup Iteration  23: 1276691.582 ops/s
# Warmup Iteration  24: 1276962.157 ops/s
# Warmup Iteration  25: 1279667.794 ops/s
# Warmup Iteration  26: 1277699.886 ops/s
# Warmup Iteration  27: 1274273.985 ops/s
# Warmup Iteration  28: 1278809.825 ops/s
# Warmup Iteration  29: 1278776.970 ops/s
# Warmup Iteration  30: 1275808.361 ops/s
Iteration   1: 1274451.110 ops/s
Iteration   2: 1267105.198 ops/s
Iteration   3: 1279190.083 ops/s
Iteration   4: 1275256.472 ops/s
Iteration   5: 1276300.339 ops/s
Iteration   6: 1280295.842 ops/s
Iteration   7: 1283598.427 ops/s
Iteration   8: 1274787.641 ops/s
Iteration   9: 1274986.958 ops/s
Iteration  10: 1277212.443 ops/s
Iteration  11: 1275237.195 ops/s
Iteration  12: 1264016.514 ops/s
Iteration  13: 1276497.043 ops/s
Iteration  14: 1256523.894 ops/s
Iteration  15: 1279379.536 ops/s
Iteration  16: 1281309.891 ops/s
Iteration  17: 1275946.874 ops/s
Iteration  18: 1278853.151 ops/s
Iteration  19: 1277961.850 ops/s
Iteration  20: 1279473.862 ops/s
Iteration  21: 1282397.558 ops/s
Iteration  22: 1275871.251 ops/s
Iteration  23: 1279965.575 ops/s
Iteration  24: 1281588.196 ops/s
Iteration  25: 1278785.799 ops/s
Iteration  26: 1280762.866 ops/s
Iteration  27: 1280336.098 ops/s
Iteration  28: 1271899.955 ops/s
Iteration  29: 1272387.613 ops/s
Iteration  30: 1274646.011 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd":
  1276234.175 ±(99.9%) 3777.614 ops/s [Average]
  (min, avg, max) = (1256523.894, 1276234.175, 1283598.427), stdev = 5654.155
  CI (99.9%): [1272456.561, 1280011.789] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd  thrpt   30  1276234.175 ± 3777.614  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_makeString_with_collection_containing_self$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_makeString_with_collection_containing_self

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1922540.098 ops/s
# Warmup Iteration   2: 2623135.991 ops/s
# Warmup Iteration   3: 3160124.691 ops/s
# Warmup Iteration   4: 3139054.855 ops/s
# Warmup Iteration   5: 3181055.375 ops/s
# Warmup Iteration   6: 3186194.151 ops/s
# Warmup Iteration   7: 3164016.915 ops/s
# Warmup Iteration   8: 2647133.015 ops/s
# Warmup Iteration   9: 3182323.666 ops/s
# Warmup Iteration  10: 3189587.634 ops/s
# Warmup Iteration  11: 3163624.822 ops/s
# Warmup Iteration  12: 3180226.432 ops/s
# Warmup Iteration  13: 3178935.458 ops/s
# Warmup Iteration  14: 3186719.961 ops/s
# Warmup Iteration  15: 3187553.699 ops/s
# Warmup Iteration  16: 3183062.177 ops/s
# Warmup Iteration  17: 3164698.061 ops/s
# Warmup Iteration  18: 3169071.351 ops/s
# Warmup Iteration  19: 3167539.706 ops/s
# Warmup Iteration  20: 3167595.788 ops/s
# Warmup Iteration  21: 3166264.397 ops/s
# Warmup Iteration  22: 3161122.745 ops/s
# Warmup Iteration  23: 3162792.611 ops/s
# Warmup Iteration  24: 3167700.028 ops/s
# Warmup Iteration  25: 3168090.109 ops/s
# Warmup Iteration  26: 3163322.164 ops/s
# Warmup Iteration  27: 3162180.975 ops/s
# Warmup Iteration  28: 3155229.362 ops/s
# Warmup Iteration  29: 3155383.353 ops/s
# Warmup Iteration  30: 3164438.636 ops/s
Iteration   1: 3142542.015 ops/s
Iteration   2: 3166372.764 ops/s
Iteration   3: 3172547.469 ops/s
Iteration   4: 3167325.822 ops/s
Iteration   5: 3167535.677 ops/s
Iteration   6: 3170598.206 ops/s
Iteration   7: 3166819.715 ops/s
Iteration   8: 3165812.587 ops/s
Iteration   9: 3170435.052 ops/s
Iteration  10: 3156370.301 ops/s
Iteration  11: 3158288.098 ops/s
Iteration  12: 3165986.350 ops/s
Iteration  13: 3170862.779 ops/s
Iteration  14: 3153922.647 ops/s
Iteration  15: 3161046.273 ops/s
Iteration  16: 3166048.398 ops/s
Iteration  17: 3161832.297 ops/s
Iteration  18: 3158941.747 ops/s
Iteration  19: 3174815.637 ops/s
Iteration  20: 3162785.496 ops/s
Iteration  21: 3170732.692 ops/s
Iteration  22: 3164638.954 ops/s
Iteration  23: 3171298.657 ops/s
Iteration  24: 3146706.843 ops/s
Iteration  25: 3167247.990 ops/s
Iteration  26: 3167346.412 ops/s
Iteration  27: 3162243.434 ops/s
Iteration  28: 3171321.701 ops/s
Iteration  29: 3169077.200 ops/s
Iteration  30: 3168211.925 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_makeString_with_collection_containing_self":
  3164657.171 ±(99.9%) 4917.494 ops/s [Average]
  (min, avg, max) = (3142542.015, 3164657.171, 3174815.637), stdev = 7360.275
  CI (99.9%): [3159739.677, 3169574.666] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_makeString_with_collection_containing_self  thrpt   30  3164657.171 ± 4917.494  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 505640.088 ops/s
# Warmup Iteration   2: 707147.717 ops/s
# Warmup Iteration   3: 871633.832 ops/s
# Warmup Iteration   4: 875547.703 ops/s
# Warmup Iteration   5: 875903.342 ops/s
# Warmup Iteration   6: 875983.492 ops/s
# Warmup Iteration   7: 869090.685 ops/s
# Warmup Iteration   8: 729859.277 ops/s
# Warmup Iteration   9: 878838.876 ops/s
# Warmup Iteration  10: 878121.041 ops/s
# Warmup Iteration  11: 879185.136 ops/s
# Warmup Iteration  12: 879070.185 ops/s
# Warmup Iteration  13: 877198.374 ops/s
# Warmup Iteration  14: 878190.043 ops/s
# Warmup Iteration  15: 878865.989 ops/s
# Warmup Iteration  16: 878317.990 ops/s
# Warmup Iteration  17: 872302.303 ops/s
# Warmup Iteration  18: 876449.316 ops/s
# Warmup Iteration  19: 870078.768 ops/s
# Warmup Iteration  20: 878308.826 ops/s
# Warmup Iteration  21: 878390.997 ops/s
# Warmup Iteration  22: 878859.387 ops/s
# Warmup Iteration  23: 879777.965 ops/s
# Warmup Iteration  24: 877789.884 ops/s
# Warmup Iteration  25: 879148.803 ops/s
# Warmup Iteration  26: 878911.491 ops/s
# Warmup Iteration  27: 878353.993 ops/s
# Warmup Iteration  28: 878461.613 ops/s
# Warmup Iteration  29: 875431.830 ops/s
# Warmup Iteration  30: 878173.038 ops/s
Iteration   1: 878159.045 ops/s
Iteration   2: 872391.164 ops/s
Iteration   3: 875912.662 ops/s
Iteration   4: 875120.377 ops/s
Iteration   5: 876885.260 ops/s
Iteration   6: 877745.698 ops/s
Iteration   7: 876634.785 ops/s
Iteration   8: 879554.181 ops/s
Iteration   9: 876804.457 ops/s
Iteration  10: 870590.844 ops/s
Iteration  11: 874752.860 ops/s
Iteration  12: 876053.364 ops/s
Iteration  13: 879605.730 ops/s
Iteration  14: 879635.008 ops/s
Iteration  15: 878088.369 ops/s
Iteration  16: 878604.185 ops/s
Iteration  17: 878638.200 ops/s
Iteration  18: 878834.691 ops/s
Iteration  19: 876541.332 ops/s
Iteration  20: 876113.671 ops/s
Iteration  21: 875397.478 ops/s
Iteration  22: 877518.995 ops/s
Iteration  23: 880214.259 ops/s
Iteration  24: 877788.710 ops/s
Iteration  25: 877823.694 ops/s
Iteration  26: 878884.657 ops/s
Iteration  27: 878867.506 ops/s
Iteration  28: 871570.900 ops/s
Iteration  29: 878664.619 ops/s
Iteration  30: 873608.431 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_max":
  876900.171 ±(99.9%) 1622.762 ops/s [Average]
  (min, avg, max) = (870590.844, 876900.171, 880214.259), stdev = 2428.873
  CI (99.9%): [875277.409, 878522.933] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_max  thrpt   30  876900.171 ± 1622.762  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 707676.099 ops/s
# Warmup Iteration   2: 1179540.346 ops/s
# Warmup Iteration   3: 1361162.967 ops/s
# Warmup Iteration   4: 1369360.267 ops/s
# Warmup Iteration   5: 1367483.512 ops/s
# Warmup Iteration   6: 1147461.428 ops/s
# Warmup Iteration   7: 1368354.660 ops/s
# Warmup Iteration   8: 1372215.073 ops/s
# Warmup Iteration   9: 1366730.371 ops/s
# Warmup Iteration  10: 1368022.008 ops/s
# Warmup Iteration  11: 1369717.419 ops/s
# Warmup Iteration  12: 1366794.790 ops/s
# Warmup Iteration  13: 1369350.642 ops/s
# Warmup Iteration  14: 1370172.303 ops/s
# Warmup Iteration  15: 1372360.902 ops/s
# Warmup Iteration  16: 1369055.066 ops/s
# Warmup Iteration  17: 1363319.557 ops/s
# Warmup Iteration  18: 1370776.564 ops/s
# Warmup Iteration  19: 1369574.229 ops/s
# Warmup Iteration  20: 1371790.831 ops/s
# Warmup Iteration  21: 1368319.091 ops/s
# Warmup Iteration  22: 1370006.065 ops/s
# Warmup Iteration  23: 1372640.758 ops/s
# Warmup Iteration  24: 1373251.821 ops/s
# Warmup Iteration  25: 1373148.262 ops/s
# Warmup Iteration  26: 1368255.654 ops/s
# Warmup Iteration  27: 1371309.253 ops/s
# Warmup Iteration  28: 1367714.862 ops/s
# Warmup Iteration  29: 1371902.409 ops/s
# Warmup Iteration  30: 1371952.361 ops/s
Iteration   1: 1374760.320 ops/s
Iteration   2: 1367373.710 ops/s
Iteration   3: 1372442.242 ops/s
Iteration   4: 1368258.246 ops/s
Iteration   5: 1371159.242 ops/s
Iteration   6: 1364865.184 ops/s
Iteration   7: 1374456.392 ops/s
Iteration   8: 1371116.856 ops/s
Iteration   9: 1369672.942 ops/s
Iteration  10: 1369490.210 ops/s
Iteration  11: 1366712.080 ops/s
Iteration  12: 1366593.233 ops/s
Iteration  13: 1375527.169 ops/s
Iteration  14: 1366903.680 ops/s
Iteration  15: 1373154.984 ops/s
Iteration  16: 1375265.768 ops/s
Iteration  17: 1373683.295 ops/s
Iteration  18: 1376646.985 ops/s
Iteration  19: 1365466.509 ops/s
Iteration  20: 1374282.074 ops/s
Iteration  21: 1371678.496 ops/s
Iteration  22: 1370221.999 ops/s
Iteration  23: 1372550.196 ops/s
Iteration  24: 1372170.202 ops/s
Iteration  25: 1363387.443 ops/s
Iteration  26: 1373608.796 ops/s
Iteration  27: 1363176.624 ops/s
Iteration  28: 1367845.772 ops/s
Iteration  29: 1356240.246 ops/s
Iteration  30: 1368713.570 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_maxBy":
  1369914.149 ±(99.9%) 3032.395 ops/s [Average]
  (min, avg, max) = (1356240.246, 1369914.149, 1376646.985), stdev = 4538.747
  CI (99.9%): [1366881.754, 1372946.544] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_maxBy  thrpt   30  1369914.149 ± 3032.395  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_maxByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_maxByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1107165.352 ops/s
# Warmup Iteration   2: 2021465.897 ops/s
# Warmup Iteration   3: 2245366.529 ops/s
# Warmup Iteration   4: 2242223.507 ops/s
# Warmup Iteration   5: 2254058.763 ops/s
# Warmup Iteration   6: 1878063.044 ops/s
# Warmup Iteration   7: 2266679.342 ops/s
# Warmup Iteration   8: 2255858.371 ops/s
# Warmup Iteration   9: 2244867.430 ops/s
# Warmup Iteration  10: 2262074.490 ops/s
# Warmup Iteration  11: 2260056.636 ops/s
# Warmup Iteration  12: 2262239.602 ops/s
# Warmup Iteration  13: 2262387.075 ops/s
# Warmup Iteration  14: 2254917.179 ops/s
# Warmup Iteration  15: 2263805.929 ops/s
# Warmup Iteration  16: 2254643.095 ops/s
# Warmup Iteration  17: 2289539.317 ops/s
# Warmup Iteration  18: 2288714.553 ops/s
# Warmup Iteration  19: 2277760.135 ops/s
# Warmup Iteration  20: 2281370.566 ops/s
# Warmup Iteration  21: 2286193.646 ops/s
# Warmup Iteration  22: 2288284.015 ops/s
# Warmup Iteration  23: 2285409.022 ops/s
# Warmup Iteration  24: 2280851.407 ops/s
# Warmup Iteration  25: 2287790.817 ops/s
# Warmup Iteration  26: 2288027.920 ops/s
# Warmup Iteration  27: 2286476.738 ops/s
# Warmup Iteration  28: 2286961.483 ops/s
# Warmup Iteration  29: 2288488.183 ops/s
# Warmup Iteration  30: 2282320.475 ops/s
Iteration   1: 2287974.146 ops/s
Iteration   2: 2286811.873 ops/s
Iteration   3: 2290229.199 ops/s
Iteration   4: 2279221.706 ops/s
Iteration   5: 2284452.075 ops/s
Iteration   6: 2286677.643 ops/s
Iteration   7: 2256798.310 ops/s
Iteration   8: 2248976.884 ops/s
Iteration   9: 2268773.432 ops/s
Iteration  10: 2286567.834 ops/s
Iteration  11: 2294001.721 ops/s
Iteration  12: 2287828.922 ops/s
Iteration  13: 2289116.814 ops/s
Iteration  14: 2277696.949 ops/s
Iteration  15: 2268935.532 ops/s
Iteration  16: 2290306.863 ops/s
Iteration  17: 2284726.461 ops/s
Iteration  18: 2292231.633 ops/s
Iteration  19: 2286832.531 ops/s
Iteration  20: 2286661.350 ops/s
Iteration  21: 2294267.517 ops/s
Iteration  22: 2285927.538 ops/s
Iteration  23: 2277829.324 ops/s
Iteration  24: 2282638.562 ops/s
Iteration  25: 2285961.585 ops/s
Iteration  26: 2288004.967 ops/s
Iteration  27: 2278194.158 ops/s
Iteration  28: 2290363.569 ops/s
Iteration  29: 2287077.910 ops/s
Iteration  30: 2279816.754 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_maxByOptional":
  2282830.125 ±(99.9%) 6860.145 ops/s [Average]
  (min, avg, max) = (2248976.884, 2282830.125, 2294267.517), stdev = 10267.944
  CI (99.9%): [2275969.980, 2289690.271] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_maxByOptional  thrpt   30  2282830.125 ± 6860.145  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_maxBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_maxBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 390143.422 ops/s
# Warmup Iteration   2: 419044.298 ops/s
# Warmup Iteration   3: 536702.976 ops/s
# Warmup Iteration   4: 548178.984 ops/s
# Warmup Iteration   5: 549272.969 ops/s
# Warmup Iteration   6: 547990.990 ops/s
# Warmup Iteration   7: 549016.652 ops/s
# Warmup Iteration   8: 548284.915 ops/s
# Warmup Iteration   9: 546502.876 ops/s
# Warmup Iteration  10: 549375.527 ops/s
# Warmup Iteration  11: 549669.553 ops/s
# Warmup Iteration  12: 469633.569 ops/s
# Warmup Iteration  13: 542296.623 ops/s
# Warmup Iteration  14: 549134.607 ops/s
# Warmup Iteration  15: 550131.035 ops/s
# Warmup Iteration  16: 548810.208 ops/s
# Warmup Iteration  17: 566978.612 ops/s
# Warmup Iteration  18: 565728.476 ops/s
# Warmup Iteration  19: 566910.737 ops/s
# Warmup Iteration  20: 568599.087 ops/s
# Warmup Iteration  21: 565386.220 ops/s
# Warmup Iteration  22: 566662.446 ops/s
# Warmup Iteration  23: 565846.408 ops/s
# Warmup Iteration  24: 568613.330 ops/s
# Warmup Iteration  25: 567261.736 ops/s
# Warmup Iteration  26: 567419.168 ops/s
# Warmup Iteration  27: 567087.913 ops/s
# Warmup Iteration  28: 568875.142 ops/s
# Warmup Iteration  29: 568978.949 ops/s
# Warmup Iteration  30: 569379.122 ops/s
Iteration   1: 565251.183 ops/s
Iteration   2: 570043.803 ops/s
Iteration   3: 571680.105 ops/s
Iteration   4: 570417.317 ops/s
Iteration   5: 566553.258 ops/s
Iteration   6: 569810.456 ops/s
Iteration   7: 567386.573 ops/s
Iteration   8: 568902.491 ops/s
Iteration   9: 569594.240 ops/s
Iteration  10: 570903.588 ops/s
Iteration  11: 566799.428 ops/s
Iteration  12: 569085.355 ops/s
Iteration  13: 565186.990 ops/s
Iteration  14: 569164.996 ops/s
Iteration  15: 569141.438 ops/s
Iteration  16: 569207.009 ops/s
Iteration  17: 568689.021 ops/s
Iteration  18: 570896.975 ops/s
Iteration  19: 569988.379 ops/s
Iteration  20: 568828.284 ops/s
Iteration  21: 568016.652 ops/s
Iteration  22: 566497.275 ops/s
Iteration  23: 567144.045 ops/s
Iteration  24: 570836.590 ops/s
Iteration  25: 567412.590 ops/s
Iteration  26: 568993.962 ops/s
Iteration  27: 567918.964 ops/s
Iteration  28: 570210.311 ops/s
Iteration  29: 569404.883 ops/s
Iteration  30: 568210.271 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_maxBy_null_throws":
  568739.214 ±(99.9%) 1107.573 ops/s [Average]
  (min, avg, max) = (565186.990, 568739.214, 571680.105), stdev = 1657.763
  CI (99.9%): [567631.641, 569846.788] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_maxBy_null_throws  thrpt   30  568739.214 ± 1107.573  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_maxOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_maxOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 617189.826 ops/s
# Warmup Iteration   2: 987611.668 ops/s
# Warmup Iteration   3: 1165755.446 ops/s
# Warmup Iteration   4: 1172479.755 ops/s
# Warmup Iteration   5: 1159543.038 ops/s
# Warmup Iteration   6: 1169704.667 ops/s
# Warmup Iteration   7: 979975.684 ops/s
# Warmup Iteration   8: 1172645.982 ops/s
# Warmup Iteration   9: 1171036.025 ops/s
# Warmup Iteration  10: 1173378.662 ops/s
# Warmup Iteration  11: 1173429.360 ops/s
# Warmup Iteration  12: 1172243.409 ops/s
# Warmup Iteration  13: 1169531.323 ops/s
# Warmup Iteration  14: 1172732.974 ops/s
# Warmup Iteration  15: 1170765.714 ops/s
# Warmup Iteration  16: 1172724.842 ops/s
# Warmup Iteration  17: 1174221.700 ops/s
# Warmup Iteration  18: 1168516.698 ops/s
# Warmup Iteration  19: 1171585.004 ops/s
# Warmup Iteration  20: 1174824.571 ops/s
# Warmup Iteration  21: 1173064.623 ops/s
# Warmup Iteration  22: 1169642.490 ops/s
# Warmup Iteration  23: 1174422.497 ops/s
# Warmup Iteration  24: 1174169.685 ops/s
# Warmup Iteration  25: 1171858.902 ops/s
# Warmup Iteration  26: 1174554.794 ops/s
# Warmup Iteration  27: 1169934.587 ops/s
# Warmup Iteration  28: 1174275.103 ops/s
# Warmup Iteration  29: 1174677.808 ops/s
# Warmup Iteration  30: 1170022.378 ops/s
Iteration   1: 1171791.556 ops/s
Iteration   2: 1174346.991 ops/s
Iteration   3: 1172661.554 ops/s
Iteration   4: 1172762.148 ops/s
Iteration   5: 1169803.550 ops/s
Iteration   6: 1172543.278 ops/s
Iteration   7: 1175333.583 ops/s
Iteration   8: 1174530.481 ops/s
Iteration   9: 1176502.748 ops/s
Iteration  10: 1164240.766 ops/s
Iteration  11: 1166905.488 ops/s
Iteration  12: 1172250.818 ops/s
Iteration  13: 1171724.689 ops/s
Iteration  14: 1170748.231 ops/s
Iteration  15: 1175951.615 ops/s
Iteration  16: 1173556.772 ops/s
Iteration  17: 1176322.585 ops/s
Iteration  18: 1174976.346 ops/s
Iteration  19: 1176362.015 ops/s
Iteration  20: 1169311.904 ops/s
Iteration  21: 1173110.139 ops/s
Iteration  22: 1171819.828 ops/s
Iteration  23: 1175739.587 ops/s
Iteration  24: 1170651.741 ops/s
Iteration  25: 1172361.538 ops/s
Iteration  26: 1174042.293 ops/s
Iteration  27: 1175239.002 ops/s
Iteration  28: 1173358.083 ops/s
Iteration  29: 1174555.425 ops/s
Iteration  30: 1173415.441 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_maxOptional":
  1172897.340 ±(99.9%) 1870.316 ops/s [Average]
  (min, avg, max) = (1164240.766, 1172897.340, 1176502.748), stdev = 2799.402
  CI (99.9%): [1171027.023, 1174767.656] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_maxOptional  thrpt   30  1172897.340 ± 1870.316  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_max_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_max_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 559978.545 ops/s
# Warmup Iteration   2: 618189.199 ops/s
# Warmup Iteration   3: 735695.423 ops/s
# Warmup Iteration   4: 792094.224 ops/s
# Warmup Iteration   5: 792226.696 ops/s
# Warmup Iteration   6: 789705.870 ops/s
# Warmup Iteration   7: 791896.075 ops/s
# Warmup Iteration   8: 788772.789 ops/s
# Warmup Iteration   9: 795421.053 ops/s
# Warmup Iteration  10: 794495.326 ops/s
# Warmup Iteration  11: 797007.460 ops/s
# Warmup Iteration  12: 791320.162 ops/s
# Warmup Iteration  13: 772445.302 ops/s
# Warmup Iteration  14: 686535.053 ops/s
# Warmup Iteration  15: 793598.251 ops/s
# Warmup Iteration  16: 793132.485 ops/s
# Warmup Iteration  17: 826515.464 ops/s
# Warmup Iteration  18: 827382.526 ops/s
# Warmup Iteration  19: 828928.344 ops/s
# Warmup Iteration  20: 826899.667 ops/s
# Warmup Iteration  21: 829472.508 ops/s
# Warmup Iteration  22: 827557.218 ops/s
# Warmup Iteration  23: 824806.039 ops/s
# Warmup Iteration  24: 825509.130 ops/s
# Warmup Iteration  25: 829963.176 ops/s
# Warmup Iteration  26: 827447.887 ops/s
# Warmup Iteration  27: 827563.043 ops/s
# Warmup Iteration  28: 827940.793 ops/s
# Warmup Iteration  29: 829548.861 ops/s
# Warmup Iteration  30: 826158.158 ops/s
Iteration   1: 828948.040 ops/s
Iteration   2: 828689.384 ops/s
Iteration   3: 829139.697 ops/s
Iteration   4: 828412.786 ops/s
Iteration   5: 828835.011 ops/s
Iteration   6: 826900.765 ops/s
Iteration   7: 821715.155 ops/s
Iteration   8: 824944.191 ops/s
Iteration   9: 826358.067 ops/s
Iteration  10: 833672.615 ops/s
Iteration  11: 831271.546 ops/s
Iteration  12: 826193.932 ops/s
Iteration  13: 825529.242 ops/s
Iteration  14: 828482.053 ops/s
Iteration  15: 834476.007 ops/s
Iteration  16: 830864.478 ops/s
Iteration  17: 829329.546 ops/s
Iteration  18: 827249.917 ops/s
Iteration  19: 829585.490 ops/s
Iteration  20: 826874.159 ops/s
Iteration  21: 831012.122 ops/s
Iteration  22: 824355.332 ops/s
Iteration  23: 829048.693 ops/s
Iteration  24: 831395.223 ops/s
Iteration  25: 831357.902 ops/s
Iteration  26: 828940.417 ops/s
Iteration  27: 827466.837 ops/s
Iteration  28: 827538.403 ops/s
Iteration  29: 830879.306 ops/s
Iteration  30: 831357.804 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_max_empty_throws":
  828694.137 ±(99.9%) 1830.836 ops/s [Average]
  (min, avg, max) = (821715.155, 828694.137, 834476.007), stdev = 2740.309
  CI (99.9%): [826863.302, 830524.973] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_max_empty_throws  thrpt   30  828694.137 ± 1830.836  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_max_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_max_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 370406.898 ops/s
# Warmup Iteration   2: 396101.096 ops/s
# Warmup Iteration   3: 526971.925 ops/s
# Warmup Iteration   4: 527652.390 ops/s
# Warmup Iteration   5: 522542.463 ops/s
# Warmup Iteration   6: 524865.867 ops/s
# Warmup Iteration   7: 525583.347 ops/s
# Warmup Iteration   8: 528533.099 ops/s
# Warmup Iteration   9: 528391.992 ops/s
# Warmup Iteration  10: 526558.891 ops/s
# Warmup Iteration  11: 512815.157 ops/s
# Warmup Iteration  12: 458645.520 ops/s
# Warmup Iteration  13: 523952.701 ops/s
# Warmup Iteration  14: 525698.925 ops/s
# Warmup Iteration  15: 526497.384 ops/s
# Warmup Iteration  16: 526626.042 ops/s
# Warmup Iteration  17: 544738.907 ops/s
# Warmup Iteration  18: 540551.670 ops/s
# Warmup Iteration  19: 539761.850 ops/s
# Warmup Iteration  20: 539808.500 ops/s
# Warmup Iteration  21: 544675.296 ops/s
# Warmup Iteration  22: 542820.232 ops/s
# Warmup Iteration  23: 542582.163 ops/s
# Warmup Iteration  24: 541034.220 ops/s
# Warmup Iteration  25: 542492.200 ops/s
# Warmup Iteration  26: 542538.614 ops/s
# Warmup Iteration  27: 544721.446 ops/s
# Warmup Iteration  28: 541482.608 ops/s
# Warmup Iteration  29: 543153.649 ops/s
# Warmup Iteration  30: 543592.370 ops/s
Iteration   1: 544827.395 ops/s
Iteration   2: 540971.175 ops/s
Iteration   3: 541239.713 ops/s
Iteration   4: 543660.571 ops/s
Iteration   5: 541166.628 ops/s
Iteration   6: 543073.395 ops/s
Iteration   7: 540676.160 ops/s
Iteration   8: 542157.462 ops/s
Iteration   9: 542757.314 ops/s
Iteration  10: 542019.226 ops/s
Iteration  11: 538068.375 ops/s
Iteration  12: 539682.974 ops/s
Iteration  13: 541841.466 ops/s
Iteration  14: 540108.284 ops/s
Iteration  15: 544707.222 ops/s
Iteration  16: 543123.428 ops/s
Iteration  17: 543316.394 ops/s
Iteration  18: 541752.451 ops/s
Iteration  19: 542856.802 ops/s
Iteration  20: 539167.698 ops/s
Iteration  21: 541211.582 ops/s
Iteration  22: 540975.222 ops/s
Iteration  23: 543678.142 ops/s
Iteration  24: 542771.014 ops/s
Iteration  25: 539808.210 ops/s
Iteration  26: 539957.186 ops/s
Iteration  27: 542598.174 ops/s
Iteration  28: 542339.834 ops/s
Iteration  29: 540652.819 ops/s
Iteration  30: 543880.128 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_max_null_safe":
  541834.881 ±(99.9%) 1104.266 ops/s [Average]
  (min, avg, max) = (538068.375, 541834.881, 544827.395), stdev = 1652.814
  CI (99.9%): [540730.615, 542939.148] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_max_null_safe  thrpt   30  541834.881 ± 1104.266  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 392782.815 ops/s
# Warmup Iteration   2: 418379.293 ops/s
# Warmup Iteration   3: 538891.484 ops/s
# Warmup Iteration   4: 548157.420 ops/s
# Warmup Iteration   5: 546644.525 ops/s
# Warmup Iteration   6: 545778.222 ops/s
# Warmup Iteration   7: 549744.439 ops/s
# Warmup Iteration   8: 550154.866 ops/s
# Warmup Iteration   9: 549221.830 ops/s
# Warmup Iteration  10: 549099.502 ops/s
# Warmup Iteration  11: 549816.389 ops/s
# Warmup Iteration  12: 465875.822 ops/s
# Warmup Iteration  13: 540030.554 ops/s
# Warmup Iteration  14: 546555.622 ops/s
# Warmup Iteration  15: 548612.634 ops/s
# Warmup Iteration  16: 548804.279 ops/s
# Warmup Iteration  17: 566635.453 ops/s
# Warmup Iteration  18: 556033.390 ops/s
# Warmup Iteration  19: 563752.058 ops/s
# Warmup Iteration  20: 565199.491 ops/s
# Warmup Iteration  21: 562293.629 ops/s
# Warmup Iteration  22: 566137.281 ops/s
# Warmup Iteration  23: 561550.120 ops/s
# Warmup Iteration  24: 564441.295 ops/s
# Warmup Iteration  25: 564069.614 ops/s
# Warmup Iteration  26: 565201.398 ops/s
# Warmup Iteration  27: 565826.848 ops/s
# Warmup Iteration  28: 563639.171 ops/s
# Warmup Iteration  29: 565617.000 ops/s
# Warmup Iteration  30: 565500.304 ops/s
Iteration   1: 564155.183 ops/s
Iteration   2: 564822.598 ops/s
Iteration   3: 564624.660 ops/s
Iteration   4: 566573.936 ops/s
Iteration   5: 563310.726 ops/s
Iteration   6: 566001.534 ops/s
Iteration   7: 566282.848 ops/s
Iteration   8: 566019.839 ops/s
Iteration   9: 564601.899 ops/s
Iteration  10: 565560.672 ops/s
Iteration  11: 565988.827 ops/s
Iteration  12: 564667.672 ops/s
Iteration  13: 559627.351 ops/s
Iteration  14: 564035.917 ops/s
Iteration  15: 566955.886 ops/s
Iteration  16: 564531.664 ops/s
Iteration  17: 563813.901 ops/s
Iteration  18: 565892.916 ops/s
Iteration  19: 563751.155 ops/s
Iteration  20: 565082.817 ops/s
Iteration  21: 561624.293 ops/s
Iteration  22: 565023.712 ops/s
Iteration  23: 564622.875 ops/s
Iteration  24: 566026.780 ops/s
Iteration  25: 565582.614 ops/s
Iteration  26: 565087.015 ops/s
Iteration  27: 563102.980 ops/s
Iteration  28: 564025.758 ops/s
Iteration  29: 564096.620 ops/s
Iteration  30: 560947.165 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_max_null_throws":
  564548.060 ±(99.9%) 1093.456 ops/s [Average]
  (min, avg, max) = (559627.351, 564548.060, 566955.886), stdev = 1636.634
  CI (99.9%): [563454.604, 565641.516] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_max_null_throws  thrpt   30  564548.060 ± 1093.456  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 392495.206 ops/s
# Warmup Iteration   2: 417748.213 ops/s
# Warmup Iteration   3: 544740.025 ops/s
# Warmup Iteration   4: 552742.686 ops/s
# Warmup Iteration   5: 556284.025 ops/s
# Warmup Iteration   6: 550744.042 ops/s
# Warmup Iteration   7: 554284.906 ops/s
# Warmup Iteration   8: 553997.035 ops/s
# Warmup Iteration   9: 550968.146 ops/s
# Warmup Iteration  10: 554014.552 ops/s
# Warmup Iteration  11: 555659.230 ops/s
# Warmup Iteration  12: 466580.512 ops/s
# Warmup Iteration  13: 555558.088 ops/s
# Warmup Iteration  14: 555279.815 ops/s
# Warmup Iteration  15: 555440.122 ops/s
# Warmup Iteration  16: 555770.075 ops/s
# Warmup Iteration  17: 570448.045 ops/s
# Warmup Iteration  18: 564163.098 ops/s
# Warmup Iteration  19: 571765.343 ops/s
# Warmup Iteration  20: 572508.255 ops/s
# Warmup Iteration  21: 573770.983 ops/s
# Warmup Iteration  22: 568680.584 ops/s
# Warmup Iteration  23: 572084.652 ops/s
# Warmup Iteration  24: 571859.993 ops/s
# Warmup Iteration  25: 568002.161 ops/s
# Warmup Iteration  26: 570436.951 ops/s
# Warmup Iteration  27: 570185.694 ops/s
# Warmup Iteration  28: 573348.908 ops/s
# Warmup Iteration  29: 573131.892 ops/s
# Warmup Iteration  30: 569546.387 ops/s
Iteration   1: 570435.714 ops/s
Iteration   2: 572783.133 ops/s
Iteration   3: 571665.726 ops/s
Iteration   4: 573611.298 ops/s
Iteration   5: 570078.114 ops/s
Iteration   6: 570789.849 ops/s
Iteration   7: 565819.854 ops/s
Iteration   8: 571177.188 ops/s
Iteration   9: 569664.428 ops/s
Iteration  10: 573251.653 ops/s
Iteration  11: 570297.768 ops/s
Iteration  12: 572861.234 ops/s
Iteration  13: 571360.860 ops/s
Iteration  14: 572472.585 ops/s
Iteration  15: 571144.245 ops/s
Iteration  16: 571908.157 ops/s
Iteration  17: 572235.533 ops/s
Iteration  18: 573477.451 ops/s
Iteration  19: 571597.344 ops/s
Iteration  20: 567770.636 ops/s
Iteration  21: 569999.908 ops/s
Iteration  22: 571273.379 ops/s
Iteration  23: 572059.787 ops/s
Iteration  24: 573471.326 ops/s
Iteration  25: 571248.156 ops/s
Iteration  26: 570077.944 ops/s
Iteration  27: 570973.000 ops/s
Iteration  28: 572116.808 ops/s
Iteration  29: 570441.099 ops/s
Iteration  30: 572066.716 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_max_null_throws_without_comparator":
  571271.030 ±(99.9%) 1114.080 ops/s [Average]
  (min, avg, max) = (565819.854, 571271.030, 573611.298), stdev = 1667.503
  CI (99.9%): [570156.950, 572385.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  571271.030 ± 1114.080  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1833167.362 ops/s
# Warmup Iteration   2: 2906224.884 ops/s
# Warmup Iteration   3: 3380263.761 ops/s
# Warmup Iteration   4: 3395268.846 ops/s
# Warmup Iteration   5: 3411353.325 ops/s
# Warmup Iteration   6: 3340525.142 ops/s
# Warmup Iteration   7: 2922013.476 ops/s
# Warmup Iteration   8: 3412101.520 ops/s
# Warmup Iteration   9: 3417435.284 ops/s
# Warmup Iteration  10: 3409675.660 ops/s
# Warmup Iteration  11: 3411541.024 ops/s
# Warmup Iteration  12: 3411531.752 ops/s
# Warmup Iteration  13: 3416803.615 ops/s
# Warmup Iteration  14: 3414348.481 ops/s
# Warmup Iteration  15: 3414256.581 ops/s
# Warmup Iteration  16: 3409244.398 ops/s
# Warmup Iteration  17: 3416741.226 ops/s
# Warmup Iteration  18: 3418880.138 ops/s
# Warmup Iteration  19: 3418413.931 ops/s
# Warmup Iteration  20: 3412422.367 ops/s
# Warmup Iteration  21: 3407364.963 ops/s
# Warmup Iteration  22: 3417108.715 ops/s
# Warmup Iteration  23: 3410899.141 ops/s
# Warmup Iteration  24: 3414806.418 ops/s
# Warmup Iteration  25: 3407863.477 ops/s
# Warmup Iteration  26: 3418127.874 ops/s
# Warmup Iteration  27: 3417975.823 ops/s
# Warmup Iteration  28: 3421193.048 ops/s
# Warmup Iteration  29: 3413487.632 ops/s
# Warmup Iteration  30: 3420208.992 ops/s
Iteration   1: 3424118.418 ops/s
Iteration   2: 3414692.808 ops/s
Iteration   3: 3419411.405 ops/s
Iteration   4: 3381420.300 ops/s
Iteration   5: 3422245.232 ops/s
Iteration   6: 3415843.386 ops/s
Iteration   7: 3417197.364 ops/s
Iteration   8: 3423612.859 ops/s
Iteration   9: 3416465.412 ops/s
Iteration  10: 3425456.547 ops/s
Iteration  11: 3419034.987 ops/s
Iteration  12: 3423734.512 ops/s
Iteration  13: 3415109.631 ops/s
Iteration  14: 3407637.616 ops/s
Iteration  15: 3413714.401 ops/s
Iteration  16: 3422398.413 ops/s
Iteration  17: 3414363.519 ops/s
Iteration  18: 3426396.018 ops/s
Iteration  19: 3416271.127 ops/s
Iteration  20: 3420990.202 ops/s
Iteration  21: 3418393.343 ops/s
Iteration  22: 3414207.925 ops/s
Iteration  23: 3401727.384 ops/s
Iteration  24: 3423693.256 ops/s
Iteration  25: 3420073.434 ops/s
Iteration  26: 3422741.197 ops/s
Iteration  27: 3414069.318 ops/s
Iteration  28: 3418483.091 ops/s
Iteration  29: 3413687.329 ops/s
Iteration  30: 3418604.077 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_max_without_comparator":
  3416859.817 ±(99.9%) 5710.294 ops/s [Average]
  (min, avg, max) = (3381420.300, 3416859.817, 3426396.018), stdev = 8546.900
  CI (99.9%): [3411149.523, 3422570.111] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_max_without_comparator  thrpt   30  3416859.817 ± 5710.294  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 513361.710 ops/s
# Warmup Iteration   2: 758733.225 ops/s
# Warmup Iteration   3: 920750.757 ops/s
# Warmup Iteration   4: 912914.143 ops/s
# Warmup Iteration   5: 917912.119 ops/s
# Warmup Iteration   6: 921600.604 ops/s
# Warmup Iteration   7: 841899.014 ops/s
# Warmup Iteration   8: 853840.357 ops/s
# Warmup Iteration   9: 920154.733 ops/s
# Warmup Iteration  10: 922971.340 ops/s
# Warmup Iteration  11: 921550.629 ops/s
# Warmup Iteration  12: 920138.518 ops/s
# Warmup Iteration  13: 918910.645 ops/s
# Warmup Iteration  14: 922304.182 ops/s
# Warmup Iteration  15: 921198.870 ops/s
# Warmup Iteration  16: 921953.903 ops/s
# Warmup Iteration  17: 923908.265 ops/s
# Warmup Iteration  18: 923797.870 ops/s
# Warmup Iteration  19: 924463.032 ops/s
# Warmup Iteration  20: 922889.074 ops/s
# Warmup Iteration  21: 920159.927 ops/s
# Warmup Iteration  22: 923483.975 ops/s
# Warmup Iteration  23: 923604.005 ops/s
# Warmup Iteration  24: 923151.273 ops/s
# Warmup Iteration  25: 924189.796 ops/s
# Warmup Iteration  26: 924958.631 ops/s
# Warmup Iteration  27: 923587.096 ops/s
# Warmup Iteration  28: 921455.854 ops/s
# Warmup Iteration  29: 923664.694 ops/s
# Warmup Iteration  30: 918299.640 ops/s
Iteration   1: 922664.087 ops/s
Iteration   2: 922200.945 ops/s
Iteration   3: 924840.133 ops/s
Iteration   4: 923295.846 ops/s
Iteration   5: 924831.856 ops/s
Iteration   6: 924898.037 ops/s
Iteration   7: 924023.880 ops/s
Iteration   8: 924398.184 ops/s
Iteration   9: 922986.830 ops/s
Iteration  10: 923449.453 ops/s
Iteration  11: 922875.279 ops/s
Iteration  12: 923961.399 ops/s
Iteration  13: 921267.846 ops/s
Iteration  14: 922152.026 ops/s
Iteration  15: 925767.747 ops/s
Iteration  16: 916150.431 ops/s
Iteration  17: 921229.638 ops/s
Iteration  18: 925012.905 ops/s
Iteration  19: 921519.291 ops/s
Iteration  20: 922422.456 ops/s
Iteration  21: 922381.114 ops/s
Iteration  22: 923949.283 ops/s
Iteration  23: 923215.403 ops/s
Iteration  24: 924177.811 ops/s
Iteration  25: 923956.164 ops/s
Iteration  26: 921606.420 ops/s
Iteration  27: 925012.071 ops/s
Iteration  28: 921900.168 ops/s
Iteration  29: 924612.583 ops/s
Iteration  30: 923046.383 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_min":
  923126.856 ±(99.9%) 1217.416 ops/s [Average]
  (min, avg, max) = (916150.431, 923126.856, 925767.747), stdev = 1822.171
  CI (99.9%): [921909.440, 924344.272] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_min  thrpt   30  923126.856 ± 1217.416  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 709398.113 ops/s
# Warmup Iteration   2: 1201020.945 ops/s
# Warmup Iteration   3: 1379782.689 ops/s
# Warmup Iteration   4: 1394271.608 ops/s
# Warmup Iteration   5: 1392231.552 ops/s
# Warmup Iteration   6: 1164509.391 ops/s
# Warmup Iteration   7: 1390767.671 ops/s
# Warmup Iteration   8: 1394390.144 ops/s
# Warmup Iteration   9: 1391927.765 ops/s
# Warmup Iteration  10: 1394973.935 ops/s
# Warmup Iteration  11: 1394492.190 ops/s
# Warmup Iteration  12: 1392037.315 ops/s
# Warmup Iteration  13: 1393625.216 ops/s
# Warmup Iteration  14: 1390077.244 ops/s
# Warmup Iteration  15: 1390900.742 ops/s
# Warmup Iteration  16: 1391452.731 ops/s
# Warmup Iteration  17: 1391018.144 ops/s
# Warmup Iteration  18: 1396625.150 ops/s
# Warmup Iteration  19: 1390984.601 ops/s
# Warmup Iteration  20: 1395633.864 ops/s
# Warmup Iteration  21: 1392293.611 ops/s
# Warmup Iteration  22: 1392878.150 ops/s
# Warmup Iteration  23: 1395638.885 ops/s
# Warmup Iteration  24: 1394337.682 ops/s
# Warmup Iteration  25: 1392648.067 ops/s
# Warmup Iteration  26: 1394504.209 ops/s
# Warmup Iteration  27: 1396021.005 ops/s
# Warmup Iteration  28: 1395702.350 ops/s
# Warmup Iteration  29: 1395497.771 ops/s
# Warmup Iteration  30: 1392427.571 ops/s
Iteration   1: 1396017.854 ops/s
Iteration   2: 1392892.324 ops/s
Iteration   3: 1393329.999 ops/s
Iteration   4: 1389821.908 ops/s
Iteration   5: 1387793.056 ops/s
Iteration   6: 1389769.294 ops/s
Iteration   7: 1393950.030 ops/s
Iteration   8: 1397088.577 ops/s
Iteration   9: 1386431.270 ops/s
Iteration  10: 1396568.561 ops/s
Iteration  11: 1393500.043 ops/s
Iteration  12: 1393911.693 ops/s
Iteration  13: 1388025.728 ops/s
Iteration  14: 1397671.447 ops/s
Iteration  15: 1396432.382 ops/s
Iteration  16: 1396332.847 ops/s
Iteration  17: 1395088.605 ops/s
Iteration  18: 1393674.437 ops/s
Iteration  19: 1383456.685 ops/s
Iteration  20: 1396223.104 ops/s
Iteration  21: 1393359.487 ops/s
Iteration  22: 1394635.612 ops/s
Iteration  23: 1392573.531 ops/s
Iteration  24: 1392947.811 ops/s
Iteration  25: 1397394.802 ops/s
Iteration  26: 1392048.718 ops/s
Iteration  27: 1396997.494 ops/s
Iteration  28: 1387084.389 ops/s
Iteration  29: 1394773.342 ops/s
Iteration  30: 1391446.040 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_minBy":
  1393041.369 ±(99.9%) 2440.299 ops/s [Average]
  (min, avg, max) = (1383456.685, 1393041.369, 1397671.447), stdev = 3652.525
  CI (99.9%): [1390601.070, 1395481.668] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_minBy  thrpt   30  1393041.369 ± 2440.299  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_minByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_minByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1151528.908 ops/s
# Warmup Iteration   2: 2013955.068 ops/s
# Warmup Iteration   3: 2313975.357 ops/s
# Warmup Iteration   4: 2328587.957 ops/s
# Warmup Iteration   5: 2328030.825 ops/s
# Warmup Iteration   6: 1936057.250 ops/s
# Warmup Iteration   7: 2329057.806 ops/s
# Warmup Iteration   8: 2326200.505 ops/s
# Warmup Iteration   9: 2325664.378 ops/s
# Warmup Iteration  10: 2322090.972 ops/s
# Warmup Iteration  11: 2324626.853 ops/s
# Warmup Iteration  12: 2331792.339 ops/s
# Warmup Iteration  13: 2320666.106 ops/s
# Warmup Iteration  14: 2326951.339 ops/s
# Warmup Iteration  15: 2325685.119 ops/s
# Warmup Iteration  16: 2333461.384 ops/s
# Warmup Iteration  17: 2325805.906 ops/s
# Warmup Iteration  18: 2326884.820 ops/s
# Warmup Iteration  19: 2328286.480 ops/s
# Warmup Iteration  20: 2330448.379 ops/s
# Warmup Iteration  21: 2322962.078 ops/s
# Warmup Iteration  22: 2330543.804 ops/s
# Warmup Iteration  23: 2330453.059 ops/s
# Warmup Iteration  24: 2330904.081 ops/s
# Warmup Iteration  25: 2296545.765 ops/s
# Warmup Iteration  26: 2328852.508 ops/s
# Warmup Iteration  27: 2327606.470 ops/s
# Warmup Iteration  28: 2315453.737 ops/s
# Warmup Iteration  29: 2327238.046 ops/s
# Warmup Iteration  30: 2329020.956 ops/s
Iteration   1: 2317680.721 ops/s
Iteration   2: 2335648.879 ops/s
Iteration   3: 2327736.530 ops/s
Iteration   4: 2327101.884 ops/s
Iteration   5: 2328035.999 ops/s
Iteration   6: 2326398.280 ops/s
Iteration   7: 2328695.286 ops/s
Iteration   8: 2321069.913 ops/s
Iteration   9: 2333513.843 ops/s
Iteration  10: 2331351.590 ops/s
Iteration  11: 2333845.037 ops/s
Iteration  12: 2325003.418 ops/s
Iteration  13: 2314510.235 ops/s
Iteration  14: 2334532.793 ops/s
Iteration  15: 2326673.649 ops/s
Iteration  16: 2328378.791 ops/s
Iteration  17: 2327656.486 ops/s
Iteration  18: 2332961.306 ops/s
Iteration  19: 2329360.268 ops/s
Iteration  20: 2328207.506 ops/s
Iteration  21: 2332728.781 ops/s
Iteration  22: 2328178.946 ops/s
Iteration  23: 2310597.541 ops/s
Iteration  24: 2330239.787 ops/s
Iteration  25: 2331976.736 ops/s
Iteration  26: 2327050.822 ops/s
Iteration  27: 2329841.490 ops/s
Iteration  28: 2322705.658 ops/s
Iteration  29: 2326174.669 ops/s
Iteration  30: 2335981.716 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_minByOptional":
  2327794.619 ±(99.9%) 3921.471 ops/s [Average]
  (min, avg, max) = (2310597.541, 2327794.619, 2335981.716), stdev = 5869.474
  CI (99.9%): [2323873.148, 2331716.090] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_minByOptional  thrpt   30  2327794.619 ± 3921.471  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_minBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_minBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 391342.575 ops/s
# Warmup Iteration   2: 418669.642 ops/s
# Warmup Iteration   3: 536943.913 ops/s
# Warmup Iteration   4: 544108.573 ops/s
# Warmup Iteration   5: 549446.769 ops/s
# Warmup Iteration   6: 543869.537 ops/s
# Warmup Iteration   7: 544829.137 ops/s
# Warmup Iteration   8: 548930.069 ops/s
# Warmup Iteration   9: 546765.997 ops/s
# Warmup Iteration  10: 545098.890 ops/s
# Warmup Iteration  11: 548687.781 ops/s
# Warmup Iteration  12: 471372.833 ops/s
# Warmup Iteration  13: 541077.906 ops/s
# Warmup Iteration  14: 548245.397 ops/s
# Warmup Iteration  15: 547088.654 ops/s
# Warmup Iteration  16: 544388.959 ops/s
# Warmup Iteration  17: 564568.949 ops/s
# Warmup Iteration  18: 567335.313 ops/s
# Warmup Iteration  19: 563048.924 ops/s
# Warmup Iteration  20: 564082.783 ops/s
# Warmup Iteration  21: 566922.848 ops/s
# Warmup Iteration  22: 566241.127 ops/s
# Warmup Iteration  23: 563985.426 ops/s
# Warmup Iteration  24: 567026.470 ops/s
# Warmup Iteration  25: 566955.768 ops/s
# Warmup Iteration  26: 564400.727 ops/s
# Warmup Iteration  27: 565095.106 ops/s
# Warmup Iteration  28: 566974.168 ops/s
# Warmup Iteration  29: 564412.948 ops/s
# Warmup Iteration  30: 561697.074 ops/s
Iteration   1: 563136.335 ops/s
Iteration   2: 562918.183 ops/s
Iteration   3: 567293.057 ops/s
Iteration   4: 565889.568 ops/s
Iteration   5: 566685.043 ops/s
Iteration   6: 567280.436 ops/s
Iteration   7: 567194.828 ops/s
Iteration   8: 566804.870 ops/s
Iteration   9: 565780.407 ops/s
Iteration  10: 566876.131 ops/s
Iteration  11: 565924.736 ops/s
Iteration  12: 565873.006 ops/s
Iteration  13: 563409.884 ops/s
Iteration  14: 566601.135 ops/s
Iteration  15: 566527.447 ops/s
Iteration  16: 564927.545 ops/s
Iteration  17: 565295.784 ops/s
Iteration  18: 565289.696 ops/s
Iteration  19: 564892.492 ops/s
Iteration  20: 563082.911 ops/s
Iteration  21: 563654.294 ops/s
Iteration  22: 567971.516 ops/s
Iteration  23: 564170.357 ops/s
Iteration  24: 567397.749 ops/s
Iteration  25: 565456.382 ops/s
Iteration  26: 565562.343 ops/s
Iteration  27: 566362.192 ops/s
Iteration  28: 564309.331 ops/s
Iteration  29: 568115.889 ops/s
Iteration  30: 562556.583 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_minBy_null_throws":
  565574.671 ±(99.9%) 1057.931 ops/s [Average]
  (min, avg, max) = (562556.583, 565574.671, 568115.889), stdev = 1583.461
  CI (99.9%): [564516.740, 566632.602] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_minBy_null_throws  thrpt   30  565574.671 ± 1057.931  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_minOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_minOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 636406.258 ops/s
# Warmup Iteration   2: 1019876.578 ops/s
# Warmup Iteration   3: 1191867.572 ops/s
# Warmup Iteration   4: 1199409.048 ops/s
# Warmup Iteration   5: 1203489.451 ops/s
# Warmup Iteration   6: 1155783.096 ops/s
# Warmup Iteration   7: 1046508.201 ops/s
# Warmup Iteration   8: 1198670.636 ops/s
# Warmup Iteration   9: 1202277.275 ops/s
# Warmup Iteration  10: 1200511.979 ops/s
# Warmup Iteration  11: 1204742.349 ops/s
# Warmup Iteration  12: 1202370.527 ops/s
# Warmup Iteration  13: 1202598.264 ops/s
# Warmup Iteration  14: 1200259.391 ops/s
# Warmup Iteration  15: 1201010.524 ops/s
# Warmup Iteration  16: 1200955.126 ops/s
# Warmup Iteration  17: 1199704.473 ops/s
# Warmup Iteration  18: 1201721.534 ops/s
# Warmup Iteration  19: 1201510.209 ops/s
# Warmup Iteration  20: 1201537.657 ops/s
# Warmup Iteration  21: 1202472.634 ops/s
# Warmup Iteration  22: 1196871.828 ops/s
# Warmup Iteration  23: 1197858.546 ops/s
# Warmup Iteration  24: 1200706.249 ops/s
# Warmup Iteration  25: 1201378.620 ops/s
# Warmup Iteration  26: 1202412.500 ops/s
# Warmup Iteration  27: 1199935.177 ops/s
# Warmup Iteration  28: 1198602.990 ops/s
# Warmup Iteration  29: 1202880.715 ops/s
# Warmup Iteration  30: 1203313.250 ops/s
Iteration   1: 1202542.113 ops/s
Iteration   2: 1202620.496 ops/s
Iteration   3: 1202301.065 ops/s
Iteration   4: 1203743.576 ops/s
Iteration   5: 1204778.212 ops/s
Iteration   6: 1202026.780 ops/s
Iteration   7: 1201900.798 ops/s
Iteration   8: 1197132.714 ops/s
Iteration   9: 1204277.423 ops/s
Iteration  10: 1200138.960 ops/s
Iteration  11: 1205099.871 ops/s
Iteration  12: 1198483.698 ops/s
Iteration  13: 1204431.157 ops/s
Iteration  14: 1200738.884 ops/s
Iteration  15: 1202357.279 ops/s
Iteration  16: 1201808.711 ops/s
Iteration  17: 1203492.626 ops/s
Iteration  18: 1200429.701 ops/s
Iteration  19: 1204062.450 ops/s
Iteration  20: 1198357.903 ops/s
Iteration  21: 1198629.172 ops/s
Iteration  22: 1196924.442 ops/s
Iteration  23: 1202356.215 ops/s
Iteration  24: 1201791.169 ops/s
Iteration  25: 1204170.505 ops/s
Iteration  26: 1200118.000 ops/s
Iteration  27: 1200867.894 ops/s
Iteration  28: 1200345.216 ops/s
Iteration  29: 1200993.388 ops/s
Iteration  30: 1201928.680 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_minOptional":
  1201628.303 ±(99.9%) 1479.301 ops/s [Average]
  (min, avg, max) = (1196924.442, 1201628.303, 1205099.871), stdev = 2214.149
  CI (99.9%): [1200149.002, 1203107.605] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_minOptional  thrpt   30  1201628.303 ± 1479.301  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_min_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_min_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 564192.768 ops/s
# Warmup Iteration   2: 620158.511 ops/s
# Warmup Iteration   3: 742284.835 ops/s
# Warmup Iteration   4: 803987.526 ops/s
# Warmup Iteration   5: 803869.070 ops/s
# Warmup Iteration   6: 797405.517 ops/s
# Warmup Iteration   7: 805078.342 ops/s
# Warmup Iteration   8: 802539.740 ops/s
# Warmup Iteration   9: 804332.452 ops/s
# Warmup Iteration  10: 802808.061 ops/s
# Warmup Iteration  11: 802177.137 ops/s
# Warmup Iteration  12: 803261.438 ops/s
# Warmup Iteration  13: 757008.525 ops/s
# Warmup Iteration  14: 719892.978 ops/s
# Warmup Iteration  15: 805913.824 ops/s
# Warmup Iteration  16: 801736.482 ops/s
# Warmup Iteration  17: 841015.431 ops/s
# Warmup Iteration  18: 838155.207 ops/s
# Warmup Iteration  19: 842712.504 ops/s
# Warmup Iteration  20: 842693.764 ops/s
# Warmup Iteration  21: 842626.545 ops/s
# Warmup Iteration  22: 843967.237 ops/s
# Warmup Iteration  23: 839618.390 ops/s
# Warmup Iteration  24: 842897.204 ops/s
# Warmup Iteration  25: 841938.099 ops/s
# Warmup Iteration  26: 842822.546 ops/s
# Warmup Iteration  27: 840363.208 ops/s
# Warmup Iteration  28: 844201.554 ops/s
# Warmup Iteration  29: 841548.125 ops/s
# Warmup Iteration  30: 839664.096 ops/s
Iteration   1: 844930.406 ops/s
Iteration   2: 842955.478 ops/s
Iteration   3: 840272.388 ops/s
Iteration   4: 842943.257 ops/s
Iteration   5: 845433.975 ops/s
Iteration   6: 843962.783 ops/s
Iteration   7: 830144.356 ops/s
Iteration   8: 832857.748 ops/s
Iteration   9: 838101.292 ops/s
Iteration  10: 843243.753 ops/s
Iteration  11: 838993.345 ops/s
Iteration  12: 840369.685 ops/s
Iteration  13: 841383.721 ops/s
Iteration  14: 838317.240 ops/s
Iteration  15: 844897.017 ops/s
Iteration  16: 844164.644 ops/s
Iteration  17: 838011.134 ops/s
Iteration  18: 841590.269 ops/s
Iteration  19: 841941.126 ops/s
Iteration  20: 842926.837 ops/s
Iteration  21: 840212.144 ops/s
Iteration  22: 841111.704 ops/s
Iteration  23: 842722.591 ops/s
Iteration  24: 840685.217 ops/s
Iteration  25: 842760.700 ops/s
Iteration  26: 840768.116 ops/s
Iteration  27: 840284.734 ops/s
Iteration  28: 841303.629 ops/s
Iteration  29: 842790.171 ops/s
Iteration  30: 840834.887 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_min_empty_throws":
  841030.478 ±(99.9%) 2188.290 ops/s [Average]
  (min, avg, max) = (830144.356, 841030.478, 845433.975), stdev = 3275.329
  CI (99.9%): [838842.188, 843218.768] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_min_empty_throws  thrpt   30  841030.478 ± 2188.290  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_min_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_min_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 370400.415 ops/s
# Warmup Iteration   2: 397376.528 ops/s
# Warmup Iteration   3: 530892.985 ops/s
# Warmup Iteration   4: 528878.607 ops/s
# Warmup Iteration   5: 525251.807 ops/s
# Warmup Iteration   6: 531311.515 ops/s
# Warmup Iteration   7: 530522.668 ops/s
# Warmup Iteration   8: 531722.670 ops/s
# Warmup Iteration   9: 530695.173 ops/s
# Warmup Iteration  10: 528918.172 ops/s
# Warmup Iteration  11: 509168.086 ops/s
# Warmup Iteration  12: 467358.926 ops/s
# Warmup Iteration  13: 530837.372 ops/s
# Warmup Iteration  14: 531751.354 ops/s
# Warmup Iteration  15: 530919.582 ops/s
# Warmup Iteration  16: 531520.206 ops/s
# Warmup Iteration  17: 548926.339 ops/s
# Warmup Iteration  18: 548888.714 ops/s
# Warmup Iteration  19: 548337.804 ops/s
# Warmup Iteration  20: 547511.179 ops/s
# Warmup Iteration  21: 548234.212 ops/s
# Warmup Iteration  22: 548395.974 ops/s
# Warmup Iteration  23: 546175.281 ops/s
# Warmup Iteration  24: 546480.243 ops/s
# Warmup Iteration  25: 549071.570 ops/s
# Warmup Iteration  26: 550530.587 ops/s
# Warmup Iteration  27: 548518.026 ops/s
# Warmup Iteration  28: 548683.423 ops/s
# Warmup Iteration  29: 548872.911 ops/s
# Warmup Iteration  30: 547945.729 ops/s
Iteration   1: 548665.134 ops/s
Iteration   2: 542104.990 ops/s
Iteration   3: 544265.820 ops/s
Iteration   4: 544566.469 ops/s
Iteration   5: 544112.814 ops/s
Iteration   6: 547275.213 ops/s
Iteration   7: 550864.648 ops/s
Iteration   8: 551339.440 ops/s
Iteration   9: 548231.108 ops/s
Iteration  10: 542060.574 ops/s
Iteration  11: 550204.603 ops/s
Iteration  12: 548037.551 ops/s
Iteration  13: 548668.494 ops/s
Iteration  14: 544427.420 ops/s
Iteration  15: 548534.705 ops/s
Iteration  16: 550076.642 ops/s
Iteration  17: 541366.181 ops/s
Iteration  18: 542663.988 ops/s
Iteration  19: 548922.277 ops/s
Iteration  20: 549822.982 ops/s
Iteration  21: 550138.128 ops/s
Iteration  22: 548250.205 ops/s
Iteration  23: 549371.844 ops/s
Iteration  24: 549822.897 ops/s
Iteration  25: 548705.073 ops/s
Iteration  26: 544217.290 ops/s
Iteration  27: 549092.755 ops/s
Iteration  28: 542535.373 ops/s
Iteration  29: 549494.502 ops/s
Iteration  30: 550820.056 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_min_null_safe":
  547288.639 ±(99.9%) 2080.759 ops/s [Average]
  (min, avg, max) = (541366.181, 547288.639, 551339.440), stdev = 3114.382
  CI (99.9%): [545207.880, 549369.398] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_min_null_safe  thrpt   30  547288.639 ± 2080.759  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 389277.500 ops/s
# Warmup Iteration   2: 409418.457 ops/s
# Warmup Iteration   3: 527104.883 ops/s
# Warmup Iteration   4: 541326.687 ops/s
# Warmup Iteration   5: 539477.985 ops/s
# Warmup Iteration   6: 541766.102 ops/s
# Warmup Iteration   7: 540779.336 ops/s
# Warmup Iteration   8: 542912.097 ops/s
# Warmup Iteration   9: 542347.199 ops/s
# Warmup Iteration  10: 543093.038 ops/s
# Warmup Iteration  11: 541418.909 ops/s
# Warmup Iteration  12: 482302.121 ops/s
# Warmup Iteration  13: 515850.359 ops/s
# Warmup Iteration  14: 541458.180 ops/s
# Warmup Iteration  15: 530763.826 ops/s
# Warmup Iteration  16: 542453.708 ops/s
# Warmup Iteration  17: 560907.853 ops/s
# Warmup Iteration  18: 560526.424 ops/s
# Warmup Iteration  19: 559827.914 ops/s
# Warmup Iteration  20: 560042.749 ops/s
# Warmup Iteration  21: 561856.706 ops/s
# Warmup Iteration  22: 563228.076 ops/s
# Warmup Iteration  23: 563207.632 ops/s
# Warmup Iteration  24: 562661.297 ops/s
# Warmup Iteration  25: 559418.609 ops/s
# Warmup Iteration  26: 561764.445 ops/s
# Warmup Iteration  27: 560716.991 ops/s
# Warmup Iteration  28: 562447.965 ops/s
# Warmup Iteration  29: 559150.784 ops/s
# Warmup Iteration  30: 560638.052 ops/s
Iteration   1: 559952.916 ops/s
Iteration   2: 556339.156 ops/s
Iteration   3: 563790.852 ops/s
Iteration   4: 563223.018 ops/s
Iteration   5: 562262.562 ops/s
Iteration   6: 561205.719 ops/s
Iteration   7: 561557.096 ops/s
Iteration   8: 562558.384 ops/s
Iteration   9: 562131.033 ops/s
Iteration  10: 561208.131 ops/s
Iteration  11: 560776.163 ops/s
Iteration  12: 562416.485 ops/s
Iteration  13: 560763.680 ops/s
Iteration  14: 562882.647 ops/s
Iteration  15: 560019.719 ops/s
Iteration  16: 562169.651 ops/s
Iteration  17: 559049.847 ops/s
Iteration  18: 559910.188 ops/s
Iteration  19: 561660.118 ops/s
Iteration  20: 558789.458 ops/s
Iteration  21: 560065.720 ops/s
Iteration  22: 560106.184 ops/s
Iteration  23: 559083.215 ops/s
Iteration  24: 562762.385 ops/s
Iteration  25: 561790.562 ops/s
Iteration  26: 562681.257 ops/s
Iteration  27: 562598.151 ops/s
Iteration  28: 558605.662 ops/s
Iteration  29: 562936.900 ops/s
Iteration  30: 559591.547 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_min_null_throws":
  561096.280 ±(99.9%) 1145.137 ops/s [Average]
  (min, avg, max) = (556339.156, 561096.280, 563790.852), stdev = 1713.987
  CI (99.9%): [559951.143, 562241.417] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_min_null_throws  thrpt   30  561096.280 ± 1145.137  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 391362.136 ops/s
# Warmup Iteration   2: 417128.475 ops/s
# Warmup Iteration   3: 542722.620 ops/s
# Warmup Iteration   4: 552415.495 ops/s
# Warmup Iteration   5: 555796.861 ops/s
# Warmup Iteration   6: 550760.915 ops/s
# Warmup Iteration   7: 553796.897 ops/s
# Warmup Iteration   8: 553522.392 ops/s
# Warmup Iteration   9: 554249.532 ops/s
# Warmup Iteration  10: 553555.235 ops/s
# Warmup Iteration  11: 555682.633 ops/s
# Warmup Iteration  12: 465853.007 ops/s
# Warmup Iteration  13: 554606.794 ops/s
# Warmup Iteration  14: 545003.160 ops/s
# Warmup Iteration  15: 553003.685 ops/s
# Warmup Iteration  16: 555284.299 ops/s
# Warmup Iteration  17: 572203.194 ops/s
# Warmup Iteration  18: 573274.476 ops/s
# Warmup Iteration  19: 573837.350 ops/s
# Warmup Iteration  20: 574630.805 ops/s
# Warmup Iteration  21: 574647.157 ops/s
# Warmup Iteration  22: 572574.647 ops/s
# Warmup Iteration  23: 573787.037 ops/s
# Warmup Iteration  24: 573698.683 ops/s
# Warmup Iteration  25: 574679.647 ops/s
# Warmup Iteration  26: 574074.732 ops/s
# Warmup Iteration  27: 571921.449 ops/s
# Warmup Iteration  28: 573902.577 ops/s
# Warmup Iteration  29: 571602.899 ops/s
# Warmup Iteration  30: 573428.854 ops/s
Iteration   1: 573928.864 ops/s
Iteration   2: 574530.159 ops/s
Iteration   3: 573435.810 ops/s
Iteration   4: 571550.704 ops/s
Iteration   5: 572741.574 ops/s
Iteration   6: 573289.644 ops/s
Iteration   7: 572176.969 ops/s
Iteration   8: 571496.986 ops/s
Iteration   9: 570758.660 ops/s
Iteration  10: 572347.339 ops/s
Iteration  11: 574953.403 ops/s
Iteration  12: 572387.344 ops/s
Iteration  13: 573176.485 ops/s
Iteration  14: 574728.888 ops/s
Iteration  15: 574696.210 ops/s
Iteration  16: 574180.430 ops/s
Iteration  17: 571970.240 ops/s
Iteration  18: 571942.000 ops/s
Iteration  19: 574314.878 ops/s
Iteration  20: 570420.093 ops/s
Iteration  21: 569526.812 ops/s
Iteration  22: 569542.354 ops/s
Iteration  23: 574675.823 ops/s
Iteration  24: 572764.089 ops/s
Iteration  25: 566225.444 ops/s
Iteration  26: 572047.950 ops/s
Iteration  27: 575081.574 ops/s
Iteration  28: 572342.966 ops/s
Iteration  29: 574478.712 ops/s
Iteration  30: 570206.823 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_min_null_throws_without_comparator":
  572530.641 ±(99.9%) 1347.154 ops/s [Average]
  (min, avg, max) = (566225.444, 572530.641, 575081.574), stdev = 2016.358
  CI (99.9%): [571183.486, 573877.795] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  572530.641 ± 1347.154  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1832295.488 ops/s
# Warmup Iteration   2: 2930533.867 ops/s
# Warmup Iteration   3: 3424370.835 ops/s
# Warmup Iteration   4: 3438442.923 ops/s
# Warmup Iteration   5: 3444853.541 ops/s
# Warmup Iteration   6: 3303706.633 ops/s
# Warmup Iteration   7: 3007179.940 ops/s
# Warmup Iteration   8: 3439218.507 ops/s
# Warmup Iteration   9: 3446693.910 ops/s
# Warmup Iteration  10: 3450994.702 ops/s
# Warmup Iteration  11: 3448518.771 ops/s
# Warmup Iteration  12: 3451967.343 ops/s
# Warmup Iteration  13: 3449147.324 ops/s
# Warmup Iteration  14: 3445455.686 ops/s
# Warmup Iteration  15: 3446956.929 ops/s
# Warmup Iteration  16: 3433931.459 ops/s
# Warmup Iteration  17: 3445839.530 ops/s
# Warmup Iteration  18: 3440645.456 ops/s
# Warmup Iteration  19: 3449136.855 ops/s
# Warmup Iteration  20: 3447561.684 ops/s
# Warmup Iteration  21: 3439612.288 ops/s
# Warmup Iteration  22: 3438944.310 ops/s
# Warmup Iteration  23: 3440181.533 ops/s
# Warmup Iteration  24: 3442955.368 ops/s
# Warmup Iteration  25: 3444925.919 ops/s
# Warmup Iteration  26: 3437818.421 ops/s
# Warmup Iteration  27: 3451036.925 ops/s
# Warmup Iteration  28: 3453154.288 ops/s
# Warmup Iteration  29: 3443844.666 ops/s
# Warmup Iteration  30: 3447922.686 ops/s
Iteration   1: 3454368.635 ops/s
Iteration   2: 3434789.328 ops/s
Iteration   3: 3447626.108 ops/s
Iteration   4: 3447730.176 ops/s
Iteration   5: 3445028.064 ops/s
Iteration   6: 3445995.043 ops/s
Iteration   7: 3450256.397 ops/s
Iteration   8: 3445196.499 ops/s
Iteration   9: 3437393.005 ops/s
Iteration  10: 3425832.692 ops/s
Iteration  11: 3450212.692 ops/s
Iteration  12: 3448777.455 ops/s
Iteration  13: 3455390.410 ops/s
Iteration  14: 3436944.292 ops/s
Iteration  15: 3454111.506 ops/s
Iteration  16: 3439860.608 ops/s
Iteration  17: 3455269.504 ops/s
Iteration  18: 3453733.539 ops/s
Iteration  19: 3451383.135 ops/s
Iteration  20: 3447949.452 ops/s
Iteration  21: 3453913.692 ops/s
Iteration  22: 3416080.094 ops/s
Iteration  23: 3449179.440 ops/s
Iteration  24: 3445132.864 ops/s
Iteration  25: 3451374.948 ops/s
Iteration  26: 3444843.031 ops/s
Iteration  27: 3451229.048 ops/s
Iteration  28: 3443471.669 ops/s
Iteration  29: 3456319.274 ops/s
Iteration  30: 3445102.638 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_min_without_comparator":
  3446149.841 ±(99.9%) 5974.206 ops/s [Average]
  (min, avg, max) = (3416080.094, 3446149.841, 3456319.274), stdev = 8941.911
  CI (99.9%): [3440175.636, 3452124.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_min_without_comparator  thrpt   30  3446149.841 ± 5974.206  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3156964.803 ops/s
# Warmup Iteration   2: 6902509.686 ops/s
# Warmup Iteration   3: 7005351.924 ops/s
# Warmup Iteration   4: 5873101.679 ops/s
# Warmup Iteration   5: 7020093.167 ops/s
# Warmup Iteration   6: 7004374.926 ops/s
# Warmup Iteration   7: 7030502.848 ops/s
# Warmup Iteration   8: 7011321.984 ops/s
# Warmup Iteration   9: 7006045.703 ops/s
# Warmup Iteration  10: 7003861.358 ops/s
# Warmup Iteration  11: 7007371.219 ops/s
# Warmup Iteration  12: 7005149.368 ops/s
# Warmup Iteration  13: 6990109.055 ops/s
# Warmup Iteration  14: 6988997.155 ops/s
# Warmup Iteration  15: 7003108.912 ops/s
# Warmup Iteration  16: 6972303.279 ops/s
# Warmup Iteration  17: 7008691.403 ops/s
# Warmup Iteration  18: 7009223.489 ops/s
# Warmup Iteration  19: 7007468.392 ops/s
# Warmup Iteration  20: 6964723.937 ops/s
# Warmup Iteration  21: 7019621.085 ops/s
# Warmup Iteration  22: 7009020.397 ops/s
# Warmup Iteration  23: 7013524.830 ops/s
# Warmup Iteration  24: 7014461.495 ops/s
# Warmup Iteration  25: 6934105.133 ops/s
# Warmup Iteration  26: 7007666.888 ops/s
# Warmup Iteration  27: 7027456.120 ops/s
# Warmup Iteration  28: 7026198.887 ops/s
# Warmup Iteration  29: 7024823.397 ops/s
# Warmup Iteration  30: 7029163.348 ops/s
Iteration   1: 7010152.437 ops/s
Iteration   2: 7013083.499 ops/s
Iteration   3: 7022592.802 ops/s
Iteration   4: 7015525.283 ops/s
Iteration   5: 6997661.734 ops/s
Iteration   6: 6999837.377 ops/s
Iteration   7: 7015745.450 ops/s
Iteration   8: 6982534.079 ops/s
Iteration   9: 7007522.795 ops/s
Iteration  10: 7015481.202 ops/s
Iteration  11: 7004926.151 ops/s
Iteration  12: 7007962.192 ops/s
Iteration  13: 7036767.932 ops/s
Iteration  14: 7019286.940 ops/s
Iteration  15: 7005894.930 ops/s
Iteration  16: 7034254.288 ops/s
Iteration  17: 7024188.831 ops/s
Iteration  18: 7028540.718 ops/s
Iteration  19: 7034309.762 ops/s
Iteration  20: 7020146.927 ops/s
Iteration  21: 7016964.805 ops/s
Iteration  22: 7013254.705 ops/s
Iteration  23: 7029519.463 ops/s
Iteration  24: 7005942.983 ops/s
Iteration  25: 7020698.893 ops/s
Iteration  26: 7020981.934 ops/s
Iteration  27: 6992368.235 ops/s
Iteration  28: 7022914.770 ops/s
Iteration  29: 7019878.819 ops/s
Iteration  30: 7013001.800 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_newEmpty":
  7015064.725 ±(99.9%) 8286.309 ops/s [Average]
  (min, avg, max) = (6982534.079, 7015064.725, 7036767.932), stdev = 12402.558
  CI (99.9%): [7006778.415, 7023351.034] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_newEmpty  thrpt   30  7015064.725 ± 8286.309  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 417634.977 ops/s
# Warmup Iteration   2: 585112.907 ops/s
# Warmup Iteration   3: 725260.010 ops/s
# Warmup Iteration   4: 720500.679 ops/s
# Warmup Iteration   5: 724750.013 ops/s
# Warmup Iteration   6: 725259.170 ops/s
# Warmup Iteration   7: 723941.807 ops/s
# Warmup Iteration   8: 609622.243 ops/s
# Warmup Iteration   9: 725650.206 ops/s
# Warmup Iteration  10: 725863.188 ops/s
# Warmup Iteration  11: 725935.504 ops/s
# Warmup Iteration  12: 724536.571 ops/s
# Warmup Iteration  13: 726019.855 ops/s
# Warmup Iteration  14: 725574.349 ops/s
# Warmup Iteration  15: 725615.092 ops/s
# Warmup Iteration  16: 725856.538 ops/s
# Warmup Iteration  17: 723868.946 ops/s
# Warmup Iteration  18: 713526.904 ops/s
# Warmup Iteration  19: 724290.417 ops/s
# Warmup Iteration  20: 724572.395 ops/s
# Warmup Iteration  21: 724689.086 ops/s
# Warmup Iteration  22: 724200.075 ops/s
# Warmup Iteration  23: 724264.443 ops/s
# Warmup Iteration  24: 724813.196 ops/s
# Warmup Iteration  25: 724534.212 ops/s
# Warmup Iteration  26: 718390.733 ops/s
# Warmup Iteration  27: 724710.055 ops/s
# Warmup Iteration  28: 724911.877 ops/s
# Warmup Iteration  29: 723157.699 ops/s
# Warmup Iteration  30: 724426.969 ops/s
Iteration   1: 724784.566 ops/s
Iteration   2: 725307.613 ops/s
Iteration   3: 722508.940 ops/s
Iteration   4: 725767.465 ops/s
Iteration   5: 723775.960 ops/s
Iteration   6: 725510.612 ops/s
Iteration   7: 723754.870 ops/s
Iteration   8: 721029.078 ops/s
Iteration   9: 723326.358 ops/s
Iteration  10: 725739.286 ops/s
Iteration  11: 721409.660 ops/s
Iteration  12: 721407.487 ops/s
Iteration  13: 724691.614 ops/s
Iteration  14: 724792.586 ops/s
Iteration  15: 725231.733 ops/s
Iteration  16: 723210.562 ops/s
Iteration  17: 724349.961 ops/s
Iteration  18: 722732.351 ops/s
Iteration  19: 722227.821 ops/s
Iteration  20: 725171.934 ops/s
Iteration  21: 722443.232 ops/s
Iteration  22: 724390.479 ops/s
Iteration  23: 717069.768 ops/s
Iteration  24: 724900.168 ops/s
Iteration  25: 726116.149 ops/s
Iteration  26: 723827.474 ops/s
Iteration  27: 725032.089 ops/s
Iteration  28: 725756.965 ops/s
Iteration  29: 723694.764 ops/s
Iteration  30: 725290.856 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_noneSatisfy":
  723841.747 ±(99.9%) 1279.583 ops/s [Average]
  (min, avg, max) = (717069.768, 723841.747, 726116.149), stdev = 1915.220
  CI (99.9%): [722562.163, 725121.330] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_noneSatisfy  thrpt   30  723841.747 ± 1279.583  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 541296.370 ops/s
# Warmup Iteration   2: 729741.991 ops/s
# Warmup Iteration   3: 933175.700 ops/s
# Warmup Iteration   4: 931056.847 ops/s
# Warmup Iteration   5: 933817.592 ops/s
# Warmup Iteration   6: 934278.798 ops/s
# Warmup Iteration   7: 934711.531 ops/s
# Warmup Iteration   8: 863389.114 ops/s
# Warmup Iteration   9: 845819.955 ops/s
# Warmup Iteration  10: 925637.636 ops/s
# Warmup Iteration  11: 927479.216 ops/s
# Warmup Iteration  12: 927316.802 ops/s
# Warmup Iteration  13: 927032.275 ops/s
# Warmup Iteration  14: 925018.471 ops/s
# Warmup Iteration  15: 925249.501 ops/s
# Warmup Iteration  16: 926310.820 ops/s
# Warmup Iteration  17: 928868.860 ops/s
# Warmup Iteration  18: 928693.031 ops/s
# Warmup Iteration  19: 931122.363 ops/s
# Warmup Iteration  20: 929458.383 ops/s
# Warmup Iteration  21: 929489.338 ops/s
# Warmup Iteration  22: 928422.138 ops/s
# Warmup Iteration  23: 929303.945 ops/s
# Warmup Iteration  24: 929910.806 ops/s
# Warmup Iteration  25: 930057.326 ops/s
# Warmup Iteration  26: 930659.594 ops/s
# Warmup Iteration  27: 929775.523 ops/s
# Warmup Iteration  28: 929384.207 ops/s
# Warmup Iteration  29: 929169.363 ops/s
# Warmup Iteration  30: 931794.205 ops/s
Iteration   1: 926912.221 ops/s
Iteration   2: 932157.330 ops/s
Iteration   3: 932527.751 ops/s
Iteration   4: 927697.457 ops/s
Iteration   5: 928439.499 ops/s
Iteration   6: 931466.726 ops/s
Iteration   7: 929144.578 ops/s
Iteration   8: 932786.313 ops/s
Iteration   9: 929933.053 ops/s
Iteration  10: 931744.161 ops/s
Iteration  11: 931254.810 ops/s
Iteration  12: 929380.147 ops/s
Iteration  13: 925187.007 ops/s
Iteration  14: 931385.219 ops/s
Iteration  15: 931608.979 ops/s
Iteration  16: 932657.183 ops/s
Iteration  17: 932612.031 ops/s
Iteration  18: 928719.001 ops/s
Iteration  19: 931510.274 ops/s
Iteration  20: 928645.908 ops/s
Iteration  21: 928637.358 ops/s
Iteration  22: 931144.771 ops/s
Iteration  23: 930786.356 ops/s
Iteration  24: 930430.200 ops/s
Iteration  25: 931484.872 ops/s
Iteration  26: 922399.639 ops/s
Iteration  27: 930557.898 ops/s
Iteration  28: 932186.232 ops/s
Iteration  29: 926721.793 ops/s
Iteration  30: 931246.798 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_noneSatisfyWith":
  930045.519 ±(99.9%) 1629.698 ops/s [Average]
  (min, avg, max) = (922399.639, 930045.519, 932786.313), stdev = 2439.255
  CI (99.9%): [928415.821, 931675.217] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  930045.519 ± 1629.698  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 596850.782 ops/s
# Warmup Iteration   2: 836090.625 ops/s
# Warmup Iteration   3: 1029300.828 ops/s
# Warmup Iteration   4: 1029210.936 ops/s
# Warmup Iteration   5: 1035487.491 ops/s
# Warmup Iteration   6: 1032476.525 ops/s
# Warmup Iteration   7: 1033661.548 ops/s
# Warmup Iteration   8: 867992.721 ops/s
# Warmup Iteration   9: 1034904.930 ops/s
# Warmup Iteration  10: 1036286.478 ops/s
# Warmup Iteration  11: 1035019.723 ops/s
# Warmup Iteration  12: 1034925.828 ops/s
# Warmup Iteration  13: 1032841.231 ops/s
# Warmup Iteration  14: 1036754.570 ops/s
# Warmup Iteration  15: 1036542.236 ops/s
# Warmup Iteration  16: 1036470.844 ops/s
# Warmup Iteration  17: 1035684.378 ops/s
# Warmup Iteration  18: 1036003.486 ops/s
# Warmup Iteration  19: 1035590.216 ops/s
# Warmup Iteration  20: 1031432.302 ops/s
# Warmup Iteration  21: 1036688.301 ops/s
# Warmup Iteration  22: 1036541.523 ops/s
# Warmup Iteration  23: 1035506.414 ops/s
# Warmup Iteration  24: 1033168.397 ops/s
# Warmup Iteration  25: 1033143.929 ops/s
# Warmup Iteration  26: 1031471.417 ops/s
# Warmup Iteration  27: 1037681.465 ops/s
# Warmup Iteration  28: 1037774.532 ops/s
# Warmup Iteration  29: 1035713.431 ops/s
# Warmup Iteration  30: 1033351.228 ops/s
Iteration   1: 1034710.872 ops/s
Iteration   2: 1034614.610 ops/s
Iteration   3: 1036085.168 ops/s
Iteration   4: 1037173.886 ops/s
Iteration   5: 1035145.342 ops/s
Iteration   6: 1036536.061 ops/s
Iteration   7: 1033876.232 ops/s
Iteration   8: 1034869.969 ops/s
Iteration   9: 1037603.522 ops/s
Iteration  10: 1035807.251 ops/s
Iteration  11: 1037782.336 ops/s
Iteration  12: 1037038.868 ops/s
Iteration  13: 1036756.108 ops/s
Iteration  14: 1037459.538 ops/s
Iteration  15: 1036426.651 ops/s
Iteration  16: 1034614.637 ops/s
Iteration  17: 1035397.110 ops/s
Iteration  18: 1033720.387 ops/s
Iteration  19: 1036846.468 ops/s
Iteration  20: 1037414.210 ops/s
Iteration  21: 1036964.068 ops/s
Iteration  22: 1035614.374 ops/s
Iteration  23: 1036894.092 ops/s
Iteration  24: 1035942.217 ops/s
Iteration  25: 1034455.787 ops/s
Iteration  26: 1038466.518 ops/s
Iteration  27: 1036546.173 ops/s
Iteration  28: 1034990.274 ops/s
Iteration  29: 1036957.261 ops/s
Iteration  30: 1037387.090 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences":
  1036136.569 ±(99.9%) 838.371 ops/s [Average]
  (min, avg, max) = (1033720.387, 1036136.569, 1038466.518), stdev = 1254.834
  CI (99.9%): [1035298.198, 1036974.940] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences  thrpt   30  1036136.569 ± 838.371  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2718284.101 ops/s
# Warmup Iteration   2: 5992025.647 ops/s
# Warmup Iteration   3: 5103943.558 ops/s
# Warmup Iteration   4: 6040754.083 ops/s
# Warmup Iteration   5: 6044865.795 ops/s
# Warmup Iteration   6: 6045919.335 ops/s
# Warmup Iteration   7: 6044035.730 ops/s
# Warmup Iteration   8: 6044133.209 ops/s
# Warmup Iteration   9: 6021515.881 ops/s
# Warmup Iteration  10: 6042616.970 ops/s
# Warmup Iteration  11: 6030201.641 ops/s
# Warmup Iteration  12: 6032927.478 ops/s
# Warmup Iteration  13: 6043930.668 ops/s
# Warmup Iteration  14: 6053478.581 ops/s
# Warmup Iteration  15: 6039838.087 ops/s
# Warmup Iteration  16: 6027989.084 ops/s
# Warmup Iteration  17: 6038532.280 ops/s
# Warmup Iteration  18: 6052147.842 ops/s
# Warmup Iteration  19: 6049007.221 ops/s
# Warmup Iteration  20: 6051787.490 ops/s
# Warmup Iteration  21: 6024930.560 ops/s
# Warmup Iteration  22: 6036441.949 ops/s
# Warmup Iteration  23: 6001151.448 ops/s
# Warmup Iteration  24: 6030869.099 ops/s
# Warmup Iteration  25: 6034886.673 ops/s
# Warmup Iteration  26: 6032123.678 ops/s
# Warmup Iteration  27: 6025955.014 ops/s
# Warmup Iteration  28: 6050066.931 ops/s
# Warmup Iteration  29: 6045255.835 ops/s
# Warmup Iteration  30: 6038489.492 ops/s
Iteration   1: 6023883.919 ops/s
Iteration   2: 6043081.180 ops/s
Iteration   3: 6035371.553 ops/s
Iteration   4: 6032853.712 ops/s
Iteration   5: 6060549.314 ops/s
Iteration   6: 6023860.018 ops/s
Iteration   7: 6031615.218 ops/s
Iteration   8: 6039779.083 ops/s
Iteration   9: 6037570.510 ops/s
Iteration  10: 6049172.747 ops/s
Iteration  11: 6009602.850 ops/s
Iteration  12: 6060384.112 ops/s
Iteration  13: 6041022.508 ops/s
Iteration  14: 6029627.006 ops/s
Iteration  15: 6022098.514 ops/s
Iteration  16: 6033181.034 ops/s
Iteration  17: 6054788.960 ops/s
Iteration  18: 6039636.846 ops/s
Iteration  19: 6015794.611 ops/s
Iteration  20: 5998840.075 ops/s
Iteration  21: 6042263.618 ops/s
Iteration  22: 6041952.415 ops/s
Iteration  23: 6066250.318 ops/s
Iteration  24: 6033532.218 ops/s
Iteration  25: 6055458.749 ops/s
Iteration  26: 6045983.995 ops/s
Iteration  27: 6039859.565 ops/s
Iteration  28: 6035020.863 ops/s
Iteration  29: 6023017.165 ops/s
Iteration  30: 6028354.315 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_notEmpty":
  6036480.233 ±(99.9%) 10072.012 ops/s [Average]
  (min, avg, max) = (5998840.075, 6036480.233, 6066250.318), stdev = 15075.315
  CI (99.9%): [6026408.221, 6046552.245] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_notEmpty  thrpt   30  6036480.233 ± 10072.012  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_occurrencesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_occurrencesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1663077.938 ops/s
# Warmup Iteration   2: 3172825.094 ops/s
# Warmup Iteration   3: 3381335.320 ops/s
# Warmup Iteration   4: 3405925.387 ops/s
# Warmup Iteration   5: 2845649.096 ops/s
# Warmup Iteration   6: 3400986.871 ops/s
# Warmup Iteration   7: 3399928.092 ops/s
# Warmup Iteration   8: 3400182.933 ops/s
# Warmup Iteration   9: 3408872.626 ops/s
# Warmup Iteration  10: 3414744.857 ops/s
# Warmup Iteration  11: 3402348.147 ops/s
# Warmup Iteration  12: 3416944.157 ops/s
# Warmup Iteration  13: 3412166.524 ops/s
# Warmup Iteration  14: 3401835.960 ops/s
# Warmup Iteration  15: 3401649.979 ops/s
# Warmup Iteration  16: 3418368.375 ops/s
# Warmup Iteration  17: 3388308.466 ops/s
# Warmup Iteration  18: 3356623.086 ops/s
# Warmup Iteration  19: 3378994.250 ops/s
# Warmup Iteration  20: 3397498.347 ops/s
# Warmup Iteration  21: 3392395.894 ops/s
# Warmup Iteration  22: 3397887.656 ops/s
# Warmup Iteration  23: 3402183.744 ops/s
# Warmup Iteration  24: 3388502.375 ops/s
# Warmup Iteration  25: 3403175.893 ops/s
# Warmup Iteration  26: 3399665.799 ops/s
# Warmup Iteration  27: 3389780.716 ops/s
# Warmup Iteration  28: 3401988.512 ops/s
# Warmup Iteration  29: 3382819.556 ops/s
# Warmup Iteration  30: 3397095.349 ops/s
Iteration   1: 3404775.954 ops/s
Iteration   2: 3377927.938 ops/s
Iteration   3: 3401815.891 ops/s
Iteration   4: 3371378.017 ops/s
Iteration   5: 3342136.984 ops/s
Iteration   6: 3382445.323 ops/s
Iteration   7: 3383912.978 ops/s
Iteration   8: 3402013.787 ops/s
Iteration   9: 3394973.818 ops/s
Iteration  10: 3366982.915 ops/s
Iteration  11: 3395211.808 ops/s
Iteration  12: 3401270.620 ops/s
Iteration  13: 3383425.926 ops/s
Iteration  14: 3381951.700 ops/s
Iteration  15: 3395442.678 ops/s
Iteration  16: 3397347.379 ops/s
Iteration  17: 3387914.895 ops/s
Iteration  18: 3390894.847 ops/s
Iteration  19: 3395688.439 ops/s
Iteration  20: 3401199.009 ops/s
Iteration  21: 3404567.483 ops/s
Iteration  22: 3384505.686 ops/s
Iteration  23: 3388781.825 ops/s
Iteration  24: 3398489.128 ops/s
Iteration  25: 3389647.693 ops/s
Iteration  26: 3393481.956 ops/s
Iteration  27: 3405612.687 ops/s
Iteration  28: 3394115.998 ops/s
Iteration  29: 3395051.684 ops/s
Iteration  30: 3393905.091 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_occurrencesOf":
  3390229.005 ±(99.9%) 8834.916 ops/s [Average]
  (min, avg, max) = (3342136.984, 3390229.005, 3405612.687), stdev = 13223.687
  CI (99.9%): [3381394.089, 3399063.920] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_occurrencesOf  thrpt   30  3390229.005 ± 8834.916  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 103304.105 ops/s
# Warmup Iteration   2: 185237.849 ops/s
# Warmup Iteration   3: 218433.623 ops/s
# Warmup Iteration   4: 220286.970 ops/s
# Warmup Iteration   5: 219860.436 ops/s
# Warmup Iteration   6: 184101.271 ops/s
# Warmup Iteration   7: 220647.696 ops/s
# Warmup Iteration   8: 220872.866 ops/s
# Warmup Iteration   9: 221180.081 ops/s
# Warmup Iteration  10: 220693.170 ops/s
# Warmup Iteration  11: 220856.381 ops/s
# Warmup Iteration  12: 221032.089 ops/s
# Warmup Iteration  13: 220728.477 ops/s
# Warmup Iteration  14: 220661.584 ops/s
# Warmup Iteration  15: 220529.786 ops/s
# Warmup Iteration  16: 220933.819 ops/s
# Warmup Iteration  17: 220292.841 ops/s
# Warmup Iteration  18: 219663.758 ops/s
# Warmup Iteration  19: 219941.943 ops/s
# Warmup Iteration  20: 220102.373 ops/s
# Warmup Iteration  21: 219658.012 ops/s
# Warmup Iteration  22: 219869.412 ops/s
# Warmup Iteration  23: 220011.882 ops/s
# Warmup Iteration  24: 219957.584 ops/s
# Warmup Iteration  25: 220033.034 ops/s
# Warmup Iteration  26: 219503.227 ops/s
# Warmup Iteration  27: 219839.225 ops/s
# Warmup Iteration  28: 219977.018 ops/s
# Warmup Iteration  29: 219810.298 ops/s
# Warmup Iteration  30: 219563.065 ops/s
Iteration   1: 219167.605 ops/s
Iteration   2: 219988.069 ops/s
Iteration   3: 220278.878 ops/s
Iteration   4: 219951.813 ops/s
Iteration   5: 220005.031 ops/s
Iteration   6: 219504.113 ops/s
Iteration   7: 220162.350 ops/s
Iteration   8: 219556.449 ops/s
Iteration   9: 219777.297 ops/s
Iteration  10: 219624.308 ops/s
Iteration  11: 220381.937 ops/s
Iteration  12: 220058.403 ops/s
Iteration  13: 220512.930 ops/s
Iteration  14: 220079.578 ops/s
Iteration  15: 220280.888 ops/s
Iteration  16: 221039.415 ops/s
Iteration  17: 219450.498 ops/s
Iteration  18: 219750.131 ops/s
Iteration  19: 219518.195 ops/s
Iteration  20: 220406.020 ops/s
Iteration  21: 219968.025 ops/s
Iteration  22: 219772.227 ops/s
Iteration  23: 219830.982 ops/s
Iteration  24: 220253.978 ops/s
Iteration  25: 219872.034 ops/s
Iteration  26: 220078.935 ops/s
Iteration  27: 219444.454 ops/s
Iteration  28: 220545.557 ops/s
Iteration  29: 220062.993 ops/s
Iteration  30: 219445.059 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_partition":
  219958.938 ±(99.9%) 272.053 ops/s [Average]
  (min, avg, max) = (219167.605, 219958.938, 221039.415), stdev = 407.196
  CI (99.9%): [219686.885, 220230.991] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_partition  thrpt   30  219958.938 ± 272.053  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 271198.380 ops/s
# Warmup Iteration   2: 477951.164 ops/s
# Warmup Iteration   3: 547011.175 ops/s
# Warmup Iteration   4: 551296.192 ops/s
# Warmup Iteration   5: 550828.541 ops/s
# Warmup Iteration   6: 462594.059 ops/s
# Warmup Iteration   7: 548626.872 ops/s
# Warmup Iteration   8: 549283.788 ops/s
# Warmup Iteration   9: 548946.944 ops/s
# Warmup Iteration  10: 547694.212 ops/s
# Warmup Iteration  11: 549996.542 ops/s
# Warmup Iteration  12: 549194.602 ops/s
# Warmup Iteration  13: 550981.976 ops/s
# Warmup Iteration  14: 550116.652 ops/s
# Warmup Iteration  15: 549604.148 ops/s
# Warmup Iteration  16: 549701.352 ops/s
# Warmup Iteration  17: 549927.579 ops/s
# Warmup Iteration  18: 549658.817 ops/s
# Warmup Iteration  19: 549563.402 ops/s
# Warmup Iteration  20: 549989.198 ops/s
# Warmup Iteration  21: 549471.505 ops/s
# Warmup Iteration  22: 550019.097 ops/s
# Warmup Iteration  23: 550894.242 ops/s
# Warmup Iteration  24: 550449.845 ops/s
# Warmup Iteration  25: 546089.704 ops/s
# Warmup Iteration  26: 551141.367 ops/s
# Warmup Iteration  27: 549467.609 ops/s
# Warmup Iteration  28: 549240.229 ops/s
# Warmup Iteration  29: 549970.473 ops/s
# Warmup Iteration  30: 549506.002 ops/s
Iteration   1: 551478.989 ops/s
Iteration   2: 547266.725 ops/s
Iteration   3: 549739.051 ops/s
Iteration   4: 549862.948 ops/s
Iteration   5: 550678.156 ops/s
Iteration   6: 549963.266 ops/s
Iteration   7: 545378.257 ops/s
Iteration   8: 551320.051 ops/s
Iteration   9: 549896.437 ops/s
Iteration  10: 550707.231 ops/s
Iteration  11: 549644.393 ops/s
Iteration  12: 549589.854 ops/s
Iteration  13: 547896.673 ops/s
Iteration  14: 550915.909 ops/s
Iteration  15: 547868.171 ops/s
Iteration  16: 548477.018 ops/s
Iteration  17: 549593.631 ops/s
Iteration  18: 550259.616 ops/s
Iteration  19: 550898.207 ops/s
Iteration  20: 549930.801 ops/s
Iteration  21: 548419.832 ops/s
Iteration  22: 545800.052 ops/s
Iteration  23: 550102.775 ops/s
Iteration  24: 550307.524 ops/s
Iteration  25: 549470.296 ops/s
Iteration  26: 550997.139 ops/s
Iteration  27: 547815.821 ops/s
Iteration  28: 550401.893 ops/s
Iteration  29: 550348.610 ops/s
Iteration  30: 550596.326 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_partitionWhile":
  549520.855 ±(99.9%) 1017.976 ops/s [Average]
  (min, avg, max) = (545378.257, 549520.855, 551478.989), stdev = 1523.658
  CI (99.9%): [548502.879, 550538.831] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_partitionWhile  thrpt   30  549520.855 ± 1017.976  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 73543.276 ops/s
# Warmup Iteration   2: 111846.745 ops/s
# Warmup Iteration   3: 144147.170 ops/s
# Warmup Iteration   4: 143334.532 ops/s
# Warmup Iteration   5: 144060.980 ops/s
# Warmup Iteration   6: 142406.948 ops/s
# Warmup Iteration   7: 144063.102 ops/s
# Warmup Iteration   8: 120545.339 ops/s
# Warmup Iteration   9: 143803.643 ops/s
# Warmup Iteration  10: 144376.493 ops/s
# Warmup Iteration  11: 144088.176 ops/s
# Warmup Iteration  12: 144022.099 ops/s
# Warmup Iteration  13: 143691.603 ops/s
# Warmup Iteration  14: 144312.422 ops/s
# Warmup Iteration  15: 144137.438 ops/s
# Warmup Iteration  16: 144205.466 ops/s
# Warmup Iteration  17: 144004.936 ops/s
# Warmup Iteration  18: 143942.937 ops/s
# Warmup Iteration  19: 142978.915 ops/s
# Warmup Iteration  20: 144136.512 ops/s
# Warmup Iteration  21: 143898.749 ops/s
# Warmup Iteration  22: 143745.327 ops/s
# Warmup Iteration  23: 143754.028 ops/s
# Warmup Iteration  24: 143841.648 ops/s
# Warmup Iteration  25: 143895.830 ops/s
# Warmup Iteration  26: 144025.220 ops/s
# Warmup Iteration  27: 143709.454 ops/s
# Warmup Iteration  28: 144038.208 ops/s
# Warmup Iteration  29: 143922.149 ops/s
# Warmup Iteration  30: 143586.556 ops/s
Iteration   1: 143987.082 ops/s
Iteration   2: 144133.286 ops/s
Iteration   3: 144510.949 ops/s
Iteration   4: 144060.644 ops/s
Iteration   5: 144319.374 ops/s
Iteration   6: 143682.999 ops/s
Iteration   7: 143616.227 ops/s
Iteration   8: 144245.352 ops/s
Iteration   9: 143317.919 ops/s
Iteration  10: 144312.104 ops/s
Iteration  11: 144128.469 ops/s
Iteration  12: 144263.878 ops/s
Iteration  13: 143782.757 ops/s
Iteration  14: 143179.550 ops/s
Iteration  15: 144027.089 ops/s
Iteration  16: 143835.205 ops/s
Iteration  17: 143958.600 ops/s
Iteration  18: 143996.796 ops/s
Iteration  19: 143332.576 ops/s
Iteration  20: 144099.355 ops/s
Iteration  21: 143937.942 ops/s
Iteration  22: 144370.845 ops/s
Iteration  23: 144393.365 ops/s
Iteration  24: 144100.379 ops/s
Iteration  25: 144418.071 ops/s
Iteration  26: 143652.972 ops/s
Iteration  27: 143992.711 ops/s
Iteration  28: 144250.166 ops/s
Iteration  29: 144225.249 ops/s
Iteration  30: 144011.618 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_partitionWith":
  144004.784 ±(99.9%) 224.038 ops/s [Average]
  (min, avg, max) = (143179.550, 144004.784, 144510.949), stdev = 335.329
  CI (99.9%): [143780.747, 144228.822] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_partitionWith  thrpt   30  144004.784 ± 224.038  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_reduceOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_reduceOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 293739.559 ops/s
# Warmup Iteration   2: 448094.594 ops/s
# Warmup Iteration   3: 543502.439 ops/s
# Warmup Iteration   4: 539721.556 ops/s
# Warmup Iteration   5: 543445.227 ops/s
# Warmup Iteration   6: 542379.049 ops/s
# Warmup Iteration   7: 454610.848 ops/s
# Warmup Iteration   8: 542282.750 ops/s
# Warmup Iteration   9: 542105.647 ops/s
# Warmup Iteration  10: 542687.756 ops/s
# Warmup Iteration  11: 542527.112 ops/s
# Warmup Iteration  12: 542435.279 ops/s
# Warmup Iteration  13: 541248.135 ops/s
# Warmup Iteration  14: 542223.959 ops/s
# Warmup Iteration  15: 541748.937 ops/s
# Warmup Iteration  16: 541321.057 ops/s
# Warmup Iteration  17: 539268.976 ops/s
# Warmup Iteration  18: 543729.078 ops/s
# Warmup Iteration  19: 542440.008 ops/s
# Warmup Iteration  20: 542931.378 ops/s
# Warmup Iteration  21: 534286.660 ops/s
# Warmup Iteration  22: 543800.156 ops/s
# Warmup Iteration  23: 543277.263 ops/s
# Warmup Iteration  24: 541997.742 ops/s
# Warmup Iteration  25: 542484.453 ops/s
# Warmup Iteration  26: 542760.423 ops/s
# Warmup Iteration  27: 543795.358 ops/s
# Warmup Iteration  28: 543265.801 ops/s
# Warmup Iteration  29: 542048.230 ops/s
# Warmup Iteration  30: 541501.053 ops/s
Iteration   1: 543154.395 ops/s
Iteration   2: 540637.335 ops/s
Iteration   3: 543055.137 ops/s
Iteration   4: 542685.278 ops/s
Iteration   5: 541033.434 ops/s
Iteration   6: 540637.466 ops/s
Iteration   7: 542946.950 ops/s
Iteration   8: 543722.486 ops/s
Iteration   9: 542073.639 ops/s
Iteration  10: 544507.594 ops/s
Iteration  11: 542604.109 ops/s
Iteration  12: 544214.726 ops/s
Iteration  13: 541374.578 ops/s
Iteration  14: 543298.138 ops/s
Iteration  15: 541987.594 ops/s
Iteration  16: 538605.828 ops/s
Iteration  17: 541161.113 ops/s
Iteration  18: 543324.796 ops/s
Iteration  19: 542129.682 ops/s
Iteration  20: 543209.642 ops/s
Iteration  21: 543638.101 ops/s
Iteration  22: 543076.127 ops/s
Iteration  23: 543525.817 ops/s
Iteration  24: 540545.298 ops/s
Iteration  25: 544422.839 ops/s
Iteration  26: 541871.104 ops/s
Iteration  27: 544767.229 ops/s
Iteration  28: 542303.614 ops/s
Iteration  29: 543226.169 ops/s
Iteration  30: 543001.732 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_reduceOptional":
  542558.065 ±(99.9%) 925.199 ops/s [Average]
  (min, avg, max) = (538605.828, 542558.065, 544767.229), stdev = 1384.795
  CI (99.9%): [541632.866, 543483.264] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_reduceOptional  thrpt   30  542558.065 ± 925.199  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 134619.771 ops/s
# Warmup Iteration   2: 242692.744 ops/s
# Warmup Iteration   3: 283572.522 ops/s
# Warmup Iteration   4: 285428.145 ops/s
# Warmup Iteration   5: 284279.596 ops/s
# Warmup Iteration   6: 238996.713 ops/s
# Warmup Iteration   7: 285165.922 ops/s
# Warmup Iteration   8: 285035.906 ops/s
# Warmup Iteration   9: 285155.950 ops/s
# Warmup Iteration  10: 285290.792 ops/s
# Warmup Iteration  11: 285378.651 ops/s
# Warmup Iteration  12: 284638.377 ops/s
# Warmup Iteration  13: 285590.189 ops/s
# Warmup Iteration  14: 285591.069 ops/s
# Warmup Iteration  15: 285633.616 ops/s
# Warmup Iteration  16: 284901.511 ops/s
# Warmup Iteration  17: 284532.994 ops/s
# Warmup Iteration  18: 285243.802 ops/s
# Warmup Iteration  19: 284134.904 ops/s
# Warmup Iteration  20: 284918.092 ops/s
# Warmup Iteration  21: 285115.964 ops/s
# Warmup Iteration  22: 285469.046 ops/s
# Warmup Iteration  23: 285179.270 ops/s
# Warmup Iteration  24: 284561.557 ops/s
# Warmup Iteration  25: 285276.360 ops/s
# Warmup Iteration  26: 284928.518 ops/s
# Warmup Iteration  27: 285519.504 ops/s
# Warmup Iteration  28: 285305.080 ops/s
# Warmup Iteration  29: 285529.740 ops/s
# Warmup Iteration  30: 285318.421 ops/s
Iteration   1: 284736.963 ops/s
Iteration   2: 285519.223 ops/s
Iteration   3: 285035.415 ops/s
Iteration   4: 285503.798 ops/s
Iteration   5: 284806.610 ops/s
Iteration   6: 285496.100 ops/s
Iteration   7: 285728.264 ops/s
Iteration   8: 285734.070 ops/s
Iteration   9: 284609.249 ops/s
Iteration  10: 285282.658 ops/s
Iteration  11: 286120.434 ops/s
Iteration  12: 285679.335 ops/s
Iteration  13: 285600.322 ops/s
Iteration  14: 285035.969 ops/s
Iteration  15: 285971.087 ops/s
Iteration  16: 285345.083 ops/s
Iteration  17: 283996.050 ops/s
Iteration  18: 284491.597 ops/s
Iteration  19: 283830.267 ops/s
Iteration  20: 285017.784 ops/s
Iteration  21: 285885.487 ops/s
Iteration  22: 285544.752 ops/s
Iteration  23: 285226.759 ops/s
Iteration  24: 285672.162 ops/s
Iteration  25: 284396.036 ops/s
Iteration  26: 284447.015 ops/s
Iteration  27: 285204.971 ops/s
Iteration  28: 286160.356 ops/s
Iteration  29: 285067.522 ops/s
Iteration  30: 285618.108 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_reject":
  285225.448 ±(99.9%) 401.245 ops/s [Average]
  (min, avg, max) = (283830.267, 285225.448, 286160.356), stdev = 600.565
  CI (99.9%): [284824.203, 285626.693] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_reject  thrpt   30  285225.448 ± 401.245  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 219750.052 ops/s
# Warmup Iteration   2: 423272.153 ops/s
# Warmup Iteration   3: 492220.526 ops/s
# Warmup Iteration   4: 493912.211 ops/s
# Warmup Iteration   5: 496135.194 ops/s
# Warmup Iteration   6: 420457.357 ops/s
# Warmup Iteration   7: 496585.973 ops/s
# Warmup Iteration   8: 498048.422 ops/s
# Warmup Iteration   9: 497119.593 ops/s
# Warmup Iteration  10: 496899.097 ops/s
# Warmup Iteration  11: 496798.111 ops/s
# Warmup Iteration  12: 496469.099 ops/s
# Warmup Iteration  13: 495842.228 ops/s
# Warmup Iteration  14: 497308.543 ops/s
# Warmup Iteration  15: 496862.614 ops/s
# Warmup Iteration  16: 495527.422 ops/s
# Warmup Iteration  17: 497659.580 ops/s
# Warmup Iteration  18: 497424.906 ops/s
# Warmup Iteration  19: 496598.911 ops/s
# Warmup Iteration  20: 496584.464 ops/s
# Warmup Iteration  21: 497062.445 ops/s
# Warmup Iteration  22: 497233.565 ops/s
# Warmup Iteration  23: 497025.043 ops/s
# Warmup Iteration  24: 497553.604 ops/s
# Warmup Iteration  25: 497052.222 ops/s
# Warmup Iteration  26: 497351.054 ops/s
# Warmup Iteration  27: 496844.569 ops/s
# Warmup Iteration  28: 498154.628 ops/s
# Warmup Iteration  29: 497006.996 ops/s
# Warmup Iteration  30: 498216.296 ops/s
Iteration   1: 496918.787 ops/s
Iteration   2: 497898.343 ops/s
Iteration   3: 497573.219 ops/s
Iteration   4: 497090.751 ops/s
Iteration   5: 495919.745 ops/s
Iteration   6: 496873.415 ops/s
Iteration   7: 498185.768 ops/s
Iteration   8: 496929.809 ops/s
Iteration   9: 496711.864 ops/s
Iteration  10: 496548.790 ops/s
Iteration  11: 497520.870 ops/s
Iteration  12: 496302.336 ops/s
Iteration  13: 497353.473 ops/s
Iteration  14: 498755.937 ops/s
Iteration  15: 495556.793 ops/s
Iteration  16: 497919.423 ops/s
Iteration  17: 496775.330 ops/s
Iteration  18: 496237.448 ops/s
Iteration  19: 497068.490 ops/s
Iteration  20: 495155.358 ops/s
Iteration  21: 498161.818 ops/s
Iteration  22: 496915.816 ops/s
Iteration  23: 497953.633 ops/s
Iteration  24: 496753.863 ops/s
Iteration  25: 497437.254 ops/s
Iteration  26: 497762.329 ops/s
Iteration  27: 495897.368 ops/s
Iteration  28: 497727.627 ops/s
Iteration  29: 496823.216 ops/s
Iteration  30: 495431.844 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_rejectWith":
  497005.357 ±(99.9%) 585.857 ops/s [Average]
  (min, avg, max) = (495155.358, 497005.357, 498755.937), stdev = 876.884
  CI (99.9%): [496419.500, 497591.214] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_rejectWith  thrpt   30  497005.357 ± 585.857  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 225403.076 ops/s
# Warmup Iteration   2: 417415.632 ops/s
# Warmup Iteration   3: 491177.326 ops/s
# Warmup Iteration   4: 490023.729 ops/s
# Warmup Iteration   5: 491171.753 ops/s
# Warmup Iteration   6: 415279.279 ops/s
# Warmup Iteration   7: 490756.071 ops/s
# Warmup Iteration   8: 490389.073 ops/s
# Warmup Iteration   9: 491127.224 ops/s
# Warmup Iteration  10: 491277.312 ops/s
# Warmup Iteration  11: 491767.213 ops/s
# Warmup Iteration  12: 489690.169 ops/s
# Warmup Iteration  13: 489977.703 ops/s
# Warmup Iteration  14: 491542.973 ops/s
# Warmup Iteration  15: 490965.226 ops/s
# Warmup Iteration  16: 489471.185 ops/s
# Warmup Iteration  17: 491663.302 ops/s
# Warmup Iteration  18: 490981.356 ops/s
# Warmup Iteration  19: 489197.464 ops/s
# Warmup Iteration  20: 490597.341 ops/s
# Warmup Iteration  21: 489306.845 ops/s
# Warmup Iteration  22: 488016.916 ops/s
# Warmup Iteration  23: 490562.271 ops/s
# Warmup Iteration  24: 489454.687 ops/s
# Warmup Iteration  25: 490506.488 ops/s
# Warmup Iteration  26: 489892.565 ops/s
# Warmup Iteration  27: 490813.617 ops/s
# Warmup Iteration  28: 490592.474 ops/s
# Warmup Iteration  29: 491105.611 ops/s
# Warmup Iteration  30: 490932.852 ops/s
Iteration   1: 489478.807 ops/s
Iteration   2: 489424.309 ops/s
Iteration   3: 491537.981 ops/s
Iteration   4: 489711.574 ops/s
Iteration   5: 487441.946 ops/s
Iteration   6: 491742.515 ops/s
Iteration   7: 489972.091 ops/s
Iteration   8: 490986.196 ops/s
Iteration   9: 489725.194 ops/s
Iteration  10: 491056.111 ops/s
Iteration  11: 489156.725 ops/s
Iteration  12: 490898.177 ops/s
Iteration  13: 491366.747 ops/s
Iteration  14: 491635.633 ops/s
Iteration  15: 491579.003 ops/s
Iteration  16: 490971.477 ops/s
Iteration  17: 491497.321 ops/s
Iteration  18: 491865.610 ops/s
Iteration  19: 491822.288 ops/s
Iteration  20: 490927.011 ops/s
Iteration  21: 491136.485 ops/s
Iteration  22: 490222.336 ops/s
Iteration  23: 491131.499 ops/s
Iteration  24: 491582.723 ops/s
Iteration  25: 489286.343 ops/s
Iteration  26: 491912.746 ops/s
Iteration  27: 490047.055 ops/s
Iteration  28: 491927.489 ops/s
Iteration  29: 489130.310 ops/s
Iteration  30: 492008.060 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_rejectWith_target":
  490706.059 ±(99.9%) 755.082 ops/s [Average]
  (min, avg, max) = (487441.946, 490706.059, 492008.060), stdev = 1130.172
  CI (99.9%): [489950.976, 491461.141] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_rejectWith_target  thrpt   30  490706.059 ± 755.082  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 428942.882 ops/s
# Warmup Iteration   2: 817733.846 ops/s
# Warmup Iteration   3: 944280.322 ops/s
# Warmup Iteration   4: 958316.468 ops/s
# Warmup Iteration   5: 910841.980 ops/s
# Warmup Iteration   6: 839830.615 ops/s
# Warmup Iteration   7: 958905.732 ops/s
# Warmup Iteration   8: 960175.373 ops/s
# Warmup Iteration   9: 961309.634 ops/s
# Warmup Iteration  10: 959018.842 ops/s
# Warmup Iteration  11: 957330.088 ops/s
# Warmup Iteration  12: 960223.446 ops/s
# Warmup Iteration  13: 960783.662 ops/s
# Warmup Iteration  14: 961361.024 ops/s
# Warmup Iteration  15: 959718.915 ops/s
# Warmup Iteration  16: 957128.953 ops/s
# Warmup Iteration  17: 961208.591 ops/s
# Warmup Iteration  18: 958452.937 ops/s
# Warmup Iteration  19: 957685.926 ops/s
# Warmup Iteration  20: 960712.010 ops/s
# Warmup Iteration  21: 961816.653 ops/s
# Warmup Iteration  22: 961572.632 ops/s
# Warmup Iteration  23: 959643.479 ops/s
# Warmup Iteration  24: 960659.603 ops/s
# Warmup Iteration  25: 960464.836 ops/s
# Warmup Iteration  26: 959842.381 ops/s
# Warmup Iteration  27: 959768.051 ops/s
# Warmup Iteration  28: 960328.049 ops/s
# Warmup Iteration  29: 961357.993 ops/s
# Warmup Iteration  30: 961034.971 ops/s
Iteration   1: 959888.875 ops/s
Iteration   2: 958508.312 ops/s
Iteration   3: 959736.433 ops/s
Iteration   4: 960289.547 ops/s
Iteration   5: 960641.993 ops/s
Iteration   6: 959167.314 ops/s
Iteration   7: 960105.979 ops/s
Iteration   8: 963482.262 ops/s
Iteration   9: 959538.492 ops/s
Iteration  10: 960468.168 ops/s
Iteration  11: 959586.215 ops/s
Iteration  12: 959982.474 ops/s
Iteration  13: 962415.240 ops/s
Iteration  14: 959842.503 ops/s
Iteration  15: 961871.904 ops/s
Iteration  16: 960084.141 ops/s
Iteration  17: 959594.765 ops/s
Iteration  18: 961505.690 ops/s
Iteration  19: 962017.420 ops/s
Iteration  20: 960426.221 ops/s
Iteration  21: 960486.734 ops/s
Iteration  22: 958807.577 ops/s
Iteration  23: 959401.805 ops/s
Iteration  24: 961937.381 ops/s
Iteration  25: 960396.677 ops/s
Iteration  26: 960329.083 ops/s
Iteration  27: 959529.183 ops/s
Iteration  28: 960360.682 ops/s
Iteration  29: 960674.889 ops/s
Iteration  30: 955764.816 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_removeAll":
  960228.093 ±(99.9%) 924.338 ops/s [Average]
  (min, avg, max) = (955764.816, 960228.093, 963482.262), stdev = 1383.506
  CI (99.9%): [959303.754, 961152.431] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_removeAll  thrpt   30  960228.093 ± 924.338  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 225833.521 ops/s
# Warmup Iteration   2: 406808.537 ops/s
# Warmup Iteration   3: 502026.576 ops/s
# Warmup Iteration   4: 504929.127 ops/s
# Warmup Iteration   5: 504196.770 ops/s
# Warmup Iteration   6: 420901.350 ops/s
# Warmup Iteration   7: 505777.964 ops/s
# Warmup Iteration   8: 505330.362 ops/s
# Warmup Iteration   9: 504772.715 ops/s
# Warmup Iteration  10: 505562.880 ops/s
# Warmup Iteration  11: 504164.042 ops/s
# Warmup Iteration  12: 505341.886 ops/s
# Warmup Iteration  13: 504517.839 ops/s
# Warmup Iteration  14: 505496.284 ops/s
# Warmup Iteration  15: 505693.292 ops/s
# Warmup Iteration  16: 505065.564 ops/s
# Warmup Iteration  17: 501971.857 ops/s
# Warmup Iteration  18: 500983.298 ops/s
# Warmup Iteration  19: 502963.493 ops/s
# Warmup Iteration  20: 502634.930 ops/s
# Warmup Iteration  21: 502664.642 ops/s
# Warmup Iteration  22: 502744.673 ops/s
# Warmup Iteration  23: 502213.712 ops/s
# Warmup Iteration  24: 502821.578 ops/s
# Warmup Iteration  25: 501010.880 ops/s
# Warmup Iteration  26: 500037.289 ops/s
# Warmup Iteration  27: 501808.728 ops/s
# Warmup Iteration  28: 502281.181 ops/s
# Warmup Iteration  29: 502878.620 ops/s
# Warmup Iteration  30: 503193.379 ops/s
Iteration   1: 503233.144 ops/s
Iteration   2: 501114.243 ops/s
Iteration   3: 502052.276 ops/s
Iteration   4: 501952.031 ops/s
Iteration   5: 503812.315 ops/s
Iteration   6: 500343.681 ops/s
Iteration   7: 501293.862 ops/s
Iteration   8: 501587.717 ops/s
Iteration   9: 502913.229 ops/s
Iteration  10: 501812.209 ops/s
Iteration  11: 502893.724 ops/s
Iteration  12: 501860.915 ops/s
Iteration  13: 502531.813 ops/s
Iteration  14: 501518.990 ops/s
Iteration  15: 501532.726 ops/s
Iteration  16: 499532.713 ops/s
Iteration  17: 501751.728 ops/s
Iteration  18: 500606.144 ops/s
Iteration  19: 501253.919 ops/s
Iteration  20: 502920.026 ops/s
Iteration  21: 500951.457 ops/s
Iteration  22: 500394.645 ops/s
Iteration  23: 500547.163 ops/s
Iteration  24: 502019.520 ops/s
Iteration  25: 502682.363 ops/s
Iteration  26: 503069.529 ops/s
Iteration  27: 503162.163 ops/s
Iteration  28: 503667.851 ops/s
Iteration  29: 501022.351 ops/s
Iteration  30: 502238.830 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_removeAllIterable":
  501875.776 ±(99.9%) 712.714 ops/s [Average]
  (min, avg, max) = (499532.713, 501875.776, 503812.315), stdev = 1066.757
  CI (99.9%): [501163.062, 502588.490] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_removeAllIterable  thrpt   30  501875.776 ± 712.714  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 344884.649 ops/s
# Warmup Iteration   2: 551890.728 ops/s
# Warmup Iteration   3: 694417.416 ops/s
# Warmup Iteration   4: 694002.449 ops/s
# Warmup Iteration   5: 697903.555 ops/s
# Warmup Iteration   6: 697296.451 ops/s
# Warmup Iteration   7: 578418.404 ops/s
# Warmup Iteration   8: 690018.328 ops/s
# Warmup Iteration   9: 693164.739 ops/s
# Warmup Iteration  10: 691473.053 ops/s
# Warmup Iteration  11: 692242.485 ops/s
# Warmup Iteration  12: 693589.323 ops/s
# Warmup Iteration  13: 692322.596 ops/s
# Warmup Iteration  14: 689678.425 ops/s
# Warmup Iteration  15: 693498.424 ops/s
# Warmup Iteration  16: 693834.956 ops/s
# Warmup Iteration  17: 694683.189 ops/s
# Warmup Iteration  18: 689203.612 ops/s
# Warmup Iteration  19: 693860.268 ops/s
# Warmup Iteration  20: 693866.919 ops/s
# Warmup Iteration  21: 692842.960 ops/s
# Warmup Iteration  22: 692268.817 ops/s
# Warmup Iteration  23: 691440.671 ops/s
# Warmup Iteration  24: 692441.265 ops/s
# Warmup Iteration  25: 693547.198 ops/s
# Warmup Iteration  26: 692944.396 ops/s
# Warmup Iteration  27: 693963.233 ops/s
# Warmup Iteration  28: 692466.687 ops/s
# Warmup Iteration  29: 692691.867 ops/s
# Warmup Iteration  30: 693397.627 ops/s
Iteration   1: 694088.231 ops/s
Iteration   2: 692247.745 ops/s
Iteration   3: 693715.563 ops/s
Iteration   4: 693182.138 ops/s
Iteration   5: 694385.062 ops/s
Iteration   6: 692848.733 ops/s
Iteration   7: 692430.343 ops/s
Iteration   8: 691571.628 ops/s
Iteration   9: 693635.880 ops/s
Iteration  10: 690187.456 ops/s
Iteration  11: 694373.531 ops/s
Iteration  12: 689720.356 ops/s
Iteration  13: 691581.259 ops/s
Iteration  14: 692356.043 ops/s
Iteration  15: 693325.248 ops/s
Iteration  16: 693351.844 ops/s
Iteration  17: 689139.195 ops/s
Iteration  18: 691277.022 ops/s
Iteration  19: 690329.339 ops/s
Iteration  20: 693075.891 ops/s
Iteration  21: 694878.623 ops/s
Iteration  22: 693649.314 ops/s
Iteration  23: 694074.891 ops/s
Iteration  24: 694049.830 ops/s
Iteration  25: 689269.450 ops/s
Iteration  26: 692989.357 ops/s
Iteration  27: 690871.550 ops/s
Iteration  28: 694787.341 ops/s
Iteration  29: 692908.422 ops/s
Iteration  30: 693130.864 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_removeIf":
  692581.072 ±(99.9%) 1094.588 ops/s [Average]
  (min, avg, max) = (689139.195, 692581.072, 694878.623), stdev = 1638.327
  CI (99.9%): [691486.484, 693675.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_removeIf  thrpt   30  692581.072 ± 1094.588  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 209972.437 ops/s
# Warmup Iteration   2: 328044.709 ops/s
# Warmup Iteration   3: 417443.507 ops/s
# Warmup Iteration   4: 419901.757 ops/s
# Warmup Iteration   5: 422162.208 ops/s
# Warmup Iteration   6: 420686.720 ops/s
# Warmup Iteration   7: 356047.302 ops/s
# Warmup Iteration   8: 422668.887 ops/s
# Warmup Iteration   9: 422712.287 ops/s
# Warmup Iteration  10: 421355.211 ops/s
# Warmup Iteration  11: 420429.502 ops/s
# Warmup Iteration  12: 422006.147 ops/s
# Warmup Iteration  13: 422608.340 ops/s
# Warmup Iteration  14: 422361.028 ops/s
# Warmup Iteration  15: 421015.270 ops/s
# Warmup Iteration  16: 422146.531 ops/s
# Warmup Iteration  17: 421536.693 ops/s
# Warmup Iteration  18: 420790.341 ops/s
# Warmup Iteration  19: 421045.015 ops/s
# Warmup Iteration  20: 421745.789 ops/s
# Warmup Iteration  21: 420818.043 ops/s
# Warmup Iteration  22: 420783.320 ops/s
# Warmup Iteration  23: 421877.100 ops/s
# Warmup Iteration  24: 421195.117 ops/s
# Warmup Iteration  25: 420838.698 ops/s
# Warmup Iteration  26: 421380.393 ops/s
# Warmup Iteration  27: 421547.504 ops/s
# Warmup Iteration  28: 422101.132 ops/s
# Warmup Iteration  29: 421763.072 ops/s
# Warmup Iteration  30: 422565.740 ops/s
Iteration   1: 422418.105 ops/s
Iteration   2: 421483.371 ops/s
Iteration   3: 421251.946 ops/s
Iteration   4: 421650.812 ops/s
Iteration   5: 420803.539 ops/s
Iteration   6: 420970.655 ops/s
Iteration   7: 421791.959 ops/s
Iteration   8: 421214.215 ops/s
Iteration   9: 421649.233 ops/s
Iteration  10: 422435.907 ops/s
Iteration  11: 421573.062 ops/s
Iteration  12: 420686.348 ops/s
Iteration  13: 421958.212 ops/s
Iteration  14: 422223.588 ops/s
Iteration  15: 421502.582 ops/s
Iteration  16: 421878.961 ops/s
Iteration  17: 421813.639 ops/s
Iteration  18: 420745.907 ops/s
Iteration  19: 420755.793 ops/s
Iteration  20: 421536.423 ops/s
Iteration  21: 421438.311 ops/s
Iteration  22: 420050.065 ops/s
Iteration  23: 422155.433 ops/s
Iteration  24: 420587.131 ops/s
Iteration  25: 422479.623 ops/s
Iteration  26: 421792.597 ops/s
Iteration  27: 423777.899 ops/s
Iteration  28: 422130.981 ops/s
Iteration  29: 420485.886 ops/s
Iteration  30: 421312.618 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_removeIfWith":
  421551.827 ±(99.9%) 504.090 ops/s [Average]
  (min, avg, max) = (420050.065, 421551.827, 423777.899), stdev = 754.499
  CI (99.9%): [421047.736, 422055.917] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_removeIfWith  thrpt   30  421551.827 ± 504.090  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 166325.459 ops/s
# Warmup Iteration   2: 325246.186 ops/s
# Warmup Iteration   3: 422709.259 ops/s
# Warmup Iteration   4: 424489.296 ops/s
# Warmup Iteration   5: 424581.701 ops/s
# Warmup Iteration   6: 358685.259 ops/s
# Warmup Iteration   7: 424559.039 ops/s
# Warmup Iteration   8: 425108.859 ops/s
# Warmup Iteration   9: 423646.894 ops/s
# Warmup Iteration  10: 424437.243 ops/s
# Warmup Iteration  11: 424671.694 ops/s
# Warmup Iteration  12: 424529.358 ops/s
# Warmup Iteration  13: 424532.732 ops/s
# Warmup Iteration  14: 423979.459 ops/s
# Warmup Iteration  15: 424219.781 ops/s
# Warmup Iteration  16: 423768.732 ops/s
# Warmup Iteration  17: 421278.666 ops/s
# Warmup Iteration  18: 423514.114 ops/s
# Warmup Iteration  19: 422463.708 ops/s
# Warmup Iteration  20: 424486.088 ops/s
# Warmup Iteration  21: 424393.430 ops/s
# Warmup Iteration  22: 423848.164 ops/s
# Warmup Iteration  23: 423659.121 ops/s
# Warmup Iteration  24: 424833.034 ops/s
# Warmup Iteration  25: 423211.700 ops/s
# Warmup Iteration  26: 424734.598 ops/s
# Warmup Iteration  27: 424145.679 ops/s
# Warmup Iteration  28: 423693.763 ops/s
# Warmup Iteration  29: 424069.123 ops/s
# Warmup Iteration  30: 424019.941 ops/s
Iteration   1: 423797.212 ops/s
Iteration   2: 423659.336 ops/s
Iteration   3: 425734.640 ops/s
Iteration   4: 422829.267 ops/s
Iteration   5: 425140.802 ops/s
Iteration   6: 424069.313 ops/s
Iteration   7: 425188.391 ops/s
Iteration   8: 423036.269 ops/s
Iteration   9: 424537.242 ops/s
Iteration  10: 423293.017 ops/s
Iteration  11: 421634.300 ops/s
Iteration  12: 423371.392 ops/s
Iteration  13: 423882.884 ops/s
Iteration  14: 423834.685 ops/s
Iteration  15: 423143.596 ops/s
Iteration  16: 424063.441 ops/s
Iteration  17: 423286.767 ops/s
Iteration  18: 425508.947 ops/s
Iteration  19: 423722.804 ops/s
Iteration  20: 424969.756 ops/s
Iteration  21: 424655.862 ops/s
Iteration  22: 424702.566 ops/s
Iteration  23: 423562.828 ops/s
Iteration  24: 425080.212 ops/s
Iteration  25: 424001.743 ops/s
Iteration  26: 424039.535 ops/s
Iteration  27: 425145.665 ops/s
Iteration  28: 424383.266 ops/s
Iteration  29: 425280.085 ops/s
Iteration  30: 423704.885 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_removeObject":
  424108.690 ±(99.9%) 616.090 ops/s [Average]
  (min, avg, max) = (421634.300, 424108.690, 425734.640), stdev = 922.134
  CI (99.9%): [423492.600, 424724.780] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_removeObject  thrpt   30  424108.690 ± 616.090  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_removeOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_removeOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 89030.643 ops/s
# Warmup Iteration   2: 164815.766 ops/s
# Warmup Iteration   3: 227375.783 ops/s
# Warmup Iteration   4: 228449.883 ops/s
# Warmup Iteration   5: 228517.829 ops/s
# Warmup Iteration   6: 192216.014 ops/s
# Warmup Iteration   7: 229094.582 ops/s
# Warmup Iteration   8: 229131.132 ops/s
# Warmup Iteration   9: 228080.751 ops/s
# Warmup Iteration  10: 228996.870 ops/s
# Warmup Iteration  11: 227301.943 ops/s
# Warmup Iteration  12: 229323.594 ops/s
# Warmup Iteration  13: 229194.916 ops/s
# Warmup Iteration  14: 228574.124 ops/s
# Warmup Iteration  15: 229062.387 ops/s
# Warmup Iteration  16: 228703.293 ops/s
# Warmup Iteration  17: 228919.249 ops/s
# Warmup Iteration  18: 229074.935 ops/s
# Warmup Iteration  19: 228892.096 ops/s
# Warmup Iteration  20: 228528.754 ops/s
# Warmup Iteration  21: 228583.986 ops/s
# Warmup Iteration  22: 229208.279 ops/s
# Warmup Iteration  23: 228848.752 ops/s
# Warmup Iteration  24: 228967.624 ops/s
# Warmup Iteration  25: 229029.204 ops/s
# Warmup Iteration  26: 229040.547 ops/s
# Warmup Iteration  27: 227845.338 ops/s
# Warmup Iteration  28: 228912.945 ops/s
# Warmup Iteration  29: 229107.105 ops/s
# Warmup Iteration  30: 228959.386 ops/s
Iteration   1: 229236.021 ops/s
Iteration   2: 229141.839 ops/s
Iteration   3: 228856.541 ops/s
Iteration   4: 228810.307 ops/s
Iteration   5: 228851.273 ops/s
Iteration   6: 229212.538 ops/s
Iteration   7: 228865.316 ops/s
Iteration   8: 229166.245 ops/s
Iteration   9: 229019.899 ops/s
Iteration  10: 228692.170 ops/s
Iteration  11: 228948.809 ops/s
Iteration  12: 228796.073 ops/s
Iteration  13: 229020.113 ops/s
Iteration  14: 228774.650 ops/s
Iteration  15: 228701.689 ops/s
Iteration  16: 229083.844 ops/s
Iteration  17: 229221.095 ops/s
Iteration  18: 228606.394 ops/s
Iteration  19: 228542.099 ops/s
Iteration  20: 228482.315 ops/s
Iteration  21: 229403.768 ops/s
Iteration  22: 229642.442 ops/s
Iteration  23: 228919.334 ops/s
Iteration  24: 228846.663 ops/s
Iteration  25: 229310.664 ops/s
Iteration  26: 228855.902 ops/s
Iteration  27: 228026.020 ops/s
Iteration  28: 228964.449 ops/s
Iteration  29: 228867.523 ops/s
Iteration  30: 228641.870 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_removeOccurrences":
  228916.929 ±(99.9%) 208.535 ops/s [Average]
  (min, avg, max) = (228026.020, 228916.929, 229642.442), stdev = 312.125
  CI (99.9%): [228708.394, 229125.464] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_removeOccurrences  thrpt   30  228916.929 ± 208.535  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_removeOccurrences_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_removeOccurrences_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 683469.085 ops/s
# Warmup Iteration   2: 724628.095 ops/s
# Warmup Iteration   3: 910694.027 ops/s
# Warmup Iteration   4: 944510.229 ops/s
# Warmup Iteration   5: 945387.262 ops/s
# Warmup Iteration   6: 938845.013 ops/s
# Warmup Iteration   7: 946007.583 ops/s
# Warmup Iteration   8: 948085.954 ops/s
# Warmup Iteration   9: 946773.622 ops/s
# Warmup Iteration  10: 945104.152 ops/s
# Warmup Iteration  11: 943816.969 ops/s
# Warmup Iteration  12: 931782.020 ops/s
# Warmup Iteration  13: 808249.572 ops/s
# Warmup Iteration  14: 948628.906 ops/s
# Warmup Iteration  15: 944677.130 ops/s
# Warmup Iteration  16: 948169.552 ops/s
# Warmup Iteration  17: 997645.960 ops/s
# Warmup Iteration  18: 999032.682 ops/s
# Warmup Iteration  19: 1000842.599 ops/s
# Warmup Iteration  20: 1000063.932 ops/s
# Warmup Iteration  21: 1000843.354 ops/s
# Warmup Iteration  22: 1001490.637 ops/s
# Warmup Iteration  23: 1003189.924 ops/s
# Warmup Iteration  24: 1003282.472 ops/s
# Warmup Iteration  25: 1001021.821 ops/s
# Warmup Iteration  26: 998603.864 ops/s
# Warmup Iteration  27: 1003068.000 ops/s
# Warmup Iteration  28: 999165.251 ops/s
# Warmup Iteration  29: 1001876.403 ops/s
# Warmup Iteration  30: 1002367.011 ops/s
Iteration   1: 1001876.274 ops/s
Iteration   2: 994680.692 ops/s
Iteration   3: 999543.087 ops/s
Iteration   4: 998509.513 ops/s
Iteration   5: 1003397.237 ops/s
Iteration   6: 997473.834 ops/s
Iteration   7: 998917.259 ops/s
Iteration   8: 992371.489 ops/s
Iteration   9: 1000999.030 ops/s
Iteration  10: 1000569.495 ops/s
Iteration  11: 1001156.243 ops/s
Iteration  12: 1000576.738 ops/s
Iteration  13: 999981.240 ops/s
Iteration  14: 1003990.049 ops/s
Iteration  15: 997870.260 ops/s
Iteration  16: 990475.518 ops/s
Iteration  17: 995800.503 ops/s
Iteration  18: 1000691.669 ops/s
Iteration  19: 998468.323 ops/s
Iteration  20: 1000619.622 ops/s
Iteration  21: 1003660.441 ops/s
Iteration  22: 1001973.760 ops/s
Iteration  23: 1002813.355 ops/s
Iteration  24: 992158.768 ops/s
Iteration  25: 997881.909 ops/s
Iteration  26: 1003642.448 ops/s
Iteration  27: 1001507.339 ops/s
Iteration  28: 1001258.717 ops/s
Iteration  29: 1003551.526 ops/s
Iteration  30: 1002528.669 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_removeOccurrences_throws":
  999631.500 ±(99.9%) 2385.743 ops/s [Average]
  (min, avg, max) = (990475.518, 999631.500, 1003990.049), stdev = 3570.868
  CI (99.9%): [997245.757, 1002017.243] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_removeOccurrences_throws  thrpt   30  999631.500 ± 2385.743  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 132043.923 ops/s
# Warmup Iteration   2: 220147.152 ops/s
# Warmup Iteration   3: 294446.370 ops/s
# Warmup Iteration   4: 296082.509 ops/s
# Warmup Iteration   5: 295863.926 ops/s
# Warmup Iteration   6: 295122.029 ops/s
# Warmup Iteration   7: 296143.534 ops/s
# Warmup Iteration   8: 247206.035 ops/s
# Warmup Iteration   9: 295171.577 ops/s
# Warmup Iteration  10: 296193.859 ops/s
# Warmup Iteration  11: 296156.929 ops/s
# Warmup Iteration  12: 296132.186 ops/s
# Warmup Iteration  13: 296193.899 ops/s
# Warmup Iteration  14: 296185.855 ops/s
# Warmup Iteration  15: 296170.827 ops/s
# Warmup Iteration  16: 296067.212 ops/s
# Warmup Iteration  17: 296499.183 ops/s
# Warmup Iteration  18: 295233.063 ops/s
# Warmup Iteration  19: 293957.162 ops/s
# Warmup Iteration  20: 294163.305 ops/s
# Warmup Iteration  21: 295577.974 ops/s
# Warmup Iteration  22: 295678.259 ops/s
# Warmup Iteration  23: 295397.488 ops/s
# Warmup Iteration  24: 295733.334 ops/s
# Warmup Iteration  25: 295282.555 ops/s
# Warmup Iteration  26: 294079.894 ops/s
# Warmup Iteration  27: 295114.937 ops/s
# Warmup Iteration  28: 296223.366 ops/s
# Warmup Iteration  29: 295832.885 ops/s
# Warmup Iteration  30: 295703.471 ops/s
Iteration   1: 295069.185 ops/s
Iteration   2: 295453.628 ops/s
Iteration   3: 295988.127 ops/s
Iteration   4: 294981.364 ops/s
Iteration   5: 295651.930 ops/s
Iteration   6: 296133.464 ops/s
Iteration   7: 295971.730 ops/s
Iteration   8: 294414.188 ops/s
Iteration   9: 295156.483 ops/s
Iteration  10: 294862.885 ops/s
Iteration  11: 295243.894 ops/s
Iteration  12: 295915.930 ops/s
Iteration  13: 295215.871 ops/s
Iteration  14: 295630.458 ops/s
Iteration  15: 295946.780 ops/s
Iteration  16: 294989.806 ops/s
Iteration  17: 295787.934 ops/s
Iteration  18: 295174.664 ops/s
Iteration  19: 296046.387 ops/s
Iteration  20: 296027.744 ops/s
Iteration  21: 295363.102 ops/s
Iteration  22: 296224.903 ops/s
Iteration  23: 294779.365 ops/s
Iteration  24: 295647.076 ops/s
Iteration  25: 295772.225 ops/s
Iteration  26: 296292.811 ops/s
Iteration  27: 296456.531 ops/s
Iteration  28: 293315.489 ops/s
Iteration  29: 294623.349 ops/s
Iteration  30: 295035.308 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_retainAll":
  295439.087 ±(99.9%) 446.547 ops/s [Average]
  (min, avg, max) = (293315.489, 295439.087, 296456.531), stdev = 668.371
  CI (99.9%): [294992.540, 295885.634] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_retainAll  thrpt   30  295439.087 ± 446.547  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 188791.433 ops/s
# Warmup Iteration   2: 304402.961 ops/s
# Warmup Iteration   3: 398544.043 ops/s
# Warmup Iteration   4: 400572.109 ops/s
# Warmup Iteration   5: 400488.505 ops/s
# Warmup Iteration   6: 401258.869 ops/s
# Warmup Iteration   7: 395544.820 ops/s
# Warmup Iteration   8: 340647.326 ops/s
# Warmup Iteration   9: 400300.971 ops/s
# Warmup Iteration  10: 400630.978 ops/s
# Warmup Iteration  11: 400535.546 ops/s
# Warmup Iteration  12: 400968.609 ops/s
# Warmup Iteration  13: 399947.874 ops/s
# Warmup Iteration  14: 400522.775 ops/s
# Warmup Iteration  15: 400765.875 ops/s
# Warmup Iteration  16: 399897.310 ops/s
# Warmup Iteration  17: 400217.920 ops/s
# Warmup Iteration  18: 400278.755 ops/s
# Warmup Iteration  19: 400278.741 ops/s
# Warmup Iteration  20: 400442.841 ops/s
# Warmup Iteration  21: 400557.153 ops/s
# Warmup Iteration  22: 400979.282 ops/s
# Warmup Iteration  23: 400860.396 ops/s
# Warmup Iteration  24: 400646.942 ops/s
# Warmup Iteration  25: 399515.489 ops/s
# Warmup Iteration  26: 400529.146 ops/s
# Warmup Iteration  27: 400408.309 ops/s
# Warmup Iteration  28: 400622.550 ops/s
# Warmup Iteration  29: 399470.116 ops/s
# Warmup Iteration  30: 401221.192 ops/s
Iteration   1: 399542.581 ops/s
Iteration   2: 400848.596 ops/s
Iteration   3: 399820.501 ops/s
Iteration   4: 401330.508 ops/s
Iteration   5: 400104.592 ops/s
Iteration   6: 399666.507 ops/s
Iteration   7: 399376.494 ops/s
Iteration   8: 399679.082 ops/s
Iteration   9: 400755.612 ops/s
Iteration  10: 400526.397 ops/s
Iteration  11: 400972.077 ops/s
Iteration  12: 400808.174 ops/s
Iteration  13: 399325.737 ops/s
Iteration  14: 401211.059 ops/s
Iteration  15: 399588.834 ops/s
Iteration  16: 400954.463 ops/s
Iteration  17: 399393.823 ops/s
Iteration  18: 400722.968 ops/s
Iteration  19: 399610.794 ops/s
Iteration  20: 400610.072 ops/s
Iteration  21: 400742.836 ops/s
Iteration  22: 399668.271 ops/s
Iteration  23: 400552.116 ops/s
Iteration  24: 401064.496 ops/s
Iteration  25: 399223.632 ops/s
Iteration  26: 399927.650 ops/s
Iteration  27: 400097.333 ops/s
Iteration  28: 400798.106 ops/s
Iteration  29: 399957.630 ops/s
Iteration  30: 401367.337 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_retainAllIterable":
  400274.943 ±(99.9%) 450.152 ops/s [Average]
  (min, avg, max) = (399223.632, 400274.943, 401367.337), stdev = 673.766
  CI (99.9%): [399824.791, 400725.094] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_retainAllIterable  thrpt   30  400274.943 ± 450.152  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 109559.058 ops/s
# Warmup Iteration   2: 206027.898 ops/s
# Warmup Iteration   3: 243341.175 ops/s
# Warmup Iteration   4: 245274.775 ops/s
# Warmup Iteration   5: 244589.793 ops/s
# Warmup Iteration   6: 205827.013 ops/s
# Warmup Iteration   7: 244668.926 ops/s
# Warmup Iteration   8: 244608.281 ops/s
# Warmup Iteration   9: 244799.239 ops/s
# Warmup Iteration  10: 244315.902 ops/s
# Warmup Iteration  11: 245262.836 ops/s
# Warmup Iteration  12: 244798.364 ops/s
# Warmup Iteration  13: 245220.071 ops/s
# Warmup Iteration  14: 244232.507 ops/s
# Warmup Iteration  15: 244697.364 ops/s
# Warmup Iteration  16: 244591.531 ops/s
# Warmup Iteration  17: 244271.403 ops/s
# Warmup Iteration  18: 245280.592 ops/s
# Warmup Iteration  19: 245027.632 ops/s
# Warmup Iteration  20: 245681.922 ops/s
# Warmup Iteration  21: 244675.167 ops/s
# Warmup Iteration  22: 244647.657 ops/s
# Warmup Iteration  23: 244611.906 ops/s
# Warmup Iteration  24: 245089.472 ops/s
# Warmup Iteration  25: 244599.099 ops/s
# Warmup Iteration  26: 245236.202 ops/s
# Warmup Iteration  27: 244998.869 ops/s
# Warmup Iteration  28: 245144.187 ops/s
# Warmup Iteration  29: 244923.489 ops/s
# Warmup Iteration  30: 245033.351 ops/s
Iteration   1: 244862.418 ops/s
Iteration   2: 245756.138 ops/s
Iteration   3: 243975.226 ops/s
Iteration   4: 245070.920 ops/s
Iteration   5: 244784.088 ops/s
Iteration   6: 244988.056 ops/s
Iteration   7: 244764.177 ops/s
Iteration   8: 244274.611 ops/s
Iteration   9: 244758.818 ops/s
Iteration  10: 244876.848 ops/s
Iteration  11: 245037.927 ops/s
Iteration  12: 244190.673 ops/s
Iteration  13: 244978.471 ops/s
Iteration  14: 244935.269 ops/s
Iteration  15: 245106.332 ops/s
Iteration  16: 244903.353 ops/s
Iteration  17: 244862.284 ops/s
Iteration  18: 243834.838 ops/s
Iteration  19: 244204.140 ops/s
Iteration  20: 245036.458 ops/s
Iteration  21: 244603.822 ops/s
Iteration  22: 244851.057 ops/s
Iteration  23: 245252.415 ops/s
Iteration  24: 245519.370 ops/s
Iteration  25: 244441.886 ops/s
Iteration  26: 244856.193 ops/s
Iteration  27: 244331.390 ops/s
Iteration  28: 245692.607 ops/s
Iteration  29: 244672.418 ops/s
Iteration  30: 245305.241 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_select":
  244824.248 ±(99.9%) 306.071 ops/s [Average]
  (min, avg, max) = (243834.838, 244824.248, 245756.138), stdev = 458.112
  CI (99.9%): [244518.177, 245130.319] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_select  thrpt   30  244824.248 ± 306.071  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_selectAndRejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_selectAndRejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 729337.536 ops/s
# Warmup Iteration   2: 1737931.525 ops/s
# Warmup Iteration   3: 1792858.053 ops/s
# Warmup Iteration   4: 1491245.453 ops/s
# Warmup Iteration   5: 1781922.238 ops/s
# Warmup Iteration   6: 1788659.799 ops/s
# Warmup Iteration   7: 1786181.804 ops/s
# Warmup Iteration   8: 1791513.045 ops/s
# Warmup Iteration   9: 1793222.021 ops/s
# Warmup Iteration  10: 1786955.927 ops/s
# Warmup Iteration  11: 1791012.810 ops/s
# Warmup Iteration  12: 1792719.949 ops/s
# Warmup Iteration  13: 1790814.296 ops/s
# Warmup Iteration  14: 1793803.894 ops/s
# Warmup Iteration  15: 1791031.559 ops/s
# Warmup Iteration  16: 1790894.055 ops/s
# Warmup Iteration  17: 1796796.723 ops/s
# Warmup Iteration  18: 1798013.529 ops/s
# Warmup Iteration  19: 1794575.876 ops/s
# Warmup Iteration  20: 1795544.511 ops/s
# Warmup Iteration  21: 1795163.052 ops/s
# Warmup Iteration  22: 1786786.358 ops/s
# Warmup Iteration  23: 1794983.436 ops/s
# Warmup Iteration  24: 1794677.151 ops/s
# Warmup Iteration  25: 1794621.876 ops/s
# Warmup Iteration  26: 1796458.217 ops/s
# Warmup Iteration  27: 1794807.323 ops/s
# Warmup Iteration  28: 1792463.008 ops/s
# Warmup Iteration  29: 1792146.692 ops/s
# Warmup Iteration  30: 1796938.956 ops/s
Iteration   1: 1793975.106 ops/s
Iteration   2: 1788092.809 ops/s
Iteration   3: 1793365.115 ops/s
Iteration   4: 1796581.421 ops/s
Iteration   5: 1795951.904 ops/s
Iteration   6: 1794993.360 ops/s
Iteration   7: 1799059.874 ops/s
Iteration   8: 1800411.502 ops/s
Iteration   9: 1792586.709 ops/s
Iteration  10: 1791333.088 ops/s
Iteration  11: 1795195.890 ops/s
Iteration  12: 1793946.112 ops/s
Iteration  13: 1795617.024 ops/s
Iteration  14: 1790856.265 ops/s
Iteration  15: 1796055.229 ops/s
Iteration  16: 1801451.391 ops/s
Iteration  17: 1785717.026 ops/s
Iteration  18: 1790230.310 ops/s
Iteration  19: 1795187.396 ops/s
Iteration  20: 1793589.368 ops/s
Iteration  21: 1792927.066 ops/s
Iteration  22: 1797329.821 ops/s
Iteration  23: 1794867.780 ops/s
Iteration  24: 1800813.849 ops/s
Iteration  25: 1789582.034 ops/s
Iteration  26: 1793101.593 ops/s
Iteration  27: 1754866.355 ops/s
Iteration  28: 1795542.754 ops/s
Iteration  29: 1795317.335 ops/s
Iteration  30: 1796025.593 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_selectAndRejectWith":
  1793152.369 ±(99.9%) 5377.211 ops/s [Average]
  (min, avg, max) = (1754866.355, 1793152.369, 1801451.391), stdev = 8048.358
  CI (99.9%): [1787775.158, 1798529.581] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_selectAndRejectWith  thrpt   30  1793152.369 ± 5377.211  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_selectByOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_selectByOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 240009.292 ops/s
# Warmup Iteration   2: 406940.349 ops/s
# Warmup Iteration   3: 511633.357 ops/s
# Warmup Iteration   4: 507903.208 ops/s
# Warmup Iteration   5: 510603.630 ops/s
# Warmup Iteration   6: 507826.692 ops/s
# Warmup Iteration   7: 428979.466 ops/s
# Warmup Iteration   8: 511247.520 ops/s
# Warmup Iteration   9: 511164.468 ops/s
# Warmup Iteration  10: 510558.045 ops/s
# Warmup Iteration  11: 509713.519 ops/s
# Warmup Iteration  12: 509631.508 ops/s
# Warmup Iteration  13: 510466.699 ops/s
# Warmup Iteration  14: 511112.685 ops/s
# Warmup Iteration  15: 510238.997 ops/s
# Warmup Iteration  16: 510327.769 ops/s
# Warmup Iteration  17: 509927.314 ops/s
# Warmup Iteration  18: 511215.209 ops/s
# Warmup Iteration  19: 509497.073 ops/s
# Warmup Iteration  20: 509920.211 ops/s
# Warmup Iteration  21: 511100.334 ops/s
# Warmup Iteration  22: 511681.705 ops/s
# Warmup Iteration  23: 511067.510 ops/s
# Warmup Iteration  24: 511030.824 ops/s
# Warmup Iteration  25: 511711.541 ops/s
# Warmup Iteration  26: 510433.696 ops/s
# Warmup Iteration  27: 510101.237 ops/s
# Warmup Iteration  28: 511726.690 ops/s
# Warmup Iteration  29: 511442.132 ops/s
# Warmup Iteration  30: 510910.205 ops/s
Iteration   1: 511928.584 ops/s
Iteration   2: 508914.254 ops/s
Iteration   3: 511876.036 ops/s
Iteration   4: 510706.192 ops/s
Iteration   5: 512286.178 ops/s
Iteration   6: 510534.872 ops/s
Iteration   7: 511267.219 ops/s
Iteration   8: 510768.229 ops/s
Iteration   9: 511823.943 ops/s
Iteration  10: 511970.361 ops/s
Iteration  11: 509822.615 ops/s
Iteration  12: 511809.524 ops/s
Iteration  13: 509654.190 ops/s
Iteration  14: 510974.466 ops/s
Iteration  15: 509303.321 ops/s
Iteration  16: 510225.709 ops/s
Iteration  17: 508827.408 ops/s
Iteration  18: 511773.390 ops/s
Iteration  19: 510420.180 ops/s
Iteration  20: 510725.353 ops/s
Iteration  21: 508930.255 ops/s
Iteration  22: 511144.763 ops/s
Iteration  23: 510704.910 ops/s
Iteration  24: 511016.793 ops/s
Iteration  25: 511853.153 ops/s
Iteration  26: 510353.591 ops/s
Iteration  27: 511060.879 ops/s
Iteration  28: 510404.299 ops/s
Iteration  29: 511285.137 ops/s
Iteration  30: 511040.078 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_selectByOccurrences":
  510780.196 ±(99.9%) 647.927 ops/s [Average]
  (min, avg, max) = (508827.408, 510780.196, 512286.178), stdev = 969.786
  CI (99.9%): [510132.269, 511428.123] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_selectByOccurrences  thrpt   30  510780.196 ± 647.927  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_selectDuplicates$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_selectDuplicates

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 198742.954 ops/s
# Warmup Iteration   2: 313093.267 ops/s
# Warmup Iteration   3: 390926.100 ops/s
# Warmup Iteration   4: 388828.149 ops/s
# Warmup Iteration   5: 388954.690 ops/s
# Warmup Iteration   6: 390495.431 ops/s
# Warmup Iteration   7: 355822.531 ops/s
# Warmup Iteration   8: 362846.437 ops/s
# Warmup Iteration   9: 391676.071 ops/s
# Warmup Iteration  10: 391503.146 ops/s
# Warmup Iteration  11: 390848.294 ops/s
# Warmup Iteration  12: 391187.300 ops/s
# Warmup Iteration  13: 392556.472 ops/s
# Warmup Iteration  14: 391240.396 ops/s
# Warmup Iteration  15: 390361.169 ops/s
# Warmup Iteration  16: 391701.029 ops/s
# Warmup Iteration  17: 391040.543 ops/s
# Warmup Iteration  18: 390253.374 ops/s
# Warmup Iteration  19: 391583.017 ops/s
# Warmup Iteration  20: 391139.402 ops/s
# Warmup Iteration  21: 391798.349 ops/s
# Warmup Iteration  22: 391106.057 ops/s
# Warmup Iteration  23: 390154.555 ops/s
# Warmup Iteration  24: 390284.635 ops/s
# Warmup Iteration  25: 391196.343 ops/s
# Warmup Iteration  26: 391206.479 ops/s
# Warmup Iteration  27: 391175.385 ops/s
# Warmup Iteration  28: 390022.251 ops/s
# Warmup Iteration  29: 389817.978 ops/s
# Warmup Iteration  30: 391194.276 ops/s
Iteration   1: 390876.637 ops/s
Iteration   2: 391614.318 ops/s
Iteration   3: 391230.350 ops/s
Iteration   4: 390678.700 ops/s
Iteration   5: 391780.757 ops/s
Iteration   6: 391109.870 ops/s
Iteration   7: 392105.644 ops/s
Iteration   8: 389390.476 ops/s
Iteration   9: 391609.869 ops/s
Iteration  10: 391746.551 ops/s
Iteration  11: 390428.178 ops/s
Iteration  12: 391997.036 ops/s
Iteration  13: 390356.195 ops/s
Iteration  14: 391396.328 ops/s
Iteration  15: 390952.025 ops/s
Iteration  16: 391489.126 ops/s
Iteration  17: 389404.456 ops/s
Iteration  18: 389678.599 ops/s
Iteration  19: 390638.856 ops/s
Iteration  20: 391177.822 ops/s
Iteration  21: 391730.503 ops/s
Iteration  22: 391280.399 ops/s
Iteration  23: 391919.514 ops/s
Iteration  24: 391105.813 ops/s
Iteration  25: 390637.021 ops/s
Iteration  26: 391373.418 ops/s
Iteration  27: 390122.998 ops/s
Iteration  28: 391472.284 ops/s
Iteration  29: 390656.257 ops/s
Iteration  30: 391828.643 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_selectDuplicates":
  391059.621 ±(99.9%) 495.197 ops/s [Average]
  (min, avg, max) = (389390.476, 391059.621, 392105.644), stdev = 741.188
  CI (99.9%): [390564.424, 391554.819] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_selectDuplicates  thrpt   30  391059.621 ± 495.197  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 459708.698 ops/s
# Warmup Iteration   2: 795491.595 ops/s
# Warmup Iteration   3: 923667.887 ops/s
# Warmup Iteration   4: 930650.160 ops/s
# Warmup Iteration   5: 927976.575 ops/s
# Warmup Iteration   6: 778751.016 ops/s
# Warmup Iteration   7: 926067.764 ops/s
# Warmup Iteration   8: 928871.914 ops/s
# Warmup Iteration   9: 928735.258 ops/s
# Warmup Iteration  10: 930457.235 ops/s
# Warmup Iteration  11: 930532.121 ops/s
# Warmup Iteration  12: 930403.614 ops/s
# Warmup Iteration  13: 929287.783 ops/s
# Warmup Iteration  14: 930409.845 ops/s
# Warmup Iteration  15: 926071.982 ops/s
# Warmup Iteration  16: 930969.676 ops/s
# Warmup Iteration  17: 929594.786 ops/s
# Warmup Iteration  18: 930847.096 ops/s
# Warmup Iteration  19: 929996.287 ops/s
# Warmup Iteration  20: 930412.899 ops/s
# Warmup Iteration  21: 931025.603 ops/s
# Warmup Iteration  22: 929139.006 ops/s
# Warmup Iteration  23: 928149.165 ops/s
# Warmup Iteration  24: 929685.114 ops/s
# Warmup Iteration  25: 929346.063 ops/s
# Warmup Iteration  26: 928774.999 ops/s
# Warmup Iteration  27: 930466.896 ops/s
# Warmup Iteration  28: 927962.052 ops/s
# Warmup Iteration  29: 930746.767 ops/s
# Warmup Iteration  30: 930516.374 ops/s
Iteration   1: 928005.622 ops/s
Iteration   2: 930032.539 ops/s
Iteration   3: 930763.542 ops/s
Iteration   4: 930128.033 ops/s
Iteration   5: 932297.491 ops/s
Iteration   6: 929356.431 ops/s
Iteration   7: 928665.807 ops/s
Iteration   8: 926062.868 ops/s
Iteration   9: 929781.408 ops/s
Iteration  10: 929221.799 ops/s
Iteration  11: 930473.801 ops/s
Iteration  12: 926259.959 ops/s
Iteration  13: 925655.147 ops/s
Iteration  14: 929508.146 ops/s
Iteration  15: 931170.287 ops/s
Iteration  16: 927518.123 ops/s
Iteration  17: 927256.602 ops/s
Iteration  18: 926986.076 ops/s
Iteration  19: 927560.031 ops/s
Iteration  20: 926227.788 ops/s
Iteration  21: 928321.945 ops/s
Iteration  22: 930043.959 ops/s
Iteration  23: 928719.359 ops/s
Iteration  24: 930990.790 ops/s
Iteration  25: 930424.013 ops/s
Iteration  26: 932396.098 ops/s
Iteration  27: 930104.403 ops/s
Iteration  28: 930385.315 ops/s
Iteration  29: 930203.283 ops/s
Iteration  30: 928815.583 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_selectInstancesOf":
  929111.208 ±(99.9%) 1210.036 ops/s [Average]
  (min, avg, max) = (925655.147, 929111.208, 932396.098), stdev = 1811.125
  CI (99.9%): [927901.172, 930321.244] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  929111.208 ± 1210.036  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_selectUnique$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_selectUnique

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 395781.038 ops/s
# Warmup Iteration   2: 684948.494 ops/s
# Warmup Iteration   3: 808118.446 ops/s
# Warmup Iteration   4: 813769.526 ops/s
# Warmup Iteration   5: 812006.875 ops/s
# Warmup Iteration   6: 678433.012 ops/s
# Warmup Iteration   7: 813204.914 ops/s
# Warmup Iteration   8: 812691.719 ops/s
# Warmup Iteration   9: 814002.563 ops/s
# Warmup Iteration  10: 814552.835 ops/s
# Warmup Iteration  11: 813336.728 ops/s
# Warmup Iteration  12: 812499.897 ops/s
# Warmup Iteration  13: 812873.365 ops/s
# Warmup Iteration  14: 811259.047 ops/s
# Warmup Iteration  15: 810767.035 ops/s
# Warmup Iteration  16: 813557.231 ops/s
# Warmup Iteration  17: 813781.845 ops/s
# Warmup Iteration  18: 814847.907 ops/s
# Warmup Iteration  19: 812539.357 ops/s
# Warmup Iteration  20: 812866.348 ops/s
# Warmup Iteration  21: 812993.419 ops/s
# Warmup Iteration  22: 812381.093 ops/s
# Warmup Iteration  23: 812748.126 ops/s
# Warmup Iteration  24: 814822.699 ops/s
# Warmup Iteration  25: 811434.252 ops/s
# Warmup Iteration  26: 813192.686 ops/s
# Warmup Iteration  27: 812939.801 ops/s
# Warmup Iteration  28: 810942.797 ops/s
# Warmup Iteration  29: 812846.386 ops/s
# Warmup Iteration  30: 814084.287 ops/s
Iteration   1: 814817.791 ops/s
Iteration   2: 814341.332 ops/s
Iteration   3: 810336.240 ops/s
Iteration   4: 814428.121 ops/s
Iteration   5: 813732.481 ops/s
Iteration   6: 816480.758 ops/s
Iteration   7: 813789.037 ops/s
Iteration   8: 812851.691 ops/s
Iteration   9: 808906.400 ops/s
Iteration  10: 813309.502 ops/s
Iteration  11: 810478.038 ops/s
Iteration  12: 815182.520 ops/s
Iteration  13: 810511.444 ops/s
Iteration  14: 811949.851 ops/s
Iteration  15: 813331.419 ops/s
Iteration  16: 814426.485 ops/s
Iteration  17: 809270.645 ops/s
Iteration  18: 814725.416 ops/s
Iteration  19: 812971.780 ops/s
Iteration  20: 813896.350 ops/s
Iteration  21: 813048.355 ops/s
Iteration  22: 805681.668 ops/s
Iteration  23: 814201.001 ops/s
Iteration  24: 806667.832 ops/s
Iteration  25: 812865.115 ops/s
Iteration  26: 808699.040 ops/s
Iteration  27: 813732.839 ops/s
Iteration  28: 812744.060 ops/s
Iteration  29: 816033.128 ops/s
Iteration  30: 814283.888 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_selectUnique":
  812589.808 ±(99.9%) 1766.184 ops/s [Average]
  (min, avg, max) = (805681.668, 812589.808, 816480.758), stdev = 2643.541
  CI (99.9%): [810823.624, 814355.991] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_selectUnique  thrpt   30  812589.808 ± 1766.184  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 178557.075 ops/s
# Warmup Iteration   2: 376271.954 ops/s
# Warmup Iteration   3: 422828.822 ops/s
# Warmup Iteration   4: 424659.876 ops/s
# Warmup Iteration   5: 356979.728 ops/s
# Warmup Iteration   6: 421456.274 ops/s
# Warmup Iteration   7: 422876.167 ops/s
# Warmup Iteration   8: 422340.106 ops/s
# Warmup Iteration   9: 421466.240 ops/s
# Warmup Iteration  10: 421468.983 ops/s
# Warmup Iteration  11: 423601.982 ops/s
# Warmup Iteration  12: 421705.880 ops/s
# Warmup Iteration  13: 423004.374 ops/s
# Warmup Iteration  14: 423399.002 ops/s
# Warmup Iteration  15: 422596.380 ops/s
# Warmup Iteration  16: 423014.179 ops/s
# Warmup Iteration  17: 423205.806 ops/s
# Warmup Iteration  18: 422095.411 ops/s
# Warmup Iteration  19: 421841.273 ops/s
# Warmup Iteration  20: 422486.171 ops/s
# Warmup Iteration  21: 423223.934 ops/s
# Warmup Iteration  22: 422175.317 ops/s
# Warmup Iteration  23: 422329.785 ops/s
# Warmup Iteration  24: 422372.907 ops/s
# Warmup Iteration  25: 422601.584 ops/s
# Warmup Iteration  26: 421991.050 ops/s
# Warmup Iteration  27: 422640.148 ops/s
# Warmup Iteration  28: 423146.872 ops/s
# Warmup Iteration  29: 421936.674 ops/s
# Warmup Iteration  30: 422179.419 ops/s
Iteration   1: 422329.480 ops/s
Iteration   2: 423153.921 ops/s
Iteration   3: 421675.582 ops/s
Iteration   4: 420813.240 ops/s
Iteration   5: 423063.141 ops/s
Iteration   6: 422619.118 ops/s
Iteration   7: 423092.446 ops/s
Iteration   8: 422096.406 ops/s
Iteration   9: 420906.725 ops/s
Iteration  10: 422019.232 ops/s
Iteration  11: 422143.459 ops/s
Iteration  12: 421506.195 ops/s
Iteration  13: 422216.896 ops/s
Iteration  14: 422627.572 ops/s
Iteration  15: 419841.877 ops/s
Iteration  16: 422930.855 ops/s
Iteration  17: 423081.674 ops/s
Iteration  18: 421762.340 ops/s
Iteration  19: 422007.007 ops/s
Iteration  20: 421956.552 ops/s
Iteration  21: 423413.047 ops/s
Iteration  22: 422586.522 ops/s
Iteration  23: 421979.026 ops/s
Iteration  24: 422798.599 ops/s
Iteration  25: 422459.546 ops/s
Iteration  26: 422694.152 ops/s
Iteration  27: 423199.101 ops/s
Iteration  28: 421837.416 ops/s
Iteration  29: 421875.528 ops/s
Iteration  30: 422971.836 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_selectWith":
  422255.283 ±(99.9%) 533.113 ops/s [Average]
  (min, avg, max) = (419841.877, 422255.283, 423413.047), stdev = 797.939
  CI (99.9%): [421722.170, 422788.396] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_selectWith  thrpt   30  422255.283 ± 533.113  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 147215.749 ops/s
# Warmup Iteration   2: 284737.774 ops/s
# Warmup Iteration   3: 337067.163 ops/s
# Warmup Iteration   4: 337991.868 ops/s
# Warmup Iteration   5: 338264.119 ops/s
# Warmup Iteration   6: 282956.174 ops/s
# Warmup Iteration   7: 338488.179 ops/s
# Warmup Iteration   8: 338912.523 ops/s
# Warmup Iteration   9: 338566.924 ops/s
# Warmup Iteration  10: 338699.981 ops/s
# Warmup Iteration  11: 339250.407 ops/s
# Warmup Iteration  12: 339104.034 ops/s
# Warmup Iteration  13: 339075.897 ops/s
# Warmup Iteration  14: 338972.287 ops/s
# Warmup Iteration  15: 338381.144 ops/s
# Warmup Iteration  16: 338937.061 ops/s
# Warmup Iteration  17: 339236.782 ops/s
# Warmup Iteration  18: 339428.564 ops/s
# Warmup Iteration  19: 338069.565 ops/s
# Warmup Iteration  20: 338617.488 ops/s
# Warmup Iteration  21: 338752.875 ops/s
# Warmup Iteration  22: 338506.404 ops/s
# Warmup Iteration  23: 338607.269 ops/s
# Warmup Iteration  24: 339297.993 ops/s
# Warmup Iteration  25: 339211.687 ops/s
# Warmup Iteration  26: 338859.424 ops/s
# Warmup Iteration  27: 338383.298 ops/s
# Warmup Iteration  28: 338849.073 ops/s
# Warmup Iteration  29: 339240.820 ops/s
# Warmup Iteration  30: 339065.081 ops/s
Iteration   1: 337692.619 ops/s
Iteration   2: 339026.836 ops/s
Iteration   3: 339256.513 ops/s
Iteration   4: 339600.236 ops/s
Iteration   5: 338581.272 ops/s
Iteration   6: 339166.121 ops/s
Iteration   7: 338439.824 ops/s
Iteration   8: 339377.502 ops/s
Iteration   9: 338677.477 ops/s
Iteration  10: 338623.381 ops/s
Iteration  11: 338464.405 ops/s
Iteration  12: 338996.666 ops/s
Iteration  13: 339800.194 ops/s
Iteration  14: 338429.928 ops/s
Iteration  15: 339221.146 ops/s
Iteration  16: 338497.927 ops/s
Iteration  17: 337990.564 ops/s
Iteration  18: 339401.828 ops/s
Iteration  19: 338832.972 ops/s
Iteration  20: 338685.459 ops/s
Iteration  21: 338497.400 ops/s
Iteration  22: 338926.130 ops/s
Iteration  23: 338600.434 ops/s
Iteration  24: 339908.617 ops/s
Iteration  25: 338991.756 ops/s
Iteration  26: 338763.726 ops/s
Iteration  27: 339999.410 ops/s
Iteration  28: 339449.494 ops/s
Iteration  29: 337533.446 ops/s
Iteration  30: 337118.648 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_selectWith_target":
  338818.398 ±(99.9%) 449.084 ops/s [Average]
  (min, avg, max) = (337118.648, 338818.398, 339999.410), stdev = 672.168
  CI (99.9%): [338369.313, 339267.482] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_selectWith_target  thrpt   30  338818.398 ± 449.084  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18480.855 ops/s
# Warmup Iteration   2: 27728.054 ops/s
# Warmup Iteration   3: 39857.877 ops/s
# Warmup Iteration   4: 39554.324 ops/s
# Warmup Iteration   5: 39450.920 ops/s
# Warmup Iteration   6: 39641.396 ops/s
# Warmup Iteration   7: 39588.432 ops/s
# Warmup Iteration   8: 39462.159 ops/s
# Warmup Iteration   9: 36960.346 ops/s
# Warmup Iteration  10: 36632.702 ops/s
# Warmup Iteration  11: 39605.079 ops/s
# Warmup Iteration  12: 39549.785 ops/s
# Warmup Iteration  13: 39639.580 ops/s
# Warmup Iteration  14: 39663.649 ops/s
# Warmup Iteration  15: 39584.531 ops/s
# Warmup Iteration  16: 39482.348 ops/s
# Warmup Iteration  17: 39493.038 ops/s
# Warmup Iteration  18: 39482.001 ops/s
# Warmup Iteration  19: 39487.153 ops/s
# Warmup Iteration  20: 39451.880 ops/s
# Warmup Iteration  21: 39432.979 ops/s
# Warmup Iteration  22: 39388.225 ops/s
# Warmup Iteration  23: 39446.458 ops/s
# Warmup Iteration  24: 39490.957 ops/s
# Warmup Iteration  25: 38855.190 ops/s
# Warmup Iteration  26: 39424.013 ops/s
# Warmup Iteration  27: 39556.744 ops/s
# Warmup Iteration  28: 39488.525 ops/s
# Warmup Iteration  29: 39472.205 ops/s
# Warmup Iteration  30: 39479.134 ops/s
Iteration   1: 39365.176 ops/s
Iteration   2: 39488.252 ops/s
Iteration   3: 39655.889 ops/s
Iteration   4: 39497.635 ops/s
Iteration   5: 39437.127 ops/s
Iteration   6: 39481.290 ops/s
Iteration   7: 39516.657 ops/s
Iteration   8: 39460.013 ops/s
Iteration   9: 39653.103 ops/s
Iteration  10: 39540.710 ops/s
Iteration  11: 39339.056 ops/s
Iteration  12: 39565.404 ops/s
Iteration  13: 39630.894 ops/s
Iteration  14: 39450.395 ops/s
Iteration  15: 39634.843 ops/s
Iteration  16: 39855.238 ops/s
Iteration  17: 39745.977 ops/s
Iteration  18: 39814.930 ops/s
Iteration  19: 39841.316 ops/s
Iteration  20: 39621.056 ops/s
Iteration  21: 39901.033 ops/s
Iteration  22: 39798.803 ops/s
Iteration  23: 39677.783 ops/s
Iteration  24: 39791.495 ops/s
Iteration  25: 39646.329 ops/s
Iteration  26: 39719.748 ops/s
Iteration  27: 39867.642 ops/s
Iteration  28: 39783.594 ops/s
Iteration  29: 39639.930 ops/s
Iteration  30: 39786.258 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_serialization":
  39640.253 ±(99.9%) 105.438 ops/s [Average]
  (min, avg, max) = (39339.056, 39640.253, 39901.033), stdev = 157.815
  CI (99.9%): [39534.814, 39745.691] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt      Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_serialization  thrpt   30  39640.253 ± 105.438  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_setOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_setOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 117143.250 ops/s
# Warmup Iteration   2: 190759.154 ops/s
# Warmup Iteration   3: 281469.193 ops/s
# Warmup Iteration   4: 282508.821 ops/s
# Warmup Iteration   5: 281776.508 ops/s
# Warmup Iteration   6: 238834.633 ops/s
# Warmup Iteration   7: 281689.237 ops/s
# Warmup Iteration   8: 282121.514 ops/s
# Warmup Iteration   9: 281851.440 ops/s
# Warmup Iteration  10: 282355.097 ops/s
# Warmup Iteration  11: 282378.917 ops/s
# Warmup Iteration  12: 282599.488 ops/s
# Warmup Iteration  13: 282007.230 ops/s
# Warmup Iteration  14: 281749.757 ops/s
# Warmup Iteration  15: 282028.441 ops/s
# Warmup Iteration  16: 282394.119 ops/s
# Warmup Iteration  17: 281875.509 ops/s
# Warmup Iteration  18: 281929.931 ops/s
# Warmup Iteration  19: 281762.134 ops/s
# Warmup Iteration  20: 281628.769 ops/s
# Warmup Iteration  21: 281932.968 ops/s
# Warmup Iteration  22: 282122.040 ops/s
# Warmup Iteration  23: 281907.015 ops/s
# Warmup Iteration  24: 281930.176 ops/s
# Warmup Iteration  25: 281728.165 ops/s
# Warmup Iteration  26: 282242.386 ops/s
# Warmup Iteration  27: 281244.365 ops/s
# Warmup Iteration  28: 282588.506 ops/s
# Warmup Iteration  29: 281075.590 ops/s
# Warmup Iteration  30: 281948.201 ops/s
Iteration   1: 282775.787 ops/s
Iteration   2: 282373.089 ops/s
Iteration   3: 282556.155 ops/s
Iteration   4: 281402.215 ops/s
Iteration   5: 282211.172 ops/s
Iteration   6: 281982.411 ops/s
Iteration   7: 280367.300 ops/s
Iteration   8: 282482.128 ops/s
Iteration   9: 282380.174 ops/s
Iteration  10: 281066.972 ops/s
Iteration  11: 282416.599 ops/s
Iteration  12: 282619.538 ops/s
Iteration  13: 282450.379 ops/s
Iteration  14: 282217.868 ops/s
Iteration  15: 282244.874 ops/s
Iteration  16: 281808.482 ops/s
Iteration  17: 276550.627 ops/s
Iteration  18: 281442.464 ops/s
Iteration  19: 282233.740 ops/s
Iteration  20: 282662.044 ops/s
Iteration  21: 281810.813 ops/s
Iteration  22: 282802.407 ops/s
Iteration  23: 282028.217 ops/s
Iteration  24: 282495.266 ops/s
Iteration  25: 281928.512 ops/s
Iteration  26: 281668.958 ops/s
Iteration  27: 281266.163 ops/s
Iteration  28: 281943.918 ops/s
Iteration  29: 281365.370 ops/s
Iteration  30: 281693.562 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_setOccurrences":
  281841.573 ±(99.9%) 765.750 ops/s [Average]
  (min, avg, max) = (276550.627, 281841.573, 282802.407), stdev = 1146.139
  CI (99.9%): [281075.823, 282607.324] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_setOccurrences  thrpt   30  281841.573 ± 765.750  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_setOccurrences_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_setOccurrences_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 688984.412 ops/s
# Warmup Iteration   2: 727931.412 ops/s
# Warmup Iteration   3: 919880.160 ops/s
# Warmup Iteration   4: 950684.633 ops/s
# Warmup Iteration   5: 949432.276 ops/s
# Warmup Iteration   6: 941485.417 ops/s
# Warmup Iteration   7: 950603.439 ops/s
# Warmup Iteration   8: 949639.473 ops/s
# Warmup Iteration   9: 950505.337 ops/s
# Warmup Iteration  10: 949872.471 ops/s
# Warmup Iteration  11: 948163.383 ops/s
# Warmup Iteration  12: 924464.085 ops/s
# Warmup Iteration  13: 826089.269 ops/s
# Warmup Iteration  14: 948052.573 ops/s
# Warmup Iteration  15: 945823.928 ops/s
# Warmup Iteration  16: 951018.270 ops/s
# Warmup Iteration  17: 996543.819 ops/s
# Warmup Iteration  18: 996857.605 ops/s
# Warmup Iteration  19: 996528.693 ops/s
# Warmup Iteration  20: 998853.290 ops/s
# Warmup Iteration  21: 997916.414 ops/s
# Warmup Iteration  22: 994539.440 ops/s
# Warmup Iteration  23: 999698.772 ops/s
# Warmup Iteration  24: 998235.020 ops/s
# Warmup Iteration  25: 999205.500 ops/s
# Warmup Iteration  26: 997193.798 ops/s
# Warmup Iteration  27: 997819.655 ops/s
# Warmup Iteration  28: 997222.724 ops/s
# Warmup Iteration  29: 996992.699 ops/s
# Warmup Iteration  30: 992043.635 ops/s
Iteration   1: 997793.551 ops/s
Iteration   2: 995555.145 ops/s
Iteration   3: 996572.609 ops/s
Iteration   4: 995717.367 ops/s
Iteration   5: 991403.796 ops/s
Iteration   6: 997610.464 ops/s
Iteration   7: 997894.891 ops/s
Iteration   8: 995066.038 ops/s
Iteration   9: 1001005.965 ops/s
Iteration  10: 998665.531 ops/s
Iteration  11: 998163.273 ops/s
Iteration  12: 997100.632 ops/s
Iteration  13: 1000189.892 ops/s
Iteration  14: 999171.247 ops/s
Iteration  15: 999942.555 ops/s
Iteration  16: 996985.477 ops/s
Iteration  17: 997512.595 ops/s
Iteration  18: 999399.010 ops/s
Iteration  19: 999014.747 ops/s
Iteration  20: 996842.684 ops/s
Iteration  21: 999120.020 ops/s
Iteration  22: 1000028.447 ops/s
Iteration  23: 999193.261 ops/s
Iteration  24: 991791.279 ops/s
Iteration  25: 991446.776 ops/s
Iteration  26: 991518.417 ops/s
Iteration  27: 992965.597 ops/s
Iteration  28: 992969.211 ops/s
Iteration  29: 998951.619 ops/s
Iteration  30: 989050.518 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_setOccurrences_throws":
  996621.420 ±(99.9%) 2135.700 ops/s [Average]
  (min, avg, max) = (989050.518, 996621.420, 1001005.965), stdev = 3196.616
  CI (99.9%): [994485.720, 998757.121] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_setOccurrences_throws  thrpt   30  996621.420 ± 2135.700  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 607336.432 ops/s
# Warmup Iteration   2: 973008.975 ops/s
# Warmup Iteration   3: 1139238.933 ops/s
# Warmup Iteration   4: 1146571.885 ops/s
# Warmup Iteration   5: 1146885.056 ops/s
# Warmup Iteration   6: 1070485.132 ops/s
# Warmup Iteration   7: 1032026.531 ops/s
# Warmup Iteration   8: 1145904.353 ops/s
# Warmup Iteration   9: 1146481.072 ops/s
# Warmup Iteration  10: 1147780.505 ops/s
# Warmup Iteration  11: 1145961.367 ops/s
# Warmup Iteration  12: 1143967.149 ops/s
# Warmup Iteration  13: 1144669.921 ops/s
# Warmup Iteration  14: 1148292.337 ops/s
# Warmup Iteration  15: 1148742.976 ops/s
# Warmup Iteration  16: 1147919.038 ops/s
# Warmup Iteration  17: 1146066.636 ops/s
# Warmup Iteration  18: 1146284.448 ops/s
# Warmup Iteration  19: 1144999.184 ops/s
# Warmup Iteration  20: 1147640.311 ops/s
# Warmup Iteration  21: 1147956.777 ops/s
# Warmup Iteration  22: 1144466.074 ops/s
# Warmup Iteration  23: 1146337.588 ops/s
# Warmup Iteration  24: 1143755.721 ops/s
# Warmup Iteration  25: 1145740.057 ops/s
# Warmup Iteration  26: 1141363.984 ops/s
# Warmup Iteration  27: 1146251.629 ops/s
# Warmup Iteration  28: 1145954.318 ops/s
# Warmup Iteration  29: 1146071.104 ops/s
# Warmup Iteration  30: 1147185.437 ops/s
Iteration   1: 1144925.249 ops/s
Iteration   2: 1149593.072 ops/s
Iteration   3: 1145697.456 ops/s
Iteration   4: 1149917.899 ops/s
Iteration   5: 1143889.866 ops/s
Iteration   6: 1149505.184 ops/s
Iteration   7: 1145951.400 ops/s
Iteration   8: 1147120.699 ops/s
Iteration   9: 1145276.459 ops/s
Iteration  10: 1148986.654 ops/s
Iteration  11: 1144816.023 ops/s
Iteration  12: 1149405.357 ops/s
Iteration  13: 1146933.017 ops/s
Iteration  14: 1148593.333 ops/s
Iteration  15: 1144120.817 ops/s
Iteration  16: 1149640.649 ops/s
Iteration  17: 1140368.692 ops/s
Iteration  18: 1148008.779 ops/s
Iteration  19: 1147522.352 ops/s
Iteration  20: 1148539.707 ops/s
Iteration  21: 1145604.271 ops/s
Iteration  22: 1144256.248 ops/s
Iteration  23: 1145009.439 ops/s
Iteration  24: 1148155.025 ops/s
Iteration  25: 1145448.080 ops/s
Iteration  26: 1147899.870 ops/s
Iteration  27: 1145019.204 ops/s
Iteration  28: 1146104.125 ops/s
Iteration  29: 1143424.410 ops/s
Iteration  30: 1149206.708 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumByDouble":
  1146631.335 ±(99.9%) 1557.061 ops/s [Average]
  (min, avg, max) = (1140368.692, 1146631.335, 1149917.899), stdev = 2330.536
  CI (99.9%): [1145074.273, 1148188.396] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_sumByDouble  thrpt   30  1146631.335 ± 1557.061  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62.312 ops/s
# Warmup Iteration   2: 69.832 ops/s
# Warmup Iteration   3: 100.824 ops/s
# Warmup Iteration   4: 100.567 ops/s
# Warmup Iteration   5: 99.045 ops/s
# Warmup Iteration   6: 99.107 ops/s
# Warmup Iteration   7: 98.543 ops/s
# Warmup Iteration   8: 100.366 ops/s
# Warmup Iteration   9: 98.775 ops/s
# Warmup Iteration  10: 82.427 ops/s
# Warmup Iteration  11: 96.652 ops/s
# Warmup Iteration  12: 97.715 ops/s
# Warmup Iteration  13: 100.791 ops/s
# Warmup Iteration  14: 96.986 ops/s
# Warmup Iteration  15: 100.745 ops/s
# Warmup Iteration  16: 100.012 ops/s
# Warmup Iteration  17: 99.784 ops/s
# Warmup Iteration  18: 100.325 ops/s
# Warmup Iteration  19: 100.197 ops/s
# Warmup Iteration  20: 98.034 ops/s
# Warmup Iteration  21: 98.071 ops/s
# Warmup Iteration  22: 98.323 ops/s
# Warmup Iteration  23: 98.706 ops/s
# Warmup Iteration  24: 98.103 ops/s
# Warmup Iteration  25: 99.347 ops/s
# Warmup Iteration  26: 100.968 ops/s
# Warmup Iteration  27: 100.057 ops/s
# Warmup Iteration  28: 96.633 ops/s
# Warmup Iteration  29: 96.018 ops/s
# Warmup Iteration  30: 98.640 ops/s
Iteration   1: 98.098 ops/s
Iteration   2: 97.849 ops/s
Iteration   3: 98.312 ops/s
Iteration   4: 95.197 ops/s
Iteration   5: 94.012 ops/s
Iteration   6: 96.752 ops/s
Iteration   7: 97.108 ops/s
Iteration   8: 97.197 ops/s
Iteration   9: 96.846 ops/s
Iteration  10: 97.571 ops/s
Iteration  11: 97.269 ops/s
Iteration  12: 96.494 ops/s
Iteration  13: 95.281 ops/s
Iteration  14: 94.996 ops/s
Iteration  15: 96.201 ops/s
Iteration  16: 97.821 ops/s
Iteration  17: 93.364 ops/s
Iteration  18: 97.530 ops/s
Iteration  19: 98.092 ops/s
Iteration  20: 98.725 ops/s
Iteration  21: 98.855 ops/s
Iteration  22: 96.541 ops/s
Iteration  23: 97.759 ops/s
Iteration  24: 97.057 ops/s
Iteration  25: 96.439 ops/s
Iteration  26: 95.115 ops/s
Iteration  27: 95.652 ops/s
Iteration  28: 97.762 ops/s
Iteration  29: 97.547 ops/s
Iteration  30: 96.661 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  96.803 ±(99.9%) 0.897 ops/s [Average]
  (min, avg, max) = (93.364, 96.803, 98.855), stdev = 1.343
  CI (99.9%): [95.906, 97.701] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt   Score   Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  96.803 ± 0.897  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 489164.719 ops/s
# Warmup Iteration   2: 632075.368 ops/s
# Warmup Iteration   3: 805436.058 ops/s
# Warmup Iteration   4: 800120.212 ops/s
# Warmup Iteration   5: 805048.206 ops/s
# Warmup Iteration   6: 805429.505 ops/s
# Warmup Iteration   7: 806016.166 ops/s
# Warmup Iteration   8: 806071.972 ops/s
# Warmup Iteration   9: 671215.116 ops/s
# Warmup Iteration  10: 806603.957 ops/s
# Warmup Iteration  11: 804604.433 ops/s
# Warmup Iteration  12: 802538.663 ops/s
# Warmup Iteration  13: 804634.815 ops/s
# Warmup Iteration  14: 806255.495 ops/s
# Warmup Iteration  15: 804027.869 ops/s
# Warmup Iteration  16: 803647.077 ops/s
# Warmup Iteration  17: 803967.406 ops/s
# Warmup Iteration  18: 805492.735 ops/s
# Warmup Iteration  19: 805877.441 ops/s
# Warmup Iteration  20: 806405.459 ops/s
# Warmup Iteration  21: 805403.888 ops/s
# Warmup Iteration  22: 803981.543 ops/s
# Warmup Iteration  23: 804449.834 ops/s
# Warmup Iteration  24: 806292.263 ops/s
# Warmup Iteration  25: 806263.803 ops/s
# Warmup Iteration  26: 805727.414 ops/s
# Warmup Iteration  27: 807098.871 ops/s
# Warmup Iteration  28: 806356.980 ops/s
# Warmup Iteration  29: 805836.176 ops/s
# Warmup Iteration  30: 805780.237 ops/s
Iteration   1: 807684.772 ops/s
Iteration   2: 806728.911 ops/s
Iteration   3: 803433.467 ops/s
Iteration   4: 805452.654 ops/s
Iteration   5: 808124.103 ops/s
Iteration   6: 804744.910 ops/s
Iteration   7: 807477.299 ops/s
Iteration   8: 807199.342 ops/s
Iteration   9: 802882.955 ops/s
Iteration  10: 808019.130 ops/s
Iteration  11: 807441.056 ops/s
Iteration  12: 805266.281 ops/s
Iteration  13: 806571.593 ops/s
Iteration  14: 806969.668 ops/s
Iteration  15: 803781.840 ops/s
Iteration  16: 806214.276 ops/s
Iteration  17: 804660.623 ops/s
Iteration  18: 803999.730 ops/s
Iteration  19: 807297.863 ops/s
Iteration  20: 805751.731 ops/s
Iteration  21: 806957.458 ops/s
Iteration  22: 806370.247 ops/s
Iteration  23: 805632.514 ops/s
Iteration  24: 805789.248 ops/s
Iteration  25: 804439.121 ops/s
Iteration  26: 799319.193 ops/s
Iteration  27: 805920.963 ops/s
Iteration  28: 801106.235 ops/s
Iteration  29: 804862.391 ops/s
Iteration  30: 805804.059 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumByFloat":
  805530.121 ±(99.9%) 1342.623 ops/s [Average]
  (min, avg, max) = (799319.193, 805530.121, 808124.103), stdev = 2009.575
  CI (99.9%): [804187.498, 806872.744] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_sumByFloat  thrpt   30  805530.121 ± 1342.623  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 59.803 ops/s
# Warmup Iteration   2: 67.787 ops/s
# Warmup Iteration   3: 97.861 ops/s
# Warmup Iteration   4: 95.630 ops/s
# Warmup Iteration   5: 94.523 ops/s
# Warmup Iteration   6: 96.955 ops/s
# Warmup Iteration   7: 96.379 ops/s
# Warmup Iteration   8: 95.775 ops/s
# Warmup Iteration   9: 94.478 ops/s
# Warmup Iteration  10: 90.898 ops/s
# Warmup Iteration  11: 85.145 ops/s
# Warmup Iteration  12: 100.106 ops/s
# Warmup Iteration  13: 99.205 ops/s
# Warmup Iteration  14: 100.042 ops/s
# Warmup Iteration  15: 100.746 ops/s
# Warmup Iteration  16: 100.075 ops/s
# Warmup Iteration  17: 100.248 ops/s
# Warmup Iteration  18: 99.535 ops/s
# Warmup Iteration  19: 100.522 ops/s
# Warmup Iteration  20: 99.077 ops/s
# Warmup Iteration  21: 99.888 ops/s
# Warmup Iteration  22: 99.129 ops/s
# Warmup Iteration  23: 100.349 ops/s
# Warmup Iteration  24: 99.293 ops/s
# Warmup Iteration  25: 100.183 ops/s
# Warmup Iteration  26: 99.700 ops/s
# Warmup Iteration  27: 99.593 ops/s
# Warmup Iteration  28: 98.442 ops/s
# Warmup Iteration  29: 96.220 ops/s
# Warmup Iteration  30: 94.716 ops/s
Iteration   1: 97.790 ops/s
Iteration   2: 97.261 ops/s
Iteration   3: 97.410 ops/s
Iteration   4: 98.515 ops/s
Iteration   5: 97.480 ops/s
Iteration   6: 98.286 ops/s
Iteration   7: 99.012 ops/s
Iteration   8: 99.935 ops/s
Iteration   9: 97.747 ops/s
Iteration  10: 98.736 ops/s
Iteration  11: 97.948 ops/s
Iteration  12: 98.499 ops/s
Iteration  13: 98.362 ops/s
Iteration  14: 97.706 ops/s
Iteration  15: 98.576 ops/s
Iteration  16: 98.415 ops/s
Iteration  17: 98.212 ops/s
Iteration  18: 96.905 ops/s
Iteration  19: 97.833 ops/s
Iteration  20: 98.884 ops/s
Iteration  21: 97.555 ops/s
Iteration  22: 97.853 ops/s
Iteration  23: 97.267 ops/s
Iteration  24: 96.974 ops/s
Iteration  25: 94.572 ops/s
Iteration  26: 96.257 ops/s
Iteration  27: 98.834 ops/s
Iteration  28: 97.217 ops/s
Iteration  29: 98.626 ops/s
Iteration  30: 98.725 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  97.913 ±(99.9%) 0.663 ops/s [Average]
  (min, avg, max) = (94.572, 97.913, 99.935), stdev = 0.992
  CI (99.9%): [97.250, 98.576] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt   Score   Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  97.913 ± 0.663  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 815929.843 ops/s
# Warmup Iteration   2: 1479112.949 ops/s
# Warmup Iteration   3: 1653069.215 ops/s
# Warmup Iteration   4: 1662862.916 ops/s
# Warmup Iteration   5: 1619717.811 ops/s
# Warmup Iteration   6: 1420109.834 ops/s
# Warmup Iteration   7: 1651807.982 ops/s
# Warmup Iteration   8: 1655040.411 ops/s
# Warmup Iteration   9: 1654077.424 ops/s
# Warmup Iteration  10: 1651050.441 ops/s
# Warmup Iteration  11: 1654491.790 ops/s
# Warmup Iteration  12: 1655762.163 ops/s
# Warmup Iteration  13: 1653450.582 ops/s
# Warmup Iteration  14: 1652590.913 ops/s
# Warmup Iteration  15: 1655180.357 ops/s
# Warmup Iteration  16: 1641894.280 ops/s
# Warmup Iteration  17: 1642519.906 ops/s
# Warmup Iteration  18: 1643312.162 ops/s
# Warmup Iteration  19: 1656584.207 ops/s
# Warmup Iteration  20: 1656235.362 ops/s
# Warmup Iteration  21: 1657759.798 ops/s
# Warmup Iteration  22: 1654221.629 ops/s
# Warmup Iteration  23: 1652397.175 ops/s
# Warmup Iteration  24: 1656360.200 ops/s
# Warmup Iteration  25: 1652065.539 ops/s
# Warmup Iteration  26: 1648452.476 ops/s
# Warmup Iteration  27: 1654542.865 ops/s
# Warmup Iteration  28: 1652483.116 ops/s
# Warmup Iteration  29: 1653542.221 ops/s
# Warmup Iteration  30: 1652662.608 ops/s
Iteration   1: 1651287.726 ops/s
Iteration   2: 1655037.071 ops/s
Iteration   3: 1656225.523 ops/s
Iteration   4: 1655678.831 ops/s
Iteration   5: 1652072.747 ops/s
Iteration   6: 1657340.167 ops/s
Iteration   7: 1657118.881 ops/s
Iteration   8: 1651758.292 ops/s
Iteration   9: 1648047.482 ops/s
Iteration  10: 1654768.870 ops/s
Iteration  11: 1642336.576 ops/s
Iteration  12: 1654805.306 ops/s
Iteration  13: 1652423.288 ops/s
Iteration  14: 1659066.622 ops/s
Iteration  15: 1653051.491 ops/s
Iteration  16: 1653172.795 ops/s
Iteration  17: 1657417.999 ops/s
Iteration  18: 1656111.615 ops/s
Iteration  19: 1652975.017 ops/s
Iteration  20: 1653655.334 ops/s
Iteration  21: 1650034.451 ops/s
Iteration  22: 1648279.045 ops/s
Iteration  23: 1652658.299 ops/s
Iteration  24: 1658164.958 ops/s
Iteration  25: 1651777.853 ops/s
Iteration  26: 1654625.869 ops/s
Iteration  27: 1653857.950 ops/s
Iteration  28: 1648190.533 ops/s
Iteration  29: 1649489.480 ops/s
Iteration  30: 1650089.210 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumByInt":
  1653050.643 ±(99.9%) 2421.307 ops/s [Average]
  (min, avg, max) = (1642336.576, 1653050.643, 1659066.622), stdev = 3624.099
  CI (99.9%): [1650629.336, 1655471.950] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_sumByInt  thrpt   30  1653050.643 ± 2421.307  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 802092.519 ops/s
# Warmup Iteration   2: 1416993.534 ops/s
# Warmup Iteration   3: 1586921.167 ops/s
# Warmup Iteration   4: 1592061.451 ops/s
# Warmup Iteration   5: 1596429.291 ops/s
# Warmup Iteration   6: 1328020.879 ops/s
# Warmup Iteration   7: 1599083.730 ops/s
# Warmup Iteration   8: 1595374.007 ops/s
# Warmup Iteration   9: 1595978.772 ops/s
# Warmup Iteration  10: 1595717.178 ops/s
# Warmup Iteration  11: 1597284.093 ops/s
# Warmup Iteration  12: 1599404.257 ops/s
# Warmup Iteration  13: 1598770.507 ops/s
# Warmup Iteration  14: 1595583.215 ops/s
# Warmup Iteration  15: 1598345.260 ops/s
# Warmup Iteration  16: 1592813.349 ops/s
# Warmup Iteration  17: 1597451.010 ops/s
# Warmup Iteration  18: 1597373.102 ops/s
# Warmup Iteration  19: 1595476.331 ops/s
# Warmup Iteration  20: 1597222.080 ops/s
# Warmup Iteration  21: 1601327.230 ops/s
# Warmup Iteration  22: 1597173.166 ops/s
# Warmup Iteration  23: 1600027.410 ops/s
# Warmup Iteration  24: 1599174.900 ops/s
# Warmup Iteration  25: 1597905.302 ops/s
# Warmup Iteration  26: 1592978.670 ops/s
# Warmup Iteration  27: 1596395.029 ops/s
# Warmup Iteration  28: 1596756.311 ops/s
# Warmup Iteration  29: 1596483.555 ops/s
# Warmup Iteration  30: 1599249.276 ops/s
Iteration   1: 1598252.193 ops/s
Iteration   2: 1593109.057 ops/s
Iteration   3: 1596328.638 ops/s
Iteration   4: 1599253.650 ops/s
Iteration   5: 1596216.166 ops/s
Iteration   6: 1598649.859 ops/s
Iteration   7: 1595588.171 ops/s
Iteration   8: 1599203.466 ops/s
Iteration   9: 1595524.779 ops/s
Iteration  10: 1593992.541 ops/s
Iteration  11: 1598091.515 ops/s
Iteration  12: 1591050.409 ops/s
Iteration  13: 1596878.144 ops/s
Iteration  14: 1596386.197 ops/s
Iteration  15: 1597971.101 ops/s
Iteration  16: 1591879.146 ops/s
Iteration  17: 1590518.027 ops/s
Iteration  18: 1599280.183 ops/s
Iteration  19: 1591807.375 ops/s
Iteration  20: 1593566.180 ops/s
Iteration  21: 1592831.131 ops/s
Iteration  22: 1603122.612 ops/s
Iteration  23: 1593346.925 ops/s
Iteration  24: 1593878.181 ops/s
Iteration  25: 1598667.095 ops/s
Iteration  26: 1597110.226 ops/s
Iteration  27: 1601422.543 ops/s
Iteration  28: 1596615.198 ops/s
Iteration  29: 1596916.109 ops/s
Iteration  30: 1599896.993 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumByLong":
  1596245.127 ±(99.9%) 2096.372 ops/s [Average]
  (min, avg, max) = (1590518.027, 1596245.127, 1603122.612), stdev = 3137.752
  CI (99.9%): [1594148.754, 1598341.499] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_sumByLong  thrpt   30  1596245.127 ± 2096.372  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 709546.641 ops/s
# Warmup Iteration   2: 1182817.821 ops/s
# Warmup Iteration   3: 1378551.855 ops/s
# Warmup Iteration   4: 1382080.122 ops/s
# Warmup Iteration   5: 1378338.675 ops/s
# Warmup Iteration   6: 1158583.139 ops/s
# Warmup Iteration   7: 1385467.338 ops/s
# Warmup Iteration   8: 1385114.349 ops/s
# Warmup Iteration   9: 1379131.650 ops/s
# Warmup Iteration  10: 1380269.508 ops/s
# Warmup Iteration  11: 1381934.075 ops/s
# Warmup Iteration  12: 1382677.395 ops/s
# Warmup Iteration  13: 1384925.310 ops/s
# Warmup Iteration  14: 1384172.083 ops/s
# Warmup Iteration  15: 1383376.072 ops/s
# Warmup Iteration  16: 1384588.908 ops/s
# Warmup Iteration  17: 1384573.429 ops/s
# Warmup Iteration  18: 1384145.409 ops/s
# Warmup Iteration  19: 1386605.334 ops/s
# Warmup Iteration  20: 1378200.113 ops/s
# Warmup Iteration  21: 1379928.394 ops/s
# Warmup Iteration  22: 1382068.610 ops/s
# Warmup Iteration  23: 1384803.946 ops/s
# Warmup Iteration  24: 1385271.330 ops/s
# Warmup Iteration  25: 1381592.719 ops/s
# Warmup Iteration  26: 1377835.705 ops/s
# Warmup Iteration  27: 1384290.776 ops/s
# Warmup Iteration  28: 1382898.944 ops/s
# Warmup Iteration  29: 1384781.031 ops/s
# Warmup Iteration  30: 1385118.106 ops/s
Iteration   1: 1386583.920 ops/s
Iteration   2: 1383178.008 ops/s
Iteration   3: 1384450.221 ops/s
Iteration   4: 1386280.989 ops/s
Iteration   5: 1383142.990 ops/s
Iteration   6: 1385183.538 ops/s
Iteration   7: 1378073.295 ops/s
Iteration   8: 1384782.414 ops/s
Iteration   9: 1388603.355 ops/s
Iteration  10: 1381509.473 ops/s
Iteration  11: 1383813.534 ops/s
Iteration  12: 1384470.281 ops/s
Iteration  13: 1379224.158 ops/s
Iteration  14: 1380085.531 ops/s
Iteration  15: 1382509.797 ops/s
Iteration  16: 1377416.792 ops/s
Iteration  17: 1382309.583 ops/s
Iteration  18: 1384432.880 ops/s
Iteration  19: 1385799.337 ops/s
Iteration  20: 1384589.987 ops/s
Iteration  21: 1382023.860 ops/s
Iteration  22: 1383554.103 ops/s
Iteration  23: 1383978.602 ops/s
Iteration  24: 1383116.905 ops/s
Iteration  25: 1381357.467 ops/s
Iteration  26: 1384806.204 ops/s
Iteration  27: 1384465.853 ops/s
Iteration  28: 1388300.772 ops/s
Iteration  29: 1383383.561 ops/s
Iteration  30: 1388122.421 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumDouble":
  1383651.661 ±(99.9%) 1813.086 ops/s [Average]
  (min, avg, max) = (1377416.792, 1383651.661, 1388603.355), stdev = 2713.741
  CI (99.9%): [1381838.575, 1385464.747] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_sumDouble  thrpt   30  1383651.661 ± 1813.086  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11.357 ops/s
# Warmup Iteration   2: 12.317 ops/s
# Warmup Iteration   3: 12.660 ops/s
# Warmup Iteration   4: 12.531 ops/s
# Warmup Iteration   5: 12.531 ops/s
# Warmup Iteration   6: 12.586 ops/s
# Warmup Iteration   7: 12.450 ops/s
# Warmup Iteration   8: 12.648 ops/s
# Warmup Iteration   9: 12.622 ops/s
# Warmup Iteration  10: 12.591 ops/s
# Warmup Iteration  11: 13.091 ops/s
# Warmup Iteration  12: 13.695 ops/s
# Warmup Iteration  13: 13.786 ops/s
# Warmup Iteration  14: 13.740 ops/s
# Warmup Iteration  15: 13.541 ops/s
# Warmup Iteration  16: 13.676 ops/s
# Warmup Iteration  17: 13.621 ops/s
# Warmup Iteration  18: 13.539 ops/s
# Warmup Iteration  19: 13.268 ops/s
# Warmup Iteration  20: 13.725 ops/s
# Warmup Iteration  21: 13.789 ops/s
# Warmup Iteration  22: 13.735 ops/s
# Warmup Iteration  23: 13.672 ops/s
# Warmup Iteration  24: 13.617 ops/s
# Warmup Iteration  25: 13.609 ops/s
# Warmup Iteration  26: 13.447 ops/s
# Warmup Iteration  27: 13.651 ops/s
# Warmup Iteration  28: 13.562 ops/s
# Warmup Iteration  29: 13.542 ops/s
# Warmup Iteration  30: 13.722 ops/s
Iteration   1: 13.443 ops/s
Iteration   2: 13.455 ops/s
Iteration   3: 12.954 ops/s
Iteration   4: 13.676 ops/s
Iteration   5: 13.485 ops/s
Iteration   6: 13.461 ops/s
Iteration   7: 13.741 ops/s
Iteration   8: 13.822 ops/s
Iteration   9: 13.837 ops/s
Iteration  10: 13.717 ops/s
Iteration  11: 13.384 ops/s
Iteration  12: 13.754 ops/s
Iteration  13: 13.697 ops/s
Iteration  14: 13.587 ops/s
Iteration  15: 13.787 ops/s
Iteration  16: 13.712 ops/s
Iteration  17: 13.727 ops/s
Iteration  18: 13.737 ops/s
Iteration  19: 13.684 ops/s
Iteration  20: 13.763 ops/s
Iteration  21: 13.510 ops/s
Iteration  22: 13.816 ops/s
Iteration  23: 13.694 ops/s
Iteration  24: 13.798 ops/s
Iteration  25: 13.649 ops/s
Iteration  26: 13.714 ops/s
Iteration  27: 13.764 ops/s
Iteration  28: 13.446 ops/s
Iteration  29: 13.422 ops/s
Iteration  30: 13.802 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1":
  13.635 ±(99.9%) 0.127 ops/s [Average]
  (min, avg, max) = (12.954, 13.635, 13.837), stdev = 0.190
  CI (99.9%): [13.508, 13.761] (assumes normal distribution)


# Run complete. Total time: 00:01:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt   Score   Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1  thrpt   30  13.635 ± 0.127  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11.571 ops/s
# Warmup Iteration   2: 12.771 ops/s
# Warmup Iteration   3: 12.549 ops/s
# Warmup Iteration   4: 12.733 ops/s
# Warmup Iteration   5: 12.497 ops/s
# Warmup Iteration   6: 12.549 ops/s
# Warmup Iteration   7: 12.670 ops/s
# Warmup Iteration   8: 12.620 ops/s
# Warmup Iteration   9: 12.618 ops/s
# Warmup Iteration  10: 12.440 ops/s
# Warmup Iteration  11: 13.368 ops/s
# Warmup Iteration  12: 13.493 ops/s
# Warmup Iteration  13: 13.424 ops/s
# Warmup Iteration  14: 13.316 ops/s
# Warmup Iteration  15: 12.902 ops/s
# Warmup Iteration  16: 12.802 ops/s
# Warmup Iteration  17: 13.279 ops/s
# Warmup Iteration  18: 13.381 ops/s
# Warmup Iteration  19: 13.163 ops/s
# Warmup Iteration  20: 12.831 ops/s
# Warmup Iteration  21: 13.205 ops/s
# Warmup Iteration  22: 13.260 ops/s
# Warmup Iteration  23: 13.275 ops/s
# Warmup Iteration  24: 13.486 ops/s
# Warmup Iteration  25: 13.431 ops/s
# Warmup Iteration  26: 13.347 ops/s
# Warmup Iteration  27: 13.161 ops/s
# Warmup Iteration  28: 13.015 ops/s
# Warmup Iteration  29: 13.174 ops/s
# Warmup Iteration  30: 12.734 ops/s
Iteration   1: 13.271 ops/s
Iteration   2: 13.409 ops/s
Iteration   3: 13.283 ops/s
Iteration   4: 13.311 ops/s
Iteration   5: 13.058 ops/s
Iteration   6: 13.287 ops/s
Iteration   7: 13.157 ops/s
Iteration   8: 13.138 ops/s
Iteration   9: 12.878 ops/s
Iteration  10: 13.140 ops/s
Iteration  11: 13.016 ops/s
Iteration  12: 13.148 ops/s
Iteration  13: 13.060 ops/s
Iteration  14: 13.266 ops/s
Iteration  15: 13.232 ops/s
Iteration  16: 13.202 ops/s
Iteration  17: 12.954 ops/s
Iteration  18: 12.934 ops/s
Iteration  19: 13.022 ops/s
Iteration  20: 12.972 ops/s
Iteration  21: 13.543 ops/s
Iteration  22: 13.549 ops/s
Iteration  23: 13.524 ops/s
Iteration  24: 13.684 ops/s
Iteration  25: 13.604 ops/s
Iteration  26: 13.769 ops/s
Iteration  27: 13.720 ops/s
Iteration  28: 13.678 ops/s
Iteration  29: 13.795 ops/s
Iteration  30: 13.536 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2":
  13.305 ±(99.9%) 0.184 ops/s [Average]
  (min, avg, max) = (12.878, 13.305, 13.795), stdev = 0.275
  CI (99.9%): [13.121, 13.488] (assumes normal distribution)


# Run complete. Total time: 00:01:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt   Score   Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2  thrpt   30  13.305 ± 0.184  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 748702.556 ops/s
# Warmup Iteration   2: 1270564.659 ops/s
# Warmup Iteration   3: 1429405.576 ops/s
# Warmup Iteration   4: 1432335.343 ops/s
# Warmup Iteration   5: 1437229.507 ops/s
# Warmup Iteration   6: 1209721.328 ops/s
# Warmup Iteration   7: 1444962.920 ops/s
# Warmup Iteration   8: 1447691.286 ops/s
# Warmup Iteration   9: 1444133.142 ops/s
# Warmup Iteration  10: 1448487.941 ops/s
# Warmup Iteration  11: 1444292.682 ops/s
# Warmup Iteration  12: 1446752.426 ops/s
# Warmup Iteration  13: 1444517.267 ops/s
# Warmup Iteration  14: 1446220.570 ops/s
# Warmup Iteration  15: 1448659.869 ops/s
# Warmup Iteration  16: 1449645.167 ops/s
# Warmup Iteration  17: 1442636.701 ops/s
# Warmup Iteration  18: 1439681.094 ops/s
# Warmup Iteration  19: 1441346.061 ops/s
# Warmup Iteration  20: 1443488.336 ops/s
# Warmup Iteration  21: 1445566.689 ops/s
# Warmup Iteration  22: 1444212.891 ops/s
# Warmup Iteration  23: 1443263.968 ops/s
# Warmup Iteration  24: 1441001.431 ops/s
# Warmup Iteration  25: 1441167.214 ops/s
# Warmup Iteration  26: 1441841.718 ops/s
# Warmup Iteration  27: 1442237.854 ops/s
# Warmup Iteration  28: 1441867.553 ops/s
# Warmup Iteration  29: 1442210.427 ops/s
# Warmup Iteration  30: 1440592.811 ops/s
Iteration   1: 1441001.722 ops/s
Iteration   2: 1440373.286 ops/s
Iteration   3: 1434987.514 ops/s
Iteration   4: 1443333.369 ops/s
Iteration   5: 1442267.446 ops/s
Iteration   6: 1444794.085 ops/s
Iteration   7: 1441276.871 ops/s
Iteration   8: 1442736.141 ops/s
Iteration   9: 1442854.505 ops/s
Iteration  10: 1445517.299 ops/s
Iteration  11: 1445081.751 ops/s
Iteration  12: 1440872.012 ops/s
Iteration  13: 1438627.431 ops/s
Iteration  14: 1439865.976 ops/s
Iteration  15: 1444135.760 ops/s
Iteration  16: 1444825.604 ops/s
Iteration  17: 1440432.979 ops/s
Iteration  18: 1434128.060 ops/s
Iteration  19: 1448754.734 ops/s
Iteration  20: 1442061.867 ops/s
Iteration  21: 1446809.706 ops/s
Iteration  22: 1442370.548 ops/s
Iteration  23: 1441519.008 ops/s
Iteration  24: 1447262.002 ops/s
Iteration  25: 1441334.857 ops/s
Iteration  26: 1443640.139 ops/s
Iteration  27: 1443122.115 ops/s
Iteration  28: 1445246.005 ops/s
Iteration  29: 1437506.803 ops/s
Iteration  30: 1446145.277 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumFloat":
  1442429.496 ±(99.9%) 2232.812 ops/s [Average]
  (min, avg, max) = (1434128.060, 1442429.496, 1448754.734), stdev = 3341.969
  CI (99.9%): [1440196.683, 1444662.308] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_sumFloat  thrpt   30  1442429.496 ± 2232.812  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumFloatConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumFloatConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10.942 ops/s
# Warmup Iteration   2: 12.498 ops/s
# Warmup Iteration   3: 12.512 ops/s
# Warmup Iteration   4: 12.534 ops/s
# Warmup Iteration   5: 12.510 ops/s
# Warmup Iteration   6: 12.611 ops/s
# Warmup Iteration   7: 12.372 ops/s
# Warmup Iteration   8: 12.380 ops/s
# Warmup Iteration   9: 12.367 ops/s
# Warmup Iteration  10: 12.522 ops/s
# Warmup Iteration  11: 13.184 ops/s
# Warmup Iteration  12: 13.592 ops/s
# Warmup Iteration  13: 13.653 ops/s
# Warmup Iteration  14: 13.219 ops/s
# Warmup Iteration  15: 13.302 ops/s
# Warmup Iteration  16: 13.275 ops/s
# Warmup Iteration  17: 12.934 ops/s
# Warmup Iteration  18: 13.490 ops/s
# Warmup Iteration  19: 13.425 ops/s
# Warmup Iteration  20: 13.420 ops/s
# Warmup Iteration  21: 13.331 ops/s
# Warmup Iteration  22: 13.378 ops/s
# Warmup Iteration  23: 12.999 ops/s
# Warmup Iteration  24: 13.327 ops/s
# Warmup Iteration  25: 13.462 ops/s
# Warmup Iteration  26: 13.225 ops/s
# Warmup Iteration  27: 13.249 ops/s
# Warmup Iteration  28: 13.415 ops/s
# Warmup Iteration  29: 13.285 ops/s
# Warmup Iteration  30: 13.243 ops/s
Iteration   1: 13.631 ops/s
Iteration   2: 13.603 ops/s
Iteration   3: 13.452 ops/s
Iteration   4: 13.494 ops/s
Iteration   5: 13.724 ops/s
Iteration   6: 13.636 ops/s
Iteration   7: 13.639 ops/s
Iteration   8: 13.416 ops/s
Iteration   9: 13.314 ops/s
Iteration  10: 13.495 ops/s
Iteration  11: 13.669 ops/s
Iteration  12: 13.292 ops/s
Iteration  13: 13.656 ops/s
Iteration  14: 13.537 ops/s
Iteration  15: 13.291 ops/s
Iteration  16: 13.649 ops/s
Iteration  17: 13.505 ops/s
Iteration  18: 13.629 ops/s
Iteration  19: 13.684 ops/s
Iteration  20: 13.607 ops/s
Iteration  21: 13.588 ops/s
Iteration  22: 13.605 ops/s
Iteration  23: 13.524 ops/s
Iteration  24: 13.520 ops/s
Iteration  25: 13.610 ops/s
Iteration  26: 13.580 ops/s
Iteration  27: 13.559 ops/s
Iteration  28: 13.311 ops/s
Iteration  29: 13.607 ops/s
Iteration  30: 13.446 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumFloatConsistentRounding1":
  13.542 ±(99.9%) 0.081 ops/s [Average]
  (min, avg, max) = (13.291, 13.542, 13.724), stdev = 0.121
  CI (99.9%): [13.462, 13.623] (assumes normal distribution)


# Run complete. Total time: 00:01:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt   Score   Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_sumFloatConsistentRounding1  thrpt   30  13.542 ± 0.081  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumFloatConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumFloatConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11.160 ops/s
# Warmup Iteration   2: 12.457 ops/s
# Warmup Iteration   3: 12.444 ops/s
# Warmup Iteration   4: 12.407 ops/s
# Warmup Iteration   5: 12.446 ops/s
# Warmup Iteration   6: 12.273 ops/s
# Warmup Iteration   7: 12.413 ops/s
# Warmup Iteration   8: 12.677 ops/s
# Warmup Iteration   9: 12.611 ops/s
# Warmup Iteration  10: 12.429 ops/s
# Warmup Iteration  11: 13.155 ops/s
# Warmup Iteration  12: 13.541 ops/s
# Warmup Iteration  13: 13.492 ops/s
# Warmup Iteration  14: 13.600 ops/s
# Warmup Iteration  15: 13.334 ops/s
# Warmup Iteration  16: 13.312 ops/s
# Warmup Iteration  17: 13.544 ops/s
# Warmup Iteration  18: 13.569 ops/s
# Warmup Iteration  19: 13.601 ops/s
# Warmup Iteration  20: 13.612 ops/s
# Warmup Iteration  21: 13.511 ops/s
# Warmup Iteration  22: 13.404 ops/s
# Warmup Iteration  23: 13.490 ops/s
# Warmup Iteration  24: 13.722 ops/s
# Warmup Iteration  25: 13.632 ops/s
# Warmup Iteration  26: 13.513 ops/s
# Warmup Iteration  27: 13.392 ops/s
# Warmup Iteration  28: 13.295 ops/s
# Warmup Iteration  29: 13.472 ops/s
# Warmup Iteration  30: 13.291 ops/s
Iteration   1: 13.344 ops/s
Iteration   2: 12.954 ops/s
Iteration   3: 12.694 ops/s
Iteration   4: 13.470 ops/s
Iteration   5: 13.507 ops/s
Iteration   6: 13.556 ops/s
Iteration   7: 13.379 ops/s
Iteration   8: 13.669 ops/s
Iteration   9: 13.609 ops/s
Iteration  10: 13.583 ops/s
Iteration  11: 13.554 ops/s
Iteration  12: 13.329 ops/s
Iteration  13: 13.276 ops/s
Iteration  14: 13.648 ops/s
Iteration  15: 13.659 ops/s
Iteration  16: 13.609 ops/s
Iteration  17: 13.492 ops/s
Iteration  18: 13.661 ops/s
Iteration  19: 13.495 ops/s
Iteration  20: 13.339 ops/s
Iteration  21: 13.375 ops/s
Iteration  22: 13.560 ops/s
Iteration  23: 13.639 ops/s
Iteration  24: 13.714 ops/s
Iteration  25: 13.436 ops/s
Iteration  26: 13.317 ops/s
Iteration  27: 13.630 ops/s
Iteration  28: 13.510 ops/s
Iteration  29: 13.753 ops/s
Iteration  30: 13.527 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumFloatConsistentRounding2":
  13.476 ±(99.9%) 0.148 ops/s [Average]
  (min, avg, max) = (12.694, 13.476, 13.753), stdev = 0.221
  CI (99.9%): [13.328, 13.624] (assumes normal distribution)


# Run complete. Total time: 00:01:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt   Score   Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_sumFloatConsistentRounding2  thrpt   30  13.476 ± 0.148  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 685139.919 ops/s
# Warmup Iteration   2: 1128756.007 ops/s
# Warmup Iteration   3: 1279094.701 ops/s
# Warmup Iteration   4: 1290317.756 ops/s
# Warmup Iteration   5: 1294330.962 ops/s
# Warmup Iteration   6: 1082134.303 ops/s
# Warmup Iteration   7: 1295797.026 ops/s
# Warmup Iteration   8: 1288600.212 ops/s
# Warmup Iteration   9: 1296486.424 ops/s
# Warmup Iteration  10: 1297243.935 ops/s
# Warmup Iteration  11: 1294092.459 ops/s
# Warmup Iteration  12: 1295160.927 ops/s
# Warmup Iteration  13: 1293487.814 ops/s
# Warmup Iteration  14: 1288740.667 ops/s
# Warmup Iteration  15: 1298584.880 ops/s
# Warmup Iteration  16: 1292360.716 ops/s
# Warmup Iteration  17: 1293398.131 ops/s
# Warmup Iteration  18: 1297874.005 ops/s
# Warmup Iteration  19: 1295787.476 ops/s
# Warmup Iteration  20: 1292892.355 ops/s
# Warmup Iteration  21: 1286955.349 ops/s
# Warmup Iteration  22: 1297183.616 ops/s
# Warmup Iteration  23: 1291021.353 ops/s
# Warmup Iteration  24: 1294178.591 ops/s
# Warmup Iteration  25: 1295988.098 ops/s
# Warmup Iteration  26: 1292439.469 ops/s
# Warmup Iteration  27: 1288495.021 ops/s
# Warmup Iteration  28: 1297667.071 ops/s
# Warmup Iteration  29: 1293420.229 ops/s
# Warmup Iteration  30: 1293940.941 ops/s
Iteration   1: 1298260.255 ops/s
Iteration   2: 1292020.948 ops/s
Iteration   3: 1292552.210 ops/s
Iteration   4: 1297034.351 ops/s
Iteration   5: 1300525.924 ops/s
Iteration   6: 1295663.632 ops/s
Iteration   7: 1300082.253 ops/s
Iteration   8: 1296755.810 ops/s
Iteration   9: 1292860.601 ops/s
Iteration  10: 1294683.503 ops/s
Iteration  11: 1283467.376 ops/s
Iteration  12: 1274646.547 ops/s
Iteration  13: 1276809.490 ops/s
Iteration  14: 1292215.708 ops/s
Iteration  15: 1296179.890 ops/s
Iteration  16: 1300581.941 ops/s
Iteration  17: 1297201.955 ops/s
Iteration  18: 1299542.013 ops/s
Iteration  19: 1295516.017 ops/s
Iteration  20: 1291908.209 ops/s
Iteration  21: 1292151.532 ops/s
Iteration  22: 1293288.628 ops/s
Iteration  23: 1294339.893 ops/s
Iteration  24: 1298658.745 ops/s
Iteration  25: 1280703.583 ops/s
Iteration  26: 1299756.602 ops/s
Iteration  27: 1292635.202 ops/s
Iteration  28: 1292844.981 ops/s
Iteration  29: 1296622.565 ops/s
Iteration  30: 1295383.727 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumInteger":
  1293496.470 ±(99.9%) 4377.667 ops/s [Average]
  (min, avg, max) = (1274646.547, 1293496.470, 1300581.941), stdev = 6552.286
  CI (99.9%): [1289118.803, 1297874.137] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_sumInteger  thrpt   30  1293496.470 ± 4377.667  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 765349.465 ops/s
# Warmup Iteration   2: 1245986.451 ops/s
# Warmup Iteration   3: 1421443.506 ops/s
# Warmup Iteration   4: 1429454.556 ops/s
# Warmup Iteration   5: 1422439.240 ops/s
# Warmup Iteration   6: 1208072.995 ops/s
# Warmup Iteration   7: 1418333.760 ops/s
# Warmup Iteration   8: 1430414.422 ops/s
# Warmup Iteration   9: 1429058.008 ops/s
# Warmup Iteration  10: 1427264.937 ops/s
# Warmup Iteration  11: 1427052.436 ops/s
# Warmup Iteration  12: 1433780.844 ops/s
# Warmup Iteration  13: 1430574.358 ops/s
# Warmup Iteration  14: 1429665.165 ops/s
# Warmup Iteration  15: 1432200.884 ops/s
# Warmup Iteration  16: 1427753.622 ops/s
# Warmup Iteration  17: 1442670.974 ops/s
# Warmup Iteration  18: 1444622.124 ops/s
# Warmup Iteration  19: 1446792.182 ops/s
# Warmup Iteration  20: 1441934.206 ops/s
# Warmup Iteration  21: 1445418.277 ops/s
# Warmup Iteration  22: 1446215.371 ops/s
# Warmup Iteration  23: 1448784.414 ops/s
# Warmup Iteration  24: 1445847.280 ops/s
# Warmup Iteration  25: 1447578.635 ops/s
# Warmup Iteration  26: 1446580.528 ops/s
# Warmup Iteration  27: 1446194.795 ops/s
# Warmup Iteration  28: 1447609.715 ops/s
# Warmup Iteration  29: 1445788.490 ops/s
# Warmup Iteration  30: 1444596.641 ops/s
Iteration   1: 1439903.932 ops/s
Iteration   2: 1448769.268 ops/s
Iteration   3: 1447806.751 ops/s
Iteration   4: 1448340.866 ops/s
Iteration   5: 1447895.079 ops/s
Iteration   6: 1444227.847 ops/s
Iteration   7: 1448069.662 ops/s
Iteration   8: 1441589.991 ops/s
Iteration   9: 1448442.396 ops/s
Iteration  10: 1445746.382 ops/s
Iteration  11: 1449250.717 ops/s
Iteration  12: 1448889.607 ops/s
Iteration  13: 1443977.102 ops/s
Iteration  14: 1446671.827 ops/s
Iteration  15: 1449085.748 ops/s
Iteration  16: 1444616.091 ops/s
Iteration  17: 1449862.232 ops/s
Iteration  18: 1446424.209 ops/s
Iteration  19: 1449703.766 ops/s
Iteration  20: 1446249.125 ops/s
Iteration  21: 1448725.963 ops/s
Iteration  22: 1447463.272 ops/s
Iteration  23: 1446206.237 ops/s
Iteration  24: 1444464.226 ops/s
Iteration  25: 1445469.740 ops/s
Iteration  26: 1447777.878 ops/s
Iteration  27: 1445612.668 ops/s
Iteration  28: 1438902.330 ops/s
Iteration  29: 1446472.728 ops/s
Iteration  30: 1449228.528 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_sumLong":
  1446528.206 ±(99.9%) 1848.789 ops/s [Average]
  (min, avg, max) = (1438902.330, 1446528.206, 1449862.232), stdev = 2767.180
  CI (99.9%): [1444679.417, 1448376.994] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_sumLong  thrpt   30  1446528.206 ± 1848.789  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_summarizeDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_summarizeDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2055573.320 ops/s
# Warmup Iteration   2: 4284492.664 ops/s
# Warmup Iteration   3: 4475204.860 ops/s
# Warmup Iteration   4: 4502172.185 ops/s
# Warmup Iteration   5: 3768068.849 ops/s
# Warmup Iteration   6: 4496211.434 ops/s
# Warmup Iteration   7: 4513386.220 ops/s
# Warmup Iteration   8: 4500362.070 ops/s
# Warmup Iteration   9: 4501899.501 ops/s
# Warmup Iteration  10: 4500071.997 ops/s
# Warmup Iteration  11: 4515213.668 ops/s
# Warmup Iteration  12: 4504311.851 ops/s
# Warmup Iteration  13: 4456306.004 ops/s
# Warmup Iteration  14: 4503097.106 ops/s
# Warmup Iteration  15: 4499033.461 ops/s
# Warmup Iteration  16: 4499420.644 ops/s
# Warmup Iteration  17: 4494974.529 ops/s
# Warmup Iteration  18: 4493584.153 ops/s
# Warmup Iteration  19: 4485729.596 ops/s
# Warmup Iteration  20: 4495950.679 ops/s
# Warmup Iteration  21: 4475934.334 ops/s
# Warmup Iteration  22: 4497240.883 ops/s
# Warmup Iteration  23: 4485953.554 ops/s
# Warmup Iteration  24: 4494753.234 ops/s
# Warmup Iteration  25: 4501034.725 ops/s
# Warmup Iteration  26: 4501373.962 ops/s
# Warmup Iteration  27: 4498155.852 ops/s
# Warmup Iteration  28: 4473797.168 ops/s
# Warmup Iteration  29: 4507182.839 ops/s
# Warmup Iteration  30: 4482700.132 ops/s
Iteration   1: 4492792.118 ops/s
Iteration   2: 4499419.720 ops/s
Iteration   3: 4500606.967 ops/s
Iteration   4: 4507671.826 ops/s
Iteration   5: 4510084.840 ops/s
Iteration   6: 4507024.109 ops/s
Iteration   7: 4503770.809 ops/s
Iteration   8: 4513245.148 ops/s
Iteration   9: 4503696.158 ops/s
Iteration  10: 4500896.221 ops/s
Iteration  11: 4499659.374 ops/s
Iteration  12: 4521915.521 ops/s
Iteration  13: 4500950.124 ops/s
Iteration  14: 4510473.285 ops/s
Iteration  15: 4512724.568 ops/s
Iteration  16: 4497380.439 ops/s
Iteration  17: 4508412.979 ops/s
Iteration  18: 4497878.071 ops/s
Iteration  19: 4501490.266 ops/s
Iteration  20: 4503402.382 ops/s
Iteration  21: 4500177.326 ops/s
Iteration  22: 4500351.691 ops/s
Iteration  23: 4500619.595 ops/s
Iteration  24: 4483978.249 ops/s
Iteration  25: 4471485.923 ops/s
Iteration  26: 4475176.628 ops/s
Iteration  27: 4502636.166 ops/s
Iteration  28: 4523547.020 ops/s
Iteration  29: 4510090.774 ops/s
Iteration  30: 4452333.665 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_summarizeDouble":
  4500463.065 ±(99.9%) 9554.569 ops/s [Average]
  (min, avg, max) = (4452333.665, 4500463.065, 4523547.020), stdev = 14300.830
  CI (99.9%): [4490908.496, 4510017.634] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_summarizeDouble  thrpt   30  4500463.065 ± 9554.569  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_summarizeFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_summarizeFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2011612.072 ops/s
# Warmup Iteration   2: 3963290.760 ops/s
# Warmup Iteration   3: 4187692.444 ops/s
# Warmup Iteration   4: 4211272.100 ops/s
# Warmup Iteration   5: 3540293.820 ops/s
# Warmup Iteration   6: 4211783.380 ops/s
# Warmup Iteration   7: 4218112.132 ops/s
# Warmup Iteration   8: 4222409.590 ops/s
# Warmup Iteration   9: 4220373.367 ops/s
# Warmup Iteration  10: 4221324.678 ops/s
# Warmup Iteration  11: 4223240.391 ops/s
# Warmup Iteration  12: 4202820.114 ops/s
# Warmup Iteration  13: 4216442.029 ops/s
# Warmup Iteration  14: 4211015.415 ops/s
# Warmup Iteration  15: 4218084.737 ops/s
# Warmup Iteration  16: 4211159.013 ops/s
# Warmup Iteration  17: 4208703.368 ops/s
# Warmup Iteration  18: 4215763.824 ops/s
# Warmup Iteration  19: 4188194.947 ops/s
# Warmup Iteration  20: 4206284.393 ops/s
# Warmup Iteration  21: 4196512.845 ops/s
# Warmup Iteration  22: 4207263.553 ops/s
# Warmup Iteration  23: 4218908.051 ops/s
# Warmup Iteration  24: 4218141.289 ops/s
# Warmup Iteration  25: 4206895.699 ops/s
# Warmup Iteration  26: 4218171.640 ops/s
# Warmup Iteration  27: 4207791.272 ops/s
# Warmup Iteration  28: 4214530.341 ops/s
# Warmup Iteration  29: 4204132.612 ops/s
# Warmup Iteration  30: 4207808.147 ops/s
Iteration   1: 4204505.101 ops/s
Iteration   2: 4217697.672 ops/s
Iteration   3: 4200364.995 ops/s
Iteration   4: 4215524.597 ops/s
Iteration   5: 4219848.984 ops/s
Iteration   6: 4207282.385 ops/s
Iteration   7: 4212150.494 ops/s
Iteration   8: 4207675.291 ops/s
Iteration   9: 4212180.544 ops/s
Iteration  10: 4192953.043 ops/s
Iteration  11: 4218182.539 ops/s
Iteration  12: 4210231.102 ops/s
Iteration  13: 4208912.300 ops/s
Iteration  14: 4207015.926 ops/s
Iteration  15: 4219871.387 ops/s
Iteration  16: 4216185.721 ops/s
Iteration  17: 4218345.762 ops/s
Iteration  18: 4216427.028 ops/s
Iteration  19: 4209266.970 ops/s
Iteration  20: 4213968.528 ops/s
Iteration  21: 4218481.455 ops/s
Iteration  22: 4180060.085 ops/s
Iteration  23: 4198549.701 ops/s
Iteration  24: 4222098.729 ops/s
Iteration  25: 4204258.774 ops/s
Iteration  26: 4212676.699 ops/s
Iteration  27: 4190470.450 ops/s
Iteration  28: 4213933.786 ops/s
Iteration  29: 4206286.727 ops/s
Iteration  30: 4195913.469 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_summarizeFloat":
  4209044.008 ±(99.9%) 6600.291 ops/s [Average]
  (min, avg, max) = (4180060.085, 4209044.008, 4222098.729), stdev = 9879.006
  CI (99.9%): [4202443.717, 4215644.299] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_summarizeFloat  thrpt   30  4209044.008 ± 6600.291  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_summarizeInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_summarizeInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2031247.778 ops/s
# Warmup Iteration   2: 4265035.687 ops/s
# Warmup Iteration   3: 4403607.543 ops/s
# Warmup Iteration   4: 4443632.252 ops/s
# Warmup Iteration   5: 3706433.405 ops/s
# Warmup Iteration   6: 4407627.438 ops/s
# Warmup Iteration   7: 4421664.988 ops/s
# Warmup Iteration   8: 4386351.776 ops/s
# Warmup Iteration   9: 4413442.799 ops/s
# Warmup Iteration  10: 4417928.223 ops/s
# Warmup Iteration  11: 4421568.339 ops/s
# Warmup Iteration  12: 4411283.729 ops/s
# Warmup Iteration  13: 4415790.342 ops/s
# Warmup Iteration  14: 4400710.056 ops/s
# Warmup Iteration  15: 4418091.628 ops/s
# Warmup Iteration  16: 4412793.226 ops/s
# Warmup Iteration  17: 4431735.674 ops/s
# Warmup Iteration  18: 4441402.415 ops/s
# Warmup Iteration  19: 4439511.103 ops/s
# Warmup Iteration  20: 4428243.424 ops/s
# Warmup Iteration  21: 4448556.844 ops/s
# Warmup Iteration  22: 4414431.108 ops/s
# Warmup Iteration  23: 4438445.226 ops/s
# Warmup Iteration  24: 4434543.469 ops/s
# Warmup Iteration  25: 4436566.123 ops/s
# Warmup Iteration  26: 4435208.653 ops/s
# Warmup Iteration  27: 4445154.681 ops/s
# Warmup Iteration  28: 4427546.837 ops/s
# Warmup Iteration  29: 4442162.550 ops/s
# Warmup Iteration  30: 4432641.479 ops/s
Iteration   1: 4455446.581 ops/s
Iteration   2: 4446975.863 ops/s
Iteration   3: 4438492.898 ops/s
Iteration   4: 4446228.730 ops/s
Iteration   5: 4434692.913 ops/s
Iteration   6: 4395883.412 ops/s
Iteration   7: 4426117.695 ops/s
Iteration   8: 4437303.611 ops/s
Iteration   9: 4448953.297 ops/s
Iteration  10: 4442100.641 ops/s
Iteration  11: 4433839.801 ops/s
Iteration  12: 4436149.069 ops/s
Iteration  13: 4445519.405 ops/s
Iteration  14: 4441128.890 ops/s
Iteration  15: 4444948.388 ops/s
Iteration  16: 4437432.457 ops/s
Iteration  17: 4454039.140 ops/s
Iteration  18: 4440694.282 ops/s
Iteration  19: 4445895.446 ops/s
Iteration  20: 4449804.812 ops/s
Iteration  21: 4446317.808 ops/s
Iteration  22: 4438924.067 ops/s
Iteration  23: 4420170.594 ops/s
Iteration  24: 4441402.031 ops/s
Iteration  25: 4409833.150 ops/s
Iteration  26: 4438988.834 ops/s
Iteration  27: 4445583.516 ops/s
Iteration  28: 4459765.056 ops/s
Iteration  29: 4439467.907 ops/s
Iteration  30: 4436028.151 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_summarizeInt":
  4439270.948 ±(99.9%) 8596.084 ops/s [Average]
  (min, avg, max) = (4395883.412, 4439270.948, 4459765.056), stdev = 12866.215
  CI (99.9%): [4430674.864, 4447867.033] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_summarizeInt  thrpt   30  4439270.948 ± 8596.084  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_summarizeLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_summarizeLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2017150.844 ops/s
# Warmup Iteration   2: 4315171.643 ops/s
# Warmup Iteration   3: 4406310.958 ops/s
# Warmup Iteration   4: 4439858.852 ops/s
# Warmup Iteration   5: 3716084.357 ops/s
# Warmup Iteration   6: 4447818.386 ops/s
# Warmup Iteration   7: 4407117.764 ops/s
# Warmup Iteration   8: 4430068.331 ops/s
# Warmup Iteration   9: 4448124.563 ops/s
# Warmup Iteration  10: 4440239.660 ops/s
# Warmup Iteration  11: 4426421.590 ops/s
# Warmup Iteration  12: 4449011.270 ops/s
# Warmup Iteration  13: 4447861.156 ops/s
# Warmup Iteration  14: 4453216.420 ops/s
# Warmup Iteration  15: 4371989.721 ops/s
# Warmup Iteration  16: 4438550.977 ops/s
# Warmup Iteration  17: 4425310.025 ops/s
# Warmup Iteration  18: 4440001.606 ops/s
# Warmup Iteration  19: 4444353.630 ops/s
# Warmup Iteration  20: 4447004.590 ops/s
# Warmup Iteration  21: 4415684.465 ops/s
# Warmup Iteration  22: 4422061.240 ops/s
# Warmup Iteration  23: 4412140.523 ops/s
# Warmup Iteration  24: 4427112.183 ops/s
# Warmup Iteration  25: 4450025.947 ops/s
# Warmup Iteration  26: 4431159.440 ops/s
# Warmup Iteration  27: 4433317.882 ops/s
# Warmup Iteration  28: 4445070.613 ops/s
# Warmup Iteration  29: 4421933.641 ops/s
# Warmup Iteration  30: 4446473.366 ops/s
Iteration   1: 4436473.877 ops/s
Iteration   2: 4441905.760 ops/s
Iteration   3: 4444077.650 ops/s
Iteration   4: 4452380.248 ops/s
Iteration   5: 4423766.938 ops/s
Iteration   6: 4425652.111 ops/s
Iteration   7: 4421824.560 ops/s
Iteration   8: 4414060.294 ops/s
Iteration   9: 4439079.718 ops/s
Iteration  10: 4455065.980 ops/s
Iteration  11: 4452198.927 ops/s
Iteration  12: 4460712.148 ops/s
Iteration  13: 4459974.999 ops/s
Iteration  14: 4447608.129 ops/s
Iteration  15: 4420704.585 ops/s
Iteration  16: 4429805.090 ops/s
Iteration  17: 4455087.168 ops/s
Iteration  18: 4429299.822 ops/s
Iteration  19: 4434752.508 ops/s
Iteration  20: 4445979.401 ops/s
Iteration  21: 4449892.794 ops/s
Iteration  22: 4446432.295 ops/s
Iteration  23: 4408426.776 ops/s
Iteration  24: 4448202.593 ops/s
Iteration  25: 4434144.520 ops/s
Iteration  26: 4445721.260 ops/s
Iteration  27: 4445031.581 ops/s
Iteration  28: 4440176.392 ops/s
Iteration  29: 4426037.167 ops/s
Iteration  30: 4445170.877 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_summarizeLong":
  4439321.539 ±(99.9%) 9037.535 ops/s [Average]
  (min, avg, max) = (4408426.776, 4439321.539, 4460712.148), stdev = 13526.958
  CI (99.9%): [4430284.004, 4448359.074] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_summarizeLong  thrpt   30  4439321.539 ± 9037.535  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 183118.522 ops/s
# Warmup Iteration   2: 315946.081 ops/s
# Warmup Iteration   3: 365324.941 ops/s
# Warmup Iteration   4: 366963.635 ops/s
# Warmup Iteration   5: 367786.158 ops/s
# Warmup Iteration   6: 309379.987 ops/s
# Warmup Iteration   7: 368469.317 ops/s
# Warmup Iteration   8: 368427.815 ops/s
# Warmup Iteration   9: 368324.933 ops/s
# Warmup Iteration  10: 368412.973 ops/s
# Warmup Iteration  11: 368790.162 ops/s
# Warmup Iteration  12: 367955.748 ops/s
# Warmup Iteration  13: 368564.005 ops/s
# Warmup Iteration  14: 368507.212 ops/s
# Warmup Iteration  15: 368986.959 ops/s
# Warmup Iteration  16: 368162.860 ops/s
# Warmup Iteration  17: 368404.252 ops/s
# Warmup Iteration  18: 368780.173 ops/s
# Warmup Iteration  19: 369024.990 ops/s
# Warmup Iteration  20: 367881.526 ops/s
# Warmup Iteration  21: 368432.626 ops/s
# Warmup Iteration  22: 368765.051 ops/s
# Warmup Iteration  23: 367584.922 ops/s
# Warmup Iteration  24: 369245.799 ops/s
# Warmup Iteration  25: 368877.694 ops/s
# Warmup Iteration  26: 368831.325 ops/s
# Warmup Iteration  27: 369492.169 ops/s
# Warmup Iteration  28: 369081.916 ops/s
# Warmup Iteration  29: 368992.997 ops/s
# Warmup Iteration  30: 368977.849 ops/s
Iteration   1: 361874.937 ops/s
Iteration   2: 369126.403 ops/s
Iteration   3: 368131.769 ops/s
Iteration   4: 369455.471 ops/s
Iteration   5: 368727.540 ops/s
Iteration   6: 369585.138 ops/s
Iteration   7: 368868.834 ops/s
Iteration   8: 369480.759 ops/s
Iteration   9: 367975.115 ops/s
Iteration  10: 368015.544 ops/s
Iteration  11: 368699.186 ops/s
Iteration  12: 368348.908 ops/s
Iteration  13: 369835.115 ops/s
Iteration  14: 365411.109 ops/s
Iteration  15: 368114.439 ops/s
Iteration  16: 367834.499 ops/s
Iteration  17: 369151.055 ops/s
Iteration  18: 368799.165 ops/s
Iteration  19: 368783.784 ops/s
Iteration  20: 366668.281 ops/s
Iteration  21: 368088.687 ops/s
Iteration  22: 367111.206 ops/s
Iteration  23: 368291.239 ops/s
Iteration  24: 368564.764 ops/s
Iteration  25: 369019.285 ops/s
Iteration  26: 369228.933 ops/s
Iteration  27: 367901.852 ops/s
Iteration  28: 369737.177 ops/s
Iteration  29: 369007.597 ops/s
Iteration  30: 368418.947 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_take":
  368275.225 ±(99.9%) 1020.662 ops/s [Average]
  (min, avg, max) = (361874.937, 368275.225, 369835.115), stdev = 1527.679
  CI (99.9%): [367254.562, 369295.887] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_take  thrpt   30  368275.225 ± 1020.662  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 262772.038 ops/s
# Warmup Iteration   2: 478478.171 ops/s
# Warmup Iteration   3: 553521.829 ops/s
# Warmup Iteration   4: 553302.399 ops/s
# Warmup Iteration   5: 555110.579 ops/s
# Warmup Iteration   6: 466288.656 ops/s
# Warmup Iteration   7: 555495.023 ops/s
# Warmup Iteration   8: 554333.963 ops/s
# Warmup Iteration   9: 555429.715 ops/s
# Warmup Iteration  10: 554152.041 ops/s
# Warmup Iteration  11: 553339.482 ops/s
# Warmup Iteration  12: 554652.108 ops/s
# Warmup Iteration  13: 555349.696 ops/s
# Warmup Iteration  14: 554570.003 ops/s
# Warmup Iteration  15: 555077.456 ops/s
# Warmup Iteration  16: 554014.420 ops/s
# Warmup Iteration  17: 557967.591 ops/s
# Warmup Iteration  18: 556542.559 ops/s
# Warmup Iteration  19: 557661.864 ops/s
# Warmup Iteration  20: 554906.741 ops/s
# Warmup Iteration  21: 558842.843 ops/s
# Warmup Iteration  22: 556053.607 ops/s
# Warmup Iteration  23: 558009.356 ops/s
# Warmup Iteration  24: 557705.777 ops/s
# Warmup Iteration  25: 557966.072 ops/s
# Warmup Iteration  26: 558105.704 ops/s
# Warmup Iteration  27: 558215.097 ops/s
# Warmup Iteration  28: 558431.591 ops/s
# Warmup Iteration  29: 558051.387 ops/s
# Warmup Iteration  30: 557505.385 ops/s
Iteration   1: 558132.345 ops/s
Iteration   2: 556613.539 ops/s
Iteration   3: 558326.886 ops/s
Iteration   4: 557256.376 ops/s
Iteration   5: 558325.145 ops/s
Iteration   6: 554688.210 ops/s
Iteration   7: 557858.879 ops/s
Iteration   8: 556932.699 ops/s
Iteration   9: 559083.032 ops/s
Iteration  10: 556570.907 ops/s
Iteration  11: 558611.372 ops/s
Iteration  12: 557329.487 ops/s
Iteration  13: 555610.296 ops/s
Iteration  14: 552733.352 ops/s
Iteration  15: 556688.017 ops/s
Iteration  16: 559557.722 ops/s
Iteration  17: 555794.333 ops/s
Iteration  18: 558547.063 ops/s
Iteration  19: 558573.225 ops/s
Iteration  20: 556818.964 ops/s
Iteration  21: 558577.585 ops/s
Iteration  22: 558469.854 ops/s
Iteration  23: 557090.990 ops/s
Iteration  24: 557934.802 ops/s
Iteration  25: 558834.155 ops/s
Iteration  26: 559181.403 ops/s
Iteration  27: 556749.018 ops/s
Iteration  28: 555115.732 ops/s
Iteration  29: 557954.512 ops/s
Iteration  30: 558526.140 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_takeWhile":
  557416.201 ±(99.9%) 1013.770 ops/s [Average]
  (min, avg, max) = (552733.352, 557416.201, 559557.722), stdev = 1517.364
  CI (99.9%): [556402.431, 558429.972] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_takeWhile  thrpt   30  557416.201 ± 1013.770  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 543789.807 ops/s
# Warmup Iteration   2: 604402.897 ops/s
# Warmup Iteration   3: 785028.376 ops/s
# Warmup Iteration   4: 781640.074 ops/s
# Warmup Iteration   5: 781951.605 ops/s
# Warmup Iteration   6: 784516.282 ops/s
# Warmup Iteration   7: 778158.922 ops/s
# Warmup Iteration   8: 785587.728 ops/s
# Warmup Iteration   9: 786064.178 ops/s
# Warmup Iteration  10: 785756.936 ops/s
# Warmup Iteration  11: 665052.489 ops/s
# Warmup Iteration  12: 787753.242 ops/s
# Warmup Iteration  13: 783595.387 ops/s
# Warmup Iteration  14: 787484.063 ops/s
# Warmup Iteration  15: 783882.561 ops/s
# Warmup Iteration  16: 787791.830 ops/s
# Warmup Iteration  17: 824976.802 ops/s
# Warmup Iteration  18: 817819.134 ops/s
# Warmup Iteration  19: 819929.607 ops/s
# Warmup Iteration  20: 824432.141 ops/s
# Warmup Iteration  21: 823871.869 ops/s
# Warmup Iteration  22: 820322.467 ops/s
# Warmup Iteration  23: 821427.848 ops/s
# Warmup Iteration  24: 823726.494 ops/s
# Warmup Iteration  25: 822081.435 ops/s
# Warmup Iteration  26: 824040.614 ops/s
# Warmup Iteration  27: 822760.054 ops/s
# Warmup Iteration  28: 822298.355 ops/s
# Warmup Iteration  29: 820288.161 ops/s
# Warmup Iteration  30: 820490.157 ops/s
Iteration   1: 822311.059 ops/s
Iteration   2: 824111.803 ops/s
Iteration   3: 824860.065 ops/s
Iteration   4: 821408.099 ops/s
Iteration   5: 824710.839 ops/s
Iteration   6: 823414.739 ops/s
Iteration   7: 819925.806 ops/s
Iteration   8: 823291.458 ops/s
Iteration   9: 824083.363 ops/s
Iteration  10: 824240.093 ops/s
Iteration  11: 821907.502 ops/s
Iteration  12: 825361.403 ops/s
Iteration  13: 824345.065 ops/s
Iteration  14: 822491.979 ops/s
Iteration  15: 825250.764 ops/s
Iteration  16: 824511.910 ops/s
Iteration  17: 825989.374 ops/s
Iteration  18: 824404.086 ops/s
Iteration  19: 825179.490 ops/s
Iteration  20: 822897.928 ops/s
Iteration  21: 821401.105 ops/s
Iteration  22: 824825.965 ops/s
Iteration  23: 825423.581 ops/s
Iteration  24: 825299.131 ops/s
Iteration  25: 821759.923 ops/s
Iteration  26: 822416.843 ops/s
Iteration  27: 822964.745 ops/s
Iteration  28: 818991.186 ops/s
Iteration  29: 824625.893 ops/s
Iteration  30: 824926.571 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_take_throws":
  823577.726 ±(99.9%) 1152.209 ops/s [Average]
  (min, avg, max) = (818991.186, 823577.726, 825989.374), stdev = 1724.573
  CI (99.9%): [822425.516, 824729.935] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_take_throws  thrpt   30  823577.726 ± 1152.209  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 641763.182 ops/s
# Warmup Iteration   2: 1126452.538 ops/s
# Warmup Iteration   3: 1342724.011 ops/s
# Warmup Iteration   4: 1343737.199 ops/s
# Warmup Iteration   5: 1351574.369 ops/s
# Warmup Iteration   6: 1126068.549 ops/s
# Warmup Iteration   7: 1350682.839 ops/s
# Warmup Iteration   8: 1350462.804 ops/s
# Warmup Iteration   9: 1350231.532 ops/s
# Warmup Iteration  10: 1350883.933 ops/s
# Warmup Iteration  11: 1348806.591 ops/s
# Warmup Iteration  12: 1349917.361 ops/s
# Warmup Iteration  13: 1350088.424 ops/s
# Warmup Iteration  14: 1351427.387 ops/s
# Warmup Iteration  15: 1350207.726 ops/s
# Warmup Iteration  16: 1347782.629 ops/s
# Warmup Iteration  17: 1349253.147 ops/s
# Warmup Iteration  18: 1347839.141 ops/s
# Warmup Iteration  19: 1349535.625 ops/s
# Warmup Iteration  20: 1351491.193 ops/s
# Warmup Iteration  21: 1344067.986 ops/s
# Warmup Iteration  22: 1339586.303 ops/s
# Warmup Iteration  23: 1350527.837 ops/s
# Warmup Iteration  24: 1347826.411 ops/s
# Warmup Iteration  25: 1348341.637 ops/s
# Warmup Iteration  26: 1350537.118 ops/s
# Warmup Iteration  27: 1351044.001 ops/s
# Warmup Iteration  28: 1350306.438 ops/s
# Warmup Iteration  29: 1347706.101 ops/s
# Warmup Iteration  30: 1344632.006 ops/s
Iteration   1: 1353247.242 ops/s
Iteration   2: 1348020.816 ops/s
Iteration   3: 1347970.105 ops/s
Iteration   4: 1349269.196 ops/s
Iteration   5: 1349702.913 ops/s
Iteration   6: 1351811.332 ops/s
Iteration   7: 1350050.483 ops/s
Iteration   8: 1350976.449 ops/s
Iteration   9: 1346868.887 ops/s
Iteration  10: 1343091.515 ops/s
Iteration  11: 1352265.485 ops/s
Iteration  12: 1350708.455 ops/s
Iteration  13: 1349426.553 ops/s
Iteration  14: 1344085.540 ops/s
Iteration  15: 1350912.273 ops/s
Iteration  16: 1341882.521 ops/s
Iteration  17: 1350482.969 ops/s
Iteration  18: 1352370.318 ops/s
Iteration  19: 1345024.771 ops/s
Iteration  20: 1342743.027 ops/s
Iteration  21: 1345139.944 ops/s
Iteration  22: 1347335.944 ops/s
Iteration  23: 1346930.137 ops/s
Iteration  24: 1351890.849 ops/s
Iteration  25: 1347593.342 ops/s
Iteration  26: 1344241.315 ops/s
Iteration  27: 1353079.449 ops/s
Iteration  28: 1348888.257 ops/s
Iteration  29: 1347565.255 ops/s
Iteration  30: 1350434.841 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_tap":
  1348467.006 ±(99.9%) 2152.153 ops/s [Average]
  (min, avg, max) = (1341882.521, 1348467.006, 1353247.242), stdev = 3221.242
  CI (99.9%): [1346314.853, 1350619.159] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_tap  thrpt   30  1348467.006 ± 2152.153  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_testClone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_testClone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 698526.512 ops/s
# Warmup Iteration   2: 1258661.609 ops/s
# Warmup Iteration   3: 1487786.048 ops/s
# Warmup Iteration   4: 1489690.572 ops/s
# Warmup Iteration   5: 1497778.868 ops/s
# Warmup Iteration   6: 1256520.181 ops/s
# Warmup Iteration   7: 1489987.740 ops/s
# Warmup Iteration   8: 1490111.772 ops/s
# Warmup Iteration   9: 1499673.201 ops/s
# Warmup Iteration  10: 1495486.551 ops/s
# Warmup Iteration  11: 1495115.500 ops/s
# Warmup Iteration  12: 1500032.365 ops/s
# Warmup Iteration  13: 1495962.167 ops/s
# Warmup Iteration  14: 1496271.556 ops/s
# Warmup Iteration  15: 1498717.351 ops/s
# Warmup Iteration  16: 1491924.986 ops/s
# Warmup Iteration  17: 1503755.037 ops/s
# Warmup Iteration  18: 1503209.296 ops/s
# Warmup Iteration  19: 1501882.814 ops/s
# Warmup Iteration  20: 1502192.227 ops/s
# Warmup Iteration  21: 1505144.467 ops/s
# Warmup Iteration  22: 1506992.097 ops/s
# Warmup Iteration  23: 1503594.314 ops/s
# Warmup Iteration  24: 1494685.378 ops/s
# Warmup Iteration  25: 1502435.596 ops/s
# Warmup Iteration  26: 1503245.122 ops/s
# Warmup Iteration  27: 1501785.798 ops/s
# Warmup Iteration  28: 1501326.335 ops/s
# Warmup Iteration  29: 1504532.778 ops/s
# Warmup Iteration  30: 1503947.988 ops/s
Iteration   1: 1500864.311 ops/s
Iteration   2: 1492793.644 ops/s
Iteration   3: 1505928.144 ops/s
Iteration   4: 1501886.229 ops/s
Iteration   5: 1505950.577 ops/s
Iteration   6: 1498662.597 ops/s
Iteration   7: 1504866.416 ops/s
Iteration   8: 1501729.194 ops/s
Iteration   9: 1500526.947 ops/s
Iteration  10: 1505726.715 ops/s
Iteration  11: 1503781.370 ops/s
Iteration  12: 1503664.208 ops/s
Iteration  13: 1495275.355 ops/s
Iteration  14: 1495781.669 ops/s
Iteration  15: 1489481.421 ops/s
Iteration  16: 1500945.164 ops/s
Iteration  17: 1502060.497 ops/s
Iteration  18: 1501201.648 ops/s
Iteration  19: 1500658.117 ops/s
Iteration  20: 1504687.119 ops/s
Iteration  21: 1502904.500 ops/s
Iteration  22: 1506653.921 ops/s
Iteration  23: 1502026.913 ops/s
Iteration  24: 1506995.213 ops/s
Iteration  25: 1504844.327 ops/s
Iteration  26: 1495523.879 ops/s
Iteration  27: 1503813.173 ops/s
Iteration  28: 1493713.861 ops/s
Iteration  29: 1505234.976 ops/s
Iteration  30: 1500203.424 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_testClone":
  1501279.518 ±(99.9%) 2981.271 ops/s [Average]
  (min, avg, max) = (1489481.421, 1501279.518, 1506995.213), stdev = 4462.226
  CI (99.9%): [1498298.247, 1504260.788] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_testClone  thrpt   30  1501279.518 ± 2981.271  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_testNewCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_testNewCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3728483.592 ops/s
# Warmup Iteration   2: 7909378.213 ops/s
# Warmup Iteration   3: 8083387.368 ops/s
# Warmup Iteration   4: 6810308.402 ops/s
# Warmup Iteration   5: 8100193.226 ops/s
# Warmup Iteration   6: 8072179.153 ops/s
# Warmup Iteration   7: 8090998.342 ops/s
# Warmup Iteration   8: 8095080.222 ops/s
# Warmup Iteration   9: 8078414.851 ops/s
# Warmup Iteration  10: 8100194.062 ops/s
# Warmup Iteration  11: 8104195.069 ops/s
# Warmup Iteration  12: 8088185.137 ops/s
# Warmup Iteration  13: 8053331.475 ops/s
# Warmup Iteration  14: 8089919.631 ops/s
# Warmup Iteration  15: 8100429.453 ops/s
# Warmup Iteration  16: 8084498.652 ops/s
# Warmup Iteration  17: 8097020.359 ops/s
# Warmup Iteration  18: 8083216.358 ops/s
# Warmup Iteration  19: 8082364.539 ops/s
# Warmup Iteration  20: 8098612.250 ops/s
# Warmup Iteration  21: 8081908.098 ops/s
# Warmup Iteration  22: 8087158.022 ops/s
# Warmup Iteration  23: 8103078.424 ops/s
# Warmup Iteration  24: 8085791.119 ops/s
# Warmup Iteration  25: 8098973.543 ops/s
# Warmup Iteration  26: 8088780.665 ops/s
# Warmup Iteration  27: 8097606.351 ops/s
# Warmup Iteration  28: 8069510.609 ops/s
# Warmup Iteration  29: 8022990.171 ops/s
# Warmup Iteration  30: 8000461.222 ops/s
Iteration   1: 8046622.662 ops/s
Iteration   2: 8088848.658 ops/s
Iteration   3: 8116448.309 ops/s
Iteration   4: 8081214.036 ops/s
Iteration   5: 8054976.822 ops/s
Iteration   6: 8089453.937 ops/s
Iteration   7: 8016232.917 ops/s
Iteration   8: 8098776.514 ops/s
Iteration   9: 8090789.212 ops/s
Iteration  10: 8109219.612 ops/s
Iteration  11: 8116254.047 ops/s
Iteration  12: 8104882.256 ops/s
Iteration  13: 8092443.097 ops/s
Iteration  14: 8096504.965 ops/s
Iteration  15: 8092131.353 ops/s
Iteration  16: 8047446.087 ops/s
Iteration  17: 8090426.225 ops/s
Iteration  18: 8097688.216 ops/s
Iteration  19: 8091721.593 ops/s
Iteration  20: 8121564.500 ops/s
Iteration  21: 8084362.658 ops/s
Iteration  22: 8102643.533 ops/s
Iteration  23: 8094372.679 ops/s
Iteration  24: 8099146.446 ops/s
Iteration  25: 8106166.311 ops/s
Iteration  26: 8070131.414 ops/s
Iteration  27: 8099175.591 ops/s
Iteration  28: 8114717.465 ops/s
Iteration  29: 8073548.757 ops/s
Iteration  30: 8095789.565 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_testNewCollection":
  8089456.648 ±(99.9%) 15470.488 ops/s [Average]
  (min, avg, max) = (8016232.917, 8089456.648, 8121564.500), stdev = 23155.501
  CI (99.9%): [8073986.159, 8104927.136] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_testNewCollection  thrpt   30  8089456.648 ± 15470.488  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_testNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_testNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2374802.977 ops/s
# Warmup Iteration   2: 5119364.351 ops/s
# Warmup Iteration   3: 4347041.570 ops/s
# Warmup Iteration   4: 5128497.948 ops/s
# Warmup Iteration   5: 5081439.720 ops/s
# Warmup Iteration   6: 5148986.227 ops/s
# Warmup Iteration   7: 5172484.023 ops/s
# Warmup Iteration   8: 5134608.333 ops/s
# Warmup Iteration   9: 5158493.274 ops/s
# Warmup Iteration  10: 5113604.588 ops/s
# Warmup Iteration  11: 5164103.360 ops/s
# Warmup Iteration  12: 5157498.291 ops/s
# Warmup Iteration  13: 5138060.760 ops/s
# Warmup Iteration  14: 5136475.860 ops/s
# Warmup Iteration  15: 5134801.148 ops/s
# Warmup Iteration  16: 5151785.905 ops/s
# Warmup Iteration  17: 5171861.376 ops/s
# Warmup Iteration  18: 5145698.012 ops/s
# Warmup Iteration  19: 5155332.829 ops/s
# Warmup Iteration  20: 5173749.999 ops/s
# Warmup Iteration  21: 5132171.319 ops/s
# Warmup Iteration  22: 5139437.679 ops/s
# Warmup Iteration  23: 5135487.376 ops/s
# Warmup Iteration  24: 5132680.862 ops/s
# Warmup Iteration  25: 5147678.286 ops/s
# Warmup Iteration  26: 5123797.663 ops/s
# Warmup Iteration  27: 5112029.523 ops/s
# Warmup Iteration  28: 5123384.765 ops/s
# Warmup Iteration  29: 5159764.210 ops/s
# Warmup Iteration  30: 5120012.981 ops/s
Iteration   1: 5132295.833 ops/s
Iteration   2: 5135174.956 ops/s
Iteration   3: 5128826.554 ops/s
Iteration   4: 5121660.688 ops/s
Iteration   5: 5126784.037 ops/s
Iteration   6: 5167004.513 ops/s
Iteration   7: 5127964.230 ops/s
Iteration   8: 5142812.140 ops/s
Iteration   9: 5146621.276 ops/s
Iteration  10: 5091142.690 ops/s
Iteration  11: 5132480.746 ops/s
Iteration  12: 5169065.083 ops/s
Iteration  13: 5149683.901 ops/s
Iteration  14: 5133271.764 ops/s
Iteration  15: 5134517.145 ops/s
Iteration  16: 5155365.792 ops/s
Iteration  17: 5116902.611 ops/s
Iteration  18: 5140252.822 ops/s
Iteration  19: 5118853.606 ops/s
Iteration  20: 5109229.190 ops/s
Iteration  21: 5134164.726 ops/s
Iteration  22: 5166300.262 ops/s
Iteration  23: 5144926.684 ops/s
Iteration  24: 5156196.345 ops/s
Iteration  25: 5148292.202 ops/s
Iteration  26: 5139613.638 ops/s
Iteration  27: 5104105.659 ops/s
Iteration  28: 5138311.130 ops/s
Iteration  29: 5132962.977 ops/s
Iteration  30: 5129738.766 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_testNewWith":
  5135817.399 ±(99.9%) 11943.815 ops/s [Average]
  (min, avg, max) = (5091142.690, 5135817.399, 5169065.083), stdev = 17876.941
  CI (99.9%): [5123873.584, 5147761.213] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_testNewWith  thrpt   30  5135817.399 ± 11943.815  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_testNewWithVarArgs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_testNewWithVarArgs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 965492.616 ops/s
# Warmup Iteration   2: 2277761.500 ops/s
# Warmup Iteration   3: 2872288.958 ops/s
# Warmup Iteration   4: 2437463.951 ops/s
# Warmup Iteration   5: 2901277.548 ops/s
# Warmup Iteration   6: 2911632.650 ops/s
# Warmup Iteration   7: 2900999.046 ops/s
# Warmup Iteration   8: 2910007.613 ops/s
# Warmup Iteration   9: 2894060.192 ops/s
# Warmup Iteration  10: 2903428.406 ops/s
# Warmup Iteration  11: 2913270.965 ops/s
# Warmup Iteration  12: 2905057.721 ops/s
# Warmup Iteration  13: 2901532.619 ops/s
# Warmup Iteration  14: 2898786.468 ops/s
# Warmup Iteration  15: 2895271.543 ops/s
# Warmup Iteration  16: 2898825.166 ops/s
# Warmup Iteration  17: 2879224.586 ops/s
# Warmup Iteration  18: 2907850.038 ops/s
# Warmup Iteration  19: 2913973.409 ops/s
# Warmup Iteration  20: 2911320.684 ops/s
# Warmup Iteration  21: 2904681.496 ops/s
# Warmup Iteration  22: 2903539.539 ops/s
# Warmup Iteration  23: 2909183.085 ops/s
# Warmup Iteration  24: 2910216.414 ops/s
# Warmup Iteration  25: 2899691.710 ops/s
# Warmup Iteration  26: 2901141.012 ops/s
# Warmup Iteration  27: 2910024.377 ops/s
# Warmup Iteration  28: 2899644.590 ops/s
# Warmup Iteration  29: 2897907.822 ops/s
# Warmup Iteration  30: 2901258.035 ops/s
Iteration   1: 2918461.191 ops/s
Iteration   2: 2910014.626 ops/s
Iteration   3: 2911995.702 ops/s
Iteration   4: 2914327.943 ops/s
Iteration   5: 2898445.431 ops/s
Iteration   6: 2918201.790 ops/s
Iteration   7: 2908349.353 ops/s
Iteration   8: 2919126.861 ops/s
Iteration   9: 2919180.398 ops/s
Iteration  10: 2921905.110 ops/s
Iteration  11: 2920415.298 ops/s
Iteration  12: 2907133.861 ops/s
Iteration  13: 2910794.180 ops/s
Iteration  14: 2915343.117 ops/s
Iteration  15: 2904112.353 ops/s
Iteration  16: 2906043.946 ops/s
Iteration  17: 2898539.503 ops/s
Iteration  18: 2906336.295 ops/s
Iteration  19: 2910625.646 ops/s
Iteration  20: 2913403.909 ops/s
Iteration  21: 2913555.699 ops/s
Iteration  22: 2915695.414 ops/s
Iteration  23: 2907652.287 ops/s
Iteration  24: 2909198.078 ops/s
Iteration  25: 2912217.420 ops/s
Iteration  26: 2900610.674 ops/s
Iteration  27: 2900534.329 ops/s
Iteration  28: 2901958.522 ops/s
Iteration  29: 2904565.408 ops/s
Iteration  30: 2905173.522 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_testNewWithVarArgs":
  2910130.596 ±(99.9%) 4492.034 ops/s [Average]
  (min, avg, max) = (2898445.431, 2910130.596, 2921905.110), stdev = 6723.465
  CI (99.9%): [2905638.562, 2914622.629] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_testNewWithVarArgs  thrpt   30  2910130.596 ± 4492.034  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_testNewWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_testNewWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1301592.657 ops/s
# Warmup Iteration   2: 3007931.505 ops/s
# Warmup Iteration   3: 3513278.418 ops/s
# Warmup Iteration   4: 3470583.507 ops/s
# Warmup Iteration   5: 3800925.812 ops/s
# Warmup Iteration   6: 3797007.040 ops/s
# Warmup Iteration   7: 3775042.152 ops/s
# Warmup Iteration   8: 3784174.487 ops/s
# Warmup Iteration   9: 3787984.097 ops/s
# Warmup Iteration  10: 3761048.876 ops/s
# Warmup Iteration  11: 3778625.209 ops/s
# Warmup Iteration  12: 3785094.453 ops/s
# Warmup Iteration  13: 3790959.529 ops/s
# Warmup Iteration  14: 3788115.079 ops/s
# Warmup Iteration  15: 3794509.895 ops/s
# Warmup Iteration  16: 3796602.320 ops/s
# Warmup Iteration  17: 3796169.681 ops/s
# Warmup Iteration  18: 3780595.362 ops/s
# Warmup Iteration  19: 3792648.463 ops/s
# Warmup Iteration  20: 3753874.390 ops/s
# Warmup Iteration  21: 3788175.806 ops/s
# Warmup Iteration  22: 3789578.103 ops/s
# Warmup Iteration  23: 3795903.233 ops/s
# Warmup Iteration  24: 3787756.030 ops/s
# Warmup Iteration  25: 3800020.149 ops/s
# Warmup Iteration  26: 3786634.700 ops/s
# Warmup Iteration  27: 3777039.433 ops/s
# Warmup Iteration  28: 3791466.893 ops/s
# Warmup Iteration  29: 3758428.643 ops/s
# Warmup Iteration  30: 3783860.377 ops/s
Iteration   1: 3772858.095 ops/s
Iteration   2: 3779581.375 ops/s
Iteration   3: 3792440.795 ops/s
Iteration   4: 3788879.242 ops/s
Iteration   5: 3789947.377 ops/s
Iteration   6: 3799961.126 ops/s
Iteration   7: 3796236.118 ops/s
Iteration   8: 3783025.194 ops/s
Iteration   9: 3805141.890 ops/s
Iteration  10: 3777645.961 ops/s
Iteration  11: 3778623.565 ops/s
Iteration  12: 3792909.569 ops/s
Iteration  13: 3788109.779 ops/s
Iteration  14: 3773721.555 ops/s
Iteration  15: 3797655.067 ops/s
Iteration  16: 3809128.208 ops/s
Iteration  17: 3803150.027 ops/s
Iteration  18: 3789891.493 ops/s
Iteration  19: 3794183.722 ops/s
Iteration  20: 3797227.864 ops/s
Iteration  21: 3785897.614 ops/s
Iteration  22: 3778610.839 ops/s
Iteration  23: 3788316.441 ops/s
Iteration  24: 3781670.982 ops/s
Iteration  25: 3784847.796 ops/s
Iteration  26: 3780125.516 ops/s
Iteration  27: 3791479.998 ops/s
Iteration  28: 3790147.073 ops/s
Iteration  29: 3790037.326 ops/s
Iteration  30: 3795393.364 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_testNewWithWith":
  3789228.166 ±(99.9%) 6088.211 ops/s [Average]
  (min, avg, max) = (3772858.095, 3789228.166, 3809128.208), stdev = 9112.549
  CI (99.9%): [3783139.954, 3795316.377] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_testNewWithWith  thrpt   30  3789228.166 ± 6088.211  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_testNewWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_testNewWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1106934.712 ops/s
# Warmup Iteration   2: 2611921.577 ops/s
# Warmup Iteration   3: 3291377.350 ops/s
# Warmup Iteration   4: 2765758.086 ops/s
# Warmup Iteration   5: 3298667.735 ops/s
# Warmup Iteration   6: 3300225.014 ops/s
# Warmup Iteration   7: 3303107.758 ops/s
# Warmup Iteration   8: 3296121.627 ops/s
# Warmup Iteration   9: 3301691.257 ops/s
# Warmup Iteration  10: 3293843.092 ops/s
# Warmup Iteration  11: 3314196.417 ops/s
# Warmup Iteration  12: 3301683.473 ops/s
# Warmup Iteration  13: 3292957.366 ops/s
# Warmup Iteration  14: 3302600.002 ops/s
# Warmup Iteration  15: 3294307.103 ops/s
# Warmup Iteration  16: 3306099.794 ops/s
# Warmup Iteration  17: 3306487.940 ops/s
# Warmup Iteration  18: 3308449.805 ops/s
# Warmup Iteration  19: 3291407.584 ops/s
# Warmup Iteration  20: 3292753.676 ops/s
# Warmup Iteration  21: 3310586.639 ops/s
# Warmup Iteration  22: 3306920.480 ops/s
# Warmup Iteration  23: 3298816.806 ops/s
# Warmup Iteration  24: 3308502.461 ops/s
# Warmup Iteration  25: 3305721.867 ops/s
# Warmup Iteration  26: 3301781.458 ops/s
# Warmup Iteration  27: 3297803.511 ops/s
# Warmup Iteration  28: 3291648.700 ops/s
# Warmup Iteration  29: 3304784.691 ops/s
# Warmup Iteration  30: 3297148.106 ops/s
Iteration   1: 3284573.200 ops/s
Iteration   2: 3315585.594 ops/s
Iteration   3: 3305330.453 ops/s
Iteration   4: 3302434.444 ops/s
Iteration   5: 3291173.448 ops/s
Iteration   6: 3303985.082 ops/s
Iteration   7: 3275018.386 ops/s
Iteration   8: 3292503.533 ops/s
Iteration   9: 3292308.329 ops/s
Iteration  10: 3287929.165 ops/s
Iteration  11: 3294363.980 ops/s
Iteration  12: 3306692.018 ops/s
Iteration  13: 3281320.989 ops/s
Iteration  14: 3295795.312 ops/s
Iteration  15: 3304049.765 ops/s
Iteration  16: 3292297.372 ops/s
Iteration  17: 3306800.370 ops/s
Iteration  18: 3310511.010 ops/s
Iteration  19: 3311714.797 ops/s
Iteration  20: 3310235.635 ops/s
Iteration  21: 3293062.193 ops/s
Iteration  22: 3293660.206 ops/s
Iteration  23: 3312751.483 ops/s
Iteration  24: 3283655.584 ops/s
Iteration  25: 3310624.612 ops/s
Iteration  26: 3298338.232 ops/s
Iteration  27: 3301105.342 ops/s
Iteration  28: 3302403.809 ops/s
Iteration  29: 3304881.069 ops/s
Iteration  30: 3305493.681 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_testNewWithWithWith":
  3299019.970 ±(99.9%) 6882.746 ops/s [Average]
  (min, avg, max) = (3275018.386, 3299019.970, 3315585.594), stdev = 10301.770
  CI (99.9%): [3292137.224, 3305902.715] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_testNewWithWithWith  thrpt   30  3299019.970 ± 6882.746  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 331926.637 ops/s
# Warmup Iteration   2: 672979.338 ops/s
# Warmup Iteration   3: 708576.539 ops/s
# Warmup Iteration   4: 710620.197 ops/s
# Warmup Iteration   5: 599568.031 ops/s
# Warmup Iteration   6: 708595.632 ops/s
# Warmup Iteration   7: 710908.494 ops/s
# Warmup Iteration   8: 711068.375 ops/s
# Warmup Iteration   9: 709955.923 ops/s
# Warmup Iteration  10: 709886.142 ops/s
# Warmup Iteration  11: 708873.616 ops/s
# Warmup Iteration  12: 709288.202 ops/s
# Warmup Iteration  13: 710807.510 ops/s
# Warmup Iteration  14: 710520.913 ops/s
# Warmup Iteration  15: 708706.873 ops/s
# Warmup Iteration  16: 703787.179 ops/s
# Warmup Iteration  17: 709286.571 ops/s
# Warmup Iteration  18: 710596.775 ops/s
# Warmup Iteration  19: 710434.121 ops/s
# Warmup Iteration  20: 710415.687 ops/s
# Warmup Iteration  21: 708625.551 ops/s
# Warmup Iteration  22: 710111.349 ops/s
# Warmup Iteration  23: 710041.079 ops/s
# Warmup Iteration  24: 710931.294 ops/s
# Warmup Iteration  25: 711464.760 ops/s
# Warmup Iteration  26: 710873.665 ops/s
# Warmup Iteration  27: 709855.453 ops/s
# Warmup Iteration  28: 711208.432 ops/s
# Warmup Iteration  29: 708171.931 ops/s
# Warmup Iteration  30: 710521.364 ops/s
Iteration   1: 708568.254 ops/s
Iteration   2: 710004.198 ops/s
Iteration   3: 710136.680 ops/s
Iteration   4: 712340.713 ops/s
Iteration   5: 710799.908 ops/s
Iteration   6: 707636.236 ops/s
Iteration   7: 706418.870 ops/s
Iteration   8: 706822.505 ops/s
Iteration   9: 711434.493 ops/s
Iteration  10: 712733.367 ops/s
Iteration  11: 707573.163 ops/s
Iteration  12: 710853.772 ops/s
Iteration  13: 708857.393 ops/s
Iteration  14: 711921.781 ops/s
Iteration  15: 710023.218 ops/s
Iteration  16: 709033.562 ops/s
Iteration  17: 711718.045 ops/s
Iteration  18: 710548.379 ops/s
Iteration  19: 710180.469 ops/s
Iteration  20: 711465.986 ops/s
Iteration  21: 708679.420 ops/s
Iteration  22: 709137.757 ops/s
Iteration  23: 709815.453 ops/s
Iteration  24: 712082.060 ops/s
Iteration  25: 710557.382 ops/s
Iteration  26: 707265.583 ops/s
Iteration  27: 711196.259 ops/s
Iteration  28: 708935.613 ops/s
Iteration  29: 708291.312 ops/s
Iteration  30: 709728.150 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_testToString":
  709825.333 ±(99.9%) 1133.669 ops/s [Average]
  (min, avg, max) = (706418.870, 709825.333, 712733.367), stdev = 1696.823
  CI (99.9%): [708691.664, 710959.002] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_testToString  thrpt   30  709825.333 ± 1133.669  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 362673.970 ops/s
# Warmup Iteration   2: 651853.921 ops/s
# Warmup Iteration   3: 722700.139 ops/s
# Warmup Iteration   4: 727431.792 ops/s
# Warmup Iteration   5: 719007.644 ops/s
# Warmup Iteration   6: 621001.923 ops/s
# Warmup Iteration   7: 727134.474 ops/s
# Warmup Iteration   8: 725419.498 ops/s
# Warmup Iteration   9: 728811.789 ops/s
# Warmup Iteration  10: 728175.131 ops/s
# Warmup Iteration  11: 727851.108 ops/s
# Warmup Iteration  12: 726550.040 ops/s
# Warmup Iteration  13: 728272.136 ops/s
# Warmup Iteration  14: 726877.486 ops/s
# Warmup Iteration  15: 726714.444 ops/s
# Warmup Iteration  16: 729408.695 ops/s
# Warmup Iteration  17: 725906.369 ops/s
# Warmup Iteration  18: 725525.054 ops/s
# Warmup Iteration  19: 724645.819 ops/s
# Warmup Iteration  20: 726021.630 ops/s
# Warmup Iteration  21: 724881.587 ops/s
# Warmup Iteration  22: 725118.634 ops/s
# Warmup Iteration  23: 725566.713 ops/s
# Warmup Iteration  24: 725677.358 ops/s
# Warmup Iteration  25: 724132.289 ops/s
# Warmup Iteration  26: 726721.173 ops/s
# Warmup Iteration  27: 725106.062 ops/s
# Warmup Iteration  28: 725534.444 ops/s
# Warmup Iteration  29: 723918.950 ops/s
# Warmup Iteration  30: 725002.564 ops/s
Iteration   1: 726375.280 ops/s
Iteration   2: 723180.668 ops/s
Iteration   3: 724105.876 ops/s
Iteration   4: 723354.876 ops/s
Iteration   5: 727522.484 ops/s
Iteration   6: 727653.429 ops/s
Iteration   7: 725924.224 ops/s
Iteration   8: 724572.622 ops/s
Iteration   9: 726894.453 ops/s
Iteration  10: 723493.709 ops/s
Iteration  11: 722421.628 ops/s
Iteration  12: 722765.401 ops/s
Iteration  13: 725529.470 ops/s
Iteration  14: 727108.286 ops/s
Iteration  15: 727071.176 ops/s
Iteration  16: 724945.350 ops/s
Iteration  17: 725270.445 ops/s
Iteration  18: 725934.871 ops/s
Iteration  19: 727318.094 ops/s
Iteration  20: 725785.990 ops/s
Iteration  21: 727200.582 ops/s
Iteration  22: 723243.840 ops/s
Iteration  23: 723910.950 ops/s
Iteration  24: 725755.166 ops/s
Iteration  25: 725974.876 ops/s
Iteration  26: 727717.414 ops/s
Iteration  27: 719810.294 ops/s
Iteration  28: 727204.524 ops/s
Iteration  29: 726570.947 ops/s
Iteration  30: 725691.713 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toArray":
  725343.621 ±(99.9%) 1276.236 ops/s [Average]
  (min, avg, max) = (719810.294, 725343.621, 727717.414), stdev = 1910.210
  CI (99.9%): [724067.385, 726619.857] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toArray  thrpt   30  725343.621 ± 1276.236  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 373368.545 ops/s
# Warmup Iteration   2: 650475.354 ops/s
# Warmup Iteration   3: 771837.218 ops/s
# Warmup Iteration   4: 776321.674 ops/s
# Warmup Iteration   5: 777149.630 ops/s
# Warmup Iteration   6: 644716.903 ops/s
# Warmup Iteration   7: 778750.793 ops/s
# Warmup Iteration   8: 779416.817 ops/s
# Warmup Iteration   9: 779087.671 ops/s
# Warmup Iteration  10: 779928.685 ops/s
# Warmup Iteration  11: 779474.470 ops/s
# Warmup Iteration  12: 778220.126 ops/s
# Warmup Iteration  13: 779059.232 ops/s
# Warmup Iteration  14: 777992.131 ops/s
# Warmup Iteration  15: 777785.501 ops/s
# Warmup Iteration  16: 778200.363 ops/s
# Warmup Iteration  17: 779308.841 ops/s
# Warmup Iteration  18: 778513.809 ops/s
# Warmup Iteration  19: 779820.191 ops/s
# Warmup Iteration  20: 779448.588 ops/s
# Warmup Iteration  21: 778293.256 ops/s
# Warmup Iteration  22: 780097.059 ops/s
# Warmup Iteration  23: 777513.497 ops/s
# Warmup Iteration  24: 779392.490 ops/s
# Warmup Iteration  25: 778110.886 ops/s
# Warmup Iteration  26: 778619.083 ops/s
# Warmup Iteration  27: 777713.379 ops/s
# Warmup Iteration  28: 781325.161 ops/s
# Warmup Iteration  29: 780417.477 ops/s
# Warmup Iteration  30: 779656.686 ops/s
Iteration   1: 778347.525 ops/s
Iteration   2: 779901.356 ops/s
Iteration   3: 777052.058 ops/s
Iteration   4: 771553.189 ops/s
Iteration   5: 778097.637 ops/s
Iteration   6: 780236.091 ops/s
Iteration   7: 782211.051 ops/s
Iteration   8: 779836.681 ops/s
Iteration   9: 779579.837 ops/s
Iteration  10: 780895.260 ops/s
Iteration  11: 780201.604 ops/s
Iteration  12: 781169.541 ops/s
Iteration  13: 781381.128 ops/s
Iteration  14: 781039.262 ops/s
Iteration  15: 780260.165 ops/s
Iteration  16: 782078.588 ops/s
Iteration  17: 779512.128 ops/s
Iteration  18: 779212.142 ops/s
Iteration  19: 777065.506 ops/s
Iteration  20: 778311.586 ops/s
Iteration  21: 772272.656 ops/s
Iteration  22: 779514.896 ops/s
Iteration  23: 780448.271 ops/s
Iteration  24: 772950.801 ops/s
Iteration  25: 771353.268 ops/s
Iteration  26: 775249.476 ops/s
Iteration  27: 781196.528 ops/s
Iteration  28: 779737.357 ops/s
Iteration  29: 781657.097 ops/s
Iteration  30: 779200.208 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toBag":
  778717.430 ±(99.9%) 2061.735 ops/s [Average]
  (min, avg, max) = (771353.268, 778717.430, 782211.051), stdev = 3085.908
  CI (99.9%): [776655.695, 780779.165] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toBag  thrpt   30  778717.430 ± 2061.735  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 88046.583 ops/s
# Warmup Iteration   2: 115448.670 ops/s
# Warmup Iteration   3: 150104.957 ops/s
# Warmup Iteration   4: 149673.168 ops/s
# Warmup Iteration   5: 149871.874 ops/s
# Warmup Iteration   6: 150120.062 ops/s
# Warmup Iteration   7: 150291.449 ops/s
# Warmup Iteration   8: 150391.467 ops/s
# Warmup Iteration   9: 127009.018 ops/s
# Warmup Iteration  10: 149822.378 ops/s
# Warmup Iteration  11: 150156.838 ops/s
# Warmup Iteration  12: 150269.339 ops/s
# Warmup Iteration  13: 149942.143 ops/s
# Warmup Iteration  14: 150368.042 ops/s
# Warmup Iteration  15: 150114.843 ops/s
# Warmup Iteration  16: 150419.002 ops/s
# Warmup Iteration  17: 154228.536 ops/s
# Warmup Iteration  18: 154480.388 ops/s
# Warmup Iteration  19: 154680.132 ops/s
# Warmup Iteration  20: 154562.559 ops/s
# Warmup Iteration  21: 154808.722 ops/s
# Warmup Iteration  22: 154669.306 ops/s
# Warmup Iteration  23: 154457.035 ops/s
# Warmup Iteration  24: 153981.860 ops/s
# Warmup Iteration  25: 154146.323 ops/s
# Warmup Iteration  26: 154446.899 ops/s
# Warmup Iteration  27: 154526.013 ops/s
# Warmup Iteration  28: 154250.859 ops/s
# Warmup Iteration  29: 154328.925 ops/s
# Warmup Iteration  30: 154705.738 ops/s
Iteration   1: 154434.018 ops/s
Iteration   2: 154691.159 ops/s
Iteration   3: 154804.478 ops/s
Iteration   4: 154594.678 ops/s
Iteration   5: 154290.439 ops/s
Iteration   6: 154583.103 ops/s
Iteration   7: 154626.861 ops/s
Iteration   8: 153770.402 ops/s
Iteration   9: 154879.602 ops/s
Iteration  10: 154943.754 ops/s
Iteration  11: 154221.430 ops/s
Iteration  12: 154930.313 ops/s
Iteration  13: 155162.145 ops/s
Iteration  14: 153544.971 ops/s
Iteration  15: 155015.595 ops/s
Iteration  16: 154464.889 ops/s
Iteration  17: 154386.761 ops/s
Iteration  18: 154797.712 ops/s
Iteration  19: 154452.928 ops/s
Iteration  20: 154432.460 ops/s
Iteration  21: 155076.564 ops/s
Iteration  22: 154356.581 ops/s
Iteration  23: 153694.978 ops/s
Iteration  24: 154158.951 ops/s
Iteration  25: 154423.912 ops/s
Iteration  26: 154427.690 ops/s
Iteration  27: 153925.167 ops/s
Iteration  28: 153828.081 ops/s
Iteration  29: 154423.954 ops/s
Iteration  30: 154673.559 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toBiMap":
  154467.238 ±(99.9%) 277.014 ops/s [Average]
  (min, avg, max) = (153544.971, 154467.238, 155162.145), stdev = 414.621
  CI (99.9%): [154190.224, 154744.251] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toBiMap  thrpt   30  154467.238 ± 277.014  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1132475.035 ops/s
# Warmup Iteration   2: 2272263.459 ops/s
# Warmup Iteration   3: 2449128.270 ops/s
# Warmup Iteration   4: 2451462.877 ops/s
# Warmup Iteration   5: 2047404.397 ops/s
# Warmup Iteration   6: 2466158.464 ops/s
# Warmup Iteration   7: 2466061.430 ops/s
# Warmup Iteration   8: 2464682.023 ops/s
# Warmup Iteration   9: 2465588.244 ops/s
# Warmup Iteration  10: 2467059.761 ops/s
# Warmup Iteration  11: 2463153.535 ops/s
# Warmup Iteration  12: 2460970.121 ops/s
# Warmup Iteration  13: 2468063.223 ops/s
# Warmup Iteration  14: 2469638.843 ops/s
# Warmup Iteration  15: 2467031.368 ops/s
# Warmup Iteration  16: 2470829.113 ops/s
# Warmup Iteration  17: 2456289.914 ops/s
# Warmup Iteration  18: 2467148.729 ops/s
# Warmup Iteration  19: 2462908.301 ops/s
# Warmup Iteration  20: 2464600.915 ops/s
# Warmup Iteration  21: 2466621.689 ops/s
# Warmup Iteration  22: 2467531.274 ops/s
# Warmup Iteration  23: 2464923.763 ops/s
# Warmup Iteration  24: 2441154.819 ops/s
# Warmup Iteration  25: 2451481.469 ops/s
# Warmup Iteration  26: 2463266.776 ops/s
# Warmup Iteration  27: 2468656.266 ops/s
# Warmup Iteration  28: 2466483.664 ops/s
# Warmup Iteration  29: 2462637.511 ops/s
# Warmup Iteration  30: 2469441.218 ops/s
Iteration   1: 2465069.151 ops/s
Iteration   2: 2467755.034 ops/s
Iteration   3: 2466542.143 ops/s
Iteration   4: 2468573.304 ops/s
Iteration   5: 2474677.618 ops/s
Iteration   6: 2460593.161 ops/s
Iteration   7: 2458814.038 ops/s
Iteration   8: 2470124.112 ops/s
Iteration   9: 2455233.372 ops/s
Iteration  10: 2467933.446 ops/s
Iteration  11: 2444967.314 ops/s
Iteration  12: 2474664.679 ops/s
Iteration  13: 2461933.931 ops/s
Iteration  14: 2455630.821 ops/s
Iteration  15: 2476865.983 ops/s
Iteration  16: 2460528.444 ops/s
Iteration  17: 2463456.535 ops/s
Iteration  18: 2476908.008 ops/s
Iteration  19: 2458970.627 ops/s
Iteration  20: 2461227.501 ops/s
Iteration  21: 2467744.565 ops/s
Iteration  22: 2466448.662 ops/s
Iteration  23: 2472319.497 ops/s
Iteration  24: 2476834.221 ops/s
Iteration  25: 2461988.349 ops/s
Iteration  26: 2471052.358 ops/s
Iteration  27: 2476574.561 ops/s
Iteration  28: 2470425.452 ops/s
Iteration  29: 2460103.396 ops/s
Iteration  30: 2465440.578 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toCollection":
  2465980.029 ±(99.9%) 5054.070 ops/s [Average]
  (min, avg, max) = (2444967.314, 2465980.029, 2476908.008), stdev = 7564.695
  CI (99.9%): [2460925.959, 2471034.099] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toCollection  thrpt   30  2465980.029 ± 5054.070  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 298923.073 ops/s
# Warmup Iteration   2: 405555.355 ops/s
# Warmup Iteration   3: 516275.277 ops/s
# Warmup Iteration   4: 514240.667 ops/s
# Warmup Iteration   5: 516536.298 ops/s
# Warmup Iteration   6: 517833.033 ops/s
# Warmup Iteration   7: 516715.985 ops/s
# Warmup Iteration   8: 429857.460 ops/s
# Warmup Iteration   9: 517711.881 ops/s
# Warmup Iteration  10: 517256.475 ops/s
# Warmup Iteration  11: 516939.175 ops/s
# Warmup Iteration  12: 516348.527 ops/s
# Warmup Iteration  13: 516503.107 ops/s
# Warmup Iteration  14: 516445.436 ops/s
# Warmup Iteration  15: 516165.871 ops/s
# Warmup Iteration  16: 516851.902 ops/s
# Warmup Iteration  17: 516314.151 ops/s
# Warmup Iteration  18: 515779.581 ops/s
# Warmup Iteration  19: 511785.960 ops/s
# Warmup Iteration  20: 511718.044 ops/s
# Warmup Iteration  21: 517409.099 ops/s
# Warmup Iteration  22: 516306.066 ops/s
# Warmup Iteration  23: 517029.592 ops/s
# Warmup Iteration  24: 517123.973 ops/s
# Warmup Iteration  25: 517644.625 ops/s
# Warmup Iteration  26: 516375.169 ops/s
# Warmup Iteration  27: 516227.241 ops/s
# Warmup Iteration  28: 516537.394 ops/s
# Warmup Iteration  29: 517472.914 ops/s
# Warmup Iteration  30: 515560.494 ops/s
Iteration   1: 515952.280 ops/s
Iteration   2: 516597.644 ops/s
Iteration   3: 517508.653 ops/s
Iteration   4: 514255.893 ops/s
Iteration   5: 515540.825 ops/s
Iteration   6: 518803.206 ops/s
Iteration   7: 515489.235 ops/s
Iteration   8: 516698.994 ops/s
Iteration   9: 517071.559 ops/s
Iteration  10: 517878.737 ops/s
Iteration  11: 518720.705 ops/s
Iteration  12: 517040.813 ops/s
Iteration  13: 515826.177 ops/s
Iteration  14: 518057.075 ops/s
Iteration  15: 517140.510 ops/s
Iteration  16: 517519.509 ops/s
Iteration  17: 515658.584 ops/s
Iteration  18: 517574.488 ops/s
Iteration  19: 516943.975 ops/s
Iteration  20: 516346.888 ops/s
Iteration  21: 517259.850 ops/s
Iteration  22: 517410.249 ops/s
Iteration  23: 516003.860 ops/s
Iteration  24: 518089.737 ops/s
Iteration  25: 517290.977 ops/s
Iteration  26: 517600.461 ops/s
Iteration  27: 517672.313 ops/s
Iteration  28: 516257.374 ops/s
Iteration  29: 517386.684 ops/s
Iteration  30: 515978.099 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutable":
  516919.178 ±(99.9%) 687.957 ops/s [Average]
  (min, avg, max) = (514255.893, 516919.178, 518803.206), stdev = 1029.701
  CI (99.9%): [516231.222, 517607.135] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toImmutable  thrpt   30  516919.178 ± 687.957  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 458622.828 ops/s
# Warmup Iteration   2: 795276.790 ops/s
# Warmup Iteration   3: 949765.279 ops/s
# Warmup Iteration   4: 956036.984 ops/s
# Warmup Iteration   5: 953610.046 ops/s
# Warmup Iteration   6: 840716.434 ops/s
# Warmup Iteration   7: 905054.772 ops/s
# Warmup Iteration   8: 956126.572 ops/s
# Warmup Iteration   9: 955007.575 ops/s
# Warmup Iteration  10: 950275.126 ops/s
# Warmup Iteration  11: 955340.150 ops/s
# Warmup Iteration  12: 956817.276 ops/s
# Warmup Iteration  13: 956175.329 ops/s
# Warmup Iteration  14: 953300.820 ops/s
# Warmup Iteration  15: 953872.826 ops/s
# Warmup Iteration  16: 953230.496 ops/s
# Warmup Iteration  17: 949960.962 ops/s
# Warmup Iteration  18: 957083.896 ops/s
# Warmup Iteration  19: 957756.993 ops/s
# Warmup Iteration  20: 954588.548 ops/s
# Warmup Iteration  21: 955131.476 ops/s
# Warmup Iteration  22: 956177.868 ops/s
# Warmup Iteration  23: 957455.202 ops/s
# Warmup Iteration  24: 956925.379 ops/s
# Warmup Iteration  25: 954946.866 ops/s
# Warmup Iteration  26: 955286.999 ops/s
# Warmup Iteration  27: 956525.355 ops/s
# Warmup Iteration  28: 956449.487 ops/s
# Warmup Iteration  29: 956244.038 ops/s
# Warmup Iteration  30: 955066.609 ops/s
Iteration   1: 957683.328 ops/s
Iteration   2: 957610.188 ops/s
Iteration   3: 957151.842 ops/s
Iteration   4: 959140.730 ops/s
Iteration   5: 955368.953 ops/s
Iteration   6: 957811.585 ops/s
Iteration   7: 956029.849 ops/s
Iteration   8: 956508.504 ops/s
Iteration   9: 955702.579 ops/s
Iteration  10: 958323.317 ops/s
Iteration  11: 955915.774 ops/s
Iteration  12: 953011.377 ops/s
Iteration  13: 956075.642 ops/s
Iteration  14: 958434.466 ops/s
Iteration  15: 956805.627 ops/s
Iteration  16: 957474.083 ops/s
Iteration  17: 955291.908 ops/s
Iteration  18: 954212.866 ops/s
Iteration  19: 958068.382 ops/s
Iteration  20: 955997.096 ops/s
Iteration  21: 956873.225 ops/s
Iteration  22: 953005.940 ops/s
Iteration  23: 958945.683 ops/s
Iteration  24: 955608.311 ops/s
Iteration  25: 959591.267 ops/s
Iteration  26: 957649.419 ops/s
Iteration  27: 957261.198 ops/s
Iteration  28: 956958.749 ops/s
Iteration  29: 953663.815 ops/s
Iteration  30: 954849.748 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableBag":
  956567.515 ±(99.9%) 1147.276 ops/s [Average]
  (min, avg, max) = (953005.940, 956567.515, 959591.267), stdev = 1717.189
  CI (99.9%): [955420.239, 957714.791] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableBag  thrpt   30  956567.515 ± 1147.276  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 70976.818 ops/s
# Warmup Iteration   2: 102725.101 ops/s
# Warmup Iteration   3: 130640.102 ops/s
# Warmup Iteration   4: 129503.885 ops/s
# Warmup Iteration   5: 130181.747 ops/s
# Warmup Iteration   6: 130726.064 ops/s
# Warmup Iteration   7: 130843.168 ops/s
# Warmup Iteration   8: 108784.824 ops/s
# Warmup Iteration   9: 130951.359 ops/s
# Warmup Iteration  10: 130835.554 ops/s
# Warmup Iteration  11: 131511.009 ops/s
# Warmup Iteration  12: 130375.768 ops/s
# Warmup Iteration  13: 130968.742 ops/s
# Warmup Iteration  14: 130711.788 ops/s
# Warmup Iteration  15: 130807.185 ops/s
# Warmup Iteration  16: 130913.198 ops/s
# Warmup Iteration  17: 144650.368 ops/s
# Warmup Iteration  18: 143723.355 ops/s
# Warmup Iteration  19: 144587.979 ops/s
# Warmup Iteration  20: 144811.109 ops/s
# Warmup Iteration  21: 144309.154 ops/s
# Warmup Iteration  22: 144355.605 ops/s
# Warmup Iteration  23: 144774.583 ops/s
# Warmup Iteration  24: 145072.293 ops/s
# Warmup Iteration  25: 144533.388 ops/s
# Warmup Iteration  26: 144528.834 ops/s
# Warmup Iteration  27: 144630.125 ops/s
# Warmup Iteration  28: 144340.798 ops/s
# Warmup Iteration  29: 144555.756 ops/s
# Warmup Iteration  30: 144754.804 ops/s
Iteration   1: 144953.868 ops/s
Iteration   2: 144460.720 ops/s
Iteration   3: 144050.665 ops/s
Iteration   4: 145196.677 ops/s
Iteration   5: 144999.429 ops/s
Iteration   6: 144899.896 ops/s
Iteration   7: 144633.804 ops/s
Iteration   8: 144792.299 ops/s
Iteration   9: 144374.045 ops/s
Iteration  10: 143442.991 ops/s
Iteration  11: 144672.107 ops/s
Iteration  12: 144505.295 ops/s
Iteration  13: 143890.008 ops/s
Iteration  14: 144426.758 ops/s
Iteration  15: 144460.951 ops/s
Iteration  16: 144149.913 ops/s
Iteration  17: 145009.358 ops/s
Iteration  18: 144496.368 ops/s
Iteration  19: 145229.379 ops/s
Iteration  20: 144708.823 ops/s
Iteration  21: 142790.048 ops/s
Iteration  22: 145106.548 ops/s
Iteration  23: 145035.604 ops/s
Iteration  24: 145170.917 ops/s
Iteration  25: 145102.579 ops/s
Iteration  26: 144640.781 ops/s
Iteration  27: 144653.219 ops/s
Iteration  28: 144704.212 ops/s
Iteration  29: 144080.717 ops/s
Iteration  30: 144926.054 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableBiMap":
  144585.468 ±(99.9%) 362.177 ops/s [Average]
  (min, avg, max) = (142790.048, 144585.468, 145229.379), stdev = 542.090
  CI (99.9%): [144223.291, 144947.645] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableBiMap  thrpt   30  144585.468 ± 362.177  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 611575.556 ops/s
# Warmup Iteration   2: 1129385.642 ops/s
# Warmup Iteration   3: 1261331.381 ops/s
# Warmup Iteration   4: 1269348.300 ops/s
# Warmup Iteration   5: 1269494.217 ops/s
# Warmup Iteration   6: 1054184.712 ops/s
# Warmup Iteration   7: 1271704.649 ops/s
# Warmup Iteration   8: 1272505.571 ops/s
# Warmup Iteration   9: 1269696.378 ops/s
# Warmup Iteration  10: 1272500.476 ops/s
# Warmup Iteration  11: 1272089.259 ops/s
# Warmup Iteration  12: 1271292.389 ops/s
# Warmup Iteration  13: 1270538.747 ops/s
# Warmup Iteration  14: 1269826.059 ops/s
# Warmup Iteration  15: 1272449.184 ops/s
# Warmup Iteration  16: 1272447.416 ops/s
# Warmup Iteration  17: 1268946.820 ops/s
# Warmup Iteration  18: 1271335.857 ops/s
# Warmup Iteration  19: 1271916.768 ops/s
# Warmup Iteration  20: 1263212.993 ops/s
# Warmup Iteration  21: 1271009.377 ops/s
# Warmup Iteration  22: 1273059.004 ops/s
# Warmup Iteration  23: 1269948.033 ops/s
# Warmup Iteration  24: 1272653.806 ops/s
# Warmup Iteration  25: 1271843.786 ops/s
# Warmup Iteration  26: 1268394.238 ops/s
# Warmup Iteration  27: 1270241.386 ops/s
# Warmup Iteration  28: 1270209.764 ops/s
# Warmup Iteration  29: 1272991.865 ops/s
# Warmup Iteration  30: 1268425.639 ops/s
Iteration   1: 1271862.143 ops/s
Iteration   2: 1276318.897 ops/s
Iteration   3: 1268582.657 ops/s
Iteration   4: 1269221.093 ops/s
Iteration   5: 1274323.020 ops/s
Iteration   6: 1273031.360 ops/s
Iteration   7: 1272385.898 ops/s
Iteration   8: 1272039.491 ops/s
Iteration   9: 1270992.451 ops/s
Iteration  10: 1263672.689 ops/s
Iteration  11: 1266312.870 ops/s
Iteration  12: 1273173.792 ops/s
Iteration  13: 1271525.627 ops/s
Iteration  14: 1268103.619 ops/s
Iteration  15: 1268264.395 ops/s
Iteration  16: 1270898.393 ops/s
Iteration  17: 1271939.895 ops/s
Iteration  18: 1270375.887 ops/s
Iteration  19: 1273389.898 ops/s
Iteration  20: 1271598.187 ops/s
Iteration  21: 1271776.443 ops/s
Iteration  22: 1269383.092 ops/s
Iteration  23: 1258414.903 ops/s
Iteration  24: 1272999.541 ops/s
Iteration  25: 1270206.799 ops/s
Iteration  26: 1270251.124 ops/s
Iteration  27: 1273799.852 ops/s
Iteration  28: 1274568.060 ops/s
Iteration  29: 1274322.269 ops/s
Iteration  30: 1273002.077 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableList":
  1270891.214 ±(99.9%) 2360.991 ops/s [Average]
  (min, avg, max) = (1258414.903, 1270891.214, 1276318.897), stdev = 3533.821
  CI (99.9%): [1268530.223, 1273252.205] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableList  thrpt   30  1270891.214 ± 2360.991  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 539006.493 ops/s
# Warmup Iteration   2: 1204665.605 ops/s
# Warmup Iteration   3: 1255415.669 ops/s
# Warmup Iteration   4: 1189711.950 ops/s
# Warmup Iteration   5: 1125358.782 ops/s
# Warmup Iteration   6: 1270316.197 ops/s
# Warmup Iteration   7: 1262803.007 ops/s
# Warmup Iteration   8: 1261786.622 ops/s
# Warmup Iteration   9: 1267124.110 ops/s
# Warmup Iteration  10: 1259490.471 ops/s
# Warmup Iteration  11: 1260038.107 ops/s
# Warmup Iteration  12: 1258008.329 ops/s
# Warmup Iteration  13: 1244623.331 ops/s
# Warmup Iteration  14: 1247051.435 ops/s
# Warmup Iteration  15: 1250105.497 ops/s
# Warmup Iteration  16: 1250078.391 ops/s
# Warmup Iteration  17: 1242191.787 ops/s
# Warmup Iteration  18: 1262446.488 ops/s
# Warmup Iteration  19: 1258987.313 ops/s
# Warmup Iteration  20: 1252166.026 ops/s
# Warmup Iteration  21: 1240676.567 ops/s
# Warmup Iteration  22: 1245660.297 ops/s
# Warmup Iteration  23: 1263340.667 ops/s
# Warmup Iteration  24: 1256878.455 ops/s
# Warmup Iteration  25: 1247159.191 ops/s
# Warmup Iteration  26: 1258818.457 ops/s
# Warmup Iteration  27: 1257526.307 ops/s
# Warmup Iteration  28: 1247606.615 ops/s
# Warmup Iteration  29: 1262184.744 ops/s
# Warmup Iteration  30: 1260232.925 ops/s
Iteration   1: 1258512.881 ops/s
Iteration   2: 1256195.688 ops/s
Iteration   3: 1251836.797 ops/s
Iteration   4: 1259667.334 ops/s
Iteration   5: 1259241.892 ops/s
Iteration   6: 1256539.307 ops/s
Iteration   7: 1262349.287 ops/s
Iteration   8: 1259817.257 ops/s
Iteration   9: 1256860.804 ops/s
Iteration  10: 1261575.038 ops/s
Iteration  11: 1251655.092 ops/s
Iteration  12: 1261592.194 ops/s
Iteration  13: 1256365.618 ops/s
Iteration  14: 1246774.160 ops/s
Iteration  15: 1255561.842 ops/s
Iteration  16: 1263102.205 ops/s
Iteration  17: 1258663.661 ops/s
Iteration  18: 1255930.494 ops/s
Iteration  19: 1260580.551 ops/s
Iteration  20: 1261175.355 ops/s
Iteration  21: 1247509.639 ops/s
Iteration  22: 1255619.538 ops/s
Iteration  23: 1256761.795 ops/s
Iteration  24: 1253874.148 ops/s
Iteration  25: 1251014.876 ops/s
Iteration  26: 1242447.265 ops/s
Iteration  27: 1265894.596 ops/s
Iteration  28: 1268210.114 ops/s
Iteration  29: 1256709.228 ops/s
Iteration  30: 1257541.116 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableMap":
  1256985.993 ±(99.9%) 3684.771 ops/s [Average]
  (min, avg, max) = (1242447.265, 1256985.993, 1268210.114), stdev = 5515.192
  CI (99.9%): [1253301.222, 1260670.763] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableMap  thrpt   30  1256985.993 ± 3684.771  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 534841.349 ops/s
# Warmup Iteration   2: 882120.633 ops/s
# Warmup Iteration   3: 1048721.738 ops/s
# Warmup Iteration   4: 1053869.260 ops/s
# Warmup Iteration   5: 1057378.890 ops/s
# Warmup Iteration   6: 978856.673 ops/s
# Warmup Iteration   7: 954928.123 ops/s
# Warmup Iteration   8: 1052485.679 ops/s
# Warmup Iteration   9: 1055657.379 ops/s
# Warmup Iteration  10: 1055662.366 ops/s
# Warmup Iteration  11: 1055324.652 ops/s
# Warmup Iteration  12: 1056479.108 ops/s
# Warmup Iteration  13: 1053194.815 ops/s
# Warmup Iteration  14: 1057611.627 ops/s
# Warmup Iteration  15: 1054797.612 ops/s
# Warmup Iteration  16: 1056607.073 ops/s
# Warmup Iteration  17: 1051152.608 ops/s
# Warmup Iteration  18: 1055467.115 ops/s
# Warmup Iteration  19: 1055561.655 ops/s
# Warmup Iteration  20: 1055826.101 ops/s
# Warmup Iteration  21: 1054527.760 ops/s
# Warmup Iteration  22: 1055413.970 ops/s
# Warmup Iteration  23: 1051374.226 ops/s
# Warmup Iteration  24: 1055252.350 ops/s
# Warmup Iteration  25: 1055564.204 ops/s
# Warmup Iteration  26: 1046348.130 ops/s
# Warmup Iteration  27: 1056305.820 ops/s
# Warmup Iteration  28: 1056897.170 ops/s
# Warmup Iteration  29: 1057567.291 ops/s
# Warmup Iteration  30: 1057962.489 ops/s
Iteration   1: 1053524.500 ops/s
Iteration   2: 1056871.712 ops/s
Iteration   3: 1053889.299 ops/s
Iteration   4: 1049809.343 ops/s
Iteration   5: 1056430.454 ops/s
Iteration   6: 1045857.412 ops/s
Iteration   7: 1051576.605 ops/s
Iteration   8: 1058296.548 ops/s
Iteration   9: 1055711.759 ops/s
Iteration  10: 1057046.510 ops/s
Iteration  11: 1054792.156 ops/s
Iteration  12: 1054995.357 ops/s
Iteration  13: 1055808.708 ops/s
Iteration  14: 1056751.567 ops/s
Iteration  15: 1057527.981 ops/s
Iteration  16: 1058065.321 ops/s
Iteration  17: 1056529.758 ops/s
Iteration  18: 1057617.587 ops/s
Iteration  19: 1057173.932 ops/s
Iteration  20: 1059088.773 ops/s
Iteration  21: 1054953.399 ops/s
Iteration  22: 1057923.412 ops/s
Iteration  23: 1049736.930 ops/s
Iteration  24: 1051417.482 ops/s
Iteration  25: 1056315.215 ops/s
Iteration  26: 1054383.697 ops/s
Iteration  27: 1057090.932 ops/s
Iteration  28: 1056769.184 ops/s
Iteration  29: 1053919.347 ops/s
Iteration  30: 1057357.276 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSet":
  1055241.072 ±(99.9%) 2002.938 ops/s [Average]
  (min, avg, max) = (1045857.412, 1055241.072, 1059088.773), stdev = 2997.904
  CI (99.9%): [1053238.134, 1057244.010] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSet  thrpt   30  1055241.072 ± 2002.938  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 475093.279 ops/s
# Warmup Iteration   2: 905016.424 ops/s
# Warmup Iteration   3: 1014127.310 ops/s
# Warmup Iteration   4: 1020833.294 ops/s
# Warmup Iteration   5: 929839.718 ops/s
# Warmup Iteration   6: 947984.230 ops/s
# Warmup Iteration   7: 1021063.828 ops/s
# Warmup Iteration   8: 1021840.626 ops/s
# Warmup Iteration   9: 1021368.589 ops/s
# Warmup Iteration  10: 1024671.949 ops/s
# Warmup Iteration  11: 1025090.013 ops/s
# Warmup Iteration  12: 1025156.119 ops/s
# Warmup Iteration  13: 1024674.166 ops/s
# Warmup Iteration  14: 1023914.280 ops/s
# Warmup Iteration  15: 1023862.149 ops/s
# Warmup Iteration  16: 1022655.854 ops/s
# Warmup Iteration  17: 1022613.375 ops/s
# Warmup Iteration  18: 1023428.672 ops/s
# Warmup Iteration  19: 1021806.010 ops/s
# Warmup Iteration  20: 1019882.463 ops/s
# Warmup Iteration  21: 1022789.087 ops/s
# Warmup Iteration  22: 1022436.137 ops/s
# Warmup Iteration  23: 1023888.521 ops/s
# Warmup Iteration  24: 1022695.239 ops/s
# Warmup Iteration  25: 1023741.852 ops/s
# Warmup Iteration  26: 1021485.816 ops/s
# Warmup Iteration  27: 1023295.372 ops/s
# Warmup Iteration  28: 1020885.963 ops/s
# Warmup Iteration  29: 1022126.380 ops/s
# Warmup Iteration  30: 1020895.579 ops/s
Iteration   1: 1018533.020 ops/s
Iteration   2: 1020254.636 ops/s
Iteration   3: 1022246.336 ops/s
Iteration   4: 1021811.215 ops/s
Iteration   5: 1020458.705 ops/s
Iteration   6: 1024640.513 ops/s
Iteration   7: 1019769.168 ops/s
Iteration   8: 1021819.399 ops/s
Iteration   9: 1022698.573 ops/s
Iteration  10: 1019329.106 ops/s
Iteration  11: 1020958.844 ops/s
Iteration  12: 1025583.795 ops/s
Iteration  13: 1021235.907 ops/s
Iteration  14: 1022227.122 ops/s
Iteration  15: 1023973.719 ops/s
Iteration  16: 1013116.592 ops/s
Iteration  17: 1024706.231 ops/s
Iteration  18: 1021869.933 ops/s
Iteration  19: 1025398.931 ops/s
Iteration  20: 1025443.355 ops/s
Iteration  21: 1018339.438 ops/s
Iteration  22: 1020608.053 ops/s
Iteration  23: 1021373.216 ops/s
Iteration  24: 1023534.325 ops/s
Iteration  25: 1023466.105 ops/s
Iteration  26: 1024970.479 ops/s
Iteration  27: 1023838.353 ops/s
Iteration  28: 1024673.355 ops/s
Iteration  29: 1015237.015 ops/s
Iteration  30: 1026114.396 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering":
  1021940.994 ±(99.9%) 2028.804 ops/s [Average]
  (min, avg, max) = (1013116.592, 1021940.994, 1026114.396), stdev = 3036.619
  CI (99.9%): [1019912.190, 1023969.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering  thrpt   30  1021940.994 ± 2028.804  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 229345.033 ops/s
# Warmup Iteration   2: 391283.319 ops/s
# Warmup Iteration   3: 486053.546 ops/s
# Warmup Iteration   4: 489075.086 ops/s
# Warmup Iteration   5: 490521.227 ops/s
# Warmup Iteration   6: 447781.246 ops/s
# Warmup Iteration   7: 439972.617 ops/s
# Warmup Iteration   8: 489178.488 ops/s
# Warmup Iteration   9: 489644.838 ops/s
# Warmup Iteration  10: 489865.141 ops/s
# Warmup Iteration  11: 489846.279 ops/s
# Warmup Iteration  12: 489684.477 ops/s
# Warmup Iteration  13: 490910.930 ops/s
# Warmup Iteration  14: 490033.068 ops/s
# Warmup Iteration  15: 488235.298 ops/s
# Warmup Iteration  16: 489588.581 ops/s
# Warmup Iteration  17: 488481.980 ops/s
# Warmup Iteration  18: 488885.653 ops/s
# Warmup Iteration  19: 488719.884 ops/s
# Warmup Iteration  20: 488163.960 ops/s
# Warmup Iteration  21: 489031.066 ops/s
# Warmup Iteration  22: 489693.261 ops/s
# Warmup Iteration  23: 488121.889 ops/s
# Warmup Iteration  24: 489229.420 ops/s
# Warmup Iteration  25: 488973.469 ops/s
# Warmup Iteration  26: 489430.440 ops/s
# Warmup Iteration  27: 489273.231 ops/s
# Warmup Iteration  28: 489546.345 ops/s
# Warmup Iteration  29: 489943.543 ops/s
# Warmup Iteration  30: 488314.665 ops/s
Iteration   1: 490360.615 ops/s
Iteration   2: 487064.907 ops/s
Iteration   3: 488605.069 ops/s
Iteration   4: 487423.427 ops/s
Iteration   5: 489099.367 ops/s
Iteration   6: 489046.940 ops/s
Iteration   7: 489168.434 ops/s
Iteration   8: 489338.532 ops/s
Iteration   9: 489617.562 ops/s
Iteration  10: 488479.629 ops/s
Iteration  11: 489010.822 ops/s
Iteration  12: 488239.480 ops/s
Iteration  13: 489892.159 ops/s
Iteration  14: 489065.898 ops/s
Iteration  15: 485220.755 ops/s
Iteration  16: 484599.235 ops/s
Iteration  17: 487203.600 ops/s
Iteration  18: 489600.311 ops/s
Iteration  19: 488461.178 ops/s
Iteration  20: 489873.089 ops/s
Iteration  21: 488160.054 ops/s
Iteration  22: 488844.047 ops/s
Iteration  23: 489868.665 ops/s
Iteration  24: 490147.168 ops/s
Iteration  25: 489381.060 ops/s
Iteration  26: 489876.215 ops/s
Iteration  27: 488706.850 ops/s
Iteration  28: 492902.463 ops/s
Iteration  29: 489961.697 ops/s
Iteration  30: 489447.898 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedBagBy":
  488888.904 ±(99.9%) 1026.799 ops/s [Average]
  (min, avg, max) = (484599.235, 488888.904, 492902.463), stdev = 1536.864
  CI (99.9%): [487862.105, 489915.703] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedBagBy  thrpt   30  488888.904 ± 1026.799  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 355990.205 ops/s
# Warmup Iteration   2: 597483.683 ops/s
# Warmup Iteration   3: 703901.355 ops/s
# Warmup Iteration   4: 708315.212 ops/s
# Warmup Iteration   5: 706295.251 ops/s
# Warmup Iteration   6: 630647.253 ops/s
# Warmup Iteration   7: 666671.002 ops/s
# Warmup Iteration   8: 706677.548 ops/s
# Warmup Iteration   9: 708348.938 ops/s
# Warmup Iteration  10: 710198.261 ops/s
# Warmup Iteration  11: 707430.897 ops/s
# Warmup Iteration  12: 708846.594 ops/s
# Warmup Iteration  13: 709260.172 ops/s
# Warmup Iteration  14: 708774.799 ops/s
# Warmup Iteration  15: 706940.724 ops/s
# Warmup Iteration  16: 709197.468 ops/s
# Warmup Iteration  17: 705476.231 ops/s
# Warmup Iteration  18: 707745.302 ops/s
# Warmup Iteration  19: 707000.646 ops/s
# Warmup Iteration  20: 707620.566 ops/s
# Warmup Iteration  21: 708070.893 ops/s
# Warmup Iteration  22: 706801.618 ops/s
# Warmup Iteration  23: 708813.746 ops/s
# Warmup Iteration  24: 708107.791 ops/s
# Warmup Iteration  25: 704717.870 ops/s
# Warmup Iteration  26: 706618.042 ops/s
# Warmup Iteration  27: 708321.333 ops/s
# Warmup Iteration  28: 709068.452 ops/s
# Warmup Iteration  29: 708136.646 ops/s
# Warmup Iteration  30: 706801.330 ops/s
Iteration   1: 709352.694 ops/s
Iteration   2: 707276.595 ops/s
Iteration   3: 709300.216 ops/s
Iteration   4: 707558.016 ops/s
Iteration   5: 707474.950 ops/s
Iteration   6: 705637.404 ops/s
Iteration   7: 706189.228 ops/s
Iteration   8: 706406.659 ops/s
Iteration   9: 702769.086 ops/s
Iteration  10: 708262.412 ops/s
Iteration  11: 706602.359 ops/s
Iteration  12: 708074.361 ops/s
Iteration  13: 706136.779 ops/s
Iteration  14: 709374.870 ops/s
Iteration  15: 707718.016 ops/s
Iteration  16: 708581.522 ops/s
Iteration  17: 708506.304 ops/s
Iteration  18: 710715.938 ops/s
Iteration  19: 708032.592 ops/s
Iteration  20: 710354.427 ops/s
Iteration  21: 710192.869 ops/s
Iteration  22: 710943.699 ops/s
Iteration  23: 708240.570 ops/s
Iteration  24: 711217.609 ops/s
Iteration  25: 707106.493 ops/s
Iteration  26: 710215.239 ops/s
Iteration  27: 706494.876 ops/s
Iteration  28: 706481.840 ops/s
Iteration  29: 708298.374 ops/s
Iteration  30: 709674.357 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering":
  708106.345 ±(99.9%) 1246.688 ops/s [Average]
  (min, avg, max) = (702769.086, 708106.345, 711217.609), stdev = 1865.984
  CI (99.9%): [706859.657, 709353.033] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering  thrpt   30  708106.345 ± 1246.688  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 485171.240 ops/s
# Warmup Iteration   2: 929044.164 ops/s
# Warmup Iteration   3: 1052320.213 ops/s
# Warmup Iteration   4: 1054614.975 ops/s
# Warmup Iteration   5: 1048811.425 ops/s
# Warmup Iteration   6: 893902.608 ops/s
# Warmup Iteration   7: 1059005.318 ops/s
# Warmup Iteration   8: 1056498.669 ops/s
# Warmup Iteration   9: 1058005.995 ops/s
# Warmup Iteration  10: 1056652.671 ops/s
# Warmup Iteration  11: 1057931.245 ops/s
# Warmup Iteration  12: 1057728.628 ops/s
# Warmup Iteration  13: 1056640.683 ops/s
# Warmup Iteration  14: 1054942.560 ops/s
# Warmup Iteration  15: 1058178.597 ops/s
# Warmup Iteration  16: 1055568.769 ops/s
# Warmup Iteration  17: 1055183.746 ops/s
# Warmup Iteration  18: 1057199.483 ops/s
# Warmup Iteration  19: 1058213.580 ops/s
# Warmup Iteration  20: 1058253.444 ops/s
# Warmup Iteration  21: 1055213.900 ops/s
# Warmup Iteration  22: 1057153.593 ops/s
# Warmup Iteration  23: 1060077.224 ops/s
# Warmup Iteration  24: 1059888.603 ops/s
# Warmup Iteration  25: 1057583.440 ops/s
# Warmup Iteration  26: 1057247.827 ops/s
# Warmup Iteration  27: 1056176.477 ops/s
# Warmup Iteration  28: 1057862.845 ops/s
# Warmup Iteration  29: 1058275.892 ops/s
# Warmup Iteration  30: 1056003.575 ops/s
Iteration   1: 1055699.182 ops/s
Iteration   2: 1054760.153 ops/s
Iteration   3: 1056662.642 ops/s
Iteration   4: 1056677.936 ops/s
Iteration   5: 1060875.128 ops/s
Iteration   6: 1057894.656 ops/s
Iteration   7: 1058867.290 ops/s
Iteration   8: 1051389.383 ops/s
Iteration   9: 1056946.041 ops/s
Iteration  10: 1060430.841 ops/s
Iteration  11: 1052807.268 ops/s
Iteration  12: 1059192.312 ops/s
Iteration  13: 1057732.505 ops/s
Iteration  14: 1058450.420 ops/s
Iteration  15: 1061218.349 ops/s
Iteration  16: 1054080.419 ops/s
Iteration  17: 1058360.229 ops/s
Iteration  18: 1057476.725 ops/s
Iteration  19: 1056923.403 ops/s
Iteration  20: 1059859.889 ops/s
Iteration  21: 1058735.710 ops/s
Iteration  22: 1059168.469 ops/s
Iteration  23: 1055152.721 ops/s
Iteration  24: 1054902.423 ops/s
Iteration  25: 1058891.006 ops/s
Iteration  26: 1050563.634 ops/s
Iteration  27: 1060323.847 ops/s
Iteration  28: 1054162.042 ops/s
Iteration  29: 1058289.990 ops/s
Iteration  30: 1060527.129 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator":
  1057234.058 ±(99.9%) 1853.450 ops/s [Average]
  (min, avg, max) = (1050563.634, 1057234.058, 1061218.349), stdev = 2774.156
  CI (99.9%): [1055380.609, 1059087.508] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator  thrpt   30  1057234.058 ± 1853.450  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1124785.267 ops/s
# Warmup Iteration   2: 2714957.665 ops/s
# Warmup Iteration   3: 2864348.968 ops/s
# Warmup Iteration   4: 2389569.755 ops/s
# Warmup Iteration   5: 2873935.366 ops/s
# Warmup Iteration   6: 2885346.681 ops/s
# Warmup Iteration   7: 2876019.305 ops/s
# Warmup Iteration   8: 2879565.473 ops/s
# Warmup Iteration   9: 2878547.621 ops/s
# Warmup Iteration  10: 2876712.522 ops/s
# Warmup Iteration  11: 2881191.842 ops/s
# Warmup Iteration  12: 2873477.364 ops/s
# Warmup Iteration  13: 2876493.680 ops/s
# Warmup Iteration  14: 2877832.554 ops/s
# Warmup Iteration  15: 2883349.217 ops/s
# Warmup Iteration  16: 2888770.941 ops/s
# Warmup Iteration  17: 2900015.001 ops/s
# Warmup Iteration  18: 2900939.924 ops/s
# Warmup Iteration  19: 2902830.228 ops/s
# Warmup Iteration  20: 2909583.415 ops/s
# Warmup Iteration  21: 2904984.033 ops/s
# Warmup Iteration  22: 2898826.463 ops/s
# Warmup Iteration  23: 2903836.790 ops/s
# Warmup Iteration  24: 2900255.591 ops/s
# Warmup Iteration  25: 2905777.419 ops/s
# Warmup Iteration  26: 2905464.908 ops/s
# Warmup Iteration  27: 2903985.615 ops/s
# Warmup Iteration  28: 2890685.114 ops/s
# Warmup Iteration  29: 2905660.232 ops/s
# Warmup Iteration  30: 2900098.367 ops/s
Iteration   1: 2906574.496 ops/s
Iteration   2: 2908533.879 ops/s
Iteration   3: 2898464.447 ops/s
Iteration   4: 2905624.342 ops/s
Iteration   5: 2897240.586 ops/s
Iteration   6: 2888947.909 ops/s
Iteration   7: 2899807.250 ops/s
Iteration   8: 2910226.883 ops/s
Iteration   9: 2910025.220 ops/s
Iteration  10: 2897481.369 ops/s
Iteration  11: 2886456.922 ops/s
Iteration  12: 2915032.555 ops/s
Iteration  13: 2904634.365 ops/s
Iteration  14: 2908952.784 ops/s
Iteration  15: 2908565.548 ops/s
Iteration  16: 2903221.408 ops/s
Iteration  17: 2909057.606 ops/s
Iteration  18: 2888916.876 ops/s
Iteration  19: 2902545.517 ops/s
Iteration  20: 2902950.276 ops/s
Iteration  21: 2908489.873 ops/s
Iteration  22: 2906082.588 ops/s
Iteration  23: 2880678.090 ops/s
Iteration  24: 2886206.298 ops/s
Iteration  25: 2903581.598 ops/s
Iteration  26: 2895467.772 ops/s
Iteration  27: 2913611.394 ops/s
Iteration  28: 2902419.673 ops/s
Iteration  29: 2896374.251 ops/s
Iteration  30: 2906279.381 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedListBy":
  2901748.372 ±(99.9%) 5771.581 ops/s [Average]
  (min, avg, max) = (2880678.090, 2901748.372, 2915032.555), stdev = 8638.632
  CI (99.9%): [2895976.791, 2907519.953] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedListBy  thrpt   30  2901748.372 ± 5771.581  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 631565.471 ops/s
# Warmup Iteration   2: 982256.437 ops/s
# Warmup Iteration   3: 1195977.011 ops/s
# Warmup Iteration   4: 1183579.424 ops/s
# Warmup Iteration   5: 1194544.271 ops/s
# Warmup Iteration   6: 1194711.227 ops/s
# Warmup Iteration   7: 1003744.804 ops/s
# Warmup Iteration   8: 1195743.075 ops/s
# Warmup Iteration   9: 1196351.972 ops/s
# Warmup Iteration  10: 1194061.692 ops/s
# Warmup Iteration  11: 1192889.364 ops/s
# Warmup Iteration  12: 1198933.510 ops/s
# Warmup Iteration  13: 1198250.366 ops/s
# Warmup Iteration  14: 1197233.877 ops/s
# Warmup Iteration  15: 1194470.961 ops/s
# Warmup Iteration  16: 1192683.393 ops/s
# Warmup Iteration  17: 1198167.580 ops/s
# Warmup Iteration  18: 1196667.802 ops/s
# Warmup Iteration  19: 1198405.142 ops/s
# Warmup Iteration  20: 1197835.165 ops/s
# Warmup Iteration  21: 1198283.233 ops/s
# Warmup Iteration  22: 1197039.733 ops/s
# Warmup Iteration  23: 1198172.198 ops/s
# Warmup Iteration  24: 1198269.959 ops/s
# Warmup Iteration  25: 1195805.201 ops/s
# Warmup Iteration  26: 1193279.722 ops/s
# Warmup Iteration  27: 1196110.159 ops/s
# Warmup Iteration  28: 1197689.765 ops/s
# Warmup Iteration  29: 1198466.242 ops/s
# Warmup Iteration  30: 1193748.716 ops/s
Iteration   1: 1196555.467 ops/s
Iteration   2: 1198179.681 ops/s
Iteration   3: 1194500.438 ops/s
Iteration   4: 1195672.332 ops/s
Iteration   5: 1198945.080 ops/s
Iteration   6: 1193563.060 ops/s
Iteration   7: 1196021.305 ops/s
Iteration   8: 1195610.567 ops/s
Iteration   9: 1198757.422 ops/s
Iteration  10: 1195938.589 ops/s
Iteration  11: 1199625.740 ops/s
Iteration  12: 1194862.535 ops/s
Iteration  13: 1194957.834 ops/s
Iteration  14: 1196849.500 ops/s
Iteration  15: 1194533.038 ops/s
Iteration  16: 1193684.069 ops/s
Iteration  17: 1192791.496 ops/s
Iteration  18: 1198625.061 ops/s
Iteration  19: 1200874.371 ops/s
Iteration  20: 1200648.239 ops/s
Iteration  21: 1197844.154 ops/s
Iteration  22: 1196116.030 ops/s
Iteration  23: 1201009.242 ops/s
Iteration  24: 1199077.555 ops/s
Iteration  25: 1199674.026 ops/s
Iteration  26: 1197728.743 ops/s
Iteration  27: 1198079.603 ops/s
Iteration  28: 1193665.911 ops/s
Iteration  29: 1197542.946 ops/s
Iteration  30: 1199971.740 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering":
  1197063.526 ±(99.9%) 1591.533 ops/s [Average]
  (min, avg, max) = (1192791.496, 1197063.526, 1201009.242), stdev = 2382.131
  CI (99.9%): [1195471.993, 1198655.059] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering  thrpt   30  1197063.526 ± 1591.533  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1515577.435 ops/s
# Warmup Iteration   2: 3092520.182 ops/s
# Warmup Iteration   3: 3380042.398 ops/s
# Warmup Iteration   4: 3418098.326 ops/s
# Warmup Iteration   5: 2821101.182 ops/s
# Warmup Iteration   6: 3423876.469 ops/s
# Warmup Iteration   7: 3417999.765 ops/s
# Warmup Iteration   8: 3421611.529 ops/s
# Warmup Iteration   9: 3395607.224 ops/s
# Warmup Iteration  10: 3419664.217 ops/s
# Warmup Iteration  11: 3422654.957 ops/s
# Warmup Iteration  12: 3418228.822 ops/s
# Warmup Iteration  13: 3420845.645 ops/s
# Warmup Iteration  14: 3412271.247 ops/s
# Warmup Iteration  15: 3425884.944 ops/s
# Warmup Iteration  16: 3420818.263 ops/s
# Warmup Iteration  17: 3412652.258 ops/s
# Warmup Iteration  18: 3422547.655 ops/s
# Warmup Iteration  19: 3420728.343 ops/s
# Warmup Iteration  20: 3412892.330 ops/s
# Warmup Iteration  21: 3414542.689 ops/s
# Warmup Iteration  22: 3417970.079 ops/s
# Warmup Iteration  23: 3417293.868 ops/s
# Warmup Iteration  24: 3423326.038 ops/s
# Warmup Iteration  25: 3412247.074 ops/s
# Warmup Iteration  26: 3419407.353 ops/s
# Warmup Iteration  27: 3425964.452 ops/s
# Warmup Iteration  28: 3415038.453 ops/s
# Warmup Iteration  29: 3428997.237 ops/s
# Warmup Iteration  30: 3426033.024 ops/s
Iteration   1: 3418456.376 ops/s
Iteration   2: 3412136.131 ops/s
Iteration   3: 3412310.203 ops/s
Iteration   4: 3413160.516 ops/s
Iteration   5: 3424727.785 ops/s
Iteration   6: 3420412.059 ops/s
Iteration   7: 3427128.601 ops/s
Iteration   8: 3415330.488 ops/s
Iteration   9: 3402008.456 ops/s
Iteration  10: 3426571.195 ops/s
Iteration  11: 3406545.459 ops/s
Iteration  12: 3419580.324 ops/s
Iteration  13: 3418809.735 ops/s
Iteration  14: 3430056.705 ops/s
Iteration  15: 3407423.537 ops/s
Iteration  16: 3408119.089 ops/s
Iteration  17: 3405001.844 ops/s
Iteration  18: 3421780.439 ops/s
Iteration  19: 3421096.301 ops/s
Iteration  20: 3422094.870 ops/s
Iteration  21: 3428221.394 ops/s
Iteration  22: 3415067.715 ops/s
Iteration  23: 3368712.219 ops/s
Iteration  24: 3365195.609 ops/s
Iteration  25: 3399169.187 ops/s
Iteration  26: 3415713.005 ops/s
Iteration  27: 3429380.983 ops/s
Iteration  28: 3409145.788 ops/s
Iteration  29: 3416510.406 ops/s
Iteration  30: 3417166.376 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator":
  3413234.427 ±(99.9%) 9987.037 ops/s [Average]
  (min, avg, max) = (3365195.609, 3413234.427, 3430056.705), stdev = 14948.127
  CI (99.9%): [3403247.390, 3423221.463] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator  thrpt   30  3413234.427 ± 9987.037  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 561897.618 ops/s
# Warmup Iteration   2: 1348503.261 ops/s
# Warmup Iteration   3: 1409997.803 ops/s
# Warmup Iteration   4: 1174439.918 ops/s
# Warmup Iteration   5: 1407198.198 ops/s
# Warmup Iteration   6: 1402928.655 ops/s
# Warmup Iteration   7: 1405763.336 ops/s
# Warmup Iteration   8: 1402731.255 ops/s
# Warmup Iteration   9: 1406915.423 ops/s
# Warmup Iteration  10: 1405250.866 ops/s
# Warmup Iteration  11: 1405041.438 ops/s
# Warmup Iteration  12: 1409719.633 ops/s
# Warmup Iteration  13: 1403702.781 ops/s
# Warmup Iteration  14: 1404104.259 ops/s
# Warmup Iteration  15: 1409120.070 ops/s
# Warmup Iteration  16: 1404784.876 ops/s
# Warmup Iteration  17: 1406703.847 ops/s
# Warmup Iteration  18: 1408209.726 ops/s
# Warmup Iteration  19: 1403812.904 ops/s
# Warmup Iteration  20: 1408908.785 ops/s
# Warmup Iteration  21: 1407266.374 ops/s
# Warmup Iteration  22: 1410015.959 ops/s
# Warmup Iteration  23: 1410389.308 ops/s
# Warmup Iteration  24: 1408451.811 ops/s
# Warmup Iteration  25: 1408889.572 ops/s
# Warmup Iteration  26: 1409462.022 ops/s
# Warmup Iteration  27: 1408403.385 ops/s
# Warmup Iteration  28: 1404950.255 ops/s
# Warmup Iteration  29: 1411034.692 ops/s
# Warmup Iteration  30: 1402737.274 ops/s
Iteration   1: 1406605.068 ops/s
Iteration   2: 1407607.050 ops/s
Iteration   3: 1400593.706 ops/s
Iteration   4: 1412243.168 ops/s
Iteration   5: 1409067.973 ops/s
Iteration   6: 1404603.352 ops/s
Iteration   7: 1407884.191 ops/s
Iteration   8: 1410827.877 ops/s
Iteration   9: 1408576.900 ops/s
Iteration  10: 1403818.793 ops/s
Iteration  11: 1394699.081 ops/s
Iteration  12: 1406510.354 ops/s
Iteration  13: 1406118.349 ops/s
Iteration  14: 1404434.596 ops/s
Iteration  15: 1399241.211 ops/s
Iteration  16: 1404026.754 ops/s
Iteration  17: 1408038.368 ops/s
Iteration  18: 1407955.610 ops/s
Iteration  19: 1402984.933 ops/s
Iteration  20: 1408147.131 ops/s
Iteration  21: 1409159.536 ops/s
Iteration  22: 1402824.543 ops/s
Iteration  23: 1406119.199 ops/s
Iteration  24: 1395192.223 ops/s
Iteration  25: 1410016.064 ops/s
Iteration  26: 1407131.429 ops/s
Iteration  27: 1407158.949 ops/s
Iteration  28: 1407214.363 ops/s
Iteration  29: 1404690.891 ops/s
Iteration  30: 1400987.274 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedSetBy":
  1405482.631 ±(99.9%) 2769.720 ops/s [Average]
  (min, avg, max) = (1394699.081, 1405482.631, 1412243.168), stdev = 4145.586
  CI (99.9%): [1402712.911, 1408252.351] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedSetBy  thrpt   30  1405482.631 ± 2769.720  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 607745.124 ops/s
# Warmup Iteration   2: 1185997.319 ops/s
# Warmup Iteration   3: 1309075.660 ops/s
# Warmup Iteration   4: 1318302.887 ops/s
# Warmup Iteration   5: 1138147.932 ops/s
# Warmup Iteration   6: 1276400.913 ops/s
# Warmup Iteration   7: 1316740.996 ops/s
# Warmup Iteration   8: 1318410.924 ops/s
# Warmup Iteration   9: 1315622.704 ops/s
# Warmup Iteration  10: 1315349.942 ops/s
# Warmup Iteration  11: 1320095.496 ops/s
# Warmup Iteration  12: 1317026.237 ops/s
# Warmup Iteration  13: 1311899.460 ops/s
# Warmup Iteration  14: 1316867.098 ops/s
# Warmup Iteration  15: 1317362.253 ops/s
# Warmup Iteration  16: 1316620.633 ops/s
# Warmup Iteration  17: 1318931.327 ops/s
# Warmup Iteration  18: 1321393.861 ops/s
# Warmup Iteration  19: 1317943.502 ops/s
# Warmup Iteration  20: 1314470.914 ops/s
# Warmup Iteration  21: 1321104.152 ops/s
# Warmup Iteration  22: 1320807.316 ops/s
# Warmup Iteration  23: 1320860.527 ops/s
# Warmup Iteration  24: 1318342.540 ops/s
# Warmup Iteration  25: 1319620.830 ops/s
# Warmup Iteration  26: 1314699.517 ops/s
# Warmup Iteration  27: 1318040.966 ops/s
# Warmup Iteration  28: 1318230.757 ops/s
# Warmup Iteration  29: 1319485.871 ops/s
# Warmup Iteration  30: 1317965.741 ops/s
Iteration   1: 1317493.491 ops/s
Iteration   2: 1315704.647 ops/s
Iteration   3: 1320522.478 ops/s
Iteration   4: 1319945.848 ops/s
Iteration   5: 1317634.435 ops/s
Iteration   6: 1321785.408 ops/s
Iteration   7: 1320885.555 ops/s
Iteration   8: 1322673.992 ops/s
Iteration   9: 1318354.142 ops/s
Iteration  10: 1314032.682 ops/s
Iteration  11: 1318431.152 ops/s
Iteration  12: 1318669.541 ops/s
Iteration  13: 1306299.490 ops/s
Iteration  14: 1320332.397 ops/s
Iteration  15: 1314862.855 ops/s
Iteration  16: 1317532.099 ops/s
Iteration  17: 1316633.120 ops/s
Iteration  18: 1311431.692 ops/s
Iteration  19: 1317257.082 ops/s
Iteration  20: 1323237.995 ops/s
Iteration  21: 1319180.838 ops/s
Iteration  22: 1322901.000 ops/s
Iteration  23: 1317441.132 ops/s
Iteration  24: 1314108.841 ops/s
Iteration  25: 1323188.472 ops/s
Iteration  26: 1320059.076 ops/s
Iteration  27: 1319146.484 ops/s
Iteration  28: 1318661.863 ops/s
Iteration  29: 1319006.508 ops/s
Iteration  30: 1316351.104 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator":
  1318125.514 ±(99.9%) 2416.096 ops/s [Average]
  (min, avg, max) = (1306299.490, 1318125.514, 1323237.995), stdev = 3616.299
  CI (99.9%): [1315709.418, 1320541.610] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator  thrpt   30  1318125.514 ± 2416.096  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 594735.592 ops/s
# Warmup Iteration   2: 1056573.811 ops/s
# Warmup Iteration   3: 1222861.373 ops/s
# Warmup Iteration   4: 1227995.855 ops/s
# Warmup Iteration   5: 1228727.465 ops/s
# Warmup Iteration   6: 1016660.403 ops/s
# Warmup Iteration   7: 1225787.940 ops/s
# Warmup Iteration   8: 1229265.819 ops/s
# Warmup Iteration   9: 1228276.850 ops/s
# Warmup Iteration  10: 1226360.644 ops/s
# Warmup Iteration  11: 1227639.900 ops/s
# Warmup Iteration  12: 1228539.354 ops/s
# Warmup Iteration  13: 1224703.180 ops/s
# Warmup Iteration  14: 1227438.365 ops/s
# Warmup Iteration  15: 1224590.882 ops/s
# Warmup Iteration  16: 1224502.971 ops/s
# Warmup Iteration  17: 1228178.917 ops/s
# Warmup Iteration  18: 1225898.187 ops/s
# Warmup Iteration  19: 1230175.845 ops/s
# Warmup Iteration  20: 1229099.830 ops/s
# Warmup Iteration  21: 1221677.631 ops/s
# Warmup Iteration  22: 1225698.173 ops/s
# Warmup Iteration  23: 1229388.811 ops/s
# Warmup Iteration  24: 1229116.054 ops/s
# Warmup Iteration  25: 1226587.495 ops/s
# Warmup Iteration  26: 1227624.106 ops/s
# Warmup Iteration  27: 1230658.006 ops/s
# Warmup Iteration  28: 1223815.319 ops/s
# Warmup Iteration  29: 1227616.235 ops/s
# Warmup Iteration  30: 1227361.710 ops/s
Iteration   1: 1225404.795 ops/s
Iteration   2: 1226260.770 ops/s
Iteration   3: 1222773.630 ops/s
Iteration   4: 1212875.154 ops/s
Iteration   5: 1225218.814 ops/s
Iteration   6: 1229552.333 ops/s
Iteration   7: 1227728.263 ops/s
Iteration   8: 1223340.030 ops/s
Iteration   9: 1229800.767 ops/s
Iteration  10: 1227309.898 ops/s
Iteration  11: 1229585.072 ops/s
Iteration  12: 1225927.609 ops/s
Iteration  13: 1223083.657 ops/s
Iteration  14: 1233970.835 ops/s
Iteration  15: 1226796.856 ops/s
Iteration  16: 1230441.436 ops/s
Iteration  17: 1229653.056 ops/s
Iteration  18: 1230959.105 ops/s
Iteration  19: 1228352.511 ops/s
Iteration  20: 1226455.370 ops/s
Iteration  21: 1230047.008 ops/s
Iteration  22: 1224472.512 ops/s
Iteration  23: 1229351.721 ops/s
Iteration  24: 1229098.325 ops/s
Iteration  25: 1225094.171 ops/s
Iteration  26: 1226674.347 ops/s
Iteration  27: 1230514.758 ops/s
Iteration  28: 1216926.145 ops/s
Iteration  29: 1223839.374 ops/s
Iteration  30: 1229002.860 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toList":
  1226683.706 ±(99.9%) 2814.631 ops/s [Average]
  (min, avg, max) = (1212875.154, 1226683.706, 1233970.835), stdev = 4212.807
  CI (99.9%): [1223869.075, 1229498.337] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toList  thrpt   30  1226683.706 ± 2814.631  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 417177.160 ops/s
# Warmup Iteration   2: 770394.455 ops/s
# Warmup Iteration   3: 805956.125 ops/s
# Warmup Iteration   4: 811261.166 ops/s
# Warmup Iteration   5: 699717.801 ops/s
# Warmup Iteration   6: 810388.276 ops/s
# Warmup Iteration   7: 813400.641 ops/s
# Warmup Iteration   8: 809900.406 ops/s
# Warmup Iteration   9: 810013.822 ops/s
# Warmup Iteration  10: 809267.291 ops/s
# Warmup Iteration  11: 809783.357 ops/s
# Warmup Iteration  12: 806140.855 ops/s
# Warmup Iteration  13: 812091.635 ops/s
# Warmup Iteration  14: 812071.571 ops/s
# Warmup Iteration  15: 810595.646 ops/s
# Warmup Iteration  16: 812254.621 ops/s
# Warmup Iteration  17: 810113.577 ops/s
# Warmup Iteration  18: 810024.854 ops/s
# Warmup Iteration  19: 808478.365 ops/s
# Warmup Iteration  20: 810711.347 ops/s
# Warmup Iteration  21: 811681.796 ops/s
# Warmup Iteration  22: 812190.976 ops/s
# Warmup Iteration  23: 809798.514 ops/s
# Warmup Iteration  24: 809772.593 ops/s
# Warmup Iteration  25: 808697.987 ops/s
# Warmup Iteration  26: 810154.270 ops/s
# Warmup Iteration  27: 805749.862 ops/s
# Warmup Iteration  28: 810295.728 ops/s
# Warmup Iteration  29: 808958.875 ops/s
# Warmup Iteration  30: 809569.143 ops/s
Iteration   1: 812040.197 ops/s
Iteration   2: 808175.571 ops/s
Iteration   3: 808469.943 ops/s
Iteration   4: 811436.767 ops/s
Iteration   5: 809509.636 ops/s
Iteration   6: 810069.524 ops/s
Iteration   7: 805864.388 ops/s
Iteration   8: 809354.168 ops/s
Iteration   9: 810059.831 ops/s
Iteration  10: 811370.998 ops/s
Iteration  11: 813199.441 ops/s
Iteration  12: 808455.110 ops/s
Iteration  13: 809887.565 ops/s
Iteration  14: 809557.909 ops/s
Iteration  15: 794972.281 ops/s
Iteration  16: 807558.105 ops/s
Iteration  17: 815513.535 ops/s
Iteration  18: 808395.028 ops/s
Iteration  19: 812580.440 ops/s
Iteration  20: 804823.847 ops/s
Iteration  21: 801969.051 ops/s
Iteration  22: 810249.485 ops/s
Iteration  23: 808503.887 ops/s
Iteration  24: 803921.577 ops/s
Iteration  25: 808242.266 ops/s
Iteration  26: 806135.480 ops/s
Iteration  27: 796356.960 ops/s
Iteration  28: 806286.742 ops/s
Iteration  29: 813330.957 ops/s
Iteration  30: 804779.501 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toMap":
  808035.673 ±(99.9%) 3005.556 ops/s [Average]
  (min, avg, max) = (794972.281, 808035.673, 815513.535), stdev = 4498.575
  CI (99.9%): [805030.117, 811041.229] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toMap  thrpt   30  808035.673 ± 3005.556  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toMapOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toMapOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 628735.718 ops/s
# Warmup Iteration   2: 1194183.022 ops/s
# Warmup Iteration   3: 1301202.674 ops/s
# Warmup Iteration   4: 1310701.028 ops/s
# Warmup Iteration   5: 1116746.972 ops/s
# Warmup Iteration   6: 1286524.278 ops/s
# Warmup Iteration   7: 1304490.560 ops/s
# Warmup Iteration   8: 1303741.838 ops/s
# Warmup Iteration   9: 1308772.537 ops/s
# Warmup Iteration  10: 1309688.243 ops/s
# Warmup Iteration  11: 1313180.864 ops/s
# Warmup Iteration  12: 1311292.798 ops/s
# Warmup Iteration  13: 1310999.182 ops/s
# Warmup Iteration  14: 1309688.402 ops/s
# Warmup Iteration  15: 1307161.884 ops/s
# Warmup Iteration  16: 1304765.457 ops/s
# Warmup Iteration  17: 1311735.617 ops/s
# Warmup Iteration  18: 1310383.131 ops/s
# Warmup Iteration  19: 1307482.001 ops/s
# Warmup Iteration  20: 1311250.925 ops/s
# Warmup Iteration  21: 1303165.698 ops/s
# Warmup Iteration  22: 1309196.927 ops/s
# Warmup Iteration  23: 1311914.496 ops/s
# Warmup Iteration  24: 1309413.941 ops/s
# Warmup Iteration  25: 1308877.782 ops/s
# Warmup Iteration  26: 1312145.708 ops/s
# Warmup Iteration  27: 1310615.157 ops/s
# Warmup Iteration  28: 1310226.012 ops/s
# Warmup Iteration  29: 1310199.584 ops/s
# Warmup Iteration  30: 1311046.546 ops/s
Iteration   1: 1311184.198 ops/s
Iteration   2: 1313348.594 ops/s
Iteration   3: 1311944.200 ops/s
Iteration   4: 1304110.413 ops/s
Iteration   5: 1314134.396 ops/s
Iteration   6: 1309637.043 ops/s
Iteration   7: 1312046.203 ops/s
Iteration   8: 1314518.427 ops/s
Iteration   9: 1308581.920 ops/s
Iteration  10: 1307172.774 ops/s
Iteration  11: 1309507.795 ops/s
Iteration  12: 1309204.477 ops/s
Iteration  13: 1309561.163 ops/s
Iteration  14: 1309788.841 ops/s
Iteration  15: 1309683.548 ops/s
Iteration  16: 1311851.792 ops/s
Iteration  17: 1314749.629 ops/s
Iteration  18: 1309105.405 ops/s
Iteration  19: 1313239.347 ops/s
Iteration  20: 1311294.395 ops/s
Iteration  21: 1303476.864 ops/s
Iteration  22: 1309929.159 ops/s
Iteration  23: 1311949.376 ops/s
Iteration  24: 1311715.286 ops/s
Iteration  25: 1313016.884 ops/s
Iteration  26: 1311337.934 ops/s
Iteration  27: 1307413.849 ops/s
Iteration  28: 1310799.770 ops/s
Iteration  29: 1309129.083 ops/s
Iteration  30: 1313056.905 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toMapOfItemToCount":
  1310549.656 ±(99.9%) 1804.895 ops/s [Average]
  (min, avg, max) = (1303476.864, 1310549.656, 1314749.629), stdev = 2701.481
  CI (99.9%): [1308744.761, 1312354.550] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toMapOfItemToCount  thrpt   30  1310549.656 ± 1804.895  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toMapTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toMapTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 740157.122 ops/s
# Warmup Iteration   2: 1767686.879 ops/s
# Warmup Iteration   3: 1784343.460 ops/s
# Warmup Iteration   4: 1494414.028 ops/s
# Warmup Iteration   5: 1784392.590 ops/s
# Warmup Iteration   6: 1786444.923 ops/s
# Warmup Iteration   7: 1791424.824 ops/s
# Warmup Iteration   8: 1788678.026 ops/s
# Warmup Iteration   9: 1784626.527 ops/s
# Warmup Iteration  10: 1793867.674 ops/s
# Warmup Iteration  11: 1795023.151 ops/s
# Warmup Iteration  12: 1755933.080 ops/s
# Warmup Iteration  13: 1797128.683 ops/s
# Warmup Iteration  14: 1795075.070 ops/s
# Warmup Iteration  15: 1771977.091 ops/s
# Warmup Iteration  16: 1788592.066 ops/s
# Warmup Iteration  17: 1794918.740 ops/s
# Warmup Iteration  18: 1794553.241 ops/s
# Warmup Iteration  19: 1800828.959 ops/s
# Warmup Iteration  20: 1794934.021 ops/s
# Warmup Iteration  21: 1785873.467 ops/s
# Warmup Iteration  22: 1783001.291 ops/s
# Warmup Iteration  23: 1794264.595 ops/s
# Warmup Iteration  24: 1800377.561 ops/s
# Warmup Iteration  25: 1798801.818 ops/s
# Warmup Iteration  26: 1791051.894 ops/s
# Warmup Iteration  27: 1792660.722 ops/s
# Warmup Iteration  28: 1794304.583 ops/s
# Warmup Iteration  29: 1787688.285 ops/s
# Warmup Iteration  30: 1785674.455 ops/s
Iteration   1: 1792620.135 ops/s
Iteration   2: 1795709.764 ops/s
Iteration   3: 1785202.360 ops/s
Iteration   4: 1783991.774 ops/s
Iteration   5: 1798658.019 ops/s
Iteration   6: 1787939.025 ops/s
Iteration   7: 1795727.724 ops/s
Iteration   8: 1800416.291 ops/s
Iteration   9: 1795015.941 ops/s
Iteration  10: 1793561.476 ops/s
Iteration  11: 1791611.193 ops/s
Iteration  12: 1798895.260 ops/s
Iteration  13: 1797948.896 ops/s
Iteration  14: 1791996.315 ops/s
Iteration  15: 1791882.358 ops/s
Iteration  16: 1801776.799 ops/s
Iteration  17: 1771695.980 ops/s
Iteration  18: 1769583.851 ops/s
Iteration  19: 1795607.983 ops/s
Iteration  20: 1791329.960 ops/s
Iteration  21: 1794710.770 ops/s
Iteration  22: 1795151.016 ops/s
Iteration  23: 1802302.882 ops/s
Iteration  24: 1788783.681 ops/s
Iteration  25: 1767411.702 ops/s
Iteration  26: 1788807.827 ops/s
Iteration  27: 1792154.234 ops/s
Iteration  28: 1789586.944 ops/s
Iteration  29: 1779504.825 ops/s
Iteration  30: 1790230.624 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toMapTarget":
  1790660.520 ±(99.9%) 5882.699 ops/s [Average]
  (min, avg, max) = (1767411.702, 1790660.520, 1802302.882), stdev = 8804.947
  CI (99.9%): [1784777.822, 1796543.219] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toMapTarget  thrpt   30  1790660.520 ± 5882.699  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 467244.244 ops/s
# Warmup Iteration   2: 807394.194 ops/s
# Warmup Iteration   3: 938937.635 ops/s
# Warmup Iteration   4: 934466.080 ops/s
# Warmup Iteration   5: 938387.243 ops/s
# Warmup Iteration   6: 784863.881 ops/s
# Warmup Iteration   7: 944247.805 ops/s
# Warmup Iteration   8: 941806.065 ops/s
# Warmup Iteration   9: 940334.672 ops/s
# Warmup Iteration  10: 941762.579 ops/s
# Warmup Iteration  11: 943997.644 ops/s
# Warmup Iteration  12: 943341.451 ops/s
# Warmup Iteration  13: 943833.074 ops/s
# Warmup Iteration  14: 940140.448 ops/s
# Warmup Iteration  15: 942064.486 ops/s
# Warmup Iteration  16: 939433.792 ops/s
# Warmup Iteration  17: 939270.408 ops/s
# Warmup Iteration  18: 938708.815 ops/s
# Warmup Iteration  19: 940976.118 ops/s
# Warmup Iteration  20: 939401.052 ops/s
# Warmup Iteration  21: 941422.562 ops/s
# Warmup Iteration  22: 940775.793 ops/s
# Warmup Iteration  23: 939477.147 ops/s
# Warmup Iteration  24: 940999.174 ops/s
# Warmup Iteration  25: 940422.898 ops/s
# Warmup Iteration  26: 940194.043 ops/s
# Warmup Iteration  27: 938928.886 ops/s
# Warmup Iteration  28: 938829.553 ops/s
# Warmup Iteration  29: 938152.183 ops/s
# Warmup Iteration  30: 937994.557 ops/s
Iteration   1: 941898.516 ops/s
Iteration   2: 936036.610 ops/s
Iteration   3: 941188.006 ops/s
Iteration   4: 937735.224 ops/s
Iteration   5: 940223.185 ops/s
Iteration   6: 941385.032 ops/s
Iteration   7: 940159.109 ops/s
Iteration   8: 938553.228 ops/s
Iteration   9: 940799.081 ops/s
Iteration  10: 942515.449 ops/s
Iteration  11: 940632.264 ops/s
Iteration  12: 939672.729 ops/s
Iteration  13: 937527.679 ops/s
Iteration  14: 936112.514 ops/s
Iteration  15: 940543.808 ops/s
Iteration  16: 942368.665 ops/s
Iteration  17: 938772.127 ops/s
Iteration  18: 937686.312 ops/s
Iteration  19: 942833.634 ops/s
Iteration  20: 941695.574 ops/s
Iteration  21: 941419.726 ops/s
Iteration  22: 937656.017 ops/s
Iteration  23: 934421.378 ops/s
Iteration  24: 941476.748 ops/s
Iteration  25: 944881.058 ops/s
Iteration  26: 940345.984 ops/s
Iteration  27: 943643.033 ops/s
Iteration  28: 941031.641 ops/s
Iteration  29: 943888.803 ops/s
Iteration  30: 940680.072 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSet":
  940259.440 ±(99.9%) 1641.079 ops/s [Average]
  (min, avg, max) = (934421.378, 940259.440, 944881.058), stdev = 2456.290
  CI (99.9%): [938618.361, 941900.519] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toSet  thrpt   30  940259.440 ± 1641.079  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 131682.907 ops/s
# Warmup Iteration   2: 258552.423 ops/s
# Warmup Iteration   3: 296004.837 ops/s
# Warmup Iteration   4: 297625.331 ops/s
# Warmup Iteration   5: 273544.751 ops/s
# Warmup Iteration   6: 268999.251 ops/s
# Warmup Iteration   7: 297185.031 ops/s
# Warmup Iteration   8: 296210.271 ops/s
# Warmup Iteration   9: 296527.919 ops/s
# Warmup Iteration  10: 296388.716 ops/s
# Warmup Iteration  11: 295779.778 ops/s
# Warmup Iteration  12: 296615.793 ops/s
# Warmup Iteration  13: 296007.350 ops/s
# Warmup Iteration  14: 296227.950 ops/s
# Warmup Iteration  15: 296821.488 ops/s
# Warmup Iteration  16: 295993.223 ops/s
# Warmup Iteration  17: 298736.076 ops/s
# Warmup Iteration  18: 298857.932 ops/s
# Warmup Iteration  19: 298236.276 ops/s
# Warmup Iteration  20: 298111.839 ops/s
# Warmup Iteration  21: 298536.377 ops/s
# Warmup Iteration  22: 298471.239 ops/s
# Warmup Iteration  23: 297993.640 ops/s
# Warmup Iteration  24: 298472.634 ops/s
# Warmup Iteration  25: 296778.439 ops/s
# Warmup Iteration  26: 298313.149 ops/s
# Warmup Iteration  27: 296384.300 ops/s
# Warmup Iteration  28: 298743.927 ops/s
# Warmup Iteration  29: 297767.254 ops/s
# Warmup Iteration  30: 297935.314 ops/s
Iteration   1: 299203.237 ops/s
Iteration   2: 297693.474 ops/s
Iteration   3: 296759.573 ops/s
Iteration   4: 299191.520 ops/s
Iteration   5: 298833.698 ops/s
Iteration   6: 299105.982 ops/s
Iteration   7: 297742.158 ops/s
Iteration   8: 298577.065 ops/s
Iteration   9: 298940.822 ops/s
Iteration  10: 297900.838 ops/s
Iteration  11: 298532.503 ops/s
Iteration  12: 298883.767 ops/s
Iteration  13: 297993.644 ops/s
Iteration  14: 297646.054 ops/s
Iteration  15: 298521.384 ops/s
Iteration  16: 299176.714 ops/s
Iteration  17: 299007.174 ops/s
Iteration  18: 297652.925 ops/s
Iteration  19: 298120.481 ops/s
Iteration  20: 299213.176 ops/s
Iteration  21: 298073.235 ops/s
Iteration  22: 299363.755 ops/s
Iteration  23: 298050.551 ops/s
Iteration  24: 298400.468 ops/s
Iteration  25: 299511.334 ops/s
Iteration  26: 298848.132 ops/s
Iteration  27: 298925.713 ops/s
Iteration  28: 298583.375 ops/s
Iteration  29: 298204.468 ops/s
Iteration  30: 297773.347 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedBagBy":
  298481.019 ±(99.9%) 439.708 ops/s [Average]
  (min, avg, max) = (296759.573, 298481.019, 299511.334), stdev = 658.134
  CI (99.9%): [298041.311, 298920.727] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  298481.019 ± 439.708  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 267095.740 ops/s
# Warmup Iteration   2: 486434.654 ops/s
# Warmup Iteration   3: 542566.569 ops/s
# Warmup Iteration   4: 545962.698 ops/s
# Warmup Iteration   5: 546546.332 ops/s
# Warmup Iteration   6: 461336.071 ops/s
# Warmup Iteration   7: 549964.460 ops/s
# Warmup Iteration   8: 548933.247 ops/s
# Warmup Iteration   9: 549233.865 ops/s
# Warmup Iteration  10: 548894.673 ops/s
# Warmup Iteration  11: 548167.876 ops/s
# Warmup Iteration  12: 548185.084 ops/s
# Warmup Iteration  13: 549139.341 ops/s
# Warmup Iteration  14: 547601.959 ops/s
# Warmup Iteration  15: 548772.733 ops/s
# Warmup Iteration  16: 548162.493 ops/s
# Warmup Iteration  17: 548679.737 ops/s
# Warmup Iteration  18: 548100.666 ops/s
# Warmup Iteration  19: 549922.104 ops/s
# Warmup Iteration  20: 549087.882 ops/s
# Warmup Iteration  21: 549153.921 ops/s
# Warmup Iteration  22: 547905.377 ops/s
# Warmup Iteration  23: 548850.984 ops/s
# Warmup Iteration  24: 547702.397 ops/s
# Warmup Iteration  25: 547555.947 ops/s
# Warmup Iteration  26: 549098.931 ops/s
# Warmup Iteration  27: 549619.303 ops/s
# Warmup Iteration  28: 549975.035 ops/s
# Warmup Iteration  29: 549288.485 ops/s
# Warmup Iteration  30: 550566.497 ops/s
Iteration   1: 549585.240 ops/s
Iteration   2: 551119.326 ops/s
Iteration   3: 549647.611 ops/s
Iteration   4: 549670.644 ops/s
Iteration   5: 549101.549 ops/s
Iteration   6: 549011.753 ops/s
Iteration   7: 549761.093 ops/s
Iteration   8: 549864.361 ops/s
Iteration   9: 549485.444 ops/s
Iteration  10: 549636.421 ops/s
Iteration  11: 549426.394 ops/s
Iteration  12: 550809.850 ops/s
Iteration  13: 548567.372 ops/s
Iteration  14: 548014.899 ops/s
Iteration  15: 549391.780 ops/s
Iteration  16: 551182.997 ops/s
Iteration  17: 547296.037 ops/s
Iteration  18: 548390.865 ops/s
Iteration  19: 549924.210 ops/s
Iteration  20: 549614.780 ops/s
Iteration  21: 547924.460 ops/s
Iteration  22: 546677.224 ops/s
Iteration  23: 550344.815 ops/s
Iteration  24: 550288.515 ops/s
Iteration  25: 549552.623 ops/s
Iteration  26: 550606.879 ops/s
Iteration  27: 547743.264 ops/s
Iteration  28: 549187.559 ops/s
Iteration  29: 549850.563 ops/s
Iteration  30: 549546.099 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedBag_natural_ordering":
  549374.154 ±(99.9%) 713.416 ops/s [Average]
  (min, avg, max) = (546677.224, 549374.154, 551182.997), stdev = 1067.807
  CI (99.9%): [548660.739, 550087.570] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toSortedBag_natural_ordering  thrpt   30  549374.154 ± 713.416  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 364180.804 ops/s
# Warmup Iteration   2: 677602.509 ops/s
# Warmup Iteration   3: 774311.925 ops/s
# Warmup Iteration   4: 778765.237 ops/s
# Warmup Iteration   5: 778933.382 ops/s
# Warmup Iteration   6: 652176.313 ops/s
# Warmup Iteration   7: 773435.561 ops/s
# Warmup Iteration   8: 775405.892 ops/s
# Warmup Iteration   9: 776576.029 ops/s
# Warmup Iteration  10: 779331.317 ops/s
# Warmup Iteration  11: 779307.412 ops/s
# Warmup Iteration  12: 780298.976 ops/s
# Warmup Iteration  13: 778792.417 ops/s
# Warmup Iteration  14: 779341.582 ops/s
# Warmup Iteration  15: 774626.549 ops/s
# Warmup Iteration  16: 779646.237 ops/s
# Warmup Iteration  17: 777537.510 ops/s
# Warmup Iteration  18: 775391.688 ops/s
# Warmup Iteration  19: 776663.079 ops/s
# Warmup Iteration  20: 777316.409 ops/s
# Warmup Iteration  21: 775438.100 ops/s
# Warmup Iteration  22: 767253.348 ops/s
# Warmup Iteration  23: 777825.660 ops/s
# Warmup Iteration  24: 777365.967 ops/s
# Warmup Iteration  25: 776647.409 ops/s
# Warmup Iteration  26: 777183.082 ops/s
# Warmup Iteration  27: 777300.309 ops/s
# Warmup Iteration  28: 776519.377 ops/s
# Warmup Iteration  29: 779386.112 ops/s
# Warmup Iteration  30: 777372.537 ops/s
Iteration   1: 777062.320 ops/s
Iteration   2: 775041.004 ops/s
Iteration   3: 775195.978 ops/s
Iteration   4: 778162.260 ops/s
Iteration   5: 779160.041 ops/s
Iteration   6: 776787.489 ops/s
Iteration   7: 779218.165 ops/s
Iteration   8: 778008.708 ops/s
Iteration   9: 777919.705 ops/s
Iteration  10: 775533.464 ops/s
Iteration  11: 779072.740 ops/s
Iteration  12: 776842.360 ops/s
Iteration  13: 778591.086 ops/s
Iteration  14: 780281.731 ops/s
Iteration  15: 774392.941 ops/s
Iteration  16: 773303.011 ops/s
Iteration  17: 777635.702 ops/s
Iteration  18: 776711.512 ops/s
Iteration  19: 777701.508 ops/s
Iteration  20: 777325.920 ops/s
Iteration  21: 779209.698 ops/s
Iteration  22: 779814.959 ops/s
Iteration  23: 772413.624 ops/s
Iteration  24: 777005.101 ops/s
Iteration  25: 772632.750 ops/s
Iteration  26: 779958.553 ops/s
Iteration  27: 777903.503 ops/s
Iteration  28: 772977.408 ops/s
Iteration  29: 778546.022 ops/s
Iteration  30: 780258.169 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedBag_with_comparator":
  777155.581 ±(99.9%) 1530.636 ops/s [Average]
  (min, avg, max) = (772413.624, 777155.581, 780281.731), stdev = 2290.983
  CI (99.9%): [775624.946, 778686.217] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toSortedBag_with_comparator  thrpt   30  777155.581 ± 1530.636  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedBag_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedBag_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 384849.973 ops/s
# Warmup Iteration   2: 410681.680 ops/s
# Warmup Iteration   3: 544237.781 ops/s
# Warmup Iteration   4: 544557.758 ops/s
# Warmup Iteration   5: 540118.077 ops/s
# Warmup Iteration   6: 543771.746 ops/s
# Warmup Iteration   7: 544870.894 ops/s
# Warmup Iteration   8: 545282.429 ops/s
# Warmup Iteration   9: 547280.848 ops/s
# Warmup Iteration  10: 545089.158 ops/s
# Warmup Iteration  11: 532703.015 ops/s
# Warmup Iteration  12: 472933.152 ops/s
# Warmup Iteration  13: 546513.639 ops/s
# Warmup Iteration  14: 543215.517 ops/s
# Warmup Iteration  15: 546389.344 ops/s
# Warmup Iteration  16: 545269.649 ops/s
# Warmup Iteration  17: 562856.554 ops/s
# Warmup Iteration  18: 561766.561 ops/s
# Warmup Iteration  19: 562699.001 ops/s
# Warmup Iteration  20: 561696.590 ops/s
# Warmup Iteration  21: 562463.083 ops/s
# Warmup Iteration  22: 560959.574 ops/s
# Warmup Iteration  23: 562252.251 ops/s
# Warmup Iteration  24: 560881.881 ops/s
# Warmup Iteration  25: 562340.771 ops/s
# Warmup Iteration  26: 562983.342 ops/s
# Warmup Iteration  27: 564498.589 ops/s
# Warmup Iteration  28: 563571.876 ops/s
# Warmup Iteration  29: 563099.530 ops/s
# Warmup Iteration  30: 562366.546 ops/s
Iteration   1: 560066.327 ops/s
Iteration   2: 555192.595 ops/s
Iteration   3: 559575.397 ops/s
Iteration   4: 561204.956 ops/s
Iteration   5: 563762.012 ops/s
Iteration   6: 563215.482 ops/s
Iteration   7: 560744.516 ops/s
Iteration   8: 564101.061 ops/s
Iteration   9: 562165.372 ops/s
Iteration  10: 561953.313 ops/s
Iteration  11: 561634.305 ops/s
Iteration  12: 558861.831 ops/s
Iteration  13: 560565.335 ops/s
Iteration  14: 554594.858 ops/s
Iteration  15: 563211.175 ops/s
Iteration  16: 562654.197 ops/s
Iteration  17: 561913.477 ops/s
Iteration  18: 562162.841 ops/s
Iteration  19: 562670.069 ops/s
Iteration  20: 562205.228 ops/s
Iteration  21: 561913.159 ops/s
Iteration  22: 562072.186 ops/s
Iteration  23: 562401.634 ops/s
Iteration  24: 559503.806 ops/s
Iteration  25: 560162.863 ops/s
Iteration  26: 563632.802 ops/s
Iteration  27: 563234.323 ops/s
Iteration  28: 563196.891 ops/s
Iteration  29: 563678.397 ops/s
Iteration  30: 561508.799 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedBag_with_null":
  561458.640 ±(99.9%) 1499.898 ops/s [Average]
  (min, avg, max) = (554594.858, 561458.640, 564101.061), stdev = 2244.977
  CI (99.9%): [559958.742, 562958.538] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toSortedBag_with_null  thrpt   30  561458.640 ± 1499.898  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 293131.752 ops/s
# Warmup Iteration   2: 459193.877 ops/s
# Warmup Iteration   3: 558290.895 ops/s
# Warmup Iteration   4: 556478.762 ops/s
# Warmup Iteration   5: 559020.151 ops/s
# Warmup Iteration   6: 558658.166 ops/s
# Warmup Iteration   7: 461783.678 ops/s
# Warmup Iteration   8: 559547.983 ops/s
# Warmup Iteration   9: 559067.760 ops/s
# Warmup Iteration  10: 559685.512 ops/s
# Warmup Iteration  11: 558157.532 ops/s
# Warmup Iteration  12: 559202.170 ops/s
# Warmup Iteration  13: 560339.892 ops/s
# Warmup Iteration  14: 559421.664 ops/s
# Warmup Iteration  15: 559958.723 ops/s
# Warmup Iteration  16: 559891.674 ops/s
# Warmup Iteration  17: 557855.815 ops/s
# Warmup Iteration  18: 558616.820 ops/s
# Warmup Iteration  19: 560045.387 ops/s
# Warmup Iteration  20: 559072.205 ops/s
# Warmup Iteration  21: 557845.444 ops/s
# Warmup Iteration  22: 559305.839 ops/s
# Warmup Iteration  23: 559386.593 ops/s
# Warmup Iteration  24: 559086.613 ops/s
# Warmup Iteration  25: 558373.859 ops/s
# Warmup Iteration  26: 559033.345 ops/s
# Warmup Iteration  27: 559820.237 ops/s
# Warmup Iteration  28: 559320.206 ops/s
# Warmup Iteration  29: 558890.172 ops/s
# Warmup Iteration  30: 558858.753 ops/s
Iteration   1: 558913.614 ops/s
Iteration   2: 560704.754 ops/s
Iteration   3: 559580.019 ops/s
Iteration   4: 558766.670 ops/s
Iteration   5: 553358.930 ops/s
Iteration   6: 553232.289 ops/s
Iteration   7: 560133.043 ops/s
Iteration   8: 559911.077 ops/s
Iteration   9: 558477.829 ops/s
Iteration  10: 558286.732 ops/s
Iteration  11: 559798.819 ops/s
Iteration  12: 558558.094 ops/s
Iteration  13: 559247.044 ops/s
Iteration  14: 558318.266 ops/s
Iteration  15: 557575.239 ops/s
Iteration  16: 559728.829 ops/s
Iteration  17: 559036.761 ops/s
Iteration  18: 558086.553 ops/s
Iteration  19: 559612.313 ops/s
Iteration  20: 553626.101 ops/s
Iteration  21: 559679.509 ops/s
Iteration  22: 559393.965 ops/s
Iteration  23: 559803.100 ops/s
Iteration  24: 559373.689 ops/s
Iteration  25: 560344.878 ops/s
Iteration  26: 558887.213 ops/s
Iteration  27: 558562.277 ops/s
Iteration  28: 561046.870 ops/s
Iteration  29: 559361.861 ops/s
Iteration  30: 560326.163 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedListBy":
  558724.417 ±(99.9%) 1315.990 ops/s [Average]
  (min, avg, max) = (553232.289, 558724.417, 561046.870), stdev = 1969.712
  CI (99.9%): [557408.427, 560040.407] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toSortedListBy  thrpt   30  558724.417 ± 1315.990  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedListBy_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedListBy_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 385649.183 ops/s
# Warmup Iteration   2: 410241.799 ops/s
# Warmup Iteration   3: 550847.475 ops/s
# Warmup Iteration   4: 547594.273 ops/s
# Warmup Iteration   5: 543788.842 ops/s
# Warmup Iteration   6: 550686.736 ops/s
# Warmup Iteration   7: 548750.433 ops/s
# Warmup Iteration   8: 545388.618 ops/s
# Warmup Iteration   9: 548680.087 ops/s
# Warmup Iteration  10: 549076.719 ops/s
# Warmup Iteration  11: 530476.018 ops/s
# Warmup Iteration  12: 485060.222 ops/s
# Warmup Iteration  13: 546696.582 ops/s
# Warmup Iteration  14: 551169.333 ops/s
# Warmup Iteration  15: 548870.280 ops/s
# Warmup Iteration  16: 549227.337 ops/s
# Warmup Iteration  17: 564851.511 ops/s
# Warmup Iteration  18: 560600.731 ops/s
# Warmup Iteration  19: 558247.724 ops/s
# Warmup Iteration  20: 568137.244 ops/s
# Warmup Iteration  21: 567832.857 ops/s
# Warmup Iteration  22: 570147.120 ops/s
# Warmup Iteration  23: 569201.905 ops/s
# Warmup Iteration  24: 569373.508 ops/s
# Warmup Iteration  25: 570454.242 ops/s
# Warmup Iteration  26: 562194.207 ops/s
# Warmup Iteration  27: 563140.419 ops/s
# Warmup Iteration  28: 568870.527 ops/s
# Warmup Iteration  29: 569035.980 ops/s
# Warmup Iteration  30: 570492.397 ops/s
Iteration   1: 570123.569 ops/s
Iteration   2: 569459.435 ops/s
Iteration   3: 564511.594 ops/s
Iteration   4: 568191.369 ops/s
Iteration   5: 566506.829 ops/s
Iteration   6: 568054.765 ops/s
Iteration   7: 569291.868 ops/s
Iteration   8: 569469.342 ops/s
Iteration   9: 569704.593 ops/s
Iteration  10: 566517.129 ops/s
Iteration  11: 567667.026 ops/s
Iteration  12: 569732.559 ops/s
Iteration  13: 569095.805 ops/s
Iteration  14: 564273.729 ops/s
Iteration  15: 567246.345 ops/s
Iteration  16: 569861.559 ops/s
Iteration  17: 566674.833 ops/s
Iteration  18: 544253.871 ops/s
Iteration  19: 569195.395 ops/s
Iteration  20: 569033.762 ops/s
Iteration  21: 568377.262 ops/s
Iteration  22: 561321.565 ops/s
Iteration  23: 570411.086 ops/s
Iteration  24: 568849.337 ops/s
Iteration  25: 567282.458 ops/s
Iteration  26: 567486.511 ops/s
Iteration  27: 570905.433 ops/s
Iteration  28: 567909.947 ops/s
Iteration  29: 568410.938 ops/s
Iteration  30: 567681.445 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedListBy_with_null":
  567250.045 ±(99.9%) 3197.613 ops/s [Average]
  (min, avg, max) = (544253.871, 567250.045, 570905.433), stdev = 4786.037
  CI (99.9%): [564052.432, 570447.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toSortedListBy_with_null  thrpt   30  567250.045 ± 3197.613  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedListWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedListWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1501033.809 ops/s
# Warmup Iteration   2: 2817042.386 ops/s
# Warmup Iteration   3: 3157944.465 ops/s
# Warmup Iteration   4: 3184108.833 ops/s
# Warmup Iteration   5: 2882100.315 ops/s
# Warmup Iteration   6: 2932995.682 ops/s
# Warmup Iteration   7: 3177508.597 ops/s
# Warmup Iteration   8: 3177784.875 ops/s
# Warmup Iteration   9: 3186573.315 ops/s
# Warmup Iteration  10: 3185956.134 ops/s
# Warmup Iteration  11: 3185406.167 ops/s
# Warmup Iteration  12: 3172189.797 ops/s
# Warmup Iteration  13: 3179823.455 ops/s
# Warmup Iteration  14: 3177355.393 ops/s
# Warmup Iteration  15: 3177099.204 ops/s
# Warmup Iteration  16: 3187258.783 ops/s
# Warmup Iteration  17: 3173696.033 ops/s
# Warmup Iteration  18: 3183370.980 ops/s
# Warmup Iteration  19: 3179339.867 ops/s
# Warmup Iteration  20: 3186600.431 ops/s
# Warmup Iteration  21: 3183458.318 ops/s
# Warmup Iteration  22: 3160622.604 ops/s
# Warmup Iteration  23: 3175119.982 ops/s
# Warmup Iteration  24: 3183523.187 ops/s
# Warmup Iteration  25: 3187188.093 ops/s
# Warmup Iteration  26: 3184558.849 ops/s
# Warmup Iteration  27: 3185271.926 ops/s
# Warmup Iteration  28: 3188134.565 ops/s
# Warmup Iteration  29: 3187177.919 ops/s
# Warmup Iteration  30: 3183600.500 ops/s
Iteration   1: 3195491.354 ops/s
Iteration   2: 3173316.442 ops/s
Iteration   3: 3182704.553 ops/s
Iteration   4: 3180609.654 ops/s
Iteration   5: 3184249.022 ops/s
Iteration   6: 3194322.082 ops/s
Iteration   7: 3182153.126 ops/s
Iteration   8: 3181618.193 ops/s
Iteration   9: 3174736.299 ops/s
Iteration  10: 3179147.390 ops/s
Iteration  11: 3181597.462 ops/s
Iteration  12: 3182632.801 ops/s
Iteration  13: 3186450.622 ops/s
Iteration  14: 3190592.847 ops/s
Iteration  15: 3180895.957 ops/s
Iteration  16: 3194381.130 ops/s
Iteration  17: 3181168.432 ops/s
Iteration  18: 3177345.118 ops/s
Iteration  19: 3158316.145 ops/s
Iteration  20: 3189822.154 ops/s
Iteration  21: 3190780.386 ops/s
Iteration  22: 3180389.691 ops/s
Iteration  23: 3175306.094 ops/s
Iteration  24: 3194713.024 ops/s
Iteration  25: 3171113.827 ops/s
Iteration  26: 3181697.969 ops/s
Iteration  27: 3196255.860 ops/s
Iteration  28: 3169599.403 ops/s
Iteration  29: 3152289.183 ops/s
Iteration  30: 3192923.920 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedListWith":
  3181887.338 ±(99.9%) 6945.898 ops/s [Average]
  (min, avg, max) = (3152289.183, 3181887.338, 3196255.860), stdev = 10396.294
  CI (99.9%): [3174941.440, 3188833.236] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toSortedListWith  thrpt   30  3181887.338 ± 6945.898  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 537895.785 ops/s
# Warmup Iteration   2: 974165.628 ops/s
# Warmup Iteration   3: 1078265.822 ops/s
# Warmup Iteration   4: 1078562.985 ops/s
# Warmup Iteration   5: 1042854.436 ops/s
# Warmup Iteration   6: 948289.047 ops/s
# Warmup Iteration   7: 1084167.193 ops/s
# Warmup Iteration   8: 1084656.228 ops/s
# Warmup Iteration   9: 1078383.053 ops/s
# Warmup Iteration  10: 1085395.438 ops/s
# Warmup Iteration  11: 1081877.043 ops/s
# Warmup Iteration  12: 1085441.136 ops/s
# Warmup Iteration  13: 1087213.831 ops/s
# Warmup Iteration  14: 1084638.723 ops/s
# Warmup Iteration  15: 1084450.314 ops/s
# Warmup Iteration  16: 1076788.263 ops/s
# Warmup Iteration  17: 1083656.948 ops/s
# Warmup Iteration  18: 1082782.777 ops/s
# Warmup Iteration  19: 1084684.268 ops/s
# Warmup Iteration  20: 1086595.498 ops/s
# Warmup Iteration  21: 1086102.932 ops/s
# Warmup Iteration  22: 1084503.430 ops/s
# Warmup Iteration  23: 1084690.310 ops/s
# Warmup Iteration  24: 1084022.514 ops/s
# Warmup Iteration  25: 1083788.256 ops/s
# Warmup Iteration  26: 1084367.501 ops/s
# Warmup Iteration  27: 1085521.973 ops/s
# Warmup Iteration  28: 1075511.584 ops/s
# Warmup Iteration  29: 1082196.389 ops/s
# Warmup Iteration  30: 1086976.007 ops/s
Iteration   1: 1086077.139 ops/s
Iteration   2: 1087063.039 ops/s
Iteration   3: 1085028.521 ops/s
Iteration   4: 1083873.680 ops/s
Iteration   5: 1085288.389 ops/s
Iteration   6: 1084291.056 ops/s
Iteration   7: 1080230.848 ops/s
Iteration   8: 1082463.258 ops/s
Iteration   9: 1074975.902 ops/s
Iteration  10: 1084609.706 ops/s
Iteration  11: 1084942.055 ops/s
Iteration  12: 1083686.385 ops/s
Iteration  13: 1085601.734 ops/s
Iteration  14: 1081144.972 ops/s
Iteration  15: 1087637.265 ops/s
Iteration  16: 1080822.121 ops/s
Iteration  17: 1084545.620 ops/s
Iteration  18: 1083738.170 ops/s
Iteration  19: 1086232.303 ops/s
Iteration  20: 1088664.733 ops/s
Iteration  21: 1084921.380 ops/s
Iteration  22: 1088144.078 ops/s
Iteration  23: 1085658.042 ops/s
Iteration  24: 1084547.281 ops/s
Iteration  25: 1083666.978 ops/s
Iteration  26: 1080833.997 ops/s
Iteration  27: 1085618.952 ops/s
Iteration  28: 1082492.422 ops/s
Iteration  29: 1081826.852 ops/s
Iteration  30: 1086660.423 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedList_natural_ordering":
  1084176.243 ±(99.9%) 1856.831 ops/s [Average]
  (min, avg, max) = (1074975.902, 1084176.243, 1088664.733), stdev = 2779.218
  CI (99.9%): [1082319.412, 1086033.075] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toSortedList_natural_ordering  thrpt   30  1084176.243 ± 1856.831  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 593277.749 ops/s
# Warmup Iteration   2: 1087526.003 ops/s
# Warmup Iteration   3: 1231503.537 ops/s
# Warmup Iteration   4: 1235370.647 ops/s
# Warmup Iteration   5: 1235893.325 ops/s
# Warmup Iteration   6: 1032618.625 ops/s
# Warmup Iteration   7: 1234264.575 ops/s
# Warmup Iteration   8: 1234702.014 ops/s
# Warmup Iteration   9: 1235699.174 ops/s
# Warmup Iteration  10: 1238558.173 ops/s
# Warmup Iteration  11: 1238361.651 ops/s
# Warmup Iteration  12: 1236393.957 ops/s
# Warmup Iteration  13: 1229683.243 ops/s
# Warmup Iteration  14: 1236608.199 ops/s
# Warmup Iteration  15: 1234559.774 ops/s
# Warmup Iteration  16: 1233345.629 ops/s
# Warmup Iteration  17: 1238840.625 ops/s
# Warmup Iteration  18: 1231001.646 ops/s
# Warmup Iteration  19: 1238703.281 ops/s
# Warmup Iteration  20: 1237626.914 ops/s
# Warmup Iteration  21: 1235196.040 ops/s
# Warmup Iteration  22: 1237223.730 ops/s
# Warmup Iteration  23: 1236578.678 ops/s
# Warmup Iteration  24: 1235705.689 ops/s
# Warmup Iteration  25: 1238154.981 ops/s
# Warmup Iteration  26: 1236912.774 ops/s
# Warmup Iteration  27: 1235372.963 ops/s
# Warmup Iteration  28: 1236007.618 ops/s
# Warmup Iteration  29: 1235991.372 ops/s
# Warmup Iteration  30: 1238893.402 ops/s
Iteration   1: 1237489.588 ops/s
Iteration   2: 1238306.683 ops/s
Iteration   3: 1238670.138 ops/s
Iteration   4: 1240685.553 ops/s
Iteration   5: 1233478.410 ops/s
Iteration   6: 1235984.126 ops/s
Iteration   7: 1234728.277 ops/s
Iteration   8: 1234567.615 ops/s
Iteration   9: 1233585.726 ops/s
Iteration  10: 1234014.002 ops/s
Iteration  11: 1236974.958 ops/s
Iteration  12: 1230402.543 ops/s
Iteration  13: 1232791.754 ops/s
Iteration  14: 1241245.662 ops/s
Iteration  15: 1236768.235 ops/s
Iteration  16: 1232831.472 ops/s
Iteration  17: 1232487.385 ops/s
Iteration  18: 1237258.528 ops/s
Iteration  19: 1239786.826 ops/s
Iteration  20: 1237254.847 ops/s
Iteration  21: 1235713.679 ops/s
Iteration  22: 1232169.452 ops/s
Iteration  23: 1234878.939 ops/s
Iteration  24: 1237432.486 ops/s
Iteration  25: 1237476.943 ops/s
Iteration  26: 1236313.120 ops/s
Iteration  27: 1238372.616 ops/s
Iteration  28: 1234818.761 ops/s
Iteration  29: 1240717.602 ops/s
Iteration  30: 1236893.009 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedList_with_comparator":
  1236136.631 ±(99.9%) 1826.941 ops/s [Average]
  (min, avg, max) = (1230402.543, 1236136.631, 1241245.662), stdev = 2734.480
  CI (99.9%): [1234309.690, 1237963.573] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toSortedList_with_comparator  thrpt   30  1236136.631 ± 1826.941  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedList_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedList_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 384887.695 ops/s
# Warmup Iteration   2: 411629.491 ops/s
# Warmup Iteration   3: 550922.012 ops/s
# Warmup Iteration   4: 551533.541 ops/s
# Warmup Iteration   5: 547860.304 ops/s
# Warmup Iteration   6: 550577.505 ops/s
# Warmup Iteration   7: 549071.476 ops/s
# Warmup Iteration   8: 551406.787 ops/s
# Warmup Iteration   9: 549097.113 ops/s
# Warmup Iteration  10: 548959.275 ops/s
# Warmup Iteration  11: 525439.667 ops/s
# Warmup Iteration  12: 490168.259 ops/s
# Warmup Iteration  13: 550600.498 ops/s
# Warmup Iteration  14: 551649.745 ops/s
# Warmup Iteration  15: 550932.915 ops/s
# Warmup Iteration  16: 552326.259 ops/s
# Warmup Iteration  17: 568877.143 ops/s
# Warmup Iteration  18: 569161.712 ops/s
# Warmup Iteration  19: 569803.570 ops/s
# Warmup Iteration  20: 569829.021 ops/s
# Warmup Iteration  21: 568741.413 ops/s
# Warmup Iteration  22: 569420.123 ops/s
# Warmup Iteration  23: 572698.641 ops/s
# Warmup Iteration  24: 566265.610 ops/s
# Warmup Iteration  25: 568239.011 ops/s
# Warmup Iteration  26: 561892.715 ops/s
# Warmup Iteration  27: 559681.053 ops/s
# Warmup Iteration  28: 567933.965 ops/s
# Warmup Iteration  29: 570633.206 ops/s
# Warmup Iteration  30: 569330.068 ops/s
Iteration   1: 569581.702 ops/s
Iteration   2: 569497.544 ops/s
Iteration   3: 573537.299 ops/s
Iteration   4: 569605.524 ops/s
Iteration   5: 572131.163 ops/s
Iteration   6: 569465.347 ops/s
Iteration   7: 568410.851 ops/s
Iteration   8: 567754.762 ops/s
Iteration   9: 567454.669 ops/s
Iteration  10: 569994.738 ops/s
Iteration  11: 571098.773 ops/s
Iteration  12: 571728.988 ops/s
Iteration  13: 568645.800 ops/s
Iteration  14: 571423.315 ops/s
Iteration  15: 568723.432 ops/s
Iteration  16: 571648.433 ops/s
Iteration  17: 569540.447 ops/s
Iteration  18: 572297.273 ops/s
Iteration  19: 572568.357 ops/s
Iteration  20: 570627.394 ops/s
Iteration  21: 568463.786 ops/s
Iteration  22: 568564.702 ops/s
Iteration  23: 567942.872 ops/s
Iteration  24: 567801.016 ops/s
Iteration  25: 566738.845 ops/s
Iteration  26: 570561.645 ops/s
Iteration  27: 571789.429 ops/s
Iteration  28: 572101.352 ops/s
Iteration  29: 569620.776 ops/s
Iteration  30: 567753.602 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedList_with_null":
  569902.461 ±(99.9%) 1201.649 ops/s [Average]
  (min, avg, max) = (566738.845, 569902.461, 573537.299), stdev = 1798.571
  CI (99.9%): [568700.813, 571104.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toSortedList_with_null  thrpt   30  569902.461 ± 1201.649  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 250794.599 ops/s
# Warmup Iteration   2: 478334.618 ops/s
# Warmup Iteration   3: 535289.443 ops/s
# Warmup Iteration   4: 535863.051 ops/s
# Warmup Iteration   5: 520210.297 ops/s
# Warmup Iteration   6: 468096.887 ops/s
# Warmup Iteration   7: 536270.689 ops/s
# Warmup Iteration   8: 537503.505 ops/s
# Warmup Iteration   9: 538646.794 ops/s
# Warmup Iteration  10: 539778.332 ops/s
# Warmup Iteration  11: 537899.189 ops/s
# Warmup Iteration  12: 538841.833 ops/s
# Warmup Iteration  13: 535387.174 ops/s
# Warmup Iteration  14: 538674.738 ops/s
# Warmup Iteration  15: 539731.802 ops/s
# Warmup Iteration  16: 533276.762 ops/s
# Warmup Iteration  17: 537758.467 ops/s
# Warmup Iteration  18: 539118.017 ops/s
# Warmup Iteration  19: 532941.458 ops/s
# Warmup Iteration  20: 537475.171 ops/s
# Warmup Iteration  21: 538390.064 ops/s
# Warmup Iteration  22: 537982.463 ops/s
# Warmup Iteration  23: 536283.186 ops/s
# Warmup Iteration  24: 537582.021 ops/s
# Warmup Iteration  25: 539878.550 ops/s
# Warmup Iteration  26: 535155.310 ops/s
# Warmup Iteration  27: 538160.752 ops/s
# Warmup Iteration  28: 539089.721 ops/s
# Warmup Iteration  29: 538229.730 ops/s
# Warmup Iteration  30: 537883.410 ops/s
Iteration   1: 537406.405 ops/s
Iteration   2: 537409.656 ops/s
Iteration   3: 539478.560 ops/s
Iteration   4: 538474.086 ops/s
Iteration   5: 538078.902 ops/s
Iteration   6: 538032.129 ops/s
Iteration   7: 536881.392 ops/s
Iteration   8: 540254.597 ops/s
Iteration   9: 537830.084 ops/s
Iteration  10: 538232.228 ops/s
Iteration  11: 538064.992 ops/s
Iteration  12: 529225.918 ops/s
Iteration  13: 536172.945 ops/s
Iteration  14: 538574.652 ops/s
Iteration  15: 535395.226 ops/s
Iteration  16: 538544.362 ops/s
Iteration  17: 535249.266 ops/s
Iteration  18: 538771.006 ops/s
Iteration  19: 538091.496 ops/s
Iteration  20: 536089.382 ops/s
Iteration  21: 539957.211 ops/s
Iteration  22: 536886.414 ops/s
Iteration  23: 540064.700 ops/s
Iteration  24: 537970.817 ops/s
Iteration  25: 536914.669 ops/s
Iteration  26: 539853.100 ops/s
Iteration  27: 536334.517 ops/s
Iteration  28: 537306.244 ops/s
Iteration  29: 538135.605 ops/s
Iteration  30: 538684.915 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedMap":
  537612.183 ±(99.9%) 1371.871 ops/s [Average]
  (min, avg, max) = (529225.918, 537612.183, 540254.597), stdev = 2053.353
  CI (99.9%): [536240.311, 538984.054] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toSortedMap  thrpt   30  537612.183 ± 1371.871  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedMapBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedMapBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 200262.602 ops/s
# Warmup Iteration   2: 332658.989 ops/s
# Warmup Iteration   3: 401625.897 ops/s
# Warmup Iteration   4: 399647.237 ops/s
# Warmup Iteration   5: 401104.504 ops/s
# Warmup Iteration   6: 401282.920 ops/s
# Warmup Iteration   7: 335283.622 ops/s
# Warmup Iteration   8: 401896.510 ops/s
# Warmup Iteration   9: 402758.829 ops/s
# Warmup Iteration  10: 402622.433 ops/s
# Warmup Iteration  11: 401063.581 ops/s
# Warmup Iteration  12: 402387.176 ops/s
# Warmup Iteration  13: 402968.712 ops/s
# Warmup Iteration  14: 402935.034 ops/s
# Warmup Iteration  15: 401537.720 ops/s
# Warmup Iteration  16: 399252.845 ops/s
# Warmup Iteration  17: 401447.439 ops/s
# Warmup Iteration  18: 402063.833 ops/s
# Warmup Iteration  19: 401819.465 ops/s
# Warmup Iteration  20: 398549.707 ops/s
# Warmup Iteration  21: 400631.718 ops/s
# Warmup Iteration  22: 401504.757 ops/s
# Warmup Iteration  23: 400830.640 ops/s
# Warmup Iteration  24: 401452.998 ops/s
# Warmup Iteration  25: 402018.334 ops/s
# Warmup Iteration  26: 400758.444 ops/s
# Warmup Iteration  27: 401879.866 ops/s
# Warmup Iteration  28: 402836.088 ops/s
# Warmup Iteration  29: 401696.852 ops/s
# Warmup Iteration  30: 402003.959 ops/s
Iteration   1: 402374.466 ops/s
Iteration   2: 401665.844 ops/s
Iteration   3: 401463.723 ops/s
Iteration   4: 401603.516 ops/s
Iteration   5: 399792.056 ops/s
Iteration   6: 401190.510 ops/s
Iteration   7: 398804.403 ops/s
Iteration   8: 400585.664 ops/s
Iteration   9: 400519.757 ops/s
Iteration  10: 402406.277 ops/s
Iteration  11: 401672.805 ops/s
Iteration  12: 402287.151 ops/s
Iteration  13: 402218.376 ops/s
Iteration  14: 402206.060 ops/s
Iteration  15: 401610.007 ops/s
Iteration  16: 403630.283 ops/s
Iteration  17: 402048.895 ops/s
Iteration  18: 402130.675 ops/s
Iteration  19: 403032.523 ops/s
Iteration  20: 402766.835 ops/s
Iteration  21: 402729.151 ops/s
Iteration  22: 401533.808 ops/s
Iteration  23: 402673.477 ops/s
Iteration  24: 401124.025 ops/s
Iteration  25: 402621.148 ops/s
Iteration  26: 402768.001 ops/s
Iteration  27: 402762.850 ops/s
Iteration  28: 400492.288 ops/s
Iteration  29: 402232.036 ops/s
Iteration  30: 402528.700 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedMapBy":
  401849.177 ±(99.9%) 690.880 ops/s [Average]
  (min, avg, max) = (398804.403, 401849.177, 403630.283), stdev = 1034.077
  CI (99.9%): [401158.297, 402540.057] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toSortedMapBy  thrpt   30  401849.177 ± 690.880  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedMap_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedMap_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 245505.482 ops/s
# Warmup Iteration   2: 459226.438 ops/s
# Warmup Iteration   3: 520565.697 ops/s
# Warmup Iteration   4: 523029.027 ops/s
# Warmup Iteration   5: 517604.138 ops/s
# Warmup Iteration   6: 439513.797 ops/s
# Warmup Iteration   7: 522232.580 ops/s
# Warmup Iteration   8: 523504.425 ops/s
# Warmup Iteration   9: 522713.902 ops/s
# Warmup Iteration  10: 522989.722 ops/s
# Warmup Iteration  11: 523798.629 ops/s
# Warmup Iteration  12: 520639.160 ops/s
# Warmup Iteration  13: 521291.719 ops/s
# Warmup Iteration  14: 523579.338 ops/s
# Warmup Iteration  15: 521628.981 ops/s
# Warmup Iteration  16: 523135.877 ops/s
# Warmup Iteration  17: 521850.415 ops/s
# Warmup Iteration  18: 523239.829 ops/s
# Warmup Iteration  19: 520079.726 ops/s
# Warmup Iteration  20: 520474.713 ops/s
# Warmup Iteration  21: 523338.833 ops/s
# Warmup Iteration  22: 519383.910 ops/s
# Warmup Iteration  23: 523901.272 ops/s
# Warmup Iteration  24: 522517.601 ops/s
# Warmup Iteration  25: 522298.139 ops/s
# Warmup Iteration  26: 521429.793 ops/s
# Warmup Iteration  27: 522022.455 ops/s
# Warmup Iteration  28: 523434.914 ops/s
# Warmup Iteration  29: 521919.162 ops/s
# Warmup Iteration  30: 522405.930 ops/s
Iteration   1: 524025.373 ops/s
Iteration   2: 522696.337 ops/s
Iteration   3: 523208.173 ops/s
Iteration   4: 522927.523 ops/s
Iteration   5: 525364.842 ops/s
Iteration   6: 523800.571 ops/s
Iteration   7: 524332.166 ops/s
Iteration   8: 520791.036 ops/s
Iteration   9: 519042.742 ops/s
Iteration  10: 524032.451 ops/s
Iteration  11: 521573.888 ops/s
Iteration  12: 521016.654 ops/s
Iteration  13: 520313.473 ops/s
Iteration  14: 524109.517 ops/s
Iteration  15: 523542.248 ops/s
Iteration  16: 522778.685 ops/s
Iteration  17: 518478.681 ops/s
Iteration  18: 519412.646 ops/s
Iteration  19: 519141.936 ops/s
Iteration  20: 522310.861 ops/s
Iteration  21: 522109.395 ops/s
Iteration  22: 522926.032 ops/s
Iteration  23: 518141.942 ops/s
Iteration  24: 522385.598 ops/s
Iteration  25: 522660.969 ops/s
Iteration  26: 520971.370 ops/s
Iteration  27: 522899.313 ops/s
Iteration  28: 522812.047 ops/s
Iteration  29: 524172.280 ops/s
Iteration  30: 521210.520 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedMap_with_comparator":
  522106.309 ±(99.9%) 1264.641 ops/s [Average]
  (min, avg, max) = (518141.942, 522106.309, 525364.842), stdev = 1892.855
  CI (99.9%): [520841.668, 523370.950] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toSortedMap_with_comparator  thrpt   30  522106.309 ± 1264.641  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 78695.035 ops/s
# Warmup Iteration   2: 150923.529 ops/s
# Warmup Iteration   3: 178641.357 ops/s
# Warmup Iteration   4: 179218.604 ops/s
# Warmup Iteration   5: 178535.028 ops/s
# Warmup Iteration   6: 147558.494 ops/s
# Warmup Iteration   7: 178723.484 ops/s
# Warmup Iteration   8: 179319.640 ops/s
# Warmup Iteration   9: 178396.069 ops/s
# Warmup Iteration  10: 179842.176 ops/s
# Warmup Iteration  11: 179760.431 ops/s
# Warmup Iteration  12: 179411.823 ops/s
# Warmup Iteration  13: 179639.708 ops/s
# Warmup Iteration  14: 179670.103 ops/s
# Warmup Iteration  15: 179587.750 ops/s
# Warmup Iteration  16: 179366.263 ops/s
# Warmup Iteration  17: 179269.004 ops/s
# Warmup Iteration  18: 179697.761 ops/s
# Warmup Iteration  19: 179499.323 ops/s
# Warmup Iteration  20: 179435.806 ops/s
# Warmup Iteration  21: 179587.094 ops/s
# Warmup Iteration  22: 179278.295 ops/s
# Warmup Iteration  23: 179586.417 ops/s
# Warmup Iteration  24: 179526.217 ops/s
# Warmup Iteration  25: 179578.703 ops/s
# Warmup Iteration  26: 179601.051 ops/s
# Warmup Iteration  27: 179694.817 ops/s
# Warmup Iteration  28: 179523.494 ops/s
# Warmup Iteration  29: 179165.789 ops/s
# Warmup Iteration  30: 179476.447 ops/s
Iteration   1: 179417.015 ops/s
Iteration   2: 179316.608 ops/s
Iteration   3: 179429.436 ops/s
Iteration   4: 179858.835 ops/s
Iteration   5: 179575.555 ops/s
Iteration   6: 179583.135 ops/s
Iteration   7: 179257.012 ops/s
Iteration   8: 179855.800 ops/s
Iteration   9: 179163.130 ops/s
Iteration  10: 179453.692 ops/s
Iteration  11: 179249.153 ops/s
Iteration  12: 178985.662 ops/s
Iteration  13: 179858.012 ops/s
Iteration  14: 179076.521 ops/s
Iteration  15: 178351.265 ops/s
Iteration  16: 179666.175 ops/s
Iteration  17: 179268.567 ops/s
Iteration  18: 179323.095 ops/s
Iteration  19: 179087.588 ops/s
Iteration  20: 179140.234 ops/s
Iteration  21: 179962.845 ops/s
Iteration  22: 178993.898 ops/s
Iteration  23: 179732.905 ops/s
Iteration  24: 179391.632 ops/s
Iteration  25: 179815.039 ops/s
Iteration  26: 179770.857 ops/s
Iteration  27: 178784.936 ops/s
Iteration  28: 179002.954 ops/s
Iteration  29: 179644.818 ops/s
Iteration  30: 179816.383 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedSetBy":
  179394.425 ±(99.9%) 251.480 ops/s [Average]
  (min, avg, max) = (178351.265, 179394.425, 179962.845), stdev = 376.404
  CI (99.9%): [179142.945, 179645.906] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  179394.425 ± 251.480  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 346917.332 ops/s
# Warmup Iteration   2: 735152.393 ops/s
# Warmup Iteration   3: 776603.198 ops/s
# Warmup Iteration   4: 776437.192 ops/s
# Warmup Iteration   5: 655678.699 ops/s
# Warmup Iteration   6: 778445.450 ops/s
# Warmup Iteration   7: 778928.631 ops/s
# Warmup Iteration   8: 776195.390 ops/s
# Warmup Iteration   9: 778391.397 ops/s
# Warmup Iteration  10: 779318.452 ops/s
# Warmup Iteration  11: 779589.348 ops/s
# Warmup Iteration  12: 776905.623 ops/s
# Warmup Iteration  13: 779895.757 ops/s
# Warmup Iteration  14: 779797.854 ops/s
# Warmup Iteration  15: 778306.438 ops/s
# Warmup Iteration  16: 769585.130 ops/s
# Warmup Iteration  17: 778663.451 ops/s
# Warmup Iteration  18: 777940.266 ops/s
# Warmup Iteration  19: 777505.918 ops/s
# Warmup Iteration  20: 778599.713 ops/s
# Warmup Iteration  21: 779079.212 ops/s
# Warmup Iteration  22: 778773.076 ops/s
# Warmup Iteration  23: 779298.600 ops/s
# Warmup Iteration  24: 777214.747 ops/s
# Warmup Iteration  25: 779574.073 ops/s
# Warmup Iteration  26: 778966.263 ops/s
# Warmup Iteration  27: 778415.273 ops/s
# Warmup Iteration  28: 778489.069 ops/s
# Warmup Iteration  29: 776280.899 ops/s
# Warmup Iteration  30: 779391.756 ops/s
Iteration   1: 777969.124 ops/s
Iteration   2: 778120.988 ops/s
Iteration   3: 778514.095 ops/s
Iteration   4: 780163.279 ops/s
Iteration   5: 780620.585 ops/s
Iteration   6: 780052.735 ops/s
Iteration   7: 779094.446 ops/s
Iteration   8: 777184.770 ops/s
Iteration   9: 777588.891 ops/s
Iteration  10: 774753.485 ops/s
Iteration  11: 775305.862 ops/s
Iteration  12: 780435.852 ops/s
Iteration  13: 780623.796 ops/s
Iteration  14: 778242.626 ops/s
Iteration  15: 777404.208 ops/s
Iteration  16: 781037.825 ops/s
Iteration  17: 778955.573 ops/s
Iteration  18: 781727.038 ops/s
Iteration  19: 779127.251 ops/s
Iteration  20: 778482.295 ops/s
Iteration  21: 778855.923 ops/s
Iteration  22: 777660.281 ops/s
Iteration  23: 782607.256 ops/s
Iteration  24: 779749.858 ops/s
Iteration  25: 777531.424 ops/s
Iteration  26: 773971.868 ops/s
Iteration  27: 774524.256 ops/s
Iteration  28: 777120.914 ops/s
Iteration  29: 777880.081 ops/s
Iteration  30: 776820.742 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedSet_natural_ordering":
  778404.244 ±(99.9%) 1390.287 ops/s [Average]
  (min, avg, max) = (773971.868, 778404.244, 782607.256), stdev = 2080.916
  CI (99.9%): [777013.958, 779794.531] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toSortedSet_natural_ordering  thrpt   30  778404.244 ± 1390.287  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 315939.627 ops/s
# Warmup Iteration   2: 649865.335 ops/s
# Warmup Iteration   3: 688136.025 ops/s
# Warmup Iteration   4: 690847.455 ops/s
# Warmup Iteration   5: 580724.571 ops/s
# Warmup Iteration   6: 690321.994 ops/s
# Warmup Iteration   7: 689467.947 ops/s
# Warmup Iteration   8: 689246.185 ops/s
# Warmup Iteration   9: 688391.305 ops/s
# Warmup Iteration  10: 689145.762 ops/s
# Warmup Iteration  11: 689148.973 ops/s
# Warmup Iteration  12: 691394.422 ops/s
# Warmup Iteration  13: 690432.832 ops/s
# Warmup Iteration  14: 691577.944 ops/s
# Warmup Iteration  15: 689306.902 ops/s
# Warmup Iteration  16: 689559.456 ops/s
# Warmup Iteration  17: 692590.221 ops/s
# Warmup Iteration  18: 691327.715 ops/s
# Warmup Iteration  19: 691260.007 ops/s
# Warmup Iteration  20: 686500.620 ops/s
# Warmup Iteration  21: 688599.677 ops/s
# Warmup Iteration  22: 689930.642 ops/s
# Warmup Iteration  23: 689738.167 ops/s
# Warmup Iteration  24: 690674.112 ops/s
# Warmup Iteration  25: 690372.397 ops/s
# Warmup Iteration  26: 693297.331 ops/s
# Warmup Iteration  27: 691113.803 ops/s
# Warmup Iteration  28: 693157.367 ops/s
# Warmup Iteration  29: 685811.533 ops/s
# Warmup Iteration  30: 688599.323 ops/s
Iteration   1: 694748.380 ops/s
Iteration   2: 688981.956 ops/s
Iteration   3: 694205.273 ops/s
Iteration   4: 687911.647 ops/s
Iteration   5: 692393.996 ops/s
Iteration   6: 691621.428 ops/s
Iteration   7: 690991.838 ops/s
Iteration   8: 696894.330 ops/s
Iteration   9: 688105.373 ops/s
Iteration  10: 693574.905 ops/s
Iteration  11: 687801.307 ops/s
Iteration  12: 694293.709 ops/s
Iteration  13: 693708.014 ops/s
Iteration  14: 691210.976 ops/s
Iteration  15: 691280.900 ops/s
Iteration  16: 689110.403 ops/s
Iteration  17: 689503.644 ops/s
Iteration  18: 694942.975 ops/s
Iteration  19: 689435.920 ops/s
Iteration  20: 689059.977 ops/s
Iteration  21: 689090.755 ops/s
Iteration  22: 696797.177 ops/s
Iteration  23: 689650.374 ops/s
Iteration  24: 686060.886 ops/s
Iteration  25: 691514.982 ops/s
Iteration  26: 689987.986 ops/s
Iteration  27: 688018.655 ops/s
Iteration  28: 692973.968 ops/s
Iteration  29: 690821.010 ops/s
Iteration  30: 693339.913 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toSortedSet_with_comparator":
  691267.755 ±(99.9%) 1869.314 ops/s [Average]
  (min, avg, max) = (686060.886, 691267.755, 696894.330), stdev = 2797.902
  CI (99.9%): [689398.441, 693137.070] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toSortedSet_with_comparator  thrpt   30  691267.755 ± 1869.314  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1605948.274 ops/s
# Warmup Iteration   2: 3165629.422 ops/s
# Warmup Iteration   3: 3356466.531 ops/s
# Warmup Iteration   4: 3376385.878 ops/s
# Warmup Iteration   5: 2808602.365 ops/s
# Warmup Iteration   6: 3373473.942 ops/s
# Warmup Iteration   7: 3365463.782 ops/s
# Warmup Iteration   8: 3363226.163 ops/s
# Warmup Iteration   9: 3380703.285 ops/s
# Warmup Iteration  10: 3371327.262 ops/s
# Warmup Iteration  11: 3352570.445 ops/s
# Warmup Iteration  12: 3373503.336 ops/s
# Warmup Iteration  13: 3379360.334 ops/s
# Warmup Iteration  14: 3372079.439 ops/s
# Warmup Iteration  15: 3361193.168 ops/s
# Warmup Iteration  16: 3366026.052 ops/s
# Warmup Iteration  17: 3345942.551 ops/s
# Warmup Iteration  18: 3369506.418 ops/s
# Warmup Iteration  19: 3376822.413 ops/s
# Warmup Iteration  20: 3371820.736 ops/s
# Warmup Iteration  21: 3372892.774 ops/s
# Warmup Iteration  22: 3367697.575 ops/s
# Warmup Iteration  23: 3373728.998 ops/s
# Warmup Iteration  24: 3375867.432 ops/s
# Warmup Iteration  25: 3375682.914 ops/s
# Warmup Iteration  26: 3378667.649 ops/s
# Warmup Iteration  27: 3362721.569 ops/s
# Warmup Iteration  28: 3371463.202 ops/s
# Warmup Iteration  29: 3376887.691 ops/s
# Warmup Iteration  30: 3366653.359 ops/s
Iteration   1: 3374016.960 ops/s
Iteration   2: 3362757.152 ops/s
Iteration   3: 3379459.684 ops/s
Iteration   4: 3379211.526 ops/s
Iteration   5: 3370897.411 ops/s
Iteration   6: 3361412.298 ops/s
Iteration   7: 3358885.636 ops/s
Iteration   8: 3365537.437 ops/s
Iteration   9: 3367938.199 ops/s
Iteration  10: 3379348.191 ops/s
Iteration  11: 3373102.330 ops/s
Iteration  12: 3372180.771 ops/s
Iteration  13: 3376629.577 ops/s
Iteration  14: 3377796.762 ops/s
Iteration  15: 3345353.036 ops/s
Iteration  16: 3402936.165 ops/s
Iteration  17: 3381408.250 ops/s
Iteration  18: 3370986.480 ops/s
Iteration  19: 3391169.499 ops/s
Iteration  20: 3394341.706 ops/s
Iteration  21: 3412771.728 ops/s
Iteration  22: 3406059.473 ops/s
Iteration  23: 3400402.101 ops/s
Iteration  24: 3390564.953 ops/s
Iteration  25: 3402232.653 ops/s
Iteration  26: 3398960.166 ops/s
Iteration  27: 3396154.962 ops/s
Iteration  28: 3399915.029 ops/s
Iteration  29: 3389538.801 ops/s
Iteration  30: 3398398.484 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toStack":
  3382678.914 ±(99.9%) 10981.630 ops/s [Average]
  (min, avg, max) = (3345353.036, 3382678.914, 3412771.728), stdev = 16436.789
  CI (99.9%): [3371697.284, 3393660.544] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toStack  thrpt   30  3382678.914 ± 10981.630  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toStringOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toStringOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 256881.573 ops/s
# Warmup Iteration   2: 537278.664 ops/s
# Warmup Iteration   3: 565620.817 ops/s
# Warmup Iteration   4: 568255.294 ops/s
# Warmup Iteration   5: 477366.948 ops/s
# Warmup Iteration   6: 569142.869 ops/s
# Warmup Iteration   7: 570314.267 ops/s
# Warmup Iteration   8: 570675.238 ops/s
# Warmup Iteration   9: 570134.378 ops/s
# Warmup Iteration  10: 568827.548 ops/s
# Warmup Iteration  11: 570730.344 ops/s
# Warmup Iteration  12: 569915.080 ops/s
# Warmup Iteration  13: 570336.558 ops/s
# Warmup Iteration  14: 567048.252 ops/s
# Warmup Iteration  15: 569130.205 ops/s
# Warmup Iteration  16: 569817.144 ops/s
# Warmup Iteration  17: 570233.021 ops/s
# Warmup Iteration  18: 570938.568 ops/s
# Warmup Iteration  19: 571387.186 ops/s
# Warmup Iteration  20: 568438.427 ops/s
# Warmup Iteration  21: 572257.166 ops/s
# Warmup Iteration  22: 569984.976 ops/s
# Warmup Iteration  23: 571615.421 ops/s
# Warmup Iteration  24: 570007.755 ops/s
# Warmup Iteration  25: 570738.633 ops/s
# Warmup Iteration  26: 570439.262 ops/s
# Warmup Iteration  27: 570032.373 ops/s
# Warmup Iteration  28: 570334.862 ops/s
# Warmup Iteration  29: 569216.363 ops/s
# Warmup Iteration  30: 571052.527 ops/s
Iteration   1: 569774.896 ops/s
Iteration   2: 570940.009 ops/s
Iteration   3: 570059.760 ops/s
Iteration   4: 570607.451 ops/s
Iteration   5: 570751.133 ops/s
Iteration   6: 571209.906 ops/s
Iteration   7: 571852.607 ops/s
Iteration   8: 570302.844 ops/s
Iteration   9: 569574.156 ops/s
Iteration  10: 566842.184 ops/s
Iteration  11: 571566.390 ops/s
Iteration  12: 572122.243 ops/s
Iteration  13: 570661.019 ops/s
Iteration  14: 570264.160 ops/s
Iteration  15: 568853.101 ops/s
Iteration  16: 571742.657 ops/s
Iteration  17: 569706.187 ops/s
Iteration  18: 569528.904 ops/s
Iteration  19: 571397.658 ops/s
Iteration  20: 569933.012 ops/s
Iteration  21: 570731.146 ops/s
Iteration  22: 569467.118 ops/s
Iteration  23: 571671.916 ops/s
Iteration  24: 572163.647 ops/s
Iteration  25: 569752.868 ops/s
Iteration  26: 571016.468 ops/s
Iteration  27: 571564.871 ops/s
Iteration  28: 570106.955 ops/s
Iteration  29: 569911.634 ops/s
Iteration  30: 571490.507 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toStringOfItemToCount":
  570518.913 ±(99.9%) 755.635 ops/s [Average]
  (min, avg, max) = (566842.184, 570518.913, 572163.647), stdev = 1130.999
  CI (99.9%): [569763.278, 571274.549] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toStringOfItemToCount  thrpt   30  570518.913 ± 755.635  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toString_with_collection_containing_self$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toString_with_collection_containing_self

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2577302.401 ops/s
# Warmup Iteration   2: 3116296.079 ops/s
# Warmup Iteration   3: 4065091.184 ops/s
# Warmup Iteration   4: 4039430.299 ops/s
# Warmup Iteration   5: 4069192.981 ops/s
# Warmup Iteration   6: 4062929.879 ops/s
# Warmup Iteration   7: 4063188.361 ops/s
# Warmup Iteration   8: 4058922.819 ops/s
# Warmup Iteration   9: 3362034.027 ops/s
# Warmup Iteration  10: 4064430.293 ops/s
# Warmup Iteration  11: 4054840.786 ops/s
# Warmup Iteration  12: 4065006.222 ops/s
# Warmup Iteration  13: 4069562.632 ops/s
# Warmup Iteration  14: 4052489.917 ops/s
# Warmup Iteration  15: 4074114.294 ops/s
# Warmup Iteration  16: 4056302.146 ops/s
# Warmup Iteration  17: 4018780.003 ops/s
# Warmup Iteration  18: 4031010.215 ops/s
# Warmup Iteration  19: 4042835.698 ops/s
# Warmup Iteration  20: 4038455.880 ops/s
# Warmup Iteration  21: 4047426.534 ops/s
# Warmup Iteration  22: 4046015.058 ops/s
# Warmup Iteration  23: 4043466.132 ops/s
# Warmup Iteration  24: 4034995.770 ops/s
# Warmup Iteration  25: 4040136.743 ops/s
# Warmup Iteration  26: 4016129.768 ops/s
# Warmup Iteration  27: 4047138.815 ops/s
# Warmup Iteration  28: 4046763.068 ops/s
# Warmup Iteration  29: 4049407.302 ops/s
# Warmup Iteration  30: 4046487.178 ops/s
Iteration   1: 4037156.100 ops/s
Iteration   2: 4047477.476 ops/s
Iteration   3: 4052034.139 ops/s
Iteration   4: 4033644.896 ops/s
Iteration   5: 4046522.775 ops/s
Iteration   6: 4037692.024 ops/s
Iteration   7: 4032433.065 ops/s
Iteration   8: 4050187.230 ops/s
Iteration   9: 4042506.353 ops/s
Iteration  10: 4035918.551 ops/s
Iteration  11: 4046782.124 ops/s
Iteration  12: 4041488.400 ops/s
Iteration  13: 4038245.608 ops/s
Iteration  14: 4033624.800 ops/s
Iteration  15: 4054796.220 ops/s
Iteration  16: 4041339.611 ops/s
Iteration  17: 4046798.665 ops/s
Iteration  18: 4042536.803 ops/s
Iteration  19: 4023087.610 ops/s
Iteration  20: 4025815.163 ops/s
Iteration  21: 4045469.645 ops/s
Iteration  22: 4024371.854 ops/s
Iteration  23: 4044405.695 ops/s
Iteration  24: 4047662.424 ops/s
Iteration  25: 4042262.798 ops/s
Iteration  26: 4042686.999 ops/s
Iteration  27: 4034466.301 ops/s
Iteration  28: 4033012.877 ops/s
Iteration  29: 4031323.241 ops/s
Iteration  30: 4023869.291 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_toString_with_collection_containing_self":
  4039320.625 ±(99.9%) 5684.462 ops/s [Average]
  (min, avg, max) = (4023087.610, 4039320.625, 4054796.220), stdev = 8508.235
  CI (99.9%): [4033636.163, 4045005.086] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_toString_with_collection_containing_self  thrpt   30  4039320.625 ± 5684.462  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_topOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_topOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 78943.851 ops/s
# Warmup Iteration   2: 123769.135 ops/s
# Warmup Iteration   3: 149263.747 ops/s
# Warmup Iteration   4: 148638.291 ops/s
# Warmup Iteration   5: 149405.285 ops/s
# Warmup Iteration   6: 149328.952 ops/s
# Warmup Iteration   7: 124854.269 ops/s
# Warmup Iteration   8: 149399.464 ops/s
# Warmup Iteration   9: 149612.051 ops/s
# Warmup Iteration  10: 149602.859 ops/s
# Warmup Iteration  11: 149316.285 ops/s
# Warmup Iteration  12: 149703.185 ops/s
# Warmup Iteration  13: 149835.644 ops/s
# Warmup Iteration  14: 149730.668 ops/s
# Warmup Iteration  15: 149526.908 ops/s
# Warmup Iteration  16: 149413.292 ops/s
# Warmup Iteration  17: 150773.121 ops/s
# Warmup Iteration  18: 150727.020 ops/s
# Warmup Iteration  19: 150904.492 ops/s
# Warmup Iteration  20: 150261.931 ops/s
# Warmup Iteration  21: 150533.021 ops/s
# Warmup Iteration  22: 150869.329 ops/s
# Warmup Iteration  23: 150633.893 ops/s
# Warmup Iteration  24: 150947.007 ops/s
# Warmup Iteration  25: 150409.966 ops/s
# Warmup Iteration  26: 150841.150 ops/s
# Warmup Iteration  27: 150974.980 ops/s
# Warmup Iteration  28: 150632.117 ops/s
# Warmup Iteration  29: 150666.162 ops/s
# Warmup Iteration  30: 151018.114 ops/s
Iteration   1: 150804.586 ops/s
Iteration   2: 150644.512 ops/s
Iteration   3: 150716.006 ops/s
Iteration   4: 150295.094 ops/s
Iteration   5: 150314.670 ops/s
Iteration   6: 150361.471 ops/s
Iteration   7: 149903.996 ops/s
Iteration   8: 151019.015 ops/s
Iteration   9: 150185.957 ops/s
Iteration  10: 150720.317 ops/s
Iteration  11: 150459.123 ops/s
Iteration  12: 150970.623 ops/s
Iteration  13: 150394.879 ops/s
Iteration  14: 150886.783 ops/s
Iteration  15: 150816.506 ops/s
Iteration  16: 150886.307 ops/s
Iteration  17: 150881.618 ops/s
Iteration  18: 150421.291 ops/s
Iteration  19: 150883.822 ops/s
Iteration  20: 150983.898 ops/s
Iteration  21: 150657.567 ops/s
Iteration  22: 150506.904 ops/s
Iteration  23: 151039.734 ops/s
Iteration  24: 150705.539 ops/s
Iteration  25: 151168.010 ops/s
Iteration  26: 150891.027 ops/s
Iteration  27: 151208.710 ops/s
Iteration  28: 151010.460 ops/s
Iteration  29: 150894.558 ops/s
Iteration  30: 150414.654 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_topOccurrences":
  150701.588 ±(99.9%) 209.754 ops/s [Average]
  (min, avg, max) = (149903.996, 150701.588, 151208.710), stdev = 313.949
  CI (99.9%): [150491.834, 150911.342] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_topOccurrences  thrpt   30  150701.588 ± 209.754  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 811846.716 ops/s
# Warmup Iteration   2: 1362488.783 ops/s
# Warmup Iteration   3: 1710757.545 ops/s
# Warmup Iteration   4: 1723134.010 ops/s
# Warmup Iteration   5: 1724341.694 ops/s
# Warmup Iteration   6: 1442270.043 ops/s
# Warmup Iteration   7: 1729861.791 ops/s
# Warmup Iteration   8: 1727775.512 ops/s
# Warmup Iteration   9: 1723681.886 ops/s
# Warmup Iteration  10: 1726372.622 ops/s
# Warmup Iteration  11: 1727574.172 ops/s
# Warmup Iteration  12: 1727307.742 ops/s
# Warmup Iteration  13: 1730248.254 ops/s
# Warmup Iteration  14: 1725681.962 ops/s
# Warmup Iteration  15: 1727511.405 ops/s
# Warmup Iteration  16: 1726050.074 ops/s
# Warmup Iteration  17: 1715291.482 ops/s
# Warmup Iteration  18: 1714996.436 ops/s
# Warmup Iteration  19: 1710405.185 ops/s
# Warmup Iteration  20: 1715119.085 ops/s
# Warmup Iteration  21: 1713279.550 ops/s
# Warmup Iteration  22: 1711086.118 ops/s
# Warmup Iteration  23: 1715271.659 ops/s
# Warmup Iteration  24: 1711361.774 ops/s
# Warmup Iteration  25: 1717056.893 ops/s
# Warmup Iteration  26: 1714941.529 ops/s
# Warmup Iteration  27: 1714260.637 ops/s
# Warmup Iteration  28: 1714743.296 ops/s
# Warmup Iteration  29: 1711783.282 ops/s
# Warmup Iteration  30: 1707753.927 ops/s
Iteration   1: 1714223.593 ops/s
Iteration   2: 1696674.737 ops/s
Iteration   3: 1712738.375 ops/s
Iteration   4: 1710814.516 ops/s
Iteration   5: 1719718.775 ops/s
Iteration   6: 1708920.618 ops/s
Iteration   7: 1709511.104 ops/s
Iteration   8: 1716934.466 ops/s
Iteration   9: 1713150.843 ops/s
Iteration  10: 1705070.174 ops/s
Iteration  11: 1695614.851 ops/s
Iteration  12: 1718250.158 ops/s
Iteration  13: 1713457.731 ops/s
Iteration  14: 1719934.024 ops/s
Iteration  15: 1710984.428 ops/s
Iteration  16: 1711560.668 ops/s
Iteration  17: 1717909.457 ops/s
Iteration  18: 1711546.118 ops/s
Iteration  19: 1713075.374 ops/s
Iteration  20: 1707236.108 ops/s
Iteration  21: 1716483.645 ops/s
Iteration  22: 1707607.400 ops/s
Iteration  23: 1706066.876 ops/s
Iteration  24: 1710371.537 ops/s
Iteration  25: 1712060.331 ops/s
Iteration  26: 1714638.490 ops/s
Iteration  27: 1712095.282 ops/s
Iteration  28: 1713004.531 ops/s
Iteration  29: 1713965.567 ops/s
Iteration  30: 1712900.130 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_with":
  1711550.664 ±(99.9%) 3737.187 ops/s [Average]
  (min, avg, max) = (1695614.851, 1711550.664, 1719934.024), stdev = 5593.646
  CI (99.9%): [1707813.476, 1715287.851] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_with  thrpt   30  1711550.664 ± 3737.187  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 680103.221 ops/s
# Warmup Iteration   2: 1107600.263 ops/s
# Warmup Iteration   3: 1406035.586 ops/s
# Warmup Iteration   4: 1420470.815 ops/s
# Warmup Iteration   5: 1417939.995 ops/s
# Warmup Iteration   6: 1195195.712 ops/s
# Warmup Iteration   7: 1416101.636 ops/s
# Warmup Iteration   8: 1420030.118 ops/s
# Warmup Iteration   9: 1421511.586 ops/s
# Warmup Iteration  10: 1420020.596 ops/s
# Warmup Iteration  11: 1423191.614 ops/s
# Warmup Iteration  12: 1421797.210 ops/s
# Warmup Iteration  13: 1422303.786 ops/s
# Warmup Iteration  14: 1424575.833 ops/s
# Warmup Iteration  15: 1423266.273 ops/s
# Warmup Iteration  16: 1421563.042 ops/s
# Warmup Iteration  17: 1424285.037 ops/s
# Warmup Iteration  18: 1423805.732 ops/s
# Warmup Iteration  19: 1415695.726 ops/s
# Warmup Iteration  20: 1422770.224 ops/s
# Warmup Iteration  21: 1423174.276 ops/s
# Warmup Iteration  22: 1424857.340 ops/s
# Warmup Iteration  23: 1423052.182 ops/s
# Warmup Iteration  24: 1424755.868 ops/s
# Warmup Iteration  25: 1422016.801 ops/s
# Warmup Iteration  26: 1423041.161 ops/s
# Warmup Iteration  27: 1424295.208 ops/s
# Warmup Iteration  28: 1424116.190 ops/s
# Warmup Iteration  29: 1423472.052 ops/s
# Warmup Iteration  30: 1423440.719 ops/s
Iteration   1: 1423441.449 ops/s
Iteration   2: 1423226.732 ops/s
Iteration   3: 1418178.297 ops/s
Iteration   4: 1426072.854 ops/s
Iteration   5: 1423145.203 ops/s
Iteration   6: 1426898.379 ops/s
Iteration   7: 1421812.829 ops/s
Iteration   8: 1425453.727 ops/s
Iteration   9: 1420100.300 ops/s
Iteration  10: 1416072.794 ops/s
Iteration  11: 1422870.192 ops/s
Iteration  12: 1419673.149 ops/s
Iteration  13: 1423146.236 ops/s
Iteration  14: 1423062.325 ops/s
Iteration  15: 1429679.465 ops/s
Iteration  16: 1424610.017 ops/s
Iteration  17: 1429456.951 ops/s
Iteration  18: 1427104.962 ops/s
Iteration  19: 1431164.495 ops/s
Iteration  20: 1424296.136 ops/s
Iteration  21: 1426210.734 ops/s
Iteration  22: 1429015.621 ops/s
Iteration  23: 1429124.682 ops/s
Iteration  24: 1427301.153 ops/s
Iteration  25: 1426049.451 ops/s
Iteration  26: 1428577.457 ops/s
Iteration  27: 1412753.626 ops/s
Iteration  28: 1429951.439 ops/s
Iteration  29: 1427346.702 ops/s
Iteration  30: 1425667.391 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_withAll":
  1424715.492 ±(99.9%) 2859.237 ops/s [Average]
  (min, avg, max) = (1412753.626, 1424715.492, 1431164.495), stdev = 4279.572
  CI (99.9%): [1421856.254, 1427574.729] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_withAll  thrpt   30  1424715.492 ± 2859.237  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1001086.814 ops/s
# Warmup Iteration   2: 1701312.126 ops/s
# Warmup Iteration   3: 2058296.172 ops/s
# Warmup Iteration   4: 2074753.851 ops/s
# Warmup Iteration   5: 2074399.767 ops/s
# Warmup Iteration   6: 1743049.211 ops/s
# Warmup Iteration   7: 2082997.333 ops/s
# Warmup Iteration   8: 2081548.872 ops/s
# Warmup Iteration   9: 2082816.103 ops/s
# Warmup Iteration  10: 2081295.934 ops/s
# Warmup Iteration  11: 2078368.338 ops/s
# Warmup Iteration  12: 2079913.460 ops/s
# Warmup Iteration  13: 2075741.329 ops/s
# Warmup Iteration  14: 2078267.219 ops/s
# Warmup Iteration  15: 2077806.097 ops/s
# Warmup Iteration  16: 2075093.607 ops/s
# Warmup Iteration  17: 2058961.845 ops/s
# Warmup Iteration  18: 2061365.388 ops/s
# Warmup Iteration  19: 2060867.087 ops/s
# Warmup Iteration  20: 2061066.750 ops/s
# Warmup Iteration  21: 2054595.114 ops/s
# Warmup Iteration  22: 2058688.130 ops/s
# Warmup Iteration  23: 2062240.997 ops/s
# Warmup Iteration  24: 2060635.698 ops/s
# Warmup Iteration  25: 2061484.201 ops/s
# Warmup Iteration  26: 2056022.780 ops/s
# Warmup Iteration  27: 2059636.344 ops/s
# Warmup Iteration  28: 2058377.801 ops/s
# Warmup Iteration  29: 2058937.108 ops/s
# Warmup Iteration  30: 2057961.645 ops/s
Iteration   1: 2055701.787 ops/s
Iteration   2: 2058477.144 ops/s
Iteration   3: 2065127.660 ops/s
Iteration   4: 2059371.052 ops/s
Iteration   5: 2066681.363 ops/s
Iteration   6: 2055542.096 ops/s
Iteration   7: 2063554.695 ops/s
Iteration   8: 2059463.390 ops/s
Iteration   9: 2058336.599 ops/s
Iteration  10: 2063173.762 ops/s
Iteration  11: 2061903.991 ops/s
Iteration  12: 2065539.939 ops/s
Iteration  13: 2048527.848 ops/s
Iteration  14: 2055733.685 ops/s
Iteration  15: 2055020.874 ops/s
Iteration  16: 2065841.345 ops/s
Iteration  17: 2063259.538 ops/s
Iteration  18: 2061366.355 ops/s
Iteration  19: 2068227.913 ops/s
Iteration  20: 2063033.302 ops/s
Iteration  21: 2065436.909 ops/s
Iteration  22: 2059361.477 ops/s
Iteration  23: 2063522.470 ops/s
Iteration  24: 2061028.452 ops/s
Iteration  25: 2061196.030 ops/s
Iteration  26: 2065566.065 ops/s
Iteration  27: 2069887.690 ops/s
Iteration  28: 2054043.506 ops/s
Iteration  29: 2060198.438 ops/s
Iteration  30: 2065058.623 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_without":
  2061306.133 ±(99.9%) 3172.127 ops/s [Average]
  (min, avg, max) = (2048527.848, 2061306.133, 2069887.690), stdev = 4747.891
  CI (99.9%): [2058134.006, 2064478.260] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_without  thrpt   30  2061306.133 ± 3172.127  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 772573.336 ops/s
# Warmup Iteration   2: 1389465.066 ops/s
# Warmup Iteration   3: 1666117.891 ops/s
# Warmup Iteration   4: 1674039.956 ops/s
# Warmup Iteration   5: 1654167.613 ops/s
# Warmup Iteration   6: 1422791.640 ops/s
# Warmup Iteration   7: 1677606.006 ops/s
# Warmup Iteration   8: 1676921.195 ops/s
# Warmup Iteration   9: 1679056.740 ops/s
# Warmup Iteration  10: 1670392.307 ops/s
# Warmup Iteration  11: 1676612.507 ops/s
# Warmup Iteration  12: 1673610.397 ops/s
# Warmup Iteration  13: 1675862.133 ops/s
# Warmup Iteration  14: 1676378.067 ops/s
# Warmup Iteration  15: 1677390.905 ops/s
# Warmup Iteration  16: 1664156.201 ops/s
# Warmup Iteration  17: 1678629.102 ops/s
# Warmup Iteration  18: 1672417.654 ops/s
# Warmup Iteration  19: 1673726.313 ops/s
# Warmup Iteration  20: 1678927.356 ops/s
# Warmup Iteration  21: 1676777.416 ops/s
# Warmup Iteration  22: 1679660.529 ops/s
# Warmup Iteration  23: 1675213.711 ops/s
# Warmup Iteration  24: 1676330.160 ops/s
# Warmup Iteration  25: 1673251.304 ops/s
# Warmup Iteration  26: 1672785.935 ops/s
# Warmup Iteration  27: 1674569.764 ops/s
# Warmup Iteration  28: 1678748.459 ops/s
# Warmup Iteration  29: 1675909.136 ops/s
# Warmup Iteration  30: 1674462.592 ops/s
Iteration   1: 1681402.320 ops/s
Iteration   2: 1673923.727 ops/s
Iteration   3: 1679910.487 ops/s
Iteration   4: 1668951.532 ops/s
Iteration   5: 1664710.225 ops/s
Iteration   6: 1672844.325 ops/s
Iteration   7: 1667757.857 ops/s
Iteration   8: 1673640.992 ops/s
Iteration   9: 1680004.437 ops/s
Iteration  10: 1673793.073 ops/s
Iteration  11: 1680242.028 ops/s
Iteration  12: 1677871.963 ops/s
Iteration  13: 1675598.596 ops/s
Iteration  14: 1668886.598 ops/s
Iteration  15: 1671088.730 ops/s
Iteration  16: 1675770.518 ops/s
Iteration  17: 1669528.091 ops/s
Iteration  18: 1663944.241 ops/s
Iteration  19: 1670648.084 ops/s
Iteration  20: 1671480.526 ops/s
Iteration  21: 1671076.007 ops/s
Iteration  22: 1663364.648 ops/s
Iteration  23: 1669335.078 ops/s
Iteration  24: 1677323.104 ops/s
Iteration  25: 1670864.637 ops/s
Iteration  26: 1675024.709 ops/s
Iteration  27: 1671547.443 ops/s
Iteration  28: 1667963.576 ops/s
Iteration  29: 1674889.752 ops/s
Iteration  30: 1653349.122 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_withoutAll":
  1671891.214 ±(99.9%) 3948.036 ops/s [Average]
  (min, avg, max) = (1653349.122, 1671891.214, 1681402.320), stdev = 5909.236
  CI (99.9%): [1667943.178, 1675839.251] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_withoutAll  thrpt   30  1671891.214 ± 3948.036  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 68809.535 ops/s
# Warmup Iteration   2: 101331.878 ops/s
# Warmup Iteration   3: 135418.388 ops/s
# Warmup Iteration   4: 134807.309 ops/s
# Warmup Iteration   5: 135465.390 ops/s
# Warmup Iteration   6: 135312.185 ops/s
# Warmup Iteration   7: 135369.259 ops/s
# Warmup Iteration   8: 127594.753 ops/s
# Warmup Iteration   9: 121535.543 ops/s
# Warmup Iteration  10: 135693.618 ops/s
# Warmup Iteration  11: 135537.990 ops/s
# Warmup Iteration  12: 135389.933 ops/s
# Warmup Iteration  13: 135511.914 ops/s
# Warmup Iteration  14: 135312.480 ops/s
# Warmup Iteration  15: 135825.469 ops/s
# Warmup Iteration  16: 135496.109 ops/s
# Warmup Iteration  17: 135748.985 ops/s
# Warmup Iteration  18: 135787.101 ops/s
# Warmup Iteration  19: 135940.708 ops/s
# Warmup Iteration  20: 135802.544 ops/s
# Warmup Iteration  21: 135637.364 ops/s
# Warmup Iteration  22: 135692.235 ops/s
# Warmup Iteration  23: 135874.651 ops/s
# Warmup Iteration  24: 136007.523 ops/s
# Warmup Iteration  25: 135972.421 ops/s
# Warmup Iteration  26: 136378.092 ops/s
# Warmup Iteration  27: 135964.717 ops/s
# Warmup Iteration  28: 135876.840 ops/s
# Warmup Iteration  29: 136133.901 ops/s
# Warmup Iteration  30: 136029.892 ops/s
Iteration   1: 135752.095 ops/s
Iteration   2: 135955.049 ops/s
Iteration   3: 135744.645 ops/s
Iteration   4: 135556.187 ops/s
Iteration   5: 135628.988 ops/s
Iteration   6: 135680.043 ops/s
Iteration   7: 135957.307 ops/s
Iteration   8: 135914.720 ops/s
Iteration   9: 135342.638 ops/s
Iteration  10: 135887.681 ops/s
Iteration  11: 135656.570 ops/s
Iteration  12: 136395.240 ops/s
Iteration  13: 136230.244 ops/s
Iteration  14: 135589.943 ops/s
Iteration  15: 135864.983 ops/s
Iteration  16: 136046.202 ops/s
Iteration  17: 135670.644 ops/s
Iteration  18: 135838.368 ops/s
Iteration  19: 135910.377 ops/s
Iteration  20: 135445.904 ops/s
Iteration  21: 136043.792 ops/s
Iteration  22: 135680.855 ops/s
Iteration  23: 135800.093 ops/s
Iteration  24: 135992.334 ops/s
Iteration  25: 135583.039 ops/s
Iteration  26: 136131.792 ops/s
Iteration  27: 135916.182 ops/s
Iteration  28: 135650.320 ops/s
Iteration  29: 135785.538 ops/s
Iteration  30: 134630.084 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_zip":
  135776.062 ±(99.9%) 210.084 ops/s [Average]
  (min, avg, max) = (134630.084, 135776.062, 136395.240), stdev = 314.444
  CI (99.9%): [135565.978, 135986.146] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_zip  thrpt   30  135776.062 ± 210.084  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 132144.531 ops/s
# Warmup Iteration   2: 227628.358 ops/s
# Warmup Iteration   3: 290859.262 ops/s
# Warmup Iteration   4: 287280.826 ops/s
# Warmup Iteration   5: 289351.656 ops/s
# Warmup Iteration   6: 290140.509 ops/s
# Warmup Iteration   7: 243507.034 ops/s
# Warmup Iteration   8: 289774.052 ops/s
# Warmup Iteration   9: 291051.411 ops/s
# Warmup Iteration  10: 291371.706 ops/s
# Warmup Iteration  11: 291542.217 ops/s
# Warmup Iteration  12: 291063.371 ops/s
# Warmup Iteration  13: 290739.473 ops/s
# Warmup Iteration  14: 290280.268 ops/s
# Warmup Iteration  15: 289908.730 ops/s
# Warmup Iteration  16: 291443.985 ops/s
# Warmup Iteration  17: 291338.898 ops/s
# Warmup Iteration  18: 291284.438 ops/s
# Warmup Iteration  19: 289399.916 ops/s
# Warmup Iteration  20: 291131.524 ops/s
# Warmup Iteration  21: 291342.104 ops/s
# Warmup Iteration  22: 290399.755 ops/s
# Warmup Iteration  23: 290878.729 ops/s
# Warmup Iteration  24: 291492.683 ops/s
# Warmup Iteration  25: 290734.188 ops/s
# Warmup Iteration  26: 290417.705 ops/s
# Warmup Iteration  27: 291221.462 ops/s
# Warmup Iteration  28: 291036.944 ops/s
# Warmup Iteration  29: 288550.340 ops/s
# Warmup Iteration  30: 290835.742 ops/s
Iteration   1: 290167.239 ops/s
Iteration   2: 291752.010 ops/s
Iteration   3: 290493.547 ops/s
Iteration   4: 289065.442 ops/s
Iteration   5: 290472.016 ops/s
Iteration   6: 291883.191 ops/s
Iteration   7: 291635.829 ops/s
Iteration   8: 291708.353 ops/s
Iteration   9: 290918.580 ops/s
Iteration  10: 291905.024 ops/s
Iteration  11: 290780.688 ops/s
Iteration  12: 291063.681 ops/s
Iteration  13: 291008.723 ops/s
Iteration  14: 291246.395 ops/s
Iteration  15: 291552.063 ops/s
Iteration  16: 291419.204 ops/s
Iteration  17: 292001.738 ops/s
Iteration  18: 290322.207 ops/s
Iteration  19: 290936.544 ops/s
Iteration  20: 289832.219 ops/s
Iteration  21: 291863.647 ops/s
Iteration  22: 290637.653 ops/s
Iteration  23: 292053.050 ops/s
Iteration  24: 290141.649 ops/s
Iteration  25: 291393.747 ops/s
Iteration  26: 290348.020 ops/s
Iteration  27: 291813.239 ops/s
Iteration  28: 290930.965 ops/s
Iteration  29: 292108.912 ops/s
Iteration  30: 291779.962 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.SynchronizedSortedBagTest._Benchmark.benchmark_zipWithIndex":
  291107.851 ±(99.9%) 510.493 ops/s [Average]
  (min, avg, max) = (289065.442, 291107.851, 292108.912), stdev = 764.081
  CI (99.9%): [290597.359, 291618.344] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
SynchronizedSortedBagTest._Benchmark.benchmark_zipWithIndex  thrpt   30  291107.851 ± 510.493  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 207155.402 ops/s
# Warmup Iteration   2: 407785.700 ops/s
# Warmup Iteration   3: 445201.797 ops/s
# Warmup Iteration   4: 447096.217 ops/s
# Warmup Iteration   5: 378096.247 ops/s
# Warmup Iteration   6: 448183.938 ops/s
# Warmup Iteration   7: 446948.357 ops/s
# Warmup Iteration   8: 445828.822 ops/s
# Warmup Iteration   9: 446000.685 ops/s
# Warmup Iteration  10: 447942.841 ops/s
# Warmup Iteration  11: 446785.188 ops/s
# Warmup Iteration  12: 447555.198 ops/s
# Warmup Iteration  13: 447126.368 ops/s
# Warmup Iteration  14: 447327.823 ops/s
# Warmup Iteration  15: 446069.570 ops/s
# Warmup Iteration  16: 447761.217 ops/s
# Warmup Iteration  17: 446572.761 ops/s
# Warmup Iteration  18: 447269.782 ops/s
# Warmup Iteration  19: 445434.644 ops/s
# Warmup Iteration  20: 447142.645 ops/s
# Warmup Iteration  21: 447788.826 ops/s
# Warmup Iteration  22: 446844.001 ops/s
# Warmup Iteration  23: 447694.181 ops/s
# Warmup Iteration  24: 446475.979 ops/s
# Warmup Iteration  25: 446548.702 ops/s
# Warmup Iteration  26: 447528.252 ops/s
# Warmup Iteration  27: 447475.169 ops/s
# Warmup Iteration  28: 447396.553 ops/s
# Warmup Iteration  29: 447621.222 ops/s
# Warmup Iteration  30: 447497.249 ops/s
Iteration   1: 447387.020 ops/s
Iteration   2: 447202.329 ops/s
Iteration   3: 448150.942 ops/s
Iteration   4: 446601.864 ops/s
Iteration   5: 447191.516 ops/s
Iteration   6: 447409.368 ops/s
Iteration   7: 447118.097 ops/s
Iteration   8: 447928.826 ops/s
Iteration   9: 446843.778 ops/s
Iteration  10: 446765.314 ops/s
Iteration  11: 446857.648 ops/s
Iteration  12: 447050.005 ops/s
Iteration  13: 447557.867 ops/s
Iteration  14: 449072.548 ops/s
Iteration  15: 446875.428 ops/s
Iteration  16: 444653.225 ops/s
Iteration  17: 447351.557 ops/s
Iteration  18: 447895.421 ops/s
Iteration  19: 447033.330 ops/s
Iteration  20: 448506.241 ops/s
Iteration  21: 447059.159 ops/s
Iteration  22: 447529.153 ops/s
Iteration  23: 449185.784 ops/s
Iteration  24: 447900.066 ops/s
Iteration  25: 446196.253 ops/s
Iteration  26: 448581.276 ops/s
Iteration  27: 445815.424 ops/s
Iteration  28: 447443.351 ops/s
Iteration  29: 446396.413 ops/s
Iteration  30: 445739.452 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_add":
  447243.288 ±(99.9%) 644.388 ops/s [Average]
  (min, avg, max) = (444653.225, 447243.288, 449185.784), stdev = 964.490
  CI (99.9%): [446598.900, 447887.677] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_add  thrpt   30  447243.288 ± 644.388  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 343046.603 ops/s
# Warmup Iteration   2: 615251.257 ops/s
# Warmup Iteration   3: 720249.404 ops/s
# Warmup Iteration   4: 725174.463 ops/s
# Warmup Iteration   5: 723566.350 ops/s
# Warmup Iteration   6: 627298.120 ops/s
# Warmup Iteration   7: 711213.487 ops/s
# Warmup Iteration   8: 726691.493 ops/s
# Warmup Iteration   9: 725564.505 ops/s
# Warmup Iteration  10: 727401.308 ops/s
# Warmup Iteration  11: 721968.402 ops/s
# Warmup Iteration  12: 725657.680 ops/s
# Warmup Iteration  13: 723458.853 ops/s
# Warmup Iteration  14: 725503.890 ops/s
# Warmup Iteration  15: 726759.631 ops/s
# Warmup Iteration  16: 728425.141 ops/s
# Warmup Iteration  17: 724188.801 ops/s
# Warmup Iteration  18: 725928.216 ops/s
# Warmup Iteration  19: 726251.837 ops/s
# Warmup Iteration  20: 726073.362 ops/s
# Warmup Iteration  21: 724038.614 ops/s
# Warmup Iteration  22: 726747.011 ops/s
# Warmup Iteration  23: 727751.722 ops/s
# Warmup Iteration  24: 722828.082 ops/s
# Warmup Iteration  25: 726215.000 ops/s
# Warmup Iteration  26: 725796.586 ops/s
# Warmup Iteration  27: 724772.166 ops/s
# Warmup Iteration  28: 726776.490 ops/s
# Warmup Iteration  29: 722952.283 ops/s
# Warmup Iteration  30: 723380.184 ops/s
Iteration   1: 725580.821 ops/s
Iteration   2: 726340.292 ops/s
Iteration   3: 726490.744 ops/s
Iteration   4: 726966.886 ops/s
Iteration   5: 730167.413 ops/s
Iteration   6: 726451.875 ops/s
Iteration   7: 729539.631 ops/s
Iteration   8: 727050.869 ops/s
Iteration   9: 727714.729 ops/s
Iteration  10: 728192.541 ops/s
Iteration  11: 728703.356 ops/s
Iteration  12: 725336.875 ops/s
Iteration  13: 729010.817 ops/s
Iteration  14: 725587.382 ops/s
Iteration  15: 728069.975 ops/s
Iteration  16: 727643.520 ops/s
Iteration  17: 727704.354 ops/s
Iteration  18: 726267.110 ops/s
Iteration  19: 721699.807 ops/s
Iteration  20: 725480.553 ops/s
Iteration  21: 725677.948 ops/s
Iteration  22: 725788.226 ops/s
Iteration  23: 728344.440 ops/s
Iteration  24: 726404.690 ops/s
Iteration  25: 730408.259 ops/s
Iteration  26: 728563.793 ops/s
Iteration  27: 723413.043 ops/s
Iteration  28: 720990.543 ops/s
Iteration  29: 718746.665 ops/s
Iteration  30: 728278.704 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_addAll":
  726553.862 ±(99.9%) 1747.202 ops/s [Average]
  (min, avg, max) = (718746.665, 726553.862, 730408.259), stdev = 2615.131
  CI (99.9%): [724806.660, 728301.065] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_addAll  thrpt   30  726553.862 ± 1747.202  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 275422.041 ops/s
# Warmup Iteration   2: 548309.050 ops/s
# Warmup Iteration   3: 616747.185 ops/s
# Warmup Iteration   4: 619290.734 ops/s
# Warmup Iteration   5: 588735.948 ops/s
# Warmup Iteration   6: 553948.135 ops/s
# Warmup Iteration   7: 621333.660 ops/s
# Warmup Iteration   8: 620701.345 ops/s
# Warmup Iteration   9: 621806.939 ops/s
# Warmup Iteration  10: 622508.034 ops/s
# Warmup Iteration  11: 621642.853 ops/s
# Warmup Iteration  12: 621158.256 ops/s
# Warmup Iteration  13: 620072.806 ops/s
# Warmup Iteration  14: 622544.705 ops/s
# Warmup Iteration  15: 620492.160 ops/s
# Warmup Iteration  16: 623024.018 ops/s
# Warmup Iteration  17: 621028.446 ops/s
# Warmup Iteration  18: 621008.595 ops/s
# Warmup Iteration  19: 620365.425 ops/s
# Warmup Iteration  20: 621564.683 ops/s
# Warmup Iteration  21: 622967.125 ops/s
# Warmup Iteration  22: 621857.119 ops/s
# Warmup Iteration  23: 622039.056 ops/s
# Warmup Iteration  24: 621435.952 ops/s
# Warmup Iteration  25: 622012.341 ops/s
# Warmup Iteration  26: 622413.067 ops/s
# Warmup Iteration  27: 620569.825 ops/s
# Warmup Iteration  28: 622504.586 ops/s
# Warmup Iteration  29: 623348.949 ops/s
# Warmup Iteration  30: 620817.064 ops/s
Iteration   1: 622041.113 ops/s
Iteration   2: 623209.510 ops/s
Iteration   3: 621930.687 ops/s
Iteration   4: 621779.875 ops/s
Iteration   5: 623299.748 ops/s
Iteration   6: 622357.695 ops/s
Iteration   7: 622799.167 ops/s
Iteration   8: 622596.908 ops/s
Iteration   9: 621884.930 ops/s
Iteration  10: 622206.065 ops/s
Iteration  11: 621138.986 ops/s
Iteration  12: 622745.240 ops/s
Iteration  13: 619451.594 ops/s
Iteration  14: 619982.776 ops/s
Iteration  15: 622118.331 ops/s
Iteration  16: 621653.823 ops/s
Iteration  17: 621607.757 ops/s
Iteration  18: 622679.536 ops/s
Iteration  19: 620689.871 ops/s
Iteration  20: 622248.302 ops/s
Iteration  21: 621107.540 ops/s
Iteration  22: 621664.137 ops/s
Iteration  23: 622831.689 ops/s
Iteration  24: 621191.224 ops/s
Iteration  25: 621602.905 ops/s
Iteration  26: 621927.770 ops/s
Iteration  27: 621869.561 ops/s
Iteration  28: 622576.206 ops/s
Iteration  29: 620985.095 ops/s
Iteration  30: 618947.819 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_addAllIterable":
  621770.862 ±(99.9%) 683.052 ops/s [Average]
  (min, avg, max) = (618947.819, 621770.862, 623299.748), stdev = 1022.361
  CI (99.9%): [621087.809, 622453.914] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_addAllIterable  thrpt   30  621770.862 ± 683.052  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_addOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_addOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 98525.289 ops/s
# Warmup Iteration   2: 169648.893 ops/s
# Warmup Iteration   3: 209442.569 ops/s
# Warmup Iteration   4: 208790.838 ops/s
# Warmup Iteration   5: 209289.376 ops/s
# Warmup Iteration   6: 209785.150 ops/s
# Warmup Iteration   7: 175384.959 ops/s
# Warmup Iteration   8: 209574.713 ops/s
# Warmup Iteration   9: 209678.039 ops/s
# Warmup Iteration  10: 209417.152 ops/s
# Warmup Iteration  11: 209604.409 ops/s
# Warmup Iteration  12: 209836.321 ops/s
# Warmup Iteration  13: 209969.764 ops/s
# Warmup Iteration  14: 209794.070 ops/s
# Warmup Iteration  15: 209169.123 ops/s
# Warmup Iteration  16: 209609.105 ops/s
# Warmup Iteration  17: 209949.750 ops/s
# Warmup Iteration  18: 209234.698 ops/s
# Warmup Iteration  19: 209605.931 ops/s
# Warmup Iteration  20: 210410.333 ops/s
# Warmup Iteration  21: 209745.502 ops/s
# Warmup Iteration  22: 209510.828 ops/s
# Warmup Iteration  23: 209116.102 ops/s
# Warmup Iteration  24: 209524.750 ops/s
# Warmup Iteration  25: 210032.230 ops/s
# Warmup Iteration  26: 209438.163 ops/s
# Warmup Iteration  27: 209363.208 ops/s
# Warmup Iteration  28: 209905.734 ops/s
# Warmup Iteration  29: 209470.178 ops/s
# Warmup Iteration  30: 209862.221 ops/s
Iteration   1: 209335.585 ops/s
Iteration   2: 209623.939 ops/s
Iteration   3: 210073.893 ops/s
Iteration   4: 210004.274 ops/s
Iteration   5: 209645.084 ops/s
Iteration   6: 209915.383 ops/s
Iteration   7: 209461.983 ops/s
Iteration   8: 209684.406 ops/s
Iteration   9: 209920.238 ops/s
Iteration  10: 210287.556 ops/s
Iteration  11: 209859.970 ops/s
Iteration  12: 209690.365 ops/s
Iteration  13: 210271.673 ops/s
Iteration  14: 210201.307 ops/s
Iteration  15: 210552.531 ops/s
Iteration  16: 209895.665 ops/s
Iteration  17: 210030.616 ops/s
Iteration  18: 209582.968 ops/s
Iteration  19: 209557.770 ops/s
Iteration  20: 209654.494 ops/s
Iteration  21: 210541.566 ops/s
Iteration  22: 208836.501 ops/s
Iteration  23: 210483.697 ops/s
Iteration  24: 209935.712 ops/s
Iteration  25: 209809.659 ops/s
Iteration  26: 210006.330 ops/s
Iteration  27: 209765.410 ops/s
Iteration  28: 208976.846 ops/s
Iteration  29: 209336.815 ops/s
Iteration  30: 210221.042 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_addOccurrences":
  209838.776 ±(99.9%) 276.516 ops/s [Average]
  (min, avg, max) = (208836.501, 209838.776, 210552.531), stdev = 413.876
  CI (99.9%): [209562.260, 210115.292] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_addOccurrences  thrpt   30  209838.776 ± 276.516  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_addOccurrences_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_addOccurrences_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 712920.845 ops/s
# Warmup Iteration   2: 753947.141 ops/s
# Warmup Iteration   3: 936719.397 ops/s
# Warmup Iteration   4: 969418.889 ops/s
# Warmup Iteration   5: 970737.861 ops/s
# Warmup Iteration   6: 964932.363 ops/s
# Warmup Iteration   7: 968183.207 ops/s
# Warmup Iteration   8: 971472.469 ops/s
# Warmup Iteration   9: 968805.759 ops/s
# Warmup Iteration  10: 970905.990 ops/s
# Warmup Iteration  11: 963830.629 ops/s
# Warmup Iteration  12: 963335.366 ops/s
# Warmup Iteration  13: 814110.583 ops/s
# Warmup Iteration  14: 967193.487 ops/s
# Warmup Iteration  15: 968873.894 ops/s
# Warmup Iteration  16: 969463.756 ops/s
# Warmup Iteration  17: 1029455.296 ops/s
# Warmup Iteration  18: 1025956.375 ops/s
# Warmup Iteration  19: 1026703.848 ops/s
# Warmup Iteration  20: 1029392.864 ops/s
# Warmup Iteration  21: 1027266.552 ops/s
# Warmup Iteration  22: 1022448.180 ops/s
# Warmup Iteration  23: 1028571.958 ops/s
# Warmup Iteration  24: 1029997.349 ops/s
# Warmup Iteration  25: 1031391.251 ops/s
# Warmup Iteration  26: 1029255.364 ops/s
# Warmup Iteration  27: 1027864.215 ops/s
# Warmup Iteration  28: 1023028.466 ops/s
# Warmup Iteration  29: 1025352.867 ops/s
# Warmup Iteration  30: 1024824.012 ops/s
Iteration   1: 1025048.137 ops/s
Iteration   2: 1029284.587 ops/s
Iteration   3: 1026847.194 ops/s
Iteration   4: 1026916.214 ops/s
Iteration   5: 1033398.062 ops/s
Iteration   6: 1026057.769 ops/s
Iteration   7: 1030077.900 ops/s
Iteration   8: 1026227.227 ops/s
Iteration   9: 1030733.138 ops/s
Iteration  10: 1030278.484 ops/s
Iteration  11: 1029878.755 ops/s
Iteration  12: 1028132.381 ops/s
Iteration  13: 1031234.499 ops/s
Iteration  14: 1030702.612 ops/s
Iteration  15: 1025085.288 ops/s
Iteration  16: 1028393.203 ops/s
Iteration  17: 1032757.587 ops/s
Iteration  18: 1030712.624 ops/s
Iteration  19: 1028516.950 ops/s
Iteration  20: 1031356.391 ops/s
Iteration  21: 1029945.747 ops/s
Iteration  22: 1030764.697 ops/s
Iteration  23: 1031402.579 ops/s
Iteration  24: 1031612.951 ops/s
Iteration  25: 1022667.007 ops/s
Iteration  26: 1028541.022 ops/s
Iteration  27: 1029559.699 ops/s
Iteration  28: 1029635.142 ops/s
Iteration  29: 1027731.628 ops/s
Iteration  30: 1024550.876 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_addOccurrences_throws":
  1028935.012 ±(99.9%) 1723.710 ops/s [Average]
  (min, avg, max) = (1022667.007, 1028935.012, 1033398.062), stdev = 2579.969
  CI (99.9%): [1027211.301, 1030658.722] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_addOccurrences_throws  thrpt   30  1028935.012 ± 1723.710  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 495060.057 ops/s
# Warmup Iteration   2: 937776.131 ops/s
# Warmup Iteration   3: 1019874.180 ops/s
# Warmup Iteration   4: 1024895.054 ops/s
# Warmup Iteration   5: 863694.330 ops/s
# Warmup Iteration   6: 1005154.363 ops/s
# Warmup Iteration   7: 1032602.665 ops/s
# Warmup Iteration   8: 1029276.439 ops/s
# Warmup Iteration   9: 1022118.040 ops/s
# Warmup Iteration  10: 1011670.284 ops/s
# Warmup Iteration  11: 1021575.318 ops/s
# Warmup Iteration  12: 1006810.719 ops/s
# Warmup Iteration  13: 1022888.201 ops/s
# Warmup Iteration  14: 1028648.685 ops/s
# Warmup Iteration  15: 1004560.342 ops/s
# Warmup Iteration  16: 1026468.252 ops/s
# Warmup Iteration  17: 1018947.628 ops/s
# Warmup Iteration  18: 1030086.206 ops/s
# Warmup Iteration  19: 1015552.884 ops/s
# Warmup Iteration  20: 993329.633 ops/s
# Warmup Iteration  21: 1031338.439 ops/s
# Warmup Iteration  22: 1027790.099 ops/s
# Warmup Iteration  23: 1030384.722 ops/s
# Warmup Iteration  24: 1027640.887 ops/s
# Warmup Iteration  25: 1029542.853 ops/s
# Warmup Iteration  26: 1017626.249 ops/s
# Warmup Iteration  27: 1012572.165 ops/s
# Warmup Iteration  28: 1026843.916 ops/s
# Warmup Iteration  29: 1021972.196 ops/s
# Warmup Iteration  30: 1025705.125 ops/s
Iteration   1: 1035484.938 ops/s
Iteration   2: 1022313.477 ops/s
Iteration   3: 1029620.601 ops/s
Iteration   4: 1034963.807 ops/s
Iteration   5: 1026991.292 ops/s
Iteration   6: 1024481.809 ops/s
Iteration   7: 1033167.112 ops/s
Iteration   8: 1026405.144 ops/s
Iteration   9: 1023447.596 ops/s
Iteration  10: 1026201.513 ops/s
Iteration  11: 1015835.371 ops/s
Iteration  12: 1022794.525 ops/s
Iteration  13: 1016480.096 ops/s
Iteration  14: 1007756.236 ops/s
Iteration  15: 1025148.885 ops/s
Iteration  16: 1029984.333 ops/s
Iteration  17: 1027777.221 ops/s
Iteration  18: 1022442.605 ops/s
Iteration  19: 1012726.200 ops/s
Iteration  20: 1028409.056 ops/s
Iteration  21: 1022764.560 ops/s
Iteration  22: 1026974.892 ops/s
Iteration  23: 1030317.672 ops/s
Iteration  24: 1030622.432 ops/s
Iteration  25: 1026820.565 ops/s
Iteration  26: 1026962.834 ops/s
Iteration  27: 1027812.208 ops/s
Iteration  28: 1030275.883 ops/s
Iteration  29: 1022678.916 ops/s
Iteration  30: 1027580.119 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_aggregateByMutating":
  1025508.063 ±(99.9%) 4097.388 ops/s [Average]
  (min, avg, max) = (1007756.236, 1025508.063, 1035484.938), stdev = 6132.777
  CI (99.9%): [1021410.676, 1029605.451] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  1025508.063 ± 4097.388  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 477160.478 ops/s
# Warmup Iteration   2: 824482.452 ops/s
# Warmup Iteration   3: 924350.114 ops/s
# Warmup Iteration   4: 929801.513 ops/s
# Warmup Iteration   5: 931414.434 ops/s
# Warmup Iteration   6: 781247.641 ops/s
# Warmup Iteration   7: 932905.039 ops/s
# Warmup Iteration   8: 927879.387 ops/s
# Warmup Iteration   9: 932741.128 ops/s
# Warmup Iteration  10: 929206.028 ops/s
# Warmup Iteration  11: 925822.171 ops/s
# Warmup Iteration  12: 928460.705 ops/s
# Warmup Iteration  13: 927864.629 ops/s
# Warmup Iteration  14: 920565.337 ops/s
# Warmup Iteration  15: 927161.882 ops/s
# Warmup Iteration  16: 928680.890 ops/s
# Warmup Iteration  17: 927329.557 ops/s
# Warmup Iteration  18: 925181.389 ops/s
# Warmup Iteration  19: 931121.586 ops/s
# Warmup Iteration  20: 928356.770 ops/s
# Warmup Iteration  21: 927725.739 ops/s
# Warmup Iteration  22: 921753.672 ops/s
# Warmup Iteration  23: 928161.308 ops/s
# Warmup Iteration  24: 927792.537 ops/s
# Warmup Iteration  25: 928404.281 ops/s
# Warmup Iteration  26: 928627.192 ops/s
# Warmup Iteration  27: 928755.133 ops/s
# Warmup Iteration  28: 927592.323 ops/s
# Warmup Iteration  29: 931620.671 ops/s
# Warmup Iteration  30: 927015.485 ops/s
Iteration   1: 931007.178 ops/s
Iteration   2: 929196.878 ops/s
Iteration   3: 932462.856 ops/s
Iteration   4: 931694.539 ops/s
Iteration   5: 928899.620 ops/s
Iteration   6: 929202.034 ops/s
Iteration   7: 930328.287 ops/s
Iteration   8: 931353.295 ops/s
Iteration   9: 931167.284 ops/s
Iteration  10: 931878.777 ops/s
Iteration  11: 928719.788 ops/s
Iteration  12: 929816.989 ops/s
Iteration  13: 932575.483 ops/s
Iteration  14: 926403.758 ops/s
Iteration  15: 928252.769 ops/s
Iteration  16: 930489.452 ops/s
Iteration  17: 934107.219 ops/s
Iteration  18: 930811.753 ops/s
Iteration  19: 932120.985 ops/s
Iteration  20: 929053.357 ops/s
Iteration  21: 919486.282 ops/s
Iteration  22: 929176.165 ops/s
Iteration  23: 930251.061 ops/s
Iteration  24: 933552.690 ops/s
Iteration  25: 929189.990 ops/s
Iteration  26: 926136.308 ops/s
Iteration  27: 924376.023 ops/s
Iteration  28: 927173.450 ops/s
Iteration  29: 924401.609 ops/s
Iteration  30: 925190.029 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_aggregateByNonMutating":
  929282.530 ±(99.9%) 2093.983 ops/s [Average]
  (min, avg, max) = (919486.282, 929282.530, 934107.219), stdev = 3134.176
  CI (99.9%): [927188.547, 931376.514] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  929282.530 ± 2093.983  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 538986.346 ops/s
# Warmup Iteration   2: 737723.472 ops/s
# Warmup Iteration   3: 925464.305 ops/s
# Warmup Iteration   4: 921208.736 ops/s
# Warmup Iteration   5: 927831.803 ops/s
# Warmup Iteration   6: 928389.513 ops/s
# Warmup Iteration   7: 926618.654 ops/s
# Warmup Iteration   8: 807857.795 ops/s
# Warmup Iteration   9: 896830.226 ops/s
# Warmup Iteration  10: 928379.376 ops/s
# Warmup Iteration  11: 929263.277 ops/s
# Warmup Iteration  12: 926978.803 ops/s
# Warmup Iteration  13: 928009.195 ops/s
# Warmup Iteration  14: 928344.935 ops/s
# Warmup Iteration  15: 928096.814 ops/s
# Warmup Iteration  16: 929125.007 ops/s
# Warmup Iteration  17: 927952.885 ops/s
# Warmup Iteration  18: 921658.554 ops/s
# Warmup Iteration  19: 925798.422 ops/s
# Warmup Iteration  20: 925754.869 ops/s
# Warmup Iteration  21: 926577.538 ops/s
# Warmup Iteration  22: 925878.854 ops/s
# Warmup Iteration  23: 927133.344 ops/s
# Warmup Iteration  24: 927410.172 ops/s
# Warmup Iteration  25: 926768.285 ops/s
# Warmup Iteration  26: 926157.916 ops/s
# Warmup Iteration  27: 927905.881 ops/s
# Warmup Iteration  28: 927096.012 ops/s
# Warmup Iteration  29: 924779.800 ops/s
# Warmup Iteration  30: 926768.097 ops/s
Iteration   1: 926349.309 ops/s
Iteration   2: 925964.206 ops/s
Iteration   3: 927914.281 ops/s
Iteration   4: 924348.298 ops/s
Iteration   5: 925041.516 ops/s
Iteration   6: 927323.601 ops/s
Iteration   7: 925954.785 ops/s
Iteration   8: 926367.451 ops/s
Iteration   9: 927361.405 ops/s
Iteration  10: 925240.095 ops/s
Iteration  11: 925745.171 ops/s
Iteration  12: 927751.283 ops/s
Iteration  13: 922952.342 ops/s
Iteration  14: 928202.461 ops/s
Iteration  15: 927663.218 ops/s
Iteration  16: 925905.283 ops/s
Iteration  17: 929076.470 ops/s
Iteration  18: 927627.512 ops/s
Iteration  19: 924291.641 ops/s
Iteration  20: 926589.838 ops/s
Iteration  21: 925131.904 ops/s
Iteration  22: 928451.103 ops/s
Iteration  23: 929473.801 ops/s
Iteration  24: 925775.710 ops/s
Iteration  25: 927096.357 ops/s
Iteration  26: 927502.865 ops/s
Iteration  27: 926956.375 ops/s
Iteration  28: 926706.385 ops/s
Iteration  29: 924932.331 ops/s
Iteration  30: 928728.966 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_allSatisfy":
  926614.199 ±(99.9%) 1024.602 ops/s [Average]
  (min, avg, max) = (922952.342, 926614.199, 929473.801), stdev = 1533.577
  CI (99.9%): [925589.596, 927638.801] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_allSatisfy  thrpt   30  926614.199 ± 1024.602  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 565275.529 ops/s
# Warmup Iteration   2: 748217.251 ops/s
# Warmup Iteration   3: 959423.813 ops/s
# Warmup Iteration   4: 953972.027 ops/s
# Warmup Iteration   5: 960644.984 ops/s
# Warmup Iteration   6: 957774.477 ops/s
# Warmup Iteration   7: 959500.904 ops/s
# Warmup Iteration   8: 925011.165 ops/s
# Warmup Iteration   9: 834133.843 ops/s
# Warmup Iteration  10: 958664.912 ops/s
# Warmup Iteration  11: 958607.876 ops/s
# Warmup Iteration  12: 960396.468 ops/s
# Warmup Iteration  13: 958731.928 ops/s
# Warmup Iteration  14: 958952.147 ops/s
# Warmup Iteration  15: 960901.936 ops/s
# Warmup Iteration  16: 957842.856 ops/s
# Warmup Iteration  17: 959813.170 ops/s
# Warmup Iteration  18: 960872.181 ops/s
# Warmup Iteration  19: 959170.993 ops/s
# Warmup Iteration  20: 960426.869 ops/s
# Warmup Iteration  21: 960918.251 ops/s
# Warmup Iteration  22: 960615.031 ops/s
# Warmup Iteration  23: 958930.534 ops/s
# Warmup Iteration  24: 956802.858 ops/s
# Warmup Iteration  25: 961750.650 ops/s
# Warmup Iteration  26: 959357.835 ops/s
# Warmup Iteration  27: 958707.713 ops/s
# Warmup Iteration  28: 960606.623 ops/s
# Warmup Iteration  29: 961880.253 ops/s
# Warmup Iteration  30: 958251.694 ops/s
Iteration   1: 961909.434 ops/s
Iteration   2: 958249.160 ops/s
Iteration   3: 960892.053 ops/s
Iteration   4: 961775.749 ops/s
Iteration   5: 958776.822 ops/s
Iteration   6: 961706.289 ops/s
Iteration   7: 959928.387 ops/s
Iteration   8: 958513.423 ops/s
Iteration   9: 960734.048 ops/s
Iteration  10: 960326.175 ops/s
Iteration  11: 960094.015 ops/s
Iteration  12: 958120.671 ops/s
Iteration  13: 956517.155 ops/s
Iteration  14: 960803.751 ops/s
Iteration  15: 961076.261 ops/s
Iteration  16: 949953.044 ops/s
Iteration  17: 958776.292 ops/s
Iteration  18: 957853.189 ops/s
Iteration  19: 958498.166 ops/s
Iteration  20: 959163.034 ops/s
Iteration  21: 954118.865 ops/s
Iteration  22: 958149.034 ops/s
Iteration  23: 960355.991 ops/s
Iteration  24: 959487.302 ops/s
Iteration  25: 961974.164 ops/s
Iteration  26: 961868.832 ops/s
Iteration  27: 959526.881 ops/s
Iteration  28: 960476.329 ops/s
Iteration  29: 960901.427 ops/s
Iteration  30: 957609.759 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_allSatisfyWith":
  959271.190 ±(99.9%) 1674.847 ops/s [Average]
  (min, avg, max) = (949953.044, 959271.190, 961974.164), stdev = 2506.832
  CI (99.9%): [957596.343, 960946.037] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  959271.190 ± 1674.847  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_allSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_allSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 552511.503 ops/s
# Warmup Iteration   2: 740340.432 ops/s
# Warmup Iteration   3: 929787.057 ops/s
# Warmup Iteration   4: 925343.602 ops/s
# Warmup Iteration   5: 929980.357 ops/s
# Warmup Iteration   6: 930453.376 ops/s
# Warmup Iteration   7: 930672.818 ops/s
# Warmup Iteration   8: 862092.260 ops/s
# Warmup Iteration   9: 847707.347 ops/s
# Warmup Iteration  10: 929992.669 ops/s
# Warmup Iteration  11: 929803.075 ops/s
# Warmup Iteration  12: 930819.064 ops/s
# Warmup Iteration  13: 931435.346 ops/s
# Warmup Iteration  14: 930070.066 ops/s
# Warmup Iteration  15: 932819.800 ops/s
# Warmup Iteration  16: 929723.201 ops/s
# Warmup Iteration  17: 929778.763 ops/s
# Warmup Iteration  18: 930078.404 ops/s
# Warmup Iteration  19: 928930.671 ops/s
# Warmup Iteration  20: 930834.317 ops/s
# Warmup Iteration  21: 930105.058 ops/s
# Warmup Iteration  22: 930447.229 ops/s
# Warmup Iteration  23: 930568.937 ops/s
# Warmup Iteration  24: 929272.348 ops/s
# Warmup Iteration  25: 931130.716 ops/s
# Warmup Iteration  26: 931236.489 ops/s
# Warmup Iteration  27: 925469.771 ops/s
# Warmup Iteration  28: 923417.394 ops/s
# Warmup Iteration  29: 922876.752 ops/s
# Warmup Iteration  30: 922174.935 ops/s
Iteration   1: 919873.705 ops/s
Iteration   2: 924964.472 ops/s
Iteration   3: 926424.514 ops/s
Iteration   4: 922569.792 ops/s
Iteration   5: 924254.296 ops/s
Iteration   6: 924103.542 ops/s
Iteration   7: 921166.929 ops/s
Iteration   8: 922885.395 ops/s
Iteration   9: 924982.956 ops/s
Iteration  10: 919882.628 ops/s
Iteration  11: 931989.683 ops/s
Iteration  12: 927261.132 ops/s
Iteration  13: 932268.526 ops/s
Iteration  14: 927158.175 ops/s
Iteration  15: 929044.683 ops/s
Iteration  16: 929627.661 ops/s
Iteration  17: 931318.545 ops/s
Iteration  18: 927037.771 ops/s
Iteration  19: 922869.662 ops/s
Iteration  20: 929609.784 ops/s
Iteration  21: 928182.945 ops/s
Iteration  22: 930353.937 ops/s
Iteration  23: 926442.377 ops/s
Iteration  24: 930896.360 ops/s
Iteration  25: 931521.697 ops/s
Iteration  26: 929640.381 ops/s
Iteration  27: 930377.923 ops/s
Iteration  28: 927834.171 ops/s
Iteration  29: 918966.205 ops/s
Iteration  30: 930696.874 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_allSatisfyWithOccurrences":
  926806.891 ±(99.9%) 2624.807 ops/s [Average]
  (min, avg, max) = (918966.205, 926806.891, 932268.526), stdev = 3928.688
  CI (99.9%): [924182.084, 929431.698] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_allSatisfyWithOccurrences  thrpt   30  926806.891 ± 2624.807  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 535459.046 ops/s
# Warmup Iteration   2: 732688.351 ops/s
# Warmup Iteration   3: 928124.843 ops/s
# Warmup Iteration   4: 924779.322 ops/s
# Warmup Iteration   5: 928067.617 ops/s
# Warmup Iteration   6: 927720.007 ops/s
# Warmup Iteration   7: 929728.141 ops/s
# Warmup Iteration   8: 808599.196 ops/s
# Warmup Iteration   9: 897590.681 ops/s
# Warmup Iteration  10: 930412.318 ops/s
# Warmup Iteration  11: 929326.438 ops/s
# Warmup Iteration  12: 927567.672 ops/s
# Warmup Iteration  13: 928266.192 ops/s
# Warmup Iteration  14: 927225.811 ops/s
# Warmup Iteration  15: 931117.985 ops/s
# Warmup Iteration  16: 929536.206 ops/s
# Warmup Iteration  17: 927316.823 ops/s
# Warmup Iteration  18: 929067.207 ops/s
# Warmup Iteration  19: 930429.889 ops/s
# Warmup Iteration  20: 930884.456 ops/s
# Warmup Iteration  21: 931015.051 ops/s
# Warmup Iteration  22: 930241.759 ops/s
# Warmup Iteration  23: 931022.541 ops/s
# Warmup Iteration  24: 930185.415 ops/s
# Warmup Iteration  25: 930259.365 ops/s
# Warmup Iteration  26: 931599.199 ops/s
# Warmup Iteration  27: 930699.207 ops/s
# Warmup Iteration  28: 929050.232 ops/s
# Warmup Iteration  29: 930338.870 ops/s
# Warmup Iteration  30: 931049.552 ops/s
Iteration   1: 930282.185 ops/s
Iteration   2: 927345.449 ops/s
Iteration   3: 928108.823 ops/s
Iteration   4: 929464.851 ops/s
Iteration   5: 928481.424 ops/s
Iteration   6: 928845.161 ops/s
Iteration   7: 930802.847 ops/s
Iteration   8: 930048.498 ops/s
Iteration   9: 928505.545 ops/s
Iteration  10: 928032.618 ops/s
Iteration  11: 929240.433 ops/s
Iteration  12: 929503.433 ops/s
Iteration  13: 927161.532 ops/s
Iteration  14: 927793.650 ops/s
Iteration  15: 922378.132 ops/s
Iteration  16: 928077.489 ops/s
Iteration  17: 931600.079 ops/s
Iteration  18: 930201.273 ops/s
Iteration  19: 931051.221 ops/s
Iteration  20: 930976.927 ops/s
Iteration  21: 928792.855 ops/s
Iteration  22: 929265.610 ops/s
Iteration  23: 928641.900 ops/s
Iteration  24: 929718.947 ops/s
Iteration  25: 929377.974 ops/s
Iteration  26: 929169.238 ops/s
Iteration  27: 930110.085 ops/s
Iteration  28: 930520.673 ops/s
Iteration  29: 928257.300 ops/s
Iteration  30: 930170.545 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_anySatisfy":
  929064.223 ±(99.9%) 1134.730 ops/s [Average]
  (min, avg, max) = (922378.132, 929064.223, 931600.079), stdev = 1698.411
  CI (99.9%): [927929.493, 930198.953] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_anySatisfy  thrpt   30  929064.223 ± 1134.730  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 555652.957 ops/s
# Warmup Iteration   2: 727828.100 ops/s
# Warmup Iteration   3: 933462.734 ops/s
# Warmup Iteration   4: 922396.144 ops/s
# Warmup Iteration   5: 938128.023 ops/s
# Warmup Iteration   6: 935864.825 ops/s
# Warmup Iteration   7: 930409.553 ops/s
# Warmup Iteration   8: 938443.924 ops/s
# Warmup Iteration   9: 778580.745 ops/s
# Warmup Iteration  10: 935612.186 ops/s
# Warmup Iteration  11: 935588.884 ops/s
# Warmup Iteration  12: 936281.079 ops/s
# Warmup Iteration  13: 935648.623 ops/s
# Warmup Iteration  14: 939850.382 ops/s
# Warmup Iteration  15: 935168.984 ops/s
# Warmup Iteration  16: 936555.144 ops/s
# Warmup Iteration  17: 940909.229 ops/s
# Warmup Iteration  18: 939497.598 ops/s
# Warmup Iteration  19: 939652.531 ops/s
# Warmup Iteration  20: 940644.118 ops/s
# Warmup Iteration  21: 937584.694 ops/s
# Warmup Iteration  22: 939146.328 ops/s
# Warmup Iteration  23: 936408.804 ops/s
# Warmup Iteration  24: 940295.300 ops/s
# Warmup Iteration  25: 936853.260 ops/s
# Warmup Iteration  26: 935790.574 ops/s
# Warmup Iteration  27: 939401.673 ops/s
# Warmup Iteration  28: 937175.870 ops/s
# Warmup Iteration  29: 938636.662 ops/s
# Warmup Iteration  30: 940660.197 ops/s
Iteration   1: 938217.043 ops/s
Iteration   2: 937941.714 ops/s
Iteration   3: 937561.249 ops/s
Iteration   4: 940276.453 ops/s
Iteration   5: 938765.199 ops/s
Iteration   6: 937060.509 ops/s
Iteration   7: 940181.138 ops/s
Iteration   8: 939899.477 ops/s
Iteration   9: 937560.745 ops/s
Iteration  10: 940323.438 ops/s
Iteration  11: 940019.462 ops/s
Iteration  12: 938025.506 ops/s
Iteration  13: 939219.612 ops/s
Iteration  14: 940584.407 ops/s
Iteration  15: 933481.328 ops/s
Iteration  16: 939069.956 ops/s
Iteration  17: 940100.456 ops/s
Iteration  18: 938822.619 ops/s
Iteration  19: 940392.014 ops/s
Iteration  20: 941005.543 ops/s
Iteration  21: 938584.925 ops/s
Iteration  22: 937980.671 ops/s
Iteration  23: 932322.345 ops/s
Iteration  24: 940313.821 ops/s
Iteration  25: 936969.579 ops/s
Iteration  26: 938642.564 ops/s
Iteration  27: 939372.921 ops/s
Iteration  28: 941765.152 ops/s
Iteration  29: 932818.415 ops/s
Iteration  30: 934096.414 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_anySatisfyWith":
  938379.156 ±(99.9%) 1606.848 ops/s [Average]
  (min, avg, max) = (932322.345, 938379.156, 941765.152), stdev = 2405.055
  CI (99.9%): [936772.307, 939986.004] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  938379.156 ± 1606.848  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_anySatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_anySatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 584727.854 ops/s
# Warmup Iteration   2: 814309.924 ops/s
# Warmup Iteration   3: 1011166.320 ops/s
# Warmup Iteration   4: 1004238.337 ops/s
# Warmup Iteration   5: 1004837.928 ops/s
# Warmup Iteration   6: 1008826.585 ops/s
# Warmup Iteration   7: 1006914.558 ops/s
# Warmup Iteration   8: 844724.310 ops/s
# Warmup Iteration   9: 1011043.854 ops/s
# Warmup Iteration  10: 1008985.666 ops/s
# Warmup Iteration  11: 1010712.030 ops/s
# Warmup Iteration  12: 1010607.397 ops/s
# Warmup Iteration  13: 1011065.946 ops/s
# Warmup Iteration  14: 1010521.280 ops/s
# Warmup Iteration  15: 1010826.526 ops/s
# Warmup Iteration  16: 1009115.954 ops/s
# Warmup Iteration  17: 1010060.678 ops/s
# Warmup Iteration  18: 1012890.711 ops/s
# Warmup Iteration  19: 1011261.668 ops/s
# Warmup Iteration  20: 1011929.173 ops/s
# Warmup Iteration  21: 1008195.228 ops/s
# Warmup Iteration  22: 1010426.085 ops/s
# Warmup Iteration  23: 1014014.201 ops/s
# Warmup Iteration  24: 1012184.926 ops/s
# Warmup Iteration  25: 1003020.575 ops/s
# Warmup Iteration  26: 1010558.973 ops/s
# Warmup Iteration  27: 1013402.851 ops/s
# Warmup Iteration  28: 1010840.683 ops/s
# Warmup Iteration  29: 1010364.485 ops/s
# Warmup Iteration  30: 1011882.305 ops/s
Iteration   1: 1012531.362 ops/s
Iteration   2: 1011996.749 ops/s
Iteration   3: 1012488.674 ops/s
Iteration   4: 1014271.657 ops/s
Iteration   5: 1011838.040 ops/s
Iteration   6: 1012251.710 ops/s
Iteration   7: 1010852.322 ops/s
Iteration   8: 1011707.396 ops/s
Iteration   9: 1008209.342 ops/s
Iteration  10: 1008197.463 ops/s
Iteration  11: 1008756.801 ops/s
Iteration  12: 1010743.600 ops/s
Iteration  13: 1011579.705 ops/s
Iteration  14: 1010474.818 ops/s
Iteration  15: 1010060.924 ops/s
Iteration  16: 1011528.740 ops/s
Iteration  17: 1013221.356 ops/s
Iteration  18: 1008056.850 ops/s
Iteration  19: 1013887.572 ops/s
Iteration  20: 1012100.779 ops/s
Iteration  21: 1013849.670 ops/s
Iteration  22: 1012228.491 ops/s
Iteration  23: 1009768.920 ops/s
Iteration  24: 1010248.089 ops/s
Iteration  25: 1013063.369 ops/s
Iteration  26: 1009599.944 ops/s
Iteration  27: 1014580.236 ops/s
Iteration  28: 1010978.133 ops/s
Iteration  29: 1014181.410 ops/s
Iteration  30: 1011938.314 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_anySatisfyWithOccurrences":
  1011506.415 ±(99.9%) 1232.965 ops/s [Average]
  (min, avg, max) = (1008056.850, 1011506.415, 1014580.236), stdev = 1845.443
  CI (99.9%): [1010273.450, 1012739.379] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_anySatisfyWithOccurrences  thrpt   30  1011506.415 ± 1232.965  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 369765.585 ops/s
# Warmup Iteration   2: 747172.254 ops/s
# Warmup Iteration   3: 778199.090 ops/s
# Warmup Iteration   4: 782872.276 ops/s
# Warmup Iteration   5: 662729.603 ops/s
# Warmup Iteration   6: 785853.871 ops/s
# Warmup Iteration   7: 784981.900 ops/s
# Warmup Iteration   8: 786405.513 ops/s
# Warmup Iteration   9: 782767.324 ops/s
# Warmup Iteration  10: 783802.850 ops/s
# Warmup Iteration  11: 785209.728 ops/s
# Warmup Iteration  12: 786574.218 ops/s
# Warmup Iteration  13: 787178.804 ops/s
# Warmup Iteration  14: 784674.093 ops/s
# Warmup Iteration  15: 785761.944 ops/s
# Warmup Iteration  16: 784859.353 ops/s
# Warmup Iteration  17: 786483.480 ops/s
# Warmup Iteration  18: 782282.779 ops/s
# Warmup Iteration  19: 786683.264 ops/s
# Warmup Iteration  20: 787205.499 ops/s
# Warmup Iteration  21: 784935.498 ops/s
# Warmup Iteration  22: 785913.758 ops/s
# Warmup Iteration  23: 783071.226 ops/s
# Warmup Iteration  24: 787005.257 ops/s
# Warmup Iteration  25: 787404.393 ops/s
# Warmup Iteration  26: 785675.276 ops/s
# Warmup Iteration  27: 787072.121 ops/s
# Warmup Iteration  28: 785009.239 ops/s
# Warmup Iteration  29: 785415.170 ops/s
# Warmup Iteration  30: 781994.773 ops/s
Iteration   1: 786546.187 ops/s
Iteration   2: 783598.979 ops/s
Iteration   3: 781778.464 ops/s
Iteration   4: 784976.208 ops/s
Iteration   5: 785307.707 ops/s
Iteration   6: 780582.084 ops/s
Iteration   7: 786693.471 ops/s
Iteration   8: 786095.901 ops/s
Iteration   9: 775464.415 ops/s
Iteration  10: 788849.059 ops/s
Iteration  11: 785816.239 ops/s
Iteration  12: 783973.771 ops/s
Iteration  13: 787495.759 ops/s
Iteration  14: 785295.390 ops/s
Iteration  15: 786606.479 ops/s
Iteration  16: 785388.751 ops/s
Iteration  17: 787128.495 ops/s
Iteration  18: 785559.804 ops/s
Iteration  19: 785629.443 ops/s
Iteration  20: 786210.002 ops/s
Iteration  21: 786936.620 ops/s
Iteration  22: 786137.441 ops/s
Iteration  23: 784936.252 ops/s
Iteration  24: 784872.584 ops/s
Iteration  25: 786784.991 ops/s
Iteration  26: 783231.860 ops/s
Iteration  27: 784188.868 ops/s
Iteration  28: 782073.656 ops/s
Iteration  29: 780642.830 ops/s
Iteration  30: 790679.655 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_appendString":
  784982.712 ±(99.9%) 1895.650 ops/s [Average]
  (min, avg, max) = (775464.415, 784982.712, 790679.655), stdev = 2837.319
  CI (99.9%): [783087.063, 786878.362] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_appendString  thrpt   30  784982.712 ± 1895.650  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_appendStringThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_appendStringThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 88357.191 ops/s
# Warmup Iteration   2: 96245.839 ops/s
# Warmup Iteration   3: 113902.891 ops/s
# Warmup Iteration   4: 123072.237 ops/s
# Warmup Iteration   5: 123222.702 ops/s
# Warmup Iteration   6: 122100.549 ops/s
# Warmup Iteration   7: 122935.856 ops/s
# Warmup Iteration   8: 123023.898 ops/s
# Warmup Iteration   9: 122623.877 ops/s
# Warmup Iteration  10: 122994.634 ops/s
# Warmup Iteration  11: 122916.607 ops/s
# Warmup Iteration  12: 122865.762 ops/s
# Warmup Iteration  13: 123024.146 ops/s
# Warmup Iteration  14: 103515.637 ops/s
# Warmup Iteration  15: 122468.445 ops/s
# Warmup Iteration  16: 122902.676 ops/s
# Warmup Iteration  17: 130060.077 ops/s
# Warmup Iteration  18: 130284.686 ops/s
# Warmup Iteration  19: 129675.975 ops/s
# Warmup Iteration  20: 130635.724 ops/s
# Warmup Iteration  21: 130825.310 ops/s
# Warmup Iteration  22: 130892.659 ops/s
# Warmup Iteration  23: 129941.824 ops/s
# Warmup Iteration  24: 130075.567 ops/s
# Warmup Iteration  25: 130818.795 ops/s
# Warmup Iteration  26: 130798.239 ops/s
# Warmup Iteration  27: 130077.140 ops/s
# Warmup Iteration  28: 129897.982 ops/s
# Warmup Iteration  29: 130549.591 ops/s
# Warmup Iteration  30: 129698.754 ops/s
Iteration   1: 130802.132 ops/s
Iteration   2: 129785.966 ops/s
Iteration   3: 129961.100 ops/s
Iteration   4: 130374.017 ops/s
Iteration   5: 130686.835 ops/s
Iteration   6: 129849.049 ops/s
Iteration   7: 130695.437 ops/s
Iteration   8: 130492.212 ops/s
Iteration   9: 130873.385 ops/s
Iteration  10: 130515.323 ops/s
Iteration  11: 130929.218 ops/s
Iteration  12: 130995.188 ops/s
Iteration  13: 129943.533 ops/s
Iteration  14: 130218.137 ops/s
Iteration  15: 130059.395 ops/s
Iteration  16: 130366.932 ops/s
Iteration  17: 130236.620 ops/s
Iteration  18: 129822.324 ops/s
Iteration  19: 129919.389 ops/s
Iteration  20: 130940.383 ops/s
Iteration  21: 130697.075 ops/s
Iteration  22: 129963.491 ops/s
Iteration  23: 130695.396 ops/s
Iteration  24: 130324.742 ops/s
Iteration  25: 130970.621 ops/s
Iteration  26: 131049.548 ops/s
Iteration  27: 130932.679 ops/s
Iteration  28: 130032.774 ops/s
Iteration  29: 130763.223 ops/s
Iteration  30: 130569.016 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_appendStringThrows":
  130448.838 ±(99.9%) 276.143 ops/s [Average]
  (min, avg, max) = (129785.966, 130448.838, 131049.548), stdev = 413.317
  CI (99.9%): [130172.696, 130724.981] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_appendStringThrows  thrpt   30  130448.838 ± 276.143  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_appendStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_appendStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 363297.917 ops/s
# Warmup Iteration   2: 769022.668 ops/s
# Warmup Iteration   3: 816342.251 ops/s
# Warmup Iteration   4: 820127.460 ops/s
# Warmup Iteration   5: 689409.049 ops/s
# Warmup Iteration   6: 807450.729 ops/s
# Warmup Iteration   7: 814554.210 ops/s
# Warmup Iteration   8: 813586.603 ops/s
# Warmup Iteration   9: 813332.238 ops/s
# Warmup Iteration  10: 805566.573 ops/s
# Warmup Iteration  11: 814022.767 ops/s
# Warmup Iteration  12: 811639.809 ops/s
# Warmup Iteration  13: 810058.395 ops/s
# Warmup Iteration  14: 810169.307 ops/s
# Warmup Iteration  15: 813070.458 ops/s
# Warmup Iteration  16: 813180.631 ops/s
# Warmup Iteration  17: 820120.071 ops/s
# Warmup Iteration  18: 818643.458 ops/s
# Warmup Iteration  19: 817128.093 ops/s
# Warmup Iteration  20: 817986.177 ops/s
# Warmup Iteration  21: 816304.290 ops/s
# Warmup Iteration  22: 815080.457 ops/s
# Warmup Iteration  23: 819171.454 ops/s
# Warmup Iteration  24: 813394.215 ops/s
# Warmup Iteration  25: 818905.734 ops/s
# Warmup Iteration  26: 819279.785 ops/s
# Warmup Iteration  27: 815575.706 ops/s
# Warmup Iteration  28: 819789.494 ops/s
# Warmup Iteration  29: 820181.146 ops/s
# Warmup Iteration  30: 814443.712 ops/s
Iteration   1: 820266.570 ops/s
Iteration   2: 818345.984 ops/s
Iteration   3: 822951.633 ops/s
Iteration   4: 819708.479 ops/s
Iteration   5: 815575.072 ops/s
Iteration   6: 807426.079 ops/s
Iteration   7: 820887.132 ops/s
Iteration   8: 818470.699 ops/s
Iteration   9: 816602.066 ops/s
Iteration  10: 812120.305 ops/s
Iteration  11: 809963.828 ops/s
Iteration  12: 819929.937 ops/s
Iteration  13: 818239.330 ops/s
Iteration  14: 814066.034 ops/s
Iteration  15: 819614.872 ops/s
Iteration  16: 818163.476 ops/s
Iteration  17: 820502.915 ops/s
Iteration  18: 819017.377 ops/s
Iteration  19: 818748.094 ops/s
Iteration  20: 815268.762 ops/s
Iteration  21: 819359.570 ops/s
Iteration  22: 817483.115 ops/s
Iteration  23: 820126.697 ops/s
Iteration  24: 819390.221 ops/s
Iteration  25: 816925.450 ops/s
Iteration  26: 819981.334 ops/s
Iteration  27: 818567.160 ops/s
Iteration  28: 821702.325 ops/s
Iteration  29: 819842.791 ops/s
Iteration  30: 821678.136 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_appendStringWithSeparator":
  818030.848 ±(99.9%) 2293.811 ops/s [Average]
  (min, avg, max) = (807426.079, 818030.848, 822951.633), stdev = 3433.269
  CI (99.9%): [815737.037, 820324.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_appendStringWithSeparator  thrpt   30  818030.848 ± 2293.811  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 410966.627 ops/s
# Warmup Iteration   2: 803682.176 ops/s
# Warmup Iteration   3: 844827.027 ops/s
# Warmup Iteration   4: 841451.539 ops/s
# Warmup Iteration   5: 715004.495 ops/s
# Warmup Iteration   6: 843935.769 ops/s
# Warmup Iteration   7: 845822.825 ops/s
# Warmup Iteration   8: 848103.728 ops/s
# Warmup Iteration   9: 847818.055 ops/s
# Warmup Iteration  10: 847292.517 ops/s
# Warmup Iteration  11: 846892.268 ops/s
# Warmup Iteration  12: 847914.321 ops/s
# Warmup Iteration  13: 845772.525 ops/s
# Warmup Iteration  14: 847548.094 ops/s
# Warmup Iteration  15: 848318.503 ops/s
# Warmup Iteration  16: 848659.883 ops/s
# Warmup Iteration  17: 844583.656 ops/s
# Warmup Iteration  18: 848698.727 ops/s
# Warmup Iteration  19: 849038.278 ops/s
# Warmup Iteration  20: 843098.301 ops/s
# Warmup Iteration  21: 850900.532 ops/s
# Warmup Iteration  22: 850388.772 ops/s
# Warmup Iteration  23: 849834.404 ops/s
# Warmup Iteration  24: 849770.898 ops/s
# Warmup Iteration  25: 843399.692 ops/s
# Warmup Iteration  26: 841666.732 ops/s
# Warmup Iteration  27: 848230.823 ops/s
# Warmup Iteration  28: 843990.382 ops/s
# Warmup Iteration  29: 846570.944 ops/s
# Warmup Iteration  30: 846912.379 ops/s
Iteration   1: 850738.153 ops/s
Iteration   2: 847833.811 ops/s
Iteration   3: 847829.431 ops/s
Iteration   4: 849130.612 ops/s
Iteration   5: 851887.018 ops/s
Iteration   6: 848788.648 ops/s
Iteration   7: 849471.209 ops/s
Iteration   8: 848758.484 ops/s
Iteration   9: 848253.134 ops/s
Iteration  10: 846857.246 ops/s
Iteration  11: 848548.735 ops/s
Iteration  12: 846744.099 ops/s
Iteration  13: 845528.174 ops/s
Iteration  14: 848529.834 ops/s
Iteration  15: 845035.991 ops/s
Iteration  16: 839831.785 ops/s
Iteration  17: 818717.158 ops/s
Iteration  18: 846650.005 ops/s
Iteration  19: 844335.275 ops/s
Iteration  20: 850466.671 ops/s
Iteration  21: 848075.702 ops/s
Iteration  22: 845642.438 ops/s
Iteration  23: 849861.450 ops/s
Iteration  24: 845557.339 ops/s
Iteration  25: 847493.918 ops/s
Iteration  26: 850670.233 ops/s
Iteration  27: 848301.630 ops/s
Iteration  28: 848097.527 ops/s
Iteration  29: 851238.547 ops/s
Iteration  30: 849031.016 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd":
  846930.176 ±(99.9%) 3905.534 ops/s [Average]
  (min, avg, max) = (818717.158, 846930.176, 851887.018), stdev = 5845.620
  CI (99.9%): [843024.642, 850835.710] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd  thrpt   30  846930.176 ± 3905.534  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_appendString_with_collection_containing_self$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_appendString_with_collection_containing_self

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2151832.098 ops/s
# Warmup Iteration   2: 2945009.779 ops/s
# Warmup Iteration   3: 3507443.787 ops/s
# Warmup Iteration   4: 3539313.568 ops/s
# Warmup Iteration   5: 3513190.227 ops/s
# Warmup Iteration   6: 3535196.351 ops/s
# Warmup Iteration   7: 3490422.529 ops/s
# Warmup Iteration   8: 3013796.495 ops/s
# Warmup Iteration   9: 3532589.961 ops/s
# Warmup Iteration  10: 3536568.455 ops/s
# Warmup Iteration  11: 3540008.330 ops/s
# Warmup Iteration  12: 3533359.442 ops/s
# Warmup Iteration  13: 3536616.765 ops/s
# Warmup Iteration  14: 3535141.886 ops/s
# Warmup Iteration  15: 3531324.446 ops/s
# Warmup Iteration  16: 3536404.969 ops/s
# Warmup Iteration  17: 3531282.546 ops/s
# Warmup Iteration  18: 3531421.934 ops/s
# Warmup Iteration  19: 3521631.701 ops/s
# Warmup Iteration  20: 3524130.160 ops/s
# Warmup Iteration  21: 3526371.198 ops/s
# Warmup Iteration  22: 3528584.739 ops/s
# Warmup Iteration  23: 3529460.444 ops/s
# Warmup Iteration  24: 3521614.593 ops/s
# Warmup Iteration  25: 3528177.202 ops/s
# Warmup Iteration  26: 3528447.595 ops/s
# Warmup Iteration  27: 3536098.145 ops/s
# Warmup Iteration  28: 3530275.166 ops/s
# Warmup Iteration  29: 3531201.172 ops/s
# Warmup Iteration  30: 3528975.901 ops/s
Iteration   1: 3524567.355 ops/s
Iteration   2: 3527663.413 ops/s
Iteration   3: 3531433.455 ops/s
Iteration   4: 3529442.696 ops/s
Iteration   5: 3526066.472 ops/s
Iteration   6: 3531560.641 ops/s
Iteration   7: 3525996.758 ops/s
Iteration   8: 3533069.681 ops/s
Iteration   9: 3515324.332 ops/s
Iteration  10: 3528519.432 ops/s
Iteration  11: 3529277.614 ops/s
Iteration  12: 3526032.687 ops/s
Iteration  13: 3528853.149 ops/s
Iteration  14: 3532093.195 ops/s
Iteration  15: 3534047.516 ops/s
Iteration  16: 3526175.792 ops/s
Iteration  17: 3523815.778 ops/s
Iteration  18: 3530154.145 ops/s
Iteration  19: 3530106.047 ops/s
Iteration  20: 3527398.311 ops/s
Iteration  21: 3529736.115 ops/s
Iteration  22: 3524122.186 ops/s
Iteration  23: 3524062.823 ops/s
Iteration  24: 3529920.778 ops/s
Iteration  25: 3536155.131 ops/s
Iteration  26: 3528048.807 ops/s
Iteration  27: 3529996.528 ops/s
Iteration  28: 3524934.388 ops/s
Iteration  29: 3527636.708 ops/s
Iteration  30: 3536059.124 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_appendString_with_collection_containing_self":
  3528409.035 ±(99.9%) 2773.820 ops/s [Average]
  (min, avg, max) = (3515324.332, 3528409.035, 3536155.131), stdev = 4151.724
  CI (99.9%): [3525635.215, 3531182.856] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_appendString_with_collection_containing_self  thrpt   30  3528409.035 ± 2773.820  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5580815.592 ops/s
# Warmup Iteration   2: 8849076.291 ops/s
# Warmup Iteration   3: 9866394.343 ops/s
# Warmup Iteration   4: 9908548.350 ops/s
# Warmup Iteration   5: 9912941.191 ops/s
# Warmup Iteration   6: 8908716.223 ops/s
# Warmup Iteration   7: 9419037.943 ops/s
# Warmup Iteration   8: 9929581.614 ops/s
# Warmup Iteration   9: 9870602.427 ops/s
# Warmup Iteration  10: 9839412.478 ops/s
# Warmup Iteration  11: 9831212.533 ops/s
# Warmup Iteration  12: 9878006.478 ops/s
# Warmup Iteration  13: 9820529.530 ops/s
# Warmup Iteration  14: 9819502.525 ops/s
# Warmup Iteration  15: 9826080.605 ops/s
# Warmup Iteration  16: 9828093.874 ops/s
# Warmup Iteration  17: 9820389.653 ops/s
# Warmup Iteration  18: 9896205.817 ops/s
# Warmup Iteration  19: 9930627.479 ops/s
# Warmup Iteration  20: 9929366.711 ops/s
# Warmup Iteration  21: 9937645.214 ops/s
# Warmup Iteration  22: 9934169.197 ops/s
# Warmup Iteration  23: 9932083.420 ops/s
# Warmup Iteration  24: 9929580.914 ops/s
# Warmup Iteration  25: 9926055.059 ops/s
# Warmup Iteration  26: 9892825.230 ops/s
# Warmup Iteration  27: 9930526.644 ops/s
# Warmup Iteration  28: 9932030.395 ops/s
# Warmup Iteration  29: 9922655.189 ops/s
# Warmup Iteration  30: 9933448.147 ops/s
Iteration   1: 9933587.782 ops/s
Iteration   2: 9945808.086 ops/s
Iteration   3: 9917499.062 ops/s
Iteration   4: 9936633.453 ops/s
Iteration   5: 9908991.708 ops/s
Iteration   6: 9940515.508 ops/s
Iteration   7: 9907843.862 ops/s
Iteration   8: 9930755.411 ops/s
Iteration   9: 9915219.925 ops/s
Iteration  10: 9925265.201 ops/s
Iteration  11: 9923643.992 ops/s
Iteration  12: 9943851.665 ops/s
Iteration  13: 9914377.490 ops/s
Iteration  14: 9957419.051 ops/s
Iteration  15: 9928902.025 ops/s
Iteration  16: 9941512.621 ops/s
Iteration  17: 9895558.147 ops/s
Iteration  18: 9934341.809 ops/s
Iteration  19: 9927258.647 ops/s
Iteration  20: 9935380.701 ops/s
Iteration  21: 9892018.197 ops/s
Iteration  22: 9939819.527 ops/s
Iteration  23: 9905572.333 ops/s
Iteration  24: 9949657.354 ops/s
Iteration  25: 9926101.270 ops/s
Iteration  26: 9930885.832 ops/s
Iteration  27: 9924460.231 ops/s
Iteration  28: 9928870.965 ops/s
Iteration  29: 9903677.291 ops/s
Iteration  30: 9946674.985 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_asLazy":
  9927070.138 ±(99.9%) 10840.134 ops/s [Average]
  (min, avg, max) = (9892018.197, 9927070.138, 9957419.051), stdev = 16225.003
  CI (99.9%): [9916230.004, 9937910.271] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt        Score       Error  Units
TreeBagTest._Benchmark.benchmark_asLazy  thrpt   30  9927070.138 ± 10840.134  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5196831.356 ops/s
# Warmup Iteration   2: 8700853.920 ops/s
# Warmup Iteration   3: 9449725.631 ops/s
# Warmup Iteration   4: 9482737.264 ops/s
# Warmup Iteration   5: 9535679.208 ops/s
# Warmup Iteration   6: 8015654.159 ops/s
# Warmup Iteration   7: 9527988.361 ops/s
# Warmup Iteration   8: 9522706.455 ops/s
# Warmup Iteration   9: 9543692.483 ops/s
# Warmup Iteration  10: 9545218.492 ops/s
# Warmup Iteration  11: 9527584.713 ops/s
# Warmup Iteration  12: 9516225.175 ops/s
# Warmup Iteration  13: 9543203.676 ops/s
# Warmup Iteration  14: 9520346.833 ops/s
# Warmup Iteration  15: 9530161.165 ops/s
# Warmup Iteration  16: 9528488.123 ops/s
# Warmup Iteration  17: 9532525.302 ops/s
# Warmup Iteration  18: 9511389.481 ops/s
# Warmup Iteration  19: 9520932.603 ops/s
# Warmup Iteration  20: 9532591.592 ops/s
# Warmup Iteration  21: 9532321.816 ops/s
# Warmup Iteration  22: 9538367.080 ops/s
# Warmup Iteration  23: 9538827.522 ops/s
# Warmup Iteration  24: 9520148.287 ops/s
# Warmup Iteration  25: 9538747.833 ops/s
# Warmup Iteration  26: 9531775.868 ops/s
# Warmup Iteration  27: 9499170.429 ops/s
# Warmup Iteration  28: 9530108.894 ops/s
# Warmup Iteration  29: 9541843.542 ops/s
# Warmup Iteration  30: 9541549.454 ops/s
Iteration   1: 9543940.544 ops/s
Iteration   2: 9506168.090 ops/s
Iteration   3: 9518788.186 ops/s
Iteration   4: 9543575.491 ops/s
Iteration   5: 9547220.619 ops/s
Iteration   6: 9545633.593 ops/s
Iteration   7: 9539843.696 ops/s
Iteration   8: 9529172.554 ops/s
Iteration   9: 9536081.698 ops/s
Iteration  10: 9531756.059 ops/s
Iteration  11: 9549761.397 ops/s
Iteration  12: 9518046.518 ops/s
Iteration  13: 9555266.914 ops/s
Iteration  14: 9513764.986 ops/s
Iteration  15: 9552539.363 ops/s
Iteration  16: 9538546.778 ops/s
Iteration  17: 9538934.831 ops/s
Iteration  18: 9533760.434 ops/s
Iteration  19: 9520744.450 ops/s
Iteration  20: 9544022.866 ops/s
Iteration  21: 9527219.851 ops/s
Iteration  22: 9551134.121 ops/s
Iteration  23: 9535526.410 ops/s
Iteration  24: 9552577.465 ops/s
Iteration  25: 9492688.369 ops/s
Iteration  26: 9528924.770 ops/s
Iteration  27: 9515475.779 ops/s
Iteration  28: 9512983.791 ops/s
Iteration  29: 9537727.914 ops/s
Iteration  30: 9478947.160 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_asSynchronized":
  9531359.157 ±(99.9%) 12182.965 ops/s [Average]
  (min, avg, max) = (9478947.160, 9531359.157, 9555266.914), stdev = 18234.890
  CI (99.9%): [9519176.191, 9543542.122] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
TreeBagTest._Benchmark.benchmark_asSynchronized  thrpt   30  9531359.157 ± 12182.965  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1124288.913 ops/s
# Warmup Iteration   2: 2054516.218 ops/s
# Warmup Iteration   3: 2288460.587 ops/s
# Warmup Iteration   4: 2307514.820 ops/s
# Warmup Iteration   5: 2303761.324 ops/s
# Warmup Iteration   6: 1934934.692 ops/s
# Warmup Iteration   7: 2306698.886 ops/s
# Warmup Iteration   8: 2305771.330 ops/s
# Warmup Iteration   9: 2309366.335 ops/s
# Warmup Iteration  10: 2311254.035 ops/s
# Warmup Iteration  11: 2312593.916 ops/s
# Warmup Iteration  12: 2313730.711 ops/s
# Warmup Iteration  13: 2307797.662 ops/s
# Warmup Iteration  14: 2312995.296 ops/s
# Warmup Iteration  15: 2308882.815 ops/s
# Warmup Iteration  16: 2314421.270 ops/s
# Warmup Iteration  17: 2310728.512 ops/s
# Warmup Iteration  18: 2308830.260 ops/s
# Warmup Iteration  19: 2308235.331 ops/s
# Warmup Iteration  20: 2309122.190 ops/s
# Warmup Iteration  21: 2312191.697 ops/s
# Warmup Iteration  22: 2310922.707 ops/s
# Warmup Iteration  23: 2307345.498 ops/s
# Warmup Iteration  24: 2312509.902 ops/s
# Warmup Iteration  25: 2310391.327 ops/s
# Warmup Iteration  26: 2311695.684 ops/s
# Warmup Iteration  27: 2310551.020 ops/s
# Warmup Iteration  28: 2308153.604 ops/s
# Warmup Iteration  29: 2306581.860 ops/s
# Warmup Iteration  30: 2308025.515 ops/s
Iteration   1: 2304569.858 ops/s
Iteration   2: 2312854.060 ops/s
Iteration   3: 2309568.136 ops/s
Iteration   4: 2312819.130 ops/s
Iteration   5: 2300829.644 ops/s
Iteration   6: 2315486.995 ops/s
Iteration   7: 2307508.693 ops/s
Iteration   8: 2298615.248 ops/s
Iteration   9: 2313634.505 ops/s
Iteration  10: 2303596.832 ops/s
Iteration  11: 2305070.587 ops/s
Iteration  12: 2306147.987 ops/s
Iteration  13: 2308677.069 ops/s
Iteration  14: 2312629.726 ops/s
Iteration  15: 2303360.558 ops/s
Iteration  16: 2306853.432 ops/s
Iteration  17: 2305513.071 ops/s
Iteration  18: 2305880.114 ops/s
Iteration  19: 2316460.206 ops/s
Iteration  20: 2302480.054 ops/s
Iteration  21: 2308178.248 ops/s
Iteration  22: 2298445.205 ops/s
Iteration  23: 2299774.100 ops/s
Iteration  24: 2312232.610 ops/s
Iteration  25: 2308615.572 ops/s
Iteration  26: 2319237.535 ops/s
Iteration  27: 2308719.188 ops/s
Iteration  28: 2309214.667 ops/s
Iteration  29: 2309657.501 ops/s
Iteration  30: 2307599.156 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_asUnmodifiable":
  2307807.656 ±(99.9%) 3475.506 ops/s [Average]
  (min, avg, max) = (2298445.205, 2307807.656, 2319237.535), stdev = 5201.974
  CI (99.9%): [2304332.150, 2311283.162] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  2307807.656 ± 3475.506  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_bottomOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_bottomOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 99922.518 ops/s
# Warmup Iteration   2: 158867.222 ops/s
# Warmup Iteration   3: 188618.755 ops/s
# Warmup Iteration   4: 190001.943 ops/s
# Warmup Iteration   5: 190011.871 ops/s
# Warmup Iteration   6: 190377.270 ops/s
# Warmup Iteration   7: 159443.575 ops/s
# Warmup Iteration   8: 190175.399 ops/s
# Warmup Iteration   9: 190300.741 ops/s
# Warmup Iteration  10: 190374.651 ops/s
# Warmup Iteration  11: 189965.375 ops/s
# Warmup Iteration  12: 189542.369 ops/s
# Warmup Iteration  13: 190110.148 ops/s
# Warmup Iteration  14: 190192.885 ops/s
# Warmup Iteration  15: 190126.610 ops/s
# Warmup Iteration  16: 190071.985 ops/s
# Warmup Iteration  17: 191714.928 ops/s
# Warmup Iteration  18: 192374.087 ops/s
# Warmup Iteration  19: 191908.317 ops/s
# Warmup Iteration  20: 191680.611 ops/s
# Warmup Iteration  21: 192099.255 ops/s
# Warmup Iteration  22: 191307.114 ops/s
# Warmup Iteration  23: 191632.383 ops/s
# Warmup Iteration  24: 191176.114 ops/s
# Warmup Iteration  25: 191369.602 ops/s
# Warmup Iteration  26: 191544.374 ops/s
# Warmup Iteration  27: 192166.953 ops/s
# Warmup Iteration  28: 192047.848 ops/s
# Warmup Iteration  29: 192001.884 ops/s
# Warmup Iteration  30: 192268.627 ops/s
Iteration   1: 191981.129 ops/s
Iteration   2: 191645.681 ops/s
Iteration   3: 192005.248 ops/s
Iteration   4: 191397.366 ops/s
Iteration   5: 192302.606 ops/s
Iteration   6: 191632.447 ops/s
Iteration   7: 192422.748 ops/s
Iteration   8: 190265.709 ops/s
Iteration   9: 192370.374 ops/s
Iteration  10: 192013.775 ops/s
Iteration  11: 191836.058 ops/s
Iteration  12: 191429.084 ops/s
Iteration  13: 192345.654 ops/s
Iteration  14: 191355.497 ops/s
Iteration  15: 192160.733 ops/s
Iteration  16: 192023.370 ops/s
Iteration  17: 192044.254 ops/s
Iteration  18: 191863.836 ops/s
Iteration  19: 192347.896 ops/s
Iteration  20: 191878.072 ops/s
Iteration  21: 192733.743 ops/s
Iteration  22: 192261.836 ops/s
Iteration  23: 191529.694 ops/s
Iteration  24: 191330.846 ops/s
Iteration  25: 192384.926 ops/s
Iteration  26: 192222.226 ops/s
Iteration  27: 192301.755 ops/s
Iteration  28: 191949.036 ops/s
Iteration  29: 191910.672 ops/s
Iteration  30: 192263.547 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_bottomOccurrences":
  191940.327 ±(99.9%) 319.882 ops/s [Average]
  (min, avg, max) = (190265.709, 191940.327, 192733.743), stdev = 478.784
  CI (99.9%): [191620.446, 192260.209] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_bottomOccurrences  thrpt   30  191940.327 ± 319.882  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 188244.474 ops/s
# Warmup Iteration   2: 364870.193 ops/s
# Warmup Iteration   3: 402888.240 ops/s
# Warmup Iteration   4: 406792.898 ops/s
# Warmup Iteration   5: 355131.905 ops/s
# Warmup Iteration   6: 391810.257 ops/s
# Warmup Iteration   7: 406218.828 ops/s
# Warmup Iteration   8: 406937.508 ops/s
# Warmup Iteration   9: 404808.318 ops/s
# Warmup Iteration  10: 406264.265 ops/s
# Warmup Iteration  11: 405947.558 ops/s
# Warmup Iteration  12: 405967.838 ops/s
# Warmup Iteration  13: 405949.520 ops/s
# Warmup Iteration  14: 406392.076 ops/s
# Warmup Iteration  15: 405742.011 ops/s
# Warmup Iteration  16: 405734.004 ops/s
# Warmup Iteration  17: 406398.685 ops/s
# Warmup Iteration  18: 405477.884 ops/s
# Warmup Iteration  19: 406126.790 ops/s
# Warmup Iteration  20: 406525.642 ops/s
# Warmup Iteration  21: 406925.660 ops/s
# Warmup Iteration  22: 406081.028 ops/s
# Warmup Iteration  23: 406545.327 ops/s
# Warmup Iteration  24: 405644.686 ops/s
# Warmup Iteration  25: 406561.439 ops/s
# Warmup Iteration  26: 405740.265 ops/s
# Warmup Iteration  27: 406714.439 ops/s
# Warmup Iteration  28: 405686.721 ops/s
# Warmup Iteration  29: 406659.577 ops/s
# Warmup Iteration  30: 407139.679 ops/s
Iteration   1: 405917.168 ops/s
Iteration   2: 405396.203 ops/s
Iteration   3: 407304.028 ops/s
Iteration   4: 406213.917 ops/s
Iteration   5: 406712.427 ops/s
Iteration   6: 406001.641 ops/s
Iteration   7: 405600.774 ops/s
Iteration   8: 406839.480 ops/s
Iteration   9: 405963.869 ops/s
Iteration  10: 405038.003 ops/s
Iteration  11: 407123.056 ops/s
Iteration  12: 405723.169 ops/s
Iteration  13: 405785.534 ops/s
Iteration  14: 405968.334 ops/s
Iteration  15: 406896.264 ops/s
Iteration  16: 406769.808 ops/s
Iteration  17: 406358.777 ops/s
Iteration  18: 406786.142 ops/s
Iteration  19: 406352.842 ops/s
Iteration  20: 406577.797 ops/s
Iteration  21: 405448.668 ops/s
Iteration  22: 407450.602 ops/s
Iteration  23: 406098.295 ops/s
Iteration  24: 407667.858 ops/s
Iteration  25: 406084.849 ops/s
Iteration  26: 406112.015 ops/s
Iteration  27: 407292.537 ops/s
Iteration  28: 407137.315 ops/s
Iteration  29: 406637.110 ops/s
Iteration  30: 407417.746 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_chunk":
  406422.541 ±(99.9%) 458.290 ops/s [Average]
  (min, avg, max) = (405038.003, 406422.541, 407667.858), stdev = 685.946
  CI (99.9%): [405964.251, 406880.831] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_chunk  thrpt   30  406422.541 ± 458.290  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_chunk_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_chunk_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3693401.951 ops/s
# Warmup Iteration   2: 6351108.073 ops/s
# Warmup Iteration   3: 6985559.109 ops/s
# Warmup Iteration   4: 7007954.852 ops/s
# Warmup Iteration   5: 7025751.545 ops/s
# Warmup Iteration   6: 5894188.855 ops/s
# Warmup Iteration   7: 7011926.994 ops/s
# Warmup Iteration   8: 7024109.323 ops/s
# Warmup Iteration   9: 7007685.121 ops/s
# Warmup Iteration  10: 7011162.710 ops/s
# Warmup Iteration  11: 7011899.611 ops/s
# Warmup Iteration  12: 7022171.682 ops/s
# Warmup Iteration  13: 7016765.768 ops/s
# Warmup Iteration  14: 7022749.232 ops/s
# Warmup Iteration  15: 7025266.769 ops/s
# Warmup Iteration  16: 7020690.639 ops/s
# Warmup Iteration  17: 7007486.191 ops/s
# Warmup Iteration  18: 7011727.421 ops/s
# Warmup Iteration  19: 7010128.381 ops/s
# Warmup Iteration  20: 7004578.285 ops/s
# Warmup Iteration  21: 7017573.786 ops/s
# Warmup Iteration  22: 6994764.084 ops/s
# Warmup Iteration  23: 7009693.409 ops/s
# Warmup Iteration  24: 7022711.353 ops/s
# Warmup Iteration  25: 7016986.776 ops/s
# Warmup Iteration  26: 7009999.073 ops/s
# Warmup Iteration  27: 7022260.054 ops/s
# Warmup Iteration  28: 7022982.290 ops/s
# Warmup Iteration  29: 7025669.106 ops/s
# Warmup Iteration  30: 7027948.113 ops/s
Iteration   1: 7017328.949 ops/s
Iteration   2: 6992667.420 ops/s
Iteration   3: 7034647.314 ops/s
Iteration   4: 7013166.081 ops/s
Iteration   5: 6999372.794 ops/s
Iteration   6: 7001816.605 ops/s
Iteration   7: 6984101.453 ops/s
Iteration   8: 7017229.934 ops/s
Iteration   9: 7022505.652 ops/s
Iteration  10: 7034679.461 ops/s
Iteration  11: 7020214.793 ops/s
Iteration  12: 7020343.984 ops/s
Iteration  13: 7023774.101 ops/s
Iteration  14: 7010081.691 ops/s
Iteration  15: 7003372.781 ops/s
Iteration  16: 7003108.077 ops/s
Iteration  17: 7022591.818 ops/s
Iteration  18: 7010750.947 ops/s
Iteration  19: 7018883.617 ops/s
Iteration  20: 7015666.039 ops/s
Iteration  21: 7027994.658 ops/s
Iteration  22: 7013142.727 ops/s
Iteration  23: 7020867.260 ops/s
Iteration  24: 7036890.860 ops/s
Iteration  25: 7023959.297 ops/s
Iteration  26: 7039108.265 ops/s
Iteration  27: 7014981.714 ops/s
Iteration  28: 6988648.458 ops/s
Iteration  29: 6991200.641 ops/s
Iteration  30: 7004309.038 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_chunk_empty":
  7014246.881 ±(99.9%) 9566.033 ops/s [Average]
  (min, avg, max) = (6984101.453, 7014246.881, 7039108.265), stdev = 14317.988
  CI (99.9%): [7004680.848, 7023812.914] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_chunk_empty  thrpt   30  7014246.881 ± 9566.033  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 556728.927 ops/s
# Warmup Iteration   2: 899927.442 ops/s
# Warmup Iteration   3: 1047873.499 ops/s
# Warmup Iteration   4: 1049248.295 ops/s
# Warmup Iteration   5: 1044201.941 ops/s
# Warmup Iteration   6: 981009.027 ops/s
# Warmup Iteration   7: 947948.500 ops/s
# Warmup Iteration   8: 1052505.107 ops/s
# Warmup Iteration   9: 1051100.555 ops/s
# Warmup Iteration  10: 1055966.162 ops/s
# Warmup Iteration  11: 1055518.240 ops/s
# Warmup Iteration  12: 1053556.837 ops/s
# Warmup Iteration  13: 1053693.331 ops/s
# Warmup Iteration  14: 1053159.176 ops/s
# Warmup Iteration  15: 1055663.005 ops/s
# Warmup Iteration  16: 1054538.428 ops/s
# Warmup Iteration  17: 1053774.859 ops/s
# Warmup Iteration  18: 1053014.656 ops/s
# Warmup Iteration  19: 1055813.128 ops/s
# Warmup Iteration  20: 1051268.027 ops/s
# Warmup Iteration  21: 1048942.370 ops/s
# Warmup Iteration  22: 1054151.359 ops/s
# Warmup Iteration  23: 1054098.332 ops/s
# Warmup Iteration  24: 1054240.093 ops/s
# Warmup Iteration  25: 1049382.603 ops/s
# Warmup Iteration  26: 1053369.181 ops/s
# Warmup Iteration  27: 1054752.993 ops/s
# Warmup Iteration  28: 1053943.141 ops/s
# Warmup Iteration  29: 1055216.472 ops/s
# Warmup Iteration  30: 1052695.129 ops/s
Iteration   1: 1046249.193 ops/s
Iteration   2: 1055355.619 ops/s
Iteration   3: 1051073.560 ops/s
Iteration   4: 1053254.355 ops/s
Iteration   5: 1050219.445 ops/s
Iteration   6: 1053686.221 ops/s
Iteration   7: 1052941.721 ops/s
Iteration   8: 1056546.316 ops/s
Iteration   9: 1054320.184 ops/s
Iteration  10: 1053572.720 ops/s
Iteration  11: 1054796.931 ops/s
Iteration  12: 1057348.784 ops/s
Iteration  13: 1054305.097 ops/s
Iteration  14: 1057240.048 ops/s
Iteration  15: 1053140.879 ops/s
Iteration  16: 1047448.239 ops/s
Iteration  17: 1053596.648 ops/s
Iteration  18: 1056121.830 ops/s
Iteration  19: 1050300.151 ops/s
Iteration  20: 1055370.866 ops/s
Iteration  21: 1050004.149 ops/s
Iteration  22: 1052964.850 ops/s
Iteration  23: 1057132.682 ops/s
Iteration  24: 1056425.372 ops/s
Iteration  25: 1054669.467 ops/s
Iteration  26: 1054271.368 ops/s
Iteration  27: 1053502.781 ops/s
Iteration  28: 1057941.988 ops/s
Iteration  29: 1049338.349 ops/s
Iteration  30: 1053261.706 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_chunk_large_size":
  1053546.717 ±(99.9%) 1941.157 ops/s [Average]
  (min, avg, max) = (1046249.193, 1053546.717, 1057941.988), stdev = 2905.433
  CI (99.9%): [1051605.560, 1055487.874] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_chunk_large_size  thrpt   30  1053546.717 ± 1941.157  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_chunk_single$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_chunk_single

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1956065.524 ops/s
# Warmup Iteration   2: 5023881.182 ops/s
# Warmup Iteration   3: 5058459.333 ops/s
# Warmup Iteration   4: 4241749.701 ops/s
# Warmup Iteration   5: 5063374.398 ops/s
# Warmup Iteration   6: 5023496.988 ops/s
# Warmup Iteration   7: 5076584.342 ops/s
# Warmup Iteration   8: 5091100.285 ops/s
# Warmup Iteration   9: 5096388.951 ops/s
# Warmup Iteration  10: 5087063.106 ops/s
# Warmup Iteration  11: 5090442.489 ops/s
# Warmup Iteration  12: 5099742.634 ops/s
# Warmup Iteration  13: 5094450.689 ops/s
# Warmup Iteration  14: 5096157.283 ops/s
# Warmup Iteration  15: 5072735.726 ops/s
# Warmup Iteration  16: 5092834.629 ops/s
# Warmup Iteration  17: 5050950.945 ops/s
# Warmup Iteration  18: 5062541.861 ops/s
# Warmup Iteration  19: 5042865.399 ops/s
# Warmup Iteration  20: 5043422.092 ops/s
# Warmup Iteration  21: 5050781.226 ops/s
# Warmup Iteration  22: 5051661.223 ops/s
# Warmup Iteration  23: 5031278.599 ops/s
# Warmup Iteration  24: 5037584.785 ops/s
# Warmup Iteration  25: 5034300.095 ops/s
# Warmup Iteration  26: 5062686.891 ops/s
# Warmup Iteration  27: 5054413.882 ops/s
# Warmup Iteration  28: 5055947.921 ops/s
# Warmup Iteration  29: 5041944.884 ops/s
# Warmup Iteration  30: 5045224.625 ops/s
Iteration   1: 5080394.283 ops/s
Iteration   2: 5090215.617 ops/s
Iteration   3: 5090093.347 ops/s
Iteration   4: 5031673.417 ops/s
Iteration   5: 5037588.399 ops/s
Iteration   6: 5028276.561 ops/s
Iteration   7: 5022576.335 ops/s
Iteration   8: 5035345.978 ops/s
Iteration   9: 5024704.963 ops/s
Iteration  10: 5046984.165 ops/s
Iteration  11: 5041422.236 ops/s
Iteration  12: 5053885.409 ops/s
Iteration  13: 5050721.214 ops/s
Iteration  14: 5054635.278 ops/s
Iteration  15: 5070526.585 ops/s
Iteration  16: 5072154.322 ops/s
Iteration  17: 5067158.974 ops/s
Iteration  18: 5065551.797 ops/s
Iteration  19: 5085784.944 ops/s
Iteration  20: 5078152.738 ops/s
Iteration  21: 5070789.446 ops/s
Iteration  22: 5089318.160 ops/s
Iteration  23: 5034609.387 ops/s
Iteration  24: 5037269.731 ops/s
Iteration  25: 5039746.550 ops/s
Iteration  26: 5039962.743 ops/s
Iteration  27: 5043546.871 ops/s
Iteration  28: 5040684.327 ops/s
Iteration  29: 5055452.887 ops/s
Iteration  30: 5045909.725 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_chunk_single":
  5054171.213 ±(99.9%) 13923.132 ops/s [Average]
  (min, avg, max) = (5022576.335, 5054171.213, 5090215.617), stdev = 20839.490
  CI (99.9%): [5040248.081, 5068094.345] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
TreeBagTest._Benchmark.benchmark_chunk_single  thrpt   30  5054171.213 ± 13923.132  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 501292.180 ops/s
# Warmup Iteration   2: 600838.592 ops/s
# Warmup Iteration   3: 745042.507 ops/s
# Warmup Iteration   4: 742695.928 ops/s
# Warmup Iteration   5: 743592.491 ops/s
# Warmup Iteration   6: 745253.041 ops/s
# Warmup Iteration   7: 745150.703 ops/s
# Warmup Iteration   8: 743347.369 ops/s
# Warmup Iteration   9: 684226.608 ops/s
# Warmup Iteration  10: 694738.403 ops/s
# Warmup Iteration  11: 746441.929 ops/s
# Warmup Iteration  12: 743653.110 ops/s
# Warmup Iteration  13: 744136.918 ops/s
# Warmup Iteration  14: 741966.071 ops/s
# Warmup Iteration  15: 742664.946 ops/s
# Warmup Iteration  16: 740358.570 ops/s
# Warmup Iteration  17: 781255.123 ops/s
# Warmup Iteration  18: 780871.964 ops/s
# Warmup Iteration  19: 780075.666 ops/s
# Warmup Iteration  20: 780237.562 ops/s
# Warmup Iteration  21: 778494.799 ops/s
# Warmup Iteration  22: 780383.874 ops/s
# Warmup Iteration  23: 781844.952 ops/s
# Warmup Iteration  24: 778467.310 ops/s
# Warmup Iteration  25: 778730.872 ops/s
# Warmup Iteration  26: 781511.406 ops/s
# Warmup Iteration  27: 776701.760 ops/s
# Warmup Iteration  28: 780535.538 ops/s
# Warmup Iteration  29: 779638.761 ops/s
# Warmup Iteration  30: 777217.550 ops/s
Iteration   1: 779462.095 ops/s
Iteration   2: 780172.042 ops/s
Iteration   3: 779469.034 ops/s
Iteration   4: 780633.869 ops/s
Iteration   5: 779164.856 ops/s
Iteration   6: 782819.496 ops/s
Iteration   7: 785406.044 ops/s
Iteration   8: 774617.864 ops/s
Iteration   9: 780293.865 ops/s
Iteration  10: 779982.258 ops/s
Iteration  11: 782157.823 ops/s
Iteration  12: 783226.684 ops/s
Iteration  13: 782299.818 ops/s
Iteration  14: 779367.880 ops/s
Iteration  15: 780352.081 ops/s
Iteration  16: 781217.188 ops/s
Iteration  17: 780033.930 ops/s
Iteration  18: 778993.346 ops/s
Iteration  19: 783272.422 ops/s
Iteration  20: 780400.419 ops/s
Iteration  21: 784996.427 ops/s
Iteration  22: 777797.073 ops/s
Iteration  23: 777740.141 ops/s
Iteration  24: 779263.624 ops/s
Iteration  25: 783529.606 ops/s
Iteration  26: 781219.315 ops/s
Iteration  27: 775841.814 ops/s
Iteration  28: 777770.771 ops/s
Iteration  29: 782493.316 ops/s
Iteration  30: 781380.169 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_chunk_zero_throws":
  780512.509 ±(99.9%) 1636.946 ops/s [Average]
  (min, avg, max) = (774617.864, 780512.509, 785406.044), stdev = 2450.104
  CI (99.9%): [778875.563, 782149.455] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  780512.509 ± 1636.946  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2476858.973 ops/s
# Warmup Iteration   2: 5409091.551 ops/s
# Warmup Iteration   3: 5443830.086 ops/s
# Warmup Iteration   4: 4606317.301 ops/s
# Warmup Iteration   5: 5453304.141 ops/s
# Warmup Iteration   6: 5457699.461 ops/s
# Warmup Iteration   7: 5456111.632 ops/s
# Warmup Iteration   8: 5459365.041 ops/s
# Warmup Iteration   9: 5468466.925 ops/s
# Warmup Iteration  10: 5459703.778 ops/s
# Warmup Iteration  11: 5437637.954 ops/s
# Warmup Iteration  12: 5460299.867 ops/s
# Warmup Iteration  13: 5437271.632 ops/s
# Warmup Iteration  14: 5457104.394 ops/s
# Warmup Iteration  15: 5438900.522 ops/s
# Warmup Iteration  16: 5450567.480 ops/s
# Warmup Iteration  17: 5455391.771 ops/s
# Warmup Iteration  18: 5450333.482 ops/s
# Warmup Iteration  19: 5457640.173 ops/s
# Warmup Iteration  20: 5449174.410 ops/s
# Warmup Iteration  21: 5462551.640 ops/s
# Warmup Iteration  22: 5464013.599 ops/s
# Warmup Iteration  23: 5468570.053 ops/s
# Warmup Iteration  24: 5455595.458 ops/s
# Warmup Iteration  25: 5452603.258 ops/s
# Warmup Iteration  26: 5457886.469 ops/s
# Warmup Iteration  27: 5462087.389 ops/s
# Warmup Iteration  28: 5464515.602 ops/s
# Warmup Iteration  29: 5458042.962 ops/s
# Warmup Iteration  30: 5442149.421 ops/s
Iteration   1: 5441817.830 ops/s
Iteration   2: 5448598.587 ops/s
Iteration   3: 5451948.417 ops/s
Iteration   4: 5460324.599 ops/s
Iteration   5: 5459380.684 ops/s
Iteration   6: 5466806.335 ops/s
Iteration   7: 5452927.042 ops/s
Iteration   8: 5437332.974 ops/s
Iteration   9: 5465720.432 ops/s
Iteration  10: 5466228.547 ops/s
Iteration  11: 5467612.109 ops/s
Iteration  12: 5452333.144 ops/s
Iteration  13: 5444752.700 ops/s
Iteration  14: 5441303.714 ops/s
Iteration  15: 5464844.247 ops/s
Iteration  16: 5456655.546 ops/s
Iteration  17: 5443109.843 ops/s
Iteration  18: 5465750.447 ops/s
Iteration  19: 5467677.324 ops/s
Iteration  20: 5466095.840 ops/s
Iteration  21: 5459578.913 ops/s
Iteration  22: 5455372.975 ops/s
Iteration  23: 5456178.186 ops/s
Iteration  24: 5464313.307 ops/s
Iteration  25: 5440101.427 ops/s
Iteration  26: 5448833.253 ops/s
Iteration  27: 5421232.138 ops/s
Iteration  28: 5438066.402 ops/s
Iteration  29: 5458583.617 ops/s
Iteration  30: 5467559.232 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_clear":
  5454367.994 ±(99.9%) 7868.586 ops/s [Average]
  (min, avg, max) = (5421232.138, 5454367.994, 5467677.324), stdev = 11777.330
  CI (99.9%): [5446499.408, 5462236.580] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_clear  thrpt   30  5454367.994 ± 7868.586  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 346223.059 ops/s
# Warmup Iteration   2: 679947.653 ops/s
# Warmup Iteration   3: 748883.065 ops/s
# Warmup Iteration   4: 753802.598 ops/s
# Warmup Iteration   5: 649030.265 ops/s
# Warmup Iteration   6: 740987.375 ops/s
# Warmup Iteration   7: 759268.215 ops/s
# Warmup Iteration   8: 757288.682 ops/s
# Warmup Iteration   9: 752424.126 ops/s
# Warmup Iteration  10: 754630.223 ops/s
# Warmup Iteration  11: 755731.697 ops/s
# Warmup Iteration  12: 754251.131 ops/s
# Warmup Iteration  13: 752050.086 ops/s
# Warmup Iteration  14: 755522.590 ops/s
# Warmup Iteration  15: 756374.494 ops/s
# Warmup Iteration  16: 754973.408 ops/s
# Warmup Iteration  17: 757470.842 ops/s
# Warmup Iteration  18: 755149.864 ops/s
# Warmup Iteration  19: 755611.479 ops/s
# Warmup Iteration  20: 755879.276 ops/s
# Warmup Iteration  21: 754624.836 ops/s
# Warmup Iteration  22: 753767.982 ops/s
# Warmup Iteration  23: 757948.041 ops/s
# Warmup Iteration  24: 758944.342 ops/s
# Warmup Iteration  25: 754756.361 ops/s
# Warmup Iteration  26: 755018.805 ops/s
# Warmup Iteration  27: 757008.924 ops/s
# Warmup Iteration  28: 754313.021 ops/s
# Warmup Iteration  29: 754274.096 ops/s
# Warmup Iteration  30: 753531.460 ops/s
Iteration   1: 755922.235 ops/s
Iteration   2: 754572.693 ops/s
Iteration   3: 755131.715 ops/s
Iteration   4: 751260.365 ops/s
Iteration   5: 750445.347 ops/s
Iteration   6: 756257.330 ops/s
Iteration   7: 753562.715 ops/s
Iteration   8: 753470.436 ops/s
Iteration   9: 754267.893 ops/s
Iteration  10: 756790.450 ops/s
Iteration  11: 756568.081 ops/s
Iteration  12: 754900.361 ops/s
Iteration  13: 757854.748 ops/s
Iteration  14: 761141.297 ops/s
Iteration  15: 758161.813 ops/s
Iteration  16: 758687.273 ops/s
Iteration  17: 757902.780 ops/s
Iteration  18: 752052.775 ops/s
Iteration  19: 754318.172 ops/s
Iteration  20: 750894.534 ops/s
Iteration  21: 752789.406 ops/s
Iteration  22: 753197.743 ops/s
Iteration  23: 749989.956 ops/s
Iteration  24: 748406.570 ops/s
Iteration  25: 758839.761 ops/s
Iteration  26: 751799.497 ops/s
Iteration  27: 754553.336 ops/s
Iteration  28: 756580.254 ops/s
Iteration  29: 757707.119 ops/s
Iteration  30: 757424.754 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collect":
  754848.380 ±(99.9%) 2033.984 ops/s [Average]
  (min, avg, max) = (748406.570, 754848.380, 761141.297), stdev = 3044.372
  CI (99.9%): [752814.396, 756882.364] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_collect  thrpt   30  754848.380 ± 2033.984  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 725936.927 ops/s
# Warmup Iteration   2: 1247279.938 ops/s
# Warmup Iteration   3: 1444199.257 ops/s
# Warmup Iteration   4: 1447583.591 ops/s
# Warmup Iteration   5: 1441644.908 ops/s
# Warmup Iteration   6: 1209960.051 ops/s
# Warmup Iteration   7: 1445471.433 ops/s
# Warmup Iteration   8: 1445740.902 ops/s
# Warmup Iteration   9: 1446587.903 ops/s
# Warmup Iteration  10: 1445038.319 ops/s
# Warmup Iteration  11: 1439339.703 ops/s
# Warmup Iteration  12: 1443403.121 ops/s
# Warmup Iteration  13: 1443341.275 ops/s
# Warmup Iteration  14: 1442530.194 ops/s
# Warmup Iteration  15: 1443517.550 ops/s
# Warmup Iteration  16: 1437965.460 ops/s
# Warmup Iteration  17: 1447661.582 ops/s
# Warmup Iteration  18: 1446208.405 ops/s
# Warmup Iteration  19: 1446792.979 ops/s
# Warmup Iteration  20: 1444641.094 ops/s
# Warmup Iteration  21: 1447033.795 ops/s
# Warmup Iteration  22: 1447588.634 ops/s
# Warmup Iteration  23: 1448626.067 ops/s
# Warmup Iteration  24: 1446537.693 ops/s
# Warmup Iteration  25: 1444463.668 ops/s
# Warmup Iteration  26: 1447000.178 ops/s
# Warmup Iteration  27: 1446701.778 ops/s
# Warmup Iteration  28: 1448116.855 ops/s
# Warmup Iteration  29: 1447870.261 ops/s
# Warmup Iteration  30: 1449928.501 ops/s
Iteration   1: 1449128.733 ops/s
Iteration   2: 1446550.626 ops/s
Iteration   3: 1450877.040 ops/s
Iteration   4: 1447111.141 ops/s
Iteration   5: 1449623.921 ops/s
Iteration   6: 1445811.533 ops/s
Iteration   7: 1448431.566 ops/s
Iteration   8: 1450123.937 ops/s
Iteration   9: 1447606.608 ops/s
Iteration  10: 1450276.249 ops/s
Iteration  11: 1450292.301 ops/s
Iteration  12: 1453193.267 ops/s
Iteration  13: 1446575.068 ops/s
Iteration  14: 1449061.153 ops/s
Iteration  15: 1450477.566 ops/s
Iteration  16: 1456168.117 ops/s
Iteration  17: 1450460.243 ops/s
Iteration  18: 1450153.231 ops/s
Iteration  19: 1455781.016 ops/s
Iteration  20: 1451506.128 ops/s
Iteration  21: 1454451.602 ops/s
Iteration  22: 1445458.867 ops/s
Iteration  23: 1453691.867 ops/s
Iteration  24: 1450340.827 ops/s
Iteration  25: 1456340.886 ops/s
Iteration  26: 1452814.722 ops/s
Iteration  27: 1453461.416 ops/s
Iteration  28: 1447623.581 ops/s
Iteration  29: 1452140.339 ops/s
Iteration  30: 1447524.297 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectBoolean":
  1450435.262 ±(99.9%) 2037.840 ops/s [Average]
  (min, avg, max) = (1445458.867, 1450435.262, 1456340.886), stdev = 3050.143
  CI (99.9%): [1448397.422, 1452473.101] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectBoolean  thrpt   30  1450435.262 ± 2037.840  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectBooleanWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectBooleanWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2509841.303 ops/s
# Warmup Iteration   2: 4975461.052 ops/s
# Warmup Iteration   3: 5239026.331 ops/s
# Warmup Iteration   4: 5243169.269 ops/s
# Warmup Iteration   5: 4445122.610 ops/s
# Warmup Iteration   6: 5301114.338 ops/s
# Warmup Iteration   7: 5305933.304 ops/s
# Warmup Iteration   8: 5321938.602 ops/s
# Warmup Iteration   9: 5321243.806 ops/s
# Warmup Iteration  10: 5298426.863 ops/s
# Warmup Iteration  11: 5313663.130 ops/s
# Warmup Iteration  12: 5310796.202 ops/s
# Warmup Iteration  13: 5307124.662 ops/s
# Warmup Iteration  14: 5298810.784 ops/s
# Warmup Iteration  15: 5292537.835 ops/s
# Warmup Iteration  16: 5298111.563 ops/s
# Warmup Iteration  17: 5301791.676 ops/s
# Warmup Iteration  18: 5299856.308 ops/s
# Warmup Iteration  19: 5296354.881 ops/s
# Warmup Iteration  20: 5306534.447 ops/s
# Warmup Iteration  21: 5311160.428 ops/s
# Warmup Iteration  22: 5301037.164 ops/s
# Warmup Iteration  23: 5305199.990 ops/s
# Warmup Iteration  24: 5300380.159 ops/s
# Warmup Iteration  25: 5303414.481 ops/s
# Warmup Iteration  26: 5308195.825 ops/s
# Warmup Iteration  27: 5313863.382 ops/s
# Warmup Iteration  28: 5298086.053 ops/s
# Warmup Iteration  29: 5308293.262 ops/s
# Warmup Iteration  30: 5306889.153 ops/s
Iteration   1: 5299261.398 ops/s
Iteration   2: 5307801.719 ops/s
Iteration   3: 5310501.765 ops/s
Iteration   4: 5295439.453 ops/s
Iteration   5: 5310123.406 ops/s
Iteration   6: 5292275.478 ops/s
Iteration   7: 5309586.326 ops/s
Iteration   8: 5304764.696 ops/s
Iteration   9: 5313390.954 ops/s
Iteration  10: 5283304.260 ops/s
Iteration  11: 5301835.068 ops/s
Iteration  12: 5326821.140 ops/s
Iteration  13: 5297873.018 ops/s
Iteration  14: 5293942.789 ops/s
Iteration  15: 5296412.619 ops/s
Iteration  16: 5304776.539 ops/s
Iteration  17: 5305059.413 ops/s
Iteration  18: 5316983.748 ops/s
Iteration  19: 5303426.949 ops/s
Iteration  20: 5303036.899 ops/s
Iteration  21: 5307306.636 ops/s
Iteration  22: 5289224.181 ops/s
Iteration  23: 5300148.993 ops/s
Iteration  24: 5312639.289 ops/s
Iteration  25: 5312560.028 ops/s
Iteration  26: 5307912.364 ops/s
Iteration  27: 5312336.038 ops/s
Iteration  28: 5303085.307 ops/s
Iteration  29: 5310788.911 ops/s
Iteration  30: 5286005.140 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectBooleanWithBagTarget":
  5303954.151 ±(99.9%) 6346.163 ops/s [Average]
  (min, avg, max) = (5283304.260, 5303954.151, 5326821.140), stdev = 9498.638
  CI (99.9%): [5297607.988, 5310300.314] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectBooleanWithBagTarget  thrpt   30  5303954.151 ± 6346.163  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1980687.397 ops/s
# Warmup Iteration   2: 3455154.184 ops/s
# Warmup Iteration   3: 3854193.821 ops/s
# Warmup Iteration   4: 3883901.213 ops/s
# Warmup Iteration   5: 3875659.562 ops/s
# Warmup Iteration   6: 3246900.238 ops/s
# Warmup Iteration   7: 3873542.721 ops/s
# Warmup Iteration   8: 3881660.258 ops/s
# Warmup Iteration   9: 3881991.098 ops/s
# Warmup Iteration  10: 3882615.450 ops/s
# Warmup Iteration  11: 3885329.255 ops/s
# Warmup Iteration  12: 3859176.622 ops/s
# Warmup Iteration  13: 3872324.759 ops/s
# Warmup Iteration  14: 3852987.854 ops/s
# Warmup Iteration  15: 3868818.315 ops/s
# Warmup Iteration  16: 3859477.306 ops/s
# Warmup Iteration  17: 3878682.329 ops/s
# Warmup Iteration  18: 3858452.511 ops/s
# Warmup Iteration  19: 3889545.895 ops/s
# Warmup Iteration  20: 3878828.359 ops/s
# Warmup Iteration  21: 3851937.156 ops/s
# Warmup Iteration  22: 3877627.380 ops/s
# Warmup Iteration  23: 3876365.598 ops/s
# Warmup Iteration  24: 3870918.536 ops/s
# Warmup Iteration  25: 3876447.208 ops/s
# Warmup Iteration  26: 3883658.048 ops/s
# Warmup Iteration  27: 3888956.893 ops/s
# Warmup Iteration  28: 3893229.181 ops/s
# Warmup Iteration  29: 3869322.890 ops/s
# Warmup Iteration  30: 3887057.845 ops/s
Iteration   1: 3880440.126 ops/s
Iteration   2: 3875774.670 ops/s
Iteration   3: 3893047.866 ops/s
Iteration   4: 3892888.340 ops/s
Iteration   5: 3884241.355 ops/s
Iteration   6: 3889318.544 ops/s
Iteration   7: 3843466.758 ops/s
Iteration   8: 3881102.203 ops/s
Iteration   9: 3883997.680 ops/s
Iteration  10: 3884742.474 ops/s
Iteration  11: 3896168.582 ops/s
Iteration  12: 3881729.412 ops/s
Iteration  13: 3894784.524 ops/s
Iteration  14: 3875455.047 ops/s
Iteration  15: 3878838.398 ops/s
Iteration  16: 3886981.358 ops/s
Iteration  17: 3888169.498 ops/s
Iteration  18: 3886453.906 ops/s
Iteration  19: 3882144.100 ops/s
Iteration  20: 3887320.952 ops/s
Iteration  21: 3878784.288 ops/s
Iteration  22: 3858305.267 ops/s
Iteration  23: 3869012.821 ops/s
Iteration  24: 3860650.172 ops/s
Iteration  25: 3877047.013 ops/s
Iteration  26: 3863608.734 ops/s
Iteration  27: 3884708.136 ops/s
Iteration  28: 3848338.792 ops/s
Iteration  29: 3881427.294 ops/s
Iteration  30: 3874965.808 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectBooleanWithTarget":
  3878797.137 ±(99.9%) 8601.916 ops/s [Average]
  (min, avg, max) = (3843466.758, 3878797.137, 3896168.582), stdev = 12874.943
  CI (99.9%): [3870195.222, 3887399.053] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  3878797.137 ± 8601.916  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 412162.093 ops/s
# Warmup Iteration   2: 790475.245 ops/s
# Warmup Iteration   3: 857334.161 ops/s
# Warmup Iteration   4: 864993.647 ops/s
# Warmup Iteration   5: 747303.695 ops/s
# Warmup Iteration   6: 850620.829 ops/s
# Warmup Iteration   7: 863827.882 ops/s
# Warmup Iteration   8: 861013.359 ops/s
# Warmup Iteration   9: 860690.718 ops/s
# Warmup Iteration  10: 860391.595 ops/s
# Warmup Iteration  11: 865354.223 ops/s
# Warmup Iteration  12: 861779.334 ops/s
# Warmup Iteration  13: 867195.257 ops/s
# Warmup Iteration  14: 868460.170 ops/s
# Warmup Iteration  15: 866981.754 ops/s
# Warmup Iteration  16: 864865.629 ops/s
# Warmup Iteration  17: 864031.990 ops/s
# Warmup Iteration  18: 865243.013 ops/s
# Warmup Iteration  19: 864098.641 ops/s
# Warmup Iteration  20: 862643.438 ops/s
# Warmup Iteration  21: 867008.086 ops/s
# Warmup Iteration  22: 865691.748 ops/s
# Warmup Iteration  23: 867656.393 ops/s
# Warmup Iteration  24: 867547.617 ops/s
# Warmup Iteration  25: 867850.294 ops/s
# Warmup Iteration  26: 864771.672 ops/s
# Warmup Iteration  27: 864066.745 ops/s
# Warmup Iteration  28: 860668.674 ops/s
# Warmup Iteration  29: 864348.086 ops/s
# Warmup Iteration  30: 864155.756 ops/s
Iteration   1: 859743.269 ops/s
Iteration   2: 864980.487 ops/s
Iteration   3: 867364.218 ops/s
Iteration   4: 863217.678 ops/s
Iteration   5: 867545.708 ops/s
Iteration   6: 863886.310 ops/s
Iteration   7: 864356.725 ops/s
Iteration   8: 868578.450 ops/s
Iteration   9: 866747.586 ops/s
Iteration  10: 866775.872 ops/s
Iteration  11: 869974.811 ops/s
Iteration  12: 865762.966 ops/s
Iteration  13: 868523.623 ops/s
Iteration  14: 867859.389 ops/s
Iteration  15: 870934.331 ops/s
Iteration  16: 871215.530 ops/s
Iteration  17: 871239.882 ops/s
Iteration  18: 863713.863 ops/s
Iteration  19: 868625.459 ops/s
Iteration  20: 868834.841 ops/s
Iteration  21: 870032.910 ops/s
Iteration  22: 870867.267 ops/s
Iteration  23: 869518.065 ops/s
Iteration  24: 868165.828 ops/s
Iteration  25: 867815.134 ops/s
Iteration  26: 867552.960 ops/s
Iteration  27: 866090.568 ops/s
Iteration  28: 872085.601 ops/s
Iteration  29: 870077.405 ops/s
Iteration  30: 871305.951 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectByte":
  867779.756 ±(99.9%) 1928.097 ops/s [Average]
  (min, avg, max) = (859743.269, 867779.756, 872085.601), stdev = 2885.885
  CI (99.9%): [865851.659, 869707.853] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectByte  thrpt   30  867779.756 ± 1928.097  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectByteWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectByteWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 997350.535 ops/s
# Warmup Iteration   2: 2307928.708 ops/s
# Warmup Iteration   3: 2394301.078 ops/s
# Warmup Iteration   4: 1999030.315 ops/s
# Warmup Iteration   5: 2394649.331 ops/s
# Warmup Iteration   6: 2392549.945 ops/s
# Warmup Iteration   7: 2387458.040 ops/s
# Warmup Iteration   8: 2388144.032 ops/s
# Warmup Iteration   9: 2388047.902 ops/s
# Warmup Iteration  10: 2390012.737 ops/s
# Warmup Iteration  11: 2397415.249 ops/s
# Warmup Iteration  12: 2387280.426 ops/s
# Warmup Iteration  13: 2387651.307 ops/s
# Warmup Iteration  14: 2389538.961 ops/s
# Warmup Iteration  15: 2395122.454 ops/s
# Warmup Iteration  16: 2389210.439 ops/s
# Warmup Iteration  17: 2392354.104 ops/s
# Warmup Iteration  18: 2399098.214 ops/s
# Warmup Iteration  19: 2399943.912 ops/s
# Warmup Iteration  20: 2398252.902 ops/s
# Warmup Iteration  21: 2398620.647 ops/s
# Warmup Iteration  22: 2403018.033 ops/s
# Warmup Iteration  23: 2403448.633 ops/s
# Warmup Iteration  24: 2398063.130 ops/s
# Warmup Iteration  25: 2408512.401 ops/s
# Warmup Iteration  26: 2404195.310 ops/s
# Warmup Iteration  27: 2404740.547 ops/s
# Warmup Iteration  28: 2404782.844 ops/s
# Warmup Iteration  29: 2398979.174 ops/s
# Warmup Iteration  30: 2401581.870 ops/s
Iteration   1: 2362860.517 ops/s
Iteration   2: 2399710.910 ops/s
Iteration   3: 2407879.766 ops/s
Iteration   4: 2401512.742 ops/s
Iteration   5: 2401604.288 ops/s
Iteration   6: 2393383.549 ops/s
Iteration   7: 2403271.569 ops/s
Iteration   8: 2403580.461 ops/s
Iteration   9: 2403143.380 ops/s
Iteration  10: 2402413.883 ops/s
Iteration  11: 2404110.828 ops/s
Iteration  12: 2404728.864 ops/s
Iteration  13: 2400101.829 ops/s
Iteration  14: 2405119.353 ops/s
Iteration  15: 2394668.094 ops/s
Iteration  16: 2405265.638 ops/s
Iteration  17: 2363171.954 ops/s
Iteration  18: 2403920.143 ops/s
Iteration  19: 2406554.794 ops/s
Iteration  20: 2403763.920 ops/s
Iteration  21: 2398216.212 ops/s
Iteration  22: 2400703.044 ops/s
Iteration  23: 2404425.803 ops/s
Iteration  24: 2406123.628 ops/s
Iteration  25: 2404424.160 ops/s
Iteration  26: 2401369.447 ops/s
Iteration  27: 2405344.360 ops/s
Iteration  28: 2386894.282 ops/s
Iteration  29: 2403321.461 ops/s
Iteration  30: 2407199.941 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectByteWithBagTarget":
  2399626.294 ±(99.9%) 7256.546 ops/s [Average]
  (min, avg, max) = (2362860.517, 2399626.294, 2407879.766), stdev = 10861.258
  CI (99.9%): [2392369.748, 2406882.840] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectByteWithBagTarget  thrpt   30  2399626.294 ± 7256.546  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 918290.220 ops/s
# Warmup Iteration   2: 2011586.073 ops/s
# Warmup Iteration   3: 2102294.360 ops/s
# Warmup Iteration   4: 2118887.405 ops/s
# Warmup Iteration   5: 1775799.314 ops/s
# Warmup Iteration   6: 2117783.672 ops/s
# Warmup Iteration   7: 2117546.328 ops/s
# Warmup Iteration   8: 2120594.440 ops/s
# Warmup Iteration   9: 2119866.053 ops/s
# Warmup Iteration  10: 2122087.552 ops/s
# Warmup Iteration  11: 2114919.379 ops/s
# Warmup Iteration  12: 2122408.327 ops/s
# Warmup Iteration  13: 2116082.697 ops/s
# Warmup Iteration  14: 2117821.801 ops/s
# Warmup Iteration  15: 2110833.924 ops/s
# Warmup Iteration  16: 2116106.058 ops/s
# Warmup Iteration  17: 2093536.337 ops/s
# Warmup Iteration  18: 2105504.887 ops/s
# Warmup Iteration  19: 2104635.157 ops/s
# Warmup Iteration  20: 2106753.940 ops/s
# Warmup Iteration  21: 2096305.420 ops/s
# Warmup Iteration  22: 2102466.574 ops/s
# Warmup Iteration  23: 2102265.187 ops/s
# Warmup Iteration  24: 2101606.685 ops/s
# Warmup Iteration  25: 2104948.835 ops/s
# Warmup Iteration  26: 2100445.643 ops/s
# Warmup Iteration  27: 2106504.362 ops/s
# Warmup Iteration  28: 2105214.007 ops/s
# Warmup Iteration  29: 2104900.704 ops/s
# Warmup Iteration  30: 2102301.623 ops/s
Iteration   1: 2110687.944 ops/s
Iteration   2: 2101435.820 ops/s
Iteration   3: 2107891.465 ops/s
Iteration   4: 2102585.784 ops/s
Iteration   5: 2107712.043 ops/s
Iteration   6: 2104508.108 ops/s
Iteration   7: 2104168.597 ops/s
Iteration   8: 2095734.636 ops/s
Iteration   9: 2084434.470 ops/s
Iteration  10: 2103339.656 ops/s
Iteration  11: 2103651.274 ops/s
Iteration  12: 2104310.531 ops/s
Iteration  13: 2105833.933 ops/s
Iteration  14: 2101514.619 ops/s
Iteration  15: 2099850.032 ops/s
Iteration  16: 2100938.491 ops/s
Iteration  17: 2094941.611 ops/s
Iteration  18: 2093887.323 ops/s
Iteration  19: 2090037.424 ops/s
Iteration  20: 2108524.528 ops/s
Iteration  21: 2103131.734 ops/s
Iteration  22: 2097643.737 ops/s
Iteration  23: 2102992.267 ops/s
Iteration  24: 2105001.837 ops/s
Iteration  25: 2098652.208 ops/s
Iteration  26: 2107572.961 ops/s
Iteration  27: 2104743.752 ops/s
Iteration  28: 2106711.636 ops/s
Iteration  29: 2107859.441 ops/s
Iteration  30: 2105869.517 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectByteWithTarget":
  2102205.579 ±(99.9%) 3892.597 ops/s [Average]
  (min, avg, max) = (2084434.470, 2102205.579, 2110687.944), stdev = 5826.256
  CI (99.9%): [2098312.982, 2106098.176] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  2102205.579 ± 3892.597  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 406521.489 ops/s
# Warmup Iteration   2: 794743.382 ops/s
# Warmup Iteration   3: 855597.268 ops/s
# Warmup Iteration   4: 859571.797 ops/s
# Warmup Iteration   5: 722242.981 ops/s
# Warmup Iteration   6: 862355.023 ops/s
# Warmup Iteration   7: 863047.179 ops/s
# Warmup Iteration   8: 859292.231 ops/s
# Warmup Iteration   9: 862839.866 ops/s
# Warmup Iteration  10: 863277.013 ops/s
# Warmup Iteration  11: 864242.346 ops/s
# Warmup Iteration  12: 862200.846 ops/s
# Warmup Iteration  13: 865197.388 ops/s
# Warmup Iteration  14: 862974.778 ops/s
# Warmup Iteration  15: 863831.459 ops/s
# Warmup Iteration  16: 865150.577 ops/s
# Warmup Iteration  17: 858309.098 ops/s
# Warmup Iteration  18: 864131.295 ops/s
# Warmup Iteration  19: 862123.399 ops/s
# Warmup Iteration  20: 863898.569 ops/s
# Warmup Iteration  21: 864476.031 ops/s
# Warmup Iteration  22: 862609.786 ops/s
# Warmup Iteration  23: 861042.480 ops/s
# Warmup Iteration  24: 864699.991 ops/s
# Warmup Iteration  25: 863148.335 ops/s
# Warmup Iteration  26: 862600.502 ops/s
# Warmup Iteration  27: 860696.540 ops/s
# Warmup Iteration  28: 865958.940 ops/s
# Warmup Iteration  29: 863063.957 ops/s
# Warmup Iteration  30: 864021.687 ops/s
Iteration   1: 864700.139 ops/s
Iteration   2: 865377.560 ops/s
Iteration   3: 864845.480 ops/s
Iteration   4: 858504.340 ops/s
Iteration   5: 863485.070 ops/s
Iteration   6: 860467.784 ops/s
Iteration   7: 868065.291 ops/s
Iteration   8: 865580.227 ops/s
Iteration   9: 865177.165 ops/s
Iteration  10: 867859.005 ops/s
Iteration  11: 866639.965 ops/s
Iteration  12: 866099.996 ops/s
Iteration  13: 866926.594 ops/s
Iteration  14: 864235.313 ops/s
Iteration  15: 855852.626 ops/s
Iteration  16: 859786.641 ops/s
Iteration  17: 860408.197 ops/s
Iteration  18: 857542.590 ops/s
Iteration  19: 862397.326 ops/s
Iteration  20: 858294.784 ops/s
Iteration  21: 856708.662 ops/s
Iteration  22: 861804.645 ops/s
Iteration  23: 861881.859 ops/s
Iteration  24: 857976.916 ops/s
Iteration  25: 856887.886 ops/s
Iteration  26: 861849.567 ops/s
Iteration  27: 863682.286 ops/s
Iteration  28: 861748.105 ops/s
Iteration  29: 861602.206 ops/s
Iteration  30: 861014.123 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectChar":
  862246.745 ±(99.9%) 2343.394 ops/s [Average]
  (min, avg, max) = (855852.626, 862246.745, 868065.291), stdev = 3507.483
  CI (99.9%): [859903.350, 864590.139] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectChar  thrpt   30  862246.745 ± 2343.394  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectCharWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectCharWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1054521.643 ops/s
# Warmup Iteration   2: 2655405.296 ops/s
# Warmup Iteration   3: 2677336.469 ops/s
# Warmup Iteration   4: 2233309.469 ops/s
# Warmup Iteration   5: 2687302.515 ops/s
# Warmup Iteration   6: 2684395.311 ops/s
# Warmup Iteration   7: 2690369.080 ops/s
# Warmup Iteration   8: 2681082.555 ops/s
# Warmup Iteration   9: 2692512.555 ops/s
# Warmup Iteration  10: 2691836.041 ops/s
# Warmup Iteration  11: 2686518.485 ops/s
# Warmup Iteration  12: 2688493.015 ops/s
# Warmup Iteration  13: 2692760.861 ops/s
# Warmup Iteration  14: 2692910.358 ops/s
# Warmup Iteration  15: 2697344.409 ops/s
# Warmup Iteration  16: 2691773.530 ops/s
# Warmup Iteration  17: 2684984.516 ops/s
# Warmup Iteration  18: 2678977.419 ops/s
# Warmup Iteration  19: 2680529.384 ops/s
# Warmup Iteration  20: 2681840.017 ops/s
# Warmup Iteration  21: 2683193.145 ops/s
# Warmup Iteration  22: 2674438.444 ops/s
# Warmup Iteration  23: 2678004.221 ops/s
# Warmup Iteration  24: 2677698.554 ops/s
# Warmup Iteration  25: 2679610.473 ops/s
# Warmup Iteration  26: 2683968.239 ops/s
# Warmup Iteration  27: 2679522.557 ops/s
# Warmup Iteration  28: 2681624.881 ops/s
# Warmup Iteration  29: 2670119.455 ops/s
# Warmup Iteration  30: 2675822.462 ops/s
Iteration   1: 2680327.805 ops/s
Iteration   2: 2669072.987 ops/s
Iteration   3: 2656933.135 ops/s
Iteration   4: 2683249.999 ops/s
Iteration   5: 2672884.193 ops/s
Iteration   6: 2665681.533 ops/s
Iteration   7: 2654052.748 ops/s
Iteration   8: 2675005.359 ops/s
Iteration   9: 2680431.359 ops/s
Iteration  10: 2673284.994 ops/s
Iteration  11: 2671342.476 ops/s
Iteration  12: 2681422.953 ops/s
Iteration  13: 2680854.045 ops/s
Iteration  14: 2677623.265 ops/s
Iteration  15: 2684715.070 ops/s
Iteration  16: 2680978.878 ops/s
Iteration  17: 2678197.772 ops/s
Iteration  18: 2678387.305 ops/s
Iteration  19: 2682008.844 ops/s
Iteration  20: 2683424.251 ops/s
Iteration  21: 2689655.774 ops/s
Iteration  22: 2673265.236 ops/s
Iteration  23: 2676014.646 ops/s
Iteration  24: 2672790.163 ops/s
Iteration  25: 2681968.637 ops/s
Iteration  26: 2681471.197 ops/s
Iteration  27: 2684667.665 ops/s
Iteration  28: 2679895.283 ops/s
Iteration  29: 2682098.981 ops/s
Iteration  30: 2683498.013 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectCharWithBagTarget":
  2677173.486 ±(99.9%) 5264.678 ops/s [Average]
  (min, avg, max) = (2654052.748, 2677173.486, 2689655.774), stdev = 7879.923
  CI (99.9%): [2671908.807, 2682438.164] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectCharWithBagTarget  thrpt   30  2677173.486 ± 5264.678  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 903601.275 ops/s
# Warmup Iteration   2: 2029912.379 ops/s
# Warmup Iteration   3: 2114505.375 ops/s
# Warmup Iteration   4: 1991312.559 ops/s
# Warmup Iteration   5: 1891782.929 ops/s
# Warmup Iteration   6: 2112928.932 ops/s
# Warmup Iteration   7: 2111361.220 ops/s
# Warmup Iteration   8: 2110517.705 ops/s
# Warmup Iteration   9: 2112797.343 ops/s
# Warmup Iteration  10: 2111080.719 ops/s
# Warmup Iteration  11: 2109630.561 ops/s
# Warmup Iteration  12: 2101259.864 ops/s
# Warmup Iteration  13: 2110075.346 ops/s
# Warmup Iteration  14: 2103847.081 ops/s
# Warmup Iteration  15: 2114343.938 ops/s
# Warmup Iteration  16: 2107091.172 ops/s
# Warmup Iteration  17: 2101966.729 ops/s
# Warmup Iteration  18: 2097039.112 ops/s
# Warmup Iteration  19: 2098155.355 ops/s
# Warmup Iteration  20: 2099813.386 ops/s
# Warmup Iteration  21: 2105648.722 ops/s
# Warmup Iteration  22: 2102510.891 ops/s
# Warmup Iteration  23: 2106944.969 ops/s
# Warmup Iteration  24: 2103184.331 ops/s
# Warmup Iteration  25: 2106007.723 ops/s
# Warmup Iteration  26: 2105165.819 ops/s
# Warmup Iteration  27: 2104593.428 ops/s
# Warmup Iteration  28: 2105904.747 ops/s
# Warmup Iteration  29: 2103568.280 ops/s
# Warmup Iteration  30: 2109583.462 ops/s
Iteration   1: 2097386.807 ops/s
Iteration   2: 2105564.594 ops/s
Iteration   3: 2101205.085 ops/s
Iteration   4: 2102371.329 ops/s
Iteration   5: 2102898.962 ops/s
Iteration   6: 2102651.273 ops/s
Iteration   7: 2105358.514 ops/s
Iteration   8: 2103320.388 ops/s
Iteration   9: 2111608.444 ops/s
Iteration  10: 2106986.176 ops/s
Iteration  11: 2104009.957 ops/s
Iteration  12: 2106659.511 ops/s
Iteration  13: 2101460.486 ops/s
Iteration  14: 2110484.087 ops/s
Iteration  15: 2095048.317 ops/s
Iteration  16: 2107469.474 ops/s
Iteration  17: 2107283.046 ops/s
Iteration  18: 2102926.597 ops/s
Iteration  19: 2104107.523 ops/s
Iteration  20: 2098477.798 ops/s
Iteration  21: 2100984.775 ops/s
Iteration  22: 2101358.301 ops/s
Iteration  23: 2104577.885 ops/s
Iteration  24: 2092504.814 ops/s
Iteration  25: 2099900.778 ops/s
Iteration  26: 2098658.378 ops/s
Iteration  27: 2102449.937 ops/s
Iteration  28: 2103775.037 ops/s
Iteration  29: 2096949.781 ops/s
Iteration  30: 2103627.901 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectCharWithTarget":
  2102735.532 ±(99.9%) 2821.430 ops/s [Average]
  (min, avg, max) = (2092504.814, 2102735.532, 2111608.444), stdev = 4222.984
  CI (99.9%): [2099914.102, 2105556.962] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  2102735.532 ± 2821.430  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 330653.735 ops/s
# Warmup Iteration   2: 676108.304 ops/s
# Warmup Iteration   3: 715536.768 ops/s
# Warmup Iteration   4: 717315.425 ops/s
# Warmup Iteration   5: 609088.012 ops/s
# Warmup Iteration   6: 720234.022 ops/s
# Warmup Iteration   7: 709524.342 ops/s
# Warmup Iteration   8: 723168.134 ops/s
# Warmup Iteration   9: 720146.190 ops/s
# Warmup Iteration  10: 720463.728 ops/s
# Warmup Iteration  11: 721682.233 ops/s
# Warmup Iteration  12: 720015.979 ops/s
# Warmup Iteration  13: 722472.354 ops/s
# Warmup Iteration  14: 721637.568 ops/s
# Warmup Iteration  15: 721182.678 ops/s
# Warmup Iteration  16: 722373.784 ops/s
# Warmup Iteration  17: 720343.003 ops/s
# Warmup Iteration  18: 720416.809 ops/s
# Warmup Iteration  19: 723231.557 ops/s
# Warmup Iteration  20: 722005.994 ops/s
# Warmup Iteration  21: 722790.086 ops/s
# Warmup Iteration  22: 720232.718 ops/s
# Warmup Iteration  23: 720616.031 ops/s
# Warmup Iteration  24: 720419.925 ops/s
# Warmup Iteration  25: 719925.909 ops/s
# Warmup Iteration  26: 719335.515 ops/s
# Warmup Iteration  27: 718055.010 ops/s
# Warmup Iteration  28: 717366.841 ops/s
# Warmup Iteration  29: 715875.559 ops/s
# Warmup Iteration  30: 719567.554 ops/s
Iteration   1: 718150.855 ops/s
Iteration   2: 723133.995 ops/s
Iteration   3: 721161.101 ops/s
Iteration   4: 719241.714 ops/s
Iteration   5: 721047.093 ops/s
Iteration   6: 723877.909 ops/s
Iteration   7: 720598.798 ops/s
Iteration   8: 721856.807 ops/s
Iteration   9: 721402.291 ops/s
Iteration  10: 718680.474 ops/s
Iteration  11: 720371.404 ops/s
Iteration  12: 720721.435 ops/s
Iteration  13: 721888.625 ops/s
Iteration  14: 717312.585 ops/s
Iteration  15: 723866.100 ops/s
Iteration  16: 723725.285 ops/s
Iteration  17: 719757.469 ops/s
Iteration  18: 723122.822 ops/s
Iteration  19: 721734.326 ops/s
Iteration  20: 722827.791 ops/s
Iteration  21: 719914.315 ops/s
Iteration  22: 725222.764 ops/s
Iteration  23: 723844.524 ops/s
Iteration  24: 721833.618 ops/s
Iteration  25: 722024.896 ops/s
Iteration  26: 718288.774 ops/s
Iteration  27: 724359.430 ops/s
Iteration  28: 721262.274 ops/s
Iteration  29: 725096.284 ops/s
Iteration  30: 721354.137 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectDouble":
  721589.330 ±(99.9%) 1386.985 ops/s [Average]
  (min, avg, max) = (717312.585, 721589.330, 725222.764), stdev = 2075.973
  CI (99.9%): [720202.345, 722976.314] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectDouble  thrpt   30  721589.330 ± 1386.985  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectDoubleWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectDoubleWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 857733.244 ops/s
# Warmup Iteration   2: 2127111.775 ops/s
# Warmup Iteration   3: 2173655.072 ops/s
# Warmup Iteration   4: 1813266.465 ops/s
# Warmup Iteration   5: 2171077.020 ops/s
# Warmup Iteration   6: 2162466.848 ops/s
# Warmup Iteration   7: 2167621.663 ops/s
# Warmup Iteration   8: 2163898.945 ops/s
# Warmup Iteration   9: 2174022.575 ops/s
# Warmup Iteration  10: 2170051.372 ops/s
# Warmup Iteration  11: 2175685.266 ops/s
# Warmup Iteration  12: 2167959.747 ops/s
# Warmup Iteration  13: 2172267.409 ops/s
# Warmup Iteration  14: 2175642.475 ops/s
# Warmup Iteration  15: 2173665.651 ops/s
# Warmup Iteration  16: 2175018.319 ops/s
# Warmup Iteration  17: 2177843.009 ops/s
# Warmup Iteration  18: 2177995.777 ops/s
# Warmup Iteration  19: 2178308.457 ops/s
# Warmup Iteration  20: 2172456.687 ops/s
# Warmup Iteration  21: 2176266.941 ops/s
# Warmup Iteration  22: 2178330.874 ops/s
# Warmup Iteration  23: 2178885.146 ops/s
# Warmup Iteration  24: 2182133.490 ops/s
# Warmup Iteration  25: 2179284.124 ops/s
# Warmup Iteration  26: 2177024.361 ops/s
# Warmup Iteration  27: 2180344.189 ops/s
# Warmup Iteration  28: 2176418.127 ops/s
# Warmup Iteration  29: 2181038.979 ops/s
# Warmup Iteration  30: 2173175.510 ops/s
Iteration   1: 2178023.452 ops/s
Iteration   2: 2188849.976 ops/s
Iteration   3: 2181458.311 ops/s
Iteration   4: 2180941.562 ops/s
Iteration   5: 2180769.829 ops/s
Iteration   6: 2172149.494 ops/s
Iteration   7: 2175721.839 ops/s
Iteration   8: 2176742.057 ops/s
Iteration   9: 2177691.622 ops/s
Iteration  10: 2180070.547 ops/s
Iteration  11: 2177341.611 ops/s
Iteration  12: 2170547.772 ops/s
Iteration  13: 2170160.505 ops/s
Iteration  14: 2176714.009 ops/s
Iteration  15: 2180263.513 ops/s
Iteration  16: 2176864.322 ops/s
Iteration  17: 2177379.965 ops/s
Iteration  18: 2162351.815 ops/s
Iteration  19: 2167619.588 ops/s
Iteration  20: 2176416.382 ops/s
Iteration  21: 2170525.104 ops/s
Iteration  22: 2179167.564 ops/s
Iteration  23: 2178918.080 ops/s
Iteration  24: 2179940.517 ops/s
Iteration  25: 2176629.522 ops/s
Iteration  26: 2178042.794 ops/s
Iteration  27: 2181776.614 ops/s
Iteration  28: 2174078.914 ops/s
Iteration  29: 2182678.219 ops/s
Iteration  30: 2175983.277 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectDoubleWithBagTarget":
  2176860.626 ±(99.9%) 3403.933 ops/s [Average]
  (min, avg, max) = (2162351.815, 2176860.626, 2188849.976), stdev = 5094.846
  CI (99.9%): [2173456.693, 2180264.558] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectDoubleWithBagTarget  thrpt   30  2176860.626 ± 3403.933  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 727213.544 ops/s
# Warmup Iteration   2: 1659381.275 ops/s
# Warmup Iteration   3: 1723937.046 ops/s
# Warmup Iteration   4: 1544739.554 ops/s
# Warmup Iteration   5: 1631590.229 ops/s
# Warmup Iteration   6: 1736548.015 ops/s
# Warmup Iteration   7: 1734723.873 ops/s
# Warmup Iteration   8: 1728039.182 ops/s
# Warmup Iteration   9: 1733741.105 ops/s
# Warmup Iteration  10: 1728777.878 ops/s
# Warmup Iteration  11: 1734368.168 ops/s
# Warmup Iteration  12: 1734099.213 ops/s
# Warmup Iteration  13: 1733975.970 ops/s
# Warmup Iteration  14: 1734289.736 ops/s
# Warmup Iteration  15: 1734426.786 ops/s
# Warmup Iteration  16: 1731992.116 ops/s
# Warmup Iteration  17: 1728046.819 ops/s
# Warmup Iteration  18: 1730373.728 ops/s
# Warmup Iteration  19: 1730614.555 ops/s
# Warmup Iteration  20: 1725521.556 ops/s
# Warmup Iteration  21: 1728676.001 ops/s
# Warmup Iteration  22: 1731083.269 ops/s
# Warmup Iteration  23: 1728627.526 ops/s
# Warmup Iteration  24: 1729566.685 ops/s
# Warmup Iteration  25: 1720449.551 ops/s
# Warmup Iteration  26: 1731785.267 ops/s
# Warmup Iteration  27: 1729440.921 ops/s
# Warmup Iteration  28: 1729109.842 ops/s
# Warmup Iteration  29: 1729053.024 ops/s
# Warmup Iteration  30: 1729666.816 ops/s
Iteration   1: 1726466.434 ops/s
Iteration   2: 1730808.952 ops/s
Iteration   3: 1736256.244 ops/s
Iteration   4: 1731868.141 ops/s
Iteration   5: 1732113.427 ops/s
Iteration   6: 1728659.614 ops/s
Iteration   7: 1735765.317 ops/s
Iteration   8: 1728210.157 ops/s
Iteration   9: 1729497.455 ops/s
Iteration  10: 1723445.681 ops/s
Iteration  11: 1726055.743 ops/s
Iteration  12: 1725565.359 ops/s
Iteration  13: 1731806.412 ops/s
Iteration  14: 1732987.934 ops/s
Iteration  15: 1723643.610 ops/s
Iteration  16: 1727216.947 ops/s
Iteration  17: 1721457.423 ops/s
Iteration  18: 1727541.975 ops/s
Iteration  19: 1732403.392 ops/s
Iteration  20: 1732056.282 ops/s
Iteration  21: 1733395.255 ops/s
Iteration  22: 1731942.052 ops/s
Iteration  23: 1730462.080 ops/s
Iteration  24: 1734991.885 ops/s
Iteration  25: 1707687.609 ops/s
Iteration  26: 1725840.020 ops/s
Iteration  27: 1731447.990 ops/s
Iteration  28: 1726967.333 ops/s
Iteration  29: 1734454.096 ops/s
Iteration  30: 1728827.420 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectDoubleWithTarget":
  1728994.741 ±(99.9%) 3688.825 ops/s [Average]
  (min, avg, max) = (1707687.609, 1728994.741, 1736256.244), stdev = 5521.259
  CI (99.9%): [1725305.917, 1732683.566] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  1728994.741 ± 3688.825  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 373873.707 ops/s
# Warmup Iteration   2: 734159.869 ops/s
# Warmup Iteration   3: 792870.613 ops/s
# Warmup Iteration   4: 793047.780 ops/s
# Warmup Iteration   5: 671565.679 ops/s
# Warmup Iteration   6: 796331.599 ops/s
# Warmup Iteration   7: 797589.320 ops/s
# Warmup Iteration   8: 796363.495 ops/s
# Warmup Iteration   9: 798474.196 ops/s
# Warmup Iteration  10: 797995.888 ops/s
# Warmup Iteration  11: 797388.004 ops/s
# Warmup Iteration  12: 797047.120 ops/s
# Warmup Iteration  13: 796939.172 ops/s
# Warmup Iteration  14: 795489.240 ops/s
# Warmup Iteration  15: 799516.814 ops/s
# Warmup Iteration  16: 797068.935 ops/s
# Warmup Iteration  17: 796777.256 ops/s
# Warmup Iteration  18: 797878.417 ops/s
# Warmup Iteration  19: 796468.041 ops/s
# Warmup Iteration  20: 797665.375 ops/s
# Warmup Iteration  21: 798365.810 ops/s
# Warmup Iteration  22: 798004.057 ops/s
# Warmup Iteration  23: 796641.072 ops/s
# Warmup Iteration  24: 797727.249 ops/s
# Warmup Iteration  25: 799051.277 ops/s
# Warmup Iteration  26: 797722.606 ops/s
# Warmup Iteration  27: 799440.888 ops/s
# Warmup Iteration  28: 798132.263 ops/s
# Warmup Iteration  29: 795899.881 ops/s
# Warmup Iteration  30: 796090.196 ops/s
Iteration   1: 797564.952 ops/s
Iteration   2: 799285.059 ops/s
Iteration   3: 799121.482 ops/s
Iteration   4: 796179.605 ops/s
Iteration   5: 799711.653 ops/s
Iteration   6: 796733.553 ops/s
Iteration   7: 798945.367 ops/s
Iteration   8: 800472.876 ops/s
Iteration   9: 798116.453 ops/s
Iteration  10: 797278.131 ops/s
Iteration  11: 793288.438 ops/s
Iteration  12: 796311.185 ops/s
Iteration  13: 799268.869 ops/s
Iteration  14: 796481.525 ops/s
Iteration  15: 794788.389 ops/s
Iteration  16: 799178.413 ops/s
Iteration  17: 798099.624 ops/s
Iteration  18: 797343.615 ops/s
Iteration  19: 800422.058 ops/s
Iteration  20: 798319.253 ops/s
Iteration  21: 796698.704 ops/s
Iteration  22: 802090.790 ops/s
Iteration  23: 798152.769 ops/s
Iteration  24: 797977.911 ops/s
Iteration  25: 799161.401 ops/s
Iteration  26: 798004.433 ops/s
Iteration  27: 796975.184 ops/s
Iteration  28: 798316.632 ops/s
Iteration  29: 793457.934 ops/s
Iteration  30: 798654.065 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectFloat":
  797880.011 ±(99.9%) 1284.216 ops/s [Average]
  (min, avg, max) = (793288.438, 797880.011, 802090.790), stdev = 1922.154
  CI (99.9%): [796595.795, 799164.227] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectFloat  thrpt   30  797880.011 ± 1284.216  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectFloatWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectFloatWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 927949.091 ops/s
# Warmup Iteration   2: 2202454.630 ops/s
# Warmup Iteration   3: 2304075.581 ops/s
# Warmup Iteration   4: 1926565.356 ops/s
# Warmup Iteration   5: 2306423.603 ops/s
# Warmup Iteration   6: 2307088.711 ops/s
# Warmup Iteration   7: 2304805.789 ops/s
# Warmup Iteration   8: 2303808.908 ops/s
# Warmup Iteration   9: 2308084.515 ops/s
# Warmup Iteration  10: 2307058.294 ops/s
# Warmup Iteration  11: 2306307.948 ops/s
# Warmup Iteration  12: 2311061.542 ops/s
# Warmup Iteration  13: 2307798.118 ops/s
# Warmup Iteration  14: 2304317.438 ops/s
# Warmup Iteration  15: 2307825.321 ops/s
# Warmup Iteration  16: 2306580.586 ops/s
# Warmup Iteration  17: 2302841.007 ops/s
# Warmup Iteration  18: 2306030.753 ops/s
# Warmup Iteration  19: 2306883.932 ops/s
# Warmup Iteration  20: 2308057.513 ops/s
# Warmup Iteration  21: 2296508.592 ops/s
# Warmup Iteration  22: 2300911.693 ops/s
# Warmup Iteration  23: 2299158.370 ops/s
# Warmup Iteration  24: 2301058.119 ops/s
# Warmup Iteration  25: 2306155.043 ops/s
# Warmup Iteration  26: 2298367.704 ops/s
# Warmup Iteration  27: 2306595.716 ops/s
# Warmup Iteration  28: 2298984.589 ops/s
# Warmup Iteration  29: 2301923.416 ops/s
# Warmup Iteration  30: 2303446.870 ops/s
Iteration   1: 2307930.592 ops/s
Iteration   2: 2304459.375 ops/s
Iteration   3: 2301112.240 ops/s
Iteration   4: 2303960.185 ops/s
Iteration   5: 2301085.914 ops/s
Iteration   6: 2294689.667 ops/s
Iteration   7: 2296209.239 ops/s
Iteration   8: 2316303.239 ops/s
Iteration   9: 2301257.263 ops/s
Iteration  10: 2312769.072 ops/s
Iteration  11: 2310981.239 ops/s
Iteration  12: 2307161.501 ops/s
Iteration  13: 2310618.947 ops/s
Iteration  14: 2309378.120 ops/s
Iteration  15: 2312534.823 ops/s
Iteration  16: 2314058.818 ops/s
Iteration  17: 2302708.547 ops/s
Iteration  18: 2301594.140 ops/s
Iteration  19: 2299096.000 ops/s
Iteration  20: 2298223.830 ops/s
Iteration  21: 2308582.565 ops/s
Iteration  22: 2311845.206 ops/s
Iteration  23: 2316110.003 ops/s
Iteration  24: 2308028.751 ops/s
Iteration  25: 2304129.870 ops/s
Iteration  26: 2303276.261 ops/s
Iteration  27: 2306992.188 ops/s
Iteration  28: 2289650.486 ops/s
Iteration  29: 2299968.576 ops/s
Iteration  30: 2301209.433 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectFloatWithBagTarget":
  2305197.536 ±(99.9%) 4347.374 ops/s [Average]
  (min, avg, max) = (2289650.486, 2305197.536, 2316303.239), stdev = 6506.945
  CI (99.9%): [2300850.162, 2309544.910] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectFloatWithBagTarget  thrpt   30  2305197.536 ± 4347.374  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 817415.811 ops/s
# Warmup Iteration   2: 1820715.764 ops/s
# Warmup Iteration   3: 1908581.754 ops/s
# Warmup Iteration   4: 1885020.887 ops/s
# Warmup Iteration   5: 1642993.039 ops/s
# Warmup Iteration   6: 1920440.909 ops/s
# Warmup Iteration   7: 1920494.181 ops/s
# Warmup Iteration   8: 1920804.836 ops/s
# Warmup Iteration   9: 1920962.391 ops/s
# Warmup Iteration  10: 1922241.299 ops/s
# Warmup Iteration  11: 1918094.175 ops/s
# Warmup Iteration  12: 1919755.394 ops/s
# Warmup Iteration  13: 1920545.749 ops/s
# Warmup Iteration  14: 1919214.057 ops/s
# Warmup Iteration  15: 1923147.643 ops/s
# Warmup Iteration  16: 1918622.924 ops/s
# Warmup Iteration  17: 1921540.025 ops/s
# Warmup Iteration  18: 1915456.505 ops/s
# Warmup Iteration  19: 1918939.231 ops/s
# Warmup Iteration  20: 1923102.668 ops/s
# Warmup Iteration  21: 1920539.744 ops/s
# Warmup Iteration  22: 1921296.627 ops/s
# Warmup Iteration  23: 1919763.022 ops/s
# Warmup Iteration  24: 1925334.996 ops/s
# Warmup Iteration  25: 1922385.652 ops/s
# Warmup Iteration  26: 1926266.766 ops/s
# Warmup Iteration  27: 1917815.285 ops/s
# Warmup Iteration  28: 1919175.741 ops/s
# Warmup Iteration  29: 1923160.605 ops/s
# Warmup Iteration  30: 1922836.034 ops/s
Iteration   1: 1922712.132 ops/s
Iteration   2: 1921572.879 ops/s
Iteration   3: 1921426.010 ops/s
Iteration   4: 1914057.432 ops/s
Iteration   5: 1922567.279 ops/s
Iteration   6: 1924843.429 ops/s
Iteration   7: 1912803.326 ops/s
Iteration   8: 1917788.059 ops/s
Iteration   9: 1916257.664 ops/s
Iteration  10: 1922366.462 ops/s
Iteration  11: 1923300.981 ops/s
Iteration  12: 1921735.525 ops/s
Iteration  13: 1922657.548 ops/s
Iteration  14: 1919171.228 ops/s
Iteration  15: 1918817.004 ops/s
Iteration  16: 1917719.573 ops/s
Iteration  17: 1913524.021 ops/s
Iteration  18: 1920987.461 ops/s
Iteration  19: 1922359.579 ops/s
Iteration  20: 1925106.334 ops/s
Iteration  21: 1918423.254 ops/s
Iteration  22: 1923910.781 ops/s
Iteration  23: 1918319.410 ops/s
Iteration  24: 1916634.246 ops/s
Iteration  25: 1923349.666 ops/s
Iteration  26: 1915579.116 ops/s
Iteration  27: 1920736.927 ops/s
Iteration  28: 1925312.235 ops/s
Iteration  29: 1921797.727 ops/s
Iteration  30: 1916219.719 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectFloatWithTarget":
  1920068.567 ±(99.9%) 2370.826 ops/s [Average]
  (min, avg, max) = (1912803.326, 1920068.567, 1925312.235), stdev = 3548.541
  CI (99.9%): [1917697.741, 1922439.393] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  1920068.567 ± 2370.826  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 329680.732 ops/s
# Warmup Iteration   2: 616413.095 ops/s
# Warmup Iteration   3: 688146.070 ops/s
# Warmup Iteration   4: 687395.430 ops/s
# Warmup Iteration   5: 685914.632 ops/s
# Warmup Iteration   6: 584406.623 ops/s
# Warmup Iteration   7: 692769.526 ops/s
# Warmup Iteration   8: 692039.981 ops/s
# Warmup Iteration   9: 692997.329 ops/s
# Warmup Iteration  10: 691916.807 ops/s
# Warmup Iteration  11: 693270.325 ops/s
# Warmup Iteration  12: 692800.669 ops/s
# Warmup Iteration  13: 692449.130 ops/s
# Warmup Iteration  14: 692448.548 ops/s
# Warmup Iteration  15: 695781.149 ops/s
# Warmup Iteration  16: 691450.438 ops/s
# Warmup Iteration  17: 694533.981 ops/s
# Warmup Iteration  18: 691026.569 ops/s
# Warmup Iteration  19: 690249.067 ops/s
# Warmup Iteration  20: 691451.904 ops/s
# Warmup Iteration  21: 691464.698 ops/s
# Warmup Iteration  22: 692262.933 ops/s
# Warmup Iteration  23: 689744.272 ops/s
# Warmup Iteration  24: 692883.454 ops/s
# Warmup Iteration  25: 687523.751 ops/s
# Warmup Iteration  26: 689851.922 ops/s
# Warmup Iteration  27: 692920.348 ops/s
# Warmup Iteration  28: 688947.339 ops/s
# Warmup Iteration  29: 691176.652 ops/s
# Warmup Iteration  30: 692150.284 ops/s
Iteration   1: 689199.030 ops/s
Iteration   2: 688292.369 ops/s
Iteration   3: 692635.597 ops/s
Iteration   4: 692483.376 ops/s
Iteration   5: 690725.765 ops/s
Iteration   6: 687308.193 ops/s
Iteration   7: 689475.167 ops/s
Iteration   8: 688034.227 ops/s
Iteration   9: 687816.221 ops/s
Iteration  10: 692258.505 ops/s
Iteration  11: 692350.481 ops/s
Iteration  12: 689189.802 ops/s
Iteration  13: 693135.339 ops/s
Iteration  14: 694038.635 ops/s
Iteration  15: 689319.229 ops/s
Iteration  16: 694035.078 ops/s
Iteration  17: 692310.477 ops/s
Iteration  18: 685802.756 ops/s
Iteration  19: 694491.020 ops/s
Iteration  20: 691179.048 ops/s
Iteration  21: 694720.072 ops/s
Iteration  22: 693146.678 ops/s
Iteration  23: 689674.570 ops/s
Iteration  24: 693531.068 ops/s
Iteration  25: 692301.186 ops/s
Iteration  26: 692323.132 ops/s
Iteration  27: 693553.485 ops/s
Iteration  28: 687030.046 ops/s
Iteration  29: 693148.726 ops/s
Iteration  30: 690361.038 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectIf":
  691129.011 ±(99.9%) 1667.909 ops/s [Average]
  (min, avg, max) = (685802.756, 691129.011, 694720.072), stdev = 2496.447
  CI (99.9%): [689461.102, 692796.919] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectIf  thrpt   30  691129.011 ± 1667.909  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 397107.737 ops/s
# Warmup Iteration   2: 766587.612 ops/s
# Warmup Iteration   3: 818268.439 ops/s
# Warmup Iteration   4: 821243.496 ops/s
# Warmup Iteration   5: 697686.861 ops/s
# Warmup Iteration   6: 823551.441 ops/s
# Warmup Iteration   7: 820690.099 ops/s
# Warmup Iteration   8: 822746.926 ops/s
# Warmup Iteration   9: 821895.111 ops/s
# Warmup Iteration  10: 824147.164 ops/s
# Warmup Iteration  11: 821849.747 ops/s
# Warmup Iteration  12: 822509.644 ops/s
# Warmup Iteration  13: 823405.804 ops/s
# Warmup Iteration  14: 823327.196 ops/s
# Warmup Iteration  15: 823275.009 ops/s
# Warmup Iteration  16: 823094.435 ops/s
# Warmup Iteration  17: 821934.180 ops/s
# Warmup Iteration  18: 820612.310 ops/s
# Warmup Iteration  19: 823287.783 ops/s
# Warmup Iteration  20: 820109.598 ops/s
# Warmup Iteration  21: 822492.519 ops/s
# Warmup Iteration  22: 823648.464 ops/s
# Warmup Iteration  23: 824038.404 ops/s
# Warmup Iteration  24: 822688.305 ops/s
# Warmup Iteration  25: 823568.982 ops/s
# Warmup Iteration  26: 824381.152 ops/s
# Warmup Iteration  27: 820628.561 ops/s
# Warmup Iteration  28: 825474.357 ops/s
# Warmup Iteration  29: 823020.588 ops/s
# Warmup Iteration  30: 821379.279 ops/s
Iteration   1: 826041.580 ops/s
Iteration   2: 822561.430 ops/s
Iteration   3: 825433.816 ops/s
Iteration   4: 820493.622 ops/s
Iteration   5: 824183.515 ops/s
Iteration   6: 820605.691 ops/s
Iteration   7: 823804.130 ops/s
Iteration   8: 821529.597 ops/s
Iteration   9: 825552.290 ops/s
Iteration  10: 817137.187 ops/s
Iteration  11: 821702.699 ops/s
Iteration  12: 825330.036 ops/s
Iteration  13: 820765.478 ops/s
Iteration  14: 822488.092 ops/s
Iteration  15: 824419.411 ops/s
Iteration  16: 820875.164 ops/s
Iteration  17: 821479.352 ops/s
Iteration  18: 825228.027 ops/s
Iteration  19: 823872.676 ops/s
Iteration  20: 821839.898 ops/s
Iteration  21: 824986.545 ops/s
Iteration  22: 822054.248 ops/s
Iteration  23: 821121.669 ops/s
Iteration  24: 825290.954 ops/s
Iteration  25: 823943.697 ops/s
Iteration  26: 819343.324 ops/s
Iteration  27: 826245.233 ops/s
Iteration  28: 819651.758 ops/s
Iteration  29: 824242.534 ops/s
Iteration  30: 822597.241 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectInt":
  822827.363 ±(99.9%) 1525.511 ops/s [Average]
  (min, avg, max) = (817137.187, 822827.363, 826245.233), stdev = 2283.313
  CI (99.9%): [821301.852, 824352.874] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectInt  thrpt   30  822827.363 ± 1525.511  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectIntWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectIntWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 985155.254 ops/s
# Warmup Iteration   2: 2473311.934 ops/s
# Warmup Iteration   3: 2457926.781 ops/s
# Warmup Iteration   4: 2055956.538 ops/s
# Warmup Iteration   5: 2457282.439 ops/s
# Warmup Iteration   6: 2454428.439 ops/s
# Warmup Iteration   7: 2459946.778 ops/s
# Warmup Iteration   8: 2463172.646 ops/s
# Warmup Iteration   9: 2463654.300 ops/s
# Warmup Iteration  10: 2455857.987 ops/s
# Warmup Iteration  11: 2460361.575 ops/s
# Warmup Iteration  12: 2448598.770 ops/s
# Warmup Iteration  13: 2453852.353 ops/s
# Warmup Iteration  14: 2441003.985 ops/s
# Warmup Iteration  15: 2444896.041 ops/s
# Warmup Iteration  16: 2446018.783 ops/s
# Warmup Iteration  17: 2448499.033 ops/s
# Warmup Iteration  18: 2453780.790 ops/s
# Warmup Iteration  19: 2443733.298 ops/s
# Warmup Iteration  20: 2452189.935 ops/s
# Warmup Iteration  21: 2449080.788 ops/s
# Warmup Iteration  22: 2447828.325 ops/s
# Warmup Iteration  23: 2457446.053 ops/s
# Warmup Iteration  24: 2462202.596 ops/s
# Warmup Iteration  25: 2461755.754 ops/s
# Warmup Iteration  26: 2456289.113 ops/s
# Warmup Iteration  27: 2448393.021 ops/s
# Warmup Iteration  28: 2448308.869 ops/s
# Warmup Iteration  29: 2459067.160 ops/s
# Warmup Iteration  30: 2455758.864 ops/s
Iteration   1: 2450529.229 ops/s
Iteration   2: 2460498.241 ops/s
Iteration   3: 2456829.040 ops/s
Iteration   4: 2453031.439 ops/s
Iteration   5: 2459845.449 ops/s
Iteration   6: 2461566.942 ops/s
Iteration   7: 2459232.638 ops/s
Iteration   8: 2459244.838 ops/s
Iteration   9: 2453107.029 ops/s
Iteration  10: 2459979.602 ops/s
Iteration  11: 2463346.050 ops/s
Iteration  12: 2456248.324 ops/s
Iteration  13: 2455508.461 ops/s
Iteration  14: 2457656.659 ops/s
Iteration  15: 2457128.035 ops/s
Iteration  16: 2459361.153 ops/s
Iteration  17: 2452620.819 ops/s
Iteration  18: 2466463.068 ops/s
Iteration  19: 2452433.877 ops/s
Iteration  20: 2461933.729 ops/s
Iteration  21: 2461589.856 ops/s
Iteration  22: 2453799.093 ops/s
Iteration  23: 2454247.025 ops/s
Iteration  24: 2455851.601 ops/s
Iteration  25: 2456714.735 ops/s
Iteration  26: 2457678.855 ops/s
Iteration  27: 2457102.691 ops/s
Iteration  28: 2450335.765 ops/s
Iteration  29: 2456213.852 ops/s
Iteration  30: 2458921.935 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectIntWithBagTarget":
  2457300.668 ±(99.9%) 2550.671 ops/s [Average]
  (min, avg, max) = (2450335.765, 2457300.668, 2466463.068), stdev = 3817.725
  CI (99.9%): [2454749.996, 2459851.339] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectIntWithBagTarget  thrpt   30  2457300.668 ± 2550.671  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 880946.338 ops/s
# Warmup Iteration   2: 1995463.025 ops/s
# Warmup Iteration   3: 2076700.244 ops/s
# Warmup Iteration   4: 1891605.926 ops/s
# Warmup Iteration   5: 1935365.086 ops/s
# Warmup Iteration   6: 2082061.609 ops/s
# Warmup Iteration   7: 2086594.588 ops/s
# Warmup Iteration   8: 2078479.027 ops/s
# Warmup Iteration   9: 2084887.419 ops/s
# Warmup Iteration  10: 2087075.304 ops/s
# Warmup Iteration  11: 2082745.125 ops/s
# Warmup Iteration  12: 2085162.328 ops/s
# Warmup Iteration  13: 2081152.087 ops/s
# Warmup Iteration  14: 2084501.454 ops/s
# Warmup Iteration  15: 2087443.998 ops/s
# Warmup Iteration  16: 2084140.211 ops/s
# Warmup Iteration  17: 2085579.757 ops/s
# Warmup Iteration  18: 2083517.979 ops/s
# Warmup Iteration  19: 2080348.054 ops/s
# Warmup Iteration  20: 2087395.304 ops/s
# Warmup Iteration  21: 2086829.213 ops/s
# Warmup Iteration  22: 2083845.024 ops/s
# Warmup Iteration  23: 2087213.337 ops/s
# Warmup Iteration  24: 2049095.735 ops/s
# Warmup Iteration  25: 2082027.830 ops/s
# Warmup Iteration  26: 2081070.086 ops/s
# Warmup Iteration  27: 2084573.655 ops/s
# Warmup Iteration  28: 2085225.000 ops/s
# Warmup Iteration  29: 2085050.585 ops/s
# Warmup Iteration  30: 2084566.891 ops/s
Iteration   1: 2076422.415 ops/s
Iteration   2: 2084141.885 ops/s
Iteration   3: 2087477.722 ops/s
Iteration   4: 2083856.578 ops/s
Iteration   5: 2087285.043 ops/s
Iteration   6: 2086832.402 ops/s
Iteration   7: 2083312.675 ops/s
Iteration   8: 2082638.511 ops/s
Iteration   9: 2086815.634 ops/s
Iteration  10: 2079925.953 ops/s
Iteration  11: 2086818.908 ops/s
Iteration  12: 2080938.472 ops/s
Iteration  13: 2084087.248 ops/s
Iteration  14: 2082891.044 ops/s
Iteration  15: 2083754.523 ops/s
Iteration  16: 2085819.423 ops/s
Iteration  17: 2090325.142 ops/s
Iteration  18: 2077272.727 ops/s
Iteration  19: 2078006.185 ops/s
Iteration  20: 2082874.714 ops/s
Iteration  21: 2089415.550 ops/s
Iteration  22: 2081625.441 ops/s
Iteration  23: 2081510.578 ops/s
Iteration  24: 2084608.563 ops/s
Iteration  25: 2084481.281 ops/s
Iteration  26: 2081165.582 ops/s
Iteration  27: 2079585.608 ops/s
Iteration  28: 2084563.094 ops/s
Iteration  29: 2088589.139 ops/s
Iteration  30: 2085159.121 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectIntWithTarget":
  2083740.039 ±(99.9%) 2319.672 ops/s [Average]
  (min, avg, max) = (2076422.415, 2083740.039, 2090325.142), stdev = 3471.975
  CI (99.9%): [2081420.367, 2086059.710] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  2083740.039 ± 2319.672  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 345284.114 ops/s
# Warmup Iteration   2: 729437.752 ops/s
# Warmup Iteration   3: 762296.089 ops/s
# Warmup Iteration   4: 766660.642 ops/s
# Warmup Iteration   5: 649438.286 ops/s
# Warmup Iteration   6: 763572.726 ops/s
# Warmup Iteration   7: 764810.509 ops/s
# Warmup Iteration   8: 759735.057 ops/s
# Warmup Iteration   9: 765362.925 ops/s
# Warmup Iteration  10: 763900.459 ops/s
# Warmup Iteration  11: 763878.830 ops/s
# Warmup Iteration  12: 762310.122 ops/s
# Warmup Iteration  13: 764567.353 ops/s
# Warmup Iteration  14: 761698.036 ops/s
# Warmup Iteration  15: 763954.874 ops/s
# Warmup Iteration  16: 762613.063 ops/s
# Warmup Iteration  17: 760355.455 ops/s
# Warmup Iteration  18: 759714.635 ops/s
# Warmup Iteration  19: 764023.222 ops/s
# Warmup Iteration  20: 761781.291 ops/s
# Warmup Iteration  21: 763511.846 ops/s
# Warmup Iteration  22: 762334.408 ops/s
# Warmup Iteration  23: 763107.670 ops/s
# Warmup Iteration  24: 761215.829 ops/s
# Warmup Iteration  25: 762994.370 ops/s
# Warmup Iteration  26: 763627.755 ops/s
# Warmup Iteration  27: 765034.097 ops/s
# Warmup Iteration  28: 762876.504 ops/s
# Warmup Iteration  29: 763562.937 ops/s
# Warmup Iteration  30: 763724.471 ops/s
Iteration   1: 765301.157 ops/s
Iteration   2: 762922.463 ops/s
Iteration   3: 762197.913 ops/s
Iteration   4: 764335.629 ops/s
Iteration   5: 761959.151 ops/s
Iteration   6: 761663.057 ops/s
Iteration   7: 762340.824 ops/s
Iteration   8: 763483.574 ops/s
Iteration   9: 764612.727 ops/s
Iteration  10: 759458.737 ops/s
Iteration  11: 762297.995 ops/s
Iteration  12: 763909.289 ops/s
Iteration  13: 763900.439 ops/s
Iteration  14: 761243.225 ops/s
Iteration  15: 761308.446 ops/s
Iteration  16: 763979.630 ops/s
Iteration  17: 763074.293 ops/s
Iteration  18: 759307.714 ops/s
Iteration  19: 758876.092 ops/s
Iteration  20: 765157.896 ops/s
Iteration  21: 762559.432 ops/s
Iteration  22: 761835.087 ops/s
Iteration  23: 762036.534 ops/s
Iteration  24: 765924.116 ops/s
Iteration  25: 764434.735 ops/s
Iteration  26: 765205.304 ops/s
Iteration  27: 764042.865 ops/s
Iteration  28: 762898.395 ops/s
Iteration  29: 763604.574 ops/s
Iteration  30: 763913.271 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectLong":
  762926.152 ±(99.9%) 1182.429 ops/s [Average]
  (min, avg, max) = (758876.092, 762926.152, 765924.116), stdev = 1769.804
  CI (99.9%): [761743.723, 764108.581] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectLong  thrpt   30  762926.152 ± 1182.429  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectLongWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectLongWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 823601.142 ops/s
# Warmup Iteration   2: 2159555.010 ops/s
# Warmup Iteration   3: 2180494.637 ops/s
# Warmup Iteration   4: 1832687.119 ops/s
# Warmup Iteration   5: 2195404.925 ops/s
# Warmup Iteration   6: 2193942.256 ops/s
# Warmup Iteration   7: 2189343.383 ops/s
# Warmup Iteration   8: 2191126.224 ops/s
# Warmup Iteration   9: 2194776.334 ops/s
# Warmup Iteration  10: 2194919.754 ops/s
# Warmup Iteration  11: 2199660.103 ops/s
# Warmup Iteration  12: 2195110.523 ops/s
# Warmup Iteration  13: 2193676.503 ops/s
# Warmup Iteration  14: 2182176.173 ops/s
# Warmup Iteration  15: 2196558.969 ops/s
# Warmup Iteration  16: 2199195.089 ops/s
# Warmup Iteration  17: 2195460.805 ops/s
# Warmup Iteration  18: 2196908.103 ops/s
# Warmup Iteration  19: 2199271.712 ops/s
# Warmup Iteration  20: 2200411.406 ops/s
# Warmup Iteration  21: 2201085.333 ops/s
# Warmup Iteration  22: 2195684.592 ops/s
# Warmup Iteration  23: 2202810.457 ops/s
# Warmup Iteration  24: 2195261.397 ops/s
# Warmup Iteration  25: 2199692.848 ops/s
# Warmup Iteration  26: 2194476.600 ops/s
# Warmup Iteration  27: 2200680.793 ops/s
# Warmup Iteration  28: 2198625.740 ops/s
# Warmup Iteration  29: 2195034.734 ops/s
# Warmup Iteration  30: 2199819.587 ops/s
Iteration   1: 2201853.486 ops/s
Iteration   2: 2193849.645 ops/s
Iteration   3: 2200815.941 ops/s
Iteration   4: 2193084.422 ops/s
Iteration   5: 2191154.804 ops/s
Iteration   6: 2198851.301 ops/s
Iteration   7: 2193244.064 ops/s
Iteration   8: 2193756.882 ops/s
Iteration   9: 2199415.753 ops/s
Iteration  10: 2185331.983 ops/s
Iteration  11: 2198923.771 ops/s
Iteration  12: 2192760.872 ops/s
Iteration  13: 2197547.035 ops/s
Iteration  14: 2192440.783 ops/s
Iteration  15: 2199803.233 ops/s
Iteration  16: 2202724.081 ops/s
Iteration  17: 2192423.553 ops/s
Iteration  18: 2196230.097 ops/s
Iteration  19: 2195392.909 ops/s
Iteration  20: 2198561.550 ops/s
Iteration  21: 2199424.964 ops/s
Iteration  22: 2201749.821 ops/s
Iteration  23: 2196468.243 ops/s
Iteration  24: 2193668.039 ops/s
Iteration  25: 2193547.363 ops/s
Iteration  26: 2188287.239 ops/s
Iteration  27: 2196497.052 ops/s
Iteration  28: 2202694.315 ops/s
Iteration  29: 2193988.841 ops/s
Iteration  30: 2200782.178 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectLongWithBagTarget":
  2196175.807 ±(99.9%) 2885.260 ops/s [Average]
  (min, avg, max) = (2185331.983, 2196175.807, 2202724.081), stdev = 4318.522
  CI (99.9%): [2193290.548, 2199061.067] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectLongWithBagTarget  thrpt   30  2196175.807 ± 2885.260  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 770808.276 ops/s
# Warmup Iteration   2: 1976255.246 ops/s
# Warmup Iteration   3: 2002135.311 ops/s
# Warmup Iteration   4: 1669398.733 ops/s
# Warmup Iteration   5: 2009538.938 ops/s
# Warmup Iteration   6: 2000174.605 ops/s
# Warmup Iteration   7: 2006455.150 ops/s
# Warmup Iteration   8: 2001594.915 ops/s
# Warmup Iteration   9: 2007230.868 ops/s
# Warmup Iteration  10: 2001449.078 ops/s
# Warmup Iteration  11: 2007432.444 ops/s
# Warmup Iteration  12: 2004723.524 ops/s
# Warmup Iteration  13: 2005161.191 ops/s
# Warmup Iteration  14: 2007605.535 ops/s
# Warmup Iteration  15: 2002041.323 ops/s
# Warmup Iteration  16: 2003795.095 ops/s
# Warmup Iteration  17: 1993348.296 ops/s
# Warmup Iteration  18: 1999606.804 ops/s
# Warmup Iteration  19: 1998658.715 ops/s
# Warmup Iteration  20: 2002371.225 ops/s
# Warmup Iteration  21: 1998555.670 ops/s
# Warmup Iteration  22: 1993076.333 ops/s
# Warmup Iteration  23: 1999226.687 ops/s
# Warmup Iteration  24: 1990172.364 ops/s
# Warmup Iteration  25: 1995753.908 ops/s
# Warmup Iteration  26: 1999357.554 ops/s
# Warmup Iteration  27: 1995407.188 ops/s
# Warmup Iteration  28: 1998181.709 ops/s
# Warmup Iteration  29: 1987217.542 ops/s
# Warmup Iteration  30: 1998457.422 ops/s
Iteration   1: 2000272.652 ops/s
Iteration   2: 1996603.041 ops/s
Iteration   3: 2002976.409 ops/s
Iteration   4: 1991164.124 ops/s
Iteration   5: 1984825.706 ops/s
Iteration   6: 1996514.077 ops/s
Iteration   7: 1992515.168 ops/s
Iteration   8: 1993066.960 ops/s
Iteration   9: 1998801.773 ops/s
Iteration  10: 1991893.961 ops/s
Iteration  11: 1987040.177 ops/s
Iteration  12: 1996031.548 ops/s
Iteration  13: 1990040.268 ops/s
Iteration  14: 1986579.185 ops/s
Iteration  15: 1993288.435 ops/s
Iteration  16: 1988952.014 ops/s
Iteration  17: 1991087.123 ops/s
Iteration  18: 1990511.378 ops/s
Iteration  19: 1988675.546 ops/s
Iteration  20: 1985943.504 ops/s
Iteration  21: 1991132.021 ops/s
Iteration  22: 1987650.407 ops/s
Iteration  23: 1981799.617 ops/s
Iteration  24: 1990658.467 ops/s
Iteration  25: 1988489.425 ops/s
Iteration  26: 1997467.875 ops/s
Iteration  27: 1994232.901 ops/s
Iteration  28: 1992867.730 ops/s
Iteration  29: 1992854.597 ops/s
Iteration  30: 1993951.282 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectLongWithTarget":
  1991929.579 ±(99.9%) 3148.460 ops/s [Average]
  (min, avg, max) = (1981799.617, 1991929.579, 2002976.409), stdev = 4712.466
  CI (99.9%): [1988781.119, 1995078.039] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  1991929.579 ± 3148.460  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 421858.809 ops/s
# Warmup Iteration   2: 835664.938 ops/s
# Warmup Iteration   3: 897034.685 ops/s
# Warmup Iteration   4: 897432.771 ops/s
# Warmup Iteration   5: 765295.681 ops/s
# Warmup Iteration   6: 900214.495 ops/s
# Warmup Iteration   7: 902341.369 ops/s
# Warmup Iteration   8: 899696.702 ops/s
# Warmup Iteration   9: 902043.674 ops/s
# Warmup Iteration  10: 904832.224 ops/s
# Warmup Iteration  11: 903833.383 ops/s
# Warmup Iteration  12: 904408.160 ops/s
# Warmup Iteration  13: 904798.996 ops/s
# Warmup Iteration  14: 903280.821 ops/s
# Warmup Iteration  15: 904872.652 ops/s
# Warmup Iteration  16: 903255.502 ops/s
# Warmup Iteration  17: 901110.510 ops/s
# Warmup Iteration  18: 902165.835 ops/s
# Warmup Iteration  19: 903447.351 ops/s
# Warmup Iteration  20: 900713.709 ops/s
# Warmup Iteration  21: 900876.096 ops/s
# Warmup Iteration  22: 902969.365 ops/s
# Warmup Iteration  23: 901856.173 ops/s
# Warmup Iteration  24: 899849.254 ops/s
# Warmup Iteration  25: 901888.995 ops/s
# Warmup Iteration  26: 900388.427 ops/s
# Warmup Iteration  27: 901633.225 ops/s
# Warmup Iteration  28: 899713.219 ops/s
# Warmup Iteration  29: 901207.604 ops/s
# Warmup Iteration  30: 901274.416 ops/s
Iteration   1: 898262.239 ops/s
Iteration   2: 902024.388 ops/s
Iteration   3: 895094.087 ops/s
Iteration   4: 896505.040 ops/s
Iteration   5: 901407.814 ops/s
Iteration   6: 898472.981 ops/s
Iteration   7: 898803.260 ops/s
Iteration   8: 903375.253 ops/s
Iteration   9: 897746.345 ops/s
Iteration  10: 900246.888 ops/s
Iteration  11: 900768.365 ops/s
Iteration  12: 896754.377 ops/s
Iteration  13: 899080.693 ops/s
Iteration  14: 900398.234 ops/s
Iteration  15: 899878.958 ops/s
Iteration  16: 900119.901 ops/s
Iteration  17: 901035.180 ops/s
Iteration  18: 900269.092 ops/s
Iteration  19: 897579.063 ops/s
Iteration  20: 900135.509 ops/s
Iteration  21: 902323.995 ops/s
Iteration  22: 898156.156 ops/s
Iteration  23: 902892.202 ops/s
Iteration  24: 904527.749 ops/s
Iteration  25: 899798.745 ops/s
Iteration  26: 901311.304 ops/s
Iteration  27: 901524.697 ops/s
Iteration  28: 895164.475 ops/s
Iteration  29: 904690.874 ops/s
Iteration  30: 901315.882 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectShort":
  899988.792 ±(99.9%) 1635.240 ops/s [Average]
  (min, avg, max) = (895094.087, 899988.792, 904690.874), stdev = 2447.550
  CI (99.9%): [898353.552, 901624.031] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectShort  thrpt   30  899988.792 ± 1635.240  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectShortWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectShortWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1059765.412 ops/s
# Warmup Iteration   2: 2697643.991 ops/s
# Warmup Iteration   3: 2708717.965 ops/s
# Warmup Iteration   4: 2273772.104 ops/s
# Warmup Iteration   5: 2717658.341 ops/s
# Warmup Iteration   6: 2722137.151 ops/s
# Warmup Iteration   7: 2718551.943 ops/s
# Warmup Iteration   8: 2725633.038 ops/s
# Warmup Iteration   9: 2721716.067 ops/s
# Warmup Iteration  10: 2725469.059 ops/s
# Warmup Iteration  11: 2721125.448 ops/s
# Warmup Iteration  12: 2720103.679 ops/s
# Warmup Iteration  13: 2724632.587 ops/s
# Warmup Iteration  14: 2716657.442 ops/s
# Warmup Iteration  15: 2720561.880 ops/s
# Warmup Iteration  16: 2724152.016 ops/s
# Warmup Iteration  17: 2719292.533 ops/s
# Warmup Iteration  18: 2726826.963 ops/s
# Warmup Iteration  19: 2716898.096 ops/s
# Warmup Iteration  20: 2716244.408 ops/s
# Warmup Iteration  21: 2721389.956 ops/s
# Warmup Iteration  22: 2719095.599 ops/s
# Warmup Iteration  23: 2721033.937 ops/s
# Warmup Iteration  24: 2725643.656 ops/s
# Warmup Iteration  25: 2723353.617 ops/s
# Warmup Iteration  26: 2719363.613 ops/s
# Warmup Iteration  27: 2717206.125 ops/s
# Warmup Iteration  28: 2721040.782 ops/s
# Warmup Iteration  29: 2715928.728 ops/s
# Warmup Iteration  30: 2723055.959 ops/s
Iteration   1: 2725061.926 ops/s
Iteration   2: 2731910.839 ops/s
Iteration   3: 2724597.100 ops/s
Iteration   4: 2716237.482 ops/s
Iteration   5: 2717997.864 ops/s
Iteration   6: 2730044.341 ops/s
Iteration   7: 2727509.540 ops/s
Iteration   8: 2723038.625 ops/s
Iteration   9: 2723175.962 ops/s
Iteration  10: 2719962.309 ops/s
Iteration  11: 2723065.520 ops/s
Iteration  12: 2720400.999 ops/s
Iteration  13: 2727041.891 ops/s
Iteration  14: 2723339.125 ops/s
Iteration  15: 2723730.293 ops/s
Iteration  16: 2719448.705 ops/s
Iteration  17: 2723847.688 ops/s
Iteration  18: 2721524.479 ops/s
Iteration  19: 2722994.293 ops/s
Iteration  20: 2719400.273 ops/s
Iteration  21: 2716810.412 ops/s
Iteration  22: 2712362.423 ops/s
Iteration  23: 2721902.608 ops/s
Iteration  24: 2708954.400 ops/s
Iteration  25: 2723662.427 ops/s
Iteration  26: 2718610.113 ops/s
Iteration  27: 2721187.561 ops/s
Iteration  28: 2721555.857 ops/s
Iteration  29: 2717059.381 ops/s
Iteration  30: 2723265.260 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectShortWithBagTarget":
  2721656.657 ±(99.9%) 3150.001 ops/s [Average]
  (min, avg, max) = (2708954.400, 2721656.657, 2731910.839), stdev = 4714.774
  CI (99.9%): [2718506.656, 2724806.658] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectShortWithBagTarget  thrpt   30  2721656.657 ± 3150.001  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 895449.574 ops/s
# Warmup Iteration   2: 2026585.856 ops/s
# Warmup Iteration   3: 2119678.592 ops/s
# Warmup Iteration   4: 1993853.751 ops/s
# Warmup Iteration   5: 1898208.160 ops/s
# Warmup Iteration   6: 2118941.540 ops/s
# Warmup Iteration   7: 2119614.383 ops/s
# Warmup Iteration   8: 2112097.552 ops/s
# Warmup Iteration   9: 2112646.210 ops/s
# Warmup Iteration  10: 2113741.322 ops/s
# Warmup Iteration  11: 2115206.265 ops/s
# Warmup Iteration  12: 2114097.341 ops/s
# Warmup Iteration  13: 2120787.484 ops/s
# Warmup Iteration  14: 2119869.995 ops/s
# Warmup Iteration  15: 2114912.234 ops/s
# Warmup Iteration  16: 2120481.855 ops/s
# Warmup Iteration  17: 2122563.493 ops/s
# Warmup Iteration  18: 2131079.498 ops/s
# Warmup Iteration  19: 2130749.683 ops/s
# Warmup Iteration  20: 2125338.871 ops/s
# Warmup Iteration  21: 2127139.710 ops/s
# Warmup Iteration  22: 2127791.377 ops/s
# Warmup Iteration  23: 2124840.553 ops/s
# Warmup Iteration  24: 2127110.961 ops/s
# Warmup Iteration  25: 2126281.130 ops/s
# Warmup Iteration  26: 2130204.294 ops/s
# Warmup Iteration  27: 2124153.150 ops/s
# Warmup Iteration  28: 2126563.091 ops/s
# Warmup Iteration  29: 2120212.597 ops/s
# Warmup Iteration  30: 2125140.157 ops/s
Iteration   1: 2136416.847 ops/s
Iteration   2: 2123987.250 ops/s
Iteration   3: 2127376.371 ops/s
Iteration   4: 2129513.068 ops/s
Iteration   5: 2127303.992 ops/s
Iteration   6: 2131512.122 ops/s
Iteration   7: 2125473.881 ops/s
Iteration   8: 2122471.195 ops/s
Iteration   9: 2123475.178 ops/s
Iteration  10: 2124377.608 ops/s
Iteration  11: 2127846.217 ops/s
Iteration  12: 2116914.682 ops/s
Iteration  13: 2119579.102 ops/s
Iteration  14: 2116793.022 ops/s
Iteration  15: 2126506.652 ops/s
Iteration  16: 2133687.090 ops/s
Iteration  17: 2123067.177 ops/s
Iteration  18: 2130555.578 ops/s
Iteration  19: 2130830.316 ops/s
Iteration  20: 2130280.171 ops/s
Iteration  21: 2130828.808 ops/s
Iteration  22: 2121188.602 ops/s
Iteration  23: 2130492.847 ops/s
Iteration  24: 2130356.034 ops/s
Iteration  25: 2135558.941 ops/s
Iteration  26: 2132855.048 ops/s
Iteration  27: 2127004.904 ops/s
Iteration  28: 2125336.914 ops/s
Iteration  29: 2127013.677 ops/s
Iteration  30: 2128377.050 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectShortWithTarget":
  2127232.678 ±(99.9%) 3304.559 ops/s [Average]
  (min, avg, max) = (2116793.022, 2127232.678, 2136416.847), stdev = 4946.108
  CI (99.9%): [2123928.119, 2130537.237] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  2127232.678 ± 3304.559  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 101405.241 ops/s
# Warmup Iteration   2: 171974.711 ops/s
# Warmup Iteration   3: 214339.891 ops/s
# Warmup Iteration   4: 213099.776 ops/s
# Warmup Iteration   5: 215200.646 ops/s
# Warmup Iteration   6: 213777.149 ops/s
# Warmup Iteration   7: 177751.962 ops/s
# Warmup Iteration   8: 214951.189 ops/s
# Warmup Iteration   9: 214835.515 ops/s
# Warmup Iteration  10: 214767.359 ops/s
# Warmup Iteration  11: 214883.249 ops/s
# Warmup Iteration  12: 214725.176 ops/s
# Warmup Iteration  13: 214785.658 ops/s
# Warmup Iteration  14: 214756.320 ops/s
# Warmup Iteration  15: 214787.852 ops/s
# Warmup Iteration  16: 214885.411 ops/s
# Warmup Iteration  17: 213074.916 ops/s
# Warmup Iteration  18: 212575.621 ops/s
# Warmup Iteration  19: 212707.159 ops/s
# Warmup Iteration  20: 213186.210 ops/s
# Warmup Iteration  21: 212822.290 ops/s
# Warmup Iteration  22: 212974.513 ops/s
# Warmup Iteration  23: 212738.912 ops/s
# Warmup Iteration  24: 212571.507 ops/s
# Warmup Iteration  25: 212535.188 ops/s
# Warmup Iteration  26: 212967.469 ops/s
# Warmup Iteration  27: 212817.416 ops/s
# Warmup Iteration  28: 212656.643 ops/s
# Warmup Iteration  29: 213403.604 ops/s
# Warmup Iteration  30: 213045.382 ops/s
Iteration   1: 212714.603 ops/s
Iteration   2: 212687.846 ops/s
Iteration   3: 212769.453 ops/s
Iteration   4: 212237.144 ops/s
Iteration   5: 212702.941 ops/s
Iteration   6: 213271.756 ops/s
Iteration   7: 213545.725 ops/s
Iteration   8: 212443.722 ops/s
Iteration   9: 212964.789 ops/s
Iteration  10: 212988.142 ops/s
Iteration  11: 213641.144 ops/s
Iteration  12: 213059.214 ops/s
Iteration  13: 213278.979 ops/s
Iteration  14: 212594.149 ops/s
Iteration  15: 213782.808 ops/s
Iteration  16: 213077.829 ops/s
Iteration  17: 213527.370 ops/s
Iteration  18: 212238.441 ops/s
Iteration  19: 213382.332 ops/s
Iteration  20: 213123.305 ops/s
Iteration  21: 213412.229 ops/s
Iteration  22: 213621.084 ops/s
Iteration  23: 212759.782 ops/s
Iteration  24: 213722.469 ops/s
Iteration  25: 213251.032 ops/s
Iteration  26: 213255.555 ops/s
Iteration  27: 212439.981 ops/s
Iteration  28: 212474.781 ops/s
Iteration  29: 212236.816 ops/s
Iteration  30: 213144.261 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectTarget":
  213011.656 ±(99.9%) 312.204 ops/s [Average]
  (min, avg, max) = (212236.816, 213011.656, 213782.808), stdev = 467.292
  CI (99.9%): [212699.452, 213323.860] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_collectTarget  thrpt   30  213011.656 ± 312.204  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 466885.704 ops/s
# Warmup Iteration   2: 832913.367 ops/s
# Warmup Iteration   3: 960893.205 ops/s
# Warmup Iteration   4: 962210.855 ops/s
# Warmup Iteration   5: 965501.722 ops/s
# Warmup Iteration   6: 805613.549 ops/s
# Warmup Iteration   7: 967262.067 ops/s
# Warmup Iteration   8: 969735.493 ops/s
# Warmup Iteration   9: 966844.973 ops/s
# Warmup Iteration  10: 967313.228 ops/s
# Warmup Iteration  11: 966449.152 ops/s
# Warmup Iteration  12: 968098.619 ops/s
# Warmup Iteration  13: 969059.099 ops/s
# Warmup Iteration  14: 968681.668 ops/s
# Warmup Iteration  15: 966227.238 ops/s
# Warmup Iteration  16: 966940.633 ops/s
# Warmup Iteration  17: 968051.046 ops/s
# Warmup Iteration  18: 965910.213 ops/s
# Warmup Iteration  19: 967356.015 ops/s
# Warmup Iteration  20: 967171.082 ops/s
# Warmup Iteration  21: 965520.501 ops/s
# Warmup Iteration  22: 960913.884 ops/s
# Warmup Iteration  23: 967371.897 ops/s
# Warmup Iteration  24: 969111.354 ops/s
# Warmup Iteration  25: 967081.758 ops/s
# Warmup Iteration  26: 967843.044 ops/s
# Warmup Iteration  27: 964194.678 ops/s
# Warmup Iteration  28: 965999.568 ops/s
# Warmup Iteration  29: 964188.805 ops/s
# Warmup Iteration  30: 966687.986 ops/s
Iteration   1: 962702.968 ops/s
Iteration   2: 965351.860 ops/s
Iteration   3: 965469.917 ops/s
Iteration   4: 961658.046 ops/s
Iteration   5: 964846.867 ops/s
Iteration   6: 964233.438 ops/s
Iteration   7: 966741.286 ops/s
Iteration   8: 966830.074 ops/s
Iteration   9: 965377.342 ops/s
Iteration  10: 965075.680 ops/s
Iteration  11: 965553.970 ops/s
Iteration  12: 968029.803 ops/s
Iteration  13: 963589.381 ops/s
Iteration  14: 966085.792 ops/s
Iteration  15: 964308.793 ops/s
Iteration  16: 963203.899 ops/s
Iteration  17: 968009.035 ops/s
Iteration  18: 967725.664 ops/s
Iteration  19: 967112.048 ops/s
Iteration  20: 964601.973 ops/s
Iteration  21: 968710.472 ops/s
Iteration  22: 967335.731 ops/s
Iteration  23: 970465.724 ops/s
Iteration  24: 965752.071 ops/s
Iteration  25: 965171.498 ops/s
Iteration  26: 967833.074 ops/s
Iteration  27: 967445.917 ops/s
Iteration  28: 969922.941 ops/s
Iteration  29: 965690.299 ops/s
Iteration  30: 969492.931 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectWith":
  966144.283 ±(99.9%) 1418.421 ops/s [Average]
  (min, avg, max) = (961658.046, 966144.283, 970465.724), stdev = 2123.026
  CI (99.9%): [964725.862, 967562.704] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectWith  thrpt   30  966144.283 ± 1418.421  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 578791.034 ops/s
# Warmup Iteration   2: 1259767.342 ops/s
# Warmup Iteration   3: 1309099.811 ops/s
# Warmup Iteration   4: 1316226.815 ops/s
# Warmup Iteration   5: 1098738.685 ops/s
# Warmup Iteration   6: 1320653.898 ops/s
# Warmup Iteration   7: 1318579.504 ops/s
# Warmup Iteration   8: 1313973.579 ops/s
# Warmup Iteration   9: 1316962.474 ops/s
# Warmup Iteration  10: 1320959.390 ops/s
# Warmup Iteration  11: 1317818.043 ops/s
# Warmup Iteration  12: 1320710.943 ops/s
# Warmup Iteration  13: 1317633.043 ops/s
# Warmup Iteration  14: 1319900.123 ops/s
# Warmup Iteration  15: 1316864.468 ops/s
# Warmup Iteration  16: 1319656.321 ops/s
# Warmup Iteration  17: 1318202.472 ops/s
# Warmup Iteration  18: 1318337.527 ops/s
# Warmup Iteration  19: 1319755.259 ops/s
# Warmup Iteration  20: 1320486.484 ops/s
# Warmup Iteration  21: 1317289.354 ops/s
# Warmup Iteration  22: 1319386.189 ops/s
# Warmup Iteration  23: 1319727.520 ops/s
# Warmup Iteration  24: 1319949.839 ops/s
# Warmup Iteration  25: 1314142.997 ops/s
# Warmup Iteration  26: 1319154.921 ops/s
# Warmup Iteration  27: 1317048.940 ops/s
# Warmup Iteration  28: 1316760.556 ops/s
# Warmup Iteration  29: 1314166.504 ops/s
# Warmup Iteration  30: 1319017.954 ops/s
Iteration   1: 1316586.393 ops/s
Iteration   2: 1320869.346 ops/s
Iteration   3: 1317637.121 ops/s
Iteration   4: 1322890.062 ops/s
Iteration   5: 1319221.348 ops/s
Iteration   6: 1321750.572 ops/s
Iteration   7: 1319942.952 ops/s
Iteration   8: 1321961.147 ops/s
Iteration   9: 1317903.945 ops/s
Iteration  10: 1318544.490 ops/s
Iteration  11: 1322566.429 ops/s
Iteration  12: 1324523.343 ops/s
Iteration  13: 1316846.738 ops/s
Iteration  14: 1318603.585 ops/s
Iteration  15: 1317683.690 ops/s
Iteration  16: 1322240.820 ops/s
Iteration  17: 1318188.190 ops/s
Iteration  18: 1318878.623 ops/s
Iteration  19: 1321353.801 ops/s
Iteration  20: 1323696.090 ops/s
Iteration  21: 1319284.526 ops/s
Iteration  22: 1321567.998 ops/s
Iteration  23: 1320108.418 ops/s
Iteration  24: 1317536.141 ops/s
Iteration  25: 1318663.738 ops/s
Iteration  26: 1318557.013 ops/s
Iteration  27: 1316057.380 ops/s
Iteration  28: 1321561.452 ops/s
Iteration  29: 1317961.341 ops/s
Iteration  30: 1319687.341 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectWithIndex":
  1319762.468 ±(99.9%) 1484.651 ops/s [Average]
  (min, avg, max) = (1316057.380, 1319762.468, 1324523.343), stdev = 2222.156
  CI (99.9%): [1318277.817, 1321247.119] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectWithIndex  thrpt   30  1319762.468 ± 1484.651  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1721550.393 ops/s
# Warmup Iteration   2: 4274077.792 ops/s
# Warmup Iteration   3: 4326919.679 ops/s
# Warmup Iteration   4: 3634704.196 ops/s
# Warmup Iteration   5: 4338327.058 ops/s
# Warmup Iteration   6: 4343560.524 ops/s
# Warmup Iteration   7: 4346138.497 ops/s
# Warmup Iteration   8: 4349081.725 ops/s
# Warmup Iteration   9: 4334703.477 ops/s
# Warmup Iteration  10: 4334938.881 ops/s
# Warmup Iteration  11: 4339259.209 ops/s
# Warmup Iteration  12: 4345425.818 ops/s
# Warmup Iteration  13: 4350659.912 ops/s
# Warmup Iteration  14: 4346162.599 ops/s
# Warmup Iteration  15: 4356861.396 ops/s
# Warmup Iteration  16: 4349706.629 ops/s
# Warmup Iteration  17: 4344317.312 ops/s
# Warmup Iteration  18: 4348680.916 ops/s
# Warmup Iteration  19: 4354369.240 ops/s
# Warmup Iteration  20: 4342561.198 ops/s
# Warmup Iteration  21: 4316330.688 ops/s
# Warmup Iteration  22: 4349305.805 ops/s
# Warmup Iteration  23: 4343340.523 ops/s
# Warmup Iteration  24: 4350520.269 ops/s
# Warmup Iteration  25: 4350608.181 ops/s
# Warmup Iteration  26: 4339274.888 ops/s
# Warmup Iteration  27: 4342271.430 ops/s
# Warmup Iteration  28: 4343121.196 ops/s
# Warmup Iteration  29: 4348689.011 ops/s
# Warmup Iteration  30: 4339750.602 ops/s
Iteration   1: 4341672.498 ops/s
Iteration   2: 4336405.960 ops/s
Iteration   3: 4338371.425 ops/s
Iteration   4: 4348582.290 ops/s
Iteration   5: 4346629.631 ops/s
Iteration   6: 4345509.103 ops/s
Iteration   7: 4349113.610 ops/s
Iteration   8: 4340269.330 ops/s
Iteration   9: 4346472.797 ops/s
Iteration  10: 4357193.454 ops/s
Iteration  11: 4357986.664 ops/s
Iteration  12: 4337326.281 ops/s
Iteration  13: 4332119.525 ops/s
Iteration  14: 4320126.510 ops/s
Iteration  15: 4340768.542 ops/s
Iteration  16: 4351807.631 ops/s
Iteration  17: 4326613.120 ops/s
Iteration  18: 4333772.438 ops/s
Iteration  19: 4342969.283 ops/s
Iteration  20: 4341520.331 ops/s
Iteration  21: 4325492.056 ops/s
Iteration  22: 4338965.489 ops/s
Iteration  23: 4342551.976 ops/s
Iteration  24: 4340659.567 ops/s
Iteration  25: 4354018.446 ops/s
Iteration  26: 4342427.903 ops/s
Iteration  27: 4349239.396 ops/s
Iteration  28: 4346630.768 ops/s
Iteration  29: 4345690.023 ops/s
Iteration  30: 4325850.740 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectWithIndexWithTarget":
  4341558.559 ±(99.9%) 6145.651 ops/s [Average]
  (min, avg, max) = (4320126.510, 4341558.559, 4357986.664), stdev = 9198.522
  CI (99.9%): [4335412.909, 4347704.210] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  4341558.559 ± 6145.651  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 200727.026 ops/s
# Warmup Iteration   2: 353189.818 ops/s
# Warmup Iteration   3: 435024.865 ops/s
# Warmup Iteration   4: 437342.624 ops/s
# Warmup Iteration   5: 436789.079 ops/s
# Warmup Iteration   6: 411278.257 ops/s
# Warmup Iteration   7: 389860.459 ops/s
# Warmup Iteration   8: 436298.517 ops/s
# Warmup Iteration   9: 436907.655 ops/s
# Warmup Iteration  10: 436423.383 ops/s
# Warmup Iteration  11: 436358.194 ops/s
# Warmup Iteration  12: 436938.716 ops/s
# Warmup Iteration  13: 436861.677 ops/s
# Warmup Iteration  14: 436572.564 ops/s
# Warmup Iteration  15: 436843.407 ops/s
# Warmup Iteration  16: 436608.829 ops/s
# Warmup Iteration  17: 435702.821 ops/s
# Warmup Iteration  18: 435030.537 ops/s
# Warmup Iteration  19: 435925.138 ops/s
# Warmup Iteration  20: 435420.088 ops/s
# Warmup Iteration  21: 435932.280 ops/s
# Warmup Iteration  22: 434739.794 ops/s
# Warmup Iteration  23: 436498.960 ops/s
# Warmup Iteration  24: 436089.428 ops/s
# Warmup Iteration  25: 435988.594 ops/s
# Warmup Iteration  26: 436297.353 ops/s
# Warmup Iteration  27: 435426.711 ops/s
# Warmup Iteration  28: 436358.937 ops/s
# Warmup Iteration  29: 436575.612 ops/s
# Warmup Iteration  30: 436723.039 ops/s
Iteration   1: 437731.074 ops/s
Iteration   2: 436369.784 ops/s
Iteration   3: 437073.098 ops/s
Iteration   4: 435685.304 ops/s
Iteration   5: 437195.255 ops/s
Iteration   6: 436019.798 ops/s
Iteration   7: 436023.720 ops/s
Iteration   8: 434965.539 ops/s
Iteration   9: 437235.741 ops/s
Iteration  10: 435756.519 ops/s
Iteration  11: 437666.186 ops/s
Iteration  12: 432491.084 ops/s
Iteration  13: 437130.694 ops/s
Iteration  14: 436859.194 ops/s
Iteration  15: 436888.554 ops/s
Iteration  16: 435630.469 ops/s
Iteration  17: 436388.283 ops/s
Iteration  18: 435538.785 ops/s
Iteration  19: 437669.169 ops/s
Iteration  20: 436909.698 ops/s
Iteration  21: 435796.232 ops/s
Iteration  22: 436811.100 ops/s
Iteration  23: 437032.161 ops/s
Iteration  24: 434324.128 ops/s
Iteration  25: 437301.144 ops/s
Iteration  26: 435955.358 ops/s
Iteration  27: 436136.697 ops/s
Iteration  28: 436391.929 ops/s
Iteration  29: 434957.009 ops/s
Iteration  30: 435604.519 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectWithOccurrences":
  436251.274 ±(99.9%) 747.171 ops/s [Average]
  (min, avg, max) = (432491.084, 436251.274, 437731.074), stdev = 1118.330
  CI (99.9%): [435504.103, 436998.445] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_collectWithOccurrences  thrpt   30  436251.274 ± 747.171  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 79249.704 ops/s
# Warmup Iteration   2: 137877.850 ops/s
# Warmup Iteration   3: 174590.040 ops/s
# Warmup Iteration   4: 173638.689 ops/s
# Warmup Iteration   5: 174619.938 ops/s
# Warmup Iteration   6: 174431.298 ops/s
# Warmup Iteration   7: 144854.422 ops/s
# Warmup Iteration   8: 174468.268 ops/s
# Warmup Iteration   9: 174261.324 ops/s
# Warmup Iteration  10: 174481.130 ops/s
# Warmup Iteration  11: 174409.159 ops/s
# Warmup Iteration  12: 174466.180 ops/s
# Warmup Iteration  13: 174504.453 ops/s
# Warmup Iteration  14: 174546.552 ops/s
# Warmup Iteration  15: 174540.953 ops/s
# Warmup Iteration  16: 174409.091 ops/s
# Warmup Iteration  17: 174925.932 ops/s
# Warmup Iteration  18: 174632.725 ops/s
# Warmup Iteration  19: 174572.758 ops/s
# Warmup Iteration  20: 174521.637 ops/s
# Warmup Iteration  21: 174753.292 ops/s
# Warmup Iteration  22: 174549.704 ops/s
# Warmup Iteration  23: 174538.942 ops/s
# Warmup Iteration  24: 174567.262 ops/s
# Warmup Iteration  25: 174648.626 ops/s
# Warmup Iteration  26: 174530.122 ops/s
# Warmup Iteration  27: 174504.926 ops/s
# Warmup Iteration  28: 174418.057 ops/s
# Warmup Iteration  29: 174292.345 ops/s
# Warmup Iteration  30: 174074.317 ops/s
Iteration   1: 174239.719 ops/s
Iteration   2: 174458.898 ops/s
Iteration   3: 174675.656 ops/s
Iteration   4: 174206.400 ops/s
Iteration   5: 174857.091 ops/s
Iteration   6: 174325.412 ops/s
Iteration   7: 174570.400 ops/s
Iteration   8: 174445.945 ops/s
Iteration   9: 174873.318 ops/s
Iteration  10: 174477.944 ops/s
Iteration  11: 174823.971 ops/s
Iteration  12: 173984.498 ops/s
Iteration  13: 174869.504 ops/s
Iteration  14: 174332.960 ops/s
Iteration  15: 174806.013 ops/s
Iteration  16: 174323.992 ops/s
Iteration  17: 174657.013 ops/s
Iteration  18: 173144.031 ops/s
Iteration  19: 174689.495 ops/s
Iteration  20: 174585.483 ops/s
Iteration  21: 175107.007 ops/s
Iteration  22: 174710.506 ops/s
Iteration  23: 174669.074 ops/s
Iteration  24: 173836.220 ops/s
Iteration  25: 174726.418 ops/s
Iteration  26: 174524.318 ops/s
Iteration  27: 174281.965 ops/s
Iteration  28: 174016.959 ops/s
Iteration  29: 174813.715 ops/s
Iteration  30: 174436.444 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_collectWith_target":
  174482.346 ±(99.9%) 259.243 ops/s [Average]
  (min, avg, max) = (173144.031, 174482.346, 175107.007), stdev = 388.023
  CI (99.9%): [174223.103, 174741.589] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_collectWith_target  thrpt   30  174482.346 ± 259.243  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_compareTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_compareTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 111428.784 ops/s
# Warmup Iteration   2: 164356.242 ops/s
# Warmup Iteration   3: 192940.079 ops/s
# Warmup Iteration   4: 193590.861 ops/s
# Warmup Iteration   5: 193312.359 ops/s
# Warmup Iteration   6: 194197.552 ops/s
# Warmup Iteration   7: 162797.154 ops/s
# Warmup Iteration   8: 193979.999 ops/s
# Warmup Iteration   9: 193575.942 ops/s
# Warmup Iteration  10: 193538.258 ops/s
# Warmup Iteration  11: 193449.766 ops/s
# Warmup Iteration  12: 193432.504 ops/s
# Warmup Iteration  13: 193584.160 ops/s
# Warmup Iteration  14: 193875.411 ops/s
# Warmup Iteration  15: 193621.207 ops/s
# Warmup Iteration  16: 193136.287 ops/s
# Warmup Iteration  17: 193764.220 ops/s
# Warmup Iteration  18: 193624.177 ops/s
# Warmup Iteration  19: 193440.496 ops/s
# Warmup Iteration  20: 193808.985 ops/s
# Warmup Iteration  21: 193837.484 ops/s
# Warmup Iteration  22: 193976.045 ops/s
# Warmup Iteration  23: 193359.147 ops/s
# Warmup Iteration  24: 193713.552 ops/s
# Warmup Iteration  25: 193746.883 ops/s
# Warmup Iteration  26: 193153.186 ops/s
# Warmup Iteration  27: 193809.185 ops/s
# Warmup Iteration  28: 193774.168 ops/s
# Warmup Iteration  29: 194024.185 ops/s
# Warmup Iteration  30: 193633.570 ops/s
Iteration   1: 193871.273 ops/s
Iteration   2: 193497.671 ops/s
Iteration   3: 194618.849 ops/s
Iteration   4: 194252.775 ops/s
Iteration   5: 193604.066 ops/s
Iteration   6: 194199.646 ops/s
Iteration   7: 194100.472 ops/s
Iteration   8: 194197.922 ops/s
Iteration   9: 194084.847 ops/s
Iteration  10: 193736.568 ops/s
Iteration  11: 193391.613 ops/s
Iteration  12: 194041.286 ops/s
Iteration  13: 193623.063 ops/s
Iteration  14: 194066.966 ops/s
Iteration  15: 193874.327 ops/s
Iteration  16: 193763.838 ops/s
Iteration  17: 194189.352 ops/s
Iteration  18: 191840.458 ops/s
Iteration  19: 193913.712 ops/s
Iteration  20: 194047.972 ops/s
Iteration  21: 193365.277 ops/s
Iteration  22: 194548.255 ops/s
Iteration  23: 193359.191 ops/s
Iteration  24: 194270.207 ops/s
Iteration  25: 193223.667 ops/s
Iteration  26: 193930.730 ops/s
Iteration  27: 193738.854 ops/s
Iteration  28: 193990.459 ops/s
Iteration  29: 194154.760 ops/s
Iteration  30: 193324.312 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_compareTo":
  193827.413 ±(99.9%) 346.213 ops/s [Average]
  (min, avg, max) = (191840.458, 193827.413, 194618.849), stdev = 518.195
  CI (99.9%): [193481.200, 194173.626] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_compareTo  thrpt   30  193827.413 ± 346.213  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2411202.249 ops/s
# Warmup Iteration   2: 4500518.157 ops/s
# Warmup Iteration   3: 4739578.818 ops/s
# Warmup Iteration   4: 4788592.525 ops/s
# Warmup Iteration   5: 4013831.916 ops/s
# Warmup Iteration   6: 4785952.852 ops/s
# Warmup Iteration   7: 4780350.655 ops/s
# Warmup Iteration   8: 4782951.762 ops/s
# Warmup Iteration   9: 4778418.564 ops/s
# Warmup Iteration  10: 4788537.632 ops/s
# Warmup Iteration  11: 4797373.678 ops/s
# Warmup Iteration  12: 4782183.824 ops/s
# Warmup Iteration  13: 4794873.924 ops/s
# Warmup Iteration  14: 4801506.345 ops/s
# Warmup Iteration  15: 4800427.029 ops/s
# Warmup Iteration  16: 4783502.585 ops/s
# Warmup Iteration  17: 4759219.825 ops/s
# Warmup Iteration  18: 4752278.617 ops/s
# Warmup Iteration  19: 4750819.919 ops/s
# Warmup Iteration  20: 4767235.765 ops/s
# Warmup Iteration  21: 4756170.657 ops/s
# Warmup Iteration  22: 4753203.973 ops/s
# Warmup Iteration  23: 4747205.329 ops/s
# Warmup Iteration  24: 4753263.295 ops/s
# Warmup Iteration  25: 4759696.090 ops/s
# Warmup Iteration  26: 4753989.823 ops/s
# Warmup Iteration  27: 4756129.419 ops/s
# Warmup Iteration  28: 4755696.860 ops/s
# Warmup Iteration  29: 4755457.531 ops/s
# Warmup Iteration  30: 4750705.127 ops/s
Iteration   1: 4762287.243 ops/s
Iteration   2: 4747596.482 ops/s
Iteration   3: 4743816.457 ops/s
Iteration   4: 4747886.596 ops/s
Iteration   5: 4753787.683 ops/s
Iteration   6: 4735873.495 ops/s
Iteration   7: 4757642.935 ops/s
Iteration   8: 4758722.984 ops/s
Iteration   9: 4762618.127 ops/s
Iteration  10: 4768248.753 ops/s
Iteration  11: 4761289.867 ops/s
Iteration  12: 4764411.715 ops/s
Iteration  13: 4754708.568 ops/s
Iteration  14: 4758905.735 ops/s
Iteration  15: 4760878.866 ops/s
Iteration  16: 4755939.420 ops/s
Iteration  17: 4755128.668 ops/s
Iteration  18: 4758042.919 ops/s
Iteration  19: 4752750.574 ops/s
Iteration  20: 4764139.907 ops/s
Iteration  21: 4760593.979 ops/s
Iteration  22: 4762404.224 ops/s
Iteration  23: 4775723.985 ops/s
Iteration  24: 4759887.740 ops/s
Iteration  25: 4753866.996 ops/s
Iteration  26: 4774960.600 ops/s
Iteration  27: 4759014.184 ops/s
Iteration  28: 4746972.544 ops/s
Iteration  29: 4766788.642 ops/s
Iteration  30: 4760868.867 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_contains":
  4758191.959 ±(99.9%) 5644.093 ops/s [Average]
  (min, avg, max) = (4735873.495, 4758191.959, 4775723.985), stdev = 8447.814
  CI (99.9%): [4752547.865, 4763836.052] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_contains  thrpt   30  4758191.959 ± 5644.093  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 991987.349 ops/s
# Warmup Iteration   2: 1720649.913 ops/s
# Warmup Iteration   3: 1890806.409 ops/s
# Warmup Iteration   4: 1900619.560 ops/s
# Warmup Iteration   5: 1900390.179 ops/s
# Warmup Iteration   6: 1592077.370 ops/s
# Warmup Iteration   7: 1906097.752 ops/s
# Warmup Iteration   8: 1903371.137 ops/s
# Warmup Iteration   9: 1901351.324 ops/s
# Warmup Iteration  10: 1898945.886 ops/s
# Warmup Iteration  11: 1902390.459 ops/s
# Warmup Iteration  12: 1901709.187 ops/s
# Warmup Iteration  13: 1905324.220 ops/s
# Warmup Iteration  14: 1896038.899 ops/s
# Warmup Iteration  15: 1895741.506 ops/s
# Warmup Iteration  16: 1890156.926 ops/s
# Warmup Iteration  17: 1903432.475 ops/s
# Warmup Iteration  18: 1899367.206 ops/s
# Warmup Iteration  19: 1902280.100 ops/s
# Warmup Iteration  20: 1902935.709 ops/s
# Warmup Iteration  21: 1899887.599 ops/s
# Warmup Iteration  22: 1899930.815 ops/s
# Warmup Iteration  23: 1897089.181 ops/s
# Warmup Iteration  24: 1902242.392 ops/s
# Warmup Iteration  25: 1900159.852 ops/s
# Warmup Iteration  26: 1900912.879 ops/s
# Warmup Iteration  27: 1903165.068 ops/s
# Warmup Iteration  28: 1902960.105 ops/s
# Warmup Iteration  29: 1904772.026 ops/s
# Warmup Iteration  30: 1904407.218 ops/s
Iteration   1: 1900824.200 ops/s
Iteration   2: 1895291.357 ops/s
Iteration   3: 1902138.135 ops/s
Iteration   4: 1893380.100 ops/s
Iteration   5: 1899597.149 ops/s
Iteration   6: 1903309.017 ops/s
Iteration   7: 1904553.708 ops/s
Iteration   8: 1892637.486 ops/s
Iteration   9: 1901757.516 ops/s
Iteration  10: 1909463.426 ops/s
Iteration  11: 1897552.710 ops/s
Iteration  12: 1908093.564 ops/s
Iteration  13: 1904242.500 ops/s
Iteration  14: 1904335.644 ops/s
Iteration  15: 1898564.688 ops/s
Iteration  16: 1894199.729 ops/s
Iteration  17: 1900082.710 ops/s
Iteration  18: 1900382.382 ops/s
Iteration  19: 1904692.216 ops/s
Iteration  20: 1900867.984 ops/s
Iteration  21: 1904171.211 ops/s
Iteration  22: 1897838.338 ops/s
Iteration  23: 1901791.187 ops/s
Iteration  24: 1906261.288 ops/s
Iteration  25: 1903718.760 ops/s
Iteration  26: 1905677.764 ops/s
Iteration  27: 1895879.264 ops/s
Iteration  28: 1893349.300 ops/s
Iteration  29: 1895480.383 ops/s
Iteration  30: 1892849.413 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsAllArray":
  1900432.771 ±(99.9%) 3174.149 ops/s [Average]
  (min, avg, max) = (1892637.486, 1900432.771, 1909463.426), stdev = 4750.917
  CI (99.9%): [1897258.622, 1903606.920] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_containsAllArray  thrpt   30  1900432.771 ± 3174.149  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsAllCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsAllCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2241219.839 ops/s
# Warmup Iteration   2: 4613623.226 ops/s
# Warmup Iteration   3: 4793504.521 ops/s
# Warmup Iteration   4: 4812921.787 ops/s
# Warmup Iteration   5: 4060091.056 ops/s
# Warmup Iteration   6: 4801436.142 ops/s
# Warmup Iteration   7: 4818008.536 ops/s
# Warmup Iteration   8: 4822919.475 ops/s
# Warmup Iteration   9: 4823007.407 ops/s
# Warmup Iteration  10: 4816989.356 ops/s
# Warmup Iteration  11: 4815407.773 ops/s
# Warmup Iteration  12: 4823123.873 ops/s
# Warmup Iteration  13: 4820979.663 ops/s
# Warmup Iteration  14: 4824217.857 ops/s
# Warmup Iteration  15: 4826855.784 ops/s
# Warmup Iteration  16: 4825347.843 ops/s
# Warmup Iteration  17: 4828502.457 ops/s
# Warmup Iteration  18: 4828573.788 ops/s
# Warmup Iteration  19: 4825263.220 ops/s
# Warmup Iteration  20: 4825023.416 ops/s
# Warmup Iteration  21: 4827149.871 ops/s
# Warmup Iteration  22: 4830537.707 ops/s
# Warmup Iteration  23: 4824341.472 ops/s
# Warmup Iteration  24: 4822151.122 ops/s
# Warmup Iteration  25: 4823480.744 ops/s
# Warmup Iteration  26: 4815100.138 ops/s
# Warmup Iteration  27: 4809430.566 ops/s
# Warmup Iteration  28: 4820742.690 ops/s
# Warmup Iteration  29: 4827478.468 ops/s
# Warmup Iteration  30: 4821083.785 ops/s
Iteration   1: 4837937.060 ops/s
Iteration   2: 4820968.860 ops/s
Iteration   3: 4836620.622 ops/s
Iteration   4: 4838173.157 ops/s
Iteration   5: 4840667.143 ops/s
Iteration   6: 4836855.041 ops/s
Iteration   7: 4820057.736 ops/s
Iteration   8: 4831342.223 ops/s
Iteration   9: 4838626.920 ops/s
Iteration  10: 4826418.739 ops/s
Iteration  11: 4830921.869 ops/s
Iteration  12: 4825173.380 ops/s
Iteration  13: 4827669.554 ops/s
Iteration  14: 4824474.329 ops/s
Iteration  15: 4830126.902 ops/s
Iteration  16: 4825181.316 ops/s
Iteration  17: 4818945.554 ops/s
Iteration  18: 4825321.953 ops/s
Iteration  19: 4823870.786 ops/s
Iteration  20: 4843538.678 ops/s
Iteration  21: 4819267.088 ops/s
Iteration  22: 4816405.760 ops/s
Iteration  23: 4823361.768 ops/s
Iteration  24: 4838467.126 ops/s
Iteration  25: 4834543.937 ops/s
Iteration  26: 4825016.819 ops/s
Iteration  27: 4836458.130 ops/s
Iteration  28: 4813132.036 ops/s
Iteration  29: 4809753.492 ops/s
Iteration  30: 4821986.608 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsAllCollection":
  4828042.820 ±(99.9%) 5817.671 ops/s [Average]
  (min, avg, max) = (4809753.492, 4828042.820, 4843538.678), stdev = 8707.617
  CI (99.9%): [4822225.148, 4833860.491] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_containsAllCollection  thrpt   30  4828042.820 ± 5817.671  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 986220.182 ops/s
# Warmup Iteration   2: 1810057.454 ops/s
# Warmup Iteration   3: 2014232.031 ops/s
# Warmup Iteration   4: 2032565.852 ops/s
# Warmup Iteration   5: 1855489.696 ops/s
# Warmup Iteration   6: 1862075.050 ops/s
# Warmup Iteration   7: 2033242.636 ops/s
# Warmup Iteration   8: 2033163.373 ops/s
# Warmup Iteration   9: 2029619.102 ops/s
# Warmup Iteration  10: 2029012.486 ops/s
# Warmup Iteration  11: 2034102.611 ops/s
# Warmup Iteration  12: 2028265.520 ops/s
# Warmup Iteration  13: 2026760.759 ops/s
# Warmup Iteration  14: 2036850.769 ops/s
# Warmup Iteration  15: 2025897.339 ops/s
# Warmup Iteration  16: 2030677.057 ops/s
# Warmup Iteration  17: 2026610.368 ops/s
# Warmup Iteration  18: 2025592.945 ops/s
# Warmup Iteration  19: 2031818.447 ops/s
# Warmup Iteration  20: 2029416.047 ops/s
# Warmup Iteration  21: 2032705.727 ops/s
# Warmup Iteration  22: 2030036.119 ops/s
# Warmup Iteration  23: 2026836.631 ops/s
# Warmup Iteration  24: 2026760.087 ops/s
# Warmup Iteration  25: 2023649.531 ops/s
# Warmup Iteration  26: 2029893.268 ops/s
# Warmup Iteration  27: 2027119.669 ops/s
# Warmup Iteration  28: 2031282.683 ops/s
# Warmup Iteration  29: 2031736.185 ops/s
# Warmup Iteration  30: 2033020.057 ops/s
Iteration   1: 2033214.213 ops/s
Iteration   2: 2029867.431 ops/s
Iteration   3: 2030259.392 ops/s
Iteration   4: 2028978.409 ops/s
Iteration   5: 2035827.291 ops/s
Iteration   6: 2029880.740 ops/s
Iteration   7: 2032462.221 ops/s
Iteration   8: 2030612.803 ops/s
Iteration   9: 2029416.467 ops/s
Iteration  10: 2038481.583 ops/s
Iteration  11: 2029754.967 ops/s
Iteration  12: 2033187.148 ops/s
Iteration  13: 2034337.226 ops/s
Iteration  14: 2033156.407 ops/s
Iteration  15: 2035298.531 ops/s
Iteration  16: 2027533.992 ops/s
Iteration  17: 2030558.187 ops/s
Iteration  18: 2032482.074 ops/s
Iteration  19: 2030354.880 ops/s
Iteration  20: 2020039.024 ops/s
Iteration  21: 2037307.615 ops/s
Iteration  22: 2024867.207 ops/s
Iteration  23: 2028470.794 ops/s
Iteration  24: 2034811.489 ops/s
Iteration  25: 2032670.496 ops/s
Iteration  26: 2034170.192 ops/s
Iteration  27: 2029956.567 ops/s
Iteration  28: 2028369.418 ops/s
Iteration  29: 2029734.441 ops/s
Iteration  30: 2029875.866 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsAllIterable":
  2031197.902 ±(99.9%) 2458.154 ops/s [Average]
  (min, avg, max) = (2020039.024, 2031197.902, 2038481.583), stdev = 3679.250
  CI (99.9%): [2028739.748, 2033656.057] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_containsAllIterable  thrpt   30  2031197.902 ± 2458.154  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 36851.099 ops/s
# Warmup Iteration   2: 47578.793 ops/s
# Warmup Iteration   3: 61289.664 ops/s
# Warmup Iteration   4: 60970.519 ops/s
# Warmup Iteration   5: 61304.737 ops/s
# Warmup Iteration   6: 61123.077 ops/s
# Warmup Iteration   7: 61207.814 ops/s
# Warmup Iteration   8: 61173.689 ops/s
# Warmup Iteration   9: 52143.391 ops/s
# Warmup Iteration  10: 60761.124 ops/s
# Warmup Iteration  11: 61219.598 ops/s
# Warmup Iteration  12: 61305.675 ops/s
# Warmup Iteration  13: 61202.816 ops/s
# Warmup Iteration  14: 61323.575 ops/s
# Warmup Iteration  15: 61388.904 ops/s
# Warmup Iteration  16: 61364.769 ops/s
# Warmup Iteration  17: 61364.433 ops/s
# Warmup Iteration  18: 61255.046 ops/s
# Warmup Iteration  19: 61311.076 ops/s
# Warmup Iteration  20: 61207.775 ops/s
# Warmup Iteration  21: 61280.450 ops/s
# Warmup Iteration  22: 61250.994 ops/s
# Warmup Iteration  23: 61128.812 ops/s
# Warmup Iteration  24: 61385.696 ops/s
# Warmup Iteration  25: 61193.163 ops/s
# Warmup Iteration  26: 61272.580 ops/s
# Warmup Iteration  27: 61241.377 ops/s
# Warmup Iteration  28: 61367.868 ops/s
# Warmup Iteration  29: 61114.034 ops/s
# Warmup Iteration  30: 61352.527 ops/s
Iteration   1: 61352.099 ops/s
Iteration   2: 61279.691 ops/s
Iteration   3: 61307.092 ops/s
Iteration   4: 61126.840 ops/s
Iteration   5: 61350.521 ops/s
Iteration   6: 61475.125 ops/s
Iteration   7: 61130.404 ops/s
Iteration   8: 61409.602 ops/s
Iteration   9: 61423.553 ops/s
Iteration  10: 61250.464 ops/s
Iteration  11: 61307.957 ops/s
Iteration  12: 61244.396 ops/s
Iteration  13: 61181.201 ops/s
Iteration  14: 61020.001 ops/s
Iteration  15: 61264.215 ops/s
Iteration  16: 61191.059 ops/s
Iteration  17: 61097.620 ops/s
Iteration  18: 61406.781 ops/s
Iteration  19: 61307.695 ops/s
Iteration  20: 61305.642 ops/s
Iteration  21: 61111.107 ops/s
Iteration  22: 61206.536 ops/s
Iteration  23: 61368.921 ops/s
Iteration  24: 61375.051 ops/s
Iteration  25: 61068.955 ops/s
Iteration  26: 61352.882 ops/s
Iteration  27: 61463.700 ops/s
Iteration  28: 61053.105 ops/s
Iteration  29: 61426.778 ops/s
Iteration  30: 61321.690 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsAnyCollection":
  61272.689 ±(99.9%) 85.869 ops/s [Average]
  (min, avg, max) = (61020.001, 61272.689, 61475.125), stdev = 128.525
  CI (99.9%): [61186.820, 61358.559] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt      Score    Error  Units
TreeBagTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  61272.689 ± 85.869  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 35366.925 ops/s
# Warmup Iteration   2: 44102.813 ops/s
# Warmup Iteration   3: 57506.528 ops/s
# Warmup Iteration   4: 57812.385 ops/s
# Warmup Iteration   5: 57330.510 ops/s
# Warmup Iteration   6: 57720.944 ops/s
# Warmup Iteration   7: 57711.972 ops/s
# Warmup Iteration   8: 57627.795 ops/s
# Warmup Iteration   9: 56215.317 ops/s
# Warmup Iteration  10: 49940.193 ops/s
# Warmup Iteration  11: 57688.244 ops/s
# Warmup Iteration  12: 57626.466 ops/s
# Warmup Iteration  13: 57657.916 ops/s
# Warmup Iteration  14: 57626.534 ops/s
# Warmup Iteration  15: 57722.422 ops/s
# Warmup Iteration  16: 57738.699 ops/s
# Warmup Iteration  17: 57738.154 ops/s
# Warmup Iteration  18: 57654.756 ops/s
# Warmup Iteration  19: 57640.089 ops/s
# Warmup Iteration  20: 57700.393 ops/s
# Warmup Iteration  21: 57530.147 ops/s
# Warmup Iteration  22: 57598.983 ops/s
# Warmup Iteration  23: 57430.327 ops/s
# Warmup Iteration  24: 57671.441 ops/s
# Warmup Iteration  25: 57584.067 ops/s
# Warmup Iteration  26: 57719.789 ops/s
# Warmup Iteration  27: 57691.936 ops/s
# Warmup Iteration  28: 57570.351 ops/s
# Warmup Iteration  29: 57601.282 ops/s
# Warmup Iteration  30: 57592.774 ops/s
Iteration   1: 57546.486 ops/s
Iteration   2: 57772.453 ops/s
Iteration   3: 57792.943 ops/s
Iteration   4: 57491.688 ops/s
Iteration   5: 57793.575 ops/s
Iteration   6: 57835.336 ops/s
Iteration   7: 57473.421 ops/s
Iteration   8: 57756.488 ops/s
Iteration   9: 57640.826 ops/s
Iteration  10: 57545.715 ops/s
Iteration  11: 57844.161 ops/s
Iteration  12: 57647.634 ops/s
Iteration  13: 57854.598 ops/s
Iteration  14: 57631.544 ops/s
Iteration  15: 57710.424 ops/s
Iteration  16: 57733.061 ops/s
Iteration  17: 57767.925 ops/s
Iteration  18: 57641.005 ops/s
Iteration  19: 57655.094 ops/s
Iteration  20: 57678.783 ops/s
Iteration  21: 57667.348 ops/s
Iteration  22: 57761.899 ops/s
Iteration  23: 57625.736 ops/s
Iteration  24: 57767.083 ops/s
Iteration  25: 57668.978 ops/s
Iteration  26: 57363.874 ops/s
Iteration  27: 57331.561 ops/s
Iteration  28: 57781.723 ops/s
Iteration  29: 57577.269 ops/s
Iteration  30: 57614.444 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsAnyIterable":
  57665.769 ±(99.9%) 88.786 ops/s [Average]
  (min, avg, max) = (57331.561, 57665.769, 57854.598), stdev = 132.891
  CI (99.9%): [57576.983, 57754.555] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt      Score    Error  Units
TreeBagTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  57665.769 ± 88.786  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 662912.902 ops/s
# Warmup Iteration   2: 703787.725 ops/s
# Warmup Iteration   3: 863918.083 ops/s
# Warmup Iteration   4: 909465.064 ops/s
# Warmup Iteration   5: 909217.580 ops/s
# Warmup Iteration   6: 904054.034 ops/s
# Warmup Iteration   7: 912429.989 ops/s
# Warmup Iteration   8: 910638.166 ops/s
# Warmup Iteration   9: 906883.257 ops/s
# Warmup Iteration  10: 906207.161 ops/s
# Warmup Iteration  11: 906672.832 ops/s
# Warmup Iteration  12: 911235.406 ops/s
# Warmup Iteration  13: 784249.429 ops/s
# Warmup Iteration  14: 881270.243 ops/s
# Warmup Iteration  15: 910249.376 ops/s
# Warmup Iteration  16: 906472.951 ops/s
# Warmup Iteration  17: 961817.771 ops/s
# Warmup Iteration  18: 954115.119 ops/s
# Warmup Iteration  19: 961376.974 ops/s
# Warmup Iteration  20: 959594.999 ops/s
# Warmup Iteration  21: 955109.820 ops/s
# Warmup Iteration  22: 960364.727 ops/s
# Warmup Iteration  23: 958652.501 ops/s
# Warmup Iteration  24: 959978.283 ops/s
# Warmup Iteration  25: 960126.962 ops/s
# Warmup Iteration  26: 961529.646 ops/s
# Warmup Iteration  27: 952910.714 ops/s
# Warmup Iteration  28: 961082.676 ops/s
# Warmup Iteration  29: 959543.389 ops/s
# Warmup Iteration  30: 963851.541 ops/s
Iteration   1: 958454.909 ops/s
Iteration   2: 956631.464 ops/s
Iteration   3: 960849.612 ops/s
Iteration   4: 958315.342 ops/s
Iteration   5: 960962.299 ops/s
Iteration   6: 963343.867 ops/s
Iteration   7: 958293.544 ops/s
Iteration   8: 959129.232 ops/s
Iteration   9: 957066.044 ops/s
Iteration  10: 954904.808 ops/s
Iteration  11: 962902.836 ops/s
Iteration  12: 963554.488 ops/s
Iteration  13: 959004.898 ops/s
Iteration  14: 955938.392 ops/s
Iteration  15: 957043.669 ops/s
Iteration  16: 959670.783 ops/s
Iteration  17: 957596.542 ops/s
Iteration  18: 965341.788 ops/s
Iteration  19: 961722.988 ops/s
Iteration  20: 964343.004 ops/s
Iteration  21: 962613.625 ops/s
Iteration  22: 961385.380 ops/s
Iteration  23: 952946.934 ops/s
Iteration  24: 963829.135 ops/s
Iteration  25: 956317.427 ops/s
Iteration  26: 953730.865 ops/s
Iteration  27: 954165.890 ops/s
Iteration  28: 951240.519 ops/s
Iteration  29: 960487.622 ops/s
Iteration  30: 956962.032 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsBy":
  958958.331 ±(99.9%) 2433.962 ops/s [Average]
  (min, avg, max) = (951240.519, 958958.331, 965341.788), stdev = 3643.041
  CI (99.9%): [956524.369, 961392.294] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_containsBy  thrpt   30  958958.331 ± 2433.962  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 36333.146 ops/s
# Warmup Iteration   2: 47066.637 ops/s
# Warmup Iteration   3: 60927.207 ops/s
# Warmup Iteration   4: 60642.490 ops/s
# Warmup Iteration   5: 61063.716 ops/s
# Warmup Iteration   6: 61052.715 ops/s
# Warmup Iteration   7: 60858.784 ops/s
# Warmup Iteration   8: 60874.119 ops/s
# Warmup Iteration   9: 52448.801 ops/s
# Warmup Iteration  10: 59896.563 ops/s
# Warmup Iteration  11: 61009.104 ops/s
# Warmup Iteration  12: 60932.612 ops/s
# Warmup Iteration  13: 61028.580 ops/s
# Warmup Iteration  14: 60954.077 ops/s
# Warmup Iteration  15: 61152.296 ops/s
# Warmup Iteration  16: 61035.795 ops/s
# Warmup Iteration  17: 60993.406 ops/s
# Warmup Iteration  18: 61027.484 ops/s
# Warmup Iteration  19: 60898.108 ops/s
# Warmup Iteration  20: 60846.164 ops/s
# Warmup Iteration  21: 60975.993 ops/s
# Warmup Iteration  22: 60978.825 ops/s
# Warmup Iteration  23: 61071.902 ops/s
# Warmup Iteration  24: 61057.066 ops/s
# Warmup Iteration  25: 60949.859 ops/s
# Warmup Iteration  26: 60996.977 ops/s
# Warmup Iteration  27: 61195.871 ops/s
# Warmup Iteration  28: 60862.222 ops/s
# Warmup Iteration  29: 60942.576 ops/s
# Warmup Iteration  30: 61033.002 ops/s
Iteration   1: 60912.788 ops/s
Iteration   2: 61114.095 ops/s
Iteration   3: 61047.895 ops/s
Iteration   4: 61044.870 ops/s
Iteration   5: 60956.670 ops/s
Iteration   6: 60674.034 ops/s
Iteration   7: 60897.663 ops/s
Iteration   8: 61125.483 ops/s
Iteration   9: 61062.706 ops/s
Iteration  10: 60815.239 ops/s
Iteration  11: 61151.453 ops/s
Iteration  12: 60993.218 ops/s
Iteration  13: 60844.530 ops/s
Iteration  14: 60902.091 ops/s
Iteration  15: 61144.642 ops/s
Iteration  16: 60731.815 ops/s
Iteration  17: 61208.763 ops/s
Iteration  18: 61112.433 ops/s
Iteration  19: 60860.530 ops/s
Iteration  20: 61063.160 ops/s
Iteration  21: 60945.148 ops/s
Iteration  22: 60779.436 ops/s
Iteration  23: 61033.143 ops/s
Iteration  24: 60931.377 ops/s
Iteration  25: 61305.864 ops/s
Iteration  26: 61017.184 ops/s
Iteration  27: 60997.224 ops/s
Iteration  28: 60965.127 ops/s
Iteration  29: 60822.851 ops/s
Iteration  30: 61114.494 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsNoneCollection":
  60985.864 ±(99.9%) 97.502 ops/s [Average]
  (min, avg, max) = (60674.034, 60985.864, 61305.864), stdev = 145.937
  CI (99.9%): [60888.362, 61083.367] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt      Score    Error  Units
TreeBagTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  60985.864 ± 97.502  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 34842.803 ops/s
# Warmup Iteration   2: 43631.900 ops/s
# Warmup Iteration   3: 57164.849 ops/s
# Warmup Iteration   4: 57298.972 ops/s
# Warmup Iteration   5: 57045.786 ops/s
# Warmup Iteration   6: 57170.148 ops/s
# Warmup Iteration   7: 57209.756 ops/s
# Warmup Iteration   8: 57224.293 ops/s
# Warmup Iteration   9: 56490.542 ops/s
# Warmup Iteration  10: 48597.836 ops/s
# Warmup Iteration  11: 57401.155 ops/s
# Warmup Iteration  12: 57271.367 ops/s
# Warmup Iteration  13: 57211.395 ops/s
# Warmup Iteration  14: 57303.322 ops/s
# Warmup Iteration  15: 57144.044 ops/s
# Warmup Iteration  16: 57188.143 ops/s
# Warmup Iteration  17: 57248.974 ops/s
# Warmup Iteration  18: 57260.989 ops/s
# Warmup Iteration  19: 57351.041 ops/s
# Warmup Iteration  20: 57159.305 ops/s
# Warmup Iteration  21: 57222.034 ops/s
# Warmup Iteration  22: 57237.681 ops/s
# Warmup Iteration  23: 57251.136 ops/s
# Warmup Iteration  24: 57125.473 ops/s
# Warmup Iteration  25: 57232.143 ops/s
# Warmup Iteration  26: 57273.970 ops/s
# Warmup Iteration  27: 57209.669 ops/s
# Warmup Iteration  28: 57125.149 ops/s
# Warmup Iteration  29: 57189.760 ops/s
# Warmup Iteration  30: 57313.159 ops/s
Iteration   1: 57180.992 ops/s
Iteration   2: 57339.722 ops/s
Iteration   3: 57197.646 ops/s
Iteration   4: 57170.508 ops/s
Iteration   5: 57424.384 ops/s
Iteration   6: 57188.749 ops/s
Iteration   7: 57413.643 ops/s
Iteration   8: 57265.471 ops/s
Iteration   9: 57350.787 ops/s
Iteration  10: 57384.992 ops/s
Iteration  11: 57232.889 ops/s
Iteration  12: 57250.396 ops/s
Iteration  13: 57383.064 ops/s
Iteration  14: 57202.023 ops/s
Iteration  15: 57211.878 ops/s
Iteration  16: 57404.745 ops/s
Iteration  17: 57251.704 ops/s
Iteration  18: 57315.054 ops/s
Iteration  19: 57265.795 ops/s
Iteration  20: 57121.117 ops/s
Iteration  21: 57136.562 ops/s
Iteration  22: 57329.768 ops/s
Iteration  23: 56254.300 ops/s
Iteration  24: 57003.837 ops/s
Iteration  25: 57419.539 ops/s
Iteration  26: 57222.198 ops/s
Iteration  27: 57216.698 ops/s
Iteration  28: 57214.947 ops/s
Iteration  29: 57076.034 ops/s
Iteration  30: 57277.774 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_containsNoneIterable":
  57223.574 ±(99.9%) 140.988 ops/s [Average]
  (min, avg, max) = (56254.300, 57223.574, 57424.384), stdev = 211.025
  CI (99.9%): [57082.585, 57364.562] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt      Score     Error  Units
TreeBagTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  57223.574 ± 140.988  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 311304.049 ops/s
# Warmup Iteration   2: 476413.721 ops/s
# Warmup Iteration   3: 553674.832 ops/s
# Warmup Iteration   4: 555979.381 ops/s
# Warmup Iteration   5: 556973.095 ops/s
# Warmup Iteration   6: 557277.954 ops/s
# Warmup Iteration   7: 463997.469 ops/s
# Warmup Iteration   8: 557250.988 ops/s
# Warmup Iteration   9: 558234.303 ops/s
# Warmup Iteration  10: 556178.176 ops/s
# Warmup Iteration  11: 556969.972 ops/s
# Warmup Iteration  12: 558029.732 ops/s
# Warmup Iteration  13: 557394.968 ops/s
# Warmup Iteration  14: 556878.379 ops/s
# Warmup Iteration  15: 557985.195 ops/s
# Warmup Iteration  16: 557640.403 ops/s
# Warmup Iteration  17: 557027.329 ops/s
# Warmup Iteration  18: 557055.620 ops/s
# Warmup Iteration  19: 557508.433 ops/s
# Warmup Iteration  20: 558305.530 ops/s
# Warmup Iteration  21: 556697.153 ops/s
# Warmup Iteration  22: 557623.891 ops/s
# Warmup Iteration  23: 557175.345 ops/s
# Warmup Iteration  24: 557091.516 ops/s
# Warmup Iteration  25: 554216.699 ops/s
# Warmup Iteration  26: 556947.609 ops/s
# Warmup Iteration  27: 558307.725 ops/s
# Warmup Iteration  28: 557648.287 ops/s
# Warmup Iteration  29: 556790.619 ops/s
# Warmup Iteration  30: 557775.958 ops/s
Iteration   1: 556557.200 ops/s
Iteration   2: 557257.066 ops/s
Iteration   3: 555326.771 ops/s
Iteration   4: 557897.088 ops/s
Iteration   5: 557539.735 ops/s
Iteration   6: 557566.077 ops/s
Iteration   7: 556590.861 ops/s
Iteration   8: 557287.145 ops/s
Iteration   9: 558188.658 ops/s
Iteration  10: 557805.851 ops/s
Iteration  11: 556806.096 ops/s
Iteration  12: 556377.516 ops/s
Iteration  13: 555534.818 ops/s
Iteration  14: 557151.569 ops/s
Iteration  15: 556162.382 ops/s
Iteration  16: 557687.020 ops/s
Iteration  17: 559238.073 ops/s
Iteration  18: 555359.125 ops/s
Iteration  19: 557861.835 ops/s
Iteration  20: 555685.879 ops/s
Iteration  21: 556807.687 ops/s
Iteration  22: 555173.884 ops/s
Iteration  23: 557609.576 ops/s
Iteration  24: 555015.540 ops/s
Iteration  25: 558923.252 ops/s
Iteration  26: 557758.679 ops/s
Iteration  27: 556735.545 ops/s
Iteration  28: 554845.420 ops/s
Iteration  29: 558580.109 ops/s
Iteration  30: 556945.899 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_corresponds":
  556942.545 ±(99.9%) 782.682 ops/s [Average]
  (min, avg, max) = (554845.420, 556942.545, 559238.073), stdev = 1171.481
  CI (99.9%): [556159.863, 557725.227] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_corresponds  thrpt   30  556942.545 ± 782.682  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 842196.925 ops/s
# Warmup Iteration   2: 1378063.575 ops/s
# Warmup Iteration   3: 1560181.569 ops/s
# Warmup Iteration   4: 1567112.400 ops/s
# Warmup Iteration   5: 1568089.400 ops/s
# Warmup Iteration   6: 1310767.435 ops/s
# Warmup Iteration   7: 1570080.320 ops/s
# Warmup Iteration   8: 1564584.105 ops/s
# Warmup Iteration   9: 1570316.318 ops/s
# Warmup Iteration  10: 1569504.453 ops/s
# Warmup Iteration  11: 1569673.876 ops/s
# Warmup Iteration  12: 1569985.146 ops/s
# Warmup Iteration  13: 1569984.117 ops/s
# Warmup Iteration  14: 1570783.471 ops/s
# Warmup Iteration  15: 1568995.684 ops/s
# Warmup Iteration  16: 1562159.231 ops/s
# Warmup Iteration  17: 1545434.933 ops/s
# Warmup Iteration  18: 1543427.004 ops/s
# Warmup Iteration  19: 1549340.136 ops/s
# Warmup Iteration  20: 1547493.230 ops/s
# Warmup Iteration  21: 1545083.606 ops/s
# Warmup Iteration  22: 1545452.858 ops/s
# Warmup Iteration  23: 1548683.065 ops/s
# Warmup Iteration  24: 1540051.289 ops/s
# Warmup Iteration  25: 1545532.861 ops/s
# Warmup Iteration  26: 1552438.239 ops/s
# Warmup Iteration  27: 1546808.107 ops/s
# Warmup Iteration  28: 1549913.414 ops/s
# Warmup Iteration  29: 1547083.312 ops/s
# Warmup Iteration  30: 1549218.600 ops/s
Iteration   1: 1546073.885 ops/s
Iteration   2: 1547571.490 ops/s
Iteration   3: 1549208.063 ops/s
Iteration   4: 1549745.540 ops/s
Iteration   5: 1546334.962 ops/s
Iteration   6: 1546266.305 ops/s
Iteration   7: 1546808.778 ops/s
Iteration   8: 1551120.426 ops/s
Iteration   9: 1544762.572 ops/s
Iteration  10: 1546972.965 ops/s
Iteration  11: 1550347.577 ops/s
Iteration  12: 1547703.750 ops/s
Iteration  13: 1544083.099 ops/s
Iteration  14: 1545078.257 ops/s
Iteration  15: 1545700.777 ops/s
Iteration  16: 1542546.270 ops/s
Iteration  17: 1552725.093 ops/s
Iteration  18: 1545726.716 ops/s
Iteration  19: 1547782.306 ops/s
Iteration  20: 1545253.575 ops/s
Iteration  21: 1549878.907 ops/s
Iteration  22: 1546416.758 ops/s
Iteration  23: 1550376.107 ops/s
Iteration  24: 1545316.853 ops/s
Iteration  25: 1551659.393 ops/s
Iteration  26: 1543645.000 ops/s
Iteration  27: 1551030.016 ops/s
Iteration  28: 1543045.560 ops/s
Iteration  29: 1542171.088 ops/s
Iteration  30: 1545927.936 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_count":
  1547042.667 ±(99.9%) 1890.537 ops/s [Average]
  (min, avg, max) = (1542171.088, 1547042.667, 1552725.093), stdev = 2829.666
  CI (99.9%): [1545152.131, 1548933.204] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_count  thrpt   30  1547042.667 ± 1890.537  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 645763.420 ops/s
# Warmup Iteration   2: 1123067.402 ops/s
# Warmup Iteration   3: 1281530.651 ops/s
# Warmup Iteration   4: 1285293.853 ops/s
# Warmup Iteration   5: 1289215.103 ops/s
# Warmup Iteration   6: 1073420.888 ops/s
# Warmup Iteration   7: 1283619.529 ops/s
# Warmup Iteration   8: 1289219.848 ops/s
# Warmup Iteration   9: 1282020.880 ops/s
# Warmup Iteration  10: 1287293.011 ops/s
# Warmup Iteration  11: 1286170.660 ops/s
# Warmup Iteration  12: 1287517.197 ops/s
# Warmup Iteration  13: 1288157.546 ops/s
# Warmup Iteration  14: 1284283.692 ops/s
# Warmup Iteration  15: 1286697.429 ops/s
# Warmup Iteration  16: 1286772.647 ops/s
# Warmup Iteration  17: 1287715.510 ops/s
# Warmup Iteration  18: 1289731.000 ops/s
# Warmup Iteration  19: 1287098.912 ops/s
# Warmup Iteration  20: 1288664.140 ops/s
# Warmup Iteration  21: 1289342.501 ops/s
# Warmup Iteration  22: 1284641.668 ops/s
# Warmup Iteration  23: 1285368.791 ops/s
# Warmup Iteration  24: 1285707.420 ops/s
# Warmup Iteration  25: 1289506.745 ops/s
# Warmup Iteration  26: 1286737.083 ops/s
# Warmup Iteration  27: 1287110.105 ops/s
# Warmup Iteration  28: 1287093.452 ops/s
# Warmup Iteration  29: 1286641.242 ops/s
# Warmup Iteration  30: 1287275.676 ops/s
Iteration   1: 1284334.555 ops/s
Iteration   2: 1289140.108 ops/s
Iteration   3: 1284781.115 ops/s
Iteration   4: 1285102.840 ops/s
Iteration   5: 1287645.184 ops/s
Iteration   6: 1285137.030 ops/s
Iteration   7: 1290996.238 ops/s
Iteration   8: 1285881.628 ops/s
Iteration   9: 1287917.714 ops/s
Iteration  10: 1287464.404 ops/s
Iteration  11: 1287414.911 ops/s
Iteration  12: 1286494.456 ops/s
Iteration  13: 1289683.333 ops/s
Iteration  14: 1288627.437 ops/s
Iteration  15: 1286848.051 ops/s
Iteration  16: 1291870.712 ops/s
Iteration  17: 1285424.774 ops/s
Iteration  18: 1292636.383 ops/s
Iteration  19: 1288462.216 ops/s
Iteration  20: 1293751.966 ops/s
Iteration  21: 1288904.965 ops/s
Iteration  22: 1292955.477 ops/s
Iteration  23: 1283640.880 ops/s
Iteration  24: 1286254.651 ops/s
Iteration  25: 1291948.139 ops/s
Iteration  26: 1293576.159 ops/s
Iteration  27: 1284416.018 ops/s
Iteration  28: 1288219.307 ops/s
Iteration  29: 1289943.323 ops/s
Iteration  30: 1287493.326 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_countBy":
  1288232.243 ±(99.9%) 1955.977 ops/s [Average]
  (min, avg, max) = (1283640.880, 1288232.243, 1293751.966), stdev = 2927.614
  CI (99.9%): [1286276.267, 1290188.220] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_countBy  thrpt   30  1288232.243 ± 1955.977  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 218423.773 ops/s
# Warmup Iteration   2: 438232.630 ops/s
# Warmup Iteration   3: 489453.415 ops/s
# Warmup Iteration   4: 491086.413 ops/s
# Warmup Iteration   5: 409954.274 ops/s
# Warmup Iteration   6: 489855.793 ops/s
# Warmup Iteration   7: 490641.518 ops/s
# Warmup Iteration   8: 491127.816 ops/s
# Warmup Iteration   9: 489042.268 ops/s
# Warmup Iteration  10: 490961.446 ops/s
# Warmup Iteration  11: 489831.155 ops/s
# Warmup Iteration  12: 489705.211 ops/s
# Warmup Iteration  13: 490966.880 ops/s
# Warmup Iteration  14: 491107.189 ops/s
# Warmup Iteration  15: 489913.266 ops/s
# Warmup Iteration  16: 489627.188 ops/s
# Warmup Iteration  17: 490503.012 ops/s
# Warmup Iteration  18: 490202.002 ops/s
# Warmup Iteration  19: 490787.397 ops/s
# Warmup Iteration  20: 490237.049 ops/s
# Warmup Iteration  21: 490589.808 ops/s
# Warmup Iteration  22: 491293.767 ops/s
# Warmup Iteration  23: 489482.658 ops/s
# Warmup Iteration  24: 490188.544 ops/s
# Warmup Iteration  25: 489990.921 ops/s
# Warmup Iteration  26: 491696.208 ops/s
# Warmup Iteration  27: 489924.714 ops/s
# Warmup Iteration  28: 490605.030 ops/s
# Warmup Iteration  29: 491215.506 ops/s
# Warmup Iteration  30: 489837.034 ops/s
Iteration   1: 489735.500 ops/s
Iteration   2: 489648.506 ops/s
Iteration   3: 491328.825 ops/s
Iteration   4: 490068.781 ops/s
Iteration   5: 490795.804 ops/s
Iteration   6: 491993.280 ops/s
Iteration   7: 490947.948 ops/s
Iteration   8: 490850.771 ops/s
Iteration   9: 492729.986 ops/s
Iteration  10: 491034.816 ops/s
Iteration  11: 490104.405 ops/s
Iteration  12: 491824.916 ops/s
Iteration  13: 490389.442 ops/s
Iteration  14: 492148.545 ops/s
Iteration  15: 492342.389 ops/s
Iteration  16: 491677.126 ops/s
Iteration  17: 490620.905 ops/s
Iteration  18: 481765.240 ops/s
Iteration  19: 490655.113 ops/s
Iteration  20: 491555.523 ops/s
Iteration  21: 491083.711 ops/s
Iteration  22: 490855.544 ops/s
Iteration  23: 492047.301 ops/s
Iteration  24: 490408.743 ops/s
Iteration  25: 491722.395 ops/s
Iteration  26: 490340.253 ops/s
Iteration  27: 492034.658 ops/s
Iteration  28: 491504.615 ops/s
Iteration  29: 491723.743 ops/s
Iteration  30: 490852.945 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_countByEach":
  490826.391 ±(99.9%) 1259.939 ops/s [Average]
  (min, avg, max) = (481765.240, 490826.391, 492729.986), stdev = 1885.818
  CI (99.9%): [489566.452, 492086.331] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_countByEach  thrpt   30  490826.391 ± 1259.939  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 661911.142 ops/s
# Warmup Iteration   2: 1176037.033 ops/s
# Warmup Iteration   3: 1328716.572 ops/s
# Warmup Iteration   4: 1333877.373 ops/s
# Warmup Iteration   5: 1335619.770 ops/s
# Warmup Iteration   6: 1113804.179 ops/s
# Warmup Iteration   7: 1332747.331 ops/s
# Warmup Iteration   8: 1335276.368 ops/s
# Warmup Iteration   9: 1335368.074 ops/s
# Warmup Iteration  10: 1333460.962 ops/s
# Warmup Iteration  11: 1335411.328 ops/s
# Warmup Iteration  12: 1339282.092 ops/s
# Warmup Iteration  13: 1338985.289 ops/s
# Warmup Iteration  14: 1334410.320 ops/s
# Warmup Iteration  15: 1331960.878 ops/s
# Warmup Iteration  16: 1334483.443 ops/s
# Warmup Iteration  17: 1331535.263 ops/s
# Warmup Iteration  18: 1335799.534 ops/s
# Warmup Iteration  19: 1335885.808 ops/s
# Warmup Iteration  20: 1337298.007 ops/s
# Warmup Iteration  21: 1334682.314 ops/s
# Warmup Iteration  22: 1337147.907 ops/s
# Warmup Iteration  23: 1335918.518 ops/s
# Warmup Iteration  24: 1338336.729 ops/s
# Warmup Iteration  25: 1336910.222 ops/s
# Warmup Iteration  26: 1336294.591 ops/s
# Warmup Iteration  27: 1337372.518 ops/s
# Warmup Iteration  28: 1336743.548 ops/s
# Warmup Iteration  29: 1337314.743 ops/s
# Warmup Iteration  30: 1335858.047 ops/s
Iteration   1: 1340457.686 ops/s
Iteration   2: 1332049.404 ops/s
Iteration   3: 1340873.053 ops/s
Iteration   4: 1335908.430 ops/s
Iteration   5: 1337245.391 ops/s
Iteration   6: 1337624.122 ops/s
Iteration   7: 1337145.828 ops/s
Iteration   8: 1336201.863 ops/s
Iteration   9: 1334149.671 ops/s
Iteration  10: 1338594.826 ops/s
Iteration  11: 1331178.552 ops/s
Iteration  12: 1336576.979 ops/s
Iteration  13: 1330151.981 ops/s
Iteration  14: 1336494.427 ops/s
Iteration  15: 1336849.406 ops/s
Iteration  16: 1334099.835 ops/s
Iteration  17: 1338461.763 ops/s
Iteration  18: 1331785.634 ops/s
Iteration  19: 1336330.290 ops/s
Iteration  20: 1328647.689 ops/s
Iteration  21: 1332865.711 ops/s
Iteration  22: 1338959.464 ops/s
Iteration  23: 1332288.764 ops/s
Iteration  24: 1339046.136 ops/s
Iteration  25: 1333814.619 ops/s
Iteration  26: 1333555.278 ops/s
Iteration  27: 1332470.137 ops/s
Iteration  28: 1337119.506 ops/s
Iteration  29: 1339194.689 ops/s
Iteration  30: 1333159.526 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_countByWith":
  1335443.355 ±(99.9%) 2114.045 ops/s [Average]
  (min, avg, max) = (1328647.689, 1335443.355, 1340873.053), stdev = 3164.203
  CI (99.9%): [1333329.310, 1337557.400] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_countByWith  thrpt   30  1335443.355 ± 2114.045  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 748773.102 ops/s
# Warmup Iteration   2: 1305470.942 ops/s
# Warmup Iteration   3: 1455373.392 ops/s
# Warmup Iteration   4: 1460326.253 ops/s
# Warmup Iteration   5: 1463320.622 ops/s
# Warmup Iteration   6: 1221515.367 ops/s
# Warmup Iteration   7: 1463044.147 ops/s
# Warmup Iteration   8: 1464342.163 ops/s
# Warmup Iteration   9: 1459798.232 ops/s
# Warmup Iteration  10: 1462133.493 ops/s
# Warmup Iteration  11: 1461310.617 ops/s
# Warmup Iteration  12: 1461482.095 ops/s
# Warmup Iteration  13: 1463841.553 ops/s
# Warmup Iteration  14: 1462835.839 ops/s
# Warmup Iteration  15: 1462614.811 ops/s
# Warmup Iteration  16: 1462343.565 ops/s
# Warmup Iteration  17: 1461141.100 ops/s
# Warmup Iteration  18: 1457799.132 ops/s
# Warmup Iteration  19: 1460322.482 ops/s
# Warmup Iteration  20: 1458605.983 ops/s
# Warmup Iteration  21: 1460754.783 ops/s
# Warmup Iteration  22: 1460855.065 ops/s
# Warmup Iteration  23: 1458505.873 ops/s
# Warmup Iteration  24: 1460093.649 ops/s
# Warmup Iteration  25: 1464848.910 ops/s
# Warmup Iteration  26: 1462159.986 ops/s
# Warmup Iteration  27: 1464006.177 ops/s
# Warmup Iteration  28: 1466067.578 ops/s
# Warmup Iteration  29: 1466575.821 ops/s
# Warmup Iteration  30: 1458521.855 ops/s
Iteration   1: 1458284.086 ops/s
Iteration   2: 1461803.391 ops/s
Iteration   3: 1464355.176 ops/s
Iteration   4: 1460756.623 ops/s
Iteration   5: 1464226.564 ops/s
Iteration   6: 1456621.336 ops/s
Iteration   7: 1459430.864 ops/s
Iteration   8: 1461926.416 ops/s
Iteration   9: 1462820.773 ops/s
Iteration  10: 1464903.381 ops/s
Iteration  11: 1455373.593 ops/s
Iteration  12: 1465488.078 ops/s
Iteration  13: 1460106.911 ops/s
Iteration  14: 1461725.229 ops/s
Iteration  15: 1464564.523 ops/s
Iteration  16: 1464111.572 ops/s
Iteration  17: 1458114.007 ops/s
Iteration  18: 1459732.572 ops/s
Iteration  19: 1462511.252 ops/s
Iteration  20: 1462321.290 ops/s
Iteration  21: 1463644.428 ops/s
Iteration  22: 1456335.885 ops/s
Iteration  23: 1460361.642 ops/s
Iteration  24: 1465218.467 ops/s
Iteration  25: 1462390.824 ops/s
Iteration  26: 1462926.707 ops/s
Iteration  27: 1465855.294 ops/s
Iteration  28: 1458608.668 ops/s
Iteration  29: 1466880.211 ops/s
Iteration  30: 1463068.412 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_countWith":
  1461815.606 ±(99.9%) 2004.557 ops/s [Average]
  (min, avg, max) = (1455373.593, 1461815.606, 1466880.211), stdev = 3000.326
  CI (99.9%): [1459811.049, 1463820.163] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_countWith  thrpt   30  1461815.606 ± 2004.557  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 485040.176 ops/s
# Warmup Iteration   2: 701451.507 ops/s
# Warmup Iteration   3: 852924.187 ops/s
# Warmup Iteration   4: 851531.767 ops/s
# Warmup Iteration   5: 854318.908 ops/s
# Warmup Iteration   6: 854843.478 ops/s
# Warmup Iteration   7: 829880.058 ops/s
# Warmup Iteration   8: 745191.266 ops/s
# Warmup Iteration   9: 854195.558 ops/s
# Warmup Iteration  10: 855118.791 ops/s
# Warmup Iteration  11: 854056.104 ops/s
# Warmup Iteration  12: 857019.122 ops/s
# Warmup Iteration  13: 856278.806 ops/s
# Warmup Iteration  14: 855398.712 ops/s
# Warmup Iteration  15: 854016.871 ops/s
# Warmup Iteration  16: 852987.161 ops/s
# Warmup Iteration  17: 858635.107 ops/s
# Warmup Iteration  18: 857504.099 ops/s
# Warmup Iteration  19: 857235.399 ops/s
# Warmup Iteration  20: 857029.964 ops/s
# Warmup Iteration  21: 856045.745 ops/s
# Warmup Iteration  22: 856328.350 ops/s
# Warmup Iteration  23: 858608.079 ops/s
# Warmup Iteration  24: 856294.044 ops/s
# Warmup Iteration  25: 855093.427 ops/s
# Warmup Iteration  26: 856095.679 ops/s
# Warmup Iteration  27: 855012.729 ops/s
# Warmup Iteration  28: 857565.528 ops/s
# Warmup Iteration  29: 858088.171 ops/s
# Warmup Iteration  30: 856568.759 ops/s
Iteration   1: 853657.036 ops/s
Iteration   2: 858829.898 ops/s
Iteration   3: 858287.165 ops/s
Iteration   4: 856216.485 ops/s
Iteration   5: 855976.906 ops/s
Iteration   6: 857111.535 ops/s
Iteration   7: 856487.091 ops/s
Iteration   8: 854505.353 ops/s
Iteration   9: 859765.095 ops/s
Iteration  10: 858633.296 ops/s
Iteration  11: 856523.753 ops/s
Iteration  12: 853752.172 ops/s
Iteration  13: 855370.900 ops/s
Iteration  14: 858402.291 ops/s
Iteration  15: 861120.904 ops/s
Iteration  16: 853122.697 ops/s
Iteration  17: 857097.005 ops/s
Iteration  18: 857128.147 ops/s
Iteration  19: 858786.565 ops/s
Iteration  20: 858278.644 ops/s
Iteration  21: 857004.995 ops/s
Iteration  22: 859169.592 ops/s
Iteration  23: 856195.542 ops/s
Iteration  24: 856672.818 ops/s
Iteration  25: 857639.914 ops/s
Iteration  26: 857786.646 ops/s
Iteration  27: 858477.004 ops/s
Iteration  28: 854209.676 ops/s
Iteration  29: 857254.229 ops/s
Iteration  30: 856820.745 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detect":
  857009.470 ±(99.9%) 1261.985 ops/s [Average]
  (min, avg, max) = (853122.697, 857009.470, 861120.904), stdev = 1888.880
  CI (99.9%): [855747.485, 858271.455] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_detect  thrpt   30  857009.470 ± 1261.985  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 294296.023 ops/s
# Warmup Iteration   2: 442106.259 ops/s
# Warmup Iteration   3: 526528.520 ops/s
# Warmup Iteration   4: 520346.559 ops/s
# Warmup Iteration   5: 525813.393 ops/s
# Warmup Iteration   6: 525593.161 ops/s
# Warmup Iteration   7: 444156.901 ops/s
# Warmup Iteration   8: 527816.022 ops/s
# Warmup Iteration   9: 526104.698 ops/s
# Warmup Iteration  10: 526230.632 ops/s
# Warmup Iteration  11: 526854.175 ops/s
# Warmup Iteration  12: 526165.021 ops/s
# Warmup Iteration  13: 526440.241 ops/s
# Warmup Iteration  14: 527003.501 ops/s
# Warmup Iteration  15: 525474.475 ops/s
# Warmup Iteration  16: 526630.127 ops/s
# Warmup Iteration  17: 525298.992 ops/s
# Warmup Iteration  18: 526063.483 ops/s
# Warmup Iteration  19: 525670.741 ops/s
# Warmup Iteration  20: 526231.735 ops/s
# Warmup Iteration  21: 524027.765 ops/s
# Warmup Iteration  22: 526359.933 ops/s
# Warmup Iteration  23: 524845.233 ops/s
# Warmup Iteration  24: 527117.157 ops/s
# Warmup Iteration  25: 526428.326 ops/s
# Warmup Iteration  26: 525693.595 ops/s
# Warmup Iteration  27: 526022.750 ops/s
# Warmup Iteration  28: 526142.120 ops/s
# Warmup Iteration  29: 526251.661 ops/s
# Warmup Iteration  30: 525606.444 ops/s
Iteration   1: 527628.284 ops/s
Iteration   2: 525726.044 ops/s
Iteration   3: 526333.065 ops/s
Iteration   4: 526174.799 ops/s
Iteration   5: 525037.690 ops/s
Iteration   6: 527419.182 ops/s
Iteration   7: 524995.880 ops/s
Iteration   8: 525764.154 ops/s
Iteration   9: 524881.384 ops/s
Iteration  10: 526859.809 ops/s
Iteration  11: 526298.935 ops/s
Iteration  12: 526497.922 ops/s
Iteration  13: 527243.720 ops/s
Iteration  14: 526853.748 ops/s
Iteration  15: 527099.133 ops/s
Iteration  16: 523188.754 ops/s
Iteration  17: 527365.738 ops/s
Iteration  18: 526478.425 ops/s
Iteration  19: 526569.233 ops/s
Iteration  20: 524880.005 ops/s
Iteration  21: 524977.213 ops/s
Iteration  22: 527215.292 ops/s
Iteration  23: 525214.910 ops/s
Iteration  24: 527935.943 ops/s
Iteration  25: 525804.263 ops/s
Iteration  26: 527504.543 ops/s
Iteration  27: 525603.731 ops/s
Iteration  28: 526938.372 ops/s
Iteration  29: 526172.121 ops/s
Iteration  30: 527564.902 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detectIfNone":
  526274.240 ±(99.9%) 730.916 ops/s [Average]
  (min, avg, max) = (523188.754, 526274.240, 527935.943), stdev = 1094.001
  CI (99.9%): [525543.324, 527005.156] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_detectIfNone  thrpt   30  526274.240 ± 730.916  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 374849.831 ops/s
# Warmup Iteration   2: 410855.793 ops/s
# Warmup Iteration   3: 559785.889 ops/s
# Warmup Iteration   4: 561351.515 ops/s
# Warmup Iteration   5: 558603.019 ops/s
# Warmup Iteration   6: 560631.091 ops/s
# Warmup Iteration   7: 561241.594 ops/s
# Warmup Iteration   8: 560877.457 ops/s
# Warmup Iteration   9: 561217.304 ops/s
# Warmup Iteration  10: 561165.951 ops/s
# Warmup Iteration  11: 485624.490 ops/s
# Warmup Iteration  12: 541918.882 ops/s
# Warmup Iteration  13: 561190.371 ops/s
# Warmup Iteration  14: 560789.982 ops/s
# Warmup Iteration  15: 560097.706 ops/s
# Warmup Iteration  16: 560358.806 ops/s
# Warmup Iteration  17: 561671.048 ops/s
# Warmup Iteration  18: 561462.675 ops/s
# Warmup Iteration  19: 561750.040 ops/s
# Warmup Iteration  20: 562021.772 ops/s
# Warmup Iteration  21: 561242.918 ops/s
# Warmup Iteration  22: 561803.015 ops/s
# Warmup Iteration  23: 561422.805 ops/s
# Warmup Iteration  24: 561600.095 ops/s
# Warmup Iteration  25: 560622.849 ops/s
# Warmup Iteration  26: 561195.679 ops/s
# Warmup Iteration  27: 561466.051 ops/s
# Warmup Iteration  28: 559877.051 ops/s
# Warmup Iteration  29: 560676.774 ops/s
# Warmup Iteration  30: 561467.802 ops/s
Iteration   1: 558521.454 ops/s
Iteration   2: 560463.274 ops/s
Iteration   3: 561422.280 ops/s
Iteration   4: 562354.486 ops/s
Iteration   5: 561650.005 ops/s
Iteration   6: 561795.118 ops/s
Iteration   7: 562046.072 ops/s
Iteration   8: 559889.967 ops/s
Iteration   9: 561875.492 ops/s
Iteration  10: 562307.145 ops/s
Iteration  11: 561626.298 ops/s
Iteration  12: 561190.167 ops/s
Iteration  13: 560253.424 ops/s
Iteration  14: 561040.555 ops/s
Iteration  15: 560352.066 ops/s
Iteration  16: 561652.473 ops/s
Iteration  17: 558527.088 ops/s
Iteration  18: 561988.039 ops/s
Iteration  19: 558814.447 ops/s
Iteration  20: 560984.618 ops/s
Iteration  21: 562302.198 ops/s
Iteration  22: 560478.769 ops/s
Iteration  23: 561067.649 ops/s
Iteration  24: 559470.381 ops/s
Iteration  25: 560957.146 ops/s
Iteration  26: 561820.864 ops/s
Iteration  27: 560046.107 ops/s
Iteration  28: 561843.158 ops/s
Iteration  29: 560152.406 ops/s
Iteration  30: 560425.909 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detectIndex":
  560910.635 ±(99.9%) 738.356 ops/s [Average]
  (min, avg, max) = (558521.454, 560910.635, 562354.486), stdev = 1105.136
  CI (99.9%): [560172.279, 561648.991] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_detectIndex  thrpt   30  560910.635 ± 738.356  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 289901.482 ops/s
# Warmup Iteration   2: 362856.651 ops/s
# Warmup Iteration   3: 451612.624 ops/s
# Warmup Iteration   4: 451737.653 ops/s
# Warmup Iteration   5: 451406.406 ops/s
# Warmup Iteration   6: 450618.919 ops/s
# Warmup Iteration   7: 451131.298 ops/s
# Warmup Iteration   8: 451258.833 ops/s
# Warmup Iteration   9: 417870.850 ops/s
# Warmup Iteration  10: 419792.771 ops/s
# Warmup Iteration  11: 451765.478 ops/s
# Warmup Iteration  12: 451430.519 ops/s
# Warmup Iteration  13: 453774.875 ops/s
# Warmup Iteration  14: 451797.318 ops/s
# Warmup Iteration  15: 453333.992 ops/s
# Warmup Iteration  16: 451882.665 ops/s
# Warmup Iteration  17: 460507.237 ops/s
# Warmup Iteration  18: 460712.281 ops/s
# Warmup Iteration  19: 461510.059 ops/s
# Warmup Iteration  20: 461320.421 ops/s
# Warmup Iteration  21: 460825.974 ops/s
# Warmup Iteration  22: 459854.982 ops/s
# Warmup Iteration  23: 461365.732 ops/s
# Warmup Iteration  24: 461363.544 ops/s
# Warmup Iteration  25: 459406.843 ops/s
# Warmup Iteration  26: 461140.248 ops/s
# Warmup Iteration  27: 461625.650 ops/s
# Warmup Iteration  28: 459195.787 ops/s
# Warmup Iteration  29: 461515.878 ops/s
# Warmup Iteration  30: 460422.050 ops/s
Iteration   1: 460545.558 ops/s
Iteration   2: 459486.507 ops/s
Iteration   3: 462953.639 ops/s
Iteration   4: 461608.137 ops/s
Iteration   5: 458840.781 ops/s
Iteration   6: 463020.621 ops/s
Iteration   7: 460896.665 ops/s
Iteration   8: 461393.485 ops/s
Iteration   9: 460325.155 ops/s
Iteration  10: 461093.126 ops/s
Iteration  11: 462763.010 ops/s
Iteration  12: 460715.976 ops/s
Iteration  13: 461346.454 ops/s
Iteration  14: 461657.290 ops/s
Iteration  15: 460273.599 ops/s
Iteration  16: 460627.155 ops/s
Iteration  17: 461758.075 ops/s
Iteration  18: 460727.623 ops/s
Iteration  19: 462652.786 ops/s
Iteration  20: 462085.632 ops/s
Iteration  21: 460325.162 ops/s
Iteration  22: 461767.920 ops/s
Iteration  23: 460419.432 ops/s
Iteration  24: 461012.503 ops/s
Iteration  25: 461475.822 ops/s
Iteration  26: 460834.183 ops/s
Iteration  27: 461962.687 ops/s
Iteration  28: 460897.879 ops/s
Iteration  29: 462527.580 ops/s
Iteration  30: 460734.296 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detectOptional":
  461224.291 ±(99.9%) 662.253 ops/s [Average]
  (min, avg, max) = (458840.781, 461224.291, 463020.621), stdev = 991.230
  CI (99.9%): [460562.038, 461886.544] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_detectOptional  thrpt   30  461224.291 ± 662.253  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 337592.689 ops/s
# Warmup Iteration   2: 483279.517 ops/s
# Warmup Iteration   3: 600138.750 ops/s
# Warmup Iteration   4: 597400.661 ops/s
# Warmup Iteration   5: 598721.534 ops/s
# Warmup Iteration   6: 599580.537 ops/s
# Warmup Iteration   7: 601053.603 ops/s
# Warmup Iteration   8: 504165.844 ops/s
# Warmup Iteration   9: 600561.804 ops/s
# Warmup Iteration  10: 600900.221 ops/s
# Warmup Iteration  11: 601922.438 ops/s
# Warmup Iteration  12: 600205.731 ops/s
# Warmup Iteration  13: 600311.686 ops/s
# Warmup Iteration  14: 600211.301 ops/s
# Warmup Iteration  15: 601417.786 ops/s
# Warmup Iteration  16: 600769.495 ops/s
# Warmup Iteration  17: 599063.408 ops/s
# Warmup Iteration  18: 597661.774 ops/s
# Warmup Iteration  19: 599696.794 ops/s
# Warmup Iteration  20: 601495.333 ops/s
# Warmup Iteration  21: 599104.094 ops/s
# Warmup Iteration  22: 597937.300 ops/s
# Warmup Iteration  23: 599425.559 ops/s
# Warmup Iteration  24: 599161.525 ops/s
# Warmup Iteration  25: 600343.325 ops/s
# Warmup Iteration  26: 598022.558 ops/s
# Warmup Iteration  27: 598341.217 ops/s
# Warmup Iteration  28: 599336.432 ops/s
# Warmup Iteration  29: 599238.658 ops/s
# Warmup Iteration  30: 598882.254 ops/s
Iteration   1: 596340.652 ops/s
Iteration   2: 597433.584 ops/s
Iteration   3: 598959.295 ops/s
Iteration   4: 598202.206 ops/s
Iteration   5: 599468.470 ops/s
Iteration   6: 599953.586 ops/s
Iteration   7: 599736.417 ops/s
Iteration   8: 599127.023 ops/s
Iteration   9: 597059.312 ops/s
Iteration  10: 599536.987 ops/s
Iteration  11: 597804.959 ops/s
Iteration  12: 597718.965 ops/s
Iteration  13: 599556.229 ops/s
Iteration  14: 599710.177 ops/s
Iteration  15: 599315.668 ops/s
Iteration  16: 599363.084 ops/s
Iteration  17: 598711.787 ops/s
Iteration  18: 598462.683 ops/s
Iteration  19: 596438.368 ops/s
Iteration  20: 600521.201 ops/s
Iteration  21: 598161.517 ops/s
Iteration  22: 601115.753 ops/s
Iteration  23: 600269.086 ops/s
Iteration  24: 599737.718 ops/s
Iteration  25: 601219.424 ops/s
Iteration  26: 598040.255 ops/s
Iteration  27: 600304.765 ops/s
Iteration  28: 601143.007 ops/s
Iteration  29: 598617.957 ops/s
Iteration  30: 598935.806 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detectWith":
  599032.198 ±(99.9%) 867.244 ops/s [Average]
  (min, avg, max) = (596340.652, 599032.198, 601219.424), stdev = 1298.050
  CI (99.9%): [598164.954, 599899.442] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_detectWith  thrpt   30  599032.198 ± 867.244  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detectWithIfNoneBlock$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detectWithIfNoneBlock

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 353307.662 ops/s
# Warmup Iteration   2: 524209.494 ops/s
# Warmup Iteration   3: 629250.327 ops/s
# Warmup Iteration   4: 624284.050 ops/s
# Warmup Iteration   5: 627316.245 ops/s
# Warmup Iteration   6: 626994.939 ops/s
# Warmup Iteration   7: 562143.128 ops/s
# Warmup Iteration   8: 598082.767 ops/s
# Warmup Iteration   9: 628966.768 ops/s
# Warmup Iteration  10: 628378.155 ops/s
# Warmup Iteration  11: 629340.923 ops/s
# Warmup Iteration  12: 627094.005 ops/s
# Warmup Iteration  13: 628752.788 ops/s
# Warmup Iteration  14: 630264.662 ops/s
# Warmup Iteration  15: 630149.321 ops/s
# Warmup Iteration  16: 629129.552 ops/s
# Warmup Iteration  17: 630374.124 ops/s
# Warmup Iteration  18: 630076.698 ops/s
# Warmup Iteration  19: 627759.465 ops/s
# Warmup Iteration  20: 629462.830 ops/s
# Warmup Iteration  21: 629364.101 ops/s
# Warmup Iteration  22: 631612.177 ops/s
# Warmup Iteration  23: 629503.635 ops/s
# Warmup Iteration  24: 630572.916 ops/s
# Warmup Iteration  25: 629982.910 ops/s
# Warmup Iteration  26: 629412.415 ops/s
# Warmup Iteration  27: 630987.505 ops/s
# Warmup Iteration  28: 629976.340 ops/s
# Warmup Iteration  29: 629332.758 ops/s
# Warmup Iteration  30: 630998.204 ops/s
Iteration   1: 629041.097 ops/s
Iteration   2: 629007.936 ops/s
Iteration   3: 629923.109 ops/s
Iteration   4: 629596.164 ops/s
Iteration   5: 630111.926 ops/s
Iteration   6: 628095.218 ops/s
Iteration   7: 630451.933 ops/s
Iteration   8: 630927.339 ops/s
Iteration   9: 630582.066 ops/s
Iteration  10: 631420.180 ops/s
Iteration  11: 629981.571 ops/s
Iteration  12: 632550.729 ops/s
Iteration  13: 628299.597 ops/s
Iteration  14: 629962.823 ops/s
Iteration  15: 630887.121 ops/s
Iteration  16: 629065.805 ops/s
Iteration  17: 631279.533 ops/s
Iteration  18: 628905.941 ops/s
Iteration  19: 631926.566 ops/s
Iteration  20: 630056.342 ops/s
Iteration  21: 631531.311 ops/s
Iteration  22: 632119.497 ops/s
Iteration  23: 630422.662 ops/s
Iteration  24: 630005.424 ops/s
Iteration  25: 630989.159 ops/s
Iteration  26: 630161.739 ops/s
Iteration  27: 629655.852 ops/s
Iteration  28: 629235.224 ops/s
Iteration  29: 629862.558 ops/s
Iteration  30: 631366.667 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detectWithIfNoneBlock":
  630247.436 ±(99.9%) 739.362 ops/s [Average]
  (min, avg, max) = (628095.218, 630247.436, 632550.729), stdev = 1106.642
  CI (99.9%): [629508.075, 630986.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_detectWithIfNoneBlock  thrpt   30  630247.436 ± 739.362  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detectWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detectWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 586586.204 ops/s
# Warmup Iteration   2: 797599.242 ops/s
# Warmup Iteration   3: 1000211.264 ops/s
# Warmup Iteration   4: 994586.483 ops/s
# Warmup Iteration   5: 1003591.247 ops/s
# Warmup Iteration   6: 998806.463 ops/s
# Warmup Iteration   7: 999043.247 ops/s
# Warmup Iteration   8: 843309.495 ops/s
# Warmup Iteration   9: 993636.576 ops/s
# Warmup Iteration  10: 995135.555 ops/s
# Warmup Iteration  11: 997178.650 ops/s
# Warmup Iteration  12: 997721.723 ops/s
# Warmup Iteration  13: 998348.429 ops/s
# Warmup Iteration  14: 996692.187 ops/s
# Warmup Iteration  15: 998369.916 ops/s
# Warmup Iteration  16: 995774.722 ops/s
# Warmup Iteration  17: 997938.847 ops/s
# Warmup Iteration  18: 1001105.897 ops/s
# Warmup Iteration  19: 999133.636 ops/s
# Warmup Iteration  20: 999785.978 ops/s
# Warmup Iteration  21: 998158.085 ops/s
# Warmup Iteration  22: 999387.577 ops/s
# Warmup Iteration  23: 1000211.199 ops/s
# Warmup Iteration  24: 998577.423 ops/s
# Warmup Iteration  25: 1001124.364 ops/s
# Warmup Iteration  26: 999711.780 ops/s
# Warmup Iteration  27: 997531.288 ops/s
# Warmup Iteration  28: 999649.467 ops/s
# Warmup Iteration  29: 1000947.323 ops/s
# Warmup Iteration  30: 998693.259 ops/s
Iteration   1: 999279.342 ops/s
Iteration   2: 997057.703 ops/s
Iteration   3: 999721.246 ops/s
Iteration   4: 998274.665 ops/s
Iteration   5: 998737.496 ops/s
Iteration   6: 1000413.249 ops/s
Iteration   7: 997621.007 ops/s
Iteration   8: 997683.613 ops/s
Iteration   9: 1000700.218 ops/s
Iteration  10: 995582.451 ops/s
Iteration  11: 999461.259 ops/s
Iteration  12: 997047.692 ops/s
Iteration  13: 1001855.291 ops/s
Iteration  14: 997654.389 ops/s
Iteration  15: 1000048.103 ops/s
Iteration  16: 1002130.074 ops/s
Iteration  17: 992169.078 ops/s
Iteration  18: 998786.796 ops/s
Iteration  19: 1001442.110 ops/s
Iteration  20: 996079.680 ops/s
Iteration  21: 1000996.665 ops/s
Iteration  22: 1001003.355 ops/s
Iteration  23: 996470.058 ops/s
Iteration  24: 997797.818 ops/s
Iteration  25: 1001148.828 ops/s
Iteration  26: 995826.577 ops/s
Iteration  27: 1001404.351 ops/s
Iteration  28: 999809.452 ops/s
Iteration  29: 999171.850 ops/s
Iteration  30: 998374.316 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detectWithOccurrences":
  998791.624 ±(99.9%) 1505.948 ops/s [Average]
  (min, avg, max) = (992169.078, 998791.624, 1002130.074), stdev = 2254.032
  CI (99.9%): [997285.677, 1000297.572] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_detectWithOccurrences  thrpt   30  998791.624 ± 1505.948  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 290246.308 ops/s
# Warmup Iteration   2: 355919.761 ops/s
# Warmup Iteration   3: 448312.543 ops/s
# Warmup Iteration   4: 443894.553 ops/s
# Warmup Iteration   5: 444915.809 ops/s
# Warmup Iteration   6: 446809.610 ops/s
# Warmup Iteration   7: 448001.112 ops/s
# Warmup Iteration   8: 447099.495 ops/s
# Warmup Iteration   9: 448344.603 ops/s
# Warmup Iteration  10: 382151.901 ops/s
# Warmup Iteration  11: 447587.478 ops/s
# Warmup Iteration  12: 447482.338 ops/s
# Warmup Iteration  13: 447850.274 ops/s
# Warmup Iteration  14: 448442.258 ops/s
# Warmup Iteration  15: 447147.153 ops/s
# Warmup Iteration  16: 448344.930 ops/s
# Warmup Iteration  17: 457233.312 ops/s
# Warmup Iteration  18: 457511.274 ops/s
# Warmup Iteration  19: 458248.931 ops/s
# Warmup Iteration  20: 456474.697 ops/s
# Warmup Iteration  21: 458221.688 ops/s
# Warmup Iteration  22: 457893.751 ops/s
# Warmup Iteration  23: 457356.161 ops/s
# Warmup Iteration  24: 456906.813 ops/s
# Warmup Iteration  25: 458414.848 ops/s
# Warmup Iteration  26: 457545.097 ops/s
# Warmup Iteration  27: 459622.658 ops/s
# Warmup Iteration  28: 457879.019 ops/s
# Warmup Iteration  29: 458058.575 ops/s
# Warmup Iteration  30: 458434.844 ops/s
Iteration   1: 458441.224 ops/s
Iteration   2: 458795.238 ops/s
Iteration   3: 459595.629 ops/s
Iteration   4: 457776.617 ops/s
Iteration   5: 458661.482 ops/s
Iteration   6: 458594.360 ops/s
Iteration   7: 459258.155 ops/s
Iteration   8: 456583.308 ops/s
Iteration   9: 458672.847 ops/s
Iteration  10: 458356.058 ops/s
Iteration  11: 457322.987 ops/s
Iteration  12: 457770.730 ops/s
Iteration  13: 458518.855 ops/s
Iteration  14: 455714.499 ops/s
Iteration  15: 459313.303 ops/s
Iteration  16: 456595.393 ops/s
Iteration  17: 457024.422 ops/s
Iteration  18: 459998.721 ops/s
Iteration  19: 458102.827 ops/s
Iteration  20: 456525.340 ops/s
Iteration  21: 458581.606 ops/s
Iteration  22: 457656.325 ops/s
Iteration  23: 455555.678 ops/s
Iteration  24: 457905.325 ops/s
Iteration  25: 458471.560 ops/s
Iteration  26: 458782.173 ops/s
Iteration  27: 456730.585 ops/s
Iteration  28: 458485.842 ops/s
Iteration  29: 457222.438 ops/s
Iteration  30: 457495.836 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_detectWithOptional":
  457950.312 ±(99.9%) 735.268 ops/s [Average]
  (min, avg, max) = (455555.678, 457950.312, 459998.721), stdev = 1100.515
  CI (99.9%): [457215.044, 458685.580] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_detectWithOptional  thrpt   30  457950.312 ± 735.268  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 627960.882 ops/s
# Warmup Iteration   2: 1223943.612 ops/s
# Warmup Iteration   3: 1325505.545 ops/s
# Warmup Iteration   4: 1336144.364 ops/s
# Warmup Iteration   5: 1116085.628 ops/s
# Warmup Iteration   6: 1338601.719 ops/s
# Warmup Iteration   7: 1339559.295 ops/s
# Warmup Iteration   8: 1336074.344 ops/s
# Warmup Iteration   9: 1337702.127 ops/s
# Warmup Iteration  10: 1338215.241 ops/s
# Warmup Iteration  11: 1339866.607 ops/s
# Warmup Iteration  12: 1335751.769 ops/s
# Warmup Iteration  13: 1336993.531 ops/s
# Warmup Iteration  14: 1338529.480 ops/s
# Warmup Iteration  15: 1336126.191 ops/s
# Warmup Iteration  16: 1337567.400 ops/s
# Warmup Iteration  17: 1339033.676 ops/s
# Warmup Iteration  18: 1330411.522 ops/s
# Warmup Iteration  19: 1333095.851 ops/s
# Warmup Iteration  20: 1338031.548 ops/s
# Warmup Iteration  21: 1338430.715 ops/s
# Warmup Iteration  22: 1333821.549 ops/s
# Warmup Iteration  23: 1339346.428 ops/s
# Warmup Iteration  24: 1339422.731 ops/s
# Warmup Iteration  25: 1333957.452 ops/s
# Warmup Iteration  26: 1338008.395 ops/s
# Warmup Iteration  27: 1338133.647 ops/s
# Warmup Iteration  28: 1337886.767 ops/s
# Warmup Iteration  29: 1336890.020 ops/s
# Warmup Iteration  30: 1338255.849 ops/s
Iteration   1: 1332248.082 ops/s
Iteration   2: 1341376.891 ops/s
Iteration   3: 1338530.536 ops/s
Iteration   4: 1332753.305 ops/s
Iteration   5: 1337400.524 ops/s
Iteration   6: 1333601.824 ops/s
Iteration   7: 1337558.831 ops/s
Iteration   8: 1340599.718 ops/s
Iteration   9: 1334898.375 ops/s
Iteration  10: 1334202.786 ops/s
Iteration  11: 1338828.956 ops/s
Iteration  12: 1332344.005 ops/s
Iteration  13: 1338837.174 ops/s
Iteration  14: 1333845.338 ops/s
Iteration  15: 1335438.948 ops/s
Iteration  16: 1339276.432 ops/s
Iteration  17: 1339240.539 ops/s
Iteration  18: 1337459.854 ops/s
Iteration  19: 1333055.150 ops/s
Iteration  20: 1339747.985 ops/s
Iteration  21: 1337720.451 ops/s
Iteration  22: 1341629.080 ops/s
Iteration  23: 1332497.567 ops/s
Iteration  24: 1336904.836 ops/s
Iteration  25: 1339824.077 ops/s
Iteration  26: 1336154.243 ops/s
Iteration  27: 1335454.574 ops/s
Iteration  28: 1339847.879 ops/s
Iteration  29: 1335687.480 ops/s
Iteration  30: 1334007.341 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_distinct":
  1336699.093 ±(99.9%) 1934.104 ops/s [Average]
  (min, avg, max) = (1332248.082, 1336699.093, 1341629.080), stdev = 2894.876
  CI (99.9%): [1334764.989, 1338633.196] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_distinct  thrpt   30  1336699.093 ± 1934.104  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_distinctView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_distinctView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 525499.682 ops/s
# Warmup Iteration   2: 881702.715 ops/s
# Warmup Iteration   3: 1048787.828 ops/s
# Warmup Iteration   4: 1054939.462 ops/s
# Warmup Iteration   5: 1057156.141 ops/s
# Warmup Iteration   6: 956870.426 ops/s
# Warmup Iteration   7: 980755.653 ops/s
# Warmup Iteration   8: 1054986.368 ops/s
# Warmup Iteration   9: 1056714.321 ops/s
# Warmup Iteration  10: 1059666.907 ops/s
# Warmup Iteration  11: 1057584.681 ops/s
# Warmup Iteration  12: 1056454.740 ops/s
# Warmup Iteration  13: 1058678.491 ops/s
# Warmup Iteration  14: 1057161.772 ops/s
# Warmup Iteration  15: 1057571.305 ops/s
# Warmup Iteration  16: 1055960.842 ops/s
# Warmup Iteration  17: 1052870.345 ops/s
# Warmup Iteration  18: 1055171.624 ops/s
# Warmup Iteration  19: 1054389.897 ops/s
# Warmup Iteration  20: 1056754.904 ops/s
# Warmup Iteration  21: 1056109.823 ops/s
# Warmup Iteration  22: 1054459.503 ops/s
# Warmup Iteration  23: 1055219.542 ops/s
# Warmup Iteration  24: 1054772.530 ops/s
# Warmup Iteration  25: 1054160.384 ops/s
# Warmup Iteration  26: 1055179.859 ops/s
# Warmup Iteration  27: 1054795.023 ops/s
# Warmup Iteration  28: 1050259.254 ops/s
# Warmup Iteration  29: 1053661.533 ops/s
# Warmup Iteration  30: 1053726.202 ops/s
Iteration   1: 1056027.352 ops/s
Iteration   2: 1052794.297 ops/s
Iteration   3: 1057339.862 ops/s
Iteration   4: 1053137.906 ops/s
Iteration   5: 1059128.006 ops/s
Iteration   6: 1053604.180 ops/s
Iteration   7: 1056890.960 ops/s
Iteration   8: 1052734.359 ops/s
Iteration   9: 1057428.220 ops/s
Iteration  10: 1055718.782 ops/s
Iteration  11: 1053111.353 ops/s
Iteration  12: 1053589.639 ops/s
Iteration  13: 1055611.602 ops/s
Iteration  14: 1054159.484 ops/s
Iteration  15: 1054546.429 ops/s
Iteration  16: 1053790.594 ops/s
Iteration  17: 1058295.670 ops/s
Iteration  18: 1054940.515 ops/s
Iteration  19: 1050355.737 ops/s
Iteration  20: 1054211.821 ops/s
Iteration  21: 1054665.822 ops/s
Iteration  22: 1055870.770 ops/s
Iteration  23: 1057021.459 ops/s
Iteration  24: 1054090.828 ops/s
Iteration  25: 1052634.702 ops/s
Iteration  26: 1056202.992 ops/s
Iteration  27: 1055744.463 ops/s
Iteration  28: 1052813.624 ops/s
Iteration  29: 1053686.501 ops/s
Iteration  30: 1053473.442 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_distinctView":
  1054787.379 ±(99.9%) 1308.243 ops/s [Average]
  (min, avg, max) = (1050355.737, 1054787.379, 1059128.006), stdev = 1958.116
  CI (99.9%): [1053479.136, 1056095.622] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_distinctView  thrpt   30  1054787.379 ± 1308.243  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 315947.116 ops/s
# Warmup Iteration   2: 578532.469 ops/s
# Warmup Iteration   3: 650253.257 ops/s
# Warmup Iteration   4: 653009.619 ops/s
# Warmup Iteration   5: 655633.136 ops/s
# Warmup Iteration   6: 548316.132 ops/s
# Warmup Iteration   7: 653789.118 ops/s
# Warmup Iteration   8: 653535.951 ops/s
# Warmup Iteration   9: 654041.145 ops/s
# Warmup Iteration  10: 654134.574 ops/s
# Warmup Iteration  11: 652922.326 ops/s
# Warmup Iteration  12: 655201.655 ops/s
# Warmup Iteration  13: 653271.506 ops/s
# Warmup Iteration  14: 654371.660 ops/s
# Warmup Iteration  15: 654368.604 ops/s
# Warmup Iteration  16: 655043.978 ops/s
# Warmup Iteration  17: 653262.640 ops/s
# Warmup Iteration  18: 654692.271 ops/s
# Warmup Iteration  19: 654246.060 ops/s
# Warmup Iteration  20: 655007.516 ops/s
# Warmup Iteration  21: 654466.029 ops/s
# Warmup Iteration  22: 654539.457 ops/s
# Warmup Iteration  23: 655613.354 ops/s
# Warmup Iteration  24: 654234.266 ops/s
# Warmup Iteration  25: 656154.120 ops/s
# Warmup Iteration  26: 654832.897 ops/s
# Warmup Iteration  27: 653806.118 ops/s
# Warmup Iteration  28: 653733.401 ops/s
# Warmup Iteration  29: 653949.926 ops/s
# Warmup Iteration  30: 655235.098 ops/s
Iteration   1: 656050.632 ops/s
Iteration   2: 653988.038 ops/s
Iteration   3: 653775.053 ops/s
Iteration   4: 655873.487 ops/s
Iteration   5: 653119.637 ops/s
Iteration   6: 656669.080 ops/s
Iteration   7: 653708.695 ops/s
Iteration   8: 654543.897 ops/s
Iteration   9: 655704.650 ops/s
Iteration  10: 654088.394 ops/s
Iteration  11: 654889.676 ops/s
Iteration  12: 655597.096 ops/s
Iteration  13: 655863.242 ops/s
Iteration  14: 654941.446 ops/s
Iteration  15: 653823.530 ops/s
Iteration  16: 656174.784 ops/s
Iteration  17: 655801.951 ops/s
Iteration  18: 656254.751 ops/s
Iteration  19: 654401.346 ops/s
Iteration  20: 653272.617 ops/s
Iteration  21: 655509.238 ops/s
Iteration  22: 655638.206 ops/s
Iteration  23: 656319.503 ops/s
Iteration  24: 655339.871 ops/s
Iteration  25: 653936.183 ops/s
Iteration  26: 655738.471 ops/s
Iteration  27: 653794.958 ops/s
Iteration  28: 653432.335 ops/s
Iteration  29: 654752.932 ops/s
Iteration  30: 653037.129 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_drop":
  654868.028 ±(99.9%) 732.498 ops/s [Average]
  (min, avg, max) = (653037.129, 654868.028, 656669.080), stdev = 1096.368
  CI (99.9%): [654135.530, 655600.525] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_drop  thrpt   30  654868.028 ± 732.498  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 176177.300 ops/s
# Warmup Iteration   2: 284743.812 ops/s
# Warmup Iteration   3: 338128.367 ops/s
# Warmup Iteration   4: 341378.255 ops/s
# Warmup Iteration   5: 340927.073 ops/s
# Warmup Iteration   6: 340407.236 ops/s
# Warmup Iteration   7: 286055.854 ops/s
# Warmup Iteration   8: 340008.669 ops/s
# Warmup Iteration   9: 340459.310 ops/s
# Warmup Iteration  10: 339654.096 ops/s
# Warmup Iteration  11: 339260.234 ops/s
# Warmup Iteration  12: 340551.933 ops/s
# Warmup Iteration  13: 339696.856 ops/s
# Warmup Iteration  14: 339880.010 ops/s
# Warmup Iteration  15: 340369.159 ops/s
# Warmup Iteration  16: 339714.638 ops/s
# Warmup Iteration  17: 340084.687 ops/s
# Warmup Iteration  18: 338786.656 ops/s
# Warmup Iteration  19: 340006.696 ops/s
# Warmup Iteration  20: 339877.863 ops/s
# Warmup Iteration  21: 339737.078 ops/s
# Warmup Iteration  22: 339445.405 ops/s
# Warmup Iteration  23: 340404.779 ops/s
# Warmup Iteration  24: 339426.068 ops/s
# Warmup Iteration  25: 339649.886 ops/s
# Warmup Iteration  26: 339666.754 ops/s
# Warmup Iteration  27: 339927.908 ops/s
# Warmup Iteration  28: 339624.125 ops/s
# Warmup Iteration  29: 339940.451 ops/s
# Warmup Iteration  30: 339944.949 ops/s
Iteration   1: 340555.596 ops/s
Iteration   2: 338850.903 ops/s
Iteration   3: 340906.957 ops/s
Iteration   4: 340115.918 ops/s
Iteration   5: 340574.827 ops/s
Iteration   6: 340687.619 ops/s
Iteration   7: 339401.761 ops/s
Iteration   8: 340477.371 ops/s
Iteration   9: 340358.983 ops/s
Iteration  10: 340569.392 ops/s
Iteration  11: 336601.830 ops/s
Iteration  12: 340742.160 ops/s
Iteration  13: 340226.342 ops/s
Iteration  14: 340249.604 ops/s
Iteration  15: 339301.342 ops/s
Iteration  16: 339701.764 ops/s
Iteration  17: 339651.988 ops/s
Iteration  18: 340192.020 ops/s
Iteration  19: 336925.094 ops/s
Iteration  20: 339390.039 ops/s
Iteration  21: 339383.866 ops/s
Iteration  22: 340578.682 ops/s
Iteration  23: 340042.563 ops/s
Iteration  24: 339144.931 ops/s
Iteration  25: 340199.297 ops/s
Iteration  26: 339457.651 ops/s
Iteration  27: 340338.327 ops/s
Iteration  28: 338504.273 ops/s
Iteration  29: 337597.167 ops/s
Iteration  30: 340146.531 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_dropWhile":
  339695.827 ±(99.9%) 725.901 ops/s [Average]
  (min, avg, max) = (336601.830, 339695.827, 340906.957), stdev = 1086.495
  CI (99.9%): [338969.925, 340421.728] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_dropWhile  thrpt   30  339695.827 ± 725.901  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 587966.688 ops/s
# Warmup Iteration   2: 680006.604 ops/s
# Warmup Iteration   3: 884838.038 ops/s
# Warmup Iteration   4: 886562.721 ops/s
# Warmup Iteration   5: 882502.256 ops/s
# Warmup Iteration   6: 882456.065 ops/s
# Warmup Iteration   7: 882239.605 ops/s
# Warmup Iteration   8: 881111.466 ops/s
# Warmup Iteration   9: 884498.621 ops/s
# Warmup Iteration  10: 744869.243 ops/s
# Warmup Iteration  11: 885864.202 ops/s
# Warmup Iteration  12: 883547.290 ops/s
# Warmup Iteration  13: 886730.363 ops/s
# Warmup Iteration  14: 885071.102 ops/s
# Warmup Iteration  15: 885759.878 ops/s
# Warmup Iteration  16: 886569.174 ops/s
# Warmup Iteration  17: 932170.025 ops/s
# Warmup Iteration  18: 932829.791 ops/s
# Warmup Iteration  19: 929824.559 ops/s
# Warmup Iteration  20: 930152.423 ops/s
# Warmup Iteration  21: 931757.243 ops/s
# Warmup Iteration  22: 930207.017 ops/s
# Warmup Iteration  23: 932053.972 ops/s
# Warmup Iteration  24: 928522.319 ops/s
# Warmup Iteration  25: 931385.653 ops/s
# Warmup Iteration  26: 929230.920 ops/s
# Warmup Iteration  27: 932364.630 ops/s
# Warmup Iteration  28: 926599.122 ops/s
# Warmup Iteration  29: 932481.319 ops/s
# Warmup Iteration  30: 931923.456 ops/s
Iteration   1: 936411.740 ops/s
Iteration   2: 932981.059 ops/s
Iteration   3: 930329.233 ops/s
Iteration   4: 930392.120 ops/s
Iteration   5: 931808.393 ops/s
Iteration   6: 935511.357 ops/s
Iteration   7: 931448.137 ops/s
Iteration   8: 928041.611 ops/s
Iteration   9: 932125.617 ops/s
Iteration  10: 933905.293 ops/s
Iteration  11: 931648.279 ops/s
Iteration  12: 929645.836 ops/s
Iteration  13: 934202.247 ops/s
Iteration  14: 925134.751 ops/s
Iteration  15: 928307.097 ops/s
Iteration  16: 933849.651 ops/s
Iteration  17: 933637.589 ops/s
Iteration  18: 930652.062 ops/s
Iteration  19: 936222.560 ops/s
Iteration  20: 925999.944 ops/s
Iteration  21: 933454.383 ops/s
Iteration  22: 930889.766 ops/s
Iteration  23: 930992.867 ops/s
Iteration  24: 928606.133 ops/s
Iteration  25: 931216.283 ops/s
Iteration  26: 928972.224 ops/s
Iteration  27: 929663.164 ops/s
Iteration  28: 931573.316 ops/s
Iteration  29: 932247.186 ops/s
Iteration  30: 930425.102 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_drop_throws":
  931343.167 ±(99.9%) 1805.258 ops/s [Average]
  (min, avg, max) = (925134.751, 931343.167, 936411.740), stdev = 2702.025
  CI (99.9%): [929537.909, 933148.424] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_drop_throws  thrpt   30  931343.167 ± 1805.258  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1802804.398 ops/s
# Warmup Iteration   2: 2980570.355 ops/s
# Warmup Iteration   3: 3261100.025 ops/s
# Warmup Iteration   4: 3279383.266 ops/s
# Warmup Iteration   5: 3285238.986 ops/s
# Warmup Iteration   6: 2757306.829 ops/s
# Warmup Iteration   7: 3281038.607 ops/s
# Warmup Iteration   8: 3288697.128 ops/s
# Warmup Iteration   9: 3279207.160 ops/s
# Warmup Iteration  10: 3286324.140 ops/s
# Warmup Iteration  11: 3283065.297 ops/s
# Warmup Iteration  12: 3281896.010 ops/s
# Warmup Iteration  13: 3287701.849 ops/s
# Warmup Iteration  14: 3276105.892 ops/s
# Warmup Iteration  15: 3280542.949 ops/s
# Warmup Iteration  16: 3281718.221 ops/s
# Warmup Iteration  17: 3286660.621 ops/s
# Warmup Iteration  18: 3286516.369 ops/s
# Warmup Iteration  19: 3285064.178 ops/s
# Warmup Iteration  20: 3279937.468 ops/s
# Warmup Iteration  21: 3285961.331 ops/s
# Warmup Iteration  22: 3284667.458 ops/s
# Warmup Iteration  23: 3284517.387 ops/s
# Warmup Iteration  24: 3281253.856 ops/s
# Warmup Iteration  25: 3287069.829 ops/s
# Warmup Iteration  26: 3278584.702 ops/s
# Warmup Iteration  27: 3279218.320 ops/s
# Warmup Iteration  28: 3289249.108 ops/s
# Warmup Iteration  29: 3284647.202 ops/s
# Warmup Iteration  30: 3282069.700 ops/s
Iteration   1: 3282842.832 ops/s
Iteration   2: 3281007.381 ops/s
Iteration   3: 3280124.917 ops/s
Iteration   4: 3291856.551 ops/s
Iteration   5: 3275282.186 ops/s
Iteration   6: 3294886.281 ops/s
Iteration   7: 3286626.753 ops/s
Iteration   8: 3295342.152 ops/s
Iteration   9: 3279422.833 ops/s
Iteration  10: 3287131.855 ops/s
Iteration  11: 3277156.942 ops/s
Iteration  12: 3291144.601 ops/s
Iteration  13: 3284912.785 ops/s
Iteration  14: 3283609.344 ops/s
Iteration  15: 3277171.667 ops/s
Iteration  16: 3271050.491 ops/s
Iteration  17: 3290655.275 ops/s
Iteration  18: 3274002.035 ops/s
Iteration  19: 3291455.167 ops/s
Iteration  20: 3277431.806 ops/s
Iteration  21: 3291812.333 ops/s
Iteration  22: 3285738.492 ops/s
Iteration  23: 3291922.422 ops/s
Iteration  24: 3283210.085 ops/s
Iteration  25: 3285073.206 ops/s
Iteration  26: 3282156.744 ops/s
Iteration  27: 3284224.557 ops/s
Iteration  28: 3291789.381 ops/s
Iteration  29: 3289841.300 ops/s
Iteration  30: 3276878.787 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_empty":
  3284525.372 ±(99.9%) 4427.013 ops/s [Average]
  (min, avg, max) = (3271050.491, 3284525.372, 3295342.152), stdev = 6626.145
  CI (99.9%): [3280098.359, 3288952.385] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_empty  thrpt   30  3284525.372 ± 4427.013  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21806.731 ops/s
# Warmup Iteration   2: 32617.645 ops/s
# Warmup Iteration   3: 47091.897 ops/s
# Warmup Iteration   4: 48133.184 ops/s
# Warmup Iteration   5: 47859.427 ops/s
# Warmup Iteration   6: 47972.516 ops/s
# Warmup Iteration   7: 47855.113 ops/s
# Warmup Iteration   8: 47977.609 ops/s
# Warmup Iteration   9: 47822.629 ops/s
# Warmup Iteration  10: 40380.870 ops/s
# Warmup Iteration  11: 48046.915 ops/s
# Warmup Iteration  12: 48093.795 ops/s
# Warmup Iteration  13: 48101.313 ops/s
# Warmup Iteration  14: 48107.301 ops/s
# Warmup Iteration  15: 47943.992 ops/s
# Warmup Iteration  16: 48028.147 ops/s
# Warmup Iteration  17: 47987.909 ops/s
# Warmup Iteration  18: 48062.706 ops/s
# Warmup Iteration  19: 48081.787 ops/s
# Warmup Iteration  20: 48045.655 ops/s
# Warmup Iteration  21: 47993.646 ops/s
# Warmup Iteration  22: 48125.738 ops/s
# Warmup Iteration  23: 48062.981 ops/s
# Warmup Iteration  24: 48095.637 ops/s
# Warmup Iteration  25: 48020.812 ops/s
# Warmup Iteration  26: 48164.724 ops/s
# Warmup Iteration  27: 48077.972 ops/s
# Warmup Iteration  28: 47970.444 ops/s
# Warmup Iteration  29: 48103.133 ops/s
# Warmup Iteration  30: 48036.144 ops/s
Iteration   1: 48035.526 ops/s
Iteration   2: 48130.794 ops/s
Iteration   3: 48027.104 ops/s
Iteration   4: 47959.583 ops/s
Iteration   5: 48108.540 ops/s
Iteration   6: 48006.184 ops/s
Iteration   7: 47930.441 ops/s
Iteration   8: 47894.126 ops/s
Iteration   9: 48123.579 ops/s
Iteration  10: 48072.253 ops/s
Iteration  11: 48237.560 ops/s
Iteration  12: 48020.365 ops/s
Iteration  13: 48101.065 ops/s
Iteration  14: 48076.579 ops/s
Iteration  15: 47972.556 ops/s
Iteration  16: 48022.516 ops/s
Iteration  17: 48195.198 ops/s
Iteration  18: 48192.413 ops/s
Iteration  19: 48134.934 ops/s
Iteration  20: 48218.066 ops/s
Iteration  21: 48137.035 ops/s
Iteration  22: 48084.096 ops/s
Iteration  23: 48270.102 ops/s
Iteration  24: 48332.529 ops/s
Iteration  25: 48158.101 ops/s
Iteration  26: 48078.176 ops/s
Iteration  27: 48148.851 ops/s
Iteration  28: 48100.895 ops/s
Iteration  29: 48035.646 ops/s
Iteration  30: 48168.663 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_equalsAndHashCode":
  48099.116 ±(99.9%) 67.041 ops/s [Average]
  (min, avg, max) = (47894.126, 48099.116, 48332.529), stdev = 100.343
  CI (99.9%): [48032.075, 48166.156] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt      Score    Error  Units
TreeBagTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  48099.116 ± 67.041  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 312117.908 ops/s
# Warmup Iteration   2: 704283.544 ops/s
# Warmup Iteration   3: 760116.940 ops/s
# Warmup Iteration   4: 763720.514 ops/s
# Warmup Iteration   5: 642905.335 ops/s
# Warmup Iteration   6: 767217.656 ops/s
# Warmup Iteration   7: 763376.221 ops/s
# Warmup Iteration   8: 765434.965 ops/s
# Warmup Iteration   9: 765290.568 ops/s
# Warmup Iteration  10: 766039.471 ops/s
# Warmup Iteration  11: 766348.432 ops/s
# Warmup Iteration  12: 763606.275 ops/s
# Warmup Iteration  13: 765306.326 ops/s
# Warmup Iteration  14: 765317.313 ops/s
# Warmup Iteration  15: 765736.861 ops/s
# Warmup Iteration  16: 763759.396 ops/s
# Warmup Iteration  17: 765227.276 ops/s
# Warmup Iteration  18: 761701.926 ops/s
# Warmup Iteration  19: 762439.114 ops/s
# Warmup Iteration  20: 764068.204 ops/s
# Warmup Iteration  21: 762807.722 ops/s
# Warmup Iteration  22: 759995.024 ops/s
# Warmup Iteration  23: 763432.353 ops/s
# Warmup Iteration  24: 761543.704 ops/s
# Warmup Iteration  25: 761688.436 ops/s
# Warmup Iteration  26: 759248.822 ops/s
# Warmup Iteration  27: 762972.781 ops/s
# Warmup Iteration  28: 763789.902 ops/s
# Warmup Iteration  29: 762406.604 ops/s
# Warmup Iteration  30: 763600.906 ops/s
Iteration   1: 765031.267 ops/s
Iteration   2: 763523.255 ops/s
Iteration   3: 763765.909 ops/s
Iteration   4: 763363.876 ops/s
Iteration   5: 766914.149 ops/s
Iteration   6: 762629.602 ops/s
Iteration   7: 760483.766 ops/s
Iteration   8: 764100.033 ops/s
Iteration   9: 761720.585 ops/s
Iteration  10: 763523.796 ops/s
Iteration  11: 762170.494 ops/s
Iteration  12: 765919.697 ops/s
Iteration  13: 764551.734 ops/s
Iteration  14: 748181.715 ops/s
Iteration  15: 765239.633 ops/s
Iteration  16: 765524.852 ops/s
Iteration  17: 756493.250 ops/s
Iteration  18: 765455.618 ops/s
Iteration  19: 763651.683 ops/s
Iteration  20: 763630.477 ops/s
Iteration  21: 761294.899 ops/s
Iteration  22: 758431.959 ops/s
Iteration  23: 761508.194 ops/s
Iteration  24: 762137.592 ops/s
Iteration  25: 761856.830 ops/s
Iteration  26: 756189.960 ops/s
Iteration  27: 759980.099 ops/s
Iteration  28: 762506.701 ops/s
Iteration  29: 761082.081 ops/s
Iteration  30: 759438.737 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollect":
  762010.081 ±(99.9%) 2458.142 ops/s [Average]
  (min, avg, max) = (748181.715, 762010.081, 766914.149), stdev = 3679.231
  CI (99.9%): [759551.940, 764468.223] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_flatCollect  thrpt   30  762010.081 ± 2458.142  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1004161.107 ops/s
# Warmup Iteration   2: 2192148.934 ops/s
# Warmup Iteration   3: 2317165.873 ops/s
# Warmup Iteration   4: 2330346.484 ops/s
# Warmup Iteration   5: 1936403.463 ops/s
# Warmup Iteration   6: 2334448.050 ops/s
# Warmup Iteration   7: 2340373.344 ops/s
# Warmup Iteration   8: 2337480.894 ops/s
# Warmup Iteration   9: 2339533.167 ops/s
# Warmup Iteration  10: 2336861.410 ops/s
# Warmup Iteration  11: 2340401.420 ops/s
# Warmup Iteration  12: 2332543.138 ops/s
# Warmup Iteration  13: 2331681.901 ops/s
# Warmup Iteration  14: 2340753.402 ops/s
# Warmup Iteration  15: 2343077.168 ops/s
# Warmup Iteration  16: 2340723.428 ops/s
# Warmup Iteration  17: 2331379.029 ops/s
# Warmup Iteration  18: 2330847.115 ops/s
# Warmup Iteration  19: 2329748.145 ops/s
# Warmup Iteration  20: 2331576.449 ops/s
# Warmup Iteration  21: 2336140.227 ops/s
# Warmup Iteration  22: 2327568.653 ops/s
# Warmup Iteration  23: 2333288.951 ops/s
# Warmup Iteration  24: 2318607.244 ops/s
# Warmup Iteration  25: 2328233.424 ops/s
# Warmup Iteration  26: 2325206.910 ops/s
# Warmup Iteration  27: 2331830.559 ops/s
# Warmup Iteration  28: 2328332.641 ops/s
# Warmup Iteration  29: 2329709.638 ops/s
# Warmup Iteration  30: 2330702.278 ops/s
Iteration   1: 2329778.986 ops/s
Iteration   2: 2332640.356 ops/s
Iteration   3: 2319310.809 ops/s
Iteration   4: 2328436.622 ops/s
Iteration   5: 2323348.804 ops/s
Iteration   6: 2336825.480 ops/s
Iteration   7: 2333331.451 ops/s
Iteration   8: 2329765.913 ops/s
Iteration   9: 2333382.780 ops/s
Iteration  10: 2335817.089 ops/s
Iteration  11: 2327603.414 ops/s
Iteration  12: 2330793.605 ops/s
Iteration  13: 2330886.638 ops/s
Iteration  14: 2333271.883 ops/s
Iteration  15: 2328260.994 ops/s
Iteration  16: 2321606.608 ops/s
Iteration  17: 2329962.278 ops/s
Iteration  18: 2328162.624 ops/s
Iteration  19: 2332186.236 ops/s
Iteration  20: 2324574.476 ops/s
Iteration  21: 2331335.477 ops/s
Iteration  22: 2339260.040 ops/s
Iteration  23: 2318556.638 ops/s
Iteration  24: 2327550.018 ops/s
Iteration  25: 2333968.844 ops/s
Iteration  26: 2339081.228 ops/s
Iteration  27: 2332581.433 ops/s
Iteration  28: 2327138.807 ops/s
Iteration  29: 2331274.544 ops/s
Iteration  30: 2329278.768 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectBoolean":
  2329999.095 ±(99.9%) 3374.068 ops/s [Average]
  (min, avg, max) = (2318556.638, 2329999.095, 2339260.040), stdev = 5050.146
  CI (99.9%): [2326625.027, 2333373.162] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_flatCollectBoolean  thrpt   30  2329999.095 ± 3374.068  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 558069.719 ops/s
# Warmup Iteration   2: 957692.115 ops/s
# Warmup Iteration   3: 1115955.617 ops/s
# Warmup Iteration   4: 1121476.507 ops/s
# Warmup Iteration   5: 1122879.529 ops/s
# Warmup Iteration   6: 935332.118 ops/s
# Warmup Iteration   7: 1124815.688 ops/s
# Warmup Iteration   8: 1125136.576 ops/s
# Warmup Iteration   9: 1125216.598 ops/s
# Warmup Iteration  10: 1123084.572 ops/s
# Warmup Iteration  11: 1126014.675 ops/s
# Warmup Iteration  12: 1125272.968 ops/s
# Warmup Iteration  13: 1123681.484 ops/s
# Warmup Iteration  14: 1122345.446 ops/s
# Warmup Iteration  15: 1124295.657 ops/s
# Warmup Iteration  16: 1124121.116 ops/s
# Warmup Iteration  17: 1125549.538 ops/s
# Warmup Iteration  18: 1124357.264 ops/s
# Warmup Iteration  19: 1123793.419 ops/s
# Warmup Iteration  20: 1124889.974 ops/s
# Warmup Iteration  21: 1124562.789 ops/s
# Warmup Iteration  22: 1123499.627 ops/s
# Warmup Iteration  23: 1126714.679 ops/s
# Warmup Iteration  24: 1127135.744 ops/s
# Warmup Iteration  25: 1125524.609 ops/s
# Warmup Iteration  26: 1125191.960 ops/s
# Warmup Iteration  27: 1126931.620 ops/s
# Warmup Iteration  28: 1125509.579 ops/s
# Warmup Iteration  29: 1127335.689 ops/s
# Warmup Iteration  30: 1125545.520 ops/s
Iteration   1: 1131097.551 ops/s
Iteration   2: 1124846.167 ops/s
Iteration   3: 1126183.385 ops/s
Iteration   4: 1128551.309 ops/s
Iteration   5: 1121631.012 ops/s
Iteration   6: 1126573.345 ops/s
Iteration   7: 1120979.271 ops/s
Iteration   8: 1124314.149 ops/s
Iteration   9: 1125710.082 ops/s
Iteration  10: 1127905.871 ops/s
Iteration  11: 1122909.636 ops/s
Iteration  12: 1127031.502 ops/s
Iteration  13: 1124186.502 ops/s
Iteration  14: 1124546.139 ops/s
Iteration  15: 1119418.290 ops/s
Iteration  16: 1125413.547 ops/s
Iteration  17: 1122190.660 ops/s
Iteration  18: 1124478.286 ops/s
Iteration  19: 1124163.619 ops/s
Iteration  20: 1121654.001 ops/s
Iteration  21: 1126561.397 ops/s
Iteration  22: 1124170.308 ops/s
Iteration  23: 1128282.735 ops/s
Iteration  24: 1123912.529 ops/s
Iteration  25: 1127992.954 ops/s
Iteration  26: 1122214.171 ops/s
Iteration  27: 1128428.896 ops/s
Iteration  28: 1119305.902 ops/s
Iteration  29: 1126122.050 ops/s
Iteration  30: 1122834.957 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectByte":
  1124787.007 ±(99.9%) 1889.491 ops/s [Average]
  (min, avg, max) = (1119305.902, 1124787.007, 1131097.551), stdev = 2828.101
  CI (99.9%): [1122897.516, 1126676.499] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_flatCollectByte  thrpt   30  1124787.007 ± 1889.491  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 752326.192 ops/s
# Warmup Iteration   2: 1584488.372 ops/s
# Warmup Iteration   3: 1699626.737 ops/s
# Warmup Iteration   4: 1709427.240 ops/s
# Warmup Iteration   5: 1431217.539 ops/s
# Warmup Iteration   6: 1711100.824 ops/s
# Warmup Iteration   7: 1714805.588 ops/s
# Warmup Iteration   8: 1710955.057 ops/s
# Warmup Iteration   9: 1709128.497 ops/s
# Warmup Iteration  10: 1713992.784 ops/s
# Warmup Iteration  11: 1704480.192 ops/s
# Warmup Iteration  12: 1712991.048 ops/s
# Warmup Iteration  13: 1712553.563 ops/s
# Warmup Iteration  14: 1712318.907 ops/s
# Warmup Iteration  15: 1711857.507 ops/s
# Warmup Iteration  16: 1710884.601 ops/s
# Warmup Iteration  17: 1714267.184 ops/s
# Warmup Iteration  18: 1714360.922 ops/s
# Warmup Iteration  19: 1712493.442 ops/s
# Warmup Iteration  20: 1716212.445 ops/s
# Warmup Iteration  21: 1714836.204 ops/s
# Warmup Iteration  22: 1711491.209 ops/s
# Warmup Iteration  23: 1710847.899 ops/s
# Warmup Iteration  24: 1716216.445 ops/s
# Warmup Iteration  25: 1712278.462 ops/s
# Warmup Iteration  26: 1713952.262 ops/s
# Warmup Iteration  27: 1712574.754 ops/s
# Warmup Iteration  28: 1712580.081 ops/s
# Warmup Iteration  29: 1712036.742 ops/s
# Warmup Iteration  30: 1715706.231 ops/s
Iteration   1: 1718003.604 ops/s
Iteration   2: 1713765.823 ops/s
Iteration   3: 1717368.360 ops/s
Iteration   4: 1717575.187 ops/s
Iteration   5: 1716287.709 ops/s
Iteration   6: 1712954.596 ops/s
Iteration   7: 1715123.442 ops/s
Iteration   8: 1715743.239 ops/s
Iteration   9: 1713774.141 ops/s
Iteration  10: 1713424.481 ops/s
Iteration  11: 1715553.076 ops/s
Iteration  12: 1715998.696 ops/s
Iteration  13: 1707067.144 ops/s
Iteration  14: 1713149.589 ops/s
Iteration  15: 1713255.767 ops/s
Iteration  16: 1717702.965 ops/s
Iteration  17: 1712798.795 ops/s
Iteration  18: 1715278.389 ops/s
Iteration  19: 1714146.145 ops/s
Iteration  20: 1707786.318 ops/s
Iteration  21: 1715234.681 ops/s
Iteration  22: 1716096.458 ops/s
Iteration  23: 1717307.049 ops/s
Iteration  24: 1712874.806 ops/s
Iteration  25: 1713348.467 ops/s
Iteration  26: 1721180.907 ops/s
Iteration  27: 1718809.844 ops/s
Iteration  28: 1711529.762 ops/s
Iteration  29: 1713017.717 ops/s
Iteration  30: 1718351.613 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectChar":
  1714816.959 ±(99.9%) 2006.708 ops/s [Average]
  (min, avg, max) = (1707067.144, 1714816.959, 1721180.907), stdev = 3003.547
  CI (99.9%): [1712810.251, 1716823.667] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_flatCollectChar  thrpt   30  1714816.959 ± 2006.708  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 384330.961 ops/s
# Warmup Iteration   2: 898875.769 ops/s
# Warmup Iteration   3: 939624.039 ops/s
# Warmup Iteration   4: 815026.539 ops/s
# Warmup Iteration   5: 912870.187 ops/s
# Warmup Iteration   6: 939883.996 ops/s
# Warmup Iteration   7: 943136.525 ops/s
# Warmup Iteration   8: 940540.320 ops/s
# Warmup Iteration   9: 939507.752 ops/s
# Warmup Iteration  10: 943293.646 ops/s
# Warmup Iteration  11: 940163.151 ops/s
# Warmup Iteration  12: 940202.329 ops/s
# Warmup Iteration  13: 940581.234 ops/s
# Warmup Iteration  14: 938872.763 ops/s
# Warmup Iteration  15: 940927.380 ops/s
# Warmup Iteration  16: 939005.559 ops/s
# Warmup Iteration  17: 942563.590 ops/s
# Warmup Iteration  18: 936745.741 ops/s
# Warmup Iteration  19: 938955.372 ops/s
# Warmup Iteration  20: 942025.793 ops/s
# Warmup Iteration  21: 940832.704 ops/s
# Warmup Iteration  22: 941042.499 ops/s
# Warmup Iteration  23: 941788.973 ops/s
# Warmup Iteration  24: 940924.148 ops/s
# Warmup Iteration  25: 939739.164 ops/s
# Warmup Iteration  26: 940851.208 ops/s
# Warmup Iteration  27: 941743.771 ops/s
# Warmup Iteration  28: 941203.265 ops/s
# Warmup Iteration  29: 943301.418 ops/s
# Warmup Iteration  30: 944363.636 ops/s
Iteration   1: 940718.558 ops/s
Iteration   2: 940315.905 ops/s
Iteration   3: 941858.851 ops/s
Iteration   4: 941151.729 ops/s
Iteration   5: 940650.228 ops/s
Iteration   6: 943162.014 ops/s
Iteration   7: 942470.070 ops/s
Iteration   8: 941725.696 ops/s
Iteration   9: 943441.729 ops/s
Iteration  10: 941088.949 ops/s
Iteration  11: 939555.823 ops/s
Iteration  12: 942054.855 ops/s
Iteration  13: 939023.833 ops/s
Iteration  14: 941665.072 ops/s
Iteration  15: 942440.774 ops/s
Iteration  16: 942465.569 ops/s
Iteration  17: 942745.168 ops/s
Iteration  18: 940806.570 ops/s
Iteration  19: 942507.752 ops/s
Iteration  20: 941945.105 ops/s
Iteration  21: 940633.037 ops/s
Iteration  22: 937795.074 ops/s
Iteration  23: 938838.594 ops/s
Iteration  24: 940411.811 ops/s
Iteration  25: 940190.403 ops/s
Iteration  26: 938381.310 ops/s
Iteration  27: 941544.033 ops/s
Iteration  28: 940266.752 ops/s
Iteration  29: 939929.227 ops/s
Iteration  30: 943216.730 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectDouble":
  941100.041 ±(99.9%) 979.348 ops/s [Average]
  (min, avg, max) = (937795.074, 941100.041, 943441.729), stdev = 1465.842
  CI (99.9%): [940120.693, 942079.388] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_flatCollectDouble  thrpt   30  941100.041 ± 979.348  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 575023.302 ops/s
# Warmup Iteration   2: 1161575.143 ops/s
# Warmup Iteration   3: 1284676.171 ops/s
# Warmup Iteration   4: 1292079.373 ops/s
# Warmup Iteration   5: 1076406.020 ops/s
# Warmup Iteration   6: 1291411.364 ops/s
# Warmup Iteration   7: 1294072.667 ops/s
# Warmup Iteration   8: 1295828.243 ops/s
# Warmup Iteration   9: 1293778.918 ops/s
# Warmup Iteration  10: 1292326.041 ops/s
# Warmup Iteration  11: 1293941.775 ops/s
# Warmup Iteration  12: 1292687.076 ops/s
# Warmup Iteration  13: 1293402.051 ops/s
# Warmup Iteration  14: 1292483.162 ops/s
# Warmup Iteration  15: 1289133.415 ops/s
# Warmup Iteration  16: 1294103.338 ops/s
# Warmup Iteration  17: 1294608.103 ops/s
# Warmup Iteration  18: 1292773.359 ops/s
# Warmup Iteration  19: 1290175.967 ops/s
# Warmup Iteration  20: 1292952.179 ops/s
# Warmup Iteration  21: 1289410.461 ops/s
# Warmup Iteration  22: 1288869.303 ops/s
# Warmup Iteration  23: 1289951.631 ops/s
# Warmup Iteration  24: 1288635.706 ops/s
# Warmup Iteration  25: 1293592.064 ops/s
# Warmup Iteration  26: 1291473.287 ops/s
# Warmup Iteration  27: 1292192.227 ops/s
# Warmup Iteration  28: 1294538.607 ops/s
# Warmup Iteration  29: 1292736.153 ops/s
# Warmup Iteration  30: 1293198.092 ops/s
Iteration   1: 1294891.816 ops/s
Iteration   2: 1290710.027 ops/s
Iteration   3: 1294098.784 ops/s
Iteration   4: 1295999.668 ops/s
Iteration   5: 1290686.387 ops/s
Iteration   6: 1293353.263 ops/s
Iteration   7: 1290029.609 ops/s
Iteration   8: 1291032.112 ops/s
Iteration   9: 1294129.759 ops/s
Iteration  10: 1296140.980 ops/s
Iteration  11: 1291456.564 ops/s
Iteration  12: 1296107.761 ops/s
Iteration  13: 1295095.960 ops/s
Iteration  14: 1292240.227 ops/s
Iteration  15: 1292460.912 ops/s
Iteration  16: 1288538.527 ops/s
Iteration  17: 1291288.695 ops/s
Iteration  18: 1293083.973 ops/s
Iteration  19: 1290402.332 ops/s
Iteration  20: 1291525.424 ops/s
Iteration  21: 1295016.407 ops/s
Iteration  22: 1289805.698 ops/s
Iteration  23: 1289948.583 ops/s
Iteration  24: 1296563.474 ops/s
Iteration  25: 1294735.998 ops/s
Iteration  26: 1292975.318 ops/s
Iteration  27: 1292519.208 ops/s
Iteration  28: 1289503.213 ops/s
Iteration  29: 1293975.606 ops/s
Iteration  30: 1292792.706 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectFloat":
  1292703.633 ±(99.9%) 1506.869 ops/s [Average]
  (min, avg, max) = (1288538.527, 1292703.633, 1296563.474), stdev = 2255.410
  CI (99.9%): [1291196.764, 1294210.502] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_flatCollectFloat  thrpt   30  1292703.633 ± 1506.869  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 690045.821 ops/s
# Warmup Iteration   2: 1677432.455 ops/s
# Warmup Iteration   3: 1770213.773 ops/s
# Warmup Iteration   4: 1477687.360 ops/s
# Warmup Iteration   5: 1773495.034 ops/s
# Warmup Iteration   6: 1772547.930 ops/s
# Warmup Iteration   7: 1774193.372 ops/s
# Warmup Iteration   8: 1777596.669 ops/s
# Warmup Iteration   9: 1774554.262 ops/s
# Warmup Iteration  10: 1773831.706 ops/s
# Warmup Iteration  11: 1769336.333 ops/s
# Warmup Iteration  12: 1776380.422 ops/s
# Warmup Iteration  13: 1774749.930 ops/s
# Warmup Iteration  14: 1777756.681 ops/s
# Warmup Iteration  15: 1770138.046 ops/s
# Warmup Iteration  16: 1772774.622 ops/s
# Warmup Iteration  17: 1775841.921 ops/s
# Warmup Iteration  18: 1773676.395 ops/s
# Warmup Iteration  19: 1772460.011 ops/s
# Warmup Iteration  20: 1775883.000 ops/s
# Warmup Iteration  21: 1778337.002 ops/s
# Warmup Iteration  22: 1775452.798 ops/s
# Warmup Iteration  23: 1775922.783 ops/s
# Warmup Iteration  24: 1777398.539 ops/s
# Warmup Iteration  25: 1773772.130 ops/s
# Warmup Iteration  26: 1773830.880 ops/s
# Warmup Iteration  27: 1777010.593 ops/s
# Warmup Iteration  28: 1778052.722 ops/s
# Warmup Iteration  29: 1771265.799 ops/s
# Warmup Iteration  30: 1774441.636 ops/s
Iteration   1: 1778641.403 ops/s
Iteration   2: 1779188.901 ops/s
Iteration   3: 1774075.795 ops/s
Iteration   4: 1776058.254 ops/s
Iteration   5: 1773896.887 ops/s
Iteration   6: 1776685.112 ops/s
Iteration   7: 1775107.656 ops/s
Iteration   8: 1777564.250 ops/s
Iteration   9: 1775468.603 ops/s
Iteration  10: 1777334.044 ops/s
Iteration  11: 1771540.171 ops/s
Iteration  12: 1773971.739 ops/s
Iteration  13: 1765802.341 ops/s
Iteration  14: 1777992.186 ops/s
Iteration  15: 1776892.979 ops/s
Iteration  16: 1770637.504 ops/s
Iteration  17: 1767534.843 ops/s
Iteration  18: 1779961.202 ops/s
Iteration  19: 1773991.817 ops/s
Iteration  20: 1773165.517 ops/s
Iteration  21: 1773631.020 ops/s
Iteration  22: 1778162.234 ops/s
Iteration  23: 1778905.062 ops/s
Iteration  24: 1771968.633 ops/s
Iteration  25: 1776747.081 ops/s
Iteration  26: 1774380.699 ops/s
Iteration  27: 1776680.343 ops/s
Iteration  28: 1768756.383 ops/s
Iteration  29: 1765478.888 ops/s
Iteration  30: 1781103.434 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectInt":
  1774710.833 ±(99.9%) 2689.553 ops/s [Average]
  (min, avg, max) = (1765478.888, 1774710.833, 1781103.434), stdev = 4025.597
  CI (99.9%): [1772021.279, 1777400.386] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_flatCollectInt  thrpt   30  1774710.833 ± 2689.553  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 573150.588 ops/s
# Warmup Iteration   2: 1612693.248 ops/s
# Warmup Iteration   3: 1633955.677 ops/s
# Warmup Iteration   4: 1370240.553 ops/s
# Warmup Iteration   5: 1638123.810 ops/s
# Warmup Iteration   6: 1640477.270 ops/s
# Warmup Iteration   7: 1642514.835 ops/s
# Warmup Iteration   8: 1631035.496 ops/s
# Warmup Iteration   9: 1617457.440 ops/s
# Warmup Iteration  10: 1638723.782 ops/s
# Warmup Iteration  11: 1640835.775 ops/s
# Warmup Iteration  12: 1640782.330 ops/s
# Warmup Iteration  13: 1642951.032 ops/s
# Warmup Iteration  14: 1640566.748 ops/s
# Warmup Iteration  15: 1642528.736 ops/s
# Warmup Iteration  16: 1641760.465 ops/s
# Warmup Iteration  17: 1641633.718 ops/s
# Warmup Iteration  18: 1643206.442 ops/s
# Warmup Iteration  19: 1638232.797 ops/s
# Warmup Iteration  20: 1639414.071 ops/s
# Warmup Iteration  21: 1636770.947 ops/s
# Warmup Iteration  22: 1636043.341 ops/s
# Warmup Iteration  23: 1641593.007 ops/s
# Warmup Iteration  24: 1638138.756 ops/s
# Warmup Iteration  25: 1635714.075 ops/s
# Warmup Iteration  26: 1633531.094 ops/s
# Warmup Iteration  27: 1641099.459 ops/s
# Warmup Iteration  28: 1640121.853 ops/s
# Warmup Iteration  29: 1640681.585 ops/s
# Warmup Iteration  30: 1637487.141 ops/s
Iteration   1: 1640154.353 ops/s
Iteration   2: 1641827.816 ops/s
Iteration   3: 1642221.538 ops/s
Iteration   4: 1625882.552 ops/s
Iteration   5: 1634934.768 ops/s
Iteration   6: 1640056.491 ops/s
Iteration   7: 1639954.389 ops/s
Iteration   8: 1638255.776 ops/s
Iteration   9: 1639569.919 ops/s
Iteration  10: 1629101.704 ops/s
Iteration  11: 1633531.671 ops/s
Iteration  12: 1639325.817 ops/s
Iteration  13: 1638256.692 ops/s
Iteration  14: 1633597.297 ops/s
Iteration  15: 1638370.193 ops/s
Iteration  16: 1639095.008 ops/s
Iteration  17: 1632211.931 ops/s
Iteration  18: 1641968.610 ops/s
Iteration  19: 1640523.540 ops/s
Iteration  20: 1647733.205 ops/s
Iteration  21: 1634404.033 ops/s
Iteration  22: 1635076.928 ops/s
Iteration  23: 1639241.692 ops/s
Iteration  24: 1642343.726 ops/s
Iteration  25: 1639420.543 ops/s
Iteration  26: 1644892.850 ops/s
Iteration  27: 1645194.196 ops/s
Iteration  28: 1644777.045 ops/s
Iteration  29: 1640964.450 ops/s
Iteration  30: 1639933.156 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectLong":
  1638760.730 ±(99.9%) 3187.852 ops/s [Average]
  (min, avg, max) = (1625882.552, 1638760.730, 1647733.205), stdev = 4771.428
  CI (99.9%): [1635572.877, 1641948.582] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_flatCollectLong  thrpt   30  1638760.730 ± 3187.852  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 745453.698 ops/s
# Warmup Iteration   2: 1764071.587 ops/s
# Warmup Iteration   3: 1855201.280 ops/s
# Warmup Iteration   4: 1589552.210 ops/s
# Warmup Iteration   5: 1812803.096 ops/s
# Warmup Iteration   6: 1854540.001 ops/s
# Warmup Iteration   7: 1855613.850 ops/s
# Warmup Iteration   8: 1854880.732 ops/s
# Warmup Iteration   9: 1853271.537 ops/s
# Warmup Iteration  10: 1848515.191 ops/s
# Warmup Iteration  11: 1857489.013 ops/s
# Warmup Iteration  12: 1855638.874 ops/s
# Warmup Iteration  13: 1852932.109 ops/s
# Warmup Iteration  14: 1855402.957 ops/s
# Warmup Iteration  15: 1854643.227 ops/s
# Warmup Iteration  16: 1855146.659 ops/s
# Warmup Iteration  17: 1856708.441 ops/s
# Warmup Iteration  18: 1848558.913 ops/s
# Warmup Iteration  19: 1855935.882 ops/s
# Warmup Iteration  20: 1860250.374 ops/s
# Warmup Iteration  21: 1854407.601 ops/s
# Warmup Iteration  22: 1856273.049 ops/s
# Warmup Iteration  23: 1858230.592 ops/s
# Warmup Iteration  24: 1855502.526 ops/s
# Warmup Iteration  25: 1853113.490 ops/s
# Warmup Iteration  26: 1857171.987 ops/s
# Warmup Iteration  27: 1855805.020 ops/s
# Warmup Iteration  28: 1854243.677 ops/s
# Warmup Iteration  29: 1854639.966 ops/s
# Warmup Iteration  30: 1858348.492 ops/s
Iteration   1: 1856478.037 ops/s
Iteration   2: 1857711.554 ops/s
Iteration   3: 1857251.734 ops/s
Iteration   4: 1851021.294 ops/s
Iteration   5: 1863420.921 ops/s
Iteration   6: 1858944.871 ops/s
Iteration   7: 1856656.948 ops/s
Iteration   8: 1857409.548 ops/s
Iteration   9: 1857757.722 ops/s
Iteration  10: 1847142.825 ops/s
Iteration  11: 1858100.859 ops/s
Iteration  12: 1859809.637 ops/s
Iteration  13: 1843331.244 ops/s
Iteration  14: 1854656.418 ops/s
Iteration  15: 1854092.811 ops/s
Iteration  16: 1852089.438 ops/s
Iteration  17: 1858650.609 ops/s
Iteration  18: 1862079.880 ops/s
Iteration  19: 1846862.818 ops/s
Iteration  20: 1857353.927 ops/s
Iteration  21: 1857983.503 ops/s
Iteration  22: 1856380.367 ops/s
Iteration  23: 1856811.514 ops/s
Iteration  24: 1860992.562 ops/s
Iteration  25: 1860180.769 ops/s
Iteration  26: 1861986.121 ops/s
Iteration  27: 1857356.385 ops/s
Iteration  28: 1860833.761 ops/s
Iteration  29: 1855707.209 ops/s
Iteration  30: 1857565.528 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectShort":
  1856554.027 ±(99.9%) 3059.647 ops/s [Average]
  (min, avg, max) = (1843331.244, 1856554.027, 1863420.921), stdev = 4579.536
  CI (99.9%): [1853494.380, 1859613.674] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_flatCollectShort  thrpt   30  1856554.027 ± 3059.647  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1004371.237 ops/s
# Warmup Iteration   2: 2325463.977 ops/s
# Warmup Iteration   3: 2367551.176 ops/s
# Warmup Iteration   4: 1984807.230 ops/s
# Warmup Iteration   5: 2374167.959 ops/s
# Warmup Iteration   6: 2371797.567 ops/s
# Warmup Iteration   7: 2374601.461 ops/s
# Warmup Iteration   8: 2375304.973 ops/s
# Warmup Iteration   9: 2370485.402 ops/s
# Warmup Iteration  10: 2364875.115 ops/s
# Warmup Iteration  11: 2379642.315 ops/s
# Warmup Iteration  12: 2365961.991 ops/s
# Warmup Iteration  13: 2373943.760 ops/s
# Warmup Iteration  14: 2376428.074 ops/s
# Warmup Iteration  15: 2375442.857 ops/s
# Warmup Iteration  16: 2373054.192 ops/s
# Warmup Iteration  17: 2382748.600 ops/s
# Warmup Iteration  18: 2383205.420 ops/s
# Warmup Iteration  19: 2380936.827 ops/s
# Warmup Iteration  20: 2386727.607 ops/s
# Warmup Iteration  21: 2382567.272 ops/s
# Warmup Iteration  22: 2379615.291 ops/s
# Warmup Iteration  23: 2380822.149 ops/s
# Warmup Iteration  24: 2383045.272 ops/s
# Warmup Iteration  25: 2381939.152 ops/s
# Warmup Iteration  26: 2380892.265 ops/s
# Warmup Iteration  27: 2387743.884 ops/s
# Warmup Iteration  28: 2382367.739 ops/s
# Warmup Iteration  29: 2384952.062 ops/s
# Warmup Iteration  30: 2383561.966 ops/s
Iteration   1: 2386447.587 ops/s
Iteration   2: 2385917.533 ops/s
Iteration   3: 2387998.159 ops/s
Iteration   4: 2371919.428 ops/s
Iteration   5: 2386273.087 ops/s
Iteration   6: 2385619.888 ops/s
Iteration   7: 2387978.920 ops/s
Iteration   8: 2388953.414 ops/s
Iteration   9: 2385835.571 ops/s
Iteration  10: 2378758.622 ops/s
Iteration  11: 2383463.698 ops/s
Iteration  12: 2375502.750 ops/s
Iteration  13: 2387983.673 ops/s
Iteration  14: 2390081.478 ops/s
Iteration  15: 2382085.230 ops/s
Iteration  16: 2375892.655 ops/s
Iteration  17: 2387888.761 ops/s
Iteration  18: 2378181.041 ops/s
Iteration  19: 2374043.927 ops/s
Iteration  20: 2394254.715 ops/s
Iteration  21: 2377776.501 ops/s
Iteration  22: 2387161.713 ops/s
Iteration  23: 2373811.861 ops/s
Iteration  24: 2380642.015 ops/s
Iteration  25: 2382307.183 ops/s
Iteration  26: 2372950.768 ops/s
Iteration  27: 2387876.458 ops/s
Iteration  28: 2378468.378 ops/s
Iteration  29: 2386715.499 ops/s
Iteration  30: 2381451.862 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_flatCollectWith":
  2382808.079 ±(99.9%) 3931.574 ops/s [Average]
  (min, avg, max) = (2371919.428, 2382808.079, 2394254.715), stdev = 5884.595
  CI (99.9%): [2378876.505, 2386739.653] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_flatCollectWith  thrpt   30  2382808.079 ± 3931.574  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 644056.562 ops/s
# Warmup Iteration   2: 1242138.232 ops/s
# Warmup Iteration   3: 1413424.017 ops/s
# Warmup Iteration   4: 1411834.137 ops/s
# Warmup Iteration   5: 1327699.205 ops/s
# Warmup Iteration   6: 1256936.280 ops/s
# Warmup Iteration   7: 1406817.472 ops/s
# Warmup Iteration   8: 1407172.891 ops/s
# Warmup Iteration   9: 1407568.627 ops/s
# Warmup Iteration  10: 1407743.096 ops/s
# Warmup Iteration  11: 1406638.288 ops/s
# Warmup Iteration  12: 1409123.870 ops/s
# Warmup Iteration  13: 1411241.665 ops/s
# Warmup Iteration  14: 1409131.488 ops/s
# Warmup Iteration  15: 1409922.844 ops/s
# Warmup Iteration  16: 1408575.090 ops/s
# Warmup Iteration  17: 1399738.597 ops/s
# Warmup Iteration  18: 1402962.030 ops/s
# Warmup Iteration  19: 1401362.140 ops/s
# Warmup Iteration  20: 1402272.212 ops/s
# Warmup Iteration  21: 1397009.224 ops/s
# Warmup Iteration  22: 1400618.790 ops/s
# Warmup Iteration  23: 1400675.804 ops/s
# Warmup Iteration  24: 1398451.811 ops/s
# Warmup Iteration  25: 1397864.112 ops/s
# Warmup Iteration  26: 1401010.973 ops/s
# Warmup Iteration  27: 1399669.512 ops/s
# Warmup Iteration  28: 1400434.901 ops/s
# Warmup Iteration  29: 1399287.366 ops/s
# Warmup Iteration  30: 1399579.625 ops/s
Iteration   1: 1398130.027 ops/s
Iteration   2: 1402850.415 ops/s
Iteration   3: 1400247.318 ops/s
Iteration   4: 1404381.300 ops/s
Iteration   5: 1396591.247 ops/s
Iteration   6: 1395917.030 ops/s
Iteration   7: 1403930.484 ops/s
Iteration   8: 1404443.782 ops/s
Iteration   9: 1404308.118 ops/s
Iteration  10: 1400820.648 ops/s
Iteration  11: 1400035.864 ops/s
Iteration  12: 1404327.902 ops/s
Iteration  13: 1401023.550 ops/s
Iteration  14: 1402333.849 ops/s
Iteration  15: 1400737.771 ops/s
Iteration  16: 1399765.279 ops/s
Iteration  17: 1401509.769 ops/s
Iteration  18: 1400649.547 ops/s
Iteration  19: 1399427.007 ops/s
Iteration  20: 1400118.629 ops/s
Iteration  21: 1399202.177 ops/s
Iteration  22: 1404896.104 ops/s
Iteration  23: 1398527.819 ops/s
Iteration  24: 1399927.236 ops/s
Iteration  25: 1402322.418 ops/s
Iteration  26: 1399972.664 ops/s
Iteration  27: 1404621.164 ops/s
Iteration  28: 1400636.187 ops/s
Iteration  29: 1400159.024 ops/s
Iteration  30: 1399942.778 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_forEach":
  1401058.570 ±(99.9%) 1583.060 ops/s [Average]
  (min, avg, max) = (1395917.030, 1401058.570, 1404896.104), stdev = 2369.449
  CI (99.9%): [1399475.511, 1402641.630] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_forEach  thrpt   30  1401058.570 ± 1583.060  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 161736.643 ops/s
# Warmup Iteration   2: 181198.125 ops/s
# Warmup Iteration   3: 208700.370 ops/s
# Warmup Iteration   4: 227443.612 ops/s
# Warmup Iteration   5: 227458.039 ops/s
# Warmup Iteration   6: 227407.732 ops/s
# Warmup Iteration   7: 226511.189 ops/s
# Warmup Iteration   8: 226687.115 ops/s
# Warmup Iteration   9: 227500.976 ops/s
# Warmup Iteration  10: 226789.382 ops/s
# Warmup Iteration  11: 227668.596 ops/s
# Warmup Iteration  12: 227239.094 ops/s
# Warmup Iteration  13: 227428.268 ops/s
# Warmup Iteration  14: 202563.883 ops/s
# Warmup Iteration  15: 216797.202 ops/s
# Warmup Iteration  16: 227085.484 ops/s
# Warmup Iteration  17: 236903.908 ops/s
# Warmup Iteration  18: 236400.292 ops/s
# Warmup Iteration  19: 236484.061 ops/s
# Warmup Iteration  20: 236255.890 ops/s
# Warmup Iteration  21: 235956.694 ops/s
# Warmup Iteration  22: 236562.113 ops/s
# Warmup Iteration  23: 236816.248 ops/s
# Warmup Iteration  24: 236913.261 ops/s
# Warmup Iteration  25: 235974.242 ops/s
# Warmup Iteration  26: 236880.563 ops/s
# Warmup Iteration  27: 236950.841 ops/s
# Warmup Iteration  28: 236159.249 ops/s
# Warmup Iteration  29: 236308.273 ops/s
# Warmup Iteration  30: 236425.559 ops/s
Iteration   1: 236186.428 ops/s
Iteration   2: 236287.119 ops/s
Iteration   3: 236893.007 ops/s
Iteration   4: 236451.944 ops/s
Iteration   5: 236953.957 ops/s
Iteration   6: 236972.324 ops/s
Iteration   7: 236409.984 ops/s
Iteration   8: 236803.747 ops/s
Iteration   9: 236760.912 ops/s
Iteration  10: 237305.970 ops/s
Iteration  11: 236107.809 ops/s
Iteration  12: 236739.520 ops/s
Iteration  13: 236558.944 ops/s
Iteration  14: 236559.384 ops/s
Iteration  15: 236204.947 ops/s
Iteration  16: 237188.083 ops/s
Iteration  17: 235921.109 ops/s
Iteration  18: 236497.491 ops/s
Iteration  19: 236172.367 ops/s
Iteration  20: 236931.908 ops/s
Iteration  21: 236732.380 ops/s
Iteration  22: 236345.197 ops/s
Iteration  23: 237612.244 ops/s
Iteration  24: 236312.098 ops/s
Iteration  25: 236542.093 ops/s
Iteration  26: 235904.260 ops/s
Iteration  27: 237152.291 ops/s
Iteration  28: 236486.596 ops/s
Iteration  29: 236308.719 ops/s
Iteration  30: 236259.948 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_forEachFromTo":
  236585.426 ±(99.9%) 276.399 ops/s [Average]
  (min, avg, max) = (235904.260, 236585.426, 237612.244), stdev = 413.701
  CI (99.9%): [236309.027, 236861.825] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_forEachFromTo  thrpt   30  236585.426 ± 276.399  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 622029.561 ops/s
# Warmup Iteration   2: 1275483.910 ops/s
# Warmup Iteration   3: 1366414.316 ops/s
# Warmup Iteration   4: 1372278.009 ops/s
# Warmup Iteration   5: 1145473.662 ops/s
# Warmup Iteration   6: 1373069.902 ops/s
# Warmup Iteration   7: 1371858.294 ops/s
# Warmup Iteration   8: 1374038.197 ops/s
# Warmup Iteration   9: 1371115.452 ops/s
# Warmup Iteration  10: 1369918.330 ops/s
# Warmup Iteration  11: 1372945.086 ops/s
# Warmup Iteration  12: 1374568.465 ops/s
# Warmup Iteration  13: 1374516.701 ops/s
# Warmup Iteration  14: 1375613.621 ops/s
# Warmup Iteration  15: 1374730.570 ops/s
# Warmup Iteration  16: 1369464.694 ops/s
# Warmup Iteration  17: 1372378.141 ops/s
# Warmup Iteration  18: 1372375.521 ops/s
# Warmup Iteration  19: 1374629.813 ops/s
# Warmup Iteration  20: 1371411.567 ops/s
# Warmup Iteration  21: 1373017.711 ops/s
# Warmup Iteration  22: 1372320.538 ops/s
# Warmup Iteration  23: 1374427.582 ops/s
# Warmup Iteration  24: 1373353.636 ops/s
# Warmup Iteration  25: 1368113.306 ops/s
# Warmup Iteration  26: 1370450.491 ops/s
# Warmup Iteration  27: 1368159.662 ops/s
# Warmup Iteration  28: 1372461.623 ops/s
# Warmup Iteration  29: 1370062.902 ops/s
# Warmup Iteration  30: 1369647.323 ops/s
Iteration   1: 1374249.589 ops/s
Iteration   2: 1374461.717 ops/s
Iteration   3: 1371669.223 ops/s
Iteration   4: 1375503.965 ops/s
Iteration   5: 1375333.687 ops/s
Iteration   6: 1370380.425 ops/s
Iteration   7: 1367294.677 ops/s
Iteration   8: 1377616.035 ops/s
Iteration   9: 1370929.588 ops/s
Iteration  10: 1370213.571 ops/s
Iteration  11: 1373576.571 ops/s
Iteration  12: 1373821.277 ops/s
Iteration  13: 1370494.775 ops/s
Iteration  14: 1370883.817 ops/s
Iteration  15: 1374814.336 ops/s
Iteration  16: 1370440.156 ops/s
Iteration  17: 1372129.202 ops/s
Iteration  18: 1374132.973 ops/s
Iteration  19: 1375606.144 ops/s
Iteration  20: 1376147.072 ops/s
Iteration  21: 1375007.378 ops/s
Iteration  22: 1373102.194 ops/s
Iteration  23: 1373849.431 ops/s
Iteration  24: 1374902.883 ops/s
Iteration  25: 1367198.405 ops/s
Iteration  26: 1373524.337 ops/s
Iteration  27: 1366658.953 ops/s
Iteration  28: 1377314.402 ops/s
Iteration  29: 1375202.011 ops/s
Iteration  30: 1371481.078 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_forEachWith":
  1372931.329 ±(99.9%) 1915.812 ops/s [Average]
  (min, avg, max) = (1366658.953, 1372931.329, 1377616.035), stdev = 2867.498
  CI (99.9%): [1371015.517, 1374847.141] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_forEachWith  thrpt   30  1372931.329 ± 1915.812  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 325702.615 ops/s
# Warmup Iteration   2: 537143.308 ops/s
# Warmup Iteration   3: 633062.623 ops/s
# Warmup Iteration   4: 638560.159 ops/s
# Warmup Iteration   5: 637584.073 ops/s
# Warmup Iteration   6: 599492.224 ops/s
# Warmup Iteration   7: 566890.476 ops/s
# Warmup Iteration   8: 637157.619 ops/s
# Warmup Iteration   9: 638605.608 ops/s
# Warmup Iteration  10: 638003.727 ops/s
# Warmup Iteration  11: 637882.889 ops/s
# Warmup Iteration  12: 637367.980 ops/s
# Warmup Iteration  13: 637897.140 ops/s
# Warmup Iteration  14: 636770.585 ops/s
# Warmup Iteration  15: 637787.996 ops/s
# Warmup Iteration  16: 637018.204 ops/s
# Warmup Iteration  17: 637151.014 ops/s
# Warmup Iteration  18: 637325.710 ops/s
# Warmup Iteration  19: 637287.509 ops/s
# Warmup Iteration  20: 635802.437 ops/s
# Warmup Iteration  21: 636935.029 ops/s
# Warmup Iteration  22: 637105.710 ops/s
# Warmup Iteration  23: 636548.240 ops/s
# Warmup Iteration  24: 637842.820 ops/s
# Warmup Iteration  25: 637957.983 ops/s
# Warmup Iteration  26: 637802.474 ops/s
# Warmup Iteration  27: 637532.141 ops/s
# Warmup Iteration  28: 637760.040 ops/s
# Warmup Iteration  29: 637848.755 ops/s
# Warmup Iteration  30: 637073.999 ops/s
Iteration   1: 636311.868 ops/s
Iteration   2: 635582.788 ops/s
Iteration   3: 639498.171 ops/s
Iteration   4: 639315.557 ops/s
Iteration   5: 637107.154 ops/s
Iteration   6: 639396.486 ops/s
Iteration   7: 636452.647 ops/s
Iteration   8: 639148.952 ops/s
Iteration   9: 635345.568 ops/s
Iteration  10: 635636.066 ops/s
Iteration  11: 636764.498 ops/s
Iteration  12: 638692.259 ops/s
Iteration  13: 637056.905 ops/s
Iteration  14: 638589.761 ops/s
Iteration  15: 636908.982 ops/s
Iteration  16: 640343.961 ops/s
Iteration  17: 638215.788 ops/s
Iteration  18: 640003.639 ops/s
Iteration  19: 637345.022 ops/s
Iteration  20: 639477.328 ops/s
Iteration  21: 637158.341 ops/s
Iteration  22: 638144.540 ops/s
Iteration  23: 637306.134 ops/s
Iteration  24: 637140.833 ops/s
Iteration  25: 637838.163 ops/s
Iteration  26: 637021.770 ops/s
Iteration  27: 636872.816 ops/s
Iteration  28: 639195.843 ops/s
Iteration  29: 636143.619 ops/s
Iteration  30: 638283.604 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_forEachWithIndex":
  637743.302 ±(99.9%) 924.652 ops/s [Average]
  (min, avg, max) = (635345.568, 637743.302, 640343.961), stdev = 1383.975
  CI (99.9%): [636818.650, 638667.954] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  637743.302 ± 924.652  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_forEachWithIndexWithFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_forEachWithIndexWithFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 148337.036 ops/s
# Warmup Iteration   2: 167093.223 ops/s
# Warmup Iteration   3: 205065.184 ops/s
# Warmup Iteration   4: 215218.804 ops/s
# Warmup Iteration   5: 215033.358 ops/s
# Warmup Iteration   6: 214107.784 ops/s
# Warmup Iteration   7: 215071.398 ops/s
# Warmup Iteration   8: 214909.135 ops/s
# Warmup Iteration   9: 214871.463 ops/s
# Warmup Iteration  10: 215322.825 ops/s
# Warmup Iteration  11: 215556.686 ops/s
# Warmup Iteration  12: 215361.987 ops/s
# Warmup Iteration  13: 181546.612 ops/s
# Warmup Iteration  14: 215265.609 ops/s
# Warmup Iteration  15: 215549.536 ops/s
# Warmup Iteration  16: 215177.236 ops/s
# Warmup Iteration  17: 224100.750 ops/s
# Warmup Iteration  18: 223939.780 ops/s
# Warmup Iteration  19: 224448.222 ops/s
# Warmup Iteration  20: 224088.821 ops/s
# Warmup Iteration  21: 224383.364 ops/s
# Warmup Iteration  22: 224375.297 ops/s
# Warmup Iteration  23: 224225.819 ops/s
# Warmup Iteration  24: 224137.112 ops/s
# Warmup Iteration  25: 224458.848 ops/s
# Warmup Iteration  26: 224239.331 ops/s
# Warmup Iteration  27: 224693.299 ops/s
# Warmup Iteration  28: 224144.562 ops/s
# Warmup Iteration  29: 224170.807 ops/s
# Warmup Iteration  30: 223938.751 ops/s
Iteration   1: 224559.320 ops/s
Iteration   2: 223365.838 ops/s
Iteration   3: 223757.443 ops/s
Iteration   4: 223102.332 ops/s
Iteration   5: 224206.205 ops/s
Iteration   6: 223572.582 ops/s
Iteration   7: 224164.010 ops/s
Iteration   8: 224248.394 ops/s
Iteration   9: 223416.795 ops/s
Iteration  10: 223846.689 ops/s
Iteration  11: 223813.846 ops/s
Iteration  12: 224559.297 ops/s
Iteration  13: 223769.277 ops/s
Iteration  14: 224059.674 ops/s
Iteration  15: 224465.986 ops/s
Iteration  16: 223720.395 ops/s
Iteration  17: 223808.539 ops/s
Iteration  18: 223341.849 ops/s
Iteration  19: 224586.941 ops/s
Iteration  20: 224016.999 ops/s
Iteration  21: 224199.786 ops/s
Iteration  22: 222791.618 ops/s
Iteration  23: 223288.932 ops/s
Iteration  24: 223999.587 ops/s
Iteration  25: 223886.097 ops/s
Iteration  26: 223374.703 ops/s
Iteration  27: 224058.404 ops/s
Iteration  28: 223743.805 ops/s
Iteration  29: 224020.532 ops/s
Iteration  30: 223264.353 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_forEachWithIndexWithFromTo":
  223833.674 ±(99.9%) 302.925 ops/s [Average]
  (min, avg, max) = (222791.618, 223833.674, 224586.941), stdev = 453.404
  CI (99.9%): [223530.749, 224136.599] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_forEachWithIndexWithFromTo  thrpt   30  223833.674 ± 302.925  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_forEachWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_forEachWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 467680.392 ops/s
# Warmup Iteration   2: 811189.355 ops/s
# Warmup Iteration   3: 971823.335 ops/s
# Warmup Iteration   4: 977410.498 ops/s
# Warmup Iteration   5: 977996.808 ops/s
# Warmup Iteration   6: 884096.969 ops/s
# Warmup Iteration   7: 910908.566 ops/s
# Warmup Iteration   8: 977613.071 ops/s
# Warmup Iteration   9: 976537.775 ops/s
# Warmup Iteration  10: 978204.456 ops/s
# Warmup Iteration  11: 977171.419 ops/s
# Warmup Iteration  12: 977547.126 ops/s
# Warmup Iteration  13: 975445.813 ops/s
# Warmup Iteration  14: 975799.619 ops/s
# Warmup Iteration  15: 975887.813 ops/s
# Warmup Iteration  16: 977336.514 ops/s
# Warmup Iteration  17: 976202.497 ops/s
# Warmup Iteration  18: 978680.414 ops/s
# Warmup Iteration  19: 977414.263 ops/s
# Warmup Iteration  20: 978557.574 ops/s
# Warmup Iteration  21: 976886.340 ops/s
# Warmup Iteration  22: 978775.699 ops/s
# Warmup Iteration  23: 978836.252 ops/s
# Warmup Iteration  24: 977875.161 ops/s
# Warmup Iteration  25: 978185.554 ops/s
# Warmup Iteration  26: 978808.185 ops/s
# Warmup Iteration  27: 978574.948 ops/s
# Warmup Iteration  28: 977822.968 ops/s
# Warmup Iteration  29: 979080.772 ops/s
# Warmup Iteration  30: 977189.845 ops/s
Iteration   1: 976409.517 ops/s
Iteration   2: 976143.811 ops/s
Iteration   3: 981273.241 ops/s
Iteration   4: 974687.012 ops/s
Iteration   5: 981266.333 ops/s
Iteration   6: 976829.122 ops/s
Iteration   7: 977414.689 ops/s
Iteration   8: 980402.843 ops/s
Iteration   9: 974658.746 ops/s
Iteration  10: 976346.239 ops/s
Iteration  11: 975988.954 ops/s
Iteration  12: 980355.626 ops/s
Iteration  13: 977070.296 ops/s
Iteration  14: 979084.730 ops/s
Iteration  15: 979172.042 ops/s
Iteration  16: 979649.890 ops/s
Iteration  17: 978731.283 ops/s
Iteration  18: 980797.788 ops/s
Iteration  19: 977451.066 ops/s
Iteration  20: 978068.201 ops/s
Iteration  21: 978031.487 ops/s
Iteration  22: 977159.345 ops/s
Iteration  23: 977983.000 ops/s
Iteration  24: 978046.302 ops/s
Iteration  25: 976762.226 ops/s
Iteration  26: 978809.458 ops/s
Iteration  27: 972946.171 ops/s
Iteration  28: 979420.292 ops/s
Iteration  29: 974873.958 ops/s
Iteration  30: 979100.178 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_forEachWithOccurrences":
  977831.128 ±(99.9%) 1385.436 ops/s [Average]
  (min, avg, max) = (972946.171, 977831.128, 981273.241), stdev = 2073.656
  CI (99.9%): [976445.692, 979216.564] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_forEachWithOccurrences  thrpt   30  977831.128 ± 1385.436  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_fusedCollectMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_fusedCollectMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 860883.216 ops/s
# Warmup Iteration   2: 1914870.137 ops/s
# Warmup Iteration   3: 1991773.177 ops/s
# Warmup Iteration   4: 1854001.003 ops/s
# Warmup Iteration   5: 1820973.678 ops/s
# Warmup Iteration   6: 2006503.058 ops/s
# Warmup Iteration   7: 1999226.093 ops/s
# Warmup Iteration   8: 2000126.457 ops/s
# Warmup Iteration   9: 1999782.149 ops/s
# Warmup Iteration  10: 1999325.812 ops/s
# Warmup Iteration  11: 2001204.956 ops/s
# Warmup Iteration  12: 1996233.532 ops/s
# Warmup Iteration  13: 1997597.161 ops/s
# Warmup Iteration  14: 2004109.903 ops/s
# Warmup Iteration  15: 2002117.531 ops/s
# Warmup Iteration  16: 2002252.194 ops/s
# Warmup Iteration  17: 2005106.525 ops/s
# Warmup Iteration  18: 2004911.590 ops/s
# Warmup Iteration  19: 2009346.087 ops/s
# Warmup Iteration  20: 1997951.694 ops/s
# Warmup Iteration  21: 1998211.187 ops/s
# Warmup Iteration  22: 2006342.106 ops/s
# Warmup Iteration  23: 2002114.690 ops/s
# Warmup Iteration  24: 2006219.725 ops/s
# Warmup Iteration  25: 2005043.926 ops/s
# Warmup Iteration  26: 2000348.128 ops/s
# Warmup Iteration  27: 2006256.050 ops/s
# Warmup Iteration  28: 2000592.420 ops/s
# Warmup Iteration  29: 2003079.969 ops/s
# Warmup Iteration  30: 2003723.209 ops/s
Iteration   1: 1999487.272 ops/s
Iteration   2: 2000142.728 ops/s
Iteration   3: 2012255.329 ops/s
Iteration   4: 2000411.361 ops/s
Iteration   5: 2002726.565 ops/s
Iteration   6: 2002843.217 ops/s
Iteration   7: 2003138.604 ops/s
Iteration   8: 2007490.933 ops/s
Iteration   9: 1996959.539 ops/s
Iteration  10: 1997788.646 ops/s
Iteration  11: 2004915.357 ops/s
Iteration  12: 1990025.593 ops/s
Iteration  13: 2000884.962 ops/s
Iteration  14: 1998924.287 ops/s
Iteration  15: 2004674.803 ops/s
Iteration  16: 1990980.218 ops/s
Iteration  17: 1998297.353 ops/s
Iteration  18: 2005494.502 ops/s
Iteration  19: 1999199.306 ops/s
Iteration  20: 1991371.269 ops/s
Iteration  21: 2004686.017 ops/s
Iteration  22: 2004619.821 ops/s
Iteration  23: 2004210.309 ops/s
Iteration  24: 1999319.628 ops/s
Iteration  25: 2000271.607 ops/s
Iteration  26: 2000548.750 ops/s
Iteration  27: 1998772.532 ops/s
Iteration  28: 1999214.177 ops/s
Iteration  29: 2002503.756 ops/s
Iteration  30: 1999849.803 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_fusedCollectMakeString":
  2000733.608 ±(99.9%) 3132.214 ops/s [Average]
  (min, avg, max) = (1990025.593, 2000733.608, 2012255.329), stdev = 4688.150
  CI (99.9%): [1997601.394, 2003865.822] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_fusedCollectMakeString  thrpt   30  2000733.608 ± 3132.214  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_getAny$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_getAny

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1059532.575 ops/s
# Warmup Iteration   2: 1665180.480 ops/s
# Warmup Iteration   3: 1981578.745 ops/s
# Warmup Iteration   4: 1972370.897 ops/s
# Warmup Iteration   5: 1988593.738 ops/s
# Warmup Iteration   6: 1986980.847 ops/s
# Warmup Iteration   7: 1651118.687 ops/s
# Warmup Iteration   8: 1975824.408 ops/s
# Warmup Iteration   9: 1977977.140 ops/s
# Warmup Iteration  10: 1977812.984 ops/s
# Warmup Iteration  11: 1978121.663 ops/s
# Warmup Iteration  12: 1976731.455 ops/s
# Warmup Iteration  13: 1972577.031 ops/s
# Warmup Iteration  14: 1976882.293 ops/s
# Warmup Iteration  15: 1977243.807 ops/s
# Warmup Iteration  16: 1975286.498 ops/s
# Warmup Iteration  17: 1984798.546 ops/s
# Warmup Iteration  18: 1987418.272 ops/s
# Warmup Iteration  19: 1988020.337 ops/s
# Warmup Iteration  20: 1985046.032 ops/s
# Warmup Iteration  21: 1985025.551 ops/s
# Warmup Iteration  22: 1990556.039 ops/s
# Warmup Iteration  23: 1981973.318 ops/s
# Warmup Iteration  24: 1974655.957 ops/s
# Warmup Iteration  25: 1989479.122 ops/s
# Warmup Iteration  26: 1988729.738 ops/s
# Warmup Iteration  27: 1988740.319 ops/s
# Warmup Iteration  28: 1988686.767 ops/s
# Warmup Iteration  29: 1988195.401 ops/s
# Warmup Iteration  30: 1992252.259 ops/s
Iteration   1: 1983416.944 ops/s
Iteration   2: 1987205.614 ops/s
Iteration   3: 1984466.004 ops/s
Iteration   4: 1985959.821 ops/s
Iteration   5: 1987214.500 ops/s
Iteration   6: 1985760.315 ops/s
Iteration   7: 1985795.972 ops/s
Iteration   8: 1986225.932 ops/s
Iteration   9: 1983418.467 ops/s
Iteration  10: 1984958.068 ops/s
Iteration  11: 1991736.258 ops/s
Iteration  12: 1988308.062 ops/s
Iteration  13: 1990638.365 ops/s
Iteration  14: 1980244.615 ops/s
Iteration  15: 1990796.993 ops/s
Iteration  16: 1980995.793 ops/s
Iteration  17: 1992531.633 ops/s
Iteration  18: 1985027.358 ops/s
Iteration  19: 1991166.881 ops/s
Iteration  20: 1990920.225 ops/s
Iteration  21: 1988722.059 ops/s
Iteration  22: 1994716.025 ops/s
Iteration  23: 1985757.768 ops/s
Iteration  24: 1989607.994 ops/s
Iteration  25: 1980937.734 ops/s
Iteration  26: 1987866.503 ops/s
Iteration  27: 1986076.431 ops/s
Iteration  28: 1988032.708 ops/s
Iteration  29: 1987013.138 ops/s
Iteration  30: 1979100.005 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_getAny":
  1986820.606 ±(99.9%) 2522.622 ops/s [Average]
  (min, avg, max) = (1979100.005, 1986820.606, 1994716.025), stdev = 3775.742
  CI (99.9%): [1984297.984, 1989343.228] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_getAny  thrpt   30  1986820.606 ± 2522.622  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 349293.596 ops/s
# Warmup Iteration   2: 522366.818 ops/s
# Warmup Iteration   3: 620115.959 ops/s
# Warmup Iteration   4: 618468.885 ops/s
# Warmup Iteration   5: 622962.324 ops/s
# Warmup Iteration   6: 622185.504 ops/s
# Warmup Iteration   7: 522271.748 ops/s
# Warmup Iteration   8: 622657.209 ops/s
# Warmup Iteration   9: 623400.556 ops/s
# Warmup Iteration  10: 623415.560 ops/s
# Warmup Iteration  11: 622686.198 ops/s
# Warmup Iteration  12: 623254.975 ops/s
# Warmup Iteration  13: 622585.862 ops/s
# Warmup Iteration  14: 622760.175 ops/s
# Warmup Iteration  15: 622715.060 ops/s
# Warmup Iteration  16: 622784.605 ops/s
# Warmup Iteration  17: 622229.169 ops/s
# Warmup Iteration  18: 622830.938 ops/s
# Warmup Iteration  19: 622296.890 ops/s
# Warmup Iteration  20: 623523.964 ops/s
# Warmup Iteration  21: 623852.893 ops/s
# Warmup Iteration  22: 623368.493 ops/s
# Warmup Iteration  23: 623666.900 ops/s
# Warmup Iteration  24: 622897.261 ops/s
# Warmup Iteration  25: 622774.062 ops/s
# Warmup Iteration  26: 624403.271 ops/s
# Warmup Iteration  27: 624020.882 ops/s
# Warmup Iteration  28: 623811.956 ops/s
# Warmup Iteration  29: 623613.980 ops/s
# Warmup Iteration  30: 623683.427 ops/s
Iteration   1: 623668.010 ops/s
Iteration   2: 621872.346 ops/s
Iteration   3: 623995.993 ops/s
Iteration   4: 623909.783 ops/s
Iteration   5: 624361.458 ops/s
Iteration   6: 624389.935 ops/s
Iteration   7: 624148.404 ops/s
Iteration   8: 622795.253 ops/s
Iteration   9: 622950.866 ops/s
Iteration  10: 621393.518 ops/s
Iteration  11: 623995.418 ops/s
Iteration  12: 624339.601 ops/s
Iteration  13: 624943.594 ops/s
Iteration  14: 622985.014 ops/s
Iteration  15: 624028.371 ops/s
Iteration  16: 624686.630 ops/s
Iteration  17: 624730.177 ops/s
Iteration  18: 622623.696 ops/s
Iteration  19: 624205.127 ops/s
Iteration  20: 623316.991 ops/s
Iteration  21: 623329.023 ops/s
Iteration  22: 624710.294 ops/s
Iteration  23: 622291.126 ops/s
Iteration  24: 624332.920 ops/s
Iteration  25: 621973.394 ops/s
Iteration  26: 624471.524 ops/s
Iteration  27: 622693.203 ops/s
Iteration  28: 624635.763 ops/s
Iteration  29: 625039.351 ops/s
Iteration  30: 621717.687 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_getFirst":
  623617.816 ±(99.9%) 702.636 ops/s [Average]
  (min, avg, max) = (621393.518, 623617.816, 625039.351), stdev = 1051.672
  CI (99.9%): [622915.180, 624320.452] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_getFirst  thrpt   30  623617.816 ± 702.636  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 383330.821 ops/s
# Warmup Iteration   2: 537972.890 ops/s
# Warmup Iteration   3: 659660.819 ops/s
# Warmup Iteration   4: 656816.049 ops/s
# Warmup Iteration   5: 659882.202 ops/s
# Warmup Iteration   6: 660636.352 ops/s
# Warmup Iteration   7: 660481.179 ops/s
# Warmup Iteration   8: 553715.624 ops/s
# Warmup Iteration   9: 660957.979 ops/s
# Warmup Iteration  10: 661466.704 ops/s
# Warmup Iteration  11: 660943.753 ops/s
# Warmup Iteration  12: 659662.018 ops/s
# Warmup Iteration  13: 660044.936 ops/s
# Warmup Iteration  14: 660029.145 ops/s
# Warmup Iteration  15: 660255.083 ops/s
# Warmup Iteration  16: 660592.406 ops/s
# Warmup Iteration  17: 652256.401 ops/s
# Warmup Iteration  18: 652121.986 ops/s
# Warmup Iteration  19: 652884.628 ops/s
# Warmup Iteration  20: 653300.770 ops/s
# Warmup Iteration  21: 653037.502 ops/s
# Warmup Iteration  22: 652549.789 ops/s
# Warmup Iteration  23: 653308.116 ops/s
# Warmup Iteration  24: 653571.894 ops/s
# Warmup Iteration  25: 652310.489 ops/s
# Warmup Iteration  26: 652151.590 ops/s
# Warmup Iteration  27: 653220.961 ops/s
# Warmup Iteration  28: 652450.366 ops/s
# Warmup Iteration  29: 653053.735 ops/s
# Warmup Iteration  30: 653157.758 ops/s
Iteration   1: 652093.320 ops/s
Iteration   2: 653261.102 ops/s
Iteration   3: 652211.713 ops/s
Iteration   4: 652357.302 ops/s
Iteration   5: 652521.221 ops/s
Iteration   6: 654148.014 ops/s
Iteration   7: 652412.448 ops/s
Iteration   8: 653183.991 ops/s
Iteration   9: 650292.065 ops/s
Iteration  10: 653960.966 ops/s
Iteration  11: 653172.368 ops/s
Iteration  12: 651497.493 ops/s
Iteration  13: 652953.986 ops/s
Iteration  14: 652456.080 ops/s
Iteration  15: 652463.087 ops/s
Iteration  16: 652631.516 ops/s
Iteration  17: 653345.485 ops/s
Iteration  18: 652970.868 ops/s
Iteration  19: 651640.154 ops/s
Iteration  20: 651714.269 ops/s
Iteration  21: 653679.815 ops/s
Iteration  22: 651521.110 ops/s
Iteration  23: 652785.451 ops/s
Iteration  24: 651314.679 ops/s
Iteration  25: 653945.630 ops/s
Iteration  26: 653381.092 ops/s
Iteration  27: 652688.029 ops/s
Iteration  28: 653332.118 ops/s
Iteration  29: 651067.398 ops/s
Iteration  30: 651815.514 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_getLast":
  652560.609 ±(99.9%) 618.685 ops/s [Average]
  (min, avg, max) = (650292.065, 652560.609, 654148.014), stdev = 926.018
  CI (99.9%): [651941.925, 653179.294] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_getLast  thrpt   30  652560.609 ± 618.685  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1437022.748 ops/s
# Warmup Iteration   2: 2019677.651 ops/s
# Warmup Iteration   3: 2467451.617 ops/s
# Warmup Iteration   4: 2462594.580 ops/s
# Warmup Iteration   5: 2475698.383 ops/s
# Warmup Iteration   6: 2479346.278 ops/s
# Warmup Iteration   7: 2475647.170 ops/s
# Warmup Iteration   8: 2054435.276 ops/s
# Warmup Iteration   9: 2476154.191 ops/s
# Warmup Iteration  10: 2477411.629 ops/s
# Warmup Iteration  11: 2472203.046 ops/s
# Warmup Iteration  12: 2480760.807 ops/s
# Warmup Iteration  13: 2479559.483 ops/s
# Warmup Iteration  14: 2479673.586 ops/s
# Warmup Iteration  15: 2473446.491 ops/s
# Warmup Iteration  16: 2480578.766 ops/s
# Warmup Iteration  17: 2481942.023 ops/s
# Warmup Iteration  18: 2475995.889 ops/s
# Warmup Iteration  19: 2473608.552 ops/s
# Warmup Iteration  20: 2473823.159 ops/s
# Warmup Iteration  21: 2475100.289 ops/s
# Warmup Iteration  22: 2481475.480 ops/s
# Warmup Iteration  23: 2478065.075 ops/s
# Warmup Iteration  24: 2478236.668 ops/s
# Warmup Iteration  25: 2477150.277 ops/s
# Warmup Iteration  26: 2483165.574 ops/s
# Warmup Iteration  27: 2478152.270 ops/s
# Warmup Iteration  28: 2474655.979 ops/s
# Warmup Iteration  29: 2475374.179 ops/s
# Warmup Iteration  30: 2475696.144 ops/s
Iteration   1: 2475482.486 ops/s
Iteration   2: 2470878.310 ops/s
Iteration   3: 2473180.490 ops/s
Iteration   4: 2477651.622 ops/s
Iteration   5: 2462986.902 ops/s
Iteration   6: 2470255.845 ops/s
Iteration   7: 2482382.194 ops/s
Iteration   8: 2474752.746 ops/s
Iteration   9: 2480402.308 ops/s
Iteration  10: 2466502.478 ops/s
Iteration  11: 2485826.122 ops/s
Iteration  12: 2478926.801 ops/s
Iteration  13: 2473954.868 ops/s
Iteration  14: 2483352.579 ops/s
Iteration  15: 2475690.284 ops/s
Iteration  16: 2476757.746 ops/s
Iteration  17: 2480434.352 ops/s
Iteration  18: 2476718.038 ops/s
Iteration  19: 2477621.878 ops/s
Iteration  20: 2475676.520 ops/s
Iteration  21: 2480509.649 ops/s
Iteration  22: 2479221.141 ops/s
Iteration  23: 2469832.959 ops/s
Iteration  24: 2478780.717 ops/s
Iteration  25: 2472919.857 ops/s
Iteration  26: 2469585.208 ops/s
Iteration  27: 2481256.261 ops/s
Iteration  28: 2470634.362 ops/s
Iteration  29: 2480505.325 ops/s
Iteration  30: 2476187.617 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_getOnly":
  2475962.256 ±(99.9%) 3469.739 ops/s [Average]
  (min, avg, max) = (2462986.902, 2475962.256, 2485826.122), stdev = 5193.343
  CI (99.9%): [2472492.516, 2479431.995] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_getOnly  thrpt   30  2475962.256 ± 3469.739  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_getOnly_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_getOnly_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 662540.340 ops/s
# Warmup Iteration   2: 697453.247 ops/s
# Warmup Iteration   3: 910816.022 ops/s
# Warmup Iteration   4: 927317.136 ops/s
# Warmup Iteration   5: 927438.431 ops/s
# Warmup Iteration   6: 920752.289 ops/s
# Warmup Iteration   7: 926812.509 ops/s
# Warmup Iteration   8: 927995.922 ops/s
# Warmup Iteration   9: 926532.133 ops/s
# Warmup Iteration  10: 926152.379 ops/s
# Warmup Iteration  11: 926498.622 ops/s
# Warmup Iteration  12: 774969.182 ops/s
# Warmup Iteration  13: 927031.841 ops/s
# Warmup Iteration  14: 928496.530 ops/s
# Warmup Iteration  15: 928980.814 ops/s
# Warmup Iteration  16: 926610.433 ops/s
# Warmup Iteration  17: 977778.195 ops/s
# Warmup Iteration  18: 974651.540 ops/s
# Warmup Iteration  19: 978894.385 ops/s
# Warmup Iteration  20: 974312.745 ops/s
# Warmup Iteration  21: 978555.669 ops/s
# Warmup Iteration  22: 976879.859 ops/s
# Warmup Iteration  23: 979984.803 ops/s
# Warmup Iteration  24: 977685.788 ops/s
# Warmup Iteration  25: 975679.800 ops/s
# Warmup Iteration  26: 974462.669 ops/s
# Warmup Iteration  27: 975406.446 ops/s
# Warmup Iteration  28: 977555.157 ops/s
# Warmup Iteration  29: 978567.326 ops/s
# Warmup Iteration  30: 976871.124 ops/s
Iteration   1: 978320.187 ops/s
Iteration   2: 977725.293 ops/s
Iteration   3: 972715.623 ops/s
Iteration   4: 974564.252 ops/s
Iteration   5: 978602.908 ops/s
Iteration   6: 982286.909 ops/s
Iteration   7: 977728.043 ops/s
Iteration   8: 975972.488 ops/s
Iteration   9: 973371.861 ops/s
Iteration  10: 975290.724 ops/s
Iteration  11: 976235.142 ops/s
Iteration  12: 979226.728 ops/s
Iteration  13: 977440.888 ops/s
Iteration  14: 976734.651 ops/s
Iteration  15: 977612.545 ops/s
Iteration  16: 975578.442 ops/s
Iteration  17: 975439.288 ops/s
Iteration  18: 979998.054 ops/s
Iteration  19: 974229.002 ops/s
Iteration  20: 977236.012 ops/s
Iteration  21: 981399.641 ops/s
Iteration  22: 977123.295 ops/s
Iteration  23: 975591.281 ops/s
Iteration  24: 979852.171 ops/s
Iteration  25: 975304.517 ops/s
Iteration  26: 978981.656 ops/s
Iteration  27: 974797.397 ops/s
Iteration  28: 978161.846 ops/s
Iteration  29: 977354.619 ops/s
Iteration  30: 979876.513 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_getOnly_empty_throws":
  977158.399 ±(99.9%) 1530.856 ops/s [Average]
  (min, avg, max) = (972715.623, 977158.399, 982286.909), stdev = 2291.314
  CI (99.9%): [975627.543, 978689.256] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_getOnly_empty_throws  thrpt   30  977158.399 ± 1530.856  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_getOnly_not_only_one_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_getOnly_not_only_one_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 617891.456 ops/s
# Warmup Iteration   2: 682633.219 ops/s
# Warmup Iteration   3: 908015.131 ops/s
# Warmup Iteration   4: 908014.979 ops/s
# Warmup Iteration   5: 902814.517 ops/s
# Warmup Iteration   6: 907537.541 ops/s
# Warmup Iteration   7: 907524.061 ops/s
# Warmup Iteration   8: 907414.514 ops/s
# Warmup Iteration   9: 906739.679 ops/s
# Warmup Iteration  10: 891206.837 ops/s
# Warmup Iteration  11: 774538.925 ops/s
# Warmup Iteration  12: 905273.397 ops/s
# Warmup Iteration  13: 905484.070 ops/s
# Warmup Iteration  14: 909530.989 ops/s
# Warmup Iteration  15: 907791.383 ops/s
# Warmup Iteration  16: 909845.964 ops/s
# Warmup Iteration  17: 960565.578 ops/s
# Warmup Iteration  18: 957513.704 ops/s
# Warmup Iteration  19: 955893.485 ops/s
# Warmup Iteration  20: 958635.623 ops/s
# Warmup Iteration  21: 959501.670 ops/s
# Warmup Iteration  22: 957324.880 ops/s
# Warmup Iteration  23: 957391.448 ops/s
# Warmup Iteration  24: 958218.679 ops/s
# Warmup Iteration  25: 958293.321 ops/s
# Warmup Iteration  26: 960442.905 ops/s
# Warmup Iteration  27: 954965.768 ops/s
# Warmup Iteration  28: 959400.375 ops/s
# Warmup Iteration  29: 959476.282 ops/s
# Warmup Iteration  30: 959087.764 ops/s
Iteration   1: 958915.481 ops/s
Iteration   2: 957216.835 ops/s
Iteration   3: 958820.991 ops/s
Iteration   4: 959509.794 ops/s
Iteration   5: 961132.222 ops/s
Iteration   6: 957085.304 ops/s
Iteration   7: 958775.494 ops/s
Iteration   8: 959142.588 ops/s
Iteration   9: 956231.493 ops/s
Iteration  10: 959016.873 ops/s
Iteration  11: 958992.135 ops/s
Iteration  12: 958692.845 ops/s
Iteration  13: 956925.738 ops/s
Iteration  14: 961378.548 ops/s
Iteration  15: 959264.317 ops/s
Iteration  16: 960634.064 ops/s
Iteration  17: 955107.259 ops/s
Iteration  18: 959183.663 ops/s
Iteration  19: 958783.069 ops/s
Iteration  20: 955437.994 ops/s
Iteration  21: 961119.743 ops/s
Iteration  22: 961169.009 ops/s
Iteration  23: 951322.325 ops/s
Iteration  24: 956312.167 ops/s
Iteration  25: 958004.160 ops/s
Iteration  26: 960235.792 ops/s
Iteration  27: 952232.968 ops/s
Iteration  28: 957515.103 ops/s
Iteration  29: 954266.487 ops/s
Iteration  30: 956164.386 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_getOnly_not_only_one_throws":
  957952.961 ±(99.9%) 1681.017 ops/s [Average]
  (min, avg, max) = (951322.325, 957952.961, 961378.548), stdev = 2516.067
  CI (99.9%): [956271.945, 959633.978] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_getOnly_not_only_one_throws  thrpt   30  957952.961 ± 1681.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 53676.265 ops/s
# Warmup Iteration   2: 72303.240 ops/s
# Warmup Iteration   3: 94837.887 ops/s
# Warmup Iteration   4: 94972.535 ops/s
# Warmup Iteration   5: 94979.290 ops/s
# Warmup Iteration   6: 94979.796 ops/s
# Warmup Iteration   7: 95160.565 ops/s
# Warmup Iteration   8: 94989.477 ops/s
# Warmup Iteration   9: 82081.874 ops/s
# Warmup Iteration  10: 93072.099 ops/s
# Warmup Iteration  11: 95132.053 ops/s
# Warmup Iteration  12: 95090.868 ops/s
# Warmup Iteration  13: 94966.607 ops/s
# Warmup Iteration  14: 95123.071 ops/s
# Warmup Iteration  15: 95253.626 ops/s
# Warmup Iteration  16: 95114.127 ops/s
# Warmup Iteration  17: 95221.593 ops/s
# Warmup Iteration  18: 95109.827 ops/s
# Warmup Iteration  19: 95024.623 ops/s
# Warmup Iteration  20: 95064.271 ops/s
# Warmup Iteration  21: 95058.556 ops/s
# Warmup Iteration  22: 94947.870 ops/s
# Warmup Iteration  23: 95091.621 ops/s
# Warmup Iteration  24: 95062.996 ops/s
# Warmup Iteration  25: 94978.833 ops/s
# Warmup Iteration  26: 95125.639 ops/s
# Warmup Iteration  27: 95245.222 ops/s
# Warmup Iteration  28: 95062.788 ops/s
# Warmup Iteration  29: 95104.820 ops/s
# Warmup Iteration  30: 95042.452 ops/s
Iteration   1: 94864.173 ops/s
Iteration   2: 95280.242 ops/s
Iteration   3: 95549.358 ops/s
Iteration   4: 95065.146 ops/s
Iteration   5: 95295.815 ops/s
Iteration   6: 95339.759 ops/s
Iteration   7: 94969.581 ops/s
Iteration   8: 95333.575 ops/s
Iteration   9: 95115.639 ops/s
Iteration  10: 95099.648 ops/s
Iteration  11: 95121.335 ops/s
Iteration  12: 95233.720 ops/s
Iteration  13: 94856.090 ops/s
Iteration  14: 95230.796 ops/s
Iteration  15: 95329.311 ops/s
Iteration  16: 94902.878 ops/s
Iteration  17: 95155.625 ops/s
Iteration  18: 95172.011 ops/s
Iteration  19: 94938.484 ops/s
Iteration  20: 95337.485 ops/s
Iteration  21: 95139.176 ops/s
Iteration  22: 94626.772 ops/s
Iteration  23: 95128.449 ops/s
Iteration  24: 95305.635 ops/s
Iteration  25: 95266.526 ops/s
Iteration  26: 95367.791 ops/s
Iteration  27: 95159.275 ops/s
Iteration  28: 95021.352 ops/s
Iteration  29: 95208.049 ops/s
Iteration  30: 95240.445 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_groupBy":
  95155.138 ±(99.9%) 127.367 ops/s [Average]
  (min, avg, max) = (94626.772, 95155.138, 95549.358), stdev = 190.637
  CI (99.9%): [95027.771, 95282.505] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt      Score     Error  Units
TreeBagTest._Benchmark.benchmark_groupBy  thrpt   30  95155.138 ± 127.367  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9114.981 ops/s
# Warmup Iteration   2: 11300.656 ops/s
# Warmup Iteration   3: 14757.900 ops/s
# Warmup Iteration   4: 15171.906 ops/s
# Warmup Iteration   5: 15114.677 ops/s
# Warmup Iteration   6: 15237.075 ops/s
# Warmup Iteration   7: 15200.556 ops/s
# Warmup Iteration   8: 15193.154 ops/s
# Warmup Iteration   9: 15221.157 ops/s
# Warmup Iteration  10: 15210.073 ops/s
# Warmup Iteration  11: 14163.677 ops/s
# Warmup Iteration  12: 13840.386 ops/s
# Warmup Iteration  13: 15251.589 ops/s
# Warmup Iteration  14: 15234.271 ops/s
# Warmup Iteration  15: 15237.203 ops/s
# Warmup Iteration  16: 15209.770 ops/s
# Warmup Iteration  17: 15197.883 ops/s
# Warmup Iteration  18: 15197.274 ops/s
# Warmup Iteration  19: 15214.363 ops/s
# Warmup Iteration  20: 15193.991 ops/s
# Warmup Iteration  21: 15220.929 ops/s
# Warmup Iteration  22: 15186.187 ops/s
# Warmup Iteration  23: 15212.556 ops/s
# Warmup Iteration  24: 15199.305 ops/s
# Warmup Iteration  25: 15175.896 ops/s
# Warmup Iteration  26: 15195.604 ops/s
# Warmup Iteration  27: 15209.035 ops/s
# Warmup Iteration  28: 15222.533 ops/s
# Warmup Iteration  29: 15197.862 ops/s
# Warmup Iteration  30: 15238.681 ops/s
Iteration   1: 15233.511 ops/s
Iteration   2: 15157.346 ops/s
Iteration   3: 15223.793 ops/s
Iteration   4: 15214.272 ops/s
Iteration   5: 15216.822 ops/s
Iteration   6: 15183.271 ops/s
Iteration   7: 15210.868 ops/s
Iteration   8: 15215.411 ops/s
Iteration   9: 15173.878 ops/s
Iteration  10: 15138.239 ops/s
Iteration  11: 15240.724 ops/s
Iteration  12: 15188.758 ops/s
Iteration  13: 15181.223 ops/s
Iteration  14: 15187.868 ops/s
Iteration  15: 15216.961 ops/s
Iteration  16: 15200.421 ops/s
Iteration  17: 15136.019 ops/s
Iteration  18: 15218.651 ops/s
Iteration  19: 15203.939 ops/s
Iteration  20: 15201.759 ops/s
Iteration  21: 15199.030 ops/s
Iteration  22: 15186.623 ops/s
Iteration  23: 15193.460 ops/s
Iteration  24: 15203.943 ops/s
Iteration  25: 15160.072 ops/s
Iteration  26: 15197.992 ops/s
Iteration  27: 15207.690 ops/s
Iteration  28: 15215.530 ops/s
Iteration  29: 15196.190 ops/s
Iteration  30: 15223.409 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_groupByEach":
  15197.589 ±(99.9%) 16.959 ops/s [Average]
  (min, avg, max) = (15136.019, 15197.589, 15240.724), stdev = 25.383
  CI (99.9%): [15180.630, 15214.548] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt      Score    Error  Units
TreeBagTest._Benchmark.benchmark_groupByEach  thrpt   30  15197.589 ± 16.959  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1546999.003 ops/s
# Warmup Iteration   2: 3050750.545 ops/s
# Warmup Iteration   3: 3329532.897 ops/s
# Warmup Iteration   4: 3324426.468 ops/s
# Warmup Iteration   5: 2768339.946 ops/s
# Warmup Iteration   6: 3355190.991 ops/s
# Warmup Iteration   7: 3358703.608 ops/s
# Warmup Iteration   8: 3352462.550 ops/s
# Warmup Iteration   9: 3354722.229 ops/s
# Warmup Iteration  10: 3351407.761 ops/s
# Warmup Iteration  11: 3360333.131 ops/s
# Warmup Iteration  12: 3356204.466 ops/s
# Warmup Iteration  13: 3347141.472 ops/s
# Warmup Iteration  14: 3356177.752 ops/s
# Warmup Iteration  15: 3363776.320 ops/s
# Warmup Iteration  16: 3345683.008 ops/s
# Warmup Iteration  17: 3352825.680 ops/s
# Warmup Iteration  18: 3355351.607 ops/s
# Warmup Iteration  19: 3352459.453 ops/s
# Warmup Iteration  20: 3355845.508 ops/s
# Warmup Iteration  21: 3354972.987 ops/s
# Warmup Iteration  22: 3353305.126 ops/s
# Warmup Iteration  23: 3354011.896 ops/s
# Warmup Iteration  24: 3349883.223 ops/s
# Warmup Iteration  25: 3352137.020 ops/s
# Warmup Iteration  26: 3352932.271 ops/s
# Warmup Iteration  27: 3354733.824 ops/s
# Warmup Iteration  28: 3360320.625 ops/s
# Warmup Iteration  29: 3356961.859 ops/s
# Warmup Iteration  30: 3350318.255 ops/s
Iteration   1: 3362098.181 ops/s
Iteration   2: 3348000.110 ops/s
Iteration   3: 3337072.647 ops/s
Iteration   4: 3366819.593 ops/s
Iteration   5: 3350174.523 ops/s
Iteration   6: 3349052.060 ops/s
Iteration   7: 3346001.417 ops/s
Iteration   8: 3348041.274 ops/s
Iteration   9: 3335031.631 ops/s
Iteration  10: 3353749.892 ops/s
Iteration  11: 3346637.440 ops/s
Iteration  12: 3347798.502 ops/s
Iteration  13: 3357994.723 ops/s
Iteration  14: 3356209.131 ops/s
Iteration  15: 3357491.322 ops/s
Iteration  16: 3353799.881 ops/s
Iteration  17: 3351144.740 ops/s
Iteration  18: 3351105.219 ops/s
Iteration  19: 3362247.795 ops/s
Iteration  20: 3339973.929 ops/s
Iteration  21: 3351787.237 ops/s
Iteration  22: 3358259.127 ops/s
Iteration  23: 3354597.171 ops/s
Iteration  24: 3351391.432 ops/s
Iteration  25: 3358111.137 ops/s
Iteration  26: 3348859.005 ops/s
Iteration  27: 3353606.419 ops/s
Iteration  28: 3341026.023 ops/s
Iteration  29: 3346685.179 ops/s
Iteration  30: 3364637.703 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_groupByUniqueKey":
  3351646.815 ±(99.9%) 5116.089 ops/s [Average]
  (min, avg, max) = (3335031.631, 3351646.815, 3366819.593), stdev = 7657.522
  CI (99.9%): [3346530.726, 3356762.904] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  3351646.815 ± 5116.089  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1208355.144 ops/s
# Warmup Iteration   2: 2235809.496 ops/s
# Warmup Iteration   3: 2456558.605 ops/s
# Warmup Iteration   4: 2470804.072 ops/s
# Warmup Iteration   5: 2217471.717 ops/s
# Warmup Iteration   6: 2301947.342 ops/s
# Warmup Iteration   7: 2473494.019 ops/s
# Warmup Iteration   8: 2478161.951 ops/s
# Warmup Iteration   9: 2475945.007 ops/s
# Warmup Iteration  10: 2470290.215 ops/s
# Warmup Iteration  11: 2470653.097 ops/s
# Warmup Iteration  12: 2474184.108 ops/s
# Warmup Iteration  13: 2474830.181 ops/s
# Warmup Iteration  14: 2469237.628 ops/s
# Warmup Iteration  15: 2476377.152 ops/s
# Warmup Iteration  16: 2470329.266 ops/s
# Warmup Iteration  17: 2469308.083 ops/s
# Warmup Iteration  18: 2470438.720 ops/s
# Warmup Iteration  19: 2471851.203 ops/s
# Warmup Iteration  20: 2473873.146 ops/s
# Warmup Iteration  21: 2467727.567 ops/s
# Warmup Iteration  22: 2475059.244 ops/s
# Warmup Iteration  23: 2469716.513 ops/s
# Warmup Iteration  24: 2472587.626 ops/s
# Warmup Iteration  25: 2475738.499 ops/s
# Warmup Iteration  26: 2469048.130 ops/s
# Warmup Iteration  27: 2475795.629 ops/s
# Warmup Iteration  28: 2474061.461 ops/s
# Warmup Iteration  29: 2470697.724 ops/s
# Warmup Iteration  30: 2474287.133 ops/s
Iteration   1: 2479635.801 ops/s
Iteration   2: 2471471.560 ops/s
Iteration   3: 2477319.962 ops/s
Iteration   4: 2466676.551 ops/s
Iteration   5: 2470880.858 ops/s
Iteration   6: 2481313.574 ops/s
Iteration   7: 2472362.474 ops/s
Iteration   8: 2468512.837 ops/s
Iteration   9: 2474479.196 ops/s
Iteration  10: 2478246.734 ops/s
Iteration  11: 2466196.427 ops/s
Iteration  12: 2467494.450 ops/s
Iteration  13: 2470600.848 ops/s
Iteration  14: 2475193.618 ops/s
Iteration  15: 2467923.279 ops/s
Iteration  16: 2481670.005 ops/s
Iteration  17: 2471220.367 ops/s
Iteration  18: 2472387.020 ops/s
Iteration  19: 2479655.027 ops/s
Iteration  20: 2469944.359 ops/s
Iteration  21: 2475876.280 ops/s
Iteration  22: 2478951.375 ops/s
Iteration  23: 2476595.879 ops/s
Iteration  24: 2478209.912 ops/s
Iteration  25: 2472554.196 ops/s
Iteration  26: 2474480.456 ops/s
Iteration  27: 2476755.623 ops/s
Iteration  28: 2476837.427 ops/s
Iteration  29: 2468714.421 ops/s
Iteration  30: 2476377.010 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_groupByUniqueKey_target":
  2473951.251 ±(99.9%) 3018.059 ops/s [Average]
  (min, avg, max) = (2466196.427, 2473951.251, 2481670.005), stdev = 4517.288
  CI (99.9%): [2470933.192, 2476969.309] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  2473951.251 ± 3018.059  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 352337.586 ops/s
# Warmup Iteration   2: 398000.585 ops/s
# Warmup Iteration   3: 543316.080 ops/s
# Warmup Iteration   4: 540048.052 ops/s
# Warmup Iteration   5: 538299.082 ops/s
# Warmup Iteration   6: 541404.629 ops/s
# Warmup Iteration   7: 539979.598 ops/s
# Warmup Iteration   8: 541222.372 ops/s
# Warmup Iteration   9: 541168.460 ops/s
# Warmup Iteration  10: 542267.592 ops/s
# Warmup Iteration  11: 450018.096 ops/s
# Warmup Iteration  12: 541367.328 ops/s
# Warmup Iteration  13: 540963.588 ops/s
# Warmup Iteration  14: 541407.159 ops/s
# Warmup Iteration  15: 541772.762 ops/s
# Warmup Iteration  16: 542142.487 ops/s
# Warmup Iteration  17: 559507.556 ops/s
# Warmup Iteration  18: 559274.250 ops/s
# Warmup Iteration  19: 558397.498 ops/s
# Warmup Iteration  20: 559631.449 ops/s
# Warmup Iteration  21: 559901.103 ops/s
# Warmup Iteration  22: 559775.592 ops/s
# Warmup Iteration  23: 560888.660 ops/s
# Warmup Iteration  24: 559482.462 ops/s
# Warmup Iteration  25: 560708.321 ops/s
# Warmup Iteration  26: 559770.805 ops/s
# Warmup Iteration  27: 558946.274 ops/s
# Warmup Iteration  28: 558904.555 ops/s
# Warmup Iteration  29: 556583.220 ops/s
# Warmup Iteration  30: 560144.690 ops/s
Iteration   1: 560807.448 ops/s
Iteration   2: 560785.619 ops/s
Iteration   3: 560046.467 ops/s
Iteration   4: 558529.231 ops/s
Iteration   5: 559986.659 ops/s
Iteration   6: 559889.046 ops/s
Iteration   7: 557950.992 ops/s
Iteration   8: 559756.855 ops/s
Iteration   9: 559459.330 ops/s
Iteration  10: 560037.529 ops/s
Iteration  11: 560193.983 ops/s
Iteration  12: 558721.787 ops/s
Iteration  13: 561776.016 ops/s
Iteration  14: 558606.830 ops/s
Iteration  15: 560282.177 ops/s
Iteration  16: 559924.542 ops/s
Iteration  17: 556343.989 ops/s
Iteration  18: 559086.715 ops/s
Iteration  19: 559197.540 ops/s
Iteration  20: 555446.939 ops/s
Iteration  21: 558387.995 ops/s
Iteration  22: 560350.055 ops/s
Iteration  23: 557038.496 ops/s
Iteration  24: 559401.434 ops/s
Iteration  25: 558654.712 ops/s
Iteration  26: 558548.828 ops/s
Iteration  27: 556438.317 ops/s
Iteration  28: 560063.669 ops/s
Iteration  29: 560051.764 ops/s
Iteration  30: 559692.976 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate":
  559181.931 ±(99.9%) 952.158 ops/s [Average]
  (min, avg, max) = (555446.939, 559181.931, 561776.016), stdev = 1425.145
  CI (99.9%): [558229.774, 560134.089] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate  thrpt   30  559181.931 ± 952.158  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 378434.366 ops/s
# Warmup Iteration   2: 419001.271 ops/s
# Warmup Iteration   3: 559175.777 ops/s
# Warmup Iteration   4: 563213.311 ops/s
# Warmup Iteration   5: 557165.619 ops/s
# Warmup Iteration   6: 561832.408 ops/s
# Warmup Iteration   7: 561546.141 ops/s
# Warmup Iteration   8: 562468.021 ops/s
# Warmup Iteration   9: 563272.774 ops/s
# Warmup Iteration  10: 562916.263 ops/s
# Warmup Iteration  11: 537916.128 ops/s
# Warmup Iteration  12: 496326.417 ops/s
# Warmup Iteration  13: 562312.392 ops/s
# Warmup Iteration  14: 563073.551 ops/s
# Warmup Iteration  15: 563574.486 ops/s
# Warmup Iteration  16: 562370.336 ops/s
# Warmup Iteration  17: 583046.889 ops/s
# Warmup Iteration  18: 582459.824 ops/s
# Warmup Iteration  19: 582597.408 ops/s
# Warmup Iteration  20: 582055.160 ops/s
# Warmup Iteration  21: 581631.717 ops/s
# Warmup Iteration  22: 579966.302 ops/s
# Warmup Iteration  23: 580129.680 ops/s
# Warmup Iteration  24: 581441.147 ops/s
# Warmup Iteration  25: 581074.752 ops/s
# Warmup Iteration  26: 581224.853 ops/s
# Warmup Iteration  27: 581479.798 ops/s
# Warmup Iteration  28: 581901.142 ops/s
# Warmup Iteration  29: 582647.241 ops/s
# Warmup Iteration  30: 582809.029 ops/s
Iteration   1: 582296.112 ops/s
Iteration   2: 580846.007 ops/s
Iteration   3: 581289.654 ops/s
Iteration   4: 581836.764 ops/s
Iteration   5: 580471.209 ops/s
Iteration   6: 580152.652 ops/s
Iteration   7: 582021.826 ops/s
Iteration   8: 582259.552 ops/s
Iteration   9: 579608.554 ops/s
Iteration  10: 582248.076 ops/s
Iteration  11: 580212.600 ops/s
Iteration  12: 580228.242 ops/s
Iteration  13: 581805.409 ops/s
Iteration  14: 582107.760 ops/s
Iteration  15: 580707.490 ops/s
Iteration  16: 582728.709 ops/s
Iteration  17: 582113.811 ops/s
Iteration  18: 583981.538 ops/s
Iteration  19: 582575.978 ops/s
Iteration  20: 584407.020 ops/s
Iteration  21: 579982.714 ops/s
Iteration  22: 583235.730 ops/s
Iteration  23: 583012.957 ops/s
Iteration  24: 580891.602 ops/s
Iteration  25: 580398.199 ops/s
Iteration  26: 584936.863 ops/s
Iteration  27: 581859.313 ops/s
Iteration  28: 579408.654 ops/s
Iteration  29: 583320.620 ops/s
Iteration  30: 581576.433 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate":
  581750.735 ±(99.9%) 945.141 ops/s [Average]
  (min, avg, max) = (579408.654, 581750.735, 584936.863), stdev = 1414.643
  CI (99.9%): [580805.594, 582695.876] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate  thrpt   30  581750.735 ± 945.141  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 620172.245 ops/s
# Warmup Iteration   2: 743134.020 ops/s
# Warmup Iteration   3: 962248.344 ops/s
# Warmup Iteration   4: 962824.501 ops/s
# Warmup Iteration   5: 959394.509 ops/s
# Warmup Iteration   6: 964316.484 ops/s
# Warmup Iteration   7: 963836.659 ops/s
# Warmup Iteration   8: 963455.269 ops/s
# Warmup Iteration   9: 928277.736 ops/s
# Warmup Iteration  10: 842984.694 ops/s
# Warmup Iteration  11: 965061.782 ops/s
# Warmup Iteration  12: 964967.180 ops/s
# Warmup Iteration  13: 963309.978 ops/s
# Warmup Iteration  14: 966522.165 ops/s
# Warmup Iteration  15: 965553.634 ops/s
# Warmup Iteration  16: 964035.324 ops/s
# Warmup Iteration  17: 963700.645 ops/s
# Warmup Iteration  18: 963967.558 ops/s
# Warmup Iteration  19: 965458.510 ops/s
# Warmup Iteration  20: 964198.558 ops/s
# Warmup Iteration  21: 965807.561 ops/s
# Warmup Iteration  22: 966629.909 ops/s
# Warmup Iteration  23: 965267.395 ops/s
# Warmup Iteration  24: 965521.950 ops/s
# Warmup Iteration  25: 967045.699 ops/s
# Warmup Iteration  26: 962929.988 ops/s
# Warmup Iteration  27: 963064.005 ops/s
# Warmup Iteration  28: 964758.797 ops/s
# Warmup Iteration  29: 963340.825 ops/s
# Warmup Iteration  30: 965152.238 ops/s
Iteration   1: 956869.017 ops/s
Iteration   2: 966189.056 ops/s
Iteration   3: 966913.045 ops/s
Iteration   4: 963546.988 ops/s
Iteration   5: 966724.289 ops/s
Iteration   6: 967340.713 ops/s
Iteration   7: 962016.102 ops/s
Iteration   8: 966084.870 ops/s
Iteration   9: 965955.302 ops/s
Iteration  10: 964633.100 ops/s
Iteration  11: 965515.344 ops/s
Iteration  12: 965188.499 ops/s
Iteration  13: 964462.919 ops/s
Iteration  14: 967082.459 ops/s
Iteration  15: 966104.323 ops/s
Iteration  16: 966744.827 ops/s
Iteration  17: 963746.683 ops/s
Iteration  18: 966700.905 ops/s
Iteration  19: 964297.773 ops/s
Iteration  20: 964381.430 ops/s
Iteration  21: 965357.960 ops/s
Iteration  22: 964767.233 ops/s
Iteration  23: 962939.519 ops/s
Iteration  24: 963989.284 ops/s
Iteration  25: 965386.108 ops/s
Iteration  26: 962943.457 ops/s
Iteration  27: 963913.750 ops/s
Iteration  28: 965861.109 ops/s
Iteration  29: 966307.270 ops/s
Iteration  30: 965655.154 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_indexOf":
  964920.616 ±(99.9%) 1365.317 ops/s [Average]
  (min, avg, max) = (956869.017, 964920.616, 967340.713), stdev = 2043.542
  CI (99.9%): [963555.299, 966285.933] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_indexOf  thrpt   30  964920.616 ± 1365.317  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 825936.733 ops/s
# Warmup Iteration   2: 1404121.486 ops/s
# Warmup Iteration   3: 1581619.966 ops/s
# Warmup Iteration   4: 1586573.624 ops/s
# Warmup Iteration   5: 1586286.484 ops/s
# Warmup Iteration   6: 1322433.825 ops/s
# Warmup Iteration   7: 1589287.362 ops/s
# Warmup Iteration   8: 1586677.325 ops/s
# Warmup Iteration   9: 1588750.352 ops/s
# Warmup Iteration  10: 1585303.093 ops/s
# Warmup Iteration  11: 1586772.664 ops/s
# Warmup Iteration  12: 1587276.320 ops/s
# Warmup Iteration  13: 1584456.084 ops/s
# Warmup Iteration  14: 1585921.736 ops/s
# Warmup Iteration  15: 1586419.429 ops/s
# Warmup Iteration  16: 1587090.388 ops/s
# Warmup Iteration  17: 1582966.390 ops/s
# Warmup Iteration  18: 1583699.286 ops/s
# Warmup Iteration  19: 1588114.004 ops/s
# Warmup Iteration  20: 1587522.981 ops/s
# Warmup Iteration  21: 1583790.029 ops/s
# Warmup Iteration  22: 1584834.064 ops/s
# Warmup Iteration  23: 1584999.576 ops/s
# Warmup Iteration  24: 1584257.545 ops/s
# Warmup Iteration  25: 1586593.421 ops/s
# Warmup Iteration  26: 1587631.101 ops/s
# Warmup Iteration  27: 1586072.015 ops/s
# Warmup Iteration  28: 1585098.636 ops/s
# Warmup Iteration  29: 1586398.127 ops/s
# Warmup Iteration  30: 1586373.938 ops/s
Iteration   1: 1578390.891 ops/s
Iteration   2: 1588576.506 ops/s
Iteration   3: 1584809.737 ops/s
Iteration   4: 1590297.552 ops/s
Iteration   5: 1590980.118 ops/s
Iteration   6: 1587839.678 ops/s
Iteration   7: 1587548.434 ops/s
Iteration   8: 1581299.314 ops/s
Iteration   9: 1588081.098 ops/s
Iteration  10: 1587286.182 ops/s
Iteration  11: 1587822.322 ops/s
Iteration  12: 1587559.867 ops/s
Iteration  13: 1586429.690 ops/s
Iteration  14: 1581259.159 ops/s
Iteration  15: 1587467.736 ops/s
Iteration  16: 1590844.730 ops/s
Iteration  17: 1586942.606 ops/s
Iteration  18: 1584077.729 ops/s
Iteration  19: 1587283.633 ops/s
Iteration  20: 1579209.711 ops/s
Iteration  21: 1587554.811 ops/s
Iteration  22: 1587185.579 ops/s
Iteration  23: 1582619.262 ops/s
Iteration  24: 1584533.417 ops/s
Iteration  25: 1589804.669 ops/s
Iteration  26: 1587247.441 ops/s
Iteration  27: 1589515.313 ops/s
Iteration  28: 1580952.736 ops/s
Iteration  29: 1581054.975 ops/s
Iteration  30: 1586400.875 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_injectInto":
  1586029.192 ±(99.9%) 2305.491 ops/s [Average]
  (min, avg, max) = (1578390.891, 1586029.192, 1590980.118), stdev = 3450.751
  CI (99.9%): [1583723.701, 1588334.683] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_injectInto  thrpt   30  1586029.192 ± 2305.491  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 851721.131 ops/s
# Warmup Iteration   2: 1592243.941 ops/s
# Warmup Iteration   3: 1735814.318 ops/s
# Warmup Iteration   4: 1750117.007 ops/s
# Warmup Iteration   5: 1522259.103 ops/s
# Warmup Iteration   6: 1687588.906 ops/s
# Warmup Iteration   7: 1749817.064 ops/s
# Warmup Iteration   8: 1747434.558 ops/s
# Warmup Iteration   9: 1748432.181 ops/s
# Warmup Iteration  10: 1751238.053 ops/s
# Warmup Iteration  11: 1752703.329 ops/s
# Warmup Iteration  12: 1752311.703 ops/s
# Warmup Iteration  13: 1749247.387 ops/s
# Warmup Iteration  14: 1743793.524 ops/s
# Warmup Iteration  15: 1744857.358 ops/s
# Warmup Iteration  16: 1751121.550 ops/s
# Warmup Iteration  17: 1751826.932 ops/s
# Warmup Iteration  18: 1747741.525 ops/s
# Warmup Iteration  19: 1751032.413 ops/s
# Warmup Iteration  20: 1749362.245 ops/s
# Warmup Iteration  21: 1751433.907 ops/s
# Warmup Iteration  22: 1749545.790 ops/s
# Warmup Iteration  23: 1749687.596 ops/s
# Warmup Iteration  24: 1748381.110 ops/s
# Warmup Iteration  25: 1751702.962 ops/s
# Warmup Iteration  26: 1752925.153 ops/s
# Warmup Iteration  27: 1756982.706 ops/s
# Warmup Iteration  28: 1749589.128 ops/s
# Warmup Iteration  29: 1749497.085 ops/s
# Warmup Iteration  30: 1746594.311 ops/s
Iteration   1: 1749364.343 ops/s
Iteration   2: 1753446.196 ops/s
Iteration   3: 1750603.230 ops/s
Iteration   4: 1750114.947 ops/s
Iteration   5: 1749477.705 ops/s
Iteration   6: 1753059.420 ops/s
Iteration   7: 1751556.712 ops/s
Iteration   8: 1747701.708 ops/s
Iteration   9: 1740511.409 ops/s
Iteration  10: 1745690.370 ops/s
Iteration  11: 1748661.334 ops/s
Iteration  12: 1750023.807 ops/s
Iteration  13: 1750482.908 ops/s
Iteration  14: 1743571.645 ops/s
Iteration  15: 1749108.406 ops/s
Iteration  16: 1753978.617 ops/s
Iteration  17: 1739526.438 ops/s
Iteration  18: 1748558.691 ops/s
Iteration  19: 1748942.088 ops/s
Iteration  20: 1751813.338 ops/s
Iteration  21: 1747952.179 ops/s
Iteration  22: 1739175.218 ops/s
Iteration  23: 1744575.671 ops/s
Iteration  24: 1748304.345 ops/s
Iteration  25: 1745023.433 ops/s
Iteration  26: 1745594.794 ops/s
Iteration  27: 1748526.634 ops/s
Iteration  28: 1744910.410 ops/s
Iteration  29: 1750166.832 ops/s
Iteration  30: 1744477.562 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_injectIntoDouble":
  1747830.013 ±(99.9%) 2572.469 ops/s [Average]
  (min, avg, max) = (1739175.218, 1747830.013, 1753978.617), stdev = 3850.351
  CI (99.9%): [1745257.544, 1750402.482] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  1747830.013 ± 2572.469  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 907257.961 ops/s
# Warmup Iteration   2: 1633390.370 ops/s
# Warmup Iteration   3: 1809199.913 ops/s
# Warmup Iteration   4: 1806226.241 ops/s
# Warmup Iteration   5: 1788994.199 ops/s
# Warmup Iteration   6: 1518933.410 ops/s
# Warmup Iteration   7: 1788536.211 ops/s
# Warmup Iteration   8: 1793839.584 ops/s
# Warmup Iteration   9: 1789879.040 ops/s
# Warmup Iteration  10: 1797407.206 ops/s
# Warmup Iteration  11: 1796653.532 ops/s
# Warmup Iteration  12: 1796976.182 ops/s
# Warmup Iteration  13: 1786200.024 ops/s
# Warmup Iteration  14: 1792228.844 ops/s
# Warmup Iteration  15: 1796823.623 ops/s
# Warmup Iteration  16: 1796541.845 ops/s
# Warmup Iteration  17: 1780919.227 ops/s
# Warmup Iteration  18: 1786130.683 ops/s
# Warmup Iteration  19: 1782950.637 ops/s
# Warmup Iteration  20: 1784140.100 ops/s
# Warmup Iteration  21: 1783273.610 ops/s
# Warmup Iteration  22: 1781210.246 ops/s
# Warmup Iteration  23: 1782482.354 ops/s
# Warmup Iteration  24: 1782758.073 ops/s
# Warmup Iteration  25: 1781575.493 ops/s
# Warmup Iteration  26: 1781491.378 ops/s
# Warmup Iteration  27: 1786393.101 ops/s
# Warmup Iteration  28: 1779461.357 ops/s
# Warmup Iteration  29: 1781910.212 ops/s
# Warmup Iteration  30: 1785549.657 ops/s
Iteration   1: 1779777.200 ops/s
Iteration   2: 1777733.070 ops/s
Iteration   3: 1788040.755 ops/s
Iteration   4: 1787084.040 ops/s
Iteration   5: 1785381.023 ops/s
Iteration   6: 1780587.322 ops/s
Iteration   7: 1782068.498 ops/s
Iteration   8: 1787492.881 ops/s
Iteration   9: 1784205.712 ops/s
Iteration  10: 1785687.200 ops/s
Iteration  11: 1786666.417 ops/s
Iteration  12: 1779549.970 ops/s
Iteration  13: 1785323.913 ops/s
Iteration  14: 1784846.463 ops/s
Iteration  15: 1790200.904 ops/s
Iteration  16: 1787394.257 ops/s
Iteration  17: 1781530.421 ops/s
Iteration  18: 1785947.370 ops/s
Iteration  19: 1783131.693 ops/s
Iteration  20: 1785701.326 ops/s
Iteration  21: 1788333.882 ops/s
Iteration  22: 1791167.633 ops/s
Iteration  23: 1789614.235 ops/s
Iteration  24: 1785966.960 ops/s
Iteration  25: 1780881.270 ops/s
Iteration  26: 1786180.807 ops/s
Iteration  27: 1785093.726 ops/s
Iteration  28: 1780220.284 ops/s
Iteration  29: 1784076.702 ops/s
Iteration  30: 1786743.137 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_injectIntoFloat":
  1784887.636 ±(99.9%) 2245.609 ops/s [Average]
  (min, avg, max) = (1777733.070, 1784887.636, 1791167.633), stdev = 3361.122
  CI (99.9%): [1782642.026, 1787133.245] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  1784887.636 ± 2245.609  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 821598.026 ops/s
# Warmup Iteration   2: 1445364.467 ops/s
# Warmup Iteration   3: 1610319.594 ops/s
# Warmup Iteration   4: 1616950.880 ops/s
# Warmup Iteration   5: 1619525.109 ops/s
# Warmup Iteration   6: 1356755.651 ops/s
# Warmup Iteration   7: 1621298.756 ops/s
# Warmup Iteration   8: 1620120.978 ops/s
# Warmup Iteration   9: 1616940.412 ops/s
# Warmup Iteration  10: 1613609.893 ops/s
# Warmup Iteration  11: 1619758.079 ops/s
# Warmup Iteration  12: 1617571.633 ops/s
# Warmup Iteration  13: 1618264.204 ops/s
# Warmup Iteration  14: 1616307.469 ops/s
# Warmup Iteration  15: 1617432.472 ops/s
# Warmup Iteration  16: 1620287.932 ops/s
# Warmup Iteration  17: 1620860.319 ops/s
# Warmup Iteration  18: 1617427.116 ops/s
# Warmup Iteration  19: 1619427.848 ops/s
# Warmup Iteration  20: 1624924.885 ops/s
# Warmup Iteration  21: 1619145.238 ops/s
# Warmup Iteration  22: 1620834.090 ops/s
# Warmup Iteration  23: 1618101.362 ops/s
# Warmup Iteration  24: 1622476.042 ops/s
# Warmup Iteration  25: 1619067.604 ops/s
# Warmup Iteration  26: 1619475.957 ops/s
# Warmup Iteration  27: 1620144.351 ops/s
# Warmup Iteration  28: 1619236.610 ops/s
# Warmup Iteration  29: 1620593.810 ops/s
# Warmup Iteration  30: 1617998.661 ops/s
Iteration   1: 1617142.002 ops/s
Iteration   2: 1620218.788 ops/s
Iteration   3: 1616258.914 ops/s
Iteration   4: 1619229.010 ops/s
Iteration   5: 1621144.423 ops/s
Iteration   6: 1616526.441 ops/s
Iteration   7: 1626732.408 ops/s
Iteration   8: 1616767.357 ops/s
Iteration   9: 1621784.703 ops/s
Iteration  10: 1618759.639 ops/s
Iteration  11: 1620728.425 ops/s
Iteration  12: 1614381.943 ops/s
Iteration  13: 1615457.034 ops/s
Iteration  14: 1626258.070 ops/s
Iteration  15: 1622135.167 ops/s
Iteration  16: 1620722.927 ops/s
Iteration  17: 1616032.036 ops/s
Iteration  18: 1623036.625 ops/s
Iteration  19: 1618195.943 ops/s
Iteration  20: 1617808.172 ops/s
Iteration  21: 1623272.001 ops/s
Iteration  22: 1618740.872 ops/s
Iteration  23: 1621329.815 ops/s
Iteration  24: 1614879.342 ops/s
Iteration  25: 1620265.587 ops/s
Iteration  26: 1623574.642 ops/s
Iteration  27: 1620267.325 ops/s
Iteration  28: 1623505.438 ops/s
Iteration  29: 1619026.211 ops/s
Iteration  30: 1624610.979 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_injectIntoInt":
  1619959.741 ±(99.9%) 2199.606 ops/s [Average]
  (min, avg, max) = (1614381.943, 1619959.741, 1626732.408), stdev = 3292.267
  CI (99.9%): [1617760.136, 1622159.347] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_injectIntoInt  thrpt   30  1619959.741 ± 2199.606  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 919426.141 ops/s
# Warmup Iteration   2: 1657557.020 ops/s
# Warmup Iteration   3: 1829427.089 ops/s
# Warmup Iteration   4: 1830701.913 ops/s
# Warmup Iteration   5: 1770155.265 ops/s
# Warmup Iteration   6: 1599024.688 ops/s
# Warmup Iteration   7: 1833359.122 ops/s
# Warmup Iteration   8: 1838414.429 ops/s
# Warmup Iteration   9: 1836554.011 ops/s
# Warmup Iteration  10: 1840287.783 ops/s
# Warmup Iteration  11: 1836521.110 ops/s
# Warmup Iteration  12: 1835379.514 ops/s
# Warmup Iteration  13: 1837316.649 ops/s
# Warmup Iteration  14: 1838226.761 ops/s
# Warmup Iteration  15: 1839521.176 ops/s
# Warmup Iteration  16: 1837644.640 ops/s
# Warmup Iteration  17: 1835780.735 ops/s
# Warmup Iteration  18: 1840625.206 ops/s
# Warmup Iteration  19: 1839480.753 ops/s
# Warmup Iteration  20: 1837259.657 ops/s
# Warmup Iteration  21: 1834795.952 ops/s
# Warmup Iteration  22: 1829944.782 ops/s
# Warmup Iteration  23: 1838771.559 ops/s
# Warmup Iteration  24: 1835141.297 ops/s
# Warmup Iteration  25: 1839604.308 ops/s
# Warmup Iteration  26: 1838322.030 ops/s
# Warmup Iteration  27: 1837174.656 ops/s
# Warmup Iteration  28: 1835603.933 ops/s
# Warmup Iteration  29: 1833251.490 ops/s
# Warmup Iteration  30: 1836733.574 ops/s
Iteration   1: 1834205.947 ops/s
Iteration   2: 1836674.622 ops/s
Iteration   3: 1834878.245 ops/s
Iteration   4: 1837808.361 ops/s
Iteration   5: 1836233.997 ops/s
Iteration   6: 1838129.108 ops/s
Iteration   7: 1829617.465 ops/s
Iteration   8: 1841331.617 ops/s
Iteration   9: 1826707.638 ops/s
Iteration  10: 1841523.015 ops/s
Iteration  11: 1841016.539 ops/s
Iteration  12: 1836550.916 ops/s
Iteration  13: 1838275.178 ops/s
Iteration  14: 1835140.644 ops/s
Iteration  15: 1842391.307 ops/s
Iteration  16: 1835776.881 ops/s
Iteration  17: 1832901.793 ops/s
Iteration  18: 1840273.419 ops/s
Iteration  19: 1831017.783 ops/s
Iteration  20: 1835468.264 ops/s
Iteration  21: 1831490.701 ops/s
Iteration  22: 1832819.000 ops/s
Iteration  23: 1837901.634 ops/s
Iteration  24: 1832527.067 ops/s
Iteration  25: 1841342.240 ops/s
Iteration  26: 1839130.775 ops/s
Iteration  27: 1837541.245 ops/s
Iteration  28: 1841745.854 ops/s
Iteration  29: 1838784.846 ops/s
Iteration  30: 1840329.678 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_injectIntoLong":
  1836651.193 ±(99.9%) 2654.233 ops/s [Average]
  (min, avg, max) = (1826707.638, 1836651.193, 1842391.307), stdev = 3972.731
  CI (99.9%): [1833996.960, 1839305.425] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_injectIntoLong  thrpt   30  1836651.193 ± 2654.233  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_injectIntoWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_injectIntoWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1048880.931 ops/s
# Warmup Iteration   2: 1781152.736 ops/s
# Warmup Iteration   3: 1984955.383 ops/s
# Warmup Iteration   4: 2016849.156 ops/s
# Warmup Iteration   5: 2018007.129 ops/s
# Warmup Iteration   6: 1686659.847 ops/s
# Warmup Iteration   7: 2018187.557 ops/s
# Warmup Iteration   8: 2016338.752 ops/s
# Warmup Iteration   9: 2015503.509 ops/s
# Warmup Iteration  10: 2018583.184 ops/s
# Warmup Iteration  11: 2019211.993 ops/s
# Warmup Iteration  12: 2015020.005 ops/s
# Warmup Iteration  13: 2018029.924 ops/s
# Warmup Iteration  14: 2016453.953 ops/s
# Warmup Iteration  15: 2012026.484 ops/s
# Warmup Iteration  16: 2016546.436 ops/s
# Warmup Iteration  17: 2014035.356 ops/s
# Warmup Iteration  18: 2014066.229 ops/s
# Warmup Iteration  19: 2011858.565 ops/s
# Warmup Iteration  20: 2018976.742 ops/s
# Warmup Iteration  21: 2014722.513 ops/s
# Warmup Iteration  22: 2012850.242 ops/s
# Warmup Iteration  23: 2017652.510 ops/s
# Warmup Iteration  24: 2015760.951 ops/s
# Warmup Iteration  25: 2017176.405 ops/s
# Warmup Iteration  26: 2012925.503 ops/s
# Warmup Iteration  27: 2024821.854 ops/s
# Warmup Iteration  28: 2015276.512 ops/s
# Warmup Iteration  29: 2016378.624 ops/s
# Warmup Iteration  30: 2017598.080 ops/s
Iteration   1: 2015743.842 ops/s
Iteration   2: 2023348.265 ops/s
Iteration   3: 2016823.293 ops/s
Iteration   4: 2018028.864 ops/s
Iteration   5: 2016292.259 ops/s
Iteration   6: 2018387.167 ops/s
Iteration   7: 2017663.468 ops/s
Iteration   8: 2004835.460 ops/s
Iteration   9: 2018654.914 ops/s
Iteration  10: 2015758.978 ops/s
Iteration  11: 2008115.071 ops/s
Iteration  12: 2017790.193 ops/s
Iteration  13: 2017440.635 ops/s
Iteration  14: 2013375.411 ops/s
Iteration  15: 2014438.139 ops/s
Iteration  16: 2005585.707 ops/s
Iteration  17: 2018069.501 ops/s
Iteration  18: 2016795.322 ops/s
Iteration  19: 2020834.218 ops/s
Iteration  20: 2020514.612 ops/s
Iteration  21: 2016782.836 ops/s
Iteration  22: 2018101.522 ops/s
Iteration  23: 2018253.531 ops/s
Iteration  24: 2016199.203 ops/s
Iteration  25: 2014513.751 ops/s
Iteration  26: 2017161.254 ops/s
Iteration  27: 2016853.166 ops/s
Iteration  28: 2022382.268 ops/s
Iteration  29: 2018175.502 ops/s
Iteration  30: 2018457.502 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_injectIntoWith":
  2016512.529 ±(99.9%) 2749.452 ops/s [Average]
  (min, avg, max) = (2004835.460, 2016512.529, 2023348.265), stdev = 4115.251
  CI (99.9%): [2013763.076, 2019261.981] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_injectIntoWith  thrpt   30  2016512.529 ± 2749.452  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1115545.540 ops/s
# Warmup Iteration   2: 2487238.794 ops/s
# Warmup Iteration   3: 2487059.763 ops/s
# Warmup Iteration   4: 2094839.169 ops/s
# Warmup Iteration   5: 2495293.436 ops/s
# Warmup Iteration   6: 2488143.789 ops/s
# Warmup Iteration   7: 2494044.987 ops/s
# Warmup Iteration   8: 2498837.839 ops/s
# Warmup Iteration   9: 2485609.047 ops/s
# Warmup Iteration  10: 2491659.501 ops/s
# Warmup Iteration  11: 2493589.049 ops/s
# Warmup Iteration  12: 2492648.767 ops/s
# Warmup Iteration  13: 2493342.148 ops/s
# Warmup Iteration  14: 2493229.720 ops/s
# Warmup Iteration  15: 2495921.315 ops/s
# Warmup Iteration  16: 2490598.617 ops/s
# Warmup Iteration  17: 2367400.057 ops/s
# Warmup Iteration  18: 2373263.732 ops/s
# Warmup Iteration  19: 2370125.494 ops/s
# Warmup Iteration  20: 2370964.504 ops/s
# Warmup Iteration  21: 2373576.347 ops/s
# Warmup Iteration  22: 2371299.415 ops/s
# Warmup Iteration  23: 2374100.226 ops/s
# Warmup Iteration  24: 2375436.348 ops/s
# Warmup Iteration  25: 2381515.910 ops/s
# Warmup Iteration  26: 2372118.997 ops/s
# Warmup Iteration  27: 2374423.877 ops/s
# Warmup Iteration  28: 2380899.598 ops/s
# Warmup Iteration  29: 2371110.795 ops/s
# Warmup Iteration  30: 2379539.415 ops/s
Iteration   1: 2374666.829 ops/s
Iteration   2: 2364624.058 ops/s
Iteration   3: 2380338.650 ops/s
Iteration   4: 2381650.219 ops/s
Iteration   5: 2382380.233 ops/s
Iteration   6: 2377561.309 ops/s
Iteration   7: 2373883.497 ops/s
Iteration   8: 2378429.681 ops/s
Iteration   9: 2380376.692 ops/s
Iteration  10: 2373649.499 ops/s
Iteration  11: 2371971.600 ops/s
Iteration  12: 2384154.428 ops/s
Iteration  13: 2372760.777 ops/s
Iteration  14: 2385499.037 ops/s
Iteration  15: 2380724.049 ops/s
Iteration  16: 2389902.895 ops/s
Iteration  17: 2376617.180 ops/s
Iteration  18: 2376118.764 ops/s
Iteration  19: 2379411.763 ops/s
Iteration  20: 2368302.506 ops/s
Iteration  21: 2380820.855 ops/s
Iteration  22: 2375291.716 ops/s
Iteration  23: 2373646.411 ops/s
Iteration  24: 2378160.219 ops/s
Iteration  25: 2378306.962 ops/s
Iteration  26: 2379177.601 ops/s
Iteration  27: 2389057.541 ops/s
Iteration  28: 2364562.290 ops/s
Iteration  29: 2375085.849 ops/s
Iteration  30: 2371728.189 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_isEmpty":
  2377295.377 ±(99.9%) 4020.026 ops/s [Average]
  (min, avg, max) = (2364562.290, 2377295.377, 2389902.895), stdev = 6016.985
  CI (99.9%): [2373275.351, 2381315.402] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_isEmpty  thrpt   30  2377295.377 ± 4020.026  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_iterableConstructor$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_iterableConstructor

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 580023.600 ops/s
# Warmup Iteration   2: 1115830.467 ops/s
# Warmup Iteration   3: 1232569.382 ops/s
# Warmup Iteration   4: 1242128.630 ops/s
# Warmup Iteration   5: 1120234.024 ops/s
# Warmup Iteration   6: 1159263.474 ops/s
# Warmup Iteration   7: 1238942.858 ops/s
# Warmup Iteration   8: 1241907.431 ops/s
# Warmup Iteration   9: 1243600.950 ops/s
# Warmup Iteration  10: 1234977.500 ops/s
# Warmup Iteration  11: 1239423.156 ops/s
# Warmup Iteration  12: 1241013.387 ops/s
# Warmup Iteration  13: 1241574.239 ops/s
# Warmup Iteration  14: 1238066.168 ops/s
# Warmup Iteration  15: 1238139.002 ops/s
# Warmup Iteration  16: 1240044.340 ops/s
# Warmup Iteration  17: 1240119.884 ops/s
# Warmup Iteration  18: 1235843.332 ops/s
# Warmup Iteration  19: 1239480.372 ops/s
# Warmup Iteration  20: 1239711.590 ops/s
# Warmup Iteration  21: 1241832.888 ops/s
# Warmup Iteration  22: 1240180.655 ops/s
# Warmup Iteration  23: 1239576.700 ops/s
# Warmup Iteration  24: 1241167.032 ops/s
# Warmup Iteration  25: 1240975.924 ops/s
# Warmup Iteration  26: 1240397.354 ops/s
# Warmup Iteration  27: 1239872.763 ops/s
# Warmup Iteration  28: 1240813.419 ops/s
# Warmup Iteration  29: 1239716.614 ops/s
# Warmup Iteration  30: 1240383.886 ops/s
Iteration   1: 1243259.652 ops/s
Iteration   2: 1238833.710 ops/s
Iteration   3: 1243911.734 ops/s
Iteration   4: 1233153.834 ops/s
Iteration   5: 1236990.076 ops/s
Iteration   6: 1235254.995 ops/s
Iteration   7: 1240265.879 ops/s
Iteration   8: 1239103.518 ops/s
Iteration   9: 1241120.144 ops/s
Iteration  10: 1238024.025 ops/s
Iteration  11: 1242233.333 ops/s
Iteration  12: 1240791.150 ops/s
Iteration  13: 1243083.153 ops/s
Iteration  14: 1241047.617 ops/s
Iteration  15: 1242307.616 ops/s
Iteration  16: 1242955.116 ops/s
Iteration  17: 1242624.525 ops/s
Iteration  18: 1238247.424 ops/s
Iteration  19: 1241715.290 ops/s
Iteration  20: 1238310.065 ops/s
Iteration  21: 1236806.449 ops/s
Iteration  22: 1242517.536 ops/s
Iteration  23: 1238521.808 ops/s
Iteration  24: 1242633.361 ops/s
Iteration  25: 1241061.364 ops/s
Iteration  26: 1240475.848 ops/s
Iteration  27: 1244628.661 ops/s
Iteration  28: 1242991.314 ops/s
Iteration  29: 1242484.179 ops/s
Iteration  30: 1241616.565 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_iterableConstructor":
  1240565.665 ±(99.9%) 1816.468 ops/s [Average]
  (min, avg, max) = (1233153.834, 1240565.665, 1244628.661), stdev = 2718.804
  CI (99.9%): [1238749.197, 1242382.133] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_iterableConstructor  thrpt   30  1240565.665 ± 1816.468  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27697.270 ops/s
# Warmup Iteration   2: 35716.523 ops/s
# Warmup Iteration   3: 41689.711 ops/s
# Warmup Iteration   4: 46545.394 ops/s
# Warmup Iteration   5: 46597.281 ops/s
# Warmup Iteration   6: 46326.248 ops/s
# Warmup Iteration   7: 46573.190 ops/s
# Warmup Iteration   8: 46324.759 ops/s
# Warmup Iteration   9: 46486.280 ops/s
# Warmup Iteration  10: 46542.928 ops/s
# Warmup Iteration  11: 46492.264 ops/s
# Warmup Iteration  12: 46374.982 ops/s
# Warmup Iteration  13: 42320.582 ops/s
# Warmup Iteration  14: 43179.399 ops/s
# Warmup Iteration  15: 46523.776 ops/s
# Warmup Iteration  16: 46512.825 ops/s
# Warmup Iteration  17: 48219.895 ops/s
# Warmup Iteration  18: 48098.416 ops/s
# Warmup Iteration  19: 48131.558 ops/s
# Warmup Iteration  20: 48173.405 ops/s
# Warmup Iteration  21: 48150.984 ops/s
# Warmup Iteration  22: 48189.712 ops/s
# Warmup Iteration  23: 48210.188 ops/s
# Warmup Iteration  24: 48191.041 ops/s
# Warmup Iteration  25: 48058.642 ops/s
# Warmup Iteration  26: 48174.617 ops/s
# Warmup Iteration  27: 48066.233 ops/s
# Warmup Iteration  28: 48292.888 ops/s
# Warmup Iteration  29: 48090.416 ops/s
# Warmup Iteration  30: 48043.803 ops/s
Iteration   1: 48165.907 ops/s
Iteration   2: 48063.947 ops/s
Iteration   3: 47892.459 ops/s
Iteration   4: 48049.466 ops/s
Iteration   5: 48141.066 ops/s
Iteration   6: 48153.495 ops/s
Iteration   7: 47955.925 ops/s
Iteration   8: 48149.385 ops/s
Iteration   9: 48023.004 ops/s
Iteration  10: 48137.399 ops/s
Iteration  11: 47879.057 ops/s
Iteration  12: 48141.460 ops/s
Iteration  13: 48167.036 ops/s
Iteration  14: 48173.519 ops/s
Iteration  15: 48166.192 ops/s
Iteration  16: 48093.032 ops/s
Iteration  17: 48203.027 ops/s
Iteration  18: 48147.383 ops/s
Iteration  19: 48108.829 ops/s
Iteration  20: 48047.649 ops/s
Iteration  21: 48250.489 ops/s
Iteration  22: 48228.552 ops/s
Iteration  23: 48077.658 ops/s
Iteration  24: 48261.453 ops/s
Iteration  25: 48053.858 ops/s
Iteration  26: 48125.606 ops/s
Iteration  27: 48159.537 ops/s
Iteration  28: 48082.384 ops/s
Iteration  29: 47940.687 ops/s
Iteration  30: 48200.088 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_iterator":
  48107.985 ±(99.9%) 64.794 ops/s [Average]
  (min, avg, max) = (47879.057, 48107.985, 48261.453), stdev = 96.980
  CI (99.9%): [48043.191, 48172.778] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt      Score    Error  Units
TreeBagTest._Benchmark.benchmark_iterator  thrpt   30  48107.985 ± 64.794  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1565058.291 ops/s
# Warmup Iteration   2: 2560258.459 ops/s
# Warmup Iteration   3: 2925736.217 ops/s
# Warmup Iteration   4: 2944367.887 ops/s
# Warmup Iteration   5: 2937901.447 ops/s
# Warmup Iteration   6: 2559765.137 ops/s
# Warmup Iteration   7: 2838550.466 ops/s
# Warmup Iteration   8: 2941088.319 ops/s
# Warmup Iteration   9: 2938140.185 ops/s
# Warmup Iteration  10: 2939943.691 ops/s
# Warmup Iteration  11: 2939398.323 ops/s
# Warmup Iteration  12: 2949288.287 ops/s
# Warmup Iteration  13: 2947293.459 ops/s
# Warmup Iteration  14: 2946230.686 ops/s
# Warmup Iteration  15: 2938613.325 ops/s
# Warmup Iteration  16: 2941015.187 ops/s
# Warmup Iteration  17: 2941373.689 ops/s
# Warmup Iteration  18: 2944944.105 ops/s
# Warmup Iteration  19: 2943138.643 ops/s
# Warmup Iteration  20: 2947220.576 ops/s
# Warmup Iteration  21: 2940590.281 ops/s
# Warmup Iteration  22: 2940916.779 ops/s
# Warmup Iteration  23: 2940699.878 ops/s
# Warmup Iteration  24: 2946965.205 ops/s
# Warmup Iteration  25: 2942084.095 ops/s
# Warmup Iteration  26: 2934272.575 ops/s
# Warmup Iteration  27: 2939523.928 ops/s
# Warmup Iteration  28: 2946556.951 ops/s
# Warmup Iteration  29: 2928489.656 ops/s
# Warmup Iteration  30: 2942863.695 ops/s
Iteration   1: 2947967.502 ops/s
Iteration   2: 2933756.054 ops/s
Iteration   3: 2940058.158 ops/s
Iteration   4: 2942424.121 ops/s
Iteration   5: 2937545.733 ops/s
Iteration   6: 2932293.572 ops/s
Iteration   7: 2935182.725 ops/s
Iteration   8: 2937840.115 ops/s
Iteration   9: 2930831.388 ops/s
Iteration  10: 2873182.308 ops/s
Iteration  11: 2928943.366 ops/s
Iteration  12: 2940794.417 ops/s
Iteration  13: 2938179.508 ops/s
Iteration  14: 2956283.814 ops/s
Iteration  15: 2938603.513 ops/s
Iteration  16: 2946026.926 ops/s
Iteration  17: 2937267.488 ops/s
Iteration  18: 2946837.576 ops/s
Iteration  19: 2941361.585 ops/s
Iteration  20: 2939787.125 ops/s
Iteration  21: 2946529.540 ops/s
Iteration  22: 2939420.942 ops/s
Iteration  23: 2937216.834 ops/s
Iteration  24: 2958859.364 ops/s
Iteration  25: 2940789.940 ops/s
Iteration  26: 2947109.494 ops/s
Iteration  27: 2939993.012 ops/s
Iteration  28: 2947432.289 ops/s
Iteration  29: 2938688.923 ops/s
Iteration  30: 2942910.080 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_iteratorRemove":
  2938803.914 ±(99.9%) 9379.969 ops/s [Average]
  (min, avg, max) = (2873182.308, 2938803.914, 2958859.364), stdev = 14039.497
  CI (99.9%): [2929423.945, 2948183.883] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_iteratorRemove  thrpt   30  2938803.914 ± 9379.969  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_iteratorRemove2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_iteratorRemove2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1580136.149 ops/s
# Warmup Iteration   2: 2604506.447 ops/s
# Warmup Iteration   3: 2973446.723 ops/s
# Warmup Iteration   4: 2989820.322 ops/s
# Warmup Iteration   5: 2989033.487 ops/s
# Warmup Iteration   6: 2491137.222 ops/s
# Warmup Iteration   7: 3000084.365 ops/s
# Warmup Iteration   8: 2994381.873 ops/s
# Warmup Iteration   9: 3002233.635 ops/s
# Warmup Iteration  10: 3004303.407 ops/s
# Warmup Iteration  11: 2998789.193 ops/s
# Warmup Iteration  12: 2994589.397 ops/s
# Warmup Iteration  13: 3000060.163 ops/s
# Warmup Iteration  14: 2997994.357 ops/s
# Warmup Iteration  15: 2996667.546 ops/s
# Warmup Iteration  16: 2990840.315 ops/s
# Warmup Iteration  17: 2997185.095 ops/s
# Warmup Iteration  18: 2997899.998 ops/s
# Warmup Iteration  19: 2993325.108 ops/s
# Warmup Iteration  20: 2997591.116 ops/s
# Warmup Iteration  21: 2997995.155 ops/s
# Warmup Iteration  22: 2995474.949 ops/s
# Warmup Iteration  23: 2999457.946 ops/s
# Warmup Iteration  24: 2998894.164 ops/s
# Warmup Iteration  25: 2993620.946 ops/s
# Warmup Iteration  26: 2994510.762 ops/s
# Warmup Iteration  27: 2996921.095 ops/s
# Warmup Iteration  28: 2994625.684 ops/s
# Warmup Iteration  29: 2999326.131 ops/s
# Warmup Iteration  30: 2996638.449 ops/s
Iteration   1: 2994258.876 ops/s
Iteration   2: 2990362.920 ops/s
Iteration   3: 3000180.001 ops/s
Iteration   4: 2983958.381 ops/s
Iteration   5: 2987912.950 ops/s
Iteration   6: 2994007.358 ops/s
Iteration   7: 2992994.884 ops/s
Iteration   8: 2988713.072 ops/s
Iteration   9: 2993406.217 ops/s
Iteration  10: 2990492.057 ops/s
Iteration  11: 3002234.982 ops/s
Iteration  12: 2994283.159 ops/s
Iteration  13: 2987792.795 ops/s
Iteration  14: 2946403.518 ops/s
Iteration  15: 3001700.620 ops/s
Iteration  16: 2995313.341 ops/s
Iteration  17: 3005532.002 ops/s
Iteration  18: 2998278.977 ops/s
Iteration  19: 3005604.139 ops/s
Iteration  20: 2999343.963 ops/s
Iteration  21: 3007790.771 ops/s
Iteration  22: 2999765.722 ops/s
Iteration  23: 3003976.582 ops/s
Iteration  24: 2993332.602 ops/s
Iteration  25: 2993588.668 ops/s
Iteration  26: 3003874.781 ops/s
Iteration  27: 2995337.849 ops/s
Iteration  28: 3002090.954 ops/s
Iteration  29: 3006761.209 ops/s
Iteration  30: 3000987.281 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_iteratorRemove2":
  2995342.688 ±(99.9%) 7469.014 ops/s [Average]
  (min, avg, max) = (2946403.518, 2995342.688, 3007790.771), stdev = 11179.269
  CI (99.9%): [2987873.674, 3002811.701] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_iteratorRemove2  thrpt   30  2995342.688 ± 7469.014  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 512168.011 ops/s
# Warmup Iteration   2: 545235.276 ops/s
# Warmup Iteration   3: 702243.816 ops/s
# Warmup Iteration   4: 723640.682 ops/s
# Warmup Iteration   5: 725553.059 ops/s
# Warmup Iteration   6: 721216.364 ops/s
# Warmup Iteration   7: 722932.953 ops/s
# Warmup Iteration   8: 724651.230 ops/s
# Warmup Iteration   9: 725879.507 ops/s
# Warmup Iteration  10: 724151.427 ops/s
# Warmup Iteration  11: 727380.264 ops/s
# Warmup Iteration  12: 655563.105 ops/s
# Warmup Iteration  13: 678797.088 ops/s
# Warmup Iteration  14: 724980.312 ops/s
# Warmup Iteration  15: 725499.036 ops/s
# Warmup Iteration  16: 726619.220 ops/s
# Warmup Iteration  17: 759318.152 ops/s
# Warmup Iteration  18: 758094.536 ops/s
# Warmup Iteration  19: 757109.026 ops/s
# Warmup Iteration  20: 760026.059 ops/s
# Warmup Iteration  21: 760260.499 ops/s
# Warmup Iteration  22: 757319.559 ops/s
# Warmup Iteration  23: 758912.936 ops/s
# Warmup Iteration  24: 761201.992 ops/s
# Warmup Iteration  25: 759032.314 ops/s
# Warmup Iteration  26: 760003.693 ops/s
# Warmup Iteration  27: 759376.139 ops/s
# Warmup Iteration  28: 764062.212 ops/s
# Warmup Iteration  29: 761243.541 ops/s
# Warmup Iteration  30: 759746.064 ops/s
Iteration   1: 763212.499 ops/s
Iteration   2: 759667.606 ops/s
Iteration   3: 761891.662 ops/s
Iteration   4: 762306.428 ops/s
Iteration   5: 758577.009 ops/s
Iteration   6: 756555.218 ops/s
Iteration   7: 757048.049 ops/s
Iteration   8: 761185.351 ops/s
Iteration   9: 760927.154 ops/s
Iteration  10: 762430.665 ops/s
Iteration  11: 759572.363 ops/s
Iteration  12: 762466.242 ops/s
Iteration  13: 761955.584 ops/s
Iteration  14: 754926.287 ops/s
Iteration  15: 760087.535 ops/s
Iteration  16: 760315.045 ops/s
Iteration  17: 762334.685 ops/s
Iteration  18: 761556.959 ops/s
Iteration  19: 761250.174 ops/s
Iteration  20: 759732.137 ops/s
Iteration  21: 756240.656 ops/s
Iteration  22: 756182.832 ops/s
Iteration  23: 761964.485 ops/s
Iteration  24: 755741.882 ops/s
Iteration  25: 761976.456 ops/s
Iteration  26: 761382.731 ops/s
Iteration  27: 763774.199 ops/s
Iteration  28: 759146.811 ops/s
Iteration  29: 760858.724 ops/s
Iteration  30: 762093.692 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_iterator_throws":
  760245.371 ±(99.9%) 1619.305 ops/s [Average]
  (min, avg, max) = (754926.287, 760245.371, 763774.199), stdev = 2423.699
  CI (99.9%): [758626.066, 761864.675] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_iterator_throws  thrpt   30  760245.371 ± 1619.305  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3.475 ops/s
# Warmup Iteration   2: 4.406 ops/s
# Warmup Iteration   3: 4.348 ops/s
# Warmup Iteration   4: 5.153 ops/s
# Warmup Iteration   5: 5.154 ops/s
# Warmup Iteration   6: 5.097 ops/s
# Warmup Iteration   7: 5.159 ops/s
# Warmup Iteration   8: 5.084 ops/s
# Warmup Iteration   9: 5.150 ops/s
# Warmup Iteration  10: 5.200 ops/s
# Warmup Iteration  11: 5.164 ops/s
# Warmup Iteration  12: 5.136 ops/s
# Warmup Iteration  13: 5.188 ops/s
# Warmup Iteration  14: 5.214 ops/s
# Warmup Iteration  15: 5.202 ops/s
# Warmup Iteration  16: 5.214 ops/s
# Warmup Iteration  17: 5.204 ops/s
# Warmup Iteration  18: 4.740 ops/s
# Warmup Iteration  19: 5.068 ops/s
# Warmup Iteration  20: 5.177 ops/s
# Warmup Iteration  21: 5.190 ops/s
# Warmup Iteration  22: 5.145 ops/s
# Warmup Iteration  23: 5.167 ops/s
# Warmup Iteration  24: 5.180 ops/s
# Warmup Iteration  25: 5.153 ops/s
# Warmup Iteration  26: 5.165 ops/s
# Warmup Iteration  27: 5.204 ops/s
# Warmup Iteration  28: 5.147 ops/s
# Warmup Iteration  29: 5.202 ops/s
# Warmup Iteration  30: 5.177 ops/s
Iteration   1: 5.207 ops/s
Iteration   2: 5.198 ops/s
Iteration   3: 5.192 ops/s
Iteration   4: 5.160 ops/s
Iteration   5: 5.176 ops/s
Iteration   6: 5.205 ops/s
Iteration   7: 5.114 ops/s
Iteration   8: 5.203 ops/s
Iteration   9: 5.216 ops/s
Iteration  10: 5.161 ops/s
Iteration  11: 5.174 ops/s
Iteration  12: 5.194 ops/s
Iteration  13: 5.149 ops/s
Iteration  14: 5.147 ops/s
Iteration  15: 5.213 ops/s
Iteration  16: 5.170 ops/s
Iteration  17: 5.225 ops/s
Iteration  18: 5.194 ops/s
Iteration  19: 5.095 ops/s
Iteration  20: 5.208 ops/s
Iteration  21: 5.186 ops/s
Iteration  22: 5.227 ops/s
Iteration  23: 5.178 ops/s
Iteration  24: 5.149 ops/s
Iteration  25: 5.200 ops/s
Iteration  26: 5.194 ops/s
Iteration  27: 5.160 ops/s
Iteration  28: 5.218 ops/s
Iteration  29: 5.174 ops/s
Iteration  30: 5.191 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap":
  5.183 ±(99.9%) 0.021 ops/s [Average]
  (min, avg, max) = (5.095, 5.183, 5.227), stdev = 0.031
  CI (99.9%): [5.162, 5.203] (assumes normal distribution)


# Run complete. Total time: 00:01:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt  Score   Error  Units
TreeBagTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap  thrpt   30  5.183 ± 0.021  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 601575.409 ops/s
# Warmup Iteration   2: 1297293.375 ops/s
# Warmup Iteration   3: 1333951.328 ops/s
# Warmup Iteration   4: 1342249.345 ops/s
# Warmup Iteration   5: 1141359.112 ops/s
# Warmup Iteration   6: 1347851.476 ops/s
# Warmup Iteration   7: 1346064.090 ops/s
# Warmup Iteration   8: 1350795.056 ops/s
# Warmup Iteration   9: 1348311.305 ops/s
# Warmup Iteration  10: 1346673.243 ops/s
# Warmup Iteration  11: 1350221.422 ops/s
# Warmup Iteration  12: 1353011.859 ops/s
# Warmup Iteration  13: 1350829.552 ops/s
# Warmup Iteration  14: 1349374.043 ops/s
# Warmup Iteration  15: 1345358.256 ops/s
# Warmup Iteration  16: 1339656.435 ops/s
# Warmup Iteration  17: 1345875.792 ops/s
# Warmup Iteration  18: 1353418.370 ops/s
# Warmup Iteration  19: 1349594.091 ops/s
# Warmup Iteration  20: 1349385.951 ops/s
# Warmup Iteration  21: 1348648.197 ops/s
# Warmup Iteration  22: 1345897.047 ops/s
# Warmup Iteration  23: 1347480.006 ops/s
# Warmup Iteration  24: 1344565.577 ops/s
# Warmup Iteration  25: 1347866.338 ops/s
# Warmup Iteration  26: 1343811.950 ops/s
# Warmup Iteration  27: 1348290.612 ops/s
# Warmup Iteration  28: 1341938.022 ops/s
# Warmup Iteration  29: 1345465.397 ops/s
# Warmup Iteration  30: 1345790.988 ops/s
Iteration   1: 1335474.137 ops/s
Iteration   2: 1345937.405 ops/s
Iteration   3: 1346688.254 ops/s
Iteration   4: 1343157.664 ops/s
Iteration   5: 1345093.555 ops/s
Iteration   6: 1350653.528 ops/s
Iteration   7: 1331281.965 ops/s
Iteration   8: 1342206.338 ops/s
Iteration   9: 1347833.799 ops/s
Iteration  10: 1346541.730 ops/s
Iteration  11: 1350022.893 ops/s
Iteration  12: 1350930.079 ops/s
Iteration  13: 1341601.494 ops/s
Iteration  14: 1345113.120 ops/s
Iteration  15: 1349919.646 ops/s
Iteration  16: 1346836.945 ops/s
Iteration  17: 1346107.916 ops/s
Iteration  18: 1348252.474 ops/s
Iteration  19: 1347339.523 ops/s
Iteration  20: 1348854.745 ops/s
Iteration  21: 1350651.050 ops/s
Iteration  22: 1341591.693 ops/s
Iteration  23: 1348536.426 ops/s
Iteration  24: 1344170.385 ops/s
Iteration  25: 1349014.041 ops/s
Iteration  26: 1347557.100 ops/s
Iteration  27: 1349567.440 ops/s
Iteration  28: 1342078.291 ops/s
Iteration  29: 1345707.508 ops/s
Iteration  30: 1346388.999 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_makeString":
  1345837.005 ±(99.9%) 2930.975 ops/s [Average]
  (min, avg, max) = (1331281.965, 1345837.005, 1350930.079), stdev = 4386.946
  CI (99.9%): [1342906.029, 1348767.980] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_makeString  thrpt   30  1345837.005 ± 2930.975  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_makeStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_makeStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 554904.878 ops/s
# Warmup Iteration   2: 1154460.570 ops/s
# Warmup Iteration   3: 1216395.823 ops/s
# Warmup Iteration   4: 1216894.625 ops/s
# Warmup Iteration   5: 1025159.023 ops/s
# Warmup Iteration   6: 1221238.038 ops/s
# Warmup Iteration   7: 1224397.735 ops/s
# Warmup Iteration   8: 1225295.289 ops/s
# Warmup Iteration   9: 1225005.455 ops/s
# Warmup Iteration  10: 1223915.728 ops/s
# Warmup Iteration  11: 1221650.518 ops/s
# Warmup Iteration  12: 1221135.630 ops/s
# Warmup Iteration  13: 1221329.712 ops/s
# Warmup Iteration  14: 1223006.140 ops/s
# Warmup Iteration  15: 1220494.103 ops/s
# Warmup Iteration  16: 1224000.405 ops/s
# Warmup Iteration  17: 1226266.147 ops/s
# Warmup Iteration  18: 1217265.610 ops/s
# Warmup Iteration  19: 1223062.083 ops/s
# Warmup Iteration  20: 1223785.156 ops/s
# Warmup Iteration  21: 1222837.171 ops/s
# Warmup Iteration  22: 1221702.761 ops/s
# Warmup Iteration  23: 1223712.541 ops/s
# Warmup Iteration  24: 1223115.627 ops/s
# Warmup Iteration  25: 1224815.926 ops/s
# Warmup Iteration  26: 1224014.411 ops/s
# Warmup Iteration  27: 1219973.862 ops/s
# Warmup Iteration  28: 1225848.728 ops/s
# Warmup Iteration  29: 1224538.270 ops/s
# Warmup Iteration  30: 1227488.636 ops/s
Iteration   1: 1223288.368 ops/s
Iteration   2: 1221939.193 ops/s
Iteration   3: 1220661.772 ops/s
Iteration   4: 1226001.176 ops/s
Iteration   5: 1222685.035 ops/s
Iteration   6: 1226003.024 ops/s
Iteration   7: 1225486.872 ops/s
Iteration   8: 1223934.227 ops/s
Iteration   9: 1219485.642 ops/s
Iteration  10: 1221795.367 ops/s
Iteration  11: 1223989.082 ops/s
Iteration  12: 1227050.996 ops/s
Iteration  13: 1222964.315 ops/s
Iteration  14: 1223849.574 ops/s
Iteration  15: 1219108.660 ops/s
Iteration  16: 1220414.794 ops/s
Iteration  17: 1220657.310 ops/s
Iteration  18: 1218834.682 ops/s
Iteration  19: 1220065.415 ops/s
Iteration  20: 1220315.886 ops/s
Iteration  21: 1225658.499 ops/s
Iteration  22: 1226797.050 ops/s
Iteration  23: 1218604.256 ops/s
Iteration  24: 1220989.948 ops/s
Iteration  25: 1216736.528 ops/s
Iteration  26: 1218693.880 ops/s
Iteration  27: 1219662.937 ops/s
Iteration  28: 1225356.715 ops/s
Iteration  29: 1222947.644 ops/s
Iteration  30: 1220796.476 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_makeStringWithSeparator":
  1222159.177 ±(99.9%) 1870.108 ops/s [Average]
  (min, avg, max) = (1216736.528, 1222159.177, 1227050.996), stdev = 2799.089
  CI (99.9%): [1220289.070, 1224029.285] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_makeStringWithSeparator  thrpt   30  1222159.177 ± 1870.108  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 613211.389 ops/s
# Warmup Iteration   2: 1303826.323 ops/s
# Warmup Iteration   3: 1334992.066 ops/s
# Warmup Iteration   4: 1328120.764 ops/s
# Warmup Iteration   5: 1136676.729 ops/s
# Warmup Iteration   6: 1343551.505 ops/s
# Warmup Iteration   7: 1334675.182 ops/s
# Warmup Iteration   8: 1342298.685 ops/s
# Warmup Iteration   9: 1340029.981 ops/s
# Warmup Iteration  10: 1343592.428 ops/s
# Warmup Iteration  11: 1341567.526 ops/s
# Warmup Iteration  12: 1342353.127 ops/s
# Warmup Iteration  13: 1335245.015 ops/s
# Warmup Iteration  14: 1339774.353 ops/s
# Warmup Iteration  15: 1341740.537 ops/s
# Warmup Iteration  16: 1339896.925 ops/s
# Warmup Iteration  17: 1337548.721 ops/s
# Warmup Iteration  18: 1337316.231 ops/s
# Warmup Iteration  19: 1341274.560 ops/s
# Warmup Iteration  20: 1341147.453 ops/s
# Warmup Iteration  21: 1335132.367 ops/s
# Warmup Iteration  22: 1340126.561 ops/s
# Warmup Iteration  23: 1335948.087 ops/s
# Warmup Iteration  24: 1334940.095 ops/s
# Warmup Iteration  25: 1338651.285 ops/s
# Warmup Iteration  26: 1336187.771 ops/s
# Warmup Iteration  27: 1333844.578 ops/s
# Warmup Iteration  28: 1336226.080 ops/s
# Warmup Iteration  29: 1335835.985 ops/s
# Warmup Iteration  30: 1336948.154 ops/s
Iteration   1: 1342205.308 ops/s
Iteration   2: 1337576.076 ops/s
Iteration   3: 1341369.570 ops/s
Iteration   4: 1334872.477 ops/s
Iteration   5: 1339961.603 ops/s
Iteration   6: 1333301.121 ops/s
Iteration   7: 1336849.339 ops/s
Iteration   8: 1338582.613 ops/s
Iteration   9: 1340560.699 ops/s
Iteration  10: 1337700.885 ops/s
Iteration  11: 1336927.788 ops/s
Iteration  12: 1336928.113 ops/s
Iteration  13: 1338459.621 ops/s
Iteration  14: 1339981.976 ops/s
Iteration  15: 1339716.938 ops/s
Iteration  16: 1342328.307 ops/s
Iteration  17: 1342400.082 ops/s
Iteration  18: 1342266.613 ops/s
Iteration  19: 1330022.451 ops/s
Iteration  20: 1341633.472 ops/s
Iteration  21: 1341237.259 ops/s
Iteration  22: 1341683.402 ops/s
Iteration  23: 1338223.306 ops/s
Iteration  24: 1335917.784 ops/s
Iteration  25: 1339485.211 ops/s
Iteration  26: 1340792.405 ops/s
Iteration  27: 1339306.692 ops/s
Iteration  28: 1341868.395 ops/s
Iteration  29: 1344323.442 ops/s
Iteration  30: 1340797.081 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd":
  1339242.668 ±(99.9%) 2047.480 ops/s [Average]
  (min, avg, max) = (1330022.451, 1339242.668, 1344323.442), stdev = 3064.572
  CI (99.9%): [1337195.188, 1341290.148] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd  thrpt   30  1339242.668 ± 2047.480  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_makeString_with_collection_containing_self$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_makeString_with_collection_containing_self

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2121406.380 ops/s
# Warmup Iteration   2: 2931109.109 ops/s
# Warmup Iteration   3: 3517265.222 ops/s
# Warmup Iteration   4: 3485247.234 ops/s
# Warmup Iteration   5: 3516762.148 ops/s
# Warmup Iteration   6: 3530559.804 ops/s
# Warmup Iteration   7: 3488633.255 ops/s
# Warmup Iteration   8: 2981970.994 ops/s
# Warmup Iteration   9: 3513449.260 ops/s
# Warmup Iteration  10: 3516534.137 ops/s
# Warmup Iteration  11: 3514998.302 ops/s
# Warmup Iteration  12: 3517520.814 ops/s
# Warmup Iteration  13: 3504350.849 ops/s
# Warmup Iteration  14: 3509335.776 ops/s
# Warmup Iteration  15: 3510687.119 ops/s
# Warmup Iteration  16: 3508712.153 ops/s
# Warmup Iteration  17: 3506680.681 ops/s
# Warmup Iteration  18: 3513907.632 ops/s
# Warmup Iteration  19: 3514839.802 ops/s
# Warmup Iteration  20: 3517399.628 ops/s
# Warmup Iteration  21: 3518849.329 ops/s
# Warmup Iteration  22: 3508722.143 ops/s
# Warmup Iteration  23: 3510242.148 ops/s
# Warmup Iteration  24: 3517996.894 ops/s
# Warmup Iteration  25: 3511784.165 ops/s
# Warmup Iteration  26: 3511278.268 ops/s
# Warmup Iteration  27: 3512978.867 ops/s
# Warmup Iteration  28: 3510600.014 ops/s
# Warmup Iteration  29: 3511560.962 ops/s
# Warmup Iteration  30: 3510483.777 ops/s
Iteration   1: 3504843.785 ops/s
Iteration   2: 3510812.836 ops/s
Iteration   3: 3514422.260 ops/s
Iteration   4: 3488949.024 ops/s
Iteration   5: 3511564.146 ops/s
Iteration   6: 3514881.175 ops/s
Iteration   7: 3514870.797 ops/s
Iteration   8: 3500593.232 ops/s
Iteration   9: 3507529.689 ops/s
Iteration  10: 3496552.502 ops/s
Iteration  11: 3521290.816 ops/s
Iteration  12: 3506665.026 ops/s
Iteration  13: 3524497.209 ops/s
Iteration  14: 3518035.057 ops/s
Iteration  15: 3504925.323 ops/s
Iteration  16: 3501846.842 ops/s
Iteration  17: 3506645.486 ops/s
Iteration  18: 3512560.756 ops/s
Iteration  19: 3490726.779 ops/s
Iteration  20: 3511348.103 ops/s
Iteration  21: 3519950.588 ops/s
Iteration  22: 3507038.558 ops/s
Iteration  23: 3517299.942 ops/s
Iteration  24: 3507627.632 ops/s
Iteration  25: 3512841.090 ops/s
Iteration  26: 3514030.439 ops/s
Iteration  27: 3508401.170 ops/s
Iteration  28: 3522055.921 ops/s
Iteration  29: 3507100.890 ops/s
Iteration  30: 3507740.694 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_makeString_with_collection_containing_self":
  3509588.259 ±(99.9%) 5630.110 ops/s [Average]
  (min, avg, max) = (3488949.024, 3509588.259, 3524497.209), stdev = 8426.884
  CI (99.9%): [3503958.149, 3515218.369] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_makeString_with_collection_containing_self  thrpt   30  3509588.259 ± 5630.110  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 503994.999 ops/s
# Warmup Iteration   2: 688387.634 ops/s
# Warmup Iteration   3: 860867.692 ops/s
# Warmup Iteration   4: 856890.895 ops/s
# Warmup Iteration   5: 861579.404 ops/s
# Warmup Iteration   6: 858065.879 ops/s
# Warmup Iteration   7: 860405.264 ops/s
# Warmup Iteration   8: 721387.402 ops/s
# Warmup Iteration   9: 859423.945 ops/s
# Warmup Iteration  10: 861089.417 ops/s
# Warmup Iteration  11: 862783.466 ops/s
# Warmup Iteration  12: 862371.175 ops/s
# Warmup Iteration  13: 859581.614 ops/s
# Warmup Iteration  14: 854406.393 ops/s
# Warmup Iteration  15: 861225.799 ops/s
# Warmup Iteration  16: 860297.599 ops/s
# Warmup Iteration  17: 864437.936 ops/s
# Warmup Iteration  18: 863019.282 ops/s
# Warmup Iteration  19: 861709.708 ops/s
# Warmup Iteration  20: 862677.045 ops/s
# Warmup Iteration  21: 863775.130 ops/s
# Warmup Iteration  22: 861669.457 ops/s
# Warmup Iteration  23: 860990.775 ops/s
# Warmup Iteration  24: 861308.859 ops/s
# Warmup Iteration  25: 862916.603 ops/s
# Warmup Iteration  26: 863440.271 ops/s
# Warmup Iteration  27: 862916.118 ops/s
# Warmup Iteration  28: 861363.080 ops/s
# Warmup Iteration  29: 862889.205 ops/s
# Warmup Iteration  30: 860892.150 ops/s
Iteration   1: 865378.724 ops/s
Iteration   2: 862961.193 ops/s
Iteration   3: 861536.359 ops/s
Iteration   4: 861621.921 ops/s
Iteration   5: 865641.310 ops/s
Iteration   6: 860443.165 ops/s
Iteration   7: 861305.637 ops/s
Iteration   8: 861327.092 ops/s
Iteration   9: 865709.625 ops/s
Iteration  10: 860922.861 ops/s
Iteration  11: 862088.349 ops/s
Iteration  12: 862447.231 ops/s
Iteration  13: 863289.532 ops/s
Iteration  14: 863251.368 ops/s
Iteration  15: 860720.964 ops/s
Iteration  16: 861721.463 ops/s
Iteration  17: 859797.158 ops/s
Iteration  18: 864408.068 ops/s
Iteration  19: 861186.635 ops/s
Iteration  20: 861205.224 ops/s
Iteration  21: 863642.802 ops/s
Iteration  22: 862695.136 ops/s
Iteration  23: 862279.463 ops/s
Iteration  24: 863920.303 ops/s
Iteration  25: 863459.848 ops/s
Iteration  26: 863014.558 ops/s
Iteration  27: 864576.662 ops/s
Iteration  28: 862151.251 ops/s
Iteration  29: 864083.648 ops/s
Iteration  30: 862311.775 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_max":
  862636.644 ±(99.9%) 1040.828 ops/s [Average]
  (min, avg, max) = (859797.158, 862636.644, 865709.625), stdev = 1557.863
  CI (99.9%): [861595.816, 863677.472] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_max  thrpt   30  862636.644 ± 1040.828  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 729511.629 ops/s
# Warmup Iteration   2: 1205453.371 ops/s
# Warmup Iteration   3: 1392109.782 ops/s
# Warmup Iteration   4: 1398949.319 ops/s
# Warmup Iteration   5: 1399399.687 ops/s
# Warmup Iteration   6: 1245977.859 ops/s
# Warmup Iteration   7: 1326364.268 ops/s
# Warmup Iteration   8: 1399601.139 ops/s
# Warmup Iteration   9: 1402070.040 ops/s
# Warmup Iteration  10: 1401409.655 ops/s
# Warmup Iteration  11: 1400904.053 ops/s
# Warmup Iteration  12: 1398845.232 ops/s
# Warmup Iteration  13: 1401393.524 ops/s
# Warmup Iteration  14: 1402555.074 ops/s
# Warmup Iteration  15: 1404138.796 ops/s
# Warmup Iteration  16: 1401230.386 ops/s
# Warmup Iteration  17: 1404220.185 ops/s
# Warmup Iteration  18: 1403768.825 ops/s
# Warmup Iteration  19: 1398756.898 ops/s
# Warmup Iteration  20: 1404568.289 ops/s
# Warmup Iteration  21: 1401669.771 ops/s
# Warmup Iteration  22: 1398919.523 ops/s
# Warmup Iteration  23: 1404616.562 ops/s
# Warmup Iteration  24: 1402745.426 ops/s
# Warmup Iteration  25: 1401162.407 ops/s
# Warmup Iteration  26: 1400346.191 ops/s
# Warmup Iteration  27: 1399887.075 ops/s
# Warmup Iteration  28: 1404046.088 ops/s
# Warmup Iteration  29: 1400888.230 ops/s
# Warmup Iteration  30: 1401061.841 ops/s
Iteration   1: 1403106.557 ops/s
Iteration   2: 1398493.600 ops/s
Iteration   3: 1404595.026 ops/s
Iteration   4: 1402788.319 ops/s
Iteration   5: 1404512.359 ops/s
Iteration   6: 1400153.396 ops/s
Iteration   7: 1404716.292 ops/s
Iteration   8: 1402419.395 ops/s
Iteration   9: 1399907.920 ops/s
Iteration  10: 1392794.275 ops/s
Iteration  11: 1397139.444 ops/s
Iteration  12: 1402583.335 ops/s
Iteration  13: 1396545.747 ops/s
Iteration  14: 1404452.738 ops/s
Iteration  15: 1393216.339 ops/s
Iteration  16: 1403623.026 ops/s
Iteration  17: 1402613.285 ops/s
Iteration  18: 1403604.559 ops/s
Iteration  19: 1398068.164 ops/s
Iteration  20: 1401367.951 ops/s
Iteration  21: 1402044.587 ops/s
Iteration  22: 1405342.959 ops/s
Iteration  23: 1401509.929 ops/s
Iteration  24: 1402273.709 ops/s
Iteration  25: 1401622.329 ops/s
Iteration  26: 1404152.703 ops/s
Iteration  27: 1399335.398 ops/s
Iteration  28: 1401890.133 ops/s
Iteration  29: 1399354.511 ops/s
Iteration  30: 1403280.216 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_maxBy":
  1401250.273 ±(99.9%) 2151.582 ops/s [Average]
  (min, avg, max) = (1392794.275, 1401250.273, 1405342.959), stdev = 3220.387
  CI (99.9%): [1399098.691, 1403401.856] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_maxBy  thrpt   30  1401250.273 ± 2151.582  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_maxByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_maxByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1185170.393 ops/s
# Warmup Iteration   2: 2065830.257 ops/s
# Warmup Iteration   3: 2330330.742 ops/s
# Warmup Iteration   4: 2333275.566 ops/s
# Warmup Iteration   5: 2340899.522 ops/s
# Warmup Iteration   6: 1955507.346 ops/s
# Warmup Iteration   7: 2340516.416 ops/s
# Warmup Iteration   8: 2340714.353 ops/s
# Warmup Iteration   9: 2340396.426 ops/s
# Warmup Iteration  10: 2340739.074 ops/s
# Warmup Iteration  11: 2336043.543 ops/s
# Warmup Iteration  12: 2337756.365 ops/s
# Warmup Iteration  13: 2340922.069 ops/s
# Warmup Iteration  14: 2343093.372 ops/s
# Warmup Iteration  15: 2335473.303 ops/s
# Warmup Iteration  16: 2338755.512 ops/s
# Warmup Iteration  17: 2319268.565 ops/s
# Warmup Iteration  18: 2316982.628 ops/s
# Warmup Iteration  19: 2318557.336 ops/s
# Warmup Iteration  20: 2314107.659 ops/s
# Warmup Iteration  21: 2312158.245 ops/s
# Warmup Iteration  22: 2311450.311 ops/s
# Warmup Iteration  23: 2316648.120 ops/s
# Warmup Iteration  24: 2320610.342 ops/s
# Warmup Iteration  25: 2318019.672 ops/s
# Warmup Iteration  26: 2315805.394 ops/s
# Warmup Iteration  27: 2315967.237 ops/s
# Warmup Iteration  28: 2317882.945 ops/s
# Warmup Iteration  29: 2318029.577 ops/s
# Warmup Iteration  30: 2317903.178 ops/s
Iteration   1: 2324275.343 ops/s
Iteration   2: 2320662.867 ops/s
Iteration   3: 2314662.376 ops/s
Iteration   4: 2312180.802 ops/s
Iteration   5: 2323751.040 ops/s
Iteration   6: 2317933.396 ops/s
Iteration   7: 2324986.663 ops/s
Iteration   8: 2310510.206 ops/s
Iteration   9: 2323821.848 ops/s
Iteration  10: 2318134.983 ops/s
Iteration  11: 2312850.440 ops/s
Iteration  12: 2324686.953 ops/s
Iteration  13: 2313827.474 ops/s
Iteration  14: 2314093.230 ops/s
Iteration  15: 2316776.152 ops/s
Iteration  16: 2324348.206 ops/s
Iteration  17: 2320182.505 ops/s
Iteration  18: 2325905.329 ops/s
Iteration  19: 2314919.238 ops/s
Iteration  20: 2317822.972 ops/s
Iteration  21: 2321550.750 ops/s
Iteration  22: 2316435.805 ops/s
Iteration  23: 2324998.311 ops/s
Iteration  24: 2321664.971 ops/s
Iteration  25: 2320708.002 ops/s
Iteration  26: 2320653.472 ops/s
Iteration  27: 2320102.780 ops/s
Iteration  28: 2318769.240 ops/s
Iteration  29: 2317808.122 ops/s
Iteration  30: 2323508.091 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_maxByOptional":
  2319417.719 ±(99.9%) 2916.956 ops/s [Average]
  (min, avg, max) = (2310510.206, 2319417.719, 2325905.329), stdev = 4365.963
  CI (99.9%): [2316500.763, 2322334.675] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_maxByOptional  thrpt   30  2319417.719 ± 2916.956  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_maxBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_maxBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 393639.614 ops/s
# Warmup Iteration   2: 415942.437 ops/s
# Warmup Iteration   3: 529836.882 ops/s
# Warmup Iteration   4: 547292.336 ops/s
# Warmup Iteration   5: 545861.268 ops/s
# Warmup Iteration   6: 544338.245 ops/s
# Warmup Iteration   7: 547285.893 ops/s
# Warmup Iteration   8: 547082.624 ops/s
# Warmup Iteration   9: 546207.509 ops/s
# Warmup Iteration  10: 543974.072 ops/s
# Warmup Iteration  11: 546662.584 ops/s
# Warmup Iteration  12: 500167.846 ops/s
# Warmup Iteration  13: 505472.834 ops/s
# Warmup Iteration  14: 546321.794 ops/s
# Warmup Iteration  15: 544058.805 ops/s
# Warmup Iteration  16: 547601.239 ops/s
# Warmup Iteration  17: 564380.717 ops/s
# Warmup Iteration  18: 565217.946 ops/s
# Warmup Iteration  19: 563527.916 ops/s
# Warmup Iteration  20: 565166.783 ops/s
# Warmup Iteration  21: 563608.078 ops/s
# Warmup Iteration  22: 563928.348 ops/s
# Warmup Iteration  23: 562386.929 ops/s
# Warmup Iteration  24: 564618.095 ops/s
# Warmup Iteration  25: 562663.700 ops/s
# Warmup Iteration  26: 561414.673 ops/s
# Warmup Iteration  27: 561526.970 ops/s
# Warmup Iteration  28: 564106.593 ops/s
# Warmup Iteration  29: 564820.770 ops/s
# Warmup Iteration  30: 563084.654 ops/s
Iteration   1: 565355.487 ops/s
Iteration   2: 564931.459 ops/s
Iteration   3: 562890.026 ops/s
Iteration   4: 562305.825 ops/s
Iteration   5: 564355.735 ops/s
Iteration   6: 564672.744 ops/s
Iteration   7: 564634.170 ops/s
Iteration   8: 564814.030 ops/s
Iteration   9: 562401.602 ops/s
Iteration  10: 559720.723 ops/s
Iteration  11: 563848.965 ops/s
Iteration  12: 565729.479 ops/s
Iteration  13: 565920.031 ops/s
Iteration  14: 564285.409 ops/s
Iteration  15: 561045.573 ops/s
Iteration  16: 562590.263 ops/s
Iteration  17: 564419.418 ops/s
Iteration  18: 564964.782 ops/s
Iteration  19: 563590.127 ops/s
Iteration  20: 564142.779 ops/s
Iteration  21: 565376.877 ops/s
Iteration  22: 563045.981 ops/s
Iteration  23: 563445.245 ops/s
Iteration  24: 564333.162 ops/s
Iteration  25: 564299.590 ops/s
Iteration  26: 566277.647 ops/s
Iteration  27: 562448.580 ops/s
Iteration  28: 563191.392 ops/s
Iteration  29: 564034.867 ops/s
Iteration  30: 564959.130 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_maxBy_null_throws":
  563934.370 ±(99.9%) 964.732 ops/s [Average]
  (min, avg, max) = (559720.723, 563934.370, 566277.647), stdev = 1443.965
  CI (99.9%): [562969.638, 564899.102] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_maxBy_null_throws  thrpt   30  563934.370 ± 964.732  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_maxOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_maxOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 687566.545 ops/s
# Warmup Iteration   2: 1048889.401 ops/s
# Warmup Iteration   3: 1248958.958 ops/s
# Warmup Iteration   4: 1241613.931 ops/s
# Warmup Iteration   5: 1248890.866 ops/s
# Warmup Iteration   6: 1251279.199 ops/s
# Warmup Iteration   7: 1044841.801 ops/s
# Warmup Iteration   8: 1251012.455 ops/s
# Warmup Iteration   9: 1249104.235 ops/s
# Warmup Iteration  10: 1252511.057 ops/s
# Warmup Iteration  11: 1253974.859 ops/s
# Warmup Iteration  12: 1249929.253 ops/s
# Warmup Iteration  13: 1250352.593 ops/s
# Warmup Iteration  14: 1250073.717 ops/s
# Warmup Iteration  15: 1252968.501 ops/s
# Warmup Iteration  16: 1249405.001 ops/s
# Warmup Iteration  17: 1252197.341 ops/s
# Warmup Iteration  18: 1248372.334 ops/s
# Warmup Iteration  19: 1250670.755 ops/s
# Warmup Iteration  20: 1248667.436 ops/s
# Warmup Iteration  21: 1245019.530 ops/s
# Warmup Iteration  22: 1250171.838 ops/s
# Warmup Iteration  23: 1250109.040 ops/s
# Warmup Iteration  24: 1248148.429 ops/s
# Warmup Iteration  25: 1248009.290 ops/s
# Warmup Iteration  26: 1249664.747 ops/s
# Warmup Iteration  27: 1253367.629 ops/s
# Warmup Iteration  28: 1250463.325 ops/s
# Warmup Iteration  29: 1249610.129 ops/s
# Warmup Iteration  30: 1249706.076 ops/s
Iteration   1: 1251577.931 ops/s
Iteration   2: 1249680.085 ops/s
Iteration   3: 1248105.921 ops/s
Iteration   4: 1250834.508 ops/s
Iteration   5: 1256090.365 ops/s
Iteration   6: 1252979.213 ops/s
Iteration   7: 1252487.314 ops/s
Iteration   8: 1254747.319 ops/s
Iteration   9: 1251547.778 ops/s
Iteration  10: 1253712.364 ops/s
Iteration  11: 1249182.026 ops/s
Iteration  12: 1250722.945 ops/s
Iteration  13: 1252702.443 ops/s
Iteration  14: 1254835.105 ops/s
Iteration  15: 1248080.183 ops/s
Iteration  16: 1251211.832 ops/s
Iteration  17: 1252212.323 ops/s
Iteration  18: 1250762.098 ops/s
Iteration  19: 1249714.823 ops/s
Iteration  20: 1249246.874 ops/s
Iteration  21: 1253802.606 ops/s
Iteration  22: 1250092.532 ops/s
Iteration  23: 1254894.142 ops/s
Iteration  24: 1250997.246 ops/s
Iteration  25: 1251787.004 ops/s
Iteration  26: 1248778.704 ops/s
Iteration  27: 1252322.208 ops/s
Iteration  28: 1254015.859 ops/s
Iteration  29: 1246168.971 ops/s
Iteration  30: 1254707.303 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_maxOptional":
  1251600.001 ±(99.9%) 1601.128 ops/s [Average]
  (min, avg, max) = (1246168.971, 1251600.001, 1256090.365), stdev = 2396.493
  CI (99.9%): [1249998.873, 1253201.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_maxOptional  thrpt   30  1251600.001 ± 1601.128  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_max_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_max_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 584115.626 ops/s
# Warmup Iteration   2: 640044.439 ops/s
# Warmup Iteration   3: 753956.117 ops/s
# Warmup Iteration   4: 818194.346 ops/s
# Warmup Iteration   5: 819276.109 ops/s
# Warmup Iteration   6: 810540.489 ops/s
# Warmup Iteration   7: 817926.509 ops/s
# Warmup Iteration   8: 818674.228 ops/s
# Warmup Iteration   9: 814951.209 ops/s
# Warmup Iteration  10: 818256.174 ops/s
# Warmup Iteration  11: 817422.041 ops/s
# Warmup Iteration  12: 818832.768 ops/s
# Warmup Iteration  13: 819258.162 ops/s
# Warmup Iteration  14: 686406.073 ops/s
# Warmup Iteration  15: 819755.643 ops/s
# Warmup Iteration  16: 821671.230 ops/s
# Warmup Iteration  17: 858182.567 ops/s
# Warmup Iteration  18: 859140.524 ops/s
# Warmup Iteration  19: 858566.074 ops/s
# Warmup Iteration  20: 861423.839 ops/s
# Warmup Iteration  21: 858255.960 ops/s
# Warmup Iteration  22: 857519.468 ops/s
# Warmup Iteration  23: 860118.137 ops/s
# Warmup Iteration  24: 859998.133 ops/s
# Warmup Iteration  25: 861280.343 ops/s
# Warmup Iteration  26: 861637.536 ops/s
# Warmup Iteration  27: 859446.838 ops/s
# Warmup Iteration  28: 858298.105 ops/s
# Warmup Iteration  29: 861586.659 ops/s
# Warmup Iteration  30: 861113.087 ops/s
Iteration   1: 861369.674 ops/s
Iteration   2: 861066.169 ops/s
Iteration   3: 859764.403 ops/s
Iteration   4: 859315.684 ops/s
Iteration   5: 856341.286 ops/s
Iteration   6: 856940.060 ops/s
Iteration   7: 859297.462 ops/s
Iteration   8: 857927.053 ops/s
Iteration   9: 855893.270 ops/s
Iteration  10: 859935.579 ops/s
Iteration  11: 859550.739 ops/s
Iteration  12: 859630.497 ops/s
Iteration  13: 858933.615 ops/s
Iteration  14: 856100.473 ops/s
Iteration  15: 856711.503 ops/s
Iteration  16: 857133.125 ops/s
Iteration  17: 858530.710 ops/s
Iteration  18: 855491.360 ops/s
Iteration  19: 855145.681 ops/s
Iteration  20: 858257.115 ops/s
Iteration  21: 857678.132 ops/s
Iteration  22: 859562.090 ops/s
Iteration  23: 859632.194 ops/s
Iteration  24: 854379.586 ops/s
Iteration  25: 861430.444 ops/s
Iteration  26: 853649.382 ops/s
Iteration  27: 858741.785 ops/s
Iteration  28: 857182.626 ops/s
Iteration  29: 861977.568 ops/s
Iteration  30: 855485.906 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_max_empty_throws":
  858101.839 ±(99.9%) 1458.239 ops/s [Average]
  (min, avg, max) = (853649.382, 858101.839, 861977.568), stdev = 2182.623
  CI (99.9%): [856643.600, 859560.078] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_max_empty_throws  thrpt   30  858101.839 ± 1458.239  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_max_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_max_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 370848.568 ops/s
# Warmup Iteration   2: 397141.438 ops/s
# Warmup Iteration   3: 521045.819 ops/s
# Warmup Iteration   4: 525174.720 ops/s
# Warmup Iteration   5: 524463.499 ops/s
# Warmup Iteration   6: 521918.974 ops/s
# Warmup Iteration   7: 520845.033 ops/s
# Warmup Iteration   8: 524968.768 ops/s
# Warmup Iteration   9: 525484.459 ops/s
# Warmup Iteration  10: 525015.282 ops/s
# Warmup Iteration  11: 526435.087 ops/s
# Warmup Iteration  12: 440684.969 ops/s
# Warmup Iteration  13: 525850.108 ops/s
# Warmup Iteration  14: 524294.965 ops/s
# Warmup Iteration  15: 525784.883 ops/s
# Warmup Iteration  16: 523765.831 ops/s
# Warmup Iteration  17: 542862.476 ops/s
# Warmup Iteration  18: 541360.433 ops/s
# Warmup Iteration  19: 540425.366 ops/s
# Warmup Iteration  20: 541867.109 ops/s
# Warmup Iteration  21: 543491.255 ops/s
# Warmup Iteration  22: 543050.602 ops/s
# Warmup Iteration  23: 542497.212 ops/s
# Warmup Iteration  24: 543915.995 ops/s
# Warmup Iteration  25: 541397.396 ops/s
# Warmup Iteration  26: 542903.114 ops/s
# Warmup Iteration  27: 543657.934 ops/s
# Warmup Iteration  28: 543419.934 ops/s
# Warmup Iteration  29: 544048.291 ops/s
# Warmup Iteration  30: 540841.561 ops/s
Iteration   1: 544288.800 ops/s
Iteration   2: 544182.395 ops/s
Iteration   3: 543173.723 ops/s
Iteration   4: 540660.179 ops/s
Iteration   5: 542168.347 ops/s
Iteration   6: 541826.364 ops/s
Iteration   7: 542136.068 ops/s
Iteration   8: 542769.209 ops/s
Iteration   9: 542190.394 ops/s
Iteration  10: 543428.719 ops/s
Iteration  11: 542779.438 ops/s
Iteration  12: 543477.920 ops/s
Iteration  13: 543219.841 ops/s
Iteration  14: 542481.403 ops/s
Iteration  15: 541587.344 ops/s
Iteration  16: 542215.840 ops/s
Iteration  17: 544071.448 ops/s
Iteration  18: 545121.954 ops/s
Iteration  19: 541103.436 ops/s
Iteration  20: 542753.451 ops/s
Iteration  21: 540091.301 ops/s
Iteration  22: 544005.727 ops/s
Iteration  23: 543789.696 ops/s
Iteration  24: 543362.017 ops/s
Iteration  25: 542818.317 ops/s
Iteration  26: 542882.760 ops/s
Iteration  27: 542353.477 ops/s
Iteration  28: 543527.907 ops/s
Iteration  29: 543509.700 ops/s
Iteration  30: 542380.890 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_max_null_safe":
  542811.936 ±(99.9%) 737.510 ops/s [Average]
  (min, avg, max) = (540091.301, 542811.936, 545121.954), stdev = 1103.871
  CI (99.9%): [542074.425, 543549.446] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_max_null_safe  thrpt   30  542811.936 ± 737.510  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 392340.705 ops/s
# Warmup Iteration   2: 419259.318 ops/s
# Warmup Iteration   3: 537474.734 ops/s
# Warmup Iteration   4: 551276.895 ops/s
# Warmup Iteration   5: 552132.865 ops/s
# Warmup Iteration   6: 549259.540 ops/s
# Warmup Iteration   7: 550762.436 ops/s
# Warmup Iteration   8: 551458.904 ops/s
# Warmup Iteration   9: 550875.205 ops/s
# Warmup Iteration  10: 551458.953 ops/s
# Warmup Iteration  11: 551694.507 ops/s
# Warmup Iteration  12: 490959.982 ops/s
# Warmup Iteration  13: 522934.614 ops/s
# Warmup Iteration  14: 551673.965 ops/s
# Warmup Iteration  15: 550183.797 ops/s
# Warmup Iteration  16: 549503.919 ops/s
# Warmup Iteration  17: 563902.962 ops/s
# Warmup Iteration  18: 566397.519 ops/s
# Warmup Iteration  19: 566522.099 ops/s
# Warmup Iteration  20: 564674.101 ops/s
# Warmup Iteration  21: 566074.477 ops/s
# Warmup Iteration  22: 565200.537 ops/s
# Warmup Iteration  23: 563122.313 ops/s
# Warmup Iteration  24: 567193.539 ops/s
# Warmup Iteration  25: 564865.496 ops/s
# Warmup Iteration  26: 567248.771 ops/s
# Warmup Iteration  27: 564955.936 ops/s
# Warmup Iteration  28: 566921.424 ops/s
# Warmup Iteration  29: 567518.149 ops/s
# Warmup Iteration  30: 567071.707 ops/s
Iteration   1: 564779.342 ops/s
Iteration   2: 565639.021 ops/s
Iteration   3: 566276.040 ops/s
Iteration   4: 564374.748 ops/s
Iteration   5: 566661.301 ops/s
Iteration   6: 558524.317 ops/s
Iteration   7: 565067.067 ops/s
Iteration   8: 565835.728 ops/s
Iteration   9: 564659.795 ops/s
Iteration  10: 564724.292 ops/s
Iteration  11: 563172.015 ops/s
Iteration  12: 565455.257 ops/s
Iteration  13: 564680.931 ops/s
Iteration  14: 565616.097 ops/s
Iteration  15: 562893.210 ops/s
Iteration  16: 568192.152 ops/s
Iteration  17: 567084.362 ops/s
Iteration  18: 568588.566 ops/s
Iteration  19: 565686.961 ops/s
Iteration  20: 566944.171 ops/s
Iteration  21: 567028.731 ops/s
Iteration  22: 564904.137 ops/s
Iteration  23: 564756.305 ops/s
Iteration  24: 567328.014 ops/s
Iteration  25: 568160.723 ops/s
Iteration  26: 567991.711 ops/s
Iteration  27: 565920.812 ops/s
Iteration  28: 566530.979 ops/s
Iteration  29: 566583.492 ops/s
Iteration  30: 565635.393 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_max_null_throws":
  565656.522 ±(99.9%) 1300.705 ops/s [Average]
  (min, avg, max) = (558524.317, 565656.522, 568588.566), stdev = 1946.835
  CI (99.9%): [564355.817, 566957.228] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_max_null_throws  thrpt   30  565656.522 ± 1300.705  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 394969.312 ops/s
# Warmup Iteration   2: 418805.873 ops/s
# Warmup Iteration   3: 538299.299 ops/s
# Warmup Iteration   4: 549727.340 ops/s
# Warmup Iteration   5: 550798.404 ops/s
# Warmup Iteration   6: 545146.594 ops/s
# Warmup Iteration   7: 551173.412 ops/s
# Warmup Iteration   8: 551093.789 ops/s
# Warmup Iteration   9: 550179.141 ops/s
# Warmup Iteration  10: 550821.067 ops/s
# Warmup Iteration  11: 550112.963 ops/s
# Warmup Iteration  12: 492276.988 ops/s
# Warmup Iteration  13: 521470.363 ops/s
# Warmup Iteration  14: 551769.089 ops/s
# Warmup Iteration  15: 549804.879 ops/s
# Warmup Iteration  16: 548624.307 ops/s
# Warmup Iteration  17: 567639.431 ops/s
# Warmup Iteration  18: 568885.835 ops/s
# Warmup Iteration  19: 568956.576 ops/s
# Warmup Iteration  20: 567110.434 ops/s
# Warmup Iteration  21: 567053.960 ops/s
# Warmup Iteration  22: 570152.910 ops/s
# Warmup Iteration  23: 567035.550 ops/s
# Warmup Iteration  24: 569968.862 ops/s
# Warmup Iteration  25: 564995.803 ops/s
# Warmup Iteration  26: 567880.260 ops/s
# Warmup Iteration  27: 567491.864 ops/s
# Warmup Iteration  28: 568066.449 ops/s
# Warmup Iteration  29: 570067.655 ops/s
# Warmup Iteration  30: 568992.151 ops/s
Iteration   1: 568568.006 ops/s
Iteration   2: 567563.818 ops/s
Iteration   3: 569541.775 ops/s
Iteration   4: 570318.439 ops/s
Iteration   5: 565379.832 ops/s
Iteration   6: 565413.086 ops/s
Iteration   7: 568260.503 ops/s
Iteration   8: 565836.306 ops/s
Iteration   9: 567636.737 ops/s
Iteration  10: 566500.853 ops/s
Iteration  11: 568213.116 ops/s
Iteration  12: 568213.738 ops/s
Iteration  13: 568873.749 ops/s
Iteration  14: 565106.211 ops/s
Iteration  15: 565817.512 ops/s
Iteration  16: 569737.681 ops/s
Iteration  17: 564746.790 ops/s
Iteration  18: 569313.926 ops/s
Iteration  19: 568858.674 ops/s
Iteration  20: 566303.829 ops/s
Iteration  21: 568577.880 ops/s
Iteration  22: 560127.299 ops/s
Iteration  23: 566200.135 ops/s
Iteration  24: 568823.749 ops/s
Iteration  25: 570702.567 ops/s
Iteration  26: 570402.618 ops/s
Iteration  27: 567343.898 ops/s
Iteration  28: 569135.204 ops/s
Iteration  29: 565342.173 ops/s
Iteration  30: 568308.059 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_max_null_throws_without_comparator":
  567505.605 ±(99.9%) 1482.258 ops/s [Average]
  (min, avg, max) = (560127.299, 567505.605, 570702.567), stdev = 2218.574
  CI (99.9%): [566023.348, 568987.863] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  567505.605 ± 1482.258  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1909565.210 ops/s
# Warmup Iteration   2: 2960748.216 ops/s
# Warmup Iteration   3: 3464802.900 ops/s
# Warmup Iteration   4: 3491556.831 ops/s
# Warmup Iteration   5: 3478725.396 ops/s
# Warmup Iteration   6: 3467934.141 ops/s
# Warmup Iteration   7: 2916299.243 ops/s
# Warmup Iteration   8: 3481398.338 ops/s
# Warmup Iteration   9: 3483500.622 ops/s
# Warmup Iteration  10: 3488328.291 ops/s
# Warmup Iteration  11: 3483174.524 ops/s
# Warmup Iteration  12: 3474579.011 ops/s
# Warmup Iteration  13: 3493075.081 ops/s
# Warmup Iteration  14: 3495361.695 ops/s
# Warmup Iteration  15: 3488003.099 ops/s
# Warmup Iteration  16: 3477895.933 ops/s
# Warmup Iteration  17: 3486108.427 ops/s
# Warmup Iteration  18: 3484015.107 ops/s
# Warmup Iteration  19: 3487406.852 ops/s
# Warmup Iteration  20: 3490284.858 ops/s
# Warmup Iteration  21: 3483394.370 ops/s
# Warmup Iteration  22: 3492573.782 ops/s
# Warmup Iteration  23: 3494767.898 ops/s
# Warmup Iteration  24: 3497522.812 ops/s
# Warmup Iteration  25: 3490958.160 ops/s
# Warmup Iteration  26: 3491575.424 ops/s
# Warmup Iteration  27: 3490666.972 ops/s
# Warmup Iteration  28: 3488854.729 ops/s
# Warmup Iteration  29: 3494054.166 ops/s
# Warmup Iteration  30: 3498336.820 ops/s
Iteration   1: 3491995.848 ops/s
Iteration   2: 3493955.799 ops/s
Iteration   3: 3495196.229 ops/s
Iteration   4: 3491081.563 ops/s
Iteration   5: 3488182.861 ops/s
Iteration   6: 3495909.061 ops/s
Iteration   7: 3492585.018 ops/s
Iteration   8: 3495982.196 ops/s
Iteration   9: 3483950.804 ops/s
Iteration  10: 3488631.706 ops/s
Iteration  11: 3479718.608 ops/s
Iteration  12: 3479206.104 ops/s
Iteration  13: 3485155.869 ops/s
Iteration  14: 3479686.121 ops/s
Iteration  15: 3481506.472 ops/s
Iteration  16: 3482295.374 ops/s
Iteration  17: 3466400.084 ops/s
Iteration  18: 3473762.663 ops/s
Iteration  19: 3496687.528 ops/s
Iteration  20: 3483800.141 ops/s
Iteration  21: 3487391.391 ops/s
Iteration  22: 3470671.781 ops/s
Iteration  23: 3478257.595 ops/s
Iteration  24: 3482567.299 ops/s
Iteration  25: 3488876.395 ops/s
Iteration  26: 3487023.936 ops/s
Iteration  27: 3498725.913 ops/s
Iteration  28: 3479705.506 ops/s
Iteration  29: 3498732.255 ops/s
Iteration  30: 3481911.529 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_max_without_comparator":
  3485985.122 ±(99.9%) 5517.959 ops/s [Average]
  (min, avg, max) = (3466400.084, 3485985.122, 3498732.255), stdev = 8259.022
  CI (99.9%): [3480467.163, 3491503.081] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_max_without_comparator  thrpt   30  3485985.122 ± 5517.959  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 531503.540 ops/s
# Warmup Iteration   2: 770427.628 ops/s
# Warmup Iteration   3: 926423.950 ops/s
# Warmup Iteration   4: 930810.871 ops/s
# Warmup Iteration   5: 927209.395 ops/s
# Warmup Iteration   6: 930961.434 ops/s
# Warmup Iteration   7: 867079.262 ops/s
# Warmup Iteration   8: 846517.025 ops/s
# Warmup Iteration   9: 934632.512 ops/s
# Warmup Iteration  10: 932583.829 ops/s
# Warmup Iteration  11: 932775.767 ops/s
# Warmup Iteration  12: 934030.535 ops/s
# Warmup Iteration  13: 933518.328 ops/s
# Warmup Iteration  14: 932496.692 ops/s
# Warmup Iteration  15: 934236.271 ops/s
# Warmup Iteration  16: 932349.876 ops/s
# Warmup Iteration  17: 931815.782 ops/s
# Warmup Iteration  18: 931945.836 ops/s
# Warmup Iteration  19: 935049.892 ops/s
# Warmup Iteration  20: 931443.311 ops/s
# Warmup Iteration  21: 933581.284 ops/s
# Warmup Iteration  22: 932101.730 ops/s
# Warmup Iteration  23: 931159.085 ops/s
# Warmup Iteration  24: 932260.674 ops/s
# Warmup Iteration  25: 932939.120 ops/s
# Warmup Iteration  26: 932887.612 ops/s
# Warmup Iteration  27: 933464.161 ops/s
# Warmup Iteration  28: 931394.028 ops/s
# Warmup Iteration  29: 930539.615 ops/s
# Warmup Iteration  30: 932031.559 ops/s
Iteration   1: 933264.274 ops/s
Iteration   2: 929596.658 ops/s
Iteration   3: 935957.024 ops/s
Iteration   4: 934941.934 ops/s
Iteration   5: 934397.951 ops/s
Iteration   6: 932822.793 ops/s
Iteration   7: 933756.932 ops/s
Iteration   8: 934923.240 ops/s
Iteration   9: 935337.293 ops/s
Iteration  10: 933436.944 ops/s
Iteration  11: 935744.871 ops/s
Iteration  12: 932338.863 ops/s
Iteration  13: 933339.996 ops/s
Iteration  14: 932934.957 ops/s
Iteration  15: 934223.653 ops/s
Iteration  16: 937757.158 ops/s
Iteration  17: 932585.474 ops/s
Iteration  18: 935298.429 ops/s
Iteration  19: 927730.177 ops/s
Iteration  20: 932994.741 ops/s
Iteration  21: 931820.623 ops/s
Iteration  22: 932434.907 ops/s
Iteration  23: 933192.686 ops/s
Iteration  24: 930779.745 ops/s
Iteration  25: 932553.385 ops/s
Iteration  26: 932623.128 ops/s
Iteration  27: 935801.000 ops/s
Iteration  28: 933153.574 ops/s
Iteration  29: 930999.863 ops/s
Iteration  30: 930720.822 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_min":
  933248.770 ±(99.9%) 1380.141 ops/s [Average]
  (min, avg, max) = (927730.177, 933248.770, 937757.158), stdev = 2065.730
  CI (99.9%): [931868.629, 934628.911] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_min  thrpt   30  933248.770 ± 1380.141  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 745937.165 ops/s
# Warmup Iteration   2: 1235523.809 ops/s
# Warmup Iteration   3: 1410989.909 ops/s
# Warmup Iteration   4: 1423106.728 ops/s
# Warmup Iteration   5: 1422823.768 ops/s
# Warmup Iteration   6: 1224429.421 ops/s
# Warmup Iteration   7: 1387107.679 ops/s
# Warmup Iteration   8: 1421381.774 ops/s
# Warmup Iteration   9: 1422505.138 ops/s
# Warmup Iteration  10: 1422083.293 ops/s
# Warmup Iteration  11: 1422790.382 ops/s
# Warmup Iteration  12: 1424911.913 ops/s
# Warmup Iteration  13: 1423228.509 ops/s
# Warmup Iteration  14: 1422451.119 ops/s
# Warmup Iteration  15: 1423576.245 ops/s
# Warmup Iteration  16: 1423375.032 ops/s
# Warmup Iteration  17: 1425142.798 ops/s
# Warmup Iteration  18: 1424514.152 ops/s
# Warmup Iteration  19: 1423300.199 ops/s
# Warmup Iteration  20: 1422382.105 ops/s
# Warmup Iteration  21: 1426219.403 ops/s
# Warmup Iteration  22: 1423639.103 ops/s
# Warmup Iteration  23: 1423786.607 ops/s
# Warmup Iteration  24: 1424188.163 ops/s
# Warmup Iteration  25: 1424151.579 ops/s
# Warmup Iteration  26: 1426359.178 ops/s
# Warmup Iteration  27: 1424071.600 ops/s
# Warmup Iteration  28: 1424345.162 ops/s
# Warmup Iteration  29: 1423362.981 ops/s
# Warmup Iteration  30: 1424727.141 ops/s
Iteration   1: 1421055.462 ops/s
Iteration   2: 1427733.112 ops/s
Iteration   3: 1426033.338 ops/s
Iteration   4: 1426662.685 ops/s
Iteration   5: 1414811.106 ops/s
Iteration   6: 1427733.483 ops/s
Iteration   7: 1425128.536 ops/s
Iteration   8: 1428774.646 ops/s
Iteration   9: 1423519.854 ops/s
Iteration  10: 1427385.392 ops/s
Iteration  11: 1422931.588 ops/s
Iteration  12: 1428871.693 ops/s
Iteration  13: 1421020.963 ops/s
Iteration  14: 1423815.884 ops/s
Iteration  15: 1422850.989 ops/s
Iteration  16: 1426618.832 ops/s
Iteration  17: 1422788.127 ops/s
Iteration  18: 1426104.837 ops/s
Iteration  19: 1422176.597 ops/s
Iteration  20: 1427503.257 ops/s
Iteration  21: 1419231.438 ops/s
Iteration  22: 1429318.757 ops/s
Iteration  23: 1421991.197 ops/s
Iteration  24: 1424027.830 ops/s
Iteration  25: 1415870.277 ops/s
Iteration  26: 1422853.337 ops/s
Iteration  27: 1427780.431 ops/s
Iteration  28: 1420408.350 ops/s
Iteration  29: 1427474.653 ops/s
Iteration  30: 1422063.075 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_minBy":
  1424151.324 ±(99.9%) 2469.580 ops/s [Average]
  (min, avg, max) = (1414811.106, 1424151.324, 1429318.757), stdev = 3696.351
  CI (99.9%): [1421681.744, 1426620.904] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_minBy  thrpt   30  1424151.324 ± 2469.580  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_minByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_minByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1096688.645 ops/s
# Warmup Iteration   2: 1797760.500 ops/s
# Warmup Iteration   3: 2110011.098 ops/s
# Warmup Iteration   4: 2128342.495 ops/s
# Warmup Iteration   5: 2130341.646 ops/s
# Warmup Iteration   6: 1918718.061 ops/s
# Warmup Iteration   7: 1960040.368 ops/s
# Warmup Iteration   8: 2123334.865 ops/s
# Warmup Iteration   9: 2124910.309 ops/s
# Warmup Iteration  10: 2119550.448 ops/s
# Warmup Iteration  11: 2123690.994 ops/s
# Warmup Iteration  12: 2118342.947 ops/s
# Warmup Iteration  13: 2124304.852 ops/s
# Warmup Iteration  14: 2124680.995 ops/s
# Warmup Iteration  15: 2120570.752 ops/s
# Warmup Iteration  16: 2126518.366 ops/s
# Warmup Iteration  17: 2127540.404 ops/s
# Warmup Iteration  18: 2132002.953 ops/s
# Warmup Iteration  19: 2128749.672 ops/s
# Warmup Iteration  20: 2131373.401 ops/s
# Warmup Iteration  21: 2131579.229 ops/s
# Warmup Iteration  22: 2122298.834 ops/s
# Warmup Iteration  23: 2126999.563 ops/s
# Warmup Iteration  24: 2128364.036 ops/s
# Warmup Iteration  25: 2126609.133 ops/s
# Warmup Iteration  26: 2127523.088 ops/s
# Warmup Iteration  27: 2131814.834 ops/s
# Warmup Iteration  28: 2127489.645 ops/s
# Warmup Iteration  29: 2127039.031 ops/s
# Warmup Iteration  30: 2128031.279 ops/s
Iteration   1: 2126442.692 ops/s
Iteration   2: 2130515.473 ops/s
Iteration   3: 2134478.917 ops/s
Iteration   4: 2134403.487 ops/s
Iteration   5: 2130974.814 ops/s
Iteration   6: 2125227.001 ops/s
Iteration   7: 2132646.601 ops/s
Iteration   8: 2131922.286 ops/s
Iteration   9: 2135159.391 ops/s
Iteration  10: 2129788.091 ops/s
Iteration  11: 2133248.419 ops/s
Iteration  12: 2124294.291 ops/s
Iteration  13: 2130451.804 ops/s
Iteration  14: 2126643.303 ops/s
Iteration  15: 2127671.100 ops/s
Iteration  16: 2131921.501 ops/s
Iteration  17: 2132445.650 ops/s
Iteration  18: 2121034.738 ops/s
Iteration  19: 2140687.272 ops/s
Iteration  20: 2129494.817 ops/s
Iteration  21: 2131637.647 ops/s
Iteration  22: 2119056.431 ops/s
Iteration  23: 2133104.760 ops/s
Iteration  24: 2127167.924 ops/s
Iteration  25: 2132026.154 ops/s
Iteration  26: 2126431.595 ops/s
Iteration  27: 2136830.522 ops/s
Iteration  28: 2130967.879 ops/s
Iteration  29: 2131274.987 ops/s
Iteration  30: 2128162.701 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_minByOptional":
  2130203.742 ±(99.9%) 3004.033 ops/s [Average]
  (min, avg, max) = (2119056.431, 2130203.742, 2140687.272), stdev = 4496.296
  CI (99.9%): [2127199.709, 2133207.775] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_minByOptional  thrpt   30  2130203.742 ± 3004.033  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_minBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_minBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 396043.357 ops/s
# Warmup Iteration   2: 419498.583 ops/s
# Warmup Iteration   3: 535508.370 ops/s
# Warmup Iteration   4: 549143.373 ops/s
# Warmup Iteration   5: 550211.950 ops/s
# Warmup Iteration   6: 546762.710 ops/s
# Warmup Iteration   7: 549298.810 ops/s
# Warmup Iteration   8: 550214.635 ops/s
# Warmup Iteration   9: 550284.688 ops/s
# Warmup Iteration  10: 547410.636 ops/s
# Warmup Iteration  11: 552113.119 ops/s
# Warmup Iteration  12: 493938.535 ops/s
# Warmup Iteration  13: 520065.708 ops/s
# Warmup Iteration  14: 551849.687 ops/s
# Warmup Iteration  15: 548629.099 ops/s
# Warmup Iteration  16: 548260.930 ops/s
# Warmup Iteration  17: 570601.667 ops/s
# Warmup Iteration  18: 571296.201 ops/s
# Warmup Iteration  19: 566190.431 ops/s
# Warmup Iteration  20: 567436.425 ops/s
# Warmup Iteration  21: 569468.875 ops/s
# Warmup Iteration  22: 568997.509 ops/s
# Warmup Iteration  23: 569409.895 ops/s
# Warmup Iteration  24: 567515.641 ops/s
# Warmup Iteration  25: 568648.635 ops/s
# Warmup Iteration  26: 569757.891 ops/s
# Warmup Iteration  27: 567407.650 ops/s
# Warmup Iteration  28: 568619.744 ops/s
# Warmup Iteration  29: 563751.169 ops/s
# Warmup Iteration  30: 569463.095 ops/s
Iteration   1: 566889.452 ops/s
Iteration   2: 565709.408 ops/s
Iteration   3: 569265.979 ops/s
Iteration   4: 565729.328 ops/s
Iteration   5: 568367.585 ops/s
Iteration   6: 566353.511 ops/s
Iteration   7: 569280.162 ops/s
Iteration   8: 568404.961 ops/s
Iteration   9: 566683.775 ops/s
Iteration  10: 567056.001 ops/s
Iteration  11: 567911.030 ops/s
Iteration  12: 566912.125 ops/s
Iteration  13: 564481.653 ops/s
Iteration  14: 568482.573 ops/s
Iteration  15: 569141.797 ops/s
Iteration  16: 568864.853 ops/s
Iteration  17: 567250.380 ops/s
Iteration  18: 569999.470 ops/s
Iteration  19: 567949.756 ops/s
Iteration  20: 570237.239 ops/s
Iteration  21: 570674.370 ops/s
Iteration  22: 570200.933 ops/s
Iteration  23: 567063.252 ops/s
Iteration  24: 567379.136 ops/s
Iteration  25: 569204.358 ops/s
Iteration  26: 568778.904 ops/s
Iteration  27: 567967.748 ops/s
Iteration  28: 569593.368 ops/s
Iteration  29: 567885.497 ops/s
Iteration  30: 567753.036 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_minBy_null_throws":
  568049.055 ±(99.9%) 990.908 ops/s [Average]
  (min, avg, max) = (564481.653, 568049.055, 570674.370), stdev = 1483.144
  CI (99.9%): [567058.147, 569039.962] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_minBy_null_throws  thrpt   30  568049.055 ± 990.908  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_minOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_minOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 688018.522 ops/s
# Warmup Iteration   2: 1043660.956 ops/s
# Warmup Iteration   3: 1233907.722 ops/s
# Warmup Iteration   4: 1224646.657 ops/s
# Warmup Iteration   5: 1234141.668 ops/s
# Warmup Iteration   6: 1231988.985 ops/s
# Warmup Iteration   7: 1035715.340 ops/s
# Warmup Iteration   8: 1234733.145 ops/s
# Warmup Iteration   9: 1231797.739 ops/s
# Warmup Iteration  10: 1234312.531 ops/s
# Warmup Iteration  11: 1233288.232 ops/s
# Warmup Iteration  12: 1234783.897 ops/s
# Warmup Iteration  13: 1232860.018 ops/s
# Warmup Iteration  14: 1234647.768 ops/s
# Warmup Iteration  15: 1229620.147 ops/s
# Warmup Iteration  16: 1231998.756 ops/s
# Warmup Iteration  17: 1232521.832 ops/s
# Warmup Iteration  18: 1231753.855 ops/s
# Warmup Iteration  19: 1232044.296 ops/s
# Warmup Iteration  20: 1231436.910 ops/s
# Warmup Iteration  21: 1229313.594 ops/s
# Warmup Iteration  22: 1233053.359 ops/s
# Warmup Iteration  23: 1231756.337 ops/s
# Warmup Iteration  24: 1229556.313 ops/s
# Warmup Iteration  25: 1230998.767 ops/s
# Warmup Iteration  26: 1231207.703 ops/s
# Warmup Iteration  27: 1229954.496 ops/s
# Warmup Iteration  28: 1230690.899 ops/s
# Warmup Iteration  29: 1230446.430 ops/s
# Warmup Iteration  30: 1231515.242 ops/s
Iteration   1: 1231368.709 ops/s
Iteration   2: 1232853.171 ops/s
Iteration   3: 1228029.850 ops/s
Iteration   4: 1227831.762 ops/s
Iteration   5: 1231419.299 ops/s
Iteration   6: 1233466.892 ops/s
Iteration   7: 1229125.902 ops/s
Iteration   8: 1232760.530 ops/s
Iteration   9: 1231915.343 ops/s
Iteration  10: 1232999.140 ops/s
Iteration  11: 1236287.274 ops/s
Iteration  12: 1229419.522 ops/s
Iteration  13: 1232212.108 ops/s
Iteration  14: 1231291.148 ops/s
Iteration  15: 1232459.059 ops/s
Iteration  16: 1232308.258 ops/s
Iteration  17: 1232818.473 ops/s
Iteration  18: 1232788.527 ops/s
Iteration  19: 1226877.565 ops/s
Iteration  20: 1234633.747 ops/s
Iteration  21: 1229237.664 ops/s
Iteration  22: 1234041.802 ops/s
Iteration  23: 1231073.264 ops/s
Iteration  24: 1230564.739 ops/s
Iteration  25: 1232837.187 ops/s
Iteration  26: 1232330.299 ops/s
Iteration  27: 1234091.880 ops/s
Iteration  28: 1230461.297 ops/s
Iteration  29: 1230387.809 ops/s
Iteration  30: 1230091.416 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_minOptional":
  1231599.455 ±(99.9%) 1418.134 ops/s [Average]
  (min, avg, max) = (1226877.565, 1231599.455, 1236287.274), stdev = 2122.596
  CI (99.9%): [1230181.321, 1233017.588] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_minOptional  thrpt   30  1231599.455 ± 1418.134  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_min_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_min_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 584602.347 ops/s
# Warmup Iteration   2: 641010.801 ops/s
# Warmup Iteration   3: 755584.954 ops/s
# Warmup Iteration   4: 826476.992 ops/s
# Warmup Iteration   5: 823210.929 ops/s
# Warmup Iteration   6: 818487.691 ops/s
# Warmup Iteration   7: 822613.880 ops/s
# Warmup Iteration   8: 825108.018 ops/s
# Warmup Iteration   9: 823979.414 ops/s
# Warmup Iteration  10: 822210.398 ops/s
# Warmup Iteration  11: 823532.293 ops/s
# Warmup Iteration  12: 822447.974 ops/s
# Warmup Iteration  13: 825835.244 ops/s
# Warmup Iteration  14: 690871.706 ops/s
# Warmup Iteration  15: 824534.340 ops/s
# Warmup Iteration  16: 824369.728 ops/s
# Warmup Iteration  17: 865719.403 ops/s
# Warmup Iteration  18: 861346.014 ops/s
# Warmup Iteration  19: 862564.070 ops/s
# Warmup Iteration  20: 868080.885 ops/s
# Warmup Iteration  21: 864450.670 ops/s
# Warmup Iteration  22: 868185.832 ops/s
# Warmup Iteration  23: 866342.959 ops/s
# Warmup Iteration  24: 865769.068 ops/s
# Warmup Iteration  25: 868118.936 ops/s
# Warmup Iteration  26: 865382.646 ops/s
# Warmup Iteration  27: 864463.692 ops/s
# Warmup Iteration  28: 866541.219 ops/s
# Warmup Iteration  29: 868322.339 ops/s
# Warmup Iteration  30: 862635.120 ops/s
Iteration   1: 865460.981 ops/s
Iteration   2: 865351.338 ops/s
Iteration   3: 863440.248 ops/s
Iteration   4: 862135.851 ops/s
Iteration   5: 864331.297 ops/s
Iteration   6: 863814.889 ops/s
Iteration   7: 866610.753 ops/s
Iteration   8: 865208.326 ops/s
Iteration   9: 869206.388 ops/s
Iteration  10: 866227.390 ops/s
Iteration  11: 863258.336 ops/s
Iteration  12: 862661.852 ops/s
Iteration  13: 867682.805 ops/s
Iteration  14: 864391.626 ops/s
Iteration  15: 863971.464 ops/s
Iteration  16: 864650.966 ops/s
Iteration  17: 866219.302 ops/s
Iteration  18: 866712.890 ops/s
Iteration  19: 862625.642 ops/s
Iteration  20: 867982.394 ops/s
Iteration  21: 866264.239 ops/s
Iteration  22: 870401.895 ops/s
Iteration  23: 865026.270 ops/s
Iteration  24: 867324.047 ops/s
Iteration  25: 868258.131 ops/s
Iteration  26: 868624.564 ops/s
Iteration  27: 865460.657 ops/s
Iteration  28: 867596.870 ops/s
Iteration  29: 868392.155 ops/s
Iteration  30: 867437.981 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_min_empty_throws":
  865891.052 ±(99.9%) 1422.069 ops/s [Average]
  (min, avg, max) = (862135.851, 865891.052, 870401.895), stdev = 2128.486
  CI (99.9%): [864468.982, 867313.121] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_min_empty_throws  thrpt   30  865891.052 ± 1422.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_min_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_min_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 373849.619 ops/s
# Warmup Iteration   2: 398295.060 ops/s
# Warmup Iteration   3: 520931.188 ops/s
# Warmup Iteration   4: 526005.823 ops/s
# Warmup Iteration   5: 526683.332 ops/s
# Warmup Iteration   6: 519914.343 ops/s
# Warmup Iteration   7: 522763.993 ops/s
# Warmup Iteration   8: 525532.141 ops/s
# Warmup Iteration   9: 525336.318 ops/s
# Warmup Iteration  10: 523445.413 ops/s
# Warmup Iteration  11: 524607.484 ops/s
# Warmup Iteration  12: 442246.358 ops/s
# Warmup Iteration  13: 522791.704 ops/s
# Warmup Iteration  14: 521402.352 ops/s
# Warmup Iteration  15: 523188.023 ops/s
# Warmup Iteration  16: 523299.745 ops/s
# Warmup Iteration  17: 542410.472 ops/s
# Warmup Iteration  18: 538543.326 ops/s
# Warmup Iteration  19: 541824.213 ops/s
# Warmup Iteration  20: 540122.853 ops/s
# Warmup Iteration  21: 540390.012 ops/s
# Warmup Iteration  22: 541005.105 ops/s
# Warmup Iteration  23: 543308.073 ops/s
# Warmup Iteration  24: 541787.129 ops/s
# Warmup Iteration  25: 541264.626 ops/s
# Warmup Iteration  26: 539735.747 ops/s
# Warmup Iteration  27: 542164.417 ops/s
# Warmup Iteration  28: 540305.218 ops/s
# Warmup Iteration  29: 539335.280 ops/s
# Warmup Iteration  30: 537700.765 ops/s
Iteration   1: 541922.243 ops/s
Iteration   2: 542495.864 ops/s
Iteration   3: 542214.150 ops/s
Iteration   4: 536360.880 ops/s
Iteration   5: 541192.121 ops/s
Iteration   6: 538843.571 ops/s
Iteration   7: 538941.801 ops/s
Iteration   8: 540632.099 ops/s
Iteration   9: 542575.515 ops/s
Iteration  10: 541817.854 ops/s
Iteration  11: 539079.684 ops/s
Iteration  12: 540200.699 ops/s
Iteration  13: 540605.839 ops/s
Iteration  14: 541361.147 ops/s
Iteration  15: 541762.717 ops/s
Iteration  16: 542090.844 ops/s
Iteration  17: 542111.945 ops/s
Iteration  18: 542774.648 ops/s
Iteration  19: 540097.662 ops/s
Iteration  20: 541043.939 ops/s
Iteration  21: 541059.609 ops/s
Iteration  22: 542566.444 ops/s
Iteration  23: 540661.831 ops/s
Iteration  24: 541893.363 ops/s
Iteration  25: 542289.698 ops/s
Iteration  26: 537170.227 ops/s
Iteration  27: 537783.641 ops/s
Iteration  28: 539568.033 ops/s
Iteration  29: 542015.863 ops/s
Iteration  30: 541156.871 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_min_null_safe":
  540809.694 ±(99.9%) 1123.085 ops/s [Average]
  (min, avg, max) = (536360.880, 540809.694, 542774.648), stdev = 1680.981
  CI (99.9%): [539686.608, 541932.779] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_min_null_safe  thrpt   30  540809.694 ± 1123.085  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 384945.433 ops/s
# Warmup Iteration   2: 415855.837 ops/s
# Warmup Iteration   3: 516854.818 ops/s
# Warmup Iteration   4: 533569.620 ops/s
# Warmup Iteration   5: 532029.293 ops/s
# Warmup Iteration   6: 530926.653 ops/s
# Warmup Iteration   7: 531090.307 ops/s
# Warmup Iteration   8: 533028.901 ops/s
# Warmup Iteration   9: 532756.330 ops/s
# Warmup Iteration  10: 533001.182 ops/s
# Warmup Iteration  11: 533245.414 ops/s
# Warmup Iteration  12: 520826.570 ops/s
# Warmup Iteration  13: 463374.211 ops/s
# Warmup Iteration  14: 534779.374 ops/s
# Warmup Iteration  15: 533196.275 ops/s
# Warmup Iteration  16: 533003.550 ops/s
# Warmup Iteration  17: 552123.182 ops/s
# Warmup Iteration  18: 551888.949 ops/s
# Warmup Iteration  19: 554490.390 ops/s
# Warmup Iteration  20: 550557.836 ops/s
# Warmup Iteration  21: 551925.193 ops/s
# Warmup Iteration  22: 553211.735 ops/s
# Warmup Iteration  23: 553081.503 ops/s
# Warmup Iteration  24: 551731.785 ops/s
# Warmup Iteration  25: 551013.307 ops/s
# Warmup Iteration  26: 552661.196 ops/s
# Warmup Iteration  27: 552995.535 ops/s
# Warmup Iteration  28: 550671.922 ops/s
# Warmup Iteration  29: 553758.679 ops/s
# Warmup Iteration  30: 550997.709 ops/s
Iteration   1: 550751.513 ops/s
Iteration   2: 554727.025 ops/s
Iteration   3: 553199.830 ops/s
Iteration   4: 551403.051 ops/s
Iteration   5: 553959.786 ops/s
Iteration   6: 550026.071 ops/s
Iteration   7: 553571.816 ops/s
Iteration   8: 549580.428 ops/s
Iteration   9: 554474.845 ops/s
Iteration  10: 552200.569 ops/s
Iteration  11: 554091.500 ops/s
Iteration  12: 553474.304 ops/s
Iteration  13: 552548.459 ops/s
Iteration  14: 554435.645 ops/s
Iteration  15: 551739.773 ops/s
Iteration  16: 552236.877 ops/s
Iteration  17: 553038.233 ops/s
Iteration  18: 552933.088 ops/s
Iteration  19: 554519.522 ops/s
Iteration  20: 550839.588 ops/s
Iteration  21: 551274.175 ops/s
Iteration  22: 551149.993 ops/s
Iteration  23: 553615.916 ops/s
Iteration  24: 552146.086 ops/s
Iteration  25: 550289.616 ops/s
Iteration  26: 553003.083 ops/s
Iteration  27: 553949.906 ops/s
Iteration  28: 552240.739 ops/s
Iteration  29: 545712.764 ops/s
Iteration  30: 552925.932 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_min_null_throws":
  552335.338 ±(99.9%) 1266.764 ops/s [Average]
  (min, avg, max) = (545712.764, 552335.338, 554727.025), stdev = 1896.033
  CI (99.9%): [551068.574, 553602.102] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_min_null_throws  thrpt   30  552335.338 ± 1266.764  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 393111.088 ops/s
# Warmup Iteration   2: 421137.987 ops/s
# Warmup Iteration   3: 536383.973 ops/s
# Warmup Iteration   4: 550930.805 ops/s
# Warmup Iteration   5: 549589.485 ops/s
# Warmup Iteration   6: 548019.698 ops/s
# Warmup Iteration   7: 551406.500 ops/s
# Warmup Iteration   8: 552192.008 ops/s
# Warmup Iteration   9: 550867.041 ops/s
# Warmup Iteration  10: 549895.906 ops/s
# Warmup Iteration  11: 551251.827 ops/s
# Warmup Iteration  12: 492279.439 ops/s
# Warmup Iteration  13: 521660.641 ops/s
# Warmup Iteration  14: 551620.089 ops/s
# Warmup Iteration  15: 548546.338 ops/s
# Warmup Iteration  16: 552592.461 ops/s
# Warmup Iteration  17: 567337.036 ops/s
# Warmup Iteration  18: 570067.117 ops/s
# Warmup Iteration  19: 568787.751 ops/s
# Warmup Iteration  20: 568892.559 ops/s
# Warmup Iteration  21: 568550.786 ops/s
# Warmup Iteration  22: 569534.340 ops/s
# Warmup Iteration  23: 568796.374 ops/s
# Warmup Iteration  24: 569274.782 ops/s
# Warmup Iteration  25: 569163.181 ops/s
# Warmup Iteration  26: 569095.394 ops/s
# Warmup Iteration  27: 569551.811 ops/s
# Warmup Iteration  28: 568324.182 ops/s
# Warmup Iteration  29: 567353.338 ops/s
# Warmup Iteration  30: 570019.557 ops/s
Iteration   1: 567489.703 ops/s
Iteration   2: 568322.170 ops/s
Iteration   3: 569060.272 ops/s
Iteration   4: 571060.486 ops/s
Iteration   5: 566312.085 ops/s
Iteration   6: 567778.187 ops/s
Iteration   7: 569814.380 ops/s
Iteration   8: 567951.397 ops/s
Iteration   9: 568860.187 ops/s
Iteration  10: 567876.805 ops/s
Iteration  11: 569764.284 ops/s
Iteration  12: 566259.088 ops/s
Iteration  13: 570754.580 ops/s
Iteration  14: 566685.703 ops/s
Iteration  15: 568595.856 ops/s
Iteration  16: 567068.841 ops/s
Iteration  17: 570566.167 ops/s
Iteration  18: 566661.634 ops/s
Iteration  19: 570382.499 ops/s
Iteration  20: 568534.528 ops/s
Iteration  21: 562461.993 ops/s
Iteration  22: 567395.047 ops/s
Iteration  23: 570298.368 ops/s
Iteration  24: 569375.153 ops/s
Iteration  25: 571411.311 ops/s
Iteration  26: 569967.073 ops/s
Iteration  27: 566269.705 ops/s
Iteration  28: 570358.694 ops/s
Iteration  29: 567208.142 ops/s
Iteration  30: 570986.293 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_min_null_throws_without_comparator":
  568517.688 ±(99.9%) 1316.495 ops/s [Average]
  (min, avg, max) = (562461.993, 568517.688, 571411.311), stdev = 1970.468
  CI (99.9%): [567201.193, 569834.182] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  568517.688 ± 1316.495  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1920095.732 ops/s
# Warmup Iteration   2: 3012068.870 ops/s
# Warmup Iteration   3: 3509297.285 ops/s
# Warmup Iteration   4: 3538262.594 ops/s
# Warmup Iteration   5: 3531808.340 ops/s
# Warmup Iteration   6: 3530739.289 ops/s
# Warmup Iteration   7: 2949059.719 ops/s
# Warmup Iteration   8: 3541279.903 ops/s
# Warmup Iteration   9: 3541729.800 ops/s
# Warmup Iteration  10: 3530136.141 ops/s
# Warmup Iteration  11: 3531744.897 ops/s
# Warmup Iteration  12: 3530179.841 ops/s
# Warmup Iteration  13: 3540539.388 ops/s
# Warmup Iteration  14: 3531017.413 ops/s
# Warmup Iteration  15: 3537220.365 ops/s
# Warmup Iteration  16: 3537480.364 ops/s
# Warmup Iteration  17: 3532974.318 ops/s
# Warmup Iteration  18: 3542629.940 ops/s
# Warmup Iteration  19: 3539739.816 ops/s
# Warmup Iteration  20: 3531857.098 ops/s
# Warmup Iteration  21: 3536777.973 ops/s
# Warmup Iteration  22: 3532762.771 ops/s
# Warmup Iteration  23: 3530919.553 ops/s
# Warmup Iteration  24: 3534023.217 ops/s
# Warmup Iteration  25: 3541461.321 ops/s
# Warmup Iteration  26: 3527146.319 ops/s
# Warmup Iteration  27: 3538917.275 ops/s
# Warmup Iteration  28: 3536206.898 ops/s
# Warmup Iteration  29: 3531714.057 ops/s
# Warmup Iteration  30: 3539434.593 ops/s
Iteration   1: 3540649.550 ops/s
Iteration   2: 3540207.293 ops/s
Iteration   3: 3533805.772 ops/s
Iteration   4: 3533518.457 ops/s
Iteration   5: 3545447.001 ops/s
Iteration   6: 3539676.896 ops/s
Iteration   7: 3535140.431 ops/s
Iteration   8: 3526003.269 ops/s
Iteration   9: 3535414.394 ops/s
Iteration  10: 3537559.777 ops/s
Iteration  11: 3545596.069 ops/s
Iteration  12: 3537661.640 ops/s
Iteration  13: 3547219.635 ops/s
Iteration  14: 3534216.174 ops/s
Iteration  15: 3541109.058 ops/s
Iteration  16: 3540109.341 ops/s
Iteration  17: 3542767.550 ops/s
Iteration  18: 3539414.404 ops/s
Iteration  19: 3528470.196 ops/s
Iteration  20: 3545650.364 ops/s
Iteration  21: 3541394.243 ops/s
Iteration  22: 3545234.947 ops/s
Iteration  23: 3536482.496 ops/s
Iteration  24: 3538618.283 ops/s
Iteration  25: 3539220.250 ops/s
Iteration  26: 3545702.805 ops/s
Iteration  27: 3541456.013 ops/s
Iteration  28: 3511444.872 ops/s
Iteration  29: 3506685.055 ops/s
Iteration  30: 3539887.386 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_min_without_comparator":
  3537192.121 ±(99.9%) 6104.776 ops/s [Average]
  (min, avg, max) = (3506685.055, 3537192.121, 3547219.635), stdev = 9137.342
  CI (99.9%): [3531087.344, 3543296.897] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_min_without_comparator  thrpt   30  3537192.121 ± 6104.776  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3665939.862 ops/s
# Warmup Iteration   2: 7784437.551 ops/s
# Warmup Iteration   3: 7985910.891 ops/s
# Warmup Iteration   4: 6752731.407 ops/s
# Warmup Iteration   5: 7994390.713 ops/s
# Warmup Iteration   6: 8013193.955 ops/s
# Warmup Iteration   7: 8019163.849 ops/s
# Warmup Iteration   8: 7974506.600 ops/s
# Warmup Iteration   9: 8005018.829 ops/s
# Warmup Iteration  10: 8000830.397 ops/s
# Warmup Iteration  11: 8031652.697 ops/s
# Warmup Iteration  12: 8002617.399 ops/s
# Warmup Iteration  13: 8009976.291 ops/s
# Warmup Iteration  14: 8001214.781 ops/s
# Warmup Iteration  15: 7993890.724 ops/s
# Warmup Iteration  16: 8010459.322 ops/s
# Warmup Iteration  17: 8017202.563 ops/s
# Warmup Iteration  18: 7995308.213 ops/s
# Warmup Iteration  19: 7975206.253 ops/s
# Warmup Iteration  20: 7999048.717 ops/s
# Warmup Iteration  21: 7975993.326 ops/s
# Warmup Iteration  22: 7983103.743 ops/s
# Warmup Iteration  23: 7954937.343 ops/s
# Warmup Iteration  24: 8014208.022 ops/s
# Warmup Iteration  25: 7988652.861 ops/s
# Warmup Iteration  26: 7994638.518 ops/s
# Warmup Iteration  27: 7975051.590 ops/s
# Warmup Iteration  28: 7968442.821 ops/s
# Warmup Iteration  29: 7949460.863 ops/s
# Warmup Iteration  30: 7995483.355 ops/s
Iteration   1: 7930488.675 ops/s
Iteration   2: 7981305.345 ops/s
Iteration   3: 8006752.879 ops/s
Iteration   4: 7990397.941 ops/s
Iteration   5: 7979556.361 ops/s
Iteration   6: 8024758.190 ops/s
Iteration   7: 7999626.480 ops/s
Iteration   8: 8023093.043 ops/s
Iteration   9: 7992526.213 ops/s
Iteration  10: 7989501.958 ops/s
Iteration  11: 8000638.919 ops/s
Iteration  12: 7984193.075 ops/s
Iteration  13: 7989662.694 ops/s
Iteration  14: 7980078.629 ops/s
Iteration  15: 7961730.603 ops/s
Iteration  16: 8049600.816 ops/s
Iteration  17: 8009465.079 ops/s
Iteration  18: 7986155.766 ops/s
Iteration  19: 8000771.608 ops/s
Iteration  20: 7959675.707 ops/s
Iteration  21: 7973584.659 ops/s
Iteration  22: 7986914.575 ops/s
Iteration  23: 7947714.035 ops/s
Iteration  24: 8010565.127 ops/s
Iteration  25: 7986677.221 ops/s
Iteration  26: 7991975.580 ops/s
Iteration  27: 8006682.669 ops/s
Iteration  28: 7975817.651 ops/s
Iteration  29: 7991438.158 ops/s
Iteration  30: 7965015.207 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_newEmpty":
  7989212.162 ±(99.9%) 15706.844 ops/s [Average]
  (min, avg, max) = (7930488.675, 7989212.162, 8049600.816), stdev = 23509.266
  CI (99.9%): [7973505.318, 8004919.006] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score       Error  Units
TreeBagTest._Benchmark.benchmark_newEmpty  thrpt   30  7989212.162 ± 15706.844  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 392750.447 ops/s
# Warmup Iteration   2: 576833.208 ops/s
# Warmup Iteration   3: 751568.611 ops/s
# Warmup Iteration   4: 743818.569 ops/s
# Warmup Iteration   5: 746945.174 ops/s
# Warmup Iteration   6: 745938.826 ops/s
# Warmup Iteration   7: 747276.872 ops/s
# Warmup Iteration   8: 625284.680 ops/s
# Warmup Iteration   9: 747161.606 ops/s
# Warmup Iteration  10: 747244.397 ops/s
# Warmup Iteration  11: 745933.646 ops/s
# Warmup Iteration  12: 745421.534 ops/s
# Warmup Iteration  13: 748941.626 ops/s
# Warmup Iteration  14: 746799.677 ops/s
# Warmup Iteration  15: 747749.703 ops/s
# Warmup Iteration  16: 746638.090 ops/s
# Warmup Iteration  17: 748532.197 ops/s
# Warmup Iteration  18: 748750.720 ops/s
# Warmup Iteration  19: 747743.447 ops/s
# Warmup Iteration  20: 746268.485 ops/s
# Warmup Iteration  21: 747561.111 ops/s
# Warmup Iteration  22: 747305.836 ops/s
# Warmup Iteration  23: 749054.796 ops/s
# Warmup Iteration  24: 745874.701 ops/s
# Warmup Iteration  25: 747507.181 ops/s
# Warmup Iteration  26: 747290.567 ops/s
# Warmup Iteration  27: 746388.277 ops/s
# Warmup Iteration  28: 747737.796 ops/s
# Warmup Iteration  29: 747058.865 ops/s
# Warmup Iteration  30: 746495.880 ops/s
Iteration   1: 747955.500 ops/s
Iteration   2: 747589.072 ops/s
Iteration   3: 746366.769 ops/s
Iteration   4: 746415.338 ops/s
Iteration   5: 746781.628 ops/s
Iteration   6: 748353.623 ops/s
Iteration   7: 743794.755 ops/s
Iteration   8: 743541.197 ops/s
Iteration   9: 748672.265 ops/s
Iteration  10: 748586.501 ops/s
Iteration  11: 746515.032 ops/s
Iteration  12: 748533.282 ops/s
Iteration  13: 746216.992 ops/s
Iteration  14: 746869.045 ops/s
Iteration  15: 748022.790 ops/s
Iteration  16: 745872.952 ops/s
Iteration  17: 748589.988 ops/s
Iteration  18: 746850.979 ops/s
Iteration  19: 745356.694 ops/s
Iteration  20: 746241.637 ops/s
Iteration  21: 746645.891 ops/s
Iteration  22: 746964.583 ops/s
Iteration  23: 748667.521 ops/s
Iteration  24: 748695.958 ops/s
Iteration  25: 749919.111 ops/s
Iteration  26: 749022.224 ops/s
Iteration  27: 749004.057 ops/s
Iteration  28: 748595.531 ops/s
Iteration  29: 747057.186 ops/s
Iteration  30: 747456.439 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_noneSatisfy":
  747305.151 ±(99.9%) 1001.523 ops/s [Average]
  (min, avg, max) = (743541.197, 747305.151, 749919.111), stdev = 1499.033
  CI (99.9%): [746303.628, 748306.675] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_noneSatisfy  thrpt   30  747305.151 ± 1001.523  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 540388.016 ops/s
# Warmup Iteration   2: 713863.818 ops/s
# Warmup Iteration   3: 922907.782 ops/s
# Warmup Iteration   4: 919112.981 ops/s
# Warmup Iteration   5: 922244.034 ops/s
# Warmup Iteration   6: 922207.434 ops/s
# Warmup Iteration   7: 922268.690 ops/s
# Warmup Iteration   8: 918937.197 ops/s
# Warmup Iteration   9: 773267.085 ops/s
# Warmup Iteration  10: 924533.669 ops/s
# Warmup Iteration  11: 921460.063 ops/s
# Warmup Iteration  12: 922466.213 ops/s
# Warmup Iteration  13: 923802.995 ops/s
# Warmup Iteration  14: 923838.434 ops/s
# Warmup Iteration  15: 920626.861 ops/s
# Warmup Iteration  16: 922369.599 ops/s
# Warmup Iteration  17: 925094.717 ops/s
# Warmup Iteration  18: 922152.911 ops/s
# Warmup Iteration  19: 921117.502 ops/s
# Warmup Iteration  20: 923913.489 ops/s
# Warmup Iteration  21: 923082.585 ops/s
# Warmup Iteration  22: 921295.598 ops/s
# Warmup Iteration  23: 920626.450 ops/s
# Warmup Iteration  24: 923428.529 ops/s
# Warmup Iteration  25: 923320.343 ops/s
# Warmup Iteration  26: 924559.812 ops/s
# Warmup Iteration  27: 923221.183 ops/s
# Warmup Iteration  28: 922149.017 ops/s
# Warmup Iteration  29: 924556.554 ops/s
# Warmup Iteration  30: 922910.490 ops/s
Iteration   1: 921967.972 ops/s
Iteration   2: 921174.356 ops/s
Iteration   3: 927635.526 ops/s
Iteration   4: 922278.808 ops/s
Iteration   5: 920543.408 ops/s
Iteration   6: 921069.413 ops/s
Iteration   7: 922551.877 ops/s
Iteration   8: 922121.554 ops/s
Iteration   9: 923759.097 ops/s
Iteration  10: 923921.017 ops/s
Iteration  11: 923884.914 ops/s
Iteration  12: 924642.690 ops/s
Iteration  13: 923007.995 ops/s
Iteration  14: 921954.829 ops/s
Iteration  15: 922532.565 ops/s
Iteration  16: 922686.506 ops/s
Iteration  17: 924125.858 ops/s
Iteration  18: 924606.500 ops/s
Iteration  19: 918470.626 ops/s
Iteration  20: 924269.373 ops/s
Iteration  21: 926057.403 ops/s
Iteration  22: 920780.790 ops/s
Iteration  23: 921087.164 ops/s
Iteration  24: 923185.339 ops/s
Iteration  25: 921756.371 ops/s
Iteration  26: 920365.906 ops/s
Iteration  27: 924082.083 ops/s
Iteration  28: 916650.667 ops/s
Iteration  29: 922520.925 ops/s
Iteration  30: 923211.771 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_noneSatisfyWith":
  922563.443 ±(99.9%) 1424.992 ops/s [Average]
  (min, avg, max) = (916650.667, 922563.443, 927635.526), stdev = 2132.861
  CI (99.9%): [921138.452, 923988.435] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  922563.443 ± 1424.992  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 605912.987 ops/s
# Warmup Iteration   2: 843785.790 ops/s
# Warmup Iteration   3: 1048439.268 ops/s
# Warmup Iteration   4: 1044905.522 ops/s
# Warmup Iteration   5: 1048287.683 ops/s
# Warmup Iteration   6: 1045841.064 ops/s
# Warmup Iteration   7: 1048200.592 ops/s
# Warmup Iteration   8: 876633.992 ops/s
# Warmup Iteration   9: 1048753.698 ops/s
# Warmup Iteration  10: 1046862.685 ops/s
# Warmup Iteration  11: 1046381.797 ops/s
# Warmup Iteration  12: 1047581.301 ops/s
# Warmup Iteration  13: 1046935.396 ops/s
# Warmup Iteration  14: 1046394.495 ops/s
# Warmup Iteration  15: 1046736.421 ops/s
# Warmup Iteration  16: 1045745.926 ops/s
# Warmup Iteration  17: 1045743.547 ops/s
# Warmup Iteration  18: 1051071.933 ops/s
# Warmup Iteration  19: 1048758.900 ops/s
# Warmup Iteration  20: 1050308.116 ops/s
# Warmup Iteration  21: 1048247.954 ops/s
# Warmup Iteration  22: 1051101.313 ops/s
# Warmup Iteration  23: 1046915.319 ops/s
# Warmup Iteration  24: 1048995.312 ops/s
# Warmup Iteration  25: 1046172.046 ops/s
# Warmup Iteration  26: 1047614.076 ops/s
# Warmup Iteration  27: 1047428.759 ops/s
# Warmup Iteration  28: 1049550.867 ops/s
# Warmup Iteration  29: 1049416.559 ops/s
# Warmup Iteration  30: 1047588.740 ops/s
Iteration   1: 1049369.119 ops/s
Iteration   2: 1049388.830 ops/s
Iteration   3: 1046273.486 ops/s
Iteration   4: 1052323.269 ops/s
Iteration   5: 1045662.634 ops/s
Iteration   6: 1051531.101 ops/s
Iteration   7: 1049290.234 ops/s
Iteration   8: 1049214.881 ops/s
Iteration   9: 1050713.412 ops/s
Iteration  10: 1049552.378 ops/s
Iteration  11: 1047975.346 ops/s
Iteration  12: 1050540.730 ops/s
Iteration  13: 1048165.906 ops/s
Iteration  14: 1051002.645 ops/s
Iteration  15: 1046785.836 ops/s
Iteration  16: 1047639.040 ops/s
Iteration  17: 1048956.517 ops/s
Iteration  18: 1047242.321 ops/s
Iteration  19: 1050863.763 ops/s
Iteration  20: 1049828.226 ops/s
Iteration  21: 1041265.544 ops/s
Iteration  22: 1050258.010 ops/s
Iteration  23: 1048728.111 ops/s
Iteration  24: 1049755.297 ops/s
Iteration  25: 1045946.675 ops/s
Iteration  26: 1049718.468 ops/s
Iteration  27: 1050206.779 ops/s
Iteration  28: 1048662.829 ops/s
Iteration  29: 1047159.455 ops/s
Iteration  30: 1045549.223 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences":
  1048652.335 ±(99.9%) 1503.927 ops/s [Average]
  (min, avg, max) = (1041265.544, 1048652.335, 1052323.269), stdev = 2251.008
  CI (99.9%): [1047148.408, 1050156.263] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences  thrpt   30  1048652.335 ± 1503.927  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2876982.491 ops/s
# Warmup Iteration   2: 6041182.578 ops/s
# Warmup Iteration   3: 5169761.176 ops/s
# Warmup Iteration   4: 6147726.137 ops/s
# Warmup Iteration   5: 6150293.294 ops/s
# Warmup Iteration   6: 6142662.242 ops/s
# Warmup Iteration   7: 6155676.658 ops/s
# Warmup Iteration   8: 6143209.377 ops/s
# Warmup Iteration   9: 6142327.869 ops/s
# Warmup Iteration  10: 6135376.481 ops/s
# Warmup Iteration  11: 6154959.739 ops/s
# Warmup Iteration  12: 6152918.837 ops/s
# Warmup Iteration  13: 6125893.073 ops/s
# Warmup Iteration  14: 6127857.605 ops/s
# Warmup Iteration  15: 6148483.368 ops/s
# Warmup Iteration  16: 6134691.562 ops/s
# Warmup Iteration  17: 6149414.760 ops/s
# Warmup Iteration  18: 6149612.355 ops/s
# Warmup Iteration  19: 6146768.561 ops/s
# Warmup Iteration  20: 6142344.992 ops/s
# Warmup Iteration  21: 6129427.734 ops/s
# Warmup Iteration  22: 6145895.625 ops/s
# Warmup Iteration  23: 6148330.643 ops/s
# Warmup Iteration  24: 6148373.120 ops/s
# Warmup Iteration  25: 6141854.708 ops/s
# Warmup Iteration  26: 6149796.357 ops/s
# Warmup Iteration  27: 6152740.932 ops/s
# Warmup Iteration  28: 6142241.368 ops/s
# Warmup Iteration  29: 6146845.127 ops/s
# Warmup Iteration  30: 6130752.460 ops/s
Iteration   1: 6159554.140 ops/s
Iteration   2: 6140861.528 ops/s
Iteration   3: 6154607.065 ops/s
Iteration   4: 6147508.030 ops/s
Iteration   5: 6159538.215 ops/s
Iteration   6: 6111306.394 ops/s
Iteration   7: 6133277.896 ops/s
Iteration   8: 6112441.027 ops/s
Iteration   9: 6130952.990 ops/s
Iteration  10: 6162716.434 ops/s
Iteration  11: 6136551.481 ops/s
Iteration  12: 6151431.473 ops/s
Iteration  13: 6149045.895 ops/s
Iteration  14: 6147713.528 ops/s
Iteration  15: 6139828.953 ops/s
Iteration  16: 6159182.282 ops/s
Iteration  17: 6134364.817 ops/s
Iteration  18: 6106295.577 ops/s
Iteration  19: 6159738.463 ops/s
Iteration  20: 6155855.331 ops/s
Iteration  21: 6158754.692 ops/s
Iteration  22: 6154330.329 ops/s
Iteration  23: 6158835.528 ops/s
Iteration  24: 6153417.673 ops/s
Iteration  25: 6159907.471 ops/s
Iteration  26: 6131093.179 ops/s
Iteration  27: 6152348.878 ops/s
Iteration  28: 6143626.108 ops/s
Iteration  29: 6119102.847 ops/s
Iteration  30: 6134931.417 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_notEmpty":
  6143970.655 ±(99.9%) 10703.976 ops/s [Average]
  (min, avg, max) = (6106295.577, 6143970.655, 6162716.434), stdev = 16021.208
  CI (99.9%): [6133266.679, 6154674.630] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score       Error  Units
TreeBagTest._Benchmark.benchmark_notEmpty  thrpt   30  6143970.655 ± 10703.976  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_occurrencesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_occurrencesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1797957.425 ops/s
# Warmup Iteration   2: 3265343.774 ops/s
# Warmup Iteration   3: 3514940.023 ops/s
# Warmup Iteration   4: 3531431.601 ops/s
# Warmup Iteration   5: 3113239.956 ops/s
# Warmup Iteration   6: 3385420.025 ops/s
# Warmup Iteration   7: 3539509.434 ops/s
# Warmup Iteration   8: 3536612.885 ops/s
# Warmup Iteration   9: 3536685.660 ops/s
# Warmup Iteration  10: 3540497.543 ops/s
# Warmup Iteration  11: 3538874.371 ops/s
# Warmup Iteration  12: 3545643.123 ops/s
# Warmup Iteration  13: 3541243.698 ops/s
# Warmup Iteration  14: 3531340.832 ops/s
# Warmup Iteration  15: 3543804.652 ops/s
# Warmup Iteration  16: 3537757.449 ops/s
# Warmup Iteration  17: 3543424.384 ops/s
# Warmup Iteration  18: 3534621.272 ops/s
# Warmup Iteration  19: 3543579.582 ops/s
# Warmup Iteration  20: 3538893.860 ops/s
# Warmup Iteration  21: 3539344.470 ops/s
# Warmup Iteration  22: 3537478.215 ops/s
# Warmup Iteration  23: 3543054.622 ops/s
# Warmup Iteration  24: 3543122.066 ops/s
# Warmup Iteration  25: 3536896.459 ops/s
# Warmup Iteration  26: 3541422.401 ops/s
# Warmup Iteration  27: 3546156.528 ops/s
# Warmup Iteration  28: 3540264.926 ops/s
# Warmup Iteration  29: 3544645.455 ops/s
# Warmup Iteration  30: 3543916.287 ops/s
Iteration   1: 3541023.798 ops/s
Iteration   2: 3544044.372 ops/s
Iteration   3: 3539227.022 ops/s
Iteration   4: 3549264.169 ops/s
Iteration   5: 3529251.905 ops/s
Iteration   6: 3546422.007 ops/s
Iteration   7: 3537186.560 ops/s
Iteration   8: 3524195.164 ops/s
Iteration   9: 3545425.618 ops/s
Iteration  10: 3539303.079 ops/s
Iteration  11: 3543038.739 ops/s
Iteration  12: 3548089.177 ops/s
Iteration  13: 3541288.446 ops/s
Iteration  14: 3544376.790 ops/s
Iteration  15: 3518137.243 ops/s
Iteration  16: 3543029.262 ops/s
Iteration  17: 3551531.063 ops/s
Iteration  18: 3543634.498 ops/s
Iteration  19: 3533020.779 ops/s
Iteration  20: 3548188.412 ops/s
Iteration  21: 3540533.799 ops/s
Iteration  22: 3546334.489 ops/s
Iteration  23: 3531431.721 ops/s
Iteration  24: 3540840.768 ops/s
Iteration  25: 3545897.566 ops/s
Iteration  26: 3524477.115 ops/s
Iteration  27: 3543186.638 ops/s
Iteration  28: 3538329.913 ops/s
Iteration  29: 3525019.533 ops/s
Iteration  30: 3508834.071 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_occurrencesOf":
  3538485.457 ±(99.9%) 6707.492 ops/s [Average]
  (min, avg, max) = (3508834.071, 3538485.457, 3551531.063), stdev = 10039.459
  CI (99.9%): [3531777.965, 3545192.949] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_occurrencesOf  thrpt   30  3538485.457 ± 6707.492  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 102532.363 ops/s
# Warmup Iteration   2: 187083.041 ops/s
# Warmup Iteration   3: 219058.679 ops/s
# Warmup Iteration   4: 220324.007 ops/s
# Warmup Iteration   5: 219808.545 ops/s
# Warmup Iteration   6: 184608.529 ops/s
# Warmup Iteration   7: 220173.506 ops/s
# Warmup Iteration   8: 219751.426 ops/s
# Warmup Iteration   9: 220009.229 ops/s
# Warmup Iteration  10: 219818.144 ops/s
# Warmup Iteration  11: 220212.049 ops/s
# Warmup Iteration  12: 220318.699 ops/s
# Warmup Iteration  13: 220313.186 ops/s
# Warmup Iteration  14: 219960.602 ops/s
# Warmup Iteration  15: 220678.326 ops/s
# Warmup Iteration  16: 220323.172 ops/s
# Warmup Iteration  17: 219614.145 ops/s
# Warmup Iteration  18: 220244.964 ops/s
# Warmup Iteration  19: 220321.849 ops/s
# Warmup Iteration  20: 220581.300 ops/s
# Warmup Iteration  21: 220047.276 ops/s
# Warmup Iteration  22: 219996.695 ops/s
# Warmup Iteration  23: 219647.078 ops/s
# Warmup Iteration  24: 219825.733 ops/s
# Warmup Iteration  25: 219895.260 ops/s
# Warmup Iteration  26: 219943.573 ops/s
# Warmup Iteration  27: 219773.789 ops/s
# Warmup Iteration  28: 220370.922 ops/s
# Warmup Iteration  29: 219996.217 ops/s
# Warmup Iteration  30: 220139.370 ops/s
Iteration   1: 219824.894 ops/s
Iteration   2: 220437.772 ops/s
Iteration   3: 220454.804 ops/s
Iteration   4: 220424.064 ops/s
Iteration   5: 219566.925 ops/s
Iteration   6: 220959.574 ops/s
Iteration   7: 219589.790 ops/s
Iteration   8: 220021.523 ops/s
Iteration   9: 219653.727 ops/s
Iteration  10: 219546.694 ops/s
Iteration  11: 220642.206 ops/s
Iteration  12: 219724.888 ops/s
Iteration  13: 219894.798 ops/s
Iteration  14: 219896.100 ops/s
Iteration  15: 220537.684 ops/s
Iteration  16: 219513.601 ops/s
Iteration  17: 220539.117 ops/s
Iteration  18: 219746.491 ops/s
Iteration  19: 219959.933 ops/s
Iteration  20: 220144.930 ops/s
Iteration  21: 220105.962 ops/s
Iteration  22: 219707.632 ops/s
Iteration  23: 219781.955 ops/s
Iteration  24: 220235.895 ops/s
Iteration  25: 219940.024 ops/s
Iteration  26: 219840.847 ops/s
Iteration  27: 218565.196 ops/s
Iteration  28: 220540.266 ops/s
Iteration  29: 219751.275 ops/s
Iteration  30: 219849.152 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_partition":
  219979.924 ±(99.9%) 310.821 ops/s [Average]
  (min, avg, max) = (218565.196, 219979.924, 220959.574), stdev = 465.223
  CI (99.9%): [219669.102, 220290.745] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_partition  thrpt   30  219979.924 ± 310.821  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 287070.434 ops/s
# Warmup Iteration   2: 495127.968 ops/s
# Warmup Iteration   3: 567604.981 ops/s
# Warmup Iteration   4: 570294.992 ops/s
# Warmup Iteration   5: 571902.314 ops/s
# Warmup Iteration   6: 481356.621 ops/s
# Warmup Iteration   7: 572115.691 ops/s
# Warmup Iteration   8: 571235.148 ops/s
# Warmup Iteration   9: 572159.123 ops/s
# Warmup Iteration  10: 570330.165 ops/s
# Warmup Iteration  11: 571855.918 ops/s
# Warmup Iteration  12: 572308.624 ops/s
# Warmup Iteration  13: 571560.728 ops/s
# Warmup Iteration  14: 571322.314 ops/s
# Warmup Iteration  15: 572032.766 ops/s
# Warmup Iteration  16: 570629.657 ops/s
# Warmup Iteration  17: 571663.244 ops/s
# Warmup Iteration  18: 571967.378 ops/s
# Warmup Iteration  19: 572005.067 ops/s
# Warmup Iteration  20: 570765.820 ops/s
# Warmup Iteration  21: 571080.686 ops/s
# Warmup Iteration  22: 570198.696 ops/s
# Warmup Iteration  23: 569815.486 ops/s
# Warmup Iteration  24: 570892.395 ops/s
# Warmup Iteration  25: 571133.620 ops/s
# Warmup Iteration  26: 571444.149 ops/s
# Warmup Iteration  27: 570606.548 ops/s
# Warmup Iteration  28: 570912.259 ops/s
# Warmup Iteration  29: 572192.955 ops/s
# Warmup Iteration  30: 570048.056 ops/s
Iteration   1: 572668.647 ops/s
Iteration   2: 570842.298 ops/s
Iteration   3: 570876.559 ops/s
Iteration   4: 570564.443 ops/s
Iteration   5: 572856.513 ops/s
Iteration   6: 570953.911 ops/s
Iteration   7: 569255.800 ops/s
Iteration   8: 572016.253 ops/s
Iteration   9: 569403.191 ops/s
Iteration  10: 573088.094 ops/s
Iteration  11: 569610.791 ops/s
Iteration  12: 570845.550 ops/s
Iteration  13: 570536.072 ops/s
Iteration  14: 571545.953 ops/s
Iteration  15: 568815.007 ops/s
Iteration  16: 570876.575 ops/s
Iteration  17: 572075.631 ops/s
Iteration  18: 571688.988 ops/s
Iteration  19: 570838.813 ops/s
Iteration  20: 571191.253 ops/s
Iteration  21: 569936.606 ops/s
Iteration  22: 570863.694 ops/s
Iteration  23: 568921.599 ops/s
Iteration  24: 569928.612 ops/s
Iteration  25: 571232.878 ops/s
Iteration  26: 568742.542 ops/s
Iteration  27: 569891.266 ops/s
Iteration  28: 569311.369 ops/s
Iteration  29: 572894.675 ops/s
Iteration  30: 570773.597 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_partitionWhile":
  570768.239 ±(99.9%) 825.538 ops/s [Average]
  (min, avg, max) = (568742.542, 570768.239, 573088.094), stdev = 1235.627
  CI (99.9%): [569942.701, 571593.777] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_partitionWhile  thrpt   30  570768.239 ± 825.538  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 76578.476 ops/s
# Warmup Iteration   2: 114498.382 ops/s
# Warmup Iteration   3: 148184.529 ops/s
# Warmup Iteration   4: 147088.779 ops/s
# Warmup Iteration   5: 148234.224 ops/s
# Warmup Iteration   6: 148308.349 ops/s
# Warmup Iteration   7: 148204.128 ops/s
# Warmup Iteration   8: 123554.222 ops/s
# Warmup Iteration   9: 148308.196 ops/s
# Warmup Iteration  10: 148006.701 ops/s
# Warmup Iteration  11: 148078.661 ops/s
# Warmup Iteration  12: 147999.904 ops/s
# Warmup Iteration  13: 147976.832 ops/s
# Warmup Iteration  14: 147904.535 ops/s
# Warmup Iteration  15: 148237.133 ops/s
# Warmup Iteration  16: 147975.876 ops/s
# Warmup Iteration  17: 148490.868 ops/s
# Warmup Iteration  18: 148637.166 ops/s
# Warmup Iteration  19: 148503.525 ops/s
# Warmup Iteration  20: 148418.272 ops/s
# Warmup Iteration  21: 148065.348 ops/s
# Warmup Iteration  22: 148576.149 ops/s
# Warmup Iteration  23: 148336.940 ops/s
# Warmup Iteration  24: 148492.904 ops/s
# Warmup Iteration  25: 148311.775 ops/s
# Warmup Iteration  26: 148347.814 ops/s
# Warmup Iteration  27: 148342.507 ops/s
# Warmup Iteration  28: 148511.609 ops/s
# Warmup Iteration  29: 148305.496 ops/s
# Warmup Iteration  30: 148511.995 ops/s
Iteration   1: 148026.033 ops/s
Iteration   2: 148215.991 ops/s
Iteration   3: 147982.187 ops/s
Iteration   4: 147919.537 ops/s
Iteration   5: 148858.659 ops/s
Iteration   6: 148324.576 ops/s
Iteration   7: 148183.021 ops/s
Iteration   8: 148240.261 ops/s
Iteration   9: 148341.479 ops/s
Iteration  10: 148620.259 ops/s
Iteration  11: 148225.427 ops/s
Iteration  12: 148542.098 ops/s
Iteration  13: 148613.836 ops/s
Iteration  14: 147420.683 ops/s
Iteration  15: 148168.814 ops/s
Iteration  16: 148161.413 ops/s
Iteration  17: 148224.879 ops/s
Iteration  18: 148142.964 ops/s
Iteration  19: 147463.973 ops/s
Iteration  20: 148058.992 ops/s
Iteration  21: 148214.659 ops/s
Iteration  22: 148488.417 ops/s
Iteration  23: 148366.063 ops/s
Iteration  24: 148043.810 ops/s
Iteration  25: 148414.232 ops/s
Iteration  26: 148604.112 ops/s
Iteration  27: 147889.854 ops/s
Iteration  28: 148744.389 ops/s
Iteration  29: 147991.472 ops/s
Iteration  30: 148268.649 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_partitionWith":
  148225.358 ±(99.9%) 216.129 ops/s [Average]
  (min, avg, max) = (147420.683, 148225.358, 148858.659), stdev = 323.492
  CI (99.9%): [148009.228, 148441.487] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_partitionWith  thrpt   30  148225.358 ± 216.129  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_reduceOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_reduceOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 323491.738 ops/s
# Warmup Iteration   2: 507316.911 ops/s
# Warmup Iteration   3: 586613.087 ops/s
# Warmup Iteration   4: 591887.031 ops/s
# Warmup Iteration   5: 590727.704 ops/s
# Warmup Iteration   6: 583135.129 ops/s
# Warmup Iteration   7: 504383.581 ops/s
# Warmup Iteration   8: 587820.565 ops/s
# Warmup Iteration   9: 589889.504 ops/s
# Warmup Iteration  10: 589131.244 ops/s
# Warmup Iteration  11: 590527.305 ops/s
# Warmup Iteration  12: 591531.277 ops/s
# Warmup Iteration  13: 590974.323 ops/s
# Warmup Iteration  14: 589848.963 ops/s
# Warmup Iteration  15: 589309.955 ops/s
# Warmup Iteration  16: 590761.985 ops/s
# Warmup Iteration  17: 589884.890 ops/s
# Warmup Iteration  18: 588971.148 ops/s
# Warmup Iteration  19: 588835.289 ops/s
# Warmup Iteration  20: 589929.975 ops/s
# Warmup Iteration  21: 589908.048 ops/s
# Warmup Iteration  22: 588936.180 ops/s
# Warmup Iteration  23: 588642.210 ops/s
# Warmup Iteration  24: 589843.077 ops/s
# Warmup Iteration  25: 589552.701 ops/s
# Warmup Iteration  26: 590041.060 ops/s
# Warmup Iteration  27: 588665.034 ops/s
# Warmup Iteration  28: 588017.118 ops/s
# Warmup Iteration  29: 589082.867 ops/s
# Warmup Iteration  30: 588500.468 ops/s
Iteration   1: 587989.817 ops/s
Iteration   2: 590872.971 ops/s
Iteration   3: 586709.863 ops/s
Iteration   4: 588224.394 ops/s
Iteration   5: 590174.506 ops/s
Iteration   6: 589100.860 ops/s
Iteration   7: 589753.911 ops/s
Iteration   8: 588431.622 ops/s
Iteration   9: 588951.707 ops/s
Iteration  10: 589470.283 ops/s
Iteration  11: 589174.450 ops/s
Iteration  12: 587861.237 ops/s
Iteration  13: 588535.358 ops/s
Iteration  14: 588614.028 ops/s
Iteration  15: 582331.859 ops/s
Iteration  16: 591306.346 ops/s
Iteration  17: 588254.295 ops/s
Iteration  18: 588558.547 ops/s
Iteration  19: 588676.422 ops/s
Iteration  20: 589179.006 ops/s
Iteration  21: 591716.959 ops/s
Iteration  22: 589212.349 ops/s
Iteration  23: 589572.350 ops/s
Iteration  24: 589769.549 ops/s
Iteration  25: 590687.908 ops/s
Iteration  26: 589115.115 ops/s
Iteration  27: 588976.788 ops/s
Iteration  28: 589020.095 ops/s
Iteration  29: 591047.612 ops/s
Iteration  30: 588099.631 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_reduceOptional":
  588979.661 ±(99.9%) 1119.641 ops/s [Average]
  (min, avg, max) = (582331.859, 588979.661, 591716.959), stdev = 1675.826
  CI (99.9%): [587860.020, 590099.302] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_reduceOptional  thrpt   30  588979.661 ± 1119.641  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 142604.091 ops/s
# Warmup Iteration   2: 282948.043 ops/s
# Warmup Iteration   3: 324031.888 ops/s
# Warmup Iteration   4: 325279.039 ops/s
# Warmup Iteration   5: 325866.194 ops/s
# Warmup Iteration   6: 273315.280 ops/s
# Warmup Iteration   7: 325533.943 ops/s
# Warmup Iteration   8: 326298.028 ops/s
# Warmup Iteration   9: 326472.981 ops/s
# Warmup Iteration  10: 326255.483 ops/s
# Warmup Iteration  11: 326199.616 ops/s
# Warmup Iteration  12: 326300.998 ops/s
# Warmup Iteration  13: 326326.087 ops/s
# Warmup Iteration  14: 325646.331 ops/s
# Warmup Iteration  15: 326341.525 ops/s
# Warmup Iteration  16: 325059.478 ops/s
# Warmup Iteration  17: 326103.057 ops/s
# Warmup Iteration  18: 326030.647 ops/s
# Warmup Iteration  19: 325908.636 ops/s
# Warmup Iteration  20: 325501.147 ops/s
# Warmup Iteration  21: 325787.047 ops/s
# Warmup Iteration  22: 325765.013 ops/s
# Warmup Iteration  23: 325510.199 ops/s
# Warmup Iteration  24: 325599.514 ops/s
# Warmup Iteration  25: 325758.430 ops/s
# Warmup Iteration  26: 325916.317 ops/s
# Warmup Iteration  27: 325546.037 ops/s
# Warmup Iteration  28: 324094.459 ops/s
# Warmup Iteration  29: 325743.334 ops/s
# Warmup Iteration  30: 325998.995 ops/s
Iteration   1: 323496.020 ops/s
Iteration   2: 324775.829 ops/s
Iteration   3: 325644.238 ops/s
Iteration   4: 325699.377 ops/s
Iteration   5: 326610.411 ops/s
Iteration   6: 325423.549 ops/s
Iteration   7: 325925.266 ops/s
Iteration   8: 325746.024 ops/s
Iteration   9: 325797.627 ops/s
Iteration  10: 325767.187 ops/s
Iteration  11: 324839.347 ops/s
Iteration  12: 325643.171 ops/s
Iteration  13: 325535.258 ops/s
Iteration  14: 326533.830 ops/s
Iteration  15: 326283.619 ops/s
Iteration  16: 325483.983 ops/s
Iteration  17: 326226.139 ops/s
Iteration  18: 325618.670 ops/s
Iteration  19: 324744.288 ops/s
Iteration  20: 326545.284 ops/s
Iteration  21: 325386.394 ops/s
Iteration  22: 325896.818 ops/s
Iteration  23: 325167.536 ops/s
Iteration  24: 325635.691 ops/s
Iteration  25: 325817.092 ops/s
Iteration  26: 326214.325 ops/s
Iteration  27: 326439.474 ops/s
Iteration  28: 326336.296 ops/s
Iteration  29: 325540.909 ops/s
Iteration  30: 325395.363 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_reject":
  325672.300 ±(99.9%) 433.371 ops/s [Average]
  (min, avg, max) = (323496.020, 325672.300, 326610.411), stdev = 648.650
  CI (99.9%): [325238.929, 326105.672] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_reject  thrpt   30  325672.300 ± 433.371  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 248800.060 ops/s
# Warmup Iteration   2: 466108.078 ops/s
# Warmup Iteration   3: 532721.667 ops/s
# Warmup Iteration   4: 533255.483 ops/s
# Warmup Iteration   5: 532875.085 ops/s
# Warmup Iteration   6: 450441.547 ops/s
# Warmup Iteration   7: 532853.125 ops/s
# Warmup Iteration   8: 533608.637 ops/s
# Warmup Iteration   9: 534934.729 ops/s
# Warmup Iteration  10: 534039.261 ops/s
# Warmup Iteration  11: 533856.987 ops/s
# Warmup Iteration  12: 535316.742 ops/s
# Warmup Iteration  13: 533293.766 ops/s
# Warmup Iteration  14: 534172.625 ops/s
# Warmup Iteration  15: 534793.677 ops/s
# Warmup Iteration  16: 534384.898 ops/s
# Warmup Iteration  17: 533799.690 ops/s
# Warmup Iteration  18: 534571.557 ops/s
# Warmup Iteration  19: 533210.901 ops/s
# Warmup Iteration  20: 534003.586 ops/s
# Warmup Iteration  21: 534740.819 ops/s
# Warmup Iteration  22: 534071.071 ops/s
# Warmup Iteration  23: 535483.979 ops/s
# Warmup Iteration  24: 534064.385 ops/s
# Warmup Iteration  25: 533514.007 ops/s
# Warmup Iteration  26: 534463.239 ops/s
# Warmup Iteration  27: 535433.843 ops/s
# Warmup Iteration  28: 533474.918 ops/s
# Warmup Iteration  29: 532819.269 ops/s
# Warmup Iteration  30: 534086.493 ops/s
Iteration   1: 536240.969 ops/s
Iteration   2: 532798.335 ops/s
Iteration   3: 531925.189 ops/s
Iteration   4: 534532.992 ops/s
Iteration   5: 533178.888 ops/s
Iteration   6: 535529.202 ops/s
Iteration   7: 532452.935 ops/s
Iteration   8: 534491.846 ops/s
Iteration   9: 533976.720 ops/s
Iteration  10: 535219.538 ops/s
Iteration  11: 533060.679 ops/s
Iteration  12: 533474.558 ops/s
Iteration  13: 534619.725 ops/s
Iteration  14: 534263.634 ops/s
Iteration  15: 533652.300 ops/s
Iteration  16: 533057.918 ops/s
Iteration  17: 531564.890 ops/s
Iteration  18: 536060.122 ops/s
Iteration  19: 532704.736 ops/s
Iteration  20: 535568.194 ops/s
Iteration  21: 533796.715 ops/s
Iteration  22: 535857.826 ops/s
Iteration  23: 534437.132 ops/s
Iteration  24: 534164.214 ops/s
Iteration  25: 535106.206 ops/s
Iteration  26: 533892.963 ops/s
Iteration  27: 534659.702 ops/s
Iteration  28: 534562.197 ops/s
Iteration  29: 535132.048 ops/s
Iteration  30: 536553.283 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_rejectWith":
  534217.855 ±(99.9%) 852.323 ops/s [Average]
  (min, avg, max) = (531564.890, 534217.855, 536553.283), stdev = 1275.717
  CI (99.9%): [533365.532, 535070.178] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_rejectWith  thrpt   30  534217.855 ± 852.323  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 225684.445 ops/s
# Warmup Iteration   2: 458978.984 ops/s
# Warmup Iteration   3: 536714.419 ops/s
# Warmup Iteration   4: 539022.279 ops/s
# Warmup Iteration   5: 538791.548 ops/s
# Warmup Iteration   6: 453187.772 ops/s
# Warmup Iteration   7: 539730.694 ops/s
# Warmup Iteration   8: 537683.746 ops/s
# Warmup Iteration   9: 538461.012 ops/s
# Warmup Iteration  10: 536825.222 ops/s
# Warmup Iteration  11: 539531.386 ops/s
# Warmup Iteration  12: 538278.490 ops/s
# Warmup Iteration  13: 537493.003 ops/s
# Warmup Iteration  14: 538819.493 ops/s
# Warmup Iteration  15: 539284.922 ops/s
# Warmup Iteration  16: 538868.922 ops/s
# Warmup Iteration  17: 537707.630 ops/s
# Warmup Iteration  18: 538702.063 ops/s
# Warmup Iteration  19: 538252.460 ops/s
# Warmup Iteration  20: 538297.633 ops/s
# Warmup Iteration  21: 538819.175 ops/s
# Warmup Iteration  22: 535645.588 ops/s
# Warmup Iteration  23: 538531.392 ops/s
# Warmup Iteration  24: 538293.019 ops/s
# Warmup Iteration  25: 538292.519 ops/s
# Warmup Iteration  26: 538722.706 ops/s
# Warmup Iteration  27: 538623.593 ops/s
# Warmup Iteration  28: 538657.600 ops/s
# Warmup Iteration  29: 538395.797 ops/s
# Warmup Iteration  30: 539077.887 ops/s
Iteration   1: 538042.770 ops/s
Iteration   2: 540171.993 ops/s
Iteration   3: 539388.136 ops/s
Iteration   4: 539216.425 ops/s
Iteration   5: 538371.336 ops/s
Iteration   6: 537900.383 ops/s
Iteration   7: 539704.596 ops/s
Iteration   8: 538451.134 ops/s
Iteration   9: 536982.569 ops/s
Iteration  10: 538810.914 ops/s
Iteration  11: 534036.648 ops/s
Iteration  12: 537668.804 ops/s
Iteration  13: 537911.145 ops/s
Iteration  14: 537770.248 ops/s
Iteration  15: 538944.036 ops/s
Iteration  16: 536581.391 ops/s
Iteration  17: 534719.957 ops/s
Iteration  18: 537427.420 ops/s
Iteration  19: 538423.569 ops/s
Iteration  20: 540177.409 ops/s
Iteration  21: 537935.073 ops/s
Iteration  22: 539593.715 ops/s
Iteration  23: 539307.945 ops/s
Iteration  24: 539209.373 ops/s
Iteration  25: 540675.405 ops/s
Iteration  26: 538510.663 ops/s
Iteration  27: 539284.013 ops/s
Iteration  28: 536449.127 ops/s
Iteration  29: 537617.064 ops/s
Iteration  30: 539889.993 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_rejectWith_target":
  538305.775 ±(99.9%) 1007.673 ops/s [Average]
  (min, avg, max) = (534036.648, 538305.775, 540675.405), stdev = 1508.237
  CI (99.9%): [537298.102, 539313.448] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_rejectWith_target  thrpt   30  538305.775 ± 1007.673  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 454013.591 ops/s
# Warmup Iteration   2: 875735.927 ops/s
# Warmup Iteration   3: 1006908.166 ops/s
# Warmup Iteration   4: 1015219.189 ops/s
# Warmup Iteration   5: 970816.821 ops/s
# Warmup Iteration   6: 890357.391 ops/s
# Warmup Iteration   7: 1014619.801 ops/s
# Warmup Iteration   8: 1014897.261 ops/s
# Warmup Iteration   9: 1015183.308 ops/s
# Warmup Iteration  10: 1017631.510 ops/s
# Warmup Iteration  11: 1017460.224 ops/s
# Warmup Iteration  12: 1012245.833 ops/s
# Warmup Iteration  13: 1015934.082 ops/s
# Warmup Iteration  14: 1015883.501 ops/s
# Warmup Iteration  15: 1016172.664 ops/s
# Warmup Iteration  16: 1015349.933 ops/s
# Warmup Iteration  17: 1018929.506 ops/s
# Warmup Iteration  18: 1018353.605 ops/s
# Warmup Iteration  19: 1017948.064 ops/s
# Warmup Iteration  20: 1011372.292 ops/s
# Warmup Iteration  21: 1016816.796 ops/s
# Warmup Iteration  22: 1008341.061 ops/s
# Warmup Iteration  23: 1015370.645 ops/s
# Warmup Iteration  24: 1016811.674 ops/s
# Warmup Iteration  25: 1014609.433 ops/s
# Warmup Iteration  26: 1015018.048 ops/s
# Warmup Iteration  27: 1014102.018 ops/s
# Warmup Iteration  28: 1014301.314 ops/s
# Warmup Iteration  29: 1013955.246 ops/s
# Warmup Iteration  30: 1017189.713 ops/s
Iteration   1: 1014642.614 ops/s
Iteration   2: 1018956.003 ops/s
Iteration   3: 1013088.311 ops/s
Iteration   4: 1014481.735 ops/s
Iteration   5: 1014819.488 ops/s
Iteration   6: 1015492.858 ops/s
Iteration   7: 1016551.629 ops/s
Iteration   8: 1014128.614 ops/s
Iteration   9: 1016139.549 ops/s
Iteration  10: 1018731.927 ops/s
Iteration  11: 1016832.545 ops/s
Iteration  12: 1016245.712 ops/s
Iteration  13: 1014441.236 ops/s
Iteration  14: 1016569.081 ops/s
Iteration  15: 1017491.591 ops/s
Iteration  16: 1016957.649 ops/s
Iteration  17: 1012612.431 ops/s
Iteration  18: 1019029.297 ops/s
Iteration  19: 1013027.082 ops/s
Iteration  20: 1018554.663 ops/s
Iteration  21: 1016760.435 ops/s
Iteration  22: 1009293.028 ops/s
Iteration  23: 1016888.699 ops/s
Iteration  24: 1017220.398 ops/s
Iteration  25: 1016527.758 ops/s
Iteration  26: 1016768.984 ops/s
Iteration  27: 1018305.901 ops/s
Iteration  28: 1018107.665 ops/s
Iteration  29: 1013749.278 ops/s
Iteration  30: 1014996.004 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_removeAll":
  1015913.739 ±(99.9%) 1474.711 ops/s [Average]
  (min, avg, max) = (1009293.028, 1015913.739, 1019029.297), stdev = 2207.278
  CI (99.9%): [1014439.028, 1017388.449] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_removeAll  thrpt   30  1015913.739 ± 1474.711  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 239687.903 ops/s
# Warmup Iteration   2: 439666.596 ops/s
# Warmup Iteration   3: 519624.864 ops/s
# Warmup Iteration   4: 522536.654 ops/s
# Warmup Iteration   5: 522220.461 ops/s
# Warmup Iteration   6: 436628.041 ops/s
# Warmup Iteration   7: 524232.560 ops/s
# Warmup Iteration   8: 523268.931 ops/s
# Warmup Iteration   9: 523754.913 ops/s
# Warmup Iteration  10: 522539.369 ops/s
# Warmup Iteration  11: 523602.116 ops/s
# Warmup Iteration  12: 523141.177 ops/s
# Warmup Iteration  13: 523410.835 ops/s
# Warmup Iteration  14: 522450.179 ops/s
# Warmup Iteration  15: 522131.893 ops/s
# Warmup Iteration  16: 523323.053 ops/s
# Warmup Iteration  17: 523618.890 ops/s
# Warmup Iteration  18: 523273.305 ops/s
# Warmup Iteration  19: 524220.153 ops/s
# Warmup Iteration  20: 523922.533 ops/s
# Warmup Iteration  21: 523594.404 ops/s
# Warmup Iteration  22: 522502.238 ops/s
# Warmup Iteration  23: 524104.687 ops/s
# Warmup Iteration  24: 523324.584 ops/s
# Warmup Iteration  25: 523284.695 ops/s
# Warmup Iteration  26: 523026.871 ops/s
# Warmup Iteration  27: 523396.868 ops/s
# Warmup Iteration  28: 522853.186 ops/s
# Warmup Iteration  29: 522425.586 ops/s
# Warmup Iteration  30: 521774.204 ops/s
Iteration   1: 521805.179 ops/s
Iteration   2: 523197.064 ops/s
Iteration   3: 523538.717 ops/s
Iteration   4: 523686.880 ops/s
Iteration   5: 523038.103 ops/s
Iteration   6: 522433.202 ops/s
Iteration   7: 522107.350 ops/s
Iteration   8: 523731.382 ops/s
Iteration   9: 524690.322 ops/s
Iteration  10: 523627.704 ops/s
Iteration  11: 525121.254 ops/s
Iteration  12: 522392.752 ops/s
Iteration  13: 524688.263 ops/s
Iteration  14: 523622.047 ops/s
Iteration  15: 524741.285 ops/s
Iteration  16: 522519.649 ops/s
Iteration  17: 522744.688 ops/s
Iteration  18: 524088.530 ops/s
Iteration  19: 521210.068 ops/s
Iteration  20: 522104.046 ops/s
Iteration  21: 522000.072 ops/s
Iteration  22: 525007.087 ops/s
Iteration  23: 521674.882 ops/s
Iteration  24: 524138.632 ops/s
Iteration  25: 522509.630 ops/s
Iteration  26: 523814.919 ops/s
Iteration  27: 523133.777 ops/s
Iteration  28: 523542.070 ops/s
Iteration  29: 524457.907 ops/s
Iteration  30: 523467.180 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_removeAllIterable":
  523294.488 ±(99.9%) 710.520 ops/s [Average]
  (min, avg, max) = (521210.068, 523294.488, 525121.254), stdev = 1063.473
  CI (99.9%): [522583.968, 524005.008] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_removeAllIterable  thrpt   30  523294.488 ± 710.520  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 382296.718 ops/s
# Warmup Iteration   2: 638823.432 ops/s
# Warmup Iteration   3: 752678.825 ops/s
# Warmup Iteration   4: 755189.929 ops/s
# Warmup Iteration   5: 759686.392 ops/s
# Warmup Iteration   6: 734318.950 ops/s
# Warmup Iteration   7: 662531.709 ops/s
# Warmup Iteration   8: 757948.035 ops/s
# Warmup Iteration   9: 759027.486 ops/s
# Warmup Iteration  10: 759820.146 ops/s
# Warmup Iteration  11: 757078.009 ops/s
# Warmup Iteration  12: 760932.423 ops/s
# Warmup Iteration  13: 760731.857 ops/s
# Warmup Iteration  14: 760018.435 ops/s
# Warmup Iteration  15: 757025.796 ops/s
# Warmup Iteration  16: 759850.835 ops/s
# Warmup Iteration  17: 758880.129 ops/s
# Warmup Iteration  18: 760636.481 ops/s
# Warmup Iteration  19: 760628.034 ops/s
# Warmup Iteration  20: 760421.603 ops/s
# Warmup Iteration  21: 760997.489 ops/s
# Warmup Iteration  22: 760695.595 ops/s
# Warmup Iteration  23: 762356.928 ops/s
# Warmup Iteration  24: 761655.048 ops/s
# Warmup Iteration  25: 759656.620 ops/s
# Warmup Iteration  26: 761125.840 ops/s
# Warmup Iteration  27: 759780.277 ops/s
# Warmup Iteration  28: 759411.905 ops/s
# Warmup Iteration  29: 760950.619 ops/s
# Warmup Iteration  30: 761174.570 ops/s
Iteration   1: 762120.591 ops/s
Iteration   2: 762253.436 ops/s
Iteration   3: 759617.862 ops/s
Iteration   4: 760903.016 ops/s
Iteration   5: 762352.251 ops/s
Iteration   6: 763512.007 ops/s
Iteration   7: 762629.392 ops/s
Iteration   8: 761114.648 ops/s
Iteration   9: 762379.604 ops/s
Iteration  10: 761673.768 ops/s
Iteration  11: 761982.168 ops/s
Iteration  12: 760687.164 ops/s
Iteration  13: 761912.538 ops/s
Iteration  14: 759066.132 ops/s
Iteration  15: 761662.789 ops/s
Iteration  16: 755929.579 ops/s
Iteration  17: 761796.850 ops/s
Iteration  18: 763915.174 ops/s
Iteration  19: 759912.030 ops/s
Iteration  20: 760345.364 ops/s
Iteration  21: 762445.395 ops/s
Iteration  22: 758808.099 ops/s
Iteration  23: 761991.295 ops/s
Iteration  24: 760715.924 ops/s
Iteration  25: 763020.523 ops/s
Iteration  26: 760196.438 ops/s
Iteration  27: 759072.716 ops/s
Iteration  28: 760645.479 ops/s
Iteration  29: 761588.505 ops/s
Iteration  30: 760852.442 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_removeIf":
  761170.106 ±(99.9%) 1084.881 ops/s [Average]
  (min, avg, max) = (755929.579, 761170.106, 763915.174), stdev = 1623.799
  CI (99.9%): [760085.225, 762254.987] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_removeIf  thrpt   30  761170.106 ± 1084.881  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 222189.195 ops/s
# Warmup Iteration   2: 366226.992 ops/s
# Warmup Iteration   3: 438031.081 ops/s
# Warmup Iteration   4: 441371.277 ops/s
# Warmup Iteration   5: 442071.023 ops/s
# Warmup Iteration   6: 441552.717 ops/s
# Warmup Iteration   7: 368530.473 ops/s
# Warmup Iteration   8: 441050.249 ops/s
# Warmup Iteration   9: 440005.462 ops/s
# Warmup Iteration  10: 439919.706 ops/s
# Warmup Iteration  11: 440800.385 ops/s
# Warmup Iteration  12: 441214.179 ops/s
# Warmup Iteration  13: 440125.499 ops/s
# Warmup Iteration  14: 439664.060 ops/s
# Warmup Iteration  15: 441342.057 ops/s
# Warmup Iteration  16: 441798.340 ops/s
# Warmup Iteration  17: 440278.733 ops/s
# Warmup Iteration  18: 440172.450 ops/s
# Warmup Iteration  19: 441802.393 ops/s
# Warmup Iteration  20: 440485.551 ops/s
# Warmup Iteration  21: 441345.102 ops/s
# Warmup Iteration  22: 441035.687 ops/s
# Warmup Iteration  23: 440746.864 ops/s
# Warmup Iteration  24: 440862.328 ops/s
# Warmup Iteration  25: 441798.141 ops/s
# Warmup Iteration  26: 441921.622 ops/s
# Warmup Iteration  27: 441002.979 ops/s
# Warmup Iteration  28: 441013.754 ops/s
# Warmup Iteration  29: 440291.739 ops/s
# Warmup Iteration  30: 441135.976 ops/s
Iteration   1: 441625.578 ops/s
Iteration   2: 441349.074 ops/s
Iteration   3: 440536.864 ops/s
Iteration   4: 440320.290 ops/s
Iteration   5: 439986.846 ops/s
Iteration   6: 440062.572 ops/s
Iteration   7: 439224.954 ops/s
Iteration   8: 441356.390 ops/s
Iteration   9: 439730.354 ops/s
Iteration  10: 440450.633 ops/s
Iteration  11: 441274.391 ops/s
Iteration  12: 441785.544 ops/s
Iteration  13: 440758.498 ops/s
Iteration  14: 441095.546 ops/s
Iteration  15: 440569.118 ops/s
Iteration  16: 440297.095 ops/s
Iteration  17: 440586.358 ops/s
Iteration  18: 441916.575 ops/s
Iteration  19: 439981.331 ops/s
Iteration  20: 442809.116 ops/s
Iteration  21: 441015.303 ops/s
Iteration  22: 441371.977 ops/s
Iteration  23: 441595.566 ops/s
Iteration  24: 439005.113 ops/s
Iteration  25: 441640.052 ops/s
Iteration  26: 440347.988 ops/s
Iteration  27: 441719.228 ops/s
Iteration  28: 441337.254 ops/s
Iteration  29: 440241.502 ops/s
Iteration  30: 440667.155 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_removeIfWith":
  440821.942 ±(99.9%) 564.758 ops/s [Average]
  (min, avg, max) = (439005.113, 440821.942, 442809.116), stdev = 845.303
  CI (99.9%): [440257.184, 441386.700] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_removeIfWith  thrpt   30  440821.942 ± 564.758  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 208599.920 ops/s
# Warmup Iteration   2: 406615.117 ops/s
# Warmup Iteration   3: 469217.134 ops/s
# Warmup Iteration   4: 469663.882 ops/s
# Warmup Iteration   5: 470401.619 ops/s
# Warmup Iteration   6: 394142.482 ops/s
# Warmup Iteration   7: 470138.088 ops/s
# Warmup Iteration   8: 470539.413 ops/s
# Warmup Iteration   9: 468184.744 ops/s
# Warmup Iteration  10: 470318.429 ops/s
# Warmup Iteration  11: 471473.709 ops/s
# Warmup Iteration  12: 470492.539 ops/s
# Warmup Iteration  13: 468713.041 ops/s
# Warmup Iteration  14: 468846.598 ops/s
# Warmup Iteration  15: 468069.340 ops/s
# Warmup Iteration  16: 469891.715 ops/s
# Warmup Iteration  17: 469894.783 ops/s
# Warmup Iteration  18: 469624.445 ops/s
# Warmup Iteration  19: 470118.655 ops/s
# Warmup Iteration  20: 469447.419 ops/s
# Warmup Iteration  21: 469322.107 ops/s
# Warmup Iteration  22: 468644.192 ops/s
# Warmup Iteration  23: 469206.786 ops/s
# Warmup Iteration  24: 471108.152 ops/s
# Warmup Iteration  25: 468444.389 ops/s
# Warmup Iteration  26: 469946.998 ops/s
# Warmup Iteration  27: 469595.601 ops/s
# Warmup Iteration  28: 469648.159 ops/s
# Warmup Iteration  29: 470234.184 ops/s
# Warmup Iteration  30: 471355.777 ops/s
Iteration   1: 470178.389 ops/s
Iteration   2: 469690.670 ops/s
Iteration   3: 469103.687 ops/s
Iteration   4: 471443.839 ops/s
Iteration   5: 470474.311 ops/s
Iteration   6: 471150.075 ops/s
Iteration   7: 470491.875 ops/s
Iteration   8: 469793.269 ops/s
Iteration   9: 469403.861 ops/s
Iteration  10: 468841.032 ops/s
Iteration  11: 470870.746 ops/s
Iteration  12: 467069.539 ops/s
Iteration  13: 469628.011 ops/s
Iteration  14: 468767.479 ops/s
Iteration  15: 469671.763 ops/s
Iteration  16: 470946.833 ops/s
Iteration  17: 470261.802 ops/s
Iteration  18: 471180.369 ops/s
Iteration  19: 468733.630 ops/s
Iteration  20: 469966.684 ops/s
Iteration  21: 469558.487 ops/s
Iteration  22: 470632.302 ops/s
Iteration  23: 471920.334 ops/s
Iteration  24: 470715.481 ops/s
Iteration  25: 469818.995 ops/s
Iteration  26: 466683.472 ops/s
Iteration  27: 471138.598 ops/s
Iteration  28: 472693.004 ops/s
Iteration  29: 469267.515 ops/s
Iteration  30: 470184.217 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_removeObject":
  470009.342 ±(99.9%) 846.592 ops/s [Average]
  (min, avg, max) = (466683.472, 470009.342, 472693.004), stdev = 1267.139
  CI (99.9%): [469162.750, 470855.934] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_removeObject  thrpt   30  470009.342 ± 846.592  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_removeOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_removeOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 101514.568 ops/s
# Warmup Iteration   2: 212317.055 ops/s
# Warmup Iteration   3: 243412.734 ops/s
# Warmup Iteration   4: 245064.075 ops/s
# Warmup Iteration   5: 224359.738 ops/s
# Warmup Iteration   6: 225097.806 ops/s
# Warmup Iteration   7: 244469.536 ops/s
# Warmup Iteration   8: 244881.050 ops/s
# Warmup Iteration   9: 245293.276 ops/s
# Warmup Iteration  10: 245150.737 ops/s
# Warmup Iteration  11: 244974.856 ops/s
# Warmup Iteration  12: 245220.896 ops/s
# Warmup Iteration  13: 244890.871 ops/s
# Warmup Iteration  14: 244919.886 ops/s
# Warmup Iteration  15: 244944.390 ops/s
# Warmup Iteration  16: 244616.546 ops/s
# Warmup Iteration  17: 245073.495 ops/s
# Warmup Iteration  18: 245283.935 ops/s
# Warmup Iteration  19: 245039.371 ops/s
# Warmup Iteration  20: 244608.866 ops/s
# Warmup Iteration  21: 244594.851 ops/s
# Warmup Iteration  22: 244881.519 ops/s
# Warmup Iteration  23: 245549.235 ops/s
# Warmup Iteration  24: 245474.202 ops/s
# Warmup Iteration  25: 244912.690 ops/s
# Warmup Iteration  26: 245165.509 ops/s
# Warmup Iteration  27: 245315.405 ops/s
# Warmup Iteration  28: 245235.362 ops/s
# Warmup Iteration  29: 244593.377 ops/s
# Warmup Iteration  30: 245240.147 ops/s
Iteration   1: 244344.532 ops/s
Iteration   2: 245224.081 ops/s
Iteration   3: 245125.590 ops/s
Iteration   4: 245619.243 ops/s
Iteration   5: 244470.888 ops/s
Iteration   6: 245248.114 ops/s
Iteration   7: 245391.216 ops/s
Iteration   8: 245269.781 ops/s
Iteration   9: 245083.444 ops/s
Iteration  10: 246094.521 ops/s
Iteration  11: 245000.235 ops/s
Iteration  12: 245158.911 ops/s
Iteration  13: 244779.624 ops/s
Iteration  14: 244419.078 ops/s
Iteration  15: 245531.655 ops/s
Iteration  16: 244902.213 ops/s
Iteration  17: 244838.401 ops/s
Iteration  18: 245130.891 ops/s
Iteration  19: 245388.946 ops/s
Iteration  20: 245400.742 ops/s
Iteration  21: 245296.070 ops/s
Iteration  22: 245048.499 ops/s
Iteration  23: 246055.381 ops/s
Iteration  24: 245298.606 ops/s
Iteration  25: 245261.699 ops/s
Iteration  26: 245929.703 ops/s
Iteration  27: 244111.291 ops/s
Iteration  28: 244535.074 ops/s
Iteration  29: 245748.414 ops/s
Iteration  30: 244921.980 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_removeOccurrences":
  245154.294 ±(99.9%) 323.376 ops/s [Average]
  (min, avg, max) = (244111.291, 245154.294, 246094.521), stdev = 484.014
  CI (99.9%): [244830.918, 245477.670] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_removeOccurrences  thrpt   30  245154.294 ± 323.376  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_removeOccurrences_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_removeOccurrences_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 711357.463 ops/s
# Warmup Iteration   2: 751288.828 ops/s
# Warmup Iteration   3: 931648.182 ops/s
# Warmup Iteration   4: 960484.759 ops/s
# Warmup Iteration   5: 961331.316 ops/s
# Warmup Iteration   6: 954404.128 ops/s
# Warmup Iteration   7: 962773.786 ops/s
# Warmup Iteration   8: 960222.930 ops/s
# Warmup Iteration   9: 961269.246 ops/s
# Warmup Iteration  10: 962223.842 ops/s
# Warmup Iteration  11: 961222.753 ops/s
# Warmup Iteration  12: 962187.505 ops/s
# Warmup Iteration  13: 814197.526 ops/s
# Warmup Iteration  14: 959442.611 ops/s
# Warmup Iteration  15: 961368.147 ops/s
# Warmup Iteration  16: 959728.130 ops/s
# Warmup Iteration  17: 1018569.421 ops/s
# Warmup Iteration  18: 1017351.880 ops/s
# Warmup Iteration  19: 1015278.830 ops/s
# Warmup Iteration  20: 1013404.189 ops/s
# Warmup Iteration  21: 1017209.597 ops/s
# Warmup Iteration  22: 1015098.758 ops/s
# Warmup Iteration  23: 1015514.458 ops/s
# Warmup Iteration  24: 1012592.911 ops/s
# Warmup Iteration  25: 1019574.308 ops/s
# Warmup Iteration  26: 1015373.229 ops/s
# Warmup Iteration  27: 1015214.870 ops/s
# Warmup Iteration  28: 1013836.921 ops/s
# Warmup Iteration  29: 1015967.616 ops/s
# Warmup Iteration  30: 1013159.999 ops/s
Iteration   1: 1012349.811 ops/s
Iteration   2: 1018055.212 ops/s
Iteration   3: 1013708.758 ops/s
Iteration   4: 1018236.927 ops/s
Iteration   5: 1012731.909 ops/s
Iteration   6: 1015974.577 ops/s
Iteration   7: 1017571.779 ops/s
Iteration   8: 1018124.152 ops/s
Iteration   9: 1011020.514 ops/s
Iteration  10: 1018577.757 ops/s
Iteration  11: 1019207.210 ops/s
Iteration  12: 1016757.312 ops/s
Iteration  13: 1017051.384 ops/s
Iteration  14: 1016527.176 ops/s
Iteration  15: 1011118.426 ops/s
Iteration  16: 1015100.852 ops/s
Iteration  17: 1014694.028 ops/s
Iteration  18: 1014166.772 ops/s
Iteration  19: 1015741.594 ops/s
Iteration  20: 1014004.605 ops/s
Iteration  21: 1017237.631 ops/s
Iteration  22: 1017560.823 ops/s
Iteration  23: 1018172.751 ops/s
Iteration  24: 1018568.097 ops/s
Iteration  25: 1017881.481 ops/s
Iteration  26: 1013427.799 ops/s
Iteration  27: 1017262.085 ops/s
Iteration  28: 1016055.561 ops/s
Iteration  29: 1019262.048 ops/s
Iteration  30: 1010334.082 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_removeOccurrences_throws":
  1015882.770 ±(99.9%) 1720.302 ops/s [Average]
  (min, avg, max) = (1010334.082, 1015882.770, 1019262.048), stdev = 2574.867
  CI (99.9%): [1014162.468, 1017603.073] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_removeOccurrences_throws  thrpt   30  1015882.770 ± 1720.302  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 136199.880 ops/s
# Warmup Iteration   2: 238254.656 ops/s
# Warmup Iteration   3: 309877.641 ops/s
# Warmup Iteration   4: 307603.209 ops/s
# Warmup Iteration   5: 309256.938 ops/s
# Warmup Iteration   6: 309107.299 ops/s
# Warmup Iteration   7: 300566.189 ops/s
# Warmup Iteration   8: 267901.001 ops/s
# Warmup Iteration   9: 308735.280 ops/s
# Warmup Iteration  10: 310353.410 ops/s
# Warmup Iteration  11: 309689.822 ops/s
# Warmup Iteration  12: 310110.061 ops/s
# Warmup Iteration  13: 309488.732 ops/s
# Warmup Iteration  14: 308404.412 ops/s
# Warmup Iteration  15: 309484.665 ops/s
# Warmup Iteration  16: 309231.579 ops/s
# Warmup Iteration  17: 310273.896 ops/s
# Warmup Iteration  18: 309981.948 ops/s
# Warmup Iteration  19: 310360.023 ops/s
# Warmup Iteration  20: 309836.920 ops/s
# Warmup Iteration  21: 310171.297 ops/s
# Warmup Iteration  22: 310138.235 ops/s
# Warmup Iteration  23: 309938.053 ops/s
# Warmup Iteration  24: 308986.735 ops/s
# Warmup Iteration  25: 310521.704 ops/s
# Warmup Iteration  26: 310049.820 ops/s
# Warmup Iteration  27: 309740.522 ops/s
# Warmup Iteration  28: 308904.034 ops/s
# Warmup Iteration  29: 309849.545 ops/s
# Warmup Iteration  30: 310026.040 ops/s
Iteration   1: 309973.531 ops/s
Iteration   2: 310386.129 ops/s
Iteration   3: 308812.013 ops/s
Iteration   4: 310414.557 ops/s
Iteration   5: 309634.307 ops/s
Iteration   6: 310048.887 ops/s
Iteration   7: 309649.059 ops/s
Iteration   8: 309979.053 ops/s
Iteration   9: 309500.489 ops/s
Iteration  10: 309450.278 ops/s
Iteration  11: 307959.030 ops/s
Iteration  12: 309798.748 ops/s
Iteration  13: 310435.430 ops/s
Iteration  14: 310032.952 ops/s
Iteration  15: 310544.027 ops/s
Iteration  16: 310312.246 ops/s
Iteration  17: 308900.925 ops/s
Iteration  18: 310470.281 ops/s
Iteration  19: 309626.512 ops/s
Iteration  20: 310169.024 ops/s
Iteration  21: 310394.821 ops/s
Iteration  22: 310276.407 ops/s
Iteration  23: 310073.564 ops/s
Iteration  24: 309983.543 ops/s
Iteration  25: 309385.915 ops/s
Iteration  26: 309126.697 ops/s
Iteration  27: 310605.950 ops/s
Iteration  28: 309914.651 ops/s
Iteration  29: 309505.437 ops/s
Iteration  30: 310230.669 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_retainAll":
  309853.171 ±(99.9%) 398.847 ops/s [Average]
  (min, avg, max) = (307959.030, 309853.171, 310605.950), stdev = 596.976
  CI (99.9%): [309454.324, 310252.018] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_retainAll  thrpt   30  309853.171 ± 398.847  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 202071.177 ops/s
# Warmup Iteration   2: 328607.101 ops/s
# Warmup Iteration   3: 415471.070 ops/s
# Warmup Iteration   4: 413600.722 ops/s
# Warmup Iteration   5: 415326.876 ops/s
# Warmup Iteration   6: 415335.462 ops/s
# Warmup Iteration   7: 398185.793 ops/s
# Warmup Iteration   8: 366240.178 ops/s
# Warmup Iteration   9: 416213.369 ops/s
# Warmup Iteration  10: 415526.507 ops/s
# Warmup Iteration  11: 416684.132 ops/s
# Warmup Iteration  12: 416538.525 ops/s
# Warmup Iteration  13: 416650.364 ops/s
# Warmup Iteration  14: 416354.196 ops/s
# Warmup Iteration  15: 416341.333 ops/s
# Warmup Iteration  16: 416122.382 ops/s
# Warmup Iteration  17: 416753.871 ops/s
# Warmup Iteration  18: 416268.972 ops/s
# Warmup Iteration  19: 416234.155 ops/s
# Warmup Iteration  20: 416588.349 ops/s
# Warmup Iteration  21: 416340.432 ops/s
# Warmup Iteration  22: 415639.965 ops/s
# Warmup Iteration  23: 416203.882 ops/s
# Warmup Iteration  24: 416380.469 ops/s
# Warmup Iteration  25: 417216.358 ops/s
# Warmup Iteration  26: 417019.002 ops/s
# Warmup Iteration  27: 416317.704 ops/s
# Warmup Iteration  28: 415872.367 ops/s
# Warmup Iteration  29: 416301.555 ops/s
# Warmup Iteration  30: 416566.093 ops/s
Iteration   1: 417773.827 ops/s
Iteration   2: 417702.709 ops/s
Iteration   3: 415883.550 ops/s
Iteration   4: 417112.044 ops/s
Iteration   5: 416172.674 ops/s
Iteration   6: 417053.850 ops/s
Iteration   7: 415486.717 ops/s
Iteration   8: 414891.029 ops/s
Iteration   9: 416767.090 ops/s
Iteration  10: 416495.472 ops/s
Iteration  11: 416386.064 ops/s
Iteration  12: 416687.318 ops/s
Iteration  13: 417646.931 ops/s
Iteration  14: 415247.100 ops/s
Iteration  15: 415272.780 ops/s
Iteration  16: 417357.900 ops/s
Iteration  17: 415646.802 ops/s
Iteration  18: 416252.239 ops/s
Iteration  19: 417539.177 ops/s
Iteration  20: 417811.675 ops/s
Iteration  21: 417999.975 ops/s
Iteration  22: 415712.196 ops/s
Iteration  23: 416866.787 ops/s
Iteration  24: 416697.375 ops/s
Iteration  25: 416288.998 ops/s
Iteration  26: 414676.819 ops/s
Iteration  27: 417526.313 ops/s
Iteration  28: 414849.251 ops/s
Iteration  29: 416122.766 ops/s
Iteration  30: 416872.027 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_retainAllIterable":
  416493.315 ±(99.9%) 646.568 ops/s [Average]
  (min, avg, max) = (414676.819, 416493.315, 417999.975), stdev = 967.753
  CI (99.9%): [415846.747, 417139.883] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_retainAllIterable  thrpt   30  416493.315 ± 646.568  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 115194.221 ops/s
# Warmup Iteration   2: 214493.246 ops/s
# Warmup Iteration   3: 249462.070 ops/s
# Warmup Iteration   4: 250909.521 ops/s
# Warmup Iteration   5: 250757.789 ops/s
# Warmup Iteration   6: 211610.530 ops/s
# Warmup Iteration   7: 251290.265 ops/s
# Warmup Iteration   8: 250403.094 ops/s
# Warmup Iteration   9: 251303.729 ops/s
# Warmup Iteration  10: 250500.449 ops/s
# Warmup Iteration  11: 250936.005 ops/s
# Warmup Iteration  12: 250785.175 ops/s
# Warmup Iteration  13: 250915.813 ops/s
# Warmup Iteration  14: 251139.944 ops/s
# Warmup Iteration  15: 251538.573 ops/s
# Warmup Iteration  16: 251163.517 ops/s
# Warmup Iteration  17: 251412.087 ops/s
# Warmup Iteration  18: 251250.345 ops/s
# Warmup Iteration  19: 250859.053 ops/s
# Warmup Iteration  20: 251793.569 ops/s
# Warmup Iteration  21: 250392.304 ops/s
# Warmup Iteration  22: 251251.288 ops/s
# Warmup Iteration  23: 250513.055 ops/s
# Warmup Iteration  24: 251156.866 ops/s
# Warmup Iteration  25: 251126.507 ops/s
# Warmup Iteration  26: 251068.288 ops/s
# Warmup Iteration  27: 250878.702 ops/s
# Warmup Iteration  28: 251434.283 ops/s
# Warmup Iteration  29: 251229.594 ops/s
# Warmup Iteration  30: 250902.678 ops/s
Iteration   1: 251255.270 ops/s
Iteration   2: 250024.776 ops/s
Iteration   3: 249723.815 ops/s
Iteration   4: 249849.739 ops/s
Iteration   5: 250502.305 ops/s
Iteration   6: 250631.253 ops/s
Iteration   7: 251403.147 ops/s
Iteration   8: 250677.045 ops/s
Iteration   9: 251235.417 ops/s
Iteration  10: 250979.331 ops/s
Iteration  11: 250998.920 ops/s
Iteration  12: 250753.532 ops/s
Iteration  13: 250122.805 ops/s
Iteration  14: 250130.081 ops/s
Iteration  15: 250607.438 ops/s
Iteration  16: 250896.908 ops/s
Iteration  17: 250907.874 ops/s
Iteration  18: 251528.680 ops/s
Iteration  19: 250896.237 ops/s
Iteration  20: 251778.761 ops/s
Iteration  21: 251420.699 ops/s
Iteration  22: 251710.903 ops/s
Iteration  23: 250456.560 ops/s
Iteration  24: 250456.350 ops/s
Iteration  25: 251054.837 ops/s
Iteration  26: 251247.704 ops/s
Iteration  27: 251919.760 ops/s
Iteration  28: 249982.380 ops/s
Iteration  29: 251186.716 ops/s
Iteration  30: 251325.084 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_select":
  250855.478 ±(99.9%) 393.589 ops/s [Average]
  (min, avg, max) = (249723.815, 250855.478, 251919.760), stdev = 589.106
  CI (99.9%): [250461.888, 251249.067] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_select  thrpt   30  250855.478 ± 393.589  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_selectAndRejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_selectAndRejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 753844.674 ops/s
# Warmup Iteration   2: 1779199.795 ops/s
# Warmup Iteration   3: 1813734.301 ops/s
# Warmup Iteration   4: 1520441.242 ops/s
# Warmup Iteration   5: 1805554.358 ops/s
# Warmup Iteration   6: 1806437.945 ops/s
# Warmup Iteration   7: 1806720.679 ops/s
# Warmup Iteration   8: 1808955.715 ops/s
# Warmup Iteration   9: 1806202.413 ops/s
# Warmup Iteration  10: 1806936.362 ops/s
# Warmup Iteration  11: 1811358.641 ops/s
# Warmup Iteration  12: 1809999.964 ops/s
# Warmup Iteration  13: 1809044.314 ops/s
# Warmup Iteration  14: 1805562.283 ops/s
# Warmup Iteration  15: 1813006.639 ops/s
# Warmup Iteration  16: 1804998.877 ops/s
# Warmup Iteration  17: 1813748.548 ops/s
# Warmup Iteration  18: 1809984.857 ops/s
# Warmup Iteration  19: 1816190.387 ops/s
# Warmup Iteration  20: 1811180.533 ops/s
# Warmup Iteration  21: 1812391.917 ops/s
# Warmup Iteration  22: 1814562.158 ops/s
# Warmup Iteration  23: 1813656.073 ops/s
# Warmup Iteration  24: 1812099.778 ops/s
# Warmup Iteration  25: 1813228.732 ops/s
# Warmup Iteration  26: 1813178.798 ops/s
# Warmup Iteration  27: 1813813.052 ops/s
# Warmup Iteration  28: 1815189.156 ops/s
# Warmup Iteration  29: 1816502.448 ops/s
# Warmup Iteration  30: 1805740.081 ops/s
Iteration   1: 1812261.122 ops/s
Iteration   2: 1813139.824 ops/s
Iteration   3: 1811638.821 ops/s
Iteration   4: 1809813.242 ops/s
Iteration   5: 1814303.235 ops/s
Iteration   6: 1811690.408 ops/s
Iteration   7: 1801429.855 ops/s
Iteration   8: 1816448.733 ops/s
Iteration   9: 1811271.707 ops/s
Iteration  10: 1813265.365 ops/s
Iteration  11: 1814551.920 ops/s
Iteration  12: 1812250.856 ops/s
Iteration  13: 1810501.301 ops/s
Iteration  14: 1811068.105 ops/s
Iteration  15: 1813907.176 ops/s
Iteration  16: 1808204.071 ops/s
Iteration  17: 1808403.042 ops/s
Iteration  18: 1816225.649 ops/s
Iteration  19: 1822761.036 ops/s
Iteration  20: 1806485.465 ops/s
Iteration  21: 1813494.331 ops/s
Iteration  22: 1813780.684 ops/s
Iteration  23: 1807757.644 ops/s
Iteration  24: 1811935.658 ops/s
Iteration  25: 1808573.445 ops/s
Iteration  26: 1820218.314 ops/s
Iteration  27: 1804871.130 ops/s
Iteration  28: 1814378.444 ops/s
Iteration  29: 1816229.234 ops/s
Iteration  30: 1811448.601 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_selectAndRejectWith":
  1812076.947 ±(99.9%) 2848.781 ops/s [Average]
  (min, avg, max) = (1801429.855, 1812076.947, 1822761.036), stdev = 4263.922
  CI (99.9%): [1809228.166, 1814925.728] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_selectAndRejectWith  thrpt   30  1812076.947 ± 2848.781  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_selectByOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_selectByOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 251809.051 ops/s
# Warmup Iteration   2: 405564.563 ops/s
# Warmup Iteration   3: 497186.478 ops/s
# Warmup Iteration   4: 494757.739 ops/s
# Warmup Iteration   5: 499076.450 ops/s
# Warmup Iteration   6: 497292.821 ops/s
# Warmup Iteration   7: 419642.787 ops/s
# Warmup Iteration   8: 498592.568 ops/s
# Warmup Iteration   9: 497958.156 ops/s
# Warmup Iteration  10: 498278.924 ops/s
# Warmup Iteration  11: 498137.521 ops/s
# Warmup Iteration  12: 497185.233 ops/s
# Warmup Iteration  13: 498277.949 ops/s
# Warmup Iteration  14: 498156.535 ops/s
# Warmup Iteration  15: 497824.945 ops/s
# Warmup Iteration  16: 497568.143 ops/s
# Warmup Iteration  17: 497671.300 ops/s
# Warmup Iteration  18: 498260.032 ops/s
# Warmup Iteration  19: 498058.987 ops/s
# Warmup Iteration  20: 497607.384 ops/s
# Warmup Iteration  21: 497818.159 ops/s
# Warmup Iteration  22: 497593.448 ops/s
# Warmup Iteration  23: 498037.531 ops/s
# Warmup Iteration  24: 496738.906 ops/s
# Warmup Iteration  25: 499577.278 ops/s
# Warmup Iteration  26: 498810.349 ops/s
# Warmup Iteration  27: 497560.936 ops/s
# Warmup Iteration  28: 498059.914 ops/s
# Warmup Iteration  29: 497204.620 ops/s
# Warmup Iteration  30: 497657.362 ops/s
Iteration   1: 498221.216 ops/s
Iteration   2: 497604.429 ops/s
Iteration   3: 498636.493 ops/s
Iteration   4: 498598.081 ops/s
Iteration   5: 499096.363 ops/s
Iteration   6: 497790.409 ops/s
Iteration   7: 496539.049 ops/s
Iteration   8: 497876.038 ops/s
Iteration   9: 498032.849 ops/s
Iteration  10: 498408.564 ops/s
Iteration  11: 498188.500 ops/s
Iteration  12: 498077.343 ops/s
Iteration  13: 495136.761 ops/s
Iteration  14: 499418.579 ops/s
Iteration  15: 497456.136 ops/s
Iteration  16: 498345.128 ops/s
Iteration  17: 497882.923 ops/s
Iteration  18: 498781.951 ops/s
Iteration  19: 498885.655 ops/s
Iteration  20: 496381.263 ops/s
Iteration  21: 497867.904 ops/s
Iteration  22: 496117.847 ops/s
Iteration  23: 498313.901 ops/s
Iteration  24: 497357.466 ops/s
Iteration  25: 499457.380 ops/s
Iteration  26: 497179.216 ops/s
Iteration  27: 498168.098 ops/s
Iteration  28: 498817.027 ops/s
Iteration  29: 497519.830 ops/s
Iteration  30: 498188.914 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_selectByOccurrences":
  497944.844 ±(99.9%) 644.286 ops/s [Average]
  (min, avg, max) = (495136.761, 497944.844, 499457.380), stdev = 964.337
  CI (99.9%): [497300.558, 498589.130] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_selectByOccurrences  thrpt   30  497944.844 ± 644.286  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_selectDuplicates$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_selectDuplicates

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 351239.050 ops/s
# Warmup Iteration   2: 602193.592 ops/s
# Warmup Iteration   3: 700107.143 ops/s
# Warmup Iteration   4: 705920.997 ops/s
# Warmup Iteration   5: 703583.265 ops/s
# Warmup Iteration   6: 609592.003 ops/s
# Warmup Iteration   7: 687886.067 ops/s
# Warmup Iteration   8: 703979.543 ops/s
# Warmup Iteration   9: 704586.331 ops/s
# Warmup Iteration  10: 704080.767 ops/s
# Warmup Iteration  11: 705612.980 ops/s
# Warmup Iteration  12: 704973.183 ops/s
# Warmup Iteration  13: 704273.523 ops/s
# Warmup Iteration  14: 704754.848 ops/s
# Warmup Iteration  15: 703795.022 ops/s
# Warmup Iteration  16: 702167.733 ops/s
# Warmup Iteration  17: 701860.750 ops/s
# Warmup Iteration  18: 703249.727 ops/s
# Warmup Iteration  19: 705202.414 ops/s
# Warmup Iteration  20: 704457.574 ops/s
# Warmup Iteration  21: 703656.530 ops/s
# Warmup Iteration  22: 706123.820 ops/s
# Warmup Iteration  23: 704572.459 ops/s
# Warmup Iteration  24: 703528.660 ops/s
# Warmup Iteration  25: 704221.891 ops/s
# Warmup Iteration  26: 704174.817 ops/s
# Warmup Iteration  27: 704882.641 ops/s
# Warmup Iteration  28: 704732.645 ops/s
# Warmup Iteration  29: 705511.051 ops/s
# Warmup Iteration  30: 705520.773 ops/s
Iteration   1: 704811.390 ops/s
Iteration   2: 704857.421 ops/s
Iteration   3: 700852.521 ops/s
Iteration   4: 706407.337 ops/s
Iteration   5: 702025.686 ops/s
Iteration   6: 705026.927 ops/s
Iteration   7: 705023.131 ops/s
Iteration   8: 705949.726 ops/s
Iteration   9: 705327.234 ops/s
Iteration  10: 705697.710 ops/s
Iteration  11: 704466.096 ops/s
Iteration  12: 706381.504 ops/s
Iteration  13: 705338.181 ops/s
Iteration  14: 702655.577 ops/s
Iteration  15: 702983.935 ops/s
Iteration  16: 701979.495 ops/s
Iteration  17: 704693.778 ops/s
Iteration  18: 705164.655 ops/s
Iteration  19: 704498.589 ops/s
Iteration  20: 705711.065 ops/s
Iteration  21: 705633.834 ops/s
Iteration  22: 704700.344 ops/s
Iteration  23: 706319.288 ops/s
Iteration  24: 702481.125 ops/s
Iteration  25: 705847.511 ops/s
Iteration  26: 698588.504 ops/s
Iteration  27: 705487.362 ops/s
Iteration  28: 702747.899 ops/s
Iteration  29: 705709.166 ops/s
Iteration  30: 702059.622 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_selectDuplicates":
  704314.221 ±(99.9%) 1254.250 ops/s [Average]
  (min, avg, max) = (698588.504, 704314.221, 706407.337), stdev = 1877.303
  CI (99.9%): [703059.970, 705568.471] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_selectDuplicates  thrpt   30  704314.221 ± 1254.250  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 450055.764 ops/s
# Warmup Iteration   2: 815001.603 ops/s
# Warmup Iteration   3: 920562.112 ops/s
# Warmup Iteration   4: 929395.807 ops/s
# Warmup Iteration   5: 926694.789 ops/s
# Warmup Iteration   6: 776199.538 ops/s
# Warmup Iteration   7: 928816.204 ops/s
# Warmup Iteration   8: 927255.630 ops/s
# Warmup Iteration   9: 928834.452 ops/s
# Warmup Iteration  10: 927463.227 ops/s
# Warmup Iteration  11: 928296.098 ops/s
# Warmup Iteration  12: 929277.409 ops/s
# Warmup Iteration  13: 929846.603 ops/s
# Warmup Iteration  14: 928347.764 ops/s
# Warmup Iteration  15: 928056.235 ops/s
# Warmup Iteration  16: 924961.005 ops/s
# Warmup Iteration  17: 925814.241 ops/s
# Warmup Iteration  18: 928366.485 ops/s
# Warmup Iteration  19: 927533.176 ops/s
# Warmup Iteration  20: 926174.880 ops/s
# Warmup Iteration  21: 927830.340 ops/s
# Warmup Iteration  22: 926656.160 ops/s
# Warmup Iteration  23: 928668.292 ops/s
# Warmup Iteration  24: 924793.706 ops/s
# Warmup Iteration  25: 928879.385 ops/s
# Warmup Iteration  26: 925504.294 ops/s
# Warmup Iteration  27: 925907.341 ops/s
# Warmup Iteration  28: 926755.399 ops/s
# Warmup Iteration  29: 928162.272 ops/s
# Warmup Iteration  30: 928361.579 ops/s
Iteration   1: 926758.732 ops/s
Iteration   2: 929813.248 ops/s
Iteration   3: 927664.659 ops/s
Iteration   4: 925041.646 ops/s
Iteration   5: 924785.661 ops/s
Iteration   6: 931316.529 ops/s
Iteration   7: 926574.159 ops/s
Iteration   8: 926716.924 ops/s
Iteration   9: 931230.869 ops/s
Iteration  10: 929713.247 ops/s
Iteration  11: 928094.980 ops/s
Iteration  12: 924807.622 ops/s
Iteration  13: 928297.740 ops/s
Iteration  14: 927777.064 ops/s
Iteration  15: 928314.022 ops/s
Iteration  16: 928532.850 ops/s
Iteration  17: 930257.264 ops/s
Iteration  18: 926513.589 ops/s
Iteration  19: 927257.461 ops/s
Iteration  20: 928928.687 ops/s
Iteration  21: 921196.477 ops/s
Iteration  22: 928824.454 ops/s
Iteration  23: 925931.474 ops/s
Iteration  24: 927672.047 ops/s
Iteration  25: 930998.896 ops/s
Iteration  26: 927097.089 ops/s
Iteration  27: 925827.962 ops/s
Iteration  28: 930683.261 ops/s
Iteration  29: 928133.645 ops/s
Iteration  30: 929246.698 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_selectInstancesOf":
  927800.299 ±(99.9%) 1493.806 ops/s [Average]
  (min, avg, max) = (921196.477, 927800.299, 931316.529), stdev = 2235.859
  CI (99.9%): [926306.492, 929294.105] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  927800.299 ± 1493.806  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_selectUnique$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_selectUnique

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 412001.766 ops/s
# Warmup Iteration   2: 711632.270 ops/s
# Warmup Iteration   3: 838336.002 ops/s
# Warmup Iteration   4: 847121.257 ops/s
# Warmup Iteration   5: 845398.366 ops/s
# Warmup Iteration   6: 703634.043 ops/s
# Warmup Iteration   7: 846059.272 ops/s
# Warmup Iteration   8: 847376.422 ops/s
# Warmup Iteration   9: 849623.979 ops/s
# Warmup Iteration  10: 846163.880 ops/s
# Warmup Iteration  11: 844763.676 ops/s
# Warmup Iteration  12: 846034.348 ops/s
# Warmup Iteration  13: 846256.377 ops/s
# Warmup Iteration  14: 847505.847 ops/s
# Warmup Iteration  15: 845789.921 ops/s
# Warmup Iteration  16: 846235.332 ops/s
# Warmup Iteration  17: 846207.896 ops/s
# Warmup Iteration  18: 843537.692 ops/s
# Warmup Iteration  19: 846092.470 ops/s
# Warmup Iteration  20: 848485.085 ops/s
# Warmup Iteration  21: 847003.605 ops/s
# Warmup Iteration  22: 843809.931 ops/s
# Warmup Iteration  23: 845491.059 ops/s
# Warmup Iteration  24: 846151.885 ops/s
# Warmup Iteration  25: 845552.420 ops/s
# Warmup Iteration  26: 845944.045 ops/s
# Warmup Iteration  27: 847657.375 ops/s
# Warmup Iteration  28: 849156.905 ops/s
# Warmup Iteration  29: 846880.128 ops/s
# Warmup Iteration  30: 847860.640 ops/s
Iteration   1: 845667.771 ops/s
Iteration   2: 844872.559 ops/s
Iteration   3: 845746.835 ops/s
Iteration   4: 847627.448 ops/s
Iteration   5: 849866.561 ops/s
Iteration   6: 849274.385 ops/s
Iteration   7: 848051.839 ops/s
Iteration   8: 844568.030 ops/s
Iteration   9: 843888.671 ops/s
Iteration  10: 848467.795 ops/s
Iteration  11: 845359.368 ops/s
Iteration  12: 848333.366 ops/s
Iteration  13: 841198.586 ops/s
Iteration  14: 846346.916 ops/s
Iteration  15: 844778.635 ops/s
Iteration  16: 846755.302 ops/s
Iteration  17: 842378.630 ops/s
Iteration  18: 849783.880 ops/s
Iteration  19: 844561.934 ops/s
Iteration  20: 846692.857 ops/s
Iteration  21: 847297.042 ops/s
Iteration  22: 845344.264 ops/s
Iteration  23: 847664.856 ops/s
Iteration  24: 842476.728 ops/s
Iteration  25: 847608.269 ops/s
Iteration  26: 847459.084 ops/s
Iteration  27: 849670.004 ops/s
Iteration  28: 840205.314 ops/s
Iteration  29: 846166.799 ops/s
Iteration  30: 848429.852 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_selectUnique":
  846218.119 ±(99.9%) 1670.101 ops/s [Average]
  (min, avg, max) = (840205.314, 846218.119, 849866.561), stdev = 2499.729
  CI (99.9%): [844548.018, 847888.220] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_selectUnique  thrpt   30  846218.119 ± 1670.101  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 171021.082 ops/s
# Warmup Iteration   2: 374926.023 ops/s
# Warmup Iteration   3: 425706.207 ops/s
# Warmup Iteration   4: 426897.273 ops/s
# Warmup Iteration   5: 377665.921 ops/s
# Warmup Iteration   6: 410236.179 ops/s
# Warmup Iteration   7: 426992.329 ops/s
# Warmup Iteration   8: 427786.792 ops/s
# Warmup Iteration   9: 429084.592 ops/s
# Warmup Iteration  10: 428500.429 ops/s
# Warmup Iteration  11: 429736.585 ops/s
# Warmup Iteration  12: 428225.243 ops/s
# Warmup Iteration  13: 427438.535 ops/s
# Warmup Iteration  14: 428221.499 ops/s
# Warmup Iteration  15: 428666.013 ops/s
# Warmup Iteration  16: 428474.858 ops/s
# Warmup Iteration  17: 428322.525 ops/s
# Warmup Iteration  18: 428731.591 ops/s
# Warmup Iteration  19: 428534.589 ops/s
# Warmup Iteration  20: 428247.576 ops/s
# Warmup Iteration  21: 428314.858 ops/s
# Warmup Iteration  22: 428535.811 ops/s
# Warmup Iteration  23: 428887.535 ops/s
# Warmup Iteration  24: 426774.353 ops/s
# Warmup Iteration  25: 428450.628 ops/s
# Warmup Iteration  26: 428146.343 ops/s
# Warmup Iteration  27: 427301.938 ops/s
# Warmup Iteration  28: 428000.765 ops/s
# Warmup Iteration  29: 427877.290 ops/s
# Warmup Iteration  30: 425435.357 ops/s
Iteration   1: 427902.830 ops/s
Iteration   2: 427141.646 ops/s
Iteration   3: 428150.409 ops/s
Iteration   4: 428717.498 ops/s
Iteration   5: 428560.448 ops/s
Iteration   6: 428328.301 ops/s
Iteration   7: 429547.144 ops/s
Iteration   8: 428824.642 ops/s
Iteration   9: 429871.948 ops/s
Iteration  10: 429349.193 ops/s
Iteration  11: 426865.260 ops/s
Iteration  12: 428987.210 ops/s
Iteration  13: 427649.781 ops/s
Iteration  14: 428113.476 ops/s
Iteration  15: 429766.207 ops/s
Iteration  16: 428531.117 ops/s
Iteration  17: 428867.151 ops/s
Iteration  18: 428311.164 ops/s
Iteration  19: 429107.873 ops/s
Iteration  20: 428439.403 ops/s
Iteration  21: 429210.486 ops/s
Iteration  22: 428872.646 ops/s
Iteration  23: 430353.906 ops/s
Iteration  24: 430054.598 ops/s
Iteration  25: 428820.402 ops/s
Iteration  26: 428766.153 ops/s
Iteration  27: 428438.694 ops/s
Iteration  28: 430512.724 ops/s
Iteration  29: 427443.829 ops/s
Iteration  30: 427241.749 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_selectWith":
  428691.596 ±(99.9%) 613.625 ops/s [Average]
  (min, avg, max) = (426865.260, 428691.596, 430512.724), stdev = 918.445
  CI (99.9%): [428077.971, 429305.221] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_selectWith  thrpt   30  428691.596 ± 613.625  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 153436.182 ops/s
# Warmup Iteration   2: 288589.793 ops/s
# Warmup Iteration   3: 339487.275 ops/s
# Warmup Iteration   4: 340406.250 ops/s
# Warmup Iteration   5: 340521.242 ops/s
# Warmup Iteration   6: 285420.609 ops/s
# Warmup Iteration   7: 341539.569 ops/s
# Warmup Iteration   8: 341670.572 ops/s
# Warmup Iteration   9: 341760.520 ops/s
# Warmup Iteration  10: 341421.932 ops/s
# Warmup Iteration  11: 342117.469 ops/s
# Warmup Iteration  12: 341474.710 ops/s
# Warmup Iteration  13: 341307.043 ops/s
# Warmup Iteration  14: 341394.911 ops/s
# Warmup Iteration  15: 341300.702 ops/s
# Warmup Iteration  16: 341623.282 ops/s
# Warmup Iteration  17: 341392.878 ops/s
# Warmup Iteration  18: 341427.192 ops/s
# Warmup Iteration  19: 341240.439 ops/s
# Warmup Iteration  20: 340706.528 ops/s
# Warmup Iteration  21: 341274.451 ops/s
# Warmup Iteration  22: 341299.011 ops/s
# Warmup Iteration  23: 341951.796 ops/s
# Warmup Iteration  24: 340976.917 ops/s
# Warmup Iteration  25: 340905.284 ops/s
# Warmup Iteration  26: 341606.576 ops/s
# Warmup Iteration  27: 340791.716 ops/s
# Warmup Iteration  28: 341721.188 ops/s
# Warmup Iteration  29: 341101.364 ops/s
# Warmup Iteration  30: 341372.161 ops/s
Iteration   1: 341312.351 ops/s
Iteration   2: 340965.127 ops/s
Iteration   3: 341203.447 ops/s
Iteration   4: 340720.752 ops/s
Iteration   5: 341782.158 ops/s
Iteration   6: 341157.123 ops/s
Iteration   7: 340575.111 ops/s
Iteration   8: 341964.012 ops/s
Iteration   9: 340668.378 ops/s
Iteration  10: 341899.369 ops/s
Iteration  11: 340770.171 ops/s
Iteration  12: 341687.653 ops/s
Iteration  13: 340882.684 ops/s
Iteration  14: 341090.257 ops/s
Iteration  15: 341312.134 ops/s
Iteration  16: 340701.866 ops/s
Iteration  17: 341144.487 ops/s
Iteration  18: 340387.477 ops/s
Iteration  19: 341222.637 ops/s
Iteration  20: 339849.114 ops/s
Iteration  21: 341588.127 ops/s
Iteration  22: 340850.896 ops/s
Iteration  23: 340786.863 ops/s
Iteration  24: 341848.494 ops/s
Iteration  25: 340647.668 ops/s
Iteration  26: 340802.026 ops/s
Iteration  27: 340259.353 ops/s
Iteration  28: 341402.648 ops/s
Iteration  29: 339782.145 ops/s
Iteration  30: 341172.470 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_selectWith_target":
  341014.567 ±(99.9%) 370.153 ops/s [Average]
  (min, avg, max) = (339782.145, 341014.567, 341964.012), stdev = 554.027
  CI (99.9%): [340644.414, 341384.719] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_selectWith_target  thrpt   30  341014.567 ± 370.153  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 45000.866 ops/s
# Warmup Iteration   2: 64630.855 ops/s
# Warmup Iteration   3: 93690.963 ops/s
# Warmup Iteration   4: 93505.507 ops/s
# Warmup Iteration   5: 92934.128 ops/s
# Warmup Iteration   6: 93222.897 ops/s
# Warmup Iteration   7: 93321.307 ops/s
# Warmup Iteration   8: 93196.643 ops/s
# Warmup Iteration   9: 79625.240 ops/s
# Warmup Iteration  10: 93512.182 ops/s
# Warmup Iteration  11: 93482.972 ops/s
# Warmup Iteration  12: 93563.360 ops/s
# Warmup Iteration  13: 93706.844 ops/s
# Warmup Iteration  14: 93502.577 ops/s
# Warmup Iteration  15: 93267.212 ops/s
# Warmup Iteration  16: 93388.439 ops/s
# Warmup Iteration  17: 93597.483 ops/s
# Warmup Iteration  18: 93267.184 ops/s
# Warmup Iteration  19: 93594.992 ops/s
# Warmup Iteration  20: 93482.107 ops/s
# Warmup Iteration  21: 93483.172 ops/s
# Warmup Iteration  22: 93620.618 ops/s
# Warmup Iteration  23: 93050.042 ops/s
# Warmup Iteration  24: 93506.909 ops/s
# Warmup Iteration  25: 93369.533 ops/s
# Warmup Iteration  26: 93255.265 ops/s
# Warmup Iteration  27: 93150.790 ops/s
# Warmup Iteration  28: 93459.757 ops/s
# Warmup Iteration  29: 93615.007 ops/s
# Warmup Iteration  30: 93389.161 ops/s
Iteration   1: 93773.924 ops/s
Iteration   2: 93185.784 ops/s
Iteration   3: 93385.586 ops/s
Iteration   4: 93465.304 ops/s
Iteration   5: 93277.653 ops/s
Iteration   6: 93622.378 ops/s
Iteration   7: 93612.704 ops/s
Iteration   8: 93424.394 ops/s
Iteration   9: 93121.920 ops/s
Iteration  10: 92943.563 ops/s
Iteration  11: 93446.256 ops/s
Iteration  12: 93639.302 ops/s
Iteration  13: 93177.968 ops/s
Iteration  14: 93064.863 ops/s
Iteration  15: 93839.586 ops/s
Iteration  16: 94339.791 ops/s
Iteration  17: 93880.175 ops/s
Iteration  18: 93976.662 ops/s
Iteration  19: 94273.102 ops/s
Iteration  20: 93555.258 ops/s
Iteration  21: 94354.263 ops/s
Iteration  22: 94052.731 ops/s
Iteration  23: 94086.076 ops/s
Iteration  24: 94293.590 ops/s
Iteration  25: 94375.445 ops/s
Iteration  26: 94615.166 ops/s
Iteration  27: 94269.561 ops/s
Iteration  28: 94413.232 ops/s
Iteration  29: 94284.259 ops/s
Iteration  30: 94618.930 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_serialization":
  93812.314 ±(99.9%) 333.306 ops/s [Average]
  (min, avg, max) = (92943.563, 93812.314, 94618.930), stdev = 498.877
  CI (99.9%): [93479.008, 94145.621] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt      Score     Error  Units
TreeBagTest._Benchmark.benchmark_serialization  thrpt   30  93812.314 ± 333.306  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_setOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_setOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 145130.316 ops/s
# Warmup Iteration   2: 276660.382 ops/s
# Warmup Iteration   3: 305614.445 ops/s
# Warmup Iteration   4: 306336.477 ops/s
# Warmup Iteration   5: 292778.372 ops/s
# Warmup Iteration   6: 274217.744 ops/s
# Warmup Iteration   7: 306791.949 ops/s
# Warmup Iteration   8: 306691.941 ops/s
# Warmup Iteration   9: 306459.188 ops/s
# Warmup Iteration  10: 306467.556 ops/s
# Warmup Iteration  11: 306179.109 ops/s
# Warmup Iteration  12: 306824.921 ops/s
# Warmup Iteration  13: 306636.465 ops/s
# Warmup Iteration  14: 306452.918 ops/s
# Warmup Iteration  15: 306419.482 ops/s
# Warmup Iteration  16: 306350.716 ops/s
# Warmup Iteration  17: 306228.635 ops/s
# Warmup Iteration  18: 305417.140 ops/s
# Warmup Iteration  19: 306137.385 ops/s
# Warmup Iteration  20: 306391.672 ops/s
# Warmup Iteration  21: 305483.073 ops/s
# Warmup Iteration  22: 305840.337 ops/s
# Warmup Iteration  23: 306229.560 ops/s
# Warmup Iteration  24: 306723.713 ops/s
# Warmup Iteration  25: 306065.562 ops/s
# Warmup Iteration  26: 306229.656 ops/s
# Warmup Iteration  27: 306281.780 ops/s
# Warmup Iteration  28: 306160.757 ops/s
# Warmup Iteration  29: 306473.156 ops/s
# Warmup Iteration  30: 306568.386 ops/s
Iteration   1: 305592.990 ops/s
Iteration   2: 305966.855 ops/s
Iteration   3: 306653.070 ops/s
Iteration   4: 306581.225 ops/s
Iteration   5: 307220.149 ops/s
Iteration   6: 306359.539 ops/s
Iteration   7: 305720.403 ops/s
Iteration   8: 306146.484 ops/s
Iteration   9: 306078.938 ops/s
Iteration  10: 306113.213 ops/s
Iteration  11: 306346.541 ops/s
Iteration  12: 306356.367 ops/s
Iteration  13: 306577.524 ops/s
Iteration  14: 306002.189 ops/s
Iteration  15: 305901.471 ops/s
Iteration  16: 306762.714 ops/s
Iteration  17: 306162.865 ops/s
Iteration  18: 307210.869 ops/s
Iteration  19: 306096.679 ops/s
Iteration  20: 305912.292 ops/s
Iteration  21: 306473.243 ops/s
Iteration  22: 306044.343 ops/s
Iteration  23: 305669.331 ops/s
Iteration  24: 306993.984 ops/s
Iteration  25: 305912.718 ops/s
Iteration  26: 306639.215 ops/s
Iteration  27: 305932.772 ops/s
Iteration  28: 305123.786 ops/s
Iteration  29: 306385.150 ops/s
Iteration  30: 305609.397 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_setOccurrences":
  306218.211 ±(99.9%) 321.945 ops/s [Average]
  (min, avg, max) = (305123.786, 306218.211, 307220.149), stdev = 481.872
  CI (99.9%): [305896.266, 306540.155] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_setOccurrences  thrpt   30  306218.211 ± 321.945  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_setOccurrences_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_setOccurrences_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 713711.990 ops/s
# Warmup Iteration   2: 755894.983 ops/s
# Warmup Iteration   3: 944895.472 ops/s
# Warmup Iteration   4: 975931.313 ops/s
# Warmup Iteration   5: 975585.554 ops/s
# Warmup Iteration   6: 971037.992 ops/s
# Warmup Iteration   7: 976109.616 ops/s
# Warmup Iteration   8: 978281.076 ops/s
# Warmup Iteration   9: 975314.788 ops/s
# Warmup Iteration  10: 975770.990 ops/s
# Warmup Iteration  11: 977330.456 ops/s
# Warmup Iteration  12: 968171.978 ops/s
# Warmup Iteration  13: 829665.421 ops/s
# Warmup Iteration  14: 976181.342 ops/s
# Warmup Iteration  15: 975656.924 ops/s
# Warmup Iteration  16: 975562.135 ops/s
# Warmup Iteration  17: 1035356.682 ops/s
# Warmup Iteration  18: 1033418.426 ops/s
# Warmup Iteration  19: 1030561.200 ops/s
# Warmup Iteration  20: 1033157.997 ops/s
# Warmup Iteration  21: 1033310.703 ops/s
# Warmup Iteration  22: 1032078.582 ops/s
# Warmup Iteration  23: 1033853.002 ops/s
# Warmup Iteration  24: 1032216.182 ops/s
# Warmup Iteration  25: 1034531.666 ops/s
# Warmup Iteration  26: 1035219.100 ops/s
# Warmup Iteration  27: 1033457.322 ops/s
# Warmup Iteration  28: 1032912.238 ops/s
# Warmup Iteration  29: 1035150.730 ops/s
# Warmup Iteration  30: 1029406.759 ops/s
Iteration   1: 1036763.293 ops/s
Iteration   2: 1032709.861 ops/s
Iteration   3: 1034040.180 ops/s
Iteration   4: 1035085.954 ops/s
Iteration   5: 1036108.761 ops/s
Iteration   6: 1030021.123 ops/s
Iteration   7: 1035756.827 ops/s
Iteration   8: 1036978.431 ops/s
Iteration   9: 1031566.250 ops/s
Iteration  10: 1035719.329 ops/s
Iteration  11: 1035271.749 ops/s
Iteration  12: 1028506.237 ops/s
Iteration  13: 1032046.278 ops/s
Iteration  14: 1029393.810 ops/s
Iteration  15: 1034885.294 ops/s
Iteration  16: 1028074.134 ops/s
Iteration  17: 1035811.717 ops/s
Iteration  18: 1035767.459 ops/s
Iteration  19: 1028720.017 ops/s
Iteration  20: 1033364.471 ops/s
Iteration  21: 1034868.847 ops/s
Iteration  22: 1033049.291 ops/s
Iteration  23: 1032673.261 ops/s
Iteration  24: 1031328.376 ops/s
Iteration  25: 1032404.021 ops/s
Iteration  26: 1035710.311 ops/s
Iteration  27: 1033021.750 ops/s
Iteration  28: 1029986.754 ops/s
Iteration  29: 1035606.087 ops/s
Iteration  30: 1034259.096 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_setOccurrences_throws":
  1033316.632 ±(99.9%) 1757.819 ops/s [Average]
  (min, avg, max) = (1028074.134, 1033316.632, 1036978.431), stdev = 2631.021
  CI (99.9%): [1031558.813, 1035074.451] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_setOccurrences_throws  thrpt   30  1033316.632 ± 1757.819  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sortedBagConstructor$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sortedBagConstructor

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 322511.103 ops/s
# Warmup Iteration   2: 571110.491 ops/s
# Warmup Iteration   3: 645388.053 ops/s
# Warmup Iteration   4: 648086.037 ops/s
# Warmup Iteration   5: 651085.879 ops/s
# Warmup Iteration   6: 546289.514 ops/s
# Warmup Iteration   7: 651302.417 ops/s
# Warmup Iteration   8: 648362.879 ops/s
# Warmup Iteration   9: 649825.206 ops/s
# Warmup Iteration  10: 651181.077 ops/s
# Warmup Iteration  11: 651710.502 ops/s
# Warmup Iteration  12: 649707.218 ops/s
# Warmup Iteration  13: 650172.125 ops/s
# Warmup Iteration  14: 650473.923 ops/s
# Warmup Iteration  15: 649195.178 ops/s
# Warmup Iteration  16: 651088.821 ops/s
# Warmup Iteration  17: 650995.595 ops/s
# Warmup Iteration  18: 650560.125 ops/s
# Warmup Iteration  19: 650585.257 ops/s
# Warmup Iteration  20: 651225.901 ops/s
# Warmup Iteration  21: 649822.019 ops/s
# Warmup Iteration  22: 650660.341 ops/s
# Warmup Iteration  23: 652127.760 ops/s
# Warmup Iteration  24: 649770.487 ops/s
# Warmup Iteration  25: 651999.231 ops/s
# Warmup Iteration  26: 649792.412 ops/s
# Warmup Iteration  27: 649868.289 ops/s
# Warmup Iteration  28: 649954.699 ops/s
# Warmup Iteration  29: 651284.112 ops/s
# Warmup Iteration  30: 651943.000 ops/s
Iteration   1: 650525.595 ops/s
Iteration   2: 650948.885 ops/s
Iteration   3: 652777.020 ops/s
Iteration   4: 650553.591 ops/s
Iteration   5: 651649.632 ops/s
Iteration   6: 650972.553 ops/s
Iteration   7: 652826.981 ops/s
Iteration   8: 650579.061 ops/s
Iteration   9: 652038.437 ops/s
Iteration  10: 649089.610 ops/s
Iteration  11: 651085.982 ops/s
Iteration  12: 651606.150 ops/s
Iteration  13: 650988.095 ops/s
Iteration  14: 652876.826 ops/s
Iteration  15: 651730.198 ops/s
Iteration  16: 655901.094 ops/s
Iteration  17: 651944.790 ops/s
Iteration  18: 655011.763 ops/s
Iteration  19: 654745.048 ops/s
Iteration  20: 654504.542 ops/s
Iteration  21: 654499.794 ops/s
Iteration  22: 654657.264 ops/s
Iteration  23: 653795.679 ops/s
Iteration  24: 652960.439 ops/s
Iteration  25: 653883.748 ops/s
Iteration  26: 653091.034 ops/s
Iteration  27: 654634.485 ops/s
Iteration  28: 651455.218 ops/s
Iteration  29: 653297.022 ops/s
Iteration  30: 654783.337 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sortedBagConstructor":
  652647.129 ±(99.9%) 1147.745 ops/s [Average]
  (min, avg, max) = (649089.610, 652647.129, 655901.094), stdev = 1717.890
  CI (99.9%): [651499.385, 653794.874] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_sortedBagConstructor  thrpt   30  652647.129 ± 1147.745  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sortedBagIterableConstructor$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sortedBagIterableConstructor

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 241311.053 ops/s
# Warmup Iteration   2: 346643.452 ops/s
# Warmup Iteration   3: 430959.939 ops/s
# Warmup Iteration   4: 430491.186 ops/s
# Warmup Iteration   5: 433083.995 ops/s
# Warmup Iteration   6: 432868.014 ops/s
# Warmup Iteration   7: 431758.469 ops/s
# Warmup Iteration   8: 364093.887 ops/s
# Warmup Iteration   9: 432933.523 ops/s
# Warmup Iteration  10: 432918.468 ops/s
# Warmup Iteration  11: 431946.398 ops/s
# Warmup Iteration  12: 432495.682 ops/s
# Warmup Iteration  13: 432989.982 ops/s
# Warmup Iteration  14: 432147.285 ops/s
# Warmup Iteration  15: 432283.974 ops/s
# Warmup Iteration  16: 432674.723 ops/s
# Warmup Iteration  17: 433083.570 ops/s
# Warmup Iteration  18: 431067.818 ops/s
# Warmup Iteration  19: 430675.308 ops/s
# Warmup Iteration  20: 432697.866 ops/s
# Warmup Iteration  21: 433071.985 ops/s
# Warmup Iteration  22: 431917.543 ops/s
# Warmup Iteration  23: 432677.135 ops/s
# Warmup Iteration  24: 432453.098 ops/s
# Warmup Iteration  25: 432296.614 ops/s
# Warmup Iteration  26: 432420.874 ops/s
# Warmup Iteration  27: 432518.167 ops/s
# Warmup Iteration  28: 432175.745 ops/s
# Warmup Iteration  29: 431158.087 ops/s
# Warmup Iteration  30: 433412.023 ops/s
Iteration   1: 432380.917 ops/s
Iteration   2: 432273.636 ops/s
Iteration   3: 432244.944 ops/s
Iteration   4: 432969.507 ops/s
Iteration   5: 431765.893 ops/s
Iteration   6: 431731.561 ops/s
Iteration   7: 432920.063 ops/s
Iteration   8: 433447.049 ops/s
Iteration   9: 431464.592 ops/s
Iteration  10: 432881.880 ops/s
Iteration  11: 431769.005 ops/s
Iteration  12: 432085.173 ops/s
Iteration  13: 433365.564 ops/s
Iteration  14: 430787.014 ops/s
Iteration  15: 432887.603 ops/s
Iteration  16: 432461.975 ops/s
Iteration  17: 431624.986 ops/s
Iteration  18: 431885.103 ops/s
Iteration  19: 431717.870 ops/s
Iteration  20: 433664.390 ops/s
Iteration  21: 433423.739 ops/s
Iteration  22: 432303.132 ops/s
Iteration  23: 433282.942 ops/s
Iteration  24: 433086.775 ops/s
Iteration  25: 431653.829 ops/s
Iteration  26: 433533.019 ops/s
Iteration  27: 431589.419 ops/s
Iteration  28: 433029.045 ops/s
Iteration  29: 432691.987 ops/s
Iteration  30: 431015.883 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sortedBagIterableConstructor":
  432397.950 ±(99.9%) 527.724 ops/s [Average]
  (min, avg, max) = (430787.014, 432397.950, 433664.390), stdev = 789.873
  CI (99.9%): [431870.226, 432925.674] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_sortedBagIterableConstructor  thrpt   30  432397.950 ± 527.724  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 505595.482 ops/s
# Warmup Iteration   2: 650905.500 ops/s
# Warmup Iteration   3: 828078.004 ops/s
# Warmup Iteration   4: 823523.068 ops/s
# Warmup Iteration   5: 828263.789 ops/s
# Warmup Iteration   6: 826609.533 ops/s
# Warmup Iteration   7: 826959.362 ops/s
# Warmup Iteration   8: 820152.162 ops/s
# Warmup Iteration   9: 699596.761 ops/s
# Warmup Iteration  10: 827292.314 ops/s
# Warmup Iteration  11: 828327.684 ops/s
# Warmup Iteration  12: 825517.304 ops/s
# Warmup Iteration  13: 827209.355 ops/s
# Warmup Iteration  14: 828115.059 ops/s
# Warmup Iteration  15: 826497.772 ops/s
# Warmup Iteration  16: 825992.616 ops/s
# Warmup Iteration  17: 829293.994 ops/s
# Warmup Iteration  18: 830566.663 ops/s
# Warmup Iteration  19: 829217.201 ops/s
# Warmup Iteration  20: 828388.045 ops/s
# Warmup Iteration  21: 828870.758 ops/s
# Warmup Iteration  22: 828672.883 ops/s
# Warmup Iteration  23: 829288.627 ops/s
# Warmup Iteration  24: 829335.405 ops/s
# Warmup Iteration  25: 828869.180 ops/s
# Warmup Iteration  26: 828445.510 ops/s
# Warmup Iteration  27: 828619.773 ops/s
# Warmup Iteration  28: 828473.664 ops/s
# Warmup Iteration  29: 827207.438 ops/s
# Warmup Iteration  30: 827887.419 ops/s
Iteration   1: 828808.970 ops/s
Iteration   2: 829305.824 ops/s
Iteration   3: 829461.058 ops/s
Iteration   4: 825216.744 ops/s
Iteration   5: 829657.995 ops/s
Iteration   6: 828364.273 ops/s
Iteration   7: 829746.022 ops/s
Iteration   8: 825994.976 ops/s
Iteration   9: 829898.201 ops/s
Iteration  10: 828537.825 ops/s
Iteration  11: 828687.139 ops/s
Iteration  12: 827144.205 ops/s
Iteration  13: 827046.834 ops/s
Iteration  14: 826070.423 ops/s
Iteration  15: 828897.967 ops/s
Iteration  16: 829119.915 ops/s
Iteration  17: 824532.849 ops/s
Iteration  18: 830542.990 ops/s
Iteration  19: 828124.141 ops/s
Iteration  20: 827192.929 ops/s
Iteration  21: 826963.026 ops/s
Iteration  22: 826415.839 ops/s
Iteration  23: 827165.279 ops/s
Iteration  24: 828436.028 ops/s
Iteration  25: 827693.296 ops/s
Iteration  26: 828426.780 ops/s
Iteration  27: 829584.823 ops/s
Iteration  28: 826698.757 ops/s
Iteration  29: 827973.594 ops/s
Iteration  30: 826221.227 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumByDouble":
  827930.998 ±(99.9%) 1001.093 ops/s [Average]
  (min, avg, max) = (824532.849, 827930.998, 830542.990), stdev = 1498.389
  CI (99.9%): [826929.904, 828932.091] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_sumByDouble  thrpt   30  827930.998 ± 1001.093  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62.825 ops/s
# Warmup Iteration   2: 69.420 ops/s
# Warmup Iteration   3: 98.616 ops/s
# Warmup Iteration   4: 99.555 ops/s
# Warmup Iteration   5: 98.468 ops/s
# Warmup Iteration   6: 99.531 ops/s
# Warmup Iteration   7: 98.978 ops/s
# Warmup Iteration   8: 99.528 ops/s
# Warmup Iteration   9: 95.320 ops/s
# Warmup Iteration  10: 84.498 ops/s
# Warmup Iteration  11: 94.619 ops/s
# Warmup Iteration  12: 98.375 ops/s
# Warmup Iteration  13: 99.859 ops/s
# Warmup Iteration  14: 98.681 ops/s
# Warmup Iteration  15: 98.948 ops/s
# Warmup Iteration  16: 99.548 ops/s
# Warmup Iteration  17: 98.179 ops/s
# Warmup Iteration  18: 99.327 ops/s
# Warmup Iteration  19: 99.026 ops/s
# Warmup Iteration  20: 97.324 ops/s
# Warmup Iteration  21: 98.468 ops/s
# Warmup Iteration  22: 94.538 ops/s
# Warmup Iteration  23: 97.810 ops/s
# Warmup Iteration  24: 94.980 ops/s
# Warmup Iteration  25: 98.436 ops/s
# Warmup Iteration  26: 95.118 ops/s
# Warmup Iteration  27: 98.097 ops/s
# Warmup Iteration  28: 95.838 ops/s
# Warmup Iteration  29: 98.108 ops/s
# Warmup Iteration  30: 98.101 ops/s
Iteration   1: 97.418 ops/s
Iteration   2: 97.438 ops/s
Iteration   3: 99.945 ops/s
Iteration   4: 96.532 ops/s
Iteration   5: 96.217 ops/s
Iteration   6: 99.080 ops/s
Iteration   7: 95.972 ops/s
Iteration   8: 96.572 ops/s
Iteration   9: 96.107 ops/s
Iteration  10: 96.025 ops/s
Iteration  11: 93.999 ops/s
Iteration  12: 93.294 ops/s
Iteration  13: 94.920 ops/s
Iteration  14: 94.417 ops/s
Iteration  15: 94.721 ops/s
Iteration  16: 94.759 ops/s
Iteration  17: 92.557 ops/s
Iteration  18: 89.264 ops/s
Iteration  19: 81.888 ops/s
Iteration  20: 87.771 ops/s
Iteration  21: 93.797 ops/s
Iteration  22: 94.812 ops/s
Iteration  23: 97.570 ops/s
Iteration  24: 97.451 ops/s
Iteration  25: 98.544 ops/s
Iteration  26: 98.395 ops/s
Iteration  27: 97.419 ops/s
Iteration  28: 99.025 ops/s
Iteration  29: 97.852 ops/s
Iteration  30: 97.181 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  95.365 ±(99.9%) 2.478 ops/s [Average]
  (min, avg, max) = (81.888, 95.365, 99.945), stdev = 3.709
  CI (99.9%): [92.886, 97.843] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt   Score   Error  Units
TreeBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  95.365 ± 2.478  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 641891.609 ops/s
# Warmup Iteration   2: 1064045.071 ops/s
# Warmup Iteration   3: 1220879.144 ops/s
# Warmup Iteration   4: 1231110.009 ops/s
# Warmup Iteration   5: 1226771.982 ops/s
# Warmup Iteration   6: 1019600.259 ops/s
# Warmup Iteration   7: 1231988.097 ops/s
# Warmup Iteration   8: 1229517.585 ops/s
# Warmup Iteration   9: 1231367.778 ops/s
# Warmup Iteration  10: 1232715.609 ops/s
# Warmup Iteration  11: 1230760.115 ops/s
# Warmup Iteration  12: 1227824.997 ops/s
# Warmup Iteration  13: 1229901.053 ops/s
# Warmup Iteration  14: 1231635.435 ops/s
# Warmup Iteration  15: 1230102.992 ops/s
# Warmup Iteration  16: 1230779.046 ops/s
# Warmup Iteration  17: 1228787.728 ops/s
# Warmup Iteration  18: 1230906.005 ops/s
# Warmup Iteration  19: 1231806.895 ops/s
# Warmup Iteration  20: 1230327.938 ops/s
# Warmup Iteration  21: 1233072.121 ops/s
# Warmup Iteration  22: 1231138.694 ops/s
# Warmup Iteration  23: 1228878.120 ops/s
# Warmup Iteration  24: 1231055.247 ops/s
# Warmup Iteration  25: 1230418.547 ops/s
# Warmup Iteration  26: 1225426.930 ops/s
# Warmup Iteration  27: 1229028.659 ops/s
# Warmup Iteration  28: 1228049.808 ops/s
# Warmup Iteration  29: 1228335.976 ops/s
# Warmup Iteration  30: 1227043.835 ops/s
Iteration   1: 1230331.152 ops/s
Iteration   2: 1229613.421 ops/s
Iteration   3: 1226297.516 ops/s
Iteration   4: 1228093.388 ops/s
Iteration   5: 1222456.041 ops/s
Iteration   6: 1230092.854 ops/s
Iteration   7: 1227114.545 ops/s
Iteration   8: 1230572.792 ops/s
Iteration   9: 1231654.652 ops/s
Iteration  10: 1227972.045 ops/s
Iteration  11: 1231204.019 ops/s
Iteration  12: 1230087.190 ops/s
Iteration  13: 1229697.797 ops/s
Iteration  14: 1230084.116 ops/s
Iteration  15: 1228986.824 ops/s
Iteration  16: 1230080.988 ops/s
Iteration  17: 1226130.160 ops/s
Iteration  18: 1230921.550 ops/s
Iteration  19: 1226076.933 ops/s
Iteration  20: 1233586.901 ops/s
Iteration  21: 1230471.869 ops/s
Iteration  22: 1230815.920 ops/s
Iteration  23: 1228839.796 ops/s
Iteration  24: 1221986.040 ops/s
Iteration  25: 1230187.551 ops/s
Iteration  26: 1231550.853 ops/s
Iteration  27: 1227299.372 ops/s
Iteration  28: 1231120.168 ops/s
Iteration  29: 1228467.725 ops/s
Iteration  30: 1232647.523 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumByFloat":
  1229148.057 ±(99.9%) 1762.107 ops/s [Average]
  (min, avg, max) = (1221986.040, 1229148.057, 1233586.901), stdev = 2637.440
  CI (99.9%): [1227385.949, 1230910.164] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_sumByFloat  thrpt   30  1229148.057 ± 1762.107  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62.219 ops/s
# Warmup Iteration   2: 68.827 ops/s
# Warmup Iteration   3: 97.314 ops/s
# Warmup Iteration   4: 95.990 ops/s
# Warmup Iteration   5: 94.796 ops/s
# Warmup Iteration   6: 97.650 ops/s
# Warmup Iteration   7: 95.868 ops/s
# Warmup Iteration   8: 98.069 ops/s
# Warmup Iteration   9: 96.197 ops/s
# Warmup Iteration  10: 87.885 ops/s
# Warmup Iteration  11: 86.082 ops/s
# Warmup Iteration  12: 97.846 ops/s
# Warmup Iteration  13: 98.684 ops/s
# Warmup Iteration  14: 98.553 ops/s
# Warmup Iteration  15: 98.634 ops/s
# Warmup Iteration  16: 98.531 ops/s
# Warmup Iteration  17: 97.483 ops/s
# Warmup Iteration  18: 97.612 ops/s
# Warmup Iteration  19: 95.780 ops/s
# Warmup Iteration  20: 96.241 ops/s
# Warmup Iteration  21: 95.619 ops/s
# Warmup Iteration  22: 97.304 ops/s
# Warmup Iteration  23: 94.184 ops/s
# Warmup Iteration  24: 96.607 ops/s
# Warmup Iteration  25: 92.113 ops/s
# Warmup Iteration  26: 93.781 ops/s
# Warmup Iteration  27: 93.433 ops/s
# Warmup Iteration  28: 94.602 ops/s
# Warmup Iteration  29: 94.738 ops/s
# Warmup Iteration  30: 95.607 ops/s
Iteration   1: 96.888 ops/s
Iteration   2: 96.688 ops/s
Iteration   3: 95.806 ops/s
Iteration   4: 94.718 ops/s
Iteration   5: 94.752 ops/s
Iteration   6: 95.709 ops/s
Iteration   7: 95.089 ops/s
Iteration   8: 97.055 ops/s
Iteration   9: 96.125 ops/s
Iteration  10: 95.317 ops/s
Iteration  11: 97.194 ops/s
Iteration  12: 95.737 ops/s
Iteration  13: 96.134 ops/s
Iteration  14: 95.492 ops/s
Iteration  15: 94.647 ops/s
Iteration  16: 96.527 ops/s
Iteration  17: 95.527 ops/s
Iteration  18: 96.604 ops/s
Iteration  19: 93.124 ops/s
Iteration  20: 96.643 ops/s
Iteration  21: 94.516 ops/s
Iteration  22: 90.829 ops/s
Iteration  23: 92.892 ops/s
Iteration  24: 95.747 ops/s
Iteration  25: 95.545 ops/s
Iteration  26: 95.213 ops/s
Iteration  27: 94.318 ops/s
Iteration  28: 96.438 ops/s
Iteration  29: 97.201 ops/s
Iteration  30: 96.508 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  95.499 ±(99.9%) 0.936 ops/s [Average]
  (min, avg, max) = (90.829, 95.499, 97.201), stdev = 1.400
  CI (99.9%): [94.564, 96.435] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt   Score   Error  Units
TreeBagTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  95.499 ± 0.936  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 763808.397 ops/s
# Warmup Iteration   2: 1219359.326 ops/s
# Warmup Iteration   3: 1389541.861 ops/s
# Warmup Iteration   4: 1416016.140 ops/s
# Warmup Iteration   5: 1415615.651 ops/s
# Warmup Iteration   6: 1306232.498 ops/s
# Warmup Iteration   7: 1290907.869 ops/s
# Warmup Iteration   8: 1414324.411 ops/s
# Warmup Iteration   9: 1414851.663 ops/s
# Warmup Iteration  10: 1412368.084 ops/s
# Warmup Iteration  11: 1416453.753 ops/s
# Warmup Iteration  12: 1414061.714 ops/s
# Warmup Iteration  13: 1416041.071 ops/s
# Warmup Iteration  14: 1413674.941 ops/s
# Warmup Iteration  15: 1418045.617 ops/s
# Warmup Iteration  16: 1414670.991 ops/s
# Warmup Iteration  17: 1415453.852 ops/s
# Warmup Iteration  18: 1416784.934 ops/s
# Warmup Iteration  19: 1416408.376 ops/s
# Warmup Iteration  20: 1414280.287 ops/s
# Warmup Iteration  21: 1416928.906 ops/s
# Warmup Iteration  22: 1410003.922 ops/s
# Warmup Iteration  23: 1415188.135 ops/s
# Warmup Iteration  24: 1417734.484 ops/s
# Warmup Iteration  25: 1416183.371 ops/s
# Warmup Iteration  26: 1417018.727 ops/s
# Warmup Iteration  27: 1415516.830 ops/s
# Warmup Iteration  28: 1416246.611 ops/s
# Warmup Iteration  29: 1417109.972 ops/s
# Warmup Iteration  30: 1415619.488 ops/s
Iteration   1: 1413715.622 ops/s
Iteration   2: 1417274.459 ops/s
Iteration   3: 1416100.736 ops/s
Iteration   4: 1412021.371 ops/s
Iteration   5: 1414465.044 ops/s
Iteration   6: 1414805.017 ops/s
Iteration   7: 1409856.372 ops/s
Iteration   8: 1414434.250 ops/s
Iteration   9: 1416214.310 ops/s
Iteration  10: 1417249.167 ops/s
Iteration  11: 1413802.956 ops/s
Iteration  12: 1421913.266 ops/s
Iteration  13: 1417409.616 ops/s
Iteration  14: 1418233.620 ops/s
Iteration  15: 1417080.548 ops/s
Iteration  16: 1414887.897 ops/s
Iteration  17: 1414824.745 ops/s
Iteration  18: 1417243.007 ops/s
Iteration  19: 1413606.010 ops/s
Iteration  20: 1414839.952 ops/s
Iteration  21: 1409725.401 ops/s
Iteration  22: 1418824.162 ops/s
Iteration  23: 1413070.750 ops/s
Iteration  24: 1417242.087 ops/s
Iteration  25: 1414814.505 ops/s
Iteration  26: 1419777.147 ops/s
Iteration  27: 1415021.508 ops/s
Iteration  28: 1412527.512 ops/s
Iteration  29: 1418821.006 ops/s
Iteration  30: 1420704.896 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumByInt":
  1415683.565 ±(99.9%) 1924.789 ops/s [Average]
  (min, avg, max) = (1409725.401, 1415683.565, 1421913.266), stdev = 2880.934
  CI (99.9%): [1413758.776, 1417608.354] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_sumByInt  thrpt   30  1415683.565 ± 1924.789  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 824449.691 ops/s
# Warmup Iteration   2: 1461407.660 ops/s
# Warmup Iteration   3: 1637756.864 ops/s
# Warmup Iteration   4: 1643499.383 ops/s
# Warmup Iteration   5: 1645680.979 ops/s
# Warmup Iteration   6: 1365484.552 ops/s
# Warmup Iteration   7: 1646927.592 ops/s
# Warmup Iteration   8: 1641387.133 ops/s
# Warmup Iteration   9: 1646581.612 ops/s
# Warmup Iteration  10: 1645062.528 ops/s
# Warmup Iteration  11: 1644657.515 ops/s
# Warmup Iteration  12: 1646457.515 ops/s
# Warmup Iteration  13: 1645535.730 ops/s
# Warmup Iteration  14: 1643484.689 ops/s
# Warmup Iteration  15: 1644268.704 ops/s
# Warmup Iteration  16: 1648783.458 ops/s
# Warmup Iteration  17: 1642355.263 ops/s
# Warmup Iteration  18: 1647243.767 ops/s
# Warmup Iteration  19: 1643647.909 ops/s
# Warmup Iteration  20: 1645877.978 ops/s
# Warmup Iteration  21: 1644125.857 ops/s
# Warmup Iteration  22: 1648342.794 ops/s
# Warmup Iteration  23: 1648676.314 ops/s
# Warmup Iteration  24: 1643700.283 ops/s
# Warmup Iteration  25: 1643695.054 ops/s
# Warmup Iteration  26: 1646293.756 ops/s
# Warmup Iteration  27: 1645652.891 ops/s
# Warmup Iteration  28: 1644606.060 ops/s
# Warmup Iteration  29: 1649013.792 ops/s
# Warmup Iteration  30: 1643698.763 ops/s
Iteration   1: 1644622.329 ops/s
Iteration   2: 1649788.445 ops/s
Iteration   3: 1643226.394 ops/s
Iteration   4: 1651387.973 ops/s
Iteration   5: 1646432.607 ops/s
Iteration   6: 1649273.408 ops/s
Iteration   7: 1650813.010 ops/s
Iteration   8: 1644759.025 ops/s
Iteration   9: 1652060.738 ops/s
Iteration  10: 1639761.843 ops/s
Iteration  11: 1647687.960 ops/s
Iteration  12: 1647423.422 ops/s
Iteration  13: 1649860.186 ops/s
Iteration  14: 1648825.770 ops/s
Iteration  15: 1642816.227 ops/s
Iteration  16: 1645673.469 ops/s
Iteration  17: 1644673.141 ops/s
Iteration  18: 1645223.257 ops/s
Iteration  19: 1650503.927 ops/s
Iteration  20: 1645966.103 ops/s
Iteration  21: 1648526.499 ops/s
Iteration  22: 1644332.334 ops/s
Iteration  23: 1645518.112 ops/s
Iteration  24: 1631339.404 ops/s
Iteration  25: 1645392.272 ops/s
Iteration  26: 1641299.814 ops/s
Iteration  27: 1644921.736 ops/s
Iteration  28: 1650915.621 ops/s
Iteration  29: 1642553.404 ops/s
Iteration  30: 1651040.521 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumByLong":
  1646220.632 ±(99.9%) 2863.803 ops/s [Average]
  (min, avg, max) = (1631339.404, 1646220.632, 1652060.738), stdev = 4286.406
  CI (99.9%): [1643356.829, 1649084.435] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_sumByLong  thrpt   30  1646220.632 ± 2863.803  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 752104.347 ops/s
# Warmup Iteration   2: 1249131.189 ops/s
# Warmup Iteration   3: 1418485.739 ops/s
# Warmup Iteration   4: 1423695.327 ops/s
# Warmup Iteration   5: 1426645.304 ops/s
# Warmup Iteration   6: 1194085.581 ops/s
# Warmup Iteration   7: 1428783.004 ops/s
# Warmup Iteration   8: 1430187.019 ops/s
# Warmup Iteration   9: 1432377.559 ops/s
# Warmup Iteration  10: 1430040.677 ops/s
# Warmup Iteration  11: 1430375.900 ops/s
# Warmup Iteration  12: 1429076.558 ops/s
# Warmup Iteration  13: 1431163.538 ops/s
# Warmup Iteration  14: 1426171.684 ops/s
# Warmup Iteration  15: 1431520.165 ops/s
# Warmup Iteration  16: 1428906.547 ops/s
# Warmup Iteration  17: 1430262.268 ops/s
# Warmup Iteration  18: 1428013.018 ops/s
# Warmup Iteration  19: 1428472.738 ops/s
# Warmup Iteration  20: 1430618.888 ops/s
# Warmup Iteration  21: 1429579.068 ops/s
# Warmup Iteration  22: 1427953.306 ops/s
# Warmup Iteration  23: 1432130.273 ops/s
# Warmup Iteration  24: 1432263.103 ops/s
# Warmup Iteration  25: 1430258.391 ops/s
# Warmup Iteration  26: 1429410.101 ops/s
# Warmup Iteration  27: 1428827.958 ops/s
# Warmup Iteration  28: 1429531.050 ops/s
# Warmup Iteration  29: 1429206.819 ops/s
# Warmup Iteration  30: 1429401.743 ops/s
Iteration   1: 1429967.368 ops/s
Iteration   2: 1434074.724 ops/s
Iteration   3: 1430718.092 ops/s
Iteration   4: 1434121.430 ops/s
Iteration   5: 1426422.674 ops/s
Iteration   6: 1432309.337 ops/s
Iteration   7: 1429047.430 ops/s
Iteration   8: 1431032.719 ops/s
Iteration   9: 1423145.295 ops/s
Iteration  10: 1429759.356 ops/s
Iteration  11: 1427013.866 ops/s
Iteration  12: 1429560.924 ops/s
Iteration  13: 1430818.813 ops/s
Iteration  14: 1428830.413 ops/s
Iteration  15: 1432524.365 ops/s
Iteration  16: 1423588.812 ops/s
Iteration  17: 1433058.509 ops/s
Iteration  18: 1426066.769 ops/s
Iteration  19: 1428161.479 ops/s
Iteration  20: 1430113.581 ops/s
Iteration  21: 1426379.480 ops/s
Iteration  22: 1431475.256 ops/s
Iteration  23: 1431355.322 ops/s
Iteration  24: 1424375.502 ops/s
Iteration  25: 1430761.390 ops/s
Iteration  26: 1429752.550 ops/s
Iteration  27: 1424856.741 ops/s
Iteration  28: 1432579.600 ops/s
Iteration  29: 1427077.915 ops/s
Iteration  30: 1426421.894 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumDouble":
  1429179.054 ±(99.9%) 2045.104 ops/s [Average]
  (min, avg, max) = (1423145.295, 1429179.054, 1434121.430), stdev = 3061.016
  CI (99.9%): [1427133.949, 1431224.158] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_sumDouble  thrpt   30  1429179.054 ± 2045.104  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11.556 ops/s
# Warmup Iteration   2: 12.975 ops/s
# Warmup Iteration   3: 13.114 ops/s
# Warmup Iteration   4: 13.311 ops/s
# Warmup Iteration   5: 13.188 ops/s
# Warmup Iteration   6: 13.237 ops/s
# Warmup Iteration   7: 13.269 ops/s
# Warmup Iteration   8: 13.085 ops/s
# Warmup Iteration   9: 13.277 ops/s
# Warmup Iteration  10: 13.381 ops/s
# Warmup Iteration  11: 14.423 ops/s
# Warmup Iteration  12: 14.359 ops/s
# Warmup Iteration  13: 14.180 ops/s
# Warmup Iteration  14: 14.299 ops/s
# Warmup Iteration  15: 14.527 ops/s
# Warmup Iteration  16: 14.402 ops/s
# Warmup Iteration  17: 13.601 ops/s
# Warmup Iteration  18: 13.730 ops/s
# Warmup Iteration  19: 13.777 ops/s
# Warmup Iteration  20: 13.832 ops/s
# Warmup Iteration  21: 14.010 ops/s
# Warmup Iteration  22: 13.785 ops/s
# Warmup Iteration  23: 13.769 ops/s
# Warmup Iteration  24: 13.942 ops/s
# Warmup Iteration  25: 14.081 ops/s
# Warmup Iteration  26: 14.129 ops/s
# Warmup Iteration  27: 14.281 ops/s
# Warmup Iteration  28: 14.359 ops/s
# Warmup Iteration  29: 14.388 ops/s
# Warmup Iteration  30: 14.343 ops/s
Iteration   1: 14.321 ops/s
Iteration   2: 14.441 ops/s
Iteration   3: 14.526 ops/s
Iteration   4: 14.557 ops/s
Iteration   5: 14.532 ops/s
Iteration   6: 14.375 ops/s
Iteration   7: 14.522 ops/s
Iteration   8: 14.165 ops/s
Iteration   9: 14.384 ops/s
Iteration  10: 14.080 ops/s
Iteration  11: 14.300 ops/s
Iteration  12: 14.276 ops/s
Iteration  13: 14.229 ops/s
Iteration  14: 14.446 ops/s
Iteration  15: 14.344 ops/s
Iteration  16: 14.372 ops/s
Iteration  17: 14.420 ops/s
Iteration  18: 14.457 ops/s
Iteration  19: 14.559 ops/s
Iteration  20: 14.200 ops/s
Iteration  21: 14.501 ops/s
Iteration  22: 14.176 ops/s
Iteration  23: 14.254 ops/s
Iteration  24: 14.433 ops/s
Iteration  25: 14.551 ops/s
Iteration  26: 13.916 ops/s
Iteration  27: 13.927 ops/s
Iteration  28: 14.274 ops/s
Iteration  29: 14.417 ops/s
Iteration  30: 14.408 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1":
  14.345 ±(99.9%) 0.115 ops/s [Average]
  (min, avg, max) = (13.916, 14.345, 14.559), stdev = 0.172
  CI (99.9%): [14.230, 14.460] (assumes normal distribution)


# Run complete. Total time: 00:01:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt   Score   Error  Units
TreeBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1  thrpt   30  14.345 ± 0.115  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11.260 ops/s
# Warmup Iteration   2: 12.252 ops/s
# Warmup Iteration   3: 12.321 ops/s
# Warmup Iteration   4: 12.148 ops/s
# Warmup Iteration   5: 12.251 ops/s
# Warmup Iteration   6: 12.266 ops/s
# Warmup Iteration   7: 12.168 ops/s
# Warmup Iteration   8: 12.496 ops/s
# Warmup Iteration   9: 12.348 ops/s
# Warmup Iteration  10: 12.407 ops/s
# Warmup Iteration  11: 12.859 ops/s
# Warmup Iteration  12: 13.489 ops/s
# Warmup Iteration  13: 13.540 ops/s
# Warmup Iteration  14: 13.373 ops/s
# Warmup Iteration  15: 13.410 ops/s
# Warmup Iteration  16: 13.476 ops/s
# Warmup Iteration  17: 13.472 ops/s
# Warmup Iteration  18: 13.396 ops/s
# Warmup Iteration  19: 13.259 ops/s
# Warmup Iteration  20: 13.276 ops/s
# Warmup Iteration  21: 13.226 ops/s
# Warmup Iteration  22: 13.507 ops/s
# Warmup Iteration  23: 13.558 ops/s
# Warmup Iteration  24: 13.447 ops/s
# Warmup Iteration  25: 13.380 ops/s
# Warmup Iteration  26: 13.248 ops/s
# Warmup Iteration  27: 13.051 ops/s
# Warmup Iteration  28: 12.716 ops/s
# Warmup Iteration  29: 13.128 ops/s
# Warmup Iteration  30: 12.896 ops/s
Iteration   1: 12.924 ops/s
Iteration   2: 12.595 ops/s
Iteration   3: 12.601 ops/s
Iteration   4: 12.865 ops/s
Iteration   5: 13.114 ops/s
Iteration   6: 12.798 ops/s
Iteration   7: 13.425 ops/s
Iteration   8: 13.193 ops/s
Iteration   9: 13.070 ops/s
Iteration  10: 12.926 ops/s
Iteration  11: 12.962 ops/s
Iteration  12: 13.066 ops/s
Iteration  13: 13.016 ops/s
Iteration  14: 12.961 ops/s
Iteration  15: 13.107 ops/s
Iteration  16: 13.236 ops/s
Iteration  17: 13.044 ops/s
Iteration  18: 13.067 ops/s
Iteration  19: 13.128 ops/s
Iteration  20: 13.068 ops/s
Iteration  21: 13.229 ops/s
Iteration  22: 13.264 ops/s
Iteration  23: 13.305 ops/s
Iteration  24: 13.140 ops/s
Iteration  25: 13.249 ops/s
Iteration  26: 13.190 ops/s
Iteration  27: 13.380 ops/s
Iteration  28: 13.273 ops/s
Iteration  29: 13.316 ops/s
Iteration  30: 13.593 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2":
  13.104 ±(99.9%) 0.147 ops/s [Average]
  (min, avg, max) = (12.595, 13.104, 13.593), stdev = 0.221
  CI (99.9%): [12.956, 13.251] (assumes normal distribution)


# Run complete. Total time: 00:01:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt   Score   Error  Units
TreeBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2  thrpt   30  13.104 ± 0.147  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 802044.473 ops/s
# Warmup Iteration   2: 1316406.333 ops/s
# Warmup Iteration   3: 1484500.511 ops/s
# Warmup Iteration   4: 1483383.969 ops/s
# Warmup Iteration   5: 1483614.269 ops/s
# Warmup Iteration   6: 1250028.156 ops/s
# Warmup Iteration   7: 1491091.776 ops/s
# Warmup Iteration   8: 1494963.201 ops/s
# Warmup Iteration   9: 1485928.584 ops/s
# Warmup Iteration  10: 1494079.501 ops/s
# Warmup Iteration  11: 1498508.083 ops/s
# Warmup Iteration  12: 1490573.818 ops/s
# Warmup Iteration  13: 1490910.621 ops/s
# Warmup Iteration  14: 1492434.200 ops/s
# Warmup Iteration  15: 1491071.635 ops/s
# Warmup Iteration  16: 1494417.875 ops/s
# Warmup Iteration  17: 1493172.512 ops/s
# Warmup Iteration  18: 1493381.488 ops/s
# Warmup Iteration  19: 1498368.712 ops/s
# Warmup Iteration  20: 1496224.331 ops/s
# Warmup Iteration  21: 1490153.218 ops/s
# Warmup Iteration  22: 1494081.006 ops/s
# Warmup Iteration  23: 1493692.035 ops/s
# Warmup Iteration  24: 1493728.645 ops/s
# Warmup Iteration  25: 1491755.103 ops/s
# Warmup Iteration  26: 1496162.109 ops/s
# Warmup Iteration  27: 1491880.673 ops/s
# Warmup Iteration  28: 1497824.070 ops/s
# Warmup Iteration  29: 1496189.351 ops/s
# Warmup Iteration  30: 1494046.514 ops/s
Iteration   1: 1498712.290 ops/s
Iteration   2: 1492319.946 ops/s
Iteration   3: 1497506.445 ops/s
Iteration   4: 1497340.343 ops/s
Iteration   5: 1494358.578 ops/s
Iteration   6: 1495764.957 ops/s
Iteration   7: 1496402.095 ops/s
Iteration   8: 1497511.521 ops/s
Iteration   9: 1498401.320 ops/s
Iteration  10: 1500515.615 ops/s
Iteration  11: 1497145.286 ops/s
Iteration  12: 1497016.933 ops/s
Iteration  13: 1493128.946 ops/s
Iteration  14: 1499633.484 ops/s
Iteration  15: 1488201.054 ops/s
Iteration  16: 1495056.150 ops/s
Iteration  17: 1487399.205 ops/s
Iteration  18: 1499396.430 ops/s
Iteration  19: 1491671.296 ops/s
Iteration  20: 1492340.488 ops/s
Iteration  21: 1491770.282 ops/s
Iteration  22: 1491642.691 ops/s
Iteration  23: 1501788.037 ops/s
Iteration  24: 1492837.906 ops/s
Iteration  25: 1495292.633 ops/s
Iteration  26: 1496264.576 ops/s
Iteration  27: 1497316.033 ops/s
Iteration  28: 1492115.542 ops/s
Iteration  29: 1493073.586 ops/s
Iteration  30: 1495934.795 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumFloat":
  1495261.949 ±(99.9%) 2319.253 ops/s [Average]
  (min, avg, max) = (1487399.205, 1495261.949, 1501788.037), stdev = 3471.348
  CI (99.9%): [1492942.696, 1497581.201] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_sumFloat  thrpt   30  1495261.949 ± 2319.253  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumFloatConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumFloatConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10.795 ops/s
# Warmup Iteration   2: 11.752 ops/s
# Warmup Iteration   3: 12.047 ops/s
# Warmup Iteration   4: 11.918 ops/s
# Warmup Iteration   5: 12.388 ops/s
# Warmup Iteration   6: 12.409 ops/s
# Warmup Iteration   7: 12.485 ops/s
# Warmup Iteration   8: 12.541 ops/s
# Warmup Iteration   9: 12.445 ops/s
# Warmup Iteration  10: 12.666 ops/s
# Warmup Iteration  11: 12.780 ops/s
# Warmup Iteration  12: 13.492 ops/s
# Warmup Iteration  13: 13.442 ops/s
# Warmup Iteration  14: 13.577 ops/s
# Warmup Iteration  15: 13.624 ops/s
# Warmup Iteration  16: 13.478 ops/s
# Warmup Iteration  17: 13.398 ops/s
# Warmup Iteration  18: 13.497 ops/s
# Warmup Iteration  19: 13.575 ops/s
# Warmup Iteration  20: 13.526 ops/s
# Warmup Iteration  21: 13.454 ops/s
# Warmup Iteration  22: 13.524 ops/s
# Warmup Iteration  23: 13.569 ops/s
# Warmup Iteration  24: 13.517 ops/s
# Warmup Iteration  25: 13.511 ops/s
# Warmup Iteration  26: 13.514 ops/s
# Warmup Iteration  27: 13.402 ops/s
# Warmup Iteration  28: 13.085 ops/s
# Warmup Iteration  29: 12.890 ops/s
# Warmup Iteration  30: 13.222 ops/s
Iteration   1: 12.988 ops/s
Iteration   2: 13.378 ops/s
Iteration   3: 13.388 ops/s
Iteration   4: 13.362 ops/s
Iteration   5: 13.136 ops/s
Iteration   6: 13.274 ops/s
Iteration   7: 13.469 ops/s
Iteration   8: 13.141 ops/s
Iteration   9: 13.381 ops/s
Iteration  10: 13.493 ops/s
Iteration  11: 13.366 ops/s
Iteration  12: 13.426 ops/s
Iteration  13: 13.591 ops/s
Iteration  14: 13.403 ops/s
Iteration  15: 13.515 ops/s
Iteration  16: 13.196 ops/s
Iteration  17: 13.417 ops/s
Iteration  18: 13.675 ops/s
Iteration  19: 13.471 ops/s
Iteration  20: 13.467 ops/s
Iteration  21: 13.695 ops/s
Iteration  22: 13.517 ops/s
Iteration  23: 13.543 ops/s
Iteration  24: 13.603 ops/s
Iteration  25: 13.507 ops/s
Iteration  26: 13.447 ops/s
Iteration  27: 13.521 ops/s
Iteration  28: 13.467 ops/s
Iteration  29: 13.314 ops/s
Iteration  30: 13.265 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumFloatConsistentRounding1":
  13.414 ±(99.9%) 0.106 ops/s [Average]
  (min, avg, max) = (12.988, 13.414, 13.695), stdev = 0.159
  CI (99.9%): [13.308, 13.520] (assumes normal distribution)


# Run complete. Total time: 00:01:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt   Score   Error  Units
TreeBagTest._Benchmark.benchmark_sumFloatConsistentRounding1  thrpt   30  13.414 ± 0.106  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumFloatConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumFloatConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10.802 ops/s
# Warmup Iteration   2: 11.792 ops/s
# Warmup Iteration   3: 11.791 ops/s
# Warmup Iteration   4: 11.736 ops/s
# Warmup Iteration   5: 11.714 ops/s
# Warmup Iteration   6: 11.629 ops/s
# Warmup Iteration   7: 11.563 ops/s
# Warmup Iteration   8: 11.698 ops/s
# Warmup Iteration   9: 11.773 ops/s
# Warmup Iteration  10: 11.747 ops/s
# Warmup Iteration  11: 11.704 ops/s
# Warmup Iteration  12: 12.491 ops/s
# Warmup Iteration  13: 12.068 ops/s
# Warmup Iteration  14: 12.452 ops/s
# Warmup Iteration  15: 12.479 ops/s
# Warmup Iteration  16: 12.520 ops/s
# Warmup Iteration  17: 12.433 ops/s
# Warmup Iteration  18: 12.464 ops/s
# Warmup Iteration  19: 12.623 ops/s
# Warmup Iteration  20: 12.562 ops/s
# Warmup Iteration  21: 12.594 ops/s
# Warmup Iteration  22: 12.614 ops/s
# Warmup Iteration  23: 12.662 ops/s
# Warmup Iteration  24: 12.712 ops/s
# Warmup Iteration  25: 12.660 ops/s
# Warmup Iteration  26: 12.719 ops/s
# Warmup Iteration  27: 12.699 ops/s
# Warmup Iteration  28: 12.644 ops/s
# Warmup Iteration  29: 12.700 ops/s
# Warmup Iteration  30: 12.719 ops/s
Iteration   1: 12.658 ops/s
Iteration   2: 12.630 ops/s
Iteration   3: 12.245 ops/s
Iteration   4: 12.561 ops/s
Iteration   5: 12.770 ops/s
Iteration   6: 12.815 ops/s
Iteration   7: 12.590 ops/s
Iteration   8: 12.728 ops/s
Iteration   9: 12.761 ops/s
Iteration  10: 12.812 ops/s
Iteration  11: 12.643 ops/s
Iteration  12: 12.749 ops/s
Iteration  13: 12.650 ops/s
Iteration  14: 12.764 ops/s
Iteration  15: 12.723 ops/s
Iteration  16: 12.637 ops/s
Iteration  17: 12.654 ops/s
Iteration  18: 12.758 ops/s
Iteration  19: 12.560 ops/s
Iteration  20: 12.546 ops/s
Iteration  21: 12.495 ops/s
Iteration  22: 12.564 ops/s
Iteration  23: 12.417 ops/s
Iteration  24: 12.655 ops/s
Iteration  25: 12.274 ops/s
Iteration  26: 12.152 ops/s
Iteration  27: 12.514 ops/s
Iteration  28: 12.443 ops/s
Iteration  29: 12.750 ops/s
Iteration  30: 12.258 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumFloatConsistentRounding2":
  12.593 ±(99.9%) 0.119 ops/s [Average]
  (min, avg, max) = (12.152, 12.593, 12.815), stdev = 0.178
  CI (99.9%): [12.473, 12.712] (assumes normal distribution)


# Run complete. Total time: 00:01:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt   Score   Error  Units
TreeBagTest._Benchmark.benchmark_sumFloatConsistentRounding2  thrpt   30  12.593 ± 0.119  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 810093.922 ops/s
# Warmup Iteration   2: 1340171.016 ops/s
# Warmup Iteration   3: 1521634.745 ops/s
# Warmup Iteration   4: 1524662.979 ops/s
# Warmup Iteration   5: 1527235.104 ops/s
# Warmup Iteration   6: 1279943.807 ops/s
# Warmup Iteration   7: 1531162.964 ops/s
# Warmup Iteration   8: 1529670.059 ops/s
# Warmup Iteration   9: 1529864.381 ops/s
# Warmup Iteration  10: 1530921.414 ops/s
# Warmup Iteration  11: 1531255.135 ops/s
# Warmup Iteration  12: 1530697.515 ops/s
# Warmup Iteration  13: 1527906.906 ops/s
# Warmup Iteration  14: 1532937.825 ops/s
# Warmup Iteration  15: 1528641.355 ops/s
# Warmup Iteration  16: 1534579.754 ops/s
# Warmup Iteration  17: 1525917.068 ops/s
# Warmup Iteration  18: 1532268.011 ops/s
# Warmup Iteration  19: 1523863.769 ops/s
# Warmup Iteration  20: 1530205.258 ops/s
# Warmup Iteration  21: 1530774.488 ops/s
# Warmup Iteration  22: 1529167.411 ops/s
# Warmup Iteration  23: 1524758.047 ops/s
# Warmup Iteration  24: 1529992.579 ops/s
# Warmup Iteration  25: 1526168.077 ops/s
# Warmup Iteration  26: 1526721.249 ops/s
# Warmup Iteration  27: 1526668.614 ops/s
# Warmup Iteration  28: 1528565.462 ops/s
# Warmup Iteration  29: 1527010.561 ops/s
# Warmup Iteration  30: 1527510.338 ops/s
Iteration   1: 1531482.076 ops/s
Iteration   2: 1532083.433 ops/s
Iteration   3: 1531556.192 ops/s
Iteration   4: 1527313.802 ops/s
Iteration   5: 1524041.324 ops/s
Iteration   6: 1531078.683 ops/s
Iteration   7: 1531362.521 ops/s
Iteration   8: 1525246.627 ops/s
Iteration   9: 1523761.046 ops/s
Iteration  10: 1528776.776 ops/s
Iteration  11: 1525692.776 ops/s
Iteration  12: 1531681.570 ops/s
Iteration  13: 1526729.953 ops/s
Iteration  14: 1530984.011 ops/s
Iteration  15: 1527489.968 ops/s
Iteration  16: 1528422.563 ops/s
Iteration  17: 1523940.794 ops/s
Iteration  18: 1530520.603 ops/s
Iteration  19: 1524809.763 ops/s
Iteration  20: 1526027.385 ops/s
Iteration  21: 1527112.775 ops/s
Iteration  22: 1526355.278 ops/s
Iteration  23: 1523548.399 ops/s
Iteration  24: 1527720.971 ops/s
Iteration  25: 1533844.461 ops/s
Iteration  26: 1531140.443 ops/s
Iteration  27: 1528745.698 ops/s
Iteration  28: 1527661.966 ops/s
Iteration  29: 1527900.730 ops/s
Iteration  30: 1526862.117 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumInteger":
  1528129.823 ±(99.9%) 1922.553 ops/s [Average]
  (min, avg, max) = (1523548.399, 1528129.823, 1533844.461), stdev = 2877.588
  CI (99.9%): [1526207.270, 1530052.377] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_sumInteger  thrpt   30  1528129.823 ± 1922.553  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 811586.084 ops/s
# Warmup Iteration   2: 1339320.451 ops/s
# Warmup Iteration   3: 1529639.761 ops/s
# Warmup Iteration   4: 1537827.735 ops/s
# Warmup Iteration   5: 1532968.184 ops/s
# Warmup Iteration   6: 1278184.335 ops/s
# Warmup Iteration   7: 1537535.641 ops/s
# Warmup Iteration   8: 1533832.536 ops/s
# Warmup Iteration   9: 1529401.236 ops/s
# Warmup Iteration  10: 1536205.951 ops/s
# Warmup Iteration  11: 1530035.060 ops/s
# Warmup Iteration  12: 1538582.914 ops/s
# Warmup Iteration  13: 1535425.289 ops/s
# Warmup Iteration  14: 1534651.737 ops/s
# Warmup Iteration  15: 1538268.631 ops/s
# Warmup Iteration  16: 1536003.455 ops/s
# Warmup Iteration  17: 1532833.374 ops/s
# Warmup Iteration  18: 1533930.820 ops/s
# Warmup Iteration  19: 1533336.887 ops/s
# Warmup Iteration  20: 1532811.028 ops/s
# Warmup Iteration  21: 1535537.343 ops/s
# Warmup Iteration  22: 1532845.725 ops/s
# Warmup Iteration  23: 1535898.129 ops/s
# Warmup Iteration  24: 1536010.898 ops/s
# Warmup Iteration  25: 1537242.808 ops/s
# Warmup Iteration  26: 1536399.982 ops/s
# Warmup Iteration  27: 1535820.415 ops/s
# Warmup Iteration  28: 1535710.573 ops/s
# Warmup Iteration  29: 1537795.679 ops/s
# Warmup Iteration  30: 1537769.538 ops/s
Iteration   1: 1535634.451 ops/s
Iteration   2: 1540629.534 ops/s
Iteration   3: 1537941.451 ops/s
Iteration   4: 1539177.516 ops/s
Iteration   5: 1533286.115 ops/s
Iteration   6: 1534426.288 ops/s
Iteration   7: 1533361.596 ops/s
Iteration   8: 1533902.649 ops/s
Iteration   9: 1535946.892 ops/s
Iteration  10: 1532655.101 ops/s
Iteration  11: 1537097.453 ops/s
Iteration  12: 1539992.662 ops/s
Iteration  13: 1526423.992 ops/s
Iteration  14: 1537455.226 ops/s
Iteration  15: 1537544.930 ops/s
Iteration  16: 1533767.149 ops/s
Iteration  17: 1531401.697 ops/s
Iteration  18: 1537962.303 ops/s
Iteration  19: 1536926.178 ops/s
Iteration  20: 1538441.330 ops/s
Iteration  21: 1536025.809 ops/s
Iteration  22: 1534130.094 ops/s
Iteration  23: 1537791.099 ops/s
Iteration  24: 1532808.690 ops/s
Iteration  25: 1527733.369 ops/s
Iteration  26: 1539524.056 ops/s
Iteration  27: 1536484.856 ops/s
Iteration  28: 1534887.382 ops/s
Iteration  29: 1531743.526 ops/s
Iteration  30: 1538179.631 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_sumLong":
  1535442.767 ±(99.9%) 2255.965 ops/s [Average]
  (min, avg, max) = (1526423.992, 1535442.767, 1540629.534), stdev = 3376.622
  CI (99.9%): [1533186.803, 1537698.732] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_sumLong  thrpt   30  1535442.767 ± 2255.965  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_summarizeDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_summarizeDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2138584.224 ops/s
# Warmup Iteration   2: 4352282.089 ops/s
# Warmup Iteration   3: 4519403.552 ops/s
# Warmup Iteration   4: 4540270.820 ops/s
# Warmup Iteration   5: 3828668.171 ops/s
# Warmup Iteration   6: 4551834.971 ops/s
# Warmup Iteration   7: 4554086.813 ops/s
# Warmup Iteration   8: 4558106.569 ops/s
# Warmup Iteration   9: 4562484.230 ops/s
# Warmup Iteration  10: 4556964.374 ops/s
# Warmup Iteration  11: 4548196.934 ops/s
# Warmup Iteration  12: 4561181.153 ops/s
# Warmup Iteration  13: 4557402.631 ops/s
# Warmup Iteration  14: 4562502.634 ops/s
# Warmup Iteration  15: 4564748.191 ops/s
# Warmup Iteration  16: 4559884.283 ops/s
# Warmup Iteration  17: 4583903.653 ops/s
# Warmup Iteration  18: 4559924.000 ops/s
# Warmup Iteration  19: 4570345.117 ops/s
# Warmup Iteration  20: 4558990.969 ops/s
# Warmup Iteration  21: 4568688.128 ops/s
# Warmup Iteration  22: 4564218.131 ops/s
# Warmup Iteration  23: 4574256.750 ops/s
# Warmup Iteration  24: 4568863.181 ops/s
# Warmup Iteration  25: 4572458.287 ops/s
# Warmup Iteration  26: 4572212.850 ops/s
# Warmup Iteration  27: 4575019.489 ops/s
# Warmup Iteration  28: 4581191.155 ops/s
# Warmup Iteration  29: 4561182.213 ops/s
# Warmup Iteration  30: 4577163.382 ops/s
Iteration   1: 4584285.243 ops/s
Iteration   2: 4589855.412 ops/s
Iteration   3: 4569425.685 ops/s
Iteration   4: 4575817.463 ops/s
Iteration   5: 4580682.686 ops/s
Iteration   6: 4592659.540 ops/s
Iteration   7: 4573790.206 ops/s
Iteration   8: 4577372.827 ops/s
Iteration   9: 4582095.736 ops/s
Iteration  10: 4566363.307 ops/s
Iteration  11: 4577187.312 ops/s
Iteration  12: 4585017.717 ops/s
Iteration  13: 4582926.449 ops/s
Iteration  14: 4551803.909 ops/s
Iteration  15: 4563134.313 ops/s
Iteration  16: 4593550.145 ops/s
Iteration  17: 4559198.343 ops/s
Iteration  18: 4537225.036 ops/s
Iteration  19: 4574404.179 ops/s
Iteration  20: 4584052.923 ops/s
Iteration  21: 4575732.587 ops/s
Iteration  22: 4561931.843 ops/s
Iteration  23: 4562485.568 ops/s
Iteration  24: 4576748.374 ops/s
Iteration  25: 4571407.090 ops/s
Iteration  26: 4569927.515 ops/s
Iteration  27: 4574235.465 ops/s
Iteration  28: 4563638.375 ops/s
Iteration  29: 4594720.940 ops/s
Iteration  30: 4574698.329 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_summarizeDouble":
  4574212.484 ±(99.9%) 8445.933 ops/s [Average]
  (min, avg, max) = (4537225.036, 4574212.484, 4594720.940), stdev = 12641.475
  CI (99.9%): [4565766.551, 4582658.417] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_summarizeDouble  thrpt   30  4574212.484 ± 8445.933  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_summarizeFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_summarizeFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2171548.820 ops/s
# Warmup Iteration   2: 4470495.408 ops/s
# Warmup Iteration   3: 4616819.847 ops/s
# Warmup Iteration   4: 4645294.376 ops/s
# Warmup Iteration   5: 3907981.671 ops/s
# Warmup Iteration   6: 4643033.624 ops/s
# Warmup Iteration   7: 4646620.105 ops/s
# Warmup Iteration   8: 4641956.168 ops/s
# Warmup Iteration   9: 4648876.717 ops/s
# Warmup Iteration  10: 4634517.285 ops/s
# Warmup Iteration  11: 4650934.098 ops/s
# Warmup Iteration  12: 4649134.684 ops/s
# Warmup Iteration  13: 4653323.376 ops/s
# Warmup Iteration  14: 4642524.972 ops/s
# Warmup Iteration  15: 4637752.930 ops/s
# Warmup Iteration  16: 4647645.690 ops/s
# Warmup Iteration  17: 4644282.924 ops/s
# Warmup Iteration  18: 4649363.955 ops/s
# Warmup Iteration  19: 4634005.704 ops/s
# Warmup Iteration  20: 4654983.167 ops/s
# Warmup Iteration  21: 4647451.190 ops/s
# Warmup Iteration  22: 4651967.609 ops/s
# Warmup Iteration  23: 4649623.413 ops/s
# Warmup Iteration  24: 4645492.707 ops/s
# Warmup Iteration  25: 4641646.926 ops/s
# Warmup Iteration  26: 4644248.230 ops/s
# Warmup Iteration  27: 4645326.705 ops/s
# Warmup Iteration  28: 4643797.359 ops/s
# Warmup Iteration  29: 4647874.852 ops/s
# Warmup Iteration  30: 4644064.955 ops/s
Iteration   1: 4640840.788 ops/s
Iteration   2: 4638672.906 ops/s
Iteration   3: 4640609.930 ops/s
Iteration   4: 4647780.489 ops/s
Iteration   5: 4622043.374 ops/s
Iteration   6: 4645380.292 ops/s
Iteration   7: 4645043.365 ops/s
Iteration   8: 4637508.202 ops/s
Iteration   9: 4630923.622 ops/s
Iteration  10: 4638091.153 ops/s
Iteration  11: 4630236.395 ops/s
Iteration  12: 4635857.610 ops/s
Iteration  13: 4635789.342 ops/s
Iteration  14: 4637527.889 ops/s
Iteration  15: 4626850.923 ops/s
Iteration  16: 4657026.235 ops/s
Iteration  17: 4657584.241 ops/s
Iteration  18: 4635635.174 ops/s
Iteration  19: 4640042.958 ops/s
Iteration  20: 4655553.394 ops/s
Iteration  21: 4638627.257 ops/s
Iteration  22: 4644094.160 ops/s
Iteration  23: 4656930.109 ops/s
Iteration  24: 4636310.534 ops/s
Iteration  25: 4646009.848 ops/s
Iteration  26: 4633516.005 ops/s
Iteration  27: 4660436.052 ops/s
Iteration  28: 4623006.357 ops/s
Iteration  29: 4637096.340 ops/s
Iteration  30: 4637982.017 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_summarizeFloat":
  4640433.565 ±(99.9%) 6579.035 ops/s [Average]
  (min, avg, max) = (4622043.374, 4640433.565, 4660436.052), stdev = 9847.190
  CI (99.9%): [4633854.531, 4647012.600] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_summarizeFloat  thrpt   30  4640433.565 ± 6579.035  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_summarizeInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_summarizeInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2237982.718 ops/s
# Warmup Iteration   2: 4445120.864 ops/s
# Warmup Iteration   3: 4655133.602 ops/s
# Warmup Iteration   4: 4689809.525 ops/s
# Warmup Iteration   5: 3943200.110 ops/s
# Warmup Iteration   6: 4713998.480 ops/s
# Warmup Iteration   7: 4707051.993 ops/s
# Warmup Iteration   8: 4697521.987 ops/s
# Warmup Iteration   9: 4709224.225 ops/s
# Warmup Iteration  10: 4691529.647 ops/s
# Warmup Iteration  11: 4692189.698 ops/s
# Warmup Iteration  12: 4703003.879 ops/s
# Warmup Iteration  13: 4704525.973 ops/s
# Warmup Iteration  14: 4711899.778 ops/s
# Warmup Iteration  15: 4702711.897 ops/s
# Warmup Iteration  16: 4714975.474 ops/s
# Warmup Iteration  17: 4700258.511 ops/s
# Warmup Iteration  18: 4703487.069 ops/s
# Warmup Iteration  19: 4697286.281 ops/s
# Warmup Iteration  20: 4710635.850 ops/s
# Warmup Iteration  21: 4709934.772 ops/s
# Warmup Iteration  22: 4699523.276 ops/s
# Warmup Iteration  23: 4707652.390 ops/s
# Warmup Iteration  24: 4710437.097 ops/s
# Warmup Iteration  25: 4707863.722 ops/s
# Warmup Iteration  26: 4697766.802 ops/s
# Warmup Iteration  27: 4702699.307 ops/s
# Warmup Iteration  28: 4686362.314 ops/s
# Warmup Iteration  29: 4697842.433 ops/s
# Warmup Iteration  30: 4705967.542 ops/s
Iteration   1: 4708657.780 ops/s
Iteration   2: 4704307.820 ops/s
Iteration   3: 4704567.962 ops/s
Iteration   4: 4699627.420 ops/s
Iteration   5: 4713622.472 ops/s
Iteration   6: 4709934.409 ops/s
Iteration   7: 4700905.737 ops/s
Iteration   8: 4691767.829 ops/s
Iteration   9: 4724928.610 ops/s
Iteration  10: 4696477.560 ops/s
Iteration  11: 4681366.303 ops/s
Iteration  12: 4710998.586 ops/s
Iteration  13: 4704721.462 ops/s
Iteration  14: 4661494.097 ops/s
Iteration  15: 4713906.398 ops/s
Iteration  16: 4693400.016 ops/s
Iteration  17: 4702741.173 ops/s
Iteration  18: 4703043.659 ops/s
Iteration  19: 4700465.764 ops/s
Iteration  20: 4695537.513 ops/s
Iteration  21: 4706012.886 ops/s
Iteration  22: 4716656.599 ops/s
Iteration  23: 4711225.329 ops/s
Iteration  24: 4690102.412 ops/s
Iteration  25: 4697355.192 ops/s
Iteration  26: 4699190.664 ops/s
Iteration  27: 4691656.705 ops/s
Iteration  28: 4695407.932 ops/s
Iteration  29: 4696753.816 ops/s
Iteration  30: 4704619.048 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_summarizeInt":
  4701048.438 ±(99.9%) 7829.959 ops/s [Average]
  (min, avg, max) = (4661494.097, 4701048.438, 4724928.610), stdev = 11719.516
  CI (99.9%): [4693218.479, 4708878.398] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_summarizeInt  thrpt   30  4701048.438 ± 7829.959  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_summarizeLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_summarizeLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2202832.303 ops/s
# Warmup Iteration   2: 4480558.181 ops/s
# Warmup Iteration   3: 4680516.627 ops/s
# Warmup Iteration   4: 4696819.439 ops/s
# Warmup Iteration   5: 3937449.558 ops/s
# Warmup Iteration   6: 4696345.878 ops/s
# Warmup Iteration   7: 4700230.045 ops/s
# Warmup Iteration   8: 4680010.811 ops/s
# Warmup Iteration   9: 4698047.288 ops/s
# Warmup Iteration  10: 4686189.828 ops/s
# Warmup Iteration  11: 4696620.367 ops/s
# Warmup Iteration  12: 4690023.004 ops/s
# Warmup Iteration  13: 4695775.615 ops/s
# Warmup Iteration  14: 4707090.361 ops/s
# Warmup Iteration  15: 4700814.785 ops/s
# Warmup Iteration  16: 4705215.625 ops/s
# Warmup Iteration  17: 4713094.499 ops/s
# Warmup Iteration  18: 4718742.597 ops/s
# Warmup Iteration  19: 4709467.842 ops/s
# Warmup Iteration  20: 4696672.564 ops/s
# Warmup Iteration  21: 4699441.675 ops/s
# Warmup Iteration  22: 4710314.198 ops/s
# Warmup Iteration  23: 4716685.439 ops/s
# Warmup Iteration  24: 4707563.682 ops/s
# Warmup Iteration  25: 4713643.469 ops/s
# Warmup Iteration  26: 4718626.652 ops/s
# Warmup Iteration  27: 4702891.315 ops/s
# Warmup Iteration  28: 4707330.459 ops/s
# Warmup Iteration  29: 4718584.420 ops/s
# Warmup Iteration  30: 4713744.671 ops/s
Iteration   1: 4715782.745 ops/s
Iteration   2: 4724439.887 ops/s
Iteration   3: 4706442.377 ops/s
Iteration   4: 4706480.313 ops/s
Iteration   5: 4698789.212 ops/s
Iteration   6: 4710601.674 ops/s
Iteration   7: 4718642.051 ops/s
Iteration   8: 4712406.908 ops/s
Iteration   9: 4719988.546 ops/s
Iteration  10: 4701273.083 ops/s
Iteration  11: 4711627.730 ops/s
Iteration  12: 4729696.655 ops/s
Iteration  13: 4720460.318 ops/s
Iteration  14: 4723114.337 ops/s
Iteration  15: 4711348.444 ops/s
Iteration  16: 4718997.991 ops/s
Iteration  17: 4706105.169 ops/s
Iteration  18: 4694646.835 ops/s
Iteration  19: 4722797.275 ops/s
Iteration  20: 4701180.581 ops/s
Iteration  21: 4692321.407 ops/s
Iteration  22: 4716857.881 ops/s
Iteration  23: 4718480.013 ops/s
Iteration  24: 4704394.492 ops/s
Iteration  25: 4714778.540 ops/s
Iteration  26: 4719595.468 ops/s
Iteration  27: 4710035.822 ops/s
Iteration  28: 4716473.556 ops/s
Iteration  29: 4682491.350 ops/s
Iteration  30: 4696193.017 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_summarizeLong":
  4710881.456 ±(99.9%) 7277.096 ops/s [Average]
  (min, avg, max) = (4682491.350, 4710881.456, 4729696.655), stdev = 10892.016
  CI (99.9%): [4703604.360, 4718158.552] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_summarizeLong  thrpt   30  4710881.456 ± 7277.096  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 189838.833 ops/s
# Warmup Iteration   2: 320968.993 ops/s
# Warmup Iteration   3: 370626.963 ops/s
# Warmup Iteration   4: 372113.267 ops/s
# Warmup Iteration   5: 372139.058 ops/s
# Warmup Iteration   6: 312981.857 ops/s
# Warmup Iteration   7: 370110.718 ops/s
# Warmup Iteration   8: 369984.848 ops/s
# Warmup Iteration   9: 370722.601 ops/s
# Warmup Iteration  10: 371085.023 ops/s
# Warmup Iteration  11: 369849.314 ops/s
# Warmup Iteration  12: 371183.303 ops/s
# Warmup Iteration  13: 371062.945 ops/s
# Warmup Iteration  14: 370341.028 ops/s
# Warmup Iteration  15: 371537.366 ops/s
# Warmup Iteration  16: 370259.163 ops/s
# Warmup Iteration  17: 370743.031 ops/s
# Warmup Iteration  18: 372246.396 ops/s
# Warmup Iteration  19: 371773.262 ops/s
# Warmup Iteration  20: 372338.069 ops/s
# Warmup Iteration  21: 371541.601 ops/s
# Warmup Iteration  22: 371498.576 ops/s
# Warmup Iteration  23: 370944.490 ops/s
# Warmup Iteration  24: 370952.705 ops/s
# Warmup Iteration  25: 371378.303 ops/s
# Warmup Iteration  26: 371640.625 ops/s
# Warmup Iteration  27: 370404.716 ops/s
# Warmup Iteration  28: 371623.349 ops/s
# Warmup Iteration  29: 370048.864 ops/s
# Warmup Iteration  30: 372134.846 ops/s
Iteration   1: 371089.602 ops/s
Iteration   2: 371277.301 ops/s
Iteration   3: 370516.116 ops/s
Iteration   4: 371400.182 ops/s
Iteration   5: 371161.824 ops/s
Iteration   6: 372153.596 ops/s
Iteration   7: 371488.173 ops/s
Iteration   8: 371831.090 ops/s
Iteration   9: 370241.925 ops/s
Iteration  10: 371782.324 ops/s
Iteration  11: 371371.447 ops/s
Iteration  12: 370768.703 ops/s
Iteration  13: 372473.852 ops/s
Iteration  14: 371690.805 ops/s
Iteration  15: 371606.639 ops/s
Iteration  16: 371576.041 ops/s
Iteration  17: 372832.260 ops/s
Iteration  18: 370181.233 ops/s
Iteration  19: 372552.721 ops/s
Iteration  20: 370966.511 ops/s
Iteration  21: 371069.270 ops/s
Iteration  22: 371547.191 ops/s
Iteration  23: 372490.503 ops/s
Iteration  24: 371569.630 ops/s
Iteration  25: 372217.786 ops/s
Iteration  26: 370784.479 ops/s
Iteration  27: 372457.311 ops/s
Iteration  28: 371063.969 ops/s
Iteration  29: 370959.992 ops/s
Iteration  30: 371885.279 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_take":
  371500.259 ±(99.9%) 459.502 ops/s [Average]
  (min, avg, max) = (370181.233, 371500.259, 372832.260), stdev = 687.761
  CI (99.9%): [371040.756, 371959.761] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_take  thrpt   30  371500.259 ± 459.502  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 266598.105 ops/s
# Warmup Iteration   2: 489558.976 ops/s
# Warmup Iteration   3: 558498.303 ops/s
# Warmup Iteration   4: 558760.352 ops/s
# Warmup Iteration   5: 560022.140 ops/s
# Warmup Iteration   6: 469515.367 ops/s
# Warmup Iteration   7: 560342.936 ops/s
# Warmup Iteration   8: 559064.093 ops/s
# Warmup Iteration   9: 559912.184 ops/s
# Warmup Iteration  10: 558035.143 ops/s
# Warmup Iteration  11: 559712.441 ops/s
# Warmup Iteration  12: 559981.979 ops/s
# Warmup Iteration  13: 560482.059 ops/s
# Warmup Iteration  14: 560503.520 ops/s
# Warmup Iteration  15: 557731.162 ops/s
# Warmup Iteration  16: 559511.965 ops/s
# Warmup Iteration  17: 558255.198 ops/s
# Warmup Iteration  18: 560575.214 ops/s
# Warmup Iteration  19: 559253.682 ops/s
# Warmup Iteration  20: 559267.396 ops/s
# Warmup Iteration  21: 560220.242 ops/s
# Warmup Iteration  22: 560564.847 ops/s
# Warmup Iteration  23: 559641.529 ops/s
# Warmup Iteration  24: 559615.021 ops/s
# Warmup Iteration  25: 561192.513 ops/s
# Warmup Iteration  26: 561111.998 ops/s
# Warmup Iteration  27: 560397.598 ops/s
# Warmup Iteration  28: 559674.291 ops/s
# Warmup Iteration  29: 558766.725 ops/s
# Warmup Iteration  30: 559084.205 ops/s
Iteration   1: 560526.732 ops/s
Iteration   2: 554061.553 ops/s
Iteration   3: 560536.009 ops/s
Iteration   4: 557932.580 ops/s
Iteration   5: 562170.981 ops/s
Iteration   6: 560560.705 ops/s
Iteration   7: 562254.189 ops/s
Iteration   8: 561141.723 ops/s
Iteration   9: 561607.286 ops/s
Iteration  10: 558936.494 ops/s
Iteration  11: 560671.841 ops/s
Iteration  12: 561606.487 ops/s
Iteration  13: 558763.664 ops/s
Iteration  14: 560431.994 ops/s
Iteration  15: 560409.513 ops/s
Iteration  16: 562144.460 ops/s
Iteration  17: 558544.062 ops/s
Iteration  18: 558892.802 ops/s
Iteration  19: 560205.148 ops/s
Iteration  20: 559981.280 ops/s
Iteration  21: 560563.726 ops/s
Iteration  22: 559990.747 ops/s
Iteration  23: 558003.854 ops/s
Iteration  24: 559474.474 ops/s
Iteration  25: 560385.755 ops/s
Iteration  26: 561042.652 ops/s
Iteration  27: 557353.043 ops/s
Iteration  28: 559456.036 ops/s
Iteration  29: 559770.031 ops/s
Iteration  30: 559000.539 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_takeWhile":
  559880.679 ±(99.9%) 1122.599 ops/s [Average]
  (min, avg, max) = (554061.553, 559880.679, 562254.189), stdev = 1680.254
  CI (99.9%): [558758.079, 561003.278] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_takeWhile  thrpt   30  559880.679 ± 1122.599  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 587656.031 ops/s
# Warmup Iteration   2: 682807.719 ops/s
# Warmup Iteration   3: 888695.739 ops/s
# Warmup Iteration   4: 887350.563 ops/s
# Warmup Iteration   5: 879672.730 ops/s
# Warmup Iteration   6: 886759.927 ops/s
# Warmup Iteration   7: 888527.476 ops/s
# Warmup Iteration   8: 886810.261 ops/s
# Warmup Iteration   9: 887605.357 ops/s
# Warmup Iteration  10: 745347.735 ops/s
# Warmup Iteration  11: 887979.254 ops/s
# Warmup Iteration  12: 887985.491 ops/s
# Warmup Iteration  13: 885666.433 ops/s
# Warmup Iteration  14: 891824.092 ops/s
# Warmup Iteration  15: 887413.001 ops/s
# Warmup Iteration  16: 892753.830 ops/s
# Warmup Iteration  17: 937564.384 ops/s
# Warmup Iteration  18: 932279.033 ops/s
# Warmup Iteration  19: 935146.730 ops/s
# Warmup Iteration  20: 935205.463 ops/s
# Warmup Iteration  21: 933908.675 ops/s
# Warmup Iteration  22: 933070.005 ops/s
# Warmup Iteration  23: 935158.938 ops/s
# Warmup Iteration  24: 937085.928 ops/s
# Warmup Iteration  25: 935705.785 ops/s
# Warmup Iteration  26: 933682.156 ops/s
# Warmup Iteration  27: 935277.393 ops/s
# Warmup Iteration  28: 934909.858 ops/s
# Warmup Iteration  29: 932135.411 ops/s
# Warmup Iteration  30: 935917.566 ops/s
Iteration   1: 934260.278 ops/s
Iteration   2: 934612.047 ops/s
Iteration   3: 929949.214 ops/s
Iteration   4: 934515.492 ops/s
Iteration   5: 932504.725 ops/s
Iteration   6: 936243.268 ops/s
Iteration   7: 900643.574 ops/s
Iteration   8: 929263.986 ops/s
Iteration   9: 934336.541 ops/s
Iteration  10: 936633.418 ops/s
Iteration  11: 934463.725 ops/s
Iteration  12: 931384.733 ops/s
Iteration  13: 932436.945 ops/s
Iteration  14: 935645.674 ops/s
Iteration  15: 940099.354 ops/s
Iteration  16: 934848.413 ops/s
Iteration  17: 932188.775 ops/s
Iteration  18: 938312.257 ops/s
Iteration  19: 931857.702 ops/s
Iteration  20: 935445.392 ops/s
Iteration  21: 936693.003 ops/s
Iteration  22: 934229.672 ops/s
Iteration  23: 931456.021 ops/s
Iteration  24: 934335.190 ops/s
Iteration  25: 935263.296 ops/s
Iteration  26: 931287.753 ops/s
Iteration  27: 936449.490 ops/s
Iteration  28: 932424.982 ops/s
Iteration  29: 934962.027 ops/s
Iteration  30: 931053.700 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_take_throws":
  932926.688 ±(99.9%) 4389.121 ops/s [Average]
  (min, avg, max) = (900643.574, 932926.688, 940099.354), stdev = 6569.431
  CI (99.9%): [928537.567, 937315.809] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_take_throws  thrpt   30  932926.688 ± 4389.121  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 682484.298 ops/s
# Warmup Iteration   2: 1216276.783 ops/s
# Warmup Iteration   3: 1374420.034 ops/s
# Warmup Iteration   4: 1379473.971 ops/s
# Warmup Iteration   5: 1377800.537 ops/s
# Warmup Iteration   6: 1154618.529 ops/s
# Warmup Iteration   7: 1383155.148 ops/s
# Warmup Iteration   8: 1379139.738 ops/s
# Warmup Iteration   9: 1381316.242 ops/s
# Warmup Iteration  10: 1383471.002 ops/s
# Warmup Iteration  11: 1384468.873 ops/s
# Warmup Iteration  12: 1378607.683 ops/s
# Warmup Iteration  13: 1382778.703 ops/s
# Warmup Iteration  14: 1379209.889 ops/s
# Warmup Iteration  15: 1380871.170 ops/s
# Warmup Iteration  16: 1385187.031 ops/s
# Warmup Iteration  17: 1380669.286 ops/s
# Warmup Iteration  18: 1381939.043 ops/s
# Warmup Iteration  19: 1377569.616 ops/s
# Warmup Iteration  20: 1378652.193 ops/s
# Warmup Iteration  21: 1378881.616 ops/s
# Warmup Iteration  22: 1383430.096 ops/s
# Warmup Iteration  23: 1382428.325 ops/s
# Warmup Iteration  24: 1383699.436 ops/s
# Warmup Iteration  25: 1382838.389 ops/s
# Warmup Iteration  26: 1381687.108 ops/s
# Warmup Iteration  27: 1385395.983 ops/s
# Warmup Iteration  28: 1382767.734 ops/s
# Warmup Iteration  29: 1387416.517 ops/s
# Warmup Iteration  30: 1385327.799 ops/s
Iteration   1: 1383648.969 ops/s
Iteration   2: 1385941.346 ops/s
Iteration   3: 1378915.089 ops/s
Iteration   4: 1378057.228 ops/s
Iteration   5: 1383515.277 ops/s
Iteration   6: 1382513.993 ops/s
Iteration   7: 1384454.050 ops/s
Iteration   8: 1377686.522 ops/s
Iteration   9: 1368924.406 ops/s
Iteration  10: 1380073.530 ops/s
Iteration  11: 1377180.005 ops/s
Iteration  12: 1381325.767 ops/s
Iteration  13: 1381853.480 ops/s
Iteration  14: 1386672.022 ops/s
Iteration  15: 1379184.571 ops/s
Iteration  16: 1375682.858 ops/s
Iteration  17: 1385437.947 ops/s
Iteration  18: 1381708.601 ops/s
Iteration  19: 1386028.813 ops/s
Iteration  20: 1380238.010 ops/s
Iteration  21: 1381657.114 ops/s
Iteration  22: 1382937.354 ops/s
Iteration  23: 1384751.845 ops/s
Iteration  24: 1386153.230 ops/s
Iteration  25: 1384705.582 ops/s
Iteration  26: 1387931.742 ops/s
Iteration  27: 1380955.129 ops/s
Iteration  28: 1383809.091 ops/s
Iteration  29: 1388964.695 ops/s
Iteration  30: 1383613.514 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_tap":
  1382150.726 ±(99.9%) 2754.458 ops/s [Average]
  (min, avg, max) = (1368924.406, 1382150.726, 1388964.695), stdev = 4122.743
  CI (99.9%): [1379396.268, 1384905.184] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_tap  thrpt   30  1382150.726 ± 2754.458  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_testClone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_testClone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 642567.490 ops/s
# Warmup Iteration   2: 1204517.332 ops/s
# Warmup Iteration   3: 1343715.344 ops/s
# Warmup Iteration   4: 1352588.491 ops/s
# Warmup Iteration   5: 1301828.028 ops/s
# Warmup Iteration   6: 1176417.398 ops/s
# Warmup Iteration   7: 1344704.847 ops/s
# Warmup Iteration   8: 1346842.175 ops/s
# Warmup Iteration   9: 1348907.508 ops/s
# Warmup Iteration  10: 1349519.942 ops/s
# Warmup Iteration  11: 1346845.974 ops/s
# Warmup Iteration  12: 1348163.509 ops/s
# Warmup Iteration  13: 1350479.120 ops/s
# Warmup Iteration  14: 1346245.842 ops/s
# Warmup Iteration  15: 1349256.195 ops/s
# Warmup Iteration  16: 1348673.676 ops/s
# Warmup Iteration  17: 1347952.913 ops/s
# Warmup Iteration  18: 1345775.941 ops/s
# Warmup Iteration  19: 1346512.244 ops/s
# Warmup Iteration  20: 1346743.597 ops/s
# Warmup Iteration  21: 1345547.764 ops/s
# Warmup Iteration  22: 1349514.550 ops/s
# Warmup Iteration  23: 1349537.705 ops/s
# Warmup Iteration  24: 1345490.454 ops/s
# Warmup Iteration  25: 1349677.572 ops/s
# Warmup Iteration  26: 1342897.965 ops/s
# Warmup Iteration  27: 1348502.851 ops/s
# Warmup Iteration  28: 1347502.205 ops/s
# Warmup Iteration  29: 1347264.380 ops/s
# Warmup Iteration  30: 1350397.279 ops/s
Iteration   1: 1350223.758 ops/s
Iteration   2: 1346707.213 ops/s
Iteration   3: 1350529.533 ops/s
Iteration   4: 1351327.154 ops/s
Iteration   5: 1350108.201 ops/s
Iteration   6: 1346685.839 ops/s
Iteration   7: 1351239.821 ops/s
Iteration   8: 1346792.485 ops/s
Iteration   9: 1345671.970 ops/s
Iteration  10: 1348883.892 ops/s
Iteration  11: 1343870.240 ops/s
Iteration  12: 1344779.509 ops/s
Iteration  13: 1349531.000 ops/s
Iteration  14: 1345442.560 ops/s
Iteration  15: 1352814.583 ops/s
Iteration  16: 1352023.227 ops/s
Iteration  17: 1350803.213 ops/s
Iteration  18: 1345810.306 ops/s
Iteration  19: 1349443.498 ops/s
Iteration  20: 1352791.543 ops/s
Iteration  21: 1352320.296 ops/s
Iteration  22: 1349308.910 ops/s
Iteration  23: 1349351.302 ops/s
Iteration  24: 1349202.241 ops/s
Iteration  25: 1352584.788 ops/s
Iteration  26: 1348228.726 ops/s
Iteration  27: 1346193.362 ops/s
Iteration  28: 1351530.819 ops/s
Iteration  29: 1347218.581 ops/s
Iteration  30: 1346078.356 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_testClone":
  1348916.564 ±(99.9%) 1760.411 ops/s [Average]
  (min, avg, max) = (1343870.240, 1348916.564, 1352814.583), stdev = 2634.900
  CI (99.9%): [1347156.154, 1350676.975] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_testClone  thrpt   30  1348916.564 ± 1760.411  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_testNewCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_testNewCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3921644.136 ops/s
# Warmup Iteration   2: 8217671.482 ops/s
# Warmup Iteration   3: 8400879.022 ops/s
# Warmup Iteration   4: 7079098.764 ops/s
# Warmup Iteration   5: 8421991.480 ops/s
# Warmup Iteration   6: 8407374.981 ops/s
# Warmup Iteration   7: 8412595.118 ops/s
# Warmup Iteration   8: 8405113.612 ops/s
# Warmup Iteration   9: 8419674.620 ops/s
# Warmup Iteration  10: 8409690.589 ops/s
# Warmup Iteration  11: 8413410.478 ops/s
# Warmup Iteration  12: 8398663.735 ops/s
# Warmup Iteration  13: 8413122.884 ops/s
# Warmup Iteration  14: 8402932.370 ops/s
# Warmup Iteration  15: 8424914.153 ops/s
# Warmup Iteration  16: 8409353.181 ops/s
# Warmup Iteration  17: 8414081.653 ops/s
# Warmup Iteration  18: 8421687.200 ops/s
# Warmup Iteration  19: 8404253.194 ops/s
# Warmup Iteration  20: 8402201.076 ops/s
# Warmup Iteration  21: 8405682.500 ops/s
# Warmup Iteration  22: 8408202.040 ops/s
# Warmup Iteration  23: 8405580.082 ops/s
# Warmup Iteration  24: 8406126.746 ops/s
# Warmup Iteration  25: 8422871.547 ops/s
# Warmup Iteration  26: 8402505.061 ops/s
# Warmup Iteration  27: 8412844.635 ops/s
# Warmup Iteration  28: 8400504.251 ops/s
# Warmup Iteration  29: 8408392.081 ops/s
# Warmup Iteration  30: 8402568.828 ops/s
Iteration   1: 8423884.001 ops/s
Iteration   2: 8434648.178 ops/s
Iteration   3: 8418596.503 ops/s
Iteration   4: 8414594.565 ops/s
Iteration   5: 8422621.230 ops/s
Iteration   6: 8376934.495 ops/s
Iteration   7: 8402686.452 ops/s
Iteration   8: 8403911.655 ops/s
Iteration   9: 8409835.472 ops/s
Iteration  10: 8411879.790 ops/s
Iteration  11: 8381919.556 ops/s
Iteration  12: 8402474.000 ops/s
Iteration  13: 8425306.778 ops/s
Iteration  14: 8387711.885 ops/s
Iteration  15: 8432054.501 ops/s
Iteration  16: 8404353.633 ops/s
Iteration  17: 8418822.956 ops/s
Iteration  18: 8423273.590 ops/s
Iteration  19: 8409985.969 ops/s
Iteration  20: 8381284.905 ops/s
Iteration  21: 8403450.096 ops/s
Iteration  22: 8426947.437 ops/s
Iteration  23: 8439030.965 ops/s
Iteration  24: 8405516.973 ops/s
Iteration  25: 8394422.427 ops/s
Iteration  26: 8423321.868 ops/s
Iteration  27: 8426336.723 ops/s
Iteration  28: 8435333.053 ops/s
Iteration  29: 8417317.273 ops/s
Iteration  30: 8399664.131 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_testNewCollection":
  8411937.369 ±(99.9%) 11086.132 ops/s [Average]
  (min, avg, max) = (8376934.495, 8411937.369, 8439030.965), stdev = 16593.202
  CI (99.9%): [8400851.236, 8423023.501] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
TreeBagTest._Benchmark.benchmark_testNewCollection  thrpt   30  8411937.369 ± 11086.132  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_testNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_testNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2432259.363 ops/s
# Warmup Iteration   2: 5260805.160 ops/s
# Warmup Iteration   3: 4494836.477 ops/s
# Warmup Iteration   4: 5315652.448 ops/s
# Warmup Iteration   5: 5305436.603 ops/s
# Warmup Iteration   6: 5306363.262 ops/s
# Warmup Iteration   7: 5288042.184 ops/s
# Warmup Iteration   8: 5301804.620 ops/s
# Warmup Iteration   9: 5281933.629 ops/s
# Warmup Iteration  10: 5302605.839 ops/s
# Warmup Iteration  11: 5296376.803 ops/s
# Warmup Iteration  12: 5301004.869 ops/s
# Warmup Iteration  13: 5297056.112 ops/s
# Warmup Iteration  14: 5300103.546 ops/s
# Warmup Iteration  15: 5301486.539 ops/s
# Warmup Iteration  16: 5305218.923 ops/s
# Warmup Iteration  17: 5298124.799 ops/s
# Warmup Iteration  18: 5294953.316 ops/s
# Warmup Iteration  19: 5291876.419 ops/s
# Warmup Iteration  20: 5297400.543 ops/s
# Warmup Iteration  21: 5285883.649 ops/s
# Warmup Iteration  22: 5271160.140 ops/s
# Warmup Iteration  23: 5275449.874 ops/s
# Warmup Iteration  24: 5292061.222 ops/s
# Warmup Iteration  25: 5294635.282 ops/s
# Warmup Iteration  26: 5289152.830 ops/s
# Warmup Iteration  27: 5277393.562 ops/s
# Warmup Iteration  28: 5288004.783 ops/s
# Warmup Iteration  29: 5305801.819 ops/s
# Warmup Iteration  30: 5297488.421 ops/s
Iteration   1: 5311579.916 ops/s
Iteration   2: 5281858.140 ops/s
Iteration   3: 5319464.425 ops/s
Iteration   4: 5328716.139 ops/s
Iteration   5: 5303033.989 ops/s
Iteration   6: 5303153.516 ops/s
Iteration   7: 5299796.522 ops/s
Iteration   8: 5303363.317 ops/s
Iteration   9: 5306279.105 ops/s
Iteration  10: 5306392.429 ops/s
Iteration  11: 5304270.675 ops/s
Iteration  12: 5319683.291 ops/s
Iteration  13: 5318675.764 ops/s
Iteration  14: 5308101.692 ops/s
Iteration  15: 5264856.954 ops/s
Iteration  16: 5310141.276 ops/s
Iteration  17: 5297366.550 ops/s
Iteration  18: 5285875.232 ops/s
Iteration  19: 5303167.060 ops/s
Iteration  20: 5316788.470 ops/s
Iteration  21: 5301264.721 ops/s
Iteration  22: 5322781.067 ops/s
Iteration  23: 5297885.364 ops/s
Iteration  24: 5277582.752 ops/s
Iteration  25: 5322252.196 ops/s
Iteration  26: 5300582.551 ops/s
Iteration  27: 5323834.934 ops/s
Iteration  28: 5311380.787 ops/s
Iteration  29: 5317821.172 ops/s
Iteration  30: 5303385.798 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_testNewWith":
  5305711.193 ±(99.9%) 9614.093 ops/s [Average]
  (min, avg, max) = (5264856.954, 5305711.193, 5328716.139), stdev = 14389.923
  CI (99.9%): [5296097.100, 5315325.287] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_testNewWith  thrpt   30  5305711.193 ± 9614.093  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_testNewWithVarArgs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_testNewWithVarArgs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1512605.071 ops/s
# Warmup Iteration   2: 3327629.212 ops/s
# Warmup Iteration   3: 2827646.498 ops/s
# Warmup Iteration   4: 3381779.186 ops/s
# Warmup Iteration   5: 3362670.287 ops/s
# Warmup Iteration   6: 3361747.003 ops/s
# Warmup Iteration   7: 3340854.227 ops/s
# Warmup Iteration   8: 3324541.786 ops/s
# Warmup Iteration   9: 3346237.357 ops/s
# Warmup Iteration  10: 3344370.519 ops/s
# Warmup Iteration  11: 3366074.789 ops/s
# Warmup Iteration  12: 3364046.996 ops/s
# Warmup Iteration  13: 3351557.367 ops/s
# Warmup Iteration  14: 3378696.123 ops/s
# Warmup Iteration  15: 3348807.959 ops/s
# Warmup Iteration  16: 3360699.809 ops/s
# Warmup Iteration  17: 3366415.796 ops/s
# Warmup Iteration  18: 3364249.200 ops/s
# Warmup Iteration  19: 3365940.039 ops/s
# Warmup Iteration  20: 3365960.521 ops/s
# Warmup Iteration  21: 3339586.111 ops/s
# Warmup Iteration  22: 3358950.529 ops/s
# Warmup Iteration  23: 3358469.823 ops/s
# Warmup Iteration  24: 3375523.617 ops/s
# Warmup Iteration  25: 3357174.333 ops/s
# Warmup Iteration  26: 3360340.369 ops/s
# Warmup Iteration  27: 3368330.340 ops/s
# Warmup Iteration  28: 3358466.104 ops/s
# Warmup Iteration  29: 3362343.091 ops/s
# Warmup Iteration  30: 3378747.060 ops/s
Iteration   1: 3353760.560 ops/s
Iteration   2: 3360305.112 ops/s
Iteration   3: 3355625.448 ops/s
Iteration   4: 3355167.660 ops/s
Iteration   5: 3372834.771 ops/s
Iteration   6: 3355529.085 ops/s
Iteration   7: 3373611.061 ops/s
Iteration   8: 3364007.906 ops/s
Iteration   9: 3359394.663 ops/s
Iteration  10: 3368125.819 ops/s
Iteration  11: 3366822.603 ops/s
Iteration  12: 3363434.690 ops/s
Iteration  13: 3372900.300 ops/s
Iteration  14: 3382376.231 ops/s
Iteration  15: 3364243.564 ops/s
Iteration  16: 3354104.883 ops/s
Iteration  17: 3360921.022 ops/s
Iteration  18: 3352313.808 ops/s
Iteration  19: 3376522.416 ops/s
Iteration  20: 3364884.517 ops/s
Iteration  21: 3391383.706 ops/s
Iteration  22: 3379658.556 ops/s
Iteration  23: 3403104.638 ops/s
Iteration  24: 3351931.741 ops/s
Iteration  25: 3351829.838 ops/s
Iteration  26: 3336892.773 ops/s
Iteration  27: 3356110.942 ops/s
Iteration  28: 3365529.041 ops/s
Iteration  29: 3382052.333 ops/s
Iteration  30: 3376590.936 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_testNewWithVarArgs":
  3365732.354 ±(99.9%) 9104.753 ops/s [Average]
  (min, avg, max) = (3336892.773, 3365732.354, 3403104.638), stdev = 13627.566
  CI (99.9%): [3356627.601, 3374837.107] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_testNewWithVarArgs  thrpt   30  3365732.354 ± 9104.753  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_testNewWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_testNewWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2042507.124 ops/s
# Warmup Iteration   2: 4385447.495 ops/s
# Warmup Iteration   3: 3754299.973 ops/s
# Warmup Iteration   4: 4452799.850 ops/s
# Warmup Iteration   5: 4448413.351 ops/s
# Warmup Iteration   6: 4447798.245 ops/s
# Warmup Iteration   7: 4464678.846 ops/s
# Warmup Iteration   8: 4444513.349 ops/s
# Warmup Iteration   9: 4434953.535 ops/s
# Warmup Iteration  10: 4433715.492 ops/s
# Warmup Iteration  11: 4424753.462 ops/s
# Warmup Iteration  12: 4438706.342 ops/s
# Warmup Iteration  13: 4460394.912 ops/s
# Warmup Iteration  14: 4448992.755 ops/s
# Warmup Iteration  15: 4488168.490 ops/s
# Warmup Iteration  16: 4454100.430 ops/s
# Warmup Iteration  17: 4468607.483 ops/s
# Warmup Iteration  18: 4460024.175 ops/s
# Warmup Iteration  19: 4434084.589 ops/s
# Warmup Iteration  20: 4457524.486 ops/s
# Warmup Iteration  21: 4443814.146 ops/s
# Warmup Iteration  22: 4431821.925 ops/s
# Warmup Iteration  23: 4432503.788 ops/s
# Warmup Iteration  24: 4436159.638 ops/s
# Warmup Iteration  25: 4429983.401 ops/s
# Warmup Iteration  26: 4432793.252 ops/s
# Warmup Iteration  27: 4460742.592 ops/s
# Warmup Iteration  28: 4474193.679 ops/s
# Warmup Iteration  29: 4425271.975 ops/s
# Warmup Iteration  30: 4425089.488 ops/s
Iteration   1: 4417184.453 ops/s
Iteration   2: 4446837.340 ops/s
Iteration   3: 4439685.124 ops/s
Iteration   4: 4466653.350 ops/s
Iteration   5: 4417617.364 ops/s
Iteration   6: 4425417.924 ops/s
Iteration   7: 4456870.120 ops/s
Iteration   8: 4452930.117 ops/s
Iteration   9: 4473446.145 ops/s
Iteration  10: 4459280.035 ops/s
Iteration  11: 4420491.625 ops/s
Iteration  12: 4473446.086 ops/s
Iteration  13: 4457792.255 ops/s
Iteration  14: 4439538.006 ops/s
Iteration  15: 4481558.853 ops/s
Iteration  16: 4431497.309 ops/s
Iteration  17: 4432593.935 ops/s
Iteration  18: 4448123.870 ops/s
Iteration  19: 4433234.066 ops/s
Iteration  20: 4486274.396 ops/s
Iteration  21: 4494204.621 ops/s
Iteration  22: 4411369.026 ops/s
Iteration  23: 4478922.192 ops/s
Iteration  24: 4433612.418 ops/s
Iteration  25: 4431837.030 ops/s
Iteration  26: 4458450.097 ops/s
Iteration  27: 4450543.274 ops/s
Iteration  28: 4476722.402 ops/s
Iteration  29: 4448477.962 ops/s
Iteration  30: 4454716.854 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_testNewWithWith":
  4449977.608 ±(99.9%) 14856.377 ops/s [Average]
  (min, avg, max) = (4411369.026, 4449977.608, 4494204.621), stdev = 22236.328
  CI (99.9%): [4435121.231, 4464833.986] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
TreeBagTest._Benchmark.benchmark_testNewWithWith  thrpt   30  4449977.608 ± 14856.377  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_testNewWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_testNewWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1715521.815 ops/s
# Warmup Iteration   2: 3783521.723 ops/s
# Warmup Iteration   3: 3232341.129 ops/s
# Warmup Iteration   4: 3827543.228 ops/s
# Warmup Iteration   5: 3801914.992 ops/s
# Warmup Iteration   6: 3829824.906 ops/s
# Warmup Iteration   7: 3798489.014 ops/s
# Warmup Iteration   8: 3813988.461 ops/s
# Warmup Iteration   9: 3833018.871 ops/s
# Warmup Iteration  10: 3810691.984 ops/s
# Warmup Iteration  11: 3826471.472 ops/s
# Warmup Iteration  12: 3818882.363 ops/s
# Warmup Iteration  13: 3821623.642 ops/s
# Warmup Iteration  14: 3836993.223 ops/s
# Warmup Iteration  15: 3829329.188 ops/s
# Warmup Iteration  16: 3839968.324 ops/s
# Warmup Iteration  17: 3842967.362 ops/s
# Warmup Iteration  18: 3826093.303 ops/s
# Warmup Iteration  19: 3836483.418 ops/s
# Warmup Iteration  20: 3816627.498 ops/s
# Warmup Iteration  21: 3838679.079 ops/s
# Warmup Iteration  22: 3837724.456 ops/s
# Warmup Iteration  23: 3827018.122 ops/s
# Warmup Iteration  24: 3837744.398 ops/s
# Warmup Iteration  25: 3833967.057 ops/s
# Warmup Iteration  26: 3844810.577 ops/s
# Warmup Iteration  27: 3831401.120 ops/s
# Warmup Iteration  28: 3835655.910 ops/s
# Warmup Iteration  29: 3836267.023 ops/s
# Warmup Iteration  30: 3830428.133 ops/s
Iteration   1: 3837981.480 ops/s
Iteration   2: 3844165.184 ops/s
Iteration   3: 3834748.236 ops/s
Iteration   4: 3828908.254 ops/s
Iteration   5: 3835544.523 ops/s
Iteration   6: 3819226.223 ops/s
Iteration   7: 3840989.410 ops/s
Iteration   8: 3827005.627 ops/s
Iteration   9: 3826581.952 ops/s
Iteration  10: 3824237.723 ops/s
Iteration  11: 3831818.621 ops/s
Iteration  12: 3813858.309 ops/s
Iteration  13: 3838917.539 ops/s
Iteration  14: 3839399.865 ops/s
Iteration  15: 3828237.432 ops/s
Iteration  16: 3842565.344 ops/s
Iteration  17: 3834554.426 ops/s
Iteration  18: 3842108.092 ops/s
Iteration  19: 3834964.263 ops/s
Iteration  20: 3842563.298 ops/s
Iteration  21: 3831749.188 ops/s
Iteration  22: 3829327.235 ops/s
Iteration  23: 3842114.076 ops/s
Iteration  24: 3823742.800 ops/s
Iteration  25: 3845135.918 ops/s
Iteration  26: 3834052.013 ops/s
Iteration  27: 3839019.205 ops/s
Iteration  28: 3828084.728 ops/s
Iteration  29: 3830294.784 ops/s
Iteration  30: 3821162.277 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_testNewWithWithWith":
  3833101.934 ±(99.9%) 5352.921 ops/s [Average]
  (min, avg, max) = (3813858.309, 3833101.934, 3845135.918), stdev = 8012.001
  CI (99.9%): [3827749.013, 3838454.855] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_testNewWithWithWith  thrpt   30  3833101.934 ± 5352.921  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 360212.376 ops/s
# Warmup Iteration   2: 678282.306 ops/s
# Warmup Iteration   3: 731360.546 ops/s
# Warmup Iteration   4: 737031.772 ops/s
# Warmup Iteration   5: 633748.817 ops/s
# Warmup Iteration   6: 717747.638 ops/s
# Warmup Iteration   7: 735527.515 ops/s
# Warmup Iteration   8: 733819.878 ops/s
# Warmup Iteration   9: 733442.648 ops/s
# Warmup Iteration  10: 732145.130 ops/s
# Warmup Iteration  11: 734582.778 ops/s
# Warmup Iteration  12: 736491.331 ops/s
# Warmup Iteration  13: 735458.978 ops/s
# Warmup Iteration  14: 736466.558 ops/s
# Warmup Iteration  15: 734835.045 ops/s
# Warmup Iteration  16: 735444.918 ops/s
# Warmup Iteration  17: 732255.990 ops/s
# Warmup Iteration  18: 729908.667 ops/s
# Warmup Iteration  19: 733379.470 ops/s
# Warmup Iteration  20: 731969.327 ops/s
# Warmup Iteration  21: 733142.406 ops/s
# Warmup Iteration  22: 735448.929 ops/s
# Warmup Iteration  23: 735110.208 ops/s
# Warmup Iteration  24: 732848.595 ops/s
# Warmup Iteration  25: 733307.454 ops/s
# Warmup Iteration  26: 731422.759 ops/s
# Warmup Iteration  27: 734233.738 ops/s
# Warmup Iteration  28: 733379.998 ops/s
# Warmup Iteration  29: 731614.919 ops/s
# Warmup Iteration  30: 733366.569 ops/s
Iteration   1: 731565.387 ops/s
Iteration   2: 733221.628 ops/s
Iteration   3: 733725.532 ops/s
Iteration   4: 729810.885 ops/s
Iteration   5: 735871.548 ops/s
Iteration   6: 733386.333 ops/s
Iteration   7: 734735.376 ops/s
Iteration   8: 732179.963 ops/s
Iteration   9: 732413.402 ops/s
Iteration  10: 732061.117 ops/s
Iteration  11: 729571.218 ops/s
Iteration  12: 732938.371 ops/s
Iteration  13: 734593.579 ops/s
Iteration  14: 733153.059 ops/s
Iteration  15: 733633.882 ops/s
Iteration  16: 733282.677 ops/s
Iteration  17: 734264.907 ops/s
Iteration  18: 733876.983 ops/s
Iteration  19: 733504.922 ops/s
Iteration  20: 728704.347 ops/s
Iteration  21: 734659.199 ops/s
Iteration  22: 734221.986 ops/s
Iteration  23: 732221.188 ops/s
Iteration  24: 736344.836 ops/s
Iteration  25: 733849.613 ops/s
Iteration  26: 735456.155 ops/s
Iteration  27: 734051.508 ops/s
Iteration  28: 731881.700 ops/s
Iteration  29: 734509.422 ops/s
Iteration  30: 729992.174 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_testToString":
  733122.763 ±(99.9%) 1228.280 ops/s [Average]
  (min, avg, max) = (728704.347, 733122.763, 736344.836), stdev = 1838.431
  CI (99.9%): [731894.483, 734351.043] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_testToString  thrpt   30  733122.763 ± 1228.280  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 385945.704 ops/s
# Warmup Iteration   2: 724879.032 ops/s
# Warmup Iteration   3: 788479.887 ops/s
# Warmup Iteration   4: 792671.877 ops/s
# Warmup Iteration   5: 714345.826 ops/s
# Warmup Iteration   6: 745014.153 ops/s
# Warmup Iteration   7: 796283.656 ops/s
# Warmup Iteration   8: 796510.053 ops/s
# Warmup Iteration   9: 794645.081 ops/s
# Warmup Iteration  10: 792920.294 ops/s
# Warmup Iteration  11: 794058.714 ops/s
# Warmup Iteration  12: 793735.654 ops/s
# Warmup Iteration  13: 793153.213 ops/s
# Warmup Iteration  14: 792852.390 ops/s
# Warmup Iteration  15: 794302.095 ops/s
# Warmup Iteration  16: 794710.907 ops/s
# Warmup Iteration  17: 792415.303 ops/s
# Warmup Iteration  18: 790398.454 ops/s
# Warmup Iteration  19: 790652.820 ops/s
# Warmup Iteration  20: 790304.701 ops/s
# Warmup Iteration  21: 792911.534 ops/s
# Warmup Iteration  22: 793375.980 ops/s
# Warmup Iteration  23: 794947.427 ops/s
# Warmup Iteration  24: 793474.662 ops/s
# Warmup Iteration  25: 792867.844 ops/s
# Warmup Iteration  26: 793044.044 ops/s
# Warmup Iteration  27: 792932.841 ops/s
# Warmup Iteration  28: 792816.952 ops/s
# Warmup Iteration  29: 792175.475 ops/s
# Warmup Iteration  30: 794189.098 ops/s
Iteration   1: 792315.219 ops/s
Iteration   2: 793383.577 ops/s
Iteration   3: 793664.114 ops/s
Iteration   4: 794318.518 ops/s
Iteration   5: 793526.624 ops/s
Iteration   6: 792717.999 ops/s
Iteration   7: 793135.327 ops/s
Iteration   8: 794335.191 ops/s
Iteration   9: 793198.386 ops/s
Iteration  10: 789155.525 ops/s
Iteration  11: 795255.036 ops/s
Iteration  12: 793288.929 ops/s
Iteration  13: 793118.956 ops/s
Iteration  14: 794020.971 ops/s
Iteration  15: 792211.261 ops/s
Iteration  16: 792943.522 ops/s
Iteration  17: 793965.860 ops/s
Iteration  18: 791709.409 ops/s
Iteration  19: 795162.840 ops/s
Iteration  20: 795176.491 ops/s
Iteration  21: 792772.968 ops/s
Iteration  22: 792714.922 ops/s
Iteration  23: 793866.550 ops/s
Iteration  24: 795034.893 ops/s
Iteration  25: 793723.397 ops/s
Iteration  26: 791933.352 ops/s
Iteration  27: 793508.703 ops/s
Iteration  28: 792626.946 ops/s
Iteration  29: 792637.285 ops/s
Iteration  30: 790174.879 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toArray":
  793186.588 ±(99.9%) 901.408 ops/s [Average]
  (min, avg, max) = (789155.525, 793186.588, 795255.036), stdev = 1349.186
  CI (99.9%): [792285.180, 794087.997] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_toArray  thrpt   30  793186.588 ± 901.408  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 376189.677 ops/s
# Warmup Iteration   2: 637469.990 ops/s
# Warmup Iteration   3: 754165.436 ops/s
# Warmup Iteration   4: 760748.598 ops/s
# Warmup Iteration   5: 758909.889 ops/s
# Warmup Iteration   6: 667386.297 ops/s
# Warmup Iteration   7: 720968.019 ops/s
# Warmup Iteration   8: 756287.426 ops/s
# Warmup Iteration   9: 757204.979 ops/s
# Warmup Iteration  10: 754958.700 ops/s
# Warmup Iteration  11: 756232.676 ops/s
# Warmup Iteration  12: 759047.966 ops/s
# Warmup Iteration  13: 757376.410 ops/s
# Warmup Iteration  14: 756591.003 ops/s
# Warmup Iteration  15: 756675.702 ops/s
# Warmup Iteration  16: 757133.153 ops/s
# Warmup Iteration  17: 758349.365 ops/s
# Warmup Iteration  18: 756765.104 ops/s
# Warmup Iteration  19: 754559.452 ops/s
# Warmup Iteration  20: 756537.561 ops/s
# Warmup Iteration  21: 756708.260 ops/s
# Warmup Iteration  22: 757166.981 ops/s
# Warmup Iteration  23: 758388.331 ops/s
# Warmup Iteration  24: 758445.690 ops/s
# Warmup Iteration  25: 756650.085 ops/s
# Warmup Iteration  26: 757659.204 ops/s
# Warmup Iteration  27: 757996.896 ops/s
# Warmup Iteration  28: 758988.768 ops/s
# Warmup Iteration  29: 757811.682 ops/s
# Warmup Iteration  30: 757217.171 ops/s
Iteration   1: 754742.582 ops/s
Iteration   2: 759696.168 ops/s
Iteration   3: 759767.756 ops/s
Iteration   4: 757189.926 ops/s
Iteration   5: 754734.822 ops/s
Iteration   6: 759164.027 ops/s
Iteration   7: 755228.367 ops/s
Iteration   8: 756823.100 ops/s
Iteration   9: 756783.984 ops/s
Iteration  10: 758729.602 ops/s
Iteration  11: 758122.957 ops/s
Iteration  12: 762601.851 ops/s
Iteration  13: 759666.633 ops/s
Iteration  14: 760011.232 ops/s
Iteration  15: 756297.109 ops/s
Iteration  16: 756107.257 ops/s
Iteration  17: 755942.574 ops/s
Iteration  18: 759332.388 ops/s
Iteration  19: 756862.117 ops/s
Iteration  20: 757766.523 ops/s
Iteration  21: 756854.619 ops/s
Iteration  22: 760496.340 ops/s
Iteration  23: 753980.637 ops/s
Iteration  24: 756876.866 ops/s
Iteration  25: 757434.745 ops/s
Iteration  26: 758010.774 ops/s
Iteration  27: 757267.411 ops/s
Iteration  28: 759618.130 ops/s
Iteration  29: 755613.656 ops/s
Iteration  30: 760153.728 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toBag":
  757729.263 ±(99.9%) 1352.184 ops/s [Average]
  (min, avg, max) = (753980.637, 757729.263, 762601.851), stdev = 2023.886
  CI (99.9%): [756377.079, 759081.447] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_toBag  thrpt   30  757729.263 ± 1352.184  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 93326.444 ops/s
# Warmup Iteration   2: 125780.132 ops/s
# Warmup Iteration   3: 161170.347 ops/s
# Warmup Iteration   4: 160295.746 ops/s
# Warmup Iteration   5: 161315.576 ops/s
# Warmup Iteration   6: 161455.185 ops/s
# Warmup Iteration   7: 161045.407 ops/s
# Warmup Iteration   8: 147881.789 ops/s
# Warmup Iteration   9: 146975.398 ops/s
# Warmup Iteration  10: 161262.764 ops/s
# Warmup Iteration  11: 161038.990 ops/s
# Warmup Iteration  12: 161487.273 ops/s
# Warmup Iteration  13: 161294.663 ops/s
# Warmup Iteration  14: 161535.950 ops/s
# Warmup Iteration  15: 161754.366 ops/s
# Warmup Iteration  16: 161772.399 ops/s
# Warmup Iteration  17: 166581.574 ops/s
# Warmup Iteration  18: 166740.819 ops/s
# Warmup Iteration  19: 166568.916 ops/s
# Warmup Iteration  20: 166192.776 ops/s
# Warmup Iteration  21: 166303.473 ops/s
# Warmup Iteration  22: 166400.990 ops/s
# Warmup Iteration  23: 166851.458 ops/s
# Warmup Iteration  24: 166020.064 ops/s
# Warmup Iteration  25: 166686.975 ops/s
# Warmup Iteration  26: 166508.680 ops/s
# Warmup Iteration  27: 166431.649 ops/s
# Warmup Iteration  28: 165693.587 ops/s
# Warmup Iteration  29: 166761.059 ops/s
# Warmup Iteration  30: 166314.123 ops/s
Iteration   1: 166950.254 ops/s
Iteration   2: 167132.804 ops/s
Iteration   3: 165980.738 ops/s
Iteration   4: 166476.639 ops/s
Iteration   5: 166494.797 ops/s
Iteration   6: 166470.999 ops/s
Iteration   7: 166675.691 ops/s
Iteration   8: 166420.830 ops/s
Iteration   9: 166306.465 ops/s
Iteration  10: 166378.453 ops/s
Iteration  11: 165650.254 ops/s
Iteration  12: 166940.757 ops/s
Iteration  13: 166388.622 ops/s
Iteration  14: 165236.526 ops/s
Iteration  15: 166125.516 ops/s
Iteration  16: 166021.946 ops/s
Iteration  17: 166799.638 ops/s
Iteration  18: 167062.803 ops/s
Iteration  19: 166533.340 ops/s
Iteration  20: 166707.152 ops/s
Iteration  21: 166187.219 ops/s
Iteration  22: 166812.364 ops/s
Iteration  23: 167119.845 ops/s
Iteration  24: 165697.494 ops/s
Iteration  25: 166863.450 ops/s
Iteration  26: 166529.154 ops/s
Iteration  27: 166489.112 ops/s
Iteration  28: 166867.562 ops/s
Iteration  29: 166343.592 ops/s
Iteration  30: 164410.814 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toBiMap":
  166402.494 ±(99.9%) 390.437 ops/s [Average]
  (min, avg, max) = (164410.814, 166402.494, 167132.804), stdev = 584.387
  CI (99.9%): [166012.058, 166792.931] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_toBiMap  thrpt   30  166402.494 ± 390.437  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1144792.708 ops/s
# Warmup Iteration   2: 2323295.973 ops/s
# Warmup Iteration   3: 2568120.592 ops/s
# Warmup Iteration   4: 2573491.563 ops/s
# Warmup Iteration   5: 2135902.969 ops/s
# Warmup Iteration   6: 2574834.127 ops/s
# Warmup Iteration   7: 2575299.297 ops/s
# Warmup Iteration   8: 2566833.046 ops/s
# Warmup Iteration   9: 2571768.243 ops/s
# Warmup Iteration  10: 2576084.118 ops/s
# Warmup Iteration  11: 2577942.677 ops/s
# Warmup Iteration  12: 2578220.239 ops/s
# Warmup Iteration  13: 2573889.129 ops/s
# Warmup Iteration  14: 2577055.969 ops/s
# Warmup Iteration  15: 2578097.915 ops/s
# Warmup Iteration  16: 2578412.793 ops/s
# Warmup Iteration  17: 2581758.265 ops/s
# Warmup Iteration  18: 2570529.506 ops/s
# Warmup Iteration  19: 2572501.697 ops/s
# Warmup Iteration  20: 2575691.807 ops/s
# Warmup Iteration  21: 2569023.742 ops/s
# Warmup Iteration  22: 2579801.196 ops/s
# Warmup Iteration  23: 2570061.026 ops/s
# Warmup Iteration  24: 2575137.946 ops/s
# Warmup Iteration  25: 2581345.863 ops/s
# Warmup Iteration  26: 2577141.521 ops/s
# Warmup Iteration  27: 2573092.199 ops/s
# Warmup Iteration  28: 2572055.713 ops/s
# Warmup Iteration  29: 2579800.221 ops/s
# Warmup Iteration  30: 2583559.211 ops/s
Iteration   1: 2581628.476 ops/s
Iteration   2: 2582521.330 ops/s
Iteration   3: 2584729.549 ops/s
Iteration   4: 2574203.805 ops/s
Iteration   5: 2577149.037 ops/s
Iteration   6: 2575827.887 ops/s
Iteration   7: 2576431.344 ops/s
Iteration   8: 2578833.085 ops/s
Iteration   9: 2573584.631 ops/s
Iteration  10: 2577782.347 ops/s
Iteration  11: 2577449.162 ops/s
Iteration  12: 2571180.200 ops/s
Iteration  13: 2577772.828 ops/s
Iteration  14: 2579713.795 ops/s
Iteration  15: 2577095.006 ops/s
Iteration  16: 2582573.049 ops/s
Iteration  17: 2574754.040 ops/s
Iteration  18: 2575665.541 ops/s
Iteration  19: 2576693.976 ops/s
Iteration  20: 2584332.173 ops/s
Iteration  21: 2580864.619 ops/s
Iteration  22: 2567764.362 ops/s
Iteration  23: 2578960.800 ops/s
Iteration  24: 2582810.414 ops/s
Iteration  25: 2549678.376 ops/s
Iteration  26: 2576986.193 ops/s
Iteration  27: 2583247.379 ops/s
Iteration  28: 2578409.979 ops/s
Iteration  29: 2577254.923 ops/s
Iteration  30: 2579207.023 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toCollection":
  2577170.178 ±(99.9%) 4297.761 ops/s [Average]
  (min, avg, max) = (2549678.376, 2577170.178, 2584729.549), stdev = 6432.687
  CI (99.9%): [2572872.417, 2581467.939] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_toCollection  thrpt   30  2577170.178 ± 4297.761  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 332267.720 ops/s
# Warmup Iteration   2: 424860.369 ops/s
# Warmup Iteration   3: 536857.187 ops/s
# Warmup Iteration   4: 536642.064 ops/s
# Warmup Iteration   5: 539728.299 ops/s
# Warmup Iteration   6: 538862.780 ops/s
# Warmup Iteration   7: 539696.648 ops/s
# Warmup Iteration   8: 539385.116 ops/s
# Warmup Iteration   9: 450873.876 ops/s
# Warmup Iteration  10: 539879.304 ops/s
# Warmup Iteration  11: 539320.330 ops/s
# Warmup Iteration  12: 539878.282 ops/s
# Warmup Iteration  13: 539841.323 ops/s
# Warmup Iteration  14: 538664.215 ops/s
# Warmup Iteration  15: 539293.815 ops/s
# Warmup Iteration  16: 539858.206 ops/s
# Warmup Iteration  17: 540302.336 ops/s
# Warmup Iteration  18: 540535.806 ops/s
# Warmup Iteration  19: 541359.957 ops/s
# Warmup Iteration  20: 539415.828 ops/s
# Warmup Iteration  21: 539567.243 ops/s
# Warmup Iteration  22: 538502.732 ops/s
# Warmup Iteration  23: 539978.086 ops/s
# Warmup Iteration  24: 539705.775 ops/s
# Warmup Iteration  25: 539458.581 ops/s
# Warmup Iteration  26: 541289.392 ops/s
# Warmup Iteration  27: 538524.367 ops/s
# Warmup Iteration  28: 539819.485 ops/s
# Warmup Iteration  29: 539144.586 ops/s
# Warmup Iteration  30: 538515.046 ops/s
Iteration   1: 539538.854 ops/s
Iteration   2: 540381.889 ops/s
Iteration   3: 538787.181 ops/s
Iteration   4: 538833.896 ops/s
Iteration   5: 540886.739 ops/s
Iteration   6: 540386.125 ops/s
Iteration   7: 538346.003 ops/s
Iteration   8: 539760.025 ops/s
Iteration   9: 540051.071 ops/s
Iteration  10: 538312.704 ops/s
Iteration  11: 540746.185 ops/s
Iteration  12: 540906.272 ops/s
Iteration  13: 539189.906 ops/s
Iteration  14: 541183.085 ops/s
Iteration  15: 540375.012 ops/s
Iteration  16: 539678.311 ops/s
Iteration  17: 539373.593 ops/s
Iteration  18: 540788.245 ops/s
Iteration  19: 539654.093 ops/s
Iteration  20: 539505.193 ops/s
Iteration  21: 540512.097 ops/s
Iteration  22: 540201.321 ops/s
Iteration  23: 540794.706 ops/s
Iteration  24: 540655.792 ops/s
Iteration  25: 540201.201 ops/s
Iteration  26: 539631.851 ops/s
Iteration  27: 539279.989 ops/s
Iteration  28: 540725.202 ops/s
Iteration  29: 538387.969 ops/s
Iteration  30: 538498.363 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutable":
  539852.429 ±(99.9%) 576.722 ops/s [Average]
  (min, avg, max) = (538312.704, 539852.429, 541183.085), stdev = 863.211
  CI (99.9%): [539275.707, 540429.152] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_toImmutable  thrpt   30  539852.429 ± 576.722  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 479787.757 ops/s
# Warmup Iteration   2: 811419.171 ops/s
# Warmup Iteration   3: 987844.282 ops/s
# Warmup Iteration   4: 997232.320 ops/s
# Warmup Iteration   5: 995820.340 ops/s
# Warmup Iteration   6: 968518.746 ops/s
# Warmup Iteration   7: 854637.973 ops/s
# Warmup Iteration   8: 996962.961 ops/s
# Warmup Iteration   9: 997670.306 ops/s
# Warmup Iteration  10: 998171.422 ops/s
# Warmup Iteration  11: 997963.446 ops/s
# Warmup Iteration  12: 994402.749 ops/s
# Warmup Iteration  13: 993840.136 ops/s
# Warmup Iteration  14: 996055.955 ops/s
# Warmup Iteration  15: 996462.524 ops/s
# Warmup Iteration  16: 995227.151 ops/s
# Warmup Iteration  17: 996314.148 ops/s
# Warmup Iteration  18: 995398.537 ops/s
# Warmup Iteration  19: 995728.086 ops/s
# Warmup Iteration  20: 997144.764 ops/s
# Warmup Iteration  21: 992676.192 ops/s
# Warmup Iteration  22: 997677.387 ops/s
# Warmup Iteration  23: 995529.939 ops/s
# Warmup Iteration  24: 995593.255 ops/s
# Warmup Iteration  25: 998354.688 ops/s
# Warmup Iteration  26: 998054.448 ops/s
# Warmup Iteration  27: 998207.765 ops/s
# Warmup Iteration  28: 997074.374 ops/s
# Warmup Iteration  29: 997962.562 ops/s
# Warmup Iteration  30: 998199.626 ops/s
Iteration   1: 999786.849 ops/s
Iteration   2: 1000495.333 ops/s
Iteration   3: 994021.879 ops/s
Iteration   4: 994810.300 ops/s
Iteration   5: 997629.966 ops/s
Iteration   6: 999626.717 ops/s
Iteration   7: 997389.295 ops/s
Iteration   8: 1000011.485 ops/s
Iteration   9: 997363.483 ops/s
Iteration  10: 998706.691 ops/s
Iteration  11: 995465.229 ops/s
Iteration  12: 996712.852 ops/s
Iteration  13: 993771.500 ops/s
Iteration  14: 998176.916 ops/s
Iteration  15: 995173.182 ops/s
Iteration  16: 998529.195 ops/s
Iteration  17: 997678.525 ops/s
Iteration  18: 1000831.108 ops/s
Iteration  19: 993348.754 ops/s
Iteration  20: 1000256.109 ops/s
Iteration  21: 999300.829 ops/s
Iteration  22: 994514.116 ops/s
Iteration  23: 999843.593 ops/s
Iteration  24: 997855.609 ops/s
Iteration  25: 1000816.903 ops/s
Iteration  26: 994611.432 ops/s
Iteration  27: 1001356.766 ops/s
Iteration  28: 992789.194 ops/s
Iteration  29: 1002126.560 ops/s
Iteration  30: 997413.203 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableBag":
  997680.452 ±(99.9%) 1763.490 ops/s [Average]
  (min, avg, max) = (992789.194, 997680.452, 1002126.560), stdev = 2639.509
  CI (99.9%): [995916.962, 999443.942] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
TreeBagTest._Benchmark.benchmark_toImmutableBag  thrpt   30  997680.452 ± 1763.490  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 81717.814 ops/s
# Warmup Iteration   2: 110032.374 ops/s
# Warmup Iteration   3: 139421.721 ops/s
# Warmup Iteration   4: 138649.672 ops/s
# Warmup Iteration   5: 140021.689 ops/s
# Warmup Iteration   6: 139736.535 ops/s
# Warmup Iteration   7: 139641.878 ops/s
# Warmup Iteration   8: 136387.598 ops/s
# Warmup Iteration   9: 121209.299 ops/s
# Warmup Iteration  10: 139810.163 ops/s
# Warmup Iteration  11: 139225.427 ops/s
# Warmup Iteration  12: 139804.848 ops/s
# Warmup Iteration  13: 139521.725 ops/s
# Warmup Iteration  14: 139602.576 ops/s
# Warmup Iteration  15: 139782.056 ops/s
# Warmup Iteration  16: 139599.875 ops/s
# Warmup Iteration  17: 143411.314 ops/s
# Warmup Iteration  18: 143524.313 ops/s
# Warmup Iteration  19: 143314.193 ops/s
# Warmup Iteration  20: 142400.630 ops/s
# Warmup Iteration  21: 143216.343 ops/s
# Warmup Iteration  22: 143173.741 ops/s
# Warmup Iteration  23: 143349.982 ops/s
# Warmup Iteration  24: 143173.866 ops/s
# Warmup Iteration  25: 143713.612 ops/s
# Warmup Iteration  26: 143424.898 ops/s
# Warmup Iteration  27: 143762.469 ops/s
# Warmup Iteration  28: 143378.287 ops/s
# Warmup Iteration  29: 143431.900 ops/s
# Warmup Iteration  30: 143051.287 ops/s
Iteration   1: 143414.934 ops/s
Iteration   2: 142996.493 ops/s
Iteration   3: 143571.111 ops/s
Iteration   4: 142990.381 ops/s
Iteration   5: 143363.618 ops/s
Iteration   6: 143931.812 ops/s
Iteration   7: 142841.040 ops/s
Iteration   8: 143003.150 ops/s
Iteration   9: 142401.122 ops/s
Iteration  10: 142966.022 ops/s
Iteration  11: 143667.047 ops/s
Iteration  12: 143789.356 ops/s
Iteration  13: 143921.631 ops/s
Iteration  14: 143802.970 ops/s
Iteration  15: 143598.485 ops/s
Iteration  16: 143350.880 ops/s
Iteration  17: 143965.062 ops/s
Iteration  18: 143339.443 ops/s
Iteration  19: 143730.916 ops/s
Iteration  20: 143097.053 ops/s
Iteration  21: 143447.900 ops/s
Iteration  22: 143874.381 ops/s
Iteration  23: 143559.668 ops/s
Iteration  24: 142877.651 ops/s
Iteration  25: 142865.067 ops/s
Iteration  26: 143622.612 ops/s
Iteration  27: 143475.418 ops/s
Iteration  28: 143556.271 ops/s
Iteration  29: 143066.104 ops/s
Iteration  30: 143806.793 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableBiMap":
  143396.480 ±(99.9%) 268.733 ops/s [Average]
  (min, avg, max) = (142401.122, 143396.480, 143965.062), stdev = 402.227
  CI (99.9%): [143127.747, 143665.213] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_toImmutableBiMap  thrpt   30  143396.480 ± 268.733  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 660055.224 ops/s
# Warmup Iteration   2: 1153938.157 ops/s
# Warmup Iteration   3: 1324364.255 ops/s
# Warmup Iteration   4: 1322065.234 ops/s
# Warmup Iteration   5: 1332309.913 ops/s
# Warmup Iteration   6: 1105157.429 ops/s
# Warmup Iteration   7: 1333882.468 ops/s
# Warmup Iteration   8: 1331435.145 ops/s
# Warmup Iteration   9: 1334208.466 ops/s
# Warmup Iteration  10: 1333306.864 ops/s
# Warmup Iteration  11: 1333829.336 ops/s
# Warmup Iteration  12: 1335921.741 ops/s
# Warmup Iteration  13: 1336175.945 ops/s
# Warmup Iteration  14: 1332021.738 ops/s
# Warmup Iteration  15: 1333653.670 ops/s
# Warmup Iteration  16: 1334538.860 ops/s
# Warmup Iteration  17: 1333143.487 ops/s
# Warmup Iteration  18: 1335368.357 ops/s
# Warmup Iteration  19: 1330869.521 ops/s
# Warmup Iteration  20: 1333620.108 ops/s
# Warmup Iteration  21: 1329674.231 ops/s
# Warmup Iteration  22: 1335885.450 ops/s
# Warmup Iteration  23: 1333075.804 ops/s
# Warmup Iteration  24: 1333002.863 ops/s
# Warmup Iteration  25: 1331639.447 ops/s
# Warmup Iteration  26: 1330799.441 ops/s
# Warmup Iteration  27: 1331495.985 ops/s
# Warmup Iteration  28: 1333079.404 ops/s
# Warmup Iteration  29: 1333849.548 ops/s
# Warmup Iteration  30: 1326798.755 ops/s
Iteration   1: 1328781.796 ops/s
Iteration   2: 1336252.652 ops/s
Iteration   3: 1325209.909 ops/s
Iteration   4: 1337766.112 ops/s
Iteration   5: 1335074.971 ops/s
Iteration   6: 1336927.859 ops/s
Iteration   7: 1332444.898 ops/s
Iteration   8: 1330704.415 ops/s
Iteration   9: 1338067.164 ops/s
Iteration  10: 1333589.299 ops/s
Iteration  11: 1333118.009 ops/s
Iteration  12: 1326509.253 ops/s
Iteration  13: 1335832.375 ops/s
Iteration  14: 1334906.924 ops/s
Iteration  15: 1336551.530 ops/s
Iteration  16: 1329802.541 ops/s
Iteration  17: 1334712.971 ops/s
Iteration  18: 1332871.437 ops/s
Iteration  19: 1334119.359 ops/s
Iteration  20: 1333362.736 ops/s
Iteration  21: 1334041.558 ops/s
Iteration  22: 1338020.732 ops/s
Iteration  23: 1336569.644 ops/s
Iteration  24: 1336669.318 ops/s
Iteration  25: 1330259.006 ops/s
Iteration  26: 1336759.587 ops/s
Iteration  27: 1331245.399 ops/s
Iteration  28: 1332604.781 ops/s
Iteration  29: 1337426.613 ops/s
Iteration  30: 1332797.794 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableList":
  1333766.688 ±(99.9%) 2231.340 ops/s [Average]
  (min, avg, max) = (1325209.909, 1333766.688, 1338067.164), stdev = 3339.764
  CI (99.9%): [1331535.348, 1335998.028] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_toImmutableList  thrpt   30  1333766.688 ± 2231.340  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 565775.417 ops/s
# Warmup Iteration   2: 1236284.149 ops/s
# Warmup Iteration   3: 1297941.206 ops/s
# Warmup Iteration   4: 1260089.840 ops/s
# Warmup Iteration   5: 1138728.148 ops/s
# Warmup Iteration   6: 1314104.555 ops/s
# Warmup Iteration   7: 1301350.786 ops/s
# Warmup Iteration   8: 1307800.122 ops/s
# Warmup Iteration   9: 1300432.400 ops/s
# Warmup Iteration  10: 1301169.575 ops/s
# Warmup Iteration  11: 1302625.879 ops/s
# Warmup Iteration  12: 1305761.391 ops/s
# Warmup Iteration  13: 1304172.731 ops/s
# Warmup Iteration  14: 1308427.602 ops/s
# Warmup Iteration  15: 1307042.252 ops/s
# Warmup Iteration  16: 1299201.069 ops/s
# Warmup Iteration  17: 1295156.185 ops/s
# Warmup Iteration  18: 1304025.117 ops/s
# Warmup Iteration  19: 1294118.517 ops/s
# Warmup Iteration  20: 1309141.115 ops/s
# Warmup Iteration  21: 1302785.938 ops/s
# Warmup Iteration  22: 1313236.489 ops/s
# Warmup Iteration  23: 1305721.540 ops/s
# Warmup Iteration  24: 1302095.689 ops/s
# Warmup Iteration  25: 1307333.890 ops/s
# Warmup Iteration  26: 1298838.016 ops/s
# Warmup Iteration  27: 1310569.646 ops/s
# Warmup Iteration  28: 1299529.192 ops/s
# Warmup Iteration  29: 1298818.227 ops/s
# Warmup Iteration  30: 1304765.334 ops/s
Iteration   1: 1298865.413 ops/s
Iteration   2: 1301444.849 ops/s
Iteration   3: 1299185.672 ops/s
Iteration   4: 1298218.853 ops/s
Iteration   5: 1296602.489 ops/s
Iteration   6: 1304388.509 ops/s
Iteration   7: 1299109.678 ops/s
Iteration   8: 1290569.524 ops/s
Iteration   9: 1310439.574 ops/s
Iteration  10: 1271254.873 ops/s
Iteration  11: 1311215.806 ops/s
Iteration  12: 1310464.124 ops/s
Iteration  13: 1302122.741 ops/s
Iteration  14: 1307357.760 ops/s
Iteration  15: 1308215.427 ops/s
Iteration  16: 1310444.854 ops/s
Iteration  17: 1268851.402 ops/s
Iteration  18: 1300093.179 ops/s
Iteration  19: 1307388.925 ops/s
Iteration  20: 1300786.299 ops/s
Iteration  21: 1303372.118 ops/s
Iteration  22: 1303629.349 ops/s
Iteration  23: 1304810.915 ops/s
Iteration  24: 1301136.619 ops/s
Iteration  25: 1308033.117 ops/s
Iteration  26: 1312816.748 ops/s
Iteration  27: 1305107.717 ops/s
Iteration  28: 1306300.003 ops/s
Iteration  29: 1301749.286 ops/s
Iteration  30: 1307256.553 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableMap":
  1301707.746 ±(99.9%) 6647.376 ops/s [Average]
  (min, avg, max) = (1268851.402, 1301707.746, 1312816.748), stdev = 9949.480
  CI (99.9%): [1295060.370, 1308355.122] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_toImmutableMap  thrpt   30  1301707.746 ± 6647.376  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 586587.141 ops/s
# Warmup Iteration   2: 969088.034 ops/s
# Warmup Iteration   3: 1138957.084 ops/s
# Warmup Iteration   4: 1146972.672 ops/s
# Warmup Iteration   5: 1147101.499 ops/s
# Warmup Iteration   6: 1049391.119 ops/s
# Warmup Iteration   7: 1053149.057 ops/s
# Warmup Iteration   8: 1145426.122 ops/s
# Warmup Iteration   9: 1146099.294 ops/s
# Warmup Iteration  10: 1146529.617 ops/s
# Warmup Iteration  11: 1147145.027 ops/s
# Warmup Iteration  12: 1147602.213 ops/s
# Warmup Iteration  13: 1146520.677 ops/s
# Warmup Iteration  14: 1146081.599 ops/s
# Warmup Iteration  15: 1147119.581 ops/s
# Warmup Iteration  16: 1144908.376 ops/s
# Warmup Iteration  17: 1147223.465 ops/s
# Warmup Iteration  18: 1146398.148 ops/s
# Warmup Iteration  19: 1146242.659 ops/s
# Warmup Iteration  20: 1145482.616 ops/s
# Warmup Iteration  21: 1144291.864 ops/s
# Warmup Iteration  22: 1146457.604 ops/s
# Warmup Iteration  23: 1146937.079 ops/s
# Warmup Iteration  24: 1144611.016 ops/s
# Warmup Iteration  25: 1146103.577 ops/s
# Warmup Iteration  26: 1146733.666 ops/s
# Warmup Iteration  27: 1144991.346 ops/s
# Warmup Iteration  28: 1145345.796 ops/s
# Warmup Iteration  29: 1149009.095 ops/s
# Warmup Iteration  30: 1146794.935 ops/s
Iteration   1: 1150005.566 ops/s
Iteration   2: 1146086.750 ops/s
Iteration   3: 1151921.245 ops/s
Iteration   4: 1146413.094 ops/s
Iteration   5: 1150522.310 ops/s
Iteration   6: 1145823.678 ops/s
Iteration   7: 1147763.208 ops/s
Iteration   8: 1145570.627 ops/s
Iteration   9: 1148151.157 ops/s
Iteration  10: 1145070.970 ops/s
Iteration  11: 1149427.076 ops/s
Iteration  12: 1143492.746 ops/s
Iteration  13: 1147514.212 ops/s
Iteration  14: 1147281.524 ops/s
Iteration  15: 1146548.912 ops/s
Iteration  16: 1145641.929 ops/s
Iteration  17: 1149293.943 ops/s
Iteration  18: 1141330.564 ops/s
Iteration  19: 1147632.971 ops/s
Iteration  20: 1146535.753 ops/s
Iteration  21: 1145562.661 ops/s
Iteration  22: 1146745.125 ops/s
Iteration  23: 1145971.831 ops/s
Iteration  24: 1143591.166 ops/s
Iteration  25: 1148084.001 ops/s
Iteration  26: 1144939.909 ops/s
Iteration  27: 1145868.919 ops/s
Iteration  28: 1144775.467 ops/s
Iteration  29: 1148217.569 ops/s
Iteration  30: 1143197.043 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSet":
  1146632.731 ±(99.9%) 1533.854 ops/s [Average]
  (min, avg, max) = (1141330.564, 1146632.731, 1151921.245), stdev = 2295.800
  CI (99.9%): [1145098.877, 1148166.584] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_toImmutableSet  thrpt   30  1146632.731 ± 1533.854  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 521653.777 ops/s
# Warmup Iteration   2: 984705.629 ops/s
# Warmup Iteration   3: 1099845.335 ops/s
# Warmup Iteration   4: 1106282.367 ops/s
# Warmup Iteration   5: 1043292.232 ops/s
# Warmup Iteration   6: 988834.724 ops/s
# Warmup Iteration   7: 1104021.660 ops/s
# Warmup Iteration   8: 1106035.220 ops/s
# Warmup Iteration   9: 1106448.679 ops/s
# Warmup Iteration  10: 1108287.068 ops/s
# Warmup Iteration  11: 1106446.425 ops/s
# Warmup Iteration  12: 1108353.622 ops/s
# Warmup Iteration  13: 1108578.085 ops/s
# Warmup Iteration  14: 1105857.476 ops/s
# Warmup Iteration  15: 1102088.147 ops/s
# Warmup Iteration  16: 1099477.792 ops/s
# Warmup Iteration  17: 1106400.398 ops/s
# Warmup Iteration  18: 1107404.003 ops/s
# Warmup Iteration  19: 1105313.448 ops/s
# Warmup Iteration  20: 1106083.816 ops/s
# Warmup Iteration  21: 1107057.215 ops/s
# Warmup Iteration  22: 1104137.186 ops/s
# Warmup Iteration  23: 1107606.022 ops/s
# Warmup Iteration  24: 1101342.173 ops/s
# Warmup Iteration  25: 1106607.106 ops/s
# Warmup Iteration  26: 1107284.321 ops/s
# Warmup Iteration  27: 1106783.027 ops/s
# Warmup Iteration  28: 1108124.914 ops/s
# Warmup Iteration  29: 1105225.501 ops/s
# Warmup Iteration  30: 1105005.177 ops/s
Iteration   1: 1103883.456 ops/s
Iteration   2: 1107236.318 ops/s
Iteration   3: 1102372.141 ops/s
Iteration   4: 1106813.429 ops/s
Iteration   5: 1105734.771 ops/s
Iteration   6: 1106871.140 ops/s
Iteration   7: 1107090.445 ops/s
Iteration   8: 1106135.574 ops/s
Iteration   9: 1107340.180 ops/s
Iteration  10: 1104184.691 ops/s
Iteration  11: 1106710.086 ops/s
Iteration  12: 1108202.325 ops/s
Iteration  13: 1104351.509 ops/s
Iteration  14: 1108511.438 ops/s
Iteration  15: 1105111.531 ops/s
Iteration  16: 1106724.995 ops/s
Iteration  17: 1106159.836 ops/s
Iteration  18: 1103836.341 ops/s
Iteration  19: 1105629.004 ops/s
Iteration  20: 1100963.569 ops/s
Iteration  21: 1102379.105 ops/s
Iteration  22: 1108456.009 ops/s
Iteration  23: 1101979.661 ops/s
Iteration  24: 1104381.595 ops/s
Iteration  25: 1101370.704 ops/s
Iteration  26: 1105471.009 ops/s
Iteration  27: 1106986.419 ops/s
Iteration  28: 1108051.204 ops/s
Iteration  29: 1103114.307 ops/s
Iteration  30: 1110144.155 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering":
  1105539.898 ±(99.9%) 1553.695 ops/s [Average]
  (min, avg, max) = (1100963.569, 1105539.898, 1110144.155), stdev = 2325.498
  CI (99.9%): [1103986.203, 1107093.593] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering  thrpt   30  1105539.898 ± 1553.695  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 236365.991 ops/s
# Warmup Iteration   2: 394781.331 ops/s
# Warmup Iteration   3: 493358.598 ops/s
# Warmup Iteration   4: 498437.068 ops/s
# Warmup Iteration   5: 497963.097 ops/s
# Warmup Iteration   6: 485619.026 ops/s
# Warmup Iteration   7: 415342.065 ops/s
# Warmup Iteration   8: 497925.397 ops/s
# Warmup Iteration   9: 496244.150 ops/s
# Warmup Iteration  10: 497466.794 ops/s
# Warmup Iteration  11: 498829.696 ops/s
# Warmup Iteration  12: 497004.332 ops/s
# Warmup Iteration  13: 497386.561 ops/s
# Warmup Iteration  14: 498266.159 ops/s
# Warmup Iteration  15: 498990.078 ops/s
# Warmup Iteration  16: 498037.118 ops/s
# Warmup Iteration  17: 497435.977 ops/s
# Warmup Iteration  18: 497995.333 ops/s
# Warmup Iteration  19: 498203.694 ops/s
# Warmup Iteration  20: 498250.984 ops/s
# Warmup Iteration  21: 499138.038 ops/s
# Warmup Iteration  22: 499261.510 ops/s
# Warmup Iteration  23: 498536.721 ops/s
# Warmup Iteration  24: 498585.580 ops/s
# Warmup Iteration  25: 498939.205 ops/s
# Warmup Iteration  26: 498786.899 ops/s
# Warmup Iteration  27: 498947.497 ops/s
# Warmup Iteration  28: 499209.114 ops/s
# Warmup Iteration  29: 499373.440 ops/s
# Warmup Iteration  30: 498212.959 ops/s
Iteration   1: 497517.048 ops/s
Iteration   2: 498448.553 ops/s
Iteration   3: 498667.339 ops/s
Iteration   4: 499090.551 ops/s
Iteration   5: 496079.598 ops/s
Iteration   6: 498969.976 ops/s
Iteration   7: 497752.408 ops/s
Iteration   8: 499584.119 ops/s
Iteration   9: 498705.152 ops/s
Iteration  10: 498619.070 ops/s
Iteration  11: 499107.162 ops/s
Iteration  12: 498687.849 ops/s
Iteration  13: 498619.314 ops/s
Iteration  14: 499975.294 ops/s
Iteration  15: 497822.875 ops/s
Iteration  16: 497552.279 ops/s
Iteration  17: 497605.769 ops/s
Iteration  18: 498171.082 ops/s
Iteration  19: 497024.019 ops/s
Iteration  20: 499383.136 ops/s
Iteration  21: 498789.066 ops/s
Iteration  22: 499855.850 ops/s
Iteration  23: 498218.245 ops/s
Iteration  24: 498145.797 ops/s
Iteration  25: 497402.912 ops/s
Iteration  26: 498209.669 ops/s
Iteration  27: 497667.497 ops/s
Iteration  28: 498263.055 ops/s
Iteration  29: 495408.132 ops/s
Iteration  30: 499665.563 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedBagBy":
  498300.279 ±(99.9%) 689.856 ops/s [Average]
  (min, avg, max) = (495408.132, 498300.279, 499975.294), stdev = 1032.544
  CI (99.9%): [497610.423, 498990.135] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_toImmutableSortedBagBy  thrpt   30  498300.279 ± 689.856  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 370156.589 ops/s
# Warmup Iteration   2: 613115.069 ops/s
# Warmup Iteration   3: 713228.017 ops/s
# Warmup Iteration   4: 720981.691 ops/s
# Warmup Iteration   5: 719109.556 ops/s
# Warmup Iteration   6: 666319.818 ops/s
# Warmup Iteration   7: 659968.692 ops/s
# Warmup Iteration   8: 719480.490 ops/s
# Warmup Iteration   9: 720759.843 ops/s
# Warmup Iteration  10: 720715.108 ops/s
# Warmup Iteration  11: 721539.954 ops/s
# Warmup Iteration  12: 722275.719 ops/s
# Warmup Iteration  13: 721409.453 ops/s
# Warmup Iteration  14: 721657.668 ops/s
# Warmup Iteration  15: 721721.381 ops/s
# Warmup Iteration  16: 721955.230 ops/s
# Warmup Iteration  17: 718171.710 ops/s
# Warmup Iteration  18: 723335.356 ops/s
# Warmup Iteration  19: 724965.820 ops/s
# Warmup Iteration  20: 723705.979 ops/s
# Warmup Iteration  21: 720756.791 ops/s
# Warmup Iteration  22: 724558.310 ops/s
# Warmup Iteration  23: 722567.342 ops/s
# Warmup Iteration  24: 723607.038 ops/s
# Warmup Iteration  25: 723188.044 ops/s
# Warmup Iteration  26: 719053.904 ops/s
# Warmup Iteration  27: 723926.566 ops/s
# Warmup Iteration  28: 723492.175 ops/s
# Warmup Iteration  29: 722797.566 ops/s
# Warmup Iteration  30: 719661.780 ops/s
Iteration   1: 724924.679 ops/s
Iteration   2: 722471.660 ops/s
Iteration   3: 723026.303 ops/s
Iteration   4: 721582.700 ops/s
Iteration   5: 722821.946 ops/s
Iteration   6: 723603.980 ops/s
Iteration   7: 724952.411 ops/s
Iteration   8: 723330.574 ops/s
Iteration   9: 722232.223 ops/s
Iteration  10: 722534.154 ops/s
Iteration  11: 724873.754 ops/s
Iteration  12: 722583.518 ops/s
Iteration  13: 726381.001 ops/s
Iteration  14: 720421.978 ops/s
Iteration  15: 724202.040 ops/s
Iteration  16: 723911.140 ops/s
Iteration  17: 724228.633 ops/s
Iteration  18: 722809.854 ops/s
Iteration  19: 725232.823 ops/s
Iteration  20: 721913.191 ops/s
Iteration  21: 723243.591 ops/s
Iteration  22: 722102.320 ops/s
Iteration  23: 723321.113 ops/s
Iteration  24: 722691.612 ops/s
Iteration  25: 723834.792 ops/s
Iteration  26: 721971.515 ops/s
Iteration  27: 724127.980 ops/s
Iteration  28: 721499.436 ops/s
Iteration  29: 724390.914 ops/s
Iteration  30: 722023.090 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering":
  723241.497 ±(99.9%) 880.321 ops/s [Average]
  (min, avg, max) = (720421.978, 723241.497, 726381.001), stdev = 1317.623
  CI (99.9%): [722361.177, 724121.818] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score     Error  Units
TreeBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering  thrpt   30  723241.497 ± 880.321  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 501997.873 ops/s
# Warmup Iteration   2: 922478.814 ops/s
# Warmup Iteration   3: 1049769.958 ops/s
# Warmup Iteration   4: 1054678.964 ops/s
# Warmup Iteration   5: 1057588.291 ops/s
# Warmup Iteration   6: 884706.336 ops/s
# Warmup Iteration   7: 1058028.648 ops/s
# Warmup Iteration   8: 1058901.459 ops/s
# Warmup Iteration   9: 1055560.044 ops/s
# Warmup Iteration  10: 1054481.826 ops/s
# Warmup Iteration  11: 1056027.271 ops/s
# Warmup Iteration  12: 1052026.918 ops/s
# Warmup Iteration  13: 1056895.344 ops/s
# Warmup Iteration  14: 1056132.988 ops/s
# Warmup Iteration  15: 1055773.539 ops/s
# Warmup Iteration  16: 1054756.176 ops/s
# Warmup Iteration  17: 1052959.394 ops/s
# Warmup Iteration  18: 1052675.414 ops/s
# Warmup Iteration  19: 1055825.499 ops/s
# Warmup Iteration  20: 1055488.449 ops/s
# Warmup Iteration  21: 1054893.102 ops/s
# Warmup Iteration  22: 1053676.977 ops/s
# Warmup Iteration  23: 1050515.069 ops/s
# Warmup Iteration  24: 1055375.795 ops/s
# Warmup Iteration  25: 1055297.024 ops/s
# Warmup Iteration  26: 1055867.978 ops/s
# Warmup Iteration  27: 1058417.068 ops/s
# Warmup Iteration  28: 1056772.497 ops/s
# Warmup Iteration  29: 1057196.956 ops/s
# Warmup Iteration  30: 1058038.316 ops/s
Iteration   1: 1060179.784 ops/s
Iteration   2: 1059387.175 ops/s
Iteration   3: 1055805.676 ops/s
Iteration   4: 1054227.981 ops/s
Iteration   5: 1057799.674 ops/s
Iteration   6: 1056124.315 ops/s
Iteration   7: 1055009.286 ops/s
Iteration   8: 1058873.275 ops/s
Iteration   9: 1055269.321 ops/s
Iteration  10: 1054198.710 ops/s
Iteration  11: 1059446.811 ops/s
Iteration  12: 1057268.192 ops/s
Iteration  13: 1052403.001 ops/s
Iteration  14: 1052683.534 ops/s
Iteration  15: 1052765.805 ops/s
Iteration  16: 1051613.365 ops/s
Iteration  17: 1053830.592 ops/s
Iteration  18: 1055834.046 ops/s
Iteration  19: 1056183.187 ops/s
Iteration  20: 1058269.138 ops/s
Iteration  21: 1056331.644 ops/s
Iteration  22: 1057245.310 ops/s
Iteration  23: 1056993.478 ops/s
Iteration  24: 1055543.256 ops/s
Iteration  25: 1054724.438 ops/s
Iteration  26: 1055412.878 ops/s
Iteration  27: 1058117.687 ops/s
Iteration  28: 1053886.884 ops/s
Iteration  29: 1055595.934 ops/s
Iteration  30: 1056012.171 ops/s


Result "org.eclipse.collections.impl.bag.sorted.mutable.TreeBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator":
  1055901.218 ±(99.9%) 1463.159 ops/s [Average]
  (min, avg, max) = (1051613.365, 1055901.218, 1060179.784), stdev = 2189.987
  CI (99.9%): [1054438.059, 1057364.377] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
TreeBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator  thrpt   30  1055901.218 ± 1463.159  ops/s
----------------------------------------
